(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var DDP = Package['ddp-client'].DDP;
var DDPServer = Package['ddp-server'].DDPServer;
var check = Package.check.check;
var Match = Package.check.Match;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var JsonRoutes = Package['simple:json-routes'].JsonRoutes;
var RestMiddleware = Package['simple:json-routes'].RestMiddleware;
var Restivus = Package['nimble:restivus'].Restivus;
var SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;
var MongoObject = Package['aldeed:simple-schema'].MongoObject;
var Tabular = Package['aldeed:tabular'].Tabular;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var WorkflowManager = Package['steedos:app-workflow'].WorkflowManager;
var uuflowManager = Package['steedos:app-workflow'].uuflowManager;
var pushManager = Package['steedos:app-workflow'].pushManager;
var steedosExport = Package['steedos:app-workflow'].steedosExport;
var steedosImport = Package['steedos:app-workflow'].steedosImport;
var Template = Package['meteorhacks:ssr'].Template;
var SSR = Package['meteorhacks:ssr'].SSR;
var SubsManager = Package['meteorhacks:subs-manager'].SubsManager;
var WebApp = Package.webapp.WebApp;
var WebAppInternals = Package.webapp.WebAppInternals;
var main = Package.webapp.main;
var moment = Package['momentjs:moment'].moment;
var CFDataManager = Package['steedos:autoform'].CFDataManager;
var Selector = Package['steedos:base'].Selector;
var Steedos = Package['steedos:base'].Steedos;
var AjaxCollection = Package['steedos:base'].AjaxCollection;
var SteedosDataManager = Package['steedos:base'].SteedosDataManager;
var SteedosOffice = Package['steedos:base'].SteedosOffice;
var billingManager = Package['steedos:base'].billingManager;
var MailQueue = Package['steedos:mailqueue'].MailQueue;
var WebhookQueue = Package['steedos:webhookqueue'].WebhookQueue;
var _i18n = Package['universe:i18n']._i18n;
var i18n = Package['universe:i18n'].i18n;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var meteorInstall = Package.modules.meteorInstall;
var HTML = Package.htmljs.HTML;
var Collection2 = Package['aldeed:collection2-core'].Collection2;
var FS = Package['steedos:cfs-base-package'].FS;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;

/* Package-scope variables */
var __coffeescriptShare, Workflow, InstanceReadOnlyTemplate, TemplateManager, SteedosTable, year, month, date, hours, seconds, locale, utcOffset, str, addItemTr, values_history, current_user_info, flow_id, userId, orgFieldUsers, formula_values, new_ins_id, instanceHtml, Form_formula, getHandlersManager, permissionManager, approveManager, flowManager, formManager, stepManager, workflowTemplate, InstanceManager, WorkflowManager_format, CoreForm, InstanceNumberRules;

var require = meteorInstall({"node_modules":{"meteor":{"steedos:workflow":{"checkNpm.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/checkNpm.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let checkNpmVersions;
module.link("meteor/tmeasday:check-npm-versions", {
  checkNpmVersions(v) {
    checkNpmVersions = v;
  }

}, 0);
checkNpmVersions({
  "node-schedule": "^1.3.1",
  cookies: "^0.6.2",
  "xml2js": "^0.4.19",
  mkdirp: "^0.3.5"
}, 'steedos:workflow');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"URI.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/URI.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.17.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */
(function (root, factory) {
  'use strict'; // https://github.com/umdjs/umd/blob/master/returnExports.js
  // if (typeof exports === 'object') {
  //   // Node
  //   module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  // } else

  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
})(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase

  /*jshint camelcase: false */
  // save current URI variable, if any

  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;

    var _baseSupplied = arguments.length >= 2; // Allow instantiation without the 'new' keyword


    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    this.href(url); // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor

    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  URI.version = '1.17.0';
  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */


      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length; // value may be string, number, array, regexp

    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);

    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    } // arrays can't be equal if they have different amount of content


    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function () {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  }; // state: allow duplicate query parameters (a=1&a=1)


  URI.duplicateQueryParameters = false; // state: replaces + with %20 (space in query strings)

  URI.escapeQuerySpace = true; // static properties

  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\.-]/i;
  URI.punycode_expression = /(xn--)/i; // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?

  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/; // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt

  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/; // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html

  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
  }; // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports

  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  }; // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -

  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/; // map DOM Elements to their URI attribute

  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src',
    // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };

  URI.getDomAttribute = function (node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase(); // <input> should only expose src for type="image"

    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  } // encoding / decoding according to RFC3986


  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, '%2A');
  }

  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;

  URI.iso8859 = function () {
    URI.encode = escape;
    URI.decode = unescape;
  };

  URI.unicode = function () {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };

  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };

  URI.encodeQuery = function (string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };

  URI.decodeQuery = function (string, escapeQuerySpace) {
    string += '';

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch (e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  }; // generate encode/decode path functions


  var _parts = {
    'encode': 'encode',
    'decode': 'decode'
  };

  var _part;

  var generateAccessor = function (_group, _part) {
    return function (string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function (c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function (_sep, _codingFuncName, _innerCodingFuncName) {
    return function (string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;

      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function (string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  }; // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.


  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function (string, parts) {
    var pos;

    if (!parts) {
      parts = {};
    } // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
    // extract fragment


    pos = string.indexOf('#');

    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // extract query


    pos = string.indexOf('?');

    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // extract protocol


    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2); // extract "user:pass@host:port"

      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');

      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;

        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3); // extract "user:pass@host:port"

          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    } // what's left must be the path


    parts.path = string; // and we're done

    return parts;
  };

  URI.parseHost = function (string, parts) {
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233
    string = string.replace(/\\/g, '/'); // extract host:port

    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;

      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);

      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    return string.substring(pos) || '/';
  };

  URI.parseAuthority = function (string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };

  URI.parseUserinfo = function (string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t; // authority@ must come before /path

    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };

  URI.parseQuery = function (string, escapeQuerySpace) {
    if (!string) {
      return {};
    } // throw out the funky business - "?"[name"="value"&"]+


    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace); // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters

      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function (parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += URI.buildAuthority(parts) || '';

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }

    return t;
  };

  URI.buildHost = function (parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };

  URI.buildAuthority = function (parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };

  URI.buildUserinfo = function (parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);

      if (parts.password) {
        t += ':' + URI.encode(parts.password);
      }

      t += '@';
    }

    return t;
  };

  URI.buildQuery = function (data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
    var t = '';
    var unique, key, i, length;

    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};

          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);

              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };

  URI.buildQueryParameter = function (name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function (data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };

  URI.removeQuery = function (data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };

  URI.hasQuery = function (data, name, value, withinArray) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          if (!URI.hasQuery(data, key, name[key])) {
            return false;
          }
        }
      }

      return true;
    } else if (typeof name !== 'string') {
      throw new TypeError('URI.hasQuery() accepts an object, string as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data;
      // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);

        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);

      /* falls through */

      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };

  URI.commonPath = function (one, two) {
    var length = Math.min(one.length, two.length);
    var pos; // find first non-matching character

    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    } // revert to last /


    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function (string, callback, options) {
    options || (options = {});

    var _start = options.start || URI.findUri.start;

    var _end = options.end || URI.findUri.end;

    var _trim = options.trim || URI.findUri.trim;

    var _attributeOpen = /[a-z0-9-]=["']?$/i;
    _start.lastIndex = 0;

    while (true) {
      var match = _start.exec(string);

      if (!match) {
        break;
      }

      var start = match.index;

      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);

        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end).replace(_trim, '');

      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function (v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js
    if (v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }
    }
  }; // noConflict


  URI.noConflict = function (removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function (deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function () {
    return new URI(this);
  };

  p.valueOf = p.toString = function () {
    return this.build(false)._string;
  };

  function generateSimpleAccessor(_part) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';

          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function (v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? '?' + t : t;
  };

  p.hash = function (v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? '#' + t : t;
  };

  p.pathname = function (v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }

      this.build(!build);
      return this;
    }
  };

  p.path = p.pathname;

  p.href = function (href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;

    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);

    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    } // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)


    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;

      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  }; // identification accessors


  p.is = function (what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;
      // hostname identification

      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  }; // component specific input validation


  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function (v, build) {
    if (v !== undefined) {
      if (v) {
        // accept trailing ://
        v = v.replace(/:(\/\/)?$/, '');

        if (!v.match(URI.protocol_expression)) {
          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
        }
      }
    }

    return _protocol.call(this, v, build);
  };

  p.scheme = p.protocol;

  p.port = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';

        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        if (v.match(/[^0-9]/)) {
          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
        }
      }
    }

    return _port.call(this, v, build);
  };

  p.hostname = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {};
      var res = URI.parseHost(v, x);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;
    }

    return _hostname.call(this, v, build);
  }; // compound accessors


  p.origin = function (v, build) {
    var parts;

    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();
      if (!authority) return '';
      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
      return this;
    }
  };

  p.host = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.authority = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.userinfo = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      if (!this._parts.username) {
        return '';
      }

      var t = URI.buildUserinfo(this._parts);
      return t.substring(0, t.length - 1);
    } else {
      if (v[v.length - 1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };

  p.resource = function (v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  }; // fraction accessors


  p.subdomain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    } // convenience, return "www" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // grab domain and add another segment


      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;

      var sub = this._parts.hostname.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v) {
        URI.ensureValidHostname(v);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.domain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // convenience, return "example.org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // if hostname consists of 1 or 2 segments, it must be the domain


      var t = this._parts.hostname.match(/\./g);

      if (t && t.length < 2) {
        return this._parts.hostname;
      } // grab tld and add another segment


      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end - 1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      URI.ensureValidHostname(v);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.tld = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // return "org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');

      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.directory = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
      return v ? URI.decodePath(res) : res;
    } else {
      var e = this._parts.path.length - this.filename().length;

      var directory = this._parts.path.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(directory)); // fully qualifier directories begin with a slash

      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      } // directories always end with a slash


      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.filename = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');

      var res = this._parts.path.substring(pos + 1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };

  p.suffix = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      } // suffix may only contain alnum characters (yup, I made this up.)


      s = filename.substring(pos + 1);
      res = /^[a-z0-9%]+$/i.test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.segment = function (segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined ? segments : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = []; // collapse empty elements within array

        for (var i = 0, l = v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length - 1].length) {
            segments.pop();
          }

          segments.push(trimSlashes(v[i]));
        }
      } else if (v || typeof v === 'string') {
        v = trimSlashes(v);

        if (segments[segments.length - 1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length - 1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = trimSlashes(v);
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };

  p.segmentCoded = function (segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);

      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = typeof v === 'string' || v instanceof String ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  }; // mutating query string


  var q = p.query;

  p.query = function (v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };

  p.setQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.addQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.removeQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.hasQuery = function (name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };

  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery; // sanitizing URLs

  p.normalize = function () {
    if (this._parts.urn) {
      return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    }

    return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
  };

  p.normalizeProtocol = function (build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizeHostname = function (build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizePort = function (build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizePath = function (build) {
    var _path = this._parts.path;

    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    var _was_relative;

    var _leadingParents = '';

    var _parent, _pos; // handle relative paths


    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    } // handle relative files (as opposed to directories)


    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    } // resolve simples


    _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, '/').replace(/\/{2,}/g, '/'); // remember leading parents

    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';

      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    } // resolve parents


    while (true) {
      _parent = _path.indexOf('/..');

      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');

      if (_pos === -1) {
        _pos = _parent;
      }

      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    } // revert to relative


    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    _path = URI.recodePath(_path);
    this._parts.path = _path;
    this.build(!build);
    return this;
  };

  p.normalizePathname = p.normalizePath;

  p.normalizeQuery = function (build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };

  p.normalizeFragment = function (build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function () {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = escape;
    URI.decode = decodeURIComponent;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.unicode = function () {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.readable = function () {
    var uri = this.clone(); // removing username, password, because they shouldn't be displayed according to RFC 3986

    uri.username('').password('').normalize();
    var t = '';

    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);

        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);

    if (uri._parts.query) {
      var q = '';

      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, '%26');
        }
      }

      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  }; // resolving relative and absolute URLs


  p.absoluteTo = function (base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (!resolved._parts.protocol) {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; p = properties[i]; i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;

      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else if (resolved._parts.path.substring(-2) === '..') {
      resolved._parts.path += '/';
    }

    if (resolved.path().charAt(0) !== '/') {
      basedir = base.directory();
      basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
      resolved._parts.path = (basedir ? basedir + '/' : '') + resolved._parts.path;
      resolved.normalizePath();
    }

    resolved.build();
    return resolved;
  };

  p.relativeTo = function (base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    } // determine common sub path


    common = URI.commonPath(relativePath, basePath); // If the paths have nothing in common, return a relative URL with the absolute path.

    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, '').replace(/.*?\//g, '../');
    relativeParts.path = parents + relativeParts.path.substring(common.length) || './';
    return relative.build();
  }; // comparing URIs


  p.equals = function (uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;
    one.normalize();
    two.normalize(); // exact match

    if (one.toString() === two.toString()) {
      return true;
    } // extract query string


    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query(''); // definitely not equal if not even non-query parts match

    if (one.toString() !== two.toString()) {
      return false;
    } // query parameters have the same length, even if they're permuted


    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  }; // state


  p.duplicateQueryParameters = function (v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function (v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"collection_helpers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/collection_helpers.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tapi18n.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/tapi18n.coffee                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"core.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/core.coffee                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Workflow = {};
this.ImageSign = {};
this.TracesHandler = {};
this.TracesTemplate = {};
this.InstanceformTemplate = {};
this.InstanceAttachmentTemplate = {};
this.InstanceSignText = {};
this.RelatedInstances = {};
this.RelatedRecords = {};
this.InstanceMacro = {
  context: {}
};
this.TracesManager = {};

InstanceSignText.isOpinionField_from_string = function (field_formula) {
  return (field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{yijianlan:") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{\"yijianlan\":") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{'yijianlan':") : void 0) > -1;
};

InstanceSignText.includesOpinionField = function (form, form_version) {
  var _form_version, field_formulas, fields;

  field_formulas = new Array();
  _form_version = {};

  if (Meteor.isServer) {
    _form_version = uuflowManager.getFormVersion(db.forms.findOne({
      _id: form
    }), form_version);
  } else {
    _form_version = db.form_versions.findOne({
      _id: form_version,
      form: form
    });
  }

  fields = (_form_version != null ? _form_version.fields : void 0) || [];
  fields.forEach(function (f) {
    var ref;

    if (f.type === 'table') {
      return console.log('ignore opinion field in table');
    } else if (f.type === 'section') {
      return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
        return field_formulas.push(f1.formula);
      }) : void 0 : void 0;
    } else {
      return field_formulas.push(f.formula);
    }
  });
  return _.some(field_formulas, function (field_formula) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"models":{"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/forms.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flows.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_roles.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_positions.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/instances.coffee                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/categories.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"spaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/spaces.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleted_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/deleted_instances.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"auth_tokens.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/auth_tokens.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
db.auth_tokens = new Meteor.Collection('auth_tokens');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"webhooks.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/webhooks.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_user_signs.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_users.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"cfs":{"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/cfs/instances.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"admin.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/admin.coffee                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"client":{"lib":{"instance_readonly_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/instance_readonly_template.coffee                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _getLocale, _getRequiredFields, _getStartStepEditableFields, _getStartStepRequiredFields, _getTemplateData, _getViewHtml, getLinkText;

InstanceReadOnlyTemplate = {};
InstanceReadOnlyTemplate.instance_attachment = "<tr>\n	<td class=\"ins-attach-view\">\n		<a href=\"{{ins_attach_download_url _id absolute}}\" class=\"ins_attach_href\" target=\"_parent\" data-name=\"{{this.name}}\" data-type=\"{{this.original.type}}\" data-id=\"{{_id}}\">{{this.name}}</a>\n	</td>\n</tr>";
InstanceReadOnlyTemplate.afSelectUserRead = "<div class='selectUser form-control ins_applicant'>{{value}}</div>";
InstanceReadOnlyTemplate.afFormGroupRead = "<div class='form-group'>\n	{{#with getField this.name}}\n		{{#if equals type 'section'}}\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if showLabel}}\n					<label>{{getLabel code}}</label>\n				{{/if}}\n				<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n			{{/if}}\n		{{/if}}\n	{{/with}}\n</div>";
InstanceReadOnlyTemplate.afFormGroup = "\n{{#with getField this.name}}\n		{{#if equals type 'section'}}\n			<div class=\"form-group\">\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n  				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if equals type 'input'}}\n					<div class=\"form-group\" data-required=\"{{#if is_required}}true{{/if}}\">\n						<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n						{{#if is_textarea}}\n							<textarea title=\"{{getLabel code}}\" name=\"{{code}}\" {{getPermissions code}} data-schema-key=\"{{getLabel code}}\" class=\"form-control\"></textarea>\n						{{/if}}\n						{{#unless is_textarea}}\n							<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" {{getPermissions code}} data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n						{{/unless}}\n					</div>\n				{{else}}\n					{{#if equals type 'number'}}\n						<div class=\"form-group\">\n							<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n							<input type=\"number\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n						</div>\n					{{else}}\n						{{#if equals type 'date'}}\n							<div class=\"form-group\">\n								<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n								<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type=\"date\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n							</div>\n						{{else}}\n							{{#if equals type 'dateTime'}}\n								<div class=\"form-group\">\n									<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n									<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type='datetime' data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n								</div>\n							{{else}}\n								{{#if equals type 'password'}}\n									<div class=\"form-group\">\n										<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n										<input type=\"password\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n									</div>\n								{{else}}\n									{{#if equals type 'select'}}\n										<div class=\"form-group\">\n											<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n											<select name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n												{{#each options this}}\n													<option value=\"{{value}}\">{{label}}</option>\n												{{/each}}\n											</select>\n										</div>\n									{{else}}\n										{{#if equals type 'radio'}}\n											<div class=\"form-group\">\n												<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n												<div class=\"af-radio-group\" data-schema-key=\"{{getLabel code}}\">\n													{{#each options this}}\n        												<label class=\"radio-inline fix-indent\"><input type=\"radio\" value=\"{{value}}\" name=\"{{../code}}\" class=\"radio-inline fix-indent\"> {{label}}</label>\n    													{{/each}}\n    												</div>\n											</div>\n										{{else}}\n											{{#if equals type 'multiSelect'}}\n												<div class=\"form-group\">\n													<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n													<div class=\"af-checkbox-group\" data-schema-key=\"{{getLabel code}}\">\n														{{#each options this}}\n														<label class=\"checkbox-inline fix-indent\"><input type=\"checkbox\" value=\"{{value}}\" name=\"{{../code}}\" class=\"checkbox-inline fix-indent\"> {{label}}</label>\n														{{/each}}\n													</div>\n												</div>\n											{{else}}\n												{{#if equals type 'url'}}\n													<div class=\"form-group\">\n														<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n														<input type=\"url\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n													</div>\n												{{else}}\n													{{#if equals type 'email'}}\n														<div class=\"form-group\">\n															<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n															<input type=\"email\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n														</div>\n													{{else}}\n														{{#if equals type 'checkbox'}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class=\"checkbox\" data-schema-key=\"{{getLabel code}}\">\n																	<label style=\"width: 100%;\"><input type=\"checkbox\" value=\"true\" name=\"{{code}}\" class=\"checkbox-inline fix-indent\"></label>\n																</div>\n															</div>\n														{{else}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n															</div>\n														{{/if}}\n													{{/if}}\n												{{/if}}\n											{{/if}}\n										{{/if}}\n									{{/if}}\n								{{/if}}\n							{{/if}}\n						{{/if}}\n					{{/if}}\n				{{/if}}\n			{{/if}}\n		{{/if}}\n	{{/with}}";

InstanceReadOnlyTemplate.create = function (tempalteName, steedosData) {
  var template, templateCompiled, templateRenderFunction;
  template = InstanceReadOnlyTemplate[tempalteName];
  templateCompiled = SpacebarsCompiler.compile(template, {
    isBody: true
  });
  templateRenderFunction = eval(templateCompiled);
  Template[tempalteName] = new Blaze.Template(tempalteName, templateRenderFunction);
  Template[tempalteName].steedosData = steedosData;
  return Template[tempalteName].helpers(InstanceformTemplate.helpers);
};

InstanceReadOnlyTemplate.createInstanceSignText = function (steedosData) {
  var instanceSignTextCompiled, instanceSignTextHtml, instanceSignTextRenderFunction;
  instanceSignTextHtml = _getViewHtml('client/views/instance/instance_sign_text.html');
  instanceSignTextCompiled = SpacebarsCompiler.compile(instanceSignTextHtml, {
    isBody: true
  });
  instanceSignTextRenderFunction = eval(instanceSignTextCompiled);
  Template.instanceSignText = new Blaze.Template("instanceSignText", instanceSignTextRenderFunction);
  Template.instanceSignText.steedosData = steedosData;
  return Template.instanceSignText.helpers(InstanceSignText.helpers);
};

InstanceReadOnlyTemplate.createImageSign = function (steedosData) {
  var imageSignCompiled, imageSignHtml, imageSignRenderFunction;
  imageSignHtml = _getViewHtml('client/views/instance/image_sign.html');
  imageSignCompiled = SpacebarsCompiler.compile(imageSignHtml, {
    isBody: true
  });
  imageSignRenderFunction = eval(imageSignCompiled);
  Template.imageSign = new Blaze.Template("imageSign", imageSignRenderFunction);
  Template.imageSign.steedosData = steedosData;
  return Template.imageSign.helpers(ImageSign.helpers);
};

InstanceReadOnlyTemplate.createTracesHanlder = function (steedosData) {
  var tracesHanlderCompiled, tracesHanlderHtml, tracesHanlderRenderFunction;
  tracesHanlderHtml = _getViewHtml('client/views/instance/traces_handler.html');
  tracesHanlderCompiled = SpacebarsCompiler.compile(tracesHanlderHtml, {
    isBody: true
  });
  tracesHanlderRenderFunction = eval(tracesHanlderCompiled);
  Template.instance_traces_handler = new Blaze.Template("instance_traces_handler", tracesHanlderRenderFunction);
  Template.instance_traces_handler.steedosData = steedosData;
  return Template.instance_traces_handler.helpers(TracesHandler.helpers);
};

InstanceReadOnlyTemplate.init = function (steedosData) {
  InstanceReadOnlyTemplate.create("afSelectUserRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("afFormGroup", steedosData);
  }

  InstanceReadOnlyTemplate.create("afFormGroupRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("instance_attachment", {
      absolute: steedosData.absolute
    });
    InstanceReadOnlyTemplate.createImageSign(steedosData);
    InstanceReadOnlyTemplate.createTracesHanlder(steedosData);
    return InstanceReadOnlyTemplate.createInstanceSignText(steedosData);
  }
};

getLinkText = function (item, label, detail_url) {
  if (detail_url) {
    detail_url = detail_url.replace("{_id}", item._id);

    if (!/^http(s?):\/\//.test(detail_url)) {
      detail_url = Steedos.absoluteUrl(detail_url);
    }

    return '<a href="' + detail_url + '" target="_blank">' + label + '</a>';
  } else {
    return label;
  }
};

InstanceReadOnlyTemplate.getValue = function (value, field, locale, utcOffset) {
  var date, detail_url, e, hours, month, seconds, t, t0, t1, year;

  if (!value && value !== false) {
    return '';
  }

  switch (field.type) {
    case 'email':
      value = value ? '<a href=\'mailto:' + value + '\'>' + value + '</a>' : '';
      break;

    case 'url':
      if (value) {
        if (value.indexOf("http") === 0) {
          try {
            value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
          } catch (error) {
            e = error;
            value = "<a href='' target='_blank'>" + value + "</a>";
          }
        } else {
          value = "<a href='http://" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
        }
      } else {
        value = '';
      }

      break;

    case 'group':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("fullname").toString() : void 0;
      } else {
        value = value != null ? value.fullname : void 0;
      }

      break;

    case 'user':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("name").toString() : void 0;
      } else {
        value = value != null ? value.name : void 0;
      }

      break;

    case 'password':
      value = '******';
      break;

    case 'checkbox':
      if (value && value !== 'false') {
        value = TAPi18n.__("form_field_checkbox_yes", {}, locale);
      } else {
        value = TAPi18n.__("form_field_checkbox_no", {}, locale);
      }

      break;

    case 'dateTime':
      if (value && value.length === 16) {
        t = value.split("T");
        t0 = t[0].split("-");
        t1 = t[1].split(":");
        year = t0[0];
        month = t0[1];
        date = t0[2];
        hours = t1[0];
        seconds = t1[1];
        value = new Date(year, month - 1, date, hours, seconds);
      } else {
        value = new Date(value);
      }

      value = InstanceReadOnlyTemplate.formatDate(value, utcOffset);
      break;

    case 'input':
      if (field.is_textarea) {
        value = Spacebars.SafeString(Markdown(value));
      }

      break;

    case 'number':
      if (value || value === 0) {
        value = Steedos.numberToString(value, field.digits);
      }

      break;

    case 'odata':
      detail_url = field.detail_url;

      if (field.is_multiselect) {
        value = _.map(value, function (item) {
          return getLinkText(item, item['@label'], detail_url);
        });
      } else {
        value = getLinkText(value, value['@label'], detail_url);
      }

      break;

    case 'html':
      value = value ? "<div class=\"steedos-html\">" + value + "</div>" : '';
  }

  return value;
};

InstanceReadOnlyTemplate.getLabel = function (fields, code) {
  var field;
  field = fields.findPropertyByPK("code", code);

  if (field) {
    if (field.name) {
      return field.name;
    } else {
      return field.code;
    }
  }
};

InstanceReadOnlyTemplate.getInstanceFormVersion = function (instance) {
  var form, form_fields, form_version;
  form = db.forms.findOne(instance.form);
  form_version = {};
  form_fields = [];

  if (form.current._id === instance.form_version) {
    form_version = form.current;
  } else {
    form_version = _.where(form.historys, {
      _id: instance.form_version
    })[0];
  }

  form_version.fields.forEach(function (field) {
    if (field.type === 'section') {
      form_fields.push(field);

      if (field.fields) {
        return field.fields.forEach(function (f) {
          return form_fields.push(f);
        });
      }
    } else if (field.type === 'table') {
      field['sfields'] = field['fields'];
      delete field['fields'];
      return form_fields.push(field);
    } else {
      return form_fields.push(field);
    }
  });
  form_version.fields = form_fields;
  return form_version;
};

InstanceReadOnlyTemplate.getFlowVersion = function (instance) {
  var flow, flow_version;
  flow = db.flows.findOne(instance.flow);
  flow_version = {};

  if (flow.current._id === instance.flow_version) {
    flow_version = flow.current;
  } else {
    flow_version = _.where(flow.historys, {
      _id: instance.flow_version
    })[0];
  }

  return flow_version;
};

_getViewHtml = function (path) {
  var viewHtml;
  viewHtml = Assets.getText(path);

  if (viewHtml) {
    viewHtml = viewHtml.replace(/<template[\w\s\"\=']+>/i, "").replace(/<\/template>/i, "");
  }

  return viewHtml;
};

_getLocale = function (user) {
  var locale, ref, ref1;

  if ((user != null ? (ref = user.locale) != null ? ref.toLocaleLowerCase() : void 0 : void 0) === 'zh-cn') {
    locale = "zh-CN";
  } else if ((user != null ? (ref1 = user.locale) != null ? ref1.toLocaleLowerCase() : void 0 : void 0) === 'en-us') {
    locale = "en";
  } else {
    locale = "zh-CN";
  }

  return locale;
};

_getRequiredFields = function (fields, rev) {
  if (!rev) {
    rev = [];
  }

  fields.forEach(function (field) {
    if (field.type === 'section') {
      return _getRequiredFields(field.fields, rev);
    } else if (field.type === 'table') {} else {
      if (field.is_required) {
        return rev.push(field.code);
      }
    }
  });
  return rev;
};

_getStartStepEditableFields = function (fields, steps) {
  var editableCode, startStep;
  startStep = steps.findPropertyByPK("step_type", "start");
  editableCode = [];

  _.keys(startStep.permissions).forEach(function (key) {
    if (startStep.permissions[key] === 'editable') {
      return editableCode.push(key);
    }
  });

  return editableCode;
};

_getStartStepRequiredFields = function (fields, steps) {
  var editableCode, requiredFields;
  requiredFields = _getRequiredFields(fields);
  editableCode = _getStartStepEditableFields(fields, steps);
  return _.intersection(requiredFields, editableCode);
};

_getTemplateData = function (user, space, instance, options) {
  var flow, form, form_version, locale, steedosData;

  if (Meteor.isServer) {
    form_version = InstanceReadOnlyTemplate.getInstanceFormVersion(instance);
  } else {
    form_version = WorkflowManager.getInstanceFormVersion(instance);
  }

  locale = _getLocale(user);
  steedosData = {};

  if (Meteor.isClient) {
    steedosData = _.clone(WorkflowManager_format.getAutoformSchemaValues());
    steedosData.insname = instance.name;
    steedosData.ins_state = instance.state;
    steedosData.ins_final_decision = instance.ins_final_decision;
    steedosData.ins_code = instance.code;
    steedosData.ins_is_archived = instance.is_archived;
    steedosData.ins_is_deleted = instance.ins_is_deleted;
    steedosData.applicant_name = instance.applicant_name;
    steedosData.applicantContext = instance.applicant_name;
  }

  steedosData.instance = instance;
  steedosData.form_version = form_version;
  steedosData.locale = locale;
  steedosData.utcOffset = user.utcOffset;
  steedosData.space = instance.space;
  steedosData.sessionUserId = user._id;

  if (Meteor.isServer) {
    if (options != null ? options.editable : void 0) {
      form = db.forms.findOne({
        _id: instance.form
      });
      flow = db.flows.findOne({
        _id: instance.flow
      });
      steedosData.startStepEditableFields = _getStartStepEditableFields(form.current.fields, flow.current.steps);
    }
  }

  return steedosData;
};

InstanceReadOnlyTemplate.formatDate = function (date, utcOffset) {
  var passing;

  if (Meteor.isServer) {
    passing = false;
  } else {
    passing = true;
  }

  if (!utcOffset && utcOffset !== 0) {
    utcOffset = 8;
  }

  return moment(date).utcOffset(utcOffset, passing).format("YYYY-MM-DD HH:mm");
};

InstanceReadOnlyTemplate.getInstanceView = function (user, space, instance, options) {
  var body, instanceCompiled, instanceRenderFunction, instanceTemplate, steedosData;
  steedosData = _getTemplateData(user, space, instance, options);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  instanceTemplate = TemplateManager.getTemplate(instance, options != null ? options.templateName : void 0);
  instanceTemplate = instanceTemplate.replace(/afSelectUser/g, "afSelectUserRead");

  if (!(options != null ? options.editable : void 0)) {
    instanceTemplate = instanceTemplate.replace(/afFormGroup/g, "afFormGroupRead");
  }

  instanceCompiled = SpacebarsCompiler.compile(instanceTemplate, {
    isBody: true
  });
  instanceRenderFunction = eval(instanceCompiled);
  Template.instance_readonly_view = new Blaze.Template("instance_readonly_view", instanceRenderFunction);
  Template.instance_readonly_view.steedosData = steedosData;
  Template.instance_readonly_view.helpers(InstanceformTemplate.helpers);
  InstanceReadOnlyTemplate.init(steedosData);
  body = Blaze.toHTMLWithData(Template.instance_readonly_view, steedosData);
  return "<div id='instanceform' >\n	" + body + "\n</div>";
};

InstanceReadOnlyTemplate.getTracesView = function (user, space, instance, options) {
  var body, form, steedosData, traceCompiled, traceRenderFunction, tracesHtml;
  steedosData = _getTemplateData(user, space, instance);
  form = db.forms.findOne(instance.form);

  if (form.instance_style === "table" || (options != null ? options.templateName : void 0) === "table") {
    tracesHtml = _getViewHtml('client/views/instance/traces_table.html');
  } else {
    tracesHtml = _getViewHtml('client/views/instance/traces.html');
  }

  traceCompiled = SpacebarsCompiler.compile(tracesHtml, {
    isBody: true
  });
  traceRenderFunction = eval(traceCompiled);
  Template.trace_readonly_view = new Blaze.Template("trace_readonly_view", traceRenderFunction);
  Template.trace_readonly_view.steedosData = steedosData;
  Template.trace_readonly_view.helpers(TracesTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.trace_readonly_view, instance.traces);
  return body;
};

InstanceReadOnlyTemplate.getAttachmentView = function (user, space, instance) {
  var attachmentCompiled, attachmentHtml, attachmentRenderFunction, body, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  attachmentHtml = _getViewHtml('client/views/instance/instance_attachments.html');
  attachmentCompiled = SpacebarsCompiler.compile(attachmentHtml, {
    isBody: true
  });
  attachmentRenderFunction = eval(attachmentCompiled);
  Template.attachments_readonly_view = new Blaze.Template("attachments_readonly_view", attachmentRenderFunction);
  Template.attachments_readonly_view.steedosData = steedosData;
  Template.attachments_readonly_view.helpers(InstanceAttachmentTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.attachments_readonly_view);
  return body;
};

InstanceReadOnlyTemplate.getRelatedInstancesView = function (user, space, instance, options) {
  var body, relatedInstancesCompiled, relatedInstancesHtml, relatedInstancesRenderFunction, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  relatedInstancesHtml = _getViewHtml('client/views/instance/related_instances.html');
  relatedInstancesCompiled = SpacebarsCompiler.compile(relatedInstancesHtml, {
    isBody: true
  });
  relatedInstancesRenderFunction = eval(relatedInstancesCompiled);
  Template.related_instances_view = new Blaze.Template("related_instances_view", relatedInstancesRenderFunction);
  Template.related_instances_view.steedosData = steedosData;
  Template.related_instances_view.helpers(RelatedInstances.helpers);
  body = Blaze.toHTMLWithData(Template.related_instances_view, steedosData);
  return body;
};

InstanceReadOnlyTemplate.getRelatedRecordsView = function (user, space, instance, options) {
  var body, relatedRecordsCompiled, relatedRecordsHtml, relatedRecordsRenderFunction, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  relatedRecordsHtml = _getViewHtml('client/views/instance/related_records.html');
  relatedRecordsCompiled = SpacebarsCompiler.compile(relatedRecordsHtml, {
    isBody: true
  });
  relatedRecordsRenderFunction = eval(relatedRecordsCompiled);
  Template.related_records_view = new Blaze.Template("related_records_view", relatedRecordsRenderFunction);
  Template.related_records_view.steedosData = steedosData;
  Template.related_records_view.helpers(RelatedRecords.helpers);
  body = Blaze.toHTMLWithData(Template.related_records_view, steedosData);
  return body;
};

InstanceReadOnlyTemplate.getOnLoadScript = function (instance) {
  var form_script, form_version;
  form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
  form_script = form_version.form_script;

  if (form_script && form_script.replace(/\n/g, "").replace(/\s/g, "").length > 0) {
    form_script = "CoreForm = {};CoreForm.instanceform = {};" + form_script;
    return form_script += ";if(CoreForm.form_OnLoad){window.onload = CoreForm.form_OnLoad();}";
  } else {
    return form_script = "";
  }
};

InstanceReadOnlyTemplate.getInstanceHtml = function (user, space, instance, options) {
  var allCssLink, attachment, body, creatorService, cssHref, form, formDescription, formDescriptionHtml, html, ins_record_ids, instanceBoxStyle, instance_style, locale, onLoadScript, openFileScript, ref, ref1, related_instances, related_records, showTracesBtn, showTracesScript, trace, traceCheck, width;
  body = InstanceReadOnlyTemplate.getInstanceView(user, space, instance, options);
  onLoadScript = InstanceReadOnlyTemplate.getOnLoadScript(instance);
  creatorService = (ref = Meteor.settings["public"].webservices) != null ? (ref1 = ref.creator) != null ? ref1.url : void 0 : void 0;
  ins_record_ids = instance.record_ids;
  locale = _getLocale(user);
  openFileScript = "if(window.isNode && isNode()){\n	attachs = document.getElementsByClassName(\"ins_attach_href\");\n	for(var i = 0; i < attachs.length; i++){\n		attach = attachs[i];\n		attach.addEventListener(\"click\", function(e){\n			if(isImage(this.dataset.type) || isHtml(this.dataset.type)){\n				e.preventDefault();\n				openWindow(\"/api/files/instances/\" + this.dataset.id);\n			}else if(nw_core.canOpenFile(this.dataset.name)){\n				e.preventDefault();\n				nw_core.openFile(this.href, this.dataset.name)\n			}\n		});\n	}\n}\n\nvar flow = \"" + instance.flow + "\";\nvar space = \"" + instance.space + "\";\n\nfunction getCookie(name){\n	let pattern = RegExp(name + \"=.[^;]*\")\n	let matched = document.cookie.match(pattern)\n	if(matched){\n		let cookie = matched[0].split('=')\n		return cookie[1]\n	}\n	return ''\n}\n\nvar records = document.getElementsByClassName(\"ins-related-records\");\nfor(var i = 0; i < records.length; i++){\n		var record = records[i];\n		record.addEventListener(\"click\", function(e){\n			var creatorService = \"" + creatorService + "\"\n			var ins_record_ids = " + JSON.stringify(ins_record_ids) + "\n			if(creatorService && ins_record_ids && ins_record_ids.length > 0){\n				var objcetName = ins_record_ids[0].o\n				var id = ins_record_ids[0].ids[0]\n				var uobj = {};\n				uobj[\"X-User-Id\"] = getCookie(\"X-User-Id\");\n				uobj[\"X-Auth-Token\"] = getCookie(\"X-Auth-Token\");\n				redirectUrl = creatorService + \"app/-/\" + objcetName + \"/view/\" + id + \"?\" + $.param(uobj);\n				openWindow(redirectUrl);\n			}\n		});\n	}\n";

  if (!Steedos.isMobile()) {
    form = db.forms.findOne(instance.form);

    if ((form != null ? form.instance_style : void 0) === 'table') {
      instance_style = "instance-table";
    }
  }

  if ((options != null ? options.templateName : void 0) === 'table') {
    instance_style = "instance-table";
  }

  if (options != null ? options.instance_style : void 0) {
    instance_style = options.instance_style;
  }

  if (!options || options.showTrace === true) {
    trace = InstanceReadOnlyTemplate.getTracesView(user, space, instance);
  } else {
    trace = "";
  }

  instanceBoxStyle = "";

  if (instance && instance.final_decision) {
    if (instance.final_decision === "approved") {
      instanceBoxStyle = "box-success";
    } else if (instance.final_decision === "rejected") {
      instanceBoxStyle = "box-danger";
    }
  }

  if (!options || options.showAttachments === true) {
    attachment = InstanceReadOnlyTemplate.getAttachmentView(user, space, instance);
    related_instances = InstanceReadOnlyTemplate.getRelatedInstancesView(user, space, instance, options);
    related_records = InstanceReadOnlyTemplate.getRelatedRecordsView(user, space, instance, options);
  } else {
    attachment = "";
    related_instances = "";
    related_records = "";
  }

  width = "960px";

  if (options != null ? options.width : void 0) {
    width = "";
  }

  cssHref = Meteor.absoluteUrl("steedos-css");
  allCssLink = "<link rel=\"stylesheet\" type=\"text/css\" class=\"__meteor-css__\" href=\"" + cssHref + "\">";
  traceCheck = "";

  if (!_.isEmpty(trace)) {
    traceCheck = "checked";
  }

  if ((options != null ? options.tagger : void 0) === 'email' || (options != null ? options.editable : void 0)) {
    showTracesBtn = "";
  } else {
    showTracesBtn = "<div class=\"navigation-bar btn-group no-print\" style=\"min-width: 600px; z-index: 999\">\n	<div class=\"print-tool\">\n		<label class=\"cbx-label\"><input type=\"checkbox\" class=\"cbx-print cbx-print-attachments\" id=\"cbx-print-attachments\" checked=\"checked\"><span>" + TAPi18n.__('instance_attachment', {}, locale) + "</span></label>\n		<label class=\"cbx-label\"><input type=\"checkbox\" class=\"cbx-print cbx-print-traces\" id=\"cbx-print-traces\" checked=\"" + traceCheck + "\"><span>" + TAPi18n.__('instance_approval_history', {}, locale) + "</span></label>\n	</div>\n</div>";
  }

  showTracesScript = "$( document ).ready(function(){\n	var b = document.getElementById('cbx-print-traces');\n	var t = document.getElementsByClassName('instance-traces')[0];\n	if (b && b.checked && t){\n		t.style = 'display: block;'\n	} else if(t){\n		t.style = 'display: none;'\n	}\n	if(b){\n		b.addEventListener('change', function(e){\n			if (e.target.checked){\n				t.style = 'display: block;'\n			} else {\n				t.style = 'display: none;'\n			}\n		});\n	}\n\n\n	var attachmentsCheckbox = document.getElementById('cbx-print-attachments');\n	var attachmentsView = document.getElementsByClassName('attachments-section')[0];\n	if (attachmentsCheckbox && attachmentsCheckbox.checked && attachmentsView){\n		attachmentsView.style = 'display: block;'\n	} else if(attachmentsView){\n		attachmentsView.style = 'display: none;'\n	}\n	if(attachmentsCheckbox){\n		attachmentsCheckbox.addEventListener('change', function(e){\n			if (e.target.checked){\n				attachmentsView.style = 'display: block;'\n			} else {\n				attachmentsView.style = 'display: none;'\n			}\n		});\n	}\n});\n";

  if (options != null ? options.styles : void 0) {
    allCssLink = "";
  }

  form = db.forms.findOne({
    _id: instance.form
  });
  formDescriptionHtml = "";

  if (form) {
    formDescription = form.description;

    if (formDescription) {
      formDescription = formDescription.replace(/\n/g, "<br/>");
      formDescriptionHtml = "<div class=\"box-header  with-border instance-header\">\n	<div>\n		" + formDescription + "\n	</div>\n</div>";
    }
  }

  html = "<!DOCTYPE html>\n<html>\n	<head>\n		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n		" + allCssLink + "\n		<script src=\"https://www.steedos.com/website/libs/jquery.min.js\" type=\"text/javascript\"></script>\n		<script src=\"/js/nw_core.js\" type=\"text/javascript\"></script>\n		" + (options.plugins || "") + "\n\n		<style>\n			.steedos{\n				width: " + width + ";\n				margin-left: auto;\n				margin-right: auto;\n			}\n\n			.instance-view .instance-name{\n				display: inline !important\n			}\n			.box-tools{\n				display: none;\n			}\n			.box.collapsed-box .box-body,.box.collapsed-box .box-footer {\n			  display: block;\n			}\n\n			body{\n				background: azure !important;\n			}\n\n			.instance-view .instance-traces{\n				padding-left: 15px;\n				padding-right: 15px;\n			}\n\n			" + ((options != null ? options.styles : void 0) || "") + "\n		</style>\n	</head>\n	<body>\n		<div class=\"steedos workflow instance-print\">\n			<div class=\"skin-green skin-admin-lte\">\n				<div class=\"wrapper\">\n					<div class=\"content-wrapper\">\n						" + showTracesBtn + "\n						<div class=\"instance-print\">\n							<div class=\"instance " + instance_style + "\">\n								<form name=\"instanceForm\">\n									<div class=\"instance-form box " + instanceBoxStyle + "\">\n										" + formDescriptionHtml + "\n										<div class=\"box-body\">\n											<div class=\"col-md-12\">\n												<div class='attachments-section'>\n													" + attachment + "\n													" + related_instances + "\n													" + related_records + "\n												</div>\n												" + body + "\n											</div>\n										</div>\n									</div>\n								</form>\n								" + trace + "\n							</div>\n\n						</div>\n					</div>\n				</div>\n			</div>\n		</div>\n	</body>\n	<script>" + openFileScript + ";" + onLoadScript + ";" + showTracesScript + "</script>\n</html>";
  return html;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/template_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var formId;
TemplateManager = {};
formId = 'instanceform';

TemplateManager.instance_title = function () {
  var pageTitle, pageTitleTrClass, val;
  pageTitle = "{{instance.name}}";
  pageTitleTrClass = "instance-name";

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) {
    pageTitle = "{{> afFormGroup name=\"" + CoreForm.pageTitleFieldName + "\" label=false}}";
    pageTitleTrClass = "";
  }

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitle : void 0) {
    pageTitle = "" + CoreForm.pageTitle;
    pageTitleTrClass = "";
  }

  val = {
    pageTitle: pageTitle,
    pageTitleTrClass: pageTitleTrClass
  };
  return val;
};

TemplateManager.handleTableTemplate = function (instance, _export) {
  var table_fields, template;
  template = "<div class='instance-template'>\n	<table class=\"table-page-title form-table no-border text-align-center\" style=\"width: 100%;display: inline-table;\">\n		<tr class=\"" + this.instance_title().pageTitleTrClass + "\">\n			<td class=\"instance-table-name-td page-title\">\n				" + this.instance_title().pageTitle + "\n			</td>\n		</tr>\n\n	</table>\n	<table class=\"table-page-body form-table\">\n			<tr style=\"height:0px\">\n				<th style='width: 16%'></th>\n				<th></th>\n				<th style='width: 16%'></th>\n				<th></th>\n			</tr>";
  table_fields = InstanceformTemplate.helpers.table_fields(instance);
  table_fields.forEach(function (table_field) {
    var field_permission, pureCode, required, title_permission;
    required = "";

    if (!(typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) || (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) !== table_field.code) {
      if (table_field.is_required) {
        required = "is-required";
      }

      if (_export) {
        required = "";
      }

      pureCode = Steedos.removeSpecialCharacter(table_field.code);

      if (InstanceformTemplate.helpers.isOpinionField(table_field)) {
        template += table_field.tr_start;
        template += "<td class=\"td-title " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field opinion-field opinion-field-" + pureCode + " automatic\" colspan = \"" + table_field.td_colspan + "\">\n	{{> instanceSignText name=\"" + table_field.code + "\"}}\n</td>";
        return template += table_field.tr_end;
      } else {
        if (InstanceformTemplate.helpers.includes(table_field.type, 'section,table')) {
          template += table_field.tr_start;
          template += "<td class=\"td-childfield td-childfield-" + pureCode + "\" colspan = \"" + table_field.td_colspan + "\">\n   {{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        } else {
          template += table_field.tr_start;

          if (_export) {
            title_permission = "";
            field_permission = "";
          } else {
            title_permission = "title-" + table_field.permission;
            field_permission = "field-" + table_field.permission;
          }

          template += "<td class=\"td-title td-title-" + pureCode + " " + title_permission + " " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field td-field-" + pureCode + " " + field_permission + "\" colspan = \"" + table_field.td_colspan + "\">\n	{{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        }
      }
    }
  });
  template += "	</table>\n\n	<table class=\"table-page-footer form-table no-border\">\n		<tr class=\"applicant-wrapper\">\n			<td class=\"nowrap\">\n				<div class='inline-left'>\n					<label class=\"control-label\">{{_t \"instance_initiator\"}}：</label>\n				</div>\n				<div class='instance-table-wrapper-td inline-left'>\n					{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n				</div>\n			</td>\n			<td class=\"nowrap\">\n				<div class='pull-left'>\n					<div class='inline-left'>\n						<label>{{_t \"instance_submit_date\"}}：</label>\n					</div>\n					<div class='inline-right'>\n						<div class=\"form-group\">\n							{{formatDate instance.submit_date '{\"format\":\"YYYY-MM-DD\"}'}}\n						</div>\n					</div>\n				</div>\n			</td>\n		</tr>\n	</table>\n</div>";
  return template;
};

TemplateManager._template = {
  "default": function (instance) {
    var template;
    template = "<div class=\"with-border col-md-12\">\n	<div class=\"instance-name\">\n		<h3 class=\"box-title\">" + TemplateManager.instance_title().pageTitle + "</h3>\n		<span class=\"help-block\"></span>\n	</div>\n	<span class=\"help-block\"></span>\n</div>\n{{#each steedos_form.fields}}\n	{{#if isOpinionField this}}\n		<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}} field-{{this.code}}\">\n			<div class=\"form-group automatic opinion-field-{{this.code}}\">\n				<label class=\"control-label\">{{afFieldLabelText name=this.code}}</label>\n\n				{{> instanceSignText name=this.code}}\n			</div>\n		</div>\n	{{else}}\n		{{#if includes this.type 'section,table'}}\n			<div class=\"col-md-12 field-{{this.code}}\">\n				{{> afFormGroup name=this.code label=false}}\n			</div>\n		{{else}}\n			<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}} field-{{this.code}}\">\n			{{> afFormGroup name=this.code}}\n			</div>\n		{{/if}}\n	{{/if}}\n{{/each}}\n<div class=\"col-md-12\">\n	<div class=\"applicant-wrapper form-group form-horizontal\">\n	<div class=\"input-group\">\n		<div class=\"input-group-addon\">\n		  {{_t \"instance_initiator\"}}&nbsp;:\n		</div>\n		{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n	  </div>\n	</div>\n</div>";
    return template;
  },
  table: function (instance) {
    return TemplateManager.handleTableTemplate(instance);
  }
};
TemplateManager._templateHelps = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control',
        style: 'padding:6px 12px;width:140px;display:inline'
      }
    };
    data.atts.disabled = true;
    return data;
  }
};
({
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = formId;
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  }
});

TemplateManager.getTemplate = function (instance, templateName) {
  var flow, form;
  flow = db.flows.findOne(instance.flow);
  form = db.forms.findOne(instance.form);

  if (templateName) {
    if (templateName === 'table') {
      return TemplateManager._template.table(instance);
    }

    return TemplateManager._template["default"](instance);
  }

  if (typeof Session !== "undefined" && Session !== null ? Session.get("instancePrint") : void 0) {
    if (flow != null ? flow.print_template : void 0) {
      return "<div class='instance-template'>" + flow.print_template + "</div>";
    } else {
      if (flow != null ? flow.instance_template : void 0) {
        return "<div class='instance-template'>" + flow.instance_template + "</div>";
      } else {
        return TemplateManager._template.table(instance);
      }
    }
  } else {
    if (Steedos.isMobile()) {
      return TemplateManager._template["default"](instance);
    }

    if (flow != null ? flow.instance_template : void 0) {
      return "<div class='instance-template'>" + flow.instance_template + "</div>";
    }

    if (form != null ? form.instance_style : void 0) {
      if (form.instance_style === 'table') {
        return TemplateManager._template.table(instance);
      }

      return TemplateManager._template["default"](instance);
    } else {
      return TemplateManager._template["default"](instance);
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"coreform":{"inputTypes":{"coreform-table":{"steedos-table.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/coreform/inputTypes/coreform-table/steedos-table.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
SteedosTable = {};
SteedosTable.formId = "instanceform";

SteedosTable.checkItem = function (field, item_index) {
  var fieldObj = SteedosTable.getField(field);
  var fieldVal = SteedosTable.getItemModalValue(field, item_index);
  var sf_name = '';
  var rev = true;
  fieldObj.sfields.forEach(function (sf) {
    if (sf.permission == 'editable') {
      sf_name = fieldObj.code + "." + sf.code;

      if (!InstanceManager.checkFormFieldValue($("[name='" + sf_name + "']")[0])) {
        rev = false;
      }
    }
  });
  return rev;
};

SteedosTable.setTableItemValue = function (field, item_index, item_value) {
  var tableValue = SteedosTable.getTableValue(field);
  tableValue[item_index] = item_value;
};

SteedosTable.getTableItemValue = function (field, item_index) {
  return SteedosTable.getTableValue(field)[item_index];
};

SteedosTable.removeTableItem = function (field, item_index) {
  var item_value = SteedosTable.getTableItemValue(field, item_index);
  item_value.removed = true;
};

SteedosTable.setTableValue = function (field, value) {
  $("table[name='" + field + "']").val({
    val: value
  });
};

SteedosTable.getTableValue = function (field) {
  return $("table[name='" + field + "']").val().val;
};

SteedosTable.getValidValue = function (field) {
  var value = SteedosTable.getTableValue(field);

  if (!value) {
    return;
  }

  var validValue = [];
  value.forEach(function (v) {
    if (!v.removed) {
      validValue.push(v);
    }
  });
  return validValue;
};

SteedosTable.handleData = function (field, values) {
  if (!values || !(values instanceof Array)) {
    return values;
  }

  var fieldObj = SteedosTable.getField(field);
  values.forEach(function (v) {
    fieldObj.sfields.forEach(function (f) {
      if (f.type == 'user' || f.type == 'group') {
        var value = v[f.code];

        if (f.is_multiselect) {
          if (value && value.length > 0 && typeof value[0] == 'object') {
            v[f.code] = v[f.code].getProperty("id");
          }
        } else {
          if (value && typeof value == 'object') {
            v[f.code] = v[f.code].id;
          }
        }
      } else if (f.type == 'dateTime') {
        var value = v[f.code];

        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
            v[f.code] = value;
          }
        }
      }
    });
  });
  return values;
};

SteedosTable.getField = function (field) {
  var instanceFields = WorkflowManager.getInstanceFields();
  if (!instanceFields) return;
  var fieldObj = instanceFields.findPropertyByPK("code", field);
  return fieldObj;
};

SteedosTable.getModalData = function (field, index) {
  var data = {};
  var fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return;
  }

  data.field = fieldObj;
  data.field.formula = Form_formula.getFormulaFieldVariable("Form_formula.field_values", fieldObj.sfields);
  data.value = {};
  data.value[field] = SteedosTable.getTableItemValue(field, index);
  data.index = index;
  return data;
};

SteedosTable.getItemModalValue = function (field, item_index) {
  if (!AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index)) {
    return {};
  }

  var item_value = AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index).insertDoc[field];
  return item_value;
};

SteedosTable.addItem = function (field, index, _item_value) {
  var keys = SteedosTable.getKeys(field);

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  $("tbody[name='" + field + "Tbody']").append(SteedosTable.getTr(keys, item_value, index, field, true));
};

SteedosTable.updateItem = function (field, index, _item_value) {
  var item = $("tr[name='" + field + "_item_" + index + "']");

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  if (item && item.length > 0) {
    var keys = SteedosTable.getKeys(field);
    var tds = SteedosTable.getRemoveTd(field, index);
    var sfields = SteedosTable.getField(field).sfields;
    keys.forEach(function (key) {
      var sfield = sfields.findPropertyByPK("code", key);
      var value = item_value[key];
      tds = tds + SteedosTable.getTd(sfield, index, value);
    });
    item.empty();
    item.append(tds);
  } else {
    SteedosTable.addItem(field, index);
  }

  if (SteedosTable.getTableValue(field)) {
    SteedosTable.setTableItemValue(field, index, item_value); //SteedosTable.valueHash[field][index] = item_value;
  } else {
    //SteedosTable.valueHash[field] = [item_value];
    SteedosTable.setTableValue(field, [item_value]);
  } //执行主表公式计算


  InstanceManager.runFormula(field);
};

SteedosTable.removeItem = function (field, index) {
  $("tr[name='" + field + "_item_" + index + "']").hide();
  SteedosTable.removeTableItem(field, index);
  InstanceManager.runFormula(field);
};

SteedosTable.showModal = function (field, index, method) {
  var modalData = SteedosTable.getModalData(field, index);
  modalData.method = method;
  Modal.show("steedosTableModal", modalData);
};

SteedosTable.getKeys = function (field) {
  if (!AutoForm.getCurrentDataForForm(SteedosTable.formId)) {
    return [];
  }

  var ss = AutoForm.getFormSchema(SteedosTable.formId);
  var keys = [];

  if (ss.schema(field + ".$").type === Object) {
    keys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');
  }

  return keys;
};

SteedosTable.getThead = function (field, editable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return '';
  }

  var thead = '',
      trs = '',
      label = '',
      width = 100;

  if (editable) {
    // trs = "<th class='removed'></th>"
    trs = "";
  }

  var sfields = fieldObj.sfields;

  if (!sfields) {
    return thead;
  }

  var sf_length = sfields.length;

  if (sf_length > 0) {
    var wide_fields = sfields.filterProperty("is_wide", true);
    width = 100 / (sf_length + wide_fields.length);
  }

  sfields.forEach(function (sf, index) {
    label = sf.name != null && sf.name.length > 0 ? sf.name : sf.code;
    trs = trs + "<td "; // nowrap='nowrap'

    trs = trs + " class='title " + sf.type + "'";

    if (index != sf_length - 1) {
      if (sf.is_wide) {
        trs = trs + "style='width:" + width * 2 + "%'";
      } else {
        trs = trs + "style='width:" + width + "%'";
      }
    }

    trs = trs + ">" + label + "</td>";
  });
  thead = '<tr>' + trs + '</tr>';
  return thead;
};

SteedosTable.getTbody = function (keys, field, values, editable, sfieldsEditable) {
  var tbody = "";

  if (values instanceof Array) {
    values.forEach(function (value, index) {
      tbody = tbody + SteedosTable.getTr(keys, value, index, field, editable, sfieldsEditable);
    });
  }

  return tbody;
};

SteedosTable.getTr = function (keys, item_value, index, field, editable, sfieldsEditable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);
  var tr = "<tr id='" + fieldObj.code + "_item_" + index + "' name='" + fieldObj.code + "_item_" + index + "' data-index='" + index + "'";

  if (editable || sfieldsEditable) {
    tr = tr + "' class='item edit'";
  } else {
    if (Steedos.isMobile()) {
      tr = tr + " class='item item-readonly'";
    } else {
      tr = tr + " class='item '";
    }
  }

  if (item_value.removed) {
    tr = tr + " style='display:none' ";
  }

  tr = tr + "'>";
  var tds = "";

  if (editable) {
    tds = SteedosTable.getRemoveTd(fieldObj.code, index);
  }

  var sfields = fieldObj.sfields;
  keys.forEach(function (key) {
    var sfield = sfields.findPropertyByPK("code", key);
    var value = item_value[key];
    tds = tds + SteedosTable.getTd(sfield, index, value);
  });
  tr = tr + tds + "</tr>";
  return tr;
};

SteedosTable.getRemoveTd = function (field, index) {
  // return "<td class='steedosTable-item-remove removed' data-index='" + index + "'><i class='fa fa-times' aria-hidden='true'></td>";
  return "";
};

SteedosTable.getTd = function (field, index, value) {
  var td = "<td ";
  td = td + " class='steedosTable-item-field " + field.type + "' ";
  var td_value = "";

  if (Meteor.isClient) {
    td_value = SteedosTable.getTDValue(field, value);
  } else {
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    td_value = InstanceReadOnlyTemplate.getValue(value, field, locale, utcOffset);
  }

  td = td + " data-index='" + index + "'>" + td_value + "</td>";
  return td;
};

SteedosTable.getTDValue = function (field, value) {
  var td_value = "";

  if (!field) {
    return td_value;
  }

  try {
    switch (field.type) {
      case 'user':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaSpaceUsers(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var u = CFDataManager.getFormulaSpaceUsers(value);
              td_value = u ? u.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'group':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaOrganizations(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var o = CFDataManager.getFormulaOrganization(value);
              td_value = o ? o.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'checkbox':
        if (value === true || value == 'true') {
          td_value = TAPi18n.__("form_field_checkbox_yes");
        } else {
          td_value = TAPi18n.__("form_field_checkbox_no");
        }

        break;

      case 'email':
        td_value = value ? "<a href='mailto:" + value + "'>" + value + "</a>" : "";
        break;

      case 'url':
        if (value) {
          if (value.indexOf("http") == 0) {
            try {
              td_value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
            } catch (e) {
              td_value = "<a href='' target='_blank'>" + value + "</a>";
            }
          } else {
            td_value = "<a href='http://" + encodeURI(value) + "' target='_blank'>http://" + value + "</a>";
          }
        } else {
          td_value = "";
        }

        break;

      case 'password':
        td_value = '******';
        break;

      case 'date':
        if (value) {
          if (value.length == 10) {
            var t = value.split("-");
            year = t[0];
            month = t[1];
            date = t[2];
            value = new Date(year, month - 1, date);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd');
        }

        break;

      case 'dateTime':
        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd HH:mm');
        }

        break;

      case 'number':
        if (value || value == 0) {
          td_value = Steedos.numberToString(value, field.digits);
        }

        break;

      case 'odata':
        if (value) {
          if (field.is_multiselect) {
            td_value = _.pluck(value, '@label').toString();
          } else {
            td_value = value['@label'];
          }
        }

        break;

      default:
        td_value = value ? value : '';
        break;
    }
  } catch (e) {
    e;
    return '';
  }

  return td_value;
};

if (Meteor.isClient) {
  AutoForm.addInputType("table", {
    template: "afTable",
    valueOut: function () {
      var name = this.data("schemaKey");
      return SteedosTable.getValidValue(name);
    },
    valueConverters: {
      "stringArray": AutoForm.valueConverters.stringToStringArray,
      "number": AutoForm.valueConverters.stringToNumber,
      "numerArray": AutoForm.valueConverters.stringToNumberArray,
      "boolean": AutoForm.valueConverters.stringToBoolean,
      "booleanArray": AutoForm.valueConverters.stringToBooleanArray,
      "date": AutoForm.valueConverters.stringToDate,
      "dateArray": AutoForm.valueConverters.stringToDateArray
    },
    contextAdjust: function (context) {
      if (typeof context.atts.maxlength === 'undefined' && typeof context.max === 'number') {
        context.atts.maxlength = context.max;
      }

      return context;
    }
  });
  Template.afTable.events({
    'tap .steedos-table .steedosTable-item-add,.add-item-tr': function (event, template) {
      var name = template.data.name;
      var tableValue = SteedosTable.getTableValue(name);
      var new_item_index = tableValue ? tableValue.length : 0;
      SteedosTable.showModal(name, new_item_index, "add");
    },
    'tap .steedos-table .steedosTable-item-field': function (event, template) {
      if (template.data.atts.editable || template.data.atts.sfieldsEditable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "edit");
      }
    },
    'tap .steedos-table .steedosTable-item-remove': function (event, template) {
      var field = template.data.name;
      var item_index = event.currentTarget.dataset.index;
      Session.set("instance_change", true);
      SteedosTable.removeItem(field, item_index);
    },
    'tap .steedos-table .item-readonly': function (event, template) {
      if (!template.data.atts.editable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "read");
      }
    }
  });

  Template.afTable.rendered = function () {
    var field = this.data.name;
    var sfieldsEditable = this.data.atts.sfieldsEditable;
    var keys = SteedosTable.getKeys(field);
    var validValue = SteedosTable.handleData(field, this.data.value);
    SteedosTable.setTableValue(field, validValue);
    $("thead[name='" + field + "Thead']").html(SteedosTable.getThead(field, this.data.atts.editable));
    $("tbody[name='" + field + "Tbody']").html(SteedosTable.getTbody(keys, field, SteedosTable.getTableValue(field), this.data.atts.editable, sfieldsEditable));
    str = t("steedos_table_add_item");
    addItemTr = "<tr class='add-item-tr'><td colspan='" + keys.length + "'><i class='ion ion-plus-round'></i>" + str + "</td></tr>";

    if (this.data.atts.editable) {
      $("tfoot[name='" + field + "Tfoot']").append(addItemTr);
    }

    this.autorun(function () {
      var data = Template.currentData();
      var field = data.name;
      var keys = SteedosTable.getKeys(field);
      var validValue = SteedosTable.handleData(field, data.value);
      SteedosTable.setTableValue(field, validValue);
      $("tbody[name='" + field + "Tbody']").html(SteedosTable.getTbody(keys, field, SteedosTable.getTableValue(field), data.atts.editable, sfieldsEditable));
    });
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"views":{"instance":{"_image_sign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_image_sign.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
ImageSign.helpers = {
  spaceUserSign: function (userId) {
    var space, spaceUserSign;
    space = "";

    if (Meteor.isServer) {
      space = Template.instance().view.template.steedosData.space;
    } else {
      space = Session.get("spaceId");
    }

    spaceUserSign = db.space_user_signs.findOne({
      space: space,
      user: userId
    });
    return spaceUserSign;
  },
  imageURL: function (userId) {
    var absolute, spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(userId);
    absolute = false;

    if (Meteor.isServer) {
      absolute = Template.instance().view.template.steedosData.absolute;
    }

    if (spaceUserSign != null ? spaceUserSign.sign : void 0) {
      if (absolute) {
        return Meteor.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      } else {
        return Steedos.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      }
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_traces_handler.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_traces_handler.coffee                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
TracesHandler.helpers = {
  showSignImage: function (handler, is_finished, judge) {
    var spaceUserSign;

    if (!is_finished) {
      return false;
    }

    if (['returned', 'terminated', 'retrieved'].includes(judge)) {
      return false;
    }

    spaceUserSign = ImageSign.helpers.spaceUserSign(handler);

    if (spaceUserSign != null ? spaceUserSign.sign : void 0) {
      return true;
    } else {
      return false;
    }
  },
  objectUrl: function (object_name, record_id, app_id) {
    return Creator.getObjectUrl(object_name, record_id, app_id);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_form.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_form.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceformTemplate.helpers = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: steedos_instance.applicant_name
    };

    if (!steedos_instance || steedos_instance.state !== "draft") {
      data.atts.disabled = true;
    }

    return data;
  },
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = "instanceform";
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  empty: function (val) {
    if (val) {
      return false;
    } else {
      return true;
    }
  },
  unempty: function (val) {
    if (val) {
      return true;
    } else {
      return false;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  unequals: function (a, b) {
    return !(a === b);
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  include: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  formatDate: function (date, options) {
    if (!date) {
      return "";
    }

    if (options && typeof options === 'string') {
      options = JSON.parse(options);
    }

    if (!options.format) {
      options = {
        format: "YYYY-MM-DD HH:mm"
      };
    }

    return moment(date).format(options.format);
  },
  traces: function () {
    var flow, instance, locale, ref, ref1, ref2, ref3, steedosData, steps, traces;

    if (Meteor.isServer) {
      steedosData = (ref = Template.instance()) != null ? (ref1 = ref.view) != null ? (ref2 = ref1.template) != null ? ref2.steedosData : void 0 : void 0 : void 0;
      instance = steedosData != null ? steedosData.instance : void 0;
      flow = InstanceReadOnlyTemplate.getFlowVersion(instance);
      locale = steedosData != null ? steedosData.locale : void 0;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      instance = WorkflowManager.getInstance();
      flow = WorkflowManager.getInstanceFlowVersion();
      locale = Session.get("TAPi18n::loaded_lang");
    }

    if (!instance || !flow) {
      return {};
    }

    steps = flow.steps;
    traces = {};

    if ((ref3 = instance.traces) != null) {
      ref3.forEach(function (trace) {
        var approves, ref4, step;
        step = steps.findPropertyByPK("_id", trace.step);
        approves = [];

        if ((ref4 = trace.approves) != null) {
          ref4.forEach(function (approve) {
            var judge_name;

            if (trace.is_finished === true) {
              if (approve.judge === 'approved') {
                judge_name = TAPi18n.__("Instance State approved", {}, locale);
              } else if (approve.judge === 'rejected') {
                judge_name = TAPi18n.__("Instance State rejected", {}, locale);
              } else if (approve.judge === 'terminated') {
                judge_name = TAPi18n.__("Instance State terminated", {}, locale);
              } else if (approve.judge === 'reassigned') {
                judge_name = TAPi18n.__("Instance State reassigned", {}, locale);
              } else if (approve.judge === 'relocated') {
                judge_name = TAPi18n.__("Instance State relocated", {}, locale);
              } else if (approve.judge === '') {
                judge_name = "";
              } else {
                judge_name = "";
              }
            } else {
              judge_name = TAPi18n.__("Instance State pending", {}, locale);
            }

            return approves.push({
              _id: approve._id,
              handler: approve.user,
              handler_name: approve.handler_name,
              handler_organization_name: approve.handler_organization_name,
              handler_organization_fullname: approve.handler_organization_fullname,
              finish_date: approve.finish_date,
              judge: approve.judge,
              judge_name: judge_name,
              description: approve.description,
              is_finished: approve.is_finished,
              type: approve.type,
              opinion_fields_code: approve.opinion_fields_code,
              sign_field_code: approve.sign_field_code,
              is_read: approve.is_read,
              sign_show: approve.sign_show
            });
          });
        }

        if (step) {
          if (step.name in traces) {
            return traces[step.name] = traces[step.name].concat(approves);
          } else {
            return traces[step.name] = approves;
          }
        }
      });
    }

    return traces;
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  },
  table_fields: function (instance) {
    var fields, form_version;

    if (Meteor.isClient) {
      form_version = WorkflowManager.getInstanceFormVersion();
    } else {
      form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
    }

    if (form_version) {
      fields = _.clone(form_version.fields);
      fields.forEach(function (field, index) {
        var after_field, before_field, pre_fields, pre_wide_fields, td_colspan, tr_end, tr_start;
        field.tr_start = "";
        field.tr_end = "";
        td_colspan = 1;

        if ((typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) === field.code) {
          field.is_wide = true;
        }

        if (field.formula && field.type !== 'odata') {
          field.permission = "readonly";
        }

        if (Steedos.isMobile()) {
          if (field.type === 'section' || field.type === 'table') {
            field.td_colspan = 4;
          } else {
            field.td_colspan = 3;
          }

          if (index !== 0) {
            field.tr_start = "<tr>";
            return field.tr_end = "</tr>";
          }
        } else {
          pre_fields = fields.slice(0, index);
          pre_wide_fields = pre_fields.filterProperty("is_wide", true);
          tr_start = "";
          tr_end = "";
          before_field = null;
          after_field = null;

          if (index > 0) {
            before_field = fields[index - 1];
          }

          if (index < fields.length - 1) {
            after_field = fields[index + 1];
          }

          if (field.type === 'section' || field.type === 'table') {
            td_colspan = 4;
          } else if (field.is_wide) {
            td_colspan = 3;
          } else {
            if (before_field && after_field && before_field.is_wide && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field === null) {
              field.is_wide = true;
              td_colspan = 3;
            }
          }

          field.td_colspan = td_colspan;

          if (index === 0) {
            tr_start = "<tr>";
          } else {
            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 || field.is_wide) {
              if (field.type === 'table') {
                tr_start = "<tr class = \"tr-child-table\">";
              } else {
                tr_start = "<tr>";
              }
            }
          }

          field.tr_start = tr_start;

          if (index + 1 === fields.length || field.type === 'section' || field.type === 'table' || field.is_wide) {
            tr_end = "</tr>";
          }

          if ((pre_fields.length + pre_wide_fields.length) % 2 !== 0) {
            tr_end = "</tr>";
          }

          return field.tr_end = tr_end;
        }
      });
      return fields;
    }
  },
  sort_approve: function (approves, order) {
    if (!approves) {
      return [];
    }

    if (!approves instanceof Array) {
      return [];
    } else {
      if (order === 'desc') {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p2 - _p1;
        });
      } else {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p1 - _p2;
        });
      }
    }

    return approves;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  getField: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;

    if (form_version) {
      return form_version.fields.findPropertyByPK("code", code);
    }
  },
  getValue: function (code) {
    var form_version, instance, locale, utcOffset, values;
    instance = Template.instance().view.template.steedosData.instance;
    form_version = Template.instance().view.template.steedosData.form_version;
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    values = instance.values || {};

    if (Meteor.isClient) {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    return InstanceReadOnlyTemplate.getValue(values[code], form_version.fields.findPropertyByPK("code", code), locale, utcOffset);
  },
  getLabel: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, code);
  },
  getCfClass: function (field) {
    if ((field != null ? field.type : void 0) === "input" && (field != null ? field.is_textarea : void 0)) {
      return "cfTextarea";
    }
  },
  getTableThead: function (field) {
    return SteedosTable.getThead(field, false);
  },
  getTableBody: function (field) {
    var instance, tableValue, values;

    if (Meteor.isServer) {
      instance = Template.instance().view.template.steedosData.instance;
      values = instance.values || {};
    } else {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    tableValue = values[field.code];
    return SteedosTable.getTbody(field.sfields.getProperty("code"), field, tableValue, false);
  },
  showLabel: function (field) {
    var templateData;
    templateData = Template.instance().data;

    if (templateData.label === false) {
      return false;
    }

    return true;
  },
  isOpinionField: function (field) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field.formula);
  },
  isOpinionField_from_string: function (field_formula) {
    return InstanceSignText.isOpinionField_from_string(field_formula);
  },
  includesOpinionField: function (form, form_version) {
    var field_formulas, fields, ref;
    field_formulas = new Array();
    fields = ((ref = db.form_versions.findOne({
      _id: form_version,
      form: form
    })) != null ? ref.fields : void 0) || [];
    fields.forEach(function (f) {
      var ref1;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref1 = f.fields) != null ? ref1.forEach(function (f1) {
          return field_formulas.push(f1.formula);
        }) : void 0 : void 0;
      } else {
        return field_formulas.push(f.formula);
      }
    });
    return _.some(field_formulas, function (field_formula) {
      return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
    });
  },
  getOpinionFieldStepsName: function (field_formula, top_keywords) {
    var foo1, opinionFields;
    opinionFields = new Array();

    if (InstanceformTemplate.helpers.isOpinionField_from_string(field_formula)) {
      if (field_formula) {
        foo1 = field_formula.split(";");
        foo1.forEach(function (foo) {
          var json_formula, ref, ref1, s1, sf;
          json_formula = {};

          try {
            json_formula = eval("(" + foo + ")");
          } catch (error1) {
            json_formula = {};
          }

          if (json_formula != null ? json_formula.yijianlan : void 0) {
            sf = {};
            sf.stepName = json_formula.yijianlan.step;
            sf.image_sign = json_formula.yijianlan.image_sign || false;
            sf.only_cc_opinion = json_formula.yijianlan.only_cc || false;
            sf.default_description = json_formula.yijianlan["default"];
            sf.only_handler = json_formula.yijianlan.only_handler;
            sf.top_keywords = json_formula.yijianlan.top_keywords || top_keywords;
            return opinionFields.push(sf);
          } else if ((field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1) {
            sf = {
              only_cc_opinion: false,
              image_sign: false,
              top_keywords: top_keywords
            };

            if (foo.indexOf("{signature.") > -1) {
              sf.image_sign = true;
              foo = foo.replace("{signature.", "");
            }

            s1 = foo.replace("{", "").replace("}", "");

            if (s1.split(".").length > 1) {
              sf.stepName = s1.split(".")[1];

              if (opinionFields.filterProperty("stepName", sf.stepName).length > 0) {
                if ((ref = opinionFields.findPropertyByPK("stepName", sf.stepName)) != null) {
                  ref.only_cc_opinion = true;
                }
              } else {
                if (s1.split(".").length > 2) {
                  if (((ref1 = s1.split(".")[2]) != null ? ref1.toLocaleLowerCase() : void 0) === 'cc') {
                    sf.only_cc_opinion = true;
                  }
                }
              }
            }

            return opinionFields.push(sf);
          }
        });
      }
    }

    return opinionFields;
  },
  showCCOpinion: function (field) {
    var ref, ref1, ref2, s1;

    if (((ref = field.formula) != null ? ref.indexOf("{traces.") : void 0) > -1 || ((ref1 = field.formula) != null ? ref1.indexOf("{signature.traces.") : void 0) > -1) {
      s1 = field.formula.replace("{signature.", "").replace("{", "").replace("}", "");

      if (s1.split(".").length > 2) {
        if (((ref2 = s1.split(".")[2]) != null ? ref2.toLocaleLowerCase() : void 0) === 'cc') {
          return true;
        }
      }
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  f_label: function (that) {
    return that.name || that.code;
  }
};

if (Meteor.isServer) {
  InstanceformTemplate.helpers.steedos_form = function () {
    return this.form_version;
  };

  InstanceformTemplate.helpers.isSection = function (code) {
    var form_version;
    form_version = this.form_version;
    return form_version.fields.findPropertyByPK("code", code).type === 'section';
  };

  InstanceformTemplate.helpers.doc_values = function () {
    var instance;
    instance = this.instance;
    return instance.values;
  };

  InstanceformTemplate.helpers.applicantContext = function () {
    var data, instance;
    instance = this.instance;
    return data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: instance.applicant_name
    };
  };

  InstanceformTemplate.helpers.instance = function () {
    return this.instance;
  };

  InstanceformTemplate.helpers.fields = function () {
    var form_version;
    form_version = this.form_version;

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  };

  InstanceformTemplate.helpers.form_types = function () {
    return "disabled";
  };

  Template.registerHelper("afFieldLabelText", function (op) {
    var form_version, ref;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, op != null ? (ref = op.hash) != null ? ref.name : void 0 : void 0);
  });

  InstanceformTemplate.helpers._t = function (key) {
    var locale;
    locale = this.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceformTemplate.helpers.ins_attach_download_url = function (_id, absolute) {
    if (absolute) {
      return Meteor.absoluteUrl("/api/files/instances/" + _id + "?download=true");
    } else {
      return "/api/files/instances/" + _id + "?download=true";
    }
  };

  InstanceformTemplate.helpers.options = function (field) {
    var options, ref, rev;
    options = field != null ? (ref = field.options) != null ? ref.split("\n") : void 0 : void 0;
    rev = [];

    if (options != null) {
      options.forEach(function (item) {
        return rev.push({
          label: item,
          value: item
        });
      });
    }

    return rev;
  };

  InstanceformTemplate.helpers.getPermissions = function (code) {
    var ref;

    if (!((ref = Template.instance().view.template.steedosData.startStepEditableFields) != null ? ref.includes(code) : void 0)) {
      return "readonly disabled";
    }

    return "";
  };
}

InstanceformTemplate.events = {
  'change .form-control,.checkbox input,.af-radio-group input,.af-checkbox-group input': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'typeahead:change .form-control': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'click .cfTextarea a': function (event) {
    event.preventDefault();
    return Steedos.openWindow(event.target.href);
  }
};

InstanceformTemplate.onCreated = function () {
  var compiled, e, instance, instanceCustomTemplate, instanceView, renderFunction, template;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  template = TemplateManager.getTemplate(instance);

  try {
    compiled = SpacebarsCompiler.compile(template, {
      isBody: true
    });
  } catch (error1) {
    e = error1;
    console.log("Instance Template Error", e);
    compiled = SpacebarsCompiler.compile("", {
      isBody: true
    });
  }

  renderFunction = eval(compiled);
  instanceView = new Blaze.View("custom_instance_template", renderFunction);
  instanceCustomTemplate = new Blaze.Template(instanceView.name, renderFunction);
  Template.instance_custom_template = instanceCustomTemplate;
  return Template.instance_custom_template.helpers(InstanceformTemplate.helpers);
};

InstanceformTemplate.onRendered = function () {
  var currentApprove, currentStep, form_version, formula_fields, instance, instanceNumberFields, judge, ref;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  if ((ref = $("input[name='ins_applicant']")[0]) != null) {
    ref.dataset.values = instance.applicant;
  }

  $("input[name='ins_applicant']").val(instance.applicant_name);
  ApproveManager.error = {
    nextSteps: '',
    nextStepUsers: ''
  };

  if (Session.get("box") === 'inbox' || Session.get("box") === 'draft') {
    InstanceEvent.initEvents(instance.flow);
  }

  if (!ApproveManager.isReadOnly()) {
    currentApprove = InstanceManager.getCurrentApprove();
    instanceNumberFields = $("[data-formula]", $("#instanceform"));
    instanceNumberFields.each(function () {
      var element, schemaKey;
      schemaKey = this.dataset.schemaKey;
      element = $(this);

      if (!$(this).val() && schemaKey && Session.get("instanceId")) {
        return Meteor.call('getInstanceValues', Session.get("instanceId"), function (error, result) {
          var key, ref1;

          if (error) {
            toastr.error(error.reason);
          }

          if (!result[schemaKey]) {
            key = (ref1 = element.data("formula")) != null ? ref1.replace("auto_number(", "").replace(")", "") : void 0;
            key = key.replace(/\"/g, "").replace(/\'/g, "");

            if (key.indexOf("{") > -1) {
              key = key.replace("{", "").replace("}", "");
              key = key.trim();
              key = AutoForm.getFieldValue(key, 'instanceform');
            }

            return InstanceNumberRules.instanceNumberBuilder(element, key);
          } else {
            return element != null ? element.val(result[schemaKey]).trigger("change") : void 0;
          }
        });
      }
    });
    judge = currentApprove.judge;
    currentStep = InstanceManager.getCurrentStep();
    form_version = WorkflowManager.getInstanceFormVersion();
    formula_fields = Form_formula.getFormulaFieldVariable("Form_formula.field_values", form_version.fields);
    Form_formula.run("", "", formula_fields, AutoForm.getFormValues("instanceform").insertDoc, form_version.fields);
    return Session.set("instance_form_values", {
      instanceId: instance._id,
      values: AutoForm.getFormValues("instanceform").insertDoc
    });
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_attachments.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_attachments.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
InstanceAttachmentTemplate.helpers = {
  showMainTitle: function () {
    return Template.instance().workflowMainAttachTitle.get();
  },
  enabled_add_main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    var current_step = InstanceManager.getCurrentStep();
    if (!current_step) return false; // 分发的正文或者附件不显示转为pdf按钮
    // 如果有正文权限则为正文，否则分发为附件
    // 分发的附件不允许修改 删除 新增版本

    var main_attach_count = cfs.instances.find({
      'metadata.instance': ins._id,
      'metadata.current': true,
      'metadata.main': true
    }).count();
    var distribute_main_attach_count = 0;

    if (ins.distribute_from_instance) {
      var start_step = InstanceManager.getStartStep();

      if (start_step.can_edit_main_attach) {
        var distribute_main_attach_count = cfs.instances.find({
          'metadata.instance': ins.distribute_from_instance,
          'metadata.current': true,
          'metadata.main': true
        }).count();
      }
    }

    if (current_step.can_edit_main_attach == true && main_attach_count < 1 && distribute_main_attach_count < 1) {
      return true;
    } // 正文最多只能有一个


    if (main_attach_count >= 1 || distribute_main_attach_count >= 1) {
      return false;
    } // 开始节点并且设置了可以上传正文才显示上传正文的按钮


    var current_step = InstanceManager.getCurrentStep();
    if (current_step && current_step.step_type == "start" && current_step.can_edit_main_attach == true) return true;
    return false;
  },
  enabled_edit_normal_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;
    var flow = WorkflowManager.getFlow(ins.flow);
    if (!flow) return false; // 分发后的 附件，不可以编辑/删除，也不让上传新的附件, 流程列表：添加属性 ‘被分发后是否允许上传附件’ #1837

    if (ins.distribute_from_instance && !flow.upload_after_being_distributed) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    if (InstanceManager.isCC(ins)) {
      var step = InstanceManager.getCCStep();
      if (step && (step.can_edit_normal_attach == true || step.can_edit_normal_attach == undefined)) return true;
    } else {
      var current_step = InstanceManager.getCurrentStep();
      if (current_step && (current_step.can_edit_normal_attach == true || current_step.can_edit_normal_attach == undefined)) return true;
    }

    return false;
  },
  main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var start_step = InstanceManager.getStartStep(); // 如果是被分发的申请单并且有修改正文的权限，则优先显示原申请单文件

    var main_attach = null;

    if (ins.distribute_from_instance && start_step.can_edit_main_attach == true) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins.distribute_from_instance,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    if (!main_attach) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins._id,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    return main_attach;
  },
  normal_attachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var selector = {
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      }
    };
    var atts = new Array();

    if (ins.distribute_from_instance) {
      // 如果是被分发的申请单，则显示原申请单文件, 如果选择了将原表单存储为附件也要显示, 同时也要显示新上传的附件
      var dfis = _.clone(ins.distribute_from_instances) || [];
      dfis.push(ins._id);
      selector['metadata.instance'] = {
        $in: dfis
      };
      selector["$or"] = [{
        "metadata.instance": ins._id
      }, {
        "metadata.instance": {
          $in: ins.distribute_from_instances
        },
        "metadata.is_private": {
          $ne: true
        }
      }]; // 如果原申请单有正文但是分发后没有正文权限，则原申请单正文显示在附件栏

      var start_step = InstanceManager.getStartStep();

      if (start_step && start_step.can_edit_main_attach != true) {
        var distribute_main = cfs.instances.findOne({
          'metadata.instance': {
            $in: ins.distribute_from_instances
          },
          'metadata.current': true,
          'metadata.main': true
        });

        if (distribute_main) {
          var firstVersionMain = cfs.instances.findOne(distribute_main.metadata.parent);
          distribute_main.attachmentUploadedAt = firstVersionMain ? firstVersionMain.uploadedAt : distribute_main.uploadedAt;
          atts.push(distribute_main);
        }
      }
    } else {
      selector['metadata.instance'] = ins._id;
    }

    cfs.instances.find(selector).forEach(function (c) {
      var firstVersion = cfs.instances.findOne(c.metadata.parent);
      c.attachmentUploadedAt = firstVersion ? firstVersion.uploadedAt : c.uploadedAt;
      atts.push(c);
    });
    return _.sortBy(atts, 'attachmentUploadedAt');
  },
  showAttachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false; // 如果是被分发的申请单，则显示原申请单文件 和分发后申请单文件

    var instanceIds = _.clone(ins.distribute_from_instances) || [];
    instanceIds.push(ins._id);
    var attachments_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).count();
    if (Session && Session.get("instancePrint") && attachments_count < 1) return false;
    if (Session.get("box") == "draft" || Session.get("box") == "inbox" || attachments_count > 0) return true;else return false;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  _: function (key) {
    var locale;

    if (Meteor.isClient) {
      return TAPi18n.__(key);
    } else {
      locale = Template.instance().view.template.steedosData.locale;
      return TAPi18n.__(key, {}, locale);
    }
  },
  flow_files: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    return cfs.files.find({
      'metadata.space': ins.space,
      'metadata.object_name': 'flows',
      'metadata.record_id': ins.flow
    });
  },
  isDraftAndFlowfilesExist: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    return Session.get('box') == 'draft' && !!cfs.files.find({
      'metadata.space': ins.space,
      'metadata.object_name': 'flows',
      'metadata.record_id': ins.flow
    }).count();
  }
};

if (Meteor.isServer) {
  InstanceAttachmentTemplate.helpers._t = function (key) {
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceAttachmentTemplate.helpers.enabled_add_main_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.enabled_edit_normal_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.main_attachment = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var attachment = cfs.instances.findOne({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    });
    return attachment;
  };

  InstanceAttachmentTemplate.helpers.normal_attachments = function () {
    var steedosData = Template.instance().view.template.steedosData;
    var instance = steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      },
      $or: [{
        'metadata.is_private': {
          $ne: true
        }
      }, {
        'metadata.is_private': true,
        "metadata.owner": steedosData.userId
      }]
    }).fetch();
    return attachments;
  };

  InstanceAttachmentTemplate.helpers.showAttachments = function () {
    var instance = Template.instance().view.template.steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).fetch();

    if (attachments && attachments.length > 0) {
      return true;
    }

    return false;
  };

  InstanceAttachmentTemplate.helpers.showMainTitle = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var main_attach_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    }).count();
    return main_attach_count > 0;
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_sign_text.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_sign_text.coffee                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceSignText.helpers = {
  show: function (stepName) {
    var instance, myApprove, myTrace, ref;

    if (Meteor.isClient) {
      if (Session.get('instancePrint')) {
        return false;
      }

      if (InstanceManager.isInbox()) {
        myApprove = InstanceManager.getCurrentApprove();

        if (myApprove) {
          instance = WorkflowManager.getInstance();
          myTrace = instance != null ? (ref = instance.traces) != null ? ref.findPropertyByPK("_id", myApprove.trace) : void 0 : void 0;
          return (myTrace != null ? myTrace.name : void 0) === stepName;
        }
      }
    }

    return false;
  },
  defaultDescription: function () {
    return Template.instance().data.default_description;
  },
  traces: function () {
    return InstanceformTemplate.helpers.traces();
  },
  trace: function (stepName, only_cc_opinion, image_sign, top_keywords) {
    var approve_sort, approves, approvesGroup, approves_sorted, completed_date, hasNext, haveDescriptionApprove, instance, is_completed, ref, ref1, ref2, traces;
    instance = InstanceformTemplate.helpers.instance();
    is_completed = (instance != null ? instance.state : void 0) === "completed";
    completed_date = is_completed ? (ref = _.last(instance.traces)) != null ? (ref1 = ref.finish_date) != null ? ref1.getTime() : void 0 : void 0 : 0;

    if (is_completed && instance.finish_date) {
      completed_date = (ref2 = instance.finish_date) != null ? ref2.getTime() : void 0;
    }

    traces = InstanceformTemplate.helpers.traces();
    approves = _.clone(traces[stepName]);

    approve_sort = function (approves, top_keywords) {
      var approves_sorted, top_approves;
      approves_sorted = _.sortBy(approves, function (approve) {
        return -(approve.finish_date || new Date()).getTime();
      });

      if (top_keywords) {
        top_approves = new Array();
        top_keywords.split(",").forEach(function (key) {
          return top_approves = _.union(top_approves, _.filter(approves_sorted, function (approve) {
            var ref3;
            return (approve != null ? (ref3 = approve.handler_name) != null ? ref3.indexOf(key) : void 0 : void 0) > -1;
          }));
        });
        top_approves = _.sortBy(top_approves, function (top_approve) {
          return -(top_approve.finish_date || new Date()).getTime();
        });
        approves_sorted = _.union(top_approves, approves_sorted);
      }

      return approves_sorted || [];
    };

    approves = _.filter(approves, function (a) {
      return a.type !== "forward" && a.type !== "distribute" && a.type !== "terminated";
    });

    if (only_cc_opinion) {
      approves = approves != null ? approves.filterProperty("type", "cc") : void 0;
    }

    approves_sorted = approve_sort(approves, top_keywords);
    approvesGroup = _.groupBy(approves, "handler");

    hasNext = function (approve, approvesGroup) {
      var handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      return _.indexOf(handlerApproves, approve) + 1 < handlerApproves.length;
    };

    haveDescriptionApprove = function (approve, approvesGroup) {
      var descriptionApproves, handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      descriptionApproves = _.filter(handlerApproves, function (a) {
        if (a.description) {
          return true;
        }

        return false;
      });

      if (descriptionApproves.length === 0) {
        return false;
      }

      return true;
    };

    approves_sorted.forEach(function (approve) {
      if (approve.sign_show !== false && (approve.description || !approve.description && !hasNext(approve, approvesGroup))) {
        if (approve.judge !== 'terminated') {
          return approve._display = true;
        }
      }
    });
    approves_sorted = _.filter(approves_sorted, function (a) {
      var ref3;

      if (is_completed) {
        return a._display === true && a.is_finished && ((ref3 = a.finish_date) != null ? ref3.getTime() : void 0) <= completed_date;
      } else {
        return a._display === true;
      }
    });
    return approves_sorted;
  },
  include: function (a, b) {
    return InstanceformTemplate.helpers.include(a, b);
  },
  unempty: function (val) {
    return InstanceformTemplate.helpers.unempty(val);
  },
  formatDate: function (date, options) {
    if (!options) {
      options = {
        "format": "YYYY-MM-DD"
      };
    }

    return InstanceformTemplate.helpers.formatDate(date, options);
  },
  isMyApprove: function (approve, only_cc_opinion) {
    var currentApprove, ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
      currentApprove = InstanceManager.getCurrentApprove();

      if (!(approve != null ? approve._id : void 0)) {
        approve = currentApprove;
      }

      if (approve._id === (currentApprove != null ? currentApprove._id : void 0) && (currentApprove != null ? currentApprove.type : void 0) === 'cc' && Template.instance().data.name) {
        if (_.indexOf(currentApprove != null ? currentApprove.opinion_fields_code : void 0, Template.instance().data.name) > -1) {
          return true;
        } else {
          return false;
        }
      }

      if (!((currentApprove != null ? currentApprove.type : void 0) === 'cc') && only_cc_opinion) {
        return false;
      }

      if (currentApprove && approve._id === currentApprove._id) {
        return true;
      }
    }

    return false;
  },
  myApproveDescription: function (approveId) {
    var myApprove, ref, ref1, ref2, ref3;

    if (Meteor.isClient) {
      if (Session.get("box") === 'inbox') {
        myApprove = (ref = Template.instance()) != null ? (ref1 = ref.myApprove) != null ? ref1.get() : void 0 : void 0;

        if (myApprove && myApprove.id === approveId) {
          if (!myApprove.sign_field_code || myApprove.sign_field_code === ((ref2 = Template.instance()) != null ? (ref3 = ref2.data) != null ? ref3.name : void 0 : void 0)) {
            if (!Session.get("instance_my_approve_description")) {
              return (myApprove != null ? myApprove.description : void 0) || "";
            }

            return Session.get("instance_my_approve_description");
          }
        }
      }
    }
  },
  now: function () {
    return new Date();
  },
  isReadOnly: function () {
    if (Meteor.isClient) {
      return ApproveManager.isReadOnly();
    }

    return false;
  },
  isOpinionOfField: function (approve) {
    if (approve.type === "cc" && Template.instance().data.name) {
      if (Template.instance().data.name === approve.sign_field_code) {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  steps: function (field_formula, step, only_cc_opinion, image_sign) {
    var ref, ref1, ref2, steps;
    steps = [];

    if (!step) {
      if (!field_formula) {
        field_formula = (ref = WorkflowManager.getInstanceFormVersion()) != null ? (ref1 = ref.fields) != null ? ref1.findPropertyByPK("code", this.name).formula : void 0 : void 0;
      }

      steps = InstanceformTemplate.helpers.getOpinionFieldStepsName(field_formula, (ref2 = Template.instance()) != null ? ref2.data.top_keywords : void 0);
    } else {
      steps = [{
        stepName: step,
        only_cc_opinion: only_cc_opinion,
        image_sign: image_sign
      }];
    }

    return steps;
  },
  imageSignData: function (handler) {
    return {
      user: handler
    };
  },
  showSignImage: function (handler, image_sign) {
    var spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(handler);

    if ((spaceUserSign != null ? spaceUserSign.sign : void 0) && image_sign) {
      return true;
    } else {
      return false;
    }
  },
  getLastSignApprove: function () {
    var ins;
    ins = WorkflowManager.getInstance();
    return _.last(TracesManager.getHandlerSignShowApproves(ins, Meteor.userId()));
  },
  lastMyApproveDescription: function () {
    var approves, currentStep, ref, traces;
    traces = InstanceformTemplate.helpers.traces();
    currentStep = InstanceManager.getCurrentStep();
    approves = _.clone(traces[currentStep.name]);
    approves = approves.filterProperty("handler", Meteor.userId());

    if (approves.length > 1) {
      return (ref = approves[approves.length - 2]) != null ? ref.description : void 0;
    }

    return "";
  },
  showApprove: function (approve) {
    var ref, ref1;

    if (!approve.sign_field_code || approve.sign_field_code === ((ref = Template.instance()) != null ? (ref1 = ref.data) != null ? ref1.name : void 0 : void 0)) {
      if (approve != null ? approve.is_read : void 0) {
        if (approve.is_finished) {
          return ["approved", "rejected", "submitted", "readed"].includes(approve.judge);
        } else {
          return true;
        }
      }
    }

    return false;
  },
  judge_description: function (judge) {
    return t(judge + "_description");
  },
  is_approved: function (judge) {
    return "approved" === judge;
  },
  is_rejected: function (judge) {
    return "rejected" === judge;
  },
  is_readed: function (judge) {
    return ["approved", "rejected", "submitted", "readed"].includes(judge);
  },
  addClass: function () {
    var name, ref, ref1;
    name = (ref = Template.instance()) != null ? (ref1 = ref.data) != null ? ref1.name : void 0 : void 0;
    setTimeout(function () {
      var e, element;

      try {
        element = $(".automatic.opinion-field-" + name);

        if (element.length > 0) {
          if (element != null ? element.is("td") : void 0) {
            return element.addClass('field-editable');
          } else {
            return $(".instance-sign", element).addClass('field-editable');
          }
        }
      } catch (error) {
        e = error;
        return console.log(e);
      }
    }, 1);
    return '';
  }
};

if (Meteor.isServer) {
  InstanceSignText.helpers.defaultDescription = function () {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return Template.instance().data.default_description || TAPi18n.__("instance_default_opinion", {}, locale);
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_traces_help.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_traces_help.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
TracesTemplate.helpers = {
  equals: function (a, b) {
    return a === b;
  },
  empty: function (a) {
    if (a) {
      return a.toString().trim().length < 1;
    } else {
      return true;
    }
  },
  unempty: function (a) {
    if (a) {
      return a.toString().trim().length > 0;
    } else {
      return false;
    }
  },
  append: function (a, b) {
    return a + b;
  },
  dateFormat: function (date) {
    if (Steedos.isMobile() && (date != null ? date.getFullYear() : void 0) === new Date().getFullYear()) {
      return $.format.date(new Date(date), "MM-dd HH:mm");
    } else {
      return $.format.date(new Date(date), "yyyy-MM-dd HH:mm");
    }
  },
  getStepName: function (stepId) {
    var step;
    step = WorkflowManager.getInstanceStep(stepId);

    if (step) {
      return step.name;
    }

    return null;
  },
  showDeleteButton: function (approved) {
    if (approved && approved.type === 'cc' && approved.from_user === Meteor.userId() && approved.is_finished !== true && !Session.get("instancePrint")) {
      return true;
    }

    return false;
  },
  isShowModificationButton: function (approved) {
    var approve_admins, isShow, ref, ref1, ref2;
    approve_admins = (ref = Meteor.settings) != null ? (ref1 = ref["public"]) != null ? (ref2 = ref1.workflow) != null ? ref2.approve_admins : void 0 : void 0 : void 0;

    if (approve_admins != null ? approve_admins.length : void 0) {
      isShow = approve_admins != null ? approve_admins.contains(Meteor.userId()) : void 0;
    }

    if (!isShow) {
      return false;
    }

    return approved.handler === Meteor.userId();
  },
  isEditing: function () {
    var ref;
    return (ref = Template.instance().is_editing) != null ? ref.get() : void 0;
  },
  isShowDescription: function (approved) {
    var ref;

    if (TracesTemplate.helpers.isShowModificationButton(approved)) {
      return true;
    }

    return ((ref = approved.description) != null ? ref.toString().trim().length : void 0) > 0;
  },
  isCC: function (approved) {
    if (approved && approved.type === 'cc') {
      return true;
    }

    return false;
  },
  getApproveStatusIcon: function (approveJudge, autoSubmitted) {
    var approveStatusIcon;

    if (autoSubmitted === true) {
      return 'ion ion-android-alarm-clock';
    }

    approveStatusIcon = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusIcon = 'ion ion-checkmark-round';
        break;

      case 'rejected':
        approveStatusIcon = 'ion ion-close-round';
        break;

      case 'terminated':
        approveStatusIcon = 'fa fa-ban';
        break;

      case 'reassigned':
        approveStatusIcon = 'ion ion-android-contact';
        break;

      case 'relocated':
        approveStatusIcon = 'ion ion-arrow-shrink';
        break;

      case 'retrieved':
        approveStatusIcon = 'fa fa-undo';
        break;

      default:
        approveStatusIcon = '';
        break;
    }

    return approveStatusIcon;
  },
  getApproveStatusText: function (approveJudge, autoSubmitted) {
    var approveStatusText, locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    if (autoSubmitted === true) {
      return TAPi18n.__('instance_approve_timeout_auto_submitted', {}, locale);
    }

    approveStatusText = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusText = TAPi18n.__('Instance State approved', {}, locale);
        break;

      case 'rejected':
        approveStatusText = TAPi18n.__('Instance State rejected', {}, locale);
        break;

      case 'terminated':
        approveStatusText = TAPi18n.__('Instance State terminated', {}, locale);
        break;

      case 'reassigned':
        approveStatusText = TAPi18n.__('Instance State reassigned', {}, locale);
        break;

      case 'relocated':
        approveStatusText = TAPi18n.__('Instance State relocated', {}, locale);
        break;

      case 'retrieved':
        approveStatusText = TAPi18n.__('Instance State retrieved', {}, locale);
        break;

      case 'returned':
        approveStatusText = TAPi18n.__('Instance State returned', {}, locale);
        break;

      case 'readed':
        approveStatusText = TAPi18n.__('Instance State readed', {}, locale);
        break;

      default:
        approveStatusText = '';
        break;
    }

    return approveStatusText;
  },
  getApproveJudgeClass: function (approveJudge, autoSubmitted) {
    if (autoSubmitted === true) {
      return 'autoSubmitted';
    }

    return approveJudge;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  myApproveDescription: function (approveId) {
    var myApprove, ref, ref1;

    if (Meteor.isClient) {
      if (Session.get("box") === 'inbox') {
        myApprove = (ref = Template.instance()) != null ? (ref1 = ref.myApprove) != null ? ref1.get() : void 0 : void 0;

        if (myApprove && myApprove.id === approveId) {
          if (!Session.get("instance_my_approve_description")) {
            return (myApprove != null ? myApprove.description : void 0) || "";
          }

          return Session.get("instance_my_approve_description");
        }
      }
    }
  },
  isForward: function (approved) {
    if (approved && approved.type === 'forward') {
      return true;
    }

    return false;
  },
  showForwardDeleteButton: function (approve) {
    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'forward' && approve.from_user === Meteor.userId() && !Session.get("instancePrint") && approve.judge !== 'terminated') {
      return true;
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  isDistribute: function (approve) {
    if (approve && approve.type === 'distribute') {
      return true;
    }

    return false;
  },
  showDistributeDeleteButton: function (approve) {
    var ins;

    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'distribute' && !Session.get("instancePrint") && approve.judge !== 'terminated' && Steedos.hasFeature('file_distribution', Steedos.getSpaceId())) {
      ins = db.instances.findOne({
        _id: approve.instance
      }, {
        fields: {
          flow: 1,
          space: 1
        }
      });

      if (ins && ins.flow && ins.space) {
        if (WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, Meteor.userId())) {
          return true;
        }
      }

      if (approve.from_user === Meteor.userId()) {
        return true;
      }
    }

    return false;
  },
  finishDateSchema: function () {
    if (Steedos.isAndroidOrIOS()) {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "datetime-local"
          },
          optional: false,
          type: Date
        }
      });
    } else {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "bootstrap-datetimepicker",
            readonly: true,
            dateTimePickerOptions: {
              format: "YYYY-MM-DD HH:mm",
              ignoreReadonly: true,
              locale: Session.get("TAPi18n::loaded_lang"),
              widgetPositioning: {
                horizontal: 'right'
              }
            }
          },
          optional: false,
          type: Date
        }
      });
    }
  },
  finishDateValues: function () {
    return {
      finish_date: this.finish_date
    };
  },
  /*
     	此函数用于控制是否显示traces view
     	true: 显示traces view,签核历程按钮点击后是直接定位到traces view
     	false: 不显示traces view，签核历程按钮点击后,以Modal 方式显示traces view
   */showTracesView: function (form, form_version) {
    var ref, show_modal_traces_list;
    show_modal_traces_list = ((ref = db.space_settings.findOne({
      space: Session.get("spaceId"),
      key: "show_modal_traces_list"
    })) != null ? ref.values : void 0) || false;
    return !show_modal_traces_list;
  },
  getInstanceStateText: function (instance_id) {
    var ins, locale, text;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return TAPi18n.__('instance_deleted', {}, locale);
    }

    text = '';

    if (ins.state === 'completed') {
      text = TAPi18n.__('completed', {}, locale);
    } else if (ins.state === 'pending') {
      text = TAPi18n.__('pending', {}, locale);
    } else if (ins.state === 'draft') {
      if (ins.is_read) {
        text = TAPi18n.__('instance_approve_read', {}, locale);
      } else {
        text = TAPi18n.__('instance_approve_not_yet_handled', {}, locale);
      }
    }

    return text;
  },
  getInstanceStateColor: function (instance_id) {
    var cla, ins;
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return "";
    }

    cla = '';

    if (ins.state === 'draft') {
      if (ins.is_read) {
        cla = 'blue';
      } else {
        cla = 'red';
      }
    }

    return cla;
  },
  firstTrace: function (index) {
    return index === 0;
  },
  last_distribute_from: function (instance_id) {
    var dis_info, ins, user;
    ins = db.instances.findOne({
      _id: instance_id,
      distribute_from_instance: {
        $exists: true
      }
    }, {
      fields: {
        created: 1,
        created_by: 1
      }
    });

    if (ins) {
      dis_info = {};
      user = {};

      if (Meteor.isClient) {
        user = UUflow_api.getNameForUser(ins.created_by);
      } else if (Meteor.isServer) {
        user = db.users.findOne({
          _id: ins.created_by
        }, {
          fields: {
            name: 1
          }
        });
      }

      if (user.name) {
        dis_info.from_user = user._id;
        dis_info.from_user_name = user.name;
        dis_info.created = ins.created;
      }

      if (!_.isEmpty(dis_info)) {
        return dis_info;
      }
    }
  },
  isCCOrDistributeOrForwardTerminated: function (approve) {
    if ((approve.type === 'cc' || approve.type === 'distribute' || approve.type === 'forward') && approve.judge === 'terminated') {
      return true;
    }

    return false;
  },
  judgeTerminated: function (judge) {
    return judge === 'terminated';
  },
  instanceExists: function (instance_id) {
    return !!db.instances.find(instance_id).count();
  },
  agentDescription: function (userName) {
    var locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    return TAPi18n.__('process_delegation_rules_description', {
      userName: userName
    }, locale);
  },
  traceName: function (instance_id, traceId) {
    var ref, ref1;
    return (ref = _.find((ref1 = db.instances.findOne(instance_id, {
      fields: {
        traces: 1
      }
    })) != null ? ref1.traces : void 0, function (trace) {
      return trace._id === traceId;
    })) != null ? ref.name : void 0;
  },
  objectUrl: function (object_name, record_id, app_id) {
    return Creator.getObjectUrl(object_name, record_id, app_id);
  }
};

if (Meteor.isServer) {
  TracesTemplate.helpers.dateFormat = function (date) {
    var utcOffset;

    if (date) {
      utcOffset = Template.instance().view.template.steedosData.utcOffset;
      return InstanceReadOnlyTemplate.formatDate(date, utcOffset);
    }
  };

  TracesTemplate.helpers._t = function (key) {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  TracesTemplate.helpers.showDeleteButton = function (approved) {
    return false;
  };
}

TracesTemplate.events = {
  'click .cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    event.stopPropagation();

    if (event.currentTarget.dataset.calling * 1 !== 1) {
      event.currentTarget.dataset.calling = 1;
      $("i", event.currentTarget).addClass("fa-spin");
      instanceId = Session.get('instanceId');
      approveId = event.target.dataset.approve;
      $("body").addClass("loading");
      Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
        $("body").removeClass("loading");

        if (err) {
          toastr.error(err);
          event.currentTarget.dataset.calling = 0;
          $("i", event.currentTarget).removeClass("fa-spin");
        }

        if (result === true) {
          toastr.success(TAPi18n.__("remove_cc_approve"));

          if ($(".instance-trace-detail-modal").length) {
            Modal.hide("instance_trace_detail_modal");
          }
        }
      });
    }
  },
  'click .instance-trace-detail-modal .btn-cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    $("body").addClass("loading");
    Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(err);
      }

      if (result === true) {
        toastr.success(TAPi18n.__("remove_cc_approve"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      return Modal.show("instance_trace_detail_modal", this);
    }
  },
  'taphold .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      return Modal.show("instance_trace_detail_modal", this);
    }
  },
  'click .approve-item a.btn-link,.approve-description a.btn-link,.approve-item-distribute a.btn-link': function (event, template) {
    var ref, userId;

    if (Steedos.isMobile()) {
      userId = (ref = event.target.dataset) != null ? ref.target_user_id : void 0;
      return Creator.openSafeObjectUrl('users', userId);
    }
  },
  'tapend .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      event.stopPropagation();
      event.preventDefault();
      return false;
    }
  },
  'click .instance-trace-detail-modal .btn-forward-approve-remove': function (event, template) {
    var approveId, instanceId, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    $("body").addClass("loading");
    Meteor.call('forward_remove', instanceId, traceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(TAPi18n.__("instance_approve_forward_remove_success"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-forward-instance-look': function (event, template) {
    var forward_instance, forward_space;
    forward_space = event.target.dataset.forwardspace;
    forward_instance = event.target.dataset.forwardinstance;
    return Steedos.openWindow(Steedos.absoluteUrl("workflow/space/" + forward_space + "/view/readonly/" + forward_instance));
  },
  'click .btn-modification': function (event, template) {
    template.is_editing.set(!template.is_editing.get());

    if (!Steedos.isAndroidOrIOS()) {
      return Tracker.afterFlush(function () {
        return $("#instance_trace_detail_modal #finish_input").on("dp.show", function () {
          return $(".modal-body").scrollTop(100);
        });
      });
    }
  },
  'click .btn-cancelBut': function (event, template) {
    return template.is_editing.set(!template.is_editing.get());
  },
  'click .btn-saveBut': function (event, template) {
    var approveId, finish_input, instanceId, opinion_input, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    opinion_input = $('#opinion_input').val();
    finish_input = AutoForm.getFieldValue("finish_date", "finishDateAutoForm");
    $("body").addClass("loading");
    return Meteor.call('change_approve_info', instanceId, traceId, approveId, opinion_input, finish_input, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(t("instance_approve_modal_modificationsave"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-distribute-approve-remove': function (event, template) {
    Modal.allowMultiple = true;
    return Modal.show('cancel_distribute_modal');
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_related_instances.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RelatedInstances.helpers = {
  showRelatedInstaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      if (db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).count() > 0) {
        return true;
      }

      return false;
    } else {
      return false;
    }
  },
  related_instaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      return db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).fetch();
    }
  },
  related_instace_url: function (ins) {
    var absolute;

    if (Meteor.isClient && (Steedos.isMobile() || Steedos.isCordova())) {
      return '';
    }

    absolute = false;

    if (Meteor.isServer) {
      absolute = this.absolute;
    }

    if (absolute) {
      return Meteor.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    } else {
      return Steedos.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    }
  },
  _t: function (key) {
    var locale;

    if (Meteor.isClient) {
      return TAPi18n.__(key);
    } else {
      locale = Template.instance().view.template.steedosData.locale;
      return TAPi18n.__(key, {}, locale);
    }
  },
  show_delete: function () {
    var current_step;

    if (!Meteor.isClient) {
      return false;
    } else {
      if (Session.get("box") === "draft" || Session.get("box") === 'inbox') {
        current_step = InstanceManager.getCurrentStep();

        if (current_step) {
          if (current_step.can_edit_main_attach || current_step.can_edit_normal_attach === true || current_step.can_edit_normal_attach === void 0) {
            return true;
          }
        }
      }
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_related_records.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_related_records.coffee                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RelatedRecords.helpers = {
  showRelatedRecords: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if (!ins) {
      return false;
    }

    return !_.isEmpty(ins.record_ids);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"routes":{"designer.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/designer.coffee                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var DesignerAPI;
DesignerAPI = {
  getAbsoluteUrl: function (url) {
    var rootUrl;
    rootUrl = __meteor_runtime_config__ ? __meteor_runtime_config__.ROOT_URL_PATH_PREFIX : "";

    if (rootUrl) {
      url = rootUrl + url;
    }

    return url;
  },
  writeResponse: function (res, httpCode, body) {
    res.statusCode = httpCode;
    return res.end(body);
  },
  sendInvalidURLResponse: function (res) {
    return this.writeResponse(res, 404, "the param 'url' is required as querys.");
  },
  sendAuthTokenExpiredResponse: function (res) {
    return this.writeResponse(res, 401, "the auth_token has expired.");
  },
  sendHtmlResponse: function (req, res, type) {
    var error_msg, query, title, url;
    query = req.query;
    url = query.url;

    if (url) {
      url = decodeURIComponent(url);
    } else {
      DesignerAPI.sendInvalidURLResponse(res);
    }

    title = query.title;

    if (title) {
      title = decodeURIComponent(title);
    } else {
      title = "Steedos Designer";
    }

    error_msg = "";
    return this.writeResponse(res, 200, "<html>\n	<head>\n		<style>\n			html,body{\n				margin: 0;\n				padding: 0;\n				height: 100%;\n			}\n			body { \n				font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n				text-align: center;\n				background-color: #fff;\n			}\n			.loading{\n				position: absolute;\n				left: 0px;\n				right: 0px;\n				top: 50%;\n				z-index: -1;/*设置为-1，可以在iframe加载出来后自动消失*/\n				text-align: center;\n				margin-top: -30px;\n				font-size: 36px;\n				color: #dfdfdf;\n			}\n			.error-msg{\n				position: absolute;\n				left: 0px;\n				right: 0px;\n				bottom: 20px;\n				z-index: 1100;\n				text-align: center;\n				font-size: 20px;\n				color: #a94442;\n			}\n		</style>\n		<meta charset=\"utf-8\">\n		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n		<title>" + title + "</title>\n		<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"" + this.getAbsoluteUrl("/favicons/android-chrome-192x192.png") + "\">\n		<link rel=\"manifest\" href=\"" + this.getAbsoluteUrl("/favicons/manifest.json") + "\">\n		<meta name=\"mobile-web-app-capable\" content=\"yes\">\n		<meta name=\"theme-color\" content=\"#000\">\n		<meta name=\"application-name\">\n		<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-57x57.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-60x60.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-72x72.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-76x76.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-114x114.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-120x120.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-144x144.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-152x152.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-180x180.png") + "\">\n		<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n		<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n		<meta name=\"apple-mobile-web-app-title\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"228x228\" href=\"" + this.getAbsoluteUrl("/favicons/coast-228x228.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-16x16.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-32x32.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-96x96.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"230x230\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-230x230.png") + "\">\n		<link rel=\"shortcut icon\" href=\"" + this.getAbsoluteUrl("/favicons/favicon.ico") + "\">\n		<link rel=\"yandex-tableau-widget\" href=\"" + this.getAbsoluteUrl("/favicons/yandex-browser-manifest.json") + "\">\n		<meta name=\"msapplication-TileColor\" content=\"#fff\">\n		<meta name=\"msapplication-TileImage\" content=\"" + this.getAbsoluteUrl("/favicons/mstile-144x144.png") + "\">\n		<meta name=\"msapplication-config\" content=\"" + this.getAbsoluteUrl("/favicons/browserconfig.xml") + "\">\n		<meta property=\"twitter:image\" content=\"" + this.getAbsoluteUrl("/favicons/twitter.png") + "\">\n		<meta property=\"og:image\" content=\"" + this.getAbsoluteUrl("/favicons/open-graph.png") + "\">\n	</head>\n	<body>\n		<div class = \"loading\">Loading...</div>\n		<div class = \"error-msg\">" + error_msg + "</div>\n		<iframe id=\"ifrDesigner\" src=\"\" width=\"100%\" height=\"100%\" nwdisable=\"true\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" allowtransparency=\"yes\"></iframe>\n		<script type=\"text/javascript\" src=\"" + this.getAbsoluteUrl("/lib/jquery/jquery-1.11.2.min.js") + "\"></script>\n		<script type=\"text/javascript\">\n			var designer = {\n				urlQuery:function(name){\n					var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n					var r = window.location.search.substr(1).match(reg);\n					if (r != null) return unescape(r[2]);\n					return null;\n				},\n				run:function(){\n					var url = this.urlQuery(\"url\");\n					url = decodeURIComponent(url);\n					\n					if(url){\n						$(\"#ifrDesigner\").attr(\"src\",url);\n					}\n					var Steedos = window.opener.Steedos || null;\n					if (Steedos) {\n						Steedos.forbidNodeContextmenu(window);\n					}\n				}\n			};\n			$(function(){\n				designer.run();\n			});\n		</script>\n	<body>\n</html>");
  }
};
JsonRoutes.add('get', '/api/workflow/designer?url=:url', function (req, res, next) {
  return DesignerAPI.sendHtmlResponse(req, res);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"nextStepUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/nextStepUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/nextStepUsers", function (req, res, next) {
  var deal_type = req.query.deal_type,
      spaceId = req.query.spaceId,
      error = "";

  if (!deal_type || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var body = req.body,
      nextStepUsers = [];

  switch (deal_type) {
    case 'specifyUser':
      var specifyUserIds = body.specifyUserIds;
      nextStepUsers = WorkflowManager.getUsers(spaceId, specifyUserIds);
      break;

    case 'applicantRole':
      var applicantId = body.applicantId,
          approveRoleIds = body.approveRoleIds;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);
      if (applicant) nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, applicant.organizations, approveRoleIds);
      break;

    case 'hrRole':
      var approveHrRoleIds = body.approveHrRoleIds;
      if (approveHrRoleIds) nextStepUsers = WorkflowManager.getHrRolesUsers(spaceId, approveHrRoleIds);
      break;

    case 'applicantSuperior':
      var applicantId = body.applicantId;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);

      if (applicant.manager) {
        nextStepUsers = WorkflowManager.getUsers(spaceId, applicant.manager);
      }

      break;

    case 'applicant':
      var applicantId = body.applicantId;
      nextStepUsers = WorkflowManager.getUsers(spaceId, applicantId);
      break;

    case 'userField':
      var userField = body.userField,
          userFieldValue = body.userFieldValue;

      if (userField.is_multiselect) {
        //如果多选，以userFieldValue值为Array
        nextStepUsers = WorkflowManager.getUsers(spaceId, userFieldValue);
      } else {
        nextStepUsers.push(WorkflowManager.getUser(spaceId, userFieldValue));
      }

      break;

    case 'orgField':
      var orgs,
          orgChildrens,
          orgField = body.orgField,
          orgFieldValue = body.orgFieldValue;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          orgs = WorkflowManager.getOrganizations(orgFieldValue);
          orgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, orgFieldValue);
        } else {
          orgs = [WorkflowManager.getOrganization(orgFieldValue)];
          orgChildrens = WorkflowManager.getOrganizationChildrens(spaceId, orgFieldValue);
        }

        nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgChildrens);
        orgFieldUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgs);
        nextStepUsers = nextStepUsers.concat(orgFieldUsers);

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ORG_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'specifyOrg':
      var specifyOrgIds = body.specifyOrgIds;
      var specifyOrgs = WorkflowManager.getOrganizations(specifyOrgIds);
      var specifyOrgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, specifyOrgIds);
      nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgs);
      nextStepUsers = nextStepUsers.concat(WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgChildrens));
      break;

    case 'userFieldRole':
      var userField = body.userField,
          userFieldValue = body.userFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (userFieldValue) {
        if (userField.is_multiselect) {
          //如果多选，以userFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, userFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, [userFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'orgFieldRole':
      var orgField = body.orgField,
          orgFieldValue = body.orgFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, orgFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, [orgFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    default:
      break;
  }

  var result = [];
  nextStepUsers.forEach(function (su) {
    if (su.user_accepted) {
      var o = {
        id: su.id,
        name: su.name
      };
      result.push(o);
    }
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'nextStepUsers': WorkflowManager.uniqUsers(result),
      'error': error
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getSpaceUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getSpaceUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getSpaceUsers", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getUsers(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFormulaUserObjects.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getFormulaUserObjects.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getFormulaUserObjects", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var users = WorkflowManager.getFormulaUserObject(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': users
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_formula_values.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/init_formula_values.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/init_formula_values", function (req, res, next) {
  var fields = req.body.fields,
      autoFormDoc = req.body.autoFormDoc,
      approver = req.body.approver,
      applicant = req.body.applicant,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!fields || !spaceId || !autoFormDoc || !approver || !applicant) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
    return;
  }

  formula_values = Form_formula.init_formula_values(fields, autoFormDoc, approver, applicant, spaceId);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'formula_values': formula_values
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getNameForUser.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getNameForUser.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/getNameForUser", function (req, res, next) {
  var e, user, userId;

  try {
    userId = req.body.userId;

    if (!userId) {
      JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'errors': '缺少参数'
        }
      });
    }

    user = WorkflowManager.getNameForUser(userId);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        user: user
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_designer_startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_designer_startup.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/designer/startup', function (req, res, next) {
  var categories, companyId, current_user, current_user_info, e, flows, forms, org, organizations, positions, query, ref, result, roles, spaceIds, spaceUsers, spaces, spacesQuery, userIds, users;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    companyId = ((ref = req.query) != null ? ref.companyId : void 0) || '';
    spacesQuery = {
      admins: current_user
    };

    if (companyId) {
      org = db.organizations.findOne(companyId, {
        fields: {
          space: 1
        }
      });

      if (!org) {
        throw new Meteor.Error('error', 'companyId is invalid');
      }

      spacesQuery = {
        _id: org.space
      };
    }

    spaces = db.spaces.find(spacesQuery).fetch();
    spaceIds = _.pluck(spaces, '_id');
    query = {
      space: {
        $in: spaceIds
      }
    };

    if (companyId) {
      query.company_id = companyId;
    }

    spaceUsers = db.space_users.find(query).fetch();
    forms = db.forms.find(query, {
      fields: {
        name: 1,
        state: 1,
        is_deleted: 1,
        is_valid: 1,
        space: 1,
        description: 1,
        help_text: 1,
        created: 1,
        created_by: 1,
        current: 1,
        category: 1,
        instance_style: 1,
        company_id: 1
      }
    }).fetch();
    flows = db.flows.find(query, {
      fields: {
        name: 1,
        name_formula: 1,
        code_formula: 1,
        space: 1,
        description: 1,
        is_valid: 1,
        form: 1,
        flowtype: 1,
        state: 1,
        is_deleted: 1,
        created: 1,
        created_by: 1,
        help_text: 1,
        current_no: 1,
        current: 1,
        perms: 1,
        error_message: 1,
        distribute_optional_users: 1,
        company_id: 1
      }
    }).fetch();
    roles = db.flow_roles.find(query).fetch();
    organizations = db.organizations.find(query).fetch();
    positions = db.flow_positions.find(query).fetch();
    categories = db.categories.find({
      space: {
        $in: spaceIds
      }
    }).fetch();
    userIds = _.pluck(spaceUsers, 'user');
    users = db.users.find({
      _id: {
        $in: userIds
      }
    }, {
      fields: {
        name: 1
      }
    }).fetch();
    result = {};
    result.SpaceUsers = spaceUsers;
    result.Users = users;
    result.Forms = forms;
    result.Flows = flows;
    result.Organizations = organizations;
    result.Positions = positions;
    result.Roles = roles;
    result.Categories = categories;
    result.Spaces = spaces;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: result
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_engine.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_engine.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/engine', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Approvals'], function (approve_from_client) {
      return uuflowManager.workflow_engine(approve_from_client, current_user_info, current_user);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_drafts.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/drafts', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var new_ins, new_ins_id;
      new_ins_id = uuflowManager.create_instance(instance_from_client, current_user_info);
      new_ins = db.instances.findOne({
        _id: new_ins_id
      }, {
        fields: {
          space: 1,
          flow: 1,
          flow_version: 1,
          form: 1,
          form_version: 1
        }
      });
      return inserted_instances.push(new_ins);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_remove.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_remove.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/remove', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, delete_obj, flow, inbox_users, instance, space, spaceUserOrganizations, space_id, space_user, user_ids;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      flow = db.flows.findOne({
        _id: instance.flow
      });
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: space_user.organizations
        }
      }).fetch();

      if (instance.submitter !== current_user && !space.admins.includes(current_user) && !WorkflowManager.canAdmin(flow, space_user, spaceUserOrganizations)) {
        throw new Meteor.Error('error!', "您不能删除此申请单。");
      }

      delete_obj = db.instances.findOne(instance_from_client["_id"]);
      delete_obj.deleted = new Date();
      delete_obj.deleted_by = current_user;
      db.deleted_instances.insert(delete_obj);
      db.instances.remove(instance_from_client["_id"]);

      if (delete_obj.state !== "draft") {
        inbox_users = delete_obj.inbox_users ? delete_obj.inbox_users : [];
        cc_users = delete_obj.cc_users ? delete_obj.cc_users : [];
        user_ids = _.uniq(inbox_users.concat(cc_users));

        _.each(user_ids, function (u_id) {
          return pushManager.send_message_to_specifyUser("terminate_approval", u_id);
        });

        return pushManager.send_instance_notification("monitor_delete_applicant", delete_obj, "", current_user_info);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_submit.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/submit', function (req, res, next) {
  var current_user, current_user_info, e, hashData, result;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    result = [];

    _.each(hashData['Instances'], function (instance_from_client) {
      var current_approve, flow_id, instance, r;
      r = uuflowManager.submit_instance(instance_from_client, current_user_info);

      if (r.alerts) {
        result.push(r);
      }

      if (!_.isEmpty(instance_from_client['inbox_users'])) {
        pushManager.send_message_to_specifyUser("current_user", current_user);
      }

      if (_.isEmpty(r.alerts)) {
        instance = db.instances.findOne(instance_from_client._id);
        flow_id = instance.flow;
        current_approve = instance_from_client.traces[0].approves[0];
        pushManager.triggerWebhook(flow_id, instance, current_approve, 'draft_submit', current_user, instance.inbox_users);
      }

      return uuflowManager.distributedInstancesRemind(instance_from_client);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        result: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_terminate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_terminate.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/terminate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var flow, flow_id, flow_ver_end_step, flow_vers, h, i, ins, instance, instance_flow_ver, instance_id, instance_trace, newApprove, newTrace, now, old_cc_users, old_inbox_users, old_outbox_users, permissions, r, setObj, space, space_id, space_user, space_user_org_info, tempUsers, terminate_reason, traces;
      terminate_reason = instance_from_client["terminate_reason"];
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      flow_id = instance.flow;
      space = uuflowManager.getSpace(space_id);
      flow = uuflowManager.getFlow(flow_id);
      uuflowManager.isInstancePending(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_flow_ver = null;
      flow_ver_end_step = null;
      flow_vers = new Array();
      flow_vers.push(flow.current);
      flow_vers = flow_vers.concat(flow.historys);
      instance_flow_ver = _.find(flow_vers, function (f_ver) {
        return f_ver._id === instance.flow_version;
      });

      if (!instance_flow_ver) {
        throw new Meteor.Error('error!', "未找到申请单对应流程版本");
      }

      flow_ver_end_step = _.find(instance_flow_ver.steps, function (f_step) {
        return f_step.step_type === "end";
      });
      permissions = permissionManager.getFlowPermissions(flow_id, current_user);
      now = new Date();
      setObj = new Object();

      if (permissions.includes("admin") || space.admins.includes(current_user) || instance.submitter === current_user || instance.applicant === current_user) {
        if (!terminate_reason) {
          throw new Meteor.Error('error!', "还未填写强制结束申请单的理由，操作失败");
        }

        instance_trace = _.find(instance.traces, function (trace) {
          return trace.is_finished === false;
        });
        traces = instance.traces;
        i = 0;

        while (i < traces.length) {
          if (traces[i].is_finished === false) {
            traces[i].is_finished = true;
            traces[i].finish_date = now;
            h = 0;

            while (h < traces[i].approves.length) {
              if (traces[i].approves[h].is_finished === false) {
                traces[i].approves[h].is_finished = true;
                traces[i].approves[h].finish_date = now;
                traces[i].approves[h].judge = null;
                traces[i].approves[h].description = null;
              }

              h++;
            }

            newApprove = new Object();
            newApprove._id = new Mongo.ObjectID()._str;
            newApprove.instance = instance_id;
            newApprove.trace = instance_trace._id;
            newApprove.is_finished = true;
            newApprove.user = current_user;
            newApprove.user_name = current_user_info.name;
            newApprove.handler = current_user;
            newApprove.handler_name = current_user_info.name;
            newApprove.handler_organization = space_user_org_info["organization"];
            newApprove.handler_organization_name = space_user_org_info["organization_name"];
            newApprove.handler_organization_fullname = space_user_org_info["organization_fullname"];
            newApprove.start_date = now;
            newApprove.finish_date = now;
            newApprove.due_date = instance_trace.due_date;
            newApprove.read_date = now;
            newApprove.judge = "terminated";
            newApprove.is_read = true;
            newApprove.description = terminate_reason;
            newApprove.is_error = false;
            newApprove.values = new Object();
            newApprove.cost_time = newApprove.finish_date - newApprove.start_date;
            traces[i].approves.push(newApprove);
          }

          i++;
        }

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [instance_trace._id];
        newTrace.is_finished = true;
        newTrace.step = flow_ver_end_step._id;
        newTrace.name = flow_ver_end_step.name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.judge = "terminated";
        setObj.state = "completed";
        setObj.final_decision = "terminated";
        old_inbox_users = instance.inbox_users;
        old_cc_users = instance.cc_users || [];
        old_outbox_users = instance.outbox_users;
        tempUsers = new Array();

        _.each(instance_trace.approves, function (nft_approve) {
          tempUsers.push(nft_approve.user);
          return tempUsers.push(nft_approve.handler);
        });

        setObj.outbox_users = _.uniq(instance.outbox_users.concat(tempUsers));
        setObj.inbox_users = new Array();
        setObj.cc_users = new Array();
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.current_step_name = flow_ver_end_step.name;
        setObj.current_step_auto_submit = false;
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          ins = uuflowManager.getInstance(instance_id);
          pushManager.send_instance_notification("submit_terminate_applicant", ins, terminate_reason, current_user_info);

          if (old_inbox_users) {
            _.each(_.uniq(old_inbox_users.concat(old_cc_users)), function (user_id) {
              return pushManager.send_message_to_specifyUser("terminate_approval", user_id);
            });
          }

          return pushManager.triggerWebhook(ins.flow, ins, {}, 'terminate', current_user, []);
        }
      }
    });

    pushManager.send_message_current_user(current_user_info);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_reassign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_reassign.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/reassign', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, approve_users_handlers, assignee_appr, current_space_user, current_user_organization, i, inbox_users, inbox_users_from_client, ins, instance, instance_id, last_trace, last_trace_from_client, new_inbox_users, not_in_inbox_users, now, permissions, r, reassign_reason, setObj, space, space_id;

      instance_id = instance_from_client['_id'];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      uuflowManager.isInstancePending(instance);
      last_trace_from_client = _.last(instance_from_client["traces"]);
      last_trace = _.find(instance.traces, function (t) {
        return t._id === last_trace_from_client["_id"];
      });

      if (last_trace.is_finished === true) {
        return;
      }

      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne({
        _id: space_id
      }, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      inbox_users = instance.inbox_users;
      inbox_users_from_client = instance_from_client["inbox_users"];
      reassign_reason = instance_from_client["reassign_reason"];
      not_in_inbox_users = _.difference(inbox_users, inbox_users_from_client);
      new_inbox_users = _.difference(inbox_users_from_client, inbox_users);

      if (not_in_inbox_users.length === 0 && new_inbox_users.length === 0) {
        return;
      }

      setObj = new Object();
      now = new Date();
      i = 0;
      approve_users_handlers = [];

      while (i < last_trace.approves.length) {
        if (not_in_inbox_users.includes(last_trace.approves[i].handler)) {
          if (last_trace.approves[i].is_finished === false && last_trace.approves[i].type !== "cc" && last_trace.approves[i].type !== "distribute") {
            last_trace.approves[i].is_finished = true;
            last_trace.approves[i].finish_date = now;
            last_trace.approves[i].judge = "terminated";
            last_trace.approves[i].description = "";
            last_trace.approves[i].cost_time = last_trace.approves[i].finish_date - last_trace.approves[i].start_date;
            approve_users_handlers.push(last_trace.approves[i].user);
            approve_users_handlers.push(last_trace.approves[i].handler);
          }
        }

        i++;
      }

      current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
      current_user_organization = db.organizations.findOne({
        _id: current_space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      assignee_appr = new Object();
      assignee_appr._id = new Mongo.ObjectID()._str;
      assignee_appr.instance = last_trace.instance;
      assignee_appr.trace = last_trace._id;
      assignee_appr.is_finished = true;
      assignee_appr.user = current_user;
      assignee_appr.user_name = current_user_info.name;
      assignee_appr.handler = current_user;
      assignee_appr.handler_name = current_user_info.name;
      assignee_appr.handler_organization = current_space_user.organization;
      assignee_appr.handler_organization_name = current_user_organization.name;
      assignee_appr.handler_organization_fullname = current_user_organization.fullname;
      assignee_appr.start_date = now;
      assignee_appr.finish_date = now;
      assignee_appr.due_date = last_trace.due_date;
      assignee_appr.read_date = now;
      assignee_appr.judge = "reassigned";
      assignee_appr.is_read = true;
      assignee_appr.description = reassign_reason;
      assignee_appr.is_error = false;
      assignee_appr.values = new Object();
      assignee_appr.cost_time = assignee_appr.finish_date - assignee_appr.start_date;
      last_trace.approves.push(assignee_appr);

      _.each(new_inbox_users, function (user_id) {
        var agent, handler_id, handler_info, new_appr, new_user, space_user, user_organization;
        new_user = db.users.findOne(user_id, {
          fields: {
            name: 1
          }
        });
        space_user = uuflowManager.getSpaceUser(space_id, user_id);
        user_organization = db.organizations.findOne(space_user.organization, {
          fields: {
            name: 1,
            fullname: 1
          }
        });
        new_appr = new Object();
        new_appr._id = new Mongo.ObjectID()._str;
        new_appr.instance = last_trace.instance;
        new_appr.trace = last_trace._id;
        new_appr.is_finished = false;
        new_appr.user = user_id;
        new_appr.user_name = new_user.name;
        handler_id = user_id;
        handler_info = new_user;
        agent = uuflowManager.getAgent(space_id, user_id);

        if (agent) {
          inbox_users_from_client[inbox_users_from_client.indexOf(user_id)] = agent;
          handler_id = agent;
          handler_info = db.users.findOne({
            _id: agent
          }, {
            fields: {
              name: 1
            }
          });
          new_appr.agent = agent;
        }

        new_appr.handler = handler_id;
        new_appr.handler_name = handler_info.name;
        new_appr.handler_organization = space_user.organization;
        new_appr.handler_organization_name = user_organization.name;
        new_appr.handler_organization_fullname = user_organization.fullname;
        new_appr.from_user = current_user;
        new_appr.from_user_name = current_user_info.name;
        new_appr.type = "reassign";
        new_appr.start_date = now;
        new_appr.due_date = last_trace.due_date;
        new_appr.is_read = false;
        new_appr.is_error = false;
        new_appr.values = new Object();
        uuflowManager.setRemindInfo(instance.values, new_appr);
        return last_trace.approves.push(new_appr);
      });

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(approve_users_handlers);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.inbox_users = inbox_users_from_client;
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj["traces.$.approves"] = last_trace.approves;
      r = db.instances.update({
        _id: instance_id,
        "traces._id": last_trace._id
      }, {
        $set: setObj
      });

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, reassign_reason, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'reassign', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_relocate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_relocate.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/relocate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, ah, approve_users, current_setp, current_setp_type, current_space_user, current_user_organization, flow, h, i, inbox_users, ins, instance, instance_id, l, last_trace, newTrace, new_inbox_users, next_step, next_step_name, next_step_type, not_in_inbox_users, now, permissions, r, relocate_appr, relocate_comment, relocate_inbox_users, relocate_next_step, sameTraces, setObj, signShowApproveId, space, space_id, ta, ti, traces;

      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      last_trace = _.last(instance.traces);
      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne(instance.space, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      space_id = instance.space;
      instance_id = last_trace.instance;
      inbox_users = instance.inbox_users;
      relocate_inbox_users = instance_from_client["relocate_inbox_users"];
      relocate_comment = instance_from_client["relocate_comment"];
      relocate_next_step = instance_from_client["relocate_next_step"];
      not_in_inbox_users = _.difference(inbox_users, relocate_inbox_users);
      new_inbox_users = _.difference(relocate_inbox_users, inbox_users);
      approve_users = [];
      flow = uuflowManager.getFlow(instance.flow);
      next_step = uuflowManager.getStep(instance, flow, relocate_next_step);
      next_step_type = next_step.step_type;
      next_step_name = next_step.name;
      current_setp = uuflowManager.getStep(instance, flow, last_trace.step);
      current_setp_type = current_setp.step_type;
      traces = instance.traces;
      setObj = new Object();
      setObj.values = uuflowManager.getUpdatedValues(instance);
      now = new Date();
      i = 0;

      while (i < traces.length) {
        if (traces[i]._id === last_trace._id) {
          if (!traces[i].approves) {
            traces[i].approves = new Array();
          }

          h = 0;

          while (h < traces[i].approves.length) {
            if (traces[i].approves[h].is_finished === false && traces[i].approves[h].type !== "cc" && traces[i].approves[h].type !== "distribute") {
              traces[i].approves[h].start_date = now;
              traces[i].approves[h].finish_date = now;
              traces[i].approves[h].read_date = now;
              traces[i].approves[h].is_error = false;
              traces[i].approves[h].is_read = true;
              traces[i].approves[h].is_finished = true;
              traces[i].approves[h].judge = "terminated";
              traces[i].approves[h].cost_time = traces[i].approves[h].finish_date - traces[i].approves[h].start_date;
              approve_users.push(traces[i].approves[h].user);

              if (traces[i].approves[h].sign_show === true) {
                ta = traces[i].approves[h];
                sameTraces = _.filter(traces, function (t) {
                  return t.step === traces[i].step;
                });
                l = sameTraces.length - 1;
                signShowApproveId = null;

                while (l > -1) {
                  _.each(sameTraces[l].approves, function (a) {
                    if (a.user === ta.user && a.judge !== "terminated" && a.description && !signShowApproveId) {
                      return signShowApproveId = a._id;
                    }
                  });

                  l--;
                }

                if (signShowApproveId) {
                  ti = 0;

                  while (ti < traces.length) {
                    ah = 0;

                    while (ah < traces[ti].approves.length) {
                      if (traces[ti].approves[ah]._id === signShowApproveId) {
                        traces[ti].approves[ah].sign_show = true;
                        traces[i].approves[h].sign_show = false;
                      }

                      ah++;
                    }

                    ti++;
                  }
                }
              }
            }

            h++;
          }

          current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
          current_user_organization = db.organizations.findOne(current_space_user.organization, {
            fields: {
              name: 1,
              fullname: 1
            }
          });
          relocate_appr = new Object();
          relocate_appr._id = new Mongo.ObjectID()._str;
          relocate_appr.instance = instance_id;
          relocate_appr.trace = traces[i]._id;
          relocate_appr.is_finished = true;
          relocate_appr.user = current_user;
          relocate_appr.user_name = current_user_info.name;
          relocate_appr.handler = current_user;
          relocate_appr.handler_name = current_user_info.name;
          relocate_appr.handler_organization = current_space_user.organization;
          relocate_appr.handler_organization_name = current_user_organization.name;
          relocate_appr.handler_organization_fullname = current_user_organization.fullname;
          relocate_appr.start_date = now;
          relocate_appr.finish_date = now;
          relocate_appr.due_date = traces[i].due_date;
          relocate_appr.read_date = now;
          relocate_appr.judge = "relocated";
          relocate_appr.is_read = true;
          relocate_appr.description = relocate_comment;
          relocate_appr.is_error = false;
          relocate_appr.values = new Object();
          relocate_appr.cost_time = relocate_appr.finish_date - relocate_appr.start_date;
          traces[i].approves.push(relocate_appr);
          traces[i].is_finished = true;
          traces[i].finish_date = now;
          traces[i].judge = "relocated";
        }

        i++;
      }

      if (next_step_type === "end") {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = true;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.approves = [];
        setObj.state = "completed";
        setObj.inbox_users = [];
        setObj.final_decision = "terminated";
        setObj.finish_date = new Date();
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = false;
      } else {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = false;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(next_step.timeout_hours, space_id);
        newTrace.approves = [];

        _.each(relocate_inbox_users, function (next_step_user_id, idx) {
          var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
          newApprove = new Object();
          newApprove._id = new Mongo.ObjectID()._str;
          newApprove.instance = instance_id;
          newApprove.trace = newTrace._id;
          newApprove.is_finished = false;
          newApprove.user = next_step_user_id;
          user_info = db.users.findOne(next_step_user_id, {
            fields: {
              name: 1
            }
          });
          newApprove.user_name = user_info.name;
          handler_id = next_step_user_id;
          handler_info = user_info;
          agent = uuflowManager.getAgent(space_id, next_step_user_id);

          if (agent) {
            relocate_inbox_users[idx] = agent;
            handler_id = agent;
            handler_info = db.users.findOne({
              _id: agent
            }, {
              fields: {
                name: 1
              }
            });
            newApprove.agent = agent;
          }

          newApprove.handler = handler_id;
          newApprove.handler_name = handler_info.name;
          next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
          next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
          newApprove.handler_organization = next_step_user_org_info["organization"];
          newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
          newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
          newApprove.start_date = now;
          newApprove.due_date = newTrace.due_date;
          newApprove.is_read = false;
          newApprove.is_error = false;
          newApprove.values = new Object();
          uuflowManager.setRemindInfo(instance.values, newApprove);
          return newTrace.approves.push(newApprove);
        });

        setObj.inbox_users = relocate_inbox_users;
        setObj.state = "pending";
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, next_step.lines);
      }

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(inbox_users).concat(approve_users);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj.is_archived = false;
      traces.push(newTrace);
      setObj.traces = traces;

      if (setObj.state === 'completed') {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });
      } else {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj,
          $unset: {
            finish_date: 1
          }
        });
      }

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, relocate_comment, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'relocate', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_archive.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_archive.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/archive', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var instance, instance_id, setObj, space, space_id, space_user;
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      uuflowManager.isInstanceFinishedAndNotArchieved(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      uuflowManager.isInstanceSubmitterOrApplicantOrSpaceAdmin(instance, current_user, space);
      setObj = new Object();
      setObj.is_archived = true;
      setObj.modified = new Date();
      setObj.modified_by = current_user;
      return db.instances.update({
        _id: instance_id
      }, {
        $set: setObj
      });
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_export.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_export.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/instances", function (req, res, next) {
    var current_user_info, e, ejs, ejsLint, end_date, error_obj, fields, fileName, flow, flow_id, flow_ids, form, form_name, formatDate, ins_to_xls, lang, last_month_date, now, query, ret, selector, space, space_id, start_date, str, table_fields, template, timezoneoffset, type, uid, utcOffset;

    try {
      current_user_info = uuflowManager.check_authorization(req);
      query = req.query;
      space_id = query.space_id;
      flow_id = query.flow_id;
      type = parseInt(query.type);
      timezoneoffset = parseInt(query.timezoneoffset);
      flow = db.flows.findOne({
        _id: flow_id
      }, {
        fields: {
          form: 1
        }
      });
      form = db.forms.findOne({
        _id: flow.form
      }, {
        fields: {
          name: 1,
          'current.fields': 1
        }
      });
      form_name = form.name;
      fields = form.current.fields;
      table_fields = new Array();

      _.each(form.current.fields, function (field) {
        if (field.type === "table") {
          return table_fields.push(field);
        }
      });

      ins_to_xls = new Array();
      start_date = null;
      end_date = null;
      now = new Date();
      selector = {
        space: space_id,
        flow: flow_id
      };
      selector.state = {
        $in: ["pending", "completed"]
      };
      uid = current_user_info._id;
      space = db.spaces.findOne(space_id);

      if (!space) {
        selector.state = "none";
      }

      if (!space.admins.includes(uid)) {
        flow_ids = WorkflowManager.getMyAdminOrMonitorFlows(space_id, uid);

        if (!flow_ids.includes(selector.flow)) {
          selector.$or = [{
            submitter: uid
          }, {
            applicant: uid
          }, {
            inbox_users: uid
          }, {
            outbox_users: uid
          }];
        }
      }

      if (type === 0) {
        start_date = new Date(now.getFullYear(), now.getMonth(), 1);
        selector.submit_date = {
          $gte: start_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 1) {
        last_month_date = new Date(new Date(now.getFullYear(), now.getMonth(), 1) - 1000 * 60 * 60 * 24);
        start_date = new Date(last_month_date.getFullYear(), last_month_date.getMonth(), 1);
        end_date = new Date(now.getFullYear(), now.getMonth(), 1);
        selector.submit_date = {
          $gte: start_date,
          $lte: end_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 2) {
        start_date = new Date(now.getFullYear(), 0, 1);
        selector.submit_date = {
          $gte: start_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 3) {
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      }

      ejs = require('ejs');
      str = Assets.getText('server/ejs/export_instances.ejs');
      ejsLint = require('ejs-lint');
      error_obj = ejsLint.lint(str, {});

      if (error_obj) {
        console.error("===/api/workflow/export:");
        console.error(error_obj);
      }

      template = ejs.compile(str);
      lang = 'en';

      if (current_user_info.locale === 'zh-cn') {
        lang = 'zh-CN';
      }

      utcOffset = timezoneoffset / -60;

      formatDate = function (date, formater) {
        return moment(date).utcOffset(utcOffset).format(formater);
      };

      ret = template({
        lang: lang,
        formatDate: formatDate,
        form_name: form_name,
        fields: fields,
        table_fields: table_fields,
        ins_to_xls: ins_to_xls
      });
      fileName = "SteedOSWorkflow_" + moment().format('YYYYMMDDHHmm') + ".xls";
      res.setHeader("Content-type", "application/octet-stream");
      res.setHeader("Content-Disposition", "attachment;filename=" + encodeURI(fileName));
      return res.end(ret);
    } catch (error) {
      e = error;
      console.error(e.stack);
      return res.end(e.message);
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_space_changeset.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_space_changeset.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/uf/space/changeset', function (req, res, next) {
  var auth_token, data, e, formids, is_admin, query, sync_token;

  try {
    query = req.query;
    auth_token = db.auth_tokens.findOne({
      auth_token: query.auth_token
    });

    if (!auth_token || !auth_token.enabled) {
      throw new Meteor.Error(401, 'Unauthorized');
    }

    sync_token = query["sync_token"];
    formids = query["formids"];
    is_admin = query["is_admin"];
    data = uuflowManager.get_SpaceChangeSet(formids, is_admin, sync_token);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: data
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_retrieve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_retrieve.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/retrieve', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, flow, handler_info, i, ins, instance, instance_id, last_trace, last_trace_id, newApprove, newTrace, now, old_inbox_users, org_info, previous_step, previous_trace, previous_trace_approves, previous_trace_id, previous_trace_name, previous_trace_step_id, r, retrieve_approve, retrieve_comment, retrieve_type, setObj, space_id, space_user, the_trace, traces;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      retrieve_comment = instance_from_client['retrieve_comment'];

      if (!instance.outbox_users.includes(current_user) && instance.submitter !== current_user && instance.applicant !== current_user) {
        throw new Meteor.Error('error', '当前用户不符合取回条件');
      }

      retrieve_type = "";
      traces = instance.traces;
      last_trace = _.last(traces);
      last_trace_id = last_trace._id;
      previous_trace_id = last_trace.previous_trace_ids[0];
      previous_trace = _.find(traces, function (t) {
        return t._id === previous_trace_id;
      });
      previous_trace_step_id = previous_trace.step;
      previous_trace_name = previous_trace.name;
      flow = uuflowManager.getFlow(instance.flow);
      previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);

      if (previous_step.step_type === "counterSign") {
        throw new Meteor.Error('error', '会签不能取回');
      }

      previous_trace_approves = _.filter(previous_trace.approves, function (a) {
        return a.type !== 'cc' && a.type !== 'distribute' && a.type !== 'forward' && ['approved', 'submitted', 'rejected'].includes(a.judge);
      });

      if (previous_trace_approves.length === 1 && (previous_trace_approves[0].user === current_user || previous_trace_approves[0].handler === current_user)) {
        retrieve_type = 'normal';
      }

      i = traces.length;
      retrieve_approve = {};

      while (i > 0) {
        _.each(traces[i - 1].approves, function (a) {
          if (a.type === 'cc' && a.is_finished === true && a.user === current_user) {
            retrieve_type = 'cc';
            return retrieve_approve = a;
          }
        });

        if (retrieve_type === 'cc') {
          break;
        }

        i--;
      }

      if (retrieve_type === 'normal') {
        flow = uuflowManager.getFlow(instance.flow);
        previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);
        space_id = instance.space;
        instance_id = instance._id;
        old_inbox_users = instance.inbox_users;
        setObj = new Object();
        now = new Date();

        _.each(traces, function (t) {
          var current_space_user, current_user_organization, retrieve_appr;

          if (t._id === last_trace_id) {
            if (!t.approves) {
              t.approves = new Array();
            }

            _.each(t.approves, function (appr) {
              if (appr.is_finished === false && appr.type !== "cc") {
                appr.start_date = now;
                appr.finish_date = now;
                appr.read_date = now;
                appr.is_error = false;
                appr.is_read = true;
                appr.is_finished = true;
                appr.judge = "terminated";
                return appr.cost_time = appr.finish_date - appr.start_date;
              }
            });

            current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
            current_user_organization = db.organizations.findOne(current_space_user.organization, {
              fields: {
                name: 1,
                fullname: 1
              }
            });
            retrieve_appr = new Object();
            retrieve_appr._id = new Mongo.ObjectID()._str;
            retrieve_appr.instance = instance_id;
            retrieve_appr.trace = t._id;
            retrieve_appr.is_finished = true;
            retrieve_appr.user = current_user;
            retrieve_appr.user_name = current_user_info.name;
            retrieve_appr.handler = current_user;
            retrieve_appr.handler_name = current_user_info.name;
            retrieve_appr.handler_organization = current_space_user.organization;
            retrieve_appr.handler_organization_name = current_user_organization.name;
            retrieve_appr.handler_organization_fullname = current_user_organization.fullname;
            retrieve_appr.start_date = now;
            retrieve_appr.finish_date = now;
            retrieve_appr.due_date = t.due_date;
            retrieve_appr.read_date = now;
            retrieve_appr.judge = "retrieved";
            retrieve_appr.is_read = true;
            retrieve_appr.description = retrieve_comment;
            retrieve_appr.is_error = false;
            retrieve_appr.values = new Object();
            retrieve_appr.cost_time = retrieve_appr.finish_date - retrieve_appr.start_date;
            t.approves.push(retrieve_appr);
            t.is_finished = true;
            t.finish_date = now;
            return t.judge = "retrieved";
          }
        });

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace_id];
        newTrace.is_finished = false;
        newTrace.step = previous_trace_step_id;
        newTrace.name = previous_trace_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(previous_step.timeout_hours, space_id);
        newTrace.approves = [];
        newApprove = new Object();
        newApprove._id = new Mongo.ObjectID()._str;
        newApprove.instance = instance_id;
        newApprove.trace = newTrace._id;
        newApprove.is_finished = false;
        newApprove.user = current_user;
        handler_info = db.users.findOne(current_user, {
          fields: {
            name: 1
          }
        });
        newApprove.user_name = handler_info.name;
        newApprove.handler = current_user;
        newApprove.handler_name = handler_info.name;
        space_user = uuflowManager.getSpaceUser(space_id, current_user);
        org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
        newApprove.handler_organization = org_info["organization"];
        newApprove.handler_organization_name = org_info["organization_name"];
        newApprove.handler_organization_fullname = org_info["organization_fullname"];
        newApprove.start_date = now;
        newApprove.due_date = newTrace.due_date;
        newApprove.is_read = false;
        newApprove.is_error = false;
        newApprove.values = new Object();
        uuflowManager.setRemindInfo(instance.values, newApprove);
        newTrace.approves.push(newApprove);
        setObj.inbox_users = [current_user];
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.current_step_name = previous_trace_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, previous_step.lines);
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);

          _.each(old_inbox_users, function (user_id) {
            if (user_id !== current_user) {
              return pushManager.send_message_to_specifyUser("current_user", user_id);
            }
          });

          ins = uuflowManager.getInstance(instance_id);
          return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, ins.inbox_users);
        }
      } else if (retrieve_type === 'cc') {
        setObj = new Object();
        now = new Date();
        instance_id = instance._id;
        the_trace = _.find(traces, function (t) {
          return t._id === retrieve_approve.trace;
        });

        _.each(the_trace.approves, function (a) {
          if (a._id === retrieve_approve._id) {
            a.is_finished = false;
            a.finish_date = void 0;
            a.judge = void 0;
            return a.cost_time = void 0;
          }
        });

        cc_users = instance.cc_users;
        cc_users.push(current_user);
        setObj.modified = now;
        setObj.modified_by = current_user;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.cc_users = cc_users;
        setObj['traces.$.approves'] = the_trace.approves;
        r = db.instances.update({
          _id: instance_id,
          'traces._id': retrieve_approve.trace
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);
        }

        ins = uuflowManager.getInstance(instance_id);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, [current_user]);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add('post', '/api/workflow/forward', function (req, res, next) {
  try {
    var current_user_info = uuflowManager.check_authorization(req);
    var current_user_id = current_user_info._id;
    var hashData = req.body;
    var instance_id = hashData.instance_id;
    var space_id = hashData.space_id;
    var flow_id = hashData.flow_id;
    var hasSaveInstanceToAttachment = hashData.hasSaveInstanceToAttachment;
    var description = hashData.description;
    var isForwardAttachments = hashData.isForwardAttachments;
    var selectedUsers = hashData.selectedUsers;
    var action_type = hashData.action_type;
    var related = hashData.related;
    var from_approve_id = hashData.from_approve_id;
    check(instance_id, String);
    check(space_id, String);
    check(flow_id, String);
    check(hasSaveInstanceToAttachment, Boolean);
    check(description, String);
    check(isForwardAttachments, Boolean);
    check(selectedUsers, Array);
    check(action_type, Match.OneOf('forward', 'distribute'));
    if (action_type == "distribute") check(from_approve_id, String);
    var ins = db.instances.findOne(instance_id);
    var old_space_id = ins.space;
    var flow = db.flows.findOne(flow_id);
    var space = db.spaces.findOne(space_id);

    if (!ins || !flow || !space) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var forward_users = new Array();

    if (_.isEmpty(selectedUsers)) {
      forward_users = [current_user_id];
    } else {
      forward_users = selectedUsers;
    } // 校验分发对象是否有分发流程的提交权限


    var no_permission_user_ids = new Array();

    _.each(forward_users, function (uid) {
      var permissions = permissionManager.getFlowPermissions(flow_id, uid);

      if (!permissions.includes("add")) {
        // throw new Meteor.Error('error!', "该申请人没有提交此申请单的权限。")
        no_permission_user_ids.push(uid);
      }
    });

    if (!_.isEmpty(no_permission_user_ids)) {
      var no_permission_users_name = new Array();
      db.users.find({
        _id: {
          $in: no_permission_user_ids
        }
      }, {
        fields: {
          name: 1
        }
      }).forEach(function (u) {
        no_permission_users_name.push(u.name);
      });
      throw new Meteor.Error('no_permission', "该提交人没有提交此申请单的权限。", no_permission_users_name.join(','));
    }

    var new_ins_ids = new Array();
    var current_trace = null;

    if (action_type == "distribute") {
      _.each(ins.traces, function (t) {
        if (!current_trace) {
          _.each(t.approves, function (a) {
            if (!current_trace) {
              if (a._id == from_approve_id) current_trace = t;
            }
          });
        }
      });
    } else {
      current_trace = _.last(ins.traces);
    }

    var current_trace_id = current_trace._id;
    var forward_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    var set_obj = new Object(); // 计算values

    var old_values = ins.values,
        new_values = {};
    var form = db.forms.findOne(flow.form);
    var fields = form.current.fields || [];
    var old_form = db.forms.findOne(ins.form);
    var old_form_version = ins.form_version,
        old_fields = [],
        common_fields = [];
    var select_to_input_fields = [];

    if (old_form.current._id == old_form_version) {
      old_fields = old_form.current.fields;
    } else {
      if (old_form.historys) {
        old_form.historys.forEach(function (h) {
          if (h._id == old_form_version) old_fields = h.fields;
        });
      }
    }

    fields.forEach(function (field) {
      var exists_field = _.find(old_fields, function (f) {
        return f.type == field.type && f.code == field.code;
      });

      if (exists_field) common_fields.push(field);

      var select_input_field = _.find(old_fields, function (f) {
        return f.type == 'select' && field.type == 'input' && f.code == field.code;
      });

      if (select_input_field) select_to_input_fields.push(select_input_field);
    });
    select_to_input_fields.forEach(function (field) {
      if (old_values[field.code]) {
        new_values[field.code] = old_values[field.code];
      }
    });
    common_fields.forEach(function (field) {
      if (field.type == 'section') {
        if (field.fields) {
          field.fields.forEach(function (f) {
            // 跨工作区转发不复制选人选组
            if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
              return;
            }

            var key = f.code;
            var old_v = old_values[key];

            if (old_v) {
              // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
              if (f.type == 'select' || f.type == 'radio') {
                var options = f.options.split('\n');
                if (!options.includes(old_v)) return;
              }

              if (f.type == 'multiSelect') {
                var options = f.options.split('\n');
                var old_multiSelected = old_v.split(',');

                var new_multiSelected = _.intersection(options, old_multiSelected);

                old_v = new_multiSelected.join(',');
              }

              new_values[key] = old_v;
            }
          });
        }
      } else if (field.type == 'table') {
        if (!_.isEmpty(old_values[field.code])) {
          new_values[field.code] = new Array();
          old_values[field.code].forEach(function (old_table_row_values) {
            var new_table_row_values = {};

            if (!_.isEmpty(field.fields)) {
              field.fields.forEach(function (f) {
                // 跨工作区转发不复制选人选组
                if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
                  return;
                }

                var key = f.code;
                var old_v = old_table_row_values[key];

                if (old_v) {
                  // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
                  if (f.type == 'select' || f.type == 'radio') {
                    var options = f.options.split('\n');
                    if (!options.includes(old_v)) return;
                  }

                  if (f.type == 'multiSelect') {
                    var options = f.options.split('\n');
                    var old_multiSelected = old_v.split(',');

                    var new_multiSelected = _.intersection(options, old_multiSelected);

                    old_v = new_multiSelected.join(',');
                  }

                  new_table_row_values[key] = old_v;
                }
              });
            }

            if (old_table_row_values._id) {
              new_table_row_values._id = new Mongo.ObjectID()._str;
            }

            if (!_.isEmpty(new_table_row_values)) {
              new_values[field.code].push(new_table_row_values);
            }
          });
        }
      } else {
        // 跨工作区转发不复制选人选组
        if (['group', 'user'].includes(field.type) && old_space_id != space_id) {
          return;
        }

        var key = field.code;
        var old_v = old_values[key];

        if (old_v) {
          // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
          if (field.type == 'select' || field.type == 'radio') {
            var options = field.options.split('\n');
            if (!options.includes(old_v)) return;
          }

          if (field.type == 'multiSelect') {
            var options = field.options.split('\n');
            var old_multiSelected = old_v.split(',');

            var new_multiSelected = _.intersection(options, old_multiSelected);

            old_v = new_multiSelected.join(',');
          }

          new_values[key] = old_v;
        }
      }
    }); //如果是分发，则value中的record_need、FONDSID不需要分发到新申请单中

    if (action_type === 'distribute') {
      delete new_values.record_need;
      delete new_values.FONDSID;
    } // 计算申请单标题


    var instance_name = "";
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      try {
        var iscript = name_forumla.replace(/\{/g, "(new_values['").replace(/\}/g, "'] || '')");
        var rev = eval(iscript);
        instance_name = rev || flow.name;
      } catch (error) {
        throw new Meteor.Error('caculate_instance_name', "计算申请单标题出错请检查表单标题脚本。");
      }
    } else {
      instance_name = flow.name;
    } // instance中记录当前步骤名称 #1314


    var start_step = _.find(flow.current.steps, function (step) {
      return step.step_type == 'start';
    }); // 新建申请单时，instances记录流程名称、流程分类名称 #1313


    var category_name = "";

    if (form.category) {
      var category = uuflowManager.getCategory(form.category);
      if (category) category_name = category.name;
    }

    _.each(forward_users, function (user_id) {
      var user_info = db.users.findOne(user_id);
      var space_user = db.space_users.findOne({
        space: space_id,
        user: user_id
      }, {
        fields: {
          organization: 1
        }
      });
      var space_user_org_info = db.organizations.findOne({
        _id: space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var now = new Date();
      var ins_obj = {};
      var agent = uuflowManager.getAgent(space_id, user_id);
      var handler_id = user_id;
      var handler_info = user_info;
      var handler_space_user = space_user;
      var handler_org_info = space_user_org_info;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent);
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
      }

      ins_obj._id = db.instances._makeNewID();
      ins_obj.space = space_id;
      ins_obj.flow = flow_id;
      ins_obj.flow_version = flow.current._id;
      ins_obj.form = flow.form;
      ins_obj.form_version = flow.current.form_version;
      ins_obj.name = instance_name;
      ins_obj.submitter = handler_id;
      ins_obj.submitter_name = handler_info.name;
      ins_obj.applicant = user_id;
      ins_obj.applicant_name = user_info.name;
      ins_obj.applicant_organization = space_user.organization;
      ins_obj.applicant_organization_name = space_user_org_info.name;
      ins_obj.applicant_organization_fullname = space_user_org_info.fullname;
      ins_obj.state = "draft";
      ins_obj.code = "";
      ins_obj.is_archived = false;
      ins_obj.is_deleted = false;
      ins_obj.created = now;
      ins_obj.created_by = current_user_id;
      ins_obj.modified = now;
      ins_obj.modified_by = current_user_id;
      ins_obj.inbox_users = [handler_id];
      ins_obj.values = new_values;

      if (action_type == 'distribute') {
        // 解决多次分发看不到正文、附件问题
        if (ins.distribute_from_instance) {
          ins_obj.distribute_from_instance = ins.distribute_from_instance;
        } else {
          ins_obj.distribute_from_instance = instance_id;
        }

        ins_obj.distribute_from_instances = _.clone(ins.distribute_from_instances) || [];
        ins_obj.distribute_from_instances.push(instance_id);

        if (related) {
          ins_obj.related_instances = [instance_id];
        }
      } else if (action_type == 'forward') {
        ins_obj.forward_from_instance = instance_id;
      } // 新建Trace


      var trace_obj = {};
      trace_obj._id = new Mongo.ObjectID()._str;
      trace_obj.instance = ins_obj._id;
      trace_obj.is_finished = false; // 当前最新版flow中开始节点的step_id

      var step_id, step_name, can_edit_main_attach, can_edit_normal_attach;
      flow.current.steps.forEach(function (step) {
        if (step.step_type == "start") {
          step_id = step._id;
          step_name = step.name;
          can_edit_main_attach = step.can_edit_main_attach;
          can_edit_normal_attach = step.can_edit_normal_attach;
        }
      });
      trace_obj.step = step_id;
      trace_obj.start_date = now;
      trace_obj.name = step_name; // 新建Approve

      var appr_obj = {};
      appr_obj._id = new Mongo.ObjectID()._str;
      appr_obj.instance = ins_obj._id;
      appr_obj.trace = trace_obj._id;
      appr_obj.is_finished = false;
      appr_obj.user = user_id;
      appr_obj.user_name = user_info.name;
      appr_obj.handler = handler_id;
      appr_obj.handler_name = handler_info.name;
      appr_obj.handler_organization = handler_space_user.organization;
      appr_obj.handler_organization_name = handler_org_info.name;
      appr_obj.handler_organization_fullname = handler_org_info.fullname;
      appr_obj.type = "draft";
      appr_obj.start_date = now;
      appr_obj.read_date = now;
      appr_obj.is_read = false;
      appr_obj.is_error = false;
      appr_obj.values = new_values;

      if (agent) {
        appr_obj.agent = agent;
      }

      trace_obj.approves = [appr_obj];
      ins_obj.traces = [trace_obj];
      if (flow.auto_remind == true) ins_obj.auto_remind = true;
      ins_obj.current_step_name = start_step.name;
      ins_obj.flow_name = flow.name;

      if (category_name) {
        ins_obj.category_name = category.name;
        ins_obj.category = category._id;
      }

      new_ins_id = db.instances.insert(ins_obj); // 复制附件

      var collection = cfs.instances; //将原表单内容存储为第一个附件

      if (hasSaveInstanceToAttachment) {
        // try {
        instanceHtml = InstanceReadOnlyTemplate.getInstanceHtml(user_info, space_id, ins, {
          absolute: true
        });
        var instanceFile = new FS.File();
        instanceFile.attachData(Buffer.from(instanceHtml, "utf-8"), {
          type: "text/html"
        }, function (error) {
          if (error) {
            throw new Meteor.Error(error.error, error.reason);
          }

          instanceFile.name(ins.name + ".html");
          instanceFile.size(instanceHtml.length);
          var metadata = {
            owner: user_id,
            owner_name: user_info.name,
            space: space_id,
            instance: new_ins_id,
            approve: appr_obj._id,
            current: true
          };
          instanceFile.metadata = metadata;
          var fileObj = collection.insert(instanceFile);
          fileObj.update({
            $set: {
              'metadata.parent': fileObj._id
            }
          });
        }); // } catch (e) {
        //     console.error(e);
        // }
      }

      if (isForwardAttachments && action_type == 'forward') {
        var files = collection.find({
          'metadata.instance': instance_id,
          'metadata.current': true
        });
        files.forEach(function (f) {
          // 判断新的流程开始节点是否有编辑正文和编辑附件权限
          if (f.metadata.main == true) {
            if (can_edit_main_attach != true && can_edit_normal_attach != true) return;
          } else {
            if (can_edit_normal_attach != true) return;
          }

          var newFile = new FS.File();
          newFile.attachData(f.createReadStream('instances'), {
            type: f.original.type
          }, function (err) {
            if (err) {
              throw new Meteor.Error(err.error, err.reason);
            }

            newFile.name(f.name());
            newFile.size(f.size());
            var metadata = {
              owner: user_id,
              owner_name: user_info.name,
              space: space_id,
              instance: new_ins_id,
              approve: appr_obj._id,
              current: true
            };

            if (f.metadata.main == true && can_edit_main_attach == true) {
              metadata.main = true;
            }

            newFile.metadata = metadata;
            var fileObj = collection.insert(newFile);
            fileObj.update({
              $set: {
                'metadata.parent': fileObj._id
              }
            });
          });
        });
      } // 给当前的申请单增加转发记录


      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': instance_id,
        'trace': current_trace_id,
        'is_finished': true,
        'user': user_id,
        'user_name': user_info.name,
        'handler': user_id,
        'handler_name': user_info.name,
        'handler_organization': space_user.organization,
        'handler_organization_name': space_user_org_info.name,
        'handler_organization_fullname': space_user_org_info.fullname,
        'type': action_type,
        'start_date': new Date(),
        'finish_date': new Date(),
        'is_read': false,
        'judge': 'submitted',
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'forward_space': space_id,
        'forward_instance': new_ins_id,
        'description': description,
        'from_approve_id': from_approve_id
      };
      forward_approves.push(appr);
      new_ins_ids.push(new_ins_id);
      pushManager.send_message_to_specifyUser("current_user", user_id);
    });

    set_obj.modified = new Date();
    set_obj.modified_by = current_user_id;
    var r = db.instances.update({
      _id: instance_id,
      "traces._id": current_trace_id
    }, {
      $set: set_obj,
      $addToSet: {
        'traces.$.approves': {
          $each: forward_approves
        }
      }
    });

    if (r) {
      _.each(current_trace.approves, function (a, idx) {
        if (a._id == from_approve_id) {
          var update_read = {};
          update_read["traces.$.approves." + idx + ".read_date"] = new Date();
          db.instances.update({
            _id: instance_id,
            "traces._id": current_trace_id
          }, {
            $set: update_read
          });
        }
      });
    }

    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        new_ins_ids: new_ins_ids
      }
    });
  } catch (e) {
    console.error(e.stack);
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/workflow/instance/:instanceId', function (req, res, next) {
  var box, current_user_id, current_user_info, e, flowId, ins, insId, permissions, redirectTo, redirectToUrl, ref, ref1, ref2, req_async, space, spaceId;

  try {
    current_user_info = uuflowManager.check_authorization(req, res);
    current_user_id = current_user_info._id;
    req_async = _.has(req.query, 'async');
    insId = req.params.instanceId;
    ins = db.instances.findOne(insId, {
      fields: {
        space: 1,
        flow: 1,
        state: 1,
        inbox_users: 1,
        cc_users: 1,
        outbox_users: 1,
        submitter: 1,
        applicant: 1
      }
    });

    if (!ins) {
      throw new Meteor.Error('error', 'instanceId is wrong or instance not exists.');
    }

    spaceId = ins.space;
    flowId = ins.flow;

    if (db.space_users.find({
      space: spaceId,
      user: current_user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'user is not belong to this space.');
    }

    box = '';

    if (((ref = ins.inbox_users) != null ? ref.includes(current_user_id) : void 0) || ((ref1 = ins.cc_users) != null ? ref1.includes(current_user_id) : void 0)) {
      box = 'inbox';
    } else if ((ref2 = ins.outbox_users) != null ? ref2.includes(current_user_id) : void 0) {
      box = 'outbox';
    } else if (ins.state === 'draft' && ins.submitter === current_user_id) {
      box = 'draft';
    } else if (ins.state === 'pending' && (ins.submitter === current_user_id || ins.applicant === current_user_id)) {
      box = 'pending';
    } else if (ins.state === 'completed' && ins.submitter === current_user_id) {
      box = 'completed';
    } else {
      permissions = permissionManager.getFlowPermissions(flowId, current_user_id);
      space = db.spaces.findOne(spaceId, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user_id)) {
        throw new Meteor.Error('error', "no permission.");
      }

      box = 'monitor';
    }

    redirectTo = "workflow/space/" + spaceId + "/" + box + "/" + insId;
    redirectToUrl = Meteor.absoluteUrl(redirectTo);

    if (req_async) {
      return res.status(200).send({
        "status": 302,
        "redirect": redirectTo
      });
    } else {
      res.setHeader("Location", redirectToUrl);
      res.writeHead(302);
      res.end();
    }
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_pending.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_pending.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/pending 获取待办文件

@apiDescription 获取当前用户的待办事项列表

@apiName getInbox

@apiGroup Workflow

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
	{
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
	{
		"status": "success",
		"data": [
			{
				"id": "g7wokXNkR9yxHvA4D",
				"start_date": "2017-11-23T02:28:53.164Z",
				"flow_name": "正文流程",
				"space_name": "审批王",
				"name": "正文流程 1",
				"applicant_name": null,
				"applicant_organization_name": "审批王",
				"submit_date": "2017-07-25T06:36:48.492Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-11-23T02:28:53.164Z",
				"is_read": false,
				"values": {}
			},
			{
				"id": "WqKSrWQoywgJaMp9k",
				"start_date": "2017-08-17T07:38:35.420Z",
				"flow_name": "正文\n",
				"space_name": "审批王",
				"name": "正文\n 1",
				"applicant_name": "殷亮辉",
				"applicant_organization_name": "审批王",
				"submit_date": "2017-06-27T10:26:19.468Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-08-17T07:38:35.421Z",
				"is_read": true,
				"values": {}
			}
		]
	}
 */JsonRoutes.add('get', '/api/workflow/open/pending', function (req, res, next) {
  var attach, e, is_read, limit, no_limit_count, query, ref, ref1, ref2, ref3, ref4, ref5, result_instances, space, space_id, space_names, special_user_id, start_date, u, uid, user_id, userid, username, workflow_categories;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    space_id = req.headers['x-space-id'] || ((ref = req.query) != null ? ref.spaceId : void 0);

    if (!space_id) {
      throw new Meteor.Error('error', 'need space_id');
    }

    user_id = req.userId;

    if (!user_id) {
      throw new Meteor.Error('error', 'Not logged in');
    }

    if (db.users.find({
      _id: user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'can not find user');
    }

    limit = ((ref1 = req.query) != null ? ref1.limit : void 0) || 500;
    limit = parseInt(limit);
    username = (ref2 = req.query) != null ? ref2.username : void 0;
    userid = (ref3 = req.query) != null ? ref3.userid : void 0;
    attach = (ref4 = req.query) != null ? ref4.attach : void 0;
    workflow_categories = (ref5 = req.query) != null ? ref5.workflow_categories : void 0;
    space = uuflowManager.getSpace(space_id);
    special_user_id;

    if (space.admins.includes(user_id)) {
      if (userid) {
        if (db.users.find({
          _id: userid
        }).count() < 1) {
          throw new Meteor.Error('error', "can not find user by userid: " + userid);
        }

        special_user_id = userid;
      } else if (username) {
        u = db.users.findOne({
          username: username
        }, {
          fields: {
            _id: 1
          }
        });

        if (_.isEmpty(u)) {
          throw new Meteor.Error('error', "can not find user by username: " + username);
        }

        special_user_id = u._id;
      }
    }

    result_instances = new Array();
    is_read = false;
    start_date = '';
    uid = user_id;
    query = {
      $or: [{
        inbox_users: user_id
      }, {
        cc_users: user_id
      }]
    };

    if (special_user_id) {
      uid = special_user_id;
      query = {
        space: space_id,
        $or: [{
          inbox_users: special_user_id
        }, {
          cc_users: special_user_id
        }]
      };
    }

    if (workflow_categories) {
      query.category = {
        $in: workflow_categories.split(',')
      };
    }

    space_names = {};
    space_names[space._id] = space.name;

    if (limit > 0) {
      db.instances.find(query, {
        sort: {
          modified: -1
        },
        limit: limit
      }).forEach(function (i) {
        var h, ref6, ref7;

        if ((ref6 = i.inbox_users) != null ? ref6.includes(uid) : void 0) {
          _.each(i.traces, function (t) {
            if (t.is_finished === false) {
              return _.each(t.approves, function (a) {
                if (a.user === uid && a.type !== 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        } else {
          _.each(i.traces, function (t) {
            if (!start_date && t.approves) {
              return _.each(t.approves, function (a) {
                if (!start_date && a.user === uid && a.type === 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        }

        if (!space_names[i.space]) {
          space_names[i.space] = (ref7 = db.spaces.findOne(i.space, {
            fields: {
              name: 1
            }
          })) != null ? ref7.name : void 0;
        }

        h = new Object();
        h["id"] = i["_id"];
        h["start_date"] = start_date;
        h["flow_name"] = i.flow_name;
        h["space_name"] = space_names[i.space];
        h["name"] = i["name"];
        h["applicant_name"] = i["applicant_name"];
        h["applicant_organization_name"] = i["applicant_organization_name"];
        h["submit_date"] = i["submit_date"];
        h["step_name"] = i.current_step_name;
        h["space_id"] = i.space;
        h["modified"] = i["modified"];
        h["is_read"] = is_read;
        h["values"] = i["values"];

        if (attach === 'true') {
          h.attachments = cfs.instances.find({
            'metadata.instance': i._id,
            'metadata.current': true,
            "metadata.is_private": {
              $ne: true
            }
          }, {
            fields: {
              copies: 0
            }
          }).fetch();
        }

        return result_instances.push(h);
      });
    }

    no_limit_count = db.instances.find(query).count();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result_instances,
        count: no_limit_count
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.reason
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"export_table_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/export_table_template.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies;
Cookies = require("cookies");
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/talbe_template", function (req, res, next) {
    var authToken, cookies, data, fileName, flow, flowId, form, ref, ref1, space, userId;
    cookies = new Cookies(req, res);

    if (req.body) {
      userId = req.body["X-User-Id"];
      authToken = req.body["X-Auth-Token"];
    }

    if (!userId || !authToken) {
      userId = cookies.get("X-User-Id");
      authToken = cookies.get("X-Auth-Token");
    }

    if (!(userId && authToken)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Missing X-Auth-Token",
        "success": false
      }));
      return;
    }

    flowId = (ref = req.query) != null ? ref.flow : void 0;
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        space: 1,
        form: 1,
        name: 1
      }
    });
    form = db.forms.findOne({
      _id: flow.form
    }, {
      fields: {
        space: 1,
        "current._id": 1
      }
    });

    if (_.isEmpty(flow)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Invalid formId",
        "success": false
      }));
      return;
    } else {
      if (!Steedos.isSpaceAdmin(flow.space, userId)) {
        res.writeHead(401);
        res.end(JSON.stringify({
          "error": "Validate Request -- No permission",
          "success": false
        }));
        return;
      }

      space = db.spaces.findOne(flow.space, {
        fields: {
          is_paid: 1
        }
      });

      if (!(space != null ? space.is_paid : void 0)) {
        JsonRoutes.sendResult(res, {
          code: 404,
          data: {
            "error": "Validate Request -- Non-paid space.",
            "success": false
          }
        });
        return;
      }
    }

    data = TemplateManager.handleTableTemplate({
      form: flow.form,
      form_version: form != null ? (ref1 = form.current) != null ? ref1._id : void 0 : void 0
    }, true);
    fileName = flow.name;
    res.setHeader('Content-type', 'application/x-msdownload');
    res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(fileName) + '.html');
    return res.end(data);
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_drafts.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/drafts 新建申请单

@apiName createInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "applicant": 申请人Id,
    "values": {
        "fields1" : 字段值,
        "fields2" : 字段值,
        ...
    }
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}

@apiErrorExample {json} error-Response:
{
    "status": "error",
    "data": {...}
}
 */JsonRoutes.add('post', '/api/workflow/open/drafts', function (req, res, next) {
  var applicant, applicantInfo, applicant_id, applicant_username, approve, approves, current_user_info, e, flow, flow_id, hashData, instance_from_client, new_ins, new_ins_id, space_id, space_user, space_user_org_info, trace, traces, user_id;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    user_id = req.userId;
    current_user_info = db.users.findOne({
      _id: user_id
    });
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header x_space_id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user_info._id);
    hashData = req.body;

    if (!hashData["flow"]) {
      throw new Meteor.Error('error', 'flow is null');
    }

    flow_id = hashData["flow"];
    applicant_id = hashData["applicant"];
    applicant_username = hashData["applicant_username"];
    instance_from_client = new Object();
    flow = db.flows.findOne({
      _id: flow_id
    }, {
      fields: {
        space: 1,
        'current._id': 1
      }
    });

    if (!flow) {
      throw new Meteor.Error('error', 'flow is not exists');
    }

    if (space_id !== flow.space) {
      throw new Meteor.Error('error', 'flow is not belong to this space');
    }

    if (db.space_users.find({
      space: space_id,
      user: current_user_info._id
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is not a member of this space');
    }

    instance_from_client["space"] = space_id;
    instance_from_client["flow"] = flow_id;
    instance_from_client["flow_version"] = flow.current._id;
    applicant = null;

    if (applicant_id || applicant_username) {
      if (applicant_id) {
        applicant = db.users.findOne({
          _id: applicant_id
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant is wrong');
        }
      } else if (applicant_username) {
        applicant = db.users.findOne({
          username: applicant_username
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant_username is wrong');
        }
      }

      space_user = db.space_users.findOne({
        space: space_id,
        user: applicant._id
      });

      if (!space_user) {
        throw new Meteor.Error('error', 'applicant is not a member of this space');
      }

      if (space_user.user_accepted !== true) {
        throw new Meteor.Error('error', 'applicant is disabled in this space');
      }

      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_from_client["applicant"] = applicant._id;
      instance_from_client["applicant_name"] = applicant.name;
      instance_from_client["applicant_organization"] = space_user_org_info["organization"];
      instance_from_client["applicant_organization_fullname"] = space_user_org_info["organization_fullname"];
      instance_from_client["applicant_organization_name"] = space_user_org_info["organization_name"];
    }

    applicantInfo = applicant || current_user_info;
    traces = [];
    trace = new Object();
    approves = [];
    approve = new Object();
    approve["values"] = hashData["values"];
    approves.push(approve);
    trace["approves"] = approves;
    traces.push(trace);
    instance_from_client["traces"] = traces;
    instance_from_client["inbox_users"] = [applicantInfo._id];
    new_ins_id = uuflowManager.create_instance(instance_from_client, applicantInfo);
    new_ins = db.instances.findOne(new_ins_id);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: new_ins
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/get/:ins_id 查看申请单详情

@apiName getInstance

@apiGroup Workflow

@apiPermission 工作区的管理员

@apiParam {String} ins_id 申请单Id
@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}
 */JsonRoutes.add('get', '/api/workflow/open/get/:ins_id', function (req, res, next) {
  var current_user, e, ins_id, instance, perm_users, permissions, space, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = db.instances.findOne(ins_id);

    if (!instance) {
      throw new Meteor.Error('error', 'can not find instance');
    }

    if (db.space_users.find({
      space: instance.space,
      user: current_user
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is wrong');
    }

    perm_users = new Array();
    perm_users.push(instance.submitter);
    perm_users.push(instance.applicant);

    if (instance.outbox_users) {
      perm_users = perm_users.concat(instance.outbox_users);
    }

    if (instance.inbox_users) {
      perm_users = perm_users.concat(instance.inbox_users);
    }

    space = db.spaces.findOne({
      _id: instance.space
    }, {
      fields: {
        admins: 1
      }
    });
    perm_users = perm_users.concat(space.admins);
    permissions = permissionManager.getFlowPermissions(instance.flow, current_user);

    if (!perm_users.includes(current_user) && !permissions.includes("monitor") && !permissions.includes("admin")) {
      throw new Meteor.Error('error', 'no permission');
    }

    instance.attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instance
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_submit.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/submit/:ins_id 提交申请单

@apiDescription 暂不支持开始节点下一节点为条件的情况

@apiName submitInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/submit/:ins_id', function (req, res, next) {
  var current_user, current_user_info, e, flow, form, ins_id, instance, nextSteps, next_step_id, next_user_ids, r, require_but_empty_fields, result, space_id, step, submitter, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = uuflowManager.getInstance(ins_id);
    uuflowManager.isInstanceDraft(instance);

    if (space_id !== instance["space"]) {
      throw new Meteor.Error('error', 'instance is not belong to this space');
    }

    values = instance["traces"][0]["approves"][0].values;
    form = uuflowManager.getForm(instance.form);
    require_but_empty_fields = uuflowManager.checkValueFieldsRequire(values, form, instance.form_version);

    if (require_but_empty_fields.length > 0) {
      if (require_but_empty_fields.length > 1) {
        throw new Meteor.Error('error', 'fields <' + require_but_empty_fields.join(",") + '> are required');
      } else if (require_but_empty_fields.length = 1) {
        throw new Meteor.Error('error', 'field <' + require_but_empty_fields.join(",") + '> is required');
      }
    }

    flow = uuflowManager.getFlow(instance.flow);
    step = uuflowManager.getStep(instance, flow, instance["traces"][0].step);
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, "submitted");

    if (nextSteps.length < 1) {
      throw new Meteor.Error('error', 'can not find next steps');
    }

    if (nextSteps.length > 1) {
      throw new Meteor.Error('error', 'next step not uniq');
    }

    next_step_id = nextSteps[0];
    next_user_ids = getHandlersManager.getHandlers(ins_id, next_step_id) || [];

    if (next_user_ids.length > 1) {
      throw new Meteor.Error('error', 'next step handler not uniq');
    }

    instance["traces"][0]["approves"][0]["next_steps"] = [{
      'step': next_step_id,
      'users': next_user_ids
    }];
    result = new Object();
    submitter = db.users.findOne(instance.submitter);

    if (!submitter) {
      throw new Meteor.Error('error', 'can not find submitter');
    }

    r = uuflowManager.submit_instance(instance, submitter);

    if (r.alerts) {
      result = r;
    } else {
      result = db.instances.findOne(ins_id);

      if (result) {
        result.attachments = cfs.instances.find({
          'metadata.instance': ins_id,
          'metadata.current': true,
          "metadata.is_private": {
            $ne: true
          }
        }, {
          fields: {
            copies: 0
          }
        }).fetch();
      }
    }

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_save.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_save.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/save/:ins_id 暂存申请单

@apiName saveInstances

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/save/:ins_id', function (req, res, next) {
  var current_step, current_trace, current_user, current_user_info, e, flow, ins_id, instance, result, setObj, space_id, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    values = req.body;

    if (!values) {
      throw new Meteor.Error('error', 'need values');
    }

    current_trace = null;
    setObj = new Object();
    instance = uuflowManager.getInstance(ins_id);
    flow = uuflowManager.getFlow(instance.flow);

    _.each(instance.traces, function (t) {
      if (t.is_finished !== true) {
        return current_trace = t;
      }
    });

    current_step = uuflowManager.getStep(instance, flow, current_trace.step);

    if (current_step.step_type === "counterSign") {
      throw new Meteor.Error('error', '会签步骤不能修改表单值');
    }

    _.each(current_trace.approves, function (a) {
      if (a.is_finished !== true && a.type !== "cc") {
        return a.values = values;
      }
    });

    setObj.modified = new Date();
    setObj["traces.$.approves"] = current_trace.approves;
    db.instances.update({
      _id: ins_id,
      'traces._id': current_trace._id
    }, {
      $set: setObj
    });
    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get_by_stepname.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get_by_stepname.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/getbystepname 根据步骤名称获取申请单

@apiName getInstanceByStepName

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "stepname": 步骤名称
}

@apiSuccessExample {json} Success-Response:
{
	"status": "success",
	"data": [
		{
			instance
		},
		{
			instance
		}
	]
}
 */JsonRoutes.add('post', '/api/workflow/open/getbystepname', function (req, res, next) {
  var current_user, current_user_info, e, flow, hashData, instances, space_id, stepname;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body;
    stepname = hashData["stepname"];
    flow = hashData["flow"];

    if (!stepname) {
      throw new Meteor.Error('error', 'need stepname');
    }

    if (!flow) {
      throw new Meteor.Error('error', 'need flow');
    }

    instances = db.instances.find({
      space: space_id,
      flow: flow,
      state: 'pending',
      traces: {
        $elemMatch: {
          is_finished: false,
          name: stepname
        }
      }
    }, {
      fields: {
        inbox_uers: 0,
        cc_users: 0,
        outbox_users: 0,
        attachments: 0,
        traces: 0
      }
    }).fetch();
    instances.forEach(function (instance) {
      return instance.attachments = cfs.instances.find({
        'metadata.instance': instance._id,
        'metadata.current': true,
        "metadata.is_private": {
          $ne: true
        }
      }, {
        fields: {
          copies: 0
        }
      }).fetch();
    });
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_cfs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_cfs.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Content-Type：application/json
form-data 格式:
fd = new FormData;
fd.append("file", file);

fd.append("is_private", false);

if (isAddVersion) {
	fd.append("isAddVersion", isAddVersion);
	fd.append("parent", attach_parent_id);
}

if (isMainAttach) {
	fd.append("main", true);
}
 */JsonRoutes.add('post', '/api/workflow/open/cfs/:ins_id', function (req, res, next) {
  var approve_id, current_user, current_user_info, e, ins_id, instance, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能上传');
    }

    approve_id = instance.traces[0].approves[0]._id;
    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    return JsonRoutes.parseFiles(req, res, function () {
      var collection, newFile;
      collection = cfs.instances;

      if (req.files && req.files[0]) {
        if (req.files[0].data.length > 100 * 1024 * 1024) {
          JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              errors: [{
                errorMessage: "超过上传附件大小限制(100M)"
              }]
            }
          });
          return;
        }

        newFile = new FS.File();
        return newFile.attachData(req.files[0].data, {
          type: req.files[0].mimeType
        }, function (err) {
          var body, e, fileObj, filename, metadata, parent, r, result, size;
          filename = req.files[0].filename;

          if (["image.jpg", "image.gif", "image.jpeg", "image.png"].includes(filename.toLowerCase())) {
            filename = "image-" + moment(new Date()).format('YYYYMMDDHHmmss') + "." + filename.split('.').pop();
          }

          body = req.body;
          body['owner'] = instance.submitter;
          body['owner_name'] = instance.submitter_name;
          body['space'] = space_id;
          body['instance'] = ins_id;
          body['approve'] = approve_id;

          try {
            if (body && (body['upload_from'] === "IE" || body['upload_from'] === "node")) {
              filename = decodeURIComponent(filename);
            }
          } catch (error) {
            e = error;
            console.error(filename);
            console.error(e);
            filename = filename.replace(/%/g, "-");
          }

          newFile.name(filename);

          if (body && body['owner'] && body['owner_name'] && body['space'] && body['instance'] && body['approve']) {
            parent = '';
            metadata = {
              owner: body['owner'],
              owner_name: body['owner_name'],
              space: body['space'],
              instance: body['instance'],
              approve: body['approve'],
              current: true
            };

            if (body["is_private"] && body["is_private"].toLocaleLowerCase() === "true") {
              metadata.is_private = true;
            } else {
              metadata.is_private = false;
            }

            if (body['main'] === "true") {
              metadata.main = true;
            }

            if (body['isAddVersion'] && body['parent']) {
              parent = body['parent'];
            }

            if (parent) {
              r = collection.update({
                'metadata.parent': parent,
                'metadata.current': true
              }, {
                $unset: {
                  'metadata.current': ''
                }
              });

              if (r) {
                metadata.parent = parent;

                if (body['locked_by'] && body['locked_by_name']) {
                  metadata.locked_by = body['locked_by'];
                  metadata.locked_by_name = body['locked_by_name'];
                }

                newFile.metadata = metadata;
                fileObj = collection.insert(newFile);

                if (body["overwrite"] && body["overwrite"].toLocaleLowerCase() === "true") {
                  collection.remove({
                    'metadata.instance': body['instance'],
                    'metadata.parent': parent,
                    'metadata.owner': body['owner'],
                    'metadata.approve': body['approve'],
                    'metadata.current': {
                      $ne: true
                    }
                  });
                }
              }
            } else {
              newFile.metadata = metadata;
              fileObj = collection.insert(newFile);
              fileObj.update({
                $set: {
                  'metadata.parent': fileObj._id
                }
              });
            }
          } else {
            fileObj = collection.insert(newFile);
          }

          size = fileObj.original.size;

          if (!size) {
            size = 1024;
          }

          result = new Object();
          result = {
            attach_id: fileObj._id,
            size: size
          };
          res.setHeader("x-amz-version-id", fileObj._id);
          return JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              status: "success",
              data: result
            }
          });
        });
      } else {
        JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            errors: [{
              errorMessage: "need file"
            }]
          }
        });
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("delete", "/api/workflow/open/cfs/:ins_id", function (req, res, next) {
  var attach_id, collection, current_user, current_user_info, e, file, hashData, ins_id, instance, result, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能删除附件');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body || {};
    attach_id = hashData["attach_id"];

    if (!attach_id) {
      throw new Meteor.Error('error', 'can not find attach_id');
    }

    collection = cfs.instances;
    file = collection.findOne({
      _id: attach_id,
      'metadata.instance': ins_id
    });

    if (file) {
      file.remove();
    } else {
      throw new Meteor.Error('error', '此附件不属于此申请单，或已被删除');
    }

    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("get", "/api/workflow/open/cfs/:attach_id", function (req, res, next) {
  var attach_id, current_user, current_user_info, e, space_id;

  try {
    attach_id = req.params.attach_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    res.statusCode = 302;
    res.setHeader("Location", Steedos.absoluteUrl("api/files/instances/") + attach_id + "?download=true");
    return res.end();
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_refill.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_refill", function (req, res, next) {
  var approve, columns, forward_ins, forward_ins_values, original_ins, original_ins_fields, original_ins_form, original_ins_id, original_subtable_fields, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, row_data, subTable, table_data, trace, traces;
  console.log("=========回填子表==========");
  console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
  console.log("=========分发回填的列==========");
  console.log("req?.query?.column", req != null ? (ref1 = req.query) != null ? ref1.column : void 0 : void 0);
  columns = req != null ? (ref2 = req.query) != null ? ref2.column.split(';') : void 0 : void 0;
  console.log("columns", columns);
  forward_ins = req != null ? (ref3 = req.body) != null ? ref3.instance : void 0 : void 0;
  subTable = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

  if ((forward_ins != null ? forward_ins.state : void 0) === "completed" && (forward_ins != null ? (ref5 = forward_ins.distribute_from_instances) != null ? ref5.length : void 0 : void 0) > 0 && subTable && columns) {
    forward_ins_values = forward_ins != null ? forward_ins.values : void 0;
    original_ins_id = _.last(forward_ins != null ? forward_ins.distribute_from_instances : void 0);
    original_ins = db.instances.findOne(original_ins_id);
    original_ins_form = db.forms.findOne(original_ins != null ? original_ins.form : void 0);
    original_ins_fields = [];
    original_subtable_fields = [];
    console.log("original_ins_form?.current?._id", original_ins_form != null ? (ref6 = original_ins_form.current) != null ? ref6._id : void 0 : void 0);
    console.log("original_ins?.form_version", original_ins != null ? original_ins.form_version : void 0);

    if ((original_ins != null ? original_ins.form_version : void 0) === (original_ins_form != null ? (ref7 = original_ins_form.current) != null ? ref7._id : void 0 : void 0)) {
      original_ins_fields = (ref8 = original_ins_form.current) != null ? ref8.fields : void 0;
      original_ins_fields.forEach(function (original_ins_field) {
        console.log("original_ins_field", original_ins_field != null ? original_ins_field.code : void 0);

        if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
          return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
        }
      });
    } else {
      if ((original_ins_form != null ? (ref9 = original_ins_form.historys) != null ? ref9.length : void 0 : void 0) > 0) {
        original_ins_form.historys.forEach(function (oh) {
          if ((original_ins != null ? original_ins.form_version : void 0) === oh._id) {
            original_ins_fields = oh != null ? oh.fields : void 0;
            return original_ins_fields.forEach(function (original_ins_field) {
              if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
                return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
              }
            });
          }
        });
      }
    }

    console.log("original_subtable_fields", original_subtable_fields != null ? original_subtable_fields.length : void 0);

    if (original_subtable_fields) {
      traces = original_ins != null ? original_ins.traces : void 0;
      trace = traces[traces.length - 1];
      approve = trace != null ? trace.approves[0] : void 0;
      table_data = (approve != null ? approve.values[subTable] : void 0) || [];
      row_data = {};
      columns.forEach(function (column) {
        return row_data[column] = forward_ins_values[column] || "";
      });

      if (row_data && row_data !== {}) {
        table_data.push(row_data);
        traces[traces.length - 1].approves[0].values[subTable] = table_data;
        console.log(traces[traces.length - 1].approves[0].values[subTable]);
        db.instances.update(original_ins_id, {
          $set: {
            'traces': traces
          }
        });
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'success': '回填成功'
          }
        });
      } else {
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'info': '回填数据为空'
          }
        });
      }
    } else {
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'error': '原申请单无相关子表'
        }
      });
    }
  } else {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'success': '申请单未结束'
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_table_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_table_refill.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_table_refill", function (req, res, next) {
  var a_table, a_table_values, approve, column_list, columns, d_ins, d_ins_fields, d_ins_form, d_ins_values, d_match_col, d_match_col_field, d_match_col_fields, d_subtable_fields, d_table, d_table_values, e, o_ins, o_ins_fields, o_ins_form, o_ins_id, o_match_col, o_match_col_field, o_match_col_fields, o_subtable_fields, o_table, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref3, ref4, ref5, ref6, ref7, ref8, ref9, table_data, trace, traces;

  try {
    console.log("=========原表子表==========");
    console.log("req?.query?.oTable", req != null ? (ref = req.query) != null ? ref.oTable : void 0 : void 0);
    console.log("=========现表子表==========");
    console.log("req?.query?.dTable", req != null ? (ref1 = req.query) != null ? ref1.dTable : void 0 : void 0);
    console.log("=========原表单的子表匹配列==========");
    console.log("req?.query?.oMatchCol", req != null ? (ref2 = req.query) != null ? ref2.oMatchCol : void 0 : void 0);
    console.log("=========现表单的子表匹配列==========");
    console.log("req?.query?.dMatchCol", req != null ? (ref3 = req.query) != null ? ref3.dMatchCol : void 0 : void 0);
    console.log("=========需要回填的列==========");
    console.log("req?.query?.refillCol", req != null ? (ref4 = req.query) != null ? ref4.refillCol : void 0 : void 0);
    d_ins = req != null ? (ref5 = req.body) != null ? ref5.instance : void 0 : void 0;

    if ((d_ins != null ? d_ins.state : void 0) === "completed") {
      if (req != null ? (ref6 = req.query) != null ? ref6.oTable : void 0 : void 0) {
        o_table = req != null ? (ref7 = req.query) != null ? ref7.oTable : void 0 : void 0;

        if (req != null ? (ref8 = req.query) != null ? ref8.dTable : void 0 : void 0) {
          d_table = req != null ? (ref9 = req.query) != null ? ref9.dTable : void 0 : void 0;
        } else {
          d_table = o_table;
        }

        if (req != null ? (ref10 = req.query) != null ? ref10.aTable : void 0 : void 0) {
          a_table = req != null ? (ref11 = req.query) != null ? ref11.aTable : void 0 : void 0;
        }

        if (req != null ? (ref12 = req.query) != null ? ref12.oMatchCol : void 0 : void 0) {
          o_match_col = req != null ? (ref13 = req.query) != null ? ref13.oMatchCol : void 0 : void 0;

          if (req != null ? (ref14 = req.query) != null ? ref14.dMatchCol : void 0 : void 0) {
            d_match_col = req != null ? (ref15 = req.query) != null ? ref15.dMatchCol : void 0 : void 0;
          } else {
            d_match_col = o_match_col;
          }

          columns = (req != null ? (ref16 = req.query) != null ? ref16.refillCol.split(';') : void 0 : void 0) || [];
          console.log("columns", columns);

          if (columns || columns.length < 1) {
            console.log("======================");
            console.log(d_table, o_match_col, columns);
            d_ins_values = d_ins != null ? d_ins.values : void 0;
            o_ins_id = _.last(d_ins != null ? d_ins.distribute_from_instances : void 0);
            o_ins = db.instances.findOne(o_ins_id);
            o_ins_form = db.forms.findOne(o_ins != null ? o_ins.form : void 0);
            d_ins_form = db.forms.findOne(d_ins != null ? d_ins.form : void 0);
            o_ins_fields = [];
            o_subtable_fields = [];
            d_ins_fields = [];
            d_subtable_fields = [];
            column_list = [];
            d_table_values = [];

            if ((o_ins != null ? o_ins.form_version : void 0) === (o_ins_form != null ? (ref17 = o_ins_form.current) != null ? ref17._id : void 0 : void 0)) {
              o_ins_fields = o_ins_form != null ? (ref18 = o_ins_form.current) != null ? ref18.fields : void 0 : void 0;
              o_ins_fields.forEach(function (o_ins_field) {
                if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                  return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                }
              });
            } else {
              if ((o_ins_form != null ? (ref19 = o_ins_form.historys) != null ? ref19.length : void 0 : void 0) > 0) {
                o_ins_form.historys.forEach(function (oh) {
                  if ((o_ins != null ? o_ins.form_version : void 0) === oh._id) {
                    o_ins_fields = oh != null ? oh.fields : void 0;
                    return o_ins_fields.forEach(function (o_ins_field) {
                      if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                        return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                      }
                    });
                  }
                });
              }
            }

            if ((d_ins != null ? d_ins.form_version : void 0) === (d_ins_form != null ? (ref20 = d_ins_form.current) != null ? ref20._id : void 0 : void 0)) {
              d_ins_fields = d_ins_form != null ? (ref21 = d_ins_form.current) != null ? ref21.fields : void 0 : void 0;
              d_ins_fields.forEach(function (d_ins_field) {
                if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                  return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                }
              });
            } else {
              if ((d_ins_form != null ? (ref22 = d_ins_form.historys) != null ? ref22.length : void 0 : void 0) > 0) {
                d_ins_form.historys.forEach(function (dh) {
                  if ((d_ins != null ? d_ins.form_version : void 0) === dh._id) {
                    d_ins_fields = dh != null ? dh.fields : void 0;
                    return d_ins_fields.forEach(function (d_ins_field) {
                      if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                        return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                      }
                    });
                  }
                });
              }
            }

            if (o_subtable_fields.length === 0) {
              console.log("o_subtable_fields", o_subtable_fields);
              throw new Meteor.Error('forward table refill error!', '原申请单无对应子表');
            }

            if (d_subtable_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单无对应子表');
            }

            d_table_values = (d_ins != null ? d_ins.values[d_table] : void 0) || [];

            if (a_table) {
              a_table_values = (d_ins != null ? d_ins.values[a_table] : void 0) || [];

              if (a_table_values && (a_table_values != null ? a_table_values.length : void 0) === (d_table_values != null ? d_table_values.length : void 0)) {
                a_table_values.forEach(function (a_row, index) {
                  var key, results, value;
                  results = [];

                  for (key in meteorBabelHelpers.sanitizeForInObject(a_row)) {
                    value = a_row[key];
                    results.push(d_table_values[index][key] = value);
                  }

                  return results;
                });
              }
            }

            if (d_table_values.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表数据为空');
            }

            o_match_col_fields = o_subtable_fields.filter(function (m) {
              return m.code === o_match_col;
            });
            d_match_col_fields = d_subtable_fields.filter(function (m) {
              return m.code === d_match_col;
            });

            if (o_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '原申请单子表无对应匹配列');
            }

            if (d_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应匹配列');
            }

            o_match_col_field = o_match_col_fields[0];
            d_match_col_field = d_match_col_fields[0];

            if ((o_match_col_field != null ? o_match_col_field.type : void 0) !== (d_match_col_field != null ? d_match_col_field.type : void 0)) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单和原申请单子表的匹配列字段不一致');
            }

            columns.forEach(function (column) {
              var col, cols, d_col, d_col_fields, o_col, o_col_fields;
              cols = column.split('-') || [];

              if (cols.length === 2) {
                o_col = cols[0];
                d_col = cols[1];
                o_col_fields = o_subtable_fields.filter(function (m) {
                  return m.code === o_col;
                });
                d_col_fields = d_subtable_fields.filter(function (m) {
                  return m.code === d_col;
                });

                if (o_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '原申请单子表无对应回填列');
                }

                if (d_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应回填列');
                }

                if ((o_col_fields != null ? o_col_fields.type : void 0) !== (d_col_fields != null ? d_col_fields.type : void 0)) {
                  throw new Meteor.Error('forward table refill error!', '回填列字段类型不一致');
                }

                col = {
                  o_col: o_col,
                  d_col: d_col
                };
                return column_list.push(col);
              } else {
                throw new Meteor.Error('forward table refill error!', '回填列不匹配');
              }
            });
            traces = o_ins != null ? o_ins.traces : void 0;
            trace = traces[traces.length - 1];
            approve = trace != null ? trace.approves[0] : void 0;
            table_data = (approve != null ? approve.values[o_table] : void 0) || [];
            d_table_values.forEach(function (d_row) {
              var count, has_obj, row_data;
              has_obj = false;
              count = -1;
              table_data.forEach(function (o_row, index) {
                if (o_row[o_match_col] === d_row[d_match_col]) {
                  has_obj = true;
                  return count = index;
                }
              });

              if (has_obj === true) {
                return column_list.forEach(function (col) {
                  return table_data[count][col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
              } else {
                row_data = {};
                row_data[o_match_col] = d_row[d_match_col];
                column_list.forEach(function (col) {
                  return row_data[col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
                return table_data.push(row_data);
              }
            });
            traces[traces.length - 1].approves[0].values = o_ins != null ? o_ins.values : void 0;
            traces[traces.length - 1].approves[0].values[o_table] = table_data;
            db.instances.update(o_ins_id, {
              $set: {
                'traces': traces
              }
            });
            JsonRoutes.sendResult(res, {
              code: 200,
              data: {
                'success': '回填成功'
              }
            });
          } else {
            throw new Meteor.Error('forward table refill error!', 'webhook未配置子表回填列字段 columns 值');
          }
        } else {
          throw new Meteor.Error('forward table refill error!', 'webhook未配置匹配列字段 oMatchCol 值');
        }
      } else {
        throw new Meteor.Error('forward table refill error!', 'webhook未配置原表单子表 oTable 值');
      }
    } else {
      throw new Meteor.Error('forward table refill error!', '申请单未结束');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_sub_table_sort.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_sub_table_sort.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/sub_table_sort", function (req, res, next) {
  var e, ins, new_table_values, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, sort_col, sub_table, sub_table_values, sum_col;

  try {
    console.log("=========子表==========");
    console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
    console.log("=========子表总分列==========");
    console.log("req?.query?.sumCol", req != null ? (ref1 = req.query) != null ? ref1.sumCol : void 0 : void 0);
    console.log("=========子表排序列==========");
    console.log("req?.query?.sortCol", req != null ? (ref2 = req.query) != null ? ref2.sortCol : void 0 : void 0);
    console.log("=========子表单列需要计算的和==========");
    console.log("req?.query?.singleCols", req != null ? (ref3 = req.query) != null ? ref3.singleCols : void 0 : void 0);
    sub_table = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

    if (!sub_table) {
      console.log("=====sub_table======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 subTable 字段');
    }

    sum_col = req != null ? (ref5 = req.query) != null ? ref5.sumCol : void 0 : void 0;

    if (!sum_col) {
      console.log("=====sum_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sumCol 字段');
    }

    sort_col = req != null ? (ref6 = req.query) != null ? ref6.sortCol : void 0 : void 0;

    if (!sort_col) {
      console.log("=====sort_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sortCol 字段');
    }

    ins = req != null ? (ref7 = req.body) != null ? ref7.instance : void 0 : void 0;
    sub_table_values = ins.values[sub_table];

    if ((sub_table_values != null ? sub_table_values.length : void 0) > 0) {
      var JsonSort = function (jsonArr, key, asc) {
        for (var j = 1, jl = jsonArr.length; j < jl; j++) {
          var temp = jsonArr[j],
              val = Number(temp[key]),
              i = j - 1;

          if (asc == true) {
            while (i >= 0 && Number(jsonArr[i][key]) > val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          } else {
            while (i >= 0 && Number(jsonArr[i][key]) < val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          }

          jsonArr[i + 1] = temp;
        }

        return jsonArr;
      };

      ;
      new_table_values = JsonSort(sub_table_values, sum_col, false);
      console.log("new_table_values", new_table_values);
      new_table_values.forEach(function (obj, index) {
        if (sort_col && obj[sum_col]) {
          return obj[sort_col] = (index + 1).toString();
        }
      });
      console.log("new_table_values", new_table_values);
      ins.values[sub_table] = new_table_values;
      db.instances.update(ins._id, {
        $set: {
          'values': ins.values
        }
      });
      console.log("success");
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'success': '计算排序成功'
        }
      });
    } else {
      throw new Meteor.Error('table sort error!', '子表数据为空');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"test_webhook.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/test_webhook.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isDevelopment) {
  JsonRoutes.add('post', '/test/webhook', function (req, res, next) {
    var e, hashData;

    try {
      hashData = req.body;
      console.log('action: ', hashData.action);
      console.log('from_user: ', hashData.from_user);
      console.log('to_users: ', hashData.to_users);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {}
      });
    } catch (error) {
      e = error;
      console.error(e.stack);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          errors: [{
            errorMessage: e.message
          }]
        }
      });
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_users.coffee                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/users", function (req, res, next) {
  var current_user, current_user_info, spaceId, spaceUsers, space_user, userIds;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  userIds = req.body.userIds;
  spaceId = req.body.spaceId;
  spaceUsers = [];
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!userIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getFormulaUserObjects(spaceId, userIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_organizations.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_organizations.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/orgs", function (req, res, next) {
  var current_user, current_user_info, orgIds, orgs, spaceId, space_user;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  orgIds = req.body.orgIds;
  spaceId = req.body.spaceId;
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!orgIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  orgs = WorkflowManager.getFormulaOrgObjects(orgIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'orgs': orgs
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server":{"methods":{"set_instance_step_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/set_instance_step_approve.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_instance_step_approve: function (ins_id, step_approve, stepsApprovesOptions) {
    var _keys1, _keys2, ins, keys, stepsApproves;

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        state: 1
      }
    });

    if (ins.state !== 'draft') {
      return;
    }

    _keys1 = _.keys(step_approve);
    _keys2 = _.keys(stepsApprovesOptions);
    keys = _.compact(_.union(_keys1, _keys2));
    stepsApproves = {};

    _.each(keys, function (stepId) {
      var stepApproves, stepsApproveOptions;
      stepApproves = step_approve[stepId];
      stepsApproveOptions = stepsApprovesOptions[stepId];

      if (stepApproves) {
        stepsApproves[stepId] = stepApproves;

        if (stepsApproveOptions) {
          if (_.isArray(stepApproves)) {
            stepsApproveOptions = stepApproves.concat(stepsApproveOptions);
          } else {
            stepsApproveOptions.push(stepApproves);
          }
        }
      }

      if (stepsApproveOptions) {
        return stepsApproves[stepId + '_options'] = _.uniq(stepsApproveOptions);
      }
    });

    return db.instances.update({
      _id: ins_id
    }, {
      $set: {
        step_approve: stepsApproves
      }
    });
  },
  set_instance_skip_steps: function (ins_id, stepId, action) {
    if (action === 'pull') {
      return db.instances.update({
        _id: ins_id
      }, {
        $pull: {
          skip_steps: stepId
        }
      });
    } else if (action === 'push') {
      return db.instances.update({
        _id: ins_id
      }, {
        $push: {
          skip_steps: stepId
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_instance_data.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/get_instance_data.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  get_instance_data: function (instance_id, formCached, flowCached) {
    check(instance_id, String);
    check(formCached, Boolean);
    check(flowCached, Boolean);
    var instance = db.instances.findOne(instance_id);
    if (!instance) return {
      instance: null
    };
    if (formCached && flowCached) return {
      instance: instance
    };

    if (!formCached) {
      var form = db.forms.findOne(instance.form);
      var form_version = {};

      if (form.current._id == instance.form_version) {
        form_version = form.current;
      } else {
        form_version = _.where(form.historys, {
          _id: instance.form_version
        })[0];
      }
    }

    if (!flowCached) {
      var flow = db.flows.findOne(instance.flow);
      var flow_version = {};

      if (flow.current._id == instance.flow_version) {
        flow_version = flow.current;
      } else {
        flow_version = _.where(flow.historys, {
          _id: instance.flow_version
        })[0];
      }
    }

    return {
      instance: instance,
      form_version: form_version,
      flow_version: flow_version
    };
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"save_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/save_instance.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  draft_save_instance: function (ins) {
    if (!this.userId) return;
    var result = true;
    var setObj = {};
    var index = 0;
    var ins_id = ins._id;
    var trace_id = ins.traces[0]._id;
    var approve_id = ins.traces[0].approves[0]._id;
    var description = ins.traces[0].approves[0].description;
    var next_steps = ins.traces[0].approves[0].next_steps;
    var values = ins.traces[0].approves[0].values || {};
    var applicant_id = ins.applicant;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        applicant: 1,
        state: 1,
        submitter: 1,
        traces: 1,
        form: 1,
        flow_version: 1,
        space: 1,
        flow: 1
      }
    });
    var space_id = instance.space;
    var flow_id = instance.flow;
    var form_id = instance.form;
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.'; // 判断一个instance是否为拟稿状态

    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';
    uuflowManager.isInstanceDraft(instance, lang); // 判断一个用户是否是一个instance的提交者

    uuflowManager.isInstanceSubmitter(instance, this.userId);
    var flow = db.flows.findOne(flow_id, {
      fields: {
        "current._id": 1,
        "current.form_version": 1,
        "name": 1,
        "current.steps": 1
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (flow.current._id != instance.flow_version) {
      result = "upgraded";

      var start_step = _.find(flow.current.steps, function (s) {
        return s.step_type == "start";
      }); // 流程已升级


      setObj.flow_version = flow.current._id;
      setObj.form_version = flow.current.form_version; // 存入当前最新版flow中开始节点的step_id

      setObj["traces.$.step"] = start_step._id;
      setObj["traces.$.name"] = start_step.name;
    }

    if (instance.applicant != applicant_id) {
      // 申请人已变换
      var user = db.users.findOne(applicant_id, {
        fields: {
          name: 1
        }
      });
      var applicant = db.space_users.find({
        space: space_id,
        user: applicant_id
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = applicant.fetch()[0].organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      setObj.applicant = applicant_id;
      setObj.applicant_name = user.name;
      setObj.applicant_organization = org_id;
      setObj.applicant_organization_name = organization.name;
      setObj.applicant_organization_fullname = organization.fullname;
      setObj[key_str + 'user'] = applicant_id;
      setObj[key_str + 'user_name'] = user.name;
    }

    setObj[key_str + 'values'] = values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'judge'] = 'submitted';
    setObj[key_str + 'read_date'] = new Date();

    if (result != "upgraded" && next_steps) {
      setObj[key_str + 'next_steps'] = next_steps;
    } // 计算申请单标题


    var form = db.forms.findOne({
      _id: form_id
    }, {
      fields: {
        "current.name_forumla": 1
      }
    });
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      // var iscript = name_forumla.replace(/\{/g, "(values['").replace(/\}/g, "'] || '')");
      // var rev = eval(iscript);
      setObj.name = uuflowManager.getInstanceName(ins, values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return result;
  },
  inbox_save_instance: function (approve) {
    if (!this.userId) return;
    var setObj = {};
    var index = 0;
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve.id;
    var values = approve.values;
    var next_steps = approve.next_steps;
    var description = approve.description;
    var judge = approve.judge;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1,
        flow_version: 1,
        flow: 1,
        state: 1,
        form: 1,
        form_version: 1,
        values: 1,
        code: 1
      }
    });
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    var current_approve = _.find(current_trace.approves, function (a) {
      return a._id == approve_id;
    }); // 判断一个instance是否为审核中状态


    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';

    try {
      uuflowManager.isInstancePending(instance, lang); // 判断一个trace是否为未完成状态

      uuflowManager.isTraceNotFinished(current_trace); // 判断一个approve是否为未完成状态

      uuflowManager.isApproveNotFinished(current_approve); // 判断当前用户是否approve 对应的处理人或代理人

      uuflowManager.isHandlerOrAgent(current_approve, this.userId);
    } catch (e) {
      console.log(e.stack);
      return true;
    }

    var flow_version = instance.flow_version;
    var flow_id = instance.flow;
    var step_id = "";
    step_id = current_trace.step;
    var flow = db.flows.findOne(flow_id, {
      fields: {
        current: 1,
        historys: 1
      }
    });
    var step = null;

    if (flow.current._id == flow_version) {
      flow.current.steps.forEach(function (s) {
        if (s._id == step_id) step = s;
      });
    } else {
      flow.historys.forEach(function (h) {
        h.steps.forEach(function (s) {
          if (s._id == step_id) step = s;
        });
      });
    }

    if (!step) return false;
    var step_type = step.step_type;
    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.';
    var permissions_values = uuflowManager.getApproveValues(approve.values, step.permissions, instance.form, instance.form_version);
    var change_values = approveManager.getChangeValues(instance.values, permissions_values);
    setObj.values = _.extend(instance.values || {}, permissions_values);

    if (!_.isEmpty(change_values)) {
      values_history = current_approve.values_history || [];
      values_history.push({
        values: change_values,
        create: new Date()
      });
      setObj[key_str + 'values_history'] = values_history;
    }

    setObj[key_str + 'is_read'] = true;
    setObj[key_str + 'read_date'] = new Date();
    setObj[key_str + 'values'] = setObj.values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'next_steps'] = next_steps;

    if (step_type == "submit" || step_type == "start") {
      setObj[key_str + 'judge'] = "submitted";
    } else {
      setObj[key_str + 'judge'] = judge;
    }

    setObj.modified = new Date();
    setObj.modified_by = this.userId; // 计算申请单标题

    var form = db.forms.findOne(instance.form);
    var form_v = uuflowManager.getFormVersion(form, instance.form_version);
    var name_forumla = form_v.name_forumla;

    if (name_forumla) {
      setObj.name = uuflowManager.getInstanceName(instance, setObj.values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"trace_approve_cc.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/trace_approve_cc.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  cc_do: function (approve, cc_user_ids, description) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve._id;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        space: 1,
        traces: 1,
        cc_users: 1,
        values: 1
      }
    });
    var current_user_id = this.userId;
    var space_id = instance.space;
    var new_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    cc_user_ids.forEach(function (userId, idx) {
      var user = db.users.findOne(userId, {
        fields: {
          name: 1
        }
      });
      var space_user = db.space_users.findOne({
        space: space_id,
        user: userId
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = space_user.organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var agent = uuflowManager.getAgent(space_id, userId);
      var handler_id = userId;
      var handler_info = user;
      var handler_space_user = space_user;
      var handler_org_info = organization;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent, {
          fileds: {
            name: 1
          }
        });
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
        cc_user_ids[idx] = agent;
      }

      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': ins_id,
        'trace': trace_id,
        'is_finished': false,
        'user': userId,
        'user_name': user.name,
        'handler': handler_id,
        'handler_name': handler_info.name,
        'handler_organization': handler_space_user.organization,
        'handler_organization_name': handler_org_info.name,
        'handler_organization_fullname': handler_org_info.fullname,
        'type': 'cc',
        'start_date': new Date(),
        'is_read': false,
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'opinion_fields_code': approve.opinion_fields_code,
        'sign_field_code': approve.opinion_fields_code && approve.opinion_fields_code.length == 1 ? approve.opinion_fields_code[0] : "",
        'from_approve_id': approve_id,
        'cc_description': description
      };

      if (agent) {
        appr.agent = agent;
      }

      uuflowManager.setRemindInfo(instance.values, appr);
      new_approves.push(appr);
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj,
      $addToSet: {
        'traces.$.approves': {
          $each: new_approves
        }
      },
      $push: {
        cc_users: {
          $each: cc_user_ids
        }
      }
    });
    instance = db.instances.findOne(ins_id);
    current_user_info = db.users.findOne(current_user_id);
    pushManager.send_instance_notification("trace_approve_cc", instance, "", current_user_info, cc_user_ids);
    flow_id = instance.flow;
    approve.cc_user_ids = cc_user_ids; // 记录下本次传阅的人员ID作为hook接口中的参数
    // 如果已经配置webhook并已激活则触发

    pushManager.triggerWebhook(flow_id, instance, approve, 'cc_do', current_user_id, cc_user_ids);
    return true;
  },
  cc_read: function (approve) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1
      }
    });
    var current_user_id = this.userId;

    var current_trace = _.find(instance.traces, function (t) {
      return t._id == trace_id;
    });

    var index = 0;
    current_trace.approves.forEach(function (a, idx) {
      if (a.type == 'cc' && a.handler == current_user_id && !a.is_read) {
        index = idx;
      }
    });
    setObj['traces.$.approves.' + index + '.is_read'] = true;
    setObj['traces.$.approves.' + index + '.read_date'] = new Date();
    setObj.traces = traces;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj
    });
    return true;
  },
  cc_submit: function (ins_id, description, myApprove, ccHasEditPermission) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id);
    var traces = instance.traces;
    var current_user_id = this.userId;
    var flow = uuflowManager.getFlow(instance.flow);
    var values = myApprove.values || {};
    var approve_id = myApprove._id;
    var myTrace;

    for (let tidx = 0; tidx < traces.length; tidx++) {
      const t = traces[tidx];

      if (t.approves) {
        for (let aidx = 0; aidx < t.approves.length; aidx++) {
          const a = t.approves[aidx];

          if (a.type == 'cc' && a.handler == current_user_id && a.is_finished == false) {
            var upobj = {};
            var key_str = 'traces.$.approves.' + aidx + '.';
            upobj[key_str + 'is_finished'] = true;
            upobj[key_str + 'is_read'] = true;
            upobj[key_str + 'finish_date'] = new Date();
            upobj[key_str + 'judge'] = "submitted";
            upobj[key_str + 'cost_time'] = new Date() - a.start_date;

            if (approve_id == a._id && !t.is_finished && ccHasEditPermission) {
              myTrace = t;
              var step = uuflowManager.getStep(instance, flow, t.step);
              upobj[key_str + "values"] = uuflowManager.getApproveValues(values, step["permissions"], instance.form, instance.form_version);
            } //设置意见，意见只添加到最后一条approve中


            if (approve_id == a._id) {
              upobj[key_str + 'description'] = description;
            }

            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        }
      }
    }

    if (myApprove) {
      setObj.modified = new Date();
      setObj.modified_by = this.userId;

      if (ccHasEditPermission && myApprove && !myTrace.is_finished) {
        var ins = uuflowManager.getInstance(ins_id);
        var updated_values = uuflowManager.getUpdatedValues(ins, approve_id);
        setObj.values = updated_values;
        setObj.name = uuflowManager.getInstanceName(instance);
      }

      db.instances.update({
        _id: ins_id,
        'traces._id': myApprove.trace
      }, {
        $set: setObj,
        $pull: {
          cc_users: current_user_id
        },
        $addToSet: {
          outbox_users: {
            $each: [current_user_id, myApprove.user]
          }
        }
      });
      instance = db.instances.findOne(ins_id);
      current_user_info = db.users.findOne(current_user_id); //传阅提交不通知传阅者

      if (false && description && myApprove && myApprove.from_user) {
        pushManager.send_instance_notification("trace_approve_cc_submit", instance, "", current_user_info, [myApprove.from_user]);
      }

      pushManager.send_message_to_specifyUser("current_user", current_user_id);
      flow_id = instance.flow; // 如果已经配置webhook并已激活则触发

      pushManager.triggerWebhook(flow_id, instance, myApprove, 'cc_submit', current_user_id, []);
    }

    return true;
  },
  cc_remove: function (instanceId, approveId) {
    var setObj = {};
    var instance = db.instances.findOne(instanceId, {
      fields: {
        traces: 1,
        cc_users: 1
      }
    });
    var traces = instance.traces;
    var trace_id,
        remove_user_id,
        multi = false;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a._id == approveId) {
            trace_id = a.trace;
            remove_user_id = a.handler;
            setObj['traces.$.approves.' + idx + '.judge'] = 'terminated';
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.finish_date'] = new Date();
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.read_date'] = new Date();
          }
        });
      }
    });
    if (!trace_id || !remove_user_id) return;
    var multi = 0;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a) {
          if (a.handler == remove_user_id && a.type == 'cc' && a.is_finished == false) {
            multi++;
          }
        });
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (multi > 1) {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj
      });
    } else {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj,
        $pull: {
          cc_users: remove_user_id
        }
      });
    }

    pushManager.send_message_to_specifyUser("current_user", remove_user_id);
    return true;
  },
  cc_save: function (ins_id, description, myApprove, ccHasEditPermission) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id);
    var traces = instance.traces;
    var current_user_id = this.userId;
    var myTrace;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a.handler == current_user_id && a.type == 'cc' && a.is_finished == false) {
            var upobj = {};
            upobj['traces.$.approves.' + idx + '.judge'] = "submitted";
            upobj['traces.$.approves.' + idx + '.read_date'] = new Date();
            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        });
      }
    });
    var index = 0;
    var currentStepId; //设置意见，意见只添加到最后一条approve中

    traces.forEach(function (t) {
      if (myApprove && t._id === myApprove.trace) {
        currentStepId = t.step;
        myTrace = t;

        if (t.approves) {
          t.approves.forEach(function (a, idx) {
            if (a._id === myApprove._id) {
              index = idx;
            }
          });
        }
      }
    });
    setObj['traces.$.approves.' + index + '.description'] = description;
    var updateObj = {};

    if (ccHasEditPermission && myApprove && !myTrace.is_finished) {
      var key_str = 'traces.$.approves.' + index + '.';
      var flow = uuflowManager.getFlow(instance.flow);
      var step = uuflowManager.getStep(instance, flow, currentStepId);
      var permissions_values = uuflowManager.getApproveValues(myApprove.values, step.permissions, instance.form, instance.form_version);
      var change_values = approveManager.getChangeValues(instance.values, permissions_values);
      setObj.values = _.extend(instance.values || {}, permissions_values);

      if (!_.isEmpty(change_values)) {
        var pushObj = {};
        pushObj[key_str + 'values_history'] = {
          values: change_values,
          create: new Date()
        };
        updateObj.$push = pushObj;
      }

      setObj.name = uuflowManager.getInstanceName(instance);
    }

    updateObj.$set = setObj;
    db.instances.update({
      _id: ins_id,
      'traces._id': myApprove.trace
    }, updateObj);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forward_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/forward_instance.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  // 改为通过api调用
  forward_instance: function (instance_id, space_id, flow_id, hasSaveInstanceToAttachment, description, isForwardAttachments, selectedUsers, action_type, related, from_approve_id) {
    if (!this.userId) throw new Meteor.Error('not-authorized');
    return;
  },
  forward_remove: function (instance_id, trace_id, approve_id) {
    check(instance_id, String);
    check(trace_id, String);
    check(approve_id, String);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var trace = _.find(ins.traces, function (t) {
      return t._id == trace_id;
    });

    var approve = _.find(trace.approves, function (appr) {
      return appr._id == approve_id;
    });

    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, this.userId);

    if (!approve || !['forward', 'distribute'].includes(approve.type) || !approve.forward_instance) {
      if (!hasAdminPermission) {
        if (approve.from_user != this.userId) throw new Meteor.Error('error!', 'instance_forward_cannot_cancel');
      }
    }

    var forward_instance_id = approve.forward_instance;
    var forward_instance = db.instances.findOne(forward_instance_id);

    if (forward_instance) {
      if (forward_instance.state != "draft") {
        if (!hasAdminPermission) throw new Meteor.Error('error!', 'instance_forward_instance_state_changed');
      }

      var inbox_users = forward_instance.inbox_users || [];
      forward_instance.deleted = new Date();
      forward_instance.deleted_by = this.userId;
      var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

      if (deleted_forward_instance_id) {
        db.instances.remove({
          _id: forward_instance_id
        }); // 删除申请单后重新计算inbox_users的badge

        _.each(inbox_users, function (u_id) {
          pushManager.send_message_to_specifyUser("current_user", u_id);
        });
      }
    }

    var set_obj = new Object();
    set_obj.modified = new Date();
    set_obj.modified_by = this.userId;

    _.each(trace.approves, function (appr, idx) {
      if (appr._id == approve_id) {
        set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
        set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
        set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
        set_obj['traces.$.approves.' + idx + '.is_read'] = true;
        set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
      }
    });

    db.instances.update({
      _id: instance_id,
      "traces._id": trace_id
    }, {
      $set: set_obj
    });
    return true;
  },
  cancelDistribute: function (instance_id, approve_ids) {
    check(instance_id, String);
    check(approve_ids, Array);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    userId = this.userId;
    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, userId);

    _.each(ins.traces, function (t) {
      if (t.approves) {
        var exists = false;
        var set_obj = new Object();

        _.each(t.approves, function (a, idx) {
          if (approve_ids.includes(a._id) && (a.from_user == userId || hasAdminPermission) && 'distribute' == a.type && a.forward_instance) {
            var forward_instance_id = a.forward_instance;
            var forward_instance = db.instances.findOne(forward_instance_id);

            if (forward_instance) {
              if (forward_instance.state != "draft") {
                return;
              }

              var inbox_users = forward_instance.inbox_users || [];
              forward_instance.deleted = new Date();
              forward_instance.deleted_by = userId;
              var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

              if (deleted_forward_instance_id) {
                db.instances.remove({
                  _id: forward_instance_id
                }); // 删除申请单后重新计算inbox_users的badge

                _.each(inbox_users, function (u_id) {
                  pushManager.send_message_to_specifyUser("current_user", u_id);
                });
              }

              set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
              set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
              set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
              set_obj['traces.$.approves.' + idx + '.is_read'] = true;
              set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
            }

            exists = true;
          }
        });

        if (!exists) return;
        set_obj.modified = new Date();
        set_obj.modified_by = userId;
        db.instances.update({
          _id: instance_id,
          "traces._id": t._id
        }, {
          $set: set_obj
        });
      }
    });

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/cfs_instances.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  cfs_instances_remove: function (file_id) {
    check(file_id, String);
    cfs.instances.remove(file_id);
    return true;
  },
  cfs_instances_set_current: function (file_id) {
    check(file_id, String);
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.current': true
      }
    });
    return true;
  },
  cfs_instances_lock: function (file_id, user_id, user_name) {
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.locked_by': user_id,
        'metadata.locked_by_name': user_name,
        'metadata.locked_time': new Date()
      }
    });
    return true;
  },
  cfs_instances_unlock: function (file_id) {
    cfs.instances.update({
      _id: file_id
    }, {
      $unset: {
        'metadata.locked_by': '',
        'metadata.locked_by_name': '',
        'metadata.locked_time': ''
      }
    });
    return true;
  },
  download_space_instance_attachments_to_disk: function (spaceId, cfsRecordIds) {
    if (!this.userId) return "不符合执行条件";
    if (Meteor.users.find({
      _id: this.userId,
      is_cloudadmin: true
    }).count() < 1) return "不符合执行条件";
    check(spaceId, String);
    var store = "instances";

    var fs = require('fs');

    var path = require('path');

    var mkdirp = require('mkdirp');

    var pathname = path.join(__meteor_bootstrap__.serverDir, '../../../cfs/spaceInstanceAttachments'); // Set absolute path

    var absolutePath = path.resolve(pathname); // Ensure the path exists

    mkdirp.sync(absolutePath);
    console.log('absolutePath: ', absolutePath);
    console.time('download_space_instance_attachments_to_disk');
    var query = {
      'metadata.space': spaceId
    };

    if (cfsRecordIds) {
      query._id = {
        $in: cfsRecordIds
      };
    }

    var downloadFailedRecordIds = [];
    cfs.instances.find(query).forEach(function (c) {
      try {
        var fileName = store + '-' + c._id + '-' + c.name();
        var filePath = path.join(absolutePath, fileName);
        Meteor.wrapAsync(function (callback) {
          try {
            var writer = fs.createWriteStream(filePath);
            writer.on('finish', function () {
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            var reader = c.createReadStream(store);
            reader.on('error', function (error) {
              downloadFailedRecordIds.push(c._id);
              console.error('download_space_instance_attachments_to_disk: ', c._id);
              console.error(error.stack);
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            reader.pipe(writer);
          } catch (error) {
            console.error('download_space_instance_attachments_to_disk: ', c._id);
            console.error(error.stack);
            if (callback && _.isFunction(callback)) callback();
            return;
          }
        })();
      } catch (error) {
        console.error('download_space_instance_attachments_to_disk: ', c._id);
        console.error(error.stack);
      }
    });

    if (downloadFailedRecordIds.length > 0) {
      console.error('downloadFailedRecordIds: ');
      console.error(downloadFailedRecordIds);
    }

    console.timeEnd('download_space_instance_attachments_to_disk');
    return downloadFailedRecordIds;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_approve.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_approve_have_read: function (instanceId, traceId, approveId) {
    var instance, ref, self, setObj, trace;

    if (!this.userId) {
      return;
    }

    self = this;
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {
        modified: new Date(),
        modified_by: self.userId
      };
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId && !approve.is_read) {
          setObj["traces.$.approves." + idx + ".is_read"] = true;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  change_approve_info: function (instanceId, traceId, approveId, description, finish_date) {
    var instance, ref, setObj, trace;

    if (!this.userId) {
      return;
    }

    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(description, String);
    check(finish_date, Date);
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          setObj["traces.$.approves." + idx + ".description"] = description;
          setObj["traces.$.approves." + idx + ".finish_date"] = finish_date;
          setObj["traces.$.approves." + idx + ".cost_time"] = new Date() - approve.start_date;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  update_approve_sign: function (instanceId, traceId, approveId, sign_field_code, description, sign_type, lastSignApprove) {
    var instance, lastTrace, ref, session_userId, setObj, trace, upObj;
    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(sign_field_code, String);
    check(description, String);

    if (!this.userId) {
      return;
    }

    session_userId = this.userId;

    if (lastSignApprove) {
      if (lastSignApprove.custom_sign_show) {
        return;
      }

      instance = db.instances.findOne({
        _id: instanceId,
        "traces._id": lastSignApprove.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });
      lastTrace = _.find(instance != null ? instance.traces : void 0, function (t) {
        return t._id = lastSignApprove.trace;
      });

      if (lastTrace) {
        setObj = {};

        if (lastTrace != null) {
          lastTrace.approves.forEach(function (a, idx) {
            if (a._id === lastSignApprove._id) {
              if (sign_type === "update") {
                setObj["traces.$.approves." + idx + ".sign_show"] = false;
                setObj["traces.$.approves." + idx + ".modified"] = new Date();
                return setObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
              }
            }
          });
        }

        if (!_.isEmpty(setObj)) {
          db.instances.update({
            _id: instanceId,
            "traces._id": lastTrace._id
          }, {
            $set: setObj
          });
        }
      }
    }

    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      upObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          if (sign_field_code) {
            upObj["traces.$.approves." + idx + ".sign_field_code"] = sign_field_code;
          }

          upObj["traces.$.approves." + idx + ".description"] = description;
          upObj["traces.$.approves." + idx + ".sign_show"] = true;
          upObj["traces.$.approves." + idx + ".modified"] = new Date();
          upObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
          return upObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(upObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: upObj
        });
      }

      return true;
    }
  },
  update_sign_show: function (objs, myApprove_id) {
    objs.forEach(function (obj, index) {
      var instance, ref, setObj, trace;
      instance = db.instances.findOne({
        _id: obj.instance,
        "traces._id": obj.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });

      if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
        trace = instance.traces[0];
        setObj = {};
        trace.approves.forEach(function (approve, idx) {
          if (approve._id === obj._id) {
            setObj["traces.$.approves." + idx + ".sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".custom_sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }

          if (approve._id === myApprove_id) {
            return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }
        });

        if (!_.isEmpty(setObj)) {
          return db.instances.update({
            _id: obj.instance,
            "traces._id": obj.trace
          }, {
            $set: setObj
          });
        }
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_return.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_return.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_return: function (approve, reason) {
    var approve_values, b, current_step, current_user, current_user_info, flow, ins, instance, instance_id, last_trace, newTrace, new_inbox_users, now, pre_step, pre_trace, r, rest_counter_users, setObj, space_id, traces;
    check(approve, Object);
    current_user = this.userId;
    instance_id = approve.instance;
    ins = uuflowManager.getInstance(instance_id);
    space_id = ins.space;

    if (ins.state !== "pending" || !ins.inbox_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.type === "cc" && ins.cc_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (ins.traces.length < 2) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    flow = uuflowManager.getFlow(ins.flow);
    pre_trace = ins.traces[ins.traces.length - 2];
    pre_step = uuflowManager.getStep(ins, flow, pre_trace.step);

    if (pre_step.step_type === "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    last_trace = _.last(ins.traces);
    current_step = uuflowManager.getStep(ins, flow, last_trace.step);

    if (current_step.step_type !== "submit" && current_step.step_type !== "sign" && current_step.step_type !== "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.trace !== last_trace._id) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    new_inbox_users = new Array();

    _.each(pre_trace.approves, function (a) {
      if ((!a.type || a.type === "draft" || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected")) {
        return new_inbox_users.push(a.user);
      }
    });

    if (_.isEmpty(new_inbox_users)) {
      throw new Meteor.Error('error!', "未找到下一步处理人，退回失败");
    }

    traces = ins.traces;
    approve_values = uuflowManager.getApproveValues(approve.values || {}, current_step.permissions, ins.form, ins.form_version);
    setObj = new Object();
    now = new Date();
    rest_counter_users = new Array();

    _.each(traces, function (t) {
      if (t._id === last_trace._id) {
        if (!t.approves) {
          t.approves = new Array();
        }

        _.each(t.approves, function (a, idx) {
          if ((!a.type || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected" || a.judge === "readed") && a.is_finished !== true) {
            setObj['traces.$.approves.' + idx + '.finish_date'] = now;
            setObj['traces.$.approves.' + idx + '.read_date'] = now;
            setObj['traces.$.approves.' + idx + '.is_error'] = false;
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.cost_time'] = now - a.start_date;
            setObj['traces.$.approves.' + idx + '.values'] = approve_values;

            if (a.handler === current_user) {
              setObj['traces.$.approves.' + idx + '.judge'] = "returned";
              return setObj['traces.$.approves.' + idx + '.description'] = reason;
            } else {
              return rest_counter_users.push(a.handler);
            }
          }
        });

        setObj['traces.$.is_finished'] = true;
        setObj['traces.$.finish_date'] = true;
        return setObj['traces.$.judge'] = "returned";
      }
    });

    ins.values = _.extend(ins.values || {}, approve_values);
    newTrace = new Object();
    newTrace._id = new Mongo.ObjectID()._str;
    newTrace.instance = instance_id;
    newTrace.previous_trace_ids = [last_trace._id];
    newTrace.is_finished = false;
    newTrace.step = pre_trace.step;
    newTrace.name = pre_trace.name;
    newTrace.start_date = now;
    newTrace.due_date = uuflowManager.getDueDate(pre_step.timeout_hours, space_id);
    newTrace.approves = [];

    _.each(new_inbox_users, function (next_step_user_id, idx) {
      var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
      newApprove = new Object();
      newApprove._id = new Mongo.ObjectID()._str;
      newApprove.instance = instance_id;
      newApprove.trace = newTrace._id;
      newApprove.is_finished = false;
      newApprove.user = next_step_user_id;
      user_info = db.users.findOne(next_step_user_id, {
        fields: {
          name: 1
        }
      });
      newApprove.user_name = user_info.name;
      handler_id = next_step_user_id;
      handler_info = user_info;
      agent = uuflowManager.getAgent(space_id, next_step_user_id);

      if (agent) {
        new_inbox_users[idx] = agent;
        handler_id = agent;
        handler_info = db.users.findOne({
          _id: agent
        }, {
          fields: {
            name: 1
          }
        });
        newApprove.agent = agent;
      }

      newApprove.handler = handler_id;
      newApprove.handler_name = handler_info.name;
      next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
      next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
      newApprove.handler_organization = next_step_user_org_info["organization"];
      newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
      newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
      newApprove.start_date = now;
      newApprove.is_read = false;
      newApprove.is_error = false;
      newApprove.values = new Object();
      uuflowManager.setRemindInfo(ins.values, newApprove);
      return newTrace.approves.push(newApprove);
    });

    setObj.inbox_users = new_inbox_users;
    setObj.state = "pending";
    ins.outbox_users.push(current_user);
    setObj.outbox_users = _.uniq(ins.outbox_users);
    setObj.modified = now;
    setObj.modified_by = current_user;
    setObj.values = ins.values;
    setObj.current_step_name = pre_trace.name;
    r = db.instances.update({
      _id: instance_id,
      'traces._id': last_trace._id
    }, {
      $set: setObj
    });
    b = db.instances.update({
      _id: instance_id
    }, {
      $push: {
        traces: newTrace
      }
    });

    if (r && b) {
      pushManager.send_message_to_specifyUser("current_user", current_user);
      instance = uuflowManager.getInstance(instance_id);
      current_user_info = db.users.findOne(current_user);
      pushManager.send_instance_notification("return_pending_inbox", instance, reason, current_user_info);

      _.each(rest_counter_users, function (user_id) {
        return pushManager.send_message_to_specifyUser("current_user", user_id);
      });
    }

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_remind.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_remind.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_remind: function (remind_users, remind_count, remind_deadline, instance_id, action_types, trace_id) {
    var current_user_id, ins, last_remind_users, now, priority, trace;
    check(remind_users, Array);
    check(remind_count, Match.OneOf('single', 'multi'));
    check(remind_deadline, Date);
    check(instance_id, String);
    check(action_types, Array);
    check(trace_id, String);
    current_user_id = this.userId;
    last_remind_users = new Array();
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        name: 1,
        traces: 1,
        values: 1,
        space: 1
      }
    });

    if (action_types.includes('admin')) {
      if (remind_count === 'single') {
        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              return last_remind_users.push(ap.user);
            }
          });
        });
      } else if (remind_count === 'multi') {
        now = new Date();
        priority = ins.values.priority;

        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            var caculate_date;

            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              last_remind_users.push(ap.user);
              ap.manual_deadline = remind_deadline;

              if (priority === "普通" || !priority) {} else if (priority === "办文") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "紧急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "特急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              }
            }
          });
        });

        if (!_.isEmpty(last_remind_users)) {
          db.instances.update({
            _id: instance_id
          }, {
            $set: {
              'traces': ins.traces
            }
          });
        }
      }
    } else if (action_types.includes('applicant')) {
      trace = _.find(ins.traces, function (t) {
        return t._id === trace_id;
      });

      _.each(trace.approves, function (ap) {
        if (remind_users.includes(ap.user) && ap.is_finished !== true) {
          return last_remind_users.push(ap.user);
        }
      });
    } else if (action_types.includes('cc')) {
      _.each(ins.traces, function (t) {
        return _.each(t.approves, function (ap) {
          if (remind_users.includes(ap.user) && ap.is_finished !== true && ap.type === 'cc' && ap.from_user === current_user_id) {
            return last_remind_users.push(ap.user);
          }
        });
      });
    }

    uuflowManager.sendRemindSMS(ins.name, remind_deadline, last_remind_users, ins.space, ins._id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"next_step_users_not_found.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/next_step_users_not_found.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  next_step_users_not_found: function (deal_type, step_name, params) {
    var approver_roles, lang, roles, roles_name, str, user;
    check(deal_type, String);
    check(step_name, String);
    check(params, Object);
    str = "";
    user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    lang = 'en';

    if (user.locale === 'zh-cn') {
      lang = 'zh-CN';
    }

    if (deal_type === 'applicantRole') {
      approver_roles = params.approver_roles;
      roles = db.flow_roles.find({
        _id: {
          $in: approver_roles
        }
      }, {
        fields: {
          name: 1
        }
      }).fetch();
      roles_name = _.pluck(roles, 'name').toString();
      str = TAPi18n.__('next_step_users_not_found.applicant_role', {
        step_name: step_name,
        role_name: roles_name
      }, lang);
    }

    return str;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_number_rules.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_number_rules.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval;

_eval = require('eval');
Meteor.methods({
  instanceNumberBuilder: function (spaceId, name) {
    var _NUMBER, _YYYY, context, date, e, numberRules, res, rules, script;

    numberRules = db.instance_number_rules.findOne({
      space: spaceId,
      name: name
    });

    if (!numberRules) {
      throw new Meteor.Error('error!', "" + name);
    }

    date = new Date();
    context = {};
    context._ = _;
    _YYYY = date.getFullYear();
    _NUMBER = (numberRules.number || 0) + 1;
    context.YYYY = _.clone(_YYYY);
    context.MM = date.getMonth() + 1;
    context.mm = date.getMonth() + 1;

    if (context.MM < 10) {
      context.MM = "0" + context.MM;
    }

    context.DD = date.getDate();
    context.dd = date.getDate();

    if (context.DD < 10) {
      context.DD = "0" + context.DD;
    }

    if (context.YYYY !== numberRules.year) {
      _NUMBER = numberRules.first_number || 1;
    }

    context.NUMBER = _.clone(_NUMBER);
    rules = numberRules.rules.replace("{YYYY}", "' + YYYY + '").replace("{MM}", "' + MM + '").replace("{NUMBER}", "' + NUMBER + '");
    script = "var newNo = '" + rules + "'; exports.newNo = newNo";

    try {
      res = _eval(script, "newNo", context, false).newNo;
      db.instance_number_rules.update({
        _id: numberRules._id
      }, {
        $set: {
          year: _YYYY,
          number: _NUMBER
        }
      });
      console.log(this.userId, res);
    } catch (error) {
      e = error;
      res = {
        _error: e
      };
    }

    return res;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"check_main_attach.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/check_main_attach.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  check_main_attach: function (ins_id, name) {
    check(ins_id, String);
    uuflowManager.checkMainAttach(ins_id, name);
    return 'success';
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/related_instances.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  remove_related: function (ins_id, re_ins_id) {
    var index, ins, res, set_obj;
    check(ins_id, String);
    check(re_ins_id, String);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        related_instances: 1
      }
    });

    if (ins) {
      res = ins.related_instances || [];
      index = res.indexOf(re_ins_id);

      if (index > -1) {
        res.remove(index);
      }

      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = res;
      return db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }
  },
  update_instance_related: function (ins_id, related_instances) {
    var ins, set_obj;
    check(ins_id, String);
    check(related_instances, Array);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id,
      $or: [{
        submitter: this.userId
      }, {
        applicant: this.userId
      }, {
        inbox_users: this.userId
      }, {
        cc_users: this.userId
      }]
    }, {
      fields: {
        state: 1
      }
    });

    if (ins) {
      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = related_instances;
      db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }

    return db.instances.find({
      _id: {
        $in: related_instances
      }
    }, {
      fields: {
        _id: 1,
        values: 1
      }
    }).fetch();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"edit_flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/edit_flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  updateFlowPosition: function (data) {
    return db.flow_positions.update({
      _id: data._id
    }, {
      $set: {
        role: data.role,
        users: data.users,
        org: data.org
      }
    });
  },
  updateFlowRole: function (data) {
    console.log(data._id);
    console.log(data.name);
    return db.flow_roles.update({
      _id: data._id
    }, {
      $set: {
        name: data.name
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"start_flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/start_flow.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  start_flow: function (space, flowId, start) {
    var keyValue, start_flows;
    keyValue = db.steedos_keyvalues.findOne({
      space: space,
      user: this.userId,
      key: 'start_flows'
    }, {
      fields: {
        value: 1
      }
    });
    start_flows = (keyValue != null ? keyValue.value : void 0) || [];

    if (start) {
      start_flows.push(flowId);
      start_flows = _.uniq(start_flows);
    } else {
      start_flows.remove(start_flows.indexOf(flowId));
    }

    if (keyValue) {
      return db.steedos_keyvalues.update({
        _id: keyValue._id
      }, {
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    } else {
      return db.steedos_keyvalues.insert({
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_traces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_traces.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  get_instance_traces: function (ins_id) {
    var ins, miniApproveFields;

    if (!this.userId) {
      return;
    }

    miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description'];
    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        "traces._id": 1,
        "traces.is_finished": 1,
        "traces.step": 1,
        "traces.start_date": 1,
        "traces.name": 1,
        "traces.finish_date": 1,
        "traces.judge": 1,
        "traces.approves._id": 1,
        "traces.approves.is_finished": 1,
        "traces.approves.user": 1,
        "traces.approves.handler": 1,
        "traces.approves.handler_name": 1,
        "traces.approves.handler_organization_fullname": 1,
        "traces.approves.type": 1,
        "traces.approves.start_date": 1,
        "traces.approves.description": 1,
        "traces.approves.is_read": 1,
        "traces.approves.judge": 1,
        "traces.approves.finish_date": 1,
        "traces.approves.from_user_name": 1,
        "traces.approves.from_user": 1,
        "traces.approves.cc_description": 1,
        "traces.approves.trace": 1,
        "traces.approves.forward_space": 1,
        "traces.approves.forward_instance": 1
      }
    });

    if (!ins) {
      return;
    }

    return ins != null ? ins.traces : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_batch.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_batch.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  'get_batch_instances': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return _batch_instances;
  },
  'get_batch_instances_count': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return (_batch_instances != null ? _batch_instances.length : void 0) || 0;
  },
  'get_my_approves': function (instanceIds) {
    var myApproves, that;
    that = this;

    if (!that.userId) {
      return;
    }

    myApproves = new Array();
    instanceIds.forEach(function (insId) {
      var my_approve;
      my_approve = InstanceManager.getMyApprove(insId, that.userId);

      if (my_approve) {
        return myApproves.push(my_approve);
      }
    });
    return myApproves;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/flow.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  change_flow_state: function (flows) {
    var _userId;

    check(flows, Array);
    _userId = this.userId;

    if (!_userId) {
      return;
    }

    return flows.forEach(function (flow) {
      var _flows, _flows_state, flowId, form, formId, form_current_fields_code, now, spaceId, state;

      spaceId = flow.space;
      formId = flow.form;
      flowId = flow.id;
      state = flow.state;

      if (!Steedos.isSpaceAdmin(spaceId, _userId)) {
        throw Meteor.Error(401, "No permission");
      }

      form = db.forms.findOne({
        _id: formId
      }, {
        fields: {
          historys: 0
        }
      });
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          historys: 0
        }
      });

      if (state !== 'enabled' && state !== 'disabled') {
        throw new Meteor.Error(500, "state无效");
      }

      if (!form) {
        throw new Meteor.Error(500, "form无效");
      }

      if (!flow) {
        throw new Meteor.Error(500, "flow无效");
      }

      if (!form.is_valid) {
        throw new Meteor.Error(500, "流程引用的表单[" + form.name + "]验证未通过，请打开流程设计器检查表单设置");
      }

      if (!flow.is_valid) {
        throw new Meteor.Error(500, "流程验证未通过，请打开流程设计器检查流程设置");
      }

      if (!['new', 'modify', 'delete'].includes(flow.flowtype)) {
        throw new Meteor.Error(500, "流程验证未通过，flowtype值必须是new、modify、delete其中之一");
      }

      if (!_.isArray(flow.current.steps)) {
        throw new Meteor.Error(500, "流程验证未通过，流程的步骤不能为空");
      }

      if (_.uniq(flow.current.steps, 'name').length !== flow.current.steps.length) {
        throw new Meteor.Error(500, "流程验证未通过，同一个流程下的步骤的名称不能重复");
      }

      now = new Date();

      if (state === 'enabled') {
        flow.current.steps.forEach(function (step) {
          var specifyStep;

          if (['specifyStepUser', 'specifyStepRole'].includes(step.deal_type)) {
            if (!step.approver_step) {
              throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
            } else {
              specifyStep = _.find(flow.current.steps, function (_step) {
                return step.approver_step === _step._id;
              });

              if (!specifyStep) {
                throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
              }
            }
          }
        });
        form_current_fields_code = form.current.fields.getProperty("code");
        flow.current.steps.forEach(function (step) {
          return step.fields_modifiable = _.intersection(step.fields_modifiable, form_current_fields_code);
        });

        if (form.state === 'disabled') {
          db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "enabled",
              "current.start_date": now,
              "current.modified": now,
              "current.modified_by": _userId
            }
          });
        }

        flow.current.modified = now;
        flow.current.start_date = now;
        flow.current.modified_by = _userId;
        return db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "enabled",
            "current": flow.current
          }
        });
      } else {
        db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "disabled",
            "current.modified": now,
            "current.start_date": now,
            "current.modified_by": _userId
          }
        });
        _flows = db.flows.find({
          form: form._id
        }, {
          fields: {
            _id: 1,
            state: 1
          }
        }).fetch();
        _flows_state = _flows.getProperty("state");

        if (!_flows_state.includes('enabled')) {
          return db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "disabled",
              "current.modified": now,
              "current.start_date": now,
              "current.modified_by": _userId
            }
          });
        }
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distribute.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/distribute.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hide_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/hide_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  hide_instance: function (insId, is_hidden) {
    var instance, permissions, space, userId;

    if (!this.userId) {
      return;
    }

    check(insId, String);
    check(is_hidden, Boolean);
    userId = this.userId;
    instance = db.instances.findOne(insId, {
      fields: {
        state: 1,
        flow: 1,
        space: 1
      }
    });

    if (!instance) {
      throw new Meteor.Error('error!', "未找到申请单");
    }

    if (instance.state !== 'completed') {
      throw new Meteor.Error('error!', "申请单状态不是已结束");
    }

    permissions = permissionManager.getFlowPermissions(instance.flow, userId);
    space = db.spaces.findOne(instance.space, {
      fields: {
        admins: 1
      }
    });

    if (!permissions.includes("admin") && !space.admins.includes(userId)) {
      throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
    }

    db.instances.update(insId, {
      $set: {
        is_hidden: is_hidden
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_value.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_value.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  getInstanceValues: function (insId) {
    var ref;

    if (!this.userId) {
      return;
    }

    return (ref = db.instances.findOne({
      _id: insId
    }, {
      fields: {
        values: 1
      }
    })) != null ? ref.values : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"routes":{"instance.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies, getInstanceReadOnly;
Cookies = require("cookies");

getInstanceReadOnly = function (req, res, next, options) {
  var _hasPermission, _locale, _parent_instances, dataBuf, error, hide_traces, html, instance, instanceId, ref, ref1, space, spaceId, spaceUserCount, user, userId;

  user = Steedos.getAPILoginUser(req, res);

  if (req != null ? (ref = req.query) != null ? ref.access_token : void 0 : void 0) {
    userId = Steedos.getUserIdFromAccessToken(req.query.access_token);

    if (userId) {
      user = Meteor.users.findOne({
        _id: userId
      });
    }
  }

  spaceId = req.params.space;
  instanceId = req.params.instance_id;
  instance = db.instances.findOne({
    _id: instanceId
  });
  space = db.spaces.findOne({
    _id: spaceId
  });
  hide_traces = (ref1 = req.query) != null ? ref1.hide_traces : void 0;

  if (!options) {
    options = {
      showTrace: true
    };
  } else {
    options.showTrace = true;
  }

  if (hide_traces === "1") {
    if (options) {
      options.showTrace = false;
    } else {
      options = {
        showTrace: false
      };
    }
  }

  if (!options.showAttachments) {
    options.showAttachments = true;
  }

  if (!space) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space",
        "success": false
      }
    });
    return;
  }

  if (!instance) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing instance",
        "success": false
      }
    });
    return;
  }

  if (!user) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Auth-Token,X-User-Id",
        "success": false
      }
    });
    return;
  }

  if (instance.space !== spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space or instance",
        "success": false
      }
    });
    return;
  }

  spaceUserCount = db.space_users.find({
    user: user._id,
    space: spaceId
  }).count();

  if (spaceUserCount === 0) {
    if (!space) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- Missing sapceUser",
          "success": false
        }
      });
      return;
    }
  }

  _hasPermission = WorkflowManager.hasInstancePermissions(user, instance);

  if (!_hasPermission && instance.distribute_from_instance) {
    _parent_instances = _.union([instance.distribute_from_instance], instance.distribute_from_instances || []);
    _hasPermission = _.find(_parent_instances, function (_parent_id) {
      var _parent_ins;

      _parent_ins = db.instances.findOne({
        _id: _parent_id
      }, {
        fields: {
          traces: 0
        }
      });
      return WorkflowManager.hasInstancePermissions(user, _parent_ins);
    });
  }

  if (!_hasPermission) {
    _locale = Steedos.locale(user._id, true);
    error = TAPi18n.__("instance_permissions_error", {}, _locale);
    res.charset = "utf-8";
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": error,
        "success": false
      }
    });
    return;
  }

  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
};

JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id", getInstanceReadOnly);
JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id/:instance_name", function (req, res, next) {
  var options;
  res.setHeader('Content-type', 'application/x-msdownload');
  res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(req.params.instance_name));
  res.setHeader('Transfer-Encoding', '');
  options = {
    absolute: true
  };
  return getInstanceReadOnly(req, res, next, options);
}); /*
    	获取申请单列表：
        final_decision：审批结果
        state: 申请单状态
     */
JsonRoutes.add("get", "/api/workflow/instances", function (req, res, next) {
  var f, flowId, flowIds, flows, i, instances, query, ref, ref1, ref2, ref3, ret_sync_token, spaceId, spaceUser, spaceUserOrganizations, sync_token, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  spaceId = req.headers["x-space-id"];

  if (!spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Space-Id",
        "success": false
      }
    });
    return;
  }

  flowId = (ref = req.query) != null ? ref.flowId : void 0;

  if (!flowId) {
    JsonRoutes.sendResult(res, {
      code: 400,
      data: {
        "error": "Validate Request -- Missing flowId",
        "success": false
      }
    });
    return;
  }

  query = {};
  ret_sync_token = new Date().getTime();
  flowIds = flowId.split(",");
  flows = db.flows.find({
    _id: {
      $in: flowIds
    }
  }).fetch();
  i = 0;

  while (i < flows.length) {
    f = flows[i];
    spaceUser = db.space_users.findOne({
      space: f.space,
      user: user_id
    });

    if (!spaceUser) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- No permission, flow is " + f._id,
          "success": false
        }
      });
      return;
    } else {}

    if (!Steedos.isSpaceAdmin(spaceId, user_id)) {
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: spaceUser.organizations
        }
      }).fetch();

      if (!WorkflowManager.canMonitor(f, spaceUser, spaceUserOrganizations) && !WorkflowManager.canAdmin(f, spaceUser, spaceUserOrganizations)) {
        JsonRoutes.sendResult(res, {
          code: 401,
          data: {
            "error": "Validate Request -- No permission, flow is " + f._id,
            "success": false
          }
        });
        return;
      }
    }

    i++;
  }

  query.flow = {
    $in: flowIds
  };
  query.space = spaceId;

  if ((ref1 = req.query) != null ? ref1.sync_token : void 0) {
    sync_token = new Date(Number(req.query.sync_token));
    query.modified = {
      $gt: sync_token
    };
  }

  if ((ref2 = req.query) != null ? ref2.final_decision : void 0) {
    query.final_decision = {
      $in: req.query.final_decision.split(",")
    };
  } else {
    query.final_decision = {
      $nin: ["terminated", "rejected"]
    };
  }

  if ((ref3 = req.query) != null ? ref3.state : void 0) {
    query.state = {
      $in: req.query.state.split(",")
    };
  } else {
    query.state = "completed";
  }

  instances = db.instances.find(query, {
    fields: {
      inbox_uers: 0,
      cc_users: 0,
      outbox_users: 0,
      traces: 0,
      attachments: 0
    },
    skip: 0,
    limit: 500
  }).fetch();
  instances.forEach(function (instance) {
    var attachments;
    attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return instance.attachments = attachments;
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      "status": "success",
      "sync_token": ret_sync_token,
      "data": instances
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"steedos_css.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/steedos_css.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/steedos-css", function (req, res, next) {
  var allCss, allCssLink;
  allCss = WebApp.getRefreshableAssets();
  allCssLink = "";
  allCss.forEach(function (css) {
    var cssHref, rootUrl;

    if (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX) {
      rootUrl = __meteor_runtime_config__.ROOT_URL;

      if (rootUrl.endsWith("/")) {
        cssHref = rootUrl.replace(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX + "/", "") + css.url;
      } else {
        cssHref = rootUrl.replace(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX, "") + css.url;
      }
    } else {
      cssHref = Meteor.absoluteUrl(css.url);
    }

    return allCssLink += "@import url(" + cssHref + ");";
  });
  res.statusCode = 200;
  return res.end(allCssLink);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft_view.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance_draft_view.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/api/workflow/space/:space/view/draft/:flow", function (req, res, next) {
  var dataBuf, flow, flowId, form, html, instance, options, space, spaceId, user, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  user = db.users.findOne({
    _id: user_id
  });
  spaceId = req.params.space;
  flowId = req.params.flow;
  space = db.spaces.findOne({
    _id: spaceId
  });
  flow = db.flows.findOne({
    _id: flowId
  }, {
    fields: {
      name: 1,
      'current._id': 1,
      form: 1
    }
  });
  form = db.forms.findOne({
    _id: flow.form
  }, {
    fields: {
      'current._id': 1
    }
  });
  options = {
    showTrace: false,
    showAttachments: false,
    templateName: "default",
    editable: true,
    width: "100%",
    instance_style: "instance-default",
    plugins: "\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta http-equiv=\"x-rim-auto-match\" content=\"none\">\n<title>" + flow.name + "</title>\n<meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />\n<meta name=\"viewport\" content=\"width=device-width\" />\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.min.css\">\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js\" type=\"text/javascript\"></script>\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/toastr/toastr.min.css\">\n<script src=\"/plugins/toastr/toastr.min.js\" type=\"text/javascript\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/js/workflow_client.css\">\n<script src=\"/js/workflow_client.js\" type=\"text/javascript\"></script>"
  };
  instance = {
    flow: flow._id,
    flow_version: flow.current._id,
    form: form._id,
    form_version: form.current._id,
    values: {},
    name: flow.name,
    space: spaceId
  };
  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lib":{"1_form_formula.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/1_form_formula.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Array.prototype.filterProperty = function (h, l) {
  var g = [];
  this.forEach(function (t) {
    var m = t ? t[h] : null;
    var d = false;

    if (m instanceof Array) {
      d = m.includes(l);
    } else {
      d = l === undefined ? false : m == l;
    }

    if (d) {
      g.push(t);
    }
  });
  return g;
};

Array.prototype.getProperty = function (k) {
  var v = new Array();
  this.forEach(function (t) {
    var m = t ? t[k] : null;
    v.push(m);
  });
  return v;
};

Array.prototype.getEach = function (code) {
  var rev = [];

  for (var i = 0; i < this.length; i++) {
    rev.push(this[i][code]);
  }

  return rev;
};

Array.prototype.uniq = function () {
  var a = [];
  this.forEach(function (b) {
    if (a.indexOf(b) < 0) {
      a[a.length] = b;
    }
  });
  return a;
};

Form_formula = {};

Form_formula.mixin = function (dest, src) {
  for (var key in src) {
    dest[key] = src[key];
  }

  return dest;
};

Form_formula.handerUserObject = function (u) {
  if (u instanceof Array) {
    var user = {};
    user.name = u.getProperty("name");
    user.organization = {};
    user.organization.name = u.getProperty("organization").getProperty("name");
    user.organization.fullname = u.getProperty("organization").getProperty("fullname");
    user.hr = u.getProperty("hr");
    user.sort_no = u.getProperty("sort_no");
    user.mobile = u.getProperty("mobile");
    user.work_phone = u.getProperty("work_phone");
    user.position = u.getProperty("position");
    var userRoles = u.getProperty("roles");
    var roles = new Array();
    userRoles.forEach(function (i) {
      roles = roles.concat(i);
    });
    roles.uniq();
    user.roles = roles;
    return user;
  } else {
    return u;
  }
};

Form_formula.handerOrgObject = function (o) {
  if (o instanceof Array) {
    var org = {};
    org.id = o.getProperty("_id");
    org.name = o.getProperty("name");
    org.fullname = o.getProperty("fullname");
    return org;
  } else {
    return o;
  }
};
/**
    * 获得公式需要用到的初始值
    * 输入：fields, values, applicant
    * 输出：__values
**/


Form_formula.init_formula_values = function (fields, autoFormDoc, approver, applicant, spaceId) {
  var __values = {}; //申请单中填的值处理

  if (fields && fields.length && autoFormDoc) {
    //debugger;
    fields.forEach(function (field) {
      var type = field.type;

      if (type) {
        if (type === 'table') {
          /*
          * 将表格字段的值进行转换后传入__values中
          * values中表格的值格式为
          * [{"a":1,"b":4},{"a":2,"b":5},{"a":3,"b":6}]
          * __values需要转化为下面格式且和主表的值一样放到第一层
          * {"a":[1,2,3],"b":[4,5,6]}
          **/
          var tableFields = field.sfields,
              tableValues = autoFormDoc[field.code],
              formulaTableValues = [],
              __tableValues = {}; //按公式的格式转换值为__tableValues

          if (tableFields && tableFields.length && tableValues && tableValues instanceof Array) {
            tableValues.forEach(function (tableValue) {
              formulaTableValues.push(Form_formula.init_formula_values(tableFields, tableValue));
            }, this); //按主表的格式转换__tableValues加到

            tableFields.forEach(function (tablefield) {
              __tableValues[tablefield.code] = formulaTableValues.getEach(tablefield.code);
            });
            __values = Form_formula.mixin(__values, __tableValues);
          }
        } else if (type == 'user') {
          __values[field.code] = Form_formula.handerUserObject(WorkflowManager.getFormulaUserObjects(spaceId, autoFormDoc[field.code]));
        } else if (type == 'group') {
          __values[field.code] = Form_formula.handerOrgObject(WorkflowManager.getFormulaOrgObjects(autoFormDoc[field.code]));
        } else if (type == 'odata') {
          __values[field.code] = autoFormDoc[field.code] || {};
        } else {
          //此处传spaceId给选人控件的旧数据计算roles和organization
          __values[field.code] = autoFormDoc[field.code];
        }
      }
    }, this);
  } //当前处理人


  __values["approver"] = WorkflowManager.getFormulaUserObject(spaceId, approver); //申请人

  __values["applicant"] = WorkflowManager.getFormulaUserObject(spaceId, applicant);
  return __values;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_handlers_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/get_handlers_manager.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
getHandlersManager = {};

getHandlersManager.getHandlersByUsersAndRoles = function (user_ids, role_ids, space_id) {
  var approve_users;
  approve_users = new Array();

  _.each(user_ids, function (user_id) {
    var users;

    if (db.users.find({
      _id: user_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRoles(user_id, role_ids, space_id);

      if (users.length > 0) {
        return approve_users = approve_users.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "user_id不合法不合法");
    }
  });

  approve_users = _.uniq(approve_users);
  return approve_users;
};

getHandlersManager.getHandlersByUserAndRoles = function (user_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;

    if (db.flow_roles.find({
      _id: role_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRole(user_id, role_id, space_id);

      if (users.length > 0) {
        return user_ids = user_ids.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "role_id已经被删除");
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据user_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByUserAndRole = function (user_id, role_id, space_id) {
  var orgs, user_ids;
  orgs = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      _id: 1
    }
  }).fetch();
  user_ids = new Array();

  _.each(orgs, function (org) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org._id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgsAndRoles = function (org_ids, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(org_ids, function (org_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRoles(org_id, role_ids, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgAndRoles = function (org_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org_id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据org_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByOrgAndRole = function (org_id, role_id, space_id) {
  var org, parents, positions, user_ids;
  org = db.organizations.findOne({
    _id: org_id
  }, {
    fields: {
      parents: 1
    }
  });
  user_ids = new Array();
  positions = db.flow_positions.find({
    space: space_id,
    org: org_id,
    role: role_id
  }, {
    fields: {
      users: 1
    }
  }).fetch();

  _.each(positions, function (position) {
    return user_ids = user_ids.concat(position.users);
  });

  if (user_ids.length === 0) {
    parents = org.parents;

    _.each(parents, function (parent_id) {
      positions = db.flow_positions.find({
        space: space_id,
        org: parent_id,
        role: role_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();

      if (positions.length > 0) {
        return _.each(positions, function (position) {
          return user_ids = user_ids.concat(position.users);
        });
      }
    });
  }

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlers = function (instance_id, step_id) {
  var _approve, _space_user, _trace, applicant, applicantSuperiors, approveHrRoleIds, approve_users, approver_org_field, approver_org_ids, approver_step, approver_user_field, approver_user_ids, current, current_flow, current_flow_version, current_form, current_step, current_steps, deal_type, field_code, finished_traces, flow_id, flow_rev, form, form_fields, form_id, form_rev, handlers, instance, max_startDate_trace, new_approver_user_ids, new_org_user_ids, newest_values, next_step_users, org_ids, org_ids_names, org_user_ids, space_id, space_user_count, submitter, submitter_user_count, unfinished_trace, user_ids, user_ids_names, users, valid_approver_org_ids;

  instance = db.instances.findOne(instance_id);

  if (instance.step_approve && !_.isEmpty(instance.step_approve[step_id + "_options"])) {
    return instance.step_approve[step_id + "_options"];
  }

  approve_users = new Array();
  space_id = instance.space;
  flow_id = instance.flow;
  flow_rev = instance.flow_version;
  current_flow = db.flows.findOne(flow_id);
  current_step = null;
  current_steps = new Array();

  if (current_flow.current._id === flow_rev) {
    current_steps = current_flow.current.steps;
  } else {
    current = _.find(current_flow.historys, function (history) {
      return history._id === flow_rev;
    });
    current_steps = current.steps;
  }

  current_step = _.find(current_steps, function (step) {
    return step._id === step_id;
  });

  if (current_step.step_type === "condition") {
    unfinished_trace = _.find(instance.traces, function (trace) {
      return trace.is_finished === false;
    });
    return new Array(unfinished_trace.approves[0].user);
  }

  if (current_step.step_type === "start") {
    handlers = new Array();
    handlers.push(instance.applicant);
    handlers.push(instance.submitter);
    handlers = _.uniq(handlers);
    return handlers;
  }

  deal_type = current_step.deal_type;
  users = new Array();

  if (deal_type === "applicantRole") {
    applicant = instance.applicant;

    if (applicant) {
      space_user_count = db.space_users.find({
        space: space_id,
        user: applicant
      }).count();

      if (space_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
      }

      if (current_step.approver_roles && current_step.approver_roles.length > 0) {
        _.each(current_step.approver_roles, function (approver_role) {
          var role_count;
          role_count = db.flow_roles.find({
            _id: approver_role
          }).count();

          if (role_count === 0) {
            throw new Meteor.Error('error!', "角色已经被删除");
          }
        });

        return getHandlersManager.getHandlersByUserAndRoles(applicant, current_step.approver_roles, space_id);
      } else {
        throw new Meteor.Error('error!', "审批岗位未指定");
      }
    } else {
      throw new Meteor.Error('error!', "Instance的提交人为空");
    }
  } else if (deal_type === "hrRole") {
    approveHrRoleIds = current_step.approver_hr_roles;

    if (approveHrRoleIds) {
      return _.pluck(WorkflowManager.getHrRolesUsers(space_id, approveHrRoleIds), 'user');
    } else {
      throw new Meteor.Error('error!', "角色未指定");
    }
  } else if (deal_type === "applicant") {
    applicant = instance.applicant;
    space_user_count = db.space_users.find({
      space: space_id,
      user: applicant
    }).count();

    if (space_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
    } else {
      return new Array(applicant);
    }
  } else if (deal_type === "orgFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByOrgsAndRoles(org_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "orgField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    user_ids = new Array();

    _.each(org_ids, function (org_id) {
      var check_orgs, org, org_children, org_users;
      org = db.organizations.findOne({
        _id: org_id
      }, {
        fields: {
          users: 1
        }
      });
      org_children = db.organizations.find({
        space: space_id,
        parents: org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      org_children.unshift(org);
      check_orgs = org_children;
      org_users = new Array();

      _.each(check_orgs, function (check_org_user) {
        if (check_org_user.users) {
          _.each(check_org_user.users, function (org_user) {
            if (db.space_users.find({
              space: space_id,
              user: org_user
            }).count() === 0) {
              throw new Meteor.Error('error!', "space下不存在此user");
            }
          });
        }

        user_ids = user_ids.concat(check_org_user.users);
        return org_users = org_users.concat(check_org_user.users);
      });

      if (org_users.length === 0) {
        throw new Meteor.Error('error!', "组织" + org_id + "不存在处理人");
      }
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "userFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByUsersAndRoles(user_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "userField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "specifyStepRole") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    if (current_step.approver_roles) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', "角色已经被删除");
        }
      });
    }

    _.each(approve_users, function (approve_user) {
      if (db.space_users.find({
        space: space_id,
        user: approve_user
      }).count() === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    return getHandlersManager.getHandlersByUsersAndRoles(approve_users, current_step.approver_roles, space_id);
  } else if (deal_type === "specifyStepUser") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    _.each(approve_users, function (approve_user) {
      var check_approve_user_count;
      check_approve_user_count = db.space_users.find({
        space: space_id,
        user: approve_user
      }).count();

      if (check_approve_user_count === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    approve_users = _.uniq(approve_users);
    return approve_users;
  } else if (deal_type === "submitterRole") {
    submitter = instance.submitter;

    if (!submitter) {
      submitter_user_count = db.space_users.find({
        space: space_id,
        user: submitter
      }).count();

      if (submitter_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
      } else {
        if (current_step.approver_roles && current_step.approver_roles.length > 0) {
          _.each(current_step.approver_roles, function (approver_role) {
            var role_count;
            role_count = db.flow_roles.find({
              _id: approver_role
            }).count();

            if (role_count === 0) {
              throw new Meteor.Error('error!', approver_role + "已经被删除");
            }
          });

          return getHandlersManager.getHandlersByUserAndRoles(submitter, current_step.approver_roles, space_id);
        } else {
          throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
        }
      }
    } else {
      throw new Meteor.Error('error!', "申请单的提交人为空");
    }
  } else if (deal_type === "submitter") {
    submitter = instance.submitter;
    submitter_user_count = db.space_users.find({
      space: space_id,
      user: submitter
    }).count();

    if (submitter_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
    } else {
      return new Array(submitter);
    }
  } else if (deal_type === "specifyOrg") {
    approver_org_ids = current_step.approver_orgs;

    if (!approver_org_ids || approver_org_ids.length === 0) {
      throw new Meteor.Error('error!', "未定义用于查找下一步处理人的部门，请联系管理员调查流程图的配置是否正确");
    }

    valid_approver_org_ids = new Array();

    _.each(approver_org_ids, function (approver_org_id) {
      if (db.organizations.find({
        _id: approver_org_id
      }).count() > 0) {
        return valid_approver_org_ids.unshift(approver_org_id);
      }
    });

    org_user_ids = new Array();

    _.each(valid_approver_org_ids, function (valid_approver_org_id) {
      var child_orgs, valid_approver_org;
      valid_approver_org = db.organizations.findOne({
        _id: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      });

      if (valid_approver_org.users) {
        org_user_ids = org_user_ids.concat(valid_approver_org.users);
      }

      child_orgs = db.organizations.find({
        space: space_id,
        parents: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      return _.each(child_orgs, function (child_org) {
        if (child_org.users) {
          return org_user_ids = org_user_ids.concat(child_org.users);
        }
      });
    });

    org_user_ids = _.uniq(org_user_ids);
    new_org_user_ids = new Array();

    _.each(org_user_ids, function (org_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: org_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_org_user_ids.push(org_user_id);
      }
    });

    return new_org_user_ids;
  } else if (deal_type === "specifyUser") {
    approver_user_ids = current_step.approver_users;
    approver_user_ids = _.uniq(approver_user_ids);
    new_approver_user_ids = new Array();

    _.each(approver_user_ids, function (approver_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: approver_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_approver_user_ids.push(approver_user_id);
      }
    });

    return new_approver_user_ids;
  } else if (deal_type === "pickupAtRuntime") {
    next_step_users = new Array();
    _trace = _.find(instance.traces, function (_tr) {
      return _tr.is_finished === false;
    });
    _approve = _.find(_trace.approves, function (_app) {
      return _app.is_finished === false && _app.type !== 'cc';
    });

    if (_approve.next_steps) {
      if (_approve.next_steps[0]["users"]) {
        next_step_users = _approve.next_steps[0]["users"];
      }
    }

    return next_step_users;
  } else if (deal_type === "applicantSuperior") {
    applicantSuperiors = new Array();
    _space_user = db.space_users.findOne({
      space: space_id,
      user: instance.applicant
    }, {
      fields: {
        manager: 1
      }
    });

    if (_space_user.manager) {
      applicantSuperiors.push(_space_user.manager);
    }

    return applicantSuperiors;
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"permission_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/permission_manager.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
permissionManager = {};

permissionManager.getFlowPermissions = function (flow_id, user_id) {
  var flow, my_permissions, org_ids, organizations, orgs_can_add, orgs_can_admin, orgs_can_monitor, space_id, users_can_add, users_can_admin, users_can_monitor;
  flow = uuflowManager.getFlow(flow_id);
  space_id = flow.space;
  org_ids = new Array();
  organizations = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      parents: 1
    }
  }).fetch();

  _.each(organizations, function (org) {
    org_ids.push(org._id);

    if (org.parents) {
      return _.each(org.parents, function (parent_id) {
        return org_ids.push(parent_id);
      });
    }
  });

  org_ids = _.uniq(org_ids);
  my_permissions = new Array();

  if (flow.perms) {
    if (flow.perms.users_can_add) {
      users_can_add = flow.perms.users_can_add;

      if (users_can_add.includes(user_id)) {
        my_permissions.push("add");
      }
    }

    if (flow.perms.orgs_can_add) {
      orgs_can_add = flow.perms.orgs_can_add;

      _.each(org_ids, function (org_id) {
        if (orgs_can_add.includes(org_id)) {
          return my_permissions.push("add");
        }
      });
    }

    if (flow.perms.users_can_monitor) {
      users_can_monitor = flow.perms.users_can_monitor;

      if (users_can_monitor.includes(user_id)) {
        my_permissions.push("monitor");
      }
    }

    if (flow.perms.orgs_can_monitor) {
      orgs_can_monitor = flow.perms.orgs_can_monitor;

      _.each(org_ids, function (org_id) {
        if (orgs_can_monitor.includes(org_id)) {
          return my_permissions.push("monitor");
        }
      });
    }

    if (flow.perms.users_can_admin) {
      users_can_admin = flow.perms.users_can_admin;

      if (users_can_admin.includes(user_id)) {
        my_permissions.push("admin");
      }
    }

    if (flow.perms.orgs_can_admin) {
      orgs_can_admin = flow.perms.orgs_can_admin;

      _.each(org_ids, function (org_id) {
        if (orgs_can_admin.includes(org_id)) {
          return my_permissions.push("admin");
        }
      });
    }
  }

  my_permissions = _.uniq(my_permissions);
  return my_permissions;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"approve_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/approve_manager.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
approveManager = {}; /*
                         对比approve_values与last_values 对象， 返回approve_values比last_values多出的或者改变的部分
                      */

approveManager.getChangeValues = function (last_values, approve_values) {
  var approve_values_keys, changeValues, last_values_keys;
  changeValues = {};
  last_values_keys = _.keys(last_values);
  approve_values_keys = _.keys(approve_values);
  approve_values_keys.forEach(function (key) {
    if (_.contains(last_values_keys, key)) {
      if (!_.isEqual(last_values[key], approve_values[key])) {
        return changeValues[key] = approve_values[key];
      }
    } else {
      if (approve_values[key] !== '') {
        return changeValues[key] = approve_values[key];
      }
    }
  });
  return changeValues;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/flow_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
flowManager = {};

flowManager.getCategoriesFlows = function (spaceId, categorieId, fields) {
  var categoriesForms;
  categoriesForms = formManager.getCategoriesForms(spaceId, categorieId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: categoriesForms.getProperty("_id")
    }
  });
};

flowManager.getUnCategoriesFlows = function (spaceId, fields) {
  var unCategoriesForms;
  unCategoriesForms = formManager.getUnCategoriesForms(spaceId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: unCategoriesForms.getProperty("_id")
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"form_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/form_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
formManager = {};

formManager.getCategoriesForms = function (spaceId, categorieId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: categorieId,
    state: "enabled"
  }, _fields);
};

formManager.getUnCategoriesForms = function (spaceId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: {
      $in: [null, ""]
    },
    state: "enabled"
  }, _fields);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"step_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/step_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
stepManager = {};

stepManager.allowBatch = function (step) {
  return step.allowBatch;
};

stepManager.getStep = function (instance, flow, step_id) {
  var flow_rev, isExistStep;
  flow_rev = instance.flow_version;
  isExistStep = null;

  if (flow.current._id === flow_rev) {
    isExistStep = _.find(flow.current.steps, function (step) {
      return step._id === step_id;
    });
  } else {
    _.each(flow.historys, function (history) {
      if (history._id === flow_rev) {
        return isExistStep = _.find(history.steps, function (step) {
          return step._id === step_id;
        });
      }
    });
  }

  if (!isExistStep) {
    throw new Meteor.Error('error!', "不能获取step");
  }

  return isExistStep;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_manager.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/instance_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval, logger;

_eval = require('eval');
InstanceManager = {};
logger = new Logger('Workflow -> InstanceManager');

InstanceManager.handlerInstanceByFieldMap = function (ins, field_map) {
  var context, e, flow, res, script;
  res = ins;

  if (ins) {
    if (!field_map) {
      flow = db.flows.findOne({
        _id: ins.flow
      }, {
        fields: {
          field_map: 1
        }
      });

      if (flow != null ? flow.field_map : void 0) {
        field_map = flow.field_map;
      }
    }

    if (field_map) {
      context = _.clone(ins);
      context._ = _;
      script = "var instances = " + field_map + "; exports.instances = instances";

      try {
        res = _eval(script, "handlerInstanceByFieldMap", context, false).instances;
      } catch (error) {
        e = error;
        res = {
          _error: e
        };
        logger.error(e);
      }
    }
  }

  return res;
};

InstanceManager.getCurrentApprove = function (instance, handler) {
  var currentApprove, currentApproves, currentTraces;

  if (!instance || !instance.traces || instance.traces.length < 1) {
    return;
  }

  currentTraces = instance.traces.filterProperty('is_finished', false);

  if (currentTraces.length) {
    currentApproves = currentTraces[0].approves.filterProperty('is_finished', false).filterProperty('handler', handler);
    currentApprove = currentApproves.length > 0 ? currentApproves[0] : null;
  }

  if (!currentApprove || currentApprove.type === 'cc') {
    _.each(instance.traces, function (t) {
      _.each(t.approves, function (a) {
        if (a.type === 'cc' && a.user === handler && a.is_finished === false) {
          currentApprove = a;
        }
      });
    });
  }

  if (!currentApprove) {
    return;
  }

  return currentApprove;
};

InstanceManager.getCurrentTrace = function (instance, traceId) {
  return instance.traces.findPropertyByPK("_id", traceId);
};

InstanceManager.getMyApprove = function (instanceId, userId) {
  var flow, instance, judge, my_approve, nextSteps, next_user_ids, step, step_type, trace;
  instance = db.instances.findOne({
    _id: instanceId
  });
  flow = uuflowManager.getFlow(instance.flow);
  my_approve = InstanceManager.getCurrentApprove(instance, userId);

  if (my_approve) {
    trace = InstanceManager.getCurrentTrace(instance, my_approve.trace);
    step = uuflowManager.getStep(instance, flow, trace.step);
    step_type = step.step_type;
    judge = step_type === "sign" ? "approved" : "";
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, judge);

    if (nextSteps.length === 1) {
      if (step_type === "sign" || step_type === "counterSign") {
        my_approve.judge = 'approved';
      }

      next_user_ids = getHandlersManager.getHandlers(instance._id, nextSteps[0]);

      if (!next_user_ids) {
        my_approve.next_steps = [{
          step: nextSteps[0],
          users: []
        }];
        return my_approve;
      }

      if (next_user_ids.length === 1) {
        my_approve.next_steps = [{
          step: nextSteps[0],
          users: next_user_ids
        }];
        return my_approve;
      }
    }
  }
};

InstanceManager.getBatchInstances = function (space, categoryId, flowIds, inbox_user) {
  var FIELDS, _batch_instances, categoryFlows, inbox_instances, query, unCategoryFlows;

  _batch_instances = new Array();
  query = {
    space: space,
    inbox_users: inbox_user
  };
  FIELDS = {
    name: 1,
    applicant_name: 1,
    submit_date: 1,
    flow_version: 1,
    "traces.step": 1,
    flow: 1,
    current_step_name: 1,
    flow_name: 1
  };

  if (categoryId) {
    if (categoryId === '-1') {
      unCategoryFlows = flowManager.getUnCategoriesFlows(space, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: unCategoryFlows
      };
    } else {
      categoryFlows = flowManager.getCategoriesFlows(space, categoryId, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: categoryFlows
      };
    }
  }

  if (flowIds) {
    query.flow = {
      $in: flowIds
    };
  }

  inbox_instances = db.instances.find(query, {
    fields: FIELDS,
    skip: 0,
    limit: 100
  });
  inbox_instances.forEach(function (ins) {
    var currentStep, currentStepId, flow, myApprove;
    currentStepId = _.last(ins.traces).step;
    flow = db.flows.findOne({
      _id: ins.flow
    });
    currentStep = stepManager.getStep(ins, flow, currentStepId);
    myApprove = InstanceManager.getMyApprove(ins._id, inbox_user);

    if (stepManager.allowBatch(currentStep) && myApprove) {
      delete ins.flow_version;
      delete ins.traces;
      delete ins.flow;
      ins.approve_start_date = myApprove.start_date;
      return _batch_instances.push(ins);
    }
  });
  return _batch_instances;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/categories.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('categories', function (spaceId) {
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.categories.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      space: 1,
      sort_no: 1,
      app: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/cfs_instances.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('cfs_instances', function (instanceIds) {
  check(instanceIds, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceIds) {
    return this.ready();
  }

  return cfs.instances.find({
    'metadata.instance': {
      $in: instanceIds
    },
    $or: [{
      'metadata.is_private': {
        $ne: true
      }
    }, {
      'metadata.is_private': true,
      "metadata.owner": this.userId
    }]
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_positions', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_positions.find({
    space: spaceId
  }, {
    fields: {
      role: 1,
      users: 1,
      org: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions_tabular.coffee                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publishComposite('flow_positions_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flow_positions.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (position) {
        this.unblock();
        return db.flow_roles.find({
          _id: position.role
        }, {
          fields: {
            name: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.organizations.find({
          _id: position.org
        }, {
          fields: {
            fullname: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.space_users.find({
          space: position.space,
          user: {
            $in: position.users
          }
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_roles.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_roles', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_roles.find({
    space: spaceId
  }, {
    fields: {
      name: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flows.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flows', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (db.flows.find({
    space: spaceId
  }).count() === 0) {
    db.spaces.createTemplateFormAndFlow(spaceId);
  }

  return db.flows.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      company_id: 1,
      sort_no: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1
    }
  });
});
Meteor.publish('flow_version', function (spaceId, flowId, versionId) {
  var getFlowVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFlowVersion = function (id, versionId) {
    var flow, flow_version;
    flow = db.flows.findOne({
      _id: id
    });

    if (flow) {
      flow_version = flow.current;
      flow_version.latest = true;

      if (flow_version._id !== versionId) {
        flow_version = flow.historys.findPropertyByPK("_id", versionId);
        flow_version.latest = false;
      }

      return flow_version;
    }
  };

  handle = db.flows.find({
    _id: flowId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("flow_versions", versionId, getFlowVersion(id, versionId));
    }
  });
  self.added("flow_versions", versionId, getFlowVersion(flowId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('distribute_optional_flows', function (flow_ids) {
  if (!this.userId) {
    return this.ready();
  }

  if (!flow_ids) {
    return this.ready();
  }

  return db.flows.find({
    _id: {
      $in: flow_ids
    }
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      distribute_end_notification: 1,
      company_id: 1
    }
  });
});
Meteor.publish('flow', function (spaceId, flowId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  return db.flows.find({
    _id: flowId,
    space: spaceId
  }, {
    fields: {
      print_template: 1,
      instance_template: 1,
      events: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      upload_after_being_distributed: 1,
      distribute_end_notification: 1,
      company_id: 1,
      allow_select_step: 1
    }
  });
});
Meteor.publish('flow_files', function (spaceId, flowId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  return cfs.files.find({
    'metadata.space': spaceId,
    'metadata.object_name': 'flows',
    'metadata.record_id': flowId
  });
});
Meteor.publishComposite('flows_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flows.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (flow) {
        this.unblock();
        return db.space_users.find({
          space: flow.space,
          user: flow.current.modified_by
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.forms.find({
          space: flow.space,
          _id: flow.form
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1,
            category: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.categories.find({
          space: flow.space
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/forms.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('forms', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.forms.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      category: 1,
      state: 1,
      description: 1,
      instance_style: 1
    }
  });
});
Meteor.publish('form_version', function (spaceId, formId, versionId) {
  var getFormVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!formId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFormVersion = function (id, versionId) {
    var form, form_version;
    form = db.forms.findOne({
      _id: id
    });

    if (!form) {
      return {};
    }

    form_version = form.current;
    form_version.latest = true;

    if (form_version._id !== versionId) {
      form_version = form.historys.findPropertyByPK("_id", versionId);
      form_version.latest = false;
    }

    return form_version;
  };

  handle = db.forms.find({
    _id: formId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("form_versions", versionId, getFormVersion(id, versionId));
    }
  });
  self.added("form_versions", versionId, getFormVersion(formId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_data.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_data.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instance_data', function (instanceId, box) {
  var getMiniInstance, getMyapproveModified, handle, instance, instance_fields_0, miniApproveFields, needChange, self, triggerChangeFields, triggerChangeFieldsValues;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;
  miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description', 'auto_submitted'];
  triggerChangeFields = ['form_version', 'flow_version', 'related_instances', '_my_approve_read_dates', 'values'];
  triggerChangeFieldsValues = {};
  instance_fields_0 = {
    "record_synced": 0,
    "traces.approves.handler_organization_name": 0,
    "traces.approves.handler_organization": 0,
    "traces.approves.cost_time": 0,
    "traces.approves.is_error": 0,
    "traces.approves.deadline": 0,
    "traces.approves.remind_date": 0,
    "traces.approves.reminded_count": 0,
    "traces.approves.modified_by": 0,
    "traces.approves.modified": 0,
    "traces.approves.geolocation": 0,
    "traces.approves.cc_users": 0,
    "traces.approves.from_approve_id": 0,
    "traces.approves.values_history": 0
  };

  getMyapproveModified = function (traces) {
    var myApproveModifieds;
    myApproveModifieds = new Array();

    if (traces != null) {
      traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.user === self.userId || approve.handler === self.userId) {
            return myApproveModifieds.push(approve.read_date);
          }
        }) : void 0 : void 0;
      });
    }

    return myApproveModifieds;
  };

  getMiniInstance = function (_instanceId) {
    var instance, ref, ref1, show_modal_traces_list, traces;
    instance = db.instances.findOne({
      _id: _instanceId
    }, {
      fields: instance_fields_0
    });

    if (instance) {
      triggerChangeFields.forEach(function (key) {
        if (key === '_my_approve_read_dates') {
          return triggerChangeFieldsValues[key] = getMyapproveModified(instance.traces);
        } else {
          return triggerChangeFieldsValues[key] = instance[key];
        }
      });
      show_modal_traces_list = ((ref = db.space_settings.findOne({
        space: instance.space,
        key: "show_modal_traces_list"
      }, {
        fields: {
          values: 1
        }
      })) != null ? ref.values : void 0) || false;

      if (show_modal_traces_list) {
        traces = new Array();

        if (instance != null) {
          if ((ref1 = instance.traces) != null) {
            ref1.forEach(function (trace) {
              var _trace, approves, ref2;

              _trace = _.clone(trace);
              approves = new Array();

              if (trace != null) {
                if ((ref2 = trace.approves) != null) {
                  ref2.forEach(function (approve) {
                    if (approve.type !== 'cc' || approve.user === self.userId || approve.handler === self.userId || !_.isEmpty(approve.sign_field_code)) {
                      return approves.push(approve);
                    }
                  });
                }
              }

              _trace.approves = approves;
              return traces.push(_trace);
            });
          }
        }

        instance.traces = traces;
      }
    }

    return instance;
  };

  needChange = function (changeFields) {
    var _change, _rev;

    if (changeFields) {
      _change = false;
      _rev = _.find(triggerChangeFields, function (key) {
        var _key, _my_approve_modifieds;

        _key = key;

        if (key === '_my_approve_read_dates') {
          _key = 'traces';
        }

        if (_.has(changeFields, _key)) {
          if (key === '_my_approve_read_dates') {
            _my_approve_modifieds = getMyapproveModified(changeFields.traces);
            return !_.isEqual(triggerChangeFieldsValues[key], _my_approve_modifieds);
          } else {
            return !_.isEqual(triggerChangeFieldsValues[key], changeFields[key]);
          }
        }
      });

      if (_rev) {
        _change = true;
      }

      return _change;
    }

    return true;
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id, fields) {
      if (box !== 'inbox' || needChange(fields)) {
        return self.changed("instances", id, getMiniInstance(id));
      }
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  instance = getMiniInstance(instanceId);
  self.added("instances", instance != null ? instance._id : void 0, instance);
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('instance_traces', function (instanceId) {
  var getInstanceTraces, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;

  getInstanceTraces = function (_insId) {
    return db.instances.findOne({
      _id: _insId
    }, {
      fields: {
        _id: 1,
        traces: 1
      }
    });
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id) {
      return self.changed("instance_traces", instanceId, getInstanceTraces(instanceId));
    }
  });
  self.added("instance_traces", instanceId, getInstanceTraces(instanceId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_list.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_list.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_list', function (spaceId, box, flowId) {
  var query;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  query = {
    space: spaceId
  };

  if (box === "inbox") {
    query.inbox_users = this.userId;
  } else if (box === "outbox") {
    query.outbox_users = this.userId;
  } else if (box === "draft") {
    query.submitter = this.userId;
    query.state = "draft";
  } else if (box === "pending") {
    query.submitter = this.userId;
    query.state = "pending";
  } else if (box === "completed") {
    query.submitter = this.userId;
    query.state = "completed";
  } else if (box === "monitor") {
    query.flow = flowId;
    query.state = {
      $in: ["pending", "completed"]
    };
  } else {
    query.state = "none";
  }

  return db.instances.find(query, {
    fields: {
      name: 1,
      created: 1,
      form: 1,
      flow: 1,
      space: 1,
      modified: 1,
      applicant: 1,
      is_archived: 1,
      form_version: 1,
      flow_version: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_tabular.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var asyncLastFinishedApprove, lastFinishedApproveAggregate;

lastFinishedApproveAggregate = function (instanceid, userId, dataMap, callback) {
  var operation;
  operation = [{
    "$match": {
      "_id": instanceid
    }
  }, {
    "$project": {
      "name": 1,
      "_approve": "$traces.approves"
    }
  }, {
    "$unwind": "$_approve"
  }, {
    "$unwind": "$_approve"
  }, {
    "$match": {
      "_approve.is_finished": true,
      $or: [{
        "_approve.handler": userId
      }, {
        "_approve.user": userId
      }]
    }
  }, {
    "$group": {
      "_id": "$_id",
      "finish_date": {
        "$last": "$_approve.finish_date"
      }
    }
  }];
  return db.instances.rawCollection().aggregate(operation).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return dataMap.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

asyncLastFinishedApprove = Meteor.wrapAsync(lastFinishedApproveAggregate);
Meteor.publish("instance_tabular", function (tableName, ids, fields) {
  var getMyApprove, getMyLastFinishedApprove, getStepCurrentName, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));
  fields.cc_users = 1;
  self = this;

  getMyLastFinishedApprove = function (userId, instanceId) {
    var data;
    data = [];
    asyncLastFinishedApprove(instanceId, userId, data);

    if (data.length > 0) {
      return data[0];
    }
  };

  getMyApprove = function (userId, instanceId) {
    var approve, approves, instance, is_read, myApprove, notFinishedTraces;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        traces: 1
      }
    });
    myApprove = null;

    if (!instance) {
      return;
    }

    if (!instance.traces || instance.traces.length < 1) {
      return;
    }

    notFinishedTraces = instance.traces.filterProperty("is_finished", false);

    if (notFinishedTraces.length > 0) {
      approves = notFinishedTraces[0].approves.filterProperty("is_finished", false).filterProperty("handler", userId);

      if (approves.length > 0) {
        approve = approves[0];
        myApprove = {
          id: approve._id,
          instance: approve.instance,
          trace: approve.trace,
          is_read: approve.is_read,
          start_date: approve.start_date,
          agent: approve.agent,
          user_name: approve.user_name
        };
      }
    }

    if (!myApprove) {
      is_read = false;
      instance.traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.type === 'cc' && approve.user === userId && approve.is_finished === false) {
            if (approve.is_read) {
              is_read = true;
            }

            return myApprove = {
              id: approve._id,
              is_read: is_read,
              start_date: approve.start_date,
              agent: approve.agent,
              user_name: approve.user_name
            };
          }
        }) : void 0 : void 0;
      });
    }

    return myApprove;
  };

  getStepCurrentName = function (instanceId) {
    var instance, ref, ref1, stepCurrentName;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        "traces.name": 1,
        "traces": {
          $slice: -1
        }
      }
    });

    if (instance) {
      stepCurrentName = (ref = instance.traces) != null ? (ref1 = ref[0]) != null ? ref1.name : void 0 : void 0;
    }

    return stepCurrentName;
  };

  handle = db.instances.find({
    _id: {
      $in: ids
    }
  }, {
    fields: {
      traces: 0
    }
  }).observeChanges({
    changed: function (id) {
      var error, instance, myApprove, myLastFinishedApprove, ref, ref1;
      instance = db.instances.findOne({
        _id: id
      }, {
        fields: fields
      });

      if (!instance) {
        return;
      }

      myApprove = getMyApprove(self.userId, id);
      myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

      if (myApprove) {
        instance.is_read = myApprove.is_read;
        instance.start_date = myApprove.start_date;

        if (myApprove.agent) {
          instance.agent_user_name = myApprove.user_name;
        }
      } else {
        instance.is_read = true;
      }

      if (myLastFinishedApprove) {
        instance.my_finish_date = myLastFinishedApprove.finish_date;
      }

      instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
      instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
      delete instance.cc_users;

      try {
        return self.changed("instances", id, instance);
      } catch (error1) {
        error = error1;
        console.log('instance observeChanges error: ', error.message);
        console.log('self.userId: ', self.userId);
        console.log('tableName: ', tableName);
        console.log('ids: ', JSON.stringify(ids));
        return console.log('myApprove: ', JSON.stringify(myApprove));
      }
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  ids.forEach(function (id) {
    var instance, myApprove, myLastFinishedApprove, ref, ref1;
    instance = db.instances.findOne({
      _id: id
    }, {
      fields: fields
    });

    if (!instance) {
      return;
    }

    myApprove = getMyApprove(self.userId, id);
    myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

    if (myApprove) {
      instance.is_read = myApprove.is_read;
      instance.start_date = myApprove.start_date;

      if (myApprove.agent) {
        instance.agent_user_name = myApprove.user_name;
      }
    } else {
      instance.is_read = true;
    }

    if (myLastFinishedApprove) {
      instance.my_finish_date = myLastFinishedApprove.finish_date;
    }

    instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
    instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
    delete instance.cc_users;
    return self.added("instances", id, instance);
  });
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_draft.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_draft', function (spaceId) {
  var userId;
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  userId = this.userId;
  return db.instances.find({
    state: "draft",
    space: spaceId,
    submitter: userId,
    $or: [{
      inbox_users: {
        $exists: false
      }
    }, {
      inbox_users: []
    }]
  }, {
    fields: {
      _id: 1,
      state: 1,
      space: 1,
      submitter: 1,
      inbox_users: 1,
      modified: 1,
      name: 1
    },
    sort: {
      modified: -1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distributed_instances_state_by_ids.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/distributed_instances_state_by_ids.coffee                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('distributed_instances_state_by_ids', function (instance_ids) {
  var handle, self;
  check(instance_ids, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instance_ids) {
    return this.ready();
  }

  if (_.isEmpty(instance_ids)) {
    return this.ready();
  }

  self = this;
  handle = db.instances.find({
    _id: {
      $in: instance_ids
    }
  }, {
    fields: {
      state: 1,
      traces: {
        $slice: 1
      }
    }
  }).observeChanges({
    added: function (id, fields) {
      return self.added('instances', id, {
        state: fields.state,
        is_read: fields.traces[0].approves[0].is_read
      });
    },
    changed: function (id, fields) {
      if (fields.state) {
        self.changed('instances', id, {
          state: fields.state
        });
      }

      if (fields.traces) {
        return self.changed('instances', id, {
          is_read: fields.traces[0].approves[0].is_read
        });
      }
    }
  });
  this.ready();
  return this.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/related_instaces.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('related_instaces', function (instanceId, related_instances) {
  var ref, related_instance_ids;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  related_instance_ids = (ref = db.instances.findOne(instanceId, {
    fields: {
      related_instances: 1
    }
  })) != null ? ref.related_instances : void 0;

  if (related_instance_ids && _.isArray(related_instance_ids)) {
    return db.instances.find({
      _id: {
        $in: related_instance_ids
      }
    }, {
      fields: {
        _id: 1,
        name: 1,
        space: 1
      }
    });
  } else {
    return this.ready();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/space_user_signs.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isServer) {
  Meteor.publish('space_user_signs', function (spaceId) {
    check(spaceId, String);

    if (!this.userId) {
      return this.ready();
    }

    return db.space_user_signs.find({
      space: spaceId
    }, {
      fields: {
        created_by: 0,
        created: 0,
        modified_by: 0
      }
    });
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user_inbox_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/user_inbox_instance.coffee                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Meteor.publishComposite "user_inbox_instance", ()->
	unless this.userId
		return this.ready()

	userSpaceIds = db.space_users.find({
		user: this.userId,
		user_accepted: true
	}, {fields: {space: 1}}).fetch().getEach("space");
	query = {space: {$in: userSpaceIds}}

	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]

	find: ->
		db.instances.find(query, {
			fields: {
				space: 1,
				applicant_name: 1,
				flow: 1,
				inbox_users: 1,
				cc_users: 1,
				state: 1,
				name: 1,
				modified: 1,
				form: 1
			}, sort: {modified: -1}, skip: 0, limit: 200
		});
	children: [
		{
			find: (instance, post)->
				db.flows.find({_id: instance.flow}, {fields: {name: 1, space: 1}});
		}
	]
 */ /*
    Meteor.publish 'my_inbox_instances', (spaceId)->
    	unless this.userId
    		return this.ready()
    
    	self = this;
    
    	 *	userSpaceIds = db.space_users.find({
    	 *		user: this.userId,
    	 *		user_accepted: true
    	 *	}, {fields: {space: 1}}).fetch().getEach("space");
    
    	query = {space: spaceId}
    
    	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]
    
    	fields = {
    		space: 1,
     *		applicant_name: 1,
    		flow: 1,
    		inbox_users: 1,
    		cc_users: 1,
    		state: 1,
     *		name: 1,
     *		modified: 1,
    		form: 1
    	}
    
    	handle = db.instances.find(query, {sort: {modified: -1}, skip: 0, limit: 500}).observeChanges {
    		added: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.added("instances", id, instance)
    		changed: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.changed("instances", id, instance);
    		removed: (id)->
    			self.removed("instances", id);
    	}
    
    	self.ready();
    	self.onStop ()->
    		handle.stop()
     */var _async_get_flow_instances_aggregate, _get_flow_instances_aggregate;

_get_flow_instances_aggregate = function (spaceId, userId, _items, callback) {
  return db.instances.rawCollection().aggregate([{
    $match: {
      space: spaceId,
      $or: [{
        inbox_users: userId
      }, {
        cc_users: userId
      }]
    }
  }, {
    $group: {
      _id: {
        flow: "$flow",
        category: "$category"
      },
      count: {
        $sum: 1
      }
    }
  }]).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return _items.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

_async_get_flow_instances_aggregate = Meteor.wrapAsync(_get_flow_instances_aggregate);
Meteor.publish('my_inbox_flow_instances_count', function (spaceId) {
  var _changeData, _flowsData, _init, data, handle, query, self;

  if (!this.userId) {
    return this.ready();
  }

  self = this;
  query = {
    space: spaceId
  };
  query.$or = [{
    inbox_users: this.userId
  }, {
    cc_users: this.userId
  }];
  data = [];

  _async_get_flow_instances_aggregate(spaceId, self.userId, data);

  _flowsData = [];

  _.each(data, function (dataItem) {
    return _flowsData.push({
      _id: dataItem._id.flow,
      category: dataItem._id.category,
      count: dataItem.count
    });
  });

  self.added("flow_instances", spaceId, {
    flows: _flowsData
  });

  _changeData = function (doc, action) {
    var flow_instance;
    flow_instance = _.find(_flowsData, function (f) {
      return f._id === doc.flow;
    });

    if (flow_instance) {
      if (action === "added") {
        flow_instance.count++;
      } else if (action === "removed") {
        flow_instance.count--;
      }
    } else if (action === "added") {
      _flowsData.push({
        _id: doc.flow,
        category: doc.category,
        count: 1
      });
    }

    return self.changed("flow_instances", spaceId, {
      flows: _flowsData
    });
  };

  _init = true;
  handle = db.instances.find(query, {
    fields: {
      _id: 1,
      inbox_users: 1,
      cc_users: 1,
      flow: 1,
      category: 1
    }
  }).observe({
    added: function (doc) {
      if (!_init) {
        return _changeData(doc, "added");
      }
    },
    removed: function (doc) {
      if (!_init) {
        return _changeData(doc, "removed");
      }
    }
  });
  _init = false;
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_main_attach_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_main_attach_template.coffee                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_main_attach_template', function (spaceId, flowId) {
  check(spaceId, String);
  check(flowId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!(spaceId && flowId)) {
    return this.ready();
  }

  return Creator.getCollection('cms_files').find({
    space: spaceId,
    'parent.o': 'flows',
    'parent.ids': flowId,
    name: '正文.docx'
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"flow-template":{"workflow_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/flow-template/workflow_template.coffee                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
workflowTemplate = {};
workflowTemplate["en"] = [];
workflowTemplate["zh-CN"] = [];
Meteor.startup(function () {
  var absolute_path_cn, absolute_path_us, filesList_cn, filesList_us, fs, mime, path, path_cn, path_us, readFileList, ref, ref1;
  fs = require('fs');
  path = require('path');
  mime = require('mime');

  readFileList = function (pathDir, filesList) {
    var files;
    files = fs.readdirSync(pathDir);
    return files.forEach(function (name, index) {
      var obj, stat;
      stat = fs.statSync(path.join(pathDir, name));

      if (stat.isDirectory()) {
        return readFileList(path.join(pathDir, name), filesList);
      } else {
        obj = {};
        obj.path = pathDir;
        obj.name = name;
        return filesList.push(obj);
      }
    });
  };

  filesList_cn = [];
  path_cn = (ref = Meteor.settings.workflowTemplates) != null ? ref.path_cn : void 0;

  if (path_cn) {
    absolute_path_cn = path.resolve(path_cn);
    console.log("absolute_path_cn", absolute_path_cn);

    if (fs.existsSync(absolute_path_cn)) {
      readFileList(absolute_path_cn, filesList_cn);
      filesList_cn.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["zh-CN"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取zh-cn文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }

  filesList_us = [];
  path_us = (ref1 = Meteor.settings.workflowTemplates) != null ? ref1.path_us : void 0;

  if (path_us) {
    absolute_path_us = path.resolve(path_us);
    console.log("absolute_path_us", absolute_path_us);

    if (fs.existsSync(absolute_path_us)) {
      readFileList(absolute_path_us, filesList_us);
      return filesList_us.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["en"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取en-us文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/startup.coffee                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"schedule":{"auto_finish_process_delegation.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/auto_finish_process_delegation.coffee                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.auto_finish_process_delegation : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.auto_finish_process_delegation;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e, now;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('auto_finish_process_delegation');
        now = new Date();
        db.process_delegation_rules.update({
          enabled: true,
          end_time: {
            $lte: now
          }
        }, {
          $set: {
            enabled: false
          }
        }, {
          multi: true
        });
        console.timeEnd('auto_finish_process_delegation');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO AUTO_FINISH_PROCESS_DELEGATION ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function (e) {
      console.log('Failed to bind environment: auto_finish_process_delegation.coffee');
      return console.log(e.stack);
    }));
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"timeout_auto_submit.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/timeout_auto_submit.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.timeout_auto_submit : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.timeout_auto_submit;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('timeout_auto_submit');
        uuflowManager.timeoutAutoSubmit();
        console.timeEnd('timeout_auto_submit');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO TIMEOUT_AUTO_SUBMIT ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function (e) {
      console.log('Failed to bind environment: timeout_auto_submit.coffee');
      return console.log(e.stack);
    }));
  }
});
Meteor.methods({
  timeout_auto_submit: function (ins_id) {
    uuflowManager.timeoutAutoSubmit(ins_id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"related_instances_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/related_instances_tabular.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return TabularTables.related_instances_tabular = new Tabular.Table({
    name: "related_instances_tabular",
    collection: db.instances,
    columns: [{
      data: "_id",
      title: '<input type="checkbox" name="reverse" id="reverse">',
      orderable: false,
      width: '1px',
      render: function (val, type, doc) {
        var input, ref;
        input = '<input type="checkbox" class="related-instances-list-checkbox" name="related_instances_ids" id="related_instances_ids" value="' + doc._id + '"';

        if ((ref = TabularTables.related_instances_tabular.related_instances) != null ? ref.includes(doc._id) : void 0) {
          input += " checked ";
        }

        input += ">";
        return input;
      }
    }, {
      data: "name",
      orderable: false,
      width: '45%',
      render: function (val, type, doc) {
        var absolute, href;
        href = '';

        if (Meteor.isClient && (Steedos.isMobile() || Steedos.isCordova())) {
          href = '';
        }

        absolute = false;

        if (Meteor.isServer) {
          absolute = this.absolute;
        }

        if (absolute) {
          href = Meteor.absoluteUrl("workflow/space/" + doc.space + "/view/readonly/" + doc._id + '?hide_traces=0');
        } else {
          href = Steedos.absoluteUrl("workflow/space/" + doc.space + "/view/readonly/" + doc._id + '?hide_traces=0');
        }

        return "<a data-id='" + doc._id + "' target='_blank' href='" + href + "'>" + doc.name + "</a>";
      }
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      orderable: false
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_flow"),
      render: function (val, type, doc) {
        var judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + "</div>";
      }
    }],
    dom: "tp",
    lengthChange: false,
    extraFields: ["state", "final_decision", "space", "keywords"],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var curSpaceUser, flow_ids, flows, organizations, ref, ref1, space, spaceId;

      if (!userId) {
        return {
          _id: -1
        };
      }

      spaceId = selector.space;

      if (!spaceId) {
        if ((selector != null ? (ref = selector.$and) != null ? ref.length : void 0 : void 0) > 0) {
          spaceId = selector.$and.getProperty('space')[0];
        }
      }

      if (!spaceId) {
        return {
          _id: -1
        };
      }

      space = db.spaces.findOne(spaceId);

      if (!space) {
        selector.state = "none";
      }

      if (!space.admins.includes(userId)) {
        flow_ids = [];
        curSpaceUser = db.space_users.findOne({
          space: spaceId,
          'user': userId
        });

        if (curSpaceUser) {
          organizations = db.organizations.find({
            _id: {
              $in: curSpaceUser.organizations
            }
          }).fetch();
          flows = db.flows.find({
            space: spaceId
          });
          flows.forEach(function (fl) {
            if (WorkflowManager.canMonitor(fl, curSpaceUser, organizations) || WorkflowManager.canAdmin(fl, curSpaceUser, organizations)) {
              return flow_ids.push(fl._id);
            }
          });
        }

        if ((selector != null ? (ref1 = selector.$and) != null ? ref1.length : void 0 : void 0) > 0) {
          selector.$and[0].$or = [{
            submitter: userId
          }, {
            applicant: userId
          }, {
            inbox_users: userId
          }, {
            outbox_users: userId
          }, {
            cc_users: userId
          }, {
            flow: {
              $in: flow_ids
            }
          }];
        } else {
          _.extend(selector, {
            $or: [{
              submitter: userId
            }, {
              applicant: userId
            }, {
              inbox_users: userId
            }, {
              outbox_users: userId
            }, {
              cc_users: userId
            }, {
              flow: {
                $in: flow_ids
              }
            }]
          });
        }
      }

      return selector;
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/tabular.coffee                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var GetBoxInstancesTabularOptions, _get_inbox_instances_tabular_options, _get_outbox_instances_tabular_options, _handleListFields, instancesListTableTabular, newInstancesListTabular, updateTabularTitle;

Steedos.subs["InstanceTabular"] = new SubsManager();

_handleListFields = function (fields) {
  var ins_fields;
  ins_fields = new Array();

  if (fields != null) {
    fields.forEach(function (f) {
      var ref;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
          return ins_fields.push(f1);
        }) : void 0 : void 0;
      } else {
        return ins_fields.push(f);
      }
    });
  }

  return ins_fields;
};

updateTabularTitle = function () {};

instancesListTableTabular = function (flowId, fields) {
  var ins_fields, key, options;
  options = {
    name: "instances",
    collection: db.instances,
    pub: "instance_tabular",
    onUnload: function () {
      return Meteor.setTimeout(Template.instance_list._tableColumns, 150);
    },
    drawCallback: function (settings) {
      var ellipsisLink, emptyTd, title;
      emptyTd = $(".dataTables_empty");

      if (emptyTd.length) {
        emptyTd[0].colSpan = "6";
      }

      if (!Steedos.isMobile() && !Steedos.isPad()) {
        Meteor.setTimeout(Template.instance_list._tableColumns, 150);
        $(".instance-list").scrollTop(0).ready(function () {
          return $(".instance-list").perfectScrollbar("update");
        });
      } else {
        $(".instance-list").scrollTop(0);
      }

      title = t("pager_input_hint");
      ellipsisLink = settings.oInstance.parent().find('.paging_numbers .pagination .disabled a');
      return ellipsisLink.attr("title", title).css("cursor", "pointer").click(function () {
        var goPage, input;

        if (!$(this).find('input').length) {
          input = $('<input class="paginate_input form-control input-sm" type="text" style="border: none; padding:0 2px;"/>');

          if (Steedos.isMobile()) {
            input.css({
              width: "52px",
              height: "20px"
            });
          } else {
            input.css({
              width: "52px",
              height: "16px"
            });
          }

          input.attr("title", title).attr("placeholder", title);
          $(this).empty().append(input);

          goPage = function (index) {
            var pages;

            if (index > 0) {
              pages = Math.ceil(settings.fnRecordsDisplay() / settings._iDisplayLength);

              if (index > pages) {
                index = pages;
              }

              index--;
              return settings.oInstance.DataTable().page(index).draw('page');
            }
          };

          input.blur(function (e) {
            var currentPage;
            currentPage = $(this).val();
            goPage(currentPage);
            return $(this).parent().html('...');
          });
          return input.keydown(function (e) {
            var currentPage;

            if (e.keyCode.toString() === "13") {
              currentPage = $(this).val();
              return goPage(currentPage);
            }
          });
        }
      });
    },
    createdRow: function (row, data, dataIndex) {
      if (Meteor.isClient) {
        if (data._id === FlowRouter.current().params.instanceId) {
          return row.setAttribute("class", "selected");
        }
      }
    },
    columns: [{
      data: "_id",
      orderable: false,
      render: function (val, type, doc) {
        var agent_view, cc_view, flow_name, instanceNamePriorityClass, isFavoriteSelected, modified, modifiedFromNow, modifiedString, priorityIcon, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        modifiedString = moment(doc.modified).format('YYYY-MM-DD');
        modified = doc.modified;

        if (Session.get("box") === 'inbox' && doc.state !== 'draft') {
          modified = doc.start_date || doc.modified;
        }

        if (Session.get("box") === 'outbox' || Session.get("box") === 'monitor') {
          modified = doc.submit_date || doc.submit_date;
        }

        modifiedFromNow = Steedos.momentReactiveFromNow(modified);
        flow_name = doc.flow_name;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
          step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
        } else {
          if (Session.get("box") !== 'draft' && doc.current_step_name) {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
          } else {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "</div>";
          }
        }

        agent_view = "";

        if (doc.agent_user_name && Session.get("box") === 'inbox') {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';
        isFavoriteSelected = Favorites.isRecordSelected("instances", doc._id);

        if (Favorites.isRecordSelected("instances", doc._id)) {
          unread = '<i class="ion ion-ios-star-outline instance-favorite-selected"></i>';
        } else if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIcon = "";
        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "\n	<span>" + doc.applicant_name + "</span>\n</div>\n<div class='instance-detail'>" + step_current_name_view + "\n	<span class='instance-modified' title='" + modifiedString + "'>" + modifiedFromNow + "</span>\n</div>";
      }
    }, {
      data: "applicant_organization_name",
      title: t("instances_applicant_organization_name"),
      visible: false
    }, {
      data: "name",
      title: t("instances_name"),
      render: function (val, type, doc) {
        var agent_view, cc_view, instanceNamePriorityClass, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
        }

        agent_view = "";

        if (doc.agent_user_name) {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';

        if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      visible: false,
      orderable: false
    }, {
      data: "submit_date",
      title: t("instances_submit_date"),
      render: function (val, type, doc) {
        if (doc.submit_date) {
          return moment(doc.submit_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      visible: false,
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_step_current_name"),
      render: function (val, type, doc) {
        var cc_tag, judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        cc_tag = '';

        if (doc.cc_count > 0) {
          cc_tag = TAPi18n.__('cc_tag');
        }

        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + cc_tag + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "modified",
      title: t("instances_modified"),
      render: function (val, type, doc) {
        return moment(doc.modified).format('YYYY-MM-DD HH:mm');
      },
      visible: false,
      orderable: true
    }, {
      data: "start_date",
      title: t("instances_start_date"),
      render: function (val, type, doc) {
        if (doc.start_date) {
          return moment(doc.start_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "my_finish_date",
      render: function (val, type, doc) {
        if (doc.my_finish_date) {
          return moment(doc.my_finish_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "modified",
      visible: false
    }, {
      data: "keywords",
      visible: false
    }, {
      data: "is_archived",
      render: function (val, type, doc) {
        var ref;

        if ((doc != null ? (ref = doc.values) != null ? ref.record_need : void 0 : void 0) && doc.values.record_need === "true") {
          if (doc != null ? doc.is_archived : void 0) {
            return t("YES");
          }

          return t("NO");
        }
      },
      visible: false,
      orderable: false
    }],
    dom: function () {
      if (Steedos.isMobile()) {
        return 'tp';
      } else {
        return 'tpl';
      }
    }(),
    order: [[4, "desc"]],
    extraFields: ["form", "flow", "inbox_users", "state", "space", "applicant", "form_version", "flow_version", "is_cc", "cc_count", "is_read", "current_step_name", "values", "keywords", "final_decision", "flow_name", "is_hidden", "agent_user_name"],
    lengthChange: true,
    lengthMenu: [10, 15, 20, 25, 50, 100],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var ref, space, space_user;

      if (!userId) {
        return {
          _id: -1
        };
      }

      space = selector.space;

      if (!space) {
        if ((selector != null ? (ref = selector.$and) != null ? ref.length : void 0 : void 0) > 0) {
          space = selector.$and.getProperty('space')[0];
        }
      }

      if (!space) {
        return {
          _id: -1
        };
      }

      space_user = db.space_users.findOne({
        user: userId,
        space: space
      }, {
        fields: {
          _id: 1
        }
      });

      if (!space_user) {
        return {
          _id: -1
        };
      }

      return selector;
    },
    pagingType: "numbers"
  };

  if (flowId) {
    key = "instanceFlow" + flowId;
    options.name = key;
    TabularTables.instances.fields = fields;
    ins_fields = _handleListFields(TabularTables.instances.fields);
    ins_fields.forEach(function (f) {
      if (f.type !== 'table' && f.is_list_display) {
        return options.columns.push({
          data: f.name || f.code,
          title: t(f.name || f.code),
          visible: false,
          orderable: false,
          render: function (val, type, doc) {
            var value, values;
            values = doc.values || {};
            value = values[f.code];

            switch (f.type) {
              case 'user':
                value = value != null ? value.name : void 0;
                break;

              case 'group':
                value = value != null ? value.fullname : void 0;
                break;

              case 'date':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD');
                }

                break;

              case 'dateTime':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD HH:mm');
                }

                break;

              case 'checkbox':
                if (value === true || value === 'true') {
                  value = TAPi18n.__("form_field_checkbox_yes");
                } else {
                  value = TAPi18n.__("form_field_checkbox_no");
                }

                break;

              case 'odata':
                if (value) {
                  if (_.isArray(value)) {
                    value = _.pluck(value, '@label').toString();
                  } else {
                    value = value['@label'];
                  }
                }

            }

            return value;
          }
        });
      }
    });
  }

  return options;
};

Meteor.startup(function () {
  return TabularTables.instances = new Tabular.Table(instancesListTableTabular());
});

GetBoxInstancesTabularOptions = function (box, flowId, fields) {
  var key, options;
  key = "instanceFlow" + box + flowId;

  if (box === "inbox") {
    options = _get_inbox_instances_tabular_options(flowId, fields);
  } else if (box === "outbox") {
    options = _get_outbox_instances_tabular_options(flowId, fields);
  } else {
    options = instancesListTableTabular(flowId, fields);

    if (!flowId) {
      options.name = "inbox_instances";
    }
  }

  if (flowId) {
    options.name = key;
  }

  return options;
};

_get_inbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "inbox_instances";
  }

  options.order = [[8, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': false,
        '_approve.handler': userId
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'start_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_start_date": {
              $first: "$_approve.start_date"
            }
          }
        });
        ag_sort = {
          'approve_start_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.inbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("inbox"));
});

_get_outbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "outbox_instances";
  }

  options.order = [[9, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': true,
        $or: [{
          '_approve.handler': userId
        }, {
          '_approve.user': userId
        }]
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'my_finish_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_finish_date": {
              $last: "$_approve.finish_date"
            }
          }
        });
        ag_sort = {
          'approve_finish_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.outbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("outbox"));
});

if (Meteor.isClient) {
  TabularTables.flowInstances = new ReactiveVar();
}

Meteor.startup(function () {
  return Tracker.autorun(function (c) {
    if (Meteor.isClient && !Steedos.isMobile()) {
      if (Session.get("flowId") && Session.get("box") !== 'draft') {
        return Meteor.call("newInstancesListTabular", Session.get("box"), Session.get("flowId"), function (error, result) {
          newInstancesListTabular(Session.get("box"), Session.get("flowId"), result);
          return Template.instance_list._changeOrder();
        });
      }
    }
  });
});

newInstancesListTabular = function (box, flowId, fields) {
  var flow, key, ref, ref1, ref2;

  if (!fields) {
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        form: 1
      }
    });
    fields = (ref = db.forms.findOne({
      _id: flow != null ? flow.form : void 0
    }, {
      fields: {
        'current.fields': 1
      }
    })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
  }

  fields = _handleListFields(fields);

  if ((fields != null ? (ref2 = fields.filterProperty("is_list_display", true)) != null ? ref2.length : void 0 : void 0) > 0) {
    key = "instanceFlow" + box + flowId;

    if (Meteor.isClient) {
      TabularTables.flowInstances.set(new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields)));
    } else {
      new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields));
    }

    return console.log("new TabularTables ", key);
  }
};

if (Meteor.isServer) {
  Meteor.methods({
    newInstancesListTabular: function (box, flowId) {
      var fields, flow, ref, ref1;
      newInstancesListTabular(box, flowId);
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          form: 1
        }
      });
      fields = (ref = db.forms.findOne({
        _id: flow != null ? flow.form : void 0
      }, {
        fields: {
          'current.fields': 1
        }
      })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
      return fields;
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".coffee"
  ]
});

require("/node_modules/meteor/steedos:workflow/checkNpm.js");
require("/node_modules/meteor/steedos:workflow/lib/URI.js");
require("/node_modules/meteor/steedos:workflow/lib/collection_helpers.js");
require("/node_modules/meteor/steedos:workflow/lib/tapi18n.coffee");
require("/node_modules/meteor/steedos:workflow/lib/core.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/forms.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flows.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/categories.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/spaces.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/deleted_instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/auth_tokens.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/webhooks.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_users.coffee");
require("/node_modules/meteor/steedos:workflow/lib/cfs/instances.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/instance_readonly_template.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/template_manager.coffee");
require("/node_modules/meteor/steedos:workflow/client/coreform/inputTypes/coreform-table/steedos-table.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_image_sign.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_traces_handler.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_form.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_attachments.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_sign_text.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_traces_help.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_related_records.coffee");
require("/node_modules/meteor/steedos:workflow/routes/designer.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/set_instance_step_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/get_instance_data.js");
require("/node_modules/meteor/steedos:workflow/server/methods/save_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/trace_approve_cc.js");
require("/node_modules/meteor/steedos:workflow/server/methods/forward_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/cfs_instances.js");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_return.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_remind.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/next_step_users_not_found.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_number_rules.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/check_main_attach.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/edit_flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/start_flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_traces.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_batch.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/distribute.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/hide_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_value.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/steedos_css.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance_draft_view.coffee");
require("/node_modules/meteor/steedos:workflow/routes/nextStepUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getSpaceUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getFormulaUserObjects.js");
require("/node_modules/meteor/steedos:workflow/routes/init_formula_values.js");
require("/node_modules/meteor/steedos:workflow/routes/getNameForUser.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_designer_startup.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_engine.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_remove.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_terminate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_reassign.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_relocate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_archive.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_export.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_space_changeset.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_retrieve.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward.js");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_instance.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_pending.coffee");
require("/node_modules/meteor/steedos:workflow/routes/export_table_template.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_save.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get_by_stepname.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_cfs.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_table_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_sub_table_sort.coffee");
require("/node_modules/meteor/steedos:workflow/routes/test_webhook.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/1_form_formula.js");
require("/node_modules/meteor/steedos:workflow/server/lib/get_handlers_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/permission_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/approve_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/flow_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/form_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/step_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/categories.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/cfs_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flows.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/forms.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_data.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_list.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_draft.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/distributed_instances_state_by_ids.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/related_instaces.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/user_inbox_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_main_attach_template.coffee");
require("/node_modules/meteor/steedos:workflow/lib/admin.coffee");
require("/node_modules/meteor/steedos:workflow/related_instances_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/tabular.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_users.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_organizations.coffee");
require("/node_modules/meteor/steedos:workflow/server/flow-template/workflow_template.coffee");
require("/node_modules/meteor/steedos:workflow/server/startup.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/instance_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/auto_finish_process_delegation.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/timeout_auto_submit.coffee");

/* Exports */
Package._define("steedos:workflow", {
  InstanceManager: InstanceManager,
  WorkflowManager_format: WorkflowManager_format,
  Workflow: Workflow,
  SteedosTable: SteedosTable,
  InstanceReadOnlyTemplate: InstanceReadOnlyTemplate,
  TemplateManager: TemplateManager,
  CoreForm: CoreForm,
  InstanceNumberRules: InstanceNumberRules,
  getHandlersManager: getHandlersManager,
  permissionManager: permissionManager,
  workflowTemplate: workflowTemplate,
  approveManager: approveManager,
  stepManager: stepManager,
  flowManager: flowManager,
  formManager: formManager
});

})();

//# sourceURL=meteor://💻app/packages/steedos_workflow.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jaGVja05wbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9saWIvVVJJLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2xpYi9jb3JlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvbGliL2NvcmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2xpYi9tb2RlbHMvYXV0aF90b2tlbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC9saWIvaW5zdGFuY2VfcmVhZG9ubHlfdGVtcGxhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvbGliL2luc3RhbmNlX3JlYWRvbmx5X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvbGliL3RlbXBsYXRlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvbGliL3RlbXBsYXRlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L2NsaWVudC9jb3JlZm9ybS9pbnB1dFR5cGVzL2NvcmVmb3JtLXRhYmxlL3N0ZWVkb3MtdGFibGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbWFnZV9zaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbWFnZV9zaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3RyYWNlc19oYW5kbGVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL190cmFjZXNfaGFuZGxlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX2luc3RhbmNlX2F0dGFjaG1lbnRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9faW5zdGFuY2Vfc2lnbl90ZXh0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9zaWduX3RleHQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9fdHJhY2VzX2hlbHAuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3RyYWNlc19oZWxwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3JlbGF0ZWRfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19yZWxhdGVkX3JlY29yZHMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3JlbGF0ZWRfcmVjb3Jkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2Rlc2lnbmVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2Rlc2lnbmVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvbmV4dFN0ZXBVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvZ2V0U3BhY2VVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvZ2V0Rm9ybXVsYVVzZXJPYmplY3RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3JvdXRlcy9pbml0X2Zvcm11bGFfdmFsdWVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9nZXROYW1lRm9yVXNlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9nZXROYW1lRm9yVXNlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV9kZXNpZ25lcl9zdGFydHVwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV9kZXNpZ25lcl9zdGFydHVwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2VuZ2luZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZW5naW5lLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2RyYWZ0cy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZHJhZnRzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlbW92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVtb3ZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfc3VibWl0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3Rlcm1pbmF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfdGVybWluYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlYXNzaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19yZWFzc2lnbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZWxvY2F0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVsb2NhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfYXJjaGl2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfYXJjaGl2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19leHBvcnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2V4cG9ydC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19zcGFjZV9jaGFuZ2VzZXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3NwYWNlX2NoYW5nZXNldC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZXRyaWV2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmV0cmlldmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2luc3RhbmNlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3BlbmRpbmcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fcGVuZGluZy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2V4cG9ydF90YWJsZV90ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9leHBvcnRfdGFibGVfdGVtcGxhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9kcmFmdHMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZHJhZnRzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZ2V0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2dldC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zYXZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3NhdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9nZXRfYnlfc3RlcG5hbWUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZ2V0X2J5X3N0ZXBuYW1lLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fY2ZzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2Nmcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19mb3J3YXJkX3JlZmlsbC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZF9yZWZpbGwuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZF90YWJsZV9yZWZpbGwuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2ZvcndhcmRfdGFibGVfcmVmaWxsLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3N1Yl90YWJsZV9zb3J0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV9zdWJfdGFibGVfc29ydC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL3Rlc3Rfd2ViaG9vay5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy90ZXN0X3dlYmhvb2suY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfZm9ybXVsYV91c2Vycy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfZm9ybXVsYV91c2Vycy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV9mb3JtdWxhX29yZ2FuaXphdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX2Zvcm11bGFfb3JnYW5pemF0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvc2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL3NldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2dldF9pbnN0YW5jZV9kYXRhLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL3NhdmVfaW5zdGFuY2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3M6d29ya2Zsb3cvc2VydmVyL21ldGhvZHMvdHJhY2VfYXBwcm92ZV9jYy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9mb3J3YXJkX2luc3RhbmNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2Nmc19pbnN0YW5jZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9uZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9jaGVja19tYWluX2F0dGFjaC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvcmVsYXRlZF9pbnN0YW5jZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvZWRpdF9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2VkaXRfZmxvd19wb3NpdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL3N0YXJ0X2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9zdGFydF9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2JhdGNoLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYmF0Y2guY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9oaWRlX2luc3RhbmNlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaGlkZV9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfdmFsdWUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV92YWx1ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3JvdXRlcy9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9yb3V0ZXMvaW5zdGFuY2UuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9yb3V0ZXMvc3RlZWRvc19jc3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL3N0ZWVkb3NfY3NzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9saWIvMV9mb3JtX2Zvcm11bGEuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL2xpYi9nZXRfaGFuZGxlcnNfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZ2V0X2hhbmRsZXJzX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvcGVybWlzc2lvbl9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9wZXJtaXNzaW9uX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvYXBwcm92ZV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9hcHByb3ZlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvZmxvd19tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2Zvcm1fbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZm9ybV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL3N0ZXBfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvc3RlcF9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcG9zaXRpb25zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZmxvd3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zvcm1zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mb3Jtcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kcmFmdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfZHJhZnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvZmxvdy10ZW1wbGF0ZS93b3JrZmxvd190ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9mbG93LXRlbXBsYXRlL3dvcmtmbG93X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvc2NoZWR1bGUvYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3NjaGVkdWxlL2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3NjaGVkdWxlL3RpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvc2NoZWR1bGUvdGltZW91dF9hdXRvX3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3RhYnVsYXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC90YWJ1bGFyLmNvZmZlZSJdLCJuYW1lcyI6WyJjaGVja05wbVZlcnNpb25zIiwibW9kdWxlIiwibGluayIsInYiLCJjb29raWVzIiwibWtkaXJwIiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJVUkkiLCJwdW55Y29kZSIsIklQdjYiLCJTZWNvbmRMZXZlbERvbWFpbnMiLCJTTEQiLCJfVVJJIiwidXJsIiwiYmFzZSIsIl91cmxTdXBwbGllZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIl9iYXNlU3VwcGxpZWQiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJsb2NhdGlvbiIsImhyZWYiLCJhYnNvbHV0ZVRvIiwidmVyc2lvbiIsInAiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImVzY2FwZVJlZ0V4Iiwic3RyaW5nIiwicmVwbGFjZSIsImdldFR5cGUiLCJ2YWx1ZSIsIlN0cmluZyIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiaXNBcnJheSIsIm9iaiIsImZpbHRlckFycmF5VmFsdWVzIiwiZGF0YSIsImxvb2t1cCIsImkiLCJfbWF0Y2giLCJ0ZXN0Iiwic3BsaWNlIiwiYXJyYXlDb250YWlucyIsImxpc3QiLCJfdHlwZSIsIm1hdGNoIiwiYXJyYXlzRXF1YWwiLCJvbmUiLCJ0d28iLCJzb3J0IiwibCIsInRyaW1TbGFzaGVzIiwidGV4dCIsInRyaW1fZXhwcmVzc2lvbiIsIl9wYXJ0cyIsInByb3RvY29sIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImhvc3RuYW1lIiwidXJuIiwicG9ydCIsInBhdGgiLCJxdWVyeSIsImZyYWdtZW50IiwiZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzIiwiZXNjYXBlUXVlcnlTcGFjZSIsInByb3RvY29sX2V4cHJlc3Npb24iLCJpZG5fZXhwcmVzc2lvbiIsInB1bnljb2RlX2V4cHJlc3Npb24iLCJpcDRfZXhwcmVzc2lvbiIsImlwNl9leHByZXNzaW9uIiwiZmluZF91cmlfZXhwcmVzc2lvbiIsImZpbmRVcmkiLCJzdGFydCIsImVuZCIsInRyaW0iLCJkZWZhdWx0UG9ydHMiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJ3cyIsIndzcyIsImludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycyIsImRvbUF0dHJpYnV0ZXMiLCJnZXREb21BdHRyaWJ1dGUiLCJub2RlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInR5cGUiLCJlc2NhcGVGb3JEdW1iRmlyZWZveDM2IiwiZXNjYXBlIiwic3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaXNvODg1OSIsInVuZXNjYXBlIiwidW5pY29kZSIsImNoYXJhY3RlcnMiLCJwYXRobmFtZSIsImV4cHJlc3Npb24iLCJtYXAiLCJyZXNlcnZlZCIsInVybnBhdGgiLCJlbmNvZGVRdWVyeSIsImVzY2FwZWQiLCJkZWNvZGVRdWVyeSIsImUiLCJfcGFydCIsImdlbmVyYXRlQWNjZXNzb3IiLCJfZ3JvdXAiLCJjIiwiZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24iLCJfc2VwIiwiX2NvZGluZ0Z1bmNOYW1lIiwiX2lubmVyQ29kaW5nRnVuY05hbWUiLCJhY3R1YWxDb2RpbmdGdW5jIiwic2VnbWVudHMiLCJzcGxpdCIsImpvaW4iLCJkZWNvZGVQYXRoIiwiZGVjb2RlVXJuUGF0aCIsInJlY29kZVBhdGgiLCJyZWNvZGVVcm5QYXRoIiwiZW5jb2RlUmVzZXJ2ZWQiLCJwYXJzZSIsInBhcnRzIiwicG9zIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsInBhcnNlQXV0aG9yaXR5IiwicGFyc2VIb3N0IiwiYnJhY2tldFBvcyIsInQiLCJjaGFyQXQiLCJmaXJzdENvbG9uIiwiZmlyc3RTbGFzaCIsIm5leHRDb2xvbiIsInBhcnNlVXNlcmluZm8iLCJsYXN0SW5kZXhPZiIsInNoaWZ0IiwicGFyc2VRdWVyeSIsIml0ZW1zIiwic3BsaXRzIiwibmFtZSIsInB1c2giLCJidWlsZCIsImJ1aWxkQXV0aG9yaXR5IiwiYnVpbGRIb3N0IiwiYnVpbGRVc2VyaW5mbyIsImJ1aWxkUXVlcnkiLCJ1bmlxdWUiLCJrZXkiLCJidWlsZFF1ZXJ5UGFyYW1ldGVyIiwiYWRkUXVlcnkiLCJjb25jYXQiLCJyZW1vdmVRdWVyeSIsImhhc1F1ZXJ5Iiwid2l0aGluQXJyYXkiLCJfYm9vbHkiLCJCb29sZWFuIiwib3AiLCJjb21tb25QYXRoIiwiTWF0aCIsIm1pbiIsIndpdGhpblN0cmluZyIsImNhbGxiYWNrIiwib3B0aW9ucyIsIl9zdGFydCIsIl9lbmQiLCJfdHJpbSIsIl9hdHRyaWJ1dGVPcGVuIiwibGFzdEluZGV4IiwiZXhlYyIsImluZGV4IiwiaWdub3JlSHRtbCIsImF0dHJpYnV0ZU9wZW4iLCJtYXgiLCJzZWFyY2giLCJpZ25vcmUiLCJyZXN1bHQiLCJlbnN1cmVWYWxpZEhvc3RuYW1lIiwidG9BU0NJSSIsIm5vQ29uZmxpY3QiLCJyZW1vdmVBbGwiLCJ1bmNvbmZsaWN0ZWQiLCJVUklUZW1wbGF0ZSIsImRlZmVyQnVpbGQiLCJfZGVmZXJyZWRfYnVpbGQiLCJfc3RyaW5nIiwiY2xvbmUiLCJ2YWx1ZU9mIiwiZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvciIsImdlbmVyYXRlUHJlZml4QWNjZXNzb3IiLCJfa2V5IiwiaGFzaCIsInJlcyIsIl9vYmplY3QiLCJhdHRyaWJ1dGUiLCJzcmMiLCJpcyIsIndoYXQiLCJpcCIsImlwNCIsImlwNiIsInNsZCIsImlkbiIsInJlbGF0aXZlIiwiaGFzIiwiX3Byb3RvY29sIiwiX3BvcnQiLCJfaG9zdG5hbWUiLCJzY2hlbWUiLCJ4Iiwib3JpZ2luIiwiYXV0aG9yaXR5IiwiaG9zdCIsInVzZXJpbmZvIiwicmVzb3VyY2UiLCJzdWJkb21haW4iLCJkb21haW4iLCJzdWIiLCJSZWdFeHAiLCJ0bGQiLCJnZXQiLCJSZWZlcmVuY2VFcnJvciIsImRpcmVjdG9yeSIsImZpbGVuYW1lIiwiZGVjb2RlUGF0aFNlZ21lbnQiLCJtdXRhdGVkRGlyZWN0b3J5Iiwibm9ybWFsaXplUGF0aCIsInN1ZmZpeCIsInMiLCJzZWdtZW50Iiwic2VwYXJhdG9yIiwiYWJzb2x1dGUiLCJFcnJvciIsInBvcCIsInVuc2hpZnQiLCJzZWdtZW50Q29kZWQiLCJxIiwic2V0UXVlcnkiLCJzZXRTZWFyY2giLCJhZGRTZWFyY2giLCJyZW1vdmVTZWFyY2giLCJoYXNTZWFyY2giLCJub3JtYWxpemUiLCJub3JtYWxpemVQcm90b2NvbCIsIm5vcm1hbGl6ZVF1ZXJ5Iiwibm9ybWFsaXplRnJhZ21lbnQiLCJub3JtYWxpemVIb3N0bmFtZSIsIm5vcm1hbGl6ZVBvcnQiLCJiZXN0IiwiX3BhdGgiLCJfd2FzX3JlbGF0aXZlIiwiX2xlYWRpbmdQYXJlbnRzIiwiX3BhcmVudCIsIl9wb3MiLCJub3JtYWxpemVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJkIiwicmVhZGFibGUiLCJ1cmkiLCJ0b1VuaWNvZGUiLCJxcCIsImt2IiwicmVzb2x2ZWQiLCJwcm9wZXJ0aWVzIiwiYmFzZWRpciIsInJlbGF0aXZlVG8iLCJyZWxhdGl2ZVBhcnRzIiwiYmFzZVBhcnRzIiwiY29tbW9uIiwicmVsYXRpdmVQYXRoIiwiYmFzZVBhdGgiLCJwYXJlbnRzIiwiZXF1YWxzIiwib25lX21hcCIsInR3b19tYXAiLCJjaGVja2VkIiwib25lX3F1ZXJ5IiwidHdvX3F1ZXJ5IiwiV29ya2Zsb3ciLCJJbWFnZVNpZ24iLCJUcmFjZXNIYW5kbGVyIiwiVHJhY2VzVGVtcGxhdGUiLCJJbnN0YW5jZWZvcm1UZW1wbGF0ZSIsIkluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlIiwiSW5zdGFuY2VTaWduVGV4dCIsIlJlbGF0ZWRJbnN0YW5jZXMiLCJSZWxhdGVkUmVjb3JkcyIsIkluc3RhbmNlTWFjcm8iLCJjb250ZXh0IiwiVHJhY2VzTWFuYWdlciIsImlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nIiwiZmllbGRfZm9ybXVsYSIsImluY2x1ZGVzT3BpbmlvbkZpZWxkIiwiZm9ybSIsImZvcm1fdmVyc2lvbiIsIl9mb3JtX3ZlcnNpb24iLCJmaWVsZF9mb3JtdWxhcyIsImZpZWxkcyIsIkFycmF5IiwiTWV0ZW9yIiwiaXNTZXJ2ZXIiLCJ1dWZsb3dNYW5hZ2VyIiwiZ2V0Rm9ybVZlcnNpb24iLCJkYiIsImZvcm1zIiwiZmluZE9uZSIsIl9pZCIsImZvcm1fdmVyc2lvbnMiLCJmb3JFYWNoIiwiZiIsInJlZiIsImNvbnNvbGUiLCJsb2ciLCJmMSIsImZvcm11bGEiLCJfIiwic29tZSIsImhlbHBlcnMiLCJhdXRoX3Rva2VucyIsIkNvbGxlY3Rpb24iLCJfZ2V0TG9jYWxlIiwiX2dldFJlcXVpcmVkRmllbGRzIiwiX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzIiwiX2dldFN0YXJ0U3RlcFJlcXVpcmVkRmllbGRzIiwiX2dldFRlbXBsYXRlRGF0YSIsIl9nZXRWaWV3SHRtbCIsImdldExpbmtUZXh0IiwiSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlIiwiaW5zdGFuY2VfYXR0YWNobWVudCIsImFmU2VsZWN0VXNlclJlYWQiLCJhZkZvcm1Hcm91cFJlYWQiLCJhZkZvcm1Hcm91cCIsImNyZWF0ZSIsInRlbXBhbHRlTmFtZSIsInN0ZWVkb3NEYXRhIiwidGVtcGxhdGUiLCJ0ZW1wbGF0ZUNvbXBpbGVkIiwidGVtcGxhdGVSZW5kZXJGdW5jdGlvbiIsIlNwYWNlYmFyc0NvbXBpbGVyIiwiY29tcGlsZSIsImlzQm9keSIsImV2YWwiLCJUZW1wbGF0ZSIsIkJsYXplIiwiY3JlYXRlSW5zdGFuY2VTaWduVGV4dCIsImluc3RhbmNlU2lnblRleHRDb21waWxlZCIsImluc3RhbmNlU2lnblRleHRIdG1sIiwiaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VTaWduVGV4dCIsImNyZWF0ZUltYWdlU2lnbiIsImltYWdlU2lnbkNvbXBpbGVkIiwiaW1hZ2VTaWduSHRtbCIsImltYWdlU2lnblJlbmRlckZ1bmN0aW9uIiwiaW1hZ2VTaWduIiwiY3JlYXRlVHJhY2VzSGFubGRlciIsInRyYWNlc0hhbmxkZXJDb21waWxlZCIsInRyYWNlc0hhbmxkZXJIdG1sIiwidHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXIiLCJpbml0IiwiaXRlbSIsImxhYmVsIiwiZGV0YWlsX3VybCIsIlN0ZWVkb3MiLCJhYnNvbHV0ZVVybCIsImdldFZhbHVlIiwiZmllbGQiLCJsb2NhbGUiLCJ1dGNPZmZzZXQiLCJkYXRlIiwiaG91cnMiLCJtb250aCIsInNlY29uZHMiLCJ0MCIsInQxIiwieWVhciIsImVuY29kZVVSSSIsImVycm9yIiwiaXNfbXVsdGlzZWxlY3QiLCJnZXRQcm9wZXJ0eSIsImZ1bGxuYW1lIiwiVEFQaTE4biIsIl9fIiwiRGF0ZSIsImZvcm1hdERhdGUiLCJpc190ZXh0YXJlYSIsIlNwYWNlYmFycyIsIlNhZmVTdHJpbmciLCJNYXJrZG93biIsIm51bWJlclRvU3RyaW5nIiwiZGlnaXRzIiwiZ2V0TGFiZWwiLCJjb2RlIiwiZmluZFByb3BlcnR5QnlQSyIsImdldEluc3RhbmNlRm9ybVZlcnNpb24iLCJpbnN0YW5jZSIsImZvcm1fZmllbGRzIiwiY3VycmVudCIsIndoZXJlIiwiaGlzdG9yeXMiLCJnZXRGbG93VmVyc2lvbiIsImZsb3ciLCJmbG93X3ZlcnNpb24iLCJmbG93cyIsInZpZXdIdG1sIiwiQXNzZXRzIiwiZ2V0VGV4dCIsInVzZXIiLCJyZWYxIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyZXYiLCJpc19yZXF1aXJlZCIsInN0ZXBzIiwiZWRpdGFibGVDb2RlIiwic3RhcnRTdGVwIiwia2V5cyIsInBlcm1pc3Npb25zIiwicmVxdWlyZWRGaWVsZHMiLCJpbnRlcnNlY3Rpb24iLCJzcGFjZSIsIldvcmtmbG93TWFuYWdlciIsImlzQ2xpZW50IiwiV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdCIsImdldEF1dG9mb3JtU2NoZW1hVmFsdWVzIiwiaW5zbmFtZSIsImluc19zdGF0ZSIsInN0YXRlIiwiaW5zX2ZpbmFsX2RlY2lzaW9uIiwiaW5zX2NvZGUiLCJpbnNfaXNfYXJjaGl2ZWQiLCJpc19hcmNoaXZlZCIsImluc19pc19kZWxldGVkIiwiYXBwbGljYW50X25hbWUiLCJhcHBsaWNhbnRDb250ZXh0Iiwic2Vzc2lvblVzZXJJZCIsImVkaXRhYmxlIiwic3RhcnRTdGVwRWRpdGFibGVGaWVsZHMiLCJwYXNzaW5nIiwibW9tZW50IiwiZm9ybWF0IiwiZ2V0SW5zdGFuY2VWaWV3IiwiYm9keSIsImluc3RhbmNlQ29tcGlsZWQiLCJpbnN0YW5jZVJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VUZW1wbGF0ZSIsIlRlbXBsYXRlTWFuYWdlciIsImdldFRlbXBsYXRlIiwidGVtcGxhdGVOYW1lIiwiaW5zdGFuY2VfcmVhZG9ubHlfdmlldyIsInRvSFRNTFdpdGhEYXRhIiwiZ2V0VHJhY2VzVmlldyIsInRyYWNlQ29tcGlsZWQiLCJ0cmFjZVJlbmRlckZ1bmN0aW9uIiwidHJhY2VzSHRtbCIsImluc3RhbmNlX3N0eWxlIiwidHJhY2VfcmVhZG9ubHlfdmlldyIsInRyYWNlcyIsImdldEF0dGFjaG1lbnRWaWV3IiwiYXR0YWNobWVudENvbXBpbGVkIiwiYXR0YWNobWVudEh0bWwiLCJhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24iLCJhdHRhY2htZW50c19yZWFkb25seV92aWV3IiwiZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXciLCJyZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQiLCJyZWxhdGVkSW5zdGFuY2VzSHRtbCIsInJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbiIsInJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXciLCJnZXRSZWxhdGVkUmVjb3Jkc1ZpZXciLCJyZWxhdGVkUmVjb3Jkc0NvbXBpbGVkIiwicmVsYXRlZFJlY29yZHNIdG1sIiwicmVsYXRlZFJlY29yZHNSZW5kZXJGdW5jdGlvbiIsInJlbGF0ZWRfcmVjb3Jkc192aWV3IiwiZ2V0T25Mb2FkU2NyaXB0IiwiZm9ybV9zY3JpcHQiLCJnZXRJbnN0YW5jZUh0bWwiLCJhbGxDc3NMaW5rIiwiYXR0YWNobWVudCIsImNyZWF0b3JTZXJ2aWNlIiwiY3NzSHJlZiIsImZvcm1EZXNjcmlwdGlvbiIsImZvcm1EZXNjcmlwdGlvbkh0bWwiLCJodG1sIiwiaW5zX3JlY29yZF9pZHMiLCJpbnN0YW5jZUJveFN0eWxlIiwib25Mb2FkU2NyaXB0Iiwib3BlbkZpbGVTY3JpcHQiLCJyZWxhdGVkX2luc3RhbmNlcyIsInJlbGF0ZWRfcmVjb3JkcyIsInNob3dUcmFjZXNCdG4iLCJzaG93VHJhY2VzU2NyaXB0IiwidHJhY2UiLCJ0cmFjZUNoZWNrIiwid2lkdGgiLCJzZXR0aW5ncyIsIndlYnNlcnZpY2VzIiwiY3JlYXRvciIsInJlY29yZF9pZHMiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNNb2JpbGUiLCJzaG93VHJhY2UiLCJmaW5hbF9kZWNpc2lvbiIsInNob3dBdHRhY2htZW50cyIsImlzRW1wdHkiLCJ0YWdnZXIiLCJzdHlsZXMiLCJkZXNjcmlwdGlvbiIsInBsdWdpbnMiLCJmb3JtSWQiLCJpbnN0YW5jZV90aXRsZSIsInBhZ2VUaXRsZSIsInBhZ2VUaXRsZVRyQ2xhc3MiLCJ2YWwiLCJDb3JlRm9ybSIsInBhZ2VUaXRsZUZpZWxkTmFtZSIsImhhbmRsZVRhYmxlVGVtcGxhdGUiLCJfZXhwb3J0IiwidGFibGVfZmllbGRzIiwidGFibGVfZmllbGQiLCJmaWVsZF9wZXJtaXNzaW9uIiwicHVyZUNvZGUiLCJyZXF1aXJlZCIsInRpdGxlX3Blcm1pc3Npb24iLCJyZW1vdmVTcGVjaWFsQ2hhcmFjdGVyIiwiaXNPcGluaW9uRmllbGQiLCJ0cl9zdGFydCIsInRkX2NvbHNwYW4iLCJ0cl9lbmQiLCJpbmNsdWRlcyIsInBlcm1pc3Npb24iLCJfdGVtcGxhdGUiLCJ0YWJsZSIsIl90ZW1wbGF0ZUhlbHBzIiwic3RlZWRvc19pbnN0YW5jZSIsImdldEluc3RhbmNlIiwiYXR0cyIsImlkIiwic3R5bGUiLCJkaXNhYmxlZCIsImluc3RhbmNlSWQiLCJmb3JtX3R5cGVzIiwiQXBwcm92ZU1hbmFnZXIiLCJpc1JlYWRPbmx5Iiwic3RlZWRvc19mb3JtIiwiaW5uZXJzdWJmb3JtQ29udGV4dCIsImRvY192YWx1ZXMiLCJTZXNzaW9uIiwiYSIsImIiLCJTaW1wbGVTY2hlbWEiLCJnZXRBdXRvZm9ybVNjaGVtYSIsImluc3RhbmNlX2JveF9zdHlsZSIsImJveCIsImlucyIsImp1ZGdlIiwicHJpbnRfdGVtcGxhdGUiLCJpbnN0YW5jZV90ZW1wbGF0ZSIsIlN0ZWVkb3NUYWJsZSIsImNoZWNrSXRlbSIsIml0ZW1faW5kZXgiLCJmaWVsZE9iaiIsImdldEZpZWxkIiwiZmllbGRWYWwiLCJnZXRJdGVtTW9kYWxWYWx1ZSIsInNmX25hbWUiLCJzZmllbGRzIiwic2YiLCJJbnN0YW5jZU1hbmFnZXIiLCJjaGVja0Zvcm1GaWVsZFZhbHVlIiwiJCIsInNldFRhYmxlSXRlbVZhbHVlIiwiaXRlbV92YWx1ZSIsInRhYmxlVmFsdWUiLCJnZXRUYWJsZVZhbHVlIiwiZ2V0VGFibGVJdGVtVmFsdWUiLCJyZW1vdmVUYWJsZUl0ZW0iLCJyZW1vdmVkIiwic2V0VGFibGVWYWx1ZSIsImdldFZhbGlkVmFsdWUiLCJ2YWxpZFZhbHVlIiwiaGFuZGxlRGF0YSIsInZhbHVlcyIsImluc3RhbmNlRmllbGRzIiwiZ2V0SW5zdGFuY2VGaWVsZHMiLCJnZXRNb2RhbERhdGEiLCJGb3JtX2Zvcm11bGEiLCJnZXRGb3JtdWxhRmllbGRWYXJpYWJsZSIsIkF1dG9Gb3JtIiwiZ2V0Rm9ybVZhbHVlcyIsImluc2VydERvYyIsImFkZEl0ZW0iLCJfaXRlbV92YWx1ZSIsImdldEtleXMiLCJhcHBlbmQiLCJnZXRUciIsInVwZGF0ZUl0ZW0iLCJ0ZHMiLCJnZXRSZW1vdmVUZCIsInNmaWVsZCIsImdldFRkIiwiZW1wdHkiLCJydW5Gb3JtdWxhIiwicmVtb3ZlSXRlbSIsImhpZGUiLCJzaG93TW9kYWwiLCJtZXRob2QiLCJtb2RhbERhdGEiLCJNb2RhbCIsInNob3ciLCJnZXRDdXJyZW50RGF0YUZvckZvcm0iLCJzcyIsImdldEZvcm1TY2hlbWEiLCJzY2hlbWEiLCJvYmplY3RLZXlzIiwiX21ha2VHZW5lcmljIiwiZ2V0VGhlYWQiLCJpc09iamVjdCIsInRoZWFkIiwidHJzIiwic2ZfbGVuZ3RoIiwid2lkZV9maWVsZHMiLCJmaWx0ZXJQcm9wZXJ0eSIsImlzX3dpZGUiLCJnZXRUYm9keSIsInNmaWVsZHNFZGl0YWJsZSIsInRib2R5IiwidHIiLCJ0ZCIsInRkX3ZhbHVlIiwiZ2V0VERWYWx1ZSIsInZpZXciLCJDRkRhdGFNYW5hZ2VyIiwiZ2V0Rm9ybXVsYVNwYWNlVXNlcnMiLCJ1IiwiZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbnMiLCJvIiwiZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbiIsInBsdWNrIiwiYWRkSW5wdXRUeXBlIiwidmFsdWVPdXQiLCJ2YWx1ZUNvbnZlcnRlcnMiLCJzdHJpbmdUb1N0cmluZ0FycmF5Iiwic3RyaW5nVG9OdW1iZXIiLCJzdHJpbmdUb051bWJlckFycmF5Iiwic3RyaW5nVG9Cb29sZWFuIiwic3RyaW5nVG9Cb29sZWFuQXJyYXkiLCJzdHJpbmdUb0RhdGUiLCJzdHJpbmdUb0RhdGVBcnJheSIsImNvbnRleHRBZGp1c3QiLCJtYXhsZW5ndGgiLCJhZlRhYmxlIiwiZXZlbnRzIiwiZXZlbnQiLCJuZXdfaXRlbV9pbmRleCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0Iiwic2V0IiwicmVuZGVyZWQiLCJzdHIiLCJhZGRJdGVtVHIiLCJhdXRvcnVuIiwiY3VycmVudERhdGEiLCJzcGFjZVVzZXJTaWduIiwidXNlcklkIiwic3BhY2VfdXNlcl9zaWducyIsImltYWdlVVJMIiwic2lnbiIsInNob3dTaWduSW1hZ2UiLCJoYW5kbGVyIiwiaXNfZmluaXNoZWQiLCJvYmplY3RVcmwiLCJvYmplY3RfbmFtZSIsInJlY29yZF9pZCIsImFwcF9pZCIsIkNyZWF0b3IiLCJnZXRPYmplY3RVcmwiLCJ1bmVtcHR5IiwidW5lcXVhbHMiLCJpbmNsdWRlIiwicmVmMiIsInJlZjMiLCJnZXRJbnN0YW5jZUZsb3dWZXJzaW9uIiwiYXBwcm92ZXMiLCJyZWY0Iiwic3RlcCIsImFwcHJvdmUiLCJqdWRnZV9uYW1lIiwiaGFuZGxlcl9uYW1lIiwiaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSIsImhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lIiwiZmluaXNoX2RhdGUiLCJvcGluaW9uX2ZpZWxkc19jb2RlIiwic2lnbl9maWVsZF9jb2RlIiwiaXNfcmVhZCIsInNpZ25fc2hvdyIsImFmdGVyX2ZpZWxkIiwiYmVmb3JlX2ZpZWxkIiwicHJlX2ZpZWxkcyIsInByZV93aWRlX2ZpZWxkcyIsInNvcnRfYXBwcm92ZSIsIm9yZGVyIiwicDEiLCJwMiIsIl9wMSIsIl9wMiIsImdldFRpbWUiLCJfdCIsImdldENmQ2xhc3MiLCJnZXRUYWJsZVRoZWFkIiwiZ2V0VGFibGVCb2R5Iiwic2hvd0xhYmVsIiwidGVtcGxhdGVEYXRhIiwiZ2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lIiwidG9wX2tleXdvcmRzIiwiZm9vMSIsIm9waW5pb25GaWVsZHMiLCJmb28iLCJqc29uX2Zvcm11bGEiLCJzMSIsImVycm9yMSIsInlpamlhbmxhbiIsInN0ZXBOYW1lIiwiaW1hZ2Vfc2lnbiIsIm9ubHlfY2Nfb3BpbmlvbiIsIm9ubHlfY2MiLCJkZWZhdWx0X2Rlc2NyaXB0aW9uIiwib25seV9oYW5kbGVyIiwic2hvd0NDT3BpbmlvbiIsIm1hcmtEb3duVG9IdG1sIiwibWFya0Rvd25TdHJpbmciLCJyZW5kZXJlciIsIlJlbmRlcmVyIiwidGl0bGUiLCJmX2xhYmVsIiwidGhhdCIsImlzU2VjdGlvbiIsInJlZ2lzdGVySGVscGVyIiwiaW5zX2F0dGFjaF9kb3dubG9hZF91cmwiLCJnZXRQZXJtaXNzaW9ucyIsImluc3RhbmNlZm9ybUNoYW5nZUV2ZW50IiwicHJldmVudERlZmF1bHQiLCJvcGVuV2luZG93IiwidGFyZ2V0Iiwib25DcmVhdGVkIiwiY29tcGlsZWQiLCJpbnN0YW5jZUN1c3RvbVRlbXBsYXRlIiwiaW5zdGFuY2VWaWV3IiwicmVuZGVyRnVuY3Rpb24iLCJWaWV3IiwiaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlIiwib25SZW5kZXJlZCIsImN1cnJlbnRBcHByb3ZlIiwiY3VycmVudFN0ZXAiLCJmb3JtdWxhX2ZpZWxkcyIsImluc3RhbmNlTnVtYmVyRmllbGRzIiwiYXBwbGljYW50IiwibmV4dFN0ZXBzIiwibmV4dFN0ZXBVc2VycyIsIkluc3RhbmNlRXZlbnQiLCJpbml0RXZlbnRzIiwiZ2V0Q3VycmVudEFwcHJvdmUiLCJlYWNoIiwiZWxlbWVudCIsInNjaGVtYUtleSIsInRvYXN0ciIsInJlYXNvbiIsImdldEZpZWxkVmFsdWUiLCJJbnN0YW5jZU51bWJlclJ1bGVzIiwiaW5zdGFuY2VOdW1iZXJCdWlsZGVyIiwidHJpZ2dlciIsImdldEN1cnJlbnRTdGVwIiwicnVuIiwic2hvd01haW5UaXRsZSIsIndvcmtmbG93TWFpbkF0dGFjaFRpdGxlIiwiZW5hYmxlZF9hZGRfbWFpbl9hdHRhY2htZW50IiwiY3VycmVudF9zdGVwIiwibWFpbl9hdHRhY2hfY291bnQiLCJjZnMiLCJpbnN0YW5jZXMiLCJmaW5kIiwiY291bnQiLCJkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50IiwiZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlIiwic3RhcnRfc3RlcCIsImdldFN0YXJ0U3RlcCIsImNhbl9lZGl0X21haW5fYXR0YWNoIiwic3RlcF90eXBlIiwiZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50IiwiZ2V0RmxvdyIsInVwbG9hZF9hZnRlcl9iZWluZ19kaXN0cmlidXRlZCIsImlzQ0MiLCJnZXRDQ1N0ZXAiLCJjYW5fZWRpdF9ub3JtYWxfYXR0YWNoIiwibWFpbl9hdHRhY2htZW50IiwibWFpbl9hdHRhY2giLCJub3JtYWxfYXR0YWNobWVudHMiLCJzZWxlY3RvciIsIiRuZSIsImRmaXMiLCJkaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIiwiJGluIiwiZGlzdHJpYnV0ZV9tYWluIiwiZmlyc3RWZXJzaW9uTWFpbiIsIm1ldGFkYXRhIiwicGFyZW50IiwiYXR0YWNobWVudFVwbG9hZGVkQXQiLCJ1cGxvYWRlZEF0IiwiZmlyc3RWZXJzaW9uIiwic29ydEJ5IiwiaW5zdGFuY2VJZHMiLCJhdHRhY2htZW50c19jb3VudCIsImZsb3dfZmlsZXMiLCJmaWxlcyIsImlzRHJhZnRBbmRGbG93ZmlsZXNFeGlzdCIsImNvbXBhY3QiLCJhdHRhY2htZW50cyIsIiRvciIsImZldGNoIiwibXlBcHByb3ZlIiwibXlUcmFjZSIsImlzSW5ib3giLCJkZWZhdWx0RGVzY3JpcHRpb24iLCJhcHByb3ZlX3NvcnQiLCJhcHByb3Zlc0dyb3VwIiwiYXBwcm92ZXNfc29ydGVkIiwiY29tcGxldGVkX2RhdGUiLCJoYXNOZXh0IiwiaGF2ZURlc2NyaXB0aW9uQXBwcm92ZSIsImlzX2NvbXBsZXRlZCIsImxhc3QiLCJ0b3BfYXBwcm92ZXMiLCJ1bmlvbiIsImZpbHRlciIsInRvcF9hcHByb3ZlIiwiZ3JvdXBCeSIsImhhbmRsZXJBcHByb3ZlcyIsImRlc2NyaXB0aW9uQXBwcm92ZXMiLCJfZGlzcGxheSIsImlzTXlBcHByb3ZlIiwibXlBcHByb3ZlRGVzY3JpcHRpb24iLCJhcHByb3ZlSWQiLCJub3ciLCJpc09waW5pb25PZkZpZWxkIiwiaW1hZ2VTaWduRGF0YSIsImdldExhc3RTaWduQXBwcm92ZSIsImdldEhhbmRsZXJTaWduU2hvd0FwcHJvdmVzIiwibGFzdE15QXBwcm92ZURlc2NyaXB0aW9uIiwic2hvd0FwcHJvdmUiLCJqdWRnZV9kZXNjcmlwdGlvbiIsImlzX2FwcHJvdmVkIiwiaXNfcmVqZWN0ZWQiLCJpc19yZWFkZWQiLCJhZGRDbGFzcyIsInNldFRpbWVvdXQiLCJkYXRlRm9ybWF0IiwiZ2V0RnVsbFllYXIiLCJnZXRTdGVwTmFtZSIsInN0ZXBJZCIsImdldEluc3RhbmNlU3RlcCIsInNob3dEZWxldGVCdXR0b24iLCJhcHByb3ZlZCIsImZyb21fdXNlciIsImlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbiIsImFwcHJvdmVfYWRtaW5zIiwiaXNTaG93Iiwid29ya2Zsb3ciLCJjb250YWlucyIsImlzRWRpdGluZyIsImlzX2VkaXRpbmciLCJpc1Nob3dEZXNjcmlwdGlvbiIsImdldEFwcHJvdmVTdGF0dXNJY29uIiwiYXBwcm92ZUp1ZGdlIiwiYXV0b1N1Ym1pdHRlZCIsImFwcHJvdmVTdGF0dXNJY29uIiwiZ2V0QXBwcm92ZVN0YXR1c1RleHQiLCJhcHByb3ZlU3RhdHVzVGV4dCIsImdldEFwcHJvdmVKdWRnZUNsYXNzIiwiaXNGb3J3YXJkIiwic2hvd0ZvcndhcmREZWxldGVCdXR0b24iLCJmb3J3YXJkX2luc3RhbmNlIiwiaXNEaXN0cmlidXRlIiwic2hvd0Rpc3RyaWJ1dGVEZWxldGVCdXR0b24iLCJoYXNGZWF0dXJlIiwiZ2V0U3BhY2VJZCIsImhhc0Zsb3dBZG1pblBlcm1pc3Npb24iLCJmaW5pc2hEYXRlU2NoZW1hIiwiaXNBbmRyb2lkT3JJT1MiLCJhdXRvZm9ybSIsIm9wdGlvbmFsIiwicmVhZG9ubHkiLCJkYXRlVGltZVBpY2tlck9wdGlvbnMiLCJpZ25vcmVSZWFkb25seSIsIndpZGdldFBvc2l0aW9uaW5nIiwiaG9yaXpvbnRhbCIsImZpbmlzaERhdGVWYWx1ZXMiLCJzaG93VHJhY2VzVmlldyIsInNob3dfbW9kYWxfdHJhY2VzX2xpc3QiLCJzcGFjZV9zZXR0aW5ncyIsImdldEluc3RhbmNlU3RhdGVUZXh0IiwiaW5zdGFuY2VfaWQiLCJnZXRJbnN0YW5jZVN0YXRlQ29sb3IiLCJjbGEiLCJmaXJzdFRyYWNlIiwibGFzdF9kaXN0cmlidXRlX2Zyb20iLCJkaXNfaW5mbyIsIiRleGlzdHMiLCJjcmVhdGVkIiwiY3JlYXRlZF9ieSIsIlVVZmxvd19hcGkiLCJnZXROYW1lRm9yVXNlciIsInVzZXJzIiwiZnJvbV91c2VyX25hbWUiLCJpc0NDT3JEaXN0cmlidXRlT3JGb3J3YXJkVGVybWluYXRlZCIsImp1ZGdlVGVybWluYXRlZCIsImluc3RhbmNlRXhpc3RzIiwiYWdlbnREZXNjcmlwdGlvbiIsInVzZXJOYW1lIiwidHJhY2VOYW1lIiwidHJhY2VJZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbGxpbmciLCJlcnIiLCJyZW1vdmVDbGFzcyIsInN1Y2Nlc3MiLCJjbG9zZXN0IiwidGFyZ2V0X3VzZXJfaWQiLCJvcGVuU2FmZU9iamVjdFVybCIsImZvcndhcmRfc3BhY2UiLCJmb3J3YXJkc3BhY2UiLCJmb3J3YXJkaW5zdGFuY2UiLCJUcmFja2VyIiwiYWZ0ZXJGbHVzaCIsIm9uIiwic2Nyb2xsVG9wIiwiZmluaXNoX2lucHV0Iiwib3Bpbmlvbl9pbnB1dCIsImFsbG93TXVsdGlwbGUiLCJzaG93UmVsYXRlZEluc3RhY2VzIiwicmVsYXRlZF9pbnN0YWNlcyIsInJlbGF0ZWRfaW5zdGFjZV91cmwiLCJpc0NvcmRvdmEiLCJzaG93X2RlbGV0ZSIsInNob3dSZWxhdGVkUmVjb3JkcyIsIkRlc2lnbmVyQVBJIiwiZ2V0QWJzb2x1dGVVcmwiLCJyb290VXJsIiwiX19tZXRlb3JfcnVudGltZV9jb25maWdfXyIsIlJPT1RfVVJMX1BBVEhfUFJFRklYIiwid3JpdGVSZXNwb25zZSIsImh0dHBDb2RlIiwic3RhdHVzQ29kZSIsInNlbmRJbnZhbGlkVVJMUmVzcG9uc2UiLCJzZW5kQXV0aFRva2VuRXhwaXJlZFJlc3BvbnNlIiwic2VuZEh0bWxSZXNwb25zZSIsInJlcSIsImVycm9yX21zZyIsIkpzb25Sb3V0ZXMiLCJhZGQiLCJuZXh0IiwiZGVhbF90eXBlIiwic3BhY2VJZCIsInNlbmRSZXN1bHQiLCJzcGVjaWZ5VXNlcklkcyIsImdldFVzZXJzIiwiYXBwbGljYW50SWQiLCJhcHByb3ZlUm9sZUlkcyIsImdldFVzZXIiLCJnZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyIsIm9yZ2FuaXphdGlvbnMiLCJhcHByb3ZlSHJSb2xlSWRzIiwiZ2V0SHJSb2xlc1VzZXJzIiwibWFuYWdlciIsInVzZXJGaWVsZCIsInVzZXJGaWVsZFZhbHVlIiwib3JncyIsIm9yZ0NoaWxkcmVucyIsIm9yZ0ZpZWxkIiwib3JnRmllbGRWYWx1ZSIsImdldE9yZ2FuaXphdGlvbnMiLCJnZXRPcmdhbml6YXRpb25zQ2hpbGRyZW5zIiwiZ2V0T3JnYW5pemF0aW9uIiwiZ2V0T3JnYW5pemF0aW9uQ2hpbGRyZW5zIiwiZ2V0T3JnYW5pemF0aW9uc1VzZXJzIiwib3JnRmllbGRVc2VycyIsInNwZWNpZnlPcmdJZHMiLCJzcGVjaWZ5T3JncyIsInNwZWNpZnlPcmdDaGlsZHJlbnMiLCJhcHByb3ZlclJvbGVJZHMiLCJnZXRSb2xlVXNlcnNCeVVzZXJzQW5kUm9sZXMiLCJzdSIsInVzZXJfYWNjZXB0ZWQiLCJ1bmlxVXNlcnMiLCJ1c2VySWRzIiwic3BhY2VVc2VycyIsImdldEZvcm11bGFVc2VyT2JqZWN0IiwiYXV0b0Zvcm1Eb2MiLCJhcHByb3ZlciIsImZvcm11bGFfdmFsdWVzIiwiaW5pdF9mb3JtdWxhX3ZhbHVlcyIsInN0YWNrIiwiZXJyb3JzIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsImNhdGVnb3JpZXMiLCJjb21wYW55SWQiLCJjdXJyZW50X3VzZXIiLCJjdXJyZW50X3VzZXJfaW5mbyIsIm9yZyIsInBvc2l0aW9ucyIsInJvbGVzIiwic3BhY2VJZHMiLCJzcGFjZXMiLCJzcGFjZXNRdWVyeSIsImNoZWNrX2F1dGhvcml6YXRpb24iLCJhZG1pbnMiLCJjb21wYW55X2lkIiwic3BhY2VfdXNlcnMiLCJpc19kZWxldGVkIiwiaXNfdmFsaWQiLCJoZWxwX3RleHQiLCJjYXRlZ29yeSIsIm5hbWVfZm9ybXVsYSIsImNvZGVfZm9ybXVsYSIsImZsb3d0eXBlIiwiY3VycmVudF9ubyIsInBlcm1zIiwiZXJyb3JfbWVzc2FnZSIsImRpc3RyaWJ1dGVfb3B0aW9uYWxfdXNlcnMiLCJmbG93X3JvbGVzIiwiZmxvd19wb3NpdGlvbnMiLCJTcGFjZVVzZXJzIiwiVXNlcnMiLCJGb3JtcyIsIkZsb3dzIiwiT3JnYW5pemF0aW9ucyIsIlBvc2l0aW9ucyIsIlJvbGVzIiwiQ2F0ZWdvcmllcyIsIlNwYWNlcyIsImhhc2hEYXRhIiwiYXBwcm92ZV9mcm9tX2NsaWVudCIsIndvcmtmbG93X2VuZ2luZSIsImluc2VydGVkX2luc3RhbmNlcyIsImluc3RhbmNlX2Zyb21fY2xpZW50IiwibmV3X2lucyIsIm5ld19pbnNfaWQiLCJjcmVhdGVfaW5zdGFuY2UiLCJpbnNlcnRzIiwiY2NfdXNlcnMiLCJkZWxldGVfb2JqIiwiaW5ib3hfdXNlcnMiLCJzcGFjZVVzZXJPcmdhbml6YXRpb25zIiwic3BhY2VfaWQiLCJzcGFjZV91c2VyIiwidXNlcl9pZHMiLCJnZXRTcGFjZSIsImdldFNwYWNlVXNlciIsInN1Ym1pdHRlciIsImNhbkFkbWluIiwiZGVsZXRlZCIsImRlbGV0ZWRfYnkiLCJkZWxldGVkX2luc3RhbmNlcyIsImluc2VydCIsInJlbW92ZSIsInVuaXEiLCJ1X2lkIiwicHVzaE1hbmFnZXIiLCJzZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIiLCJzZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbiIsImN1cnJlbnRfYXBwcm92ZSIsImZsb3dfaWQiLCJyIiwic3VibWl0X2luc3RhbmNlIiwiYWxlcnRzIiwidHJpZ2dlcldlYmhvb2siLCJkaXN0cmlidXRlZEluc3RhbmNlc1JlbWluZCIsImZsb3dfdmVyX2VuZF9zdGVwIiwiZmxvd192ZXJzIiwiaCIsImluc3RhbmNlX2Zsb3dfdmVyIiwiaW5zdGFuY2VfdHJhY2UiLCJuZXdBcHByb3ZlIiwibmV3VHJhY2UiLCJvbGRfY2NfdXNlcnMiLCJvbGRfaW5ib3hfdXNlcnMiLCJvbGRfb3V0Ym94X3VzZXJzIiwic2V0T2JqIiwic3BhY2VfdXNlcl9vcmdfaW5mbyIsInRlbXBVc2VycyIsInRlcm1pbmF0ZV9yZWFzb24iLCJpc0luc3RhbmNlUGVuZGluZyIsImdldFNwYWNlVXNlck9yZ0luZm8iLCJmX3ZlciIsImZfc3RlcCIsInBlcm1pc3Npb25NYW5hZ2VyIiwiZ2V0Rmxvd1Blcm1pc3Npb25zIiwiTW9uZ28iLCJPYmplY3RJRCIsIl9zdHIiLCJ1c2VyX25hbWUiLCJoYW5kbGVyX29yZ2FuaXphdGlvbiIsInN0YXJ0X2RhdGUiLCJkdWVfZGF0ZSIsInJlYWRfZGF0ZSIsImlzX2Vycm9yIiwiY29zdF90aW1lIiwicHJldmlvdXNfdHJhY2VfaWRzIiwib3V0Ym94X3VzZXJzIiwibmZ0X2FwcHJvdmUiLCJtb2RpZmllZCIsIm1vZGlmaWVkX2J5IiwiY3VycmVudF9zdGVwX25hbWUiLCJjdXJyZW50X3N0ZXBfYXV0b19zdWJtaXQiLCJ1cGRhdGUiLCIkc2V0IiwidXNlcl9pZCIsInNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIiLCJfdXNlcnMiLCJhcHByb3ZlX3VzZXJzX2hhbmRsZXJzIiwiYXNzaWduZWVfYXBwciIsImN1cnJlbnRfc3BhY2VfdXNlciIsImN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24iLCJpbmJveF91c2Vyc19mcm9tX2NsaWVudCIsImxhc3RfdHJhY2UiLCJsYXN0X3RyYWNlX2Zyb21fY2xpZW50IiwibmV3X2luYm94X3VzZXJzIiwibm90X2luX2luYm94X3VzZXJzIiwicmVhc3NpZ25fcmVhc29uIiwiZGlmZmVyZW5jZSIsIm9yZ2FuaXphdGlvbiIsImFnZW50IiwiaGFuZGxlcl9pZCIsImhhbmRsZXJfaW5mbyIsIm5ld19hcHByIiwibmV3X3VzZXIiLCJ1c2VyX29yZ2FuaXphdGlvbiIsImdldEFnZW50Iiwic2V0UmVtaW5kSW5mbyIsImFoIiwiYXBwcm92ZV91c2VycyIsImN1cnJlbnRfc2V0cCIsImN1cnJlbnRfc2V0cF90eXBlIiwibmV4dF9zdGVwIiwibmV4dF9zdGVwX25hbWUiLCJuZXh0X3N0ZXBfdHlwZSIsInJlbG9jYXRlX2FwcHIiLCJyZWxvY2F0ZV9jb21tZW50IiwicmVsb2NhdGVfaW5ib3hfdXNlcnMiLCJyZWxvY2F0ZV9uZXh0X3N0ZXAiLCJzYW1lVHJhY2VzIiwic2lnblNob3dBcHByb3ZlSWQiLCJ0YSIsInRpIiwiZ2V0U3RlcCIsImdldFVwZGF0ZWRWYWx1ZXMiLCJnZXREdWVEYXRlIiwidGltZW91dF9ob3VycyIsIm5leHRfc3RlcF91c2VyX2lkIiwiaWR4IiwibmV4dF9zdGVwX3NwYWNlX3VzZXIiLCJuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyIsInVzZXJfaW5mbyIsImdldEN1cnJlbnRTdGVwQXV0b1N1Ym1pdCIsInRpbWVvdXRfYXV0b19zdWJtaXQiLCJsaW5lcyIsIiR1bnNldCIsImlzSW5zdGFuY2VGaW5pc2hlZEFuZE5vdEFyY2hpZXZlZCIsImlzSW5zdGFuY2VTdWJtaXR0ZXJPckFwcGxpY2FudE9yU3BhY2VBZG1pbiIsInN0YXJ0dXAiLCJXZWJBcHAiLCJjb25uZWN0SGFuZGxlcnMiLCJ1c2UiLCJlanMiLCJlanNMaW50IiwiZW5kX2RhdGUiLCJlcnJvcl9vYmoiLCJmaWxlTmFtZSIsImZsb3dfaWRzIiwiZm9ybV9uYW1lIiwiaW5zX3RvX3hscyIsImxhbmciLCJsYXN0X21vbnRoX2RhdGUiLCJyZXQiLCJ0aW1lem9uZW9mZnNldCIsInVpZCIsInBhcnNlSW50IiwiZ2V0TXlBZG1pbk9yTW9uaXRvckZsb3dzIiwiZ2V0TW9udGgiLCJzdWJtaXRfZGF0ZSIsIiRndGUiLCIkbHRlIiwicmVxdWlyZSIsImxpbnQiLCJmb3JtYXRlciIsInNldEhlYWRlciIsImF1dGhfdG9rZW4iLCJmb3JtaWRzIiwiaXNfYWRtaW4iLCJzeW5jX3Rva2VuIiwiZW5hYmxlZCIsImdldF9TcGFjZUNoYW5nZVNldCIsImxhc3RfdHJhY2VfaWQiLCJvcmdfaW5mbyIsInByZXZpb3VzX3N0ZXAiLCJwcmV2aW91c190cmFjZSIsInByZXZpb3VzX3RyYWNlX2FwcHJvdmVzIiwicHJldmlvdXNfdHJhY2VfaWQiLCJwcmV2aW91c190cmFjZV9uYW1lIiwicHJldmlvdXNfdHJhY2Vfc3RlcF9pZCIsInJldHJpZXZlX2FwcHJvdmUiLCJyZXRyaWV2ZV9jb21tZW50IiwicmV0cmlldmVfdHlwZSIsInRoZV90cmFjZSIsInJldHJpZXZlX2FwcHIiLCJhcHByIiwiY3VycmVudF91c2VyX2lkIiwiaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50IiwiaXNGb3J3YXJkQXR0YWNobWVudHMiLCJzZWxlY3RlZFVzZXJzIiwiYWN0aW9uX3R5cGUiLCJyZWxhdGVkIiwiZnJvbV9hcHByb3ZlX2lkIiwiY2hlY2siLCJNYXRjaCIsIk9uZU9mIiwib2xkX3NwYWNlX2lkIiwiZm9yd2FyZF91c2VycyIsIm5vX3Blcm1pc3Npb25fdXNlcl9pZHMiLCJub19wZXJtaXNzaW9uX3VzZXJzX25hbWUiLCJuZXdfaW5zX2lkcyIsImN1cnJlbnRfdHJhY2UiLCJjdXJyZW50X3RyYWNlX2lkIiwiZm9yd2FyZF9hcHByb3ZlcyIsInNldF9vYmoiLCJvbGRfdmFsdWVzIiwibmV3X3ZhbHVlcyIsIm9sZF9mb3JtIiwib2xkX2Zvcm1fdmVyc2lvbiIsIm9sZF9maWVsZHMiLCJjb21tb25fZmllbGRzIiwic2VsZWN0X3RvX2lucHV0X2ZpZWxkcyIsImV4aXN0c19maWVsZCIsInNlbGVjdF9pbnB1dF9maWVsZCIsIm9sZF92Iiwib2xkX211bHRpU2VsZWN0ZWQiLCJuZXdfbXVsdGlTZWxlY3RlZCIsIm9sZF90YWJsZV9yb3dfdmFsdWVzIiwibmV3X3RhYmxlX3Jvd192YWx1ZXMiLCJyZWNvcmRfbmVlZCIsIkZPTkRTSUQiLCJpbnN0YW5jZV9uYW1lIiwibmFtZV9mb3J1bWxhIiwiaXNjcmlwdCIsImNhdGVnb3J5X25hbWUiLCJnZXRDYXRlZ29yeSIsImluc19vYmoiLCJoYW5kbGVyX3NwYWNlX3VzZXIiLCJoYW5kbGVyX29yZ19pbmZvIiwiX21ha2VOZXdJRCIsInN1Ym1pdHRlcl9uYW1lIiwiYXBwbGljYW50X29yZ2FuaXphdGlvbiIsImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZSIsImFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWUiLCJmb3J3YXJkX2Zyb21faW5zdGFuY2UiLCJ0cmFjZV9vYmoiLCJzdGVwX2lkIiwic3RlcF9uYW1lIiwiYXBwcl9vYmoiLCJhdXRvX3JlbWluZCIsImZsb3dfbmFtZSIsImNvbGxlY3Rpb24iLCJpbnN0YW5jZUh0bWwiLCJpbnN0YW5jZUZpbGUiLCJGUyIsIkZpbGUiLCJhdHRhY2hEYXRhIiwiQnVmZmVyIiwiZnJvbSIsInNpemUiLCJvd25lciIsIm93bmVyX25hbWUiLCJmaWxlT2JqIiwibWFpbiIsIm5ld0ZpbGUiLCJjcmVhdGVSZWFkU3RyZWFtIiwib3JpZ2luYWwiLCIkYWRkVG9TZXQiLCIkZWFjaCIsInVwZGF0ZV9yZWFkIiwiZmxvd0lkIiwiaW5zSWQiLCJyZWRpcmVjdFRvIiwicmVkaXJlY3RUb1VybCIsInJlcV9hc3luYyIsInBhcmFtcyIsInN0YXR1cyIsInNlbmQiLCJ3cml0ZUhlYWQiLCJhdHRhY2giLCJsaW1pdCIsIm5vX2xpbWl0X2NvdW50IiwicmVmNSIsInJlc3VsdF9pbnN0YW5jZXMiLCJzcGFjZV9uYW1lcyIsInNwZWNpYWxfdXNlcl9pZCIsInVzZXJpZCIsIndvcmtmbG93X2NhdGVnb3JpZXMiLCJBUElBdXRoZW50aWNhdGlvbkNoZWNrIiwiaGVhZGVycyIsInJlZjYiLCJyZWY3IiwiY29waWVzIiwiQ29va2llcyIsImF1dGhUb2tlbiIsImlzU3BhY2VBZG1pbiIsImlzX3BhaWQiLCJhcHBsaWNhbnRJbmZvIiwiYXBwbGljYW50X2lkIiwiYXBwbGljYW50X3VzZXJuYW1lIiwiaW5zX2lkIiwicGVybV91c2VycyIsIm5leHRfc3RlcF9pZCIsIm5leHRfdXNlcl9pZHMiLCJyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMiLCJpc0luc3RhbmNlRHJhZnQiLCJnZXRGb3JtIiwiY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUiLCJnZXROZXh0U3RlcHMiLCJnZXRIYW5kbGVyc01hbmFnZXIiLCJnZXRIYW5kbGVycyIsInN0ZXBuYW1lIiwiJGVsZW1NYXRjaCIsImluYm94X3VlcnMiLCJhcHByb3ZlX2lkIiwicGFyc2VGaWxlcyIsIm1pbWVUeXBlIiwiaXNfcHJpdmF0ZSIsImxvY2tlZF9ieSIsImxvY2tlZF9ieV9uYW1lIiwiYXR0YWNoX2lkIiwiZmlsZSIsImNvbHVtbnMiLCJmb3J3YXJkX2lucyIsImZvcndhcmRfaW5zX3ZhbHVlcyIsIm9yaWdpbmFsX2lucyIsIm9yaWdpbmFsX2luc19maWVsZHMiLCJvcmlnaW5hbF9pbnNfZm9ybSIsIm9yaWdpbmFsX2luc19pZCIsIm9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyIsInJlZjgiLCJyZWY5Iiwicm93X2RhdGEiLCJzdWJUYWJsZSIsInRhYmxlX2RhdGEiLCJjb2x1bW4iLCJvcmlnaW5hbF9pbnNfZmllbGQiLCJvaCIsImFfdGFibGUiLCJhX3RhYmxlX3ZhbHVlcyIsImNvbHVtbl9saXN0IiwiZF9pbnMiLCJkX2luc19maWVsZHMiLCJkX2luc19mb3JtIiwiZF9pbnNfdmFsdWVzIiwiZF9tYXRjaF9jb2wiLCJkX21hdGNoX2NvbF9maWVsZCIsImRfbWF0Y2hfY29sX2ZpZWxkcyIsImRfc3VidGFibGVfZmllbGRzIiwiZF90YWJsZSIsImRfdGFibGVfdmFsdWVzIiwib19pbnMiLCJvX2luc19maWVsZHMiLCJvX2luc19mb3JtIiwib19pbnNfaWQiLCJvX21hdGNoX2NvbCIsIm9fbWF0Y2hfY29sX2ZpZWxkIiwib19tYXRjaF9jb2xfZmllbGRzIiwib19zdWJ0YWJsZV9maWVsZHMiLCJvX3RhYmxlIiwicmVmMTAiLCJyZWYxMSIsInJlZjEyIiwicmVmMTMiLCJyZWYxNCIsInJlZjE1IiwicmVmMTYiLCJyZWYxNyIsInJlZjE4IiwicmVmMTkiLCJyZWYyMCIsInJlZjIxIiwicmVmMjIiLCJvVGFibGUiLCJkVGFibGUiLCJvTWF0Y2hDb2wiLCJkTWF0Y2hDb2wiLCJyZWZpbGxDb2wiLCJhVGFibGUiLCJvX2luc19maWVsZCIsImRfaW5zX2ZpZWxkIiwiZGgiLCJhX3JvdyIsInJlc3VsdHMiLCJtIiwiY29sIiwiY29scyIsImRfY29sIiwiZF9jb2xfZmllbGRzIiwib19jb2wiLCJvX2NvbF9maWVsZHMiLCJkX3JvdyIsImhhc19vYmoiLCJvX3JvdyIsIm5ld190YWJsZV92YWx1ZXMiLCJzb3J0X2NvbCIsInN1Yl90YWJsZSIsInN1Yl90YWJsZV92YWx1ZXMiLCJzdW1fY29sIiwic3VtQ29sIiwic29ydENvbCIsInNpbmdsZUNvbHMiLCJKc29uU29ydCIsImpzb25BcnIiLCJhc2MiLCJqIiwiamwiLCJ0ZW1wIiwiTnVtYmVyIiwiaXNEZXZlbG9wbWVudCIsImFjdGlvbiIsInRvX3VzZXJzIiwiZ2V0Rm9ybXVsYVVzZXJPYmplY3RzIiwib3JnSWRzIiwiZ2V0Rm9ybXVsYU9yZ09iamVjdHMiLCJtZXRob2RzIiwic2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZSIsInN0ZXBfYXBwcm92ZSIsInN0ZXBzQXBwcm92ZXNPcHRpb25zIiwiX2tleXMxIiwiX2tleXMyIiwic3RlcHNBcHByb3ZlcyIsInN0ZXBBcHByb3ZlcyIsInN0ZXBzQXBwcm92ZU9wdGlvbnMiLCJzZXRfaW5zdGFuY2Vfc2tpcF9zdGVwcyIsIiRwdWxsIiwic2tpcF9zdGVwcyIsIiRwdXNoIiwiZ2V0X2luc3RhbmNlX2RhdGEiLCJmb3JtQ2FjaGVkIiwiZmxvd0NhY2hlZCIsImRyYWZ0X3NhdmVfaW5zdGFuY2UiLCJ0cmFjZV9pZCIsIm5leHRfc3RlcHMiLCJmb3JtX2lkIiwia2V5X3N0ciIsImlzSW5zdGFuY2VTdWJtaXR0ZXIiLCJvcmdfaWQiLCJnZXRJbnN0YW5jZU5hbWUiLCJpbmJveF9zYXZlX2luc3RhbmNlIiwiaXNUcmFjZU5vdEZpbmlzaGVkIiwiaXNBcHByb3ZlTm90RmluaXNoZWQiLCJpc0hhbmRsZXJPckFnZW50IiwicGVybWlzc2lvbnNfdmFsdWVzIiwiZ2V0QXBwcm92ZVZhbHVlcyIsImNoYW5nZV92YWx1ZXMiLCJhcHByb3ZlTWFuYWdlciIsImdldENoYW5nZVZhbHVlcyIsImV4dGVuZCIsInZhbHVlc19oaXN0b3J5IiwiZm9ybV92IiwiY2NfZG8iLCJjY191c2VyX2lkcyIsIm5ld19hcHByb3ZlcyIsImZpbGVkcyIsImNjX3JlYWQiLCJjY19zdWJtaXQiLCJjY0hhc0VkaXRQZXJtaXNzaW9uIiwidGlkeCIsImFpZHgiLCJ1cG9iaiIsInVwZGF0ZWRfdmFsdWVzIiwiY2NfcmVtb3ZlIiwicmVtb3ZlX3VzZXJfaWQiLCJtdWx0aSIsImNjX3NhdmUiLCJjdXJyZW50U3RlcElkIiwidXBkYXRlT2JqIiwicHVzaE9iaiIsImZvcndhcmRfcmVtb3ZlIiwiaGFzQWRtaW5QZXJtaXNzaW9uIiwiZm9yd2FyZF9pbnN0YW5jZV9pZCIsImRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCIsImNhbmNlbERpc3RyaWJ1dGUiLCJhcHByb3ZlX2lkcyIsImV4aXN0cyIsImNmc19pbnN0YW5jZXNfcmVtb3ZlIiwiZmlsZV9pZCIsImNmc19pbnN0YW5jZXNfc2V0X2N1cnJlbnQiLCJjZnNfaW5zdGFuY2VzX2xvY2siLCJjZnNfaW5zdGFuY2VzX3VubG9jayIsImRvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2siLCJjZnNSZWNvcmRJZHMiLCJpc19jbG91ZGFkbWluIiwic3RvcmUiLCJmcyIsIl9fbWV0ZW9yX2Jvb3RzdHJhcF9fIiwic2VydmVyRGlyIiwiYWJzb2x1dGVQYXRoIiwicmVzb2x2ZSIsInN5bmMiLCJ0aW1lIiwiZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMiLCJmaWxlUGF0aCIsIndyYXBBc3luYyIsIndyaXRlciIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiaXNGdW5jdGlvbiIsInJlYWRlciIsInBpcGUiLCJ0aW1lRW5kIiwic2V0X2FwcHJvdmVfaGF2ZV9yZWFkIiwic2VsZiIsImNoYW5nZV9hcHByb3ZlX2luZm8iLCJ1cGRhdGVfYXBwcm92ZV9zaWduIiwic2lnbl90eXBlIiwibGFzdFNpZ25BcHByb3ZlIiwibGFzdFRyYWNlIiwic2Vzc2lvbl91c2VySWQiLCJ1cE9iaiIsImN1c3RvbV9zaWduX3Nob3ciLCJ1cGRhdGVfc2lnbl9zaG93Iiwib2JqcyIsIm15QXBwcm92ZV9pZCIsImluc3RhbmNlX3JldHVybiIsImFwcHJvdmVfdmFsdWVzIiwicHJlX3N0ZXAiLCJwcmVfdHJhY2UiLCJyZXN0X2NvdW50ZXJfdXNlcnMiLCJpbnN0YW5jZV9yZW1pbmQiLCJyZW1pbmRfdXNlcnMiLCJyZW1pbmRfY291bnQiLCJyZW1pbmRfZGVhZGxpbmUiLCJhY3Rpb25fdHlwZXMiLCJsYXN0X3JlbWluZF91c2VycyIsInByaW9yaXR5IiwiYXAiLCJjYWN1bGF0ZV9kYXRlIiwibWFudWFsX2RlYWRsaW5lIiwiY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkiLCJyZW1pbmRfZGF0ZSIsImNhY3VsYXRlV29ya2luZ1RpbWUiLCJiYXNlX2RhdGUiLCJwbHVzX2hhbGZkYXlfZGF0ZSIsInNlbmRSZW1pbmRTTVMiLCJuZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kIiwiYXBwcm92ZXJfcm9sZXMiLCJyb2xlc19uYW1lIiwicm9sZV9uYW1lIiwiX2V2YWwiLCJfTlVNQkVSIiwiX1lZWVkiLCJudW1iZXJSdWxlcyIsInJ1bGVzIiwic2NyaXB0IiwiaW5zdGFuY2VfbnVtYmVyX3J1bGVzIiwibnVtYmVyIiwiWVlZWSIsIk1NIiwibW0iLCJERCIsImdldERhdGUiLCJkZCIsImZpcnN0X251bWJlciIsIk5VTUJFUiIsIm5ld05vIiwiX2Vycm9yIiwiY2hlY2tfbWFpbl9hdHRhY2giLCJjaGVja01haW5BdHRhY2giLCJyZW1vdmVfcmVsYXRlZCIsInJlX2luc19pZCIsInVwZGF0ZV9pbnN0YW5jZV9yZWxhdGVkIiwidXBkYXRlRmxvd1Bvc2l0aW9uIiwicm9sZSIsInVwZGF0ZUZsb3dSb2xlIiwic3RhcnRfZmxvdyIsImtleVZhbHVlIiwic3RhcnRfZmxvd3MiLCJzdGVlZG9zX2tleXZhbHVlcyIsImdldF9pbnN0YW5jZV90cmFjZXMiLCJtaW5pQXBwcm92ZUZpZWxkcyIsImNhdGVnb3J5SWQiLCJmbG93SWRzIiwiX2JhdGNoX2luc3RhbmNlcyIsImdldEJhdGNoSW5zdGFuY2VzIiwibXlBcHByb3ZlcyIsIm15X2FwcHJvdmUiLCJnZXRNeUFwcHJvdmUiLCJjaGFuZ2VfZmxvd19zdGF0ZSIsIl91c2VySWQiLCJfZmxvd3MiLCJfZmxvd3Nfc3RhdGUiLCJmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUiLCJzcGVjaWZ5U3RlcCIsImFwcHJvdmVyX3N0ZXAiLCJfc3RlcCIsImZpZWxkc19tb2RpZmlhYmxlIiwiaGlkZV9pbnN0YW5jZSIsImlzX2hpZGRlbiIsImdldEluc3RhbmNlVmFsdWVzIiwiZ2V0SW5zdGFuY2VSZWFkT25seSIsIl9oYXNQZXJtaXNzaW9uIiwiX2xvY2FsZSIsIl9wYXJlbnRfaW5zdGFuY2VzIiwiZGF0YUJ1ZiIsImhpZGVfdHJhY2VzIiwic3BhY2VVc2VyQ291bnQiLCJnZXRBUElMb2dpblVzZXIiLCJhY2Nlc3NfdG9rZW4iLCJnZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4iLCJoYXNJbnN0YW5jZVBlcm1pc3Npb25zIiwiX3BhcmVudF9pZCIsIl9wYXJlbnRfaW5zIiwiY2hhcnNldCIsInJldF9zeW5jX3Rva2VuIiwic3BhY2VVc2VyIiwiY2FuTW9uaXRvciIsIiRndCIsIiRuaW4iLCJza2lwIiwiYWxsQ3NzIiwiZ2V0UmVmcmVzaGFibGVBc3NldHMiLCJjc3MiLCJST09UX1VSTCIsImVuZHNXaXRoIiwiZyIsImsiLCJnZXRFYWNoIiwibWl4aW4iLCJkZXN0IiwiaGFuZGVyVXNlck9iamVjdCIsImhyIiwic29ydF9ubyIsIm1vYmlsZSIsIndvcmtfcGhvbmUiLCJwb3NpdGlvbiIsInVzZXJSb2xlcyIsImhhbmRlck9yZ09iamVjdCIsIl9fdmFsdWVzIiwidGFibGVGaWVsZHMiLCJ0YWJsZVZhbHVlcyIsImZvcm11bGFUYWJsZVZhbHVlcyIsIl9fdGFibGVWYWx1ZXMiLCJ0YWJsZWZpZWxkIiwiZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMiLCJyb2xlX2lkcyIsImdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMiLCJyb2xlX2lkIiwiZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlIiwiZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUiLCJnZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzIiwib3JnX2lkcyIsImdldEhhbmRsZXJzQnlPcmdBbmRSb2xlcyIsInBhcmVudF9pZCIsIl9hcHByb3ZlIiwiX3NwYWNlX3VzZXIiLCJfdHJhY2UiLCJhcHBsaWNhbnRTdXBlcmlvcnMiLCJhcHByb3Zlcl9vcmdfZmllbGQiLCJhcHByb3Zlcl9vcmdfaWRzIiwiYXBwcm92ZXJfdXNlcl9maWVsZCIsImFwcHJvdmVyX3VzZXJfaWRzIiwiY3VycmVudF9mbG93IiwiY3VycmVudF9mbG93X3ZlcnNpb24iLCJjdXJyZW50X2Zvcm0iLCJjdXJyZW50X3N0ZXBzIiwiZmllbGRfY29kZSIsImZpbmlzaGVkX3RyYWNlcyIsImZsb3dfcmV2IiwiZm9ybV9yZXYiLCJoYW5kbGVycyIsIm1heF9zdGFydERhdGVfdHJhY2UiLCJuZXdfYXBwcm92ZXJfdXNlcl9pZHMiLCJuZXdfb3JnX3VzZXJfaWRzIiwibmV3ZXN0X3ZhbHVlcyIsIm5leHRfc3RlcF91c2VycyIsIm9yZ19pZHNfbmFtZXMiLCJvcmdfdXNlcl9pZHMiLCJzcGFjZV91c2VyX2NvdW50Iiwic3VibWl0dGVyX3VzZXJfY291bnQiLCJ1bmZpbmlzaGVkX3RyYWNlIiwidXNlcl9pZHNfbmFtZXMiLCJ2YWxpZF9hcHByb3Zlcl9vcmdfaWRzIiwiaGlzdG9yeSIsImFwcHJvdmVyX3JvbGUiLCJyb2xlX2NvdW50IiwiYXBwcm92ZXJfaHJfcm9sZXMiLCJjdXJyZW50X2Zsb3dfaGlzdG9yeSIsImZvcm1faGlzdG9yeSIsImZvcm1fZmllbGQiLCJjaGVja19vcmdfY291bnQiLCJjaGVja19vcmdzIiwib3JnX2NoaWxkcmVuIiwib3JnX3VzZXJzIiwiY2hlY2tfb3JnX3VzZXIiLCJvcmdfdXNlciIsImNoZWNrX3VzZXJfY291bnQiLCJhcHByb3ZlX3VzZXIiLCJjaGVja19hcHByb3ZlX3VzZXJfY291bnQiLCJhcHByb3Zlcl9vcmdzIiwiYXBwcm92ZXJfb3JnX2lkIiwidmFsaWRfYXBwcm92ZXJfb3JnX2lkIiwiY2hpbGRfb3JncyIsInZhbGlkX2FwcHJvdmVyX29yZyIsImNoaWxkX29yZyIsIm9yZ191c2VyX2lkIiwic3BhY2VfdXNlcl9pbmZvX2NvdW50IiwiYXBwcm92ZXJfdXNlcnMiLCJhcHByb3Zlcl91c2VyX2lkIiwiX3RyIiwiX2FwcCIsIm15X3Blcm1pc3Npb25zIiwib3Jnc19jYW5fYWRkIiwib3Jnc19jYW5fYWRtaW4iLCJvcmdzX2Nhbl9tb25pdG9yIiwidXNlcnNfY2FuX2FkZCIsInVzZXJzX2Nhbl9hZG1pbiIsInVzZXJzX2Nhbl9tb25pdG9yIiwibGFzdF92YWx1ZXMiLCJhcHByb3ZlX3ZhbHVlc19rZXlzIiwiY2hhbmdlVmFsdWVzIiwibGFzdF92YWx1ZXNfa2V5cyIsImlzRXF1YWwiLCJmbG93TWFuYWdlciIsImdldENhdGVnb3JpZXNGbG93cyIsImNhdGVnb3JpZUlkIiwiY2F0ZWdvcmllc0Zvcm1zIiwiZm9ybU1hbmFnZXIiLCJnZXRDYXRlZ29yaWVzRm9ybXMiLCJnZXRVbkNhdGVnb3JpZXNGbG93cyIsInVuQ2F0ZWdvcmllc0Zvcm1zIiwiZ2V0VW5DYXRlZ29yaWVzRm9ybXMiLCJfZmllbGRzIiwic3RlcE1hbmFnZXIiLCJhbGxvd0JhdGNoIiwiaXNFeGlzdFN0ZXAiLCJsb2dnZXIiLCJMb2dnZXIiLCJoYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwIiwiZmllbGRfbWFwIiwiY3VycmVudEFwcHJvdmVzIiwiY3VycmVudFRyYWNlcyIsImdldEN1cnJlbnRUcmFjZSIsImluYm94X3VzZXIiLCJGSUVMRFMiLCJjYXRlZ29yeUZsb3dzIiwiaW5ib3hfaW5zdGFuY2VzIiwidW5DYXRlZ29yeUZsb3dzIiwiYXBwcm92ZV9zdGFydF9kYXRlIiwicHVibGlzaCIsInJlYWR5IiwiYXBwIiwicHVibGlzaENvbXBvc2l0ZSIsInRhYmxlTmFtZSIsImlkcyIsIk9wdGlvbmFsIiwidW5ibG9jayIsImNoaWxkcmVuIiwiY3JlYXRlVGVtcGxhdGVGb3JtQW5kRmxvdyIsImRpc3RyaWJ1dGVfdG9fc2VsZiIsInZlcnNpb25JZCIsImhhbmRsZSIsImxhdGVzdCIsIm9ic2VydmVDaGFuZ2VzIiwiY2hhbmdlZCIsImFkZGVkIiwib25TdG9wIiwic3RvcCIsImRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbiIsImFsbG93X3NlbGVjdF9zdGVwIiwiZ2V0TWluaUluc3RhbmNlIiwiZ2V0TXlhcHByb3ZlTW9kaWZpZWQiLCJpbnN0YW5jZV9maWVsZHNfMCIsIm5lZWRDaGFuZ2UiLCJ0cmlnZ2VyQ2hhbmdlRmllbGRzIiwidHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcyIsIm15QXBwcm92ZU1vZGlmaWVkcyIsIl9pbnN0YW5jZUlkIiwiY2hhbmdlRmllbGRzIiwiX2NoYW5nZSIsIl9yZXYiLCJfbXlfYXBwcm92ZV9tb2RpZmllZHMiLCJnZXRJbnN0YW5jZVRyYWNlcyIsIl9pbnNJZCIsImFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZSIsImxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGUiLCJpbnN0YW5jZWlkIiwiZGF0YU1hcCIsIm9wZXJhdGlvbiIsInJhd0NvbGxlY3Rpb24iLCJhZ2dyZWdhdGUiLCJ0b0FycmF5IiwiZG9jIiwiZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlIiwiZ2V0U3RlcEN1cnJlbnROYW1lIiwibm90RmluaXNoZWRUcmFjZXMiLCJzdGVwQ3VycmVudE5hbWUiLCIkc2xpY2UiLCJteUxhc3RGaW5pc2hlZEFwcHJvdmUiLCJhZ2VudF91c2VyX25hbWUiLCJteV9maW5pc2hfZGF0ZSIsImlzX2NjIiwiY2NfY291bnQiLCJpbnN0YW5jZV9pZHMiLCJyZWxhdGVkX2luc3RhbmNlX2lkcyIsIl9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlIiwiX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUiLCJfaXRlbXMiLCIkbWF0Y2giLCIkZ3JvdXAiLCIkc3VtIiwiX2NoYW5nZURhdGEiLCJfZmxvd3NEYXRhIiwiX2luaXQiLCJkYXRhSXRlbSIsImZsb3dfaW5zdGFuY2UiLCJvYnNlcnZlIiwiZ2V0Q29sbGVjdGlvbiIsIndvcmtmbG93VGVtcGxhdGUiLCJhYnNvbHV0ZV9wYXRoX2NuIiwiYWJzb2x1dGVfcGF0aF91cyIsImZpbGVzTGlzdF9jbiIsImZpbGVzTGlzdF91cyIsIm1pbWUiLCJwYXRoX2NuIiwicGF0aF91cyIsInJlYWRGaWxlTGlzdCIsInBhdGhEaXIiLCJmaWxlc0xpc3QiLCJyZWFkZGlyU3luYyIsInN0YXQiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5Iiwid29ya2Zsb3dUZW1wbGF0ZXMiLCJleGlzdHNTeW5jIiwicmVhZEZpbGVTeW5jIiwiZ29fbmV4dCIsInJ1bGUiLCJzY2hlZHVsZSIsImNyb24iLCJhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24iLCJzY2hlZHVsZUpvYiIsImJpbmRFbnZpcm9ubWVudCIsInByb2Nlc3NfZGVsZWdhdGlvbl9ydWxlcyIsImVuZF90aW1lIiwidGltZW91dEF1dG9TdWJtaXQiLCJUYWJ1bGFyVGFibGVzIiwicmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhciIsIlRhYnVsYXIiLCJUYWJsZSIsIm9yZGVyYWJsZSIsInJlbmRlciIsImlucHV0Iiwic3RlcF9jdXJyZW50X25hbWUiLCJkb20iLCJsZW5ndGhDaGFuZ2UiLCJleHRyYUZpZWxkcyIsInBhZ2VMZW5ndGgiLCJpbmZvIiwic2VhcmNoaW5nIiwicmVzcG9uc2l2ZSIsImRldGFpbHMiLCJhdXRvV2lkdGgiLCJjaGFuZ2VTZWxlY3RvciIsImN1clNwYWNlVXNlciIsIiRhbmQiLCJmbCIsIkdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zIiwiX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zIiwiX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyIsIl9oYW5kbGVMaXN0RmllbGRzIiwiaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhciIsIm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyIiwidXBkYXRlVGFidWxhclRpdGxlIiwic3VicyIsIlN1YnNNYW5hZ2VyIiwiaW5zX2ZpZWxkcyIsInB1YiIsIm9uVW5sb2FkIiwiaW5zdGFuY2VfbGlzdCIsIl90YWJsZUNvbHVtbnMiLCJkcmF3Q2FsbGJhY2siLCJlbGxpcHNpc0xpbmsiLCJlbXB0eVRkIiwiY29sU3BhbiIsImlzUGFkIiwicGVyZmVjdFNjcm9sbGJhciIsIm9JbnN0YW5jZSIsImF0dHIiLCJjbGljayIsImdvUGFnZSIsImhlaWdodCIsInBhZ2VzIiwiY2VpbCIsImZuUmVjb3Jkc0Rpc3BsYXkiLCJfaURpc3BsYXlMZW5ndGgiLCJEYXRhVGFibGUiLCJwYWdlIiwiZHJhdyIsImJsdXIiLCJjdXJyZW50UGFnZSIsImtleWRvd24iLCJrZXlDb2RlIiwiY3JlYXRlZFJvdyIsInJvdyIsImRhdGFJbmRleCIsIkZsb3dSb3V0ZXIiLCJzZXRBdHRyaWJ1dGUiLCJhZ2VudF92aWV3IiwiY2NfdmlldyIsImluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MiLCJpc0Zhdm9yaXRlU2VsZWN0ZWQiLCJtb2RpZmllZEZyb21Ob3ciLCJtb2RpZmllZFN0cmluZyIsInByaW9yaXR5SWNvbiIsInByaW9yaXR5SWNvbkNsYXNzIiwicHJpb3JpdHlWYWx1ZSIsInN0ZXBfY3VycmVudF9uYW1lX3ZpZXciLCJ1bnJlYWQiLCJtb21lbnRSZWFjdGl2ZUZyb21Ob3ciLCJGYXZvcml0ZXMiLCJpc1JlY29yZFNlbGVjdGVkIiwidmlzaWJsZSIsImNjX3RhZyIsImxlbmd0aE1lbnUiLCJwYWdpbmdUeXBlIiwiaXNfbGlzdF9kaXNwbGF5IiwiZmlsdGVyZWRSZWNvcmRJZHMiLCJvbGRfZmlsdGVyZWRSZWNvcmRJZHMiLCJmaW5kT3B0aW9ucyIsImFnX3NvcnQiLCJhZ2dyZWdhdGVfb3BlcmF0aW9uIiwiYXN5bmNfYWdncmVnYXRlIiwiczFfMCIsInMxXzEiLCIkcHJvamVjdCIsIiR1bndpbmQiLCIkZmlyc3QiLCIkc29ydCIsIiRza2lwIiwiJGxpbWl0IiwiY2IiLCIkbGFzdCIsIm91dGJveF9pbnN0YW5jZXMiLCJmbG93SW5zdGFuY2VzIiwiUmVhY3RpdmVWYXIiLCJfY2hhbmdlT3JkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxnQkFBSjtBQUFxQkMsTUFBTSxDQUFDQyxJQUFQLENBQVksb0NBQVosRUFBaUQ7QUFBQ0Ysa0JBQWdCLENBQUNHLENBQUQsRUFBRztBQUFDSCxvQkFBZ0IsR0FBQ0csQ0FBakI7QUFBbUI7O0FBQXhDLENBQWpELEVBQTJGLENBQTNGO0FBQ3JCSCxnQkFBZ0IsQ0FBQztBQUNoQixtQkFBaUIsUUFERDtBQUVoQkksU0FBTyxFQUFFLFFBRk87QUFHaEIsWUFBVSxTQUhNO0FBSWhCQyxRQUFNLEVBQUU7QUFKUSxDQUFELEVBS2Isa0JBTGEsQ0FBaEIsQzs7Ozs7Ozs7Ozs7QUNEQTs7Ozs7Ozs7Ozs7OztBQWFDLFdBQVVDLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCO0FBQ3pCLGVBRHlCLENBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxNQUFNLENBQUNDLEdBQTNDLEVBQWdEO0FBQy9DO0FBQ0FELFVBQU0sQ0FBQyxDQUFDLFlBQUQsRUFBZSxRQUFmLEVB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R0FBOEYsTUFBOUY7QUFDQSxhQUFPQSxNQUFQO0FBTEQ7QUFBQSxHQUREO0FDaUhBLEMiLCJmaWxlIjoiL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja05wbVZlcnNpb25zIH0gZnJvbSAnbWV0ZW9yL3RtZWFzZGF5OmNoZWNrLW5wbS12ZXJzaW9ucyc7XHJcbmNoZWNrTnBtVmVyc2lvbnMoe1xyXG5cdFwibm9kZS1zY2hlZHVsZVwiOiBcIl4xLjMuMVwiLFxyXG5cdGNvb2tpZXM6IFwiXjAuNi4yXCIsXHJcblx0XCJ4bWwyanNcIjogXCJeMC40LjE5XCIsXHJcblx0bWtkaXJwOiBcIl4wLjMuNVwiLFxyXG59LCAnc3RlZWRvczp3b3JrZmxvdycpOyIsIi8qIVxyXG4gKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzXHJcbiAqXHJcbiAqIFZlcnNpb246IDEuMTcuMFxyXG4gKlxyXG4gKiBBdXRob3I6IFJvZG5leSBSZWhtXHJcbiAqIFdlYjogaHR0cDovL21lZGlhbGl6ZS5naXRodWIuaW8vVVJJLmpzL1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlclxyXG4gKiAgIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcclxuICogICBHUEwgdjMgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0dQTC0zLjBcclxuICpcclxuICovXHJcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcclxuXHQvLyBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcblx0Ly8gICAvLyBOb2RlXHJcblx0Ly8gICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnLi9wdW55Y29kZScpLCByZXF1aXJlKCcuL0lQdjYnKSwgcmVxdWlyZSgnLi9TZWNvbmRMZXZlbERvbWFpbnMnKSk7XHJcblx0Ly8gfSBlbHNlXHJcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxyXG5cdFx0ZGVmaW5lKFsnLi9wdW55Y29kZScsICcuL0lQdjYnLCAnLi9TZWNvbmRMZXZlbERvbWFpbnMnXSwgZmFjdG9yeSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXHJcblx0XHRyb290LlVSSSA9IGZhY3Rvcnkocm9vdC5wdW55Y29kZSwgcm9vdC5JUHY2LCByb290LlNlY29uZExldmVsRG9tYWlucywgcm9vdCk7XHJcblx0fVxyXG59KHRoaXMsIGZ1bmN0aW9uIChwdW55Y29kZSwgSVB2NiwgU0xELCByb290KSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cdC8qZ2xvYmFsIGxvY2F0aW9uLCBlc2NhcGUsIHVuZXNjYXBlICovXHJcblx0Ly8gRklYTUU6IHYyLjAuMCByZW5hbWNlIG5vbi1jYW1lbENhc2UgcHJvcGVydGllcyB0byB1cHBlcmNhc2VcclxuXHQvKmpzaGludCBjYW1lbGNhc2U6IGZhbHNlICovXHJcblxyXG5cdC8vIHNhdmUgY3VycmVudCBVUkkgdmFyaWFibGUsIGlmIGFueVxyXG5cdHZhciBfVVJJID0gcm9vdCAmJiByb290LlVSSTtcclxuXHJcblx0ZnVuY3Rpb24gVVJJKHVybCwgYmFzZSkge1xyXG5cdFx0dmFyIF91cmxTdXBwbGllZCA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMTtcclxuXHRcdHZhciBfYmFzZVN1cHBsaWVkID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xyXG5cclxuXHRcdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxyXG5cdFx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIFVSSSkpIHtcclxuXHRcdFx0aWYgKF91cmxTdXBwbGllZCkge1xyXG5cdFx0XHRcdGlmIChfYmFzZVN1cHBsaWVkKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbmV3IFVSSSh1cmwsIGJhc2UpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIG5ldyBVUkkodXJsKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG5ldyBVUkkoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodXJsID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYgKF91cmxTdXBwbGllZCkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuZGVmaW5lZCBpcyBub3QgYSB2YWxpZCBhcmd1bWVudCBmb3IgVVJJJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0dXJsID0gbG9jYXRpb24uaHJlZiArICcnO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHVybCA9ICcnO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5ocmVmKHVybCk7XHJcblxyXG5cdFx0Ly8gcmVzb2x2ZSB0byBiYXNlIGFjY29yZGluZyB0byBodHRwOi8vZHZjcy53My5vcmcvaGcvdXJsL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sI2NvbnN0cnVjdG9yXHJcblx0XHRpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmFic29sdXRlVG8oYmFzZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRVUkkudmVyc2lvbiA9ICcxLjE3LjAnO1xyXG5cclxuXHR2YXIgcCA9IFVSSS5wcm90b3R5cGU7XHJcblx0dmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcblxyXG5cdGZ1bmN0aW9uIGVzY2FwZVJlZ0V4KHN0cmluZykge1xyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvY29tbWl0Lzg1YWMyMTc4M2MxMWY4Y2NhYjA2MTA2ZGJhOTczNWEzMWE4NjkyNGQjY29tbWl0Y29tbWVudC04MjE5NjNcclxuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFtcXF1cXC9cXFxcXSkvZywgJ1xcXFwkMScpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0VHlwZSh2YWx1ZSkge1xyXG5cdFx0Ly8gSUU4IGRvZXNuJ3QgcmV0dXJuIFtPYmplY3QgVW5kZWZpbmVkXSBidXQgW09iamVjdCBPYmplY3RdIGZvciB1bmRlZmluZWQgdmFsdWVcclxuXHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiAnVW5kZWZpbmVkJztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gU3RyaW5nKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkpLnNsaWNlKDgsIC0xKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XHJcblx0XHRyZXR1cm4gZ2V0VHlwZShvYmopID09PSAnQXJyYXknO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YSwgdmFsdWUpIHtcclxuXHRcdHZhciBsb29rdXAgPSB7fTtcclxuXHRcdHZhciBpLCBsZW5ndGg7XHJcblxyXG5cdFx0aWYgKGdldFR5cGUodmFsdWUpID09PSAnUmVnRXhwJykge1xyXG5cdFx0XHRsb29rdXAgPSBudWxsO1xyXG5cdFx0fSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG5cdFx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGxvb2t1cFt2YWx1ZVtpXV0gPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRsb29rdXBbdmFsdWVdID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdC8qanNoaW50IGxheGJyZWFrOiB0cnVlICovXHJcblx0XHRcdHZhciBfbWF0Y2ggPSBsb29rdXAgJiYgbG9va3VwW2RhdGFbaV1dICE9PSB1bmRlZmluZWRcclxuXHRcdFx0XHR8fCAhbG9va3VwICYmIHZhbHVlLnRlc3QoZGF0YVtpXSk7XHJcblx0XHRcdC8qanNoaW50IGxheGJyZWFrOiBmYWxzZSAqL1xyXG5cdFx0XHRpZiAoX21hdGNoKSB7XHJcblx0XHRcdFx0ZGF0YS5zcGxpY2UoaSwgMSk7XHJcblx0XHRcdFx0bGVuZ3RoLS07XHJcblx0XHRcdFx0aS0tO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlKSB7XHJcblx0XHR2YXIgaSwgbGVuZ3RoO1xyXG5cclxuXHRcdC8vIHZhbHVlIG1heSBiZSBzdHJpbmcsIG51bWJlciwgYXJyYXksIHJlZ2V4cFxyXG5cdFx0aWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcblx0XHRcdC8vIE5vdGU6IHRoaXMgY2FuIGJlIG9wdGltaXplZCB0byBPKG4pIChpbnN0ZWFkIG9mIGN1cnJlbnQgTyhtICogbikpXHJcblx0XHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKCFhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlW2ldKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIF90eXBlID0gZ2V0VHlwZSh2YWx1ZSk7XHJcblx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGlmIChfdHlwZSA9PT0gJ1JlZ0V4cCcpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGxpc3RbaV0gPT09ICdzdHJpbmcnICYmIGxpc3RbaV0ubWF0Y2godmFsdWUpKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAobGlzdFtpXSA9PT0gdmFsdWUpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGFycmF5c0VxdWFsKG9uZSwgdHdvKSB7XHJcblx0XHRpZiAoIWlzQXJyYXkob25lKSB8fCAhaXNBcnJheSh0d28pKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBhcnJheXMgY2FuJ3QgYmUgZXF1YWwgaWYgdGhleSBoYXZlIGRpZmZlcmVudCBhbW91bnQgb2YgY29udGVudFxyXG5cdFx0aWYgKG9uZS5sZW5ndGggIT09IHR3by5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdG9uZS5zb3J0KCk7XHJcblx0XHR0d28uc29ydCgpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gb25lLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdFx0XHRpZiAob25lW2ldICE9PSB0d29baV0pIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHRyaW1TbGFzaGVzKHRleHQpIHtcclxuXHRcdHZhciB0cmltX2V4cHJlc3Npb24gPSAvXlxcLyt8XFwvKyQvZztcclxuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UodHJpbV9leHByZXNzaW9uLCAnJyk7XHJcblx0fVxyXG5cclxuXHRVUkkuX3BhcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRwcm90b2NvbDogbnVsbCxcclxuXHRcdFx0dXNlcm5hbWU6IG51bGwsXHJcblx0XHRcdHBhc3N3b3JkOiBudWxsLFxyXG5cdFx0XHRob3N0bmFtZTogbnVsbCxcclxuXHRcdFx0dXJuOiBudWxsLFxyXG5cdFx0XHRwb3J0OiBudWxsLFxyXG5cdFx0XHRwYXRoOiBudWxsLFxyXG5cdFx0XHRxdWVyeTogbnVsbCxcclxuXHRcdFx0ZnJhZ21lbnQ6IG51bGwsXHJcblx0XHRcdC8vIHN0YXRlXHJcblx0XHRcdGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVyczogVVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyxcclxuXHRcdFx0ZXNjYXBlUXVlcnlTcGFjZTogVVJJLmVzY2FwZVF1ZXJ5U3BhY2VcclxuXHRcdH07XHJcblx0fTtcclxuXHQvLyBzdGF0ZTogYWxsb3cgZHVwbGljYXRlIHF1ZXJ5IHBhcmFtZXRlcnMgKGE9MSZhPTEpXHJcblx0VVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9IGZhbHNlO1xyXG5cdC8vIHN0YXRlOiByZXBsYWNlcyArIHdpdGggJTIwIChzcGFjZSBpbiBxdWVyeSBzdHJpbmdzKVxyXG5cdFVSSS5lc2NhcGVRdWVyeVNwYWNlID0gdHJ1ZTtcclxuXHQvLyBzdGF0aWMgcHJvcGVydGllc1xyXG5cdFVSSS5wcm90b2NvbF9leHByZXNzaW9uID0gL15bYS16XVthLXowLTkuKy1dKiQvaTtcclxuXHRVUkkuaWRuX2V4cHJlc3Npb24gPSAvW15hLXowLTlcXC4tXS9pO1xyXG5cdFVSSS5wdW55Y29kZV9leHByZXNzaW9uID0gLyh4bi0tKS9pO1xyXG5cdC8vIHdlbGwsIDMzMy40NDQuNTU1LjY2NiBtYXRjaGVzLCBidXQgaXQgc3VyZSBhaW4ndCBubyBJUHY0IC0gZG8gd2UgY2FyZT9cclxuXHRVUkkuaXA0X2V4cHJlc3Npb24gPSAvXlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9JC87XHJcblx0Ly8gY3JlZGl0cyB0byBSaWNoIEJyb3duXHJcblx0Ly8gc291cmNlOiBodHRwOi8vZm9ydW1zLmludGVybWFwcGVyLmNvbS92aWV3dG9waWMucGhwP3A9MTA5NiMxMDk2XHJcblx0Ly8gc3BlY2lmaWNhdGlvbjogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDI5MS50eHRcclxuXHRVUkkuaXA2X2V4cHJlc3Npb24gPSAvXlxccyooKChbMC05QS1GYS1mXXsxLDR9Oil7N30oWzAtOUEtRmEtZl17MSw0fXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Nn0oOlswLTlBLUZhLWZdezEsNH18KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs1fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDJ9KXw6KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs0fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDN9KXwoKDpbMC05QS1GYS1mXXsxLDR9KT86KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7M30oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw0fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwyfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsyfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDV9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDN9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezF9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNn0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNH06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KDooKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw3fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw1fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKSkoJS4rKT9cXHMqJC87XHJcblx0Ly8gZXhwcmVzc2lvbiB1c2VkIGlzIFwiZ3J1YmVyIHJldmlzZWRcIiAoQGdydWJlciB2MikgZGV0ZXJtaW5lZCB0byBiZSB0aGVcclxuXHQvLyBiZXN0IHNvbHV0aW9uIGluIGEgcmVnZXgtZ29sZiB3ZSBkaWQgYSBjb3VwbGUgb2YgYWdlcyBhZ28gYXRcclxuXHQvLyAqIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL2RlbW8vdXJsLXJlZ2V4XHJcblx0Ly8gKiBodHRwOi8vcm9kbmV5cmVobS5kZS90L3VybC1yZWdleC5odG1sXHJcblx0VVJJLmZpbmRfdXJpX2V4cHJlc3Npb24gPSAvXFxiKCg/OlthLXpdW1xcdy1dKzooPzpcXC97MSwzfXxbYS16MC05JV0pfHd3d1xcZHswLDN9Wy5dfFthLXowLTkuXFwtXStbLl1bYS16XXsyLDR9XFwvKSg/OlteXFxzKCk8Pl0rfFxcKChbXlxccygpPD5dK3woXFwoW15cXHMoKTw+XStcXCkpKSpcXCkpKyg/OlxcKChbXlxccygpPD5dK3woXFwoW15cXHMoKTw+XStcXCkpKSpcXCl8W15cXHNgISgpXFxbXFxde307OidcIi4sPD4/wqvCu+KAnOKAneKAmOKAmV0pKS9pZztcclxuXHRVUkkuZmluZFVyaSA9IHtcclxuXHRcdC8vIHZhbGlkIFwic2NoZW1lOi8vXCIgb3IgXCJ3d3cuXCJcclxuXHRcdHN0YXJ0OiAvXFxiKD86KFthLXpdW2EtejAtOS4rLV0qOlxcL1xcLyl8d3d3XFwuKS9naSxcclxuXHRcdC8vIGV2ZXJ5dGhpbmcgdXAgdG8gdGhlIG5leHQgd2hpdGVzcGFjZVxyXG5cdFx0ZW5kOiAvW1xcc1xcclxcbl18JC8sXHJcblx0XHQvLyB0cmltIHRyYWlsaW5nIHB1bmN0dWF0aW9uIGNhcHR1cmVkIGJ5IGVuZCBSZWdFeHBcclxuXHRcdHRyaW06IC9bYCEoKVxcW1xcXXt9OzonXCIuLDw+P8KrwrvigJzigJ3igJ7igJjigJldKyQvXHJcblx0fTtcclxuXHQvLyBodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzLmh0bWxcclxuXHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfVENQX2FuZF9VRFBfcG9ydF9udW1iZXJzI1dlbGwta25vd25fcG9ydHNcclxuXHRVUkkuZGVmYXVsdFBvcnRzID0ge1xyXG5cdFx0aHR0cDogJzgwJyxcclxuXHRcdGh0dHBzOiAnNDQzJyxcclxuXHRcdGZ0cDogJzIxJyxcclxuXHRcdGdvcGhlcjogJzcwJyxcclxuXHRcdHdzOiAnODAnLFxyXG5cdFx0d3NzOiAnNDQzJ1xyXG5cdH07XHJcblx0Ly8gYWxsb3dlZCBob3N0bmFtZSBjaGFyYWN0ZXJzIGFjY29yZGluZyB0byBSRkMgMzk4NlxyXG5cdC8vIEFMUEhBIERJR0lUIFwiLVwiIFwiLlwiIFwiX1wiIFwiflwiIFwiIVwiIFwiJFwiIFwiJlwiIFwiJ1wiIFwiKFwiIFwiKVwiIFwiKlwiIFwiK1wiIFwiLFwiIFwiO1wiIFwiPVwiICVlbmNvZGVkXHJcblx0Ly8gSSd2ZSBuZXZlciBzZWVuIGEgKG5vbi1JRE4pIGhvc3RuYW1lIG90aGVyIHRoYW46IEFMUEhBIERJR0lUIC4gLVxyXG5cdFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMgPSAvW15hLXpBLVowLTlcXC4tXS87XHJcblx0Ly8gbWFwIERPTSBFbGVtZW50cyB0byB0aGVpciBVUkkgYXR0cmlidXRlXHJcblx0VVJJLmRvbUF0dHJpYnV0ZXMgPSB7XHJcblx0XHQnYSc6ICdocmVmJyxcclxuXHRcdCdibG9ja3F1b3RlJzogJ2NpdGUnLFxyXG5cdFx0J2xpbmsnOiAnaHJlZicsXHJcblx0XHQnYmFzZSc6ICdocmVmJyxcclxuXHRcdCdzY3JpcHQnOiAnc3JjJyxcclxuXHRcdCdmb3JtJzogJ2FjdGlvbicsXHJcblx0XHQnaW1nJzogJ3NyYycsXHJcblx0XHQnYXJlYSc6ICdocmVmJyxcclxuXHRcdCdpZnJhbWUnOiAnc3JjJyxcclxuXHRcdCdlbWJlZCc6ICdzcmMnLFxyXG5cdFx0J3NvdXJjZSc6ICdzcmMnLFxyXG5cdFx0J3RyYWNrJzogJ3NyYycsXHJcblx0XHQnaW5wdXQnOiAnc3JjJywgLy8gYnV0IG9ubHkgaWYgdHlwZT1cImltYWdlXCJcclxuXHRcdCdhdWRpbyc6ICdzcmMnLFxyXG5cdFx0J3ZpZGVvJzogJ3NyYydcclxuXHR9O1xyXG5cdFVSSS5nZXREb21BdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlKSB7XHJcblx0XHRpZiAoIW5vZGUgfHwgIW5vZGUubm9kZU5hbWUpIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHQvLyA8aW5wdXQ+IHNob3VsZCBvbmx5IGV4cG9zZSBzcmMgZm9yIHR5cGU9XCJpbWFnZVwiXHJcblx0XHRpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgbm9kZS50eXBlICE9PSAnaW1hZ2UnKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIFVSSS5kb21BdHRyaWJ1dGVzW25vZGVOYW1lXTtcclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBlc2NhcGVGb3JEdW1iRmlyZWZveDM2KHZhbHVlKSB7XHJcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvOTFcclxuXHRcdHJldHVybiBlc2NhcGUodmFsdWUpO1xyXG5cdH1cclxuXHJcblx0Ly8gZW5jb2RpbmcgLyBkZWNvZGluZyBhY2NvcmRpbmcgdG8gUkZDMzk4NlxyXG5cdGZ1bmN0aW9uIHN0cmljdEVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpIHtcclxuXHRcdC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2VuY29kZVVSSUNvbXBvbmVudFxyXG5cdFx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpXHJcblx0XHRcdC5yZXBsYWNlKC9bIScoKSpdL2csIGVzY2FwZUZvckR1bWJGaXJlZm94MzYpXHJcblx0XHRcdC5yZXBsYWNlKC9cXCovZywgJyUyQScpO1xyXG5cdH1cclxuXHRVUkkuZW5jb2RlID0gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50O1xyXG5cdFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XHJcblx0VVJJLmlzbzg4NTkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFVSSS5lbmNvZGUgPSBlc2NhcGU7XHJcblx0XHRVUkkuZGVjb2RlID0gdW5lc2NhcGU7XHJcblx0fTtcclxuXHRVUkkudW5pY29kZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0VVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcclxuXHRcdFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XHJcblx0fTtcclxuXHRVUkkuY2hhcmFjdGVycyA9IHtcclxuXHRcdHBhdGhuYW1lOiB7XHJcblx0XHRcdGVuY29kZToge1xyXG5cdFx0XHRcdC8vIFJGQzM5ODYgMi4xOiBGb3IgY29uc2lzdGVuY3ksIFVSSSBwcm9kdWNlcnMgYW5kIG5vcm1hbGl6ZXJzIHNob3VsZFxyXG5cdFx0XHRcdC8vIHVzZSB1cHBlcmNhc2UgaGV4YWRlY2ltYWwgZGlnaXRzIGZvciBhbGwgcGVyY2VudC1lbmNvZGluZ3MuXHJcblx0XHRcdFx0ZXhwcmVzc2lvbjogLyUoMjR8MjZ8MkJ8MkN8M0J8M0R8M0F8NDApL2lnLFxyXG5cdFx0XHRcdG1hcDoge1xyXG5cdFx0XHRcdFx0Ly8gLS5ffiEnKCkqXHJcblx0XHRcdFx0XHQnJTI0JzogJyQnLFxyXG5cdFx0XHRcdFx0JyUyNic6ICcmJyxcclxuXHRcdFx0XHRcdCclMkInOiAnKycsXHJcblx0XHRcdFx0XHQnJTJDJzogJywnLFxyXG5cdFx0XHRcdFx0JyUzQic6ICc7JyxcclxuXHRcdFx0XHRcdCclM0QnOiAnPScsXHJcblx0XHRcdFx0XHQnJTNBJzogJzonLFxyXG5cdFx0XHRcdFx0JyU0MCc6ICdAJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVjb2RlOiB7XHJcblx0XHRcdFx0ZXhwcmVzc2lvbjogL1tcXC9cXD8jXS9nLFxyXG5cdFx0XHRcdG1hcDoge1xyXG5cdFx0XHRcdFx0Jy8nOiAnJTJGJyxcclxuXHRcdFx0XHRcdCc/JzogJyUzRicsXHJcblx0XHRcdFx0XHQnIyc6ICclMjMnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0cmVzZXJ2ZWQ6IHtcclxuXHRcdFx0ZW5jb2RlOiB7XHJcblx0XHRcdFx0Ly8gUkZDMzk4NiAyLjE6IEZvciBjb25zaXN0ZW5jeSwgVVJJIHByb2R1Y2VycyBhbmQgbm9ybWFsaXplcnMgc2hvdWxkXHJcblx0XHRcdFx0Ly8gdXNlIHVwcGVyY2FzZSBoZXhhZGVjaW1hbCBkaWdpdHMgZm9yIGFsbCBwZXJjZW50LWVuY29kaW5ncy5cclxuXHRcdFx0XHRleHByZXNzaW9uOiAvJSgyMXwyM3wyNHwyNnwyN3wyOHwyOXwyQXwyQnwyQ3wyRnwzQXwzQnwzRHwzRnw0MHw1Qnw1RCkvaWcsXHJcblx0XHRcdFx0bWFwOiB7XHJcblx0XHRcdFx0XHQvLyBnZW4tZGVsaW1zXHJcblx0XHRcdFx0XHQnJTNBJzogJzonLFxyXG5cdFx0XHRcdFx0JyUyRic6ICcvJyxcclxuXHRcdFx0XHRcdCclM0YnOiAnPycsXHJcblx0XHRcdFx0XHQnJTIzJzogJyMnLFxyXG5cdFx0XHRcdFx0JyU1Qic6ICdbJyxcclxuXHRcdFx0XHRcdCclNUQnOiAnXScsXHJcblx0XHRcdFx0XHQnJTQwJzogJ0AnLFxyXG5cdFx0XHRcdFx0Ly8gc3ViLWRlbGltc1xyXG5cdFx0XHRcdFx0JyUyMSc6ICchJyxcclxuXHRcdFx0XHRcdCclMjQnOiAnJCcsXHJcblx0XHRcdFx0XHQnJTI2JzogJyYnLFxyXG5cdFx0XHRcdFx0JyUyNyc6ICdcXCcnLFxyXG5cdFx0XHRcdFx0JyUyOCc6ICcoJyxcclxuXHRcdFx0XHRcdCclMjknOiAnKScsXHJcblx0XHRcdFx0XHQnJTJBJzogJyonLFxyXG5cdFx0XHRcdFx0JyUyQic6ICcrJyxcclxuXHRcdFx0XHRcdCclMkMnOiAnLCcsXHJcblx0XHRcdFx0XHQnJTNCJzogJzsnLFxyXG5cdFx0XHRcdFx0JyUzRCc6ICc9J1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdHVybnBhdGg6IHtcclxuXHRcdFx0Ly8gVGhlIGNoYXJhY3RlcnMgdW5kZXIgYGVuY29kZWAgYXJlIHRoZSBjaGFyYWN0ZXJzIGNhbGxlZCBvdXQgYnkgUkZDIDIxNDEgYXMgYmVpbmcgYWNjZXB0YWJsZVxyXG5cdFx0XHQvLyBmb3IgdXNhZ2UgaW4gYSBVUk4uIFJGQzIxNDEgYWxzbyBjYWxscyBvdXQgXCItXCIsIFwiLlwiLCBhbmQgXCJfXCIgYXMgYWNjZXB0YWJsZSBjaGFyYWN0ZXJzLCBidXRcclxuXHRcdFx0Ly8gdGhlc2UgYXJlbid0IGVuY29kZWQgYnkgZW5jb2RlVVJJQ29tcG9uZW50LCBzbyB3ZSBkb24ndCBoYXZlIHRvIGNhbGwgdGhlbSBvdXQgaGVyZS4gQWxzb1xyXG5cdFx0XHQvLyBub3RlIHRoYXQgdGhlIGNvbG9uIGNoYXJhY3RlciBpcyBub3QgZmVhdHVyZWQgaW4gdGhlIGVuY29kaW5nIG1hcDsgdGhpcyBpcyBiZWNhdXNlIFVSSS5qc1xyXG5cdFx0XHQvLyBnaXZlcyB0aGUgY29sb25zIGluIFVSTnMgc2VtYW50aWMgbWVhbmluZyBhcyB0aGUgZGVsaW1pdGVycyBvZiBwYXRoIHNlZ2VtZW50cywgYW5kIHNvIGl0XHJcblx0XHRcdC8vIHNob3VsZCBub3QgYXBwZWFyIHVuZW5jb2RlZCBpbiBhIHNlZ21lbnQgaXRzZWxmLlxyXG5cdFx0XHQvLyBTZWUgYWxzbyB0aGUgbm90ZSBhYm92ZSBhYm91dCBSRkMzOTg2IGFuZCBjYXBpdGFsYWxpemVkIGhleCBkaWdpdHMuXHJcblx0XHRcdGVuY29kZToge1xyXG5cdFx0XHRcdGV4cHJlc3Npb246IC8lKDIxfDI0fDI3fDI4fDI5fDJBfDJCfDJDfDNCfDNEfDQwKS9pZyxcclxuXHRcdFx0XHRtYXA6IHtcclxuXHRcdFx0XHRcdCclMjEnOiAnIScsXHJcblx0XHRcdFx0XHQnJTI0JzogJyQnLFxyXG5cdFx0XHRcdFx0JyUyNyc6ICdcXCcnLFxyXG5cdFx0XHRcdFx0JyUyOCc6ICcoJyxcclxuXHRcdFx0XHRcdCclMjknOiAnKScsXHJcblx0XHRcdFx0XHQnJTJBJzogJyonLFxyXG5cdFx0XHRcdFx0JyUyQic6ICcrJyxcclxuXHRcdFx0XHRcdCclMkMnOiAnLCcsXHJcblx0XHRcdFx0XHQnJTNCJzogJzsnLFxyXG5cdFx0XHRcdFx0JyUzRCc6ICc9JyxcclxuXHRcdFx0XHRcdCclNDAnOiAnQCdcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIFRoZXNlIGNoYXJhY3RlcnMgYXJlIHRoZSBjaGFyYWN0ZXJzIGNhbGxlZCBvdXQgYnkgUkZDMjE0MSBhcyBcInJlc2VydmVkXCIgY2hhcmFjdGVycyB0aGF0XHJcblx0XHRcdC8vIHNob3VsZCBuZXZlciBhcHBlYXIgaW4gYSBVUk4sIHBsdXMgdGhlIGNvbG9uIGNoYXJhY3RlciAoc2VlIG5vdGUgYWJvdmUpLlxyXG5cdFx0XHRkZWNvZGU6IHtcclxuXHRcdFx0XHRleHByZXNzaW9uOiAvW1xcL1xcPyM6XS9nLFxyXG5cdFx0XHRcdG1hcDoge1xyXG5cdFx0XHRcdFx0Jy8nOiAnJTJGJyxcclxuXHRcdFx0XHRcdCc/JzogJyUzRicsXHJcblx0XHRcdFx0XHQnIyc6ICclMjMnLFxyXG5cdFx0XHRcdFx0JzonOiAnJTNBJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0VVJJLmVuY29kZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XHJcblx0XHR2YXIgZXNjYXBlZCA9IFVSSS5lbmNvZGUoc3RyaW5nICsgJycpO1xyXG5cdFx0aWYgKGVzY2FwZVF1ZXJ5U3BhY2UgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRlc2NhcGVRdWVyeVNwYWNlID0gVVJJLmVzY2FwZVF1ZXJ5U3BhY2U7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGVzY2FwZVF1ZXJ5U3BhY2UgPyBlc2NhcGVkLnJlcGxhY2UoLyUyMC9nLCAnKycpIDogZXNjYXBlZDtcclxuXHR9O1xyXG5cdFVSSS5kZWNvZGVRdWVyeSA9IGZ1bmN0aW9uKHN0cmluZywgZXNjYXBlUXVlcnlTcGFjZSkge1xyXG5cdFx0c3RyaW5nICs9ICcnO1xyXG5cdFx0aWYgKGVzY2FwZVF1ZXJ5U3BhY2UgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRlc2NhcGVRdWVyeVNwYWNlID0gVVJJLmVzY2FwZVF1ZXJ5U3BhY2U7XHJcblx0XHR9XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIFVSSS5kZWNvZGUoZXNjYXBlUXVlcnlTcGFjZSA/IHN0cmluZy5yZXBsYWNlKC9cXCsvZywgJyUyMCcpIDogc3RyaW5nKTtcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHQvLyB3ZSdyZSBub3QgZ29pbmcgdG8gbWVzcyB3aXRoIHdlaXJkIGVuY29kaW5ncyxcclxuXHRcdFx0Ly8gZ2l2ZSB1cCBhbmQgcmV0dXJuIHRoZSB1bmRlY29kZWQgb3JpZ2luYWwgc3RyaW5nXHJcblx0XHRcdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvODdcclxuXHRcdFx0Ly8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy85MlxyXG5cdFx0XHRyZXR1cm4gc3RyaW5nO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0Ly8gZ2VuZXJhdGUgZW5jb2RlL2RlY29kZSBwYXRoIGZ1bmN0aW9uc1xyXG5cdHZhciBfcGFydHMgPSB7J2VuY29kZSc6J2VuY29kZScsICdkZWNvZGUnOidkZWNvZGUnfTtcclxuXHR2YXIgX3BhcnQ7XHJcblx0dmFyIGdlbmVyYXRlQWNjZXNzb3IgPSBmdW5jdGlvbihfZ3JvdXAsIF9wYXJ0KSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0cmV0dXJuIFVSSVtfcGFydF0oc3RyaW5nICsgJycpLnJlcGxhY2UoVVJJLmNoYXJhY3RlcnNbX2dyb3VwXVtfcGFydF0uZXhwcmVzc2lvbiwgZnVuY3Rpb24oYykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFVSSS5jaGFyYWN0ZXJzW19ncm91cF1bX3BhcnRdLm1hcFtjXTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdC8vIHdlJ3JlIG5vdCBnb2luZyB0byBtZXNzIHdpdGggd2VpcmQgZW5jb2RpbmdzLFxyXG5cdFx0XHRcdC8vIGdpdmUgdXAgYW5kIHJldHVybiB0aGUgdW5kZWNvZGVkIG9yaWdpbmFsIHN0cmluZ1xyXG5cdFx0XHRcdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvODdcclxuXHRcdFx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzkyXHJcblx0XHRcdFx0cmV0dXJuIHN0cmluZztcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHRmb3IgKF9wYXJ0IGluIF9wYXJ0cykge1xyXG5cdFx0VVJJW19wYXJ0ICsgJ1BhdGhTZWdtZW50J10gPSBnZW5lcmF0ZUFjY2Vzc29yKCdwYXRobmFtZScsIF9wYXJ0c1tfcGFydF0pO1xyXG5cdFx0VVJJW19wYXJ0ICsgJ1VyblBhdGhTZWdtZW50J10gPSBnZW5lcmF0ZUFjY2Vzc29yKCd1cm5wYXRoJywgX3BhcnRzW19wYXJ0XSk7XHJcblx0fVxyXG5cclxuXHR2YXIgZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24gPSBmdW5jdGlvbihfc2VwLCBfY29kaW5nRnVuY05hbWUsIF9pbm5lckNvZGluZ0Z1bmNOYW1lKSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XHJcblx0XHRcdC8vIFdoeSBwYXNzIGluIG5hbWVzIG9mIGZ1bmN0aW9ucywgcmF0aGVyIHRoYW4gdGhlIGZ1bmN0aW9uIG9iamVjdHMgdGhlbXNlbHZlcz8gVGhlXHJcblx0XHRcdC8vIGRlZmluaXRpb25zIG9mIHNvbWUgZnVuY3Rpb25zIChidXQgaW4gcGFydGljdWxhciwgVVJJLmRlY29kZSkgd2lsbCBvY2Nhc2lvbmFsbHkgY2hhbmdlIGR1ZVxyXG5cdFx0XHQvLyB0byBVUkkuanMgaGF2aW5nIElTTzg4NTkgYW5kIFVuaWNvZGUgbW9kZXMuIFBhc3NpbmcgaW4gdGhlIG5hbWUgYW5kIGdldHRpbmcgaXQgd2lsbCBlbnN1cmVcclxuXHRcdFx0Ly8gdGhhdCB0aGUgZnVuY3Rpb25zIHdlIHVzZSBoZXJlIGFyZSBcImZyZXNoXCIuXHJcblx0XHRcdHZhciBhY3R1YWxDb2RpbmdGdW5jO1xyXG5cdFx0XHRpZiAoIV9pbm5lckNvZGluZ0Z1bmNOYW1lKSB7XHJcblx0XHRcdFx0YWN0dWFsQ29kaW5nRnVuYyA9IFVSSVtfY29kaW5nRnVuY05hbWVdO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFjdHVhbENvZGluZ0Z1bmMgPSBmdW5jdGlvbihzdHJpbmcpIHtcclxuXHRcdFx0XHRcdHJldHVybiBVUklbX2NvZGluZ0Z1bmNOYW1lXShVUklbX2lubmVyQ29kaW5nRnVuY05hbWVdKHN0cmluZykpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBzZWdtZW50cyA9IChzdHJpbmcgKyAnJykuc3BsaXQoX3NlcCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRzZWdtZW50c1tpXSA9IGFjdHVhbENvZGluZ0Z1bmMoc2VnbWVudHNbaV0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gc2VnbWVudHMuam9pbihfc2VwKTtcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0Ly8gVGhpcyB0YWtlcyBwbGFjZSBvdXRzaWRlIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCwgZS5nLiwgZW5jb2RlVXJuUGF0aCBmdW5jdGlvbnMuXHJcblx0VVJJLmRlY29kZVBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignLycsICdkZWNvZGVQYXRoU2VnbWVudCcpO1xyXG5cdFVSSS5kZWNvZGVVcm5QYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oJzonLCAnZGVjb2RlVXJuUGF0aFNlZ21lbnQnKTtcclxuXHRVUkkucmVjb2RlUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCcvJywgJ2VuY29kZVBhdGhTZWdtZW50JywgJ2RlY29kZScpO1xyXG5cdFVSSS5yZWNvZGVVcm5QYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oJzonLCAnZW5jb2RlVXJuUGF0aFNlZ21lbnQnLCAnZGVjb2RlJyk7XHJcblxyXG5cdFVSSS5lbmNvZGVSZXNlcnZlZCA9IGdlbmVyYXRlQWNjZXNzb3IoJ3Jlc2VydmVkJywgJ2VuY29kZScpO1xyXG5cclxuXHRVUkkucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XHJcblx0XHR2YXIgcG9zO1xyXG5cdFx0aWYgKCFwYXJ0cykge1xyXG5cdFx0XHRwYXJ0cyA9IHt9O1xyXG5cdFx0fVxyXG5cdFx0Ly8gW3Byb3RvY29sXCI6Ly9cIlt1c2VybmFtZVtcIjpcInBhc3N3b3JkXVwiQFwiXWhvc3RuYW1lW1wiOlwicG9ydF1cIi9cIj9dW3BhdGhdW1wiP1wicXVlcnlzdHJpbmddW1wiI1wiZnJhZ21lbnRdXHJcblxyXG5cdFx0Ly8gZXh0cmFjdCBmcmFnbWVudFxyXG5cdFx0cG9zID0gc3RyaW5nLmluZGV4T2YoJyMnKTtcclxuXHRcdGlmIChwb3MgPiAtMSkge1xyXG5cdFx0XHQvLyBlc2NhcGluZz9cclxuXHRcdFx0cGFydHMuZnJhZ21lbnQgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpIHx8IG51bGw7XHJcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBleHRyYWN0IHF1ZXJ5XHJcblx0XHRwb3MgPSBzdHJpbmcuaW5kZXhPZignPycpO1xyXG5cdFx0aWYgKHBvcyA+IC0xKSB7XHJcblx0XHRcdC8vIGVzY2FwaW5nP1xyXG5cdFx0XHRwYXJ0cy5xdWVyeSA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSkgfHwgbnVsbDtcclxuXHRcdFx0c3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGV4dHJhY3QgcHJvdG9jb2xcclxuXHRcdGlmIChzdHJpbmcuc3Vic3RyaW5nKDAsIDIpID09PSAnLy8nKSB7XHJcblx0XHRcdC8vIHJlbGF0aXZlLXNjaGVtZVxyXG5cdFx0XHRwYXJ0cy5wcm90b2NvbCA9IG51bGw7XHJcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMik7XHJcblx0XHRcdC8vIGV4dHJhY3QgXCJ1c2VyOnBhc3NAaG9zdDpwb3J0XCJcclxuXHRcdFx0c3RyaW5nID0gVVJJLnBhcnNlQXV0aG9yaXR5KHN0cmluZywgcGFydHMpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cG9zID0gc3RyaW5nLmluZGV4T2YoJzonKTtcclxuXHRcdFx0aWYgKHBvcyA+IC0xKSB7XHJcblx0XHRcdFx0cGFydHMucHJvdG9jb2wgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykgfHwgbnVsbDtcclxuXHRcdFx0XHRpZiAocGFydHMucHJvdG9jb2wgJiYgIXBhcnRzLnByb3RvY29sLm1hdGNoKFVSSS5wcm90b2NvbF9leHByZXNzaW9uKSkge1xyXG5cdFx0XHRcdFx0Ly8gOiBtYXkgYmUgd2l0aGluIHRoZSBwYXRoXHJcblx0XHRcdFx0XHRwYXJ0cy5wcm90b2NvbCA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSwgcG9zICsgMykgPT09ICcvLycpIHtcclxuXHRcdFx0XHRcdHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMyk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gZXh0cmFjdCBcInVzZXI6cGFzc0Bob3N0OnBvcnRcIlxyXG5cdFx0XHRcdFx0c3RyaW5nID0gVVJJLnBhcnNlQXV0aG9yaXR5KHN0cmluZywgcGFydHMpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpO1xyXG5cdFx0XHRcdFx0cGFydHMudXJuID0gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyB3aGF0J3MgbGVmdCBtdXN0IGJlIHRoZSBwYXRoXHJcblx0XHRwYXJ0cy5wYXRoID0gc3RyaW5nO1xyXG5cclxuXHRcdC8vIGFuZCB3ZSdyZSBkb25lXHJcblx0XHRyZXR1cm4gcGFydHM7XHJcblx0fTtcclxuXHRVUkkucGFyc2VIb3N0ID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xyXG5cdFx0Ly8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXHJcblx0XHQvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcclxuXHRcdC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2Jsb2IvMzg2ZmQyNGY0OWIwZTlkMWE4YTA3NjU5MmE0MDQxNjhmYWVlY2MzNC9saWIvdXJsLmpzI0wxMTUtTDEyNFxyXG5cdFx0Ly8gU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTZcclxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL3B1bGwvMjMzXHJcblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xyXG5cclxuXHRcdC8vIGV4dHJhY3QgaG9zdDpwb3J0XHJcblx0XHR2YXIgcG9zID0gc3RyaW5nLmluZGV4T2YoJy8nKTtcclxuXHRcdHZhciBicmFja2V0UG9zO1xyXG5cdFx0dmFyIHQ7XHJcblxyXG5cdFx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdFx0cG9zID0gc3RyaW5nLmxlbmd0aDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc3RyaW5nLmNoYXJBdCgwKSA9PT0gJ1snKSB7XHJcblx0XHRcdC8vIElQdjYgaG9zdCAtIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtNm1hbi10ZXh0LWFkZHItcmVwcmVzZW50YXRpb24tMDQjc2VjdGlvbi02XHJcblx0XHRcdC8vIEkgY2xhaW0gbW9zdCBjbGllbnQgc29mdHdhcmUgYnJlYWtzIG9uIElQdjYgYW55d2F5cy4gVG8gc2ltcGxpZnkgdGhpbmdzLCBVUkkgb25seSBhY2NlcHRzXHJcblx0XHRcdC8vIElQdjYrcG9ydCBpbiB0aGUgZm9ybWF0IFsyMDAxOmRiODo6MV06ODAgKGZvciB0aGUgdGltZSBiZWluZylcclxuXHRcdFx0YnJhY2tldFBvcyA9IHN0cmluZy5pbmRleE9mKCddJyk7XHJcblx0XHRcdHBhcnRzLmhvc3RuYW1lID0gc3RyaW5nLnN1YnN0cmluZygxLCBicmFja2V0UG9zKSB8fCBudWxsO1xyXG5cdFx0XHRwYXJ0cy5wb3J0ID0gc3RyaW5nLnN1YnN0cmluZyhicmFja2V0UG9zICsgMiwgcG9zKSB8fCBudWxsO1xyXG5cdFx0XHRpZiAocGFydHMucG9ydCA9PT0gJy8nKSB7XHJcblx0XHRcdFx0cGFydHMucG9ydCA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBmaXJzdENvbG9uID0gc3RyaW5nLmluZGV4T2YoJzonKTtcclxuXHRcdFx0dmFyIGZpcnN0U2xhc2ggPSBzdHJpbmcuaW5kZXhPZignLycpO1xyXG5cdFx0XHR2YXIgbmV4dENvbG9uID0gc3RyaW5nLmluZGV4T2YoJzonLCBmaXJzdENvbG9uICsgMSk7XHJcblx0XHRcdGlmIChuZXh0Q29sb24gIT09IC0xICYmIChmaXJzdFNsYXNoID09PSAtMSB8fCBuZXh0Q29sb24gPCBmaXJzdFNsYXNoKSkge1xyXG5cdFx0XHRcdC8vIElQdjYgaG9zdCBjb250YWlucyBtdWx0aXBsZSBjb2xvbnMgLSBidXQgbm8gcG9ydFxyXG5cdFx0XHRcdC8vIHRoaXMgbm90YXRpb24gaXMgYWN0dWFsbHkgbm90IGFsbG93ZWQgYnkgUkZDIDM5ODYsIGJ1dCB3ZSdyZSBhIGxpYmVyYWwgcGFyc2VyXHJcblx0XHRcdFx0cGFydHMuaG9zdG5hbWUgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykgfHwgbnVsbDtcclxuXHRcdFx0XHRwYXJ0cy5wb3J0ID0gbnVsbDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0ID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpLnNwbGl0KCc6Jyk7XHJcblx0XHRcdFx0cGFydHMuaG9zdG5hbWUgPSB0WzBdIHx8IG51bGw7XHJcblx0XHRcdFx0cGFydHMucG9ydCA9IHRbMV0gfHwgbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChwYXJ0cy5ob3N0bmFtZSAmJiBzdHJpbmcuc3Vic3RyaW5nKHBvcykuY2hhckF0KDApICE9PSAnLycpIHtcclxuXHRcdFx0cG9zKys7XHJcblx0XHRcdHN0cmluZyA9ICcvJyArIHN0cmluZztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gc3RyaW5nLnN1YnN0cmluZyhwb3MpIHx8ICcvJztcclxuXHR9O1xyXG5cdFVSSS5wYXJzZUF1dGhvcml0eSA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcclxuXHRcdHN0cmluZyA9IFVSSS5wYXJzZVVzZXJpbmZvKHN0cmluZywgcGFydHMpO1xyXG5cdFx0cmV0dXJuIFVSSS5wYXJzZUhvc3Qoc3RyaW5nLCBwYXJ0cyk7XHJcblx0fTtcclxuXHRVUkkucGFyc2VVc2VyaW5mbyA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcclxuXHRcdC8vIGV4dHJhY3QgdXNlcm5hbWU6cGFzc3dvcmRcclxuXHRcdHZhciBmaXJzdFNsYXNoID0gc3RyaW5nLmluZGV4T2YoJy8nKTtcclxuXHRcdHZhciBwb3MgPSBzdHJpbmcubGFzdEluZGV4T2YoJ0AnLCBmaXJzdFNsYXNoID4gLTEgPyBmaXJzdFNsYXNoIDogc3RyaW5nLmxlbmd0aCAtIDEpO1xyXG5cdFx0dmFyIHQ7XHJcblxyXG5cdFx0Ly8gYXV0aG9yaXR5QCBtdXN0IGNvbWUgYmVmb3JlIC9wYXRoXHJcblx0XHRpZiAocG9zID4gLTEgJiYgKGZpcnN0U2xhc2ggPT09IC0xIHx8IHBvcyA8IGZpcnN0U2xhc2gpKSB7XHJcblx0XHRcdHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoJzonKTtcclxuXHRcdFx0cGFydHMudXNlcm5hbWUgPSB0WzBdID8gVVJJLmRlY29kZSh0WzBdKSA6IG51bGw7XHJcblx0XHRcdHQuc2hpZnQoKTtcclxuXHRcdFx0cGFydHMucGFzc3dvcmQgPSB0WzBdID8gVVJJLmRlY29kZSh0LmpvaW4oJzonKSkgOiBudWxsO1xyXG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cGFydHMudXNlcm5hbWUgPSBudWxsO1xyXG5cdFx0XHRwYXJ0cy5wYXNzd29yZCA9IG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHN0cmluZztcclxuXHR9O1xyXG5cdFVSSS5wYXJzZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XHJcblx0XHRpZiAoIXN0cmluZykge1xyXG5cdFx0XHRyZXR1cm4ge307XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gdGhyb3cgb3V0IHRoZSBmdW5reSBidXNpbmVzcyAtIFwiP1wiW25hbWVcIj1cInZhbHVlXCImXCJdK1xyXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoLyYrL2csICcmJykucmVwbGFjZSgvXlxcPyomKnwmKyQvZywgJycpO1xyXG5cclxuXHRcdGlmICghc3RyaW5nKSB7XHJcblx0XHRcdHJldHVybiB7fTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaXRlbXMgPSB7fTtcclxuXHRcdHZhciBzcGxpdHMgPSBzdHJpbmcuc3BsaXQoJyYnKTtcclxuXHRcdHZhciBsZW5ndGggPSBzcGxpdHMubGVuZ3RoO1xyXG5cdFx0dmFyIHYsIG5hbWUsIHZhbHVlO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0diA9IHNwbGl0c1tpXS5zcGxpdCgnPScpO1xyXG5cdFx0XHRuYW1lID0gVVJJLmRlY29kZVF1ZXJ5KHYuc2hpZnQoKSwgZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRcdC8vIG5vIFwiPVwiIGlzIG51bGwgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjY29sbGVjdC11cmwtcGFyYW1ldGVyc1xyXG5cdFx0XHR2YWx1ZSA9IHYubGVuZ3RoID8gVVJJLmRlY29kZVF1ZXJ5KHYuam9pbignPScpLCBlc2NhcGVRdWVyeVNwYWNlKSA6IG51bGw7XHJcblxyXG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoaXRlbXMsIG5hbWUpKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtc1tuYW1lXSA9PT0gJ3N0cmluZycgfHwgaXRlbXNbbmFtZV0gPT09IG51bGwpIHtcclxuXHRcdFx0XHRcdGl0ZW1zW25hbWVdID0gW2l0ZW1zW25hbWVdXTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGl0ZW1zW25hbWVdLnB1c2godmFsdWUpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGl0ZW1zW25hbWVdID0gdmFsdWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaXRlbXM7XHJcblx0fTtcclxuXHJcblx0VVJJLmJ1aWxkID0gZnVuY3Rpb24ocGFydHMpIHtcclxuXHRcdHZhciB0ID0gJyc7XHJcblxyXG5cdFx0aWYgKHBhcnRzLnByb3RvY29sKSB7XHJcblx0XHRcdHQgKz0gcGFydHMucHJvdG9jb2wgKyAnOic7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFwYXJ0cy51cm4gJiYgKHQgfHwgcGFydHMuaG9zdG5hbWUpKSB7XHJcblx0XHRcdHQgKz0gJy8vJztcclxuXHRcdH1cclxuXHJcblx0XHR0ICs9IChVUkkuYnVpbGRBdXRob3JpdHkocGFydHMpIHx8ICcnKTtcclxuXHJcblx0XHRpZiAodHlwZW9mIHBhcnRzLnBhdGggPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdGlmIChwYXJ0cy5wYXRoLmNoYXJBdCgwKSAhPT0gJy8nICYmIHR5cGVvZiBwYXJ0cy5ob3N0bmFtZSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHR0ICs9ICcvJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dCArPSBwYXJ0cy5wYXRoO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0eXBlb2YgcGFydHMucXVlcnkgPT09ICdzdHJpbmcnICYmIHBhcnRzLnF1ZXJ5KSB7XHJcblx0XHRcdHQgKz0gJz8nICsgcGFydHMucXVlcnk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBwYXJ0cy5mcmFnbWVudCA9PT0gJ3N0cmluZycgJiYgcGFydHMuZnJhZ21lbnQpIHtcclxuXHRcdFx0dCArPSAnIycgKyBwYXJ0cy5mcmFnbWVudDtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0O1xyXG5cdH07XHJcblx0VVJJLmJ1aWxkSG9zdCA9IGZ1bmN0aW9uKHBhcnRzKSB7XHJcblx0XHR2YXIgdCA9ICcnO1xyXG5cclxuXHRcdGlmICghcGFydHMuaG9zdG5hbWUpIHtcclxuXHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0fSBlbHNlIGlmIChVUkkuaXA2X2V4cHJlc3Npb24udGVzdChwYXJ0cy5ob3N0bmFtZSkpIHtcclxuXHRcdFx0dCArPSAnWycgKyBwYXJ0cy5ob3N0bmFtZSArICddJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHQgKz0gcGFydHMuaG9zdG5hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHBhcnRzLnBvcnQpIHtcclxuXHRcdFx0dCArPSAnOicgKyBwYXJ0cy5wb3J0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0O1xyXG5cdH07XHJcblx0VVJJLmJ1aWxkQXV0aG9yaXR5ID0gZnVuY3Rpb24ocGFydHMpIHtcclxuXHRcdHJldHVybiBVUkkuYnVpbGRVc2VyaW5mbyhwYXJ0cykgKyBVUkkuYnVpbGRIb3N0KHBhcnRzKTtcclxuXHR9O1xyXG5cdFVSSS5idWlsZFVzZXJpbmZvID0gZnVuY3Rpb24ocGFydHMpIHtcclxuXHRcdHZhciB0ID0gJyc7XHJcblxyXG5cdFx0aWYgKHBhcnRzLnVzZXJuYW1lKSB7XHJcblx0XHRcdHQgKz0gVVJJLmVuY29kZShwYXJ0cy51c2VybmFtZSk7XHJcblxyXG5cdFx0XHRpZiAocGFydHMucGFzc3dvcmQpIHtcclxuXHRcdFx0XHR0ICs9ICc6JyArIFVSSS5lbmNvZGUocGFydHMucGFzc3dvcmQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0ICs9ICdAJztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdDtcclxuXHR9O1xyXG5cdFVSSS5idWlsZFF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCBlc2NhcGVRdWVyeVNwYWNlKSB7XHJcblx0XHQvLyBhY2NvcmRpbmcgdG8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiBvciBodHRwOi8vbGFicy5hcGFjaGUub3JnL3dlYmFyY2gvdXJpL3JmYy9yZmMzOTg2Lmh0bWxcclxuXHRcdC8vIGJlaW5nIMK7LS5ffiEkJicoKSorLDs9OkAvP8KrICVIRVggYW5kIGFsbnVtIGFyZSBhbGxvd2VkXHJcblx0XHQvLyB0aGUgUkZDIGV4cGxpY2l0bHkgc3RhdGVzID8vZm9vIGJlaW5nIGEgdmFsaWQgdXNlIGNhc2UsIG5vIG1lbnRpb24gb2YgcGFyYW1ldGVyIHN5bnRheCFcclxuXHRcdC8vIFVSSS5qcyB0cmVhdHMgdGhlIHF1ZXJ5IHN0cmluZyBhcyBiZWluZyBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcclxuXHRcdC8vIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwL2ludGVyYWN0L2Zvcm1zLmh0bWwjZm9ybS1jb250ZW50LXR5cGVcclxuXHJcblx0XHR2YXIgdCA9ICcnO1xyXG5cdFx0dmFyIHVuaXF1ZSwga2V5LCBpLCBsZW5ndGg7XHJcblx0XHRmb3IgKGtleSBpbiBkYXRhKSB7XHJcblx0XHRcdGlmIChoYXNPd24uY2FsbChkYXRhLCBrZXkpICYmIGtleSkge1xyXG5cdFx0XHRcdGlmIChpc0FycmF5KGRhdGFba2V5XSkpIHtcclxuXHRcdFx0XHRcdHVuaXF1ZSA9IHt9O1xyXG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gZGF0YVtrZXldLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRcdGlmIChkYXRhW2tleV1baV0gIT09IHVuZGVmaW5lZCAmJiB1bmlxdWVbZGF0YVtrZXldW2ldICsgJyddID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdFx0XHR0ICs9ICcmJyArIFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyKGtleSwgZGF0YVtrZXldW2ldLCBlc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzICE9PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVbZGF0YVtrZXldW2ldICsgJyddID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHR0ICs9ICcmJyArIFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyKGtleSwgZGF0YVtrZXldLCBlc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdC5zdWJzdHJpbmcoMSk7XHJcblx0fTtcclxuXHRVUkkuYnVpbGRRdWVyeVBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSB7XHJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwL2ludGVyYWN0L2Zvcm1zLmh0bWwjZm9ybS1jb250ZW50LXR5cGUgLS0gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXHJcblx0XHQvLyBkb24ndCBhcHBlbmQgXCI9XCIgZm9yIG51bGwgdmFsdWVzLCBhY2NvcmRpbmcgdG8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3VybC9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCN1cmwtcGFyYW1ldGVyLXNlcmlhbGl6YXRpb25cclxuXHRcdHJldHVybiBVUkkuZW5jb2RlUXVlcnkobmFtZSwgZXNjYXBlUXVlcnlTcGFjZSkgKyAodmFsdWUgIT09IG51bGwgPyAnPScgKyBVUkkuZW5jb2RlUXVlcnkodmFsdWUsIGVzY2FwZVF1ZXJ5U3BhY2UpIDogJycpO1xyXG5cdH07XHJcblxyXG5cdFVSSS5hZGRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlKSB7XHJcblx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBuYW1lKSB7XHJcblx0XHRcdFx0aWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHtcclxuXHRcdFx0XHRcdFVSSS5hZGRRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRpZiAoZGF0YVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0ZGF0YVtuYW1lXSA9IHZhbHVlO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgZGF0YVtuYW1lXSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHRkYXRhW25hbWVdID0gW2RhdGFbbmFtZV1dO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIWlzQXJyYXkodmFsdWUpKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBbdmFsdWVdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRkYXRhW25hbWVdID0gKGRhdGFbbmFtZV0gfHwgW10pLmNvbmNhdCh2YWx1ZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuYWRkUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0VVJJLnJlbW92ZVF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgbmFtZSwgdmFsdWUpIHtcclxuXHRcdHZhciBpLCBsZW5ndGgsIGtleTtcclxuXHJcblx0XHRpZiAoaXNBcnJheShuYW1lKSkge1xyXG5cdFx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSBuYW1lLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0ZGF0YVtuYW1lW2ldXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChnZXRUeXBlKG5hbWUpID09PSAnUmVnRXhwJykge1xyXG5cdFx0XHRmb3IgKGtleSBpbiBkYXRhKSB7XHJcblx0XHRcdFx0aWYgKG5hbWUudGVzdChrZXkpKSB7XHJcblx0XHRcdFx0XHRkYXRhW2tleV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRmb3IgKGtleSBpbiBuYW1lKSB7XHJcblx0XHRcdFx0aWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHtcclxuXHRcdFx0XHRcdFVSSS5yZW1vdmVRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdGlmIChnZXRUeXBlKHZhbHVlKSA9PT0gJ1JlZ0V4cCcpIHtcclxuXHRcdFx0XHRcdGlmICghaXNBcnJheShkYXRhW25hbWVdKSAmJiB2YWx1ZS50ZXN0KGRhdGFbbmFtZV0pKSB7XHJcblx0XHRcdFx0XHRcdGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRkYXRhW25hbWVdID0gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YVtuYW1lXSwgdmFsdWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YVtuYW1lXSA9PT0gU3RyaW5nKHZhbHVlKSAmJiAoIWlzQXJyYXkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA9PT0gMSkpIHtcclxuXHRcdFx0XHRcdGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChpc0FycmF5KGRhdGFbbmFtZV0pKSB7XHJcblx0XHRcdFx0XHRkYXRhW25hbWVdID0gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YVtuYW1lXSwgdmFsdWUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkYXRhW25hbWVdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkucmVtb3ZlUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nLCBSZWdFeHAgYXMgdGhlIGZpcnN0IHBhcmFtZXRlcicpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0VVJJLmhhc1F1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgbmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KSB7XHJcblx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBuYW1lKSB7XHJcblx0XHRcdFx0aWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHtcclxuXHRcdFx0XHRcdGlmICghVVJJLmhhc1F1ZXJ5KGRhdGEsIGtleSwgbmFtZVtrZXldKSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5oYXNRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0c3dpdGNoIChnZXRUeXBlKHZhbHVlKSkge1xyXG5cdFx0XHRjYXNlICdVbmRlZmluZWQnOlxyXG5cdFx0XHRcdC8vIHRydWUgaWYgZXhpc3RzIChidXQgbWF5IGJlIGVtcHR5KVxyXG5cdFx0XHRcdHJldHVybiBuYW1lIGluIGRhdGE7IC8vIGRhdGFbbmFtZV0gIT09IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdGNhc2UgJ0Jvb2xlYW4nOlxyXG5cdFx0XHRcdC8vIHRydWUgaWYgZXhpc3RzIGFuZCBub24tZW1wdHlcclxuXHRcdFx0XHR2YXIgX2Jvb2x5ID0gQm9vbGVhbihpc0FycmF5KGRhdGFbbmFtZV0pID8gZGF0YVtuYW1lXS5sZW5ndGggOiBkYXRhW25hbWVdKTtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IF9ib29seTtcclxuXHJcblx0XHRcdGNhc2UgJ0Z1bmN0aW9uJzpcclxuXHRcdFx0XHQvLyBhbGxvdyBjb21wbGV4IGNvbXBhcmlzb25cclxuXHRcdFx0XHRyZXR1cm4gISF2YWx1ZShkYXRhW25hbWVdLCBuYW1lLCBkYXRhKTtcclxuXHJcblx0XHRcdGNhc2UgJ0FycmF5JzpcclxuXHRcdFx0XHRpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBvcCA9IHdpdGhpbkFycmF5ID8gYXJyYXlDb250YWlucyA6IGFycmF5c0VxdWFsO1xyXG5cdFx0XHRcdHJldHVybiBvcChkYXRhW25hbWVdLCB2YWx1ZSk7XHJcblxyXG5cdFx0XHRjYXNlICdSZWdFeHAnOlxyXG5cdFx0XHRcdGlmICghaXNBcnJheShkYXRhW25hbWVdKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIEJvb2xlYW4oZGF0YVtuYW1lXSAmJiBkYXRhW25hbWVdLm1hdGNoKHZhbHVlKSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIXdpdGhpbkFycmF5KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gYXJyYXlDb250YWlucyhkYXRhW25hbWVdLCB2YWx1ZSk7XHJcblxyXG5cdFx0XHRjYXNlICdOdW1iZXInOlxyXG5cdFx0XHRcdHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xyXG5cdFx0XHRjYXNlICdTdHJpbmcnOlxyXG5cdFx0XHRcdGlmICghaXNBcnJheShkYXRhW25hbWVdKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRhdGFbbmFtZV0gPT09IHZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCF3aXRoaW5BcnJheSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGFycmF5Q29udGFpbnMoZGF0YVtuYW1lXSwgdmFsdWUpO1xyXG5cclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuaGFzUXVlcnkoKSBhY2NlcHRzIHVuZGVmaW5lZCwgYm9vbGVhbiwgc3RyaW5nLCBudW1iZXIsIFJlZ0V4cCwgRnVuY3Rpb24gYXMgdGhlIHZhbHVlIHBhcmFtZXRlcicpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cclxuXHRVUkkuY29tbW9uUGF0aCA9IGZ1bmN0aW9uKG9uZSwgdHdvKSB7XHJcblx0XHR2YXIgbGVuZ3RoID0gTWF0aC5taW4ob25lLmxlbmd0aCwgdHdvLmxlbmd0aCk7XHJcblx0XHR2YXIgcG9zO1xyXG5cclxuXHRcdC8vIGZpbmQgZmlyc3Qgbm9uLW1hdGNoaW5nIGNoYXJhY3RlclxyXG5cdFx0Zm9yIChwb3MgPSAwOyBwb3MgPCBsZW5ndGg7IHBvcysrKSB7XHJcblx0XHRcdGlmIChvbmUuY2hhckF0KHBvcykgIT09IHR3by5jaGFyQXQocG9zKSkge1xyXG5cdFx0XHRcdHBvcy0tO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHBvcyA8IDEpIHtcclxuXHRcdFx0cmV0dXJuIG9uZS5jaGFyQXQoMCkgPT09IHR3by5jaGFyQXQoMCkgJiYgb25lLmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJyc7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcmV2ZXJ0IHRvIGxhc3QgL1xyXG5cdFx0aWYgKG9uZS5jaGFyQXQocG9zKSAhPT0gJy8nIHx8IHR3by5jaGFyQXQocG9zKSAhPT0gJy8nKSB7XHJcblx0XHRcdHBvcyA9IG9uZS5zdWJzdHJpbmcoMCwgcG9zKS5sYXN0SW5kZXhPZignLycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvbmUuc3Vic3RyaW5nKDAsIHBvcyArIDEpO1xyXG5cdH07XHJcblxyXG5cdFVSSS53aXRoaW5TdHJpbmcgPSBmdW5jdGlvbihzdHJpbmcsIGNhbGxiYWNrLCBvcHRpb25zKSB7XHJcblx0XHRvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xyXG5cdFx0dmFyIF9zdGFydCA9IG9wdGlvbnMuc3RhcnQgfHwgVVJJLmZpbmRVcmkuc3RhcnQ7XHJcblx0XHR2YXIgX2VuZCA9IG9wdGlvbnMuZW5kIHx8IFVSSS5maW5kVXJpLmVuZDtcclxuXHRcdHZhciBfdHJpbSA9IG9wdGlvbnMudHJpbSB8fCBVUkkuZmluZFVyaS50cmltO1xyXG5cdFx0dmFyIF9hdHRyaWJ1dGVPcGVuID0gL1thLXowLTktXT1bXCInXT8kL2k7XHJcblxyXG5cdFx0X3N0YXJ0Lmxhc3RJbmRleCA9IDA7XHJcblx0XHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0XHR2YXIgbWF0Y2ggPSBfc3RhcnQuZXhlYyhzdHJpbmcpO1xyXG5cdFx0XHRpZiAoIW1hdGNoKSB7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBzdGFydCA9IG1hdGNoLmluZGV4O1xyXG5cdFx0XHRpZiAob3B0aW9ucy5pZ25vcmVIdG1sKSB7XHJcblx0XHRcdFx0Ly8gYXR0cmlidXQoZT1bXCInXT8kKVxyXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVPcGVuID0gc3RyaW5nLnNsaWNlKE1hdGgubWF4KHN0YXJ0IC0gMywgMCksIHN0YXJ0KTtcclxuXHRcdFx0XHRpZiAoYXR0cmlidXRlT3BlbiAmJiBfYXR0cmlidXRlT3Blbi50ZXN0KGF0dHJpYnV0ZU9wZW4pKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBlbmQgPSBzdGFydCArIHN0cmluZy5zbGljZShzdGFydCkuc2VhcmNoKF9lbmQpO1xyXG5cdFx0XHR2YXIgc2xpY2UgPSBzdHJpbmcuc2xpY2Uoc3RhcnQsIGVuZCkucmVwbGFjZShfdHJpbSwgJycpO1xyXG5cdFx0XHRpZiAob3B0aW9ucy5pZ25vcmUgJiYgb3B0aW9ucy5pZ25vcmUudGVzdChzbGljZSkpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZW5kID0gc3RhcnQgKyBzbGljZS5sZW5ndGg7XHJcblx0XHRcdHZhciByZXN1bHQgPSBjYWxsYmFjayhzbGljZSwgc3RhcnQsIGVuZCwgc3RyaW5nKTtcclxuXHRcdFx0c3RyaW5nID0gc3RyaW5nLnNsaWNlKDAsIHN0YXJ0KSArIHJlc3VsdCArIHN0cmluZy5zbGljZShlbmQpO1xyXG5cdFx0XHRfc3RhcnQubGFzdEluZGV4ID0gc3RhcnQgKyByZXN1bHQubGVuZ3RoO1xyXG5cdFx0fVxyXG5cclxuXHRcdF9zdGFydC5sYXN0SW5kZXggPSAwO1xyXG5cdFx0cmV0dXJuIHN0cmluZztcclxuXHR9O1xyXG5cclxuXHRVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSA9IGZ1bmN0aW9uKHYpIHtcclxuXHRcdC8vIFRoZW9yZXRpY2FsbHkgVVJJcyBhbGxvdyBwZXJjZW50LWVuY29kaW5nIGluIEhvc3RuYW1lcyAoYWNjb3JkaW5nIHRvIFJGQyAzOTg2KVxyXG5cdFx0Ly8gdGhleSBhcmUgbm90IHBhcnQgb2YgRE5TIGFuZCB0aGVyZWZvcmUgaWdub3JlZCBieSBVUkkuanNcclxuXHJcblx0XHRpZiAodi5tYXRjaChVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzKSkge1xyXG5cdFx0XHQvLyB0ZXN0IHB1bnljb2RlXHJcblx0XHRcdGlmICghcHVueWNvZGUpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dIGFuZCBQdW55Y29kZS5qcyBpcyBub3QgYXZhaWxhYmxlJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChwdW55Y29kZS50b0FTQ0lJKHYpLm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXScpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly8gbm9Db25mbGljdFxyXG5cdFVSSS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24ocmVtb3ZlQWxsKSB7XHJcblx0XHRpZiAocmVtb3ZlQWxsKSB7XHJcblx0XHRcdHZhciB1bmNvbmZsaWN0ZWQgPSB7XHJcblx0XHRcdFx0VVJJOiB0aGlzLm5vQ29uZmxpY3QoKVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aWYgKHJvb3QuVVJJVGVtcGxhdGUgJiYgdHlwZW9mIHJvb3QuVVJJVGVtcGxhdGUubm9Db25mbGljdCA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdHVuY29uZmxpY3RlZC5VUklUZW1wbGF0ZSA9IHJvb3QuVVJJVGVtcGxhdGUubm9Db25mbGljdCgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAocm9vdC5JUHY2ICYmIHR5cGVvZiByb290LklQdjYubm9Db25mbGljdCA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdHVuY29uZmxpY3RlZC5JUHY2ID0gcm9vdC5JUHY2Lm5vQ29uZmxpY3QoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zICYmIHR5cGVvZiByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0dW5jb25mbGljdGVkLlNlY29uZExldmVsRG9tYWlucyA9IHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zLm5vQ29uZmxpY3QoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHVuY29uZmxpY3RlZDtcclxuXHRcdH0gZWxzZSBpZiAocm9vdC5VUkkgPT09IHRoaXMpIHtcclxuXHRcdFx0cm9vdC5VUkkgPSBfVVJJO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblxyXG5cdHAuYnVpbGQgPSBmdW5jdGlvbihkZWZlckJ1aWxkKSB7XHJcblx0XHRpZiAoZGVmZXJCdWlsZCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHR0aGlzLl9kZWZlcnJlZF9idWlsZCA9IHRydWU7XHJcblx0XHR9IGVsc2UgaWYgKGRlZmVyQnVpbGQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9kZWZlcnJlZF9idWlsZCkge1xyXG5cdFx0XHR0aGlzLl9zdHJpbmcgPSBVUkkuYnVpbGQodGhpcy5fcGFydHMpO1xyXG5cdFx0XHR0aGlzLl9kZWZlcnJlZF9idWlsZCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblxyXG5cdHAuY2xvbmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBuZXcgVVJJKHRoaXMpO1xyXG5cdH07XHJcblxyXG5cdHAudmFsdWVPZiA9IHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmJ1aWxkKGZhbHNlKS5fc3RyaW5nO1xyXG5cdH07XHJcblxyXG5cclxuXHRmdW5jdGlvbiBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKF9wYXJ0KXtcclxuXHRcdHJldHVybiBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0XSB8fCAnJztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLl9wYXJ0c1tfcGFydF0gPSB2IHx8IG51bGw7XHJcblx0XHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcihfcGFydCwgX2tleSl7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLl9wYXJ0c1tfcGFydF0gfHwgJyc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKHYgIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdHYgPSB2ICsgJyc7XHJcblx0XHRcdFx0XHRpZiAodi5jaGFyQXQoMCkgPT09IF9rZXkpIHtcclxuXHRcdFx0XHRcdFx0diA9IHYuc3Vic3RyaW5nKDEpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGhpcy5fcGFydHNbX3BhcnRdID0gdjtcclxuXHRcdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRwLnByb3RvY29sID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncHJvdG9jb2wnKTtcclxuXHRwLnVzZXJuYW1lID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigndXNlcm5hbWUnKTtcclxuXHRwLnBhc3N3b3JkID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncGFzc3dvcmQnKTtcclxuXHRwLmhvc3RuYW1lID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcignaG9zdG5hbWUnKTtcclxuXHRwLnBvcnQgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdwb3J0Jyk7XHJcblx0cC5xdWVyeSA9IGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoJ3F1ZXJ5JywgJz8nKTtcclxuXHRwLmZyYWdtZW50ID0gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcignZnJhZ21lbnQnLCAnIycpO1xyXG5cclxuXHRwLnNlYXJjaCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHR2YXIgdCA9IHRoaXMucXVlcnkodiwgYnVpbGQpO1xyXG5cdFx0cmV0dXJuIHR5cGVvZiB0ID09PSAnc3RyaW5nJyAmJiB0Lmxlbmd0aCA/ICgnPycgKyB0KSA6IHQ7XHJcblx0fTtcclxuXHRwLmhhc2ggPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0dmFyIHQgPSB0aGlzLmZyYWdtZW50KHYsIGJ1aWxkKTtcclxuXHRcdHJldHVybiB0eXBlb2YgdCA9PT0gJ3N0cmluZycgJiYgdC5sZW5ndGggPyAoJyMnICsgdCkgOiB0O1xyXG5cdH07XHJcblxyXG5cdHAucGF0aG5hbWUgPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7XHJcblx0XHRcdHZhciByZXMgPSB0aGlzLl9wYXJ0cy5wYXRoIHx8ICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/ICcvJyA6ICcnKTtcclxuXHRcdFx0cmV0dXJuIHYgPyAodGhpcy5fcGFydHMudXJuID8gVVJJLmRlY29kZVVyblBhdGggOiBVUkkuZGVjb2RlUGF0aCkocmVzKSA6IHJlcztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0XHR0aGlzLl9wYXJ0cy5wYXRoID0gdiA/IFVSSS5yZWNvZGVVcm5QYXRoKHYpIDogJyc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IHYgPyBVUkkucmVjb2RlUGF0aCh2KSA6ICcvJztcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC5wYXRoID0gcC5wYXRobmFtZTtcclxuXHRwLmhyZWYgPSBmdW5jdGlvbihocmVmLCBidWlsZCkge1xyXG5cdFx0dmFyIGtleTtcclxuXHJcblx0XHRpZiAoaHJlZiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fc3RyaW5nID0gJyc7XHJcblx0XHR0aGlzLl9wYXJ0cyA9IFVSSS5fcGFydHMoKTtcclxuXHJcblx0XHR2YXIgX1VSSSA9IGhyZWYgaW5zdGFuY2VvZiBVUkk7XHJcblx0XHR2YXIgX29iamVjdCA9IHR5cGVvZiBocmVmID09PSAnb2JqZWN0JyAmJiAoaHJlZi5ob3N0bmFtZSB8fCBocmVmLnBhdGggfHwgaHJlZi5wYXRobmFtZSk7XHJcblx0XHRpZiAoaHJlZi5ub2RlTmFtZSkge1xyXG5cdFx0XHR2YXIgYXR0cmlidXRlID0gVVJJLmdldERvbUF0dHJpYnV0ZShocmVmKTtcclxuXHRcdFx0aHJlZiA9IGhyZWZbYXR0cmlidXRlXSB8fCAnJztcclxuXHRcdFx0X29iamVjdCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHdpbmRvdy5sb2NhdGlvbiBpcyByZXBvcnRlZCB0byBiZSBhbiBvYmplY3QsIGJ1dCBpdCdzIG5vdCB0aGUgc29ydFxyXG5cdFx0Ly8gb2Ygb2JqZWN0IHdlJ3JlIGxvb2tpbmcgZm9yOlxyXG5cdFx0Ly8gKiBsb2NhdGlvbi5wcm90b2NvbCBlbmRzIHdpdGggYSBjb2xvblxyXG5cdFx0Ly8gKiBsb2NhdGlvbi5xdWVyeSAhPSBvYmplY3Quc2VhcmNoXHJcblx0XHQvLyAqIGxvY2F0aW9uLmhhc2ggIT0gb2JqZWN0LmZyYWdtZW50XHJcblx0XHQvLyBzaW1wbHkgc2VyaWFsaXppbmcgdGhlIHVua25vd24gb2JqZWN0IHNob3VsZCBkbyB0aGUgdHJpY2tcclxuXHRcdC8vIChmb3IgbG9jYXRpb24sIG5vdCBmb3IgZXZlcnl0aGluZy4uLilcclxuXHRcdGlmICghX1VSSSAmJiBfb2JqZWN0ICYmIGhyZWYucGF0aG5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRocmVmID0gaHJlZi50b1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0eXBlb2YgaHJlZiA9PT0gJ3N0cmluZycgfHwgaHJlZiBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHR0aGlzLl9wYXJ0cyA9IFVSSS5wYXJzZShTdHJpbmcoaHJlZiksIHRoaXMuX3BhcnRzKTtcclxuXHRcdH0gZWxzZSBpZiAoX1VSSSB8fCBfb2JqZWN0KSB7XHJcblx0XHRcdHZhciBzcmMgPSBfVVJJID8gaHJlZi5fcGFydHMgOiBocmVmO1xyXG5cdFx0XHRmb3IgKGtleSBpbiBzcmMpIHtcclxuXHRcdFx0XHRpZiAoaGFzT3duLmNhbGwodGhpcy5fcGFydHMsIGtleSkpIHtcclxuXHRcdFx0XHRcdHRoaXMuX3BhcnRzW2tleV0gPSBzcmNba2V5XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaW5wdXQnKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHQvLyBpZGVudGlmaWNhdGlvbiBhY2Nlc3NvcnNcclxuXHRwLmlzID0gZnVuY3Rpb24od2hhdCkge1xyXG5cdFx0dmFyIGlwID0gZmFsc2U7XHJcblx0XHR2YXIgaXA0ID0gZmFsc2U7XHJcblx0XHR2YXIgaXA2ID0gZmFsc2U7XHJcblx0XHR2YXIgbmFtZSA9IGZhbHNlO1xyXG5cdFx0dmFyIHNsZCA9IGZhbHNlO1xyXG5cdFx0dmFyIGlkbiA9IGZhbHNlO1xyXG5cdFx0dmFyIHB1bnljb2RlID0gZmFsc2U7XHJcblx0XHR2YXIgcmVsYXRpdmUgPSAhdGhpcy5fcGFydHMudXJuO1xyXG5cclxuXHRcdGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkge1xyXG5cdFx0XHRyZWxhdGl2ZSA9IGZhbHNlO1xyXG5cdFx0XHRpcDQgPSBVUkkuaXA0X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHRcdGlwNiA9IFVSSS5pcDZfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcclxuXHRcdFx0aXAgPSBpcDQgfHwgaXA2O1xyXG5cdFx0XHRuYW1lID0gIWlwO1xyXG5cdFx0XHRzbGQgPSBuYW1lICYmIFNMRCAmJiBTTEQuaGFzKHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcclxuXHRcdFx0aWRuID0gbmFtZSAmJiBVUkkuaWRuX2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHRcdHB1bnljb2RlID0gbmFtZSAmJiBVUkkucHVueWNvZGVfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcclxuXHRcdH1cclxuXHJcblx0XHRzd2l0Y2ggKHdoYXQudG9Mb3dlckNhc2UoKSkge1xyXG5cdFx0XHRjYXNlICdyZWxhdGl2ZSc6XHJcblx0XHRcdFx0cmV0dXJuIHJlbGF0aXZlO1xyXG5cclxuXHRcdFx0Y2FzZSAnYWJzb2x1dGUnOlxyXG5cdFx0XHRcdHJldHVybiAhcmVsYXRpdmU7XHJcblxyXG5cdFx0XHQvLyBob3N0bmFtZSBpZGVudGlmaWNhdGlvblxyXG5cdFx0XHRjYXNlICdkb21haW4nOlxyXG5cdFx0XHRjYXNlICduYW1lJzpcclxuXHRcdFx0XHRyZXR1cm4gbmFtZTtcclxuXHJcblx0XHRcdGNhc2UgJ3NsZCc6XHJcblx0XHRcdFx0cmV0dXJuIHNsZDtcclxuXHJcblx0XHRcdGNhc2UgJ2lwJzpcclxuXHRcdFx0XHRyZXR1cm4gaXA7XHJcblxyXG5cdFx0XHRjYXNlICdpcDQnOlxyXG5cdFx0XHRjYXNlICdpcHY0JzpcclxuXHRcdFx0Y2FzZSAnaW5ldDQnOlxyXG5cdFx0XHRcdHJldHVybiBpcDQ7XHJcblxyXG5cdFx0XHRjYXNlICdpcDYnOlxyXG5cdFx0XHRjYXNlICdpcHY2JzpcclxuXHRcdFx0Y2FzZSAnaW5ldDYnOlxyXG5cdFx0XHRcdHJldHVybiBpcDY7XHJcblxyXG5cdFx0XHRjYXNlICdpZG4nOlxyXG5cdFx0XHRcdHJldHVybiBpZG47XHJcblxyXG5cdFx0XHRjYXNlICd1cmwnOlxyXG5cdFx0XHRcdHJldHVybiAhdGhpcy5fcGFydHMudXJuO1xyXG5cclxuXHRcdFx0Y2FzZSAndXJuJzpcclxuXHRcdFx0XHRyZXR1cm4gISF0aGlzLl9wYXJ0cy51cm47XHJcblxyXG5cdFx0XHRjYXNlICdwdW55Y29kZSc6XHJcblx0XHRcdFx0cmV0dXJuIHB1bnljb2RlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH07XHJcblxyXG5cdC8vIGNvbXBvbmVudCBzcGVjaWZpYyBpbnB1dCB2YWxpZGF0aW9uXHJcblx0dmFyIF9wcm90b2NvbCA9IHAucHJvdG9jb2w7XHJcblx0dmFyIF9wb3J0ID0gcC5wb3J0O1xyXG5cdHZhciBfaG9zdG5hbWUgPSBwLmhvc3RuYW1lO1xyXG5cclxuXHRwLnByb3RvY29sID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh2ICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYgKHYpIHtcclxuXHRcdFx0XHQvLyBhY2NlcHQgdHJhaWxpbmcgOi8vXHJcblx0XHRcdFx0diA9IHYucmVwbGFjZSgvOihcXC9cXC8pPyQvLCAnJyk7XHJcblxyXG5cdFx0XHRcdGlmICghdi5tYXRjaChVUkkucHJvdG9jb2xfZXhwcmVzc2lvbikpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3RvY29sIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuKy1dIG9yIGRvZXNuXFwndCBzdGFydCB3aXRoIFtBLVpdJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gX3Byb3RvY29sLmNhbGwodGhpcywgdiwgYnVpbGQpO1xyXG5cdH07XHJcblx0cC5zY2hlbWUgPSBwLnByb3RvY29sO1xyXG5cdHAucG9ydCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRpZiAodiA9PT0gMCkge1xyXG5cdFx0XHRcdHYgPSBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodikge1xyXG5cdFx0XHRcdHYgKz0gJyc7XHJcblx0XHRcdFx0aWYgKHYuY2hhckF0KDApID09PSAnOicpIHtcclxuXHRcdFx0XHRcdHYgPSB2LnN1YnN0cmluZygxKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh2Lm1hdGNoKC9bXjAtOV0vKSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUG9ydCBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbMC05XScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIF9wb3J0LmNhbGwodGhpcywgdiwgYnVpbGQpO1xyXG5cdH07XHJcblx0cC5ob3N0bmFtZSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR2YXIgeCA9IHt9O1xyXG5cdFx0XHR2YXIgcmVzID0gVVJJLnBhcnNlSG9zdCh2LCB4KTtcclxuXHRcdFx0aWYgKHJlcyAhPT0gJy8nKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2ID0geC5ob3N0bmFtZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBfaG9zdG5hbWUuY2FsbCh0aGlzLCB2LCBidWlsZCk7XHJcblx0fTtcclxuXHJcblx0Ly8gY29tcG91bmQgYWNjZXNzb3JzXHJcblx0cC5vcmlnaW4gPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0dmFyIHBhcnRzO1xyXG5cclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2woKTtcclxuXHRcdFx0dmFyIGF1dGhvcml0eSA9IHRoaXMuYXV0aG9yaXR5KCk7XHJcblx0XHRcdGlmICghYXV0aG9yaXR5KSByZXR1cm4gJyc7XHJcblx0XHRcdHJldHVybiAocHJvdG9jb2wgPyBwcm90b2NvbCArICc6Ly8nIDogJycpICsgdGhpcy5hdXRob3JpdHkoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBvcmlnaW4gPSBVUkkodik7XHJcblx0XHRcdHRoaXNcclxuXHRcdFx0XHQucHJvdG9jb2wob3JpZ2luLnByb3RvY29sKCkpXHJcblx0XHRcdFx0LmF1dGhvcml0eShvcmlnaW4uYXV0aG9yaXR5KCkpXHJcblx0XHRcdFx0LmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC5ob3N0ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/IFVSSS5idWlsZEhvc3QodGhpcy5fcGFydHMpIDogJyc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgcmVzID0gVVJJLnBhcnNlSG9zdCh2LCB0aGlzLl9wYXJ0cyk7XHJcblx0XHRcdGlmIChyZXMgIT09ICcvJykge1xyXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHR9O1xyXG5cdHAuYXV0aG9yaXR5ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/IFVSSS5idWlsZEF1dGhvcml0eSh0aGlzLl9wYXJ0cykgOiAnJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciByZXMgPSBVUkkucGFyc2VBdXRob3JpdHkodiwgdGhpcy5fcGFydHMpO1xyXG5cdFx0XHRpZiAocmVzICE9PSAnLycpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLnVzZXJpbmZvID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGlmICghdGhpcy5fcGFydHMudXNlcm5hbWUpIHtcclxuXHRcdFx0XHRyZXR1cm4gJyc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciB0ID0gVVJJLmJ1aWxkVXNlcmluZm8odGhpcy5fcGFydHMpO1xyXG5cdFx0XHRyZXR1cm4gdC5zdWJzdHJpbmcoMCwgdC5sZW5ndGggLTEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aWYgKHZbdi5sZW5ndGgtMV0gIT09ICdAJykge1xyXG5cdFx0XHRcdHYgKz0gJ0AnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRVUkkucGFyc2VVc2VyaW5mbyh2LCB0aGlzLl9wYXJ0cyk7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLnJlc291cmNlID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdHZhciBwYXJ0cztcclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLnBhdGgoKSArIHRoaXMuc2VhcmNoKCkgKyB0aGlzLmhhc2goKTtcclxuXHRcdH1cclxuXHJcblx0XHRwYXJ0cyA9IFVSSS5wYXJzZSh2KTtcclxuXHRcdHRoaXMuX3BhcnRzLnBhdGggPSBwYXJ0cy5wYXRoO1xyXG5cdFx0dGhpcy5fcGFydHMucXVlcnkgPSBwYXJ0cy5xdWVyeTtcclxuXHRcdHRoaXMuX3BhcnRzLmZyYWdtZW50ID0gcGFydHMuZnJhZ21lbnQ7XHJcblx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHQvLyBmcmFjdGlvbiBhY2Nlc3NvcnNcclxuXHRwLnN1YmRvbWFpbiA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY29udmVuaWVuY2UsIHJldHVybiBcInd3d1wiIGZyb20gXCJ3d3cuZXhhbXBsZS5vcmdcIlxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcclxuXHRcdFx0XHRyZXR1cm4gJyc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGdyYWIgZG9tYWluIGFuZCBhZGQgYW5vdGhlciBzZWdtZW50XHJcblx0XHRcdHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLmRvbWFpbigpLmxlbmd0aCAtIDE7XHJcblx0XHRcdHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoMCwgZW5kKSB8fCAnJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBlID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy5kb21haW4oKS5sZW5ndGg7XHJcblx0XHRcdHZhciBzdWIgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoMCwgZSk7XHJcblx0XHRcdHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cCgnXicgKyBlc2NhcGVSZWdFeChzdWIpKTtcclxuXHJcblx0XHRcdGlmICh2ICYmIHYuY2hhckF0KHYubGVuZ3RoIC0gMSkgIT09ICcuJykge1xyXG5cdFx0XHRcdHYgKz0gJy4nO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodikge1xyXG5cdFx0XHRcdFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHYpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdik7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLmRvbWFpbiA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcclxuXHRcdFx0YnVpbGQgPSB2O1xyXG5cdFx0XHR2ID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvbnZlbmllbmNlLCByZXR1cm4gXCJleGFtcGxlLm9yZ1wiIGZyb20gXCJ3d3cuZXhhbXBsZS5vcmdcIlxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcclxuXHRcdFx0XHRyZXR1cm4gJyc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGlmIGhvc3RuYW1lIGNvbnNpc3RzIG9mIDEgb3IgMiBzZWdtZW50cywgaXQgbXVzdCBiZSB0aGUgZG9tYWluXHJcblx0XHRcdHZhciB0ID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubWF0Y2goL1xcLi9nKTtcclxuXHRcdFx0aWYgKHQgJiYgdC5sZW5ndGggPCAyKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBncmFiIHRsZCBhbmQgYWRkIGFub3RoZXIgc2VnbWVudFxyXG5cdFx0XHR2YXIgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy50bGQoYnVpbGQpLmxlbmd0aCAtIDE7XHJcblx0XHRcdGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxhc3RJbmRleE9mKCcuJywgZW5kIC0xKSArIDE7XHJcblx0XHRcdHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoZW5kKSB8fCAnJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICghdikge1xyXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgZG9tYWluIGVtcHR5Jyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHYpO1xyXG5cclxuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XHJcblx0XHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSB2O1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLmRvbWFpbigpKSArICckJyk7XHJcblx0XHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC50bGQgPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XHJcblx0XHRcdGJ1aWxkID0gdjtcclxuXHRcdFx0diA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyByZXR1cm4gXCJvcmdcIiBmcm9tIFwid3d3LmV4YW1wbGUub3JnXCJcclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgcG9zID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGFzdEluZGV4T2YoJy4nKTtcclxuXHRcdFx0dmFyIHRsZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZyhwb3MgKyAxKTtcclxuXHJcblx0XHRcdGlmIChidWlsZCAhPT0gdHJ1ZSAmJiBTTEQgJiYgU0xELmxpc3RbdGxkLnRvTG93ZXJDYXNlKCldKSB7XHJcblx0XHRcdFx0cmV0dXJuIFNMRC5nZXQodGhpcy5fcGFydHMuaG9zdG5hbWUpIHx8IHRsZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRsZDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciByZXBsYWNlO1xyXG5cclxuXHRcdFx0aWYgKCF2KSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IHNldCBUTEQgZW1wdHknKTtcclxuXHRcdFx0fSBlbHNlIGlmICh2Lm1hdGNoKC9bXmEtekEtWjAtOS1dLykpIHtcclxuXHRcdFx0XHRpZiAoU0xEICYmIFNMRC5pcyh2KSkge1xyXG5cdFx0XHRcdFx0cmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy50bGQoKSkgKyAnJCcpO1xyXG5cdFx0XHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdUTEQgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOV0nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ2Nhbm5vdCBzZXQgVExEIG9uIG5vbi1kb21haW4gaG9zdCcpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMudGxkKCkpICsgJyQnKTtcclxuXHRcdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLmRpcmVjdG9yeSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7XHJcblx0XHRcdGlmICghdGhpcy5fcGFydHMucGF0aCAmJiAhdGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcclxuXHRcdFx0XHRyZXR1cm4gJyc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHtcclxuXHRcdFx0XHRyZXR1cm4gJy8nO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZW5kID0gdGhpcy5fcGFydHMucGF0aC5sZW5ndGggLSB0aGlzLmZpbGVuYW1lKCkubGVuZ3RoIC0gMTtcclxuXHRcdFx0dmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKDAsIGVuZCkgfHwgKHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gJy8nIDogJycpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aChyZXMpIDogcmVzO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBlID0gdGhpcy5fcGFydHMucGF0aC5sZW5ndGggLSB0aGlzLmZpbGVuYW1lKCkubGVuZ3RoO1xyXG5cdFx0XHR2YXIgZGlyZWN0b3J5ID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcoMCwgZSk7XHJcblx0XHRcdHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cCgnXicgKyBlc2NhcGVSZWdFeChkaXJlY3RvcnkpKTtcclxuXHJcblx0XHRcdC8vIGZ1bGx5IHF1YWxpZmllciBkaXJlY3RvcmllcyBiZWdpbiB3aXRoIGEgc2xhc2hcclxuXHRcdFx0aWYgKCF0aGlzLmlzKCdyZWxhdGl2ZScpKSB7XHJcblx0XHRcdFx0aWYgKCF2KSB7XHJcblx0XHRcdFx0XHR2ID0gJy8nO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHYuY2hhckF0KDApICE9PSAnLycpIHtcclxuXHRcdFx0XHRcdHYgPSAnLycgKyB2O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZGlyZWN0b3JpZXMgYWx3YXlzIGVuZCB3aXRoIGEgc2xhc2hcclxuXHRcdFx0aWYgKHYgJiYgdi5jaGFyQXQodi5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XHJcblx0XHRcdFx0diArPSAnLyc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHYgPSBVUkkucmVjb2RlUGF0aCh2KTtcclxuXHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2KTtcclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHR9O1xyXG5cdHAuZmlsZW5hbWUgPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLnBhdGggfHwgdGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgcG9zID0gdGhpcy5fcGFydHMucGF0aC5sYXN0SW5kZXhPZignLycpO1xyXG5cdFx0XHR2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcocG9zKzEpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aFNlZ21lbnQocmVzKSA6IHJlcztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBtdXRhdGVkRGlyZWN0b3J5ID0gZmFsc2U7XHJcblxyXG5cdFx0XHRpZiAodi5jaGFyQXQoMCkgPT09ICcvJykge1xyXG5cdFx0XHRcdHYgPSB2LnN1YnN0cmluZygxKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHYubWF0Y2goL1xcLj9cXC8vKSkge1xyXG5cdFx0XHRcdG11dGF0ZWREaXJlY3RvcnkgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5maWxlbmFtZSgpKSArICckJyk7XHJcblx0XHRcdHYgPSBVUkkucmVjb2RlUGF0aCh2KTtcclxuXHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2KTtcclxuXHJcblx0XHRcdGlmIChtdXRhdGVkRGlyZWN0b3J5KSB7XHJcblx0XHRcdFx0dGhpcy5ub3JtYWxpemVQYXRoKGJ1aWxkKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC5zdWZmaXggPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLnBhdGggfHwgdGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lKCk7XHJcblx0XHRcdHZhciBwb3MgPSBmaWxlbmFtZS5sYXN0SW5kZXhPZignLicpO1xyXG5cdFx0XHR2YXIgcywgcmVzO1xyXG5cclxuXHRcdFx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdFx0XHRyZXR1cm4gJyc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIHN1ZmZpeCBtYXkgb25seSBjb250YWluIGFsbnVtIGNoYXJhY3RlcnMgKHl1cCwgSSBtYWRlIHRoaXMgdXAuKVxyXG5cdFx0XHRzID0gZmlsZW5hbWUuc3Vic3RyaW5nKHBvcysxKTtcclxuXHRcdFx0cmVzID0gKC9eW2EtejAtOSVdKyQvaSkudGVzdChzKSA/IHMgOiAnJztcclxuXHRcdFx0cmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aFNlZ21lbnQocmVzKSA6IHJlcztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICh2LmNoYXJBdCgwKSA9PT0gJy4nKSB7XHJcblx0XHRcdFx0diA9IHYuc3Vic3RyaW5nKDEpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgc3VmZml4ID0gdGhpcy5zdWZmaXgoKTtcclxuXHRcdFx0dmFyIHJlcGxhY2U7XHJcblxyXG5cdFx0XHRpZiAoIXN1ZmZpeCkge1xyXG5cdFx0XHRcdGlmICghdikge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0aGlzLl9wYXJ0cy5wYXRoICs9ICcuJyArIFVSSS5yZWNvZGVQYXRoKHYpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCF2KSB7XHJcblx0XHRcdFx0cmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgoJy4nICsgc3VmZml4KSArICckJyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgoc3VmZml4KSArICckJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChyZXBsYWNlKSB7XHJcblx0XHRcdFx0diA9IFVSSS5yZWNvZGVQYXRoKHYpO1xyXG5cdFx0XHRcdHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLnNlZ21lbnQgPSBmdW5jdGlvbihzZWdtZW50LCB2LCBidWlsZCkge1xyXG5cdFx0dmFyIHNlcGFyYXRvciA9IHRoaXMuX3BhcnRzLnVybiA/ICc6JyA6ICcvJztcclxuXHRcdHZhciBwYXRoID0gdGhpcy5wYXRoKCk7XHJcblx0XHR2YXIgYWJzb2x1dGUgPSBwYXRoLnN1YnN0cmluZygwLCAxKSA9PT0gJy8nO1xyXG5cdFx0dmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdChzZXBhcmF0b3IpO1xyXG5cclxuXHRcdGlmIChzZWdtZW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XHJcblx0XHRcdGJ1aWxkID0gdjtcclxuXHRcdFx0diA9IHNlZ21lbnQ7XHJcblx0XHRcdHNlZ21lbnQgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHNlZ21lbnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc2VnbWVudCAhPT0gJ251bWJlcicpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdCYWQgc2VnbWVudCBcIicgKyBzZWdtZW50ICsgJ1wiLCBtdXN0IGJlIDAtYmFzZWQgaW50ZWdlcicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChhYnNvbHV0ZSkge1xyXG5cdFx0XHRzZWdtZW50cy5zaGlmdCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChzZWdtZW50IDwgMCkge1xyXG5cdFx0XHQvLyBhbGxvdyBuZWdhdGl2ZSBpbmRleGVzIHRvIGFkZHJlc3MgZnJvbSB0aGUgZW5kXHJcblx0XHRcdHNlZ21lbnQgPSBNYXRoLm1heChzZWdtZW50cy5sZW5ndGggKyBzZWdtZW50LCAwKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdC8qanNoaW50IGxheGJyZWFrOiB0cnVlICovXHJcblx0XHRcdHJldHVybiBzZWdtZW50ID09PSB1bmRlZmluZWRcclxuXHRcdFx0XHQ/IHNlZ21lbnRzXHJcblx0XHRcdFx0OiBzZWdtZW50c1tzZWdtZW50XTtcclxuXHRcdFx0Lypqc2hpbnQgbGF4YnJlYWs6IGZhbHNlICovXHJcblx0XHR9IGVsc2UgaWYgKHNlZ21lbnQgPT09IG51bGwgfHwgc2VnbWVudHNbc2VnbWVudF0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRpZiAoaXNBcnJheSh2KSkge1xyXG5cdFx0XHRcdHNlZ21lbnRzID0gW107XHJcblx0XHRcdFx0Ly8gY29sbGFwc2UgZW1wdHkgZWxlbWVudHMgd2l0aGluIGFycmF5XHJcblx0XHRcdFx0Zm9yICh2YXIgaT0wLCBsPXYubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0XHRcdFx0XHRpZiAoIXZbaV0ubGVuZ3RoICYmICghc2VnbWVudHMubGVuZ3RoIHx8ICFzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdLmxlbmd0aCkpIHtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKHNlZ21lbnRzLmxlbmd0aCAmJiAhc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0c2VnbWVudHMucG9wKCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0c2VnbWVudHMucHVzaCh0cmltU2xhc2hlcyh2W2ldKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKHYgfHwgdHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0diA9IHRyaW1TbGFzaGVzKHYpO1xyXG5cdFx0XHRcdGlmIChzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdID09PSAnJykge1xyXG5cdFx0XHRcdFx0Ly8gZW1wdHkgdHJhaWxpbmcgZWxlbWVudHMgaGF2ZSB0byBiZSBvdmVyd3JpdHRlblxyXG5cdFx0XHRcdFx0Ly8gdG8gcHJldmVudCByZXN1bHRzIHN1Y2ggYXMgL2Zvby8vYmFyXHJcblx0XHRcdFx0XHRzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdID0gdjtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c2VnbWVudHMucHVzaCh2KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICh2KSB7XHJcblx0XHRcdFx0c2VnbWVudHNbc2VnbWVudF0gPSB0cmltU2xhc2hlcyh2KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzZWdtZW50cy5zcGxpY2Uoc2VnbWVudCwgMSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYWJzb2x1dGUpIHtcclxuXHRcdFx0c2VnbWVudHMudW5zaGlmdCgnJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucGF0aChzZWdtZW50cy5qb2luKHNlcGFyYXRvciksIGJ1aWxkKTtcclxuXHR9O1xyXG5cdHAuc2VnbWVudENvZGVkID0gZnVuY3Rpb24oc2VnbWVudCwgdiwgYnVpbGQpIHtcclxuXHRcdHZhciBzZWdtZW50cywgaSwgbDtcclxuXHJcblx0XHRpZiAodHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XHJcblx0XHRcdGJ1aWxkID0gdjtcclxuXHRcdFx0diA9IHNlZ21lbnQ7XHJcblx0XHRcdHNlZ21lbnQgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRzZWdtZW50cyA9IHRoaXMuc2VnbWVudChzZWdtZW50LCB2LCBidWlsZCk7XHJcblx0XHRcdGlmICghaXNBcnJheShzZWdtZW50cykpIHtcclxuXHRcdFx0XHRzZWdtZW50cyA9IHNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBVUkkuZGVjb2RlKHNlZ21lbnRzKSA6IHVuZGVmaW5lZDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKGkgPSAwLCBsID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0XHRcdFx0XHRzZWdtZW50c1tpXSA9IFVSSS5kZWNvZGUoc2VnbWVudHNbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNlZ21lbnRzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghaXNBcnJheSh2KSkge1xyXG5cdFx0XHR2ID0gKHR5cGVvZiB2ID09PSAnc3RyaW5nJyB8fCB2IGluc3RhbmNlb2YgU3RyaW5nKSA/IFVSSS5lbmNvZGUodikgOiB2O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yIChpID0gMCwgbCA9IHYubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0XHRcdFx0dltpXSA9IFVSSS5lbmNvZGUodltpXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZWdtZW50KHNlZ21lbnQsIHYsIGJ1aWxkKTtcclxuXHR9O1xyXG5cclxuXHQvLyBtdXRhdGluZyBxdWVyeSBzdHJpbmdcclxuXHR2YXIgcSA9IHAucXVlcnk7XHJcblx0cC5xdWVyeSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRyZXR1cm4gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHR2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdFx0dmFyIHJlc3VsdCA9IHYuY2FsbCh0aGlzLCBkYXRhKTtcclxuXHRcdFx0dGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShyZXN1bHQgfHwgZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH0gZWxzZSBpZiAodiAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xyXG5cdFx0XHR0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KHYsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gcS5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdHAuc2V0UXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHtcclxuXHRcdHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cclxuXHRcdGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgbmFtZSBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHRkYXRhW25hbWVdID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogbnVsbDtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBuYW1lKSB7XHJcblx0XHRcdFx0aWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHtcclxuXHRcdFx0XHRcdGRhdGFba2V5XSA9IG5hbWVba2V5XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xyXG5cdFx0XHRidWlsZCA9IHZhbHVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblx0cC5hZGRRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBidWlsZCkge1xyXG5cdFx0dmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRVUkkuYWRkUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZSk7XHJcblx0XHR0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdGJ1aWxkID0gdmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHRwLnJlbW92ZVF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7XHJcblx0XHR2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdFVSSS5yZW1vdmVRdWVyeShkYXRhLCBuYW1lLCB2YWx1ZSk7XHJcblx0XHR0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdGJ1aWxkID0gdmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHRwLmhhc1F1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KSB7XHJcblx0XHR2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdHJldHVybiBVUkkuaGFzUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KTtcclxuXHR9O1xyXG5cdHAuc2V0U2VhcmNoID0gcC5zZXRRdWVyeTtcclxuXHRwLmFkZFNlYXJjaCA9IHAuYWRkUXVlcnk7XHJcblx0cC5yZW1vdmVTZWFyY2ggPSBwLnJlbW92ZVF1ZXJ5O1xyXG5cdHAuaGFzU2VhcmNoID0gcC5oYXNRdWVyeTtcclxuXHJcblx0Ly8gc2FuaXRpemluZyBVUkxzXHJcblx0cC5ub3JtYWxpemUgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHRoaXNcclxuXHRcdFx0XHQubm9ybWFsaXplUHJvdG9jb2woZmFsc2UpXHJcblx0XHRcdFx0Lm5vcm1hbGl6ZVBhdGgoZmFsc2UpXHJcblx0XHRcdFx0Lm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKVxyXG5cdFx0XHRcdC5ub3JtYWxpemVGcmFnbWVudChmYWxzZSlcclxuXHRcdFx0XHQuYnVpbGQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpc1xyXG5cdFx0XHQubm9ybWFsaXplUHJvdG9jb2woZmFsc2UpXHJcblx0XHRcdC5ub3JtYWxpemVIb3N0bmFtZShmYWxzZSlcclxuXHRcdFx0Lm5vcm1hbGl6ZVBvcnQoZmFsc2UpXHJcblx0XHRcdC5ub3JtYWxpemVQYXRoKGZhbHNlKVxyXG5cdFx0XHQubm9ybWFsaXplUXVlcnkoZmFsc2UpXHJcblx0XHRcdC5ub3JtYWxpemVGcmFnbWVudChmYWxzZSlcclxuXHRcdFx0LmJ1aWxkKCk7XHJcblx0fTtcclxuXHRwLm5vcm1hbGl6ZVByb3RvY29sID0gZnVuY3Rpb24oYnVpbGQpIHtcclxuXHRcdGlmICh0eXBlb2YgdGhpcy5fcGFydHMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdHRoaXMuX3BhcnRzLnByb3RvY29sID0gdGhpcy5fcGFydHMucHJvdG9jb2wudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblx0cC5ub3JtYWxpemVIb3N0bmFtZSA9IGZ1bmN0aW9uKGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcclxuXHRcdFx0aWYgKHRoaXMuaXMoJ0lETicpICYmIHB1bnljb2RlKSB7XHJcblx0XHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcclxuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmlzKCdJUHY2JykgJiYgSVB2Nikge1xyXG5cdFx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gSVB2Ni5iZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHRwLm5vcm1hbGl6ZVBvcnQgPSBmdW5jdGlvbihidWlsZCkge1xyXG5cdFx0Ly8gcmVtb3ZlIHBvcnQgb2YgaXQncyB0aGUgcHJvdG9jb2wncyBkZWZhdWx0XHJcblx0XHRpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJyAmJiB0aGlzLl9wYXJ0cy5wb3J0ID09PSBVUkkuZGVmYXVsdFBvcnRzW3RoaXMuX3BhcnRzLnByb3RvY29sXSkge1xyXG5cdFx0XHR0aGlzLl9wYXJ0cy5wb3J0ID0gbnVsbDtcclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblx0cC5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24oYnVpbGQpIHtcclxuXHRcdHZhciBfcGF0aCA9IHRoaXMuX3BhcnRzLnBhdGg7XHJcblx0XHRpZiAoIV9wYXRoKSB7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IFVSSS5yZWNvZGVVcm5QYXRoKHRoaXMuX3BhcnRzLnBhdGgpO1xyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIF93YXNfcmVsYXRpdmU7XHJcblx0XHR2YXIgX2xlYWRpbmdQYXJlbnRzID0gJyc7XHJcblx0XHR2YXIgX3BhcmVudCwgX3BvcztcclxuXHJcblx0XHQvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHNcclxuXHRcdGlmIChfcGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xyXG5cdFx0XHRfd2FzX3JlbGF0aXZlID0gdHJ1ZTtcclxuXHRcdFx0X3BhdGggPSAnLycgKyBfcGF0aDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBoYW5kbGUgcmVsYXRpdmUgZmlsZXMgKGFzIG9wcG9zZWQgdG8gZGlyZWN0b3JpZXMpXHJcblx0XHRpZiAoX3BhdGguc2xpY2UoLTMpID09PSAnLy4uJyB8fCBfcGF0aC5zbGljZSgtMikgPT09ICcvLicpIHtcclxuXHRcdFx0X3BhdGggKz0gJy8nO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHJlc29sdmUgc2ltcGxlc1xyXG5cdFx0X3BhdGggPSBfcGF0aFxyXG5cdFx0XHQucmVwbGFjZSgvKFxcLyhcXC5cXC8pKyl8KFxcL1xcLiQpL2csICcvJylcclxuXHRcdFx0LnJlcGxhY2UoL1xcL3syLH0vZywgJy8nKTtcclxuXHJcblx0XHQvLyByZW1lbWJlciBsZWFkaW5nIHBhcmVudHNcclxuXHRcdGlmIChfd2FzX3JlbGF0aXZlKSB7XHJcblx0XHRcdF9sZWFkaW5nUGFyZW50cyA9IF9wYXRoLnN1YnN0cmluZygxKS5tYXRjaCgvXihcXC5cXC5cXC8pKy8pIHx8ICcnO1xyXG5cdFx0XHRpZiAoX2xlYWRpbmdQYXJlbnRzKSB7XHJcblx0XHRcdFx0X2xlYWRpbmdQYXJlbnRzID0gX2xlYWRpbmdQYXJlbnRzWzBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcmVzb2x2ZSBwYXJlbnRzXHJcblx0XHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0XHRfcGFyZW50ID0gX3BhdGguaW5kZXhPZignLy4uJyk7XHJcblx0XHRcdGlmIChfcGFyZW50ID09PSAtMSkge1xyXG5cdFx0XHRcdC8vIG5vIG1vcmUgLi4vIHRvIHJlc29sdmVcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fSBlbHNlIGlmIChfcGFyZW50ID09PSAwKSB7XHJcblx0XHRcdFx0Ly8gdG9wIGxldmVsIGNhbm5vdCBiZSByZWxhdGl2ZSwgc2tpcCBpdFxyXG5cdFx0XHRcdF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKDMpO1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfcG9zID0gX3BhdGguc3Vic3RyaW5nKDAsIF9wYXJlbnQpLmxhc3RJbmRleE9mKCcvJyk7XHJcblx0XHRcdGlmIChfcG9zID09PSAtMSkge1xyXG5cdFx0XHRcdF9wb3MgPSBfcGFyZW50O1xyXG5cdFx0XHR9XHJcblx0XHRcdF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKDAsIF9wb3MpICsgX3BhdGguc3Vic3RyaW5nKF9wYXJlbnQgKyAzKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyByZXZlcnQgdG8gcmVsYXRpdmVcclxuXHRcdGlmIChfd2FzX3JlbGF0aXZlICYmIHRoaXMuaXMoJ3JlbGF0aXZlJykpIHtcclxuXHRcdFx0X3BhdGggPSBfbGVhZGluZ1BhcmVudHMgKyBfcGF0aC5zdWJzdHJpbmcoMSk7XHJcblx0XHR9XHJcblxyXG5cdFx0X3BhdGggPSBVUkkucmVjb2RlUGF0aChfcGF0aCk7XHJcblx0XHR0aGlzLl9wYXJ0cy5wYXRoID0gX3BhdGg7XHJcblx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cdHAubm9ybWFsaXplUGF0aG5hbWUgPSBwLm5vcm1hbGl6ZVBhdGg7XHJcblx0cC5ub3JtYWxpemVRdWVyeSA9IGZ1bmN0aW9uKGJ1aWxkKSB7XHJcblx0XHRpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnF1ZXJ5ID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLnF1ZXJ5Lmxlbmd0aCkge1xyXG5cdFx0XHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gbnVsbDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnF1ZXJ5KFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cdHAubm9ybWFsaXplRnJhZ21lbnQgPSBmdW5jdGlvbihidWlsZCkge1xyXG5cdFx0aWYgKCF0aGlzLl9wYXJ0cy5mcmFnbWVudCkge1xyXG5cdFx0XHR0aGlzLl9wYXJ0cy5mcmFnbWVudCA9IG51bGw7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cdHAubm9ybWFsaXplU2VhcmNoID0gcC5ub3JtYWxpemVRdWVyeTtcclxuXHRwLm5vcm1hbGl6ZUhhc2ggPSBwLm5vcm1hbGl6ZUZyYWdtZW50O1xyXG5cclxuXHRwLmlzbzg4NTkgPSBmdW5jdGlvbigpIHtcclxuXHRcdC8vIGV4cGVjdCB1bmljb2RlIGlucHV0LCBpc284ODU5IG91dHB1dFxyXG5cdFx0dmFyIGUgPSBVUkkuZW5jb2RlO1xyXG5cdFx0dmFyIGQgPSBVUkkuZGVjb2RlO1xyXG5cclxuXHRcdFVSSS5lbmNvZGUgPSBlc2NhcGU7XHJcblx0XHRVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0dGhpcy5ub3JtYWxpemUoKTtcclxuXHRcdH0gZmluYWxseSB7XHJcblx0XHRcdFVSSS5lbmNvZGUgPSBlO1xyXG5cdFx0XHRVUkkuZGVjb2RlID0gZDtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblxyXG5cdHAudW5pY29kZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0Ly8gZXhwZWN0IGlzbzg4NTkgaW5wdXQsIHVuaWNvZGUgb3V0cHV0XHJcblx0XHR2YXIgZSA9IFVSSS5lbmNvZGU7XHJcblx0XHR2YXIgZCA9IFVSSS5kZWNvZGU7XHJcblxyXG5cdFx0VVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcclxuXHRcdFVSSS5kZWNvZGUgPSB1bmVzY2FwZTtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHRoaXMubm9ybWFsaXplKCk7XHJcblx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRVUkkuZW5jb2RlID0gZTtcclxuXHRcdFx0VVJJLmRlY29kZSA9IGQ7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHRwLnJlYWRhYmxlID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgdXJpID0gdGhpcy5jbG9uZSgpO1xyXG5cdFx0Ly8gcmVtb3ZpbmcgdXNlcm5hbWUsIHBhc3N3b3JkLCBiZWNhdXNlIHRoZXkgc2hvdWxkbid0IGJlIGRpc3BsYXllZCBhY2NvcmRpbmcgdG8gUkZDIDM5ODZcclxuXHRcdHVyaS51c2VybmFtZSgnJykucGFzc3dvcmQoJycpLm5vcm1hbGl6ZSgpO1xyXG5cdFx0dmFyIHQgPSAnJztcclxuXHRcdGlmICh1cmkuX3BhcnRzLnByb3RvY29sKSB7XHJcblx0XHRcdHQgKz0gdXJpLl9wYXJ0cy5wcm90b2NvbCArICc6Ly8nO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lKSB7XHJcblx0XHRcdGlmICh1cmkuaXMoJ3B1bnljb2RlJykgJiYgcHVueWNvZGUpIHtcclxuXHRcdFx0XHR0ICs9IHB1bnljb2RlLnRvVW5pY29kZSh1cmkuX3BhcnRzLmhvc3RuYW1lKTtcclxuXHRcdFx0XHRpZiAodXJpLl9wYXJ0cy5wb3J0KSB7XHJcblx0XHRcdFx0XHR0ICs9ICc6JyArIHVyaS5fcGFydHMucG9ydDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dCArPSB1cmkuaG9zdCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHVyaS5fcGFydHMuaG9zdG5hbWUgJiYgdXJpLl9wYXJ0cy5wYXRoICYmIHVyaS5fcGFydHMucGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xyXG5cdFx0XHR0ICs9ICcvJztcclxuXHRcdH1cclxuXHJcblx0XHR0ICs9IHVyaS5wYXRoKHRydWUpO1xyXG5cdFx0aWYgKHVyaS5fcGFydHMucXVlcnkpIHtcclxuXHRcdFx0dmFyIHEgPSAnJztcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIHFwID0gdXJpLl9wYXJ0cy5xdWVyeS5zcGxpdCgnJicpLCBsID0gcXAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGt2ID0gKHFwW2ldIHx8ICcnKS5zcGxpdCgnPScpO1xyXG5cdFx0XHRcdHEgKz0gJyYnICsgVVJJLmRlY29kZVF1ZXJ5KGt2WzBdLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKVxyXG5cdFx0XHRcdFx0LnJlcGxhY2UoLyYvZywgJyUyNicpO1xyXG5cclxuXHRcdFx0XHRpZiAoa3ZbMV0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0cSArPSAnPScgKyBVUkkuZGVjb2RlUXVlcnkoa3ZbMV0sIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpXHJcblx0XHRcdFx0XHRcdC5yZXBsYWNlKC8mL2csICclMjYnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dCArPSAnPycgKyBxLnN1YnN0cmluZygxKTtcclxuXHRcdH1cclxuXHJcblx0XHR0ICs9IFVSSS5kZWNvZGVRdWVyeSh1cmkuaGFzaCgpLCB0cnVlKTtcclxuXHRcdHJldHVybiB0O1xyXG5cdH07XHJcblxyXG5cdC8vIHJlc29sdmluZyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgVVJMc1xyXG5cdHAuYWJzb2x1dGVUbyA9IGZ1bmN0aW9uKGJhc2UpIHtcclxuXHRcdHZhciByZXNvbHZlZCA9IHRoaXMuY2xvbmUoKTtcclxuXHRcdHZhciBwcm9wZXJ0aWVzID0gWydwcm90b2NvbCcsICd1c2VybmFtZScsICdwYXNzd29yZCcsICdob3N0bmFtZScsICdwb3J0J107XHJcblx0XHR2YXIgYmFzZWRpciwgaSwgcDtcclxuXHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignVVJOcyBkbyBub3QgaGF2ZSBhbnkgZ2VuZXJhbGx5IGRlZmluZWQgaGllcmFyY2hpY2FsIGNvbXBvbmVudHMnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIShiYXNlIGluc3RhbmNlb2YgVVJJKSkge1xyXG5cdFx0XHRiYXNlID0gbmV3IFVSSShiYXNlKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCkge1xyXG5cdFx0XHRyZXNvbHZlZC5fcGFydHMucHJvdG9jb2wgPSBiYXNlLl9wYXJ0cy5wcm90b2NvbDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcclxuXHRcdFx0cmV0dXJuIHJlc29sdmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoaSA9IDA7IChwID0gcHJvcGVydGllc1tpXSk7IGkrKykge1xyXG5cdFx0XHRyZXNvbHZlZC5fcGFydHNbcF0gPSBiYXNlLl9wYXJ0c1twXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXJlc29sdmVkLl9wYXJ0cy5wYXRoKSB7XHJcblx0XHRcdHJlc29sdmVkLl9wYXJ0cy5wYXRoID0gYmFzZS5fcGFydHMucGF0aDtcclxuXHRcdFx0aWYgKCFyZXNvbHZlZC5fcGFydHMucXVlcnkpIHtcclxuXHRcdFx0XHRyZXNvbHZlZC5fcGFydHMucXVlcnkgPSBiYXNlLl9wYXJ0cy5xdWVyeTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChyZXNvbHZlZC5fcGFydHMucGF0aC5zdWJzdHJpbmcoLTIpID09PSAnLi4nKSB7XHJcblx0XHRcdHJlc29sdmVkLl9wYXJ0cy5wYXRoICs9ICcvJztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVzb2x2ZWQucGF0aCgpLmNoYXJBdCgwKSAhPT0gJy8nKSB7XHJcblx0XHRcdGJhc2VkaXIgPSBiYXNlLmRpcmVjdG9yeSgpO1xyXG5cdFx0XHRiYXNlZGlyID0gYmFzZWRpciA/IGJhc2VkaXIgOiBiYXNlLnBhdGgoKS5pbmRleE9mKCcvJykgPT09IDAgPyAnLycgOiAnJztcclxuXHRcdFx0cmVzb2x2ZWQuX3BhcnRzLnBhdGggPSAoYmFzZWRpciA/IChiYXNlZGlyICsgJy8nKSA6ICcnKSArIHJlc29sdmVkLl9wYXJ0cy5wYXRoO1xyXG5cdFx0XHRyZXNvbHZlZC5ub3JtYWxpemVQYXRoKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmVzb2x2ZWQuYnVpbGQoKTtcclxuXHRcdHJldHVybiByZXNvbHZlZDtcclxuXHR9O1xyXG5cdHAucmVsYXRpdmVUbyA9IGZ1bmN0aW9uKGJhc2UpIHtcclxuXHRcdHZhciByZWxhdGl2ZSA9IHRoaXMuY2xvbmUoKS5ub3JtYWxpemUoKTtcclxuXHRcdHZhciByZWxhdGl2ZVBhcnRzLCBiYXNlUGFydHMsIGNvbW1vbiwgcmVsYXRpdmVQYXRoLCBiYXNlUGF0aDtcclxuXHJcblx0XHRpZiAocmVsYXRpdmUuX3BhcnRzLnVybikge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VSTnMgZG8gbm90IGhhdmUgYW55IGdlbmVyYWxseSBkZWZpbmVkIGhpZXJhcmNoaWNhbCBjb21wb25lbnRzJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0YmFzZSA9IG5ldyBVUkkoYmFzZSkubm9ybWFsaXplKCk7XHJcblx0XHRyZWxhdGl2ZVBhcnRzID0gcmVsYXRpdmUuX3BhcnRzO1xyXG5cdFx0YmFzZVBhcnRzID0gYmFzZS5fcGFydHM7XHJcblx0XHRyZWxhdGl2ZVBhdGggPSByZWxhdGl2ZS5wYXRoKCk7XHJcblx0XHRiYXNlUGF0aCA9IGJhc2UucGF0aCgpO1xyXG5cclxuXHRcdGlmIChyZWxhdGl2ZVBhdGguY2hhckF0KDApICE9PSAnLycpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVUkkgaXMgYWxyZWFkeSByZWxhdGl2ZScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChiYXNlUGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjYWxjdWxhdGUgYSBVUkkgcmVsYXRpdmUgdG8gYW5vdGhlciByZWxhdGl2ZSBVUkknKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVsYXRpdmVQYXJ0cy5wcm90b2NvbCA9PT0gYmFzZVBhcnRzLnByb3RvY29sKSB7XHJcblx0XHRcdHJlbGF0aXZlUGFydHMucHJvdG9jb2wgPSBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChyZWxhdGl2ZVBhcnRzLnVzZXJuYW1lICE9PSBiYXNlUGFydHMudXNlcm5hbWUgfHwgcmVsYXRpdmVQYXJ0cy5wYXNzd29yZCAhPT0gYmFzZVBhcnRzLnBhc3N3b3JkKSB7XHJcblx0XHRcdHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChyZWxhdGl2ZVBhcnRzLnByb3RvY29sICE9PSBudWxsIHx8IHJlbGF0aXZlUGFydHMudXNlcm5hbWUgIT09IG51bGwgfHwgcmVsYXRpdmVQYXJ0cy5wYXNzd29yZCAhPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVsYXRpdmVQYXJ0cy5ob3N0bmFtZSA9PT0gYmFzZVBhcnRzLmhvc3RuYW1lICYmIHJlbGF0aXZlUGFydHMucG9ydCA9PT0gYmFzZVBhcnRzLnBvcnQpIHtcclxuXHRcdFx0cmVsYXRpdmVQYXJ0cy5ob3N0bmFtZSA9IG51bGw7XHJcblx0XHRcdHJlbGF0aXZlUGFydHMucG9ydCA9IG51bGw7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVsYXRpdmVQYXRoID09PSBiYXNlUGF0aCkge1xyXG5cdFx0XHRyZWxhdGl2ZVBhcnRzLnBhdGggPSAnJztcclxuXHRcdFx0cmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZGV0ZXJtaW5lIGNvbW1vbiBzdWIgcGF0aFxyXG5cdFx0Y29tbW9uID0gVVJJLmNvbW1vblBhdGgocmVsYXRpdmVQYXRoLCBiYXNlUGF0aCk7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIHBhdGhzIGhhdmUgbm90aGluZyBpbiBjb21tb24sIHJldHVybiBhIHJlbGF0aXZlIFVSTCB3aXRoIHRoZSBhYnNvbHV0ZSBwYXRoLlxyXG5cdFx0aWYgKCFjb21tb24pIHtcclxuXHRcdFx0cmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHBhcmVudHMgPSBiYXNlUGFydHMucGF0aFxyXG5cdFx0XHQuc3Vic3RyaW5nKGNvbW1vbi5sZW5ndGgpXHJcblx0XHRcdC5yZXBsYWNlKC9bXlxcL10qJC8sICcnKVxyXG5cdFx0XHQucmVwbGFjZSgvLio/XFwvL2csICcuLi8nKTtcclxuXHJcblx0XHRyZWxhdGl2ZVBhcnRzLnBhdGggPSAocGFyZW50cyArIHJlbGF0aXZlUGFydHMucGF0aC5zdWJzdHJpbmcoY29tbW9uLmxlbmd0aCkpIHx8ICcuLyc7XHJcblxyXG5cdFx0cmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XHJcblx0fTtcclxuXHJcblx0Ly8gY29tcGFyaW5nIFVSSXNcclxuXHRwLmVxdWFscyA9IGZ1bmN0aW9uKHVyaSkge1xyXG5cdFx0dmFyIG9uZSA9IHRoaXMuY2xvbmUoKTtcclxuXHRcdHZhciB0d28gPSBuZXcgVVJJKHVyaSk7XHJcblx0XHR2YXIgb25lX21hcCA9IHt9O1xyXG5cdFx0dmFyIHR3b19tYXAgPSB7fTtcclxuXHRcdHZhciBjaGVja2VkID0ge307XHJcblx0XHR2YXIgb25lX3F1ZXJ5LCB0d29fcXVlcnksIGtleTtcclxuXHJcblx0XHRvbmUubm9ybWFsaXplKCk7XHJcblx0XHR0d28ubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0Ly8gZXhhY3QgbWF0Y2hcclxuXHRcdGlmIChvbmUudG9TdHJpbmcoKSA9PT0gdHdvLnRvU3RyaW5nKCkpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZXh0cmFjdCBxdWVyeSBzdHJpbmdcclxuXHRcdG9uZV9xdWVyeSA9IG9uZS5xdWVyeSgpO1xyXG5cdFx0dHdvX3F1ZXJ5ID0gdHdvLnF1ZXJ5KCk7XHJcblx0XHRvbmUucXVlcnkoJycpO1xyXG5cdFx0dHdvLnF1ZXJ5KCcnKTtcclxuXHJcblx0XHQvLyBkZWZpbml0ZWx5IG5vdCBlcXVhbCBpZiBub3QgZXZlbiBub24tcXVlcnkgcGFydHMgbWF0Y2hcclxuXHRcdGlmIChvbmUudG9TdHJpbmcoKSAhPT0gdHdvLnRvU3RyaW5nKCkpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHF1ZXJ5IHBhcmFtZXRlcnMgaGF2ZSB0aGUgc2FtZSBsZW5ndGgsIGV2ZW4gaWYgdGhleSdyZSBwZXJtdXRlZFxyXG5cdFx0aWYgKG9uZV9xdWVyeS5sZW5ndGggIT09IHR3b19xdWVyeS5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdG9uZV9tYXAgPSBVUkkucGFyc2VRdWVyeShvbmVfcXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0dHdvX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KHR3b19xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblxyXG5cdFx0Zm9yIChrZXkgaW4gb25lX21hcCkge1xyXG5cdFx0XHRpZiAoaGFzT3duLmNhbGwob25lX21hcCwga2V5KSkge1xyXG5cdFx0XHRcdGlmICghaXNBcnJheShvbmVfbWFwW2tleV0pKSB7XHJcblx0XHRcdFx0XHRpZiAob25lX21hcFtrZXldICE9PSB0d29fbWFwW2tleV0pIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIWFycmF5c0VxdWFsKG9uZV9tYXBba2V5XSwgdHdvX21hcFtrZXldKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y2hlY2tlZFtrZXldID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoa2V5IGluIHR3b19tYXApIHtcclxuXHRcdFx0aWYgKGhhc093bi5jYWxsKHR3b19tYXAsIGtleSkpIHtcclxuXHRcdFx0XHRpZiAoIWNoZWNrZWRba2V5XSkge1xyXG5cdFx0XHRcdFx0Ly8gdHdvIGNvbnRhaW5zIGEgcGFyYW1ldGVyIG5vdCBwcmVzZW50IGluIG9uZVxyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH07XHJcblxyXG5cdC8vIHN0YXRlXHJcblx0cC5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSBmdW5jdGlvbih2KSB7XHJcblx0XHR0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSAhIXY7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHRwLmVzY2FwZVF1ZXJ5U3BhY2UgPSBmdW5jdGlvbih2KSB7XHJcblx0XHR0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlID0gISF2O1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIFVSSTtcclxufSkpOyIsIldvcmtmbG93ID0ge31cclxuXHJcbkBJbWFnZVNpZ24gPSB7fTtcclxuXHJcbkBUcmFjZXNIYW5kbGVyID0ge307XHJcblxyXG5AVHJhY2VzVGVtcGxhdGUgPSB7fTtcclxuXHJcbkBJbnN0YW5jZWZvcm1UZW1wbGF0ZSA9IHt9O1xyXG5cclxuQEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlID0ge307XHJcblxyXG5ASW5zdGFuY2VTaWduVGV4dCA9IHt9XHJcblxyXG5AUmVsYXRlZEluc3RhbmNlcyA9IHt9XHJcblxyXG5AUmVsYXRlZFJlY29yZHMgPSB7fVxyXG5cclxuQEluc3RhbmNlTWFjcm8gPSB7Y29udGV4dDoge319XHJcblxyXG5AVHJhY2VzTWFuYWdlciA9IHt9O1xyXG5cclxuSW5zdGFuY2VTaWduVGV4dC5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyA9IChmaWVsZF9mb3JtdWxhKS0+XHJcblx0cmV0dXJuIChmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwie3RyYWNlcy5cIikgPiAtMSB8fCBmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInt5aWppYW5sYW46XCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcIntcXFwieWlqaWFubGFuXFxcIjpcIikgPiAtMSB8fCBmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwieyd5aWppYW5sYW4nOlwiKSA+IC0xKVxyXG5cclxuSW5zdGFuY2VTaWduVGV4dC5pbmNsdWRlc09waW5pb25GaWVsZCA9IChmb3JtLCBmb3JtX3ZlcnNpb24pLT5cclxuXHRmaWVsZF9mb3JtdWxhcyA9IG5ldyBBcnJheSgpO1xyXG5cclxuXHRfZm9ybV92ZXJzaW9uID0ge31cclxuXHJcblx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRfZm9ybV92ZXJzaW9uID0gdXVmbG93TWFuYWdlci5nZXRGb3JtVmVyc2lvbihkYi5mb3Jtcy5maW5kT25lKHtfaWQ6IGZvcm19KSwgZm9ybV92ZXJzaW9uKVxyXG5cdGVsc2VcclxuXHRcdF9mb3JtX3ZlcnNpb24gPSBkYi5mb3JtX3ZlcnNpb25zLmZpbmRPbmUoe19pZDogZm9ybV92ZXJzaW9uLCBmb3JtOiBmb3JtfSlcclxuXHJcblx0ZmllbGRzID0gX2Zvcm1fdmVyc2lvbj8uZmllbGRzIHx8IFtdXHJcblxyXG5cdGZpZWxkcy5mb3JFYWNoIChmKS0+XHJcblx0XHRpZiBmLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRjb25zb2xlLmxvZyAnaWdub3JlIG9waW5pb24gZmllbGQgaW4gdGFibGUnXHJcblx0XHRlbHNlIGlmIGYudHlwZSA9PSAnc2VjdGlvbidcclxuXHRcdFx0Zj8uZmllbGRzPy5mb3JFYWNoIChmMSktPlxyXG5cdFx0XHRcdGZpZWxkX2Zvcm11bGFzLnB1c2ggZjEuZm9ybXVsYVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRmaWVsZF9mb3JtdWxhcy5wdXNoIGYuZm9ybXVsYVxyXG5cclxuXHRfLnNvbWUgZmllbGRfZm9ybXVsYXMsIChmaWVsZF9mb3JtdWxhKS0+XHJcblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKVxyXG5cclxuIiwiICAgICAgICAgICAgIFxuXG5Xb3JrZmxvdyA9IHt9O1xuXG50aGlzLkltYWdlU2lnbiA9IHt9O1xuXG50aGlzLlRyYWNlc0hhbmRsZXIgPSB7fTtcblxudGhpcy5UcmFjZXNUZW1wbGF0ZSA9IHt9O1xuXG50aGlzLkluc3RhbmNlZm9ybVRlbXBsYXRlID0ge307XG5cbnRoaXMuSW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUgPSB7fTtcblxudGhpcy5JbnN0YW5jZVNpZ25UZXh0ID0ge307XG5cbnRoaXMuUmVsYXRlZEluc3RhbmNlcyA9IHt9O1xuXG50aGlzLlJlbGF0ZWRSZWNvcmRzID0ge307XG5cbnRoaXMuSW5zdGFuY2VNYWNybyA9IHtcbiAgY29udGV4dDoge31cbn07XG5cbnRoaXMuVHJhY2VzTWFuYWdlciA9IHt9O1xuXG5JbnN0YW5jZVNpZ25UZXh0LmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nID0gZnVuY3Rpb24oZmllbGRfZm9ybXVsYSkge1xuICByZXR1cm4gKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcInt0cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xIHx8IChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7c2lnbmF0dXJlLnRyYWNlcy5cIikgOiB2b2lkIDApID4gLTEgfHwgKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcInt5aWppYW5sYW46XCIpIDogdm9pZCAwKSA+IC0xIHx8IChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7XFxcInlpamlhbmxhblxcXCI6XCIpIDogdm9pZCAwKSA+IC0xIHx8IChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7J3lpamlhbmxhbic6XCIpIDogdm9pZCAwKSA+IC0xO1xufTtcblxuSW5zdGFuY2VTaWduVGV4dC5pbmNsdWRlc09waW5pb25GaWVsZCA9IGZ1bmN0aW9uKGZvcm0sIGZvcm1fdmVyc2lvbikge1xuICB2YXIgX2Zvcm1fdmVyc2lvbiwgZmllbGRfZm9ybXVsYXMsIGZpZWxkcztcbiAgZmllbGRfZm9ybXVsYXMgPSBuZXcgQXJyYXkoKTtcbiAgX2Zvcm1fdmVyc2lvbiA9IHt9O1xuICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgX2Zvcm1fdmVyc2lvbiA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZvcm1cbiAgICB9KSwgZm9ybV92ZXJzaW9uKTtcbiAgfSBlbHNlIHtcbiAgICBfZm9ybV92ZXJzaW9uID0gZGIuZm9ybV92ZXJzaW9ucy5maW5kT25lKHtcbiAgICAgIF9pZDogZm9ybV92ZXJzaW9uLFxuICAgICAgZm9ybTogZm9ybVxuICAgIH0pO1xuICB9XG4gIGZpZWxkcyA9IChfZm9ybV92ZXJzaW9uICE9IG51bGwgPyBfZm9ybV92ZXJzaW9uLmZpZWxkcyA6IHZvaWQgMCkgfHwgW107XG4gIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmIChmLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZygnaWdub3JlIG9waW5pb24gZmllbGQgaW4gdGFibGUnKTtcbiAgICB9IGVsc2UgaWYgKGYudHlwZSA9PT0gJ3NlY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZiAhPSBudWxsID8gKHJlZiA9IGYuZmllbGRzKSAhPSBudWxsID8gcmVmLmZvckVhY2goZnVuY3Rpb24oZjEpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkX2Zvcm11bGFzLnB1c2goZjEuZm9ybXVsYSk7XG4gICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpZWxkX2Zvcm11bGFzLnB1c2goZi5mb3JtdWxhKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gXy5zb21lKGZpZWxkX2Zvcm11bGFzLCBmdW5jdGlvbihmaWVsZF9mb3JtdWxhKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSk7XG4gIH0pO1xufTtcbiIsImRiLmF1dGhfdG9rZW5zID0gbmV3IE1ldGVvci5Db2xsZWN0aW9uKCdhdXRoX3Rva2VucycpIiwiSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlID0ge307XHJcblxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmluc3RhbmNlX2F0dGFjaG1lbnQgPSBcIlwiXCJcclxuXHQ8dHI+XHJcblx0XHQ8dGQgY2xhc3M9XCJpbnMtYXR0YWNoLXZpZXdcIj5cclxuXHRcdFx0PGEgaHJlZj1cInt7aW5zX2F0dGFjaF9kb3dubG9hZF91cmwgX2lkIGFic29sdXRlfX1cIiBjbGFzcz1cImluc19hdHRhY2hfaHJlZlwiIHRhcmdldD1cIl9wYXJlbnRcIiBkYXRhLW5hbWU9XCJ7e3RoaXMubmFtZX19XCIgZGF0YS10eXBlPVwie3t0aGlzLm9yaWdpbmFsLnR5cGV9fVwiIGRhdGEtaWQ9XCJ7e19pZH19XCI+e3t0aGlzLm5hbWV9fTwvYT5cclxuXHRcdDwvdGQ+XHJcblx0PC90cj5cclxuXCJcIlwiXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuYWZTZWxlY3RVc2VyUmVhZCA9IFwiXCJcIlxyXG5cdDxkaXYgY2xhc3M9J3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnPnt7dmFsdWV9fTwvZGl2PlxyXG5cIlwiXCJcclxuXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuYWZGb3JtR3JvdXBSZWFkID0gXCJcIlwiXHJcblx0PGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+XHJcblx0XHR7eyN3aXRoIGdldEZpZWxkIHRoaXMubmFtZX19XHJcblx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWN0aW9uJ319XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdzZWN0aW9uIGNhbGxvdXQgY2FsbG91dC1kZWZhdWx0Jz5cclxuXHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Zl9sYWJlbCB0aGlzfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHQ8cD57e3tkZXNjcmlwdGlvbn19fTwvcD5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsIHBhbmVsLWRlZmF1bHQgc3RlZWRvcy10YWJsZVwiPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiIHN0eWxlPVwicGFkZGluZzowcHg7XCI+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsLWhlYWRpbmdcIiA+XHJcblx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwnPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZGVzY3JpcHRpb25cIj57e3tkZXNjcmlwdGlvbn19fTwvc3Bhbj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicmVhZG9ubHktdGFibGVcIiBzdHlsZT1cInBhZGRpbmc6MHB4O292ZXJmbG93LXg6YXV0bztcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRhYmxlIHR5cGU9J3RhYmxlJyBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVwiIHN0eWxlPSdtYXJnaW4tYm90dG9tOjBweDsnIHt7dGhpcy5hdHRzfX0gaWQ9XCJ7e3RoaXMuY29kZX19VGFibGVcIiBuYW1lPVwie3t0aGlzLmNvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7dGhpcy5uYW1lfX1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGhlYWQgaWQ9XCJ7e3RoaXMubmFtZX19VGhlYWRcIiBuYW1lPVwie3t0aGlzLm5hbWV9fVRoZWFkXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZVRoZWFkIHRoaXN9fX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3RoZWFkPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDx0Ym9keSBpZD1cInt7dGhpcy5uYW1lfX1UYm9keVwiIG5hbWU9XCJ7e3RoaXMubmFtZX19VGJvZHlcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlQm9keSB0aGlzfX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0e3sjaWYgc2hvd0xhYmVsfX1cclxuXHRcdFx0XHRcdFx0PGxhYmVsPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J3t7Z2V0Q2ZDbGFzcyB0aGlzfX0gZm9ybS1jb250cm9sJyByZWFkb25seSBkaXNhYmxlZD57e3tnZXRWYWx1ZSBjb2RlfX19PC9kaXY+XHJcblx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHR7ey9pZn19XHJcblx0XHR7ey93aXRofX1cclxuXHQ8L2Rpdj5cclxuXCJcIlwiXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuYWZGb3JtR3JvdXAgPSBcIlwiXCJcclxuXHJcblx0e3sjd2l0aCBnZXRGaWVsZCB0aGlzLm5hbWV9fVxyXG5cdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VjdGlvbid9fVxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdzZWN0aW9uIGNhbGxvdXQgY2FsbG91dC1kZWZhdWx0Jz5cclxuXHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Zl9sYWJlbCB0aGlzfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHQ8cD57e3tkZXNjcmlwdGlvbn19fTwvcD5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG4gIFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3RhYmxlJ319XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicGFuZWwgcGFuZWwtZGVmYXVsdCBzdGVlZG9zLXRhYmxlXCI+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbC1ib2R5XCIgc3R5bGU9XCJwYWRkaW5nOjBweDtcIj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicGFuZWwtaGVhZGluZ1wiID5cclxuXHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCc+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJkZXNjcmlwdGlvblwiPnt7e2Rlc2NyaXB0aW9ufX19PC9zcGFuPlxyXG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJyZWFkb25seS10YWJsZVwiIHN0eWxlPVwicGFkZGluZzowcHg7b3ZlcmZsb3cteDphdXRvO1wiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGFibGUgdHlwZT0ndGFibGUnIGNsYXNzPVwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtY29uZGVuc2VkIGF1dG9mb3JtLXRhYmxlXCIgc3R5bGU9J21hcmdpbi1ib3R0b206MHB4Oycge3t0aGlzLmF0dHN9fSBpZD1cInt7dGhpcy5jb2RlfX1UYWJsZVwiIG5hbWU9XCJ7e3RoaXMuY29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3t0aGlzLm5hbWV9fVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDx0aGVhZCBpZD1cInt7dGhpcy5uYW1lfX1UaGVhZFwiIG5hbWU9XCJ7e3RoaXMubmFtZX19VGhlYWRcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlVGhlYWQgdGhpc319fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvdGhlYWQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PHRib2R5IGlkPVwie3t0aGlzLm5hbWV9fVRib2R5XCIgbmFtZT1cInt7dGhpcy5uYW1lfX1UYm9keVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVCb2R5IHRoaXN9fX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3Rib2R5PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L3RhYmxlPlxyXG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnaW5wdXQnfX1cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIiBkYXRhLXJlcXVpcmVkPVwie3sjaWYgaXNfcmVxdWlyZWR9fXRydWV7ey9pZn19XCI+XHJcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdHt7I2lmIGlzX3RleHRhcmVhfX1cclxuXHRcdFx0XHRcdFx0XHRcdDx0ZXh0YXJlYSB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIge3tnZXRQZXJtaXNzaW9ucyBjb2RlfX0gZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPjwvdGV4dGFyZWE+XHJcblx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdHt7I3VubGVzcyBpc190ZXh0YXJlYX19XHJcblx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInRleHRcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIge3tnZXRQZXJtaXNzaW9ucyBjb2RlfX0gZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdHt7L3VubGVzc319XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ251bWJlcid9fVxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cIm51bWJlclwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2RhdGUnfX1cclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIGRhdGEtdHlwZT1cImRhdGVcIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2RhdGVUaW1lJ319XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXR5cGU9J2RhdGV0aW1lJyBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3Bhc3N3b3JkJ319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWxlY3QnfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PHNlbGVjdCBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PG9wdGlvbiB2YWx1ZT1cInt7dmFsdWV9fVwiPnt7bGFiZWx9fTwvb3B0aW9uPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3NlbGVjdD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAncmFkaW8nfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImFmLXJhZGlvLWdyb3VwXCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cclxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmUgZml4LWluZGVudFwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cInt7dmFsdWV9fVwiIG5hbWU9XCJ7ey4uL2NvZGV9fVwiIGNsYXNzPVwicmFkaW8taW5saW5lIGZpeC1pbmRlbnRcIj4ge3tsYWJlbH19PC9sYWJlbD5cclxuICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svZWFjaH19XHJcbiAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnbXVsdGlTZWxlY3QnfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImFmLWNoZWNrYm94LWdyb3VwXCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjaGVja2JveC1pbmxpbmUgZml4LWluZGVudFwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cInt7dmFsdWV9fVwiIG5hbWU9XCJ7ey4uL2NvZGV9fVwiIGNsYXNzPVwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcIj4ge3tsYWJlbH19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svZWFjaH19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndXJsJ319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidXJsXCIgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnZW1haWwnfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJlbWFpbFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2NoZWNrYm94J319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJjaGVja2JveFwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cInRydWVcIiBuYW1lPVwie3tjb2RlfX1cIiBjbGFzcz1cImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XCI+PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSd7e2dldENmQ2xhc3MgdGhpc319IGZvcm0tY29udHJvbCcgcmVhZG9ubHkgZGlzYWJsZWQ+e3t7Z2V0VmFsdWUgY29kZX19fTwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHR7ey9pZn19XHJcblx0XHR7ey93aXRofX1cclxuXCJcIlwiXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlID0gKHRlbXBhbHRlTmFtZSwgc3RlZWRvc0RhdGEpIC0+XHJcblx0dGVtcGxhdGUgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGVbdGVtcGFsdGVOYW1lXVxyXG5cclxuXHR0ZW1wbGF0ZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0ZW1wbGF0ZSwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHR0ZW1wbGF0ZVJlbmRlckZ1bmN0aW9uID0gZXZhbCh0ZW1wbGF0ZUNvbXBpbGVkKTtcclxuXHJcblx0VGVtcGxhdGVbdGVtcGFsdGVOYW1lXSA9IG5ldyBCbGF6ZS5UZW1wbGF0ZSh0ZW1wYWx0ZU5hbWUsIHRlbXBsYXRlUmVuZGVyRnVuY3Rpb24pO1xyXG5cdFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cdFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0uaGVscGVycyBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW5zdGFuY2VTaWduVGV4dCA9IChzdGVlZG9zRGF0YSktPlxyXG5cdGluc3RhbmNlU2lnblRleHRIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW5zdGFuY2Vfc2lnbl90ZXh0Lmh0bWwnKVxyXG5cclxuXHRpbnN0YW5jZVNpZ25UZXh0Q29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGluc3RhbmNlU2lnblRleHRIdG1sLCB7aXNCb2R5OiB0cnVlfSk7XHJcblxyXG5cdGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbiA9IGV2YWwoaW5zdGFuY2VTaWduVGV4dENvbXBpbGVkKTtcclxuXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dCA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlU2lnblRleHRcIiwgaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uKTtcclxuXHRUZW1wbGF0ZS5pbnN0YW5jZVNpZ25UZXh0LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHRUZW1wbGF0ZS5pbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMgSW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW1hZ2VTaWduID0gKHN0ZWVkb3NEYXRhKSAtPlxyXG5cdGltYWdlU2lnbkh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbWFnZV9zaWduLmh0bWwnKVxyXG5cdGltYWdlU2lnbkNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbWFnZVNpZ25IdG1sLCB7aXNCb2R5OiB0cnVlfSk7XHJcblx0aW1hZ2VTaWduUmVuZGVyRnVuY3Rpb24gPSBldmFsKGltYWdlU2lnbkNvbXBpbGVkKTtcclxuXHRUZW1wbGF0ZS5pbWFnZVNpZ24gPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbWFnZVNpZ25cIiwgaW1hZ2VTaWduUmVuZGVyRnVuY3Rpb24pO1xyXG5cdFRlbXBsYXRlLmltYWdlU2lnbi5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblx0VGVtcGxhdGUuaW1hZ2VTaWduLmhlbHBlcnMgSW1hZ2VTaWduLmhlbHBlcnNcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVUcmFjZXNIYW5sZGVyID0gKHN0ZWVkb3NEYXRhKSAtPlxyXG5cdHRyYWNlc0hhbmxkZXJIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvdHJhY2VzX2hhbmRsZXIuaHRtbCcpXHJcblx0dHJhY2VzSGFubGRlckNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0cmFjZXNIYW5sZGVySHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cdHRyYWNlc0hhbmxkZXJSZW5kZXJGdW5jdGlvbiA9IGV2YWwodHJhY2VzSGFubGRlckNvbXBpbGVkKTtcclxuXHRUZW1wbGF0ZS5pbnN0YW5jZV90cmFjZXNfaGFuZGxlciA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlX3RyYWNlc19oYW5kbGVyXCIsIHRyYWNlc0hhbmxkZXJSZW5kZXJGdW5jdGlvbik7XHJcblx0VGVtcGxhdGUuaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXIuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cdFRlbXBsYXRlLmluc3RhbmNlX3RyYWNlc19oYW5kbGVyLmhlbHBlcnMgVHJhY2VzSGFuZGxlci5oZWxwZXJzXHJcblxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmluaXQgPSAoc3RlZWRvc0RhdGEpIC0+XHJcblx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmU2VsZWN0VXNlclJlYWRcIiwgc3RlZWRvc0RhdGEpO1xyXG5cclxuXHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZkZvcm1Hcm91cFwiLCBzdGVlZG9zRGF0YSk7XHJcblxyXG5cdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZkZvcm1Hcm91cFJlYWRcIiwgc3RlZWRvc0RhdGEpO1xyXG5cdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImluc3RhbmNlX2F0dGFjaG1lbnRcIiwge2Fic29sdXRlOiBzdGVlZG9zRGF0YS5hYnNvbHV0ZX0pO1xyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUltYWdlU2lnbihzdGVlZG9zRGF0YSlcclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVUcmFjZXNIYW5sZGVyKHN0ZWVkb3NEYXRhKTtcclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbnN0YW5jZVNpZ25UZXh0KHN0ZWVkb3NEYXRhKVxyXG5cclxuZ2V0TGlua1RleHQgPSAoaXRlbSwgbGFiZWwsIGRldGFpbF91cmwpLT5cclxuXHRpZiBkZXRhaWxfdXJsXHJcblx0XHRkZXRhaWxfdXJsID0gZGV0YWlsX3VybC5yZXBsYWNlKFwie19pZH1cIiwgaXRlbS5faWQpXHJcblx0XHRpZiAhL15odHRwKHM/KTpcXC9cXC8vLnRlc3QoZGV0YWlsX3VybClcclxuXHRcdFx0ZGV0YWlsX3VybCA9IFN0ZWVkb3MuYWJzb2x1dGVVcmwoZGV0YWlsX3VybClcclxuXHRcdHJldHVybiAnPGEgaHJlZj1cIicrZGV0YWlsX3VybCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JytsYWJlbCsnPC9hPic7XHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuIGxhYmVsXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VmFsdWUgPSAodmFsdWUsIGZpZWxkLCBsb2NhbGUsIHV0Y09mZnNldCkgLT5cclxuXHRpZiAhdmFsdWUgJiYgdmFsdWUgIT0gZmFsc2VcclxuXHRcdHJldHVybiAnJ1xyXG5cdHN3aXRjaCBmaWVsZC50eXBlXHJcblx0XHR3aGVuICdlbWFpbCdcclxuXHRcdFx0dmFsdWUgPSBpZiB2YWx1ZSB0aGVuICc8YSBocmVmPVxcJ21haWx0bzonICsgdmFsdWUgKyAnXFwnPicgKyB2YWx1ZSArICc8L2E+JyBlbHNlICcnXHJcblx0XHR3aGVuICd1cmwnXHJcblx0XHRcdGlmIHZhbHVlXHJcblx0XHRcdFx0aWYgdmFsdWUuaW5kZXhPZihcImh0dHBcIikgPT0gMFxyXG5cdFx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0XHRcdHZhbHVlID0gXCI8YSBocmVmPSdcIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuXHRcdFx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBcIjxhIGhyZWY9JycgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dmFsdWUgPSBcIjxhIGhyZWY9J2h0dHA6Ly9cIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHZhbHVlID0gJydcclxuXHRcdHdoZW4gJ2dyb3VwJ1xyXG5cdFx0XHRpZiBmaWVsZC5pc19tdWx0aXNlbGVjdFxyXG5cdFx0XHRcdHZhbHVlID0gdmFsdWU/LmdldFByb3BlcnR5KFwiZnVsbG5hbWVcIikudG9TdHJpbmcoKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8uZnVsbG5hbWVcclxuXHRcdHdoZW4gJ3VzZXInXHJcblx0XHRcdGlmIGZpZWxkLmlzX211bHRpc2VsZWN0XHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8uZ2V0UHJvcGVydHkoXCJuYW1lXCIpLnRvU3RyaW5nKClcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHZhbHVlID0gdmFsdWU/Lm5hbWVcclxuXHRcdHdoZW4gJ3Bhc3N3b3JkJ1xyXG5cdFx0XHR2YWx1ZSA9ICcqKioqKionXHJcblx0XHR3aGVuICdjaGVja2JveCdcclxuXHRcdFx0aWYgdmFsdWUgJiYgdmFsdWUgIT0gJ2ZhbHNlJ1xyXG5cdFx0XHRcdHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIsIHt9LCBsb2NhbGUpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X25vXCIsIHt9LCBsb2NhbGUpXHJcblx0XHR3aGVuICdkYXRlVGltZSdcclxuXHRcdFx0aWYgdmFsdWUgJiYgdmFsdWUubGVuZ3RoID09IDE2XHJcblx0XHRcdFx0dCA9IHZhbHVlLnNwbGl0KFwiVFwiKVxyXG5cdFx0XHRcdHQwID0gdFswXS5zcGxpdChcIi1cIik7XHJcblx0XHRcdFx0dDEgPSB0WzFdLnNwbGl0KFwiOlwiKTtcclxuXHJcblx0XHRcdFx0eWVhciA9IHQwWzBdO1xyXG5cdFx0XHRcdG1vbnRoID0gdDBbMV07XHJcblx0XHRcdFx0ZGF0ZSA9IHQwWzJdO1xyXG5cdFx0XHRcdGhvdXJzID0gdDFbMF07XHJcblx0XHRcdFx0c2Vjb25kcyA9IHQxWzFdO1xyXG5cclxuXHRcdFx0XHR2YWx1ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF0ZSwgaG91cnMsIHNlY29uZHMpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxyXG5cclxuXHRcdFx0dmFsdWUgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZSh2YWx1ZSwgdXRjT2Zmc2V0KTtcclxuXHRcdHdoZW4gJ2lucHV0J1xyXG5cdFx0XHRpZiBmaWVsZC5pc190ZXh0YXJlYVxyXG5cdFx0XHRcdHZhbHVlID0gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24odmFsdWUpKVxyXG5cdFx0d2hlbiAnbnVtYmVyJ1xyXG5cdFx0XHRpZiB2YWx1ZSBvciB2YWx1ZSA9PSAwXHJcblx0XHRcdFx0dmFsdWUgPSBTdGVlZG9zLm51bWJlclRvU3RyaW5nIHZhbHVlLCBmaWVsZC5kaWdpdHNcclxuXHRcdHdoZW4gJ29kYXRhJ1xyXG5cdFx0XHRkZXRhaWxfdXJsID0gZmllbGQuZGV0YWlsX3VybFxyXG5cdFx0XHRpZiBmaWVsZC5pc19tdWx0aXNlbGVjdFxyXG5cdFx0XHRcdHZhbHVlID0gXy5tYXAgdmFsdWUsIChpdGVtKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gZ2V0TGlua1RleHQoaXRlbSwgaXRlbVsnQGxhYmVsJ10sIGRldGFpbF91cmwpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR2YWx1ZSA9IGdldExpbmtUZXh0KHZhbHVlLCB2YWx1ZVsnQGxhYmVsJ10sIGRldGFpbF91cmwpXHJcblx0XHR3aGVuICdodG1sJ1xyXG5cdFx0XHR2YWx1ZSA9IGlmIHZhbHVlIHRoZW4gXCI8ZGl2IGNsYXNzPVxcXCJzdGVlZG9zLWh0bWxcXFwiPiN7dmFsdWV9PC9kaXY+XCIgZWxzZSAnJ1xyXG5cclxuXHRyZXR1cm4gdmFsdWU7XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwgPSAoZmllbGRzLCBjb2RlKSAtPlxyXG5cdGZpZWxkID0gZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpXHJcblx0aWYgZmllbGRcclxuXHRcdGlmIGZpZWxkLm5hbWVcclxuXHRcdFx0cmV0dXJuIGZpZWxkLm5hbWVcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGZpZWxkLmNvZGVcclxuXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbiA9IChpbnN0YW5jZSktPlxyXG5cdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cclxuXHRmb3JtX3ZlcnNpb24gPSB7fVxyXG5cclxuXHRmb3JtX2ZpZWxkcyA9IFtdO1xyXG5cclxuXHRpZiBmb3JtLmN1cnJlbnQuX2lkID09IGluc3RhbmNlLmZvcm1fdmVyc2lvblxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gZm9ybS5jdXJyZW50XHJcblx0ZWxzZVxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gXy53aGVyZShmb3JtLmhpc3RvcnlzLCB7X2lkOiBpbnN0YW5jZS5mb3JtX3ZlcnNpb259KVswXVxyXG5cclxuXHRmb3JtX3ZlcnNpb24uZmllbGRzLmZvckVhY2ggKGZpZWxkKS0+XHJcblx0XHRpZiBmaWVsZC50eXBlID09ICdzZWN0aW9uJ1xyXG5cdFx0XHRmb3JtX2ZpZWxkcy5wdXNoKGZpZWxkKTtcclxuXHRcdFx0aWYgZmllbGQuZmllbGRzXHJcblx0XHRcdFx0ZmllbGQuZmllbGRzLmZvckVhY2ggKGYpIC0+XHJcblx0XHRcdFx0XHRmb3JtX2ZpZWxkcy5wdXNoKGYpO1xyXG5cdFx0ZWxzZSBpZiBmaWVsZC50eXBlID09ICd0YWJsZSdcclxuXHRcdFx0ZmllbGRbJ3NmaWVsZHMnXSA9IGZpZWxkWydmaWVsZHMnXVxyXG5cdFx0XHRkZWxldGUgZmllbGRbJ2ZpZWxkcyddXHJcblx0XHRcdGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRmb3JtX2ZpZWxkcy5wdXNoKGZpZWxkKTtcclxuXHJcblx0Zm9ybV92ZXJzaW9uLmZpZWxkcyA9IGZvcm1fZmllbGRzO1xyXG5cclxuXHRyZXR1cm4gZm9ybV92ZXJzaW9uO1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEZsb3dWZXJzaW9uID0gKGluc3RhbmNlKS0+XHJcblx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XHJcblx0Zmxvd192ZXJzaW9uID0ge31cclxuXHRpZiBmbG93LmN1cnJlbnQuX2lkID09IGluc3RhbmNlLmZsb3dfdmVyc2lvblxyXG5cdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50XHJcblx0ZWxzZVxyXG5cdFx0Zmxvd192ZXJzaW9uID0gXy53aGVyZShmbG93Lmhpc3RvcnlzLCB7X2lkOiBpbnN0YW5jZS5mbG93X3ZlcnNpb259KVswXVxyXG5cclxuXHRyZXR1cm4gZmxvd192ZXJzaW9uO1xyXG5cclxuXHJcbl9nZXRWaWV3SHRtbCA9IChwYXRoKSAtPlxyXG5cdHZpZXdIdG1sID0gQXNzZXRzLmdldFRleHQocGF0aClcclxuXHJcblx0aWYgdmlld0h0bWxcclxuXHRcdHZpZXdIdG1sID0gdmlld0h0bWwucmVwbGFjZSgvPHRlbXBsYXRlW1xcd1xcc1xcXCJcXD0nXSs+L2ksXCJcIikucmVwbGFjZSgvPFxcL3RlbXBsYXRlPi9pLFwiXCIpXHJcblxyXG5cdHJldHVybiB2aWV3SHRtbDtcclxuXHJcbl9nZXRMb2NhbGUgPSAodXNlciktPlxyXG5cdGlmIHVzZXI/LmxvY2FsZT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnemgtY24nXHJcblx0XHRsb2NhbGUgPSBcInpoLUNOXCJcclxuXHRlbHNlIGlmIHVzZXI/LmxvY2FsZT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnZW4tdXMnXHJcblx0XHRsb2NhbGUgPSBcImVuXCJcclxuXHRlbHNlXHJcblx0XHRsb2NhbGUgPSBcInpoLUNOXCJcclxuXHRyZXR1cm4gbG9jYWxlXHJcblxyXG5cclxuX2dldFJlcXVpcmVkRmllbGRzID0gKGZpZWxkcywgcmV2KS0+XHJcblx0aWYgIXJldlxyXG5cdFx0cmV2ID0gW107XHJcblxyXG5cdGZpZWxkcy5mb3JFYWNoIChmaWVsZCktPlxyXG5cdFx0aWYgZmllbGQudHlwZSA9PSAnc2VjdGlvbidcclxuXHRcdFx0X2dldFJlcXVpcmVkRmllbGRzKGZpZWxkLmZpZWxkcywgcmV2KVxyXG5cdFx0ZWxzZSBpZiBmaWVsZC50eXBlID09ICd0YWJsZSdcclxuXHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIGZpZWxkLmlzX3JlcXVpcmVkXHJcblx0XHRcdFx0cmV2LnB1c2ggZmllbGQuY29kZVxyXG5cdHJldHVybiByZXY7XHJcblxyXG5fZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMgPSAoZmllbGRzLCBzdGVwcyktPlxyXG5cdHN0YXJ0U3RlcCA9IHN0ZXBzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJzdGVwX3R5cGVcIixcInN0YXJ0XCIpXHJcblxyXG5cdGVkaXRhYmxlQ29kZSA9IFtdXHJcblxyXG5cdF8ua2V5cyhzdGFydFN0ZXAucGVybWlzc2lvbnMpLmZvckVhY2ggKGtleSktPlxyXG5cdFx0aWYgc3RhcnRTdGVwLnBlcm1pc3Npb25zW2tleV0gPT0gJ2VkaXRhYmxlJ1xyXG5cdFx0XHRlZGl0YWJsZUNvZGUucHVzaCBrZXlcclxuXHJcblx0cmV0dXJuIGVkaXRhYmxlQ29kZVxyXG5cclxuX2dldFN0YXJ0U3RlcFJlcXVpcmVkRmllbGRzID0gKGZpZWxkcywgc3RlcHMpLT5cclxuXHRyZXF1aXJlZEZpZWxkcyA9IF9nZXRSZXF1aXJlZEZpZWxkcyhmaWVsZHMpXHJcblxyXG5cdGVkaXRhYmxlQ29kZSA9IF9nZXRTdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyhmaWVsZHMsIHN0ZXBzKVxyXG5cclxuXHRyZXR1cm4gXy5pbnRlcnNlY3Rpb24ocmVxdWlyZWRGaWVsZHMsIGVkaXRhYmxlQ29kZSlcclxuXHJcbl9nZXRUZW1wbGF0ZURhdGEgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKS0+XHJcblx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRmb3JtX3ZlcnNpb24gPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbihpbnN0YW5jZSlcclxuXHRlbHNlXHJcblx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbihpbnN0YW5jZSlcclxuXHJcblx0bG9jYWxlID0gX2dldExvY2FsZSh1c2VyKVxyXG5cclxuXHRzdGVlZG9zRGF0YSA9IHt9XHJcblxyXG5cdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0c3RlZWRvc0RhdGEgPSBfLmNsb25lKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKSlcclxuXHRcdHN0ZWVkb3NEYXRhLmluc25hbWUgPSBpbnN0YW5jZS5uYW1lXHJcblx0XHRzdGVlZG9zRGF0YS5pbnNfc3RhdGUgPSBpbnN0YW5jZS5zdGF0ZVxyXG5cdFx0c3RlZWRvc0RhdGEuaW5zX2ZpbmFsX2RlY2lzaW9uID0gaW5zdGFuY2UuaW5zX2ZpbmFsX2RlY2lzaW9uXHJcblx0XHRzdGVlZG9zRGF0YS5pbnNfY29kZSA9IGluc3RhbmNlLmNvZGVcclxuXHRcdHN0ZWVkb3NEYXRhLmluc19pc19hcmNoaXZlZCA9IGluc3RhbmNlLmlzX2FyY2hpdmVkXHJcblx0XHRzdGVlZG9zRGF0YS5pbnNfaXNfZGVsZXRlZCA9IGluc3RhbmNlLmluc19pc19kZWxldGVkXHJcblx0XHRzdGVlZG9zRGF0YS5hcHBsaWNhbnRfbmFtZSA9IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lXHJcblx0XHRzdGVlZG9zRGF0YS5hcHBsaWNhbnRDb250ZXh0ID0gaW5zdGFuY2UuYXBwbGljYW50X25hbWVcclxuXHJcblx0c3RlZWRvc0RhdGEuaW5zdGFuY2UgPSBpbnN0YW5jZVxyXG5cdHN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbiA9IGZvcm1fdmVyc2lvblxyXG5cdHN0ZWVkb3NEYXRhLmxvY2FsZSA9IGxvY2FsZVxyXG5cdHN0ZWVkb3NEYXRhLnV0Y09mZnNldCA9IHVzZXIudXRjT2Zmc2V0XHJcblx0c3RlZWRvc0RhdGEuc3BhY2UgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdHN0ZWVkb3NEYXRhLnNlc3Npb25Vc2VySWQgPSB1c2VyLl9pZFxyXG5cclxuXHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdGlmIG9wdGlvbnM/LmVkaXRhYmxlXHJcblx0XHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlLmZvcm19KVxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogaW5zdGFuY2UuZmxvd30pXHJcblxyXG5cdFx0XHRzdGVlZG9zRGF0YS5zdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyA9IF9nZXRTdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyhmb3JtLmN1cnJlbnQuZmllbGRzLCBmbG93LmN1cnJlbnQuc3RlcHMpO1xyXG5cclxuXHRyZXR1cm4gc3RlZWRvc0RhdGE7XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZSA9IChkYXRlLCB1dGNPZmZzZXQpLT5cclxuXHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdHBhc3NpbmcgPSBmYWxzZTtcclxuXHRlbHNlXHJcblx0XHRwYXNzaW5nID0gdHJ1ZTtcclxuXHJcblx0aWYgIXV0Y09mZnNldCAmJiB1dGNPZmZzZXQgIT0wXHJcblx0XHR1dGNPZmZzZXQgPSA4XHJcblxyXG5cdHJldHVybiBtb21lbnQoZGF0ZSkudXRjT2Zmc2V0KHV0Y09mZnNldCwgcGFzc2luZykuZm9ybWF0KFwiWVlZWS1NTS1ERCBISDptbVwiKTtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZVZpZXcgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKS0+XHJcblxyXG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblxyXG5cdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gZmFsc2U7XHJcblxyXG5cdGlmIG9wdGlvbnM/LmFic29sdXRlXHJcblx0XHRzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XHJcblxyXG5cdGluc3RhbmNlVGVtcGxhdGUgPSBUZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUoaW5zdGFuY2UsIG9wdGlvbnM/LnRlbXBsYXRlTmFtZSk7XHJcblxyXG5cdGluc3RhbmNlVGVtcGxhdGUgPSBpbnN0YW5jZVRlbXBsYXRlLnJlcGxhY2UoL2FmU2VsZWN0VXNlci9nLFwiYWZTZWxlY3RVc2VyUmVhZFwiKVxyXG5cclxuXHRpZiAhb3B0aW9ucz8uZWRpdGFibGVcclxuXHRcdGluc3RhbmNlVGVtcGxhdGUgPSBpbnN0YW5jZVRlbXBsYXRlLnJlcGxhY2UoL2FmRm9ybUdyb3VwL2csXCJhZkZvcm1Hcm91cFJlYWRcIilcclxuXHJcblx0aW5zdGFuY2VDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoaW5zdGFuY2VUZW1wbGF0ZSwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHRpbnN0YW5jZVJlbmRlckZ1bmN0aW9uID0gZXZhbChpbnN0YW5jZUNvbXBpbGVkKTtcclxuXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlX3JlYWRvbmx5X3ZpZXdcIiwgaW5zdGFuY2VSZW5kZXJGdW5jdGlvbik7XHJcblxyXG5cdFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cclxuXHRUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3LmhlbHBlcnMgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVyc1xyXG5cclxuXHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuaW5pdChzdGVlZG9zRGF0YSk7XHJcblxyXG5cdGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3LCBzdGVlZG9zRGF0YSlcclxuXHJcblx0cmV0dXJuIFwiXCJcIlxyXG5cdFx0PGRpdiBpZD0naW5zdGFuY2Vmb3JtJyA+XHJcblx0XHRcdCN7Ym9keX1cclxuXHRcdDwvZGl2PlxyXG5cdFwiXCJcIlxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFRyYWNlc1ZpZXcgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKS0+XHJcblxyXG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXHJcblxyXG5cdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cdGlmIGZvcm0uaW5zdGFuY2Vfc3R5bGUgPT0gXCJ0YWJsZVwiIHx8IG9wdGlvbnM/LnRlbXBsYXRlTmFtZSA9PSBcInRhYmxlXCJcclxuXHRcdHRyYWNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS90cmFjZXNfdGFibGUuaHRtbCcpXHJcblx0ZWxzZVxyXG5cdFx0dHJhY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlcy5odG1sJylcclxuXHJcblx0dHJhY2VDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodHJhY2VzSHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHR0cmFjZVJlbmRlckZ1bmN0aW9uID0gZXZhbCh0cmFjZUNvbXBpbGVkKTtcclxuXHJcblx0VGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInRyYWNlX3JlYWRvbmx5X3ZpZXdcIiwgdHJhY2VSZW5kZXJGdW5jdGlvbik7XHJcblxyXG5cdFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cclxuXHRUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LmhlbHBlcnMgVHJhY2VzVGVtcGxhdGUuaGVscGVyc1xyXG5cclxuXHRib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldywgaW5zdGFuY2UudHJhY2VzKVxyXG5cclxuXHRyZXR1cm4gYm9keTtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRBdHRhY2htZW50VmlldyA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpLT5cclxuXHJcblx0c3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSlcclxuXHJcblx0YXR0YWNobWVudEh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbnN0YW5jZV9hdHRhY2htZW50cy5odG1sJylcclxuXHJcblx0YXR0YWNobWVudENvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShhdHRhY2htZW50SHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHRhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24gPSBldmFsKGF0dGFjaG1lbnRDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJhdHRhY2htZW50c19yZWFkb25seV92aWV3XCIsIGF0dGFjaG1lbnRSZW5kZXJGdW5jdGlvbik7XHJcblxyXG5cdFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cclxuXHRUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3LmhlbHBlcnMgSW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVyc1xyXG5cclxuXHRib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldylcclxuXHJcblx0cmV0dXJuIGJvZHk7XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXcgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKS0+XHJcblx0c3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSlcclxuXHJcblx0c3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcclxuXHJcblx0aWYgb3B0aW9ucz8uYWJzb2x1dGVcclxuXHRcdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gdHJ1ZTtcclxuXHJcblx0cmVsYXRlZEluc3RhbmNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9yZWxhdGVkX2luc3RhbmNlcy5odG1sJylcclxuXHJcblx0cmVsYXRlZEluc3RhbmNlc0NvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShyZWxhdGVkSW5zdGFuY2VzSHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHRyZWxhdGVkSW5zdGFuY2VzUmVuZGVyRnVuY3Rpb24gPSBldmFsKHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJyZWxhdGVkX2luc3RhbmNlc192aWV3XCIsIHJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbik7XHJcblxyXG5cdFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cclxuXHRUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LmhlbHBlcnMgUmVsYXRlZEluc3RhbmNlcy5oZWxwZXJzXHJcblxyXG5cdGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LCBzdGVlZG9zRGF0YSlcclxuXHJcblx0cmV0dXJuIGJvZHk7XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxyXG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXHJcblxyXG5cdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gZmFsc2U7XHJcblxyXG5cdGlmIG9wdGlvbnM/LmFic29sdXRlXHJcblx0XHRzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XHJcblxyXG5cdHJlbGF0ZWRSZWNvcmRzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3JlbGF0ZWRfcmVjb3Jkcy5odG1sJylcclxuXHJcblx0cmVsYXRlZFJlY29yZHNDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUocmVsYXRlZFJlY29yZHNIdG1sLCB7aXNCb2R5OiB0cnVlfSk7XHJcblxyXG5cdHJlbGF0ZWRSZWNvcmRzUmVuZGVyRnVuY3Rpb24gPSBldmFsKHJlbGF0ZWRSZWNvcmRzQ29tcGlsZWQpO1xyXG5cclxuXHRUZW1wbGF0ZS5yZWxhdGVkX3JlY29yZHNfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInJlbGF0ZWRfcmVjb3Jkc192aWV3XCIsIHJlbGF0ZWRSZWNvcmRzUmVuZGVyRnVuY3Rpb24pO1xyXG5cclxuXHRUZW1wbGF0ZS5yZWxhdGVkX3JlY29yZHNfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblxyXG5cdFRlbXBsYXRlLnJlbGF0ZWRfcmVjb3Jkc192aWV3LmhlbHBlcnMgUmVsYXRlZFJlY29yZHMuaGVscGVyc1xyXG5cclxuXHRib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcsIHN0ZWVkb3NEYXRhKVxyXG5cclxuXHRyZXR1cm4gYm9keTtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRPbkxvYWRTY3JpcHQgPSAoaW5zdGFuY2UpLT5cclxuXHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKVxyXG5cclxuXHRmb3JtX3NjcmlwdCA9IGZvcm1fdmVyc2lvbi5mb3JtX3NjcmlwdDtcclxuXHJcblx0aWYgZm9ybV9zY3JpcHQgJiYgZm9ybV9zY3JpcHQucmVwbGFjZSgvXFxuL2csXCJcIikucmVwbGFjZSgvXFxzL2csXCJcIikubGVuZ3RoID4gMFxyXG5cdFx0Zm9ybV9zY3JpcHQgPSBcIkNvcmVGb3JtID0ge307Q29yZUZvcm0uaW5zdGFuY2Vmb3JtID0ge307XCIgKyBmb3JtX3NjcmlwdFxyXG5cdFx0Zm9ybV9zY3JpcHQgKz0gXCI7aWYoQ29yZUZvcm0uZm9ybV9PbkxvYWQpe3dpbmRvdy5vbmxvYWQgPSBDb3JlRm9ybS5mb3JtX09uTG9hZCgpO31cIlxyXG5cdGVsc2VcclxuXHRcdGZvcm1fc2NyaXB0ID0gXCJcIlxyXG5cclxuXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VIdG1sID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxyXG5cclxuXHRib2R5ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xyXG5cclxuXHRvbkxvYWRTY3JpcHQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0T25Mb2FkU2NyaXB0KGluc3RhbmNlKTtcclxuXHJcblx0Y3JlYXRvclNlcnZpY2UgPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLndlYnNlcnZpY2VzPy5jcmVhdG9yPy51cmxcclxuXHRpbnNfcmVjb3JkX2lkcyA9IGluc3RhbmNlLnJlY29yZF9pZHNcclxuXHRsb2NhbGUgPSBfZ2V0TG9jYWxlKHVzZXIpO1xyXG5cdG9wZW5GaWxlU2NyaXB0ID0gXCJcIlwiXHJcblx0XHRcdGlmKHdpbmRvdy5pc05vZGUgJiYgaXNOb2RlKCkpe1xyXG5cdFx0XHRcdGF0dGFjaHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaW5zX2F0dGFjaF9ocmVmXCIpO1xyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBhdHRhY2hzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRcdGF0dGFjaCA9IGF0dGFjaHNbaV07XHJcblx0XHRcdFx0XHRhdHRhY2guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0XHRpZihpc0ltYWdlKHRoaXMuZGF0YXNldC50eXBlKSB8fCBpc0h0bWwodGhpcy5kYXRhc2V0LnR5cGUpKXtcclxuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcdFx0b3BlbldpbmRvdyhcIi9hcGkvZmlsZXMvaW5zdGFuY2VzL1wiICsgdGhpcy5kYXRhc2V0LmlkKTtcclxuXHRcdFx0XHRcdFx0fWVsc2UgaWYobndfY29yZS5jYW5PcGVuRmlsZSh0aGlzLmRhdGFzZXQubmFtZSkpe1xyXG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRud19jb3JlLm9wZW5GaWxlKHRoaXMuaHJlZiwgdGhpcy5kYXRhc2V0Lm5hbWUpXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGZsb3cgPSBcIiN7aW5zdGFuY2UuZmxvd31cIjtcclxuXHRcdFx0dmFyIHNwYWNlID0gXCIje2luc3RhbmNlLnNwYWNlfVwiO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpe1xyXG5cdFx0XHRcdGxldCBwYXR0ZXJuID0gUmVnRXhwKG5hbWUgKyBcIj0uW147XSpcIilcclxuXHRcdFx0XHRsZXQgbWF0Y2hlZCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChwYXR0ZXJuKVxyXG5cdFx0XHRcdGlmKG1hdGNoZWQpe1xyXG5cdFx0XHRcdFx0bGV0IGNvb2tpZSA9IG1hdGNoZWRbMF0uc3BsaXQoJz0nKVxyXG5cdFx0XHRcdFx0cmV0dXJuIGNvb2tpZVsxXVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gJydcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHJlY29yZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaW5zLXJlbGF0ZWQtcmVjb3Jkc1wiKTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHJlY29yZHMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0dmFyIHJlY29yZCA9IHJlY29yZHNbaV07XHJcblx0XHRcdFx0XHRyZWNvcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0XHR2YXIgY3JlYXRvclNlcnZpY2UgPSBcIiN7Y3JlYXRvclNlcnZpY2V9XCJcclxuXHRcdFx0XHRcdFx0dmFyIGluc19yZWNvcmRfaWRzID0gI3tKU09OLnN0cmluZ2lmeShpbnNfcmVjb3JkX2lkcyl9XHJcblx0XHRcdFx0XHRcdGlmKGNyZWF0b3JTZXJ2aWNlICYmIGluc19yZWNvcmRfaWRzICYmIGluc19yZWNvcmRfaWRzLmxlbmd0aCA+IDApe1xyXG5cdFx0XHRcdFx0XHRcdHZhciBvYmpjZXROYW1lID0gaW5zX3JlY29yZF9pZHNbMF0ub1xyXG5cdFx0XHRcdFx0XHRcdHZhciBpZCA9IGluc19yZWNvcmRfaWRzWzBdLmlkc1swXVxyXG5cdFx0XHRcdFx0XHRcdHZhciB1b2JqID0ge307XHJcblx0XHRcdFx0XHRcdFx0dW9ialtcIlgtVXNlci1JZFwiXSA9IGdldENvb2tpZShcIlgtVXNlci1JZFwiKTtcclxuXHRcdFx0XHRcdFx0XHR1b2JqW1wiWC1BdXRoLVRva2VuXCJdID0gZ2V0Q29va2llKFwiWC1BdXRoLVRva2VuXCIpO1xyXG5cdFx0XHRcdFx0XHRcdHJlZGlyZWN0VXJsID0gY3JlYXRvclNlcnZpY2UgKyBcImFwcC8tL1wiICsgb2JqY2V0TmFtZSArIFwiL3ZpZXcvXCIgKyBpZCArIFwiP1wiICsgJC5wYXJhbSh1b2JqKTtcclxuXHRcdFx0XHRcdFx0XHRvcGVuV2luZG93KHJlZGlyZWN0VXJsKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcIlwiXCI7XHJcblxyXG5cclxuXHRpZiAhU3RlZWRvcy5pc01vYmlsZSgpXHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcclxuXHRcdGlmIGZvcm0/Lmluc3RhbmNlX3N0eWxlID09ICd0YWJsZSdcclxuXHRcdFx0aW5zdGFuY2Vfc3R5bGUgPSBcImluc3RhbmNlLXRhYmxlXCJcclxuXHJcblx0aWYgb3B0aW9ucz8udGVtcGxhdGVOYW1lID09ICd0YWJsZSdcclxuXHRcdGluc3RhbmNlX3N0eWxlID0gXCJpbnN0YW5jZS10YWJsZVwiXHJcblxyXG5cdGlmIG9wdGlvbnM/Lmluc3RhbmNlX3N0eWxlXHJcblx0XHRpbnN0YW5jZV9zdHlsZSA9IG9wdGlvbnMuaW5zdGFuY2Vfc3R5bGVcclxuXHJcblx0aWYgIW9wdGlvbnMgfHwgb3B0aW9ucy5zaG93VHJhY2UgPT0gdHJ1ZVxyXG5cdFx0dHJhY2UgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VHJhY2VzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXHJcblx0ZWxzZVxyXG5cdFx0dHJhY2UgPSBcIlwiXHJcblxyXG5cdGluc3RhbmNlQm94U3R5bGUgPSBcIlwiO1xyXG5cclxuXHRpZiBpbnN0YW5jZSAmJiBpbnN0YW5jZS5maW5hbF9kZWNpc2lvblxyXG5cdFx0aWYgaW5zdGFuY2UuZmluYWxfZGVjaXNpb24gPT0gXCJhcHByb3ZlZFwiXHJcblx0XHRcdGluc3RhbmNlQm94U3R5bGUgPSBcImJveC1zdWNjZXNzXCJcclxuXHRcdGVsc2UgaWYgKGluc3RhbmNlLmZpbmFsX2RlY2lzaW9uID09IFwicmVqZWN0ZWRcIilcclxuXHRcdFx0aW5zdGFuY2VCb3hTdHlsZSA9IFwiYm94LWRhbmdlclwiXHJcblx0aWYgIW9wdGlvbnMgfHwgb3B0aW9ucy5zaG93QXR0YWNobWVudHMgPT0gdHJ1ZVxyXG5cdFx0YXR0YWNobWVudCA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRBdHRhY2htZW50Vmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXHJcblx0XHRyZWxhdGVkX2luc3RhbmNlcyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkSW5zdGFuY2VzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblx0XHRyZWxhdGVkX3JlY29yZHMgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucylcclxuXHRlbHNlXHJcblx0XHRhdHRhY2htZW50ID0gXCJcIlxyXG5cdFx0cmVsYXRlZF9pbnN0YW5jZXMgPSBcIlwiXHJcblx0XHRyZWxhdGVkX3JlY29yZHMgPSBcIlwiXHJcblxyXG5cclxuXHR3aWR0aCA9IFwiOTYwcHhcIlxyXG5cdCNcdOWmguaenOe7mXRhYmxl55qEcGFyZW506K6+572ud2lkdGjvvIzliJnkvJrlr7zoh7TpmL/ph4zkupHpgq7nrrHmmL7npLp0YWJsZSDlvILluLhcclxuXHRpZiBvcHRpb25zPy53aWR0aFxyXG5cdFx0d2lkdGggPSBcIlwiXHJcblxyXG5cdGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJzdGVlZG9zLWNzc1wiKVxyXG5cclxuXHRhbGxDc3NMaW5rID0gXCJcIlwiPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGNsYXNzPVwiX19tZXRlb3ItY3NzX19cIiBocmVmPVwiI3tjc3NIcmVmfVwiPlwiXCJcIlxyXG5cclxuXHR0cmFjZUNoZWNrID0gXCJcIlxyXG5cdGlmICFfLmlzRW1wdHkodHJhY2UpXHJcblx0XHR0cmFjZUNoZWNrID0gXCJjaGVja2VkXCJcclxuXHRpZiBvcHRpb25zPy50YWdnZXIgPT0gJ2VtYWlsJyB8fCBvcHRpb25zPy5lZGl0YWJsZVxyXG5cdFx0c2hvd1RyYWNlc0J0biA9IFwiXCJcclxuXHRlbHNlXHJcblx0XHRzaG93VHJhY2VzQnRuID0gXCJcIlwiXHJcblx0XHRcdDxkaXYgY2xhc3M9XCJuYXZpZ2F0aW9uLWJhciBidG4tZ3JvdXAgbm8tcHJpbnRcIiBzdHlsZT1cIm1pbi13aWR0aDogNjAwcHg7IHotaW5kZXg6IDk5OVwiPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJwcmludC10b29sXCI+XHJcblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjYngtbGFiZWxcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjYngtcHJpbnQgY2J4LXByaW50LWF0dGFjaG1lbnRzXCIgaWQ9XCJjYngtcHJpbnQtYXR0YWNobWVudHNcIiBjaGVja2VkPVwiY2hlY2tlZFwiPjxzcGFuPiN7VEFQaTE4bi5fXygnaW5zdGFuY2VfYXR0YWNobWVudCcsIHt9LCBsb2NhbGUpfTwvc3Bhbj48L2xhYmVsPlxyXG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY2J4LWxhYmVsXCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY2J4LXByaW50IGNieC1wcmludC10cmFjZXNcIiBpZD1cImNieC1wcmludC10cmFjZXNcIiBjaGVja2VkPVwiI3t0cmFjZUNoZWNrfVwiPjxzcGFuPiN7VEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92YWxfaGlzdG9yeScsIHt9LCBsb2NhbGUpfTwvc3Bhbj48L2xhYmVsPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XCJcIlwiXHJcblxyXG5cdHNob3dUcmFjZXNTY3JpcHQgPSBcIlwiXCJcclxuXHRcdCQoIGRvY3VtZW50ICkucmVhZHkoZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2J4LXByaW50LXRyYWNlcycpO1xyXG5cdFx0XHR2YXIgdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2luc3RhbmNlLXRyYWNlcycpWzBdO1xyXG5cdFx0XHRpZiAoYiAmJiBiLmNoZWNrZWQgJiYgdCl7XHJcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXHJcblx0XHRcdH0gZWxzZSBpZih0KXtcclxuXHRcdFx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGIpe1xyXG5cdFx0XHRcdGIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZSl7XHJcblx0XHRcdFx0XHRpZiAoZS50YXJnZXQuY2hlY2tlZCl7XHJcblx0XHRcdFx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdHZhciBhdHRhY2htZW50c0NoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC1hdHRhY2htZW50cycpO1xyXG5cdFx0XHR2YXIgYXR0YWNobWVudHNWaWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXR0YWNobWVudHMtc2VjdGlvbicpWzBdO1xyXG5cdFx0XHRpZiAoYXR0YWNobWVudHNDaGVja2JveCAmJiBhdHRhY2htZW50c0NoZWNrYm94LmNoZWNrZWQgJiYgYXR0YWNobWVudHNWaWV3KXtcclxuXHRcdFx0XHRhdHRhY2htZW50c1ZpZXcuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xyXG5cdFx0XHR9IGVsc2UgaWYoYXR0YWNobWVudHNWaWV3KXtcclxuXHRcdFx0XHRhdHRhY2htZW50c1ZpZXcuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXHJcblx0XHRcdH1cclxuXHRcdFx0aWYoYXR0YWNobWVudHNDaGVja2JveCl7XHJcblx0XHRcdFx0YXR0YWNobWVudHNDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihlKXtcclxuXHRcdFx0XHRcdGlmIChlLnRhcmdldC5jaGVja2VkKXtcclxuXHRcdFx0XHRcdFx0YXR0YWNobWVudHNWaWV3LnN0eWxlID0gJ2Rpc3BsYXk6IGJsb2NrOydcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFwiXCJcIlxyXG5cclxuXHRpZiBvcHRpb25zPy5zdHlsZXNcclxuXHRcdGFsbENzc0xpbmsgPSBcIlwiXHJcblxyXG5cdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlLmZvcm19KTtcclxuXHRmb3JtRGVzY3JpcHRpb25IdG1sID0gXCJcIlxyXG5cdGlmIGZvcm1cclxuXHRcdGZvcm1EZXNjcmlwdGlvbiA9IGZvcm0uZGVzY3JpcHRpb25cclxuXHRcdGlmIGZvcm1EZXNjcmlwdGlvblxyXG5cdFx0XHRmb3JtRGVzY3JpcHRpb24gPSBmb3JtRGVzY3JpcHRpb24ucmVwbGFjZSgvXFxuL2csXCI8YnIvPlwiKVxyXG5cdFx0XHRmb3JtRGVzY3JpcHRpb25IdG1sID0gXCJcIlwiXHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImJveC1oZWFkZXIgIHdpdGgtYm9yZGVyIGluc3RhbmNlLWhlYWRlclwiPlxyXG5cdFx0XHRcdFx0PGRpdj5cclxuXHRcdFx0XHRcdFx0I3tmb3JtRGVzY3JpcHRpb259XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcIlwiXCJcclxuXHJcblx0aHRtbCA9IFwiXCJcIlxyXG5cdFx0PCFET0NUWVBFIGh0bWw+XHJcblx0XHQ8aHRtbD5cclxuXHRcdFx0PGhlYWQ+XHJcblx0XHRcdFx0PG1ldGEgaHR0cC1lcXVpdj1cIkNvbnRlbnQtVHlwZVwiIGNvbnRlbnQ9XCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLThcIi8+XHJcblx0XHRcdFx0I3thbGxDc3NMaW5rfVxyXG5cdFx0XHRcdDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly93d3cuc3RlZWRvcy5jb20vd2Vic2l0ZS9saWJzL2pxdWVyeS5taW4uanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+PC9zY3JpcHQ+XHJcblx0XHRcdFx0PHNjcmlwdCBzcmM9XCIvanMvbndfY29yZS5qc1wiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj48L3NjcmlwdD5cclxuXHRcdFx0XHQje29wdGlvbnMucGx1Z2lucyB8fCBcIlwifVxyXG5cclxuXHRcdFx0XHQ8c3R5bGU+XHJcblx0XHRcdFx0XHQuc3RlZWRvc3tcclxuXHRcdFx0XHRcdFx0d2lkdGg6ICN7d2lkdGh9O1xyXG5cdFx0XHRcdFx0XHRtYXJnaW4tbGVmdDogYXV0bztcclxuXHRcdFx0XHRcdFx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC5pbnN0YW5jZS12aWV3IC5pbnN0YW5jZS1uYW1le1xyXG5cdFx0XHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0LmJveC10b29sc3tcclxuXHRcdFx0XHRcdFx0ZGlzcGxheTogbm9uZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC5ib3guY29sbGFwc2VkLWJveCAuYm94LWJvZHksLmJveC5jb2xsYXBzZWQtYm94IC5ib3gtZm9vdGVyIHtcclxuXHRcdFx0XHRcdCAgZGlzcGxheTogYmxvY2s7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ym9keXtcclxuXHRcdFx0XHRcdFx0YmFja2dyb3VuZDogYXp1cmUgIWltcG9ydGFudDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQuaW5zdGFuY2UtdmlldyAuaW5zdGFuY2UtdHJhY2Vze1xyXG5cdFx0XHRcdFx0XHRwYWRkaW5nLWxlZnQ6IDE1cHg7XHJcblx0XHRcdFx0XHRcdHBhZGRpbmctcmlnaHQ6IDE1cHg7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0I3tvcHRpb25zPy5zdHlsZXMgfHwgXCJcIn1cclxuXHRcdFx0XHQ8L3N0eWxlPlxyXG5cdFx0XHQ8L2hlYWQ+XHJcblx0XHRcdDxib2R5PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJzdGVlZG9zIHdvcmtmbG93IGluc3RhbmNlLXByaW50XCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwic2tpbi1ncmVlbiBza2luLWFkbWluLWx0ZVwiPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwid3JhcHBlclwiPlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJjb250ZW50LXdyYXBwZXJcIj5cclxuXHRcdFx0XHRcdFx0XHRcdCN7c2hvd1RyYWNlc0J0bn1cclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnN0YW5jZS1wcmludFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5zdGFuY2UgI3tpbnN0YW5jZV9zdHlsZX1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8Zm9ybSBuYW1lPVwiaW5zdGFuY2VGb3JtXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5zdGFuY2UtZm9ybSBib3ggI3tpbnN0YW5jZUJveFN0eWxlfVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQje2Zvcm1EZXNjcmlwdGlvbkh0bWx9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJib3gtYm9keVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2F0dGFjaG1lbnRzLXNlY3Rpb24nPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQje2F0dGFjaG1lbnR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCN7cmVsYXRlZF9pbnN0YW5jZXN9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCN7cmVsYXRlZF9yZWNvcmRzfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQje2JvZHl9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9mb3JtPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCN7dHJhY2V9XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2JvZHk+XHJcblx0XHRcdDxzY3JpcHQ+I3tvcGVuRmlsZVNjcmlwdH07I3tvbkxvYWRTY3JpcHR9OyN7c2hvd1RyYWNlc1NjcmlwdH08L3NjcmlwdD5cclxuXHRcdDwvaHRtbD5cclxuXHRcIlwiXCJcclxuXHJcblx0cmV0dXJuIGh0bWwiLCJ2YXIgX2dldExvY2FsZSwgX2dldFJlcXVpcmVkRmllbGRzLCBfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMsIF9nZXRTdGFydFN0ZXBSZXF1aXJlZEZpZWxkcywgX2dldFRlbXBsYXRlRGF0YSwgX2dldFZpZXdIdG1sLCBnZXRMaW5rVGV4dDsgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUgPSB7fTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmluc3RhbmNlX2F0dGFjaG1lbnQgPSBcIjx0cj5cXG5cdDx0ZCBjbGFzcz1cXFwiaW5zLWF0dGFjaC12aWV3XFxcIj5cXG5cdFx0PGEgaHJlZj1cXFwie3tpbnNfYXR0YWNoX2Rvd25sb2FkX3VybCBfaWQgYWJzb2x1dGV9fVxcXCIgY2xhc3M9XFxcImluc19hdHRhY2hfaHJlZlxcXCIgdGFyZ2V0PVxcXCJfcGFyZW50XFxcIiBkYXRhLW5hbWU9XFxcInt7dGhpcy5uYW1lfX1cXFwiIGRhdGEtdHlwZT1cXFwie3t0aGlzLm9yaWdpbmFsLnR5cGV9fVxcXCIgZGF0YS1pZD1cXFwie3tfaWR9fVxcXCI+e3t0aGlzLm5hbWV9fTwvYT5cXG5cdDwvdGQ+XFxuPC90cj5cIjtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmU2VsZWN0VXNlclJlYWQgPSBcIjxkaXYgY2xhc3M9J3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnPnt7dmFsdWV9fTwvZGl2PlwiO1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuYWZGb3JtR3JvdXBSZWFkID0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz5cXG5cdHt7I3dpdGggZ2V0RmllbGQgdGhpcy5uYW1lfX1cXG5cdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3NlY3Rpb24nfX1cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J3NlY3Rpb24gY2FsbG91dCBjYWxsb3V0LWRlZmF1bHQnPlxcblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Zl9sYWJlbCB0aGlzfX08L2xhYmVsPlxcblx0XHRcdFx0XHQ8cD57e3tkZXNjcmlwdGlvbn19fTwvcD5cXG5cdFx0XHRcdDwvZGl2Plxcblx0XHR7e2Vsc2V9fVxcblx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxcblx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwgcGFuZWwtZGVmYXVsdCBzdGVlZG9zLXRhYmxlXFxcIj5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtYm9keVxcXCIgc3R5bGU9XFxcInBhZGRpbmc6MHB4O1xcXCI+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtaGVhZGluZ1xcXCIgPlxcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsJz57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cXFwiZGVzY3JpcHRpb25cXFwiPnt7e2Rlc2NyaXB0aW9ufX19PC9zcGFuPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInJlYWRvbmx5LXRhYmxlXFxcIiBzdHlsZT1cXFwicGFkZGluZzowcHg7b3ZlcmZsb3cteDphdXRvO1xcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDx0YWJsZSB0eXBlPSd0YWJsZScgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVxcXCIgc3R5bGU9J21hcmdpbi1ib3R0b206MHB4Oycge3t0aGlzLmF0dHN9fSBpZD1cXFwie3t0aGlzLmNvZGV9fVRhYmxlXFxcIiBuYW1lPVxcXCJ7e3RoaXMuY29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7dGhpcy5uYW1lfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdDx0aGVhZCBpZD1cXFwie3t0aGlzLm5hbWV9fVRoZWFkXFxcIiBuYW1lPVxcXCJ7e3RoaXMubmFtZX19VGhlYWRcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVUaGVhZCB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90aGVhZD5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGJvZHkgaWQ9XFxcInt7dGhpcy5uYW1lfX1UYm9keVxcXCIgbmFtZT1cXFwie3t0aGlzLm5hbWV9fVRib2R5XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlQm9keSB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cXG5cdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0e3sjaWYgc2hvd0xhYmVsfX1cXG5cdFx0XHRcdFx0PGxhYmVsPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J3t7Z2V0Q2ZDbGFzcyB0aGlzfX0gZm9ybS1jb250cm9sJyByZWFkb25seSBkaXNhYmxlZD57e3tnZXRWYWx1ZSBjb2RlfX19PC9kaXY+XFxuXHRcdFx0e3svaWZ9fVxcblx0XHR7ey9pZn19XFxuXHR7ey93aXRofX1cXG48L2Rpdj5cIjtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwID0gXCJcXG57eyN3aXRoIGdldEZpZWxkIHRoaXMubmFtZX19XFxuXHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWN0aW9uJ319XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdzZWN0aW9uIGNhbGxvdXQgY2FsbG91dC1kZWZhdWx0Jz5cXG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cXG5cdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XFxuXHRcdFx0XHQ8L2Rpdj5cXG4gIFx0XHRcdFx0PC9kaXY+XFxuXHRcdHt7ZWxzZX19XFxuXHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3RhYmxlJ319XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1kZWZhdWx0IHN0ZWVkb3MtdGFibGVcXFwiPlxcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJwYW5lbC1ib2R5XFxcIiBzdHlsZT1cXFwicGFkZGluZzowcHg7XFxcIj5cXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJwYW5lbC1oZWFkaW5nXFxcIiA+XFxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwnPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVxcXCJkZXNjcmlwdGlvblxcXCI+e3t7ZGVzY3JpcHRpb259fX08L3NwYW4+XFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicmVhZG9ubHktdGFibGVcXFwiIHN0eWxlPVxcXCJwYWRkaW5nOjBweDtvdmVyZmxvdy14OmF1dG87XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0PHRhYmxlIHR5cGU9J3RhYmxlJyBjbGFzcz1cXFwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtY29uZGVuc2VkIGF1dG9mb3JtLXRhYmxlXFxcIiBzdHlsZT0nbWFyZ2luLWJvdHRvbTowcHg7JyB7e3RoaXMuYXR0c319IGlkPVxcXCJ7e3RoaXMuY29kZX19VGFibGVcXFwiIG5hbWU9XFxcInt7dGhpcy5jb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3t0aGlzLm5hbWV9fVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PHRoZWFkIGlkPVxcXCJ7e3RoaXMubmFtZX19VGhlYWRcXFwiIG5hbWU9XFxcInt7dGhpcy5uYW1lfX1UaGVhZFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZVRoZWFkIHRoaXN9fX1cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L3RoZWFkPlxcblx0XHRcdFx0XHRcdFx0XHRcdDx0Ym9keSBpZD1cXFwie3t0aGlzLm5hbWV9fVRib2R5XFxcIiBuYW1lPVxcXCJ7e3RoaXMubmFtZX19VGJvZHlcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVCb2R5IHRoaXN9fX1cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L3Rib2R5Plxcblx0XHRcdFx0XHRcdFx0XHQ8L3RhYmxlPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdDwvZGl2Plxcblx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnaW5wdXQnfX1cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgZGF0YS1yZXF1aXJlZD1cXFwie3sjaWYgaXNfcmVxdWlyZWR9fXRydWV7ey9pZn19XFxcIj5cXG5cdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHR7eyNpZiBpc190ZXh0YXJlYX19XFxuXHRcdFx0XHRcdFx0XHQ8dGV4dGFyZWEgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIge3tnZXRQZXJtaXNzaW9ucyBjb2RlfX0gZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+PC90ZXh0YXJlYT5cXG5cdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0e3sjdW5sZXNzIGlzX3RleHRhcmVhfX1cXG5cdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiB7e2dldFBlcm1pc3Npb25zIGNvZGV9fSBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHR7ey91bmxlc3N9fVxcblx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdudW1iZXInfX1cXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2RhdGUnfX1cXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XFxcInRleHRcXFwiIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtdHlwZT1cXFwiZGF0ZVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2RhdGVUaW1lJ319XFxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXR5cGU9J2RhdGV0aW1lJyBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAncGFzc3dvcmQnfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VsZWN0J319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxzZWxlY3QgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxvcHRpb24gdmFsdWU9XFxcInt7dmFsdWV9fVxcXCI+e3tsYWJlbH19PC9vcHRpb24+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svZWFjaH19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvc2VsZWN0Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdyYWRpbyd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJhZi1yYWRpby1ncm91cFxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNlYWNoIG9wdGlvbnMgdGhpc319XFxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XFxcInJhZGlvLWlubGluZSBmaXgtaW5kZW50XFxcIj48aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIHZhbHVlPVxcXCJ7e3ZhbHVlfX1cXFwiIG5hbWU9XFxcInt7Li4vY29kZX19XFxcIiBjbGFzcz1cXFwicmFkaW8taW5saW5lIGZpeC1pbmRlbnRcXFwiPiB7e2xhYmVsfX08L2xhYmVsPlxcbiAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxcbiAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnbXVsdGlTZWxlY3QnfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiYWYtY2hlY2tib3gtZ3JvdXBcXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNlYWNoIG9wdGlvbnMgdGhpc319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cXFwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcXFwiPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgdmFsdWU9XFxcInt7dmFsdWV9fVxcXCIgbmFtZT1cXFwie3suLi9jb2RlfX1cXFwiIGNsYXNzPVxcXCJjaGVja2JveC1pbmxpbmUgZml4LWluZGVudFxcXCI+IHt7bGFiZWx9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3VybCd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwidXJsXFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnZW1haWwnfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XFxcImVtYWlsXFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnY2hlY2tib3gnfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiY2hlY2tib3hcXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgc3R5bGU9XFxcIndpZHRoOiAxMDAlO1xcXCI+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiB2YWx1ZT1cXFwidHJ1ZVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGNsYXNzPVxcXCJjaGVja2JveC1pbmxpbmUgZml4LWluZGVudFxcXCI+PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSd7e2dldENmQ2xhc3MgdGhpc319IGZvcm0tY29udHJvbCcgcmVhZG9ubHkgZGlzYWJsZWQ+e3t7Z2V0VmFsdWUgY29kZX19fTwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0e3svaWZ9fVxcblx0XHR7ey9pZn19XFxuXHR7ey93aXRofX1cIjtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZSA9IGZ1bmN0aW9uKHRlbXBhbHRlTmFtZSwgc3RlZWRvc0RhdGEpIHtcbiAgdmFyIHRlbXBsYXRlLCB0ZW1wbGF0ZUNvbXBpbGVkLCB0ZW1wbGF0ZVJlbmRlckZ1bmN0aW9uO1xuICB0ZW1wbGF0ZSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdO1xuICB0ZW1wbGF0ZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0ZW1wbGF0ZSwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgdGVtcGxhdGVSZW5kZXJGdW5jdGlvbiA9IGV2YWwodGVtcGxhdGVDb21waWxlZCk7XG4gIFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0gPSBuZXcgQmxhemUuVGVtcGxhdGUodGVtcGFsdGVOYW1lLCB0ZW1wbGF0ZVJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGVbdGVtcGFsdGVOYW1lXS5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICByZXR1cm4gVGVtcGxhdGVbdGVtcGFsdGVOYW1lXS5oZWxwZXJzKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMpO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUluc3RhbmNlU2lnblRleHQgPSBmdW5jdGlvbihzdGVlZG9zRGF0YSkge1xuICB2YXIgaW5zdGFuY2VTaWduVGV4dENvbXBpbGVkLCBpbnN0YW5jZVNpZ25UZXh0SHRtbCwgaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uO1xuICBpbnN0YW5jZVNpZ25UZXh0SHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2luc3RhbmNlX3NpZ25fdGV4dC5odG1sJyk7XG4gIGluc3RhbmNlU2lnblRleHRDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoaW5zdGFuY2VTaWduVGV4dEh0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbiA9IGV2YWwoaW5zdGFuY2VTaWduVGV4dENvbXBpbGVkKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dCA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlU2lnblRleHRcIiwgaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dC5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICByZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzKEluc3RhbmNlU2lnblRleHQuaGVscGVycyk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW1hZ2VTaWduID0gZnVuY3Rpb24oc3RlZWRvc0RhdGEpIHtcbiAgdmFyIGltYWdlU2lnbkNvbXBpbGVkLCBpbWFnZVNpZ25IdG1sLCBpbWFnZVNpZ25SZW5kZXJGdW5jdGlvbjtcbiAgaW1hZ2VTaWduSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2ltYWdlX3NpZ24uaHRtbCcpO1xuICBpbWFnZVNpZ25Db21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoaW1hZ2VTaWduSHRtbCwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgaW1hZ2VTaWduUmVuZGVyRnVuY3Rpb24gPSBldmFsKGltYWdlU2lnbkNvbXBpbGVkKTtcbiAgVGVtcGxhdGUuaW1hZ2VTaWduID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW1hZ2VTaWduXCIsIGltYWdlU2lnblJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUuaW1hZ2VTaWduLnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIHJldHVybiBUZW1wbGF0ZS5pbWFnZVNpZ24uaGVscGVycyhJbWFnZVNpZ24uaGVscGVycyk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlVHJhY2VzSGFubGRlciA9IGZ1bmN0aW9uKHN0ZWVkb3NEYXRhKSB7XG4gIHZhciB0cmFjZXNIYW5sZGVyQ29tcGlsZWQsIHRyYWNlc0hhbmxkZXJIdG1sLCB0cmFjZXNIYW5sZGVyUmVuZGVyRnVuY3Rpb247XG4gIHRyYWNlc0hhbmxkZXJIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvdHJhY2VzX2hhbmRsZXIuaHRtbCcpO1xuICB0cmFjZXNIYW5sZGVyQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRyYWNlc0hhbmxkZXJIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICB0cmFjZXNIYW5sZGVyUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRyYWNlc0hhbmxkZXJDb21waWxlZCk7XG4gIFRlbXBsYXRlLmluc3RhbmNlX3RyYWNlc19oYW5kbGVyID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXJcIiwgdHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXIuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlX3RyYWNlc19oYW5kbGVyLmhlbHBlcnMoVHJhY2VzSGFuZGxlci5oZWxwZXJzKTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbml0ID0gZnVuY3Rpb24oc3RlZWRvc0RhdGEpIHtcbiAgSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmU2VsZWN0VXNlclJlYWRcIiwgc3RlZWRvc0RhdGEpO1xuICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmRm9ybUdyb3VwXCIsIHN0ZWVkb3NEYXRhKTtcbiAgfVxuICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiYWZGb3JtR3JvdXBSZWFkXCIsIHN0ZWVkb3NEYXRhKTtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJpbnN0YW5jZV9hdHRhY2htZW50XCIsIHtcbiAgICAgIGFic29sdXRlOiBzdGVlZG9zRGF0YS5hYnNvbHV0ZVxuICAgIH0pO1xuICAgIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbWFnZVNpZ24oc3RlZWRvc0RhdGEpO1xuICAgIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVUcmFjZXNIYW5sZGVyKHN0ZWVkb3NEYXRhKTtcbiAgICByZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUluc3RhbmNlU2lnblRleHQoc3RlZWRvc0RhdGEpO1xuICB9XG59O1xuXG5nZXRMaW5rVGV4dCA9IGZ1bmN0aW9uKGl0ZW0sIGxhYmVsLCBkZXRhaWxfdXJsKSB7XG4gIGlmIChkZXRhaWxfdXJsKSB7XG4gICAgZGV0YWlsX3VybCA9IGRldGFpbF91cmwucmVwbGFjZShcIntfaWR9XCIsIGl0ZW0uX2lkKTtcbiAgICBpZiAoIS9eaHR0cChzPyk6XFwvXFwvLy50ZXN0KGRldGFpbF91cmwpKSB7XG4gICAgICBkZXRhaWxfdXJsID0gU3RlZWRvcy5hYnNvbHV0ZVVybChkZXRhaWxfdXJsKTtcbiAgICB9XG4gICAgcmV0dXJuICc8YSBocmVmPVwiJyArIGRldGFpbF91cmwgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JyArIGxhYmVsICsgJzwvYT4nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsYWJlbDtcbiAgfVxufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFZhbHVlID0gZnVuY3Rpb24odmFsdWUsIGZpZWxkLCBsb2NhbGUsIHV0Y09mZnNldCkge1xuICB2YXIgZGF0ZSwgZGV0YWlsX3VybCwgZSwgaG91cnMsIG1vbnRoLCBzZWNvbmRzLCB0LCB0MCwgdDEsIHllYXI7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IGZhbHNlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgIHZhbHVlID0gdmFsdWUgPyAnPGEgaHJlZj1cXCdtYWlsdG86JyArIHZhbHVlICsgJ1xcJz4nICsgdmFsdWUgKyAnPC9hPicgOiAnJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VybCc6XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoXCJodHRwXCIpID09PSAwKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbHVlID0gXCI8YSBocmVmPSdcIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgICAgdmFsdWUgPSBcIjxhIGhyZWY9JycgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBcIjxhIGhyZWY9J2h0dHA6Ly9cIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2dyb3VwJzpcbiAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5nZXRQcm9wZXJ0eShcImZ1bGxuYW1lXCIpLnRvU3RyaW5nKCkgOiB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5mdWxsbmFtZSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VzZXInOlxuICAgICAgaWYgKGZpZWxkLmlzX211bHRpc2VsZWN0KSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLmdldFByb3BlcnR5KFwibmFtZVwiKS50b1N0cmluZygpIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUubmFtZSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgIHZhbHVlID0gJyoqKioqKic7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUgIT09ICdmYWxzZScpIHtcbiAgICAgICAgdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF95ZXNcIiwge30sIGxvY2FsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X25vXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZGF0ZVRpbWUnOlxuICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCA9PT0gMTYpIHtcbiAgICAgICAgdCA9IHZhbHVlLnNwbGl0KFwiVFwiKTtcbiAgICAgICAgdDAgPSB0WzBdLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgdDEgPSB0WzFdLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgeWVhciA9IHQwWzBdO1xuICAgICAgICBtb250aCA9IHQwWzFdO1xuICAgICAgICBkYXRlID0gdDBbMl07XG4gICAgICAgIGhvdXJzID0gdDFbMF07XG4gICAgICAgIHNlY29uZHMgPSB0MVsxXTtcbiAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRhdGUsIGhvdXJzLCBzZWNvbmRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZSh2YWx1ZSwgdXRjT2Zmc2V0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIGlmIChmaWVsZC5pc190ZXh0YXJlYSkge1xuICAgICAgICB2YWx1ZSA9IFNwYWNlYmFycy5TYWZlU3RyaW5nKE1hcmtkb3duKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgIHZhbHVlID0gU3RlZWRvcy5udW1iZXJUb1N0cmluZyh2YWx1ZSwgZmllbGQuZGlnaXRzKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29kYXRhJzpcbiAgICAgIGRldGFpbF91cmwgPSBmaWVsZC5kZXRhaWxfdXJsO1xuICAgICAgaWYgKGZpZWxkLmlzX211bHRpc2VsZWN0KSB7XG4gICAgICAgIHZhbHVlID0gXy5tYXAodmFsdWUsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gZ2V0TGlua1RleHQoaXRlbSwgaXRlbVsnQGxhYmVsJ10sIGRldGFpbF91cmwpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZ2V0TGlua1RleHQodmFsdWUsIHZhbHVlWydAbGFiZWwnXSwgZGV0YWlsX3VybCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdodG1sJzpcbiAgICAgIHZhbHVlID0gdmFsdWUgPyBcIjxkaXYgY2xhc3M9XFxcInN0ZWVkb3MtaHRtbFxcXCI+XCIgKyB2YWx1ZSArIFwiPC9kaXY+XCIgOiAnJztcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwgPSBmdW5jdGlvbihmaWVsZHMsIGNvZGUpIHtcbiAgdmFyIGZpZWxkO1xuICBmaWVsZCA9IGZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKTtcbiAgaWYgKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLm5hbWUpIHtcbiAgICAgIHJldHVybiBmaWVsZC5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmllbGQuY29kZTtcbiAgICB9XG4gIH1cbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgdmFyIGZvcm0sIGZvcm1fZmllbGRzLCBmb3JtX3ZlcnNpb247XG4gIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuICBmb3JtX3ZlcnNpb24gPSB7fTtcbiAgZm9ybV9maWVsZHMgPSBbXTtcbiAgaWYgKGZvcm0uY3VycmVudC5faWQgPT09IGluc3RhbmNlLmZvcm1fdmVyc2lvbikge1xuICAgIGZvcm1fdmVyc2lvbiA9IGZvcm0uY3VycmVudDtcbiAgfSBlbHNlIHtcbiAgICBmb3JtX3ZlcnNpb24gPSBfLndoZXJlKGZvcm0uaGlzdG9yeXMsIHtcbiAgICAgIF9pZDogaW5zdGFuY2UuZm9ybV92ZXJzaW9uXG4gICAgfSlbMF07XG4gIH1cbiAgZm9ybV92ZXJzaW9uLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgZm9ybV9maWVsZHMucHVzaChmaWVsZCk7XG4gICAgICBpZiAoZmllbGQuZmllbGRzKSB7XG4gICAgICAgIHJldHVybiBmaWVsZC5maWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1fZmllbGRzLnB1c2goZik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmllbGQudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgZmllbGRbJ3NmaWVsZHMnXSA9IGZpZWxkWydmaWVsZHMnXTtcbiAgICAgIGRlbGV0ZSBmaWVsZFsnZmllbGRzJ107XG4gICAgICByZXR1cm4gZm9ybV9maWVsZHMucHVzaChmaWVsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmb3JtX2ZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICB9XG4gIH0pO1xuICBmb3JtX3ZlcnNpb24uZmllbGRzID0gZm9ybV9maWVsZHM7XG4gIHJldHVybiBmb3JtX3ZlcnNpb247XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0Rmxvd1ZlcnNpb24gPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICB2YXIgZmxvdywgZmxvd192ZXJzaW9uO1xuICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZShpbnN0YW5jZS5mbG93KTtcbiAgZmxvd192ZXJzaW9uID0ge307XG4gIGlmIChmbG93LmN1cnJlbnQuX2lkID09PSBpbnN0YW5jZS5mbG93X3ZlcnNpb24pIHtcbiAgICBmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgZmxvd192ZXJzaW9uID0gXy53aGVyZShmbG93Lmhpc3RvcnlzLCB7XG4gICAgICBfaWQ6IGluc3RhbmNlLmZsb3dfdmVyc2lvblxuICAgIH0pWzBdO1xuICB9XG4gIHJldHVybiBmbG93X3ZlcnNpb247XG59O1xuXG5fZ2V0Vmlld0h0bWwgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciB2aWV3SHRtbDtcbiAgdmlld0h0bWwgPSBBc3NldHMuZ2V0VGV4dChwYXRoKTtcbiAgaWYgKHZpZXdIdG1sKSB7XG4gICAgdmlld0h0bWwgPSB2aWV3SHRtbC5yZXBsYWNlKC88dGVtcGxhdGVbXFx3XFxzXFxcIlxcPSddKz4vaSwgXCJcIikucmVwbGFjZSgvPFxcL3RlbXBsYXRlPi9pLCBcIlwiKTtcbiAgfVxuICByZXR1cm4gdmlld0h0bWw7XG59O1xuXG5fZ2V0TG9jYWxlID0gZnVuY3Rpb24odXNlcikge1xuICB2YXIgbG9jYWxlLCByZWYsIHJlZjE7XG4gIGlmICgodXNlciAhPSBudWxsID8gKHJlZiA9IHVzZXIubG9jYWxlKSAhPSBudWxsID8gcmVmLnRvTG9jYWxlTG93ZXJDYXNlKCkgOiB2b2lkIDAgOiB2b2lkIDApID09PSAnemgtY24nKSB7XG4gICAgbG9jYWxlID0gXCJ6aC1DTlwiO1xuICB9IGVsc2UgaWYgKCh1c2VyICE9IG51bGwgPyAocmVmMSA9IHVzZXIubG9jYWxlKSAhPSBudWxsID8gcmVmMS50b0xvY2FsZUxvd2VyQ2FzZSgpIDogdm9pZCAwIDogdm9pZCAwKSA9PT0gJ2VuLXVzJykge1xuICAgIGxvY2FsZSA9IFwiZW5cIjtcbiAgfSBlbHNlIHtcbiAgICBsb2NhbGUgPSBcInpoLUNOXCI7XG4gIH1cbiAgcmV0dXJuIGxvY2FsZTtcbn07XG5cbl9nZXRSZXF1aXJlZEZpZWxkcyA9IGZ1bmN0aW9uKGZpZWxkcywgcmV2KSB7XG4gIGlmICghcmV2KSB7XG4gICAgcmV2ID0gW107XG4gIH1cbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQpIHtcbiAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3NlY3Rpb24nKSB7XG4gICAgICByZXR1cm4gX2dldFJlcXVpcmVkRmllbGRzKGZpZWxkLmZpZWxkcywgcmV2KTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkLnR5cGUgPT09ICd0YWJsZScpIHtcblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZmllbGQuaXNfcmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIHJldi5wdXNoKGZpZWxkLmNvZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXY7XG59O1xuXG5fZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMsIHN0ZXBzKSB7XG4gIHZhciBlZGl0YWJsZUNvZGUsIHN0YXJ0U3RlcDtcbiAgc3RhcnRTdGVwID0gc3RlcHMuZmluZFByb3BlcnR5QnlQSyhcInN0ZXBfdHlwZVwiLCBcInN0YXJ0XCIpO1xuICBlZGl0YWJsZUNvZGUgPSBbXTtcbiAgXy5rZXlzKHN0YXJ0U3RlcC5wZXJtaXNzaW9ucykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoc3RhcnRTdGVwLnBlcm1pc3Npb25zW2tleV0gPT09ICdlZGl0YWJsZScpIHtcbiAgICAgIHJldHVybiBlZGl0YWJsZUNvZGUucHVzaChrZXkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBlZGl0YWJsZUNvZGU7XG59O1xuXG5fZ2V0U3RhcnRTdGVwUmVxdWlyZWRGaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMsIHN0ZXBzKSB7XG4gIHZhciBlZGl0YWJsZUNvZGUsIHJlcXVpcmVkRmllbGRzO1xuICByZXF1aXJlZEZpZWxkcyA9IF9nZXRSZXF1aXJlZEZpZWxkcyhmaWVsZHMpO1xuICBlZGl0YWJsZUNvZGUgPSBfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMoZmllbGRzLCBzdGVwcyk7XG4gIHJldHVybiBfLmludGVyc2VjdGlvbihyZXF1aXJlZEZpZWxkcywgZWRpdGFibGVDb2RlKTtcbn07XG5cbl9nZXRUZW1wbGF0ZURhdGEgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGZsb3csIGZvcm0sIGZvcm1fdmVyc2lvbiwgbG9jYWxlLCBzdGVlZG9zRGF0YTtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIGZvcm1fdmVyc2lvbiA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKGluc3RhbmNlKTtcbiAgfSBlbHNlIHtcbiAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbihpbnN0YW5jZSk7XG4gIH1cbiAgbG9jYWxlID0gX2dldExvY2FsZSh1c2VyKTtcbiAgc3RlZWRvc0RhdGEgPSB7fTtcbiAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgIHN0ZWVkb3NEYXRhID0gXy5jbG9uZShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCkpO1xuICAgIHN0ZWVkb3NEYXRhLmluc25hbWUgPSBpbnN0YW5jZS5uYW1lO1xuICAgIHN0ZWVkb3NEYXRhLmluc19zdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuICAgIHN0ZWVkb3NEYXRhLmluc19maW5hbF9kZWNpc2lvbiA9IGluc3RhbmNlLmluc19maW5hbF9kZWNpc2lvbjtcbiAgICBzdGVlZG9zRGF0YS5pbnNfY29kZSA9IGluc3RhbmNlLmNvZGU7XG4gICAgc3RlZWRvc0RhdGEuaW5zX2lzX2FyY2hpdmVkID0gaW5zdGFuY2UuaXNfYXJjaGl2ZWQ7XG4gICAgc3RlZWRvc0RhdGEuaW5zX2lzX2RlbGV0ZWQgPSBpbnN0YW5jZS5pbnNfaXNfZGVsZXRlZDtcbiAgICBzdGVlZG9zRGF0YS5hcHBsaWNhbnRfbmFtZSA9IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lO1xuICAgIHN0ZWVkb3NEYXRhLmFwcGxpY2FudENvbnRleHQgPSBpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZTtcbiAgfVxuICBzdGVlZG9zRGF0YS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICBzdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb24gPSBmb3JtX3ZlcnNpb247XG4gIHN0ZWVkb3NEYXRhLmxvY2FsZSA9IGxvY2FsZTtcbiAgc3RlZWRvc0RhdGEudXRjT2Zmc2V0ID0gdXNlci51dGNPZmZzZXQ7XG4gIHN0ZWVkb3NEYXRhLnNwYWNlID0gaW5zdGFuY2Uuc3BhY2U7XG4gIHN0ZWVkb3NEYXRhLnNlc3Npb25Vc2VySWQgPSB1c2VyLl9pZDtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmVkaXRhYmxlIDogdm9pZCAwKSB7XG4gICAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2UuZm9ybVxuICAgICAgfSk7XG4gICAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2UuZmxvd1xuICAgICAgfSk7XG4gICAgICBzdGVlZG9zRGF0YS5zdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyA9IF9nZXRTdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyhmb3JtLmN1cnJlbnQuZmllbGRzLCBmbG93LmN1cnJlbnQuc3RlcHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RlZWRvc0RhdGE7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uKGRhdGUsIHV0Y09mZnNldCkge1xuICB2YXIgcGFzc2luZztcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIHBhc3NpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBwYXNzaW5nID0gdHJ1ZTtcbiAgfVxuICBpZiAoIXV0Y09mZnNldCAmJiB1dGNPZmZzZXQgIT09IDApIHtcbiAgICB1dGNPZmZzZXQgPSA4O1xuICB9XG4gIHJldHVybiBtb21lbnQoZGF0ZSkudXRjT2Zmc2V0KHV0Y09mZnNldCwgcGFzc2luZykuZm9ybWF0KFwiWVlZWS1NTS1ERCBISDptbVwiKTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZVZpZXcgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGJvZHksIGluc3RhbmNlQ29tcGlsZWQsIGluc3RhbmNlUmVuZGVyRnVuY3Rpb24sIGluc3RhbmNlVGVtcGxhdGUsIHN0ZWVkb3NEYXRhO1xuICBzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuYWJzb2x1dGUgOiB2b2lkIDApIHtcbiAgICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XG4gIH1cbiAgaW5zdGFuY2VUZW1wbGF0ZSA9IFRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZShpbnN0YW5jZSwgb3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy50ZW1wbGF0ZU5hbWUgOiB2b2lkIDApO1xuICBpbnN0YW5jZVRlbXBsYXRlID0gaW5zdGFuY2VUZW1wbGF0ZS5yZXBsYWNlKC9hZlNlbGVjdFVzZXIvZywgXCJhZlNlbGVjdFVzZXJSZWFkXCIpO1xuICBpZiAoIShvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmVkaXRhYmxlIDogdm9pZCAwKSkge1xuICAgIGluc3RhbmNlVGVtcGxhdGUgPSBpbnN0YW5jZVRlbXBsYXRlLnJlcGxhY2UoL2FmRm9ybUdyb3VwL2csIFwiYWZGb3JtR3JvdXBSZWFkXCIpO1xuICB9XG4gIGluc3RhbmNlQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGluc3RhbmNlVGVtcGxhdGUsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIGluc3RhbmNlUmVuZGVyRnVuY3Rpb24gPSBldmFsKGluc3RhbmNlQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW5zdGFuY2VfcmVhZG9ubHlfdmlld1wiLCBpbnN0YW5jZVJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICBUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3LmhlbHBlcnMoSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycyk7XG4gIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbml0KHN0ZWVkb3NEYXRhKTtcbiAgYm9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcsIHN0ZWVkb3NEYXRhKTtcbiAgcmV0dXJuIFwiPGRpdiBpZD0naW5zdGFuY2Vmb3JtJyA+XFxuXHRcIiArIGJvZHkgKyBcIlxcbjwvZGl2PlwiO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFRyYWNlc1ZpZXcgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGJvZHksIGZvcm0sIHN0ZWVkb3NEYXRhLCB0cmFjZUNvbXBpbGVkLCB0cmFjZVJlbmRlckZ1bmN0aW9uLCB0cmFjZXNIdG1sO1xuICBzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XG4gIGlmIChmb3JtLmluc3RhbmNlX3N0eWxlID09PSBcInRhYmxlXCIgfHwgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMudGVtcGxhdGVOYW1lIDogdm9pZCAwKSA9PT0gXCJ0YWJsZVwiKSB7XG4gICAgdHJhY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlc190YWJsZS5odG1sJyk7XG4gIH0gZWxzZSB7XG4gICAgdHJhY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlcy5odG1sJyk7XG4gIH1cbiAgdHJhY2VDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodHJhY2VzSHRtbCwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgdHJhY2VSZW5kZXJGdW5jdGlvbiA9IGV2YWwodHJhY2VDb21waWxlZCk7XG4gIFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJ0cmFjZV9yZWFkb25seV92aWV3XCIsIHRyYWNlUmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcuaGVscGVycyhUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzKTtcbiAgYm9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcsIGluc3RhbmNlLnRyYWNlcyk7XG4gIHJldHVybiBib2R5O1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEF0dGFjaG1lbnRWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlKSB7XG4gIHZhciBhdHRhY2htZW50Q29tcGlsZWQsIGF0dGFjaG1lbnRIdG1sLCBhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24sIGJvZHksIHN0ZWVkb3NEYXRhO1xuICBzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgYXR0YWNobWVudEh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbnN0YW5jZV9hdHRhY2htZW50cy5odG1sJyk7XG4gIGF0dGFjaG1lbnRDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoYXR0YWNobWVudEh0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIGF0dGFjaG1lbnRSZW5kZXJGdW5jdGlvbiA9IGV2YWwoYXR0YWNobWVudENvbXBpbGVkKTtcbiAgVGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXdcIiwgYXR0YWNobWVudFJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICBUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3LmhlbHBlcnMoSW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycyk7XG4gIGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3KTtcbiAgcmV0dXJuIGJvZHk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXcgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGJvZHksIHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCwgcmVsYXRlZEluc3RhbmNlc0h0bWwsIHJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbiwgc3RlZWRvc0RhdGE7XG4gIHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpO1xuICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IGZhbHNlO1xuICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5hYnNvbHV0ZSA6IHZvaWQgMCkge1xuICAgIHN0ZWVkb3NEYXRhLmFic29sdXRlID0gdHJ1ZTtcbiAgfVxuICByZWxhdGVkSW5zdGFuY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3JlbGF0ZWRfaW5zdGFuY2VzLmh0bWwnKTtcbiAgcmVsYXRlZEluc3RhbmNlc0NvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShyZWxhdGVkSW5zdGFuY2VzSHRtbCwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgcmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uID0gZXZhbChyZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwicmVsYXRlZF9pbnN0YW5jZXNfdmlld1wiLCByZWxhdGVkSW5zdGFuY2VzUmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcuaGVscGVycyhSZWxhdGVkSW5zdGFuY2VzLmhlbHBlcnMpO1xuICBib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldywgc3RlZWRvc0RhdGEpO1xuICByZXR1cm4gYm9keTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkUmVjb3Jkc1ZpZXcgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGJvZHksIHJlbGF0ZWRSZWNvcmRzQ29tcGlsZWQsIHJlbGF0ZWRSZWNvcmRzSHRtbCwgcmVsYXRlZFJlY29yZHNSZW5kZXJGdW5jdGlvbiwgc3RlZWRvc0RhdGE7XG4gIHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpO1xuICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IGZhbHNlO1xuICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5hYnNvbHV0ZSA6IHZvaWQgMCkge1xuICAgIHN0ZWVkb3NEYXRhLmFic29sdXRlID0gdHJ1ZTtcbiAgfVxuICByZWxhdGVkUmVjb3Jkc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9yZWxhdGVkX3JlY29yZHMuaHRtbCcpO1xuICByZWxhdGVkUmVjb3Jkc0NvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShyZWxhdGVkUmVjb3Jkc0h0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIHJlbGF0ZWRSZWNvcmRzUmVuZGVyRnVuY3Rpb24gPSBldmFsKHJlbGF0ZWRSZWNvcmRzQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS5yZWxhdGVkX3JlY29yZHNfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInJlbGF0ZWRfcmVjb3Jkc192aWV3XCIsIHJlbGF0ZWRSZWNvcmRzUmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS5yZWxhdGVkX3JlY29yZHNfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICBUZW1wbGF0ZS5yZWxhdGVkX3JlY29yZHNfdmlldy5oZWxwZXJzKFJlbGF0ZWRSZWNvcmRzLmhlbHBlcnMpO1xuICBib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcsIHN0ZWVkb3NEYXRhKTtcbiAgcmV0dXJuIGJvZHk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0T25Mb2FkU2NyaXB0ID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgdmFyIGZvcm1fc2NyaXB0LCBmb3JtX3ZlcnNpb247XG4gIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtVmVyc2lvbihpbnN0YW5jZS5mb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pO1xuICBmb3JtX3NjcmlwdCA9IGZvcm1fdmVyc2lvbi5mb3JtX3NjcmlwdDtcbiAgaWYgKGZvcm1fc2NyaXB0ICYmIGZvcm1fc2NyaXB0LnJlcGxhY2UoL1xcbi9nLCBcIlwiKS5yZXBsYWNlKC9cXHMvZywgXCJcIikubGVuZ3RoID4gMCkge1xuICAgIGZvcm1fc2NyaXB0ID0gXCJDb3JlRm9ybSA9IHt9O0NvcmVGb3JtLmluc3RhbmNlZm9ybSA9IHt9O1wiICsgZm9ybV9zY3JpcHQ7XG4gICAgcmV0dXJuIGZvcm1fc2NyaXB0ICs9IFwiO2lmKENvcmVGb3JtLmZvcm1fT25Mb2FkKXt3aW5kb3cub25sb2FkID0gQ29yZUZvcm0uZm9ybV9PbkxvYWQoKTt9XCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZvcm1fc2NyaXB0ID0gXCJcIjtcbiAgfVxufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCA9IGZ1bmN0aW9uKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucykge1xuICB2YXIgYWxsQ3NzTGluaywgYXR0YWNobWVudCwgYm9keSwgY3JlYXRvclNlcnZpY2UsIGNzc0hyZWYsIGZvcm0sIGZvcm1EZXNjcmlwdGlvbiwgZm9ybURlc2NyaXB0aW9uSHRtbCwgaHRtbCwgaW5zX3JlY29yZF9pZHMsIGluc3RhbmNlQm94U3R5bGUsIGluc3RhbmNlX3N0eWxlLCBsb2NhbGUsIG9uTG9hZFNjcmlwdCwgb3BlbkZpbGVTY3JpcHQsIHJlZiwgcmVmMSwgcmVsYXRlZF9pbnN0YW5jZXMsIHJlbGF0ZWRfcmVjb3Jkcywgc2hvd1RyYWNlc0J0biwgc2hvd1RyYWNlc1NjcmlwdCwgdHJhY2UsIHRyYWNlQ2hlY2ssIHdpZHRoO1xuICBib2R5ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICBvbkxvYWRTY3JpcHQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0T25Mb2FkU2NyaXB0KGluc3RhbmNlKTtcbiAgY3JlYXRvclNlcnZpY2UgPSAocmVmID0gTWV0ZW9yLnNldHRpbmdzW1wicHVibGljXCJdLndlYnNlcnZpY2VzKSAhPSBudWxsID8gKHJlZjEgPSByZWYuY3JlYXRvcikgIT0gbnVsbCA/IHJlZjEudXJsIDogdm9pZCAwIDogdm9pZCAwO1xuICBpbnNfcmVjb3JkX2lkcyA9IGluc3RhbmNlLnJlY29yZF9pZHM7XG4gIGxvY2FsZSA9IF9nZXRMb2NhbGUodXNlcik7XG4gIG9wZW5GaWxlU2NyaXB0ID0gXCJpZih3aW5kb3cuaXNOb2RlICYmIGlzTm9kZSgpKXtcXG5cdGF0dGFjaHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxcXCJpbnNfYXR0YWNoX2hyZWZcXFwiKTtcXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBhdHRhY2hzLmxlbmd0aDsgaSsrKXtcXG5cdFx0YXR0YWNoID0gYXR0YWNoc1tpXTtcXG5cdFx0YXR0YWNoLmFkZEV2ZW50TGlzdGVuZXIoXFxcImNsaWNrXFxcIiwgZnVuY3Rpb24oZSl7XFxuXHRcdFx0aWYoaXNJbWFnZSh0aGlzLmRhdGFzZXQudHlwZSkgfHwgaXNIdG1sKHRoaXMuZGF0YXNldC50eXBlKSl7XFxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XFxuXHRcdFx0XHRvcGVuV2luZG93KFxcXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy9cXFwiICsgdGhpcy5kYXRhc2V0LmlkKTtcXG5cdFx0XHR9ZWxzZSBpZihud19jb3JlLmNhbk9wZW5GaWxlKHRoaXMuZGF0YXNldC5uYW1lKSl7XFxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XFxuXHRcdFx0XHRud19jb3JlLm9wZW5GaWxlKHRoaXMuaHJlZiwgdGhpcy5kYXRhc2V0Lm5hbWUpXFxuXHRcdFx0fVxcblx0XHR9KTtcXG5cdH1cXG59XFxuXFxudmFyIGZsb3cgPSBcXFwiXCIgKyBpbnN0YW5jZS5mbG93ICsgXCJcXFwiO1xcbnZhciBzcGFjZSA9IFxcXCJcIiArIGluc3RhbmNlLnNwYWNlICsgXCJcXFwiO1xcblxcbmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKXtcXG5cdGxldCBwYXR0ZXJuID0gUmVnRXhwKG5hbWUgKyBcXFwiPS5bXjtdKlxcXCIpXFxuXHRsZXQgbWF0Y2hlZCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChwYXR0ZXJuKVxcblx0aWYobWF0Y2hlZCl7XFxuXHRcdGxldCBjb29raWUgPSBtYXRjaGVkWzBdLnNwbGl0KCc9JylcXG5cdFx0cmV0dXJuIGNvb2tpZVsxXVxcblx0fVxcblx0cmV0dXJuICcnXFxufVxcblxcbnZhciByZWNvcmRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcXFwiaW5zLXJlbGF0ZWQtcmVjb3Jkc1xcXCIpO1xcbmZvcih2YXIgaSA9IDA7IGkgPCByZWNvcmRzLmxlbmd0aDsgaSsrKXtcXG5cdFx0dmFyIHJlY29yZCA9IHJlY29yZHNbaV07XFxuXHRcdHJlY29yZC5hZGRFdmVudExpc3RlbmVyKFxcXCJjbGlja1xcXCIsIGZ1bmN0aW9uKGUpe1xcblx0XHRcdHZhciBjcmVhdG9yU2VydmljZSA9IFxcXCJcIiArIGNyZWF0b3JTZXJ2aWNlICsgXCJcXFwiXFxuXHRcdFx0dmFyIGluc19yZWNvcmRfaWRzID0gXCIgKyAoSlNPTi5zdHJpbmdpZnkoaW5zX3JlY29yZF9pZHMpKSArIFwiXFxuXHRcdFx0aWYoY3JlYXRvclNlcnZpY2UgJiYgaW5zX3JlY29yZF9pZHMgJiYgaW5zX3JlY29yZF9pZHMubGVuZ3RoID4gMCl7XFxuXHRcdFx0XHR2YXIgb2JqY2V0TmFtZSA9IGluc19yZWNvcmRfaWRzWzBdLm9cXG5cdFx0XHRcdHZhciBpZCA9IGluc19yZWNvcmRfaWRzWzBdLmlkc1swXVxcblx0XHRcdFx0dmFyIHVvYmogPSB7fTtcXG5cdFx0XHRcdHVvYmpbXFxcIlgtVXNlci1JZFxcXCJdID0gZ2V0Q29va2llKFxcXCJYLVVzZXItSWRcXFwiKTtcXG5cdFx0XHRcdHVvYmpbXFxcIlgtQXV0aC1Ub2tlblxcXCJdID0gZ2V0Q29va2llKFxcXCJYLUF1dGgtVG9rZW5cXFwiKTtcXG5cdFx0XHRcdHJlZGlyZWN0VXJsID0gY3JlYXRvclNlcnZpY2UgKyBcXFwiYXBwLy0vXFxcIiArIG9iamNldE5hbWUgKyBcXFwiL3ZpZXcvXFxcIiArIGlkICsgXFxcIj9cXFwiICsgJC5wYXJhbSh1b2JqKTtcXG5cdFx0XHRcdG9wZW5XaW5kb3cocmVkaXJlY3RVcmwpO1xcblx0XHRcdH1cXG5cdFx0fSk7XFxuXHR9XFxuXCI7XG4gIGlmICghU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XG4gICAgaWYgKChmb3JtICE9IG51bGwgPyBmb3JtLmluc3RhbmNlX3N0eWxlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJykge1xuICAgICAgaW5zdGFuY2Vfc3R5bGUgPSBcImluc3RhbmNlLXRhYmxlXCI7XG4gICAgfVxuICB9XG4gIGlmICgob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy50ZW1wbGF0ZU5hbWUgOiB2b2lkIDApID09PSAndGFibGUnKSB7XG4gICAgaW5zdGFuY2Vfc3R5bGUgPSBcImluc3RhbmNlLXRhYmxlXCI7XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuaW5zdGFuY2Vfc3R5bGUgOiB2b2lkIDApIHtcbiAgICBpbnN0YW5jZV9zdHlsZSA9IG9wdGlvbnMuaW5zdGFuY2Vfc3R5bGU7XG4gIH1cbiAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMuc2hvd1RyYWNlID09PSB0cnVlKSB7XG4gICAgdHJhY2UgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VHJhY2VzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpO1xuICB9IGVsc2Uge1xuICAgIHRyYWNlID0gXCJcIjtcbiAgfVxuICBpbnN0YW5jZUJveFN0eWxlID0gXCJcIjtcbiAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmZpbmFsX2RlY2lzaW9uKSB7XG4gICAgaWYgKGluc3RhbmNlLmZpbmFsX2RlY2lzaW9uID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgIGluc3RhbmNlQm94U3R5bGUgPSBcImJveC1zdWNjZXNzXCI7XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICBpbnN0YW5jZUJveFN0eWxlID0gXCJib3gtZGFuZ2VyXCI7XG4gICAgfVxuICB9XG4gIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnNob3dBdHRhY2htZW50cyA9PT0gdHJ1ZSkge1xuICAgIGF0dGFjaG1lbnQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0QXR0YWNobWVudFZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgICByZWxhdGVkX2luc3RhbmNlcyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkSW5zdGFuY2VzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICAgIHJlbGF0ZWRfcmVjb3JkcyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkUmVjb3Jkc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBhdHRhY2htZW50ID0gXCJcIjtcbiAgICByZWxhdGVkX2luc3RhbmNlcyA9IFwiXCI7XG4gICAgcmVsYXRlZF9yZWNvcmRzID0gXCJcIjtcbiAgfVxuICB3aWR0aCA9IFwiOTYwcHhcIjtcbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMud2lkdGggOiB2b2lkIDApIHtcbiAgICB3aWR0aCA9IFwiXCI7XG4gIH1cbiAgY3NzSHJlZiA9IE1ldGVvci5hYnNvbHV0ZVVybChcInN0ZWVkb3MtY3NzXCIpO1xuICBhbGxDc3NMaW5rID0gXCI8bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIHR5cGU9XFxcInRleHQvY3NzXFxcIiBjbGFzcz1cXFwiX19tZXRlb3ItY3NzX19cXFwiIGhyZWY9XFxcIlwiICsgY3NzSHJlZiArIFwiXFxcIj5cIjtcbiAgdHJhY2VDaGVjayA9IFwiXCI7XG4gIGlmICghXy5pc0VtcHR5KHRyYWNlKSkge1xuICAgIHRyYWNlQ2hlY2sgPSBcImNoZWNrZWRcIjtcbiAgfVxuICBpZiAoKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMudGFnZ2VyIDogdm9pZCAwKSA9PT0gJ2VtYWlsJyB8fCAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5lZGl0YWJsZSA6IHZvaWQgMCkpIHtcbiAgICBzaG93VHJhY2VzQnRuID0gXCJcIjtcbiAgfSBlbHNlIHtcbiAgICBzaG93VHJhY2VzQnRuID0gXCI8ZGl2IGNsYXNzPVxcXCJuYXZpZ2F0aW9uLWJhciBidG4tZ3JvdXAgbm8tcHJpbnRcXFwiIHN0eWxlPVxcXCJtaW4td2lkdGg6IDYwMHB4OyB6LWluZGV4OiA5OTlcXFwiPlxcblx0PGRpdiBjbGFzcz1cXFwicHJpbnQtdG9vbFxcXCI+XFxuXHRcdDxsYWJlbCBjbGFzcz1cXFwiY2J4LWxhYmVsXFxcIj48aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGNsYXNzPVxcXCJjYngtcHJpbnQgY2J4LXByaW50LWF0dGFjaG1lbnRzXFxcIiBpZD1cXFwiY2J4LXByaW50LWF0dGFjaG1lbnRzXFxcIiBjaGVja2VkPVxcXCJjaGVja2VkXFxcIj48c3Bhbj5cIiArIChUQVBpMThuLl9fKCdpbnN0YW5jZV9hdHRhY2htZW50Jywge30sIGxvY2FsZSkpICsgXCI8L3NwYW4+PC9sYWJlbD5cXG5cdFx0PGxhYmVsIGNsYXNzPVxcXCJjYngtbGFiZWxcXFwiPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgY2xhc3M9XFxcImNieC1wcmludCBjYngtcHJpbnQtdHJhY2VzXFxcIiBpZD1cXFwiY2J4LXByaW50LXRyYWNlc1xcXCIgY2hlY2tlZD1cXFwiXCIgKyB0cmFjZUNoZWNrICsgXCJcXFwiPjxzcGFuPlwiICsgKFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmFsX2hpc3RvcnknLCB7fSwgbG9jYWxlKSkgKyBcIjwvc3Bhbj48L2xhYmVsPlxcblx0PC9kaXY+XFxuPC9kaXY+XCI7XG4gIH1cbiAgc2hvd1RyYWNlc1NjcmlwdCA9IFwiJCggZG9jdW1lbnQgKS5yZWFkeShmdW5jdGlvbigpe1xcblx0dmFyIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2J4LXByaW50LXRyYWNlcycpO1xcblx0dmFyIHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpbnN0YW5jZS10cmFjZXMnKVswXTtcXG5cdGlmIChiICYmIGIuY2hlY2tlZCAmJiB0KXtcXG5cdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXFxuXHR9IGVsc2UgaWYodCl7XFxuXHRcdHQuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXFxuXHR9XFxuXHRpZihiKXtcXG5cdFx0Yi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihlKXtcXG5cdFx0XHRpZiAoZS50YXJnZXQuY2hlY2tlZCl7XFxuXHRcdFx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IGJsb2NrOydcXG5cdFx0XHR9IGVsc2Uge1xcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcXG5cdFx0XHR9XFxuXHRcdH0pO1xcblx0fVxcblxcblxcblx0dmFyIGF0dGFjaG1lbnRzQ2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2J4LXByaW50LWF0dGFjaG1lbnRzJyk7XFxuXHR2YXIgYXR0YWNobWVudHNWaWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXR0YWNobWVudHMtc2VjdGlvbicpWzBdO1xcblx0aWYgKGF0dGFjaG1lbnRzQ2hlY2tib3ggJiYgYXR0YWNobWVudHNDaGVja2JveC5jaGVja2VkICYmIGF0dGFjaG1lbnRzVmlldyl7XFxuXHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXFxuXHR9IGVsc2UgaWYoYXR0YWNobWVudHNWaWV3KXtcXG5cdFx0YXR0YWNobWVudHNWaWV3LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xcblx0fVxcblx0aWYoYXR0YWNobWVudHNDaGVja2JveCl7XFxuXHRcdGF0dGFjaG1lbnRzQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZSl7XFxuXHRcdFx0aWYgKGUudGFyZ2V0LmNoZWNrZWQpe1xcblx0XHRcdFx0YXR0YWNobWVudHNWaWV3LnN0eWxlID0gJ2Rpc3BsYXk6IGJsb2NrOydcXG5cdFx0XHR9IGVsc2Uge1xcblx0XHRcdFx0YXR0YWNobWVudHNWaWV3LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xcblx0XHRcdH1cXG5cdFx0fSk7XFxuXHR9XFxufSk7XFxuXCI7XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnN0eWxlcyA6IHZvaWQgMCkge1xuICAgIGFsbENzc0xpbmsgPSBcIlwiO1xuICB9XG4gIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICBfaWQ6IGluc3RhbmNlLmZvcm1cbiAgfSk7XG4gIGZvcm1EZXNjcmlwdGlvbkh0bWwgPSBcIlwiO1xuICBpZiAoZm9ybSkge1xuICAgIGZvcm1EZXNjcmlwdGlvbiA9IGZvcm0uZGVzY3JpcHRpb247XG4gICAgaWYgKGZvcm1EZXNjcmlwdGlvbikge1xuICAgICAgZm9ybURlc2NyaXB0aW9uID0gZm9ybURlc2NyaXB0aW9uLnJlcGxhY2UoL1xcbi9nLCBcIjxici8+XCIpO1xuICAgICAgZm9ybURlc2NyaXB0aW9uSHRtbCA9IFwiPGRpdiBjbGFzcz1cXFwiYm94LWhlYWRlciAgd2l0aC1ib3JkZXIgaW5zdGFuY2UtaGVhZGVyXFxcIj5cXG5cdDxkaXY+XFxuXHRcdFwiICsgZm9ybURlc2NyaXB0aW9uICsgXCJcXG5cdDwvZGl2PlxcbjwvZGl2PlwiO1xuICAgIH1cbiAgfVxuICBodG1sID0gXCI8IURPQ1RZUEUgaHRtbD5cXG48aHRtbD5cXG5cdDxoZWFkPlxcblx0XHQ8bWV0YSBodHRwLWVxdWl2PVxcXCJDb250ZW50LVR5cGVcXFwiIGNvbnRlbnQ9XFxcInRleHQvaHRtbDsgY2hhcnNldD1VVEYtOFxcXCIvPlxcblx0XHRcIiArIGFsbENzc0xpbmsgKyBcIlxcblx0XHQ8c2NyaXB0IHNyYz1cXFwiaHR0cHM6Ly93d3cuc3RlZWRvcy5jb20vd2Vic2l0ZS9saWJzL2pxdWVyeS5taW4uanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+PC9zY3JpcHQ+XFxuXHRcdDxzY3JpcHQgc3JjPVxcXCIvanMvbndfY29yZS5qc1xcXCIgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj48L3NjcmlwdD5cXG5cdFx0XCIgKyAob3B0aW9ucy5wbHVnaW5zIHx8IFwiXCIpICsgXCJcXG5cXG5cdFx0PHN0eWxlPlxcblx0XHRcdC5zdGVlZG9ze1xcblx0XHRcdFx0d2lkdGg6IFwiICsgd2lkdGggKyBcIjtcXG5cdFx0XHRcdG1hcmdpbi1sZWZ0OiBhdXRvO1xcblx0XHRcdFx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xcblx0XHRcdH1cXG5cXG5cdFx0XHQuaW5zdGFuY2UtdmlldyAuaW5zdGFuY2UtbmFtZXtcXG5cdFx0XHRcdGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50XFxuXHRcdFx0fVxcblx0XHRcdC5ib3gtdG9vbHN7XFxuXHRcdFx0XHRkaXNwbGF5OiBub25lO1xcblx0XHRcdH1cXG5cdFx0XHQuYm94LmNvbGxhcHNlZC1ib3ggLmJveC1ib2R5LC5ib3guY29sbGFwc2VkLWJveCAuYm94LWZvb3RlciB7XFxuXHRcdFx0ICBkaXNwbGF5OiBibG9jaztcXG5cdFx0XHR9XFxuXFxuXHRcdFx0Ym9keXtcXG5cdFx0XHRcdGJhY2tncm91bmQ6IGF6dXJlICFpbXBvcnRhbnQ7XFxuXHRcdFx0fVxcblxcblx0XHRcdC5pbnN0YW5jZS12aWV3IC5pbnN0YW5jZS10cmFjZXN7XFxuXHRcdFx0XHRwYWRkaW5nLWxlZnQ6IDE1cHg7XFxuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcblx0XHRcdH1cXG5cXG5cdFx0XHRcIiArICgob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5zdHlsZXMgOiB2b2lkIDApIHx8IFwiXCIpICsgXCJcXG5cdFx0PC9zdHlsZT5cXG5cdDwvaGVhZD5cXG5cdDxib2R5Plxcblx0XHQ8ZGl2IGNsYXNzPVxcXCJzdGVlZG9zIHdvcmtmbG93IGluc3RhbmNlLXByaW50XFxcIj5cXG5cdFx0XHQ8ZGl2IGNsYXNzPVxcXCJza2luLWdyZWVuIHNraW4tYWRtaW4tbHRlXFxcIj5cXG5cdFx0XHRcdDxkaXYgY2xhc3M9XFxcIndyYXBwZXJcXFwiPlxcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJjb250ZW50LXdyYXBwZXJcXFwiPlxcblx0XHRcdFx0XHRcdFwiICsgc2hvd1RyYWNlc0J0biArIFwiXFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiaW5zdGFuY2UtcHJpbnRcXFwiPlxcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiaW5zdGFuY2UgXCIgKyBpbnN0YW5jZV9zdHlsZSArIFwiXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0PGZvcm0gbmFtZT1cXFwiaW5zdGFuY2VGb3JtXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJpbnN0YW5jZS1mb3JtIGJveCBcIiArIGluc3RhbmNlQm94U3R5bGUgKyBcIlxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcIiArIGZvcm1EZXNjcmlwdGlvbkh0bWwgKyBcIlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiYm94LWJvZHlcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2F0dGFjaG1lbnRzLXNlY3Rpb24nPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCIgKyBhdHRhY2htZW50ICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiICsgcmVsYXRlZF9pbnN0YW5jZXMgKyBcIlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCIgKyByZWxhdGVkX3JlY29yZHMgKyBcIlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiICsgYm9keSArIFwiXFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdDwvZm9ybT5cXG5cdFx0XHRcdFx0XHRcdFx0XCIgKyB0cmFjZSArIFwiXFxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHQ8L2Rpdj5cXG5cdFx0PC9kaXY+XFxuXHQ8L2JvZHk+XFxuXHQ8c2NyaXB0PlwiICsgb3BlbkZpbGVTY3JpcHQgKyBcIjtcIiArIG9uTG9hZFNjcmlwdCArIFwiO1wiICsgc2hvd1RyYWNlc1NjcmlwdCArIFwiPC9zY3JpcHQ+XFxuPC9odG1sPlwiO1xuICByZXR1cm4gaHRtbDtcbn07XG4iLCJUZW1wbGF0ZU1hbmFnZXIgPSB7fTtcclxuXHJcbmZvcm1JZCA9ICdpbnN0YW5jZWZvcm0nO1xyXG5cclxuXHJcblRlbXBsYXRlTWFuYWdlci5pbnN0YW5jZV90aXRsZSA9ICgpLT5cclxuXHRwYWdlVGl0bGUgPSBcIlwiXCJcclxuXHRcdHt7aW5zdGFuY2UubmFtZX19XHJcblx0XCJcIlwiXHJcblxyXG5cdHBhZ2VUaXRsZVRyQ2xhc3MgPSBcImluc3RhbmNlLW5hbWVcIlxyXG5cclxuXHRpZiBDb3JlRm9ybT8ucGFnZVRpdGxlRmllbGROYW1lXHJcblx0XHRwYWdlVGl0bGUgPSBcIlwiXCJcclxuXHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT1cIiN7Q29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lfVwiIGxhYmVsPWZhbHNlfX1cclxuXHRcdFwiXCJcIlxyXG5cdFx0cGFnZVRpdGxlVHJDbGFzcyA9IFwiXCJcclxuXHJcblx0aWYgQ29yZUZvcm0/LnBhZ2VUaXRsZVxyXG5cdFx0cGFnZVRpdGxlID0gXCJcIlwiXHJcblx0XHRcdCN7Q29yZUZvcm0ucGFnZVRpdGxlfVxyXG5cdFx0XCJcIlwiXHJcblx0XHRwYWdlVGl0bGVUckNsYXNzID0gXCJcIlxyXG5cclxuXHR2YWwgPVxyXG5cdFx0cGFnZVRpdGxlOiBwYWdlVGl0bGVcclxuXHRcdHBhZ2VUaXRsZVRyQ2xhc3M6IHBhZ2VUaXRsZVRyQ2xhc3NcclxuXHJcblx0cmV0dXJuIHZhbFxyXG5cclxuVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUgPSAoaW5zdGFuY2UsIF9leHBvcnQpIC0+XHJcblxyXG5cdHRlbXBsYXRlID0gXCJcIlwiXHJcblx0PGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlxyXG5cdFx0PHRhYmxlIGNsYXNzPVwidGFibGUtcGFnZS10aXRsZSBmb3JtLXRhYmxlIG5vLWJvcmRlciB0ZXh0LWFsaWduLWNlbnRlclwiIHN0eWxlPVwid2lkdGg6IDEwMCU7ZGlzcGxheTogaW5saW5lLXRhYmxlO1wiPlxyXG5cdFx0XHQ8dHIgY2xhc3M9XCIje3RoaXMuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGVUckNsYXNzfVwiPlxyXG5cdFx0XHRcdDx0ZCBjbGFzcz1cImluc3RhbmNlLXRhYmxlLW5hbWUtdGQgcGFnZS10aXRsZVwiPlxyXG5cdFx0XHRcdFx0I3t0aGlzLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlfVxyXG5cdFx0XHRcdDwvdGQ+XHJcblx0XHRcdDwvdHI+XHJcblxyXG5cdFx0PC90YWJsZT5cclxuXHRcdDx0YWJsZSBjbGFzcz1cInRhYmxlLXBhZ2UtYm9keSBmb3JtLXRhYmxlXCI+XHJcblx0XHRcdFx0PHRyIHN0eWxlPVwiaGVpZ2h0OjBweFwiPlxyXG5cdFx0XHRcdFx0PHRoIHN0eWxlPSd3aWR0aDogMTYlJz48L3RoPlxyXG5cdFx0XHRcdFx0PHRoPjwvdGg+XHJcblx0XHRcdFx0XHQ8dGggc3R5bGU9J3dpZHRoOiAxNiUnPjwvdGg+XHJcblx0XHRcdFx0XHQ8dGg+PC90aD5cclxuXHRcdFx0XHQ8L3RyPlxyXG5cdFwiXCJcIjtcclxuXHJcblx0dGFibGVfZmllbGRzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50YWJsZV9maWVsZHMoaW5zdGFuY2UpXHJcblxyXG5cdHRhYmxlX2ZpZWxkcy5mb3JFYWNoICh0YWJsZV9maWVsZCktPlxyXG5cclxuXHRcdHJlcXVpcmVkID0gXCJcIlxyXG5cdFx0aWYgIUNvcmVGb3JtPy5wYWdlVGl0bGVGaWVsZE5hbWUgfHwgQ29yZUZvcm0/LnBhZ2VUaXRsZUZpZWxkTmFtZSAhPSB0YWJsZV9maWVsZC5jb2RlXHJcblx0XHRcdGlmIHRhYmxlX2ZpZWxkLmlzX3JlcXVpcmVkXHJcblx0XHRcdFx0cmVxdWlyZWQgPSBcImlzLXJlcXVpcmVkXCJcclxuXHJcblx0XHRcdGlmIF9leHBvcnRcclxuXHRcdFx0XHRyZXF1aXJlZCA9IFwiXCI7XHJcblxyXG5cdFx0XHRwdXJlQ29kZSA9IFN0ZWVkb3MucmVtb3ZlU3BlY2lhbENoYXJhY3Rlcih0YWJsZV9maWVsZC5jb2RlKTtcclxuXHJcblx0XHRcdGlmIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGQodGFibGVfZmllbGQpXHJcblx0XHRcdFx0dGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfc3RhcnRcclxuXHRcdFx0XHR0ZW1wbGF0ZSArPSBcIlwiXCJcclxuXHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLXRpdGxlICN7cmVxdWlyZWR9XCI+XHJcblx0XHRcdFx0XHRcdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPVwiI3t0YWJsZV9maWVsZC5jb2RlfVwifX1cclxuXHRcdFx0XHRcdDwvdGQ+XHJcblx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1maWVsZCBvcGluaW9uLWZpZWxkIG9waW5pb24tZmllbGQtI3twdXJlQ29kZX0gYXV0b21hdGljXCIgY29sc3BhbiA9IFwiI3t0YWJsZV9maWVsZC50ZF9jb2xzcGFufVwiPlxyXG5cdFx0XHRcdFx0XHR7ez4gaW5zdGFuY2VTaWduVGV4dCBuYW1lPVwiI3t0YWJsZV9maWVsZC5jb2RlfVwifX1cclxuXHRcdFx0XHRcdDwvdGQ+XHJcblx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdFx0dGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluY2x1ZGVzKHRhYmxlX2ZpZWxkLnR5cGUsICdzZWN0aW9uLHRhYmxlJylcclxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0XHJcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSBcIlwiXCJcclxuXHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtY2hpbGRmaWVsZCB0ZC1jaGlsZGZpZWxkLSN7cHVyZUNvZGV9XCIgY29sc3BhbiA9IFwiI3t0YWJsZV9maWVsZC50ZF9jb2xzcGFufVwiPlxyXG5cdFx0XHRcdFx0XHQgICB7ez4gYWZGb3JtR3JvdXAgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIiBsYWJlbD1mYWxzZX19XHJcblx0XHRcdFx0XHRcdDwvdGQ+XHJcblx0XHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZFxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0XHJcblxyXG5cdFx0XHRcdFx0aWYgX2V4cG9ydFxyXG5cdFx0XHRcdFx0XHR0aXRsZV9wZXJtaXNzaW9uID0gXCJcIlxyXG5cdFx0XHRcdFx0XHRmaWVsZF9wZXJtaXNzaW9uID0gXCJcIlxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHR0aXRsZV9wZXJtaXNzaW9uID0gXCJ0aXRsZS1cIiArIHRhYmxlX2ZpZWxkLnBlcm1pc3Npb25cclxuXHRcdFx0XHRcdFx0ZmllbGRfcGVybWlzc2lvbiA9IFwiZmllbGQtXCIgKyB0YWJsZV9maWVsZC5wZXJtaXNzaW9uXHJcblxyXG5cdFx0XHRcdFx0dGVtcGxhdGUgKz0gXCJcIlwiXHJcblx0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLXRpdGxlIHRkLXRpdGxlLSN7cHVyZUNvZGV9ICN7dGl0bGVfcGVybWlzc2lvbn0gI3tyZXF1aXJlZH1cIj5cclxuXHRcdFx0XHRcdFx0XHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIn19XHJcblx0XHRcdFx0XHRcdDwvdGQ+XHJcblx0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLWZpZWxkIHRkLWZpZWxkLSN7cHVyZUNvZGV9ICN7ZmllbGRfcGVybWlzc2lvbn1cIiBjb2xzcGFuID0gXCIje3RhYmxlX2ZpZWxkLnRkX2NvbHNwYW59XCI+XHJcblx0XHRcdFx0XHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9XCIje3RhYmxlX2ZpZWxkLmNvZGV9XCIgbGFiZWw9ZmFsc2V9fVxyXG5cdFx0XHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9lbmRcclxuXHJcblx0dGVtcGxhdGUgKz0gXCJcIlwiXHJcblx0XHQ8L3RhYmxlPlxyXG5cclxuXHRcdDx0YWJsZSBjbGFzcz1cInRhYmxlLXBhZ2UtZm9vdGVyIGZvcm0tdGFibGUgbm8tYm9yZGVyXCI+XHJcblx0XHRcdDx0ciBjbGFzcz1cImFwcGxpY2FudC13cmFwcGVyXCI+XHJcblx0XHRcdFx0PHRkIGNsYXNzPVwibm93cmFwXCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtbGVmdCc+XHJcblx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e190IFwiaW5zdGFuY2VfaW5pdGlhdG9yXCJ9fe+8mjwvbGFiZWw+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLXRhYmxlLXdyYXBwZXItdGQgaW5saW5lLWxlZnQnPlxyXG5cdFx0XHRcdFx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cImFmU2VsZWN0VXNlclwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHRcdDx0ZCBjbGFzcz1cIm5vd3JhcFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0ncHVsbC1sZWZ0Jz5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLWxlZnQnPlxyXG5cdFx0XHRcdFx0XHRcdDxsYWJlbD57e190IFwiaW5zdGFuY2Vfc3VibWl0X2RhdGVcIn1977yaPC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1yaWdodCc+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdHt7Zm9ybWF0RGF0ZSBpbnN0YW5jZS5zdWJtaXRfZGF0ZSAne1wiZm9ybWF0XCI6XCJZWVlZLU1NLUREXCJ9J319XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC90ZD5cclxuXHRcdFx0PC90cj5cclxuXHRcdDwvdGFibGU+XHJcblx0PC9kaXY+XHJcblx0XCJcIlwiXHJcblx0cmV0dXJuIHRlbXBsYXRlXHJcblxyXG4j5q2k5aSE5qih5p2/5YWs55So5LiO77yaaW5zdGFuY2Ug57yW6L6R44CB5p+l55yL44CB5omT5Y2w44CB6L2s5Y+R5pe255Sf5oiQ6ZmE5Lu244CB5Y+R6YCB6YKu5Lu2Ym9keemDqOWIhih0YWJsZSDmqKHmnb8pXHJcbiPlpoLmnpzmnInkv67mlLnvvIzor7fmtYvor5Xnoa7orqTlhbbku5blip/og73mmK/lkKbmraPluLjjgIJcclxuVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZSA9XHJcblx0ZGVmYXVsdDogKGluc3RhbmNlKS0+XHJcblxyXG5cdFx0dGVtcGxhdGUgPSBcIlwiXCJcclxuXHRcdFx0PGRpdiBjbGFzcz1cIndpdGgtYm9yZGVyIGNvbC1tZC0xMlwiPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnN0YW5jZS1uYW1lXCI+XHJcblx0XHRcdFx0XHQ8aDMgY2xhc3M9XCJib3gtdGl0bGVcIj4je1RlbXBsYXRlTWFuYWdlci5pbnN0YW5jZV90aXRsZSgpLnBhZ2VUaXRsZX08L2gzPlxyXG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJoZWxwLWJsb2NrXCI+PC9zcGFuPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwiaGVscC1ibG9ja1wiPjwvc3Bhbj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdHt7I2VhY2ggc3RlZWRvc19mb3JtLmZpZWxkc319XHJcblx0XHRcdFx0e3sjaWYgaXNPcGluaW9uRmllbGQgdGhpc319XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwie3sjaWYgdGhpcy5pc193aWRlfX1jb2wtbWQtMTJ7e2Vsc2V9fWNvbC1tZC02e3svaWZ9fSBmaWVsZC17e3RoaXMuY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGF1dG9tYXRpYyBvcGluaW9uLWZpZWxkLXt7dGhpcy5jb2RlfX1cIj5cclxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9dGhpcy5jb2RlfX08L2xhYmVsPlxyXG5cclxuXHRcdFx0XHRcdFx0XHR7ez4gaW5zdGFuY2VTaWduVGV4dCBuYW1lPXRoaXMuY29kZX19XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdHt7I2lmIGluY2x1ZGVzIHRoaXMudHlwZSAnc2VjdGlvbix0YWJsZSd9fVxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGZpZWxkLXt7dGhpcy5jb2RlfX1cIj5cclxuXHRcdFx0XHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGUgbGFiZWw9ZmFsc2V9fVxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ7eyNpZiB0aGlzLmlzX3dpZGV9fWNvbC1tZC0xMnt7ZWxzZX19Y29sLW1kLTZ7ey9pZn19IGZpZWxkLXt7dGhpcy5jb2RlfX1cIj5cclxuXHRcdFx0XHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlfX1cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHR7ey9lYWNofX1cclxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJhcHBsaWNhbnQtd3JhcHBlciBmb3JtLWdyb3VwIGZvcm0taG9yaXpvbnRhbFwiPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+XHJcblx0XHRcdFx0XHQgIHt7X3QgXCJpbnN0YW5jZV9pbml0aWF0b3JcIn19Jm5ic3A7OlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cImFmU2VsZWN0VXNlclwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XHJcblx0XHRcdFx0ICA8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcIlwiXCJcclxuXHRcdHJldHVybiB0ZW1wbGF0ZVxyXG5cclxuXHR0YWJsZTogKGluc3RhbmNlKS0+XHJcblx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUoaW5zdGFuY2UpXHJcbiNcdHRhYmxlOiAnJydcclxuI1x0XHQ8dGFibGUgY2xhc3M9XCJib3gtaGVhZGVyICB3aXRoLWJvcmRlclwiIHN0eWxlPVwid2lkdGg6IDEwMCU7ZGlzcGxheTogaW5saW5lLXRhYmxlO1wiPlxyXG4jXHRcdFx0PHRyIGNsYXNzPVwiaW5zdGFuY2UtbmFtZVwiPlxyXG4jXHRcdFx0XHQ8dGQgY2xhc3M9XCJpbnN0YW5jZS10YWJsZS1uYW1lLXRkXCI+XHJcbiNcdFx0XHRcdFx0PGgzIGNsYXNzPVwiYm94LXRpdGxlXCI+e3tpbnN0YW5jZS5uYW1lfX08L2gzPlxyXG4jXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiaGVscC1ibG9ja1wiPjwvc3Bhbj5cclxuI1x0XHRcdFx0PC90ZD5cclxuI1x0XHRcdDwvdHI+XHJcbiMgICAgICAgICAgICA8dHIgY2xhc3M9XCJhcHBsaWNhbnQtd3JhcHBlclwiPlxyXG4jXHRcdFx0XHQ8dGQgY2xhc3M9XCJpbnN0YW5jZS10YWJsZS13cmFwcGVyLXRkXCI+XHJcbiNcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7X3QgXCJpbnN0YW5jZV9pbml0aWF0b3JcIn19Jm5ic3A7OjwvbGFiZWw+XHJcbiNcdFx0XHRcdFx0e3s+VGVtcGxhdGUuZHluYW1pYyAgdGVtcGxhdGU9XCJhZlNlbGVjdFVzZXJcIiBkYXRhPWFwcGxpY2FudENvbnRleHR9fVxyXG4jXHRcdFx0XHQ8L3RkPlxyXG4jXHRcdFx0PC90cj5cclxuIyAgICAgICAgPC90YWJsZT5cclxuI1x0XHQ8dGFibGUgY2xhc3M9XCJmb3JtLXRhYmxlXCI+XHJcbiNcdFx0ICAgIHt7I2VhY2ggdGFibGVfZmllbGRzfX1cclxuI1x0XHRcdFx0e3sjaWYgaXNPcGluaW9uRmllbGQgdGhpc319XHJcbiNcdFx0XHRcdFx0e3t7dHJfc3RhcnR9fX1cclxuI1x0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLXRpdGxlIHt7I2lmIGlzX3JlcXVpcmVkfX1pcy1yZXF1aXJlZHt7L2lmfX1cIj5cclxuI1x0XHRcdFx0XHRcdFx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9dGhpcy5jb2RlfX1cclxuI1x0XHRcdFx0XHRcdDwvdGQ+XHJcbiNcdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1maWVsZCBvcGluaW9uLWZpZWxkXCIgY29sc3BhbiA9ICd7e3RkX2NvbHNwYW59fSc+XHJcbiNcdFx0XHRcdFx0XHRcdHt7PiBpbnN0YW5jZVNpZ25UZXh0IHN0ZXA9KGdldE9waW5pb25GaWVsZFN0ZXBOYW1lIHRoaXMpIGRlZmF1bHQ9Jyd9fVxyXG4jXHRcdFx0XHRcdFx0PC90ZD5cclxuI1x0XHRcdFx0XHR7e3t0cl9lbmR9fX1cclxuI1x0XHRcdFx0e3tlbHNlfX1cclxuI1x0XHRcdFx0XHR7eyNpZiBpbmNsdWRlcyB0aGlzLnR5cGUgJ3NlY3Rpb24sdGFibGUnfX1cclxuI1x0XHRcdFx0XHRcdHt7e3RyX3N0YXJ0fX19XHJcbiNcdFx0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLWNoaWxkZmllbGRcIiBjb2xzcGFuID0gJ3t7dGRfY29sc3Bhbn19Jz5cclxuI1x0XHRcdFx0XHRcdFx0ICAge3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlIGxhYmVsPWZhbHNlfX1cclxuI1x0XHRcdFx0XHRcdFx0PC90ZD5cclxuI1x0XHRcdFx0XHRcdHt7e3RyX2VuZH19fVxyXG4jXHRcdFx0XHRcdHt7ZWxzZX19XHJcbiNcdFx0XHRcdFx0XHR7e3t0cl9zdGFydH19fVxyXG4jXHRcdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC10aXRsZSB7eyNpZiBpc19yZXF1aXJlZH19aXMtcmVxdWlyZWR7ey9pZn19XCI+XHJcbiNcdFx0XHRcdFx0XHRcdFx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9dGhpcy5jb2RlfX1cclxuI1x0XHRcdFx0XHRcdFx0PC90ZD5cclxuI1x0XHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtZmllbGQge3twZXJtaXNzaW9ufX1cIiBjb2xzcGFuID0gJ3t7dGRfY29sc3Bhbn19Jz5cclxuI1x0XHRcdFx0XHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGUgbGFiZWw9ZmFsc2V9fVxyXG4jXHRcdFx0XHRcdFx0XHQ8L3RkPlxyXG4jXHRcdFx0XHRcdFx0e3t7dHJfZW5kfX19XHJcbiNcdFx0XHRcdFx0e3svaWZ9fVxyXG4jXHRcdFx0XHR7ey9pZn19XHJcbiNcclxuI1x0XHQgICAge3svZWFjaH19XHJcbiNcdFx0PC90YWJsZT5cclxuI1x0JycnXHJcblxyXG5UZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlSGVscHMgPVxyXG5cdGFwcGxpY2FudENvbnRleHQ6IC0+XHJcblx0XHRzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRkYXRhID0ge1xyXG5cdFx0XHRuYW1lOiAnaW5zX2FwcGxpY2FudCcsXHJcblx0XHRcdGF0dHM6IHtcclxuXHRcdFx0XHRuYW1lOiAnaW5zX2FwcGxpY2FudCcsXHJcblx0XHRcdFx0aWQ6ICdpbnNfYXBwbGljYW50JyxcclxuXHRcdFx0XHRjbGFzczogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sJyxcclxuXHRcdFx0XHRzdHlsZTogJ3BhZGRpbmc6NnB4IDEycHg7d2lkdGg6MTQwcHg7ZGlzcGxheTppbmxpbmUnXHJcblx0XHRcdH1cclxuXHRcdH1cclxuI1x0XHRpZiBub3Qgc3RlZWRvc19pbnN0YW5jZSB8fCBzdGVlZG9zX2luc3RhbmNlLnN0YXRlICE9IFwiZHJhZnRcIlxyXG5cdFx0ZGF0YS5hdHRzLmRpc2FibGVkID0gdHJ1ZVxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5pbnN0YW5jZUlkOiAtPlxyXG5cdHJldHVybiAnaW5zdGFuY2Vmb3JtJzsjXCJpbnN0YW5jZV9cIiArIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKTtcclxuXHJcbmZvcm1fdHlwZXM6IC0+XHJcblx0aWYgQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpXHJcblx0XHRyZXR1cm4gJ2Rpc2FibGVkJztcclxuXHRlbHNlXHJcblx0XHRyZXR1cm4gJ21ldGhvZCc7XHJcblxyXG5zdGVlZG9zX2Zvcm06IC0+XHJcblx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcclxuXHRpZiBmb3JtX3ZlcnNpb25cclxuXHRcdHJldHVybiBmb3JtX3ZlcnNpb25cclxuXHJcbmlubmVyc3ViZm9ybUNvbnRleHQ6IChvYmopLT5cclxuXHRkb2NfdmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xyXG5cdG9ialtcInRhYmxlVmFsdWVzXCJdID0gaWYgZG9jX3ZhbHVlcyB0aGVuIGRvY192YWx1ZXNbb2JqLmNvZGVdIGVsc2UgW11cclxuXHRvYmpbXCJmb3JtSWRcIl0gPSBmb3JtSWQ7XHJcblx0cmV0dXJuIG9iajtcclxuXHJcbmluc3RhbmNlOiAtPlxyXG5cdFNlc3Npb24uZ2V0KFwiY2hhbmdlX2RhdGVcIilcclxuXHRpZiAoU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKVxyXG5cdFx0c3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0cmV0dXJuIHN0ZWVkb3NfaW5zdGFuY2U7XHJcblxyXG5lcXVhbHM6IChhLCBiKSAtPlxyXG5cdHJldHVybiAoYSA9PSBiKVxyXG5cclxuaW5jbHVkZXM6IChhLCBiKSAtPlxyXG5cdHJldHVybiBiLnNwbGl0KCcsJykuaW5jbHVkZXMoYSk7XHJcblxyXG5maWVsZHM6IC0+XHJcblx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcclxuXHRpZiBmb3JtX3ZlcnNpb25cclxuXHRcdHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XHJcblxyXG5kb2NfdmFsdWVzOiAtPlxyXG5cdFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcclxuXHJcbmluc3RhbmNlX2JveF9zdHlsZTogLT5cclxuXHRib3ggPSBTZXNzaW9uLmdldChcImJveFwiKVxyXG5cdGlmIGJveCA9PSBcImluYm94XCIgfHwgYm94ID09IFwiZHJhZnRcIlxyXG5cdFx0anVkZ2UgPSBTZXNzaW9uLmdldChcImp1ZGdlXCIpXHJcblx0XHRpZiBqdWRnZVxyXG5cdFx0XHRpZiAoanVkZ2UgPT0gXCJhcHByb3ZlZFwiKVxyXG5cdFx0XHRcdHJldHVybiBcImJveC1zdWNjZXNzXCJcclxuXHRcdFx0ZWxzZSBpZiAoanVkZ2UgPT0gXCJyZWplY3RlZFwiKVxyXG5cdFx0XHRcdHJldHVybiBcImJveC1kYW5nZXJcIlxyXG5cdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdGlmIGlucyAmJiBpbnMuZmluYWxfZGVjaXNpb25cclxuXHRcdGlmIGlucy5maW5hbF9kZWNpc2lvbiA9PSBcImFwcHJvdmVkXCJcclxuXHRcdFx0cmV0dXJuIFwiYm94LXN1Y2Nlc3NcIlxyXG5cdFx0ZWxzZSBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09IFwicmVqZWN0ZWRcIilcclxuXHRcdFx0cmV0dXJuIFwiYm94LWRhbmdlclwiXHJcblxyXG5cclxuVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlID0gKGluc3RhbmNlLCB0ZW1wbGF0ZU5hbWUpIC0+XHJcblx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XHJcblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XHJcblxyXG5cdGlmIHRlbXBsYXRlTmFtZVxyXG5cdFx0aWYgdGVtcGxhdGVOYW1lID09ICd0YWJsZSdcclxuXHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUudGFibGUoaW5zdGFuY2UpXHJcblx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS5kZWZhdWx0KGluc3RhbmNlKVxyXG5cclxuXHRpZiBTZXNzaW9uPy5nZXQoXCJpbnN0YW5jZVByaW50XCIpXHJcblx0XHRpZiBmbG93Py5wcmludF90ZW1wbGF0ZVxyXG5cdFx0XHRyZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93LnByaW50X3RlbXBsYXRlICsgXCI8L2Rpdj5cIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpZiBmbG93Py5pbnN0YW5jZV90ZW1wbGF0ZVxyXG5cdFx0XHRcdHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cIiArIGZsb3cuaW5zdGFuY2VfdGVtcGxhdGUgKyBcIjwvZGl2PlwiXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSlcclxuXHRlbHNlXHJcblx0XHRpZiBTdGVlZG9zLmlzTW9iaWxlKClcclxuXHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUuZGVmYXVsdChpbnN0YW5jZSlcclxuXHJcblx0XHRpZiBmbG93Py5pbnN0YW5jZV90ZW1wbGF0ZVxyXG5cdFx0XHRyZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlICsgXCI8L2Rpdj5cIlxyXG5cclxuXHRcdGlmIGZvcm0/Lmluc3RhbmNlX3N0eWxlXHJcblx0XHRcdGlmIGZvcm0uaW5zdGFuY2Vfc3R5bGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKVxyXG5cdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS5kZWZhdWx0KGluc3RhbmNlKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS5kZWZhdWx0KGluc3RhbmNlKVxyXG5cclxuI1RlbXBsYXRlTWFuYWdlci5leHBvcnRUZW1wbGF0ZSA9IChmbG93SWQpIC0+XHJcbiNcdHRlbXBsYXRlID0gVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlKGZsb3dJZCk7XHJcbiNcclxuI1x0ZmxvdyA9IFdvcmtmbG93TWFuYWdlci5nZXRGbG93KGZsb3dJZCk7XHJcbiNcclxuI1x0aWYgZmxvdz8uaW5zdGFuY2VfdGVtcGxhdGVcclxuI1x0XHRyZXR1cm4gdGVtcGxhdGU7XHJcbiNcclxuI1x0cmV0dXJuIHRlbXBsYXRlO1xyXG5cclxuIiwidmFyIGZvcm1JZDsgICAgICAgICAgICAgICAgIFxuXG5UZW1wbGF0ZU1hbmFnZXIgPSB7fTtcblxuZm9ybUlkID0gJ2luc3RhbmNlZm9ybSc7XG5cblRlbXBsYXRlTWFuYWdlci5pbnN0YW5jZV90aXRsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGFnZVRpdGxlLCBwYWdlVGl0bGVUckNsYXNzLCB2YWw7XG4gIHBhZ2VUaXRsZSA9IFwie3tpbnN0YW5jZS5uYW1lfX1cIjtcbiAgcGFnZVRpdGxlVHJDbGFzcyA9IFwiaW5zdGFuY2UtbmFtZVwiO1xuICBpZiAodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lIDogdm9pZCAwKSB7XG4gICAgcGFnZVRpdGxlID0gXCJ7ez4gYWZGb3JtR3JvdXAgbmFtZT1cXFwiXCIgKyBDb3JlRm9ybS5wYWdlVGl0bGVGaWVsZE5hbWUgKyBcIlxcXCIgbGFiZWw9ZmFsc2V9fVwiO1xuICAgIHBhZ2VUaXRsZVRyQ2xhc3MgPSBcIlwiO1xuICB9XG4gIGlmICh0eXBlb2YgQ29yZUZvcm0gIT09IFwidW5kZWZpbmVkXCIgJiYgQ29yZUZvcm0gIT09IG51bGwgPyBDb3JlRm9ybS5wYWdlVGl0bGUgOiB2b2lkIDApIHtcbiAgICBwYWdlVGl0bGUgPSBcIlwiICsgQ29yZUZvcm0ucGFnZVRpdGxlO1xuICAgIHBhZ2VUaXRsZVRyQ2xhc3MgPSBcIlwiO1xuICB9XG4gIHZhbCA9IHtcbiAgICBwYWdlVGl0bGU6IHBhZ2VUaXRsZSxcbiAgICBwYWdlVGl0bGVUckNsYXNzOiBwYWdlVGl0bGVUckNsYXNzXG4gIH07XG4gIHJldHVybiB2YWw7XG59O1xuXG5UZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZSA9IGZ1bmN0aW9uKGluc3RhbmNlLCBfZXhwb3J0KSB7XG4gIHZhciB0YWJsZV9maWVsZHMsIHRlbXBsYXRlO1xuICB0ZW1wbGF0ZSA9IFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlxcblx0PHRhYmxlIGNsYXNzPVxcXCJ0YWJsZS1wYWdlLXRpdGxlIGZvcm0tdGFibGUgbm8tYm9yZGVyIHRleHQtYWxpZ24tY2VudGVyXFxcIiBzdHlsZT1cXFwid2lkdGg6IDEwMCU7ZGlzcGxheTogaW5saW5lLXRhYmxlO1xcXCI+XFxuXHRcdDx0ciBjbGFzcz1cXFwiXCIgKyAodGhpcy5pbnN0YW5jZV90aXRsZSgpLnBhZ2VUaXRsZVRyQ2xhc3MpICsgXCJcXFwiPlxcblx0XHRcdDx0ZCBjbGFzcz1cXFwiaW5zdGFuY2UtdGFibGUtbmFtZS10ZCBwYWdlLXRpdGxlXFxcIj5cXG5cdFx0XHRcdFwiICsgKHRoaXMuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGUpICsgXCJcXG5cdFx0XHQ8L3RkPlxcblx0XHQ8L3RyPlxcblxcblx0PC90YWJsZT5cXG5cdDx0YWJsZSBjbGFzcz1cXFwidGFibGUtcGFnZS1ib2R5IGZvcm0tdGFibGVcXFwiPlxcblx0XHRcdDx0ciBzdHlsZT1cXFwiaGVpZ2h0OjBweFxcXCI+XFxuXHRcdFx0XHQ8dGggc3R5bGU9J3dpZHRoOiAxNiUnPjwvdGg+XFxuXHRcdFx0XHQ8dGg+PC90aD5cXG5cdFx0XHRcdDx0aCBzdHlsZT0nd2lkdGg6IDE2JSc+PC90aD5cXG5cdFx0XHRcdDx0aD48L3RoPlxcblx0XHRcdDwvdHI+XCI7XG4gIHRhYmxlX2ZpZWxkcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudGFibGVfZmllbGRzKGluc3RhbmNlKTtcbiAgdGFibGVfZmllbGRzLmZvckVhY2goZnVuY3Rpb24odGFibGVfZmllbGQpIHtcbiAgICB2YXIgZmllbGRfcGVybWlzc2lvbiwgcHVyZUNvZGUsIHJlcXVpcmVkLCB0aXRsZV9wZXJtaXNzaW9uO1xuICAgIHJlcXVpcmVkID0gXCJcIjtcbiAgICBpZiAoISh0eXBlb2YgQ29yZUZvcm0gIT09IFwidW5kZWZpbmVkXCIgJiYgQ29yZUZvcm0gIT09IG51bGwgPyBDb3JlRm9ybS5wYWdlVGl0bGVGaWVsZE5hbWUgOiB2b2lkIDApIHx8ICh0eXBlb2YgQ29yZUZvcm0gIT09IFwidW5kZWZpbmVkXCIgJiYgQ29yZUZvcm0gIT09IG51bGwgPyBDb3JlRm9ybS5wYWdlVGl0bGVGaWVsZE5hbWUgOiB2b2lkIDApICE9PSB0YWJsZV9maWVsZC5jb2RlKSB7XG4gICAgICBpZiAodGFibGVfZmllbGQuaXNfcmVxdWlyZWQpIHtcbiAgICAgICAgcmVxdWlyZWQgPSBcImlzLXJlcXVpcmVkXCI7XG4gICAgICB9XG4gICAgICBpZiAoX2V4cG9ydCkge1xuICAgICAgICByZXF1aXJlZCA9IFwiXCI7XG4gICAgICB9XG4gICAgICBwdXJlQ29kZSA9IFN0ZWVkb3MucmVtb3ZlU3BlY2lhbENoYXJhY3Rlcih0YWJsZV9maWVsZC5jb2RlKTtcbiAgICAgIGlmIChJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkKHRhYmxlX2ZpZWxkKSkge1xuICAgICAgICB0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydDtcbiAgICAgICAgdGVtcGxhdGUgKz0gXCI8dGQgY2xhc3M9XFxcInRkLXRpdGxlIFwiICsgcmVxdWlyZWQgKyBcIlxcXCI+XFxuXHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT1cXFwiXCIgKyB0YWJsZV9maWVsZC5jb2RlICsgXCJcXFwifX1cXG48L3RkPlxcbjx0ZCBjbGFzcz1cXFwidGQtZmllbGQgb3Bpbmlvbi1maWVsZCBvcGluaW9uLWZpZWxkLVwiICsgcHVyZUNvZGUgKyBcIiBhdXRvbWF0aWNcXFwiIGNvbHNwYW4gPSBcXFwiXCIgKyB0YWJsZV9maWVsZC50ZF9jb2xzcGFuICsgXCJcXFwiPlxcblx0e3s+IGluc3RhbmNlU2lnblRleHQgbmFtZT1cXFwiXCIgKyB0YWJsZV9maWVsZC5jb2RlICsgXCJcXFwifX1cXG48L3RkPlwiO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5jbHVkZXModGFibGVfZmllbGQudHlwZSwgJ3NlY3Rpb24sdGFibGUnKSkge1xuICAgICAgICAgIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0O1xuICAgICAgICAgIHRlbXBsYXRlICs9IFwiPHRkIGNsYXNzPVxcXCJ0ZC1jaGlsZGZpZWxkIHRkLWNoaWxkZmllbGQtXCIgKyBwdXJlQ29kZSArIFwiXFxcIiBjb2xzcGFuID0gXFxcIlwiICsgdGFibGVfZmllbGQudGRfY29sc3BhbiArIFwiXFxcIj5cXG4gICB7ez4gYWZGb3JtR3JvdXAgbmFtZT1cXFwiXCIgKyB0YWJsZV9maWVsZC5jb2RlICsgXCJcXFwiIGxhYmVsPWZhbHNlfX1cXG48L3RkPlwiO1xuICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9lbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfc3RhcnQ7XG4gICAgICAgICAgaWYgKF9leHBvcnQpIHtcbiAgICAgICAgICAgIHRpdGxlX3Blcm1pc3Npb24gPSBcIlwiO1xuICAgICAgICAgICAgZmllbGRfcGVybWlzc2lvbiA9IFwiXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlX3Blcm1pc3Npb24gPSBcInRpdGxlLVwiICsgdGFibGVfZmllbGQucGVybWlzc2lvbjtcbiAgICAgICAgICAgIGZpZWxkX3Blcm1pc3Npb24gPSBcImZpZWxkLVwiICsgdGFibGVfZmllbGQucGVybWlzc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGVtcGxhdGUgKz0gXCI8dGQgY2xhc3M9XFxcInRkLXRpdGxlIHRkLXRpdGxlLVwiICsgcHVyZUNvZGUgKyBcIiBcIiArIHRpdGxlX3Blcm1pc3Npb24gKyBcIiBcIiArIHJlcXVpcmVkICsgXCJcXFwiPlxcblx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIn19XFxuPC90ZD5cXG48dGQgY2xhc3M9XFxcInRkLWZpZWxkIHRkLWZpZWxkLVwiICsgcHVyZUNvZGUgKyBcIiBcIiArIGZpZWxkX3Blcm1pc3Npb24gKyBcIlxcXCIgY29sc3BhbiA9IFxcXCJcIiArIHRhYmxlX2ZpZWxkLnRkX2NvbHNwYW4gKyBcIlxcXCI+XFxuXHR7ez4gYWZGb3JtR3JvdXAgbmFtZT1cXFwiXCIgKyB0YWJsZV9maWVsZC5jb2RlICsgXCJcXFwiIGxhYmVsPWZhbHNlfX1cXG48L3RkPlwiO1xuICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9lbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB0ZW1wbGF0ZSArPSBcIlx0PC90YWJsZT5cXG5cXG5cdDx0YWJsZSBjbGFzcz1cXFwidGFibGUtcGFnZS1mb290ZXIgZm9ybS10YWJsZSBuby1ib3JkZXJcXFwiPlxcblx0XHQ8dHIgY2xhc3M9XFxcImFwcGxpY2FudC13cmFwcGVyXFxcIj5cXG5cdFx0XHQ8dGQgY2xhc3M9XFxcIm5vd3JhcFxcXCI+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtbGVmdCc+XFxuXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tfdCBcXFwiaW5zdGFuY2VfaW5pdGlhdG9yXFxcIn1977yaPC9sYWJlbD5cXG5cdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtdGFibGUtd3JhcHBlci10ZCBpbmxpbmUtbGVmdCc+XFxuXHRcdFx0XHRcdHt7PlRlbXBsYXRlLmR5bmFtaWMgIHRlbXBsYXRlPVxcXCJhZlNlbGVjdFVzZXJcXFwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHQ8L3RkPlxcblx0XHRcdDx0ZCBjbGFzcz1cXFwibm93cmFwXFxcIj5cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J3B1bGwtbGVmdCc+XFxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1sZWZ0Jz5cXG5cdFx0XHRcdFx0XHQ8bGFiZWw+e3tfdCBcXFwiaW5zdGFuY2Vfc3VibWl0X2RhdGVcXFwifX3vvJo8L2xhYmVsPlxcblx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLXJpZ2h0Jz5cXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdHt7Zm9ybWF0RGF0ZSBpbnN0YW5jZS5zdWJtaXRfZGF0ZSAne1xcXCJmb3JtYXRcXFwiOlxcXCJZWVlZLU1NLUREXFxcIn0nfX1cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHQ8L3RkPlxcblx0XHQ8L3RyPlxcblx0PC90YWJsZT5cXG48L2Rpdj5cIjtcbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcblxuVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZSA9IHtcbiAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgdmFyIHRlbXBsYXRlO1xuICAgIHRlbXBsYXRlID0gXCI8ZGl2IGNsYXNzPVxcXCJ3aXRoLWJvcmRlciBjb2wtbWQtMTJcXFwiPlxcblx0PGRpdiBjbGFzcz1cXFwiaW5zdGFuY2UtbmFtZVxcXCI+XFxuXHRcdDxoMyBjbGFzcz1cXFwiYm94LXRpdGxlXFxcIj5cIiArIChUZW1wbGF0ZU1hbmFnZXIuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGUpICsgXCI8L2gzPlxcblx0XHQ8c3BhbiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+PC9zcGFuPlxcblx0PC9kaXY+XFxuXHQ8c3BhbiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+PC9zcGFuPlxcbjwvZGl2Plxcbnt7I2VhY2ggc3RlZWRvc19mb3JtLmZpZWxkc319XFxuXHR7eyNpZiBpc09waW5pb25GaWVsZCB0aGlzfX1cXG5cdFx0PGRpdiBjbGFzcz1cXFwie3sjaWYgdGhpcy5pc193aWRlfX1jb2wtbWQtMTJ7e2Vsc2V9fWNvbC1tZC02e3svaWZ9fSBmaWVsZC17e3RoaXMuY29kZX19XFxcIj5cXG5cdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIGF1dG9tYXRpYyBvcGluaW9uLWZpZWxkLXt7dGhpcy5jb2RlfX1cXFwiPlxcblx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2FmRmllbGRMYWJlbFRleHQgbmFtZT10aGlzLmNvZGV9fTwvbGFiZWw+XFxuXFxuXHRcdFx0XHR7ez4gaW5zdGFuY2VTaWduVGV4dCBuYW1lPXRoaXMuY29kZX19XFxuXHRcdFx0PC9kaXY+XFxuXHRcdDwvZGl2Plxcblx0e3tlbHNlfX1cXG5cdFx0e3sjaWYgaW5jbHVkZXMgdGhpcy50eXBlICdzZWN0aW9uLHRhYmxlJ319XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyIGZpZWxkLXt7dGhpcy5jb2RlfX1cXFwiPlxcblx0XHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlIGxhYmVsPWZhbHNlfX1cXG5cdFx0XHQ8L2Rpdj5cXG5cdFx0e3tlbHNlfX1cXG5cdFx0XHQ8ZGl2IGNsYXNzPVxcXCJ7eyNpZiB0aGlzLmlzX3dpZGV9fWNvbC1tZC0xMnt7ZWxzZX19Y29sLW1kLTZ7ey9pZn19IGZpZWxkLXt7dGhpcy5jb2RlfX1cXFwiPlxcblx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZX19XFxuXHRcdFx0PC9kaXY+XFxuXHRcdHt7L2lmfX1cXG5cdHt7L2lmfX1cXG57ey9lYWNofX1cXG48ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcblx0PGRpdiBjbGFzcz1cXFwiYXBwbGljYW50LXdyYXBwZXIgZm9ybS1ncm91cCBmb3JtLWhvcml6b250YWxcXFwiPlxcblx0PGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcblx0XHQ8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cC1hZGRvblxcXCI+XFxuXHRcdCAge3tfdCBcXFwiaW5zdGFuY2VfaW5pdGlhdG9yXFxcIn19Jm5ic3A7Olxcblx0XHQ8L2Rpdj5cXG5cdFx0e3s+VGVtcGxhdGUuZHluYW1pYyAgdGVtcGxhdGU9XFxcImFmU2VsZWN0VXNlclxcXCIgZGF0YT1hcHBsaWNhbnRDb250ZXh0fX1cXG5cdCAgPC9kaXY+XFxuXHQ8L2Rpdj5cXG48L2Rpdj5cIjtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH0sXG4gIHRhYmxlOiBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZShpbnN0YW5jZSk7XG4gIH1cbn07XG5cblRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGVIZWxwcyA9IHtcbiAgYXBwbGljYW50Q29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGEsIHN0ZWVkb3NfaW5zdGFuY2U7XG4gICAgc3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGRhdGEgPSB7XG4gICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICBhdHRzOiB7XG4gICAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgaWQ6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgXCJjbGFzc1wiOiAnc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wnLFxuICAgICAgICBzdHlsZTogJ3BhZGRpbmc6NnB4IDEycHg7d2lkdGg6MTQwcHg7ZGlzcGxheTppbmxpbmUnXG4gICAgICB9XG4gICAgfTtcbiAgICBkYXRhLmF0dHMuZGlzYWJsZWQgPSB0cnVlO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG59O1xuXG4oe1xuICBpbnN0YW5jZUlkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ2luc3RhbmNlZm9ybSc7XG4gIH0sXG4gIGZvcm1fdHlwZXM6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KCkpIHtcbiAgICAgIHJldHVybiAnZGlzYWJsZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ21ldGhvZCc7XG4gICAgfVxuICB9LFxuICBzdGVlZG9zX2Zvcm06IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gZm9ybV92ZXJzaW9uO1xuICAgIH1cbiAgfSxcbiAgaW5uZXJzdWJmb3JtQ29udGV4dDogZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGRvY192YWx1ZXM7XG4gICAgZG9jX3ZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgICBvYmpbXCJ0YWJsZVZhbHVlc1wiXSA9IGRvY192YWx1ZXMgPyBkb2NfdmFsdWVzW29iai5jb2RlXSA6IFtdO1xuICAgIG9ialtcImZvcm1JZFwiXSA9IGZvcm1JZDtcbiAgICByZXR1cm4gb2JqO1xuICB9LFxuICBpbnN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0ZWVkb3NfaW5zdGFuY2U7XG4gICAgU2Vzc2lvbi5nZXQoXCJjaGFuZ2VfZGF0ZVwiKTtcbiAgICBpZiAoU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKSB7XG4gICAgICBzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICByZXR1cm4gc3RlZWRvc19pbnN0YW5jZTtcbiAgICB9XG4gIH0sXG4gIGVxdWFsczogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9LFxuICBpbmNsdWRlczogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLnNwbGl0KCcsJykuaW5jbHVkZXMoYSk7XG4gIH0sXG4gIGZpZWxkczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XG4gICAgfVxuICB9LFxuICBkb2NfdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xuICB9LFxuICBpbnN0YW5jZV9ib3hfc3R5bGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib3gsIGlucywganVkZ2U7XG4gICAgYm94ID0gU2Vzc2lvbi5nZXQoXCJib3hcIik7XG4gICAgaWYgKGJveCA9PT0gXCJpbmJveFwiIHx8IGJveCA9PT0gXCJkcmFmdFwiKSB7XG4gICAgICBqdWRnZSA9IFNlc3Npb24uZ2V0KFwianVkZ2VcIik7XG4gICAgICBpZiAoanVkZ2UpIHtcbiAgICAgICAgaWYgKGp1ZGdlID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgICAgICByZXR1cm4gXCJib3gtc3VjY2Vzc1wiO1xuICAgICAgICB9IGVsc2UgaWYgKGp1ZGdlID09PSBcInJlamVjdGVkXCIpIHtcbiAgICAgICAgICByZXR1cm4gXCJib3gtZGFuZ2VyXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgaWYgKGlucyAmJiBpbnMuZmluYWxfZGVjaXNpb24pIHtcbiAgICAgIGlmIChpbnMuZmluYWxfZGVjaXNpb24gPT09IFwiYXBwcm92ZWRcIikge1xuICAgICAgICByZXR1cm4gXCJib3gtc3VjY2Vzc1wiO1xuICAgICAgfSBlbHNlIGlmIChpbnMuZmluYWxfZGVjaXNpb24gPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICByZXR1cm4gXCJib3gtZGFuZ2VyXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlID0gZnVuY3Rpb24oaW5zdGFuY2UsIHRlbXBsYXRlTmFtZSkge1xuICB2YXIgZmxvdywgZm9ybTtcbiAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XG4gIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuICBpZiAodGVtcGxhdGVOYW1lKSB7XG4gICAgaWYgKHRlbXBsYXRlTmFtZSA9PT0gJ3RhYmxlJykge1xuICAgICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUudGFibGUoaW5zdGFuY2UpO1xuICAgIH1cbiAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZVtcImRlZmF1bHRcIl0oaW5zdGFuY2UpO1xuICB9XG4gIGlmICh0eXBlb2YgU2Vzc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTZXNzaW9uICE9PSBudWxsID8gU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpIDogdm9pZCAwKSB7XG4gICAgaWYgKGZsb3cgIT0gbnVsbCA/IGZsb3cucHJpbnRfdGVtcGxhdGUgOiB2b2lkIDApIHtcbiAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cIiArIGZsb3cucHJpbnRfdGVtcGxhdGUgKyBcIjwvZGl2PlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZmxvdyAhPSBudWxsID8gZmxvdy5pbnN0YW5jZV90ZW1wbGF0ZSA6IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlICsgXCI8L2Rpdj5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGVbXCJkZWZhdWx0XCJdKGluc3RhbmNlKTtcbiAgICB9XG4gICAgaWYgKGZsb3cgIT0gbnVsbCA/IGZsb3cuaW5zdGFuY2VfdGVtcGxhdGUgOiB2b2lkIDApIHtcbiAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cIiArIGZsb3cuaW5zdGFuY2VfdGVtcGxhdGUgKyBcIjwvZGl2PlwiO1xuICAgIH1cbiAgICBpZiAoZm9ybSAhPSBudWxsID8gZm9ybS5pbnN0YW5jZV9zdHlsZSA6IHZvaWQgMCkge1xuICAgICAgaWYgKGZvcm0uaW5zdGFuY2Vfc3R5bGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUudGFibGUoaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGVbXCJkZWZhdWx0XCJdKGluc3RhbmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGVbXCJkZWZhdWx0XCJdKGluc3RhbmNlKTtcbiAgICB9XG4gIH1cbn07XG4iLCJTdGVlZG9zVGFibGUgPSB7fTtcclxuXHJcblN0ZWVkb3NUYWJsZS5mb3JtSWQgPSBcImluc3RhbmNlZm9ybVwiO1xyXG5cclxuU3RlZWRvc1RhYmxlLmNoZWNrSXRlbSA9IGZ1bmN0aW9uIChmaWVsZCwgaXRlbV9pbmRleCkge1xyXG4gICAgdmFyIGZpZWxkT2JqID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKTtcclxuXHJcbiAgICB2YXIgZmllbGRWYWwgPSBTdGVlZG9zVGFibGUuZ2V0SXRlbU1vZGFsVmFsdWUoZmllbGQsIGl0ZW1faW5kZXgpO1xyXG5cclxuICAgIHZhciBzZl9uYW1lID0gJyc7XHJcbiAgICB2YXIgcmV2ID0gdHJ1ZTtcclxuICAgIGZpZWxkT2JqLnNmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoc2YpIHtcclxuICAgICAgICBpZiAoc2YucGVybWlzc2lvbiA9PSAnZWRpdGFibGUnKSB7XHJcbiAgICAgICAgICAgIHNmX25hbWUgPSBmaWVsZE9iai5jb2RlICsgXCIuXCIgKyBzZi5jb2RlO1xyXG4gICAgICAgICAgICBpZiAoIUluc3RhbmNlTWFuYWdlci5jaGVja0Zvcm1GaWVsZFZhbHVlKCQoXCJbbmFtZT0nXCIgKyBzZl9uYW1lICsgXCInXVwiKVswXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJldjtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLnNldFRhYmxlSXRlbVZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCBpdGVtX2luZGV4LCBpdGVtX3ZhbHVlKSB7XHJcblxyXG4gICAgdmFyIHRhYmxlVmFsdWUgPSBTdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZShmaWVsZCk7XHJcbiAgICB0YWJsZVZhbHVlW2l0ZW1faW5kZXhdID0gaXRlbV92YWx1ZTtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFRhYmxlSXRlbVZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCBpdGVtX2luZGV4KSB7XHJcbiAgICByZXR1cm4gU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUoZmllbGQpW2l0ZW1faW5kZXhdO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUucmVtb3ZlVGFibGVJdGVtID0gZnVuY3Rpb24gKGZpZWxkLCBpdGVtX2luZGV4KSB7XHJcbiAgICB2YXIgaXRlbV92YWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRUYWJsZUl0ZW1WYWx1ZShmaWVsZCwgaXRlbV9pbmRleCk7XHJcbiAgICBpdGVtX3ZhbHVlLnJlbW92ZWQgPSB0cnVlO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuc2V0VGFibGVWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUpIHtcclxuICAgICQoXCJ0YWJsZVtuYW1lPSdcIiArIGZpZWxkICsgXCInXVwiKS52YWwoe1xyXG4gICAgICAgIHZhbDogdmFsdWVcclxuICAgIH0pO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCkge1xyXG4gICAgcmV0dXJuICQoXCJ0YWJsZVtuYW1lPSdcIiArIGZpZWxkICsgXCInXVwiKS52YWwoKS52YWw7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRWYWxpZFZhbHVlID0gZnVuY3Rpb24gKGZpZWxkKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBTdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZShmaWVsZCk7XHJcblxyXG4gICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIHZhciB2YWxpZFZhbHVlID0gW107XHJcblxyXG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodikge1xyXG4gICAgICAgIGlmICghdi5yZW1vdmVkKSB7XHJcbiAgICAgICAgICAgIHZhbGlkVmFsdWUucHVzaCh2KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2YWxpZFZhbHVlO1xyXG59XHJcblxyXG5cclxuU3RlZWRvc1RhYmxlLmhhbmRsZURhdGEgPSBmdW5jdGlvbiAoZmllbGQsIHZhbHVlcykge1xyXG5cclxuICAgIGlmICghdmFsdWVzIHx8ICEodmFsdWVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZmllbGRPYmogPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpO1xyXG5cclxuICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgZmllbGRPYmouc2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgIGlmIChmLnR5cGUgPT0gJ3VzZXInIHx8IGYudHlwZSA9PSAnZ3JvdXAnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2W2YuY29kZV1cclxuICAgICAgICAgICAgICAgIGlmIChmLmlzX211bHRpc2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDAgJiYgdHlwZW9mICh2YWx1ZVswXSkgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdltmLmNvZGVdID0gdltmLmNvZGVdLmdldFByb3BlcnR5KFwiaWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZSkgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdltmLmNvZGVdID0gdltmLmNvZGVdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmLnR5cGUgPT0gJ2RhdGVUaW1lJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdltmLmNvZGVdXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdmFsdWUuc3BsaXQoXCJUXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDAgPSB0WzBdLnNwbGl0KFwiLVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQxID0gdFsxXS5zcGxpdChcIjpcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gdDBbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdDBbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSB0MFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSB0MVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHQxWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF0ZSwgaG91cnMsIHNlY29uZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2W2YuY29kZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRGaWVsZCA9IGZ1bmN0aW9uIChmaWVsZCkge1xyXG4gICAgdmFyIGluc3RhbmNlRmllbGRzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRmllbGRzKCk7XHJcbiAgICBpZiAoIWluc3RhbmNlRmllbGRzKVxyXG4gICAgICAgIHJldHVybjtcclxuXHJcbiAgICB2YXIgZmllbGRPYmogPSBpbnN0YW5jZUZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBmaWVsZCk7XHJcblxyXG4gICAgcmV0dXJuIGZpZWxkT2JqO1xyXG59XHJcblxyXG5cclxuU3RlZWRvc1RhYmxlLmdldE1vZGFsRGF0YSA9IGZ1bmN0aW9uIChmaWVsZCwgaW5kZXgpIHtcclxuXHJcbiAgICB2YXIgZGF0YSA9IHt9O1xyXG5cclxuICAgIHZhciBmaWVsZE9iaiA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCk7XHJcblxyXG4gICAgaWYgKCFmaWVsZE9iaikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLmZpZWxkID0gZmllbGRPYmo7XHJcblxyXG4gICAgZGF0YS5maWVsZC5mb3JtdWxhID0gRm9ybV9mb3JtdWxhLmdldEZvcm11bGFGaWVsZFZhcmlhYmxlKFwiRm9ybV9mb3JtdWxhLmZpZWxkX3ZhbHVlc1wiLCBmaWVsZE9iai5zZmllbGRzKTtcclxuXHJcbiAgICBkYXRhLnZhbHVlID0ge307XHJcblxyXG4gICAgZGF0YS52YWx1ZVtmaWVsZF0gPSBTdGVlZG9zVGFibGUuZ2V0VGFibGVJdGVtVmFsdWUoZmllbGQsIGluZGV4KTtcclxuXHJcbiAgICBkYXRhLmluZGV4ID0gaW5kZXg7XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcblxyXG5cclxuU3RlZWRvc1RhYmxlLmdldEl0ZW1Nb2RhbFZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCBpdGVtX2luZGV4KSB7XHJcblxyXG4gICAgaWYgKCFBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwic3RlZWRvc190YWJsZV9tb2RhbF9cIiArIGZpZWxkICsgXCJfXCIgKyBpdGVtX2luZGV4KSkge1xyXG4gICAgICAgIHJldHVybiB7fVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBpdGVtX3ZhbHVlID0gQXV0b0Zvcm0uZ2V0Rm9ybVZhbHVlcyhcInN0ZWVkb3NfdGFibGVfbW9kYWxfXCIgKyBmaWVsZCArIFwiX1wiICsgaXRlbV9pbmRleCkuaW5zZXJ0RG9jW2ZpZWxkXTtcclxuICAgIHJldHVybiBpdGVtX3ZhbHVlO1xyXG59XHJcblxyXG5cclxuU3RlZWRvc1RhYmxlLmFkZEl0ZW0gPSBmdW5jdGlvbiAoZmllbGQsIGluZGV4LCBfaXRlbV92YWx1ZSkge1xyXG4gICAgdmFyIGtleXMgPSBTdGVlZG9zVGFibGUuZ2V0S2V5cyhmaWVsZCk7XHJcbiAgICB2YXIgaXRlbV92YWx1ZSA9IF9pdGVtX3ZhbHVlIHx8IFN0ZWVkb3NUYWJsZS5nZXRJdGVtTW9kYWxWYWx1ZShmaWVsZCwgaW5kZXgpO1xyXG4gICAgJChcInRib2R5W25hbWU9J1wiICsgZmllbGQgKyBcIlRib2R5J11cIikuYXBwZW5kKFN0ZWVkb3NUYWJsZS5nZXRUcihrZXlzLCBpdGVtX3ZhbHVlLCBpbmRleCwgZmllbGQsIHRydWUpKVxyXG5cclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLnVwZGF0ZUl0ZW0gPSBmdW5jdGlvbiAoZmllbGQsIGluZGV4LCBfaXRlbV92YWx1ZSkge1xyXG5cclxuICAgIHZhciBpdGVtID0gJChcInRyW25hbWU9J1wiICsgZmllbGQgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIiddXCIpO1xyXG5cclxuICAgIHZhciBpdGVtX3ZhbHVlID0gX2l0ZW1fdmFsdWUgfHwgU3RlZWRvc1RhYmxlLmdldEl0ZW1Nb2RhbFZhbHVlKGZpZWxkLCBpbmRleCk7XHJcblxyXG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBTdGVlZG9zVGFibGUuZ2V0S2V5cyhmaWVsZCk7XHJcbiAgICAgICAgdmFyIHRkcyA9IFN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZChmaWVsZCwgaW5kZXgpO1xyXG5cclxuICAgICAgICB2YXIgc2ZpZWxkcyA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCkuc2ZpZWxkcztcclxuXHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIHNmaWVsZCA9IHNmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwga2V5KTtcclxuXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1fdmFsdWVba2V5XTtcclxuXHJcbiAgICAgICAgICAgIHRkcyA9IHRkcyArIFN0ZWVkb3NUYWJsZS5nZXRUZChzZmllbGQsIGluZGV4LCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdGVtLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGl0ZW0uYXBwZW5kKHRkcyk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgU3RlZWRvc1RhYmxlLmFkZEl0ZW0oZmllbGQsIGluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUoZmllbGQpKSB7XHJcblxyXG4gICAgICAgIFN0ZWVkb3NUYWJsZS5zZXRUYWJsZUl0ZW1WYWx1ZShmaWVsZCwgaW5kZXgsIGl0ZW1fdmFsdWUpO1xyXG5cclxuICAgICAgICAvL1N0ZWVkb3NUYWJsZS52YWx1ZUhhc2hbZmllbGRdW2luZGV4XSA9IGl0ZW1fdmFsdWU7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvL1N0ZWVkb3NUYWJsZS52YWx1ZUhhc2hbZmllbGRdID0gW2l0ZW1fdmFsdWVdO1xyXG5cclxuICAgICAgICBTdGVlZG9zVGFibGUuc2V0VGFibGVWYWx1ZShmaWVsZCwgW2l0ZW1fdmFsdWVdKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvL+aJp+ihjOS4u+ihqOWFrOW8j+iuoeeul1xyXG4gICAgSW5zdGFuY2VNYW5hZ2VyLnJ1bkZvcm11bGEoZmllbGQpO1xyXG5cclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoZmllbGQsIGluZGV4KSB7XHJcblxyXG4gICAgJChcInRyW25hbWU9J1wiICsgZmllbGQgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIiddXCIpLmhpZGUoKTtcclxuXHJcbiAgICBTdGVlZG9zVGFibGUucmVtb3ZlVGFibGVJdGVtKGZpZWxkLCBpbmRleCk7XHJcblxyXG4gICAgSW5zdGFuY2VNYW5hZ2VyLnJ1bkZvcm11bGEoZmllbGQpO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuc2hvd01vZGFsID0gZnVuY3Rpb24gKGZpZWxkLCBpbmRleCwgbWV0aG9kKSB7XHJcblxyXG5cclxuICAgIHZhciBtb2RhbERhdGEgPSBTdGVlZG9zVGFibGUuZ2V0TW9kYWxEYXRhKGZpZWxkLCBpbmRleCk7XHJcblxyXG4gICAgbW9kYWxEYXRhLm1ldGhvZCA9IG1ldGhvZDtcclxuXHJcbiAgICBNb2RhbC5zaG93KFwic3RlZWRvc1RhYmxlTW9kYWxcIiwgbW9kYWxEYXRhKTtcclxuXHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRLZXlzID0gZnVuY3Rpb24gKGZpZWxkKSB7XHJcbiAgICBpZiAoIUF1dG9Gb3JtLmdldEN1cnJlbnREYXRhRm9yRm9ybShTdGVlZG9zVGFibGUuZm9ybUlkKSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3MgPSBBdXRvRm9ybS5nZXRGb3JtU2NoZW1hKFN0ZWVkb3NUYWJsZS5mb3JtSWQpO1xyXG5cclxuICAgIHZhciBrZXlzID0gW107XHJcblxyXG4gICAgaWYgKHNzLnNjaGVtYShmaWVsZCArIFwiLiRcIikudHlwZSA9PT0gT2JqZWN0KSB7XHJcbiAgICAgICAga2V5cyA9IHNzLm9iamVjdEtleXMoU2ltcGxlU2NoZW1hLl9tYWtlR2VuZXJpYyhmaWVsZCkgKyAnLiQnKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXlzO1xyXG5cclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFRoZWFkID0gZnVuY3Rpb24gKGZpZWxkLCBlZGl0YWJsZSkge1xyXG5cclxuICAgIHZhciBmaWVsZE9iaiA9IGZpZWxkO1xyXG4gICAgaWYgKCFfLmlzT2JqZWN0KGZpZWxkKSlcclxuICAgICAgICBmaWVsZE9iaiA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCk7XHJcblxyXG4gICAgaWYgKCFmaWVsZE9iaikge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgdGhlYWQgPSAnJyxcclxuICAgICAgICB0cnMgPSAnJyxcclxuICAgICAgICBsYWJlbCA9ICcnLFxyXG4gICAgICAgIHdpZHRoID0gMTAwO1xyXG5cclxuICAgIGlmIChlZGl0YWJsZSkge1xyXG4gICAgICAgIC8vIHRycyA9IFwiPHRoIGNsYXNzPSdyZW1vdmVkJz48L3RoPlwiXHJcbiAgICAgICAgdHJzID0gXCJcIlxyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZmllbGRzID0gZmllbGRPYmouc2ZpZWxkcztcclxuXHJcbiAgICBpZiAoIXNmaWVsZHMpIHtcclxuICAgICAgICByZXR1cm4gdGhlYWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNmX2xlbmd0aCA9IHNmaWVsZHMubGVuZ3RoO1xyXG5cclxuICAgIGlmIChzZl9sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHdpZGVfZmllbGRzID0gc2ZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcImlzX3dpZGVcIiwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHdpZHRoID0gMTAwIC8gKHNmX2xlbmd0aCArIHdpZGVfZmllbGRzLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChzZiwgaW5kZXgpIHtcclxuXHJcbiAgICAgICAgbGFiZWwgPSAoc2YubmFtZSAhPSBudWxsICYmIHNmLm5hbWUubGVuZ3RoID4gMCkgPyBzZi5uYW1lIDogc2YuY29kZTtcclxuXHJcbiAgICAgICAgdHJzID0gdHJzICsgXCI8dGQgXCI7IC8vIG5vd3JhcD0nbm93cmFwJ1xyXG5cclxuICAgICAgICB0cnMgPSB0cnMgKyBcIiBjbGFzcz0ndGl0bGUgXCIgKyBzZi50eXBlICsgXCInXCI7XHJcblxyXG4gICAgICAgIGlmIChpbmRleCAhPSAoc2ZfbGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICAgICAgaWYgKHNmLmlzX3dpZGUpIHtcclxuICAgICAgICAgICAgICAgIHRycyA9IHRycyArIFwic3R5bGU9J3dpZHRoOlwiICsgd2lkdGggKiAyICsgXCIlJ1wiXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0cnMgPSB0cnMgKyBcInN0eWxlPSd3aWR0aDpcIiArIHdpZHRoICsgXCIlJ1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRycyA9IHRycyArIFwiPlwiICsgbGFiZWwgKyBcIjwvdGQ+XCJcclxuICAgIH0pO1xyXG5cclxuICAgIHRoZWFkID0gJzx0cj4nICsgdHJzICsgJzwvdHI+JztcclxuXHJcbiAgICByZXR1cm4gdGhlYWQ7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUYm9keSA9IGZ1bmN0aW9uIChrZXlzLCBmaWVsZCwgdmFsdWVzLCBlZGl0YWJsZSwgc2ZpZWxkc0VkaXRhYmxlKSB7XHJcbiAgICB2YXIgdGJvZHkgPSBcIlwiO1xyXG5cclxuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgdGJvZHkgPSB0Ym9keSArIFN0ZWVkb3NUYWJsZS5nZXRUcihrZXlzLCB2YWx1ZSwgaW5kZXgsIGZpZWxkLCBlZGl0YWJsZSwgc2ZpZWxkc0VkaXRhYmxlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGJvZHk7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUciA9IGZ1bmN0aW9uIChrZXlzLCBpdGVtX3ZhbHVlLCBpbmRleCwgZmllbGQsIGVkaXRhYmxlLCBzZmllbGRzRWRpdGFibGUpIHtcclxuXHJcbiAgICB2YXIgZmllbGRPYmogPSBmaWVsZDtcclxuICAgIGlmICghXy5pc09iamVjdChmaWVsZCkpXHJcbiAgICAgICAgZmllbGRPYmogPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpO1xyXG5cclxuICAgIHZhciB0ciA9IFwiPHRyIGlkPSdcIiArIGZpZWxkT2JqLmNvZGUgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIicgbmFtZT0nXCIgKyBmaWVsZE9iai5jb2RlICsgXCJfaXRlbV9cIiArIGluZGV4ICsgXCInIGRhdGEtaW5kZXg9J1wiICsgaW5kZXggKyBcIidcIlxyXG5cclxuICAgIGlmIChlZGl0YWJsZSB8fCBzZmllbGRzRWRpdGFibGUpIHtcclxuICAgICAgICB0ciA9IHRyICsgXCInIGNsYXNzPSdpdGVtIGVkaXQnXCJcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSkge1xyXG4gICAgICAgICAgICB0ciA9IHRyICsgXCIgY2xhc3M9J2l0ZW0gaXRlbS1yZWFkb25seSdcIlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRyID0gdHIgKyBcIiBjbGFzcz0naXRlbSAnXCJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGl0ZW1fdmFsdWUucmVtb3ZlZCkge1xyXG4gICAgICAgIHRyID0gdHIgKyBcIiBzdHlsZT0nZGlzcGxheTpub25lJyBcIjtcclxuICAgIH1cclxuXHJcbiAgICB0ciA9IHRyICsgXCInPlwiO1xyXG5cclxuICAgIHZhciB0ZHMgPSBcIlwiO1xyXG5cclxuICAgIGlmIChlZGl0YWJsZSkge1xyXG4gICAgICAgIHRkcyA9IFN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZChmaWVsZE9iai5jb2RlLCBpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNmaWVsZHMgPSBmaWVsZE9iai5zZmllbGRzO1xyXG5cclxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIHNmaWVsZCA9IHNmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwga2V5KTtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbV92YWx1ZVtrZXldO1xyXG5cclxuICAgICAgICB0ZHMgPSB0ZHMgKyBTdGVlZG9zVGFibGUuZ2V0VGQoc2ZpZWxkLCBpbmRleCwgdmFsdWUpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIHRyID0gdHIgKyB0ZHMgKyBcIjwvdHI+XCI7XHJcbiAgICByZXR1cm4gdHI7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZCA9IGZ1bmN0aW9uIChmaWVsZCwgaW5kZXgpIHtcclxuICAgIC8vIHJldHVybiBcIjx0ZCBjbGFzcz0nc3RlZWRvc1RhYmxlLWl0ZW0tcmVtb3ZlIHJlbW92ZWQnIGRhdGEtaW5kZXg9J1wiICsgaW5kZXggKyBcIic+PGkgY2xhc3M9J2ZhIGZhLXRpbWVzJyBhcmlhLWhpZGRlbj0ndHJ1ZSc+PC90ZD5cIjtcclxuICAgIHJldHVybiBcIlwiXHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUZCA9IGZ1bmN0aW9uIChmaWVsZCwgaW5kZXgsIHZhbHVlKSB7XHJcbiAgICB2YXIgdGQgPSBcIjx0ZCBcIjtcclxuXHJcbiAgICB0ZCA9IHRkICsgXCIgY2xhc3M9J3N0ZWVkb3NUYWJsZS1pdGVtLWZpZWxkIFwiICsgZmllbGQudHlwZSArIFwiJyBcIjtcclxuXHJcbiAgICB2YXIgdGRfdmFsdWUgPSBcIlwiO1xyXG5cclxuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcclxuICAgICAgICB0ZF92YWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRURFZhbHVlKGZpZWxkLCB2YWx1ZSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cclxuICAgICAgICB1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0XHJcblxyXG4gICAgICAgIHRkX3ZhbHVlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFZhbHVlKHZhbHVlLCBmaWVsZCwgbG9jYWxlLCB1dGNPZmZzZXQpXHJcbiAgICB9XHJcblxyXG4gICAgdGQgPSB0ZCArIFwiIGRhdGEtaW5kZXg9J1wiICsgaW5kZXggKyBcIic+XCIgKyB0ZF92YWx1ZSArIFwiPC90ZD5cIlxyXG5cclxuICAgIHJldHVybiB0ZDtcclxufVxyXG5cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRURFZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCB2YWx1ZSkge1xyXG4gICAgdmFyIHRkX3ZhbHVlID0gXCJcIjtcclxuICAgIGlmICghZmllbGQpIHtcclxuICAgICAgICByZXR1cm4gdGRfdmFsdWVcclxuICAgIH1cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICd1c2VyJzpcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mICh2YWx1ZVswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IENGRGF0YU1hbmFnZXIuZ2V0Rm9ybXVsYVNwYWNlVXNlcnModmFsdWUpLmdldFByb3BlcnR5KFwibmFtZVwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHZhbHVlLmdldFByb3BlcnR5KFwibmFtZVwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mICh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhU3BhY2VVc2Vycyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHUgPyB1Lm5hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdncm91cCc6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuaXNfbXVsdGlzZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiAodmFsdWVbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBDRkRhdGFNYW5hZ2VyLmdldEZvcm11bGFPcmdhbml6YXRpb25zKHZhbHVlKS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiAodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IENGRGF0YU1hbmFnZXIuZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbih2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IG8gPyBvLm5hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF95ZXNcIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfbm9cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZW1haWwnOlxyXG4gICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZSA/IFwiPGEgaHJlZj0nbWFpbHRvOlwiICsgdmFsdWUgKyBcIic+XCIgKyB2YWx1ZSArIFwiPC9hPlwiIDogXCJcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1cmwnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoXCJodHRwXCIpID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCI8YSBocmVmPSdcIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBcIjxhIGhyZWY9JycgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFwiPGEgaHJlZj0naHR0cDovL1wiICsgZW5jb2RlVVJJKHZhbHVlKSArIFwiJyB0YXJnZXQ9J19ibGFuayc+aHR0cDovL1wiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdwYXNzd29yZCc6XHJcbiAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9ICcqKioqKionO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHZhbHVlLnNwbGl0KFwiLVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IHRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IHRbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9ICQuZm9ybWF0LmRhdGUodmFsdWUsICd5eXl5LU1NLWRkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZGF0ZVRpbWUnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHZhbHVlLnNwbGl0KFwiVFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQwID0gdFswXS5zcGxpdChcIi1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0MSA9IHRbMV0uc3BsaXQoXCI6XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IHQwWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9IHQwWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gdDBbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzID0gdDFbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSB0MVsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9ICQuZm9ybWF0LmRhdGUodmFsdWUsICd5eXl5LU1NLWRkIEhIOm1tJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBTdGVlZG9zLm51bWJlclRvU3RyaW5nKHZhbHVlLCBmaWVsZC5kaWdpdHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ29kYXRhJzpcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IF8ucGx1Y2sodmFsdWUsICdAbGFiZWwnKS50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZVsnQGxhYmVsJ11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUgPyB2YWx1ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGU7XHJcblxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB0ZF92YWx1ZTtcclxufTtcclxuXHJcbmlmIChNZXRlb3IuaXNDbGllbnQpIHtcclxuICAgIEF1dG9Gb3JtLmFkZElucHV0VHlwZShcInRhYmxlXCIsIHtcclxuICAgICAgICB0ZW1wbGF0ZTogXCJhZlRhYmxlXCIsXHJcbiAgICAgICAgdmFsdWVPdXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmRhdGEoXCJzY2hlbWFLZXlcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VmFsaWRWYWx1ZShuYW1lKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbHVlQ29udmVydGVyczoge1xyXG4gICAgICAgICAgICBcInN0cmluZ0FycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb1N0cmluZ0FycmF5LFxyXG4gICAgICAgICAgICBcIm51bWJlclwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9OdW1iZXIsXHJcbiAgICAgICAgICAgIFwibnVtZXJBcnJheVwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9OdW1iZXJBcnJheSxcclxuICAgICAgICAgICAgXCJib29sZWFuXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0Jvb2xlYW4sXHJcbiAgICAgICAgICAgIFwiYm9vbGVhbkFycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0Jvb2xlYW5BcnJheSxcclxuICAgICAgICAgICAgXCJkYXRlXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0RhdGUsXHJcbiAgICAgICAgICAgIFwiZGF0ZUFycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0RhdGVBcnJheVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udGV4dEFkanVzdDogZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LmF0dHMubWF4bGVuZ3RoID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29udGV4dC5tYXggPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmF0dHMubWF4bGVuZ3RoID0gY29udGV4dC5tYXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgVGVtcGxhdGUuYWZUYWJsZS5ldmVudHMoe1xyXG4gICAgICAgICd0YXAgLnN0ZWVkb3MtdGFibGUgLnN0ZWVkb3NUYWJsZS1pdGVtLWFkZCwuYWRkLWl0ZW0tdHInOiBmdW5jdGlvbiAoZXZlbnQsIHRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gdGVtcGxhdGUuZGF0YS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsdWUgPSBTdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZShuYW1lKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBuZXdfaXRlbV9pbmRleCA9IHRhYmxlVmFsdWUgPyB0YWJsZVZhbHVlLmxlbmd0aCA6IDA7XHJcblxyXG4gICAgICAgICAgICBTdGVlZG9zVGFibGUuc2hvd01vZGFsKG5hbWUsIG5ld19pdGVtX2luZGV4LCBcImFkZFwiKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAndGFwIC5zdGVlZG9zLXRhYmxlIC5zdGVlZG9zVGFibGUtaXRlbS1maWVsZCc6IGZ1bmN0aW9uIChldmVudCwgdGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmRhdGEuYXR0cy5lZGl0YWJsZSB8fCB0ZW1wbGF0ZS5kYXRhLmF0dHMuc2ZpZWxkc0VkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSB0ZW1wbGF0ZS5kYXRhLm5hbWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBTdGVlZG9zVGFibGUuc2hvd01vZGFsKGZpZWxkLCBpbmRleCwgXCJlZGl0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3RhcCAuc3RlZWRvcy10YWJsZSAuc3RlZWRvc1RhYmxlLWl0ZW0tcmVtb3ZlJzogZnVuY3Rpb24gKGV2ZW50LCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgZmllbGQgPSB0ZW1wbGF0ZS5kYXRhLm5hbWU7XHJcbiAgICAgICAgICAgIHZhciBpdGVtX2luZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG4gICAgICAgICAgICBTZXNzaW9uLnNldChcImluc3RhbmNlX2NoYW5nZVwiLCB0cnVlKTtcclxuICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnJlbW92ZUl0ZW0oZmllbGQsIGl0ZW1faW5kZXgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICd0YXAgLnN0ZWVkb3MtdGFibGUgLml0ZW0tcmVhZG9ubHknOiBmdW5jdGlvbiAoZXZlbnQsIHRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGVtcGxhdGUuZGF0YS5hdHRzLmVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSB0ZW1wbGF0ZS5kYXRhLm5hbWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBTdGVlZG9zVGFibGUuc2hvd01vZGFsKGZpZWxkLCBpbmRleCwgXCJyZWFkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICBUZW1wbGF0ZS5hZlRhYmxlLnJlbmRlcmVkID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB2YXIgZmllbGQgPSB0aGlzLmRhdGEubmFtZTtcclxuXHJcbiAgICAgICAgdmFyIHNmaWVsZHNFZGl0YWJsZSA9IHRoaXMuZGF0YS5hdHRzLnNmaWVsZHNFZGl0YWJsZTtcclxuXHJcbiAgICAgICAgdmFyIGtleXMgPSBTdGVlZG9zVGFibGUuZ2V0S2V5cyhmaWVsZCk7XHJcbiAgICAgICAgdmFyIHZhbGlkVmFsdWUgPSBTdGVlZG9zVGFibGUuaGFuZGxlRGF0YShmaWVsZCwgdGhpcy5kYXRhLnZhbHVlKTtcclxuICAgICAgICBTdGVlZG9zVGFibGUuc2V0VGFibGVWYWx1ZShmaWVsZCwgdmFsaWRWYWx1ZSk7XHJcblxyXG4gICAgICAgICQoXCJ0aGVhZFtuYW1lPSdcIiArIGZpZWxkICsgXCJUaGVhZCddXCIpLmh0bWwoU3RlZWRvc1RhYmxlLmdldFRoZWFkKGZpZWxkLCB0aGlzLmRhdGEuYXR0cy5lZGl0YWJsZSkpO1xyXG5cclxuICAgICAgICAkKFwidGJvZHlbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGJvZHknXVwiKS5odG1sKFN0ZWVkb3NUYWJsZS5nZXRUYm9keShrZXlzLCBmaWVsZCwgU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUoZmllbGQpLCB0aGlzLmRhdGEuYXR0cy5lZGl0YWJsZSwgc2ZpZWxkc0VkaXRhYmxlKSk7XHJcblxyXG4gICAgICAgIHN0ciA9IHQoXCJzdGVlZG9zX3RhYmxlX2FkZF9pdGVtXCIpO1xyXG4gICAgICAgIGFkZEl0ZW1UciA9IFwiPHRyIGNsYXNzPSdhZGQtaXRlbS10cic+PHRkIGNvbHNwYW49J1wiICsga2V5cy5sZW5ndGggKyBcIic+PGkgY2xhc3M9J2lvbiBpb24tcGx1cy1yb3VuZCc+PC9pPlwiICsgc3RyICsgXCI8L3RkPjwvdHI+XCI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuYXR0cy5lZGl0YWJsZSkge1xyXG4gICAgICAgICAgICAkKFwidGZvb3RbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGZvb3QnXVwiKS5hcHBlbmQoYWRkSXRlbVRyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXV0b3J1bihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gVGVtcGxhdGUuY3VycmVudERhdGEoKTtcclxuICAgICAgICAgICAgdmFyIGZpZWxkID0gZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IFN0ZWVkb3NUYWJsZS5nZXRLZXlzKGZpZWxkKTtcclxuICAgICAgICAgICAgdmFyIHZhbGlkVmFsdWUgPSBTdGVlZG9zVGFibGUuaGFuZGxlRGF0YShmaWVsZCwgZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgIFN0ZWVkb3NUYWJsZS5zZXRUYWJsZVZhbHVlKGZpZWxkLCB2YWxpZFZhbHVlKTtcclxuICAgICAgICAgICAgJChcInRib2R5W25hbWU9J1wiICsgZmllbGQgKyBcIlRib2R5J11cIikuaHRtbChTdGVlZG9zVGFibGUuZ2V0VGJvZHkoa2V5cywgZmllbGQsIFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKSwgZGF0YS5hdHRzLmVkaXRhYmxlLCBzZmllbGRzRWRpdGFibGUpKTtcclxuICAgICAgICB9KVxyXG4gICAgfTtcclxufSIsIkltYWdlU2lnbi5oZWxwZXJzID1cclxuXHRzcGFjZVVzZXJTaWduOiAodXNlcklkKS0+XHJcblx0XHRzcGFjZSA9IFwiXCJcclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0c3BhY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuc3BhY2VcclxuXHRcdGVsc2VcclxuXHRcdFx0c3BhY2UgPSBTZXNzaW9uLmdldChcInNwYWNlSWRcIilcclxuXHJcblx0XHRzcGFjZVVzZXJTaWduID0gZGIuc3BhY2VfdXNlcl9zaWducy5maW5kT25lKHtzcGFjZTogc3BhY2UsIHVzZXI6IHVzZXJJZH0pO1xyXG5cdFx0cmV0dXJuIHNwYWNlVXNlclNpZ25cclxuXHJcblx0aW1hZ2VVUkw6ICh1c2VySWQpLT5cclxuXHJcblx0XHRzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbih1c2VySWQpO1xyXG5cclxuXHRcdGFic29sdXRlID0gZmFsc2VcclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0YWJzb2x1dGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuYWJzb2x1dGVcclxuXHJcblx0XHRpZiBzcGFjZVVzZXJTaWduPy5zaWduXHJcblx0XHRcdGlmIGFic29sdXRlXHJcblx0XHRcdFx0cmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9hdmF0YXJzL1wiICsgc3BhY2VVc2VyU2lnbi5zaWduKTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xyXG4iLCJJbWFnZVNpZ24uaGVscGVycyA9IHtcbiAgc3BhY2VVc2VyU2lnbjogZnVuY3Rpb24odXNlcklkKSB7XG4gICAgdmFyIHNwYWNlLCBzcGFjZVVzZXJTaWduO1xuICAgIHNwYWNlID0gXCJcIjtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBzcGFjZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5zcGFjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BhY2UgPSBTZXNzaW9uLmdldChcInNwYWNlSWRcIik7XG4gICAgfVxuICAgIHNwYWNlVXNlclNpZ24gPSBkYi5zcGFjZV91c2VyX3NpZ25zLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IHNwYWNlLFxuICAgICAgdXNlcjogdXNlcklkXG4gICAgfSk7XG4gICAgcmV0dXJuIHNwYWNlVXNlclNpZ247XG4gIH0sXG4gIGltYWdlVVJMOiBmdW5jdGlvbih1c2VySWQpIHtcbiAgICB2YXIgYWJzb2x1dGUsIHNwYWNlVXNlclNpZ247XG4gICAgc3BhY2VVc2VyU2lnbiA9IEltYWdlU2lnbi5oZWxwZXJzLnNwYWNlVXNlclNpZ24odXNlcklkKTtcbiAgICBhYnNvbHV0ZSA9IGZhbHNlO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGFic29sdXRlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmFic29sdXRlO1xuICAgIH1cbiAgICBpZiAoc3BhY2VVc2VyU2lnbiAhPSBudWxsID8gc3BhY2VVc2VyU2lnbi5zaWduIDogdm9pZCAwKSB7XG4gICAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgICAgcmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9hdmF0YXJzL1wiICsgc3BhY2VVc2VyU2lnbi5zaWduKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIlRyYWNlc0hhbmRsZXIuaGVscGVycyA9XHJcblx0c2hvd1NpZ25JbWFnZTogKGhhbmRsZXIsIGlzX2ZpbmlzaGVkLCBqdWRnZSkgLT5cclxuXHRcdGlmICFpc19maW5pc2hlZFxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdGlmIFsncmV0dXJuZWQnLCAndGVybWluYXRlZCcsICdyZXRyaWV2ZWQnXS5pbmNsdWRlcyhqdWRnZSlcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbihoYW5kbGVyKVxyXG5cclxuXHRcdGlmIHNwYWNlVXNlclNpZ24/LnNpZ25cclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdG9iamVjdFVybDogKG9iamVjdF9uYW1lLCByZWNvcmRfaWQsIGFwcF9pZCktPlxyXG5cdFx0cmV0dXJuIENyZWF0b3IuZ2V0T2JqZWN0VXJsKG9iamVjdF9uYW1lLCByZWNvcmRfaWQsIGFwcF9pZCkiLCJUcmFjZXNIYW5kbGVyLmhlbHBlcnMgPSB7XG4gIHNob3dTaWduSW1hZ2U6IGZ1bmN0aW9uKGhhbmRsZXIsIGlzX2ZpbmlzaGVkLCBqdWRnZSkge1xuICAgIHZhciBzcGFjZVVzZXJTaWduO1xuICAgIGlmICghaXNfZmluaXNoZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKFsncmV0dXJuZWQnLCAndGVybWluYXRlZCcsICdyZXRyaWV2ZWQnXS5pbmNsdWRlcyhqdWRnZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc3BhY2VVc2VyU2lnbiA9IEltYWdlU2lnbi5oZWxwZXJzLnNwYWNlVXNlclNpZ24oaGFuZGxlcik7XG4gICAgaWYgKHNwYWNlVXNlclNpZ24gIT0gbnVsbCA/IHNwYWNlVXNlclNpZ24uc2lnbiA6IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIG9iamVjdFVybDogZnVuY3Rpb24ob2JqZWN0X25hbWUsIHJlY29yZF9pZCwgYXBwX2lkKSB7XG4gICAgcmV0dXJuIENyZWF0b3IuZ2V0T2JqZWN0VXJsKG9iamVjdF9uYW1lLCByZWNvcmRfaWQsIGFwcF9pZCk7XG4gIH1cbn07XG4iLCJJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzID1cclxuXHRhcHBsaWNhbnRDb250ZXh0OiAtPlxyXG5cdFx0c3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0ZGF0YSA9IHtcclxuXHRcdFx0bmFtZTogJ2luc19hcHBsaWNhbnQnLFxyXG5cdFx0XHRhdHRzOiB7bmFtZTogJ2luc19hcHBsaWNhbnQnLCBpZDogJ2luc19hcHBsaWNhbnQnLCBjbGFzczogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnfSxcclxuXHRcdFx0dmFsdWU6IHN0ZWVkb3NfaW5zdGFuY2UuYXBwbGljYW50X25hbWVcclxuXHRcdH1cclxuXHRcdGlmIG5vdCBzdGVlZG9zX2luc3RhbmNlIHx8IHN0ZWVkb3NfaW5zdGFuY2Uuc3RhdGUgIT0gXCJkcmFmdFwiXHJcblx0XHRcdGRhdGEuYXR0cy5kaXNhYmxlZCA9IHRydWVcclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHRpbnN0YW5jZUlkOiAtPlxyXG5cdFx0cmV0dXJuICdpbnN0YW5jZWZvcm0nOyNcImluc3RhbmNlX1wiICsgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpO1xyXG5cclxuXHRmb3JtX3R5cGVzOiAtPlxyXG5cdFx0aWYgQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpXHJcblx0XHRcdHJldHVybiAnZGlzYWJsZWQnO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gJ21ldGhvZCc7XHJcblxyXG5cdHN0ZWVkb3NfZm9ybTogLT5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XHJcblx0XHRpZiBmb3JtX3ZlcnNpb25cclxuXHRcdFx0cmV0dXJuIGZvcm1fdmVyc2lvblxyXG5cclxuXHRpbm5lcnN1YmZvcm1Db250ZXh0OiAob2JqKS0+XHJcblx0XHRkb2NfdmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xyXG5cdFx0b2JqW1widGFibGVWYWx1ZXNcIl0gPSBpZiBkb2NfdmFsdWVzIHRoZW4gZG9jX3ZhbHVlc1tvYmouY29kZV0gZWxzZSBbXVxyXG5cdFx0b2JqW1wiZm9ybUlkXCJdID0gXCJpbnN0YW5jZWZvcm1cIjtcclxuXHRcdHJldHVybiBvYmo7XHJcblxyXG5cdGluc3RhbmNlOiAtPlxyXG5cdFx0U2Vzc2lvbi5nZXQoXCJjaGFuZ2VfZGF0ZVwiKVxyXG5cdFx0aWYgKFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSlcclxuXHRcdFx0c3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0XHRyZXR1cm4gc3RlZWRvc19pbnN0YW5jZTtcclxuXHJcblx0ZW1wdHk6ICh2YWwpIC0+XHJcblx0XHRpZiB2YWxcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR1bmVtcHR5OiAodmFsKSAtPlxyXG5cdFx0aWYgdmFsXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdGVxdWFsczogKGEsIGIpIC0+XHJcblx0XHRyZXR1cm4gKGEgPT0gYilcclxuXHJcblx0dW5lcXVhbHM6IChhLCBiKSAtPlxyXG5cdFx0cmV0dXJuICEoYSA9PSBiKVxyXG5cclxuXHRpbmNsdWRlczogKGEsIGIpIC0+XHJcblx0XHRyZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xyXG5cclxuXHRpbmNsdWRlOiAoYSwgYikgLT5cclxuXHRcdHJldHVybiBiLnNwbGl0KCcsJykuaW5jbHVkZXMoYSk7XHJcblxyXG5cdGZpZWxkczogLT5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XHJcblx0XHRpZiBmb3JtX3ZlcnNpb25cclxuXHRcdFx0cmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYShmb3JtX3ZlcnNpb24pKTtcclxuXHJcblx0Zm9ybWF0RGF0ZTogKGRhdGUsIG9wdGlvbnMpLT5cclxuXHRcdGlmICFkYXRlXHJcblx0XHRcdHJldHVybiBcIlwiO1xyXG5cdFx0aWYgb3B0aW9ucyAmJiB0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZydcclxuXHRcdFx0b3B0aW9ucyA9IEpTT04ucGFyc2Uob3B0aW9ucyk7XHJcblxyXG5cdFx0aWYgIW9wdGlvbnMuZm9ybWF0XHJcblx0XHRcdG9wdGlvbnMgPSB7Zm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIn1cclxuXHJcblx0XHRyZXR1cm4gbW9tZW50KGRhdGUpLmZvcm1hdChvcHRpb25zLmZvcm1hdCk7XHJcblxyXG5cdHRyYWNlczogLT5cclxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRzdGVlZG9zRGF0YSA9IFRlbXBsYXRlLmluc3RhbmNlKCk/LnZpZXc/LnRlbXBsYXRlPy5zdGVlZG9zRGF0YVxyXG5cdFx0XHRpbnN0YW5jZSA9IHN0ZWVkb3NEYXRhPy5pbnN0YW5jZVxyXG5cdFx0XHRmbG93ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEZsb3dWZXJzaW9uKGluc3RhbmNlKTtcclxuXHRcdFx0bG9jYWxlID0gc3RlZWRvc0RhdGE/LmxvY2FsZVxyXG5cdFx0XHRpZiBsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnemgtY24nXHJcblx0XHRcdFx0bG9jYWxlID0gXCJ6aC1DTlwiXHJcblx0XHRlbHNlXHJcblx0XHRcdGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblxyXG5cdFx0XHRmbG93ID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRmxvd1ZlcnNpb24oKVxyXG5cclxuXHRcdFx0bG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKVxyXG5cclxuXHRcdGlmICFpbnN0YW5jZSB8fCAhZmxvd1xyXG5cdFx0XHRyZXR1cm4ge307XHJcblxyXG5cdFx0c3RlcHMgPSBmbG93LnN0ZXBzO1xyXG5cclxuXHRcdHRyYWNlcyA9IHt9O1xyXG5cclxuXHRcdGluc3RhbmNlLnRyYWNlcz8uZm9yRWFjaCAodHJhY2UpLT5cclxuXHRcdFx0c3RlcCA9IHN0ZXBzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgdHJhY2Uuc3RlcClcclxuXHJcblx0XHRcdGFwcHJvdmVzID0gW11cclxuXHJcblx0XHRcdHRyYWNlLmFwcHJvdmVzPy5mb3JFYWNoIChhcHByb3ZlKSAtPlxyXG5cdFx0XHRcdGlmIHRyYWNlLmlzX2ZpbmlzaGVkID09IHRydWVcclxuIyDlt7Lnu5PmnZ/nmoTmmL7npLrkuLrmoLjlh4Yv6amz5ZueL+WPlua2iOeUs+ivt1xyXG5cdFx0XHRcdFx0aWYgYXBwcm92ZS5qdWRnZSA9PSAnYXBwcm92ZWQnXHJcblx0XHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgYXBwcm92ZWRcIiwge30sIGxvY2FsZSlcclxuXHRcdFx0XHRcdGVsc2UgaWYgYXBwcm92ZS5qdWRnZSA9PSAncmVqZWN0ZWQnXHJcblx0XHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcmVqZWN0ZWRcIiwge30sIGxvY2FsZSlcclxuXHRcdFx0XHRcdGVsc2UgaWYgYXBwcm92ZS5qdWRnZSA9PSAndGVybWluYXRlZCdcclxuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSB0ZXJtaW5hdGVkXCIsIHt9LCBsb2NhbGUpXHJcblx0XHRcdFx0XHRlbHNlIGlmIGFwcHJvdmUuanVkZ2UgPT0gJ3JlYXNzaWduZWQnXHJcblx0XHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcmVhc3NpZ25lZFwiLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICdyZWxvY2F0ZWQnXHJcblx0XHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcmVsb2NhdGVkXCIsIHt9LCBsb2NhbGUpXHJcblx0XHRcdFx0XHRlbHNlIGlmIGFwcHJvdmUuanVkZ2UgPT0gJydcclxuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFwiXCJcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFwiXCJcclxuXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSBwZW5kaW5nXCIsIHt9LCBsb2NhbGUpXHJcblxyXG5cdFx0XHRcdGFwcHJvdmVzLnB1c2hcclxuXHRcdFx0XHRcdF9pZDogYXBwcm92ZS5faWRcclxuXHRcdFx0XHRcdGhhbmRsZXI6IGFwcHJvdmUudXNlclxyXG5cdFx0XHRcdFx0aGFuZGxlcl9uYW1lOiBhcHByb3ZlLmhhbmRsZXJfbmFtZVxyXG5cdFx0XHRcdFx0aGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZTogYXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lXHJcblx0XHRcdFx0XHRoYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZTogYXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVxyXG5cdFx0XHRcdFx0ZmluaXNoX2RhdGU6IGFwcHJvdmUuZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdGp1ZGdlOiBhcHByb3ZlLmp1ZGdlXHJcblx0XHRcdFx0XHRqdWRnZV9uYW1lOiBqdWRnZV9uYW1lXHJcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogYXBwcm92ZS5kZXNjcmlwdGlvblxyXG5cdFx0XHRcdFx0aXNfZmluaXNoZWQ6IGFwcHJvdmUuaXNfZmluaXNoZWRcclxuXHRcdFx0XHRcdHR5cGU6IGFwcHJvdmUudHlwZVxyXG5cdFx0XHRcdFx0b3Bpbmlvbl9maWVsZHNfY29kZTogYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlXHJcblx0XHRcdFx0XHRzaWduX2ZpZWxkX2NvZGU6IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlXHJcblx0XHRcdFx0XHRpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWRcclxuXHRcdFx0XHRcdHNpZ25fc2hvdzogYXBwcm92ZS5zaWduX3Nob3dcclxuXHJcblxyXG5cdFx0XHRpZiBzdGVwXHJcblx0XHRcdFx0aWYgc3RlcC5uYW1lIG9mIHRyYWNlc1xyXG5cdFx0XHRcdFx0dHJhY2VzW3N0ZXAubmFtZV0gPSB0cmFjZXNbc3RlcC5uYW1lXS5jb25jYXQoYXBwcm92ZXMpXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dHJhY2VzW3N0ZXAubmFtZV0gPSBhcHByb3Zlc1xyXG5cclxuXHRcdHJldHVybiB0cmFjZXM7XHJcblxyXG5cclxuXHJcblx0ZG9jX3ZhbHVlczogLT5cclxuXHRcdFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcclxuXHJcblx0aW5zdGFuY2VfYm94X3N0eWxlOiAtPlxyXG5cdFx0Ym94ID0gU2Vzc2lvbi5nZXQoXCJib3hcIilcclxuXHRcdGlmIGJveCA9PSBcImluYm94XCIgfHwgYm94ID09IFwiZHJhZnRcIlxyXG5cdFx0XHRqdWRnZSA9IFNlc3Npb24uZ2V0KFwianVkZ2VcIilcclxuXHRcdFx0aWYganVkZ2VcclxuXHRcdFx0XHRpZiAoanVkZ2UgPT0gXCJhcHByb3ZlZFwiKVxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiYm94LXN1Y2Nlc3NcIlxyXG5cdFx0XHRcdGVsc2UgaWYgKGp1ZGdlID09IFwicmVqZWN0ZWRcIilcclxuXHRcdFx0XHRcdHJldHVybiBcImJveC1kYW5nZXJcIlxyXG5cdFx0aW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRpZiBpbnMgJiYgaW5zLmZpbmFsX2RlY2lzaW9uXHJcblx0XHRcdGlmIGlucy5maW5hbF9kZWNpc2lvbiA9PSBcImFwcHJvdmVkXCJcclxuXHRcdFx0XHRyZXR1cm4gXCJib3gtc3VjY2Vzc1wiXHJcblx0XHRcdGVsc2UgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PSBcInJlamVjdGVkXCIpXHJcblx0XHRcdFx0cmV0dXJuIFwiYm94LWRhbmdlclwiXHJcblxyXG4jaXNfZGlzYWJsZWQ6IC0+XHJcbiMgICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcbiMgICAgaWYgIWluc1xyXG4jICAgICAgICByZXR1cm47XHJcbiMgICAgaWYgaW5zLnN0YXRlIT1cImRyYWZ0XCJcclxuIyAgICAgICAgcmV0dXJuIFwiZGlzYWJsZWRcIjtcclxuIyAgICByZXR1cm47XHJcblxyXG5cdHRhYmxlX2ZpZWxkczogKGluc3RhbmNlKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcclxuXHRcdGlmIGZvcm1fdmVyc2lvblxyXG5cdFx0XHRmaWVsZHMgPSBfLmNsb25lKGZvcm1fdmVyc2lvbi5maWVsZHMpO1xyXG5cclxuXHRcdFx0ZmllbGRzLmZvckVhY2ggKGZpZWxkLCBpbmRleCkgLT5cclxuXHRcdFx0XHRmaWVsZC50cl9zdGFydCA9IFwiXCI7XHJcblx0XHRcdFx0ZmllbGQudHJfZW5kID0gXCJcIjtcclxuXHRcdFx0XHR0ZF9jb2xzcGFuID0gMTtcclxuI1x0XHRcdFx05by65Yi26K6+572u5qCH5aS05a2X5q615Li65a695a2X5q61XHJcblx0XHRcdFx0aWYgQ29yZUZvcm0/LnBhZ2VUaXRsZUZpZWxkTmFtZSA9PSBmaWVsZC5jb2RlXHJcblx0XHRcdFx0XHRmaWVsZC5pc193aWRlID0gdHJ1ZVxyXG5cclxuXHRcdFx0XHRpZiBmaWVsZC5mb3JtdWxhICYmIGZpZWxkLnR5cGUgIT0gJ29kYXRhJ1xyXG5cdFx0XHRcdFx0ZmllbGQucGVybWlzc2lvbiA9IFwicmVhZG9ubHlcIjtcclxuXHJcblx0XHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpXHJcbiMg5aaC5p6c5b2T5YmN5a2X5q615piv5YiG57uE44CB6KGo5qC844CB5a695a2X5q61XHJcblx0XHRcdFx0XHRpZiBmaWVsZC50eXBlID09ICdzZWN0aW9uJyB8fCBmaWVsZC50eXBlID09ICd0YWJsZSdcclxuXHRcdFx0XHRcdFx0ZmllbGQudGRfY29sc3BhbiA9IDQ7XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGZpZWxkLnRkX2NvbHNwYW4gPSAzO1xyXG5cclxuXHRcdFx0XHRcdGlmIGluZGV4ICE9IDBcclxuXHRcdFx0XHRcdFx0ZmllbGQudHJfc3RhcnQgPSBcIjx0cj5cIjtcclxuXHRcdFx0XHRcdFx0ZmllbGQudHJfZW5kID0gXCI8L3RyPlwiO1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHByZV9maWVsZHMgPSBmaWVsZHMuc2xpY2UoMCwgaW5kZXgpO1xyXG5cclxuXHRcdFx0XHRcdHByZV93aWRlX2ZpZWxkcyA9IHByZV9maWVsZHMuZmlsdGVyUHJvcGVydHkoXCJpc193aWRlXCIsIHRydWUpO1xyXG5cclxuXHRcdFx0XHRcdHRyX3N0YXJ0ID0gXCJcIjtcclxuXHJcblx0XHRcdFx0XHR0cl9lbmQgPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRcdCMg5YWI6K6h566X5b2T5YmN5a2X5q615piv5ZCm5Li65a695a2X5q61XHJcblx0XHRcdFx0XHRiZWZvcmVfZmllbGQgPSBudWxsO1xyXG5cdFx0XHRcdFx0YWZ0ZXJfZmllbGQgPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdGlmIGluZGV4ID4gMFxyXG5cdFx0XHRcdFx0XHRiZWZvcmVfZmllbGQgPSBmaWVsZHNbaW5kZXggLSAxXVxyXG5cclxuXHRcdFx0XHRcdGlmIGluZGV4IDwgZmllbGRzLmxlbmd0aCAtIDFcclxuXHRcdFx0XHRcdFx0YWZ0ZXJfZmllbGQgPSBmaWVsZHNbaW5kZXggKyAxXVxyXG5cclxuXHRcdFx0XHRcdCMg5aaC5p6c5b2T5YmN5a2X5q615piv5YiG57uE44CB6KGo5qC844CB5a695a2X5q61XHJcblx0XHRcdFx0XHRpZiBmaWVsZC50eXBlID09ICdzZWN0aW9uJyB8fCBmaWVsZC50eXBlID09ICd0YWJsZSdcclxuXHRcdFx0XHRcdFx0dGRfY29sc3BhbiA9IDQ7XHJcblx0XHRcdFx0XHRlbHNlIGlmIGZpZWxkLmlzX3dpZGVcclxuXHRcdFx0XHRcdFx0dGRfY29sc3BhbiA9IDM7XHJcblx0XHRcdFx0XHRlbHNlXHJcbiMg5YmN5ZCO6YO95piv5a695a2X5q61XHJcblx0XHRcdFx0XHRcdGlmIGJlZm9yZV9maWVsZCAmJiBhZnRlcl9maWVsZCAmJiBiZWZvcmVfZmllbGQuaXNfd2lkZSAmJiBhZnRlcl9maWVsZC5pc193aWRlXHJcblx0XHRcdFx0XHRcdFx0ZmllbGQuaXNfd2lkZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0dGRfY29sc3BhbiA9IDM7XHJcblxyXG5cdFx0XHRcdFx0XHQjIOW9k+WJjeaYr3RyIOS4i+eahCDnrKzkuIDkuKp0ZCAmIOWQjui+ueeahOWtl+auteaYr+WuveWtl+autVxyXG5cdFx0XHRcdFx0XHRpZiAocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT0gMCAmJiBhZnRlcl9maWVsZCAmJiBhZnRlcl9maWVsZC5pc193aWRlXHJcblx0XHRcdFx0XHRcdFx0ZmllbGQuaXNfd2lkZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0dGRfY29sc3BhbiA9IDM7XHJcblxyXG5cdFx0XHRcdFx0XHQjIOW9k+WJjeaYr3RyIOS4i+eahCDnrKzkuIDkuKp0ZCAmIOW9k+WJjeWtl+auteaYr+acgOWQjuS4gOS4quWtl+autVxyXG5cdFx0XHRcdFx0XHRpZiAocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT0gMCAmJiBhZnRlcl9maWVsZCA9PSBudWxsXHJcblx0XHRcdFx0XHRcdFx0ZmllbGQuaXNfd2lkZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0dGRfY29sc3BhbiA9IDM7XHJcblxyXG5cdFx0XHRcdFx0ZmllbGQudGRfY29sc3BhbiA9IHRkX2NvbHNwYW47XHJcblxyXG5cclxuXHRcdFx0XHRcdGlmIGluZGV4ID09IDBcclxuIyB0cl9zdGFydCA9IFwiPHRyPlwiOyDnlLHkuo5UZW1wbGF0ZeeahOe8luivkWJ1Z++8jOWvvOiHtOavj+asoee7meS4gOS4qnRy5byA5aeL5pe277yM5Lya6Ieq5Yqo6KGl5aS05oiW6KGl5bC+44CC5Zug5q2k5Zyo56ys5LiA6KGM6L+U5Zue5LiA5Liq56m65a2X56ym5LiyLlxyXG5cdFx0XHRcdFx0XHR0cl9zdGFydCA9IFwiPHRyPlwiO1xyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRpZiAocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT0gMCB8fCBmaWVsZC5pc193aWRlXHJcblx0XHRcdFx0XHRcdFx0aWYgZmllbGQudHlwZSA9PSAndGFibGUnXHJcblx0XHRcdFx0XHRcdFx0XHR0cl9zdGFydCA9IFwiPHRyIGNsYXNzID0gXFxcInRyLWNoaWxkLXRhYmxlXFxcIj5cIjtcclxuXHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHR0cl9zdGFydCA9IFwiPHRyPlwiO1xyXG5cclxuXHRcdFx0XHRcdGZpZWxkLnRyX3N0YXJ0ID0gdHJfc3RhcnQ7XHJcblxyXG5cclxuXHRcdFx0XHRcdGlmIGluZGV4ICsgMSA9PSBmaWVsZHMubGVuZ3RoIHx8IGZpZWxkLnR5cGUgPT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT0gJ3RhYmxlJyB8fCBmaWVsZC5pc193aWRlXHJcblx0XHRcdFx0XHRcdHRyX2VuZCA9IFwiPC90cj5cIjtcclxuXHJcblx0XHRcdFx0XHRpZiAocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgIT0gMFxyXG5cdFx0XHRcdFx0XHR0cl9lbmQgPSBcIjwvdHI+XCI7XHJcblxyXG5cdFx0XHRcdFx0ZmllbGQudHJfZW5kID0gdHJfZW5kO1xyXG5cclxuXHRcdFx0cmV0dXJuIGZpZWxkcztcclxuXHJcblx0c29ydF9hcHByb3ZlOiAoYXBwcm92ZXMsIG9yZGVyKS0+XHJcblx0XHRpZiAhYXBwcm92ZXNcclxuXHRcdFx0cmV0dXJuIFtdXHJcblxyXG5cdFx0aWYgIWFwcHJvdmVzIGluc3RhbmNlb2YgQXJyYXlcclxuXHRcdFx0cmV0dXJuIFtdXHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIG9yZGVyID09ICdkZXNjJ1xyXG5cdFx0XHRcdGFwcHJvdmVzLnNvcnQgKHAxLCBwMikgLT5cclxuXHRcdFx0XHRcdF9wMSA9IDBcclxuXHRcdFx0XHRcdF9wMiA9IDBcclxuXHJcblx0XHRcdFx0XHRpZiBwMS5maW5pc2hfZGF0ZVxyXG5cdFx0XHRcdFx0XHRfcDEgPSBwMS5maW5pc2hfZGF0ZS5nZXRUaW1lKClcclxuXHJcblx0XHRcdFx0XHRpZiBwMi5maW5pc2hfZGF0ZVxyXG5cdFx0XHRcdFx0XHRfcDIgPSBwMi5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIF9wMiAtIF9wMVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0YXBwcm92ZXMuc29ydCAocDEsIHAyKSAtPlxyXG5cdFx0XHRcdFx0X3AxID0gMFxyXG5cdFx0XHRcdFx0X3AyID0gMFxyXG5cclxuXHRcdFx0XHRcdGlmIHAxLmZpbmlzaF9kYXRlXHJcblx0XHRcdFx0XHRcdF9wMSA9IHAxLmZpbmlzaF9kYXRlLmdldFRpbWUoKVxyXG5cclxuXHRcdFx0XHRcdGlmIHAyLmZpbmlzaF9kYXRlXHJcblx0XHRcdFx0XHRcdF9wMiA9IHAyLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gX3AxIC0gX3AyXHJcblx0XHRyZXR1cm4gYXBwcm92ZXNcclxuXHJcblx0X3Q6IChrZXkpLT5cclxuXHRcdHJldHVybiBUQVBpMThuLl9fKGtleSlcclxuXHRnZXRGaWVsZDogKGNvZGUpLT5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb25cclxuXHRcdGlmIGZvcm1fdmVyc2lvblxyXG5cdFx0XHRyZXR1cm4gZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKVxyXG5cclxuXHRnZXRWYWx1ZTogKGNvZGUpLT5cclxuXHRcdGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlXHJcblxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvblxyXG5cclxuXHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHJcblx0XHR1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0XHJcblxyXG5cdFx0dmFsdWVzID0gaW5zdGFuY2UudmFsdWVzIHx8IHt9XHJcblxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdHZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKVxyXG5cclxuXHRcdHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VmFsdWUgdmFsdWVzW2NvZGVdLCBmb3JtX3ZlcnNpb24uZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpLCBsb2NhbGUsIHV0Y09mZnNldFxyXG5cclxuXHRnZXRMYWJlbDogKGNvZGUpLT5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb25cclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbCBmb3JtX3ZlcnNpb24uZmllbGRzLCBjb2RlXHJcblxyXG5cdGdldENmQ2xhc3M6IChmaWVsZCktPlxyXG5cdFx0aWYgZmllbGQ/LnR5cGUgPT0gXCJpbnB1dFwiICYmIGZpZWxkPy5pc190ZXh0YXJlYVxyXG5cdFx0XHRyZXR1cm4gXCJjZlRleHRhcmVhXCJcclxuXHJcblx0Z2V0VGFibGVUaGVhZDogKGZpZWxkKS0+XHJcblx0XHRyZXR1cm4gU3RlZWRvc1RhYmxlLmdldFRoZWFkKGZpZWxkLCBmYWxzZSlcclxuXHJcblx0Z2V0VGFibGVCb2R5OiAoZmllbGQpLT5cclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0aW5zdGFuY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuaW5zdGFuY2VcclxuXHRcdFx0dmFsdWVzID0gaW5zdGFuY2UudmFsdWVzIHx8IHt9XHJcblx0XHRlbHNlXHJcblx0XHRcdHZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKVxyXG5cclxuXHRcdHRhYmxlVmFsdWUgPSB2YWx1ZXNbZmllbGQuY29kZV07XHJcblx0XHRyZXR1cm4gU3RlZWRvc1RhYmxlLmdldFRib2R5KGZpZWxkLnNmaWVsZHMuZ2V0UHJvcGVydHkoXCJjb2RlXCIpLCBmaWVsZCwgdGFibGVWYWx1ZSwgZmFsc2UpXHJcblxyXG5cdHNob3dMYWJlbDogKGZpZWxkKS0+XHJcblx0XHR0ZW1wbGF0ZURhdGEgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGFcclxuXHRcdGlmIHRlbXBsYXRlRGF0YS5sYWJlbCA9PSBmYWxzZVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdHJldHVybiB0cnVlXHJcblxyXG4jXHRhZkZpZWxkTGFiZWxUZXh0OiAob3ApLT5cclxuI1x0XHRpZiAhVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhXHJcbiNcdFx0XHRyZXR1cm4gQXV0b0Zvcm0uZ2V0TGFiZWxGb3JGaWVsZChvcC5uYW1lKVxyXG4jXHRcdGVsc2VcclxuI1x0XHRcdGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb25cclxuI1x0XHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbCBmb3JtX3ZlcnNpb24uZmllbGRzLCBvcD8uaGFzaD8ubmFtZVxyXG5cclxuXHRpc09waW5pb25GaWVsZDogKGZpZWxkKS0+XHJcblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZC5mb3JtdWxhKVxyXG5cclxuXHRpc09waW5pb25GaWVsZF9mcm9tX3N0cmluZzogKGZpZWxkX2Zvcm11bGEpLT5cclxuXHRcdHJldHVybiBJbnN0YW5jZVNpZ25UZXh0LmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpXHJcblxyXG5cdGluY2x1ZGVzT3BpbmlvbkZpZWxkOiAoZm9ybSwgZm9ybV92ZXJzaW9uKS0+XHJcblxyXG5cdFx0ZmllbGRfZm9ybXVsYXMgPSBuZXcgQXJyYXkoKTtcclxuXHJcblx0XHRmaWVsZHMgPSBkYi5mb3JtX3ZlcnNpb25zLmZpbmRPbmUoe19pZDogZm9ybV92ZXJzaW9uLCBmb3JtOiBmb3JtfSk/LmZpZWxkcyB8fCBbXVxyXG5cclxuXHRcdGZpZWxkcy5mb3JFYWNoIChmKS0+XHJcblx0XHRcdGlmIGYudHlwZSA9PSAndGFibGUnXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJ1xyXG5cdFx0XHRlbHNlIGlmIGYudHlwZSA9PSAnc2VjdGlvbidcclxuXHRcdFx0XHRmPy5maWVsZHM/LmZvckVhY2ggKGYxKS0+XHJcblx0XHRcdFx0XHRmaWVsZF9mb3JtdWxhcy5wdXNoIGYxLmZvcm11bGFcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGZpZWxkX2Zvcm11bGFzLnB1c2ggZi5mb3JtdWxhXHJcblxyXG5cdFx0Xy5zb21lIGZpZWxkX2Zvcm11bGFzLCAoZmllbGRfZm9ybXVsYSktPlxyXG5cdFx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKVxyXG5cclxuXHRnZXRPcGluaW9uRmllbGRTdGVwc05hbWU6IChmaWVsZF9mb3JtdWxhLCB0b3Bfa2V5d29yZHMpLT5cclxuXHJcblx0XHRvcGluaW9uRmllbGRzID0gbmV3IEFycmF5KCk7XHJcbiNcdFx0Y29uc29sZS5sb2coXCJmaWVsZF9mb3JtdWxhXCIsIGZpZWxkX2Zvcm11bGEpXHJcblx0XHRpZiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpXHJcblx0XHRcdGlmIGZpZWxkX2Zvcm11bGFcclxuXHJcbiNcdFx0XHRcdGZvbzEgPSBmaWVsZF9mb3JtdWxhLnNwbGl0KFwiLFwiKVxyXG5cdFx0XHRcdGZvbzEgPSBmaWVsZF9mb3JtdWxhLnNwbGl0KFwiO1wiKVxyXG5cclxuI1x0XHRcdFx0aWYgdG9wX2tleXdvcmRzXHJcbiNcdFx0XHRcdFx0Zm9vMSA9IGZpZWxkX2Zvcm11bGEuc3BsaXQoXCI7XCIpXHJcblxyXG5cdFx0XHRcdGZvbzEuZm9yRWFjaCAoZm9vKS0+XHJcblx0XHRcdFx0XHRqc29uX2Zvcm11bGEgPSB7fVxyXG5cclxuXHRcdFx0XHRcdHRyeVxyXG5cdFx0XHRcdFx0XHRqc29uX2Zvcm11bGEgPSBldmFsKFwiKFwiICsgZm9vICsgXCIpXCIpXHJcblx0XHRcdFx0XHRjYXRjaFxyXG5cdFx0XHRcdFx0XHRqc29uX2Zvcm11bGEgPSB7fVxyXG5cclxuXHRcdFx0XHRcdGlmIGpzb25fZm9ybXVsYT8ueWlqaWFubGFuXHJcblx0XHRcdFx0XHRcdHNmID0ge31cclxuXHJcblx0XHRcdFx0XHRcdHNmLnN0ZXBOYW1lID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5zdGVwXHJcblxyXG5cdFx0XHRcdFx0XHRzZi5pbWFnZV9zaWduID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5pbWFnZV9zaWduIHx8IGZhbHNlXHJcblxyXG5cdFx0XHRcdFx0XHRzZi5vbmx5X2NjX29waW5pb24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfY2MgfHwgZmFsc2VcclxuXHJcblx0XHRcdFx0XHRcdHNmLmRlZmF1bHRfZGVzY3JpcHRpb24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLmRlZmF1bHRcclxuXHJcblx0XHRcdFx0XHRcdHNmLm9ubHlfaGFuZGxlciA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4ub25seV9oYW5kbGVyXHJcblxyXG5cdFx0XHRcdFx0XHRzZi50b3Bfa2V5d29yZHMgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLnRvcF9rZXl3b3JkcyB8fCB0b3Bfa2V5d29yZHNcclxuXHJcblx0XHRcdFx0XHRcdG9waW5pb25GaWVsZHMucHVzaChzZik7XHJcblxyXG5cdFx0XHRcdFx0ZWxzZSBpZihmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwie3RyYWNlcy5cIikgPiAtMSB8fCBmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpID4gLTEpXHJcblxyXG5cdFx0XHRcdFx0XHRzZiA9IHtvbmx5X2NjX29waW5pb246IGZhbHNlLCBpbWFnZV9zaWduOiBmYWxzZSwgdG9wX2tleXdvcmRzOiB0b3Bfa2V5d29yZHN9XHJcblxyXG5cdFx0XHRcdFx0XHRpZiBmb28uaW5kZXhPZihcIntzaWduYXR1cmUuXCIpID4gLTFcclxuXHRcdFx0XHRcdFx0XHRzZi5pbWFnZV9zaWduID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdGZvbyA9IGZvby5yZXBsYWNlKFwie3NpZ25hdHVyZS5cIixcIlwiKTtcclxuXHJcblx0XHRcdFx0XHRcdHMxID0gZm9vLnJlcGxhY2UoXCJ7XCIsXCJcIikucmVwbGFjZShcIn1cIixcIlwiKVxyXG5cdFx0XHRcdFx0XHRpZiBzMS5zcGxpdChcIi5cIikubGVuZ3RoID4gMVxyXG5cdFx0XHRcdFx0XHRcdHNmLnN0ZXBOYW1lID0gczEuc3BsaXQoXCIuXCIpWzFdXHJcblx0XHRcdFx0XHRcdFx0aWYgb3BpbmlvbkZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcInN0ZXBOYW1lXCIsc2Yuc3RlcE5hbWUpLmxlbmd0aCA+IDBcclxuXHRcdFx0XHRcdFx0XHRcdG9waW5pb25GaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcInN0ZXBOYW1lXCIsIHNmLnN0ZXBOYW1lKT8ub25seV9jY19vcGluaW9uID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAyXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKVsyXT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnY2MnXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Yub25seV9jY19vcGluaW9uID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRvcGluaW9uRmllbGRzLnB1c2goc2YpO1xyXG5cclxuXHRcdHJldHVybiBvcGluaW9uRmllbGRzXHJcblxyXG5cdHNob3dDQ09waW5pb246IChmaWVsZCktPlxyXG5cdFx0aWYgZmllbGQuZm9ybXVsYT8uaW5kZXhPZihcInt0cmFjZXMuXCIpID4gLTEgfHwgZmllbGQuZm9ybXVsYT8uaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA+IC0xXHJcblx0XHRcdHMxID0gZmllbGQuZm9ybXVsYS5yZXBsYWNlKFwie3NpZ25hdHVyZS5cIixcIlwiKS5yZXBsYWNlKFwie1wiLFwiXCIpLnJlcGxhY2UoXCJ9XCIsXCJcIilcclxuXHRcdFx0aWYgczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDJcclxuXHRcdFx0XHRpZiBzMS5zcGxpdChcIi5cIilbMl0/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ2NjJ1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRtYXJrRG93blRvSHRtbDogKG1hcmtEb3duU3RyaW5nKS0+XHJcblx0XHRpZiBtYXJrRG93blN0cmluZ1xyXG5cdFx0XHRyZW5kZXJlciA9IG5ldyBNYXJrZG93bi5SZW5kZXJlcigpO1xyXG5cdFx0XHRyZW5kZXJlci5saW5rID0gKCBocmVmLCB0aXRsZSwgdGV4dCApIC0+XHJcblx0XHRcdFx0cmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9JyN7aHJlZn0nIHRpdGxlPScje3RpdGxlfSc+I3t0ZXh0fTwvYT5cIlxyXG5cdFx0XHRyZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtyZW5kZXJlcjpyZW5kZXJlcn0pKVxyXG5cclxuXHRmX2xhYmVsOiAodGhhdCktPlxyXG5cdFx0cmV0dXJuIHRoYXQubmFtZSB8fCB0aGF0LmNvZGVcclxuXHJcbmlmIE1ldGVvci5pc1NlcnZlclxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuc3RlZWRvc19mb3JtID0gLT5cclxuXHRcdHJldHVybiB0aGlzLmZvcm1fdmVyc2lvblxyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzU2VjdGlvbiA9IChjb2RlKS0+XHJcblx0XHRmb3JtX3ZlcnNpb24gPSB0aGlzLmZvcm1fdmVyc2lvblxyXG5cdFx0cmV0dXJuIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSkudHlwZSA9PSAnc2VjdGlvbidcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5kb2NfdmFsdWVzID0gLT5cclxuXHRcdGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZTtcclxuXHRcdHJldHVybiBpbnN0YW5jZS52YWx1ZXM7XHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuYXBwbGljYW50Q29udGV4dCA9IC0+XHJcblx0XHRpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XHJcblx0XHRkYXRhID0ge1xyXG5cdFx0XHRuYW1lOiAnaW5zX2FwcGxpY2FudCcsXHJcblx0XHRcdGF0dHM6IHtuYW1lOiAnaW5zX2FwcGxpY2FudCcsIGlkOiAnaW5zX2FwcGxpY2FudCcsIGNsYXNzOiAnc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wgaW5zX2FwcGxpY2FudCd9LFxyXG5cdFx0XHR2YWx1ZTogaW5zdGFuY2UuYXBwbGljYW50X25hbWVcclxuXHRcdH1cclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnN0YW5jZSA9IC0+XHJcblx0XHRyZXR1cm4gdGhpcy5pbnN0YW5jZVxyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmZpZWxkcyA9IC0+XHJcblx0XHRmb3JtX3ZlcnNpb24gPSB0aGlzLmZvcm1fdmVyc2lvblxyXG5cdFx0aWYgZm9ybV92ZXJzaW9uXHJcblx0XHRcdHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZm9ybV90eXBlcyA9IC0+XHJcblx0XHRyZXR1cm4gXCJkaXNhYmxlZFwiXHJcblxyXG5cdFRlbXBsYXRlLnJlZ2lzdGVySGVscGVyIFwiYWZGaWVsZExhYmVsVGV4dFwiLCAob3ApLT5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb25cclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbCBmb3JtX3ZlcnNpb24uZmllbGRzLCBvcD8uaGFzaD8ubmFtZVxyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLl90ID0gKGtleSktPlxyXG5cdFx0bG9jYWxlID0gdGhpcy5sb2NhbGVcclxuXHJcblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpXHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5zX2F0dGFjaF9kb3dubG9hZF91cmwgPSAoX2lkLCBhYnNvbHV0ZSktPlxyXG5cdFx0aWYgYWJzb2x1dGVcclxuXHRcdFx0cmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcIi9hcGkvZmlsZXMvaW5zdGFuY2VzLyN7X2lkfT9kb3dubG9hZD10cnVlXCIpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy8je19pZH0/ZG93bmxvYWQ9dHJ1ZVwiO1xyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLm9wdGlvbnMgPSAoZmllbGQpLT5cclxuXHRcdG9wdGlvbnMgPSBmaWVsZD8ub3B0aW9ucz8uc3BsaXQoXCJcXG5cIilcclxuXHRcdHJldiA9IFtdXHJcblx0XHRvcHRpb25zPy5mb3JFYWNoIChpdGVtKS0+XHJcblx0XHRcdHJldi5wdXNoKHtsYWJlbDogaXRlbSwgdmFsdWU6IGl0ZW19KVxyXG5cclxuXHRcdHJldHVybiByZXZcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5nZXRQZXJtaXNzaW9ucyA9IChjb2RlKS0+XHJcblx0XHRpZiAhVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzPy5pbmNsdWRlcyhjb2RlKVxyXG5cdFx0XHRyZXR1cm4gXCJyZWFkb25seSBkaXNhYmxlZFwiXHJcblx0XHRyZXR1cm4gXCJcIlxyXG5cclxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUuZXZlbnRzID1cclxuXHQnY2hhbmdlIC5mb3JtLWNvbnRyb2wsLmNoZWNrYm94IGlucHV0LC5hZi1yYWRpby1ncm91cCBpbnB1dCwuYWYtY2hlY2tib3gtZ3JvdXAgaW5wdXQnOiAoZXZlbnQpLT5cclxuXHRcdEluc3RhbmNlTWFuYWdlci5pbnN0YW5jZWZvcm1DaGFuZ2VFdmVudChldmVudClcclxuXHJcblx0J3R5cGVhaGVhZDpjaGFuZ2UgLmZvcm0tY29udHJvbCc6IChldmVudCkgLT5cclxuXHRcdEluc3RhbmNlTWFuYWdlci5pbnN0YW5jZWZvcm1DaGFuZ2VFdmVudChldmVudClcclxuXHJcblx0J2NsaWNrIC5jZlRleHRhcmVhIGEnOiAoZXZlbnQpLT5cclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRTdGVlZG9zLm9wZW5XaW5kb3coZXZlbnQudGFyZ2V0LmhyZWYpO1xyXG5cclxuXHJcbkluc3RhbmNlZm9ybVRlbXBsYXRlLm9uQ3JlYXRlZCA9ICgpLT5cclxuXHRpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdGlmICFpbnN0YW5jZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHR0ZW1wbGF0ZSA9IFRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZShpbnN0YW5jZSk7XHJcblxyXG5cdHRyeVxyXG5cdFx0Y29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRlbXBsYXRlLCB7aXNCb2R5OiB0cnVlfSk7XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5sb2cgXCJJbnN0YW5jZSBUZW1wbGF0ZSBFcnJvclwiLCBlXHJcblx0XHRjb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoXCJcIiwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHJcblx0cmVuZGVyRnVuY3Rpb24gPSBldmFsKGNvbXBpbGVkKTtcclxuXHJcblx0aW5zdGFuY2VWaWV3ID0gbmV3IEJsYXplLlZpZXcoXCJjdXN0b21faW5zdGFuY2VfdGVtcGxhdGVcIiwgcmVuZGVyRnVuY3Rpb24pO1xyXG5cclxuXHRpbnN0YW5jZUN1c3RvbVRlbXBsYXRlID0gbmV3IEJsYXplLlRlbXBsYXRlKGluc3RhbmNlVmlldy5uYW1lLCByZW5kZXJGdW5jdGlvbik7XHJcblxyXG5cdFRlbXBsYXRlLmluc3RhbmNlX2N1c3RvbV90ZW1wbGF0ZSA9IGluc3RhbmNlQ3VzdG9tVGVtcGxhdGVcclxuXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlLmhlbHBlcnMgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVyc1xyXG5cclxuXHJcblxyXG5cclxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUub25SZW5kZXJlZCA9ICgpLT5cclxuXHQjIHQgPSB0aGlzO1xyXG5cclxuXHQjdC5zdWJzY3JpYmUgXCJpbnN0YW5jZV9kYXRhXCIsIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSwgLT5cclxuXHQjICAgIFRyYWNrZXIuYWZ0ZXJGbHVzaCAtPlxyXG5cdGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0aWYgIWluc3RhbmNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdCMkKFwiI2luc19hcHBsaWNhbnRcIikuc2VsZWN0MigpLnZhbChpbnN0YW5jZS5hcHBsaWNhbnQpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG5cdCMkKFwiI2luc19hcHBsaWNhbnRcIikudmFsKGluc3RhbmNlLmFwcGxpY2FudCk7XHJcblx0JChcImlucHV0W25hbWU9J2luc19hcHBsaWNhbnQnXVwiKVswXT8uZGF0YXNldC52YWx1ZXMgPSBpbnN0YW5jZS5hcHBsaWNhbnQ7XHJcblx0JChcImlucHV0W25hbWU9J2luc19hcHBsaWNhbnQnXVwiKS52YWwoaW5zdGFuY2UuYXBwbGljYW50X25hbWUpXHJcblxyXG5cclxuXHRBcHByb3ZlTWFuYWdlci5lcnJvciA9IHtuZXh0U3RlcHM6ICcnLCBuZXh0U3RlcFVzZXJzOiAnJ307XHJcblxyXG5cdCMgaW5zdGFuY2UgZnJvbee7keWumuS6i+S7tlxyXG5cdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCcgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2RyYWZ0J1xyXG5cdFx0SW5zdGFuY2VFdmVudC5pbml0RXZlbnRzKGluc3RhbmNlLmZsb3cpO1xyXG5cclxuXHRpZiAhQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpXHJcblxyXG5cdFx0Y3VycmVudEFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKTtcclxuXHJcblxyXG5cdFx0aW5zdGFuY2VOdW1iZXJGaWVsZHMgPSAkKFwiW2RhdGEtZm9ybXVsYV1cIiwgJChcIiNpbnN0YW5jZWZvcm1cIikpXHJcblxyXG5cdFx0aW5zdGFuY2VOdW1iZXJGaWVsZHMuZWFjaCAoKS0+XHJcblx0XHRcdHNjaGVtYUtleSA9IHRoaXMuZGF0YXNldC5zY2hlbWFLZXlcclxuXHRcdFx0ZWxlbWVudCA9ICQodGhpcylcclxuXHRcdFx0aWYgISQodGhpcykudmFsKCkgJiYgc2NoZW1hS2V5ICYmIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKVxyXG5cdFx0XHRcdE1ldGVvci5jYWxsICdnZXRJbnN0YW5jZVZhbHVlcycsIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSwgKGVycm9yLCByZXN1bHQpLT5cclxuXHRcdFx0XHRcdGlmIGVycm9yXHJcblx0XHRcdFx0XHRcdHRvYXN0ci5lcnJvcihlcnJvci5yZWFzb24pXHJcblxyXG5cdFx0XHRcdFx0aWYgIXJlc3VsdFtzY2hlbWFLZXldXHJcblx0XHRcdFx0XHRcdGtleSA9IGVsZW1lbnQuZGF0YShcImZvcm11bGFcIik/LnJlcGxhY2UoXCJhdXRvX251bWJlcihcIiwgXCJcIikucmVwbGFjZShcIilcIiwgXCJcIilcclxuXHJcblx0XHRcdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFwiL2csIFwiXCIpLnJlcGxhY2UoL1xcJy9nLCBcIlwiKVxyXG5cclxuXHRcdFx0XHRcdFx0aWYga2V5LmluZGV4T2YoXCJ7XCIpID4gLTFcclxuXHRcdFx0XHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZShcIntcIixcIlwiKS5yZXBsYWNlKFwifVwiLFwiXCIpXHJcblx0XHRcdFx0XHRcdFx0a2V5ID0ga2V5LnRyaW0oKVxyXG5cdFx0XHRcdFx0XHRcdGtleSA9IEF1dG9Gb3JtLmdldEZpZWxkVmFsdWUoa2V5LCAnaW5zdGFuY2Vmb3JtJylcclxuXHRcdFx0XHRcdFx0SW5zdGFuY2VOdW1iZXJSdWxlcy5pbnN0YW5jZU51bWJlckJ1aWxkZXIgZWxlbWVudCwga2V5XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGVsZW1lbnQ/LnZhbChyZXN1bHRbc2NoZW1hS2V5XSkudHJpZ2dlcihcImNoYW5nZVwiKVxyXG5cclxuXHRcdGp1ZGdlID0gY3VycmVudEFwcHJvdmUuanVkZ2VcclxuXHRcdGN1cnJlbnRTdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XHJcblx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xyXG5cclxuXHRcdGZvcm11bGFfZmllbGRzID0gRm9ybV9mb3JtdWxhLmdldEZvcm11bGFGaWVsZFZhcmlhYmxlKFwiRm9ybV9mb3JtdWxhLmZpZWxkX3ZhbHVlc1wiLCBmb3JtX3ZlcnNpb24uZmllbGRzKTtcclxuXHRcdEZvcm1fZm9ybXVsYS5ydW4oXCJcIiwgXCJcIiwgZm9ybXVsYV9maWVsZHMsIEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jLCBmb3JtX3ZlcnNpb24uZmllbGRzKTtcclxuXHRcdCPlnKjmraTlpITliJ3lp4vljJZzZXNzaW9uIOS4reeahCBmb3JtX3ZhbHVlcyDlj5jph4/vvIznlKjkuo7op6blj5HkuIvkuIDmraXmraXpqqTorqHnrpdcclxuXHRcdFNlc3Npb24uc2V0KFwiaW5zdGFuY2VfZm9ybV92YWx1ZXNcIiwge2luc3RhbmNlSWQ6IGluc3RhbmNlLl9pZCwgdmFsdWVzOiBBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwiaW5zdGFuY2Vmb3JtXCIpLmluc2VydERvY30pO1xyXG5cclxuXHJcblxyXG4iLCJJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzID0ge1xuICBhcHBsaWNhbnRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0YSwgc3RlZWRvc19pbnN0YW5jZTtcbiAgICBzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgZGF0YSA9IHtcbiAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgIGF0dHM6IHtcbiAgICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBpZDogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBcImNsYXNzXCI6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50J1xuICAgICAgfSxcbiAgICAgIHZhbHVlOiBzdGVlZG9zX2luc3RhbmNlLmFwcGxpY2FudF9uYW1lXG4gICAgfTtcbiAgICBpZiAoIXN0ZWVkb3NfaW5zdGFuY2UgfHwgc3RlZWRvc19pbnN0YW5jZS5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICBkYXRhLmF0dHMuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfSxcbiAgaW5zdGFuY2VJZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdpbnN0YW5jZWZvcm0nO1xuICB9LFxuICBmb3JtX3R5cGVzOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpKSB7XG4gICAgICByZXR1cm4gJ2Rpc2FibGVkJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdtZXRob2QnO1xuICAgIH1cbiAgfSxcbiAgc3RlZWRvc19mb3JtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIGZvcm1fdmVyc2lvbjtcbiAgICB9XG4gIH0sXG4gIGlubmVyc3ViZm9ybUNvbnRleHQ6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBkb2NfdmFsdWVzO1xuICAgIGRvY192YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gICAgb2JqW1widGFibGVWYWx1ZXNcIl0gPSBkb2NfdmFsdWVzID8gZG9jX3ZhbHVlc1tvYmouY29kZV0gOiBbXTtcbiAgICBvYmpbXCJmb3JtSWRcIl0gPSBcImluc3RhbmNlZm9ybVwiO1xuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gIGluc3RhbmNlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RlZWRvc19pbnN0YW5jZTtcbiAgICBTZXNzaW9uLmdldChcImNoYW5nZV9kYXRlXCIpO1xuICAgIGlmIChTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIikpIHtcbiAgICAgIHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgIHJldHVybiBzdGVlZG9zX2luc3RhbmNlO1xuICAgIH1cbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICB1bmVtcHR5OiBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0sXG4gIHVuZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuICEoYSA9PT0gYik7XG4gIH0sXG4gIGluY2x1ZGVzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcbiAgfSxcbiAgaW5jbHVkZTogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLnNwbGl0KCcsJykuaW5jbHVkZXMoYSk7XG4gIH0sXG4gIGZpZWxkczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XG4gICAgfVxuICB9LFxuICBmb3JtYXREYXRlOiBmdW5jdGlvbihkYXRlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zID0gSlNPTi5wYXJzZShvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmZvcm1hdCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgZm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIlxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQob3B0aW9ucy5mb3JtYXQpO1xuICB9LFxuICB0cmFjZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmbG93LCBpbnN0YW5jZSwgbG9jYWxlLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHN0ZWVkb3NEYXRhLCBzdGVwcywgdHJhY2VzO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIHN0ZWVkb3NEYXRhID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi52aWV3KSAhPSBudWxsID8gKHJlZjIgPSByZWYxLnRlbXBsYXRlKSAhPSBudWxsID8gcmVmMi5zdGVlZG9zRGF0YSA6IHZvaWQgMCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIGluc3RhbmNlID0gc3RlZWRvc0RhdGEgIT0gbnVsbCA/IHN0ZWVkb3NEYXRhLmluc3RhbmNlIDogdm9pZCAwO1xuICAgICAgZmxvdyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRGbG93VmVyc2lvbihpbnN0YW5jZSk7XG4gICAgICBsb2NhbGUgPSBzdGVlZG9zRGF0YSAhPSBudWxsID8gc3RlZWRvc0RhdGEubG9jYWxlIDogdm9pZCAwO1xuICAgICAgaWYgKGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnemgtY24nKSB7XG4gICAgICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgIGZsb3cgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGbG93VmVyc2lvbigpO1xuICAgICAgbG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKTtcbiAgICB9XG4gICAgaWYgKCFpbnN0YW5jZSB8fCAhZmxvdykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBzdGVwcyA9IGZsb3cuc3RlcHM7XG4gICAgdHJhY2VzID0ge307XG4gICAgaWYgKChyZWYzID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsKSB7XG4gICAgICByZWYzLmZvckVhY2goZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgdmFyIGFwcHJvdmVzLCByZWY0LCBzdGVwO1xuICAgICAgICBzdGVwID0gc3RlcHMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZS5zdGVwKTtcbiAgICAgICAgYXBwcm92ZXMgPSBbXTtcbiAgICAgICAgaWYgKChyZWY0ID0gdHJhY2UuYXBwcm92ZXMpICE9IG51bGwpIHtcbiAgICAgICAgICByZWY0LmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgICAgdmFyIGp1ZGdlX25hbWU7XG4gICAgICAgICAgICBpZiAodHJhY2UuaXNfZmluaXNoZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICdhcHByb3ZlZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIGFwcHJvdmVkXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICdyZWplY3RlZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlamVjdGVkXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgdGVybWluYXRlZFwiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZlLmp1ZGdlID09PSAncmVhc3NpZ25lZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlYXNzaWduZWRcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBwcm92ZS5qdWRnZSA9PT0gJ3JlbG9jYXRlZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlbG9jYXRlZFwiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZlLmp1ZGdlID09PSAnJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHBlbmRpbmdcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXBwcm92ZXMucHVzaCh7XG4gICAgICAgICAgICAgIF9pZDogYXBwcm92ZS5faWQsXG4gICAgICAgICAgICAgIGhhbmRsZXI6IGFwcHJvdmUudXNlcixcbiAgICAgICAgICAgICAgaGFuZGxlcl9uYW1lOiBhcHByb3ZlLmhhbmRsZXJfbmFtZSxcbiAgICAgICAgICAgICAgaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZTogYXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lLFxuICAgICAgICAgICAgICBoYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZTogYXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSxcbiAgICAgICAgICAgICAgZmluaXNoX2RhdGU6IGFwcHJvdmUuZmluaXNoX2RhdGUsXG4gICAgICAgICAgICAgIGp1ZGdlOiBhcHByb3ZlLmp1ZGdlLFxuICAgICAgICAgICAgICBqdWRnZV9uYW1lOiBqdWRnZV9uYW1lLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYXBwcm92ZS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgaXNfZmluaXNoZWQ6IGFwcHJvdmUuaXNfZmluaXNoZWQsXG4gICAgICAgICAgICAgIHR5cGU6IGFwcHJvdmUudHlwZSxcbiAgICAgICAgICAgICAgb3Bpbmlvbl9maWVsZHNfY29kZTogYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlLFxuICAgICAgICAgICAgICBzaWduX2ZpZWxkX2NvZGU6IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlLFxuICAgICAgICAgICAgICBpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWQsXG4gICAgICAgICAgICAgIHNpZ25fc2hvdzogYXBwcm92ZS5zaWduX3Nob3dcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwKSB7XG4gICAgICAgICAgaWYgKHN0ZXAubmFtZSBpbiB0cmFjZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZXNbc3RlcC5uYW1lXSA9IHRyYWNlc1tzdGVwLm5hbWVdLmNvbmNhdChhcHByb3Zlcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZXNbc3RlcC5uYW1lXSA9IGFwcHJvdmVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cmFjZXM7XG4gIH0sXG4gIGRvY192YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gIH0sXG4gIGluc3RhbmNlX2JveF9zdHlsZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJveCwgaW5zLCBqdWRnZTtcbiAgICBib3ggPSBTZXNzaW9uLmdldChcImJveFwiKTtcbiAgICBpZiAoYm94ID09PSBcImluYm94XCIgfHwgYm94ID09PSBcImRyYWZ0XCIpIHtcbiAgICAgIGp1ZGdlID0gU2Vzc2lvbi5nZXQoXCJqdWRnZVwiKTtcbiAgICAgIGlmIChqdWRnZSkge1xuICAgICAgICBpZiAoanVkZ2UgPT09IFwiYXBwcm92ZWRcIikge1xuICAgICAgICAgIHJldHVybiBcImJveC1zdWNjZXNzXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoanVkZ2UgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgIHJldHVybiBcImJveC1kYW5nZXJcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBpZiAoaW5zICYmIGlucy5maW5hbF9kZWNpc2lvbikge1xuICAgICAgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICAgIHJldHVybiBcImJveC1zdWNjZXNzXCI7XG4gICAgICB9IGVsc2UgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgIHJldHVybiBcImJveC1kYW5nZXJcIjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHRhYmxlX2ZpZWxkczogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICB2YXIgZmllbGRzLCBmb3JtX3ZlcnNpb247XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbik7XG4gICAgfVxuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIGZpZWxkcyA9IF8uY2xvbmUoZm9ybV92ZXJzaW9uLmZpZWxkcyk7XG4gICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGFmdGVyX2ZpZWxkLCBiZWZvcmVfZmllbGQsIHByZV9maWVsZHMsIHByZV93aWRlX2ZpZWxkcywgdGRfY29sc3BhbiwgdHJfZW5kLCB0cl9zdGFydDtcbiAgICAgICAgZmllbGQudHJfc3RhcnQgPSBcIlwiO1xuICAgICAgICBmaWVsZC50cl9lbmQgPSBcIlwiO1xuICAgICAgICB0ZF9jb2xzcGFuID0gMTtcbiAgICAgICAgaWYgKCh0eXBlb2YgQ29yZUZvcm0gIT09IFwidW5kZWZpbmVkXCIgJiYgQ29yZUZvcm0gIT09IG51bGwgPyBDb3JlRm9ybS5wYWdlVGl0bGVGaWVsZE5hbWUgOiB2b2lkIDApID09PSBmaWVsZC5jb2RlKSB7XG4gICAgICAgICAgZmllbGQuaXNfd2lkZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkLmZvcm11bGEgJiYgZmllbGQudHlwZSAhPT0gJ29kYXRhJykge1xuICAgICAgICAgIGZpZWxkLnBlcm1pc3Npb24gPSBcInJlYWRvbmx5XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgICAgZmllbGQudGRfY29sc3BhbiA9IDQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpZWxkLnRkX2NvbHNwYW4gPSAzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgIGZpZWxkLnRyX3N0YXJ0ID0gXCI8dHI+XCI7XG4gICAgICAgICAgICByZXR1cm4gZmllbGQudHJfZW5kID0gXCI8L3RyPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVfZmllbGRzID0gZmllbGRzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBwcmVfd2lkZV9maWVsZHMgPSBwcmVfZmllbGRzLmZpbHRlclByb3BlcnR5KFwiaXNfd2lkZVwiLCB0cnVlKTtcbiAgICAgICAgICB0cl9zdGFydCA9IFwiXCI7XG4gICAgICAgICAgdHJfZW5kID0gXCJcIjtcbiAgICAgICAgICBiZWZvcmVfZmllbGQgPSBudWxsO1xuICAgICAgICAgIGFmdGVyX2ZpZWxkID0gbnVsbDtcbiAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBiZWZvcmVfZmllbGQgPSBmaWVsZHNbaW5kZXggLSAxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4IDwgZmllbGRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGFmdGVyX2ZpZWxkID0gZmllbGRzW2luZGV4ICsgMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgICAgdGRfY29sc3BhbiA9IDQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICB0ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGJlZm9yZV9maWVsZCAmJiBhZnRlcl9maWVsZCAmJiBiZWZvcmVfZmllbGQuaXNfd2lkZSAmJiBhZnRlcl9maWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICAgIGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xuICAgICAgICAgICAgICB0ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT09IDAgJiYgYWZ0ZXJfZmllbGQgJiYgYWZ0ZXJfZmllbGQuaXNfd2lkZSkge1xuICAgICAgICAgICAgICBmaWVsZC5pc193aWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGRfY29sc3BhbiA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09PSAwICYmIGFmdGVyX2ZpZWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xuICAgICAgICAgICAgICB0ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZmllbGQudGRfY29sc3BhbiA9IHRkX2NvbHNwYW47XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICB0cl9zdGFydCA9IFwiPHRyPlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09PSAwIHx8IGZpZWxkLmlzX3dpZGUpIHtcbiAgICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgICAgICAgICB0cl9zdGFydCA9IFwiPHRyIGNsYXNzID0gXFxcInRyLWNoaWxkLXRhYmxlXFxcIj5cIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cl9zdGFydCA9IFwiPHRyPlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpZWxkLnRyX3N0YXJ0ID0gdHJfc3RhcnQ7XG4gICAgICAgICAgaWYgKGluZGV4ICsgMSA9PT0gZmllbGRzLmxlbmd0aCB8fCBmaWVsZC50eXBlID09PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PT0gJ3RhYmxlJyB8fCBmaWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICB0cl9lbmQgPSBcIjwvdHI+XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgIT09IDApIHtcbiAgICAgICAgICAgIHRyX2VuZCA9IFwiPC90cj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLnRyX2VuZCA9IHRyX2VuZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmllbGRzO1xuICAgIH1cbiAgfSxcbiAgc29ydF9hcHByb3ZlOiBmdW5jdGlvbihhcHByb3Zlcywgb3JkZXIpIHtcbiAgICBpZiAoIWFwcHJvdmVzKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICghYXBwcm92ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3JkZXIgPT09ICdkZXNjJykge1xuICAgICAgICBhcHByb3Zlcy5zb3J0KGZ1bmN0aW9uKHAxLCBwMikge1xuICAgICAgICAgIHZhciBfcDEsIF9wMjtcbiAgICAgICAgICBfcDEgPSAwO1xuICAgICAgICAgIF9wMiA9IDA7XG4gICAgICAgICAgaWYgKHAxLmZpbmlzaF9kYXRlKSB7XG4gICAgICAgICAgICBfcDEgPSBwMS5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwMi5maW5pc2hfZGF0ZSkge1xuICAgICAgICAgICAgX3AyID0gcDIuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3AyIC0gX3AxO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcHJvdmVzLnNvcnQoZnVuY3Rpb24ocDEsIHAyKSB7XG4gICAgICAgICAgdmFyIF9wMSwgX3AyO1xuICAgICAgICAgIF9wMSA9IDA7XG4gICAgICAgICAgX3AyID0gMDtcbiAgICAgICAgICBpZiAocDEuZmluaXNoX2RhdGUpIHtcbiAgICAgICAgICAgIF9wMSA9IHAxLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHAyLmZpbmlzaF9kYXRlKSB7XG4gICAgICAgICAgICBfcDIgPSBwMi5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfcDEgLSBfcDI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZXM7XG4gIH0sXG4gIF90OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXkpO1xuICB9LFxuICBnZXRGaWVsZDogZnVuY3Rpb24oY29kZSkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbjtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKTtcbiAgICB9XG4gIH0sXG4gIGdldFZhbHVlOiBmdW5jdGlvbihjb2RlKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbiwgaW5zdGFuY2UsIGxvY2FsZSwgdXRjT2Zmc2V0LCB2YWx1ZXM7XG4gICAgaW5zdGFuY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuaW5zdGFuY2U7XG4gICAgZm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbjtcbiAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgIHV0Y09mZnNldCA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS51dGNPZmZzZXQ7XG4gICAgdmFsdWVzID0gaW5zdGFuY2UudmFsdWVzIHx8IHt9O1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIHZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgICB9XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSh2YWx1ZXNbY29kZV0sIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSksIGxvY2FsZSwgdXRjT2Zmc2V0KTtcbiAgfSxcbiAgZ2V0TGFiZWw6IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb247XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbChmb3JtX3ZlcnNpb24uZmllbGRzLCBjb2RlKTtcbiAgfSxcbiAgZ2V0Q2ZDbGFzczogZnVuY3Rpb24oZmllbGQpIHtcbiAgICBpZiAoKGZpZWxkICE9IG51bGwgPyBmaWVsZC50eXBlIDogdm9pZCAwKSA9PT0gXCJpbnB1dFwiICYmIChmaWVsZCAhPSBudWxsID8gZmllbGQuaXNfdGV4dGFyZWEgOiB2b2lkIDApKSB7XG4gICAgICByZXR1cm4gXCJjZlRleHRhcmVhXCI7XG4gICAgfVxuICB9LFxuICBnZXRUYWJsZVRoZWFkOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VGhlYWQoZmllbGQsIGZhbHNlKTtcbiAgfSxcbiAgZ2V0VGFibGVCb2R5OiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciBpbnN0YW5jZSwgdGFibGVWYWx1ZSwgdmFsdWVzO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xuICAgICAgdmFsdWVzID0gaW5zdGFuY2UudmFsdWVzIHx8IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gICAgfVxuICAgIHRhYmxlVmFsdWUgPSB2YWx1ZXNbZmllbGQuY29kZV07XG4gICAgcmV0dXJuIFN0ZWVkb3NUYWJsZS5nZXRUYm9keShmaWVsZC5zZmllbGRzLmdldFByb3BlcnR5KFwiY29kZVwiKSwgZmllbGQsIHRhYmxlVmFsdWUsIGZhbHNlKTtcbiAgfSxcbiAgc2hvd0xhYmVsOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciB0ZW1wbGF0ZURhdGE7XG4gICAgdGVtcGxhdGVEYXRhID0gVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhO1xuICAgIGlmICh0ZW1wbGF0ZURhdGEubGFiZWwgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBpc09waW5pb25GaWVsZDogZnVuY3Rpb24oZmllbGQpIHtcbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZC5mb3JtdWxhKTtcbiAgfSxcbiAgaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmc6IGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEpIHtcbiAgICByZXR1cm4gSW5zdGFuY2VTaWduVGV4dC5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKTtcbiAgfSxcbiAgaW5jbHVkZXNPcGluaW9uRmllbGQ6IGZ1bmN0aW9uKGZvcm0sIGZvcm1fdmVyc2lvbikge1xuICAgIHZhciBmaWVsZF9mb3JtdWxhcywgZmllbGRzLCByZWY7XG4gICAgZmllbGRfZm9ybXVsYXMgPSBuZXcgQXJyYXkoKTtcbiAgICBmaWVsZHMgPSAoKHJlZiA9IGRiLmZvcm1fdmVyc2lvbnMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZvcm1fdmVyc2lvbixcbiAgICAgIGZvcm06IGZvcm1cbiAgICB9KSkgIT0gbnVsbCA/IHJlZi5maWVsZHMgOiB2b2lkIDApIHx8IFtdO1xuICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICAgIHZhciByZWYxO1xuICAgICAgaWYgKGYudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJyk7XG4gICAgICB9IGVsc2UgaWYgKGYudHlwZSA9PT0gJ3NlY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmICE9IG51bGwgPyAocmVmMSA9IGYuZmllbGRzKSAhPSBudWxsID8gcmVmMS5mb3JFYWNoKGZ1bmN0aW9uKGYxKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkX2Zvcm11bGFzLnB1c2goZjEuZm9ybXVsYSk7XG4gICAgICAgIH0pIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkX2Zvcm11bGFzLnB1c2goZi5mb3JtdWxhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gXy5zb21lKGZpZWxkX2Zvcm11bGFzLCBmdW5jdGlvbihmaWVsZF9mb3JtdWxhKSB7XG4gICAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lOiBmdW5jdGlvbihmaWVsZF9mb3JtdWxhLCB0b3Bfa2V5d29yZHMpIHtcbiAgICB2YXIgZm9vMSwgb3BpbmlvbkZpZWxkcztcbiAgICBvcGluaW9uRmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgaWYgKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSkpIHtcbiAgICAgIGlmIChmaWVsZF9mb3JtdWxhKSB7XG4gICAgICAgIGZvbzEgPSBmaWVsZF9mb3JtdWxhLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgZm9vMS5mb3JFYWNoKGZ1bmN0aW9uKGZvbykge1xuICAgICAgICAgIHZhciBqc29uX2Zvcm11bGEsIHJlZiwgcmVmMSwgczEsIHNmO1xuICAgICAgICAgIGpzb25fZm9ybXVsYSA9IHt9O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBqc29uX2Zvcm11bGEgPSBldmFsKFwiKFwiICsgZm9vICsgXCIpXCIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgICAganNvbl9mb3JtdWxhID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqc29uX2Zvcm11bGEgIT0gbnVsbCA/IGpzb25fZm9ybXVsYS55aWppYW5sYW4gOiB2b2lkIDApIHtcbiAgICAgICAgICAgIHNmID0ge307XG4gICAgICAgICAgICBzZi5zdGVwTmFtZSA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uc3RlcDtcbiAgICAgICAgICAgIHNmLmltYWdlX3NpZ24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLmltYWdlX3NpZ24gfHwgZmFsc2U7XG4gICAgICAgICAgICBzZi5vbmx5X2NjX29waW5pb24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfY2MgfHwgZmFsc2U7XG4gICAgICAgICAgICBzZi5kZWZhdWx0X2Rlc2NyaXB0aW9uID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbltcImRlZmF1bHRcIl07XG4gICAgICAgICAgICBzZi5vbmx5X2hhbmRsZXIgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfaGFuZGxlcjtcbiAgICAgICAgICAgIHNmLnRvcF9rZXl3b3JkcyA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4udG9wX2tleXdvcmRzIHx8IHRvcF9rZXl3b3JkcztcbiAgICAgICAgICAgIHJldHVybiBvcGluaW9uRmllbGRzLnB1c2goc2YpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcInt0cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xIHx8IChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7c2lnbmF0dXJlLnRyYWNlcy5cIikgOiB2b2lkIDApID4gLTEpIHtcbiAgICAgICAgICAgIHNmID0ge1xuICAgICAgICAgICAgICBvbmx5X2NjX29waW5pb246IGZhbHNlLFxuICAgICAgICAgICAgICBpbWFnZV9zaWduOiBmYWxzZSxcbiAgICAgICAgICAgICAgdG9wX2tleXdvcmRzOiB0b3Bfa2V5d29yZHNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZm9vLmluZGV4T2YoXCJ7c2lnbmF0dXJlLlwiKSA+IC0xKSB7XG4gICAgICAgICAgICAgIHNmLmltYWdlX3NpZ24gPSB0cnVlO1xuICAgICAgICAgICAgICBmb28gPSBmb28ucmVwbGFjZShcIntzaWduYXR1cmUuXCIsIFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgczEgPSBmb28ucmVwbGFjZShcIntcIiwgXCJcIikucmVwbGFjZShcIn1cIiwgXCJcIik7XG4gICAgICAgICAgICBpZiAoczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgc2Yuc3RlcE5hbWUgPSBzMS5zcGxpdChcIi5cIilbMV07XG4gICAgICAgICAgICAgIGlmIChvcGluaW9uRmllbGRzLmZpbHRlclByb3BlcnR5KFwic3RlcE5hbWVcIiwgc2Yuc3RlcE5hbWUpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoKHJlZiA9IG9waW5pb25GaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcInN0ZXBOYW1lXCIsIHNmLnN0ZXBOYW1lKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcmVmLm9ubHlfY2Nfb3BpbmlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzMS5zcGxpdChcIi5cIikubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgaWYgKCgocmVmMSA9IHMxLnNwbGl0KFwiLlwiKVsyXSkgIT0gbnVsbCA/IHJlZjEudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHZvaWQgMCkgPT09ICdjYycpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Yub25seV9jY19vcGluaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcGluaW9uRmllbGRzLnB1c2goc2YpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcGluaW9uRmllbGRzO1xuICB9LFxuICBzaG93Q0NPcGluaW9uOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciByZWYsIHJlZjEsIHJlZjIsIHMxO1xuICAgIGlmICgoKHJlZiA9IGZpZWxkLmZvcm11bGEpICE9IG51bGwgPyByZWYuaW5kZXhPZihcInt0cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xIHx8ICgocmVmMSA9IGZpZWxkLmZvcm11bGEpICE9IG51bGwgPyByZWYxLmluZGV4T2YoXCJ7c2lnbmF0dXJlLnRyYWNlcy5cIikgOiB2b2lkIDApID4gLTEpIHtcbiAgICAgIHMxID0gZmllbGQuZm9ybXVsYS5yZXBsYWNlKFwie3NpZ25hdHVyZS5cIiwgXCJcIikucmVwbGFjZShcIntcIiwgXCJcIikucmVwbGFjZShcIn1cIiwgXCJcIik7XG4gICAgICBpZiAoczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgaWYgKCgocmVmMiA9IHMxLnNwbGl0KFwiLlwiKVsyXSkgIT0gbnVsbCA/IHJlZjIudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHZvaWQgMCkgPT09ICdjYycpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIG1hcmtEb3duVG9IdG1sOiBmdW5jdGlvbihtYXJrRG93blN0cmluZykge1xuICAgIHZhciByZW5kZXJlcjtcbiAgICBpZiAobWFya0Rvd25TdHJpbmcpIHtcbiAgICAgIHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XG4gICAgICByZW5kZXJlci5saW5rID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J1wiICsgaHJlZiArIFwiJyB0aXRsZT0nXCIgKyB0aXRsZSArIFwiJz5cIiArIHRleHQgKyBcIjwvYT5cIjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtcbiAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyXG4gICAgICB9KSk7XG4gICAgfVxuICB9LFxuICBmX2xhYmVsOiBmdW5jdGlvbih0aGF0KSB7XG4gICAgcmV0dXJuIHRoYXQubmFtZSB8fCB0aGF0LmNvZGU7XG4gIH1cbn07XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5zdGVlZG9zX2Zvcm0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtX3ZlcnNpb247XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNTZWN0aW9uID0gZnVuY3Rpb24oY29kZSkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gdGhpcy5mb3JtX3ZlcnNpb247XG4gICAgcmV0dXJuIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSkudHlwZSA9PT0gJ3NlY3Rpb24nO1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmRvY192YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zdGFuY2U7XG4gICAgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuICAgIHJldHVybiBpbnN0YW5jZS52YWx1ZXM7XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuYXBwbGljYW50Q29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRhLCBpbnN0YW5jZTtcbiAgICBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XG4gICAgcmV0dXJuIGRhdGEgPSB7XG4gICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICBhdHRzOiB7XG4gICAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgaWQ6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgXCJjbGFzc1wiOiAnc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wgaW5zX2FwcGxpY2FudCdcbiAgICAgIH0sXG4gICAgICB2YWx1ZTogaW5zdGFuY2UuYXBwbGljYW50X25hbWVcbiAgICB9O1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZmllbGRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSB0aGlzLmZvcm1fdmVyc2lvbjtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xuICAgIH1cbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtX3R5cGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiZGlzYWJsZWRcIjtcbiAgfTtcbiAgVGVtcGxhdGUucmVnaXN0ZXJIZWxwZXIoXCJhZkZpZWxkTGFiZWxUZXh0XCIsIGZ1bmN0aW9uKG9wKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbiwgcmVmO1xuICAgIGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb247XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbChmb3JtX3ZlcnNpb24uZmllbGRzLCBvcCAhPSBudWxsID8gKHJlZiA9IG9wLmhhc2gpICE9IG51bGwgPyByZWYubmFtZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gIH0pO1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLl90ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBsb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpO1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc19hdHRhY2hfZG93bmxvYWRfdXJsID0gZnVuY3Rpb24oX2lkLCBhYnNvbHV0ZSkge1xuICAgIGlmIChhYnNvbHV0ZSkge1xuICAgICAgcmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcIi9hcGkvZmlsZXMvaW5zdGFuY2VzL1wiICsgX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvXCIgKyBfaWQgKyBcIj9kb3dubG9hZD10cnVlXCI7XG4gICAgfVxuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLm9wdGlvbnMgPSBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciBvcHRpb25zLCByZWYsIHJldjtcbiAgICBvcHRpb25zID0gZmllbGQgIT0gbnVsbCA/IChyZWYgPSBmaWVsZC5vcHRpb25zKSAhPSBudWxsID8gcmVmLnNwbGl0KFwiXFxuXCIpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIHJldiA9IFtdO1xuICAgIGlmIChvcHRpb25zICE9IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiByZXYucHVzaCh7XG4gICAgICAgICAgbGFiZWw6IGl0ZW0sXG4gICAgICAgICAgdmFsdWU6IGl0ZW1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldjtcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5nZXRQZXJtaXNzaW9ucyA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmICghKChyZWYgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoY29kZSkgOiB2b2lkIDApKSB7XG4gICAgICByZXR1cm4gXCJyZWFkb25seSBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfTtcbn1cblxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUuZXZlbnRzID0ge1xuICAnY2hhbmdlIC5mb3JtLWNvbnRyb2wsLmNoZWNrYm94IGlucHV0LC5hZi1yYWRpby1ncm91cCBpbnB1dCwuYWYtY2hlY2tib3gtZ3JvdXAgaW5wdXQnOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiBJbnN0YW5jZU1hbmFnZXIuaW5zdGFuY2Vmb3JtQ2hhbmdlRXZlbnQoZXZlbnQpO1xuICB9LFxuICAndHlwZWFoZWFkOmNoYW5nZSAuZm9ybS1jb250cm9sJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gSW5zdGFuY2VNYW5hZ2VyLmluc3RhbmNlZm9ybUNoYW5nZUV2ZW50KGV2ZW50KTtcbiAgfSxcbiAgJ2NsaWNrIC5jZlRleHRhcmVhIGEnOiBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuIFN0ZWVkb3Mub3BlbldpbmRvdyhldmVudC50YXJnZXQuaHJlZik7XG4gIH1cbn07XG5cbkluc3RhbmNlZm9ybVRlbXBsYXRlLm9uQ3JlYXRlZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29tcGlsZWQsIGUsIGluc3RhbmNlLCBpbnN0YW5jZUN1c3RvbVRlbXBsYXRlLCBpbnN0YW5jZVZpZXcsIHJlbmRlckZ1bmN0aW9uLCB0ZW1wbGF0ZTtcbiAgaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgaWYgKCFpbnN0YW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB0ZW1wbGF0ZSA9IFRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZShpbnN0YW5jZSk7XG4gIHRyeSB7XG4gICAgY29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRlbXBsYXRlLCB7XG4gICAgICBpc0JvZHk6IHRydWVcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgZSA9IGVycm9yMTtcbiAgICBjb25zb2xlLmxvZyhcIkluc3RhbmNlIFRlbXBsYXRlIEVycm9yXCIsIGUpO1xuICAgIGNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShcIlwiLCB7XG4gICAgICBpc0JvZHk6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZW5kZXJGdW5jdGlvbiA9IGV2YWwoY29tcGlsZWQpO1xuICBpbnN0YW5jZVZpZXcgPSBuZXcgQmxhemUuVmlldyhcImN1c3RvbV9pbnN0YW5jZV90ZW1wbGF0ZVwiLCByZW5kZXJGdW5jdGlvbik7XG4gIGluc3RhbmNlQ3VzdG9tVGVtcGxhdGUgPSBuZXcgQmxhemUuVGVtcGxhdGUoaW5zdGFuY2VWaWV3Lm5hbWUsIHJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlID0gaW5zdGFuY2VDdXN0b21UZW1wbGF0ZTtcbiAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlX2N1c3RvbV90ZW1wbGF0ZS5oZWxwZXJzKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMpO1xufTtcblxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUub25SZW5kZXJlZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VycmVudEFwcHJvdmUsIGN1cnJlbnRTdGVwLCBmb3JtX3ZlcnNpb24sIGZvcm11bGFfZmllbGRzLCBpbnN0YW5jZSwgaW5zdGFuY2VOdW1iZXJGaWVsZHMsIGp1ZGdlLCByZWY7XG4gIGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gIGlmICghaW5zdGFuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKChyZWYgPSAkKFwiaW5wdXRbbmFtZT0naW5zX2FwcGxpY2FudCddXCIpWzBdKSAhPSBudWxsKSB7XG4gICAgcmVmLmRhdGFzZXQudmFsdWVzID0gaW5zdGFuY2UuYXBwbGljYW50O1xuICB9XG4gICQoXCJpbnB1dFtuYW1lPSdpbnNfYXBwbGljYW50J11cIikudmFsKGluc3RhbmNlLmFwcGxpY2FudF9uYW1lKTtcbiAgQXBwcm92ZU1hbmFnZXIuZXJyb3IgPSB7XG4gICAgbmV4dFN0ZXBzOiAnJyxcbiAgICBuZXh0U3RlcFVzZXJzOiAnJ1xuICB9O1xuICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdkcmFmdCcpIHtcbiAgICBJbnN0YW5jZUV2ZW50LmluaXRFdmVudHMoaW5zdGFuY2UuZmxvdyk7XG4gIH1cbiAgaWYgKCFBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KCkpIHtcbiAgICBjdXJyZW50QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSgpO1xuICAgIGluc3RhbmNlTnVtYmVyRmllbGRzID0gJChcIltkYXRhLWZvcm11bGFdXCIsICQoXCIjaW5zdGFuY2Vmb3JtXCIpKTtcbiAgICBpbnN0YW5jZU51bWJlckZpZWxkcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVsZW1lbnQsIHNjaGVtYUtleTtcbiAgICAgIHNjaGVtYUtleSA9IHRoaXMuZGF0YXNldC5zY2hlbWFLZXk7XG4gICAgICBlbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgIGlmICghJCh0aGlzKS52YWwoKSAmJiBzY2hlbWFLZXkgJiYgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKSB7XG4gICAgICAgIHJldHVybiBNZXRlb3IuY2FsbCgnZ2V0SW5zdGFuY2VWYWx1ZXMnLCBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIiksIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgICB2YXIga2V5LCByZWYxO1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKGVycm9yLnJlYXNvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcmVzdWx0W3NjaGVtYUtleV0pIHtcbiAgICAgICAgICAgIGtleSA9IChyZWYxID0gZWxlbWVudC5kYXRhKFwiZm9ybXVsYVwiKSkgIT0gbnVsbCA/IHJlZjEucmVwbGFjZShcImF1dG9fbnVtYmVyKFwiLCBcIlwiKS5yZXBsYWNlKFwiKVwiLCBcIlwiKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGtleSA9IGtleS5yZXBsYWNlKC9cXFwiL2csIFwiXCIpLnJlcGxhY2UoL1xcJy9nLCBcIlwiKTtcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihcIntcIikgPiAtMSkge1xuICAgICAgICAgICAgICBrZXkgPSBrZXkucmVwbGFjZShcIntcIiwgXCJcIikucmVwbGFjZShcIn1cIiwgXCJcIik7XG4gICAgICAgICAgICAgIGtleSA9IGtleS50cmltKCk7XG4gICAgICAgICAgICAgIGtleSA9IEF1dG9Gb3JtLmdldEZpZWxkVmFsdWUoa2V5LCAnaW5zdGFuY2Vmb3JtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSW5zdGFuY2VOdW1iZXJSdWxlcy5pbnN0YW5jZU51bWJlckJ1aWxkZXIoZWxlbWVudCwga2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgIT0gbnVsbCA/IGVsZW1lbnQudmFsKHJlc3VsdFtzY2hlbWFLZXldKS50cmlnZ2VyKFwiY2hhbmdlXCIpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAganVkZ2UgPSBjdXJyZW50QXBwcm92ZS5qdWRnZTtcbiAgICBjdXJyZW50U3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgZm9ybXVsYV9maWVsZHMgPSBGb3JtX2Zvcm11bGEuZ2V0Rm9ybXVsYUZpZWxkVmFyaWFibGUoXCJGb3JtX2Zvcm11bGEuZmllbGRfdmFsdWVzXCIsIGZvcm1fdmVyc2lvbi5maWVsZHMpO1xuICAgIEZvcm1fZm9ybXVsYS5ydW4oXCJcIiwgXCJcIiwgZm9ybXVsYV9maWVsZHMsIEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jLCBmb3JtX3ZlcnNpb24uZmllbGRzKTtcbiAgICByZXR1cm4gU2Vzc2lvbi5zZXQoXCJpbnN0YW5jZV9mb3JtX3ZhbHVlc1wiLCB7XG4gICAgICBpbnN0YW5jZUlkOiBpbnN0YW5jZS5faWQsXG4gICAgICB2YWx1ZXM6IEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jXG4gICAgfSk7XG4gIH1cbn07XG4iLCJJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzID0ge1xyXG5cclxuXHRzaG93TWFpblRpdGxlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLndvcmtmbG93TWFpbkF0dGFjaFRpdGxlLmdldCgpO1xyXG5cdH0sXHJcblx0ZW5hYmxlZF9hZGRfbWFpbl9hdHRhY2htZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGlmICghaW5zKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRpZiAoU2Vzc2lvbiAmJiBTZXNzaW9uLmdldChcImluc3RhbmNlUHJpbnRcIikpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdGlmIChTZXNzaW9uLmdldChcImJveFwiKSAhPSBcImRyYWZ0XCIgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgIT0gXCJpbmJveFwiKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOW3sue7j+e7k+adn+eahOWNleWtkOS4jeiDveaUuemZhOS7tlxyXG5cdFx0aWYgKGlucy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBjdXJyZW50X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcclxuXHJcblx0XHRpZiAoIWN1cnJlbnRfc3RlcClcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdC8vIOWIhuWPkeeahOato+aWh+aIluiAhemZhOS7tuS4jeaYvuekuui9rOS4unBkZuaMiemSrlxyXG5cdFx0Ly8g5aaC5p6c5pyJ5q2j5paH5p2D6ZmQ5YiZ5Li65q2j5paH77yM5ZCm5YiZ5YiG5Y+R5Li66ZmE5Lu2XHJcblx0XHQvLyDliIblj5HnmoTpmYTku7bkuI3lhYHorrjkv67mlLkg5Yig6ZmkIOaWsOWinueJiOacrFxyXG5cdFx0dmFyIG1haW5fYXR0YWNoX2NvdW50ID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcclxuXHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzogaW5zLl9pZCxcclxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcclxuXHRcdH0pLmNvdW50KCk7XHJcblxyXG5cdFx0dmFyIGRpc3RyaWJ1dGVfbWFpbl9hdHRhY2hfY291bnQgPSAwO1xyXG5cclxuXHRcdGlmIChpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlKSB7XHJcblx0XHRcdHZhciBzdGFydF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldFN0YXJ0U3RlcCgpO1xyXG5cdFx0XHRpZiAoc3RhcnRfc3RlcC5jYW5fZWRpdF9tYWluX2F0dGFjaCkge1xyXG5cdFx0XHRcdHZhciBkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50ID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UsXHJcblx0XHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcclxuXHRcdFx0XHR9KS5jb3VudCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9tYWluX2F0dGFjaCA9PSB0cnVlICYmIG1haW5fYXR0YWNoX2NvdW50IDwgMSAmJiBkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50IDwgMSkge1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOato+aWh+acgOWkmuWPquiDveacieS4gOS4qlxyXG5cdFx0aWYgKG1haW5fYXR0YWNoX2NvdW50ID49IDEgfHwgZGlzdHJpYnV0ZV9tYWluX2F0dGFjaF9jb3VudCA+PSAxKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyDlvIDlp4voioLngrnlubbkuJTorr7nva7kuoblj6/ku6XkuIrkvKDmraPmlofmiY3mmL7npLrkuIrkvKDmraPmlofnmoTmjInpkq5cclxuXHRcdHZhciBjdXJyZW50X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcclxuXHRcdGlmIChjdXJyZW50X3N0ZXAgJiYgY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PSBcInN0YXJ0XCIgJiYgY3VycmVudF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoID09IHRydWUpXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblx0fSxcclxuXHJcblx0ZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGlmICghaW5zKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRpZiAoU2Vzc2lvbiAmJiBTZXNzaW9uLmdldChcImluc3RhbmNlUHJpbnRcIikpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdHZhciBmbG93ID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZsb3coaW5zLmZsb3cpO1xyXG5cdFx0aWYgKCFmbG93KVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblxyXG5cdFx0Ly8g5YiG5Y+R5ZCO55qEIOmZhOS7tu+8jOS4jeWPr+S7pee8lui+kS/liKDpmaTvvIzkuZ/kuI3orqnkuIrkvKDmlrDnmoTpmYTku7YsIOa1geeoi+WIl+ihqO+8mua3u+WKoOWxnuaApyDigJjooqvliIblj5HlkI7mmK/lkKblhYHorrjkuIrkvKDpmYTku7bigJkgIzE4MzdcclxuXHRcdGlmIChpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlICYmICFmbG93LnVwbG9hZF9hZnRlcl9iZWluZ19kaXN0cmlidXRlZClcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0aWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpICE9IFwiZHJhZnRcIiAmJiBTZXNzaW9uLmdldChcImJveFwiKSAhPSBcImluYm94XCIpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g5bey57uP57uT5p2f55qE5Y2V5a2Q5LiN6IO95pS56ZmE5Lu2XHJcblx0XHRpZiAoaW5zLnN0YXRlID09IFwiY29tcGxldGVkXCIpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKEluc3RhbmNlTWFuYWdlci5pc0NDKGlucykpIHtcclxuXHRcdFx0dmFyIHN0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q0NTdGVwKCk7XHJcblx0XHRcdGlmIChzdGVwICYmIChzdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdHJ1ZSB8fCBzdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdW5kZWZpbmVkKSlcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xyXG5cdFx0XHRpZiAoY3VycmVudF9zdGVwICYmIChjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PSB0cnVlIHx8IGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHVuZGVmaW5lZCkpXHJcblx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHR9LFxyXG5cclxuXHRtYWluX2F0dGFjaG1lbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgKCFpbnMpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdHZhciBzdGFydF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldFN0YXJ0U3RlcCgpO1xyXG5cclxuXHRcdC8vIOWmguaenOaYr+iiq+WIhuWPkeeahOeUs+ivt+WNleW5tuS4lOacieS/ruaUueato+aWh+eahOadg+mZkO+8jOWImeS8mOWFiOaYvuekuuWOn+eUs+ivt+WNleaWh+S7tlxyXG5cdFx0dmFyIG1haW5fYXR0YWNoID0gbnVsbDtcclxuXHRcdGlmIChpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlICYmIHN0YXJ0X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggPT0gdHJ1ZSkge1xyXG5cdFx0XHRtYWluX2F0dGFjaCA9IGNmcy5pbnN0YW5jZXMuZmluZE9uZSh7XHJcblx0XHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzogaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSxcclxuXHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghbWFpbl9hdHRhY2gpIHtcclxuXHRcdFx0bWFpbl9hdHRhY2ggPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGlucy5faWQsXHJcblx0XHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbWFpbl9hdHRhY2g7XHJcblx0fSxcclxuXHJcblx0bm9ybWFsX2F0dGFjaG1lbnRzOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGlmICghaW5zKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHR2YXIgc2VsZWN0b3IgPSB7XHJcblx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0J21ldGFkYXRhLm1haW4nOiB7XHJcblx0XHRcdFx0JG5lOiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHR9O1xyXG5cclxuXHRcdHZhciBhdHRzID0gbmV3IEFycmF5KCk7XHJcblxyXG5cdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcclxuXHRcdFx0Ly8g5aaC5p6c5piv6KKr5YiG5Y+R55qE55Sz6K+35Y2V77yM5YiZ5pi+56S65Y6f55Sz6K+35Y2V5paH5Lu2LCDlpoLmnpzpgInmi6nkuoblsIbljp/ooajljZXlrZjlgqjkuLrpmYTku7bkuZ/opoHmmL7npLosIOWQjOaXtuS5n+imgeaYvuekuuaWsOS4iuS8oOeahOmZhOS7tlxyXG5cdFx0XHR2YXIgZGZpcyA9IF8uY2xvbmUoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMpIHx8IFtdO1xyXG5cdFx0XHRkZmlzLnB1c2goaW5zLl9pZCk7XHJcblx0XHRcdHNlbGVjdG9yWydtZXRhZGF0YS5pbnN0YW5jZSddID0ge1xyXG5cdFx0XHRcdCRpbjogZGZpc1xyXG5cdFx0XHR9O1xyXG5cclxuXHJcblx0XHRcdHNlbGVjdG9yW1wiJG9yXCJdID0gW3tcclxuXHRcdFx0XHRcIm1ldGFkYXRhLmluc3RhbmNlXCI6IGlucy5faWRcclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdFwibWV0YWRhdGEuaW5zdGFuY2VcIjoge1xyXG5cdFx0XHRcdFx0JGluOiBpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlc1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0XCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcclxuXHRcdFx0XHRcdCRuZTogdHJ1ZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fV1cclxuXHJcblx0XHRcdC8vIOWmguaenOWOn+eUs+ivt+WNleacieato+aWh+S9huaYr+WIhuWPkeWQjuayoeacieato+aWh+adg+mZkO+8jOWImeWOn+eUs+ivt+WNleato+aWh+aYvuekuuWcqOmZhOS7tuagj1xyXG5cdFx0XHR2YXIgc3RhcnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRTdGFydFN0ZXAoKTtcclxuXHRcdFx0aWYgKHN0YXJ0X3N0ZXAgJiYgc3RhcnRfc3RlcC5jYW5fZWRpdF9tYWluX2F0dGFjaCAhPSB0cnVlKSB7XHJcblx0XHRcdFx0dmFyIGRpc3RyaWJ1dGVfbWFpbiA9IGNmcy5pbnN0YW5jZXMuZmluZE9uZSh7XHJcblx0XHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XHJcblx0XHRcdFx0XHRcdCRpbjogaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWUsXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0aWYgKGRpc3RyaWJ1dGVfbWFpbikge1xyXG5cdFx0XHRcdFx0dmFyIGZpcnN0VmVyc2lvbk1haW4gPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoZGlzdHJpYnV0ZV9tYWluLm1ldGFkYXRhLnBhcmVudCk7XHJcblx0XHRcdFx0XHRkaXN0cmlidXRlX21haW4uYXR0YWNobWVudFVwbG9hZGVkQXQgPSBmaXJzdFZlcnNpb25NYWluID8gZmlyc3RWZXJzaW9uTWFpbi51cGxvYWRlZEF0IDogZGlzdHJpYnV0ZV9tYWluLnVwbG9hZGVkQXQ7XHJcblx0XHRcdFx0XHRhdHRzLnB1c2goZGlzdHJpYnV0ZV9tYWluKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNlbGVjdG9yWydtZXRhZGF0YS5pbnN0YW5jZSddID0gaW5zLl9pZDtcclxuXHRcdH1cclxuXHJcblx0XHRjZnMuaW5zdGFuY2VzLmZpbmQoc2VsZWN0b3IpLmZvckVhY2goZnVuY3Rpb24oYykge1xyXG5cdFx0XHR2YXIgZmlyc3RWZXJzaW9uID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKGMubWV0YWRhdGEucGFyZW50KTtcclxuXHRcdFx0Yy5hdHRhY2htZW50VXBsb2FkZWRBdCA9IGZpcnN0VmVyc2lvbiA/IGZpcnN0VmVyc2lvbi51cGxvYWRlZEF0IDogYy51cGxvYWRlZEF0O1xyXG5cdFx0XHRhdHRzLnB1c2goYyk7XHJcblx0XHR9KVxyXG5cclxuXHRcdHJldHVybiBfLnNvcnRCeShhdHRzLCAnYXR0YWNobWVudFVwbG9hZGVkQXQnKTtcclxuXHR9LFxyXG5cclxuXHRzaG93QXR0YWNobWVudHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgKCFpbnMpXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0XHQvLyDlpoLmnpzmmK/ooqvliIblj5HnmoTnlLPor7fljZXvvIzliJnmmL7npLrljp/nlLPor7fljZXmlofku7Yg5ZKM5YiG5Y+R5ZCO55Sz6K+35Y2V5paH5Lu2XHJcblx0XHR2YXIgaW5zdGFuY2VJZHMgPSBfLmNsb25lKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzKSB8fCBbXTtcclxuXHRcdGluc3RhbmNlSWRzLnB1c2goaW5zLl9pZCk7XHJcblx0XHR2YXIgYXR0YWNobWVudHNfY291bnQgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XHJcblx0XHRcdFx0JGluOiBpbnN0YW5jZUlkc1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcclxuXHRcdH0pLmNvdW50KCk7XHJcblxyXG5cdFx0aWYgKFNlc3Npb24gJiYgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpICYmIGF0dGFjaG1lbnRzX2NvdW50IDwgMSlcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0aWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09IFwiZHJhZnRcIiB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PSBcImluYm94XCIgfHwgYXR0YWNobWVudHNfY291bnQgPiAwKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH0sXHJcblxyXG5cdF90OiBmdW5jdGlvbihrZXkpIHtcclxuXHRcdHJldHVybiBUQVBpMThuLl9fKGtleSlcclxuXHR9LFxyXG5cclxuXHRfOiBmdW5jdGlvbihrZXkpIHtcclxuXHRcdHZhciBsb2NhbGU7XHJcblx0XHRpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XHJcblx0XHRcdHJldHVybiBUQVBpMThuLl9fKGtleSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xyXG5cdFx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGZsb3dfZmlsZXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgKCFpbnMpXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdHJldHVybiBjZnMuZmlsZXMuZmluZCh7ICdtZXRhZGF0YS5zcGFjZSc6IGlucy5zcGFjZSwgJ21ldGFkYXRhLm9iamVjdF9uYW1lJzogJ2Zsb3dzJywgJ21ldGFkYXRhLnJlY29yZF9pZCc6IGlucy5mbG93IH0pO1xyXG5cdH0sXHJcblxyXG5cdGlzRHJhZnRBbmRGbG93ZmlsZXNFeGlzdDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRpZiAoIWlucylcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0cmV0dXJuIChTZXNzaW9uLmdldCgnYm94JykgPT0gJ2RyYWZ0JykgJiYgISFjZnMuZmlsZXMuZmluZCh7ICdtZXRhZGF0YS5zcGFjZSc6IGlucy5zcGFjZSwgJ21ldGFkYXRhLm9iamVjdF9uYW1lJzogJ2Zsb3dzJywgJ21ldGFkYXRhLnJlY29yZF9pZCc6IGlucy5mbG93IH0pLmNvdW50KCk7XHJcblx0fVxyXG5cclxuXHJcbn1cclxuXHJcbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLl90ID0gZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpXHJcblx0fVxyXG5cdEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMuZW5hYmxlZF9hZGRfbWFpbl9hdHRhY2htZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHR9O1xyXG5cdEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMuZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHR9O1xyXG5cclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLm1haW5fYXR0YWNobWVudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xyXG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jb21wYWN0KFtpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UsIGluc3RhbmNlLl9pZF0pO1xyXG5cdFx0dmFyIGF0dGFjaG1lbnQgPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoe1xyXG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XHJcblx0XHRcdFx0JGluOiBpbnN0YW5jZUlkc1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIGF0dGFjaG1lbnQ7XHJcblx0fTtcclxuXHJcblx0SW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycy5ub3JtYWxfYXR0YWNobWVudHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzdGVlZG9zRGF0YSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YVxyXG5cdFx0dmFyIGluc3RhbmNlID0gc3RlZWRvc0RhdGEuaW5zdGFuY2U7XHJcblx0XHR2YXIgaW5zdGFuY2VJZHMgPSBfLmNsb25lKGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMpIHx8IFtdO1xyXG5cdFx0aW5zdGFuY2VJZHMucHVzaChpbnN0YW5jZS5faWQpO1xyXG5cdFx0dmFyIGF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcclxuXHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzoge1xyXG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcclxuXHRcdFx0fSxcclxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHtcclxuXHRcdFx0XHQkbmU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0JG9yOiBbe1xyXG5cdFx0XHRcdCdtZXRhZGF0YS5pc19wcml2YXRlJzoge1xyXG5cdFx0XHRcdFx0JG5lOiB0cnVlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0J21ldGFkYXRhLmlzX3ByaXZhdGUnOiB0cnVlLFxyXG5cdFx0XHRcdFwibWV0YWRhdGEub3duZXJcIjogc3RlZWRvc0RhdGEudXNlcklkXHJcblx0XHRcdH1dXHJcblx0XHR9KS5mZXRjaCgpO1xyXG5cclxuXHRcdHJldHVybiBhdHRhY2htZW50cztcclxuXHR9O1xyXG5cclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLnNob3dBdHRhY2htZW50cyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xyXG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jbG9uZShpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzKSB8fCBbXTtcclxuXHRcdGluc3RhbmNlSWRzLnB1c2goaW5zdGFuY2UuX2lkKTtcclxuXHJcblx0XHR2YXIgYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XHJcblx0XHRcdFx0JGluOiBpbnN0YW5jZUlkc1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcclxuXHRcdH0pLmZldGNoKCk7XHJcblxyXG5cdFx0aWYgKGF0dGFjaG1lbnRzICYmIGF0dGFjaG1lbnRzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLnNob3dNYWluVGl0bGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZTtcclxuXHRcdHZhciBpbnN0YW5jZUlkcyA9IF8uY29tcGFjdChbaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlLCBpbnN0YW5jZS5faWRdKTtcclxuXHRcdHZhciBtYWluX2F0dGFjaF9jb3VudCA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XHJcblx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcclxuXHRcdFx0XHQkaW46IGluc3RhbmNlSWRzXHJcblx0XHRcdH0sXHJcblx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlXHJcblx0XHR9KS5jb3VudCgpO1xyXG5cclxuXHRcdHJldHVybiBtYWluX2F0dGFjaF9jb3VudCA+IDBcclxuXHR9XHJcbn1cclxuIiwiSW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzID1cclxuXHRzaG93OiAoc3RlcE5hbWUpLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRpZiBTZXNzaW9uLmdldCgnaW5zdGFuY2VQcmludCcpXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRcdGlmIEluc3RhbmNlTWFuYWdlci5pc0luYm94KClcclxuXHRcdFx0XHRteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKVxyXG5cdFx0XHRcdGlmIG15QXBwcm92ZVxyXG5cdFx0XHRcdFx0aW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdFx0XHRcdG15VHJhY2UgPSBpbnN0YW5jZT8udHJhY2VzPy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIG15QXBwcm92ZS50cmFjZSlcclxuXHRcdFx0XHRcdHJldHVybiBteVRyYWNlPy5uYW1lID09IHN0ZXBOYW1lXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0ZGVmYXVsdERlc2NyaXB0aW9uOiAoKS0+XHJcbiNcdFx0cmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uIHx8IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9kZWZhdWx0X29waW5pb25cIilcclxuXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvblxyXG5cclxuXHR0cmFjZXM6ICgpLT5cclxuXHRcdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKClcclxuXHJcblx0dHJhY2U6IChzdGVwTmFtZSwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduLCB0b3Bfa2V5d29yZHMpLT5cclxuXHRcdGluc3RhbmNlID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnN0YW5jZSgpXHJcblxyXG5cdFx0aXNfY29tcGxldGVkID0gaW5zdGFuY2U/LnN0YXRlID09IFwiY29tcGxldGVkXCJcclxuXHJcblx0XHRjb21wbGV0ZWRfZGF0ZSA9IGlmIGlzX2NvbXBsZXRlZCB0aGVuIF8ubGFzdChpbnN0YW5jZS50cmFjZXMpPy5maW5pc2hfZGF0ZT8uZ2V0VGltZSgpIGVsc2UgMFxyXG5cclxuXHRcdGlmIGlzX2NvbXBsZXRlZCAmJiBpbnN0YW5jZS5maW5pc2hfZGF0ZVxyXG5cdFx0XHRjb21wbGV0ZWRfZGF0ZSA9IGluc3RhbmNlLmZpbmlzaF9kYXRlPy5nZXRUaW1lKClcclxuXHJcblx0XHR0cmFjZXMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpXHJcblxyXG5cdFx0YXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tzdGVwTmFtZV0pXHJcblxyXG5cdFx0YXBwcm92ZV9zb3J0ID0gKGFwcHJvdmVzLCB0b3Bfa2V5d29yZHMpLT5cclxuXHJcbiPlr7lBcHByb3Zlc+aOkuW6j++8jCDmjInnhafmj5DkuqTml7bpl7TmjpLlgJLluo/vvIzlpoLmnpzmsqHmnInmj5DkuqTliJnmmL7npLrlnKjmnIDkuIrovrlcclxuXHRcdFx0YXBwcm92ZXNfc29ydGVkID0gXy5zb3J0QnkgYXBwcm92ZXMsIChhcHByb3ZlKS0+XHJcblx0XHRcdFx0cmV0dXJuIC0oYXBwcm92ZS5maW5pc2hfZGF0ZSB8fCBuZXcgRGF0ZSgpKS5nZXRUaW1lKClcclxuXHJcblx0XHRcdCPpgJrov4flhbPplK7lrZfmjpLluo9cclxuXHRcdFx0aWYgdG9wX2tleXdvcmRzXHJcblx0XHRcdFx0dG9wX2FwcHJvdmVzID0gbmV3IEFycmF5KClcclxuXHJcblx0XHRcdFx0dG9wX2tleXdvcmRzLnNwbGl0KFwiLFwiKS5mb3JFYWNoIChrZXkpIC0+XHJcblx0XHRcdFx0XHR0b3BfYXBwcm92ZXMgPSBfLnVuaW9uIHRvcF9hcHByb3ZlcywgXy5maWx0ZXIoYXBwcm92ZXNfc29ydGVkLCAoYXBwcm92ZSktPlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gYXBwcm92ZT8uaGFuZGxlcl9uYW1lPy5pbmRleE9mKGtleSkgPiAtMVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCMg5a+5572u6aG25oSP6KeB5oyJ54Wn5aSE55CG5LqL5Lu25o6S5YCS5bqPXHJcblx0XHRcdFx0dG9wX2FwcHJvdmVzID0gXy5zb3J0QnkgdG9wX2FwcHJvdmVzLCAodG9wX2FwcHJvdmUpLT5cclxuXHRcdFx0XHRcdHJldHVybiAtKHRvcF9hcHByb3ZlLmZpbmlzaF9kYXRlIHx8IG5ldyBEYXRlKCkpLmdldFRpbWUoKVxyXG5cclxuXHRcdFx0XHRhcHByb3Zlc19zb3J0ZWQgPSBfLnVuaW9uIHRvcF9hcHByb3ZlcywgYXBwcm92ZXNfc29ydGVkXHJcblx0XHRcdHJldHVybiBhcHByb3Zlc19zb3J0ZWQgfHwgW11cclxuXHJcblx0XHRhcHByb3ZlcyA9IF8uZmlsdGVyIGFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRyZXR1cm4gYS50eXBlIGlzbnQgXCJmb3J3YXJkXCIgYW5kIGEudHlwZSBpc250IFwiZGlzdHJpYnV0ZVwiIGFuZCBhLnR5cGUgaXNudCBcInRlcm1pbmF0ZWRcIlxyXG5cclxuXHRcdGlmIG9ubHlfY2Nfb3BpbmlvblxyXG5cdFx0XHRhcHByb3ZlcyA9IGFwcHJvdmVzPy5maWx0ZXJQcm9wZXJ0eShcInR5cGVcIiwgXCJjY1wiKVxyXG5cclxuXHRcdGFwcHJvdmVzX3NvcnRlZCA9IGFwcHJvdmVfc29ydChhcHByb3ZlcywgdG9wX2tleXdvcmRzKVxyXG5cclxuXHRcdGFwcHJvdmVzR3JvdXAgPSBfLmdyb3VwQnkoYXBwcm92ZXMsIFwiaGFuZGxlclwiKTtcclxuXHJcblx0XHRoYXNOZXh0ID0gKGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApIC0+XHJcblx0XHRcdGhhbmRsZXJBcHByb3ZlcyA9IGFwcHJvdmVzR3JvdXBbYXBwcm92ZS5oYW5kbGVyXVxyXG5cdFx0XHRyZXR1cm4gXy5pbmRleE9mKGhhbmRsZXJBcHByb3ZlcywgYXBwcm92ZSkgKyAxIDwgaGFuZGxlckFwcHJvdmVzLmxlbmd0aFxyXG5cclxuXHRcdGhhdmVEZXNjcmlwdGlvbkFwcHJvdmUgPSAoYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkgLT5cclxuXHRcdFx0aGFuZGxlckFwcHJvdmVzID0gYXBwcm92ZXNHcm91cFthcHByb3ZlLmhhbmRsZXJdXHJcblxyXG5cdFx0XHRkZXNjcmlwdGlvbkFwcHJvdmVzID0gXy5maWx0ZXIgaGFuZGxlckFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRcdGlmIGEuZGVzY3JpcHRpb25cclxuXHRcdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRpZiBkZXNjcmlwdGlvbkFwcHJvdmVzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cclxuXHJcblx0XHRhcHByb3Zlc19zb3J0ZWQuZm9yRWFjaCAoYXBwcm92ZSkgLT5cclxuI1x0XHRcdOaciei+k+WFpeaEj+ingSDmiJYg5pyA5paw5LiA5p2h5bm25LiU55So5oi35rKh5pyJ6L6T5YWl6L+H5oSP6KeBXHJcbiNcdFx0XHRpZiAhYXBwcm92ZS5pc19maW5pc2hlZCB8fCBhcHByb3ZlLmRlc2NyaXB0aW9uIHx8ICghaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSAmJiAhaGF2ZURlc2NyaXB0aW9uQXBwcm92ZShhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSlcclxuI1x0XHRcdGlmICFoYXNOZXh0KGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApXHJcblx0XHRcdGlmIGFwcHJvdmUuc2lnbl9zaG93ICE9IGZhbHNlICYmIChhcHByb3ZlLmRlc2NyaXB0aW9uIHx8ICghYXBwcm92ZS5kZXNjcmlwdGlvbiAmJiAhaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSkgKVxyXG5cdFx0XHRcdGlmIGFwcHJvdmUuanVkZ2UgaXNudCAndGVybWluYXRlZCdcclxuXHRcdFx0XHRcdGFwcHJvdmUuX2Rpc3BsYXkgPSB0cnVlXHJcblxyXG5cdFx0YXBwcm92ZXNfc29ydGVkID0gXy5maWx0ZXIgYXBwcm92ZXNfc29ydGVkLCAoYSkgLT5cclxuXHRcdFx0aWYgaXNfY29tcGxldGVkXHJcblx0XHRcdFx0cmV0dXJuIGEuX2Rpc3BsYXkgPT0gdHJ1ZSAmJiBhLmlzX2ZpbmlzaGVkICYmIGEuZmluaXNoX2RhdGU/LmdldFRpbWUoKSA8PSBjb21wbGV0ZWRfZGF0ZVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIGEuX2Rpc3BsYXkgPT0gdHJ1ZVxyXG5cclxuXHRcdHJldHVybiBhcHByb3Zlc19zb3J0ZWRcclxuXHJcblx0aW5jbHVkZTogKGEsIGIpIC0+XHJcblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlKGEsIGIpXHJcblxyXG5cdHVuZW1wdHk6ICh2YWwpLT5cclxuXHRcdHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnVuZW1wdHkodmFsKVxyXG5cclxuXHRmb3JtYXREYXRlOiAoZGF0ZSwgb3B0aW9ucyktPlxyXG5cdFx0aWYgIW9wdGlvbnNcclxuXHRcdFx0b3B0aW9ucyA9IHtcImZvcm1hdFwiOiBcIllZWVktTU0tRERcIn1cclxuXHJcblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtYXREYXRlKGRhdGUsIG9wdGlvbnMpXHJcblxyXG5cdGlzTXlBcHByb3ZlOiAoYXBwcm92ZSwgb25seV9jY19vcGluaW9uKSAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuXHRcdFx0Y3VycmVudEFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKVxyXG5cclxuXHRcdFx0aWYgIWFwcHJvdmU/Ll9pZFxyXG5cdFx0XHRcdGFwcHJvdmUgPSBjdXJyZW50QXBwcm92ZVxyXG5cclxuXHRcdFx0aWYgYXBwcm92ZS5faWQgPT0gY3VycmVudEFwcHJvdmU/Ll9pZCAmJiBjdXJyZW50QXBwcm92ZT8udHlwZSA9PSAnY2MnICYmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lXHJcblx0XHRcdFx0aWYgXy5pbmRleE9mKGN1cnJlbnRBcHByb3ZlPy5vcGluaW9uX2ZpZWxkc19jb2RlLCBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZSkgPiAtMVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRcdGlmICEoY3VycmVudEFwcHJvdmU/LnR5cGUgPT0gJ2NjJykgJiYgb25seV9jY19vcGluaW9uXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRpZiBjdXJyZW50QXBwcm92ZSAmJiBhcHByb3ZlLl9pZCA9PSBjdXJyZW50QXBwcm92ZS5faWRcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdG15QXBwcm92ZURlc2NyaXB0aW9uOiAoYXBwcm92ZUlkKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xyXG5cdFx0XHRcdG15QXBwcm92ZSA9IFRlbXBsYXRlLmluc3RhbmNlKCk/Lm15QXBwcm92ZT8uZ2V0KClcclxuXHRcdFx0XHRpZiBteUFwcHJvdmUgJiYgbXlBcHByb3ZlLmlkID09IGFwcHJvdmVJZFxyXG5cdFx0XHRcdFx0aWYgIW15QXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgfHwgbXlBcHByb3ZlLnNpZ25fZmllbGRfY29kZSA9PSBUZW1wbGF0ZS5pbnN0YW5jZSgpPy5kYXRhPy5uYW1lXHJcblx0XHRcdFx0XHRcdGlmICFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIilcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbXlBcHByb3ZlPy5kZXNjcmlwdGlvbiB8fCBcIlwiXHJcblx0XHRcdFx0XHRcdHJldHVybiBTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIilcclxuXHJcblx0bm93OiAoKS0+XHJcblx0XHRyZXR1cm4gbmV3IERhdGUoKTtcclxuXHJcblx0aXNSZWFkT25seTogKCktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdHJldHVybiBBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KClcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRpc09waW5pb25PZkZpZWxkOiAoYXBwcm92ZSktPlxyXG5cdFx0aWYgYXBwcm92ZS50eXBlID09IFwiY2NcIiAmJiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZVxyXG5cdFx0XHRpZiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZSA9PSBhcHByb3ZlLnNpZ25fZmllbGRfY29kZVxyXG5cdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblxyXG5cdG1hcmtEb3duVG9IdG1sOiAobWFya0Rvd25TdHJpbmcpLT5cclxuXHRcdGlmIG1hcmtEb3duU3RyaW5nXHJcblx0XHRcdHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XHJcblx0XHRcdHJlbmRlcmVyLmxpbmsgPSAoaHJlZiwgdGl0bGUsIHRleHQpIC0+XHJcblx0XHRcdFx0cmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9JyN7aHJlZn0nIHRpdGxlPScje3RpdGxlfSc+I3t0ZXh0fTwvYT5cIlxyXG5cdFx0XHRyZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtyZW5kZXJlcjogcmVuZGVyZXJ9KSlcclxuXHJcblx0c3RlcHM6IChmaWVsZF9mb3JtdWxhLCBzdGVwLCBvbmx5X2NjX29waW5pb24sIGltYWdlX3NpZ24pLT5cclxuXHRcdHN0ZXBzID0gW11cclxuXHRcdGlmICFzdGVwXHJcblx0XHRcdGlmICFmaWVsZF9mb3JtdWxhXHJcblx0XHRcdFx0ZmllbGRfZm9ybXVsYSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk/LmZpZWxkcz8uZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgdGhpcy5uYW1lKS5mb3JtdWxhXHJcblx0XHRcdHN0ZXBzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5nZXRPcGluaW9uRmllbGRTdGVwc05hbWUoZmllbGRfZm9ybXVsYSwgVGVtcGxhdGUuaW5zdGFuY2UoKT8uZGF0YS50b3Bfa2V5d29yZHMpXHJcblx0XHRlbHNlXHJcblx0XHRcdHN0ZXBzID0gW3tzdGVwTmFtZTogc3RlcCwgb25seV9jY19vcGluaW9uOiBvbmx5X2NjX29waW5pb24sIGltYWdlX3NpZ246IGltYWdlX3NpZ259XVxyXG5cdFx0cmV0dXJuIHN0ZXBzXHJcblxyXG5cdGltYWdlU2lnbkRhdGE6IChoYW5kbGVyKSAtPlxyXG5cdFx0cmV0dXJuIHt1c2VyOiBoYW5kbGVyfVxyXG5cclxuXHRzaG93U2lnbkltYWdlOiAoaGFuZGxlciwgaW1hZ2Vfc2lnbikgLT5cclxuXHRcdHNwYWNlVXNlclNpZ24gPSBJbWFnZVNpZ24uaGVscGVycy5zcGFjZVVzZXJTaWduKGhhbmRsZXIpO1xyXG5cclxuXHRcdGlmIHNwYWNlVXNlclNpZ24/LnNpZ24gJiYgaW1hZ2Vfc2lnblxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0Z2V0TGFzdFNpZ25BcHByb3ZlOiAoKS0+XHJcblx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcblx0XHRyZXR1cm4gXy5sYXN0KFRyYWNlc01hbmFnZXIuZ2V0SGFuZGxlclNpZ25TaG93QXBwcm92ZXMgaW5zLCBNZXRlb3IudXNlcklkKCkpXHJcblxyXG5cclxuXHRsYXN0TXlBcHByb3ZlRGVzY3JpcHRpb246ICgpLT5cclxuXHRcdHRyYWNlcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKClcclxuXHRcdGN1cnJlbnRTdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XHJcblx0XHRhcHByb3ZlcyA9IF8uY2xvbmUodHJhY2VzW2N1cnJlbnRTdGVwLm5hbWVdKVxyXG5cclxuXHRcdGFwcHJvdmVzID0gYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoXCJoYW5kbGVyXCIsIE1ldGVvci51c2VySWQoKSlcclxuXHJcblx0XHRpZiBhcHByb3Zlcy5sZW5ndGggPiAxXHJcblx0XHRcdHJldHVybiBhcHByb3Zlc1thcHByb3Zlcy5sZW5ndGggLSAyXT8uZGVzY3JpcHRpb25cclxuXHJcblx0XHRyZXR1cm4gXCJcIjtcclxuXHJcblx0c2hvd0FwcHJvdmU6IChhcHByb3ZlKS0+XHJcblx0XHRpZiAhYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgfHwgYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgPT0gVGVtcGxhdGUuaW5zdGFuY2UoKT8uZGF0YT8ubmFtZVxyXG5cdFx0XHRpZiBhcHByb3ZlPy5pc19yZWFkXHJcblx0XHRcdFx0aWYgYXBwcm92ZS5pc19maW5pc2hlZFxyXG5cdFx0XHRcdFx0cmV0dXJuIFtcImFwcHJvdmVkXCIsIFwicmVqZWN0ZWRcIiwgXCJzdWJtaXR0ZWRcIiwgXCJyZWFkZWRcIl0uaW5jbHVkZXMoYXBwcm92ZS5qdWRnZSlcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0anVkZ2VfZGVzY3JpcHRpb246IChqdWRnZSktPlxyXG5cdFx0cmV0dXJuIHQoanVkZ2UgKyBcIl9kZXNjcmlwdGlvblwiKVxyXG5cclxuXHRpc19hcHByb3ZlZDogKGp1ZGdlKS0+XHJcblx0XHRyZXR1cm4gXCJhcHByb3ZlZFwiID09IGp1ZGdlXHJcblxyXG5cdGlzX3JlamVjdGVkOiAoanVkZ2UpLT5cclxuXHRcdHJldHVybiBcInJlamVjdGVkXCIgPT0ganVkZ2VcclxuXHJcblx0aXNfcmVhZGVkOiAoanVkZ2UpLT5cclxuXHRcdHJldHVybiBbXCJhcHByb3ZlZFwiLCBcInJlamVjdGVkXCIsIFwic3VibWl0dGVkXCIsIFwicmVhZGVkXCJdLmluY2x1ZGVzKGp1ZGdlKVxyXG5cclxuXHRhZGRDbGFzczogKCktPlxyXG5cdFx0bmFtZSA9IFRlbXBsYXRlLmluc3RhbmNlKCk/LmRhdGE/Lm5hbWVcclxuXHRcdHNldFRpbWVvdXQgKCkgLT5cclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0ZWxlbWVudCA9ICQoXCIuYXV0b21hdGljLm9waW5pb24tZmllbGQtXCIgKyBuYW1lKVxyXG5cdFx0XHRcdGlmIGVsZW1lbnQubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0aWYgZWxlbWVudD8uaXMoXCJ0ZFwiKVxyXG5cdFx0XHRcdFx0XHRlbGVtZW50LmFkZENsYXNzKCdmaWVsZC1lZGl0YWJsZScpXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdCQoXCIuaW5zdGFuY2Utc2lnblwiLCBlbGVtZW50KS5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKVxyXG5cdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgZVxyXG5cdFx0LCAxXHJcblx0XHRyZXR1cm4gJydcclxuXHJcbmlmIE1ldGVvci5pc1NlcnZlclxyXG5cdEluc3RhbmNlU2lnblRleHQuaGVscGVycy5kZWZhdWx0RGVzY3JpcHRpb24gPSAtPlxyXG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0cmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uIHx8IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9kZWZhdWx0X29waW5pb25cIiwge30sIGxvY2FsZSkiLCJJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMgPSB7XG4gIHNob3c6IGZ1bmN0aW9uKHN0ZXBOYW1lKSB7XG4gICAgdmFyIGluc3RhbmNlLCBteUFwcHJvdmUsIG15VHJhY2UsIHJlZjtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoJ2luc3RhbmNlUHJpbnQnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoSW5zdGFuY2VNYW5hZ2VyLmlzSW5ib3goKSkge1xuICAgICAgICBteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKTtcbiAgICAgICAgaWYgKG15QXBwcm92ZSkge1xuICAgICAgICAgIGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgICAgbXlUcmFjZSA9IGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgbXlBcHByb3ZlLnRyYWNlKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gKG15VHJhY2UgIT0gbnVsbCA/IG15VHJhY2UubmFtZSA6IHZvaWQgMCkgPT09IHN0ZXBOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZGVmYXVsdERlc2NyaXB0aW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLmRlZmF1bHRfZGVzY3JpcHRpb247XG4gIH0sXG4gIHRyYWNlczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKCk7XG4gIH0sXG4gIHRyYWNlOiBmdW5jdGlvbihzdGVwTmFtZSwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduLCB0b3Bfa2V5d29yZHMpIHtcbiAgICB2YXIgYXBwcm92ZV9zb3J0LCBhcHByb3ZlcywgYXBwcm92ZXNHcm91cCwgYXBwcm92ZXNfc29ydGVkLCBjb21wbGV0ZWRfZGF0ZSwgaGFzTmV4dCwgaGF2ZURlc2NyaXB0aW9uQXBwcm92ZSwgaW5zdGFuY2UsIGlzX2NvbXBsZXRlZCwgcmVmLCByZWYxLCByZWYyLCB0cmFjZXM7XG4gICAgaW5zdGFuY2UgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc3RhbmNlKCk7XG4gICAgaXNfY29tcGxldGVkID0gKGluc3RhbmNlICE9IG51bGwgPyBpbnN0YW5jZS5zdGF0ZSA6IHZvaWQgMCkgPT09IFwiY29tcGxldGVkXCI7XG4gICAgY29tcGxldGVkX2RhdGUgPSBpc19jb21wbGV0ZWQgPyAocmVmID0gXy5sYXN0KGluc3RhbmNlLnRyYWNlcykpICE9IG51bGwgPyAocmVmMSA9IHJlZi5maW5pc2hfZGF0ZSkgIT0gbnVsbCA/IHJlZjEuZ2V0VGltZSgpIDogdm9pZCAwIDogdm9pZCAwIDogMDtcbiAgICBpZiAoaXNfY29tcGxldGVkICYmIGluc3RhbmNlLmZpbmlzaF9kYXRlKSB7XG4gICAgICBjb21wbGV0ZWRfZGF0ZSA9IChyZWYyID0gaW5zdGFuY2UuZmluaXNoX2RhdGUpICE9IG51bGwgPyByZWYyLmdldFRpbWUoKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdHJhY2VzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50cmFjZXMoKTtcbiAgICBhcHByb3ZlcyA9IF8uY2xvbmUodHJhY2VzW3N0ZXBOYW1lXSk7XG4gICAgYXBwcm92ZV9zb3J0ID0gZnVuY3Rpb24oYXBwcm92ZXMsIHRvcF9rZXl3b3Jkcykge1xuICAgICAgdmFyIGFwcHJvdmVzX3NvcnRlZCwgdG9wX2FwcHJvdmVzO1xuICAgICAgYXBwcm92ZXNfc29ydGVkID0gXy5zb3J0QnkoYXBwcm92ZXMsIGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgICAgcmV0dXJuIC0oYXBwcm92ZS5maW5pc2hfZGF0ZSB8fCBuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICB9KTtcbiAgICAgIGlmICh0b3Bfa2V5d29yZHMpIHtcbiAgICAgICAgdG9wX2FwcHJvdmVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRvcF9rZXl3b3Jkcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4gdG9wX2FwcHJvdmVzID0gXy51bmlvbih0b3BfYXBwcm92ZXMsIF8uZmlsdGVyKGFwcHJvdmVzX3NvcnRlZCwgZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgICAgdmFyIHJlZjM7XG4gICAgICAgICAgICByZXR1cm4gKGFwcHJvdmUgIT0gbnVsbCA/IChyZWYzID0gYXBwcm92ZS5oYW5kbGVyX25hbWUpICE9IG51bGwgPyByZWYzLmluZGV4T2Yoa2V5KSA6IHZvaWQgMCA6IHZvaWQgMCkgPiAtMTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0b3BfYXBwcm92ZXMgPSBfLnNvcnRCeSh0b3BfYXBwcm92ZXMsIGZ1bmN0aW9uKHRvcF9hcHByb3ZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0odG9wX2FwcHJvdmUuZmluaXNoX2RhdGUgfHwgbmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBwcm92ZXNfc29ydGVkID0gXy51bmlvbih0b3BfYXBwcm92ZXMsIGFwcHJvdmVzX3NvcnRlZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXBwcm92ZXNfc29ydGVkIHx8IFtdO1xuICAgIH07XG4gICAgYXBwcm92ZXMgPSBfLmZpbHRlcihhcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgcmV0dXJuIGEudHlwZSAhPT0gXCJmb3J3YXJkXCIgJiYgYS50eXBlICE9PSBcImRpc3RyaWJ1dGVcIiAmJiBhLnR5cGUgIT09IFwidGVybWluYXRlZFwiO1xuICAgIH0pO1xuICAgIGlmIChvbmx5X2NjX29waW5pb24pIHtcbiAgICAgIGFwcHJvdmVzID0gYXBwcm92ZXMgIT0gbnVsbCA/IGFwcHJvdmVzLmZpbHRlclByb3BlcnR5KFwidHlwZVwiLCBcImNjXCIpIDogdm9pZCAwO1xuICAgIH1cbiAgICBhcHByb3Zlc19zb3J0ZWQgPSBhcHByb3ZlX3NvcnQoYXBwcm92ZXMsIHRvcF9rZXl3b3Jkcyk7XG4gICAgYXBwcm92ZXNHcm91cCA9IF8uZ3JvdXBCeShhcHByb3ZlcywgXCJoYW5kbGVyXCIpO1xuICAgIGhhc05leHQgPSBmdW5jdGlvbihhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSB7XG4gICAgICB2YXIgaGFuZGxlckFwcHJvdmVzO1xuICAgICAgaGFuZGxlckFwcHJvdmVzID0gYXBwcm92ZXNHcm91cFthcHByb3ZlLmhhbmRsZXJdO1xuICAgICAgcmV0dXJuIF8uaW5kZXhPZihoYW5kbGVyQXBwcm92ZXMsIGFwcHJvdmUpICsgMSA8IGhhbmRsZXJBcHByb3Zlcy5sZW5ndGg7XG4gICAgfTtcbiAgICBoYXZlRGVzY3JpcHRpb25BcHByb3ZlID0gZnVuY3Rpb24oYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkge1xuICAgICAgdmFyIGRlc2NyaXB0aW9uQXBwcm92ZXMsIGhhbmRsZXJBcHByb3ZlcztcbiAgICAgIGhhbmRsZXJBcHByb3ZlcyA9IGFwcHJvdmVzR3JvdXBbYXBwcm92ZS5oYW5kbGVyXTtcbiAgICAgIGRlc2NyaXB0aW9uQXBwcm92ZXMgPSBfLmZpbHRlcihoYW5kbGVyQXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgaWYgKGEuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChkZXNjcmlwdGlvbkFwcHJvdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIGFwcHJvdmVzX3NvcnRlZC5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgIGlmIChhcHByb3ZlLnNpZ25fc2hvdyAhPT0gZmFsc2UgJiYgKGFwcHJvdmUuZGVzY3JpcHRpb24gfHwgKCFhcHByb3ZlLmRlc2NyaXB0aW9uICYmICFoYXNOZXh0KGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApKSkpIHtcbiAgICAgICAgaWYgKGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgICAgIHJldHVybiBhcHByb3ZlLl9kaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGFwcHJvdmVzX3NvcnRlZCA9IF8uZmlsdGVyKGFwcHJvdmVzX3NvcnRlZCwgZnVuY3Rpb24oYSkge1xuICAgICAgdmFyIHJlZjM7XG4gICAgICBpZiAoaXNfY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybiBhLl9kaXNwbGF5ID09PSB0cnVlICYmIGEuaXNfZmluaXNoZWQgJiYgKChyZWYzID0gYS5maW5pc2hfZGF0ZSkgIT0gbnVsbCA/IHJlZjMuZ2V0VGltZSgpIDogdm9pZCAwKSA8PSBjb21wbGV0ZWRfZGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLl9kaXNwbGF5ID09PSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhcHByb3Zlc19zb3J0ZWQ7XG4gIH0sXG4gIGluY2x1ZGU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlKGEsIGIpO1xuICB9LFxuICB1bmVtcHR5OiBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy51bmVtcHR5KHZhbCk7XG4gIH0sXG4gIGZvcm1hdERhdGU6IGZ1bmN0aW9uKGRhdGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIFwiZm9ybWF0XCI6IFwiWVlZWS1NTS1ERFwiXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtYXREYXRlKGRhdGUsIG9wdGlvbnMpO1xuICB9LFxuICBpc015QXBwcm92ZTogZnVuY3Rpb24oYXBwcm92ZSwgb25seV9jY19vcGluaW9uKSB7XG4gICAgdmFyIGN1cnJlbnRBcHByb3ZlLCBpbnM7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICBjdXJyZW50QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSgpO1xuICAgICAgaWYgKCEoYXBwcm92ZSAhPSBudWxsID8gYXBwcm92ZS5faWQgOiB2b2lkIDApKSB7XG4gICAgICAgIGFwcHJvdmUgPSBjdXJyZW50QXBwcm92ZTtcbiAgICAgIH1cbiAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gKGN1cnJlbnRBcHByb3ZlICE9IG51bGwgPyBjdXJyZW50QXBwcm92ZS5faWQgOiB2b2lkIDApICYmIChjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUudHlwZSA6IHZvaWQgMCkgPT09ICdjYycgJiYgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUpIHtcbiAgICAgICAgaWYgKF8uaW5kZXhPZihjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSA6IHZvaWQgMCwgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUpID4gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghKChjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUudHlwZSA6IHZvaWQgMCkgPT09ICdjYycpICYmIG9ubHlfY2Nfb3Bpbmlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudEFwcHJvdmUgJiYgYXBwcm92ZS5faWQgPT09IGN1cnJlbnRBcHByb3ZlLl9pZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBteUFwcHJvdmVEZXNjcmlwdGlvbjogZnVuY3Rpb24oYXBwcm92ZUlkKSB7XG4gICAgdmFyIG15QXBwcm92ZSwgcmVmLCByZWYxLCByZWYyLCByZWYzO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94Jykge1xuICAgICAgICBteUFwcHJvdmUgPSAocmVmID0gVGVtcGxhdGUuaW5zdGFuY2UoKSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLm15QXBwcm92ZSkgIT0gbnVsbCA/IHJlZjEuZ2V0KCkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgIGlmIChteUFwcHJvdmUgJiYgbXlBcHByb3ZlLmlkID09PSBhcHByb3ZlSWQpIHtcbiAgICAgICAgICBpZiAoIW15QXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgfHwgbXlBcHByb3ZlLnNpZ25fZmllbGRfY29kZSA9PT0gKChyZWYyID0gVGVtcGxhdGUuaW5zdGFuY2UoKSkgIT0gbnVsbCA/IChyZWYzID0gcmVmMi5kYXRhKSAhPSBudWxsID8gcmVmMy5uYW1lIDogdm9pZCAwIDogdm9pZCAwKSkge1xuICAgICAgICAgICAgaWYgKCFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChteUFwcHJvdmUgIT0gbnVsbCA/IG15QXBwcm92ZS5kZXNjcmlwdGlvbiA6IHZvaWQgMCkgfHwgXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBub3c6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpO1xuICB9LFxuICBpc1JlYWRPbmx5OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICByZXR1cm4gQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzT3Bpbmlvbk9mRmllbGQ6IGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICBpZiAoYXBwcm92ZS50eXBlID09PSBcImNjXCIgJiYgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUpIHtcbiAgICAgIGlmIChUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZSA9PT0gYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgbWFya0Rvd25Ub0h0bWw6IGZ1bmN0aW9uKG1hcmtEb3duU3RyaW5nKSB7XG4gICAgdmFyIHJlbmRlcmVyO1xuICAgIGlmIChtYXJrRG93blN0cmluZykge1xuICAgICAgcmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcbiAgICAgIHJlbmRlcmVyLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIgKyBocmVmICsgXCInIHRpdGxlPSdcIiArIHRpdGxlICsgXCInPlwiICsgdGV4dCArIFwiPC9hPlwiO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge1xuICAgICAgICByZW5kZXJlcjogcmVuZGVyZXJcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sXG4gIHN0ZXBzOiBmdW5jdGlvbihmaWVsZF9mb3JtdWxhLCBzdGVwLCBvbmx5X2NjX29waW5pb24sIGltYWdlX3NpZ24pIHtcbiAgICB2YXIgcmVmLCByZWYxLCByZWYyLCBzdGVwcztcbiAgICBzdGVwcyA9IFtdO1xuICAgIGlmICghc3RlcCkge1xuICAgICAgaWYgKCFmaWVsZF9mb3JtdWxhKSB7XG4gICAgICAgIGZpZWxkX2Zvcm11bGEgPSAocmVmID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLmZpZWxkcykgIT0gbnVsbCA/IHJlZjEuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgdGhpcy5uYW1lKS5mb3JtdWxhIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgc3RlcHMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmdldE9waW5pb25GaWVsZFN0ZXBzTmFtZShmaWVsZF9mb3JtdWxhLCAocmVmMiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyByZWYyLmRhdGEudG9wX2tleXdvcmRzIDogdm9pZCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RlcHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBzdGVwTmFtZTogc3RlcCxcbiAgICAgICAgICBvbmx5X2NjX29waW5pb246IG9ubHlfY2Nfb3BpbmlvbixcbiAgICAgICAgICBpbWFnZV9zaWduOiBpbWFnZV9zaWduXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiBzdGVwcztcbiAgfSxcbiAgaW1hZ2VTaWduRGF0YTogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIHJldHVybiB7XG4gICAgICB1c2VyOiBoYW5kbGVyXG4gICAgfTtcbiAgfSxcbiAgc2hvd1NpZ25JbWFnZTogZnVuY3Rpb24oaGFuZGxlciwgaW1hZ2Vfc2lnbikge1xuICAgIHZhciBzcGFjZVVzZXJTaWduO1xuICAgIHNwYWNlVXNlclNpZ24gPSBJbWFnZVNpZ24uaGVscGVycy5zcGFjZVVzZXJTaWduKGhhbmRsZXIpO1xuICAgIGlmICgoc3BhY2VVc2VyU2lnbiAhPSBudWxsID8gc3BhY2VVc2VyU2lnbi5zaWduIDogdm9pZCAwKSAmJiBpbWFnZV9zaWduKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZ2V0TGFzdFNpZ25BcHByb3ZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zO1xuICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIHJldHVybiBfLmxhc3QoVHJhY2VzTWFuYWdlci5nZXRIYW5kbGVyU2lnblNob3dBcHByb3ZlcyhpbnMsIE1ldGVvci51c2VySWQoKSkpO1xuICB9LFxuICBsYXN0TXlBcHByb3ZlRGVzY3JpcHRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcHByb3ZlcywgY3VycmVudFN0ZXAsIHJlZiwgdHJhY2VzO1xuICAgIHRyYWNlcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKCk7XG4gICAgY3VycmVudFN0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcbiAgICBhcHByb3ZlcyA9IF8uY2xvbmUodHJhY2VzW2N1cnJlbnRTdGVwLm5hbWVdKTtcbiAgICBhcHByb3ZlcyA9IGFwcHJvdmVzLmZpbHRlclByb3BlcnR5KFwiaGFuZGxlclwiLCBNZXRlb3IudXNlcklkKCkpO1xuICAgIGlmIChhcHByb3Zlcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gKHJlZiA9IGFwcHJvdmVzW2FwcHJvdmVzLmxlbmd0aCAtIDJdKSAhPSBudWxsID8gcmVmLmRlc2NyaXB0aW9uIDogdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfSxcbiAgc2hvd0FwcHJvdmU6IGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICB2YXIgcmVmLCByZWYxO1xuICAgIGlmICghYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgfHwgYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgPT09ICgocmVmID0gVGVtcGxhdGUuaW5zdGFuY2UoKSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLmRhdGEpICE9IG51bGwgPyByZWYxLm5hbWUgOiB2b2lkIDAgOiB2b2lkIDApKSB7XG4gICAgICBpZiAoYXBwcm92ZSAhPSBudWxsID8gYXBwcm92ZS5pc19yZWFkIDogdm9pZCAwKSB7XG4gICAgICAgIGlmIChhcHByb3ZlLmlzX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgcmV0dXJuIFtcImFwcHJvdmVkXCIsIFwicmVqZWN0ZWRcIiwgXCJzdWJtaXR0ZWRcIiwgXCJyZWFkZWRcIl0uaW5jbHVkZXMoYXBwcm92ZS5qdWRnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBqdWRnZV9kZXNjcmlwdGlvbjogZnVuY3Rpb24oanVkZ2UpIHtcbiAgICByZXR1cm4gdChqdWRnZSArIFwiX2Rlc2NyaXB0aW9uXCIpO1xuICB9LFxuICBpc19hcHByb3ZlZDogZnVuY3Rpb24oanVkZ2UpIHtcbiAgICByZXR1cm4gXCJhcHByb3ZlZFwiID09PSBqdWRnZTtcbiAgfSxcbiAgaXNfcmVqZWN0ZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIFwicmVqZWN0ZWRcIiA9PT0ganVkZ2U7XG4gIH0sXG4gIGlzX3JlYWRlZDogZnVuY3Rpb24oanVkZ2UpIHtcbiAgICByZXR1cm4gW1wiYXBwcm92ZWRcIiwgXCJyZWplY3RlZFwiLCBcInN1Ym1pdHRlZFwiLCBcInJlYWRlZFwiXS5pbmNsdWRlcyhqdWRnZSk7XG4gIH0sXG4gIGFkZENsYXNzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmFtZSwgcmVmLCByZWYxO1xuICAgIG5hbWUgPSAocmVmID0gVGVtcGxhdGUuaW5zdGFuY2UoKSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLmRhdGEpICE9IG51bGwgPyByZWYxLm5hbWUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlLCBlbGVtZW50O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZWxlbWVudCA9ICQoXCIuYXV0b21hdGljLm9waW5pb24tZmllbGQtXCIgKyBuYW1lKTtcbiAgICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChlbGVtZW50ICE9IG51bGwgPyBlbGVtZW50LmlzKFwidGRcIikgOiB2b2lkIDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmFkZENsYXNzKCdmaWVsZC1lZGl0YWJsZScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJChcIi5pbnN0YW5jZS1zaWduXCIsIGVsZW1lbnQpLmFkZENsYXNzKCdmaWVsZC1lZGl0YWJsZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coZSk7XG4gICAgICB9XG4gICAgfSwgMSk7XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIEluc3RhbmNlU2lnblRleHQuaGVscGVycy5kZWZhdWx0RGVzY3JpcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbG9jYWxlO1xuICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGU7XG4gICAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uIHx8IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9kZWZhdWx0X29waW5pb25cIiwge30sIGxvY2FsZSk7XG4gIH07XG59XG4iLCJUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzID1cclxuXHRlcXVhbHM6IChhLCBiKSAtPlxyXG5cdFx0YSA9PSBiXHJcblx0ZW1wdHk6IChhKSAtPlxyXG5cdFx0aWYgYVxyXG5cdFx0XHRhLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA8IDFcclxuXHRcdGVsc2VcclxuXHRcdFx0dHJ1ZVxyXG5cdHVuZW1wdHk6IChhKSAtPlxyXG5cdFx0aWYgYVxyXG5cdFx0XHRhLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA+IDBcclxuXHRcdGVsc2VcclxuXHRcdFx0ZmFsc2VcclxuXHJcblx0YXBwZW5kOiAoYSwgYikgLT5cclxuXHRcdGEgKyBiXHJcblxyXG5cdGRhdGVGb3JtYXQ6IChkYXRlKSAtPlxyXG5cdFx0XHRpZiBTdGVlZG9zLmlzTW9iaWxlKCkgJiYgZGF0ZT8uZ2V0RnVsbFllYXIoKSA9PSAobmV3IERhdGUpLmdldEZ1bGxZZWFyKClcclxuXHRcdFx0XHRyZXR1cm4gJC5mb3JtYXQuZGF0ZSBuZXcgRGF0ZShkYXRlKSwgXCJNTS1kZCBISDptbVwiXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXR1cm4gJC5mb3JtYXQuZGF0ZSBuZXcgRGF0ZShkYXRlKSwgXCJ5eXl5LU1NLWRkIEhIOm1tXCJcclxuXHJcblx0Z2V0U3RlcE5hbWU6IChzdGVwSWQpIC0+XHJcblx0XHRzdGVwID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlU3RlcChzdGVwSWQpXHJcblx0XHRpZiBzdGVwXHJcblx0XHRcdHJldHVybiBzdGVwLm5hbWVcclxuXHRcdG51bGxcclxuXHRzaG93RGVsZXRlQnV0dG9uOiAoYXBwcm92ZWQpIC0+XHJcblx0XHRpZiBhcHByb3ZlZCBhbmQgYXBwcm92ZWQudHlwZSA9PSAnY2MnIGFuZCBhcHByb3ZlZC5mcm9tX3VzZXIgPT0gTWV0ZW9yLnVzZXJJZCgpIGFuZCBhcHByb3ZlZC5pc19maW5pc2hlZCAhPSB0cnVlIGFuZCAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRmYWxzZVxyXG5cdGlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbjogKGFwcHJvdmVkKSAtPlxyXG5cdFx0YXBwcm92ZV9hZG1pbnMgPSBNZXRlb3Iuc2V0dGluZ3M/LnB1YmxpYz8ud29ya2Zsb3c/LmFwcHJvdmVfYWRtaW5zXHJcblx0XHRpZiBhcHByb3ZlX2FkbWlucz8ubGVuZ3RoXHJcblx0XHRcdGlzU2hvdyA9IGFwcHJvdmVfYWRtaW5zPy5jb250YWlucyBNZXRlb3IudXNlcklkKClcclxuXHRcdHVubGVzcyBpc1Nob3dcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRyZXR1cm4gYXBwcm92ZWQuaGFuZGxlciA9PSBNZXRlb3IudXNlcklkKClcclxuXHRpc0VkaXRpbmc6ICgpIC0+XHJcblx0XHQgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuaXNfZWRpdGluZz8uZ2V0KClcclxuXHRpc1Nob3dEZXNjcmlwdGlvbjogKGFwcHJvdmVkKS0+XHJcblx0XHQjIGRlYnVnZ2VyXHJcblx0XHRpZiBUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLmlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbiBhcHByb3ZlZFxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0cmV0dXJuIGFwcHJvdmVkLmRlc2NyaXB0aW9uPy50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwXHJcblx0aXNDQzogKGFwcHJvdmVkKSAtPlxyXG5cdFx0aWYgYXBwcm92ZWQgYW5kIGFwcHJvdmVkLnR5cGUgPT0gJ2NjJ1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ZmFsc2VcclxuXHRnZXRBcHByb3ZlU3RhdHVzSWNvbjogKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkgLT5cclxuXHRcdGlmIGF1dG9TdWJtaXR0ZWQgPT0gdHJ1ZVxyXG5cdFx0XHRyZXR1cm4gJ2lvbiBpb24tYW5kcm9pZC1hbGFybS1jbG9jaydcclxuXHRcdCPlt7Lnu5PmnZ/nmoTmmL7npLrkuLrmoLjlh4Yv6amz5ZueL+WPlua2iOeUs+ivt++8jOW5tuaYvuekuuWkhOeQhueKtuaAgeWbvuagh1xyXG5cdFx0YXBwcm92ZVN0YXR1c0ljb24gPSB1bmRlZmluZWRcclxuXHRcdHN3aXRjaCBhcHByb3ZlSnVkZ2VcclxuXHRcdFx0d2hlbiAnYXBwcm92ZWQnXHJcblx0XHRcdFx0IyDlt7LmoLjlh4ZcclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWNoZWNrbWFyay1yb3VuZCdcclxuXHRcdFx0d2hlbiAncmVqZWN0ZWQnXHJcblx0XHRcdFx0IyDlt7LpqbPlm55cclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWNsb3NlLXJvdW5kJ1xyXG5cdFx0XHR3aGVuICd0ZXJtaW5hdGVkJ1xyXG5cdFx0XHRcdCMg5bey5Y+W5raIXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnZmEgZmEtYmFuJ1xyXG5cdFx0XHR3aGVuICdyZWFzc2lnbmVkJ1xyXG5cdFx0XHRcdCMg6L2s562+5qC4XHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1hbmRyb2lkLWNvbnRhY3QnXHJcblx0XHRcdHdoZW4gJ3JlbG9jYXRlZCdcclxuXHRcdFx0XHQjIOmHjeWumuS9jVxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tYXJyb3ctc2hyaW5rJ1xyXG5cdFx0XHR3aGVuICdyZXRyaWV2ZWQnXHJcblx0XHRcdFx0IyDlt7Llj5blm55cclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzSWNvbiA9ICdmYSBmYS11bmRvJ1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnJ1xyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRhcHByb3ZlU3RhdHVzSWNvblxyXG5cdGdldEFwcHJvdmVTdGF0dXNUZXh0OiAoYXBwcm92ZUp1ZGdlLCBhdXRvU3VibWl0dGVkKSAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHRcdFx0aWYgbG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xyXG5cdFx0XHRcdGxvY2FsZSA9IFwiemgtQ05cIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpXHJcblx0XHQj5bey57uT5p2f55qE5pi+56S65Li65qC45YeGL+mps+Wbni/lj5bmtojnlLPor7fvvIzlubbmmL7npLrlpITnkIbnirbmgIHlm77moIdcclxuXHRcdGlmIGF1dG9TdWJtaXR0ZWQgPT0gdHJ1ZVxyXG5cdFx0XHRyZXR1cm4gVEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92ZV90aW1lb3V0X2F1dG9fc3VibWl0dGVkJywge30sIGxvY2FsZSlcclxuXHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gdW5kZWZpbmVkXHJcblx0XHRzd2l0Y2ggYXBwcm92ZUp1ZGdlXHJcblx0XHRcdHdoZW4gJ2FwcHJvdmVkJ1xyXG5cdFx0XHRcdCMg5bey5qC45YeGXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSBhcHByb3ZlZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdHdoZW4gJ3JlamVjdGVkJ1xyXG5cdFx0XHRcdCMg5bey6amz5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWplY3RlZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdHdoZW4gJ3Rlcm1pbmF0ZWQnXHJcblx0XHRcdFx0IyDlt7Llj5bmtohcclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHRlcm1pbmF0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZWFzc2lnbmVkJ1xyXG5cdFx0XHRcdCMg6L2s562+5qC4XHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWFzc2lnbmVkJywge30sIGxvY2FsZSlcclxuXHRcdFx0d2hlbiAncmVsb2NhdGVkJ1xyXG5cdFx0XHRcdCMg6YeN5a6a5L2NXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWxvY2F0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZXRyaWV2ZWQnXHJcblx0XHRcdFx0IyDlt7Llj5blm55cclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJldHJpZXZlZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdHdoZW4gJ3JldHVybmVkJ1xyXG5cdFx0XHRcdCMg5bey6YCA5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZXR1cm5lZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdHdoZW4gJ3JlYWRlZCdcclxuXHRcdFx0XHQjIOW3sumYhVxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVhZGVkJywge30sIGxvY2FsZSlcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gJydcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0YXBwcm92ZVN0YXR1c1RleHRcclxuXHRcclxuXHRnZXRBcHByb3ZlSnVkZ2VDbGFzczogKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkgLT5cclxuXHRcdGlmIGF1dG9TdWJtaXR0ZWQgPT0gdHJ1ZVxyXG5cdFx0XHRyZXR1cm4gJ2F1dG9TdWJtaXR0ZWQnXHJcblx0XHRyZXR1cm4gYXBwcm92ZUp1ZGdlXHJcblxyXG5cdF90OiAoa2V5KS0+XHJcblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXkpXHJcblxyXG5cdG15QXBwcm92ZURlc2NyaXB0aW9uOiAoYXBwcm92ZUlkKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xyXG5cdFx0XHRcdG15QXBwcm92ZSA9IFRlbXBsYXRlLmluc3RhbmNlKCk/Lm15QXBwcm92ZT8uZ2V0KClcclxuXHRcdFx0XHRpZiBteUFwcHJvdmUgJiYgbXlBcHByb3ZlLmlkID09IGFwcHJvdmVJZFxyXG5cdFx0XHRcdFx0aWYgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VfbXlfYXBwcm92ZV9kZXNjcmlwdGlvblwiKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbXlBcHByb3ZlPy5kZXNjcmlwdGlvbiB8fCBcIlwiXHJcblx0XHRcdFx0XHRyZXR1cm4gU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpXHJcblx0aXNGb3J3YXJkOiAoYXBwcm92ZWQpIC0+XHJcblx0XHRpZiBhcHByb3ZlZCBhbmQgYXBwcm92ZWQudHlwZSA9PSAnZm9yd2FyZCdcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGZhbHNlXHJcblx0c2hvd0ZvcndhcmREZWxldGVCdXR0b246IChhcHByb3ZlKSAtPlxyXG5cdFx0aWYgZGIuaW5zdGFuY2VzLmZpbmQoYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlKS5jb3VudCgpIGlzIDBcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRpZiBhcHByb3ZlIGFuZCBhcHByb3ZlLnR5cGUgPT0gJ2ZvcndhcmQnIGFuZCBhcHByb3ZlLmZyb21fdXNlciA9PSBNZXRlb3IudXNlcklkKCkgYW5kICFTZXNzaW9uLmdldChcImluc3RhbmNlUHJpbnRcIikgYW5kIGFwcHJvdmUuanVkZ2UgaXNudCAndGVybWluYXRlZCdcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGZhbHNlXHJcblx0bWFya0Rvd25Ub0h0bWw6IChtYXJrRG93blN0cmluZyktPlxyXG5cdFx0aWYgbWFya0Rvd25TdHJpbmdcclxuXHRcdFx0cmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcclxuXHRcdFx0cmVuZGVyZXIubGluayA9ICggaHJlZiwgdGl0bGUsIHRleHQgKSAtPlxyXG5cdFx0XHRcdHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPScje2hyZWZ9JyB0aXRsZT0nI3t0aXRsZX0nPiN7dGV4dH08L2E+XCJcclxuXHRcdFx0cmV0dXJuIFNwYWNlYmFycy5TYWZlU3RyaW5nKE1hcmtkb3duKG1hcmtEb3duU3RyaW5nLCB7cmVuZGVyZXI6cmVuZGVyZXJ9KSlcclxuXHRpc0Rpc3RyaWJ1dGU6IChhcHByb3ZlKSAtPlxyXG5cdFx0aWYgYXBwcm92ZSBhbmQgYXBwcm92ZS50eXBlID09ICdkaXN0cmlidXRlJ1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ZmFsc2VcclxuXHRzaG93RGlzdHJpYnV0ZURlbGV0ZUJ1dHRvbjogKGFwcHJvdmUpIC0+XHJcblx0XHRpZiBkYi5pbnN0YW5jZXMuZmluZChhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpLmNvdW50KCkgaXMgMFxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRpZiBhcHByb3ZlIGFuZCBhcHByb3ZlLnR5cGUgPT0gJ2Rpc3RyaWJ1dGUnIGFuZCAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpIGFuZCBhcHByb3ZlLmp1ZGdlIGlzbnQgJ3Rlcm1pbmF0ZWQnIGFuZCBTdGVlZG9zLmhhc0ZlYXR1cmUoJ2ZpbGVfZGlzdHJpYnV0aW9uJywgU3RlZWRvcy5nZXRTcGFjZUlkKCkpXHJcblx0XHRcdCMg5rWB56iL566h55CG5ZGY5ZKM57O757uf566h55CG5ZGY77yM5Y+v5Lul5omn6KGM5Lu75L2V5oOF5Ya15LiL55qE5paH5Lu25Y+W5raI5YiG5Y+RXHJcblx0XHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGFwcHJvdmUuaW5zdGFuY2V9LCB7ZmllbGRzOiB7ZmxvdzogMSwgc3BhY2U6IDF9fSlcclxuXHRcdFx0aWYgaW5zIGFuZCBpbnMuZmxvdyBhbmQgaW5zLnNwYWNlXHJcblx0XHRcdFx0aWYgV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgTWV0ZW9yLnVzZXJJZCgpKVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblx0XHRcdGlmIGFwcHJvdmUuZnJvbV91c2VyID09IE1ldGVvci51c2VySWQoKVxyXG5cdFx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdFx0ZmFsc2VcclxuXHJcblx0ZmluaXNoRGF0ZVNjaGVtYTogKCkgLT5cclxuXHRcdGlmIFN0ZWVkb3MuaXNBbmRyb2lkT3JJT1MoKVxyXG5cdFx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYSh7XHJcblx0XHRcdFx0ZmluaXNoX2RhdGU6IHtcclxuXHRcdFx0XHRcdGF1dG9mb3JtOiB7XHJcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGF0ZXRpbWUtbG9jYWxcIlxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdG9wdGlvbmFsOiBmYWxzZSxcclxuXHRcdFx0XHRcdHR5cGU6IERhdGVcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKHtcclxuXHRcdFx0XHRmaW5pc2hfZGF0ZToge1xyXG5cdFx0XHRcdFx0YXV0b2Zvcm06IHtcclxuXHRcdFx0XHRcdFx0dHlwZTogXCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcIlxyXG5cdFx0XHRcdFx0XHRyZWFkb25seTogdHJ1ZVxyXG5cdFx0XHRcdFx0XHRkYXRlVGltZVBpY2tlck9wdGlvbnM6e1xyXG5cdFx0XHRcdFx0XHRcdGZvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCIsXHJcblx0XHRcdFx0XHRcdFx0aWdub3JlUmVhZG9ubHk6dHJ1ZSxcclxuXHRcdFx0XHRcdFx0XHRsb2NhbGU6IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIiksXHJcblx0XHRcdFx0XHRcdFx0d2lkZ2V0UG9zaXRpb25pbmc6e1xyXG5cdFx0XHRcdFx0XHRcdFx0aG9yaXpvbnRhbDogJ3JpZ2h0J1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdG9wdGlvbmFsOiBmYWxzZSxcclxuXHRcdFx0XHRcdHR5cGU6IERhdGVcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblxyXG5cdGZpbmlzaERhdGVWYWx1ZXM6ICgpIC0+XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRmaW5pc2hfZGF0ZTp0aGlzLmZpbmlzaF9kYXRlXHJcblx0XHR9O1xyXG5cclxuXHQjIyNcclxuICAgIFx05q2k5Ye95pWw55So5LqO5o6n5Yi25piv5ZCm5pi+56S6dHJhY2VzIHZpZXdcclxuICAgIFx0dHJ1ZTog5pi+56S6dHJhY2VzIHZpZXcs562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCO5piv55u05o6l5a6a5L2N5YiwdHJhY2VzIHZpZXdcclxuICAgIFx0ZmFsc2U6IOS4jeaYvuekunRyYWNlcyB2aWV377yM562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCOLOS7pU1vZGFsIOaWueW8j+aYvuekunRyYWNlcyB2aWV3XHJcblx0IyMjXHJcblx0c2hvd1RyYWNlc1ZpZXc6IChmb3JtLCBmb3JtX3ZlcnNpb24pLT5cclxuI1x0XHRyZXR1cm4gIShJbnN0YW5jZU1hbmFnZXIuaXNUYWJsZVN0eWxlKGZvcm0pICYmIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5jbHVkZXNPcGluaW9uRmllbGQoZm9ybSwgZm9ybV92ZXJzaW9uKSlcclxuXHJcblx0XHRzaG93X21vZGFsX3RyYWNlc19saXN0ID0gZGIuc3BhY2Vfc2V0dGluZ3MuZmluZE9uZSh7c3BhY2U6IFNlc3Npb24uZ2V0KFwic3BhY2VJZFwiKSwga2V5OiBcInNob3dfbW9kYWxfdHJhY2VzX2xpc3RcIn0pPy52YWx1ZXMgfHwgZmFsc2VcclxuXHJcblx0XHRyZXR1cm4gIXNob3dfbW9kYWxfdHJhY2VzX2xpc3RcclxuXHJcblx0Z2V0SW5zdGFuY2VTdGF0ZVRleHQ6IChpbnN0YW5jZV9pZCktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHRcdFx0aWYgbG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xyXG5cdFx0XHRcdGxvY2FsZSA9IFwiemgtQ05cIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VfaWR9LCB7ZmllbGRzOiB7c3RhdGU6IDEsIGlzX3JlYWQ6IDF9fSlcclxuXHRcdGlmIG5vdCBpbnNcclxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oJ2luc3RhbmNlX2RlbGV0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cclxuXHRcdHRleHQgPSAnJ1xyXG5cdFx0aWYgaW5zLnN0YXRlIGlzICdjb21wbGV0ZWQnXHJcblx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdjb21wbGV0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0ZWxzZSBpZiBpbnMuc3RhdGUgaXMgJ3BlbmRpbmcnXHJcblx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdwZW5kaW5nJywge30sIGxvY2FsZSlcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdkcmFmdCdcclxuXHRcdFx0aWYgaW5zLmlzX3JlYWRcclxuXHRcdFx0XHR0ZXh0ID0gVEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92ZV9yZWFkJywge30sIGxvY2FsZSlcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX25vdF95ZXRfaGFuZGxlZCcsIHt9LCBsb2NhbGUpXHJcblxyXG5cdFx0cmV0dXJuIHRleHRcclxuXHJcblx0Z2V0SW5zdGFuY2VTdGF0ZUNvbG9yOiAoaW5zdGFuY2VfaWQpLT5cclxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlX2lkfSwge2ZpZWxkczoge3N0YXRlOiAxLCBpc19yZWFkOiAxfX0pXHJcblx0XHRpZiBub3QgaW5zXHJcblx0XHRcdHJldHVybiBcIlwiXHJcblxyXG5cdFx0Y2xhID0gJydcclxuXHRcdGlmIGlucy5zdGF0ZSBpcyAnZHJhZnQnXHJcblx0XHRcdGlmIGlucy5pc19yZWFkXHJcblx0XHRcdFx0Y2xhID0gJ2JsdWUnXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRjbGEgPSAncmVkJ1xyXG5cdFx0cmV0dXJuIGNsYVxyXG5cclxuXHRmaXJzdFRyYWNlOiAoaW5kZXgpLT5cclxuXHRcdHJldHVybiBpbmRleCBpcyAwXHJcblxyXG5cdGxhc3RfZGlzdHJpYnV0ZV9mcm9tOiAoaW5zdGFuY2VfaWQpLT5cclxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlX2lkLCBkaXN0cmlidXRlX2Zyb21faW5zdGFuY2U6IHskZXhpc3RzOiB0cnVlfX0se2ZpZWxkczp7Y3JlYXRlZDogMSwgY3JlYXRlZF9ieTogMX19KVxyXG5cdFx0aWYgaW5zXHJcblx0XHRcdGRpc19pbmZvID0ge31cclxuXHRcdFx0dXNlciA9IHt9XHJcblx0XHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRcdHVzZXIgPSBVVWZsb3dfYXBpLmdldE5hbWVGb3JVc2VyKGlucy5jcmVhdGVkX2J5KVxyXG5cdFx0XHRlbHNlIGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRcdHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtfaWQ6IGlucy5jcmVhdGVkX2J5fSwge2ZpZWxkczoge25hbWU6IDF9fSlcclxuXHJcblx0XHRcdGlmIHVzZXIubmFtZVxyXG5cdFx0XHRcdGRpc19pbmZvLmZyb21fdXNlciA9IHVzZXIuX2lkXHJcblx0XHRcdFx0ZGlzX2luZm8uZnJvbV91c2VyX25hbWUgPSB1c2VyLm5hbWVcclxuXHRcdFx0XHRkaXNfaW5mby5jcmVhdGVkID0gaW5zLmNyZWF0ZWRcclxuXHJcblx0XHRcdGlmIG5vdCBfLmlzRW1wdHkoZGlzX2luZm8pXHJcblx0XHRcdFx0cmV0dXJuIGRpc19pbmZvXHJcblx0XHRyZXR1cm5cclxuXHJcblx0aXNDQ09yRGlzdHJpYnV0ZU9yRm9yd2FyZFRlcm1pbmF0ZWQ6IChhcHByb3ZlKS0+XHJcblx0XHRpZiAoYXBwcm92ZS50eXBlIGlzICdjYycgb3IgYXBwcm92ZS50eXBlIGlzICdkaXN0cmlidXRlJyBvciBhcHByb3ZlLnR5cGUgaXMgJ2ZvcndhcmQnKSBhbmQgYXBwcm92ZS5qdWRnZSBpcyAndGVybWluYXRlZCdcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRqdWRnZVRlcm1pbmF0ZWQ6IChqdWRnZSktPlxyXG5cdFx0cmV0dXJuIGp1ZGdlIGlzICd0ZXJtaW5hdGVkJ1xyXG5cclxuXHRpbnN0YW5jZUV4aXN0czogKGluc3RhbmNlX2lkKS0+XHJcblx0XHRyZXR1cm4gISFkYi5pbnN0YW5jZXMuZmluZChpbnN0YW5jZV9pZCkuY291bnQoKVxyXG5cclxuXHRhZ2VudERlc2NyaXB0aW9uOiAodXNlck5hbWUpLT5cclxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblx0XHRcdGlmIGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcclxuXHRcdFx0XHRsb2NhbGUgPSBcInpoLUNOXCJcclxuXHRcdGVsc2VcclxuXHRcdFx0bG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKVxyXG5cclxuXHRcdHJldHVybiBUQVBpMThuLl9fKCdwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXNfZGVzY3JpcHRpb24nLCB7dXNlck5hbWU6IHVzZXJOYW1lfSwgbG9jYWxlKVxyXG5cdFxyXG5cdHRyYWNlTmFtZTogKGluc3RhbmNlX2lkLCB0cmFjZUlkKS0+XHJcblx0XHRyZXR1cm4gXy5maW5kKGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkLCB7ZmllbGRzOiB7dHJhY2VzOiAxfX0pPy50cmFjZXMsICh0cmFjZSktPlxyXG5cdFx0XHRcdFx0cmV0dXJuIHRyYWNlLl9pZCA9PSAgdHJhY2VJZFxyXG5cdFx0KT8ubmFtZVxyXG5cclxuXHRvYmplY3RVcmw6IChvYmplY3RfbmFtZSwgcmVjb3JkX2lkLCBhcHBfaWQpLT5cclxuXHRcdHJldHVybiBDcmVhdG9yLmdldE9iamVjdFVybChvYmplY3RfbmFtZSwgcmVjb3JkX2lkLCBhcHBfaWQpXHJcblxyXG5pZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLmRhdGVGb3JtYXQgPSAoZGF0ZSktPlxyXG5cdFx0aWYgZGF0ZVxyXG5cdFx0XHR1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0XHJcblx0XHRcdHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZShkYXRlLCB1dGNPZmZzZXQpO1xyXG5cclxuXHRUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLl90ID0gKGtleSktPlxyXG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKVxyXG5cclxuXHRUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLnNob3dEZWxldGVCdXR0b24gPSAoYXBwcm92ZWQpIC0+XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5UcmFjZXNUZW1wbGF0ZS5ldmVudHMgPVxyXG5cdCdjbGljayAuY2MtYXBwcm92ZS1yZW1vdmUnOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuXHRcdGlmIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYWxsaW5nICogMSAhPSAxXHJcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYWxsaW5nID0gMVxyXG5cdFx0XHQkKFwiaVwiLGV2ZW50LmN1cnJlbnRUYXJnZXQpLmFkZENsYXNzKFwiZmEtc3BpblwiKVxyXG5cdFx0XHRpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKVxyXG5cdFx0XHRhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlXHJcblx0XHRcdCMgQ0FMTCDliKDpmaRhcHByb3Zl5Ye95pWw44CCXHJcblx0XHRcdCQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0XHRNZXRlb3IuY2FsbCAnY2NfcmVtb3ZlJywgaW5zdGFuY2VJZCwgYXBwcm92ZUlkLCAoZXJyLCByZXN1bHQpIC0+XHJcblx0XHRcdFx0JChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRcdFx0aWYgZXJyXHJcblx0XHRcdFx0XHR0b2FzdHIuZXJyb3IgZXJyXHJcblx0XHRcdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDBcclxuXHRcdFx0XHRcdCQoXCJpXCIsZXZlbnQuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoXCJmYS1zcGluXCIpXHJcblx0XHRcdFx0aWYgcmVzdWx0ID09IHRydWVcclxuXHRcdFx0XHRcdHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJyZW1vdmVfY2NfYXBwcm92ZVwiKSk7XHJcblx0XHRcdFx0XHRpZiAkKFwiLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbFwiKS5sZW5ndGhcclxuXHRcdFx0XHRcdFx0TW9kYWwuaGlkZSBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiXHJcblx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHQnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWNjLWFwcHJvdmUtcmVtb3ZlJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpXHJcblx0XHRhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlXHJcblx0XHQjIENBTEwg5Yig6ZmkYXBwcm92ZeWHveaVsOOAglxyXG5cdFx0JChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRNZXRlb3IuY2FsbCAnY2NfcmVtb3ZlJywgaW5zdGFuY2VJZCwgYXBwcm92ZUlkLCAoZXJyLCByZXN1bHQpIC0+XHJcblx0XHRcdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0XHRpZiBlcnJcclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IgZXJyXHJcblx0XHRcdGlmIHJlc3VsdCA9PSB0cnVlXHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcInJlbW92ZV9jY19hcHByb3ZlXCIpKTtcclxuXHRcdFx0XHRNb2RhbC5oaWRlIFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCJcclxuXHRcdFx0cmV0dXJuXHJcblx0XHRyZXR1cm5cclxuXHJcblx0J2NsaWNrIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyBQQ+S4iumTvuaOpeWFgeiuuOebtOaOpeeCueW8gO+8jOS4jeWGjeaJk+W8gOetvuaJueWOhueoi+ivpue7hlxyXG5cdFx0dW5sZXNzICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiYS5idG4tbGlua1wiKS5sZW5ndGhcclxuXHRcdFx0TW9kYWwuc2hvdyBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiLCB0aGlzXHJcblxyXG5cdCd0YXBob2xkIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyDmiYvmnLrkuIrplb/mjInmiZPlvIDnrb7mibnljobnqIvor6bnu4bvvIzlpoLmnpzmmK/pk77mjqXplb/mjInmiZPlvIDlkI7kuIDmlL7miYvnqpflj6PlsLHlj4jlhbPmjonkuobvvIzmiYDku6XkuI3orqnpk77mjqXmiZPlvIDnrb7mibnljobnqIvor6bnu4ZcclxuXHRcdHVubGVzcyAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcImEuYnRuLWxpbmtcIikubGVuZ3RoXHJcblx0XHRcdE1vZGFsLnNob3cgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIiwgdGhpc1xyXG5cclxuXHQnY2xpY2sgLmFwcHJvdmUtaXRlbSBhLmJ0bi1saW5rLC5hcHByb3ZlLWRlc2NyaXB0aW9uIGEuYnRuLWxpbmssLmFwcHJvdmUtaXRlbS1kaXN0cmlidXRlIGEuYnRuLWxpbmsnOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyDmiYvmnLrkuIrngrnlh7vpk77mjqXvvIzlvLnlh7rmlrDnqpflj6PvvIzkuI3mlK/mjIHvvIzlm6DkuLphbmRyb2lk5LiK5Lya5by55Ye655m75b2V55WM6Z2iXHJcblx0XHRpZiBTdGVlZG9zLmlzTW9iaWxlKClcclxuXHRcdFx0dXNlcklkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQ/LnRhcmdldF91c2VyX2lkXHJcblx0XHRcdENyZWF0b3Iub3BlblNhZmVPYmplY3RVcmwoJ3VzZXJzJywgdXNlcklkKVxyXG5cclxuXHQndGFwZW5kIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyDkuIrov7Dplb/mjInmiZPlvIBhcHByb3Zl6K+m57uG56qX5Y+j55qE5LqL5Lu2dGFwaG9sZOS8muinpuWPkeaJk+W8gOeql+WPo+WQjueahHRvdWNoZW5k5LqL5Lu277yM6YCg5oiQ6ZW/5oyJ5omT5byA56qX5Y+j5ZCO5LiA5pS+5omL56qX5Y+j5bCx5Y+I5YWz5o6J5LqGXHJcblx0XHQjIOi/memHjOWPquiDvemAmui/h+mYu+atonRhcGVuZOS6i+S7tijkuI3lj6/ku6XnlKh0b3VjaGVuZOS6i+S7tu+8jOWboOS4uuS8muW9seWTjXRhcGhvbGTlip/og73vvIzpgKDmiJDmsqHmnInplb/mjInmlYjmnpzml7bkuZ/kvJrop6blj5F0YXBob2xk5LqL5Lu2KeWGkuazoeadpemBv+WFjemXrumimOOAglxyXG5cdFx0IyDpk77mjqXlhYHorrjnm7TmjqXngrnlvIBcclxuXHRcdHVubGVzcyAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcImEuYnRuLWxpbmtcIikubGVuZ3RoXHJcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdCdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZm9yd2FyZC1hcHByb3ZlLXJlbW92ZSc6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblx0XHRpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKVxyXG5cdFx0YXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZVxyXG5cdFx0dHJhY2VJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LnRyYWNlXHJcblx0XHQjIENBTEwg5Yig6ZmkYXBwcm92ZeWHveaVsOOAglxyXG5cdFx0JChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRNZXRlb3IuY2FsbCAnZm9yd2FyZF9yZW1vdmUnLCBpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIChlcnIsIHJlc3VsdCkgLT5cclxuXHRcdFx0JChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRcdGlmIGVyclxyXG5cdFx0XHRcdHRvYXN0ci5lcnJvciBUQVBpMThuLl9fKGVyci5yZWFzb24pXHJcblx0XHRcdGlmIHJlc3VsdCA9PSB0cnVlXHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcImluc3RhbmNlX2FwcHJvdmVfZm9yd2FyZF9yZW1vdmVfc3VjY2Vzc1wiKSk7XHJcblx0XHRcdFx0TW9kYWwuaGlkZSBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiXHJcblx0XHRcdHJldHVyblxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdCdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZm9yd2FyZC1pbnN0YW5jZS1sb29rJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdGZvcndhcmRfc3BhY2UgPSBldmVudC50YXJnZXQuZGF0YXNldC5mb3J3YXJkc3BhY2VcclxuXHRcdGZvcndhcmRfaW5zdGFuY2UgPSBldmVudC50YXJnZXQuZGF0YXNldC5mb3J3YXJkaW5zdGFuY2VcclxuXHRcdFN0ZWVkb3Mub3BlbldpbmRvdyhTdGVlZG9zLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIgKyBmb3J3YXJkX3NwYWNlICsgXCIvdmlldy9yZWFkb25seS9cIiArIGZvcndhcmRfaW5zdGFuY2UpKVxyXG5cclxuXHQnY2xpY2sgLmJ0bi1tb2RpZmljYXRpb24nXHQ6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblx0XHR0ZW1wbGF0ZS5pc19lZGl0aW5nLnNldCghdGVtcGxhdGUuaXNfZWRpdGluZy5nZXQoKSk7XHJcblx0XHR1bmxlc3MgU3RlZWRvcy5pc0FuZHJvaWRPcklPUygpXHJcblx0XHRcdFRyYWNrZXIuYWZ0ZXJGbHVzaCAtPlxyXG5cdFx0XHRcdCMg5pi+56S65pel5b+X55qE5pe25YCZ5oqK5rua5Yqo5p2h5b6A5LiL56e754K577yM6K6p5pel5pyf5o6n5Lu25pi+56S65Ye65LiA6YOo5YiG77yM5Lul6YG/5YWN55So5oi355yL5LiN5Yiw5pel5pyf5o6n5Lu2XHJcblx0XHRcdFx0JChcIiNpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWwgI2ZpbmlzaF9pbnB1dFwiKS5vbiBcImRwLnNob3dcIiwgKCkgLT5cclxuXHRcdFx0XHRcdCQoXCIubW9kYWwtYm9keVwiKS5zY3JvbGxUb3AoMTAwKVxyXG5cclxuXHQnY2xpY2sgLmJ0bi1jYW5jZWxCdXQnIDogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHJcblx0XHR0ZW1wbGF0ZS5pc19lZGl0aW5nLnNldCghdGVtcGxhdGUuaXNfZWRpdGluZy5nZXQoKSk7XHJcblxyXG5cdCdjbGljayAuYnRuLXNhdmVCdXQnIDogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdCMgdGVtcGxhdGUuaXNfZWRpdGluZy5zZXQoIXRlbXBsYXRlLmlzX2VkaXRpbmcuZ2V0KCkpXHJcblxyXG5cdFx0aW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJylcclxuXHRcdGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmVcclxuXHRcdHRyYWNlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC50cmFjZVxyXG5cdFx0b3Bpbmlvbl9pbnB1dCA9ICQoJyNvcGluaW9uX2lucHV0JykudmFsKClcclxuXHRcdGZpbmlzaF9pbnB1dCA9IEF1dG9Gb3JtLmdldEZpZWxkVmFsdWUoXCJmaW5pc2hfZGF0ZVwiLCBcImZpbmlzaERhdGVBdXRvRm9ybVwiKVxyXG5cclxuXHRcdCQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0TWV0ZW9yLmNhbGwgJ2NoYW5nZV9hcHByb3ZlX2luZm8nLCBpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIG9waW5pb25faW5wdXQsIGZpbmlzaF9pbnB1dCwgKGVyciwgcmVzdWx0KS0+XHJcblx0XHRcdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0XHRpZiBlcnJcclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IgVEFQaTE4bi5fXyhlcnIucmVhc29uKVxyXG5cdFx0XHRpZiByZXN1bHQgPT0gdHJ1ZVxyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKHQoXCJpbnN0YW5jZV9hcHByb3ZlX21vZGFsX21vZGlmaWNhdGlvbnNhdmVcIikpXHJcblx0XHRcdFx0TW9kYWwuaGlkZSBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHQnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWRpc3RyaWJ1dGUtYXBwcm92ZS1yZW1vdmUnOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0TW9kYWwuYWxsb3dNdWx0aXBsZSA9IHRydWVcclxuXHRcdE1vZGFsLnNob3cgJ2NhbmNlbF9kaXN0cmlidXRlX21vZGFsJ1xyXG4iLCJUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzID0ge1xuICBlcXVhbHM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKGEpIHtcbiAgICBpZiAoYSkge1xuICAgICAgcmV0dXJuIGEudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoIDwgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICB1bmVtcHR5OiBmdW5jdGlvbihhKSB7XG4gICAgaWYgKGEpIHtcbiAgICAgIHJldHVybiBhLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA+IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIGFwcGVuZDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhICsgYjtcbiAgfSxcbiAgZGF0ZUZvcm1hdDogZnVuY3Rpb24oZGF0ZSkge1xuICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkgJiYgKGRhdGUgIT0gbnVsbCA/IGRhdGUuZ2V0RnVsbFllYXIoKSA6IHZvaWQgMCkgPT09IChuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSkge1xuICAgICAgcmV0dXJuICQuZm9ybWF0LmRhdGUobmV3IERhdGUoZGF0ZSksIFwiTU0tZGQgSEg6bW1cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkLmZvcm1hdC5kYXRlKG5ldyBEYXRlKGRhdGUpLCBcInl5eXktTU0tZGQgSEg6bW1cIik7XG4gICAgfVxuICB9LFxuICBnZXRTdGVwTmFtZTogZnVuY3Rpb24oc3RlcElkKSB7XG4gICAgdmFyIHN0ZXA7XG4gICAgc3RlcCA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZVN0ZXAoc3RlcElkKTtcbiAgICBpZiAoc3RlcCkge1xuICAgICAgcmV0dXJuIHN0ZXAubmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHNob3dEZWxldGVCdXR0b246IGZ1bmN0aW9uKGFwcHJvdmVkKSB7XG4gICAgaWYgKGFwcHJvdmVkICYmIGFwcHJvdmVkLnR5cGUgPT09ICdjYycgJiYgYXBwcm92ZWQuZnJvbV91c2VyID09PSBNZXRlb3IudXNlcklkKCkgJiYgYXBwcm92ZWQuaXNfZmluaXNoZWQgIT09IHRydWUgJiYgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNTaG93TW9kaWZpY2F0aW9uQnV0dG9uOiBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIHZhciBhcHByb3ZlX2FkbWlucywgaXNTaG93LCByZWYsIHJlZjEsIHJlZjI7XG4gICAgYXBwcm92ZV9hZG1pbnMgPSAocmVmID0gTWV0ZW9yLnNldHRpbmdzKSAhPSBudWxsID8gKHJlZjEgPSByZWZbXCJwdWJsaWNcIl0pICE9IG51bGwgPyAocmVmMiA9IHJlZjEud29ya2Zsb3cpICE9IG51bGwgPyByZWYyLmFwcHJvdmVfYWRtaW5zIDogdm9pZCAwIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmIChhcHByb3ZlX2FkbWlucyAhPSBudWxsID8gYXBwcm92ZV9hZG1pbnMubGVuZ3RoIDogdm9pZCAwKSB7XG4gICAgICBpc1Nob3cgPSBhcHByb3ZlX2FkbWlucyAhPSBudWxsID8gYXBwcm92ZV9hZG1pbnMuY29udGFpbnMoTWV0ZW9yLnVzZXJJZCgpKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKCFpc1Nob3cpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGFwcHJvdmVkLmhhbmRsZXIgPT09IE1ldGVvci51c2VySWQoKTtcbiAgfSxcbiAgaXNFZGl0aW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAocmVmID0gVGVtcGxhdGUuaW5zdGFuY2UoKS5pc19lZGl0aW5nKSAhPSBudWxsID8gcmVmLmdldCgpIDogdm9pZCAwO1xuICB9LFxuICBpc1Nob3dEZXNjcmlwdGlvbjogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmIChUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLmlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbihhcHByb3ZlZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gKChyZWYgPSBhcHByb3ZlZC5kZXNjcmlwdGlvbikgIT0gbnVsbCA/IHJlZi50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggOiB2b2lkIDApID4gMDtcbiAgfSxcbiAgaXNDQzogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICBpZiAoYXBwcm92ZWQgJiYgYXBwcm92ZWQudHlwZSA9PT0gJ2NjJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZ2V0QXBwcm92ZVN0YXR1c0ljb246IGZ1bmN0aW9uKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkge1xuICAgIHZhciBhcHByb3ZlU3RhdHVzSWNvbjtcbiAgICBpZiAoYXV0b1N1Ym1pdHRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuICdpb24gaW9uLWFuZHJvaWQtYWxhcm0tY2xvY2snO1xuICAgIH1cbiAgICBhcHByb3ZlU3RhdHVzSWNvbiA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKGFwcHJvdmVKdWRnZSkge1xuICAgICAgY2FzZSAnYXBwcm92ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWNoZWNrbWFyay1yb3VuZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVqZWN0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWNsb3NlLXJvdW5kJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXJtaW5hdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnZmEgZmEtYmFuJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWFzc2lnbmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1hbmRyb2lkLWNvbnRhY3QnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlbG9jYXRlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tYXJyb3ctc2hyaW5rJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXRyaWV2ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdmYSBmYS11bmRvJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGFwcHJvdmVTdGF0dXNJY29uO1xuICB9LFxuICBnZXRBcHByb3ZlU3RhdHVzVGV4dDogZnVuY3Rpb24oYXBwcm92ZUp1ZGdlLCBhdXRvU3VibWl0dGVkKSB7XG4gICAgdmFyIGFwcHJvdmVTdGF0dXNUZXh0LCBsb2NhbGU7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICAgIGlmIChsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3poLWNuJykge1xuICAgICAgICBsb2NhbGUgPSBcInpoLUNOXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIik7XG4gICAgfVxuICAgIGlmIChhdXRvU3VibWl0dGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gVEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92ZV90aW1lb3V0X2F1dG9fc3VibWl0dGVkJywge30sIGxvY2FsZSk7XG4gICAgfVxuICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAoYXBwcm92ZUp1ZGdlKSB7XG4gICAgICBjYXNlICdhcHByb3ZlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgYXBwcm92ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWplY3RlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVqZWN0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXJtaW5hdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSB0ZXJtaW5hdGVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVhc3NpZ25lZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVhc3NpZ25lZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlbG9jYXRlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVsb2NhdGVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmV0cmlldmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZXRyaWV2ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXR1cm5lZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmV0dXJuZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWFkZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJlYWRlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gJyc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZVN0YXR1c1RleHQ7XG4gIH0sXG4gIGdldEFwcHJvdmVKdWRnZUNsYXNzOiBmdW5jdGlvbihhcHByb3ZlSnVkZ2UsIGF1dG9TdWJtaXR0ZWQpIHtcbiAgICBpZiAoYXV0b1N1Ym1pdHRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuICdhdXRvU3VibWl0dGVkJztcbiAgICB9XG4gICAgcmV0dXJuIGFwcHJvdmVKdWRnZTtcbiAgfSxcbiAgX3Q6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBUQVBpMThuLl9fKGtleSk7XG4gIH0sXG4gIG15QXBwcm92ZURlc2NyaXB0aW9uOiBmdW5jdGlvbihhcHByb3ZlSWQpIHtcbiAgICB2YXIgbXlBcHByb3ZlLCByZWYsIHJlZjE7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnKSB7XG4gICAgICAgIG15QXBwcm92ZSA9IChyZWYgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpKSAhPSBudWxsID8gKHJlZjEgPSByZWYubXlBcHByb3ZlKSAhPSBudWxsID8gcmVmMS5nZXQoKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgaWYgKG15QXBwcm92ZSAmJiBteUFwcHJvdmUuaWQgPT09IGFwcHJvdmVJZCkge1xuICAgICAgICAgIGlmICghU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gKG15QXBwcm92ZSAhPSBudWxsID8gbXlBcHByb3ZlLmRlc2NyaXB0aW9uIDogdm9pZCAwKSB8fCBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpc0ZvcndhcmQ6IGZ1bmN0aW9uKGFwcHJvdmVkKSB7XG4gICAgaWYgKGFwcHJvdmVkICYmIGFwcHJvdmVkLnR5cGUgPT09ICdmb3J3YXJkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgc2hvd0ZvcndhcmREZWxldGVCdXR0b246IGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICBpZiAoZGIuaW5zdGFuY2VzLmZpbmQoYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlKS5jb3VudCgpID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChhcHByb3ZlICYmIGFwcHJvdmUudHlwZSA9PT0gJ2ZvcndhcmQnICYmIGFwcHJvdmUuZnJvbV91c2VyID09PSBNZXRlb3IudXNlcklkKCkgJiYgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSAmJiBhcHByb3ZlLmp1ZGdlICE9PSAndGVybWluYXRlZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIG1hcmtEb3duVG9IdG1sOiBmdW5jdGlvbihtYXJrRG93blN0cmluZykge1xuICAgIHZhciByZW5kZXJlcjtcbiAgICBpZiAobWFya0Rvd25TdHJpbmcpIHtcbiAgICAgIHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XG4gICAgICByZW5kZXJlci5saW5rID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J1wiICsgaHJlZiArIFwiJyB0aXRsZT0nXCIgKyB0aXRsZSArIFwiJz5cIiArIHRleHQgKyBcIjwvYT5cIjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtcbiAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyXG4gICAgICB9KSk7XG4gICAgfVxuICB9LFxuICBpc0Rpc3RyaWJ1dGU6IGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICBpZiAoYXBwcm92ZSAmJiBhcHByb3ZlLnR5cGUgPT09ICdkaXN0cmlidXRlJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgc2hvd0Rpc3RyaWJ1dGVEZWxldGVCdXR0b246IGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICB2YXIgaW5zO1xuICAgIGlmIChkYi5pbnN0YW5jZXMuZmluZChhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFwcHJvdmUgJiYgYXBwcm92ZS50eXBlID09PSAnZGlzdHJpYnV0ZScgJiYgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSAmJiBhcHByb3ZlLmp1ZGdlICE9PSAndGVybWluYXRlZCcgJiYgU3RlZWRvcy5oYXNGZWF0dXJlKCdmaWxlX2Rpc3RyaWJ1dGlvbicsIFN0ZWVkb3MuZ2V0U3BhY2VJZCgpKSkge1xuICAgICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGFwcHJvdmUuaW5zdGFuY2VcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgZmxvdzogMSxcbiAgICAgICAgICBzcGFjZTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChpbnMgJiYgaW5zLmZsb3cgJiYgaW5zLnNwYWNlKSB7XG4gICAgICAgIGlmIChXb3JrZmxvd01hbmFnZXIuaGFzRmxvd0FkbWluUGVybWlzc2lvbihpbnMuZmxvdywgaW5zLnNwYWNlLCBNZXRlb3IudXNlcklkKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhcHByb3ZlLmZyb21fdXNlciA9PT0gTWV0ZW9yLnVzZXJJZCgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGZpbmlzaERhdGVTY2hlbWE6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChTdGVlZG9zLmlzQW5kcm9pZE9ySU9TKCkpIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKHtcbiAgICAgICAgZmluaXNoX2RhdGU6IHtcbiAgICAgICAgICBhdXRvZm9ybToge1xuICAgICAgICAgICAgdHlwZTogXCJkYXRldGltZS1sb2NhbFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgICAgdHlwZTogRGF0ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoe1xuICAgICAgICBmaW5pc2hfZGF0ZToge1xuICAgICAgICAgIGF1dG9mb3JtOiB7XG4gICAgICAgICAgICB0eXBlOiBcImJvb3RzdHJhcC1kYXRldGltZXBpY2tlclwiLFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkYXRlVGltZVBpY2tlck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgZm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIixcbiAgICAgICAgICAgICAgaWdub3JlUmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICAgIGxvY2FsZTogU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKSxcbiAgICAgICAgICAgICAgd2lkZ2V0UG9zaXRpb25pbmc6IHtcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsOiAncmlnaHQnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgICB0eXBlOiBEYXRlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgZmluaXNoRGF0ZVZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbmlzaF9kYXRlOiB0aGlzLmZpbmlzaF9kYXRlXG4gICAgfTtcbiAgfSxcblxuICAvKlxuICAgICBcdOatpOWHveaVsOeUqOS6juaOp+WItuaYr+WQpuaYvuekunRyYWNlcyB2aWV3XG4gICAgIFx0dHJ1ZTog5pi+56S6dHJhY2VzIHZpZXcs562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCO5piv55u05o6l5a6a5L2N5YiwdHJhY2VzIHZpZXdcbiAgICAgXHRmYWxzZTog5LiN5pi+56S6dHJhY2VzIHZpZXfvvIznrb7moLjljobnqIvmjInpkq7ngrnlh7vlkI4s5LulTW9kYWwg5pa55byP5pi+56S6dHJhY2VzIHZpZXdcbiAgICovXG4gIHNob3dUcmFjZXNWaWV3OiBmdW5jdGlvbihmb3JtLCBmb3JtX3ZlcnNpb24pIHtcbiAgICB2YXIgcmVmLCBzaG93X21vZGFsX3RyYWNlc19saXN0O1xuICAgIHNob3dfbW9kYWxfdHJhY2VzX2xpc3QgPSAoKHJlZiA9IGRiLnNwYWNlX3NldHRpbmdzLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IFNlc3Npb24uZ2V0KFwic3BhY2VJZFwiKSxcbiAgICAgIGtleTogXCJzaG93X21vZGFsX3RyYWNlc19saXN0XCJcbiAgICB9KSkgIT0gbnVsbCA/IHJlZi52YWx1ZXMgOiB2b2lkIDApIHx8IGZhbHNlO1xuICAgIHJldHVybiAhc2hvd19tb2RhbF90cmFjZXNfbGlzdDtcbiAgfSxcbiAgZ2V0SW5zdGFuY2VTdGF0ZVRleHQ6IGZ1bmN0aW9uKGluc3RhbmNlX2lkKSB7XG4gICAgdmFyIGlucywgbG9jYWxlLCB0ZXh0O1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGU7XG4gICAgICBpZiAobG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09ICd6aC1jbicpIHtcbiAgICAgICAgbG9jYWxlID0gXCJ6aC1DTlwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpO1xuICAgIH1cbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHN0YXRlOiAxLFxuICAgICAgICBpc19yZWFkOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbnMpIHtcbiAgICAgIHJldHVybiBUQVBpMThuLl9fKCdpbnN0YW5jZV9kZWxldGVkJywge30sIGxvY2FsZSk7XG4gICAgfVxuICAgIHRleHQgPSAnJztcbiAgICBpZiAoaW5zLnN0YXRlID09PSAnY29tcGxldGVkJykge1xuICAgICAgdGV4dCA9IFRBUGkxOG4uX18oJ2NvbXBsZXRlZCcsIHt9LCBsb2NhbGUpO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAncGVuZGluZycpIHtcbiAgICAgIHRleHQgPSBUQVBpMThuLl9fKCdwZW5kaW5nJywge30sIGxvY2FsZSk7XG4gICAgfSBlbHNlIGlmIChpbnMuc3RhdGUgPT09ICdkcmFmdCcpIHtcbiAgICAgIGlmIChpbnMuaXNfcmVhZCkge1xuICAgICAgICB0ZXh0ID0gVEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92ZV9yZWFkJywge30sIGxvY2FsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gVEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92ZV9ub3RfeWV0X2hhbmRsZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH0sXG4gIGdldEluc3RhbmNlU3RhdGVDb2xvcjogZnVuY3Rpb24oaW5zdGFuY2VfaWQpIHtcbiAgICB2YXIgY2xhLCBpbnM7XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgaXNfcmVhZDogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghaW5zKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgY2xhID0gJyc7XG4gICAgaWYgKGlucy5zdGF0ZSA9PT0gJ2RyYWZ0Jykge1xuICAgICAgaWYgKGlucy5pc19yZWFkKSB7XG4gICAgICAgIGNsYSA9ICdibHVlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsYSA9ICdyZWQnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xhO1xuICB9LFxuICBmaXJzdFRyYWNlOiBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gMDtcbiAgfSxcbiAgbGFzdF9kaXN0cmlidXRlX2Zyb206IGZ1bmN0aW9uKGluc3RhbmNlX2lkKSB7XG4gICAgdmFyIGRpc19pbmZvLCBpbnMsIHVzZXI7XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZCxcbiAgICAgIGRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZToge1xuICAgICAgICAkZXhpc3RzOiB0cnVlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGNyZWF0ZWQ6IDEsXG4gICAgICAgIGNyZWF0ZWRfYnk6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zKSB7XG4gICAgICBkaXNfaW5mbyA9IHt9O1xuICAgICAgdXNlciA9IHt9O1xuICAgICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgICB1c2VyID0gVVVmbG93X2FwaS5nZXROYW1lRm9yVXNlcihpbnMuY3JlYXRlZF9ieSk7XG4gICAgICB9IGVsc2UgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgICB1c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgX2lkOiBpbnMuY3JlYXRlZF9ieVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh1c2VyLm5hbWUpIHtcbiAgICAgICAgZGlzX2luZm8uZnJvbV91c2VyID0gdXNlci5faWQ7XG4gICAgICAgIGRpc19pbmZvLmZyb21fdXNlcl9uYW1lID0gdXNlci5uYW1lO1xuICAgICAgICBkaXNfaW5mby5jcmVhdGVkID0gaW5zLmNyZWF0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIV8uaXNFbXB0eShkaXNfaW5mbykpIHtcbiAgICAgICAgcmV0dXJuIGRpc19pbmZvO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNDQ09yRGlzdHJpYnV0ZU9yRm9yd2FyZFRlcm1pbmF0ZWQ6IGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICBpZiAoKGFwcHJvdmUudHlwZSA9PT0gJ2NjJyB8fCBhcHByb3ZlLnR5cGUgPT09ICdkaXN0cmlidXRlJyB8fCBhcHByb3ZlLnR5cGUgPT09ICdmb3J3YXJkJykgJiYgYXBwcm92ZS5qdWRnZSA9PT0gJ3Rlcm1pbmF0ZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBqdWRnZVRlcm1pbmF0ZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIGp1ZGdlID09PSAndGVybWluYXRlZCc7XG4gIH0sXG4gIGluc3RhbmNlRXhpc3RzOiBmdW5jdGlvbihpbnN0YW5jZV9pZCkge1xuICAgIHJldHVybiAhIWRiLmluc3RhbmNlcy5maW5kKGluc3RhbmNlX2lkKS5jb3VudCgpO1xuICB9LFxuICBhZ2VudERlc2NyaXB0aW9uOiBmdW5jdGlvbih1c2VyTmFtZSkge1xuICAgIHZhciBsb2NhbGU7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICAgIGlmIChsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3poLWNuJykge1xuICAgICAgICBsb2NhbGUgPSBcInpoLUNOXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIik7XG4gICAgfVxuICAgIHJldHVybiBUQVBpMThuLl9fKCdwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXNfZGVzY3JpcHRpb24nLCB7XG4gICAgICB1c2VyTmFtZTogdXNlck5hbWVcbiAgICB9LCBsb2NhbGUpO1xuICB9LFxuICB0cmFjZU5hbWU6IGZ1bmN0aW9uKGluc3RhbmNlX2lkLCB0cmFjZUlkKSB7XG4gICAgdmFyIHJlZiwgcmVmMTtcbiAgICByZXR1cm4gKHJlZiA9IF8uZmluZCgocmVmMSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkLCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgdHJhY2VzOiAxXG4gICAgICB9XG4gICAgfSkpICE9IG51bGwgPyByZWYxLnRyYWNlcyA6IHZvaWQgMCwgZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgIHJldHVybiB0cmFjZS5faWQgPT09IHRyYWNlSWQ7XG4gICAgfSkpICE9IG51bGwgPyByZWYubmFtZSA6IHZvaWQgMDtcbiAgfSxcbiAgb2JqZWN0VXJsOiBmdW5jdGlvbihvYmplY3RfbmFtZSwgcmVjb3JkX2lkLCBhcHBfaWQpIHtcbiAgICByZXR1cm4gQ3JlYXRvci5nZXRPYmplY3RVcmwob2JqZWN0X25hbWUsIHJlY29yZF9pZCwgYXBwX2lkKTtcbiAgfVxufTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLmRhdGVGb3JtYXQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIHV0Y09mZnNldDtcbiAgICBpZiAoZGF0ZSkge1xuICAgICAgdXRjT2Zmc2V0ID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnV0Y09mZnNldDtcbiAgICAgIHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZShkYXRlLCB1dGNPZmZzZXQpO1xuICAgIH1cbiAgfTtcbiAgVHJhY2VzVGVtcGxhdGUuaGVscGVycy5fdCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBsb2NhbGU7XG4gICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpO1xuICB9O1xuICBUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLnNob3dEZWxldGVCdXR0b24gPSBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cblxuVHJhY2VzVGVtcGxhdGUuZXZlbnRzID0ge1xuICAnY2xpY2sgLmNjLWFwcHJvdmUtcmVtb3ZlJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGFwcHJvdmVJZCwgaW5zdGFuY2VJZDtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGxpbmcgKiAxICE9PSAxKSB7XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDE7XG4gICAgICAkKFwiaVwiLCBldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhcImZhLXNwaW5cIik7XG4gICAgICBpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKTtcbiAgICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBNZXRlb3IuY2FsbCgnY2NfcmVtb3ZlJywgaW5zdGFuY2VJZCwgYXBwcm92ZUlkLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0b2FzdHIuZXJyb3IoZXJyKTtcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDA7XG4gICAgICAgICAgJChcImlcIiwgZXZlbnQuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoXCJmYS1zcGluXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhUQVBpMThuLl9fKFwicmVtb3ZlX2NjX2FwcHJvdmVcIikpO1xuICAgICAgICAgIGlmICgkKFwiLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbFwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIE1vZGFsLmhpZGUoXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gICdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tY2MtYXBwcm92ZS1yZW1vdmUnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgYXBwcm92ZUlkLCBpbnN0YW5jZUlkO1xuICAgIGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpO1xuICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgIE1ldGVvci5jYWxsKCdjY19yZW1vdmUnLCBpbnN0YW5jZUlkLCBhcHByb3ZlSWQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRvYXN0ci5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICB0b2FzdHIuc3VjY2VzcyhUQVBpMThuLl9fKFwicmVtb3ZlX2NjX2FwcHJvdmVcIikpO1xuICAgICAgICBNb2RhbC5oaWRlKFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICAnY2xpY2sgLmFwcHJvdmUtaXRlbSwuYXBwcm92ZS1kZXNjcmlwdGlvbic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIGlmICghJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJhLmJ0bi1saW5rXCIpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIE1vZGFsLnNob3coXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIiwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAndGFwaG9sZCAuYXBwcm92ZS1pdGVtLC5hcHByb3ZlLWRlc2NyaXB0aW9uJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgaWYgKCEkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcImEuYnRuLWxpbmtcIikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gTW9kYWwuc2hvdyhcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiLCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gICdjbGljayAuYXBwcm92ZS1pdGVtIGEuYnRuLWxpbmssLmFwcHJvdmUtZGVzY3JpcHRpb24gYS5idG4tbGluaywuYXBwcm92ZS1pdGVtLWRpc3RyaWJ1dGUgYS5idG4tbGluayc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHZhciByZWYsIHVzZXJJZDtcbiAgICBpZiAoU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgICB1c2VySWQgPSAocmVmID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQpICE9IG51bGwgPyByZWYudGFyZ2V0X3VzZXJfaWQgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gQ3JlYXRvci5vcGVuU2FmZU9iamVjdFVybCgndXNlcnMnLCB1c2VySWQpO1xuICAgIH1cbiAgfSxcbiAgJ3RhcGVuZCAuYXBwcm92ZS1pdGVtLC5hcHByb3ZlLWRlc2NyaXB0aW9uJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgaWYgKCEkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcImEuYnRuLWxpbmtcIikubGVuZ3RoKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICAnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWZvcndhcmQtYXBwcm92ZS1yZW1vdmUnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgYXBwcm92ZUlkLCBpbnN0YW5jZUlkLCB0cmFjZUlkO1xuICAgIGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpO1xuICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgdHJhY2VJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LnRyYWNlO1xuICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKTtcbiAgICBNZXRlb3IuY2FsbCgnZm9yd2FyZF9yZW1vdmUnLCBpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRvYXN0ci5lcnJvcihUQVBpMThuLl9fKGVyci5yZWFzb24pKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcImluc3RhbmNlX2FwcHJvdmVfZm9yd2FyZF9yZW1vdmVfc3VjY2Vzc1wiKSk7XG4gICAgICAgIE1vZGFsLmhpZGUoXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZm9yd2FyZC1pbnN0YW5jZS1sb29rJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGZvcndhcmRfaW5zdGFuY2UsIGZvcndhcmRfc3BhY2U7XG4gICAgZm9yd2FyZF9zcGFjZSA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmZvcndhcmRzcGFjZTtcbiAgICBmb3J3YXJkX2luc3RhbmNlID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuZm9yd2FyZGluc3RhbmNlO1xuICAgIHJldHVybiBTdGVlZG9zLm9wZW5XaW5kb3coU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgZm9yd2FyZF9zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBmb3J3YXJkX2luc3RhbmNlKSk7XG4gIH0sXG4gICdjbGljayAuYnRuLW1vZGlmaWNhdGlvbic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKTtcbiAgICBpZiAoIVN0ZWVkb3MuaXNBbmRyb2lkT3JJT1MoKSkge1xuICAgICAgcmV0dXJuIFRyYWNrZXIuYWZ0ZXJGbHVzaChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICQoXCIjaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsICNmaW5pc2hfaW5wdXRcIikub24oXCJkcC5zaG93XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkKFwiLm1vZGFsLWJvZHlcIikuc2Nyb2xsVG9wKDEwMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAnY2xpY2sgLmJ0bi1jYW5jZWxCdXQnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICByZXR1cm4gdGVtcGxhdGUuaXNfZWRpdGluZy5zZXQoIXRlbXBsYXRlLmlzX2VkaXRpbmcuZ2V0KCkpO1xuICB9LFxuICAnY2xpY2sgLmJ0bi1zYXZlQnV0JzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGFwcHJvdmVJZCwgZmluaXNoX2lucHV0LCBpbnN0YW5jZUlkLCBvcGluaW9uX2lucHV0LCB0cmFjZUlkO1xuICAgIGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpO1xuICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgdHJhY2VJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LnRyYWNlO1xuICAgIG9waW5pb25faW5wdXQgPSAkKCcjb3Bpbmlvbl9pbnB1dCcpLnZhbCgpO1xuICAgIGZpbmlzaF9pbnB1dCA9IEF1dG9Gb3JtLmdldEZpZWxkVmFsdWUoXCJmaW5pc2hfZGF0ZVwiLCBcImZpbmlzaERhdGVBdXRvRm9ybVwiKTtcbiAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgcmV0dXJuIE1ldGVvci5jYWxsKCdjaGFuZ2VfYXBwcm92ZV9pbmZvJywgaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCBvcGluaW9uX2lucHV0LCBmaW5pc2hfaW5wdXQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRvYXN0ci5lcnJvcihUQVBpMThuLl9fKGVyci5yZWFzb24pKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgdG9hc3RyLnN1Y2Nlc3ModChcImluc3RhbmNlX2FwcHJvdmVfbW9kYWxfbW9kaWZpY2F0aW9uc2F2ZVwiKSk7XG4gICAgICAgIE1vZGFsLmhpZGUoXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZGlzdHJpYnV0ZS1hcHByb3ZlLXJlbW92ZSc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIE1vZGFsLmFsbG93TXVsdGlwbGUgPSB0cnVlO1xuICAgIHJldHVybiBNb2RhbC5zaG93KCdjYW5jZWxfZGlzdHJpYnV0ZV9tb2RhbCcpO1xuICB9XG59O1xuIiwiUmVsYXRlZEluc3RhbmNlcy5oZWxwZXJzID1cclxuXHRzaG93UmVsYXRlZEluc3RhY2VzOiAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnMgPSB0aGlzLmluc3RhbmNlXHJcblx0XHRpZiBpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzICYmIF8uaXNBcnJheShpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzKVxyXG5cdFx0XHRpZiBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiB7JGluOiBpbnMucmVsYXRlZF9pbnN0YW5jZXN9fSwge2ZpZWxkczoge3NwYWNlOiAxLCBuYW1lOiAxfX0pLmNvdW50KCkgPiAwXHJcblx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRyZWxhdGVkX2luc3RhY2VzOiAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnMgPSB0aGlzLmluc3RhbmNlXHJcblx0XHRpZiBpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzICYmIF8uaXNBcnJheShpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzKVxyXG5cdFx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogaW5zLnJlbGF0ZWRfaW5zdGFuY2VzfX0sIHtmaWVsZHM6IHtzcGFjZTogMSwgbmFtZTogMX19KS5mZXRjaCgpXHJcblxyXG5cdHJlbGF0ZWRfaW5zdGFjZV91cmw6IChpbnMpIC0+XHJcblxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50ICYmIChTdGVlZG9zLmlzTW9iaWxlKCkgfHwgU3RlZWRvcy5pc0NvcmRvdmEoKSlcclxuXHRcdFx0cmV0dXJuICcnXHJcblxyXG5cdFx0YWJzb2x1dGUgPSBmYWxzZVxyXG5cclxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRhYnNvbHV0ZSA9IHRoaXMuYWJzb2x1dGVcclxuXHRcdGlmIGFic29sdXRlXHJcblx0XHRcdHJldHVybiBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIitpbnMuc3BhY2UrXCIvdmlldy9yZWFkb25seS9cIiArIGlucy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiK2lucy5zcGFjZStcIi92aWV3L3JlYWRvbmx5L1wiICsgaW5zLl9pZCArICc/aGlkZV90cmFjZXM9MCcpXHJcblxyXG5cdF90OiAoa2V5KS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblx0XHRcdHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSlcclxuXHJcblx0c2hvd19kZWxldGU6ICgpLT5cclxuXHRcdGlmICFNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09IFwiZHJhZnRcIiB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXHJcblx0XHRcdFx0Y3VycmVudF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKClcclxuXHRcdFx0XHRpZiBjdXJyZW50X3N0ZXBcclxuXHRcdFx0XHRcdGlmIChjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggfHwgY3VycmVudF9zdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdHJ1ZSB8fCBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PSB1bmRlZmluZWQpXHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlIiwiUmVsYXRlZEluc3RhbmNlcy5oZWxwZXJzID0ge1xuICBzaG93UmVsYXRlZEluc3RhY2VzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnMgPSB0aGlzLmluc3RhbmNlO1xuICAgIH1cbiAgICBpZiAoKGlucyAhPSBudWxsID8gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwKSAmJiBfLmlzQXJyYXkoaW5zICE9IG51bGwgPyBpbnMucmVsYXRlZF9pbnN0YW5jZXMgOiB2b2lkIDApKSB7XG4gICAgICBpZiAoZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IGlucy5yZWxhdGVkX2luc3RhbmNlc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgfVxuICAgICAgfSkuY291bnQoKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIHJlbGF0ZWRfaW5zdGFjZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnM7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucyA9IHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuICAgIGlmICgoaW5zICE9IG51bGwgPyBpbnMucmVsYXRlZF9pbnN0YW5jZXMgOiB2b2lkIDApICYmIF8uaXNBcnJheShpbnMgIT0gbnVsbCA/IGlucy5yZWxhdGVkX2luc3RhbmNlcyA6IHZvaWQgMCkpIHtcbiAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogaW5zLnJlbGF0ZWRfaW5zdGFuY2VzXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgbmFtZTogMVxuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgIH1cbiAgfSxcbiAgcmVsYXRlZF9pbnN0YWNlX3VybDogZnVuY3Rpb24oaW5zKSB7XG4gICAgdmFyIGFic29sdXRlO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQgJiYgKFN0ZWVkb3MuaXNNb2JpbGUoKSB8fCBTdGVlZG9zLmlzQ29yZG92YSgpKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBhYnNvbHV0ZSA9IGZhbHNlO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGFic29sdXRlID0gdGhpcy5hYnNvbHV0ZTtcbiAgICB9XG4gICAgaWYgKGFic29sdXRlKSB7XG4gICAgICByZXR1cm4gTWV0ZW9yLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIgKyBpbnMuc3BhY2UgKyBcIi92aWV3L3JlYWRvbmx5L1wiICsgaW5zLl9pZCArICc/aGlkZV90cmFjZXM9MCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgaW5zLnNwYWNlICsgXCIvdmlldy9yZWFkb25seS9cIiArIGlucy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKTtcbiAgICB9XG4gIH0sXG4gIF90OiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgbG9jYWxlO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIHJldHVybiBUQVBpMThuLl9fKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGU7XG4gICAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpO1xuICAgIH1cbiAgfSxcbiAgc2hvd19kZWxldGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyZW50X3N0ZXA7XG4gICAgaWYgKCFNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSBcImRyYWZ0XCIgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgY3VycmVudF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XG4gICAgICAgIGlmIChjdXJyZW50X3N0ZXApIHtcbiAgICAgICAgICBpZiAoY3VycmVudF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoIHx8IGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09PSB0cnVlIHx8IGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIlJlbGF0ZWRSZWNvcmRzLmhlbHBlcnMgPVxyXG5cdHNob3dSZWxhdGVkUmVjb3JkczogKCktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnMgPSB0aGlzLmluc3RhbmNlXHJcblx0XHRpZiAhaW5zXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0cmV0dXJuICFfLmlzRW1wdHkoaW5zLnJlY29yZF9pZHMpIiwiUmVsYXRlZFJlY29yZHMuaGVscGVycyA9IHtcbiAgc2hvd1JlbGF0ZWRSZWNvcmRzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnMgPSB0aGlzLmluc3RhbmNlO1xuICAgIH1cbiAgICBpZiAoIWlucykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gIV8uaXNFbXB0eShpbnMucmVjb3JkX2lkcyk7XG4gIH1cbn07XG4iLCJEZXNpZ25lckFQSSA9XHJcblxyXG5cdGdldEFic29sdXRlVXJsOiAodXJsKS0+XHJcblx0XHRyb290VXJsID0gaWYgX19tZXRlb3JfcnVudGltZV9jb25maWdfXyB0aGVuIF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggZWxzZSBcIlwiXHJcblx0XHRpZiByb290VXJsXHJcblx0XHRcdHVybCA9IHJvb3RVcmwgKyB1cmxcclxuXHRcdHJldHVybiB1cmw7XHJcblxyXG5cdHdyaXRlUmVzcG9uc2U6IChyZXMsIGh0dHBDb2RlLCBib2R5KS0+XHJcblx0XHRyZXMuc3RhdHVzQ29kZSA9IGh0dHBDb2RlO1xyXG5cdFx0cmVzLmVuZChib2R5KTtcclxuXHRcdFxyXG5cdHNlbmRJbnZhbGlkVVJMUmVzcG9uc2U6IChyZXMpLT5cclxuXHRcdHJldHVybiBAd3JpdGVSZXNwb25zZShyZXMsIDQwNCwgXCJ0aGUgcGFyYW0gJ3VybCcgaXMgcmVxdWlyZWQgYXMgcXVlcnlzLlwiKTtcclxuXHRcdFxyXG5cdHNlbmRBdXRoVG9rZW5FeHBpcmVkUmVzcG9uc2U6IChyZXMpLT5cclxuXHRcdHJldHVybiBAd3JpdGVSZXNwb25zZShyZXMsIDQwMSwgXCJ0aGUgYXV0aF90b2tlbiBoYXMgZXhwaXJlZC5cIik7XHJcblxyXG5cdHNlbmRIdG1sUmVzcG9uc2U6IChyZXEsIHJlcywgdHlwZSktPlxyXG5cdFx0cXVlcnkgPSByZXEucXVlcnlcclxuXHRcdHVybCA9IHF1ZXJ5LnVybFxyXG5cclxuXHRcdGlmIHVybFxyXG5cdFx0XHR1cmwgPSBkZWNvZGVVUklDb21wb25lbnQodXJsKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHREZXNpZ25lckFQSS5zZW5kSW52YWxpZFVSTFJlc3BvbnNlIHJlc1xyXG5cdFx0XHJcblx0XHR0aXRsZSA9IHF1ZXJ5LnRpdGxlXHJcblx0XHRpZiB0aXRsZVxyXG5cdFx0XHR0aXRsZSA9IGRlY29kZVVSSUNvbXBvbmVudCh0aXRsZSlcclxuXHRcdGVsc2VcclxuXHRcdFx0dGl0bGUgPSBcIlN0ZWVkb3MgRGVzaWduZXJcIlxyXG5cdFx0XHJcblx0XHRlcnJvcl9tc2cgPSBcIlwiXHJcblxyXG5cdFx0cmV0dXJuIEB3cml0ZVJlc3BvbnNlIHJlcywgMjAwLCBcIlwiXCJcclxuXHRcdFx0PGh0bWw+XHJcblx0XHRcdFx0PGhlYWQ+XHJcblx0XHRcdFx0XHQ8c3R5bGU+XHJcblx0XHRcdFx0XHRcdGh0bWwsYm9keXtcclxuXHRcdFx0XHRcdFx0XHRtYXJnaW46IDA7XHJcblx0XHRcdFx0XHRcdFx0cGFkZGluZzogMDtcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDEwMCU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Ym9keSB7IFxyXG5cdFx0XHRcdFx0XHRcdGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcclxuXHRcdFx0XHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQubG9hZGluZ3tcclxuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0XHRcdFx0XHRcdFx0bGVmdDogMHB4O1xyXG5cdFx0XHRcdFx0XHRcdHJpZ2h0OiAwcHg7XHJcblx0XHRcdFx0XHRcdFx0dG9wOiA1MCU7XHJcblx0XHRcdFx0XHRcdFx0ei1pbmRleDogLTE7Lyrorr7nva7kuLotMe+8jOWPr+S7peWcqGlmcmFtZeWKoOi9veWHuuadpeWQjuiHquWKqOa2iOWksSovXHJcblx0XHRcdFx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xyXG5cdFx0XHRcdFx0XHRcdG1hcmdpbi10b3A6IC0zMHB4O1xyXG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMzZweDtcclxuXHRcdFx0XHRcdFx0XHRjb2xvcjogI2RmZGZkZjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQuZXJyb3ItbXNne1xyXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuXHRcdFx0XHRcdFx0XHRsZWZ0OiAwcHg7XHJcblx0XHRcdFx0XHRcdFx0cmlnaHQ6IDBweDtcclxuXHRcdFx0XHRcdFx0XHRib3R0b206IDIwcHg7XHJcblx0XHRcdFx0XHRcdFx0ei1pbmRleDogMTEwMDtcclxuXHRcdFx0XHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOiAyMHB4O1xyXG5cdFx0XHRcdFx0XHRcdGNvbG9yOiAjYTk0NDQyO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQ8L3N0eWxlPlxyXG5cdFx0XHRcdFx0PG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ub1wiPlxyXG5cdFx0XHRcdFx0PHRpdGxlPiN7dGl0bGV9PC90aXRsZT5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImljb25cIiB0eXBlPVwiaW1hZ2UvcG5nXCIgc2l6ZXM9XCIxOTJ4MTkyXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FuZHJvaWQtY2hyb21lLTE5MngxOTIucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwibWFuaWZlc3RcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvbWFuaWZlc3QuanNvblwiKX1cIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJtb2JpbGUtd2ViLWFwcC1jYXBhYmxlXCIgY29udGVudD1cInllc1wiPlxyXG5cdFx0XHRcdFx0PG1ldGEgbmFtZT1cInRoZW1lLWNvbG9yXCIgY29udGVudD1cIiMwMDBcIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJhcHBsaWNhdGlvbi1uYW1lXCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCI1N3g1N1wiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTU3eDU3LnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjYweDYwXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tNjB4NjAucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiNzJ4NzJcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi03Mng3Mi5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCI3Nng3NlwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTc2eDc2LnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjExNHgxMTRcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xMTR4MTE0LnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjEyMHgxMjBcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xMjB4MTIwLnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjE0NHgxNDRcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xNDR4MTQ0LnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjE1MngxNTJcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xNTJ4MTUyLnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjE4MHgxODBcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xODB4MTgwLnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlXCIgY29udGVudD1cInllc1wiPlxyXG5cdFx0XHRcdFx0PG1ldGEgbmFtZT1cImFwcGxlLW1vYmlsZS13ZWItYXBwLXN0YXR1cy1iYXItc3R5bGVcIiBjb250ZW50PVwiYmxhY2stdHJhbnNsdWNlbnRcIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjIyOHgyMjhcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvY29hc3QtMjI4eDIyOC5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3BuZ1wiIHNpemVzPVwiMTZ4MTZcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi0xNngxNi5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3BuZ1wiIHNpemVzPVwiMzJ4MzJcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi0zMngzMi5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3BuZ1wiIHNpemVzPVwiOTZ4OTZcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi05Nng5Ni5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3BuZ1wiIHNpemVzPVwiMjMweDIzMFwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLTIzMHgyMzAucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwic2hvcnRjdXQgaWNvblwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLmljb1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cInlhbmRleC10YWJsZWF1LXdpZGdldFwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy95YW5kZXgtYnJvd3Nlci1tYW5pZmVzdC5qc29uXCIpfVwiPlxyXG5cdFx0XHRcdFx0PG1ldGEgbmFtZT1cIm1zYXBwbGljYXRpb24tVGlsZUNvbG9yXCIgY29udGVudD1cIiNmZmZcIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJtc2FwcGxpY2F0aW9uLVRpbGVJbWFnZVwiIGNvbnRlbnQ9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9tc3RpbGUtMTQ0eDE0NC5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwibXNhcHBsaWNhdGlvbi1jb25maWdcIiBjb250ZW50PVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYnJvd3NlcmNvbmZpZy54bWxcIil9XCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBwcm9wZXJ0eT1cInR3aXR0ZXI6aW1hZ2VcIiBjb250ZW50PVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvdHdpdHRlci5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL29wZW4tZ3JhcGgucG5nXCIpfVwiPlxyXG5cdFx0XHRcdDwvaGVhZD5cclxuXHRcdFx0XHQ8Ym9keT5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3MgPSBcImxvYWRpbmdcIj5Mb2FkaW5nLi4uPC9kaXY+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzID0gXCJlcnJvci1tc2dcIj4je2Vycm9yX21zZ308L2Rpdj5cclxuXHRcdFx0XHRcdDxpZnJhbWUgaWQ9XCJpZnJEZXNpZ25lclwiIHNyYz1cIlwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBud2Rpc2FibGU9XCJ0cnVlXCIgZnJhbWVib3JkZXI9XCJub1wiIGJvcmRlcj1cIjBcIiBtYXJnaW53aWR0aD1cIjBcIiBtYXJnaW5oZWlnaHQ9XCIwXCIgc2Nyb2xsaW5nPVwibm9cIiBhbGxvd3RyYW5zcGFyZW5jeT1cInllc1wiPjwvaWZyYW1lPlxyXG5cdFx0XHRcdFx0PHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgc3JjPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvbGliL2pxdWVyeS9qcXVlcnktMS4xMS4yLm1pbi5qc1wiKX1cIj48L3NjcmlwdD5cclxuXHRcdFx0XHRcdDxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxyXG5cdFx0XHRcdFx0XHR2YXIgZGVzaWduZXIgPSB7XHJcblx0XHRcdFx0XHRcdFx0dXJsUXVlcnk6ZnVuY3Rpb24obmFtZSl7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVnID0gbmV3IFJlZ0V4cChcIihefCYpXCIgKyBuYW1lICsgXCI9KFteJl0qKSgmfCQpXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHIgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKS5tYXRjaChyZWcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHIgIT0gbnVsbCkgcmV0dXJuIHVuZXNjYXBlKHJbMl0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRydW46ZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciB1cmwgPSB0aGlzLnVybFF1ZXJ5KFwidXJsXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0dXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdGlmKHVybCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQoXCIjaWZyRGVzaWduZXJcIikuYXR0cihcInNyY1wiLHVybCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgU3RlZWRvcyA9IHdpbmRvdy5vcGVuZXIuU3RlZWRvcyB8fCBudWxsO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFN0ZWVkb3MpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0U3RlZWRvcy5mb3JiaWROb2RlQ29udGV4dG1lbnUod2luZG93KTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdCQoZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdFx0XHRkZXNpZ25lci5ydW4oKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHQ8L3NjcmlwdD5cclxuXHRcdFx0XHQ8Ym9keT5cclxuXHRcdFx0PC9odG1sPlxyXG5cdFx0XCJcIlwiXHJcblxyXG5Kc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvZGVzaWduZXI/dXJsPTp1cmwnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0RGVzaWduZXJBUEkuc2VuZEh0bWxSZXNwb25zZSByZXEsIHJlc1xyXG5cclxuIiwidmFyIERlc2lnbmVyQVBJO1xuXG5EZXNpZ25lckFQSSA9IHtcbiAgZ2V0QWJzb2x1dGVVcmw6IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciByb290VXJsO1xuICAgIHJvb3RVcmwgPSBfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fID8gX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCA6IFwiXCI7XG4gICAgaWYgKHJvb3RVcmwpIHtcbiAgICAgIHVybCA9IHJvb3RVcmwgKyB1cmw7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH0sXG4gIHdyaXRlUmVzcG9uc2U6IGZ1bmN0aW9uKHJlcywgaHR0cENvZGUsIGJvZHkpIHtcbiAgICByZXMuc3RhdHVzQ29kZSA9IGh0dHBDb2RlO1xuICAgIHJldHVybiByZXMuZW5kKGJvZHkpO1xuICB9LFxuICBzZW5kSW52YWxpZFVSTFJlc3BvbnNlOiBmdW5jdGlvbihyZXMpIHtcbiAgICByZXR1cm4gdGhpcy53cml0ZVJlc3BvbnNlKHJlcywgNDA0LCBcInRoZSBwYXJhbSAndXJsJyBpcyByZXF1aXJlZCBhcyBxdWVyeXMuXCIpO1xuICB9LFxuICBzZW5kQXV0aFRva2VuRXhwaXJlZFJlc3BvbnNlOiBmdW5jdGlvbihyZXMpIHtcbiAgICByZXR1cm4gdGhpcy53cml0ZVJlc3BvbnNlKHJlcywgNDAxLCBcInRoZSBhdXRoX3Rva2VuIGhhcyBleHBpcmVkLlwiKTtcbiAgfSxcbiAgc2VuZEh0bWxSZXNwb25zZTogZnVuY3Rpb24ocmVxLCByZXMsIHR5cGUpIHtcbiAgICB2YXIgZXJyb3JfbXNnLCBxdWVyeSwgdGl0bGUsIHVybDtcbiAgICBxdWVyeSA9IHJlcS5xdWVyeTtcbiAgICB1cmwgPSBxdWVyeS51cmw7XG4gICAgaWYgKHVybCkge1xuICAgICAgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERlc2lnbmVyQVBJLnNlbmRJbnZhbGlkVVJMUmVzcG9uc2UocmVzKTtcbiAgICB9XG4gICAgdGl0bGUgPSBxdWVyeS50aXRsZTtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIHRpdGxlID0gZGVjb2RlVVJJQ29tcG9uZW50KHRpdGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSBcIlN0ZWVkb3MgRGVzaWduZXJcIjtcbiAgICB9XG4gICAgZXJyb3JfbXNnID0gXCJcIjtcbiAgICByZXR1cm4gdGhpcy53cml0ZVJlc3BvbnNlKHJlcywgMjAwLCBcIjxodG1sPlxcblx0PGhlYWQ+XFxuXHRcdDxzdHlsZT5cXG5cdFx0XHRodG1sLGJvZHl7XFxuXHRcdFx0XHRtYXJnaW46IDA7XFxuXHRcdFx0XHRwYWRkaW5nOiAwO1xcblx0XHRcdFx0aGVpZ2h0OiAxMDAlO1xcblx0XHRcdH1cXG5cdFx0XHRib2R5IHsgXFxuXHRcdFx0XHRmb250LWZhbWlseTogJ1NvdXJjZSBTYW5zIFBybycsICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuXHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcblx0XHRcdH1cXG5cdFx0XHQubG9hZGluZ3tcXG5cdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cdFx0XHRcdGxlZnQ6IDBweDtcXG5cdFx0XHRcdHJpZ2h0OiAwcHg7XFxuXHRcdFx0XHR0b3A6IDUwJTtcXG5cdFx0XHRcdHotaW5kZXg6IC0xOy8q6K6+572u5Li6LTHvvIzlj6/ku6XlnKhpZnJhbWXliqDovb3lh7rmnaXlkI7oh6rliqjmtojlpLEqL1xcblx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblx0XHRcdFx0bWFyZ2luLXRvcDogLTMwcHg7XFxuXHRcdFx0XHRmb250LXNpemU6IDM2cHg7XFxuXHRcdFx0XHRjb2xvcjogI2RmZGZkZjtcXG5cdFx0XHR9XFxuXHRcdFx0LmVycm9yLW1zZ3tcXG5cdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cdFx0XHRcdGxlZnQ6IDBweDtcXG5cdFx0XHRcdHJpZ2h0OiAwcHg7XFxuXHRcdFx0XHRib3R0b206IDIwcHg7XFxuXHRcdFx0XHR6LWluZGV4OiAxMTAwO1xcblx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblx0XHRcdFx0Zm9udC1zaXplOiAyMHB4O1xcblx0XHRcdFx0Y29sb3I6ICNhOTQ0NDI7XFxuXHRcdFx0fVxcblx0XHQ8L3N0eWxlPlxcblx0XHQ8bWV0YSBjaGFyc2V0PVxcXCJ1dGYtOFxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgbWF4aW11bS1zY2FsZT0xLCB1c2VyLXNjYWxhYmxlPW5vXFxcIj5cXG5cdFx0PHRpdGxlPlwiICsgdGl0bGUgKyBcIjwvdGl0bGU+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMTkyeDE5MlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hbmRyb2lkLWNocm9tZS0xOTJ4MTkyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwibWFuaWZlc3RcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvbWFuaWZlc3QuanNvblwiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcIm1vYmlsZS13ZWItYXBwLWNhcGFibGVcXFwiIGNvbnRlbnQ9XFxcInllc1xcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcInRoZW1lLWNvbG9yXFxcIiBjb250ZW50PVxcXCIjMDAwXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwiYXBwbGljYXRpb24tbmFtZVxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjU3eDU3XFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tNTd4NTcucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiNjB4NjBcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi02MHg2MC5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImFwcGxlLXRvdWNoLWljb25cXFwiIHNpemVzPVxcXCI3Mng3MlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTcyeDcyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjc2eDc2XFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tNzZ4NzYucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTE0eDExNFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTExNHgxMTQucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTIweDEyMFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTEyMHgxMjAucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTQ0eDE0NFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTE0NHgxNDQucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTUyeDE1MlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTgweDE4MFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTE4MHgxODAucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZVxcXCIgY29udGVudD1cXFwieWVzXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZVxcXCIgY29udGVudD1cXFwiYmxhY2stdHJhbnNsdWNlbnRcXFwiPlxcblx0XHQ8bWV0YSBuYW1lPVxcXCJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZVxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMjI4eDIyOFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9jb2FzdC0yMjh4MjI4LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMTZ4MTZcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi0xNngxNi5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImljb25cXFwiIHR5cGU9XFxcImltYWdlL3BuZ1xcXCIgc2l6ZXM9XFxcIjMyeDMyXFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tMzJ4MzIucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJpY29uXFxcIiB0eXBlPVxcXCJpbWFnZS9wbmdcXFwiIHNpemVzPVxcXCI5Nng5NlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLTk2eDk2LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMjMweDIzMFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLTIzMHgyMzAucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJzaG9ydGN1dCBpY29uXFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24uaWNvXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJ5YW5kZXgtdGFibGVhdS13aWRnZXRcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMveWFuZGV4LWJyb3dzZXItbWFuaWZlc3QuanNvblwiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcIm1zYXBwbGljYXRpb24tVGlsZUNvbG9yXFxcIiBjb250ZW50PVxcXCIjZmZmXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2VcXFwiIGNvbnRlbnQ9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvbXN0aWxlLTE0NHgxNDQucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwibXNhcHBsaWNhdGlvbi1jb25maWdcXFwiIGNvbnRlbnQ9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYnJvd3NlcmNvbmZpZy54bWxcIikpICsgXCJcXFwiPlxcblx0XHQ8bWV0YSBwcm9wZXJ0eT1cXFwidHdpdHRlcjppbWFnZVxcXCIgY29udGVudD1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy90d2l0dGVyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIHByb3BlcnR5PVxcXCJvZzppbWFnZVxcXCIgY29udGVudD1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9vcGVuLWdyYXBoLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHQ8L2hlYWQ+XFxuXHQ8Ym9keT5cXG5cdFx0PGRpdiBjbGFzcyA9IFxcXCJsb2FkaW5nXFxcIj5Mb2FkaW5nLi4uPC9kaXY+XFxuXHRcdDxkaXYgY2xhc3MgPSBcXFwiZXJyb3ItbXNnXFxcIj5cIiArIGVycm9yX21zZyArIFwiPC9kaXY+XFxuXHRcdDxpZnJhbWUgaWQ9XFxcImlmckRlc2lnbmVyXFxcIiBzcmM9XFxcIlxcXCIgd2lkdGg9XFxcIjEwMCVcXFwiIGhlaWdodD1cXFwiMTAwJVxcXCIgbndkaXNhYmxlPVxcXCJ0cnVlXFxcIiBmcmFtZWJvcmRlcj1cXFwibm9cXFwiIGJvcmRlcj1cXFwiMFxcXCIgbWFyZ2lud2lkdGg9XFxcIjBcXFwiIG1hcmdpbmhlaWdodD1cXFwiMFxcXCIgc2Nyb2xsaW5nPVxcXCJub1xcXCIgYWxsb3d0cmFuc3BhcmVuY3k9XFxcInllc1xcXCI+PC9pZnJhbWU+XFxuXHRcdDxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvbGliL2pxdWVyeS9qcXVlcnktMS4xMS4yLm1pbi5qc1wiKSkgKyBcIlxcXCI+PC9zY3JpcHQ+XFxuXHRcdDxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj5cXG5cdFx0XHR2YXIgZGVzaWduZXIgPSB7XFxuXHRcdFx0XHR1cmxRdWVyeTpmdW5jdGlvbihuYW1lKXtcXG5cdFx0XHRcdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAoXFxcIihefCYpXFxcIiArIG5hbWUgKyBcXFwiPShbXiZdKikoJnwkKVxcXCIpO1xcblx0XHRcdFx0XHR2YXIgciA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpLm1hdGNoKHJlZyk7XFxuXHRcdFx0XHRcdGlmIChyICE9IG51bGwpIHJldHVybiB1bmVzY2FwZShyWzJdKTtcXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XFxuXHRcdFx0XHR9LFxcblx0XHRcdFx0cnVuOmZ1bmN0aW9uKCl7XFxuXHRcdFx0XHRcdHZhciB1cmwgPSB0aGlzLnVybFF1ZXJ5KFxcXCJ1cmxcXFwiKTtcXG5cdFx0XHRcdFx0dXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCk7XFxuXHRcdFx0XHRcdFxcblx0XHRcdFx0XHRpZih1cmwpe1xcblx0XHRcdFx0XHRcdCQoXFxcIiNpZnJEZXNpZ25lclxcXCIpLmF0dHIoXFxcInNyY1xcXCIsdXJsKTtcXG5cdFx0XHRcdFx0fVxcblx0XHRcdFx0XHR2YXIgU3RlZWRvcyA9IHdpbmRvdy5vcGVuZXIuU3RlZWRvcyB8fCBudWxsO1xcblx0XHRcdFx0XHRpZiAoU3RlZWRvcykge1xcblx0XHRcdFx0XHRcdFN0ZWVkb3MuZm9yYmlkTm9kZUNvbnRleHRtZW51KHdpbmRvdyk7XFxuXHRcdFx0XHRcdH1cXG5cdFx0XHRcdH1cXG5cdFx0XHR9O1xcblx0XHRcdCQoZnVuY3Rpb24oKXtcXG5cdFx0XHRcdGRlc2lnbmVyLnJ1bigpO1xcblx0XHRcdH0pO1xcblx0XHQ8L3NjcmlwdD5cXG5cdDxib2R5PlxcbjwvaHRtbD5cIik7XG4gIH1cbn07XG5cbkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9kZXNpZ25lcj91cmw9OnVybCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHJldHVybiBEZXNpZ25lckFQSS5zZW5kSHRtbFJlc3BvbnNlKHJlcSwgcmVzKTtcbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9uZXh0U3RlcFVzZXJzXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XHJcblx0dmFyXHJcblx0XHRkZWFsX3R5cGUgPSByZXEucXVlcnkuZGVhbF90eXBlLFxyXG5cdFx0c3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxyXG5cdFx0ZXJyb3IgPSBcIlwiO1xyXG5cclxuXHRpZiAoIWRlYWxfdHlwZSB8fCAhc3BhY2VJZCkge1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHR2YXJcclxuXHRcdGJvZHkgPSByZXEuYm9keSxcclxuXHRcdG5leHRTdGVwVXNlcnMgPSBbXTtcclxuXHJcblxyXG5cdHN3aXRjaCAoZGVhbF90eXBlKSB7XHJcblx0XHRjYXNlICdzcGVjaWZ5VXNlcic6XHJcblx0XHRcdHZhciBzcGVjaWZ5VXNlcklkcyA9IGJvZHkuc3BlY2lmeVVzZXJJZHM7XHJcblxyXG5cdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXJzKHNwYWNlSWQsIHNwZWNpZnlVc2VySWRzKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdhcHBsaWNhbnRSb2xlJzpcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0YXBwbGljYW50SWQgPSBib2R5LmFwcGxpY2FudElkLFxyXG5cdFx0XHRcdGFwcHJvdmVSb2xlSWRzID0gYm9keS5hcHByb3ZlUm9sZUlkcztcclxuXHRcdFx0dmFyIGFwcGxpY2FudCA9IFdvcmtmbG93TWFuYWdlci5nZXRVc2VyKHNwYWNlSWQsIGFwcGxpY2FudElkKTtcclxuXHJcblx0XHRcdGlmIChhcHBsaWNhbnQpXHJcblx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyhzcGFjZUlkLCBhcHBsaWNhbnQub3JnYW5pemF0aW9ucywgYXBwcm92ZVJvbGVJZHMpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ2hyUm9sZSc6XHJcblx0XHRcdHZhciBhcHByb3ZlSHJSb2xlSWRzID0gYm9keS5hcHByb3ZlSHJSb2xlSWRzO1xyXG5cdFx0XHRpZiAoYXBwcm92ZUhyUm9sZUlkcylcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEhyUm9sZXNVc2VycyhzcGFjZUlkLCBhcHByb3ZlSHJSb2xlSWRzKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdhcHBsaWNhbnRTdXBlcmlvcic6XHJcblx0XHRcdHZhciBhcHBsaWNhbnRJZCA9IGJvZHkuYXBwbGljYW50SWQ7XHJcblx0XHRcdHZhciBhcHBsaWNhbnQgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcihzcGFjZUlkLCBhcHBsaWNhbnRJZCk7XHJcblx0XHRcdGlmIChhcHBsaWNhbnQubWFuYWdlcikge1xyXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgYXBwbGljYW50Lm1hbmFnZXIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnYXBwbGljYW50JzpcclxuXHRcdFx0dmFyIGFwcGxpY2FudElkID0gYm9keS5hcHBsaWNhbnRJZDtcclxuXHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRVc2VycyhzcGFjZUlkLCBhcHBsaWNhbnRJZCk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAndXNlckZpZWxkJzpcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0dXNlckZpZWxkID0gYm9keS51c2VyRmllbGQsXHJcblx0XHRcdFx0dXNlckZpZWxkVmFsdWUgPSBib2R5LnVzZXJGaWVsZFZhbHVlO1xyXG5cdFx0XHRpZiAodXNlckZpZWxkLmlzX211bHRpc2VsZWN0KSB7IC8v5aaC5p6c5aSa6YCJ77yM5LuldXNlckZpZWxkVmFsdWXlgLzkuLpBcnJheVxyXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgdXNlckZpZWxkVmFsdWUpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMucHVzaChXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcihzcGFjZUlkLCB1c2VyRmllbGRWYWx1ZSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnb3JnRmllbGQnOlxyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRvcmdzLFxyXG5cdFx0XHRcdG9yZ0NoaWxkcmVucyxcclxuXHRcdFx0XHRvcmdGaWVsZCA9IGJvZHkub3JnRmllbGQsXHJcblx0XHRcdFx0b3JnRmllbGRWYWx1ZSA9IGJvZHkub3JnRmllbGRWYWx1ZTtcclxuXHRcdFx0aWYgKG9yZ0ZpZWxkVmFsdWUpIHtcclxuXHRcdFx0XHRpZiAob3JnRmllbGQuaXNfbXVsdGlzZWxlY3QpIHsgLy/lpoLmnpzlpJrpgInvvIzku6VvcmdGaWVsZFZhbHVl5YC85Li6QXJyYXlcclxuXHRcdFx0XHRcdG9yZ3MgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9ucyhvcmdGaWVsZFZhbHVlKTtcclxuXHRcdFx0XHRcdG9yZ0NoaWxkcmVucyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zQ2hpbGRyZW5zKHNwYWNlSWQsIG9yZ0ZpZWxkVmFsdWUpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRvcmdzID0gW1dvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb24ob3JnRmllbGRWYWx1ZSldO1xyXG5cdFx0XHRcdFx0b3JnQ2hpbGRyZW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbkNoaWxkcmVucyhzcGFjZUlkLCBvcmdGaWVsZFZhbHVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zVXNlcnMoc3BhY2VJZCwgb3JnQ2hpbGRyZW5zKTtcclxuXHJcblx0XHRcdFx0b3JnRmllbGRVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zVXNlcnMoc3BhY2VJZCwgb3Jncyk7XHJcblxyXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBuZXh0U3RlcFVzZXJzLmNvbmNhdChvcmdGaWVsZFVzZXJzKTtcclxuXHJcblx0XHRcdFx0aWYgKCFuZXh0U3RlcFVzZXJzIHx8IG5leHRTdGVwVXNlcnMubGVuZ3RoIDwgMSkge1xyXG5cdFx0XHRcdFx0ZXJyb3IgPSBcIk9SR19OT19NRU1CRVJTXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVycm9yID0gXCJGSUVMRF9WQUxVRV9FTVBUWVwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ3NwZWNpZnlPcmcnOlxyXG5cdFx0XHR2YXIgc3BlY2lmeU9yZ0lkcyA9IGJvZHkuc3BlY2lmeU9yZ0lkcztcclxuXHRcdFx0dmFyIHNwZWNpZnlPcmdzID0gV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnMoc3BlY2lmeU9yZ0lkcyk7XHJcblx0XHRcdHZhciBzcGVjaWZ5T3JnQ2hpbGRyZW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnNDaGlsZHJlbnMoc3BhY2VJZCwgc3BlY2lmeU9yZ0lkcyk7XHJcblxyXG5cdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnNVc2VycyhzcGFjZUlkLCBzcGVjaWZ5T3Jncyk7XHJcblx0XHRcdG5leHRTdGVwVXNlcnMgPSBuZXh0U3RlcFVzZXJzLmNvbmNhdChXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc1VzZXJzKHNwYWNlSWQsIHNwZWNpZnlPcmdDaGlsZHJlbnMpKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICd1c2VyRmllbGRSb2xlJzpcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0dXNlckZpZWxkID0gYm9keS51c2VyRmllbGQsXHJcblx0XHRcdFx0dXNlckZpZWxkVmFsdWUgPSBib2R5LnVzZXJGaWVsZFZhbHVlLFxyXG5cdFx0XHRcdGFwcHJvdmVyUm9sZUlkcyA9IGJvZHkuYXBwcm92ZXJSb2xlSWRzO1xyXG5cdFx0XHRpZiAodXNlckZpZWxkVmFsdWUpIHtcclxuXHRcdFx0XHRpZiAodXNlckZpZWxkLmlzX211bHRpc2VsZWN0KSB7IC8v5aaC5p6c5aSa6YCJ77yM5LuldXNlckZpZWxkVmFsdWXlgLzkuLpBcnJheVxyXG5cdFx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRSb2xlVXNlcnNCeVVzZXJzQW5kUm9sZXMoc3BhY2VJZCwgdXNlckZpZWxkVmFsdWUsIGFwcHJvdmVyUm9sZUlkcyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0Um9sZVVzZXJzQnlVc2Vyc0FuZFJvbGVzKHNwYWNlSWQsIFt1c2VyRmllbGRWYWx1ZV0sIGFwcHJvdmVyUm9sZUlkcyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIW5leHRTdGVwVXNlcnMgfHwgbmV4dFN0ZXBVc2Vycy5sZW5ndGggPCAxKSB7XHJcblx0XHRcdFx0XHRlcnJvciA9IFwiUk9MRV9OT19NRU1CRVJTXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVycm9yID0gXCJGSUVMRF9WQUxVRV9FTVBUWVwiO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdvcmdGaWVsZFJvbGUnOlxyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRvcmdGaWVsZCA9IGJvZHkub3JnRmllbGQsXHJcblx0XHRcdFx0b3JnRmllbGRWYWx1ZSA9IGJvZHkub3JnRmllbGRWYWx1ZSxcclxuXHRcdFx0XHRhcHByb3ZlclJvbGVJZHMgPSBib2R5LmFwcHJvdmVyUm9sZUlkcztcclxuXHJcblx0XHRcdGlmIChvcmdGaWVsZFZhbHVlKSB7XHJcblx0XHRcdFx0aWYgKG9yZ0ZpZWxkLmlzX211bHRpc2VsZWN0KSB7IC8v5aaC5p6c5aSa6YCJ77yM5Lulb3JnRmllbGRWYWx1ZeWAvOS4ukFycmF5XHJcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5T3Jnc0FuZFJvbGVzKHNwYWNlSWQsIG9yZ0ZpZWxkVmFsdWUsIGFwcHJvdmVyUm9sZUlkcyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0Um9sZVVzZXJzQnlPcmdzQW5kUm9sZXMoc3BhY2VJZCwgW29yZ0ZpZWxkVmFsdWVdLCBhcHByb3ZlclJvbGVJZHMpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCFuZXh0U3RlcFVzZXJzIHx8IG5leHRTdGVwVXNlcnMubGVuZ3RoIDwgMSkge1xyXG5cdFx0XHRcdFx0ZXJyb3IgPSBcIlJPTEVfTk9fTUVNQkVSU1wiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlcnJvciA9IFwiRklFTERfVkFMVUVfRU1QVFlcIjtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdGJyZWFrO1xyXG5cdH1cclxuXHJcblx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cclxuXHRuZXh0U3RlcFVzZXJzLmZvckVhY2goZnVuY3Rpb24oc3UpIHtcclxuXHRcdGlmKHN1LnVzZXJfYWNjZXB0ZWQpe1xyXG5cdFx0XHR2YXIgbyA9IHtcclxuXHRcdFx0XHRpZDogc3UuaWQsXHJcblx0XHRcdFx0bmFtZTogc3UubmFtZVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRyZXN1bHQucHVzaChvKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0SnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0Y29kZTogMjAwLFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHQnbmV4dFN0ZXBVc2Vycyc6IFdvcmtmbG93TWFuYWdlci51bmlxVXNlcnMocmVzdWx0KSxcclxuXHRcdFx0J2Vycm9yJzogZXJyb3JcclxuXHRcdH1cclxuXHR9KTtcclxufSkiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldFNwYWNlVXNlcnNcIiwgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgdmFyXHJcbiAgICB1c2VySWRzID0gcmVxLmJvZHkudXNlcklkcyxcclxuICAgIHNwYWNlSWQgPSByZXEucXVlcnkuc3BhY2VJZCxcclxuICAgIHNwYWNlVXNlcnMgPSBbXVxyXG4gIDtcclxuXHJcbiAgaWYgKCF1c2VySWRzIHx8ICFzcGFjZUlkKSB7XHJcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcbiAgICAgIGNvZGU6IDIwMCxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgICdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNwYWNlVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgdXNlcklkcyk7XHJcblxyXG4gIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuICAgIGNvZGU6IDIwMCxcclxuICAgIGRhdGE6IHtcclxuICAgICAgJ3NwYWNlVXNlcnMnOiBzcGFjZVVzZXJzXHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pXHJcblxyXG5cclxuICBcclxuICAiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldEZvcm11bGFVc2VyT2JqZWN0c1wiLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuICB2YXJcclxuICAgIHVzZXJJZHMgPSByZXEuYm9keS51c2VySWRzLFxyXG4gICAgc3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxyXG4gICAgc3BhY2VVc2VycyA9IFtdXHJcbiAgO1xyXG5cclxuICBpZiAoIXVzZXJJZHMgfHwgIXNwYWNlSWQpIHtcclxuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuICAgICAgY29kZTogMjAwLFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgJ2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdmFyIHVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0KHNwYWNlSWQsIHVzZXJJZHMpO1xyXG5cclxuICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcbiAgICBjb2RlOiAyMDAsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICdzcGFjZVVzZXJzJzogdXNlcnNcclxuICAgIH1cclxuICB9KTtcclxufSlcclxuXHJcblxyXG4gIFxyXG4gICIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvaW5pdF9mb3JtdWxhX3ZhbHVlc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xyXG5cdHZhclxyXG5cdFx0ZmllbGRzID0gcmVxLmJvZHkuZmllbGRzLFxyXG5cdFx0YXV0b0Zvcm1Eb2MgPSByZXEuYm9keS5hdXRvRm9ybURvYyxcclxuXHRcdGFwcHJvdmVyID0gcmVxLmJvZHkuYXBwcm92ZXIsXHJcblx0XHRhcHBsaWNhbnQgPSByZXEuYm9keS5hcHBsaWNhbnQsXHJcblxyXG5cdFx0c3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxyXG5cclxuXHRcdHNwYWNlVXNlcnMgPSBbXTtcclxuXHJcblx0aWYgKCFmaWVsZHMgfHwgIXNwYWNlSWQgfHwgIWF1dG9Gb3JtRG9jIHx8ICFhcHByb3ZlciB8fCAhYXBwbGljYW50KSB7XHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGZvcm11bGFfdmFsdWVzID0gRm9ybV9mb3JtdWxhLmluaXRfZm9ybXVsYV92YWx1ZXMoZmllbGRzLCBhdXRvRm9ybURvYywgYXBwcm92ZXIsIGFwcGxpY2FudCwgc3BhY2VJZCk7XHJcblxyXG5cdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdGNvZGU6IDIwMCxcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0J2Zvcm11bGFfdmFsdWVzJzogZm9ybXVsYV92YWx1ZXNcclxuXHRcdH1cclxuXHR9KTtcclxufSlcclxuIiwiSnNvblJvdXRlcy5hZGQgXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9nZXROYW1lRm9yVXNlclwiLCAgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0dXNlcklkID0gcmVxLmJvZHkudXNlcklkXHJcblxyXG5cdFx0aWYgbm90IHVzZXJJZCBcclxuXHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywgXHJcblx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHR1c2VyID0gV29ya2Zsb3dNYW5hZ2VyLmdldE5hbWVGb3JVc2VyKHVzZXJJZClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCBcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7dXNlcjogdXNlcn1cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cclxuXHRcclxuXHRcdFxyXG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldE5hbWVGb3JVc2VyXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBlLCB1c2VyLCB1c2VySWQ7XG4gIHRyeSB7XG4gICAgdXNlcklkID0gcmVxLmJvZHkudXNlcklkO1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXNlciA9IFdvcmtmbG93TWFuYWdlci5nZXROYW1lRm9yVXNlcih1c2VySWQpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVzZXI6IHVzZXJcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL2FwaS9kZXNpZ25lci9zdGFydHVwJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0Y29tcGFueUlkID0gcmVxLnF1ZXJ5Py5jb21wYW55SWQgfHwgJydcclxuXHJcblx0XHRzcGFjZXNRdWVyeSA9IHsgYWRtaW5zOiBjdXJyZW50X3VzZXIgfVxyXG5cclxuXHRcdGlmIGNvbXBhbnlJZFxyXG5cdFx0XHRvcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoY29tcGFueUlkLCB7IGZpZWxkczogeyBzcGFjZToxIH0gfSlcclxuXHRcdFx0aWYgbm90IG9yZ1xyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NvbXBhbnlJZCBpcyBpbnZhbGlkJylcclxuXHJcblx0XHRcdHNwYWNlc1F1ZXJ5ID0geyBfaWQ6IG9yZy5zcGFjZSB9XHJcblxyXG5cdFx0c3BhY2VzID0gZGIuc3BhY2VzLmZpbmQoc3BhY2VzUXVlcnkpLmZldGNoKClcclxuXHJcblx0XHRzcGFjZUlkcyA9IF8ucGx1Y2sgc3BhY2VzLCAnX2lkJ1xyXG5cclxuXHRcdHF1ZXJ5ID0geyBzcGFjZTogeyAkaW46IHNwYWNlSWRzIH0gfVxyXG5cdFx0aWYgY29tcGFueUlkXHJcblx0XHRcdHF1ZXJ5LmNvbXBhbnlfaWQgPSBjb21wYW55SWRcclxuXHJcblx0XHRzcGFjZVVzZXJzID0gZGIuc3BhY2VfdXNlcnMuZmluZChxdWVyeSkuZmV0Y2goKVxyXG5cclxuXHRcdGZvcm1zID0gZGIuZm9ybXMuZmluZChxdWVyeSwgeyBmaWVsZHM6IHsgbmFtZToxLCBzdGF0ZToxLCBpc19kZWxldGVkOjEsIGlzX3ZhbGlkOjEsIHNwYWNlOjEsIGRlc2NyaXB0aW9uOjEsIGhlbHBfdGV4dDoxLFxyXG5cdFx0Y3JlYXRlZDoxLCBjcmVhdGVkX2J5OjEsIGN1cnJlbnQ6MSwgY2F0ZWdvcnk6MSwgaW5zdGFuY2Vfc3R5bGU6MSwgY29tcGFueV9pZDoxIH0gfSkuZmV0Y2goKVxyXG5cclxuXHRcdGZsb3dzID0gZGIuZmxvd3MuZmluZChxdWVyeSwgeyBmaWVsZHM6IHsgbmFtZToxLCBuYW1lX2Zvcm11bGE6MSwgY29kZV9mb3JtdWxhOjEsIHNwYWNlOjEsIGRlc2NyaXB0aW9uOjEsIGlzX3ZhbGlkOjEsIGZvcm06MSxcclxuXHRcdGZsb3d0eXBlOjEsIHN0YXRlOjEsIGlzX2RlbGV0ZWQ6MSwgY3JlYXRlZDoxLCBjcmVhdGVkX2J5OjEsIGhlbHBfdGV4dDoxLCBjdXJyZW50X25vOjEsIGN1cnJlbnQ6MSwgcGVybXM6MSwgZXJyb3JfbWVzc2FnZToxLCBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOjEsIGNvbXBhbnlfaWQ6MSB9IH0pLmZldGNoKClcclxuXHJcblx0XHRyb2xlcyA9IGRiLmZsb3dfcm9sZXMuZmluZChxdWVyeSkuZmV0Y2goKVxyXG5cclxuXHRcdG9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQocXVlcnkpLmZldGNoKClcclxuXHJcblx0XHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpXHJcblxyXG5cdFx0Y2F0ZWdvcmllcyA9IGRiLmNhdGVnb3JpZXMuZmluZCh7IHNwYWNlOiB7ICRpbjogc3BhY2VJZHMgfSB9KS5mZXRjaCgpXHJcblxyXG5cdFx0dXNlcklkcyA9IF8ucGx1Y2sgc3BhY2VVc2VycywgJ3VzZXInXHJcblx0XHR1c2VycyA9IGRiLnVzZXJzLmZpbmQoeyBfaWQ6IHsgJGluOiB1c2VySWRzIH0gfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pLmZldGNoKClcclxuXHJcblx0XHRyZXN1bHQgPSB7fVxyXG5cdFx0cmVzdWx0LlNwYWNlVXNlcnMgPSBzcGFjZVVzZXJzXHJcblx0XHRyZXN1bHQuVXNlcnMgPSB1c2Vyc1xyXG5cdFx0cmVzdWx0LkZvcm1zID0gZm9ybXNcclxuXHRcdHJlc3VsdC5GbG93cyA9IGZsb3dzXHJcblx0XHRyZXN1bHQuT3JnYW5pemF0aW9ucyA9IG9yZ2FuaXphdGlvbnNcclxuXHRcdHJlc3VsdC5Qb3NpdGlvbnMgPSBwb3NpdGlvbnNcclxuXHRcdHJlc3VsdC5Sb2xlcyA9IHJvbGVzXHJcblx0XHRyZXN1bHQuQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXNcclxuXHRcdHJlc3VsdC5TcGFjZXMgPSBzcGFjZXNcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdGRhdGE6IHJlc3VsdFxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfVxyXG5cclxuIiwiSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvYXBpL2Rlc2lnbmVyL3N0YXJ0dXAnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY2F0ZWdvcmllcywgY29tcGFueUlkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93cywgZm9ybXMsIG9yZywgb3JnYW5pemF0aW9ucywgcG9zaXRpb25zLCBxdWVyeSwgcmVmLCByZXN1bHQsIHJvbGVzLCBzcGFjZUlkcywgc3BhY2VVc2Vycywgc3BhY2VzLCBzcGFjZXNRdWVyeSwgdXNlcklkcywgdXNlcnM7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgY29tcGFueUlkID0gKChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuY29tcGFueUlkIDogdm9pZCAwKSB8fCAnJztcbiAgICBzcGFjZXNRdWVyeSA9IHtcbiAgICAgIGFkbWluczogY3VycmVudF91c2VyXG4gICAgfTtcbiAgICBpZiAoY29tcGFueUlkKSB7XG4gICAgICBvcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoY29tcGFueUlkLCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHNwYWNlOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFvcmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY29tcGFueUlkIGlzIGludmFsaWQnKTtcbiAgICAgIH1cbiAgICAgIHNwYWNlc1F1ZXJ5ID0ge1xuICAgICAgICBfaWQ6IG9yZy5zcGFjZVxuICAgICAgfTtcbiAgICB9XG4gICAgc3BhY2VzID0gZGIuc3BhY2VzLmZpbmQoc3BhY2VzUXVlcnkpLmZldGNoKCk7XG4gICAgc3BhY2VJZHMgPSBfLnBsdWNrKHNwYWNlcywgJ19pZCcpO1xuICAgIHF1ZXJ5ID0ge1xuICAgICAgc3BhY2U6IHtcbiAgICAgICAgJGluOiBzcGFjZUlkc1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGNvbXBhbnlJZCkge1xuICAgICAgcXVlcnkuY29tcGFueV9pZCA9IGNvbXBhbnlJZDtcbiAgICB9XG4gICAgc3BhY2VVc2VycyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQocXVlcnkpLmZldGNoKCk7XG4gICAgZm9ybXMgPSBkYi5mb3Jtcy5maW5kKHF1ZXJ5LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZTogMSxcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGlzX2RlbGV0ZWQ6IDEsXG4gICAgICAgIGlzX3ZhbGlkOiAxLFxuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgZGVzY3JpcHRpb246IDEsXG4gICAgICAgIGhlbHBfdGV4dDogMSxcbiAgICAgICAgY3JlYXRlZDogMSxcbiAgICAgICAgY3JlYXRlZF9ieTogMSxcbiAgICAgICAgY3VycmVudDogMSxcbiAgICAgICAgY2F0ZWdvcnk6IDEsXG4gICAgICAgIGluc3RhbmNlX3N0eWxlOiAxLFxuICAgICAgICBjb21wYW55X2lkOiAxXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICBmbG93cyA9IGRiLmZsb3dzLmZpbmQocXVlcnksIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBuYW1lOiAxLFxuICAgICAgICBuYW1lX2Zvcm11bGE6IDEsXG4gICAgICAgIGNvZGVfZm9ybXVsYTogMSxcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAxLFxuICAgICAgICBpc192YWxpZDogMSxcbiAgICAgICAgZm9ybTogMSxcbiAgICAgICAgZmxvd3R5cGU6IDEsXG4gICAgICAgIHN0YXRlOiAxLFxuICAgICAgICBpc19kZWxldGVkOiAxLFxuICAgICAgICBjcmVhdGVkOiAxLFxuICAgICAgICBjcmVhdGVkX2J5OiAxLFxuICAgICAgICBoZWxwX3RleHQ6IDEsXG4gICAgICAgIGN1cnJlbnRfbm86IDEsXG4gICAgICAgIGN1cnJlbnQ6IDEsXG4gICAgICAgIHBlcm1zOiAxLFxuICAgICAgICBlcnJvcl9tZXNzYWdlOiAxLFxuICAgICAgICBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxuICAgICAgICBjb21wYW55X2lkOiAxXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICByb2xlcyA9IGRiLmZsb3dfcm9sZXMuZmluZChxdWVyeSkuZmV0Y2goKTtcbiAgICBvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpO1xuICAgIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQocXVlcnkpLmZldGNoKCk7XG4gICAgY2F0ZWdvcmllcyA9IGRiLmNhdGVnb3JpZXMuZmluZCh7XG4gICAgICBzcGFjZToge1xuICAgICAgICAkaW46IHNwYWNlSWRzXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICB1c2VySWRzID0gXy5wbHVjayhzcGFjZVVzZXJzLCAndXNlcicpO1xuICAgIHVzZXJzID0gZGIudXNlcnMuZmluZCh7XG4gICAgICBfaWQ6IHtcbiAgICAgICAgJGluOiB1c2VySWRzXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU6IDFcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICAgIHJlc3VsdCA9IHt9O1xuICAgIHJlc3VsdC5TcGFjZVVzZXJzID0gc3BhY2VVc2VycztcbiAgICByZXN1bHQuVXNlcnMgPSB1c2VycztcbiAgICByZXN1bHQuRm9ybXMgPSBmb3JtcztcbiAgICByZXN1bHQuRmxvd3MgPSBmbG93cztcbiAgICByZXN1bHQuT3JnYW5pemF0aW9ucyA9IG9yZ2FuaXphdGlvbnM7XG4gICAgcmVzdWx0LlBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICByZXN1bHQuUm9sZXMgPSByb2xlcztcbiAgICByZXN1bHQuQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG4gICAgcmVzdWx0LlNwYWNlcyA9IHNwYWNlcztcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YTogcmVzdWx0XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L2VuZ2luZScsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0FwcHJvdmFscyddLCAoYXBwcm92ZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0dXVmbG93TWFuYWdlci53b3JrZmxvd19lbmdpbmUoYXBwcm92ZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8sIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YToge31cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L2VuZ2luZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnQXBwcm92YWxzJ10sIGZ1bmN0aW9uKGFwcHJvdmVfZnJvbV9jbGllbnQpIHtcbiAgICAgIHJldHVybiB1dWZsb3dNYW5hZ2VyLndvcmtmbG93X2VuZ2luZShhcHByb3ZlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbywgY3VycmVudF91c2VyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvZHJhZnRzJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cclxuXHRcdGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheVxyXG5cclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0bmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRcdG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7IF9pZDogbmV3X2luc19pZCB9LCB7IGZpZWxkczogeyBzcGFjZTogMSwgZmxvdzogMSwgZmxvd192ZXJzaW9uOiAxLCBmb3JtOiAxLCBmb3JtX3ZlcnNpb246IDEgfSB9KVxyXG5cclxuXHRcdFx0aW5zZXJ0ZWRfaW5zdGFuY2VzLnB1c2gobmV3X2lucylcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGluc2VydHM6IGluc2VydGVkX2luc3RhbmNlcyB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxyXG5cdFx0fVxyXG5cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9kcmFmdHMnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGEsIGluc2VydGVkX2luc3RhbmNlcztcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIG5ld19pbnMsIG5ld19pbnNfaWQ7XG4gICAgICBuZXdfaW5zX2lkID0gdXVmbG93TWFuYWdlci5jcmVhdGVfaW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnQsIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgIG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogbmV3X2luc19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICBmbG93OiAxLFxuICAgICAgICAgIGZsb3dfdmVyc2lvbjogMSxcbiAgICAgICAgICBmb3JtOiAxLFxuICAgICAgICAgIGZvcm1fdmVyc2lvbjogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbnNlcnRlZF9pbnN0YW5jZXMucHVzaChuZXdfaW5zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBpbnNlcnRzOiBpbnNlcnRlZF9pbnN0YW5jZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVtb3ZlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cclxuXHRcdGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheVxyXG5cclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0IyDojrflj5bkuIDkuKppbnN0YW5jZVxyXG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2VcclxuXHRcdFx0IyDojrflj5bkuIDkuKpzcGFjZVxyXG5cdFx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2XkuIvnmoTkuIDkuKp1c2VyXHJcblx0XHRcdHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogaW5zdGFuY2UuZmxvd30pXHJcblxyXG5cdFx0XHRzcGFjZVVzZXJPcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcclxuXHRcdFx0XHRfaWQ6IHtcclxuXHRcdFx0XHRcdCRpbjogc3BhY2VfdXNlci5vcmdhbml6YXRpb25zXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KS5mZXRjaCgpO1xyXG5cclxuXHRcdFx0IyDliKTmlq3kuIDkuKrnlKjmiLfmmK/lkKbmmK/kuIDkuKppbnN0YW5jZeeahOaPkOS6pOiAheaIluiAheeUs+ivt+S6uiDmiJZTcGFjZUFkbWluXHJcblx0XHRcdGlmIChpbnN0YW5jZS5zdWJtaXR0ZXIgaXNudCBjdXJyZW50X3VzZXIpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyBjdXJyZW50X3VzZXIpIGFuZCAhV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGZsb3csIHNwYWNlX3VzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpXHJcblx0XHRcdFx0dGhyb3cgbmV3ICBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oKo5LiN6IO95Yig6Zmk5q2k55Sz6K+35Y2V44CCXCIpXHJcblxyXG5cdFx0XHRkZWxldGVfb2JqID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblx0XHRcdGRlbGV0ZV9vYmouZGVsZXRlZCA9IG5ldyBEYXRlXHJcblx0XHRcdGRlbGV0ZV9vYmouZGVsZXRlZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cclxuXHRcdFx0ZGIuZGVsZXRlZF9pbnN0YW5jZXMuaW5zZXJ0KGRlbGV0ZV9vYmopXHJcblxyXG5cdFx0XHQjIOWIoOmZpGluc3RhbmNlXHJcblx0XHRcdGRiLmluc3RhbmNlcy5yZW1vdmUoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblxyXG5cdFx0XHRpZiBkZWxldGVfb2JqLnN0YXRlIGlzbnQgXCJkcmFmdFwiXHJcblx0XHRcdFx0I+WPkemAgee7meW+heWkhOeQhuS6uiwgI+WPkemAgee7meiiq+S8oOmYheS6ulxyXG5cdFx0XHRcdGluYm94X3VzZXJzID0gaWYgZGVsZXRlX29iai5pbmJveF91c2VycyB0aGVuIGRlbGV0ZV9vYmouaW5ib3hfdXNlcnMgZWxzZSBbXVxyXG5cdFx0XHRcdGNjX3VzZXJzID0gaWYgZGVsZXRlX29iai5jY191c2VycyB0aGVuIGRlbGV0ZV9vYmouY2NfdXNlcnMgZWxzZSBbXVxyXG5cdFx0XHRcdHVzZXJfaWRzID0gXy51bmlxKGluYm94X3VzZXJzLmNvbmNhdChjY191c2VycykpXHJcblx0XHRcdFx0Xy5lYWNoIHVzZXJfaWRzLCAodV9pZCktPlxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwidGVybWluYXRlX2FwcHJvdmFsXCIsIHVfaWQpXHJcblxyXG5cdFx0XHRcdCMg5Y+R6YCB5Yig6Zmk6YCa55+l6YKu5Lu257uZ6YCa6L+H5qCh6aqM55qE55Sz6K+35Lq6L+Whq+WNleS6uu+8jOWvueeUs+ivt+S6ui/loavljZXkurrlkITnlJ/miJDkuIDmnaFzbXRwIG1lc3NhZ2VcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcIm1vbml0b3JfZGVsZXRlX2FwcGxpY2FudFwiLCBkZWxldGVfb2JqLCBcIlwiLCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBpbnNlcnRzOiBpbnNlcnRlZF9pbnN0YW5jZXN9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuXHRcclxuXHRcdCIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVtb3ZlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhLCBpbnNlcnRlZF9pbnN0YW5jZXM7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBpbnNlcnRlZF9pbnN0YW5jZXMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBjY191c2VycywgZGVsZXRlX29iaiwgZmxvdywgaW5ib3hfdXNlcnMsIGluc3RhbmNlLCBzcGFjZSwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucywgc3BhY2VfaWQsIHNwYWNlX3VzZXIsIHVzZXJfaWRzO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKTtcbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICBzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgICAgc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlLmZsb3dcbiAgICAgIH0pO1xuICAgICAgc3BhY2VVc2VyT3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogc3BhY2VfdXNlci5vcmdhbml6YXRpb25zXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBpZiAoKGluc3RhbmNlLnN1Ym1pdHRlciAhPT0gY3VycmVudF91c2VyKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSAmJiAhV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGZsb3csIHNwYWNlX3VzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oKo5LiN6IO95Yig6Zmk5q2k55Sz6K+35Y2V44CCXCIpO1xuICAgICAgfVxuICAgICAgZGVsZXRlX29iaiA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKTtcbiAgICAgIGRlbGV0ZV9vYmouZGVsZXRlZCA9IG5ldyBEYXRlO1xuICAgICAgZGVsZXRlX29iai5kZWxldGVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgZGIuZGVsZXRlZF9pbnN0YW5jZXMuaW5zZXJ0KGRlbGV0ZV9vYmopO1xuICAgICAgZGIuaW5zdGFuY2VzLnJlbW92ZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICBpZiAoZGVsZXRlX29iai5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICAgIGluYm94X3VzZXJzID0gZGVsZXRlX29iai5pbmJveF91c2VycyA/IGRlbGV0ZV9vYmouaW5ib3hfdXNlcnMgOiBbXTtcbiAgICAgICAgY2NfdXNlcnMgPSBkZWxldGVfb2JqLmNjX3VzZXJzID8gZGVsZXRlX29iai5jY191c2VycyA6IFtdO1xuICAgICAgICB1c2VyX2lkcyA9IF8udW5pcShpbmJveF91c2Vycy5jb25jYXQoY2NfdXNlcnMpKTtcbiAgICAgICAgXy5lYWNoKHVzZXJfaWRzLCBmdW5jdGlvbih1X2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1X2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcIm1vbml0b3JfZGVsZXRlX2FwcGxpY2FudFwiLCBkZWxldGVfb2JqLCBcIlwiLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgaW5zZXJ0czogaW5zZXJ0ZWRfaW5zdGFuY2VzXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L3N1Ym1pdCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHRcdHJlc3VsdCA9IFtdXHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdHIgPSB1dWZsb3dNYW5hZ2VyLnN1Ym1pdF9pbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdGlmIHIuYWxlcnRzXHJcblx0XHRcdFx0cmVzdWx0LnB1c2gocilcclxuXHRcdFx0aWYgbm90IF8uaXNFbXB0eShpbnN0YW5jZV9mcm9tX2NsaWVudFsnaW5ib3hfdXNlcnMnXSlcclxuXHRcdFx0XHQjIOWmguaenOaYr+i9rOWPkeWwsemcgOimgee7meW9k+WJjeeUqOaIt+WPkemAgXB1c2gg6YeN5paw6K6h566XYmFkZ2VcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyKTtcclxuXHJcblx0XHRcdGlmIF8uaXNFbXB0eShyLmFsZXJ0cylcclxuXHRcdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50Ll9pZClcclxuXHRcdFx0XHRmbG93X2lkID0gaW5zdGFuY2UuZmxvd1xyXG5cdFx0XHRcdGN1cnJlbnRfYXBwcm92ZSA9IGluc3RhbmNlX2Zyb21fY2xpZW50LnRyYWNlc1swXS5hcHByb3Zlc1swXVxyXG5cdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGZsb3dfaWQsIGluc3RhbmNlLCBjdXJyZW50X2FwcHJvdmUsICdkcmFmdF9zdWJtaXQnLCBjdXJyZW50X3VzZXIsIGluc3RhbmNlLmluYm94X3VzZXJzKVxyXG5cclxuXHRcdFx0IyDliKTmlq3nlLPor7fljZXmmK/lkKbliIblj5HvvIzliIblj5Hmlofku7bnu5PmnZ/mj5DphpLlj5HotbfkurpcclxuXHRcdFx0dXVmbG93TWFuYWdlci5kaXN0cmlidXRlZEluc3RhbmNlc1JlbWluZChpbnN0YW5jZV9mcm9tX2NsaWVudClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdGRhdGE6IHsgcmVzdWx0OiByZXN1bHQgfVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfVxyXG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L3N1Ym1pdCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YSwgcmVzdWx0O1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgcmVzdWx0ID0gW107XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBjdXJyZW50X2FwcHJvdmUsIGZsb3dfaWQsIGluc3RhbmNlLCByO1xuICAgICAgciA9IHV1Zmxvd01hbmFnZXIuc3VibWl0X2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICBpZiAoci5hbGVydHMpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocik7XG4gICAgICB9XG4gICAgICBpZiAoIV8uaXNFbXB0eShpbnN0YW5jZV9mcm9tX2NsaWVudFsnaW5ib3hfdXNlcnMnXSkpIHtcbiAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIGN1cnJlbnRfdXNlcik7XG4gICAgICB9XG4gICAgICBpZiAoXy5pc0VtcHR5KHIuYWxlcnRzKSkge1xuICAgICAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50Ll9pZCk7XG4gICAgICAgIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xuICAgICAgICBjdXJyZW50X2FwcHJvdmUgPSBpbnN0YW5jZV9mcm9tX2NsaWVudC50cmFjZXNbMF0uYXBwcm92ZXNbMF07XG4gICAgICAgIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGZsb3dfaWQsIGluc3RhbmNlLCBjdXJyZW50X2FwcHJvdmUsICdkcmFmdF9zdWJtaXQnLCBjdXJyZW50X3VzZXIsIGluc3RhbmNlLmluYm94X3VzZXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1dWZsb3dNYW5hZ2VyLmRpc3RyaWJ1dGVkSW5zdGFuY2VzUmVtaW5kKGluc3RhbmNlX2Zyb21fY2xpZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy90ZXJtaW5hdGUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdHRlcm1pbmF0ZV9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRlcm1pbmF0ZV9yZWFzb25cIl1cclxuXHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qmluc3RhbmNlXHJcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdFx0XHRmbG93X2lkID0gaW5zdGFuY2UuZmxvd1xyXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNlXHJcblx0XHRcdHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdFx0IyDojrflj5bkuIDkuKpmbG93XHJcblx0XHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coZmxvd19pZClcclxuXHRcdFx0IyDliKTmlq3kuIDkuKppbnN0YW5jZeaYr+WQpuS4uuWuoeaguOS4reeKtuaAgVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VQZW5kaW5nKGluc3RhbmNlKVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNl5LiL55qE5LiA5LiqdXNlclxyXG5cdFx0XHRzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0IyDojrflj5ZzcGFjZV91c2Vy5omA5Zyo55qE6YOo6Zeo5L+h5oGvXHJcblx0XHRcdHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcclxuXHRcdFx0IyDojrflj5bnu5PmnZ/oioLngrlcclxuXHRcdFx0aW5zdGFuY2VfZmxvd192ZXIgPSBudWxsXHJcblx0XHRcdGZsb3dfdmVyX2VuZF9zdGVwID0gbnVsbFxyXG5cdFx0XHRmbG93X3ZlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0Zmxvd192ZXJzLnB1c2goZmxvdy5jdXJyZW50KVxyXG5cdFx0XHRmbG93X3ZlcnMgPSBmbG93X3ZlcnMuY29uY2F0KGZsb3cuaGlzdG9yeXMpXHJcblx0XHRcdGluc3RhbmNlX2Zsb3dfdmVyID0gXy5maW5kKGZsb3dfdmVycywgKGZfdmVyKS0+XHJcblx0XHRcdFx0cmV0dXJuIGZfdmVyLl9pZCBpcyBpbnN0YW5jZS5mbG93X3ZlcnNpb25cclxuXHRcdFx0KVxyXG5cdFx0XHRpZiBub3QgaW5zdGFuY2VfZmxvd192ZXJcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNleWvueW6lOa1geeoi+eJiOacrFwiKVxyXG5cdFx0XHRmbG93X3Zlcl9lbmRfc3RlcCA9IF8uZmluZChpbnN0YW5jZV9mbG93X3Zlci5zdGVwcywgKGZfc3RlcCktPlxyXG5cdFx0XHRcdHJldHVybiBmX3N0ZXAuc3RlcF90eXBlIGlzIFwiZW5kXCJcclxuXHRcdFx0KVxyXG5cdFx0XHQjIOiwg+eUqGdldEZsb3dQZXJtaXNzaW9uc+aWueazle+8jOeci+i/lOWbnueahOe7k+aenOS4reaYr+WQpuaciWFkbWluXHJcblx0XHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHQjIHNwYWNl55qEYWRtaW4sIOWhq+WNleS6uiDnlLPor7fkurog5pyJ5p2D6ZmQIOWPlua2iOeUs+ivt1xyXG5cdFx0XHRpZiBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpIG9yIHNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpIG9yIGluc3RhbmNlLnN1Ym1pdHRlciBpcyBjdXJyZW50X3VzZXIgb3IgaW5zdGFuY2UuYXBwbGljYW50IGlzIGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdGlmIG5vdCB0ZXJtaW5hdGVfcmVhc29uXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLFwi6L+Y5pyq5aGr5YaZ5by65Yi257uT5p2f55Sz6K+35Y2V55qE55CG55Sx77yM5pON5L2c5aSx6LSlXCIpXHJcblxyXG5cdFx0XHRcdGluc3RhbmNlX3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgKHRyYWNlKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlc1xyXG5cdFx0XHRcdGkgPSAwXHJcblx0XHRcdFx0d2hpbGUgaSA8IHRyYWNlcy5sZW5ndGhcclxuXHRcdFx0XHRcdGlmIHRyYWNlc1tpXS5pc19maW5pc2hlZCBpcyBmYWxzZVxyXG5cdFx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0XHRcdHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0dHJhY2VzW2ldLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdGggPSAwXHJcblx0XHRcdFx0XHRcdHdoaWxlIGggPCB0cmFjZXNbaV0uYXBwcm92ZXMubGVuZ3RoXHJcblx0XHRcdFx0XHRcdFx0aWYgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkIGlzIGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmp1ZGdlID0gbnVsbFxyXG5cdFx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmRlc2NyaXB0aW9uID0gbnVsbFxyXG5cdFx0XHRcdFx0XHRcdGgrK1xyXG5cdFx0XHRcdFx0XHQjIOaPkuWFpeW9k+WJjVRyYWNlIHRyYWNlLmFwcHJvdmXorrDlvZXvvJrlvZN0cmFjZS50eXBl5Li65Y+W5Zue44CB5by65Yi257uT5p2f5pe277yMaXNfcmVhZD10cnVl5LiUcmVhZF9kYXRl5Li65b2T5YmN5pe26Ze044CCXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IGluc3RhbmNlX3RyYWNlLl9pZFxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLnVzZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl1cclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBpbnN0YW5jZV90cmFjZS5kdWVfZGF0ZVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19yZWFkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmRlc2NyaXB0aW9uID0gdGVybWluYXRlX3JlYXNvblxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuY29zdF90aW1lID0gbmV3QXBwcm92ZS5maW5pc2hfZGF0ZSAtIG5ld0FwcHJvdmUuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKVxyXG5cdFx0XHRcdFx0aSsrXHJcblxyXG5cdFx0XHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2XorrDlvZVcclxuXHRcdFx0XHRuZXdUcmFjZSA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdFx0bmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRcdG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtpbnN0YW5jZV90cmFjZS5faWRdXHJcblx0XHRcdFx0IyB0eXBlLS0t5YGc55SoXHJcblx0XHRcdFx0IyBuZXdUcmFjZS50eXBlID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGVwID0gZmxvd192ZXJfZW5kX3N0ZXAuX2lkXHJcblx0XHRcdFx0bmV3VHJhY2UubmFtZSA9IGZsb3dfdmVyX2VuZF9zdGVwLm5hbWVcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3VHJhY2UuZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdUcmFjZS5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblxyXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwiY29tcGxldGVkXCJcclxuXHRcdFx0XHRzZXRPYmouZmluYWxfZGVjaXNpb24gPSBcInRlcm1pbmF0ZWRcIlxyXG5cdFx0XHRcdG9sZF9pbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzXHJcblx0XHRcdFx0b2xkX2NjX3VzZXJzID0gaW5zdGFuY2UuY2NfdXNlcnMgfHwgW11cclxuXHRcdFx0XHRvbGRfb3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzXHJcblx0XHRcdFx0dGVtcFVzZXJzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0Xy5lYWNoKGluc3RhbmNlX3RyYWNlLmFwcHJvdmVzLCAobmZ0X2FwcHJvdmUpLT5cclxuXHRcdFx0XHRcdHRlbXBVc2Vycy5wdXNoKG5mdF9hcHByb3ZlLnVzZXIpXHJcblx0XHRcdFx0XHR0ZW1wVXNlcnMucHVzaChuZnRfYXBwcm92ZS5oYW5kbGVyKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQodGVtcFVzZXJzKSlcclxuXHRcdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRzZXRPYmouY2NfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHR0cmFjZXMucHVzaChuZXdUcmFjZSlcclxuXHRcdFx0XHRzZXRPYmoudHJhY2VzID0gdHJhY2VzXHJcblxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IGZsb3dfdmVyX2VuZF9zdGVwLm5hbWVcclxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gZmFsc2VcclxuXHJcblx0XHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHNldDogc2V0T2JqfSlcclxuXHRcdFx0XHRpZiByXHJcblx0XHRcdFx0XHRpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRcdFx0I+mAmuefpeWhq+WNleS6uuOAgeeUs+ivt+S6ulxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJzdWJtaXRfdGVybWluYXRlX2FwcGxpY2FudFwiLCBpbnMsIHRlcm1pbmF0ZV9yZWFzb24sIGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cclxuXHRcdFx0XHRcdCPlj5HpgIHnu5nlvoXlpITnkIbkurog6KKr5Lyg6ZiF5Lq6XHJcblx0XHRcdFx0XHRpZiBvbGRfaW5ib3hfdXNlcnNcclxuXHRcdFx0XHRcdFx0Xy5lYWNoKF8udW5pcShvbGRfaW5ib3hfdXNlcnMuY29uY2F0KG9sZF9jY191c2VycykpLCAodXNlcl9pZCktPlxyXG5cdFx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1c2VyX2lkKVxyXG5cdFx0XHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3Rlcm1pbmF0ZScsIGN1cnJlbnRfdXNlciwgW10pXHJcblxyXG5cdFx0I+WPkemAgea2iOaBr+e7meW9k+WJjeeUqOaIt1xyXG5cdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbylcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0ZGF0YToge31cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy90ZXJtaW5hdGUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGE7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIGZsb3csIGZsb3dfaWQsIGZsb3dfdmVyX2VuZF9zdGVwLCBmbG93X3ZlcnMsIGgsIGksIGlucywgaW5zdGFuY2UsIGluc3RhbmNlX2Zsb3dfdmVyLCBpbnN0YW5jZV9pZCwgaW5zdGFuY2VfdHJhY2UsIG5ld0FwcHJvdmUsIG5ld1RyYWNlLCBub3csIG9sZF9jY191c2Vycywgb2xkX2luYm94X3VzZXJzLCBvbGRfb3V0Ym94X3VzZXJzLCBwZXJtaXNzaW9ucywgciwgc2V0T2JqLCBzcGFjZSwgc3BhY2VfaWQsIHNwYWNlX3VzZXIsIHNwYWNlX3VzZXJfb3JnX2luZm8sIHRlbXBVc2VycywgdGVybWluYXRlX3JlYXNvbiwgdHJhY2VzO1xuICAgICAgdGVybWluYXRlX3JlYXNvbiA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1widGVybWluYXRlX3JlYXNvblwiXTtcbiAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl07XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgICAgIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xuICAgICAgc3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coZmxvd19pZCk7XG4gICAgICB1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VQZW5kaW5nKGluc3RhbmNlKTtcbiAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcik7XG4gICAgICBpbnN0YW5jZV9mbG93X3ZlciA9IG51bGw7XG4gICAgICBmbG93X3Zlcl9lbmRfc3RlcCA9IG51bGw7XG4gICAgICBmbG93X3ZlcnMgPSBuZXcgQXJyYXk7XG4gICAgICBmbG93X3ZlcnMucHVzaChmbG93LmN1cnJlbnQpO1xuICAgICAgZmxvd192ZXJzID0gZmxvd192ZXJzLmNvbmNhdChmbG93Lmhpc3RvcnlzKTtcbiAgICAgIGluc3RhbmNlX2Zsb3dfdmVyID0gXy5maW5kKGZsb3dfdmVycywgZnVuY3Rpb24oZl92ZXIpIHtcbiAgICAgICAgcmV0dXJuIGZfdmVyLl9pZCA9PT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWluc3RhbmNlX2Zsb3dfdmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5om+5Yiw55Sz6K+35Y2V5a+55bqU5rWB56iL54mI5pysXCIpO1xuICAgICAgfVxuICAgICAgZmxvd192ZXJfZW5kX3N0ZXAgPSBfLmZpbmQoaW5zdGFuY2VfZmxvd192ZXIuc3RlcHMsIGZ1bmN0aW9uKGZfc3RlcCkge1xuICAgICAgICByZXR1cm4gZl9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJlbmRcIjtcbiAgICAgIH0pO1xuICAgICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoZmxvd19pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgIGlmIChwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpIHx8IHNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpIHx8IGluc3RhbmNlLnN1Ym1pdHRlciA9PT0gY3VycmVudF91c2VyIHx8IGluc3RhbmNlLmFwcGxpY2FudCA9PT0gY3VycmVudF91c2VyKSB7XG4gICAgICAgIGlmICghdGVybWluYXRlX3JlYXNvbikge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi6L+Y5pyq5aGr5YaZ5by65Yi257uT5p2f55Sz6K+35Y2V55qE55CG55Sx77yM5pON5L2c5aSx6LSlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlX3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgICByZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgPT09IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0cmFjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHRyYWNlc1tpXS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0cmFjZXNbaV0uZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICBoID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChoIDwgdHJhY2VzW2ldLmFwcHJvdmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBpZiAodHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5qdWRnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmRlc2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBoKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdBcHByb3ZlID0gbmV3IE9iamVjdDtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUudHJhY2UgPSBpbnN0YW5jZV90cmFjZS5faWQ7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5kdWVfZGF0ZSA9IGluc3RhbmNlX3RyYWNlLmR1ZV9kYXRlO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5yZWFkX2RhdGUgPSBub3c7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5kZXNjcmlwdGlvbiA9IHRlcm1pbmF0ZV9yZWFzb247XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmNvc3RfdGltZSA9IG5ld0FwcHJvdmUuZmluaXNoX2RhdGUgLSBuZXdBcHByb3ZlLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIG5ld1RyYWNlID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgbmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2luc3RhbmNlX3RyYWNlLl9pZF07XG4gICAgICAgIG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RlcCA9IGZsb3dfdmVyX2VuZF9zdGVwLl9pZDtcbiAgICAgICAgbmV3VHJhY2UubmFtZSA9IGZsb3dfdmVyX2VuZF9zdGVwLm5hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICBuZXdUcmFjZS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICBzZXRPYmouc3RhdGUgPSBcImNvbXBsZXRlZFwiO1xuICAgICAgICBzZXRPYmouZmluYWxfZGVjaXNpb24gPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgb2xkX2luYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnM7XG4gICAgICAgIG9sZF9jY191c2VycyA9IGluc3RhbmNlLmNjX3VzZXJzIHx8IFtdO1xuICAgICAgICBvbGRfb3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzO1xuICAgICAgICB0ZW1wVXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIF8uZWFjaChpbnN0YW5jZV90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24obmZ0X2FwcHJvdmUpIHtcbiAgICAgICAgICB0ZW1wVXNlcnMucHVzaChuZnRfYXBwcm92ZS51c2VyKTtcbiAgICAgICAgICByZXR1cm4gdGVtcFVzZXJzLnB1c2gobmZ0X2FwcHJvdmUuaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQodGVtcFVzZXJzKSk7XG4gICAgICAgIHNldE9iai5pbmJveF91c2VycyA9IG5ldyBBcnJheTtcbiAgICAgICAgc2V0T2JqLmNjX3VzZXJzID0gbmV3IEFycmF5O1xuICAgICAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgdHJhY2VzLnB1c2gobmV3VHJhY2UpO1xuICAgICAgICBzZXRPYmoudHJhY2VzID0gdHJhY2VzO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBmbG93X3Zlcl9lbmRfc3RlcC5uYW1lO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gZmFsc2U7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJzdWJtaXRfdGVybWluYXRlX2FwcGxpY2FudFwiLCBpbnMsIHRlcm1pbmF0ZV9yZWFzb24sIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgICBpZiAob2xkX2luYm94X3VzZXJzKSB7XG4gICAgICAgICAgICBfLmVhY2goXy51bmlxKG9sZF9pbmJveF91c2Vycy5jb25jYXQob2xkX2NjX3VzZXJzKSksIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1c2VyX2lkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICd0ZXJtaW5hdGUnLCBjdXJyZW50X3VzZXIsIFtdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7fVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWFzc2lnbicsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFsnX2lkJ11cclxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0XHRcdCMg6aqM6K+BaW5zdGFuY2XkuLrlrqHmoLjkuK3nirbmgIFcclxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSlcclxuXHRcdFx0IyDpqozor4HlvZPliY3miafooYzovaznrb7moLjnmoR0cmFjZeacque7k+adn1xyXG5cdFx0XHRsYXN0X3RyYWNlX2Zyb21fY2xpZW50ID0gXy5sYXN0KGluc3RhbmNlX2Zyb21fY2xpZW50W1widHJhY2VzXCJdKVxyXG5cdFx0XHRsYXN0X3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgKHQpIC0+XHJcblx0XHRcdFx0cmV0dXJuIHQuX2lkIGlzIGxhc3RfdHJhY2VfZnJvbV9jbGllbnRbXCJfaWRcIl1cclxuXHRcdFx0KVxyXG5cdFx0XHRpZiBsYXN0X3RyYWNlLmlzX2ZpbmlzaGVkIGlzIHRydWVcclxuXHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdCMg6aqM6K+BbG9naW4gdXNlcl9pZOWvueivpea1geeoi+acieeuoeeQhueUs+ivt+WNleeahOadg+mZkFxyXG5cdFx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoeyBfaWQ6IHNwYWNlX2lkIH0sIHsgZmllbGRzOiB7IGFkbWluczogMSB9IH0pXHJcblx0XHRcdGlmIChub3QgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgYW5kIChub3Qgc3BhY2UuYWRtaW5zLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIilcclxuXHJcblx0XHRcdGluYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnNcclxuXHRcdFx0aW5ib3hfdXNlcnNfZnJvbV9jbGllbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImluYm94X3VzZXJzXCJdXHJcblx0XHRcdHJlYXNzaWduX3JlYXNvbiA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVhc3NpZ25fcmVhc29uXCJdXHJcblx0XHRcdG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQpXHJcblx0XHRcdG5ld19pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2Vyc19mcm9tX2NsaWVudCwgaW5ib3hfdXNlcnMpXHJcblx0XHRcdCMg6IulYXNzaWduZWU95Y6faW5ib3hfdXNlcnPvvIzor7TmmI7kuI3pnIDopoHmiafooYzovaznrb7moLjvvIzns7vnu5/ku4DkuYjpg73kuI3lgZpcclxuXHRcdFx0cmV0dXJuIGlmIG5vdF9pbl9pbmJveF91c2Vycy5sZW5ndGggaXMgMCBhbmQgbmV3X2luYm94X3VzZXJzLmxlbmd0aCBpcyAwXHJcblx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0aSA9IDBcclxuXHRcdFx0YXBwcm92ZV91c2Vyc19oYW5kbGVycyA9IFtdXHJcblx0XHRcdHdoaWxlIGkgPCBsYXN0X3RyYWNlLmFwcHJvdmVzLmxlbmd0aFxyXG5cdFx0XHRcdGlmIG5vdF9pbl9pbmJveF91c2Vycy5pbmNsdWRlcyhsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmhhbmRsZXIpXHJcblx0XHRcdFx0XHRpZiBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmlzX2ZpbmlzaGVkIGlzIGZhbHNlIGFuZCBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnR5cGUgaXNudCBcImNjXCIgYW5kIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0udHlwZSBpc250IFwiZGlzdHJpYnV0ZVwiXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0bGFzdF90cmFjZS5hcHByb3Zlc1tpXS5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZGVzY3JpcHRpb24gPSBcIlwiXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uY29zdF90aW1lID0gbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5maW5pc2hfZGF0ZSAtIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHRhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLnB1c2gobGFzdF90cmFjZS5hcHByb3Zlc1tpXS51c2VyKVxyXG5cdFx0XHRcdFx0XHRhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLnB1c2gobGFzdF90cmFjZS5hcHByb3Zlc1tpXS5oYW5kbGVyKVxyXG5cdFx0XHRcdGkrK1xyXG5cdFx0XHQjIOWcqOWQjOS4gHRyYWNl5LiL5o+S5YWl6L2s562+5qC45pON5L2c6ICF55qEYXBwcm92ZeiusOW9lVxyXG5cdFx0XHRjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uIH0sIHsgZmllbGRzOiB7IG5hbWU6IDEsIGZ1bGxuYW1lOiAxIH0gfSlcclxuXHRcdFx0YXNzaWduZWVfYXBwciA9IG5ldyBPYmplY3RcclxuXHRcdFx0YXNzaWduZWVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaW5zdGFuY2UgPSBsYXN0X3RyYWNlLmluc3RhbmNlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIudHJhY2UgPSBsYXN0X3RyYWNlLl9pZFxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLnVzZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0YXNzaWduZWVfYXBwci51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0YXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb25cclxuXHRcdFx0YXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIucmVhZF9kYXRlID0gbm93XHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuanVkZ2UgPSBcInJlYXNzaWduZWRcIlxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuZGVzY3JpcHRpb24gPSByZWFzc2lnbl9yZWFzb25cclxuXHRcdFx0YXNzaWduZWVfYXBwci5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmNvc3RfdGltZSA9IGFzc2lnbmVlX2FwcHIuZmluaXNoX2RhdGUgLSBhc3NpZ25lZV9hcHByLnN0YXJ0X2RhdGVcclxuXHRcdFx0bGFzdF90cmFjZS5hcHByb3Zlcy5wdXNoKGFzc2lnbmVlX2FwcHIpXHJcblx0XHRcdCMg5a+55paw5aKe55qE5q+P5L2N5b6F5a6h5qC45Lq677yM5ZCE5aKe5Yqg5LiA5p2h5paw55qEYXBwcm92ZVxyXG5cdFx0XHRfLmVhY2gobmV3X2luYm94X3VzZXJzLCAodXNlcl9pZCkgLT5cclxuXHRcdFx0XHRuZXdfdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUodXNlcl9pZCwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCB1c2VyX2lkKVxyXG5cdFx0XHRcdHVzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHNwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7IGZpZWxkczogeyBuYW1lOiAxLCBmdWxsbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0bmV3X2FwcHIgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3X2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld19hcHByLmluc3RhbmNlID0gbGFzdF90cmFjZS5pbnN0YW5jZVxyXG5cdFx0XHRcdG5ld19hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWRcclxuXHRcdFx0XHRuZXdfYXBwci5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0bmV3X2FwcHIudXNlciA9IHVzZXJfaWRcclxuXHRcdFx0XHRuZXdfYXBwci51c2VyX25hbWUgPSBuZXdfdXNlci5uYW1lXHJcblxyXG5cdFx0XHRcdGhhbmRsZXJfaWQgPSB1c2VyX2lkXHJcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gbmV3X3VzZXJcclxuXHRcdFx0XHRhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIHVzZXJfaWQpXHJcblx0XHRcdFx0aWYgYWdlbnRcclxuXHRcdFx0XHRcdGluYm94X3VzZXJzX2Zyb21fY2xpZW50W2luYm94X3VzZXJzX2Zyb21fY2xpZW50LmluZGV4T2YodXNlcl9pZCldID0gYWdlbnRcclxuXHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudFxyXG5cdFx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7IF9pZDogYWdlbnQgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0XHRuZXdfYXBwci5hZ2VudCA9IGFnZW50XHJcblxyXG5cdFx0XHRcdG5ld19hcHByLmhhbmRsZXIgPSBoYW5kbGVyX2lkXHJcblx0XHRcdFx0bmV3X2FwcHIuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uXHJcblx0XHRcdFx0bmV3X2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IHVzZXJfb3JnYW5pemF0aW9uLm5hbWVcclxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IHVzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lXHJcblx0XHRcdFx0bmV3X2FwcHIuZnJvbV91c2VyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0bmV3X2FwcHIuZnJvbV91c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0bmV3X2FwcHIudHlwZSA9IFwicmVhc3NpZ25cIlxyXG5cdFx0XHRcdG5ld19hcHByLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdfYXBwci5kdWVfZGF0ZSA9IGxhc3RfdHJhY2UuZHVlX2RhdGVcclxuXHRcdFx0XHRuZXdfYXBwci5pc19yZWFkID0gZmFsc2VcclxuXHRcdFx0XHRuZXdfYXBwci5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0bmV3X2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnN0YW5jZS52YWx1ZXMsIG5ld19hcHByKVxyXG5cdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXMucHVzaChuZXdfYXBwcilcclxuXHRcdFx0KVxyXG5cclxuXHRcdFx0aW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKVxyXG5cdFx0XHRpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMpXHJcblx0XHRcdHNldE9iai5vdXRib3hfdXNlcnMgPSBfLnVuaXEoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKVxyXG5cdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBpbmJveF91c2Vyc19mcm9tX2NsaWVudFxyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXHJcblx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzXCJdID0gbGFzdF90cmFjZS5hcHByb3Zlc1xyXG5cdFx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7IF9pZDogaW5zdGFuY2VfaWQsIFwidHJhY2VzLl9pZFwiOiBsYXN0X3RyYWNlLl9pZCB9LCB7ICRzZXQ6IHNldE9iaiB9KVxyXG5cdFx0XHRpZiByXHJcblx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0XHQjIOe7meiiq+WIoOmZpOeahGluYm94X3VzZXJzIOWSjCDlvZPliY3nlKjmiLcg5Y+R6YCBcHVzaFxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdFx0Xy5lYWNoKG5vdF9pbl9pbmJveF91c2VycywgKHVzZXJfaWQpIC0+XHJcblx0XHRcdFx0XHRpZiB1c2VyX2lkIGlzbnQgY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHQjIOaPkOWPlmluc3RhbmNlcy5vdXRib3hfdXNlcnPmlbDnu4TlkozloavljZXkurrjgIHnlLPor7fkurpcclxuXHRcdFx0XHRfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRfdXNlcnMucHVzaChpbnMuYXBwbGljYW50KVxyXG5cdFx0XHRcdF91c2Vycy5wdXNoKGlucy5zdWJtaXR0ZXIpXHJcblx0XHRcdFx0X3VzZXJzID0gXy51bmlxKF91c2Vycy5jb25jYXQoaW5zLm91dGJveF91c2VycykpXHJcblx0XHRcdFx0Xy5lYWNoKF91c2VycywgKHVzZXJfaWQpIC0+XHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZClcclxuXHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdCMg57uZ5paw5Yqg5YWl55qEaW5ib3hfdXNlcnPlj5HpgIFwdXNoIG1lc3NhZ2VcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcInJlYXNzaWduX25ld19pbmJveF91c2Vyc1wiLCBpbnMsIHJlYXNzaWduX3JlYXNvbiwgY3VycmVudF91c2VyX2luZm8pXHJcblxyXG5cdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmVhc3NpZ24nLCBjdXJyZW50X3VzZXIsIGlucy5pbmJveF91c2VycylcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7fVxyXG5cdFx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5tZXNzYWdlIH1dIH1cclxuXHRcdH1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWFzc2lnbicsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgX3VzZXJzLCBhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLCBhc3NpZ25lZV9hcHByLCBjdXJyZW50X3NwYWNlX3VzZXIsIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24sIGksIGluYm94X3VzZXJzLCBpbmJveF91c2Vyc19mcm9tX2NsaWVudCwgaW5zLCBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIGxhc3RfdHJhY2UsIGxhc3RfdHJhY2VfZnJvbV9jbGllbnQsIG5ld19pbmJveF91c2Vycywgbm90X2luX2luYm94X3VzZXJzLCBub3csIHBlcm1pc3Npb25zLCByLCByZWFzc2lnbl9yZWFzb24sIHNldE9iaiwgc3BhY2UsIHNwYWNlX2lkO1xuICAgICAgaW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFsnX2lkJ107XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVBlbmRpbmcoaW5zdGFuY2UpO1xuICAgICAgbGFzdF90cmFjZV9mcm9tX2NsaWVudCA9IF8ubGFzdChpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRyYWNlc1wiXSk7XG4gICAgICBsYXN0X3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5faWQgPT09IGxhc3RfdHJhY2VfZnJvbV9jbGllbnRbXCJfaWRcIl07XG4gICAgICB9KTtcbiAgICAgIGlmIChsYXN0X3RyYWNlLmlzX2ZpbmlzaGVkID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIGN1cnJlbnRfdXNlcik7XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBzcGFjZV9pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBhZG1pbnM6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKTtcbiAgICAgIH1cbiAgICAgIGluYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnM7XG4gICAgICBpbmJveF91c2Vyc19mcm9tX2NsaWVudCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wiaW5ib3hfdXNlcnNcIl07XG4gICAgICByZWFzc2lnbl9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlYXNzaWduX3JlYXNvblwiXTtcbiAgICAgIG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQpO1xuICAgICAgbmV3X2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKGluYm94X3VzZXJzX2Zyb21fY2xpZW50LCBpbmJveF91c2Vycyk7XG4gICAgICBpZiAobm90X2luX2luYm94X3VzZXJzLmxlbmd0aCA9PT0gMCAmJiBuZXdfaW5ib3hfdXNlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgIGkgPSAwO1xuICAgICAgYXBwcm92ZV91c2Vyc19oYW5kbGVycyA9IFtdO1xuICAgICAgd2hpbGUgKGkgPCBsYXN0X3RyYWNlLmFwcHJvdmVzLmxlbmd0aCkge1xuICAgICAgICBpZiAobm90X2luX2luYm94X3VzZXJzLmluY2x1ZGVzKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaGFuZGxlcikpIHtcbiAgICAgICAgICBpZiAobGFzdF90cmFjZS5hcHByb3Zlc1tpXS5pc19maW5pc2hlZCA9PT0gZmFsc2UgJiYgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS50eXBlICE9PSBcImNjXCIgJiYgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS50eXBlICE9PSBcImRpc3RyaWJ1dGVcIikge1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmNvc3RfdGltZSA9IGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZmluaXNoX2RhdGUgLSBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICBhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLnB1c2gobGFzdF90cmFjZS5hcHByb3Zlc1tpXS51c2VyKTtcbiAgICAgICAgICAgIGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMucHVzaChsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmhhbmRsZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb25cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGFzc2lnbmVlX2FwcHIgPSBuZXcgT2JqZWN0O1xuICAgICAgYXNzaWduZWVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgYXNzaWduZWVfYXBwci5pbnN0YW5jZSA9IGxhc3RfdHJhY2UuaW5zdGFuY2U7XG4gICAgICBhc3NpZ25lZV9hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWQ7XG4gICAgICBhc3NpZ25lZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIGFzc2lnbmVlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuICAgICAgYXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lO1xuICAgICAgYXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWU7XG4gICAgICBhc3NpZ25lZV9hcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICBhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgYXNzaWduZWVfYXBwci5kdWVfZGF0ZSA9IGxhc3RfdHJhY2UuZHVlX2RhdGU7XG4gICAgICBhc3NpZ25lZV9hcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgIGFzc2lnbmVlX2FwcHIuanVkZ2UgPSBcInJlYXNzaWduZWRcIjtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaXNfcmVhZCA9IHRydWU7XG4gICAgICBhc3NpZ25lZV9hcHByLmRlc2NyaXB0aW9uID0gcmVhc3NpZ25fcmVhc29uO1xuICAgICAgYXNzaWduZWVfYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgYXNzaWduZWVfYXBwci52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgYXNzaWduZWVfYXBwci5jb3N0X3RpbWUgPSBhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlIC0gYXNzaWduZWVfYXBwci5zdGFydF9kYXRlO1xuICAgICAgbGFzdF90cmFjZS5hcHByb3Zlcy5wdXNoKGFzc2lnbmVlX2FwcHIpO1xuICAgICAgXy5lYWNoKG5ld19pbmJveF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICB2YXIgYWdlbnQsIGhhbmRsZXJfaWQsIGhhbmRsZXJfaW5mbywgbmV3X2FwcHIsIG5ld191c2VyLCBzcGFjZV91c2VyLCB1c2VyX29yZ2FuaXphdGlvbjtcbiAgICAgICAgbmV3X3VzZXIgPSBkYi51c2Vycy5maW5kT25lKHVzZXJfaWQsIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIHVzZXJfaWQpO1xuICAgICAgICB1c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShzcGFjZV91c2VyLm9yZ2FuaXphdGlvbiwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgIGZ1bGxuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3X2FwcHIgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdfYXBwci5pbnN0YW5jZSA9IGxhc3RfdHJhY2UuaW5zdGFuY2U7XG4gICAgICAgIG5ld19hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWQ7XG4gICAgICAgIG5ld19hcHByLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIG5ld19hcHByLnVzZXIgPSB1c2VyX2lkO1xuICAgICAgICBuZXdfYXBwci51c2VyX25hbWUgPSBuZXdfdXNlci5uYW1lO1xuICAgICAgICBoYW5kbGVyX2lkID0gdXNlcl9pZDtcbiAgICAgICAgaGFuZGxlcl9pbmZvID0gbmV3X3VzZXI7XG4gICAgICAgIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgdXNlcl9pZCk7XG4gICAgICAgIGlmIChhZ2VudCkge1xuICAgICAgICAgIGluYm94X3VzZXJzX2Zyb21fY2xpZW50W2luYm94X3VzZXJzX2Zyb21fY2xpZW50LmluZGV4T2YodXNlcl9pZCldID0gYWdlbnQ7XG4gICAgICAgICAgaGFuZGxlcl9pZCA9IGFnZW50O1xuICAgICAgICAgIGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgICAgX2lkOiBhZ2VudFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbmV3X2FwcHIuYWdlbnQgPSBhZ2VudDtcbiAgICAgICAgfVxuICAgICAgICBuZXdfYXBwci5oYW5kbGVyID0gaGFuZGxlcl9pZDtcbiAgICAgICAgbmV3X2FwcHIuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICAgIG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gc3BhY2VfdXNlci5vcmdhbml6YXRpb247XG4gICAgICAgIG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSB1c2VyX29yZ2FuaXphdGlvbi5uYW1lO1xuICAgICAgICBuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IHVzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lO1xuICAgICAgICBuZXdfYXBwci5mcm9tX3VzZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIG5ld19hcHByLmZyb21fdXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgbmV3X2FwcHIudHlwZSA9IFwicmVhc3NpZ25cIjtcbiAgICAgICAgbmV3X2FwcHIuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3X2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlO1xuICAgICAgICBuZXdfYXBwci5pc19yZWFkID0gZmFsc2U7XG4gICAgICAgIG5ld19hcHByLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgIG5ld19hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgIHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnN0YW5jZS52YWx1ZXMsIG5ld19hcHByKTtcbiAgICAgICAgcmV0dXJuIGxhc3RfdHJhY2UuYXBwcm92ZXMucHVzaChuZXdfYXBwcik7XG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLm91dGJveF91c2Vycy5wdXNoKGN1cnJlbnRfdXNlcik7XG4gICAgICBpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMpO1xuICAgICAgc2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMpO1xuICAgICAgc2V0T2JqLmluYm94X3VzZXJzID0gaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQ7XG4gICAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGxhc3RfdHJhY2UuYXBwcm92ZXM7XG4gICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2VfaWQsXG4gICAgICAgIFwidHJhY2VzLl9pZFwiOiBsYXN0X3RyYWNlLl9pZFxuICAgICAgfSwge1xuICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgIH0pO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICBfLmVhY2gobm90X2luX2luYm94X3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgaWYgKHVzZXJfaWQgIT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIF91c2Vycy5wdXNoKGlucy5hcHBsaWNhbnQpO1xuICAgICAgICBfdXNlcnMucHVzaChpbnMuc3VibWl0dGVyKTtcbiAgICAgICAgX3VzZXJzID0gXy51bmlxKF91c2Vycy5jb25jYXQoaW5zLm91dGJveF91c2VycykpO1xuICAgICAgICBfLmVhY2goX3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmVhc3NpZ25fbmV3X2luYm94X3VzZXJzXCIsIGlucywgcmVhc3NpZ25fcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JlYXNzaWduJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7fVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWxvY2F0ZScsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKVxyXG5cclxuXHRcdFx0bGFzdF90cmFjZSA9IF8ubGFzdChpbnN0YW5jZS50cmFjZXMpXHJcblxyXG5cdFx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKVxyXG5cdFx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKGluc3RhbmNlLnNwYWNlLCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxyXG5cdFx0XHRpZiAobm90IHBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55So5oi35rKh5pyJ5a+55b2T5YmN5rWB56iL55qE566h55CG5p2D6ZmQXCIpXHJcblxyXG5cdFx0XHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0XHRcdGluc3RhbmNlX2lkID0gbGFzdF90cmFjZS5pbnN0YW5jZVxyXG5cdFx0XHRpbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzXHJcblx0XHRcdHJlbG9jYXRlX2luYm94X3VzZXJzID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWxvY2F0ZV9pbmJveF91c2Vyc1wiXVxyXG5cdFx0XHRyZWxvY2F0ZV9jb21tZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWxvY2F0ZV9jb21tZW50XCJdXHJcblx0XHRcdHJlbG9jYXRlX25leHRfc3RlcCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfbmV4dF9zdGVwXCJdXHJcblx0XHRcdG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgcmVsb2NhdGVfaW5ib3hfdXNlcnMpXHJcblx0XHRcdG5ld19pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShyZWxvY2F0ZV9pbmJveF91c2VycywgaW5ib3hfdXNlcnMpXHJcblxyXG5cdFx0XHRhcHByb3ZlX3VzZXJzID0gW11cclxuXHJcblx0XHRcdCMg6I635Y+W5LiA5LiqZmxvd1xyXG5cdFx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblx0XHRcdG5leHRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcmVsb2NhdGVfbmV4dF9zdGVwKVxyXG5cdFx0XHRuZXh0X3N0ZXBfdHlwZSA9IG5leHRfc3RlcC5zdGVwX3R5cGVcclxuXHRcdFx0bmV4dF9zdGVwX25hbWUgPSBuZXh0X3N0ZXAubmFtZVxyXG5cdFx0XHRjdXJyZW50X3NldHAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGxhc3RfdHJhY2Uuc3RlcClcclxuXHRcdFx0Y3VycmVudF9zZXRwX3R5cGUgPSBjdXJyZW50X3NldHAuc3RlcF90eXBlXHJcblxyXG5cdFx0XHR0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXNcclxuXHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHQjIOmHjeWumuS9jeeahOaXtuWAmeS9v+eUqGFwcHJvdmUudmFsdWVz5ZCI5bm2IGluc3RhbmNlLnZhbHVlc+eUn+aIkOaWsOeahGluc3RhbmNlLnZhbHVlcyAjMTMyOFxyXG5cdFx0XHRzZXRPYmoudmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0XHRpID0gMFxyXG5cdFx0XHR3aGlsZSBpIDwgdHJhY2VzLmxlbmd0aFxyXG5cdFx0XHRcdGlmIHRyYWNlc1tpXS5faWQgaXMgbGFzdF90cmFjZS5faWRcclxuXHRcdFx0XHRcdGlmIG5vdCB0cmFjZXNbaV0uYXBwcm92ZXNcclxuXHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdGggPSAwXHJcblx0XHRcdFx0XHR3aGlsZSBoIDwgdHJhY2VzW2ldLmFwcHJvdmVzLmxlbmd0aFxyXG5cdFx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgaXMgZmFsc2UgYW5kIHRyYWNlc1tpXS5hcHByb3Zlc1toXS50eXBlIGlzbnQgXCJjY1wiIGFuZCB0cmFjZXNbaV0uYXBwcm92ZXNbaF0udHlwZSBpc250IFwiZGlzdHJpYnV0ZVwiXHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0ucmVhZF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfcmVhZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uY29zdF90aW1lID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlIC0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0XHRhcHByb3ZlX3VzZXJzLnB1c2godHJhY2VzW2ldLmFwcHJvdmVzW2hdLnVzZXIpXHJcblxyXG5cdFx0XHRcdFx0XHRcdCMgYmVnaW4g6KKr6YeN5a6a5L2N57uZQe+8jOWGjeiiq+mHjeWumuS9jei1sO+8jOS5i+WJjUHnmoTmhI/op4HlnKjmhI/op4HmoI/kuK3mmL7npLrkuI3lh7rmnaXkuobjgIIgIzE5MjFcclxuXHRcdFx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID09IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdHRhID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdXHJcblx0XHRcdFx0XHRcdFx0XHRzYW1lVHJhY2VzID0gXy5maWx0ZXIgdHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdC5zdGVwID09IHRyYWNlc1tpXS5zdGVwXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0bCA9IHNhbWVUcmFjZXMubGVuZ3RoIC0gMVxyXG5cdFx0XHRcdFx0XHRcdFx0c2lnblNob3dBcHByb3ZlSWQgPSBudWxsXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgbCA+IC0xXHJcblx0XHRcdFx0XHRcdFx0XHRcdF8uZWFjaCBzYW1lVHJhY2VzW2xdLmFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIGEudXNlciA9PSB0YS51c2VyICYmIGEuanVkZ2UgIT0gXCJ0ZXJtaW5hdGVkXCIgJiYgYS5kZXNjcmlwdGlvbiAmJiAhc2lnblNob3dBcHByb3ZlSWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNpZ25TaG93QXBwcm92ZUlkID0gYS5faWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0bC0tXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgc2lnblNob3dBcHByb3ZlSWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGkgPSAwXHJcblx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlIHRpIDwgdHJhY2VzLmxlbmd0aFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFoID0gMFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlIGFoIDwgdHJhY2VzW3RpXS5hcHByb3Zlcy5sZW5ndGhcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIHRyYWNlc1t0aV0uYXBwcm92ZXNbYWhdLl9pZCA9PSBzaWduU2hvd0FwcHJvdmVJZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0cmFjZXNbdGldLmFwcHJvdmVzW2FoXS5zaWduX3Nob3cgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zaWduX3Nob3cgPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YWgrK1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRpKytcclxuXHRcdFx0XHRcdFx0XHQjIGVuZCDooqvph43lrprkvY3nu5lB77yM5YaN6KKr6YeN5a6a5L2N6LWw77yM5LmL5YmNQeeahOaEj+ingeWcqOaEj+ingeagj+S4reaYvuekuuS4jeWHuuadpeS6huOAgiAjMTkyMVxyXG5cclxuXHRcdFx0XHRcdFx0aCsrXHJcblxyXG5cdFx0XHRcdFx0IyDlnKjlkIzkuIB0cmFjZeS4i+aPkuWFpemHjeWumuS9jeaTjeS9nOiAheeahGFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdGN1cnJlbnRfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHsgZmllbGRzOiB7IG5hbWU6IDEgLCBmdWxsbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIudHJhY2UgPSB0cmFjZXNbaV0uX2lkXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci51c2VyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmR1ZV9kYXRlID0gdHJhY2VzW2ldLmR1ZV9kYXRlXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5qdWRnZSA9IFwicmVsb2NhdGVkXCJcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaXNfcmVhZCA9IHRydWVcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuZGVzY3JpcHRpb24gPSByZWxvY2F0ZV9jb21tZW50XHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5jb3N0X3RpbWUgPSByZWxvY2F0ZV9hcHByLmZpbmlzaF9kYXRlIC0gcmVsb2NhdGVfYXBwci5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXMucHVzaChyZWxvY2F0ZV9hcHByKVxyXG5cclxuXHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2XorrDlvZVcclxuXHRcdFx0XHRcdHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdHRyYWNlc1tpXS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0dHJhY2VzW2ldLmp1ZGdlID0gXCJyZWxvY2F0ZWRcIlxyXG5cclxuXHRcdFx0XHRpKytcclxuXHJcblx0XHRcdGlmIG5leHRfc3RlcF90eXBlIGlzIFwiZW5kXCJcclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdXHJcblx0XHRcdFx0bmV3VHJhY2UuaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RlcCA9IHJlbG9jYXRlX25leHRfc3RlcFxyXG5cdFx0XHRcdG5ld1RyYWNlLm5hbWUgPSBuZXh0X3N0ZXBfbmFtZVxyXG5cdFx0XHRcdG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdUcmFjZS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cclxuXHRcdFx0XHQjIOabtOaWsGluc3RhbmNl6K6w5b2VXHJcblx0XHRcdFx0c2V0T2JqLnN0YXRlID0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0XHRcdHNldE9iai5pbmJveF91c2VycyA9IFtdXHJcblx0XHRcdFx0c2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRzZXRPYmouZmluaXNoX2RhdGUgPSBuZXcgRGF0ZVxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdXHJcblx0XHRcdFx0bmV3VHJhY2UuaXNfZmluaXNoZWQgPSBmYWxzZVxyXG5cdFx0XHRcdG5ld1RyYWNlLnN0ZXAgPSByZWxvY2F0ZV9uZXh0X3N0ZXBcclxuXHRcdFx0XHRuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWVcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUobmV4dF9zdGVwLnRpbWVvdXRfaG91cnMsIHNwYWNlX2lkKVxyXG5cdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cclxuXHRcdFx0XHRfLmVhY2gocmVsb2NhdGVfaW5ib3hfdXNlcnMsIChuZXh0X3N0ZXBfdXNlcl9pZCwgaWR4KS0+XHJcblx0XHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZFxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLnVzZXIgPSBuZXh0X3N0ZXBfdXNlcl9pZFxyXG5cclxuXHRcdFx0XHRcdHVzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUobmV4dF9zdGVwX3VzZXJfaWQsIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS51c2VyX25hbWUgPSB1c2VyX2luZm8ubmFtZVxyXG5cclxuXHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZFxyXG5cdFx0XHRcdFx0aGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvXHJcblx0XHRcdFx0XHRhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIG5leHRfc3RlcF91c2VyX2lkKVxyXG5cdFx0XHRcdFx0aWYgYWdlbnRcclxuXHRcdFx0XHRcdFx0cmVsb2NhdGVfaW5ib3hfdXNlcnNbaWR4XSA9IGFnZW50XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudFxyXG5cdFx0XHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiBhZ2VudCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50XHJcblxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZFxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZVxyXG5cclxuXHRcdFx0XHRcdG5leHRfc3RlcF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGhhbmRsZXJfaWQpXHJcblx0XHRcdFx0XHQjIOiOt+WPlm5leHRfc3RlcF91c2Vy5omA5Zyo55qE6YOo6Zeo5L+h5oGvXHJcblx0XHRcdFx0XHRuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhuZXh0X3N0ZXBfc3BhY2VfdXNlcilcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmR1ZV9kYXRlID0gbmV3VHJhY2UuZHVlX2RhdGVcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSlcclxuXHRcdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSlcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0c2V0T2JqLmluYm94X3VzZXJzID0gcmVsb2NhdGVfaW5ib3hfdXNlcnNcclxuXHRcdFx0XHRzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIlxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgbmV4dF9zdGVwLmxpbmVzKVxyXG5cclxuXHRcdFx0aW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKVxyXG5cdFx0XHRpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGluYm94X3VzZXJzKS5jb25jYXQoYXBwcm92ZV91c2VycylcclxuXHRcdFx0c2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMpXHJcblx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5vd1xyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0c2V0T2JqLmlzX2FyY2hpdmVkID0gZmFsc2VcclxuXHRcdFx0dHJhY2VzLnB1c2gobmV3VHJhY2UpXHJcblx0XHRcdHNldE9iai50cmFjZXMgPSB0cmFjZXNcclxuXHJcblx0XHRcdGlmIHNldE9iai5zdGF0ZSA9PSAnY29tcGxldGVkJ1xyXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9ian0pXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiBzZXRPYmosICR1bnNldDoge2ZpbmlzaF9kYXRlOiAxfX0pXHJcblxyXG5cdFx0XHRpZiByXHJcblx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0XHQjIOe7meiiq+WIoOmZpOeahGluYm94X3VzZXJzIOWSjCDlvZPliY3nlKjmiLcg5Y+R6YCBcHVzaFxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdFx0Xy5lYWNoKG5vdF9pbl9pbmJveF91c2VycywgKHVzZXJfaWQpLT5cclxuXHRcdFx0XHRcdGlmIHVzZXJfaWQgaXNudCBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHRcdCMg5o+Q5Y+WaW5zdGFuY2VzLm91dGJveF91c2Vyc+aVsOe7hOWSjOWhq+WNleS6uuOAgeeUs+ivt+S6ulxyXG5cdFx0XHRcdF91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0XHRcdF91c2Vycy5wdXNoKGlucy5hcHBsaWNhbnQpXHJcblx0XHRcdFx0X3VzZXJzLnB1c2goaW5zLnN1Ym1pdHRlcilcclxuXHRcdFx0XHRfdXNlcnMgPSBfLnVuaXEoX3VzZXJzLmNvbmNhdChpbnMub3V0Ym94X3VzZXJzKSlcclxuXHRcdFx0XHRfLmVhY2goX3VzZXJzLCAodXNlcl9pZCktPlxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXHJcblx0XHRcdFx0KVxyXG5cclxuXHRcdFx0XHQjIOe7meaWsOWKoOWFpeeahGluYm94X3VzZXJz5Y+R6YCBcHVzaCBtZXNzYWdlXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZWFzc2lnbl9uZXdfaW5ib3hfdXNlcnNcIiwgaW5zLCByZWxvY2F0ZV9jb21tZW50LCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZWxvY2F0ZScsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHtlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWxvY2F0ZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgX3VzZXJzLCBhaCwgYXBwcm92ZV91c2VycywgY3VycmVudF9zZXRwLCBjdXJyZW50X3NldHBfdHlwZSwgY3VycmVudF9zcGFjZV91c2VyLCBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLCBmbG93LCBoLCBpLCBpbmJveF91c2VycywgaW5zLCBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIGwsIGxhc3RfdHJhY2UsIG5ld1RyYWNlLCBuZXdfaW5ib3hfdXNlcnMsIG5leHRfc3RlcCwgbmV4dF9zdGVwX25hbWUsIG5leHRfc3RlcF90eXBlLCBub3RfaW5faW5ib3hfdXNlcnMsIG5vdywgcGVybWlzc2lvbnMsIHIsIHJlbG9jYXRlX2FwcHIsIHJlbG9jYXRlX2NvbW1lbnQsIHJlbG9jYXRlX2luYm94X3VzZXJzLCByZWxvY2F0ZV9uZXh0X3N0ZXAsIHNhbWVUcmFjZXMsIHNldE9iaiwgc2lnblNob3dBcHByb3ZlSWQsIHNwYWNlLCBzcGFjZV9pZCwgdGEsIHRpLCB0cmFjZXM7XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pO1xuICAgICAgbGFzdF90cmFjZSA9IF8ubGFzdChpbnN0YW5jZS50cmFjZXMpO1xuICAgICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKTtcbiAgICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoaW5zdGFuY2Uuc3BhY2UsIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgYWRtaW5zOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgJiYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIik7XG4gICAgICB9XG4gICAgICBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuICAgICAgaW5zdGFuY2VfaWQgPSBsYXN0X3RyYWNlLmluc3RhbmNlO1xuICAgICAgaW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2VycztcbiAgICAgIHJlbG9jYXRlX2luYm94X3VzZXJzID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWxvY2F0ZV9pbmJveF91c2Vyc1wiXTtcbiAgICAgIHJlbG9jYXRlX2NvbW1lbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX2NvbW1lbnRcIl07XG4gICAgICByZWxvY2F0ZV9uZXh0X3N0ZXAgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX25leHRfc3RlcFwiXTtcbiAgICAgIG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgcmVsb2NhdGVfaW5ib3hfdXNlcnMpO1xuICAgICAgbmV3X2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKHJlbG9jYXRlX2luYm94X3VzZXJzLCBpbmJveF91c2Vycyk7XG4gICAgICBhcHByb3ZlX3VzZXJzID0gW107XG4gICAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICAgICAgbmV4dF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCByZWxvY2F0ZV9uZXh0X3N0ZXApO1xuICAgICAgbmV4dF9zdGVwX3R5cGUgPSBuZXh0X3N0ZXAuc3RlcF90eXBlO1xuICAgICAgbmV4dF9zdGVwX25hbWUgPSBuZXh0X3N0ZXAubmFtZTtcbiAgICAgIGN1cnJlbnRfc2V0cCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgbGFzdF90cmFjZS5zdGVwKTtcbiAgICAgIGN1cnJlbnRfc2V0cF90eXBlID0gY3VycmVudF9zZXRwLnN0ZXBfdHlwZTtcbiAgICAgIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBzZXRPYmoudmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IHRyYWNlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRyYWNlc1tpXS5faWQgPT09IGxhc3RfdHJhY2UuX2lkKSB7XG4gICAgICAgICAgaWYgKCF0cmFjZXNbaV0uYXBwcm92ZXMpIHtcbiAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3ZlcyA9IG5ldyBBcnJheTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaCA9IDA7XG4gICAgICAgICAgd2hpbGUgKGggPCB0cmFjZXNbaV0uYXBwcm92ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkID09PSBmYWxzZSAmJiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0udHlwZSAhPT0gXCJjY1wiICYmIHRyYWNlc1tpXS5hcHByb3Zlc1toXS50eXBlICE9PSBcImRpc3RyaWJ1dGVcIikge1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0ucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uanVkZ2UgPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmNvc3RfdGltZSA9IHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSAtIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgICBhcHByb3ZlX3VzZXJzLnB1c2godHJhY2VzW2ldLmFwcHJvdmVzW2hdLnVzZXIpO1xuICAgICAgICAgICAgICBpZiAodHJhY2VzW2ldLmFwcHJvdmVzW2hdLnNpZ25fc2hvdyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRhID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdO1xuICAgICAgICAgICAgICAgIHNhbWVUcmFjZXMgPSBfLmZpbHRlcih0cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LnN0ZXAgPT09IHRyYWNlc1tpXS5zdGVwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGwgPSBzYW1lVHJhY2VzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgc2lnblNob3dBcHByb3ZlSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHdoaWxlIChsID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgIF8uZWFjaChzYW1lVHJhY2VzW2xdLmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhLnVzZXIgPT09IHRhLnVzZXIgJiYgYS5qdWRnZSAhPT0gXCJ0ZXJtaW5hdGVkXCIgJiYgYS5kZXNjcmlwdGlvbiAmJiAhc2lnblNob3dBcHByb3ZlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2lnblNob3dBcHByb3ZlSWQgPSBhLl9pZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzaWduU2hvd0FwcHJvdmVJZCkge1xuICAgICAgICAgICAgICAgICAgdGkgPSAwO1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKHRpIDwgdHJhY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBhaCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChhaCA8IHRyYWNlc1t0aV0uYXBwcm92ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNlc1t0aV0uYXBwcm92ZXNbYWhdLl9pZCA9PT0gc2lnblNob3dBcHByb3ZlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlc1t0aV0uYXBwcm92ZXNbYWhdLnNpZ25fc2hvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGFoKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGkrKztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGgrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICAgICAgY3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgICAgZnVsbG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByID0gbmV3IE9iamVjdDtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudHJhY2UgPSB0cmFjZXNbaV0uX2lkO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5kdWVfZGF0ZSA9IHRyYWNlc1tpXS5kdWVfZGF0ZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmp1ZGdlID0gXCJyZWxvY2F0ZWRcIjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuZGVzY3JpcHRpb24gPSByZWxvY2F0ZV9jb21tZW50O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5jb3N0X3RpbWUgPSByZWxvY2F0ZV9hcHByLmZpbmlzaF9kYXRlIC0gcmVsb2NhdGVfYXBwci5zdGFydF9kYXRlO1xuICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlcy5wdXNoKHJlbG9jYXRlX2FwcHIpO1xuICAgICAgICAgIHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgdHJhY2VzW2ldLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgIHRyYWNlc1tpXS5qdWRnZSA9IFwicmVsb2NhdGVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgaWYgKG5leHRfc3RlcF90eXBlID09PSBcImVuZFwiKSB7XG4gICAgICAgIG5ld1RyYWNlID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgbmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2UuX2lkXTtcbiAgICAgICAgbmV3VHJhY2UuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICBuZXdUcmFjZS5zdGVwID0gcmVsb2NhdGVfbmV4dF9zdGVwO1xuICAgICAgICBuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICBuZXdUcmFjZS5hcHByb3ZlcyA9IFtdO1xuICAgICAgICBzZXRPYmouc3RhdGUgPSBcImNvbXBsZXRlZFwiO1xuICAgICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSBbXTtcbiAgICAgICAgc2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgIHNldE9iai5maW5pc2hfZGF0ZSA9IG5ldyBEYXRlO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBuZXh0X3N0ZXBfbmFtZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICBuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICBuZXdUcmFjZS5zdGVwID0gcmVsb2NhdGVfbmV4dF9zdGVwO1xuICAgICAgICBuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKG5leHRfc3RlcC50aW1lb3V0X2hvdXJzLCBzcGFjZV9pZCk7XG4gICAgICAgIG5ld1RyYWNlLmFwcHJvdmVzID0gW107XG4gICAgICAgIF8uZWFjaChyZWxvY2F0ZV9pbmJveF91c2VycywgZnVuY3Rpb24obmV4dF9zdGVwX3VzZXJfaWQsIGlkeCkge1xuICAgICAgICAgIHZhciBhZ2VudCwgaGFuZGxlcl9pZCwgaGFuZGxlcl9pbmZvLCBuZXdBcHByb3ZlLCBuZXh0X3N0ZXBfc3BhY2VfdXNlciwgbmV4dF9zdGVwX3VzZXJfb3JnX2luZm8sIHVzZXJfaW5mbztcbiAgICAgICAgICBuZXdBcHByb3ZlID0gbmV3IE9iamVjdDtcbiAgICAgICAgICBuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgICAgbmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICAgIG5ld0FwcHJvdmUudHJhY2UgPSBuZXdUcmFjZS5faWQ7XG4gICAgICAgICAgbmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICAgIG5ld0FwcHJvdmUudXNlciA9IG5leHRfc3RlcF91c2VyX2lkO1xuICAgICAgICAgIHVzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUobmV4dF9zdGVwX3VzZXJfaWQsIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbmV3QXBwcm92ZS51c2VyX25hbWUgPSB1c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICBoYW5kbGVyX2lkID0gbmV4dF9zdGVwX3VzZXJfaWQ7XG4gICAgICAgICAgaGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvO1xuICAgICAgICAgIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpO1xuICAgICAgICAgIGlmIChhZ2VudCkge1xuICAgICAgICAgICAgcmVsb2NhdGVfaW5ib3hfdXNlcnNbaWR4XSA9IGFnZW50O1xuICAgICAgICAgICAgaGFuZGxlcl9pZCA9IGFnZW50O1xuICAgICAgICAgICAgaGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgICAgIF9pZDogYWdlbnRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuYWdlbnQgPSBhZ2VudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZDtcbiAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xuICAgICAgICAgIG5leHRfc3RlcF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGhhbmRsZXJfaWQpO1xuICAgICAgICAgIG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKTtcbiAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl07XG4gICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICAgICAgbmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgIG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBuZXdUcmFjZS5kdWVfZGF0ZTtcbiAgICAgICAgICBuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZTtcbiAgICAgICAgICBuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgbmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgIHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnN0YW5jZS52YWx1ZXMsIG5ld0FwcHJvdmUpO1xuICAgICAgICAgIHJldHVybiBuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0T2JqLmluYm94X3VzZXJzID0gcmVsb2NhdGVfaW5ib3hfdXNlcnM7XG4gICAgICAgIHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBuZXh0X3N0ZXBfbmFtZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgbmV4dF9zdGVwLmxpbmVzKTtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlLm91dGJveF91c2Vycy5wdXNoKGN1cnJlbnRfdXNlcik7XG4gICAgICBpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGluYm94X3VzZXJzKS5jb25jYXQoYXBwcm92ZV91c2Vycyk7XG4gICAgICBzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2Vycyk7XG4gICAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICBzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZTtcbiAgICAgIHRyYWNlcy5wdXNoKG5ld1RyYWNlKTtcbiAgICAgIHNldE9iai50cmFjZXMgPSB0cmFjZXM7XG4gICAgICBpZiAoc2V0T2JqLnN0YXRlID09PSAnY29tcGxldGVkJykge1xuICAgICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHNldE9iaixcbiAgICAgICAgICAkdW5zZXQ6IHtcbiAgICAgICAgICAgIGZpbmlzaF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChyKSB7XG4gICAgICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgXy5lYWNoKG5vdF9pbl9pbmJveF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICAgIGlmICh1c2VyX2lkICE9PSBjdXJyZW50X3VzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgX3VzZXJzID0gbmV3IEFycmF5O1xuICAgICAgICBfdXNlcnMucHVzaChpbnMuYXBwbGljYW50KTtcbiAgICAgICAgX3VzZXJzLnB1c2goaW5zLnN1Ym1pdHRlcik7XG4gICAgICAgIF91c2VycyA9IF8udW5pcShfdXNlcnMuY29uY2F0KGlucy5vdXRib3hfdXNlcnMpKTtcbiAgICAgICAgXy5lYWNoKF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcInJlYXNzaWduX25ld19pbmJveF91c2Vyc1wiLCBpbnMsIHJlbG9jYXRlX2NvbW1lbnQsIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmVsb2NhdGUnLCBjdXJyZW50X3VzZXIsIGlucy5pbmJveF91c2Vycyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHt9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L2FyY2hpdmUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl1cclxuXHRcdFx0IyDojrflj5bkuIDkuKppbnN0YW5jZVxyXG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2VcclxuXHRcdFx0IyDojrflj5bkuIDkuKpzcGFjZVxyXG5cdFx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHRcdCMg5Yik5pat5LiA5LiqaW5zdGFuY2XmmK/lkKbkuLrlrozmiJDlubbkuJTmnKrlvZLmoaPnirbmgIFcclxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlRmluaXNoZWRBbmROb3RBcmNoaWV2ZWQoaW5zdGFuY2UpXHJcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2XkuIvnmoTkuIDkuKp1c2VyXHJcblx0XHRcdHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cdFx0XHQjIOWIpOaWreS4gOS4queUqOaIt+aYr+WQpuaYr+S4gOS4qmluc3RhbmNl55qE5o+Q5Lqk6ICFIOaIluiAhXNwYWNl55qE566h55CG5ZGYXHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVN1Ym1pdHRlck9yQXBwbGljYW50T3JTcGFjZUFkbWluKGluc3RhbmNlLCBjdXJyZW50X3VzZXIsIHNwYWNlKVxyXG5cdFx0XHRcclxuXHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHRzZXRPYmouaXNfYXJjaGl2ZWQgPSB0cnVlXHJcblx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlXHJcblx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiBzZXRPYmp9KVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0ZGF0YToge31cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cclxuXHRcclxuXHRcdCIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvYXJjaGl2ZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgaW5zdGFuY2UsIGluc3RhbmNlX2lkLCBzZXRPYmosIHNwYWNlLCBzcGFjZV9pZCwgc3BhY2VfdXNlcjtcbiAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl07XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgICAgIHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgICB1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VGaW5pc2hlZEFuZE5vdEFyY2hpZXZlZChpbnN0YW5jZSk7XG4gICAgICBzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICB1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VTdWJtaXR0ZXJPckFwcGxpY2FudE9yU3BhY2VBZG1pbihpbnN0YW5jZSwgY3VycmVudF91c2VyLCBzcGFjZSk7XG4gICAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgICAgc2V0T2JqLmlzX2FyY2hpdmVkID0gdHJ1ZTtcbiAgICAgIHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlO1xuICAgICAgc2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgcmV0dXJuIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHt9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJNZXRlb3Iuc3RhcnR1cCAtPlxyXG5cdFdlYkFwcC5jb25uZWN0SGFuZGxlcnMudXNlIFwiL2FwaS93b3JrZmxvdy9leHBvcnQvaW5zdGFuY2VzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHRcdHRyeVxyXG5cdFx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblxyXG5cdFx0XHRxdWVyeSA9IHJlcS5xdWVyeVxyXG5cdFx0XHRzcGFjZV9pZCA9IHF1ZXJ5LnNwYWNlX2lkXHJcblx0XHRcdGZsb3dfaWQgPSBxdWVyeS5mbG93X2lkXHJcblx0XHRcdHR5cGUgPSBwYXJzZUludChxdWVyeS50eXBlKVxyXG5cdFx0XHR0aW1lem9uZW9mZnNldCA9IHBhcnNlSW50KHF1ZXJ5LnRpbWV6b25lb2Zmc2V0KVxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGZsb3dfaWQgfSwgeyBmaWVsZHM6IHsgZm9ybTogMSB9IH0pXHJcblx0XHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHsgX2lkOiBmbG93LmZvcm0gfSwgeyBmaWVsZHM6IHsgbmFtZTogMSwgJ2N1cnJlbnQuZmllbGRzJzogMSB9IH0pXHJcblxyXG5cdFx0XHRmb3JtX25hbWUgPSBmb3JtLm5hbWVcclxuXHRcdFx0ZmllbGRzID0gZm9ybS5jdXJyZW50LmZpZWxkc1xyXG5cdFx0XHR0YWJsZV9maWVsZHMgPSBuZXcgQXJyYXlcclxuXHRcdFx0Xy5lYWNoIGZvcm0uY3VycmVudC5maWVsZHMsIChmaWVsZCkgLT5cclxuXHRcdFx0XHRpZiBmaWVsZC50eXBlIGlzIFwidGFibGVcIlxyXG5cdFx0XHRcdFx0dGFibGVfZmllbGRzLnB1c2goZmllbGQpXHJcblxyXG5cdFx0XHRpbnNfdG9feGxzID0gbmV3IEFycmF5XHJcblx0XHRcdHN0YXJ0X2RhdGUgPSBudWxsXHJcblx0XHRcdGVuZF9kYXRlID0gbnVsbFxyXG5cdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0XHRzZWxlY3RvciA9IHsgc3BhY2U6IHNwYWNlX2lkLCBmbG93OiBmbG93X2lkIH1cclxuXHRcdFx0c2VsZWN0b3Iuc3RhdGUgPSB7JGluOiBbXCJwZW5kaW5nXCIsIFwiY29tcGxldGVkXCJdfVxyXG5cdFx0XHR1aWQgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShzcGFjZV9pZClcclxuXHRcdFx0aWYgIXNwYWNlXHJcblx0XHRcdFx0c2VsZWN0b3Iuc3RhdGUgPSBcIm5vbmVcIlxyXG5cclxuXHRcdFx0aWYgIXNwYWNlLmFkbWlucy5pbmNsdWRlcyh1aWQpXHJcblx0XHRcdFx0Zmxvd19pZHMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0TXlBZG1pbk9yTW9uaXRvckZsb3dzKHNwYWNlX2lkLCB1aWQpXHJcblx0XHRcdFx0aWYgIWZsb3dfaWRzLmluY2x1ZGVzKHNlbGVjdG9yLmZsb3cpXHJcblx0XHRcdFx0XHRzZWxlY3Rvci4kb3IgPSBbe3N1Ym1pdHRlcjogdWlkfSwge2FwcGxpY2FudDogdWlkfSwge2luYm94X3VzZXJzOiB1aWR9LCB7b3V0Ym94X3VzZXJzOiB1aWR9XVxyXG5cclxuXHRcdFx0IyAwLeacrOaciFxyXG5cdFx0XHRpZiB0eXBlIGlzIDBcclxuXHRcdFx0XHRzdGFydF9kYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCAxKVxyXG5cdFx0XHRcdHNlbGVjdG9yLnN1Ym1pdF9kYXRlID0geyAkZ3RlOiBzdGFydF9kYXRlIH1cclxuXHRcdFx0XHRpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoc2VsZWN0b3IsIHtcclxuXHRcdFx0XHRcdHNvcnQ6IHsgc3VibWl0X2RhdGU6IDEgfVxyXG5cdFx0XHRcdH0pLmZldGNoKClcclxuXHRcdFx0IyAxLeS4iuaciFxyXG5cdFx0XHRlbHNlIGlmIHR5cGUgaXMgMVxyXG5cdFx0XHRcdGxhc3RfbW9udGhfZGF0ZSA9IG5ldyBEYXRlKG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSkgLSAxMDAwICogNjAgKiA2MCAqIDI0KVxyXG5cdFx0XHRcdHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShsYXN0X21vbnRoX2RhdGUuZ2V0RnVsbFllYXIoKSwgbGFzdF9tb250aF9kYXRlLmdldE1vbnRoKCksIDEpXHJcblx0XHRcdFx0ZW5kX2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpXHJcblx0XHRcdFx0c2VsZWN0b3Iuc3VibWl0X2RhdGUgPSB7ICRndGU6IHN0YXJ0X2RhdGUsICRsdGU6IGVuZF9kYXRlIH1cclxuXHRcdFx0XHRpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoc2VsZWN0b3IsIHtcclxuXHRcdFx0XHRcdHNvcnQ6IHsgc3VibWl0X2RhdGU6IDEgfVxyXG5cdFx0XHRcdH0pLmZldGNoKClcclxuXHRcdFx0IyAyLeaVtOS4quW5tOW6plxyXG5cdFx0XHRlbHNlIGlmIHR5cGUgaXMgMlxyXG5cdFx0XHRcdHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgMCwgMSlcclxuXHRcdFx0XHRzZWxlY3Rvci5zdWJtaXRfZGF0ZSA9IHsgJGd0ZTogc3RhcnRfZGF0ZSB9XHJcblx0XHRcdFx0aW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XHJcblx0XHRcdFx0XHRzb3J0OiB7IHN1Ym1pdF9kYXRlOiAxIH1cclxuXHRcdFx0XHR9KS5mZXRjaCgpXHJcblx0XHRcdCMgMy3miYDmnIlcclxuXHRcdFx0ZWxzZSBpZiB0eXBlIGlzIDNcclxuXHRcdFx0XHRpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoc2VsZWN0b3IsIHtcclxuXHRcdFx0XHRcdHNvcnQ6IHsgc3VibWl0X2RhdGU6IDEgfVxyXG5cdFx0XHRcdH0pLmZldGNoKClcclxuXHJcblx0XHRcdGVqcyA9IHJlcXVpcmUoJ2VqcycpXHJcblx0XHRcdHN0ciA9IEFzc2V0cy5nZXRUZXh0KCdzZXJ2ZXIvZWpzL2V4cG9ydF9pbnN0YW5jZXMuZWpzJylcclxuXHJcblx0XHRcdCMg5qOA5rWL5piv5ZCm5pyJ6K+t5rOV6ZSZ6K+vXHJcblx0XHRcdGVqc0xpbnQgPSByZXF1aXJlKCdlanMtbGludCcpXHJcblx0XHRcdGVycm9yX29iaiA9IGVqc0xpbnQubGludChzdHIsIHt9KVxyXG5cdFx0XHRpZiBlcnJvcl9vYmpcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yIFwiPT09L2FwaS93b3JrZmxvdy9leHBvcnQ6XCJcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yIGVycm9yX29ialxyXG5cclxuXHRcdFx0dGVtcGxhdGUgPSBlanMuY29tcGlsZShzdHIpXHJcblxyXG5cdFx0XHRsYW5nID0gJ2VuJ1xyXG5cdFx0XHRpZiBjdXJyZW50X3VzZXJfaW5mby5sb2NhbGUgaXMgJ3poLWNuJ1xyXG5cdFx0XHRcdGxhbmcgPSAnemgtQ04nXHJcblx0XHRcdFxyXG5cdFx0XHR1dGNPZmZzZXQgPSB0aW1lem9uZW9mZnNldCAvIC02MFxyXG5cdFx0XHRcclxuXHRcdFx0Zm9ybWF0RGF0ZSA9IChkYXRlLCBmb3JtYXRlcikgLT5cclxuXHRcdFx0XHRyZXR1cm4gbW9tZW50KGRhdGUpLnV0Y09mZnNldCh1dGNPZmZzZXQpLmZvcm1hdChmb3JtYXRlcilcclxuXHJcblx0XHRcdHJldCA9IHRlbXBsYXRlKHtcclxuXHRcdFx0XHRsYW5nOiBsYW5nLFxyXG5cdFx0XHRcdGZvcm1hdERhdGU6IGZvcm1hdERhdGUsXHJcblx0XHRcdFx0Zm9ybV9uYW1lOiBmb3JtX25hbWUsXHJcblx0XHRcdFx0ZmllbGRzOiBmaWVsZHMsXHJcblx0XHRcdFx0dGFibGVfZmllbGRzOiB0YWJsZV9maWVsZHMsXHJcblx0XHRcdFx0aW5zX3RvX3hsczogaW5zX3RvX3hsc1xyXG5cdFx0XHR9KVxyXG5cclxuXHRcdFx0ZmlsZU5hbWUgPSBcIlN0ZWVkT1NXb3JrZmxvd19cIiArIG1vbWVudCgpLmZvcm1hdCgnWVlZWU1NRERISG1tJykgKyBcIi54bHNcIlxyXG5cdFx0XHRyZXMuc2V0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpXHJcblx0XHRcdHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LURpc3Bvc2l0aW9uXCIsIFwiYXR0YWNobWVudDtmaWxlbmFtZT1cIiArIGVuY29kZVVSSShmaWxlTmFtZSkpXHJcblx0XHRcdHJlcy5lbmQocmV0KVxyXG5cdFx0Y2F0Y2ggZVxyXG5cdFx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdFx0cmVzLmVuZChlLm1lc3NhZ2UpIiwiTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBXZWJBcHAuY29ubmVjdEhhbmRsZXJzLnVzZShcIi9hcGkvd29ya2Zsb3cvZXhwb3J0L2luc3RhbmNlc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIHZhciBjdXJyZW50X3VzZXJfaW5mbywgZSwgZWpzLCBlanNMaW50LCBlbmRfZGF0ZSwgZXJyb3Jfb2JqLCBmaWVsZHMsIGZpbGVOYW1lLCBmbG93LCBmbG93X2lkLCBmbG93X2lkcywgZm9ybSwgZm9ybV9uYW1lLCBmb3JtYXREYXRlLCBpbnNfdG9feGxzLCBsYW5nLCBsYXN0X21vbnRoX2RhdGUsIG5vdywgcXVlcnksIHJldCwgc2VsZWN0b3IsIHNwYWNlLCBzcGFjZV9pZCwgc3RhcnRfZGF0ZSwgc3RyLCB0YWJsZV9maWVsZHMsIHRlbXBsYXRlLCB0aW1lem9uZW9mZnNldCwgdHlwZSwgdWlkLCB1dGNPZmZzZXQ7XG4gICAgdHJ5IHtcbiAgICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgICBxdWVyeSA9IHJlcS5xdWVyeTtcbiAgICAgIHNwYWNlX2lkID0gcXVlcnkuc3BhY2VfaWQ7XG4gICAgICBmbG93X2lkID0gcXVlcnkuZmxvd19pZDtcbiAgICAgIHR5cGUgPSBwYXJzZUludChxdWVyeS50eXBlKTtcbiAgICAgIHRpbWV6b25lb2Zmc2V0ID0gcGFyc2VJbnQocXVlcnkudGltZXpvbmVvZmZzZXQpO1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZsb3dfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgZm9ybTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93LmZvcm1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAnY3VycmVudC5maWVsZHMnOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9ybV9uYW1lID0gZm9ybS5uYW1lO1xuICAgICAgZmllbGRzID0gZm9ybS5jdXJyZW50LmZpZWxkcztcbiAgICAgIHRhYmxlX2ZpZWxkcyA9IG5ldyBBcnJheTtcbiAgICAgIF8uZWFjaChmb3JtLmN1cnJlbnQuZmllbGRzLCBmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gXCJ0YWJsZVwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRhYmxlX2ZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnNfdG9feGxzID0gbmV3IEFycmF5O1xuICAgICAgc3RhcnRfZGF0ZSA9IG51bGw7XG4gICAgICBlbmRfZGF0ZSA9IG51bGw7XG4gICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgIHNlbGVjdG9yID0ge1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIGZsb3c6IGZsb3dfaWRcbiAgICAgIH07XG4gICAgICBzZWxlY3Rvci5zdGF0ZSA9IHtcbiAgICAgICAgJGluOiBbXCJwZW5kaW5nXCIsIFwiY29tcGxldGVkXCJdXG4gICAgICB9O1xuICAgICAgdWlkID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShzcGFjZV9pZCk7XG4gICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgIHNlbGVjdG9yLnN0YXRlID0gXCJub25lXCI7XG4gICAgICB9XG4gICAgICBpZiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyh1aWQpKSB7XG4gICAgICAgIGZsb3dfaWRzID0gV29ya2Zsb3dNYW5hZ2VyLmdldE15QWRtaW5Pck1vbml0b3JGbG93cyhzcGFjZV9pZCwgdWlkKTtcbiAgICAgICAgaWYgKCFmbG93X2lkcy5pbmNsdWRlcyhzZWxlY3Rvci5mbG93KSkge1xuICAgICAgICAgIHNlbGVjdG9yLiRvciA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3VibWl0dGVyOiB1aWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYXBwbGljYW50OiB1aWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgaW5ib3hfdXNlcnM6IHVpZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBvdXRib3hfdXNlcnM6IHVpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSAwKSB7XG4gICAgICAgIHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpO1xuICAgICAgICBzZWxlY3Rvci5zdWJtaXRfZGF0ZSA9IHtcbiAgICAgICAgICAkZ3RlOiBzdGFydF9kYXRlXG4gICAgICAgIH07XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xuICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAxKSB7XG4gICAgICAgIGxhc3RfbW9udGhfZGF0ZSA9IG5ldyBEYXRlKG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSkgLSAxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICAgICAgc3RhcnRfZGF0ZSA9IG5ldyBEYXRlKGxhc3RfbW9udGhfZGF0ZS5nZXRGdWxsWWVhcigpLCBsYXN0X21vbnRoX2RhdGUuZ2V0TW9udGgoKSwgMSk7XG4gICAgICAgIGVuZF9kYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCAxKTtcbiAgICAgICAgc2VsZWN0b3Iuc3VibWl0X2RhdGUgPSB7XG4gICAgICAgICAgJGd0ZTogc3RhcnRfZGF0ZSxcbiAgICAgICAgICAkbHRlOiBlbmRfZGF0ZVxuICAgICAgICB9O1xuICAgICAgICBpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoc2VsZWN0b3IsIHtcbiAgICAgICAgICBzb3J0OiB7XG4gICAgICAgICAgICBzdWJtaXRfZGF0ZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMikge1xuICAgICAgICBzdGFydF9kYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgICBzZWxlY3Rvci5zdWJtaXRfZGF0ZSA9IHtcbiAgICAgICAgICAkZ3RlOiBzdGFydF9kYXRlXG4gICAgICAgIH07XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xuICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAzKSB7XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xuICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgfVxuICAgICAgZWpzID0gcmVxdWlyZSgnZWpzJyk7XG4gICAgICBzdHIgPSBBc3NldHMuZ2V0VGV4dCgnc2VydmVyL2Vqcy9leHBvcnRfaW5zdGFuY2VzLmVqcycpO1xuICAgICAgZWpzTGludCA9IHJlcXVpcmUoJ2Vqcy1saW50Jyk7XG4gICAgICBlcnJvcl9vYmogPSBlanNMaW50LmxpbnQoc3RyLCB7fSk7XG4gICAgICBpZiAoZXJyb3Jfb2JqKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCI9PT0vYXBpL3dvcmtmbG93L2V4cG9ydDpcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Jfb2JqKTtcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlID0gZWpzLmNvbXBpbGUoc3RyKTtcbiAgICAgIGxhbmcgPSAnZW4nO1xuICAgICAgaWYgKGN1cnJlbnRfdXNlcl9pbmZvLmxvY2FsZSA9PT0gJ3poLWNuJykge1xuICAgICAgICBsYW5nID0gJ3poLUNOJztcbiAgICAgIH1cbiAgICAgIHV0Y09mZnNldCA9IHRpbWV6b25lb2Zmc2V0IC8gLTYwO1xuICAgICAgZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdGVyKSB7XG4gICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkudXRjT2Zmc2V0KHV0Y09mZnNldCkuZm9ybWF0KGZvcm1hdGVyKTtcbiAgICAgIH07XG4gICAgICByZXQgPSB0ZW1wbGF0ZSh7XG4gICAgICAgIGxhbmc6IGxhbmcsXG4gICAgICAgIGZvcm1hdERhdGU6IGZvcm1hdERhdGUsXG4gICAgICAgIGZvcm1fbmFtZTogZm9ybV9uYW1lLFxuICAgICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgICAgdGFibGVfZmllbGRzOiB0YWJsZV9maWVsZHMsXG4gICAgICAgIGluc190b194bHM6IGluc190b194bHNcbiAgICAgIH0pO1xuICAgICAgZmlsZU5hbWUgPSBcIlN0ZWVkT1NXb3JrZmxvd19cIiArIG1vbWVudCgpLmZvcm1hdCgnWVlZWU1NRERISG1tJykgKyBcIi54bHNcIjtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIik7XG4gICAgICByZXMuc2V0SGVhZGVyKFwiQ29udGVudC1EaXNwb3NpdGlvblwiLCBcImF0dGFjaG1lbnQ7ZmlsZW5hbWU9XCIgKyBlbmNvZGVVUkkoZmlsZU5hbWUpKTtcbiAgICAgIHJldHVybiByZXMuZW5kKHJldCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGUgPSBlcnJvcjtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICByZXR1cm4gcmVzLmVuZChlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL3VmL3NwYWNlL2NoYW5nZXNldCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdHF1ZXJ5ID0gcmVxLnF1ZXJ5XHJcblx0XHRhdXRoX3Rva2VuID0gZGIuYXV0aF90b2tlbnMuZmluZE9uZSh7YXV0aF90b2tlbjogcXVlcnkuYXV0aF90b2tlbn0pXHJcblxyXG5cdFx0aWYgKG5vdCBhdXRoX3Rva2VuKSBvciAobm90IGF1dGhfdG9rZW4uZW5hYmxlZClcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvciA0MDEsICdVbmF1dGhvcml6ZWQnXHJcblxyXG5cdFx0c3luY190b2tlbiA9IHF1ZXJ5W1wic3luY190b2tlblwiXVxyXG5cdFx0Zm9ybWlkcyA9IHF1ZXJ5W1wiZm9ybWlkc1wiXSAjIOmAl+WPt+malOW8gOWtl+espuS4slxyXG5cdFx0aXNfYWRtaW4gPSBxdWVyeVtcImlzX2FkbWluXCJdXHJcblxyXG5cdFx0ZGF0YSA9IHV1Zmxvd01hbmFnZXIuZ2V0X1NwYWNlQ2hhbmdlU2V0KGZvcm1pZHMsIGlzX2FkbWluLCBzeW5jX3Rva2VuKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0ZGF0YTogZGF0YVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfSIsIkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL3VmL3NwYWNlL2NoYW5nZXNldCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhdXRoX3Rva2VuLCBkYXRhLCBlLCBmb3JtaWRzLCBpc19hZG1pbiwgcXVlcnksIHN5bmNfdG9rZW47XG4gIHRyeSB7XG4gICAgcXVlcnkgPSByZXEucXVlcnk7XG4gICAgYXV0aF90b2tlbiA9IGRiLmF1dGhfdG9rZW5zLmZpbmRPbmUoe1xuICAgICAgYXV0aF90b2tlbjogcXVlcnkuYXV0aF90b2tlblxuICAgIH0pO1xuICAgIGlmICgoIWF1dGhfdG9rZW4pIHx8ICghYXV0aF90b2tlbi5lbmFibGVkKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig0MDEsICdVbmF1dGhvcml6ZWQnKTtcbiAgICB9XG4gICAgc3luY190b2tlbiA9IHF1ZXJ5W1wic3luY190b2tlblwiXTtcbiAgICBmb3JtaWRzID0gcXVlcnlbXCJmb3JtaWRzXCJdO1xuICAgIGlzX2FkbWluID0gcXVlcnlbXCJpc19hZG1pblwiXTtcbiAgICBkYXRhID0gdXVmbG93TWFuYWdlci5nZXRfU3BhY2VDaGFuZ2VTZXQoZm9ybWlkcywgaXNfYWRtaW4sIHN5bmNfdG9rZW4pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L3JldHJpZXZlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgKGluc3RhbmNlX2Zyb21fY2xpZW50KSAtPlxyXG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblx0XHRcdHJldHJpZXZlX2NvbW1lbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFsncmV0cmlldmVfY29tbWVudCddXHJcblxyXG5cdFx0XHQjIOmqjOivgWluc3RhbmNl5Li65a6h5qC45Lit54q25oCBXHJcblx0XHRcdCMgdXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSlcclxuXHRcdFx0IyDmoKHpqoznlLPor7fljZXmmK/lvZPliY3nlKjmiLflt7LlrqHmoLjov4fnmoTljZXlrZDmiJbogIXlvZPliY3nlKjmiLfmmK/mj5DkuqTkurrmiJbnlLPor7fkurpcclxuXHRcdFx0aWYgKG5vdCBpbnN0YW5jZS5vdXRib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgYW5kIChpbnN0YW5jZS5zdWJtaXR0ZXIgaXNudCBjdXJyZW50X3VzZXIgYW5kIGluc3RhbmNlLmFwcGxpY2FudCBpc250IGN1cnJlbnRfdXNlcilcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICflvZPliY3nlKjmiLfkuI3nrKblkIjlj5blm57mnaHku7YnKVxyXG5cclxuXHRcdFx0cmV0cmlldmVfdHlwZSA9IFwiXCJcclxuXHJcblx0XHRcdHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlc1xyXG5cclxuXHRcdFx0I+iOt+WPluacgOaWsOeahHRyYWNl77yMIOWNs+WPluWbnuatpemqpFxyXG5cdFx0XHRsYXN0X3RyYWNlID0gXy5sYXN0KHRyYWNlcylcclxuXHRcdFx0bGFzdF90cmFjZV9pZCA9IGxhc3RfdHJhY2UuX2lkXHJcblx0XHRcdHByZXZpb3VzX3RyYWNlX2lkID0gbGFzdF90cmFjZS5wcmV2aW91c190cmFjZV9pZHNbMF07XHJcblx0XHRcdHByZXZpb3VzX3RyYWNlID0gXy5maW5kKHRyYWNlcywgKHQpLT5cclxuXHRcdFx0XHRyZXR1cm4gdC5faWQgaXMgcHJldmlvdXNfdHJhY2VfaWRcclxuXHRcdFx0KVxyXG5cdFx0XHRwcmV2aW91c190cmFjZV9zdGVwX2lkID0gcHJldmlvdXNfdHJhY2Uuc3RlcFxyXG5cdFx0XHRwcmV2aW91c190cmFjZV9uYW1lID0gcHJldmlvdXNfdHJhY2UubmFtZVxyXG5cdFx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblx0XHRcdHByZXZpb3VzX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQpXHJcblx0XHRcdGlmIHByZXZpb3VzX3N0ZXAuc3RlcF90eXBlIGlzIFwiY291bnRlclNpZ25cIlxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+S8muetvuS4jeiDveWPluWbnicpXHJcblxyXG5cdFx0XHQjIOWPluWbnuatpemqpOeahOWJjeS4gOS4quatpemqpOWkhOeQhuS6uuWUr+S4gO+8iOWNs+aOkumZpOaOieS8oOmYheWSjOi9rOWPkeeahGFwcHJvdmXlkI7vvIzliankvZnnmoRhcHByb3Zl5Y+q5pyJ5LiA5Liq77yJ5bm25LiU5piv5b2T5YmN55So5oi3XHJcblx0XHRcdHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzID0gXy5maWx0ZXIgcHJldmlvdXNfdHJhY2UuYXBwcm92ZXMsIChhKS0+XHJcblx0XHRcdFx0cmV0dXJuIGEudHlwZSBpc250ICdjYycgYW5kIGEudHlwZSBpc250ICdkaXN0cmlidXRlJyBhbmQgYS50eXBlIGlzbnQgJ2ZvcndhcmQnIGFuZCBbJ2FwcHJvdmVkJywnc3VibWl0dGVkJywncmVqZWN0ZWQnXS5pbmNsdWRlcyhhLmp1ZGdlKVxyXG5cclxuXHRcdFx0aWYgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXMubGVuZ3RoIGlzIDEgYW5kIChwcmV2aW91c190cmFjZV9hcHByb3Zlc1swXS51c2VyIGlzIGN1cnJlbnRfdXNlciBvciBwcmV2aW91c190cmFjZV9hcHByb3Zlc1swXS5oYW5kbGVyIGlzIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0XHRyZXRyaWV2ZV90eXBlID0gJ25vcm1hbCcgIyDnlLPor7fljZXmraPluLjmtYHovaznmoTlj5blm57vvIzljbPpnZ7kvKDpmIXlj5blm55cclxuXHJcblx0XHRcdGkgPSB0cmFjZXMubGVuZ3RoXHJcblx0XHRcdHJldHJpZXZlX2FwcHJvdmUgPSB7fVxyXG5cdFx0XHR3aGlsZSBpID4gMFxyXG5cdFx0XHRcdF8uZWFjaCB0cmFjZXNbaS0xXS5hcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0XHRcdGlmIGEudHlwZSBpcyAnY2MnIGFuZCBhLmlzX2ZpbmlzaGVkIGlzIHRydWUgYW5kIGEudXNlciBpcyBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfdHlwZSA9ICdjYydcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwcm92ZSA9IGFcclxuXHJcblx0XHRcdFx0aWYgcmV0cmlldmVfdHlwZSBpcyAnY2MnXHJcblx0XHRcdFx0XHRicmVha1xyXG5cclxuXHRcdFx0XHRpLS1cclxuXHJcblxyXG5cdFx0XHRpZiByZXRyaWV2ZV90eXBlIGlzICdub3JtYWwnXHJcblx0XHRcdFx0IyDojrflj5bkuIDkuKpmbG93XHJcblx0XHRcdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxyXG5cdFx0XHRcdHByZXZpb3VzX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQpXHJcblx0XHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdFx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkXHJcblx0XHRcdFx0b2xkX2luYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnNcclxuXHRcdFx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0XHRfLmVhY2ggdHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0aWYgdC5faWQgaXMgbGFzdF90cmFjZV9pZFxyXG5cdFx0XHRcdFx0XHRpZiBub3QgdC5hcHByb3Zlc1xyXG5cdFx0XHRcdFx0XHRcdHQuYXBwcm92ZXMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZS5hcHByb3Zl6K6w5b2VXHJcblx0XHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYXBwciktPlxyXG5cdFx0XHRcdFx0XHRcdGlmIGFwcHIuaXNfZmluaXNoZWQgPT0gZmFsc2UgYW5kIGFwcHIudHlwZSBpc250IFwiY2NcIlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwci5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRcdFx0YXBwci5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwci5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmNvc3RfdGltZSA9IGFwcHIuZmluaXNoX2RhdGUgLSBhcHByLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0IyDlnKjlkIzkuIB0cmFjZeS4i+aPkuWFpeWPluWbnuaTjeS9nOiAheeahGFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdFx0Y3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0XHRcdFx0Y3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7IGZpZWxkczogeyBuYW1lOiAxLCBmdWxsbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci50cmFjZSA9IHQuX2lkXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5kdWVfZGF0ZSA9IHQuZHVlX2RhdGVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5yZWFkX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5qdWRnZSA9IFwicmV0cmlldmVkXCJcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5pc19yZWFkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmRlc2NyaXB0aW9uID0gcmV0cmlldmVfY29tbWVudFxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci52YWx1ZXMgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuY29zdF90aW1lID0gcmV0cmlldmVfYXBwci5maW5pc2hfZGF0ZSAtIHJldHJpZXZlX2FwcHIuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHR0LmFwcHJvdmVzLnB1c2gocmV0cmlldmVfYXBwcilcclxuXHJcblx0XHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2XorrDlvZVcclxuXHRcdFx0XHRcdFx0dC5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0dC5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHR0Lmp1ZGdlID0gXCJyZXRyaWV2ZWRcIlxyXG5cclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZV9pZF1cclxuXHRcdFx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RlcCA9IHByZXZpb3VzX3RyYWNlX3N0ZXBfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5uYW1lID0gcHJldmlvdXNfdHJhY2VfbmFtZVxyXG5cdFx0XHRcdG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdUcmFjZS5kdWVfZGF0ZSA9IHV1Zmxvd01hbmFnZXIuZ2V0RHVlRGF0ZShwcmV2aW91c19zdGVwLnRpbWVvdXRfaG91cnMsIHNwYWNlX2lkKVxyXG5cdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRuZXdBcHByb3ZlID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRcdG5ld0FwcHJvdmUudHJhY2UgPSBuZXdUcmFjZS5faWRcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2VcclxuXHRcdFx0XHRuZXdBcHByb3ZlLnVzZXIgPSBjdXJyZW50X3VzZXJcclxuXHJcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIsIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUudXNlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lXHJcblxyXG5cdFx0XHRcdHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cdFx0XHRcdCMg6I635Y+WbmV4dF9zdGVwX3VzZXLmiYDlnKjnmoTpg6jpl6jkv6Hmga9cclxuXHRcdFx0XHRvcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhzcGFjZV91c2VyKVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBvcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl1cclxuXHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl1cclxuXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3QXBwcm92ZS5kdWVfZGF0ZSA9IG5ld1RyYWNlLmR1ZV9kYXRlXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5pc19yZWFkID0gZmFsc2VcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3RcclxuXHJcblx0XHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSlcclxuXHJcblx0XHRcdFx0bmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKVxyXG5cdFx0XHRcdHNldE9iai5pbmJveF91c2VycyA9IFtjdXJyZW50X3VzZXJdXHJcblxyXG5cdFx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5vd1xyXG5cdFx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdHRyYWNlcy5wdXNoKG5ld1RyYWNlKVxyXG5cdFx0XHRcdHNldE9iai50cmFjZXMgPSB0cmFjZXNcclxuXHRcdFx0XHRzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIlxyXG5cdFx0XHRcdHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlXHJcblxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHByZXZpb3VzX3RyYWNlX25hbWVcclxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gdXVmbG93TWFuYWdlci5nZXRDdXJyZW50U3RlcEF1dG9TdWJtaXQoZmxvdy50aW1lb3V0X2F1dG9fc3VibWl0LCBwcmV2aW91c19zdGVwLmxpbmVzKVxyXG5cclxuXHRcdFx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiBzZXRPYmp9KVxyXG5cdFx0XHRcdGlmIHJcclxuXHRcdFx0XHRcdCMg57uZ6KKr5Yig6Zmk55qEaW5ib3hfdXNlcnMg5ZKMIOW9k+WJjeeUqOaItyDlj5HpgIFwdXNoXHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cdFx0XHRcdFx0Xy5lYWNoKG9sZF9pbmJveF91c2VycywgKHVzZXJfaWQpLT5cclxuXHRcdFx0XHRcdFx0aWYgdXNlcl9pZCBpc250IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKVxyXG5cdFx0XHRcdFx0KVxyXG5cclxuXHRcdFx0XHRcdGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRcdFx0XHQjIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmV0cmlldmUnLCBjdXJyZW50X3VzZXIsIGlucy5pbmJveF91c2VycylcclxuXHJcblx0XHRcdGVsc2UgaWYgcmV0cmlldmVfdHlwZSBpcyAnY2MnXHJcblx0XHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdG5vdyA9IG5ldyBEYXRlXHJcblx0XHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZS5faWRcclxuXHRcdFx0XHR0aGVfdHJhY2UgPSBfLmZpbmQgdHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0cmV0dXJuIHQuX2lkIGlzIHJldHJpZXZlX2FwcHJvdmUudHJhY2VcclxuXHJcblx0XHRcdFx0Xy5lYWNoIHRoZV90cmFjZS5hcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0XHRcdGlmIGEuX2lkIGlzIHJldHJpZXZlX2FwcHJvdmUuX2lkXHJcblx0XHRcdFx0XHRcdGEuaXNfZmluaXNoZWQgPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRhLmZpbmlzaF9kYXRlID0gdW5kZWZpbmVkXHJcblx0XHRcdFx0XHRcdGEuanVkZ2UgPSB1bmRlZmluZWRcclxuXHRcdFx0XHRcdFx0YS5jb3N0X3RpbWUgPSB1bmRlZmluZWRcclxuXHJcblx0XHRcdFx0Y2NfdXNlcnMgPSBpbnN0YW5jZS5jY191c2Vyc1xyXG5cdFx0XHRcdGNjX3VzZXJzLnB1c2goY3VycmVudF91c2VyKVxyXG5cclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIlxyXG5cdFx0XHRcdHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlXHJcblx0XHRcdFx0c2V0T2JqLmNjX3VzZXJzID0gY2NfdXNlcnNcclxuXHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzJ10gPSB0aGVfdHJhY2UuYXBwcm92ZXNcclxuXHJcblx0XHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWQsICd0cmFjZXMuX2lkJzogcmV0cmlldmVfYXBwcm92ZS50cmFjZX0sIHskc2V0OiBzZXRPYmp9KVxyXG5cdFx0XHRcdGlmIHJcclxuXHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXHJcblxyXG5cdFx0XHRcdGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZXRyaWV2ZScsIGN1cnJlbnRfdXNlciwgW2N1cnJlbnRfdXNlcl0pXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHt9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YToge2Vycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L3JldHJpZXZlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBjY191c2VycywgZmxvdywgaGFuZGxlcl9pbmZvLCBpLCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9pZCwgbGFzdF90cmFjZSwgbGFzdF90cmFjZV9pZCwgbmV3QXBwcm92ZSwgbmV3VHJhY2UsIG5vdywgb2xkX2luYm94X3VzZXJzLCBvcmdfaW5mbywgcHJldmlvdXNfc3RlcCwgcHJldmlvdXNfdHJhY2UsIHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzLCBwcmV2aW91c190cmFjZV9pZCwgcHJldmlvdXNfdHJhY2VfbmFtZSwgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZCwgciwgcmV0cmlldmVfYXBwcm92ZSwgcmV0cmlldmVfY29tbWVudCwgcmV0cmlldmVfdHlwZSwgc2V0T2JqLCBzcGFjZV9pZCwgc3BhY2VfdXNlciwgdGhlX3RyYWNlLCB0cmFjZXM7XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pO1xuICAgICAgcmV0cmlldmVfY29tbWVudCA9IGluc3RhbmNlX2Zyb21fY2xpZW50WydyZXRyaWV2ZV9jb21tZW50J107XG4gICAgICBpZiAoKCFpbnN0YW5jZS5vdXRib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgJiYgKGluc3RhbmNlLnN1Ym1pdHRlciAhPT0gY3VycmVudF91c2VyICYmIGluc3RhbmNlLmFwcGxpY2FudCAhPT0gY3VycmVudF91c2VyKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICflvZPliY3nlKjmiLfkuI3nrKblkIjlj5blm57mnaHku7YnKTtcbiAgICAgIH1cbiAgICAgIHJldHJpZXZlX3R5cGUgPSBcIlwiO1xuICAgICAgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuICAgICAgbGFzdF90cmFjZSA9IF8ubGFzdCh0cmFjZXMpO1xuICAgICAgbGFzdF90cmFjZV9pZCA9IGxhc3RfdHJhY2UuX2lkO1xuICAgICAgcHJldmlvdXNfdHJhY2VfaWQgPSBsYXN0X3RyYWNlLnByZXZpb3VzX3RyYWNlX2lkc1swXTtcbiAgICAgIHByZXZpb3VzX3RyYWNlID0gXy5maW5kKHRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5faWQgPT09IHByZXZpb3VzX3RyYWNlX2lkO1xuICAgICAgfSk7XG4gICAgICBwcmV2aW91c190cmFjZV9zdGVwX2lkID0gcHJldmlvdXNfdHJhY2Uuc3RlcDtcbiAgICAgIHByZXZpb3VzX3RyYWNlX25hbWUgPSBwcmV2aW91c190cmFjZS5uYW1lO1xuICAgICAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KTtcbiAgICAgIHByZXZpb3VzX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQpO1xuICAgICAgaWYgKHByZXZpb3VzX3N0ZXAuc3RlcF90eXBlID09PSBcImNvdW50ZXJTaWduXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5Lya562+5LiN6IO95Y+W5ZueJyk7XG4gICAgICB9XG4gICAgICBwcmV2aW91c190cmFjZV9hcHByb3ZlcyA9IF8uZmlsdGVyKHByZXZpb3VzX3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgIHJldHVybiBhLnR5cGUgIT09ICdjYycgJiYgYS50eXBlICE9PSAnZGlzdHJpYnV0ZScgJiYgYS50eXBlICE9PSAnZm9yd2FyZCcgJiYgWydhcHByb3ZlZCcsICdzdWJtaXR0ZWQnLCAncmVqZWN0ZWQnXS5pbmNsdWRlcyhhLmp1ZGdlKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzLmxlbmd0aCA9PT0gMSAmJiAocHJldmlvdXNfdHJhY2VfYXBwcm92ZXNbMF0udXNlciA9PT0gY3VycmVudF91c2VyIHx8IHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzWzBdLmhhbmRsZXIgPT09IGN1cnJlbnRfdXNlcikpIHtcbiAgICAgICAgcmV0cmlldmVfdHlwZSA9ICdub3JtYWwnO1xuICAgICAgfVxuICAgICAgaSA9IHRyYWNlcy5sZW5ndGg7XG4gICAgICByZXRyaWV2ZV9hcHByb3ZlID0ge307XG4gICAgICB3aGlsZSAoaSA+IDApIHtcbiAgICAgICAgXy5lYWNoKHRyYWNlc1tpIC0gMV0uYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICBpZiAoYS50eXBlID09PSAnY2MnICYmIGEuaXNfZmluaXNoZWQgPT09IHRydWUgJiYgYS51c2VyID09PSBjdXJyZW50X3VzZXIpIHtcbiAgICAgICAgICAgIHJldHJpZXZlX3R5cGUgPSAnY2MnO1xuICAgICAgICAgICAgcmV0dXJuIHJldHJpZXZlX2FwcHJvdmUgPSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXRyaWV2ZV90eXBlID09PSAnY2MnKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgaWYgKHJldHJpZXZlX3R5cGUgPT09ICdub3JtYWwnKSB7XG4gICAgICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgICAgIHByZXZpb3VzX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQpO1xuICAgICAgICBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuICAgICAgICBpbnN0YW5jZV9pZCA9IGluc3RhbmNlLl9pZDtcbiAgICAgICAgb2xkX2luYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnM7XG4gICAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgICBfLmVhY2godHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRfc3BhY2VfdXNlciwgY3VycmVudF91c2VyX29yZ2FuaXphdGlvbiwgcmV0cmlldmVfYXBwcjtcbiAgICAgICAgICBpZiAodC5faWQgPT09IGxhc3RfdHJhY2VfaWQpIHtcbiAgICAgICAgICAgIGlmICghdC5hcHByb3Zlcykge1xuICAgICAgICAgICAgICB0LmFwcHJvdmVzID0gbmV3IEFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGFwcHIpIHtcbiAgICAgICAgICAgICAgaWYgKGFwcHIuaXNfZmluaXNoZWQgPT09IGZhbHNlICYmIGFwcHIudHlwZSAhPT0gXCJjY1wiKSB7XG4gICAgICAgICAgICAgICAgYXBwci5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICAgIGFwcHIuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgICAgYXBwci5yZWFkX2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgICAgYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGFwcHIuaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXBwci5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXBwci5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHByLmNvc3RfdGltZSA9IGFwcHIuZmluaXNoX2RhdGUgLSBhcHByLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICAgICAgICBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHtcbiAgICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci50cmFjZSA9IHQuX2lkO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnVzZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbjtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24ubmFtZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuZHVlX2RhdGUgPSB0LmR1ZV9kYXRlO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5yZWFkX2RhdGUgPSBub3c7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmp1ZGdlID0gXCJyZXRyaWV2ZWRcIjtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmRlc2NyaXB0aW9uID0gcmV0cmlldmVfY29tbWVudDtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuY29zdF90aW1lID0gcmV0cmlldmVfYXBwci5maW5pc2hfZGF0ZSAtIHJldHJpZXZlX2FwcHIuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgIHQuYXBwcm92ZXMucHVzaChyZXRyaWV2ZV9hcHByKTtcbiAgICAgICAgICAgIHQuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdC5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIHJldHVybiB0Lmp1ZGdlID0gXCJyZXRyaWV2ZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBuZXdUcmFjZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgIG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgIG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlX2lkXTtcbiAgICAgICAgbmV3VHJhY2UuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RlcCA9IHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQ7XG4gICAgICAgIG5ld1RyYWNlLm5hbWUgPSBwcmV2aW91c190cmFjZV9uYW1lO1xuICAgICAgICBuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICBuZXdUcmFjZS5kdWVfZGF0ZSA9IHV1Zmxvd01hbmFnZXIuZ2V0RHVlRGF0ZShwcmV2aW91c19zdGVwLnRpbWVvdXRfaG91cnMsIHNwYWNlX2lkKTtcbiAgICAgICAgbmV3VHJhY2UuYXBwcm92ZXMgPSBbXTtcbiAgICAgICAgbmV3QXBwcm92ZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICBuZXdBcHByb3ZlLnRyYWNlID0gbmV3VHJhY2UuX2lkO1xuICAgICAgICBuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIG5ld0FwcHJvdmUudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgaGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIsIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xuICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgICAgb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcik7XG4gICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBvcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdO1xuICAgICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBuZXdUcmFjZS5kdWVfZGF0ZTtcbiAgICAgICAgbmV3QXBwcm92ZS5pc19yZWFkID0gZmFsc2U7XG4gICAgICAgIG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgbmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICB1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBuZXdBcHByb3ZlKTtcbiAgICAgICAgbmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKTtcbiAgICAgICAgc2V0T2JqLmluYm94X3VzZXJzID0gW2N1cnJlbnRfdXNlcl07XG4gICAgICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgICB0cmFjZXMucHVzaChuZXdUcmFjZSk7XG4gICAgICAgIHNldE9iai50cmFjZXMgPSB0cmFjZXM7XG4gICAgICAgIHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiO1xuICAgICAgICBzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gcHJldmlvdXNfdHJhY2VfbmFtZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgcHJldmlvdXNfc3RlcC5saW5lcyk7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgICAgXy5lYWNoKG9sZF9pbmJveF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICAgICAgaWYgKHVzZXJfaWQgIT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JldHJpZXZlJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJldHJpZXZlX3R5cGUgPT09ICdjYycpIHtcbiAgICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkO1xuICAgICAgICB0aGVfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgcmV0dXJuIHQuX2lkID09PSByZXRyaWV2ZV9hcHByb3ZlLnRyYWNlO1xuICAgICAgICB9KTtcbiAgICAgICAgXy5lYWNoKHRoZV90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgIGlmIChhLl9pZCA9PT0gcmV0cmlldmVfYXBwcm92ZS5faWQpIHtcbiAgICAgICAgICAgIGEuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGEuZmluaXNoX2RhdGUgPSB2b2lkIDA7XG4gICAgICAgICAgICBhLmp1ZGdlID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIGEuY29zdF90aW1lID0gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNjX3VzZXJzID0gaW5zdGFuY2UuY2NfdXNlcnM7XG4gICAgICAgIGNjX3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbm93O1xuICAgICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiO1xuICAgICAgICBzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZTtcbiAgICAgICAgc2V0T2JqLmNjX3VzZXJzID0gY2NfdXNlcnM7XG4gICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMnXSA9IHRoZV90cmFjZS5hcHByb3ZlcztcbiAgICAgICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VfaWQsXG4gICAgICAgICAgJ3RyYWNlcy5faWQnOiByZXRyaWV2ZV9hcHByb3ZlLnRyYWNlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JldHJpZXZlJywgY3VycmVudF91c2VyLCBbY3VycmVudF91c2VyXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHt9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L2ZvcndhcmQnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuXHR0cnkge1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XHJcblx0XHR2YXIgY3VycmVudF91c2VyX2lkID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xyXG5cclxuXHRcdHZhciBoYXNoRGF0YSA9IHJlcS5ib2R5O1xyXG5cdFx0dmFyIGluc3RhbmNlX2lkID0gaGFzaERhdGEuaW5zdGFuY2VfaWQ7XHJcblx0XHR2YXIgc3BhY2VfaWQgPSBoYXNoRGF0YS5zcGFjZV9pZDtcclxuXHRcdHZhciBmbG93X2lkID0gaGFzaERhdGEuZmxvd19pZDtcclxuXHRcdHZhciBoYXNTYXZlSW5zdGFuY2VUb0F0dGFjaG1lbnQgPSBoYXNoRGF0YS5oYXNTYXZlSW5zdGFuY2VUb0F0dGFjaG1lbnQ7XHJcblx0XHR2YXIgZGVzY3JpcHRpb24gPSBoYXNoRGF0YS5kZXNjcmlwdGlvbjtcclxuXHRcdHZhciBpc0ZvcndhcmRBdHRhY2htZW50cyA9IGhhc2hEYXRhLmlzRm9yd2FyZEF0dGFjaG1lbnRzO1xyXG5cdFx0dmFyIHNlbGVjdGVkVXNlcnMgPSBoYXNoRGF0YS5zZWxlY3RlZFVzZXJzO1xyXG5cdFx0dmFyIGFjdGlvbl90eXBlID0gaGFzaERhdGEuYWN0aW9uX3R5cGU7XHJcblx0XHR2YXIgcmVsYXRlZCA9IGhhc2hEYXRhLnJlbGF0ZWQ7XHJcblx0XHR2YXIgZnJvbV9hcHByb3ZlX2lkID0gaGFzaERhdGEuZnJvbV9hcHByb3ZlX2lkO1xyXG5cclxuXHRcdGNoZWNrKGluc3RhbmNlX2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soc3BhY2VfaWQsIFN0cmluZyk7XHJcblx0XHRjaGVjayhmbG93X2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50LCBCb29sZWFuKTtcclxuXHRcdGNoZWNrKGRlc2NyaXB0aW9uLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soaXNGb3J3YXJkQXR0YWNobWVudHMsIEJvb2xlYW4pO1xyXG5cdFx0Y2hlY2soc2VsZWN0ZWRVc2VycywgQXJyYXkpO1xyXG5cdFx0Y2hlY2soYWN0aW9uX3R5cGUsIE1hdGNoLk9uZU9mKCdmb3J3YXJkJywgJ2Rpc3RyaWJ1dGUnKSk7XHJcblxyXG5cdFx0aWYgKGFjdGlvbl90eXBlID09IFwiZGlzdHJpYnV0ZVwiKVxyXG5cdFx0XHRjaGVjayhmcm9tX2FwcHJvdmVfaWQsIFN0cmluZyk7XHJcblxyXG5cdFx0dmFyIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKTtcclxuXHRcdHZhciBvbGRfc3BhY2VfaWQgPSBpbnMuc3BhY2U7XHJcblxyXG5cdFx0dmFyIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQpO1xyXG5cclxuXHRcdHZhciBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlX2lkKTtcclxuXHJcblx0XHRpZiAoIWlucyB8fCAhZmxvdyB8fCAhc3BhY2UpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcigncGFyYW1zIGVycm9yIScsICdyZWNvcmQgbm90IGV4aXN0cyEnKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZm9yd2FyZF91c2VycyA9IG5ldyBBcnJheTtcclxuXHRcdGlmIChfLmlzRW1wdHkoc2VsZWN0ZWRVc2VycykpIHtcclxuXHRcdFx0Zm9yd2FyZF91c2VycyA9IFtjdXJyZW50X3VzZXJfaWRdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yd2FyZF91c2VycyA9IHNlbGVjdGVkVXNlcnM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g5qCh6aqM5YiG5Y+R5a+56LGh5piv5ZCm5pyJ5YiG5Y+R5rWB56iL55qE5o+Q5Lqk5p2D6ZmQXHJcblx0XHR2YXIgbm9fcGVybWlzc2lvbl91c2VyX2lkcyA9IG5ldyBBcnJheSgpO1xyXG5cdFx0Xy5lYWNoKGZvcndhcmRfdXNlcnMsIGZ1bmN0aW9uICh1aWQpIHtcclxuXHRcdFx0dmFyIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dfaWQsIHVpZCk7XHJcblx0XHRcdGlmICghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZGRcIikpIHtcclxuXHRcdFx0XHQvLyB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuivpeeUs+ivt+S6uuayoeacieaPkOS6pOatpOeUs+ivt+WNleeahOadg+mZkOOAglwiKVxyXG5cdFx0XHRcdG5vX3Blcm1pc3Npb25fdXNlcl9pZHMucHVzaCh1aWQpO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0aWYgKCFfLmlzRW1wdHkobm9fcGVybWlzc2lvbl91c2VyX2lkcykpIHtcclxuXHRcdFx0dmFyIG5vX3Blcm1pc3Npb25fdXNlcnNfbmFtZSA9IG5ldyBBcnJheSgpO1xyXG5cdFx0XHRkYi51c2Vycy5maW5kKHtcclxuXHRcdFx0XHRfaWQ6IHtcclxuXHRcdFx0XHRcdCRpbjogbm9fcGVybWlzc2lvbl91c2VyX2lkc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkuZm9yRWFjaChmdW5jdGlvbiAodSkge1xyXG5cdFx0XHRcdG5vX3Blcm1pc3Npb25fdXNlcnNfbmFtZS5wdXNoKHUubmFtZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdub19wZXJtaXNzaW9uJywgXCLor6Xmj5DkuqTkurrmsqHmnInmj5DkuqTmraTnlLPor7fljZXnmoTmnYPpmZDjgIJcIiwgbm9fcGVybWlzc2lvbl91c2Vyc19uYW1lLmpvaW4oJywnKSlcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbmV3X2luc19pZHMgPSBuZXcgQXJyYXk7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRfdHJhY2UgPSBudWxsO1xyXG5cdFx0aWYgKGFjdGlvbl90eXBlID09IFwiZGlzdHJpYnV0ZVwiKSB7XHJcblx0XHRcdF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRcdGlmICghY3VycmVudF90cmFjZSkge1xyXG5cdFx0XHRcdFx0Xy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uIChhKSB7XHJcblx0XHRcdFx0XHRcdGlmICghY3VycmVudF90cmFjZSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChhLl9pZCA9PSBmcm9tX2FwcHJvdmVfaWQpXHJcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50X3RyYWNlID0gdDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjdXJyZW50X3RyYWNlID0gXy5sYXN0KGlucy50cmFjZXMpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGN1cnJlbnRfdHJhY2VfaWQgPSBjdXJyZW50X3RyYWNlLl9pZDtcclxuXHRcdHZhciBmb3J3YXJkX2FwcHJvdmVzID0gW107XHJcblx0XHR2YXIgZnJvbV91c2VyX25hbWUgPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcl9pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRuYW1lOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pLm5hbWVcclxuXHRcdHZhciBzZXRfb2JqID0gbmV3IE9iamVjdDtcclxuXHJcblx0XHQvLyDorqHnrpd2YWx1ZXNcclxuXHRcdHZhciBvbGRfdmFsdWVzID0gaW5zLnZhbHVlcyxcclxuXHRcdFx0bmV3X3ZhbHVlcyA9IHt9O1xyXG5cdFx0dmFyIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZsb3cuZm9ybSk7XHJcblx0XHR2YXIgZmllbGRzID0gZm9ybS5jdXJyZW50LmZpZWxkcyB8fCBbXTtcclxuXHJcblx0XHR2YXIgb2xkX2Zvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGlucy5mb3JtKTtcclxuXHRcdHZhciBvbGRfZm9ybV92ZXJzaW9uID0gaW5zLmZvcm1fdmVyc2lvbixcclxuXHRcdFx0b2xkX2ZpZWxkcyA9IFtdLFxyXG5cdFx0XHRjb21tb25fZmllbGRzID0gW107XHJcblxyXG5cdFx0dmFyIHNlbGVjdF90b19pbnB1dF9maWVsZHMgPSBbXTtcclxuXHJcblx0XHRpZiAob2xkX2Zvcm0uY3VycmVudC5faWQgPT0gb2xkX2Zvcm1fdmVyc2lvbikge1xyXG5cdFx0XHRvbGRfZmllbGRzID0gb2xkX2Zvcm0uY3VycmVudC5maWVsZHM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAob2xkX2Zvcm0uaGlzdG9yeXMpIHtcclxuXHRcdFx0XHRvbGRfZm9ybS5oaXN0b3J5cy5mb3JFYWNoKGZ1bmN0aW9uIChoKSB7XHJcblx0XHRcdFx0XHRpZiAoaC5faWQgPT0gb2xkX2Zvcm1fdmVyc2lvbilcclxuXHRcdFx0XHRcdFx0b2xkX2ZpZWxkcyA9IGguZmllbGRzO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuXHRcdFx0dmFyIGV4aXN0c19maWVsZCA9IF8uZmluZChvbGRfZmllbGRzLCBmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdHJldHVybiBmLnR5cGUgPT0gZmllbGQudHlwZSAmJiBmLmNvZGUgPT0gZmllbGQuY29kZTtcclxuXHRcdFx0fSlcclxuXHRcdFx0aWYgKGV4aXN0c19maWVsZClcclxuXHRcdFx0XHRjb21tb25fZmllbGRzLnB1c2goZmllbGQpO1xyXG5cdFx0XHR2YXIgc2VsZWN0X2lucHV0X2ZpZWxkID0gXy5maW5kKG9sZF9maWVsZHMsIGZ1bmN0aW9uIChmKSB7XHJcblx0XHRcdFx0cmV0dXJuIGYudHlwZSA9PSAnc2VsZWN0JyAmJiBmaWVsZC50eXBlID09ICdpbnB1dCcgJiYgZi5jb2RlID09IGZpZWxkLmNvZGU7XHJcblx0XHRcdH0pXHJcblx0XHRcdGlmIChzZWxlY3RfaW5wdXRfZmllbGQpXHJcblx0XHRcdFx0c2VsZWN0X3RvX2lucHV0X2ZpZWxkcy5wdXNoKHNlbGVjdF9pbnB1dF9maWVsZCk7XHJcblx0XHR9KVxyXG5cclxuXHRcdHNlbGVjdF90b19pbnB1dF9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuXHRcdFx0aWYgKG9sZF92YWx1ZXNbZmllbGQuY29kZV0pIHtcclxuXHRcdFx0XHRuZXdfdmFsdWVzW2ZpZWxkLmNvZGVdID0gb2xkX3ZhbHVlc1tmaWVsZC5jb2RlXTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHRjb21tb25fZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XHJcblx0XHRcdGlmIChmaWVsZC50eXBlID09ICdzZWN0aW9uJykge1xyXG5cdFx0XHRcdGlmIChmaWVsZC5maWVsZHMpIHtcclxuXHRcdFx0XHRcdGZpZWxkLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XHJcblx0XHRcdFx0XHRcdC8vIOi3qOW3peS9nOWMuui9rOWPkeS4jeWkjeWItumAieS6uumAiee7hFxyXG5cdFx0XHRcdFx0XHRpZiAoWydncm91cCcsICd1c2VyJ10uaW5jbHVkZXMoZi50eXBlKSAmJiBvbGRfc3BhY2VfaWQgIT0gc3BhY2VfaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0dmFyIGtleSA9IGYuY29kZTtcclxuXHRcdFx0XHRcdFx0dmFyIG9sZF92ID0gb2xkX3ZhbHVlc1trZXldO1xyXG5cdFx0XHRcdFx0XHRpZiAob2xkX3YpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyDmoKHpqowg5Y2V6YCJ77yM5aSa6YCJ77yM5LiL5ouJ5qGGIOWtl+auteWAvOaYr+WQpuWcqOaWsOihqOWNleWvueW6lOWtl+auteeahOWPr+mAieWAvOiMg+WbtOWGhVxyXG5cdFx0XHRcdFx0XHRcdGlmIChmLnR5cGUgPT0gJ3NlbGVjdCcgfHwgZi50eXBlID09ICdyYWRpbycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZi5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pbmNsdWRlcyhvbGRfdikpXHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChmLnR5cGUgPT0gJ211bHRpU2VsZWN0Jykge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmLm9wdGlvbnMuc3BsaXQoJ1xcbicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9sZF9tdWx0aVNlbGVjdGVkID0gb2xkX3Yuc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBuZXdfbXVsdGlTZWxlY3RlZCA9IF8uaW50ZXJzZWN0aW9uKG9wdGlvbnMsIG9sZF9tdWx0aVNlbGVjdGVkKTtcclxuXHRcdFx0XHRcdFx0XHRcdG9sZF92ID0gbmV3X211bHRpU2VsZWN0ZWQuam9pbignLCcpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0bmV3X3ZhbHVlc1trZXldID0gb2xkX3Y7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKGZpZWxkLnR5cGUgPT0gJ3RhYmxlJykge1xyXG5cdFx0XHRcdGlmICghXy5pc0VtcHR5KG9sZF92YWx1ZXNbZmllbGQuY29kZV0pKSB7XHJcblx0XHRcdFx0XHRuZXdfdmFsdWVzW2ZpZWxkLmNvZGVdID0gbmV3IEFycmF5O1xyXG5cdFx0XHRcdFx0b2xkX3ZhbHVlc1tmaWVsZC5jb2RlXS5mb3JFYWNoKGZ1bmN0aW9uIChvbGRfdGFibGVfcm93X3ZhbHVlcykge1xyXG5cdFx0XHRcdFx0XHR2YXIgbmV3X3RhYmxlX3Jvd192YWx1ZXMgPSB7fTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICghXy5pc0VtcHR5KGZpZWxkLmZpZWxkcykpIHtcclxuXHRcdFx0XHRcdFx0XHRmaWVsZC5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8g6Leo5bel5L2c5Yy66L2s5Y+R5LiN5aSN5Yi26YCJ5Lq66YCJ57uEXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoWydncm91cCcsICd1c2VyJ10uaW5jbHVkZXMoZi50eXBlKSAmJiBvbGRfc3BhY2VfaWQgIT0gc3BhY2VfaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGtleSA9IGYuY29kZTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBvbGRfdiA9IG9sZF90YWJsZV9yb3dfdmFsdWVzW2tleV07XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAob2xkX3YpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8g5qCh6aqMIOWNlemAie+8jOWkmumAie+8jOS4i+aLieahhiDlrZfmrrXlgLzmmK/lkKblnKjmlrDooajljZXlr7nlupTlrZfmrrXnmoTlj6/pgInlgLzojIPlm7TlhoVcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGYudHlwZSA9PSAnc2VsZWN0JyB8fCBmLnR5cGUgPT0gJ3JhZGlvJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZi5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaW5jbHVkZXMob2xkX3YpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZi50eXBlID09ICdtdWx0aVNlbGVjdCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb3B0aW9ucyA9IGYub3B0aW9ucy5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIG9sZF9tdWx0aVNlbGVjdGVkID0gb2xkX3Yuc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgbmV3X211bHRpU2VsZWN0ZWQgPSBfLmludGVyc2VjdGlvbihvcHRpb25zLCBvbGRfbXVsdGlTZWxlY3RlZCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b2xkX3YgPSBuZXdfbXVsdGlTZWxlY3RlZC5qb2luKCcsJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdG5ld190YWJsZV9yb3dfdmFsdWVzW2tleV0gPSBvbGRfdjtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAob2xkX3RhYmxlX3Jvd192YWx1ZXMuX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3X3RhYmxlX3Jvd192YWx1ZXMuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCFfLmlzRW1wdHkobmV3X3RhYmxlX3Jvd192YWx1ZXMpKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3X3ZhbHVlc1tmaWVsZC5jb2RlXS5wdXNoKG5ld190YWJsZV9yb3dfdmFsdWVzKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8g6Leo5bel5L2c5Yy66L2s5Y+R5LiN5aSN5Yi26YCJ5Lq66YCJ57uEXHJcblx0XHRcdFx0aWYgKFsnZ3JvdXAnLCAndXNlciddLmluY2x1ZGVzKGZpZWxkLnR5cGUpICYmIG9sZF9zcGFjZV9pZCAhPSBzcGFjZV9pZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIga2V5ID0gZmllbGQuY29kZTtcclxuXHRcdFx0XHR2YXIgb2xkX3YgPSBvbGRfdmFsdWVzW2tleV07XHJcblx0XHRcdFx0aWYgKG9sZF92KSB7XHJcblx0XHRcdFx0XHQvLyDmoKHpqowg5Y2V6YCJ77yM5aSa6YCJ77yM5LiL5ouJ5qGGIOWtl+auteWAvOaYr+WQpuWcqOaWsOihqOWNleWvueW6lOWtl+auteeahOWPr+mAieWAvOiMg+WbtOWGhVxyXG5cdFx0XHRcdFx0aWYgKGZpZWxkLnR5cGUgPT0gJ3NlbGVjdCcgfHwgZmllbGQudHlwZSA9PSAncmFkaW8nKSB7XHJcblx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZmllbGQub3B0aW9ucy5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pbmNsdWRlcyhvbGRfdikpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChmaWVsZC50eXBlID09ICdtdWx0aVNlbGVjdCcpIHtcclxuXHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmaWVsZC5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0dmFyIG9sZF9tdWx0aVNlbGVjdGVkID0gb2xkX3Yuc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdFx0dmFyIG5ld19tdWx0aVNlbGVjdGVkID0gXy5pbnRlcnNlY3Rpb24ob3B0aW9ucywgb2xkX211bHRpU2VsZWN0ZWQpO1xyXG5cdFx0XHRcdFx0XHRvbGRfdiA9IG5ld19tdWx0aVNlbGVjdGVkLmpvaW4oJywnKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRuZXdfdmFsdWVzW2tleV0gPSBvbGRfdjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9KVxyXG5cclxuXHRcdC8v5aaC5p6c5piv5YiG5Y+R77yM5YiZdmFsdWXkuK3nmoRyZWNvcmRfbmVlZOOAgUZPTkRTSUTkuI3pnIDopoHliIblj5HliLDmlrDnlLPor7fljZXkuK1cclxuXHRcdGlmIChhY3Rpb25fdHlwZSA9PT0gJ2Rpc3RyaWJ1dGUnKSB7XHJcblx0XHRcdGRlbGV0ZSBuZXdfdmFsdWVzLnJlY29yZF9uZWVkO1xyXG5cdFx0XHRkZWxldGUgbmV3X3ZhbHVlcy5GT05EU0lEO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOiuoeeul+eUs+ivt+WNleagh+mimFxyXG5cdFx0dmFyIGluc3RhbmNlX25hbWUgPSBcIlwiO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm0uY3VycmVudC5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dmFyIGlzY3JpcHQgPSBuYW1lX2ZvcnVtbGEucmVwbGFjZSgvXFx7L2csIFwiKG5ld192YWx1ZXNbJ1wiKS5yZXBsYWNlKC9cXH0vZywgXCInXSB8fCAnJylcIik7XHJcblx0XHRcdFx0dmFyIHJldiA9IGV2YWwoaXNjcmlwdCk7XHJcblx0XHRcdFx0aW5zdGFuY2VfbmFtZSA9IHJldiB8fCBmbG93Lm5hbWU7XHJcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignY2FjdWxhdGVfaW5zdGFuY2VfbmFtZScsIFwi6K6h566X55Sz6K+35Y2V5qCH6aKY5Ye66ZSZ6K+35qOA5p+l6KGo5Y2V5qCH6aKY6ISa5pys44CCXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpbnN0YW5jZV9uYW1lID0gZmxvdy5uYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGluc3RhbmNl5Lit6K6w5b2V5b2T5YmN5q2l6aqk5ZCN56ewICMxMzE0XHJcblx0XHR2YXIgc3RhcnRfc3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uIChzdGVwKSB7XHJcblx0XHRcdHJldHVybiBzdGVwLnN0ZXBfdHlwZSA9PSAnc3RhcnQnO1xyXG5cdFx0fSlcclxuXHJcblx0XHQvLyDmlrDlu7rnlLPor7fljZXml7bvvIxpbnN0YW5jZXPorrDlvZXmtYHnqIvlkI3np7DjgIHmtYHnqIvliIbnsbvlkI3np7AgIzEzMTNcclxuXHRcdHZhciBjYXRlZ29yeV9uYW1lID0gXCJcIjtcclxuXHRcdGlmIChmb3JtLmNhdGVnb3J5KSB7XHJcblx0XHRcdHZhciBjYXRlZ29yeSA9IHV1Zmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcnkoZm9ybS5jYXRlZ29yeSk7XHJcblx0XHRcdGlmIChjYXRlZ29yeSlcclxuXHRcdFx0XHRjYXRlZ29yeV9uYW1lID0gY2F0ZWdvcnkubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRfLmVhY2goZm9yd2FyZF91c2VycywgZnVuY3Rpb24gKHVzZXJfaWQpIHtcclxuXHJcblx0XHRcdHZhciB1c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHVzZXJfaWQpO1xyXG5cclxuXHRcdFx0dmFyIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0dXNlcjogdXNlcl9pZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRvcmdhbml6YXRpb246IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR2YXIgc3BhY2VfdXNlcl9vcmdfaW5mbyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7XHJcblx0XHRcdFx0X2lkOiBzcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dmFyIG5vdyA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdHZhciBpbnNfb2JqID0ge307XHJcblxyXG5cdFx0XHR2YXIgYWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCB1c2VyX2lkKTtcclxuXHRcdFx0dmFyIGhhbmRsZXJfaWQgPSB1c2VyX2lkO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9zcGFjZV91c2VyID0gc3BhY2VfdXNlcjtcclxuXHRcdFx0dmFyIGhhbmRsZXJfb3JnX2luZm8gPSBzcGFjZV91c2VyX29yZ19pbmZvO1xyXG5cdFx0XHRpZiAoYWdlbnQpIHtcclxuXHRcdFx0XHRoYW5kbGVyX2lkID0gYWdlbnQ7XHJcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShhZ2VudCk7XHJcblx0XHRcdFx0aGFuZGxlcl9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGFnZW50KTtcclxuXHRcdFx0XHRoYW5kbGVyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKGhhbmRsZXJfc3BhY2VfdXNlcik7XHJcblx0XHRcdH1cclxuXHRcdFx0aW5zX29iai5faWQgPSBkYi5pbnN0YW5jZXMuX21ha2VOZXdJRCgpO1xyXG5cdFx0XHRpbnNfb2JqLnNwYWNlID0gc3BhY2VfaWQ7XHJcblx0XHRcdGluc19vYmouZmxvdyA9IGZsb3dfaWQ7XHJcblx0XHRcdGluc19vYmouZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50Ll9pZDtcclxuXHRcdFx0aW5zX29iai5mb3JtID0gZmxvdy5mb3JtO1xyXG5cdFx0XHRpbnNfb2JqLmZvcm1fdmVyc2lvbiA9IGZsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XHJcblx0XHRcdGluc19vYmoubmFtZSA9IGluc3RhbmNlX25hbWU7XHJcblx0XHRcdGluc19vYmouc3VibWl0dGVyID0gaGFuZGxlcl9pZDtcclxuXHRcdFx0aW5zX29iai5zdWJtaXR0ZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xyXG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudCA9IHVzZXJfaWQ7XHJcblx0XHRcdGluc19vYmouYXBwbGljYW50X25hbWUgPSB1c2VyX2luZm8ubmFtZTtcclxuXHRcdFx0aW5zX29iai5hcHBsaWNhbnRfb3JnYW5pemF0aW9uID0gc3BhY2VfdXNlci5vcmdhbml6YXRpb247XHJcblx0XHRcdGluc19vYmouYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mby5uYW1lO1xyXG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBzcGFjZV91c2VyX29yZ19pbmZvLmZ1bGxuYW1lO1xyXG5cdFx0XHRpbnNfb2JqLnN0YXRlID0gXCJkcmFmdFwiO1xyXG5cdFx0XHRpbnNfb2JqLmNvZGUgPSBcIlwiO1xyXG5cdFx0XHRpbnNfb2JqLmlzX2FyY2hpdmVkID0gZmFsc2U7XHJcblx0XHRcdGluc19vYmouaXNfZGVsZXRlZCA9IGZhbHNlO1xyXG5cdFx0XHRpbnNfb2JqLmNyZWF0ZWQgPSBub3c7XHJcblx0XHRcdGluc19vYmouY3JlYXRlZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcclxuXHRcdFx0aW5zX29iai5tb2RpZmllZCA9IG5vdztcclxuXHRcdFx0aW5zX29iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcclxuXHRcdFx0aW5zX29iai5pbmJveF91c2VycyA9IFtoYW5kbGVyX2lkXTtcclxuXHRcdFx0aW5zX29iai52YWx1ZXMgPSBuZXdfdmFsdWVzO1xyXG5cdFx0XHRpZiAoYWN0aW9uX3R5cGUgPT0gJ2Rpc3RyaWJ1dGUnKSB7XHJcblx0XHRcdFx0Ly8g6Kej5Yaz5aSa5qyh5YiG5Y+R55yL5LiN5Yiw5q2j5paH44CB6ZmE5Lu26Zeu6aKYXHJcblx0XHRcdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcclxuXHRcdFx0XHRcdGluc19vYmouZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlID0gaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzID0gXy5jbG9uZShpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XHJcblx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzLnB1c2goaW5zdGFuY2VfaWQpO1xyXG5cclxuXHRcdFx0XHRpZiAocmVsYXRlZCkge1xyXG5cdFx0XHRcdFx0aW5zX29iai5yZWxhdGVkX2luc3RhbmNlcyA9IFtpbnN0YW5jZV9pZF1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGFjdGlvbl90eXBlID09ICdmb3J3YXJkJykge1xyXG5cdFx0XHRcdGluc19vYmouZm9yd2FyZF9mcm9tX2luc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8g5paw5bu6VHJhY2VcclxuXHRcdFx0dmFyIHRyYWNlX29iaiA9IHt9O1xyXG5cdFx0XHR0cmFjZV9vYmouX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0dHJhY2Vfb2JqLmluc3RhbmNlID0gaW5zX29iai5faWQ7XHJcblx0XHRcdHRyYWNlX29iai5pc19maW5pc2hlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly8g5b2T5YmN5pyA5paw54mIZmxvd+S4reW8gOWni+iKgueCueeahHN0ZXBfaWRcclxuXHRcdFx0dmFyIHN0ZXBfaWQsIHN0ZXBfbmFtZSwgY2FuX2VkaXRfbWFpbl9hdHRhY2gsIGNhbl9lZGl0X25vcm1hbF9hdHRhY2g7XHJcblx0XHRcdGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwKSB7XHJcblx0XHRcdFx0aWYgKHN0ZXAuc3RlcF90eXBlID09IFwic3RhcnRcIikge1xyXG5cdFx0XHRcdFx0c3RlcF9pZCA9IHN0ZXAuX2lkO1xyXG5cdFx0XHRcdFx0c3RlcF9uYW1lID0gc3RlcC5uYW1lO1xyXG5cdFx0XHRcdFx0Y2FuX2VkaXRfbWFpbl9hdHRhY2ggPSBzdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoO1xyXG5cdFx0XHRcdFx0Y2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9IHN0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdHRyYWNlX29iai5zdGVwID0gc3RlcF9pZDtcclxuXHRcdFx0dHJhY2Vfb2JqLnN0YXJ0X2RhdGUgPSBub3c7XHJcblx0XHRcdHRyYWNlX29iai5uYW1lID0gc3RlcF9uYW1lO1xyXG5cclxuXHRcdFx0Ly8g5paw5bu6QXBwcm92ZVxyXG5cdFx0XHR2YXIgYXBwcl9vYmogPSB7fTtcclxuXHRcdFx0YXBwcl9vYmouX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0YXBwcl9vYmouaW5zdGFuY2UgPSBpbnNfb2JqLl9pZDtcclxuXHRcdFx0YXBwcl9vYmoudHJhY2UgPSB0cmFjZV9vYmouX2lkO1xyXG5cdFx0XHRhcHByX29iai5pc19maW5pc2hlZCA9IGZhbHNlO1xyXG5cdFx0XHRhcHByX29iai51c2VyID0gdXNlcl9pZDtcclxuXHRcdFx0YXBwcl9vYmoudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWU7XHJcblx0XHRcdGFwcHJfb2JqLmhhbmRsZXIgPSBoYW5kbGVyX2lkO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZTtcclxuXHRcdFx0YXBwcl9vYmouaGFuZGxlcl9vcmdhbml6YXRpb24gPSBoYW5kbGVyX3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gaGFuZGxlcl9vcmdfaW5mby5uYW1lO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGhhbmRsZXJfb3JnX2luZm8uZnVsbG5hbWU7XHJcblx0XHRcdGFwcHJfb2JqLnR5cGUgPSBcImRyYWZ0XCI7XHJcblx0XHRcdGFwcHJfb2JqLnN0YXJ0X2RhdGUgPSBub3c7XHJcblx0XHRcdGFwcHJfb2JqLnJlYWRfZGF0ZSA9IG5vdztcclxuXHRcdFx0YXBwcl9vYmouaXNfcmVhZCA9IGZhbHNlO1xyXG5cdFx0XHRhcHByX29iai5pc19lcnJvciA9IGZhbHNlO1xyXG5cclxuXHRcdFx0YXBwcl9vYmoudmFsdWVzID0gbmV3X3ZhbHVlcztcclxuXHJcblx0XHRcdGlmIChhZ2VudCkge1xyXG5cdFx0XHRcdGFwcHJfb2JqLmFnZW50ID0gYWdlbnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRyYWNlX29iai5hcHByb3ZlcyA9IFthcHByX29ial07XHJcblx0XHRcdGluc19vYmoudHJhY2VzID0gW3RyYWNlX29ial07XHJcblxyXG5cdFx0XHRpZiAoZmxvdy5hdXRvX3JlbWluZCA9PSB0cnVlKVxyXG5cdFx0XHRcdGluc19vYmouYXV0b19yZW1pbmQgPSB0cnVlO1xyXG5cclxuXHRcdFx0aW5zX29iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHN0YXJ0X3N0ZXAubmFtZTtcclxuXHJcblx0XHRcdGluc19vYmouZmxvd19uYW1lID0gZmxvdy5uYW1lO1xyXG5cdFx0XHRpZiAoY2F0ZWdvcnlfbmFtZSkge1xyXG5cdFx0XHRcdGluc19vYmouY2F0ZWdvcnlfbmFtZSA9IGNhdGVnb3J5Lm5hbWU7XHJcblx0XHRcdFx0aW5zX29iai5jYXRlZ29yeSA9IGNhdGVnb3J5Ll9pZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bmV3X2luc19pZCA9IGRiLmluc3RhbmNlcy5pbnNlcnQoaW5zX29iaik7XHJcblxyXG5cdFx0XHQvLyDlpI3liLbpmYTku7ZcclxuXHRcdFx0dmFyIGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzO1xyXG5cclxuXHRcdFx0Ly/lsIbljp/ooajljZXlhoXlrrnlrZjlgqjkuLrnrKzkuIDkuKrpmYTku7ZcclxuXHRcdFx0aWYgKGhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCkge1xyXG5cdFx0XHRcdC8vIHRyeSB7XHJcblxyXG5cdFx0XHRcdGluc3RhbmNlSHRtbCA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwodXNlcl9pbmZvLCBzcGFjZV9pZCwgaW5zLCB7XHJcblx0XHRcdFx0XHRhYnNvbHV0ZTogdHJ1ZVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0dmFyIGluc3RhbmNlRmlsZSA9IG5ldyBGUy5GaWxlKCk7XHJcblx0XHRcdFx0aW5zdGFuY2VGaWxlLmF0dGFjaERhdGEoQnVmZmVyLmZyb20oaW5zdGFuY2VIdG1sLCBcInV0Zi04XCIpLCB7XHJcblx0XHRcdFx0XHR0eXBlOiBcInRleHQvaHRtbFwiXHJcblx0XHRcdFx0fSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcihlcnJvci5lcnJvciwgZXJyb3IucmVhc29uKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpbnN0YW5jZUZpbGUubmFtZShpbnMubmFtZSArIFwiLmh0bWxcIik7XHJcblx0XHRcdFx0XHRpbnN0YW5jZUZpbGUuc2l6ZShpbnN0YW5jZUh0bWwubGVuZ3RoKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgbWV0YWRhdGEgPSB7XHJcblx0XHRcdFx0XHRcdG93bmVyOiB1c2VyX2lkLFxyXG5cdFx0XHRcdFx0XHRvd25lcl9uYW1lOiB1c2VyX2luZm8ubmFtZSxcclxuXHRcdFx0XHRcdFx0c3BhY2U6IHNwYWNlX2lkLFxyXG5cdFx0XHRcdFx0XHRpbnN0YW5jZTogbmV3X2luc19pZCxcclxuXHRcdFx0XHRcdFx0YXBwcm92ZTogYXBwcl9vYmouX2lkLFxyXG5cdFx0XHRcdFx0XHRjdXJyZW50OiB0cnVlXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0aW5zdGFuY2VGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcblx0XHRcdFx0XHR2YXIgZmlsZU9iaiA9IGNvbGxlY3Rpb24uaW5zZXJ0KGluc3RhbmNlRmlsZSk7XHJcblx0XHRcdFx0XHRmaWxlT2JqLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdCRzZXQ6IHtcclxuXHRcdFx0XHRcdFx0XHQnbWV0YWRhdGEucGFyZW50JzogZmlsZU9iai5faWRcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHQvLyB9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0Ly8gICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0XHRcdFx0Ly8gfVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoaXNGb3J3YXJkQXR0YWNobWVudHMgJiYgYWN0aW9uX3R5cGUgPT0gJ2ZvcndhcmQnKSB7XHJcblx0XHRcdFx0dmFyIGZpbGVzID0gY29sbGVjdGlvbi5maW5kKHtcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlX2lkLFxyXG5cdFx0XHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0ZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdFx0Ly8g5Yik5pat5paw55qE5rWB56iL5byA5aeL6IqC54K55piv5ZCm5pyJ57yW6L6R5q2j5paH5ZKM57yW6L6R6ZmE5Lu25p2D6ZmQXHJcblx0XHRcdFx0XHRpZiAoZi5tZXRhZGF0YS5tYWluID09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGNhbl9lZGl0X21haW5fYXR0YWNoICE9IHRydWUgJiYgY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCAhPSB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlmIChjYW5fZWRpdF9ub3JtYWxfYXR0YWNoICE9IHRydWUpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciBuZXdGaWxlID0gbmV3IEZTLkZpbGUoKTtcclxuXHRcdFx0XHRcdG5ld0ZpbGUuYXR0YWNoRGF0YShmLmNyZWF0ZVJlYWRTdHJlYW0oJ2luc3RhbmNlcycpLCB7XHJcblx0XHRcdFx0XHRcdHR5cGU6IGYub3JpZ2luYWwudHlwZVxyXG5cdFx0XHRcdFx0fSwgZnVuY3Rpb24gKGVycikge1xyXG5cdFx0XHRcdFx0XHRpZiAoZXJyKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcihlcnIuZXJyb3IsIGVyci5yZWFzb24pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdG5ld0ZpbGUubmFtZShmLm5hbWUoKSk7XHJcblx0XHRcdFx0XHRcdG5ld0ZpbGUuc2l6ZShmLnNpemUoKSk7XHJcblx0XHRcdFx0XHRcdHZhciBtZXRhZGF0YSA9IHtcclxuXHRcdFx0XHRcdFx0XHRvd25lcjogdXNlcl9pZCxcclxuXHRcdFx0XHRcdFx0XHRvd25lcl9uYW1lOiB1c2VyX2luZm8ubmFtZSxcclxuXHRcdFx0XHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0XHRcdFx0aW5zdGFuY2U6IG5ld19pbnNfaWQsXHJcblx0XHRcdFx0XHRcdFx0YXBwcm92ZTogYXBwcl9vYmouX2lkLFxyXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnQ6IHRydWVcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0aWYgKGYubWV0YWRhdGEubWFpbiA9PSB0cnVlICYmIGNhbl9lZGl0X21haW5fYXR0YWNoID09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5tYWluID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRuZXdGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcblx0XHRcdFx0XHRcdHZhciBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XHJcblx0XHRcdFx0XHRcdGZpbGVPYmoudXBkYXRlKHtcclxuXHRcdFx0XHRcdFx0XHQkc2V0OiB7XHJcblx0XHRcdFx0XHRcdFx0XHQnbWV0YWRhdGEucGFyZW50JzogZmlsZU9iai5faWRcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyDnu5nlvZPliY3nmoTnlLPor7fljZXlop7liqDovazlj5HorrDlvZVcclxuXHRcdFx0dmFyIGFwcHIgPSB7XHJcblx0XHRcdFx0J19pZCc6IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHIsXHJcblx0XHRcdFx0J2luc3RhbmNlJzogaW5zdGFuY2VfaWQsXHJcblx0XHRcdFx0J3RyYWNlJzogY3VycmVudF90cmFjZV9pZCxcclxuXHRcdFx0XHQnaXNfZmluaXNoZWQnOiB0cnVlLFxyXG5cdFx0XHRcdCd1c2VyJzogdXNlcl9pZCxcclxuXHRcdFx0XHQndXNlcl9uYW1lJzogdXNlcl9pbmZvLm5hbWUsXHJcblx0XHRcdFx0J2hhbmRsZXInOiB1c2VyX2lkLFxyXG5cdFx0XHRcdCdoYW5kbGVyX25hbWUnOiB1c2VyX2luZm8ubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb24nOiBzcGFjZV91c2VyLm9yZ2FuaXphdGlvbixcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSc6IHNwYWNlX3VzZXJfb3JnX2luZm8ubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUnOiBzcGFjZV91c2VyX29yZ19pbmZvLmZ1bGxuYW1lLFxyXG5cdFx0XHRcdCd0eXBlJzogYWN0aW9uX3R5cGUsXHJcblx0XHRcdFx0J3N0YXJ0X2RhdGUnOiBuZXcgRGF0ZSgpLFxyXG5cdFx0XHRcdCdmaW5pc2hfZGF0ZSc6IG5ldyBEYXRlKCksXHJcblx0XHRcdFx0J2lzX3JlYWQnOiBmYWxzZSxcclxuXHRcdFx0XHQnanVkZ2UnOiAnc3VibWl0dGVkJyxcclxuXHRcdFx0XHQnZnJvbV91c2VyJzogY3VycmVudF91c2VyX2lkLFxyXG5cdFx0XHRcdCdmcm9tX3VzZXJfbmFtZSc6IGZyb21fdXNlcl9uYW1lLFxyXG5cdFx0XHRcdCdmb3J3YXJkX3NwYWNlJzogc3BhY2VfaWQsXHJcblx0XHRcdFx0J2ZvcndhcmRfaW5zdGFuY2UnOiBuZXdfaW5zX2lkLFxyXG5cdFx0XHRcdCdkZXNjcmlwdGlvbic6IGRlc2NyaXB0aW9uLFxyXG5cdFx0XHRcdCdmcm9tX2FwcHJvdmVfaWQnOiBmcm9tX2FwcHJvdmVfaWRcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGZvcndhcmRfYXBwcm92ZXMucHVzaChhcHByKTtcclxuXHJcblx0XHRcdG5ld19pbnNfaWRzLnB1c2gobmV3X2luc19pZCk7XHJcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcclxuXHRcdH0pXHJcblxyXG5cdFx0c2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyX2lkO1xyXG5cdFx0dmFyIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnN0YW5jZV9pZCxcclxuXHRcdFx0XCJ0cmFjZXMuX2lkXCI6IGN1cnJlbnRfdHJhY2VfaWRcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0X29iaixcclxuXHRcdFx0JGFkZFRvU2V0OiB7XHJcblx0XHRcdFx0J3RyYWNlcy4kLmFwcHJvdmVzJzoge1xyXG5cdFx0XHRcdFx0JGVhY2g6IGZvcndhcmRfYXBwcm92ZXNcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmIChyKSB7XHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYSwgaWR4KSB7XHJcblx0XHRcdFx0aWYgKGEuX2lkID09IGZyb21fYXBwcm92ZV9pZCkge1xyXG5cdFx0XHRcdFx0dmFyIHVwZGF0ZV9yZWFkID0ge307XHJcblx0XHRcdFx0XHR1cGRhdGVfcmVhZFtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcclxuXHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlX2lkLFxyXG5cdFx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogY3VycmVudF90cmFjZV9pZFxyXG5cdFx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0XHQkc2V0OiB1cGRhdGVfcmVhZFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YTogeyBuZXdfaW5zX2lkczogbmV3X2luc19pZHMgfVxyXG5cdFx0fSlcclxuXHR9IGNhdGNoIChlKSB7XHJcblx0XHRjb25zb2xlLmVycm9yKGUuc3RhY2spXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdGVycm9yczogW2VdXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fVxyXG5cclxufSkiLCJKc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvaW5zdGFuY2UvOmluc3RhbmNlSWQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEsIHJlcylcclxuXHRcdGN1cnJlbnRfdXNlcl9pZCA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cdFx0cmVxX2FzeW5jID0gXy5oYXMocmVxLnF1ZXJ5LCAnYXN5bmMnKTtcclxuXHRcdGluc0lkID0gcmVxLnBhcmFtcy5pbnN0YW5jZUlkXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHsgZmllbGRzOiB7IHNwYWNlOiAxLCBmbG93OiAxLCBzdGF0ZTogMSwgaW5ib3hfdXNlcnM6IDEsIGNjX3VzZXJzOiAxLCBvdXRib3hfdXNlcnM6IDEsIHN1Ym1pdHRlcjogMSwgYXBwbGljYW50OiAxIH0gfSlcclxuXHJcblx0XHRpZiBub3QgaW5zXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlSWQgaXMgd3Jvbmcgb3IgaW5zdGFuY2Ugbm90IGV4aXN0cy4nKVxyXG5cclxuXHRcdHNwYWNlSWQgPSBpbnMuc3BhY2VcclxuXHRcdGZsb3dJZCA9IGlucy5mbG93XHJcblxyXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZUlkLCB1c2VyOiBjdXJyZW50X3VzZXJfaWQgfSkuY291bnQoKSBpcyAwXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ3VzZXIgaXMgbm90IGJlbG9uZyB0byB0aGlzIHNwYWNlLicpXHJcblxyXG5cdFx0Ym94ID0gJydcclxuXHJcblx0XHRpZiAoaW5zLmluYm94X3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWQpIG9yIChpbnMuY2NfdXNlcnM/LmluY2x1ZGVzIGN1cnJlbnRfdXNlcl9pZClcclxuXHRcdFx0Ym94ID0gJ2luYm94J1xyXG5cdFx0ZWxzZSBpZiBpbnMub3V0Ym94X3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWRcclxuXHRcdFx0Ym94ID0gJ291dGJveCdcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdkcmFmdCcgYW5kIGlucy5zdWJtaXR0ZXIgaXMgY3VycmVudF91c2VyX2lkXHJcblx0XHRcdGJveCA9ICdkcmFmdCdcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdwZW5kaW5nJyBhbmQgKGlucy5zdWJtaXR0ZXIgaXMgY3VycmVudF91c2VyX2lkIG9yIGlucy5hcHBsaWNhbnQgaXMgY3VycmVudF91c2VyX2lkKVxyXG5cdFx0XHRib3ggPSAncGVuZGluZydcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdjb21wbGV0ZWQnIGFuZCBpbnMuc3VibWl0dGVyIGlzIGN1cnJlbnRfdXNlcl9pZFxyXG5cdFx0XHRib3ggPSAnY29tcGxldGVkJ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoZmxvd0lkLCBjdXJyZW50X3VzZXJfaWQpXHJcblx0XHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoc3BhY2VJZCwgeyBmaWVsZHM6IHsgYWRtaW5zOiAxIH0gfSlcclxuXHRcdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSlcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsIFwibm8gcGVybWlzc2lvbi5cIilcclxuXHRcdFx0Ym94ID0gJ21vbml0b3InXHJcblxyXG5cdFx0cmVkaXJlY3RUbyA9IFwid29ya2Zsb3cvc3BhY2UvI3tzcGFjZUlkfS8je2JveH0vI3tpbnNJZH1cIlxyXG5cdFx0cmVkaXJlY3RUb1VybCA9IE1ldGVvci5hYnNvbHV0ZVVybChyZWRpcmVjdFRvKVxyXG5cdFx0aWYgcmVxX2FzeW5jICMgfHwgcmVxLmdldChcIlgtUmVxdWVzdGVkLVdpdGhcIikgPT09ICdYTUxIdHRwUmVxdWVzdCdcclxuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcclxuXHRcdFx0XHRcInN0YXR1c1wiOiAzMDIsXHJcblx0XHRcdFx0XCJyZWRpcmVjdFwiOiByZWRpcmVjdFRvXHJcblx0XHRcdH0pO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXMuc2V0SGVhZGVyIFwiTG9jYXRpb25cIiwgcmVkaXJlY3RUb1VybFxyXG5cdFx0XHRyZXMud3JpdGVIZWFkIDMwMlxyXG5cdFx0XHRyZXMuZW5kKClcclxuXHRcdFx0cmV0dXJuXHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9XHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9pbnN0YW5jZS86aW5zdGFuY2VJZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBib3gsIGN1cnJlbnRfdXNlcl9pZCwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3dJZCwgaW5zLCBpbnNJZCwgcGVybWlzc2lvbnMsIHJlZGlyZWN0VG8sIHJlZGlyZWN0VG9VcmwsIHJlZiwgcmVmMSwgcmVmMiwgcmVxX2FzeW5jLCBzcGFjZSwgc3BhY2VJZDtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEsIHJlcyk7XG4gICAgY3VycmVudF91c2VyX2lkID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIHJlcV9hc3luYyA9IF8uaGFzKHJlcS5xdWVyeSwgJ2FzeW5jJyk7XG4gICAgaW5zSWQgPSByZXEucGFyYW1zLmluc3RhbmNlSWQ7XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgZmxvdzogMSxcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGluYm94X3VzZXJzOiAxLFxuICAgICAgICBjY191c2VyczogMSxcbiAgICAgICAgb3V0Ym94X3VzZXJzOiAxLFxuICAgICAgICBzdWJtaXR0ZXI6IDEsXG4gICAgICAgIGFwcGxpY2FudDogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghaW5zKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdpbnN0YW5jZUlkIGlzIHdyb25nIG9yIGluc3RhbmNlIG5vdCBleGlzdHMuJyk7XG4gICAgfVxuICAgIHNwYWNlSWQgPSBpbnMuc3BhY2U7XG4gICAgZmxvd0lkID0gaW5zLmZsb3c7XG4gICAgaWYgKGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICB1c2VyOiBjdXJyZW50X3VzZXJfaWRcbiAgICB9KS5jb3VudCgpID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICd1c2VyIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZS4nKTtcbiAgICB9XG4gICAgYm94ID0gJyc7XG4gICAgaWYgKCgocmVmID0gaW5zLmluYm94X3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKGN1cnJlbnRfdXNlcl9pZCkgOiB2b2lkIDApIHx8ICgocmVmMSA9IGlucy5jY191c2VycykgIT0gbnVsbCA/IHJlZjEuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSA6IHZvaWQgMCkpIHtcbiAgICAgIGJveCA9ICdpbmJveCc7XG4gICAgfSBlbHNlIGlmICgocmVmMiA9IGlucy5vdXRib3hfdXNlcnMpICE9IG51bGwgPyByZWYyLmluY2x1ZGVzKGN1cnJlbnRfdXNlcl9pZCkgOiB2b2lkIDApIHtcbiAgICAgIGJveCA9ICdvdXRib3gnO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnZHJhZnQnICYmIGlucy5zdWJtaXR0ZXIgPT09IGN1cnJlbnRfdXNlcl9pZCkge1xuICAgICAgYm94ID0gJ2RyYWZ0JztcbiAgICB9IGVsc2UgaWYgKGlucy5zdGF0ZSA9PT0gJ3BlbmRpbmcnICYmIChpbnMuc3VibWl0dGVyID09PSBjdXJyZW50X3VzZXJfaWQgfHwgaW5zLmFwcGxpY2FudCA9PT0gY3VycmVudF91c2VyX2lkKSkge1xuICAgICAgYm94ID0gJ3BlbmRpbmcnO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnY29tcGxldGVkJyAmJiBpbnMuc3VibWl0dGVyID09PSBjdXJyZW50X3VzZXJfaWQpIHtcbiAgICAgIGJveCA9ICdjb21wbGV0ZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhmbG93SWQsIGN1cnJlbnRfdXNlcl9pZCk7XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlSWQsIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgYWRtaW5zOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgJiYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcIm5vIHBlcm1pc3Npb24uXCIpO1xuICAgICAgfVxuICAgICAgYm94ID0gJ21vbml0b3InO1xuICAgIH1cbiAgICByZWRpcmVjdFRvID0gXCJ3b3JrZmxvdy9zcGFjZS9cIiArIHNwYWNlSWQgKyBcIi9cIiArIGJveCArIFwiL1wiICsgaW5zSWQ7XG4gICAgcmVkaXJlY3RUb1VybCA9IE1ldGVvci5hYnNvbHV0ZVVybChyZWRpcmVjdFRvKTtcbiAgICBpZiAocmVxX2FzeW5jKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoe1xuICAgICAgICBcInN0YXR1c1wiOiAzMDIsXG4gICAgICAgIFwicmVkaXJlY3RcIjogcmVkaXJlY3RUb1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJMb2NhdGlvblwiLCByZWRpcmVjdFRvVXJsKTtcbiAgICAgIHJlcy53cml0ZUhlYWQoMzAyKTtcbiAgICAgIHJlcy5lbmQoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcclxuQGFwaSB7Z2V0fSAvYXBpL3dvcmtmbG93L29wZW4vcGVuZGluZyDojrflj5blvoXlip7mlofku7ZcclxuXHJcbkBhcGlEZXNjcmlwdGlvbiDojrflj5blvZPliY3nlKjmiLfnmoTlvoXlip7kuovpobnliJfooahcclxuXHJcbkBhcGlOYW1lIGdldEluYm94XHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxuXHR7XHJcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXHJcblx0fVxyXG5cclxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxyXG5cdHtcclxuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG5cdFx0XCJkYXRhXCI6IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwiaWRcIjogXCJnN3dva1hOa1I5eXhIdkE0RFwiLFxyXG5cdFx0XHRcdFwic3RhcnRfZGF0ZVwiOiBcIjIwMTctMTEtMjNUMDI6Mjg6NTMuMTY0WlwiLFxyXG5cdFx0XHRcdFwiZmxvd19uYW1lXCI6IFwi5q2j5paH5rWB56iLXCIsXHJcblx0XHRcdFx0XCJzcGFjZV9uYW1lXCI6IFwi5a6h5om5546LXCIsXHJcblx0XHRcdFx0XCJuYW1lXCI6IFwi5q2j5paH5rWB56iLIDFcIixcclxuXHRcdFx0XHRcImFwcGxpY2FudF9uYW1lXCI6IG51bGwsXHJcblx0XHRcdFx0XCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIjogXCLlrqHmibnnjotcIixcclxuXHRcdFx0XHRcInN1Ym1pdF9kYXRlXCI6IFwiMjAxNy0wNy0yNVQwNjozNjo0OC40OTJaXCIsXHJcblx0XHRcdFx0XCJzdGVwX25hbWVcIjogXCLlvIDlp4tcIixcclxuXHRcdFx0XHRcInNwYWNlX2lkXCI6IFwia2ZEc012N2dCZXdtR1hHRUxcIixcclxuXHRcdFx0XHRcIm1vZGlmaWVkXCI6IFwiMjAxNy0xMS0yM1QwMjoyODo1My4xNjRaXCIsXHJcblx0XHRcdFx0XCJpc19yZWFkXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcImlkXCI6IFwiV3FLU3JXUW95d2dKYU1wOWtcIixcclxuXHRcdFx0XHRcInN0YXJ0X2RhdGVcIjogXCIyMDE3LTA4LTE3VDA3OjM4OjM1LjQyMFpcIixcclxuXHRcdFx0XHRcImZsb3dfbmFtZVwiOiBcIuato+aWh1xcblwiLFxyXG5cdFx0XHRcdFwic3BhY2VfbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxyXG5cdFx0XHRcdFwibmFtZVwiOiBcIuato+aWh1xcbiAxXCIsXHJcblx0XHRcdFx0XCJhcHBsaWNhbnRfbmFtZVwiOiBcIuaut+S6rui+iVwiLFxyXG5cdFx0XHRcdFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCI6IFwi5a6h5om5546LXCIsXHJcblx0XHRcdFx0XCJzdWJtaXRfZGF0ZVwiOiBcIjIwMTctMDYtMjdUMTA6MjY6MTkuNDY4WlwiLFxyXG5cdFx0XHRcdFwic3RlcF9uYW1lXCI6IFwi5byA5aeLXCIsXHJcblx0XHRcdFx0XCJzcGFjZV9pZFwiOiBcImtmRHNNdjdnQmV3bUdYR0VMXCIsXHJcblx0XHRcdFx0XCJtb2RpZmllZFwiOiBcIjIwMTctMDgtMTdUMDc6Mzg6MzUuNDIxWlwiLFxyXG5cdFx0XHRcdFwiaXNfcmVhZFwiOiB0cnVlLFxyXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XHJcblx0XHRcdH1cclxuXHRcdF1cclxuXHR9XHJcbiMjI1xyXG5Kc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9wZW5kaW5nJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXSB8fCByZXEucXVlcnk/LnNwYWNlSWRcclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBzcGFjZV9pZCcpXHJcblxyXG5cdFx0dXNlcl9pZCA9IHJlcS51c2VySWRcclxuXHJcblx0XHRpZiAhdXNlcl9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdOb3QgbG9nZ2VkIGluJylcclxuXHJcblx0XHRpZiBkYi51c2Vycy5maW5kKHsgX2lkOiB1c2VyX2lkIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0bGltaXQgPSByZXEucXVlcnk/LmxpbWl0IHx8IDUwMFxyXG5cclxuXHRcdGxpbWl0ID0gcGFyc2VJbnQobGltaXQpXHJcblxyXG5cdFx0dXNlcm5hbWUgPSByZXEucXVlcnk/LnVzZXJuYW1lXHJcblxyXG5cdFx0dXNlcmlkID0gcmVxLnF1ZXJ5Py51c2VyaWRcclxuXHJcblx0XHRhdHRhY2ggPSByZXEucXVlcnk/LmF0dGFjaFxyXG5cclxuXHRcdHdvcmtmbG93X2NhdGVnb3JpZXMgPSByZXEucXVlcnk/LndvcmtmbG93X2NhdGVnb3JpZXNcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblxyXG5cdFx0IyDlpoLmnpzlvZPliY3nlKjmiLfmmK/lt6XkvZzljLrnrqHnkIblkZjvvIzliJnpgJrov4fmn6XnnIt1cmzkuIrmmK/lkKbmnIl1c2VybmFtZVxcdXNlcmlkIO+8jFxyXG5cdFx0IyDlpoLmnpzmnInvvIzliJnov5Tlm551c2VybmFtZVxcdXNlcmlk5a+55bqU55qE55So5oi377yM5ZCm5YiZ6L+U5Zue5b2T5YmN55So5oi35b6F5Yqe44CCXHJcblx0XHQjIHVzZXJuYW1lXFx1c2VyaWTpg73lrZjlnKjml7bvvIx1c2VyaWTkvJjlhYhcclxuXHRcdHNwZWNpYWxfdXNlcl9pZFxyXG5cdFx0aWYgc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJfaWQpXHJcblx0XHRcdGlmIHVzZXJpZFxyXG5cdFx0XHRcdGlmIGRiLnVzZXJzLmZpbmQoeyBfaWQ6IHVzZXJpZCB9KS5jb3VudCgpIDwgMVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcImNhbiBub3QgZmluZCB1c2VyIGJ5IHVzZXJpZDogI3t1c2VyaWR9XCIpXHJcblxyXG5cdFx0XHRcdHNwZWNpYWxfdXNlcl9pZCA9IHVzZXJpZFxyXG5cdFx0XHRlbHNlIGlmIHVzZXJuYW1lXHJcblx0XHRcdFx0dSA9IGRiLnVzZXJzLmZpbmRPbmUoeyB1c2VybmFtZTogdXNlcm5hbWUgfSwgeyBmaWVsZHM6IHsgX2lkOiAxIH0gfSlcclxuXHRcdFx0XHRpZiBfLmlzRW1wdHkodSlcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VybmFtZTogI3t1c2VybmFtZX1cIilcclxuXHJcblx0XHRcdFx0c3BlY2lhbF91c2VyX2lkID0gdS5faWRcclxuXHJcblx0XHRyZXN1bHRfaW5zdGFuY2VzID0gbmV3IEFycmF5XHJcblxyXG5cdFx0aXNfcmVhZCA9IGZhbHNlXHJcblx0XHRzdGFydF9kYXRlID0gJydcclxuXHRcdHVpZCA9IHVzZXJfaWRcclxuXHRcdHF1ZXJ5ID0ge1xyXG5cdFx0XHQkb3I6IFt7IGluYm94X3VzZXJzOiB1c2VyX2lkIH0sIHsgY2NfdXNlcnM6IHVzZXJfaWQgfV1cclxuXHRcdH1cclxuXHJcblx0XHRpZiBzcGVjaWFsX3VzZXJfaWRcclxuXHRcdFx0dWlkID0gc3BlY2lhbF91c2VyX2lkXHJcblx0XHRcdHF1ZXJ5ID0ge1xyXG5cdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcclxuXHRcdFx0XHQkb3I6IFt7IGluYm94X3VzZXJzOiBzcGVjaWFsX3VzZXJfaWQgfSwgeyBjY191c2Vyczogc3BlY2lhbF91c2VyX2lkIH1dXHJcblx0XHRcdH1cclxuXHJcblx0XHRpZiB3b3JrZmxvd19jYXRlZ29yaWVzXHJcblx0XHRcdHF1ZXJ5LmNhdGVnb3J5ID0geyAkaW46IHdvcmtmbG93X2NhdGVnb3JpZXMuc3BsaXQoJywnKSB9XHJcblxyXG5cdFx0c3BhY2VfbmFtZXMgPSB7fVxyXG5cdFx0c3BhY2VfbmFtZXNbc3BhY2UuX2lkXSA9IHNwYWNlLm5hbWVcclxuXHJcblx0XHRpZiBsaW1pdCA+IDBcclxuXHRcdFx0ZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHsgc29ydDogeyBtb2RpZmllZDogLTEgfSwgbGltaXQ6IGxpbWl0IH0pLmZvckVhY2ggKGkpIC0+XHJcblxyXG5cdFx0XHRcdGlmIGkuaW5ib3hfdXNlcnM/LmluY2x1ZGVzKHVpZClcclxuXHRcdFx0XHRcdF8uZWFjaCBpLnRyYWNlcywgKHQpIC0+XHJcblx0XHRcdFx0XHRcdGlmIHQuaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdFx0XHRcdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGEpIC0+XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBhLnVzZXIgaXMgdWlkIGFuZCBhLnR5cGUgaXNudCAnY2MnIGFuZCBub3QgYS5pc19maW5pc2hlZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpc19yZWFkID0gYS5pc19yZWFkXHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXJ0X2RhdGUgPSBhLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRfLmVhY2ggaS50cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRcdFx0XHRpZiBub3Qgc3RhcnRfZGF0ZSBhbmQgdC5hcHByb3Zlc1xyXG5cdFx0XHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYSkgLT5cclxuXHRcdFx0XHRcdFx0XHRcdGlmIG5vdCBzdGFydF9kYXRlIGFuZCBhLnVzZXIgaXMgdWlkIGFuZCBhLnR5cGUgaXMgJ2NjJyBhbmQgbm90IGEuaXNfZmluaXNoZWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0aXNfcmVhZCA9IGEuaXNfcmVhZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydF9kYXRlID0gYS5zdGFydF9kYXRlXHJcblxyXG5cdFx0XHRcdGlmIG5vdCBzcGFjZV9uYW1lc1tpLnNwYWNlXVxyXG5cdFx0XHRcdFx0c3BhY2VfbmFtZXNbaS5zcGFjZV0gPSBkYi5zcGFjZXMuZmluZE9uZShpLnNwYWNlLCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSk/Lm5hbWVcclxuXHJcblx0XHRcdFx0aCA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRoW1wiaWRcIl0gPSBpW1wiX2lkXCJdXHJcblx0XHRcdFx0aFtcInN0YXJ0X2RhdGVcIl0gPSBzdGFydF9kYXRlXHJcblx0XHRcdFx0aFtcImZsb3dfbmFtZVwiXSA9IGkuZmxvd19uYW1lXHJcblx0XHRcdFx0aFtcInNwYWNlX25hbWVcIl0gPSBzcGFjZV9uYW1lc1tpLnNwYWNlXVxyXG5cdFx0XHRcdGhbXCJuYW1lXCJdID0gaVtcIm5hbWVcIl1cclxuXHRcdFx0XHRoW1wiYXBwbGljYW50X25hbWVcIl0gPSBpW1wiYXBwbGljYW50X25hbWVcIl1cclxuXHRcdFx0XHRoW1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cdFx0XHRcdGhbXCJzdWJtaXRfZGF0ZVwiXSA9IGlbXCJzdWJtaXRfZGF0ZVwiXVxyXG5cdFx0XHRcdGhbXCJzdGVwX25hbWVcIl0gPSBpLmN1cnJlbnRfc3RlcF9uYW1lXHJcblx0XHRcdFx0aFtcInNwYWNlX2lkXCJdID0gaS5zcGFjZVxyXG5cdFx0XHRcdGhbXCJtb2RpZmllZFwiXSA9IGlbXCJtb2RpZmllZFwiXVxyXG5cdFx0XHRcdGhbXCJpc19yZWFkXCJdID0gaXNfcmVhZFxyXG5cdFx0XHRcdGhbXCJ2YWx1ZXNcIl0gPSBpW1widmFsdWVzXCJdXHJcblxyXG5cdFx0XHRcdGlmIGF0dGFjaCBpcyAndHJ1ZSdcclxuXHRcdFx0XHRcdGguYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoeyAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpLl9pZCwgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyAkbmU6IHRydWUgfSB9LCB7IGZpZWxkczogeyBjb3BpZXM6IDAgfSB9KS5mZXRjaCgpXHJcblxyXG5cdFx0XHRcdHJlc3VsdF9pbnN0YW5jZXMucHVzaChoKVxyXG5cclxuXHRcdG5vX2xpbWl0X2NvdW50ID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnkpLmNvdW50KClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3VsdF9pbnN0YW5jZXMsIGNvdW50OiBub19saW1pdF9jb3VudCB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLnJlYXNvbiB9XSB9XHJcblx0XHR9XHJcblxyXG4iLCJcbi8qXG5AYXBpIHtnZXR9IC9hcGkvd29ya2Zsb3cvb3Blbi9wZW5kaW5nIOiOt+WPluW+heWKnuaWh+S7tlxuXG5AYXBpRGVzY3JpcHRpb24g6I635Y+W5b2T5YmN55So5oi355qE5b6F5Yqe5LqL6aG55YiX6KGoXG5cbkBhcGlOYW1lIGdldEluYm94XG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxuXHR7XG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxuXHR9XG5cbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcblx0e1xuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuXHRcdFwiZGF0YVwiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiaWRcIjogXCJnN3dva1hOa1I5eXhIdkE0RFwiLFxuXHRcdFx0XHRcInN0YXJ0X2RhdGVcIjogXCIyMDE3LTExLTIzVDAyOjI4OjUzLjE2NFpcIixcblx0XHRcdFx0XCJmbG93X25hbWVcIjogXCLmraPmlofmtYHnqItcIixcblx0XHRcdFx0XCJzcGFjZV9uYW1lXCI6IFwi5a6h5om5546LXCIsXG5cdFx0XHRcdFwibmFtZVwiOiBcIuato+aWh+a1geeoiyAxXCIsXG5cdFx0XHRcdFwiYXBwbGljYW50X25hbWVcIjogbnVsbCxcblx0XHRcdFx0XCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIjogXCLlrqHmibnnjotcIixcblx0XHRcdFx0XCJzdWJtaXRfZGF0ZVwiOiBcIjIwMTctMDctMjVUMDY6MzY6NDguNDkyWlwiLFxuXHRcdFx0XHRcInN0ZXBfbmFtZVwiOiBcIuW8gOWni1wiLFxuXHRcdFx0XHRcInNwYWNlX2lkXCI6IFwia2ZEc012N2dCZXdtR1hHRUxcIixcblx0XHRcdFx0XCJtb2RpZmllZFwiOiBcIjIwMTctMTEtMjNUMDI6Mjg6NTMuMTY0WlwiLFxuXHRcdFx0XHRcImlzX3JlYWRcIjogZmFsc2UsXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImlkXCI6IFwiV3FLU3JXUW95d2dKYU1wOWtcIixcblx0XHRcdFx0XCJzdGFydF9kYXRlXCI6IFwiMjAxNy0wOC0xN1QwNzozODozNS40MjBaXCIsXG5cdFx0XHRcdFwiZmxvd19uYW1lXCI6IFwi5q2j5paHXFxuXCIsXG5cdFx0XHRcdFwic3BhY2VfbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxuXHRcdFx0XHRcIm5hbWVcIjogXCLmraPmlodcXG4gMVwiLFxuXHRcdFx0XHRcImFwcGxpY2FudF9uYW1lXCI6IFwi5q635Lqu6L6JXCIsXG5cdFx0XHRcdFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCI6IFwi5a6h5om5546LXCIsXG5cdFx0XHRcdFwic3VibWl0X2RhdGVcIjogXCIyMDE3LTA2LTI3VDEwOjI2OjE5LjQ2OFpcIixcblx0XHRcdFx0XCJzdGVwX25hbWVcIjogXCLlvIDlp4tcIixcblx0XHRcdFx0XCJzcGFjZV9pZFwiOiBcImtmRHNNdjdnQmV3bUdYR0VMXCIsXG5cdFx0XHRcdFwibW9kaWZpZWRcIjogXCIyMDE3LTA4LTE3VDA3OjM4OjM1LjQyMVpcIixcblx0XHRcdFx0XCJpc19yZWFkXCI6IHRydWUsXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XG5cdFx0XHR9XG5cdFx0XVxuXHR9XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3BlbmRpbmcnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYXR0YWNoLCBlLCBpc19yZWFkLCBsaW1pdCwgbm9fbGltaXRfY291bnQsIHF1ZXJ5LCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlc3VsdF9pbnN0YW5jZXMsIHNwYWNlLCBzcGFjZV9pZCwgc3BhY2VfbmFtZXMsIHNwZWNpYWxfdXNlcl9pZCwgc3RhcnRfZGF0ZSwgdSwgdWlkLCB1c2VyX2lkLCB1c2VyaWQsIHVzZXJuYW1lLCB3b3JrZmxvd19jYXRlZ29yaWVzO1xuICB0cnkge1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ10gfHwgKChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuc3BhY2VJZCA6IHZvaWQgMCk7XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBzcGFjZV9pZCcpO1xuICAgIH1cbiAgICB1c2VyX2lkID0gcmVxLnVzZXJJZDtcbiAgICBpZiAoIXVzZXJfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ05vdCBsb2dnZWQgaW4nKTtcbiAgICB9XG4gICAgaWYgKGRiLnVzZXJzLmZpbmQoe1xuICAgICAgX2lkOiB1c2VyX2lkXG4gICAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKTtcbiAgICB9XG4gICAgbGltaXQgPSAoKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmxpbWl0IDogdm9pZCAwKSB8fCA1MDA7XG4gICAgbGltaXQgPSBwYXJzZUludChsaW1pdCk7XG4gICAgdXNlcm5hbWUgPSAocmVmMiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjIudXNlcm5hbWUgOiB2b2lkIDA7XG4gICAgdXNlcmlkID0gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLnVzZXJpZCA6IHZvaWQgMDtcbiAgICBhdHRhY2ggPSAocmVmNCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjQuYXR0YWNoIDogdm9pZCAwO1xuICAgIHdvcmtmbG93X2NhdGVnb3JpZXMgPSAocmVmNSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjUud29ya2Zsb3dfY2F0ZWdvcmllcyA6IHZvaWQgMDtcbiAgICBzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHNwZWNpYWxfdXNlcl9pZDtcbiAgICBpZiAoc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJfaWQpKSB7XG4gICAgICBpZiAodXNlcmlkKSB7XG4gICAgICAgIGlmIChkYi51c2Vycy5maW5kKHtcbiAgICAgICAgICBfaWQ6IHVzZXJpZFxuICAgICAgICB9KS5jb3VudCgpIDwgMSkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VyaWQ6IFwiICsgdXNlcmlkKTtcbiAgICAgICAgfVxuICAgICAgICBzcGVjaWFsX3VzZXJfaWQgPSB1c2VyaWQ7XG4gICAgICB9IGVsc2UgaWYgKHVzZXJuYW1lKSB7XG4gICAgICAgIHUgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgX2lkOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF8uaXNFbXB0eSh1KSkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VybmFtZTogXCIgKyB1c2VybmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3BlY2lhbF91c2VyX2lkID0gdS5faWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdF9pbnN0YW5jZXMgPSBuZXcgQXJyYXk7XG4gICAgaXNfcmVhZCA9IGZhbHNlO1xuICAgIHN0YXJ0X2RhdGUgPSAnJztcbiAgICB1aWQgPSB1c2VyX2lkO1xuICAgIHF1ZXJ5ID0ge1xuICAgICAgJG9yOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbmJveF91c2VyczogdXNlcl9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgY2NfdXNlcnM6IHVzZXJfaWRcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gICAgaWYgKHNwZWNpYWxfdXNlcl9pZCkge1xuICAgICAgdWlkID0gc3BlY2lhbF91c2VyX2lkO1xuICAgICAgcXVlcnkgPSB7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgJG9yOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5ib3hfdXNlcnM6IHNwZWNpYWxfdXNlcl9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGNjX3VzZXJzOiBzcGVjaWFsX3VzZXJfaWRcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh3b3JrZmxvd19jYXRlZ29yaWVzKSB7XG4gICAgICBxdWVyeS5jYXRlZ29yeSA9IHtcbiAgICAgICAgJGluOiB3b3JrZmxvd19jYXRlZ29yaWVzLnNwbGl0KCcsJylcbiAgICAgIH07XG4gICAgfVxuICAgIHNwYWNlX25hbWVzID0ge307XG4gICAgc3BhY2VfbmFtZXNbc3BhY2UuX2lkXSA9IHNwYWNlLm5hbWU7XG4gICAgaWYgKGxpbWl0ID4gMCkge1xuICAgICAgZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcbiAgICAgICAgc29ydDoge1xuICAgICAgICAgIG1vZGlmaWVkOiAtMVxuICAgICAgICB9LFxuICAgICAgICBsaW1pdDogbGltaXRcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICB2YXIgaCwgcmVmNiwgcmVmNztcbiAgICAgICAgaWYgKChyZWY2ID0gaS5pbmJveF91c2VycykgIT0gbnVsbCA/IHJlZjYuaW5jbHVkZXModWlkKSA6IHZvaWQgMCkge1xuICAgICAgICAgIF8uZWFjaChpLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHQuaXNfZmluaXNoZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIGlmIChhLnVzZXIgPT09IHVpZCAmJiBhLnR5cGUgIT09ICdjYycgJiYgIWEuaXNfZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlzX3JlYWQgPSBhLmlzX3JlYWQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRfZGF0ZSA9IGEuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF8uZWFjaChpLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKCFzdGFydF9kYXRlICYmIHQuYXBwcm92ZXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGFydF9kYXRlICYmIGEudXNlciA9PT0gdWlkICYmIGEudHlwZSA9PT0gJ2NjJyAmJiAhYS5pc19maW5pc2hlZCkge1xuICAgICAgICAgICAgICAgICAgaXNfcmVhZCA9IGEuaXNfcmVhZDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdGFydF9kYXRlID0gYS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzcGFjZV9uYW1lc1tpLnNwYWNlXSkge1xuICAgICAgICAgIHNwYWNlX25hbWVzW2kuc3BhY2VdID0gKHJlZjcgPSBkYi5zcGFjZXMuZmluZE9uZShpLnNwYWNlLCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSAhPSBudWxsID8gcmVmNy5uYW1lIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGggPSBuZXcgT2JqZWN0O1xuICAgICAgICBoW1wiaWRcIl0gPSBpW1wiX2lkXCJdO1xuICAgICAgICBoW1wic3RhcnRfZGF0ZVwiXSA9IHN0YXJ0X2RhdGU7XG4gICAgICAgIGhbXCJmbG93X25hbWVcIl0gPSBpLmZsb3dfbmFtZTtcbiAgICAgICAgaFtcInNwYWNlX25hbWVcIl0gPSBzcGFjZV9uYW1lc1tpLnNwYWNlXTtcbiAgICAgICAgaFtcIm5hbWVcIl0gPSBpW1wibmFtZVwiXTtcbiAgICAgICAgaFtcImFwcGxpY2FudF9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9uYW1lXCJdO1xuICAgICAgICBoW1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICAgICAgaFtcInN1Ym1pdF9kYXRlXCJdID0gaVtcInN1Ym1pdF9kYXRlXCJdO1xuICAgICAgICBoW1wic3RlcF9uYW1lXCJdID0gaS5jdXJyZW50X3N0ZXBfbmFtZTtcbiAgICAgICAgaFtcInNwYWNlX2lkXCJdID0gaS5zcGFjZTtcbiAgICAgICAgaFtcIm1vZGlmaWVkXCJdID0gaVtcIm1vZGlmaWVkXCJdO1xuICAgICAgICBoW1wiaXNfcmVhZFwiXSA9IGlzX3JlYWQ7XG4gICAgICAgIGhbXCJ2YWx1ZXNcIl0gPSBpW1widmFsdWVzXCJdO1xuICAgICAgICBpZiAoYXR0YWNoID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBoLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IGkuX2lkLFxuICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgICAgICAgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcbiAgICAgICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIGNvcGllczogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmZldGNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdF9pbnN0YW5jZXMucHVzaChoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBub19saW1pdF9jb3VudCA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5KS5jb3VudCgpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdF9pbnN0YW5jZXMsXG4gICAgICAgIGNvdW50OiBub19saW1pdF9jb3VudFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5yZWFzb25cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJDb29raWVzID0gcmVxdWlyZShcImNvb2tpZXNcIilcclxuXHJcbk1ldGVvci5zdGFydHVwIC0+XHJcblx0V2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UgXCIvYXBpL3dvcmtmbG93L2V4cG9ydC90YWxiZV90ZW1wbGF0ZVwiLCAocmVxLCByZXMsIG5leHQpLT5cclxuXHRcdGNvb2tpZXMgPSBuZXcgQ29va2llcyggcmVxLCByZXMgKTtcclxuXHRcdCMgZmlyc3QgY2hlY2sgcmVxdWVzdCBib2R5XHJcblx0XHRpZiByZXEuYm9keVxyXG5cdFx0XHR1c2VySWQgPSByZXEuYm9keVtcIlgtVXNlci1JZFwiXVxyXG5cdFx0XHRhdXRoVG9rZW4gPSByZXEuYm9keVtcIlgtQXV0aC1Ub2tlblwiXVxyXG5cclxuXHRcdCMgdGhlbiBjaGVjayBjb29raWVcclxuXHRcdGlmICF1c2VySWQgb3IgIWF1dGhUb2tlblxyXG5cdFx0XHR1c2VySWQgPSBjb29raWVzLmdldChcIlgtVXNlci1JZFwiKVxyXG5cdFx0XHRhdXRoVG9rZW4gPSBjb29raWVzLmdldChcIlgtQXV0aC1Ub2tlblwiKVxyXG5cclxuXHRcdGlmICEodXNlcklkIGFuZCBhdXRoVG9rZW4pXHJcblx0XHRcdHJlcy53cml0ZUhlYWQoNDAxKTtcclxuXHRcdFx0cmVzLmVuZCBKU09OLnN0cmluZ2lmeSh7XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLUF1dGgtVG9rZW5cIixcclxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdFx0fSlcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRmbG93SWQgPSByZXEucXVlcnk/LmZsb3c7XHJcblxyXG5cdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogZmxvd0lkfSwge2ZpZWxkczoge3NwYWNlOiAxLCBmb3JtOiAxLCBuYW1lOiAxfX0pXHJcblxyXG5cdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe19pZDogZmxvdy5mb3JtfSwge2ZpZWxkczoge3NwYWNlOiAxLCBcImN1cnJlbnQuX2lkXCI6IDF9fSlcclxuXHJcblx0XHRpZiBfLmlzRW1wdHkoZmxvdylcclxuXHRcdFx0cmVzLndyaXRlSGVhZCg0MDEpO1xyXG5cdFx0XHRyZXMuZW5kIEpTT04uc3RyaW5naWZ5KHtcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBJbnZhbGlkIGZvcm1JZFwiLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0XHR9KVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpZiAhU3RlZWRvcy5pc1NwYWNlQWRtaW4oZmxvdy5zcGFjZSwgdXNlcklkKVxyXG5cdFx0XHRcdHJlcy53cml0ZUhlYWQoNDAxKTtcclxuXHRcdFx0XHRyZXMuZW5kIEpTT04uc3RyaW5naWZ5KHtcclxuXHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb25cIixcclxuXHRcdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShmbG93LnNwYWNlLCB7IGZpZWxkczogeyBpc19wYWlkOiAxIH0gfSlcclxuXHRcdFx0aWYgIXNwYWNlPy5pc19wYWlkXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdGNvZGU6IDQwNCxcclxuXHRcdFx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vbi1wYWlkIHNwYWNlLlwiLFxyXG5cdFx0XHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0ZGF0YSA9IFRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlKHtmb3JtOiBmbG93LmZvcm0sIGZvcm1fdmVyc2lvbjogZm9ybT8uY3VycmVudD8uX2lkfSwgdHJ1ZSk7XHJcblxyXG5cdFx0ZmlsZU5hbWUgPSBmbG93Lm5hbWVcclxuXHJcblx0XHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XHJcblx0XHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgJ2F0dGFjaG1lbnQ7ZmlsZW5hbWU9JytlbmNvZGVVUkkoZmlsZU5hbWUpKycuaHRtbCcpO1xyXG5cdFx0cmVzLmVuZChkYXRhKSIsInZhciBDb29raWVzO1xuXG5Db29raWVzID0gcmVxdWlyZShcImNvb2tpZXNcIik7XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gV2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UoXCIvYXBpL3dvcmtmbG93L2V4cG9ydC90YWxiZV90ZW1wbGF0ZVwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIHZhciBhdXRoVG9rZW4sIGNvb2tpZXMsIGRhdGEsIGZpbGVOYW1lLCBmbG93LCBmbG93SWQsIGZvcm0sIHJlZiwgcmVmMSwgc3BhY2UsIHVzZXJJZDtcbiAgICBjb29raWVzID0gbmV3IENvb2tpZXMocmVxLCByZXMpO1xuICAgIGlmIChyZXEuYm9keSkge1xuICAgICAgdXNlcklkID0gcmVxLmJvZHlbXCJYLVVzZXItSWRcIl07XG4gICAgICBhdXRoVG9rZW4gPSByZXEuYm9keVtcIlgtQXV0aC1Ub2tlblwiXTtcbiAgICB9XG4gICAgaWYgKCF1c2VySWQgfHwgIWF1dGhUb2tlbikge1xuICAgICAgdXNlcklkID0gY29va2llcy5nZXQoXCJYLVVzZXItSWRcIik7XG4gICAgICBhdXRoVG9rZW4gPSBjb29raWVzLmdldChcIlgtQXV0aC1Ub2tlblwiKTtcbiAgICB9XG4gICAgaWYgKCEodXNlcklkICYmIGF1dGhUb2tlbikpIHtcbiAgICAgIHJlcy53cml0ZUhlYWQoNDAxKTtcbiAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIFgtQXV0aC1Ub2tlblwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmxvd0lkID0gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5mbG93IDogdm9pZCAwO1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogZmxvd0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHNwYWNlOiAxLFxuICAgICAgICBmb3JtOiAxLFxuICAgICAgICBuYW1lOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmbG93LmZvcm1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgIFwiY3VycmVudC5faWRcIjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChfLmlzRW1wdHkoZmxvdykpIHtcbiAgICAgIHJlcy53cml0ZUhlYWQoNDAxKTtcbiAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBJbnZhbGlkIGZvcm1JZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFTdGVlZG9zLmlzU3BhY2VBZG1pbihmbG93LnNwYWNlLCB1c2VySWQpKSB7XG4gICAgICAgIHJlcy53cml0ZUhlYWQoNDAxKTtcbiAgICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm8gcGVybWlzc2lvblwiLFxuICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoZmxvdy5zcGFjZSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBpc19wYWlkOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCEoc3BhY2UgIT0gbnVsbCA/IHNwYWNlLmlzX3BhaWQgOiB2b2lkIDApKSB7XG4gICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiA0MDQsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm9uLXBhaWQgc3BhY2UuXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGRhdGEgPSBUZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZSh7XG4gICAgICBmb3JtOiBmbG93LmZvcm0sXG4gICAgICBmb3JtX3ZlcnNpb246IGZvcm0gIT0gbnVsbCA/IChyZWYxID0gZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmMS5faWQgOiB2b2lkIDAgOiB2b2lkIDBcbiAgICB9LCB0cnVlKTtcbiAgICBmaWxlTmFtZSA9IGZsb3cubmFtZTtcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScgKyBlbmNvZGVVUkkoZmlsZU5hbWUpICsgJy5odG1sJyk7XG4gICAgcmV0dXJuIHJlcy5lbmQoZGF0YSk7XG4gIH0pO1xufSk7XG4iLCIjIyNcclxuQGFwaSB7cG9zdH0gL2FwaS93b3JrZmxvdy9vcGVuL2RyYWZ0cyDmlrDlu7rnlLPor7fljZVcclxuXHJcbkBhcGlOYW1lIGNyZWF0ZUluc3RhbmNlXHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxyXG5cclxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxyXG5cclxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxyXG5cclxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxyXG57XHJcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxyXG59XHJcblxyXG5AYXBpUGFyYW1FeGFtcGxlIHtqc29ufSBSZXF1ZXN0IFBheWxvYWQ6XHJcbntcclxuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcclxuICAgIFwiYXBwbGljYW50XCI6IOeUs+ivt+S6uklkLFxyXG4gICAgXCJ2YWx1ZXNcIjoge1xyXG4gICAgICAgIFwiZmllbGRzMVwiIDog5a2X5q615YC8LFxyXG4gICAgICAgIFwiZmllbGRzMlwiIDog5a2X5q615YC8LFxyXG4gICAgICAgIC4uLlxyXG4gICAgfVxyXG59XHJcblxyXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XHJcbntcclxuICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG4gICAgXCJkYXRhXCI6IHtpbnN0YW5jZX1cclxufVxyXG5cclxuQGFwaUVycm9yRXhhbXBsZSB7anNvbn0gZXJyb3ItUmVzcG9uc2U6XHJcbntcclxuICAgIFwic3RhdHVzXCI6IFwiZXJyb3JcIixcclxuICAgIFwiZGF0YVwiOiB7Li4ufVxyXG59XHJcbiMjI1xyXG5Kc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vZHJhZnRzJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHVzZXJfaWQgPSByZXEudXNlcklkXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiB1c2VyX2lkIH0pXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIHhfc3BhY2VfaWQnKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyX2luZm8uX2lkKVxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHJcblx0XHRpZiBub3QgaGFzaERhdGFbXCJmbG93XCJdXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbnVsbCcpXHJcblxyXG5cdFx0Zmxvd19pZCAgICAgID0gaGFzaERhdGFbXCJmbG93XCJdXHJcblx0XHRhcHBsaWNhbnRfaWQgPSBoYXNoRGF0YVtcImFwcGxpY2FudFwiXVxyXG5cdFx0YXBwbGljYW50X3VzZXJuYW1lID0gaGFzaERhdGFbXCJhcHBsaWNhbnRfdXNlcm5hbWVcIl1cclxuXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudCA9IG5ldyBPYmplY3RcclxuXHJcblx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7IF9pZDogZmxvd19pZCB9LCB7IGZpZWxkczogeyBzcGFjZTogMSwgJ2N1cnJlbnQuX2lkJzogMSB9IH0pXHJcblx0XHRpZiBub3QgZmxvd1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG5vdCBleGlzdHMnKVxyXG5cclxuXHRcdGlmIHNwYWNlX2lkIGlzbnQgZmxvdy5zcGFjZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpXHJcblxyXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogY3VycmVudF91c2VyX2luZm8uX2lkIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhdXRoX3Rva2VuIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIHNwYWNlJylcclxuXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcInNwYWNlXCJdID0gc3BhY2VfaWRcclxuXHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiZmxvd1wiXSA9IGZsb3dfaWRcclxuXHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiZmxvd192ZXJzaW9uXCJdID0gZmxvdy5jdXJyZW50Ll9pZFxyXG5cclxuXHRcdGFwcGxpY2FudCA9IG51bGxcclxuXHRcdGlmIGFwcGxpY2FudF9pZCBvciBhcHBsaWNhbnRfdXNlcm5hbWVcclxuXHJcblx0XHRcdGlmIGFwcGxpY2FudF9pZFxyXG5cdFx0XHRcdGFwcGxpY2FudCA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IGFwcGxpY2FudF9pZCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRpZiBub3QgYXBwbGljYW50XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgd3JvbmcnKVxyXG5cclxuXHRcdFx0ZWxzZSBpZiBhcHBsaWNhbnRfdXNlcm5hbWVcclxuXHRcdFx0XHRhcHBsaWNhbnQgPSBkYi51c2Vycy5maW5kT25lKHsgdXNlcm5hbWU6IGFwcGxpY2FudF91c2VybmFtZSB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRpZiBub3QgYXBwbGljYW50XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnRfdXNlcm5hbWUgaXMgd3JvbmcnKVxyXG5cclxuXHRcdFx0c3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcGxpY2FudC5faWQgfSlcclxuXHRcdFx0aWYgbm90IHNwYWNlX3VzZXJcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgc3BhY2UnKVxyXG5cclxuXHRcdFx0aWYgc3BhY2VfdXNlci51c2VyX2FjY2VwdGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2FwcGxpY2FudCBpcyBkaXNhYmxlZCBpbiB0aGlzIHNwYWNlJylcclxuXHJcblx0XHRcdHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcclxuXHRcdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRcIl0gPSBhcHBsaWNhbnQuX2lkXHJcblx0XHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X25hbWVcIl0gPSBhcHBsaWNhbnQubmFtZVxyXG5cdFx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25cIl0gPSAgc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxyXG5cdFx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWVcIl0gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblx0XHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXHJcblxyXG5cdFx0YXBwbGljYW50SW5mbyA9IGFwcGxpY2FudCB8fCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cclxuXHRcdHRyYWNlcyA9IFtdXHJcblx0XHR0cmFjZSA9IG5ldyBPYmplY3RcclxuXHRcdGFwcHJvdmVzID0gW11cclxuXHRcdGFwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRhcHByb3ZlW1widmFsdWVzXCJdID0gaGFzaERhdGFbXCJ2YWx1ZXNcIl1cclxuXHRcdGFwcHJvdmVzLnB1c2goYXBwcm92ZSlcclxuXHRcdHRyYWNlW1wiYXBwcm92ZXNcIl0gPSBhcHByb3Zlc1xyXG5cdFx0dHJhY2VzLnB1c2godHJhY2UpXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRyYWNlc1wiXSA9IHRyYWNlc1xyXG5cclxuXHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiaW5ib3hfdXNlcnNcIl0gPSBbYXBwbGljYW50SW5mby5faWRdXHJcblxyXG5cdFx0bmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBhcHBsaWNhbnRJbmZvKVxyXG5cclxuXHRcdG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShuZXdfaW5zX2lkKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogbmV3X2lucyB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxyXG5cdFx0fVxyXG4iLCJcbi8qXG5AYXBpIHtwb3N0fSAvYXBpL3dvcmtmbG93L29wZW4vZHJhZnRzIOaWsOW7uueUs+ivt+WNlVxuXG5AYXBpTmFtZSBjcmVhdGVJbnN0YW5jZVxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy6566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG57XG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcbn1cblxuQGFwaVBhcmFtRXhhbXBsZSB7anNvbn0gUmVxdWVzdCBQYXlsb2FkOlxue1xuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcbiAgICBcImFwcGxpY2FudFwiOiDnlLPor7fkurpJZCxcbiAgICBcInZhbHVlc1wiOiB7XG4gICAgICAgIFwiZmllbGRzMVwiIDog5a2X5q615YC8LFxuICAgICAgICBcImZpZWxkczJcIiA6IOWtl+auteWAvCxcbiAgICAgICAgLi4uXG4gICAgfVxufVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG57XG4gICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG4gICAgXCJkYXRhXCI6IHtpbnN0YW5jZX1cbn1cblxuQGFwaUVycm9yRXhhbXBsZSB7anNvbn0gZXJyb3ItUmVzcG9uc2U6XG57XG4gICAgXCJzdGF0dXNcIjogXCJlcnJvclwiLFxuICAgIFwiZGF0YVwiOiB7Li4ufVxufVxuICovXG5Kc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vZHJhZnRzJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGFwcGxpY2FudCwgYXBwbGljYW50SW5mbywgYXBwbGljYW50X2lkLCBhcHBsaWNhbnRfdXNlcm5hbWUsIGFwcHJvdmUsIGFwcHJvdmVzLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgZmxvdywgZmxvd19pZCwgaGFzaERhdGEsIGluc3RhbmNlX2Zyb21fY2xpZW50LCBuZXdfaW5zLCBuZXdfaW5zX2lkLCBzcGFjZV9pZCwgc3BhY2VfdXNlciwgc3BhY2VfdXNlcl9vcmdfaW5mbywgdHJhY2UsIHRyYWNlcywgdXNlcl9pZDtcbiAgdHJ5IHtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdXNlcl9pZCA9IHJlcS51c2VySWQ7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgIF9pZDogdXNlcl9pZFxuICAgIH0pO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciB4X3NwYWNlX2lkJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXJfaW5mby5faWQpO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgaWYgKCFoYXNoRGF0YVtcImZsb3dcIl0pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBmbG93X2lkID0gaGFzaERhdGFbXCJmbG93XCJdO1xuICAgIGFwcGxpY2FudF9pZCA9IGhhc2hEYXRhW1wiYXBwbGljYW50XCJdO1xuICAgIGFwcGxpY2FudF91c2VybmFtZSA9IGhhc2hEYXRhW1wiYXBwbGljYW50X3VzZXJuYW1lXCJdO1xuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50ID0gbmV3IE9iamVjdDtcbiAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZsb3dfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICdjdXJyZW50Ll9pZCc6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWZsb3cpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbm90IGV4aXN0cycpO1xuICAgIH1cbiAgICBpZiAoc3BhY2VfaWQgIT09IGZsb3cuc3BhY2UpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbm90IGJlbG9uZyB0byB0aGlzIHNwYWNlJyk7XG4gICAgfVxuICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIHVzZXI6IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxuICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2F1dGhfdG9rZW4gaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgc3BhY2UnKTtcbiAgICB9XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJzcGFjZVwiXSA9IHNwYWNlX2lkO1xuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiZmxvd1wiXSA9IGZsb3dfaWQ7XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJmbG93X3ZlcnNpb25cIl0gPSBmbG93LmN1cnJlbnQuX2lkO1xuICAgIGFwcGxpY2FudCA9IG51bGw7XG4gICAgaWYgKGFwcGxpY2FudF9pZCB8fCBhcHBsaWNhbnRfdXNlcm5hbWUpIHtcbiAgICAgIGlmIChhcHBsaWNhbnRfaWQpIHtcbiAgICAgICAgYXBwbGljYW50ID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgX2lkOiBhcHBsaWNhbnRfaWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghYXBwbGljYW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIHdyb25nJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYW50X3VzZXJuYW1lKSB7XG4gICAgICAgIGFwcGxpY2FudCA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIHVzZXJuYW1lOiBhcHBsaWNhbnRfdXNlcm5hbWVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghYXBwbGljYW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50X3VzZXJuYW1lIGlzIHdyb25nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHBsaWNhbnQuX2lkXG4gICAgICB9KTtcbiAgICAgIGlmICghc3BhY2VfdXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgc3BhY2UnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGFjZV91c2VyLnVzZXJfYWNjZXB0ZWQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIGRpc2FibGVkIGluIHRoaXMgc3BhY2UnKTtcbiAgICAgIH1cbiAgICAgIHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcik7XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudFwiXSA9IGFwcGxpY2FudC5faWQ7XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9uYW1lXCJdID0gYXBwbGljYW50Lm5hbWU7XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25cIl0gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdO1xuICAgICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXTtcbiAgICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgIH1cbiAgICBhcHBsaWNhbnRJbmZvID0gYXBwbGljYW50IHx8IGN1cnJlbnRfdXNlcl9pbmZvO1xuICAgIHRyYWNlcyA9IFtdO1xuICAgIHRyYWNlID0gbmV3IE9iamVjdDtcbiAgICBhcHByb3ZlcyA9IFtdO1xuICAgIGFwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgIGFwcHJvdmVbXCJ2YWx1ZXNcIl0gPSBoYXNoRGF0YVtcInZhbHVlc1wiXTtcbiAgICBhcHByb3Zlcy5wdXNoKGFwcHJvdmUpO1xuICAgIHRyYWNlW1wiYXBwcm92ZXNcIl0gPSBhcHByb3ZlcztcbiAgICB0cmFjZXMucHVzaCh0cmFjZSk7XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJ0cmFjZXNcIl0gPSB0cmFjZXM7XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJpbmJveF91c2Vyc1wiXSA9IFthcHBsaWNhbnRJbmZvLl9pZF07XG4gICAgbmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBhcHBsaWNhbnRJbmZvKTtcbiAgICBuZXdfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUobmV3X2luc19pZCk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogbmV3X2luc1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkIOafpeeci+eUs+ivt+WNleivpuaDhVxyXG5cclxuQGFwaU5hbWUgZ2V0SW5zdGFuY2VcclxuXHJcbkBhcGlHcm91cCBXb3JrZmxvd1xyXG5cclxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy655qE566h55CG5ZGYXHJcblxyXG5AYXBpUGFyYW0ge1N0cmluZ30gaW5zX2lkIOeUs+ivt+WNlUlkXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxue1xyXG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcclxufVxyXG5cclxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxyXG57XHJcbiAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XHJcbn1cclxuIyMjXHJcbkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0aW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKVxyXG5cdFx0aWYgbm90IGluc3RhbmNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBpbnN0YW5jZScpXHJcblxyXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBpbnN0YW5jZS5zcGFjZSwgdXNlcjogY3VycmVudF91c2VyIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhdXRoX3Rva2VuIGlzIHdyb25nJylcclxuXHJcblx0XHQjIOadg+mZkO+8muS7heS7peS4i+S6uuWRmOWPr+S7peafpeeci+eUs+ivt+WNleivpuaDhe+8muaPkOS6pOiAheOAgeeUs+ivt+iAheOAgee7j+aJi+iAheOAgeacrOa1geeoi+eahOeuoeeQhuWRmOOAgeacrOa1geeoi+eahOinguWvn+WRmOOAgeacrOW3peS9nOWMuueahOeuoeeQhuWRmOOAgeacrOW3peS9nOWMuueahOaJgOacieiAheOAglxyXG5cdFx0cGVybV91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0cGVybV91c2Vycy5wdXNoKGluc3RhbmNlLnN1Ym1pdHRlcilcclxuXHRcdHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpXHJcblx0XHRpZiBpbnN0YW5jZS5vdXRib3hfdXNlcnNcclxuXHRcdFx0cGVybV91c2VycyA9IHBlcm1fdXNlcnMuY29uY2F0KGluc3RhbmNlLm91dGJveF91c2VycylcclxuXHRcdGlmIGluc3RhbmNlLmluYm94X3VzZXJzXHJcblx0XHRcdHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5pbmJveF91c2VycylcclxuXHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlLnNwYWNlIH0sIHsgZmllbGRzOiB7IGFkbWluczogMSB9IH0pXHJcblx0XHRwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoc3BhY2UuYWRtaW5zKVxyXG5cclxuXHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiAobm90IHBlcm1fdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgYW5kIChub3QgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJtb25pdG9yXCIpKSBhbmQgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdubyBwZXJtaXNzaW9uJylcclxuXHJcblx0XHRpbnN0YW5jZS5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHskbmU6IHRydWV9fSwge2ZpZWxkczoge2NvcGllczogMH19KS5mZXRjaCgpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiBpbnN0YW5jZSB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxyXG5cdFx0fVxyXG5cclxuIiwiXG4vKlxuQGFwaSB7Z2V0fSAvYXBpL3dvcmtmbG93L29wZW4vZ2V0LzppbnNfaWQg5p+l55yL55Sz6K+35Y2V6K+m5oOFXG5cbkBhcGlOYW1lIGdldEluc3RhbmNlXG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnmoTnrqHnkIblkZhcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGluc19pZCDnlLPor7fljZVJZFxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcbntcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxufVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG57XG4gICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG4gICAgXCJkYXRhXCI6IHtpbnN0YW5jZX1cbn1cbiAqL1xuSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvYXBpL3dvcmtmbG93L29wZW4vZ2V0LzppbnNfaWQnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBlLCBpbnNfaWQsIGluc3RhbmNlLCBwZXJtX3VzZXJzLCBwZXJtaXNzaW9ucywgc3BhY2UsIHNwYWNlX2lkO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgaW5zdGFuY2UnKTtcbiAgICB9XG4gICAgaWYgKGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IGluc3RhbmNlLnNwYWNlLFxuICAgICAgdXNlcjogY3VycmVudF91c2VyXG4gICAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXV0aF90b2tlbiBpcyB3cm9uZycpO1xuICAgIH1cbiAgICBwZXJtX3VzZXJzID0gbmV3IEFycmF5O1xuICAgIHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5zdWJtaXR0ZXIpO1xuICAgIHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpO1xuICAgIGlmIChpbnN0YW5jZS5vdXRib3hfdXNlcnMpIHtcbiAgICAgIHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5vdXRib3hfdXNlcnMpO1xuICAgIH1cbiAgICBpZiAoaW5zdGFuY2UuaW5ib3hfdXNlcnMpIHtcbiAgICAgIHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5pbmJveF91c2Vycyk7XG4gICAgfVxuICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZS5zcGFjZVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBhZG1pbnM6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoc3BhY2UuYWRtaW5zKTtcbiAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpO1xuICAgIGlmICgoIXBlcm1fdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgJiYgKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcIm1vbml0b3JcIikpICYmICghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25vIHBlcm1pc3Npb24nKTtcbiAgICB9XG4gICAgaW5zdGFuY2UuYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLFxuICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcbiAgICAgICAgJG5lOiB0cnVlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGNvcGllczogMFxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogaW5zdGFuY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIiMjI1xyXG5AYXBpIHtwdXR9IC9hcGkvd29ya2Zsb3cvb3Blbi9zdWJtaXQvOmluc19pZCDmj5DkuqTnlLPor7fljZVcclxuXHJcbkBhcGlEZXNjcmlwdGlvbiDmmoLkuI3mlK/mjIHlvIDlp4voioLngrnkuIvkuIDoioLngrnkuLrmnaHku7bnmoTmg4XlhrVcclxuXHJcbkBhcGlOYW1lIHN1Ym1pdEluc3RhbmNlXHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxyXG5cclxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxyXG5cclxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxyXG5cclxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxyXG4gICAge1xyXG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxyXG5cdH1cclxuXHJcbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcclxuICAgIHtcclxuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG5cdFx0XCJkYXRhXCI6IHtpbnN0YW5jZX1cclxuXHR9XHJcbiMjI1xyXG5cclxuSnNvblJvdXRlcy5hZGQgJ3B1dCcsICcvYXBpL3dvcmtmbG93L29wZW4vc3VibWl0LzppbnNfaWQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVybiA7XHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJylcclxuXHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZClcclxuXHJcblx0XHQjIOagoemqjOeUs+ivt+WNleeKtuaAgeS4uuiNieeov1xyXG5cdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlRHJhZnQoaW5zdGFuY2UpXHJcblxyXG5cdFx0aWYgc3BhY2VfaWQgaXNudCBpbnN0YW5jZVtcInNwYWNlXCJdXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpXHJcblxyXG5cdFx0IyDmoKHpqoznlLPor7fljZXlv4XloavlrZfmrrXmmK/lkKbmnInlgLxcclxuXHRcdHZhbHVlcyA9IGluc3RhbmNlW1widHJhY2VzXCJdWzBdW1wiYXBwcm92ZXNcIl1bMF0udmFsdWVzXHJcblxyXG5cdFx0Zm9ybSA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybShpbnN0YW5jZS5mb3JtKVxyXG5cclxuXHRcdHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUodmFsdWVzLCBmb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pXHJcblxyXG5cdFx0aWYgcmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmxlbmd0aCA+IDBcclxuXHRcdFx0aWYgcmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmxlbmd0aCA+IDFcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZHMgPCcgKyByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMuam9pbihcIixcIikgKyAnPiBhcmUgcmVxdWlyZWQnKVxyXG5cdFx0XHRlbHNlIGlmIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPSAxXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmllbGQgPCcgKyByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMuam9pbihcIixcIikgKyAnPiBpcyByZXF1aXJlZCcpXHJcblxyXG5cdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxyXG5cclxuXHRcdHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGluc3RhbmNlW1widHJhY2VzXCJdWzBdLnN0ZXApXHJcblxyXG5cdFx0IyDorqHnrpfkuIvkuIDmraXpqqTpgInpoblcclxuXHRcdG5leHRTdGVwcyA9IHV1Zmxvd01hbmFnZXIuZ2V0TmV4dFN0ZXBzKGluc3RhbmNlLCBmbG93LCBzdGVwLCBcInN1Ym1pdHRlZFwiKVxyXG5cclxuXHRcdGlmIG5leHRTdGVwcy5sZW5ndGggPCAxXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBuZXh0IHN0ZXBzJylcclxuXHJcblx0XHRpZiBuZXh0U3RlcHMubGVuZ3RoID4gMVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgbm90IHVuaXEnKVxyXG5cclxuXHRcdG5leHRfc3RlcF9pZCA9IG5leHRTdGVwc1swXVxyXG5cclxuXHRcdCMg6K6h566X5LiL5LiA5q2l5aSE55CG5Lq66YCJ6aG5XHJcblx0XHRuZXh0X3VzZXJfaWRzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzKGluc19pZCwgbmV4dF9zdGVwX2lkKSB8fCBbXVxyXG5cclxuXHRcdGlmIG5leHRfdXNlcl9pZHMubGVuZ3RoID4gMVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgaGFuZGxlciBub3QgdW5pcScpXHJcblxyXG5cdFx0aW5zdGFuY2VbXCJ0cmFjZXNcIl1bMF1bXCJhcHByb3Zlc1wiXVswXVtcIm5leHRfc3RlcHNcIl0gPSBbeydzdGVwJzogbmV4dF9zdGVwX2lkLCAndXNlcnMnOiBuZXh0X3VzZXJfaWRzfV1cclxuXHJcblx0XHRyZXN1bHQgPSBuZXcgT2JqZWN0XHJcblxyXG5cdFx0c3VibWl0dGVyID0gZGIudXNlcnMuZmluZE9uZShpbnN0YW5jZS5zdWJtaXR0ZXIpXHJcblxyXG5cdFx0aWYgbm90IHN1Ym1pdHRlclxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgc3VibWl0dGVyJylcclxuXHJcblx0XHRyID0gdXVmbG93TWFuYWdlci5zdWJtaXRfaW5zdGFuY2UoaW5zdGFuY2UsIHN1Ym1pdHRlcilcclxuXHJcblx0XHRpZiByLmFsZXJ0c1xyXG5cdFx0XHRyZXN1bHQgPSByXHJcblx0XHRlbHNlXHJcblx0XHRcdHJlc3VsdCA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZClcclxuXHRcdFx0aWYgcmVzdWx0XHJcblx0XHRcdFx0cmVzdWx0LmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWQsJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyRuZTogdHJ1ZX19LCB7ZmllbGRzOiB7Y29waWVzOiAwfX0pLmZldGNoKClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXN1bHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiXG4vKlxuQGFwaSB7cHV0fSAvYXBpL3dvcmtmbG93L29wZW4vc3VibWl0LzppbnNfaWQg5o+Q5Lqk55Sz6K+35Y2VXG5cbkBhcGlEZXNjcmlwdGlvbiDmmoLkuI3mlK/mjIHlvIDlp4voioLngrnkuIvkuIDoioLngrnkuLrmnaHku7bnmoTmg4XlhrVcblxuQGFwaU5hbWUgc3VibWl0SW5zdGFuY2VcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxuICAgIHtcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG5cdH1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxuICAgIHtcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XHRcImRhdGFcIjoge2luc3RhbmNlfVxuXHR9XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3N1Ym1pdC86aW5zX2lkJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3csIGZvcm0sIGluc19pZCwgaW5zdGFuY2UsIG5leHRTdGVwcywgbmV4dF9zdGVwX2lkLCBuZXh0X3VzZXJfaWRzLCByLCByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMsIHJlc3VsdCwgc3BhY2VfaWQsIHN0ZXAsIHN1Ym1pdHRlciwgdmFsdWVzO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlKTtcbiAgICBpZiAoc3BhY2VfaWQgIT09IGluc3RhbmNlW1wic3BhY2VcIl0pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpO1xuICAgIH1cbiAgICB2YWx1ZXMgPSBpbnN0YW5jZVtcInRyYWNlc1wiXVswXVtcImFwcHJvdmVzXCJdWzBdLnZhbHVlcztcbiAgICBmb3JtID0gdXVmbG93TWFuYWdlci5nZXRGb3JtKGluc3RhbmNlLmZvcm0pO1xuICAgIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUodmFsdWVzLCBmb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pO1xuICAgIGlmIChyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2ZpZWxkcyA8JyArIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5qb2luKFwiLFwiKSArICc+IGFyZSByZXF1aXJlZCcpO1xuICAgICAgfSBlbHNlIGlmIChyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZCA8JyArIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5qb2luKFwiLFwiKSArICc+IGlzIHJlcXVpcmVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgaW5zdGFuY2VbXCJ0cmFjZXNcIl1bMF0uc3RlcCk7XG4gICAgbmV4dFN0ZXBzID0gdXVmbG93TWFuYWdlci5nZXROZXh0U3RlcHMoaW5zdGFuY2UsIGZsb3csIHN0ZXAsIFwic3VibWl0dGVkXCIpO1xuICAgIGlmIChuZXh0U3RlcHMubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIG5leHQgc3RlcHMnKTtcbiAgICB9XG4gICAgaWYgKG5leHRTdGVwcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgbm90IHVuaXEnKTtcbiAgICB9XG4gICAgbmV4dF9zdGVwX2lkID0gbmV4dFN0ZXBzWzBdO1xuICAgIG5leHRfdXNlcl9pZHMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMoaW5zX2lkLCBuZXh0X3N0ZXBfaWQpIHx8IFtdO1xuICAgIGlmIChuZXh0X3VzZXJfaWRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25leHQgc3RlcCBoYW5kbGVyIG5vdCB1bmlxJyk7XG4gICAgfVxuICAgIGluc3RhbmNlW1widHJhY2VzXCJdWzBdW1wiYXBwcm92ZXNcIl1bMF1bXCJuZXh0X3N0ZXBzXCJdID0gW1xuICAgICAge1xuICAgICAgICAnc3RlcCc6IG5leHRfc3RlcF9pZCxcbiAgICAgICAgJ3VzZXJzJzogbmV4dF91c2VyX2lkc1xuICAgICAgfVxuICAgIF07XG4gICAgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICBzdWJtaXR0ZXIgPSBkYi51c2Vycy5maW5kT25lKGluc3RhbmNlLnN1Ym1pdHRlcik7XG4gICAgaWYgKCFzdWJtaXR0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBzdWJtaXR0ZXInKTtcbiAgICB9XG4gICAgciA9IHV1Zmxvd01hbmFnZXIuc3VibWl0X2luc3RhbmNlKGluc3RhbmNlLCBzdWJtaXR0ZXIpO1xuICAgIGlmIChyLmFsZXJ0cykge1xuICAgICAgcmVzdWx0ID0gcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWQsXG4gICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIGNvcGllczogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcclxuQGFwaSB7cHV0fSAvYXBpL3dvcmtmbG93L29wZW4vc2F2ZS86aW5zX2lkIOaaguWtmOeUs+ivt+WNlVxyXG5cclxuQGFwaU5hbWUgc2F2ZUluc3RhbmNlc1xyXG5cclxuQGFwaUdyb3VwIFdvcmtmbG93XHJcblxyXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcclxuXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxuICAgIHtcclxuXHRcdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcclxuXHR9XHJcblxyXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XHJcbiAgICB7XHJcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuXHRcdFwiZGF0YVwiOiB7aW5zdGFuY2V9XHJcblx0fVxyXG4jIyNcclxuSnNvblJvdXRlcy5hZGQgJ3B1dCcsICcvYXBpL3dvcmtmbG93L29wZW4vc2F2ZS86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0aW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWRcclxuXHJcblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiBub3QgY3VycmVudF91c2VyX2luZm9cclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdHZhbHVlcyA9IHJlcS5ib2R5XHJcblxyXG5cdFx0aWYgbm90IHZhbHVlc1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHZhbHVlcycpXHJcblxyXG5cdFx0Y3VycmVudF90cmFjZSA9IG51bGxcclxuXHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpXHJcblx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblxyXG5cdFx0Xy5lYWNoIGluc3RhbmNlLnRyYWNlcywgKHQpLT5cclxuXHRcdFx0aWYgdC5pc19maW5pc2hlZCBpc250IHRydWVcclxuXHRcdFx0XHRjdXJyZW50X3RyYWNlID0gdFxyXG5cclxuXHRcdGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgY3VycmVudF90cmFjZS5zdGVwKVxyXG5cclxuXHRcdGlmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXMgXCJjb3VudGVyU2lnblwiXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+S8muetvuatpemqpOS4jeiDveS/ruaUueihqOWNleWAvCcpXHJcblxyXG5cdFx0Xy5lYWNoIGN1cnJlbnRfdHJhY2UuYXBwcm92ZXMsIChhKS0+XHJcblx0XHRcdGlmIGEuaXNfZmluaXNoZWQgaXNudCB0cnVlIGFuZCBhLnR5cGUgaXNudCBcImNjXCJcclxuXHRcdFx0XHRhLnZhbHVlcyA9IHZhbHVlc1xyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlXHJcblx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGN1cnJlbnRfdHJhY2UuYXBwcm92ZXNcclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlIHtcclxuXHRcdFx0X2lkOiBpbnNfaWRcclxuXHRcdFx0J3RyYWNlcy5faWQnOiBjdXJyZW50X3RyYWNlLl9pZFxyXG5cdFx0fSwgJHNldDogc2V0T2JqXHJcblxyXG5cdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3VsdH1cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJcbi8qXG5AYXBpIHtwdXR9IC9hcGkvd29ya2Zsb3cvb3Blbi9zYXZlLzppbnNfaWQg5pqC5a2Y55Sz6K+35Y2VXG5cbkBhcGlOYW1lIHNhdmVJbnN0YW5jZXNcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxuICAgIHtcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG5cdH1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxuICAgIHtcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XHRcImRhdGFcIjoge2luc3RhbmNlfVxuXHR9XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3NhdmUvOmluc19pZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3N0ZXAsIGN1cnJlbnRfdHJhY2UsIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3csIGluc19pZCwgaW5zdGFuY2UsIHJlc3VsdCwgc2V0T2JqLCBzcGFjZV9pZCwgdmFsdWVzO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIHZhbHVlcyA9IHJlcS5ib2R5O1xuICAgIGlmICghdmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHZhbHVlcycpO1xuICAgIH1cbiAgICBjdXJyZW50X3RyYWNlID0gbnVsbDtcbiAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgXy5lYWNoKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgaWYgKHQuaXNfZmluaXNoZWQgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfdHJhY2UgPSB0O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgY3VycmVudF90cmFjZS5zdGVwKTtcbiAgICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJjb3VudGVyU2lnblwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfkvJrnrb7mraXpqqTkuI3og73kv67mlLnooajljZXlgLwnKTtcbiAgICB9XG4gICAgXy5lYWNoKGN1cnJlbnRfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIGlmIChhLmlzX2ZpbmlzaGVkICE9PSB0cnVlICYmIGEudHlwZSAhPT0gXCJjY1wiKSB7XG4gICAgICAgIHJldHVybiBhLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZTtcbiAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGN1cnJlbnRfdHJhY2UuYXBwcm92ZXM7XG4gICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICBfaWQ6IGluc19pZCxcbiAgICAgICd0cmFjZXMuX2lkJzogY3VycmVudF90cmFjZS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiBzZXRPYmpcbiAgICB9KTtcbiAgICByZXN1bHQgPSBuZXcgT2JqZWN0O1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbkBhcGkge3Bvc3R9IC9hcGkvd29ya2Zsb3cvb3Blbi9nZXRieXN0ZXBuYW1lIOagueaNruatpemqpOWQjeensOiOt+WPlueUs+ivt+WNlVxyXG5cclxuQGFwaU5hbWUgZ2V0SW5zdGFuY2VCeVN0ZXBOYW1lXHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxyXG5cclxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxyXG5cclxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxyXG5cclxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxyXG57XHJcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxyXG59XHJcblxyXG5AYXBpUGFyYW1FeGFtcGxlIHtqc29ufSBSZXF1ZXN0IFBheWxvYWQ6XHJcbntcclxuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcclxuICAgIFwic3RlcG5hbWVcIjog5q2l6aqk5ZCN56ewXHJcbn1cclxuXHJcbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcclxue1xyXG5cdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG5cdFwiZGF0YVwiOiBbXHJcblx0XHR7XHJcblx0XHRcdGluc3RhbmNlXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpbnN0YW5jZVxyXG5cdFx0fVxyXG5cdF1cclxufVxyXG4jIyNcclxuSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldGJ5c3RlcG5hbWUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblxyXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJylcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRzdGVwbmFtZSA9IGhhc2hEYXRhW1wic3RlcG5hbWVcIl1cclxuXHRcdGZsb3cgPSBoYXNoRGF0YVtcImZsb3dcIl1cclxuXHJcblx0XHRpZiBub3Qgc3RlcG5hbWVcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBzdGVwbmFtZScpXHJcblxyXG5cdFx0aWYgbm90IGZsb3dcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBmbG93JylcclxuXHJcblx0XHQjIOWOu+aOiXtmaWVsZHM6IHtpbmJveF91ZXJzOiAwLCBjY191c2VyczogMCwgb3V0Ym94X3VzZXJzOiAwLCB0cmFjZXM6IDAsIGF0dGFjaG1lbnRzOiAwfVxyXG5cdFx0aW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQoe3NwYWNlOiBzcGFjZV9pZCwgZmxvdzogZmxvdywgc3RhdGU6J3BlbmRpbmcnLCB0cmFjZXM6eyRlbGVtTWF0Y2g6IHtpc19maW5pc2hlZDogZmFsc2UsIG5hbWU6IHN0ZXBuYW1lfX19LCB7ZmllbGRzOiB7aW5ib3hfdWVyczogMCwgY2NfdXNlcnM6IDAsIG91dGJveF91c2VyczogMCwgYXR0YWNobWVudHM6IDAsIHRyYWNlczogMH19KS5mZXRjaCgpXHJcblxyXG5cdFx0aW5zdGFuY2VzLmZvckVhY2ggKGluc3RhbmNlKS0+XHJcblx0XHRcdGluc3RhbmNlLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZS5faWQsJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyRuZTogdHJ1ZX19LCB7ZmllbGRzOiB7Y29waWVzOiAwfX0pLmZldGNoKClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiBpbnN0YW5jZXN9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiXG4vKlxuQGFwaSB7cG9zdH0gL2FwaS93b3JrZmxvdy9vcGVuL2dldGJ5c3RlcG5hbWUg5qC55o2u5q2l6aqk5ZCN56ew6I635Y+W55Sz6K+35Y2VXG5cbkBhcGlOYW1lIGdldEluc3RhbmNlQnlTdGVwTmFtZVxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy6566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG57XG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcbn1cblxuQGFwaVBhcmFtRXhhbXBsZSB7anNvbn0gUmVxdWVzdCBQYXlsb2FkOlxue1xuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcbiAgICBcInN0ZXBuYW1lXCI6IOatpemqpOWQjeensFxufVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG57XG5cdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuXHRcImRhdGFcIjogW1xuXHRcdHtcblx0XHRcdGluc3RhbmNlXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRpbnN0YW5jZVxuXHRcdH1cblx0XVxufVxuICovXG5Kc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vZ2V0YnlzdGVwbmFtZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93LCBoYXNoRGF0YSwgaW5zdGFuY2VzLCBzcGFjZV9pZCwgc3RlcG5hbWU7XG4gIHRyeSB7XG4gICAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWQ7XG4gICAgc3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddO1xuICAgIGlmICghc3BhY2VfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKTtcbiAgICB9XG4gICAgY3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcik7XG4gICAgaWYgKCFjdXJyZW50X3VzZXJfaW5mbykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBzdGVwbmFtZSA9IGhhc2hEYXRhW1wic3RlcG5hbWVcIl07XG4gICAgZmxvdyA9IGhhc2hEYXRhW1wiZmxvd1wiXTtcbiAgICBpZiAoIXN0ZXBuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHN0ZXBuYW1lJyk7XG4gICAgfVxuICAgIGlmICghZmxvdykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBmbG93Jyk7XG4gICAgfVxuICAgIGluc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIGZsb3c6IGZsb3csXG4gICAgICBzdGF0ZTogJ3BlbmRpbmcnLFxuICAgICAgdHJhY2VzOiB7XG4gICAgICAgICRlbGVtTWF0Y2g6IHtcbiAgICAgICAgICBpc19maW5pc2hlZDogZmFsc2UsXG4gICAgICAgICAgbmFtZTogc3RlcG5hbWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBpbmJveF91ZXJzOiAwLFxuICAgICAgICBjY191c2VyczogMCxcbiAgICAgICAgb3V0Ym94X3VzZXJzOiAwLFxuICAgICAgICBhdHRhY2htZW50czogMCxcbiAgICAgICAgdHJhY2VzOiAwXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLFxuICAgICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG4gICAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgY29waWVzOiAwXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogaW5zdGFuY2VzXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcclxuQ29udGVudC1UeXBl77yaYXBwbGljYXRpb24vanNvblxyXG5mb3JtLWRhdGEg5qC85byPOlxyXG5mZCA9IG5ldyBGb3JtRGF0YTtcclxuZmQuYXBwZW5kKFwiZmlsZVwiLCBmaWxlKTtcclxuXHJcbmZkLmFwcGVuZChcImlzX3ByaXZhdGVcIiwgZmFsc2UpO1xyXG5cclxuaWYgKGlzQWRkVmVyc2lvbikge1xyXG5cdGZkLmFwcGVuZChcImlzQWRkVmVyc2lvblwiLCBpc0FkZFZlcnNpb24pO1xyXG5cdGZkLmFwcGVuZChcInBhcmVudFwiLCBhdHRhY2hfcGFyZW50X2lkKTtcclxufVxyXG5cclxuaWYgKGlzTWFpbkF0dGFjaCkge1xyXG5cdGZkLmFwcGVuZChcIm1haW5cIiwgdHJ1ZSk7XHJcbn1cclxuIyMjXHJcblxyXG5Kc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vY2ZzLzppbnNfaWQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVybiA7XHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJylcclxuXHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZClcclxuXHJcblx0XHRpZiBpbnN0YW5jZS5zdGF0ZSBpc250IFwiZHJhZnRcIlxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfnlLPor7fljZXojYnnqL/nirbmgIHml7bmiY3og73kuIrkvKAnKVxyXG5cclxuXHRcdGFwcHJvdmVfaWQgPSBpbnN0YW5jZS50cmFjZXNbMF0uYXBwcm92ZXNbMF0uX2lkXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5wYXJzZUZpbGVzIHJlcSwgcmVzLCAoKS0+XHJcblx0XHRcdGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzXHJcblxyXG5cdFx0XHRpZiByZXEuZmlsZXMgYW5kIHJlcS5maWxlc1swXVxyXG5cdFx0XHRcdCMg6ZmE5Lu25LiK5Lyg5o6l5Y+j77yM6ZmQ5Yi26ZmE5Lu25aSn5bCP77yM5pyA5aSn5Li6MTAwTVxyXG5cdFx0XHRcdGlmIHJlcS5maWxlc1swXS5kYXRhLmxlbmd0aCA+ICgxMDAqMTAyNCoxMDI0KVxyXG5cdFx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogXCLotoXov4fkuIrkvKDpmYTku7blpKflsI/pmZDliLYoMTAwTSlcIn1dfVxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRcdG5ld0ZpbGUgPSBuZXcgRlMuRmlsZSgpO1xyXG5cdFx0XHRcdG5ld0ZpbGUuYXR0YWNoRGF0YSByZXEuZmlsZXNbMF0uZGF0YSwge3R5cGU6IHJlcS5maWxlc1swXS5taW1lVHlwZX0sIChlcnIpIC0+XHJcblx0XHRcdFx0XHRmaWxlbmFtZSA9IHJlcS5maWxlc1swXS5maWxlbmFtZVxyXG5cclxuXHRcdFx0XHRcdGlmIFtcImltYWdlLmpwZ1wiLCBcImltYWdlLmdpZlwiLCBcImltYWdlLmpwZWdcIiwgXCJpbWFnZS5wbmdcIl0uaW5jbHVkZXMoZmlsZW5hbWUudG9Mb3dlckNhc2UoKSlcclxuXHRcdFx0XHRcdFx0ZmlsZW5hbWUgPSBcImltYWdlLVwiICsgbW9tZW50KG5ldyBEYXRlKCkpLmZvcm1hdCgnWVlZWU1NRERISG1tc3MnKSArIFwiLlwiICsgZmlsZW5hbWUuc3BsaXQoJy4nKS5wb3AoKVxyXG5cclxuXHRcdFx0XHRcdGJvZHkgPSByZXEuYm9keVxyXG5cclxuXHRcdFx0XHRcdGJvZHlbJ293bmVyJ10gPSBpbnN0YW5jZS5zdWJtaXR0ZXJcclxuXHRcdFx0XHRcdGJvZHlbJ293bmVyX25hbWUnXSA9IGluc3RhbmNlLnN1Ym1pdHRlcl9uYW1lXHJcblx0XHRcdFx0XHRib2R5WydzcGFjZSddID0gc3BhY2VfaWRcclxuXHRcdFx0XHRcdGJvZHlbJ2luc3RhbmNlJ10gPSBpbnNfaWRcclxuXHRcdFx0XHRcdGJvZHlbJ2FwcHJvdmUnXSA9IGFwcHJvdmVfaWRcclxuXHJcblx0XHRcdFx0XHR0cnlcclxuXHRcdFx0XHRcdFx0aWYgYm9keSAmJiAoYm9keVsndXBsb2FkX2Zyb20nXSBpcyBcIklFXCIgb3IgYm9keVsndXBsb2FkX2Zyb20nXSBpcyBcIm5vZGVcIilcclxuXHRcdFx0XHRcdFx0XHRmaWxlbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChmaWxlbmFtZSlcclxuXHRcdFx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihmaWxlbmFtZSlcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciBlXHJcblx0XHRcdFx0XHRcdGZpbGVuYW1lID0gZmlsZW5hbWUucmVwbGFjZSgvJS9nLCBcIi1cIilcclxuXHJcblx0XHRcdFx0XHRuZXdGaWxlLm5hbWUoZmlsZW5hbWUpXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGlmIGJvZHkgJiYgYm9keVsnb3duZXInXSAmJiBib2R5Wydvd25lcl9uYW1lJ10gJiYgYm9keVsnc3BhY2UnXSAmJiBib2R5WydpbnN0YW5jZSddICAmJiBib2R5WydhcHByb3ZlJ11cclxuXHRcdFx0XHRcdFx0cGFyZW50ID0gJydcclxuXHRcdFx0XHRcdFx0bWV0YWRhdGEgPSB7b3duZXI6Ym9keVsnb3duZXInXSwgb3duZXJfbmFtZTpib2R5Wydvd25lcl9uYW1lJ10sIHNwYWNlOmJvZHlbJ3NwYWNlJ10sIGluc3RhbmNlOmJvZHlbJ2luc3RhbmNlJ10sIGFwcHJvdmU6IGJvZHlbJ2FwcHJvdmUnXSwgY3VycmVudDogdHJ1ZX1cclxuXHJcblx0XHRcdFx0XHRcdGlmIGJvZHlbXCJpc19wcml2YXRlXCJdICYmIGJvZHlbXCJpc19wcml2YXRlXCJdLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gXCJ0cnVlXCJcclxuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5pc19wcml2YXRlID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0bWV0YWRhdGEuaXNfcHJpdmF0ZSA9IGZhbHNlXHJcblxyXG5cdFx0XHRcdFx0XHRpZiBib2R5WydtYWluJ10gPT0gXCJ0cnVlXCJcclxuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5tYWluID0gdHJ1ZVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgYm9keVsnaXNBZGRWZXJzaW9uJ10gJiYgYm9keVsncGFyZW50J11cclxuXHRcdFx0XHRcdFx0XHRwYXJlbnQgPSBib2R5WydwYXJlbnQnXVxyXG5cdFx0XHRcdFx0XHQjIGVsc2VcclxuXHRcdFx0XHRcdFx0IyAgIGNvbGxlY3Rpb24uZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogYm9keVsnaW5zdGFuY2UnXSwgJ21ldGFkYXRhLmN1cnJlbnQnIDogdHJ1ZX0pLmZvckVhY2ggKGMpIC0+XHJcblx0XHRcdFx0XHRcdCMgICAgIGlmIGMubmFtZSgpID09IGZpbGVuYW1lXHJcblx0XHRcdFx0XHRcdCMgICAgICAgcGFyZW50ID0gYy5tZXRhZGF0YS5wYXJlbnRcclxuXHJcblx0XHRcdFx0XHRcdGlmIHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdHIgPSBjb2xsZWN0aW9uLnVwZGF0ZSh7J21ldGFkYXRhLnBhcmVudCc6IHBhcmVudCwgJ21ldGFkYXRhLmN1cnJlbnQnIDogdHJ1ZX0sIHskdW5zZXQgOiB7J21ldGFkYXRhLmN1cnJlbnQnIDogJyd9fSlcclxuXHRcdFx0XHRcdFx0XHRpZiByXHJcblx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5wYXJlbnQgPSBwYXJlbnRcclxuXHRcdFx0XHRcdFx0XHRcdGlmIGJvZHlbJ2xvY2tlZF9ieSddICYmIGJvZHlbJ2xvY2tlZF9ieV9uYW1lJ11cclxuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGEubG9ja2VkX2J5ID0gYm9keVsnbG9ja2VkX2J5J11cclxuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGEubG9ja2VkX2J5X25hbWUgPSBib2R5Wydsb2NrZWRfYnlfbmFtZSddXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0bmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhXHJcblx0XHRcdFx0XHRcdFx0XHRmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQgbmV3RmlsZVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdCMg5Yig6Zmk5ZCM5LiA5Liq55Sz6K+35Y2V5ZCM5LiA5Liq5q2l6aqk5ZCM5LiA5Liq5Lq65LiK5Lyg55qE6YeN5aSN55qE5paH5Lu2XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBib2R5W1wib3ZlcndyaXRlXCJdICYmIGJvZHlbXCJvdmVyd3JpdGVcIl0udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSBcInRydWVcIlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb2xsZWN0aW9uLnJlbW92ZSh7J21ldGFkYXRhLmluc3RhbmNlJzogYm9keVsnaW5zdGFuY2UnXSwgJ21ldGFkYXRhLnBhcmVudCc6IHBhcmVudCwgJ21ldGFkYXRhLm93bmVyJzogYm9keVsnb3duZXInXSwgJ21ldGFkYXRhLmFwcHJvdmUnOiBib2R5WydhcHByb3ZlJ10sICdtZXRhZGF0YS5jdXJyZW50JzogeyRuZTogdHJ1ZX19KVxyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0bmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhXHJcblx0XHRcdFx0XHRcdFx0ZmlsZU9iaiA9IGNvbGxlY3Rpb24uaW5zZXJ0IG5ld0ZpbGVcclxuXHRcdFx0XHRcdFx0XHRmaWxlT2JqLnVwZGF0ZSh7JHNldDogeydtZXRhZGF0YS5wYXJlbnQnIDogZmlsZU9iai5faWR9fSlcclxuXHJcblx0XHRcdFx0XHQjIOWFvOWuueiAgeeJiOacrFxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQgbmV3RmlsZVxyXG5cclxuXHRcdFx0XHRcdHNpemUgPSBmaWxlT2JqLm9yaWdpbmFsLnNpemVcclxuXHRcdFx0XHRcdGlmICFzaXplXHJcblx0XHRcdFx0XHRcdHNpemUgPSAxMDI0XHJcblxyXG5cdFx0XHRcdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0cmVzdWx0ID1cclxuXHRcdFx0XHRcdFx0YXR0YWNoX2lkOiBmaWxlT2JqLl9pZCxcclxuXHRcdFx0XHRcdFx0c2l6ZTogc2l6ZVxyXG5cclxuXHRcdFx0XHRcdHJlcy5zZXRIZWFkZXIoXCJ4LWFtei12ZXJzaW9uLWlkXCIsZmlsZU9iai5faWQpO1xyXG5cclxuXHRcdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3VsdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogXCJuZWVkIGZpbGVcIn1dfVxyXG5cdFx0XHRcdHJldHVyblxyXG5cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG5cclxuSnNvblJvdXRlcy5hZGQgXCJkZWxldGVcIiwgXCIvYXBpL3dvcmtmbG93L29wZW4vY2ZzLzppbnNfaWRcIiwgIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkXHJcblxyXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJylcclxuXHJcblx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKVxyXG5cclxuXHRcdGlmIGluc3RhbmNlLnN0YXRlIGlzbnQgXCJkcmFmdFwiXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+eUs+ivt+WNleiNieeov+eKtuaAgeaXtuaJjeiDveWIoOmZpOmZhOS7ticpXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keSB8fCB7fVxyXG5cdFx0YXR0YWNoX2lkID0gaGFzaERhdGFbXCJhdHRhY2hfaWRcIl1cclxuXHJcblx0XHRpZiBub3QgYXR0YWNoX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBhdHRhY2hfaWQnKVxyXG5cclxuXHRcdGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzXHJcblxyXG5cdFx0ZmlsZSA9IGNvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogYXR0YWNoX2lkLCAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWR9KVxyXG5cdFx0aWYgZmlsZVxyXG5cdFx0XHRmaWxlLnJlbW92ZSgpXHJcblx0XHRlbHNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+atpOmZhOS7tuS4jeWxnuS6juatpOeUs+ivt+WNle+8jOaIluW3suiiq+WIoOmZpCcpXHJcblxyXG5cdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzdWx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcblxyXG5Kc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmF0dGFjaF9pZFwiLCAgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0YXR0YWNoX2lkID0gcmVxLnBhcmFtcy5hdHRhY2hfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWRcclxuXHJcblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiBub3QgY3VycmVudF91c2VyX2luZm9cclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdHJlcy5zdGF0dXNDb2RlID0gMzAyXHJcblx0XHRyZXMuc2V0SGVhZGVyIFwiTG9jYXRpb25cIiwgU3RlZWRvcy5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9pbnN0YW5jZXMvXCIpICsgYXR0YWNoX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiXHJcblx0XHRyZXMuZW5kKClcclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJcbi8qXG5Db250ZW50LVR5cGXvvJphcHBsaWNhdGlvbi9qc29uXG5mb3JtLWRhdGEg5qC85byPOlxuZmQgPSBuZXcgRm9ybURhdGE7XG5mZC5hcHBlbmQoXCJmaWxlXCIsIGZpbGUpO1xuXG5mZC5hcHBlbmQoXCJpc19wcml2YXRlXCIsIGZhbHNlKTtcblxuaWYgKGlzQWRkVmVyc2lvbikge1xuXHRmZC5hcHBlbmQoXCJpc0FkZFZlcnNpb25cIiwgaXNBZGRWZXJzaW9uKTtcblx0ZmQuYXBwZW5kKFwicGFyZW50XCIsIGF0dGFjaF9wYXJlbnRfaWQpO1xufVxuXG5pZiAoaXNNYWluQXR0YWNoKSB7XG5cdGZkLmFwcGVuZChcIm1haW5cIiwgdHJ1ZSk7XG59XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmluc19pZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhcHByb3ZlX2lkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBpbnNfaWQsIGluc3RhbmNlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKTtcbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUgIT09IFwiZHJhZnRcIikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn55Sz6K+35Y2V6I2J56i/54q25oCB5pe25omN6IO95LiK5LygJyk7XG4gICAgfVxuICAgIGFwcHJvdmVfaWQgPSBpbnN0YW5jZS50cmFjZXNbMF0uYXBwcm92ZXNbMF0uX2lkO1xuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnBhcnNlRmlsZXMocmVxLCByZXMsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbGxlY3Rpb24sIG5ld0ZpbGU7XG4gICAgICBjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlcztcbiAgICAgIGlmIChyZXEuZmlsZXMgJiYgcmVxLmZpbGVzWzBdKSB7XG4gICAgICAgIGlmIChyZXEuZmlsZXNbMF0uZGF0YS5sZW5ndGggPiAoMTAwICogMTAyNCAqIDEwMjQpKSB7XG4gICAgICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwi6LaF6L+H5LiK5Lyg6ZmE5Lu25aSn5bCP6ZmQ5Yi2KDEwME0pXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbmV3RmlsZSA9IG5ldyBGUy5GaWxlKCk7XG4gICAgICAgIHJldHVybiBuZXdGaWxlLmF0dGFjaERhdGEocmVxLmZpbGVzWzBdLmRhdGEsIHtcbiAgICAgICAgICB0eXBlOiByZXEuZmlsZXNbMF0ubWltZVR5cGVcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgdmFyIGJvZHksIGUsIGZpbGVPYmosIGZpbGVuYW1lLCBtZXRhZGF0YSwgcGFyZW50LCByLCByZXN1bHQsIHNpemU7XG4gICAgICAgICAgZmlsZW5hbWUgPSByZXEuZmlsZXNbMF0uZmlsZW5hbWU7XG4gICAgICAgICAgaWYgKFtcImltYWdlLmpwZ1wiLCBcImltYWdlLmdpZlwiLCBcImltYWdlLmpwZWdcIiwgXCJpbWFnZS5wbmdcIl0uaW5jbHVkZXMoZmlsZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gXCJpbWFnZS1cIiArIG1vbWVudChuZXcgRGF0ZSgpKS5mb3JtYXQoJ1lZWVlNTURESEhtbXNzJykgKyBcIi5cIiArIGZpbGVuYW1lLnNwbGl0KCcuJykucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJvZHkgPSByZXEuYm9keTtcbiAgICAgICAgICBib2R5Wydvd25lciddID0gaW5zdGFuY2Uuc3VibWl0dGVyO1xuICAgICAgICAgIGJvZHlbJ293bmVyX25hbWUnXSA9IGluc3RhbmNlLnN1Ym1pdHRlcl9uYW1lO1xuICAgICAgICAgIGJvZHlbJ3NwYWNlJ10gPSBzcGFjZV9pZDtcbiAgICAgICAgICBib2R5WydpbnN0YW5jZSddID0gaW5zX2lkO1xuICAgICAgICAgIGJvZHlbJ2FwcHJvdmUnXSA9IGFwcHJvdmVfaWQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChib2R5ICYmIChib2R5Wyd1cGxvYWRfZnJvbSddID09PSBcIklFXCIgfHwgYm9keVsndXBsb2FkX2Zyb20nXSA9PT0gXCJub2RlXCIpKSB7XG4gICAgICAgICAgICAgIGZpbGVuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmaWxlbmFtZSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC8lL2csIFwiLVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3RmlsZS5uYW1lKGZpbGVuYW1lKTtcbiAgICAgICAgICBpZiAoYm9keSAmJiBib2R5Wydvd25lciddICYmIGJvZHlbJ293bmVyX25hbWUnXSAmJiBib2R5WydzcGFjZSddICYmIGJvZHlbJ2luc3RhbmNlJ10gJiYgYm9keVsnYXBwcm92ZSddKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSAnJztcbiAgICAgICAgICAgIG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICBvd25lcjogYm9keVsnb3duZXInXSxcbiAgICAgICAgICAgICAgb3duZXJfbmFtZTogYm9keVsnb3duZXJfbmFtZSddLFxuICAgICAgICAgICAgICBzcGFjZTogYm9keVsnc3BhY2UnXSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGJvZHlbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICAgIGFwcHJvdmU6IGJvZHlbJ2FwcHJvdmUnXSxcbiAgICAgICAgICAgICAgY3VycmVudDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChib2R5W1wiaXNfcHJpdmF0ZVwiXSAmJiBib2R5W1wiaXNfcHJpdmF0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICBtZXRhZGF0YS5pc19wcml2YXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLmlzX3ByaXZhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib2R5WydtYWluJ10gPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLm1haW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJvZHlbJ2lzQWRkVmVyc2lvbiddICYmIGJvZHlbJ3BhcmVudCddKSB7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGJvZHlbJ3BhcmVudCddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgICByID0gY29sbGVjdGlvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5wYXJlbnQnOiBwYXJlbnQsXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAkdW5zZXQ6IHtcbiAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAoYm9keVsnbG9ja2VkX2J5J10gJiYgYm9keVsnbG9ja2VkX2J5X25hbWUnXSkge1xuICAgICAgICAgICAgICAgICAgbWV0YWRhdGEubG9ja2VkX2J5ID0gYm9keVsnbG9ja2VkX2J5J107XG4gICAgICAgICAgICAgICAgICBtZXRhZGF0YS5sb2NrZWRfYnlfbmFtZSA9IGJvZHlbJ2xvY2tlZF9ieV9uYW1lJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0ZpbGUubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlbXCJvdmVyd3JpdGVcIl0gJiYgYm9keVtcIm92ZXJ3cml0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5yZW1vdmUoe1xuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBib2R5WydpbnN0YW5jZSddLFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEucGFyZW50JzogcGFyZW50LFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEub3duZXInOiBib2R5Wydvd25lciddLFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEuYXBwcm92ZSc6IGJvZHlbJ2FwcHJvdmUnXSxcbiAgICAgICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgICAgIGZpbGVPYmoudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICAgICAnbWV0YWRhdGEucGFyZW50JzogZmlsZU9iai5faWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpemUgPSBmaWxlT2JqLm9yaWdpbmFsLnNpemU7XG4gICAgICAgICAgaWYgKCFzaXplKSB7XG4gICAgICAgICAgICBzaXplID0gMTAyNDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICBhdHRhY2hfaWQ6IGZpbGVPYmouX2lkLFxuICAgICAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzLnNldEhlYWRlcihcIngtYW16LXZlcnNpb24taWRcIiwgZmlsZU9iai5faWQpO1xuICAgICAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwibmVlZCBmaWxlXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbkpzb25Sb3V0ZXMuYWRkKFwiZGVsZXRlXCIsIFwiL2FwaS93b3JrZmxvdy9vcGVuL2Nmcy86aW5zX2lkXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhdHRhY2hfaWQsIGNvbGxlY3Rpb24sIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZpbGUsIGhhc2hEYXRhLCBpbnNfaWQsIGluc3RhbmNlLCByZXN1bHQsIHNwYWNlX2lkO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfnlLPor7fljZXojYnnqL/nirbmgIHml7bmiY3og73liKDpmaTpmYTku7YnKTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keSB8fCB7fTtcbiAgICBhdHRhY2hfaWQgPSBoYXNoRGF0YVtcImF0dGFjaF9pZFwiXTtcbiAgICBpZiAoIWF0dGFjaF9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIGF0dGFjaF9pZCcpO1xuICAgIH1cbiAgICBjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlcztcbiAgICBmaWxlID0gY29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgIF9pZDogYXR0YWNoX2lkLFxuICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zX2lkXG4gICAgfSk7XG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIGZpbGUucmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+atpOmZhOS7tuS4jeWxnuS6juatpOeUs+ivt+WNle+8jOaIluW3suiiq+WIoOmZpCcpO1xuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgT2JqZWN0O1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5Kc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmF0dGFjaF9pZFwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYXR0YWNoX2lkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBhdHRhY2hfaWQgPSByZXEucGFyYW1zLmF0dGFjaF9pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICByZXMuc3RhdHVzQ29kZSA9IDMwMjtcbiAgICByZXMuc2V0SGVhZGVyKFwiTG9jYXRpb25cIiwgU3RlZWRvcy5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9pbnN0YW5jZXMvXCIpICsgYXR0YWNoX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiKTtcbiAgICByZXR1cm4gcmVzLmVuZCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9mb3J3YXJkX3JlZmlsbFwiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3lm57loavlrZDooag9PT09PT09PT09XCJcclxuXHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LnN1YlRhYmxlXCIscmVxPy5xdWVyeT8uc3ViVGFibGVcclxuXHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWIhuWPkeWbnuWhq+eahOWIlz09PT09PT09PT1cIlxyXG5cdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uY29sdW1uXCIscmVxPy5xdWVyeT8uY29sdW1uXHJcblxyXG5cdGNvbHVtbnMgPSByZXE/LnF1ZXJ5Py5jb2x1bW4uc3BsaXQoJzsnKVxyXG5cdGNvbnNvbGUubG9nIFwiY29sdW1uc1wiLGNvbHVtbnNcclxuXHJcblxyXG5cdCMg5YiG5Y+R55qE55Sz6K+35Y2VXHJcblx0Zm9yd2FyZF9pbnMgPSByZXE/LmJvZHk/Lmluc3RhbmNlXHJcblxyXG5cdHN1YlRhYmxlID0gcmVxPy5xdWVyeT8uc3ViVGFibGVcclxuXHJcblx0aWYgZm9yd2FyZF9pbnM/LnN0YXRlID09IFwiY29tcGxldGVkXCIgJiYgZm9yd2FyZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXM/Lmxlbmd0aD4wICYmIHN1YlRhYmxlICYmIGNvbHVtbnNcclxuXHRcdFxyXG5cdFx0IyDliIblj5Hlm57mnaXnmoTlgLxcclxuXHRcdGZvcndhcmRfaW5zX3ZhbHVlcyA9IGZvcndhcmRfaW5zPy52YWx1ZXNcclxuXHJcblx0XHQjICMg5Y6f55Sz6K+35Y2V5a2X5q61XHJcblx0XHRvcmlnaW5hbF9pbnNfaWQgPSBfLmxhc3QgZm9yd2FyZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcclxuXHRcdG9yaWdpbmFsX2lucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKG9yaWdpbmFsX2luc19pZClcclxuXHRcdG9yaWdpbmFsX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShvcmlnaW5hbF9pbnM/LmZvcm0pXHJcblxyXG5cdFx0b3JpZ2luYWxfaW5zX2ZpZWxkcyA9IFtdXHJcblx0XHRvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBbXVxyXG5cclxuXHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfaW5zX2Zvcm0/LmN1cnJlbnQ/Ll9pZFwiLG9yaWdpbmFsX2luc19mb3JtPy5jdXJyZW50Py5faWRcclxuXHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfaW5zPy5mb3JtX3ZlcnNpb25cIixvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvblxyXG5cclxuXHRcdCMg5p+l55yL5Y6f55Sz6K+35Y2V5piv5ZCm5pyJ5a+55bqU55qE5a2Q6KGoXHJcblx0XHRpZiBvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvbiA9PSBvcmlnaW5hbF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXHJcblx0XHRcdG9yaWdpbmFsX2luc19maWVsZHMgPSBvcmlnaW5hbF9pbnNfZm9ybS5jdXJyZW50Py5maWVsZHNcclxuXHRcdFx0b3JpZ2luYWxfaW5zX2ZpZWxkcy5mb3JFYWNoIChvcmlnaW5hbF9pbnNfZmllbGQpLT5cclxuXHRcdFx0XHRjb25zb2xlLmxvZyBcIm9yaWdpbmFsX2luc19maWVsZFwiLG9yaWdpbmFsX2luc19maWVsZD8uY29kZVxyXG5cdFx0XHRcdGlmIG9yaWdpbmFsX2luc19maWVsZD8uY29kZSA9PSBzdWJUYWJsZSAmJiBvcmlnaW5hbF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdFx0b3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gb3JpZ2luYWxfaW5zX2ZpZWxkPy5maWVsZHNcclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgb3JpZ2luYWxfaW5zX2Zvcm0/Lmhpc3RvcnlzPy5sZW5ndGggPiAwXHJcblx0XHRcdFx0b3JpZ2luYWxfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaCAob2gpLT5cclxuXHRcdFx0XHRcdGlmIG9yaWdpbmFsX2lucz8uZm9ybV92ZXJzaW9uID09IG9oLl9pZFxyXG5cdFx0XHRcdFx0XHRvcmlnaW5hbF9pbnNfZmllbGRzID0gb2g/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRvcmlnaW5hbF9pbnNfZmllbGRzLmZvckVhY2ggKG9yaWdpbmFsX2luc19maWVsZCktPlxyXG5cdFx0XHRcdFx0XHRcdGlmIG9yaWdpbmFsX2luc19maWVsZD8uY29kZSA9PSBzdWJUYWJsZSAmJiBvcmlnaW5hbF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gb3JpZ2luYWxfaW5zX2ZpZWxkPy5maWVsZHNcclxuXHJcblx0XHRjb25zb2xlLmxvZyBcIm9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkc1wiLG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcz8ubGVuZ3RoXHJcblxyXG5cdFx0aWYgb3JpZ2luYWxfc3VidGFibGVfZmllbGRzXHJcblx0XHRcdCMgIyDmm7TmlrDmraXpqqTnmoTlgLxcclxuXHRcdFx0IyAxLuaJvuWIsOW9k+WJjeeahOatpemqpFxyXG5cdFx0XHQjIDIu5b2T5YmN5q2l6aqk5LitYXBwcm92ZXPkuK3nmoR2YWx1ZXNcclxuXHRcdFx0IyAzLuWcqHZhbHVlc+S4reaJvuWIsOihqOagvFxyXG5cdFx0XHQjIDQu5qC55o2u6KGo5qC855qEZmllbGRz5bGe5oCn77yM5LiA5Liq5Liq55qE6LWL5YC8XHJcblx0XHRcdCMgNS7miorlpI3liLbnmoRwdXNo5Yiw6KGo5qC85pWw57uE55qE5ZCO6Z2iXHJcblx0XHRcdHRyYWNlcyA9IG9yaWdpbmFsX2lucz8udHJhY2VzXHJcblxyXG5cdFx0XHR0cmFjZSA9IHRyYWNlc1t0cmFjZXMubGVuZ3RoLTFdXHJcblxyXG5cdFx0XHRhcHByb3ZlID0gdHJhY2U/LmFwcHJvdmVzWzBdXHJcblxyXG5cdFx0XHR0YWJsZV9kYXRhID0gYXBwcm92ZT8udmFsdWVzW3N1YlRhYmxlXSB8fCBbXVxyXG5cclxuXHRcdFx0cm93X2RhdGEgPSB7fVxyXG5cclxuXHRcdFx0Y29sdW1ucy5mb3JFYWNoIChjb2x1bW4pLT5cclxuXHRcdFx0XHRyb3dfZGF0YVtjb2x1bW5dID0gZm9yd2FyZF9pbnNfdmFsdWVzW2NvbHVtbl0gfHwgXCJcIlxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdGlmIHJvd19kYXRhICYmIHJvd19kYXRhICE9IHt9XHJcblx0XHRcdFx0dGFibGVfZGF0YS5wdXNoIHJvd19kYXRhXHJcblx0XHRcdFx0dHJhY2VzW3RyYWNlcy5sZW5ndGgtMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXSA9IHRhYmxlX2RhdGFcclxuXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgdHJhY2VzW3RyYWNlcy5sZW5ndGgtMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXVxyXG5cclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKG9yaWdpbmFsX2luc19pZCx7XHJcblx0XHRcdFx0XHQkc2V0OntcclxuXHRcdFx0XHRcdFx0J3RyYWNlcyc6dHJhY2VzXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdFx0XHQnc3VjY2Vzcyc6ICflm57loavmiJDlip8nXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdFx0XHQnaW5mbyc6ICflm57loavmlbDmja7kuLrnqbonXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdGVsc2VcclxuXHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0XHQnZXJyb3InOiAn5Y6f55Sz6K+35Y2V5peg55u45YWz5a2Q6KGoJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdGVsc2VcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0J3N1Y2Nlc3MnOiAn55Sz6K+35Y2V5pyq57uT5p2fJ1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2ZvcndhcmRfcmVmaWxsXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhcHByb3ZlLCBjb2x1bW5zLCBmb3J3YXJkX2lucywgZm9yd2FyZF9pbnNfdmFsdWVzLCBvcmlnaW5hbF9pbnMsIG9yaWdpbmFsX2luc19maWVsZHMsIG9yaWdpbmFsX2luc19mb3JtLCBvcmlnaW5hbF9pbnNfaWQsIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCByZWY3LCByZWY4LCByZWY5LCByb3dfZGF0YSwgc3ViVGFibGUsIHRhYmxlX2RhdGEsIHRyYWNlLCB0cmFjZXM7XG4gIGNvbnNvbGUubG9nKFwiPT09PT09PT095Zue5aGr5a2Q6KGoPT09PT09PT09PVwiKTtcbiAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5zdWJUYWJsZVwiLCByZXEgIT0gbnVsbCA/IChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuc3ViVGFibGUgOiB2b2lkIDAgOiB2b2lkIDApO1xuICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWIhuWPkeWbnuWhq+eahOWIlz09PT09PT09PT1cIik7XG4gIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uY29sdW1uXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmNvbHVtbiA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gIGNvbHVtbnMgPSByZXEgIT0gbnVsbCA/IChyZWYyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMi5jb2x1bW4uc3BsaXQoJzsnKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgY29uc29sZS5sb2coXCJjb2x1bW5zXCIsIGNvbHVtbnMpO1xuICBmb3J3YXJkX2lucyA9IHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEuYm9keSkgIT0gbnVsbCA/IHJlZjMuaW5zdGFuY2UgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIHN1YlRhYmxlID0gcmVxICE9IG51bGwgPyAocmVmNCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjQuc3ViVGFibGUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIGlmICgoZm9yd2FyZF9pbnMgIT0gbnVsbCA/IGZvcndhcmRfaW5zLnN0YXRlIDogdm9pZCAwKSA9PT0gXCJjb21wbGV0ZWRcIiAmJiAoZm9yd2FyZF9pbnMgIT0gbnVsbCA/IChyZWY1ID0gZm9yd2FyZF9pbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgIT0gbnVsbCA/IHJlZjUubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDAgJiYgc3ViVGFibGUgJiYgY29sdW1ucykge1xuICAgIGZvcndhcmRfaW5zX3ZhbHVlcyA9IGZvcndhcmRfaW5zICE9IG51bGwgPyBmb3J3YXJkX2lucy52YWx1ZXMgOiB2b2lkIDA7XG4gICAgb3JpZ2luYWxfaW5zX2lkID0gXy5sYXN0KGZvcndhcmRfaW5zICE9IG51bGwgPyBmb3J3YXJkX2lucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIDogdm9pZCAwKTtcbiAgICBvcmlnaW5hbF9pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShvcmlnaW5hbF9pbnNfaWQpO1xuICAgIG9yaWdpbmFsX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy5mb3JtIDogdm9pZCAwKTtcbiAgICBvcmlnaW5hbF9pbnNfZmllbGRzID0gW107XG4gICAgb3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gW107XG4gICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXCIsIG9yaWdpbmFsX2luc19mb3JtICE9IG51bGwgPyAocmVmNiA9IG9yaWdpbmFsX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWY2Ll9pZCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvblwiLCBvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApO1xuICAgIGlmICgob3JpZ2luYWxfaW5zICE9IG51bGwgPyBvcmlnaW5hbF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gKG9yaWdpbmFsX2luc19mb3JtICE9IG51bGwgPyAocmVmNyA9IG9yaWdpbmFsX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWY3Ll9pZCA6IHZvaWQgMCA6IHZvaWQgMCkpIHtcbiAgICAgIG9yaWdpbmFsX2luc19maWVsZHMgPSAocmVmOCA9IG9yaWdpbmFsX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWY4LmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgIG9yaWdpbmFsX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihvcmlnaW5hbF9pbnNfZmllbGQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9pbnNfZmllbGRcIiwgb3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCk7XG4gICAgICAgIGlmICgob3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IHN1YlRhYmxlICYmIChvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKG9yaWdpbmFsX2luc19mb3JtICE9IG51bGwgPyAocmVmOSA9IG9yaWdpbmFsX2luc19mb3JtLmhpc3RvcnlzKSAhPSBudWxsID8gcmVmOS5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICBvcmlnaW5hbF9pbnNfZm9ybS5oaXN0b3J5cy5mb3JFYWNoKGZ1bmN0aW9uKG9oKSB7XG4gICAgICAgICAgaWYgKChvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApID09PSBvaC5faWQpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsX2luc19maWVsZHMgPSBvaCAhPSBudWxsID8gb2guZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihvcmlnaW5hbF9pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgaWYgKChvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gc3ViVGFibGUgJiYgKG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyA9IG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHNcIiwgb3JpZ2luYWxfc3VidGFibGVfZmllbGRzICE9IG51bGwgPyBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMubGVuZ3RoIDogdm9pZCAwKTtcbiAgICBpZiAob3JpZ2luYWxfc3VidGFibGVfZmllbGRzKSB7XG4gICAgICB0cmFjZXMgPSBvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy50cmFjZXMgOiB2b2lkIDA7XG4gICAgICB0cmFjZSA9IHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV07XG4gICAgICBhcHByb3ZlID0gdHJhY2UgIT0gbnVsbCA/IHRyYWNlLmFwcHJvdmVzWzBdIDogdm9pZCAwO1xuICAgICAgdGFibGVfZGF0YSA9IChhcHByb3ZlICE9IG51bGwgPyBhcHByb3ZlLnZhbHVlc1tzdWJUYWJsZV0gOiB2b2lkIDApIHx8IFtdO1xuICAgICAgcm93X2RhdGEgPSB7fTtcbiAgICAgIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIHJvd19kYXRhW2NvbHVtbl0gPSBmb3J3YXJkX2luc192YWx1ZXNbY29sdW1uXSB8fCBcIlwiO1xuICAgICAgfSk7XG4gICAgICBpZiAocm93X2RhdGEgJiYgcm93X2RhdGEgIT09IHt9KSB7XG4gICAgICAgIHRhYmxlX2RhdGEucHVzaChyb3dfZGF0YSk7XG4gICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXSA9IHRhYmxlX2RhdGE7XG4gICAgICAgIGNvbnNvbGUubG9nKHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXSk7XG4gICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUob3JpZ2luYWxfaW5zX2lkLCB7XG4gICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgJ3RyYWNlcyc6IHRyYWNlc1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgJ2luZm8nOiAn5Zue5aGr5pWw5o2u5Li656m6J1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICdlcnJvcic6ICfljp/nlLPor7fljZXml6Dnm7jlhbPlrZDooagnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnc3VjY2Vzcyc6ICfnlLPor7fljZXmnKrnu5PmnZ8nXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9mb3J3YXJkX3RhYmxlX3JlZmlsbFwiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWOn+ihqOWtkOihqD09PT09PT09PT1cIlxyXG5cdFx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5vVGFibGVcIixyZXE/LnF1ZXJ5Py5vVGFibGVcclxuXHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT09546w6KGo5a2Q6KGoPT09PT09PT09PVwiXHJcblx0XHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LmRUYWJsZVwiLHJlcT8ucXVlcnk/LmRUYWJsZVxyXG5cdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3ljp/ooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCJcclxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8ub01hdGNoQ29sXCIscmVxPy5xdWVyeT8ub01hdGNoQ29sXHJcblx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PeeOsOihqOWNleeahOWtkOihqOWMuemFjeWIlz09PT09PT09PT1cIlxyXG5cdFx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcIixyZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcclxuXHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT096ZyA6KaB5Zue5aGr55qE5YiXPT09PT09PT09PVwiXHRcclxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8ucmVmaWxsQ29sXCIscmVxPy5xdWVyeT8ucmVmaWxsQ29sXHJcblxyXG5cdFx0IyDliIblj5HnmoTnlLPor7fljZVcclxuXHRcdGRfaW5zID0gcmVxPy5ib2R5Py5pbnN0YW5jZVxyXG5cclxuXHRcdFxyXG5cdFx0aWYgZF9pbnM/LnN0YXRlID09IFwiY29tcGxldGVkXCJcclxuXHRcdFx0aWYgcmVxPy5xdWVyeT8ub1RhYmxlXHJcblx0XHRcdFx0b190YWJsZSA9IHJlcT8ucXVlcnk/Lm9UYWJsZVxyXG5cdFx0XHRcdGlmIHJlcT8ucXVlcnk/LmRUYWJsZVxyXG5cdFx0XHRcdFx0ZF90YWJsZSA9IHJlcT8ucXVlcnk/LmRUYWJsZVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGRfdGFibGUgPSBvX3RhYmxlXHJcblx0XHRcdFx0aWYgcmVxPy5xdWVyeT8uYVRhYmxlXHJcblx0XHRcdFx0XHRhX3RhYmxlID0gcmVxPy5xdWVyeT8uYVRhYmxlXHJcblx0XHRcdFx0aWYgcmVxPy5xdWVyeT8ub01hdGNoQ29sXHJcblx0XHRcdFx0XHRvX21hdGNoX2NvbCA9IHJlcT8ucXVlcnk/Lm9NYXRjaENvbFxyXG5cdFx0XHRcdFx0aWYgcmVxPy5xdWVyeT8uZE1hdGNoQ29sXHJcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sID0gcmVxPy5xdWVyeT8uZE1hdGNoQ29sXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sID0gb19tYXRjaF9jb2xcclxuXHRcdFx0XHRcdGNvbHVtbnMgPSByZXE/LnF1ZXJ5Py5yZWZpbGxDb2wuc3BsaXQoJzsnKSB8fCBbXVxyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2cgXCJjb2x1bW5zXCIsY29sdW1uc1x0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRpZiBjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoPDFcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT09PT09PT09PT09PT09XCJcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2cgZF90YWJsZSwgb19tYXRjaF9jb2wsIGNvbHVtbnNcclxuXHJcblx0XHRcdFx0XHRcdCMg5YiG5Y+R5Zue5p2l55qE5YC8XHJcblx0XHRcdFx0XHRcdGRfaW5zX3ZhbHVlcyA9IGRfaW5zPy52YWx1ZXNcclxuXHJcblx0XHRcdFx0XHRcdCMg5Y6f55Sz6K+35Y2VIGZvcm0g6KGo5a2X5q61XHJcblx0XHRcdFx0XHRcdG9faW5zX2lkID0gXy5sYXN0IGRfaW5zPy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzXHJcblx0XHRcdFx0XHRcdG9faW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob19pbnNfaWQpXHJcblx0XHRcdFx0XHRcdG9faW5zX2Zvcm0gPSBkYi5mb3Jtcy5maW5kT25lKG9faW5zPy5mb3JtKVxyXG5cclxuXHRcdFx0XHRcdFx0ZF9pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZF9pbnM/LmZvcm0pXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahCBmaWVsZHNcclxuXHRcdFx0XHRcdFx0b19pbnNfZmllbGRzID0gW11cclxuXHJcblx0XHRcdFx0XHRcdCMg5Y6f5a2Q6KGo5a2X5q61XHJcblx0XHRcdFx0XHRcdG9fc3VidGFibGVfZmllbGRzID0gW11cclxuXHJcblx0XHRcdFx0XHRcdCMg5YiG5Y+R55Sz6K+35Y2V55qEIGZpZWxkc1xyXG5cdFx0XHRcdFx0XHRkX2luc19maWVsZHMgPSBbXVxyXG5cdFx0XHRcdFx0XHQjIOeOsOeUs+ivt+WNleWtl+ihqOWtl+autVxyXG5cdFx0XHRcdFx0XHRkX3N1YnRhYmxlX2ZpZWxkcyA9IFtdXHJcblxyXG5cdFx0XHRcdFx0XHQjIOi1i+WAvOWvueW6lOeahOWtl+autVxyXG5cdFx0XHRcdFx0XHRjb2x1bW5fbGlzdCA9IFtdXHJcblxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0IyDliIblj5HlkI7nlLPor7fljZXnmoQg5a2Q6KGo5YC8XHJcblx0XHRcdFx0XHRcdGRfdGFibGVfdmFsdWVzID0gW11cclxuXHJcblx0XHRcdFx0XHRcdCMg5p+l55yL5Y6f55Sz6K+35Y2V5piv5ZCm5pyJ5a+55bqU55qE5a2Q6KGoXHJcblx0XHRcdFx0XHRcdGlmIG9faW5zPy5mb3JtX3ZlcnNpb24gPT0gb19pbnNfZm9ybT8uY3VycmVudD8uX2lkXHJcblx0XHRcdFx0XHRcdFx0b19pbnNfZmllbGRzID0gb19pbnNfZm9ybT8uY3VycmVudD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdFx0b19pbnNfZmllbGRzLmZvckVhY2ggKG9faW5zX2ZpZWxkKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBvX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIG9faW5zX2ZpZWxkPy5jb2RlID09IG9fdGFibGVcclxuXHRcdFx0XHRcdFx0XHRcdFx0b19zdWJ0YWJsZV9maWVsZHMgPSBvX2luc19maWVsZD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRpZiBvX2luc19mb3JtPy5oaXN0b3J5cz8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0XHRcdFx0b19pbnNfZm9ybS5oaXN0b3J5cy5mb3JFYWNoIChvaCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiBvX2lucz8uZm9ybV92ZXJzaW9uID09IG9oLl9pZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9faW5zX2ZpZWxkcyA9IG9oPy5maWVsZHNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvX2luc19maWVsZHMuZm9yRWFjaCAob19pbnNfZmllbGQpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIG9faW5zX2ZpZWxkPy50eXBlID09ICd0YWJsZScgJiYgb19pbnNfZmllbGQ/LmNvZGUgPT0gb190YWJsZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvX3N1YnRhYmxlX2ZpZWxkcyA9IG9faW5zX2ZpZWxkPy5maWVsZHNcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdCMg5p+l55yL5YiG5Y+R55qE55Sz6K+35Y2V5piv5ZCm5pyJ5a+55bqU55qE5a2X6KGoXHJcblx0XHRcdFx0XHRcdGlmIGRfaW5zPy5mb3JtX3ZlcnNpb24gPT0gZF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXHJcblx0XHRcdFx0XHRcdFx0ZF9pbnNfZmllbGRzID0gZF9pbnNfZm9ybT8uY3VycmVudD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdFx0ZF9pbnNfZmllbGRzLmZvckVhY2ggKGRfaW5zX2ZpZWxkKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRpZigoZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBkX3RhYmxlKXx8KGFfdGFibGUgJiYgZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBhX3RhYmxlKSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQgZF9pbnNfZmllbGQ/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0aWYgZF9pbnNfZm9ybT8uaGlzdG9yeXM/Lmxlbmd0aCA+IDBcclxuXHRcdFx0XHRcdFx0XHRcdGRfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaCAoZGgpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgZF9pbnM/LmZvcm1fdmVyc2lvbiA9PSBkaC5faWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRkX2luc19maWVsZHMgPSBkaD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZF9pbnNfZmllbGRzLmZvckVhY2ggKGRfaW5zX2ZpZWxkKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZigoZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBkX3RhYmxlKXx8KGFfdGFibGUgJiYgZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBhX3RhYmxlKSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQgZF9pbnNfZmllbGQ/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0aWYgb19zdWJ0YWJsZV9maWVsZHMubGVuZ3RoID09IDBcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyBcIm9fc3VidGFibGVfZmllbGRzXCIsb19zdWJ0YWJsZV9maWVsZHNcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Y6f55Sz6K+35Y2V5peg5a+55bqU5a2Q6KGoJyk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRpZiBkX3N1YnRhYmxlX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXml6Dlr7nlupTlrZDooagnKTtcclxuXHJcblx0XHRcdFx0XHRcdGRfdGFibGVfdmFsdWVzID0gZF9pbnM/LnZhbHVlc1tkX3RhYmxlXSB8fCBbXVxyXG5cclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdGlmIGFfdGFibGVcclxuXHRcdFx0XHRcdFx0XHRhX3RhYmxlX3ZhbHVlcyA9ICBkX2lucz8udmFsdWVzW2FfdGFibGVdIHx8IFtdXHJcblx0XHRcdFx0XHRcdFx0aWYgYV90YWJsZV92YWx1ZXMgJiYgYV90YWJsZV92YWx1ZXM/Lmxlbmd0aD09ZF90YWJsZV92YWx1ZXM/Lmxlbmd0aFxyXG5cdFx0XHRcdFx0XHRcdFx0YV90YWJsZV92YWx1ZXMuZm9yRWFjaCAoYV9yb3csaW5kZXgpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZF90YWJsZV92YWx1ZXNbaW5kZXhdW2tleV0gPSB2YWx1ZSBmb3Iga2V5LHZhbHVlIG9mIGFfcm93XHJcblxyXG5cdFx0XHRcdFx0XHRpZiBkX3RhYmxlX3ZhbHVlcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajmlbDmja7kuLrnqbonKTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdG9fbWF0Y2hfY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcigobSktPnJldHVybiBtLmNvZGU9PW9fbWF0Y2hfY29sKVxyXG5cdFx0XHRcdFx0XHRkX21hdGNoX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoKG0pLT5yZXR1cm4gbS5jb2RlPT1kX21hdGNoX2NvbClcclxuXHJcblx0XHRcdFx0XHRcdCMg5Yy56YWN5YiX5Yik5patXHJcblx0XHRcdFx0XHRcdGlmIG9fbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfljp/nlLPor7fljZXlrZDooajml6Dlr7nlupTljLnphY3liJcnKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIGRfbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajml6Dlr7nlupTljLnphY3liJcnKTtcclxuXHJcblx0XHRcdFx0XHRcdCMg5Yik5pat5Yy56YWN5YiX5a2X5q6155qE5YC857G75Z6L5piv5ZCm5LiA6Ie0XHJcblx0XHRcdFx0XHRcdG9fbWF0Y2hfY29sX2ZpZWxkID0gb19tYXRjaF9jb2xfZmllbGRzWzBdXHJcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sX2ZpZWxkID0gZF9tYXRjaF9jb2xfZmllbGRzWzBdXHJcblxyXG5cdFx0XHRcdFx0XHRpZiBvX21hdGNoX2NvbF9maWVsZD8udHlwZSAhPSBkX21hdGNoX2NvbF9maWVsZD8udHlwZVxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlkozljp/nlLPor7fljZXlrZDooajnmoTljLnphY3liJflrZfmrrXkuI3kuIDoh7QnKTtcclxuXHJcblx0XHRcdFx0XHRcdCMg5Zue5aGr5YiX5Yik5patXHJcblx0XHRcdFx0XHRcdGNvbHVtbnMuZm9yRWFjaCAoY29sdW1uKS0+XHJcblx0XHRcdFx0XHRcdFx0Y29scyA9IGNvbHVtbi5zcGxpdCgnLScpIHx8IFtdXHJcblx0XHRcdFx0XHRcdFx0aWYgY29scy5sZW5ndGggPT0gMlxyXG5cdFx0XHRcdFx0XHRcdFx0b19jb2wgPSBjb2xzWzBdXHJcblx0XHRcdFx0XHRcdFx0XHRkX2NvbCA9IGNvbHNbMV1cclxuXHRcdFx0XHRcdFx0XHRcdG9fY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcigobSktPnJldHVybiBtLmNvZGU9PW9fY29sKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZF9jb2xfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKChtKS0+cmV0dXJuIG0uY29kZT09ZF9jb2wpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0IyDliKTmlq3mmK/lkKbmnInlr7nlupTnmoTlm57loavliJdcclxuXHRcdFx0XHRcdFx0XHRcdGlmIG9fY29sX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Y6f55Sz6K+35Y2V5a2Q6KGo5peg5a+55bqU5Zue5aGr5YiXJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgZF9jb2xfZmllbGRzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQjIOWIpOaWreWMuemFjeWIl+Wtl+auteeahOWAvOexu+Wei+aYr+WQpuS4gOiHtFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgb19jb2xfZmllbGRzPy50eXBlICE9IGRfY29sX2ZpZWxkcz8udHlwZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5a2X5q6157G75Z6L5LiN5LiA6Ie0Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdGNvbCA9IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b19jb2w6IG9fY29sLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkX2NvbDogZF9jb2xcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbl9saXN0LnB1c2ggY29sXHJcblxyXG5cdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICflm57loavliJfkuI3ljLnphY0nKTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdCMg6LWL5YC8XHJcblx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgICc9PT09PT1jb2x1bW5fbGlzdD09PT09PT0nLGNvbHVtbl9saXN0XHJcblxyXG5cdFx0XHRcdFx0XHR0cmFjZXMgPSBvX2lucz8udHJhY2VzXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahCBzdGVwIFxyXG5cdFx0XHRcdFx0XHR0cmFjZSA9IHRyYWNlc1t0cmFjZXMubGVuZ3RoLTFdXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahOW9k+WJjeatpemqpFxyXG5cdFx0XHRcdFx0XHRhcHByb3ZlID0gdHJhY2U/LmFwcHJvdmVzWzBdXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWFg+eUs+ivt+WNleeahOW9k+WJjSB2YWx1ZSDnmoQg5a2Q6KGoXHJcblx0XHRcdFx0XHRcdHRhYmxlX2RhdGEgPSBhcHByb3ZlPy52YWx1ZXNbb190YWJsZV0gfHwgW11cclxuXHJcblxyXG5cdFx0XHRcdFx0XHQjIOagueaNriBjb2x1bW5fbGlzdCDotYvlgLzlr7nlupTlrZfmrrXov5vooYzotYvlgLxcclxuXHRcdFx0XHRcdFx0IyDlvqrnjq/liIblj5HnlLPor7fljZXnmoTmr4/ooYxcclxuXHRcdFx0XHRcdFx0ZF90YWJsZV92YWx1ZXMuZm9yRWFjaCAoZF9yb3cpLT5cclxuXHRcdFx0XHRcdFx0XHQjIGNvbnNvbGUubG9nIFwiZF9yb3dcIixkX3Jvd1xyXG5cdFx0XHRcdFx0XHRcdCMg5p+l5om+5Yy56YWN55qE5YiX5piv5ZCm5LiO5b2T5YmN55qE5Yy56YWN5YiX5LiA6Ie0XHJcblx0XHRcdFx0XHRcdFx0aGFzX29iaiA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0Y291bnQgPSAtMVxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdCMg55yL5Y6f5a2Q6KGo5piv5ZCm5pyJ6K+l5Yy56YWN5YiXXHJcblx0XHRcdFx0XHRcdFx0dGFibGVfZGF0YS5mb3JFYWNoIChvX3JvdywgaW5kZXgpLT5cclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJvX3Jvd1wiLCBvX3Jvd1xyXG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImluZGV4XCIsaW5kZXhcclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJvX3Jvd1tvX21hdGNoX2NvbF1cIixvX3Jvd1tvX21hdGNoX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJkX3Jvd1tkX21hdGNoX2NvbF1cIixkX3Jvd1tkX21hdGNoX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJvX3Jvd1tvX21hdGNoX2NvbF0gPT0gZF9yb3dbZF9tYXRjaF9jb2xdXCIsb19yb3dbb19tYXRjaF9jb2xdID09IGRfcm93W2RfbWF0Y2hfY29sXVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGlmIG9fcm93W29fbWF0Y2hfY29sXSA9PSBkX3Jvd1tkX21hdGNoX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcdFx0aGFzX29iaiA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y291bnQgPSBpbmRleFxyXG5cclxuXHRcdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahOWMuemFjeWtl+auteacieWAvFxyXG5cdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJoYXNfb2JqXCIsaGFzX29ialxyXG5cdFx0XHRcdFx0XHRcdGlmIGhhc19vYmo9PXRydWVcclxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbl9saXN0LmZvckVhY2ggKGNvbCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0YWJsZV9kYXRhW2NvdW50XVtjb2w/Lm9fY29sXSA9IGRfcm93W2NvbD8uZF9jb2xdXHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0cm93X2RhdGEgPSB7fVxyXG5cdFx0XHRcdFx0XHRcdFx0cm93X2RhdGFbb19tYXRjaF9jb2xdID0gZF9yb3dbZF9tYXRjaF9jb2xdXHJcblx0XHRcdFx0XHRcdFx0XHRjb2x1bW5fbGlzdC5mb3JFYWNoIChjb2wpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0cm93X2RhdGFbY29sPy5vX2NvbF0gPSBkX3Jvd1tjb2w/LmRfY29sXVxyXG5cdFx0XHRcdFx0XHRcdFx0dGFibGVfZGF0YS5wdXNoIHJvd19kYXRhXHJcblxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0dHJhY2VzW3RyYWNlcy5sZW5ndGgtMV0uYXBwcm92ZXNbMF0udmFsdWVzID0gb19pbnM/LnZhbHVlc1xyXG5cdFx0XHRcdFx0XHR0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXNbb190YWJsZV0gPSB0YWJsZV9kYXRhXHJcblxyXG5cdFx0XHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKG9faW5zX2lkLHtcclxuXHRcdFx0XHRcdFx0XHQkc2V0OntcclxuXHRcdFx0XHRcdFx0XHRcdCd0cmFjZXMnOnRyYWNlc1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdFx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRcdFx0XHRcdCdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5a2Q6KGo5Zue5aGr5YiX5a2X5q61IGNvbHVtbnMg5YC8Jyk7XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljLnphY3liJflrZfmrrUgb01hdGNoQ29sIOWAvCcpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljp/ooajljZXlrZDooaggb1RhYmxlIOWAvCcpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn55Sz6K+35Y2V5pyq57uT5p2fJyk7XHJcblx0Y2F0Y2ggZVxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRlcnJvcnM6IFtlXVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2ZvcndhcmRfdGFibGVfcmVmaWxsXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhX3RhYmxlLCBhX3RhYmxlX3ZhbHVlcywgYXBwcm92ZSwgY29sdW1uX2xpc3QsIGNvbHVtbnMsIGRfaW5zLCBkX2luc19maWVsZHMsIGRfaW5zX2Zvcm0sIGRfaW5zX3ZhbHVlcywgZF9tYXRjaF9jb2wsIGRfbWF0Y2hfY29sX2ZpZWxkLCBkX21hdGNoX2NvbF9maWVsZHMsIGRfc3VidGFibGVfZmllbGRzLCBkX3RhYmxlLCBkX3RhYmxlX3ZhbHVlcywgZSwgb19pbnMsIG9faW5zX2ZpZWxkcywgb19pbnNfZm9ybSwgb19pbnNfaWQsIG9fbWF0Y2hfY29sLCBvX21hdGNoX2NvbF9maWVsZCwgb19tYXRjaF9jb2xfZmllbGRzLCBvX3N1YnRhYmxlX2ZpZWxkcywgb190YWJsZSwgcmVmLCByZWYxLCByZWYxMCwgcmVmMTEsIHJlZjEyLCByZWYxMywgcmVmMTQsIHJlZjE1LCByZWYxNiwgcmVmMTcsIHJlZjE4LCByZWYxOSwgcmVmMiwgcmVmMjAsIHJlZjIxLCByZWYyMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNiwgcmVmNywgcmVmOCwgcmVmOSwgdGFibGVfZGF0YSwgdHJhY2UsIHRyYWNlcztcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWOn+ihqOWtkOihqD09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5vVGFibGVcIiwgcmVxICE9IG51bGwgPyAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLm9UYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3njrDooajlrZDooag9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uZFRhYmxlXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmRUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3ljp/ooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8ub01hdGNoQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLm9NYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3njrDooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uZE1hdGNoQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLmRNYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3pnIDopoHlm57loavnmoTliJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8ucmVmaWxsQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LnJlZmlsbENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgZF9pbnMgPSByZXEgIT0gbnVsbCA/IChyZWY1ID0gcmVxLmJvZHkpICE9IG51bGwgPyByZWY1Lmluc3RhbmNlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICgoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLnN0YXRlIDogdm9pZCAwKSA9PT0gXCJjb21wbGV0ZWRcIikge1xuICAgICAgaWYgKHJlcSAhPSBudWxsID8gKHJlZjYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY2Lm9UYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCkge1xuICAgICAgICBvX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmNyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjcub1RhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmOCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjguZFRhYmxlIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgICAgICAgZF90YWJsZSA9IHJlcSAhPSBudWxsID8gKHJlZjkgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY5LmRUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkX3RhYmxlID0gb190YWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmMTAgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxMC5hVGFibGUgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICBhX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmMTEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxMS5hVGFibGUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcSAhPSBudWxsID8gKHJlZjEyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMTIub01hdGNoQ29sIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgICAgICAgb19tYXRjaF9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWYxMyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEzLm9NYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmMTQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNC5kTWF0Y2hDb2wgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sID0gcmVxICE9IG51bGwgPyAocmVmMTUgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNS5kTWF0Y2hDb2wgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sID0gb19tYXRjaF9jb2w7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbHVtbnMgPSAocmVxICE9IG51bGwgPyAocmVmMTYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNi5yZWZpbGxDb2wuc3BsaXQoJzsnKSA6IHZvaWQgMCA6IHZvaWQgMCkgfHwgW107XG4gICAgICAgICAgY29uc29sZS5sb2coXCJjb2x1bW5zXCIsIGNvbHVtbnMpO1xuICAgICAgICAgIGlmIChjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCI9PT09PT09PT09PT09PT09PT09PT09XCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZF90YWJsZSwgb19tYXRjaF9jb2wsIGNvbHVtbnMpO1xuICAgICAgICAgICAgZF9pbnNfdmFsdWVzID0gZF9pbnMgIT0gbnVsbCA/IGRfaW5zLnZhbHVlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIG9faW5zX2lkID0gXy5sYXN0KGRfaW5zICE9IG51bGwgPyBkX2lucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIDogdm9pZCAwKTtcbiAgICAgICAgICAgIG9faW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob19pbnNfaWQpO1xuICAgICAgICAgICAgb19pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUob19pbnMgIT0gbnVsbCA/IG9faW5zLmZvcm0gOiB2b2lkIDApO1xuICAgICAgICAgICAgZF9pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLmZvcm0gOiB2b2lkIDApO1xuICAgICAgICAgICAgb19pbnNfZmllbGRzID0gW107XG4gICAgICAgICAgICBvX3N1YnRhYmxlX2ZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgZF9pbnNfZmllbGRzID0gW107XG4gICAgICAgICAgICBkX3N1YnRhYmxlX2ZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgY29sdW1uX2xpc3QgPSBbXTtcbiAgICAgICAgICAgIGRfdGFibGVfdmFsdWVzID0gW107XG4gICAgICAgICAgICBpZiAoKG9faW5zICE9IG51bGwgPyBvX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApID09PSAob19pbnNfZm9ybSAhPSBudWxsID8gKHJlZjE3ID0gb19pbnNfZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmMTcuX2lkIDogdm9pZCAwIDogdm9pZCAwKSkge1xuICAgICAgICAgICAgICBvX2luc19maWVsZHMgPSBvX2luc19mb3JtICE9IG51bGwgPyAocmVmMTggPSBvX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYxOC5maWVsZHMgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIG9faW5zX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKG9faW5zX2ZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKChvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScgJiYgKG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gb190YWJsZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG9fc3VidGFibGVfZmllbGRzID0gb19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKChvX2luc19mb3JtICE9IG51bGwgPyAocmVmMTkgPSBvX2luc19mb3JtLmhpc3RvcnlzKSAhPSBudWxsID8gcmVmMTkubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgICAgICAgICBvX2luc19mb3JtLmhpc3RvcnlzLmZvckVhY2goZnVuY3Rpb24ob2gpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgob19pbnMgIT0gbnVsbCA/IG9faW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IG9oLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICBvX2luc19maWVsZHMgPSBvaCAhPSBudWxsID8gb2guZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb19pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24ob19pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoKG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAob19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBvX3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb19zdWJ0YWJsZV9maWVsZHMgPSBvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQuZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IChkX2luc19mb3JtICE9IG51bGwgPyAocmVmMjAgPSBkX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYyMC5faWQgOiB2b2lkIDAgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIGRfaW5zX2ZpZWxkcyA9IGRfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYyMSA9IGRfaW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjIxLmZpZWxkcyA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgZF9pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZF9pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScgJiYgKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gZF90YWJsZSkgfHwgKGFfdGFibGUgJiYgKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBhX3RhYmxlKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRfc3VidGFibGVfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuY29uY2F0KGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC5maWVsZHMgOiB2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoKGRfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYyMiA9IGRfaW5zX2Zvcm0uaGlzdG9yeXMpICE9IG51bGwgPyByZWYyMi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICAgICAgICAgIGRfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbihkaCkge1xuICAgICAgICAgICAgICAgICAgaWYgKChkX2lucyAhPSBudWxsID8gZF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gZGguX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRfaW5zX2ZpZWxkcyA9IGRoICE9IG51bGwgPyBkaC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihkX2luc19maWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgoKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBkX3RhYmxlKSB8fCAoYV90YWJsZSAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnICYmIChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IGFfdGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9fc3VidGFibGVfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9fc3VidGFibGVfZmllbGRzXCIsIG9fc3VidGFibGVfZmllbGRzKTtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleaXoOWvueW6lOWtkOihqCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRfc3VidGFibGVfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5YiG5Y+R55qE55Sz6K+35Y2V5peg5a+55bqU5a2Q6KGoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkX3RhYmxlX3ZhbHVlcyA9IChkX2lucyAhPSBudWxsID8gZF9pbnMudmFsdWVzW2RfdGFibGVdIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChhX3RhYmxlKSB7XG4gICAgICAgICAgICAgIGFfdGFibGVfdmFsdWVzID0gKGRfaW5zICE9IG51bGwgPyBkX2lucy52YWx1ZXNbYV90YWJsZV0gOiB2b2lkIDApIHx8IFtdO1xuICAgICAgICAgICAgICBpZiAoYV90YWJsZV92YWx1ZXMgJiYgKGFfdGFibGVfdmFsdWVzICE9IG51bGwgPyBhX3RhYmxlX3ZhbHVlcy5sZW5ndGggOiB2b2lkIDApID09PSAoZF90YWJsZV92YWx1ZXMgIT0gbnVsbCA/IGRfdGFibGVfdmFsdWVzLmxlbmd0aCA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgICAgICBhX3RhYmxlX3ZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGFfcm93LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGtleSwgcmVzdWx0cywgdmFsdWU7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhX3Jvdykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFfcm93W2tleV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChkX3RhYmxlX3ZhbHVlc1tpbmRleF1ba2V5XSA9IHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZF90YWJsZV92YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajmlbDmja7kuLrnqbonKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9fbWF0Y2hfY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtLmNvZGUgPT09IG9fbWF0Y2hfY29sO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkX21hdGNoX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgICByZXR1cm4gbS5jb2RlID09PSBkX21hdGNoX2NvbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG9fbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRfbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb19tYXRjaF9jb2xfZmllbGQgPSBvX21hdGNoX2NvbF9maWVsZHNbMF07XG4gICAgICAgICAgICBkX21hdGNoX2NvbF9maWVsZCA9IGRfbWF0Y2hfY29sX2ZpZWxkc1swXTtcbiAgICAgICAgICAgIGlmICgob19tYXRjaF9jb2xfZmllbGQgIT0gbnVsbCA/IG9fbWF0Y2hfY29sX2ZpZWxkLnR5cGUgOiB2b2lkIDApICE9PSAoZF9tYXRjaF9jb2xfZmllbGQgIT0gbnVsbCA/IGRfbWF0Y2hfY29sX2ZpZWxkLnR5cGUgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlkozljp/nlLPor7fljZXlrZDooajnmoTljLnphY3liJflrZfmrrXkuI3kuIDoh7QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgICAgICAgdmFyIGNvbCwgY29scywgZF9jb2wsIGRfY29sX2ZpZWxkcywgb19jb2wsIG9fY29sX2ZpZWxkcztcbiAgICAgICAgICAgICAgY29scyA9IGNvbHVtbi5zcGxpdCgnLScpIHx8IFtdO1xuICAgICAgICAgICAgICBpZiAoY29scy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBvX2NvbCA9IGNvbHNbMF07XG4gICAgICAgICAgICAgICAgZF9jb2wgPSBjb2xzWzFdO1xuICAgICAgICAgICAgICAgIG9fY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb2RlID09PSBvX2NvbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29kZSA9PT0gZF9jb2w7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKG9fY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfljp/nlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChvX2NvbF9maWVsZHMgIT0gbnVsbCA/IG9fY29sX2ZpZWxkcy50eXBlIDogdm9pZCAwKSAhPT0gKGRfY29sX2ZpZWxkcyAhPSBudWxsID8gZF9jb2xfZmllbGRzLnR5cGUgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5a2X5q6157G75Z6L5LiN5LiA6Ie0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbCA9IHtcbiAgICAgICAgICAgICAgICAgIG9fY29sOiBvX2NvbCxcbiAgICAgICAgICAgICAgICAgIGRfY29sOiBkX2NvbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbl9saXN0LnB1c2goY29sKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5LiN5Yy56YWNJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2VzID0gb19pbnMgIT0gbnVsbCA/IG9faW5zLnRyYWNlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIHRyYWNlID0gdHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGFwcHJvdmUgPSB0cmFjZSAhPSBudWxsID8gdHJhY2UuYXBwcm92ZXNbMF0gOiB2b2lkIDA7XG4gICAgICAgICAgICB0YWJsZV9kYXRhID0gKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUudmFsdWVzW29fdGFibGVdIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgICAgICAgIGRfdGFibGVfdmFsdWVzLmZvckVhY2goZnVuY3Rpb24oZF9yb3cpIHtcbiAgICAgICAgICAgICAgdmFyIGNvdW50LCBoYXNfb2JqLCByb3dfZGF0YTtcbiAgICAgICAgICAgICAgaGFzX29iaiA9IGZhbHNlO1xuICAgICAgICAgICAgICBjb3VudCA9IC0xO1xuICAgICAgICAgICAgICB0YWJsZV9kYXRhLmZvckVhY2goZnVuY3Rpb24ob19yb3csIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKG9fcm93W29fbWF0Y2hfY29sXSA9PT0gZF9yb3dbZF9tYXRjaF9jb2xdKSB7XG4gICAgICAgICAgICAgICAgICBoYXNfb2JqID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChoYXNfb2JqID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbl9saXN0LmZvckVhY2goZnVuY3Rpb24oY29sKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVfZGF0YVtjb3VudF1bY29sICE9IG51bGwgPyBjb2wub19jb2wgOiB2b2lkIDBdID0gZF9yb3dbY29sICE9IG51bGwgPyBjb2wuZF9jb2wgOiB2b2lkIDBdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvd19kYXRhID0ge307XG4gICAgICAgICAgICAgICAgcm93X2RhdGFbb19tYXRjaF9jb2xdID0gZF9yb3dbZF9tYXRjaF9jb2xdO1xuICAgICAgICAgICAgICAgIGNvbHVtbl9saXN0LmZvckVhY2goZnVuY3Rpb24oY29sKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcm93X2RhdGFbY29sICE9IG51bGwgPyBjb2wub19jb2wgOiB2b2lkIDBdID0gZF9yb3dbY29sICE9IG51bGwgPyBjb2wuZF9jb2wgOiB2b2lkIDBdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZV9kYXRhLnB1c2gocm93X2RhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzID0gb19pbnMgIT0gbnVsbCA/IG9faW5zLnZhbHVlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzW29fdGFibGVdID0gdGFibGVfZGF0YTtcbiAgICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUob19pbnNfaWQsIHtcbiAgICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICAgICd0cmFjZXMnOiB0cmFjZXNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5a2Q6KGo5Zue5aGr5YiX5a2X5q61IGNvbHVtbnMg5YC8Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5Yy56YWN5YiX5a2X5q61IG9NYXRjaENvbCDlgLwnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljp/ooajljZXlrZDooaggb1RhYmxlIOWAvCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn55Sz6K+35Y2V5pyq57uT5p2fJyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtlXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvc3ViX3RhYmxlX3NvcnRcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGoPT09PT09PT09PVwiXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zdWJUYWJsZVwiLHJlcT8ucXVlcnk/LnN1YlRhYmxlXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PT09PT3lrZDooajmgLvliIbliJc9PT09PT09PT09XCJcclxuICAgICAgICBjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LnN1bUNvbFwiLHJlcT8ucXVlcnk/LnN1bUNvbFxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGo5o6S5bqP5YiXPT09PT09PT09PVwiXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zb3J0Q29sXCIscmVxPy5xdWVyeT8uc29ydENvbFxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGo5Y2V5YiX6ZyA6KaB6K6h566X55qE5ZKMPT09PT09PT09PVwiXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXCIscmVxPy5xdWVyeT8uc2luZ2xlQ29sc1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHN1Yl90YWJsZSA9IHJlcT8ucXVlcnk/LnN1YlRhYmxlXHJcbiAgICAgICAgaWYgIXN1Yl90YWJsZVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIj09PT09c3ViX3RhYmxlPT09PT09XCJcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3ViVGFibGUg5a2X5q61JyApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN1bV9jb2wgPSByZXE/LnF1ZXJ5Py5zdW1Db2xcclxuICAgICAgICBpZiAhc3VtX2NvbFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIj09PT09c3VtX2NvbD09PT09PVwiXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHN1bUNvbCDlrZfmrrUnICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc29ydF9jb2wgPSByZXE/LnF1ZXJ5Py5zb3J0Q29sXHJcbiAgICAgICAgaWYgIXNvcnRfY29sXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zb3J0X2NvbD09PT09PVwiXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHNvcnRDb2wg5a2X5q61JyApO1xyXG4gICAgICAgIFxyXG4gICAgICAgICMgc2luZ2xlX2NvbHMgPSByZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXHJcbiAgICAgICAgIyBpZiAhc2luZ2xlX2NvbHNcclxuICAgICAgICAjICAgICBjb25zb2xlLmxvZyBcIj09PT09c2luZ2xlX2NvbHM9PT09PT1cIlxyXG5cclxuICAgICAgICAjICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICd3ZWJob29rIOacqumFjee9riBzaW5nbGVDb2xzIOWtl+autScgKTtcclxuICAgICAgICBcclxuICAgICAgICBpbnMgPSByZXE/LmJvZHk/Lmluc3RhbmNlXHJcbiAgICAgICAgXHJcbiAgICAgICAgc3ViX3RhYmxlX3ZhbHVlcyA9IGlucy52YWx1ZXNbc3ViX3RhYmxlXVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIHN1Yl90YWJsZV92YWx1ZXM/Lmxlbmd0aCA+IDAgXHJcbiAgICAgICAgICAgICMgIyDmoLnmja4gc3ViX3RhYmxlX3ZhbHVlcyDov5vooYzmjpLluo9cclxuICAgICAgICAgICAgIyA9PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgICAgICMg5o6S5bqP5a2X5q6177yM5YWz6ZSu5a2X77yM5q2j5bqPKHRydWUpL+WAkuW6jyhmYWxzZSlcclxuICAgICAgICAgICAgYGZ1bmN0aW9uIEpzb25Tb3J0KGpzb25BcnIsIGtleSwgYXNjKXtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaj0xLGpsPWpzb25BcnIubGVuZ3RoO2ogPCBqbDtqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wID0ganNvbkFycltqXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsICA9IE51bWJlcih0ZW1wW2tleV0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpICAgID0gai0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGFzYz09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGkgPj0wICYmIE51bWJlcihqc29uQXJyW2ldW2tleV0pPnZhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSBqc29uQXJyW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGktMTsgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoaSA+PTAgJiYgTnVtYmVyKGpzb25BcnJbaV1ba2V5XSk8dmFsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnJbaSsxXSA9IGpzb25BcnJbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25BcnI7XHJcbiAgICAgICAgICAgIH1gXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBuZXdfdGFibGVfdmFsdWVzID0gSnNvblNvcnQoc3ViX3RhYmxlX3ZhbHVlcyxzdW1fY29sLGZhbHNlKVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2cgXCJuZXdfdGFibGVfdmFsdWVzXCIsbmV3X3RhYmxlX3ZhbHVlc1xyXG5cclxuICAgICAgICAgICAgbmV3X3RhYmxlX3ZhbHVlcy5mb3JFYWNoIChvYmosIGluZGV4KS0+XHJcbiAgICAgICAgICAgICAgICBpZiBzb3J0X2NvbCBhbmQgb2JqW3N1bV9jb2xdXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW3NvcnRfY29sXSA9IChpbmRleCsxKS50b1N0cmluZygpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIm5ld190YWJsZV92YWx1ZXNcIixuZXdfdGFibGVfdmFsdWVzXHJcblxyXG4gICAgICAgICAgICBpbnMudmFsdWVzW3N1Yl90YWJsZV0gPSBuZXdfdGFibGVfdmFsdWVzXHJcblxyXG4gICAgICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKGlucy5faWQse1xyXG4gICAgICAgICAgICAgICAgJHNldDp7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlcyc6aW5zLnZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcInN1Y2Nlc3NcIlxyXG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiAyMDAsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiAn6K6h566X5o6S5bqP5oiQ5YqfJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICflrZDooajmlbDmja7kuLrnqbonKTtcclxuICAgIGNhdGNoIGVcclxuICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcbiAgICAgICAgICAgIGNvZGU6IDIwMCxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBbZV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuKSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvc3ViX3RhYmxlX3NvcnRcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGUsIGlucywgbmV3X3RhYmxlX3ZhbHVlcywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCByZWY3LCBzb3J0X2NvbCwgc3ViX3RhYmxlLCBzdWJfdGFibGVfdmFsdWVzLCBzdW1fY29sO1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT095a2Q6KGoPT09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhcInJlcT8ucXVlcnk/LnN1YlRhYmxlXCIsIHJlcSAhPSBudWxsID8gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5zdWJUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3lrZDooajmgLvliIbliJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc3VtQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLnN1bUNvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3lrZDooajmjpLluo/liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc29ydENvbFwiLCByZXEgIT0gbnVsbCA/IChyZWYyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMi5zb3J0Q29sIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWtkOihqOWNleWIl+mcgOimgeiuoeeul+eahOWSjD09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXCIsIHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLnNpbmdsZUNvbHMgOiB2b2lkIDAgOiB2b2lkIDApO1xuICAgIHN1Yl90YWJsZSA9IHJlcSAhPSBudWxsID8gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LnN1YlRhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICghc3ViX3RhYmxlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIj09PT09c3ViX3RhYmxlPT09PT09XCIpO1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3ViVGFibGUg5a2X5q61Jyk7XG4gICAgfVxuICAgIHN1bV9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWY1ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNS5zdW1Db2wgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKCFzdW1fY29sKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIj09PT09c3VtX2NvbD09PT09PVwiKTtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHN1bUNvbCDlrZfmrrUnKTtcbiAgICB9XG4gICAgc29ydF9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWY2ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNi5zb3J0Q29sIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICghc29ydF9jb2wpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiPT09PT1zb3J0X2NvbD09PT09PVwiKTtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHNvcnRDb2wg5a2X5q61Jyk7XG4gICAgfVxuICAgIGlucyA9IHJlcSAhPSBudWxsID8gKHJlZjcgPSByZXEuYm9keSkgIT0gbnVsbCA/IHJlZjcuaW5zdGFuY2UgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgc3ViX3RhYmxlX3ZhbHVlcyA9IGlucy52YWx1ZXNbc3ViX3RhYmxlXTtcbiAgICBpZiAoKHN1Yl90YWJsZV92YWx1ZXMgIT0gbnVsbCA/IHN1Yl90YWJsZV92YWx1ZXMubGVuZ3RoIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIGZ1bmN0aW9uIEpzb25Tb3J0KGpzb25BcnIsIGtleSwgYXNjKXtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGo9MSxqbD1qc29uQXJyLmxlbmd0aDtqIDwgamw7aisrKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBqc29uQXJyW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsICA9IE51bWJlcih0ZW1wW2tleV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSAgICA9IGotMTtcbiAgICAgICAgICAgICAgICAgICAgaWYoYXNjPT10cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGkgPj0wICYmIE51bWJlcihqc29uQXJyW2ldW2tleV0pPnZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0ganNvbkFycltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShpID49MCAmJiBOdW1iZXIoanNvbkFycltpXVtrZXldKTx2YWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnJbaSsxXSA9IGpzb25BcnJbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGktMTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0gdGVtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25BcnI7XG4gICAgICAgICAgICB9O1xuICAgICAgbmV3X3RhYmxlX3ZhbHVlcyA9IEpzb25Tb3J0KHN1Yl90YWJsZV92YWx1ZXMsIHN1bV9jb2wsIGZhbHNlKTtcbiAgICAgIGNvbnNvbGUubG9nKFwibmV3X3RhYmxlX3ZhbHVlc1wiLCBuZXdfdGFibGVfdmFsdWVzKTtcbiAgICAgIG5ld190YWJsZV92YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihvYmosIGluZGV4KSB7XG4gICAgICAgIGlmIChzb3J0X2NvbCAmJiBvYmpbc3VtX2NvbF0pIHtcbiAgICAgICAgICByZXR1cm4gb2JqW3NvcnRfY29sXSA9IChpbmRleCArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coXCJuZXdfdGFibGVfdmFsdWVzXCIsIG5ld190YWJsZV92YWx1ZXMpO1xuICAgICAgaW5zLnZhbHVlc1tzdWJfdGFibGVdID0gbmV3X3RhYmxlX3ZhbHVlcztcbiAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoaW5zLl9pZCwge1xuICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgJ3ZhbHVlcyc6IGlucy52YWx1ZXNcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhcInN1Y2Nlc3NcIik7XG4gICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAnc3VjY2Vzcyc6ICforqHnrpfmjpLluo/miJDlip8nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICflrZDooajmlbDmja7kuLrnqbonKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW2VdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiaWYgTWV0ZW9yLmlzRGV2ZWxvcG1lbnRcclxuICAgIEpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy90ZXN0L3dlYmhvb2snLCAocmVxLCByZXMsIG5leHQpIC0+XHJcbiAgICAgICAgdHJ5XHJcblxyXG4gICAgICAgICAgICBoYXNoRGF0YSA9IHJlcS5ib2R5XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nICdhY3Rpb246ICcsIGhhc2hEYXRhLmFjdGlvblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyAnZnJvbV91c2VyOiAnLCBoYXNoRGF0YS5mcm9tX3VzZXJcclxuICAgICAgICAgICAgY29uc29sZS5sb2cgJ3RvX3VzZXJzOiAnLCBoYXNoRGF0YS50b191c2Vyc1xyXG5cclxuXHJcbiAgICAgICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogMjAwXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge31cclxuICAgICAgICBjYXRjaCBlXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG4gICAgICAgICAgICAgICAgY29kZTogMjAwXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH0iLCJpZiAoTWV0ZW9yLmlzRGV2ZWxvcG1lbnQpIHtcbiAgSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL3Rlc3Qvd2ViaG9vaycsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIGUsIGhhc2hEYXRhO1xuICAgIHRyeSB7XG4gICAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgICAgY29uc29sZS5sb2coJ2FjdGlvbjogJywgaGFzaERhdGEuYWN0aW9uKTtcbiAgICAgIGNvbnNvbGUubG9nKCdmcm9tX3VzZXI6ICcsIGhhc2hEYXRhLmZyb21fdXNlcik7XG4gICAgICBjb25zb2xlLmxvZygndG9fdXNlcnM6ICcsIGhhc2hEYXRhLnRvX3VzZXJzKTtcbiAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBlID0gZXJyb3I7XG4gICAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogMjAwLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS9mb3JtdWxhL3VzZXJzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHJcblx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHR1c2VySWRzID0gcmVxLmJvZHkudXNlcklkc1xyXG5cdHNwYWNlSWQgPSByZXEuYm9keS5zcGFjZUlkXHJcblx0c3BhY2VVc2VycyA9IFtdO1xyXG5cclxuXHRzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7dXNlcjogY3VycmVudF91c2VyLCBzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtfaWQ6IDF9fSlcclxuXHRpZiAhc3BhY2VfdXNlclxyXG5cdFx0cmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0J2Vycm9ycyc6ICfml6DmnYPpmZAnXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRpZiAoIXVzZXJJZHMgfHwgIXNwYWNlSWQpXHJcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0c3BhY2VVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdHMoc3BhY2VJZCwgdXNlcklkcylcclxuXHJcblx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0Y29kZTogMjAwLFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHQnc3BhY2VVc2Vycyc6IHNwYWNlVXNlcnNcclxuXHRcdH1cclxuXHR9XHJcbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL2Zvcm11bGEvdXNlcnNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIHNwYWNlSWQsIHNwYWNlVXNlcnMsIHNwYWNlX3VzZXIsIHVzZXJJZHM7XG4gIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgdXNlcklkcyA9IHJlcS5ib2R5LnVzZXJJZHM7XG4gIHNwYWNlSWQgPSByZXEuYm9keS5zcGFjZUlkO1xuICBzcGFjZVVzZXJzID0gW107XG4gIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICB1c2VyOiBjdXJyZW50X3VzZXIsXG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxXG4gICAgfVxuICB9KTtcbiAgaWYgKCFzcGFjZV91c2VyKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfml6DmnYPpmZAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKCF1c2VySWRzIHx8ICFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc3BhY2VVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdHMoc3BhY2VJZCwgdXNlcklkcyk7XG4gIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgY29kZTogMjAwLFxuICAgIGRhdGE6IHtcbiAgICAgICdzcGFjZVVzZXJzJzogc3BhY2VVc2Vyc1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvZm9ybXVsYS9vcmdzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblx0b3JnSWRzID0gcmVxLmJvZHkub3JnSWRzXHJcblx0c3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWRcclxuXHJcblx0c3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe3VzZXI6IGN1cnJlbnRfdXNlciwgc3BhY2U6IHNwYWNlSWR9LCB7ZmllbGRzOiB7X2lkOiAxfX0pXHJcblx0aWYgIXNwYWNlX3VzZXJcclxuXHRcdHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdCdlcnJvcnMnOiAn5peg5p2D6ZmQJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0aWYgKCFvcmdJZHMgfHwgIXNwYWNlSWQpXHJcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdG9yZ3MgPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybXVsYU9yZ09iamVjdHMob3JnSWRzKVxyXG5cclxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRjb2RlOiAyMDAsXHJcblx0XHRkYXRhOiB7XHJcblx0XHRcdCdvcmdzJzogb3Jnc1xyXG5cdFx0fVxyXG5cdH0pO1xyXG4pIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS9mb3JtdWxhL29yZ3NcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIG9yZ0lkcywgb3Jncywgc3BhY2VJZCwgc3BhY2VfdXNlcjtcbiAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICBvcmdJZHMgPSByZXEuYm9keS5vcmdJZHM7XG4gIHNwYWNlSWQgPSByZXEuYm9keS5zcGFjZUlkO1xuICBzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgdXNlcjogY3VycmVudF91c2VyLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMVxuICAgIH1cbiAgfSk7XG4gIGlmICghc3BhY2VfdXNlcikge1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgICdlcnJvcnMnOiAn5peg5p2D6ZmQJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGlmICghb3JnSWRzIHx8ICFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgb3JncyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhT3JnT2JqZWN0cyhvcmdJZHMpO1xuICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgIGNvZGU6IDIwMCxcbiAgICBkYXRhOiB7XG4gICAgICAnb3Jncyc6IG9yZ3NcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xyXG5cdHNldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmU6IChpbnNfaWQsIHN0ZXBfYXBwcm92ZSwgc3RlcHNBcHByb3Zlc09wdGlvbnMpLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWR9LCB7ZmllbGRzOiB7c3RhdGU6IDF9fSlcclxuXHJcblx0XHRpZiBpbnMuc3RhdGUgIT0gJ2RyYWZ0J1xyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdF9rZXlzMSA9IF8ua2V5cyhzdGVwX2FwcHJvdmUpO1xyXG5cdFx0X2tleXMyID0gXy5rZXlzKHN0ZXBzQXBwcm92ZXNPcHRpb25zKTtcclxuXHJcblx0XHRrZXlzID0gXy5jb21wYWN0KF8udW5pb24oX2tleXMxLCBfa2V5czIpKTtcclxuXHJcblx0XHRzdGVwc0FwcHJvdmVzID0ge307XHJcblxyXG5cdFx0Xy5lYWNoIGtleXMsIChzdGVwSWQpLT5cclxuXHRcdFx0c3RlcEFwcHJvdmVzID0gc3RlcF9hcHByb3ZlW3N0ZXBJZF1cclxuXHRcdFx0c3RlcHNBcHByb3ZlT3B0aW9ucyA9IHN0ZXBzQXBwcm92ZXNPcHRpb25zW3N0ZXBJZF1cclxuXHRcdFx0aWYgc3RlcEFwcHJvdmVzXHJcblx0XHRcdFx0c3RlcHNBcHByb3Zlc1tzdGVwSWRdID0gc3RlcEFwcHJvdmVzXHJcblx0XHRcdFx0aWYgc3RlcHNBcHByb3ZlT3B0aW9uc1xyXG5cdFx0XHRcdFx0aWYgXy5pc0FycmF5KHN0ZXBBcHByb3ZlcylcclxuXHRcdFx0XHRcdFx0c3RlcHNBcHByb3ZlT3B0aW9ucyA9IHN0ZXBBcHByb3Zlcy5jb25jYXQoc3RlcHNBcHByb3ZlT3B0aW9ucylcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0c3RlcHNBcHByb3ZlT3B0aW9ucy5wdXNoKHN0ZXBBcHByb3ZlcylcclxuXHRcdFx0aWYgc3RlcHNBcHByb3ZlT3B0aW9uc1xyXG5cdFx0XHRcdHN0ZXBzQXBwcm92ZXNbc3RlcElkICsgJ19vcHRpb25zJ10gPSBfLnVuaXEoc3RlcHNBcHByb3ZlT3B0aW9ucylcclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUge19pZDogaW5zX2lkfSwgeyRzZXQ6IHtzdGVwX2FwcHJvdmU6IHN0ZXBzQXBwcm92ZXN9fVxyXG5cdHNldF9pbnN0YW5jZV9za2lwX3N0ZXBzOiAoaW5zX2lkLCBzdGVwSWQsIGFjdGlvbiktPlxyXG5cdFx0aWYgYWN0aW9uID09ICdwdWxsJ1xyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlIHtfaWQ6IGluc19pZH0sIHskcHVsbDoge3NraXBfc3RlcHM6IHN0ZXBJZH19XHJcblx0XHRlbHNlIGlmIGFjdGlvbiA9PSAncHVzaCdcclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSB7X2lkOiBpbnNfaWR9LCB7JHB1c2g6IHtza2lwX3N0ZXBzOiBzdGVwSWR9fSIsIk1ldGVvci5tZXRob2RzKHtcbiAgc2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZTogZnVuY3Rpb24oaW5zX2lkLCBzdGVwX2FwcHJvdmUsIHN0ZXBzQXBwcm92ZXNPcHRpb25zKSB7XG4gICAgdmFyIF9rZXlzMSwgX2tleXMyLCBpbnMsIGtleXMsIHN0ZXBzQXBwcm92ZXM7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnMuc3RhdGUgIT09ICdkcmFmdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2tleXMxID0gXy5rZXlzKHN0ZXBfYXBwcm92ZSk7XG4gICAgX2tleXMyID0gXy5rZXlzKHN0ZXBzQXBwcm92ZXNPcHRpb25zKTtcbiAgICBrZXlzID0gXy5jb21wYWN0KF8udW5pb24oX2tleXMxLCBfa2V5czIpKTtcbiAgICBzdGVwc0FwcHJvdmVzID0ge307XG4gICAgXy5lYWNoKGtleXMsIGZ1bmN0aW9uKHN0ZXBJZCkge1xuICAgICAgdmFyIHN0ZXBBcHByb3Zlcywgc3RlcHNBcHByb3ZlT3B0aW9ucztcbiAgICAgIHN0ZXBBcHByb3ZlcyA9IHN0ZXBfYXBwcm92ZVtzdGVwSWRdO1xuICAgICAgc3RlcHNBcHByb3ZlT3B0aW9ucyA9IHN0ZXBzQXBwcm92ZXNPcHRpb25zW3N0ZXBJZF07XG4gICAgICBpZiAoc3RlcEFwcHJvdmVzKSB7XG4gICAgICAgIHN0ZXBzQXBwcm92ZXNbc3RlcElkXSA9IHN0ZXBBcHByb3ZlcztcbiAgICAgICAgaWYgKHN0ZXBzQXBwcm92ZU9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoXy5pc0FycmF5KHN0ZXBBcHByb3ZlcykpIHtcbiAgICAgICAgICAgIHN0ZXBzQXBwcm92ZU9wdGlvbnMgPSBzdGVwQXBwcm92ZXMuY29uY2F0KHN0ZXBzQXBwcm92ZU9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGVwc0FwcHJvdmVPcHRpb25zLnB1c2goc3RlcEFwcHJvdmVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdGVwc0FwcHJvdmVPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzdGVwc0FwcHJvdmVzW3N0ZXBJZCArICdfb3B0aW9ucyddID0gXy51bmlxKHN0ZXBzQXBwcm92ZU9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgIF9pZDogaW5zX2lkXG4gICAgfSwge1xuICAgICAgJHNldDoge1xuICAgICAgICBzdGVwX2FwcHJvdmU6IHN0ZXBzQXBwcm92ZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgc2V0X2luc3RhbmNlX3NraXBfc3RlcHM6IGZ1bmN0aW9uKGluc19pZCwgc3RlcElkLCBhY3Rpb24pIHtcbiAgICBpZiAoYWN0aW9uID09PSAncHVsbCcpIHtcbiAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHB1bGw6IHtcbiAgICAgICAgICBza2lwX3N0ZXBzOiBzdGVwSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdwdXNoJykge1xuICAgICAgcmV0dXJuIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IGluc19pZFxuICAgICAgfSwge1xuICAgICAgICAkcHVzaDoge1xuICAgICAgICAgIHNraXBfc3RlcHM6IHN0ZXBJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG5cclxuXHRnZXRfaW5zdGFuY2VfZGF0YTogZnVuY3Rpb24gKGluc3RhbmNlX2lkLCBmb3JtQ2FjaGVkLCBmbG93Q2FjaGVkKSB7XHJcblxyXG5cdFx0Y2hlY2soaW5zdGFuY2VfaWQsIFN0cmluZyk7XHJcblx0XHRjaGVjayhmb3JtQ2FjaGVkLCBCb29sZWFuKTtcclxuXHRcdGNoZWNrKGZsb3dDYWNoZWQsIEJvb2xlYW4pO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKTtcclxuXHJcblx0XHRpZiAoIWluc3RhbmNlKVxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGluc3RhbmNlOiBudWxsXHJcblx0XHRcdH07XHJcblxyXG5cdFx0aWYgKGZvcm1DYWNoZWQgJiYgZmxvd0NhY2hlZClcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRpbnN0YW5jZTogaW5zdGFuY2VcclxuXHRcdFx0fTtcclxuXHJcblx0XHRpZiAoIWZvcm1DYWNoZWQpIHtcclxuXHRcdFx0dmFyIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cdFx0XHR2YXIgZm9ybV92ZXJzaW9uID0ge307XHJcblx0XHRcdGlmIChmb3JtLmN1cnJlbnQuX2lkID09IGluc3RhbmNlLmZvcm1fdmVyc2lvbikge1xyXG5cdFx0XHRcdGZvcm1fdmVyc2lvbiA9IGZvcm0uY3VycmVudDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRmb3JtX3ZlcnNpb24gPSBfLndoZXJlKGZvcm0uaGlzdG9yeXMsIHtfaWQ6IGluc3RhbmNlLmZvcm1fdmVyc2lvbn0pWzBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdGlmICghZmxvd0NhY2hlZCkge1xyXG5cdFx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XHJcblx0XHRcdHZhciBmbG93X3ZlcnNpb24gPSB7fTtcclxuXHRcdFx0aWYgKGZsb3cuY3VycmVudC5faWQgPT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uKSB7XHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50O1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGZsb3dfdmVyc2lvbiA9IF8ud2hlcmUoZmxvdy5oaXN0b3J5cywge19pZDogaW5zdGFuY2UuZmxvd192ZXJzaW9ufSlbMF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRpbnN0YW5jZTogaW5zdGFuY2UsXHJcblx0XHRcdGZvcm1fdmVyc2lvbjogZm9ybV92ZXJzaW9uLFxyXG5cdFx0XHRmbG93X3ZlcnNpb246IGZsb3dfdmVyc2lvblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG5cclxuXHRkcmFmdF9zYXZlX2luc3RhbmNlOiBmdW5jdGlvbiAoaW5zKSB7XHJcblx0XHRpZiAoIXRoaXMudXNlcklkKVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR2YXIgcmVzdWx0ID0gdHJ1ZTtcclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblx0XHR2YXIgaW5zX2lkID0gaW5zLl9pZDtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGlucy50cmFjZXNbMF0uX2lkO1xyXG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLl9pZDtcclxuXHRcdHZhciBkZXNjcmlwdGlvbiA9IGlucy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uZGVzY3JpcHRpb247XHJcblx0XHR2YXIgbmV4dF9zdGVwcyA9IGlucy50cmFjZXNbMF0uYXBwcm92ZXNbMF0ubmV4dF9zdGVwcztcclxuXHRcdHZhciB2YWx1ZXMgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLnZhbHVlcyB8fCB7fTtcclxuXHRcdHZhciBhcHBsaWNhbnRfaWQgPSBpbnMuYXBwbGljYW50O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRhcHBsaWNhbnQ6IDEsXHJcblx0XHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdFx0c3VibWl0dGVyOiAxLFxyXG5cdFx0XHRcdHRyYWNlczogMSxcclxuXHRcdFx0XHRmb3JtOiAxLFxyXG5cdFx0XHRcdGZsb3dfdmVyc2lvbjogMSxcclxuXHRcdFx0XHRzcGFjZTogMSxcclxuXHRcdFx0XHRmbG93OiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHZhciBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xyXG5cdFx0dmFyIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xyXG5cdFx0dmFyIGZvcm1faWQgPSBpbnN0YW5jZS5mb3JtO1xyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHRcdHZhciBjdXJyZW50X3RyYWNlID0gXy5maW5kKHRyYWNlcywgZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0cmV0dXJuIHQuX2lkID09IHRyYWNlX2lkO1xyXG5cdFx0fSk7XHJcblx0XHRjdXJyZW50X3RyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRpZiAoYS5faWQgPT0gYXBwcm92ZV9pZCkge1xyXG5cdFx0XHRcdGluZGV4ID0gaWR4O1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0dmFyIGtleV9zdHIgPSAndHJhY2VzLiQuYXBwcm92ZXMuJyArIGluZGV4ICsgJy4nO1xyXG5cclxuXHRcdC8vIOWIpOaWreS4gOS4qmluc3RhbmNl5piv5ZCm5Li65ouf56i/54q25oCBXHJcblx0XHR2YXIgY3VycmVudF91c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XHJcblx0XHRcdF9pZDogdGhpcy51c2VySWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0bG9jYWxlOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGxhbmcgPSBjdXJyZW50X3VzZXIubG9jYWxlID09ICd6aC1jbicgPyAnemgtQ04nIDogJ2VuJztcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlLCBsYW5nKTtcclxuXHRcdC8vIOWIpOaWreS4gOS4queUqOaIt+aYr+WQpuaYr+S4gOS4qmluc3RhbmNl55qE5o+Q5Lqk6ICFXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VTdWJtaXR0ZXIoaW5zdGFuY2UsIHRoaXMudXNlcklkKTtcclxuXHJcblx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcImN1cnJlbnQuX2lkXCI6IDEsXHJcblx0XHRcdFx0XCJjdXJyZW50LmZvcm1fdmVyc2lvblwiOiAxLFxyXG5cdFx0XHRcdFwibmFtZVwiOiAxLFxyXG5cdFx0XHRcdFwiY3VycmVudC5zdGVwc1wiOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRpZiAoZmxvdy5jdXJyZW50Ll9pZCAhPSBpbnN0YW5jZS5mbG93X3ZlcnNpb24pIHtcclxuXHRcdFx0cmVzdWx0ID0gXCJ1cGdyYWRlZFwiO1xyXG5cdFx0XHR2YXIgc3RhcnRfc3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uIChzKSB7XHJcblx0XHRcdFx0cmV0dXJuIHMuc3RlcF90eXBlID09IFwic3RhcnRcIjtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIOa1geeoi+W3suWNh+e6p1xyXG5cdFx0XHRzZXRPYmouZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50Ll9pZDtcclxuXHRcdFx0c2V0T2JqLmZvcm1fdmVyc2lvbiA9IGZsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XHJcblx0XHRcdC8vIOWtmOWFpeW9k+WJjeacgOaWsOeJiGZsb3fkuK3lvIDlp4voioLngrnnmoRzdGVwX2lkXHJcblx0XHRcdHNldE9ialtcInRyYWNlcy4kLnN0ZXBcIl0gPSBzdGFydF9zdGVwLl9pZDtcclxuXHRcdFx0c2V0T2JqW1widHJhY2VzLiQubmFtZVwiXSA9IHN0YXJ0X3N0ZXAubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaW5zdGFuY2UuYXBwbGljYW50ICE9IGFwcGxpY2FudF9pZCkge1xyXG5cdFx0XHQvLyDnlLPor7fkurrlt7Llj5jmjaJcclxuXHRcdFx0dmFyIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKGFwcGxpY2FudF9pZCwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhciBhcHBsaWNhbnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0dXNlcjogYXBwbGljYW50X2lkXHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcdG9yZ2FuaXphdGlvbjogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhciBvcmdfaWQgPSBhcHBsaWNhbnQuZmV0Y2goKVswXS5vcmdhbml6YXRpb247XHJcblx0XHRcdHZhciBvcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUob3JnX2lkLCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudCA9IGFwcGxpY2FudF9pZDtcclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudF9uYW1lID0gdXNlci5uYW1lO1xyXG5cdFx0XHRzZXRPYmouYXBwbGljYW50X29yZ2FuaXphdGlvbiA9IG9yZ19pZDtcclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZSA9IG9yZ2FuaXphdGlvbi5uYW1lO1xyXG5cdFx0XHRzZXRPYmouYXBwbGljYW50X29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG9yZ2FuaXphdGlvbi5mdWxsbmFtZTtcclxuXHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ3VzZXInXSA9IGFwcGxpY2FudF9pZDtcclxuXHRcdFx0c2V0T2JqW2tleV9zdHIgKyAndXNlcl9uYW1lJ10gPSB1c2VyLm5hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0T2JqW2tleV9zdHIgKyAndmFsdWVzJ10gPSB2YWx1ZXM7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdqdWRnZSddID0gJ3N1Ym1pdHRlZCc7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdyZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRpZiAocmVzdWx0ICE9IFwidXBncmFkZWRcIiAmJiBuZXh0X3N0ZXBzKSB7XHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ25leHRfc3RlcHMnXSA9IG5leHRfc3RlcHM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g6K6h566X55Sz6K+35Y2V5qCH6aKYXHJcblx0XHR2YXIgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xyXG5cdFx0XHRfaWQ6IGZvcm1faWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XCJjdXJyZW50Lm5hbWVfZm9ydW1sYVwiOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm0uY3VycmVudC5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdC8vIHZhciBpc2NyaXB0ID0gbmFtZV9mb3J1bWxhLnJlcGxhY2UoL1xcey9nLCBcIih2YWx1ZXNbJ1wiKS5yZXBsYWNlKC9cXH0vZywgXCInXSB8fCAnJylcIik7XHJcblx0XHRcdC8vIHZhciByZXYgPSBldmFsKGlzY3JpcHQpO1xyXG5cdFx0XHRzZXRPYmoubmFtZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VOYW1lKGlucywgdmFsdWVzKTtcclxuXHRcdH1cclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZV9pZFxyXG5cdFx0fSwge1xyXG5cdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRpbmJveF9zYXZlX2luc3RhbmNlOiBmdW5jdGlvbiAoYXBwcm92ZSkge1xyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblx0XHR2YXIgaW5zX2lkID0gYXBwcm92ZS5pbnN0YW5jZTtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGFwcHJvdmUudHJhY2U7XHJcblx0XHR2YXIgYXBwcm92ZV9pZCA9IGFwcHJvdmUuaWQ7XHJcblx0XHR2YXIgdmFsdWVzID0gYXBwcm92ZS52YWx1ZXM7XHJcblx0XHR2YXIgbmV4dF9zdGVwcyA9IGFwcHJvdmUubmV4dF9zdGVwcztcclxuXHRcdHZhciBkZXNjcmlwdGlvbiA9IGFwcHJvdmUuZGVzY3JpcHRpb247XHJcblx0XHR2YXIganVkZ2UgPSBhcHByb3ZlLmp1ZGdlO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHR0cmFjZXM6IDEsXHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uOiAxLFxyXG5cdFx0XHRcdGZsb3c6IDEsXHJcblx0XHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdFx0Zm9ybTogMSxcclxuXHRcdFx0XHRmb3JtX3ZlcnNpb246IDEsXHJcblx0XHRcdFx0dmFsdWVzOiAxLFxyXG5cdFx0XHRcdGNvZGU6IDFcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHJcblx0XHR2YXIgY3VycmVudF90cmFjZSA9IF8uZmluZCh0cmFjZXMsIGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdHJldHVybiB0Ll9pZCA9PSB0cmFjZV9pZDtcclxuXHRcdH0pO1xyXG5cdFx0dmFyIGN1cnJlbnRfYXBwcm92ZSA9IF8uZmluZChjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYSkge1xyXG5cdFx0XHRyZXR1cm4gYS5faWQgPT0gYXBwcm92ZV9pZDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIOWIpOaWreS4gOS4qmluc3RhbmNl5piv5ZCm5Li65a6h5qC45Lit54q25oCBXHJcblx0XHR2YXIgY3VycmVudF91c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XHJcblx0XHRcdF9pZDogdGhpcy51c2VySWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0bG9jYWxlOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGxhbmcgPSBjdXJyZW50X3VzZXIubG9jYWxlID09ICd6aC1jbicgPyAnemgtQ04nIDogJ2VuJztcclxuXHRcdHRyeSB7XHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVBlbmRpbmcoaW5zdGFuY2UsIGxhbmcpO1xyXG5cdFx0XHQvLyDliKTmlq3kuIDkuKp0cmFjZeaYr+WQpuS4uuacquWujOaIkOeKtuaAgVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzVHJhY2VOb3RGaW5pc2hlZChjdXJyZW50X3RyYWNlKTtcclxuXHRcdFx0Ly8g5Yik5pat5LiA5LiqYXBwcm92ZeaYr+WQpuS4uuacquWujOaIkOeKtuaAgVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzQXBwcm92ZU5vdEZpbmlzaGVkKGN1cnJlbnRfYXBwcm92ZSk7XHJcblx0XHRcdC8vIOWIpOaWreW9k+WJjeeUqOaIt+aYr+WQpmFwcHJvdmUg5a+55bqU55qE5aSE55CG5Lq65oiW5Luj55CG5Lq6XHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNIYW5kbGVyT3JBZ2VudChjdXJyZW50X2FwcHJvdmUsIHRoaXMudXNlcklkKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coZS5zdGFjaylcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0dmFyIGZsb3dfdmVyc2lvbiA9IGluc3RhbmNlLmZsb3dfdmVyc2lvbjtcclxuXHRcdHZhciBmbG93X2lkID0gaW5zdGFuY2UuZmxvdztcclxuXHRcdHZhciBzdGVwX2lkID0gXCJcIjtcclxuXHRcdHN0ZXBfaWQgPSBjdXJyZW50X3RyYWNlLnN0ZXA7XHJcblx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRjdXJyZW50OiAxLFxyXG5cdFx0XHRcdGhpc3RvcnlzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIHN0ZXAgPSBudWxsO1xyXG5cdFx0aWYgKGZsb3cuY3VycmVudC5faWQgPT0gZmxvd192ZXJzaW9uKSB7XHJcblx0XHRcdGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XHJcblx0XHRcdFx0aWYgKHMuX2lkID09IHN0ZXBfaWQpXHJcblx0XHRcdFx0XHRzdGVwID0gcztcclxuXHRcdFx0fSlcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZsb3cuaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbiAoaCkge1xyXG5cdFx0XHRcdGguc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAocykge1xyXG5cdFx0XHRcdFx0aWYgKHMuX2lkID09IHN0ZXBfaWQpXHJcblx0XHRcdFx0XHRcdHN0ZXAgPSBzO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0pXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFzdGVwKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR2YXIgc3RlcF90eXBlID0gc3RlcC5zdGVwX3R5cGU7XHJcblxyXG5cdFx0Y3VycmVudF90cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0aWYgKGEuX2lkID09IGFwcHJvdmVfaWQpIHtcclxuXHRcdFx0XHRpbmRleCA9IGlkeDtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHR2YXIga2V5X3N0ciA9ICd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLic7XHJcblxyXG5cdFx0dmFyIHBlcm1pc3Npb25zX3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0QXBwcm92ZVZhbHVlcyhhcHByb3ZlLnZhbHVlcywgc3RlcC5wZXJtaXNzaW9ucywgaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcclxuXHJcblx0XHR2YXIgY2hhbmdlX3ZhbHVlcyA9IGFwcHJvdmVNYW5hZ2VyLmdldENoYW5nZVZhbHVlcyhpbnN0YW5jZS52YWx1ZXMsIHBlcm1pc3Npb25zX3ZhbHVlcyk7XHJcblxyXG5cdFx0c2V0T2JqLnZhbHVlcyA9IF8uZXh0ZW5kKChpbnN0YW5jZS52YWx1ZXMgfHwge30pLCBwZXJtaXNzaW9uc192YWx1ZXMpO1xyXG5cclxuXHRcdGlmICghXy5pc0VtcHR5KGNoYW5nZV92YWx1ZXMpKSB7XHJcblxyXG5cdFx0XHR2YWx1ZXNfaGlzdG9yeSA9IGN1cnJlbnRfYXBwcm92ZS52YWx1ZXNfaGlzdG9yeSB8fCBbXVxyXG5cclxuXHRcdFx0dmFsdWVzX2hpc3RvcnkucHVzaCh7XHJcblx0XHRcdFx0dmFsdWVzOiBjaGFuZ2VfdmFsdWVzLFxyXG5cdFx0XHRcdGNyZWF0ZTogbmV3IERhdGUoKVxyXG5cdFx0XHR9KVxyXG5cclxuXHRcdFx0c2V0T2JqW2tleV9zdHIgKyAndmFsdWVzX2hpc3RvcnknXSA9IHZhbHVlc19oaXN0b3J5XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0T2JqW2tleV9zdHIgKyAnaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ3JlYWRfZGF0ZSddID0gbmV3IERhdGUoKTtcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ3ZhbHVlcyddID0gc2V0T2JqLnZhbHVlcztcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ2Rlc2NyaXB0aW9uJ10gPSBkZXNjcmlwdGlvbjtcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ25leHRfc3RlcHMnXSA9IG5leHRfc3RlcHM7XHJcblx0XHRpZiAoc3RlcF90eXBlID09IFwic3VibWl0XCIgfHwgc3RlcF90eXBlID09IFwic3RhcnRcIikge1xyXG5cdFx0XHRzZXRPYmpba2V5X3N0ciArICdqdWRnZSddID0gXCJzdWJtaXR0ZWRcIjtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ2p1ZGdlJ10gPSBqdWRnZTtcclxuXHRcdH1cclxuXHJcblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblxyXG5cdFx0Ly8g6K6h566X55Sz6K+35Y2V5qCH6aKYXHJcblx0XHR2YXIgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XHJcblx0XHR2YXIgZm9ybV92ID0gdXVmbG93TWFuYWdlci5nZXRGb3JtVmVyc2lvbihmb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm1fdi5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdHNldE9iai5uYW1lID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZU5hbWUoaW5zdGFuY2UsIHNldE9iai52YWx1ZXMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc19pZCxcclxuXHRcdFx0XCJ0cmFjZXMuX2lkXCI6IHRyYWNlX2lkXHJcblx0XHR9LCB7XHJcblx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG59KSIsIk1ldGVvci5tZXRob2RzKHtcclxuXHRjY19kbzogZnVuY3Rpb24gKGFwcHJvdmUsIGNjX3VzZXJfaWRzLCBkZXNjcmlwdGlvbikge1xyXG5cclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbnNfaWQgPSBhcHByb3ZlLmluc3RhbmNlO1xyXG5cdFx0dmFyIHRyYWNlX2lkID0gYXBwcm92ZS50cmFjZTtcclxuXHRcdHZhciBhcHByb3ZlX2lkID0gYXBwcm92ZS5faWQ7XHJcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0c3BhY2U6IDEsXHJcblx0XHRcdFx0dHJhY2VzOiAxLFxyXG5cdFx0XHRcdGNjX3VzZXJzOiAxLFxyXG5cdFx0XHRcdHZhbHVlczogMVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZDtcclxuXHRcdHZhciBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xyXG5cdFx0dmFyIG5ld19hcHByb3ZlcyA9IFtdO1xyXG5cclxuXHRcdHZhciBmcm9tX3VzZXJfbmFtZSA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyX2lkLCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdG5hbWU6IDFcclxuXHRcdFx0fVxyXG5cdFx0fSkubmFtZVxyXG5cclxuXHRcdGNjX3VzZXJfaWRzLmZvckVhY2goZnVuY3Rpb24gKHVzZXJJZCwgaWR4KSB7XHJcblx0XHRcdHZhciB1c2VyID0gZGIudXNlcnMuZmluZE9uZSh1c2VySWQsIHtcclxuXHRcdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcdG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR2YXIgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcclxuXHRcdFx0XHR1c2VyOiB1c2VySWRcclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0b3JnYW5pemF0aW9uOiAxXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0dmFyIG9yZ19pZCA9IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xyXG5cdFx0XHR2YXIgb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKG9yZ19pZCwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRcdGZ1bGxuYW1lOiAxXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0dmFyIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgdXNlcklkKTtcclxuXHRcdFx0dmFyIGhhbmRsZXJfaWQgPSB1c2VySWQ7XHJcblx0XHRcdHZhciBoYW5kbGVyX2luZm8gPSB1c2VyO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9zcGFjZV91c2VyID0gc3BhY2VfdXNlcjtcclxuXHRcdFx0dmFyIGhhbmRsZXJfb3JnX2luZm8gPSBvcmdhbml6YXRpb247XHJcblx0XHRcdGlmIChhZ2VudCkge1xyXG5cdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudDtcclxuXHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGFnZW50LCB7XHJcblx0XHRcdFx0XHRmaWxlZHM6IHtcclxuXHRcdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGhhbmRsZXJfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBhZ2VudCk7XHJcblx0XHRcdFx0aGFuZGxlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhoYW5kbGVyX3NwYWNlX3VzZXIpO1xyXG5cdFx0XHRcdGNjX3VzZXJfaWRzW2lkeF0gPSBhZ2VudDtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgYXBwciA9IHtcclxuXHRcdFx0XHQnX2lkJzogbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cixcclxuXHRcdFx0XHQnaW5zdGFuY2UnOiBpbnNfaWQsXHJcblx0XHRcdFx0J3RyYWNlJzogdHJhY2VfaWQsXHJcblx0XHRcdFx0J2lzX2ZpbmlzaGVkJzogZmFsc2UsXHJcblx0XHRcdFx0J3VzZXInOiB1c2VySWQsXHJcblx0XHRcdFx0J3VzZXJfbmFtZSc6IHVzZXIubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcic6IGhhbmRsZXJfaWQsXHJcblx0XHRcdFx0J2hhbmRsZXJfbmFtZSc6IGhhbmRsZXJfaW5mby5uYW1lLFxyXG5cdFx0XHRcdCdoYW5kbGVyX29yZ2FuaXphdGlvbic6IGhhbmRsZXJfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sXHJcblx0XHRcdFx0J2hhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUnOiBoYW5kbGVyX29yZ19pbmZvLm5hbWUsXHJcblx0XHRcdFx0J2hhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lJzogaGFuZGxlcl9vcmdfaW5mby5mdWxsbmFtZSxcclxuXHRcdFx0XHQndHlwZSc6ICdjYycsXHJcblx0XHRcdFx0J3N0YXJ0X2RhdGUnOiBuZXcgRGF0ZSgpLFxyXG5cdFx0XHRcdCdpc19yZWFkJzogZmFsc2UsXHJcblx0XHRcdFx0J2Zyb21fdXNlcic6IGN1cnJlbnRfdXNlcl9pZCxcclxuXHRcdFx0XHQnZnJvbV91c2VyX25hbWUnOiBmcm9tX3VzZXJfbmFtZSxcclxuXHRcdFx0XHQnb3Bpbmlvbl9maWVsZHNfY29kZSc6IGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSxcclxuXHRcdFx0XHQnc2lnbl9maWVsZF9jb2RlJzogKGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSAmJiBhcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGUubGVuZ3RoID09IDEpID8gYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlWzBdIDogXCJcIixcclxuXHRcdFx0XHQnZnJvbV9hcHByb3ZlX2lkJzogYXBwcm92ZV9pZCxcclxuXHRcdFx0XHQnY2NfZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvblxyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZiAoYWdlbnQpIHtcclxuXHRcdFx0XHRhcHByLmFnZW50ID0gYWdlbnQ7XHJcblx0XHRcdH1cclxuXHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgYXBwcilcclxuXHRcdFx0bmV3X2FwcHJvdmVzLnB1c2goYXBwcik7XHJcblx0XHR9KVxyXG5cclxuXHJcblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblxyXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdF9pZDogaW5zX2lkLFxyXG5cdFx0XHQndHJhY2VzLl9pZCc6IHRyYWNlX2lkXHJcblx0XHR9LCB7XHJcblx0XHRcdCRzZXQ6IHNldE9iaixcclxuXHRcdFx0JGFkZFRvU2V0OiB7XHJcblx0XHRcdFx0J3RyYWNlcy4kLmFwcHJvdmVzJzoge1xyXG5cdFx0XHRcdFx0JGVhY2g6IG5ld19hcHByb3Zlc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0JHB1c2g6IHtcclxuXHRcdFx0XHRjY191c2Vyczoge1xyXG5cdFx0XHRcdFx0JGVhY2g6IGNjX3VzZXJfaWRzXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyX2lkKTtcclxuXHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwidHJhY2VfYXBwcm92ZV9jY1wiLCBpbnN0YW5jZSwgXCJcIiwgY3VycmVudF91c2VyX2luZm8sIGNjX3VzZXJfaWRzKTtcclxuXHJcblx0XHRmbG93X2lkID0gaW5zdGFuY2UuZmxvdztcclxuXHRcdGFwcHJvdmUuY2NfdXNlcl9pZHMgPSBjY191c2VyX2lkczsgLy8g6K6w5b2V5LiL5pys5qyh5Lyg6ZiF55qE5Lq65ZGYSUTkvZzkuLpob29r5o6l5Y+j5Lit55qE5Y+C5pWwXHJcblx0XHQvLyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhmbG93X2lkLCBpbnN0YW5jZSwgYXBwcm92ZSwgJ2NjX2RvJywgY3VycmVudF91c2VyX2lkLCBjY191c2VyX2lkcylcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNjX3JlYWQ6IGZ1bmN0aW9uIChhcHByb3ZlKSB7XHJcblx0XHR2YXIgc2V0T2JqID0ge307XHJcblx0XHR2YXIgaW5zX2lkID0gYXBwcm92ZS5pbnN0YW5jZTtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGFwcHJvdmUudHJhY2U7XHJcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0dHJhY2VzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xyXG5cdFx0dmFyIGN1cnJlbnRfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRyZXR1cm4gdC5faWQgPT0gdHJhY2VfaWQ7XHJcblx0XHR9KVxyXG5cclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblxyXG5cdFx0Y3VycmVudF90cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0aWYgKGEudHlwZSA9PSAnY2MnICYmIGEuaGFuZGxlciA9PSBjdXJyZW50X3VzZXJfaWQgJiYgIWEuaXNfcmVhZCkge1xyXG5cdFx0XHRcdGluZGV4ID0gaWR4O1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcuaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGluZGV4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblxyXG5cdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdCd0cmFjZXMuX2lkJzogdHJhY2VfaWRcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0T2JqXHJcblx0XHR9KTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNjX3N1Ym1pdDogZnVuY3Rpb24gKGluc19pZCwgZGVzY3JpcHRpb24sIG15QXBwcm92ZSwgY2NIYXNFZGl0UGVybWlzc2lvbikge1xyXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XHJcblx0XHR2YXIgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xyXG5cclxuXHRcdHZhciBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xyXG5cdFx0dmFyIHZhbHVlcyA9IG15QXBwcm92ZS52YWx1ZXMgfHwge307XHJcblxyXG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBteUFwcHJvdmUuX2lkO1xyXG5cclxuXHRcdHZhciBteVRyYWNlO1xyXG5cclxuXHRcdGZvciAobGV0IHRpZHggPSAwOyB0aWR4IDwgdHJhY2VzLmxlbmd0aDsgdGlkeCsrKSB7XHJcblx0XHRcdGNvbnN0IHQgPSB0cmFjZXNbdGlkeF07XHJcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0Zm9yIChsZXQgYWlkeCA9IDA7IGFpZHggPCB0LmFwcHJvdmVzLmxlbmd0aDsgYWlkeCsrKSB7XHJcblx0XHRcdFx0XHRjb25zdCBhID0gdC5hcHByb3Zlc1thaWR4XTtcclxuXHRcdFx0XHRcdGlmIChhLnR5cGUgPT0gJ2NjJyAmJiBhLmhhbmRsZXIgPT0gY3VycmVudF91c2VyX2lkICYmIGEuaXNfZmluaXNoZWQgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHVwb2JqID0ge307XHJcblx0XHRcdFx0XHRcdHZhciBrZXlfc3RyID0gJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBhaWR4ICsgJy4nO1xyXG5cdFx0XHRcdFx0XHR1cG9ialtrZXlfc3RyICsgJ2lzX2ZpbmlzaGVkJ10gPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR1cG9ialtrZXlfc3RyICsgJ2lzX3JlYWQnXSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdHVwb2JqW2tleV9zdHIgKyAnZmluaXNoX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0XHRcdHVwb2JqW2tleV9zdHIgKyAnanVkZ2UnXSA9IFwic3VibWl0dGVkXCI7XHJcblx0XHRcdFx0XHRcdHVwb2JqW2tleV9zdHIgKyAnY29zdF90aW1lJ10gPSBuZXcgRGF0ZSgpIC0gYS5zdGFydF9kYXRlO1xyXG5cdFx0XHRcdFx0XHRpZiAoYXBwcm92ZV9pZCA9PSBhLl9pZCAmJiAhdC5pc19maW5pc2hlZCAmJiBjY0hhc0VkaXRQZXJtaXNzaW9uKSB7XHJcblx0XHRcdFx0XHRcdFx0bXlUcmFjZSA9IHQ7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHQuc3RlcCk7XHJcblx0XHRcdFx0XHRcdFx0dXBvYmpba2V5X3N0ciArIFwidmFsdWVzXCJdID0gdXVmbG93TWFuYWdlci5nZXRBcHByb3ZlVmFsdWVzKHZhbHVlcywgc3RlcFtcInBlcm1pc3Npb25zXCJdLCBpbnN0YW5jZS5mb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Ly/orr7nva7mhI/op4HvvIzmhI/op4Hlj6rmt7vliqDliLDmnIDlkI7kuIDmnaFhcHByb3Zl5LitXHJcblx0XHRcdFx0XHRcdGlmIChhcHByb3ZlX2lkID09IGEuX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0dXBvYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFx0XHRcdFx0J3RyYWNlcy5faWQnOiB0Ll9pZFxyXG5cdFx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdFx0JHNldDogdXBvYmpcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG15QXBwcm92ZSkge1xyXG5cclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblxyXG5cdFx0XHRpZiAoY2NIYXNFZGl0UGVybWlzc2lvbiAmJiBteUFwcHJvdmUgJiYgIW15VHJhY2UuaXNfZmluaXNoZWQpIHtcclxuXHRcdFx0XHR2YXIgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xyXG5cdFx0XHRcdHZhciB1cGRhdGVkX3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnMsIGFwcHJvdmVfaWQpO1xyXG5cdFx0XHRcdHNldE9iai52YWx1ZXMgPSB1cGRhdGVkX3ZhbHVlcztcclxuXHRcdFx0XHRzZXRPYmoubmFtZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VOYW1lKGluc3RhbmNlKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFx0J3RyYWNlcy5faWQnOiBteUFwcHJvdmUudHJhY2VcclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdCRzZXQ6IHNldE9iaixcclxuXHRcdFx0XHQkcHVsbDoge1xyXG5cdFx0XHRcdFx0Y2NfdXNlcnM6IGN1cnJlbnRfdXNlcl9pZFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0JGFkZFRvU2V0OiB7XHJcblx0XHRcdFx0XHRvdXRib3hfdXNlcnM6IHtcclxuXHRcdFx0XHRcdFx0JGVhY2g6IFtjdXJyZW50X3VzZXJfaWQsIG15QXBwcm92ZS51c2VyXVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XHJcblxyXG5cdFx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyX2lkKTtcclxuXHRcdFx0Ly/kvKDpmIXmj5DkuqTkuI3pgJrnn6XkvKDpmIXogIVcclxuXHRcdFx0aWYgKGZhbHNlICYmIGRlc2NyaXB0aW9uICYmIG15QXBwcm92ZSAmJiBteUFwcHJvdmUuZnJvbV91c2VyKSB7XHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJ0cmFjZV9hcHByb3ZlX2NjX3N1Ym1pdFwiLCBpbnN0YW5jZSwgXCJcIiwgY3VycmVudF91c2VyX2luZm8sIFtteUFwcHJvdmUuZnJvbV91c2VyXSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCBjdXJyZW50X3VzZXJfaWQpO1xyXG5cclxuXHRcdFx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XHJcblx0XHRcdC8vIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soZmxvd19pZCwgaW5zdGFuY2UsIG15QXBwcm92ZSwgJ2NjX3N1Ym1pdCcsIGN1cnJlbnRfdXNlcl9pZCwgW10pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNjX3JlbW92ZTogZnVuY3Rpb24gKGluc3RhbmNlSWQsIGFwcHJvdmVJZCkge1xyXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlSWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0dHJhY2VzOiAxLFxyXG5cdFx0XHRcdGNjX3VzZXJzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHRcdHZhciB0cmFjZV9pZCwgcmVtb3ZlX3VzZXJfaWQsIG11bHRpID0gZmFsc2U7XHJcblxyXG5cdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0aWYgKHQuYXBwcm92ZXMpIHtcclxuXHRcdFx0XHR0LmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRcdFx0aWYgKGEuX2lkID09IGFwcHJvdmVJZCkge1xyXG5cdFx0XHRcdFx0XHR0cmFjZV9pZCA9IGEudHJhY2U7XHJcblx0XHRcdFx0XHRcdHJlbW92ZV91c2VyX2lkID0gYS5oYW5kbGVyO1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSAndGVybWluYXRlZCc7XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZmluaXNoX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0aWYgKCF0cmFjZV9pZCB8fCAhcmVtb3ZlX3VzZXJfaWQpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR2YXIgbXVsdGkgPSAwO1xyXG5cdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0aWYgKHQuYXBwcm92ZXMpIHtcclxuXHRcdFx0XHR0LmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcclxuXHRcdFx0XHRcdGlmIChhLmhhbmRsZXIgPT0gcmVtb3ZlX3VzZXJfaWQgJiYgYS50eXBlID09ICdjYycgJiYgYS5pc19maW5pc2hlZCA9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRtdWx0aSsrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRpZiAobXVsdGkgPiAxKSB7XHJcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcclxuXHRcdFx0XHQndHJhY2VzLl9pZCc6IHRyYWNlX2lkXHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0J3RyYWNlcy5faWQnOiB0cmFjZV9pZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0JHNldDogc2V0T2JqLFxyXG5cdFx0XHRcdCRwdWxsOiB7XHJcblx0XHRcdFx0XHRjY191c2VyczogcmVtb3ZlX3VzZXJfaWRcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgcmVtb3ZlX3VzZXJfaWQpO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHJcblx0Y2Nfc2F2ZTogZnVuY3Rpb24gKGluc19pZCwgZGVzY3JpcHRpb24sIG15QXBwcm92ZSwgY2NIYXNFZGl0UGVybWlzc2lvbikge1xyXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XHJcblx0XHR2YXIgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xyXG5cclxuXHRcdHZhciBteVRyYWNlO1xyXG5cclxuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdGlmIChhLmhhbmRsZXIgPT0gY3VycmVudF91c2VyX2lkICYmIGEudHlwZSA9PSAnY2MnICYmIGEuaXNfZmluaXNoZWQgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHVwb2JqID0ge307XHJcblx0XHRcdFx0XHRcdHVwb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gXCJzdWJtaXR0ZWRcIjtcclxuXHRcdFx0XHRcdFx0dXBvYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLnJlYWRfZGF0ZSddID0gbmV3IERhdGUoKTtcclxuXHRcdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFx0XHRcdFx0J3RyYWNlcy5faWQnOiB0Ll9pZFxyXG5cdFx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdFx0JHNldDogdXBvYmpcclxuXHRcdFx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0dmFyIGluZGV4ID0gMDtcclxuXHRcdHZhciBjdXJyZW50U3RlcElkO1xyXG5cclxuXHRcdC8v6K6+572u5oSP6KeB77yM5oSP6KeB5Y+q5re75Yqg5Yiw5pyA5ZCO5LiA5p2hYXBwcm92ZeS4rVxyXG5cdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0aWYgKG15QXBwcm92ZSAmJiB0Ll9pZCA9PT0gbXlBcHByb3ZlLnRyYWNlKSB7XHJcblx0XHRcdFx0Y3VycmVudFN0ZXBJZCA9IHQuc3RlcDtcclxuXHRcdFx0XHRteVRyYWNlID0gdDtcclxuXHRcdFx0XHRpZiAodC5hcHByb3Zlcykge1xyXG5cdFx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGEuX2lkID09PSBteUFwcHJvdmUuX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0aW5kZXggPSBpZHg7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLmRlc2NyaXB0aW9uJ10gPSBkZXNjcmlwdGlvbjtcclxuXHJcblx0XHR2YXIgdXBkYXRlT2JqID0ge307XHJcblxyXG5cdFx0aWYgKGNjSGFzRWRpdFBlcm1pc3Npb24gJiYgbXlBcHByb3ZlICYmICFteVRyYWNlLmlzX2ZpbmlzaGVkKSB7XHJcblxyXG5cdFx0XHR2YXIga2V5X3N0ciA9ICd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLic7XHJcblxyXG5cdFx0XHR2YXIgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KTtcclxuXHJcblx0XHRcdHZhciBzdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBjdXJyZW50U3RlcElkKTtcclxuXHJcblx0XHRcdHZhciBwZXJtaXNzaW9uc192YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMobXlBcHByb3ZlLnZhbHVlcywgc3RlcC5wZXJtaXNzaW9ucywgaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcclxuXHJcblx0XHRcdHZhciBjaGFuZ2VfdmFsdWVzID0gYXBwcm92ZU1hbmFnZXIuZ2V0Q2hhbmdlVmFsdWVzKGluc3RhbmNlLnZhbHVlcywgcGVybWlzc2lvbnNfdmFsdWVzKTtcclxuXHJcblx0XHRcdHNldE9iai52YWx1ZXMgPSBfLmV4dGVuZCgoaW5zdGFuY2UudmFsdWVzIHx8IHt9KSwgcGVybWlzc2lvbnNfdmFsdWVzKTtcclxuXHJcblx0XHRcdGlmICghXy5pc0VtcHR5KGNoYW5nZV92YWx1ZXMpKSB7XHJcblx0XHRcdFx0dmFyIHB1c2hPYmogPSB7fTtcclxuXHRcdFx0XHRwdXNoT2JqW2tleV9zdHIgKyAndmFsdWVzX2hpc3RvcnknXSA9IHtcclxuXHRcdFx0XHRcdHZhbHVlczogY2hhbmdlX3ZhbHVlcyxcclxuXHRcdFx0XHRcdGNyZWF0ZTogbmV3IERhdGUoKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR1cGRhdGVPYmouJHB1c2ggPSBwdXNoT2JqO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZXRPYmoubmFtZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VOYW1lKGluc3RhbmNlKVxyXG5cdFx0fVxyXG5cclxuXHRcdHVwZGF0ZU9iai4kc2V0ID0gc2V0T2JqO1xyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc19pZCxcclxuXHRcdFx0J3RyYWNlcy5faWQnOiBteUFwcHJvdmUudHJhY2VcclxuXHRcdH0sIHVwZGF0ZU9iaik7XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG59KSIsIk1ldGVvci5tZXRob2RzKHtcclxuXHQvLyDmlLnkuLrpgJrov4dhcGnosIPnlKhcclxuXHRmb3J3YXJkX2luc3RhbmNlOiBmdW5jdGlvbiAoaW5zdGFuY2VfaWQsIHNwYWNlX2lkLCBmbG93X2lkLCBoYXNTYXZlSW5zdGFuY2VUb0F0dGFjaG1lbnQsIGRlc2NyaXB0aW9uLCBpc0ZvcndhcmRBdHRhY2htZW50cywgc2VsZWN0ZWRVc2VycywgYWN0aW9uX3R5cGUsIHJlbGF0ZWQsIGZyb21fYXBwcm92ZV9pZCkge1xyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignbm90LWF1dGhvcml6ZWQnKTtcclxuXHJcblx0XHRyZXR1cm47XHJcblx0fSxcclxuXHJcblxyXG5cdGZvcndhcmRfcmVtb3ZlOiBmdW5jdGlvbiAoaW5zdGFuY2VfaWQsIHRyYWNlX2lkLCBhcHByb3ZlX2lkKSB7XHJcblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKTtcclxuXHRcdGNoZWNrKHRyYWNlX2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soYXBwcm92ZV9pZCwgU3RyaW5nKTtcclxuXHJcblx0XHR2YXIgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpO1xyXG5cclxuXHRcdGlmICghaW5zKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3BhcmFtcyBlcnJvciEnLCAncmVjb3JkIG5vdCBleGlzdHMhJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRyYWNlID0gXy5maW5kKGlucy50cmFjZXMsIGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdHJldHVybiB0Ll9pZCA9PSB0cmFjZV9pZDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHZhciBhcHByb3ZlID0gXy5maW5kKHRyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYXBwcikge1xyXG5cdFx0XHRyZXR1cm4gYXBwci5faWQgPT0gYXBwcm92ZV9pZDtcclxuXHRcdH0pXHJcblxyXG5cdFx0dmFyIGhhc0FkbWluUGVybWlzc2lvbiA9IFdvcmtmbG93TWFuYWdlci5oYXNGbG93QWRtaW5QZXJtaXNzaW9uKGlucy5mbG93LCBpbnMuc3BhY2UsIHRoaXMudXNlcklkKVxyXG5cclxuXHRcdGlmICghYXBwcm92ZSB8fCAhWydmb3J3YXJkJywgJ2Rpc3RyaWJ1dGUnXS5pbmNsdWRlcyhhcHByb3ZlLnR5cGUpIHx8ICFhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpIHtcclxuXHRcdFx0aWYgKCFoYXNBZG1pblBlcm1pc3Npb24pIHtcclxuXHRcdFx0XHRpZiAoYXBwcm92ZS5mcm9tX3VzZXIgIT0gdGhpcy51c2VySWQpXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCAnaW5zdGFuY2VfZm9yd2FyZF9jYW5ub3RfY2FuY2VsJyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZm9yd2FyZF9pbnN0YW5jZV9pZCA9IGFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZTtcclxuXHRcdHZhciBmb3J3YXJkX2luc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoZm9yd2FyZF9pbnN0YW5jZV9pZCk7XHJcblx0XHRpZiAoZm9yd2FyZF9pbnN0YW5jZSkge1xyXG5cdFx0XHRpZiAoZm9yd2FyZF9pbnN0YW5jZS5zdGF0ZSAhPSBcImRyYWZ0XCIpIHtcclxuXHRcdFx0XHRpZiAoIWhhc0FkbWluUGVybWlzc2lvbilcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsICdpbnN0YW5jZV9mb3J3YXJkX2luc3RhbmNlX3N0YXRlX2NoYW5nZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgaW5ib3hfdXNlcnMgPSBmb3J3YXJkX2luc3RhbmNlLmluYm94X3VzZXJzIHx8IFtdO1xyXG5cclxuXHRcdFx0Zm9yd2FyZF9pbnN0YW5jZS5kZWxldGVkID0gbmV3IERhdGUoKTtcclxuXHRcdFx0Zm9yd2FyZF9pbnN0YW5jZS5kZWxldGVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHZhciBkZWxldGVkX2ZvcndhcmRfaW5zdGFuY2VfaWQgPSBkYi5kZWxldGVkX2luc3RhbmNlcy5pbnNlcnQoZm9yd2FyZF9pbnN0YW5jZSk7XHJcblx0XHRcdGlmIChkZWxldGVkX2ZvcndhcmRfaW5zdGFuY2VfaWQpIHtcclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMucmVtb3ZlKHtcclxuXHRcdFx0XHRcdF9pZDogZm9yd2FyZF9pbnN0YW5jZV9pZFxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvLyDliKDpmaTnlLPor7fljZXlkI7ph43mlrDorqHnrpdpbmJveF91c2Vyc+eahGJhZGdlXHJcblx0XHRcdFx0Xy5lYWNoKGluYm94X3VzZXJzLCBmdW5jdGlvbiAodV9pZCkge1xyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVfaWQpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgc2V0X29iaiA9IG5ldyBPYmplY3Q7XHJcblx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdHNldF9vYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRfLmVhY2godHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uIChhcHByLCBpZHgpIHtcclxuXHRcdFx0aWYgKGFwcHIuX2lkID09IGFwcHJvdmVfaWQpIHtcclxuXHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gJ3Rlcm1pbmF0ZWQnO1xyXG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xyXG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWU7XHJcblx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcucmVhZF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc3RhbmNlX2lkLFxyXG5cdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VfaWRcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0X29ialxyXG5cdFx0fSlcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHRjYW5jZWxEaXN0cmlidXRlOiBmdW5jdGlvbiAoaW5zdGFuY2VfaWQsIGFwcHJvdmVfaWRzKSB7XHJcblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soYXBwcm92ZV9pZHMsIEFycmF5KVxyXG5cclxuXHRcdHZhciBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZClcclxuXHJcblx0XHRpZiAoIWlucykge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdwYXJhbXMgZXJyb3IhJywgJ3JlY29yZCBub3QgZXhpc3RzIScpXHJcblx0XHR9XHJcblxyXG5cdFx0dXNlcklkID0gdGhpcy51c2VySWRcclxuXHJcblx0XHR2YXIgaGFzQWRtaW5QZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgdXNlcklkKVxyXG5cclxuXHRcdF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRpZiAodC5hcHByb3Zlcykge1xyXG5cdFx0XHRcdHZhciBleGlzdHMgPSBmYWxzZVxyXG5cdFx0XHRcdHZhciBzZXRfb2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbiAoYSwgaWR4KSB7XHJcblx0XHRcdFx0XHRpZiAoYXBwcm92ZV9pZHMuaW5jbHVkZXMoYS5faWQpICYmIChhLmZyb21fdXNlciA9PSB1c2VySWQgfHwgaGFzQWRtaW5QZXJtaXNzaW9uKSAmJiAnZGlzdHJpYnV0ZScgPT0gYS50eXBlICYmIGEuZm9yd2FyZF9pbnN0YW5jZSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZm9yd2FyZF9pbnN0YW5jZV9pZCA9IGEuZm9yd2FyZF9pbnN0YW5jZVxyXG5cdFx0XHRcdFx0XHR2YXIgZm9yd2FyZF9pbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGZvcndhcmRfaW5zdGFuY2VfaWQpXHJcblx0XHRcdFx0XHRcdGlmIChmb3J3YXJkX2luc3RhbmNlKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGZvcndhcmRfaW5zdGFuY2Uuc3RhdGUgIT0gXCJkcmFmdFwiKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dmFyIGluYm94X3VzZXJzID0gZm9yd2FyZF9pbnN0YW5jZS5pbmJveF91c2VycyB8fCBbXVxyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3J3YXJkX2luc3RhbmNlLmRlbGV0ZWQgPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0XHRcdFx0Zm9yd2FyZF9pbnN0YW5jZS5kZWxldGVkX2J5ID0gdXNlcklkXHJcblx0XHRcdFx0XHRcdFx0dmFyIGRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCA9IGRiLmRlbGV0ZWRfaW5zdGFuY2VzLmluc2VydChmb3J3YXJkX2luc3RhbmNlKVxyXG5cdFx0XHRcdFx0XHRcdGlmIChkZWxldGVkX2ZvcndhcmRfaW5zdGFuY2VfaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGRiLmluc3RhbmNlcy5yZW1vdmUoe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRfaWQ6IGZvcndhcmRfaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8g5Yig6Zmk55Sz6K+35Y2V5ZCO6YeN5paw6K6h566XaW5ib3hfdXNlcnPnmoRiYWRnZVxyXG5cdFx0XHRcdFx0XHRcdFx0Xy5lYWNoKGluYm94X3VzZXJzLCBmdW5jdGlvbiAodV9pZCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdV9pZClcclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gJ3Rlcm1pbmF0ZWQnXHJcblx0XHRcdFx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5maW5pc2hfZGF0ZSddID0gbmV3IERhdGUoKVxyXG5cdFx0XHRcdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKClcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0ZXhpc3RzID0gdHJ1ZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdGlmICghZXhpc3RzKVxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRcdHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0c2V0X29iai5tb2RpZmllZF9ieSA9IHVzZXJJZFxyXG5cclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRcdF9pZDogaW5zdGFuY2VfaWQsXHJcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdC5faWRcclxuXHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHQkc2V0OiBzZXRfb2JqXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cdH1cclxuXHJcblxyXG59KSIsIk1ldGVvci5tZXRob2RzKHtcclxuICAgIGNmc19pbnN0YW5jZXNfcmVtb3ZlOiBmdW5jdGlvbiAoZmlsZV9pZCkge1xyXG4gICAgICAgIGNoZWNrKGZpbGVfaWQsIFN0cmluZyk7XHJcbiAgICAgICAgY2ZzLmluc3RhbmNlcy5yZW1vdmUoZmlsZV9pZCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIGNmc19pbnN0YW5jZXNfc2V0X2N1cnJlbnQ6IGZ1bmN0aW9uIChmaWxlX2lkKSB7XHJcbiAgICAgICAgY2hlY2soZmlsZV9pZCwgU3RyaW5nKTtcclxuICAgICAgICBjZnMuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIF9pZDogZmlsZV9pZFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgJHNldDoge1xyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgY2ZzX2luc3RhbmNlc19sb2NrOiBmdW5jdGlvbiAoZmlsZV9pZCwgdXNlcl9pZCwgdXNlcl9uYW1lKSB7XHJcbiAgICAgICAgY2ZzLmluc3RhbmNlcy51cGRhdGUoe1xyXG4gICAgICAgICAgICBfaWQ6IGZpbGVfaWRcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICRzZXQ6IHtcclxuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfYnknOiB1c2VyX2lkLFxyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF9ieV9uYW1lJzogdXNlcl9uYW1lLFxyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF90aW1lJzogbmV3IERhdGUoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIGNmc19pbnN0YW5jZXNfdW5sb2NrOiBmdW5jdGlvbiAoZmlsZV9pZCkge1xyXG4gICAgICAgIGNmcy5pbnN0YW5jZXMudXBkYXRlKHtcclxuICAgICAgICAgICAgX2lkOiBmaWxlX2lkXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAkdW5zZXQ6IHtcclxuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfYnknOiAnJyxcclxuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfYnlfbmFtZSc6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF90aW1lJzogJydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICBkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrOiBmdW5jdGlvbiAoc3BhY2VJZCwgY2ZzUmVjb3JkSWRzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVzZXJJZClcclxuICAgICAgICAgICAgcmV0dXJuIFwi5LiN56ym5ZCI5omn6KGM5p2h5Lu2XCJcclxuXHJcbiAgICAgICAgaWYgKE1ldGVvci51c2Vycy5maW5kKHtcclxuICAgICAgICAgICAgICAgIF9pZDogdGhpcy51c2VySWQsXHJcbiAgICAgICAgICAgICAgICBpc19jbG91ZGFkbWluOiB0cnVlXHJcbiAgICAgICAgICAgIH0pLmNvdW50KCkgPCAxKVxyXG4gICAgICAgICAgICByZXR1cm4gXCLkuI3nrKblkIjmiafooYzmnaHku7ZcIlxyXG5cclxuICAgICAgICBjaGVjayhzcGFjZUlkLCBTdHJpbmcpO1xyXG5cclxuICAgICAgICB2YXIgc3RvcmUgPSBcImluc3RhbmNlc1wiO1xyXG4gICAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbiAgICAgICAgdmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbiAgICAgICAgdmFyIG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpO1xyXG4gICAgICAgIHZhciBwYXRobmFtZSA9IHBhdGguam9pbihfX21ldGVvcl9ib290c3RyYXBfXy5zZXJ2ZXJEaXIsICcuLi8uLi8uLi9jZnMvc3BhY2VJbnN0YW5jZUF0dGFjaG1lbnRzJyk7XHJcbiAgICAgICAgLy8gU2V0IGFic29sdXRlIHBhdGhcclxuICAgICAgICB2YXIgYWJzb2x1dGVQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGhuYW1lKTtcclxuICAgICAgICAvLyBFbnN1cmUgdGhlIHBhdGggZXhpc3RzXHJcbiAgICAgICAgbWtkaXJwLnN5bmMoYWJzb2x1dGVQYXRoKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnYWJzb2x1dGVQYXRoOiAnLCBhYnNvbHV0ZVBhdGgpO1xyXG4gICAgICAgIGNvbnNvbGUudGltZSgnZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzaycpO1xyXG4gICAgICAgIHZhciBxdWVyeSA9IHtcclxuICAgICAgICAgICAgJ21ldGFkYXRhLnNwYWNlJzogc3BhY2VJZFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2ZzUmVjb3JkSWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5Ll9pZCA9IHtcclxuICAgICAgICAgICAgICAgICRpbjogY2ZzUmVjb3JkSWRzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkb3dubG9hZEZhaWxlZFJlY29yZElkcyA9IFtdO1xyXG4gICAgICAgIGNmcy5pbnN0YW5jZXMuZmluZChxdWVyeSkuZm9yRWFjaChmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gc3RvcmUgKyAnLScgKyBjLl9pZCArICctJyArIGMubmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVQYXRoID0gcGF0aC5qb2luKGFic29sdXRlUGF0aCwgZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgTWV0ZW9yLndyYXBBc3luYyhmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3JpdGVyID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiBfLmlzRnVuY3Rpb24oY2FsbGJhY2spKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IGMuY3JlYXRlUmVhZFN0cmVhbShzdG9yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkRmFpbGVkUmVjb3JkSWRzLnB1c2goYy5faWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzazogJywgYy5faWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5waXBlKHdyaXRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzazogJywgYy5faWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pKClcclxuXHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrOiAnLCBjLl9pZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb3dubG9hZEZhaWxlZFJlY29yZElkczogJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS50aW1lRW5kKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBkb3dubG9hZEZhaWxlZFJlY29yZElkcztcclxuICAgIH1cclxufSkiLCJNZXRlb3IubWV0aG9kc1xyXG5cdHNldF9hcHByb3ZlX2hhdmVfcmVhZDogKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCkgLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRzZWxmID0gdGhpc1xyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlSWQsIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkIH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXHJcblxyXG5cdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxyXG5cdFx0XHR0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXVxyXG5cdFx0XHRzZXRPYmogPSB7XHJcblx0XHRcdFx0bW9kaWZpZWQ6IG5ldyBEYXRlLFxyXG5cdFx0XHRcdG1vZGlmaWVkX2J5OiBzZWxmLnVzZXJJZFxyXG5cdFx0XHR9XHJcblx0XHRcdHRyYWNlLmFwcHJvdmVzLmZvckVhY2ggKGFwcHJvdmUsIGlkeCkgLT5cclxuXHRcdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBhcHByb3ZlSWQgJiYgIWFwcHJvdmUuaXNfcmVhZFxyXG5cdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LmlzX3JlYWRcIl0gPSB0cnVlXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0aWYgbm90IF8uaXNFbXB0eShzZXRPYmopXHJcblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VJZFxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdGNoYW5nZV9hcHByb3ZlX2luZm86IChpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIGRlc2NyaXB0aW9uLCBmaW5pc2hfZGF0ZSkgLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdGNoZWNrKGluc3RhbmNlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKHRyYWNlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKGFwcHJvdmVJZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soZGVzY3JpcHRpb24sIFN0cmluZylcclxuXHRcdGNoZWNrKGZpbmlzaF9kYXRlLCBEYXRlKVxyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlSWQsIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkIH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXHJcblxyXG5cdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxyXG5cdFx0XHR0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXVxyXG5cdFx0XHRzZXRPYmogPSB7fVxyXG5cdFx0XHR0cmFjZS5hcHByb3Zlcy5mb3JFYWNoIChhcHByb3ZlLCBpZHgpIC0+XHJcblx0XHRcdFx0aWYgYXBwcm92ZS5faWQgPT0gYXBwcm92ZUlkXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvblxyXG5cdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LmZpbmlzaF9kYXRlXCJdID0gZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5jb3N0X3RpbWVcIl0gPSBuZXcgRGF0ZSgpIC0gYXBwcm92ZS5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0aWYgbm90IF8uaXNFbXB0eShzZXRPYmopXHJcblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VJZFxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdHVwZGF0ZV9hcHByb3ZlX3NpZ246IChpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIHNpZ25fZmllbGRfY29kZSwgZGVzY3JpcHRpb24sIHNpZ25fdHlwZSwgbGFzdFNpZ25BcHByb3ZlKS0+XHJcblx0XHRjaGVjayhpbnN0YW5jZUlkLCBTdHJpbmcpXHJcblx0XHRjaGVjayh0cmFjZUlkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhhcHByb3ZlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKHNpZ25fZmllbGRfY29kZSwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soZGVzY3JpcHRpb24sIFN0cmluZylcclxuXHJcblx0XHRpZiAhdGhpcy51c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0c2Vzc2lvbl91c2VySWQgPSB0aGlzLnVzZXJJZFxyXG5cclxuXHRcdGlmIGxhc3RTaWduQXBwcm92ZVxyXG5cclxuXHRcdFx0aWYgbGFzdFNpZ25BcHByb3ZlLmN1c3RvbV9zaWduX3Nob3dcclxuXHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcclxuXHRcdFx0XHRcInRyYWNlcy5faWRcIjogbGFzdFNpZ25BcHByb3ZlLnRyYWNlXHJcblx0XHRcdH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXHJcblxyXG5cdFx0XHRsYXN0VHJhY2UgPSBfLmZpbmQgaW5zdGFuY2U/LnRyYWNlcywgKHQpIC0+XHJcblx0XHRcdFx0cmV0dXJuIHQuX2lkID0gbGFzdFNpZ25BcHByb3ZlLnRyYWNlXHJcblxyXG5cdFx0XHRpZiBsYXN0VHJhY2VcclxuXHRcdFx0XHRzZXRPYmogPSB7fVxyXG5cdFx0XHRcdGxhc3RUcmFjZT8uYXBwcm92ZXMuZm9yRWFjaCAoYSwgaWR4KSAtPlxyXG5cdFx0XHRcdFx0aWYgYS5faWQgPT0gbGFzdFNpZ25BcHByb3ZlLl9pZFxyXG5cdFx0XHRcdFx0XHRpZiBzaWduX3R5cGUgPT0gXCJ1cGRhdGVcIlxyXG5cdFx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5zaWduX3Nob3dcIl0gPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZFwiXSA9IG5ldyBEYXRlKClcclxuXHRcdFx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ubW9kaWZpZWRfYnlcIl0gPSBzZXNzaW9uX3VzZXJJZFxyXG5cclxuXHRcdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcclxuXHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiBsYXN0VHJhY2UuX2lkXHJcblx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0XHRcdFx0fSlcclxuXHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHsgX2lkOiBpbnN0YW5jZUlkLCBcInRyYWNlcy5faWRcIjogdHJhY2VJZCB9LCB7IGZpZWxkczogeyBcInRyYWNlcy4kXCI6IDEgfSB9KVxyXG5cclxuXHRcdGlmIGluc3RhbmNlPy50cmFjZXM/Lmxlbmd0aCA+IDBcclxuXHJcblx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXHJcblx0XHRcdHVwT2JqID0ge31cclxuXHRcdFx0dHJhY2UuYXBwcm92ZXMuZm9yRWFjaCAoYXBwcm92ZSwgaWR4KSAtPlxyXG5cdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IGFwcHJvdmVJZFxyXG5cdFx0XHRcdFx0aWYgc2lnbl9maWVsZF9jb2RlXHJcblx0XHRcdFx0XHRcdHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LnNpZ25fZmllbGRfY29kZVwiXSA9IHNpZ25fZmllbGRfY29kZVxyXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvblxyXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uc2lnbl9zaG93XCJdID0gdHJ1ZVxyXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ubW9kaWZpZWRcIl0gPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZF9ieVwiXSA9IHNlc3Npb25fdXNlcklkXHJcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXHJcblxyXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KHVwT2JqKVxyXG5cdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0X2lkOiBpbnN0YW5jZUlkLFxyXG5cdFx0XHRcdFx0XCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcclxuXHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHQkc2V0OiB1cE9ialxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cclxuXHR1cGRhdGVfc2lnbl9zaG93OiAob2JqcywgbXlBcHByb3ZlX2lkKSAtPlxyXG5cdFx0b2Jqcy5mb3JFYWNoIChvYmosIGluZGV4KSAtPlxyXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHsgX2lkOiBvYmouaW5zdGFuY2UsIFwidHJhY2VzLl9pZFwiOiBvYmoudHJhY2UgfSwgeyBmaWVsZHM6IHsgXCJ0cmFjZXMuJFwiOiAxIH0gfSlcclxuXHRcdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXHJcblx0XHRcdFx0c2V0T2JqID0ge31cclxuXHRcdFx0XHR0cmFjZS5hcHByb3Zlcy5mb3JFYWNoIChhcHByb3ZlLCBpZHgpIC0+XHJcblx0XHRcdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBvYmouX2lkXHJcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5zaWduX3Nob3dcIl0gPSBvYmouc2lnbl9zaG93XHJcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5jdXN0b21fc2lnbl9zaG93XCJdID0gb2JqLnNpZ25fc2hvd1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IG15QXBwcm92ZV9pZFxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcclxuXHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRfaWQ6IG9iai5pbnN0YW5jZSxcclxuXHRcdFx0XHRcdFx0XCJ0cmFjZXMuX2lkXCI6IG9iai50cmFjZVxyXG5cdFx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0cmV0dXJuIHRydWVcclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBzZXRfYXBwcm92ZV9oYXZlX3JlYWQ6IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCkge1xuICAgIHZhciBpbnN0YW5jZSwgcmVmLCBzZWxmLCBzZXRPYmosIHRyYWNlO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZiA9IHRoaXM7XG4gICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy4kXCI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoKGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICB0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXTtcbiAgICAgIHNldE9iaiA9IHtcbiAgICAgICAgbW9kaWZpZWQ6IG5ldyBEYXRlLFxuICAgICAgICBtb2RpZmllZF9ieTogc2VsZi51c2VySWRcbiAgICAgIH07XG4gICAgICB0cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUsIGlkeCkge1xuICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IGFwcHJvdmVJZCAmJiAhYXBwcm92ZS5pc19yZWFkKSB7XG4gICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5pc19yZWFkXCJdID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghXy5pc0VtcHR5KHNldE9iaikpIHtcbiAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIGNoYW5nZV9hcHByb3ZlX2luZm86IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgZGVzY3JpcHRpb24sIGZpbmlzaF9kYXRlKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHNldE9iaiwgdHJhY2U7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGVjayhpbnN0YW5jZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHRyYWNlSWQsIFN0cmluZyk7XG4gICAgY2hlY2soYXBwcm92ZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGRlc2NyaXB0aW9uLCBTdHJpbmcpO1xuICAgIGNoZWNrKGZpbmlzaF9kYXRlLCBEYXRlKTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLiRcIjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgoaW5zdGFuY2UgIT0gbnVsbCA/IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdO1xuICAgICAgc2V0T2JqID0ge307XG4gICAgICB0cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUsIGlkeCkge1xuICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IGFwcHJvdmVJZCkge1xuICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmZpbmlzaF9kYXRlXCJdID0gZmluaXNoX2RhdGU7XG4gICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5jb3N0X3RpbWVcIl0gPSBuZXcgRGF0ZSgpIC0gYXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgICAgIHJldHVybiBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFfLmlzRW1wdHkoc2V0T2JqKSkge1xuICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlX2FwcHJvdmVfc2lnbjogZnVuY3Rpb24oaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCBzaWduX2ZpZWxkX2NvZGUsIGRlc2NyaXB0aW9uLCBzaWduX3R5cGUsIGxhc3RTaWduQXBwcm92ZSkge1xuICAgIHZhciBpbnN0YW5jZSwgbGFzdFRyYWNlLCByZWYsIHNlc3Npb25fdXNlcklkLCBzZXRPYmosIHRyYWNlLCB1cE9iajtcbiAgICBjaGVjayhpbnN0YW5jZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHRyYWNlSWQsIFN0cmluZyk7XG4gICAgY2hlY2soYXBwcm92ZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHNpZ25fZmllbGRfY29kZSwgU3RyaW5nKTtcbiAgICBjaGVjayhkZXNjcmlwdGlvbiwgU3RyaW5nKTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlc3Npb25fdXNlcklkID0gdGhpcy51c2VySWQ7XG4gICAgaWYgKGxhc3RTaWduQXBwcm92ZSkge1xuICAgICAgaWYgKGxhc3RTaWduQXBwcm92ZS5jdXN0b21fc2lnbl9zaG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICAgIFwidHJhY2VzLl9pZFwiOiBsYXN0U2lnbkFwcHJvdmUudHJhY2VcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgXCJ0cmFjZXMuJFwiOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGFzdFRyYWNlID0gXy5maW5kKGluc3RhbmNlICE9IG51bGwgPyBpbnN0YW5jZS50cmFjZXMgOiB2b2lkIDAsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuX2lkID0gbGFzdFNpZ25BcHByb3ZlLnRyYWNlO1xuICAgICAgfSk7XG4gICAgICBpZiAobGFzdFRyYWNlKSB7XG4gICAgICAgIHNldE9iaiA9IHt9O1xuICAgICAgICBpZiAobGFzdFRyYWNlICE9IG51bGwpIHtcbiAgICAgICAgICBsYXN0VHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbihhLCBpZHgpIHtcbiAgICAgICAgICAgIGlmIChhLl9pZCA9PT0gbGFzdFNpZ25BcHByb3ZlLl9pZCkge1xuICAgICAgICAgICAgICBpZiAoc2lnbl90eXBlID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5zaWduX3Nob3dcIl0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLm1vZGlmaWVkXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5tb2RpZmllZF9ieVwiXSA9IHNlc3Npb25fdXNlcklkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzRW1wdHkoc2V0T2JqKSkge1xuICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IGxhc3RUcmFjZS5faWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLiRcIjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgoaW5zdGFuY2UgIT0gbnVsbCA/IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdO1xuICAgICAgdXBPYmogPSB7fTtcbiAgICAgIHRyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSwgaWR4KSB7XG4gICAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgaWYgKHNpZ25fZmllbGRfY29kZSkge1xuICAgICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnNpZ25fZmllbGRfY29kZVwiXSA9IHNpZ25fZmllbGRfY29kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmRlc2NyaXB0aW9uXCJdID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnNpZ25fc2hvd1wiXSA9IHRydWU7XG4gICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLm1vZGlmaWVkXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgICB1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIubW9kaWZpZWRfYnlcIl0gPSBzZXNzaW9uX3VzZXJJZDtcbiAgICAgICAgICByZXR1cm4gdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFfLmlzRW1wdHkodXBPYmopKSB7XG4gICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogdXBPYmpcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZV9zaWduX3Nob3c6IGZ1bmN0aW9uKG9ianMsIG15QXBwcm92ZV9pZCkge1xuICAgIG9ianMuZm9yRWFjaChmdW5jdGlvbihvYmosIGluZGV4KSB7XG4gICAgICB2YXIgaW5zdGFuY2UsIHJlZiwgc2V0T2JqLCB0cmFjZTtcbiAgICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IG9iai5pbnN0YW5jZSxcbiAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IG9iai50cmFjZVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBcInRyYWNlcy4kXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoKGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgIHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdO1xuICAgICAgICBzZXRPYmogPSB7fTtcbiAgICAgICAgdHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlLCBpZHgpIHtcbiAgICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IG9iai5faWQpIHtcbiAgICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuc2lnbl9zaG93XCJdID0gb2JqLnNpZ25fc2hvdztcbiAgICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuY3VzdG9tX3NpZ25fc2hvd1wiXSA9IG9iai5zaWduX3Nob3c7XG4gICAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gbXlBcHByb3ZlX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghXy5pc0VtcHR5KHNldE9iaikpIHtcbiAgICAgICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgICBfaWQ6IG9iai5pbnN0YW5jZSxcbiAgICAgICAgICAgIFwidHJhY2VzLl9pZFwiOiBvYmoudHJhY2VcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0aW5zdGFuY2VfcmV0dXJuOiAoYXBwcm92ZSwgcmVhc29uKS0+XHJcblx0XHRjaGVjayhhcHByb3ZlLCBPYmplY3QpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gdGhpcy51c2VySWRcclxuXHRcdGluc3RhbmNlX2lkID0gYXBwcm92ZS5pbnN0YW5jZVxyXG5cclxuXHRcdGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRzcGFjZV9pZCA9IGlucy5zcGFjZVxyXG5cclxuXHRcdCMgLSDlvoXlrqHmoLjnrrFcclxuXHRcdGlmIGlucy5zdGF0ZSBpc250IFwicGVuZGluZ1wiIG9yICFpbnMuaW5ib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxyXG5cclxuXHRcdCMgLSDmlofku7bkuI3mmK/kvKDpmIVcclxuXHRcdGlmIGFwcHJvdmUudHlwZSBpcyBcImNjXCIgYW5kIGlucy5jY191c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXHJcblxyXG5cdFx0IyAtIOetvuaguOWOhueoi+S4reW9k+WJjeatpemqpOS4iuS4gOatpemqpOS4jeaYr+S8muetvlxyXG5cdFx0aWYgaW5zLnRyYWNlcy5sZW5ndGggPCAyXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXHJcblx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGlucy5mbG93KVxyXG5cdFx0cHJlX3RyYWNlID0gaW5zLnRyYWNlc1tpbnMudHJhY2VzLmxlbmd0aCAtIDJdXHJcblx0XHRwcmVfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIHByZV90cmFjZS5zdGVwKVxyXG5cdFx0aWYgcHJlX3N0ZXAuc3RlcF90eXBlIGlzIFwiY291bnRlclNpZ25cIlxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxyXG5cclxuXHRcdCMgLSDlvZPliY3mraXpqqTkuLrloavlhpnmiJbogIXlrqHmiblcclxuXHRcdGxhc3RfdHJhY2UgPSBfLmxhc3QoaW5zLnRyYWNlcylcclxuXHRcdGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIGxhc3RfdHJhY2Uuc3RlcClcclxuXHRcdGlmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXNudCBcInN1Ym1pdFwiIGFuZCBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzbnQgXCJzaWduXCIgYW5kIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXNudCBcImNvdW50ZXJTaWduXCJcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIilcclxuXHJcblx0XHQjIC0g5Y+C5pWwYXBwcm92ZeS4rXRyYWNl5LiO5b2T5YmN6I635Y+W55qEdHJhY2XmmK/lkKbljLnphY1cclxuXHRcdGlmIGFwcHJvdmUudHJhY2UgaXNudCBsYXN0X3RyYWNlLl9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxyXG5cclxuXHRcdG5ld19pbmJveF91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoIHByZV90cmFjZS5hcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0aWYgKCFhLnR5cGUgb3IgYS50eXBlIGlzIFwiZHJhZnRcIiBvciBhLnR5cGUgaXMgXCJyZWFzc2lnblwiKSBhbmQgKCFhLmp1ZGdlIG9yIGEuanVkZ2UgaXMgXCJzdWJtaXR0ZWRcIiBvciBhLmp1ZGdlIGlzIFwiYXBwcm92ZWRcIiBvciBhLmp1ZGdlIGlzIFwicmVqZWN0ZWRcIilcclxuXHRcdFx0XHRuZXdfaW5ib3hfdXNlcnMucHVzaChhLnVzZXIpXHJcblxyXG5cdFx0aWYgXy5pc0VtcHR5KG5ld19pbmJveF91c2VycylcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrmib7liLDkuIvkuIDmraXlpITnkIbkurrvvIzpgIDlm57lpLHotKVcIilcclxuXHJcblx0XHR0cmFjZXMgPSBpbnMudHJhY2VzXHJcblxyXG5cdFx0YXBwcm92ZV92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMoYXBwcm92ZS52YWx1ZXMgfHwge30sIGN1cnJlbnRfc3RlcC5wZXJtaXNzaW9ucywgaW5zLmZvcm0sIGlucy5mb3JtX3ZlcnNpb24pXHJcblxyXG5cdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdHJlc3RfY291bnRlcl91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoIHRyYWNlcywgKHQpLT5cclxuXHRcdFx0aWYgdC5faWQgaXMgbGFzdF90cmFjZS5faWRcclxuXHRcdFx0XHRpZiBub3QgdC5hcHByb3Zlc1xyXG5cdFx0XHRcdFx0dC5hcHByb3ZlcyA9IG5ldyBBcnJheVxyXG5cdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYSwgaWR4KS0+XHJcblx0XHRcdFx0XHRpZiAoIWEudHlwZSBvciBhLnR5cGUgaXMgXCJyZWFzc2lnblwiKSBhbmQgKCFhLmp1ZGdlIG9yIGEuanVkZ2UgaXMgXCJzdWJtaXR0ZWRcIiBvciBhLmp1ZGdlIGlzIFwiYXBwcm92ZWRcIiBvciBhLmp1ZGdlIGlzIFwicmVqZWN0ZWRcIiBvciBhLmp1ZGdlIGlzIFwicmVhZGVkXCIpIGFuZCBhLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBub3dcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2Vycm9yJ10gPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWVcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19maW5pc2hlZCddID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmNvc3RfdGltZSddID0gbm93IC0gYS5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcudmFsdWVzJ10gPSBhcHByb3ZlX3ZhbHVlc1xyXG5cdFx0XHRcdFx0XHRpZiBhLmhhbmRsZXIgaXMgY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gXCJyZXR1cm5lZFwiXHJcblx0XHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5kZXNjcmlwdGlvbiddID0gcmVhc29uXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRyZXN0X2NvdW50ZXJfdXNlcnMucHVzaCBhLmhhbmRsZXJcclxuXHJcblx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZeiusOW9lVxyXG5cdFx0XHRcdHNldE9ialsndHJhY2VzLiQuaXNfZmluaXNoZWQnXSA9IHRydWVcclxuXHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmZpbmlzaF9kYXRlJ10gPSB0cnVlXHJcblx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5qdWRnZSddID0gXCJyZXR1cm5lZFwiXHJcblxyXG5cdFx0aW5zLnZhbHVlcyA9IF8uZXh0ZW5kKChpbnMudmFsdWVzIHx8IHt9KSwgYXBwcm92ZV92YWx1ZXMpXHJcblxyXG5cdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZeiusOW9lVxyXG5cdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdXHJcblx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRuZXdUcmFjZS5zdGVwID0gcHJlX3RyYWNlLnN0ZXBcclxuXHRcdG5ld1RyYWNlLm5hbWUgPSBwcmVfdHJhY2UubmFtZVxyXG5cdFx0bmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0bmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUocHJlX3N0ZXAudGltZW91dF9ob3Vycywgc3BhY2VfaWQpXHJcblx0XHRuZXdUcmFjZS5hcHByb3ZlcyA9IFtdXHJcblx0XHRfLmVhY2ggbmV3X2luYm94X3VzZXJzLCAobmV4dF9zdGVwX3VzZXJfaWQsIGlkeCktPlxyXG5cdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0bmV3QXBwcm92ZSA9IG5ldyBPYmplY3RcclxuXHRcdFx0bmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRuZXdBcHByb3ZlLnRyYWNlID0gbmV3VHJhY2UuX2lkXHJcblx0XHRcdG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZVxyXG5cdFx0XHRuZXdBcHByb3ZlLnVzZXIgPSBuZXh0X3N0ZXBfdXNlcl9pZFxyXG5cclxuXHRcdFx0dXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwge2ZpZWxkczoge25hbWU6IDF9fSlcclxuXHRcdFx0bmV3QXBwcm92ZS51c2VyX25hbWUgPSB1c2VyX2luZm8ubmFtZVxyXG5cclxuXHRcdFx0aGFuZGxlcl9pZCA9IG5leHRfc3RlcF91c2VyX2lkXHJcblx0XHRcdGhhbmRsZXJfaW5mbyA9IHVzZXJfaW5mb1xyXG5cdFx0XHRhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIG5leHRfc3RlcF91c2VyX2lkKVxyXG5cdFx0XHRpZiBhZ2VudFxyXG5cdFx0XHRcdG5ld19pbmJveF91c2Vyc1tpZHhdID0gYWdlbnRcclxuXHRcdFx0XHRoYW5kbGVyX2lkID0gYWdlbnRcclxuXHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiBhZ2VudCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmFnZW50ID0gYWdlbnRcclxuXHJcblx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlciA9IGhhbmRsZXJfaWRcclxuXHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZVxyXG5cclxuXHRcdFx0bmV4dF9zdGVwX3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgaGFuZGxlcl9pZClcclxuXHRcdFx0IyDojrflj5ZuZXh0X3N0ZXBfdXNlcuaJgOWcqOeahOmDqOmXqOS/oeaBr1xyXG5cdFx0XHRuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhuZXh0X3N0ZXBfc3BhY2VfdXNlcilcclxuXHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdXHJcblx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl1cclxuXHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblxyXG5cdFx0XHRuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0bmV3QXBwcm92ZS5pc19yZWFkID0gZmFsc2VcclxuXHRcdFx0bmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zLnZhbHVlcywgbmV3QXBwcm92ZSlcclxuXHRcdFx0bmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKVxyXG5cclxuXHRcdHNldE9iai5pbmJveF91c2VycyA9IG5ld19pbmJveF91c2Vyc1xyXG5cdFx0c2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCJcclxuXHJcblx0XHRpbnMub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKVxyXG5cdFx0c2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnMub3V0Ym94X3VzZXJzKVxyXG5cdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XHJcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHRcdHNldE9iai52YWx1ZXMgPSBpbnMudmFsdWVzXHJcblxyXG5cdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gcHJlX3RyYWNlLm5hbWVcclxuXHJcblx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZCwgJ3RyYWNlcy5faWQnOiBsYXN0X3RyYWNlLl9pZH0sIHskc2V0OiBzZXRPYmp9KVxyXG5cdFx0YiA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHB1c2g6IHt0cmFjZXM6IG5ld1RyYWNlfX0pXHJcblx0XHRpZiByICYmIGJcclxuXHRcdFx0IyDmlrBpbmJveF91c2VycyDlkowg5b2T5YmN55So5oi3IOWPkemAgXB1c2hcclxuXHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxyXG5cdFx0XHRwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcInJldHVybl9wZW5kaW5nX2luYm94XCIsIGluc3RhbmNlLCByZWFzb24sIGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cdFx0XHQjIOWmguaenOaYr+S8muetvuWImee7meS8muetvuacquaPkOS6pOeahOS6uuWPkemAgXB1c2hcclxuXHRcdFx0Xy5lYWNoIHJlc3RfY291bnRlcl91c2VycywgKHVzZXJfaWQpLT5cclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZClcclxuXHRcdHJldHVybiB0cnVlIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBpbnN0YW5jZV9yZXR1cm46IGZ1bmN0aW9uKGFwcHJvdmUsIHJlYXNvbikge1xuICAgIHZhciBhcHByb3ZlX3ZhbHVlcywgYiwgY3VycmVudF9zdGVwLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBmbG93LCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9pZCwgbGFzdF90cmFjZSwgbmV3VHJhY2UsIG5ld19pbmJveF91c2Vycywgbm93LCBwcmVfc3RlcCwgcHJlX3RyYWNlLCByLCByZXN0X2NvdW50ZXJfdXNlcnMsIHNldE9iaiwgc3BhY2VfaWQsIHRyYWNlcztcbiAgICBjaGVjayhhcHByb3ZlLCBPYmplY3QpO1xuICAgIGN1cnJlbnRfdXNlciA9IHRoaXMudXNlcklkO1xuICAgIGluc3RhbmNlX2lkID0gYXBwcm92ZS5pbnN0YW5jZTtcbiAgICBpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICBzcGFjZV9pZCA9IGlucy5zcGFjZTtcbiAgICBpZiAoaW5zLnN0YXRlICE9PSBcInBlbmRpbmdcIiB8fCAhaW5zLmluYm94X3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBpZiAoYXBwcm92ZS50eXBlID09PSBcImNjXCIgJiYgaW5zLmNjX3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBpZiAoaW5zLnRyYWNlcy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKTtcbiAgICB9XG4gICAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnMuZmxvdyk7XG4gICAgcHJlX3RyYWNlID0gaW5zLnRyYWNlc1tpbnMudHJhY2VzLmxlbmd0aCAtIDJdO1xuICAgIHByZV9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgcHJlX3RyYWNlLnN0ZXApO1xuICAgIGlmIChwcmVfc3RlcC5zdGVwX3R5cGUgPT09IFwiY291bnRlclNpZ25cIikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIik7XG4gICAgfVxuICAgIGxhc3RfdHJhY2UgPSBfLmxhc3QoaW5zLnRyYWNlcyk7XG4gICAgY3VycmVudF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgbGFzdF90cmFjZS5zdGVwKTtcbiAgICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSAhPT0gXCJzdWJtaXRcIiAmJiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlICE9PSBcInNpZ25cIiAmJiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlICE9PSBcImNvdW50ZXJTaWduXCIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBpZiAoYXBwcm92ZS50cmFjZSAhPT0gbGFzdF90cmFjZS5faWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBuZXdfaW5ib3hfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKHByZV90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgaWYgKCghYS50eXBlIHx8IGEudHlwZSA9PT0gXCJkcmFmdFwiIHx8IGEudHlwZSA9PT0gXCJyZWFzc2lnblwiKSAmJiAoIWEuanVkZ2UgfHwgYS5qdWRnZSA9PT0gXCJzdWJtaXR0ZWRcIiB8fCBhLmp1ZGdlID09PSBcImFwcHJvdmVkXCIgfHwgYS5qdWRnZSA9PT0gXCJyZWplY3RlZFwiKSkge1xuICAgICAgICByZXR1cm4gbmV3X2luYm94X3VzZXJzLnB1c2goYS51c2VyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoXy5pc0VtcHR5KG5ld19pbmJveF91c2VycykpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5om+5Yiw5LiL5LiA5q2l5aSE55CG5Lq677yM6YCA5Zue5aSx6LSlXCIpO1xuICAgIH1cbiAgICB0cmFjZXMgPSBpbnMudHJhY2VzO1xuICAgIGFwcHJvdmVfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRBcHByb3ZlVmFsdWVzKGFwcHJvdmUudmFsdWVzIHx8IHt9LCBjdXJyZW50X3N0ZXAucGVybWlzc2lvbnMsIGlucy5mb3JtLCBpbnMuZm9ybV92ZXJzaW9uKTtcbiAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgIHJlc3RfY291bnRlcl91c2VycyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2godHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICBpZiAodC5faWQgPT09IGxhc3RfdHJhY2UuX2lkKSB7XG4gICAgICAgIGlmICghdC5hcHByb3Zlcykge1xuICAgICAgICAgIHQuYXBwcm92ZXMgPSBuZXcgQXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGEsIGlkeCkge1xuICAgICAgICAgIGlmICgoIWEudHlwZSB8fCBhLnR5cGUgPT09IFwicmVhc3NpZ25cIikgJiYgKCFhLmp1ZGdlIHx8IGEuanVkZ2UgPT09IFwic3VibWl0dGVkXCIgfHwgYS5qdWRnZSA9PT0gXCJhcHByb3ZlZFwiIHx8IGEuanVkZ2UgPT09IFwicmVqZWN0ZWRcIiB8fCBhLmp1ZGdlID09PSBcInJlYWRlZFwiKSAmJiBhLmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBub3c7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLnJlYWRfZGF0ZSddID0gbm93O1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19lcnJvciddID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWU7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5jb3N0X3RpbWUnXSA9IG5vdyAtIGEuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcudmFsdWVzJ10gPSBhcHByb3ZlX3ZhbHVlcztcbiAgICAgICAgICAgIGlmIChhLmhhbmRsZXIgPT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSBcInJldHVybmVkXCI7XG4gICAgICAgICAgICAgIHJldHVybiBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmRlc2NyaXB0aW9uJ10gPSByZWFzb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdF9jb3VudGVyX3VzZXJzLnB1c2goYS5oYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xuICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmZpbmlzaF9kYXRlJ10gPSB0cnVlO1xuICAgICAgICByZXR1cm4gc2V0T2JqWyd0cmFjZXMuJC5qdWRnZSddID0gXCJyZXR1cm5lZFwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlucy52YWx1ZXMgPSBfLmV4dGVuZChpbnMudmFsdWVzIHx8IHt9LCBhcHByb3ZlX3ZhbHVlcyk7XG4gICAgbmV3VHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgIG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICBuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdO1xuICAgIG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgbmV3VHJhY2Uuc3RlcCA9IHByZV90cmFjZS5zdGVwO1xuICAgIG5ld1RyYWNlLm5hbWUgPSBwcmVfdHJhY2UubmFtZTtcbiAgICBuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93O1xuICAgIG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKHByZV9zdGVwLnRpbWVvdXRfaG91cnMsIHNwYWNlX2lkKTtcbiAgICBuZXdUcmFjZS5hcHByb3ZlcyA9IFtdO1xuICAgIF8uZWFjaChuZXdfaW5ib3hfdXNlcnMsIGZ1bmN0aW9uKG5leHRfc3RlcF91c2VyX2lkLCBpZHgpIHtcbiAgICAgIHZhciBhZ2VudCwgaGFuZGxlcl9pZCwgaGFuZGxlcl9pbmZvLCBuZXdBcHByb3ZlLCBuZXh0X3N0ZXBfc3BhY2VfdXNlciwgbmV4dF9zdGVwX3VzZXJfb3JnX2luZm8sIHVzZXJfaW5mbztcbiAgICAgIG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgICAgbmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgbmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgbmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZDtcbiAgICAgIG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUudXNlciA9IG5leHRfc3RlcF91c2VyX2lkO1xuICAgICAgdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbmV3QXBwcm92ZS51c2VyX25hbWUgPSB1c2VyX2luZm8ubmFtZTtcbiAgICAgIGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZDtcbiAgICAgIGhhbmRsZXJfaW5mbyA9IHVzZXJfaW5mbztcbiAgICAgIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpO1xuICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgIG5ld19pbmJveF91c2Vyc1tpZHhdID0gYWdlbnQ7XG4gICAgICAgIGhhbmRsZXJfaWQgPSBhZ2VudDtcbiAgICAgICAgaGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgX2lkOiBhZ2VudFxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50O1xuICAgICAgfVxuICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZDtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICBuZXh0X3N0ZXBfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBoYW5kbGVyX2lkKTtcbiAgICAgIG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKTtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl07XG4gICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICBuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgIHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnMudmFsdWVzLCBuZXdBcHByb3ZlKTtcbiAgICAgIHJldHVybiBuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpO1xuICAgIH0pO1xuICAgIHNldE9iai5pbmJveF91c2VycyA9IG5ld19pbmJveF91c2VycztcbiAgICBzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgICBpbnMub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICBzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGlucy5vdXRib3hfdXNlcnMpO1xuICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgc2V0T2JqLnZhbHVlcyA9IGlucy52YWx1ZXM7XG4gICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gcHJlX3RyYWNlLm5hbWU7XG4gICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZCxcbiAgICAgICd0cmFjZXMuX2lkJzogbGFzdF90cmFjZS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiBzZXRPYmpcbiAgICB9KTtcbiAgICBiID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgfSwge1xuICAgICAgJHB1c2g6IHtcbiAgICAgICAgdHJhY2VzOiBuZXdUcmFjZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChyICYmIGIpIHtcbiAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCBjdXJyZW50X3VzZXIpO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgICAgcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZXR1cm5fcGVuZGluZ19pbmJveFwiLCBpbnN0YW5jZSwgcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICBfLmVhY2gocmVzdF9jb3VudGVyX3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRpbnN0YW5jZV9yZW1pbmQ6IChyZW1pbmRfdXNlcnMsIHJlbWluZF9jb3VudCwgcmVtaW5kX2RlYWRsaW5lLCBpbnN0YW5jZV9pZCwgYWN0aW9uX3R5cGVzLCB0cmFjZV9pZCktPlxyXG5cdFx0Y2hlY2sgcmVtaW5kX3VzZXJzLCBBcnJheVxyXG5cdFx0Y2hlY2sgcmVtaW5kX2NvdW50LCBNYXRjaC5PbmVPZignc2luZ2xlJywgJ211bHRpJylcclxuXHRcdGNoZWNrIHJlbWluZF9kZWFkbGluZSwgRGF0ZVxyXG5cdFx0Y2hlY2sgaW5zdGFuY2VfaWQsIFN0cmluZ1xyXG5cdFx0Y2hlY2sgYWN0aW9uX3R5cGVzLCBBcnJheVxyXG5cdFx0Y2hlY2sgdHJhY2VfaWQsIFN0cmluZ1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkXHJcblx0XHRsYXN0X3JlbWluZF91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VfaWR9LCB7ZmllbGRzOiB7bmFtZTogMSwgdHJhY2VzOiAxLCB2YWx1ZXM6IDEsIHNwYWNlOiAxfX0pXHJcblx0XHRpZiBhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2FkbWluJylcclxuXHRcdFx0aWYgcmVtaW5kX2NvdW50IGlzICdzaW5nbGUnXHJcblx0XHRcdFx0Xy5lYWNoIGlucy50cmFjZXMsICh0KS0+XHJcblx0XHRcdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGFwKS0+XHJcblx0XHRcdFx0XHRcdGlmIHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSBhbmQgYXAuaXNfZmluaXNoZWQgaXNudCB0cnVlXHJcblx0XHRcdFx0XHRcdFx0bGFzdF9yZW1pbmRfdXNlcnMucHVzaCBhcC51c2VyXHJcblx0XHRcdGVsc2UgaWYgcmVtaW5kX2NvdW50IGlzICdtdWx0aSdcclxuXHRcdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0XHRcdHByaW9yaXR5ID0gaW5zLnZhbHVlcy5wcmlvcml0eVxyXG5cdFx0XHRcdF8uZWFjaCBpbnMudHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhcCktPlxyXG5cdFx0XHRcdFx0XHRpZiByZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgYW5kIGFwLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdGxhc3RfcmVtaW5kX3VzZXJzLnB1c2ggYXAudXNlclxyXG5cdFx0XHRcdFx0XHRcdGFwLm1hbnVhbF9kZWFkbGluZSA9IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdCMg77yIMe+8ieKAnOaZrumAmuKAne+8muWmguS4ieS4quW3peS9nOaXpeWGheacquWkhOeQhu+8jOezu+e7n+iHquWKqOWPkeefreS/oeaPkOmGku+8muWKnue7k+aXtumZkOS4uuS6jOaXpeWGhe+8m1xyXG5cdFx0XHRcdFx0XHRcdCMgIOWmguS6jOaXpeWQjuS7jeacquWkhOeQhu+8jOezu+e7n+avj+WkqeiHquWKqOWPkeefreS/oeaPkOmGku+8jOWKnue7k+aXtumZkOS4uuS4gOaXpeWGheOAglxyXG5cdFx0XHRcdFx0XHRcdGlmIHByaW9yaXR5IGlzIFwi5pmu6YCaXCIgb3Igbm90IHByaW9yaXR5XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdFx0XHQjIO+8iDLvvInigJzlip7mlofigJ3vvJrlpoLkuIDkuKrlt6XkvZzml6XlhoXmnKrlpITnkIbvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrooajljZXkuIrnmoTigJzlip7nu5Pml7bpmZDigJ3vvIjmlofkuablvZXlhaXnmoTml7bpl7TvvInvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDlpoLkuIDml6XlkI7ku43mnKrlpITnkIbvvIzns7vnu5/mr4/lpKnoh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuI3lj5jvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDot53nprvlip7nu5Pml7bpmZDkuLrljYrml6Xml7bvvIzliJnmr4/ljYrkuKrlt6XkvZzml6Xmj5DphpLlm5vmrKHvvJvotoXov4flip7nu5Pml7bpmZDlkI7ku43nhLbmjInnhafmr4/ljYrml6Xlm5vmrKHmj5DphpLjgIJcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi5Yqe5paHXCJcclxuXHRcdFx0XHRcdFx0XHRcdGlmIFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSAjIOi2hei/h+S6huWKnue7k+aXtumZkOaIluiAhei3neemu+WKnue7k+aXtumZkOWNiuaXpeWGhVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlID0gKGJhc2VfZGF0ZSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUobm93KVxyXG5cclxuXHRcdFx0XHRcdFx0XHQjIO+8iDPvvInigJzntKfmgKXigJ3vvJrlnKjlj5HpgIHnmoTlkIzml7bvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrooajljZXkuIrnmoTigJzlip7nu5Pml7bpmZDigJ3vvIjmlofkuablvZXlhaXnmoTml7bpl7TvvInvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDlpoLljYrml6XlhoXku43mnKrlpITnkIbvvIzns7vnu5/mr4/ljYrlpKnoh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuI3lj5jvvJvot53nprvlip7nu5Pml7bpmZDkuLrljYrml6Xml7bvvIzmr4/ljYrkuKrlt6XkvZzml6Xmj5DphpLlm5vmrKHvvJvotoXov4flip7nu5Pml7bpmZDlkI7ku43nhLbmjInnhafmr4/ljYrml6Xlm5vmrKHmj5DphpLjgIJcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi57Sn5oClXCJcclxuXHRcdFx0XHRcdFx0XHRcdGlmIFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSAjIOi2hei/h+S6huWKnue7k+aXtumZkOaIluiAhei3neemu+WKnue7k+aXtumZkOWNiuaXpeWGhVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlID0gKGJhc2VfZGF0ZSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUobm93KVxyXG5cclxuXHRcdFx0XHRcdFx0XHQjIO+8iDTvvInigJznibnmgKXigJ3vvJrlnKjlj5HpgIHnmoTlkIzml7bvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrooajljZXkuIrnmoTigJzlip7nu5Pml7bpmZDigJ3vvIjmlofkuablvZXlhaXnmoTml7bpl7TvvInvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDlpoLljYrml6XlhoXku43mnKrlpITnkIbvvIzns7vnu5/mr4/ljYrkuKrlt6XkvZzml6Xmj5DphpLlm5vmrKHvvJrlip7nu5Pml7bpmZDkuI3lj5jvvJvotoXov4flip7nu5Pml7bpmZDlkI7ku43nhLbmjInnhafmr4/ljYrml6Xlm5vmrKHmj5DphpLjgIJcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi54m55oClXCJcclxuXHRcdFx0XHRcdFx0XHRcdGlmIFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSAjIOi2hei/h+S6huWKnue7k+aXtumZkOaIluiAhei3neemu+WKnue7k+aXtumZkOWNiuaXpeWGhVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlID0gKGJhc2VfZGF0ZSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUobm93KVxyXG5cclxuXHRcdFx0XHRpZiBub3QgXy5pc0VtcHR5KGxhc3RfcmVtaW5kX3VzZXJzKVxyXG5cdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiB7J3RyYWNlcyc6IGlucy50cmFjZXN9fSlcclxuXHJcblx0XHRlbHNlIGlmIGFjdGlvbl90eXBlcy5pbmNsdWRlcygnYXBwbGljYW50JylcclxuXHRcdFx0dHJhY2UgPSBfLmZpbmQgaW5zLnRyYWNlcywgKHQpLT5cclxuXHRcdFx0XHRyZXR1cm4gdC5faWQgaXMgdHJhY2VfaWRcclxuXHRcdFx0Xy5lYWNoIHRyYWNlLmFwcHJvdmVzLCAoYXApLT5cclxuXHRcdFx0XHRpZiByZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgYW5kIGFwLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdFx0bGFzdF9yZW1pbmRfdXNlcnMucHVzaCBhcC51c2VyXHJcblxyXG5cdFx0ZWxzZSBpZiBhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2NjJylcclxuXHRcdFx0Xy5lYWNoIGlucy50cmFjZXMsICh0KS0+XHJcblx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhcCktPlxyXG5cdFx0XHRcdFx0aWYgcmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpIGFuZCBhcC5pc19maW5pc2hlZCBpc250IHRydWUgYW5kIGFwLnR5cGUgaXMgJ2NjJyBhbmQgYXAuZnJvbV91c2VyIGlzIGN1cnJlbnRfdXNlcl9pZFxyXG5cdFx0XHRcdFx0XHRsYXN0X3JlbWluZF91c2Vycy5wdXNoIGFwLnVzZXJcclxuXHJcblx0XHR1dWZsb3dNYW5hZ2VyLnNlbmRSZW1pbmRTTVMgaW5zLm5hbWUsIHJlbWluZF9kZWFkbGluZSwgbGFzdF9yZW1pbmRfdXNlcnMsIGlucy5zcGFjZSwgaW5zLl9pZFxyXG5cclxuXHRcdHJldHVybiB0cnVlXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgaW5zdGFuY2VfcmVtaW5kOiBmdW5jdGlvbihyZW1pbmRfdXNlcnMsIHJlbWluZF9jb3VudCwgcmVtaW5kX2RlYWRsaW5lLCBpbnN0YW5jZV9pZCwgYWN0aW9uX3R5cGVzLCB0cmFjZV9pZCkge1xuICAgIHZhciBjdXJyZW50X3VzZXJfaWQsIGlucywgbGFzdF9yZW1pbmRfdXNlcnMsIG5vdywgcHJpb3JpdHksIHRyYWNlO1xuICAgIGNoZWNrKHJlbWluZF91c2VycywgQXJyYXkpO1xuICAgIGNoZWNrKHJlbWluZF9jb3VudCwgTWF0Y2guT25lT2YoJ3NpbmdsZScsICdtdWx0aScpKTtcbiAgICBjaGVjayhyZW1pbmRfZGVhZGxpbmUsIERhdGUpO1xuICAgIGNoZWNrKGluc3RhbmNlX2lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGFjdGlvbl90eXBlcywgQXJyYXkpO1xuICAgIGNoZWNrKHRyYWNlX2lkLCBTdHJpbmcpO1xuICAgIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xuICAgIGxhc3RfcmVtaW5kX3VzZXJzID0gbmV3IEFycmF5O1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZTogMSxcbiAgICAgICAgdHJhY2VzOiAxLFxuICAgICAgICB2YWx1ZXM6IDEsXG4gICAgICAgIHNwYWNlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGFjdGlvbl90eXBlcy5pbmNsdWRlcygnYWRtaW4nKSkge1xuICAgICAgaWYgKHJlbWluZF9jb3VudCA9PT0gJ3NpbmdsZScpIHtcbiAgICAgICAgXy5lYWNoKGlucy50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICByZXR1cm4gXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGFwKSB7XG4gICAgICAgICAgICBpZiAocmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpICYmIGFwLmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsYXN0X3JlbWluZF91c2Vycy5wdXNoKGFwLnVzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocmVtaW5kX2NvdW50ID09PSAnbXVsdGknKSB7XG4gICAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgICBwcmlvcml0eSA9IGlucy52YWx1ZXMucHJpb3JpdHk7XG4gICAgICAgIF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgcmV0dXJuIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhcCkge1xuICAgICAgICAgICAgdmFyIGNhY3VsYXRlX2RhdGU7XG4gICAgICAgICAgICBpZiAocmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpICYmIGFwLmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGxhc3RfcmVtaW5kX3VzZXJzLnB1c2goYXAudXNlcik7XG4gICAgICAgICAgICAgIGFwLm1hbnVhbF9kZWFkbGluZSA9IHJlbWluZF9kZWFkbGluZTtcbiAgICAgICAgICAgICAgaWYgKHByaW9yaXR5ID09PSBcIuaZrumAmlwiIHx8ICFwcmlvcml0eSkge1xuXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpb3JpdHkgPT09IFwi5Yqe5paHXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3cpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYXAucmVtaW5kX2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZSA9IGZ1bmN0aW9uKGJhc2VfZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGx1c19oYWxmZGF5X2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FjdWxhdGVfZGF0ZShub3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmlvcml0eSA9PT0gXCLntKfmgKVcIikge1xuICAgICAgICAgICAgICAgIGlmIChTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFN0ZWVkb3MuY2FjdWxhdGVXb3JraW5nVGltZShub3csIDEpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlID0gZnVuY3Rpb24oYmFzZV9kYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbHVzX2hhbGZkYXlfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgcGx1c19oYWxmZGF5X2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVzX2hhbGZkYXlfZGF0ZSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWN1bGF0ZV9kYXRlKG5vdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByaW9yaXR5ID09PSBcIueJueaApVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwLnJlbWluZF9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3csIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoU3RlZWRvcy5jYWN1bGF0ZVdvcmtpbmdUaW1lKG5vdywgMSkgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUgPSBmdW5jdGlvbihiYXNlX2RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsdXNfaGFsZmRheV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICBwbHVzX2hhbGZkYXlfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdXNfaGFsZmRheV9kYXRlID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXAucmVtaW5kX2RhdGUgPSBiYXNlX2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY3VsYXRlX2RhdGUobm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghXy5pc0VtcHR5KGxhc3RfcmVtaW5kX3VzZXJzKSkge1xuICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgJ3RyYWNlcyc6IGlucy50cmFjZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0aW9uX3R5cGVzLmluY2x1ZGVzKCdhcHBsaWNhbnQnKSkge1xuICAgICAgdHJhY2UgPSBfLmZpbmQoaW5zLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5faWQgPT09IHRyYWNlX2lkO1xuICAgICAgfSk7XG4gICAgICBfLmVhY2godHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGFwKSB7XG4gICAgICAgIGlmIChyZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgJiYgYXAuaXNfZmluaXNoZWQgIT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gbGFzdF9yZW1pbmRfdXNlcnMucHVzaChhcC51c2VyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2NjJykpIHtcbiAgICAgIF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYXApIHtcbiAgICAgICAgICBpZiAocmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpICYmIGFwLmlzX2ZpbmlzaGVkICE9PSB0cnVlICYmIGFwLnR5cGUgPT09ICdjYycgJiYgYXAuZnJvbV91c2VyID09PSBjdXJyZW50X3VzZXJfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0X3JlbWluZF91c2Vycy5wdXNoKGFwLnVzZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5zZW5kUmVtaW5kU01TKGlucy5uYW1lLCByZW1pbmRfZGVhZGxpbmUsIGxhc3RfcmVtaW5kX3VzZXJzLCBpbnMuc3BhY2UsIGlucy5faWQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0bmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZDogKGRlYWxfdHlwZSwgc3RlcF9uYW1lLCBwYXJhbXMpIC0+XHJcblx0XHRjaGVjayBkZWFsX3R5cGUsIFN0cmluZ1xyXG5cdFx0Y2hlY2sgc3RlcF9uYW1lLCBTdHJpbmdcclxuXHRcdGNoZWNrIHBhcmFtcywgT2JqZWN0XHJcblxyXG5cdFx0c3RyID0gXCJcIlxyXG5cdFx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IHRoaXMudXNlcklkIH0sIHsgZmllbGRzOiB7IGxvY2FsZTogMSB9IH0pXHJcblx0XHQj6K6+572u5b2T5YmN6K+t6KiA546v5aKDXHJcblx0XHRsYW5nID0gJ2VuJ1xyXG5cdFx0aWYgdXNlci5sb2NhbGUgaXMgJ3poLWNuJ1xyXG5cdFx0XHRsYW5nID0gJ3poLUNOJ1xyXG5cclxuXHRcdCMg5oyH5a6a5a6h5om55bKX5L2NXHJcblx0XHRpZiBkZWFsX3R5cGUgaXMgJ2FwcGxpY2FudFJvbGUnXHJcblx0XHRcdGFwcHJvdmVyX3JvbGVzID0gcGFyYW1zLmFwcHJvdmVyX3JvbGVzXHJcblx0XHRcdHJvbGVzID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiB7ICRpbjogYXBwcm92ZXJfcm9sZXMgfSB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSkuZmV0Y2goKVxyXG5cdFx0XHRyb2xlc19uYW1lID0gXy5wbHVjayhyb2xlcywgJ25hbWUnKS50b1N0cmluZygpXHJcblx0XHRcdHN0ciA9IFRBUGkxOG4uX18gJ25leHRfc3RlcF91c2Vyc19ub3RfZm91bmQuYXBwbGljYW50X3JvbGUnLCB7IHN0ZXBfbmFtZTogc3RlcF9uYW1lLCByb2xlX25hbWU6IHJvbGVzX25hbWUgfSwgbGFuZ1xyXG5cclxuXHJcblx0XHRyZXR1cm4gc3RyXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZDogZnVuY3Rpb24oZGVhbF90eXBlLCBzdGVwX25hbWUsIHBhcmFtcykge1xuICAgIHZhciBhcHByb3Zlcl9yb2xlcywgbGFuZywgcm9sZXMsIHJvbGVzX25hbWUsIHN0ciwgdXNlcjtcbiAgICBjaGVjayhkZWFsX3R5cGUsIFN0cmluZyk7XG4gICAgY2hlY2soc3RlcF9uYW1lLCBTdHJpbmcpO1xuICAgIGNoZWNrKHBhcmFtcywgT2JqZWN0KTtcbiAgICBzdHIgPSBcIlwiO1xuICAgIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgIF9pZDogdGhpcy51c2VySWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbG9jYWxlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgbGFuZyA9ICdlbic7XG4gICAgaWYgKHVzZXIubG9jYWxlID09PSAnemgtY24nKSB7XG4gICAgICBsYW5nID0gJ3poLUNOJztcbiAgICB9XG4gICAgaWYgKGRlYWxfdHlwZSA9PT0gJ2FwcGxpY2FudFJvbGUnKSB7XG4gICAgICBhcHByb3Zlcl9yb2xlcyA9IHBhcmFtcy5hcHByb3Zlcl9yb2xlcztcbiAgICAgIHJvbGVzID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBhcHByb3Zlcl9yb2xlc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIHJvbGVzX25hbWUgPSBfLnBsdWNrKHJvbGVzLCAnbmFtZScpLnRvU3RyaW5nKCk7XG4gICAgICBzdHIgPSBUQVBpMThuLl9fKCduZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmFwcGxpY2FudF9yb2xlJywge1xuICAgICAgICBzdGVwX25hbWU6IHN0ZXBfbmFtZSxcbiAgICAgICAgcm9sZV9uYW1lOiByb2xlc19uYW1lXG4gICAgICB9LCBsYW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufSk7XG4iLCJfZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKVxyXG5cclxuTWV0ZW9yLm1ldGhvZHNcclxuXHRpbnN0YW5jZU51bWJlckJ1aWxkZXI6IChzcGFjZUlkLCBuYW1lKS0+XHJcblxyXG5cdFx0bnVtYmVyUnVsZXMgPSBkYi5pbnN0YW5jZV9udW1iZXJfcnVsZXMuZmluZE9uZSh7c3BhY2U6IHNwYWNlSWQsIG5hbWU6IG5hbWV9KVxyXG5cclxuXHRcdGlmICFudW1iZXJSdWxlc1xyXG5cdFx0XHR0aHJvdyBuZXcgIE1ldGVvci5FcnJvcignZXJyb3IhJywgXCIje25hbWV9XCIpXHJcblxyXG5cdFx0ZGF0ZSA9IG5ldyBEYXRlKClcclxuXHJcblx0XHRjb250ZXh0ID0ge31cclxuXHJcblx0XHRjb250ZXh0Ll8gPSBfXHJcblxyXG5cdFx0X1lZWVkgPSBkYXRlLmdldEZ1bGxZZWFyKClcclxuXHJcblx0XHRfTlVNQkVSID0gKG51bWJlclJ1bGVzLm51bWJlciB8fCAwKSArIDFcclxuXHJcblx0XHRjb250ZXh0LllZWVkgPSBfLmNsb25lKF9ZWVlZKVxyXG5cclxuXHRcdGNvbnRleHQuTU0gPSBkYXRlLmdldE1vbnRoKCkgKyAxXHJcblxyXG5cdFx0Y29udGV4dC5tbSA9IGRhdGUuZ2V0TW9udGgoKSArIDFcclxuXHJcblx0XHRpZiBjb250ZXh0Lk1NIDwgMTBcclxuXHRcdFx0Y29udGV4dC5NTSA9IFwiMFwiICsgY29udGV4dC5NTVxyXG5cclxuXHRcdGNvbnRleHQuREQgPSBkYXRlLmdldERhdGUoKVxyXG5cclxuXHRcdGNvbnRleHQuZGQgPSBkYXRlLmdldERhdGUoKVxyXG5cclxuXHRcdGlmIGNvbnRleHQuREQgPCAxMFxyXG5cdFx0XHRjb250ZXh0LkREID0gXCIwXCIgKyBjb250ZXh0LkREXHJcblxyXG5cdFx0aWYgY29udGV4dC5ZWVlZICE9IG51bWJlclJ1bGVzLnllYXJcclxuXHRcdFx0X05VTUJFUiA9IG51bWJlclJ1bGVzLmZpcnN0X251bWJlciB8fCAxXHJcblxyXG5cdFx0Y29udGV4dC5OVU1CRVIgPSBfLmNsb25lKF9OVU1CRVIpXHJcblxyXG5cdFx0cnVsZXMgPSBudW1iZXJSdWxlcy5ydWxlcy5yZXBsYWNlKFwie1lZWVl9XCIsIFwiJyArIFlZWVkgKyAnXCIpLnJlcGxhY2UoXCJ7TU19XCIsIFwiJyArIE1NICsgJ1wiKS5yZXBsYWNlKFwie05VTUJFUn1cIiwgXCInICsgTlVNQkVSICsgJ1wiKVxyXG5cclxuXHRcdHNjcmlwdCA9IFwidmFyIG5ld05vID0gJyN7cnVsZXN9JzsgZXhwb3J0cy5uZXdObyA9IG5ld05vXCI7XHJcblxyXG5cdFx0dHJ5XHJcblx0XHRcdHJlcyA9IF9ldmFsKHNjcmlwdCwgXCJuZXdOb1wiLCBjb250ZXh0LCBmYWxzZSkubmV3Tm9cclxuXHJcblx0XHRcdGRiLmluc3RhbmNlX251bWJlcl9ydWxlcy51cGRhdGUoe19pZDogbnVtYmVyUnVsZXMuX2lkfSwgeyRzZXQ6IHt5ZWFyOiBfWVlZWSwgbnVtYmVyOiBfTlVNQkVSfX0pXHJcblxyXG5cdFx0XHRjb25zb2xlLmxvZyB0aGlzLnVzZXJJZCwgcmVzXHJcblxyXG5cdFx0Y2F0Y2ggZVxyXG5cdFx0XHRyZXMgPSB7X2Vycm9yOiBlfVxyXG5cclxuXHRcdHJldHVybiByZXM7XHJcbiIsInZhciBfZXZhbDtcblxuX2V2YWwgPSByZXF1aXJlKCdldmFsJyk7XG5cbk1ldGVvci5tZXRob2RzKHtcbiAgaW5zdGFuY2VOdW1iZXJCdWlsZGVyOiBmdW5jdGlvbihzcGFjZUlkLCBuYW1lKSB7XG4gICAgdmFyIF9OVU1CRVIsIF9ZWVlZLCBjb250ZXh0LCBkYXRlLCBlLCBudW1iZXJSdWxlcywgcmVzLCBydWxlcywgc2NyaXB0O1xuICAgIG51bWJlclJ1bGVzID0gZGIuaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG4gICAgaWYgKCFudW1iZXJSdWxlcykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJcIiArIG5hbWUpO1xuICAgIH1cbiAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb250ZXh0ID0ge307XG4gICAgY29udGV4dC5fID0gXztcbiAgICBfWVlZWSA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICBfTlVNQkVSID0gKG51bWJlclJ1bGVzLm51bWJlciB8fCAwKSArIDE7XG4gICAgY29udGV4dC5ZWVlZID0gXy5jbG9uZShfWVlZWSk7XG4gICAgY29udGV4dC5NTSA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gICAgY29udGV4dC5tbSA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gICAgaWYgKGNvbnRleHQuTU0gPCAxMCkge1xuICAgICAgY29udGV4dC5NTSA9IFwiMFwiICsgY29udGV4dC5NTTtcbiAgICB9XG4gICAgY29udGV4dC5ERCA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgIGNvbnRleHQuZGQgPSBkYXRlLmdldERhdGUoKTtcbiAgICBpZiAoY29udGV4dC5ERCA8IDEwKSB7XG4gICAgICBjb250ZXh0LkREID0gXCIwXCIgKyBjb250ZXh0LkREO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5ZWVlZICE9PSBudW1iZXJSdWxlcy55ZWFyKSB7XG4gICAgICBfTlVNQkVSID0gbnVtYmVyUnVsZXMuZmlyc3RfbnVtYmVyIHx8IDE7XG4gICAgfVxuICAgIGNvbnRleHQuTlVNQkVSID0gXy5jbG9uZShfTlVNQkVSKTtcbiAgICBydWxlcyA9IG51bWJlclJ1bGVzLnJ1bGVzLnJlcGxhY2UoXCJ7WVlZWX1cIiwgXCInICsgWVlZWSArICdcIikucmVwbGFjZShcIntNTX1cIiwgXCInICsgTU0gKyAnXCIpLnJlcGxhY2UoXCJ7TlVNQkVSfVwiLCBcIicgKyBOVU1CRVIgKyAnXCIpO1xuICAgIHNjcmlwdCA9IFwidmFyIG5ld05vID0gJ1wiICsgcnVsZXMgKyBcIic7IGV4cG9ydHMubmV3Tm8gPSBuZXdOb1wiO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBfZXZhbChzY3JpcHQsIFwibmV3Tm9cIiwgY29udGV4dCwgZmFsc2UpLm5ld05vO1xuICAgICAgZGIuaW5zdGFuY2VfbnVtYmVyX3J1bGVzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogbnVtYmVyUnVsZXMuX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRzZXQ6IHtcbiAgICAgICAgICB5ZWFyOiBfWVlZWSxcbiAgICAgICAgICBudW1iZXI6IF9OVU1CRVJcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnVzZXJJZCwgcmVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZSA9IGVycm9yO1xuICAgICAgcmVzID0ge1xuICAgICAgICBfZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRjaGVja19tYWluX2F0dGFjaDogKGluc19pZCwgbmFtZSktPlxyXG5cdFx0Y2hlY2sgaW5zX2lkLCBTdHJpbmdcclxuXHRcdHV1Zmxvd01hbmFnZXIuY2hlY2tNYWluQXR0YWNoKGluc19pZCwgbmFtZSlcclxuXHRcdHJldHVybiAnc3VjY2VzcydcclxuXHJcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0cmVtb3ZlX3JlbGF0ZWQ6IChpbnNfaWQsIHJlX2luc19pZCktPlxyXG5cdFx0Y2hlY2soaW5zX2lkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhyZV9pbnNfaWQsIFN0cmluZylcclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWR9LCB7ZmllbGRzOiB7cmVsYXRlZF9pbnN0YW5jZXM6IDF9fSlcclxuXHJcblx0XHRpZiBpbnNcclxuXHRcdFx0cmVzID0gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIHx8IFtdXHJcblxyXG5cdFx0XHRpbmRleCA9IHJlcy5pbmRleE9mKHJlX2luc19pZClcclxuXHJcblx0XHRcdGlmIGluZGV4ID4gLTFcclxuXHRcdFx0XHRyZXMucmVtb3ZlKGluZGV4KVxyXG5cclxuXHRcdFx0c2V0X29iaiA9IG5ldyBPYmplY3Q7XHJcblx0XHRcdHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHNldF9vYmoucmVsYXRlZF9pbnN0YW5jZXMgPSByZXNcclxuXHJcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zX2lkfSwgeyRzZXQ6IHNldF9vYmp9KVxyXG5cclxuXHR1cGRhdGVfaW5zdGFuY2VfcmVsYXRlZDogKGluc19pZCwgcmVsYXRlZF9pbnN0YW5jZXMpLT5cclxuXHRcdGNoZWNrKGluc19pZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2socmVsYXRlZF9pbnN0YW5jZXMsIEFycmF5KVxyXG5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWQsICRvcjogW3tzdWJtaXR0ZXI6IHRoaXMudXNlcklkfSwge2FwcGxpY2FudDogdGhpcy51c2VySWR9LCB7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dfSwge2ZpZWxkczoge3N0YXRlOiAxfX0pXHJcblxyXG5cdFx0aWYgaW5zXHJcblx0XHRcdHNldF9vYmogPSBuZXcgT2JqZWN0O1xyXG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdFx0c2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xyXG5cdFx0XHRzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVsYXRlZF9pbnN0YW5jZXNcclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnNfaWR9LCB7JHNldDogc2V0X29ian0pXHJcblxyXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW46ICByZWxhdGVkX2luc3RhbmNlc319LCB7ZmllbGRzOiB7X2lkOiAxLCB2YWx1ZXM6IDF9fSkuZmV0Y2goKVxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIHJlbW92ZV9yZWxhdGVkOiBmdW5jdGlvbihpbnNfaWQsIHJlX2luc19pZCkge1xuICAgIHZhciBpbmRleCwgaW5zLCByZXMsIHNldF9vYmo7XG4gICAgY2hlY2soaW5zX2lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlX2luc19pZCwgU3RyaW5nKTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zX2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHJlbGF0ZWRfaW5zdGFuY2VzOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlucykge1xuICAgICAgcmVzID0gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIHx8IFtdO1xuICAgICAgaW5kZXggPSByZXMuaW5kZXhPZihyZV9pbnNfaWQpO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgcmVzLnJlbW92ZShpbmRleCk7XG4gICAgICB9XG4gICAgICBzZXRfb2JqID0gbmV3IE9iamVjdDtcbiAgICAgIHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuICAgICAgc2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xuICAgICAgc2V0X29iai5yZWxhdGVkX2luc3RhbmNlcyA9IHJlcztcbiAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDogc2V0X29ialxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICB1cGRhdGVfaW5zdGFuY2VfcmVsYXRlZDogZnVuY3Rpb24oaW5zX2lkLCByZWxhdGVkX2luc3RhbmNlcykge1xuICAgIHZhciBpbnMsIHNldF9vYmo7XG4gICAgY2hlY2soaW5zX2lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlbGF0ZWRfaW5zdGFuY2VzLCBBcnJheSk7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZCxcbiAgICAgICRvcjogW1xuICAgICAgICB7XG4gICAgICAgICAgc3VibWl0dGVyOiB0aGlzLnVzZXJJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXBwbGljYW50OiB0aGlzLnVzZXJJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgaW5ib3hfdXNlcnM6IHRoaXMudXNlcklkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjY191c2VyczogdGhpcy51c2VySWRcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnMpIHtcbiAgICAgIHNldF9vYmogPSBuZXcgT2JqZWN0O1xuICAgICAgc2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG4gICAgICBzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XG4gICAgICBzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVsYXRlZF9pbnN0YW5jZXM7XG4gICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDogc2V0X29ialxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICBfaWQ6IHtcbiAgICAgICAgJGluOiByZWxhdGVkX2luc3RhbmNlc1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBfaWQ6IDEsXG4gICAgICAgIHZhbHVlczogMVxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHR1cGRhdGVGbG93UG9zaXRpb246IChkYXRhKSAtPlxyXG5cdFx0ZGIuZmxvd19wb3NpdGlvbnMudXBkYXRlIHsgX2lkOiBkYXRhLl9pZCB9LCAkc2V0OlxyXG5cdFx0XHRyb2xlOiBkYXRhLnJvbGVcclxuXHRcdFx0dXNlcnM6IGRhdGEudXNlcnNcclxuXHRcdFx0b3JnOiBkYXRhLm9yZ1xyXG5cclxuXHR1cGRhdGVGbG93Um9sZTogKGRhdGEpIC0+XHJcblx0XHRjb25zb2xlLmxvZyBkYXRhLl9pZFxyXG5cdFx0Y29uc29sZS5sb2cgZGF0YS5uYW1lXHJcblx0XHRkYi5mbG93X3JvbGVzLnVwZGF0ZSB7IF9pZDogZGF0YS5faWQgfSwgJHNldDpcclxuXHRcdFx0bmFtZTogZGF0YS5uYW1lIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICB1cGRhdGVGbG93UG9zaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gZGIuZmxvd19wb3NpdGlvbnMudXBkYXRlKHtcbiAgICAgIF9pZDogZGF0YS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIHJvbGU6IGRhdGEucm9sZSxcbiAgICAgICAgdXNlcnM6IGRhdGEudXNlcnMsXG4gICAgICAgIG9yZzogZGF0YS5vcmdcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgdXBkYXRlRmxvd1JvbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhkYXRhLl9pZCk7XG4gICAgY29uc29sZS5sb2coZGF0YS5uYW1lKTtcbiAgICByZXR1cm4gZGIuZmxvd19yb2xlcy51cGRhdGUoe1xuICAgICAgX2lkOiBkYXRhLl9pZFxuICAgIH0sIHtcbiAgICAgICRzZXQ6IHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRzdGFydF9mbG93OiAoc3BhY2UsIGZsb3dJZCwgc3RhcnQpIC0+XHJcblxyXG5cdFx0a2V5VmFsdWUgPSBkYi5zdGVlZG9zX2tleXZhbHVlcy5maW5kT25lKHsgc3BhY2U6IHNwYWNlLCB1c2VyOiB0aGlzLnVzZXJJZCwga2V5OiAnc3RhcnRfZmxvd3MnIH0sIHsgZmllbGRzOiB7IHZhbHVlOiAxIH0gfSlcclxuXHJcblx0XHRzdGFydF9mbG93cyA9IGtleVZhbHVlPy52YWx1ZSB8fCBbXVxyXG5cclxuXHRcdGlmIHN0YXJ0XHJcblx0XHRcdHN0YXJ0X2Zsb3dzLnB1c2goZmxvd0lkKVxyXG5cclxuXHRcdFx0c3RhcnRfZmxvd3MgPSBfLnVuaXEoc3RhcnRfZmxvd3MpXHJcblx0XHRlbHNlXHJcblx0XHRcdHN0YXJ0X2Zsb3dzLnJlbW92ZShzdGFydF9mbG93cy5pbmRleE9mKGZsb3dJZCkpXHJcblxyXG5cdFx0aWYga2V5VmFsdWVcclxuXHRcdFx0ZGIuc3RlZWRvc19rZXl2YWx1ZXMudXBkYXRlKHsgX2lkOiBrZXlWYWx1ZS5faWQgfSwgeyBzcGFjZTogc3BhY2UsIHVzZXI6IHRoaXMudXNlcklkLCBrZXk6ICdzdGFydF9mbG93cycsIHZhbHVlOiBzdGFydF9mbG93cyB9KVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRkYi5zdGVlZG9zX2tleXZhbHVlcy5pbnNlcnQoeyBzcGFjZTogc3BhY2UsIHVzZXI6IHRoaXMudXNlcklkLCBrZXk6ICdzdGFydF9mbG93cycsIHZhbHVlOiBzdGFydF9mbG93cyB9KVxyXG5cclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBzdGFydF9mbG93OiBmdW5jdGlvbihzcGFjZSwgZmxvd0lkLCBzdGFydCkge1xuICAgIHZhciBrZXlWYWx1ZSwgc3RhcnRfZmxvd3M7XG4gICAga2V5VmFsdWUgPSBkYi5zdGVlZG9zX2tleXZhbHVlcy5maW5kT25lKHtcbiAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgIHVzZXI6IHRoaXMudXNlcklkLFxuICAgICAga2V5OiAnc3RhcnRfZmxvd3MnXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHZhbHVlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgc3RhcnRfZmxvd3MgPSAoa2V5VmFsdWUgIT0gbnVsbCA/IGtleVZhbHVlLnZhbHVlIDogdm9pZCAwKSB8fCBbXTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHN0YXJ0X2Zsb3dzLnB1c2goZmxvd0lkKTtcbiAgICAgIHN0YXJ0X2Zsb3dzID0gXy51bmlxKHN0YXJ0X2Zsb3dzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRfZmxvd3MucmVtb3ZlKHN0YXJ0X2Zsb3dzLmluZGV4T2YoZmxvd0lkKSk7XG4gICAgfVxuICAgIGlmIChrZXlWYWx1ZSkge1xuICAgICAgcmV0dXJuIGRiLnN0ZWVkb3Nfa2V5dmFsdWVzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDoga2V5VmFsdWUuX2lkXG4gICAgICB9LCB7XG4gICAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgICAgdXNlcjogdGhpcy51c2VySWQsXG4gICAgICAgIGtleTogJ3N0YXJ0X2Zsb3dzJyxcbiAgICAgICAgdmFsdWU6IHN0YXJ0X2Zsb3dzXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRiLnN0ZWVkb3Nfa2V5dmFsdWVzLmluc2VydCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgICAgdXNlcjogdGhpcy51c2VySWQsXG4gICAgICAgIGtleTogJ3N0YXJ0X2Zsb3dzJyxcbiAgICAgICAgdmFsdWU6IHN0YXJ0X2Zsb3dzXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRnZXRfaW5zdGFuY2VfdHJhY2VzOiAoaW5zX2lkKS0+XHJcblx0XHRpZiAoIXRoaXMudXNlcklkKVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHRtaW5pQXBwcm92ZUZpZWxkcyA9IFsnX2lkJywgJ2lzX2ZpbmlzaGVkJywgJ3VzZXInLCAnaGFuZGxlcicsICdoYW5kbGVyX25hbWUnLCAndHlwZScsICdzdGFydF9kYXRlJywgJ2Rlc2NyaXB0aW9uJyxcclxuXHRcdFx0J2lzX3JlYWQnLCAnanVkZ2UnLCAnZmluaXNoX2RhdGUnLCAnZnJvbV91c2VyX25hbWUnLCAnZnJvbV91c2VyJywgJ2NjX2Rlc2NyaXB0aW9uJ11cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSB7X2lkOiBpbnNfaWR9LCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFwidHJhY2VzLl9pZFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmlzX2ZpbmlzaGVkXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuc3RlcFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLnN0YXJ0X2RhdGVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5uYW1lXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuZmluaXNoX2RhdGVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5qdWRnZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLl9pZFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmlzX2ZpbmlzaGVkXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMudXNlclwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX25hbWVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLnR5cGVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5zdGFydF9kYXRlXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZGVzY3JpcHRpb25cIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5pc19yZWFkXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuanVkZ2VcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5maW5pc2hfZGF0ZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmZyb21fdXNlcl9uYW1lXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuY2NfZGVzY3JpcHRpb25cIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy50cmFjZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmZvcndhcmRfc3BhY2VcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5mb3J3YXJkX2luc3RhbmNlXCI6IDFcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICFpbnNcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0cmV0dXJuIGlucz8udHJhY2VzXHJcblxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIGdldF9pbnN0YW5jZV90cmFjZXM6IGZ1bmN0aW9uKGluc19pZCkge1xuICAgIHZhciBpbnMsIG1pbmlBcHByb3ZlRmllbGRzO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWluaUFwcHJvdmVGaWVsZHMgPSBbJ19pZCcsICdpc19maW5pc2hlZCcsICd1c2VyJywgJ2hhbmRsZXInLCAnaGFuZGxlcl9uYW1lJywgJ3R5cGUnLCAnc3RhcnRfZGF0ZScsICdkZXNjcmlwdGlvbicsICdpc19yZWFkJywgJ2p1ZGdlJywgJ2ZpbmlzaF9kYXRlJywgJ2Zyb21fdXNlcl9uYW1lJywgJ2Zyb21fdXNlcicsICdjY19kZXNjcmlwdGlvbiddO1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zX2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLl9pZFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5pc19maW5pc2hlZFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5zdGVwXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLnN0YXJ0X2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMubmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5maW5pc2hfZGF0ZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5qdWRnZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5faWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaXNfZmluaXNoZWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMudXNlclwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJfbmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy50eXBlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLnN0YXJ0X2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZGVzY3JpcHRpb25cIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaXNfcmVhZFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5qdWRnZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5maW5pc2hfZGF0ZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5mcm9tX3VzZXJfbmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5mcm9tX3VzZXJcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuY2NfZGVzY3JpcHRpb25cIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMudHJhY2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZm9yd2FyZF9zcGFjZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5mb3J3YXJkX2luc3RhbmNlXCI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWlucykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gaW5zICE9IG51bGwgPyBpbnMudHJhY2VzIDogdm9pZCAwO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0J2dldF9iYXRjaF9pbnN0YW5jZXMnOiAoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMpLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiAhc3BhY2VcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0X2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpXHJcblxyXG5cdFx0cmV0dXJuIF9iYXRjaF9pbnN0YW5jZXNcclxuXHJcblx0J2dldF9iYXRjaF9pbnN0YW5jZXNfY291bnQnOiAoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMpLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiAhc3BhY2VcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0X2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpXHJcblxyXG5cdFx0cmV0dXJuIF9iYXRjaF9pbnN0YW5jZXM/Lmxlbmd0aCB8fCAwXHJcblxyXG5cdCdnZXRfbXlfYXBwcm92ZXMnOiAoaW5zdGFuY2VJZHMpLT5cclxuXHJcblx0XHR0aGF0ID0gdGhpc1xyXG5cclxuXHRcdGlmICF0aGF0LnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRteUFwcHJvdmVzID0gbmV3IEFycmF5KClcclxuXHJcblx0XHRpbnN0YW5jZUlkcy5mb3JFYWNoIChpbnNJZCktPlxyXG5cdFx0XHRteV9hcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZShpbnNJZCwgdGhhdC51c2VySWQpXHJcblx0XHRcdGlmIG15X2FwcHJvdmVcclxuXHRcdFx0XHRteUFwcHJvdmVzLnB1c2gobXlfYXBwcm92ZSlcclxuXHJcblx0XHRyZXR1cm4gbXlBcHByb3Zlc1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgJ2dldF9iYXRjaF9pbnN0YW5jZXMnOiBmdW5jdGlvbihzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcykge1xuICAgIHZhciBfYmF0Y2hfaW5zdGFuY2VzO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzcGFjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfYmF0Y2hfaW5zdGFuY2VzID0gSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzLCB0aGlzLnVzZXJJZCk7XG4gICAgcmV0dXJuIF9iYXRjaF9pbnN0YW5jZXM7XG4gIH0sXG4gICdnZXRfYmF0Y2hfaW5zdGFuY2VzX2NvdW50JzogZnVuY3Rpb24oc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMpIHtcbiAgICB2YXIgX2JhdGNoX2luc3RhbmNlcztcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghc3BhY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpO1xuICAgIHJldHVybiAoX2JhdGNoX2luc3RhbmNlcyAhPSBudWxsID8gX2JhdGNoX2luc3RhbmNlcy5sZW5ndGggOiB2b2lkIDApIHx8IDA7XG4gIH0sXG4gICdnZXRfbXlfYXBwcm92ZXMnOiBmdW5jdGlvbihpbnN0YW5jZUlkcykge1xuICAgIHZhciBteUFwcHJvdmVzLCB0aGF0O1xuICAgIHRoYXQgPSB0aGlzO1xuICAgIGlmICghdGhhdC51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbXlBcHByb3ZlcyA9IG5ldyBBcnJheSgpO1xuICAgIGluc3RhbmNlSWRzLmZvckVhY2goZnVuY3Rpb24oaW5zSWQpIHtcbiAgICAgIHZhciBteV9hcHByb3ZlO1xuICAgICAgbXlfYXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRNeUFwcHJvdmUoaW5zSWQsIHRoYXQudXNlcklkKTtcbiAgICAgIGlmIChteV9hcHByb3ZlKSB7XG4gICAgICAgIHJldHVybiBteUFwcHJvdmVzLnB1c2gobXlfYXBwcm92ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG15QXBwcm92ZXM7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRjaGFuZ2VfZmxvd19zdGF0ZTogKGZsb3dzKSAtPlxyXG5cdFx0Y2hlY2sgZmxvd3MsIEFycmF5XHJcblxyXG5cdFx0X3VzZXJJZCA9IHRoaXMudXNlcklkXHJcblxyXG5cdFx0aWYgIV91c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0Zmxvd3MuZm9yRWFjaCAoZmxvdykgLT5cclxuXHRcdFx0c3BhY2VJZCA9IGZsb3cuc3BhY2VcclxuXHRcdFx0Zm9ybUlkID0gZmxvdy5mb3JtXHJcblx0XHRcdGZsb3dJZCA9IGZsb3cuaWRcclxuXHRcdFx0c3RhdGUgPSBmbG93LnN0YXRlXHJcblxyXG5cdFx0XHRpZiAhU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgX3VzZXJJZClcclxuXHRcdFx0XHR0aHJvdyAgTWV0ZW9yLkVycm9yKDQwMSwgXCJObyBwZXJtaXNzaW9uXCIpXHJcblxyXG5cdFx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZm9ybUlkIH0sIHsgZmllbGRzOiB7IGhpc3RvcnlzOiAwIH0gfSlcclxuXHJcblx0XHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHsgX2lkOiBmbG93SWQgfSwgeyBmaWVsZHM6IHsgaGlzdG9yeXM6IDAgfSB9KVxyXG5cclxuXHRcdFx0aWYgc3RhdGUgIT0gJ2VuYWJsZWQnICYmIHN0YXRlICE9ICdkaXNhYmxlZCdcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJzdGF0ZeaXoOaViFwiKVxyXG5cclxuXHRcdFx0aWYgIWZvcm1cclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmb3Jt5peg5pWIXCIpXHJcblxyXG5cdFx0XHRpZiAhZmxvd1xyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcImZsb3fml6DmlYhcIilcclxuXHJcblx0XHRcdGlmICFmb3JtLmlzX3ZhbGlkXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL5byV55So55qE6KGo5Y2VWyN7Zm9ybS5uYW1lfV3pqozor4HmnKrpgJrov4fvvIzor7fmiZPlvIDmtYHnqIvorr7orqHlmajmo4Dmn6XooajljZXorr7nva5cIilcclxuXHJcblx0XHRcdGlmICFmbG93LmlzX3ZhbGlkXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yM6K+35omT5byA5rWB56iL6K6+6K6h5Zmo5qOA5p+l5rWB56iL6K6+572uXCIpXHJcblxyXG5cdFx0XHRpZiAhWyduZXcnLCAnbW9kaWZ5JywgJ2RlbGV0ZSddLmluY2x1ZGVzKGZsb3cuZmxvd3R5cGUpXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yMZmxvd3R5cGXlgLzlv4XpobvmmK9uZXfjgIFtb2RpZnnjgIFkZWxldGXlhbbkuK3kuYvkuIBcIilcclxuXHJcblx0XHRcdGlmICFfLmlzQXJyYXkoZmxvdy5jdXJyZW50LnN0ZXBzKVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOa1geeoi+eahOatpemqpOS4jeiDveS4uuepulwiKVxyXG5cclxuXHRcdFx0aWYgXy51bmlxKGZsb3cuY3VycmVudC5zdGVwcywgJ25hbWUnKS5sZW5ndGggIT0gZmxvdy5jdXJyZW50LnN0ZXBzLmxlbmd0aFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOWQjOS4gOS4qua1geeoi+S4i+eahOatpemqpOeahOWQjeensOS4jeiDvemHjeWkjVwiKVxyXG5cclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHJcblx0XHRcdGlmIHN0YXRlID09ICdlbmFibGVkJ1xyXG5cdFx0XHRcdCPmtYHnqIvlkK/nlKjliY3vvIzmoKHpqozlhbbigJzmjIflrprljoblj7LmraXpqqTigJ3lsZ7mgKfkuK3ooqvlvJXnlKjnmoTmraXpqqTmmK/lkKblrZjlnKjkuJTog73ooqvmib7liLDvvIjku4XpmZDkuo7mtYHnqIvnmoTmnIDmlrDniYjvvIlcclxuXHRcdFx0XHRmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaCAoc3RlcCkgLT5cclxuXHRcdFx0XHRcdGlmIFsnc3BlY2lmeVN0ZXBVc2VyJywgJ3NwZWNpZnlTdGVwUm9sZSddLmluY2x1ZGVzKHN0ZXAuZGVhbF90eXBlKVxyXG5cdFx0XHRcdFx0XHRpZiAhc3RlcC5hcHByb3Zlcl9zdGVwXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5q2l6aqkWyN7c3RlcC5uYW1lfV3kuK3nmoTmjIflrprljoblj7LmraXpqqTkuI3lrZjlnKjjgIJcIilcclxuXHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdHNwZWNpZnlTdGVwID0gXy5maW5kIGZsb3cuY3VycmVudC5zdGVwcywgKF9zdGVwKSAtPlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHN0ZXAuYXBwcm92ZXJfc3RlcCA9PSBfc3RlcC5faWRcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgIXNwZWNpZnlTdGVwXHJcblx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmraXpqqRbI3tzdGVwLm5hbWV9XeS4reeahOaMh+WumuWOhuWPsuatpemqpOS4jeWtmOWcqOOAglwiKVxyXG5cclxuXHRcdFx0XHRmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUgPSBmb3JtLmN1cnJlbnQuZmllbGRzLmdldFByb3BlcnR5KFwiY29kZVwiKVxyXG5cclxuXHRcdFx0XHRmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaCAoc3RlcCkgLT5cclxuXHRcdFx0XHRcdHN0ZXAuZmllbGRzX21vZGlmaWFibGUgPSBfLmludGVyc2VjdGlvbihzdGVwLmZpZWxkc19tb2RpZmlhYmxlLCBmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUpXHJcblxyXG5cdFx0XHRcdCPlpoLmnpwg5rWB56iL5a+55bqU6KGo5Y2VIOaYr+WBnOeUqOeahCDliJnlkK/nlKhcclxuXHRcdFx0XHRpZiBmb3JtLnN0YXRlID09ICdkaXNhYmxlZCdcclxuXHRcdFx0XHRcdGRiLmZvcm1zLnVwZGF0ZSh7X2lkOiBmb3JtLl9pZH0sIHskc2V0OiB7XCJzdGF0ZVwiOiBcImVuYWJsZWRcIiwgXCJjdXJyZW50LnN0YXJ0X2RhdGVcIjogbm93LCBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LCBcImN1cnJlbnQubW9kaWZpZWRfYnlcIjogX3VzZXJJZH19KVxyXG5cclxuXHRcdFx0XHRmbG93LmN1cnJlbnQubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0XHRmbG93LmN1cnJlbnQuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdGZsb3cuY3VycmVudC5tb2RpZmllZF9ieSA9IF91c2VySWRcclxuXHJcblx0XHRcdFx0ZGIuZmxvd3MudXBkYXRlKHsgX2lkOiBmbG93Ll9pZCB9LCB7ICRzZXQ6IHsgXCJzdGF0ZVwiOiBcImVuYWJsZWRcIiwgXCJjdXJyZW50XCI6IGZsb3cuY3VycmVudCB9IH0pXHJcblxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0I+emgeeUqOa1geeoi1xyXG5cdFx0XHRcdGRiLmZsb3dzLnVwZGF0ZSh7X2lkOiBmbG93Ll9pZH0sIHskc2V0OiB7XCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWR9fSlcclxuXHJcblx0XHRcdFx0IyDliKTmlq3ooajljZXmiYDmnInmtYHnqIvmmK/lkKblt7Lnu4/lhajpg6jlgZznlKgg5aaC5p6c5bey5YWo6YOo5YGc55SoIOWImeS/ruaUueihqOWNleeKtuaAgeS4uuWBnOeUqFxyXG5cdFx0XHRcdF9mbG93cyA9IGRiLmZsb3dzLmZpbmQoeyBmb3JtOiBmb3JtLl9pZCB9LCB7IGZpZWxkczogeyBfaWQ6IDEsIHN0YXRlOiAxIH0gfSkuZmV0Y2goKVxyXG5cclxuXHRcdFx0XHRfZmxvd3Nfc3RhdGUgPSBfZmxvd3MuZ2V0UHJvcGVydHkoXCJzdGF0ZVwiKVxyXG5cclxuXHRcdFx0XHRpZiAhX2Zsb3dzX3N0YXRlLmluY2x1ZGVzKCdlbmFibGVkJylcclxuXHRcdFx0XHRcdGRiLmZvcm1zLnVwZGF0ZSh7X2lkOiBmb3JtLl9pZH0sIHskc2V0OiB7XCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWR9fSlcclxuXHJcblxyXG5cclxuXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgY2hhbmdlX2Zsb3dfc3RhdGU6IGZ1bmN0aW9uKGZsb3dzKSB7XG4gICAgdmFyIF91c2VySWQ7XG4gICAgY2hlY2soZmxvd3MsIEFycmF5KTtcbiAgICBfdXNlcklkID0gdGhpcy51c2VySWQ7XG4gICAgaWYgKCFfdXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBmbG93cy5mb3JFYWNoKGZ1bmN0aW9uKGZsb3cpIHtcbiAgICAgIHZhciBfZmxvd3MsIF9mbG93c19zdGF0ZSwgZmxvd0lkLCBmb3JtLCBmb3JtSWQsIGZvcm1fY3VycmVudF9maWVsZHNfY29kZSwgbm93LCBzcGFjZUlkLCBzdGF0ZTtcbiAgICAgIHNwYWNlSWQgPSBmbG93LnNwYWNlO1xuICAgICAgZm9ybUlkID0gZmxvdy5mb3JtO1xuICAgICAgZmxvd0lkID0gZmxvdy5pZDtcbiAgICAgIHN0YXRlID0gZmxvdy5zdGF0ZTtcbiAgICAgIGlmICghU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgX3VzZXJJZCkpIHtcbiAgICAgICAgdGhyb3cgTWV0ZW9yLkVycm9yKDQwMSwgXCJObyBwZXJtaXNzaW9uXCIpO1xuICAgICAgfVxuICAgICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZvcm1JZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBoaXN0b3J5czogMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93SWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgaGlzdG9yeXM6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoc3RhdGUgIT09ICdlbmFibGVkJyAmJiBzdGF0ZSAhPT0gJ2Rpc2FibGVkJykge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJzdGF0ZeaXoOaViFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghZm9ybSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmb3Jt5peg5pWIXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFmbG93KSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcImZsb3fml6DmlYhcIik7XG4gICAgICB9XG4gICAgICBpZiAoIWZvcm0uaXNfdmFsaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL5byV55So55qE6KGo5Y2VW1wiICsgZm9ybS5uYW1lICsgXCJd6aqM6K+B5pyq6YCa6L+H77yM6K+35omT5byA5rWB56iL6K6+6K6h5Zmo5qOA5p+l6KGo5Y2V6K6+572uXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFmbG93LmlzX3ZhbGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOivt+aJk+W8gOa1geeoi+iuvuiuoeWZqOajgOafpea1geeoi+iuvue9rlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghWyduZXcnLCAnbW9kaWZ5JywgJ2RlbGV0ZSddLmluY2x1ZGVzKGZsb3cuZmxvd3R5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jGZsb3d0eXBl5YC85b+F6aG75pivbmV344CBbW9kaWZ544CBZGVsZXRl5YW25Lit5LmL5LiAXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzQXJyYXkoZmxvdy5jdXJyZW50LnN0ZXBzKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzmtYHnqIvnmoTmraXpqqTkuI3og73kuLrnqbpcIik7XG4gICAgICB9XG4gICAgICBpZiAoXy51bmlxKGZsb3cuY3VycmVudC5zdGVwcywgJ25hbWUnKS5sZW5ndGggIT09IGZsb3cuY3VycmVudC5zdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yM5ZCM5LiA5Liq5rWB56iL5LiL55qE5q2l6aqk55qE5ZCN56ew5LiN6IO96YeN5aSNXCIpO1xuICAgICAgfVxuICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICBpZiAoc3RhdGUgPT09ICdlbmFibGVkJykge1xuICAgICAgICBmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaChmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgdmFyIHNwZWNpZnlTdGVwO1xuICAgICAgICAgIGlmIChbJ3NwZWNpZnlTdGVwVXNlcicsICdzcGVjaWZ5U3RlcFJvbGUnXS5pbmNsdWRlcyhzdGVwLmRlYWxfdHlwZSkpIHtcbiAgICAgICAgICAgIGlmICghc3RlcC5hcHByb3Zlcl9zdGVwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIuatpemqpFtcIiArIHN0ZXAubmFtZSArIFwiXeS4reeahOaMh+WumuWOhuWPsuatpemqpOS4jeWtmOWcqOOAglwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNwZWNpZnlTdGVwID0gXy5maW5kKGZsb3cuY3VycmVudC5zdGVwcywgZnVuY3Rpb24oX3N0ZXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RlcC5hcHByb3Zlcl9zdGVwID09PSBfc3RlcC5faWQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIXNwZWNpZnlTdGVwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5q2l6aqkW1wiICsgc3RlcC5uYW1lICsgXCJd5Lit55qE5oyH5a6a5Y6G5Y+y5q2l6aqk5LiN5a2Y5Zyo44CCXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZm9ybV9jdXJyZW50X2ZpZWxkc19jb2RlID0gZm9ybS5jdXJyZW50LmZpZWxkcy5nZXRQcm9wZXJ0eShcImNvZGVcIik7XG4gICAgICAgIGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgICAgICByZXR1cm4gc3RlcC5maWVsZHNfbW9kaWZpYWJsZSA9IF8uaW50ZXJzZWN0aW9uKHN0ZXAuZmllbGRzX21vZGlmaWFibGUsIGZvcm1fY3VycmVudF9maWVsZHNfY29kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZm9ybS5zdGF0ZSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgIGRiLmZvcm1zLnVwZGF0ZSh7XG4gICAgICAgICAgICBfaWQ6IGZvcm0uX2lkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICBcInN0YXRlXCI6IFwiZW5hYmxlZFwiLFxuICAgICAgICAgICAgICBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZF9ieVwiOiBfdXNlcklkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZmxvdy5jdXJyZW50Lm1vZGlmaWVkID0gbm93O1xuICAgICAgICBmbG93LmN1cnJlbnQuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgZmxvdy5jdXJyZW50Lm1vZGlmaWVkX2J5ID0gX3VzZXJJZDtcbiAgICAgICAgcmV0dXJuIGRiLmZsb3dzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBmbG93Ll9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImVuYWJsZWRcIixcbiAgICAgICAgICAgIFwiY3VycmVudFwiOiBmbG93LmN1cnJlbnRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGIuZmxvd3MudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGZsb3cuX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csXG4gICAgICAgICAgICBcImN1cnJlbnQubW9kaWZpZWRfYnlcIjogX3VzZXJJZFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIF9mbG93cyA9IGRiLmZsb3dzLmZpbmQoe1xuICAgICAgICAgIGZvcm06IGZvcm0uX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIF9pZDogMSxcbiAgICAgICAgICAgIHN0YXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgICBfZmxvd3Nfc3RhdGUgPSBfZmxvd3MuZ2V0UHJvcGVydHkoXCJzdGF0ZVwiKTtcbiAgICAgICAgaWYgKCFfZmxvd3Nfc3RhdGUuaW5jbHVkZXMoJ2VuYWJsZWQnKSkge1xuICAgICAgICAgIHJldHVybiBkYi5mb3Jtcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBmb3JtLl9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdyxcbiAgICAgICAgICAgICAgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblxyXG5cdGhpZGVfaW5zdGFuY2U6IChpbnNJZCwgaXNfaGlkZGVuKSAtPlxyXG5cdFx0aWYgIXRoaXMudXNlcklkXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGNoZWNrKGluc0lkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhpc19oaWRkZW4sIEJvb2xlYW4pXHJcblxyXG5cdFx0dXNlcklkID0gdGhpcy51c2VySWRcclxuXHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc0lkLCB7IGZpZWxkczogeyBzdGF0ZTogMSwgZmxvdzogMSwgc3BhY2U6IDEgfSB9KVxyXG5cclxuXHRcdGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNlVwiKVxyXG5cclxuXHRcdGlmIGluc3RhbmNlLnN0YXRlIGlzbnQgJ2NvbXBsZXRlZCdcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnirbmgIHkuI3mmK/lt7Lnu5PmnZ9cIilcclxuXHJcblx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIHVzZXJJZClcclxuXHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoaW5zdGFuY2Uuc3BhY2UsIHsgZmllbGRzOiB7IGFkbWluczogMSB9IH0pXHJcblx0XHRpZiAobm90IHBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VySWQpKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKVxyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoaW5zSWQsIHsgJHNldDogeyBpc19oaWRkZW46IGlzX2hpZGRlbiB9IH0pXHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgaGlkZV9pbnN0YW5jZTogZnVuY3Rpb24oaW5zSWQsIGlzX2hpZGRlbikge1xuICAgIHZhciBpbnN0YW5jZSwgcGVybWlzc2lvbnMsIHNwYWNlLCB1c2VySWQ7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGVjayhpbnNJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhpc19oaWRkZW4sIEJvb2xlYW4pO1xuICAgIHVzZXJJZCA9IHRoaXMudXNlcklkO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgZmxvdzogMSxcbiAgICAgICAgc3BhY2U6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNlVwiKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlICE9PSAnY29tcGxldGVkJykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnirbmgIHkuI3mmK/lt7Lnu5PmnZ9cIik7XG4gICAgfVxuICAgIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIHVzZXJJZCk7XG4gICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShpbnN0YW5jZS5zcGFjZSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGFkbWluczogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgoIXBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpICYmICghc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJJZCkpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKTtcbiAgICB9XG4gICAgZGIuaW5zdGFuY2VzLnVwZGF0ZShpbnNJZCwge1xuICAgICAgJHNldDoge1xuICAgICAgICBpc19oaWRkZW46IGlzX2hpZGRlblxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0Z2V0SW5zdGFuY2VWYWx1ZXM6IChpbnNJZCktPlxyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc0lkfSwge2ZpZWxkczoge3ZhbHVlczogMX19KT8udmFsdWVzIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBnZXRJbnN0YW5jZVZhbHVlczogZnVuY3Rpb24oaW5zSWQpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIChyZWYgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHZhbHVlczogMVxuICAgICAgfVxuICAgIH0pKSAhPSBudWxsID8gcmVmLnZhbHVlcyA6IHZvaWQgMDtcbiAgfVxufSk7XG4iLCJDb29raWVzID0gcmVxdWlyZShcImNvb2tpZXNcIilcclxuXHJcbmdldEluc3RhbmNlUmVhZE9ubHkgPSAocmVxLCByZXMsIG5leHQsIG9wdGlvbnMpIC0+XHJcblxyXG5cdHVzZXIgPSBTdGVlZG9zLmdldEFQSUxvZ2luVXNlcihyZXEsIHJlcylcclxuXHJcblx0aWYgcmVxPy5xdWVyeT8uYWNjZXNzX3Rva2VuXHJcblx0XHR1c2VySWQgPSBTdGVlZG9zLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihyZXEucXVlcnkuYWNjZXNzX3Rva2VuKVxyXG5cdFx0aWYgdXNlcklkXHJcblx0XHRcdHVzZXIgPSBNZXRlb3IudXNlcnMuZmluZE9uZSh7X2lkOiB1c2VySWR9KVxyXG5cclxuXHRzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZVxyXG5cclxuXHRpbnN0YW5jZUlkID0gcmVxLnBhcmFtcy5pbnN0YW5jZV9pZFxyXG5cclxuXHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9KTtcclxuXHJcblx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZSh7X2lkOiBzcGFjZUlkfSk7XHJcblxyXG5cdGhpZGVfdHJhY2VzID0gcmVxLnF1ZXJ5Py5oaWRlX3RyYWNlc1xyXG5cclxuXHRpZiAhb3B0aW9uc1xyXG5cdFx0b3B0aW9ucyA9IHtzaG93VHJhY2U6IHRydWV9XHJcblx0ZWxzZVxyXG5cdFx0b3B0aW9ucy5zaG93VHJhY2UgPSB0cnVlXHJcblxyXG5cdGlmIGhpZGVfdHJhY2VzIGlzIFwiMVwiXHJcblx0XHRpZiBvcHRpb25zXHJcblx0XHRcdG9wdGlvbnMuc2hvd1RyYWNlID0gZmFsc2VcclxuXHRcdGVsc2VcclxuXHRcdFx0b3B0aW9ucyA9IHtzaG93VHJhY2U6IGZhbHNlfVxyXG5cclxuXHRpZiAhb3B0aW9ucy5zaG93QXR0YWNobWVudHNcclxuXHRcdG9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzID0gdHJ1ZVxyXG5cclxuXHRpZiAhc3BhY2VcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdGlmICAhaW5zdGFuY2VcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIGluc3RhbmNlXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdGlmICF1c2VyXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLUF1dGgtVG9rZW4sWC1Vc2VyLUlkXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdGlmIGluc3RhbmNlLnNwYWNlICE9IHNwYWNlSWRcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlIG9yIGluc3RhbmNlXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cclxuXHJcblx0c3BhY2VVc2VyQ291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgdXNlcjogdXNlci5faWQsIHNwYWNlOiBzcGFjZUlkIH0pLmNvdW50KClcclxuXHJcblx0aWYgc3BhY2VVc2VyQ291bnQgaXMgMFxyXG5cdFx0aWYgIXNwYWNlXHJcblx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0Y29kZTogNDAxLFxyXG5cdFx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNhcGNlVXNlclwiLFxyXG5cdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0I+agoemqjHVzZXLmmK/lkKblr7lpbnN0YW5jZeacieafpeeci+adg+mZkFxyXG5cdF9oYXNQZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0luc3RhbmNlUGVybWlzc2lvbnModXNlciwgaW5zdGFuY2UpXHJcblxyXG5cdGlmICFfaGFzUGVybWlzc2lvbiAgJiYgaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlXHJcblx0XHRfcGFyZW50X2luc3RhbmNlcyA9IF8udW5pb24oW2luc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZV0sIGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMgfHwgW10pXHJcblxyXG5cdFx0X2hhc1Blcm1pc3Npb24gPSBfLmZpbmQgX3BhcmVudF9pbnN0YW5jZXMsIChfcGFyZW50X2lkKS0+XHJcblx0XHRcdF9wYXJlbnRfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDpfcGFyZW50X2lkfSwge2ZpZWxkczoge3RyYWNlczogMH19KVxyXG5cclxuXHRcdFx0cmV0dXJuIFdvcmtmbG93TWFuYWdlci5oYXNJbnN0YW5jZVBlcm1pc3Npb25zKHVzZXIsIF9wYXJlbnRfaW5zKVxyXG5cclxuXHRpZiAhX2hhc1Blcm1pc3Npb25cclxuXHRcdF9sb2NhbGUgPSBTdGVlZG9zLmxvY2FsZSh1c2VyLl9pZCwgdHJ1ZSlcclxuXHRcdGVycm9yID0gVEFQaTE4bi5fXyhcImluc3RhbmNlX3Blcm1pc3Npb25zX2Vycm9yXCIsIHt9LCBfbG9jYWxlKVxyXG5cdFx0cmVzLmNoYXJzZXQgPSBcInV0Zi04XCJcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IGVycm9yLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHRodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblx0ZGF0YUJ1ZiA9IG5ldyBCdWZmZXIoaHRtbCk7XHJcblx0cmVzLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBkYXRhQnVmLmxlbmd0aClcclxuXHRyZXMuc2V0SGVhZGVyKCdjb250ZW50LXJhbmdlJywgXCJieXRlcyAwLSN7ZGF0YUJ1Zi5sZW5ndGggLSAxfS8je2RhdGFCdWYubGVuZ3RofVwiKVxyXG5cdHJlcy5zdGF0dXNDb2RlID0gMjAwXHJcblx0cmVzLmVuZChodG1sKVxyXG5cclxuSnNvblJvdXRlcy5hZGQgXCJnZXRcIiwgXCIvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvcmVhZG9ubHkvOmluc3RhbmNlX2lkXCIsIGdldEluc3RhbmNlUmVhZE9ubHlcclxuXHJcbkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL3dvcmtmbG93L3NwYWNlLzpzcGFjZS92aWV3L3JlYWRvbmx5LzppbnN0YW5jZV9pZC86aW5zdGFuY2VfbmFtZVwiLCAocmVxLCByZXMsIG5leHQpLT5cclxuXHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XHJcblx0cmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScrZW5jb2RlVVJJKHJlcS5wYXJhbXMuaW5zdGFuY2VfbmFtZSkpO1xyXG5cdHJlcy5zZXRIZWFkZXIoJ1RyYW5zZmVyLUVuY29kaW5nJywgJycpXHJcblxyXG5cdG9wdGlvbnMgPSB7YWJzb2x1dGU6IHRydWV9XHJcblxyXG5cdHJldHVybiBnZXRJbnN0YW5jZVJlYWRPbmx5KHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKVxyXG4jIyNcclxuXHTojrflj5bnlLPor7fljZXliJfooajvvJpcclxuICAgIGZpbmFsX2RlY2lzaW9u77ya5a6h5om557uT5p6cXHJcbiAgICBzdGF0ZTog55Sz6K+35Y2V54q25oCBXHJcbiMjI1xyXG5Kc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvaW5zdGFuY2VzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHJcblx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdHJldHVybiA7XHJcblxyXG5cdHVzZXJfaWQgPSByZXEudXNlcklkXHJcblxyXG5cdHNwYWNlSWQgPSByZXEuaGVhZGVyc1tcIngtc3BhY2UtaWRcIl1cclxuXHJcblx0aWYgbm90IHNwYWNlSWRcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIFgtU3BhY2UtSWRcIixcclxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdHJldHVybjtcclxuXHJcblx0Zmxvd0lkID0gcmVxLnF1ZXJ5Py5mbG93SWRcclxuXHJcblx0aWYgIWZsb3dJZFxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogNDAwLFxyXG5cdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgZmxvd0lkXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdHF1ZXJ5ID0ge31cclxuXHJcblx0cmV0X3N5bmNfdG9rZW4gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuXHRmbG93SWRzID0gZmxvd0lkLnNwbGl0KFwiLFwiKVxyXG5cclxuXHJcblx0Zmxvd3MgPSBkYi5mbG93cy5maW5kKHtfaWQ6IHskaW46IGZsb3dJZHN9fSkuZmV0Y2goKVxyXG5cclxuXHRpID0gMFxyXG5cdHdoaWxlIGkgPCBmbG93cy5sZW5ndGhcclxuXHRcdGYgPSBmbG93c1tpXVxyXG5cdFx0c3BhY2VVc2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7c3BhY2U6IGYuc3BhY2UsIHVzZXI6IHVzZXJfaWR9KVxyXG5cdFx0aWYgIXNwYWNlVXNlclxyXG5cdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm8gcGVybWlzc2lvbiwgZmxvdyBpcyAje2YuX2lkfVwiLFxyXG5cdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdHJldHVybjtcclxuXHRcdGVsc2VcclxuXHJcblx0I1x05piv5ZCm5bel5L2c5Yy6566h55CG5ZGYXHJcblx0XHRpZiAhU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgdXNlcl9pZClcclxuXHRcdFx0c3BhY2VVc2VyT3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XHJcblx0XHRcdFx0X2lkOiB7XHJcblx0XHRcdFx0XHQkaW46IHNwYWNlVXNlci5vcmdhbml6YXRpb25zXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KS5mZXRjaCgpO1xyXG5cclxuXHRcdFx0aWYgIVdvcmtmbG93TWFuYWdlci5jYW5Nb25pdG9yKGYsIHNwYWNlVXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucykgJiYgIVdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb24sIGZsb3cgaXMgI3tmLl9pZH1cIixcclxuXHRcdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0aSsrXHJcblxyXG5cclxuXHRxdWVyeS5mbG93ID0geyRpbjogZmxvd0lkc31cclxuXHJcblx0cXVlcnkuc3BhY2UgPSBzcGFjZUlkXHJcblxyXG5cdGlmIHJlcS5xdWVyeT8uc3luY190b2tlblxyXG5cdFx0c3luY190b2tlbiA9IG5ldyBEYXRlKE51bWJlcihyZXEucXVlcnkuc3luY190b2tlbikpXHJcblx0XHRxdWVyeS5tb2RpZmllZCA9IHskZ3Q6IHN5bmNfdG9rZW59XHJcblxyXG5cdGlmIHJlcS5xdWVyeT8uZmluYWxfZGVjaXNpb25cclxuXHRcdHF1ZXJ5LmZpbmFsX2RlY2lzaW9uID0geyRpbiA6IHJlcS5xdWVyeS5maW5hbF9kZWNpc2lvbi5zcGxpdChcIixcIil9XHJcblx0ZWxzZVxyXG5cdFx0cXVlcnkuZmluYWxfZGVjaXNpb24gPSB7JG5pbjogW1widGVybWluYXRlZFwiLCBcInJlamVjdGVkXCJdfVxyXG5cclxuXHRpZiByZXEucXVlcnk/LnN0YXRlXHJcblx0XHRxdWVyeS5zdGF0ZSA9IHskaW46IHJlcS5xdWVyeS5zdGF0ZS5zcGxpdChcIixcIil9XHJcblx0ZWxzZVxyXG5cdFx0cXVlcnkuc3RhdGUgPSBcImNvbXBsZXRlZFwiXHJcblxyXG4jXHTmnIDlpJrov5Tlm541MDDmnaHmlbDmja5cclxuXHRpbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge2ZpZWxkczoge2luYm94X3VlcnM6IDAsIGNjX3VzZXJzOiAwLCBvdXRib3hfdXNlcnM6IDAsIHRyYWNlczogMCwgYXR0YWNobWVudHM6IDB9LCBza2lwOiAwLCBsaW1pdDogNTAwfSkuZmV0Y2goKVxyXG5cdGluc3RhbmNlcy5mb3JFYWNoIChpbnN0YW5jZSktPlxyXG5cclxuXHRcdGF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZS5faWQsJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyRuZTogdHJ1ZX19LCB7ZmllbGRzOiB7Y29waWVzOiAwfX0pLmZldGNoKClcclxuXHJcblx0XHRpbnN0YW5jZS5hdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzXHJcblxyXG5cclxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXHJcblx0XHRcdFx0XCJzeW5jX3Rva2VuXCI6IHJldF9zeW5jX3Rva2VuXHJcblx0XHRcdFx0XCJkYXRhXCI6IGluc3RhbmNlc1xyXG5cdHJldHVybjtcclxuIiwidmFyIENvb2tpZXMsIGdldEluc3RhbmNlUmVhZE9ubHk7XG5cbkNvb2tpZXMgPSByZXF1aXJlKFwiY29va2llc1wiKTtcblxuZ2V0SW5zdGFuY2VSZWFkT25seSA9IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKSB7XG4gIHZhciBfaGFzUGVybWlzc2lvbiwgX2xvY2FsZSwgX3BhcmVudF9pbnN0YW5jZXMsIGRhdGFCdWYsIGVycm9yLCBoaWRlX3RyYWNlcywgaHRtbCwgaW5zdGFuY2UsIGluc3RhbmNlSWQsIHJlZiwgcmVmMSwgc3BhY2UsIHNwYWNlSWQsIHNwYWNlVXNlckNvdW50LCB1c2VyLCB1c2VySWQ7XG4gIHVzZXIgPSBTdGVlZG9zLmdldEFQSUxvZ2luVXNlcihyZXEsIHJlcyk7XG4gIGlmIChyZXEgIT0gbnVsbCA/IChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuYWNjZXNzX3Rva2VuIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgdXNlcklkID0gU3RlZWRvcy5nZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4ocmVxLnF1ZXJ5LmFjY2Vzc190b2tlbik7XG4gICAgaWYgKHVzZXJJZCkge1xuICAgICAgdXNlciA9IE1ldGVvci51c2Vycy5maW5kT25lKHtcbiAgICAgICAgX2lkOiB1c2VySWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZTtcbiAgaW5zdGFuY2VJZCA9IHJlcS5wYXJhbXMuaW5zdGFuY2VfaWQ7XG4gIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgIF9pZDogaW5zdGFuY2VJZFxuICB9KTtcbiAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZSh7XG4gICAgX2lkOiBzcGFjZUlkXG4gIH0pO1xuICBoaWRlX3RyYWNlcyA9IChyZWYxID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMS5oaWRlX3RyYWNlcyA6IHZvaWQgMDtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHNob3dUcmFjZTogdHJ1ZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucy5zaG93VHJhY2UgPSB0cnVlO1xuICB9XG4gIGlmIChoaWRlX3RyYWNlcyA9PT0gXCIxXCIpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgb3B0aW9ucy5zaG93VHJhY2UgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgc2hvd1RyYWNlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCFvcHRpb25zLnNob3dBdHRhY2htZW50cykge1xuICAgIG9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzID0gdHJ1ZTtcbiAgfVxuICBpZiAoIXNwYWNlKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWluc3RhbmNlKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIGluc3RhbmNlXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXVzZXIpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgWC1BdXRoLVRva2VuLFgtVXNlci1JZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluc3RhbmNlLnNwYWNlICE9PSBzcGFjZUlkKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlIG9yIGluc3RhbmNlXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBzcGFjZVVzZXJDb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgIHVzZXI6IHVzZXIuX2lkLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0pLmNvdW50KCk7XG4gIGlmIChzcGFjZVVzZXJDb3VudCA9PT0gMCkge1xuICAgIGlmICghc3BhY2UpIHtcbiAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogNDAxLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBzYXBjZVVzZXJcIixcbiAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIF9oYXNQZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0luc3RhbmNlUGVybWlzc2lvbnModXNlciwgaW5zdGFuY2UpO1xuICBpZiAoIV9oYXNQZXJtaXNzaW9uICYmIGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSkge1xuICAgIF9wYXJlbnRfaW5zdGFuY2VzID0gXy51bmlvbihbaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlXSwgaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcyB8fCBbXSk7XG4gICAgX2hhc1Blcm1pc3Npb24gPSBfLmZpbmQoX3BhcmVudF9pbnN0YW5jZXMsIGZ1bmN0aW9uKF9wYXJlbnRfaWQpIHtcbiAgICAgIHZhciBfcGFyZW50X2lucztcbiAgICAgIF9wYXJlbnRfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IF9wYXJlbnRfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdHJhY2VzOiAwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFdvcmtmbG93TWFuYWdlci5oYXNJbnN0YW5jZVBlcm1pc3Npb25zKHVzZXIsIF9wYXJlbnRfaW5zKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoIV9oYXNQZXJtaXNzaW9uKSB7XG4gICAgX2xvY2FsZSA9IFN0ZWVkb3MubG9jYWxlKHVzZXIuX2lkLCB0cnVlKTtcbiAgICBlcnJvciA9IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9wZXJtaXNzaW9uc19lcnJvclwiLCB7fSwgX2xvY2FsZSk7XG4gICAgcmVzLmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IGVycm9yLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaHRtbCA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgZGF0YUJ1ZiA9IG5ldyBCdWZmZXIoaHRtbCk7XG4gIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgZGF0YUJ1Zi5sZW5ndGgpO1xuICByZXMuc2V0SGVhZGVyKCdjb250ZW50LXJhbmdlJywgXCJieXRlcyAwLVwiICsgKGRhdGFCdWYubGVuZ3RoIC0gMSkgKyBcIi9cIiArIGRhdGFCdWYubGVuZ3RoKTtcbiAgcmVzLnN0YXR1c0NvZGUgPSAyMDA7XG4gIHJldHVybiByZXMuZW5kKGh0bWwpO1xufTtcblxuSnNvblJvdXRlcy5hZGQoXCJnZXRcIiwgXCIvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvcmVhZG9ubHkvOmluc3RhbmNlX2lkXCIsIGdldEluc3RhbmNlUmVhZE9ubHkpO1xuXG5Kc29uUm91dGVzLmFkZChcImdldFwiLCBcIi93b3JrZmxvdy9zcGFjZS86c3BhY2Uvdmlldy9yZWFkb25seS86aW5zdGFuY2VfaWQvOmluc3RhbmNlX25hbWVcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIG9wdGlvbnM7XG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LW1zZG93bmxvYWQnKTtcbiAgcmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScgKyBlbmNvZGVVUkkocmVxLnBhcmFtcy5pbnN0YW5jZV9uYW1lKSk7XG4gIHJlcy5zZXRIZWFkZXIoJ1RyYW5zZmVyLUVuY29kaW5nJywgJycpO1xuICBvcHRpb25zID0ge1xuICAgIGFic29sdXRlOiB0cnVlXG4gIH07XG4gIHJldHVybiBnZXRJbnN0YW5jZVJlYWRPbmx5KHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKTtcbn0pO1xuXG5cbi8qXG5cdOiOt+WPlueUs+ivt+WNleWIl+ihqO+8mlxuICAgIGZpbmFsX2RlY2lzaW9u77ya5a6h5om557uT5p6cXG4gICAgc3RhdGU6IOeUs+ivt+WNleeKtuaAgVxuICovXG5cbkpzb25Sb3V0ZXMuYWRkKFwiZ2V0XCIsIFwiL2FwaS93b3JrZmxvdy9pbnN0YW5jZXNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGYsIGZsb3dJZCwgZmxvd0lkcywgZmxvd3MsIGksIGluc3RhbmNlcywgcXVlcnksIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmV0X3N5bmNfdG9rZW4sIHNwYWNlSWQsIHNwYWNlVXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucywgc3luY190b2tlbiwgdXNlcl9pZDtcbiAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHVzZXJfaWQgPSByZXEudXNlcklkO1xuICBzcGFjZUlkID0gcmVxLmhlYWRlcnNbXCJ4LXNwYWNlLWlkXCJdO1xuICBpZiAoIXNwYWNlSWQpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgWC1TcGFjZS1JZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgZmxvd0lkID0gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5mbG93SWQgOiB2b2lkIDA7XG4gIGlmICghZmxvd0lkKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIGZsb3dJZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgcXVlcnkgPSB7fTtcbiAgcmV0X3N5bmNfdG9rZW4gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgZmxvd0lkcyA9IGZsb3dJZC5zcGxpdChcIixcIik7XG4gIGZsb3dzID0gZGIuZmxvd3MuZmluZCh7XG4gICAgX2lkOiB7XG4gICAgICAkaW46IGZsb3dJZHNcbiAgICB9XG4gIH0pLmZldGNoKCk7XG4gIGkgPSAwO1xuICB3aGlsZSAoaSA8IGZsb3dzLmxlbmd0aCkge1xuICAgIGYgPSBmbG93c1tpXTtcbiAgICBzcGFjZVVzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICAgIHNwYWNlOiBmLnNwYWNlLFxuICAgICAgdXNlcjogdXNlcl9pZFxuICAgIH0pO1xuICAgIGlmICghc3BhY2VVc2VyKSB7XG4gICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDQwMSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb24sIGZsb3cgaXMgXCIgKyBmLl9pZCxcbiAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcblxuICAgIH1cbiAgICBpZiAoIVN0ZWVkb3MuaXNTcGFjZUFkbWluKHNwYWNlSWQsIHVzZXJfaWQpKSB7XG4gICAgICBzcGFjZVVzZXJPcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBzcGFjZVVzZXIub3JnYW5pemF0aW9uc1xuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgICAgaWYgKCFXb3JrZmxvd01hbmFnZXIuY2FuTW9uaXRvcihmLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpICYmICFXb3JrZmxvd01hbmFnZXIuY2FuQWRtaW4oZiwgc3BhY2VVc2VyLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zKSkge1xuICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgY29kZTogNDAxLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb24sIGZsb3cgaXMgXCIgKyBmLl9pZCxcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaSsrO1xuICB9XG4gIHF1ZXJ5LmZsb3cgPSB7XG4gICAgJGluOiBmbG93SWRzXG4gIH07XG4gIHF1ZXJ5LnNwYWNlID0gc3BhY2VJZDtcbiAgaWYgKChyZWYxID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMS5zeW5jX3Rva2VuIDogdm9pZCAwKSB7XG4gICAgc3luY190b2tlbiA9IG5ldyBEYXRlKE51bWJlcihyZXEucXVlcnkuc3luY190b2tlbikpO1xuICAgIHF1ZXJ5Lm1vZGlmaWVkID0ge1xuICAgICAgJGd0OiBzeW5jX3Rva2VuXG4gICAgfTtcbiAgfVxuICBpZiAoKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLmZpbmFsX2RlY2lzaW9uIDogdm9pZCAwKSB7XG4gICAgcXVlcnkuZmluYWxfZGVjaXNpb24gPSB7XG4gICAgICAkaW46IHJlcS5xdWVyeS5maW5hbF9kZWNpc2lvbi5zcGxpdChcIixcIilcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5LmZpbmFsX2RlY2lzaW9uID0ge1xuICAgICAgJG5pbjogW1widGVybWluYXRlZFwiLCBcInJlamVjdGVkXCJdXG4gICAgfTtcbiAgfVxuICBpZiAoKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLnN0YXRlIDogdm9pZCAwKSB7XG4gICAgcXVlcnkuc3RhdGUgPSB7XG4gICAgICAkaW46IHJlcS5xdWVyeS5zdGF0ZS5zcGxpdChcIixcIilcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5LnN0YXRlID0gXCJjb21wbGV0ZWRcIjtcbiAgfVxuICBpbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgIGZpZWxkczoge1xuICAgICAgaW5ib3hfdWVyczogMCxcbiAgICAgIGNjX3VzZXJzOiAwLFxuICAgICAgb3V0Ym94X3VzZXJzOiAwLFxuICAgICAgdHJhY2VzOiAwLFxuICAgICAgYXR0YWNobWVudHM6IDBcbiAgICB9LFxuICAgIHNraXA6IDAsXG4gICAgbGltaXQ6IDUwMFxuICB9KS5mZXRjaCgpO1xuICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgIHZhciBhdHRhY2htZW50cztcbiAgICBhdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZS5faWQsXG4gICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG4gICAgICBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjoge1xuICAgICAgICAkbmU6IHRydWVcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgY29waWVzOiAwXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICByZXR1cm4gaW5zdGFuY2UuYXR0YWNobWVudHMgPSBhdHRhY2htZW50cztcbiAgfSk7XG4gIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICBjb2RlOiAyMDAsXG4gICAgZGF0YToge1xuICAgICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG4gICAgICBcInN5bmNfdG9rZW5cIjogcmV0X3N5bmNfdG9rZW4sXG4gICAgICBcImRhdGFcIjogaW5zdGFuY2VzXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiXHJcbkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL3N0ZWVkb3MtY3NzXCIsIChyZXEsIHJlcywgbmV4dCktPlxyXG5cclxuXHRhbGxDc3MgPSBXZWJBcHAuZ2V0UmVmcmVzaGFibGVBc3NldHMoKVxyXG5cclxuXHRhbGxDc3NMaW5rID0gXCJcIlxyXG5cclxuXHRhbGxDc3MuZm9yRWFjaCAoY3NzKSAtPlxyXG5cdFx0aWYgX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWFxyXG5cdFx0XHRyb290VXJsID0gX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTFxyXG5cdFx0XHRpZiByb290VXJsLmVuZHNXaXRoKFwiL1wiKVxyXG5cdFx0XHRcdGNzc0hyZWYgPSByb290VXJsLnJlcGxhY2UoX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCArIFwiL1wiLCBcIlwiKSArIGNzcy51cmxcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGNzc0hyZWYgPSByb290VXJsLnJlcGxhY2UoX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCwgXCJcIikgKyBjc3MudXJsXHJcblx0XHRlbHNlXHJcblx0XHRcdGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoY3NzLnVybClcclxuXHRcdGFsbENzc0xpbmsgKz0gXCJAaW1wb3J0IHVybCgje2Nzc0hyZWZ9KTtcIlxyXG5cclxuXHRyZXMuc3RhdHVzQ29kZSA9IDIwMFxyXG5cdHJlcy5lbmQoYWxsQ3NzTGluaykiLCJKc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9zdGVlZG9zLWNzc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYWxsQ3NzLCBhbGxDc3NMaW5rO1xuICBhbGxDc3MgPSBXZWJBcHAuZ2V0UmVmcmVzaGFibGVBc3NldHMoKTtcbiAgYWxsQ3NzTGluayA9IFwiXCI7XG4gIGFsbENzcy5mb3JFYWNoKGZ1bmN0aW9uKGNzcykge1xuICAgIHZhciBjc3NIcmVmLCByb290VXJsO1xuICAgIGlmIChfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMX1BBVEhfUFJFRklYKSB7XG4gICAgICByb290VXJsID0gX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTDtcbiAgICAgIGlmIChyb290VXJsLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICBjc3NIcmVmID0gcm9vdFVybC5yZXBsYWNlKF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggKyBcIi9cIiwgXCJcIikgKyBjc3MudXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3NzSHJlZiA9IHJvb3RVcmwucmVwbGFjZShfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMX1BBVEhfUFJFRklYLCBcIlwiKSArIGNzcy51cmw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoY3NzLnVybCk7XG4gICAgfVxuICAgIHJldHVybiBhbGxDc3NMaW5rICs9IFwiQGltcG9ydCB1cmwoXCIgKyBjc3NIcmVmICsgXCIpO1wiO1xuICB9KTtcbiAgcmVzLnN0YXR1c0NvZGUgPSAyMDA7XG4gIHJldHVybiByZXMuZW5kKGFsbENzc0xpbmspO1xufSk7XG4iLCJKc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvZHJhZnQvOmZsb3dcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRyZXR1cm5cclxuXHJcblx0dXNlcl9pZCA9IHJlcS51c2VySWRcclxuXHJcblx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IHVzZXJfaWQgfSlcclxuXHJcblx0c3BhY2VJZCA9IHJlcS5wYXJhbXMuc3BhY2VcclxuXHJcblx0Zmxvd0lkID0gcmVxLnBhcmFtcy5mbG93XHJcblxyXG5cdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoeyBfaWQ6IHNwYWNlSWQgfSlcclxuXHJcblx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGZsb3dJZCB9LCB7IGZpZWxkczogeyBuYW1lOiAxLCAnY3VycmVudC5faWQnOiAxLCBmb3JtOiAxIH0gfSlcclxuXHJcblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoeyBfaWQ6IGZsb3cuZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5faWQnOiAxIH0gfSlcclxuXHJcblx0b3B0aW9ucyA9IHtcclxuXHRcdHNob3dUcmFjZTogZmFsc2UsXHJcblx0XHRzaG93QXR0YWNobWVudHM6IGZhbHNlLFxyXG5cdFx0dGVtcGxhdGVOYW1lOiBcImRlZmF1bHRcIixcclxuXHRcdGVkaXRhYmxlOiB0cnVlLFxyXG5cdFx0d2lkdGg6IFwiMTAwJVwiLFxyXG5cdFx0aW5zdGFuY2Vfc3R5bGU6IFwiaW5zdGFuY2UtZGVmYXVsdFwiLFxyXG5cdFx0cGx1Z2luczogXCJcIlwiXHJcblxyXG5cdFx0XHQ8bWV0YSBodHRwLWVxdWl2PVwiWC1VQS1Db21wYXRpYmxlXCIgY29udGVudD1cIklFPWVkZ2UsY2hyb21lPTFcIiAvPlxyXG5cdFx0XHQ8bWV0YSBuYW1lPVwiZm9ybWF0LWRldGVjdGlvblwiIGNvbnRlbnQ9XCJ0ZWxlcGhvbmU9bm9cIj5cclxuXHRcdFx0PG1ldGEgaHR0cC1lcXVpdj1cIngtcmltLWF1dG8tbWF0Y2hcIiBjb250ZW50PVwibm9uZVwiPlxyXG5cdFx0XHQ8dGl0bGU+I3tmbG93Lm5hbWV9PC90aXRsZT5cclxuXHRcdFx0PG1ldGEgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9MCcgbmFtZT0ndmlld3BvcnQnIC8+XHJcblx0XHRcdDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGhcIiAvPlxyXG5cclxuXHRcdFx0PGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvY3NzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5taW4uY3NzXCI+XHJcblxyXG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9qcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxyXG5cclxuXHRcdFx0PHNjcmlwdCBzcmM9XCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvanMvbG9jYWxlcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIuemgtQ04uanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgY2hhcnNldD1cIlVURi04XCI+PC9zY3JpcHQ+XHJcblxyXG5cdFx0XHQ8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmNzc1wiPlxyXG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxyXG5cdFx0XHQ8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cIi9qcy93b3JrZmxvd19jbGllbnQuY3NzXCI+XHJcblx0XHRcdDxzY3JpcHQgc3JjPVwiL2pzL3dvcmtmbG93X2NsaWVudC5qc1wiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj48L3NjcmlwdD5cclxuXHRcdFwiXCJcIlxyXG5cdH1cclxuXHJcblx0aW5zdGFuY2UgPSB7XHJcblx0XHRmbG93OiBmbG93Ll9pZCxcclxuXHRcdGZsb3dfdmVyc2lvbjogZmxvdy5jdXJyZW50Ll9pZCxcclxuXHRcdGZvcm06IGZvcm0uX2lkLFxyXG5cdFx0Zm9ybV92ZXJzaW9uOiBmb3JtLmN1cnJlbnQuX2lkLFxyXG5cdFx0dmFsdWVzOiB7fSxcclxuXHRcdG5hbWU6IGZsb3cubmFtZSxcclxuXHRcdHNwYWNlOiBzcGFjZUlkXHJcblx0fVxyXG5cclxuXHRodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblxyXG5cdGRhdGFCdWYgPSBuZXcgQnVmZmVyKGh0bWwpXHJcblxyXG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgZGF0YUJ1Zi5sZW5ndGgpXHJcblxyXG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtcmFuZ2UnLCBcImJ5dGVzIDAtI3tkYXRhQnVmLmxlbmd0aCAtIDF9LyN7ZGF0YUJ1Zi5sZW5ndGh9XCIpXHJcblxyXG5cdHJlcy5zdGF0dXNDb2RlID0gMjAwXHJcblxyXG5cdHJlcy5lbmQoaHRtbClcclxuIiwiSnNvblJvdXRlcy5hZGQoXCJnZXRcIiwgXCIvYXBpL3dvcmtmbG93L3NwYWNlLzpzcGFjZS92aWV3L2RyYWZ0LzpmbG93XCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBkYXRhQnVmLCBmbG93LCBmbG93SWQsIGZvcm0sIGh0bWwsIGluc3RhbmNlLCBvcHRpb25zLCBzcGFjZSwgc3BhY2VJZCwgdXNlciwgdXNlcl9pZDtcbiAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHVzZXJfaWQgPSByZXEudXNlcklkO1xuICB1c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgX2lkOiB1c2VyX2lkXG4gIH0pO1xuICBzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZTtcbiAgZmxvd0lkID0gcmVxLnBhcmFtcy5mbG93O1xuICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHtcbiAgICBfaWQ6IHNwYWNlSWRcbiAgfSk7XG4gIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICBfaWQ6IGZsb3dJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgJ2N1cnJlbnQuX2lkJzogMSxcbiAgICAgIGZvcm06IDFcbiAgICB9XG4gIH0pO1xuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgX2lkOiBmbG93LmZvcm1cbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgJ2N1cnJlbnQuX2lkJzogMVxuICAgIH1cbiAgfSk7XG4gIG9wdGlvbnMgPSB7XG4gICAgc2hvd1RyYWNlOiBmYWxzZSxcbiAgICBzaG93QXR0YWNobWVudHM6IGZhbHNlLFxuICAgIHRlbXBsYXRlTmFtZTogXCJkZWZhdWx0XCIsXG4gICAgZWRpdGFibGU6IHRydWUsXG4gICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgIGluc3RhbmNlX3N0eWxlOiBcImluc3RhbmNlLWRlZmF1bHRcIixcbiAgICBwbHVnaW5zOiBcIlxcbjxtZXRhIGh0dHAtZXF1aXY9XFxcIlgtVUEtQ29tcGF0aWJsZVxcXCIgY29udGVudD1cXFwiSUU9ZWRnZSxjaHJvbWU9MVxcXCIgLz5cXG48bWV0YSBuYW1lPVxcXCJmb3JtYXQtZGV0ZWN0aW9uXFxcIiBjb250ZW50PVxcXCJ0ZWxlcGhvbmU9bm9cXFwiPlxcbjxtZXRhIGh0dHAtZXF1aXY9XFxcIngtcmltLWF1dG8tbWF0Y2hcXFwiIGNvbnRlbnQ9XFxcIm5vbmVcXFwiPlxcbjx0aXRsZT5cIiArIGZsb3cubmFtZSArIFwiPC90aXRsZT5cXG48bWV0YSBjb250ZW50PSd3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT0wJyBuYW1lPSd2aWV3cG9ydCcgLz5cXG48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoXFxcIiAvPlxcblxcbjxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgdHlwZT1cXFwidGV4dC9jc3NcXFwiIGhyZWY9XFxcIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9jc3MvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLm1pbi5jc3NcXFwiPlxcblxcbjxzY3JpcHQgc3JjPVxcXCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvanMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLm1pbi5qc1xcXCIgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj48L3NjcmlwdD5cXG5cXG48c2NyaXB0IHNyYz1cXFwiL3BsdWdpbnMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2pzL2xvY2FsZXMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLnpoLUNOLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIGNoYXJzZXQ9XFxcIlVURi04XFxcIj48L3NjcmlwdD5cXG5cXG48bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIHR5cGU9XFxcInRleHQvY3NzXFxcIiBocmVmPVxcXCIvcGx1Z2lucy90b2FzdHIvdG9hc3RyLm1pbi5jc3NcXFwiPlxcbjxzY3JpcHQgc3JjPVxcXCIvcGx1Z2lucy90b2FzdHIvdG9hc3RyLm1pbi5qc1xcXCIgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj48L3NjcmlwdD5cXG48bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIHR5cGU9XFxcInRleHQvY3NzXFxcIiBocmVmPVxcXCIvanMvd29ya2Zsb3dfY2xpZW50LmNzc1xcXCI+XFxuPHNjcmlwdCBzcmM9XFxcIi9qcy93b3JrZmxvd19jbGllbnQuanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+PC9zY3JpcHQ+XCJcbiAgfTtcbiAgaW5zdGFuY2UgPSB7XG4gICAgZmxvdzogZmxvdy5faWQsXG4gICAgZmxvd192ZXJzaW9uOiBmbG93LmN1cnJlbnQuX2lkLFxuICAgIGZvcm06IGZvcm0uX2lkLFxuICAgIGZvcm1fdmVyc2lvbjogZm9ybS5jdXJyZW50Ll9pZCxcbiAgICB2YWx1ZXM6IHt9LFxuICAgIG5hbWU6IGZsb3cubmFtZSxcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9O1xuICBodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICBkYXRhQnVmID0gbmV3IEJ1ZmZlcihodG1sKTtcbiAgcmVzLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBkYXRhQnVmLmxlbmd0aCk7XG4gIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtcmFuZ2UnLCBcImJ5dGVzIDAtXCIgKyAoZGF0YUJ1Zi5sZW5ndGggLSAxKSArIFwiL1wiICsgZGF0YUJ1Zi5sZW5ndGgpO1xuICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgcmV0dXJuIHJlcy5lbmQoaHRtbCk7XG59KTtcbiIsIkFycmF5LnByb3RvdHlwZS5maWx0ZXJQcm9wZXJ0eSA9IGZ1bmN0aW9uKGgsIGwpe1xyXG4gICAgdmFyIGcgPSBbXTtcclxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih0KXtcclxuICAgICAgICB2YXIgbSA9IHQ/IHRbaF06bnVsbDtcclxuICAgICAgICB2YXIgZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmKG0gaW5zdGFuY2VvZiBBcnJheSl7XHJcbiAgICAgICAgICAgIGQgPSBtLmluY2x1ZGVzKGwpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBkID0gKGwgPT09IHVuZGVmaW5lZCk/IGZhbHNlOm09PWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGQpe1xyXG4gICAgICAgICAgICBnLnB1c2godCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZztcclxufTtcclxuXHJcbkFycmF5LnByb3RvdHlwZS5nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uKGspe1xyXG4gICAgdmFyIHYgPSBuZXcgQXJyYXkoKTtcclxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih0KXtcclxuICAgICAgICB2YXIgbSA9IHQ/IHRba106bnVsbDtcclxuICAgICAgICB2LnB1c2gobSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2O1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuZ2V0RWFjaCA9IGZ1bmN0aW9uKGNvZGUpe1xyXG4gICAgdmFyIHJldiA9IFtdO1xyXG4gICAgZm9yKHZhciBpID0gMCA7IGkgPCB0aGlzLmxlbmd0aCA7IGkrKyl7XHJcbiAgICAgICAgcmV2LnB1c2godGhpc1tpXVtjb2RlXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV2O1xyXG59O1xyXG5cclxuQXJyYXkucHJvdG90eXBlLnVuaXEgPSBmdW5jdGlvbigpe1xyXG4gICAgdmFyIGEgPSBbXTtcclxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihiKXsgXHJcbiAgICAgICAgaWYoYS5pbmRleE9mKGIpIDwgMClcclxuICAgICAgICAgICAge2FbYS5sZW5ndGhdID0gYn1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcblxyXG5Gb3JtX2Zvcm11bGEgPSB7fTtcclxuXHJcblxyXG5Gb3JtX2Zvcm11bGEubWl4aW4gPSBmdW5jdGlvbihkZXN0LCBzcmMpe1xyXG4gICAgZm9yKHZhciBrZXkgaW4gc3JjKXtcclxuICAgICAgICBkZXN0W2tleV0gPSBzcmNba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZXN0O1xyXG59O1xyXG5cclxuXHJcbkZvcm1fZm9ybXVsYS5oYW5kZXJVc2VyT2JqZWN0ID0gZnVuY3Rpb24odSl7XHJcblxyXG4gICAgaWYodSBpbnN0YW5jZW9mIEFycmF5KXtcclxuICAgICAgICB2YXIgdXNlciA9IHt9O1xyXG5cclxuICAgICAgICB1c2VyLm5hbWUgPSB1LmdldFByb3BlcnR5KFwibmFtZVwiKVxyXG4gICAgICAgIHVzZXIub3JnYW5pemF0aW9uID0ge307XHJcbiAgICAgICAgdXNlci5vcmdhbml6YXRpb24ubmFtZSA9IHUuZ2V0UHJvcGVydHkoXCJvcmdhbml6YXRpb25cIikuZ2V0UHJvcGVydHkoXCJuYW1lXCIpO1xyXG4gICAgICAgIHVzZXIub3JnYW5pemF0aW9uLmZ1bGxuYW1lID0gdS5nZXRQcm9wZXJ0eShcIm9yZ2FuaXphdGlvblwiKS5nZXRQcm9wZXJ0eShcImZ1bGxuYW1lXCIpO1xyXG5cclxuICAgICAgICB1c2VyLmhyID0gdS5nZXRQcm9wZXJ0eShcImhyXCIpXHJcblxyXG4gICAgICAgIHVzZXIuc29ydF9ubyA9IHUuZ2V0UHJvcGVydHkoXCJzb3J0X25vXCIpXHJcblxyXG5cdFx0dXNlci5tb2JpbGUgPSB1LmdldFByb3BlcnR5KFwibW9iaWxlXCIpXHJcblxyXG5cdFx0dXNlci53b3JrX3Bob25lID0gdS5nZXRQcm9wZXJ0eShcIndvcmtfcGhvbmVcIilcclxuXHJcblx0XHR1c2VyLnBvc2l0aW9uID0gdS5nZXRQcm9wZXJ0eShcInBvc2l0aW9uXCIpXHJcblxyXG4gICAgICAgIHZhciB1c2VyUm9sZXMgPSB1LmdldFByb3BlcnR5KFwicm9sZXNcIik7XHJcbiAgICAgICAgdmFyIHJvbGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdXNlclJvbGVzLmZvckVhY2goZnVuY3Rpb24oaSl7XHJcbiAgICAgICAgICAgIHJvbGVzID0gcm9sZXMuY29uY2F0KGkpO1xyXG4gICAgICAgIH0pOyBcclxuICAgICAgICByb2xlcy51bmlxKCk7XHJcbiAgICAgICAgdXNlci5yb2xlcyA9IHJvbGVzO1xyXG4gICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgcmV0dXJuIHU7XHJcbiAgICB9XHJcbn1cclxuXHJcbkZvcm1fZm9ybXVsYS5oYW5kZXJPcmdPYmplY3QgPSBmdW5jdGlvbihvKXtcclxuXHJcbiAgICBpZihvIGluc3RhbmNlb2YgQXJyYXkpe1xyXG4gICAgICAgIHZhciBvcmcgPSB7fTtcclxuXHRcdG9yZy5pZCA9IG8uZ2V0UHJvcGVydHkoXCJfaWRcIik7XHJcbiAgICAgICAgb3JnLm5hbWUgPSBvLmdldFByb3BlcnR5KFwibmFtZVwiKTtcclxuICAgICAgICBvcmcuZnVsbG5hbWUgPSBvLmdldFByb3BlcnR5KFwiZnVsbG5hbWVcIik7XHJcblxyXG4gICAgICAgIHJldHVybiBvcmc7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICByZXR1cm4gbztcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICAgICog6I635b6X5YWs5byP6ZyA6KaB55So5Yiw55qE5Yid5aeL5YC8XHJcbiAgICAqIOi+k+WFpe+8mmZpZWxkcywgdmFsdWVzLCBhcHBsaWNhbnRcclxuICAgICog6L6T5Ye677yaX192YWx1ZXNcclxuKiovXHJcbkZvcm1fZm9ybXVsYS5pbml0X2Zvcm11bGFfdmFsdWVzID0gZnVuY3Rpb24oZmllbGRzLCBhdXRvRm9ybURvYywgYXBwcm92ZXIsIGFwcGxpY2FudCwgc3BhY2VJZCl7XHJcbiAgICB2YXIgX192YWx1ZXMgPSB7fTtcclxuICAgIC8v55Sz6K+35Y2V5Lit5aGr55qE5YC85aSE55CGXHJcbiAgICBpZihmaWVsZHMgJiYgZmllbGRzLmxlbmd0aCAmJiBhdXRvRm9ybURvYykge1xyXG4gICAgICAgIC8vZGVidWdnZXI7XHJcbiAgICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQpe1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGZpZWxkLnR5cGU7XHJcbiAgICAgICAgICAgIGlmKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT09ICd0YWJsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICAgICog5bCG6KGo5qC85a2X5q6155qE5YC86L+b6KGM6L2s5o2i5ZCO5Lyg5YWlX192YWx1ZXPkuK1cclxuICAgICAgICAgICAgICAgICAgICAqIHZhbHVlc+S4reihqOagvOeahOWAvOagvOW8j+S4ulxyXG4gICAgICAgICAgICAgICAgICAgICogW3tcImFcIjoxLFwiYlwiOjR9LHtcImFcIjoyLFwiYlwiOjV9LHtcImFcIjozLFwiYlwiOjZ9XVxyXG4gICAgICAgICAgICAgICAgICAgICogX192YWx1ZXPpnIDopoHovazljJbkuLrkuIvpnaLmoLzlvI/kuJTlkozkuLvooajnmoTlgLzkuIDmoLfmlL7liLDnrKzkuIDlsYJcclxuICAgICAgICAgICAgICAgICAgICAqIHtcImFcIjpbMSwyLDNdLFwiYlwiOls0LDUsNl19XHJcbiAgICAgICAgICAgICAgICAgICAgKiovXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlRmllbGRzID0gZmllbGQuc2ZpZWxkcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVWYWx1ZXMgPSBhdXRvRm9ybURvY1tmaWVsZC5jb2RlXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybXVsYVRhYmxlVmFsdWVzID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdGFibGVWYWx1ZXMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL+aMieWFrOW8j+eahOagvOW8j+i9rOaNouWAvOS4ul9fdGFibGVWYWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICBpZih0YWJsZUZpZWxkcyAmJiB0YWJsZUZpZWxkcy5sZW5ndGggJiYgdGFibGVWYWx1ZXMgJiYgdGFibGVWYWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHRhYmxlVmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybXVsYVRhYmxlVmFsdWVzLnB1c2goRm9ybV9mb3JtdWxhLmluaXRfZm9ybXVsYV92YWx1ZXModGFibGVGaWVsZHMsIHRhYmxlVmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5oyJ5Li76KGo55qE5qC85byP6L2s5o2iX190YWJsZVZhbHVlc+WKoOWIsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKHRhYmxlZmllbGQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX190YWJsZVZhbHVlc1t0YWJsZWZpZWxkLmNvZGVdID0gZm9ybXVsYVRhYmxlVmFsdWVzLmdldEVhY2godGFibGVmaWVsZC5jb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdmFsdWVzID0gRm9ybV9mb3JtdWxhLm1peGluKF9fdmFsdWVzLCBfX3RhYmxlVmFsdWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3VzZXInKXtcclxuICAgICAgICAgICAgICAgICAgICBfX3ZhbHVlc1tmaWVsZC5jb2RlXSA9IEZvcm1fZm9ybXVsYS5oYW5kZXJVc2VyT2JqZWN0KFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdHMoc3BhY2VJZCwgYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2dyb3VwJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgX192YWx1ZXNbZmllbGQuY29kZV0gPSBGb3JtX2Zvcm11bGEuaGFuZGVyT3JnT2JqZWN0KFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhT3JnT2JqZWN0cyhhdXRvRm9ybURvY1tmaWVsZC5jb2RlXSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnb2RhdGEnKXtcclxuXHRcdFx0XHRcdF9fdmFsdWVzW2ZpZWxkLmNvZGVdID0gYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV0gfHwge31cclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL+atpOWkhOS8oHNwYWNlSWTnu5npgInkurrmjqfku7bnmoTml6fmlbDmja7orqHnrpdyb2xlc+WSjG9yZ2FuaXphdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIF9fdmFsdWVzW2ZpZWxkLmNvZGVdID0gYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgIH1cclxuICAgIC8v5b2T5YmN5aSE55CG5Lq6XHJcbiAgICBfX3ZhbHVlc1tcImFwcHJvdmVyXCJdID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0KHNwYWNlSWQsIGFwcHJvdmVyKTtcclxuICAgIC8v55Sz6K+35Lq6XHJcbiAgICBfX3ZhbHVlc1tcImFwcGxpY2FudFwiXSA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdChzcGFjZUlkLCBhcHBsaWNhbnQpO1xyXG5cclxuICAgIHJldHVybiBfX3ZhbHVlcztcclxufTtcclxuXHJcbiIsImdldEhhbmRsZXJzTWFuYWdlciA9IHt9XHJcblxyXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMgPSAodXNlcl9pZHMsIHJvbGVfaWRzLCBzcGFjZV9pZCktPlxyXG5cdGFwcHJvdmVfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRfLmVhY2godXNlcl9pZHMsICh1c2VyX2lkKS0+XHJcblx0XHRpZiBkYi51c2Vycy5maW5kKHtfaWQ6IHVzZXJfaWR9KS5jb3VudCgpID4gMFxyXG5cdFx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKHVzZXJfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZClcclxuXHRcdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdGFwcHJvdmVfdXNlcnMgPSBhcHByb3ZlX3VzZXJzLmNvbmNhdCh1c2VycylcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJ1c2VyX2lk5LiN5ZCI5rOV5LiN5ZCI5rOVXCIpXHJcblx0KVxyXG5cdGFwcHJvdmVfdXNlcnMgPSBfLnVuaXEoYXBwcm92ZV91c2VycylcclxuXHRyZXR1cm4gYXBwcm92ZV91c2Vyc1xyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMgPSAodXNlcl9pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKS0+XHJcblx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRfLmVhY2gocm9sZV9pZHMsIChyb2xlX2lkKS0+XHJcblx0XHRpZiBkYi5mbG93X3JvbGVzLmZpbmQoe19pZDogcm9sZV9pZH0pLmNvdW50KCkgPiAwXHJcblx0XHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZSh1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZClcclxuXHRcdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInJvbGVfaWTlt7Lnu4/ooqvliKDpmaRcIilcclxuXHQpXHJcblx0aWYgdXNlcl9pZHMubGVuZ3RoID4gMFxyXG5cdFx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0XHRyZXR1cm4gdXNlcl9pZHNcclxuXHRlbHNlXHJcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuagueaNrnVzZXJfaWTlkoxyb2xlX2lkc+ayoeafpeWIsOWvueW6lOeahOWkhOeQhuS6ulwiKVxyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZSA9ICh1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZCkgLT5cclxuXHRvcmdzID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyczogdXNlcl9pZCB9LCB7IGZpZWxkczogeyBfaWQ6IDEgfSB9KS5mZXRjaCgpXHJcblx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRfLmVhY2gob3JncywgKG9yZykgLT5cclxuXHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZy5faWQsIHJvbGVfaWQsIHNwYWNlX2lkKVxyXG5cdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxyXG5cdFx0XHR1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2VycylcclxuXHQpXHJcblx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0cmV0dXJuIHVzZXJfaWRzXHJcblxyXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyA9IChvcmdfaWRzLCByb2xlX2lkcywgc3BhY2VfaWQpLT5cclxuXHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdF8uZWFjaChvcmdfaWRzLCAob3JnX2lkKS0+XHJcblx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMob3JnX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpXHJcblx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXHJcblx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxyXG5cdClcclxuXHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcclxuXHRyZXR1cm4gdXNlcl9pZHNcclxuXHJcbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMgPSAob3JnX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpLT5cclxuXHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdF8uZWFjaChyb2xlX2lkcywgKHJvbGVfaWQpLT5cclxuXHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpXHJcblx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXHJcblx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxyXG5cdClcclxuXHRpZiB1c2VyX2lkcy5sZW5ndGggPiAwXHJcblx0XHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcclxuXHRcdHJldHVybiB1c2VyX2lkc1xyXG5cdGVsc2VcclxuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2ub3JnX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIilcclxuXHJcbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZSA9IChvcmdfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKSAtPlxyXG5cdG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogb3JnX2lkIH0sIHsgZmllbGRzOiB7IHBhcmVudHM6IDEgfSB9KVxyXG5cdHVzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0cG9zaXRpb25zID0gZGIuZmxvd19wb3NpdGlvbnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgb3JnOiBvcmdfaWQsIHJvbGU6IHJvbGVfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KS5mZXRjaCgpXHJcblx0Xy5lYWNoKHBvc2l0aW9ucywgKHBvc2l0aW9uKSAtPlxyXG5cdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQocG9zaXRpb24udXNlcnMpXHJcblx0KVxyXG5cdGlmIHVzZXJfaWRzLmxlbmd0aCBpcyAwXHJcblx0XHRwYXJlbnRzID0gb3JnLnBhcmVudHNcclxuXHRcdF8uZWFjaChwYXJlbnRzLCAocGFyZW50X2lkKSAtPlxyXG5cdFx0XHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBvcmc6IHBhcmVudF9pZCwgcm9sZTogcm9sZV9pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcclxuXHRcdFx0aWYgcG9zaXRpb25zLmxlbmd0aCA+IDBcclxuXHRcdFx0XHRfLmVhY2gocG9zaXRpb25zLCAocG9zaXRpb24pIC0+XHJcblx0XHRcdFx0XHR1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2VycylcclxuXHRcdFx0XHQpXHJcblx0XHQpXHJcblxyXG5cdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdHJldHVybiB1c2VyX2lkc1xyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzID0gKGluc3RhbmNlX2lkLCBzdGVwX2lkKSAtPlxyXG5cdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpXHJcblxyXG5cdCMg5ouf56i/5pe2LCDlj6/ku6Xorr7lrprlkI7nu63mr4/kuKrmraXpqqTnmoTlpITnkIbkurogIzE5MjZcclxuXHRpZiBpbnN0YW5jZS5zdGVwX2FwcHJvdmUgJiYgIV8uaXNFbXB0eShpbnN0YW5jZS5zdGVwX2FwcHJvdmVbXCIje3N0ZXBfaWR9X29wdGlvbnNcIl0pXHJcblx0XHRyZXR1cm4gaW5zdGFuY2Uuc3RlcF9hcHByb3ZlW1wiI3tzdGVwX2lkfV9vcHRpb25zXCJdXHJcblxyXG5cdGFwcHJvdmVfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3dcclxuXHRmbG93X3JldiA9IGluc3RhbmNlLmZsb3dfdmVyc2lvblxyXG5cdGN1cnJlbnRfZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZClcclxuXHRjdXJyZW50X3N0ZXAgPSBudWxsXHJcblx0Y3VycmVudF9zdGVwcyA9IG5ldyBBcnJheVxyXG5cclxuXHRpZiBjdXJyZW50X2Zsb3cuY3VycmVudC5faWQgaXMgZmxvd19yZXZcclxuXHRcdGN1cnJlbnRfc3RlcHMgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5zdGVwc1xyXG5cdGVsc2VcclxuXHRcdGN1cnJlbnQgPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCAoaGlzdG9yeSkgLT5cclxuXHRcdFx0cmV0dXJuIGhpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHQpXHJcblx0XHRjdXJyZW50X3N0ZXBzID0gY3VycmVudC5zdGVwc1xyXG5cclxuXHQjIOS7juiOt+WPlueahHN0ZXBz5Lit5qC55o2uOnN0ZXBfaWTmj5Dlj5blr7nlupTnmoRzdGVw5a+56LGhXHJcblx0Y3VycmVudF9zdGVwID0gXy5maW5kKGN1cnJlbnRfc3RlcHMsIChzdGVwKSAtPlxyXG5cdFx0cmV0dXJuIHN0ZXAuX2lkIGlzIHN0ZXBfaWRcclxuXHQpXHJcblx0IyDliKTmlq1zdGVwX3R5cGVcclxuXHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzIFwiY29uZGl0aW9uXCJcclxuXHRcdHVuZmluaXNoZWRfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCAodHJhY2UpIC0+XHJcblx0XHRcdHJldHVybiB0cmFjZS5pc19maW5pc2hlZCBpcyBmYWxzZVxyXG5cdFx0KVxyXG5cclxuXHRcdHJldHVybiBuZXcgQXJyYXkodW5maW5pc2hlZF90cmFjZS5hcHByb3Zlc1swXS51c2VyKVxyXG5cclxuXHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzIFwic3RhcnRcIlxyXG5cdFx0aGFuZGxlcnMgPSBuZXcgQXJyYXlcclxuXHRcdGhhbmRsZXJzLnB1c2goaW5zdGFuY2UuYXBwbGljYW50KVxyXG5cdFx0aGFuZGxlcnMucHVzaChpbnN0YW5jZS5zdWJtaXR0ZXIpXHJcblx0XHRoYW5kbGVycyA9IF8udW5pcShoYW5kbGVycylcclxuXHRcdHJldHVybiBoYW5kbGVyc1xyXG5cdCMg5b6X5Yiwc3RlcOeahFwiZGVhbF90eXBlXCLvvIzlubbov5vooYzpgLvovpHliKTmlq3mib7liLDlr7nlupTnmoTlpITnkIbkurpcclxuXHRkZWFsX3R5cGUgPSBjdXJyZW50X3N0ZXAuZGVhbF90eXBlXHJcblx0dXNlcnMgPSBuZXcgQXJyYXlcclxuXHRpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRSb2xlXCJcclxuXHRcdCMgMS4qKioqKioqKioqKueUs+ivt+S6uuaJgOWxnue7hOe7h+S4reeahOWuoeaJueWyl+S9jSoqKioqKioqKioqXHJcblx0XHRhcHBsaWNhbnQgPSBpbnN0YW5jZS5hcHBsaWNhbnRcclxuXHRcdGlmIGFwcGxpY2FudFxyXG5cdFx0XHRzcGFjZV91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogYXBwbGljYW50IH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3BhY2VfdXNlcl9jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKVxyXG5cclxuXHRcdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzIGFuZCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdFx0cm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7IF9pZDogYXBwcm92ZXJfcm9sZSB9KS5jb3VudCgpXHJcblx0XHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhhcHBsaWNhbnQsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKVxyXG5cclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJJbnN0YW5jZeeahOaPkOS6pOS6uuS4uuepulwiKVxyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwiaHJSb2xlXCJcclxuXHRcdGFwcHJvdmVIclJvbGVJZHMgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfaHJfcm9sZXM7XHJcblx0XHRpZiAoYXBwcm92ZUhyUm9sZUlkcylcclxuXHRcdFx0cmV0dXJuIF8ucGx1Y2soV29ya2Zsb3dNYW5hZ2VyLmdldEhyUm9sZXNVc2VycyhzcGFjZV9pZCwgYXBwcm92ZUhyUm9sZUlkcyksICd1c2VyJyk7XHJcblx0XHRlbHNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi6KeS6Imy5pyq5oyH5a6aXCIpXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRcIlxyXG5cdFx0IyAyLioqKioqKioqKioq55Sz6K+35Lq6KioqKioqKioqKipcclxuXHRcdGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudFxyXG5cdFx0c3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcGxpY2FudCB9KS5jb3VudCgpXHJcblx0XHRpZiBzcGFjZV91c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gbmV3IEFycmF5KGFwcGxpY2FudClcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcIm9yZ0ZpZWxkUm9sZVwiXHJcblx0XHQjIDMuKioqKioqKioqKirpg6jpl6jlrZfmrrXmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxyXG5cdFx0Zm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtXHJcblx0XHRmb3JtX3JldiA9IG51bGxcclxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHRcdClcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cclxuXHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKVxyXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxyXG5cdFx0aWYgZm9ybV9yZXYgaXMgZm9ybS5jdXJyZW50Ll9pZFxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnRcclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIChmb3JtX2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGZvcm1faGlzdG9yeS5faWQgaXMgZm9ybV9yZXZcclxuXHRcdFx0KVxyXG5cclxuXHRcdGFwcHJvdmVyX29yZ19maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdfZmllbGRcclxuXHRcdGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkc1xyXG5cdFx0ZmllbGRfY29kZSA9IG51bGxcclxuXHRcdF8uZWFjaChmb3JtX2ZpZWxkcywgKGZvcm1fZmllbGQpIC0+XHJcblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxyXG5cdFx0XHRcdGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGVcclxuXHRcdClcclxuXHJcblx0XHQjIOWPluW+l+acgOaWsOeahHZhbHVlc1xyXG5cdFx0bmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSlcclxuXHRcdG9yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRcdG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXlcclxuXHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XHJcblx0XHRcdFx0b3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKVxyXG5cclxuXHRcdCMg5qCh6aqMb3JnX2lk5pWw57uE5Litb3JnX2lk5piv5ZCm5ZCI5rOVXHJcblx0XHRfLmVhY2gob3JnX2lkc19uYW1lcywgKG9yZykgLT5cclxuXHRcdFx0Y2hlY2tfb3JnX2NvdW50ID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgX2lkOiBvcmdbXCJpZFwiXSB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX29yZ19jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dJROS4jeWQiOazlVwiKVxyXG5cdFx0XHRvcmdfaWRzLnB1c2gob3JnW1wiaWRcIl0pXHJcblx0XHQpXHJcblxyXG5cdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzIGFuZCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMFxyXG5cdFx0XHQjIOajgOafpWFwcHJvdmVyX3JvbGVz5Litcm9sZeaYr+WQpuS4jeWtmOWcqOaIluW3sue7j+iiq+WIoOmZpFxyXG5cdFx0XHRfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCAoYXBwcm92ZXJfcm9sZSkgLT5cclxuXHRcdFx0XHRyb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiBhcHByb3Zlcl9yb2xlIH0pLmNvdW50KClcclxuXHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKVxyXG5cdFx0XHQpXHJcblx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyhvcmdfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKVxyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwib3JnRmllbGRcIlxyXG5cdFx0IyA0LioqKioqKioqKioq6YOo6Zeo5a2X5q615omA5bGe57uE57uH5Lit55qE5Lq65ZGYKioqKioqKioqKipcclxuXHRcdGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybVxyXG5cdFx0Zm9ybV9yZXYgPSBudWxsXHJcblx0XHRpZiBmbG93X3JldiBpcyBjdXJyZW50X2Zsb3cuY3VycmVudC5faWRcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb25cclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCAoY3VycmVudF9mbG93X2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0XHQpXHJcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uIGlmIGN1cnJlbnRfZmxvd192ZXJzaW9uXHJcblxyXG5cdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZClcclxuXHRcdGN1cnJlbnRfZm9ybSA9IG51bGxcclxuXHRcdGlmIGZvcm1fcmV2IGlzIGZvcm0uY3VycmVudC5faWRcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50XHJcblx0XHRlbHNlXHJcblx0XHRcdGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCAoZm9ybV9oaXN0b3J5KSAtPlxyXG5cdFx0XHRcdHJldHVybiBmb3JtX2hpc3RvcnkuX2lkIGlzIGZvcm1fcmV2XHJcblx0XHRcdClcclxuXHJcblx0XHRhcHByb3Zlcl9vcmdfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JnX2ZpZWxkXHJcblx0XHRmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHNcclxuXHRcdGZpZWxkX2NvZGUgPSBudWxsXHJcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKS0+XHJcblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxyXG5cdFx0XHRcdGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGVcclxuXHRcdClcclxuXHJcblx0XHQjIOWPluW+l+acgOaWsOeahHZhbHVlc1xyXG5cdFx0bmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSlcclxuXHJcblx0XHRvcmdfaWRzID0gbmV3IEFycmF5XHJcblx0XHRvcmdfaWRzX25hbWVzID0gbmV3IEFycmF5XHJcblx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheVxyXG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRvcmdfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSlcclxuXHJcblx0XHQjIOagoemqjG9yZ19pZOaVsOe7hOS4rW9yZ19pZOaYr+WQpuWQiOazlVxyXG5cdFx0Xy5lYWNoKG9yZ19pZHNfbmFtZXMsIChvcmcpIC0+XHJcblx0XHRcdGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7IF9pZDogb3JnW1wiaWRcIl0gfSkuY291bnQoKVxyXG5cdFx0XHRpZiBjaGVja19vcmdfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHSUTkuI3lkIjms5VcIilcclxuXHRcdFx0b3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5qCh6aqMb3Jn5LiL5a2Y5Zyo5aSE55CG5Lq6XHJcblx0XHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoKG9yZ19pZHMsIChvcmdfaWQpIC0+XHJcblx0XHRcdG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogb3JnX2lkIH0sIHsgZmllbGRzOiB7IHVzZXJzOiAxIH0gfSlcclxuXHRcdFx0b3JnX2NoaWxkcmVuID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBwYXJlbnRzOiBvcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KS5mZXRjaCgpXHJcblx0XHRcdG9yZ19jaGlsZHJlbi51bnNoaWZ0KG9yZylcclxuXHRcdFx0Y2hlY2tfb3JncyA9IG9yZ19jaGlsZHJlblxyXG5cdFx0XHRvcmdfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0Xy5lYWNoKGNoZWNrX29yZ3MsIChjaGVja19vcmdfdXNlcikgLT5cclxuXHRcdFx0XHRpZiBjaGVja19vcmdfdXNlci51c2Vyc1xyXG5cdFx0XHRcdFx0Xy5lYWNoKGNoZWNrX29yZ191c2VyLnVzZXJzLCAob3JnX3VzZXIpIC0+XHJcblx0XHRcdFx0XHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IG9yZ191c2VyIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwic3BhY2XkuIvkuI3lrZjlnKjmraR1c2VyXCIpXHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQoY2hlY2tfb3JnX3VzZXIudXNlcnMpXHJcblx0XHRcdFx0b3JnX3VzZXJzID0gb3JnX3VzZXJzLmNvbmNhdChjaGVja19vcmdfdXNlci51c2VycylcclxuXHRcdFx0KVxyXG5cclxuXHRcdFx0aWYgb3JnX3VzZXJzLmxlbmd0aCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dcIiArIG9yZ19pZCArIFwi5LiN5a2Y5Zyo5aSE55CG5Lq6XCIpXHJcblxyXG5cdFx0KVxyXG5cclxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHVzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJ1c2VyRmllbGRSb2xlXCJcclxuXHRcdCMgNS4qKioqKioqKioqKuS6uuWRmOWtl+auteaJgOWxnue7hOe7h+S4reeahOWuoeaJueWyl+S9jSoqKioqKioqKioqXHJcblx0XHRmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm1cclxuXHRcdGZvcm1fcmV2ID0gbnVsbFxyXG5cdFx0aWYgZmxvd19yZXYgaXMgY3VycmVudF9mbG93LmN1cnJlbnQuX2lkXHJcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uXHJcblx0XHRlbHNlXHJcblx0XHRcdGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgKGN1cnJlbnRfZmxvd19oaXN0b3J5KSAtPlxyXG5cdFx0XHRcdHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgaXMgZmxvd19yZXZcclxuXHRcdFx0KVxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbiBpZiBjdXJyZW50X2Zsb3dfdmVyc2lvblxyXG5cclxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpXHJcblx0XHRjdXJyZW50X2Zvcm0gPSBudWxsXHJcblx0XHRpZiBmb3JtX3JldiBpcyBmb3JtLmN1cnJlbnQuX2lkXHJcblx0XHRcdGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgKGZvcm1faGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCBpcyBmb3JtX3JldlxyXG5cdFx0XHQpXHJcblxyXG5cdFx0YXBwcm92ZXJfdXNlcl9maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHNcclxuXHRcdGZpZWxkX2NvZGUgPSBudWxsXHJcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKSAtPlxyXG5cdFx0XHRpZiBmb3JtX2ZpZWxkLl9pZCBpcyBhcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRcdFx0ZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5Y+W5b6X5pyA5paw55qEdmFsdWVzXHJcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cdFx0IyDojrflj5Z1c2VyX2lk5pWw57uEXHJcblx0XHR1c2VyX2lkc19uYW1lcyA9IG5ldyBBcnJheVxyXG5cdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXVxyXG5cdFx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXlcclxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHVzZXJfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSlcclxuXHJcblx0XHQjIOagoemqjHVzZXJfaWTmlbDnu4TkuK11c2VyX2lk5piv5ZCm5ZCI5rOVXHJcblx0XHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoKHVzZXJfaWRzX25hbWVzLCAodXNlcikgLT5cclxuXHRcdFx0Y2hlY2tfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IHVzZXJbXCJpZFwiXSB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX3VzZXJfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5Lq65ZGYSUTkuI3lkIjms5VcIilcclxuXHRcdFx0dXNlcl9pZHMucHVzaCh1c2VyW1wiaWRcIl0pXHJcblx0XHQpXHJcblxyXG5cdFx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXHJcblx0XHRcdCMg5qOA5p+lYXBwcm92ZXJfcm9sZXPkuK1yb2xl5piv5ZCm5LiN5a2Y5Zyo5oiW5bey57uP6KKr5Yig6ZmkXHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpXHJcblx0XHRcdClcclxuXHRcdFx0cmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyh1c2VyX2lkcywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBpbnN0YW5jZS5zcGFjZSlcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIilcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInVzZXJGaWVsZFwiXHJcblx0XHQjIDYuKioqKioqKioqKirooajljZXkurrlkZjlrZfmrrUqKioqKioqKioqKlxyXG5cdFx0Zm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtXHJcblx0XHRmb3JtX3JldiA9IG51bGxcclxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHRcdClcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cclxuXHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKVxyXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxyXG5cdFx0aWYgZm9ybV9yZXYgaXMgZm9ybS5jdXJyZW50Ll9pZFxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnRcclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIChmb3JtX2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGZvcm1faGlzdG9yeS5faWQgaXMgZm9ybV9yZXZcclxuXHRcdFx0KVxyXG5cclxuXHRcdGFwcHJvdmVyX3VzZXJfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcl9maWVsZFxyXG5cdFx0Zm9ybV9maWVsZHMgPSBjdXJyZW50X2Zvcm0uZmllbGRzXHJcblx0XHRmaWVsZF9jb2RlID0gbnVsbFxyXG5cdFx0Xy5lYWNoKGZvcm1fZmllbGRzLCAoZm9ybV9maWVsZCktPlxyXG5cdFx0XHRpZiBmb3JtX2ZpZWxkLl9pZCBpcyBhcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRcdFx0ZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5Y+W5b6X5pyA5paw55qEdmFsdWVzXHJcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cclxuXHRcdCMg6I635Y+WdXNlcl9pZOaVsOe7hFxyXG5cdFx0dXNlcl9pZHNfbmFtZXMgPSBuZXcgQXJyYXlcclxuXHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XHJcblx0XHRcdFx0dXNlcl9pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcy5wdXNoKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pXHJcblxyXG5cdFx0IyDmoKHpqox1c2VyX2lk5pWw57uE5LitdXNlcl9pZOaYr+WQpuWQiOazlVxyXG5cdFx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaCh1c2VyX2lkc19uYW1lcywgKHVzZXIpIC0+XHJcblx0XHRcdGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiB1c2VyW1wiaWRcIl0gfSkuY291bnQoKVxyXG5cdFx0XHRpZiBjaGVja191c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS6uuWRmElE5LiN5ZCI5rOVXCIpXHJcblx0XHRcdHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKVxyXG5cdFx0KVxyXG5cclxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHVzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzcGVjaWZ5U3RlcFJvbGVcIlxyXG5cdFx0IyA3LioqKioqKioqKioq5oyH5a6a5q2l6aqk5aSE55CG5a6h5om55bKX5L2NKioqKioqKioqKipcclxuXHRcdGFwcHJvdmVyX3N0ZXAgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfc3RlcFxyXG5cdFx0ZmluaXNoZWRfdHJhY2VzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2goaW5zdGFuY2UudHJhY2VzLCAodHJhY2UpIC0+XHJcblx0XHRcdGlmIHRyYWNlLnN0ZXAgaXMgYXBwcm92ZXJfc3RlcFxyXG5cdFx0XHRcdGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKVxyXG5cdFx0KVxyXG5cdFx0IyDmoLnmja5zdGFydF9kYXRl5Y+W5pyA5paw55qEdHJhY2VcclxuXHRcdG1heF9zdGFydERhdGVfdHJhY2UgPSBfLm1heChmaW5pc2hlZF90cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRyZXR1cm4gdC5zdGFydF9kYXRlXHJcblx0XHQpXHJcblxyXG5cdFx0YXBwcm92ZV91c2VycyA9IF8ucGx1Y2sobWF4X3N0YXJ0RGF0ZV90cmFjZS5hcHByb3ZlcywgXCJ1c2VyXCIpXHJcblxyXG5cdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzXHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0KVxyXG5cclxuXHRcdCMg6aqM6K+B5p+l5Yiw55qEdXNlcuaYr+WQpumDveWQiOazlVxyXG5cdFx0Xy5lYWNoKGFwcHJvdmVfdXNlcnMsIChhcHByb3ZlX3VzZXIpIC0+XHJcblx0XHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVfdXNlciB9KS5jb3VudCgpIGlzIDBcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaMh+WumuatpemqpOeahOWkhOeQhuS6uuW3sue7j+WPmOabtFwiKVxyXG5cdFx0KVxyXG5cclxuXHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMoYXBwcm92ZV91c2VycywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZClcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInNwZWNpZnlTdGVwVXNlclwiXHJcblx0XHQjIDguKioqKioqKioqKirmjIflrprmraXpqqTlpITnkIbkuroqKioqKioqKioqKlxyXG5cdFx0YXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwXHJcblx0XHRmaW5pc2hlZF90cmFjZXMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChpbnN0YW5jZS50cmFjZXMsICh0cmFjZSkgLT5cclxuXHRcdFx0aWYgdHJhY2Uuc3RlcCBpcyBhcHByb3Zlcl9zdGVwXHJcblx0XHRcdFx0ZmluaXNoZWRfdHJhY2VzLnB1c2godHJhY2UpXHJcblx0XHQpXHJcblx0XHQjIOagueaNrnN0YXJ0X2RhdGXlj5bmnIDmlrDnmoR0cmFjZVxyXG5cdFx0bWF4X3N0YXJ0RGF0ZV90cmFjZSA9IF8ubWF4KGZpbmlzaGVkX3RyYWNlcywgKHQpIC0+XHJcblx0XHRcdHJldHVybiB0LnN0YXJ0X2RhdGVcclxuXHRcdClcclxuXHJcblx0XHRhcHByb3ZlX3VzZXJzID0gXy5wbHVjayhtYXhfc3RhcnREYXRlX3RyYWNlLmFwcHJvdmVzLCBcInVzZXJcIilcclxuXHJcblx0XHQjIOmqjOivgeafpeWIsOeahHVzZXLmmK/lkKbpg73lkIjms5VcclxuXHRcdF8uZWFjaChhcHByb3ZlX3VzZXJzLCAoYXBwcm92ZV91c2VyKS0+XHJcblx0XHRcdGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVfdXNlciB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmjIflrprmraXpqqTnmoTlpITnkIbkurrlt7Lnu4/lj5jmm7RcIilcclxuXHRcdClcclxuXHJcblx0XHRhcHByb3ZlX3VzZXJzID0gXy51bmlxKGFwcHJvdmVfdXNlcnMpXHJcblx0XHRyZXR1cm4gYXBwcm92ZV91c2Vyc1xyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3VibWl0dGVyUm9sZVwiXHJcblx0XHQjIDkuKioqKioqKioqKirloavljZXkurrmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxyXG5cdFx0c3VibWl0dGVyID0gaW5zdGFuY2Uuc3VibWl0dGVyXHJcblx0XHRpZiBub3Qgc3VibWl0dGVyXHJcblx0XHRcdCMg5Yik5pat5o+Q5Lqk5Lq65piv5ZCm5bey57uP6KKr5Yig6ZmkXHJcblx0XHRcdHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogc3VibWl0dGVyIH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3VibWl0dGVyX3VzZXJfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmN5bel5L2c5Yy6XCIpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHQjIOajgOafpWFwcHJvdmVyX3JvbGVz5Litcm9sZeaYr+WQpuS4jeWtmOWcqOaIluW3sue7j+iiq+WIoOmZpFxyXG5cdFx0XHRcdFx0Xy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgKGFwcHJvdmVyX3JvbGUpIC0+XHJcblx0XHRcdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBhcHByb3Zlcl9yb2xlICsgXCLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhzdWJtaXR0ZXIsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIilcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnmoTmj5DkuqTkurrkuLrnqbpcIilcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInN1Ym1pdHRlclwiXHJcblx0XHQjIDEwLioqKioqKioqKioq5o+Q5Lqk5Lq6KioqKioqKioqKipcclxuXHRcdHN1Ym1pdHRlciA9IGluc3RhbmNlLnN1Ym1pdHRlclxyXG5cdFx0IyDliKTmlq3mj5DkuqTkurrmmK/lkKblt7Lnu4/ooqvliKDpmaRcclxuXHRcdHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogc3VibWl0dGVyIH0pLmNvdW50KClcclxuXHRcdGlmIHN1Ym1pdHRlcl91c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIilcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIG5ldyBBcnJheShzdWJtaXR0ZXIpXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzcGVjaWZ5T3JnXCJcclxuXHRcdCMgMTEuKioqKioqKioqKirmn5Dpg6jpl6jlhoXnmoTmiYDmnInkuroqKioqKioqKioqKlxyXG5cdFx0YXBwcm92ZXJfb3JnX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdzXHJcblx0XHRpZiBub3QgYXBwcm92ZXJfb3JnX2lkcyBvciBhcHByb3Zlcl9vcmdfaWRzLmxlbmd0aCBpcyAwXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5a6a5LmJ55So5LqO5p+l5om+5LiL5LiA5q2l5aSE55CG5Lq655qE6YOo6Zeo77yM6K+36IGU57O7566h55CG5ZGY6LCD5p+l5rWB56iL5Zu+55qE6YWN572u5piv5ZCm5q2j56GuXCIpXHJcblxyXG5cdFx0IyDpqozor4HmiYDmjIflrprnmoRvcmdhbml6YXRpb25faWTpg73lrZjlnKhcclxuXHRcdHZhbGlkX2FwcHJvdmVyX29yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChhcHByb3Zlcl9vcmdfaWRzLCAoYXBwcm92ZXJfb3JnX2lkKSAtPlxyXG5cdFx0XHRpZiBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX29yZ19pZCB9KS5jb3VudCgpID4gMFxyXG5cdFx0XHRcdHZhbGlkX2FwcHJvdmVyX29yZ19pZHMudW5zaGlmdChhcHByb3Zlcl9vcmdfaWQpXHJcblx0XHQpXHJcblxyXG5cdFx0b3JnX3VzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2godmFsaWRfYXBwcm92ZXJfb3JnX2lkcywgKHZhbGlkX2FwcHJvdmVyX29yZ19pZCkgLT5cclxuXHRcdFx0dmFsaWRfYXBwcm92ZXJfb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiB2YWxpZF9hcHByb3Zlcl9vcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KVxyXG5cdFx0XHRpZiB2YWxpZF9hcHByb3Zlcl9vcmcudXNlcnNcclxuXHRcdFx0XHRvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KHZhbGlkX2FwcHJvdmVyX29yZy51c2VycylcclxuXHJcblx0XHRcdGNoaWxkX29yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHBhcmVudHM6IHZhbGlkX2FwcHJvdmVyX29yZ19pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcclxuXHRcdFx0Xy5lYWNoKGNoaWxkX29yZ3MsIChjaGlsZF9vcmcpIC0+XHJcblx0XHRcdFx0aWYgY2hpbGRfb3JnLnVzZXJzXHJcblx0XHRcdFx0XHRvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KGNoaWxkX29yZy51c2VycylcclxuXHRcdFx0KVxyXG5cdFx0KVxyXG5cclxuXHRcdG9yZ191c2VyX2lkcyA9IF8udW5pcShvcmdfdXNlcl9pZHMpXHJcblx0XHRuZXdfb3JnX3VzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2gob3JnX3VzZXJfaWRzLCAob3JnX3VzZXJfaWQpIC0+XHJcblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IG9yZ191c2VyX2lkIH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3BhY2VfdXNlcl9pbmZvX2NvdW50ID4gMFxyXG5cdFx0XHRcdG5ld19vcmdfdXNlcl9pZHMucHVzaChvcmdfdXNlcl9pZClcclxuXHRcdClcclxuXHJcblx0XHRyZXR1cm4gbmV3X29yZ191c2VyX2lkc1xyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3BlY2lmeVVzZXJcIlxyXG5cdFx0IyAxMi4qKioqKioqKioqKuaMh+WumueahOS6uuWRmCoqKioqKioqKioqXHJcblx0XHRhcHByb3Zlcl91c2VyX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2Vyc1xyXG5cdFx0YXBwcm92ZXJfdXNlcl9pZHMgPSBfLnVuaXEoYXBwcm92ZXJfdXNlcl9pZHMpXHJcblx0XHRuZXdfYXBwcm92ZXJfdXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChhcHByb3Zlcl91c2VyX2lkcywgKGFwcHJvdmVyX3VzZXJfaWQpIC0+XHJcblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVyX3VzZXJfaWQgfSkuY291bnQoKVxyXG5cdFx0XHRpZiBzcGFjZV91c2VyX2luZm9fY291bnQgPiAwXHJcblx0XHRcdFx0bmV3X2FwcHJvdmVyX3VzZXJfaWRzLnB1c2goYXBwcm92ZXJfdXNlcl9pZClcclxuXHRcdClcclxuXHJcblx0XHRyZXR1cm4gbmV3X2FwcHJvdmVyX3VzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJwaWNrdXBBdFJ1bnRpbWVcIlxyXG5cdFx0IyAxMy4qKioqKioqKioqKuWuoeaJueaXtuaMh+WumioqKioqKioqKioqXHJcblx0XHRuZXh0X3N0ZXBfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIChfdHIpIC0+XHJcblx0XHRcdHJldHVybiBfdHIuaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdClcclxuXHRcdF9hcHByb3ZlID0gXy5maW5kKF90cmFjZS5hcHByb3ZlcywgKF9hcHApIC0+XHJcblx0XHRcdHJldHVybiBfYXBwLmlzX2ZpbmlzaGVkIGlzIGZhbHNlIGFuZCBfYXBwLnR5cGUgaXNudCAnY2MnXHJcblx0XHQpXHJcblxyXG5cdFx0aWYgX2FwcHJvdmUubmV4dF9zdGVwc1xyXG5cdFx0XHRpZiBfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl1cclxuXHRcdFx0XHRuZXh0X3N0ZXBfdXNlcnMgPSBfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl1cclxuXHJcblx0XHRyZXR1cm4gbmV4dF9zdGVwX3VzZXJzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRTdXBlcmlvclwiXHJcblx0XHQjIDE0LioqKioqKioqKioq55Sz6K+35Lq65LiK57qn5Li7566hKioqKioqKioqKipcclxuXHRcdGFwcGxpY2FudFN1cGVyaW9ycyA9IG5ldyBBcnJheVxyXG5cdFx0X3NwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBpbnN0YW5jZS5hcHBsaWNhbnQgfSwgeyBmaWVsZHM6IHsgbWFuYWdlcjogMSB9IH0pXHJcblx0XHRpZiBfc3BhY2VfdXNlci5tYW5hZ2VyXHJcblx0XHRcdGFwcGxpY2FudFN1cGVyaW9ycy5wdXNoKF9zcGFjZV91c2VyLm1hbmFnZXIpXHJcblxyXG5cdFx0cmV0dXJuIGFwcGxpY2FudFN1cGVyaW9ycyIsIiAgICAgICAgICAgICAgICAgICAgICAgXG5cbmdldEhhbmRsZXJzTWFuYWdlciA9IHt9O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMgPSBmdW5jdGlvbih1c2VyX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKSB7XG4gIHZhciBhcHByb3ZlX3VzZXJzO1xuICBhcHByb3ZlX3VzZXJzID0gbmV3IEFycmF5O1xuICBfLmVhY2godXNlcl9pZHMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgaWYgKGRiLnVzZXJzLmZpbmQoe1xuICAgICAgX2lkOiB1c2VyX2lkXG4gICAgfSkuY291bnQoKSA+IDApIHtcbiAgICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXModXNlcl9pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKTtcbiAgICAgIGlmICh1c2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBhcHByb3ZlX3VzZXJzID0gYXBwcm92ZV91c2Vycy5jb25jYXQodXNlcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInVzZXJfaWTkuI3lkIjms5XkuI3lkIjms5VcIik7XG4gICAgfVxuICB9KTtcbiAgYXBwcm92ZV91c2VycyA9IF8udW5pcShhcHByb3ZlX3VzZXJzKTtcbiAgcmV0dXJuIGFwcHJvdmVfdXNlcnM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyA9IGZ1bmN0aW9uKHVzZXJfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgdXNlcl9pZHM7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gocm9sZV9pZHMsIGZ1bmN0aW9uKHJvbGVfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgaWYgKGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICBfaWQ6IHJvbGVfaWRcbiAgICB9KS5jb3VudCgpID4gMCkge1xuICAgICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlKHVzZXJfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKTtcbiAgICAgIGlmICh1c2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwicm9sZV9pZOW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICB9XG4gIH0pO1xuICBpZiAodXNlcl9pZHMubGVuZ3RoID4gMCkge1xuICAgIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgICByZXR1cm4gdXNlcl9pZHM7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmoLnmja51c2VyX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIik7XG4gIH1cbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGUgPSBmdW5jdGlvbih1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZCkge1xuICB2YXIgb3JncywgdXNlcl9pZHM7XG4gIG9yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICB1c2VyczogdXNlcl9pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDFcbiAgICB9XG4gIH0pLmZldGNoKCk7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gob3JncywgZnVuY3Rpb24ob3JnKSB7XG4gICAgdmFyIHVzZXJzO1xuICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZy5faWQsIHJvbGVfaWQsIHNwYWNlX2lkKTtcbiAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKTtcbiAgICB9XG4gIH0pO1xuICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gIHJldHVybiB1c2VyX2lkcztcbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzID0gZnVuY3Rpb24ob3JnX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKSB7XG4gIHZhciB1c2VyX2lkcztcbiAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gIF8uZWFjaChvcmdfaWRzLCBmdW5jdGlvbihvcmdfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGVzKG9yZ19pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKTtcbiAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKTtcbiAgICB9XG4gIH0pO1xuICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gIHJldHVybiB1c2VyX2lkcztcbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMgPSBmdW5jdGlvbihvcmdfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgdXNlcl9pZHM7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gocm9sZV9pZHMsIGZ1bmN0aW9uKHJvbGVfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUob3JnX2lkLCByb2xlX2lkLCBzcGFjZV9pZCk7XG4gICAgaWYgKHVzZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgfVxuICB9KTtcbiAgaWYgKHVzZXJfaWRzLmxlbmd0aCA+IDApIHtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2ub3JnX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIik7XG4gIH1cbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZSA9IGZ1bmN0aW9uKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpIHtcbiAgdmFyIG9yZywgcGFyZW50cywgcG9zaXRpb25zLCB1c2VyX2lkcztcbiAgb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHtcbiAgICBfaWQ6IG9yZ19pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwYXJlbnRzOiAxXG4gICAgfVxuICB9KTtcbiAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICBvcmc6IG9yZ19pZCxcbiAgICByb2xlOiByb2xlX2lkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHVzZXJzOiAxXG4gICAgfVxuICB9KS5mZXRjaCgpO1xuICBfLmVhY2gocG9zaXRpb25zLCBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2Vycyk7XG4gIH0pO1xuICBpZiAodXNlcl9pZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcGFyZW50cyA9IG9yZy5wYXJlbnRzO1xuICAgIF8uZWFjaChwYXJlbnRzLCBmdW5jdGlvbihwYXJlbnRfaWQpIHtcbiAgICAgIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIG9yZzogcGFyZW50X2lkLFxuICAgICAgICByb2xlOiByb2xlX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIF8uZWFjaChwb3NpdGlvbnMsIGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHBvc2l0aW9uLnVzZXJzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICByZXR1cm4gdXNlcl9pZHM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMgPSBmdW5jdGlvbihpbnN0YW5jZV9pZCwgc3RlcF9pZCkge1xuICB2YXIgX2FwcHJvdmUsIF9zcGFjZV91c2VyLCBfdHJhY2UsIGFwcGxpY2FudCwgYXBwbGljYW50U3VwZXJpb3JzLCBhcHByb3ZlSHJSb2xlSWRzLCBhcHByb3ZlX3VzZXJzLCBhcHByb3Zlcl9vcmdfZmllbGQsIGFwcHJvdmVyX29yZ19pZHMsIGFwcHJvdmVyX3N0ZXAsIGFwcHJvdmVyX3VzZXJfZmllbGQsIGFwcHJvdmVyX3VzZXJfaWRzLCBjdXJyZW50LCBjdXJyZW50X2Zsb3csIGN1cnJlbnRfZmxvd192ZXJzaW9uLCBjdXJyZW50X2Zvcm0sIGN1cnJlbnRfc3RlcCwgY3VycmVudF9zdGVwcywgZGVhbF90eXBlLCBmaWVsZF9jb2RlLCBmaW5pc2hlZF90cmFjZXMsIGZsb3dfaWQsIGZsb3dfcmV2LCBmb3JtLCBmb3JtX2ZpZWxkcywgZm9ybV9pZCwgZm9ybV9yZXYsIGhhbmRsZXJzLCBpbnN0YW5jZSwgbWF4X3N0YXJ0RGF0ZV90cmFjZSwgbmV3X2FwcHJvdmVyX3VzZXJfaWRzLCBuZXdfb3JnX3VzZXJfaWRzLCBuZXdlc3RfdmFsdWVzLCBuZXh0X3N0ZXBfdXNlcnMsIG9yZ19pZHMsIG9yZ19pZHNfbmFtZXMsIG9yZ191c2VyX2lkcywgc3BhY2VfaWQsIHNwYWNlX3VzZXJfY291bnQsIHN1Ym1pdHRlciwgc3VibWl0dGVyX3VzZXJfY291bnQsIHVuZmluaXNoZWRfdHJhY2UsIHVzZXJfaWRzLCB1c2VyX2lkc19uYW1lcywgdXNlcnMsIHZhbGlkX2FwcHJvdmVyX29yZ19pZHM7XG4gIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpO1xuICBpZiAoaW5zdGFuY2Uuc3RlcF9hcHByb3ZlICYmICFfLmlzRW1wdHkoaW5zdGFuY2Uuc3RlcF9hcHByb3ZlW3N0ZXBfaWQgKyBcIl9vcHRpb25zXCJdKSkge1xuICAgIHJldHVybiBpbnN0YW5jZS5zdGVwX2FwcHJvdmVbc3RlcF9pZCArIFwiX29wdGlvbnNcIl07XG4gIH1cbiAgYXBwcm92ZV91c2VycyA9IG5ldyBBcnJheTtcbiAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgZmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG4gIGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICBjdXJyZW50X2Zsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQpO1xuICBjdXJyZW50X3N0ZXAgPSBudWxsO1xuICBjdXJyZW50X3N0ZXBzID0gbmV3IEFycmF5O1xuICBpZiAoY3VycmVudF9mbG93LmN1cnJlbnQuX2lkID09PSBmbG93X3Jldikge1xuICAgIGN1cnJlbnRfc3RlcHMgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5zdGVwcztcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50ID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oaGlzdG9yeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICB9KTtcbiAgICBjdXJyZW50X3N0ZXBzID0gY3VycmVudC5zdGVwcztcbiAgfVxuICBjdXJyZW50X3N0ZXAgPSBfLmZpbmQoY3VycmVudF9zdGVwcywgZnVuY3Rpb24oc3RlcCkge1xuICAgIHJldHVybiBzdGVwLl9pZCA9PT0gc3RlcF9pZDtcbiAgfSk7XG4gIGlmIChjdXJyZW50X3N0ZXAuc3RlcF90eXBlID09PSBcImNvbmRpdGlvblwiKSB7XG4gICAgdW5maW5pc2hlZF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICByZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgPT09IGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgQXJyYXkodW5maW5pc2hlZF90cmFjZS5hcHByb3Zlc1swXS51c2VyKTtcbiAgfVxuICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJzdGFydFwiKSB7XG4gICAgaGFuZGxlcnMgPSBuZXcgQXJyYXk7XG4gICAgaGFuZGxlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpO1xuICAgIGhhbmRsZXJzLnB1c2goaW5zdGFuY2Uuc3VibWl0dGVyKTtcbiAgICBoYW5kbGVycyA9IF8udW5pcShoYW5kbGVycyk7XG4gICAgcmV0dXJuIGhhbmRsZXJzO1xuICB9XG4gIGRlYWxfdHlwZSA9IGN1cnJlbnRfc3RlcC5kZWFsX3R5cGU7XG4gIHVzZXJzID0gbmV3IEFycmF5O1xuICBpZiAoZGVhbF90eXBlID09PSBcImFwcGxpY2FudFJvbGVcIikge1xuICAgIGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudDtcbiAgICBpZiAoYXBwbGljYW50KSB7XG4gICAgICBzcGFjZV91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwbGljYW50XG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHNwYWNlX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgJiYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICAgIHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoe1xuICAgICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgICBpZiAocm9sZV9jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKGFwcGxpY2FudCwgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJJbnN0YW5jZeeahOaPkOS6pOS6uuS4uuepulwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcImhyUm9sZVwiKSB7XG4gICAgYXBwcm92ZUhyUm9sZUlkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9ocl9yb2xlcztcbiAgICBpZiAoYXBwcm92ZUhyUm9sZUlkcykge1xuICAgICAgcmV0dXJuIF8ucGx1Y2soV29ya2Zsb3dNYW5hZ2VyLmdldEhyUm9sZXNVc2VycyhzcGFjZV9pZCwgYXBwcm92ZUhyUm9sZUlkcyksICd1c2VyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi6KeS6Imy5pyq5oyH5a6aXCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwiYXBwbGljYW50XCIpIHtcbiAgICBhcHBsaWNhbnQgPSBpbnN0YW5jZS5hcHBsaWNhbnQ7XG4gICAgc3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgdXNlcjogYXBwbGljYW50XG4gICAgfSkuY291bnQoKTtcbiAgICBpZiAoc3BhY2VfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheShhcHBsaWNhbnQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwib3JnRmllbGRSb2xlXCIpIHtcbiAgICBmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm07XG4gICAgZm9ybV9yZXYgPSBudWxsO1xuICAgIGlmIChmbG93X3JldiA9PT0gY3VycmVudF9mbG93LmN1cnJlbnQuX2lkKSB7XG4gICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihjdXJyZW50X2Zsb3dfaGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICAgIH0pO1xuICAgICAgaWYgKGN1cnJlbnRfZmxvd192ZXJzaW9uKSB7XG4gICAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKTtcbiAgICBjdXJyZW50X2Zvcm0gPSBudWxsO1xuICAgIGlmIChmb3JtX3JldiA9PT0gZm9ybS5jdXJyZW50Ll9pZCkge1xuICAgICAgY3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgZnVuY3Rpb24oZm9ybV9oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBmb3JtX2hpc3RvcnkuX2lkID09PSBmb3JtX3JldjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHByb3Zlcl9vcmdfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JnX2ZpZWxkO1xuICAgIGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkcztcbiAgICBmaWVsZF9jb2RlID0gbnVsbDtcbiAgICBfLmVhY2goZm9ybV9maWVsZHMsIGZ1bmN0aW9uKGZvcm1fZmllbGQpIHtcbiAgICAgIGlmIChmb3JtX2ZpZWxkLl9pZCA9PT0gYXBwcm92ZXJfb3JnX2ZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5ld2VzdF92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgIG9yZ19pZHMgPSBuZXcgQXJyYXk7XG4gICAgb3JnX2lkc19uYW1lcyA9IG5ldyBBcnJheTtcbiAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSkge1xuICAgICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBvcmdfaWRzX25hbWVzID0gbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXy5lYWNoKG9yZ19pZHNfbmFtZXMsIGZ1bmN0aW9uKG9yZykge1xuICAgICAgdmFyIGNoZWNrX29yZ19jb3VudDtcbiAgICAgIGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDogb3JnW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfb3JnX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHSUTkuI3lkIjms5VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKTtcbiAgICB9KTtcbiAgICBpZiAoY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzICYmIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICBfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBmdW5jdGlvbihhcHByb3Zlcl9yb2xlKSB7XG4gICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICByb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICBfaWQ6IGFwcHJvdmVyX3JvbGVcbiAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgaWYgKHJvbGVfY291bnQgPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBhcHByb3Zlcl9yb2xlICsgXCLlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzKG9yZ19pZHMsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgaW5zdGFuY2Uuc3BhY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcIm9yZ0ZpZWxkXCIpIHtcbiAgICBmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm07XG4gICAgZm9ybV9yZXYgPSBudWxsO1xuICAgIGlmIChmbG93X3JldiA9PT0gY3VycmVudF9mbG93LmN1cnJlbnQuX2lkKSB7XG4gICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihjdXJyZW50X2Zsb3dfaGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICAgIH0pO1xuICAgICAgaWYgKGN1cnJlbnRfZmxvd192ZXJzaW9uKSB7XG4gICAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKTtcbiAgICBjdXJyZW50X2Zvcm0gPSBudWxsO1xuICAgIGlmIChmb3JtX3JldiA9PT0gZm9ybS5jdXJyZW50Ll9pZCkge1xuICAgICAgY3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgZnVuY3Rpb24oZm9ybV9oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBmb3JtX2hpc3RvcnkuX2lkID09PSBmb3JtX3JldjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHByb3Zlcl9vcmdfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JnX2ZpZWxkO1xuICAgIGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkcztcbiAgICBmaWVsZF9jb2RlID0gbnVsbDtcbiAgICBfLmVhY2goZm9ybV9maWVsZHMsIGZ1bmN0aW9uKGZvcm1fZmllbGQpIHtcbiAgICAgIGlmIChmb3JtX2ZpZWxkLl9pZCA9PT0gYXBwcm92ZXJfb3JnX2ZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5ld2VzdF92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgIG9yZ19pZHMgPSBuZXcgQXJyYXk7XG4gICAgb3JnX2lkc19uYW1lcyA9IG5ldyBBcnJheTtcbiAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSkge1xuICAgICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBvcmdfaWRzX25hbWVzID0gbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXy5lYWNoKG9yZ19pZHNfbmFtZXMsIGZ1bmN0aW9uKG9yZykge1xuICAgICAgdmFyIGNoZWNrX29yZ19jb3VudDtcbiAgICAgIGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDogb3JnW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfb3JnX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHSUTkuI3lkIjms5VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKTtcbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgICB2YXIgY2hlY2tfb3Jncywgb3JnLCBvcmdfY2hpbGRyZW4sIG9yZ191c2VycztcbiAgICAgIG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogb3JnX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb3JnX2NoaWxkcmVuID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICBwYXJlbnRzOiBvcmdfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdXNlcnM6IDFcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIG9yZ19jaGlsZHJlbi51bnNoaWZ0KG9yZyk7XG4gICAgICBjaGVja19vcmdzID0gb3JnX2NoaWxkcmVuO1xuICAgICAgb3JnX3VzZXJzID0gbmV3IEFycmF5O1xuICAgICAgXy5lYWNoKGNoZWNrX29yZ3MsIGZ1bmN0aW9uKGNoZWNrX29yZ191c2VyKSB7XG4gICAgICAgIGlmIChjaGVja19vcmdfdXNlci51c2Vycykge1xuICAgICAgICAgIF8uZWFjaChjaGVja19vcmdfdXNlci51c2VycywgZnVuY3Rpb24ob3JnX3VzZXIpIHtcbiAgICAgICAgICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICAgICAgICB1c2VyOiBvcmdfdXNlclxuICAgICAgICAgICAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInNwYWNl5LiL5LiN5a2Y5Zyo5q2kdXNlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChjaGVja19vcmdfdXNlci51c2Vycyk7XG4gICAgICAgIHJldHVybiBvcmdfdXNlcnMgPSBvcmdfdXNlcnMuY29uY2F0KGNoZWNrX29yZ191c2VyLnVzZXJzKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKG9yZ191c2Vycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dcIiArIG9yZ19pZCArIFwi5LiN5a2Y5Zyo5aSE55CG5Lq6XCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgICByZXR1cm4gdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInVzZXJGaWVsZFJvbGVcIikge1xuICAgIGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybTtcbiAgICBmb3JtX3JldiA9IG51bGw7XG4gICAgaWYgKGZsb3dfcmV2ID09PSBjdXJyZW50X2Zsb3cuY3VycmVudC5faWQpIHtcbiAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIGZ1bmN0aW9uKGN1cnJlbnRfZmxvd19oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgPT09IGZsb3dfcmV2O1xuICAgICAgfSk7XG4gICAgICBpZiAoY3VycmVudF9mbG93X3ZlcnNpb24pIHtcbiAgICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb247XG4gICAgICB9XG4gICAgfVxuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpO1xuICAgIGN1cnJlbnRfZm9ybSA9IG51bGw7XG4gICAgaWYgKGZvcm1fcmV2ID09PSBmb3JtLmN1cnJlbnQuX2lkKSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCBmdW5jdGlvbihmb3JtX2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1faGlzdG9yeS5faWQgPT09IGZvcm1fcmV2O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGFwcHJvdmVyX3VzZXJfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcl9maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX3VzZXJfZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSk7XG4gICAgdXNlcl9pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKHVzZXJfaWRzX25hbWVzLCBmdW5jdGlvbih1c2VyKSB7XG4gICAgICB2YXIgY2hlY2tfdXNlcl9jb3VudDtcbiAgICAgIGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiB1c2VyW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS6uuWRmElE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKTtcbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcyAmJiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICB2YXIgcm9sZV9jb3VudDtcbiAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgIH0pLmNvdW50KCk7XG4gICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXModXNlcl9pZHMsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgaW5zdGFuY2Uuc3BhY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInVzZXJGaWVsZFwiKSB7XG4gICAgZm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtO1xuICAgIGZvcm1fcmV2ID0gbnVsbDtcbiAgICBpZiAoZmxvd19yZXYgPT09IGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCkge1xuICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oY3VycmVudF9mbG93X2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCA9PT0gZmxvd19yZXY7XG4gICAgICB9KTtcbiAgICAgIGlmIChjdXJyZW50X2Zsb3dfdmVyc2lvbikge1xuICAgICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZCk7XG4gICAgY3VycmVudF9mb3JtID0gbnVsbDtcbiAgICBpZiAoZm9ybV9yZXYgPT09IGZvcm0uY3VycmVudC5faWQpIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIGZ1bmN0aW9uKGZvcm1faGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCA9PT0gZm9ybV9yZXY7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZXJfdXNlcl9maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VyX2ZpZWxkO1xuICAgIGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkcztcbiAgICBmaWVsZF9jb2RlID0gbnVsbDtcbiAgICBfLmVhY2goZm9ybV9maWVsZHMsIGZ1bmN0aW9uKGZvcm1fZmllbGQpIHtcbiAgICAgIGlmIChmb3JtX2ZpZWxkLl9pZCA9PT0gYXBwcm92ZXJfdXNlcl9maWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICB1c2VyX2lkc19uYW1lcyA9IG5ldyBBcnJheTtcbiAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSkge1xuICAgICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB1c2VyX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VyX2lkc19uYW1lcy5wdXNoKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB1c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2godXNlcl9pZHNfbmFtZXMsIGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgIHZhciBjaGVja191c2VyX2NvdW50O1xuICAgICAgY2hlY2tfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IHVzZXJbXCJpZFwiXVxuICAgICAgfSkuY291bnQoKTtcbiAgICAgIGlmIChjaGVja191c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5Lq65ZGYSUTkuI3lkIjms5VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXNlcl9pZHMucHVzaCh1c2VyW1wiaWRcIl0pO1xuICAgIH0pO1xuICAgIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgICByZXR1cm4gdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlTdGVwUm9sZVwiKSB7XG4gICAgYXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwO1xuICAgIGZpbmlzaGVkX3RyYWNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0cmFjZSkge1xuICAgICAgaWYgKHRyYWNlLnN0ZXAgPT09IGFwcHJvdmVyX3N0ZXApIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtYXhfc3RhcnREYXRlX3RyYWNlID0gXy5tYXgoZmluaXNoZWRfdHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5zdGFydF9kYXRlO1xuICAgIH0pO1xuICAgIGFwcHJvdmVfdXNlcnMgPSBfLnBsdWNrKG1heF9zdGFydERhdGVfdHJhY2UuYXBwcm92ZXMsIFwidXNlclwiKTtcbiAgICBpZiAoY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzKSB7XG4gICAgICBfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBmdW5jdGlvbihhcHByb3Zlcl9yb2xlKSB7XG4gICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICByb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICBfaWQ6IGFwcHJvdmVyX3JvbGVcbiAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgaWYgKHJvbGVfY291bnQgPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuinkuiJsuW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIF8uZWFjaChhcHByb3ZlX3VzZXJzLCBmdW5jdGlvbihhcHByb3ZlX3VzZXIpIHtcbiAgICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHByb3ZlX3VzZXJcbiAgICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmjIflrprmraXpqqTnmoTlpITnkIbkurrlt7Lnu4/lj5jmm7RcIik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyhhcHByb3ZlX3VzZXJzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIHNwYWNlX2lkKTtcbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwic3BlY2lmeVN0ZXBVc2VyXCIpIHtcbiAgICBhcHByb3Zlcl9zdGVwID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX3N0ZXA7XG4gICAgZmluaXNoZWRfdHJhY2VzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICBpZiAodHJhY2Uuc3RlcCA9PT0gYXBwcm92ZXJfc3RlcCkge1xuICAgICAgICByZXR1cm4gZmluaXNoZWRfdHJhY2VzLnB1c2godHJhY2UpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG1heF9zdGFydERhdGVfdHJhY2UgPSBfLm1heChmaW5pc2hlZF90cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0LnN0YXJ0X2RhdGU7XG4gICAgfSk7XG4gICAgYXBwcm92ZV91c2VycyA9IF8ucGx1Y2sobWF4X3N0YXJ0RGF0ZV90cmFjZS5hcHByb3ZlcywgXCJ1c2VyXCIpO1xuICAgIF8uZWFjaChhcHByb3ZlX3VzZXJzLCBmdW5jdGlvbihhcHByb3ZlX3VzZXIpIHtcbiAgICAgIHZhciBjaGVja19hcHByb3ZlX3VzZXJfY291bnQ7XG4gICAgICBjaGVja19hcHByb3ZlX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHByb3ZlX3VzZXJcbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfYXBwcm92ZV91c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oyH5a6a5q2l6aqk55qE5aSE55CG5Lq65bey57uP5Y+Y5pu0XCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFwcHJvdmVfdXNlcnMgPSBfLnVuaXEoYXBwcm92ZV91c2Vycyk7XG4gICAgcmV0dXJuIGFwcHJvdmVfdXNlcnM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInN1Ym1pdHRlclJvbGVcIikge1xuICAgIHN1Ym1pdHRlciA9IGluc3RhbmNlLnN1Ym1pdHRlcjtcbiAgICBpZiAoIXN1Ym1pdHRlcikge1xuICAgICAgc3VibWl0dGVyX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBzdWJtaXR0ZXJcbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoc3VibWl0dGVyX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzICYmIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICAgICAgdmFyIHJvbGVfY291bnQ7XG4gICAgICAgICAgICByb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgICAgICB9KS5jb3VudCgpO1xuICAgICAgICAgICAgaWYgKHJvbGVfY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhzdWJtaXR0ZXIsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5rWB56iL5q2l6aqkXCIgKyBjdXJyZW50X3N0ZXAubmFtZSArIFwi5a6h5om55bKX5L2N5pyq5oyH5a6aXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55Sz6K+35Y2V55qE5o+Q5Lqk5Lq65Li656m6XCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwic3VibWl0dGVyXCIpIHtcbiAgICBzdWJtaXR0ZXIgPSBpbnN0YW5jZS5zdWJtaXR0ZXI7XG4gICAgc3VibWl0dGVyX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIHVzZXI6IHN1Ym1pdHRlclxuICAgIH0pLmNvdW50KCk7XG4gICAgaWYgKHN1Ym1pdHRlcl91c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaPkOS6pOS6uuW3sue7j+iiq+WIoOmZpOaIluS4jeWxnuS6juW9k+WJjeW3peS9nOWMulwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheShzdWJtaXR0ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwic3BlY2lmeU9yZ1wiKSB7XG4gICAgYXBwcm92ZXJfb3JnX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdzO1xuICAgIGlmICghYXBwcm92ZXJfb3JnX2lkcyB8fCBhcHByb3Zlcl9vcmdfaWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrlrprkuYnnlKjkuo7mn6Xmib7kuIvkuIDmraXlpITnkIbkurrnmoTpg6jpl6jvvIzor7fogZTns7vnrqHnkIblkZjosIPmn6XmtYHnqIvlm77nmoTphY3nva7mmK/lkKbmraPnoa5cIik7XG4gICAgfVxuICAgIHZhbGlkX2FwcHJvdmVyX29yZ19pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKGFwcHJvdmVyX29yZ19pZHMsIGZ1bmN0aW9uKGFwcHJvdmVyX29yZ19pZCkge1xuICAgICAgaWYgKGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDogYXBwcm92ZXJfb3JnX2lkXG4gICAgICB9KS5jb3VudCgpID4gMCkge1xuICAgICAgICByZXR1cm4gdmFsaWRfYXBwcm92ZXJfb3JnX2lkcy51bnNoaWZ0KGFwcHJvdmVyX29yZ19pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb3JnX3VzZXJfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaCh2YWxpZF9hcHByb3Zlcl9vcmdfaWRzLCBmdW5jdGlvbih2YWxpZF9hcHByb3Zlcl9vcmdfaWQpIHtcbiAgICAgIHZhciBjaGlsZF9vcmdzLCB2YWxpZF9hcHByb3Zlcl9vcmc7XG4gICAgICB2YWxpZF9hcHByb3Zlcl9vcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IHZhbGlkX2FwcHJvdmVyX29yZ19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB1c2VyczogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh2YWxpZF9hcHByb3Zlcl9vcmcudXNlcnMpIHtcbiAgICAgICAgb3JnX3VzZXJfaWRzID0gb3JnX3VzZXJfaWRzLmNvbmNhdCh2YWxpZF9hcHByb3Zlcl9vcmcudXNlcnMpO1xuICAgICAgfVxuICAgICAgY2hpbGRfb3JncyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgcGFyZW50czogdmFsaWRfYXBwcm92ZXJfb3JnX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICByZXR1cm4gXy5lYWNoKGNoaWxkX29yZ3MsIGZ1bmN0aW9uKGNoaWxkX29yZykge1xuICAgICAgICBpZiAoY2hpbGRfb3JnLnVzZXJzKSB7XG4gICAgICAgICAgcmV0dXJuIG9yZ191c2VyX2lkcyA9IG9yZ191c2VyX2lkcy5jb25jYXQoY2hpbGRfb3JnLnVzZXJzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb3JnX3VzZXJfaWRzID0gXy51bmlxKG9yZ191c2VyX2lkcyk7XG4gICAgbmV3X29yZ191c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2gob3JnX3VzZXJfaWRzLCBmdW5jdGlvbihvcmdfdXNlcl9pZCkge1xuICAgICAgdmFyIHNwYWNlX3VzZXJfaW5mb19jb3VudDtcbiAgICAgIHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IG9yZ191c2VyX2lkXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHNwYWNlX3VzZXJfaW5mb19jb3VudCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG5ld19vcmdfdXNlcl9pZHMucHVzaChvcmdfdXNlcl9pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld19vcmdfdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlVc2VyXCIpIHtcbiAgICBhcHByb3Zlcl91c2VyX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VycztcbiAgICBhcHByb3Zlcl91c2VyX2lkcyA9IF8udW5pcShhcHByb3Zlcl91c2VyX2lkcyk7XG4gICAgbmV3X2FwcHJvdmVyX3VzZXJfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChhcHByb3Zlcl91c2VyX2lkcywgZnVuY3Rpb24oYXBwcm92ZXJfdXNlcl9pZCkge1xuICAgICAgdmFyIHNwYWNlX3VzZXJfaW5mb19jb3VudDtcbiAgICAgIHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IGFwcHJvdmVyX3VzZXJfaWRcbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoc3BhY2VfdXNlcl9pbmZvX2NvdW50ID4gMCkge1xuICAgICAgICByZXR1cm4gbmV3X2FwcHJvdmVyX3VzZXJfaWRzLnB1c2goYXBwcm92ZXJfdXNlcl9pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld19hcHByb3Zlcl91c2VyX2lkcztcbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwicGlja3VwQXRSdW50aW1lXCIpIHtcbiAgICBuZXh0X3N0ZXBfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgX3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24oX3RyKSB7XG4gICAgICByZXR1cm4gX3RyLmlzX2ZpbmlzaGVkID09PSBmYWxzZTtcbiAgICB9KTtcbiAgICBfYXBwcm92ZSA9IF8uZmluZChfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKF9hcHApIHtcbiAgICAgIHJldHVybiBfYXBwLmlzX2ZpbmlzaGVkID09PSBmYWxzZSAmJiBfYXBwLnR5cGUgIT09ICdjYyc7XG4gICAgfSk7XG4gICAgaWYgKF9hcHByb3ZlLm5leHRfc3RlcHMpIHtcbiAgICAgIGlmIChfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl0pIHtcbiAgICAgICAgbmV4dF9zdGVwX3VzZXJzID0gX2FwcHJvdmUubmV4dF9zdGVwc1swXVtcInVzZXJzXCJdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dF9zdGVwX3VzZXJzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJhcHBsaWNhbnRTdXBlcmlvclwiKSB7XG4gICAgYXBwbGljYW50U3VwZXJpb3JzID0gbmV3IEFycmF5O1xuICAgIF9zcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICB1c2VyOiBpbnN0YW5jZS5hcHBsaWNhbnRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbWFuYWdlcjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChfc3BhY2VfdXNlci5tYW5hZ2VyKSB7XG4gICAgICBhcHBsaWNhbnRTdXBlcmlvcnMucHVzaChfc3BhY2VfdXNlci5tYW5hZ2VyKTtcbiAgICB9XG4gICAgcmV0dXJuIGFwcGxpY2FudFN1cGVyaW9ycztcbiAgfVxufTtcbiIsInBlcm1pc3Npb25NYW5hZ2VyID0ge31cclxuXHJcbnBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyA9IChmbG93X2lkLCB1c2VyX2lkKSAtPlxyXG5cdCMg5qC55o2uOmZsb3dfaWTmn6XliLDlr7nlupTnmoRmbG93XHJcblx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhmbG93X2lkKVxyXG5cdHNwYWNlX2lkID0gZmxvdy5zcGFjZVxyXG5cdCMg5qC55o2uc3BhY2VfaWTlkow6dXNlcl9pZOWIsG9yZ2FuaXphdGlvbnPooajkuK3mn6XliLDnlKjmiLfmiYDlsZ7miYDmnInnmoRvcmdfaWTvvIjljIXmi6zkuIrnuqfnu4RJRO+8iVxyXG5cdG9yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcclxuXHRcdHNwYWNlOiBzcGFjZV9pZCwgdXNlcnM6IHVzZXJfaWQgfSwgeyBmaWVsZHM6IHsgcGFyZW50czogMSB9IH0pLmZldGNoKClcclxuXHRfLmVhY2gob3JnYW5pemF0aW9ucywgKG9yZykgLT5cclxuXHRcdG9yZ19pZHMucHVzaChvcmcuX2lkKVxyXG5cdFx0aWYgb3JnLnBhcmVudHNcclxuXHRcdFx0Xy5lYWNoKG9yZy5wYXJlbnRzLCAocGFyZW50X2lkKSAtPlxyXG5cdFx0XHRcdG9yZ19pZHMucHVzaChwYXJlbnRfaWQpXHJcblx0XHRcdClcclxuXHQpXHJcblx0b3JnX2lkcyA9IF8udW5pcShvcmdfaWRzKVxyXG5cdG15X3Blcm1pc3Npb25zID0gbmV3IEFycmF5XHJcblx0aWYgZmxvdy5wZXJtc1xyXG5cdFx0IyDliKTmlq1mbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pbuS4reaYr+WQpuWMheWQq+W9k+WJjeeUqOaIt++8jFxyXG5cdFx0IyDmiJbogIVmbG93LnBlcm1zLm9yZ3NfY2FuX2FkZOaYr+WQpuWMheWQqzTmraXlvpfliLDnmoRvcmdfaWTmlbDnu4TkuK3nmoTku7vkvZXkuIDkuKrvvIxcclxuXHRcdCMg6Iul5piv77yM5YiZ5Zyo6L+U5Zue55qE5pWw57uE5Lit5Yqg5LiKYWRkXHJcblx0XHRpZiBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGRcclxuXHRcdFx0dXNlcnNfY2FuX2FkZCA9IGZsb3cucGVybXMudXNlcnNfY2FuX2FkZFxyXG5cdFx0XHRpZiB1c2Vyc19jYW5fYWRkLmluY2x1ZGVzKHVzZXJfaWQpXHJcblx0XHRcdFx0bXlfcGVybWlzc2lvbnMucHVzaChcImFkZFwiKVxyXG5cclxuXHRcdGlmIGZsb3cucGVybXMub3Jnc19jYW5fYWRkXHJcblx0XHRcdG9yZ3NfY2FuX2FkZCA9IGZsb3cucGVybXMub3Jnc19jYW5fYWRkXHJcblx0XHRcdF8uZWFjaChvcmdfaWRzLCAob3JnX2lkKSAtPlxyXG5cdFx0XHRcdGlmIG9yZ3NfY2FuX2FkZC5pbmNsdWRlcyhvcmdfaWQpXHJcblx0XHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRkXCIpXHJcblx0XHRcdClcclxuXHRcdCMg5Yik5patZmxvdy5wZXJtcy51c2Vyc19jYW5fbW9uaXRvcuS4reaYr+WQpuWMheWQq+W9k+WJjeeUqOaIt++8jFxyXG5cdFx0IyDmiJbogIVmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3LmmK/lkKbljIXlkKs05q2l5b6X5Yiw55qEb3JnX2lk5pWw57uE5Lit55qE5Lu75L2V5LiA5Liq77yMXHJcblx0XHQjIOiLpeaYr++8jOWImeWcqOi/lOWbnueahOaVsOe7hOS4reWKoOS4im1vbml0b3JcclxuXHRcdGlmIGZsb3cucGVybXMudXNlcnNfY2FuX21vbml0b3JcclxuXHRcdFx0dXNlcnNfY2FuX21vbml0b3IgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9yXHJcblx0XHRcdGlmIHVzZXJzX2Nhbl9tb25pdG9yLmluY2x1ZGVzKHVzZXJfaWQpXHJcblx0XHRcdFx0bXlfcGVybWlzc2lvbnMucHVzaChcIm1vbml0b3JcIilcclxuXHJcblx0XHRpZiBmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3JcclxuXHRcdFx0b3Jnc19jYW5fbW9uaXRvciA9IGZsb3cucGVybXMub3Jnc19jYW5fbW9uaXRvclxyXG5cdFx0XHRfLmVhY2gob3JnX2lkcywgKG9yZ19pZCkgLT5cclxuXHRcdFx0XHRpZiBvcmdzX2Nhbl9tb25pdG9yLmluY2x1ZGVzKG9yZ19pZClcclxuXHRcdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJtb25pdG9yXCIpXHJcblx0XHRcdClcclxuXHRcdCMg5Yik5patZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRtaW7kuK3mmK/lkKbljIXlkKvlvZPliY3nlKjmiLfvvIxcclxuXHRcdCMg5oiW6ICFZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZG1pbuaYr+WQpuWMheWQqzTmraXlvpfliLDnmoRvcmdfaWTmlbDnu4TkuK3nmoTku7vkvZXkuIDkuKrvvIxcclxuXHRcdCMg6Iul5piv77yM5YiZ5Zyo6L+U5Zue55qE5pWw57uE5Lit5Yqg5LiKYWRtaW5cclxuXHRcdGlmIGZsb3cucGVybXMudXNlcnNfY2FuX2FkbWluXHJcblx0XHRcdHVzZXJzX2Nhbl9hZG1pbiA9IGZsb3cucGVybXMudXNlcnNfY2FuX2FkbWluXHJcblx0XHRcdGlmIHVzZXJzX2Nhbl9hZG1pbi5pbmNsdWRlcyh1c2VyX2lkKVxyXG5cdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJhZG1pblwiKVxyXG5cclxuXHRcdGlmIGZsb3cucGVybXMub3Jnc19jYW5fYWRtaW5cclxuXHRcdFx0b3Jnc19jYW5fYWRtaW4gPSBmbG93LnBlcm1zLm9yZ3NfY2FuX2FkbWluXHJcblx0XHRcdF8uZWFjaChvcmdfaWRzLCAob3JnX2lkKSAtPlxyXG5cdFx0XHRcdGlmIG9yZ3NfY2FuX2FkbWluLmluY2x1ZGVzKG9yZ19pZClcclxuXHRcdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJhZG1pblwiKVxyXG5cdFx0XHQpXHJcblxyXG5cdG15X3Blcm1pc3Npb25zID0gXy51bmlxKG15X3Blcm1pc3Npb25zKVxyXG5cdHJldHVybiBteV9wZXJtaXNzaW9ucyIsIiAgICAgICAgICAgICAgICAgICAgICBcblxucGVybWlzc2lvbk1hbmFnZXIgPSB7fTtcblxucGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zID0gZnVuY3Rpb24oZmxvd19pZCwgdXNlcl9pZCkge1xuICB2YXIgZmxvdywgbXlfcGVybWlzc2lvbnMsIG9yZ19pZHMsIG9yZ2FuaXphdGlvbnMsIG9yZ3NfY2FuX2FkZCwgb3Jnc19jYW5fYWRtaW4sIG9yZ3NfY2FuX21vbml0b3IsIHNwYWNlX2lkLCB1c2Vyc19jYW5fYWRkLCB1c2Vyc19jYW5fYWRtaW4sIHVzZXJzX2Nhbl9tb25pdG9yO1xuICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGZsb3dfaWQpO1xuICBzcGFjZV9pZCA9IGZsb3cuc3BhY2U7XG4gIG9yZ19pZHMgPSBuZXcgQXJyYXk7XG4gIG9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICB1c2VyczogdXNlcl9pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwYXJlbnRzOiAxXG4gICAgfVxuICB9KS5mZXRjaCgpO1xuICBfLmVhY2gob3JnYW5pemF0aW9ucywgZnVuY3Rpb24ob3JnKSB7XG4gICAgb3JnX2lkcy5wdXNoKG9yZy5faWQpO1xuICAgIGlmIChvcmcucGFyZW50cykge1xuICAgICAgcmV0dXJuIF8uZWFjaChvcmcucGFyZW50cywgZnVuY3Rpb24ocGFyZW50X2lkKSB7XG4gICAgICAgIHJldHVybiBvcmdfaWRzLnB1c2gocGFyZW50X2lkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIG9yZ19pZHMgPSBfLnVuaXEob3JnX2lkcyk7XG4gIG15X3Blcm1pc3Npb25zID0gbmV3IEFycmF5O1xuICBpZiAoZmxvdy5wZXJtcykge1xuICAgIGlmIChmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGQpIHtcbiAgICAgIHVzZXJzX2Nhbl9hZGQgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGQ7XG4gICAgICBpZiAodXNlcnNfY2FuX2FkZC5pbmNsdWRlcyh1c2VyX2lkKSkge1xuICAgICAgICBteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZGQpIHtcbiAgICAgIG9yZ3NfY2FuX2FkZCA9IGZsb3cucGVybXMub3Jnc19jYW5fYWRkO1xuICAgICAgXy5lYWNoKG9yZ19pZHMsIGZ1bmN0aW9uKG9yZ19pZCkge1xuICAgICAgICBpZiAob3Jnc19jYW5fYWRkLmluY2x1ZGVzKG9yZ19pZCkpIHtcbiAgICAgICAgICByZXR1cm4gbXlfcGVybWlzc2lvbnMucHVzaChcImFkZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9yKSB7XG4gICAgICB1c2Vyc19jYW5fbW9uaXRvciA9IGZsb3cucGVybXMudXNlcnNfY2FuX21vbml0b3I7XG4gICAgICBpZiAodXNlcnNfY2FuX21vbml0b3IuaW5jbHVkZXModXNlcl9pZCkpIHtcbiAgICAgICAgbXlfcGVybWlzc2lvbnMucHVzaChcIm1vbml0b3JcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3IpIHtcbiAgICAgIG9yZ3NfY2FuX21vbml0b3IgPSBmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3I7XG4gICAgICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgICAgIGlmIChvcmdzX2Nhbl9tb25pdG9yLmluY2x1ZGVzKG9yZ19pZCkpIHtcbiAgICAgICAgICByZXR1cm4gbXlfcGVybWlzc2lvbnMucHVzaChcIm1vbml0b3JcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRtaW4pIHtcbiAgICAgIHVzZXJzX2Nhbl9hZG1pbiA9IGZsb3cucGVybXMudXNlcnNfY2FuX2FkbWluO1xuICAgICAgaWYgKHVzZXJzX2Nhbl9hZG1pbi5pbmNsdWRlcyh1c2VyX2lkKSkge1xuICAgICAgICBteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRtaW5cIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLm9yZ3NfY2FuX2FkbWluKSB7XG4gICAgICBvcmdzX2Nhbl9hZG1pbiA9IGZsb3cucGVybXMub3Jnc19jYW5fYWRtaW47XG4gICAgICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgICAgIGlmIChvcmdzX2Nhbl9hZG1pbi5pbmNsdWRlcyhvcmdfaWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG15X3Blcm1pc3Npb25zLnB1c2goXCJhZG1pblwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIG15X3Blcm1pc3Npb25zID0gXy51bmlxKG15X3Blcm1pc3Npb25zKTtcbiAgcmV0dXJuIG15X3Blcm1pc3Npb25zO1xufTtcbiIsImFwcHJvdmVNYW5hZ2VyID0ge31cclxuXHJcblxyXG4jIyNcclxuICAgIOWvueavlGFwcHJvdmVfdmFsdWVz5LiObGFzdF92YWx1ZXMg5a+56LGh77yMIOi/lOWbnmFwcHJvdmVfdmFsdWVz5q+UbGFzdF92YWx1ZXPlpJrlh7rnmoTmiJbogIXmlLnlj5jnmoTpg6jliIZcclxuIyMjXHJcbmFwcHJvdmVNYW5hZ2VyLmdldENoYW5nZVZhbHVlcyA9IChsYXN0X3ZhbHVlcyxhcHByb3ZlX3ZhbHVlcykgLT5cclxuXHJcblx0Y2hhbmdlVmFsdWVzID0ge31cclxuXHJcblx0bGFzdF92YWx1ZXNfa2V5cyA9IF8ua2V5cyhsYXN0X3ZhbHVlcylcclxuXHJcblx0YXBwcm92ZV92YWx1ZXNfa2V5cyA9IF8ua2V5cyhhcHByb3ZlX3ZhbHVlcylcclxuXHJcbiNcdGNvbnNvbGUubG9nKFwibGFzdF92YWx1ZXNfa2V5c1wiLCBsYXN0X3ZhbHVlc19rZXlzKVxyXG4jXHJcbiNcdGNvbnNvbGUubG9nKFwiYXBwcm92ZV92YWx1ZXNfa2V5c1wiLCBhcHByb3ZlX3ZhbHVlc19rZXlzKVxyXG5cclxuXHRhcHByb3ZlX3ZhbHVlc19rZXlzLmZvckVhY2ggKGtleSktPlxyXG5cdFx0aWYgXy5jb250YWlucyhsYXN0X3ZhbHVlc19rZXlzLCBrZXkpXHJcblx0XHRcdGlmICFfLmlzRXF1YWwobGFzdF92YWx1ZXNba2V5XSwgYXBwcm92ZV92YWx1ZXNba2V5XSlcclxuXHRcdFx0XHRjaGFuZ2VWYWx1ZXNba2V5XSA9IGFwcHJvdmVfdmFsdWVzW2tleV1cclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgYXBwcm92ZV92YWx1ZXNba2V5XSAhPSAnJ1xyXG4jXHRcdFx0XHRjb25zb2xlLmxvZyhrZXksYXBwcm92ZV92YWx1ZXNba2V5XSlcclxuXHRcdFx0XHRjaGFuZ2VWYWx1ZXNba2V5XSA9IGFwcHJvdmVfdmFsdWVzW2tleV1cclxuXHJcblx0cmV0dXJuIGNoYW5nZVZhbHVlc1xyXG4iLCIgICAgICAgICAgICAgICAgICAgXG5cbmFwcHJvdmVNYW5hZ2VyID0ge307XG5cblxuLypcbiAgICDlr7nmr5RhcHByb3ZlX3ZhbHVlc+S4jmxhc3RfdmFsdWVzIOWvueixoe+8jCDov5Tlm55hcHByb3ZlX3ZhbHVlc+avlGxhc3RfdmFsdWVz5aSa5Ye655qE5oiW6ICF5pS55Y+Y55qE6YOo5YiGXG4gKi9cblxuYXBwcm92ZU1hbmFnZXIuZ2V0Q2hhbmdlVmFsdWVzID0gZnVuY3Rpb24obGFzdF92YWx1ZXMsIGFwcHJvdmVfdmFsdWVzKSB7XG4gIHZhciBhcHByb3ZlX3ZhbHVlc19rZXlzLCBjaGFuZ2VWYWx1ZXMsIGxhc3RfdmFsdWVzX2tleXM7XG4gIGNoYW5nZVZhbHVlcyA9IHt9O1xuICBsYXN0X3ZhbHVlc19rZXlzID0gXy5rZXlzKGxhc3RfdmFsdWVzKTtcbiAgYXBwcm92ZV92YWx1ZXNfa2V5cyA9IF8ua2V5cyhhcHByb3ZlX3ZhbHVlcyk7XG4gIGFwcHJvdmVfdmFsdWVzX2tleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoXy5jb250YWlucyhsYXN0X3ZhbHVlc19rZXlzLCBrZXkpKSB7XG4gICAgICBpZiAoIV8uaXNFcXVhbChsYXN0X3ZhbHVlc1trZXldLCBhcHByb3ZlX3ZhbHVlc1trZXldKSkge1xuICAgICAgICByZXR1cm4gY2hhbmdlVmFsdWVzW2tleV0gPSBhcHByb3ZlX3ZhbHVlc1trZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXBwcm92ZV92YWx1ZXNba2V5XSAhPT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZVZhbHVlc1trZXldID0gYXBwcm92ZV92YWx1ZXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hhbmdlVmFsdWVzO1xufTtcbiIsImZsb3dNYW5hZ2VyID0ge31cclxuXHJcbmZsb3dNYW5hZ2VyLmdldENhdGVnb3JpZXNGbG93cyA9IChzcGFjZUlkLCBjYXRlZ29yaWVJZCwgZmllbGRzKS0+XHJcblxyXG5cdGNhdGVnb3JpZXNGb3JtcyA9IGZvcm1NYW5hZ2VyLmdldENhdGVnb3JpZXNGb3JtcyhzcGFjZUlkLCBjYXRlZ29yaWVJZCwge19pZDogMX0pLmZldGNoKClcclxuXHJcblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe2Zvcm06IHskaW4gOiBjYXRlZ29yaWVzRm9ybXMuZ2V0UHJvcGVydHkoXCJfaWRcIil9fSlcclxuXHJcbmZsb3dNYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zsb3dzID0gKHNwYWNlSWQsIGZpZWxkcyktPlxyXG5cclxuXHR1bkNhdGVnb3JpZXNGb3JtcyA9IGZvcm1NYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zvcm1zKHNwYWNlSWQsIHtfaWQ6IDF9KS5mZXRjaCgpXHJcblxyXG5cdHJldHVybiBkYi5mbG93cy5maW5kKHtmb3JtOiB7JGluIDogdW5DYXRlZ29yaWVzRm9ybXMuZ2V0UHJvcGVydHkoXCJfaWRcIil9fSlcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsImZvcm1NYW5hZ2VyID0ge31cclxuXHJcbmZvcm1NYW5hZ2VyLmdldENhdGVnb3JpZXNGb3JtcyA9IChzcGFjZUlkLCBjYXRlZ29yaWVJZCwgZmllbGRzKS0+XHJcblx0aWYgZmllbGRzXHJcblx0XHRfZmllbGRzID0ge2ZpZWxkczogZmllbGRzfVxyXG5cclxuXHRyZXR1cm4gZGIuZm9ybXMuZmluZCh7c3BhY2U6IHNwYWNlSWQsIGNhdGVnb3J5OiBjYXRlZ29yaWVJZCwgc3RhdGU6IFwiZW5hYmxlZFwifSwgX2ZpZWxkcylcclxuXHJcbmZvcm1NYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zvcm1zID0gKHNwYWNlSWQsIGZpZWxkcykgLT5cclxuXHRpZiBmaWVsZHNcclxuXHRcdF9maWVsZHMgPSB7ZmllbGRzOiBmaWVsZHN9XHJcblx0cmV0dXJuIGRiLmZvcm1zLmZpbmQoe3NwYWNlOiBzcGFjZUlkLCBjYXRlZ29yeTogeyRpbjogW251bGwsIFwiXCJdfSwgc3RhdGU6IFwiZW5hYmxlZFwifSwgX2ZpZWxkcylcclxuIiwiICAgICAgICAgICAgICAgIFxuXG5mb3JtTWFuYWdlciA9IHt9O1xuXG5mb3JtTWFuYWdlci5nZXRDYXRlZ29yaWVzRm9ybXMgPSBmdW5jdGlvbihzcGFjZUlkLCBjYXRlZ29yaWVJZCwgZmllbGRzKSB7XG4gIHZhciBfZmllbGRzO1xuICBpZiAoZmllbGRzKSB7XG4gICAgX2ZpZWxkcyA9IHtcbiAgICAgIGZpZWxkczogZmllbGRzXG4gICAgfTtcbiAgfVxuICByZXR1cm4gZGIuZm9ybXMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgY2F0ZWdvcnk6IGNhdGVnb3JpZUlkLFxuICAgIHN0YXRlOiBcImVuYWJsZWRcIlxuICB9LCBfZmllbGRzKTtcbn07XG5cbmZvcm1NYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zvcm1zID0gZnVuY3Rpb24oc3BhY2VJZCwgZmllbGRzKSB7XG4gIHZhciBfZmllbGRzO1xuICBpZiAoZmllbGRzKSB7XG4gICAgX2ZpZWxkcyA9IHtcbiAgICAgIGZpZWxkczogZmllbGRzXG4gICAgfTtcbiAgfVxuICByZXR1cm4gZGIuZm9ybXMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgY2F0ZWdvcnk6IHtcbiAgICAgICRpbjogW251bGwsIFwiXCJdXG4gICAgfSxcbiAgICBzdGF0ZTogXCJlbmFibGVkXCJcbiAgfSwgX2ZpZWxkcyk7XG59O1xuIiwic3RlcE1hbmFnZXIgPSB7fVxyXG5cclxuc3RlcE1hbmFnZXIuYWxsb3dCYXRjaCA9IChzdGVwKS0+XHJcblx0cmV0dXJuIHN0ZXAuYWxsb3dCYXRjaFxyXG5cclxuc3RlcE1hbmFnZXIuZ2V0U3RlcCA9IChpbnN0YW5jZSwgZmxvdywgc3RlcF9pZCktPlxyXG5cdGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uXHJcblx0aXNFeGlzdFN0ZXAgPSBudWxsXHJcblx0aWYgZmxvdy5jdXJyZW50Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0aXNFeGlzdFN0ZXAgPSBfLmZpbmQoZmxvdy5jdXJyZW50LnN0ZXBzLCAoc3RlcCktPlxyXG5cdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxyXG5cdFx0KVxyXG5cdGVsc2VcclxuXHRcdF8uZWFjaChmbG93Lmhpc3RvcnlzLCAoaGlzdG9yeSktPlxyXG5cdFx0XHRpZiBoaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0XHRcdGlzRXhpc3RTdGVwID0gXy5maW5kKGhpc3Rvcnkuc3RlcHMsIChzdGVwKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxyXG5cdFx0XHRcdClcclxuXHRcdClcclxuXHJcblx0aWYgbm90IGlzRXhpc3RTdGVwXHJcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeiDveiOt+WPlnN0ZXBcIilcclxuXHJcblx0cmV0dXJuIGlzRXhpc3RTdGVwIiwiICAgICAgICAgICAgICAgIFxuXG5zdGVwTWFuYWdlciA9IHt9O1xuXG5zdGVwTWFuYWdlci5hbGxvd0JhdGNoID0gZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gc3RlcC5hbGxvd0JhdGNoO1xufTtcblxuc3RlcE1hbmFnZXIuZ2V0U3RlcCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBmbG93LCBzdGVwX2lkKSB7XG4gIHZhciBmbG93X3JldiwgaXNFeGlzdFN0ZXA7XG4gIGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICBpc0V4aXN0U3RlcCA9IG51bGw7XG4gIGlmIChmbG93LmN1cnJlbnQuX2lkID09PSBmbG93X3Jldikge1xuICAgIGlzRXhpc3RTdGVwID0gXy5maW5kKGZsb3cuY3VycmVudC5zdGVwcywgZnVuY3Rpb24oc3RlcCkge1xuICAgICAgcmV0dXJuIHN0ZXAuX2lkID09PSBzdGVwX2lkO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF8uZWFjaChmbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihoaXN0b3J5KSB7XG4gICAgICBpZiAoaGlzdG9yeS5faWQgPT09IGZsb3dfcmV2KSB7XG4gICAgICAgIHJldHVybiBpc0V4aXN0U3RlcCA9IF8uZmluZChoaXN0b3J5LnN0ZXBzLCBmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXAuX2lkID09PSBzdGVwX2lkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoIWlzRXhpc3RTdGVwKSB7XG4gICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3og73ojrflj5ZzdGVwXCIpO1xuICB9XG4gIHJldHVybiBpc0V4aXN0U3RlcDtcbn07XG4iLCJfZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyID0ge31cclxuXHJcbmxvZ2dlciA9IG5ldyBMb2dnZXIgJ1dvcmtmbG93IC0+IEluc3RhbmNlTWFuYWdlcidcclxuXHJcbkluc3RhbmNlTWFuYWdlci5oYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwID0gKGlucywgZmllbGRfbWFwKSAtPlxyXG5cdHJlcyA9IGluc1xyXG5cdGlmIGluc1xyXG5cdFx0aWYgIWZpZWxkX21hcFxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGlucy5mbG93IH0sIHsgZmllbGRzOiB7IGZpZWxkX21hcDogMSB9IH0pXHJcblxyXG5cdFx0XHRpZiBmbG93Py5maWVsZF9tYXBcclxuXHRcdFx0XHRmaWVsZF9tYXAgPSBmbG93LmZpZWxkX21hcFxyXG5cclxuXHRcdGlmIGZpZWxkX21hcFxyXG5cdFx0XHRjb250ZXh0ID0gXy5jbG9uZShpbnMpXHJcblxyXG5cdFx0XHRjb250ZXh0Ll8gPSBfXHJcblxyXG5cdFx0XHRzY3JpcHQgPSBcInZhciBpbnN0YW5jZXMgPSAje2ZpZWxkX21hcH07IGV4cG9ydHMuaW5zdGFuY2VzID0gaW5zdGFuY2VzXCJcclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0cmVzID0gX2V2YWwoc2NyaXB0LCBcImhhbmRsZXJJbnN0YW5jZUJ5RmllbGRNYXBcIiwgY29udGV4dCwgZmFsc2UpLmluc3RhbmNlc1xyXG5cdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0cmVzID0geyBfZXJyb3I6IGUgfVxyXG5cdFx0XHRcdGxvZ2dlci5lcnJvciBlXHJcblx0cmV0dXJuIHJlc1xyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlID0gKGluc3RhbmNlLCBoYW5kbGVyKS0+XHJcblxyXG5cdGlmICFpbnN0YW5jZSBvciAhaW5zdGFuY2UudHJhY2VzIG9yIGluc3RhbmNlLnRyYWNlcy5sZW5ndGggPCAxXHJcblx0XHRyZXR1cm5cclxuXHJcblx0Y3VycmVudFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eSgnaXNfZmluaXNoZWQnLCBmYWxzZSlcclxuXHJcblx0aWYgY3VycmVudFRyYWNlcy5sZW5ndGhcclxuXHRcdGN1cnJlbnRBcHByb3ZlcyA9IGN1cnJlbnRUcmFjZXNbMF0uYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoJ2lzX2ZpbmlzaGVkJywgZmFsc2UpLmZpbHRlclByb3BlcnR5KCdoYW5kbGVyJywgaGFuZGxlcilcclxuXHRcdGN1cnJlbnRBcHByb3ZlID0gaWYgY3VycmVudEFwcHJvdmVzLmxlbmd0aCA+IDAgdGhlbiBjdXJyZW50QXBwcm92ZXNbMF0gZWxzZSBudWxsXHJcblxyXG5cdCPkvKDpmIXnmoRhcHByb3Zl6L+U5Zue5pyA5paw5LiA5p2hXHJcblx0aWYgIWN1cnJlbnRBcHByb3ZlIG9yIGN1cnJlbnRBcHByb3ZlLnR5cGUgPT0gJ2NjJ1xyXG5cdFx0IyDlvZPliY3mmK/kvKDpmIVcclxuXHRcdF8uZWFjaCBpbnN0YW5jZS50cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGEpIC0+XHJcblx0XHRcdFx0aWYgYS50eXBlID09ICdjYycgYW5kIGEudXNlciA9PSBoYW5kbGVyIGFuZCBhLmlzX2ZpbmlzaGVkID09IGZhbHNlXHJcblx0XHRcdFx0XHRjdXJyZW50QXBwcm92ZSA9IGFcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdGlmICFjdXJyZW50QXBwcm92ZVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdHJldHVybiBjdXJyZW50QXBwcm92ZVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRUcmFjZSA9IChpbnN0YW5jZSwgdHJhY2VJZCktPlxyXG5cdHJldHVybiBpbnN0YW5jZS50cmFjZXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZUlkKVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZSA9IChpbnN0YW5jZUlkLCB1c2VySWQpLT5cclxuXHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9KVxyXG5cclxuXHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblxyXG5cdG15X2FwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoaW5zdGFuY2UsIHVzZXJJZClcclxuXHJcblx0aWYgbXlfYXBwcm92ZVxyXG5cclxuI1x0XHRsYW5nID0gU3RlZWRvcy5sb2NhbGUodGhhdC51c2VySWQsIHRydWUpXHJcblxyXG5cdFx0dHJhY2UgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFRyYWNlKGluc3RhbmNlLCBteV9hcHByb3ZlLnRyYWNlKVxyXG5cclxuXHRcdHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHRyYWNlLnN0ZXApXHJcblxyXG5cdFx0c3RlcF90eXBlID0gc3RlcC5zdGVwX3R5cGVcclxuXHJcblx0XHRqdWRnZSA9IGlmIHN0ZXBfdHlwZSA9PSBcInNpZ25cIiB0aGVuIFwiYXBwcm92ZWRcIiBlbHNlIFwiXCJcclxuXHJcblx0XHRuZXh0U3RlcHMgPSB1dWZsb3dNYW5hZ2VyLmdldE5leHRTdGVwcyhpbnN0YW5jZSwgZmxvdywgc3RlcCwganVkZ2UpXHJcblxyXG5cdFx0aWYgbmV4dFN0ZXBzLmxlbmd0aCA9PSAxXHJcblx0XHRcdGlmIHN0ZXBfdHlwZSA9PSBcInNpZ25cIiB8fCBzdGVwX3R5cGUgPT0gXCJjb3VudGVyU2lnblwiXHJcblx0XHRcdFx0bXlfYXBwcm92ZS5qdWRnZSA9ICdhcHByb3ZlZCdcclxuXHRcdFx0bmV4dF91c2VyX2lkcyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVycyhpbnN0YW5jZS5faWQgLCBuZXh0U3RlcHNbMF0pXHJcblx0XHRcdGlmICFuZXh0X3VzZXJfaWRzXHJcblx0XHRcdFx0bXlfYXBwcm92ZS5uZXh0X3N0ZXBzID0gW3sgc3RlcDogbmV4dFN0ZXBzWzBdLCB1c2VyczogW10gfV1cclxuXHRcdFx0XHRyZXR1cm4gbXlfYXBwcm92ZVxyXG5cdFx0XHRpZiBuZXh0X3VzZXJfaWRzLmxlbmd0aCA9PSAxXHJcblx0XHRcdFx0bXlfYXBwcm92ZS5uZXh0X3N0ZXBzID0gW3tzdGVwOiBuZXh0U3RlcHNbMF0sIHVzZXJzOiBuZXh0X3VzZXJfaWRzfV1cclxuXHRcdFx0XHRyZXR1cm4gbXlfYXBwcm92ZVxyXG4jXHRcdFx0ZWxzZVxyXG4jXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBUQVBpMThuLl9fKCd3b3JrZmxvd19lcnJvcl9tdWx0aXBsZV9uZXh0X3N0ZXBfdXNlcnMnLCB7aW5zbmFtZTogaW5zdGFuY2UubmFtZX0sIGxhbmcpKVxyXG4jXHRcdGVsc2VcclxuI1x0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFRBUGkxOG4uX18oJ3dvcmtmbG93X2Vycm9yX211bHRpcGxlX25leHRfc3RlcCcsIHtpbnNuYW1lOiBpbnN0YW5jZS5uYW1lfSwgbGFuZykpXHJcblxyXG5cdHJldHVyblxyXG5cclxuXHJcbkluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyA9IChzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgaW5ib3hfdXNlciktPlxyXG5cdF9iYXRjaF9pbnN0YW5jZXMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2UsIGluYm94X3VzZXJzOiBpbmJveF91c2VyfVxyXG5cclxuXHRGSUVMRFMgPSB7IG5hbWU6IDEsIGFwcGxpY2FudF9uYW1lOiAxLCBzdWJtaXRfZGF0ZTogMSwgZmxvd192ZXJzaW9uOiAxLCBcInRyYWNlcy5zdGVwXCI6IDEsIGZsb3c6IDEsIGN1cnJlbnRfc3RlcF9uYW1lOiAxLCBmbG93X25hbWU6IDEgfVxyXG5cclxuXHRpZiBjYXRlZ29yeUlkXHJcblxyXG5cdFx0aWYgY2F0ZWdvcnlJZCA9PSAnLTEnXHJcblx0XHRcdHVuQ2F0ZWdvcnlGbG93cyA9IGZsb3dNYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCB7X2lkOiAxfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKVxyXG5cdFx0XHRxdWVyeS5mbG93ID0geyRpbjogdW5DYXRlZ29yeUZsb3dzfVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjYXRlZ29yeUZsb3dzID0gZmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCBjYXRlZ29yeUlkLCB7X2lkOiAxfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKVxyXG5cdFx0XHRxdWVyeS5mbG93ID0geyRpbjogY2F0ZWdvcnlGbG93c31cclxuXHJcblx0aWYgZmxvd0lkc1xyXG5cdFx0cXVlcnkuZmxvdyA9IHskaW46IGZsb3dJZHN9XHJcblxyXG4jXHRjb25zb2xlLmxvZyhcInF1ZXJ5XCIsIEpTT04uc3RyaW5naWZ5KHF1ZXJ5KSlcclxuXHJcblx0aW5ib3hfaW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtmaWVsZHM6IEZJRUxEUywgc2tpcDogMCwgbGltaXQ6IDEwMH0pXHJcblxyXG5cdGluYm94X2luc3RhbmNlcy5mb3JFYWNoIChpbnMpLT5cclxuXHRcdGN1cnJlbnRTdGVwSWQgPSBfLmxhc3QoaW5zLnRyYWNlcykuc3RlcCAjVE9ETyDmraTku6PnoIHkuI3pgILnlKjkvKDpmIXmibnlpITnkIZcclxuXHJcblx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBpbnMuZmxvd30pXHJcblxyXG5cdFx0Y3VycmVudFN0ZXAgPSBzdGVwTWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgY3VycmVudFN0ZXBJZClcclxuXHJcblx0XHRteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0TXlBcHByb3ZlKGlucy5faWQsIGluYm94X3VzZXIpXHJcblxyXG5cdFx0aWYgc3RlcE1hbmFnZXIuYWxsb3dCYXRjaChjdXJyZW50U3RlcCkgJiYgbXlBcHByb3ZlXHJcblxyXG5cdFx0XHRkZWxldGUgaW5zLmZsb3dfdmVyc2lvblxyXG5cclxuXHRcdFx0ZGVsZXRlIGlucy50cmFjZXNcclxuXHJcblx0XHRcdGRlbGV0ZSBpbnMuZmxvd1xyXG5cclxuXHRcdFx0aW5zLmFwcHJvdmVfc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlXHJcblxyXG5cdFx0XHRfYmF0Y2hfaW5zdGFuY2VzLnB1c2goaW5zKVxyXG4jXHRcdGVsc2VcclxuI1x0XHRcdGNvbnNvbGUubG9nKFwi5om56YeP5a6h5om5LeW8guW4uOaVsOaNrlwiLCBpbnMuX2lkKVxyXG5cclxuXHRyZXR1cm4gX2JhdGNoX2luc3RhbmNlc1xyXG4iLCJ2YXIgX2V2YWwsIGxvZ2dlcjsgICAgICAgICAgICAgICAgIFxuXG5fZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKTtcblxuSW5zdGFuY2VNYW5hZ2VyID0ge307XG5cbmxvZ2dlciA9IG5ldyBMb2dnZXIoJ1dvcmtmbG93IC0+IEluc3RhbmNlTWFuYWdlcicpO1xuXG5JbnN0YW5jZU1hbmFnZXIuaGFuZGxlckluc3RhbmNlQnlGaWVsZE1hcCA9IGZ1bmN0aW9uKGlucywgZmllbGRfbWFwKSB7XG4gIHZhciBjb250ZXh0LCBlLCBmbG93LCByZXMsIHNjcmlwdDtcbiAgcmVzID0gaW5zO1xuICBpZiAoaW5zKSB7XG4gICAgaWYgKCFmaWVsZF9tYXApIHtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpbnMuZmxvd1xuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBmaWVsZF9tYXA6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZmxvdyAhPSBudWxsID8gZmxvdy5maWVsZF9tYXAgOiB2b2lkIDApIHtcbiAgICAgICAgZmllbGRfbWFwID0gZmxvdy5maWVsZF9tYXA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmaWVsZF9tYXApIHtcbiAgICAgIGNvbnRleHQgPSBfLmNsb25lKGlucyk7XG4gICAgICBjb250ZXh0Ll8gPSBfO1xuICAgICAgc2NyaXB0ID0gXCJ2YXIgaW5zdGFuY2VzID0gXCIgKyBmaWVsZF9tYXAgKyBcIjsgZXhwb3J0cy5pbnN0YW5jZXMgPSBpbnN0YW5jZXNcIjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcyA9IF9ldmFsKHNjcmlwdCwgXCJoYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwXCIsIGNvbnRleHQsIGZhbHNlKS5pbnN0YW5jZXM7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgIHJlcyA9IHtcbiAgICAgICAgICBfZXJyb3I6IGVcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlID0gZnVuY3Rpb24oaW5zdGFuY2UsIGhhbmRsZXIpIHtcbiAgdmFyIGN1cnJlbnRBcHByb3ZlLCBjdXJyZW50QXBwcm92ZXMsIGN1cnJlbnRUcmFjZXM7XG4gIGlmICghaW5zdGFuY2UgfHwgIWluc3RhbmNlLnRyYWNlcyB8fCBpbnN0YW5jZS50cmFjZXMubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdXJyZW50VHJhY2VzID0gaW5zdGFuY2UudHJhY2VzLmZpbHRlclByb3BlcnR5KCdpc19maW5pc2hlZCcsIGZhbHNlKTtcbiAgaWYgKGN1cnJlbnRUcmFjZXMubGVuZ3RoKSB7XG4gICAgY3VycmVudEFwcHJvdmVzID0gY3VycmVudFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eSgnaXNfZmluaXNoZWQnLCBmYWxzZSkuZmlsdGVyUHJvcGVydHkoJ2hhbmRsZXInLCBoYW5kbGVyKTtcbiAgICBjdXJyZW50QXBwcm92ZSA9IGN1cnJlbnRBcHByb3Zlcy5sZW5ndGggPiAwID8gY3VycmVudEFwcHJvdmVzWzBdIDogbnVsbDtcbiAgfVxuICBpZiAoIWN1cnJlbnRBcHByb3ZlIHx8IGN1cnJlbnRBcHByb3ZlLnR5cGUgPT09ICdjYycpIHtcbiAgICBfLmVhY2goaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICBpZiAoYS50eXBlID09PSAnY2MnICYmIGEudXNlciA9PT0gaGFuZGxlciAmJiBhLmlzX2ZpbmlzaGVkID09PSBmYWxzZSkge1xuICAgICAgICAgIGN1cnJlbnRBcHByb3ZlID0gYTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFjdXJyZW50QXBwcm92ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gY3VycmVudEFwcHJvdmU7XG59O1xuXG5JbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFRyYWNlID0gZnVuY3Rpb24oaW5zdGFuY2UsIHRyYWNlSWQpIHtcbiAgcmV0dXJuIGluc3RhbmNlLnRyYWNlcy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHRyYWNlSWQpO1xufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZSA9IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHVzZXJJZCkge1xuICB2YXIgZmxvdywgaW5zdGFuY2UsIGp1ZGdlLCBteV9hcHByb3ZlLCBuZXh0U3RlcHMsIG5leHRfdXNlcl9pZHMsIHN0ZXAsIHN0ZXBfdHlwZSwgdHJhY2U7XG4gIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgIF9pZDogaW5zdGFuY2VJZFxuICB9KTtcbiAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KTtcbiAgbXlfYXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZShpbnN0YW5jZSwgdXNlcklkKTtcbiAgaWYgKG15X2FwcHJvdmUpIHtcbiAgICB0cmFjZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50VHJhY2UoaW5zdGFuY2UsIG15X2FwcHJvdmUudHJhY2UpO1xuICAgIHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHRyYWNlLnN0ZXApO1xuICAgIHN0ZXBfdHlwZSA9IHN0ZXAuc3RlcF90eXBlO1xuICAgIGp1ZGdlID0gc3RlcF90eXBlID09PSBcInNpZ25cIiA/IFwiYXBwcm92ZWRcIiA6IFwiXCI7XG4gICAgbmV4dFN0ZXBzID0gdXVmbG93TWFuYWdlci5nZXROZXh0U3RlcHMoaW5zdGFuY2UsIGZsb3csIHN0ZXAsIGp1ZGdlKTtcbiAgICBpZiAobmV4dFN0ZXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKHN0ZXBfdHlwZSA9PT0gXCJzaWduXCIgfHwgc3RlcF90eXBlID09PSBcImNvdW50ZXJTaWduXCIpIHtcbiAgICAgICAgbXlfYXBwcm92ZS5qdWRnZSA9ICdhcHByb3ZlZCc7XG4gICAgICB9XG4gICAgICBuZXh0X3VzZXJfaWRzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzKGluc3RhbmNlLl9pZCwgbmV4dFN0ZXBzWzBdKTtcbiAgICAgIGlmICghbmV4dF91c2VyX2lkcykge1xuICAgICAgICBteV9hcHByb3ZlLm5leHRfc3RlcHMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RlcDogbmV4dFN0ZXBzWzBdLFxuICAgICAgICAgICAgdXNlcnM6IFtdXG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gbXlfYXBwcm92ZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXh0X3VzZXJfaWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBteV9hcHByb3ZlLm5leHRfc3RlcHMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RlcDogbmV4dFN0ZXBzWzBdLFxuICAgICAgICAgICAgdXNlcnM6IG5leHRfdXNlcl9pZHNcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBteV9hcHByb3ZlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzID0gZnVuY3Rpb24oc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMsIGluYm94X3VzZXIpIHtcbiAgdmFyIEZJRUxEUywgX2JhdGNoX2luc3RhbmNlcywgY2F0ZWdvcnlGbG93cywgaW5ib3hfaW5zdGFuY2VzLCBxdWVyeSwgdW5DYXRlZ29yeUZsb3dzO1xuICBfYmF0Y2hfaW5zdGFuY2VzID0gbmV3IEFycmF5KCk7XG4gIHF1ZXJ5ID0ge1xuICAgIHNwYWNlOiBzcGFjZSxcbiAgICBpbmJveF91c2VyczogaW5ib3hfdXNlclxuICB9O1xuICBGSUVMRFMgPSB7XG4gICAgbmFtZTogMSxcbiAgICBhcHBsaWNhbnRfbmFtZTogMSxcbiAgICBzdWJtaXRfZGF0ZTogMSxcbiAgICBmbG93X3ZlcnNpb246IDEsXG4gICAgXCJ0cmFjZXMuc3RlcFwiOiAxLFxuICAgIGZsb3c6IDEsXG4gICAgY3VycmVudF9zdGVwX25hbWU6IDEsXG4gICAgZmxvd19uYW1lOiAxXG4gIH07XG4gIGlmIChjYXRlZ29yeUlkKSB7XG4gICAgaWYgKGNhdGVnb3J5SWQgPT09ICctMScpIHtcbiAgICAgIHVuQ2F0ZWdvcnlGbG93cyA9IGZsb3dNYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCB7XG4gICAgICAgIF9pZDogMVxuICAgICAgfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKTtcbiAgICAgIHF1ZXJ5LmZsb3cgPSB7XG4gICAgICAgICRpbjogdW5DYXRlZ29yeUZsb3dzXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjYXRlZ29yeUZsb3dzID0gZmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCBjYXRlZ29yeUlkLCB7XG4gICAgICAgIF9pZDogMVxuICAgICAgfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKTtcbiAgICAgIHF1ZXJ5LmZsb3cgPSB7XG4gICAgICAgICRpbjogY2F0ZWdvcnlGbG93c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKGZsb3dJZHMpIHtcbiAgICBxdWVyeS5mbG93ID0ge1xuICAgICAgJGluOiBmbG93SWRzXG4gICAgfTtcbiAgfVxuICBpbmJveF9pbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgIGZpZWxkczogRklFTERTLFxuICAgIHNraXA6IDAsXG4gICAgbGltaXQ6IDEwMFxuICB9KTtcbiAgaW5ib3hfaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24oaW5zKSB7XG4gICAgdmFyIGN1cnJlbnRTdGVwLCBjdXJyZW50U3RlcElkLCBmbG93LCBteUFwcHJvdmU7XG4gICAgY3VycmVudFN0ZXBJZCA9IF8ubGFzdChpbnMudHJhY2VzKS5zdGVwO1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zLmZsb3dcbiAgICB9KTtcbiAgICBjdXJyZW50U3RlcCA9IHN0ZXBNYW5hZ2VyLmdldFN0ZXAoaW5zLCBmbG93LCBjdXJyZW50U3RlcElkKTtcbiAgICBteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0TXlBcHByb3ZlKGlucy5faWQsIGluYm94X3VzZXIpO1xuICAgIGlmIChzdGVwTWFuYWdlci5hbGxvd0JhdGNoKGN1cnJlbnRTdGVwKSAmJiBteUFwcHJvdmUpIHtcbiAgICAgIGRlbGV0ZSBpbnMuZmxvd192ZXJzaW9uO1xuICAgICAgZGVsZXRlIGlucy50cmFjZXM7XG4gICAgICBkZWxldGUgaW5zLmZsb3c7XG4gICAgICBpbnMuYXBwcm92ZV9zdGFydF9kYXRlID0gbXlBcHByb3ZlLnN0YXJ0X2RhdGU7XG4gICAgICByZXR1cm4gX2JhdGNoX2luc3RhbmNlcy5wdXNoKGlucyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIF9iYXRjaF9pbnN0YW5jZXM7XG59O1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2NhdGVnb3JpZXMnLCAoc3BhY2VJZCkgLT5cclxuXHRjaGVjayBzcGFjZUlkLCBTdHJpbmdcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBzcGFjZUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cclxuXHRyZXR1cm4gZGIuY2F0ZWdvcmllcy5maW5kKHsgc3BhY2U6IHNwYWNlSWQgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSwgc3BhY2U6IDEsIHNvcnRfbm86IDEsIGFwcDogMSB9IH0pIiwiTWV0ZW9yLnB1Ymxpc2goJ2NhdGVnb3JpZXMnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGRiLmNhdGVnb3JpZXMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogMSxcbiAgICAgIHNwYWNlOiAxLFxuICAgICAgc29ydF9ubzogMSxcbiAgICAgIGFwcDogMVxuICAgIH1cbiAgfSk7XG59KTtcbiIsIlxyXG5NZXRlb3IucHVibGlzaCAnY2ZzX2luc3RhbmNlcycsIChpbnN0YW5jZUlkcyktPlxyXG5cdGNoZWNrKGluc3RhbmNlSWRzLCBBcnJheSlcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBpbnN0YW5jZUlkc1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHJldHVybiBjZnMuaW5zdGFuY2VzLmZpbmQoeydtZXRhZGF0YS5pbnN0YW5jZSc6IHskaW46IGluc3RhbmNlSWRzfSAsICRvcjogW3snbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHskbmU6IHRydWV9fSx7J21ldGFkYXRhLmlzX3ByaXZhdGUnOiB0cnVlLCBcIm1ldGFkYXRhLm93bmVyXCI6IHRoaXMudXNlcklkfV19KVxyXG4iLCJNZXRlb3IucHVibGlzaCgnY2ZzX2luc3RhbmNlcycsIGZ1bmN0aW9uKGluc3RhbmNlSWRzKSB7XG4gIGNoZWNrKGluc3RhbmNlSWRzLCBBcnJheSk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghaW5zdGFuY2VJZHMpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcbiAgICAgICRpbjogaW5zdGFuY2VJZHNcbiAgICB9LFxuICAgICRvcjogW1xuICAgICAge1xuICAgICAgICAnbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHtcbiAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICAnbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHRydWUsXG4gICAgICAgIFwibWV0YWRhdGEub3duZXJcIjogdGhpcy51c2VySWRcbiAgICAgIH1cbiAgICBdXG4gIH0pO1xufSk7XG4iLCJcclxuXHJcbk1ldGVvci5wdWJsaXNoICdmbG93X3Bvc2l0aW9ucycsIChzcGFjZUlkKS0+XHJcblx0XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblx0XHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0cmV0dXJuIGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe3NwYWNlOiBzcGFjZUlkfSwge2ZpZWxkczoge3JvbGU6MSwgdXNlcnM6IDEsIG9yZzogMX19KTtcclxuIiwiTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfcG9zaXRpb25zJywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICByb2xlOiAxLFxuICAgICAgdXNlcnM6IDEsXG4gICAgICBvcmc6IDFcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaENvbXBvc2l0ZSAnZmxvd19wb3NpdGlvbnNfdGFidWxhcicsICh0YWJsZU5hbWUsIGlkcywgZmllbGRzKS0+XHJcblx0Y2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xyXG5cdGNoZWNrKGlkcywgQXJyYXkpO1xyXG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR0aGlzLnVuYmxvY2soKVxyXG5cclxuXHRmaW5kOiAtPlxyXG5cdFx0dGhpcy51bmJsb2NrKClcclxuXHRcdGRiLmZsb3dfcG9zaXRpb25zLmZpbmQge19pZDogeyRpbjogaWRzfX0sIGZpZWxkczogZmllbGRzXHJcblxyXG5cdGNoaWxkcmVuOiBbXHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChwb3NpdGlvbikgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIGZsb3dfcm9sZXNcclxuXHRcdFx0XHRkYi5mbG93X3JvbGVzLmZpbmQgeyBfaWQ6IHBvc2l0aW9uLnJvbGUgfSwgZmllbGRzOiBuYW1lOiAxXHJcblx0XHR9XHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChwb3NpdGlvbikgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIG9yZ2FuaXphdGlvbnNcclxuXHRcdFx0XHRkYi5vcmdhbml6YXRpb25zLmZpbmQgeyBfaWQ6IHBvc2l0aW9uLm9yZyB9LCBmaWVsZHM6IGZ1bGxuYW1lOiAxXHJcblx0XHR9XHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChwb3NpdGlvbikgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIHVzZXJcclxuXHRcdFx0XHRkYi5zcGFjZV91c2Vycy5maW5kIHtcclxuXHRcdFx0XHRcdHNwYWNlOiBwb3NpdGlvbi5zcGFjZVxyXG5cdFx0XHRcdFx0dXNlcjogJGluOiBwb3NpdGlvbi51c2Vyc1xyXG5cdFx0XHRcdH0sIGZpZWxkczpcclxuXHRcdFx0XHRcdHNwYWNlOiAxXHJcblx0XHRcdFx0XHR1c2VyOiAxXHJcblx0XHRcdFx0XHRuYW1lOiAxXHJcblx0XHR9XHJcblx0XSIsIk1ldGVvci5wdWJsaXNoQ29tcG9zaXRlKCdmbG93X3Bvc2l0aW9uc190YWJ1bGFyJywgZnVuY3Rpb24odGFibGVOYW1lLCBpZHMsIGZpZWxkcykge1xuICBjaGVjayh0YWJsZU5hbWUsIFN0cmluZyk7XG4gIGNoZWNrKGlkcywgQXJyYXkpO1xuICBjaGVjayhmaWVsZHMsIE1hdGNoLk9wdGlvbmFsKE9iamVjdCkpO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICB0aGlzLnVuYmxvY2soKTtcbiAgcmV0dXJuIHtcbiAgICBmaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgcmV0dXJuIGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IGlkc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczogZmllbGRzXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgICBfaWQ6IHBvc2l0aW9uLnJvbGVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgICAgICBfaWQ6IHBvc2l0aW9uLm9yZ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IHBvc2l0aW9uLnNwYWNlLFxuICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAkaW46IHBvc2l0aW9uLnVzZXJzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgICAgICB1c2VyOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59KTtcbiIsIlxyXG5cclxuXHRNZXRlb3IucHVibGlzaCAnZmxvd19yb2xlcycsIChzcGFjZUlkKS0+XHJcblx0XHRcclxuXHRcdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblx0XHRcclxuXHRcdHVubGVzcyBzcGFjZUlkXHJcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblxyXG5cdFx0cmV0dXJuIGRiLmZsb3dfcm9sZXMuZmluZCh7c3BhY2U6IHNwYWNlSWR9LCB7ZmllbGRzOiB7bmFtZToxfX0pO1xyXG4iLCJNZXRlb3IucHVibGlzaCgnZmxvd19yb2xlcycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dzJywgKHNwYWNlSWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0IyDnrKzkuIDmrKHorqLpmIXml7bliJ3lp4vljJblt6XkvZzljLpcclxuXHRpZiBkYi5mbG93cy5maW5kKHtzcGFjZTogc3BhY2VJZH0pLmNvdW50KCkgPT0gMFxyXG5cdFx0ZGIuc3BhY2VzLmNyZWF0ZVRlbXBsYXRlRm9ybUFuZEZsb3coc3BhY2VJZClcclxuXHJcblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe3NwYWNlOiBzcGFjZUlkfSwge1xyXG5cdFx0ZmllbGRzOiB7XHJcblx0XHRcdG5hbWU6IDEsXHJcblx0XHRcdGZvcm06IDEsXHJcblx0XHRcdHN0YXRlOiAxLFxyXG5cdFx0XHRwZXJtczogMSxcclxuXHRcdFx0c3BhY2U6IDEsXHJcblx0XHRcdGNvbXBhbnlfaWQ6IDEsXHJcblx0XHRcdHNvcnRfbm86IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfb3B0aW9uYWxfdXNlcnM6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfdG9fc2VsZjogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dfdmVyc2lvbicsIChzcGFjZUlkLCBmbG93SWQsIHZlcnNpb25JZCkgLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3MgdmVyc2lvbklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cclxuXHRzZWxmID0gdGhpcztcclxuXHJcblx0Z2V0Rmxvd1ZlcnNpb24gPSAoaWQgLCB2ZXJzaW9uSWQpLT5cclxuXHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQgOiBpZH0pO1xyXG5cdFx0aWYgZmxvd1xyXG5cdFx0XHRmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnRcclxuXHRcdFx0Zmxvd192ZXJzaW9uLmxhdGVzdCA9IHRydWVcclxuXHJcblx0XHRcdGlmIGZsb3dfdmVyc2lvbi5faWQgIT0gdmVyc2lvbklkXHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZClcclxuXHRcdFx0XHRmbG93X3ZlcnNpb24ubGF0ZXN0ID0gZmFsc2VcclxuXHJcblx0XHRcdHJldHVybiBmbG93X3ZlcnNpb25cclxuXHRoYW5kbGUgPSBkYi5mbG93cy5maW5kKHtfaWQ6IGZsb3dJZH0sIHtmaWVsZHM6IHtfaWQ6IDEsIFwiY3VycmVudC5tb2RpZmllZFwiOiAxfX0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oaWQsIHZlcnNpb25JZCkpO1xyXG5cdH1cclxuXHJcblxyXG5cdHNlbGYuYWRkZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oZmxvd0lkLCB2ZXJzaW9uSWQpKTtcclxuXHRzZWxmLnJlYWR5KCk7XHJcblx0c2VsZi5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKVxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ2Rpc3RyaWJ1dGVfb3B0aW9uYWxfZmxvd3MnLCAoZmxvd19pZHMpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dfaWRzXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHJldHVybiBkYi5mbG93cy5maW5kKHtfaWQ6IHskaW46IGZsb3dfaWRzfX0sIHtcclxuXHRcdGZpZWxkczoge1xyXG5cdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRmb3JtOiAxLFxyXG5cdFx0XHRzdGF0ZTogMSxcclxuXHRcdFx0cGVybXM6IDEsXHJcblx0XHRcdHNwYWNlOiAxLFxyXG5cdFx0XHRkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxyXG5cdFx0XHRkaXN0cmlidXRlX3RvX3NlbGY6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcclxuXHRcdFx0Y29tcGFueV9pZDogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5NZXRlb3IucHVibGlzaCAnZmxvdycsIChzcGFjZUlkLCBmbG93SWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHJcblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe19pZDogZmxvd0lkLCBzcGFjZTogc3BhY2VJZH0sIHtcclxuXHRcdGZpZWxkczoge1xyXG5cdFx0XHRwcmludF90ZW1wbGF0ZTogMSxcclxuXHRcdFx0aW5zdGFuY2VfdGVtcGxhdGU6IDEsXHJcblx0XHRcdGV2ZW50czogMSxcclxuXHRcdFx0ZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcclxuXHRcdFx0ZGlzdHJpYnV0ZV90b19zZWxmOiAxLFxyXG5cdFx0XHR1cGxvYWRfYWZ0ZXJfYmVpbmdfZGlzdHJpYnV0ZWQ6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcclxuXHRcdFx0Y29tcGFueV9pZDogMSxcclxuXHRcdFx0YWxsb3dfc2VsZWN0X3N0ZXA6IDFcclxuXHRcdH1cclxuXHR9KVxyXG5NZXRlb3IucHVibGlzaCAnZmxvd19maWxlcycsIChzcGFjZUlkLCBmbG93SWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRyZXR1cm4gY2ZzLmZpbGVzLmZpbmQoeyAnbWV0YWRhdGEuc3BhY2UnOiBzcGFjZUlkLCAnbWV0YWRhdGEub2JqZWN0X25hbWUnOiAnZmxvd3MnLCAnbWV0YWRhdGEucmVjb3JkX2lkJzogZmxvd0lkIH0pXHJcblxyXG5NZXRlb3IucHVibGlzaENvbXBvc2l0ZSAnZmxvd3NfdGFidWxhcicsICh0YWJsZU5hbWUsIGlkcywgZmllbGRzKS0+XHJcblx0Y2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xyXG5cdGNoZWNrKGlkcywgQXJyYXkpO1xyXG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR0aGlzLnVuYmxvY2soKVxyXG5cclxuXHRmaW5kOiAtPlxyXG5cdFx0dGhpcy51bmJsb2NrKClcclxuXHRcdGRiLmZsb3dzLmZpbmQge19pZDogeyRpbjogaWRzfX0sIGZpZWxkczogZmllbGRzXHJcblxyXG5cdGNoaWxkcmVuOiBbXHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChmbG93KSAtPlxyXG5cdFx0XHRcdEB1bmJsb2NrKClcclxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgdXNlclxyXG5cdFx0XHRcdGRiLnNwYWNlX3VzZXJzLmZpbmQge1xyXG5cdFx0XHRcdFx0c3BhY2U6IGZsb3cuc3BhY2UsXHJcblx0XHRcdFx0XHR1c2VyOiBmbG93LmN1cnJlbnQubW9kaWZpZWRfYnlcclxuXHRcdFx0XHR9LCBmaWVsZHM6XHJcblx0XHRcdFx0XHRzcGFjZTogMVxyXG5cdFx0XHRcdFx0dXNlcjogMVxyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0ZmluZDogKGZsb3cpIC0+XHJcblx0XHRcdFx0QHVuYmxvY2soKVxyXG5cdFx0XHRcdCMgUHVibGlzaCB0aGUgcmVsYXRlZCB1c2VyXHJcblx0XHRcdFx0ZGIuZm9ybXMuZmluZCB7XHJcblx0XHRcdFx0XHRzcGFjZTogZmxvdy5zcGFjZSxcclxuXHRcdFx0XHRcdF9pZDogZmxvdy5mb3JtXHJcblx0XHRcdFx0fSwgZmllbGRzOlxyXG5cdFx0XHRcdFx0c3BhY2U6IDFcclxuXHRcdFx0XHRcdF9pZDogMVxyXG5cdFx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRcdGNhdGVnb3J5OiAxXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRmaW5kOiAoZmxvdykgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIHVzZXJcclxuXHRcdFx0XHRkYi5jYXRlZ29yaWVzLmZpbmQge1xyXG5cdFx0XHRcdFx0c3BhY2U6IGZsb3cuc3BhY2VcclxuXHRcdFx0XHR9LCBmaWVsZHM6XHJcblx0XHRcdFx0XHRzcGFjZTogMVxyXG5cdFx0XHRcdFx0X2lkOiAxXHJcblx0XHRcdFx0XHRuYW1lOiAxXHJcblx0XHR9XHJcblx0XSIsIk1ldGVvci5wdWJsaXNoKCdmbG93cycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoZGIuZmxvd3MuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgIGRiLnNwYWNlcy5jcmVhdGVUZW1wbGF0ZUZvcm1BbmRGbG93KHNwYWNlSWQpO1xuICB9XG4gIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgZm9ybTogMSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgcGVybXM6IDEsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIGNvbXBhbnlfaWQ6IDEsXG4gICAgICBzb3J0X25vOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcbiAgICAgIGRpc3RyaWJ1dGVfdG9fc2VsZjogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfdmVyc2lvbicsIGZ1bmN0aW9uKHNwYWNlSWQsIGZsb3dJZCwgdmVyc2lvbklkKSB7XG4gIHZhciBnZXRGbG93VmVyc2lvbiwgaGFuZGxlLCBzZWxmO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghZmxvd0lkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXZlcnNpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGdldEZsb3dWZXJzaW9uID0gZnVuY3Rpb24oaWQsIHZlcnNpb25JZCkge1xuICAgIHZhciBmbG93LCBmbG93X3ZlcnNpb247XG4gICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpZFxuICAgIH0pO1xuICAgIGlmIChmbG93KSB7XG4gICAgICBmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnQ7XG4gICAgICBmbG93X3ZlcnNpb24ubGF0ZXN0ID0gdHJ1ZTtcbiAgICAgIGlmIChmbG93X3ZlcnNpb24uX2lkICE9PSB2ZXJzaW9uSWQpIHtcbiAgICAgICAgZmxvd192ZXJzaW9uID0gZmxvdy5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZCk7XG4gICAgICAgIGZsb3dfdmVyc2lvbi5sYXRlc3QgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmbG93X3ZlcnNpb247XG4gICAgfVxuICB9O1xuICBoYW5kbGUgPSBkYi5mbG93cy5maW5kKHtcbiAgICBfaWQ6IGZsb3dJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDEsXG4gICAgICBcImN1cnJlbnQubW9kaWZpZWRcIjogMVxuICAgIH1cbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiZmxvd192ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZsb3dWZXJzaW9uKGlkLCB2ZXJzaW9uSWQpKTtcbiAgICB9XG4gIH0pO1xuICBzZWxmLmFkZGVkKFwiZmxvd192ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZsb3dWZXJzaW9uKGZsb3dJZCwgdmVyc2lvbklkKSk7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaCgnZGlzdHJpYnV0ZV9vcHRpb25hbF9mbG93cycsIGZ1bmN0aW9uKGZsb3dfaWRzKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghZmxvd19pZHMpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICBfaWQ6IHtcbiAgICAgICRpbjogZmxvd19pZHNcbiAgICB9XG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDEsXG4gICAgICBmb3JtOiAxLFxuICAgICAgc3RhdGU6IDEsXG4gICAgICBwZXJtczogMSxcbiAgICAgIHNwYWNlOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcbiAgICAgIGRpc3RyaWJ1dGVfdG9fc2VsZjogMSxcbiAgICAgIGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcbiAgICAgIGNvbXBhbnlfaWQ6IDFcbiAgICB9XG4gIH0pO1xufSk7XG5cbk1ldGVvci5wdWJsaXNoKCdmbG93JywgZnVuY3Rpb24oc3BhY2VJZCwgZmxvd0lkKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFmbG93SWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICBfaWQ6IGZsb3dJZCxcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwcmludF90ZW1wbGF0ZTogMSxcbiAgICAgIGluc3RhbmNlX3RlbXBsYXRlOiAxLFxuICAgICAgZXZlbnRzOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcbiAgICAgIGRpc3RyaWJ1dGVfdG9fc2VsZjogMSxcbiAgICAgIHVwbG9hZF9hZnRlcl9iZWluZ19kaXN0cmlidXRlZDogMSxcbiAgICAgIGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcbiAgICAgIGNvbXBhbnlfaWQ6IDEsXG4gICAgICBhbGxvd19zZWxlY3Rfc3RlcDogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfZmlsZXMnLCBmdW5jdGlvbihzcGFjZUlkLCBmbG93SWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWZsb3dJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGNmcy5maWxlcy5maW5kKHtcbiAgICAnbWV0YWRhdGEuc3BhY2UnOiBzcGFjZUlkLFxuICAgICdtZXRhZGF0YS5vYmplY3RfbmFtZSc6ICdmbG93cycsXG4gICAgJ21ldGFkYXRhLnJlY29yZF9pZCc6IGZsb3dJZFxuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaENvbXBvc2l0ZSgnZmxvd3NfdGFidWxhcicsIGZ1bmN0aW9uKHRhYmxlTmFtZSwgaWRzLCBmaWVsZHMpIHtcbiAgY2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xuICBjaGVjayhpZHMsIEFycmF5KTtcbiAgY2hlY2soZmllbGRzLCBNYXRjaC5PcHRpb25hbChPYmplY3QpKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgdGhpcy51bmJsb2NrKCk7XG4gIHJldHVybiB7XG4gICAgZmluZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBpZHNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IGZpZWxkc1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBmaW5kOiBmdW5jdGlvbihmbG93KSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IGZsb3cuc3BhY2UsXG4gICAgICAgICAgICB1c2VyOiBmbG93LmN1cnJlbnQubW9kaWZpZWRfYnlcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgICAgIHVzZXI6IDEsXG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaW5kOiBmdW5jdGlvbihmbG93KSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLmZvcm1zLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IGZsb3cuc3BhY2UsXG4gICAgICAgICAgICBfaWQ6IGZsb3cuZm9ybVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICAgICAgX2lkOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKGZsb3cpIHtcbiAgICAgICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgICAgICByZXR1cm4gZGIuY2F0ZWdvcmllcy5maW5kKHtcbiAgICAgICAgICAgIHNwYWNlOiBmbG93LnNwYWNlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgICAgICBfaWQ6IDEsXG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2Zvcm1zJywgKHNwYWNlSWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblxyXG5cdHJldHVybiBkYi5mb3Jtcy5maW5kKHtzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtuYW1lOiAxLCBjYXRlZ29yeTogMSwgc3RhdGU6IDEsIGRlc2NyaXB0aW9uOiAxLCBpbnN0YW5jZV9zdHlsZTogMX19KVxyXG5cclxuXHJcbk1ldGVvci5wdWJsaXNoICdmb3JtX3ZlcnNpb24nLCAoc3BhY2VJZCwgZm9ybUlkLCB2ZXJzaW9uSWQpIC0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBzcGFjZUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBmb3JtSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHZlcnNpb25JZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHJcblx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdGdldEZvcm1WZXJzaW9uID0gKGlkICwgdmVyc2lvbklkKS0+XHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7X2lkIDogaWR9KTtcclxuXHRcdGlmICFmb3JtXHJcblx0XHRcdHJldHVybiB7fVxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gZm9ybS5jdXJyZW50XHJcblx0XHRmb3JtX3ZlcnNpb24ubGF0ZXN0ID0gdHJ1ZVxyXG5cdFx0aWYgZm9ybV92ZXJzaW9uLl9pZCAhPSB2ZXJzaW9uSWRcclxuXHRcdFx0Zm9ybV92ZXJzaW9uID0gZm9ybS5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZClcclxuXHRcdFx0Zm9ybV92ZXJzaW9uLmxhdGVzdCA9IGZhbHNlXHJcblx0XHRyZXR1cm4gZm9ybV92ZXJzaW9uXHJcblxyXG5cdGhhbmRsZSA9IGRiLmZvcm1zLmZpbmQoe19pZDogZm9ybUlkfSwge2ZpZWxkczoge19pZDogMSwgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IDF9fSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0Y2hhbmdlZDogKGlkKS0+XHJcblx0XHRcdHNlbGYuY2hhbmdlZChcImZvcm1fdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGb3JtVmVyc2lvbihpZCwgdmVyc2lvbklkKSk7XHJcblx0fVxyXG5cclxuXHRzZWxmLmFkZGVkKFwiZm9ybV92ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZvcm1WZXJzaW9uKGZvcm1JZCwgdmVyc2lvbklkKSk7XHJcblx0c2VsZi5yZWFkeSgpO1xyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKCkiLCJNZXRlb3IucHVibGlzaCgnZm9ybXMnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGRiLmZvcm1zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDEsXG4gICAgICBjYXRlZ29yeTogMSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgZGVzY3JpcHRpb246IDEsXG4gICAgICBpbnN0YW5jZV9zdHlsZTogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Zvcm1fdmVyc2lvbicsIGZ1bmN0aW9uKHNwYWNlSWQsIGZvcm1JZCwgdmVyc2lvbklkKSB7XG4gIHZhciBnZXRGb3JtVmVyc2lvbiwgaGFuZGxlLCBzZWxmO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghZm9ybUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXZlcnNpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGdldEZvcm1WZXJzaW9uID0gZnVuY3Rpb24oaWQsIHZlcnNpb25JZCkge1xuICAgIHZhciBmb3JtLCBmb3JtX3ZlcnNpb247XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpZFxuICAgIH0pO1xuICAgIGlmICghZm9ybSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnQ7XG4gICAgZm9ybV92ZXJzaW9uLmxhdGVzdCA9IHRydWU7XG4gICAgaWYgKGZvcm1fdmVyc2lvbi5faWQgIT09IHZlcnNpb25JZCkge1xuICAgICAgZm9ybV92ZXJzaW9uID0gZm9ybS5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZCk7XG4gICAgICBmb3JtX3ZlcnNpb24ubGF0ZXN0ID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmb3JtX3ZlcnNpb247XG4gIH07XG4gIGhhbmRsZSA9IGRiLmZvcm1zLmZpbmQoe1xuICAgIF9pZDogZm9ybUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMSxcbiAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiAxXG4gICAgfVxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBzZWxmLmNoYW5nZWQoXCJmb3JtX3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rm9ybVZlcnNpb24oaWQsIHZlcnNpb25JZCkpO1xuICAgIH1cbiAgfSk7XG4gIHNlbGYuYWRkZWQoXCJmb3JtX3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rm9ybVZlcnNpb24oZm9ybUlkLCB2ZXJzaW9uSWQpKTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAnaW5zdGFuY2VfZGF0YScsIChpbnN0YW5jZUlkLCBib3gpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGluc3RhbmNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdG1pbmlBcHByb3ZlRmllbGRzID0gWydfaWQnLCAnaXNfZmluaXNoZWQnLCAndXNlcicsICdoYW5kbGVyJywgJ2hhbmRsZXJfbmFtZScsICd0eXBlJywgJ3N0YXJ0X2RhdGUnLCAnZGVzY3JpcHRpb24nLFxyXG5cdFx0J2lzX3JlYWQnLCAnanVkZ2UnLCAnZmluaXNoX2RhdGUnLCAnZnJvbV91c2VyX25hbWUnLCAnZnJvbV91c2VyJywgJ2NjX2Rlc2NyaXB0aW9uJywgJ2F1dG9fc3VibWl0dGVkJ11cclxuXHJcblx0dHJpZ2dlckNoYW5nZUZpZWxkcyA9IFsnZm9ybV92ZXJzaW9uJywgJ2Zsb3dfdmVyc2lvbicsICdyZWxhdGVkX2luc3RhbmNlcycsICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJywgJ3ZhbHVlcyddXHJcblxyXG5cdHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXMgPSB7fVxyXG5cclxuXHRpbnN0YW5jZV9maWVsZHNfMCA9IHtcclxuXHRcdFwicmVjb3JkX3N5bmNlZFwiOiAwLFxyXG5cclxuI1x0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25cIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmNvc3RfdGltZVwiOiAwLFxyXG4jXHRcdFwidHJhY2VzLmFwcHJvdmVzLnJlYWRfZGF0ZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaXNfZXJyb3JcIjogMCxcclxuXHRcdCMgXCJ0cmFjZXMuYXBwcm92ZXMudXNlcl9uYW1lXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5kZWFkbGluZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMucmVtaW5kX2RhdGVcIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLnJlbWluZGVkX2NvdW50XCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5tb2RpZmllZF9ieVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMubW9kaWZpZWRcIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmdlb2xvY2F0aW9uXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5jY191c2Vyc1wiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV9hcHByb3ZlX2lkXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy52YWx1ZXNfaGlzdG9yeVwiOiAwXHJcblx0fVxyXG5cclxuXHRnZXRNeWFwcHJvdmVNb2RpZmllZCA9ICh0cmFjZXMpLT5cclxuXHRcdG15QXBwcm92ZU1vZGlmaWVkcyA9IG5ldyBBcnJheSgpXHJcblxyXG5cdFx0dHJhY2VzPy5mb3JFYWNoICh0cmFjZSktPlxyXG5cdFx0XHR0cmFjZT8uYXBwcm92ZXM/LmZvckVhY2ggKGFwcHJvdmUpLT5cclxuXHRcdFx0XHRpZiAoYXBwcm92ZS51c2VyID09IHNlbGYudXNlcklkIHx8IGFwcHJvdmUuaGFuZGxlciA9PSBzZWxmLnVzZXJJZClcclxuXHRcdFx0XHQjICYmICFhcHByb3ZlLmlzX2ZpbmlzaGVkXHJcbiNcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJhcHByb3ZlXCIsIGFwcHJvdmUuX2lkLCBhcHByb3ZlLnJlYWRfZGF0ZSlcclxuXHJcblx0XHRcdFx0XHRteUFwcHJvdmVNb2RpZmllZHMucHVzaChhcHByb3ZlLnJlYWRfZGF0ZSlcclxuXHJcblx0XHRyZXR1cm4gbXlBcHByb3ZlTW9kaWZpZWRzXHJcblxyXG5cclxuXHRnZXRNaW5pSW5zdGFuY2UgPSAoX2luc3RhbmNlSWQpLT5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogX2luc3RhbmNlSWR9LCB7ZmllbGRzOiBpbnN0YW5jZV9maWVsZHNfMH0pXHJcblxyXG5cdFx0aWYgaW5zdGFuY2VcclxuXHJcblx0XHRcdHRyaWdnZXJDaGFuZ2VGaWVsZHMuZm9yRWFjaCAoa2V5KS0+XHJcblx0XHRcdFx0aWYga2V5ID09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJ1xyXG5cdFx0XHRcdFx0dHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldID0gZ2V0TXlhcHByb3ZlTW9kaWZpZWQoaW5zdGFuY2UudHJhY2VzKVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSA9IGluc3RhbmNlW2tleV1cclxuXHJcbiNcdFx0XHRoYXNPcGluaW9uRmllbGQgPSBJbnN0YW5jZVNpZ25UZXh0LmluY2x1ZGVzT3BpbmlvbkZpZWxkKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcclxuXHJcblx0XHRcdHNob3dfbW9kYWxfdHJhY2VzX2xpc3QgPSBkYi5zcGFjZV9zZXR0aW5ncy5maW5kT25lKHsgc3BhY2U6IGluc3RhbmNlLnNwYWNlLCBrZXk6IFwic2hvd19tb2RhbF90cmFjZXNfbGlzdFwiIH0sIHsgZmllbGRzOiB7IHZhbHVlczogMSB9IH0pPy52YWx1ZXMgfHwgZmFsc2VcclxuXHJcblx0XHRcdGlmIHNob3dfbW9kYWxfdHJhY2VzX2xpc3RcclxuXHJcblx0XHRcdFx0dHJhY2VzID0gbmV3IEFycmF5KCk7XHJcblxyXG5cdFx0XHRcdGluc3RhbmNlPy50cmFjZXM/LmZvckVhY2ggKHRyYWNlKS0+XHJcblx0XHRcdFx0XHRfdHJhY2UgPSBfLmNsb25lKHRyYWNlKVxyXG5cclxuXHRcdFx0XHRcdGFwcHJvdmVzID0gbmV3IEFycmF5KClcclxuXHJcblx0XHRcdFx0XHR0cmFjZT8uYXBwcm92ZXM/LmZvckVhY2ggKGFwcHJvdmUpLT5cclxuXHRcdFx0XHRcdFx0aWYgYXBwcm92ZS50eXBlICE9ICdjYycgfHwgYXBwcm92ZS51c2VyID09IHNlbGYudXNlcklkIHx8IGFwcHJvdmUuaGFuZGxlciA9PSBzZWxmLnVzZXJJZCB8fCAoIV8uaXNFbXB0eShhcHByb3ZlLnNpZ25fZmllbGRfY29kZSkpXHJcblx0XHRcdFx0XHRcdFx0YXBwcm92ZXMucHVzaChhcHByb3ZlKVxyXG5cclxuXHRcdFx0XHRcdF90cmFjZS5hcHByb3ZlcyA9IGFwcHJvdmVzXHJcblxyXG5cdFx0XHRcdFx0dHJhY2VzLnB1c2goX3RyYWNlKVxyXG5cclxuXHRcdFx0XHRpbnN0YW5jZS50cmFjZXMgPSB0cmFjZXM7XHJcblxyXG5cdFx0cmV0dXJuIGluc3RhbmNlXHJcblxyXG5cclxuXHRuZWVkQ2hhbmdlID0gKGNoYW5nZUZpZWxkcyktPlxyXG5cdFx0aWYgY2hhbmdlRmllbGRzXHJcblxyXG5cdFx0XHRfY2hhbmdlID0gZmFsc2VcclxuXHJcblx0XHRcdF9yZXYgPSBfLmZpbmQgdHJpZ2dlckNoYW5nZUZpZWxkcywgKGtleSktPlxyXG5cdFx0XHRcdF9rZXkgPSBrZXlcclxuXHJcblx0XHRcdFx0aWYga2V5ID09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJ1xyXG5cdFx0XHRcdFx0X2tleSA9ICd0cmFjZXMnXHJcblxyXG5cdFx0XHRcdGlmIF8uaGFzKGNoYW5nZUZpZWxkcywgX2tleSlcclxuXHJcblx0XHRcdFx0XHRpZiBrZXkgPT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnXHJcblxyXG5cdFx0XHRcdFx0XHRfbXlfYXBwcm92ZV9tb2RpZmllZHMgPSBnZXRNeWFwcHJvdmVNb2RpZmllZChjaGFuZ2VGaWVsZHMudHJhY2VzKVxyXG5cclxuI1x0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgX215X2FwcHJvdmVfbW9kaWZpZWRzKVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuICFfLmlzRXF1YWwodHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldLCBfbXlfYXBwcm92ZV9tb2RpZmllZHMpXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHJldHVybiAhXy5pc0VxdWFsKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgY2hhbmdlRmllbGRzW2tleV0pXHJcblxyXG5cdFx0XHRpZiBfcmV2XHJcblx0XHRcdFx0X2NoYW5nZSA9IHRydWVcclxuXHJcbiNcdFx0XHRjb25zb2xlLmxvZyhfcmV2LCBfY2hhbmdlKVxyXG5cclxuXHRcdFx0cmV0dXJuIF9jaGFuZ2VcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cdCPmraTlpITkuI3og73mt7vliqBmaWVsZHPpmZDliLbvvIzlkKbliJnkvJrlr7zoh7TmlbDmja7kuI3lrp7ml7ZcclxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiBpbnN0YW5jZUlkfSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0Y2hhbmdlZDogKGlkLCBmaWVsZHMpLT5cclxuXHRcdFx0aWYoYm94ICE9ICdpbmJveCcgfHwgbmVlZENoYW5nZShmaWVsZHMpKVxyXG5cdFx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgZ2V0TWluaUluc3RhbmNlKGlkKSk7XHJcblx0XHRyZW1vdmVkOiAoaWQpLT5cclxuXHRcdFx0c2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcclxuXHR9XHJcblxyXG5cdGluc3RhbmNlID0gZ2V0TWluaUluc3RhbmNlKGluc3RhbmNlSWQpXHJcblxyXG5cdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaW5zdGFuY2U/Ll9pZCwgaW5zdGFuY2UpO1xyXG5cclxuXHRzZWxmLnJlYWR5KCk7XHJcblxyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKClcclxuXHJcblxyXG5NZXRlb3IucHVibGlzaCAnaW5zdGFuY2VfdHJhY2VzJywgKGluc3RhbmNlSWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGluc3RhbmNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0c2VsZiA9IHRoaXNcclxuXHJcblx0Z2V0SW5zdGFuY2VUcmFjZXMgPSAoX2luc0lkKS0+XHJcblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogX2luc0lkfSwge2ZpZWxkczoge19pZDogMSwgdHJhY2VzOiAxfX0pXHJcblxyXG5cclxuXHRoYW5kbGUgPSAgZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogaW5zdGFuY2VJZH0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZV90cmFjZXNcIiwgaW5zdGFuY2VJZCwgZ2V0SW5zdGFuY2VUcmFjZXMoaW5zdGFuY2VJZCkpO1xyXG5cdH1cclxuXHJcblx0c2VsZi5hZGRlZChcImluc3RhbmNlX3RyYWNlc1wiLCBpbnN0YW5jZUlkLCBnZXRJbnN0YW5jZVRyYWNlcyhpbnN0YW5jZUlkKSk7XHJcblxyXG5cdHNlbGYucmVhZHkoKTtcclxuXHRzZWxmLm9uU3RvcCAoKS0+XHJcblx0XHRoYW5kbGUuc3RvcCgpIiwiTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlX2RhdGEnLCBmdW5jdGlvbihpbnN0YW5jZUlkLCBib3gpIHtcbiAgdmFyIGdldE1pbmlJbnN0YW5jZSwgZ2V0TXlhcHByb3ZlTW9kaWZpZWQsIGhhbmRsZSwgaW5zdGFuY2UsIGluc3RhbmNlX2ZpZWxkc18wLCBtaW5pQXBwcm92ZUZpZWxkcywgbmVlZENoYW5nZSwgc2VsZiwgdHJpZ2dlckNoYW5nZUZpZWxkcywgdHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcztcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgbWluaUFwcHJvdmVGaWVsZHMgPSBbJ19pZCcsICdpc19maW5pc2hlZCcsICd1c2VyJywgJ2hhbmRsZXInLCAnaGFuZGxlcl9uYW1lJywgJ3R5cGUnLCAnc3RhcnRfZGF0ZScsICdkZXNjcmlwdGlvbicsICdpc19yZWFkJywgJ2p1ZGdlJywgJ2ZpbmlzaF9kYXRlJywgJ2Zyb21fdXNlcl9uYW1lJywgJ2Zyb21fdXNlcicsICdjY19kZXNjcmlwdGlvbicsICdhdXRvX3N1Ym1pdHRlZCddO1xuICB0cmlnZ2VyQ2hhbmdlRmllbGRzID0gWydmb3JtX3ZlcnNpb24nLCAnZmxvd192ZXJzaW9uJywgJ3JlbGF0ZWRfaW5zdGFuY2VzJywgJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnLCAndmFsdWVzJ107XG4gIHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXMgPSB7fTtcbiAgaW5zdGFuY2VfZmllbGRzXzAgPSB7XG4gICAgXCJyZWNvcmRfc3luY2VkXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJfb3JnYW5pemF0aW9uXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuY29zdF90aW1lXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuaXNfZXJyb3JcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5kZWFkbGluZVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLnJlbWluZF9kYXRlXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMucmVtaW5kZWRfY291bnRcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5tb2RpZmllZF9ieVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLm1vZGlmaWVkXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuZ2VvbG9jYXRpb25cIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5jY191c2Vyc1wiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmZyb21fYXBwcm92ZV9pZFwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLnZhbHVlc19oaXN0b3J5XCI6IDBcbiAgfTtcbiAgZ2V0TXlhcHByb3ZlTW9kaWZpZWQgPSBmdW5jdGlvbih0cmFjZXMpIHtcbiAgICB2YXIgbXlBcHByb3ZlTW9kaWZpZWRzO1xuICAgIG15QXBwcm92ZU1vZGlmaWVkcyA9IG5ldyBBcnJheSgpO1xuICAgIGlmICh0cmFjZXMgIT0gbnVsbCkge1xuICAgICAgdHJhY2VzLmZvckVhY2goZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgcmV0dXJuIHRyYWNlICE9IG51bGwgPyAocmVmID0gdHJhY2UuYXBwcm92ZXMpICE9IG51bGwgPyByZWYuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgICAgaWYgKGFwcHJvdmUudXNlciA9PT0gc2VsZi51c2VySWQgfHwgYXBwcm92ZS5oYW5kbGVyID09PSBzZWxmLnVzZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuIG15QXBwcm92ZU1vZGlmaWVkcy5wdXNoKGFwcHJvdmUucmVhZF9kYXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBteUFwcHJvdmVNb2RpZmllZHM7XG4gIH07XG4gIGdldE1pbmlJbnN0YW5jZSA9IGZ1bmN0aW9uKF9pbnN0YW5jZUlkKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHJlZjEsIHNob3dfbW9kYWxfdHJhY2VzX2xpc3QsIHRyYWNlcztcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogX2luc3RhbmNlSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IGluc3RhbmNlX2ZpZWxkc18wXG4gICAgfSk7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICB0cmlnZ2VyQ2hhbmdlRmllbGRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJykge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0gPSBnZXRNeWFwcHJvdmVNb2RpZmllZChpbnN0YW5jZS50cmFjZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0gPSBpbnN0YW5jZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNob3dfbW9kYWxfdHJhY2VzX2xpc3QgPSAoKHJlZiA9IGRiLnNwYWNlX3NldHRpbmdzLmZpbmRPbmUoe1xuICAgICAgICBzcGFjZTogaW5zdGFuY2Uuc3BhY2UsXG4gICAgICAgIGtleTogXCJzaG93X21vZGFsX3RyYWNlc19saXN0XCJcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdmFsdWVzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pKSAhPSBudWxsID8gcmVmLnZhbHVlcyA6IHZvaWQgMCkgfHwgZmFsc2U7XG4gICAgICBpZiAoc2hvd19tb2RhbF90cmFjZXNfbGlzdCkge1xuICAgICAgICB0cmFjZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgaWYgKGluc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoKHJlZjEgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlZjEuZm9yRWFjaChmdW5jdGlvbih0cmFjZSkge1xuICAgICAgICAgICAgICB2YXIgX3RyYWNlLCBhcHByb3ZlcywgcmVmMjtcbiAgICAgICAgICAgICAgX3RyYWNlID0gXy5jbG9uZSh0cmFjZSk7XG4gICAgICAgICAgICAgIGFwcHJvdmVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICAgIGlmICh0cmFjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKChyZWYyID0gdHJhY2UuYXBwcm92ZXMpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHJlZjIuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcHByb3ZlLnR5cGUgIT09ICdjYycgfHwgYXBwcm92ZS51c2VyID09PSBzZWxmLnVzZXJJZCB8fCBhcHByb3ZlLmhhbmRsZXIgPT09IHNlbGYudXNlcklkIHx8ICghXy5pc0VtcHR5KGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBwcm92ZXMucHVzaChhcHByb3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90cmFjZS5hcHByb3ZlcyA9IGFwcHJvdmVzO1xuICAgICAgICAgICAgICByZXR1cm4gdHJhY2VzLnB1c2goX3RyYWNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS50cmFjZXMgPSB0cmFjZXM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbiAgbmVlZENoYW5nZSA9IGZ1bmN0aW9uKGNoYW5nZUZpZWxkcykge1xuICAgIHZhciBfY2hhbmdlLCBfcmV2O1xuICAgIGlmIChjaGFuZ2VGaWVsZHMpIHtcbiAgICAgIF9jaGFuZ2UgPSBmYWxzZTtcbiAgICAgIF9yZXYgPSBfLmZpbmQodHJpZ2dlckNoYW5nZUZpZWxkcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBfa2V5LCBfbXlfYXBwcm92ZV9tb2RpZmllZHM7XG4gICAgICAgIF9rZXkgPSBrZXk7XG4gICAgICAgIGlmIChrZXkgPT09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJykge1xuICAgICAgICAgIF9rZXkgPSAndHJhY2VzJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5oYXMoY2hhbmdlRmllbGRzLCBfa2V5KSkge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJykge1xuICAgICAgICAgICAgX215X2FwcHJvdmVfbW9kaWZpZWRzID0gZ2V0TXlhcHByb3ZlTW9kaWZpZWQoY2hhbmdlRmllbGRzLnRyYWNlcyk7XG4gICAgICAgICAgICByZXR1cm4gIV8uaXNFcXVhbCh0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0sIF9teV9hcHByb3ZlX21vZGlmaWVkcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAhXy5pc0VxdWFsKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgY2hhbmdlRmllbGRzW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoX3Jldikge1xuICAgICAgICBfY2hhbmdlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfY2hhbmdlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIF9pZDogaW5zdGFuY2VJZFxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQsIGZpZWxkcykge1xuICAgICAgaWYgKGJveCAhPT0gJ2luYm94JyB8fCBuZWVkQ2hhbmdlKGZpZWxkcykpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgZ2V0TWluaUluc3RhbmNlKGlkKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XG4gICAgfVxuICB9KTtcbiAgaW5zdGFuY2UgPSBnZXRNaW5pSW5zdGFuY2UoaW5zdGFuY2VJZCk7XG4gIHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaW5zdGFuY2UgIT0gbnVsbCA/IGluc3RhbmNlLl9pZCA6IHZvaWQgMCwgaW5zdGFuY2UpO1xuICBzZWxmLnJlYWR5KCk7XG4gIHJldHVybiBzZWxmLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlX3RyYWNlcycsIGZ1bmN0aW9uKGluc3RhbmNlSWQpIHtcbiAgdmFyIGdldEluc3RhbmNlVHJhY2VzLCBoYW5kbGUsIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghaW5zdGFuY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGdldEluc3RhbmNlVHJhY2VzID0gZnVuY3Rpb24oX2luc0lkKSB7XG4gICAgcmV0dXJuIGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogX2luc0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIF9pZDogMSxcbiAgICAgICAgdHJhY2VzOiAxXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICBfaWQ6IGluc3RhbmNlSWRcbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VfdHJhY2VzXCIsIGluc3RhbmNlSWQsIGdldEluc3RhbmNlVHJhY2VzKGluc3RhbmNlSWQpKTtcbiAgICB9XG4gIH0pO1xuICBzZWxmLmFkZGVkKFwiaW5zdGFuY2VfdHJhY2VzXCIsIGluc3RhbmNlSWQsIGdldEluc3RhbmNlVHJhY2VzKGluc3RhbmNlSWQpKTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJcclxuXHRNZXRlb3IucHVibGlzaCAnaW5zdGFuY2VzX2xpc3QnLCAoc3BhY2VJZCwgYm94LCBmbG93SWQpLT5cclxuXHJcblx0XHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cdFx0XHJcblx0XHR1bmxlc3Mgc3BhY2VJZFxyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdFx0cXVlcnkgPSB7c3BhY2U6IHNwYWNlSWR9XHJcblx0XHRpZiBib3ggPT0gXCJpbmJveFwiXHJcblx0XHRcdHF1ZXJ5LmluYm94X3VzZXJzID0gdGhpcy51c2VySWQ7XHJcblx0XHRlbHNlIGlmIGJveCA9PSBcIm91dGJveFwiXHJcblx0XHRcdHF1ZXJ5Lm91dGJveF91c2VycyA9IHRoaXMudXNlcklkO1xyXG5cdFx0ZWxzZSBpZiBib3ggPT0gXCJkcmFmdFwiXHJcblx0XHRcdHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xyXG5cdFx0XHRxdWVyeS5zdGF0ZSA9IFwiZHJhZnRcIlxyXG5cdFx0ZWxzZSBpZiBib3ggPT0gXCJwZW5kaW5nXCJcclxuXHRcdFx0cXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHF1ZXJ5LnN0YXRlID0gXCJwZW5kaW5nXCJcclxuXHRcdGVsc2UgaWYgYm94ID09IFwiY29tcGxldGVkXCJcclxuXHRcdFx0cXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHF1ZXJ5LnN0YXRlID0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0ZWxzZSBpZiBib3ggPT0gXCJtb25pdG9yXCJcclxuXHRcdFx0cXVlcnkuZmxvdyA9IGZsb3dJZDtcclxuXHRcdFx0cXVlcnkuc3RhdGUgPSB7JGluOiBbXCJwZW5kaW5nXCIsXCJjb21wbGV0ZWRcIl19O1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRxdWVyeS5zdGF0ZSA9IFwibm9uZVwiXHJcblxyXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7ZmllbGRzOiB7bmFtZToxLCBjcmVhdGVkOjEsIGZvcm06MSwgZmxvdzogMSwgc3BhY2U6MSwgbW9kaWZpZWQ6MSwgYXBwbGljYW50OiAxLCBpc19hcmNoaXZlZDoxLCBmb3JtX3ZlcnNpb246IDEsIGZsb3dfdmVyc2lvbjogMX19KVxyXG5cclxuIiwiTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlc19saXN0JywgZnVuY3Rpb24oc3BhY2VJZCwgYm94LCBmbG93SWQpIHtcbiAgdmFyIHF1ZXJ5O1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHF1ZXJ5ID0ge1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH07XG4gIGlmIChib3ggPT09IFwiaW5ib3hcIikge1xuICAgIHF1ZXJ5LmluYm94X3VzZXJzID0gdGhpcy51c2VySWQ7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcIm91dGJveFwiKSB7XG4gICAgcXVlcnkub3V0Ym94X3VzZXJzID0gdGhpcy51c2VySWQ7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcImRyYWZ0XCIpIHtcbiAgICBxdWVyeS5zdWJtaXR0ZXIgPSB0aGlzLnVzZXJJZDtcbiAgICBxdWVyeS5zdGF0ZSA9IFwiZHJhZnRcIjtcbiAgfSBlbHNlIGlmIChib3ggPT09IFwicGVuZGluZ1wiKSB7XG4gICAgcXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XG4gICAgcXVlcnkuc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgfSBlbHNlIGlmIChib3ggPT09IFwiY29tcGxldGVkXCIpIHtcbiAgICBxdWVyeS5zdWJtaXR0ZXIgPSB0aGlzLnVzZXJJZDtcbiAgICBxdWVyeS5zdGF0ZSA9IFwiY29tcGxldGVkXCI7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcIm1vbml0b3JcIikge1xuICAgIHF1ZXJ5LmZsb3cgPSBmbG93SWQ7XG4gICAgcXVlcnkuc3RhdGUgPSB7XG4gICAgICAkaW46IFtcInBlbmRpbmdcIiwgXCJjb21wbGV0ZWRcIl1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5LnN0YXRlID0gXCJub25lXCI7XG4gIH1cbiAgcmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgY3JlYXRlZDogMSxcbiAgICAgIGZvcm06IDEsXG4gICAgICBmbG93OiAxLFxuICAgICAgc3BhY2U6IDEsXG4gICAgICBtb2RpZmllZDogMSxcbiAgICAgIGFwcGxpY2FudDogMSxcbiAgICAgIGlzX2FyY2hpdmVkOiAxLFxuICAgICAgZm9ybV92ZXJzaW9uOiAxLFxuICAgICAgZmxvd192ZXJzaW9uOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuIiwibGFzdEZpbmlzaGVkQXBwcm92ZUFnZ3JlZ2F0ZSA9IChpbnN0YW5jZWlkLCB1c2VySWQsIGRhdGFNYXAsIGNhbGxiYWNrKS0+XHJcblx0b3BlcmF0aW9uID0gW3tcclxuXHRcdFwiJG1hdGNoXCI6IHtcclxuXHRcdFx0XCJfaWRcIjogaW5zdGFuY2VpZFxyXG5cdFx0fVxyXG5cdH0sIHtcIiRwcm9qZWN0XCI6IHtcIm5hbWVcIjogMSwgXCJfYXBwcm92ZVwiOiBcIiR0cmFjZXMuYXBwcm92ZXNcIn19LCB7XCIkdW53aW5kXCI6IFwiJF9hcHByb3ZlXCJ9LCB7XCIkdW53aW5kXCI6IFwiJF9hcHByb3ZlXCJ9LFxyXG5cdFx0e1wiJG1hdGNoXCI6IHtcIl9hcHByb3ZlLmlzX2ZpbmlzaGVkXCI6IHRydWUsICRvcjpbe1wiX2FwcHJvdmUuaGFuZGxlclwiOiB1c2VySWR9LHtcIl9hcHByb3ZlLnVzZXJcIjogdXNlcklkfV19fSxcclxuXHRcdHtcIiRncm91cFwiOiB7XCJfaWRcIjogXCIkX2lkXCIsIFwiZmluaXNoX2RhdGVcIjoge1wiJGxhc3RcIjogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIn19fVxyXG5cdF1cclxuXHJcblx0ZGIuaW5zdGFuY2VzLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUob3BlcmF0aW9uKS50b0FycmF5IChlcnIsIGRhdGEpLT5cclxuXHRcdGlmIGVyclxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoZXJyKVxyXG5cclxuXHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxyXG5cdFx0XHRkYXRhTWFwLnB1c2ggZG9jXHJcblxyXG5cdFx0aWYgY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKVxyXG5cdFx0XHRjYWxsYmFjaygpXHJcblx0XHRyZXR1cm5cclxuXHJcbmFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZSA9IE1ldGVvci53cmFwQXN5bmMobGFzdEZpbmlzaGVkQXBwcm92ZUFnZ3JlZ2F0ZSlcclxuXHJcbk1ldGVvci5wdWJsaXNoIFwiaW5zdGFuY2VfdGFidWxhclwiLCAodGFibGVOYW1lLCBpZHMsIGZpZWxkcyktPlxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRjaGVjayh0YWJsZU5hbWUsIFN0cmluZyk7XHJcblxyXG5cdGNoZWNrKGlkcywgQXJyYXkpO1xyXG5cclxuXHRjaGVjayhmaWVsZHMsIE1hdGNoLk9wdGlvbmFsKE9iamVjdCkpXHJcblxyXG5cdGZpZWxkcy5jY191c2VycyA9IDFcclxuXHJcblx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZSA9ICh1c2VySWQsIGluc3RhbmNlSWQpLT5cclxuXHRcdGRhdGEgPSBbXVxyXG5cdFx0YXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlKGluc3RhbmNlSWQsIHVzZXJJZCwgZGF0YSlcclxuXHRcdGlmIGRhdGEubGVuZ3RoID4gMFxyXG5cdFx0XHRyZXR1cm4gZGF0YVswXVxyXG5cclxuXHJcblx0Z2V0TXlBcHByb3ZlID0gKHVzZXJJZCwgaW5zdGFuY2VJZCktPlxyXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZUlkfSwge2ZpZWxkczoge3RyYWNlczogMX19KVxyXG5cdFx0bXlBcHByb3ZlID0gbnVsbFxyXG5cclxuXHRcdGlmICFpbnN0YW5jZVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiAhaW5zdGFuY2UudHJhY2VzIHx8IGluc3RhbmNlLnRyYWNlcy5sZW5ndGggPCAxXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdG5vdEZpbmlzaGVkVHJhY2VzID0gaW5zdGFuY2UudHJhY2VzLmZpbHRlclByb3BlcnR5KFwiaXNfZmluaXNoZWRcIiwgZmFsc2UpXHJcblxyXG5cdFx0aWYgbm90RmluaXNoZWRUcmFjZXMubGVuZ3RoID4gMFxyXG5cdFx0XHRhcHByb3ZlcyA9IG5vdEZpbmlzaGVkVHJhY2VzWzBdLmFwcHJvdmVzLmZpbHRlclByb3BlcnR5KFwiaXNfZmluaXNoZWRcIiwgZmFsc2UpLmZpbHRlclByb3BlcnR5KFwiaGFuZGxlclwiLCB1c2VySWQpO1xyXG5cclxuXHRcdFx0aWYgYXBwcm92ZXMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdGFwcHJvdmUgPSBhcHByb3Zlc1swXVxyXG5cdFx0XHRcdG15QXBwcm92ZSA9IHtcclxuXHRcdFx0XHRcdGlkOiBhcHByb3ZlLl9pZCxcclxuXHRcdFx0XHRcdGluc3RhbmNlOiBhcHByb3ZlLmluc3RhbmNlLFxyXG5cdFx0XHRcdFx0dHJhY2U6IGFwcHJvdmUudHJhY2UsXHJcblx0XHRcdFx0XHRpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWQsXHJcblx0XHRcdFx0XHRzdGFydF9kYXRlOiBhcHByb3ZlLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdGFnZW50OiBhcHByb3ZlLmFnZW50XHJcblx0XHRcdFx0XHR1c2VyX25hbWU6IGFwcHJvdmUudXNlcl9uYW1lXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdGlmICFteUFwcHJvdmVcclxuXHRcdFx0aXNfcmVhZCA9IGZhbHNlXHJcblx0XHRcdGluc3RhbmNlLnRyYWNlcy5mb3JFYWNoICh0cmFjZSkgLT5cclxuXHRcdFx0XHR0cmFjZT8uYXBwcm92ZXM/LmZvckVhY2ggKGFwcHJvdmUpIC0+XHJcblx0XHRcdFx0XHRpZiBhcHByb3ZlLnR5cGUgPT0gJ2NjJyBhbmQgYXBwcm92ZS51c2VyID09IHVzZXJJZCBhbmQgYXBwcm92ZS5pc19maW5pc2hlZCA9PSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRpZiBhcHByb3ZlLmlzX3JlYWRcclxuXHRcdFx0XHRcdFx0XHRpc19yZWFkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRteUFwcHJvdmUgPSB7aWQ6IGFwcHJvdmUuX2lkLCBpc19yZWFkOiBpc19yZWFkLCBzdGFydF9kYXRlOiBhcHByb3ZlLnN0YXJ0X2RhdGUsIGFnZW50OiBhcHByb3ZlLmFnZW50LCB1c2VyX25hbWU6IGFwcHJvdmUudXNlcl9uYW1lfVxyXG5cclxuXHRcdHJldHVybiBteUFwcHJvdmVcclxuXHJcblx0Z2V0U3RlcEN1cnJlbnROYW1lID0gKGluc3RhbmNlSWQpIC0+XHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9LCB7ZmllbGRzOiB7XCJ0cmFjZXMubmFtZVwiOiAxLCBcInRyYWNlc1wiOiB7JHNsaWNlOiAtMX19fSlcclxuXHRcdGlmIGluc3RhbmNlXHJcblx0XHRcdHN0ZXBDdXJyZW50TmFtZSA9IGluc3RhbmNlLnRyYWNlcz9bMF0/Lm5hbWVcclxuXHJcblx0XHRyZXR1cm4gc3RlcEN1cnJlbnROYW1lXHJcblxyXG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW46IGlkc319LCB7ZmllbGRzOiB7dHJhY2VzOiAwfX0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGlkfSwge2ZpZWxkczogZmllbGRzfSlcclxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0XHRteUFwcHJvdmUgPSBnZXRNeUFwcHJvdmUoc2VsZi51c2VySWQsIGlkKVxyXG5cdFx0XHRteUxhc3RGaW5pc2hlZEFwcHJvdmUgPSBnZXRNeUxhc3RGaW5pc2hlZEFwcHJvdmUoc2VsZi51c2VySWQsIGlkKVxyXG5cdFx0XHRpZiBteUFwcHJvdmVcclxuXHRcdFx0XHRpbnN0YW5jZS5pc19yZWFkID0gbXlBcHByb3ZlLmlzX3JlYWRcclxuXHRcdFx0XHRpbnN0YW5jZS5zdGFydF9kYXRlID0gbXlBcHByb3ZlLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRpZiBteUFwcHJvdmUuYWdlbnRcclxuXHRcdFx0XHRcdGluc3RhbmNlLmFnZW50X3VzZXJfbmFtZSA9IG15QXBwcm92ZS51c2VyX25hbWVcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGluc3RhbmNlLmlzX3JlYWQgPSB0cnVlXHJcblxyXG5cdFx0XHRpZiBteUxhc3RGaW5pc2hlZEFwcHJvdmVcclxuXHRcdFx0XHRpbnN0YW5jZS5teV9maW5pc2hfZGF0ZSA9IG15TGFzdEZpbmlzaGVkQXBwcm92ZS5maW5pc2hfZGF0ZVxyXG5cclxuXHRcdFx0aW5zdGFuY2UuaXNfY2MgPSBpbnN0YW5jZS5jY191c2Vycz8uaW5jbHVkZXMoc2VsZi51c2VySWQpIHx8IGZhbHNlXHJcblx0XHRcdGluc3RhbmNlLmNjX2NvdW50ID0gaW5zdGFuY2UuY2NfdXNlcnM/Lmxlbmd0aCB8fCAwXHJcblx0XHRcdGRlbGV0ZSBpbnN0YW5jZS5jY191c2Vyc1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0XHRzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcclxuXHRcdFx0Y2F0Y2ggZXJyb3JcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnaW5zdGFuY2Ugb2JzZXJ2ZUNoYW5nZXMgZXJyb3I6ICcsIGVycm9yLm1lc3NhZ2UpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdzZWxmLnVzZXJJZDogJywgc2VsZi51c2VySWQpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCd0YWJsZU5hbWU6ICcsIHRhYmxlTmFtZSk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ2lkczogJywgSlNPTi5zdHJpbmdpZnkoaWRzKSk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ215QXBwcm92ZTogJywgSlNPTi5zdHJpbmdpZnkobXlBcHByb3ZlKSk7XHJcblx0XHRyZW1vdmVkOiAoaWQpLT5cclxuXHRcdFx0c2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcclxuXHR9XHJcblxyXG5cdGlkcy5mb3JFYWNoIChpZCktPlxyXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXHJcblx0XHRyZXR1cm4gaWYgbm90IGluc3RhbmNlXHJcblx0XHRteUFwcHJvdmUgPSBnZXRNeUFwcHJvdmUoc2VsZi51c2VySWQsIGlkKVxyXG5cdFx0bXlMYXN0RmluaXNoZWRBcHByb3ZlID0gZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlKHNlbGYudXNlcklkLCBpZClcclxuXHRcdGlmIG15QXBwcm92ZVxyXG5cdFx0XHRpbnN0YW5jZS5pc19yZWFkID0gbXlBcHByb3ZlLmlzX3JlYWRcclxuXHRcdFx0aW5zdGFuY2Uuc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlXHJcblx0XHRcdGlmIG15QXBwcm92ZS5hZ2VudFxyXG5cdFx0XHRcdFx0aW5zdGFuY2UuYWdlbnRfdXNlcl9uYW1lID0gbXlBcHByb3ZlLnVzZXJfbmFtZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnN0YW5jZS5pc19yZWFkID0gdHJ1ZVxyXG5cclxuXHRcdGlmIG15TGFzdEZpbmlzaGVkQXBwcm92ZVxyXG5cdFx0XHRpbnN0YW5jZS5teV9maW5pc2hfZGF0ZSA9IG15TGFzdEZpbmlzaGVkQXBwcm92ZS5maW5pc2hfZGF0ZVxyXG5cclxuXHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxyXG5cdFx0aW5zdGFuY2UuY2NfY291bnQgPSBpbnN0YW5jZS5jY191c2Vycz8ubGVuZ3RoIHx8IDBcclxuXHRcdGRlbGV0ZSBpbnN0YW5jZS5jY191c2Vyc1xyXG5cdFx0c2VsZi5hZGRlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xyXG5cclxuXHRzZWxmLnJlYWR5KCk7XHJcblx0c2VsZi5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKSIsInZhciBhc3luY0xhc3RGaW5pc2hlZEFwcHJvdmUsIGxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGU7XG5cbmxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGUgPSBmdW5jdGlvbihpbnN0YW5jZWlkLCB1c2VySWQsIGRhdGFNYXAsIGNhbGxiYWNrKSB7XG4gIHZhciBvcGVyYXRpb247XG4gIG9wZXJhdGlvbiA9IFtcbiAgICB7XG4gICAgICBcIiRtYXRjaFwiOiB7XG4gICAgICAgIFwiX2lkXCI6IGluc3RhbmNlaWRcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBcIiRwcm9qZWN0XCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IDEsXG4gICAgICAgIFwiX2FwcHJvdmVcIjogXCIkdHJhY2VzLmFwcHJvdmVzXCJcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBcIiR1bndpbmRcIjogXCIkX2FwcHJvdmVcIlxuICAgIH0sIHtcbiAgICAgIFwiJHVud2luZFwiOiBcIiRfYXBwcm92ZVwiXG4gICAgfSwge1xuICAgICAgXCIkbWF0Y2hcIjoge1xuICAgICAgICBcIl9hcHByb3ZlLmlzX2ZpbmlzaGVkXCI6IHRydWUsXG4gICAgICAgICRvcjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiX2FwcHJvdmUuaGFuZGxlclwiOiB1c2VySWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBcIl9hcHByb3ZlLnVzZXJcIjogdXNlcklkXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgXCIkZ3JvdXBcIjoge1xuICAgICAgICBcIl9pZFwiOiBcIiRfaWRcIixcbiAgICAgICAgXCJmaW5pc2hfZGF0ZVwiOiB7XG4gICAgICAgICAgXCIkbGFzdFwiOiBcIiRfYXBwcm92ZS5maW5pc2hfZGF0ZVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIF07XG4gIHJldHVybiBkYi5pbnN0YW5jZXMucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShvcGVyYXRpb24pLnRvQXJyYXkoZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgfVxuICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihkb2MpIHtcbiAgICAgIHJldHVybiBkYXRhTWFwLnB1c2goZG9jKTtcbiAgICB9KTtcbiAgICBpZiAoY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH0pO1xufTtcblxuYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlID0gTWV0ZW9yLndyYXBBc3luYyhsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlKTtcblxuTWV0ZW9yLnB1Ymxpc2goXCJpbnN0YW5jZV90YWJ1bGFyXCIsIGZ1bmN0aW9uKHRhYmxlTmFtZSwgaWRzLCBmaWVsZHMpIHtcbiAgdmFyIGdldE15QXBwcm92ZSwgZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlLCBnZXRTdGVwQ3VycmVudE5hbWUsIGhhbmRsZSwgc2VsZjtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgY2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xuICBjaGVjayhpZHMsIEFycmF5KTtcbiAgY2hlY2soZmllbGRzLCBNYXRjaC5PcHRpb25hbChPYmplY3QpKTtcbiAgZmllbGRzLmNjX3VzZXJzID0gMTtcbiAgc2VsZiA9IHRoaXM7XG4gIGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGZ1bmN0aW9uKHVzZXJJZCwgaW5zdGFuY2VJZCkge1xuICAgIHZhciBkYXRhO1xuICAgIGRhdGEgPSBbXTtcbiAgICBhc3luY0xhc3RGaW5pc2hlZEFwcHJvdmUoaW5zdGFuY2VJZCwgdXNlcklkLCBkYXRhKTtcbiAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZGF0YVswXTtcbiAgICB9XG4gIH07XG4gIGdldE15QXBwcm92ZSA9IGZ1bmN0aW9uKHVzZXJJZCwgaW5zdGFuY2VJZCkge1xuICAgIHZhciBhcHByb3ZlLCBhcHByb3ZlcywgaW5zdGFuY2UsIGlzX3JlYWQsIG15QXBwcm92ZSwgbm90RmluaXNoZWRUcmFjZXM7XG4gICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgdHJhY2VzOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgbXlBcHByb3ZlID0gbnVsbDtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaW5zdGFuY2UudHJhY2VzIHx8IGluc3RhbmNlLnRyYWNlcy5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5vdEZpbmlzaGVkVHJhY2VzID0gaW5zdGFuY2UudHJhY2VzLmZpbHRlclByb3BlcnR5KFwiaXNfZmluaXNoZWRcIiwgZmFsc2UpO1xuICAgIGlmIChub3RGaW5pc2hlZFRyYWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBhcHByb3ZlcyA9IG5vdEZpbmlzaGVkVHJhY2VzWzBdLmFwcHJvdmVzLmZpbHRlclByb3BlcnR5KFwiaXNfZmluaXNoZWRcIiwgZmFsc2UpLmZpbHRlclByb3BlcnR5KFwiaGFuZGxlclwiLCB1c2VySWQpO1xuICAgICAgaWYgKGFwcHJvdmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXBwcm92ZSA9IGFwcHJvdmVzWzBdO1xuICAgICAgICBteUFwcHJvdmUgPSB7XG4gICAgICAgICAgaWQ6IGFwcHJvdmUuX2lkLFxuICAgICAgICAgIGluc3RhbmNlOiBhcHByb3ZlLmluc3RhbmNlLFxuICAgICAgICAgIHRyYWNlOiBhcHByb3ZlLnRyYWNlLFxuICAgICAgICAgIGlzX3JlYWQ6IGFwcHJvdmUuaXNfcmVhZCxcbiAgICAgICAgICBzdGFydF9kYXRlOiBhcHByb3ZlLnN0YXJ0X2RhdGUsXG4gICAgICAgICAgYWdlbnQ6IGFwcHJvdmUuYWdlbnQsXG4gICAgICAgICAgdXNlcl9uYW1lOiBhcHByb3ZlLnVzZXJfbmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW15QXBwcm92ZSkge1xuICAgICAgaXNfcmVhZCA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UudHJhY2VzLmZvckVhY2goZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgcmV0dXJuIHRyYWNlICE9IG51bGwgPyAocmVmID0gdHJhY2UuYXBwcm92ZXMpICE9IG51bGwgPyByZWYuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgICAgaWYgKGFwcHJvdmUudHlwZSA9PT0gJ2NjJyAmJiBhcHByb3ZlLnVzZXIgPT09IHVzZXJJZCAmJiBhcHByb3ZlLmlzX2ZpbmlzaGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKGFwcHJvdmUuaXNfcmVhZCkge1xuICAgICAgICAgICAgICBpc19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBteUFwcHJvdmUgPSB7XG4gICAgICAgICAgICAgIGlkOiBhcHByb3ZlLl9pZCxcbiAgICAgICAgICAgICAgaXNfcmVhZDogaXNfcmVhZCxcbiAgICAgICAgICAgICAgc3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlLFxuICAgICAgICAgICAgICBhZ2VudDogYXBwcm92ZS5hZ2VudCxcbiAgICAgICAgICAgICAgdXNlcl9uYW1lOiBhcHByb3ZlLnVzZXJfbmFtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBteUFwcHJvdmU7XG4gIH07XG4gIGdldFN0ZXBDdXJyZW50TmFtZSA9IGZ1bmN0aW9uKGluc3RhbmNlSWQpIHtcbiAgICB2YXIgaW5zdGFuY2UsIHJlZiwgcmVmMSwgc3RlcEN1cnJlbnROYW1lO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLm5hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXNcIjoge1xuICAgICAgICAgICRzbGljZTogLTFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgc3RlcEN1cnJlbnROYW1lID0gKHJlZiA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCA/IChyZWYxID0gcmVmWzBdKSAhPSBudWxsID8gcmVmMS5uYW1lIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gc3RlcEN1cnJlbnROYW1lO1xuICB9O1xuICBoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgX2lkOiB7XG4gICAgICAkaW46IGlkc1xuICAgIH1cbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgdHJhY2VzOiAwXG4gICAgfVxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBlcnJvciwgaW5zdGFuY2UsIG15QXBwcm92ZSwgbXlMYXN0RmluaXNoZWRBcHByb3ZlLCByZWYsIHJlZjE7XG4gICAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IGZpZWxkc1xuICAgICAgfSk7XG4gICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG15QXBwcm92ZSA9IGdldE15QXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpO1xuICAgICAgbXlMYXN0RmluaXNoZWRBcHByb3ZlID0gZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlKHNlbGYudXNlcklkLCBpZCk7XG4gICAgICBpZiAobXlBcHByb3ZlKSB7XG4gICAgICAgIGluc3RhbmNlLmlzX3JlYWQgPSBteUFwcHJvdmUuaXNfcmVhZDtcbiAgICAgICAgaW5zdGFuY2Uuc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgICBpZiAobXlBcHByb3ZlLmFnZW50KSB7XG4gICAgICAgICAgaW5zdGFuY2UuYWdlbnRfdXNlcl9uYW1lID0gbXlBcHByb3ZlLnVzZXJfbmFtZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2UuaXNfcmVhZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAobXlMYXN0RmluaXNoZWRBcHByb3ZlKSB7XG4gICAgICAgIGluc3RhbmNlLm15X2ZpbmlzaF9kYXRlID0gbXlMYXN0RmluaXNoZWRBcHByb3ZlLmZpbmlzaF9kYXRlO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UuaXNfY2MgPSAoKHJlZiA9IGluc3RhbmNlLmNjX3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKHNlbGYudXNlcklkKSA6IHZvaWQgMCkgfHwgZmFsc2U7XG4gICAgICBpbnN0YW5jZS5jY19jb3VudCA9ICgocmVmMSA9IGluc3RhbmNlLmNjX3VzZXJzKSAhPSBudWxsID8gcmVmMS5sZW5ndGggOiB2b2lkIDApIHx8IDA7XG4gICAgICBkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnM7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJvcjE7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbnN0YW5jZSBvYnNlcnZlQ2hhbmdlcyBlcnJvcjogJywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzZWxmLnVzZXJJZDogJywgc2VsZi51c2VySWQpO1xuICAgICAgICBjb25zb2xlLmxvZygndGFibGVOYW1lOiAnLCB0YWJsZU5hbWUpO1xuICAgICAgICBjb25zb2xlLmxvZygnaWRzOiAnLCBKU09OLnN0cmluZ2lmeShpZHMpKTtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdteUFwcHJvdmU6ICcsIEpTT04uc3RyaW5naWZ5KG15QXBwcm92ZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBzZWxmLnJlbW92ZWQoXCJpbnN0YW5jZXNcIiwgaWQpO1xuICAgIH1cbiAgfSk7XG4gIGlkcy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIGluc3RhbmNlLCBteUFwcHJvdmUsIG15TGFzdEZpbmlzaGVkQXBwcm92ZSwgcmVmLCByZWYxO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczogZmllbGRzXG4gICAgfSk7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBteUFwcHJvdmUgPSBnZXRNeUFwcHJvdmUoc2VsZi51c2VySWQsIGlkKTtcbiAgICBteUxhc3RGaW5pc2hlZEFwcHJvdmUgPSBnZXRNeUxhc3RGaW5pc2hlZEFwcHJvdmUoc2VsZi51c2VySWQsIGlkKTtcbiAgICBpZiAobXlBcHByb3ZlKSB7XG4gICAgICBpbnN0YW5jZS5pc19yZWFkID0gbXlBcHByb3ZlLmlzX3JlYWQ7XG4gICAgICBpbnN0YW5jZS5zdGFydF9kYXRlID0gbXlBcHByb3ZlLnN0YXJ0X2RhdGU7XG4gICAgICBpZiAobXlBcHByb3ZlLmFnZW50KSB7XG4gICAgICAgIGluc3RhbmNlLmFnZW50X3VzZXJfbmFtZSA9IG15QXBwcm92ZS51c2VyX25hbWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLmlzX3JlYWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAobXlMYXN0RmluaXNoZWRBcHByb3ZlKSB7XG4gICAgICBpbnN0YW5jZS5teV9maW5pc2hfZGF0ZSA9IG15TGFzdEZpbmlzaGVkQXBwcm92ZS5maW5pc2hfZGF0ZTtcbiAgICB9XG4gICAgaW5zdGFuY2UuaXNfY2MgPSAoKHJlZiA9IGluc3RhbmNlLmNjX3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKHNlbGYudXNlcklkKSA6IHZvaWQgMCkgfHwgZmFsc2U7XG4gICAgaW5zdGFuY2UuY2NfY291bnQgPSAoKHJlZjEgPSBpbnN0YW5jZS5jY191c2VycykgIT0gbnVsbCA/IHJlZjEubGVuZ3RoIDogdm9pZCAwKSB8fCAwO1xuICAgIGRlbGV0ZSBpbnN0YW5jZS5jY191c2VycztcbiAgICByZXR1cm4gc2VsZi5hZGRlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xuICB9KTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAnaW5zdGFuY2VzX2RyYWZ0JywgKHNwYWNlSWQpIC0+XHJcblx0Y2hlY2sgc3BhY2VJZCwgU3RyaW5nXHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1c2VySWQgPSB0aGlzLnVzZXJJZFxyXG5cdHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7c3RhdGU6XCJkcmFmdFwiLHNwYWNlOnNwYWNlSWQsc3VibWl0dGVyOnVzZXJJZCwkb3I6W3tpbmJveF91c2VyczogeyRleGlzdHM6ZmFsc2V9fSwge2luYm94X3VzZXJzOiBbXX1dfSwge2ZpZWxkczoge19pZDogMSwgc3RhdGU6IDEsIHNwYWNlOiAxLCBzdWJtaXR0ZXI6IDEsIGluYm94X3VzZXJzOiAxLCBtb2RpZmllZDogMSwgbmFtZTogMX0sIHNvcnQ6e21vZGlmaWVkOiAtMX19KSIsIk1ldGVvci5wdWJsaXNoKCdpbnN0YW5jZXNfZHJhZnQnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIHZhciB1c2VySWQ7XG4gIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHVzZXJJZCA9IHRoaXMudXNlcklkO1xuICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIHN0YXRlOiBcImRyYWZ0XCIsXG4gICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgc3VibWl0dGVyOiB1c2VySWQsXG4gICAgJG9yOiBbXG4gICAgICB7XG4gICAgICAgIGluYm94X3VzZXJzOiB7XG4gICAgICAgICAgJGV4aXN0czogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBpbmJveF91c2VyczogW11cbiAgICAgIH1cbiAgICBdXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgc3BhY2U6IDEsXG4gICAgICBzdWJtaXR0ZXI6IDEsXG4gICAgICBpbmJveF91c2VyczogMSxcbiAgICAgIG1vZGlmaWVkOiAxLFxuICAgICAgbmFtZTogMVxuICAgIH0sXG4gICAgc29ydDoge1xuICAgICAgbW9kaWZpZWQ6IC0xXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2Rpc3RyaWJ1dGVkX2luc3RhbmNlc19zdGF0ZV9ieV9pZHMnLCAoaW5zdGFuY2VfaWRzKS0+XHJcblx0Y2hlY2soaW5zdGFuY2VfaWRzLCBBcnJheSlcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblx0XHJcblx0dW5sZXNzIGluc3RhbmNlX2lkc1xyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRpZiBfLmlzRW1wdHkoaW5zdGFuY2VfaWRzKVxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRzZWxmID0gdGhpc1xyXG5cclxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiB7JGluOiBpbnN0YW5jZV9pZHN9fSwge2ZpZWxkczoge3N0YXRlOiAxLCB0cmFjZXM6eyRzbGljZTogMX0gfSB9KS5vYnNlcnZlQ2hhbmdlcyB7XHJcblx0XHRhZGRlZDogKGlkLCBmaWVsZHMpLT5cclxuXHRcdFx0c2VsZi5hZGRlZCgnaW5zdGFuY2VzJywgaWQsIHtzdGF0ZTogZmllbGRzLnN0YXRlLCBpc19yZWFkOiBmaWVsZHMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmlzX3JlYWR9KVxyXG5cclxuXHRcdGNoYW5nZWQ6IChpZCwgZmllbGRzKS0+XHJcblx0XHRcdGlmIGZpZWxkcy5zdGF0ZVxyXG5cdFx0XHRcdHNlbGYuY2hhbmdlZCgnaW5zdGFuY2VzJywgaWQsIHtzdGF0ZTogZmllbGRzLnN0YXRlfSlcclxuXHRcdFx0aWYgZmllbGRzLnRyYWNlc1xyXG5cdFx0XHRcdHNlbGYuY2hhbmdlZCgnaW5zdGFuY2VzJywgaWQsIHtpc19yZWFkOiBmaWVsZHMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmlzX3JlYWR9KVxyXG5cdH1cclxuXHJcblx0dGhpcy5yZWFkeSgpXHJcblx0dGhpcy5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKVxyXG4iLCJNZXRlb3IucHVibGlzaCgnZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcycsIGZ1bmN0aW9uKGluc3RhbmNlX2lkcykge1xuICB2YXIgaGFuZGxlLCBzZWxmO1xuICBjaGVjayhpbnN0YW5jZV9pZHMsIEFycmF5KTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZV9pZHMpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmIChfLmlzRW1wdHkoaW5zdGFuY2VfaWRzKSkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICBfaWQ6IHtcbiAgICAgICRpbjogaW5zdGFuY2VfaWRzXG4gICAgfVxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBzdGF0ZTogMSxcbiAgICAgIHRyYWNlczoge1xuICAgICAgICAkc2xpY2U6IDFcbiAgICAgIH1cbiAgICB9XG4gIH0pLm9ic2VydmVDaGFuZ2VzKHtcbiAgICBhZGRlZDogZnVuY3Rpb24oaWQsIGZpZWxkcykge1xuICAgICAgcmV0dXJuIHNlbGYuYWRkZWQoJ2luc3RhbmNlcycsIGlkLCB7XG4gICAgICAgIHN0YXRlOiBmaWVsZHMuc3RhdGUsXG4gICAgICAgIGlzX3JlYWQ6IGZpZWxkcy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uaXNfcmVhZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjaGFuZ2VkOiBmdW5jdGlvbihpZCwgZmllbGRzKSB7XG4gICAgICBpZiAoZmllbGRzLnN0YXRlKSB7XG4gICAgICAgIHNlbGYuY2hhbmdlZCgnaW5zdGFuY2VzJywgaWQsIHtcbiAgICAgICAgICBzdGF0ZTogZmllbGRzLnN0YXRlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGZpZWxkcy50cmFjZXMpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZCgnaW5zdGFuY2VzJywgaWQsIHtcbiAgICAgICAgICBpc19yZWFkOiBmaWVsZHMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmlzX3JlYWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGhpcy5yZWFkeSgpO1xuICByZXR1cm4gdGhpcy5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAncmVsYXRlZF9pbnN0YWNlcycsIChpbnN0YW5jZUlkLCByZWxhdGVkX2luc3RhbmNlcyktPlxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3MgaW5zdGFuY2VJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRyZWxhdGVkX2luc3RhbmNlX2lkcyA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlSWQse2ZpZWxkczoge3JlbGF0ZWRfaW5zdGFuY2VzOiAxfX0pPy5yZWxhdGVkX2luc3RhbmNlc1xyXG5cclxuXHRpZiByZWxhdGVkX2luc3RhbmNlX2lkcyAmJiBfLmlzQXJyYXkocmVsYXRlZF9pbnN0YW5jZV9pZHMpXHJcblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbiA6IHJlbGF0ZWRfaW5zdGFuY2VfaWRzfX0sIHtmaWVsZHM6IHtfaWQ6IDEsIG5hbWU6IDEsIHNwYWNlOiAxfX0pXHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKSIsIk1ldGVvci5wdWJsaXNoKCdyZWxhdGVkX2luc3RhY2VzJywgZnVuY3Rpb24oaW5zdGFuY2VJZCwgcmVsYXRlZF9pbnN0YW5jZXMpIHtcbiAgdmFyIHJlZiwgcmVsYXRlZF9pbnN0YW5jZV9pZHM7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghaW5zdGFuY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmVsYXRlZF9pbnN0YW5jZV9pZHMgPSAocmVmID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VJZCwge1xuICAgIGZpZWxkczoge1xuICAgICAgcmVsYXRlZF9pbnN0YW5jZXM6IDFcbiAgICB9XG4gIH0pKSAhPSBudWxsID8gcmVmLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwO1xuICBpZiAocmVsYXRlZF9pbnN0YW5jZV9pZHMgJiYgXy5pc0FycmF5KHJlbGF0ZWRfaW5zdGFuY2VfaWRzKSkge1xuICAgIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICBfaWQ6IHtcbiAgICAgICAgJGluOiByZWxhdGVkX2luc3RhbmNlX2lkc1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBfaWQ6IDEsXG4gICAgICAgIG5hbWU6IDEsXG4gICAgICAgIHNwYWNlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxufSk7XG4iLCJpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuICAgIE1ldGVvci5wdWJsaXNoICdzcGFjZV91c2VyX3NpZ25zJywgKHNwYWNlSWQpIC0+XHJcbiAgICAgICAgY2hlY2sgc3BhY2VJZCwgU3RyaW5nXHJcblxyXG4gICAgICAgIHVubGVzcyB0aGlzLnVzZXJJZFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG4gICAgICAgIHJldHVybiBkYi5zcGFjZV91c2VyX3NpZ25zLmZpbmQoeyBzcGFjZTogc3BhY2VJZCB9LCB7ZmllbGRzOiB7Y3JlYXRlZF9ieTogMCwgY3JlYXRlZDogMCwgbW9kaWZpZWRfYnk6IDB9fSlcclxuIiwiaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBNZXRlb3IucHVibGlzaCgnc3BhY2VfdXNlcl9zaWducycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgICBjaGVjayhzcGFjZUlkLCBTdHJpbmcpO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gICAgfVxuICAgIHJldHVybiBkYi5zcGFjZV91c2VyX3NpZ25zLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgY3JlYXRlZF9ieTogMCxcbiAgICAgICAgY3JlYXRlZDogMCxcbiAgICAgICAgbW9kaWZpZWRfYnk6IDBcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG4iLCIjIyNcclxuTWV0ZW9yLnB1Ymxpc2hDb21wb3NpdGUgXCJ1c2VyX2luYm94X2luc3RhbmNlXCIsICgpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dXNlclNwYWNlSWRzID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XHJcblx0XHR1c2VyOiB0aGlzLnVzZXJJZCxcclxuXHRcdHVzZXJfYWNjZXB0ZWQ6IHRydWVcclxuXHR9LCB7ZmllbGRzOiB7c3BhY2U6IDF9fSkuZmV0Y2goKS5nZXRFYWNoKFwic3BhY2VcIik7XHJcblx0cXVlcnkgPSB7c3BhY2U6IHskaW46IHVzZXJTcGFjZUlkc319XHJcblxyXG5cdHF1ZXJ5LiRvciA9IFt7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dXHJcblxyXG5cdGZpbmQ6IC0+XHJcblx0XHRkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRzcGFjZTogMSxcclxuXHRcdFx0XHRhcHBsaWNhbnRfbmFtZTogMSxcclxuXHRcdFx0XHRmbG93OiAxLFxyXG5cdFx0XHRcdGluYm94X3VzZXJzOiAxLFxyXG5cdFx0XHRcdGNjX3VzZXJzOiAxLFxyXG5cdFx0XHRcdHN0YXRlOiAxLFxyXG5cdFx0XHRcdG5hbWU6IDEsXHJcblx0XHRcdFx0bW9kaWZpZWQ6IDEsXHJcblx0XHRcdFx0Zm9ybTogMVxyXG5cdFx0XHR9LCBzb3J0OiB7bW9kaWZpZWQ6IC0xfSwgc2tpcDogMCwgbGltaXQ6IDIwMFxyXG5cdFx0fSk7XHJcblx0Y2hpbGRyZW46IFtcclxuXHRcdHtcclxuXHRcdFx0ZmluZDogKGluc3RhbmNlLCBwb3N0KS0+XHJcblx0XHRcdFx0ZGIuZmxvd3MuZmluZCh7X2lkOiBpbnN0YW5jZS5mbG93fSwge2ZpZWxkczoge25hbWU6IDEsIHNwYWNlOiAxfX0pO1xyXG5cdFx0fVxyXG5cdF1cclxuIyMjXHJcblxyXG4jIyNcclxuTWV0ZW9yLnB1Ymxpc2ggJ215X2luYm94X2luc3RhbmNlcycsIChzcGFjZUlkKS0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHNlbGYgPSB0aGlzO1xyXG5cclxuXHQjXHR1c2VyU3BhY2VJZHMgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcclxuXHQjXHRcdHVzZXI6IHRoaXMudXNlcklkLFxyXG5cdCNcdFx0dXNlcl9hY2NlcHRlZDogdHJ1ZVxyXG5cdCNcdH0sIHtmaWVsZHM6IHtzcGFjZTogMX19KS5mZXRjaCgpLmdldEVhY2goXCJzcGFjZVwiKTtcclxuXHJcblx0cXVlcnkgPSB7c3BhY2U6IHNwYWNlSWR9XHJcblxyXG5cdHF1ZXJ5LiRvciA9IFt7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dXHJcblxyXG5cdGZpZWxkcyA9IHtcclxuXHRcdHNwYWNlOiAxLFxyXG4jXHRcdGFwcGxpY2FudF9uYW1lOiAxLFxyXG5cdFx0ZmxvdzogMSxcclxuXHRcdGluYm94X3VzZXJzOiAxLFxyXG5cdFx0Y2NfdXNlcnM6IDEsXHJcblx0XHRzdGF0ZTogMSxcclxuI1x0XHRuYW1lOiAxLFxyXG4jXHRcdG1vZGlmaWVkOiAxLFxyXG5cdFx0Zm9ybTogMVxyXG5cdH1cclxuXHJcblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtzb3J0OiB7bW9kaWZpZWQ6IC0xfSwgc2tpcDogMCwgbGltaXQ6IDUwMH0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGFkZGVkOiAoaWQpLT5cclxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXHJcblx0XHRcdHJldHVybiBpZiBub3QgaW5zdGFuY2VcclxuXHRcdFx0aW5zdGFuY2UuaXNfY2MgPSBpbnN0YW5jZS5jY191c2Vycz8uaW5jbHVkZXMoc2VsZi51c2VySWQpIHx8IGZhbHNlXHJcblx0XHRcdGRlbGV0ZSBpbnN0YW5jZS5jY191c2Vyc1xyXG5cdFx0XHRzZWxmLmFkZGVkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSlcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGlkfSwge2ZpZWxkczogZmllbGRzfSlcclxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2VcclxuXHRcdFx0ZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzXHJcblx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xyXG5cdFx0cmVtb3ZlZDogKGlkKS0+XHJcblx0XHRcdHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XHJcblx0fVxyXG5cclxuXHRzZWxmLnJlYWR5KCk7XHJcblx0c2VsZi5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKVxyXG4jIyNcclxuXHJcbl9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlID0gKHNwYWNlSWQsIHVzZXJJZCwgX2l0ZW1zLCBjYWxsYmFjayktPlxyXG5cdGRiLmluc3RhbmNlcy5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKFtcclxuXHRcdHtcclxuXHRcdFx0JG1hdGNoOiB7XHJcblx0XHRcdFx0c3BhY2U6IHNwYWNlSWQsXHJcblx0XHRcdFx0JG9yOiBbe2luYm94X3VzZXJzOiB1c2VySWR9LCB7Y2NfdXNlcnM6IHVzZXJJZH1dXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdCRncm91cDoge1xyXG5cdFx0XHRcdF9pZDoge2Zsb3c6IFwiJGZsb3dcIiwgY2F0ZWdvcnk6IFwiJGNhdGVnb3J5XCJ9LCBjb3VudDogeyRzdW06IDF9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRdKS50b0FycmF5IChlcnIsIGRhdGEpLT5cclxuXHRcdGlmIGVyclxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoZXJyKVxyXG5cclxuXHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxyXG5cdFx0XHRfaXRlbXMucHVzaCBkb2NcclxuXHJcblx0XHRpZiBjYWxsYmFjayAmJiBfLmlzRnVuY3Rpb24oY2FsbGJhY2spXHJcblx0XHRcdGNhbGxiYWNrKClcclxuXHRcdHJldHVyblxyXG5cclxuX2FzeW5jX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKF9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlKVxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ215X2luYm94X2Zsb3dfaW5zdGFuY2VzX2NvdW50JywgKHNwYWNlSWQpLT5cclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHNlbGYgPSB0aGlzO1xyXG5cclxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2VJZH1cclxuXHJcblx0cXVlcnkuJG9yID0gW3tpbmJveF91c2VyczogdGhpcy51c2VySWR9LCB7Y2NfdXNlcnM6IHRoaXMudXNlcklkfV1cclxuXHJcblx0ZGF0YSA9IFtdICAj5pWw5o2u5qC85byP77yaW3tfaWQ6Zmxvd0lkLCBjb3VudDog5b6F5Yqe5pWw6YePfSwge19pZDpmbG93SWQyLCBjb3VudDog5b6F5Yqe5pWw6YePMn1dXHJcblx0X2FzeW5jX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUoc3BhY2VJZCwgc2VsZi51c2VySWQsIGRhdGEpXHJcblxyXG5cdF9mbG93c0RhdGEgPSBbXVxyXG5cclxuXHRfLmVhY2ggZGF0YSwgKGRhdGFJdGVtKS0+XHJcblx0XHRfZmxvd3NEYXRhLnB1c2goe19pZDogZGF0YUl0ZW0uX2lkLmZsb3csIGNhdGVnb3J5OiBkYXRhSXRlbS5faWQuY2F0ZWdvcnksIGNvdW50OiBkYXRhSXRlbS5jb3VudH0pXHJcblxyXG5cdHNlbGYuYWRkZWQoXCJmbG93X2luc3RhbmNlc1wiLCBzcGFjZUlkLCB7Zmxvd3M6IF9mbG93c0RhdGF9KTtcclxuXHJcblx0X2NoYW5nZURhdGEgPSAoZG9jLCBhY3Rpb24pLT5cclxuXHRcdGZsb3dfaW5zdGFuY2UgPSBfLmZpbmQgX2Zsb3dzRGF0YSwgKGYpLT5cclxuXHRcdFx0cmV0dXJuIGYuX2lkID09IGRvYy5mbG93XHJcblx0XHRpZiBmbG93X2luc3RhbmNlXHJcblx0XHRcdGlmIGFjdGlvbiA9PSBcImFkZGVkXCJcclxuXHRcdFx0XHRmbG93X2luc3RhbmNlLmNvdW50KytcclxuXHRcdFx0ZWxzZSBpZiBhY3Rpb24gPT0gXCJyZW1vdmVkXCJcclxuXHRcdFx0XHRmbG93X2luc3RhbmNlLmNvdW50LS1cclxuXHRcdGVsc2UgaWYgYWN0aW9uID09IFwiYWRkZWRcIlxyXG5cdFx0XHRfZmxvd3NEYXRhLnB1c2gge19pZDogZG9jLmZsb3csIGNhdGVnb3J5OiBkb2MuY2F0ZWdvcnksIGNvdW50OiAxfVxyXG5cclxuXHRcdHNlbGYuY2hhbmdlZChcImZsb3dfaW5zdGFuY2VzXCIsIHNwYWNlSWQsIHtmbG93czogX2Zsb3dzRGF0YX0pO1xyXG5cclxuXHRfaW5pdCA9IHRydWVcclxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge2ZpZWxkczoge19pZDogMSwgaW5ib3hfdXNlcnM6IDEsIGNjX3VzZXJzOiAxLCBmbG93OiAxLCBjYXRlZ29yeTogMX19KS5vYnNlcnZlIHtcclxuXHRcdGFkZGVkOiAoZG9jKS0+XHJcblx0XHRcdGlmICFfaW5pdFxyXG5cdFx0XHRcdF9jaGFuZ2VEYXRhKGRvYywgXCJhZGRlZFwiKVxyXG5cdFx0cmVtb3ZlZDogKGRvYyktPlxyXG5cdFx0XHRpZiAhX2luaXRcclxuXHRcdFx0XHRfY2hhbmdlRGF0YShkb2MsIFwicmVtb3ZlZFwiKVxyXG5cdH1cclxuXHRfaW5pdCA9IGZhbHNlXHJcblxyXG5cdHNlbGYucmVhZHkoKTtcclxuXHRzZWxmLm9uU3RvcCAoKS0+XHJcblx0XHRoYW5kbGUuc3RvcCgpIiwiXG4vKlxuTWV0ZW9yLnB1Ymxpc2hDb21wb3NpdGUgXCJ1c2VyX2luYm94X2luc3RhbmNlXCIsICgpLT5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHVzZXJTcGFjZUlkcyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuXHRcdHVzZXI6IHRoaXMudXNlcklkLFxuXHRcdHVzZXJfYWNjZXB0ZWQ6IHRydWVcblx0fSwge2ZpZWxkczoge3NwYWNlOiAxfX0pLmZldGNoKCkuZ2V0RWFjaChcInNwYWNlXCIpO1xuXHRxdWVyeSA9IHtzcGFjZTogeyRpbjogdXNlclNwYWNlSWRzfX1cblxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxuXG5cdGZpbmQ6IC0+XG5cdFx0ZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRzcGFjZTogMSxcblx0XHRcdFx0YXBwbGljYW50X25hbWU6IDEsXG5cdFx0XHRcdGZsb3c6IDEsXG5cdFx0XHRcdGluYm94X3VzZXJzOiAxLFxuXHRcdFx0XHRjY191c2VyczogMSxcblx0XHRcdFx0c3RhdGU6IDEsXG5cdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHRcdG1vZGlmaWVkOiAxLFxuXHRcdFx0XHRmb3JtOiAxXG5cdFx0XHR9LCBzb3J0OiB7bW9kaWZpZWQ6IC0xfSwgc2tpcDogMCwgbGltaXQ6IDIwMFxuXHRcdH0pO1xuXHRjaGlsZHJlbjogW1xuXHRcdHtcblx0XHRcdGZpbmQ6IChpbnN0YW5jZSwgcG9zdCktPlxuXHRcdFx0XHRkYi5mbG93cy5maW5kKHtfaWQ6IGluc3RhbmNlLmZsb3d9LCB7ZmllbGRzOiB7bmFtZTogMSwgc3BhY2U6IDF9fSk7XG5cdFx0fVxuXHRdXG4gKi9cblxuLypcbk1ldGVvci5wdWJsaXNoICdteV9pbmJveF9pbnN0YW5jZXMnLCAoc3BhY2VJZCktPlxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0c2VsZiA9IHRoaXM7XG5cblx0ICpcdHVzZXJTcGFjZUlkcyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuXHQgKlx0XHR1c2VyOiB0aGlzLnVzZXJJZCxcblx0ICpcdFx0dXNlcl9hY2NlcHRlZDogdHJ1ZVxuXHQgKlx0fSwge2ZpZWxkczoge3NwYWNlOiAxfX0pLmZldGNoKCkuZ2V0RWFjaChcInNwYWNlXCIpO1xuXG5cdHF1ZXJ5ID0ge3NwYWNlOiBzcGFjZUlkfVxuXG5cdHF1ZXJ5LiRvciA9IFt7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dXG5cblx0ZmllbGRzID0ge1xuXHRcdHNwYWNlOiAxLFxuICpcdFx0YXBwbGljYW50X25hbWU6IDEsXG5cdFx0ZmxvdzogMSxcblx0XHRpbmJveF91c2VyczogMSxcblx0XHRjY191c2VyczogMSxcblx0XHRzdGF0ZTogMSxcbiAqXHRcdG5hbWU6IDEsXG4gKlx0XHRtb2RpZmllZDogMSxcblx0XHRmb3JtOiAxXG5cdH1cblxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge3NvcnQ6IHttb2RpZmllZDogLTF9LCBza2lwOiAwLCBsaW1pdDogNTAwfSkub2JzZXJ2ZUNoYW5nZXMge1xuXHRcdGFkZGVkOiAoaWQpLT5cblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxuXHRcdFx0aW5zdGFuY2UuaXNfY2MgPSBpbnN0YW5jZS5jY191c2Vycz8uaW5jbHVkZXMoc2VsZi51c2VySWQpIHx8IGZhbHNlXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcblx0XHRcdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKVxuXHRcdGNoYW5nZWQ6IChpZCktPlxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXG5cdFx0XHRyZXR1cm4gaWYgbm90IGluc3RhbmNlXG5cdFx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2Vcblx0XHRcdGRlbGV0ZSBpbnN0YW5jZS5jY191c2Vyc1xuXHRcdFx0c2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSk7XG5cdFx0cmVtb3ZlZDogKGlkKS0+XG5cdFx0XHRzZWxmLnJlbW92ZWQoXCJpbnN0YW5jZXNcIiwgaWQpO1xuXHR9XG5cblx0c2VsZi5yZWFkeSgpO1xuXHRzZWxmLm9uU3RvcCAoKS0+XG5cdFx0aGFuZGxlLnN0b3AoKVxuICovXG52YXIgX2FzeW5jX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUsIF9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlO1xuXG5fZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSA9IGZ1bmN0aW9uKHNwYWNlSWQsIHVzZXJJZCwgX2l0ZW1zLCBjYWxsYmFjaykge1xuICByZXR1cm4gZGIuaW5zdGFuY2VzLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUoW1xuICAgIHtcbiAgICAgICRtYXRjaDoge1xuICAgICAgICBzcGFjZTogc3BhY2VJZCxcbiAgICAgICAgJG9yOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5ib3hfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGNjX3VzZXJzOiB1c2VySWRcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICAkZ3JvdXA6IHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgZmxvdzogXCIkZmxvd1wiLFxuICAgICAgICAgIGNhdGVnb3J5OiBcIiRjYXRlZ29yeVwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvdW50OiB7XG4gICAgICAgICAgJHN1bTogMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBdKS50b0FycmF5KGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZG9jKSB7XG4gICAgICByZXR1cm4gX2l0ZW1zLnB1c2goZG9jKTtcbiAgICB9KTtcbiAgICBpZiAoY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH0pO1xufTtcblxuX2FzeW5jX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKF9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlKTtcblxuTWV0ZW9yLnB1Ymxpc2goJ215X2luYm94X2Zsb3dfaW5zdGFuY2VzX2NvdW50JywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICB2YXIgX2NoYW5nZURhdGEsIF9mbG93c0RhdGEsIF9pbml0LCBkYXRhLCBoYW5kbGUsIHF1ZXJ5LCBzZWxmO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgcXVlcnkgPSB7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfTtcbiAgcXVlcnkuJG9yID0gW1xuICAgIHtcbiAgICAgIGluYm94X3VzZXJzOiB0aGlzLnVzZXJJZFxuICAgIH0sIHtcbiAgICAgIGNjX3VzZXJzOiB0aGlzLnVzZXJJZFxuICAgIH1cbiAgXTtcbiAgZGF0YSA9IFtdO1xuICBfYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZShzcGFjZUlkLCBzZWxmLnVzZXJJZCwgZGF0YSk7XG4gIF9mbG93c0RhdGEgPSBbXTtcbiAgXy5lYWNoKGRhdGEsIGZ1bmN0aW9uKGRhdGFJdGVtKSB7XG4gICAgcmV0dXJuIF9mbG93c0RhdGEucHVzaCh7XG4gICAgICBfaWQ6IGRhdGFJdGVtLl9pZC5mbG93LFxuICAgICAgY2F0ZWdvcnk6IGRhdGFJdGVtLl9pZC5jYXRlZ29yeSxcbiAgICAgIGNvdW50OiBkYXRhSXRlbS5jb3VudFxuICAgIH0pO1xuICB9KTtcbiAgc2VsZi5hZGRlZChcImZsb3dfaW5zdGFuY2VzXCIsIHNwYWNlSWQsIHtcbiAgICBmbG93czogX2Zsb3dzRGF0YVxuICB9KTtcbiAgX2NoYW5nZURhdGEgPSBmdW5jdGlvbihkb2MsIGFjdGlvbikge1xuICAgIHZhciBmbG93X2luc3RhbmNlO1xuICAgIGZsb3dfaW5zdGFuY2UgPSBfLmZpbmQoX2Zsb3dzRGF0YSwgZnVuY3Rpb24oZikge1xuICAgICAgcmV0dXJuIGYuX2lkID09PSBkb2MuZmxvdztcbiAgICB9KTtcbiAgICBpZiAoZmxvd19pbnN0YW5jZSkge1xuICAgICAgaWYgKGFjdGlvbiA9PT0gXCJhZGRlZFwiKSB7XG4gICAgICAgIGZsb3dfaW5zdGFuY2UuY291bnQrKztcbiAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlbW92ZWRcIikge1xuICAgICAgICBmbG93X2luc3RhbmNlLmNvdW50LS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwiYWRkZWRcIikge1xuICAgICAgX2Zsb3dzRGF0YS5wdXNoKHtcbiAgICAgICAgX2lkOiBkb2MuZmxvdyxcbiAgICAgICAgY2F0ZWdvcnk6IGRvYy5jYXRlZ29yeSxcbiAgICAgICAgY291bnQ6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiZmxvd19pbnN0YW5jZXNcIiwgc3BhY2VJZCwge1xuICAgICAgZmxvd3M6IF9mbG93c0RhdGFcbiAgICB9KTtcbiAgfTtcbiAgX2luaXQgPSB0cnVlO1xuICBoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxLFxuICAgICAgaW5ib3hfdXNlcnM6IDEsXG4gICAgICBjY191c2VyczogMSxcbiAgICAgIGZsb3c6IDEsXG4gICAgICBjYXRlZ29yeTogMVxuICAgIH1cbiAgfSkub2JzZXJ2ZSh7XG4gICAgYWRkZWQ6IGZ1bmN0aW9uKGRvYykge1xuICAgICAgaWYgKCFfaW5pdCkge1xuICAgICAgICByZXR1cm4gX2NoYW5nZURhdGEoZG9jLCBcImFkZGVkXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlZDogZnVuY3Rpb24oZG9jKSB7XG4gICAgICBpZiAoIV9pbml0KSB7XG4gICAgICAgIHJldHVybiBfY2hhbmdlRGF0YShkb2MsIFwicmVtb3ZlZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBfaW5pdCA9IGZhbHNlO1xuICBzZWxmLnJlYWR5KCk7XG4gIHJldHVybiBzZWxmLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcbiIsIlxyXG5NZXRlb3IucHVibGlzaCAnZmxvd19tYWluX2F0dGFjaF90ZW1wbGF0ZScsIChzcGFjZUlkLCBmbG93SWQpLT5cclxuXHRjaGVjayhzcGFjZUlkLCBTdHJpbmcpXHJcblx0Y2hlY2soZmxvd0lkLCBTdHJpbmcpXHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3Mgc3BhY2VJZCAmJiBmbG93SWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0cmV0dXJuIENyZWF0b3IuZ2V0Q29sbGVjdGlvbignY21zX2ZpbGVzJykuZmluZCh7IHNwYWNlOiBzcGFjZUlkLCAncGFyZW50Lm8nOiAnZmxvd3MnLCAncGFyZW50Lmlkcyc6IGZsb3dJZCwgIG5hbWU6ICfmraPmlocuZG9jeCcgfSlcclxuIiwiTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfbWFpbl9hdHRhY2hfdGVtcGxhdGUnLCBmdW5jdGlvbihzcGFjZUlkLCBmbG93SWQpIHtcbiAgY2hlY2soc3BhY2VJZCwgU3RyaW5nKTtcbiAgY2hlY2soZmxvd0lkLCBTdHJpbmcpO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIShzcGFjZUlkICYmIGZsb3dJZCkpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBDcmVhdG9yLmdldENvbGxlY3Rpb24oJ2Ntc19maWxlcycpLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkLFxuICAgICdwYXJlbnQubyc6ICdmbG93cycsXG4gICAgJ3BhcmVudC5pZHMnOiBmbG93SWQsXG4gICAgbmFtZTogJ+ato+aWhy5kb2N4J1xuICB9KTtcbn0pO1xuIiwid29ya2Zsb3dUZW1wbGF0ZSA9IHt9XHJcblxyXG4j5Y+v55So5q2k6ISa5pys5LuO5qih5p2/5bel5L2c5Yy65YGa5om56YeP5a+85Ye677yaXHJcbiPkvb/nlKjnrqHnkIblkZjotKbmiLfnmbvlvZXlkI7vvIzov5vlhaVGbG93TW9kdWxlc++8jOWcqOaOp+WItuWPsOaJp+ihjOS7peS4i+iEmuacrOWNs+WPr1xyXG4jZGIuZm9ybXMuZmluZCh7c3RhdGU6XCJlbmFibGVkXCJ9KS5mb3JFYWNoKGZ1bmN0aW9uKGZvcm0pe3dpbmRvdy5vcGVuKE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS93b3JrZmxvdy9leHBvcnQvZm9ybT9mb3JtPVwiK2Zvcm0uX2lkKSl9KVxyXG53b3JrZmxvd1RlbXBsYXRlW1wiZW5cIl0gPVtdXHJcblxyXG4j5Y+v55So5q2k6ISa5pys5LuO5qih5p2/5bel5L2c5Yy65YGa5om56YeP5a+85Ye677yaXHJcbiPkvb/nlKjnrqHnkIblkZjotKbmiLfnmbvlvZXlkI7vvIzov5vlhaXmqKHmnb/kuJPljLrvvIzlnKjmjqfliLblj7DmiafooYzku6XkuIvohJrmnKzljbPlj69cclxuI2RiLmZvcm1zLmZpbmQoe3N0YXRlOlwiZW5hYmxlZFwifSkuZm9yRWFjaChmdW5jdGlvbihmb3JtKXt3aW5kb3cub3BlbihNZXRlb3IuYWJzb2x1dGVVcmwoXCJhcGkvd29ya2Zsb3cvZXhwb3J0L2Zvcm0/Zm9ybT1cIitmb3JtLl9pZCkpfSlcclxud29ya2Zsb3dUZW1wbGF0ZVtcInpoLUNOXCJdID1bXVxyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdGZzID0gcmVxdWlyZSgnZnMnKVxyXG5cdHBhdGggPSByZXF1aXJlKCdwYXRoJylcclxuXHRtaW1lID0gcmVxdWlyZSgnbWltZScpXHJcblx0cmVhZEZpbGVMaXN0ID0gKHBhdGhEaXIsIGZpbGVzTGlzdCktPlxyXG5cdFx0ZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhwYXRoRGlyKVxyXG5cdFx0ZmlsZXMuZm9yRWFjaCAobmFtZSwgaW5kZXgpLT5cclxuXHRcdFx0c3RhdCA9IGZzLnN0YXRTeW5jKHBhdGguam9pbihwYXRoRGlyLCBuYW1lKSlcclxuXHRcdFx0aWYgc3RhdC5pc0RpcmVjdG9yeSgpXHJcblx0XHRcdFx0IyDpgJLlvZLor7vlj5bmlofku7ZcclxuXHRcdFx0XHRyZWFkRmlsZUxpc3QocGF0aC5qb2luKHBhdGhEaXIsIG5hbWUpLCBmaWxlc0xpc3QpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRvYmogPSB7fVxyXG5cdFx0XHRcdG9iai5wYXRoID0gcGF0aERpclxyXG5cdFx0XHRcdG9iai5uYW1lID0gbmFtZVxyXG5cdFx0XHRcdGZpbGVzTGlzdC5wdXNoKG9iailcclxuXHJcblx0I+iOt+WPlnpoLWNu5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XHJcblx0ZmlsZXNMaXN0X2NuID0gW11cclxuXHRwYXRoX2NuID0gTWV0ZW9yLnNldHRpbmdzLndvcmtmbG93VGVtcGxhdGVzPy5wYXRoX2NuXHJcblx0aWYgcGF0aF9jblxyXG5cdFx0YWJzb2x1dGVfcGF0aF9jbiA9IHBhdGgucmVzb2x2ZShwYXRoX2NuKVxyXG5cdFx0Y29uc29sZS5sb2cgXCJhYnNvbHV0ZV9wYXRoX2NuXCIsIGFic29sdXRlX3BhdGhfY25cclxuXHRcdGlmIGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVfcGF0aF9jbilcclxuXHRcdFx0cmVhZEZpbGVMaXN0KGFic29sdXRlX3BhdGhfY24sIGZpbGVzTGlzdF9jbilcclxuXHRcdFx0ZmlsZXNMaXN0X2NuLmZvckVhY2ggKGZpbGUpLT5cclxuXHRcdFx0XHR0cnlcclxuXHRcdFx0XHRcdGlmIG1pbWUuZ2V0VHlwZShmaWxlLm5hbWUpIGlzIFwiYXBwbGljYXRpb24vanNvblwiXHJcblx0XHRcdFx0XHRcdGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKSwgJ3V0ZjgnKVxyXG5cdFx0XHRcdFx0XHR3b3JrZmxvd1RlbXBsYXRlW1wiemgtQ05cIl0ucHVzaChKU09OLnBhcnNlKGRhdGEpKVxyXG5cdFx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IgXCLojrflj5Z6aC1jbuaWh+S7tuWkueS4i+eahOaJgOacieaWh+S7tlwiLCBwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHJcblx0I+iOt+WPlmVuLXVz5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XHJcblx0ZmlsZXNMaXN0X3VzID0gW11cclxuXHRwYXRoX3VzID0gTWV0ZW9yLnNldHRpbmdzLndvcmtmbG93VGVtcGxhdGVzPy5wYXRoX3VzXHJcblx0aWYgcGF0aF91c1xyXG5cdFx0YWJzb2x1dGVfcGF0aF91cyA9IHBhdGgucmVzb2x2ZShwYXRoX3VzKVxyXG5cdFx0Y29uc29sZS5sb2cgXCJhYnNvbHV0ZV9wYXRoX3VzXCIsIGFic29sdXRlX3BhdGhfdXNcclxuXHRcdGlmIGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVfcGF0aF91cylcclxuXHRcdFx0cmVhZEZpbGVMaXN0KGFic29sdXRlX3BhdGhfdXMsIGZpbGVzTGlzdF91cylcclxuXHRcdFx0ZmlsZXNMaXN0X3VzLmZvckVhY2ggKGZpbGUpLT5cclxuXHRcdFx0XHR0cnlcclxuXHRcdFx0XHRcdGlmIG1pbWUuZ2V0VHlwZShmaWxlLm5hbWUpIGlzIFwiYXBwbGljYXRpb24vanNvblwiXHJcblx0XHRcdFx0XHRcdGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKSwgJ3V0ZjgnKVxyXG5cdFx0XHRcdFx0XHR3b3JrZmxvd1RlbXBsYXRlW1wiZW5cIl0ucHVzaChKU09OLnBhcnNlKGRhdGEpKVxyXG5cdFx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IgXCLojrflj5Zlbi11c+aWh+S7tuWkueS4i+eahOaJgOacieaWh+S7tlwiLCBwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRcdFxyXG5cclxuXHJcbiIsIiAgICAgICAgICAgICAgICAgICAgIFxuXG53b3JrZmxvd1RlbXBsYXRlID0ge307XG5cbndvcmtmbG93VGVtcGxhdGVbXCJlblwiXSA9IFtdO1xuXG53b3JrZmxvd1RlbXBsYXRlW1wiemgtQ05cIl0gPSBbXTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHZhciBhYnNvbHV0ZV9wYXRoX2NuLCBhYnNvbHV0ZV9wYXRoX3VzLCBmaWxlc0xpc3RfY24sIGZpbGVzTGlzdF91cywgZnMsIG1pbWUsIHBhdGgsIHBhdGhfY24sIHBhdGhfdXMsIHJlYWRGaWxlTGlzdCwgcmVmLCByZWYxO1xuICBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gIG1pbWUgPSByZXF1aXJlKCdtaW1lJyk7XG4gIHJlYWRGaWxlTGlzdCA9IGZ1bmN0aW9uKHBhdGhEaXIsIGZpbGVzTGlzdCkge1xuICAgIHZhciBmaWxlcztcbiAgICBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKHBhdGhEaXIpO1xuICAgIHJldHVybiBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgb2JqLCBzdGF0O1xuICAgICAgc3RhdCA9IGZzLnN0YXRTeW5jKHBhdGguam9pbihwYXRoRGlyLCBuYW1lKSk7XG4gICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIHJldHVybiByZWFkRmlsZUxpc3QocGF0aC5qb2luKHBhdGhEaXIsIG5hbWUpLCBmaWxlc0xpc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqID0ge307XG4gICAgICAgIG9iai5wYXRoID0gcGF0aERpcjtcbiAgICAgICAgb2JqLm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gZmlsZXNMaXN0LnB1c2gob2JqKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgZmlsZXNMaXN0X2NuID0gW107XG4gIHBhdGhfY24gPSAocmVmID0gTWV0ZW9yLnNldHRpbmdzLndvcmtmbG93VGVtcGxhdGVzKSAhPSBudWxsID8gcmVmLnBhdGhfY24gOiB2b2lkIDA7XG4gIGlmIChwYXRoX2NuKSB7XG4gICAgYWJzb2x1dGVfcGF0aF9jbiA9IHBhdGgucmVzb2x2ZShwYXRoX2NuKTtcbiAgICBjb25zb2xlLmxvZyhcImFic29sdXRlX3BhdGhfY25cIiwgYWJzb2x1dGVfcGF0aF9jbik7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVfcGF0aF9jbikpIHtcbiAgICAgIHJlYWRGaWxlTGlzdChhYnNvbHV0ZV9wYXRoX2NuLCBmaWxlc0xpc3RfY24pO1xuICAgICAgZmlsZXNMaXN0X2NuLmZvckVhY2goZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICB2YXIgZGF0YSwgZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAobWltZS5nZXRUeXBlKGZpbGUubmFtZSkgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAgICAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSksICd1dGY4Jyk7XG4gICAgICAgICAgICByZXR1cm4gd29ya2Zsb3dUZW1wbGF0ZVtcInpoLUNOXCJdLnB1c2goSlNPTi5wYXJzZShkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwi6I635Y+WemgtY27mlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcIiwgcGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKSk7XG4gICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmaWxlc0xpc3RfdXMgPSBbXTtcbiAgcGF0aF91cyA9IChyZWYxID0gTWV0ZW9yLnNldHRpbmdzLndvcmtmbG93VGVtcGxhdGVzKSAhPSBudWxsID8gcmVmMS5wYXRoX3VzIDogdm9pZCAwO1xuICBpZiAocGF0aF91cykge1xuICAgIGFic29sdXRlX3BhdGhfdXMgPSBwYXRoLnJlc29sdmUocGF0aF91cyk7XG4gICAgY29uc29sZS5sb2coXCJhYnNvbHV0ZV9wYXRoX3VzXCIsIGFic29sdXRlX3BhdGhfdXMpO1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGFic29sdXRlX3BhdGhfdXMpKSB7XG4gICAgICByZWFkRmlsZUxpc3QoYWJzb2x1dGVfcGF0aF91cywgZmlsZXNMaXN0X3VzKTtcbiAgICAgIHJldHVybiBmaWxlc0xpc3RfdXMuZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgIHZhciBkYXRhLCBlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChtaW1lLmdldFR5cGUoZmlsZS5uYW1lKSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgICAgICAgIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKSwgJ3V0ZjgnKTtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZmxvd1RlbXBsYXRlW1wiZW5cIl0ucHVzaChKU09OLnBhcnNlKGRhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLojrflj5Zlbi11c+aWh+S7tuWkueS4i+eahOaJgOacieaWh+S7tlwiLCBwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpKTtcbiAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcbiIsIiMjI1xyXG4qICAgICogICAgKiAgICAqICAgICogICAgKlxyXG7ilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrFxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIHxcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJQgZGF5IG9mIHdlZWsgKDAgLSA3KSAoMCBvciA3IGlzIFN1bilcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgCBtb250aCAoMSAtIDEyKVxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgZGF5IG9mIG1vbnRoICgxIC0gMzEpXHJcbuKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGhvdXIgKDAgLSAyMylcclxu4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBtaW51dGUgKDAgLSA1OSlcclxu4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIHNlY29uZCAoMCAtIDU5LCBPUFRJT05BTClcclxuIyMjXHJcbk1ldGVvci5zdGFydHVwIC0+XHJcblx0aWYgTWV0ZW9yLnNldHRpbmdzLmNyb24/LmF1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvblxyXG5cdFx0c2NoZWR1bGUgPSByZXF1aXJlKCdub2RlLXNjaGVkdWxlJylcclxuXHRcdCMg5a6a5pe25omn6KGM5ZCM5q2lXHJcblx0XHRydWxlID0gTWV0ZW9yLnNldHRpbmdzLmNyb24uYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uXHJcblx0XHRnb19uZXh0ID0gdHJ1ZVxyXG5cdFx0c2NoZWR1bGUuc2NoZWR1bGVKb2IgcnVsZSwgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCAoKS0+XHJcblx0XHRcdHRyeVxyXG5cdFx0XHRcdGlmICFnb19uZXh0XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRnb19uZXh0ID0gZmFsc2VcclxuXHRcdFx0XHRjb25zb2xlLnRpbWUgJ2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbidcclxuXHJcblx0XHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHJcblx0XHRcdFx0IyDlsIblp5TmiZjop4TliJnorr7nva7kuLrkuI3lj6/nlKhcclxuXHRcdFx0XHRkYi5wcm9jZXNzX2RlbGVnYXRpb25fcnVsZXMudXBkYXRlKHsgZW5hYmxlZDogdHJ1ZSwgZW5kX3RpbWU6IHsgJGx0ZTogbm93IH0gfSwgeyAkc2V0OiB7IGVuYWJsZWQ6IGZhbHNlIH0gfSwgeyBtdWx0aSA6dHJ1ZSB9KVxyXG5cclxuXHRcdFx0XHRjb25zb2xlLnRpbWVFbmQgJ2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbidcclxuXHRcdFx0XHRnb19uZXh0ID0gdHJ1ZVxyXG5cclxuXHRcdFx0Y2F0Y2ggZVxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IgXCJBVVRPIEFVVE9fRklOSVNIX1BST0NFU1NfREVMRUdBVElPTiBFUlJPUjogXCJcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdFx0XHRnb19uZXh0ID0gdHJ1ZVxyXG5cclxuXHRcdCwgKGUpLT5cclxuXHRcdFx0Y29uc29sZS5sb2cgJ0ZhaWxlZCB0byBiaW5kIGVudmlyb25tZW50OiBhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24uY29mZmVlJ1xyXG5cdFx0XHRjb25zb2xlLmxvZyBlLnN0YWNrXHJcbiIsIlxuLypcbiogICAgKiAgICAqICAgICogICAgKiAgICAqXG7ilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICB8XG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlCBkYXkgb2Ygd2VlayAoMCAtIDcpICgwIG9yIDcgaXMgU3VuKVxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgCBtb250aCAoMSAtIDEyKVxu4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGRheSBvZiBtb250aCAoMSAtIDMxKVxu4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgaG91ciAoMCAtIDIzKVxu4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBtaW51dGUgKDAgLSA1OSlcbuKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBzZWNvbmQgKDAgLSA1OSwgT1BUSU9OQUwpXG4gKi9cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICB2YXIgZ29fbmV4dCwgcmVmLCBydWxlLCBzY2hlZHVsZTtcbiAgaWYgKChyZWYgPSBNZXRlb3Iuc2V0dGluZ3MuY3JvbikgIT0gbnVsbCA/IHJlZi5hdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24gOiB2b2lkIDApIHtcbiAgICBzY2hlZHVsZSA9IHJlcXVpcmUoJ25vZGUtc2NoZWR1bGUnKTtcbiAgICBydWxlID0gTWV0ZW9yLnNldHRpbmdzLmNyb24uYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uO1xuICAgIGdvX25leHQgPSB0cnVlO1xuICAgIHJldHVybiBzY2hlZHVsZS5zY2hlZHVsZUpvYihydWxlLCBNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUsIG5vdztcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZ29fbmV4dCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnb19uZXh0ID0gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUudGltZSgnYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uJyk7XG4gICAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgICBkYi5wcm9jZXNzX2RlbGVnYXRpb25fcnVsZXMudXBkYXRlKHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIGVuZF90aW1lOiB7XG4gICAgICAgICAgICAkbHRlOiBub3dcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbicpO1xuICAgICAgICByZXR1cm4gZ29fbmV4dCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBVVRPIEFVVE9fRklOSVNIX1BST0NFU1NfREVMRUdBVElPTiBFUlJPUjogXCIpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgICAgICByZXR1cm4gZ29fbmV4dCA9IHRydWU7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBiaW5kIGVudmlyb25tZW50OiBhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24uY29mZmVlJyk7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coZS5zdGFjayk7XG4gICAgfSkpO1xuICB9XG59KTtcbiIsIiMjI1xyXG4qICAgICogICAgKiAgICAqICAgICogICAgKlxyXG7ilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrFxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIHxcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJQgZGF5IG9mIHdlZWsgKDAgLSA3KSAoMCBvciA3IGlzIFN1bilcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgCBtb250aCAoMSAtIDEyKVxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgZGF5IG9mIG1vbnRoICgxIC0gMzEpXHJcbuKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGhvdXIgKDAgLSAyMylcclxu4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBtaW51dGUgKDAgLSA1OSlcclxu4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIHNlY29uZCAoMCAtIDU5LCBPUFRJT05BTClcclxuIyMjXHJcbk1ldGVvci5zdGFydHVwIC0+XHJcblx0aWYgTWV0ZW9yLnNldHRpbmdzLmNyb24/LnRpbWVvdXRfYXV0b19zdWJtaXRcclxuXHRcdHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpXHJcblx0XHQjIOWumuaXtuaJp+ihjOWQjOatpVxyXG5cdFx0cnVsZSA9IE1ldGVvci5zZXR0aW5ncy5jcm9uLnRpbWVvdXRfYXV0b19zdWJtaXRcclxuXHRcdGdvX25leHQgPSB0cnVlXHJcblx0XHRzY2hlZHVsZS5zY2hlZHVsZUpvYiBydWxlLCBNZXRlb3IuYmluZEVudmlyb25tZW50ICgpLT5cclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0aWYgIWdvX25leHRcclxuXHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdGdvX25leHQgPSBmYWxzZVxyXG5cdFx0XHRcdGNvbnNvbGUudGltZSAndGltZW91dF9hdXRvX3N1Ym1pdCdcclxuXHJcblx0XHRcdFx0dXVmbG93TWFuYWdlci50aW1lb3V0QXV0b1N1Ym1pdCgpXHJcblxyXG5cdFx0XHRcdGNvbnNvbGUudGltZUVuZCAndGltZW91dF9hdXRvX3N1Ym1pdCdcclxuXHRcdFx0XHRnb19uZXh0ID0gdHJ1ZVxyXG5cclxuXHRcdFx0Y2F0Y2ggZVxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IgXCJBVVRPIFRJTUVPVVRfQVVUT19TVUJNSVQgRVJST1I6IFwiXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRcdFx0Z29fbmV4dCA9IHRydWVcclxuXHJcblx0XHQsIChlKS0+XHJcblx0XHRcdGNvbnNvbGUubG9nICdGYWlsZWQgdG8gYmluZCBlbnZpcm9ubWVudDogdGltZW91dF9hdXRvX3N1Ym1pdC5jb2ZmZWUnXHJcblx0XHRcdGNvbnNvbGUubG9nIGUuc3RhY2tcclxuXHJcbk1ldGVvci5tZXRob2RzXHJcblx0dGltZW91dF9hdXRvX3N1Ym1pdDogKGluc19pZCktPlxyXG5cdFx0dXVmbG93TWFuYWdlci50aW1lb3V0QXV0b1N1Ym1pdChpbnNfaWQpXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cclxuXHJcbiIsIlxuLypcbiogICAgKiAgICAqICAgICogICAgKiAgICAqXG7ilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICB8XG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlCBkYXkgb2Ygd2VlayAoMCAtIDcpICgwIG9yIDcgaXMgU3VuKVxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgCBtb250aCAoMSAtIDEyKVxu4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGRheSBvZiBtb250aCAoMSAtIDMxKVxu4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgaG91ciAoMCAtIDIzKVxu4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBtaW51dGUgKDAgLSA1OSlcbuKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBzZWNvbmQgKDAgLSA1OSwgT1BUSU9OQUwpXG4gKi9cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICB2YXIgZ29fbmV4dCwgcmVmLCBydWxlLCBzY2hlZHVsZTtcbiAgaWYgKChyZWYgPSBNZXRlb3Iuc2V0dGluZ3MuY3JvbikgIT0gbnVsbCA/IHJlZi50aW1lb3V0X2F1dG9fc3VibWl0IDogdm9pZCAwKSB7XG4gICAgc2NoZWR1bGUgPSByZXF1aXJlKCdub2RlLXNjaGVkdWxlJyk7XG4gICAgcnVsZSA9IE1ldGVvci5zZXR0aW5ncy5jcm9uLnRpbWVvdXRfYXV0b19zdWJtaXQ7XG4gICAgZ29fbmV4dCA9IHRydWU7XG4gICAgcmV0dXJuIHNjaGVkdWxlLnNjaGVkdWxlSm9iKHJ1bGUsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZ29fbmV4dCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnb19uZXh0ID0gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUudGltZSgndGltZW91dF9hdXRvX3N1Ym1pdCcpO1xuICAgICAgICB1dWZsb3dNYW5hZ2VyLnRpbWVvdXRBdXRvU3VibWl0KCk7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgndGltZW91dF9hdXRvX3N1Ym1pdCcpO1xuICAgICAgICByZXR1cm4gZ29fbmV4dCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBVVRPIFRJTUVPVVRfQVVUT19TVUJNSVQgRVJST1I6IFwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgICAgcmV0dXJuIGdvX25leHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gYmluZCBlbnZpcm9ubWVudDogdGltZW91dF9hdXRvX3N1Ym1pdC5jb2ZmZWUnKTtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlLnN0YWNrKTtcbiAgICB9KSk7XG4gIH1cbn0pO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHRpbWVvdXRfYXV0b19zdWJtaXQ6IGZ1bmN0aW9uKGluc19pZCkge1xuICAgIHV1Zmxvd01hbmFnZXIudGltZW91dEF1dG9TdWJtaXQoaW5zX2lkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iLCJNZXRlb3Iuc3RhcnR1cCAoKS0+XHJcblx0VGFidWxhclRhYmxlcy5yZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyID0gbmV3IFRhYnVsYXIuVGFibGVcclxuXHRcdG5hbWU6IFwicmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhclwiXHJcblx0XHRjb2xsZWN0aW9uOiBkYi5pbnN0YW5jZXNcclxuXHRcdGNvbHVtbnM6IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiX2lkXCIsXHJcblx0XHRcdFx0dGl0bGU6ICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInJldmVyc2VcIiBpZD1cInJldmVyc2VcIj4nLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2UsXHJcblx0XHRcdFx0d2lkdGg6ICcxcHgnLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aW5wdXQgPSAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwicmVsYXRlZC1pbnN0YW5jZXMtbGlzdC1jaGVja2JveFwiIG5hbWU9XCJyZWxhdGVkX2luc3RhbmNlc19pZHNcIiBpZD1cInJlbGF0ZWRfaW5zdGFuY2VzX2lkc1wiIHZhbHVlPVwiJyArIGRvYy5faWQgKyAnXCInXHJcblxyXG5cdFx0XHRcdFx0aWYgVGFidWxhclRhYmxlcy5yZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyLnJlbGF0ZWRfaW5zdGFuY2VzPy5pbmNsdWRlcyhkb2MuX2lkKVxyXG5cdFx0XHRcdFx0XHRpbnB1dCArPSBcIiBjaGVja2VkIFwiXHJcblxyXG5cdFx0XHRcdFx0aW5wdXQgKz0gXCI+XCJcclxuXHRcdFx0XHRcdHJldHVybiBpbnB1dFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJuYW1lXCIsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZSxcclxuXHRcdFx0XHR3aWR0aDogJzQ1JScsXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRocmVmID0gJyc7XHJcblx0XHRcdFx0XHRpZiBNZXRlb3IuaXNDbGllbnQgJiYgKFN0ZWVkb3MuaXNNb2JpbGUoKSB8fCBTdGVlZG9zLmlzQ29yZG92YSgpKVxyXG5cdFx0XHRcdFx0XHRocmVmID0gJydcclxuXHJcblx0XHRcdFx0XHRhYnNvbHV0ZSA9IGZhbHNlXHJcblxyXG5cdFx0XHRcdFx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdFx0XHRcdGFic29sdXRlID0gdGhpcy5hYnNvbHV0ZVxyXG5cdFx0XHRcdFx0aWYgYWJzb2x1dGVcclxuXHRcdFx0XHRcdFx0aHJlZiA9IE1ldGVvci5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiK2RvYy5zcGFjZStcIi92aWV3L3JlYWRvbmx5L1wiICsgZG9jLl9pZCArICc/aGlkZV90cmFjZXM9MCcpXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGhyZWYgPSBTdGVlZG9zLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIrZG9jLnNwYWNlK1wiL3ZpZXcvcmVhZG9ubHkvXCIgKyBkb2MuX2lkICsgJz9oaWRlX3RyYWNlcz0wJylcclxuXHRcdFx0XHRcdHJldHVybiBcIjxhIGRhdGEtaWQ9JyN7ZG9jLl9pZH0nIHRhcmdldD0nX2JsYW5rJyBocmVmPSdcIitocmVmK1wiJz5cIiArIGRvYy5uYW1lICsgXCI8L2E+XCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiYXBwbGljYW50X25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfbmFtZVwiKSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImZsb3dfbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJjdXJyZW50X3N0ZXBfbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpZiBkb2Muc3RhdGUgPT0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0XHRcdFx0XHRqdWRnZSA9IGRvYy5maW5hbF9kZWNpc2lvbiB8fCBcImFwcHJvdmVkXCJcclxuXHJcblx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZSA9IGRvYy5jdXJyZW50X3N0ZXBfbmFtZSB8fCAnJ1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBcIlwiXCJcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwic3RlcC1jdXJyZW50LXN0YXRlICN7anVkZ2V9XCI+I3tzdGVwX2N1cnJlbnRfbmFtZX08L2Rpdj5cclxuXHRcdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdH1cclxuXHRcdF1cclxuXHJcblx0XHRkb206IFwidHBcIixcclxuXHRcdGxlbmd0aENoYW5nZTogZmFsc2UsXHJcblx0XHRleHRyYUZpZWxkczogW1wic3RhdGVcIiwgXCJmaW5hbF9kZWNpc2lvblwiLCBcInNwYWNlXCIsIFwia2V5d29yZHNcIl0sXHJcblx0XHRwYWdlTGVuZ3RoOiAxMCxcclxuXHRcdGluZm86IGZhbHNlLFxyXG5cdFx0c2VhcmNoaW5nOiB0cnVlLFxyXG5cdFx0cmVzcG9uc2l2ZTpcclxuXHRcdFx0ZGV0YWlsczogZmFsc2VcclxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXHJcblx0XHRjaGFuZ2VTZWxlY3RvcjogKHNlbGVjdG9yLCB1c2VySWQpIC0+XHJcblx0XHRcdHVubGVzcyB1c2VySWRcclxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XHJcblxyXG5cdFx0XHRzcGFjZUlkID0gc2VsZWN0b3Iuc3BhY2VcclxuXHRcdFx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdFx0XHRpZiBzZWxlY3Rvcj8uJGFuZD8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0c3BhY2VJZCA9IHNlbGVjdG9yLiRhbmQuZ2V0UHJvcGVydHkoJ3NwYWNlJylbMF1cclxuXHRcdFx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XHJcblx0XHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoc3BhY2VJZClcclxuXHRcdFx0aWYgIXNwYWNlXHJcblx0XHRcdFx0c2VsZWN0b3Iuc3RhdGUgPSBcIm5vbmVcIlxyXG5cdFx0XHRpZiAhc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJJZClcclxuXHJcblx0XHRcdFx0Zmxvd19pZHMgPSBbXVxyXG5cdFx0XHRcdGN1clNwYWNlVXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdFx0c3BhY2U6IHNwYWNlSWQsXHJcblx0XHRcdFx0XHQndXNlcic6IHVzZXJJZFxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0aWYgY3VyU3BhY2VVc2VyXHJcblx0XHRcdFx0XHRvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcclxuXHRcdFx0XHRcdFx0X2lkOiB7XHJcblx0XHRcdFx0XHRcdFx0JGluOiBjdXJTcGFjZVVzZXIub3JnYW5pemF0aW9uc1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KS5mZXRjaCgpXHJcblx0XHRcdFx0XHRmbG93cyA9IGRiLmZsb3dzLmZpbmQoeyBzcGFjZTogc3BhY2VJZCB9KVxyXG5cdFx0XHRcdFx0Zmxvd3MuZm9yRWFjaCAoZmwpLT5cclxuXHRcdFx0XHRcdFx0aWYgV29ya2Zsb3dNYW5hZ2VyLmNhbk1vbml0b3IoZmwsIGN1clNwYWNlVXNlciwgb3JnYW5pemF0aW9ucykgfHwgV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGZsLCBjdXJTcGFjZVVzZXIsIG9yZ2FuaXphdGlvbnMpXHJcblx0XHRcdFx0XHRcdFx0Zmxvd19pZHMucHVzaChmbC5faWQpXHJcblxyXG5cdFx0XHRcdGlmIHNlbGVjdG9yPy4kYW5kPy5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHRzZWxlY3Rvci4kYW5kWzBdLiRvciA9IFt7c3VibWl0dGVyOiB1c2VySWR9LCB7YXBwbGljYW50OiB1c2VySWR9LCB7aW5ib3hfdXNlcnM6IHVzZXJJZH0sIHtvdXRib3hfdXNlcnM6IHVzZXJJZH0sXHJcblx0XHRcdFx0XHRcdFx0e2NjX3VzZXJzOiB1c2VySWR9LCB7IGZsb3c6IHsgJGluOiBmbG93X2lkcyB9IH1dXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0Xy5leHRlbmQgc2VsZWN0b3IsIHtcclxuXHRcdFx0XHRcdFx0JG9yOiBbe3N1Ym1pdHRlcjogdXNlcklkfSwge2FwcGxpY2FudDogdXNlcklkfSwge2luYm94X3VzZXJzOiB1c2VySWR9LCB7b3V0Ym94X3VzZXJzOiB1c2VySWR9LFxyXG5cdFx0XHRcdFx0XHRcdHtjY191c2VyczogdXNlcklkfSwgeyBmbG93OiB7ICRpbjogZmxvd19pZHMgfSB9XVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNlbGVjdG9yIiwiTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUYWJ1bGFyVGFibGVzLnJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIgPSBuZXcgVGFidWxhci5UYWJsZSh7XG4gICAgbmFtZTogXCJyZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyXCIsXG4gICAgY29sbGVjdGlvbjogZGIuaW5zdGFuY2VzLFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZGF0YTogXCJfaWRcIixcbiAgICAgICAgdGl0bGU6ICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInJldmVyc2VcIiBpZD1cInJldmVyc2VcIj4nLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxuICAgICAgICB3aWR0aDogJzFweCcsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIgaW5wdXQsIHJlZjtcbiAgICAgICAgICBpbnB1dCA9ICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJyZWxhdGVkLWluc3RhbmNlcy1saXN0LWNoZWNrYm94XCIgbmFtZT1cInJlbGF0ZWRfaW5zdGFuY2VzX2lkc1wiIGlkPVwicmVsYXRlZF9pbnN0YW5jZXNfaWRzXCIgdmFsdWU9XCInICsgZG9jLl9pZCArICdcIic7XG4gICAgICAgICAgaWYgKChyZWYgPSBUYWJ1bGFyVGFibGVzLnJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIucmVsYXRlZF9pbnN0YW5jZXMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoZG9jLl9pZCkgOiB2b2lkIDApIHtcbiAgICAgICAgICAgIGlucHV0ICs9IFwiIGNoZWNrZWQgXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlucHV0ICs9IFwiPlwiO1xuICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcIm5hbWVcIixcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6ICc0NSUnLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIGFic29sdXRlLCBocmVmO1xuICAgICAgICAgIGhyZWYgPSAnJztcbiAgICAgICAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50ICYmIChTdGVlZG9zLmlzTW9iaWxlKCkgfHwgU3RlZWRvcy5pc0NvcmRvdmEoKSkpIHtcbiAgICAgICAgICAgIGhyZWYgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgYWJzb2x1dGUgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICAgICAgICBhYnNvbHV0ZSA9IHRoaXMuYWJzb2x1dGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhYnNvbHV0ZSkge1xuICAgICAgICAgICAgaHJlZiA9IE1ldGVvci5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgZG9jLnNwYWNlICsgXCIvdmlldy9yZWFkb25seS9cIiArIGRvYy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHJlZiA9IFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGRvYy5zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBkb2MuX2lkICsgJz9oaWRlX3RyYWNlcz0wJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAoXCI8YSBkYXRhLWlkPSdcIiArIGRvYy5faWQgKyBcIicgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J1wiKSArIGhyZWYgKyBcIic+XCIgKyBkb2MubmFtZSArIFwiPC9hPlwiO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiYXBwbGljYW50X25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfYXBwbGljYW50X25hbWVcIiksXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJmbG93X25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfZmxvd1wiKSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImN1cnJlbnRfc3RlcF9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIganVkZ2UsIHN0ZXBfY3VycmVudF9uYW1lO1xuICAgICAgICAgIGlmIChkb2Muc3RhdGUgPT09IFwiY29tcGxldGVkXCIpIHtcbiAgICAgICAgICAgIGp1ZGdlID0gZG9jLmZpbmFsX2RlY2lzaW9uIHx8IFwiYXBwcm92ZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RlcF9jdXJyZW50X25hbWUgPSBkb2MuY3VycmVudF9zdGVwX25hbWUgfHwgJyc7XG4gICAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwic3RlcC1jdXJyZW50LXN0YXRlIFwiICsganVkZ2UgKyBcIlxcXCI+XCIgKyBzdGVwX2N1cnJlbnRfbmFtZSArIFwiPC9kaXY+XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdLFxuICAgIGRvbTogXCJ0cFwiLFxuICAgIGxlbmd0aENoYW5nZTogZmFsc2UsXG4gICAgZXh0cmFGaWVsZHM6IFtcInN0YXRlXCIsIFwiZmluYWxfZGVjaXNpb25cIiwgXCJzcGFjZVwiLCBcImtleXdvcmRzXCJdLFxuICAgIHBhZ2VMZW5ndGg6IDEwLFxuICAgIGluZm86IGZhbHNlLFxuICAgIHNlYXJjaGluZzogdHJ1ZSxcbiAgICByZXNwb25zaXZlOiB7XG4gICAgICBkZXRhaWxzOiBmYWxzZVxuICAgIH0sXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgICBjaGFuZ2VTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IsIHVzZXJJZCkge1xuICAgICAgdmFyIGN1clNwYWNlVXNlciwgZmxvd19pZHMsIGZsb3dzLCBvcmdhbml6YXRpb25zLCByZWYsIHJlZjEsIHNwYWNlLCBzcGFjZUlkO1xuICAgICAgaWYgKCF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfaWQ6IC0xXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzcGFjZUlkID0gc2VsZWN0b3Iuc3BhY2U7XG4gICAgICBpZiAoIXNwYWNlSWQpIHtcbiAgICAgICAgaWYgKChzZWxlY3RvciAhPSBudWxsID8gKHJlZiA9IHNlbGVjdG9yLiRhbmQpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgICBzcGFjZUlkID0gc2VsZWN0b3IuJGFuZC5nZXRQcm9wZXJ0eSgnc3BhY2UnKVswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFzcGFjZUlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX2lkOiAtMVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShzcGFjZUlkKTtcbiAgICAgIGlmICghc3BhY2UpIHtcbiAgICAgICAgc2VsZWN0b3Iuc3RhdGUgPSBcIm5vbmVcIjtcbiAgICAgIH1cbiAgICAgIGlmICghc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJJZCkpIHtcbiAgICAgICAgZmxvd19pZHMgPSBbXTtcbiAgICAgICAgY3VyU3BhY2VVc2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICAgICAgJ3VzZXInOiB1c2VySWRcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjdXJTcGFjZVVzZXIpIHtcbiAgICAgICAgICBvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICAgICAgICAgIF9pZDoge1xuICAgICAgICAgICAgICAkaW46IGN1clNwYWNlVXNlci5vcmdhbml6YXRpb25zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgICAgICBmbG93cyA9IGRiLmZsb3dzLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IHNwYWNlSWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmbG93cy5mb3JFYWNoKGZ1bmN0aW9uKGZsKSB7XG4gICAgICAgICAgICBpZiAoV29ya2Zsb3dNYW5hZ2VyLmNhbk1vbml0b3IoZmwsIGN1clNwYWNlVXNlciwgb3JnYW5pemF0aW9ucykgfHwgV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGZsLCBjdXJTcGFjZVVzZXIsIG9yZ2FuaXphdGlvbnMpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmbG93X2lkcy5wdXNoKGZsLl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzZWxlY3RvciAhPSBudWxsID8gKHJlZjEgPSBzZWxlY3Rvci4kYW5kKSAhPSBudWxsID8gcmVmMS5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICAgIHNlbGVjdG9yLiRhbmRbMF0uJG9yID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdWJtaXR0ZXI6IHVzZXJJZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhcHBsaWNhbnQ6IHVzZXJJZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBpbmJveF91c2VyczogdXNlcklkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIG91dGJveF91c2VyczogdXNlcklkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGNjX3VzZXJzOiB1c2VySWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZmxvdzoge1xuICAgICAgICAgICAgICAgICRpbjogZmxvd19pZHNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgXy5leHRlbmQoc2VsZWN0b3IsIHtcbiAgICAgICAgICAgICRvcjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3VibWl0dGVyOiB1c2VySWRcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGFwcGxpY2FudDogdXNlcklkXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBpbmJveF91c2VyczogdXNlcklkXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBvdXRib3hfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY2NfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZmxvdzoge1xuICAgICAgICAgICAgICAgICAgJGluOiBmbG93X2lkc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuICB9KTtcbn0pO1xuIiwiU3RlZWRvcy5zdWJzW1wiSW5zdGFuY2VUYWJ1bGFyXCJdID0gbmV3IFN1YnNNYW5hZ2VyKClcclxuXHJcblxyXG5faGFuZGxlTGlzdEZpZWxkcyA9IChmaWVsZHMpIC0+XHJcblx0aW5zX2ZpZWxkcyA9IG5ldyBBcnJheSgpO1xyXG5cclxuXHRmaWVsZHM/LmZvckVhY2ggKGYpLT5cclxuXHRcdGlmIGYudHlwZSA9PSAndGFibGUnXHJcblx0XHRcdGNvbnNvbGUubG9nICdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZSdcclxuXHRcdGVsc2UgaWYgZi50eXBlID09ICdzZWN0aW9uJ1xyXG5cdFx0XHRmPy5maWVsZHM/LmZvckVhY2ggKGYxKS0+XHJcblx0XHRcdFx0aW5zX2ZpZWxkcy5wdXNoIGYxXHJcblx0XHRlbHNlXHJcblx0XHRcdGluc19maWVsZHMucHVzaCBmXHJcblxyXG5cdHJldHVybiBpbnNfZmllbGRzXHJcblxyXG5cclxudXBkYXRlVGFidWxhclRpdGxlID0gKCktPlxyXG5cclxuIyDlpoLmnpxjb2x1bW5z5pyJ5Yqg5YeP77yM6K+35L+u5pS5VGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fdGFibGVDb2x1bW5zIOWHveaVsFxyXG5pbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyID0gKGZsb3dJZCwgZmllbGRzKS0+XHJcblx0b3B0aW9ucyA9IHtcclxuXHRcdG5hbWU6IFwiaW5zdGFuY2VzXCIsXHJcblx0XHRjb2xsZWN0aW9uOiBkYi5pbnN0YW5jZXMsXHJcblx0XHRwdWI6IFwiaW5zdGFuY2VfdGFidWxhclwiLFxyXG5cdFx0b25VbmxvYWQ6ICgpLT5cclxuXHRcdFx0TWV0ZW9yLnNldFRpbWVvdXQoVGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fdGFibGVDb2x1bW5zLCAxNTApXHJcblxyXG5cdFx0ZHJhd0NhbGxiYWNrOiAoc2V0dGluZ3MpLT5cclxuXHRcdFx0ZW1wdHlUZCA9ICQoXCIuZGF0YVRhYmxlc19lbXB0eVwiKVxyXG5cdFx0XHRpZiBlbXB0eVRkLmxlbmd0aFxyXG5cdFx0XHRcdGVtcHR5VGRbMF0uY29sU3BhbiA9IFwiNlwiXHJcblx0XHRcdGlmICFTdGVlZG9zLmlzTW9iaWxlKCkgJiYgIVN0ZWVkb3MuaXNQYWQoKVxyXG5cdFx0XHRcdE1ldGVvci5zZXRUaW1lb3V0KFRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucywgMTUwKVxyXG5cdFx0XHRcdCQoXCIuaW5zdGFuY2UtbGlzdFwiKS5zY3JvbGxUb3AoMCkucmVhZHkgLT5cclxuXHRcdFx0XHRcdCQoXCIuaW5zdGFuY2UtbGlzdFwiKS5wZXJmZWN0U2Nyb2xsYmFyKFwidXBkYXRlXCIpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHQkKFwiLmluc3RhbmNlLWxpc3RcIikuc2Nyb2xsVG9wKDApXHJcblxyXG5cdFx0XHR0aXRsZSA9IHQgXCJwYWdlcl9pbnB1dF9oaW50XCJcclxuXHRcdFx0ZWxsaXBzaXNMaW5rID0gc2V0dGluZ3Mub0luc3RhbmNlLnBhcmVudCgpLmZpbmQoJy5wYWdpbmdfbnVtYmVycyAucGFnaW5hdGlvbiAuZGlzYWJsZWQgYScpXHJcblx0XHRcdGVsbGlwc2lzTGluay5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmNzcyhcImN1cnNvclwiLCBcInBvaW50ZXJcIikuY2xpY2sgLT5cclxuXHRcdFx0XHRpZiAhJCh0aGlzKS5maW5kKCdpbnB1dCcpLmxlbmd0aFxyXG5cdFx0XHRcdFx0aW5wdXQgPSAkKCc8aW5wdXQgY2xhc3M9XCJwYWdpbmF0ZV9pbnB1dCBmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiB0eXBlPVwidGV4dFwiIHN0eWxlPVwiYm9yZGVyOiBub25lOyBwYWRkaW5nOjAgMnB4O1wiLz4nKVxyXG5cdFx0XHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpXHJcblx0XHRcdFx0XHRcdGlucHV0LmNzcyh7XHJcblx0XHRcdFx0XHRcdFx0d2lkdGg6XCI1MnB4XCJcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IFwiMjBweFwiXHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGlucHV0LmNzcyh7XHJcblx0XHRcdFx0XHRcdFx0d2lkdGg6XCI1MnB4XCJcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IFwiMTZweFwiXHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRpbnB1dC5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmF0dHIoXCJwbGFjZWhvbGRlclwiLCB0aXRsZSlcclxuXHRcdFx0XHRcdCQodGhpcykuZW1wdHkoKS5hcHBlbmQgaW5wdXRcclxuXHRcdFx0XHRcdGdvUGFnZSA9IChpbmRleCktPlxyXG5cdFx0XHRcdFx0XHRpZiBpbmRleCA+IDBcclxuXHRcdFx0XHRcdFx0XHRwYWdlcyA9IE1hdGguY2VpbChzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCkgLyBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgpXHJcblx0XHRcdFx0XHRcdFx0aWYgaW5kZXggPiBwYWdlc1xyXG5cdFx0XHRcdFx0XHRcdFx0IyDpobXnoIHotoXlh7rntKLlvJXml7bot7PovazliLDmnIDlkI7kuIDpobVcclxuXHRcdFx0XHRcdFx0XHRcdGluZGV4ID0gcGFnZXNcclxuXHRcdFx0XHRcdFx0XHRpbmRleC0tXHJcblx0XHRcdFx0XHRcdFx0c2V0dGluZ3Mub0luc3RhbmNlLkRhdGFUYWJsZSgpLnBhZ2UoaW5kZXgpLmRyYXcoJ3BhZ2UnKVxyXG5cdFx0XHRcdFx0aW5wdXQuYmx1ciAoZSktPlxyXG5cdFx0XHRcdFx0XHRjdXJyZW50UGFnZSA9ICQodGhpcykudmFsKClcclxuXHRcdFx0XHRcdFx0Z29QYWdlIGN1cnJlbnRQYWdlXHJcblx0XHRcdFx0XHRcdCQodGhpcykucGFyZW50KCkuaHRtbCAnLi4uJ1xyXG5cdFx0XHRcdFx0aW5wdXQua2V5ZG93biAoZSktPlxyXG5cdFx0XHRcdFx0XHRpZihlLmtleUNvZGUudG9TdHJpbmcoKSA9PSBcIjEzXCIpXHJcblx0XHRcdFx0XHRcdFx0Y3VycmVudFBhZ2UgPSAkKHRoaXMpLnZhbCgpXHJcblx0XHRcdFx0XHRcdFx0Z29QYWdlIGN1cnJlbnRQYWdlXHJcblxyXG5cdFx0Y3JlYXRlZFJvdzogKHJvdywgZGF0YSwgZGF0YUluZGV4KSAtPlxyXG5cdFx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0XHRpZiBkYXRhLl9pZCA9PSBGbG93Um91dGVyLmN1cnJlbnQoKS5wYXJhbXMuaW5zdGFuY2VJZFxyXG5cdFx0XHRcdFx0cm93LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic2VsZWN0ZWRcIilcclxuXHRcdGNvbHVtbnM6IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiX2lkXCIsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0bW9kaWZpZWRTdHJpbmcgPSBtb21lbnQoZG9jLm1vZGlmaWVkKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcclxuXHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGRvYy5tb2RpZmllZFxyXG5cdFx0XHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94JyAmJiBkb2Muc3RhdGUgIT0gJ2RyYWZ0J1xyXG5cdFx0XHRcdFx0XHRtb2RpZmllZCA9IGRvYy5zdGFydF9kYXRlIHx8IGRvYy5tb2RpZmllZFxyXG5cclxuXHRcdFx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdvdXRib3gnIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdtb25pdG9yJ1xyXG5cdFx0XHRcdFx0XHRtb2RpZmllZCA9IGRvYy5zdWJtaXRfZGF0ZSB8fCBkb2Muc3VibWl0X2RhdGVcclxuXHJcblx0XHRcdFx0XHRtb2RpZmllZEZyb21Ob3cgPSBTdGVlZG9zLm1vbWVudFJlYWN0aXZlRnJvbU5vdyhtb2RpZmllZCk7XHJcblx0XHRcdFx0XHRmbG93X25hbWUgPSBkb2MuZmxvd19uYW1lXHJcblx0XHRcdFx0XHRjY192aWV3ID0gXCJcIjtcclxuXHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIlwiO1xyXG5cdFx0XHRcdFx0IyDlvZPliY3nlKjmiLflnKhjYyB1c2Vy5Lit77yM5L2G5piv5LiN5ZyoaW5ib3ggdXNlcnPml7bmiY3mmL7npLon5Lyg6ZiFJ+aWh+Wtl1xyXG5cdFx0XHRcdFx0aWYgZG9jLmlzX2NjICYmICFkb2MuaW5ib3hfdXNlcnM/LmluY2x1ZGVzKE1ldGVvci51c2VySWQoKSkgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xyXG5cdFx0XHRcdFx0XHRjY192aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKFwiaW5zdGFuY2VfY2NfdGl0bGVcIikgKyBcIik8L2xhYmVsPiBcIlxyXG5cdFx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCI8ZGl2IGNsYXNzPSdmbG93LW5hbWUnPiN7Zmxvd19uYW1lfTxzcGFuPigje2RvYy5jdXJyZW50X3N0ZXBfbmFtZX0pPC9zcGFuPjwvZGl2PlwiXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9ICdkcmFmdCcgJiYgZG9jLmN1cnJlbnRfc3RlcF9uYW1lXHJcblx0XHRcdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz4je2Zsb3dfbmFtZX08c3Bhbj4oI3tkb2MuY3VycmVudF9zdGVwX25hbWV9KTwvc3Bhbj48L2Rpdj5cIlxyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz4je2Zsb3dfbmFtZX08L2Rpdj5cIlxyXG5cclxuXHRcdFx0XHRcdGFnZW50X3ZpZXcgPSBcIlwiO1xyXG5cdFx0XHRcdFx0aWYgZG9jLmFnZW50X3VzZXJfbmFtZSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXHJcblx0XHRcdFx0XHRcdGFnZW50X3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHt1c2VyTmFtZTogZG9jLmFnZW50X3VzZXJfbmFtZX0pICsgXCIpPC9sYWJlbD5cIlxyXG5cclxuXHRcdFx0XHRcdHVucmVhZCA9ICcnXHJcblxyXG5cdFx0XHRcdFx0aXNGYXZvcml0ZVNlbGVjdGVkID0gRmF2b3JpdGVzLmlzUmVjb3JkU2VsZWN0ZWQoXCJpbnN0YW5jZXNcIiwgZG9jLl9pZClcclxuXHRcdFx0XHRcdGlmIEZhdm9yaXRlcy5pc1JlY29yZFNlbGVjdGVkKFwiaW5zdGFuY2VzXCIsIGRvYy5faWQpXHJcblx0XHRcdFx0XHRcdHVucmVhZCA9ICc8aSBjbGFzcz1cImlvbiBpb24taW9zLXN0YXItb3V0bGluZSBpbnN0YW5jZS1mYXZvcml0ZS1zZWxlY3RlZFwiPjwvaT4nXHJcblx0XHRcdFx0XHRlbHNlIGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCcgJiYgZG9jLmlzX3JlYWQgPT0gZmFsc2VcclxuXHRcdFx0XHRcdFx0dW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1yZWNvcmQgdW5yZWFkXCI+PC9pPidcclxuXHRcdFx0XHRcdGVsc2UgaWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ21vbml0b3InICYmIGRvYy5pc19oaWRkZW4gPT0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHR1bnJlYWQgPSAnPGkgY2xhc3M9XCJmYSBmYS1sb2NrXCI+PC9pPidcclxuXHJcblx0XHRcdFx0XHRwcmlvcml0eUljb24gPSBcIlwiXHJcblx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwiXCJcclxuXHRcdFx0XHRcdHByaW9yaXR5VmFsdWUgPSBkb2MudmFsdWVzPy5wcmlvcml0eVxyXG5cdFx0XHRcdFx0c3dpdGNoIHByaW9yaXR5VmFsdWVcclxuXHRcdFx0XHRcdFx0d2hlbiBcIueJueaApVwiXHJcblx0XHRcdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcImRhbmdlclwiXHJcblx0XHRcdFx0XHRcdHdoZW4gXCLntKfmgKVcIlxyXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJ3YXJuaW5nXCJcclxuXHRcdFx0XHRcdFx0d2hlbiBcIuWKnuaWh1wiXHJcblx0XHRcdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIm11dGVkXCJcclxuXHRcdFx0XHRcdGlmIHByaW9yaXR5SWNvbkNsYXNzXHJcblx0XHRcdFx0XHRcdGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgPSBcImNvbG9yLXByaW9yaXR5IGNvbG9yLXByaW9yaXR5LSN7cHJpb3JpdHlJY29uQ2xhc3N9XCJcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gXCJcIlwiXHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS1yZWFkLWJhcic+I3t1bnJlYWR9PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS1uYW1lICN7aW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzc30nPiN7ZG9jLm5hbWV9I3tjY192aWV3fSN7YWdlbnRfdmlld31cclxuXHRcdFx0XHRcdFx0XHRcdFx0PHNwYW4+I3tkb2MuYXBwbGljYW50X25hbWV9PC9zcGFuPlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS1kZXRhaWwnPiN7c3RlcF9jdXJyZW50X25hbWVfdmlld31cclxuXHRcdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9J2luc3RhbmNlLW1vZGlmaWVkJyB0aXRsZT0nI3ttb2RpZmllZFN0cmluZ30nPiN7bW9kaWZpZWRGcm9tTm93fTwvc3Bhbj5cclxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFwiXCJcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIiksXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcIm5hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19uYW1lXCIpLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0Y2NfdmlldyA9IFwiXCI7XHJcblx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCJcIjtcclxuXHRcdFx0XHRcdCMg5b2T5YmN55So5oi35ZyoY2MgdXNlcuS4re+8jOS9huaYr+S4jeWcqGluYm94IHVzZXJz5pe25omN5pi+56S6J+S8oOmYhSfmloflrZdcclxuXHRcdFx0XHRcdGlmIGRvYy5pc19jYyAmJiAhZG9jLmluYm94X3VzZXJzPy5pbmNsdWRlcyhNZXRlb3IudXNlcklkKCkpICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCdcclxuXHRcdFx0XHRcdFx0Y2NfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXyhcImluc3RhbmNlX2NjX3RpdGxlXCIpICsgXCIpPC9sYWJlbD4gXCJcclxuXHJcblx0XHRcdFx0XHRhZ2VudF92aWV3ID0gXCJcIjtcclxuXHRcdFx0XHRcdGlmIGRvYy5hZ2VudF91c2VyX25hbWVcclxuXHRcdFx0XHRcdFx0YWdlbnRfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge3VzZXJOYW1lOiBkb2MuYWdlbnRfdXNlcl9uYW1lfSkgKyBcIik8L2xhYmVsPlwiXHJcblxyXG5cdFx0XHRcdFx0dW5yZWFkID0gJydcclxuXHJcblx0XHRcdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnICYmIGRvYy5pc19yZWFkID09IGZhbHNlXHJcblx0XHRcdFx0XHRcdHVucmVhZCA9ICc8aSBjbGFzcz1cImlvbiBpb24tcmVjb3JkIHVucmVhZFwiPjwvaT4nXHJcblx0XHRcdFx0XHRlbHNlIGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdtb25pdG9yJyAmJiBkb2MuaXNfaGlkZGVuID09IHRydWVcclxuXHRcdFx0XHRcdFx0dW5yZWFkID0gJzxpIGNsYXNzPVwiZmEgZmEtbG9ja1wiPjwvaT4nXHJcblxyXG5cdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIlwiXHJcblx0XHRcdFx0XHRwcmlvcml0eVZhbHVlID0gZG9jLnZhbHVlcz8ucHJpb3JpdHlcclxuXHRcdFx0XHRcdHN3aXRjaCBwcmlvcml0eVZhbHVlXHJcblx0XHRcdFx0XHRcdHdoZW4gXCLnibnmgKVcIlxyXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJkYW5nZXJcIlxyXG5cdFx0XHRcdFx0XHR3aGVuIFwi57Sn5oClXCJcclxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwid2FybmluZ1wiXHJcblx0XHRcdFx0XHRcdHdoZW4gXCLlip7mlodcIlxyXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJtdXRlZFwiXHJcblx0XHRcdFx0XHRpZiBwcmlvcml0eUljb25DbGFzc1xyXG5cdFx0XHRcdFx0XHRpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzID0gXCJjb2xvci1wcmlvcml0eSBjb2xvci1wcmlvcml0eS0je3ByaW9yaXR5SWNvbkNsYXNzfVwiXHJcblx0XHRcdFx0XHRyZXR1cm4gXCJcIlwiXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtcmVhZC1iYXInPiN7dW5yZWFkfTwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLW5hbWUgI3tpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzfSc+I3tkb2MubmFtZX0je2NjX3ZpZXd9I3thZ2VudF92aWV3fTwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImFwcGxpY2FudF9uYW1lXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfYXBwbGljYW50X25hbWVcIiksXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJzdWJtaXRfZGF0ZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N1Ym1pdF9kYXRlXCIpLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aWYgZG9jLnN1Ym1pdF9kYXRlXHJcblx0XHRcdFx0XHRcdHJldHVybiBtb21lbnQoZG9jLnN1Ym1pdF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcclxuXHRcdFx0XHQsXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImZsb3dfbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJjdXJyZW50X3N0ZXBfbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N0ZXBfY3VycmVudF9uYW1lXCIpLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aWYgZG9jLnN0YXRlID09IFwiY29tcGxldGVkXCJcclxuXHRcdFx0XHRcdFx0anVkZ2UgPSBkb2MuZmluYWxfZGVjaXNpb24gfHwgXCJhcHByb3ZlZFwiXHJcblxyXG5cdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWUgPSBkb2MuY3VycmVudF9zdGVwX25hbWUgfHwgJydcclxuXHJcblx0XHRcdFx0XHRjY190YWcgPSAnJ1xyXG5cclxuXHRcdFx0XHRcdGlmIGRvYy5jY19jb3VudCA+IDBcclxuXHRcdFx0XHRcdFx0Y2NfdGFnID0gVEFQaTE4bi5fXygnY2NfdGFnJylcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gXCJcIlwiXHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJzdGVwLWN1cnJlbnQtc3RhdGUgI3tqdWRnZX1cIj4je3N0ZXBfY3VycmVudF9uYW1lfSN7Y2NfdGFnfTwvZGl2PlxyXG5cdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJtb2RpZmllZFwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX21vZGlmaWVkXCIpLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0cmV0dXJuIG1vbWVudChkb2MubW9kaWZpZWQpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xyXG5cdFx0XHRcdCxcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwic3RhcnRfZGF0ZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N0YXJ0X2RhdGVcIiksXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpZiBkb2Muc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbW9tZW50KGRvYy5zdGFydF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcclxuXHRcdFx0XHQsXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcIm15X2ZpbmlzaF9kYXRlXCIsXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpZiBkb2MubXlfZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1vbWVudChkb2MubXlfZmluaXNoX2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xyXG5cdFx0XHRcdCxcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwibW9kaWZpZWRcIixcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJrZXl3b3Jkc1wiLFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImlzX2FyY2hpdmVkXCIsXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpZiBkb2M/LnZhbHVlcz8ucmVjb3JkX25lZWQgJiYgZG9jLnZhbHVlcy5yZWNvcmRfbmVlZCA9PSBcInRydWVcIlxyXG5cdFx0XHRcdFx0XHRpZiBkb2M/LmlzX2FyY2hpdmVkXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHQoXCJZRVNcIilcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHQoXCJOT1wiKVxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9XHJcblx0XHRdLFxyXG5cdFx0ZG9tOiBkbyAtPlxyXG5cdFx0XHQjIOaJi+acuuS4iuS4jeaYvuekuuS4gOmhteaYvuekuuWkmuWwkeadoeiusOW9lemAiemhuVxyXG5cdFx0XHRpZiBTdGVlZG9zLmlzTW9iaWxlKClcclxuXHRcdFx0XHQndHAnXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHQndHBsJ1xyXG5cdFx0b3JkZXI6IFtbNCwgXCJkZXNjXCJdXSxcclxuXHRcdGV4dHJhRmllbGRzOiBbXCJmb3JtXCIsIFwiZmxvd1wiLCBcImluYm94X3VzZXJzXCIsIFwic3RhdGVcIiwgXCJzcGFjZVwiLCBcImFwcGxpY2FudFwiLCBcImZvcm1fdmVyc2lvblwiLFxyXG5cdFx0XHRcImZsb3dfdmVyc2lvblwiLCBcImlzX2NjXCIsIFwiY2NfY291bnRcIiwgXCJpc19yZWFkXCIsIFwiY3VycmVudF9zdGVwX25hbWVcIiwgXCJ2YWx1ZXNcIiwgXCJrZXl3b3Jkc1wiLCBcImZpbmFsX2RlY2lzaW9uXCIsIFwiZmxvd19uYW1lXCIsIFwiaXNfaGlkZGVuXCIsIFwiYWdlbnRfdXNlcl9uYW1lXCJdLFxyXG5cdFx0bGVuZ3RoQ2hhbmdlOiB0cnVlLFxyXG5cdFx0bGVuZ3RoTWVudTogWzEwLDE1LDIwLDI1LDUwLDEwMF0sXHJcblx0XHRwYWdlTGVuZ3RoOiAxMCxcclxuXHRcdGluZm86IGZhbHNlLFxyXG5cdFx0c2VhcmNoaW5nOiB0cnVlLFxyXG5cdFx0cmVzcG9uc2l2ZTpcclxuXHRcdFx0ZGV0YWlsczogZmFsc2VcclxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXHJcblx0XHRjaGFuZ2VTZWxlY3RvcjogKHNlbGVjdG9yLCB1c2VySWQpIC0+XHJcblx0XHRcdHVubGVzcyB1c2VySWRcclxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XHJcblx0XHRcdHNwYWNlID0gc2VsZWN0b3Iuc3BhY2VcclxuXHRcdFx0dW5sZXNzIHNwYWNlXHJcblx0XHRcdFx0aWYgc2VsZWN0b3I/LiRhbmQ/Lmxlbmd0aCA+IDBcclxuXHRcdFx0XHRcdHNwYWNlID0gc2VsZWN0b3IuJGFuZC5nZXRQcm9wZXJ0eSgnc3BhY2UnKVswXVxyXG5cdFx0XHR1bmxlc3Mgc3BhY2VcclxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XHJcblx0XHRcdHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHt1c2VyOiB1c2VySWQsIHNwYWNlOiBzcGFjZX0sIHtmaWVsZHM6IHtfaWQ6IDF9fSlcclxuXHRcdFx0dW5sZXNzIHNwYWNlX3VzZXJcclxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XHJcblx0XHRcdHJldHVybiBzZWxlY3RvclxyXG5cdFx0cGFnaW5nVHlwZTogXCJudW1iZXJzXCJcclxuXHJcblx0fVxyXG5cclxuXHRpZiBmbG93SWRcclxuXHRcdGtleSA9IFwiaW5zdGFuY2VGbG93XCIgKyBmbG93SWRcclxuXHJcblx0XHRvcHRpb25zLm5hbWUgPSBrZXlcclxuXHJcblx0XHRUYWJ1bGFyVGFibGVzLmluc3RhbmNlcy5maWVsZHMgPSBmaWVsZHNcclxuXHJcblx0XHRpbnNfZmllbGRzID0gX2hhbmRsZUxpc3RGaWVsZHMgVGFidWxhclRhYmxlcy5pbnN0YW5jZXMuZmllbGRzXHJcblxyXG5cdFx0aW5zX2ZpZWxkcy5mb3JFYWNoIChmKS0+XHJcblx0XHRcdGlmIGYudHlwZSAhPSAndGFibGUnICYmIGYuaXNfbGlzdF9kaXNwbGF5XHJcblx0XHRcdFx0b3B0aW9ucy5jb2x1bW5zLnB1c2hcclxuXHRcdFx0XHRcdGRhdGE6IChmLm5hbWUgfHwgZi5jb2RlKSxcclxuXHRcdFx0XHRcdHRpdGxlOiB0KGYubmFtZSB8fCBmLmNvZGUpLFxyXG5cdFx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHJcblx0XHRcdFx0XHRcdHZhbHVlcyA9IGRvYy52YWx1ZXMgfHwge31cclxuXHJcblx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWVzW2YuY29kZV1cclxuXHJcblx0XHRcdFx0XHRcdHN3aXRjaCBmLnR5cGVcclxuXHRcdFx0XHRcdFx0XHR3aGVuICd1c2VyJ1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8ubmFtZVxyXG5cdFx0XHRcdFx0XHRcdHdoZW4gJ2dyb3VwJ1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8uZnVsbG5hbWVcclxuXHRcdFx0XHRcdFx0XHR3aGVuICdkYXRlJ1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgdmFsdWVcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBtb21lbnQodmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERCcpXHJcblx0XHRcdFx0XHRcdFx0d2hlbiAnZGF0ZVRpbWUnXHJcblx0XHRcdFx0XHRcdFx0XHRpZiB2YWx1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IG1vbWVudCh2YWx1ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJylcclxuXHRcdFx0XHRcdFx0XHR3aGVuICdjaGVja2JveCdcclxuXHRcdFx0XHRcdFx0XHRcdGlmIHZhbHVlID09IHRydWUgfHwgdmFsdWUgPT0gJ3RydWUnXHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X25vXCIpO1xyXG5cdFx0XHRcdFx0XHRcdHdoZW4gJ29kYXRhJ1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgdmFsdWVcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgXy5pc0FycmF5KHZhbHVlKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gXy5wbHVjayh2YWx1ZSwgJ0BsYWJlbCcpLnRvU3RyaW5nKClcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWVbJ0BsYWJlbCddXHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcclxuXHJcblxyXG5cdHJldHVybiBvcHRpb25zO1xyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUgaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcigpXHJcblxyXG5cclxuR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMgPSAoYm94LCBmbG93SWQsIGZpZWxkcyktPlxyXG5cdGtleSA9IFwiaW5zdGFuY2VGbG93XCIgKyBib3ggKyBmbG93SWRcclxuXHRpZiBib3ggPT0gXCJpbmJveFwiXHJcblx0XHRvcHRpb25zID0gX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zKGZsb3dJZCwgZmllbGRzKVxyXG5cdGVsc2UgaWYgYm94ID09IFwib3V0Ym94XCJcclxuXHRcdG9wdGlvbnMgPSBfZ2V0X291dGJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zKGZsb3dJZCwgZmllbGRzKVxyXG5cdGVsc2VcclxuXHRcdG9wdGlvbnMgPSBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyKGZsb3dJZCwgZmllbGRzKVxyXG5cdFx0aWYgIWZsb3dJZFxyXG5cdFx0XHRvcHRpb25zLm5hbWUgPSBcImluYm94X2luc3RhbmNlc1wiXHJcblx0aWYgZmxvd0lkXHJcblx0XHRvcHRpb25zLm5hbWUgPSBrZXlcclxuXHRyZXR1cm4gb3B0aW9uc1xyXG5cclxuXHJcblxyXG5fZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMgPSAoZmxvd0lkLCBmaWVsZHMpLT5cclxuXHRvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcylcclxuXHJcblx0aWYgIWZsb3dJZFxyXG5cdFx0b3B0aW9ucy5uYW1lID0gXCJpbmJveF9pbnN0YW5jZXNcIlxyXG5cclxuXHRvcHRpb25zLm9yZGVyID0gW1s4LCBcImRlc2NcIl1dXHJcblx0b3B0aW9ucy5maWx0ZXJlZFJlY29yZElkcyA9ICh0YWJsZSwgc2VsZWN0b3IsIHNvcnQsIHNraXAsIGxpbWl0LCBvbGRfZmlsdGVyZWRSZWNvcmRJZHMsIHVzZXJJZCwgZmluZE9wdGlvbnMpLT5cclxuXHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24gPSBbXHJcblx0XHRcdHtcclxuXHRcdFx0XHQkbWF0Y2g6IHNlbGVjdG9yXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHQkcHJvamVjdDoge1xyXG5cdFx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRcdFwiX2FwcHJvdmVcIjogJyR0cmFjZXMuYXBwcm92ZXMnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHVud2luZDogXCIkX2FwcHJvdmVcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHVud2luZDogXCIkX2FwcHJvdmVcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JG1hdGNoOiB7XHJcblx0XHRcdFx0XHQnX2FwcHJvdmUuaXNfZmluaXNoZWQnOiBmYWxzZVxyXG5cdFx0XHRcdFx0J19hcHByb3ZlLmhhbmRsZXInOiB1c2VySWQsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRdXHJcblx0XHRpZiBzb3J0IGFuZCBzb3J0Lmxlbmd0aCA+IDBcclxuXHRcdFx0czEgPSBzb3J0WzBdXHJcblx0XHRcdHMxXzAgPSBzMVswXVxyXG5cdFx0XHRzMV8xID0gczFbMV1cclxuXHRcdFx0aWYgczFfMCA9PSAnc3RhcnRfZGF0ZSdcclxuXHJcblx0XHRcdFx0ZmluZE9wdGlvbnMuc29ydCA9IFtbJ21vZGlmaWVkJywgczFfMV1dXHJcblxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkZ3JvdXA6IHtfaWQ6IFwiJF9pZFwiLCBcImFwcHJvdmVfc3RhcnRfZGF0ZVwiOiB7JGZpcnN0OiBcIiRfYXBwcm92ZS5zdGFydF9kYXRlXCJ9fVxyXG5cclxuXHRcdFx0XHRhZ19zb3J0ID0gJ2FwcHJvdmVfc3RhcnRfZGF0ZSc6IGlmIHMxXzEgPT0gJ2FzYycgdGhlbiAxIGVsc2UgLTFcclxuXHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRzb3J0OiBhZ19zb3J0XHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRza2lwOiBza2lwXHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRsaW1pdDogbGltaXRcclxuXHRcdFx0XHRmaWx0ZXJlZFJlY29yZElkcyA9IG5ldyBBcnJheSgpXHJcblxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZSA9ICh0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMsIGNiKSAtPlxyXG5cdFx0XHRcdFx0dGFibGUuY29sbGVjdGlvbi5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKGFnZ3JlZ2F0ZV9vcGVyYXRpb24pLnRvQXJyYXkgKGVyciwgZGF0YSkgLT5cclxuXHRcdFx0XHRcdFx0aWYgZXJyXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycilcclxuXHRcdFx0XHRcdFx0ZGF0YS5mb3JFYWNoIChkb2MpIC0+XHJcblx0XHRcdFx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMucHVzaCBkb2MuX2lkXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdGlmIGNiXHJcblx0XHRcdFx0XHRcdFx0Y2IoKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdHJldHVyblxyXG5cclxuXHRcdFx0XHRhc3luY19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKGFnZ3JlZ2F0ZSlcclxuXHJcblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlIHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkc1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmlsdGVyZWRSZWNvcmRJZHMudW5pcSgpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXR1cm4gb2xkX2ZpbHRlcmVkUmVjb3JkSWRzXHJcblxyXG5cdHJldHVybiBvcHRpb25zXHJcblxyXG5NZXRlb3Iuc3RhcnR1cCAoKS0+XHJcblx0VGFidWxhclRhYmxlcy5pbmJveF9pbnN0YW5jZXMgPSBuZXcgVGFidWxhci5UYWJsZSBHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhcImluYm94XCIpXHJcblxyXG5cclxuX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyA9IChmbG93SWQsIGZpZWxkcyktPlxyXG5cdG9wdGlvbnMgPSBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyKGZsb3dJZCwgZmllbGRzKVxyXG5cclxuXHRpZiAhZmxvd0lkXHJcblx0XHRvcHRpb25zLm5hbWUgPSBcIm91dGJveF9pbnN0YW5jZXNcIlxyXG5cclxuXHRvcHRpb25zLm9yZGVyID0gW1s5LCBcImRlc2NcIl1dXHJcblx0b3B0aW9ucy5maWx0ZXJlZFJlY29yZElkcyA9ICh0YWJsZSwgc2VsZWN0b3IsIHNvcnQsIHNraXAsIGxpbWl0LCBvbGRfZmlsdGVyZWRSZWNvcmRJZHMsIHVzZXJJZCwgZmluZE9wdGlvbnMpLT5cclxuXHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24gPSBbXHJcblx0XHRcdHtcclxuXHRcdFx0XHQkbWF0Y2g6IHNlbGVjdG9yXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHQkcHJvamVjdDoge1xyXG5cdFx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRcdFwiX2FwcHJvdmVcIjogJyR0cmFjZXMuYXBwcm92ZXMnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHVud2luZDogXCIkX2FwcHJvdmVcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHVud2luZDogXCIkX2FwcHJvdmVcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JG1hdGNoOiB7XHJcblx0XHRcdFx0XHQnX2FwcHJvdmUuaXNfZmluaXNoZWQnOiB0cnVlXHJcblx0XHRcdFx0XHQkb3I6IFt7J19hcHByb3ZlLmhhbmRsZXInOiB1c2VySWR9LHsnX2FwcHJvdmUudXNlcic6IHVzZXJJZH1dXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRdXHJcblx0XHRpZiBzb3J0IGFuZCBzb3J0Lmxlbmd0aCA+IDBcclxuXHRcdFx0czEgPSBzb3J0WzBdXHJcblx0XHRcdHMxXzAgPSBzMVswXVxyXG5cdFx0XHRzMV8xID0gczFbMV1cclxuXHRcdFx0aWYgczFfMCA9PSAnbXlfZmluaXNoX2RhdGUnXHJcblxyXG5cdFx0XHRcdGZpbmRPcHRpb25zLnNvcnQgPSBbWydtb2RpZmllZCcsIHMxXzFdXVxyXG5cclxuXHRcdFx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2ggJGdyb3VwOiB7X2lkOiBcIiRfaWRcIiwgXCJhcHByb3ZlX2ZpbmlzaF9kYXRlXCI6IHskbGFzdDogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIn19XHJcblxyXG5cdFx0XHRcdGFnX3NvcnQgPSAnYXBwcm92ZV9maW5pc2hfZGF0ZSc6IGlmIHMxXzEgPT0gJ2FzYycgdGhlbiAxIGVsc2UgLTFcclxuXHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRzb3J0OiBhZ19zb3J0XHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRza2lwOiBza2lwXHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRsaW1pdDogbGltaXRcclxuXHRcdFx0XHRmaWx0ZXJlZFJlY29yZElkcyA9IG5ldyBBcnJheSgpXHJcblxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZSA9ICh0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMsIGNiKSAtPlxyXG5cdFx0XHRcdFx0dGFibGUuY29sbGVjdGlvbi5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKGFnZ3JlZ2F0ZV9vcGVyYXRpb24pLnRvQXJyYXkgKGVyciwgZGF0YSkgLT5cclxuXHRcdFx0XHRcdFx0aWYgZXJyXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycilcclxuXHRcdFx0XHRcdFx0ZGF0YS5mb3JFYWNoIChkb2MpIC0+XHJcblx0XHRcdFx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMucHVzaCBkb2MuX2lkXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdGlmIGNiXHJcblx0XHRcdFx0XHRcdFx0Y2IoKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdHJldHVyblxyXG5cclxuXHRcdFx0XHRhc3luY19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKGFnZ3JlZ2F0ZSlcclxuXHJcblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlIHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkc1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmlsdGVyZWRSZWNvcmRJZHMudW5pcSgpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXR1cm4gb2xkX2ZpbHRlcmVkUmVjb3JkSWRzXHJcblxyXG5cdHJldHVybiBvcHRpb25zXHJcblxyXG5NZXRlb3Iuc3RhcnR1cCAoKS0+XHJcblx0VGFidWxhclRhYmxlcy5vdXRib3hfaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUgR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoXCJvdXRib3hcIilcclxuXHJcbmlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFRhYnVsYXJUYWJsZXMuZmxvd0luc3RhbmNlcyA9IG5ldyBSZWFjdGl2ZVZhcigpXHJcblxyXG5NZXRlb3Iuc3RhcnR1cCAoKS0+XHJcblx0VHJhY2tlci5hdXRvcnVuIChjKSAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50ICYmICFTdGVlZG9zLmlzTW9iaWxlKClcclxuXHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJmbG93SWRcIikgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgIT0gJ2RyYWZ0J1xyXG5cdFx0XHRcdE1ldGVvci5jYWxsIFwibmV3SW5zdGFuY2VzTGlzdFRhYnVsYXJcIiwgU2Vzc2lvbi5nZXQoXCJib3hcIiksIFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpLCAoZXJyb3IsIHJlc3VsdCkgLT5cclxuXHRcdFx0XHRcdG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyIFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgcmVzdWx0XHJcblx0XHRcdFx0XHRUZW1wbGF0ZS5pbnN0YW5jZV9saXN0Ll9jaGFuZ2VPcmRlcigpXHJcblxyXG5cclxubmV3SW5zdGFuY2VzTGlzdFRhYnVsYXIgPSAoYm94LCBmbG93SWQsIGZpZWxkcyktPlxyXG5cdGlmICFmaWVsZHNcclxuXHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQ6IGZsb3dJZH0sIHtmaWVsZHM6IHtmb3JtOiAxfX0pXHJcblx0XHRmaWVsZHMgPSBkYi5mb3Jtcy5maW5kT25lKHsgX2lkOiBmbG93Py5mb3JtIH0sIHsgZmllbGRzOiB7ICdjdXJyZW50LmZpZWxkcyc6IDEgfSB9KT8uY3VycmVudD8uZmllbGRzXHJcblxyXG5cdGZpZWxkcyA9IF9oYW5kbGVMaXN0RmllbGRzIGZpZWxkc1xyXG5cclxuXHRpZiBmaWVsZHM/LmZpbHRlclByb3BlcnR5KFwiaXNfbGlzdF9kaXNwbGF5XCIsIHRydWUpPy5sZW5ndGggPiAwXHJcblx0XHRrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgYm94ICsgZmxvd0lkXHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0VGFidWxhclRhYmxlcy5mbG93SW5zdGFuY2VzLnNldChuZXcgVGFidWxhci5UYWJsZSBHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhib3gsIGZsb3dJZCwgZmllbGRzKSlcclxuXHRcdGVsc2VcclxuXHRcdFx0bmV3IFRhYnVsYXIuVGFibGUgR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoYm94LCBmbG93SWQsIGZpZWxkcylcclxuXHRcdGNvbnNvbGUubG9nIFwibmV3IFRhYnVsYXJUYWJsZXMgXCIsIGtleVxyXG5cclxuaWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0TWV0ZW9yLm1ldGhvZHNcclxuXHRcdG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyOiAoYm94LCBmbG93SWQpLT5cclxuXHRcdFx0bmV3SW5zdGFuY2VzTGlzdFRhYnVsYXIoYm94LCBmbG93SWQpXHJcblxyXG5cdFx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBmbG93SWR9LCB7ZmllbGRzOiB7Zm9ybTogMX19KVxyXG5cdFx0XHRmaWVsZHMgPSBkYi5mb3Jtcy5maW5kT25lKHsgX2lkOiBmbG93Py5mb3JtIH0sIHsgZmllbGRzOiB7ICdjdXJyZW50LmZpZWxkcyc6IDEgfSB9KT8uY3VycmVudD8uZmllbGRzXHJcblx0XHRcdHJldHVybiBmaWVsZHNcclxuXHJcblxyXG4iLCJ2YXIgR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMsIF9nZXRfaW5ib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucywgX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucywgX2hhbmRsZUxpc3RGaWVsZHMsIGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIsIG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyLCB1cGRhdGVUYWJ1bGFyVGl0bGU7XG5cblN0ZWVkb3Muc3Vic1tcIkluc3RhbmNlVGFidWxhclwiXSA9IG5ldyBTdWJzTWFuYWdlcigpO1xuXG5faGFuZGxlTGlzdEZpZWxkcyA9IGZ1bmN0aW9uKGZpZWxkcykge1xuICB2YXIgaW5zX2ZpZWxkcztcbiAgaW5zX2ZpZWxkcyA9IG5ldyBBcnJheSgpO1xuICBpZiAoZmllbGRzICE9IG51bGwpIHtcbiAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgICB2YXIgcmVmO1xuICAgICAgaWYgKGYudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJyk7XG4gICAgICB9IGVsc2UgaWYgKGYudHlwZSA9PT0gJ3NlY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmICE9IG51bGwgPyAocmVmID0gZi5maWVsZHMpICE9IG51bGwgPyByZWYuZm9yRWFjaChmdW5jdGlvbihmMSkge1xuICAgICAgICAgIHJldHVybiBpbnNfZmllbGRzLnB1c2goZjEpO1xuICAgICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnNfZmllbGRzLnB1c2goZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGluc19maWVsZHM7XG59O1xuXG51cGRhdGVUYWJ1bGFyVGl0bGUgPSBmdW5jdGlvbigpIHt9O1xuXG5pbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyID0gZnVuY3Rpb24oZmxvd0lkLCBmaWVsZHMpIHtcbiAgdmFyIGluc19maWVsZHMsIGtleSwgb3B0aW9ucztcbiAgb3B0aW9ucyA9IHtcbiAgICBuYW1lOiBcImluc3RhbmNlc1wiLFxuICAgIGNvbGxlY3Rpb246IGRiLmluc3RhbmNlcyxcbiAgICBwdWI6IFwiaW5zdGFuY2VfdGFidWxhclwiLFxuICAgIG9uVW5sb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNZXRlb3Iuc2V0VGltZW91dChUZW1wbGF0ZS5pbnN0YW5jZV9saXN0Ll90YWJsZUNvbHVtbnMsIDE1MCk7XG4gICAgfSxcbiAgICBkcmF3Q2FsbGJhY2s6IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG4gICAgICB2YXIgZWxsaXBzaXNMaW5rLCBlbXB0eVRkLCB0aXRsZTtcbiAgICAgIGVtcHR5VGQgPSAkKFwiLmRhdGFUYWJsZXNfZW1wdHlcIik7XG4gICAgICBpZiAoZW1wdHlUZC5sZW5ndGgpIHtcbiAgICAgICAgZW1wdHlUZFswXS5jb2xTcGFuID0gXCI2XCI7XG4gICAgICB9XG4gICAgICBpZiAoIVN0ZWVkb3MuaXNNb2JpbGUoKSAmJiAhU3RlZWRvcy5pc1BhZCgpKSB7XG4gICAgICAgIE1ldGVvci5zZXRUaW1lb3V0KFRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucywgMTUwKTtcbiAgICAgICAgJChcIi5pbnN0YW5jZS1saXN0XCIpLnNjcm9sbFRvcCgwKS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJChcIi5pbnN0YW5jZS1saXN0XCIpLnBlcmZlY3RTY3JvbGxiYXIoXCJ1cGRhdGVcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChcIi5pbnN0YW5jZS1saXN0XCIpLnNjcm9sbFRvcCgwKTtcbiAgICAgIH1cbiAgICAgIHRpdGxlID0gdChcInBhZ2VyX2lucHV0X2hpbnRcIik7XG4gICAgICBlbGxpcHNpc0xpbmsgPSBzZXR0aW5ncy5vSW5zdGFuY2UucGFyZW50KCkuZmluZCgnLnBhZ2luZ19udW1iZXJzIC5wYWdpbmF0aW9uIC5kaXNhYmxlZCBhJyk7XG4gICAgICByZXR1cm4gZWxsaXBzaXNMaW5rLmF0dHIoXCJ0aXRsZVwiLCB0aXRsZSkuY3NzKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGdvUGFnZSwgaW5wdXQ7XG4gICAgICAgIGlmICghJCh0aGlzKS5maW5kKCdpbnB1dCcpLmxlbmd0aCkge1xuICAgICAgICAgIGlucHV0ID0gJCgnPGlucHV0IGNsYXNzPVwicGFnaW5hdGVfaW5wdXQgZm9ybS1jb250cm9sIGlucHV0LXNtXCIgdHlwZT1cInRleHRcIiBzdHlsZT1cImJvcmRlcjogbm9uZTsgcGFkZGluZzowIDJweDtcIi8+Jyk7XG4gICAgICAgICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgICAgICAgaW5wdXQuY3NzKHtcbiAgICAgICAgICAgICAgd2lkdGg6IFwiNTJweFwiLFxuICAgICAgICAgICAgICBoZWlnaHQ6IFwiMjBweFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXQuY3NzKHtcbiAgICAgICAgICAgICAgd2lkdGg6IFwiNTJweFwiLFxuICAgICAgICAgICAgICBoZWlnaHQ6IFwiMTZweFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5wdXQuYXR0cihcInRpdGxlXCIsIHRpdGxlKS5hdHRyKFwicGxhY2Vob2xkZXJcIiwgdGl0bGUpO1xuICAgICAgICAgICQodGhpcykuZW1wdHkoKS5hcHBlbmQoaW5wdXQpO1xuICAgICAgICAgIGdvUGFnZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgcGFnZXM7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgIHBhZ2VzID0gTWF0aC5jZWlsKHNldHRpbmdzLmZuUmVjb3Jkc0Rpc3BsYXkoKSAvIHNldHRpbmdzLl9pRGlzcGxheUxlbmd0aCk7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IHBhZ2VzKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBwYWdlcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpbmRleC0tO1xuICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3Mub0luc3RhbmNlLkRhdGFUYWJsZSgpLnBhZ2UoaW5kZXgpLmRyYXcoJ3BhZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlucHV0LmJsdXIoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRQYWdlO1xuICAgICAgICAgICAgY3VycmVudFBhZ2UgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICAgICAgZ29QYWdlKGN1cnJlbnRQYWdlKTtcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLnBhcmVudCgpLmh0bWwoJy4uLicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBpbnB1dC5rZXlkb3duKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50UGFnZTtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUudG9TdHJpbmcoKSA9PT0gXCIxM1wiKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGdvUGFnZShjdXJyZW50UGFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY3JlYXRlZFJvdzogZnVuY3Rpb24ocm93LCBkYXRhLCBkYXRhSW5kZXgpIHtcbiAgICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgICAgaWYgKGRhdGEuX2lkID09PSBGbG93Um91dGVyLmN1cnJlbnQoKS5wYXJhbXMuaW5zdGFuY2VJZCkge1xuICAgICAgICAgIHJldHVybiByb3cuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAge1xuICAgICAgICBkYXRhOiBcIl9pZFwiLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIGFnZW50X3ZpZXcsIGNjX3ZpZXcsIGZsb3dfbmFtZSwgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcywgaXNGYXZvcml0ZVNlbGVjdGVkLCBtb2RpZmllZCwgbW9kaWZpZWRGcm9tTm93LCBtb2RpZmllZFN0cmluZywgcHJpb3JpdHlJY29uLCBwcmlvcml0eUljb25DbGFzcywgcHJpb3JpdHlWYWx1ZSwgcmVmLCByZWYxLCBzdGVwX2N1cnJlbnRfbmFtZV92aWV3LCB1bnJlYWQ7XG4gICAgICAgICAgbW9kaWZpZWRTdHJpbmcgPSBtb21lbnQoZG9jLm1vZGlmaWVkKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgICBtb2RpZmllZCA9IGRvYy5tb2RpZmllZDtcbiAgICAgICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcgJiYgZG9jLnN0YXRlICE9PSAnZHJhZnQnKSB7XG4gICAgICAgICAgICBtb2RpZmllZCA9IGRvYy5zdGFydF9kYXRlIHx8IGRvYy5tb2RpZmllZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnb3V0Ym94JyB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ21vbml0b3InKSB7XG4gICAgICAgICAgICBtb2RpZmllZCA9IGRvYy5zdWJtaXRfZGF0ZSB8fCBkb2Muc3VibWl0X2RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1vZGlmaWVkRnJvbU5vdyA9IFN0ZWVkb3MubW9tZW50UmVhY3RpdmVGcm9tTm93KG1vZGlmaWVkKTtcbiAgICAgICAgICBmbG93X25hbWUgPSBkb2MuZmxvd19uYW1lO1xuICAgICAgICAgIGNjX3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIGlmIChkb2MuaXNfY2MgJiYgISgocmVmID0gZG9jLmluYm94X3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKE1ldGVvci51c2VySWQoKSkgOiB2b2lkIDApICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnKSB7XG4gICAgICAgICAgICBjY192aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKFwiaW5zdGFuY2VfY2NfdGl0bGVcIikgKyBcIik8L2xhYmVsPiBcIjtcbiAgICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+XCIgKyBmbG93X25hbWUgKyBcIjxzcGFuPihcIiArIGRvYy5jdXJyZW50X3N0ZXBfbmFtZSArIFwiKTwvc3Bhbj48L2Rpdj5cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpICE9PSAnZHJhZnQnICYmIGRvYy5jdXJyZW50X3N0ZXBfbmFtZSkge1xuICAgICAgICAgICAgICBzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCI8ZGl2IGNsYXNzPSdmbG93LW5hbWUnPlwiICsgZmxvd19uYW1lICsgXCI8c3Bhbj4oXCIgKyBkb2MuY3VycmVudF9zdGVwX25hbWUgKyBcIik8L3NwYW4+PC9kaXY+XCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCI8ZGl2IGNsYXNzPSdmbG93LW5hbWUnPlwiICsgZmxvd19uYW1lICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYWdlbnRfdmlldyA9IFwiXCI7XG4gICAgICAgICAgaWYgKGRvYy5hZ2VudF91c2VyX25hbWUgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgICAgIGFnZW50X3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgdXNlck5hbWU6IGRvYy5hZ2VudF91c2VyX25hbWVcbiAgICAgICAgICAgIH0pICsgXCIpPC9sYWJlbD5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdW5yZWFkID0gJyc7XG4gICAgICAgICAgaXNGYXZvcml0ZVNlbGVjdGVkID0gRmF2b3JpdGVzLmlzUmVjb3JkU2VsZWN0ZWQoXCJpbnN0YW5jZXNcIiwgZG9jLl9pZCk7XG4gICAgICAgICAgaWYgKEZhdm9yaXRlcy5pc1JlY29yZFNlbGVjdGVkKFwiaW5zdGFuY2VzXCIsIGRvYy5faWQpKSB7XG4gICAgICAgICAgICB1bnJlYWQgPSAnPGkgY2xhc3M9XCJpb24gaW9uLWlvcy1zdGFyLW91dGxpbmUgaW5zdGFuY2UtZmF2b3JpdGUtc2VsZWN0ZWRcIj48L2k+JztcbiAgICAgICAgICB9IGVsc2UgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnICYmIGRvYy5pc19yZWFkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1yZWNvcmQgdW5yZWFkXCI+PC9pPic7XG4gICAgICAgICAgfSBlbHNlIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ21vbml0b3InICYmIGRvYy5pc19oaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHVucmVhZCA9ICc8aSBjbGFzcz1cImZhIGZhLWxvY2tcIj48L2k+JztcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJpb3JpdHlJY29uID0gXCJcIjtcbiAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwiXCI7XG4gICAgICAgICAgcHJpb3JpdHlWYWx1ZSA9IChyZWYxID0gZG9jLnZhbHVlcykgIT0gbnVsbCA/IHJlZjEucHJpb3JpdHkgOiB2b2lkIDA7XG4gICAgICAgICAgc3dpdGNoIChwcmlvcml0eVZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwi54m55oClXCI6XG4gICAgICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJkYW5nZXJcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwi57Sn5oClXCI6XG4gICAgICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJ3YXJuaW5nXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIuWKnuaWh1wiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwibXV0ZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByaW9yaXR5SWNvbkNsYXNzKSB7XG4gICAgICAgICAgICBpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzID0gXCJjb2xvci1wcmlvcml0eSBjb2xvci1wcmlvcml0eS1cIiArIHByaW9yaXR5SWNvbkNsYXNzO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS1yZWFkLWJhcic+XCIgKyB1bnJlYWQgKyBcIjwvZGl2PlxcbjxkaXYgY2xhc3M9J2luc3RhbmNlLW5hbWUgXCIgKyBpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzICsgXCInPlwiICsgZG9jLm5hbWUgKyBjY192aWV3ICsgYWdlbnRfdmlldyArIFwiXFxuXHQ8c3Bhbj5cIiArIGRvYy5hcHBsaWNhbnRfbmFtZSArIFwiPC9zcGFuPlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9J2luc3RhbmNlLWRldGFpbCc+XCIgKyBzdGVwX2N1cnJlbnRfbmFtZV92aWV3ICsgXCJcXG5cdDxzcGFuIGNsYXNzPSdpbnN0YW5jZS1tb2RpZmllZCcgdGl0bGU9J1wiICsgbW9kaWZpZWRTdHJpbmcgKyBcIic+XCIgKyBtb2RpZmllZEZyb21Ob3cgKyBcIjwvc3Bhbj5cXG48L2Rpdj5cIjtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIiksXG4gICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwibmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19uYW1lXCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIGFnZW50X3ZpZXcsIGNjX3ZpZXcsIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MsIHByaW9yaXR5SWNvbkNsYXNzLCBwcmlvcml0eVZhbHVlLCByZWYsIHJlZjEsIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcsIHVucmVhZDtcbiAgICAgICAgICBjY192aWV3ID0gXCJcIjtcbiAgICAgICAgICBzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCJcIjtcbiAgICAgICAgICBpZiAoZG9jLmlzX2NjICYmICEoKHJlZiA9IGRvYy5pbmJveF91c2VycykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhNZXRlb3IudXNlcklkKCkpIDogdm9pZCAwKSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94Jykge1xuICAgICAgICAgICAgY2NfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXyhcImluc3RhbmNlX2NjX3RpdGxlXCIpICsgXCIpPC9sYWJlbD4gXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFnZW50X3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIGlmIChkb2MuYWdlbnRfdXNlcl9uYW1lKSB7XG4gICAgICAgICAgICBhZ2VudF92aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKCdwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXNfZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHVzZXJOYW1lOiBkb2MuYWdlbnRfdXNlcl9uYW1lXG4gICAgICAgICAgICB9KSArIFwiKTwvbGFiZWw+XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVucmVhZCA9ICcnO1xuICAgICAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94JyAmJiBkb2MuaXNfcmVhZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVucmVhZCA9ICc8aSBjbGFzcz1cImlvbiBpb24tcmVjb3JkIHVucmVhZFwiPjwvaT4nO1xuICAgICAgICAgIH0gZWxzZSBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdtb25pdG9yJyAmJiBkb2MuaXNfaGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgICB1bnJlYWQgPSAnPGkgY2xhc3M9XCJmYSBmYS1sb2NrXCI+PC9pPic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJcIjtcbiAgICAgICAgICBwcmlvcml0eVZhbHVlID0gKHJlZjEgPSBkb2MudmFsdWVzKSAhPSBudWxsID8gcmVmMS5wcmlvcml0eSA6IHZvaWQgMDtcbiAgICAgICAgICBzd2l0Y2ggKHByaW9yaXR5VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCLnibnmgKVcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcImRhbmdlclwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCLntKfmgKVcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIndhcm5pbmdcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwi5Yqe5paHXCI6XG4gICAgICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJtdXRlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJpb3JpdHlJY29uQ2xhc3MpIHtcbiAgICAgICAgICAgIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgPSBcImNvbG9yLXByaW9yaXR5IGNvbG9yLXByaW9yaXR5LVwiICsgcHJpb3JpdHlJY29uQ2xhc3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXJlYWQtYmFyJz5cIiArIHVucmVhZCArIFwiPC9kaXY+XFxuPGRpdiBjbGFzcz0naW5zdGFuY2UtbmFtZSBcIiArIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgKyBcIic+XCIgKyBkb2MubmFtZSArIGNjX3ZpZXcgKyBhZ2VudF92aWV3ICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJhcHBsaWNhbnRfbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfbmFtZVwiKSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJzdWJtaXRfZGF0ZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19zdWJtaXRfZGF0ZVwiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIGlmIChkb2Muc3VibWl0X2RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZG9jLnN1Ym1pdF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJmbG93X25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfZmxvd1wiKSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJjdXJyZW50X3N0ZXBfbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19zdGVwX2N1cnJlbnRfbmFtZVwiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBjY190YWcsIGp1ZGdlLCBzdGVwX2N1cnJlbnRfbmFtZTtcbiAgICAgICAgICBpZiAoZG9jLnN0YXRlID09PSBcImNvbXBsZXRlZFwiKSB7XG4gICAgICAgICAgICBqdWRnZSA9IGRvYy5maW5hbF9kZWNpc2lvbiB8fCBcImFwcHJvdmVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lID0gZG9jLmN1cnJlbnRfc3RlcF9uYW1lIHx8ICcnO1xuICAgICAgICAgIGNjX3RhZyA9ICcnO1xuICAgICAgICAgIGlmIChkb2MuY2NfY291bnQgPiAwKSB7XG4gICAgICAgICAgICBjY190YWcgPSBUQVBpMThuLl9fKCdjY190YWcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwic3RlcC1jdXJyZW50LXN0YXRlIFwiICsganVkZ2UgKyBcIlxcXCI+XCIgKyBzdGVwX2N1cnJlbnRfbmFtZSArIGNjX3RhZyArIFwiPC9kaXY+XCI7XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwibW9kaWZpZWRcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfbW9kaWZpZWRcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICByZXR1cm4gbW9tZW50KGRvYy5tb2RpZmllZCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJzdGFydF9kYXRlXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N0YXJ0X2RhdGVcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICBpZiAoZG9jLnN0YXJ0X2RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZG9jLnN0YXJ0X2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcIm15X2ZpbmlzaF9kYXRlXCIsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICBpZiAoZG9jLm15X2ZpbmlzaF9kYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KGRvYy5teV9maW5pc2hfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwibW9kaWZpZWRcIixcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJrZXl3b3Jkc1wiLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImlzX2FyY2hpdmVkXCIsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIgcmVmO1xuICAgICAgICAgIGlmICgoZG9jICE9IG51bGwgPyAocmVmID0gZG9jLnZhbHVlcykgIT0gbnVsbCA/IHJlZi5yZWNvcmRfbmVlZCA6IHZvaWQgMCA6IHZvaWQgMCkgJiYgZG9jLnZhbHVlcy5yZWNvcmRfbmVlZCA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgIGlmIChkb2MgIT0gbnVsbCA/IGRvYy5pc19hcmNoaXZlZCA6IHZvaWQgMCkge1xuICAgICAgICAgICAgICByZXR1cm4gdChcIllFU1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0KFwiTk9cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfVxuICAgIF0sXG4gICAgZG9tOiAoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgICAgIHJldHVybiAndHAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICd0cGwnO1xuICAgICAgfVxuICAgIH0pKCksXG4gICAgb3JkZXI6IFtbNCwgXCJkZXNjXCJdXSxcbiAgICBleHRyYUZpZWxkczogW1wiZm9ybVwiLCBcImZsb3dcIiwgXCJpbmJveF91c2Vyc1wiLCBcInN0YXRlXCIsIFwic3BhY2VcIiwgXCJhcHBsaWNhbnRcIiwgXCJmb3JtX3ZlcnNpb25cIiwgXCJmbG93X3ZlcnNpb25cIiwgXCJpc19jY1wiLCBcImNjX2NvdW50XCIsIFwiaXNfcmVhZFwiLCBcImN1cnJlbnRfc3RlcF9uYW1lXCIsIFwidmFsdWVzXCIsIFwia2V5d29yZHNcIiwgXCJmaW5hbF9kZWNpc2lvblwiLCBcImZsb3dfbmFtZVwiLCBcImlzX2hpZGRlblwiLCBcImFnZW50X3VzZXJfbmFtZVwiXSxcbiAgICBsZW5ndGhDaGFuZ2U6IHRydWUsXG4gICAgbGVuZ3RoTWVudTogWzEwLCAxNSwgMjAsIDI1LCA1MCwgMTAwXSxcbiAgICBwYWdlTGVuZ3RoOiAxMCxcbiAgICBpbmZvOiBmYWxzZSxcbiAgICBzZWFyY2hpbmc6IHRydWUsXG4gICAgcmVzcG9uc2l2ZToge1xuICAgICAgZGV0YWlsczogZmFsc2VcbiAgICB9LFxuICAgIGF1dG9XaWR0aDogZmFsc2UsXG4gICAgY2hhbmdlU2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yLCB1c2VySWQpIHtcbiAgICAgIHZhciByZWYsIHNwYWNlLCBzcGFjZV91c2VyO1xuICAgICAgaWYgKCF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfaWQ6IC0xXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzcGFjZSA9IHNlbGVjdG9yLnNwYWNlO1xuICAgICAgaWYgKCFzcGFjZSkge1xuICAgICAgICBpZiAoKHNlbGVjdG9yICE9IG51bGwgPyAocmVmID0gc2VsZWN0b3IuJGFuZCkgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICAgIHNwYWNlID0gc2VsZWN0b3IuJGFuZC5nZXRQcm9wZXJ0eSgnc3BhY2UnKVswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFzcGFjZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIF9pZDogLTFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICAgICAgdXNlcjogdXNlcklkLFxuICAgICAgICBzcGFjZTogc3BhY2VcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgX2lkOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFzcGFjZV91c2VyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX2lkOiAtMVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgIH0sXG4gICAgcGFnaW5nVHlwZTogXCJudW1iZXJzXCJcbiAgfTtcbiAgaWYgKGZsb3dJZCkge1xuICAgIGtleSA9IFwiaW5zdGFuY2VGbG93XCIgKyBmbG93SWQ7XG4gICAgb3B0aW9ucy5uYW1lID0ga2V5O1xuICAgIFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzLmZpZWxkcyA9IGZpZWxkcztcbiAgICBpbnNfZmllbGRzID0gX2hhbmRsZUxpc3RGaWVsZHMoVGFidWxhclRhYmxlcy5pbnN0YW5jZXMuZmllbGRzKTtcbiAgICBpbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgICAgaWYgKGYudHlwZSAhPT0gJ3RhYmxlJyAmJiBmLmlzX2xpc3RfZGlzcGxheSkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5jb2x1bW5zLnB1c2goe1xuICAgICAgICAgIGRhdGE6IGYubmFtZSB8fCBmLmNvZGUsXG4gICAgICAgICAgdGl0bGU6IHQoZi5uYW1lIHx8IGYuY29kZSksXG4gICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgb3JkZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUsIHZhbHVlcztcbiAgICAgICAgICAgIHZhbHVlcyA9IGRvYy52YWx1ZXMgfHwge307XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tmLmNvZGVdO1xuICAgICAgICAgICAgc3dpdGNoIChmLnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAndXNlcic6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUubmFtZSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZ3JvdXAnOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLmZ1bGxuYW1lIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2RhdGVUaW1lJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF95ZXNcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfbm9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdvZGF0YSc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF8ucGx1Y2sodmFsdWUsICdAbGFiZWwnKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVsnQGxhYmVsJ107XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUoaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcigpKTtcbn0pO1xuXG5HZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyA9IGZ1bmN0aW9uKGJveCwgZmxvd0lkLCBmaWVsZHMpIHtcbiAgdmFyIGtleSwgb3B0aW9ucztcbiAga2V5ID0gXCJpbnN0YW5jZUZsb3dcIiArIGJveCArIGZsb3dJZDtcbiAgaWYgKGJveCA9PT0gXCJpbmJveFwiKSB7XG4gICAgb3B0aW9ucyA9IF9nZXRfaW5ib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyhmbG93SWQsIGZpZWxkcyk7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcIm91dGJveFwiKSB7XG4gICAgb3B0aW9ucyA9IF9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMoZmxvd0lkLCBmaWVsZHMpO1xuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMgPSBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyKGZsb3dJZCwgZmllbGRzKTtcbiAgICBpZiAoIWZsb3dJZCkge1xuICAgICAgb3B0aW9ucy5uYW1lID0gXCJpbmJveF9pbnN0YW5jZXNcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGZsb3dJZCkge1xuICAgIG9wdGlvbnMubmFtZSA9IGtleTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn07XG5cbl9nZXRfaW5ib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyA9IGZ1bmN0aW9uKGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBvcHRpb25zO1xuICBvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcyk7XG4gIGlmICghZmxvd0lkKSB7XG4gICAgb3B0aW9ucy5uYW1lID0gXCJpbmJveF9pbnN0YW5jZXNcIjtcbiAgfVxuICBvcHRpb25zLm9yZGVyID0gW1s4LCBcImRlc2NcIl1dO1xuICBvcHRpb25zLmZpbHRlcmVkUmVjb3JkSWRzID0gZnVuY3Rpb24odGFibGUsIHNlbGVjdG9yLCBzb3J0LCBza2lwLCBsaW1pdCwgb2xkX2ZpbHRlcmVkUmVjb3JkSWRzLCB1c2VySWQsIGZpbmRPcHRpb25zKSB7XG4gICAgdmFyIGFnX3NvcnQsIGFnZ3JlZ2F0ZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgYXN5bmNfYWdncmVnYXRlLCBmaWx0ZXJlZFJlY29yZElkcywgczEsIHMxXzAsIHMxXzE7XG4gICAgYWdncmVnYXRlX29wZXJhdGlvbiA9IFtcbiAgICAgIHtcbiAgICAgICAgJG1hdGNoOiBzZWxlY3RvclxuICAgICAgfSwge1xuICAgICAgICAkcHJvamVjdDoge1xuICAgICAgICAgIG5hbWU6IDEsXG4gICAgICAgICAgXCJfYXBwcm92ZVwiOiAnJHRyYWNlcy5hcHByb3ZlcydcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICAkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG4gICAgICB9LCB7XG4gICAgICAgICR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcbiAgICAgIH0sIHtcbiAgICAgICAgJG1hdGNoOiB7XG4gICAgICAgICAgJ19hcHByb3ZlLmlzX2ZpbmlzaGVkJzogZmFsc2UsXG4gICAgICAgICAgJ19hcHByb3ZlLmhhbmRsZXInOiB1c2VySWRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG4gICAgaWYgKHNvcnQgJiYgc29ydC5sZW5ndGggPiAwKSB7XG4gICAgICBzMSA9IHNvcnRbMF07XG4gICAgICBzMV8wID0gczFbMF07XG4gICAgICBzMV8xID0gczFbMV07XG4gICAgICBpZiAoczFfMCA9PT0gJ3N0YXJ0X2RhdGUnKSB7XG4gICAgICAgIGZpbmRPcHRpb25zLnNvcnQgPSBbWydtb2RpZmllZCcsIHMxXzFdXTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkZ3JvdXA6IHtcbiAgICAgICAgICAgIF9pZDogXCIkX2lkXCIsXG4gICAgICAgICAgICBcImFwcHJvdmVfc3RhcnRfZGF0ZVwiOiB7XG4gICAgICAgICAgICAgICRmaXJzdDogXCIkX2FwcHJvdmUuc3RhcnRfZGF0ZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYWdfc29ydCA9IHtcbiAgICAgICAgICAnYXBwcm92ZV9zdGFydF9kYXRlJzogczFfMSA9PT0gJ2FzYycgPyAxIDogLTFcbiAgICAgICAgfTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkc29ydDogYWdfc29ydFxuICAgICAgICB9KTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkc2tpcDogc2tpcFxuICAgICAgICB9KTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkbGltaXQ6IGxpbWl0XG4gICAgICAgIH0pO1xuICAgICAgICBmaWx0ZXJlZFJlY29yZElkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBhZ2dyZWdhdGUgPSBmdW5jdGlvbih0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMsIGNiKSB7XG4gICAgICAgICAgdGFibGUuY29sbGVjdGlvbi5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKGFnZ3JlZ2F0ZV9vcGVyYXRpb24pLnRvQXJyYXkoZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgICBmaWx0ZXJlZFJlY29yZElkcy5wdXNoKGRvYy5faWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgYXN5bmNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhhZ2dyZWdhdGUpO1xuICAgICAgICBhc3luY19hZ2dyZWdhdGUodGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkUmVjb3JkSWRzLnVuaXEoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvbGRfZmlsdGVyZWRSZWNvcmRJZHM7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gb3B0aW9ucztcbn07XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gVGFidWxhclRhYmxlcy5pbmJveF9pbnN0YW5jZXMgPSBuZXcgVGFidWxhci5UYWJsZShHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhcImluYm94XCIpKTtcbn0pO1xuXG5fZ2V0X291dGJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zID0gZnVuY3Rpb24oZmxvd0lkLCBmaWVsZHMpIHtcbiAgdmFyIG9wdGlvbnM7XG4gIG9wdGlvbnMgPSBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyKGZsb3dJZCwgZmllbGRzKTtcbiAgaWYgKCFmbG93SWQpIHtcbiAgICBvcHRpb25zLm5hbWUgPSBcIm91dGJveF9pbnN0YW5jZXNcIjtcbiAgfVxuICBvcHRpb25zLm9yZGVyID0gW1s5LCBcImRlc2NcIl1dO1xuICBvcHRpb25zLmZpbHRlcmVkUmVjb3JkSWRzID0gZnVuY3Rpb24odGFibGUsIHNlbGVjdG9yLCBzb3J0LCBza2lwLCBsaW1pdCwgb2xkX2ZpbHRlcmVkUmVjb3JkSWRzLCB1c2VySWQsIGZpbmRPcHRpb25zKSB7XG4gICAgdmFyIGFnX3NvcnQsIGFnZ3JlZ2F0ZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgYXN5bmNfYWdncmVnYXRlLCBmaWx0ZXJlZFJlY29yZElkcywgczEsIHMxXzAsIHMxXzE7XG4gICAgYWdncmVnYXRlX29wZXJhdGlvbiA9IFtcbiAgICAgIHtcbiAgICAgICAgJG1hdGNoOiBzZWxlY3RvclxuICAgICAgfSwge1xuICAgICAgICAkcHJvamVjdDoge1xuICAgICAgICAgIG5hbWU6IDEsXG4gICAgICAgICAgXCJfYXBwcm92ZVwiOiAnJHRyYWNlcy5hcHByb3ZlcydcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICAkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG4gICAgICB9LCB7XG4gICAgICAgICR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcbiAgICAgIH0sIHtcbiAgICAgICAgJG1hdGNoOiB7XG4gICAgICAgICAgJ19hcHByb3ZlLmlzX2ZpbmlzaGVkJzogdHJ1ZSxcbiAgICAgICAgICAkb3I6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJ19hcHByb3ZlLmhhbmRsZXInOiB1c2VySWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgJ19hcHByb3ZlLnVzZXInOiB1c2VySWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICAgIGlmIChzb3J0ICYmIHNvcnQubGVuZ3RoID4gMCkge1xuICAgICAgczEgPSBzb3J0WzBdO1xuICAgICAgczFfMCA9IHMxWzBdO1xuICAgICAgczFfMSA9IHMxWzFdO1xuICAgICAgaWYgKHMxXzAgPT09ICdteV9maW5pc2hfZGF0ZScpIHtcbiAgICAgICAgZmluZE9wdGlvbnMuc29ydCA9IFtbJ21vZGlmaWVkJywgczFfMV1dO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRncm91cDoge1xuICAgICAgICAgICAgX2lkOiBcIiRfaWRcIixcbiAgICAgICAgICAgIFwiYXBwcm92ZV9maW5pc2hfZGF0ZVwiOiB7XG4gICAgICAgICAgICAgICRsYXN0OiBcIiRfYXBwcm92ZS5maW5pc2hfZGF0ZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYWdfc29ydCA9IHtcbiAgICAgICAgICAnYXBwcm92ZV9maW5pc2hfZGF0ZSc6IHMxXzEgPT09ICdhc2MnID8gMSA6IC0xXG4gICAgICAgIH07XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJHNvcnQ6IGFnX3NvcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJHNraXA6IHNraXBcbiAgICAgICAgfSk7XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJGxpbWl0OiBsaW1pdFxuICAgICAgICB9KTtcbiAgICAgICAgZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgYWdncmVnYXRlID0gZnVuY3Rpb24odGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikge1xuICAgICAgICAgIHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5KGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgICAgZmlsdGVyZWRSZWNvcmRJZHMucHVzaChkb2MuX2lkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGFzeW5jX2FnZ3JlZ2F0ZSA9IE1ldGVvci53cmFwQXN5bmMoYWdncmVnYXRlKTtcbiAgICAgICAgYXN5bmNfYWdncmVnYXRlKHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkcyk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFJlY29yZElkcy51bmlxKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb2xkX2ZpbHRlcmVkUmVjb3JkSWRzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFRhYnVsYXJUYWJsZXMub3V0Ym94X2luc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlKEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKFwib3V0Ym94XCIpKTtcbn0pO1xuXG5pZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gIFRhYnVsYXJUYWJsZXMuZmxvd0luc3RhbmNlcyA9IG5ldyBSZWFjdGl2ZVZhcigpO1xufVxuXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFRyYWNrZXIuYXV0b3J1bihmdW5jdGlvbihjKSB7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCAmJiAhU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJmbG93SWRcIikgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgIT09ICdkcmFmdCcpIHtcbiAgICAgICAgcmV0dXJuIE1ldGVvci5jYWxsKFwibmV3SW5zdGFuY2VzTGlzdFRhYnVsYXJcIiwgU2Vzc2lvbi5nZXQoXCJib3hcIiksIFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpLCBmdW5jdGlvbihlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgbmV3SW5zdGFuY2VzTGlzdFRhYnVsYXIoU2Vzc2lvbi5nZXQoXCJib3hcIiksIFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpLCByZXN1bHQpO1xuICAgICAgICAgIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZV9saXN0Ll9jaGFuZ2VPcmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSk7XG5cbm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyID0gZnVuY3Rpb24oYm94LCBmbG93SWQsIGZpZWxkcykge1xuICB2YXIgZmxvdywga2V5LCByZWYsIHJlZjEsIHJlZjI7XG4gIGlmICghZmllbGRzKSB7XG4gICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmbG93SWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZm9ybTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGZpZWxkcyA9IChyZWYgPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgIF9pZDogZmxvdyAhPSBudWxsID8gZmxvdy5mb3JtIDogdm9pZCAwXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgICdjdXJyZW50LmZpZWxkcyc6IDFcbiAgICAgIH1cbiAgICB9KSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLmN1cnJlbnQpICE9IG51bGwgPyByZWYxLmZpZWxkcyA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgfVxuICBmaWVsZHMgPSBfaGFuZGxlTGlzdEZpZWxkcyhmaWVsZHMpO1xuICBpZiAoKGZpZWxkcyAhPSBudWxsID8gKHJlZjIgPSBmaWVsZHMuZmlsdGVyUHJvcGVydHkoXCJpc19saXN0X2Rpc3BsYXlcIiwgdHJ1ZSkpICE9IG51bGwgPyByZWYyLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAga2V5ID0gXCJpbnN0YW5jZUZsb3dcIiArIGJveCArIGZsb3dJZDtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBUYWJ1bGFyVGFibGVzLmZsb3dJbnN0YW5jZXMuc2V0KG5ldyBUYWJ1bGFyLlRhYmxlKEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKGJveCwgZmxvd0lkLCBmaWVsZHMpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ldyBUYWJ1bGFyLlRhYmxlKEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKGJveCwgZmxvd0lkLCBmaWVsZHMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnNvbGUubG9nKFwibmV3IFRhYnVsYXJUYWJsZXMgXCIsIGtleSk7XG4gIH1cbn07XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgTWV0ZW9yLm1ldGhvZHMoe1xuICAgIG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyOiBmdW5jdGlvbihib3gsIGZsb3dJZCkge1xuICAgICAgdmFyIGZpZWxkcywgZmxvdywgcmVmLCByZWYxO1xuICAgICAgbmV3SW5zdGFuY2VzTGlzdFRhYnVsYXIoYm94LCBmbG93SWQpO1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZsb3dJZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBmb3JtOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZmllbGRzID0gKHJlZiA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZsb3cgIT0gbnVsbCA/IGZsb3cuZm9ybSA6IHZvaWQgMFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAnY3VycmVudC5maWVsZHMnOiAxXG4gICAgICAgIH1cbiAgICAgIH0pKSAhPSBudWxsID8gKHJlZjEgPSByZWYuY3VycmVudCkgIT0gbnVsbCA/IHJlZjEuZmllbGRzIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICB9XG4gIH0pO1xufVxuIl19
