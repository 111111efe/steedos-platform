(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var DDP = Package['ddp-client'].DDP;
var DDPServer = Package['ddp-server'].DDPServer;
var check = Package.check.check;
var Match = Package.check.Match;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var JsonRoutes = Package['simple:json-routes'].JsonRoutes;
var RestMiddleware = Package['simple:json-routes'].RestMiddleware;
var Restivus = Package['nimble:restivus'].Restivus;
var SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;
var MongoObject = Package['aldeed:simple-schema'].MongoObject;
var Tabular = Package['aldeed:tabular'].Tabular;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var WorkflowManager = Package['steedos:app-workflow'].WorkflowManager;
var uuflowManager = Package['steedos:app-workflow'].uuflowManager;
var pushManager = Package['steedos:app-workflow'].pushManager;
var steedosExport = Package['steedos:app-workflow'].steedosExport;
var steedosImport = Package['steedos:app-workflow'].steedosImport;
var Template = Package['meteorhacks:ssr'].Template;
var SSR = Package['meteorhacks:ssr'].SSR;
var SubsManager = Package['meteorhacks:subs-manager'].SubsManager;
var WebApp = Package.webapp.WebApp;
var WebAppInternals = Package.webapp.WebAppInternals;
var main = Package.webapp.main;
var moment = Package['momentjs:moment'].moment;
var CFDataManager = Package['steedos:autoform'].CFDataManager;
var ServerSession = Package['steedos:base'].ServerSession;
var Selector = Package['steedos:base'].Selector;
var Steedos = Package['steedos:base'].Steedos;
var AjaxCollection = Package['steedos:base'].AjaxCollection;
var SteedosDataManager = Package['steedos:base'].SteedosDataManager;
var SteedosOffice = Package['steedos:base'].SteedosOffice;
var billingManager = Package['steedos:base'].billingManager;
var MailQueue = Package['steedos:mailqueue'].MailQueue;
var WebhookQueue = Package['steedos:webhookqueue'].WebhookQueue;
var _i18n = Package['universe:i18n']._i18n;
var i18n = Package['universe:i18n'].i18n;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var meteorInstall = Package.modules.meteorInstall;
var HTML = Package.htmljs.HTML;
var Collection2 = Package['aldeed:collection2-core'].Collection2;
var FS = Package['steedos:cfs-base-package'].FS;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;

/* Package-scope variables */
var __coffeescriptShare, Workflow, InstanceReadOnlyTemplate, TemplateManager, SteedosTable, year, month, date, hours, seconds, locale, utcOffset, str, addItemTr, values_history, current_user_info, flow_id, userId, orgFieldUsers, formula_values, new_ins_id, instanceHtml, Form_formula, getHandlersManager, permissionManager, approveManager, flowManager, formManager, stepManager, workflowTemplate, InstanceManager, WorkflowManager_format, CoreForm, InstanceNumberRules;

var require = meteorInstall({"node_modules":{"meteor":{"steedos:workflow":{"i18n":{"en.i18n.json.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/i18n/en.i18n.json.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Package['universe:i18n'].i18n.addTranslations('en','',{"Steedos Workflow":"Workflow","inbox":"Inbox","outbox":"Outbox","draft":"Draft","pending":"In Progress","completed":"Finished","monitor":"Monitor","FlowName":"Workflow Name","Search":"Search","My Approval":"My Approval","My Applications":"My Applications","Submit":"Submit","steedos_desktop":"Steedos Desktop","menu_navigation":"Navigation","Workflow":"Workflow","form_new":"New","instances":"Request","instances_name":"Title","instances_applicant_name":"Applicant","instances_modified":"Modified","instances_applicant_organization_name":"Organization","instances_submit_date":"Submit Date","instances_flow":"Workflow","instances_step_current_name":"Current step","instances_flow_name":"Workflow","instances_current_step_name":"Current step","instance_approve":"Approve","instance_reject":"Reject","instance_readed":"Read","instance_next_step":"Next Step","instance_next_step_users":"Next Step User(s)","instance_initiator":"Initiator","instance_approval_history":"Approval History","instance_in_progress":"In Progress","instance_submit":"Submit","instance_save":"Save","instance_delete":"Delete","instance_attachment":"Attachments","instance_cancel":"Cancel Request","instance_reassign":"Reassign","instance_relocate":"Relocate","instance_print":"Print","flow_roles":"Workflow Positions","flow_roles_name":"Position Name","flow_positions":"Positions Users","flow_positions_role":"Position","flow_positions_org":"Organization","flow_positions_users":"Users","flow_positions_role_name()":"Position","flow_positions_org_name()":"Organization","flow_positions_users_name()":"Users","workflow_table_confirm":"OK","workflow_table_delete":"Delete","Attachment deleted successfully":"Attachment deleted successfully!","Attachment was added successfully":"Attachment was added successfully!","Saved successfully":"Saved successfully!","Added successfully":"Added successfully!","Deleted successfully":"Deleted successfully!","Submitted successfully":"Submitted successfully!","Canceled successfully":"Canceled successfully!","Reassigned successfully":"Reassigned successfully!","Relocated successfully":"Relocated successfully!","Attachments":"Attachments","Versions":"Versions","Current Version":"（Current Version）","workflow_attachment_free_size_limit":"Sorry, Attachment larger than 1M is not accepted for free version.","workflow_attachment_paid_size_limit":"Failed to upload, because attachment size is over ","workflow_attachment_download":"Download","workflow_attachment_view":"View","workflow_attachment_isReadOnly":"ReadOnly-","workflow_attachment_versions":"Versions","workflow_attachment_uploading":"Uploading ","workflow_attachment_downloading":"Downloading %s...","workflow_attachment_creating":"Creating a new file: %s...","workflow_attachment_officeOnline":"Edit","workflow_attachment_save":"Save","workflow_attachment_close":"Close","workflow_attachment_delete":"Delete","workflow_attachment_convert_to_pdf":"Converting '%s' to pdf format...","workflow_attachment_wordToPdf":"Convert To Pdf","workflow_attachment_wordToPdf_failed":"Convert to PDF failed!","workflow_attachment_locked_tip":"Unlock the file, then submit","Instance State approved":"Approved","Instance State rejected":"Rejected","Instance State terminated":"Cancelled","Instance State finished":"Completed","Instance State pending":"In Progress","Instance State reassigned":"Reassigned","Instance State relocated":"Relocated","Instance Relocate Hint":"Enter your comments here.","Instance Relocate Title":"Relocate","Instance Relocate Reason":"Comments are required.","Instance Relocate NewInboxUsers":"Please select a user.","Instance Relocate Ok":"Relocated successfully.","Instance Relocate CurStep":"Current Step: ","instance_reassign_title":"Reassign","instance_reassign_curstep":"Current Step: ","instance_reassign_reason":"Enter your comments here.","instance_reassign_ok":"Reassigned successfully.","instance_reassign_user":"Select User(s)","instance_cancel_title":"Cancel Request","instance_cancel_reason":"Enter your comments here","instance_reassign_error_reason_required":"Comments are required.","instance_reassign_error_users_required":"Please select a user.","instance_cancel_error_reason_required":"Comments are required.","instance_select_next_step":"Please select next step","instance_multi_next_step_tips":"Multi next steps，please select next step，and send the request by click the bottom Send button","instance_next_step_user":"Please select next step user(s)","instance_reasons_reject":"Reasons necessary when reject the application","instance_field":"The field","instance_is_required":"is required","instance_email_format_error":"Format error of the email address","node_office_edit_online":"Edit Online","node_office_message":"You are editing document, please save and exit Office software when done.","node_office_warning":"The file has been modified, do you want to save it as a new version?","node_office_upload":"Upload ","node_office_confirm":"Confirm","node_office_cancel":"Cancel","node_office_uploaded":"The attachment has been uploaded","node_office_filePath":"File: ","node_office_exists_message":"File already exists, replace it?","node_office_workflow":"Workflow","node_pdf_error":"Pdf signature failed, please re-sign!","node_pdf_sign_online":"Sign Online","node_pdf_message":"You are signing pdf file.","node_pdf_filePath":"File: ","workflow_export_thismonth":"Export requests this month","workflow_export_lastmonth":"Export requests last month","workflow_export_thisyear":"Export requests this year","workflow_export_all":"Export all requests","workflow_export_filter":"Filter by process","workflow_export_search":"Search for requests according to the workflow","workflow_export_data":"Export to Excel","spaces_isarrearageSpace":"your space is arrearage","cc_help":"https://www.steedos.com/us/help/workflow/instance_carboncopy.html","relocate_help":"https://www.steedos.com/us/help/workflow/instance_relocate.html","reassign_help":"https://www.steedos.com/us/help/workflow/instance_reassign.html","forward_help":"https://www.steedos.com/us/help/workflow/instance_forward.html","export_filter_help":"https://www.steedos.com/us/help/workflow/instance_search.html","new_help":"https://www.steedos.com/us/help/workflow/instance_add.html","Inbox Suggestion NextSteps Label":"Next step: ","Inbox Suggestion NextSteps Handler Label":"Assignee: ","Workflow Designer":"Workflow Designer","User Management":"User Management","All flows":"All workflows","Select a flow":"Select a workflow","Fill in form":"New Request","Flow upgraded":"The workflow has been upgraded. Please make sure this request meet the requirements of the new version.","Are you sure?":"Are you sure?","Select placeholder":"Please select","workflow_no_category":"No category","space_users_error_space_required":"Space required","flow_roles_error_positions_exists":"Users exised in the role","workflow_left_parenthesis":"(","workflow_right_parenthesis":")","instance_cc_description":"Carbon Description","instance_cc_from":"Carbon Form","instance_cc_title":"Carbon Copy","instance_cc_done":"Carbon copied!","instance_curstep":"Current Step: ","instance_cc_user":"Carbon Copy To","instance_cc_error_users_required":"Please select user.","workflow_form_edit":"Workflow List","flows_template":"Request Template","flows_name":"Workflow Name","flows_print_template":"Print Template","flows_instance_template":"Form Template","flows_description":"Flow Description","workflow_attach_unlock":"Unlock","workflow_attach_locked_by":"%s is editing","workflow_attach_confirm_delete":"Are you sure?","workflow_attach_confirm_delete_messages":"You will not be able to recover this imaginary file!","workflow_attach_confirm":"Delete","workflow_attach_cancel":"Cancel","workflow_attach_to_pdf":"Convert to PDF","workflow_attach_to_pdf_message":"Convert '%s' to pdf format?","workflow_attach_upload":"Upload","workflow_attach_new":"New","workflow_attachment_signature":"Signature","workflow_select_an_app":"Steedos Apps","workflow_suggestion_placeholder":"Please fill in comments.","instance_opinion_title":"Opinions","instance_opinion_btn":"Opinions","instance_opinion_input":"Add a opinion","instance_opinion_add_success":"Add successfully!","instance_opinion_remove_success":"Remove successfully!","instance_opinion_error":"Error","instance_opinion_exists":"Opinion exists","instance_opinion_add_tip":"You have not set up common comments yet.","instance_forward_title":"Request Forward","form_field_checkbox_yes":"YES","form_field_checkbox_no":"NO","flows_events":"Events","flows_events_error":"Workflow Script Error: ","instance_search_advanced_search":"Advanced search","instance_search_flow":"Workflow","instance_search_name":"Request Title","instance_search_file":"Request Title","instance_search_applicant_name":"Applicant Name","instance_search_applicant_organization_name":"Applicant Organization","instance_search_submit_date":"Submit Date","instance_search_start":"Start","instance_search_end":"End","instance_search_result_tip":"Filtered Result","instance_search_state":"Request State","instance_search_state_options":{"pending":"Pending","completed":"Completed"},"instance":{"formatter":{"date":{"simple_date":"bb DD, YYYY","simple_datetime":"bb DD, YYYY HH:MM","export_date":"YYYY-MM-DD","export_datetime":"YYYY-MM-DD HH:MM"},"checkbox":{"checked":"YES","unchecked":"NO"}},"instance_view":"<br/><br/>Following are the contents of the request:<br/>Space : {$space_name};<br/>Initiator : {$applicant_name};<br/>Submit Date : {$submit_date};","push":{"final_decision_approved":"Approved","final_decision_rejected":"Rejected","final_decision_nil":"","title":{"first_submit_applicant":"{$from_username}","first_submit_inbox":"{$from_username}","submit_pending_rejected_applicant_inbox":"{$from_username}","submit_pending_rejected_applicant":"{$from_username}","submit_pending_rejected_approve":"{$from_username}","submit_pending_rejected_inbox":"{$from_username}","submit_pending_inbox":"{$from_username}","submit_terminate_applicant":"{$from_username}","submit_terminate_approve":"{$from_username}","monitor_delete_applicant":"{$applicant_name}","submit_completed_applicant":"{$applicant_name}","submit_completed_approve":"{$from_username}","approved_completed_applicant":"{$applicant_name}","approved_completed_approve":"{$from_username}","rejected_completed_applicant":"{$applicant_name}","rejected_completed_approve":"{$from_username}","reassign_new_inbox_users":"{$from_username}","trace_approve_cc":"{$from_username}","trace_approve_cc_submit":"{$from_username}","auto_submit_pending_inbox":"{$from_username}","return_pending_inbox":"{$from_username}"},"body":{"input":"input","approval":"approval","first_submit_applicant":"I have submitted a {$instance_name} request for you","first_submit_inbox":"My {$instance_name} request needs your {$approve_type}","submit_pending_rejected_applicant_inbox":"Request for {$instance_name} has been rejected","submit_pending_rejected_applicant":"Request for {$instance_name} has been rejected to {$nextApprove_usersname}","submit_pending_rejected_approve":"","submit_pending_rejected_inbox":"My {$instance_name} request needs your {$approve_type}","submit_pending_inbox":"My {$instance_name} request needs your {$approve_type}","submit_terminate_applicant":"Request for {$instance_name} has been cancelled","submit_terminate_approve":"","monitor_delete_applicant":"Request for {$instance_name} has been deleted","submit_completed_applicant":"Request for {$instance_name} has been approved","submit_completed_approve":"","approved_completed_applicant":"Request for {$instance_name} has been approved","approved_completed_approve":"","rejected_completed_applicant":"Request for {$instance_name} has been rejected","rejected_completed_approve":"","reassign_new_inbox_users":"My {$instance_name} request needs your {$approve_type}","trace_approve_cc":"My {$instance_name} request needs your {$approve_type}","remind":"Remind：{$instance_name}, Deadline：{$deadline}","trace_approve_cc_submit":"I have submitted a cc {$instance_name}","distribute_remind":"My {$instance_name} has been end","auto_submit_pending_inbox":"Your {$instance_name} auto submitted to {$current_step_name}","return_pending_inbox":"Request for {$instance_name} has been returned"}},"email":{"final_decision_approved":"Approved","final_decision_rejected":"Rejected","final_decision_nil":"","inscribed":"<br/><br/>Sincerely,<br/>","footnote":"This is an automatically generated email, please do not reply to it.","title":{"input":"input","approval":"approval","first_submit_applicant":"I have submitted a {$instance_name} request for you","first_submit_inbox":"My {$instance_name} request needs your {$approve_type}","submit_pending_rejected_applicant_inbox":"Request for {$instance_name} has been rejected","submit_pending_rejected_applicant":"Request for {$instance_name} has been rejected to {$nextApprove_usersname}","submit_pending_rejected_approve":"","submit_pending_rejected_inbox":"My {$instance_name} request needs your {$approve_type}","submit_pending_inbox":"My {$instance_name} request needs your {$approve_type}","submit_terminate_applicant":"Request for {$instance_name} has been cancelled","submit_terminate_approve":"","monitor_delete_applicant":"{$instance_name} has been deleted","submit_completed_applicant":"I have approved your request for {$instance_name}","submit_completed_approve":"","approved_completed_applicant":"I have approved your request for {$instance_name}","approved_completed_approve":"","rejected_completed_applicant":"I have rejected your request for {$instance_name}","rejected_completed_approve":"","reassign_new_inbox_users":"My {$instance_name} request needs your {$approve_type}","trace_approve_cc":"My {$instance_name} request needs your {$approve_type}","auto_submit_pending_inbox":"Your {$instance_name} has been submitted automatically","return_pending_inbox":"I have returned your request for {$instance_name}"},"body":{"url_input":"input","url_approval":"approval","input":"input","approval":"approval","judge_approved":"approved","judge_submitted":"provided his input for","email_description":"Comments : {$description}.","first_submit_applicant":"Hi {$to_username},<br/><br/>I have submitted a {$instance_name} request on behalf of you.<br/><a href = {$href}>Please click here to view this request.</a>","first_submit_applicant_beApproveDescription":"Hi {$to_username},<br/><br/>I have submitted a {$instance_name} request on behalf of you, and attached the following comments with the request.<br/>Comments : {$approves_description}<br/><a href = {$href}>Please click here to view this request.</a>","first_submit_inbox":"Hi {$to_username},<br/><br/>{$applicant_name} has submitted a {$instance_name} request, which needs your {$approve_type}.<br/><a href = {$href}>Please click here to view this request.</a>","first_submit_inbox_beApproveDescription":"Hi {$to_username},<br/><br/>{$applicant_name} has submitted a {$instance_name} request, which needs your {$approve_type}. He / she has attached the following comments with the request.<br/>Comments : {$approves_description}<br/><a href = {$href}>Please click here to view this request.</a>","submit_pending_rejected_applicant_inbox":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been rejected by {$lastApprove_usersname} with the following comments.<br/>{$description}<br/><a href = {$href}>Please click here to view this request.</a>","submit_pending_rejected_applicant":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been rejected by {$lastApprove_usersname}.He / She has attached the following comments with the request, and has sent it to {$nextApprove_usersname}<br/>{$description}<br/><a href = {$href}>Please click here to view this request.</a>","submit_pending_rejected_approve":"","submit_pending_rejected_inbox":"Hi {$to_username},<br/><br/>{$applicant_name}'s request for {$instance_name} needs your {$approve_type}, which has been rejected by {$lastApprove_usersname} with the following comments.<br/>{$description}<br/><a href = {$href}>Please click here to view this request.</a>","submit_pending_inbox":"Hi {$to_username},<br/><br/>{$applicant_name} has submitted a {$instance_name} request, which needs your {$approve_type}. {$lastApprove_usersname} has {$last_approve_judge} this request.<br/><a href = {$href}>Please click here to view this request.</a>","submit_pending_inbox_beApproveDescription":"Hi {$to_username},<br/><br/>{$applicant_name} has submitted a {$instance_name} request, which needs your {$approve_type}. {$lastApprove_usersname} has {$last_approve_judge} this request with the following comments.<br/>Comments : {$approves_description}<br/><a href = {$href}>Please click here to view this request.</a>","submit_pending_inbox_beApproveDescription_counterSign":"Hi {$to_username},<br/><br/>{$applicant_name} has submitted a {$instance_name} request, which needs your {$approve_type}. {$lastApprove_usersname} has provided their input for this request with the following comments.<br/>Comments : <br/>","submit_terminate_applicant":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been cancelled by {$current_username}.He / She has attached the following comments with the request.<br/>Comments : {$description}.","submit_terminate_approve":"","monitor_delete_applicant":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been deleted.","submit_completed_applicant":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been completed by {$lastApprove_usersname}.<br/><a href = {$href}>Please click here to view this request.</a>","submit_completed_applicant_beApproveDescription":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been completed by {$lastApprove_usersname}. He / she has attached the following comments with the request. <br/>Comments : {$approves_description}<br/><a href = {$href}>Please click here to view this request.</a>","submit_completed_applicant_beApproveDescription_counterSign":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been completed by {$lastApprove_usersname}. They has attached the following comments with the request. <br/>Comments :<br/>","submit_completed_approve":"","approved_completed_applicant":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been final approved by {$lastApprove_usersname}.<br/><a href = {$href}>Please click here to view this request.</a>","approved_completed_applicant_beApproveDescription":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been final approved by {$lastApprove_usersname}. He / she has attached the following comments with the request. <br/>Comments : {$approves_description}<br/><a href = {$href}>Please click here to view this request.</a>","approved_completed_approve":"","rejected_completed_applicant":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been final rejected by {$lastApprove_usersname}. He / She has attached the following comments with the request.<br/>{$description}<br/><a href = {$href}>Please click here to view this request.</a>","rejected_completed_approve":"","reassign_new_inbox_users":"Hi {$to_username},<br/><br/>{$current_user_name} has transferred {$applicant_name}'s {$instance_name} to you with the following comments. <br/>Comments : {$description}<br/><a href = {$href}>Please click here to view this request.</a>。","trace_approve_cc":"Hi {$to_username},<br/><br/>{$applicant_name} has cc a {$instance_name} request, which needs your {$approve_type}.<br/><a href = {$href}>Please click here to view this request.</a>","auto_submit_pending_inbox":"Hi {$to_username},<br/><br/>Your {$instance_name} has been submitted to {$current_step_name} automatically.","return_pending_inbox":"Hi {$to_username},<br/><br/>Your request for {$instance_name} has been returned by {$current_username}.He / She has attached the following comments with the request.<br/>Comments : {$description}."}},"remindMessage":{"update_failed":"Requested action not taken, because this request has been updated.","has_deleted":"This report has been deleted."},"judge":{"approved":"approved","rejected":"rejected"}},"flow":{"point_upgraded":"The workflow has been upgraded. Please make sure this request meet the requirements of the new version.","print_select_template_alert":"Please upgraded to Professional Version.","print_select_title":"Select Template","print_default_print_title":"Default","print_custom_print_title":"Custom","print_button_title":"Print","print_html_title":"SteedOS"},"help":{"href":"<a href = {$href}>Please click here to view this request.</a>","approves":"Approval History","initiator":"Initiator : ","attachment":"Attachment"},"export":{"code":"Code","name":"Name","initiator":"Initiator","initiator_org":"Initiator's Organization","submit_date":"Submit Time","status":"Status","current_step_name":"Current Step Name","current_step_start_date":"Current Step Start Time","state":{"pending":"In Progress","approved":"Approved","rejected":"Rejected","terminated":"Cancelled","finished":"Completed","reassigned":"Reassigned","inhand":"In Progress","relocated":"Relocated"}},"steedos":"Steedos","cc":"cc","saveInstanceToAttachment":"Save request form as an attachment.","forwardFlowText":"Forward description","instanceForwardNote":"Forward the currently selected request to a new workflow and proceed with the approval process.","button_preview":"Preview","remove_cc_approve":"Deleted success","forward_instance_success":"Forward success","isForwardAttachments":"Is forward attachments.","instance_retrieve":"Retrieve","instance_retrieve_reason":"Remarks","instance_retrieve_rules_title":"Retrieve failed","instance_retrieve_rules_content":"You can not retrive a request if user in next step has read the request, or you are in a concurrent signed step.","Retrieved successfully":"Retrieved successfully!","Instance State retrieved":"Retrieved","instance_chrome_print_warning":"Please use the Chrome browser to print.","instance_sign":"Sign","instance_default_opinion":"Already read","instance_submit_date":"Submit date","instance_opinion_edit":"Edit the opinion","instance_opinion_edit_success":"Edit successfully!","instance_opinion_field":"Sign field","instance_cc_error_opinion_field_required":"Please select the sign field","instance_suggestion_toggle":"Sign","instance_approve_read":"Read","instance_approve_from_user_name_label":"cc from","instance_approve_status_text_label":"status","instance_approve_description_label":"suggestion","instance_approve_start_date_label":"start date","instance_approve_finish_date_label":"finish date","instance_approve_read_yes":"yes","instance_approve_read_no":"no","instance_approve_cc_remove":"cancel cc","instance_approve_close_modal":"close","instance_approve_title_label":"Handler:","instance_forward_users":"Forward To","instance_forward_error_users_required":"Users required!","instance_approve_from_user_name_label_forward":"Forward from","instance_approve_forward_remove":"Cancel forward","instance_approve_forward_remove_success":"Request cancelled successfully!","instance_forward_instance_look":"Look the forwarded request","instance_forward_cannot_cancel":"Can not cancel!","instance_forward_instance_state_changed":"Request state has hanged, can not cancel.","webhooks":"Webhooks","webhooks_flow":"Workflow","webhooks_payload_url":"URL","webhooks_content_type":"Content type","webhooks_active":"Active","webhooks_flow_name()":"Workflow","webhooks_description":"Description","workflow_list":"Workflow List","workflow_import_flow":"Import Workflow","workflow_import_flow_success":"Import success","workflow_import_flow_error":"Import failed","workflow_import_flow_info":"Please select the workflow you want to import","flows":"Workflow","instance_readonly_view_url_copy":"Copy Link","instance_readonly_view_url_copy_success":"Tableau Web Data Connector copy successful","instance_related_instances":"Related requests","instance_related_instances_title":"Linked requests","instance_related_instances_placeholder":"Please enter the file name to search for the associated file","workflow_install_desktop":"Install Desktop","workflow_chart":"Workflow Chart","instance_return":"Return","instance_return_success":"Return successfully","instance_return_confirm":"Return the request to {$step_name}({$handlers_name})?","Instance State returned":"Returned","instance_main_attachment":"Main attach","flows_field_map":"Field Map","Instance State readed":"Read","instance_distribute_title":"Distribute","instance_distribute_users":"Users","instance_distribute_error_users_required":"Users required!","instance_distribute_approve_from_user_name_label":"Distribute from","instance_distribute_approve_remove":"Cancel distribute","instance_distribute_instance_look":"Look the distributed request","instance_distribute_note":"Distribute the currently selected request to a new workflow and proceed with the approval process.","instance_distribute_attachments":"Is distribute attachments.","instance_distribute_success":"Distribute success","instance_no_add_permission":"{$actiontype} failed, users no create permission: {$usernames}","instance_workflow_chart_ie_warning":"Do not support viewing the workflow chart in IE, please do this on client software or chrome.","instance_remind_title":"Remind","instance_remind_select_users":"Users","instance_remind_count":"Mode","instance_remind_deadline":"Deadline","instance_remind_success":"Remind successfully","instance_remind_need_remind_users":"Need users","instance_remind_need_remind_count":"Need mode","instance_remind_need_remind_deadline":"Need deadline","instance_remind_count_options":{"single":"single","multi":"multi"},"instance_opinion_title_select":"Select opinions","categories":"Workflow categories","categories_name":"Name","categories_sort_no":"Sort no","not_found_user":"Not Found User","next_step_users_not_found":{"aplicant_superior":"The applicant's superior is not configured, please contact the Administrator.","applicant_role":"The <{$role_name}> you are looking for have not configured,Please contact the administrator.","field_value_empty":"Please enter the value of the <{$field_name}>field","org_no_members":"The next step need <{$org_name}> processing,Please contact the administrator."},"instanc_admin_role_text":"<a href='%s' target='_blank'> configuration in position</a>","instanc_user_role_text":" configuration in position","instanc_set_applicant_role_text":"set positions users","instance_sign_read":"Read","instance_sign_done":"Done","instance_sign_agree":"Agree","instance_sign_period":"。","instance_cc_alert":"Please confirm whether it need to circulate","instance_cc_must_finished":"The cc users：{$not_finished_users_name} had not deal with this request, so you can not submitt this instance to next step","instance_number_rules":"Request number rules","instance_number_rules_name":"Name","instance_number_rules_year":"Year","instance_number_rules_first_number":"Start sequence","instance_number_rules_number":"Sequence","instance_number_rules_rules":"Rules","instance_number_rules_number_builder_error_title":"Builder number error","instance_number_rules_number_builder_error_not_exist":"The number rule does not exist: ","ConfirmDeletion?":"Are you sure?","instance_number_rules_name_only":"The name can not be repeated","flows_btn_export_title":"Export Flow","flows_btn_copylink_title":"Copy Link","instance_distribute_related_instances_title":"Automatically create associated requests","instance_next_step_users_placeholder":"Please select the approver","instance_distribute_to_self":"Also distributed to yourself","my_instances":"My Requests","workflow_import_export_flows":"Workflow import or export","workflow_history_approve_counts":"Show %s history descriptions","workflow_history_approve_description":"History description","instances_start_date":"Receiving time","instances_is_archived":"Archived","instances_archive":"Archive","instances_archived":"Archived","instances_not_archived":"Not archived","workflow_more_inbox":"More Inbox","instance_back":"Back","steedos_tableau_statistical_analysis":"Statistical analysis","steedos_tableau_copy_link":"Copy link","tableau_introduction_modal_close":"Close","ERROR":"Error","steedos_table_add_item":"Add item","approved_description":"Approved","rejected_description":"Rejected","copy":"Copy and Create","from":"From","admin_flow_roles_create":"Create","flow_roles_delete_success":"Delete successfully","add_positions":"Add","save_role":"Save","delete_role":"Delete","flow_roles_update_success":"Update successfully","flow_roles_necessary":"Please fill in role's name","flow_positions_add_suceess":"Add successfully","flow_positions_add_failed":"Be failed to add","flow_positions_update_suceess":"Update successfully","flow_positions_update_failed":"Be failed to update","flow_positions_delete_suceess":"Delete successfully","instance_role_set_is_complete":"Role set up?","instance_set_is_complete":"set up?","flow_roles_help":"Help","set_org_members":"Set department members","set_applicant_manager":"Set the applicant supervisor","instance_permissions_error":"You do not have permission to view this request","start_flows":"Start flows","chart_traces":"Chart Traces","cc_tag":"(Carbon Copying)","workflow_batch_approval":"Batch approval","workflow_batch_approval_btn":"Batch<br/>approval","workflow_batch_approval_processing":"Processing","workflow_batch_approval_message":"This processing file %s","workflow_error_multiple_next_step_users":"'{$insname}' the next person can not handle more than one","workflow_error_multiple_next_step":"'{$insname}' can not have more than one next step","workflow_batch_instances_empty":"There is no data for batch approval","workflow_sign_opinion_to_completed_instance":"This document is over and the signed opinion will not be displayed on the application","workflow_copy_flow":"Copy flow","workflow_copy_flow_text":"Please fill in the new flow name","workflow_copy_flow_success":"The copy flow is successful","workflow_copy_flow_error_reason_required":"Comments are required.","workflow_enabled":"Enabled","workflow_disabled":"Disabled","flows_state":"State","flows_current_modified":"Modified","flows_modified_by_name()":"Editor","flows_category_name()":"Categories","flow_list_title_set_template":"Set Template","flow_list_title_set_script":"Set Script","flow_list_title_set_fieldsMap":"Set Archive relationship","distribute_edit_flow_select_users":"users options","distribute_edit_flow_select_flows":"flows options","flow_list_title_set_distribute":"Set Distribute","distribute_to_self":"can distribute to self","distribute_end_notification":"notificate user after distributed end","instance_deleted":"Deleted","workflow_flow_state_disabled":"The state of flow({$name}) is disabled, Administrator can enable flow.","flow_roles_error_flows_used":"Role has been used by flows: {$names}","instance_approve_not_yet_handled":"Not yet handled","instance_approve_distribute_date_label":"Distribute date","flows_auto_remind":"Auto remind","flows_upload_after_being_distributed":"Allow upload after being distributed","instances_my_finish_date":"Modified","pager_input_hint":"Click and input page number, then press Enter to jump to the specified page","instance_hide_title":"Hide","instance_hide_success":"Hide Success","instance_reopen_title":"Unhide","instance_reopen_success":"Unhide Success","workflow_design_flow":"Design flow","process_delegation_rules":"Process Delegation","process_delegation_rules_from":"From","process_delegation_rules_to":"To","process_delegation_rules_enabled":"Enabled","process_delegation_rules_start_time":"Strat Time","process_delegation_rules_end_time":"End Time","process_delegation_rules_from_name":"From","process_delegation_rules_to_name":"To","process_delegation_rules_start_must_lt_end":"Strat time must less than end time","process_delegation_rules_description":"{$userName} delegated","instance_handler_name":"Handler","instance_handler_organization_fullname":"Organization","url_invalid":"Invalid link","instance_approve_timeout_auto_submitted":"Timeout auto submitted"});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"zh-CN.i18n.json.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/i18n/zh-CN.i18n.json.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Package['universe:i18n'].i18n.addTranslations('zh-CN','',{"Steedos Workflow":"审批","inbox":"待审核","outbox":"已审核","draft":"草稿","pending":"进行中","completed":"已完成","monitor":"监控箱","FlowName":"名称","Search":"搜索","My Approval":"审核","My Applications":"我的申请单","Submit":"提交","steedos_desktop":"华炎云","menu_navigation":"导航","Workflow":"审批","form_new":"新建表单","instances":"审批","instances_name":"标题","instances_applicant_name":"提交人","instances_modified":"处理时间","instances_applicant_organization_name":"部门","instances_submit_date":"提交时间","instances_flow":"流程","instances_step_current_name":"当前步骤","instances_flow_name":"流程","instances_current_step_name":"当前步骤","instance_approve":"核准","instance_reject":"驳回","instance_readed":"已阅","instance_next_step":"下一步","instance_next_step_users":"处理人","instance_initiator":"提交人","instance_approval_history":"签核历程","instance_in_progress":"处理中","instance_submit":"提交","instance_save":"保存","instance_delete":"删除","instance_attachment":"附件","instance_cancel":"取消申请","instance_reassign":"转签核","instance_relocate":"重定位","instance_print":"打印","flow_roles":"审批岗位","flow_roles_name":"岗位名称","flow_positions":"岗位成员","flow_positions_role":"岗位","flow_positions_org":"审批范围","flow_positions_users":"岗位成员","flow_positions_role_name()":"岗位","flow_positions_org_name()":"审批范围","flow_positions_users_name()":"岗位成员","workflow_table_confirm":"确认","workflow_table_delete":"删除","Attachment deleted successfully":"文件删除成功!","Attachment was added successfully":"文件添加成功!","Saved successfully":"申请单已暂存.","Added successfully":"创建成功!","Deleted successfully":"删除成功!","Submitted successfully":"提交成功!","Canceled successfully":"取消申请成功!","Reasigned successfully":"转签核成功!","Relocated successfully":"重定位成功!","Attachments":"附件","Versions":"版本","Current Version":"（最新版本）","workflow_attachment_free_size_limit":"抱歉，免费版工作区只能上传1M以内的文件。","workflow_attachment_paid_size_limit":"您上传的文件大小不得超过","workflow_attachment_download":"下载","workflow_attachment_view":"查看","workflow_attachment_isReadOnly":"只读-","workflow_attachment_versions":"历史版本","workflow_attachment_uploading":"正在上传 ","workflow_attachment_downloading":"正在下载 %s...","workflow_attachment_creating":"正在新建word文档 %s...","workflow_attachment_officeOnline":"编辑","workflow_attachment_save":"保存","workflow_attachment_close":"关闭","workflow_attachment_delete":"删除","workflow_attachment_convert_to_pdf":"正在将 '%s' 转换为pdf格式文件...","workflow_attachment_wordToPdf":"转为pdf","workflow_attachment_wordToPdf_failed":"未转换成功，请重新尝试！","workflow_attachment_locked_tip":"您有文件正在编辑，请解锁后提交","Instance State approved":"已核准","Instance State rejected":"已驳回","Instance State terminated":"被取回","Instance State finished":"已完成","Instance State pending":"审核中","Instance State reassigned":"转签核","Instance State relocated":"重定位","Instance Relocate Hint":"请填写重定位的理由。","Instance Relocate Title":"重定位","Instance Relocate Reason":"请填写重定位的理由。","Instance Relocate NewInboxUsers":"请选择重定位审核人。","Instance Relocate Ok":"重定位提交成功。","Instance Relocate CurStep":"当前步骤: ","instance_reassign_title":"转签核","instance_reassign_curstep":"当前步骤: ","instance_reassign_reason":"请填写转签核的理由。","instance_reassign_ok":"转签核提交成功。","instance_reassign_user":"变更处理人","instance_cancel_title":"取消申请","instance_cancel_reason":"请填写取消申请的理由","instance_reassign_error_reason_required":"请填写转签核的理由。","instance_reassign_error_users_required":"请指定处理人。","instance_cancel_error_reason_required":"请填写取消申请的理由。","instance_select_next_step":"请选择下一步步骤","instance_multi_next_step_tips":"步骤选项有多个，请选择下一步步骤，并使用底部发送按钮提交文件","instance_next_step_user":"请选择下一步处理人","instance_reasons_reject":"驳回时必须填写意见","instance_field":"字段","instance_is_required":"为必填","instance_email_format_error":"邮件地址格式错误","node_office_edit_online":"在线编辑","node_office_message":"您正在使用在线编辑功能，编辑完成后请关闭Office软件。","node_office_warning":"文件已修改，请确认是否保存为新版本？","node_office_upload":"上传 ","node_office_confirm":"确定","node_office_cancel":"取消","node_office_uploaded":"文件已上传","node_office_filePath":"文件：","node_office_exists_message":"文件已存在，是否替换？","node_office_workflow":"审批王","node_pdf_error":"pdf签章失败，请重新进行签章！","node_pdf_sign_online":"在线签章","node_pdf_message":"您正在使用在线签章功能。","node_pdf_filePath":"文件：","workflow_export_thismonth":"导出当月申请单","workflow_export_lastmonth":"导出上月申请单","workflow_export_thisyear":"导出当年申请单","workflow_export_all":"导出所有申请单","workflow_export_filter":"按流程过滤","workflow_export_search":"按流程查看申请单","workflow_export_data":"导出申请单","spaces_isarrearageSpace":"您的工作区已欠费","cc_help":"https://www.steedos.com/cn/help/workflow/instance_carboncopy.html","relocate_help":"https://www.steedos.com/cn/help/workflow/instance_relocate.html","reassign_help":"https://www.steedos.com/cn/help/workflow/instance_reassign.html","forward_help":"https://www.steedos.com/cn/help/workflow/instance_forward.html","export_filter_help":"https://www.steedos.com/cn/help/workflow/instance_search.html","new_help":"https://www.steedos.com/cn/help/workflow/instance_add.html","Inbox Suggestion NextSteps Label":"下一步骤: ","Inbox Suggestion NextSteps Handler Label":"处理人: ","Workflow Designer":"流程设计器","User Management":"用户管理","All flows":"所有流程","Select a flow":"请点击流程分类选择相应流程","Fill in form":"填写表单","Flow upgraded":"流程已升级，请检查您填写的内容是否符合修改后的要求。","Are you sure?":"确认删除吗？","Select placeholder":"请选择","workflow_no_category":"未分类","space_users_error_space_required":"工作区必填","flow_roles_error_positions_exists":"已有用户担任该角色","workflow_left_parenthesis":"（","workflow_right_parenthesis":"）","instance_cc_description":"传阅说明","instance_cc_from":"传阅自","instance_cc_title":"传阅","instance_cc_done":"已传阅","instance_curstep":"当前步骤: ","instance_cc_user":"传阅对象","instance_cc_error_users_required":"请选择传阅对象。","workflow_form_edit":"流程列表","flows_template":"申请单模板","flows_name":"流程名称","flows_print_template":"打印模板","flows_instance_template":"表单模板","flows_description":"流程描述","workflow_attach_unlock":"解锁","workflow_attach_locked_by":"%s 正在编辑","workflow_attach_confirm_delete":"确认删除","workflow_attach_confirm_delete_messages":"你确定删除'%s'吗？","workflow_attach_confirm":"删除","workflow_attach_cancel":"取消","workflow_attach_to_pdf":"转为pdf","workflow_attach_to_pdf_message":"是否将'%s'转为pdf格式文件？","workflow_attach_upload":"上传","workflow_attach_new":"新建","workflow_attachment_signature":"签章","workflow_select_an_app":"应用","workflow_suggestion_placeholder":"请填写意见。","instance_opinion_title":"常用意见","instance_opinion_btn":"常用</br>意见","instance_opinion_input":"请输入常用意见","instance_opinion_add_success":"添加成功!","instance_opinion_remove_success":"移除成功!","instance_opinion_error":"出错了","instance_opinion_exists":"常用意见已存在","instance_opinion_add_tip":"您还没有设置常用意见。","instance_forward_title":"转发","form_field_checkbox_yes":"是","form_field_checkbox_no":"否","flows_events":"自定义脚本","flows_events_error":"自定义脚本错误: ","instance_search_advanced_search":"高级搜索","instance_search_flow":"流程","instance_search_name":"申请单标题","instance_search_file":"文件标题","instance_search_applicant_name":"提交人姓名","instance_search_applicant_organization_name":"提交人所属部门名称","instance_search_submit_date":"提交日期","instance_search_start":"起","instance_search_end":"至","instance_search_result_tip":"过滤的结果","instance_search_state":"申请单状态","instance_search_state_options":{"pending":"流转中","completed":"已结束"},"instance":{"formatter":{"date":{"simple_date":"YYYY年MM月DD日","simple_datetime":"YYYY年MM月DD日 HH:mm","export_date":"YYYY-MM-DD","export_datetime":"YYYY-MM-DD HH:mm"},"checkbox":{"checked":"是","unchecked":"否"}},"instance_view":"<br/><br/>申请单内容摘要如下:<br/>工作区 : {$space_name};<br/>提交 : {$applicant_name};<br/>提交日期 : {$submit_date};","push":{"final_decision_approved":"被核准，","final_decision_rejected":"被驳回，","final_decision_nil":"","title":{"first_submit_applicant":"{$from_username}","first_submit_inbox":"{$from_username}","submit_pending_rejected_applicant_inbox":"{$from_username}","submit_pending_rejected_applicant":"{$from_username}","submit_pending_rejected_approve":"{$from_username}","submit_pending_rejected_inbox":"{$from_username}","submit_pending_inbox":"{$from_username}","submit_terminate_applicant":"{$from_username}","submit_terminate_approve":"{$from_username}","monitor_delete_applicant":"{$applicant_name}","submit_completed_applicant":"{$applicant_name}","submit_completed_approve":"{$from_username}","approved_completed_applicant":"{$applicant_name}","approved_completed_approve":"{$from_username}","rejected_completed_applicant":"{$applicant_name}","rejected_completed_approve":"{$from_username}","reassign_new_inbox_users":"{$from_username}","trace_approve_cc":"{$from_username}","trace_approve_cc_submit":"{$from_username}","auto_submit_pending_inbox":"{$from_username}","return_pending_inbox":"{$from_username}"},"body":{"input":"确认","approval":"审批","first_submit_applicant":"请确认:我已代您提交了{$instance_name}","first_submit_inbox":"{$instance_name}","submit_pending_rejected_applicant_inbox":"请修改:{$instance_name}","submit_pending_rejected_applicant":"您的{$instance_name}已驳回给{$nextApprove_usersname}","submit_pending_rejected_approve":"","submit_pending_rejected_inbox":"{$instance_name}","submit_pending_inbox":"{$instance_name}","submit_terminate_applicant":"{$instance_name}被我取消申请了","submit_terminate_approve":"","monitor_delete_applicant":"您的{$instance_name}已被删除","submit_completed_applicant":"您的{$instance_name}已被确认","submit_completed_approve":"","approved_completed_applicant":"您的{$instance_name}已被核准","approved_completed_approve":"","rejected_completed_applicant":"您的{$instance_name}已被驳回","rejected_completed_approve":"","reassign_new_inbox_users":"{$instance_name}","trace_approve_cc":"{$instance_name}","remind":"催办通知：{$instance_name}，办结时限：{$deadline}。","trace_approve_cc_submit":"我已提交了传阅的申请单{$instance_name}","distribute_remind":"您分发的{$instance_name}申请单已结束。","auto_submit_pending_inbox":"您的申请单{$instance_name}处理已超时，现已自动发送至{$current_step_name}","return_pending_inbox":"您的{$instance_name}已被退回"}},"email":{"final_decision_approved":"被核准，","final_decision_rejected":"被驳回，","final_decision_nil":"","inscribed":"<br/><br/>","footnote":"这是由审批王自动发送的邮件, 请不要直接回复。","title":{"input":"确认","approval":"审批","first_submit_applicant":"{$from_username}代您提交了{$instance_name}","first_submit_inbox":"请{$approve_type}:{$instance_name}","submit_pending_rejected_applicant_inbox":"请修改:{$instance_name}","submit_pending_rejected_applicant":"您的{$instance_name}已驳回给{$nextApprove_usersname}","submit_pending_rejected_approve":"","submit_pending_rejected_inbox":"请重新{$approve_type}:{$instance_name}","submit_pending_inbox":"请{$approve_type}:{$instance_name}","submit_terminate_applicant":"{$instance_name}被我取消申请了","submit_terminate_approve":"","monitor_delete_applicant":"删除了您的{$instance_name}","submit_completed_applicant":"确认了您的{$instance_name}","submit_completed_approve":"","approved_completed_applicant":"核准了您的{$instance_name}","approved_completed_approve":"","rejected_completed_applicant":"驳回了您的{$instance_name}","rejected_completed_approve":"","reassign_new_inbox_users":"请{$approve_type}:{$instance_name}","trace_approve_cc":"请{$approve_type}:{$instance_name}","auto_submit_pending_inbox":"您的{$instance_name}已超时自动流转","return_pending_inbox":"退回了您的{$instance_name}"},"body":{"url_input":"查看并确认","url_approval":"进行审批","input":"确认","approval":"审批","judge_approved":"核准","judge_submitted":"确认","email_description":"驳回理由是:{$description} 。","first_submit_applicant":"{$to_username}:<br/><br/>您好！<br/><br/>我已代您提交了{$instance_name}。<br/><a href = {$href}>请点击查看</a>。","first_submit_applicant_beApproveDescription":"{$to_username}:<br/><br/>您好！<br/><br/>我已代您提交了{$instance_name}。<br/>备注是 : {$approves_description}<br/><a href = {$href}>请点击查看</a>。","first_submit_inbox":"{$to_username}:<br/><br/>您好！<br/><br/>{$applicant_name}提交了{$instance_name}。<br/><a href = {$href}>请点击{$url_approve_type}</a>。","first_submit_inbox_beApproveDescription":"{$to_username}:<br/><br/>您好！<br/><br/>{$applicant_name}提交了{$instance_name}。<br/>备注是 : {$approves_description}<br/><a href = {$href}>请点击{$url_approve_type}</a>。","submit_pending_rejected_applicant_inbox":"{$to_username}:<br/><br/>您好！<br/><br/>您的申请单被{$lastApprove_usersname}驳回，请确认是否要修改。<br/>{$description}<br/><a href = {$href}>请点击查看</a>。","submit_pending_rejected_applicant":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}被{$lastApprove_usersname}驳回, 目前{$nextApprove_usersname}正在处理中。<br/>{$description} <br/><a href = {$href}>请点击查看</a>。","submit_pending_rejected_approve":"","submit_pending_rejected_inbox":"{$to_username}:<br/><br/>您好！<br/><br/>请重新{$approve_type} : {$applicant_name}的{$instance_name}, 此申请单被{$lastApprove_usersname}驳回。<br/>{$description}<br/><a href = {$href}>请点击{$url_approve_type}</a>。","submit_pending_inbox":"{$to_username}:<br/><br/>您好！<br/><br/>请{$approve_type} : {$applicant_name}的{$instance_name}。{$lastApprove_usersname}已{$last_approve_judge}此申请单。<br/><a href = {$href}>请点击{$url_approve_type}</a>。","submit_pending_inbox_beApproveDescription":"{$to_username}:<br/><br/>您好！<br/><br/>请{$approve_type} : {$applicant_name}的{$instance_name}。{$lastApprove_usersname}已{$last_approve_judge}此申请单。<br/>他/她的意见是 : {$approves_description}<br/><a href = {$href}>请点击{$url_approve_type}</a>。","submit_pending_inbox_beApproveDescription_counterSign":"{$to_username}:<br/><br/>您好！<br/><br/>请{$approve_type} : {$applicant_name}的{$instance_name}。{$lastApprove_usersname}已确认此申请单。<br/>他/她们的意见是 : <br/>","submit_terminate_applicant":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}被取消申请。<br/>取消申请的理由是：{$description}。","submit_terminate_approve":"","monitor_delete_applicant":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}已被删除。","submit_completed_applicant":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}已被{$lastApprove_usersname}确认, 完成审核。<br/><a href = {$href}>请点击查看</a>。","submit_completed_applicant_beApproveDescription":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}已被{$lastApprove_usersname}确认, 完成审核。<br/>他/她的意见是 : {$approves_description}<br/><a href = {$href}>请点击查看</a>。","submit_completed_applicant_beApproveDescription_counterSign":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}已被{$lastApprove_usersname}确认, 完成审核。<br/>他/她们的意见是 :<br/> ","submit_completed_approve":"","approved_completed_applicant":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}已被{$lastApprove_usersname}核准, 完成审核。<br/><a href = {$href}>请点击查看</a>。","approved_completed_applicant_beApproveDescription":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}已被{$lastApprove_usersname}核准, 完成审核。<br/>他/她的意见是 : {$approves_description}<br/><a href = {$href}>请点击查看</a>。","approved_completed_approve":"","rejected_completed_applicant":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}已被{$lastApprove_usersname}驳回。<br/>{$description}<br/><a href = {$href}>请点击查看</a>。","rejected_completed_approve":"","reassign_new_inbox_users":"{$to_username}:<br/><br/>您好！<br/><br/>{$current_user_name}将{$applicant_name}的{$instance_name}转发给您{$approve_type}。<br/>转发的理由是：{$description}<br/><a href = {$href}>请点击{$url_approve_type}</a>。","trace_approve_cc":"{$to_username}:<br/><br/>您好！<br/><br/>{$applicant_name}传阅了{$instance_name}。<br/><a href = {$href}>请点击{$url_approve_type}</a>。","auto_submit_pending_inbox":"您的申请单{$instance_name}处理已超时，现已自动发送至{$current_step_name}","return_pending_inbox":"{$to_username}:<br/><br/>您好！<br/><br/>您的{$instance_name}被退回。<br/>退回的理由是：{$description}。"}},"remindMessage":{"update_failed":"申请单状态已更新，您的操作未能执行。","has_deleted":"申请单已删除。"},"judge":{"approved":"核准","rejected":"驳回"}},"flow":{"point_upgraded":"流程已升级，请检查您填写的内容是否符合修改后的要求。","print_select_template_alert":"只有专业版才有自定义模板功能，如有需要请升级到专业版或联系客服","print_select_title":"打印样式","print_default_print_title":"默认","print_custom_print_title":"自定义","print_button_title":"打印","print_html_title":"审批王"},"help":{"href":"<a href = {$href}>请点击查看</a>。","approves":"签核历程","initiator":"提交人 : ","attachment":"附件"},"export":{"code":"编号","name":"名称","initiator":"提交人","initiator_org":"提交人所属部门","submit_date":"提交日期","status":"状态","current_step_name":"当前步骤","current_step_start_date":"当前步骤开始日期","state":{"pending":"审核中","approved":"已核准","rejected":"已驳回","terminated":"被取回","finished":"已完成","reassigned":"转签核","inhand":"处理中","relocated":"重定位"}},"steedos":"华炎云","cc":"传阅","saveInstanceToAttachment":"将原表单存储为附件","forwardFlowText":"备注","instanceForwardNote":"将当前选中的文件转发到新的流程，继续执行审批操作","isForwardAttachments":"同时转发原表单附件","button_preview":"预览","remove_cc_approve":"传阅删除成功","forward_instance_success":"文件转发成功","instance_retrieve":"取回","instance_retrieve_reason":"备注","instance_retrieve_rules_title":"无法取回","instance_retrieve_rules_content":"下一步处理人已读无法取回；会签节点无法取回。","Retrieved successfully":"取回成功!","Instance State retrieved":"取回","instance_chrome_print_warning":"请使用Chrome浏览器进行打印","instance_sign":"签批","instance_default_opinion":"已阅","instance_submit_date":"提交日期","instance_opinion_edit":"请修改常用意见","instance_opinion_edit_success":"修改成功","instance_opinion_field":"签批字段","instance_cc_error_opinion_field_required":"请选择签批字段","instance_suggestion_toggle":"签批","instance_approve_read":"已读","instance_approve_from_user_name_label":"传阅自","instance_approve_status_text_label":"操作","instance_approve_description_label":"处理意见","instance_approve_start_date_label":"开始时间","instance_approve_finish_date_label":"结束时间","instance_approve_read_yes":"是","instance_approve_read_no":"否","instance_approve_cc_remove":"取消传阅","instance_approve_close_modal":"关闭","instance_approve_title_label":"处理人：","instance_forward_users":"转发对象","instance_forward_error_users_required":"请选择对象!","instance_approve_from_user_name_label_forward":"转发自","instance_approve_forward_remove":"取消转发","instance_approve_forward_remove_success":"取消成功","instance_forward_instance_look":"查看转发后申请单","instance_forward_cannot_cancel":"不符合取消条件！","instance_forward_instance_state_changed":"申请单状态已更新，不能取消！","instance_approve_modal_modification":"修改","instance_approve_modal_save":"保存","instance_approve_moda_back":"取消","instance_approve_modal_modificationsave":"您的修改保存成功","webhooks":"Webhooks","webhooks_flow":"流程","webhooks_payload_url":"URL","webhooks_active":"激活","webhooks_content_type":"传输数据类型","edit":"编辑","flow_list":"流程列表","import_flow":"导入流程","import_flow_success":"导入成功","import_flow_error":"导入失败","import_flow_info":"请选择需要导入的流程","webhooks_flow_name()":"流程","webhooks_description":"描述","workflow_list":"流程列表","workflow_import_flow":"导入流程","workflow_import_flow_success":"导入成功","workflow_import_flow_error":"导入失败","workflow_import_flow_info":"请选择需要导入的流程","flows":"流程","instance_readonly_view_url_copy":"复制链接","instance_readonly_view_url_copy_success":"Tableau Web 数据连接器已复制","instance_related_instances":"相关文件","instance_related_instances_title":"关联文件","instance_related_instances_placeholder":"请输入文件名称搜索关联文件","workflow_install_desktop":"安装客户端","workflow_chart":"流程图","instance_return":"退回","instance_return_success":"退回成功","instance_return_confirm":"确认退回至{$step_name}({$handlers_name})?","Instance State returned":"已退回","instance_main_attachment":"正文","flows_field_map":"归档关系","Instance State readed":"已阅","instance_distribute_title":"分发","instance_distribute_users":"分发对象","instance_distribute_error_users_required":"请选择分发对象!","instance_distribute_approve_from_user_name_label":"分发自","instance_distribute_approve_remove":"取消分发","instance_distribute_instance_look":"查看分发后申请单","instance_distribute_note":"将当前选中的文件分发到新的流程，继续执行审批操作","instance_distribute_attachments":"同时分发原表单附件","instance_distribute_success":"文件分发成功","instance_no_add_permission":"{$actiontype}未成功。以下用户没有新建此申请单的权限：{$usernames}","instance_workflow_chart_ie_warning":"暂不支持在IE中查看流程图，请在客户端软件或chrome上执行该操作。","instance_remind_title":"催办","instance_remind_select_users":"催办对象","instance_remind_count":"催办方式","instance_remind_deadline":"办结时限","instance_remind_success":"催办成功","instance_remind_need_remind_users":"缺少催办对象","instance_remind_need_remind_count":"缺少催办方式","instance_remind_need_remind_deadline":"缺少办结时限","instance_remind_count_options":{"single":"单次提醒","multi":"多次提醒"},"instance_opinion_title_select":"其他常用意见","categories":"流程分类","categories_name":"名称","categories_sort_no":"排序号","not_found_user":"未找到处理人","next_step_users_not_found":{"aplicant_superior":"申请人上级未配置，请联系管理员。","applicant_role":"您要找的「{$role_name}」还未配置，请联系管理员。","field_value_empty":"获取处理人，请先填写「{$field_name}」。","org_no_members":"下一步需「{$org_name}」处理，请联系管理员。"},"instanc_admin_role_text":"<a href='%s' target='_blank'>岗位中进行配置。</a>","instanc_user_role_text":"岗位中进行配置","instanc_set_applicant_role_text":"设置","instance_sign_read":"已阅","instance_sign_done":"已办","instance_sign_agree":"同意","instance_sign_period":"。","instance_cc_alert":"还需传阅给其他人员吗？","instance_cc_must_finished":"当前步骤被传阅人员：{$not_finished_users_name} 还未处理，故不能提交至下一步","instance_number_rules":"流程编号规则","instance_number_rules_name":"名称","instance_number_rules_year":"年份","instance_number_rules_first_number":"起始序号","instance_number_rules_number":"序号","instance_number_rules_rules":"编号规则","instance_number_rules_number_builder_error_title":"文件编号生成失败","instance_number_rules_number_builder_error_not_exist":"流程编号规则不存在: ","ConfirmDeletion?":"确认删除?","instance_number_rules_name_only":"名称已存在","flows_btn_export_title":"导出流程","flows_btn_copylink_title":"复制链接","instance_distribute_related_instances_title":"自动创建关联文件","instance_next_step_users_placeholder":"请选择下一步处理人","instance_distribute_to_self":"同时分发给自己","my_instances":"我的文件","workflow_import_export_flows":"流程导入导出","workflow_history_approve_counts":"已显示%s条历史意见","workflow_history_approve_description":"历史意见","instances_start_date":"接收时间","instances_is_archived":"已归档","instances_archive":"归档","instances_archived":"已归档","instances_not_archived":"未归档","workflow_more_inbox":"更多待审核","instance_back":"返回","steedos_tableau_statistical_analysis":"统计分析","steedos_tableau_copy_link":"复制链接","tableau_introduction_modal_close":"关闭","ERROR":"错误","steedos_table_add_item":"新增一行","approved_description":"同意","rejected_description":"不同意","copy":"复制并新建","from":"来自","admin_flow_roles_create":"新建","flow_roles_delete_success":"删除成功","add_positions":"新增","save_role":"保存","delete_role":"删除","flow_roles_update_success":"更新成功","flow_roles_necessary":"请填写岗位名称","flow_positions_add_suceess":"添加成功","flow_positions_add_failed":"添加失败","flow_positions_update_suceess":"更新成功","flow_positions_update_failed":"更新失败","flow_positions_delete_suceess":"删除成功","instance_role_set_is_complete":"岗位设置完成？","instance_set_is_complete":"设置完成？","flow_roles_help":"帮助","set_org_members":"设置部门成员","set_applicant_manager":"设置申请人上级主管","instance_permissions_error":"您没有权限查看此申请单","start_flows":"星标流程","chart_traces":"图形化历程","cc_tag":"（传阅中）","workflow_batch_approval":"批量审批","workflow_batch_approval_btn":"批量<br/>审批","workflow_batch_approval_processing":"处理中","workflow_batch_approval_message":"本次处理文件%s份","workflow_error_multiple_next_step_users":"「{$insname}」的下一步处理人有多个","workflow_error_multiple_next_step":"「{$insname}」的下一步步骤有多个","workflow_batch_instances_empty":"没有可批量审批的数据","workflow_sign_opinion_to_completed_instance":"此文件已结束，签署的意见不会显示在申请单上","workflow_copy_flow":"复制流程","workflow_copy_flow_text":"请填写新流程名称","workflow_copy_flow_success":"复制流程成功","workflow_copy_flow_error_reason_required":"请填写新流程名称","workflow_enabled":"启用","workflow_disabled":"停用","flows_state":"状态","flows_current_modified":"修改时间","flows_modified_by_name()":"修改者","flows_category_name()":"流程分类","flow_list_title_set_template":"设置模版","flow_list_title_set_script":"设置脚本","flow_list_title_set_fieldsMap":"设置归档关系","distribute_edit_flow_select_users":"流程被分发时分发对象选择范围","distribute_edit_flow_select_flows":"搜索此步骤可分发流程","flow_list_title_set_distribute":"设置分发","distribute_to_self":"分发时可分发给自己","distribute_end_notification":"分发结束后提醒发起人","instance_deleted":"已删除","workflow_flow_state_disabled":"此申请单对应流程\"{$name}\"已被禁用，如想正常修改及提交请联系管理员启用流程","flow_roles_error_flows_used":"已有以下流程使用此角色：{$names}","instance_approve_not_yet_handled":"未处理","instance_approve_distribute_date_label":"分发时间","flows_auto_remind":"自动催办","flows_upload_after_being_distributed":"被分发后是否允许上传附件","instances_my_finish_date":"处理时间","pager_input_hint":"点击输入页码，然后按回车可跳转到指定页","instance_hide_title":"隐藏","instance_hide_success":"隐藏成功","instance_reopen_title":"取消隐藏","instance_reopen_success":"取消隐藏成功","workflow_design_flow":"设计流程","process_delegation_rules":"流程委托","process_delegation_rules_from":"委托人","process_delegation_rules_to":"被委托人","process_delegation_rules_enabled":"启用","process_delegation_rules_start_time":"委托开始","process_delegation_rules_end_time":"委托结束","process_delegation_rules_from_name":"委托人","process_delegation_rules_to_name":"被委托人","process_delegation_rules_start_must_lt_end":"开始时间应小于结束时间","process_delegation_rules_description":"{$userName}委托","instance_handler_name":"处理人","instance_handler_organization_fullname":"部门","url_invalid":"无效的链接","instance_approve_timeout_auto_submitted":"超时通过"});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"checkNpm.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/checkNpm.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let checkNpmVersions;
module.link("meteor/tmeasday:check-npm-versions", {
  checkNpmVersions(v) {
    checkNpmVersions = v;
  }

}, 0);
checkNpmVersions({
  "node-schedule": "^1.3.1",
  cookies: "^0.6.2",
  "xml2js": "^0.4.19",
  mkdirp: "^0.3.5",
  "sprintf-js": "^1.0.3"
}, 'steedos:workflow');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"collection_helpers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/collection_helpers.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tapi18n.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/tapi18n.coffee                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"core.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/core.coffee                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Workflow = {};
this.ImageSign = {};
this.TracesTemplate = {};
this.InstanceformTemplate = {};
this.InstanceAttachmentTemplate = {};
this.InstanceSignText = {};
this.RelatedInstances = {};
this.InstanceMacro = {
  context: {}
};
this.TracesManager = {};

if (Meteor.isClient) {
  Meteor.startup(function () {
    var workflow_three_columns;
    workflow_three_columns = localStorage.getItem("workflow_three_columns");

    if (workflow_three_columns && workflow_three_columns === "off") {
      return $("body").removeClass("three-columns");
    } else {
      return $("body").addClass("three-columns");
    }
  });
}

InstanceSignText.isOpinionField_from_string = function (field_formula) {
  return (field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{yijianlan:") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{\"yijianlan\":") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{'yijianlan':") : void 0) > -1;
};

InstanceSignText.includesOpinionField = function (form, form_version) {
  var _form_version, field_formulas, fields;

  field_formulas = new Array();
  _form_version = {};

  if (Meteor.isServer) {
    _form_version = uuflowManager.getFormVersion(db.forms.findOne({
      _id: form
    }), form_version);
  } else {
    _form_version = db.form_versions.findOne({
      _id: form_version,
      form: form
    });
  }

  fields = (_form_version != null ? _form_version.fields : void 0) || [];
  fields.forEach(function (f) {
    var ref;

    if (f.type === 'table') {
      return console.log('ignore opinion field in table');
    } else if (f.type === 'section') {
      return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
        return field_formulas.push(f1.formula);
      }) : void 0 : void 0;
    } else {
      return field_formulas.push(f.formula);
    }
  });
  return _.some(field_formulas, function (field_formula) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"models":{"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/forms.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flows.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_roles.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_positions.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/instances.coffee                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/categories.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"spaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/spaces.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleted_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/deleted_instances.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"auth_tokens.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/auth_tokens.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
db.auth_tokens = new Meteor.Collection('auth_tokens');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"webhooks.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/webhooks.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_user_signs.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_users.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"cfs":{"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/cfs/instances.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"admin.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/admin.coffee                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"client":{"lib":{"instance_readonly_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/instance_readonly_template.coffee                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _getLocale, _getRequiredFields, _getStartStepEditableFields, _getStartStepRequiredFields, _getTemplateData, _getViewHtml;

InstanceReadOnlyTemplate = {};
InstanceReadOnlyTemplate.instance_attachment = "<tr>\n	<td class=\"ins-attach-view\">\n		<a href=\"{{ins_attach_download_url _id absolute}}\" class=\"ins_attach_href\" target=\"_parent\" data-name=\"{{this.name}}\" data-type=\"{{this.original.type}}\" data-id=\"{{_id}}\">{{this.name}}</a>\n	</td>\n</tr>";
InstanceReadOnlyTemplate.afSelectUserRead = "<div class='selectUser form-control ins_applicant'>{{value}}</div>";
InstanceReadOnlyTemplate.afFormGroupRead = "<div class='form-group'>\n	{{#with getField this.name}}\n		{{#if equals type 'section'}}\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if showLabel}}\n					<label>{{getLabel code}}</label>\n				{{/if}}\n				<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n			{{/if}}\n		{{/if}}\n	{{/with}}\n</div>";
InstanceReadOnlyTemplate.afFormGroup = "\n{{#with getField this.name}}\n		{{#if equals type 'section'}}\n			<div class=\"form-group\">\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n  				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if equals type 'input'}}\n					<div class=\"form-group\" data-required=\"{{#if is_required}}true{{/if}}\">\n						<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n						<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" {{getPermissions code}} data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n					</div>\n				{{else}}\n					{{#if equals type 'number'}}\n						<div class=\"form-group\">\n							<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n							<input type=\"number\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n						</div>\n					{{else}}\n						{{#if equals type 'date'}}\n							<div class=\"form-group\">\n								<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n								<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type=\"date\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n							</div>\n						{{else}}\n							{{#if equals type 'dateTime'}}\n								<div class=\"form-group\">\n									<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n									<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type='datetime' data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n								</div>\n							{{else}}\n								{{#if equals type 'password'}}\n									<div class=\"form-group\">\n										<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n										<input type=\"password\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n									</div>\n								{{else}}\n									{{#if equals type 'select'}}\n										<div class=\"form-group\">\n											<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n											<select name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n												{{#each options this}}\n													<option value=\"{{value}}\">{{label}}</option>\n												{{/each}}\n											</select>\n										</div>\n									{{else}}\n										{{#if equals type 'radio'}}\n											<div class=\"form-group\">\n												<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n												<div class=\"af-radio-group\" data-schema-key=\"{{getLabel code}}\">\n													{{#each options this}}\n        												<label class=\"radio-inline fix-indent\"><input type=\"radio\" value=\"{{value}}\" name=\"{{../code}}\" class=\"radio-inline fix-indent\"> {{label}}</label>\n    													{{/each}}\n    												</div>\n											</div>\n										{{else}}\n											{{#if equals type 'multiSelect'}}\n												<div class=\"form-group\">\n													<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n													<div class=\"af-checkbox-group\" data-schema-key=\"{{getLabel code}}\">\n														{{#each options this}}\n														<label class=\"checkbox-inline fix-indent\"><input type=\"checkbox\" value=\"{{value}}\" name=\"{{../code}}\" class=\"checkbox-inline fix-indent\"> {{label}}</label>\n														{{/each}}\n													</div>\n												</div>\n											{{else}}\n												{{#if equals type 'url'}}\n													<div class=\"form-group\">\n														<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n														<input type=\"url\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n													</div>\n												{{else}}\n													{{#if equals type 'email'}}\n														<div class=\"form-group\">\n															<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n															<input type=\"email\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n														</div>\n													{{else}}\n														{{#if equals type 'checkbox'}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class=\"checkbox\" data-schema-key=\"{{getLabel code}}\">\n																	<label style=\"width: 100%;\"><input type=\"checkbox\" value=\"true\" name=\"{{code}}\" class=\"checkbox-inline fix-indent\"></label>\n																</div>\n															</div>\n														{{else}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n															</div>\n														{{/if}}\n													{{/if}}\n												{{/if}}\n											{{/if}}\n										{{/if}}\n									{{/if}}\n								{{/if}}\n							{{/if}}\n						{{/if}}\n					{{/if}}\n				{{/if}}\n			{{/if}}\n		{{/if}}\n	{{/with}}";

InstanceReadOnlyTemplate.create = function (tempalteName, steedosData) {
  var template, templateCompiled, templateRenderFunction;
  template = InstanceReadOnlyTemplate[tempalteName];
  templateCompiled = SpacebarsCompiler.compile(template, {
    isBody: true
  });
  templateRenderFunction = eval(templateCompiled);
  Template[tempalteName] = new Blaze.Template(tempalteName, templateRenderFunction);
  Template[tempalteName].steedosData = steedosData;
  return Template[tempalteName].helpers(InstanceformTemplate.helpers);
};

InstanceReadOnlyTemplate.createInstanceSignText = function (steedosData) {
  var instanceSignTextCompiled, instanceSignTextHtml, instanceSignTextRenderFunction;
  instanceSignTextHtml = _getViewHtml('client/views/instance/instance_sign_text.html');
  instanceSignTextCompiled = SpacebarsCompiler.compile(instanceSignTextHtml, {
    isBody: true
  });
  instanceSignTextRenderFunction = eval(instanceSignTextCompiled);
  Template.instanceSignText = new Blaze.Template("instanceSignText", instanceSignTextRenderFunction);
  Template.instanceSignText.steedosData = steedosData;
  return Template.instanceSignText.helpers(InstanceSignText.helpers);
};

InstanceReadOnlyTemplate.createImageSign = function (steedosData) {
  var imageSignCompiled, imageSignHtml, imageSignRenderFunction;
  imageSignHtml = _getViewHtml('client/views/instance/image_sign.html');
  imageSignCompiled = SpacebarsCompiler.compile(imageSignHtml, {
    isBody: true
  });
  imageSignRenderFunction = eval(imageSignCompiled);
  Template.imageSign = new Blaze.Template("imageSign", imageSignRenderFunction);
  Template.imageSign.steedosData = steedosData;
  return Template.imageSign.helpers(ImageSign.helpers);
};

InstanceReadOnlyTemplate.init = function (steedosData) {
  InstanceReadOnlyTemplate.create("afSelectUserRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("afFormGroup", steedosData);
  }

  InstanceReadOnlyTemplate.create("afFormGroupRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("instance_attachment", {
      absolute: steedosData.absolute
    });
    InstanceReadOnlyTemplate.createImageSign(steedosData);
    return InstanceReadOnlyTemplate.createInstanceSignText(steedosData);
  }
};

InstanceReadOnlyTemplate.getValue = function (value, field, locale, utcOffset) {
  var date, e, hours, month, seconds, t, t0, t1, year;

  if (!value && value !== false) {
    return '';
  }

  switch (field.type) {
    case 'email':
      value = value ? '<a href=\'mailto:' + value + '\'>' + value + '</a>' : '';
      break;

    case 'url':
      if (value) {
        if (value.indexOf("http") === 0) {
          try {
            value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
          } catch (error) {
            e = error;
            value = "<a href='' target='_blank'>" + value + "</a>";
          }
        } else {
          value = "<a href='http://" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
        }
      } else {
        value = '';
      }

      break;

    case 'group':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("fullname").toString() : void 0;
      } else {
        value = value != null ? value.fullname : void 0;
      }

      break;

    case 'user':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("name").toString() : void 0;
      } else {
        value = value != null ? value.name : void 0;
      }

      break;

    case 'password':
      value = '******';
      break;

    case 'checkbox':
      if (value && value !== 'false') {
        value = TAPi18n.__("form_field_checkbox_yes", {}, locale);
      } else {
        value = TAPi18n.__("form_field_checkbox_no", {}, locale);
      }

      break;

    case 'dateTime':
      if (value && value.length === 16) {
        t = value.split("T");
        t0 = t[0].split("-");
        t1 = t[1].split(":");
        year = t0[0];
        month = t0[1];
        date = t0[2];
        hours = t1[0];
        seconds = t1[1];
        value = new Date(year, month - 1, date, hours, seconds);
      } else {
        value = new Date(value);
      }

      value = InstanceReadOnlyTemplate.formatDate(value, utcOffset);
      break;

    case 'input':
      if (field.is_textarea) {
        value = Spacebars.SafeString(Markdown(value));
      }

      break;

    case 'number':
      if (value || value === 0) {
        if (typeof value === 'string') {
          value = parseFloat(value);
        }

        value = value.toFixed(field.digits);
        value = Steedos.numberToString(value, locale);
      }

      break;

    case 'odata':
      value = value['@label'];
  }

  return value;
};

InstanceReadOnlyTemplate.getLabel = function (fields, code) {
  var field;
  field = fields.findPropertyByPK("code", code);

  if (field) {
    if (field.name) {
      return field.name;
    } else {
      return field.code;
    }
  }
};

InstanceReadOnlyTemplate.getInstanceFormVersion = function (instance) {
  var form, form_fields, form_version;
  form = db.forms.findOne(instance.form);
  form_version = {};
  form_fields = [];

  if (form.current._id === instance.form_version) {
    form_version = form.current;
  } else {
    form_version = _.where(form.historys, {
      _id: instance.form_version
    })[0];
  }

  form_version.fields.forEach(function (field) {
    if (field.type === 'section') {
      form_fields.push(field);

      if (field.fields) {
        return field.fields.forEach(function (f) {
          return form_fields.push(f);
        });
      }
    } else if (field.type === 'table') {
      field['sfields'] = field['fields'];
      delete field['fields'];
      return form_fields.push(field);
    } else {
      return form_fields.push(field);
    }
  });
  form_version.fields = form_fields;
  return form_version;
};

InstanceReadOnlyTemplate.getFlowVersion = function (instance) {
  var flow, flow_version;
  flow = db.flows.findOne(instance.flow);
  flow_version = {};

  if (flow.current._id === instance.flow_version) {
    flow_version = flow.current;
  } else {
    flow_version = _.where(flow.historys, {
      _id: instance.flow_version
    })[0];
  }

  return flow_version;
};

_getViewHtml = function (path) {
  var viewHtml;
  viewHtml = Assets.getText(path);

  if (viewHtml) {
    viewHtml = viewHtml.replace(/<template[\w\s\"\=']+>/i, "").replace(/<\/template>/i, "");
  }

  return viewHtml;
};

_getLocale = function (user) {
  var locale, ref, ref1;

  if ((user != null ? (ref = user.locale) != null ? ref.toLocaleLowerCase() : void 0 : void 0) === 'zh-cn') {
    locale = "zh-CN";
  } else if ((user != null ? (ref1 = user.locale) != null ? ref1.toLocaleLowerCase() : void 0 : void 0) === 'en-us') {
    locale = "en";
  } else {
    locale = "zh-CN";
  }

  return locale;
};

_getRequiredFields = function (fields, rev) {
  if (!rev) {
    rev = [];
  }

  fields.forEach(function (field) {
    if (field.type === 'section') {
      return _getRequiredFields(field.fields, rev);
    } else if (field.type === 'table') {} else {
      if (field.is_required) {
        return rev.push(field.code);
      }
    }
  });
  return rev;
};

_getStartStepEditableFields = function (fields, steps) {
  var editableCode, startStep;
  startStep = steps.findPropertyByPK("step_type", "start");
  editableCode = [];

  _.keys(startStep.permissions).forEach(function (key) {
    if (startStep.permissions[key] === 'editable') {
      return editableCode.push(key);
    }
  });

  return editableCode;
};

_getStartStepRequiredFields = function (fields, steps) {
  var editableCode, requiredFields;
  requiredFields = _getRequiredFields(fields);
  editableCode = _getStartStepEditableFields(fields, steps);
  return _.intersection(requiredFields, editableCode);
};

_getTemplateData = function (user, space, instance, options) {
  var flow, form, form_version, locale, steedosData;

  if (Meteor.isServer) {
    form_version = InstanceReadOnlyTemplate.getInstanceFormVersion(instance);
  } else {
    form_version = WorkflowManager.getInstanceFormVersion(instance);
  }

  locale = _getLocale(user);
  steedosData = {};

  if (Meteor.isClient) {
    steedosData = _.clone(WorkflowManager_format.getAutoformSchemaValues());
    steedosData.insname = instance.name;
    steedosData.ins_state = instance.state;
    steedosData.ins_final_decision = instance.ins_final_decision;
    steedosData.ins_code = instance.code;
    steedosData.ins_is_archived = instance.is_archived;
    steedosData.ins_is_deleted = instance.ins_is_deleted;
    steedosData.applicant_name = instance.applicant_name;
    steedosData.applicantContext = instance.applicant_name;
  }

  steedosData.instance = instance;
  steedosData.form_version = form_version;
  steedosData.locale = locale;
  steedosData.utcOffset = user.utcOffset;
  steedosData.space = instance.space;
  steedosData.sessionUserId = user._id;

  if (Meteor.isServer) {
    if (options != null ? options.editable : void 0) {
      form = db.forms.findOne({
        _id: instance.form
      });
      flow = db.flows.findOne({
        _id: instance.flow
      });
      steedosData.startStepEditableFields = _getStartStepEditableFields(form.current.fields, flow.current.steps);
    }
  }

  return steedosData;
};

InstanceReadOnlyTemplate.formatDate = function (date, utcOffset) {
  var passing;

  if (Meteor.isServer) {
    passing = false;
  } else {
    passing = true;
  }

  if (!utcOffset && utcOffset !== 0) {
    utcOffset = 8;
  }

  return moment(date).utcOffset(utcOffset, passing).format("YYYY-MM-DD HH:mm");
};

InstanceReadOnlyTemplate.getInstanceView = function (user, space, instance, options) {
  var body, instanceCompiled, instanceRenderFunction, instanceTemplate, steedosData;
  steedosData = _getTemplateData(user, space, instance, options);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  instanceTemplate = TemplateManager.getTemplate(instance, options != null ? options.templateName : void 0);
  instanceTemplate = instanceTemplate.replace(/afSelectUser/g, "afSelectUserRead");

  if (!(options != null ? options.editable : void 0)) {
    instanceTemplate = instanceTemplate.replace(/afFormGroup/g, "afFormGroupRead");
  }

  instanceCompiled = SpacebarsCompiler.compile(instanceTemplate, {
    isBody: true
  });
  instanceRenderFunction = eval(instanceCompiled);
  Template.instance_readonly_view = new Blaze.Template("instance_readonly_view", instanceRenderFunction);
  Template.instance_readonly_view.steedosData = steedosData;
  Template.instance_readonly_view.helpers(InstanceformTemplate.helpers);
  InstanceReadOnlyTemplate.init(steedosData);
  body = Blaze.toHTMLWithData(Template.instance_readonly_view, steedosData);
  return "<div id='instanceform' >\n	" + body + "\n</div>";
};

InstanceReadOnlyTemplate.getTracesView = function (user, space, instance, options) {
  var body, form, steedosData, traceCompiled, traceRenderFunction, tracesHtml;
  steedosData = _getTemplateData(user, space, instance);
  form = db.forms.findOne(instance.form);

  if (form.instance_style === "table" || (options != null ? options.templateName : void 0) === "table") {
    tracesHtml = _getViewHtml('client/views/instance/traces_table.html');
  } else {
    tracesHtml = _getViewHtml('client/views/instance/traces.html');
  }

  traceCompiled = SpacebarsCompiler.compile(tracesHtml, {
    isBody: true
  });
  traceRenderFunction = eval(traceCompiled);
  Template.trace_readonly_view = new Blaze.Template("trace_readonly_view", traceRenderFunction);
  Template.trace_readonly_view.steedosData = steedosData;
  Template.trace_readonly_view.helpers(TracesTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.trace_readonly_view, instance.traces);
  return body;
};

InstanceReadOnlyTemplate.getAttachmentView = function (user, space, instance) {
  var attachmentCompiled, attachmentHtml, attachmentRenderFunction, body, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  attachmentHtml = _getViewHtml('client/views/instance/instance_attachments.html');
  attachmentCompiled = SpacebarsCompiler.compile(attachmentHtml, {
    isBody: true
  });
  attachmentRenderFunction = eval(attachmentCompiled);
  Template.attachments_readonly_view = new Blaze.Template("attachments_readonly_view", attachmentRenderFunction);
  Template.attachments_readonly_view.steedosData = steedosData;
  Template.attachments_readonly_view.helpers(InstanceAttachmentTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.attachments_readonly_view);
  return body;
};

InstanceReadOnlyTemplate.getRelatedInstancesView = function (user, space, instance, options) {
  var body, relatedInstancesCompiled, relatedInstancesHtml, relatedInstancesRenderFunction, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  relatedInstancesHtml = _getViewHtml('client/views/instance/related_instances.html');
  relatedInstancesCompiled = SpacebarsCompiler.compile(relatedInstancesHtml, {
    isBody: true
  });
  relatedInstancesRenderFunction = eval(relatedInstancesCompiled);
  Template.related_instances_view = new Blaze.Template("related_instances_view", relatedInstancesRenderFunction);
  Template.related_instances_view.steedosData = steedosData;
  Template.related_instances_view.helpers(RelatedInstances.helpers);
  body = Blaze.toHTMLWithData(Template.related_instances_view, steedosData);
  return body;
};

InstanceReadOnlyTemplate.getOnLoadScript = function (instance) {
  var form_script, form_version;
  form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
  form_script = form_version.form_script;

  if (form_script && form_script.replace(/\n/g, "").replace(/\s/g, "").length > 0) {
    form_script = "CoreForm = {};CoreForm.instanceform = {};" + form_script;
    return form_script += ";if(CoreForm.form_OnLoad){window.onload = CoreForm.form_OnLoad();}";
  } else {
    return form_script = "";
  }
};

InstanceReadOnlyTemplate.getInstanceHtml = function (user, space, instance, options) {
  var absoluteUrl, allCssLink, attachment, body, cssHref, form, formDescription, formDescriptionHtml, html, instanceBoxStyle, instance_style, onLoadScript, openFileScript, related_instances, showTracesBtn, showTracesScript, submit_btn, trace, width;
  body = InstanceReadOnlyTemplate.getInstanceView(user, space, instance, options);
  onLoadScript = InstanceReadOnlyTemplate.getOnLoadScript(instance);
  openFileScript = "if(window.isNode && isNode()){\n	attachs = document.getElementsByClassName(\"ins_attach_href\");\n	for(var i = 0; i < attachs.length; i++){\n		attach = attachs[i];\n		attach.addEventListener(\"click\", function(e){\n			if(isImage(this.dataset.type) || isHtml(this.dataset.type)){\n				e.preventDefault();\n				openWindow(\"/api/files/instances/\" + this.dataset.id);\n			}else if(nw_core.canOpenFile(this.dataset.name)){\n				e.preventDefault();\n				nw_core.openFile(this.href, this.dataset.name)\n			}\n		});\n	}\n}\n\nvar flow = \"" + instance.flow + "\";\nvar space = \"" + instance.space + "\";\n";

  if (!Steedos.isMobile()) {
    form = db.forms.findOne(instance.form);

    if ((form != null ? form.instance_style : void 0) === 'table') {
      instance_style = "instance-table";
    }
  }

  if ((options != null ? options.templateName : void 0) === 'table') {
    instance_style = "instance-table";
  }

  if (options != null ? options.instance_style : void 0) {
    instance_style = options.instance_style;
  }

  if (!options || options.showTrace === true) {
    trace = InstanceReadOnlyTemplate.getTracesView(user, space, instance);
  } else {
    trace = "";
  }

  instanceBoxStyle = "";

  if (instance && instance.final_decision) {
    if (instance.final_decision === "approved") {
      instanceBoxStyle = "box-success";
    } else if (instance.final_decision === "rejected") {
      instanceBoxStyle = "box-danger";
    }
  }

  if (!options || options.showAttachments === true) {
    attachment = InstanceReadOnlyTemplate.getAttachmentView(user, space, instance);
  } else {
    attachment = "";
  }

  related_instances = InstanceReadOnlyTemplate.getRelatedInstancesView(user, space, instance, options);
  absoluteUrl = Meteor.absoluteUrl();
  width = "960px";

  if (options != null ? options.width : void 0) {
    width = "";
  }

  cssHref = Meteor.absoluteUrl("steedos-css");
  allCssLink = "<link rel=\"stylesheet\" type=\"text/css\" class=\"__meteor-css__\" href=\"" + cssHref + "\">";
  submit_btn = "";
  showTracesBtn = "<div class=\"print-tool\">\n	<label class=\"cbx-label\"><input type=\"checkbox\" checked class=\"cbx-print cbx-print-traces\" id=\"cbx-print-traces\"/><span>" + t('instance_approval_history') + "</span></label>\n</div>";
  showTracesScript = "$( document ).ready(function(){\n	var b = document.getElementById('cbx-print-traces');\n	var t = document.getElementsByClassName('instance-traces')[0];\n	if (b.checked){\n		t.style = 'display: block;'\n	} else {\n		t.style = 'display: none;'\n	}\n	b.addEventListener('change', function(e){\n		if (e.target.checked){\n			t.style = 'display: block;'\n		} else {\n			t.style = 'display: none;'\n		}\n	});\n});\n";

  if (options != null ? options.styles : void 0) {
    allCssLink = "";
  }

  form = db.forms.findOne({
    _id: instance.form
  });
  formDescriptionHtml = "";

  if (form) {
    formDescription = form.description;

    if (formDescription) {
      formDescription = formDescription.replace(/\n/g, "<br/>");
      formDescriptionHtml = "<div class=\"box-header  with-border instance-header\">\n	<div>\n		" + formDescription + "\n	</div>\n</div>";
    }
  }

  html = "<!DOCTYPE html>\n<html>\n	<head>\n		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n		" + allCssLink + "\n		<script src=\"https://www.steedos.com/website/libs/jquery.min.js\" type=\"text/javascript\"></script>\n		<script src=\"/js/nw_core.js\" type=\"text/javascript\"></script>\n		" + (options.plugins || "") + "\n\n		<style>\n			.steedos{\n				width: " + width + ";\n				margin-left: auto;\n				margin-right: auto;\n			}\n\n			.instance-view .instance-name{\n				display: inline !important\n			}\n			.box-tools{\n				display: none;\n			}\n			.box.collapsed-box .box-body,.box.collapsed-box .box-footer {\n			  display: block;\n			}\n\n			body{\n				background: azure !important;\n			}\n\n			.instance-view .instance-traces{\n				padding-left: 15px;\n				padding-right: 15px;\n			}\n\n			" + ((options != null ? options.styles : void 0) || "") + "\n		</style>\n	</head>\n	<body>\n		<div class=\"steedos\">\n			" + submit_btn + "\n			" + showTracesBtn + "\n			<div class=\"instance-view\">\n				<div class=\"instance " + instance_style + "\">\n					<form name=\"instanceForm\">\n						<div class=\"instance-form box " + instanceBoxStyle + "\">\n							" + formDescriptionHtml + "\n							<div class=\"box-body\">\n								<div class=\"col-md-12\">\n									" + body + "\n									" + attachment + "\n									" + related_instances + "\n								</div>\n							</div>\n						</div>\n					</form>\n					" + trace + "\n				</div>\n			</div>\n		</div>\n	</body>\n	<script>" + openFileScript + ";" + onLoadScript + ";" + showTracesScript + "</script>\n</html>";
  return html;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/template_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var formId;
TemplateManager = {};
formId = 'instanceform';

TemplateManager.instance_title = function () {
  var pageTitle, pageTitleTrClass, val;
  pageTitle = "{{instance.name}}";
  pageTitleTrClass = "instance-name";

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) {
    pageTitle = "{{> afFormGroup name=\"" + CoreForm.pageTitleFieldName + "\" label=false}}";
    pageTitleTrClass = "";
  }

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitle : void 0) {
    pageTitle = "" + CoreForm.pageTitle;
    pageTitleTrClass = "";
  }

  val = {
    pageTitle: pageTitle,
    pageTitleTrClass: pageTitleTrClass
  };
  return val;
};

TemplateManager.handleTableTemplate = function (instance, _export) {
  var table_fields, template;
  template = "<div class='instance-template'>\n	<table class=\"table-page-title form-table no-border text-align-center\" style=\"width: 100%;display: inline-table;\">\n		<tr class=\"" + this.instance_title().pageTitleTrClass + "\">\n			<td class=\"instance-table-name-td page-title\">\n				" + this.instance_title().pageTitle + "\n			</td>\n		</tr>\n\n	</table>\n	<table class=\"table-page-body form-table\">\n			<tr style=\"height:0px\">\n				<th style='width: 16%'></th>\n				<th></th>\n				<th style='width: 16%'></th>\n				<th></th>\n			</tr>";
  table_fields = InstanceformTemplate.helpers.table_fields(instance);
  table_fields.forEach(function (table_field) {
    var field_permission, pureCode, required, title_permission;
    required = "";

    if (!(typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) || (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) !== table_field.code) {
      if (table_field.is_required) {
        required = "is-required";
      }

      if (_export) {
        required = "";
      }

      pureCode = Steedos.removeSpecialCharacter(table_field.code);

      if (InstanceformTemplate.helpers.isOpinionField(table_field)) {
        template += table_field.tr_start;
        template += "<td class=\"td-title " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field opinion-field opinion-field-" + pureCode + " automatic\" colspan = \"" + table_field.td_colspan + "\">\n	{{> instanceSignText name=\"" + table_field.code + "\"}}\n</td>";
        return template += table_field.tr_end;
      } else {
        if (InstanceformTemplate.helpers.includes(table_field.type, 'section,table')) {
          template += table_field.tr_start;
          template += "<td class=\"td-childfield td-childfield-" + pureCode + "\" colspan = \"" + table_field.td_colspan + "\">\n   {{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        } else {
          template += table_field.tr_start;

          if (_export) {
            title_permission = "";
            field_permission = "";
          } else {
            title_permission = "title-" + table_field.permission;
            field_permission = "field-" + table_field.permission;
          }

          template += "<td class=\"td-title td-title-" + pureCode + " " + title_permission + " " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field td-field-" + pureCode + " " + field_permission + "\" colspan = \"" + table_field.td_colspan + "\">\n	{{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        }
      }
    }
  });
  template += "	</table>\n\n	<table class=\"table-page-footer form-table no-border\">\n		<tr class=\"applicant-wrapper\">\n			<td class=\"nowrap\">\n				<div class='inline-left'>\n					<label class=\"control-label\">{{_t \"instance_initiator\"}}：</label>\n				</div>\n				<div class='instance-table-wrapper-td inline-left'>\n					{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n				</div>\n			</td>\n			<td class=\"nowrap\">\n				<div class='pull-left'>\n					<div class='inline-left'>\n						<label>{{_t \"instance_submit_date\"}}：</label>\n					</div>\n					<div class='inline-right'>\n						<div class=\"form-group\">\n							{{formatDate instance.submit_date '{\"format\":\"YYYY-MM-DD\"}'}}\n						</div>\n					</div>\n				</div>\n			</td>\n		</tr>\n	</table>\n</div>";
  return template;
};

TemplateManager._template = {
  "default": function (instance) {
    var template;
    template = "<div class=\"with-border col-md-12\">\n	<div class=\"instance-name\">\n		<h3 class=\"box-title\">" + TemplateManager.instance_title().pageTitle + "</h3>\n		<span class=\"help-block\"></span>\n	</div>\n	<span class=\"help-block\"></span>\n</div>\n{{#each steedos_form.fields}}\n	{{#if isOpinionField this}}\n		<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}}\">\n			<div class=\"form-group automatic opinion-field-{{this.code}}\">\n				<label class=\"control-label\">{{afFieldLabelText name=this.code}}</label>\n\n				{{> instanceSignText name=this.code}}\n			</div>\n		</div>\n	{{else}}\n		{{#if includes this.type 'section,table'}}\n			<div class=\"col-md-12\">\n				{{> afFormGroup name=this.code label=false}}\n			</div>\n		{{else}}\n			<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}}\">\n			{{> afFormGroup name=this.code}}\n			</div>\n		{{/if}}\n	{{/if}}\n{{/each}}\n<div class=\"col-md-12\">\n	<div class=\"applicant-wrapper form-group form-horizontal\">\n	<div class=\"input-group\">\n		<div class=\"input-group-addon\">\n		  {{_t \"instance_initiator\"}}&nbsp;:\n		</div>\n		{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n	  </div>\n	</div>\n</div>";
    return template;
  },
  table: function (instance) {
    return TemplateManager.handleTableTemplate(instance);
  }
};
TemplateManager._templateHelps = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control',
        style: 'padding:6px 12px;width:140px;display:inline'
      }
    };
    data.atts.disabled = true;
    return data;
  }
};
({
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = formId;
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  }
});

TemplateManager.getTemplate = function (instance, templateName) {
  var flow, form;
  flow = db.flows.findOne(instance.flow);
  form = db.forms.findOne(instance.form);

  if (templateName) {
    if (templateName === 'table') {
      return TemplateManager._template.table(instance);
    }

    return TemplateManager._template["default"](instance);
  }

  if (typeof Session !== "undefined" && Session !== null ? Session.get("instancePrint") : void 0) {
    if (flow != null ? flow.print_template : void 0) {
      return "<div class='instance-template'>" + flow.print_template + "</div>";
    } else {
      if (flow != null ? flow.instance_template : void 0) {
        return "<div class='instance-template'>" + flow.instance_template + "</div>";
      } else {
        return TemplateManager._template.table(instance);
      }
    }
  } else {
    if (Steedos.isMobile()) {
      return TemplateManager._template["default"](instance);
    }

    if (flow != null ? flow.instance_template : void 0) {
      return "<div class='instance-template'>" + flow.instance_template + "</div>";
    }

    if (form != null ? form.instance_style : void 0) {
      if (form.instance_style === 'table') {
        return TemplateManager._template.table(instance);
      }

      return TemplateManager._template["default"](instance);
    } else {
      return TemplateManager._template["default"](instance);
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"coreform":{"inputTypes":{"coreform-table":{"steedos-table.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/coreform/inputTypes/coreform-table/steedos-table.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
SteedosTable = {};
SteedosTable.formId = "instanceform";

SteedosTable.checkItem = function (field, item_index) {
  var fieldObj = SteedosTable.getField(field);
  var fieldVal = SteedosTable.getItemModalValue(field, item_index);
  var sf_name = '';
  var rev = true;
  fieldObj.sfields.forEach(function (sf) {
    if (sf.permission == 'editable') {
      sf_name = fieldObj.code + "." + sf.code;

      if (!InstanceManager.checkFormFieldValue($("[name='" + sf_name + "']")[0])) {
        rev = false;
      }
    }
  });
  return rev;
};

SteedosTable.setTableItemValue = function (field, item_index, item_value) {
  var tableValue = SteedosTable.getTableValue(field);
  tableValue[item_index] = item_value;
};

SteedosTable.getTableItemValue = function (field, item_index) {
  return SteedosTable.getTableValue(field)[item_index];
};

SteedosTable.removeTableItem = function (field, item_index) {
  var item_value = SteedosTable.getTableItemValue(field, item_index);
  item_value.removed = true;
};

SteedosTable.setTableValue = function (field, value) {
  $("table[name='" + field + "']").val({
    val: value
  });
};

SteedosTable.getTableValue = function (field) {
  return $("table[name='" + field + "']").val().val;
};

SteedosTable.getValidValue = function (field) {
  var value = SteedosTable.getTableValue(field);

  if (!value) {
    return;
  }

  var validValue = [];
  value.forEach(function (v) {
    if (!v.removed) {
      validValue.push(v);
    }
  });
  return validValue;
};

SteedosTable.handleData = function (field, values) {
  if (!values || !(values instanceof Array)) {
    return values;
  }

  var fieldObj = SteedosTable.getField(field);
  values.forEach(function (v) {
    fieldObj.sfields.forEach(function (f) {
      if (f.type == 'user' || f.type == 'group') {
        var value = v[f.code];

        if (f.is_multiselect) {
          if (value && value.length > 0 && typeof value[0] == 'object') {
            v[f.code] = v[f.code].getProperty("id");
          }
        } else {
          if (value && typeof value == 'object') {
            v[f.code] = v[f.code].id;
          }
        }
      } else if (f.type == 'dateTime') {
        var value = v[f.code];

        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
            v[f.code] = value;
          }
        }
      }
    });
  });
  return values;
};

SteedosTable.getField = function (field) {
  var instanceFields = WorkflowManager.getInstanceFields();
  if (!instanceFields) return;
  var fieldObj = instanceFields.findPropertyByPK("code", field);
  return fieldObj;
};

SteedosTable.getModalData = function (field, index) {
  var data = {};
  var fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return;
  }

  data.field = fieldObj;
  data.field.formula = Form_formula.getFormulaFieldVariable("Form_formula.field_values", fieldObj.sfields);
  data.value = {};
  data.value[field] = SteedosTable.getTableItemValue(field, index);
  data.index = index;
  return data;
};

SteedosTable.getItemModalValue = function (field, item_index) {
  if (!AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index)) {
    return {};
  }

  var item_value = AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index).insertDoc[field];
  return item_value;
};

SteedosTable.addItem = function (field, index, _item_value) {
  var keys = SteedosTable.getKeys(field);

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  $("tbody[name='" + field + "Tbody']").append(SteedosTable.getTr(keys, item_value, index, field, true));
};

SteedosTable.updateItem = function (field, index, _item_value) {
  var item = $("tr[name='" + field + "_item_" + index + "']");

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  if (item && item.length > 0) {
    var keys = SteedosTable.getKeys(field);
    var tds = SteedosTable.getRemoveTd(field, index);
    var sfields = SteedosTable.getField(field).sfields;
    keys.forEach(function (key) {
      var sfield = sfields.findPropertyByPK("code", key);
      var value = item_value[key];
      tds = tds + SteedosTable.getTd(sfield, index, value);
    });
    item.empty();
    item.append(tds);
  } else {
    SteedosTable.addItem(field, index);
  }

  if (SteedosTable.getTableValue(field)) {
    SteedosTable.setTableItemValue(field, index, item_value); //SteedosTable.valueHash[field][index] = item_value;
  } else {
    //SteedosTable.valueHash[field] = [item_value];
    SteedosTable.setTableValue(field, [item_value]);
  } //执行主表公式计算


  InstanceManager.runFormula(field);
};

SteedosTable.removeItem = function (field, index) {
  $("tr[name='" + field + "_item_" + index + "']").hide();
  SteedosTable.removeTableItem(field, index);
  InstanceManager.runFormula(field);
};

SteedosTable.showModal = function (field, index, method) {
  var modalData = SteedosTable.getModalData(field, index);
  modalData.method = method;
  Modal.show("steedosTableModal", modalData);
};

SteedosTable.getKeys = function (field) {
  if (!AutoForm.getCurrentDataForForm(SteedosTable.formId)) {
    return [];
  }

  var ss = AutoForm.getFormSchema(SteedosTable.formId);
  var keys = [];

  if (ss.schema(field + ".$").type === Object) {
    keys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');
  }

  return keys;
};

SteedosTable.getThead = function (field, editable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return '';
  }

  var thead = '',
      trs = '',
      label = '',
      width = 100;

  if (editable) {
    // trs = "<th class='removed'></th>"
    trs = "";
  }

  var sfields = fieldObj.sfields;

  if (!sfields) {
    return thead;
  }

  var sf_length = sfields.length;

  if (sf_length > 0) {
    var wide_fields = sfields.filterProperty("is_wide", true);
    width = 100 / (sf_length + wide_fields.length);
  }

  sfields.forEach(function (sf, index) {
    label = sf.name != null && sf.name.length > 0 ? sf.name : sf.code;
    trs = trs + "<td "; // nowrap='nowrap'

    trs = trs + " class='title " + sf.type + "'";

    if (index != sf_length - 1) {
      if (sf.is_wide) {
        trs = trs + "style='width:" + width * 2 + "%'";
      } else {
        trs = trs + "style='width:" + width + "%'";
      }
    }

    trs = trs + ">" + label + "</td>";
  });
  thead = '<tr>' + trs + '</tr>';
  return thead;
};

SteedosTable.getTbody = function (keys, field, values, editable) {
  var tbody = "";

  if (values instanceof Array) {
    values.forEach(function (value, index) {
      tbody = tbody + SteedosTable.getTr(keys, value, index, field, editable);
    });
  }

  return tbody;
};

SteedosTable.getTr = function (keys, item_value, index, field, editable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);
  var tr = "<tr id='" + fieldObj.code + "_item_" + index + "' name='" + fieldObj.code + "_item_" + index + "' data-index='" + index + "'";

  if (editable) {
    tr = tr + "' class='item edit'";
  } else {
    if (Steedos.isMobile()) {
      tr = tr + " class='item item-readonly'";
    } else {
      tr = tr + " class='item '";
    }
  }

  if (item_value.removed) {
    tr = tr + " style='display:none' ";
  }

  tr = tr + "'>";
  var tds = "";

  if (editable) {
    tds = SteedosTable.getRemoveTd(fieldObj.code, index);
  }

  var sfields = fieldObj.sfields;
  keys.forEach(function (key) {
    var sfield = sfields.findPropertyByPK("code", key);
    var value = item_value[key];
    tds = tds + SteedosTable.getTd(sfield, index, value);
  });
  tr = tr + tds + "</tr>";
  return tr;
};

SteedosTable.getRemoveTd = function (field, index) {
  // return "<td class='steedosTable-item-remove removed' data-index='" + index + "'><i class='fa fa-times' aria-hidden='true'></td>";
  return "";
};

SteedosTable.getTd = function (field, index, value) {
  var td = "<td ";
  td = td + " class='steedosTable-item-field " + field.type + "' ";
  var td_value = "";

  if (Meteor.isClient) {
    td_value = SteedosTable.getTDValue(field, value);
  } else {
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    td_value = InstanceReadOnlyTemplate.getValue(value, field, locale, utcOffset);
  }

  td = td + " data-index='" + index + "'>" + td_value + "</td>";
  return td;
};

SteedosTable.getTDValue = function (field, value) {
  var td_value = "";

  if (!field) {
    return td_value;
  }

  try {
    switch (field.type) {
      case 'user':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaSpaceUsers(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var u = CFDataManager.getFormulaSpaceUsers(value);
              td_value = u ? u.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'group':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaOrganizations(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var o = CFDataManager.getFormulaOrganization(value);
              td_value = o ? o.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'checkbox':
        if (value === true || value == 'true') {
          td_value = TAPi18n.__("form_field_checkbox_yes");
        } else {
          td_value = TAPi18n.__("form_field_checkbox_no");
        }

        break;

      case 'email':
        td_value = value ? "<a href='mailto:" + value + "'>" + value + "</a>" : "";
        break;

      case 'url':
        if (value) {
          if (value.indexOf("http") == 0) {
            try {
              td_value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
            } catch (e) {
              td_value = "<a href='' target='_blank'>" + value + "</a>";
            }
          } else {
            td_value = "<a href='http://" + encodeURI(value) + "' target='_blank'>http://" + value + "</a>";
          }
        } else {
          td_value = "";
        }

        break;

      case 'password':
        td_value = '******';
        break;

      case 'date':
        if (value) {
          if (value.length == 10) {
            var t = value.split("-");
            year = t[0];
            month = t[1];
            date = t[2];
            value = new Date(year, month - 1, date);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd');
        }

        break;

      case 'dateTime':
        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd HH:mm');
        }

        break;

      case 'number':
        if (value || value == 0) {
          if (typeof value == 'string') {
            value = parseFloat(value);
          }

          td_value = value.toFixed(field.digits);
          td_value = Steedos.numberToString(td_value);
        }

        break;

      case 'odata':
        if (value) {
          td_value = value['@label'];
        }

        break;

      default:
        td_value = value ? value : '';
        break;
    }
  } catch (e) {
    e;
    return '';
  }

  return td_value;
};

if (Meteor.isClient) {
  AutoForm.addInputType("table", {
    template: "afTable",
    valueOut: function () {
      var name = this.data("schemaKey");
      return SteedosTable.getValidValue(name);
    },
    valueConverters: {
      "stringArray": AutoForm.valueConverters.stringToStringArray,
      "number": AutoForm.valueConverters.stringToNumber,
      "numerArray": AutoForm.valueConverters.stringToNumberArray,
      "boolean": AutoForm.valueConverters.stringToBoolean,
      "booleanArray": AutoForm.valueConverters.stringToBooleanArray,
      "date": AutoForm.valueConverters.stringToDate,
      "dateArray": AutoForm.valueConverters.stringToDateArray
    },
    contextAdjust: function (context) {
      if (typeof context.atts.maxlength === 'undefined' && typeof context.max === 'number') {
        context.atts.maxlength = context.max;
      }

      return context;
    }
  });
  Template.afTable.events({
    'tap .steedos-table .steedosTable-item-add,.add-item-tr': function (event, template) {
      var name = template.data.name;
      var tableValue = SteedosTable.getTableValue(name);
      var new_item_index = tableValue ? tableValue.length : 0;
      SteedosTable.showModal(name, new_item_index, "add");
    },
    'tap .steedos-table .steedosTable-item-field': function (event, template) {
      if (template.data.atts.editable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "edit");
      }
    },
    'tap .steedos-table .steedosTable-item-remove': function (event, template) {
      var field = template.data.name;
      var item_index = event.currentTarget.dataset.index;
      Session.set("instance_change", true);
      SteedosTable.removeItem(field, item_index);
    },
    'tap .steedos-table .item-readonly': function (event, template) {
      if (!template.data.atts.editable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "read");
      }
    }
  });

  Template.afTable.rendered = function () {
    var field = this.data.name;
    var keys = SteedosTable.getKeys(field);
    var validValue = SteedosTable.handleData(field, this.data.value);
    SteedosTable.setTableValue(field, validValue);
    $("thead[name='" + field + "Thead']").html(SteedosTable.getThead(field, this.data.atts.editable));
    $("tbody[name='" + field + "Tbody']").html(SteedosTable.getTbody(keys, field, SteedosTable.getTableValue(field), this.data.atts.editable));
    str = t("steedos_table_add_item");
    addItemTr = "<tr class='add-item-tr'><td colspan='" + keys.length + "'><i class='ion ion-plus-round'></i>" + str + "</td></tr>";

    if (this.data.atts.editable) {
      $("tfoot[name='" + field + "Tfoot']").append(addItemTr);
    }
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"views":{"instance":{"_image_sign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_image_sign.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
ImageSign.helpers = {
  spaceUserSign: function (userId) {
    var space, spaceUserSign;
    space = "";

    if (Meteor.isServer) {
      space = Template.instance().view.template.steedosData.space;
    } else {
      space = Session.get("spaceId");
    }

    spaceUserSign = db.space_user_signs.findOne({
      space: space,
      user: userId
    });
    return spaceUserSign;
  },
  imageURL: function (userId) {
    var absolute, spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(userId);
    absolute = false;

    if (Meteor.isServer) {
      absolute = Template.instance().view.template.steedosData.absolute;
    }

    if (spaceUserSign != null ? spaceUserSign.sign : void 0) {
      if (absolute) {
        return Meteor.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      } else {
        return Steedos.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      }
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_form.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_form.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceformTemplate.helpers = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: steedos_instance.applicant_name
    };

    if (!steedos_instance || steedos_instance.state !== "draft") {
      data.atts.disabled = true;
    }

    return data;
  },
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = "instanceform";
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  empty: function (val) {
    if (val) {
      return false;
    } else {
      return true;
    }
  },
  unempty: function (val) {
    if (val) {
      return true;
    } else {
      return false;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  unequals: function (a, b) {
    return !(a === b);
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  include: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  formatDate: function (date, options) {
    if (!date) {
      return "";
    }

    if (options && typeof options === 'string') {
      options = JSON.parse(options);
    }

    if (!options.format) {
      options = {
        format: "YYYY-MM-DD HH:mm"
      };
    }

    return moment(date).format(options.format);
  },
  traces: function () {
    var flow, instance, locale, ref, ref1, ref2, ref3, steedosData, steps, traces;

    if (Meteor.isServer) {
      steedosData = (ref = Template.instance()) != null ? (ref1 = ref.view) != null ? (ref2 = ref1.template) != null ? ref2.steedosData : void 0 : void 0 : void 0;
      instance = steedosData != null ? steedosData.instance : void 0;
      flow = InstanceReadOnlyTemplate.getFlowVersion(instance);
      locale = steedosData != null ? steedosData.locale : void 0;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      instance = WorkflowManager.getInstance();
      flow = WorkflowManager.getInstanceFlowVersion();
      locale = Session.get("TAPi18n::loaded_lang");
    }

    if (!instance || !flow) {
      return {};
    }

    steps = flow.steps;
    traces = {};

    if ((ref3 = instance.traces) != null) {
      ref3.forEach(function (trace) {
        var approves, ref4, step;
        step = steps.findPropertyByPK("_id", trace.step);
        approves = [];

        if ((ref4 = trace.approves) != null) {
          ref4.forEach(function (approve) {
            var judge_name;

            if (trace.is_finished === true) {
              if (approve.judge === 'approved') {
                judge_name = TAPi18n.__("Instance State approved", {}, locale);
              } else if (approve.judge === 'rejected') {
                judge_name = TAPi18n.__("Instance State rejected", {}, locale);
              } else if (approve.judge === 'terminated') {
                judge_name = TAPi18n.__("Instance State terminated", {}, locale);
              } else if (approve.judge === 'reassigned') {
                judge_name = TAPi18n.__("Instance State reassigned", {}, locale);
              } else if (approve.judge === 'relocated') {
                judge_name = TAPi18n.__("Instance State relocated", {}, locale);
              } else if (approve.judge === '') {
                judge_name = "";
              } else {
                judge_name = "";
              }
            } else {
              judge_name = TAPi18n.__("Instance State pending", {}, locale);
            }

            return approves.push({
              _id: approve._id,
              handler: approve.user,
              handler_name: approve.handler_name,
              handler_organization_name: approve.handler_organization_name,
              handler_organization_fullname: approve.handler_organization_fullname,
              finish_date: approve.finish_date,
              judge: approve.judge,
              judge_name: judge_name,
              description: approve.description,
              is_finished: approve.is_finished,
              type: approve.type,
              opinion_fields_code: approve.opinion_fields_code,
              sign_field_code: approve.sign_field_code,
              is_read: approve.is_read,
              sign_show: approve.sign_show
            });
          });
        }

        if (step) {
          if (step.name in traces) {
            return traces[step.name] = traces[step.name].concat(approves);
          } else {
            return traces[step.name] = approves;
          }
        }
      });
    }

    return traces;
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  },
  table_fields: function (instance) {
    var fields, form_version;

    if (Meteor.isClient) {
      form_version = WorkflowManager.getInstanceFormVersion();
    } else {
      form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
    }

    if (form_version) {
      fields = _.clone(form_version.fields);
      fields.forEach(function (field, index) {
        var after_field, before_field, pre_fields, pre_wide_fields, td_colspan, tr_end, tr_start;
        field.tr_start = "";
        field.tr_end = "";
        td_colspan = 1;

        if ((typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) === field.code) {
          field.is_wide = true;
        }

        if (field.formula && field.type !== 'odata') {
          field.permission = "readonly";
        }

        if (Steedos.isMobile()) {
          if (field.type === 'section' || field.type === 'table') {
            field.td_colspan = 4;
          } else {
            field.td_colspan = 3;
          }

          if (index !== 0) {
            field.tr_start = "<tr>";
            return field.tr_end = "</tr>";
          }
        } else {
          pre_fields = fields.slice(0, index);
          pre_wide_fields = pre_fields.filterProperty("is_wide", true);
          tr_start = "";
          tr_end = "";
          before_field = null;
          after_field = null;

          if (index > 0) {
            before_field = fields[index - 1];
          }

          if (index < fields.length - 1) {
            after_field = fields[index + 1];
          }

          if (field.type === 'section' || field.type === 'table') {
            td_colspan = 4;
          } else if (field.is_wide) {
            td_colspan = 3;
          } else {
            if (before_field && after_field && before_field.is_wide && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field === null) {
              field.is_wide = true;
              td_colspan = 3;
            }
          }

          field.td_colspan = td_colspan;

          if (index === 0) {
            tr_start = "<tr>";
          } else {
            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 || field.is_wide) {
              if (field.type === 'table') {
                tr_start = "<tr class = \"tr-child-table\">";
              } else {
                tr_start = "<tr>";
              }
            }
          }

          field.tr_start = tr_start;

          if (index + 1 === fields.length || field.type === 'section' || field.type === 'table' || field.is_wide) {
            tr_end = "</tr>";
          }

          if ((pre_fields.length + pre_wide_fields.length) % 2 !== 0) {
            tr_end = "</tr>";
          }

          return field.tr_end = tr_end;
        }
      });
      return fields;
    }
  },
  sort_approve: function (approves, order) {
    if (!approves) {
      return [];
    }

    if (!approves instanceof Array) {
      return [];
    } else {
      if (order === 'desc') {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p2 - _p1;
        });
      } else {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p1 - _p2;
        });
      }
    }

    return approves;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  getField: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;

    if (form_version) {
      return form_version.fields.findPropertyByPK("code", code);
    }
  },
  getValue: function (code) {
    var form_version, instance, locale, utcOffset, values;
    instance = Template.instance().view.template.steedosData.instance;
    form_version = Template.instance().view.template.steedosData.form_version;
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    values = instance.values || {};

    if (Meteor.isClient) {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    return InstanceReadOnlyTemplate.getValue(values[code], form_version.fields.findPropertyByPK("code", code), locale, utcOffset);
  },
  getLabel: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, code);
  },
  getCfClass: function (field) {
    if ((field != null ? field.type : void 0) === "input" && (field != null ? field.is_textarea : void 0)) {
      return "cfTextarea";
    }
  },
  getTableThead: function (field) {
    return SteedosTable.getThead(field, false);
  },
  getTableBody: function (field) {
    var instance, tableValue, values;

    if (Meteor.isServer) {
      instance = Template.instance().view.template.steedosData.instance;
      values = instance.values || {};
    } else {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    tableValue = values[field.code];
    return SteedosTable.getTbody(field.sfields.getProperty("code"), field, tableValue, false);
  },
  showLabel: function (field) {
    var templateData;
    templateData = Template.instance().data;

    if (templateData.label === false) {
      return false;
    }

    return true;
  },
  isOpinionField: function (field) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field.formula);
  },
  isOpinionField_from_string: function (field_formula) {
    return InstanceSignText.isOpinionField_from_string(field_formula);
  },
  includesOpinionField: function (form, form_version) {
    var field_formulas, fields, ref;
    field_formulas = new Array();
    fields = ((ref = db.form_versions.findOne({
      _id: form_version,
      form: form
    })) != null ? ref.fields : void 0) || [];
    fields.forEach(function (f) {
      var ref1;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref1 = f.fields) != null ? ref1.forEach(function (f1) {
          return field_formulas.push(f1.formula);
        }) : void 0 : void 0;
      } else {
        return field_formulas.push(f.formula);
      }
    });
    return _.some(field_formulas, function (field_formula) {
      return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
    });
  },
  getOpinionFieldStepsName: function (field_formula, top_keywords) {
    var foo1, opinionFields;
    opinionFields = new Array();

    if (InstanceformTemplate.helpers.isOpinionField_from_string(field_formula)) {
      if (field_formula) {
        foo1 = field_formula.split(";");
        foo1.forEach(function (foo) {
          var json_formula, ref, ref1, s1, sf;
          json_formula = {};

          try {
            json_formula = eval("(" + foo + ")");
          } catch (error1) {
            json_formula = {};
          }

          if (json_formula != null ? json_formula.yijianlan : void 0) {
            sf = {};
            sf.stepName = json_formula.yijianlan.step;
            sf.image_sign = json_formula.yijianlan.image_sign || false;
            sf.only_cc_opinion = json_formula.yijianlan.only_cc || false;
            sf.default_description = json_formula.yijianlan["default"];
            sf.only_handler = json_formula.yijianlan.only_handler;
            sf.top_keywords = json_formula.yijianlan.top_keywords || top_keywords;
            return opinionFields.push(sf);
          } else if ((field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1) {
            sf = {
              only_cc_opinion: false,
              image_sign: false,
              top_keywords: top_keywords
            };

            if (foo.indexOf("{signature.") > -1) {
              sf.image_sign = true;
              foo = foo.replace("{signature.", "");
            }

            s1 = foo.replace("{", "").replace("}", "");

            if (s1.split(".").length > 1) {
              sf.stepName = s1.split(".")[1];

              if (opinionFields.filterProperty("stepName", sf.stepName).length > 0) {
                if ((ref = opinionFields.findPropertyByPK("stepName", sf.stepName)) != null) {
                  ref.only_cc_opinion = true;
                }
              } else {
                if (s1.split(".").length > 2) {
                  if (((ref1 = s1.split(".")[2]) != null ? ref1.toLocaleLowerCase() : void 0) === 'cc') {
                    sf.only_cc_opinion = true;
                  }
                }
              }
            }

            return opinionFields.push(sf);
          }
        });
      }
    }

    return opinionFields;
  },
  showCCOpinion: function (field) {
    var ref, ref1, ref2, s1;

    if (((ref = field.formula) != null ? ref.indexOf("{traces.") : void 0) > -1 || ((ref1 = field.formula) != null ? ref1.indexOf("{signature.traces.") : void 0) > -1) {
      s1 = field.formula.replace("{signature.", "").replace("{", "").replace("}", "");

      if (s1.split(".").length > 2) {
        if (((ref2 = s1.split(".")[2]) != null ? ref2.toLocaleLowerCase() : void 0) === 'cc') {
          return true;
        }
      }
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  f_label: function (that) {
    return that.name || that.code;
  }
};

if (Meteor.isServer) {
  InstanceformTemplate.helpers.steedos_form = function () {
    return this.form_version;
  };

  InstanceformTemplate.helpers.isSection = function (code) {
    var form_version;
    form_version = this.form_version;
    return form_version.fields.findPropertyByPK("code", code).type === 'section';
  };

  InstanceformTemplate.helpers.doc_values = function () {
    var instance;
    instance = this.instance;
    return instance.values;
  };

  InstanceformTemplate.helpers.applicantContext = function () {
    var data, instance;
    instance = this.instance;
    return data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: instance.applicant_name
    };
  };

  InstanceformTemplate.helpers.instance = function () {
    return this.instance;
  };

  InstanceformTemplate.helpers.fields = function () {
    var form_version;
    form_version = this.form_version;

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  };

  InstanceformTemplate.helpers.form_types = function () {
    return "disabled";
  };

  Template.registerHelper("afFieldLabelText", function (op) {
    var form_version, ref;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, op != null ? (ref = op.hash) != null ? ref.name : void 0 : void 0);
  });

  InstanceformTemplate.helpers._t = function (key) {
    var locale;
    locale = this.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceformTemplate.helpers.ins_attach_download_url = function (_id, absolute) {
    if (absolute) {
      return Meteor.absoluteUrl("/api/files/instances/" + _id + "?download=true");
    } else {
      return "/api/files/instances/" + _id + "?download=true";
    }
  };

  InstanceformTemplate.helpers.options = function (field) {
    var options, ref, rev;
    options = field != null ? (ref = field.options) != null ? ref.split("\n") : void 0 : void 0;
    rev = [];

    if (options != null) {
      options.forEach(function (item) {
        return rev.push({
          label: item,
          value: item
        });
      });
    }

    return rev;
  };

  InstanceformTemplate.helpers.getPermissions = function (code) {
    var ref;

    if (!((ref = Template.instance().view.template.steedosData.startStepEditableFields) != null ? ref.includes(code) : void 0)) {
      return "readonly disabled";
    }

    return "";
  };
}

InstanceformTemplate.events = {
  'change .form-control,.checkbox input,.af-radio-group input,.af-checkbox-group input': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'typeahead:change .form-control': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'click .cfTextarea a': function (event) {
    event.preventDefault();
    return Steedos.openWindow(event.target.href);
  }
};

InstanceformTemplate.onCreated = function () {
  var compiled, e, instance, instanceCustomTemplate, instanceView, renderFunction, template;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  template = TemplateManager.getTemplate(instance);

  try {
    compiled = SpacebarsCompiler.compile(template, {
      isBody: true
    });
  } catch (error1) {
    e = error1;
    console.log("Instance Template Error", e);
    compiled = SpacebarsCompiler.compile("", {
      isBody: true
    });
  }

  renderFunction = eval(compiled);
  instanceView = new Blaze.View("custom_instance_template", renderFunction);
  instanceCustomTemplate = new Blaze.Template(instanceView.name, renderFunction);
  Template.instance_custom_template = instanceCustomTemplate;
  return Template.instance_custom_template.helpers(InstanceformTemplate.helpers);
};

InstanceformTemplate.onRendered = function () {
  var currentApprove, currentStep, form_version, formula_fields, instance, instanceNumberFields, judge, ref;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  if ((ref = $("input[name='ins_applicant']")[0]) != null) {
    ref.dataset.values = instance.applicant;
  }

  $("input[name='ins_applicant']").val(instance.applicant_name);
  ApproveManager.error = {
    nextSteps: '',
    nextStepUsers: ''
  };

  if (Session.get("box") === 'inbox' || Session.get("box") === 'draft') {
    InstanceEvent.initEvents(instance.flow);
  }

  if (!ApproveManager.isReadOnly()) {
    currentApprove = InstanceManager.getCurrentApprove();
    instanceNumberFields = $("[data-formula]", $("#instanceform"));
    instanceNumberFields.each(function () {
      var element, schemaKey;
      schemaKey = this.dataset.schemaKey;
      element = $(this);

      if (!$(this).val() && schemaKey && Session.get("instanceId")) {
        return Meteor.call('getInstanceValues', Session.get("instanceId"), function (error, result) {
          var key, ref1;

          if (error) {
            toastr.error(error.reason);
          }

          if (!result[schemaKey]) {
            key = (ref1 = element.data("formula")) != null ? ref1.replace("auto_number(", "").replace(")", "") : void 0;
            key = key.replace(/\"/g, "").replace(/\'/g, "");

            if (key.indexOf("{") > -1) {
              key = key.replace("{", "").replace("}", "");
              key = key.trim();
              key = AutoForm.getFieldValue(key, 'instanceform');
            }

            return InstanceNumberRules.instanceNumberBuilder(element, key);
          } else {
            return element != null ? element.val(result[schemaKey]).trigger("change") : void 0;
          }
        });
      }
    });
    judge = currentApprove.judge;
    currentStep = InstanceManager.getCurrentStep();
    form_version = WorkflowManager.getInstanceFormVersion();
    formula_fields = Form_formula.getFormulaFieldVariable("Form_formula.field_values", form_version.fields);
    Form_formula.run("", "", formula_fields, AutoForm.getFormValues("instanceform").insertDoc, form_version.fields);
    return Session.set("instance_form_values", {
      instanceId: instance._id,
      values: AutoForm.getFormValues("instanceform").insertDoc
    });
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_attachments.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_attachments.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
InstanceAttachmentTemplate.helpers = {
  showMainTitle: function () {
    return Template.instance().workflowMainAttachTitle.get();
  },
  enabled_add_main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    var current_step = InstanceManager.getCurrentStep();
    if (!current_step) return false; // 分发的正文或者附件不显示转为pdf按钮
    // 如果有正文权限则为正文，否则分发为附件
    // 分发的附件不允许修改 删除 新增版本

    var main_attach_count = cfs.instances.find({
      'metadata.instance': ins._id,
      'metadata.current': true,
      'metadata.main': true
    }).count();
    var distribute_main_attach_count = 0;

    if (ins.distribute_from_instance) {
      var start_step = InstanceManager.getStartStep();

      if (start_step.can_edit_main_attach) {
        var distribute_main_attach_count = cfs.instances.find({
          'metadata.instance': ins.distribute_from_instance,
          'metadata.current': true,
          'metadata.main': true
        }).count();
      }
    }

    if (current_step.can_edit_main_attach == true && main_attach_count < 1 && distribute_main_attach_count < 1) {
      return true;
    } // 正文最多只能有一个


    if (main_attach_count >= 1 || distribute_main_attach_count >= 1) {
      return false;
    } // 开始节点并且设置了可以上传正文才显示上传正文的按钮


    var current_step = InstanceManager.getCurrentStep();
    if (current_step && current_step.step_type == "start" && current_step.can_edit_main_attach == true) return true;
    return false;
  },
  enabled_edit_normal_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;
    var flow = WorkflowManager.getFlow(ins.flow);
    if (!flow) return false; // 分发后的 附件，不可以编辑/删除，也不让上传新的附件, 流程列表：添加属性 ‘被分发后是否允许上传附件’ #1837

    if (ins.distribute_from_instance && !flow.upload_after_being_distributed) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    if (InstanceManager.isCC(ins)) {
      var step = InstanceManager.getCCStep();
      if (step && (step.can_edit_normal_attach == true || step.can_edit_normal_attach == undefined)) return true;
    } else {
      var current_step = InstanceManager.getCurrentStep();
      if (current_step && (current_step.can_edit_normal_attach == true || current_step.can_edit_normal_attach == undefined)) return true;
    }

    return false;
  },
  main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var start_step = InstanceManager.getStartStep(); // 如果是被分发的申请单并且有修改正文的权限，则优先显示原申请单文件

    var main_attach = null;

    if (ins.distribute_from_instance && start_step.can_edit_main_attach == true) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins.distribute_from_instance,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    if (!main_attach) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins._id,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    return main_attach;
  },
  normal_attachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var selector = {
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      }
    };
    var atts = new Array();

    if (ins.distribute_from_instance) {
      // 如果是被分发的申请单，则显示原申请单文件, 如果选择了将原表单存储为附件也要显示, 同时也要显示新上传的附件
      var dfis = _.clone(ins.distribute_from_instances) || [];
      dfis.push(ins._id);
      selector['metadata.instance'] = {
        $in: dfis
      };
      selector["$or"] = [{
        "metadata.instance": ins._id
      }, {
        "metadata.instance": {
          $in: ins.distribute_from_instances
        },
        "metadata.is_private": {
          $ne: true
        }
      }]; // 如果原申请单有正文但是分发后没有正文权限，则原申请单正文显示在附件栏

      var start_step = InstanceManager.getStartStep();

      if (start_step && start_step.can_edit_main_attach != true) {
        var distribute_main = cfs.instances.findOne({
          'metadata.instance': {
            $in: ins.distribute_from_instances
          },
          'metadata.current': true,
          'metadata.main': true
        });

        if (distribute_main) {
          var firstVersionMain = cfs.instances.findOne(distribute_main.metadata.parent);
          distribute_main.attachmentUploadedAt = firstVersionMain ? firstVersionMain.uploadedAt : distribute_main.uploadedAt;
          atts.push(distribute_main);
        }
      }
    } else {
      selector['metadata.instance'] = ins._id;
    }

    cfs.instances.find(selector).forEach(function (c) {
      var firstVersion = cfs.instances.findOne(c.metadata.parent);
      c.attachmentUploadedAt = firstVersion ? firstVersion.uploadedAt : c.uploadedAt;
      atts.push(c);
    });
    return _.sortBy(atts, 'attachmentUploadedAt');
  },
  showAttachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false; // 如果是被分发的申请单，则显示原申请单文件 和分发后申请单文件

    var instanceIds = _.clone(ins.distribute_from_instances) || [];
    instanceIds.push(ins._id);
    var attachments_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).count();
    if (Session && Session.get("instancePrint") && attachments_count < 1) return false;
    if (Session.get("box") == "draft" || Session.get("box") == "inbox" || attachments_count > 0) return true;else return false;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  }
};

if (Meteor.isServer) {
  InstanceAttachmentTemplate.helpers._t = function (key) {
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceAttachmentTemplate.helpers.enabled_add_main_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.enabled_edit_normal_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.main_attachment = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var attachment = cfs.instances.findOne({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    });
    return attachment;
  };

  InstanceAttachmentTemplate.helpers.normal_attachments = function () {
    var steedosData = Template.instance().view.template.steedosData;
    var instance = steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      },
      $or: [{
        'metadata.is_private': {
          $ne: true
        }
      }, {
        'metadata.is_private': true,
        "metadata.owner": steedosData.userId
      }]
    }).fetch();
    return attachments;
  };

  InstanceAttachmentTemplate.helpers.showAttachments = function () {
    var instance = Template.instance().view.template.steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).fetch();

    if (attachments && attachments.length > 0) {
      return true;
    }

    return false;
  };

  InstanceAttachmentTemplate.helpers.showMainTitle = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var main_attach_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    }).count();
    return main_attach_count > 0;
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_sign_text.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_sign_text.coffee                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceSignText.helpers = {
  show: function (stepName) {
    var instance, myApprove, myTrace, ref;

    if (Meteor.isClient) {
      if (Session.get('instancePrint')) {
        return false;
      }

      if (InstanceManager.isInbox()) {
        myApprove = InstanceManager.getCurrentApprove();

        if (myApprove) {
          instance = WorkflowManager.getInstance();
          myTrace = instance != null ? (ref = instance.traces) != null ? ref.findPropertyByPK("_id", myApprove.trace) : void 0 : void 0;
          return (myTrace != null ? myTrace.name : void 0) === stepName;
        }
      }
    }

    return false;
  },
  defaultDescription: function () {
    return Template.instance().data.default_description;
  },
  traces: function () {
    return InstanceformTemplate.helpers.traces();
  },
  trace: function (stepName, only_cc_opinion, image_sign, top_keywords) {
    var approve_sort, approves, approvesGroup, approves_sorted, completed_date, hasNext, haveDescriptionApprove, instance, is_completed, ref, ref1, ref2, traces;
    instance = InstanceformTemplate.helpers.instance();
    is_completed = (instance != null ? instance.state : void 0) === "completed";
    completed_date = is_completed ? (ref = _.last(instance.traces)) != null ? (ref1 = ref.finish_date) != null ? ref1.getTime() : void 0 : void 0 : 0;

    if (is_completed && instance.finish_date) {
      completed_date = (ref2 = instance.finish_date) != null ? ref2.getTime() : void 0;
    }

    traces = InstanceformTemplate.helpers.traces();
    approves = _.clone(traces[stepName]);

    approve_sort = function (approves, top_keywords) {
      var approves_sorted, top_approves;
      approves_sorted = _.sortBy(approves, function (approve) {
        return -(approve.finish_date || new Date()).getTime();
      });

      if (top_keywords) {
        top_approves = new Array();
        top_keywords.split(",").forEach(function (key) {
          return top_approves = _.union(top_approves, _.filter(approves_sorted, function (approve) {
            var ref3;
            return (approve != null ? (ref3 = approve.handler_name) != null ? ref3.indexOf(key) : void 0 : void 0) > -1;
          }));
        });
        top_approves = _.sortBy(top_approves, function (top_approve) {
          return -(top_approve.finish_date || new Date()).getTime();
        });
        approves_sorted = _.union(top_approves, approves_sorted);
      }

      return approves_sorted || [];
    };

    approves = _.filter(approves, function (a) {
      return a.type !== "forward" && a.type !== "distribute" && a.type !== "terminated";
    });

    if (only_cc_opinion) {
      approves = approves != null ? approves.filterProperty("type", "cc") : void 0;
    }

    approves_sorted = approve_sort(approves, top_keywords);
    approvesGroup = _.groupBy(approves, "handler");

    hasNext = function (approve, approvesGroup) {
      var handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      return _.indexOf(handlerApproves, approve) + 1 < handlerApproves.length;
    };

    haveDescriptionApprove = function (approve, approvesGroup) {
      var descriptionApproves, handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      descriptionApproves = _.filter(handlerApproves, function (a) {
        if (a.description) {
          return true;
        }

        return false;
      });

      if (descriptionApproves.length === 0) {
        return false;
      }

      return true;
    };

    approves_sorted.forEach(function (approve) {
      if (approve.sign_show !== false && (approve.description || !approve.description && !hasNext(approve, approvesGroup))) {
        if (approve.judge !== 'terminated') {
          return approve._display = true;
        }
      }
    });
    approves_sorted = _.filter(approves_sorted, function (a) {
      var ref3;

      if (is_completed) {
        return a._display === true && a.is_finished && ((ref3 = a.finish_date) != null ? ref3.getTime() : void 0) <= completed_date;
      } else {
        return a._display === true;
      }
    });
    return approves_sorted;
  },
  include: function (a, b) {
    return InstanceformTemplate.helpers.include(a, b);
  },
  unempty: function (val) {
    return InstanceformTemplate.helpers.unempty(val);
  },
  formatDate: function (date, options) {
    if (!options) {
      options = {
        "format": "YYYY-MM-DD"
      };
    }

    return InstanceformTemplate.helpers.formatDate(date, options);
  },
  isMyApprove: function (approve, only_cc_opinion) {
    var currentApprove, ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
      currentApprove = InstanceManager.getCurrentApprove();

      if (!(approve != null ? approve._id : void 0)) {
        approve = currentApprove;
      }

      if (approve._id === (currentApprove != null ? currentApprove._id : void 0) && (currentApprove != null ? currentApprove.type : void 0) === 'cc' && Template.instance().data.name) {
        if (_.indexOf(currentApprove != null ? currentApprove.opinion_fields_code : void 0, Template.instance().data.name) > -1) {
          return true;
        } else {
          return false;
        }
      }

      if (!((currentApprove != null ? currentApprove.type : void 0) === 'cc') && only_cc_opinion) {
        return false;
      }

      if (currentApprove && approve._id === currentApprove._id) {
        return true;
      }
    }

    return false;
  },
  myApproveDescription: function (approveId) {
    if (Meteor.isClient) {
      return TracesTemplate.helpers.myApproveDescription(approveId);
    }
  },
  now: function () {
    return new Date();
  },
  isReadOnly: function () {
    if (Meteor.isClient) {
      return ApproveManager.isReadOnly();
    }

    return false;
  },
  isOpinionOfField: function (approve) {
    if (approve.type === "cc" && Template.instance().data.name) {
      if (Template.instance().data.name === approve.sign_field_code) {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  steps: function (field_formula, step, only_cc_opinion, image_sign) {
    var ref, ref1, ref2, steps;
    steps = [];

    if (!step) {
      if (!field_formula) {
        field_formula = (ref = WorkflowManager.getInstanceFormVersion()) != null ? (ref1 = ref.fields) != null ? ref1.findPropertyByPK("code", this.name).formula : void 0 : void 0;
      }

      steps = InstanceformTemplate.helpers.getOpinionFieldStepsName(field_formula, (ref2 = Template.instance()) != null ? ref2.data.top_keywords : void 0);
    } else {
      steps = [{
        stepName: step,
        only_cc_opinion: only_cc_opinion,
        image_sign: image_sign
      }];
    }

    return steps;
  },
  imageSignData: function (handler) {
    return {
      user: handler
    };
  },
  showSignImage: function (handler, image_sign) {
    var spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(handler);

    if ((spaceUserSign != null ? spaceUserSign.sign : void 0) && image_sign) {
      return true;
    } else {
      return false;
    }
  },
  getLastSignApprove: function () {
    var ins;
    ins = WorkflowManager.getInstance();
    return _.last(TracesManager.getHandlerSignShowApproves(ins, Meteor.userId()));
  },
  lastMyApproveDescription: function () {
    var approves, currentStep, ref, traces;
    traces = InstanceformTemplate.helpers.traces();
    currentStep = InstanceManager.getCurrentStep();
    approves = _.clone(traces[currentStep.name]);
    approves = approves.filterProperty("handler", Meteor.userId());

    if (approves.length > 1) {
      return (ref = approves[approves.length - 2]) != null ? ref.description : void 0;
    }

    return "";
  },
  showApprove: function (approve) {
    if (approve != null ? approve.is_read : void 0) {
      if (approve.is_finished) {
        return ["approved", "rejected", "submitted", "readed"].includes(approve.judge);
      } else {
        return true;
      }
    }

    return false;
  },
  judge_description: function (judge) {
    return t(judge + "_description");
  },
  is_approved: function (judge) {
    return "approved" === judge;
  },
  is_rejected: function (judge) {
    return "rejected" === judge;
  },
  is_readed: function (judge) {
    return ["approved", "rejected", "submitted", "readed"].includes(judge);
  },
  addClass: function () {
    var name, ref, ref1;
    name = (ref = Template.instance()) != null ? (ref1 = ref.data) != null ? ref1.name : void 0 : void 0;
    setTimeout(function () {
      var e, element;

      try {
        element = $(".automatic.opinion-field-" + name);

        if (element.length > 0) {
          if (element != null ? element.is("td") : void 0) {
            return element.addClass('field-editable');
          } else {
            return $(".instance-sign", element).addClass('field-editable');
          }
        }
      } catch (error) {
        e = error;
        return console.log(e);
      }
    }, 1);
    return '';
  }
};

if (Meteor.isServer) {
  InstanceSignText.helpers.defaultDescription = function () {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return Template.instance().data.default_description || TAPi18n.__("instance_default_opinion", {}, locale);
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_traces_help.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_traces_help.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
TracesTemplate.helpers = {
  equals: function (a, b) {
    return a === b;
  },
  empty: function (a) {
    if (a) {
      return a.toString().trim().length < 1;
    } else {
      return true;
    }
  },
  unempty: function (a) {
    if (a) {
      return a.toString().trim().length > 0;
    } else {
      return false;
    }
  },
  append: function (a, b) {
    return a + b;
  },
  dateFormat: function (date) {
    if (Steedos.isMobile() && (date != null ? date.getFullYear() : void 0) === new Date().getFullYear()) {
      return $.format.date(new Date(date), "MM-dd HH:mm");
    } else {
      return $.format.date(new Date(date), "yyyy-MM-dd HH:mm");
    }
  },
  getStepName: function (stepId) {
    var step;
    step = WorkflowManager.getInstanceStep(stepId);

    if (step) {
      return step.name;
    }

    return null;
  },
  showDeleteButton: function (approved) {
    if (approved && approved.type === 'cc' && approved.from_user === Meteor.userId() && approved.is_finished !== true && !Session.get("instancePrint")) {
      return true;
    }

    return false;
  },
  isShowModificationButton: function (approved) {
    var approve_admins, isShow, ref, ref1, ref2;
    approve_admins = (ref = Meteor.settings) != null ? (ref1 = ref["public"]) != null ? (ref2 = ref1.workflow) != null ? ref2.approve_admins : void 0 : void 0 : void 0;

    if (approve_admins != null ? approve_admins.length : void 0) {
      isShow = approve_admins != null ? approve_admins.contains(Meteor.userId()) : void 0;
    }

    if (!isShow) {
      return false;
    }

    return approved.handler === Meteor.userId();
  },
  isEditing: function () {
    var ref;
    return (ref = Template.instance().is_editing) != null ? ref.get() : void 0;
  },
  isShowDescription: function (approved) {
    var ref;

    if (TracesTemplate.helpers.isShowModificationButton(approved)) {
      return true;
    }

    return ((ref = approved.description) != null ? ref.toString().trim().length : void 0) > 0;
  },
  isCC: function (approved) {
    if (approved && approved.type === 'cc') {
      return true;
    }

    return false;
  },
  getApproveStatusIcon: function (approveJudge) {
    var approveStatusIcon;
    approveStatusIcon = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusIcon = 'ion ion-checkmark-round';
        break;

      case 'rejected':
        approveStatusIcon = 'ion ion-close-round';
        break;

      case 'terminated':
        approveStatusIcon = 'fa fa-ban';
        break;

      case 'reassigned':
        approveStatusIcon = 'ion ion-android-contact';
        break;

      case 'relocated':
        approveStatusIcon = 'ion ion-arrow-shrink';
        break;

      case 'retrieved':
        approveStatusIcon = 'fa fa-undo';
        break;

      default:
        approveStatusIcon = '';
        break;
    }

    return approveStatusIcon;
  },
  getApproveStatusText: function (approveJudge) {
    var approveStatusText, locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    approveStatusText = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusText = TAPi18n.__('Instance State approved', {}, locale);
        break;

      case 'rejected':
        approveStatusText = TAPi18n.__('Instance State rejected', {}, locale);
        break;

      case 'terminated':
        approveStatusText = TAPi18n.__('Instance State terminated', {}, locale);
        break;

      case 'reassigned':
        approveStatusText = TAPi18n.__('Instance State reassigned', {}, locale);
        break;

      case 'relocated':
        approveStatusText = TAPi18n.__('Instance State relocated', {}, locale);
        break;

      case 'retrieved':
        approveStatusText = TAPi18n.__('Instance State retrieved', {}, locale);
        break;

      case 'returned':
        approveStatusText = TAPi18n.__('Instance State returned', {}, locale);
        break;

      case 'readed':
        approveStatusText = TAPi18n.__('Instance State readed', {}, locale);
        break;

      default:
        approveStatusText = '';
        break;
    }

    return approveStatusText;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  myApproveDescription: function (approveId) {
    var myApprove, ref, ref1;

    if (Meteor.isClient) {
      if (Session.get("box") === 'inbox') {
        myApprove = (ref = Template.instance()) != null ? (ref1 = ref.myApprove) != null ? ref1.get() : void 0 : void 0;

        if (myApprove && myApprove.id === approveId) {
          if (!Session.get("instance_my_approve_description")) {
            return (myApprove != null ? myApprove.description : void 0) || "";
          }

          return Session.get("instance_my_approve_description");
        }
      }
    }
  },
  isForward: function (approved) {
    if (approved && approved.type === 'forward') {
      return true;
    }

    return false;
  },
  showForwardDeleteButton: function (approve) {
    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'forward' && approve.from_user === Meteor.userId() && !Session.get("instancePrint") && approve.judge !== 'terminated') {
      return true;
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  isDistribute: function (approve) {
    if (approve && approve.type === 'distribute') {
      return true;
    }

    return false;
  },
  showDistributeDeleteButton: function (approve) {
    var ins;

    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'distribute' && !Session.get("instancePrint") && approve.judge !== 'terminated' && Steedos.isLegalVersion('', "workflow.enterprise")) {
      ins = db.instances.findOne({
        _id: approve.instance
      }, {
        fields: {
          flow: 1,
          space: 1
        }
      });

      if (ins && ins.flow && ins.space) {
        if (WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, Meteor.userId())) {
          return true;
        }
      }

      if (approve.from_user === Meteor.userId()) {
        return true;
      }
    }

    return false;
  },
  finishDateSchema: function () {
    if (Steedos.isAndroidOrIOS()) {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "datetime-local"
          },
          optional: false,
          type: Date
        }
      });
    } else {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "bootstrap-datetimepicker",
            readonly: true,
            dateTimePickerOptions: {
              format: "YYYY-MM-DD HH:mm",
              ignoreReadonly: true,
              locale: Session.get("TAPi18n::loaded_lang"),
              widgetPositioning: {
                horizontal: 'right'
              }
            }
          },
          optional: false,
          type: Date
        }
      });
    }
  },
  finishDateValues: function () {
    return {
      finish_date: this.finish_date
    };
  },
  /*
     	此函数用于控制是否显示traces view
     	true: 显示traces view,签核历程按钮点击后是直接定位到traces view
     	false: 不显示traces view，签核历程按钮点击后,以Modal 方式显示traces view
   */showTracesView: function (form, form_version) {
    var ref, show_modal_traces_list;
    show_modal_traces_list = ((ref = db.space_settings.findOne({
      space: Session.get("spaceId"),
      key: "show_modal_traces_list"
    })) != null ? ref.values : void 0) || false;
    return !show_modal_traces_list;
  },
  getInstanceStateText: function (instance_id) {
    var ins, locale, text;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return TAPi18n.__('instance_deleted', {}, locale);
    }

    text = '';

    if (ins.state === 'completed') {
      text = TAPi18n.__('completed', {}, locale);
    } else if (ins.state === 'pending') {
      text = TAPi18n.__('pending', {}, locale);
    } else if (ins.state === 'draft') {
      if (ins.is_read) {
        text = TAPi18n.__('instance_approve_read', {}, locale);
      } else {
        text = TAPi18n.__('instance_approve_not_yet_handled', {}, locale);
      }
    }

    return text;
  },
  getInstanceStateColor: function (instance_id) {
    var cla, ins;
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return "";
    }

    cla = '';

    if (ins.state === 'draft') {
      if (ins.is_read) {
        cla = 'blue';
      } else {
        cla = 'red';
      }
    }

    return cla;
  },
  firstTrace: function (index) {
    return index === 0;
  },
  last_distribute_from: function (instance_id) {
    var dis_info, ins, user;
    ins = db.instances.findOne({
      _id: instance_id,
      distribute_from_instance: {
        $exists: true
      }
    }, {
      fields: {
        created: 1,
        created_by: 1
      }
    });

    if (ins) {
      dis_info = {};
      user = {};

      if (Meteor.isClient) {
        user = UUflow_api.getNameForUser(ins.created_by);
      } else if (Meteor.isServer) {
        user = db.users.findOne({
          _id: ins.created_by
        }, {
          fields: {
            name: 1
          }
        });
      }

      if (user.name) {
        dis_info.from_user_name = user.name;
        dis_info.created = ins.created;
      }

      if (!_.isEmpty(dis_info)) {
        return dis_info;
      }
    }
  },
  isCCOrDistributeOrForwardTerminated: function (approve) {
    if ((approve.type === 'cc' || approve.type === 'distribute' || approve.type === 'forward') && approve.judge === 'terminated') {
      return true;
    }

    return false;
  },
  judgeTerminated: function (judge) {
    return judge === 'terminated';
  },
  instanceExists: function (instance_id) {
    return !!db.instances.find(instance_id).count();
  },
  agentDescription: function (userName) {
    var locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    return TAPi18n.__('process_delegation_rules_description', {
      userName: userName
    }, locale);
  },
  traceName: function (instance_id, traceId) {
    var ref, ref1;
    return (ref = _.find((ref1 = db.instances.findOne(instance_id, {
      fields: {
        traces: 1
      }
    })) != null ? ref1.traces : void 0, function (trace) {
      return trace._id === traceId;
    })) != null ? ref.name : void 0;
  }
};

if (Meteor.isServer) {
  TracesTemplate.helpers.dateFormat = function (date) {
    var utcOffset;

    if (date) {
      utcOffset = Template.instance().view.template.steedosData.utcOffset;
      return InstanceReadOnlyTemplate.formatDate(date, utcOffset);
    }
  };

  TracesTemplate.helpers._t = function (key) {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  TracesTemplate.helpers.showDeleteButton = function (approved) {
    return false;
  };
}

TracesTemplate.events = {
  'click .cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    event.stopPropagation();

    if (event.currentTarget.dataset.calling * 1 !== 1) {
      event.currentTarget.dataset.calling = 1;
      $("i", event.currentTarget).addClass("fa-spin");
      instanceId = Session.get('instanceId');
      approveId = event.target.dataset.approve;
      $("body").addClass("loading");
      Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
        $("body").removeClass("loading");

        if (err) {
          toastr.error(err);
          event.currentTarget.dataset.calling = 0;
          $("i", event.currentTarget).removeClass("fa-spin");
        }

        if (result === true) {
          toastr.success(TAPi18n.__("remove_cc_approve"));

          if ($(".instance-trace-detail-modal").length) {
            Modal.hide("instance_trace_detail_modal");
          }
        }
      });
    }
  },
  'click .instance-trace-detail-modal .btn-cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    $("body").addClass("loading");
    Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(err);
      }

      if (result === true) {
        toastr.success(TAPi18n.__("remove_cc_approve"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .approve-item,.approve-description': function (event, template) {
    return Modal.show("instance_trace_detail_modal", this);
  },
  'taphold .approve-item,.approve-description': function (event, template) {
    return Modal.show("instance_trace_detail_modal", this);
  },
  'tapend .approve-item,.approve-description': function (event, template) {
    event.stopPropagation();
    event.preventDefault();
    return false;
  },
  'click .instance-trace-detail-modal .btn-forward-approve-remove': function (event, template) {
    var approveId, instanceId, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    $("body").addClass("loading");
    Meteor.call('forward_remove', instanceId, traceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(TAPi18n.__("instance_approve_forward_remove_success"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-forward-instance-look': function (event, template) {
    var forward_instance, forward_space;
    forward_space = event.target.dataset.forwardspace;
    forward_instance = event.target.dataset.forwardinstance;
    return Steedos.openWindow(Steedos.absoluteUrl("workflow/space/" + forward_space + "/view/readonly/" + forward_instance));
  },
  'click .btn-modification': function (event, template) {
    template.is_editing.set(!template.is_editing.get());

    if (!Steedos.isAndroidOrIOS()) {
      return Tracker.afterFlush(function () {
        return $("#instance_trace_detail_modal #finish_input").on("dp.show", function () {
          return $(".modal-body").scrollTop(100);
        });
      });
    }
  },
  'click .btn-cancelBut': function (event, template) {
    return template.is_editing.set(!template.is_editing.get());
  },
  'click .btn-saveBut': function (event, template) {
    var approveId, finish_input, instanceId, opinion_input, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    opinion_input = $('#opinion_input').val();
    finish_input = AutoForm.getFieldValue("finish_date", "finishDateAutoForm");
    $("body").addClass("loading");
    return Meteor.call('change_approve_info', instanceId, traceId, approveId, opinion_input, finish_input, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(t("instance_approve_modal_modificationsave"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-distribute-approve-remove': function (event, template) {
    Modal.allowMultiple = true;
    return Modal.show('cancel_distribute_modal');
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_related_instances.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RelatedInstances.helpers = {
  showRelatedInstaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      if (db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).count() > 0) {
        return true;
      }

      return false;
    } else {
      return false;
    }
  },
  related_instaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      return db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).fetch();
    }
  },
  related_instace_url: function (ins) {
    var absolute;

    if (Meteor.isClient && (Steedos.isMobile() || Steedos.isCordova())) {
      return '';
    }

    absolute = false;

    if (Meteor.isServer) {
      absolute = this.absolute;
    }

    if (absolute) {
      return Meteor.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    } else {
      return Steedos.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    }
  },
  _t: function (key) {
    var locale;

    if (Meteor.isClient) {
      return TAPi18n.__(key);
    } else {
      locale = Template.instance().view.template.steedosData.locale;
      return TAPi18n.__(key, {}, locale);
    }
  },
  show_delete: function () {
    var ins;

    if (!Meteor.isClient) {
      return false;
    } else {
      ins = WorkflowManager.getInstance();
      return ins.state === 'draft';
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"server":{"methods":{"set_instance_step_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/set_instance_step_approve.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_instance_step_approve: function (ins_id, step_approve) {
    var ins;

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        state: 1
      }
    });

    if (ins.state !== 'draft') {
      return;
    }

    return db.instances.update({
      _id: ins_id
    }, {
      $set: {
        step_approve: step_approve
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_instance_data.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/get_instance_data.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  get_instance_data: function (instance_id, formCached, flowCached) {
    check(instance_id, String);
    check(formCached, Boolean);
    check(flowCached, Boolean);
    var instance = db.instances.findOne(instance_id);
    if (!instance) return {
      instance: null
    };
    if (formCached && flowCached) return {
      instance: instance
    };

    if (!formCached) {
      var form = db.forms.findOne(instance.form);
      var form_version = {};

      if (form.current._id == instance.form_version) {
        form_version = form.current;
      } else {
        form_version = _.where(form.historys, {
          _id: instance.form_version
        })[0];
      }
    }

    if (!flowCached) {
      var flow = db.flows.findOne(instance.flow);
      var flow_version = {};

      if (flow.current._id == instance.flow_version) {
        flow_version = flow.current;
      } else {
        flow_version = _.where(flow.historys, {
          _id: instance.flow_version
        })[0];
      }
    }

    return {
      instance: instance,
      form_version: form_version,
      flow_version: flow_version
    };
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"save_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/save_instance.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  draft_save_instance: function (ins) {
    if (!this.userId) return;
    var result = true;
    var setObj = {};
    var index = 0;
    var ins_id = ins._id;
    var trace_id = ins.traces[0]._id;
    var approve_id = ins.traces[0].approves[0]._id;
    var description = ins.traces[0].approves[0].description;
    var next_steps = ins.traces[0].approves[0].next_steps;
    var values = ins.traces[0].approves[0].values || {};
    var applicant_id = ins.applicant;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        applicant: 1,
        state: 1,
        submitter: 1,
        traces: 1,
        form: 1,
        flow_version: 1,
        space: 1,
        flow: 1
      }
    });
    var space_id = instance.space;
    var flow_id = instance.flow;
    var form_id = instance.form;
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.'; // 判断一个instance是否为拟稿状态

    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';
    uuflowManager.isInstanceDraft(instance, lang); // 判断一个用户是否是一个instance的提交者

    uuflowManager.isInstanceSubmitter(instance, this.userId);
    var flow = db.flows.findOne(flow_id, {
      fields: {
        "current._id": 1,
        "current.form_version": 1,
        "name": 1,
        "current.steps": 1
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (flow.current._id != instance.flow_version) {
      result = "upgraded";

      var start_step = _.find(flow.current.steps, function (s) {
        return s.step_type == "start";
      }); // 流程已升级


      setObj.flow_version = flow.current._id;
      setObj.form_version = flow.current.form_version; // 存入当前最新版flow中开始节点的step_id

      setObj["traces.$.step"] = start_step._id;
      setObj["traces.$.name"] = start_step.name;
    }

    if (instance.applicant != applicant_id) {
      // 申请人已变换
      var user = db.users.findOne(applicant_id, {
        fields: {
          name: 1
        }
      });
      var applicant = db.space_users.find({
        space: space_id,
        user: applicant_id
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = applicant.fetch()[0].organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      setObj.applicant = applicant_id;
      setObj.applicant_name = user.name;
      setObj.applicant_organization = org_id;
      setObj.applicant_organization_name = organization.name;
      setObj.applicant_organization_fullname = organization.fullname;
      setObj[key_str + 'user'] = applicant_id;
      setObj[key_str + 'user_name'] = user.name;
    }

    setObj[key_str + 'values'] = values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'judge'] = 'submitted';
    setObj[key_str + 'read_date'] = new Date();

    if (result != "upgraded" && next_steps) {
      setObj[key_str + 'next_steps'] = next_steps;
    } // 计算申请单标题


    var form = db.forms.findOne({
      _id: form_id
    }, {
      fields: {
        "current.name_forumla": 1
      }
    });
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      // var iscript = name_forumla.replace(/\{/g, "(values['").replace(/\}/g, "'] || '')");
      // var rev = eval(iscript);
      setObj.name = uuflowManager.getInstanceName(ins, values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return result;
  },
  inbox_save_instance: function (approve) {
    if (!this.userId) return;
    var setObj = {};
    var index = 0;
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve.id;
    var values = approve.values;
    var next_steps = approve.next_steps;
    var description = approve.description;
    var judge = approve.judge;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1,
        flow_version: 1,
        flow: 1,
        state: 1,
        form: 1,
        form_version: 1,
        values: 1
      }
    });
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    var current_approve = _.find(current_trace.approves, function (a) {
      return a._id == approve_id;
    }); // 判断一个instance是否为审核中状态


    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';

    try {
      uuflowManager.isInstancePending(instance, lang); // 判断一个trace是否为未完成状态

      uuflowManager.isTraceNotFinished(current_trace); // 判断一个approve是否为未完成状态

      uuflowManager.isApproveNotFinished(current_approve); // 判断当前用户是否approve 对应的处理人或代理人

      uuflowManager.isHandlerOrAgent(current_approve, this.userId);
    } catch (e) {
      console.log(e.stack);
      return true;
    }

    var flow_version = instance.flow_version;
    var flow_id = instance.flow;
    var step_id = "";
    step_id = current_trace.step;
    var flow = db.flows.findOne(flow_id, {
      fields: {
        current: 1,
        historys: 1
      }
    });
    var step = null;

    if (flow.current._id == flow_version) {
      flow.current.steps.forEach(function (s) {
        if (s._id == step_id) step = s;
      });
    } else {
      flow.historys.forEach(function (h) {
        h.steps.forEach(function (s) {
          if (s._id == step_id) step = s;
        });
      });
    }

    if (!step) return false;
    var step_type = step.step_type;
    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.';
    var permissions_values = uuflowManager.getApproveValues(approve.values, step.permissions, instance.form, instance.form_version);
    var change_values = approveManager.getChangeValues(instance.values, permissions_values);
    setObj.values = _.extend(instance.values || {}, permissions_values);

    if (!_.isEmpty(change_values)) {
      values_history = current_approve.values_history || [];
      values_history.push({
        values: change_values,
        create: new Date()
      });
      setObj[key_str + 'values_history'] = values_history;
    }

    setObj[key_str + 'is_read'] = true;
    setObj[key_str + 'read_date'] = new Date();
    setObj[key_str + 'values'] = setObj.values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'next_steps'] = next_steps;

    if (step_type == "submit" || step_type == "start") {
      setObj[key_str + 'judge'] = "submitted";
    } else {
      setObj[key_str + 'judge'] = judge;
    }

    setObj.modified = new Date();
    setObj.modified_by = this.userId; // 计算申请单标题

    var form = db.forms.findOne(instance.form);
    var form_v = uuflowManager.getFormVersion(form, instance.form_version);
    var name_forumla = form_v.name_forumla;

    if (name_forumla) {
      setObj.name = uuflowManager.getInstanceName(instance, setObj.values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"trace_approve_cc.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/trace_approve_cc.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  // ??? 能否传阅给当前步骤处理人 如果当前步骤是会签。
  cc_do: function (approve, cc_user_ids, description) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve._id;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        space: 1,
        traces: 1,
        cc_users: 1,
        values: 1
      }
    });
    var current_user_id = this.userId;
    var space_id = instance.space;
    var new_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    cc_user_ids.forEach(function (userId, idx) {
      var user = db.users.findOne(userId, {
        fields: {
          name: 1
        }
      });
      var space_user = db.space_users.findOne({
        space: space_id,
        user: userId
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = space_user.organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var agent = uuflowManager.getAgent(space_id, userId);
      var handler_id = userId;
      var handler_info = user;
      var handler_space_user = space_user;
      var handler_org_info = organization;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent, {
          fileds: {
            name: 1
          }
        });
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
        cc_user_ids[idx] = agent;
      }

      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': ins_id,
        'trace': trace_id,
        'is_finished': false,
        'user': userId,
        'user_name': user.name,
        'handler': handler_id,
        'handler_name': handler_info.name,
        'handler_organization': handler_space_user.organization,
        'handler_organization_name': handler_org_info.name,
        'handler_organization_fullname': handler_org_info.fullname,
        'type': 'cc',
        'start_date': new Date(),
        'is_read': false,
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'opinion_fields_code': approve.opinion_fields_code,
        'sign_field_code': approve.opinion_fields_code && approve.opinion_fields_code.length == 1 ? approve.opinion_fields_code[0] : "",
        'from_approve_id': approve_id,
        'cc_description': description
      };

      if (agent) {
        appr.agent = agent;
      }

      uuflowManager.setRemindInfo(instance.values, appr);
      new_approves.push(appr);
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj,
      $addToSet: {
        'traces.$.approves': {
          $each: new_approves
        }
      },
      $push: {
        cc_users: {
          $each: cc_user_ids
        }
      }
    });
    instance = db.instances.findOne(ins_id);
    current_user_info = db.users.findOne(current_user_id);
    pushManager.send_instance_notification("trace_approve_cc", instance, "", current_user_info, cc_user_ids);
    flow_id = instance.flow;
    approve.cc_user_ids = cc_user_ids; // 记录下本次传阅的人员ID作为hook接口中的参数
    // 如果已经配置webhook并已激活则触发

    pushManager.triggerWebhook(flow_id, instance, approve, 'cc_do', current_user_id, cc_user_ids);
    return true;
  },
  cc_read: function (approve) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1
      }
    });
    var current_user_id = this.userId;

    var current_trace = _.find(instance.traces, function (t) {
      return t._id == trace_id;
    });

    var index = 0;
    current_trace.approves.forEach(function (a, idx) {
      if (a.type == 'cc' && a.handler == current_user_id && !a.is_read) {
        index = idx;
      }
    });
    setObj['traces.$.approves.' + index + '.is_read'] = true;
    setObj['traces.$.approves.' + index + '.read_date'] = new Date();
    setObj.traces = traces;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj
    });
    return true;
  },
  cc_submit: function (ins_id, description) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1,
        cc_users: 1,
        outbox_users: 1
      }
    });
    var traces = instance.traces;
    var current_user_id = this.userId;
    var current_approve;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a.type == 'cc' && a.handler == current_user_id && a.is_finished == false) {
            current_approve = a;
            var upobj = {};
            upobj['traces.$.approves.' + idx + '.is_finished'] = true;
            upobj['traces.$.approves.' + idx + '.is_read'] = true;
            upobj['traces.$.approves.' + idx + '.finish_date'] = new Date();
            upobj['traces.$.approves.' + idx + '.judge'] = "submitted";
            upobj['traces.$.approves.' + idx + '.cost_time'] = new Date() - a.start_date;
            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        });
      }
    });

    if (current_approve) {
      var index = 0; //设置意见，意见只添加到最后一条approve中

      traces.forEach(function (t) {
        if (current_approve && t._id === current_approve.trace) {
          if (t.approves) {
            t.approves.forEach(function (a, idx) {
              if (a._id === current_approve._id) {
                a.description = description;
                index = idx;
              }
            });
          }
        }
      });
      setObj.modified = new Date();
      setObj.modified_by = this.userId;
      setObj['traces.$.approves.' + index + '.description'] = description;
      db.instances.update({
        _id: ins_id,
        'traces._id': current_approve.trace
      }, {
        $set: setObj,
        $pull: {
          cc_users: current_user_id
        },
        $addToSet: {
          outbox_users: {
            $each: [current_user_id, current_approve.user]
          }
        }
      });
      instance = db.instances.findOne(ins_id);
      current_user_info = db.users.findOne(current_user_id); //传阅提交不通知传阅者

      if (false && description && current_approve && current_approve.from_user) {
        pushManager.send_instance_notification("trace_approve_cc_submit", instance, "", current_user_info, [current_approve.from_user]);
      }

      pushManager.send_message_to_specifyUser("current_user", current_user_id);
      flow_id = instance.flow; // 如果已经配置webhook并已激活则触发

      pushManager.triggerWebhook(flow_id, instance, current_approve, 'cc_submit', current_user_id, []);
    }

    return true;
  },
  cc_remove: function (instanceId, approveId) {
    var setObj = {};
    var instance = db.instances.findOne(instanceId, {
      fields: {
        traces: 1,
        cc_users: 1
      }
    });
    var traces = instance.traces;
    var trace_id,
        remove_user_id,
        multi = false;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a._id == approveId) {
            trace_id = a.trace;
            remove_user_id = a.handler;
            setObj['traces.$.approves.' + idx + '.judge'] = 'terminated';
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.finish_date'] = new Date();
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.read_date'] = new Date();
          }
        });
      }
    });
    if (!trace_id || !remove_user_id) return;
    var multi = 0;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a) {
          if (a.handler == remove_user_id && a.type == 'cc' && a.is_finished == false) {
            multi++;
          }
        });
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (multi > 1) {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj
      });
    } else {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj,
        $pull: {
          cc_users: remove_user_id
        }
      });
    }

    pushManager.send_message_to_specifyUser("current_user", remove_user_id);
    return true;
  },
  cc_save: function (ins_id, description) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1
      }
    });
    var traces = instance.traces;
    var current_user_id = this.userId;
    var current_approve;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a.handler == current_user_id && a.type == 'cc' && a.is_finished == false) {
            current_approve = a;
            var upobj = {};
            upobj['traces.$.approves.' + idx + '.judge'] = "submitted";
            upobj['traces.$.approves.' + idx + '.read_date'] = new Date();
            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        });
      }
    });
    var index = 0; //设置意见，意见只添加到最后一条approve中

    traces.forEach(function (t) {
      if (current_approve && t._id === current_approve.trace) {
        if (t.approves) {
          t.approves.forEach(function (a, idx) {
            if (a._id === current_approve._id) {
              index = idx;
            }
          });
        }
      }
    });
    setObj['traces.$.approves.' + index + '.description'] = description;
    db.instances.update({
      _id: ins_id,
      'traces._id': current_approve.trace
    }, {
      $set: setObj
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forward_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/forward_instance.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  // 改为通过api调用
  forward_instance: function (instance_id, space_id, flow_id, hasSaveInstanceToAttachment, description, isForwardAttachments, selectedUsers, action_type, related, from_approve_id) {
    if (!this.userId) throw new Meteor.Error('not-authorized');
    return;
  },
  forward_remove: function (instance_id, trace_id, approve_id) {
    check(instance_id, String);
    check(trace_id, String);
    check(approve_id, String);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var trace = _.find(ins.traces, function (t) {
      return t._id == trace_id;
    });

    var approve = _.find(trace.approves, function (appr) {
      return appr._id == approve_id;
    });

    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, this.userId);

    if (!approve || !['forward', 'distribute'].includes(approve.type) || !approve.forward_instance) {
      if (!hasAdminPermission) {
        if (approve.from_user != this.userId) throw new Meteor.Error('error!', 'instance_forward_cannot_cancel');
      }
    }

    var forward_instance_id = approve.forward_instance;
    var forward_instance = db.instances.findOne(forward_instance_id);

    if (forward_instance) {
      if (forward_instance.state != "draft") {
        if (!hasAdminPermission) throw new Meteor.Error('error!', 'instance_forward_instance_state_changed');
      }

      var inbox_users = forward_instance.inbox_users || [];
      forward_instance.deleted = new Date();
      forward_instance.deleted_by = this.userId;
      var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

      if (deleted_forward_instance_id) {
        db.instances.remove({
          _id: forward_instance_id
        }); // 删除申请单后重新计算inbox_users的badge

        _.each(inbox_users, function (u_id) {
          pushManager.send_message_to_specifyUser("current_user", u_id);
        });
      }
    }

    var set_obj = new Object();
    set_obj.modified = new Date();
    set_obj.modified_by = this.userId;

    _.each(trace.approves, function (appr, idx) {
      if (appr._id == approve_id) {
        set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
        set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
        set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
        set_obj['traces.$.approves.' + idx + '.is_read'] = true;
        set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
      }
    });

    db.instances.update({
      _id: instance_id,
      "traces._id": trace_id
    }, {
      $set: set_obj
    });
    return true;
  },
  cancelDistribute: function (instance_id, approve_ids) {
    check(instance_id, String);
    check(approve_ids, Array);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    userId = this.userId;
    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, userId);

    _.each(ins.traces, function (t) {
      if (t.approves) {
        var exists = false;
        var set_obj = new Object();

        _.each(t.approves, function (a, idx) {
          if (approve_ids.includes(a._id) && (a.from_user == userId || hasAdminPermission) && 'distribute' == a.type && a.forward_instance) {
            var forward_instance_id = a.forward_instance;
            var forward_instance = db.instances.findOne(forward_instance_id);

            if (forward_instance) {
              if (forward_instance.state != "draft") {
                return;
              }

              var inbox_users = forward_instance.inbox_users || [];
              forward_instance.deleted = new Date();
              forward_instance.deleted_by = userId;
              var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

              if (deleted_forward_instance_id) {
                db.instances.remove({
                  _id: forward_instance_id
                }); // 删除申请单后重新计算inbox_users的badge

                _.each(inbox_users, function (u_id) {
                  pushManager.send_message_to_specifyUser("current_user", u_id);
                });
              }

              set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
              set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
              set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
              set_obj['traces.$.approves.' + idx + '.is_read'] = true;
              set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
            }

            exists = true;
          }
        });

        if (!exists) return;
        set_obj.modified = new Date();
        set_obj.modified_by = userId;
        db.instances.update({
          _id: instance_id,
          "traces._id": t._id
        }, {
          $set: set_obj
        });
      }
    });

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/cfs_instances.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  cfs_instances_remove: function (file_id) {
    check(file_id, String);
    cfs.instances.remove(file_id);
    return true;
  },
  cfs_instances_set_current: function (file_id) {
    check(file_id, String);
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.current': true
      }
    });
    return true;
  },
  cfs_instances_lock: function (file_id, user_id, user_name) {
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.locked_by': user_id,
        'metadata.locked_by_name': user_name,
        'metadata.locked_time': new Date()
      }
    });
    return true;
  },
  cfs_instances_unlock: function (file_id) {
    cfs.instances.update({
      _id: file_id
    }, {
      $unset: {
        'metadata.locked_by': '',
        'metadata.locked_by_name': '',
        'metadata.locked_time': ''
      }
    });
    return true;
  },
  download_space_instance_attachments_to_disk: function (spaceId, cfsRecordIds) {
    if (!this.userId) return "不符合执行条件";
    if (Meteor.users.find({
      _id: this.userId,
      is_cloudadmin: true
    }).count() < 1) return "不符合执行条件";
    check(spaceId, String);
    var store = "instances";

    var fs = require('fs');

    var path = require('path');

    var mkdirp = require('mkdirp');

    var pathname = path.join(__meteor_bootstrap__.serverDir, '../../../cfs/spaceInstanceAttachments'); // Set absolute path

    var absolutePath = path.resolve(pathname); // Ensure the path exists

    mkdirp.sync(absolutePath);
    console.log('absolutePath: ', absolutePath);
    console.time('download_space_instance_attachments_to_disk');
    var query = {
      'metadata.space': spaceId
    };

    if (cfsRecordIds) {
      query._id = {
        $in: cfsRecordIds
      };
    }

    var downloadFailedRecordIds = [];
    cfs.instances.find(query).forEach(function (c) {
      try {
        var fileName = store + '-' + c._id + '-' + c.name();
        var filePath = path.join(absolutePath, fileName);
        Meteor.wrapAsync(function (callback) {
          try {
            var writer = fs.createWriteStream(filePath);
            writer.on('finish', function () {
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            var reader = c.createReadStream(store);
            reader.on('error', function (error) {
              downloadFailedRecordIds.push(c._id);
              console.error('download_space_instance_attachments_to_disk: ', c._id);
              console.error(error.stack);
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            reader.pipe(writer);
          } catch (error) {
            console.error('download_space_instance_attachments_to_disk: ', c._id);
            console.error(error.stack);
            if (callback && _.isFunction(callback)) callback();
            return;
          }
        })();
      } catch (error) {
        console.error('download_space_instance_attachments_to_disk: ', c._id);
        console.error(error.stack);
      }
    });

    if (downloadFailedRecordIds.length > 0) {
      console.error('downloadFailedRecordIds: ');
      console.error(downloadFailedRecordIds);
    }

    console.timeEnd('download_space_instance_attachments_to_disk');
    return downloadFailedRecordIds;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_approve.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_approve_have_read: function (instanceId, traceId, approveId) {
    var instance, ref, self, setObj, trace;

    if (!this.userId) {
      return;
    }

    self = this;
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {
        modified: new Date(),
        modified_by: self.userId
      };
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId && !approve.is_read) {
          setObj["traces.$.approves." + idx + ".is_read"] = true;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  change_approve_info: function (instanceId, traceId, approveId, description, finish_date) {
    var instance, ref, setObj, trace;

    if (!this.userId) {
      return;
    }

    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(description, String);
    check(finish_date, Date);
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          setObj["traces.$.approves." + idx + ".description"] = description;
          setObj["traces.$.approves." + idx + ".finish_date"] = finish_date;
          setObj["traces.$.approves." + idx + ".cost_time"] = new Date() - approve.start_date;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  update_approve_sign: function (instanceId, traceId, approveId, sign_field_code, description, sign_type, lastSignApprove) {
    var instance, lastTrace, ref, session_userId, setObj, trace, upObj;
    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(sign_field_code, String);
    check(description, String);

    if (!this.userId) {
      return;
    }

    session_userId = this.userId;

    if (lastSignApprove) {
      if (lastSignApprove.custom_sign_show) {
        return;
      }

      instance = db.instances.findOne({
        _id: instanceId,
        "traces._id": lastSignApprove.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });
      lastTrace = _.find(instance != null ? instance.traces : void 0, function (t) {
        return t._id = lastSignApprove.trace;
      });

      if (lastTrace) {
        setObj = {};

        if (lastTrace != null) {
          lastTrace.approves.forEach(function (a, idx) {
            if (a._id === lastSignApprove._id) {
              if (sign_type === "update") {
                setObj["traces.$.approves." + idx + ".sign_show"] = false;
                setObj["traces.$.approves." + idx + ".modified"] = new Date();
                return setObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
              }
            }
          });
        }

        if (!_.isEmpty(setObj)) {
          db.instances.update({
            _id: instanceId,
            "traces._id": lastTrace._id
          }, {
            $set: setObj
          });
        }
      }
    }

    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      upObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          if (sign_field_code) {
            upObj["traces.$.approves." + idx + ".sign_field_code"] = sign_field_code;
          }

          upObj["traces.$.approves." + idx + ".description"] = description;
          upObj["traces.$.approves." + idx + ".sign_show"] = true;
          upObj["traces.$.approves." + idx + ".modified"] = new Date();
          upObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
          return upObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(upObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: upObj
        });
      }

      return true;
    }
  },
  update_sign_show: function (objs, myApprove_id) {
    objs.forEach(function (obj, index) {
      var instance, ref, setObj, trace;
      instance = db.instances.findOne({
        _id: obj.instance,
        "traces._id": obj.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });

      if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
        trace = instance.traces[0];
        setObj = {};
        trace.approves.forEach(function (approve, idx) {
          if (approve._id === obj._id) {
            setObj["traces.$.approves." + idx + ".sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".custom_sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }

          if (approve._id === myApprove_id) {
            return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }
        });

        if (!_.isEmpty(setObj)) {
          return db.instances.update({
            _id: obj.instance,
            "traces._id": obj.trace
          }, {
            $set: setObj
          });
        }
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_return.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_return.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_return: function (approve, reason) {
    var approve_values, b, current_step, current_user, current_user_info, flow, ins, instance, instance_id, last_trace, newTrace, new_inbox_users, now, pre_step, pre_trace, r, rest_counter_users, setObj, space_id, traces;
    check(approve, Object);
    current_user = this.userId;
    instance_id = approve.instance;
    ins = uuflowManager.getInstance(instance_id);
    space_id = ins.space;

    if (ins.state !== "pending" || !ins.inbox_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.type === "cc" && ins.cc_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (ins.traces.length < 2) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    flow = uuflowManager.getFlow(ins.flow);
    pre_trace = ins.traces[ins.traces.length - 2];
    pre_step = uuflowManager.getStep(ins, flow, pre_trace.step);

    if (pre_step.step_type === "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    last_trace = _.last(ins.traces);
    current_step = uuflowManager.getStep(ins, flow, last_trace.step);

    if (current_step.step_type !== "submit" && current_step.step_type !== "sign" && current_step.step_type !== "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.trace !== last_trace._id) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    new_inbox_users = new Array();

    _.each(pre_trace.approves, function (a) {
      if ((!a.type || a.type === "draft" || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected")) {
        return new_inbox_users.push(a.user);
      }
    });

    if (_.isEmpty(new_inbox_users)) {
      throw new Meteor.Error('error!', "未找到下一步处理人，退回失败");
    }

    traces = ins.traces;
    approve_values = uuflowManager.getApproveValues(approve.values || {}, current_step.permissions, ins.form, ins.form_version);
    setObj = new Object();
    now = new Date();
    rest_counter_users = new Array();

    _.each(traces, function (t) {
      if (t._id === last_trace._id) {
        if (!t.approves) {
          t.approves = new Array();
        }

        _.each(t.approves, function (a, idx) {
          if ((!a.type || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected" || a.judge === "readed") && a.is_finished !== true) {
            setObj['traces.$.approves.' + idx + '.finish_date'] = now;
            setObj['traces.$.approves.' + idx + '.read_date'] = now;
            setObj['traces.$.approves.' + idx + '.is_error'] = false;
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.cost_time'] = now - a.start_date;
            setObj['traces.$.approves.' + idx + '.values'] = approve_values;

            if (a.handler === current_user) {
              setObj['traces.$.approves.' + idx + '.judge'] = "returned";
              return setObj['traces.$.approves.' + idx + '.description'] = reason;
            } else {
              return rest_counter_users.push(a.handler);
            }
          }
        });

        setObj['traces.$.is_finished'] = true;
        setObj['traces.$.finish_date'] = true;
        return setObj['traces.$.judge'] = "returned";
      }
    });

    ins.values = _.extend(ins.values || {}, approve_values);
    newTrace = new Object();
    newTrace._id = new Mongo.ObjectID()._str;
    newTrace.instance = instance_id;
    newTrace.previous_trace_ids = [last_trace._id];
    newTrace.is_finished = false;
    newTrace.step = pre_trace.step;
    newTrace.name = pre_trace.name;
    newTrace.start_date = now;
    newTrace.due_date = uuflowManager.getDueDate(pre_step.timeout_hours);
    newTrace.approves = [];

    _.each(new_inbox_users, function (next_step_user_id, idx) {
      var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
      newApprove = new Object();
      newApprove._id = new Mongo.ObjectID()._str;
      newApprove.instance = instance_id;
      newApprove.trace = newTrace._id;
      newApprove.is_finished = false;
      newApprove.user = next_step_user_id;
      user_info = db.users.findOne(next_step_user_id, {
        fields: {
          name: 1
        }
      });
      newApprove.user_name = user_info.name;
      handler_id = next_step_user_id;
      handler_info = user_info;
      agent = uuflowManager.getAgent(space_id, next_step_user_id);

      if (agent) {
        new_inbox_users[idx] = agent;
        handler_id = agent;
        handler_info = db.users.findOne({
          _id: agent
        }, {
          fields: {
            name: 1
          }
        });
        newApprove.agent = agent;
      }

      newApprove.handler = handler_id;
      newApprove.handler_name = handler_info.name;
      next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
      next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
      newApprove.handler_organization = next_step_user_org_info["organization"];
      newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
      newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
      newApprove.start_date = now;
      newApprove.is_read = false;
      newApprove.is_error = false;
      newApprove.values = new Object();
      uuflowManager.setRemindInfo(ins.values, newApprove);
      return newTrace.approves.push(newApprove);
    });

    setObj.inbox_users = new_inbox_users;
    setObj.state = "pending";
    ins.outbox_users.push(current_user);
    setObj.outbox_users = _.uniq(ins.outbox_users);
    setObj.modified = now;
    setObj.modified_by = current_user;
    setObj.values = ins.values;
    setObj.current_step_name = pre_trace.name;
    r = db.instances.update({
      _id: instance_id,
      'traces._id': last_trace._id
    }, {
      $set: setObj
    });
    b = db.instances.update({
      _id: instance_id
    }, {
      $push: {
        traces: newTrace
      }
    });

    if (r && b) {
      pushManager.send_message_to_specifyUser("current_user", current_user);
      instance = uuflowManager.getInstance(instance_id);
      current_user_info = db.users.findOne(current_user);
      pushManager.send_instance_notification("return_pending_inbox", instance, reason, current_user_info);

      _.each(rest_counter_users, function (user_id) {
        return pushManager.send_message_to_specifyUser("current_user", user_id);
      });
    }

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_remind.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_remind.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_remind: function (remind_users, remind_count, remind_deadline, instance_id, action_types, trace_id) {
    var current_user_id, ins, last_remind_users, now, priority, trace;
    check(remind_users, Array);
    check(remind_count, Match.OneOf('single', 'multi'));
    check(remind_deadline, Date);
    check(instance_id, String);
    check(action_types, Array);
    check(trace_id, String);
    current_user_id = this.userId;
    last_remind_users = new Array();
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        name: 1,
        traces: 1,
        values: 1,
        space: 1
      }
    });

    if (action_types.includes('admin')) {
      if (remind_count === 'single') {
        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              return last_remind_users.push(ap.user);
            }
          });
        });
      } else if (remind_count === 'multi') {
        now = new Date();
        priority = ins.values.priority;

        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            var caculate_date;

            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              last_remind_users.push(ap.user);
              ap.manual_deadline = remind_deadline;

              if (priority === "普通" || !priority) {} else if (priority === "办文") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "紧急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "特急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              }
            }
          });
        });

        if (!_.isEmpty(last_remind_users)) {
          db.instances.update({
            _id: instance_id
          }, {
            $set: {
              'traces': ins.traces
            }
          });
        }
      }
    } else if (action_types.includes('applicant')) {
      trace = _.find(ins.traces, function (t) {
        return t._id === trace_id;
      });

      _.each(trace.approves, function (ap) {
        if (remind_users.includes(ap.user) && ap.is_finished !== true) {
          return last_remind_users.push(ap.user);
        }
      });
    } else if (action_types.includes('cc')) {
      _.each(ins.traces, function (t) {
        return _.each(t.approves, function (ap) {
          if (remind_users.includes(ap.user) && ap.is_finished !== true && ap.type === 'cc' && ap.from_user === current_user_id) {
            return last_remind_users.push(ap.user);
          }
        });
      });
    }

    uuflowManager.sendRemindSMS(ins.name, remind_deadline, last_remind_users, ins.space, ins._id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"next_step_users_not_found.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/next_step_users_not_found.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  next_step_users_not_found: function (deal_type, step_name, params) {
    var approver_roles, lang, roles, roles_name, str, user;
    check(deal_type, String);
    check(step_name, String);
    check(params, Object);
    str = "";
    user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    lang = 'en';

    if (user.locale === 'zh-cn') {
      lang = 'zh-CN';
    }

    if (deal_type === 'applicantRole') {
      approver_roles = params.approver_roles;
      roles = db.flow_roles.find({
        _id: {
          $in: approver_roles
        }
      }, {
        fields: {
          name: 1
        }
      }).fetch();
      roles_name = _.pluck(roles, 'name').toString();
      str = TAPi18n.__('next_step_users_not_found.applicant_role', {
        step_name: step_name,
        role_name: roles_name
      }, lang);
    }

    return str;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_number_rules.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_number_rules.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval;

_eval = require('eval');
Meteor.methods({
  instanceNumberBuilder: function (spaceId, name) {
    var _NUMBER, _YYYY, context, date, e, numberRules, res, rules, script;

    numberRules = db.instance_number_rules.findOne({
      space: spaceId,
      name: name
    });

    if (!numberRules) {
      throw new Meteor.Error('error!', "" + name);
    }

    date = new Date();
    context = {};
    context._ = _;
    _YYYY = date.getFullYear();
    _NUMBER = (numberRules.number || 0) + 1;
    context.YYYY = _.clone(_YYYY);
    context.MM = date.getMonth() + 1;
    context.mm = date.getMonth() + 1;

    if (context.MM < 10) {
      context.MM = "0" + context.MM;
    }

    context.DD = date.getDate();
    context.dd = date.getDate();

    if (context.DD < 10) {
      context.DD = "0" + context.DD;
    }

    if (context.YYYY !== numberRules.year) {
      _NUMBER = numberRules.first_number || 1;
    }

    context.NUMBER = _.clone(_NUMBER);
    rules = numberRules.rules.replace("{YYYY}", "' + YYYY + '").replace("{MM}", "' + MM + '").replace("{NUMBER}", "' + NUMBER + '");
    script = "var newNo = '" + rules + "'; exports.newNo = newNo";

    try {
      res = _eval(script, "newNo", context, false).newNo;
      db.instance_number_rules.update({
        _id: numberRules._id
      }, {
        $set: {
          year: _YYYY,
          number: _NUMBER
        }
      });
      console.log(this.userId, res);
    } catch (error) {
      e = error;
      res = {
        _error: e
      };
    }

    return res;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"check_main_attach.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/check_main_attach.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  check_main_attach: function (ins_id, name) {
    check(ins_id, String);
    uuflowManager.checkMainAttach(ins_id, name);
    return 'success';
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/related_instances.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  remove_related: function (ins_id, re_ins_id) {
    var index, ins, res, set_obj;
    check(ins_id, String);
    check(re_ins_id, String);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        related_instances: 1
      }
    });

    if (ins) {
      res = ins.related_instances || [];
      index = res.indexOf(re_ins_id);

      if (index > -1) {
        res.remove(index);
      }

      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = res;
      return db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }
  },
  update_instance_related: function (ins_id, related_instances) {
    var ins, set_obj;
    check(ins_id, String);
    check(related_instances, Array);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id,
      $or: [{
        submitter: this.userId
      }, {
        applicant: this.userId
      }]
    }, {
      fields: {
        state: 1
      }
    });

    if (ins) {
      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = related_instances;
      db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }

    return db.instances.find({
      _id: {
        $in: related_instances
      }
    }, {
      fields: {
        _id: 1,
        values: 1
      }
    }).fetch();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"edit_flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/edit_flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  updateFlowPosition: function (data) {
    return db.flow_positions.update({
      _id: data._id
    }, {
      $set: {
        role: data.role,
        users: data.users,
        org: data.org
      }
    });
  },
  updateFlowRole: function (data) {
    console.log(data._id);
    console.log(data.name);
    return db.flow_roles.update({
      _id: data._id
    }, {
      $set: {
        name: data.name
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"start_flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/start_flow.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  start_flow: function (space, flowId, start) {
    var keyValue, start_flows;
    keyValue = db.steedos_keyvalues.findOne({
      space: space,
      user: this.userId,
      key: 'start_flows'
    }, {
      fields: {
        value: 1
      }
    });
    start_flows = (keyValue != null ? keyValue.value : void 0) || [];

    if (start) {
      start_flows.push(flowId);
      start_flows = _.uniq(start_flows);
    } else {
      start_flows.remove(start_flows.indexOf(flowId));
    }

    if (keyValue) {
      return db.steedos_keyvalues.update({
        _id: keyValue._id
      }, {
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    } else {
      return db.steedos_keyvalues.insert({
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_traces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_traces.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  get_instance_traces: function (ins_id) {
    var ins, miniApproveFields;

    if (!this.userId) {
      return;
    }

    miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description'];
    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        "traces._id": 1,
        "traces.is_finished": 1,
        "traces.step": 1,
        "traces.start_date": 1,
        "traces.name": 1,
        "traces.finish_date": 1,
        "traces.judge": 1,
        "traces.approves._id": 1,
        "traces.approves.is_finished": 1,
        "traces.approves.user": 1,
        "traces.approves.handler": 1,
        "traces.approves.handler_name": 1,
        "traces.approves.handler_organization_fullname": 1,
        "traces.approves.type": 1,
        "traces.approves.start_date": 1,
        "traces.approves.description": 1,
        "traces.approves.is_read": 1,
        "traces.approves.judge": 1,
        "traces.approves.finish_date": 1,
        "traces.approves.from_user_name": 1,
        "traces.approves.from_user": 1,
        "traces.approves.cc_description": 1,
        "traces.approves.trace": 1,
        "traces.approves.forward_space": 1,
        "traces.approves.forward_instance": 1
      }
    });

    if (!ins) {
      return;
    }

    return ins != null ? ins.traces : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_batch.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_batch.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  'get_batch_instances': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return _batch_instances;
  },
  'get_batch_instances_count': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return (_batch_instances != null ? _batch_instances.length : void 0) || 0;
  },
  'get_my_approves': function (instanceIds) {
    var myApproves, that;
    that = this;

    if (!that.userId) {
      return;
    }

    myApproves = new Array();
    instanceIds.forEach(function (insId) {
      var my_approve;
      my_approve = InstanceManager.getMyApprove(insId, that.userId);

      if (my_approve) {
        return myApproves.push(my_approve);
      }
    });
    return myApproves;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/flow.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  change_flow_state: function (flows) {
    var _userId;

    check(flows, Array);
    _userId = this.userId;

    if (!_userId) {
      return;
    }

    return flows.forEach(function (flow) {
      var _flows, _flows_state, flowId, form, formId, form_current_fields_code, now, spaceId, state;

      spaceId = flow.space;
      formId = flow.form;
      flowId = flow.id;
      state = flow.state;

      if (!Steedos.isSpaceAdmin(spaceId, _userId)) {
        throw Meteor.Error(401, "No permission");
      }

      form = db.forms.findOne({
        _id: formId
      }, {
        fields: {
          historys: 0
        }
      });
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          historys: 0
        }
      });

      if (state !== 'enabled' && state !== 'disabled') {
        throw new Meteor.Error(500, "state无效");
      }

      if (!form) {
        throw new Meteor.Error(500, "form无效");
      }

      if (!flow) {
        throw new Meteor.Error(500, "flow无效");
      }

      if (!form.is_valid) {
        throw new Meteor.Error(500, "流程引用的表单[" + form.name + "]验证未通过，请打开流程设计器检查表单设置");
      }

      if (!flow.is_valid) {
        throw new Meteor.Error(500, "流程验证未通过，请打开流程设计器检查流程设置");
      }

      if (!['new', 'modify', 'delete'].includes(flow.flowtype)) {
        throw new Meteor.Error(500, "流程验证未通过，flowtype值必须是new、modify、delete其中之一");
      }

      if (!_.isArray(flow.current.steps)) {
        throw new Meteor.Error(500, "流程验证未通过，流程的步骤不能为空");
      }

      if (_.uniq(flow.current.steps, 'name').length !== flow.current.steps.length) {
        throw new Meteor.Error(500, "流程验证未通过，同一个流程下的步骤的名称不能重复");
      }

      now = new Date();

      if (state === 'enabled') {
        flow.current.steps.forEach(function (step) {
          var specifyStep;

          if (['specifyStepUser', 'specifyStepRole'].includes(step.deal_type)) {
            if (!step.approver_step) {
              throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
            } else {
              specifyStep = _.find(flow.current.steps, function (_step) {
                return step.approver_step === _step._id;
              });

              if (!specifyStep) {
                throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
              }
            }
          }
        });
        form_current_fields_code = form.current.fields.getProperty("code");
        flow.current.steps.forEach(function (step) {
          return step.fields_modifiable = _.intersection(step.fields_modifiable, form_current_fields_code);
        });

        if (form.state === 'disabled') {
          db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "enabled",
              "current.start_date": now,
              "current.modified": now,
              "current.modified_by": _userId
            }
          });
        }

        flow.current.modified = now;
        flow.current.start_date = now;
        flow.current.modified_by = _userId;
        return db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "enabled",
            "current": flow.current
          }
        });
      } else {
        db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "disabled",
            "current.modified": now,
            "current.start_date": now,
            "current.modified_by": _userId
          }
        });
        _flows = db.flows.find({
          form: form._id
        }, {
          fields: {
            _id: 1,
            state: 1
          }
        }).fetch();
        _flows_state = _flows.getProperty("state");

        if (!_flows_state.includes('enabled')) {
          return db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "disabled",
              "current.modified": now,
              "current.start_date": now,
              "current.modified_by": _userId
            }
          });
        }
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distribute.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/distribute.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hide_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/hide_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  hide_instance: function (insId, is_hidden) {
    var instance, permissions, space, userId;

    if (!this.userId) {
      return;
    }

    check(insId, String);
    check(is_hidden, Boolean);
    userId = this.userId;
    instance = db.instances.findOne(insId, {
      fields: {
        state: 1,
        flow: 1,
        space: 1
      }
    });

    if (!instance) {
      throw new Meteor.Error('error!', "未找到申请单");
    }

    if (instance.state !== 'completed') {
      throw new Meteor.Error('error!', "申请单状态不是已结束");
    }

    permissions = permissionManager.getFlowPermissions(instance.flow, userId);
    space = db.spaces.findOne(instance.space, {
      fields: {
        admins: 1
      }
    });

    if (!permissions.includes("admin") && !space.admins.includes(userId)) {
      throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
    }

    db.instances.update(insId, {
      $set: {
        is_hidden: is_hidden
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_value.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_value.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  getInstanceValues: function (insId) {
    var ref;

    if (!this.userId) {
      return;
    }

    return (ref = db.instances.findOne({
      _id: insId
    }, {
      fields: {
        values: 1
      }
    })) != null ? ref.values : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"routes":{"instance.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies, getInstanceReadOnly;
Cookies = require("cookies");

getInstanceReadOnly = function (req, res, next, options) {
  var _hasPermission, _locale, _parent_instances, dataBuf, error, hide_traces, html, instance, instanceId, ref, ref1, space, spaceId, spaceUserCount, user, userId;

  user = Steedos.getAPILoginUser(req, res);

  if (req != null ? (ref = req.query) != null ? ref.access_token : void 0 : void 0) {
    userId = Steedos.getUserIdFromAccessToken(req.query.access_token);

    if (userId) {
      user = Meteor.users.findOne({
        _id: userId
      });
    }
  }

  spaceId = req.params.space;
  instanceId = req.params.instance_id;
  instance = db.instances.findOne({
    _id: instanceId
  });
  space = db.spaces.findOne({
    _id: spaceId
  });
  hide_traces = (ref1 = req.query) != null ? ref1.hide_traces : void 0;

  if (!options) {
    options = {
      showTrace: true
    };
  } else {
    options.showTrace = true;
  }

  if (hide_traces === "1") {
    if (options) {
      options.showTrace = false;
    } else {
      options = {
        showTrace: false
      };
    }
  }

  if (!options.showAttachments) {
    options.showAttachments = true;
  }

  if (!space) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space",
        "success": false
      }
    });
    return;
  }

  if (!instance) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing instance",
        "success": false
      }
    });
    return;
  }

  if (!user) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Auth-Token,X-User-Id",
        "success": false
      }
    });
    return;
  }

  if (instance.space !== spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space or instance",
        "success": false
      }
    });
    return;
  }

  spaceUserCount = db.space_users.find({
    user: user._id,
    space: spaceId
  }).count();

  if (spaceUserCount === 0) {
    if (!space) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- Missing sapceUser",
          "success": false
        }
      });
      return;
    }
  }

  _hasPermission = WorkflowManager.hasInstancePermissions(user, instance);

  if (!_hasPermission && instance.distribute_from_instance) {
    _parent_instances = _.union([instance.distribute_from_instance], instance.distribute_from_instances || []);
    _hasPermission = _.find(_parent_instances, function (_parent_id) {
      var _parent_ins;

      _parent_ins = db.instances.findOne({
        _id: _parent_id
      }, {
        fields: {
          traces: 0
        }
      });
      return WorkflowManager.hasInstancePermissions(user, _parent_ins);
    });
  }

  if (!_hasPermission) {
    _locale = Steedos.locale(user._id, true);
    error = TAPi18n.__("instance_permissions_error", {}, _locale);
    res.charset = "utf-8";
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": error,
        "success": false
      }
    });
    return;
  }

  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
};

JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id", getInstanceReadOnly);
JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id/:instance_name", function (req, res, next) {
  var options;
  res.setHeader('Content-type', 'application/x-msdownload');
  res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(req.params.instance_name));
  res.setHeader('Transfer-Encoding', '');
  options = {
    absolute: true
  };
  return getInstanceReadOnly(req, res, next, options);
}); /*
    	获取申请单列表：
        final_decision：审批结果
        state: 申请单状态
     */
JsonRoutes.add("get", "/api/workflow/instances", function (req, res, next) {
  var f, flowId, flowIds, flows, i, instances, query, ref, ref1, ref2, ref3, ret_sync_token, spaceId, spaceUser, spaceUserOrganizations, sync_token, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  spaceId = req.headers["x-space-id"];

  if (!spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Space-Id",
        "success": false
      }
    });
    return;
  }

  flowId = (ref = req.query) != null ? ref.flowId : void 0;

  if (!flowId) {
    JsonRoutes.sendResult(res, {
      code: 400,
      data: {
        "error": "Validate Request -- Missing flowId",
        "success": false
      }
    });
    return;
  }

  query = {};
  ret_sync_token = new Date().getTime();
  flowIds = flowId.split(",");
  flows = db.flows.find({
    _id: {
      $in: flowIds
    }
  }).fetch();
  i = 0;

  while (i < flows.length) {
    f = flows[i];
    spaceUser = db.space_users.findOne({
      space: f.space,
      user: user_id
    });

    if (!spaceUser) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- No permission, flow is " + f._id,
          "success": false
        }
      });
      return;
    } else {}

    if (!Steedos.isSpaceAdmin(spaceId, user_id)) {
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: spaceUser.organizations
        }
      }).fetch();

      if (!WorkflowManager.canMonitor(f, spaceUser, spaceUserOrganizations) && !WorkflowManager.canAdmin(f, spaceUser, spaceUserOrganizations)) {
        JsonRoutes.sendResult(res, {
          code: 401,
          data: {
            "error": "Validate Request -- No permission, flow is " + f._id,
            "success": false
          }
        });
        return;
      }
    }

    i++;
  }

  query.flow = {
    $in: flowIds
  };
  query.space = spaceId;

  if ((ref1 = req.query) != null ? ref1.sync_token : void 0) {
    sync_token = new Date(Number(req.query.sync_token));
    query.modified = {
      $gt: sync_token
    };
  }

  if ((ref2 = req.query) != null ? ref2.final_decision : void 0) {
    query.final_decision = {
      $in: req.query.final_decision.split(",")
    };
  } else {
    query.final_decision = {
      $nin: ["terminated", "rejected"]
    };
  }

  if ((ref3 = req.query) != null ? ref3.state : void 0) {
    query.state = {
      $in: req.query.state.split(",")
    };
  } else {
    query.state = "completed";
  }

  instances = db.instances.find(query, {
    fields: {
      inbox_uers: 0,
      cc_users: 0,
      outbox_users: 0,
      traces: 0,
      attachments: 0
    },
    skip: 0,
    limit: 500
  }).fetch();
  instances.forEach(function (instance) {
    var attachments;
    attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return instance.attachments = attachments;
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      "status": "success",
      "sync_token": ret_sync_token,
      "data": instances
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"steedos_css.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/steedos_css.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/steedos-css", function (req, res, next) {
  var allCss, allCssLink;
  allCss = WebApp.getRefreshableAssets();
  allCssLink = "";
  allCss.forEach(function (css) {
    var cssHref;
    cssHref = Meteor.absoluteUrl(css.url);
    return allCssLink += "@import url(" + cssHref + ");";
  });
  res.statusCode = 200;
  return res.end(allCssLink);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft_view.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance_draft_view.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/api/workflow/space/:space/view/draft/:flow", function (req, res, next) {
  var dataBuf, flow, flowId, form, html, instance, options, space, spaceId, user, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  user = db.users.findOne({
    _id: user_id
  });
  spaceId = req.params.space;
  flowId = req.params.flow;
  space = db.spaces.findOne({
    _id: spaceId
  });
  flow = db.flows.findOne({
    _id: flowId
  }, {
    fields: {
      name: 1,
      'current._id': 1,
      form: 1
    }
  });
  form = db.forms.findOne({
    _id: flow.form
  }, {
    fields: {
      'current._id': 1
    }
  });
  options = {
    showTrace: false,
    showAttachments: false,
    templateName: "default",
    editable: true,
    width: "100%",
    instance_style: "instance-default",
    plugins: "\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta http-equiv=\"x-rim-auto-match\" content=\"none\">\n<title>" + flow.name + "</title>\n<meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />\n<meta name=\"viewport\" content=\"width=device-width\" />\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.min.css\">\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js\" type=\"text/javascript\"></script>\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/toastr/toastr.min.css\">\n<script src=\"/plugins/toastr/toastr.min.js\" type=\"text/javascript\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/js/workflow_client.css\">\n<script src=\"/js/workflow_client.js\" type=\"text/javascript\"></script>"
  };
  instance = {
    flow: flow._id,
    flow_version: flow.current._id,
    form: form._id,
    form_version: form.current._id,
    values: {},
    name: flow.name,
    space: spaceId
  };
  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lib":{"1_form_formula.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/1_form_formula.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Array.prototype.filterProperty = function (h, l) {
  var g = [];
  this.forEach(function (t) {
    var m = t ? t[h] : null;
    var d = false;

    if (m instanceof Array) {
      d = m.includes(l);
    } else {
      d = l === undefined ? false : m == l;
    }

    if (d) {
      g.push(t);
    }
  });
  return g;
};

Array.prototype.getProperty = function (k) {
  var v = new Array();
  this.forEach(function (t) {
    var m = t ? t[k] : null;
    v.push(m);
  });
  return v;
};

Array.prototype.getEach = function (code) {
  var rev = [];

  for (var i = 0; i < this.length; i++) {
    rev.push(this[i][code]);
  }

  return rev;
};

Array.prototype.uniq = function () {
  var a = [];
  this.forEach(function (b) {
    if (a.indexOf(b) < 0) {
      a[a.length] = b;
    }
  });
  return a;
};

Form_formula = {};

Form_formula.mixin = function (dest, src) {
  for (var key in src) {
    dest[key] = src[key];
  }

  return dest;
};

Form_formula.handerUserObject = function (u) {
  if (u instanceof Array) {
    var user = {};
    user.name = u.getProperty("name");
    user.organization = {};
    user.organization.name = u.getProperty("organization").getProperty("name");
    user.organization.fullname = u.getProperty("organization").getProperty("fullname");
    user.hr = u.getProperty("hr");
    user.sort_no = u.getProperty("sort_no");
    user.mobile = u.getProperty("mobile");
    user.work_phone = u.getProperty("work_phone");
    user.position = u.getProperty("position");
    var userRoles = u.getProperty("roles");
    var roles = new Array();
    userRoles.forEach(function (i) {
      roles = roles.concat(i);
    });
    roles.uniq();
    user.roles = roles;
    return user;
  } else {
    return u;
  }
};

Form_formula.handerOrgObject = function (o) {
  if (o instanceof Array) {
    var org = {};
    org.id = o.getProperty("_id");
    org.name = o.getProperty("name");
    org.fullname = o.getProperty("fullname");
    return org;
  } else {
    return o;
  }
};
/**
    * 获得公式需要用到的初始值
    * 输入：fields, values, applicant
    * 输出：__values
**/


Form_formula.init_formula_values = function (fields, autoFormDoc, approver, applicant, spaceId) {
  var __values = {}; //申请单中填的值处理

  if (fields && fields.length && autoFormDoc) {
    //debugger;
    fields.forEach(function (field) {
      var type = field.type;

      if (type) {
        if (type === 'table') {
          /*
          * 将表格字段的值进行转换后传入__values中
          * values中表格的值格式为
          * [{"a":1,"b":4},{"a":2,"b":5},{"a":3,"b":6}]
          * __values需要转化为下面格式且和主表的值一样放到第一层
          * {"a":[1,2,3],"b":[4,5,6]}
          **/
          var tableFields = field.sfields,
              tableValues = autoFormDoc[field.code],
              formulaTableValues = [],
              __tableValues = {}; //按公式的格式转换值为__tableValues

          if (tableFields && tableFields.length && tableValues && tableValues instanceof Array) {
            tableValues.forEach(function (tableValue) {
              formulaTableValues.push(Form_formula.init_formula_values(tableFields, tableValue));
            }, this); //按主表的格式转换__tableValues加到

            tableFields.forEach(function (tablefield) {
              __tableValues[tablefield.code] = formulaTableValues.getEach(tablefield.code);
            });
            __values = Form_formula.mixin(__values, __tableValues);
          }
        } else if (type == 'user') {
          __values[field.code] = Form_formula.handerUserObject(WorkflowManager.getFormulaUserObjects(spaceId, autoFormDoc[field.code]));
        } else if (type == 'group') {
          __values[field.code] = Form_formula.handerOrgObject(WorkflowManager.getFormulaOrgObjects(autoFormDoc[field.code]));
        } else if (type == 'odata') {
          __values[field.code] = autoFormDoc[field.code] || {};
        } else {
          //此处传spaceId给选人控件的旧数据计算roles和organization
          __values[field.code] = autoFormDoc[field.code];
        }
      }
    }, this);
  } //当前处理人


  __values["approver"] = WorkflowManager.getFormulaUserObject(spaceId, approver); //申请人

  __values["applicant"] = WorkflowManager.getFormulaUserObject(spaceId, applicant);
  return __values;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_handlers_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/get_handlers_manager.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
getHandlersManager = {};

getHandlersManager.getHandlersByUsersAndRoles = function (user_ids, role_ids, space_id) {
  var approve_users;
  approve_users = new Array();

  _.each(user_ids, function (user_id) {
    var users;

    if (db.users.find({
      _id: user_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRoles(user_id, role_ids, space_id);

      if (users.length > 0) {
        return approve_users = approve_users.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "user_id不合法不合法");
    }
  });

  approve_users = _.uniq(approve_users);
  return approve_users;
};

getHandlersManager.getHandlersByUserAndRoles = function (user_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;

    if (db.flow_roles.find({
      _id: role_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRole(user_id, role_id, space_id);

      if (users.length > 0) {
        return user_ids = user_ids.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "role_id已经被删除");
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据user_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByUserAndRole = function (user_id, role_id, space_id) {
  var orgs, user_ids;
  orgs = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      _id: 1
    }
  }).fetch();
  user_ids = new Array();

  _.each(orgs, function (org) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org._id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgsAndRoles = function (org_ids, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(org_ids, function (org_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRoles(org_id, role_ids, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgAndRoles = function (org_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org_id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据org_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByOrgAndRole = function (org_id, role_id, space_id) {
  var org, parents, positions, user_ids;
  org = db.organizations.findOne({
    _id: org_id
  }, {
    fields: {
      parents: 1
    }
  });
  user_ids = new Array();
  positions = db.flow_positions.find({
    space: space_id,
    org: org_id,
    role: role_id
  }, {
    fields: {
      users: 1
    }
  }).fetch();

  _.each(positions, function (position) {
    return user_ids = user_ids.concat(position.users);
  });

  if (user_ids.length === 0) {
    parents = org.parents;

    _.each(parents, function (parent_id) {
      positions = db.flow_positions.find({
        space: space_id,
        org: parent_id,
        role: role_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();

      if (positions.length > 0) {
        return _.each(positions, function (position) {
          return user_ids = user_ids.concat(position.users);
        });
      }
    });
  }

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlers = function (instance_id, step_id) {
  var _approve, _space_user, _trace, applicant, applicantSuperiors, approve_users, approver_org_field, approver_org_ids, approver_step, approver_user_field, approver_user_ids, current, current_flow, current_flow_version, current_form, current_step, current_steps, deal_type, field_code, finished_traces, flow_id, flow_rev, form, form_fields, form_id, form_rev, handlers, instance, max_startDate_trace, new_approver_user_ids, new_org_user_ids, newest_values, next_step_users, org_ids, org_ids_names, org_user_ids, space_id, space_user_count, submitter, submitter_user_count, unfinished_trace, user_ids, user_ids_names, users, valid_approver_org_ids;

  instance = db.instances.findOne(instance_id);

  if (instance.step_approve && instance.step_approve[step_id]) {
    return instance.step_approve[step_id];
  }

  approve_users = new Array();
  space_id = instance.space;
  flow_id = instance.flow;
  flow_rev = instance.flow_version;
  current_flow = db.flows.findOne(flow_id);
  current_step = null;
  current_steps = new Array();

  if (current_flow.current._id === flow_rev) {
    current_steps = current_flow.current.steps;
  } else {
    current = _.find(current_flow.historys, function (history) {
      return history._id === flow_rev;
    });
    current_steps = current.steps;
  }

  current_step = _.find(current_steps, function (step) {
    return step._id === step_id;
  });

  if (current_step.step_type === "condition") {
    unfinished_trace = _.find(instance.traces, function (trace) {
      return trace.is_finished === false;
    });
    return new Array(unfinished_trace.approves[0].user);
  }

  if (current_step.step_type === "start") {
    handlers = new Array();
    handlers.push(instance.applicant);
    handlers.push(instance.submitter);
    handlers = _.uniq(handlers);
    return handlers;
  }

  deal_type = current_step.deal_type;
  users = new Array();

  if (deal_type === "applicantRole") {
    applicant = instance.applicant;

    if (applicant) {
      space_user_count = db.space_users.find({
        space: space_id,
        user: applicant
      }).count();

      if (space_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
      }

      if (current_step.approver_roles && current_step.approver_roles.length > 0) {
        _.each(current_step.approver_roles, function (approver_role) {
          var role_count;
          role_count = db.flow_roles.find({
            _id: approver_role
          }).count();

          if (role_count === 0) {
            throw new Meteor.Error('error!', "角色已经被删除");
          }
        });

        return getHandlersManager.getHandlersByUserAndRoles(applicant, current_step.approver_roles, space_id);
      } else {
        throw new Meteor.Error('error!', "审批岗位未指定");
      }
    } else {
      throw new Meteor.Error('error!', "Instance的提交人为空");
    }
  } else if (deal_type === "applicant") {
    applicant = instance.applicant;
    space_user_count = db.space_users.find({
      space: space_id,
      user: applicant
    }).count();

    if (space_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
    } else {
      return new Array(applicant);
    }
  } else if (deal_type === "orgFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByOrgsAndRoles(org_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "orgField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    user_ids = new Array();

    _.each(org_ids, function (org_id) {
      var check_orgs, org, org_children, org_users;
      org = db.organizations.findOne({
        _id: org_id
      }, {
        fields: {
          users: 1
        }
      });
      org_children = db.organizations.find({
        space: space_id,
        parents: org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      org_children.unshift(org);
      check_orgs = org_children;
      org_users = new Array();

      _.each(check_orgs, function (check_org_user) {
        if (check_org_user.users) {
          _.each(check_org_user.users, function (org_user) {
            if (db.space_users.find({
              space: space_id,
              user: org_user
            }).count() === 0) {
              throw new Meteor.Error('error!', "space下不存在此user");
            }
          });
        }

        user_ids = user_ids.concat(check_org_user.users);
        return org_users = org_users.concat(check_org_user.users);
      });

      if (org_users.length === 0) {
        throw new Meteor.Error('error!', "组织" + org_id + "不存在处理人");
      }
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "userFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByUsersAndRoles(user_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "userField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "specifyStepRole") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    if (current_step.approver_roles) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', "角色已经被删除");
        }
      });
    }

    _.each(approve_users, function (approve_user) {
      if (db.space_users.find({
        space: space_id,
        user: approve_user
      }).count() === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    return getHandlersManager.getHandlersByUsersAndRoles(approve_users, current_step.approver_roles, space_id);
  } else if (deal_type === "specifyStepUser") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    _.each(approve_users, function (approve_user) {
      var check_approve_user_count;
      check_approve_user_count = db.space_users.find({
        space: space_id,
        user: approve_user
      }).count();

      if (check_approve_user_count === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    approve_users = _.uniq(approve_users);
    return approve_users;
  } else if (deal_type === "submitterRole") {
    submitter = instance.submitter;

    if (!submitter) {
      submitter_user_count = db.space_users.find({
        space: space_id,
        user: submitter
      }).count();

      if (submitter_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
      } else {
        if (current_step.approver_roles && current_step.approver_roles.length > 0) {
          _.each(current_step.approver_roles, function (approver_role) {
            var role_count;
            role_count = db.flow_roles.find({
              _id: approver_role
            }).count();

            if (role_count === 0) {
              throw new Meteor.Error('error!', approver_role + "已经被删除");
            }
          });

          return getHandlersManager.getHandlersByUserAndRoles(submitter, current_step.approver_roles, space_id);
        } else {
          throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
        }
      }
    } else {
      throw new Meteor.Error('error!', "申请单的提交人为空");
    }
  } else if (deal_type === "submitter") {
    submitter = instance.submitter;
    submitter_user_count = db.space_users.find({
      space: space_id,
      user: submitter
    }).count();

    if (submitter_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
    } else {
      return new Array(submitter);
    }
  } else if (deal_type === "specifyOrg") {
    approver_org_ids = current_step.approver_orgs;

    if (!approver_org_ids || approver_org_ids.length === 0) {
      throw new Meteor.Error('error!', "未定义用于查找下一步处理人的部门，请联系管理员调查流程图的配置是否正确");
    }

    valid_approver_org_ids = new Array();

    _.each(approver_org_ids, function (approver_org_id) {
      if (db.organizations.find({
        _id: approver_org_id
      }).count() > 0) {
        return valid_approver_org_ids.unshift(approver_org_id);
      }
    });

    org_user_ids = new Array();

    _.each(valid_approver_org_ids, function (valid_approver_org_id) {
      var child_orgs, valid_approver_org;
      valid_approver_org = db.organizations.findOne({
        _id: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      });

      if (valid_approver_org.users) {
        org_user_ids = org_user_ids.concat(valid_approver_org.users);
      }

      child_orgs = db.organizations.find({
        space: space_id,
        parents: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      return _.each(child_orgs, function (child_org) {
        if (child_org.users) {
          return org_user_ids = org_user_ids.concat(child_org.users);
        }
      });
    });

    org_user_ids = _.uniq(org_user_ids);
    new_org_user_ids = new Array();

    _.each(org_user_ids, function (org_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: org_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_org_user_ids.push(org_user_id);
      }
    });

    return new_org_user_ids;
  } else if (deal_type === "specifyUser") {
    approver_user_ids = current_step.approver_users;
    approver_user_ids = _.uniq(approver_user_ids);
    new_approver_user_ids = new Array();

    _.each(approver_user_ids, function (approver_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: approver_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_approver_user_ids.push(approver_user_id);
      }
    });

    return new_approver_user_ids;
  } else if (deal_type === "pickupAtRuntime") {
    next_step_users = new Array();
    _trace = _.find(instance.traces, function (_tr) {
      return _tr.is_finished === false;
    });
    _approve = _.find(_trace.approves, function (_app) {
      return _app.is_finished === false && _app.type !== 'cc';
    });

    if (_approve.next_steps) {
      if (_approve.next_steps[0]["users"]) {
        next_step_users = _approve.next_steps[0]["users"];
      }
    }

    return next_step_users;
  } else if (deal_type === "applicantSuperior") {
    applicantSuperiors = new Array();
    _space_user = db.space_users.findOne({
      space: space_id,
      user: instance.applicant
    }, {
      fields: {
        manager: 1
      }
    });

    if (_space_user.manager) {
      applicantSuperiors.push(_space_user.manager);
    }

    return applicantSuperiors;
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"permission_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/permission_manager.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
permissionManager = {};

permissionManager.getFlowPermissions = function (flow_id, user_id) {
  var flow, my_permissions, org_ids, organizations, orgs_can_add, orgs_can_admin, orgs_can_monitor, space_id, users_can_add, users_can_admin, users_can_monitor;
  flow = uuflowManager.getFlow(flow_id);
  space_id = flow.space;
  org_ids = new Array();
  organizations = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      parents: 1
    }
  }).fetch();

  _.each(organizations, function (org) {
    org_ids.push(org._id);

    if (org.parents) {
      return _.each(org.parents, function (parent_id) {
        return org_ids.push(parent_id);
      });
    }
  });

  org_ids = _.uniq(org_ids);
  my_permissions = new Array();

  if (flow.perms) {
    if (flow.perms.users_can_add) {
      users_can_add = flow.perms.users_can_add;

      if (users_can_add.includes(user_id)) {
        my_permissions.push("add");
      }
    }

    if (flow.perms.orgs_can_add) {
      orgs_can_add = flow.perms.orgs_can_add;

      _.each(org_ids, function (org_id) {
        if (orgs_can_add.includes(org_id)) {
          return my_permissions.push("add");
        }
      });
    }

    if (flow.perms.users_can_monitor) {
      users_can_monitor = flow.perms.users_can_monitor;

      if (users_can_monitor.includes(user_id)) {
        my_permissions.push("monitor");
      }
    }

    if (flow.perms.orgs_can_monitor) {
      orgs_can_monitor = flow.perms.orgs_can_monitor;

      _.each(org_ids, function (org_id) {
        if (orgs_can_monitor.includes(org_id)) {
          return my_permissions.push("monitor");
        }
      });
    }

    if (flow.perms.users_can_admin) {
      users_can_admin = flow.perms.users_can_admin;

      if (users_can_admin.includes(user_id)) {
        my_permissions.push("admin");
      }
    }

    if (flow.perms.orgs_can_admin) {
      orgs_can_admin = flow.perms.orgs_can_admin;

      _.each(org_ids, function (org_id) {
        if (orgs_can_admin.includes(org_id)) {
          return my_permissions.push("admin");
        }
      });
    }
  }

  my_permissions = _.uniq(my_permissions);
  return my_permissions;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"approve_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/approve_manager.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
approveManager = {}; /*
                         对比approve_values与last_values 对象， 返回approve_values比last_values多出的或者改变的部分
                      */

approveManager.getChangeValues = function (last_values, approve_values) {
  var approve_values_keys, changeValues, last_values_keys;
  changeValues = {};
  last_values_keys = _.keys(last_values);
  approve_values_keys = _.keys(approve_values);
  approve_values_keys.forEach(function (key) {
    if (_.contains(last_values_keys, key)) {
      if (!_.isEqual(last_values[key], approve_values[key])) {
        return changeValues[key] = approve_values[key];
      }
    } else {
      if (approve_values[key] !== '') {
        return changeValues[key] = approve_values[key];
      }
    }
  });
  return changeValues;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/flow_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
flowManager = {};

flowManager.getCategoriesFlows = function (spaceId, categorieId, fields) {
  var categoriesForms;
  categoriesForms = formManager.getCategoriesForms(spaceId, categorieId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: categoriesForms.getProperty("_id")
    }
  });
};

flowManager.getUnCategoriesFlows = function (spaceId, fields) {
  var unCategoriesForms;
  unCategoriesForms = formManager.getUnCategoriesForms(spaceId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: unCategoriesForms.getProperty("_id")
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"form_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/form_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
formManager = {};

formManager.getCategoriesForms = function (spaceId, categorieId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: categorieId,
    state: "enabled"
  }, _fields);
};

formManager.getUnCategoriesForms = function (spaceId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: {
      $in: [null, ""]
    },
    state: "enabled"
  }, _fields);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"step_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/step_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
stepManager = {};

stepManager.allowBatch = function (step) {
  return step.step_type === 'counterSign' && step.allowBatch;
};

stepManager.getStep = function (instance, flow, step_id) {
  var flow_rev, isExistStep;
  flow_rev = instance.flow_version;
  isExistStep = null;

  if (flow.current._id === flow_rev) {
    isExistStep = _.find(flow.current.steps, function (step) {
      return step._id === step_id;
    });
  } else {
    _.each(flow.historys, function (history) {
      if (history._id === flow_rev) {
        return isExistStep = _.find(history.steps, function (step) {
          return step._id === step_id;
        });
      }
    });
  }

  if (!isExistStep) {
    throw new Meteor.Error('error!', "不能获取step");
  }

  return isExistStep;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_manager.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/instance_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval, logger;

_eval = require('eval');
InstanceManager = {};
logger = new Logger('Workflow -> InstanceManager');

InstanceManager.handlerInstanceByFieldMap = function (ins, field_map) {
  var context, e, flow, res, script;
  res = ins;

  if (ins) {
    if (!field_map) {
      flow = db.flows.findOne({
        _id: ins.flow
      }, {
        fields: {
          field_map: 1
        }
      });

      if (flow != null ? flow.field_map : void 0) {
        field_map = flow.field_map;
      }
    }

    if (field_map) {
      context = _.clone(ins);
      context._ = _;
      script = "var instances = " + field_map + "; exports.instances = instances";

      try {
        res = _eval(script, "handlerInstanceByFieldMap", context, false).instances;
      } catch (error) {
        e = error;
        res = {
          _error: e
        };
        logger.error(e);
      }
    }
  }

  return res;
};

InstanceManager.getCurrentApprove = function (instance, handler) {
  var currentApprove, currentApproves, currentTraces;

  if (!instance || !instance.traces || instance.traces.length < 1) {
    return;
  }

  currentTraces = instance.traces.filterProperty('is_finished', false);

  if (currentTraces.length) {
    currentApproves = currentTraces[0].approves.filterProperty('is_finished', false).filterProperty('handler', handler);
    currentApprove = currentApproves.length > 0 ? currentApproves[0] : null;
  }

  if (!currentApprove || currentApprove.type === 'cc') {
    _.each(instance.traces, function (t) {
      _.each(t.approves, function (a) {
        if (a.type === 'cc' && a.user === handler && a.is_finished === false) {
          currentApprove = a;
        }
      });
    });
  }

  if (!currentApprove) {
    return;
  }

  return currentApprove;
};

InstanceManager.getCurrentTrace = function (instance, traceId) {
  return instance.traces.findPropertyByPK("_id", traceId);
};

InstanceManager.getMyApprove = function (instanceId, userId) {
  var flow, instance, my_approve, nextSteps, next_user_ids, step, trace;
  instance = db.instances.findOne({
    _id: instanceId
  });
  flow = uuflowManager.getFlow(instance.flow);
  my_approve = InstanceManager.getCurrentApprove(instance, userId);

  if (my_approve) {
    trace = InstanceManager.getCurrentTrace(instance, my_approve.trace);
    step = uuflowManager.getStep(instance, flow, trace.step);
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, "");

    if (nextSteps.length === 1) {
      next_user_ids = getHandlersManager.getHandlers(instance._id, nextSteps[0]);

      if (next_user_ids.length === 1) {
        my_approve.next_steps = [{
          step: nextSteps[0],
          users: next_user_ids
        }];
        return my_approve;
      }
    }
  }
};

InstanceManager.getBatchInstances = function (space, categoryId, flowIds, inbox_user) {
  var FIELDS, _batch_instances, categoryFlows, inbox_instances, query, unCategoryFlows;

  _batch_instances = new Array();
  query = {
    space: space,
    inbox_users: inbox_user
  };
  FIELDS = {
    name: 1,
    applicant_name: 1,
    submit_date: 1,
    flow_version: 1,
    "traces.step": 1,
    flow: 1
  };

  if (categoryId) {
    if (categoryId === '-1') {
      unCategoryFlows = flowManager.getUnCategoriesFlows(space, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: unCategoryFlows
      };
    } else {
      categoryFlows = flowManager.getCategoriesFlows(space, categoryId, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: categoryFlows
      };
    }
  }

  if (flowIds) {
    query.flow = {
      $in: flowIds
    };
  }

  inbox_instances = db.instances.find(query, {
    fields: FIELDS,
    skip: 0,
    limit: 100
  });
  inbox_instances.forEach(function (ins) {
    var currentStep, currentStepId, flow;
    currentStepId = _.last(ins.traces).step;
    flow = db.flows.findOne({
      _id: ins.flow
    });
    currentStep = stepManager.getStep(ins, flow, currentStepId);

    if (stepManager.allowBatch(currentStep) && InstanceManager.getMyApprove(ins._id, inbox_user)) {
      delete ins.flow_version;
      delete ins.traces;
      delete ins.flow;
      return _batch_instances.push(ins);
    }
  });
  return _batch_instances;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/categories.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('categories', function (spaceId) {
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.categories.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      space: 1,
      sort_no: 1,
      app: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/cfs_instances.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('cfs_instances', function (instanceIds) {
  check(instanceIds, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceIds) {
    return this.ready();
  }

  return cfs.instances.find({
    'metadata.instance': {
      $in: instanceIds
    },
    $or: [{
      'metadata.is_private': {
        $ne: true
      }
    }, {
      'metadata.is_private': true,
      "metadata.owner": this.userId
    }]
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_positions', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_positions.find({
    space: spaceId
  }, {
    fields: {
      role: 1,
      users: 1,
      org: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions_tabular.coffee                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publishComposite('flow_positions_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flow_positions.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (position) {
        this.unblock();
        return db.flow_roles.find({
          _id: position.role
        }, {
          fields: {
            name: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.organizations.find({
          _id: position.org
        }, {
          fields: {
            fullname: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.space_users.find({
          space: position.space,
          user: {
            $in: position.users
          }
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_roles.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_roles', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_roles.find({
    space: spaceId
  }, {
    fields: {
      name: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flows.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flows', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (db.flows.find({
    space: spaceId
  }).count() === 0) {
    db.spaces.createTemplateFormAndFlow(spaceId);
  }

  return db.flows.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      company_id: 1,
      sort_no: 1
    }
  });
});
Meteor.publish('flow_version', function (spaceId, flowId, versionId) {
  var getFlowVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFlowVersion = function (id, versionId) {
    var flow, flow_version;
    flow = db.flows.findOne({
      _id: id
    });

    if (flow) {
      flow_version = flow.current;
      flow_version.latest = true;

      if (flow_version._id !== versionId) {
        flow_version = flow.historys.findPropertyByPK("_id", versionId);
        flow_version.latest = false;
      }

      return flow_version;
    }
  };

  handle = db.flows.find({
    _id: flowId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("flow_versions", versionId, getFlowVersion(id, versionId));
    }
  });
  self.added("flow_versions", versionId, getFlowVersion(flowId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('distribute_optional_flows', function (flow_ids) {
  if (!this.userId) {
    return this.ready();
  }

  if (!flow_ids) {
    return this.ready();
  }

  return db.flows.find({
    _id: {
      $in: flow_ids
    }
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      distribute_end_notification: 1,
      company_id: 1
    }
  });
});
Meteor.publish('flow', function (spaceId, flowId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  return db.flows.find({
    _id: flowId,
    space: spaceId
  }, {
    fields: {
      print_template: 1,
      instance_template: 1,
      events: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      upload_after_being_distributed: 1,
      distribute_end_notification: 1,
      company_id: 1
    }
  });
});
Meteor.publishComposite('flows_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flows.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (flow) {
        this.unblock();
        return db.space_users.find({
          space: flow.space,
          user: flow.current.modified_by
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.forms.find({
          space: flow.space,
          _id: flow.form
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1,
            category: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.categories.find({
          space: flow.space
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/forms.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('forms', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.forms.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      category: 1,
      state: 1,
      description: 1,
      instance_style: 1
    }
  });
});
Meteor.publish('form_version', function (spaceId, formId, versionId) {
  var getFormVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!formId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFormVersion = function (id, versionId) {
    var form, form_version;
    form = db.forms.findOne({
      _id: id
    });

    if (!form) {
      return {};
    }

    form_version = form.current;
    form_version.latest = true;

    if (form_version._id !== versionId) {
      form_version = form.historys.findPropertyByPK("_id", versionId);
      form_version.latest = false;
    }

    return form_version;
  };

  handle = db.forms.find({
    _id: formId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("form_versions", versionId, getFormVersion(id, versionId));
    }
  });
  self.added("form_versions", versionId, getFormVersion(formId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_data.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_data.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instance_data', function (instanceId, box) {
  var getMiniInstance, getMyapproveModified, handle, instance, instance_fields_0, miniApproveFields, needChange, self, triggerChangeFields, triggerChangeFieldsValues;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;
  miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description', 'auto_submitted'];
  triggerChangeFields = ['form_version', 'flow_version', 'related_instances', '_my_approve_read_dates'];
  triggerChangeFieldsValues = {};
  instance_fields_0 = {
    "record_synced": 0,
    "traces.approves.handler_organization_name": 0,
    "traces.approves.handler_organization": 0,
    "traces.approves.cost_time": 0,
    "traces.approves.is_error": 0,
    "traces.approves.deadline": 0,
    "traces.approves.remind_date": 0,
    "traces.approves.reminded_count": 0,
    "traces.approves.modified_by": 0,
    "traces.approves.modified": 0,
    "traces.approves.geolocation": 0,
    "traces.approves.cc_users": 0,
    "traces.approves.from_approve_id": 0,
    "traces.approves.values_history": 0
  };

  getMyapproveModified = function (traces) {
    var myApproveModifieds;
    myApproveModifieds = new Array();

    if (traces != null) {
      traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.user === self.userId || approve.handler === self.userId) {
            return myApproveModifieds.push(approve.read_date);
          }
        }) : void 0 : void 0;
      });
    }

    return myApproveModifieds;
  };

  getMiniInstance = function (_instanceId) {
    var instance, ref, ref1, show_modal_traces_list, traces;
    instance = db.instances.findOne({
      _id: _instanceId
    }, {
      fields: instance_fields_0
    });

    if (instance) {
      triggerChangeFields.forEach(function (key) {
        if (key === '_my_approve_read_dates') {
          return triggerChangeFieldsValues[key] = getMyapproveModified(instance.traces);
        } else {
          return triggerChangeFieldsValues[key] = instance[key];
        }
      });
      show_modal_traces_list = ((ref = db.space_settings.findOne({
        space: instance.space,
        key: "show_modal_traces_list"
      }, {
        fields: {
          values: 1
        }
      })) != null ? ref.values : void 0) || false;

      if (show_modal_traces_list) {
        traces = new Array();

        if (instance != null) {
          if ((ref1 = instance.traces) != null) {
            ref1.forEach(function (trace) {
              var _trace, approves, ref2;

              _trace = _.clone(trace);
              approves = new Array();

              if (trace != null) {
                if ((ref2 = trace.approves) != null) {
                  ref2.forEach(function (approve) {
                    if (approve.type !== 'cc' || approve.user === self.userId || approve.handler === self.userId || !_.isEmpty(approve.sign_field_code)) {
                      return approves.push(approve);
                    }
                  });
                }
              }

              _trace.approves = approves;
              return traces.push(_trace);
            });
          }
        }

        instance.traces = traces;
      }
    }

    return instance;
  };

  needChange = function (changeFields) {
    var _change, _rev;

    if (changeFields) {
      _change = false;
      _rev = _.find(triggerChangeFields, function (key) {
        var _key, _my_approve_modifieds;

        _key = key;

        if (key === '_my_approve_read_dates') {
          _key = 'traces';
        }

        if (_.has(changeFields, _key)) {
          if (key === '_my_approve_read_dates') {
            _my_approve_modifieds = getMyapproveModified(changeFields.traces);
            return !_.isEqual(triggerChangeFieldsValues[key], _my_approve_modifieds);
          } else {
            return !_.isEqual(triggerChangeFieldsValues[key], changeFields[key]);
          }
        }
      });

      if (_rev) {
        _change = true;
      }

      return _change;
    }

    return true;
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id, fields) {
      if (box !== 'inbox' || needChange(fields)) {
        return self.changed("instances", id, getMiniInstance(id));
      }
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  instance = getMiniInstance(instanceId);
  self.added("instances", instance != null ? instance._id : void 0, instance);
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('instance_traces', function (instanceId) {
  var getInstanceTraces, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;

  getInstanceTraces = function (_insId) {
    return db.instances.findOne({
      _id: _insId
    }, {
      fields: {
        _id: 1,
        traces: 1
      }
    });
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id) {
      return self.changed("instance_traces", instanceId, getInstanceTraces(instanceId));
    }
  });
  self.added("instance_traces", instanceId, getInstanceTraces(instanceId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_list.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_list.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_list', function (spaceId, box, flowId) {
  var query;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  query = {
    space: spaceId
  };

  if (box === "inbox") {
    query.inbox_users = this.userId;
  } else if (box === "outbox") {
    query.outbox_users = this.userId;
  } else if (box === "draft") {
    query.submitter = this.userId;
    query.state = "draft";
  } else if (box === "pending") {
    query.submitter = this.userId;
    query.state = "pending";
  } else if (box === "completed") {
    query.submitter = this.userId;
    query.state = "completed";
  } else if (box === "monitor") {
    query.flow = flowId;
    query.state = {
      $in: ["pending", "completed"]
    };
  } else {
    query.state = "none";
  }

  return db.instances.find(query, {
    fields: {
      name: 1,
      created: 1,
      form: 1,
      flow: 1,
      space: 1,
      modified: 1,
      applicant: 1,
      is_archived: 1,
      form_version: 1,
      flow_version: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_tabular.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var asyncLastFinishedApprove, lastFinishedApproveAggregate;

lastFinishedApproveAggregate = function (instanceid, userId, dataMap, callback) {
  var operation;
  operation = [{
    "$match": {
      "_id": instanceid
    }
  }, {
    "$project": {
      "name": 1,
      "_approve": "$traces.approves"
    }
  }, {
    "$unwind": "$_approve"
  }, {
    "$unwind": "$_approve"
  }, {
    "$match": {
      "_approve.is_finished": true,
      $or: [{
        "_approve.handler": userId
      }, {
        "_approve.user": userId
      }]
    }
  }, {
    "$group": {
      "_id": "$_id",
      "finish_date": {
        "$last": "$_approve.finish_date"
      }
    }
  }];
  return db.instances.rawCollection().aggregate(operation).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return dataMap.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

asyncLastFinishedApprove = Meteor.wrapAsync(lastFinishedApproveAggregate);
Meteor.publish("instance_tabular", function (tableName, ids, fields) {
  var getMyApprove, getMyLastFinishedApprove, getStepCurrentName, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));
  fields.cc_users = 1;
  self = this;

  getMyLastFinishedApprove = function (userId, instanceId) {
    var data;
    data = [];
    asyncLastFinishedApprove(instanceId, userId, data);

    if (data.length > 0) {
      return data[0];
    }
  };

  getMyApprove = function (userId, instanceId) {
    var approve, approves, instance, is_read, myApprove, notFinishedTraces;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        traces: 1
      }
    });
    myApprove = null;

    if (!instance) {
      return;
    }

    if (!instance.traces || instance.traces.length < 1) {
      return;
    }

    notFinishedTraces = instance.traces.filterProperty("is_finished", false);

    if (notFinishedTraces.length > 0) {
      approves = notFinishedTraces[0].approves.filterProperty("is_finished", false).filterProperty("handler", userId);

      if (approves.length > 0) {
        approve = approves[0];
        myApprove = {
          id: approve._id,
          instance: approve.instance,
          trace: approve.trace,
          is_read: approve.is_read,
          start_date: approve.start_date,
          agent: approve.agent,
          user_name: approve.user_name
        };
      }
    }

    if (!myApprove) {
      is_read = false;
      instance.traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.type === 'cc' && approve.user === userId && approve.is_finished === false) {
            if (approve.is_read) {
              is_read = true;
            }

            return myApprove = {
              id: approve._id,
              is_read: is_read,
              start_date: approve.start_date,
              agent: approve.agent,
              user_name: approve.user_name
            };
          }
        }) : void 0 : void 0;
      });
    }

    return myApprove;
  };

  getStepCurrentName = function (instanceId) {
    var instance, ref, ref1, stepCurrentName;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        "traces.name": 1,
        "traces": {
          $slice: -1
        }
      }
    });

    if (instance) {
      stepCurrentName = (ref = instance.traces) != null ? (ref1 = ref[0]) != null ? ref1.name : void 0 : void 0;
    }

    return stepCurrentName;
  };

  handle = db.instances.find({
    _id: {
      $in: ids
    }
  }, {
    fields: {
      traces: 0
    }
  }).observeChanges({
    changed: function (id) {
      var instance, myApprove, myLastFinishedApprove, ref, ref1;
      instance = db.instances.findOne({
        _id: id
      }, {
        fields: fields
      });

      if (!instance) {
        return;
      }

      myApprove = getMyApprove(self.userId, id);
      myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

      if (myApprove) {
        instance.is_read = myApprove.is_read;
        instance.start_date = myApprove.start_date;

        if (myApprove.agent) {
          instance.agent_user_name = myApprove.user_name;
        }
      } else {
        instance.is_read = true;
      }

      if (myLastFinishedApprove) {
        instance.my_finish_date = myLastFinishedApprove.finish_date;
      }

      instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
      instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
      delete instance.cc_users;
      return self.changed("instances", id, instance);
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  ids.forEach(function (id) {
    var instance, myApprove, myLastFinishedApprove, ref, ref1;
    instance = db.instances.findOne({
      _id: id
    }, {
      fields: fields
    });

    if (!instance) {
      return;
    }

    myApprove = getMyApprove(self.userId, id);
    myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

    if (myApprove) {
      instance.is_read = myApprove.is_read;
      instance.start_date = myApprove.start_date;

      if (myApprove.agent) {
        instance.agent_user_name = myApprove.user_name;
      }
    } else {
      instance.is_read = true;
    }

    if (myLastFinishedApprove) {
      instance.my_finish_date = myLastFinishedApprove.finish_date;
    }

    instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
    instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
    delete instance.cc_users;
    return self.added("instances", id, instance);
  });
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_draft.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_draft', function (spaceId) {
  var userId;
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  userId = this.userId;
  return db.instances.find({
    state: "draft",
    space: spaceId,
    submitter: userId,
    $or: [{
      inbox_users: {
        $exists: false
      }
    }, {
      inbox_users: []
    }]
  }, {
    fields: {
      _id: 1,
      state: 1,
      space: 1,
      submitter: 1,
      inbox_users: 1,
      modified: 1,
      name: 1
    },
    sort: {
      modified: -1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distributed_instances_state_by_ids.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/distributed_instances_state_by_ids.coffee                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('distributed_instances_state_by_ids', function (instance_ids) {
  var handle, self;
  check(instance_ids, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instance_ids) {
    return this.ready();
  }

  if (_.isEmpty(instance_ids)) {
    return this.ready();
  }

  self = this;
  handle = db.instances.find({
    _id: {
      $in: instance_ids
    }
  }, {
    fields: {
      state: 1,
      traces: {
        $slice: 1
      }
    }
  }).observeChanges({
    added: function (id, fields) {
      return self.added('instances', id, {
        state: fields.state,
        is_read: fields.traces[0].approves[0].is_read
      });
    },
    changed: function (id, fields) {
      if (fields.state) {
        self.changed('instances', id, {
          state: fields.state
        });
      }

      if (fields.traces) {
        return self.changed('instances', id, {
          is_read: fields.traces[0].approves[0].is_read
        });
      }
    }
  });
  this.ready();
  return this.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/related_instaces.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('related_instaces', function (instanceId, related_instances) {
  var ref, related_instance_ids;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  related_instance_ids = (ref = db.instances.findOne(instanceId, {
    fields: {
      related_instances: 1
    }
  })) != null ? ref.related_instances : void 0;

  if (related_instance_ids && _.isArray(related_instance_ids)) {
    return db.instances.find({
      _id: {
        $in: related_instance_ids
      }
    }, {
      fields: {
        _id: 1,
        name: 1,
        space: 1
      }
    });
  } else {
    return this.ready();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/space_user_signs.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isServer) {
  Meteor.publish('space_user_signs', function (spaceId) {
    check(spaceId, String);

    if (!this.userId) {
      return this.ready();
    }

    return db.space_user_signs.find({
      space: spaceId
    }, {
      fields: {
        created_by: 0,
        created: 0,
        modified_by: 0
      }
    });
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user_inbox_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/user_inbox_instance.coffee                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Meteor.publishComposite "user_inbox_instance", ()->
	unless this.userId
		return this.ready()

	userSpaceIds = db.space_users.find({
		user: this.userId,
		user_accepted: true
	}, {fields: {space: 1}}).fetch().getEach("space");
	query = {space: {$in: userSpaceIds}}

	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]

	find: ->
		db.instances.find(query, {
			fields: {
				space: 1,
				applicant_name: 1,
				flow: 1,
				inbox_users: 1,
				cc_users: 1,
				state: 1,
				name: 1,
				modified: 1,
				form: 1
			}, sort: {modified: -1}, skip: 0, limit: 200
		});
	children: [
		{
			find: (instance, post)->
				db.flows.find({_id: instance.flow}, {fields: {name: 1, space: 1}});
		}
	]
 */ /*
    Meteor.publish 'my_inbox_instances', (spaceId)->
    	unless this.userId
    		return this.ready()
    
    	self = this;
    
    	 *	userSpaceIds = db.space_users.find({
    	 *		user: this.userId,
    	 *		user_accepted: true
    	 *	}, {fields: {space: 1}}).fetch().getEach("space");
    
    	query = {space: spaceId}
    
    	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]
    
    	fields = {
    		space: 1,
     *		applicant_name: 1,
    		flow: 1,
    		inbox_users: 1,
    		cc_users: 1,
    		state: 1,
     *		name: 1,
     *		modified: 1,
    		form: 1
    	}
    
    	handle = db.instances.find(query, {sort: {modified: -1}, skip: 0, limit: 500}).observeChanges {
    		added: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.added("instances", id, instance)
    		changed: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.changed("instances", id, instance);
    		removed: (id)->
    			self.removed("instances", id);
    	}
    
    	self.ready();
    	self.onStop ()->
    		handle.stop()
     */var _async_get_flow_instances_aggregate, _get_flow_instances_aggregate;

_get_flow_instances_aggregate = function (spaceId, userId, _items, callback) {
  return db.instances.rawCollection().aggregate([{
    $match: {
      space: spaceId,
      $or: [{
        inbox_users: userId
      }, {
        cc_users: userId
      }]
    }
  }, {
    $group: {
      _id: {
        flow: "$flow",
        category: "$category"
      },
      count: {
        $sum: 1
      }
    }
  }]).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return _items.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

_async_get_flow_instances_aggregate = Meteor.wrapAsync(_get_flow_instances_aggregate);
Meteor.publish('my_inbox_flow_instances_count', function (spaceId) {
  var _changeData, _flowsData, _init, data, handle, query, self;

  if (!this.userId) {
    return this.ready();
  }

  self = this;
  query = {
    space: spaceId
  };
  query.$or = [{
    inbox_users: this.userId
  }, {
    cc_users: this.userId
  }];
  data = [];

  _async_get_flow_instances_aggregate(spaceId, self.userId, data);

  _flowsData = [];

  _.each(data, function (dataItem) {
    return _flowsData.push({
      _id: dataItem._id.flow,
      category: dataItem._id.category,
      count: dataItem.count
    });
  });

  self.added("flow_instances", spaceId, {
    flows: _flowsData
  });

  _changeData = function (doc, action) {
    var flow_instance;
    flow_instance = _.find(_flowsData, function (f) {
      return f._id === doc.flow;
    });

    if (flow_instance) {
      if (action === "added") {
        flow_instance.count++;
      } else if (action === "removed") {
        flow_instance.count--;
      }
    } else if (action === "added") {
      _flowsData.push({
        _id: doc.flow,
        category: doc.category,
        count: 1
      });
    }

    return self.changed("flow_instances", spaceId, {
      flows: _flowsData
    });
  };

  _init = true;
  handle = db.instances.find(query, {
    fields: {
      _id: 1,
      inbox_users: 1,
      cc_users: 1,
      flow: 1,
      category: 1
    }
  }).observe({
    added: function (doc) {
      if (!_init) {
        return _changeData(doc, "added");
      }
    },
    removed: function (doc) {
      if (!_init) {
        return _changeData(doc, "removed");
      }
    }
  });
  _init = false;
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_main_attach_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_main_attach_template.coffee                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_main_attach_template', function (spaceId, flowId) {
  check(spaceId, String);
  check(flowId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!(spaceId && flowId)) {
    return this.ready();
  }

  return Creator.getCollection('cms_files').find({
    space: spaceId,
    'parent.o': 'flows',
    'parent.ids': flowId,
    name: '正文.docx'
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"flow-template":{"workflow_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/flow-template/workflow_template.coffee                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
workflowTemplate = {};
workflowTemplate["en"] = [];
workflowTemplate["zh-CN"] = [];
Meteor.startup(function () {
  var absolute_path_cn, absolute_path_us, filesList_cn, filesList_us, fs, mime, path, path_cn, path_us, readFileList, ref, ref1;
  fs = require('fs');
  path = require('path');
  mime = require('mime');

  readFileList = function (pathDir, filesList) {
    var files;
    files = fs.readdirSync(pathDir);
    return files.forEach(function (name, index) {
      var obj, stat;
      stat = fs.statSync(path.join(pathDir, name));

      if (stat.isDirectory()) {
        return readFileList(path.join(pathDir, name), filesList);
      } else {
        obj = {};
        obj.path = pathDir;
        obj.name = name;
        return filesList.push(obj);
      }
    });
  };

  filesList_cn = [];
  path_cn = (ref = Meteor.settings.workflowTemplates) != null ? ref.path_cn : void 0;

  if (path_cn) {
    absolute_path_cn = path.resolve(path_cn);
    console.log("absolute_path_cn", absolute_path_cn);

    if (fs.existsSync(absolute_path_cn)) {
      readFileList(absolute_path_cn, filesList_cn);
      filesList_cn.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["zh-CN"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取zh-cn文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }

  filesList_us = [];
  path_us = (ref1 = Meteor.settings.workflowTemplates) != null ? ref1.path_us : void 0;

  if (path_us) {
    absolute_path_us = path.resolve(path_us);
    console.log("absolute_path_us", absolute_path_us);

    if (fs.existsSync(absolute_path_us)) {
      readFileList(absolute_path_us, filesList_us);
      return filesList_us.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["en"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取en-us文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/startup.coffee                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"schedule":{"auto_finish_process_delegation.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/auto_finish_process_delegation.coffee                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.auto_finish_process_delegation : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.auto_finish_process_delegation;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e, now;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('auto_finish_process_delegation');
        now = new Date();
        db.process_delegation_rules.update({
          enabled: true,
          end_time: {
            $lte: now
          }
        }, {
          $set: {
            enabled: false
          }
        }, {
          multi: true
        });
        console.timeEnd('auto_finish_process_delegation');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO AUTO_FINISH_PROCESS_DELEGATION ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function () {
      return console.log('Failed to bind environment');
    }));
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"timeout_auto_submit.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/timeout_auto_submit.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.timeout_auto_submit : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.timeout_auto_submit;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('timeout_auto_submit');
        uuflowManager.timeoutAutoSubmit();
        console.timeEnd('timeout_auto_submit');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO TIMEOUT_AUTO_SUBMIT ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function () {
      return console.log('Failed to bind environment');
    }));
  }
});
Meteor.methods({
  timeout_auto_submit: function (ins_id) {
    uuflowManager.timeoutAutoSubmit(ins_id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"routes":{"nextStepUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/nextStepUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/nextStepUsers", function (req, res, next) {
  var deal_type = req.query.deal_type,
      spaceId = req.query.spaceId,
      error = "";

  if (!deal_type || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var body = req.body,
      nextStepUsers = [];

  switch (deal_type) {
    case 'specifyUser':
      var specifyUserIds = body.specifyUserIds;
      nextStepUsers = WorkflowManager.getUsers(spaceId, specifyUserIds);
      break;

    case 'applicantRole':
      var applicantId = body.applicantId,
          approveRoleIds = body.approveRoleIds;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);
      if (applicant) nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, applicant.organizations, approveRoleIds);
      break;

    case 'applicantSuperior':
      var applicantId = body.applicantId;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);

      if (applicant.manager) {
        nextStepUsers = WorkflowManager.getUsers(spaceId, applicant.manager);
      }

      break;

    case 'applicant':
      var applicantId = body.applicantId;
      nextStepUsers = WorkflowManager.getUsers(spaceId, applicantId);
      break;

    case 'userField':
      var userField = body.userField,
          userFieldValue = body.userFieldValue;

      if (userField.is_multiselect) {
        //如果多选，以userFieldValue值为Array
        nextStepUsers = WorkflowManager.getUsers(spaceId, userFieldValue);
      } else {
        nextStepUsers.push(WorkflowManager.getUser(spaceId, userFieldValue));
      }

      break;

    case 'orgField':
      var orgs,
          orgChildrens,
          orgField = body.orgField,
          orgFieldValue = body.orgFieldValue;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          orgs = WorkflowManager.getOrganizations(orgFieldValue);
          orgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, orgFieldValue);
        } else {
          orgs = [WorkflowManager.getOrganization(orgFieldValue)];
          orgChildrens = WorkflowManager.getOrganizationChildrens(spaceId, orgFieldValue);
        }

        nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgChildrens);
        orgFieldUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgs);
        nextStepUsers = nextStepUsers.concat(orgFieldUsers);

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ORG_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'specifyOrg':
      var specifyOrgIds = body.specifyOrgIds;
      var specifyOrgs = WorkflowManager.getOrganizations(specifyOrgIds);
      var specifyOrgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, specifyOrgIds);
      nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgs);
      nextStepUsers = nextStepUsers.concat(WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgChildrens));
      break;

    case 'userFieldRole':
      var userField = body.userField,
          userFieldValue = body.userFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (userFieldValue) {
        if (userField.is_multiselect) {
          //如果多选，以userFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, userFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, [userFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'orgFieldRole':
      var orgField = body.orgField,
          orgFieldValue = body.orgFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, orgFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, [orgFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    default:
      break;
  }

  var result = [];
  nextStepUsers.forEach(function (su) {
    var o = {
      id: su.id,
      name: su.name
    };
    result.push(o);
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'nextStepUsers': WorkflowManager.uniqUsers(result),
      'error': error
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getSpaceUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getSpaceUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getSpaceUsers", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getUsers(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFormulaUserObjects.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getFormulaUserObjects.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getFormulaUserObjects", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var users = WorkflowManager.getFormulaUserObject(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': users
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_formula_values.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/init_formula_values.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/init_formula_values", function (req, res, next) {
  var fields = req.body.fields,
      autoFormDoc = req.body.autoFormDoc,
      approver = req.body.approver,
      applicant = req.body.applicant,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!fields || !spaceId || !autoFormDoc || !approver || !applicant) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
    return;
  }

  formula_values = Form_formula.init_formula_values(fields, autoFormDoc, approver, applicant, spaceId);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'formula_values': formula_values
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getNameForUser.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getNameForUser.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/getNameForUser", function (req, res, next) {
  var e, user, userId;

  try {
    userId = req.body.userId;

    if (!userId) {
      JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'errors': '缺少参数'
        }
      });
    }

    user = WorkflowManager.getNameForUser(userId);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        user: user
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_designer_startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_designer_startup.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/designer/startup', function (req, res, next) {
  var categories, companyId, current_user, current_user_info, e, flows, forms, org, organizations, positions, query, ref, result, roles, spaceIds, spaceUsers, spaces, spacesQuery, userIds, users;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    companyId = ((ref = req.query) != null ? ref.companyId : void 0) || '';
    spacesQuery = {
      admins: current_user
    };

    if (companyId) {
      org = db.organizations.findOne(companyId, {
        fields: {
          space: 1
        }
      });

      if (!org) {
        throw new Meteor.Error('error', 'companyId is invalid');
      }

      spacesQuery = {
        _id: org.space
      };
    }

    spaces = db.spaces.find(spacesQuery).fetch();
    spaceIds = _.pluck(spaces, '_id');
    query = {
      space: {
        $in: spaceIds
      }
    };

    if (companyId) {
      query.company_id = companyId;
    }

    spaceUsers = db.space_users.find(query).fetch();
    forms = db.forms.find(query, {
      fields: {
        name: 1,
        state: 1,
        is_deleted: 1,
        is_valid: 1,
        space: 1,
        description: 1,
        help_text: 1,
        created: 1,
        created_by: 1,
        current: 1,
        category: 1,
        instance_style: 1,
        company_id: 1
      }
    }).fetch();
    flows = db.flows.find(query, {
      fields: {
        name: 1,
        name_formula: 1,
        code_formula: 1,
        space: 1,
        description: 1,
        is_valid: 1,
        form: 1,
        flowtype: 1,
        state: 1,
        is_deleted: 1,
        created: 1,
        created_by: 1,
        help_text: 1,
        current_no: 1,
        current: 1,
        perms: 1,
        error_message: 1,
        distribute_optional_users: 1,
        company_id: 1
      }
    }).fetch();
    roles = db.flow_roles.find(query).fetch();
    organizations = db.organizations.find(query).fetch();
    positions = db.flow_positions.find(query).fetch();
    categories = db.categories.find({
      space: {
        $in: spaceIds
      }
    }).fetch();
    userIds = _.pluck(spaceUsers, 'user');
    users = db.users.find({
      _id: {
        $in: userIds
      }
    }, {
      fields: {
        name: 1
      }
    }).fetch();
    result = {};
    result.SpaceUsers = spaceUsers;
    result.Users = users;
    result.Forms = forms;
    result.Flows = flows;
    result.Organizations = organizations;
    result.Positions = positions;
    result.Roles = roles;
    result.Categories = categories;
    result.Spaces = spaces;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: result
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_engine.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_engine.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/engine', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Approvals'], function (approve_from_client) {
      return uuflowManager.workflow_engine(approve_from_client, current_user_info, current_user);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_drafts.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/drafts', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var new_ins, new_ins_id;
      new_ins_id = uuflowManager.create_instance(instance_from_client, current_user_info);
      new_ins = db.instances.findOne({
        _id: new_ins_id
      }, {
        fields: {
          space: 1,
          flow: 1,
          flow_version: 1,
          form: 1,
          form_version: 1
        }
      });
      return inserted_instances.push(new_ins);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_remove.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_remove.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/remove', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, delete_obj, flow, inbox_users, instance, space, spaceUserOrganizations, space_id, space_user, user_ids;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      flow = db.flows.findOne({
        _id: instance.flow
      });
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: space_user.organizations
        }
      }).fetch();

      if (instance.submitter !== current_user && !space.admins.includes(current_user) && !WorkflowManager.canAdmin(flow, space_user, spaceUserOrganizations)) {
        throw new Meteor.Error('error!', "您不能删除此申请单。");
      }

      delete_obj = db.instances.findOne(instance_from_client["_id"]);
      delete_obj.deleted = new Date();
      delete_obj.deleted_by = current_user;
      db.deleted_instances.insert(delete_obj);
      db.instances.remove(instance_from_client["_id"]);

      if (delete_obj.state !== "draft") {
        inbox_users = delete_obj.inbox_users ? delete_obj.inbox_users : [];
        cc_users = delete_obj.cc_users ? delete_obj.cc_users : [];
        user_ids = _.uniq(inbox_users.concat(cc_users));

        _.each(user_ids, function (u_id) {
          return pushManager.send_message_to_specifyUser("terminate_approval", u_id);
        });

        return pushManager.send_instance_notification("monitor_delete_applicant", delete_obj, "", current_user_info);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_submit.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/submit', function (req, res, next) {
  var current_user, current_user_info, e, hashData, result;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    result = [];

    _.each(hashData['Instances'], function (instance_from_client) {
      var current_approve, flow_id, instance, r;
      r = uuflowManager.submit_instance(instance_from_client, current_user_info);

      if (r.alerts) {
        result.push(r);
      }

      if (!_.isEmpty(instance_from_client['inbox_users'])) {
        pushManager.send_message_to_specifyUser("current_user", current_user);
      }

      if (_.isEmpty(r.alerts)) {
        instance = db.instances.findOne(instance_from_client._id);
        flow_id = instance.flow;
        current_approve = instance_from_client.traces[0].approves[0];
        pushManager.triggerWebhook(flow_id, instance, current_approve, 'draft_submit', current_user, instance.inbox_users);
      }

      return uuflowManager.distributedInstancesRemind(instance_from_client);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        result: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_terminate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_terminate.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/terminate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var flow, flow_id, flow_ver_end_step, flow_vers, h, i, ins, instance, instance_flow_ver, instance_id, instance_trace, newApprove, newTrace, now, old_cc_users, old_inbox_users, old_outbox_users, permissions, r, setObj, space, space_id, space_user, space_user_org_info, tempUsers, terminate_reason, traces;
      terminate_reason = instance_from_client["terminate_reason"];
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      flow_id = instance.flow;
      space = uuflowManager.getSpace(space_id);
      flow = uuflowManager.getFlow(flow_id);
      uuflowManager.isInstancePending(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_flow_ver = null;
      flow_ver_end_step = null;
      flow_vers = new Array();
      flow_vers.push(flow.current);
      flow_vers = flow_vers.concat(flow.historys);
      instance_flow_ver = _.find(flow_vers, function (f_ver) {
        return f_ver._id === instance.flow_version;
      });

      if (!instance_flow_ver) {
        throw new Meteor.Error('error!', "未找到申请单对应流程版本");
      }

      flow_ver_end_step = _.find(instance_flow_ver.steps, function (f_step) {
        return f_step.step_type === "end";
      });
      permissions = permissionManager.getFlowPermissions(flow_id, current_user);
      now = new Date();
      setObj = new Object();

      if (permissions.includes("admin") || space.admins.includes(current_user) || instance.submitter === current_user || instance.applicant === current_user) {
        if (!terminate_reason) {
          throw new Meteor.Error('error!', "还未填写强制结束申请单的理由，操作失败");
        }

        instance_trace = _.find(instance.traces, function (trace) {
          return trace.is_finished === false;
        });
        traces = instance.traces;
        i = 0;

        while (i < traces.length) {
          if (traces[i].is_finished === false) {
            traces[i].is_finished = true;
            traces[i].finish_date = now;
            h = 0;

            while (h < traces[i].approves.length) {
              if (traces[i].approves[h].is_finished === false) {
                traces[i].approves[h].is_finished = true;
                traces[i].approves[h].finish_date = now;
                traces[i].approves[h].judge = null;
                traces[i].approves[h].description = null;
              }

              h++;
            }

            newApprove = new Object();
            newApprove._id = new Mongo.ObjectID()._str;
            newApprove.instance = instance_id;
            newApprove.trace = instance_trace._id;
            newApprove.is_finished = true;
            newApprove.user = current_user;
            newApprove.user_name = current_user_info.name;
            newApprove.handler = current_user;
            newApprove.handler_name = current_user_info.name;
            newApprove.handler_organization = space_user_org_info["organization"];
            newApprove.handler_organization_name = space_user_org_info["organization_name"];
            newApprove.handler_organization_fullname = space_user_org_info["organization_fullname"];
            newApprove.start_date = now;
            newApprove.finish_date = now;
            newApprove.due_date = instance_trace.due_date;
            newApprove.read_date = now;
            newApprove.judge = "terminated";
            newApprove.is_read = true;
            newApprove.description = terminate_reason;
            newApprove.is_error = false;
            newApprove.values = new Object();
            newApprove.cost_time = newApprove.finish_date - newApprove.start_date;
            traces[i].approves.push(newApprove);
          }

          i++;
        }

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [instance_trace._id];
        newTrace.is_finished = true;
        newTrace.step = flow_ver_end_step._id;
        newTrace.name = flow_ver_end_step.name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.judge = "terminated";
        setObj.state = "completed";
        setObj.final_decision = "terminated";
        old_inbox_users = instance.inbox_users;
        old_cc_users = instance.cc_users;
        old_outbox_users = instance.outbox_users;
        tempUsers = new Array();

        _.each(instance_trace.approves, function (nft_approve) {
          tempUsers.push(nft_approve.user);
          return tempUsers.push(nft_approve.handler);
        });

        setObj.outbox_users = _.uniq(instance.outbox_users.concat(tempUsers));
        setObj.inbox_users = new Array();
        setObj.cc_users = new Array();
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.current_step_name = flow_ver_end_step.name;
        setObj.current_step_auto_submit = false;
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          ins = uuflowManager.getInstance(instance_id);
          pushManager.send_instance_notification("submit_terminate_applicant", ins, terminate_reason, current_user_info);

          if (old_inbox_users) {
            _.each(_.uniq(old_inbox_users.concat(old_cc_users)), function (user_id) {
              return pushManager.send_message_to_specifyUser("terminate_approval", user_id);
            });
          }

          return pushManager.triggerWebhook(ins.flow, ins, {}, 'terminate', current_user, []);
        }
      }
    });

    pushManager.send_message_current_user(current_user_info);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_reassign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_reassign.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/reassign', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, approve_users_handlers, assignee_appr, current_space_user, current_user_organization, i, inbox_users, inbox_users_from_client, ins, instance, instance_id, last_trace, last_trace_from_client, new_inbox_users, not_in_inbox_users, now, permissions, r, reassign_reason, setObj, space, space_id;

      instance_id = instance_from_client['_id'];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      uuflowManager.isInstancePending(instance);
      last_trace_from_client = _.last(instance_from_client["traces"]);
      last_trace = _.find(instance.traces, function (t) {
        return t._id === last_trace_from_client["_id"];
      });

      if (last_trace.is_finished === true) {
        return;
      }

      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne({
        _id: space_id
      }, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      inbox_users = instance.inbox_users;
      inbox_users_from_client = instance_from_client["inbox_users"];
      reassign_reason = instance_from_client["reassign_reason"];
      not_in_inbox_users = _.difference(inbox_users, inbox_users_from_client);
      new_inbox_users = _.difference(inbox_users_from_client, inbox_users);

      if (not_in_inbox_users.length === 0 && new_inbox_users.length === 0) {
        return;
      }

      setObj = new Object();
      now = new Date();
      i = 0;
      approve_users_handlers = [];

      while (i < last_trace.approves.length) {
        if (not_in_inbox_users.includes(last_trace.approves[i].handler)) {
          if (last_trace.approves[i].is_finished === false && last_trace.approves[i].type !== "cc" && last_trace.approves[i].type !== "distribute") {
            last_trace.approves[i].is_finished = true;
            last_trace.approves[i].finish_date = now;
            last_trace.approves[i].judge = "terminated";
            last_trace.approves[i].description = "";
            last_trace.approves[i].cost_time = last_trace.approves[i].finish_date - last_trace.approves[i].start_date;
            approve_users_handlers.push(last_trace.approves[i].user);
            approve_users_handlers.push(last_trace.approves[i].handler);
          }
        }

        i++;
      }

      current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
      current_user_organization = db.organizations.findOne({
        _id: current_space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      assignee_appr = new Object();
      assignee_appr._id = new Mongo.ObjectID()._str;
      assignee_appr.instance = last_trace.instance;
      assignee_appr.trace = last_trace._id;
      assignee_appr.is_finished = true;
      assignee_appr.user = current_user;
      assignee_appr.user_name = current_user_info.name;
      assignee_appr.handler = current_user;
      assignee_appr.handler_name = current_user_info.name;
      assignee_appr.handler_organization = current_space_user.organization;
      assignee_appr.handler_organization_name = current_user_organization.name;
      assignee_appr.handler_organization_fullname = current_user_organization.fullname;
      assignee_appr.start_date = now;
      assignee_appr.finish_date = now;
      assignee_appr.due_date = last_trace.due_date;
      assignee_appr.read_date = now;
      assignee_appr.judge = "reassigned";
      assignee_appr.is_read = true;
      assignee_appr.description = reassign_reason;
      assignee_appr.is_error = false;
      assignee_appr.values = new Object();
      assignee_appr.cost_time = assignee_appr.finish_date - assignee_appr.start_date;
      last_trace.approves.push(assignee_appr);

      _.each(new_inbox_users, function (user_id) {
        var agent, handler_id, handler_info, new_appr, new_user, space_user, user_organization;
        new_user = db.users.findOne(user_id, {
          fields: {
            name: 1
          }
        });
        space_user = uuflowManager.getSpaceUser(space_id, user_id);
        user_organization = db.organizations.findOne(space_user.organization, {
          fields: {
            name: 1,
            fullname: 1
          }
        });
        new_appr = new Object();
        new_appr._id = new Mongo.ObjectID()._str;
        new_appr.instance = last_trace.instance;
        new_appr.trace = last_trace._id;
        new_appr.is_finished = false;
        new_appr.user = user_id;
        new_appr.user_name = new_user.name;
        handler_id = user_id;
        handler_info = new_user;
        agent = uuflowManager.getAgent(space_id, user_id);

        if (agent) {
          inbox_users_from_client[inbox_users_from_client.indexOf(user_id)] = agent;
          handler_id = agent;
          handler_info = db.users.findOne({
            _id: agent
          }, {
            fields: {
              name: 1
            }
          });
          new_appr.agent = agent;
        }

        new_appr.handler = handler_id;
        new_appr.handler_name = handler_info.name;
        new_appr.handler_organization = space_user.organization;
        new_appr.handler_organization_name = user_organization.name;
        new_appr.handler_organization_fullname = user_organization.fullname;
        new_appr.from_user = current_user;
        new_appr.from_user_name = current_user_info.name;
        new_appr.type = "reassign";
        new_appr.start_date = now;
        new_appr.due_date = last_trace.due_date;
        new_appr.is_read = false;
        new_appr.is_error = false;
        new_appr.values = new Object();
        uuflowManager.setRemindInfo(instance.values, new_appr);
        return last_trace.approves.push(new_appr);
      });

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(approve_users_handlers);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.inbox_users = inbox_users_from_client;
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj["traces.$.approves"] = last_trace.approves;
      r = db.instances.update({
        _id: instance_id,
        "traces._id": last_trace._id
      }, {
        $set: setObj
      });

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, reassign_reason, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'reassign', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_relocate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_relocate.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/relocate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, ah, approve_users, current_setp, current_setp_type, current_space_user, current_user_organization, flow, h, i, inbox_users, ins, instance, instance_id, l, last_trace, newTrace, new_inbox_users, next_step, next_step_name, next_step_type, not_in_inbox_users, now, permissions, r, relocate_appr, relocate_comment, relocate_inbox_users, relocate_next_step, sameTraces, setObj, signShowApproveId, space, space_id, ta, ti, traces;

      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      last_trace = _.last(instance.traces);
      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne(instance.space, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      space_id = instance.space;
      instance_id = last_trace.instance;
      inbox_users = instance.inbox_users;
      relocate_inbox_users = instance_from_client["relocate_inbox_users"];
      relocate_comment = instance_from_client["relocate_comment"];
      relocate_next_step = instance_from_client["relocate_next_step"];
      not_in_inbox_users = _.difference(inbox_users, relocate_inbox_users);
      new_inbox_users = _.difference(relocate_inbox_users, inbox_users);
      approve_users = [];
      flow = uuflowManager.getFlow(instance.flow);
      next_step = uuflowManager.getStep(instance, flow, relocate_next_step);
      next_step_type = next_step.step_type;
      next_step_name = next_step.name;
      current_setp = uuflowManager.getStep(instance, flow, last_trace.step);
      current_setp_type = current_setp.step_type;
      traces = instance.traces;
      setObj = new Object();
      setObj.values = uuflowManager.getUpdatedValues(instance);
      now = new Date();
      i = 0;

      while (i < traces.length) {
        if (traces[i]._id === last_trace._id) {
          if (!traces[i].approves) {
            traces[i].approves = new Array();
          }

          h = 0;

          while (h < traces[i].approves.length) {
            if (traces[i].approves[h].is_finished === false && traces[i].approves[h].type !== "cc" && traces[i].approves[h].type !== "distribute") {
              traces[i].approves[h].start_date = now;
              traces[i].approves[h].finish_date = now;
              traces[i].approves[h].read_date = now;
              traces[i].approves[h].is_error = false;
              traces[i].approves[h].is_read = true;
              traces[i].approves[h].is_finished = true;
              traces[i].approves[h].judge = "terminated";
              traces[i].approves[h].cost_time = traces[i].approves[h].finish_date - traces[i].approves[h].start_date;
              approve_users.push(traces[i].approves[h].user);

              if (traces[i].approves[h].sign_show === true) {
                ta = traces[i].approves[h];
                sameTraces = _.filter(traces, function (t) {
                  return t.step === traces[i].step;
                });
                l = sameTraces.length - 1;
                signShowApproveId = null;

                while (l > -1) {
                  _.each(sameTraces[l].approves, function (a) {
                    if (a.user === ta.user && a.judge !== "terminated" && a.description && !signShowApproveId) {
                      return signShowApproveId = a._id;
                    }
                  });

                  l--;
                }

                if (signShowApproveId) {
                  ti = 0;

                  while (ti < traces.length) {
                    ah = 0;

                    while (ah < traces[ti].approves.length) {
                      if (traces[ti].approves[ah]._id === signShowApproveId) {
                        traces[ti].approves[ah].sign_show = true;
                        traces[i].approves[h].sign_show = false;
                      }

                      ah++;
                    }

                    ti++;
                  }
                }
              }
            }

            h++;
          }

          current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
          current_user_organization = db.organizations.findOne(current_space_user.organization, {
            fields: {
              name: 1,
              fullname: 1
            }
          });
          relocate_appr = new Object();
          relocate_appr._id = new Mongo.ObjectID()._str;
          relocate_appr.instance = instance_id;
          relocate_appr.trace = traces[i]._id;
          relocate_appr.is_finished = true;
          relocate_appr.user = current_user;
          relocate_appr.user_name = current_user_info.name;
          relocate_appr.handler = current_user;
          relocate_appr.handler_name = current_user_info.name;
          relocate_appr.handler_organization = current_space_user.organization;
          relocate_appr.handler_organization_name = current_user_organization.name;
          relocate_appr.handler_organization_fullname = current_user_organization.fullname;
          relocate_appr.start_date = now;
          relocate_appr.finish_date = now;
          relocate_appr.due_date = traces[i].due_date;
          relocate_appr.read_date = now;
          relocate_appr.judge = "relocated";
          relocate_appr.is_read = true;
          relocate_appr.description = relocate_comment;
          relocate_appr.is_error = false;
          relocate_appr.values = new Object();
          relocate_appr.cost_time = relocate_appr.finish_date - relocate_appr.start_date;
          traces[i].approves.push(relocate_appr);
          traces[i].is_finished = true;
          traces[i].finish_date = now;
          traces[i].judge = "relocated";
        }

        i++;
      }

      if (next_step_type === "end") {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = true;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.approves = [];
        setObj.state = "completed";
        setObj.inbox_users = [];
        setObj.final_decision = "terminated";
        setObj.finish_date = new Date();
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = false;
      } else {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = false;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(next_step.timeout_hours);
        newTrace.approves = [];

        _.each(relocate_inbox_users, function (next_step_user_id, idx) {
          var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
          newApprove = new Object();
          newApprove._id = new Mongo.ObjectID()._str;
          newApprove.instance = instance_id;
          newApprove.trace = newTrace._id;
          newApprove.is_finished = false;
          newApprove.user = next_step_user_id;
          user_info = db.users.findOne(next_step_user_id, {
            fields: {
              name: 1
            }
          });
          newApprove.user_name = user_info.name;
          handler_id = next_step_user_id;
          handler_info = user_info;
          agent = uuflowManager.getAgent(space_id, next_step_user_id);

          if (agent) {
            relocate_inbox_users[idx] = agent;
            handler_id = agent;
            handler_info = db.users.findOne({
              _id: agent
            }, {
              fields: {
                name: 1
              }
            });
            newApprove.agent = agent;
          }

          newApprove.handler = handler_id;
          newApprove.handler_name = handler_info.name;
          next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
          next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
          newApprove.handler_organization = next_step_user_org_info["organization"];
          newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
          newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
          newApprove.start_date = now;
          newApprove.due_date = newTrace.due_date;
          newApprove.is_read = false;
          newApprove.is_error = false;
          newApprove.values = new Object();
          uuflowManager.setRemindInfo(instance.values, newApprove);
          return newTrace.approves.push(newApprove);
        });

        setObj.inbox_users = relocate_inbox_users;
        setObj.state = "pending";
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, next_step.lines);
      }

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(inbox_users).concat(approve_users);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj.is_archived = false;
      traces.push(newTrace);
      setObj.traces = traces;

      if (setObj.state === 'completed') {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });
      } else {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj,
          $unset: {
            finish_date: 1
          }
        });
      }

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, relocate_comment, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'relocate', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_archive.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_archive.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/archive', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var instance, instance_id, setObj, space, space_id, space_user;
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      uuflowManager.isInstanceFinishedAndNotArchieved(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      uuflowManager.isInstanceSubmitterOrApplicantOrSpaceAdmin(instance, current_user, space);
      setObj = new Object();
      setObj.is_archived = true;
      setObj.modified = new Date();
      setObj.modified_by = current_user;
      return db.instances.update({
        _id: instance_id
      }, {
        $set: setObj
      });
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_export.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_export.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/instances", function (req, res, next) {
    var current_user_info, e, ejs, ejsLint, end_date, error_obj, fields, fileName, flow, flow_id, form, form_name, ins_to_xls, lang, last_month_date, now, query, ret, space_id, start_date, str, table_fields, template, timezoneoffset, type;

    try {
      current_user_info = uuflowManager.check_authorization(req);
      query = req.query;
      space_id = query.space_id;
      flow_id = query.flow_id;
      type = parseInt(query.type);
      timezoneoffset = parseInt(query.timezoneoffset);
      flow = db.flows.findOne({
        _id: flow_id
      }, {
        fields: {
          form: 1
        }
      });
      form = db.forms.findOne({
        _id: flow.form
      }, {
        fields: {
          name: 1,
          'current.fields': 1
        }
      });
      form_name = form.name;
      fields = form.current.fields;
      table_fields = new Array();

      _.each(form.current.fields, function (field) {
        if (field.type === "table") {
          return table_fields.push(field);
        }
      });

      ins_to_xls = new Array();
      start_date = null;
      end_date = null;
      now = new Date();

      if (type === 0) {
        start_date = new Date(now.getFullYear(), now.getMonth(), 1);
        ins_to_xls = db.instances.find({
          space: space_id,
          flow: flow_id,
          state: {
            $ne: "draft"
          },
          submit_date: {
            $gte: start_date
          }
        }, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 1) {
        last_month_date = new Date(new Date(now.getFullYear(), now.getMonth(), 1) - 1000 * 60 * 60 * 24);
        start_date = new Date(last_month_date.getFullYear(), last_month_date.getMonth(), 1);
        end_date = new Date(now.getFullYear(), now.getMonth(), 1);
        ins_to_xls = db.instances.find({
          space: space_id,
          flow: flow_id,
          state: {
            $ne: "draft"
          },
          $and: [{
            submit_date: {
              $gte: start_date
            }
          }, {
            submit_date: {
              $lte: end_date
            }
          }]
        }, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 2) {
        start_date = new Date(now.getFullYear(), 0, 1);
        ins_to_xls = db.instances.find({
          space: space_id,
          flow: flow_id,
          state: {
            $ne: "draft"
          },
          submit_date: {
            $gte: start_date
          }
        }, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 3) {
        ins_to_xls = db.instances.find({
          space: space_id,
          flow: flow_id,
          state: {
            $ne: "draft"
          }
        }, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      }

      ejs = require('ejs');
      str = Assets.getText('server/ejs/export_instances.ejs');
      ejsLint = require('ejs-lint');
      error_obj = ejsLint.lint(str, {});

      if (error_obj) {
        console.error("===/api/workflow/export:");
        console.error(error_obj);
      }

      template = ejs.compile(str);
      lang = 'en';

      if (current_user_info.locale === 'zh-cn') {
        lang = 'zh-CN';
      }

      ret = template({
        lang: lang,
        timezoneoffset: timezoneoffset,
        form_name: form_name,
        fields: fields,
        table_fields: table_fields,
        ins_to_xls: ins_to_xls
      });
      fileName = "SteedOSWorkflow_" + moment().format('YYYYMMDDHHmm') + ".xls";
      res.setHeader("Content-type", "application/octet-stream");
      res.setHeader("Content-Disposition", "attachment;filename=" + encodeURI(fileName));
      return res.end(ret);
    } catch (error) {
      e = error;
      console.error(e.stack);
      return res.end(e.message);
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_space_changeset.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_space_changeset.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/uf/space/changeset', function (req, res, next) {
  var auth_token, data, e, formids, is_admin, query, sync_token;

  try {
    query = req.query;
    auth_token = db.auth_tokens.findOne({
      auth_token: query.auth_token
    });

    if (!auth_token || !auth_token.enabled) {
      throw new Meteor.Error(401, 'Unauthorized');
    }

    sync_token = query["sync_token"];
    formids = query["formids"];
    is_admin = query["is_admin"];
    data = uuflowManager.get_SpaceChangeSet(formids, is_admin, sync_token);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: data
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_retrieve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_retrieve.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/retrieve', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, flow, handler_info, i, ins, instance, instance_id, last_trace, last_trace_id, newApprove, newTrace, now, old_inbox_users, org_info, previous_step, previous_trace, previous_trace_approves, previous_trace_id, previous_trace_name, previous_trace_step_id, r, retrieve_approve, retrieve_comment, retrieve_type, setObj, space_id, space_user, the_trace, traces;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      retrieve_comment = instance_from_client['retrieve_comment'];

      if (!instance.outbox_users.includes(current_user) && instance.submitter !== current_user && instance.applicant !== current_user) {
        throw new Meteor.Error('error', '当前用户不符合取回条件');
      }

      retrieve_type = "";
      traces = instance.traces;
      last_trace = _.last(traces);
      last_trace_id = last_trace._id;
      previous_trace_id = last_trace.previous_trace_ids[0];
      previous_trace = _.find(traces, function (t) {
        return t._id === previous_trace_id;
      });
      previous_trace_step_id = previous_trace.step;
      previous_trace_name = previous_trace.name;
      flow = uuflowManager.getFlow(instance.flow);
      previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);

      if (previous_step.step_type === "counterSign") {
        throw new Meteor.Error('error', '会签不能取回');
      }

      previous_trace_approves = _.filter(previous_trace.approves, function (a) {
        return a.type !== 'cc' && a.type !== 'distribute' && a.type !== 'forward' && ['approved', 'submitted', 'rejected'].includes(a.judge);
      });

      if (previous_trace_approves.length === 1 && (previous_trace_approves[0].user === current_user || previous_trace_approves[0].handler === current_user)) {
        retrieve_type = 'normal';
      }

      i = traces.length;
      retrieve_approve = {};

      while (i > 0) {
        _.each(traces[i - 1].approves, function (a) {
          if (a.type === 'cc' && a.is_finished === true && a.user === current_user) {
            retrieve_type = 'cc';
            return retrieve_approve = a;
          }
        });

        if (retrieve_type === 'cc') {
          break;
        }

        i--;
      }

      if (retrieve_type === 'normal') {
        flow = uuflowManager.getFlow(instance.flow);
        previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);
        space_id = instance.space;
        instance_id = instance._id;
        old_inbox_users = instance.inbox_users;
        setObj = new Object();
        now = new Date();

        _.each(traces, function (t) {
          var current_space_user, current_user_organization, retrieve_appr;

          if (t._id === last_trace_id) {
            if (!t.approves) {
              t.approves = new Array();
            }

            _.each(t.approves, function (appr) {
              if (appr.is_finished === false && appr.type !== "cc") {
                appr.start_date = now;
                appr.finish_date = now;
                appr.read_date = now;
                appr.is_error = false;
                appr.is_read = true;
                appr.is_finished = true;
                appr.judge = "terminated";
                return appr.cost_time = appr.finish_date - appr.start_date;
              }
            });

            current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
            current_user_organization = db.organizations.findOne(current_space_user.organization, {
              fields: {
                name: 1,
                fullname: 1
              }
            });
            retrieve_appr = new Object();
            retrieve_appr._id = new Mongo.ObjectID()._str;
            retrieve_appr.instance = instance_id;
            retrieve_appr.trace = t._id;
            retrieve_appr.is_finished = true;
            retrieve_appr.user = current_user;
            retrieve_appr.user_name = current_user_info.name;
            retrieve_appr.handler = current_user;
            retrieve_appr.handler_name = current_user_info.name;
            retrieve_appr.handler_organization = current_space_user.organization;
            retrieve_appr.handler_organization_name = current_user_organization.name;
            retrieve_appr.handler_organization_fullname = current_user_organization.fullname;
            retrieve_appr.start_date = now;
            retrieve_appr.finish_date = now;
            retrieve_appr.due_date = t.due_date;
            retrieve_appr.read_date = now;
            retrieve_appr.judge = "retrieved";
            retrieve_appr.is_read = true;
            retrieve_appr.description = retrieve_comment;
            retrieve_appr.is_error = false;
            retrieve_appr.values = new Object();
            retrieve_appr.cost_time = retrieve_appr.finish_date - retrieve_appr.start_date;
            t.approves.push(retrieve_appr);
            t.is_finished = true;
            t.finish_date = now;
            return t.judge = "retrieved";
          }
        });

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace_id];
        newTrace.is_finished = false;
        newTrace.step = previous_trace_step_id;
        newTrace.name = previous_trace_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(previous_step.timeout_hours);
        newTrace.approves = [];
        newApprove = new Object();
        newApprove._id = new Mongo.ObjectID()._str;
        newApprove.instance = instance_id;
        newApprove.trace = newTrace._id;
        newApprove.is_finished = false;
        newApprove.user = current_user;
        handler_info = db.users.findOne(current_user, {
          fields: {
            name: 1
          }
        });
        newApprove.user_name = handler_info.name;
        newApprove.handler = current_user;
        newApprove.handler_name = handler_info.name;
        space_user = uuflowManager.getSpaceUser(space_id, current_user);
        org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
        newApprove.handler_organization = org_info["organization"];
        newApprove.handler_organization_name = org_info["organization_name"];
        newApprove.handler_organization_fullname = org_info["organization_fullname"];
        newApprove.start_date = now;
        newApprove.due_date = newTrace.due_date;
        newApprove.is_read = false;
        newApprove.is_error = false;
        newApprove.values = new Object();
        uuflowManager.setRemindInfo(instance.values, newApprove);
        newTrace.approves.push(newApprove);
        setObj.inbox_users = [current_user];
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.current_step_name = previous_trace_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, previous_step.lines);
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);

          _.each(old_inbox_users, function (user_id) {
            if (user_id !== current_user) {
              return pushManager.send_message_to_specifyUser("current_user", user_id);
            }
          });

          ins = uuflowManager.getInstance(instance_id);
          return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, ins.inbox_users);
        }
      } else if (retrieve_type === 'cc') {
        setObj = new Object();
        now = new Date();
        instance_id = instance._id;
        the_trace = _.find(traces, function (t) {
          return t._id === retrieve_approve.trace;
        });

        _.each(the_trace.approves, function (a) {
          if (a._id === retrieve_approve._id) {
            a.is_finished = false;
            a.finish_date = void 0;
            a.judge = void 0;
            return a.cost_time = void 0;
          }
        });

        cc_users = instance.cc_users;
        cc_users.push(current_user);
        setObj.modified = now;
        setObj.modified_by = current_user;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.cc_users = cc_users;
        setObj['traces.$.approves'] = the_trace.approves;
        r = db.instances.update({
          _id: instance_id,
          'traces._id': retrieve_approve.trace
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);
        }

        ins = uuflowManager.getInstance(instance_id);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, [current_user]);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add('post', '/api/workflow/forward', function (req, res, next) {
  try {
    var current_user_info = uuflowManager.check_authorization(req);
    var current_user_id = current_user_info._id;
    var hashData = req.body;
    var instance_id = hashData.instance_id;
    var space_id = hashData.space_id;
    var flow_id = hashData.flow_id;
    var hasSaveInstanceToAttachment = hashData.hasSaveInstanceToAttachment;
    var description = hashData.description;
    var isForwardAttachments = hashData.isForwardAttachments;
    var selectedUsers = hashData.selectedUsers;
    var action_type = hashData.action_type;
    var related = hashData.related;
    var from_approve_id = hashData.from_approve_id;
    check(instance_id, String);
    check(space_id, String);
    check(flow_id, String);
    check(hasSaveInstanceToAttachment, Boolean);
    check(description, String);
    check(isForwardAttachments, Boolean);
    check(selectedUsers, Array);
    check(action_type, Match.OneOf('forward', 'distribute'));
    if (action_type == "distribute") check(from_approve_id, String);
    var ins = db.instances.findOne(instance_id);
    var old_space_id = ins.space;
    var flow = db.flows.findOne(flow_id);
    var space = db.spaces.findOne(space_id);

    if (!ins || !flow || !space) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var forward_users = new Array();

    if (_.isEmpty(selectedUsers)) {
      forward_users = [current_user_id];
    } else {
      forward_users = selectedUsers;
    } // 校验分发对象是否有分发流程的提交权限


    var no_permission_user_ids = new Array();

    _.each(forward_users, function (uid) {
      var permissions = permissionManager.getFlowPermissions(flow_id, uid);

      if (!permissions.includes("add")) {
        // throw new Meteor.Error('error!', "该申请人没有提交此申请单的权限。")
        no_permission_user_ids.push(uid);
      }
    });

    if (!_.isEmpty(no_permission_user_ids)) {
      var no_permission_users_name = new Array();
      db.users.find({
        _id: {
          $in: no_permission_user_ids
        }
      }, {
        fields: {
          name: 1
        }
      }).forEach(function (u) {
        no_permission_users_name.push(u.name);
      });
      throw new Meteor.Error('no_permission', "该提交人没有提交此申请单的权限。", no_permission_users_name.join(','));
    }

    var new_ins_ids = new Array();
    var current_trace = null;

    if (action_type == "distribute") {
      _.each(ins.traces, function (t) {
        if (!current_trace) {
          _.each(t.approves, function (a) {
            if (!current_trace) {
              if (a._id == from_approve_id) current_trace = t;
            }
          });
        }
      });
    } else {
      current_trace = _.last(ins.traces);
    }

    var current_trace_id = current_trace._id;
    var forward_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    var set_obj = new Object(); // 计算values

    var old_values = ins.values,
        new_values = {};
    var form = db.forms.findOne(flow.form);
    var fields = form.current.fields || [];
    var old_form = db.forms.findOne(ins.form);
    var old_form_version = ins.form_version,
        old_fields = [],
        common_fields = [];
    var select_to_input_fields = [];

    if (old_form.current._id == old_form_version) {
      old_fields = old_form.current.fields;
    } else {
      if (old_form.historys) {
        old_form.historys.forEach(function (h) {
          if (h._id == old_form_version) old_fields = h.fields;
        });
      }
    }

    fields.forEach(function (field) {
      var exists_field = _.find(old_fields, function (f) {
        return f.type == field.type && f.code == field.code;
      });

      if (exists_field) common_fields.push(field);

      var select_input_field = _.find(old_fields, function (f) {
        return f.type == 'select' && field.type == 'input' && f.code == field.code;
      });

      if (select_input_field) select_to_input_fields.push(select_input_field);
    });
    select_to_input_fields.forEach(function (field) {
      if (old_values[field.code]) {
        new_values[field.code] = old_values[field.code];
      }
    });
    common_fields.forEach(function (field) {
      if (field.type == 'section') {
        if (field.fields) {
          field.fields.forEach(function (f) {
            // 跨工作区转发不复制选人选组
            if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
              return;
            }

            var key = f.code;
            var old_v = old_values[key];

            if (old_v) {
              // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
              if (f.type == 'select' || f.type == 'radio') {
                var options = f.options.split('\n');
                if (!options.includes(old_v)) return;
              }

              if (f.type == 'multiSelect') {
                var options = f.options.split('\n');
                var old_multiSelected = old_v.split(',');

                var new_multiSelected = _.intersection(options, old_multiSelected);

                old_v = new_multiSelected.join(',');
              }

              new_values[key] = old_v;
            }
          });
        }
      } else if (field.type == 'table') {
        if (!_.isEmpty(old_values[field.code])) {
          new_values[field.code] = new Array();
          old_values[field.code].forEach(function (old_table_row_values) {
            var new_table_row_values = {};

            if (!_.isEmpty(field.fields)) {
              field.fields.forEach(function (f) {
                // 跨工作区转发不复制选人选组
                if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
                  return;
                }

                var key = f.code;
                var old_v = old_table_row_values[key];

                if (old_v) {
                  // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
                  if (f.type == 'select' || f.type == 'radio') {
                    var options = f.options.split('\n');
                    if (!options.includes(old_v)) return;
                  }

                  if (f.type == 'multiSelect') {
                    var options = f.options.split('\n');
                    var old_multiSelected = old_v.split(',');

                    var new_multiSelected = _.intersection(options, old_multiSelected);

                    old_v = new_multiSelected.join(',');
                  }

                  new_table_row_values[key] = old_v;
                }
              });
            }

            if (!_.isEmpty(new_table_row_values)) {
              new_values[field.code].push(new_table_row_values);
            }
          });
        }
      } else {
        // 跨工作区转发不复制选人选组
        if (['group', 'user'].includes(field.type) && old_space_id != space_id) {
          return;
        }

        var key = field.code;
        var old_v = old_values[key];

        if (old_v) {
          // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
          if (field.type == 'select' || field.type == 'radio') {
            var options = field.options.split('\n');
            if (!options.includes(old_v)) return;
          }

          if (field.type == 'multiSelect') {
            var options = field.options.split('\n');
            var old_multiSelected = old_v.split(',');

            var new_multiSelected = _.intersection(options, old_multiSelected);

            old_v = new_multiSelected.join(',');
          }

          new_values[key] = old_v;
        }
      }
    }); //如果是分发，则value中的record_need、FONDSID不需要分发到新申请单中

    if (action_type === 'distribute') {
      delete new_values.record_need;
      delete new_values.FONDSID;
    } // 计算申请单标题


    var instance_name = "";
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      var iscript = name_forumla.replace(/\{/g, "(new_values['").replace(/\}/g, "'] || '')");
      var rev = eval(iscript);
      instance_name = rev || flow.name;
    } else {
      instance_name = flow.name;
    } // instance中记录当前步骤名称 #1314


    var start_step = _.find(flow.current.steps, function (step) {
      return step.step_type == 'start';
    }); // 新建申请单时，instances记录流程名称、流程分类名称 #1313


    var category_name = "";

    if (form.category) {
      var category = uuflowManager.getCategory(form.category);
      if (category) category_name = category.name;
    }

    _.each(forward_users, function (user_id) {
      var user_info = db.users.findOne(user_id);
      var space_user = db.space_users.findOne({
        space: space_id,
        user: user_id
      }, {
        fields: {
          organization: 1
        }
      });
      var space_user_org_info = db.organizations.findOne({
        _id: space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var now = new Date();
      var ins_obj = {};
      var agent = uuflowManager.getAgent(space_id, user_id);
      var handler_id = user_id;
      var handler_info = user_info;
      var handler_space_user = space_user;
      var handler_org_info = space_user_org_info;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent);
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
      }

      ins_obj._id = db.instances._makeNewID();
      ins_obj.space = space_id;
      ins_obj.flow = flow_id;
      ins_obj.flow_version = flow.current._id;
      ins_obj.form = flow.form;
      ins_obj.form_version = flow.current.form_version;
      ins_obj.name = instance_name;
      ins_obj.submitter = handler_id;
      ins_obj.submitter_name = handler_info.name;
      ins_obj.applicant = user_id;
      ins_obj.applicant_name = user_info.name;
      ins_obj.applicant_organization = space_user.organization;
      ins_obj.applicant_organization_name = space_user_org_info.name;
      ins_obj.applicant_organization_fullname = space_user_org_info.fullname;
      ins_obj.state = "draft";
      ins_obj.code = "";
      ins_obj.is_archived = false;
      ins_obj.is_deleted = false;
      ins_obj.created = now;
      ins_obj.created_by = current_user_id;
      ins_obj.modified = now;
      ins_obj.modified_by = current_user_id;
      ins_obj.inbox_users = [handler_id];
      ins_obj.values = new_values;

      if (action_type == 'distribute') {
        // 解决多次分发看不到正文、附件问题
        if (ins.distribute_from_instance) {
          ins_obj.distribute_from_instance = ins.distribute_from_instance;
        } else {
          ins_obj.distribute_from_instance = instance_id;
        }

        ins_obj.distribute_from_instances = _.clone(ins.distribute_from_instances) || [];
        ins_obj.distribute_from_instances.push(instance_id);

        if (related) {
          ins_obj.related_instances = [instance_id];
        }
      } else if (action_type == 'forward') {
        ins_obj.forward_from_instance = instance_id;
      } // 新建Trace


      var trace_obj = {};
      trace_obj._id = new Mongo.ObjectID()._str;
      trace_obj.instance = ins_obj._id;
      trace_obj.is_finished = false; // 当前最新版flow中开始节点的step_id

      var step_id, step_name, can_edit_main_attach, can_edit_normal_attach;
      flow.current.steps.forEach(function (step) {
        if (step.step_type == "start") {
          step_id = step._id;
          step_name = step.name;
          can_edit_main_attach = step.can_edit_main_attach;
          can_edit_normal_attach = step.can_edit_normal_attach;
        }
      });
      trace_obj.step = step_id;
      trace_obj.start_date = now;
      trace_obj.name = step_name; // 新建Approve

      var appr_obj = {};
      appr_obj._id = new Mongo.ObjectID()._str;
      appr_obj.instance = ins_obj._id;
      appr_obj.trace = trace_obj._id;
      appr_obj.is_finished = false;
      appr_obj.user = user_id;
      appr_obj.user_name = user_info.name;
      appr_obj.handler = handler_id;
      appr_obj.handler_name = handler_info.name;
      appr_obj.handler_organization = handler_space_user.organization;
      appr_obj.handler_organization_name = handler_org_info.name;
      appr_obj.handler_organization_fullname = handler_org_info.fullname;
      appr_obj.type = "draft";
      appr_obj.start_date = now;
      appr_obj.read_date = now;
      appr_obj.is_read = false;
      appr_obj.is_error = false;
      appr_obj.values = new_values;

      if (agent) {
        appr_obj.agent = agent;
      }

      trace_obj.approves = [appr_obj];
      ins_obj.traces = [trace_obj];
      if (flow.auto_remind == true) ins_obj.auto_remind = true;
      ins_obj.current_step_name = start_step.name;
      ins_obj.flow_name = flow.name;
      if (category_name) ins_obj.category_name = category.name;
      ins_obj.category = category._id;
      new_ins_id = db.instances.insert(ins_obj); // 复制附件

      var collection = cfs.instances; //将原表单内容存储为第一个附件

      if (hasSaveInstanceToAttachment) {
        // try {
        instanceHtml = InstanceReadOnlyTemplate.getInstanceHtml(user_info, space_id, ins, {
          absolute: true
        });
        var instanceFile = new FS.File();
        instanceFile.attachData(Buffer.from(instanceHtml, "utf-8"), {
          type: "text/html"
        }, function (error) {
          if (error) {
            throw new Meteor.Error(error.error, error.reason);
          }

          instanceFile.name(ins.name + ".html");
          instanceFile.size(instanceHtml.length);
          var metadata = {
            owner: user_id,
            owner_name: user_info.name,
            space: space_id,
            instance: new_ins_id,
            approve: appr_obj._id,
            current: true
          };
          instanceFile.metadata = metadata;
          var fileObj = collection.insert(instanceFile);
          fileObj.update({
            $set: {
              'metadata.parent': fileObj._id
            }
          });
        }); // } catch (e) {
        //     console.error(e);
        // }
      }

      if (isForwardAttachments && action_type == 'forward') {
        var files = collection.find({
          'metadata.instance': instance_id,
          'metadata.current': true
        });
        files.forEach(function (f) {
          // 判断新的流程开始节点是否有编辑正文和编辑附件权限
          if (f.metadata.main == true) {
            if (can_edit_main_attach != true && can_edit_normal_attach != true) return;
          } else {
            if (can_edit_normal_attach != true) return;
          }

          var newFile = new FS.File();
          newFile.attachData(f.createReadStream('instances'), {
            type: f.original.type
          }, function (err) {
            if (err) {
              throw new Meteor.Error(err.error, err.reason);
            }

            newFile.name(f.name());
            newFile.size(f.size());
            var metadata = {
              owner: user_id,
              owner_name: user_info.name,
              space: space_id,
              instance: new_ins_id,
              approve: appr_obj._id,
              current: true
            };

            if (f.metadata.main == true && can_edit_main_attach == true) {
              metadata.main = true;
            }

            newFile.metadata = metadata;
            var fileObj = collection.insert(newFile);
            fileObj.update({
              $set: {
                'metadata.parent': fileObj._id
              }
            });
          });
        });
      } // 给当前的申请单增加转发记录


      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': instance_id,
        'trace': current_trace_id,
        'is_finished': true,
        'user': user_id,
        'user_name': user_info.name,
        'handler': user_id,
        'handler_name': user_info.name,
        'handler_organization': space_user.organization,
        'handler_organization_name': space_user_org_info.name,
        'handler_organization_fullname': space_user_org_info.fullname,
        'type': action_type,
        'start_date': new Date(),
        'finish_date': new Date(),
        'is_read': false,
        'judge': 'submitted',
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'forward_space': space_id,
        'forward_instance': new_ins_id,
        'description': description,
        'from_approve_id': from_approve_id
      };
      forward_approves.push(appr);
      new_ins_ids.push(new_ins_id);
      pushManager.send_message_to_specifyUser("current_user", user_id);
    });

    set_obj.modified = new Date();
    set_obj.modified_by = current_user_id;
    var r = db.instances.update({
      _id: instance_id,
      "traces._id": current_trace_id
    }, {
      $set: set_obj,
      $addToSet: {
        'traces.$.approves': {
          $each: forward_approves
        }
      }
    });

    if (r) {
      _.each(current_trace.approves, function (a, idx) {
        if (a._id == from_approve_id) {
          var update_read = {};
          update_read["traces.$.approves." + idx + ".read_date"] = new Date();
          db.instances.update({
            _id: instance_id,
            "traces._id": current_trace_id
          }, {
            $set: update_read
          });
        }
      });
    }

    JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (e) {
    console.error(e.stack);
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/workflow/instance/:instanceId', function (req, res, next) {
  var box, current_user_id, current_user_info, e, flowId, ins, insId, permissions, redirectTo, ref, ref1, ref2, space, spaceId;

  try {
    current_user_info = uuflowManager.check_authorization(req, res);
    current_user_id = current_user_info._id;
    insId = req.params.instanceId;
    ins = db.instances.findOne(insId, {
      fields: {
        space: 1,
        flow: 1,
        state: 1,
        inbox_users: 1,
        cc_users: 1,
        outbox_users: 1,
        submitter: 1,
        applicant: 1
      }
    });

    if (!ins) {
      throw new Meteor.Error('error', 'instanceId is wrong or instance not exists.');
    }

    spaceId = ins.space;
    flowId = ins.flow;

    if (db.space_users.find({
      space: spaceId,
      user: current_user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'user is not belong to this space.');
    }

    box = '';

    if (((ref = ins.inbox_users) != null ? ref.includes(current_user_id) : void 0) || ((ref1 = ins.cc_users) != null ? ref1.includes(current_user_id) : void 0)) {
      box = 'inbox';
    } else if ((ref2 = ins.outbox_users) != null ? ref2.includes(current_user_id) : void 0) {
      box = 'outbox';
    } else if (ins.state === 'draft' && ins.submitter === current_user_id) {
      box = 'draft';
    } else if (ins.state === 'pending' && (ins.submitter === current_user_id || ins.applicant === current_user_id)) {
      box = 'pending';
    } else if (ins.state === 'completed' && ins.submitter === current_user_id) {
      box = 'completed';
    } else {
      permissions = permissionManager.getFlowPermissions(flowId, current_user_id);
      space = db.spaces.findOne(spaceId, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user_id)) {
        throw new Meteor.Error('error', "no permission.");
      }

      box = 'monitor';
    }

    redirectTo = Meteor.absoluteUrl("workflow/space/" + spaceId + "/" + box + "/" + insId);
    res.setHeader("Location", redirectTo);
    res.writeHead(302);
    res.end();
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_pending.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_pending.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/pending 获取待办文件

@apiDescription 获取当前用户的待办事项列表

@apiName getInbox

@apiGroup Workflow

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
	{
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
	{
		"status": "success",
		"data": [
			{
				"id": "g7wokXNkR9yxHvA4D",
				"start_date": "2017-11-23T02:28:53.164Z",
				"flow_name": "正文流程",
				"space_name": "审批王",
				"name": "正文流程 1",
				"applicant_name": null,
				"applicant_organization_name": "审批王",
				"submit_date": "2017-07-25T06:36:48.492Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-11-23T02:28:53.164Z",
				"is_read": false,
				"values": {}
			},
			{
				"id": "WqKSrWQoywgJaMp9k",
				"start_date": "2017-08-17T07:38:35.420Z",
				"flow_name": "正文\n",
				"space_name": "审批王",
				"name": "正文\n 1",
				"applicant_name": "殷亮辉",
				"applicant_organization_name": "审批王",
				"submit_date": "2017-06-27T10:26:19.468Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-08-17T07:38:35.421Z",
				"is_read": true,
				"values": {}
			}
		]
	}
 */JsonRoutes.add('get', '/api/workflow/open/pending', function (req, res, next) {
  var attach, e, is_read, limit, no_limit_count, query, ref, ref1, ref2, ref3, ref4, ref5, result_instances, space, space_id, space_names, special_user_id, start_date, u, uid, user_id, userid, username, workflow_categories;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    space_id = req.headers['x-space-id'] || ((ref = req.query) != null ? ref.spaceId : void 0);

    if (!space_id) {
      throw new Meteor.Error('error', 'need space_id');
    }

    user_id = req.userId;

    if (!user_id) {
      throw new Meteor.Error('error', 'Not logged in');
    }

    if (db.users.find({
      _id: user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'can not find user');
    }

    limit = ((ref1 = req.query) != null ? ref1.limit : void 0) || 500;
    limit = parseInt(limit);
    username = (ref2 = req.query) != null ? ref2.username : void 0;
    userid = (ref3 = req.query) != null ? ref3.userid : void 0;
    attach = (ref4 = req.query) != null ? ref4.attach : void 0;
    workflow_categories = (ref5 = req.query) != null ? ref5.workflow_categories : void 0;
    space = uuflowManager.getSpace(space_id);
    special_user_id;

    if (space.admins.includes(user_id)) {
      if (userid) {
        if (db.users.find({
          _id: userid
        }).count() < 1) {
          throw new Meteor.Error('error', "can not find user by userid: " + userid);
        }

        special_user_id = userid;
      } else if (username) {
        u = db.users.findOne({
          username: username
        }, {
          fields: {
            _id: 1
          }
        });

        if (_.isEmpty(u)) {
          throw new Meteor.Error('error', "can not find user by username: " + username);
        }

        special_user_id = u._id;
      }
    }

    result_instances = new Array();
    is_read = false;
    start_date = '';
    uid = user_id;
    query = {
      $or: [{
        inbox_users: user_id
      }, {
        cc_users: user_id
      }]
    };

    if (special_user_id) {
      uid = special_user_id;
      query = {
        space: space_id,
        $or: [{
          inbox_users: special_user_id
        }, {
          cc_users: special_user_id
        }]
      };
    }

    if (workflow_categories) {
      query.category = {
        $in: workflow_categories.split(',')
      };
    }

    space_names = {};
    space_names[space._id] = space.name;

    if (limit > 0) {
      db.instances.find(query, {
        sort: {
          modified: -1
        },
        limit: limit
      }).forEach(function (i) {
        var h, ref6, ref7;

        if ((ref6 = i.inbox_users) != null ? ref6.includes(uid) : void 0) {
          _.each(i.traces, function (t) {
            if (t.is_finished === false) {
              return _.each(t.approves, function (a) {
                if (a.user === uid && a.type !== 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        } else {
          _.each(i.traces, function (t) {
            if (!start_date && t.approves) {
              return _.each(t.approves, function (a) {
                if (!start_date && a.user === uid && a.type === 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        }

        if (!space_names[i.space]) {
          space_names[i.space] = (ref7 = db.spaces.findOne(i.space, {
            fields: {
              name: 1
            }
          })) != null ? ref7.name : void 0;
        }

        h = new Object();
        h["id"] = i["_id"];
        h["start_date"] = start_date;
        h["flow_name"] = i.flow_name;
        h["space_name"] = space_names[i.space];
        h["name"] = i["name"];
        h["applicant_name"] = i["applicant_name"];
        h["applicant_organization_name"] = i["applicant_organization_name"];
        h["submit_date"] = i["submit_date"];
        h["step_name"] = i.current_step_name;
        h["space_id"] = i.space;
        h["modified"] = i["modified"];
        h["is_read"] = is_read;
        h["values"] = i["values"];

        if (attach === 'true') {
          h.attachments = cfs.instances.find({
            'metadata.instance': i._id,
            'metadata.current': true,
            "metadata.is_private": {
              $ne: true
            }
          }, {
            fields: {
              copies: 0
            }
          }).fetch();
        }

        return result_instances.push(h);
      });
    }

    no_limit_count = db.instances.find(query).count();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result_instances,
        count: no_limit_count
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.reason
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"export_table_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/export_table_template.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies;
Cookies = require("cookies");
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/talbe_template", function (req, res, next) {
    var authToken, cookies, data, fileName, flow, flowId, form, ref, ref1, space, userId;
    cookies = new Cookies(req, res);

    if (req.body) {
      userId = req.body["X-User-Id"];
      authToken = req.body["X-Auth-Token"];
    }

    if (!userId || !authToken) {
      userId = cookies.get("X-User-Id");
      authToken = cookies.get("X-Auth-Token");
    }

    if (!(userId && authToken)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Missing X-Auth-Token",
        "success": false
      }));
      return;
    }

    flowId = (ref = req.query) != null ? ref.flow : void 0;
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        space: 1,
        form: 1,
        name: 1
      }
    });
    form = db.forms.findOne({
      _id: flow.form
    }, {
      fields: {
        space: 1,
        "current._id": 1
      }
    });

    if (_.isEmpty(flow)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Invalid formId",
        "success": false
      }));
      return;
    } else {
      if (!Steedos.isSpaceAdmin(flow.space, userId)) {
        res.writeHead(401);
        res.end(JSON.stringify({
          "error": "Validate Request -- No permission",
          "success": false
        }));
        return;
      }

      space = db.spaces.findOne(flow.space, {
        fields: {
          is_paid: 1
        }
      });

      if (!(space != null ? space.is_paid : void 0)) {
        JsonRoutes.sendResult(res, {
          code: 404,
          data: {
            "error": "Validate Request -- Non-paid space.",
            "success": false
          }
        });
        return;
      }
    }

    data = TemplateManager.handleTableTemplate({
      form: flow.form,
      form_version: form != null ? (ref1 = form.current) != null ? ref1._id : void 0 : void 0
    }, true);
    fileName = flow.name;
    res.setHeader('Content-type', 'application/x-msdownload');
    res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(fileName) + '.html');
    return res.end(data);
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_drafts.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/drafts 新建申请单

@apiName createInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "applicant": 申请人Id,
    "values": {
        "fields1" : 字段值,
        "fields2" : 字段值,
        ...
    }
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}

@apiErrorExample {json} error-Response:
{
    "status": "error",
    "data": {...}
}
 */JsonRoutes.add('post', '/api/workflow/open/drafts', function (req, res, next) {
  var applicant, applicantInfo, applicant_id, applicant_username, approve, approves, current_user_info, e, flow, flow_id, hashData, instance_from_client, new_ins, new_ins_id, space_id, space_user, space_user_org_info, trace, traces, user_id;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    user_id = req.userId;
    current_user_info = db.users.findOne({
      _id: user_id
    });
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header x_space_id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user_info._id);
    hashData = req.body;

    if (!hashData["flow"]) {
      throw new Meteor.Error('error', 'flow is null');
    }

    flow_id = hashData["flow"];
    applicant_id = hashData["applicant"];
    applicant_username = hashData["applicant_username"];
    instance_from_client = new Object();
    flow = db.flows.findOne({
      _id: flow_id
    }, {
      fields: {
        space: 1,
        'current._id': 1
      }
    });

    if (!flow) {
      throw new Meteor.Error('error', 'flow is not exists');
    }

    if (space_id !== flow.space) {
      throw new Meteor.Error('error', 'flow is not belong to this space');
    }

    if (db.space_users.find({
      space: space_id,
      user: current_user_info._id
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is not a member of this space');
    }

    instance_from_client["space"] = space_id;
    instance_from_client["flow"] = flow_id;
    instance_from_client["flow_version"] = flow.current._id;
    applicant = null;

    if (applicant_id || applicant_username) {
      if (applicant_id) {
        applicant = db.users.findOne({
          _id: applicant_id
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant is wrong');
        }
      } else if (applicant_username) {
        applicant = db.users.findOne({
          username: applicant_username
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant_username is wrong');
        }
      }

      space_user = db.space_users.findOne({
        space: space_id,
        user: applicant._id
      });

      if (!space_user) {
        throw new Meteor.Error('error', 'applicant is not a member of this space');
      }

      if (space_user.user_accepted !== true) {
        throw new Meteor.Error('error', 'applicant is disabled in this space');
      }

      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_from_client["applicant"] = applicant._id;
      instance_from_client["applicant_name"] = applicant.name;
      instance_from_client["applicant_organization"] = space_user_org_info["organization"];
      instance_from_client["applicant_organization_fullname"] = space_user_org_info["organization_fullname"];
      instance_from_client["applicant_organization_name"] = space_user_org_info["organization_name"];
    }

    applicantInfo = applicant || current_user_info;
    traces = [];
    trace = new Object();
    approves = [];
    approve = new Object();
    approve["values"] = hashData["values"];
    approves.push(approve);
    trace["approves"] = approves;
    traces.push(trace);
    instance_from_client["traces"] = traces;
    instance_from_client["inbox_users"] = [applicantInfo._id];
    new_ins_id = uuflowManager.create_instance(instance_from_client, applicantInfo);
    new_ins = db.instances.findOne(new_ins_id);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: new_ins
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/get/:ins_id 查看申请单详情

@apiName getInstance

@apiGroup Workflow

@apiPermission 工作区的管理员

@apiParam {String} ins_id 申请单Id
@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}
 */JsonRoutes.add('get', '/api/workflow/open/get/:ins_id', function (req, res, next) {
  var current_user, e, ins_id, instance, perm_users, permissions, space, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = db.instances.findOne(ins_id);

    if (!instance) {
      throw new Meteor.Error('error', 'can not find instance');
    }

    if (db.space_users.find({
      space: instance.space,
      user: current_user
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is wrong');
    }

    perm_users = new Array();
    perm_users.push(instance.submitter);
    perm_users.push(instance.applicant);

    if (instance.outbox_users) {
      perm_users = perm_users.concat(instance.outbox_users);
    }

    if (instance.inbox_users) {
      perm_users = perm_users.concat(instance.inbox_users);
    }

    space = db.spaces.findOne({
      _id: instance.space
    }, {
      fields: {
        admins: 1
      }
    });
    perm_users = perm_users.concat(space.admins);
    permissions = permissionManager.getFlowPermissions(instance.flow, current_user);

    if (!perm_users.includes(current_user) && !permissions.includes("monitor") && !permissions.includes("admin")) {
      throw new Meteor.Error('error', 'no permission');
    }

    instance.attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instance
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_submit.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/submit/:ins_id 提交申请单

@apiDescription 暂不支持开始节点下一节点为条件的情况

@apiName submitInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/submit/:ins_id', function (req, res, next) {
  var current_user, current_user_info, e, flow, form, ins_id, instance, nextSteps, next_step_id, next_user_ids, r, require_but_empty_fields, result, space_id, step, submitter, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = uuflowManager.getInstance(ins_id);
    uuflowManager.isInstanceDraft(instance);

    if (space_id !== instance["space"]) {
      throw new Meteor.Error('error', 'instance is not belong to this space');
    }

    values = instance["traces"][0]["approves"][0].values;
    form = uuflowManager.getForm(instance.form);
    require_but_empty_fields = uuflowManager.checkValueFieldsRequire(values, form, instance.form_version);

    if (require_but_empty_fields.length > 0) {
      if (require_but_empty_fields.length > 1) {
        throw new Meteor.Error('error', 'fields <' + require_but_empty_fields.join(",") + '> are required');
      } else if (require_but_empty_fields.length = 1) {
        throw new Meteor.Error('error', 'field <' + require_but_empty_fields.join(",") + '> is required');
      }
    }

    flow = uuflowManager.getFlow(instance.flow);
    step = uuflowManager.getStep(instance, flow, instance["traces"][0].step);
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, "submitted");

    if (nextSteps.length < 1) {
      throw new Meteor.Error('error', 'can not find next steps');
    }

    if (nextSteps.length > 1) {
      throw new Meteor.Error('error', 'next step not uniq');
    }

    next_step_id = nextSteps[0];
    next_user_ids = getHandlersManager.getHandlers(ins_id, next_step_id) || [];

    if (next_user_ids.length > 1) {
      throw new Meteor.Error('error', 'next step handler not uniq');
    }

    instance["traces"][0]["approves"][0]["next_steps"] = [{
      'step': next_step_id,
      'users': next_user_ids
    }];
    result = new Object();
    submitter = db.users.findOne(instance.submitter);

    if (!submitter) {
      throw new Meteor.Error('error', 'can not find submitter');
    }

    r = uuflowManager.submit_instance(instance, submitter);

    if (r.alerts) {
      result = r;
    } else {
      result = db.instances.findOne(ins_id);

      if (result) {
        result.attachments = cfs.instances.find({
          'metadata.instance': ins_id,
          'metadata.current': true,
          "metadata.is_private": {
            $ne: true
          }
        }, {
          fields: {
            copies: 0
          }
        }).fetch();
      }
    }

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_save.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_save.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/save/:ins_id 暂存申请单

@apiName saveInstances

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/save/:ins_id', function (req, res, next) {
  var current_step, current_trace, current_user, current_user_info, e, flow, ins_id, instance, result, setObj, space_id, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    values = req.body;

    if (!values) {
      throw new Meteor.Error('error', 'need values');
    }

    current_trace = null;
    setObj = new Object();
    instance = uuflowManager.getInstance(ins_id);
    flow = uuflowManager.getFlow(instance.flow);

    _.each(instance.traces, function (t) {
      if (t.is_finished !== true) {
        return current_trace = t;
      }
    });

    current_step = uuflowManager.getStep(instance, flow, current_trace.step);

    if (current_step.step_type === "counterSign") {
      throw new Meteor.Error('error', '会签步骤不能修改表单值');
    }

    _.each(current_trace.approves, function (a) {
      if (a.is_finished !== true && a.type !== "cc") {
        return a.values = values;
      }
    });

    setObj.modified = new Date();
    setObj["traces.$.approves"] = current_trace.approves;
    db.instances.update({
      _id: ins_id,
      'traces._id': current_trace._id
    }, {
      $set: setObj
    });
    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get_by_stepname.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get_by_stepname.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/getbystepname 根据步骤名称获取申请单

@apiName getInstanceByStepName

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "stepname": 步骤名称
}

@apiSuccessExample {json} Success-Response:
{
	"status": "success",
	"data": [
		{
			instance
		},
		{
			instance
		}
	]
}
 */JsonRoutes.add('post', '/api/workflow/open/getbystepname', function (req, res, next) {
  var current_user, current_user_info, e, flow, hashData, instances, space_id, stepname;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body;
    stepname = hashData["stepname"];
    flow = hashData["flow"];

    if (!stepname) {
      throw new Meteor.Error('error', 'need stepname');
    }

    if (!flow) {
      throw new Meteor.Error('error', 'need flow');
    }

    instances = db.instances.find({
      space: space_id,
      flow: flow,
      state: 'pending',
      traces: {
        $elemMatch: {
          is_finished: false,
          name: stepname
        }
      }
    }, {
      fields: {
        inbox_uers: 0,
        cc_users: 0,
        outbox_users: 0,
        attachments: 0,
        traces: 0
      }
    }).fetch();
    instances.forEach(function (instance) {
      return instance.attachments = cfs.instances.find({
        'metadata.instance': instance._id,
        'metadata.current': true,
        "metadata.is_private": {
          $ne: true
        }
      }, {
        fields: {
          copies: 0
        }
      }).fetch();
    });
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_cfs.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_cfs.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Content-Type：application/json
form-data 格式:
fd = new FormData;
fd.append("file", file);

fd.append("is_private", false);

if (isAddVersion) {
	fd.append("isAddVersion", isAddVersion);
	fd.append("parent", attach_parent_id);
}

if (isMainAttach) {
	fd.append("main", true);
}
 */var Busboy, Fiber;
Busboy = require('busboy');
Fiber = require('fibers');

JsonRoutes.parseFiles = function (req, res, next) {
  var busboy, files, image;
  files = [];
  image = {};

  if (req.method === "POST") {
    busboy = new Busboy({
      headers: req.headers
    });
    busboy.on("file", function (fieldname, file, filename, encoding, mimetype) {
      var buffers;
      image.mimeType = mimetype;
      image.encoding = encoding;
      image.filename = filename;
      buffers = [];
      file.on('data', function (data) {
        return buffers.push(data);
      });
      return file.on('end', function () {
        image.data = Buffer.concat(buffers);
        return files.push(image);
      });
    });
    busboy.on("field", function (fieldname, value) {
      return req.body[fieldname] = value;
    });
    busboy.on("finish", function () {
      req.files = files;
      return Fiber(function () {
        return next();
      }).run();
    });
    return req.pipe(busboy);
  } else {
    return next();
  }
};

JsonRoutes.add('post', '/api/workflow/open/cfs/:ins_id', function (req, res, next) {
  var approve_id, current_user, current_user_info, e, ins_id, instance, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能上传');
    }

    approve_id = instance.traces[0].approves[0]._id;
    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    return JsonRoutes.parseFiles(req, res, function () {
      var collection, newFile;
      collection = cfs.instances;

      if (req.files && req.files[0]) {
        if (req.files[0].data.length > 100 * 1024 * 1024) {
          JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              errors: [{
                errorMessage: "超过上传附件大小限制(100M)"
              }]
            }
          });
          return;
        }

        newFile = new FS.File();
        return newFile.attachData(req.files[0].data, {
          type: req.files[0].mimeType
        }, function (err) {
          var body, e, fileObj, filename, metadata, parent, r, result, size;
          filename = req.files[0].filename;

          if (["image.jpg", "image.gif", "image.jpeg", "image.png"].includes(filename.toLowerCase())) {
            filename = "image-" + moment(new Date()).format('YYYYMMDDHHmmss') + "." + filename.split('.').pop();
          }

          body = req.body;
          body['owner'] = instance.submitter;
          body['owner_name'] = instance.submitter_name;
          body['space'] = space_id;
          body['instance'] = ins_id;
          body['approve'] = approve_id;

          try {
            if (body && (body['upload_from'] === "IE" || body['upload_from'] === "node")) {
              filename = decodeURIComponent(filename);
            }
          } catch (error) {
            e = error;
            console.error(filename);
            console.error(e);
            filename = filename.replace(/%/g, "-");
          }

          newFile.name(filename);

          if (body && body['owner'] && body['owner_name'] && body['space'] && body['instance'] && body['approve']) {
            parent = '';
            metadata = {
              owner: body['owner'],
              owner_name: body['owner_name'],
              space: body['space'],
              instance: body['instance'],
              approve: body['approve'],
              current: true
            };

            if (body["is_private"] && body["is_private"].toLocaleLowerCase() === "true") {
              metadata.is_private = true;
            } else {
              metadata.is_private = false;
            }

            if (body['main'] === "true") {
              metadata.main = true;
            }

            if (body['isAddVersion'] && body['parent']) {
              parent = body['parent'];
            }

            if (parent) {
              r = collection.update({
                'metadata.parent': parent,
                'metadata.current': true
              }, {
                $unset: {
                  'metadata.current': ''
                }
              });

              if (r) {
                metadata.parent = parent;

                if (body['locked_by'] && body['locked_by_name']) {
                  metadata.locked_by = body['locked_by'];
                  metadata.locked_by_name = body['locked_by_name'];
                }

                newFile.metadata = metadata;
                fileObj = collection.insert(newFile);

                if (body["overwrite"] && body["overwrite"].toLocaleLowerCase() === "true") {
                  collection.remove({
                    'metadata.instance': body['instance'],
                    'metadata.parent': parent,
                    'metadata.owner': body['owner'],
                    'metadata.approve': body['approve'],
                    'metadata.current': {
                      $ne: true
                    }
                  });
                }
              }
            } else {
              newFile.metadata = metadata;
              fileObj = collection.insert(newFile);
              fileObj.update({
                $set: {
                  'metadata.parent': fileObj._id
                }
              });
            }
          } else {
            fileObj = collection.insert(newFile);
          }

          size = fileObj.original.size;

          if (!size) {
            size = 1024;
          }

          result = new Object();
          result = {
            attach_id: fileObj._id,
            size: size
          };
          res.setHeader("x-amz-version-id", fileObj._id);
          return JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              status: "success",
              data: result
            }
          });
        });
      } else {
        JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            errors: [{
              errorMessage: "need file"
            }]
          }
        });
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("delete", "/api/workflow/open/cfs/:ins_id", function (req, res, next) {
  var attach_id, collection, current_user, current_user_info, e, file, hashData, ins_id, instance, result, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能删除附件');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body || {};
    attach_id = hashData["attach_id"];

    if (!attach_id) {
      throw new Meteor.Error('error', 'can not find attach_id');
    }

    collection = cfs.instances;
    file = collection.findOne({
      _id: attach_id,
      'metadata.instance': ins_id
    });

    if (file) {
      file.remove();
    } else {
      throw new Meteor.Error('error', '此附件不属于此申请单，或已被删除');
    }

    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("get", "/api/workflow/open/cfs/:attach_id", function (req, res, next) {
  var attach_id, current_user, current_user_info, e, space_id;

  try {
    attach_id = req.params.attach_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    res.statusCode = 302;
    res.setHeader("Location", Steedos.absoluteUrl("api/files/instances/") + attach_id + "?download=true");
    return res.end();
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_refill.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_refill", function (req, res, next) {
  var approve, columns, forward_ins, forward_ins_values, original_ins, original_ins_fields, original_ins_form, original_ins_id, original_subtable_fields, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, row_data, subTable, table_data, trace, traces;
  console.log("=========回填子表==========");
  console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
  console.log("=========分发回填的列==========");
  console.log("req?.query?.column", req != null ? (ref1 = req.query) != null ? ref1.column : void 0 : void 0);
  columns = req != null ? (ref2 = req.query) != null ? ref2.column.split(';') : void 0 : void 0;
  console.log("columns", columns);
  forward_ins = req != null ? (ref3 = req.body) != null ? ref3.instance : void 0 : void 0;
  subTable = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

  if ((forward_ins != null ? forward_ins.state : void 0) === "completed" && (forward_ins != null ? (ref5 = forward_ins.distribute_from_instances) != null ? ref5.length : void 0 : void 0) > 0 && subTable && columns) {
    forward_ins_values = forward_ins != null ? forward_ins.values : void 0;
    original_ins_id = _.last(forward_ins != null ? forward_ins.distribute_from_instances : void 0);
    original_ins = db.instances.findOne(original_ins_id);
    original_ins_form = db.forms.findOne(original_ins != null ? original_ins.form : void 0);
    original_ins_fields = [];
    original_subtable_fields = [];
    console.log("original_ins_form?.current?._id", original_ins_form != null ? (ref6 = original_ins_form.current) != null ? ref6._id : void 0 : void 0);
    console.log("original_ins?.form_version", original_ins != null ? original_ins.form_version : void 0);

    if ((original_ins != null ? original_ins.form_version : void 0) === (original_ins_form != null ? (ref7 = original_ins_form.current) != null ? ref7._id : void 0 : void 0)) {
      original_ins_fields = (ref8 = original_ins_form.current) != null ? ref8.fields : void 0;
      original_ins_fields.forEach(function (original_ins_field) {
        console.log("original_ins_field", original_ins_field != null ? original_ins_field.code : void 0);

        if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
          return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
        }
      });
    } else {
      if ((original_ins_form != null ? (ref9 = original_ins_form.historys) != null ? ref9.length : void 0 : void 0) > 0) {
        original_ins_form.historys.forEach(function (oh) {
          if ((original_ins != null ? original_ins.form_version : void 0) === oh._id) {
            original_ins_fields = oh != null ? oh.fields : void 0;
            return original_ins_fields.forEach(function (original_ins_field) {
              if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
                return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
              }
            });
          }
        });
      }
    }

    console.log("original_subtable_fields", original_subtable_fields != null ? original_subtable_fields.length : void 0);

    if (original_subtable_fields) {
      traces = original_ins != null ? original_ins.traces : void 0;
      trace = traces[traces.length - 1];
      approve = trace != null ? trace.approves[0] : void 0;
      table_data = (approve != null ? approve.values[subTable] : void 0) || [];
      row_data = {};
      columns.forEach(function (column) {
        return row_data[column] = forward_ins_values[column] || "";
      });

      if (row_data && row_data !== {}) {
        table_data.push(row_data);
        traces[traces.length - 1].approves[0].values[subTable] = table_data;
        console.log(traces[traces.length - 1].approves[0].values[subTable]);
        db.instances.update(original_ins_id, {
          $set: {
            'traces': traces
          }
        });
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'success': '回填成功'
          }
        });
      } else {
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'info': '回填数据为空'
          }
        });
      }
    } else {
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'error': '原申请单无相关子表'
        }
      });
    }
  } else {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'success': '申请单未结束'
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_table_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_table_refill.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_table_refill", function (req, res, next) {
  var a_table, a_table_values, approve, column_list, columns, d_ins, d_ins_fields, d_ins_form, d_ins_values, d_match_col, d_match_col_field, d_match_col_fields, d_subtable_fields, d_table, d_table_values, e, o_ins, o_ins_fields, o_ins_form, o_ins_id, o_match_col, o_match_col_field, o_match_col_fields, o_subtable_fields, o_table, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref3, ref4, ref5, ref6, ref7, ref8, ref9, table_data, trace, traces;

  try {
    console.log("=========原表子表==========");
    console.log("req?.query?.oTable", req != null ? (ref = req.query) != null ? ref.oTable : void 0 : void 0);
    console.log("=========现表子表==========");
    console.log("req?.query?.dTable", req != null ? (ref1 = req.query) != null ? ref1.dTable : void 0 : void 0);
    console.log("=========原表单的子表匹配列==========");
    console.log("req?.query?.oMatchCol", req != null ? (ref2 = req.query) != null ? ref2.oMatchCol : void 0 : void 0);
    console.log("=========现表单的子表匹配列==========");
    console.log("req?.query?.dMatchCol", req != null ? (ref3 = req.query) != null ? ref3.dMatchCol : void 0 : void 0);
    console.log("=========需要回填的列==========");
    console.log("req?.query?.refillCol", req != null ? (ref4 = req.query) != null ? ref4.refillCol : void 0 : void 0);
    d_ins = req != null ? (ref5 = req.body) != null ? ref5.instance : void 0 : void 0;

    if ((d_ins != null ? d_ins.state : void 0) === "completed") {
      if (req != null ? (ref6 = req.query) != null ? ref6.oTable : void 0 : void 0) {
        o_table = req != null ? (ref7 = req.query) != null ? ref7.oTable : void 0 : void 0;

        if (req != null ? (ref8 = req.query) != null ? ref8.dTable : void 0 : void 0) {
          d_table = req != null ? (ref9 = req.query) != null ? ref9.dTable : void 0 : void 0;
        } else {
          d_table = o_table;
        }

        if (req != null ? (ref10 = req.query) != null ? ref10.aTable : void 0 : void 0) {
          a_table = req != null ? (ref11 = req.query) != null ? ref11.aTable : void 0 : void 0;
        }

        if (req != null ? (ref12 = req.query) != null ? ref12.oMatchCol : void 0 : void 0) {
          o_match_col = req != null ? (ref13 = req.query) != null ? ref13.oMatchCol : void 0 : void 0;

          if (req != null ? (ref14 = req.query) != null ? ref14.dMatchCol : void 0 : void 0) {
            d_match_col = req != null ? (ref15 = req.query) != null ? ref15.dMatchCol : void 0 : void 0;
          } else {
            d_match_col = o_match_col;
          }

          columns = (req != null ? (ref16 = req.query) != null ? ref16.refillCol.split(';') : void 0 : void 0) || [];
          console.log("columns", columns);

          if (columns || columns.length < 1) {
            console.log("======================");
            console.log(d_table, o_match_col, columns);
            d_ins_values = d_ins != null ? d_ins.values : void 0;
            o_ins_id = _.last(d_ins != null ? d_ins.distribute_from_instances : void 0);
            o_ins = db.instances.findOne(o_ins_id);
            o_ins_form = db.forms.findOne(o_ins != null ? o_ins.form : void 0);
            d_ins_form = db.forms.findOne(d_ins != null ? d_ins.form : void 0);
            o_ins_fields = [];
            o_subtable_fields = [];
            d_ins_fields = [];
            d_subtable_fields = [];
            column_list = [];
            d_table_values = [];

            if ((o_ins != null ? o_ins.form_version : void 0) === (o_ins_form != null ? (ref17 = o_ins_form.current) != null ? ref17._id : void 0 : void 0)) {
              o_ins_fields = o_ins_form != null ? (ref18 = o_ins_form.current) != null ? ref18.fields : void 0 : void 0;
              o_ins_fields.forEach(function (o_ins_field) {
                if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                  return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                }
              });
            } else {
              if ((o_ins_form != null ? (ref19 = o_ins_form.historys) != null ? ref19.length : void 0 : void 0) > 0) {
                o_ins_form.historys.forEach(function (oh) {
                  if ((o_ins != null ? o_ins.form_version : void 0) === oh._id) {
                    o_ins_fields = oh != null ? oh.fields : void 0;
                    return o_ins_fields.forEach(function (o_ins_field) {
                      if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                        return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                      }
                    });
                  }
                });
              }
            }

            if ((d_ins != null ? d_ins.form_version : void 0) === (d_ins_form != null ? (ref20 = d_ins_form.current) != null ? ref20._id : void 0 : void 0)) {
              d_ins_fields = d_ins_form != null ? (ref21 = d_ins_form.current) != null ? ref21.fields : void 0 : void 0;
              d_ins_fields.forEach(function (d_ins_field) {
                if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                  return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                }
              });
            } else {
              if ((d_ins_form != null ? (ref22 = d_ins_form.historys) != null ? ref22.length : void 0 : void 0) > 0) {
                d_ins_form.historys.forEach(function (dh) {
                  if ((d_ins != null ? d_ins.form_version : void 0) === dh._id) {
                    d_ins_fields = dh != null ? dh.fields : void 0;
                    return d_ins_fields.forEach(function (d_ins_field) {
                      if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                        return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                      }
                    });
                  }
                });
              }
            }

            if (o_subtable_fields.length === 0) {
              console.log("o_subtable_fields", o_subtable_fields);
              throw new Meteor.Error('forward table refill error!', '原申请单无对应子表');
            }

            if (d_subtable_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单无对应子表');
            }

            d_table_values = (d_ins != null ? d_ins.values[d_table] : void 0) || [];

            if (a_table) {
              a_table_values = (d_ins != null ? d_ins.values[a_table] : void 0) || [];

              if (a_table_values && (a_table_values != null ? a_table_values.length : void 0) === (d_table_values != null ? d_table_values.length : void 0)) {
                a_table_values.forEach(function (a_row, index) {
                  var key, results, value;
                  results = [];

                  for (key in meteorBabelHelpers.sanitizeForInObject(a_row)) {
                    value = a_row[key];
                    results.push(d_table_values[index][key] = value);
                  }

                  return results;
                });
              }
            }

            if (d_table_values.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表数据为空');
            }

            o_match_col_fields = o_subtable_fields.filter(function (m) {
              return m.code === o_match_col;
            });
            d_match_col_fields = d_subtable_fields.filter(function (m) {
              return m.code === d_match_col;
            });

            if (o_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '原申请单子表无对应匹配列');
            }

            if (d_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应匹配列');
            }

            o_match_col_field = o_match_col_fields[0];
            d_match_col_field = d_match_col_fields[0];

            if ((o_match_col_field != null ? o_match_col_field.type : void 0) !== (d_match_col_field != null ? d_match_col_field.type : void 0)) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单和原申请单子表的匹配列字段不一致');
            }

            columns.forEach(function (column) {
              var col, cols, d_col, d_col_fields, o_col, o_col_fields;
              cols = column.split('-') || [];

              if (cols.length === 2) {
                o_col = cols[0];
                d_col = cols[1];
                o_col_fields = o_subtable_fields.filter(function (m) {
                  return m.code === o_col;
                });
                d_col_fields = d_subtable_fields.filter(function (m) {
                  return m.code === d_col;
                });

                if (o_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '原申请单子表无对应回填列');
                }

                if (d_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应回填列');
                }

                if ((o_col_fields != null ? o_col_fields.type : void 0) !== (d_col_fields != null ? d_col_fields.type : void 0)) {
                  throw new Meteor.Error('forward table refill error!', '回填列字段类型不一致');
                }

                col = {
                  o_col: o_col,
                  d_col: d_col
                };
                return column_list.push(col);
              } else {
                throw new Meteor.Error('forward table refill error!', '回填列不匹配');
              }
            });
            traces = o_ins != null ? o_ins.traces : void 0;
            trace = traces[traces.length - 1];
            approve = trace != null ? trace.approves[0] : void 0;
            table_data = (approve != null ? approve.values[o_table] : void 0) || [];
            d_table_values.forEach(function (d_row) {
              var count, has_obj, row_data;
              has_obj = false;
              count = -1;
              table_data.forEach(function (o_row, index) {
                if (o_row[o_match_col] === d_row[d_match_col]) {
                  has_obj = true;
                  return count = index;
                }
              });

              if (has_obj === true) {
                return column_list.forEach(function (col) {
                  return table_data[count][col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
              } else {
                row_data = {};
                row_data[o_match_col] = d_row[d_match_col];
                column_list.forEach(function (col) {
                  return row_data[col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
                return table_data.push(row_data);
              }
            });
            traces[traces.length - 1].approves[0].values = o_ins != null ? o_ins.values : void 0;
            traces[traces.length - 1].approves[0].values[o_table] = table_data;
            db.instances.update(o_ins_id, {
              $set: {
                'traces': traces
              }
            });
            JsonRoutes.sendResult(res, {
              code: 200,
              data: {
                'success': '回填成功'
              }
            });
          } else {
            throw new Meteor.Error('forward table refill error!', 'webhook未配置子表回填列字段 columns 值');
          }
        } else {
          throw new Meteor.Error('forward table refill error!', 'webhook未配置匹配列字段 oMatchCol 值');
        }
      } else {
        throw new Meteor.Error('forward table refill error!', 'webhook未配置原表单子表 oTable 值');
      }
    } else {
      throw new Meteor.Error('forward table refill error!', '申请单未结束');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_sub_table_sort.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_sub_table_sort.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/sub_table_sort", function (req, res, next) {
  var e, ins, new_table_values, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, sort_col, sub_table, sub_table_values, sum_col;

  try {
    console.log("=========子表==========");
    console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
    console.log("=========子表总分列==========");
    console.log("req?.query?.sumCol", req != null ? (ref1 = req.query) != null ? ref1.sumCol : void 0 : void 0);
    console.log("=========子表排序列==========");
    console.log("req?.query?.sortCol", req != null ? (ref2 = req.query) != null ? ref2.sortCol : void 0 : void 0);
    console.log("=========子表单列需要计算的和==========");
    console.log("req?.query?.singleCols", req != null ? (ref3 = req.query) != null ? ref3.singleCols : void 0 : void 0);
    sub_table = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

    if (!sub_table) {
      console.log("=====sub_table======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 subTable 字段');
    }

    sum_col = req != null ? (ref5 = req.query) != null ? ref5.sumCol : void 0 : void 0;

    if (!sum_col) {
      console.log("=====sum_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sumCol 字段');
    }

    sort_col = req != null ? (ref6 = req.query) != null ? ref6.sortCol : void 0 : void 0;

    if (!sort_col) {
      console.log("=====sort_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sortCol 字段');
    }

    ins = req != null ? (ref7 = req.body) != null ? ref7.instance : void 0 : void 0;
    sub_table_values = ins.values[sub_table];

    if ((sub_table_values != null ? sub_table_values.length : void 0) > 0) {
      var JsonSort = function (jsonArr, key, asc) {
        for (var j = 1, jl = jsonArr.length; j < jl; j++) {
          var temp = jsonArr[j],
              val = Number(temp[key]),
              i = j - 1;

          if (asc == true) {
            while (i >= 0 && Number(jsonArr[i][key]) > val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          } else {
            while (i >= 0 && Number(jsonArr[i][key]) < val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          }

          jsonArr[i + 1] = temp;
        }

        return jsonArr;
      };

      ;
      new_table_values = JsonSort(sub_table_values, sum_col, false);
      console.log("new_table_values", new_table_values);
      new_table_values.forEach(function (obj, index) {
        if (sort_col && obj[sum_col]) {
          return obj[sort_col] = (index + 1).toString();
        }
      });
      console.log("new_table_values", new_table_values);
      ins.values[sub_table] = new_table_values;
      db.instances.update(ins._id, {
        $set: {
          'values': ins.values
        }
      });
      console.log("success");
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'success': '计算排序成功'
        }
      });
    } else {
      throw new Meteor.Error('table sort error!', '子表数据为空');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"test_webhook.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/test_webhook.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isDevelopment) {
  JsonRoutes.add('post', '/test/webhook', function (req, res, next) {
    var e, hashData;

    try {
      hashData = req.body;
      console.log('action: ', hashData.action);
      console.log('from_user: ', hashData.from_user);
      console.log('to_users: ', hashData.to_users);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {}
      });
    } catch (error) {
      e = error;
      console.error(e.stack);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          errors: [{
            errorMessage: e.message
          }]
        }
      });
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_users.coffee                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/users", function (req, res, next) {
  var current_user, current_user_info, spaceId, spaceUsers, space_user, userIds;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  userIds = req.body.userIds;
  spaceId = req.body.spaceId;
  spaceUsers = [];
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!userIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getFormulaUserObjects(spaceId, userIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_organizations.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_organizations.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/orgs", function (req, res, next) {
  var current_user, current_user_info, orgIds, orgs, spaceId, space_user;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  orgIds = req.body.orgIds;
  spaceId = req.body.spaceId;
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!orgIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  orgs = WorkflowManager.getFormulaOrgObjects(orgIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'orgs': orgs
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"related_instances_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/related_instances_tabular.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return TabularTables.related_instances_tabular = new Tabular.Table({
    name: "related_instances_tabular",
    collection: db.instances,
    columns: [{
      data: "_id",
      title: '<input type="checkbox" name="reverse" id="reverse">',
      orderable: false,
      width: '1px',
      render: function (val, type, doc) {
        var input, ref;
        input = '<input type="checkbox" class="related-instances-list-checkbox" name="related_instances_ids" id="related_instances_ids" value="' + doc._id + '"';

        if ((ref = TabularTables.related_instances_tabular.related_instances) != null ? ref.includes(doc._id) : void 0) {
          input += " checked ";
        }

        input += ">";
        return input;
      }
    }, {
      data: "name",
      orderable: false,
      width: '45%',
      render: function (val, type, doc) {
        return "<div data-id='" + doc._id + "'>" + doc.name + "</div>";
      }
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      orderable: false
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_flow"),
      render: function (val, type, doc) {
        var judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + "</div>";
      }
    }],
    dom: "tp",
    lengthChange: false,
    extraFields: ["state", "final_decision", "space", "keywords"],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var space;

      if (!userId) {
        return {
          _id: -1
        };
      }

      space = selector.space;
      delete selector.space;
      selector.$or = [{
        space: space
      }, {
        submitter: userId
      }, {
        applicant: userId
      }, {
        inbox_users: userId
      }, {
        outbox_users: userId
      }, {
        cc_users: userId
      }];
      return selector;
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/tabular.coffee                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var GetBoxInstancesTabularOptions, _get_inbox_instances_tabular_options, _get_outbox_instances_tabular_options, _handleListFields, instancesListTableTabular, newInstancesListTabular, updateTabularTitle;

Steedos.subs["InstanceTabular"] = new SubsManager();

_handleListFields = function (fields) {
  var ins_fields;
  ins_fields = new Array();

  if (fields != null) {
    fields.forEach(function (f) {
      var ref;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
          return ins_fields.push(f1);
        }) : void 0 : void 0;
      } else {
        return ins_fields.push(f);
      }
    });
  }

  return ins_fields;
};

updateTabularTitle = function () {};

instancesListTableTabular = function (flowId, fields) {
  var ins_fields, key, options;
  options = {
    name: "instances",
    collection: db.instances,
    pub: "instance_tabular",
    onUnload: function () {
      return Meteor.setTimeout(Template.instance_list._tableColumns, 150);
    },
    drawCallback: function (settings) {
      var ellipsisLink, emptyTd, title;
      emptyTd = $(".dataTables_empty");

      if (emptyTd.length) {
        emptyTd[0].colSpan = "6";
      }

      if (!Steedos.isMobile() && !Steedos.isPad()) {
        Meteor.setTimeout(Template.instance_list._tableColumns, 150);
        $(".instance-list").scrollTop(0).ready(function () {
          return $(".instance-list").perfectScrollbar("update");
        });
      } else {
        $(".instance-list").scrollTop(0);
      }

      title = t("pager_input_hint");
      ellipsisLink = settings.oInstance.parent().find('.paging_numbers .pagination .disabled a');
      return ellipsisLink.attr("title", title).css("cursor", "pointer").click(function () {
        var goPage, input;

        if (!$(this).find('input').length) {
          input = $('<input class="paginate_input form-control input-sm" type="text" style="border: none; padding:0 2px;"/>');

          if (Steedos.isMobile()) {
            input.css({
              width: "52px",
              height: "20px"
            });
          } else {
            input.css({
              width: "52px",
              height: "16px"
            });
          }

          input.attr("title", title).attr("placeholder", title);
          $(this).empty().append(input);

          goPage = function (index) {
            var pages;

            if (index > 0) {
              pages = Math.ceil(settings.fnRecordsDisplay() / settings._iDisplayLength);

              if (index > pages) {
                index = pages;
              }

              index--;
              return settings.oInstance.DataTable().page(index).draw('page');
            }
          };

          input.blur(function (e) {
            var currentPage;
            currentPage = $(this).val();
            goPage(currentPage);
            return $(this).parent().html('...');
          });
          return input.keydown(function (e) {
            var currentPage;

            if (e.keyCode.toString() === "13") {
              currentPage = $(this).val();
              return goPage(currentPage);
            }
          });
        }
      });
    },
    createdRow: function (row, data, dataIndex) {
      if (Meteor.isClient) {
        if (data._id === FlowRouter.current().params.instanceId) {
          return row.setAttribute("class", "selected");
        }
      }
    },
    columns: [{
      data: "_id",
      orderable: false,
      render: function (val, type, doc) {
        var agent_view, cc_view, flow_name, instanceNamePriorityClass, modified, modifiedFromNow, modifiedString, priorityIcon, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        modifiedString = moment(doc.modified).format('YYYY-MM-DD');
        modified = doc.modified;

        if (Session.get("box") === 'inbox' && doc.state !== 'draft') {
          modified = doc.start_date || doc.modified;
        }

        if (Session.get("box") === 'outbox' || Session.get("box") === 'monitor') {
          modified = doc.submit_date || doc.submit_date;
        }

        modifiedFromNow = Steedos.momentReactiveFromNow(modified);
        flow_name = doc.flow_name;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
          step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
        } else {
          if (Session.get("box") !== 'draft' && doc.current_step_name) {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
          } else {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "</div>";
          }
        }

        agent_view = "";

        if (doc.agent_user_name && Session.get("box") === 'inbox') {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';

        if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIcon = "";
        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "\n	<span>" + doc.applicant_name + "</span>\n</div>\n<div class='instance-detail'>" + step_current_name_view + "\n	<span class='instance-modified' title='" + modifiedString + "'>" + modifiedFromNow + "</span>\n</div>";
      }
    }, {
      data: "applicant_organization_name",
      title: t("instances_applicant_organization_name"),
      visible: false
    }, {
      data: "name",
      title: t("instances_name"),
      render: function (val, type, doc) {
        var agent_view, cc_view, instanceNamePriorityClass, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
        }

        agent_view = "";

        if (doc.agent_user_name) {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';

        if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      visible: false,
      orderable: false
    }, {
      data: "submit_date",
      title: t("instances_submit_date"),
      render: function (val, type, doc) {
        if (doc.submit_date) {
          return moment(doc.submit_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      visible: false,
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_step_current_name"),
      render: function (val, type, doc) {
        var cc_tag, judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        cc_tag = '';

        if (doc.cc_count > 0) {
          cc_tag = TAPi18n.__('cc_tag');
        }

        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + cc_tag + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "modified",
      title: t("instances_modified"),
      render: function (val, type, doc) {
        return moment(doc.modified).format('YYYY-MM-DD HH:mm');
      },
      visible: false,
      orderable: true
    }, {
      data: "start_date",
      title: t("instances_start_date"),
      render: function (val, type, doc) {
        if (doc.start_date) {
          return moment(doc.start_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "my_finish_date",
      render: function (val, type, doc) {
        if (doc.my_finish_date) {
          return moment(doc.my_finish_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "modified",
      visible: false
    }, {
      data: "keywords",
      visible: false
    }, {
      data: "is_archived",
      render: function (val, type, doc) {
        var ref;

        if ((doc != null ? (ref = doc.values) != null ? ref.record_need : void 0 : void 0) && doc.values.record_need === "true") {
          if (doc != null ? doc.is_archived : void 0) {
            return t("YES");
          }

          return t("NO");
        }
      },
      visible: false,
      orderable: false
    }],
    dom: function () {
      if (Steedos.isMobile()) {
        return 'tp';
      } else {
        return 'tpl';
      }
    }(),
    order: [[4, "desc"]],
    extraFields: ["form", "flow", "inbox_users", "state", "space", "applicant", "form_version", "flow_version", "is_cc", "cc_count", "is_read", "current_step_name", "values", "keywords", "final_decision", "flow_name", "is_hidden", "agent_user_name"],
    lengthChange: true,
    lengthMenu: [10, 15, 20, 25, 50, 100],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var ref, space, space_user;

      if (!userId) {
        return {
          _id: -1
        };
      }

      space = selector.space;

      if (!space) {
        if ((selector != null ? (ref = selector.$and) != null ? ref.length : void 0 : void 0) > 0) {
          space = selector.$and.getProperty('space')[0];
        }
      }

      if (!space) {
        return {
          _id: -1
        };
      }

      space_user = db.space_users.findOne({
        user: userId,
        space: space
      }, {
        fields: {
          _id: 1
        }
      });

      if (!space_user) {
        return {
          _id: -1
        };
      }

      return selector;
    },
    pagingType: "numbers"
  };

  if (flowId) {
    key = "instanceFlow" + flowId;
    options.name = key;
    TabularTables.instances.fields = fields;
    ins_fields = _handleListFields(TabularTables.instances.fields);
    ins_fields.forEach(function (f) {
      if (f.type !== 'table' && f.is_list_display) {
        return options.columns.push({
          data: f.name || f.code,
          title: t(f.name || f.code),
          visible: false,
          orderable: false,
          render: function (val, type, doc) {
            var value, values;
            values = doc.values || {};
            value = values[f.code];

            switch (f.type) {
              case 'user':
                value = value != null ? value.name : void 0;
                break;

              case 'group':
                value = value != null ? value.fullname : void 0;
                break;

              case 'date':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD');
                }

                break;

              case 'dateTime':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD HH:mm');
                }

                break;

              case 'checkbox':
                if (value === true || value === 'true') {
                  value = TAPi18n.__("form_field_checkbox_yes");
                } else {
                  value = TAPi18n.__("form_field_checkbox_no");
                }

                break;

              case 'odata':
                if (value) {
                  value = value['@label'];
                }

            }

            return value;
          }
        });
      }
    });
  }

  return options;
};

Meteor.startup(function () {
  return TabularTables.instances = new Tabular.Table(instancesListTableTabular());
});

GetBoxInstancesTabularOptions = function (box, flowId, fields) {
  var key, options;
  key = "instanceFlow" + box + flowId;

  if (box === "inbox") {
    options = _get_inbox_instances_tabular_options(flowId, fields);
  } else if (box === "outbox") {
    options = _get_outbox_instances_tabular_options(flowId, fields);
  } else {
    options = instancesListTableTabular(flowId, fields);

    if (!flowId) {
      options.name = "inbox_instances";
    }
  }

  if (flowId) {
    options.name = key;
  }

  return options;
};

_get_inbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "inbox_instances";
  }

  options.order = [[8, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': false,
        '_approve.handler': userId
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'start_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_start_date": {
              $first: "$_approve.start_date"
            }
          }
        });
        ag_sort = {
          'approve_start_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.inbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("inbox"));
});

_get_outbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "outbox_instances";
  }

  options.order = [[9, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': true,
        $or: [{
          '_approve.handler': userId
        }, {
          '_approve.user': userId
        }]
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'my_finish_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_finish_date": {
              $last: "$_approve.finish_date"
            }
          }
        });
        ag_sort = {
          'approve_finish_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.outbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("outbox"));
});

if (Meteor.isClient) {
  TabularTables.flowInstances = new ReactiveVar();
}

Meteor.startup(function () {
  return Tracker.autorun(function (c) {
    if (Meteor.isClient && !Steedos.isMobile()) {
      if (Session.get("flowId") && Session.get("box") !== 'draft') {
        return Meteor.call("newInstancesListTabular", Session.get("box"), Session.get("flowId"), function (error, result) {
          newInstancesListTabular(Session.get("box"), Session.get("flowId"), result);
          return Template.instance_list._changeOrder();
        });
      }
    }
  });
});

newInstancesListTabular = function (box, flowId, fields) {
  var flow, key, ref, ref1, ref2;

  if (!fields) {
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        form: 1
      }
    });
    fields = (ref = db.forms.findOne({
      _id: flow != null ? flow.form : void 0
    }, {
      fields: {
        'current.fields': 1
      }
    })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
  }

  fields = _handleListFields(fields);

  if ((fields != null ? (ref2 = fields.filterProperty("is_list_display", true)) != null ? ref2.length : void 0 : void 0) > 0) {
    key = "instanceFlow" + box + flowId;

    if (Meteor.isClient) {
      TabularTables.flowInstances.set(new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields)));
    } else {
      new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields));
    }

    return console.log("new TabularTables ", key);
  }
};

if (Meteor.isServer) {
  Meteor.methods({
    newInstancesListTabular: function (box, flowId) {
      var fields, flow, ref, ref1;
      newInstancesListTabular(box, flowId);
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          form: 1
        }
      });
      fields = (ref = db.forms.findOne({
        _id: flow != null ? flow.form : void 0
      }, {
        fields: {
          'current.fields': 1
        }
      })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
      return fields;
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".i18n.json",
    ".coffee"
  ]
});

require("/node_modules/meteor/steedos:workflow/i18n/en.i18n.json.js");
require("/node_modules/meteor/steedos:workflow/i18n/zh-CN.i18n.json.js");
require("/node_modules/meteor/steedos:workflow/checkNpm.js");
require("/node_modules/meteor/steedos:workflow/lib/collection_helpers.js");
require("/node_modules/meteor/steedos:workflow/lib/tapi18n.coffee");
require("/node_modules/meteor/steedos:workflow/lib/core.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/forms.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flows.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/categories.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/spaces.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/deleted_instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/auth_tokens.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/webhooks.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_users.coffee");
require("/node_modules/meteor/steedos:workflow/lib/cfs/instances.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/instance_readonly_template.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/template_manager.coffee");
require("/node_modules/meteor/steedos:workflow/client/coreform/inputTypes/coreform-table/steedos-table.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_image_sign.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_form.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_attachments.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_sign_text.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_traces_help.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/set_instance_step_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/get_instance_data.js");
require("/node_modules/meteor/steedos:workflow/server/methods/save_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/trace_approve_cc.js");
require("/node_modules/meteor/steedos:workflow/server/methods/forward_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/cfs_instances.js");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_return.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_remind.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/next_step_users_not_found.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_number_rules.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/check_main_attach.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/edit_flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/start_flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_traces.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_batch.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/distribute.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/hide_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_value.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/steedos_css.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance_draft_view.coffee");
require("/node_modules/meteor/steedos:workflow/routes/nextStepUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getSpaceUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getFormulaUserObjects.js");
require("/node_modules/meteor/steedos:workflow/routes/init_formula_values.js");
require("/node_modules/meteor/steedos:workflow/routes/getNameForUser.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_designer_startup.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_engine.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_remove.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_terminate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_reassign.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_relocate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_archive.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_export.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_space_changeset.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_retrieve.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward.js");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_instance.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_pending.coffee");
require("/node_modules/meteor/steedos:workflow/routes/export_table_template.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_save.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get_by_stepname.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_cfs.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_table_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_sub_table_sort.coffee");
require("/node_modules/meteor/steedos:workflow/routes/test_webhook.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/1_form_formula.js");
require("/node_modules/meteor/steedos:workflow/server/lib/get_handlers_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/permission_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/approve_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/flow_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/form_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/step_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/categories.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/cfs_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flows.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/forms.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_data.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_list.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_draft.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/distributed_instances_state_by_ids.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/related_instaces.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/user_inbox_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_main_attach_template.coffee");
require("/node_modules/meteor/steedos:workflow/lib/admin.coffee");
require("/node_modules/meteor/steedos:workflow/related_instances_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/tabular.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_users.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_organizations.coffee");
require("/node_modules/meteor/steedos:workflow/server/flow-template/workflow_template.coffee");
require("/node_modules/meteor/steedos:workflow/server/startup.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/instance_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/auto_finish_process_delegation.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/timeout_auto_submit.coffee");

/* Exports */
Package._define("steedos:workflow", {
  InstanceManager: InstanceManager,
  WorkflowManager_format: WorkflowManager_format,
  Workflow: Workflow,
  SteedosTable: SteedosTable,
  InstanceReadOnlyTemplate: InstanceReadOnlyTemplate,
  TemplateManager: TemplateManager,
  CoreForm: CoreForm,
  InstanceNumberRules: InstanceNumberRules,
  getHandlersManager: getHandlersManager,
  permissionManager: permissionManager,
  workflowTemplate: workflowTemplate,
  approveManager: approveManager,
  stepManager: stepManager,
  flowManager: flowManager,
  formManager: formManager
});

})();

//# sourceURL=meteor://💻app/packages/steedos_workflow.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jaGVja05wbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9saWIvY29yZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL2xpYi9jb3JlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9saWIvbW9kZWxzL2F1dGhfdG9rZW5zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvbGliL2luc3RhbmNlX3JlYWRvbmx5X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L2xpYi9pbnN0YW5jZV9yZWFkb25seV90ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L2xpYi90ZW1wbGF0ZV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L2xpYi90ZW1wbGF0ZV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jbGllbnQvY29yZWZvcm0vaW5wdXRUeXBlcy9jb3JlZm9ybS10YWJsZS9zdGVlZG9zLXRhYmxlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9faW1hZ2Vfc2lnbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL2NsaWVudC92aWV3cy9pbnN0YW5jZS9faW1hZ2Vfc2lnbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX2luc3RhbmNlX2F0dGFjaG1lbnRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9faW5zdGFuY2Vfc2lnbl90ZXh0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9zaWduX3RleHQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9fdHJhY2VzX2hlbHAuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3RyYWNlc19oZWxwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3JlbGF0ZWRfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvc2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL3NldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2dldF9pbnN0YW5jZV9kYXRhLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL3NhdmVfaW5zdGFuY2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3M6d29ya2Zsb3cvc2VydmVyL21ldGhvZHMvdHJhY2VfYXBwcm92ZV9jYy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9mb3J3YXJkX2luc3RhbmNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2Nmc19pbnN0YW5jZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9uZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9jaGVja19tYWluX2F0dGFjaC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvcmVsYXRlZF9pbnN0YW5jZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvZWRpdF9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2VkaXRfZmxvd19wb3NpdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL3N0YXJ0X2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9zdGFydF9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2JhdGNoLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYmF0Y2guY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9oaWRlX2luc3RhbmNlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaGlkZV9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfdmFsdWUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV92YWx1ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3JvdXRlcy9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9yb3V0ZXMvaW5zdGFuY2UuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9yb3V0ZXMvc3RlZWRvc19jc3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL3N0ZWVkb3NfY3NzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9saWIvMV9mb3JtX2Zvcm11bGEuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL2xpYi9nZXRfaGFuZGxlcnNfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZ2V0X2hhbmRsZXJzX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvcGVybWlzc2lvbl9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9wZXJtaXNzaW9uX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvYXBwcm92ZV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9hcHByb3ZlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvZmxvd19tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2Zvcm1fbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZm9ybV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL3N0ZXBfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvc3RlcF9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcG9zaXRpb25zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZmxvd3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zvcm1zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mb3Jtcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kcmFmdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfZHJhZnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvZmxvdy10ZW1wbGF0ZS93b3JrZmxvd190ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9mbG93LXRlbXBsYXRlL3dvcmtmbG93X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvc2NoZWR1bGUvYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3NjaGVkdWxlL2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3NjaGVkdWxlL3RpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvc2NoZWR1bGUvdGltZW91dF9hdXRvX3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3M6d29ya2Zsb3cvcm91dGVzL25leHRTdGVwVXNlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3M6d29ya2Zsb3cvcm91dGVzL2dldFNwYWNlVXNlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3M6d29ya2Zsb3cvcm91dGVzL2dldEZvcm11bGFVc2VyT2JqZWN0cy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvaW5pdF9mb3JtdWxhX3ZhbHVlcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvZ2V0TmFtZUZvclVzZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvZ2V0TmFtZUZvclVzZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfZGVzaWduZXJfc3RhcnR1cC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfZGVzaWduZXJfc3RhcnR1cC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19lbmdpbmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2VuZ2luZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19kcmFmdHMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2RyYWZ0cy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZW1vdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlbW92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd190ZXJtaW5hdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3Rlcm1pbmF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZWFzc2lnbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVhc3NpZ24uY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVsb2NhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlbG9jYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2FyY2hpdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2FyY2hpdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZXhwb3J0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19leHBvcnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfc3BhY2VfY2hhbmdlc2V0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19zcGFjZV9jaGFuZ2VzZXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfcmV0cmlldmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3JldHJpZXZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2ZvcndhcmQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfaW5zdGFuY2UuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9wZW5kaW5nLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3BlbmRpbmcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9leHBvcnRfdGFibGVfdGVtcGxhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvZXhwb3J0X3RhYmxlX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZHJhZnRzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2RyYWZ0cy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2dldC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9nZXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fc3VibWl0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fc2F2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zYXZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZ2V0X2J5X3N0ZXBuYW1lLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2dldF9ieV9zdGVwbmFtZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2Nmcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9jZnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZF9yZWZpbGwuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2ZvcndhcmRfcmVmaWxsLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2ZvcndhcmRfdGFibGVfcmVmaWxsLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19mb3J3YXJkX3RhYmxlX3JlZmlsbC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV9zdWJfdGFibGVfc29ydC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfc3ViX3RhYmxlX3NvcnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy90ZXN0X3dlYmhvb2suY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvdGVzdF93ZWJob29rLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX2Zvcm11bGFfdXNlcnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX2Zvcm11bGFfdXNlcnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfZm9ybXVsYV9vcmdhbml6YXRpb25zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV9mb3JtdWxhX29yZ2FuaXphdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy90YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvdGFidWxhci5jb2ZmZWUiXSwibmFtZXMiOlsiY2hlY2tOcG1WZXJzaW9ucyIsIm1vZHVsZSIsImxpbmsiLCJ2IiwiY29va2llcyIsIm1rZGlycCIsIldvcmtmbG93IiwiSW1hZ2VTaWduIiwiVHJhY2VzVGVtcGxhdGUiLCJJbnN0YW5jZWZvcm1UZW1wbGF0ZSIsIkluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlIiwiSW5zdGFuY2VTaWduVGV4dCIsIlJlbGF0ZWRJbnN0YW5jZXMiLCJJbnN0YW5jZU1hY3JvIiwiY29udGV4dCIsIlRyYWNlc01hbmFnZXIiLCJNZXRlb3IiLCJpc0NsaWVudCIsInN0YXJ0dXAiLCJ3b3JrZmxvd190aHJlZV9jb2x1bW5zIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIiQiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmciLCJmaWVsZF9mb3JtdWxhIiwiaW5kZXhPZiIsImluY2x1ZGVzT3BpbmlvbkZpZWxkIiwiZm9ybSIsImZvcm1fdmVyc2lvbiIsIl9mb3JtX3ZlcnNpb24iLCJmaWVsZF9mb3JtdWxhcyIsImZpZWxkcyIsIkFycmF5IiwiaXNTZXJ2ZXIiLCJ1dWZsb3dNYW5hZ2VyIiwiZ2V0Rm9ybVZlcnNpb24iLCJkYiIsImZvcm1zIiwiZmluZE9uZSIsIl9pZCIsImZvcm1fdmVyc2lvbnMiLCJmb3JFYWNoIiwiZiIsInJlZiIsInR5cGUiLCJjb25zb2xlIiwibG9nIiwiZjEiLCJwdXNoIiwiZm9ybXVsYSIsIl8iLCJzb21lIiwiaGVscGVycyIsImF1dGhfdG9rZW5zIiwiQ29sbGVjdGlvbiIsIl9nZXRMb2NhbGUiLCJfZ2V0UmVxdWlyZWRGaWVsZHMiLCJfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMiLCJfZ2V0U3RhcnRTdGVwUmVxdWlyZWRGaWVsZHMiLCJfZ2V0VGVtcGxhdGVEYXRhIiwiX2dldFZpZXdIdG1sIiwiSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlIiwiaW5zdGFuY2VfYXR0YWNobWVudCIsImFmU2VsZWN0VXNlclJlYWQiLCJhZkZvcm1Hcm91cFJlYWQiLCJhZkZvcm1Hcm91cCIsImNyZWF0ZSIsInRlbXBhbHRlTmFtZSIsInN0ZWVkb3NEYXRhIiwidGVtcGxhdGUiLCJ0ZW1wbGF0ZUNvbXBpbGVkIiwidGVtcGxhdGVSZW5kZXJGdW5jdGlvbiIsIlNwYWNlYmFyc0NvbXBpbGVyIiwiY29tcGlsZSIsImlzQm9keSIsImV2YWwiLCJUZW1wbGF0ZSIsIkJsYXplIiwiY3JlYXRlSW5zdGFuY2VTaWduVGV4dCIsImluc3RhbmNlU2lnblRleHRDb21waWxlZCIsImluc3RhbmNlU2lnblRleHRIdG1sIiwiaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VTaWduVGV4dCIsImNyZWF0ZUltYWdlU2lnbiIsImltYWdlU2lnbkNvbXBpbGVkIiwiaW1hZ2VTaWduSHRtbCIsImltYWdlU2lnblJlbmRlckZ1bmN0aW9uIiwiaW1hZ2VTaWduIiwiaW5pdCIsImFic29sdXRlIiwiZ2V0VmFsdWUiLCJ2YWx1ZSIsImZpZWxkIiwibG9jYWxlIiwidXRjT2Zmc2V0IiwiZGF0ZSIsImUiLCJob3VycyIsIm1vbnRoIiwic2Vjb25kcyIsInQiLCJ0MCIsInQxIiwieWVhciIsImVuY29kZVVSSSIsImVycm9yIiwiaXNfbXVsdGlzZWxlY3QiLCJnZXRQcm9wZXJ0eSIsInRvU3RyaW5nIiwiZnVsbG5hbWUiLCJuYW1lIiwiVEFQaTE4biIsIl9fIiwibGVuZ3RoIiwic3BsaXQiLCJEYXRlIiwiZm9ybWF0RGF0ZSIsImlzX3RleHRhcmVhIiwiU3BhY2ViYXJzIiwiU2FmZVN0cmluZyIsIk1hcmtkb3duIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJkaWdpdHMiLCJTdGVlZG9zIiwibnVtYmVyVG9TdHJpbmciLCJnZXRMYWJlbCIsImNvZGUiLCJmaW5kUHJvcGVydHlCeVBLIiwiZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbiIsImluc3RhbmNlIiwiZm9ybV9maWVsZHMiLCJjdXJyZW50Iiwid2hlcmUiLCJoaXN0b3J5cyIsImdldEZsb3dWZXJzaW9uIiwiZmxvdyIsImZsb3dfdmVyc2lvbiIsImZsb3dzIiwicGF0aCIsInZpZXdIdG1sIiwiQXNzZXRzIiwiZ2V0VGV4dCIsInJlcGxhY2UiLCJ1c2VyIiwicmVmMSIsInRvTG9jYWxlTG93ZXJDYXNlIiwicmV2IiwiaXNfcmVxdWlyZWQiLCJzdGVwcyIsImVkaXRhYmxlQ29kZSIsInN0YXJ0U3RlcCIsImtleXMiLCJwZXJtaXNzaW9ucyIsImtleSIsInJlcXVpcmVkRmllbGRzIiwiaW50ZXJzZWN0aW9uIiwic3BhY2UiLCJvcHRpb25zIiwiV29ya2Zsb3dNYW5hZ2VyIiwiY2xvbmUiLCJXb3JrZmxvd01hbmFnZXJfZm9ybWF0IiwiZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMiLCJpbnNuYW1lIiwiaW5zX3N0YXRlIiwic3RhdGUiLCJpbnNfZmluYWxfZGVjaXNpb24iLCJpbnNfY29kZSIsImluc19pc19hcmNoaXZlZCIsImlzX2FyY2hpdmVkIiwiaW5zX2lzX2RlbGV0ZWQiLCJhcHBsaWNhbnRfbmFtZSIsImFwcGxpY2FudENvbnRleHQiLCJzZXNzaW9uVXNlcklkIiwiZWRpdGFibGUiLCJzdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyIsInBhc3NpbmciLCJtb21lbnQiLCJmb3JtYXQiLCJnZXRJbnN0YW5jZVZpZXciLCJib2R5IiwiaW5zdGFuY2VDb21waWxlZCIsImluc3RhbmNlUmVuZGVyRnVuY3Rpb24iLCJpbnN0YW5jZVRlbXBsYXRlIiwiVGVtcGxhdGVNYW5hZ2VyIiwiZ2V0VGVtcGxhdGUiLCJ0ZW1wbGF0ZU5hbWUiLCJpbnN0YW5jZV9yZWFkb25seV92aWV3IiwidG9IVE1MV2l0aERhdGEiLCJnZXRUcmFjZXNWaWV3IiwidHJhY2VDb21waWxlZCIsInRyYWNlUmVuZGVyRnVuY3Rpb24iLCJ0cmFjZXNIdG1sIiwiaW5zdGFuY2Vfc3R5bGUiLCJ0cmFjZV9yZWFkb25seV92aWV3IiwidHJhY2VzIiwiZ2V0QXR0YWNobWVudFZpZXciLCJhdHRhY2htZW50Q29tcGlsZWQiLCJhdHRhY2htZW50SHRtbCIsImF0dGFjaG1lbnRSZW5kZXJGdW5jdGlvbiIsImF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXciLCJnZXRSZWxhdGVkSW5zdGFuY2VzVmlldyIsInJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCIsInJlbGF0ZWRJbnN0YW5jZXNIdG1sIiwicmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uIiwicmVsYXRlZF9pbnN0YW5jZXNfdmlldyIsImdldE9uTG9hZFNjcmlwdCIsImZvcm1fc2NyaXB0IiwiZ2V0SW5zdGFuY2VIdG1sIiwiYWJzb2x1dGVVcmwiLCJhbGxDc3NMaW5rIiwiYXR0YWNobWVudCIsImNzc0hyZWYiLCJmb3JtRGVzY3JpcHRpb24iLCJmb3JtRGVzY3JpcHRpb25IdG1sIiwiaHRtbCIsImluc3RhbmNlQm94U3R5bGUiLCJvbkxvYWRTY3JpcHQiLCJvcGVuRmlsZVNjcmlwdCIsInJlbGF0ZWRfaW5zdGFuY2VzIiwic2hvd1RyYWNlc0J0biIsInNob3dUcmFjZXNTY3JpcHQiLCJzdWJtaXRfYnRuIiwidHJhY2UiLCJ3aWR0aCIsImlzTW9iaWxlIiwic2hvd1RyYWNlIiwiZmluYWxfZGVjaXNpb24iLCJzaG93QXR0YWNobWVudHMiLCJzdHlsZXMiLCJkZXNjcmlwdGlvbiIsInBsdWdpbnMiLCJmb3JtSWQiLCJpbnN0YW5jZV90aXRsZSIsInBhZ2VUaXRsZSIsInBhZ2VUaXRsZVRyQ2xhc3MiLCJ2YWwiLCJDb3JlRm9ybSIsInBhZ2VUaXRsZUZpZWxkTmFtZSIsImhhbmRsZVRhYmxlVGVtcGxhdGUiLCJfZXhwb3J0IiwidGFibGVfZmllbGRzIiwidGFibGVfZmllbGQiLCJmaWVsZF9wZXJtaXNzaW9uIiwicHVyZUNvZGUiLCJyZXF1aXJlZCIsInRpdGxlX3Blcm1pc3Npb24iLCJyZW1vdmVTcGVjaWFsQ2hhcmFjdGVyIiwiaXNPcGluaW9uRmllbGQiLCJ0cl9zdGFydCIsInRkX2NvbHNwYW4iLCJ0cl9lbmQiLCJpbmNsdWRlcyIsInBlcm1pc3Npb24iLCJfdGVtcGxhdGUiLCJ0YWJsZSIsIl90ZW1wbGF0ZUhlbHBzIiwiZGF0YSIsInN0ZWVkb3NfaW5zdGFuY2UiLCJnZXRJbnN0YW5jZSIsImF0dHMiLCJpZCIsInN0eWxlIiwiZGlzYWJsZWQiLCJpbnN0YW5jZUlkIiwiZm9ybV90eXBlcyIsIkFwcHJvdmVNYW5hZ2VyIiwiaXNSZWFkT25seSIsInN0ZWVkb3NfZm9ybSIsImlubmVyc3ViZm9ybUNvbnRleHQiLCJvYmoiLCJkb2NfdmFsdWVzIiwiU2Vzc2lvbiIsImdldCIsImVxdWFscyIsImEiLCJiIiwiU2ltcGxlU2NoZW1hIiwiZ2V0QXV0b2Zvcm1TY2hlbWEiLCJpbnN0YW5jZV9ib3hfc3R5bGUiLCJib3giLCJpbnMiLCJqdWRnZSIsInByaW50X3RlbXBsYXRlIiwiaW5zdGFuY2VfdGVtcGxhdGUiLCJTdGVlZG9zVGFibGUiLCJjaGVja0l0ZW0iLCJpdGVtX2luZGV4IiwiZmllbGRPYmoiLCJnZXRGaWVsZCIsImZpZWxkVmFsIiwiZ2V0SXRlbU1vZGFsVmFsdWUiLCJzZl9uYW1lIiwic2ZpZWxkcyIsInNmIiwiSW5zdGFuY2VNYW5hZ2VyIiwiY2hlY2tGb3JtRmllbGRWYWx1ZSIsInNldFRhYmxlSXRlbVZhbHVlIiwiaXRlbV92YWx1ZSIsInRhYmxlVmFsdWUiLCJnZXRUYWJsZVZhbHVlIiwiZ2V0VGFibGVJdGVtVmFsdWUiLCJyZW1vdmVUYWJsZUl0ZW0iLCJyZW1vdmVkIiwic2V0VGFibGVWYWx1ZSIsImdldFZhbGlkVmFsdWUiLCJ2YWxpZFZhbHVlIiwiaGFuZGxlRGF0YSIsInZhbHVlcyIsImluc3RhbmNlRmllbGRzIiwiZ2V0SW5zdGFuY2VGaWVsZHMiLCJnZXRNb2RhbERhdGEiLCJpbmRleCIsIkZvcm1fZm9ybXVsYSIsImdldEZvcm11bGFGaWVsZFZhcmlhYmxlIiwiQXV0b0Zvcm0iLCJnZXRGb3JtVmFsdWVzIiwiaW5zZXJ0RG9jIiwiYWRkSXRlbSIsIl9pdGVtX3ZhbHVlIiwiZ2V0S2V5cyIsImFwcGVuZCIsImdldFRyIiwidXBkYXRlSXRlbSIsIml0ZW0iLCJ0ZHMiLCJnZXRSZW1vdmVUZCIsInNmaWVsZCIsImdldFRkIiwiZW1wdHkiLCJydW5Gb3JtdWxhIiwicmVtb3ZlSXRlbSIsImhpZGUiLCJzaG93TW9kYWwiLCJtZXRob2QiLCJtb2RhbERhdGEiLCJNb2RhbCIsInNob3ciLCJnZXRDdXJyZW50RGF0YUZvckZvcm0iLCJzcyIsImdldEZvcm1TY2hlbWEiLCJzY2hlbWEiLCJPYmplY3QiLCJvYmplY3RLZXlzIiwiX21ha2VHZW5lcmljIiwiZ2V0VGhlYWQiLCJpc09iamVjdCIsInRoZWFkIiwidHJzIiwibGFiZWwiLCJzZl9sZW5ndGgiLCJ3aWRlX2ZpZWxkcyIsImZpbHRlclByb3BlcnR5IiwiaXNfd2lkZSIsImdldFRib2R5IiwidGJvZHkiLCJ0ciIsInRkIiwidGRfdmFsdWUiLCJnZXRURFZhbHVlIiwidmlldyIsIkNGRGF0YU1hbmFnZXIiLCJnZXRGb3JtdWxhU3BhY2VVc2VycyIsInUiLCJnZXRGb3JtdWxhT3JnYW5pemF0aW9ucyIsIm8iLCJnZXRGb3JtdWxhT3JnYW5pemF0aW9uIiwiYWRkSW5wdXRUeXBlIiwidmFsdWVPdXQiLCJ2YWx1ZUNvbnZlcnRlcnMiLCJzdHJpbmdUb1N0cmluZ0FycmF5Iiwic3RyaW5nVG9OdW1iZXIiLCJzdHJpbmdUb051bWJlckFycmF5Iiwic3RyaW5nVG9Cb29sZWFuIiwic3RyaW5nVG9Cb29sZWFuQXJyYXkiLCJzdHJpbmdUb0RhdGUiLCJzdHJpbmdUb0RhdGVBcnJheSIsImNvbnRleHRBZGp1c3QiLCJtYXhsZW5ndGgiLCJtYXgiLCJhZlRhYmxlIiwiZXZlbnRzIiwiZXZlbnQiLCJuZXdfaXRlbV9pbmRleCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0Iiwic2V0IiwicmVuZGVyZWQiLCJzdHIiLCJhZGRJdGVtVHIiLCJzcGFjZVVzZXJTaWduIiwidXNlcklkIiwic3BhY2VfdXNlcl9zaWducyIsImltYWdlVVJMIiwic2lnbiIsInVuZW1wdHkiLCJ1bmVxdWFscyIsImluY2x1ZGUiLCJKU09OIiwicGFyc2UiLCJyZWYyIiwicmVmMyIsImdldEluc3RhbmNlRmxvd1ZlcnNpb24iLCJhcHByb3ZlcyIsInJlZjQiLCJzdGVwIiwiYXBwcm92ZSIsImp1ZGdlX25hbWUiLCJpc19maW5pc2hlZCIsImhhbmRsZXIiLCJoYW5kbGVyX25hbWUiLCJoYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lIiwiaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUiLCJmaW5pc2hfZGF0ZSIsIm9waW5pb25fZmllbGRzX2NvZGUiLCJzaWduX2ZpZWxkX2NvZGUiLCJpc19yZWFkIiwic2lnbl9zaG93IiwiY29uY2F0IiwiYWZ0ZXJfZmllbGQiLCJiZWZvcmVfZmllbGQiLCJwcmVfZmllbGRzIiwicHJlX3dpZGVfZmllbGRzIiwic2xpY2UiLCJzb3J0X2FwcHJvdmUiLCJvcmRlciIsInNvcnQiLCJwMSIsInAyIiwiX3AxIiwiX3AyIiwiZ2V0VGltZSIsIl90IiwiZ2V0Q2ZDbGFzcyIsImdldFRhYmxlVGhlYWQiLCJnZXRUYWJsZUJvZHkiLCJzaG93TGFiZWwiLCJ0ZW1wbGF0ZURhdGEiLCJnZXRPcGluaW9uRmllbGRTdGVwc05hbWUiLCJ0b3Bfa2V5d29yZHMiLCJmb28xIiwib3BpbmlvbkZpZWxkcyIsImZvbyIsImpzb25fZm9ybXVsYSIsInMxIiwiZXJyb3IxIiwieWlqaWFubGFuIiwic3RlcE5hbWUiLCJpbWFnZV9zaWduIiwib25seV9jY19vcGluaW9uIiwib25seV9jYyIsImRlZmF1bHRfZGVzY3JpcHRpb24iLCJvbmx5X2hhbmRsZXIiLCJzaG93Q0NPcGluaW9uIiwibWFya0Rvd25Ub0h0bWwiLCJtYXJrRG93blN0cmluZyIsInJlbmRlcmVyIiwiUmVuZGVyZXIiLCJocmVmIiwidGl0bGUiLCJ0ZXh0IiwiZl9sYWJlbCIsInRoYXQiLCJpc1NlY3Rpb24iLCJyZWdpc3RlckhlbHBlciIsIm9wIiwiaGFzaCIsImluc19hdHRhY2hfZG93bmxvYWRfdXJsIiwiZ2V0UGVybWlzc2lvbnMiLCJpbnN0YW5jZWZvcm1DaGFuZ2VFdmVudCIsInByZXZlbnREZWZhdWx0Iiwib3BlbldpbmRvdyIsInRhcmdldCIsIm9uQ3JlYXRlZCIsImNvbXBpbGVkIiwiaW5zdGFuY2VDdXN0b21UZW1wbGF0ZSIsImluc3RhbmNlVmlldyIsInJlbmRlckZ1bmN0aW9uIiwiVmlldyIsImluc3RhbmNlX2N1c3RvbV90ZW1wbGF0ZSIsIm9uUmVuZGVyZWQiLCJjdXJyZW50QXBwcm92ZSIsImN1cnJlbnRTdGVwIiwiZm9ybXVsYV9maWVsZHMiLCJpbnN0YW5jZU51bWJlckZpZWxkcyIsImFwcGxpY2FudCIsIm5leHRTdGVwcyIsIm5leHRTdGVwVXNlcnMiLCJJbnN0YW5jZUV2ZW50IiwiaW5pdEV2ZW50cyIsImdldEN1cnJlbnRBcHByb3ZlIiwiZWFjaCIsImVsZW1lbnQiLCJzY2hlbWFLZXkiLCJjYWxsIiwicmVzdWx0IiwidG9hc3RyIiwicmVhc29uIiwidHJpbSIsImdldEZpZWxkVmFsdWUiLCJJbnN0YW5jZU51bWJlclJ1bGVzIiwiaW5zdGFuY2VOdW1iZXJCdWlsZGVyIiwidHJpZ2dlciIsImdldEN1cnJlbnRTdGVwIiwicnVuIiwic2hvd01haW5UaXRsZSIsIndvcmtmbG93TWFpbkF0dGFjaFRpdGxlIiwiZW5hYmxlZF9hZGRfbWFpbl9hdHRhY2htZW50IiwiY3VycmVudF9zdGVwIiwibWFpbl9hdHRhY2hfY291bnQiLCJjZnMiLCJpbnN0YW5jZXMiLCJmaW5kIiwiY291bnQiLCJkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50IiwiZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlIiwic3RhcnRfc3RlcCIsImdldFN0YXJ0U3RlcCIsImNhbl9lZGl0X21haW5fYXR0YWNoIiwic3RlcF90eXBlIiwiZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50IiwiZ2V0RmxvdyIsInVwbG9hZF9hZnRlcl9iZWluZ19kaXN0cmlidXRlZCIsImlzQ0MiLCJnZXRDQ1N0ZXAiLCJjYW5fZWRpdF9ub3JtYWxfYXR0YWNoIiwidW5kZWZpbmVkIiwibWFpbl9hdHRhY2htZW50IiwibWFpbl9hdHRhY2giLCJub3JtYWxfYXR0YWNobWVudHMiLCJzZWxlY3RvciIsIiRuZSIsImRmaXMiLCJkaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIiwiJGluIiwiZGlzdHJpYnV0ZV9tYWluIiwiZmlyc3RWZXJzaW9uTWFpbiIsIm1ldGFkYXRhIiwicGFyZW50IiwiYXR0YWNobWVudFVwbG9hZGVkQXQiLCJ1cGxvYWRlZEF0IiwiYyIsImZpcnN0VmVyc2lvbiIsInNvcnRCeSIsImluc3RhbmNlSWRzIiwiYXR0YWNobWVudHNfY291bnQiLCJjb21wYWN0IiwiYXR0YWNobWVudHMiLCIkb3IiLCJmZXRjaCIsIm15QXBwcm92ZSIsIm15VHJhY2UiLCJpc0luYm94IiwiZGVmYXVsdERlc2NyaXB0aW9uIiwiYXBwcm92ZV9zb3J0IiwiYXBwcm92ZXNHcm91cCIsImFwcHJvdmVzX3NvcnRlZCIsImNvbXBsZXRlZF9kYXRlIiwiaGFzTmV4dCIsImhhdmVEZXNjcmlwdGlvbkFwcHJvdmUiLCJpc19jb21wbGV0ZWQiLCJsYXN0IiwidG9wX2FwcHJvdmVzIiwidW5pb24iLCJmaWx0ZXIiLCJ0b3BfYXBwcm92ZSIsImdyb3VwQnkiLCJoYW5kbGVyQXBwcm92ZXMiLCJkZXNjcmlwdGlvbkFwcHJvdmVzIiwiX2Rpc3BsYXkiLCJpc015QXBwcm92ZSIsIm15QXBwcm92ZURlc2NyaXB0aW9uIiwiYXBwcm92ZUlkIiwibm93IiwiaXNPcGluaW9uT2ZGaWVsZCIsImltYWdlU2lnbkRhdGEiLCJzaG93U2lnbkltYWdlIiwiZ2V0TGFzdFNpZ25BcHByb3ZlIiwiZ2V0SGFuZGxlclNpZ25TaG93QXBwcm92ZXMiLCJsYXN0TXlBcHByb3ZlRGVzY3JpcHRpb24iLCJzaG93QXBwcm92ZSIsImp1ZGdlX2Rlc2NyaXB0aW9uIiwiaXNfYXBwcm92ZWQiLCJpc19yZWplY3RlZCIsImlzX3JlYWRlZCIsInNldFRpbWVvdXQiLCJpcyIsImRhdGVGb3JtYXQiLCJnZXRGdWxsWWVhciIsImdldFN0ZXBOYW1lIiwic3RlcElkIiwiZ2V0SW5zdGFuY2VTdGVwIiwic2hvd0RlbGV0ZUJ1dHRvbiIsImFwcHJvdmVkIiwiZnJvbV91c2VyIiwiaXNTaG93TW9kaWZpY2F0aW9uQnV0dG9uIiwiYXBwcm92ZV9hZG1pbnMiLCJpc1Nob3ciLCJzZXR0aW5ncyIsIndvcmtmbG93IiwiY29udGFpbnMiLCJpc0VkaXRpbmciLCJpc19lZGl0aW5nIiwiaXNTaG93RGVzY3JpcHRpb24iLCJnZXRBcHByb3ZlU3RhdHVzSWNvbiIsImFwcHJvdmVKdWRnZSIsImFwcHJvdmVTdGF0dXNJY29uIiwiZ2V0QXBwcm92ZVN0YXR1c1RleHQiLCJhcHByb3ZlU3RhdHVzVGV4dCIsImlzRm9yd2FyZCIsInNob3dGb3J3YXJkRGVsZXRlQnV0dG9uIiwiZm9yd2FyZF9pbnN0YW5jZSIsImlzRGlzdHJpYnV0ZSIsInNob3dEaXN0cmlidXRlRGVsZXRlQnV0dG9uIiwiaXNMZWdhbFZlcnNpb24iLCJoYXNGbG93QWRtaW5QZXJtaXNzaW9uIiwiZmluaXNoRGF0ZVNjaGVtYSIsImlzQW5kcm9pZE9ySU9TIiwiYXV0b2Zvcm0iLCJvcHRpb25hbCIsInJlYWRvbmx5IiwiZGF0ZVRpbWVQaWNrZXJPcHRpb25zIiwiaWdub3JlUmVhZG9ubHkiLCJ3aWRnZXRQb3NpdGlvbmluZyIsImhvcml6b250YWwiLCJmaW5pc2hEYXRlVmFsdWVzIiwic2hvd1RyYWNlc1ZpZXciLCJzaG93X21vZGFsX3RyYWNlc19saXN0Iiwic3BhY2Vfc2V0dGluZ3MiLCJnZXRJbnN0YW5jZVN0YXRlVGV4dCIsImluc3RhbmNlX2lkIiwiZ2V0SW5zdGFuY2VTdGF0ZUNvbG9yIiwiY2xhIiwiZmlyc3RUcmFjZSIsImxhc3RfZGlzdHJpYnV0ZV9mcm9tIiwiZGlzX2luZm8iLCIkZXhpc3RzIiwiY3JlYXRlZCIsImNyZWF0ZWRfYnkiLCJVVWZsb3dfYXBpIiwiZ2V0TmFtZUZvclVzZXIiLCJ1c2VycyIsImZyb21fdXNlcl9uYW1lIiwiaXNFbXB0eSIsImlzQ0NPckRpc3RyaWJ1dGVPckZvcndhcmRUZXJtaW5hdGVkIiwianVkZ2VUZXJtaW5hdGVkIiwiaW5zdGFuY2VFeGlzdHMiLCJhZ2VudERlc2NyaXB0aW9uIiwidXNlck5hbWUiLCJ0cmFjZU5hbWUiLCJ0cmFjZUlkIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FsbGluZyIsImVyciIsInN1Y2Nlc3MiLCJmb3J3YXJkX3NwYWNlIiwiZm9yd2FyZHNwYWNlIiwiZm9yd2FyZGluc3RhbmNlIiwiVHJhY2tlciIsImFmdGVyRmx1c2giLCJvbiIsInNjcm9sbFRvcCIsImZpbmlzaF9pbnB1dCIsIm9waW5pb25faW5wdXQiLCJhbGxvd011bHRpcGxlIiwic2hvd1JlbGF0ZWRJbnN0YWNlcyIsImlzQXJyYXkiLCJyZWxhdGVkX2luc3RhY2VzIiwicmVsYXRlZF9pbnN0YWNlX3VybCIsImlzQ29yZG92YSIsInNob3dfZGVsZXRlIiwibWV0aG9kcyIsInNldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmUiLCJpbnNfaWQiLCJzdGVwX2FwcHJvdmUiLCJ1cGRhdGUiLCIkc2V0IiwiZ2V0X2luc3RhbmNlX2RhdGEiLCJmb3JtQ2FjaGVkIiwiZmxvd0NhY2hlZCIsImNoZWNrIiwiU3RyaW5nIiwiQm9vbGVhbiIsImRyYWZ0X3NhdmVfaW5zdGFuY2UiLCJzZXRPYmoiLCJ0cmFjZV9pZCIsImFwcHJvdmVfaWQiLCJuZXh0X3N0ZXBzIiwiYXBwbGljYW50X2lkIiwic3VibWl0dGVyIiwic3BhY2VfaWQiLCJmbG93X2lkIiwiZm9ybV9pZCIsImN1cnJlbnRfdHJhY2UiLCJpZHgiLCJrZXlfc3RyIiwiY3VycmVudF91c2VyIiwibGFuZyIsImlzSW5zdGFuY2VEcmFmdCIsImlzSW5zdGFuY2VTdWJtaXR0ZXIiLCJtb2RpZmllZCIsIm1vZGlmaWVkX2J5IiwicyIsInNwYWNlX3VzZXJzIiwib3JnYW5pemF0aW9uIiwib3JnX2lkIiwib3JnYW5pemF0aW9ucyIsImFwcGxpY2FudF9vcmdhbml6YXRpb24iLCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWUiLCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lIiwibmFtZV9mb3J1bWxhIiwiZ2V0SW5zdGFuY2VOYW1lIiwiaW5ib3hfc2F2ZV9pbnN0YW5jZSIsImN1cnJlbnRfYXBwcm92ZSIsImlzSW5zdGFuY2VQZW5kaW5nIiwiaXNUcmFjZU5vdEZpbmlzaGVkIiwiaXNBcHByb3ZlTm90RmluaXNoZWQiLCJpc0hhbmRsZXJPckFnZW50Iiwic3RhY2siLCJzdGVwX2lkIiwiaCIsInBlcm1pc3Npb25zX3ZhbHVlcyIsImdldEFwcHJvdmVWYWx1ZXMiLCJjaGFuZ2VfdmFsdWVzIiwiYXBwcm92ZU1hbmFnZXIiLCJnZXRDaGFuZ2VWYWx1ZXMiLCJleHRlbmQiLCJ2YWx1ZXNfaGlzdG9yeSIsImZvcm1fdiIsImNjX2RvIiwiY2NfdXNlcl9pZHMiLCJjY191c2VycyIsImN1cnJlbnRfdXNlcl9pZCIsIm5ld19hcHByb3ZlcyIsInNwYWNlX3VzZXIiLCJhZ2VudCIsImdldEFnZW50IiwiaGFuZGxlcl9pZCIsImhhbmRsZXJfaW5mbyIsImhhbmRsZXJfc3BhY2VfdXNlciIsImhhbmRsZXJfb3JnX2luZm8iLCJmaWxlZHMiLCJnZXRTcGFjZVVzZXIiLCJnZXRTcGFjZVVzZXJPcmdJbmZvIiwiYXBwciIsIk1vbmdvIiwiT2JqZWN0SUQiLCJfc3RyIiwic2V0UmVtaW5kSW5mbyIsIiRhZGRUb1NldCIsIiRlYWNoIiwiJHB1c2giLCJjdXJyZW50X3VzZXJfaW5mbyIsInB1c2hNYW5hZ2VyIiwic2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24iLCJ0cmlnZ2VyV2ViaG9vayIsImNjX3JlYWQiLCJjY19zdWJtaXQiLCJvdXRib3hfdXNlcnMiLCJ1cG9iaiIsInN0YXJ0X2RhdGUiLCIkcHVsbCIsInNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlciIsImNjX3JlbW92ZSIsInJlbW92ZV91c2VyX2lkIiwibXVsdGkiLCJjY19zYXZlIiwiaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50IiwiaXNGb3J3YXJkQXR0YWNobWVudHMiLCJzZWxlY3RlZFVzZXJzIiwiYWN0aW9uX3R5cGUiLCJyZWxhdGVkIiwiZnJvbV9hcHByb3ZlX2lkIiwiRXJyb3IiLCJmb3J3YXJkX3JlbW92ZSIsImhhc0FkbWluUGVybWlzc2lvbiIsImZvcndhcmRfaW5zdGFuY2VfaWQiLCJpbmJveF91c2VycyIsImRlbGV0ZWQiLCJkZWxldGVkX2J5IiwiZGVsZXRlZF9mb3J3YXJkX2luc3RhbmNlX2lkIiwiZGVsZXRlZF9pbnN0YW5jZXMiLCJpbnNlcnQiLCJyZW1vdmUiLCJ1X2lkIiwic2V0X29iaiIsImNhbmNlbERpc3RyaWJ1dGUiLCJhcHByb3ZlX2lkcyIsImV4aXN0cyIsImNmc19pbnN0YW5jZXNfcmVtb3ZlIiwiZmlsZV9pZCIsImNmc19pbnN0YW5jZXNfc2V0X2N1cnJlbnQiLCJjZnNfaW5zdGFuY2VzX2xvY2siLCJ1c2VyX2lkIiwidXNlcl9uYW1lIiwiY2ZzX2luc3RhbmNlc191bmxvY2siLCIkdW5zZXQiLCJkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrIiwic3BhY2VJZCIsImNmc1JlY29yZElkcyIsImlzX2Nsb3VkYWRtaW4iLCJzdG9yZSIsImZzIiwicmVxdWlyZSIsInBhdGhuYW1lIiwiam9pbiIsIl9fbWV0ZW9yX2Jvb3RzdHJhcF9fIiwic2VydmVyRGlyIiwiYWJzb2x1dGVQYXRoIiwicmVzb2x2ZSIsInN5bmMiLCJ0aW1lIiwicXVlcnkiLCJkb3dubG9hZEZhaWxlZFJlY29yZElkcyIsImZpbGVOYW1lIiwiZmlsZVBhdGgiLCJ3cmFwQXN5bmMiLCJjYWxsYmFjayIsIndyaXRlciIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiaXNGdW5jdGlvbiIsInJlYWRlciIsImNyZWF0ZVJlYWRTdHJlYW0iLCJwaXBlIiwidGltZUVuZCIsInNldF9hcHByb3ZlX2hhdmVfcmVhZCIsInNlbGYiLCJjaGFuZ2VfYXBwcm92ZV9pbmZvIiwidXBkYXRlX2FwcHJvdmVfc2lnbiIsInNpZ25fdHlwZSIsImxhc3RTaWduQXBwcm92ZSIsImxhc3RUcmFjZSIsInNlc3Npb25fdXNlcklkIiwidXBPYmoiLCJjdXN0b21fc2lnbl9zaG93IiwidXBkYXRlX3NpZ25fc2hvdyIsIm9ianMiLCJteUFwcHJvdmVfaWQiLCJpbnN0YW5jZV9yZXR1cm4iLCJhcHByb3ZlX3ZhbHVlcyIsImxhc3RfdHJhY2UiLCJuZXdUcmFjZSIsIm5ld19pbmJveF91c2VycyIsInByZV9zdGVwIiwicHJlX3RyYWNlIiwiciIsInJlc3RfY291bnRlcl91c2VycyIsImdldFN0ZXAiLCJwcmV2aW91c190cmFjZV9pZHMiLCJkdWVfZGF0ZSIsImdldER1ZURhdGUiLCJ0aW1lb3V0X2hvdXJzIiwibmV4dF9zdGVwX3VzZXJfaWQiLCJuZXdBcHByb3ZlIiwibmV4dF9zdGVwX3NwYWNlX3VzZXIiLCJuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyIsInVzZXJfaW5mbyIsImhhbmRsZXJfb3JnYW5pemF0aW9uIiwiaXNfZXJyb3IiLCJ1bmlxIiwiY3VycmVudF9zdGVwX25hbWUiLCJpbnN0YW5jZV9yZW1pbmQiLCJyZW1pbmRfdXNlcnMiLCJyZW1pbmRfY291bnQiLCJyZW1pbmRfZGVhZGxpbmUiLCJhY3Rpb25fdHlwZXMiLCJsYXN0X3JlbWluZF91c2VycyIsInByaW9yaXR5IiwiTWF0Y2giLCJPbmVPZiIsImFwIiwiY2FjdWxhdGVfZGF0ZSIsIm1hbnVhbF9kZWFkbGluZSIsImNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5IiwicmVtaW5kX2RhdGUiLCJjYWN1bGF0ZVdvcmtpbmdUaW1lIiwiYmFzZV9kYXRlIiwicGx1c19oYWxmZGF5X2RhdGUiLCJzZW5kUmVtaW5kU01TIiwibmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZCIsImRlYWxfdHlwZSIsInN0ZXBfbmFtZSIsInBhcmFtcyIsImFwcHJvdmVyX3JvbGVzIiwicm9sZXMiLCJyb2xlc19uYW1lIiwiZmxvd19yb2xlcyIsInBsdWNrIiwicm9sZV9uYW1lIiwiX2V2YWwiLCJfTlVNQkVSIiwiX1lZWVkiLCJudW1iZXJSdWxlcyIsInJlcyIsInJ1bGVzIiwic2NyaXB0IiwiaW5zdGFuY2VfbnVtYmVyX3J1bGVzIiwibnVtYmVyIiwiWVlZWSIsIk1NIiwiZ2V0TW9udGgiLCJtbSIsIkREIiwiZ2V0RGF0ZSIsImRkIiwiZmlyc3RfbnVtYmVyIiwiTlVNQkVSIiwibmV3Tm8iLCJfZXJyb3IiLCJjaGVja19tYWluX2F0dGFjaCIsImNoZWNrTWFpbkF0dGFjaCIsInJlbW92ZV9yZWxhdGVkIiwicmVfaW5zX2lkIiwidXBkYXRlX2luc3RhbmNlX3JlbGF0ZWQiLCJ1cGRhdGVGbG93UG9zaXRpb24iLCJmbG93X3Bvc2l0aW9ucyIsInJvbGUiLCJvcmciLCJ1cGRhdGVGbG93Um9sZSIsInN0YXJ0X2Zsb3ciLCJmbG93SWQiLCJzdGFydCIsImtleVZhbHVlIiwic3RhcnRfZmxvd3MiLCJzdGVlZG9zX2tleXZhbHVlcyIsImdldF9pbnN0YW5jZV90cmFjZXMiLCJtaW5pQXBwcm92ZUZpZWxkcyIsImNhdGVnb3J5SWQiLCJmbG93SWRzIiwiX2JhdGNoX2luc3RhbmNlcyIsImdldEJhdGNoSW5zdGFuY2VzIiwibXlBcHByb3ZlcyIsImluc0lkIiwibXlfYXBwcm92ZSIsImdldE15QXBwcm92ZSIsImNoYW5nZV9mbG93X3N0YXRlIiwiX3VzZXJJZCIsIl9mbG93cyIsIl9mbG93c19zdGF0ZSIsImZvcm1fY3VycmVudF9maWVsZHNfY29kZSIsImlzU3BhY2VBZG1pbiIsImlzX3ZhbGlkIiwiZmxvd3R5cGUiLCJzcGVjaWZ5U3RlcCIsImFwcHJvdmVyX3N0ZXAiLCJfc3RlcCIsImZpZWxkc19tb2RpZmlhYmxlIiwiaGlkZV9pbnN0YW5jZSIsImlzX2hpZGRlbiIsInBlcm1pc3Npb25NYW5hZ2VyIiwiZ2V0Rmxvd1Blcm1pc3Npb25zIiwic3BhY2VzIiwiYWRtaW5zIiwiZ2V0SW5zdGFuY2VWYWx1ZXMiLCJDb29raWVzIiwiZ2V0SW5zdGFuY2VSZWFkT25seSIsInJlcSIsIm5leHQiLCJfaGFzUGVybWlzc2lvbiIsIl9sb2NhbGUiLCJfcGFyZW50X2luc3RhbmNlcyIsImRhdGFCdWYiLCJoaWRlX3RyYWNlcyIsInNwYWNlVXNlckNvdW50IiwiZ2V0QVBJTG9naW5Vc2VyIiwiYWNjZXNzX3Rva2VuIiwiZ2V0VXNlcklkRnJvbUFjY2Vzc1Rva2VuIiwiSnNvblJvdXRlcyIsInNlbmRSZXN1bHQiLCJoYXNJbnN0YW5jZVBlcm1pc3Npb25zIiwiX3BhcmVudF9pZCIsIl9wYXJlbnRfaW5zIiwiY2hhcnNldCIsIkJ1ZmZlciIsInNldEhlYWRlciIsInN0YXR1c0NvZGUiLCJlbmQiLCJhZGQiLCJpbnN0YW5jZV9uYW1lIiwiaSIsInJldF9zeW5jX3Rva2VuIiwic3BhY2VVc2VyIiwic3BhY2VVc2VyT3JnYW5pemF0aW9ucyIsInN5bmNfdG9rZW4iLCJBUElBdXRoZW50aWNhdGlvbkNoZWNrIiwiaGVhZGVycyIsImNhbk1vbml0b3IiLCJjYW5BZG1pbiIsIk51bWJlciIsIiRndCIsIiRuaW4iLCJpbmJveF91ZXJzIiwic2tpcCIsImxpbWl0IiwiY29waWVzIiwiYWxsQ3NzIiwiV2ViQXBwIiwiZ2V0UmVmcmVzaGFibGVBc3NldHMiLCJjc3MiLCJ1cmwiLCJwcm90b3R5cGUiLCJsIiwiZyIsIm0iLCJkIiwiayIsImdldEVhY2giLCJtaXhpbiIsImRlc3QiLCJzcmMiLCJoYW5kZXJVc2VyT2JqZWN0IiwiaHIiLCJzb3J0X25vIiwibW9iaWxlIiwid29ya19waG9uZSIsInBvc2l0aW9uIiwidXNlclJvbGVzIiwiaGFuZGVyT3JnT2JqZWN0IiwiaW5pdF9mb3JtdWxhX3ZhbHVlcyIsImF1dG9Gb3JtRG9jIiwiYXBwcm92ZXIiLCJfX3ZhbHVlcyIsInRhYmxlRmllbGRzIiwidGFibGVWYWx1ZXMiLCJmb3JtdWxhVGFibGVWYWx1ZXMiLCJfX3RhYmxlVmFsdWVzIiwidGFibGVmaWVsZCIsImdldEZvcm11bGFVc2VyT2JqZWN0cyIsImdldEZvcm11bGFPcmdPYmplY3RzIiwiZ2V0Rm9ybXVsYVVzZXJPYmplY3QiLCJnZXRIYW5kbGVyc01hbmFnZXIiLCJnZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyIsInVzZXJfaWRzIiwicm9sZV9pZHMiLCJhcHByb3ZlX3VzZXJzIiwiZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyIsInJvbGVfaWQiLCJnZXRIYW5kbGVyc0J5VXNlckFuZFJvbGUiLCJvcmdzIiwiZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUiLCJnZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzIiwib3JnX2lkcyIsImdldEhhbmRsZXJzQnlPcmdBbmRSb2xlcyIsInBhcmVudHMiLCJwb3NpdGlvbnMiLCJwYXJlbnRfaWQiLCJnZXRIYW5kbGVycyIsIl9hcHByb3ZlIiwiX3NwYWNlX3VzZXIiLCJfdHJhY2UiLCJhcHBsaWNhbnRTdXBlcmlvcnMiLCJhcHByb3Zlcl9vcmdfZmllbGQiLCJhcHByb3Zlcl9vcmdfaWRzIiwiYXBwcm92ZXJfdXNlcl9maWVsZCIsImFwcHJvdmVyX3VzZXJfaWRzIiwiY3VycmVudF9mbG93IiwiY3VycmVudF9mbG93X3ZlcnNpb24iLCJjdXJyZW50X2Zvcm0iLCJjdXJyZW50X3N0ZXBzIiwiZmllbGRfY29kZSIsImZpbmlzaGVkX3RyYWNlcyIsImZsb3dfcmV2IiwiZm9ybV9yZXYiLCJoYW5kbGVycyIsIm1heF9zdGFydERhdGVfdHJhY2UiLCJuZXdfYXBwcm92ZXJfdXNlcl9pZHMiLCJuZXdfb3JnX3VzZXJfaWRzIiwibmV3ZXN0X3ZhbHVlcyIsIm5leHRfc3RlcF91c2VycyIsIm9yZ19pZHNfbmFtZXMiLCJvcmdfdXNlcl9pZHMiLCJzcGFjZV91c2VyX2NvdW50Iiwic3VibWl0dGVyX3VzZXJfY291bnQiLCJ1bmZpbmlzaGVkX3RyYWNlIiwidXNlcl9pZHNfbmFtZXMiLCJ2YWxpZF9hcHByb3Zlcl9vcmdfaWRzIiwiaGlzdG9yeSIsImFwcHJvdmVyX3JvbGUiLCJyb2xlX2NvdW50IiwiY3VycmVudF9mbG93X2hpc3RvcnkiLCJmb3JtX2hpc3RvcnkiLCJmb3JtX2ZpZWxkIiwiZ2V0VXBkYXRlZFZhbHVlcyIsImNoZWNrX29yZ19jb3VudCIsImNoZWNrX29yZ3MiLCJvcmdfY2hpbGRyZW4iLCJvcmdfdXNlcnMiLCJ1bnNoaWZ0IiwiY2hlY2tfb3JnX3VzZXIiLCJvcmdfdXNlciIsImNoZWNrX3VzZXJfY291bnQiLCJhcHByb3ZlX3VzZXIiLCJjaGVja19hcHByb3ZlX3VzZXJfY291bnQiLCJhcHByb3Zlcl9vcmdzIiwiYXBwcm92ZXJfb3JnX2lkIiwidmFsaWRfYXBwcm92ZXJfb3JnX2lkIiwiY2hpbGRfb3JncyIsInZhbGlkX2FwcHJvdmVyX29yZyIsImNoaWxkX29yZyIsIm9yZ191c2VyX2lkIiwic3BhY2VfdXNlcl9pbmZvX2NvdW50IiwiYXBwcm92ZXJfdXNlcnMiLCJhcHByb3Zlcl91c2VyX2lkIiwiX3RyIiwiX2FwcCIsIm1hbmFnZXIiLCJteV9wZXJtaXNzaW9ucyIsIm9yZ3NfY2FuX2FkZCIsIm9yZ3NfY2FuX2FkbWluIiwib3Jnc19jYW5fbW9uaXRvciIsInVzZXJzX2Nhbl9hZGQiLCJ1c2Vyc19jYW5fYWRtaW4iLCJ1c2Vyc19jYW5fbW9uaXRvciIsInBlcm1zIiwibGFzdF92YWx1ZXMiLCJhcHByb3ZlX3ZhbHVlc19rZXlzIiwiY2hhbmdlVmFsdWVzIiwibGFzdF92YWx1ZXNfa2V5cyIsImlzRXF1YWwiLCJmbG93TWFuYWdlciIsImdldENhdGVnb3JpZXNGbG93cyIsImNhdGVnb3JpZUlkIiwiY2F0ZWdvcmllc0Zvcm1zIiwiZm9ybU1hbmFnZXIiLCJnZXRDYXRlZ29yaWVzRm9ybXMiLCJnZXRVbkNhdGVnb3JpZXNGbG93cyIsInVuQ2F0ZWdvcmllc0Zvcm1zIiwiZ2V0VW5DYXRlZ29yaWVzRm9ybXMiLCJfZmllbGRzIiwiY2F0ZWdvcnkiLCJzdGVwTWFuYWdlciIsImFsbG93QmF0Y2giLCJpc0V4aXN0U3RlcCIsImxvZ2dlciIsIkxvZ2dlciIsImhhbmRsZXJJbnN0YW5jZUJ5RmllbGRNYXAiLCJmaWVsZF9tYXAiLCJjdXJyZW50QXBwcm92ZXMiLCJjdXJyZW50VHJhY2VzIiwiZ2V0Q3VycmVudFRyYWNlIiwibmV4dF91c2VyX2lkcyIsImdldE5leHRTdGVwcyIsImluYm94X3VzZXIiLCJGSUVMRFMiLCJjYXRlZ29yeUZsb3dzIiwiaW5ib3hfaW5zdGFuY2VzIiwidW5DYXRlZ29yeUZsb3dzIiwic3VibWl0X2RhdGUiLCJjdXJyZW50U3RlcElkIiwicHVibGlzaCIsInJlYWR5IiwiY2F0ZWdvcmllcyIsImFwcCIsInB1Ymxpc2hDb21wb3NpdGUiLCJ0YWJsZU5hbWUiLCJpZHMiLCJPcHRpb25hbCIsInVuYmxvY2siLCJjaGlsZHJlbiIsImNyZWF0ZVRlbXBsYXRlRm9ybUFuZEZsb3ciLCJjb21wYW55X2lkIiwidmVyc2lvbklkIiwiaGFuZGxlIiwibGF0ZXN0Iiwib2JzZXJ2ZUNoYW5nZXMiLCJjaGFuZ2VkIiwiYWRkZWQiLCJvblN0b3AiLCJzdG9wIiwiZmxvd19pZHMiLCJkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzIiwiZGlzdHJpYnV0ZV90b19zZWxmIiwiZGlzdHJpYnV0ZV9lbmRfbm90aWZpY2F0aW9uIiwiZ2V0TWluaUluc3RhbmNlIiwiZ2V0TXlhcHByb3ZlTW9kaWZpZWQiLCJpbnN0YW5jZV9maWVsZHNfMCIsIm5lZWRDaGFuZ2UiLCJ0cmlnZ2VyQ2hhbmdlRmllbGRzIiwidHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcyIsIm15QXBwcm92ZU1vZGlmaWVkcyIsInJlYWRfZGF0ZSIsIl9pbnN0YW5jZUlkIiwiY2hhbmdlRmllbGRzIiwiX2NoYW5nZSIsIl9yZXYiLCJfa2V5IiwiX215X2FwcHJvdmVfbW9kaWZpZWRzIiwiaGFzIiwiZ2V0SW5zdGFuY2VUcmFjZXMiLCJfaW5zSWQiLCJhc3luY0xhc3RGaW5pc2hlZEFwcHJvdmUiLCJsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlIiwiaW5zdGFuY2VpZCIsImRhdGFNYXAiLCJvcGVyYXRpb24iLCJyYXdDb2xsZWN0aW9uIiwiYWdncmVnYXRlIiwidG9BcnJheSIsImRvYyIsImdldE15TGFzdEZpbmlzaGVkQXBwcm92ZSIsImdldFN0ZXBDdXJyZW50TmFtZSIsIm5vdEZpbmlzaGVkVHJhY2VzIiwic3RlcEN1cnJlbnROYW1lIiwiJHNsaWNlIiwibXlMYXN0RmluaXNoZWRBcHByb3ZlIiwiYWdlbnRfdXNlcl9uYW1lIiwibXlfZmluaXNoX2RhdGUiLCJpc19jYyIsImNjX2NvdW50IiwiaW5zdGFuY2VfaWRzIiwicmVsYXRlZF9pbnN0YW5jZV9pZHMiLCJfYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSIsIl9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlIiwiX2l0ZW1zIiwiJG1hdGNoIiwiJGdyb3VwIiwiJHN1bSIsIl9jaGFuZ2VEYXRhIiwiX2Zsb3dzRGF0YSIsIl9pbml0IiwiZGF0YUl0ZW0iLCJhY3Rpb24iLCJmbG93X2luc3RhbmNlIiwib2JzZXJ2ZSIsIkNyZWF0b3IiLCJnZXRDb2xsZWN0aW9uIiwid29ya2Zsb3dUZW1wbGF0ZSIsImFic29sdXRlX3BhdGhfY24iLCJhYnNvbHV0ZV9wYXRoX3VzIiwiZmlsZXNMaXN0X2NuIiwiZmlsZXNMaXN0X3VzIiwibWltZSIsInBhdGhfY24iLCJwYXRoX3VzIiwicmVhZEZpbGVMaXN0IiwicGF0aERpciIsImZpbGVzTGlzdCIsImZpbGVzIiwicmVhZGRpclN5bmMiLCJzdGF0Iiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsIndvcmtmbG93VGVtcGxhdGVzIiwiZXhpc3RzU3luYyIsImZpbGUiLCJnZXRUeXBlIiwicmVhZEZpbGVTeW5jIiwiZ29fbmV4dCIsInJ1bGUiLCJzY2hlZHVsZSIsImNyb24iLCJhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24iLCJzY2hlZHVsZUpvYiIsImJpbmRFbnZpcm9ubWVudCIsInByb2Nlc3NfZGVsZWdhdGlvbl9ydWxlcyIsImVuYWJsZWQiLCJlbmRfdGltZSIsIiRsdGUiLCJ0aW1lb3V0X2F1dG9fc3VibWl0IiwidGltZW91dEF1dG9TdWJtaXQiLCJzcGVjaWZ5VXNlcklkcyIsImdldFVzZXJzIiwiYXBwbGljYW50SWQiLCJhcHByb3ZlUm9sZUlkcyIsImdldFVzZXIiLCJnZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyIsInVzZXJGaWVsZCIsInVzZXJGaWVsZFZhbHVlIiwib3JnQ2hpbGRyZW5zIiwib3JnRmllbGQiLCJvcmdGaWVsZFZhbHVlIiwiZ2V0T3JnYW5pemF0aW9ucyIsImdldE9yZ2FuaXphdGlvbnNDaGlsZHJlbnMiLCJnZXRPcmdhbml6YXRpb24iLCJnZXRPcmdhbml6YXRpb25DaGlsZHJlbnMiLCJnZXRPcmdhbml6YXRpb25zVXNlcnMiLCJvcmdGaWVsZFVzZXJzIiwic3BlY2lmeU9yZ0lkcyIsInNwZWNpZnlPcmdzIiwic3BlY2lmeU9yZ0NoaWxkcmVucyIsImFwcHJvdmVyUm9sZUlkcyIsImdldFJvbGVVc2Vyc0J5VXNlcnNBbmRSb2xlcyIsInN1IiwidW5pcVVzZXJzIiwidXNlcklkcyIsInNwYWNlVXNlcnMiLCJmb3JtdWxhX3ZhbHVlcyIsImVycm9ycyIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJjb21wYW55SWQiLCJzcGFjZUlkcyIsInNwYWNlc1F1ZXJ5IiwiY2hlY2tfYXV0aG9yaXphdGlvbiIsImlzX2RlbGV0ZWQiLCJoZWxwX3RleHQiLCJuYW1lX2Zvcm11bGEiLCJjb2RlX2Zvcm11bGEiLCJjdXJyZW50X25vIiwiZXJyb3JfbWVzc2FnZSIsIlNwYWNlVXNlcnMiLCJVc2VycyIsIkZvcm1zIiwiRmxvd3MiLCJPcmdhbml6YXRpb25zIiwiUG9zaXRpb25zIiwiUm9sZXMiLCJDYXRlZ29yaWVzIiwiU3BhY2VzIiwiaGFzaERhdGEiLCJhcHByb3ZlX2Zyb21fY2xpZW50Iiwid29ya2Zsb3dfZW5naW5lIiwiaW5zZXJ0ZWRfaW5zdGFuY2VzIiwiaW5zdGFuY2VfZnJvbV9jbGllbnQiLCJuZXdfaW5zIiwibmV3X2luc19pZCIsImNyZWF0ZV9pbnN0YW5jZSIsImluc2VydHMiLCJkZWxldGVfb2JqIiwiZ2V0U3BhY2UiLCJzdWJtaXRfaW5zdGFuY2UiLCJhbGVydHMiLCJkaXN0cmlidXRlZEluc3RhbmNlc1JlbWluZCIsImZsb3dfdmVyX2VuZF9zdGVwIiwiZmxvd192ZXJzIiwiaW5zdGFuY2VfZmxvd192ZXIiLCJpbnN0YW5jZV90cmFjZSIsIm9sZF9jY191c2VycyIsIm9sZF9pbmJveF91c2VycyIsIm9sZF9vdXRib3hfdXNlcnMiLCJzcGFjZV91c2VyX29yZ19pbmZvIiwidGVtcFVzZXJzIiwidGVybWluYXRlX3JlYXNvbiIsImZfdmVyIiwiZl9zdGVwIiwiY29zdF90aW1lIiwibmZ0X2FwcHJvdmUiLCJjdXJyZW50X3N0ZXBfYXV0b19zdWJtaXQiLCJzZW5kX21lc3NhZ2VfY3VycmVudF91c2VyIiwiX3VzZXJzIiwiYXBwcm92ZV91c2Vyc19oYW5kbGVycyIsImFzc2lnbmVlX2FwcHIiLCJjdXJyZW50X3NwYWNlX3VzZXIiLCJjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uIiwiaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQiLCJsYXN0X3RyYWNlX2Zyb21fY2xpZW50Iiwibm90X2luX2luYm94X3VzZXJzIiwicmVhc3NpZ25fcmVhc29uIiwiZGlmZmVyZW5jZSIsIm5ld19hcHByIiwibmV3X3VzZXIiLCJ1c2VyX29yZ2FuaXphdGlvbiIsImFoIiwiY3VycmVudF9zZXRwIiwiY3VycmVudF9zZXRwX3R5cGUiLCJuZXh0X3N0ZXAiLCJuZXh0X3N0ZXBfbmFtZSIsIm5leHRfc3RlcF90eXBlIiwicmVsb2NhdGVfYXBwciIsInJlbG9jYXRlX2NvbW1lbnQiLCJyZWxvY2F0ZV9pbmJveF91c2VycyIsInJlbG9jYXRlX25leHRfc3RlcCIsInNhbWVUcmFjZXMiLCJzaWduU2hvd0FwcHJvdmVJZCIsInRhIiwidGkiLCJnZXRDdXJyZW50U3RlcEF1dG9TdWJtaXQiLCJsaW5lcyIsImlzSW5zdGFuY2VGaW5pc2hlZEFuZE5vdEFyY2hpZXZlZCIsImlzSW5zdGFuY2VTdWJtaXR0ZXJPckFwcGxpY2FudE9yU3BhY2VBZG1pbiIsImNvbm5lY3RIYW5kbGVycyIsInVzZSIsImVqcyIsImVqc0xpbnQiLCJlbmRfZGF0ZSIsImVycm9yX29iaiIsImZvcm1fbmFtZSIsImluc190b194bHMiLCJsYXN0X21vbnRoX2RhdGUiLCJyZXQiLCJ0aW1lem9uZW9mZnNldCIsInBhcnNlSW50IiwiJGd0ZSIsIiRhbmQiLCJsaW50IiwiYXV0aF90b2tlbiIsImZvcm1pZHMiLCJpc19hZG1pbiIsImdldF9TcGFjZUNoYW5nZVNldCIsImxhc3RfdHJhY2VfaWQiLCJvcmdfaW5mbyIsInByZXZpb3VzX3N0ZXAiLCJwcmV2aW91c190cmFjZSIsInByZXZpb3VzX3RyYWNlX2FwcHJvdmVzIiwicHJldmlvdXNfdHJhY2VfaWQiLCJwcmV2aW91c190cmFjZV9uYW1lIiwicHJldmlvdXNfdHJhY2Vfc3RlcF9pZCIsInJldHJpZXZlX2FwcHJvdmUiLCJyZXRyaWV2ZV9jb21tZW50IiwicmV0cmlldmVfdHlwZSIsInRoZV90cmFjZSIsInJldHJpZXZlX2FwcHIiLCJvbGRfc3BhY2VfaWQiLCJmb3J3YXJkX3VzZXJzIiwibm9fcGVybWlzc2lvbl91c2VyX2lkcyIsInVpZCIsIm5vX3Blcm1pc3Npb25fdXNlcnNfbmFtZSIsIm5ld19pbnNfaWRzIiwiY3VycmVudF90cmFjZV9pZCIsImZvcndhcmRfYXBwcm92ZXMiLCJvbGRfdmFsdWVzIiwibmV3X3ZhbHVlcyIsIm9sZF9mb3JtIiwib2xkX2Zvcm1fdmVyc2lvbiIsIm9sZF9maWVsZHMiLCJjb21tb25fZmllbGRzIiwic2VsZWN0X3RvX2lucHV0X2ZpZWxkcyIsImV4aXN0c19maWVsZCIsInNlbGVjdF9pbnB1dF9maWVsZCIsIm9sZF92Iiwib2xkX211bHRpU2VsZWN0ZWQiLCJuZXdfbXVsdGlTZWxlY3RlZCIsIm9sZF90YWJsZV9yb3dfdmFsdWVzIiwibmV3X3RhYmxlX3Jvd192YWx1ZXMiLCJyZWNvcmRfbmVlZCIsIkZPTkRTSUQiLCJpc2NyaXB0IiwiY2F0ZWdvcnlfbmFtZSIsImdldENhdGVnb3J5IiwiaW5zX29iaiIsIl9tYWtlTmV3SUQiLCJzdWJtaXR0ZXJfbmFtZSIsImZvcndhcmRfZnJvbV9pbnN0YW5jZSIsInRyYWNlX29iaiIsImFwcHJfb2JqIiwiYXV0b19yZW1pbmQiLCJmbG93X25hbWUiLCJjb2xsZWN0aW9uIiwiaW5zdGFuY2VIdG1sIiwiaW5zdGFuY2VGaWxlIiwiRlMiLCJGaWxlIiwiYXR0YWNoRGF0YSIsImZyb20iLCJzaXplIiwib3duZXIiLCJvd25lcl9uYW1lIiwiZmlsZU9iaiIsIm1haW4iLCJuZXdGaWxlIiwib3JpZ2luYWwiLCJ1cGRhdGVfcmVhZCIsInJlZGlyZWN0VG8iLCJ3cml0ZUhlYWQiLCJhdHRhY2giLCJub19saW1pdF9jb3VudCIsInJlZjUiLCJyZXN1bHRfaW5zdGFuY2VzIiwic3BhY2VfbmFtZXMiLCJzcGVjaWFsX3VzZXJfaWQiLCJ1c2VyaWQiLCJ1c2VybmFtZSIsIndvcmtmbG93X2NhdGVnb3JpZXMiLCJyZWY2IiwicmVmNyIsInN0YXR1cyIsImF1dGhUb2tlbiIsInN0cmluZ2lmeSIsImlzX3BhaWQiLCJhcHBsaWNhbnRJbmZvIiwiYXBwbGljYW50X3VzZXJuYW1lIiwidXNlcl9hY2NlcHRlZCIsInBlcm1fdXNlcnMiLCJuZXh0X3N0ZXBfaWQiLCJyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMiLCJnZXRGb3JtIiwiY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUiLCJzdGVwbmFtZSIsIiRlbGVtTWF0Y2giLCJCdXNib3kiLCJGaWJlciIsInBhcnNlRmlsZXMiLCJidXNib3kiLCJpbWFnZSIsImZpZWxkbmFtZSIsImZpbGVuYW1lIiwiZW5jb2RpbmciLCJtaW1ldHlwZSIsImJ1ZmZlcnMiLCJtaW1lVHlwZSIsInRvTG93ZXJDYXNlIiwicG9wIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaXNfcHJpdmF0ZSIsImxvY2tlZF9ieSIsImxvY2tlZF9ieV9uYW1lIiwiYXR0YWNoX2lkIiwiY29sdW1ucyIsImZvcndhcmRfaW5zIiwiZm9yd2FyZF9pbnNfdmFsdWVzIiwib3JpZ2luYWxfaW5zIiwib3JpZ2luYWxfaW5zX2ZpZWxkcyIsIm9yaWdpbmFsX2luc19mb3JtIiwib3JpZ2luYWxfaW5zX2lkIiwib3JpZ2luYWxfc3VidGFibGVfZmllbGRzIiwicmVmOCIsInJlZjkiLCJyb3dfZGF0YSIsInN1YlRhYmxlIiwidGFibGVfZGF0YSIsImNvbHVtbiIsIm9yaWdpbmFsX2luc19maWVsZCIsIm9oIiwiYV90YWJsZSIsImFfdGFibGVfdmFsdWVzIiwiY29sdW1uX2xpc3QiLCJkX2lucyIsImRfaW5zX2ZpZWxkcyIsImRfaW5zX2Zvcm0iLCJkX2luc192YWx1ZXMiLCJkX21hdGNoX2NvbCIsImRfbWF0Y2hfY29sX2ZpZWxkIiwiZF9tYXRjaF9jb2xfZmllbGRzIiwiZF9zdWJ0YWJsZV9maWVsZHMiLCJkX3RhYmxlIiwiZF90YWJsZV92YWx1ZXMiLCJvX2lucyIsIm9faW5zX2ZpZWxkcyIsIm9faW5zX2Zvcm0iLCJvX2luc19pZCIsIm9fbWF0Y2hfY29sIiwib19tYXRjaF9jb2xfZmllbGQiLCJvX21hdGNoX2NvbF9maWVsZHMiLCJvX3N1YnRhYmxlX2ZpZWxkcyIsIm9fdGFibGUiLCJyZWYxMCIsInJlZjExIiwicmVmMTIiLCJyZWYxMyIsInJlZjE0IiwicmVmMTUiLCJyZWYxNiIsInJlZjE3IiwicmVmMTgiLCJyZWYxOSIsInJlZjIwIiwicmVmMjEiLCJyZWYyMiIsIm9UYWJsZSIsImRUYWJsZSIsIm9NYXRjaENvbCIsImRNYXRjaENvbCIsInJlZmlsbENvbCIsImFUYWJsZSIsIm9faW5zX2ZpZWxkIiwiZF9pbnNfZmllbGQiLCJkaCIsImFfcm93IiwicmVzdWx0cyIsImNvbCIsImNvbHMiLCJkX2NvbCIsImRfY29sX2ZpZWxkcyIsIm9fY29sIiwib19jb2xfZmllbGRzIiwiZF9yb3ciLCJoYXNfb2JqIiwib19yb3ciLCJuZXdfdGFibGVfdmFsdWVzIiwic29ydF9jb2wiLCJzdWJfdGFibGUiLCJzdWJfdGFibGVfdmFsdWVzIiwic3VtX2NvbCIsInN1bUNvbCIsInNvcnRDb2wiLCJzaW5nbGVDb2xzIiwiSnNvblNvcnQiLCJqc29uQXJyIiwiYXNjIiwiaiIsImpsIiwidGVtcCIsImlzRGV2ZWxvcG1lbnQiLCJ0b191c2VycyIsIm9yZ0lkcyIsIlRhYnVsYXJUYWJsZXMiLCJyZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyIiwiVGFidWxhciIsIlRhYmxlIiwib3JkZXJhYmxlIiwicmVuZGVyIiwiaW5wdXQiLCJzdGVwX2N1cnJlbnRfbmFtZSIsImRvbSIsImxlbmd0aENoYW5nZSIsImV4dHJhRmllbGRzIiwicGFnZUxlbmd0aCIsImluZm8iLCJzZWFyY2hpbmciLCJyZXNwb25zaXZlIiwiZGV0YWlscyIsImF1dG9XaWR0aCIsImNoYW5nZVNlbGVjdG9yIiwiR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMiLCJfZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMiLCJfZ2V0X291dGJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zIiwiX2hhbmRsZUxpc3RGaWVsZHMiLCJpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyIiwibmV3SW5zdGFuY2VzTGlzdFRhYnVsYXIiLCJ1cGRhdGVUYWJ1bGFyVGl0bGUiLCJzdWJzIiwiU3Vic01hbmFnZXIiLCJpbnNfZmllbGRzIiwicHViIiwib25VbmxvYWQiLCJpbnN0YW5jZV9saXN0IiwiX3RhYmxlQ29sdW1ucyIsImRyYXdDYWxsYmFjayIsImVsbGlwc2lzTGluayIsImVtcHR5VGQiLCJjb2xTcGFuIiwiaXNQYWQiLCJwZXJmZWN0U2Nyb2xsYmFyIiwib0luc3RhbmNlIiwiYXR0ciIsImNsaWNrIiwiZ29QYWdlIiwiaGVpZ2h0IiwicGFnZXMiLCJNYXRoIiwiY2VpbCIsImZuUmVjb3Jkc0Rpc3BsYXkiLCJfaURpc3BsYXlMZW5ndGgiLCJEYXRhVGFibGUiLCJwYWdlIiwiZHJhdyIsImJsdXIiLCJjdXJyZW50UGFnZSIsImtleWRvd24iLCJrZXlDb2RlIiwiY3JlYXRlZFJvdyIsInJvdyIsImRhdGFJbmRleCIsIkZsb3dSb3V0ZXIiLCJzZXRBdHRyaWJ1dGUiLCJhZ2VudF92aWV3IiwiY2NfdmlldyIsImluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MiLCJtb2RpZmllZEZyb21Ob3ciLCJtb2RpZmllZFN0cmluZyIsInByaW9yaXR5SWNvbiIsInByaW9yaXR5SWNvbkNsYXNzIiwicHJpb3JpdHlWYWx1ZSIsInN0ZXBfY3VycmVudF9uYW1lX3ZpZXciLCJ1bnJlYWQiLCJtb21lbnRSZWFjdGl2ZUZyb21Ob3ciLCJ2aXNpYmxlIiwiY2NfdGFnIiwibGVuZ3RoTWVudSIsInBhZ2luZ1R5cGUiLCJpc19saXN0X2Rpc3BsYXkiLCJmaWx0ZXJlZFJlY29yZElkcyIsIm9sZF9maWx0ZXJlZFJlY29yZElkcyIsImZpbmRPcHRpb25zIiwiYWdfc29ydCIsImFnZ3JlZ2F0ZV9vcGVyYXRpb24iLCJhc3luY19hZ2dyZWdhdGUiLCJzMV8wIiwiczFfMSIsIiRwcm9qZWN0IiwiJHVud2luZCIsIiRmaXJzdCIsIiRzb3J0IiwiJHNraXAiLCIkbGltaXQiLCJjYiIsIiRsYXN0Iiwib3V0Ym94X2luc3RhbmNlcyIsImZsb3dJbnN0YW5jZXMiLCJSZWFjdGl2ZVZhciIsImF1dG9ydW4iLCJfY2hhbmdlT3JkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGdCQUFKO0FBQXFCQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxvQ0FBWixFQUFpRDtBQUFDRixrQkFBZ0IsQ0FBQ0csQ0FBRCxFQUFHO0FBQUNILG9CQUFnQixHQUFDRyxDQUFqQjtBQUFtQjs7QUFBeEMsQ0FBakQsRUFBMkYsQ0FBM0Y7QUFDckJILGdCQUFnQixDQUFDO0FBQ2hCLG1CQUFpQixRQUREO0FBRWhCSSxTQUFPLEVBQUUsUUFGTztBQUdoQixZQUFVLFNBSE07QUFJaEJDLFFBQU0sRUFBRSxRQUpRO0FBS2hCLGdCQUFjO0FBTEUsQ0FBRCxFQU1iLGtCQU5hLENBQWhCLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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TUN1R1UsSUR2R1YsR0N1R2lCLENBQUNrSCxPQUFPdEcsSUFBSXlGLE9BQVosS0FBd0IsSUFBeEIsR0FBK0JhLEtEdkc4Q2xILE1DdUc3RSxHRHZHNkUsTUFBOUYsR0FBOEYsTUFBOUY7QUFDQSxhQUFPQSxNQUFQO0FBTEQ7QUFBQSxHQUREO0FDZ0hBLEMiLCJmaWxlIjoiL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja05wbVZlcnNpb25zIH0gZnJvbSAnbWV0ZW9yL3RtZWFzZGF5OmNoZWNrLW5wbS12ZXJzaW9ucyc7XHJcbmNoZWNrTnBtVmVyc2lvbnMoe1xyXG5cdFwibm9kZS1zY2hlZHVsZVwiOiBcIl4xLjMuMVwiLFxyXG5cdGNvb2tpZXM6IFwiXjAuNi4yXCIsXHJcblx0XCJ4bWwyanNcIjogXCJeMC40LjE5XCIsXHJcblx0bWtkaXJwOiBcIl4wLjMuNVwiLFxyXG5cdFwic3ByaW50Zi1qc1wiOiBcIl4xLjAuM1wiLFxyXG59LCAnc3RlZWRvczp3b3JrZmxvdycpOyIsIldvcmtmbG93ID0ge31cclxuXHJcbkBJbWFnZVNpZ24gPSB7fTtcclxuXHJcbkBUcmFjZXNUZW1wbGF0ZSA9IHt9O1xyXG5cclxuQEluc3RhbmNlZm9ybVRlbXBsYXRlID0ge307XHJcblxyXG5ASW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUgPSB7fTtcclxuXHJcbkBJbnN0YW5jZVNpZ25UZXh0ID0ge31cclxuXHJcbkBSZWxhdGVkSW5zdGFuY2VzID0ge31cclxuXHJcbkBJbnN0YW5jZU1hY3JvID0ge2NvbnRleHQ6IHt9fVxyXG5cclxuQFRyYWNlc01hbmFnZXIgPSB7fTtcclxuXHJcbmlmIE1ldGVvci5pc0NsaWVudFxyXG5cdE1ldGVvci5zdGFydHVwIC0+XHJcblx0XHR3b3JrZmxvd190aHJlZV9jb2x1bW5zID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ3b3JrZmxvd190aHJlZV9jb2x1bW5zXCIpXHJcblx0XHRpZiB3b3JrZmxvd190aHJlZV9jb2x1bW5zIGFuZCB3b3JrZmxvd190aHJlZV9jb2x1bW5zID09IFwib2ZmXCJcclxuXHRcdFx0JChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJ0aHJlZS1jb2x1bW5zXCIpXHJcblx0XHRlbHNlXHJcblx0XHRcdCQoXCJib2R5XCIpLmFkZENsYXNzKFwidGhyZWUtY29sdW1uc1wiKVxyXG5cclxuXHJcbkluc3RhbmNlU2lnblRleHQuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcgPSAoZmllbGRfZm9ybXVsYSktPlxyXG5cdHJldHVybiAoZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInt0cmFjZXMuXCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA+IC0xIHx8IGZpZWxkX2Zvcm11bGE/LmluZGV4T2YoXCJ7eWlqaWFubGFuOlwiKSA+IC0xIHx8IGZpZWxkX2Zvcm11bGE/LmluZGV4T2YoXCJ7XFxcInlpamlhbmxhblxcXCI6XCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInsneWlqaWFubGFuJzpcIikgPiAtMSlcclxuXHJcbkluc3RhbmNlU2lnblRleHQuaW5jbHVkZXNPcGluaW9uRmllbGQgPSAoZm9ybSwgZm9ybV92ZXJzaW9uKS0+XHJcblx0ZmllbGRfZm9ybXVsYXMgPSBuZXcgQXJyYXkoKTtcclxuXHJcblx0X2Zvcm1fdmVyc2lvbiA9IHt9XHJcblxyXG5cdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0X2Zvcm1fdmVyc2lvbiA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oZGIuZm9ybXMuZmluZE9uZSh7X2lkOiBmb3JtfSksIGZvcm1fdmVyc2lvbilcclxuXHRlbHNlXHJcblx0XHRfZm9ybV92ZXJzaW9uID0gZGIuZm9ybV92ZXJzaW9ucy5maW5kT25lKHtfaWQ6IGZvcm1fdmVyc2lvbiwgZm9ybTogZm9ybX0pXHJcblxyXG5cdGZpZWxkcyA9IF9mb3JtX3ZlcnNpb24/LmZpZWxkcyB8fCBbXVxyXG5cclxuXHRmaWVsZHMuZm9yRWFjaCAoZiktPlxyXG5cdFx0aWYgZi50eXBlID09ICd0YWJsZSdcclxuXHRcdFx0Y29uc29sZS5sb2cgJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJ1xyXG5cdFx0ZWxzZSBpZiBmLnR5cGUgPT0gJ3NlY3Rpb24nXHJcblx0XHRcdGY/LmZpZWxkcz8uZm9yRWFjaCAoZjEpLT5cclxuXHRcdFx0XHRmaWVsZF9mb3JtdWxhcy5wdXNoIGYxLmZvcm11bGFcclxuXHRcdGVsc2VcclxuXHRcdFx0ZmllbGRfZm9ybXVsYXMucHVzaCBmLmZvcm11bGFcclxuXHJcblx0Xy5zb21lIGZpZWxkX2Zvcm11bGFzLCAoZmllbGRfZm9ybXVsYSktPlxyXG5cdFx0cmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSlcclxuXHJcbiIsIiAgICAgICAgICAgICBcblxuV29ya2Zsb3cgPSB7fTtcblxudGhpcy5JbWFnZVNpZ24gPSB7fTtcblxudGhpcy5UcmFjZXNUZW1wbGF0ZSA9IHt9O1xuXG50aGlzLkluc3RhbmNlZm9ybVRlbXBsYXRlID0ge307XG5cbnRoaXMuSW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUgPSB7fTtcblxudGhpcy5JbnN0YW5jZVNpZ25UZXh0ID0ge307XG5cbnRoaXMuUmVsYXRlZEluc3RhbmNlcyA9IHt9O1xuXG50aGlzLkluc3RhbmNlTWFjcm8gPSB7XG4gIGNvbnRleHQ6IHt9XG59O1xuXG50aGlzLlRyYWNlc01hbmFnZXIgPSB7fTtcblxuaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICBNZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgICB2YXIgd29ya2Zsb3dfdGhyZWVfY29sdW1ucztcbiAgICB3b3JrZmxvd190aHJlZV9jb2x1bW5zID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ3b3JrZmxvd190aHJlZV9jb2x1bW5zXCIpO1xuICAgIGlmICh3b3JrZmxvd190aHJlZV9jb2x1bW5zICYmIHdvcmtmbG93X3RocmVlX2NvbHVtbnMgPT09IFwib2ZmXCIpIHtcbiAgICAgIHJldHVybiAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcInRocmVlLWNvbHVtbnNcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkKFwiYm9keVwiKS5hZGRDbGFzcyhcInRocmVlLWNvbHVtbnNcIik7XG4gICAgfVxuICB9KTtcbn1cblxuSW5zdGFuY2VTaWduVGV4dC5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyA9IGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEpIHtcbiAgcmV0dXJuIChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7dHJhY2VzLlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xIHx8IChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7eWlqaWFubGFuOlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie1xcXCJ5aWppYW5sYW5cXFwiOlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwieyd5aWppYW5sYW4nOlwiKSA6IHZvaWQgMCkgPiAtMTtcbn07XG5cbkluc3RhbmNlU2lnblRleHQuaW5jbHVkZXNPcGluaW9uRmllbGQgPSBmdW5jdGlvbihmb3JtLCBmb3JtX3ZlcnNpb24pIHtcbiAgdmFyIF9mb3JtX3ZlcnNpb24sIGZpZWxkX2Zvcm11bGFzLCBmaWVsZHM7XG4gIGZpZWxkX2Zvcm11bGFzID0gbmV3IEFycmF5KCk7XG4gIF9mb3JtX3ZlcnNpb24gPSB7fTtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIF9mb3JtX3ZlcnNpb24gPSB1dWZsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmb3JtXG4gICAgfSksIGZvcm1fdmVyc2lvbik7XG4gIH0gZWxzZSB7XG4gICAgX2Zvcm1fdmVyc2lvbiA9IGRiLmZvcm1fdmVyc2lvbnMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZvcm1fdmVyc2lvbixcbiAgICAgIGZvcm06IGZvcm1cbiAgICB9KTtcbiAgfVxuICBmaWVsZHMgPSAoX2Zvcm1fdmVyc2lvbiAhPSBudWxsID8gX2Zvcm1fdmVyc2lvbi5maWVsZHMgOiB2b2lkIDApIHx8IFtdO1xuICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgdmFyIHJlZjtcbiAgICBpZiAoZi50eXBlID09PSAndGFibGUnKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJyk7XG4gICAgfSBlbHNlIGlmIChmLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgcmV0dXJuIGYgIT0gbnVsbCA/IChyZWYgPSBmLmZpZWxkcykgIT0gbnVsbCA/IHJlZi5mb3JFYWNoKGZ1bmN0aW9uKGYxKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9mb3JtdWxhcy5wdXNoKGYxLmZvcm11bGEpO1xuICAgICAgfSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaWVsZF9mb3JtdWxhcy5wdXNoKGYuZm9ybXVsYSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIF8uc29tZShmaWVsZF9mb3JtdWxhcywgZnVuY3Rpb24oZmllbGRfZm9ybXVsYSkge1xuICAgIHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpO1xuICB9KTtcbn07XG4iLCJkYi5hdXRoX3Rva2VucyA9IG5ldyBNZXRlb3IuQ29sbGVjdGlvbignYXV0aF90b2tlbnMnKSIsIkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZSA9IHt9O1xyXG5cclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbnN0YW5jZV9hdHRhY2htZW50ID0gXCJcIlwiXHJcblx0PHRyPlxyXG5cdFx0PHRkIGNsYXNzPVwiaW5zLWF0dGFjaC12aWV3XCI+XHJcblx0XHRcdDxhIGhyZWY9XCJ7e2luc19hdHRhY2hfZG93bmxvYWRfdXJsIF9pZCBhYnNvbHV0ZX19XCIgY2xhc3M9XCJpbnNfYXR0YWNoX2hyZWZcIiB0YXJnZXQ9XCJfcGFyZW50XCIgZGF0YS1uYW1lPVwie3t0aGlzLm5hbWV9fVwiIGRhdGEtdHlwZT1cInt7dGhpcy5vcmlnaW5hbC50eXBlfX1cIiBkYXRhLWlkPVwie3tfaWR9fVwiPnt7dGhpcy5uYW1lfX08L2E+XHJcblx0XHQ8L3RkPlxyXG5cdDwvdHI+XHJcblwiXCJcIlxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmU2VsZWN0VXNlclJlYWQgPSBcIlwiXCJcclxuXHQ8ZGl2IGNsYXNzPSdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50Jz57e3ZhbHVlfX08L2Rpdj5cclxuXCJcIlwiXHJcblxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwUmVhZCA9IFwiXCJcIlxyXG5cdDxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPlxyXG5cdFx0e3sjd2l0aCBnZXRGaWVsZCB0aGlzLm5hbWV9fVxyXG5cdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VjdGlvbid9fVxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0nc2VjdGlvbiBjYWxsb3V0IGNhbGxvdXQtZGVmYXVsdCc+XHJcblx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndGFibGUnfX1cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbCBwYW5lbC1kZWZhdWx0IHN0ZWVkb3MtdGFibGVcIj5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsLWJvZHlcIiBzdHlsZT1cInBhZGRpbmc6MHB4O1wiPlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbC1oZWFkaW5nXCIgPlxyXG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsJz57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImRlc2NyaXB0aW9uXCI+e3t7ZGVzY3JpcHRpb259fX08L3NwYW4+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInJlYWRvbmx5LXRhYmxlXCIgc3R5bGU9XCJwYWRkaW5nOjBweDtvdmVyZmxvdy14OmF1dG87XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDx0YWJsZSB0eXBlPSd0YWJsZScgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1jb25kZW5zZWQgYXV0b2Zvcm0tdGFibGVcIiBzdHlsZT0nbWFyZ2luLWJvdHRvbTowcHg7JyB7e3RoaXMuYXR0c319IGlkPVwie3t0aGlzLmNvZGV9fVRhYmxlXCIgbmFtZT1cInt7dGhpcy5jb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e3RoaXMubmFtZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PHRoZWFkIGlkPVwie3t0aGlzLm5hbWV9fVRoZWFkXCIgbmFtZT1cInt7dGhpcy5uYW1lfX1UaGVhZFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVUaGVhZCB0aGlzfX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC90aGVhZD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGJvZHkgaWQ9XCJ7e3RoaXMubmFtZX19VGJvZHlcIiBuYW1lPVwie3t0aGlzLm5hbWV9fVRib2R5XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZUJvZHkgdGhpc319fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvdGJvZHk+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvdGFibGU+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdHt7I2lmIHNob3dMYWJlbH19XHJcblx0XHRcdFx0XHRcdDxsYWJlbD57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSd7e2dldENmQ2xhc3MgdGhpc319IGZvcm0tY29udHJvbCcgcmVhZG9ubHkgZGlzYWJsZWQ+e3t7Z2V0VmFsdWUgY29kZX19fTwvZGl2PlxyXG5cdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0e3svaWZ9fVxyXG5cdFx0e3svd2l0aH19XHJcblx0PC9kaXY+XHJcblwiXCJcIlxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwID0gXCJcIlwiXHJcblxyXG5cdHt7I3dpdGggZ2V0RmllbGQgdGhpcy5uYW1lfX1cclxuXHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3NlY3Rpb24nfX1cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0nc2VjdGlvbiBjYWxsb3V0IGNhbGxvdXQtZGVmYXVsdCc+XHJcblx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuICBcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsIHBhbmVsLWRlZmF1bHQgc3RlZWRvcy10YWJsZVwiPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiIHN0eWxlPVwicGFkZGluZzowcHg7XCI+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsLWhlYWRpbmdcIiA+XHJcblx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwnPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZGVzY3JpcHRpb25cIj57e3tkZXNjcmlwdGlvbn19fTwvc3Bhbj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicmVhZG9ubHktdGFibGVcIiBzdHlsZT1cInBhZGRpbmc6MHB4O292ZXJmbG93LXg6YXV0bztcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRhYmxlIHR5cGU9J3RhYmxlJyBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVwiIHN0eWxlPSdtYXJnaW4tYm90dG9tOjBweDsnIHt7dGhpcy5hdHRzfX0gaWQ9XCJ7e3RoaXMuY29kZX19VGFibGVcIiBuYW1lPVwie3t0aGlzLmNvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7dGhpcy5uYW1lfX1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGhlYWQgaWQ9XCJ7e3RoaXMubmFtZX19VGhlYWRcIiBuYW1lPVwie3t0aGlzLm5hbWV9fVRoZWFkXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZVRoZWFkIHRoaXN9fX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3RoZWFkPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDx0Ym9keSBpZD1cInt7dGhpcy5uYW1lfX1UYm9keVwiIG5hbWU9XCJ7e3RoaXMubmFtZX19VGJvZHlcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlQm9keSB0aGlzfX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2lucHV0J319XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCIgZGF0YS1yZXF1aXJlZD1cInt7I2lmIGlzX3JlcXVpcmVkfX10cnVle3svaWZ9fVwiPlxyXG5cdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInRleHRcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIge3tnZXRQZXJtaXNzaW9ucyBjb2RlfX0gZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdudW1iZXInfX1cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJudW1iZXJcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlJ319XHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXR5cGU9XCJkYXRlXCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlVGltZSd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInRleHRcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS10eXBlPSdkYXRldGltZScgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdwYXNzd29yZCd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VsZWN0J319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxzZWxlY3QgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxvcHRpb24gdmFsdWU9XCJ7e3ZhbHVlfX1cIj57e2xhYmVsfX08L29wdGlvbj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9zZWxlY3Q+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3JhZGlvJ319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJhZi1yYWRpby1ncm91cFwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNlYWNoIG9wdGlvbnMgdGhpc319XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lIGZpeC1pbmRlbnRcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJ7e3ZhbHVlfX1cIiBuYW1lPVwie3suLi9jb2RlfX1cIiBjbGFzcz1cInJhZGlvLWlubGluZSBmaXgtaW5kZW50XCI+IHt7bGFiZWx9fTwvbGFiZWw+XHJcbiAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxyXG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ211bHRpU2VsZWN0J319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJhZi1jaGVja2JveC1ncm91cFwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJ7e3ZhbHVlfX1cIiBuYW1lPVwie3suLi9jb2RlfX1cIiBjbGFzcz1cImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XCI+IHt7bGFiZWx9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3VybCd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInVybFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2VtYWlsJ319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwiZW1haWxcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdjaGVja2JveCd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY2hlY2tib3hcIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJ0cnVlXCIgbmFtZT1cInt7Y29kZX19XCIgY2xhc3M9XCJjaGVja2JveC1pbmxpbmUgZml4LWluZGVudFwiPjwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0ne3tnZXRDZkNsYXNzIHRoaXN9fSBmb3JtLWNvbnRyb2wnIHJlYWRvbmx5IGRpc2FibGVkPnt7e2dldFZhbHVlIGNvZGV9fX08L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0e3svaWZ9fVxyXG5cdFx0e3svd2l0aH19XHJcblwiXCJcIlxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZSA9ICh0ZW1wYWx0ZU5hbWUsIHN0ZWVkb3NEYXRhKSAtPlxyXG5cdHRlbXBsYXRlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlW3RlbXBhbHRlTmFtZV1cclxuXHJcblx0dGVtcGxhdGVDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtpc0JvZHk6IHRydWV9KTtcclxuXHJcblx0dGVtcGxhdGVSZW5kZXJGdW5jdGlvbiA9IGV2YWwodGVtcGxhdGVDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0gPSBuZXcgQmxhemUuVGVtcGxhdGUodGVtcGFsdGVOYW1lLCB0ZW1wbGF0ZVJlbmRlckZ1bmN0aW9uKTtcclxuXHRUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdLnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHRUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdLmhlbHBlcnMgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVyc1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUluc3RhbmNlU2lnblRleHQgPSAoc3RlZWRvc0RhdGEpLT5cclxuXHRpbnN0YW5jZVNpZ25UZXh0SHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2luc3RhbmNlX3NpZ25fdGV4dC5odG1sJylcclxuXHJcblx0aW5zdGFuY2VTaWduVGV4dENvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbnN0YW5jZVNpZ25UZXh0SHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHRpbnN0YW5jZVNpZ25UZXh0UmVuZGVyRnVuY3Rpb24gPSBldmFsKGluc3RhbmNlU2lnblRleHRDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZVNpZ25UZXh0XCIsIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbik7XHJcblx0VGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dC5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzIEluc3RhbmNlU2lnblRleHQuaGVscGVyc1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUltYWdlU2lnbiA9IChzdGVlZG9zRGF0YSkgLT5cclxuXHRpbWFnZVNpZ25IdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW1hZ2Vfc2lnbi5odG1sJylcclxuXHRpbWFnZVNpZ25Db21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoaW1hZ2VTaWduSHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cdGltYWdlU2lnblJlbmRlckZ1bmN0aW9uID0gZXZhbChpbWFnZVNpZ25Db21waWxlZCk7XHJcblx0VGVtcGxhdGUuaW1hZ2VTaWduID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW1hZ2VTaWduXCIsIGltYWdlU2lnblJlbmRlckZ1bmN0aW9uKTtcclxuXHRUZW1wbGF0ZS5pbWFnZVNpZ24uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cdFRlbXBsYXRlLmltYWdlU2lnbi5oZWxwZXJzIEltYWdlU2lnbi5oZWxwZXJzXHJcblxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmluaXQgPSAoc3RlZWRvc0RhdGEpIC0+XHJcblx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmU2VsZWN0VXNlclJlYWRcIiwgc3RlZWRvc0RhdGEpO1xyXG5cclxuXHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZkZvcm1Hcm91cFwiLCBzdGVlZG9zRGF0YSk7XHJcblxyXG5cdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZkZvcm1Hcm91cFJlYWRcIiwgc3RlZWRvc0RhdGEpO1xyXG5cdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImluc3RhbmNlX2F0dGFjaG1lbnRcIiwge2Fic29sdXRlOiBzdGVlZG9zRGF0YS5hYnNvbHV0ZX0pO1xyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUltYWdlU2lnbihzdGVlZG9zRGF0YSlcclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbnN0YW5jZVNpZ25UZXh0KHN0ZWVkb3NEYXRhKVxyXG5cclxuXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VmFsdWUgPSAodmFsdWUsIGZpZWxkLCBsb2NhbGUsIHV0Y09mZnNldCkgLT5cclxuXHRpZiAhdmFsdWUgJiYgdmFsdWUgIT0gZmFsc2VcclxuXHRcdHJldHVybiAnJ1xyXG5cdHN3aXRjaCBmaWVsZC50eXBlXHJcblx0XHR3aGVuICdlbWFpbCdcclxuXHRcdFx0dmFsdWUgPSBpZiB2YWx1ZSB0aGVuICc8YSBocmVmPVxcJ21haWx0bzonICsgdmFsdWUgKyAnXFwnPicgKyB2YWx1ZSArICc8L2E+JyBlbHNlICcnXHJcblx0XHR3aGVuICd1cmwnXHJcblx0XHRcdGlmIHZhbHVlXHJcblx0XHRcdFx0aWYgdmFsdWUuaW5kZXhPZihcImh0dHBcIikgPT0gMFxyXG5cdFx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0XHRcdHZhbHVlID0gXCI8YSBocmVmPSdcIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuXHRcdFx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBcIjxhIGhyZWY9JycgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dmFsdWUgPSBcIjxhIGhyZWY9J2h0dHA6Ly9cIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHZhbHVlID0gJydcclxuXHRcdHdoZW4gJ2dyb3VwJ1xyXG5cdFx0XHRpZiBmaWVsZC5pc19tdWx0aXNlbGVjdFxyXG5cdFx0XHRcdHZhbHVlID0gdmFsdWU/LmdldFByb3BlcnR5KFwiZnVsbG5hbWVcIikudG9TdHJpbmcoKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8uZnVsbG5hbWVcclxuXHRcdHdoZW4gJ3VzZXInXHJcblx0XHRcdGlmIGZpZWxkLmlzX211bHRpc2VsZWN0XHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8uZ2V0UHJvcGVydHkoXCJuYW1lXCIpLnRvU3RyaW5nKClcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHZhbHVlID0gdmFsdWU/Lm5hbWVcclxuXHRcdHdoZW4gJ3Bhc3N3b3JkJ1xyXG5cdFx0XHR2YWx1ZSA9ICcqKioqKionXHJcblx0XHR3aGVuICdjaGVja2JveCdcclxuXHRcdFx0aWYgdmFsdWUgJiYgdmFsdWUgIT0gJ2ZhbHNlJ1xyXG5cdFx0XHRcdHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIsIHt9LCBsb2NhbGUpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X25vXCIsIHt9LCBsb2NhbGUpXHJcblx0XHR3aGVuICdkYXRlVGltZSdcclxuXHRcdFx0aWYgdmFsdWUgJiYgdmFsdWUubGVuZ3RoID09IDE2XHJcblx0XHRcdFx0dCA9IHZhbHVlLnNwbGl0KFwiVFwiKVxyXG5cdFx0XHRcdHQwID0gdFswXS5zcGxpdChcIi1cIik7XHJcblx0XHRcdFx0dDEgPSB0WzFdLnNwbGl0KFwiOlwiKTtcclxuXHJcblx0XHRcdFx0eWVhciA9IHQwWzBdO1xyXG5cdFx0XHRcdG1vbnRoID0gdDBbMV07XHJcblx0XHRcdFx0ZGF0ZSA9IHQwWzJdO1xyXG5cdFx0XHRcdGhvdXJzID0gdDFbMF07XHJcblx0XHRcdFx0c2Vjb25kcyA9IHQxWzFdO1xyXG5cclxuXHRcdFx0XHR2YWx1ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF0ZSwgaG91cnMsIHNlY29uZHMpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxyXG5cclxuXHRcdFx0dmFsdWUgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZSh2YWx1ZSwgdXRjT2Zmc2V0KTtcclxuXHRcdHdoZW4gJ2lucHV0J1xyXG5cdFx0XHRpZiBmaWVsZC5pc190ZXh0YXJlYVxyXG5cdFx0XHRcdHZhbHVlID0gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24odmFsdWUpKVxyXG5cdFx0d2hlbiAnbnVtYmVyJ1xyXG5cdFx0XHRpZiB2YWx1ZSBvciB2YWx1ZSA9PSAwXHJcblx0XHRcdFx0aWYgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnXHJcblx0XHRcdFx0XHR2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpXHJcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS50b0ZpeGVkKGZpZWxkLmRpZ2l0cylcclxuXHRcdFx0XHR2YWx1ZSA9IFN0ZWVkb3MubnVtYmVyVG9TdHJpbmcgdmFsdWUsIGxvY2FsZVxyXG5cdFx0d2hlbiAnb2RhdGEnXHJcblx0XHRcdHZhbHVlID0gdmFsdWVbJ0BsYWJlbCddXHJcblxyXG5cdHJldHVybiB2YWx1ZTtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbCA9IChmaWVsZHMsIGNvZGUpIC0+XHJcblx0ZmllbGQgPSBmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSlcclxuXHRpZiBmaWVsZFxyXG5cdFx0aWYgZmllbGQubmFtZVxyXG5cdFx0XHRyZXR1cm4gZmllbGQubmFtZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gZmllbGQuY29kZVxyXG5cclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uID0gKGluc3RhbmNlKS0+XHJcblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XHJcblxyXG5cdGZvcm1fdmVyc2lvbiA9IHt9XHJcblxyXG5cdGZvcm1fZmllbGRzID0gW107XHJcblxyXG5cdGlmIGZvcm0uY3VycmVudC5faWQgPT0gaW5zdGFuY2UuZm9ybV92ZXJzaW9uXHJcblx0XHRmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnRcclxuXHRlbHNlXHJcblx0XHRmb3JtX3ZlcnNpb24gPSBfLndoZXJlKGZvcm0uaGlzdG9yeXMsIHtfaWQ6IGluc3RhbmNlLmZvcm1fdmVyc2lvbn0pWzBdXHJcblxyXG5cdGZvcm1fdmVyc2lvbi5maWVsZHMuZm9yRWFjaCAoZmllbGQpLT5cclxuXHRcdGlmIGZpZWxkLnR5cGUgPT0gJ3NlY3Rpb24nXHJcblx0XHRcdGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xyXG5cdFx0XHRpZiBmaWVsZC5maWVsZHNcclxuXHRcdFx0XHRmaWVsZC5maWVsZHMuZm9yRWFjaCAoZikgLT5cclxuXHRcdFx0XHRcdGZvcm1fZmllbGRzLnB1c2goZik7XHJcblx0XHRlbHNlIGlmIGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRmaWVsZFsnc2ZpZWxkcyddID0gZmllbGRbJ2ZpZWxkcyddXHJcblx0XHRcdGRlbGV0ZSBmaWVsZFsnZmllbGRzJ11cclxuXHRcdFx0Zm9ybV9maWVsZHMucHVzaChmaWVsZCk7XHJcblx0XHRlbHNlXHJcblx0XHRcdGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xyXG5cclxuXHRmb3JtX3ZlcnNpb24uZmllbGRzID0gZm9ybV9maWVsZHM7XHJcblxyXG5cdHJldHVybiBmb3JtX3ZlcnNpb247XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0Rmxvd1ZlcnNpb24gPSAoaW5zdGFuY2UpLT5cclxuXHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZShpbnN0YW5jZS5mbG93KTtcclxuXHRmbG93X3ZlcnNpb24gPSB7fVxyXG5cdGlmIGZsb3cuY3VycmVudC5faWQgPT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uXHJcblx0XHRmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnRcclxuXHRlbHNlXHJcblx0XHRmbG93X3ZlcnNpb24gPSBfLndoZXJlKGZsb3cuaGlzdG9yeXMsIHtfaWQ6IGluc3RhbmNlLmZsb3dfdmVyc2lvbn0pWzBdXHJcblxyXG5cdHJldHVybiBmbG93X3ZlcnNpb247XHJcblxyXG5cclxuX2dldFZpZXdIdG1sID0gKHBhdGgpIC0+XHJcblx0dmlld0h0bWwgPSBBc3NldHMuZ2V0VGV4dChwYXRoKVxyXG5cclxuXHRpZiB2aWV3SHRtbFxyXG5cdFx0dmlld0h0bWwgPSB2aWV3SHRtbC5yZXBsYWNlKC88dGVtcGxhdGVbXFx3XFxzXFxcIlxcPSddKz4vaSxcIlwiKS5yZXBsYWNlKC88XFwvdGVtcGxhdGU+L2ksXCJcIilcclxuXHJcblx0cmV0dXJuIHZpZXdIdG1sO1xyXG5cclxuX2dldExvY2FsZSA9ICh1c2VyKS0+XHJcblx0aWYgdXNlcj8ubG9jYWxlPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcclxuXHRcdGxvY2FsZSA9IFwiemgtQ05cIlxyXG5cdGVsc2UgaWYgdXNlcj8ubG9jYWxlPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICdlbi11cydcclxuXHRcdGxvY2FsZSA9IFwiZW5cIlxyXG5cdGVsc2VcclxuXHRcdGxvY2FsZSA9IFwiemgtQ05cIlxyXG5cdHJldHVybiBsb2NhbGVcclxuXHJcblxyXG5fZ2V0UmVxdWlyZWRGaWVsZHMgPSAoZmllbGRzLCByZXYpLT5cclxuXHRpZiAhcmV2XHJcblx0XHRyZXYgPSBbXTtcclxuXHJcblx0ZmllbGRzLmZvckVhY2ggKGZpZWxkKS0+XHJcblx0XHRpZiBmaWVsZC50eXBlID09ICdzZWN0aW9uJ1xyXG5cdFx0XHRfZ2V0UmVxdWlyZWRGaWVsZHMoZmllbGQuZmllbGRzLCByZXYpXHJcblx0XHRlbHNlIGlmIGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgZmllbGQuaXNfcmVxdWlyZWRcclxuXHRcdFx0XHRyZXYucHVzaCBmaWVsZC5jb2RlXHJcblx0cmV0dXJuIHJldjtcclxuXHJcbl9nZXRTdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyA9IChmaWVsZHMsIHN0ZXBzKS0+XHJcblx0c3RhcnRTdGVwID0gc3RlcHMuZmluZFByb3BlcnR5QnlQSyhcInN0ZXBfdHlwZVwiLFwic3RhcnRcIilcclxuXHJcblx0ZWRpdGFibGVDb2RlID0gW11cclxuXHJcblx0Xy5rZXlzKHN0YXJ0U3RlcC5wZXJtaXNzaW9ucykuZm9yRWFjaCAoa2V5KS0+XHJcblx0XHRpZiBzdGFydFN0ZXAucGVybWlzc2lvbnNba2V5XSA9PSAnZWRpdGFibGUnXHJcblx0XHRcdGVkaXRhYmxlQ29kZS5wdXNoIGtleVxyXG5cclxuXHRyZXR1cm4gZWRpdGFibGVDb2RlXHJcblxyXG5fZ2V0U3RhcnRTdGVwUmVxdWlyZWRGaWVsZHMgPSAoZmllbGRzLCBzdGVwcyktPlxyXG5cdHJlcXVpcmVkRmllbGRzID0gX2dldFJlcXVpcmVkRmllbGRzKGZpZWxkcylcclxuXHJcblx0ZWRpdGFibGVDb2RlID0gX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzKGZpZWxkcywgc3RlcHMpXHJcblxyXG5cdHJldHVybiBfLmludGVyc2VjdGlvbihyZXF1aXJlZEZpZWxkcywgZWRpdGFibGVDb2RlKVxyXG5cclxuX2dldFRlbXBsYXRlRGF0YSA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpLT5cclxuXHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdGZvcm1fdmVyc2lvbiA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKGluc3RhbmNlKVxyXG5cdGVsc2VcclxuXHRcdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKGluc3RhbmNlKVxyXG5cclxuXHRsb2NhbGUgPSBfZ2V0TG9jYWxlKHVzZXIpXHJcblxyXG5cdHN0ZWVkb3NEYXRhID0ge31cclxuXHJcblx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRzdGVlZG9zRGF0YSA9IF8uY2xvbmUoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpKVxyXG5cdFx0c3RlZWRvc0RhdGEuaW5zbmFtZSA9IGluc3RhbmNlLm5hbWVcclxuXHRcdHN0ZWVkb3NEYXRhLmluc19zdGF0ZSA9IGluc3RhbmNlLnN0YXRlXHJcblx0XHRzdGVlZG9zRGF0YS5pbnNfZmluYWxfZGVjaXNpb24gPSBpbnN0YW5jZS5pbnNfZmluYWxfZGVjaXNpb25cclxuXHRcdHN0ZWVkb3NEYXRhLmluc19jb2RlID0gaW5zdGFuY2UuY29kZVxyXG5cdFx0c3RlZWRvc0RhdGEuaW5zX2lzX2FyY2hpdmVkID0gaW5zdGFuY2UuaXNfYXJjaGl2ZWRcclxuXHRcdHN0ZWVkb3NEYXRhLmluc19pc19kZWxldGVkID0gaW5zdGFuY2UuaW5zX2lzX2RlbGV0ZWRcclxuXHRcdHN0ZWVkb3NEYXRhLmFwcGxpY2FudF9uYW1lID0gaW5zdGFuY2UuYXBwbGljYW50X25hbWVcclxuXHRcdHN0ZWVkb3NEYXRhLmFwcGxpY2FudENvbnRleHQgPSBpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZVxyXG5cclxuXHRzdGVlZG9zRGF0YS5pbnN0YW5jZSA9IGluc3RhbmNlXHJcblx0c3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uID0gZm9ybV92ZXJzaW9uXHJcblx0c3RlZWRvc0RhdGEubG9jYWxlID0gbG9jYWxlXHJcblx0c3RlZWRvc0RhdGEudXRjT2Zmc2V0ID0gdXNlci51dGNPZmZzZXRcclxuXHRzdGVlZG9zRGF0YS5zcGFjZSA9IGluc3RhbmNlLnNwYWNlXHJcblx0c3RlZWRvc0RhdGEuc2Vzc2lvblVzZXJJZCA9IHVzZXIuX2lkXHJcblxyXG5cdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0aWYgb3B0aW9ucz8uZWRpdGFibGVcclxuXHRcdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe19pZDogaW5zdGFuY2UuZm9ybX0pXHJcblxyXG5cdFx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBpbnN0YW5jZS5mbG93fSlcclxuXHJcblx0XHRcdHN0ZWVkb3NEYXRhLnN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzID0gX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzKGZvcm0uY3VycmVudC5maWVsZHMsIGZsb3cuY3VycmVudC5zdGVwcyk7XHJcblxyXG5cdHJldHVybiBzdGVlZG9zRGF0YTtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5mb3JtYXREYXRlID0gKGRhdGUsIHV0Y09mZnNldCktPlxyXG5cdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0cGFzc2luZyA9IGZhbHNlO1xyXG5cdGVsc2VcclxuXHRcdHBhc3NpbmcgPSB0cnVlO1xyXG5cclxuXHRpZiAhdXRjT2Zmc2V0ICYmIHV0Y09mZnNldCAhPTBcclxuXHRcdHV0Y09mZnNldCA9IDhcclxuXHJcblx0cmV0dXJuIG1vbWVudChkYXRlKS51dGNPZmZzZXQodXRjT2Zmc2V0LCBwYXNzaW5nKS5mb3JtYXQoXCJZWVlZLU1NLUREIEhIOm1tXCIpO1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlVmlldyA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpLT5cclxuXHJcblx0c3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucylcclxuXHJcblx0c3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcclxuXHJcblx0aWYgb3B0aW9ucz8uYWJzb2x1dGVcclxuXHRcdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gdHJ1ZTtcclxuXHJcblx0aW5zdGFuY2VUZW1wbGF0ZSA9IFRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZShpbnN0YW5jZSwgb3B0aW9ucz8udGVtcGxhdGVOYW1lKTtcclxuXHJcblx0aW5zdGFuY2VUZW1wbGF0ZSA9IGluc3RhbmNlVGVtcGxhdGUucmVwbGFjZSgvYWZTZWxlY3RVc2VyL2csXCJhZlNlbGVjdFVzZXJSZWFkXCIpXHJcblxyXG5cdGlmICFvcHRpb25zPy5lZGl0YWJsZVxyXG5cdFx0aW5zdGFuY2VUZW1wbGF0ZSA9IGluc3RhbmNlVGVtcGxhdGUucmVwbGFjZSgvYWZGb3JtR3JvdXAvZyxcImFmRm9ybUdyb3VwUmVhZFwiKVxyXG5cclxuXHRpbnN0YW5jZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbnN0YW5jZVRlbXBsYXRlLCB7aXNCb2R5OiB0cnVlfSk7XHJcblxyXG5cdGluc3RhbmNlUmVuZGVyRnVuY3Rpb24gPSBldmFsKGluc3RhbmNlQ29tcGlsZWQpO1xyXG5cclxuXHRUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW5zdGFuY2VfcmVhZG9ubHlfdmlld1wiLCBpbnN0YW5jZVJlbmRlckZ1bmN0aW9uKTtcclxuXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblxyXG5cdFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcuaGVscGVycyBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzXHJcblxyXG5cdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbml0KHN0ZWVkb3NEYXRhKTtcclxuXHJcblx0Ym9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcsIHN0ZWVkb3NEYXRhKVxyXG5cclxuXHRyZXR1cm4gXCJcIlwiXHJcblx0XHQ8ZGl2IGlkPSdpbnN0YW5jZWZvcm0nID5cclxuXHRcdFx0I3tib2R5fVxyXG5cdFx0PC9kaXY+XHJcblx0XCJcIlwiXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VHJhY2VzVmlldyA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpLT5cclxuXHJcblx0c3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSlcclxuXHJcblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XHJcblx0aWYgZm9ybS5pbnN0YW5jZV9zdHlsZSA9PSBcInRhYmxlXCIgfHwgb3B0aW9ucz8udGVtcGxhdGVOYW1lID09IFwidGFibGVcIlxyXG5cdFx0dHJhY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlc190YWJsZS5odG1sJylcclxuXHRlbHNlXHJcblx0XHR0cmFjZXNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvdHJhY2VzLmh0bWwnKVxyXG5cclxuXHR0cmFjZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0cmFjZXNIdG1sLCB7aXNCb2R5OiB0cnVlfSk7XHJcblxyXG5cdHRyYWNlUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRyYWNlQ29tcGlsZWQpO1xyXG5cclxuXHRUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwidHJhY2VfcmVhZG9ubHlfdmlld1wiLCB0cmFjZVJlbmRlckZ1bmN0aW9uKTtcclxuXHJcblx0VGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblxyXG5cdFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcuaGVscGVycyBUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzXHJcblxyXG5cdGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LCBpbnN0YW5jZS50cmFjZXMpXHJcblxyXG5cdHJldHVybiBib2R5O1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEF0dGFjaG1lbnRWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSktPlxyXG5cclxuXHRzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKVxyXG5cclxuXHRhdHRhY2htZW50SHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2luc3RhbmNlX2F0dGFjaG1lbnRzLmh0bWwnKVxyXG5cclxuXHRhdHRhY2htZW50Q29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGF0dGFjaG1lbnRIdG1sLCB7aXNCb2R5OiB0cnVlfSk7XHJcblxyXG5cdGF0dGFjaG1lbnRSZW5kZXJGdW5jdGlvbiA9IGV2YWwoYXR0YWNobWVudENvbXBpbGVkKTtcclxuXHJcblx0VGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXdcIiwgYXR0YWNobWVudFJlbmRlckZ1bmN0aW9uKTtcclxuXHJcblx0VGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblxyXG5cdFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcuaGVscGVycyBJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzXHJcblxyXG5cdGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3KVxyXG5cclxuXHRyZXR1cm4gYm9keTtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkSW5zdGFuY2VzVmlldyA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpLT5cclxuXHRzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKVxyXG5cclxuXHRzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IGZhbHNlO1xyXG5cclxuXHRpZiBvcHRpb25zPy5hYnNvbHV0ZVxyXG5cdFx0c3RlZWRvc0RhdGEuYWJzb2x1dGUgPSB0cnVlO1xyXG5cclxuXHRyZWxhdGVkSW5zdGFuY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3JlbGF0ZWRfaW5zdGFuY2VzLmh0bWwnKVxyXG5cclxuXHRyZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHJlbGF0ZWRJbnN0YW5jZXNIdG1sLCB7aXNCb2R5OiB0cnVlfSk7XHJcblxyXG5cdHJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbiA9IGV2YWwocmVsYXRlZEluc3RhbmNlc0NvbXBpbGVkKTtcclxuXHJcblx0VGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXdcIiwgcmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uKTtcclxuXHJcblx0VGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblxyXG5cdFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcuaGVscGVycyBSZWxhdGVkSW5zdGFuY2VzLmhlbHBlcnNcclxuXHJcblx0Ym9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcsIHN0ZWVkb3NEYXRhKVxyXG5cclxuXHRyZXR1cm4gYm9keTtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRPbkxvYWRTY3JpcHQgPSAoaW5zdGFuY2UpLT5cclxuXHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKVxyXG5cclxuXHRmb3JtX3NjcmlwdCA9IGZvcm1fdmVyc2lvbi5mb3JtX3NjcmlwdDtcclxuXHJcblx0aWYgZm9ybV9zY3JpcHQgJiYgZm9ybV9zY3JpcHQucmVwbGFjZSgvXFxuL2csXCJcIikucmVwbGFjZSgvXFxzL2csXCJcIikubGVuZ3RoID4gMFxyXG5cdFx0Zm9ybV9zY3JpcHQgPSBcIkNvcmVGb3JtID0ge307Q29yZUZvcm0uaW5zdGFuY2Vmb3JtID0ge307XCIgKyBmb3JtX3NjcmlwdFxyXG5cdFx0Zm9ybV9zY3JpcHQgKz0gXCI7aWYoQ29yZUZvcm0uZm9ybV9PbkxvYWQpe3dpbmRvdy5vbmxvYWQgPSBDb3JlRm9ybS5mb3JtX09uTG9hZCgpO31cIlxyXG5cdGVsc2VcclxuXHRcdGZvcm1fc2NyaXB0ID0gXCJcIlxyXG5cclxuXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VIdG1sID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxyXG5cclxuXHRib2R5ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xyXG5cclxuXHRvbkxvYWRTY3JpcHQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0T25Mb2FkU2NyaXB0KGluc3RhbmNlKTtcclxuXHJcblx0b3BlbkZpbGVTY3JpcHQgPSBcIlwiXCJcclxuXHRcdFx0aWYod2luZG93LmlzTm9kZSAmJiBpc05vZGUoKSl7XHJcblx0XHRcdFx0YXR0YWNocyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJpbnNfYXR0YWNoX2hyZWZcIik7XHJcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGF0dGFjaHMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0YXR0YWNoID0gYXR0YWNoc1tpXTtcclxuXHRcdFx0XHRcdGF0dGFjaC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XHJcblx0XHRcdFx0XHRcdGlmKGlzSW1hZ2UodGhpcy5kYXRhc2V0LnR5cGUpIHx8IGlzSHRtbCh0aGlzLmRhdGFzZXQudHlwZSkpe1xyXG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRvcGVuV2luZG93KFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvXCIgKyB0aGlzLmRhdGFzZXQuaWQpO1xyXG5cdFx0XHRcdFx0XHR9ZWxzZSBpZihud19jb3JlLmNhbk9wZW5GaWxlKHRoaXMuZGF0YXNldC5uYW1lKSl7XHJcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRcdG53X2NvcmUub3BlbkZpbGUodGhpcy5ocmVmLCB0aGlzLmRhdGFzZXQubmFtZSlcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZmxvdyA9IFwiI3tpbnN0YW5jZS5mbG93fVwiO1xyXG5cdFx0XHR2YXIgc3BhY2UgPSBcIiN7aW5zdGFuY2Uuc3BhY2V9XCI7XHJcblxyXG5cdFwiXCJcIjtcclxuXHJcblxyXG5cdGlmICFTdGVlZG9zLmlzTW9iaWxlKClcclxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cdFx0aWYgZm9ybT8uaW5zdGFuY2Vfc3R5bGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRpbnN0YW5jZV9zdHlsZSA9IFwiaW5zdGFuY2UtdGFibGVcIlxyXG5cclxuXHRpZiBvcHRpb25zPy50ZW1wbGF0ZU5hbWUgPT0gJ3RhYmxlJ1xyXG5cdFx0aW5zdGFuY2Vfc3R5bGUgPSBcImluc3RhbmNlLXRhYmxlXCJcclxuXHJcblx0aWYgb3B0aW9ucz8uaW5zdGFuY2Vfc3R5bGVcclxuXHRcdGluc3RhbmNlX3N0eWxlID0gb3B0aW9ucy5pbnN0YW5jZV9zdHlsZVxyXG5cclxuXHRpZiAhb3B0aW9ucyB8fCBvcHRpb25zLnNob3dUcmFjZSA9PSB0cnVlXHJcblx0XHR0cmFjZSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRUcmFjZXNWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSlcclxuXHRlbHNlXHJcblx0XHR0cmFjZSA9IFwiXCJcclxuXHJcblx0aW5zdGFuY2VCb3hTdHlsZSA9IFwiXCI7XHJcblxyXG5cdGlmIGluc3RhbmNlICYmIGluc3RhbmNlLmZpbmFsX2RlY2lzaW9uXHJcblx0XHRpZiBpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PSBcImFwcHJvdmVkXCJcclxuXHRcdFx0aW5zdGFuY2VCb3hTdHlsZSA9IFwiYm94LXN1Y2Nlc3NcIlxyXG5cdFx0ZWxzZSBpZiAoaW5zdGFuY2UuZmluYWxfZGVjaXNpb24gPT0gXCJyZWplY3RlZFwiKVxyXG5cdFx0XHRpbnN0YW5jZUJveFN0eWxlID0gXCJib3gtZGFuZ2VyXCJcclxuXHRpZiAhb3B0aW9ucyB8fCBvcHRpb25zLnNob3dBdHRhY2htZW50cyA9PSB0cnVlXHJcblx0XHRhdHRhY2htZW50ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEF0dGFjaG1lbnRWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSlcclxuXHRlbHNlXHJcblx0XHRhdHRhY2htZW50ID0gXCJcIlxyXG5cclxuXHRyZWxhdGVkX2luc3RhbmNlcyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkSW5zdGFuY2VzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblxyXG5cdGFic29sdXRlVXJsID0gTWV0ZW9yLmFic29sdXRlVXJsKClcclxuXHJcblx0d2lkdGggPSBcIjk2MHB4XCJcclxuI1x05aaC5p6c57uZdGFibGXnmoRwYXJlbnTorr7nva53aWR0aO+8jOWImeS8muWvvOiHtOmYv+mHjOS6kemCrueuseaYvuekunRhYmxlIOW8guW4uFxyXG5cdGlmIG9wdGlvbnM/LndpZHRoXHJcblx0XHR3aWR0aCA9IFwiXCJcclxuXHJcblx0Y3NzSHJlZiA9IE1ldGVvci5hYnNvbHV0ZVVybChcInN0ZWVkb3MtY3NzXCIpXHJcblxyXG5cdGFsbENzc0xpbmsgPSBcIlwiXCI8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgY2xhc3M9XCJfX21ldGVvci1jc3NfX1wiIGhyZWY9XCIje2Nzc0hyZWZ9XCI+XCJcIlwiXHJcblxyXG5cdHN1Ym1pdF9idG4gPSBcIlwiXHJcblxyXG4jXHRpZiBvcHRpb25zPy5lZGl0YWJsZVxyXG4jXHRcdHN1Ym1pdF9idG4gPSAnPGEgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1zb2NpYWwgYnRuLXN0ZWVkb3Mtd29ya2Zsb3dcIiBvbmNsaWNrPVwid2Muc3VibWl0KClcIj48aSBjbGFzcz1cImZhIGZhLWZhY2Vib29rXCI+PC9pPiDmj5DkuqTliLDlrqHmibnnjos8L2E+J1xyXG5cdHNob3dUcmFjZXNCdG4gPSBcIlwiXCJcclxuXHRcdDxkaXYgY2xhc3M9XCJwcmludC10b29sXCI+XHJcblx0XHRcdDxsYWJlbCBjbGFzcz1cImNieC1sYWJlbFwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkIGNsYXNzPVwiY2J4LXByaW50IGNieC1wcmludC10cmFjZXNcIiBpZD1cImNieC1wcmludC10cmFjZXNcIi8+PHNwYW4+I3t0KCdpbnN0YW5jZV9hcHByb3ZhbF9oaXN0b3J5Jyl9PC9zcGFuPjwvbGFiZWw+XHJcblx0XHQ8L2Rpdj5cclxuXHRcdFwiXCJcIlxyXG5cclxuXHRzaG93VHJhY2VzU2NyaXB0ID0gXCJcIlwiXHJcblx0XHQkKCBkb2N1bWVudCApLnJlYWR5KGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC10cmFjZXMnKTtcclxuXHRcdFx0dmFyIHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpbnN0YW5jZS10cmFjZXMnKVswXTtcclxuXHRcdFx0aWYgKGIuY2hlY2tlZCl7XHJcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcclxuXHRcdFx0fVxyXG5cdFx0XHRiLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdGlmIChlLnRhcmdldC5jaGVja2VkKXtcclxuXHRcdFx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XCJcIlwiXHJcblxyXG5cdGlmIG9wdGlvbnM/LnN0eWxlc1xyXG5cdFx0YWxsQ3NzTGluayA9IFwiXCJcclxuXHJcblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe19pZDogaW5zdGFuY2UuZm9ybX0pO1xyXG5cdGZvcm1EZXNjcmlwdGlvbkh0bWwgPSBcIlwiXHJcblx0aWYgZm9ybVxyXG5cdFx0Zm9ybURlc2NyaXB0aW9uID0gZm9ybS5kZXNjcmlwdGlvblxyXG5cdFx0aWYgZm9ybURlc2NyaXB0aW9uXHJcblx0XHRcdGZvcm1EZXNjcmlwdGlvbiA9IGZvcm1EZXNjcmlwdGlvbi5yZXBsYWNlKC9cXG4vZyxcIjxici8+XCIpXHJcblx0XHRcdGZvcm1EZXNjcmlwdGlvbkh0bWwgPSBcIlwiXCJcclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm94LWhlYWRlciAgd2l0aC1ib3JkZXIgaW5zdGFuY2UtaGVhZGVyXCI+XHJcblx0XHRcdFx0XHQ8ZGl2PlxyXG5cdFx0XHRcdFx0XHQje2Zvcm1EZXNjcmlwdGlvbn1cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFwiXCJcIlxyXG5cclxuXHRodG1sID0gXCJcIlwiXHJcblx0XHQ8IURPQ1RZUEUgaHRtbD5cclxuXHRcdDxodG1sPlxyXG5cdFx0XHQ8aGVhZD5cclxuXHRcdFx0XHQ8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD1VVEYtOFwiLz5cclxuXHRcdFx0XHQje2FsbENzc0xpbmt9XHJcblx0XHRcdFx0PHNjcmlwdCBzcmM9XCJodHRwczovL3d3dy5zdGVlZG9zLmNvbS93ZWJzaXRlL2xpYnMvanF1ZXJ5Lm1pbi5qc1wiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj48L3NjcmlwdD5cclxuXHRcdFx0XHQ8c2NyaXB0IHNyYz1cIi9qcy9ud19jb3JlLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxyXG5cdFx0XHRcdCN7b3B0aW9ucy5wbHVnaW5zIHx8IFwiXCJ9XHJcblxyXG5cdFx0XHRcdDxzdHlsZT5cclxuXHRcdFx0XHRcdC5zdGVlZG9ze1xyXG5cdFx0XHRcdFx0XHR3aWR0aDogI3t3aWR0aH07XHJcblx0XHRcdFx0XHRcdG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG5cdFx0XHRcdFx0XHRtYXJnaW4tcmlnaHQ6IGF1dG87XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Lmluc3RhbmNlLXZpZXcgLmluc3RhbmNlLW5hbWV7XHJcblx0XHRcdFx0XHRcdGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQuYm94LXRvb2xze1xyXG5cdFx0XHRcdFx0XHRkaXNwbGF5OiBub25lO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0LmJveC5jb2xsYXBzZWQtYm94IC5ib3gtYm9keSwuYm94LmNvbGxhcHNlZC1ib3ggLmJveC1mb290ZXIge1xyXG5cdFx0XHRcdFx0ICBkaXNwbGF5OiBibG9jaztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRib2R5e1xyXG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBhenVyZSAhaW1wb3J0YW50O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC5pbnN0YW5jZS12aWV3IC5pbnN0YW5jZS10cmFjZXN7XHJcblx0XHRcdFx0XHRcdHBhZGRpbmctbGVmdDogMTVweDtcclxuXHRcdFx0XHRcdFx0cGFkZGluZy1yaWdodDogMTVweDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQje29wdGlvbnM/LnN0eWxlcyB8fCBcIlwifVxyXG5cdFx0XHRcdDwvc3R5bGU+XHJcblx0XHRcdDwvaGVhZD5cclxuXHRcdFx0PGJvZHk+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cInN0ZWVkb3NcIj5cclxuXHRcdFx0XHRcdCN7c3VibWl0X2J0bn1cclxuXHRcdFx0XHRcdCN7c2hvd1RyYWNlc0J0bn1cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnN0YW5jZS12aWV3XCI+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnN0YW5jZSAje2luc3RhbmNlX3N0eWxlfVwiPlxyXG5cdFx0XHRcdFx0XHRcdDxmb3JtIG5hbWU9XCJpbnN0YW5jZUZvcm1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnN0YW5jZS1mb3JtIGJveCAje2luc3RhbmNlQm94U3R5bGV9XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdCN7Zm9ybURlc2NyaXB0aW9uSHRtbH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJveC1ib2R5XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3tib2R5fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3thdHRhY2htZW50fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3tyZWxhdGVkX2luc3RhbmNlc31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Zvcm0+XHJcblx0XHRcdFx0XHRcdFx0I3t0cmFjZX1cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9ib2R5PlxyXG5cdFx0XHQ8c2NyaXB0PiN7b3BlbkZpbGVTY3JpcHR9OyN7b25Mb2FkU2NyaXB0fTsje3Nob3dUcmFjZXNTY3JpcHR9PC9zY3JpcHQ+XHJcblx0XHQ8L2h0bWw+XHJcblx0XCJcIlwiXHJcblxyXG5cdHJldHVybiBodG1sIiwidmFyIF9nZXRMb2NhbGUsIF9nZXRSZXF1aXJlZEZpZWxkcywgX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzLCBfZ2V0U3RhcnRTdGVwUmVxdWlyZWRGaWVsZHMsIF9nZXRUZW1wbGF0ZURhdGEsIF9nZXRWaWV3SHRtbDsgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUgPSB7fTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmluc3RhbmNlX2F0dGFjaG1lbnQgPSBcIjx0cj5cXG5cdDx0ZCBjbGFzcz1cXFwiaW5zLWF0dGFjaC12aWV3XFxcIj5cXG5cdFx0PGEgaHJlZj1cXFwie3tpbnNfYXR0YWNoX2Rvd25sb2FkX3VybCBfaWQgYWJzb2x1dGV9fVxcXCIgY2xhc3M9XFxcImluc19hdHRhY2hfaHJlZlxcXCIgdGFyZ2V0PVxcXCJfcGFyZW50XFxcIiBkYXRhLW5hbWU9XFxcInt7dGhpcy5uYW1lfX1cXFwiIGRhdGEtdHlwZT1cXFwie3t0aGlzLm9yaWdpbmFsLnR5cGV9fVxcXCIgZGF0YS1pZD1cXFwie3tfaWR9fVxcXCI+e3t0aGlzLm5hbWV9fTwvYT5cXG5cdDwvdGQ+XFxuPC90cj5cIjtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmU2VsZWN0VXNlclJlYWQgPSBcIjxkaXYgY2xhc3M9J3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnPnt7dmFsdWV9fTwvZGl2PlwiO1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuYWZGb3JtR3JvdXBSZWFkID0gXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz5cXG5cdHt7I3dpdGggZ2V0RmllbGQgdGhpcy5uYW1lfX1cXG5cdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3NlY3Rpb24nfX1cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J3NlY3Rpb24gY2FsbG91dCBjYWxsb3V0LWRlZmF1bHQnPlxcblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Zl9sYWJlbCB0aGlzfX08L2xhYmVsPlxcblx0XHRcdFx0XHQ8cD57e3tkZXNjcmlwdGlvbn19fTwvcD5cXG5cdFx0XHRcdDwvZGl2Plxcblx0XHR7e2Vsc2V9fVxcblx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxcblx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwgcGFuZWwtZGVmYXVsdCBzdGVlZG9zLXRhYmxlXFxcIj5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtYm9keVxcXCIgc3R5bGU9XFxcInBhZGRpbmc6MHB4O1xcXCI+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtaGVhZGluZ1xcXCIgPlxcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsJz57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cXFwiZGVzY3JpcHRpb25cXFwiPnt7e2Rlc2NyaXB0aW9ufX19PC9zcGFuPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInJlYWRvbmx5LXRhYmxlXFxcIiBzdHlsZT1cXFwicGFkZGluZzowcHg7b3ZlcmZsb3cteDphdXRvO1xcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDx0YWJsZSB0eXBlPSd0YWJsZScgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVxcXCIgc3R5bGU9J21hcmdpbi1ib3R0b206MHB4Oycge3t0aGlzLmF0dHN9fSBpZD1cXFwie3t0aGlzLmNvZGV9fVRhYmxlXFxcIiBuYW1lPVxcXCJ7e3RoaXMuY29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7dGhpcy5uYW1lfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdDx0aGVhZCBpZD1cXFwie3t0aGlzLm5hbWV9fVRoZWFkXFxcIiBuYW1lPVxcXCJ7e3RoaXMubmFtZX19VGhlYWRcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVUaGVhZCB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90aGVhZD5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGJvZHkgaWQ9XFxcInt7dGhpcy5uYW1lfX1UYm9keVxcXCIgbmFtZT1cXFwie3t0aGlzLm5hbWV9fVRib2R5XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlQm9keSB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cXG5cdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0e3sjaWYgc2hvd0xhYmVsfX1cXG5cdFx0XHRcdFx0PGxhYmVsPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J3t7Z2V0Q2ZDbGFzcyB0aGlzfX0gZm9ybS1jb250cm9sJyByZWFkb25seSBkaXNhYmxlZD57e3tnZXRWYWx1ZSBjb2RlfX19PC9kaXY+XFxuXHRcdFx0e3svaWZ9fVxcblx0XHR7ey9pZn19XFxuXHR7ey93aXRofX1cXG48L2Rpdj5cIjtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwID0gXCJcXG57eyN3aXRoIGdldEZpZWxkIHRoaXMubmFtZX19XFxuXHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWN0aW9uJ319XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdzZWN0aW9uIGNhbGxvdXQgY2FsbG91dC1kZWZhdWx0Jz5cXG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cXG5cdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XFxuXHRcdFx0XHQ8L2Rpdj5cXG4gIFx0XHRcdFx0PC9kaXY+XFxuXHRcdHt7ZWxzZX19XFxuXHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3RhYmxlJ319XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1kZWZhdWx0IHN0ZWVkb3MtdGFibGVcXFwiPlxcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJwYW5lbC1ib2R5XFxcIiBzdHlsZT1cXFwicGFkZGluZzowcHg7XFxcIj5cXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJwYW5lbC1oZWFkaW5nXFxcIiA+XFxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwnPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVxcXCJkZXNjcmlwdGlvblxcXCI+e3t7ZGVzY3JpcHRpb259fX08L3NwYW4+XFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicmVhZG9ubHktdGFibGVcXFwiIHN0eWxlPVxcXCJwYWRkaW5nOjBweDtvdmVyZmxvdy14OmF1dG87XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0PHRhYmxlIHR5cGU9J3RhYmxlJyBjbGFzcz1cXFwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtY29uZGVuc2VkIGF1dG9mb3JtLXRhYmxlXFxcIiBzdHlsZT0nbWFyZ2luLWJvdHRvbTowcHg7JyB7e3RoaXMuYXR0c319IGlkPVxcXCJ7e3RoaXMuY29kZX19VGFibGVcXFwiIG5hbWU9XFxcInt7dGhpcy5jb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3t0aGlzLm5hbWV9fVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PHRoZWFkIGlkPVxcXCJ7e3RoaXMubmFtZX19VGhlYWRcXFwiIG5hbWU9XFxcInt7dGhpcy5uYW1lfX1UaGVhZFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZVRoZWFkIHRoaXN9fX1cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L3RoZWFkPlxcblx0XHRcdFx0XHRcdFx0XHRcdDx0Ym9keSBpZD1cXFwie3t0aGlzLm5hbWV9fVRib2R5XFxcIiBuYW1lPVxcXCJ7e3RoaXMubmFtZX19VGJvZHlcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVCb2R5IHRoaXN9fX1cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L3Rib2R5Plxcblx0XHRcdFx0XHRcdFx0XHQ8L3RhYmxlPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdDwvZGl2Plxcblx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnaW5wdXQnfX1cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgZGF0YS1yZXF1aXJlZD1cXFwie3sjaWYgaXNfcmVxdWlyZWR9fXRydWV7ey9pZn19XFxcIj5cXG5cdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIge3tnZXRQZXJtaXNzaW9ucyBjb2RlfX0gZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ251bWJlcid9fVxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnZGF0ZSd9fVxcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS10eXBlPVxcXCJkYXRlXFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnZGF0ZVRpbWUnfX1cXG5cdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XFxcInRleHRcXFwiIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtdHlwZT0nZGF0ZXRpbWUnIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdwYXNzd29yZCd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwicGFzc3dvcmRcXFwiIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWxlY3QnfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PHNlbGVjdCBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PG9wdGlvbiB2YWx1ZT1cXFwie3t2YWx1ZX19XFxcIj57e2xhYmVsfX08L29wdGlvbj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9zZWxlY3Q+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3JhZGlvJ319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImFmLXJhZGlvLWdyb3VwXFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cXG4gICAgICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cXFwicmFkaW8taW5saW5lIGZpeC1pbmRlbnRcXFwiPjxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgdmFsdWU9XFxcInt7dmFsdWV9fVxcXCIgbmFtZT1cXFwie3suLi9jb2RlfX1cXFwiIGNsYXNzPVxcXCJyYWRpby1pbmxpbmUgZml4LWluZGVudFxcXCI+IHt7bGFiZWx9fTwvbGFiZWw+XFxuICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svZWFjaH19XFxuICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdtdWx0aVNlbGVjdCd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJhZi1jaGVja2JveC1ncm91cFxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjaGVja2JveC1pbmxpbmUgZml4LWluZGVudFxcXCI+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiB2YWx1ZT1cXFwie3t2YWx1ZX19XFxcIiBuYW1lPVxcXCJ7ey4uL2NvZGV9fVxcXCIgY2xhc3M9XFxcImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XFxcIj4ge3tsYWJlbH19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svZWFjaH19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndXJsJ319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJ1cmxcXFwiIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdlbWFpbCd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwiZW1haWxcXFwiIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdjaGVja2JveCd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJjaGVja2JveFxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBzdHlsZT1cXFwid2lkdGg6IDEwMCU7XFxcIj48aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIHZhbHVlPVxcXCJ0cnVlXFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgY2xhc3M9XFxcImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XFxcIj48L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J3t7Z2V0Q2ZDbGFzcyB0aGlzfX0gZm9ybS1jb250cm9sJyByZWFkb25seSBkaXNhYmxlZD57e3tnZXRWYWx1ZSBjb2RlfX19PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHR7ey9pZn19XFxuXHRcdHt7L2lmfX1cXG5cdHt7L3dpdGh9fVwiO1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlID0gZnVuY3Rpb24odGVtcGFsdGVOYW1lLCBzdGVlZG9zRGF0YSkge1xuICB2YXIgdGVtcGxhdGUsIHRlbXBsYXRlQ29tcGlsZWQsIHRlbXBsYXRlUmVuZGVyRnVuY3Rpb247XG4gIHRlbXBsYXRlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlW3RlbXBhbHRlTmFtZV07XG4gIHRlbXBsYXRlQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRlbXBsYXRlLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICB0ZW1wbGF0ZVJlbmRlckZ1bmN0aW9uID0gZXZhbCh0ZW1wbGF0ZUNvbXBpbGVkKTtcbiAgVGVtcGxhdGVbdGVtcGFsdGVOYW1lXSA9IG5ldyBCbGF6ZS5UZW1wbGF0ZSh0ZW1wYWx0ZU5hbWUsIHRlbXBsYXRlUmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdLnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIHJldHVybiBUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdLmhlbHBlcnMoSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycyk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW5zdGFuY2VTaWduVGV4dCA9IGZ1bmN0aW9uKHN0ZWVkb3NEYXRhKSB7XG4gIHZhciBpbnN0YW5jZVNpZ25UZXh0Q29tcGlsZWQsIGluc3RhbmNlU2lnblRleHRIdG1sLCBpbnN0YW5jZVNpZ25UZXh0UmVuZGVyRnVuY3Rpb247XG4gIGluc3RhbmNlU2lnblRleHRIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW5zdGFuY2Vfc2lnbl90ZXh0Lmh0bWwnKTtcbiAgaW5zdGFuY2VTaWduVGV4dENvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbnN0YW5jZVNpZ25UZXh0SHRtbCwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uID0gZXZhbChpbnN0YW5jZVNpZ25UZXh0Q29tcGlsZWQpO1xuICBUZW1wbGF0ZS5pbnN0YW5jZVNpZ25UZXh0ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW5zdGFuY2VTaWduVGV4dFwiLCBpbnN0YW5jZVNpZ25UZXh0UmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS5pbnN0YW5jZVNpZ25UZXh0LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMoSW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzKTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbWFnZVNpZ24gPSBmdW5jdGlvbihzdGVlZG9zRGF0YSkge1xuICB2YXIgaW1hZ2VTaWduQ29tcGlsZWQsIGltYWdlU2lnbkh0bWwsIGltYWdlU2lnblJlbmRlckZ1bmN0aW9uO1xuICBpbWFnZVNpZ25IdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW1hZ2Vfc2lnbi5odG1sJyk7XG4gIGltYWdlU2lnbkNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbWFnZVNpZ25IdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICBpbWFnZVNpZ25SZW5kZXJGdW5jdGlvbiA9IGV2YWwoaW1hZ2VTaWduQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS5pbWFnZVNpZ24gPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbWFnZVNpZ25cIiwgaW1hZ2VTaWduUmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS5pbWFnZVNpZ24uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgcmV0dXJuIFRlbXBsYXRlLmltYWdlU2lnbi5oZWxwZXJzKEltYWdlU2lnbi5oZWxwZXJzKTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbml0ID0gZnVuY3Rpb24oc3RlZWRvc0RhdGEpIHtcbiAgSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmU2VsZWN0VXNlclJlYWRcIiwgc3RlZWRvc0RhdGEpO1xuICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmRm9ybUdyb3VwXCIsIHN0ZWVkb3NEYXRhKTtcbiAgfVxuICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiYWZGb3JtR3JvdXBSZWFkXCIsIHN0ZWVkb3NEYXRhKTtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJpbnN0YW5jZV9hdHRhY2htZW50XCIsIHtcbiAgICAgIGFic29sdXRlOiBzdGVlZG9zRGF0YS5hYnNvbHV0ZVxuICAgIH0pO1xuICAgIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbWFnZVNpZ24oc3RlZWRvc0RhdGEpO1xuICAgIHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW5zdGFuY2VTaWduVGV4dChzdGVlZG9zRGF0YSk7XG4gIH1cbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBmaWVsZCwgbG9jYWxlLCB1dGNPZmZzZXQpIHtcbiAgdmFyIGRhdGUsIGUsIGhvdXJzLCBtb250aCwgc2Vjb25kcywgdCwgdDAsIHQxLCB5ZWFyO1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSBmYWxzZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdlbWFpbCc6XG4gICAgICB2YWx1ZSA9IHZhbHVlID8gJzxhIGhyZWY9XFwnbWFpbHRvOicgKyB2YWx1ZSArICdcXCc+JyArIHZhbHVlICsgJzwvYT4nIDogJyc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1cmwnOlxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFwiPGEgaHJlZj0nXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICAgIHZhbHVlID0gXCI8YSBocmVmPScnIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gXCI8YSBocmVmPSdodHRwOi8vXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdncm91cCc6XG4gICAgICBpZiAoZmllbGQuaXNfbXVsdGlzZWxlY3QpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZ2V0UHJvcGVydHkoXCJmdWxsbmFtZVwiKS50b1N0cmluZygpIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZnVsbG5hbWUgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1c2VyJzpcbiAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKSA6IHZvaWQgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLm5hbWUgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICB2YWx1ZSA9ICcqKioqKionO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgaWYgKHZhbHVlICYmIHZhbHVlICE9PSAnZmFsc2UnKSB7XG4gICAgICAgIHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiLCB7fSwgbG9jYWxlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RhdGVUaW1lJzpcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPT09IDE2KSB7XG4gICAgICAgIHQgPSB2YWx1ZS5zcGxpdChcIlRcIik7XG4gICAgICAgIHQwID0gdFswXS5zcGxpdChcIi1cIik7XG4gICAgICAgIHQxID0gdFsxXS5zcGxpdChcIjpcIik7XG4gICAgICAgIHllYXIgPSB0MFswXTtcbiAgICAgICAgbW9udGggPSB0MFsxXTtcbiAgICAgICAgZGF0ZSA9IHQwWzJdO1xuICAgICAgICBob3VycyA9IHQxWzBdO1xuICAgICAgICBzZWNvbmRzID0gdDFbMV07XG4gICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUodmFsdWUsIHV0Y09mZnNldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpZiAoZmllbGQuaXNfdGV4dGFyZWEpIHtcbiAgICAgICAgdmFsdWUgPSBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bih2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0ZpeGVkKGZpZWxkLmRpZ2l0cyk7XG4gICAgICAgIHZhbHVlID0gU3RlZWRvcy5udW1iZXJUb1N0cmluZyh2YWx1ZSwgbG9jYWxlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29kYXRhJzpcbiAgICAgIHZhbHVlID0gdmFsdWVbJ0BsYWJlbCddO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbCA9IGZ1bmN0aW9uKGZpZWxkcywgY29kZSkge1xuICB2YXIgZmllbGQ7XG4gIGZpZWxkID0gZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpO1xuICBpZiAoZmllbGQpIHtcbiAgICBpZiAoZmllbGQubmFtZSkge1xuICAgICAgcmV0dXJuIGZpZWxkLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaWVsZC5jb2RlO1xuICAgIH1cbiAgfVxufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlRm9ybVZlcnNpb24gPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICB2YXIgZm9ybSwgZm9ybV9maWVsZHMsIGZvcm1fdmVyc2lvbjtcbiAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XG4gIGZvcm1fdmVyc2lvbiA9IHt9O1xuICBmb3JtX2ZpZWxkcyA9IFtdO1xuICBpZiAoZm9ybS5jdXJyZW50Ll9pZCA9PT0gaW5zdGFuY2UuZm9ybV92ZXJzaW9uKSB7XG4gICAgZm9ybV92ZXJzaW9uID0gZm9ybS5jdXJyZW50O1xuICB9IGVsc2Uge1xuICAgIGZvcm1fdmVyc2lvbiA9IF8ud2hlcmUoZm9ybS5oaXN0b3J5cywge1xuICAgICAgX2lkOiBpbnN0YW5jZS5mb3JtX3ZlcnNpb25cbiAgICB9KVswXTtcbiAgfVxuICBmb3JtX3ZlcnNpb24uZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQpIHtcbiAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3NlY3Rpb24nKSB7XG4gICAgICBmb3JtX2ZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgIGlmIChmaWVsZC5maWVsZHMpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybV9maWVsZHMucHVzaChmKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWVsZC50eXBlID09PSAndGFibGUnKSB7XG4gICAgICBmaWVsZFsnc2ZpZWxkcyddID0gZmllbGRbJ2ZpZWxkcyddO1xuICAgICAgZGVsZXRlIGZpZWxkWydmaWVsZHMnXTtcbiAgICAgIHJldHVybiBmb3JtX2ZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuICAgIH1cbiAgfSk7XG4gIGZvcm1fdmVyc2lvbi5maWVsZHMgPSBmb3JtX2ZpZWxkcztcbiAgcmV0dXJuIGZvcm1fdmVyc2lvbjtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRGbG93VmVyc2lvbiA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBmbG93LCBmbG93X3ZlcnNpb247XG4gIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGluc3RhbmNlLmZsb3cpO1xuICBmbG93X3ZlcnNpb24gPSB7fTtcbiAgaWYgKGZsb3cuY3VycmVudC5faWQgPT09IGluc3RhbmNlLmZsb3dfdmVyc2lvbikge1xuICAgIGZsb3dfdmVyc2lvbiA9IGZsb3cuY3VycmVudDtcbiAgfSBlbHNlIHtcbiAgICBmbG93X3ZlcnNpb24gPSBfLndoZXJlKGZsb3cuaGlzdG9yeXMsIHtcbiAgICAgIF9pZDogaW5zdGFuY2UuZmxvd192ZXJzaW9uXG4gICAgfSlbMF07XG4gIH1cbiAgcmV0dXJuIGZsb3dfdmVyc2lvbjtcbn07XG5cbl9nZXRWaWV3SHRtbCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHZpZXdIdG1sO1xuICB2aWV3SHRtbCA9IEFzc2V0cy5nZXRUZXh0KHBhdGgpO1xuICBpZiAodmlld0h0bWwpIHtcbiAgICB2aWV3SHRtbCA9IHZpZXdIdG1sLnJlcGxhY2UoLzx0ZW1wbGF0ZVtcXHdcXHNcXFwiXFw9J10rPi9pLCBcIlwiKS5yZXBsYWNlKC88XFwvdGVtcGxhdGU+L2ksIFwiXCIpO1xuICB9XG4gIHJldHVybiB2aWV3SHRtbDtcbn07XG5cbl9nZXRMb2NhbGUgPSBmdW5jdGlvbih1c2VyKSB7XG4gIHZhciBsb2NhbGUsIHJlZiwgcmVmMTtcbiAgaWYgKCh1c2VyICE9IG51bGwgPyAocmVmID0gdXNlci5sb2NhbGUpICE9IG51bGwgPyByZWYudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHZvaWQgMCA6IHZvaWQgMCkgPT09ICd6aC1jbicpIHtcbiAgICBsb2NhbGUgPSBcInpoLUNOXCI7XG4gIH0gZWxzZSBpZiAoKHVzZXIgIT0gbnVsbCA/IChyZWYxID0gdXNlci5sb2NhbGUpICE9IG51bGwgPyByZWYxLnRvTG9jYWxlTG93ZXJDYXNlKCkgOiB2b2lkIDAgOiB2b2lkIDApID09PSAnZW4tdXMnKSB7XG4gICAgbG9jYWxlID0gXCJlblwiO1xuICB9IGVsc2Uge1xuICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgfVxuICByZXR1cm4gbG9jYWxlO1xufTtcblxuX2dldFJlcXVpcmVkRmllbGRzID0gZnVuY3Rpb24oZmllbGRzLCByZXYpIHtcbiAgaWYgKCFyZXYpIHtcbiAgICByZXYgPSBbXTtcbiAgfVxuICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCkge1xuICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VjdGlvbicpIHtcbiAgICAgIHJldHVybiBfZ2V0UmVxdWlyZWRGaWVsZHMoZmllbGQuZmllbGRzLCByZXYpO1xuICAgIH0gZWxzZSBpZiAoZmllbGQudHlwZSA9PT0gJ3RhYmxlJykge1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmaWVsZC5pc19yZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gcmV2LnB1c2goZmllbGQuY29kZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldjtcbn07XG5cbl9nZXRTdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyA9IGZ1bmN0aW9uKGZpZWxkcywgc3RlcHMpIHtcbiAgdmFyIGVkaXRhYmxlQ29kZSwgc3RhcnRTdGVwO1xuICBzdGFydFN0ZXAgPSBzdGVwcy5maW5kUHJvcGVydHlCeVBLKFwic3RlcF90eXBlXCIsIFwic3RhcnRcIik7XG4gIGVkaXRhYmxlQ29kZSA9IFtdO1xuICBfLmtleXMoc3RhcnRTdGVwLnBlcm1pc3Npb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChzdGFydFN0ZXAucGVybWlzc2lvbnNba2V5XSA9PT0gJ2VkaXRhYmxlJykge1xuICAgICAgcmV0dXJuIGVkaXRhYmxlQ29kZS5wdXNoKGtleSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGVkaXRhYmxlQ29kZTtcbn07XG5cbl9nZXRTdGFydFN0ZXBSZXF1aXJlZEZpZWxkcyA9IGZ1bmN0aW9uKGZpZWxkcywgc3RlcHMpIHtcbiAgdmFyIGVkaXRhYmxlQ29kZSwgcmVxdWlyZWRGaWVsZHM7XG4gIHJlcXVpcmVkRmllbGRzID0gX2dldFJlcXVpcmVkRmllbGRzKGZpZWxkcyk7XG4gIGVkaXRhYmxlQ29kZSA9IF9nZXRTdGFydFN0ZXBFZGl0YWJsZUZpZWxkcyhmaWVsZHMsIHN0ZXBzKTtcbiAgcmV0dXJuIF8uaW50ZXJzZWN0aW9uKHJlcXVpcmVkRmllbGRzLCBlZGl0YWJsZUNvZGUpO1xufTtcblxuX2dldFRlbXBsYXRlRGF0YSA9IGZ1bmN0aW9uKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucykge1xuICB2YXIgZmxvdywgZm9ybSwgZm9ybV92ZXJzaW9uLCBsb2NhbGUsIHN0ZWVkb3NEYXRhO1xuICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgZm9ybV92ZXJzaW9uID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlRm9ybVZlcnNpb24oaW5zdGFuY2UpO1xuICB9IGVsc2Uge1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKGluc3RhbmNlKTtcbiAgfVxuICBsb2NhbGUgPSBfZ2V0TG9jYWxlKHVzZXIpO1xuICBzdGVlZG9zRGF0YSA9IHt9O1xuICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgc3RlZWRvc0RhdGEgPSBfLmNsb25lKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKSk7XG4gICAgc3RlZWRvc0RhdGEuaW5zbmFtZSA9IGluc3RhbmNlLm5hbWU7XG4gICAgc3RlZWRvc0RhdGEuaW5zX3N0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG4gICAgc3RlZWRvc0RhdGEuaW5zX2ZpbmFsX2RlY2lzaW9uID0gaW5zdGFuY2UuaW5zX2ZpbmFsX2RlY2lzaW9uO1xuICAgIHN0ZWVkb3NEYXRhLmluc19jb2RlID0gaW5zdGFuY2UuY29kZTtcbiAgICBzdGVlZG9zRGF0YS5pbnNfaXNfYXJjaGl2ZWQgPSBpbnN0YW5jZS5pc19hcmNoaXZlZDtcbiAgICBzdGVlZG9zRGF0YS5pbnNfaXNfZGVsZXRlZCA9IGluc3RhbmNlLmluc19pc19kZWxldGVkO1xuICAgIHN0ZWVkb3NEYXRhLmFwcGxpY2FudF9uYW1lID0gaW5zdGFuY2UuYXBwbGljYW50X25hbWU7XG4gICAgc3RlZWRvc0RhdGEuYXBwbGljYW50Q29udGV4dCA9IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lO1xuICB9XG4gIHN0ZWVkb3NEYXRhLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gIHN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbiA9IGZvcm1fdmVyc2lvbjtcbiAgc3RlZWRvc0RhdGEubG9jYWxlID0gbG9jYWxlO1xuICBzdGVlZG9zRGF0YS51dGNPZmZzZXQgPSB1c2VyLnV0Y09mZnNldDtcbiAgc3RlZWRvc0RhdGEuc3BhY2UgPSBpbnN0YW5jZS5zcGFjZTtcbiAgc3RlZWRvc0RhdGEuc2Vzc2lvblVzZXJJZCA9IHVzZXIuX2lkO1xuICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuZWRpdGFibGUgOiB2b2lkIDApIHtcbiAgICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpbnN0YW5jZS5mb3JtXG4gICAgICB9KTtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpbnN0YW5jZS5mbG93XG4gICAgICB9KTtcbiAgICAgIHN0ZWVkb3NEYXRhLnN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzID0gX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzKGZvcm0uY3VycmVudC5maWVsZHMsIGZsb3cuY3VycmVudC5zdGVwcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGVlZG9zRGF0YTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5mb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZSwgdXRjT2Zmc2V0KSB7XG4gIHZhciBwYXNzaW5nO1xuICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgcGFzc2luZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHBhc3NpbmcgPSB0cnVlO1xuICB9XG4gIGlmICghdXRjT2Zmc2V0ICYmIHV0Y09mZnNldCAhPT0gMCkge1xuICAgIHV0Y09mZnNldCA9IDg7XG4gIH1cbiAgcmV0dXJuIG1vbWVudChkYXRlKS51dGNPZmZzZXQodXRjT2Zmc2V0LCBwYXNzaW5nKS5mb3JtYXQoXCJZWVlZLU1NLUREIEhIOm1tXCIpO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlVmlldyA9IGZ1bmN0aW9uKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucykge1xuICB2YXIgYm9keSwgaW5zdGFuY2VDb21waWxlZCwgaW5zdGFuY2VSZW5kZXJGdW5jdGlvbiwgaW5zdGFuY2VUZW1wbGF0ZSwgc3RlZWRvc0RhdGE7XG4gIHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IGZhbHNlO1xuICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5hYnNvbHV0ZSA6IHZvaWQgMCkge1xuICAgIHN0ZWVkb3NEYXRhLmFic29sdXRlID0gdHJ1ZTtcbiAgfVxuICBpbnN0YW5jZVRlbXBsYXRlID0gVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlKGluc3RhbmNlLCBvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnRlbXBsYXRlTmFtZSA6IHZvaWQgMCk7XG4gIGluc3RhbmNlVGVtcGxhdGUgPSBpbnN0YW5jZVRlbXBsYXRlLnJlcGxhY2UoL2FmU2VsZWN0VXNlci9nLCBcImFmU2VsZWN0VXNlclJlYWRcIik7XG4gIGlmICghKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuZWRpdGFibGUgOiB2b2lkIDApKSB7XG4gICAgaW5zdGFuY2VUZW1wbGF0ZSA9IGluc3RhbmNlVGVtcGxhdGUucmVwbGFjZSgvYWZGb3JtR3JvdXAvZywgXCJhZkZvcm1Hcm91cFJlYWRcIik7XG4gIH1cbiAgaW5zdGFuY2VDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoaW5zdGFuY2VUZW1wbGF0ZSwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgaW5zdGFuY2VSZW5kZXJGdW5jdGlvbiA9IGV2YWwoaW5zdGFuY2VDb21waWxlZCk7XG4gIFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZV9yZWFkb25seV92aWV3XCIsIGluc3RhbmNlUmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcuaGVscGVycyhJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzKTtcbiAgSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmluaXQoc3RlZWRvc0RhdGEpO1xuICBib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldywgc3RlZWRvc0RhdGEpO1xuICByZXR1cm4gXCI8ZGl2IGlkPSdpbnN0YW5jZWZvcm0nID5cXG5cdFwiICsgYm9keSArIFwiXFxuPC9kaXY+XCI7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VHJhY2VzVmlldyA9IGZ1bmN0aW9uKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucykge1xuICB2YXIgYm9keSwgZm9ybSwgc3RlZWRvc0RhdGEsIHRyYWNlQ29tcGlsZWQsIHRyYWNlUmVuZGVyRnVuY3Rpb24sIHRyYWNlc0h0bWw7XG4gIHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpO1xuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcbiAgaWYgKGZvcm0uaW5zdGFuY2Vfc3R5bGUgPT09IFwidGFibGVcIiB8fCAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy50ZW1wbGF0ZU5hbWUgOiB2b2lkIDApID09PSBcInRhYmxlXCIpIHtcbiAgICB0cmFjZXNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvdHJhY2VzX3RhYmxlLmh0bWwnKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFjZXNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvdHJhY2VzLmh0bWwnKTtcbiAgfVxuICB0cmFjZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0cmFjZXNIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICB0cmFjZVJlbmRlckZ1bmN0aW9uID0gZXZhbCh0cmFjZUNvbXBpbGVkKTtcbiAgVGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInRyYWNlX3JlYWRvbmx5X3ZpZXdcIiwgdHJhY2VSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldy5oZWxwZXJzKFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMpO1xuICBib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldywgaW5zdGFuY2UudHJhY2VzKTtcbiAgcmV0dXJuIGJvZHk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0QXR0YWNobWVudFZpZXcgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UpIHtcbiAgdmFyIGF0dGFjaG1lbnRDb21waWxlZCwgYXR0YWNobWVudEh0bWwsIGF0dGFjaG1lbnRSZW5kZXJGdW5jdGlvbiwgYm9keSwgc3RlZWRvc0RhdGE7XG4gIHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpO1xuICBhdHRhY2htZW50SHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2luc3RhbmNlX2F0dGFjaG1lbnRzLmh0bWwnKTtcbiAgYXR0YWNobWVudENvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShhdHRhY2htZW50SHRtbCwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgYXR0YWNobWVudFJlbmRlckZ1bmN0aW9uID0gZXZhbChhdHRhY2htZW50Q29tcGlsZWQpO1xuICBUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiYXR0YWNobWVudHNfcmVhZG9ubHlfdmlld1wiLCBhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcuaGVscGVycyhJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzKTtcbiAgYm9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcpO1xuICByZXR1cm4gYm9keTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkSW5zdGFuY2VzVmlldyA9IGZ1bmN0aW9uKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucykge1xuICB2YXIgYm9keSwgcmVsYXRlZEluc3RhbmNlc0NvbXBpbGVkLCByZWxhdGVkSW5zdGFuY2VzSHRtbCwgcmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uLCBzdGVlZG9zRGF0YTtcbiAgc3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSk7XG4gIHN0ZWVkb3NEYXRhLmFic29sdXRlID0gZmFsc2U7XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmFic29sdXRlIDogdm9pZCAwKSB7XG4gICAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSB0cnVlO1xuICB9XG4gIHJlbGF0ZWRJbnN0YW5jZXNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvcmVsYXRlZF9pbnN0YW5jZXMuaHRtbCcpO1xuICByZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHJlbGF0ZWRJbnN0YW5jZXNIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICByZWxhdGVkSW5zdGFuY2VzUmVuZGVyRnVuY3Rpb24gPSBldmFsKHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCk7XG4gIFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJyZWxhdGVkX2luc3RhbmNlc192aWV3XCIsIHJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldy5oZWxwZXJzKFJlbGF0ZWRJbnN0YW5jZXMuaGVscGVycyk7XG4gIGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LCBzdGVlZG9zRGF0YSk7XG4gIHJldHVybiBib2R5O1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldE9uTG9hZFNjcmlwdCA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBmb3JtX3NjcmlwdCwgZm9ybV92ZXJzaW9uO1xuICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcbiAgZm9ybV9zY3JpcHQgPSBmb3JtX3ZlcnNpb24uZm9ybV9zY3JpcHQ7XG4gIGlmIChmb3JtX3NjcmlwdCAmJiBmb3JtX3NjcmlwdC5yZXBsYWNlKC9cXG4vZywgXCJcIikucmVwbGFjZSgvXFxzL2csIFwiXCIpLmxlbmd0aCA+IDApIHtcbiAgICBmb3JtX3NjcmlwdCA9IFwiQ29yZUZvcm0gPSB7fTtDb3JlRm9ybS5pbnN0YW5jZWZvcm0gPSB7fTtcIiArIGZvcm1fc2NyaXB0O1xuICAgIHJldHVybiBmb3JtX3NjcmlwdCArPSBcIjtpZihDb3JlRm9ybS5mb3JtX09uTG9hZCl7d2luZG93Lm9ubG9hZCA9IENvcmVGb3JtLmZvcm1fT25Mb2FkKCk7fVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmb3JtX3NjcmlwdCA9IFwiXCI7XG4gIH1cbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGFic29sdXRlVXJsLCBhbGxDc3NMaW5rLCBhdHRhY2htZW50LCBib2R5LCBjc3NIcmVmLCBmb3JtLCBmb3JtRGVzY3JpcHRpb24sIGZvcm1EZXNjcmlwdGlvbkh0bWwsIGh0bWwsIGluc3RhbmNlQm94U3R5bGUsIGluc3RhbmNlX3N0eWxlLCBvbkxvYWRTY3JpcHQsIG9wZW5GaWxlU2NyaXB0LCByZWxhdGVkX2luc3RhbmNlcywgc2hvd1RyYWNlc0J0biwgc2hvd1RyYWNlc1NjcmlwdCwgc3VibWl0X2J0biwgdHJhY2UsIHdpZHRoO1xuICBib2R5ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICBvbkxvYWRTY3JpcHQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0T25Mb2FkU2NyaXB0KGluc3RhbmNlKTtcbiAgb3BlbkZpbGVTY3JpcHQgPSBcImlmKHdpbmRvdy5pc05vZGUgJiYgaXNOb2RlKCkpe1xcblx0YXR0YWNocyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXFxcImluc19hdHRhY2hfaHJlZlxcXCIpO1xcblx0Zm9yKHZhciBpID0gMDsgaSA8IGF0dGFjaHMubGVuZ3RoOyBpKyspe1xcblx0XHRhdHRhY2ggPSBhdHRhY2hzW2ldO1xcblx0XHRhdHRhY2guYWRkRXZlbnRMaXN0ZW5lcihcXFwiY2xpY2tcXFwiLCBmdW5jdGlvbihlKXtcXG5cdFx0XHRpZihpc0ltYWdlKHRoaXMuZGF0YXNldC50eXBlKSB8fCBpc0h0bWwodGhpcy5kYXRhc2V0LnR5cGUpKXtcXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcXG5cdFx0XHRcdG9wZW5XaW5kb3coXFxcIi9hcGkvZmlsZXMvaW5zdGFuY2VzL1xcXCIgKyB0aGlzLmRhdGFzZXQuaWQpO1xcblx0XHRcdH1lbHNlIGlmKG53X2NvcmUuY2FuT3BlbkZpbGUodGhpcy5kYXRhc2V0Lm5hbWUpKXtcXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcXG5cdFx0XHRcdG53X2NvcmUub3BlbkZpbGUodGhpcy5ocmVmLCB0aGlzLmRhdGFzZXQubmFtZSlcXG5cdFx0XHR9XFxuXHRcdH0pO1xcblx0fVxcbn1cXG5cXG52YXIgZmxvdyA9IFxcXCJcIiArIGluc3RhbmNlLmZsb3cgKyBcIlxcXCI7XFxudmFyIHNwYWNlID0gXFxcIlwiICsgaW5zdGFuY2Uuc3BhY2UgKyBcIlxcXCI7XFxuXCI7XG4gIGlmICghU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XG4gICAgaWYgKChmb3JtICE9IG51bGwgPyBmb3JtLmluc3RhbmNlX3N0eWxlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJykge1xuICAgICAgaW5zdGFuY2Vfc3R5bGUgPSBcImluc3RhbmNlLXRhYmxlXCI7XG4gICAgfVxuICB9XG4gIGlmICgob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy50ZW1wbGF0ZU5hbWUgOiB2b2lkIDApID09PSAndGFibGUnKSB7XG4gICAgaW5zdGFuY2Vfc3R5bGUgPSBcImluc3RhbmNlLXRhYmxlXCI7XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuaW5zdGFuY2Vfc3R5bGUgOiB2b2lkIDApIHtcbiAgICBpbnN0YW5jZV9zdHlsZSA9IG9wdGlvbnMuaW5zdGFuY2Vfc3R5bGU7XG4gIH1cbiAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMuc2hvd1RyYWNlID09PSB0cnVlKSB7XG4gICAgdHJhY2UgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VHJhY2VzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpO1xuICB9IGVsc2Uge1xuICAgIHRyYWNlID0gXCJcIjtcbiAgfVxuICBpbnN0YW5jZUJveFN0eWxlID0gXCJcIjtcbiAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmZpbmFsX2RlY2lzaW9uKSB7XG4gICAgaWYgKGluc3RhbmNlLmZpbmFsX2RlY2lzaW9uID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgIGluc3RhbmNlQm94U3R5bGUgPSBcImJveC1zdWNjZXNzXCI7XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICBpbnN0YW5jZUJveFN0eWxlID0gXCJib3gtZGFuZ2VyXCI7XG4gICAgfVxuICB9XG4gIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnNob3dBdHRhY2htZW50cyA9PT0gdHJ1ZSkge1xuICAgIGF0dGFjaG1lbnQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0QXR0YWNobWVudFZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgfSBlbHNlIHtcbiAgICBhdHRhY2htZW50ID0gXCJcIjtcbiAgfVxuICByZWxhdGVkX2luc3RhbmNlcyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRSZWxhdGVkSW5zdGFuY2VzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICBhYnNvbHV0ZVVybCA9IE1ldGVvci5hYnNvbHV0ZVVybCgpO1xuICB3aWR0aCA9IFwiOTYwcHhcIjtcbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMud2lkdGggOiB2b2lkIDApIHtcbiAgICB3aWR0aCA9IFwiXCI7XG4gIH1cbiAgY3NzSHJlZiA9IE1ldGVvci5hYnNvbHV0ZVVybChcInN0ZWVkb3MtY3NzXCIpO1xuICBhbGxDc3NMaW5rID0gXCI8bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIHR5cGU9XFxcInRleHQvY3NzXFxcIiBjbGFzcz1cXFwiX19tZXRlb3ItY3NzX19cXFwiIGhyZWY9XFxcIlwiICsgY3NzSHJlZiArIFwiXFxcIj5cIjtcbiAgc3VibWl0X2J0biA9IFwiXCI7XG4gIHNob3dUcmFjZXNCdG4gPSBcIjxkaXYgY2xhc3M9XFxcInByaW50LXRvb2xcXFwiPlxcblx0PGxhYmVsIGNsYXNzPVxcXCJjYngtbGFiZWxcXFwiPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgY2hlY2tlZCBjbGFzcz1cXFwiY2J4LXByaW50IGNieC1wcmludC10cmFjZXNcXFwiIGlkPVxcXCJjYngtcHJpbnQtdHJhY2VzXFxcIi8+PHNwYW4+XCIgKyAodCgnaW5zdGFuY2VfYXBwcm92YWxfaGlzdG9yeScpKSArIFwiPC9zcGFuPjwvbGFiZWw+XFxuPC9kaXY+XCI7XG4gIHNob3dUcmFjZXNTY3JpcHQgPSBcIiQoIGRvY3VtZW50ICkucmVhZHkoZnVuY3Rpb24oKXtcXG5cdHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC10cmFjZXMnKTtcXG5cdHZhciB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaW5zdGFuY2UtdHJhY2VzJylbMF07XFxuXHRpZiAoYi5jaGVja2VkKXtcXG5cdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXFxuXHR9IGVsc2Uge1xcblx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xcblx0fVxcblx0Yi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihlKXtcXG5cdFx0aWYgKGUudGFyZ2V0LmNoZWNrZWQpe1xcblx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xcblx0XHR9IGVsc2Uge1xcblx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXFxuXHRcdH1cXG5cdH0pO1xcbn0pO1xcblwiO1xuICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5zdHlsZXMgOiB2b2lkIDApIHtcbiAgICBhbGxDc3NMaW5rID0gXCJcIjtcbiAgfVxuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgX2lkOiBpbnN0YW5jZS5mb3JtXG4gIH0pO1xuICBmb3JtRGVzY3JpcHRpb25IdG1sID0gXCJcIjtcbiAgaWYgKGZvcm0pIHtcbiAgICBmb3JtRGVzY3JpcHRpb24gPSBmb3JtLmRlc2NyaXB0aW9uO1xuICAgIGlmIChmb3JtRGVzY3JpcHRpb24pIHtcbiAgICAgIGZvcm1EZXNjcmlwdGlvbiA9IGZvcm1EZXNjcmlwdGlvbi5yZXBsYWNlKC9cXG4vZywgXCI8YnIvPlwiKTtcbiAgICAgIGZvcm1EZXNjcmlwdGlvbkh0bWwgPSBcIjxkaXYgY2xhc3M9XFxcImJveC1oZWFkZXIgIHdpdGgtYm9yZGVyIGluc3RhbmNlLWhlYWRlclxcXCI+XFxuXHQ8ZGl2Plxcblx0XHRcIiArIGZvcm1EZXNjcmlwdGlvbiArIFwiXFxuXHQ8L2Rpdj5cXG48L2Rpdj5cIjtcbiAgICB9XG4gIH1cbiAgaHRtbCA9IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWw+XFxuXHQ8aGVhZD5cXG5cdFx0PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLThcXFwiLz5cXG5cdFx0XCIgKyBhbGxDc3NMaW5rICsgXCJcXG5cdFx0PHNjcmlwdCBzcmM9XFxcImh0dHBzOi8vd3d3LnN0ZWVkb3MuY29tL3dlYnNpdGUvbGlicy9qcXVlcnkubWluLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPjwvc2NyaXB0Plxcblx0XHQ8c2NyaXB0IHNyYz1cXFwiL2pzL253X2NvcmUuanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+PC9zY3JpcHQ+XFxuXHRcdFwiICsgKG9wdGlvbnMucGx1Z2lucyB8fCBcIlwiKSArIFwiXFxuXFxuXHRcdDxzdHlsZT5cXG5cdFx0XHQuc3RlZWRvc3tcXG5cdFx0XHRcdHdpZHRoOiBcIiArIHdpZHRoICsgXCI7XFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogYXV0bztcXG5cdFx0XHRcdG1hcmdpbi1yaWdodDogYXV0bztcXG5cdFx0XHR9XFxuXFxuXHRcdFx0Lmluc3RhbmNlLXZpZXcgLmluc3RhbmNlLW5hbWV7XFxuXHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudFxcblx0XHRcdH1cXG5cdFx0XHQuYm94LXRvb2xze1xcblx0XHRcdFx0ZGlzcGxheTogbm9uZTtcXG5cdFx0XHR9XFxuXHRcdFx0LmJveC5jb2xsYXBzZWQtYm94IC5ib3gtYm9keSwuYm94LmNvbGxhcHNlZC1ib3ggLmJveC1mb290ZXIge1xcblx0XHRcdCAgZGlzcGxheTogYmxvY2s7XFxuXHRcdFx0fVxcblxcblx0XHRcdGJvZHl7XFxuXHRcdFx0XHRiYWNrZ3JvdW5kOiBhenVyZSAhaW1wb3J0YW50O1xcblx0XHRcdH1cXG5cXG5cdFx0XHQuaW5zdGFuY2UtdmlldyAuaW5zdGFuY2UtdHJhY2Vze1xcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAxNXB4O1xcblx0XHRcdFx0cGFkZGluZy1yaWdodDogMTVweDtcXG5cdFx0XHR9XFxuXFxuXHRcdFx0XCIgKyAoKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuc3R5bGVzIDogdm9pZCAwKSB8fCBcIlwiKSArIFwiXFxuXHRcdDwvc3R5bGU+XFxuXHQ8L2hlYWQ+XFxuXHQ8Ym9keT5cXG5cdFx0PGRpdiBjbGFzcz1cXFwic3RlZWRvc1xcXCI+XFxuXHRcdFx0XCIgKyBzdWJtaXRfYnRuICsgXCJcXG5cdFx0XHRcIiArIHNob3dUcmFjZXNCdG4gKyBcIlxcblx0XHRcdDxkaXYgY2xhc3M9XFxcImluc3RhbmNlLXZpZXdcXFwiPlxcblx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiaW5zdGFuY2UgXCIgKyBpbnN0YW5jZV9zdHlsZSArIFwiXFxcIj5cXG5cdFx0XHRcdFx0PGZvcm0gbmFtZT1cXFwiaW5zdGFuY2VGb3JtXFxcIj5cXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJpbnN0YW5jZS1mb3JtIGJveCBcIiArIGluc3RhbmNlQm94U3R5bGUgKyBcIlxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcIiArIGZvcm1EZXNjcmlwdGlvbkh0bWwgKyBcIlxcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiYm94LWJvZHlcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFwiICsgYm9keSArIFwiXFxuXHRcdFx0XHRcdFx0XHRcdFx0XCIgKyBhdHRhY2htZW50ICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcIiArIHJlbGF0ZWRfaW5zdGFuY2VzICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PC9mb3JtPlxcblx0XHRcdFx0XHRcIiArIHRyYWNlICsgXCJcXG5cdFx0XHRcdDwvZGl2Plxcblx0XHRcdDwvZGl2Plxcblx0XHQ8L2Rpdj5cXG5cdDwvYm9keT5cXG5cdDxzY3JpcHQ+XCIgKyBvcGVuRmlsZVNjcmlwdCArIFwiO1wiICsgb25Mb2FkU2NyaXB0ICsgXCI7XCIgKyBzaG93VHJhY2VzU2NyaXB0ICsgXCI8L3NjcmlwdD5cXG48L2h0bWw+XCI7XG4gIHJldHVybiBodG1sO1xufTtcbiIsIlRlbXBsYXRlTWFuYWdlciA9IHt9O1xyXG5cclxuZm9ybUlkID0gJ2luc3RhbmNlZm9ybSc7XHJcblxyXG5cclxuVGVtcGxhdGVNYW5hZ2VyLmluc3RhbmNlX3RpdGxlID0gKCktPlxyXG5cdHBhZ2VUaXRsZSA9IFwiXCJcIlxyXG5cdFx0e3tpbnN0YW5jZS5uYW1lfX1cclxuXHRcIlwiXCJcclxuXHJcblx0cGFnZVRpdGxlVHJDbGFzcyA9IFwiaW5zdGFuY2UtbmFtZVwiXHJcblxyXG5cdGlmIENvcmVGb3JtPy5wYWdlVGl0bGVGaWVsZE5hbWVcclxuXHRcdHBhZ2VUaXRsZSA9IFwiXCJcIlxyXG5cdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPVwiI3tDb3JlRm9ybS5wYWdlVGl0bGVGaWVsZE5hbWV9XCIgbGFiZWw9ZmFsc2V9fVxyXG5cdFx0XCJcIlwiXHJcblx0XHRwYWdlVGl0bGVUckNsYXNzID0gXCJcIlxyXG5cclxuXHRpZiBDb3JlRm9ybT8ucGFnZVRpdGxlXHJcblx0XHRwYWdlVGl0bGUgPSBcIlwiXCJcclxuXHRcdFx0I3tDb3JlRm9ybS5wYWdlVGl0bGV9XHJcblx0XHRcIlwiXCJcclxuXHRcdHBhZ2VUaXRsZVRyQ2xhc3MgPSBcIlwiXHJcblxyXG5cdHZhbCA9XHJcblx0XHRwYWdlVGl0bGU6IHBhZ2VUaXRsZVxyXG5cdFx0cGFnZVRpdGxlVHJDbGFzczogcGFnZVRpdGxlVHJDbGFzc1xyXG5cclxuXHRyZXR1cm4gdmFsXHJcblxyXG5UZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZSA9IChpbnN0YW5jZSwgX2V4cG9ydCkgLT5cclxuXHJcblx0dGVtcGxhdGUgPSBcIlwiXCJcclxuXHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XHJcblx0XHQ8dGFibGUgY2xhc3M9XCJ0YWJsZS1wYWdlLXRpdGxlIGZvcm0tdGFibGUgbm8tYm9yZGVyIHRleHQtYWxpZ24tY2VudGVyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtkaXNwbGF5OiBpbmxpbmUtdGFibGU7XCI+XHJcblx0XHRcdDx0ciBjbGFzcz1cIiN7dGhpcy5pbnN0YW5jZV90aXRsZSgpLnBhZ2VUaXRsZVRyQ2xhc3N9XCI+XHJcblx0XHRcdFx0PHRkIGNsYXNzPVwiaW5zdGFuY2UtdGFibGUtbmFtZS10ZCBwYWdlLXRpdGxlXCI+XHJcblx0XHRcdFx0XHQje3RoaXMuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGV9XHJcblx0XHRcdFx0PC90ZD5cclxuXHRcdFx0PC90cj5cclxuXHJcblx0XHQ8L3RhYmxlPlxyXG5cdFx0PHRhYmxlIGNsYXNzPVwidGFibGUtcGFnZS1ib2R5IGZvcm0tdGFibGVcIj5cclxuXHRcdFx0XHQ8dHIgc3R5bGU9XCJoZWlnaHQ6MHB4XCI+XHJcblx0XHRcdFx0XHQ8dGggc3R5bGU9J3dpZHRoOiAxNiUnPjwvdGg+XHJcblx0XHRcdFx0XHQ8dGg+PC90aD5cclxuXHRcdFx0XHRcdDx0aCBzdHlsZT0nd2lkdGg6IDE2JSc+PC90aD5cclxuXHRcdFx0XHRcdDx0aD48L3RoPlxyXG5cdFx0XHRcdDwvdHI+XHJcblx0XCJcIlwiO1xyXG5cclxuXHR0YWJsZV9maWVsZHMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRhYmxlX2ZpZWxkcyhpbnN0YW5jZSlcclxuXHJcblx0dGFibGVfZmllbGRzLmZvckVhY2ggKHRhYmxlX2ZpZWxkKS0+XHJcblxyXG5cdFx0cmVxdWlyZWQgPSBcIlwiXHJcblx0XHRpZiAhQ29yZUZvcm0/LnBhZ2VUaXRsZUZpZWxkTmFtZSB8fCBDb3JlRm9ybT8ucGFnZVRpdGxlRmllbGROYW1lICE9IHRhYmxlX2ZpZWxkLmNvZGVcclxuXHRcdFx0aWYgdGFibGVfZmllbGQuaXNfcmVxdWlyZWRcclxuXHRcdFx0XHRyZXF1aXJlZCA9IFwiaXMtcmVxdWlyZWRcIlxyXG5cclxuXHRcdFx0aWYgX2V4cG9ydFxyXG5cdFx0XHRcdHJlcXVpcmVkID0gXCJcIjtcclxuXHJcblx0XHRcdHB1cmVDb2RlID0gU3RlZWRvcy5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVyKHRhYmxlX2ZpZWxkLmNvZGUpO1xyXG5cclxuXHRcdFx0aWYgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZCh0YWJsZV9maWVsZClcclxuXHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydFxyXG5cdFx0XHRcdHRlbXBsYXRlICs9IFwiXCJcIlxyXG5cdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtdGl0bGUgI3tyZXF1aXJlZH1cIj5cclxuXHRcdFx0XHRcdFx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9XCIje3RhYmxlX2ZpZWxkLmNvZGV9XCJ9fVxyXG5cdFx0XHRcdFx0PC90ZD5cclxuXHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLWZpZWxkIG9waW5pb24tZmllbGQgb3Bpbmlvbi1maWVsZC0je3B1cmVDb2RlfSBhdXRvbWF0aWNcIiBjb2xzcGFuID0gXCIje3RhYmxlX2ZpZWxkLnRkX2NvbHNwYW59XCI+XHJcblx0XHRcdFx0XHRcdHt7PiBpbnN0YW5jZVNpZ25UZXh0IG5hbWU9XCIje3RhYmxlX2ZpZWxkLmNvZGV9XCJ9fVxyXG5cdFx0XHRcdFx0PC90ZD5cclxuXHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9lbmRcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGlmIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5jbHVkZXModGFibGVfZmllbGQudHlwZSwgJ3NlY3Rpb24sdGFibGUnKVxyXG5cdFx0XHRcdFx0dGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfc3RhcnRcclxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IFwiXCJcIlxyXG5cdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1jaGlsZGZpZWxkIHRkLWNoaWxkZmllbGQtI3twdXJlQ29kZX1cIiBjb2xzcGFuID0gXCIje3RhYmxlX2ZpZWxkLnRkX2NvbHNwYW59XCI+XHJcblx0XHRcdFx0XHRcdCAgIHt7PiBhZkZvcm1Hcm91cCBuYW1lPVwiI3t0YWJsZV9maWVsZC5jb2RlfVwiIGxhYmVsPWZhbHNlfX1cclxuXHRcdFx0XHRcdFx0PC90ZD5cclxuXHRcdFx0XHRcdFwiXCJcIlxyXG5cdFx0XHRcdFx0dGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfc3RhcnRcclxuXHJcblx0XHRcdFx0XHRpZiBfZXhwb3J0XHJcblx0XHRcdFx0XHRcdHRpdGxlX3Blcm1pc3Npb24gPSBcIlwiXHJcblx0XHRcdFx0XHRcdGZpZWxkX3Blcm1pc3Npb24gPSBcIlwiXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHRpdGxlX3Blcm1pc3Npb24gPSBcInRpdGxlLVwiICsgdGFibGVfZmllbGQucGVybWlzc2lvblxyXG5cdFx0XHRcdFx0XHRmaWVsZF9wZXJtaXNzaW9uID0gXCJmaWVsZC1cIiArIHRhYmxlX2ZpZWxkLnBlcm1pc3Npb25cclxuXHJcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSBcIlwiXCJcclxuXHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtdGl0bGUgdGQtdGl0bGUtI3twdXJlQ29kZX0gI3t0aXRsZV9wZXJtaXNzaW9ufSAje3JlcXVpcmVkfVwiPlxyXG5cdFx0XHRcdFx0XHRcdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPVwiI3t0YWJsZV9maWVsZC5jb2RlfVwifX1cclxuXHRcdFx0XHRcdFx0PC90ZD5cclxuXHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtZmllbGQgdGQtZmllbGQtI3twdXJlQ29kZX0gI3tmaWVsZF9wZXJtaXNzaW9ufVwiIGNvbHNwYW4gPSBcIiN7dGFibGVfZmllbGQudGRfY29sc3Bhbn1cIj5cclxuXHRcdFx0XHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIiBsYWJlbD1mYWxzZX19XHJcblx0XHRcdFx0XHRcdDwvdGQ+XHJcblx0XHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZFxyXG5cclxuXHR0ZW1wbGF0ZSArPSBcIlwiXCJcclxuXHRcdDwvdGFibGU+XHJcblxyXG5cdFx0PHRhYmxlIGNsYXNzPVwidGFibGUtcGFnZS1mb290ZXIgZm9ybS10YWJsZSBuby1ib3JkZXJcIj5cclxuXHRcdFx0PHRyIGNsYXNzPVwiYXBwbGljYW50LXdyYXBwZXJcIj5cclxuXHRcdFx0XHQ8dGQgY2xhc3M9XCJub3dyYXBcIj5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1sZWZ0Jz5cclxuXHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7X3QgXCJpbnN0YW5jZV9pbml0aWF0b3JcIn1977yaPC9sYWJlbD5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtdGFibGUtd3JhcHBlci10ZCBpbmxpbmUtbGVmdCc+XHJcblx0XHRcdFx0XHRcdHt7PlRlbXBsYXRlLmR5bmFtaWMgIHRlbXBsYXRlPVwiYWZTZWxlY3RVc2VyXCIgZGF0YT1hcHBsaWNhbnRDb250ZXh0fX1cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDwvdGQ+XHJcblx0XHRcdFx0PHRkIGNsYXNzPVwibm93cmFwXCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdwdWxsLWxlZnQnPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtbGVmdCc+XHJcblx0XHRcdFx0XHRcdFx0PGxhYmVsPnt7X3QgXCJpbnN0YW5jZV9zdWJtaXRfZGF0ZVwifX3vvJo8L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLXJpZ2h0Jz5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0e3tmb3JtYXREYXRlIGluc3RhbmNlLnN1Ym1pdF9kYXRlICd7XCJmb3JtYXRcIjpcIllZWVktTU0tRERcIn0nfX1cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHQ8L3RyPlxyXG5cdFx0PC90YWJsZT5cclxuXHQ8L2Rpdj5cclxuXHRcIlwiXCJcclxuXHRyZXR1cm4gdGVtcGxhdGVcclxuXHJcbiPmraTlpITmqKHmnb/lhaznlKjkuI7vvJppbnN0YW5jZSDnvJbovpHjgIHmn6XnnIvjgIHmiZPljbDjgIHovazlj5Hml7bnlJ/miJDpmYTku7bjgIHlj5HpgIHpgq7ku7Zib2R56YOo5YiGKHRhYmxlIOaooeadvylcclxuI+WmguaenOacieS/ruaUue+8jOivt+a1i+ivleehruiupOWFtuS7luWKn+iDveaYr+WQpuato+W4uOOAglxyXG5UZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlID1cclxuXHRkZWZhdWx0OiAoaW5zdGFuY2UpLT5cclxuXHJcblx0XHR0ZW1wbGF0ZSA9IFwiXCJcIlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwid2l0aC1ib3JkZXIgY29sLW1kLTEyXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImluc3RhbmNlLW5hbWVcIj5cclxuXHRcdFx0XHRcdDxoMyBjbGFzcz1cImJveC10aXRsZVwiPiN7VGVtcGxhdGVNYW5hZ2VyLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlfTwvaDM+XHJcblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImhlbHAtYmxvY2tcIj48L3NwYW4+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJoZWxwLWJsb2NrXCI+PC9zcGFuPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0e3sjZWFjaCBzdGVlZG9zX2Zvcm0uZmllbGRzfX1cclxuXHRcdFx0XHR7eyNpZiBpc09waW5pb25GaWVsZCB0aGlzfX1cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ7eyNpZiB0aGlzLmlzX3dpZGV9fWNvbC1tZC0xMnt7ZWxzZX19Y29sLW1kLTZ7ey9pZn19XCI+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGF1dG9tYXRpYyBvcGluaW9uLWZpZWxkLXt7dGhpcy5jb2RlfX1cIj5cclxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9dGhpcy5jb2RlfX08L2xhYmVsPlxyXG5cclxuXHRcdFx0XHRcdFx0XHR7ez4gaW5zdGFuY2VTaWduVGV4dCBuYW1lPXRoaXMuY29kZX19XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdHt7I2lmIGluY2x1ZGVzIHRoaXMudHlwZSAnc2VjdGlvbix0YWJsZSd9fVxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLW1kLTEyXCI+XHJcblx0XHRcdFx0XHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlIGxhYmVsPWZhbHNlfX1cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwie3sjaWYgdGhpcy5pc193aWRlfX1jb2wtbWQtMTJ7e2Vsc2V9fWNvbC1tZC02e3svaWZ9fVwiPlxyXG5cdFx0XHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGV9fVxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdHt7L2VhY2h9fVxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLW1kLTEyXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImFwcGxpY2FudC13cmFwcGVyIGZvcm0tZ3JvdXAgZm9ybS1ob3Jpem9udGFsXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIj5cclxuXHRcdFx0XHRcdCAge3tfdCBcImluc3RhbmNlX2luaXRpYXRvclwifX0mbmJzcDs6XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdHt7PlRlbXBsYXRlLmR5bmFtaWMgIHRlbXBsYXRlPVwiYWZTZWxlY3RVc2VyXCIgZGF0YT1hcHBsaWNhbnRDb250ZXh0fX1cclxuXHRcdFx0XHQgIDwvZGl2PlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFwiXCJcIlxyXG5cdFx0cmV0dXJuIHRlbXBsYXRlXHJcblxyXG5cdHRhYmxlOiAoaW5zdGFuY2UpLT5cclxuXHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZShpbnN0YW5jZSlcclxuI1x0dGFibGU6ICcnJ1xyXG4jXHRcdDx0YWJsZSBjbGFzcz1cImJveC1oZWFkZXIgIHdpdGgtYm9yZGVyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtkaXNwbGF5OiBpbmxpbmUtdGFibGU7XCI+XHJcbiNcdFx0XHQ8dHIgY2xhc3M9XCJpbnN0YW5jZS1uYW1lXCI+XHJcbiNcdFx0XHRcdDx0ZCBjbGFzcz1cImluc3RhbmNlLXRhYmxlLW5hbWUtdGRcIj5cclxuI1x0XHRcdFx0XHQ8aDMgY2xhc3M9XCJib3gtdGl0bGVcIj57e2luc3RhbmNlLm5hbWV9fTwvaDM+XHJcbiNcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJoZWxwLWJsb2NrXCI+PC9zcGFuPlxyXG4jXHRcdFx0XHQ8L3RkPlxyXG4jXHRcdFx0PC90cj5cclxuIyAgICAgICAgICAgIDx0ciBjbGFzcz1cImFwcGxpY2FudC13cmFwcGVyXCI+XHJcbiNcdFx0XHRcdDx0ZCBjbGFzcz1cImluc3RhbmNlLXRhYmxlLXdyYXBwZXItdGRcIj5cclxuI1x0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tfdCBcImluc3RhbmNlX2luaXRpYXRvclwifX0mbmJzcDs6PC9sYWJlbD5cclxuI1x0XHRcdFx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cImFmU2VsZWN0VXNlclwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XHJcbiNcdFx0XHRcdDwvdGQ+XHJcbiNcdFx0XHQ8L3RyPlxyXG4jICAgICAgICA8L3RhYmxlPlxyXG4jXHRcdDx0YWJsZSBjbGFzcz1cImZvcm0tdGFibGVcIj5cclxuI1x0XHQgICAge3sjZWFjaCB0YWJsZV9maWVsZHN9fVxyXG4jXHRcdFx0XHR7eyNpZiBpc09waW5pb25GaWVsZCB0aGlzfX1cclxuI1x0XHRcdFx0XHR7e3t0cl9zdGFydH19fVxyXG4jXHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtdGl0bGUge3sjaWYgaXNfcmVxdWlyZWR9fWlzLXJlcXVpcmVke3svaWZ9fVwiPlxyXG4jXHRcdFx0XHRcdFx0XHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT10aGlzLmNvZGV9fVxyXG4jXHRcdFx0XHRcdFx0PC90ZD5cclxuI1x0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLWZpZWxkIG9waW5pb24tZmllbGRcIiBjb2xzcGFuID0gJ3t7dGRfY29sc3Bhbn19Jz5cclxuI1x0XHRcdFx0XHRcdFx0e3s+IGluc3RhbmNlU2lnblRleHQgc3RlcD0oZ2V0T3BpbmlvbkZpZWxkU3RlcE5hbWUgdGhpcykgZGVmYXVsdD0nJ319XHJcbiNcdFx0XHRcdFx0XHQ8L3RkPlxyXG4jXHRcdFx0XHRcdHt7e3RyX2VuZH19fVxyXG4jXHRcdFx0XHR7e2Vsc2V9fVxyXG4jXHRcdFx0XHRcdHt7I2lmIGluY2x1ZGVzIHRoaXMudHlwZSAnc2VjdGlvbix0YWJsZSd9fVxyXG4jXHRcdFx0XHRcdFx0e3t7dHJfc3RhcnR9fX1cclxuI1x0XHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtY2hpbGRmaWVsZFwiIGNvbHNwYW4gPSAne3t0ZF9jb2xzcGFufX0nPlxyXG4jXHRcdFx0XHRcdFx0XHQgICB7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGUgbGFiZWw9ZmFsc2V9fVxyXG4jXHRcdFx0XHRcdFx0XHQ8L3RkPlxyXG4jXHRcdFx0XHRcdFx0e3t7dHJfZW5kfX19XHJcbiNcdFx0XHRcdFx0e3tlbHNlfX1cclxuI1x0XHRcdFx0XHRcdHt7e3RyX3N0YXJ0fX19XHJcbiNcdFx0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLXRpdGxlIHt7I2lmIGlzX3JlcXVpcmVkfX1pcy1yZXF1aXJlZHt7L2lmfX1cIj5cclxuI1x0XHRcdFx0XHRcdFx0XHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT10aGlzLmNvZGV9fVxyXG4jXHRcdFx0XHRcdFx0XHQ8L3RkPlxyXG4jXHRcdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1maWVsZCB7e3Blcm1pc3Npb259fVwiIGNvbHNwYW4gPSAne3t0ZF9jb2xzcGFufX0nPlxyXG4jXHRcdFx0XHRcdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZSBsYWJlbD1mYWxzZX19XHJcbiNcdFx0XHRcdFx0XHRcdDwvdGQ+XHJcbiNcdFx0XHRcdFx0XHR7e3t0cl9lbmR9fX1cclxuI1x0XHRcdFx0XHR7ey9pZn19XHJcbiNcdFx0XHRcdHt7L2lmfX1cclxuI1xyXG4jXHRcdCAgICB7ey9lYWNofX1cclxuI1x0XHQ8L3RhYmxlPlxyXG4jXHQnJydcclxuXHJcblRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGVIZWxwcyA9XHJcblx0YXBwbGljYW50Q29udGV4dDogLT5cclxuXHRcdHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGRhdGEgPSB7XHJcblx0XHRcdG5hbWU6ICdpbnNfYXBwbGljYW50JyxcclxuXHRcdFx0YXR0czoge1xyXG5cdFx0XHRcdG5hbWU6ICdpbnNfYXBwbGljYW50JyxcclxuXHRcdFx0XHRpZDogJ2luc19hcHBsaWNhbnQnLFxyXG5cdFx0XHRcdGNsYXNzOiAnc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wnLFxyXG5cdFx0XHRcdHN0eWxlOiAncGFkZGluZzo2cHggMTJweDt3aWR0aDoxNDBweDtkaXNwbGF5OmlubGluZSdcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG4jXHRcdGlmIG5vdCBzdGVlZG9zX2luc3RhbmNlIHx8IHN0ZWVkb3NfaW5zdGFuY2Uuc3RhdGUgIT0gXCJkcmFmdFwiXHJcblx0XHRkYXRhLmF0dHMuZGlzYWJsZWQgPSB0cnVlXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcbmluc3RhbmNlSWQ6IC0+XHJcblx0cmV0dXJuICdpbnN0YW5jZWZvcm0nOyNcImluc3RhbmNlX1wiICsgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpO1xyXG5cclxuZm9ybV90eXBlczogLT5cclxuXHRpZiBBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KClcclxuXHRcdHJldHVybiAnZGlzYWJsZWQnO1xyXG5cdGVsc2VcclxuXHRcdHJldHVybiAnbWV0aG9kJztcclxuXHJcbnN0ZWVkb3NfZm9ybTogLT5cclxuXHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xyXG5cdGlmIGZvcm1fdmVyc2lvblxyXG5cdFx0cmV0dXJuIGZvcm1fdmVyc2lvblxyXG5cclxuaW5uZXJzdWJmb3JtQ29udGV4dDogKG9iaiktPlxyXG5cdGRvY192YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XHJcblx0b2JqW1widGFibGVWYWx1ZXNcIl0gPSBpZiBkb2NfdmFsdWVzIHRoZW4gZG9jX3ZhbHVlc1tvYmouY29kZV0gZWxzZSBbXVxyXG5cdG9ialtcImZvcm1JZFwiXSA9IGZvcm1JZDtcclxuXHRyZXR1cm4gb2JqO1xyXG5cclxuaW5zdGFuY2U6IC0+XHJcblx0U2Vzc2lvbi5nZXQoXCJjaGFuZ2VfZGF0ZVwiKVxyXG5cdGlmIChTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIikpXHJcblx0XHRzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRyZXR1cm4gc3RlZWRvc19pbnN0YW5jZTtcclxuXHJcbmVxdWFsczogKGEsIGIpIC0+XHJcblx0cmV0dXJuIChhID09IGIpXHJcblxyXG5pbmNsdWRlczogKGEsIGIpIC0+XHJcblx0cmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcclxuXHJcbmZpZWxkczogLT5cclxuXHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xyXG5cdGlmIGZvcm1fdmVyc2lvblxyXG5cdFx0cmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYShmb3JtX3ZlcnNpb24pKTtcclxuXHJcbmRvY192YWx1ZXM6IC0+XHJcblx0V29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xyXG5cclxuaW5zdGFuY2VfYm94X3N0eWxlOiAtPlxyXG5cdGJveCA9IFNlc3Npb24uZ2V0KFwiYm94XCIpXHJcblx0aWYgYm94ID09IFwiaW5ib3hcIiB8fCBib3ggPT0gXCJkcmFmdFwiXHJcblx0XHRqdWRnZSA9IFNlc3Npb24uZ2V0KFwianVkZ2VcIilcclxuXHRcdGlmIGp1ZGdlXHJcblx0XHRcdGlmIChqdWRnZSA9PSBcImFwcHJvdmVkXCIpXHJcblx0XHRcdFx0cmV0dXJuIFwiYm94LXN1Y2Nlc3NcIlxyXG5cdFx0XHRlbHNlIGlmIChqdWRnZSA9PSBcInJlamVjdGVkXCIpXHJcblx0XHRcdFx0cmV0dXJuIFwiYm94LWRhbmdlclwiXHJcblx0aW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0aWYgaW5zICYmIGlucy5maW5hbF9kZWNpc2lvblxyXG5cdFx0aWYgaW5zLmZpbmFsX2RlY2lzaW9uID09IFwiYXBwcm92ZWRcIlxyXG5cdFx0XHRyZXR1cm4gXCJib3gtc3VjY2Vzc1wiXHJcblx0XHRlbHNlIGlmIChpbnMuZmluYWxfZGVjaXNpb24gPT0gXCJyZWplY3RlZFwiKVxyXG5cdFx0XHRyZXR1cm4gXCJib3gtZGFuZ2VyXCJcclxuXHJcblxyXG5UZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUgPSAoaW5zdGFuY2UsIHRlbXBsYXRlTmFtZSkgLT5cclxuXHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZShpbnN0YW5jZS5mbG93KTtcclxuXHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcclxuXHJcblx0aWYgdGVtcGxhdGVOYW1lXHJcblx0XHRpZiB0ZW1wbGF0ZU5hbWUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSlcclxuXHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLmRlZmF1bHQoaW5zdGFuY2UpXHJcblxyXG5cdGlmIFNlc3Npb24/LmdldChcImluc3RhbmNlUHJpbnRcIilcclxuXHRcdGlmIGZsb3c/LnByaW50X3RlbXBsYXRlXHJcblx0XHRcdHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cIiArIGZsb3cucHJpbnRfdGVtcGxhdGUgKyBcIjwvZGl2PlwiXHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIGZsb3c/Lmluc3RhbmNlX3RlbXBsYXRlXHJcblx0XHRcdFx0cmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5pbnN0YW5jZV90ZW1wbGF0ZSArIFwiPC9kaXY+XCJcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKVxyXG5cdGVsc2VcclxuXHRcdGlmIFN0ZWVkb3MuaXNNb2JpbGUoKVxyXG5cdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS5kZWZhdWx0KGluc3RhbmNlKVxyXG5cclxuXHRcdGlmIGZsb3c/Lmluc3RhbmNlX3RlbXBsYXRlXHJcblx0XHRcdHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cIiArIGZsb3cuaW5zdGFuY2VfdGVtcGxhdGUgKyBcIjwvZGl2PlwiXHJcblxyXG5cdFx0aWYgZm9ybT8uaW5zdGFuY2Vfc3R5bGVcclxuXHRcdFx0aWYgZm9ybS5pbnN0YW5jZV9zdHlsZSA9PSAndGFibGUnXHJcblx0XHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUudGFibGUoaW5zdGFuY2UpXHJcblx0XHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLmRlZmF1bHQoaW5zdGFuY2UpXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLmRlZmF1bHQoaW5zdGFuY2UpXHJcblxyXG4jVGVtcGxhdGVNYW5hZ2VyLmV4cG9ydFRlbXBsYXRlID0gKGZsb3dJZCkgLT5cclxuI1x0dGVtcGxhdGUgPSBUZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUoZmxvd0lkKTtcclxuI1xyXG4jXHRmbG93ID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZsb3coZmxvd0lkKTtcclxuI1xyXG4jXHRpZiBmbG93Py5pbnN0YW5jZV90ZW1wbGF0ZVxyXG4jXHRcdHJldHVybiB0ZW1wbGF0ZTtcclxuI1xyXG4jXHRyZXR1cm4gdGVtcGxhdGU7XHJcblxyXG4iLCJ2YXIgZm9ybUlkOyAgICAgICAgICAgICAgICAgXG5cblRlbXBsYXRlTWFuYWdlciA9IHt9O1xuXG5mb3JtSWQgPSAnaW5zdGFuY2Vmb3JtJztcblxuVGVtcGxhdGVNYW5hZ2VyLmluc3RhbmNlX3RpdGxlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYWdlVGl0bGUsIHBhZ2VUaXRsZVRyQ2xhc3MsIHZhbDtcbiAgcGFnZVRpdGxlID0gXCJ7e2luc3RhbmNlLm5hbWV9fVwiO1xuICBwYWdlVGl0bGVUckNsYXNzID0gXCJpbnN0YW5jZS1uYW1lXCI7XG4gIGlmICh0eXBlb2YgQ29yZUZvcm0gIT09IFwidW5kZWZpbmVkXCIgJiYgQ29yZUZvcm0gIT09IG51bGwgPyBDb3JlRm9ybS5wYWdlVGl0bGVGaWVsZE5hbWUgOiB2b2lkIDApIHtcbiAgICBwYWdlVGl0bGUgPSBcInt7PiBhZkZvcm1Hcm91cCBuYW1lPVxcXCJcIiArIENvcmVGb3JtLnBhZ2VUaXRsZUZpZWxkTmFtZSArIFwiXFxcIiBsYWJlbD1mYWxzZX19XCI7XG4gICAgcGFnZVRpdGxlVHJDbGFzcyA9IFwiXCI7XG4gIH1cbiAgaWYgKHR5cGVvZiBDb3JlRm9ybSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBDb3JlRm9ybSAhPT0gbnVsbCA/IENvcmVGb3JtLnBhZ2VUaXRsZSA6IHZvaWQgMCkge1xuICAgIHBhZ2VUaXRsZSA9IFwiXCIgKyBDb3JlRm9ybS5wYWdlVGl0bGU7XG4gICAgcGFnZVRpdGxlVHJDbGFzcyA9IFwiXCI7XG4gIH1cbiAgdmFsID0ge1xuICAgIHBhZ2VUaXRsZTogcGFnZVRpdGxlLFxuICAgIHBhZ2VUaXRsZVRyQ2xhc3M6IHBhZ2VUaXRsZVRyQ2xhc3NcbiAgfTtcbiAgcmV0dXJuIHZhbDtcbn07XG5cblRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlID0gZnVuY3Rpb24oaW5zdGFuY2UsIF9leHBvcnQpIHtcbiAgdmFyIHRhYmxlX2ZpZWxkcywgdGVtcGxhdGU7XG4gIHRlbXBsYXRlID0gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XFxuXHQ8dGFibGUgY2xhc3M9XFxcInRhYmxlLXBhZ2UtdGl0bGUgZm9ybS10YWJsZSBuby1ib3JkZXIgdGV4dC1hbGlnbi1jZW50ZXJcXFwiIHN0eWxlPVxcXCJ3aWR0aDogMTAwJTtkaXNwbGF5OiBpbmxpbmUtdGFibGU7XFxcIj5cXG5cdFx0PHRyIGNsYXNzPVxcXCJcIiArICh0aGlzLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlVHJDbGFzcykgKyBcIlxcXCI+XFxuXHRcdFx0PHRkIGNsYXNzPVxcXCJpbnN0YW5jZS10YWJsZS1uYW1lLXRkIHBhZ2UtdGl0bGVcXFwiPlxcblx0XHRcdFx0XCIgKyAodGhpcy5pbnN0YW5jZV90aXRsZSgpLnBhZ2VUaXRsZSkgKyBcIlxcblx0XHRcdDwvdGQ+XFxuXHRcdDwvdHI+XFxuXFxuXHQ8L3RhYmxlPlxcblx0PHRhYmxlIGNsYXNzPVxcXCJ0YWJsZS1wYWdlLWJvZHkgZm9ybS10YWJsZVxcXCI+XFxuXHRcdFx0PHRyIHN0eWxlPVxcXCJoZWlnaHQ6MHB4XFxcIj5cXG5cdFx0XHRcdDx0aCBzdHlsZT0nd2lkdGg6IDE2JSc+PC90aD5cXG5cdFx0XHRcdDx0aD48L3RoPlxcblx0XHRcdFx0PHRoIHN0eWxlPSd3aWR0aDogMTYlJz48L3RoPlxcblx0XHRcdFx0PHRoPjwvdGg+XFxuXHRcdFx0PC90cj5cIjtcbiAgdGFibGVfZmllbGRzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50YWJsZV9maWVsZHMoaW5zdGFuY2UpO1xuICB0YWJsZV9maWVsZHMuZm9yRWFjaChmdW5jdGlvbih0YWJsZV9maWVsZCkge1xuICAgIHZhciBmaWVsZF9wZXJtaXNzaW9uLCBwdXJlQ29kZSwgcmVxdWlyZWQsIHRpdGxlX3Blcm1pc3Npb247XG4gICAgcmVxdWlyZWQgPSBcIlwiO1xuICAgIGlmICghKHR5cGVvZiBDb3JlRm9ybSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBDb3JlRm9ybSAhPT0gbnVsbCA/IENvcmVGb3JtLnBhZ2VUaXRsZUZpZWxkTmFtZSA6IHZvaWQgMCkgfHwgKHR5cGVvZiBDb3JlRm9ybSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBDb3JlRm9ybSAhPT0gbnVsbCA/IENvcmVGb3JtLnBhZ2VUaXRsZUZpZWxkTmFtZSA6IHZvaWQgMCkgIT09IHRhYmxlX2ZpZWxkLmNvZGUpIHtcbiAgICAgIGlmICh0YWJsZV9maWVsZC5pc19yZXF1aXJlZCkge1xuICAgICAgICByZXF1aXJlZCA9IFwiaXMtcmVxdWlyZWRcIjtcbiAgICAgIH1cbiAgICAgIGlmIChfZXhwb3J0KSB7XG4gICAgICAgIHJlcXVpcmVkID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIHB1cmVDb2RlID0gU3RlZWRvcy5yZW1vdmVTcGVjaWFsQ2hhcmFjdGVyKHRhYmxlX2ZpZWxkLmNvZGUpO1xuICAgICAgaWYgKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGQodGFibGVfZmllbGQpKSB7XG4gICAgICAgIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0O1xuICAgICAgICB0ZW1wbGF0ZSArPSBcIjx0ZCBjbGFzcz1cXFwidGQtdGl0bGUgXCIgKyByZXF1aXJlZCArIFwiXFxcIj5cXG5cdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPVxcXCJcIiArIHRhYmxlX2ZpZWxkLmNvZGUgKyBcIlxcXCJ9fVxcbjwvdGQ+XFxuPHRkIGNsYXNzPVxcXCJ0ZC1maWVsZCBvcGluaW9uLWZpZWxkIG9waW5pb24tZmllbGQtXCIgKyBwdXJlQ29kZSArIFwiIGF1dG9tYXRpY1xcXCIgY29sc3BhbiA9IFxcXCJcIiArIHRhYmxlX2ZpZWxkLnRkX2NvbHNwYW4gKyBcIlxcXCI+XFxuXHR7ez4gaW5zdGFuY2VTaWduVGV4dCBuYW1lPVxcXCJcIiArIHRhYmxlX2ZpZWxkLmNvZGUgKyBcIlxcXCJ9fVxcbjwvdGQ+XCI7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9lbmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlcyh0YWJsZV9maWVsZC50eXBlLCAnc2VjdGlvbix0YWJsZScpKSB7XG4gICAgICAgICAgdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfc3RhcnQ7XG4gICAgICAgICAgdGVtcGxhdGUgKz0gXCI8dGQgY2xhc3M9XFxcInRkLWNoaWxkZmllbGQgdGQtY2hpbGRmaWVsZC1cIiArIHB1cmVDb2RlICsgXCJcXFwiIGNvbHNwYW4gPSBcXFwiXCIgKyB0YWJsZV9maWVsZC50ZF9jb2xzcGFuICsgXCJcXFwiPlxcbiAgIHt7PiBhZkZvcm1Hcm91cCBuYW1lPVxcXCJcIiArIHRhYmxlX2ZpZWxkLmNvZGUgKyBcIlxcXCIgbGFiZWw9ZmFsc2V9fVxcbjwvdGQ+XCI7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydDtcbiAgICAgICAgICBpZiAoX2V4cG9ydCkge1xuICAgICAgICAgICAgdGl0bGVfcGVybWlzc2lvbiA9IFwiXCI7XG4gICAgICAgICAgICBmaWVsZF9wZXJtaXNzaW9uID0gXCJcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVfcGVybWlzc2lvbiA9IFwidGl0bGUtXCIgKyB0YWJsZV9maWVsZC5wZXJtaXNzaW9uO1xuICAgICAgICAgICAgZmllbGRfcGVybWlzc2lvbiA9IFwiZmllbGQtXCIgKyB0YWJsZV9maWVsZC5wZXJtaXNzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZW1wbGF0ZSArPSBcIjx0ZCBjbGFzcz1cXFwidGQtdGl0bGUgdGQtdGl0bGUtXCIgKyBwdXJlQ29kZSArIFwiIFwiICsgdGl0bGVfcGVybWlzc2lvbiArIFwiIFwiICsgcmVxdWlyZWQgKyBcIlxcXCI+XFxuXHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT1cXFwiXCIgKyB0YWJsZV9maWVsZC5jb2RlICsgXCJcXFwifX1cXG48L3RkPlxcbjx0ZCBjbGFzcz1cXFwidGQtZmllbGQgdGQtZmllbGQtXCIgKyBwdXJlQ29kZSArIFwiIFwiICsgZmllbGRfcGVybWlzc2lvbiArIFwiXFxcIiBjb2xzcGFuID0gXFxcIlwiICsgdGFibGVfZmllbGQudGRfY29sc3BhbiArIFwiXFxcIj5cXG5cdHt7PiBhZkZvcm1Hcm91cCBuYW1lPVxcXCJcIiArIHRhYmxlX2ZpZWxkLmNvZGUgKyBcIlxcXCIgbGFiZWw9ZmFsc2V9fVxcbjwvdGQ+XCI7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHRlbXBsYXRlICs9IFwiXHQ8L3RhYmxlPlxcblxcblx0PHRhYmxlIGNsYXNzPVxcXCJ0YWJsZS1wYWdlLWZvb3RlciBmb3JtLXRhYmxlIG5vLWJvcmRlclxcXCI+XFxuXHRcdDx0ciBjbGFzcz1cXFwiYXBwbGljYW50LXdyYXBwZXJcXFwiPlxcblx0XHRcdDx0ZCBjbGFzcz1cXFwibm93cmFwXFxcIj5cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1sZWZ0Jz5cXG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e190IFxcXCJpbnN0YW5jZV9pbml0aWF0b3JcXFwifX3vvJo8L2xhYmVsPlxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS10YWJsZS13cmFwcGVyLXRkIGlubGluZS1sZWZ0Jz5cXG5cdFx0XHRcdFx0e3s+VGVtcGxhdGUuZHluYW1pYyAgdGVtcGxhdGU9XFxcImFmU2VsZWN0VXNlclxcXCIgZGF0YT1hcHBsaWNhbnRDb250ZXh0fX1cXG5cdFx0XHRcdDwvZGl2Plxcblx0XHRcdDwvdGQ+XFxuXHRcdFx0PHRkIGNsYXNzPVxcXCJub3dyYXBcXFwiPlxcblx0XHRcdFx0PGRpdiBjbGFzcz0ncHVsbC1sZWZ0Jz5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLWxlZnQnPlxcblx0XHRcdFx0XHRcdDxsYWJlbD57e190IFxcXCJpbnN0YW5jZV9zdWJtaXRfZGF0ZVxcXCJ9fe+8mjwvbGFiZWw+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtcmlnaHQnPlxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0e3tmb3JtYXREYXRlIGluc3RhbmNlLnN1Ym1pdF9kYXRlICd7XFxcImZvcm1hdFxcXCI6XFxcIllZWVktTU0tRERcXFwifSd9fVxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdDwvZGl2Plxcblx0XHRcdDwvdGQ+XFxuXHRcdDwvdHI+XFxuXHQ8L3RhYmxlPlxcbjwvZGl2PlwiO1xuICByZXR1cm4gdGVtcGxhdGU7XG59O1xuXG5UZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlID0ge1xuICBcImRlZmF1bHRcIjogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICB2YXIgdGVtcGxhdGU7XG4gICAgdGVtcGxhdGUgPSBcIjxkaXYgY2xhc3M9XFxcIndpdGgtYm9yZGVyIGNvbC1tZC0xMlxcXCI+XFxuXHQ8ZGl2IGNsYXNzPVxcXCJpbnN0YW5jZS1uYW1lXFxcIj5cXG5cdFx0PGgzIGNsYXNzPVxcXCJib3gtdGl0bGVcXFwiPlwiICsgKFRlbXBsYXRlTWFuYWdlci5pbnN0YW5jZV90aXRsZSgpLnBhZ2VUaXRsZSkgKyBcIjwvaDM+XFxuXHRcdDxzcGFuIGNsYXNzPVxcXCJoZWxwLWJsb2NrXFxcIj48L3NwYW4+XFxuXHQ8L2Rpdj5cXG5cdDxzcGFuIGNsYXNzPVxcXCJoZWxwLWJsb2NrXFxcIj48L3NwYW4+XFxuPC9kaXY+XFxue3sjZWFjaCBzdGVlZG9zX2Zvcm0uZmllbGRzfX1cXG5cdHt7I2lmIGlzT3BpbmlvbkZpZWxkIHRoaXN9fVxcblx0XHQ8ZGl2IGNsYXNzPVxcXCJ7eyNpZiB0aGlzLmlzX3dpZGV9fWNvbC1tZC0xMnt7ZWxzZX19Y29sLW1kLTZ7ey9pZn19XFxcIj5cXG5cdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIGF1dG9tYXRpYyBvcGluaW9uLWZpZWxkLXt7dGhpcy5jb2RlfX1cXFwiPlxcblx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2FmRmllbGRMYWJlbFRleHQgbmFtZT10aGlzLmNvZGV9fTwvbGFiZWw+XFxuXFxuXHRcdFx0XHR7ez4gaW5zdGFuY2VTaWduVGV4dCBuYW1lPXRoaXMuY29kZX19XFxuXHRcdFx0PC9kaXY+XFxuXHRcdDwvZGl2Plxcblx0e3tlbHNlfX1cXG5cdFx0e3sjaWYgaW5jbHVkZXMgdGhpcy50eXBlICdzZWN0aW9uLHRhYmxlJ319XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG5cdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZSBsYWJlbD1mYWxzZX19XFxuXHRcdFx0PC9kaXY+XFxuXHRcdHt7ZWxzZX19XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwie3sjaWYgdGhpcy5pc193aWRlfX1jb2wtbWQtMTJ7e2Vsc2V9fWNvbC1tZC02e3svaWZ9fVxcXCI+XFxuXHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlfX1cXG5cdFx0XHQ8L2Rpdj5cXG5cdFx0e3svaWZ9fVxcblx0e3svaWZ9fVxcbnt7L2VhY2h9fVxcbjxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+XFxuXHQ8ZGl2IGNsYXNzPVxcXCJhcHBsaWNhbnQtd3JhcHBlciBmb3JtLWdyb3VwIGZvcm0taG9yaXpvbnRhbFxcXCI+XFxuXHQ8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuXHRcdDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwLWFkZG9uXFxcIj5cXG5cdFx0ICB7e190IFxcXCJpbnN0YW5jZV9pbml0aWF0b3JcXFwifX0mbmJzcDs6XFxuXHRcdDwvZGl2Plxcblx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cXFwiYWZTZWxlY3RVc2VyXFxcIiBkYXRhPWFwcGxpY2FudENvbnRleHR9fVxcblx0ICA8L2Rpdj5cXG5cdDwvZGl2PlxcbjwvZGl2PlwiO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfSxcbiAgdGFibGU6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlKGluc3RhbmNlKTtcbiAgfVxufTtcblxuVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZUhlbHBzID0ge1xuICBhcHBsaWNhbnRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0YSwgc3RlZWRvc19pbnN0YW5jZTtcbiAgICBzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgZGF0YSA9IHtcbiAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgIGF0dHM6IHtcbiAgICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBpZDogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBcImNsYXNzXCI6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCcsXG4gICAgICAgIHN0eWxlOiAncGFkZGluZzo2cHggMTJweDt3aWR0aDoxNDBweDtkaXNwbGF5OmlubGluZSdcbiAgICAgIH1cbiAgICB9O1xuICAgIGRhdGEuYXR0cy5kaXNhYmxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn07XG5cbih7XG4gIGluc3RhbmNlSWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnaW5zdGFuY2Vmb3JtJztcbiAgfSxcbiAgZm9ybV90eXBlczogZnVuY3Rpb24oKSB7XG4gICAgaWYgKEFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKSkge1xuICAgICAgcmV0dXJuICdkaXNhYmxlZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnbWV0aG9kJztcbiAgICB9XG4gIH0sXG4gIHN0ZWVkb3NfZm9ybTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIHJldHVybiBmb3JtX3ZlcnNpb247XG4gICAgfVxuICB9LFxuICBpbm5lcnN1YmZvcm1Db250ZXh0OiBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgZG9jX3ZhbHVlcztcbiAgICBkb2NfdmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xuICAgIG9ialtcInRhYmxlVmFsdWVzXCJdID0gZG9jX3ZhbHVlcyA/IGRvY192YWx1ZXNbb2JqLmNvZGVdIDogW107XG4gICAgb2JqW1wiZm9ybUlkXCJdID0gZm9ybUlkO1xuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gIGluc3RhbmNlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RlZWRvc19pbnN0YW5jZTtcbiAgICBTZXNzaW9uLmdldChcImNoYW5nZV9kYXRlXCIpO1xuICAgIGlmIChTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIikpIHtcbiAgICAgIHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgIHJldHVybiBzdGVlZG9zX2luc3RhbmNlO1xuICAgIH1cbiAgfSxcbiAgZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0sXG4gIGluY2x1ZGVzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcbiAgfSxcbiAgZmllbGRzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYShmb3JtX3ZlcnNpb24pKTtcbiAgICB9XG4gIH0sXG4gIGRvY192YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gIH0sXG4gIGluc3RhbmNlX2JveF9zdHlsZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJveCwgaW5zLCBqdWRnZTtcbiAgICBib3ggPSBTZXNzaW9uLmdldChcImJveFwiKTtcbiAgICBpZiAoYm94ID09PSBcImluYm94XCIgfHwgYm94ID09PSBcImRyYWZ0XCIpIHtcbiAgICAgIGp1ZGdlID0gU2Vzc2lvbi5nZXQoXCJqdWRnZVwiKTtcbiAgICAgIGlmIChqdWRnZSkge1xuICAgICAgICBpZiAoanVkZ2UgPT09IFwiYXBwcm92ZWRcIikge1xuICAgICAgICAgIHJldHVybiBcImJveC1zdWNjZXNzXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoanVkZ2UgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgIHJldHVybiBcImJveC1kYW5nZXJcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBpZiAoaW5zICYmIGlucy5maW5hbF9kZWNpc2lvbikge1xuICAgICAgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICAgIHJldHVybiBcImJveC1zdWNjZXNzXCI7XG4gICAgICB9IGVsc2UgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgIHJldHVybiBcImJveC1kYW5nZXJcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5UZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUgPSBmdW5jdGlvbihpbnN0YW5jZSwgdGVtcGxhdGVOYW1lKSB7XG4gIHZhciBmbG93LCBmb3JtO1xuICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZShpbnN0YW5jZS5mbG93KTtcbiAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XG4gIGlmICh0ZW1wbGF0ZU5hbWUpIHtcbiAgICBpZiAodGVtcGxhdGVOYW1lID09PSAndGFibGUnKSB7XG4gICAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSk7XG4gICAgfVxuICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlW1wiZGVmYXVsdFwiXShpbnN0YW5jZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBTZXNzaW9uICE9PSBcInVuZGVmaW5lZFwiICYmIFNlc3Npb24gIT09IG51bGwgPyBTZXNzaW9uLmdldChcImluc3RhbmNlUHJpbnRcIikgOiB2b2lkIDApIHtcbiAgICBpZiAoZmxvdyAhPSBudWxsID8gZmxvdy5wcmludF90ZW1wbGF0ZSA6IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5wcmludF90ZW1wbGF0ZSArIFwiPC9kaXY+XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmbG93ICE9IG51bGwgPyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlIDogdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cIiArIGZsb3cuaW5zdGFuY2VfdGVtcGxhdGUgKyBcIjwvZGl2PlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUudGFibGUoaW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZVtcImRlZmF1bHRcIl0oaW5zdGFuY2UpO1xuICAgIH1cbiAgICBpZiAoZmxvdyAhPSBudWxsID8gZmxvdy5pbnN0YW5jZV90ZW1wbGF0ZSA6IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5pbnN0YW5jZV90ZW1wbGF0ZSArIFwiPC9kaXY+XCI7XG4gICAgfVxuICAgIGlmIChmb3JtICE9IG51bGwgPyBmb3JtLmluc3RhbmNlX3N0eWxlIDogdm9pZCAwKSB7XG4gICAgICBpZiAoZm9ybS5pbnN0YW5jZV9zdHlsZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZVtcImRlZmF1bHRcIl0oaW5zdGFuY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZVtcImRlZmF1bHRcIl0oaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxufTtcbiIsIlN0ZWVkb3NUYWJsZSA9IHt9O1xyXG5cclxuU3RlZWRvc1RhYmxlLmZvcm1JZCA9IFwiaW5zdGFuY2Vmb3JtXCI7XHJcblxyXG5TdGVlZG9zVGFibGUuY2hlY2tJdGVtID0gZnVuY3Rpb24oZmllbGQsIGl0ZW1faW5kZXgpIHtcclxuICAgIHZhciBmaWVsZE9iaiA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCk7XHJcblxyXG4gICAgdmFyIGZpZWxkVmFsID0gU3RlZWRvc1RhYmxlLmdldEl0ZW1Nb2RhbFZhbHVlKGZpZWxkLCBpdGVtX2luZGV4KTtcclxuXHJcbiAgICB2YXIgc2ZfbmFtZSA9ICcnO1xyXG4gICAgdmFyIHJldiA9IHRydWU7XHJcbiAgICBmaWVsZE9iai5zZmllbGRzLmZvckVhY2goZnVuY3Rpb24oc2YpIHtcclxuICAgICAgICBpZiAoc2YucGVybWlzc2lvbiA9PSAnZWRpdGFibGUnKSB7XHJcbiAgICAgICAgICAgIHNmX25hbWUgPSBmaWVsZE9iai5jb2RlICsgXCIuXCIgKyBzZi5jb2RlO1xyXG4gICAgICAgICAgICBpZiAoIUluc3RhbmNlTWFuYWdlci5jaGVja0Zvcm1GaWVsZFZhbHVlKCQoXCJbbmFtZT0nXCIgKyBzZl9uYW1lICsgXCInXVwiKVswXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJldjtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLnNldFRhYmxlSXRlbVZhbHVlID0gZnVuY3Rpb24oZmllbGQsIGl0ZW1faW5kZXgsIGl0ZW1fdmFsdWUpIHtcclxuXHJcbiAgICB2YXIgdGFibGVWYWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKTtcclxuICAgIHRhYmxlVmFsdWVbaXRlbV9pbmRleF0gPSBpdGVtX3ZhbHVlO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuZ2V0VGFibGVJdGVtVmFsdWUgPSBmdW5jdGlvbihmaWVsZCwgaXRlbV9pbmRleCkge1xyXG4gICAgcmV0dXJuIFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKVtpdGVtX2luZGV4XTtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLnJlbW92ZVRhYmxlSXRlbSA9IGZ1bmN0aW9uKGZpZWxkLCBpdGVtX2luZGV4KSB7XHJcbiAgICB2YXIgaXRlbV92YWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRUYWJsZUl0ZW1WYWx1ZShmaWVsZCwgaXRlbV9pbmRleCk7XHJcbiAgICBpdGVtX3ZhbHVlLnJlbW92ZWQgPSB0cnVlO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuc2V0VGFibGVWYWx1ZSA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSkge1xyXG4gICAgJChcInRhYmxlW25hbWU9J1wiICsgZmllbGQgKyBcIiddXCIpLnZhbCh7XHJcbiAgICAgICAgdmFsOiB2YWx1ZVxyXG4gICAgfSk7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlID0gZnVuY3Rpb24oZmllbGQpIHtcclxuICAgIHJldHVybiAkKFwidGFibGVbbmFtZT0nXCIgKyBmaWVsZCArIFwiJ11cIikudmFsKCkudmFsO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuZ2V0VmFsaWRWYWx1ZSA9IGZ1bmN0aW9uKGZpZWxkKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBTdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZShmaWVsZCk7XHJcblxyXG4gICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIHZhciB2YWxpZFZhbHVlID0gW107XHJcblxyXG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbih2KSB7XHJcbiAgICAgICAgaWYgKCF2LnJlbW92ZWQpIHtcclxuICAgICAgICAgICAgdmFsaWRWYWx1ZS5wdXNoKHYpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHZhbGlkVmFsdWU7XHJcbn1cclxuXHJcblxyXG5TdGVlZG9zVGFibGUuaGFuZGxlRGF0YSA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZXMpIHtcclxuXHJcbiAgICBpZiAoIXZhbHVlcyB8fCAhKHZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGZpZWxkT2JqID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKTtcclxuXHJcbiAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2KSB7XHJcbiAgICAgICAgZmllbGRPYmouc2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICAgICAgaWYgKGYudHlwZSA9PSAndXNlcicgfHwgZi50eXBlID09ICdncm91cCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZbZi5jb2RlXVxyXG4gICAgICAgICAgICAgICAgaWYgKGYuaXNfbXVsdGlzZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMCAmJiB0eXBlb2YodmFsdWVbMF0pID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZbZi5jb2RlXSA9IHZbZi5jb2RlXS5nZXRQcm9wZXJ0eShcImlkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZih2YWx1ZSkgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdltmLmNvZGVdID0gdltmLmNvZGVdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmLnR5cGUgPT0gJ2RhdGVUaW1lJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdltmLmNvZGVdXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdmFsdWUuc3BsaXQoXCJUXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDAgPSB0WzBdLnNwbGl0KFwiLVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQxID0gdFsxXS5zcGxpdChcIjpcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gdDBbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdDBbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSB0MFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSB0MVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHQxWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF0ZSwgaG91cnMsIHNlY29uZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2W2YuY29kZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRGaWVsZCA9IGZ1bmN0aW9uKGZpZWxkKSB7XHJcbiAgICB2YXIgaW5zdGFuY2VGaWVsZHMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGaWVsZHMoKTtcclxuICAgIGlmICghaW5zdGFuY2VGaWVsZHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHZhciBmaWVsZE9iaiA9IGluc3RhbmNlRmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGZpZWxkKTtcclxuXHJcbiAgICByZXR1cm4gZmllbGRPYmo7XHJcbn1cclxuXHJcblxyXG5TdGVlZG9zVGFibGUuZ2V0TW9kYWxEYXRhID0gZnVuY3Rpb24oZmllbGQsIGluZGV4KSB7XHJcblxyXG4gICAgdmFyIGRhdGEgPSB7fTtcclxuXHJcbiAgICB2YXIgZmllbGRPYmogPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpO1xyXG5cclxuICAgIGlmICghZmllbGRPYmopIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZGF0YS5maWVsZCA9IGZpZWxkT2JqO1xyXG5cclxuICAgIGRhdGEuZmllbGQuZm9ybXVsYSA9IEZvcm1fZm9ybXVsYS5nZXRGb3JtdWxhRmllbGRWYXJpYWJsZShcIkZvcm1fZm9ybXVsYS5maWVsZF92YWx1ZXNcIiwgZmllbGRPYmouc2ZpZWxkcyk7XHJcblxyXG4gICAgZGF0YS52YWx1ZSA9IHt9O1xyXG5cclxuICAgIGRhdGEudmFsdWVbZmllbGRdID0gU3RlZWRvc1RhYmxlLmdldFRhYmxlSXRlbVZhbHVlKGZpZWxkLCBpbmRleCk7XHJcblxyXG4gICAgZGF0YS5pbmRleCA9IGluZGV4O1xyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG59XHJcblxyXG5cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRJdGVtTW9kYWxWYWx1ZSA9IGZ1bmN0aW9uKGZpZWxkLCBpdGVtX2luZGV4KSB7XHJcblxyXG4gICAgaWYgKCFBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwic3RlZWRvc190YWJsZV9tb2RhbF9cIiArIGZpZWxkICsgXCJfXCIgKyBpdGVtX2luZGV4KSkge1xyXG4gICAgICAgIHJldHVybiB7fVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBpdGVtX3ZhbHVlID0gQXV0b0Zvcm0uZ2V0Rm9ybVZhbHVlcyhcInN0ZWVkb3NfdGFibGVfbW9kYWxfXCIgKyBmaWVsZCArIFwiX1wiICsgaXRlbV9pbmRleCkuaW5zZXJ0RG9jW2ZpZWxkXTtcclxuICAgIHJldHVybiBpdGVtX3ZhbHVlO1xyXG59XHJcblxyXG5cclxuU3RlZWRvc1RhYmxlLmFkZEl0ZW0gPSBmdW5jdGlvbihmaWVsZCwgaW5kZXgsIF9pdGVtX3ZhbHVlKSB7XHJcbiAgICB2YXIga2V5cyA9IFN0ZWVkb3NUYWJsZS5nZXRLZXlzKGZpZWxkKTtcclxuICAgIHZhciBpdGVtX3ZhbHVlID0gX2l0ZW1fdmFsdWUgfHwgU3RlZWRvc1RhYmxlLmdldEl0ZW1Nb2RhbFZhbHVlKGZpZWxkLCBpbmRleCk7XHJcbiAgICAkKFwidGJvZHlbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGJvZHknXVwiKS5hcHBlbmQoU3RlZWRvc1RhYmxlLmdldFRyKGtleXMsIGl0ZW1fdmFsdWUsIGluZGV4LCBmaWVsZCwgdHJ1ZSkpXHJcblxyXG59XHJcblxyXG5TdGVlZG9zVGFibGUudXBkYXRlSXRlbSA9IGZ1bmN0aW9uKGZpZWxkLCBpbmRleCwgX2l0ZW1fdmFsdWUpIHtcclxuXHJcbiAgICB2YXIgaXRlbSA9ICQoXCJ0cltuYW1lPSdcIiArIGZpZWxkICsgXCJfaXRlbV9cIiArIGluZGV4ICsgXCInXVwiKTtcclxuXHJcbiAgICB2YXIgaXRlbV92YWx1ZSA9IF9pdGVtX3ZhbHVlIHx8IFN0ZWVkb3NUYWJsZS5nZXRJdGVtTW9kYWxWYWx1ZShmaWVsZCwgaW5kZXgpO1xyXG5cclxuICAgIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBrZXlzID0gU3RlZWRvc1RhYmxlLmdldEtleXMoZmllbGQpO1xyXG4gICAgICAgIHZhciB0ZHMgPSBTdGVlZG9zVGFibGUuZ2V0UmVtb3ZlVGQoZmllbGQsIGluZGV4KTtcclxuXHJcbiAgICAgICAgdmFyIHNmaWVsZHMgPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpLnNmaWVsZHM7XHJcblxyXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICAgICAgdmFyIHNmaWVsZCA9IHNmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwga2V5KTtcclxuXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1fdmFsdWVba2V5XTtcclxuXHJcbiAgICAgICAgICAgIHRkcyA9IHRkcyArIFN0ZWVkb3NUYWJsZS5nZXRUZChzZmllbGQsIGluZGV4LCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdGVtLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGl0ZW0uYXBwZW5kKHRkcyk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgU3RlZWRvc1RhYmxlLmFkZEl0ZW0oZmllbGQsIGluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUoZmllbGQpKSB7XHJcblxyXG4gICAgICAgIFN0ZWVkb3NUYWJsZS5zZXRUYWJsZUl0ZW1WYWx1ZShmaWVsZCwgaW5kZXgsIGl0ZW1fdmFsdWUpO1xyXG5cclxuICAgICAgICAvL1N0ZWVkb3NUYWJsZS52YWx1ZUhhc2hbZmllbGRdW2luZGV4XSA9IGl0ZW1fdmFsdWU7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvL1N0ZWVkb3NUYWJsZS52YWx1ZUhhc2hbZmllbGRdID0gW2l0ZW1fdmFsdWVdO1xyXG5cclxuICAgICAgICBTdGVlZG9zVGFibGUuc2V0VGFibGVWYWx1ZShmaWVsZCwgW2l0ZW1fdmFsdWVdKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvL+aJp+ihjOS4u+ihqOWFrOW8j+iuoeeul1xyXG4gICAgSW5zdGFuY2VNYW5hZ2VyLnJ1bkZvcm11bGEoZmllbGQpO1xyXG5cclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihmaWVsZCwgaW5kZXgpIHtcclxuXHJcbiAgICAkKFwidHJbbmFtZT0nXCIgKyBmaWVsZCArIFwiX2l0ZW1fXCIgKyBpbmRleCArIFwiJ11cIikuaGlkZSgpO1xyXG5cclxuICAgIFN0ZWVkb3NUYWJsZS5yZW1vdmVUYWJsZUl0ZW0oZmllbGQsIGluZGV4KTtcclxuXHJcbiAgICBJbnN0YW5jZU1hbmFnZXIucnVuRm9ybXVsYShmaWVsZCk7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5zaG93TW9kYWwgPSBmdW5jdGlvbihmaWVsZCwgaW5kZXgsIG1ldGhvZCkge1xyXG5cclxuXHJcbiAgICB2YXIgbW9kYWxEYXRhID0gU3RlZWRvc1RhYmxlLmdldE1vZGFsRGF0YShmaWVsZCwgaW5kZXgpO1xyXG5cclxuICAgIG1vZGFsRGF0YS5tZXRob2QgPSBtZXRob2Q7XHJcblxyXG4gICAgTW9kYWwuc2hvdyhcInN0ZWVkb3NUYWJsZU1vZGFsXCIsIG1vZGFsRGF0YSk7XHJcblxyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuZ2V0S2V5cyA9IGZ1bmN0aW9uKGZpZWxkKSB7XHJcbiAgICBpZiAoIUF1dG9Gb3JtLmdldEN1cnJlbnREYXRhRm9yRm9ybShTdGVlZG9zVGFibGUuZm9ybUlkKSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3MgPSBBdXRvRm9ybS5nZXRGb3JtU2NoZW1hKFN0ZWVkb3NUYWJsZS5mb3JtSWQpO1xyXG5cclxuICAgIHZhciBrZXlzID0gW107XHJcblxyXG4gICAgaWYgKHNzLnNjaGVtYShmaWVsZCArIFwiLiRcIikudHlwZSA9PT0gT2JqZWN0KSB7XHJcbiAgICAgICAga2V5cyA9IHNzLm9iamVjdEtleXMoU2ltcGxlU2NoZW1hLl9tYWtlR2VuZXJpYyhmaWVsZCkgKyAnLiQnKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXlzO1xyXG5cclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFRoZWFkID0gZnVuY3Rpb24oZmllbGQsIGVkaXRhYmxlKSB7XHJcblxyXG4gICAgdmFyIGZpZWxkT2JqID0gZmllbGQ7XHJcbiAgICBpZiAoIV8uaXNPYmplY3QoZmllbGQpKVxyXG4gICAgICAgIGZpZWxkT2JqID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKTtcclxuXHJcbiAgICBpZiAoIWZpZWxkT2JqKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB0aGVhZCA9ICcnLFxyXG4gICAgICAgIHRycyA9ICcnLFxyXG4gICAgICAgIGxhYmVsID0gJycsXHJcbiAgICAgICAgd2lkdGggPSAxMDA7XHJcblxyXG4gICAgaWYgKGVkaXRhYmxlKSB7XHJcbiAgICAgICAgLy8gdHJzID0gXCI8dGggY2xhc3M9J3JlbW92ZWQnPjwvdGg+XCJcclxuXHRcdHRycyA9IFwiXCJcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2ZpZWxkcyA9IGZpZWxkT2JqLnNmaWVsZHM7XHJcblxyXG4gICAgaWYoIXNmaWVsZHMpe1xyXG4gICAgXHRyZXR1cm4gdGhlYWQ7XHJcblx0fVxyXG5cclxuICAgIHZhciBzZl9sZW5ndGggPSBzZmllbGRzLmxlbmd0aDtcclxuXHJcbiAgICBpZiAoc2ZfbGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciB3aWRlX2ZpZWxkcyA9IHNmaWVsZHMuZmlsdGVyUHJvcGVydHkoXCJpc193aWRlXCIsIHRydWUpO1xyXG5cclxuICAgICAgICB3aWR0aCA9IDEwMCAvIChzZl9sZW5ndGggKyB3aWRlX2ZpZWxkcy5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihzZiwgaW5kZXgpIHtcclxuXHJcbiAgICAgICAgbGFiZWwgPSAoc2YubmFtZSAhPSBudWxsICYmIHNmLm5hbWUubGVuZ3RoID4gMCkgPyBzZi5uYW1lIDogc2YuY29kZTtcclxuXHJcbiAgICAgICAgdHJzID0gdHJzICsgXCI8dGQgXCI7IC8vIG5vd3JhcD0nbm93cmFwJ1xyXG5cclxuICAgICAgICB0cnMgPSB0cnMgKyBcIiBjbGFzcz0ndGl0bGUgXCIgKyBzZi50eXBlICsgXCInXCI7XHJcblxyXG4gICAgICAgIGlmIChpbmRleCAhPSAoc2ZfbGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICAgICAgaWYgKHNmLmlzX3dpZGUpIHtcclxuICAgICAgICAgICAgICAgIHRycyA9IHRycyArIFwic3R5bGU9J3dpZHRoOlwiICsgd2lkdGggKiAyICsgXCIlJ1wiXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0cnMgPSB0cnMgKyBcInN0eWxlPSd3aWR0aDpcIiArIHdpZHRoICsgXCIlJ1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRycyA9IHRycyArIFwiPlwiICsgbGFiZWwgKyBcIjwvdGQ+XCJcclxuICAgIH0pO1xyXG5cclxuICAgIHRoZWFkID0gJzx0cj4nICsgdHJzICsgJzwvdHI+JztcclxuXHJcbiAgICByZXR1cm4gdGhlYWQ7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUYm9keSA9IGZ1bmN0aW9uKGtleXMsIGZpZWxkLCB2YWx1ZXMsIGVkaXRhYmxlKSB7XHJcbiAgICB2YXIgdGJvZHkgPSBcIlwiO1xyXG5cclxuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgICB0Ym9keSA9IHRib2R5ICsgU3RlZWRvc1RhYmxlLmdldFRyKGtleXMsIHZhbHVlLCBpbmRleCwgZmllbGQsIGVkaXRhYmxlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGJvZHk7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUciA9IGZ1bmN0aW9uKGtleXMsIGl0ZW1fdmFsdWUsIGluZGV4LCBmaWVsZCwgZWRpdGFibGUpIHtcclxuXHJcbiAgICB2YXIgZmllbGRPYmogPSBmaWVsZDtcclxuICAgIGlmICghXy5pc09iamVjdChmaWVsZCkpXHJcbiAgICAgICAgZmllbGRPYmogPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpO1xyXG5cclxuICAgIHZhciB0ciA9IFwiPHRyIGlkPSdcIiArIGZpZWxkT2JqLmNvZGUgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIicgbmFtZT0nXCIgKyBmaWVsZE9iai5jb2RlICsgXCJfaXRlbV9cIiArIGluZGV4ICsgXCInIGRhdGEtaW5kZXg9J1wiICsgaW5kZXggKyBcIidcIlxyXG5cclxuICAgIGlmIChlZGl0YWJsZSkge1xyXG4gICAgICAgIHRyID0gdHIgKyBcIicgY2xhc3M9J2l0ZW0gZWRpdCdcIlxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZihTdGVlZG9zLmlzTW9iaWxlKCkpe1xyXG5cdFx0XHR0ciA9IHRyICsgXCIgY2xhc3M9J2l0ZW0gaXRlbS1yZWFkb25seSdcIlxyXG4gICAgICAgIH1lbHNle1xyXG5cdFx0XHR0ciA9IHRyICsgXCIgY2xhc3M9J2l0ZW0gJ1wiXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpdGVtX3ZhbHVlLnJlbW92ZWQpIHtcclxuICAgICAgICB0ciA9IHRyICsgXCIgc3R5bGU9J2Rpc3BsYXk6bm9uZScgXCI7XHJcbiAgICB9XHJcblxyXG4gICAgdHIgPSB0ciArIFwiJz5cIjtcclxuXHJcbiAgICB2YXIgdGRzID0gXCJcIjtcclxuXHJcbiAgICBpZiAoZWRpdGFibGUpIHtcclxuICAgICAgICB0ZHMgPSBTdGVlZG9zVGFibGUuZ2V0UmVtb3ZlVGQoZmllbGRPYmouY29kZSwgaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZmllbGRzID0gZmllbGRPYmouc2ZpZWxkcztcclxuXHJcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgdmFyIHNmaWVsZCA9IHNmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwga2V5KTtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbV92YWx1ZVtrZXldO1xyXG5cclxuICAgICAgICB0ZHMgPSB0ZHMgKyBTdGVlZG9zVGFibGUuZ2V0VGQoc2ZpZWxkLCBpbmRleCwgdmFsdWUpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIHRyID0gdHIgKyB0ZHMgKyBcIjwvdHI+XCI7XHJcbiAgICByZXR1cm4gdHI7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZCA9IGZ1bmN0aW9uKGZpZWxkLCBpbmRleCkge1xyXG4gICAgLy8gcmV0dXJuIFwiPHRkIGNsYXNzPSdzdGVlZG9zVGFibGUtaXRlbS1yZW1vdmUgcmVtb3ZlZCcgZGF0YS1pbmRleD0nXCIgKyBpbmRleCArIFwiJz48aSBjbGFzcz0nZmEgZmEtdGltZXMnIGFyaWEtaGlkZGVuPSd0cnVlJz48L3RkPlwiO1xyXG5cdHJldHVybiBcIlwiXHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUZCA9IGZ1bmN0aW9uKGZpZWxkLCBpbmRleCwgdmFsdWUpIHtcclxuICAgIHZhciB0ZCA9IFwiPHRkIFwiO1xyXG5cclxuICAgIHRkID0gdGQgKyBcIiBjbGFzcz0nc3RlZWRvc1RhYmxlLWl0ZW0tZmllbGQgXCIgKyBmaWVsZC50eXBlICsgXCInIFwiO1xyXG5cclxuICAgIHZhciB0ZF92YWx1ZSA9IFwiXCI7XHJcblxyXG4gICAgaWYoTWV0ZW9yLmlzQ2xpZW50KXtcclxuICAgICAgICB0ZF92YWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRURFZhbHVlKGZpZWxkLCB2YWx1ZSlcclxuICAgIH1lbHNle1xyXG4gICAgICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHJcbiAgICAgICAgdXRjT2Zmc2V0ID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnV0Y09mZnNldFxyXG5cclxuICAgICAgICB0ZF92YWx1ZSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSh2YWx1ZSwgZmllbGQsIGxvY2FsZSwgdXRjT2Zmc2V0KVxyXG4gICAgfVxyXG5cclxuICAgIHRkID0gdGQgKyBcIiBkYXRhLWluZGV4PSdcIiArIGluZGV4ICsgXCInPlwiICsgdGRfdmFsdWUgKyBcIjwvdGQ+XCJcclxuXHJcbiAgICByZXR1cm4gdGQ7XHJcbn1cclxuXHJcblxyXG5TdGVlZG9zVGFibGUuZ2V0VERWYWx1ZSA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSkge1xyXG4gICAgdmFyIHRkX3ZhbHVlID0gXCJcIjtcclxuICAgIGlmICghZmllbGQpIHtcclxuICAgICAgICByZXR1cm4gdGRfdmFsdWVcclxuICAgIH1cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICd1c2VyJzpcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mKHZhbHVlWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhU3BhY2VVc2Vycyh2YWx1ZSkuZ2V0UHJvcGVydHkoXCJuYW1lXCIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUuZ2V0UHJvcGVydHkoXCJuYW1lXCIpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IENGRGF0YU1hbmFnZXIuZ2V0Rm9ybXVsYVNwYWNlVXNlcnModmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB1ID8gdS5uYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHZhbHVlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZ3JvdXAnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmlzX211bHRpc2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YodmFsdWVbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBDRkRhdGFNYW5hZ2VyLmdldEZvcm11bGFPcmdhbml6YXRpb25zKHZhbHVlKS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhT3JnYW5pemF0aW9uKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gbyA/IG8ubmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X3llc1wiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdlbWFpbCc6XHJcbiAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHZhbHVlID8gXCI8YSBocmVmPSdtYWlsdG86XCIgKyB2YWx1ZSArIFwiJz5cIiArIHZhbHVlICsgXCI8L2E+XCIgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3VybCc6XHJcbiAgICAgICAgICAgICAgICBpZih2YWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUuaW5kZXhPZihcImh0dHBcIikgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFwiPGEgaHJlZj0nXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCI8YSBocmVmPScnIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCI8YSBocmVmPSdodHRwOi8vXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5odHRwOi8vXCIgKyB2YWx1ZSArIFwiPC9hPlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdwYXNzd29yZCc6XHJcbiAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9ICcqKioqKionO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHZhbHVlLnNwbGl0KFwiLVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IHRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IHRbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9ICQuZm9ybWF0LmRhdGUodmFsdWUsICd5eXl5LU1NLWRkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZGF0ZVRpbWUnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHZhbHVlLnNwbGl0KFwiVFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQwID0gdFswXS5zcGxpdChcIi1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0MSA9IHRbMV0uc3BsaXQoXCI6XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IHQwWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9IHQwWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gdDBbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzID0gdDFbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSB0MVsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9ICQuZm9ybWF0LmRhdGUodmFsdWUsICd5eXl5LU1NLWRkIEhIOm1tJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHZhbHVlLnRvRml4ZWQoZmllbGQuZGlnaXRzKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFN0ZWVkb3MubnVtYmVyVG9TdHJpbmcodGRfdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ29kYXRhJzpcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlKXtcclxuXHRcdFx0XHRcdHRkX3ZhbHVlID0gdmFsdWVbJ0BsYWJlbCddXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUgPyB2YWx1ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGU7XHJcblxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB0ZF92YWx1ZTtcclxufTtcclxuXHJcbmlmKE1ldGVvci5pc0NsaWVudCl7XHJcbiAgICBBdXRvRm9ybS5hZGRJbnB1dFR5cGUoXCJ0YWJsZVwiLCB7XHJcbiAgICAgICAgdGVtcGxhdGU6IFwiYWZUYWJsZVwiLFxyXG4gICAgICAgIHZhbHVlT3V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmRhdGEoXCJzY2hlbWFLZXlcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VmFsaWRWYWx1ZShuYW1lKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbHVlQ29udmVydGVyczoge1xyXG4gICAgICAgICAgICBcInN0cmluZ0FycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb1N0cmluZ0FycmF5LFxyXG4gICAgICAgICAgICBcIm51bWJlclwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9OdW1iZXIsXHJcbiAgICAgICAgICAgIFwibnVtZXJBcnJheVwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9OdW1iZXJBcnJheSxcclxuICAgICAgICAgICAgXCJib29sZWFuXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0Jvb2xlYW4sXHJcbiAgICAgICAgICAgIFwiYm9vbGVhbkFycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0Jvb2xlYW5BcnJheSxcclxuICAgICAgICAgICAgXCJkYXRlXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0RhdGUsXHJcbiAgICAgICAgICAgIFwiZGF0ZUFycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0RhdGVBcnJheVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udGV4dEFkanVzdDogZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQuYXR0cy5tYXhsZW5ndGggPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb250ZXh0Lm1heCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYXR0cy5tYXhsZW5ndGggPSBjb250ZXh0Lm1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBUZW1wbGF0ZS5hZlRhYmxlLmV2ZW50cyh7XHJcbiAgICAgICAgJ3RhcCAuc3RlZWRvcy10YWJsZSAuc3RlZWRvc1RhYmxlLWl0ZW0tYWRkLC5hZGQtaXRlbS10cic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRlbXBsYXRlLmRhdGEubmFtZTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0YWJsZVZhbHVlID0gU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUobmFtZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV3X2l0ZW1faW5kZXggPSB0YWJsZVZhbHVlID8gdGFibGVWYWx1ZS5sZW5ndGggOiAwO1xyXG5cclxuICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnNob3dNb2RhbChuYW1lLCBuZXdfaXRlbV9pbmRleCwgXCJhZGRcIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3RhcCAuc3RlZWRvcy10YWJsZSAuc3RlZWRvc1RhYmxlLWl0ZW0tZmllbGQnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmRhdGEuYXR0cy5lZGl0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gdGVtcGxhdGUuZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG4gICAgICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnNob3dNb2RhbChmaWVsZCwgaW5kZXgsIFwiZWRpdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICd0YXAgLnN0ZWVkb3MtdGFibGUgLnN0ZWVkb3NUYWJsZS1pdGVtLXJlbW92ZSc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgZmllbGQgPSB0ZW1wbGF0ZS5kYXRhLm5hbWU7XHJcbiAgICAgICAgICAgIHZhciBpdGVtX2luZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG4gICAgICAgICAgICBTZXNzaW9uLnNldChcImluc3RhbmNlX2NoYW5nZVwiLCB0cnVlKTtcclxuICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnJlbW92ZUl0ZW0oZmllbGQsIGl0ZW1faW5kZXgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICd0YXAgLnN0ZWVkb3MtdGFibGUgLml0ZW0tcmVhZG9ubHknOiBmdW5jdGlvbiAoZXZlbnQsIHRlbXBsYXRlKSB7XHJcblx0XHRcdGlmICghdGVtcGxhdGUuZGF0YS5hdHRzLmVkaXRhYmxlKSB7XHJcblx0XHRcdFx0dmFyIGZpZWxkID0gdGVtcGxhdGUuZGF0YS5uYW1lO1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleDtcclxuXHRcdFx0XHRTdGVlZG9zVGFibGUuc2hvd01vZGFsKGZpZWxkLCBpbmRleCwgXCJyZWFkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIFRlbXBsYXRlLmFmVGFibGUucmVuZGVyZWQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5kYXRhLm5hbWU7XHJcblxyXG4gICAgICAgIHZhciBrZXlzID0gU3RlZWRvc1RhYmxlLmdldEtleXMoZmllbGQpO1xyXG4gICAgICAgIHZhciB2YWxpZFZhbHVlID0gU3RlZWRvc1RhYmxlLmhhbmRsZURhdGEoZmllbGQsIHRoaXMuZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgU3RlZWRvc1RhYmxlLnNldFRhYmxlVmFsdWUoZmllbGQsIHZhbGlkVmFsdWUpO1xyXG5cclxuICAgICAgICAkKFwidGhlYWRbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGhlYWQnXVwiKS5odG1sKFN0ZWVkb3NUYWJsZS5nZXRUaGVhZChmaWVsZCwgdGhpcy5kYXRhLmF0dHMuZWRpdGFibGUpKTtcclxuXHJcbiAgICAgICAgJChcInRib2R5W25hbWU9J1wiICsgZmllbGQgKyBcIlRib2R5J11cIikuaHRtbChTdGVlZG9zVGFibGUuZ2V0VGJvZHkoa2V5cywgZmllbGQsIFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKSwgdGhpcy5kYXRhLmF0dHMuZWRpdGFibGUpKTtcclxuICAgICAgICBcclxuICAgICAgICBzdHIgPSB0KFwic3RlZWRvc190YWJsZV9hZGRfaXRlbVwiKTtcclxuICAgICAgICBhZGRJdGVtVHIgPSBcIjx0ciBjbGFzcz0nYWRkLWl0ZW0tdHInPjx0ZCBjb2xzcGFuPSdcIitrZXlzLmxlbmd0aCtcIic+PGkgY2xhc3M9J2lvbiBpb24tcGx1cy1yb3VuZCc+PC9pPlwiK3N0citcIjwvdGQ+PC90cj5cIjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5hdHRzLmVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgJChcInRmb290W25hbWU9J1wiICsgZmllbGQgKyBcIlRmb290J11cIikuYXBwZW5kKGFkZEl0ZW1Ucik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSIsIkltYWdlU2lnbi5oZWxwZXJzID1cclxuXHRzcGFjZVVzZXJTaWduOiAodXNlcklkKS0+XHJcblx0XHRzcGFjZSA9IFwiXCJcclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0c3BhY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuc3BhY2VcclxuXHRcdGVsc2VcclxuXHRcdFx0c3BhY2UgPSBTZXNzaW9uLmdldChcInNwYWNlSWRcIilcclxuXHJcblx0XHRzcGFjZVVzZXJTaWduID0gZGIuc3BhY2VfdXNlcl9zaWducy5maW5kT25lKHtzcGFjZTogc3BhY2UsIHVzZXI6IHVzZXJJZH0pO1xyXG5cdFx0cmV0dXJuIHNwYWNlVXNlclNpZ25cclxuXHJcblx0aW1hZ2VVUkw6ICh1c2VySWQpLT5cclxuXHJcblx0XHRzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbih1c2VySWQpO1xyXG5cclxuXHRcdGFic29sdXRlID0gZmFsc2VcclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0YWJzb2x1dGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuYWJzb2x1dGVcclxuXHJcblx0XHRpZiBzcGFjZVVzZXJTaWduPy5zaWduXHJcblx0XHRcdGlmIGFic29sdXRlXHJcblx0XHRcdFx0cmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9hdmF0YXJzL1wiICsgc3BhY2VVc2VyU2lnbi5zaWduKTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xyXG4iLCJJbWFnZVNpZ24uaGVscGVycyA9IHtcbiAgc3BhY2VVc2VyU2lnbjogZnVuY3Rpb24odXNlcklkKSB7XG4gICAgdmFyIHNwYWNlLCBzcGFjZVVzZXJTaWduO1xuICAgIHNwYWNlID0gXCJcIjtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBzcGFjZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5zcGFjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BhY2UgPSBTZXNzaW9uLmdldChcInNwYWNlSWRcIik7XG4gICAgfVxuICAgIHNwYWNlVXNlclNpZ24gPSBkYi5zcGFjZV91c2VyX3NpZ25zLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IHNwYWNlLFxuICAgICAgdXNlcjogdXNlcklkXG4gICAgfSk7XG4gICAgcmV0dXJuIHNwYWNlVXNlclNpZ247XG4gIH0sXG4gIGltYWdlVVJMOiBmdW5jdGlvbih1c2VySWQpIHtcbiAgICB2YXIgYWJzb2x1dGUsIHNwYWNlVXNlclNpZ247XG4gICAgc3BhY2VVc2VyU2lnbiA9IEltYWdlU2lnbi5oZWxwZXJzLnNwYWNlVXNlclNpZ24odXNlcklkKTtcbiAgICBhYnNvbHV0ZSA9IGZhbHNlO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGFic29sdXRlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmFic29sdXRlO1xuICAgIH1cbiAgICBpZiAoc3BhY2VVc2VyU2lnbiAhPSBudWxsID8gc3BhY2VVc2VyU2lnbi5zaWduIDogdm9pZCAwKSB7XG4gICAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgICAgcmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9hdmF0YXJzL1wiICsgc3BhY2VVc2VyU2lnbi5zaWduKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIkluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMgPVxyXG5cdGFwcGxpY2FudENvbnRleHQ6IC0+XHJcblx0XHRzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRkYXRhID0ge1xyXG5cdFx0XHRuYW1lOiAnaW5zX2FwcGxpY2FudCcsXHJcblx0XHRcdGF0dHM6IHtuYW1lOiAnaW5zX2FwcGxpY2FudCcsIGlkOiAnaW5zX2FwcGxpY2FudCcsIGNsYXNzOiAnc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wgaW5zX2FwcGxpY2FudCd9LFxyXG5cdFx0XHR2YWx1ZTogc3RlZWRvc19pbnN0YW5jZS5hcHBsaWNhbnRfbmFtZVxyXG5cdFx0fVxyXG5cdFx0aWYgbm90IHN0ZWVkb3NfaW5zdGFuY2UgfHwgc3RlZWRvc19pbnN0YW5jZS5zdGF0ZSAhPSBcImRyYWZ0XCJcclxuXHRcdFx0ZGF0YS5hdHRzLmRpc2FibGVkID0gdHJ1ZVxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdGluc3RhbmNlSWQ6IC0+XHJcblx0XHRyZXR1cm4gJ2luc3RhbmNlZm9ybSc7I1wiaW5zdGFuY2VfXCIgKyBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIik7XHJcblxyXG5cdGZvcm1fdHlwZXM6IC0+XHJcblx0XHRpZiBBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KClcclxuXHRcdFx0cmV0dXJuICdkaXNhYmxlZCc7XHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiAnbWV0aG9kJztcclxuXHJcblx0c3RlZWRvc19mb3JtOiAtPlxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcclxuXHRcdGlmIGZvcm1fdmVyc2lvblxyXG5cdFx0XHRyZXR1cm4gZm9ybV92ZXJzaW9uXHJcblxyXG5cdGlubmVyc3ViZm9ybUNvbnRleHQ6IChvYmopLT5cclxuXHRcdGRvY192YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XHJcblx0XHRvYmpbXCJ0YWJsZVZhbHVlc1wiXSA9IGlmIGRvY192YWx1ZXMgdGhlbiBkb2NfdmFsdWVzW29iai5jb2RlXSBlbHNlIFtdXHJcblx0XHRvYmpbXCJmb3JtSWRcIl0gPSBcImluc3RhbmNlZm9ybVwiO1xyXG5cdFx0cmV0dXJuIG9iajtcclxuXHJcblx0aW5zdGFuY2U6IC0+XHJcblx0XHRTZXNzaW9uLmdldChcImNoYW5nZV9kYXRlXCIpXHJcblx0XHRpZiAoU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKVxyXG5cdFx0XHRzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRcdHJldHVybiBzdGVlZG9zX2luc3RhbmNlO1xyXG5cclxuXHRlbXB0eTogKHZhbCkgLT5cclxuXHRcdGlmIHZhbFxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblxyXG5cdHVuZW1wdHk6ICh2YWwpIC0+XHJcblx0XHRpZiB2YWxcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0ZXF1YWxzOiAoYSwgYikgLT5cclxuXHRcdHJldHVybiAoYSA9PSBiKVxyXG5cclxuXHR1bmVxdWFsczogKGEsIGIpIC0+XHJcblx0XHRyZXR1cm4gIShhID09IGIpXHJcblxyXG5cdGluY2x1ZGVzOiAoYSwgYikgLT5cclxuXHRcdHJldHVybiBiLnNwbGl0KCcsJykuaW5jbHVkZXMoYSk7XHJcblxyXG5cdGluY2x1ZGU6IChhLCBiKSAtPlxyXG5cdFx0cmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcclxuXHJcblx0ZmllbGRzOiAtPlxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcclxuXHRcdGlmIGZvcm1fdmVyc2lvblxyXG5cdFx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xyXG5cclxuXHRmb3JtYXREYXRlOiAoZGF0ZSwgb3B0aW9ucyktPlxyXG5cdFx0aWYgIWRhdGVcclxuXHRcdFx0cmV0dXJuIFwiXCI7XHJcblx0XHRpZiBvcHRpb25zICYmIHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJ1xyXG5cdFx0XHRvcHRpb25zID0gSlNPTi5wYXJzZShvcHRpb25zKTtcclxuXHJcblx0XHRpZiAhb3B0aW9ucy5mb3JtYXRcclxuXHRcdFx0b3B0aW9ucyA9IHtmb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwifVxyXG5cclxuXHRcdHJldHVybiBtb21lbnQoZGF0ZSkuZm9ybWF0KG9wdGlvbnMuZm9ybWF0KTtcclxuXHJcblx0dHJhY2VzOiAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdHN0ZWVkb3NEYXRhID0gVGVtcGxhdGUuaW5zdGFuY2UoKT8udmlldz8udGVtcGxhdGU/LnN0ZWVkb3NEYXRhXHJcblx0XHRcdGluc3RhbmNlID0gc3RlZWRvc0RhdGE/Lmluc3RhbmNlXHJcblx0XHRcdGZsb3cgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0Rmxvd1ZlcnNpb24oaW5zdGFuY2UpO1xyXG5cdFx0XHRsb2NhbGUgPSBzdGVlZG9zRGF0YT8ubG9jYWxlXHJcblx0XHRcdGlmIGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcclxuXHRcdFx0XHRsb2NhbGUgPSBcInpoLUNOXCJcclxuXHRcdGVsc2VcclxuXHRcdFx0aW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcblx0XHRcdGZsb3cgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGbG93VmVyc2lvbigpXHJcblxyXG5cdFx0XHRsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpXHJcblxyXG5cdFx0aWYgIWluc3RhbmNlIHx8ICFmbG93XHJcblx0XHRcdHJldHVybiB7fTtcclxuXHJcblx0XHRzdGVwcyA9IGZsb3cuc3RlcHM7XHJcblxyXG5cdFx0dHJhY2VzID0ge307XHJcblxyXG5cdFx0aW5zdGFuY2UudHJhY2VzPy5mb3JFYWNoICh0cmFjZSktPlxyXG5cdFx0XHRzdGVwID0gc3RlcHMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZS5zdGVwKVxyXG5cclxuXHRcdFx0YXBwcm92ZXMgPSBbXVxyXG5cclxuXHRcdFx0dHJhY2UuYXBwcm92ZXM/LmZvckVhY2ggKGFwcHJvdmUpIC0+XHJcblx0XHRcdFx0aWYgdHJhY2UuaXNfZmluaXNoZWQgPT0gdHJ1ZVxyXG4jIOW3sue7k+adn+eahOaYvuekuuS4uuaguOWHhi/pqbPlm54v5Y+W5raI55Sz6K+3XHJcblx0XHRcdFx0XHRpZiBhcHByb3ZlLmp1ZGdlID09ICdhcHByb3ZlZCdcclxuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSBhcHByb3ZlZFwiLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICdyZWplY3RlZCdcclxuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSByZWplY3RlZFwiLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICd0ZXJtaW5hdGVkJ1xyXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHRlcm1pbmF0ZWRcIiwge30sIGxvY2FsZSlcclxuXHRcdFx0XHRcdGVsc2UgaWYgYXBwcm92ZS5qdWRnZSA9PSAncmVhc3NpZ25lZCdcclxuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSByZWFzc2lnbmVkXCIsIHt9LCBsb2NhbGUpXHJcblx0XHRcdFx0XHRlbHNlIGlmIGFwcHJvdmUuanVkZ2UgPT0gJ3JlbG9jYXRlZCdcclxuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSByZWxvY2F0ZWRcIiwge30sIGxvY2FsZSlcclxuXHRcdFx0XHRcdGVsc2UgaWYgYXBwcm92ZS5qdWRnZSA9PSAnJ1xyXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gXCJcIlxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gXCJcIlxyXG5cclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHBlbmRpbmdcIiwge30sIGxvY2FsZSlcclxuXHJcblx0XHRcdFx0YXBwcm92ZXMucHVzaFxyXG5cdFx0XHRcdFx0X2lkOiBhcHByb3ZlLl9pZFxyXG5cdFx0XHRcdFx0aGFuZGxlcjogYXBwcm92ZS51c2VyXHJcblx0XHRcdFx0XHRoYW5kbGVyX25hbWU6IGFwcHJvdmUuaGFuZGxlcl9uYW1lXHJcblx0XHRcdFx0XHRoYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lOiBhcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWVcclxuXHRcdFx0XHRcdGhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lOiBhcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lXHJcblx0XHRcdFx0XHRmaW5pc2hfZGF0ZTogYXBwcm92ZS5maW5pc2hfZGF0ZVxyXG5cdFx0XHRcdFx0anVkZ2U6IGFwcHJvdmUuanVkZ2VcclxuXHRcdFx0XHRcdGp1ZGdlX25hbWU6IGp1ZGdlX25hbWVcclxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBhcHByb3ZlLmRlc2NyaXB0aW9uXHJcblx0XHRcdFx0XHRpc19maW5pc2hlZDogYXBwcm92ZS5pc19maW5pc2hlZFxyXG5cdFx0XHRcdFx0dHlwZTogYXBwcm92ZS50eXBlXHJcblx0XHRcdFx0XHRvcGluaW9uX2ZpZWxkc19jb2RlOiBhcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGVcclxuXHRcdFx0XHRcdHNpZ25fZmllbGRfY29kZTogYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGVcclxuXHRcdFx0XHRcdGlzX3JlYWQ6IGFwcHJvdmUuaXNfcmVhZFxyXG5cdFx0XHRcdFx0c2lnbl9zaG93OiBhcHByb3ZlLnNpZ25fc2hvd1xyXG5cclxuXHJcblx0XHRcdGlmIHN0ZXBcclxuXHRcdFx0XHRpZiBzdGVwLm5hbWUgb2YgdHJhY2VzXHJcblx0XHRcdFx0XHR0cmFjZXNbc3RlcC5uYW1lXSA9IHRyYWNlc1tzdGVwLm5hbWVdLmNvbmNhdChhcHByb3ZlcylcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR0cmFjZXNbc3RlcC5uYW1lXSA9IGFwcHJvdmVzXHJcblxyXG5cdFx0cmV0dXJuIHRyYWNlcztcclxuXHJcblxyXG5cclxuXHRkb2NfdmFsdWVzOiAtPlxyXG5cdFx0V29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xyXG5cclxuXHRpbnN0YW5jZV9ib3hfc3R5bGU6IC0+XHJcblx0XHRib3ggPSBTZXNzaW9uLmdldChcImJveFwiKVxyXG5cdFx0aWYgYm94ID09IFwiaW5ib3hcIiB8fCBib3ggPT0gXCJkcmFmdFwiXHJcblx0XHRcdGp1ZGdlID0gU2Vzc2lvbi5nZXQoXCJqdWRnZVwiKVxyXG5cdFx0XHRpZiBqdWRnZVxyXG5cdFx0XHRcdGlmIChqdWRnZSA9PSBcImFwcHJvdmVkXCIpXHJcblx0XHRcdFx0XHRyZXR1cm4gXCJib3gtc3VjY2Vzc1wiXHJcblx0XHRcdFx0ZWxzZSBpZiAoanVkZ2UgPT0gXCJyZWplY3RlZFwiKVxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiYm94LWRhbmdlclwiXHJcblx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGlmIGlucyAmJiBpbnMuZmluYWxfZGVjaXNpb25cclxuXHRcdFx0aWYgaW5zLmZpbmFsX2RlY2lzaW9uID09IFwiYXBwcm92ZWRcIlxyXG5cdFx0XHRcdHJldHVybiBcImJveC1zdWNjZXNzXCJcclxuXHRcdFx0ZWxzZSBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09IFwicmVqZWN0ZWRcIilcclxuXHRcdFx0XHRyZXR1cm4gXCJib3gtZGFuZ2VyXCJcclxuXHJcbiNpc19kaXNhYmxlZDogLT5cclxuIyAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuIyAgICBpZiAhaW5zXHJcbiMgICAgICAgIHJldHVybjtcclxuIyAgICBpZiBpbnMuc3RhdGUhPVwiZHJhZnRcIlxyXG4jICAgICAgICByZXR1cm4gXCJkaXNhYmxlZFwiO1xyXG4jICAgIHJldHVybjtcclxuXHJcblx0dGFibGVfZmllbGRzOiAoaW5zdGFuY2UpLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKVxyXG5cdFx0aWYgZm9ybV92ZXJzaW9uXHJcblx0XHRcdGZpZWxkcyA9IF8uY2xvbmUoZm9ybV92ZXJzaW9uLmZpZWxkcyk7XHJcblxyXG5cdFx0XHRmaWVsZHMuZm9yRWFjaCAoZmllbGQsIGluZGV4KSAtPlxyXG5cdFx0XHRcdGZpZWxkLnRyX3N0YXJ0ID0gXCJcIjtcclxuXHRcdFx0XHRmaWVsZC50cl9lbmQgPSBcIlwiO1xyXG5cdFx0XHRcdHRkX2NvbHNwYW4gPSAxO1xyXG4jXHRcdFx0XHTlvLrliLborr7nva7moIflpLTlrZfmrrXkuLrlrr3lrZfmrrVcclxuXHRcdFx0XHRpZiBDb3JlRm9ybT8ucGFnZVRpdGxlRmllbGROYW1lID09IGZpZWxkLmNvZGVcclxuXHRcdFx0XHRcdGZpZWxkLmlzX3dpZGUgPSB0cnVlXHJcblxyXG5cdFx0XHRcdGlmIGZpZWxkLmZvcm11bGEgJiYgZmllbGQudHlwZSAhPSAnb2RhdGEnXHJcblx0XHRcdFx0XHRmaWVsZC5wZXJtaXNzaW9uID0gXCJyZWFkb25seVwiO1xyXG5cclxuXHRcdFx0XHRpZiBTdGVlZG9zLmlzTW9iaWxlKClcclxuIyDlpoLmnpzlvZPliY3lrZfmrrXmmK/liIbnu4TjgIHooajmoLzjgIHlrr3lrZfmrrVcclxuXHRcdFx0XHRcdGlmIGZpZWxkLnR5cGUgPT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdFx0XHRmaWVsZC50ZF9jb2xzcGFuID0gNDtcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0ZmllbGQudGRfY29sc3BhbiA9IDM7XHJcblxyXG5cdFx0XHRcdFx0aWYgaW5kZXggIT0gMFxyXG5cdFx0XHRcdFx0XHRmaWVsZC50cl9zdGFydCA9IFwiPHRyPlwiO1xyXG5cdFx0XHRcdFx0XHRmaWVsZC50cl9lbmQgPSBcIjwvdHI+XCI7XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0cHJlX2ZpZWxkcyA9IGZpZWxkcy5zbGljZSgwLCBpbmRleCk7XHJcblxyXG5cdFx0XHRcdFx0cHJlX3dpZGVfZmllbGRzID0gcHJlX2ZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcImlzX3dpZGVcIiwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdFx0dHJfc3RhcnQgPSBcIlwiO1xyXG5cclxuXHRcdFx0XHRcdHRyX2VuZCA9IFwiXCI7XHJcblxyXG5cdFx0XHRcdFx0IyDlhYjorqHnrpflvZPliY3lrZfmrrXmmK/lkKbkuLrlrr3lrZfmrrVcclxuXHRcdFx0XHRcdGJlZm9yZV9maWVsZCA9IG51bGw7XHJcblx0XHRcdFx0XHRhZnRlcl9maWVsZCA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0aWYgaW5kZXggPiAwXHJcblx0XHRcdFx0XHRcdGJlZm9yZV9maWVsZCA9IGZpZWxkc1tpbmRleCAtIDFdXHJcblxyXG5cdFx0XHRcdFx0aWYgaW5kZXggPCBmaWVsZHMubGVuZ3RoIC0gMVxyXG5cdFx0XHRcdFx0XHRhZnRlcl9maWVsZCA9IGZpZWxkc1tpbmRleCArIDFdXHJcblxyXG5cdFx0XHRcdFx0IyDlpoLmnpzlvZPliY3lrZfmrrXmmK/liIbnu4TjgIHooajmoLzjgIHlrr3lrZfmrrVcclxuXHRcdFx0XHRcdGlmIGZpZWxkLnR5cGUgPT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdFx0XHR0ZF9jb2xzcGFuID0gNDtcclxuXHRcdFx0XHRcdGVsc2UgaWYgZmllbGQuaXNfd2lkZVxyXG5cdFx0XHRcdFx0XHR0ZF9jb2xzcGFuID0gMztcclxuXHRcdFx0XHRcdGVsc2VcclxuIyDliY3lkI7pg73mmK/lrr3lrZfmrrVcclxuXHRcdFx0XHRcdFx0aWYgYmVmb3JlX2ZpZWxkICYmIGFmdGVyX2ZpZWxkICYmIGJlZm9yZV9maWVsZC5pc193aWRlICYmIGFmdGVyX2ZpZWxkLmlzX3dpZGVcclxuXHRcdFx0XHRcdFx0XHRmaWVsZC5pc193aWRlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR0ZF9jb2xzcGFuID0gMztcclxuXHJcblx0XHRcdFx0XHRcdCMg5b2T5YmN5pivdHIg5LiL55qEIOesrOS4gOS4qnRkICYg5ZCO6L6555qE5a2X5q615piv5a695a2X5q61XHJcblx0XHRcdFx0XHRcdGlmIChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiA9PSAwICYmIGFmdGVyX2ZpZWxkICYmIGFmdGVyX2ZpZWxkLmlzX3dpZGVcclxuXHRcdFx0XHRcdFx0XHRmaWVsZC5pc193aWRlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR0ZF9jb2xzcGFuID0gMztcclxuXHJcblx0XHRcdFx0XHRcdCMg5b2T5YmN5pivdHIg5LiL55qEIOesrOS4gOS4qnRkICYg5b2T5YmN5a2X5q615piv5pyA5ZCO5LiA5Liq5a2X5q61XHJcblx0XHRcdFx0XHRcdGlmIChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiA9PSAwICYmIGFmdGVyX2ZpZWxkID09IG51bGxcclxuXHRcdFx0XHRcdFx0XHRmaWVsZC5pc193aWRlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR0ZF9jb2xzcGFuID0gMztcclxuXHJcblx0XHRcdFx0XHRmaWVsZC50ZF9jb2xzcGFuID0gdGRfY29sc3BhbjtcclxuXHJcblxyXG5cdFx0XHRcdFx0aWYgaW5kZXggPT0gMFxyXG4jIHRyX3N0YXJ0ID0gXCI8dHI+XCI7IOeUseS6jlRlbXBsYXRl55qE57yW6K+RYnVn77yM5a+86Ie05q+P5qyh57uZ5LiA5LiqdHLlvIDlp4vml7bvvIzkvJroh6rliqjooaXlpLTmiJbooaXlsL7jgILlm6DmraTlnKjnrKzkuIDooYzov5Tlm57kuIDkuKrnqbrlrZfnrKbkuLIuXHJcblx0XHRcdFx0XHRcdHRyX3N0YXJ0ID0gXCI8dHI+XCI7XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGlmIChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiA9PSAwIHx8IGZpZWxkLmlzX3dpZGVcclxuXHRcdFx0XHRcdFx0XHRpZiBmaWVsZC50eXBlID09ICd0YWJsZSdcclxuXHRcdFx0XHRcdFx0XHRcdHRyX3N0YXJ0ID0gXCI8dHIgY2xhc3MgPSBcXFwidHItY2hpbGQtdGFibGVcXFwiPlwiO1xyXG5cdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdHRyX3N0YXJ0ID0gXCI8dHI+XCI7XHJcblxyXG5cdFx0XHRcdFx0ZmllbGQudHJfc3RhcnQgPSB0cl9zdGFydDtcclxuXHJcblxyXG5cdFx0XHRcdFx0aWYgaW5kZXggKyAxID09IGZpZWxkcy5sZW5ndGggfHwgZmllbGQudHlwZSA9PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PSAndGFibGUnIHx8IGZpZWxkLmlzX3dpZGVcclxuXHRcdFx0XHRcdFx0dHJfZW5kID0gXCI8L3RyPlwiO1xyXG5cclxuXHRcdFx0XHRcdGlmIChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiAhPSAwXHJcblx0XHRcdFx0XHRcdHRyX2VuZCA9IFwiPC90cj5cIjtcclxuXHJcblx0XHRcdFx0XHRmaWVsZC50cl9lbmQgPSB0cl9lbmQ7XHJcblxyXG5cdFx0XHRyZXR1cm4gZmllbGRzO1xyXG5cclxuXHRzb3J0X2FwcHJvdmU6IChhcHByb3Zlcywgb3JkZXIpLT5cclxuXHRcdGlmICFhcHByb3Zlc1xyXG5cdFx0XHRyZXR1cm4gW11cclxuXHJcblx0XHRpZiAhYXBwcm92ZXMgaW5zdGFuY2VvZiBBcnJheVxyXG5cdFx0XHRyZXR1cm4gW11cclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgb3JkZXIgPT0gJ2Rlc2MnXHJcblx0XHRcdFx0YXBwcm92ZXMuc29ydCAocDEsIHAyKSAtPlxyXG5cdFx0XHRcdFx0X3AxID0gMFxyXG5cdFx0XHRcdFx0X3AyID0gMFxyXG5cclxuXHRcdFx0XHRcdGlmIHAxLmZpbmlzaF9kYXRlXHJcblx0XHRcdFx0XHRcdF9wMSA9IHAxLmZpbmlzaF9kYXRlLmdldFRpbWUoKVxyXG5cclxuXHRcdFx0XHRcdGlmIHAyLmZpbmlzaF9kYXRlXHJcblx0XHRcdFx0XHRcdF9wMiA9IHAyLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gX3AyIC0gX3AxXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRhcHByb3Zlcy5zb3J0IChwMSwgcDIpIC0+XHJcblx0XHRcdFx0XHRfcDEgPSAwXHJcblx0XHRcdFx0XHRfcDIgPSAwXHJcblxyXG5cdFx0XHRcdFx0aWYgcDEuZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdFx0X3AxID0gcDEuZmluaXNoX2RhdGUuZ2V0VGltZSgpXHJcblxyXG5cdFx0XHRcdFx0aWYgcDIuZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdFx0X3AyID0gcDIuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBfcDEgLSBfcDJcclxuXHRcdHJldHVybiBhcHByb3Zlc1xyXG5cclxuXHRfdDogKGtleSktPlxyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxyXG5cdGdldEZpZWxkOiAoY29kZSktPlxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvblxyXG5cdFx0aWYgZm9ybV92ZXJzaW9uXHJcblx0XHRcdHJldHVybiBmb3JtX3ZlcnNpb24uZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpXHJcblxyXG5cdGdldFZhbHVlOiAoY29kZSktPlxyXG5cdFx0aW5zdGFuY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuaW5zdGFuY2VcclxuXHJcblx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXHJcblxyXG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cclxuXHRcdHV0Y09mZnNldCA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS51dGNPZmZzZXRcclxuXHJcblx0XHR2YWx1ZXMgPSBpbnN0YW5jZS52YWx1ZXMgfHwge31cclxuXHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0dmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpXHJcblxyXG5cdFx0cmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSB2YWx1ZXNbY29kZV0sIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSksIGxvY2FsZSwgdXRjT2Zmc2V0XHJcblxyXG5cdGdldExhYmVsOiAoY29kZSktPlxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvblxyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsIGZvcm1fdmVyc2lvbi5maWVsZHMsIGNvZGVcclxuXHJcblx0Z2V0Q2ZDbGFzczogKGZpZWxkKS0+XHJcblx0XHRpZiBmaWVsZD8udHlwZSA9PSBcImlucHV0XCIgJiYgZmllbGQ/LmlzX3RleHRhcmVhXHJcblx0XHRcdHJldHVybiBcImNmVGV4dGFyZWFcIlxyXG5cclxuXHRnZXRUYWJsZVRoZWFkOiAoZmllbGQpLT5cclxuXHRcdHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VGhlYWQoZmllbGQsIGZhbHNlKVxyXG5cclxuXHRnZXRUYWJsZUJvZHk6IChmaWVsZCktPlxyXG5cclxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZVxyXG5cdFx0XHR2YWx1ZXMgPSBpbnN0YW5jZS52YWx1ZXMgfHwge31cclxuXHRcdGVsc2VcclxuXHRcdFx0dmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpXHJcblxyXG5cdFx0dGFibGVWYWx1ZSA9IHZhbHVlc1tmaWVsZC5jb2RlXTtcclxuXHRcdHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VGJvZHkoZmllbGQuc2ZpZWxkcy5nZXRQcm9wZXJ0eShcImNvZGVcIiksIGZpZWxkLCB0YWJsZVZhbHVlLCBmYWxzZSlcclxuXHJcblx0c2hvd0xhYmVsOiAoZmllbGQpLT5cclxuXHRcdHRlbXBsYXRlRGF0YSA9IFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YVxyXG5cdFx0aWYgdGVtcGxhdGVEYXRhLmxhYmVsID09IGZhbHNlXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0cmV0dXJuIHRydWVcclxuXHJcbiNcdGFmRmllbGRMYWJlbFRleHQ6IChvcCktPlxyXG4jXHRcdGlmICFUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGFcclxuI1x0XHRcdHJldHVybiBBdXRvRm9ybS5nZXRMYWJlbEZvckZpZWxkKG9wLm5hbWUpXHJcbiNcdFx0ZWxzZVxyXG4jXHRcdFx0Zm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvblxyXG4jXHRcdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsIGZvcm1fdmVyc2lvbi5maWVsZHMsIG9wPy5oYXNoPy5uYW1lXHJcblxyXG5cdGlzT3BpbmlvbkZpZWxkOiAoZmllbGQpLT5cclxuXHRcdHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkLmZvcm11bGEpXHJcblxyXG5cdGlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nOiAoZmllbGRfZm9ybXVsYSktPlxyXG5cdFx0cmV0dXJuIEluc3RhbmNlU2lnblRleHQuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSlcclxuXHJcblx0aW5jbHVkZXNPcGluaW9uRmllbGQ6IChmb3JtLCBmb3JtX3ZlcnNpb24pLT5cclxuXHJcblx0XHRmaWVsZF9mb3JtdWxhcyA9IG5ldyBBcnJheSgpO1xyXG5cclxuXHRcdGZpZWxkcyA9IGRiLmZvcm1fdmVyc2lvbnMuZmluZE9uZSh7X2lkOiBmb3JtX3ZlcnNpb24sIGZvcm06IGZvcm19KT8uZmllbGRzIHx8IFtdXHJcblxyXG5cdFx0ZmllbGRzLmZvckVhY2ggKGYpLT5cclxuXHRcdFx0aWYgZi50eXBlID09ICd0YWJsZSdcclxuXHRcdFx0XHRjb25zb2xlLmxvZyAnaWdub3JlIG9waW5pb24gZmllbGQgaW4gdGFibGUnXHJcblx0XHRcdGVsc2UgaWYgZi50eXBlID09ICdzZWN0aW9uJ1xyXG5cdFx0XHRcdGY/LmZpZWxkcz8uZm9yRWFjaCAoZjEpLT5cclxuXHRcdFx0XHRcdGZpZWxkX2Zvcm11bGFzLnB1c2ggZjEuZm9ybXVsYVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0ZmllbGRfZm9ybXVsYXMucHVzaCBmLmZvcm11bGFcclxuXHJcblx0XHRfLnNvbWUgZmllbGRfZm9ybXVsYXMsIChmaWVsZF9mb3JtdWxhKS0+XHJcblx0XHRcdHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpXHJcblxyXG5cdGdldE9waW5pb25GaWVsZFN0ZXBzTmFtZTogKGZpZWxkX2Zvcm11bGEsIHRvcF9rZXl3b3JkcyktPlxyXG5cclxuXHRcdG9waW5pb25GaWVsZHMgPSBuZXcgQXJyYXkoKTtcclxuI1x0XHRjb25zb2xlLmxvZyhcImZpZWxkX2Zvcm11bGFcIiwgZmllbGRfZm9ybXVsYSlcclxuXHRcdGlmIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSlcclxuXHRcdFx0aWYgZmllbGRfZm9ybXVsYVxyXG5cclxuI1x0XHRcdFx0Zm9vMSA9IGZpZWxkX2Zvcm11bGEuc3BsaXQoXCIsXCIpXHJcblx0XHRcdFx0Zm9vMSA9IGZpZWxkX2Zvcm11bGEuc3BsaXQoXCI7XCIpXHJcblxyXG4jXHRcdFx0XHRpZiB0b3Bfa2V5d29yZHNcclxuI1x0XHRcdFx0XHRmb28xID0gZmllbGRfZm9ybXVsYS5zcGxpdChcIjtcIilcclxuXHJcblx0XHRcdFx0Zm9vMS5mb3JFYWNoIChmb28pLT5cclxuXHRcdFx0XHRcdGpzb25fZm9ybXVsYSA9IHt9XHJcblxyXG5cdFx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0XHRcdGpzb25fZm9ybXVsYSA9IGV2YWwoXCIoXCIgKyBmb28gKyBcIilcIilcclxuXHRcdFx0XHRcdGNhdGNoXHJcblx0XHRcdFx0XHRcdGpzb25fZm9ybXVsYSA9IHt9XHJcblxyXG5cdFx0XHRcdFx0aWYganNvbl9mb3JtdWxhPy55aWppYW5sYW5cclxuXHRcdFx0XHRcdFx0c2YgPSB7fVxyXG5cclxuXHRcdFx0XHRcdFx0c2Yuc3RlcE5hbWUgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLnN0ZXBcclxuXHJcblx0XHRcdFx0XHRcdHNmLmltYWdlX3NpZ24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLmltYWdlX3NpZ24gfHwgZmFsc2VcclxuXHJcblx0XHRcdFx0XHRcdHNmLm9ubHlfY2Nfb3BpbmlvbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4ub25seV9jYyB8fCBmYWxzZVxyXG5cclxuXHRcdFx0XHRcdFx0c2YuZGVmYXVsdF9kZXNjcmlwdGlvbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uZGVmYXVsdFxyXG5cclxuXHRcdFx0XHRcdFx0c2Yub25seV9oYW5kbGVyID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5vbmx5X2hhbmRsZXJcclxuXHJcblx0XHRcdFx0XHRcdHNmLnRvcF9rZXl3b3JkcyA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4udG9wX2tleXdvcmRzIHx8IHRvcF9rZXl3b3Jkc1xyXG5cclxuXHRcdFx0XHRcdFx0b3BpbmlvbkZpZWxkcy5wdXNoKHNmKTtcclxuXHJcblx0XHRcdFx0XHRlbHNlIGlmKGZpZWxkX2Zvcm11bGE/LmluZGV4T2YoXCJ7dHJhY2VzLlwiKSA+IC0xIHx8IGZpZWxkX2Zvcm11bGE/LmluZGV4T2YoXCJ7c2lnbmF0dXJlLnRyYWNlcy5cIikgPiAtMSlcclxuXHJcblx0XHRcdFx0XHRcdHNmID0ge29ubHlfY2Nfb3BpbmlvbjogZmFsc2UsIGltYWdlX3NpZ246IGZhbHNlLCB0b3Bfa2V5d29yZHM6IHRvcF9rZXl3b3Jkc31cclxuXHJcblx0XHRcdFx0XHRcdGlmIGZvby5pbmRleE9mKFwie3NpZ25hdHVyZS5cIikgPiAtMVxyXG5cdFx0XHRcdFx0XHRcdHNmLmltYWdlX3NpZ24gPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0Zm9vID0gZm9vLnJlcGxhY2UoXCJ7c2lnbmF0dXJlLlwiLFwiXCIpO1xyXG5cclxuXHRcdFx0XHRcdFx0czEgPSBmb28ucmVwbGFjZShcIntcIixcIlwiKS5yZXBsYWNlKFwifVwiLFwiXCIpXHJcblx0XHRcdFx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAxXHJcblx0XHRcdFx0XHRcdFx0c2Yuc3RlcE5hbWUgPSBzMS5zcGxpdChcIi5cIilbMV1cclxuXHRcdFx0XHRcdFx0XHRpZiBvcGluaW9uRmllbGRzLmZpbHRlclByb3BlcnR5KFwic3RlcE5hbWVcIixzZi5zdGVwTmFtZSkubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0XHRcdFx0b3BpbmlvbkZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwic3RlcE5hbWVcIiwgc2Yuc3RlcE5hbWUpPy5vbmx5X2NjX29waW5pb24gPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDJcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgczEuc3BsaXQoXCIuXCIpWzJdPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICdjYydcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzZi5vbmx5X2NjX29waW5pb24gPSB0cnVlXHJcblx0XHRcdFx0XHRcdG9waW5pb25GaWVsZHMucHVzaChzZik7XHJcblxyXG5cdFx0cmV0dXJuIG9waW5pb25GaWVsZHNcclxuXHJcblx0c2hvd0NDT3BpbmlvbjogKGZpZWxkKS0+XHJcblx0XHRpZiBmaWVsZC5mb3JtdWxhPy5pbmRleE9mKFwie3RyYWNlcy5cIikgPiAtMSB8fCBmaWVsZC5mb3JtdWxhPy5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpID4gLTFcclxuXHRcdFx0czEgPSBmaWVsZC5mb3JtdWxhLnJlcGxhY2UoXCJ7c2lnbmF0dXJlLlwiLFwiXCIpLnJlcGxhY2UoXCJ7XCIsXCJcIikucmVwbGFjZShcIn1cIixcIlwiKVxyXG5cdFx0XHRpZiBzMS5zcGxpdChcIi5cIikubGVuZ3RoID4gMlxyXG5cdFx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKVsyXT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnY2MnXHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdG1hcmtEb3duVG9IdG1sOiAobWFya0Rvd25TdHJpbmcpLT5cclxuXHRcdGlmIG1hcmtEb3duU3RyaW5nXHJcblx0XHRcdHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XHJcblx0XHRcdHJlbmRlcmVyLmxpbmsgPSAoIGhyZWYsIHRpdGxlLCB0ZXh0ICkgLT5cclxuXHRcdFx0XHRyZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nI3tocmVmfScgdGl0bGU9JyN7dGl0bGV9Jz4je3RleHR9PC9hPlwiXHJcblx0XHRcdHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge3JlbmRlcmVyOnJlbmRlcmVyfSkpXHJcblxyXG5cdGZfbGFiZWw6ICh0aGF0KS0+XHJcblx0XHRyZXR1cm4gdGhhdC5uYW1lIHx8IHRoYXQuY29kZVxyXG5cclxuaWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5zdGVlZG9zX2Zvcm0gPSAtPlxyXG5cdFx0cmV0dXJuIHRoaXMuZm9ybV92ZXJzaW9uXHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNTZWN0aW9uID0gKGNvZGUpLT5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IHRoaXMuZm9ybV92ZXJzaW9uXHJcblx0XHRyZXR1cm4gZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKS50eXBlID09ICdzZWN0aW9uJ1xyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmRvY192YWx1ZXMgPSAtPlxyXG5cdFx0aW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xyXG5cdFx0cmV0dXJuIGluc3RhbmNlLnZhbHVlcztcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5hcHBsaWNhbnRDb250ZXh0ID0gLT5cclxuXHRcdGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZTtcclxuXHRcdGRhdGEgPSB7XHJcblx0XHRcdG5hbWU6ICdpbnNfYXBwbGljYW50JyxcclxuXHRcdFx0YXR0czoge25hbWU6ICdpbnNfYXBwbGljYW50JywgaWQ6ICdpbnNfYXBwbGljYW50JywgY2xhc3M6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50J30sXHJcblx0XHRcdHZhbHVlOiBpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZVxyXG5cdFx0fVxyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc3RhbmNlID0gLT5cclxuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlXHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZmllbGRzID0gLT5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IHRoaXMuZm9ybV92ZXJzaW9uXHJcblx0XHRpZiBmb3JtX3ZlcnNpb25cclxuXHRcdFx0cmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYShmb3JtX3ZlcnNpb24pKTtcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtX3R5cGVzID0gLT5cclxuXHRcdHJldHVybiBcImRpc2FibGVkXCJcclxuXHJcblx0VGVtcGxhdGUucmVnaXN0ZXJIZWxwZXIgXCJhZkZpZWxkTGFiZWxUZXh0XCIsIChvcCktPlxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvblxyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsIGZvcm1fdmVyc2lvbi5maWVsZHMsIG9wPy5oYXNoPy5uYW1lXHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuX3QgPSAoa2V5KS0+XHJcblx0XHRsb2NhbGUgPSB0aGlzLmxvY2FsZVxyXG5cclxuXHRcdHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSlcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnNfYXR0YWNoX2Rvd25sb2FkX3VybCA9IChfaWQsIGFic29sdXRlKS0+XHJcblx0XHRpZiBhYnNvbHV0ZVxyXG5cdFx0XHRyZXR1cm4gTWV0ZW9yLmFic29sdXRlVXJsKFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvI3tfaWR9P2Rvd25sb2FkPXRydWVcIik7XHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBcIi9hcGkvZmlsZXMvaW5zdGFuY2VzLyN7X2lkfT9kb3dubG9hZD10cnVlXCI7XHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMub3B0aW9ucyA9IChmaWVsZCktPlxyXG5cdFx0b3B0aW9ucyA9IGZpZWxkPy5vcHRpb25zPy5zcGxpdChcIlxcblwiKVxyXG5cdFx0cmV2ID0gW11cclxuXHRcdG9wdGlvbnM/LmZvckVhY2ggKGl0ZW0pLT5cclxuXHRcdFx0cmV2LnB1c2goe2xhYmVsOiBpdGVtLCB2YWx1ZTogaXRlbX0pXHJcblxyXG5cdFx0cmV0dXJuIHJldlxyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmdldFBlcm1pc3Npb25zID0gKGNvZGUpLT5cclxuXHRcdGlmICFUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHM/LmluY2x1ZGVzKGNvZGUpXHJcblx0XHRcdHJldHVybiBcInJlYWRvbmx5IGRpc2FibGVkXCJcclxuXHRcdHJldHVybiBcIlwiXHJcblxyXG5JbnN0YW5jZWZvcm1UZW1wbGF0ZS5ldmVudHMgPVxyXG5cdCdjaGFuZ2UgLmZvcm0tY29udHJvbCwuY2hlY2tib3ggaW5wdXQsLmFmLXJhZGlvLWdyb3VwIGlucHV0LC5hZi1jaGVja2JveC1ncm91cCBpbnB1dCc6IChldmVudCktPlxyXG5cdFx0SW5zdGFuY2VNYW5hZ2VyLmluc3RhbmNlZm9ybUNoYW5nZUV2ZW50KGV2ZW50KVxyXG5cclxuXHQndHlwZWFoZWFkOmNoYW5nZSAuZm9ybS1jb250cm9sJzogKGV2ZW50KSAtPlxyXG5cdFx0SW5zdGFuY2VNYW5hZ2VyLmluc3RhbmNlZm9ybUNoYW5nZUV2ZW50KGV2ZW50KVxyXG5cclxuXHQnY2xpY2sgLmNmVGV4dGFyZWEgYSc6IChldmVudCktPlxyXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFN0ZWVkb3Mub3BlbldpbmRvdyhldmVudC50YXJnZXQuaHJlZik7XHJcblxyXG5cclxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUub25DcmVhdGVkID0gKCktPlxyXG5cdGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0aWYgIWluc3RhbmNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdHRlbXBsYXRlID0gVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlKGluc3RhbmNlKTtcclxuXHJcblx0dHJ5XHJcblx0XHRjb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtpc0JvZHk6IHRydWV9KTtcclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmxvZyBcIkluc3RhbmNlIFRlbXBsYXRlIEVycm9yXCIsIGVcclxuXHRcdGNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShcIlwiLCB7aXNCb2R5OiB0cnVlfSk7XHJcblxyXG5cclxuXHRyZW5kZXJGdW5jdGlvbiA9IGV2YWwoY29tcGlsZWQpO1xyXG5cclxuXHRpbnN0YW5jZVZpZXcgPSBuZXcgQmxhemUuVmlldyhcImN1c3RvbV9pbnN0YW5jZV90ZW1wbGF0ZVwiLCByZW5kZXJGdW5jdGlvbik7XHJcblxyXG5cdGluc3RhbmNlQ3VzdG9tVGVtcGxhdGUgPSBuZXcgQmxhemUuVGVtcGxhdGUoaW5zdGFuY2VWaWV3Lm5hbWUsIHJlbmRlckZ1bmN0aW9uKTtcclxuXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlID0gaW5zdGFuY2VDdXN0b21UZW1wbGF0ZVxyXG5cclxuXHRUZW1wbGF0ZS5pbnN0YW5jZV9jdXN0b21fdGVtcGxhdGUuaGVscGVycyBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzXHJcblxyXG5cclxuXHJcblxyXG5JbnN0YW5jZWZvcm1UZW1wbGF0ZS5vblJlbmRlcmVkID0gKCktPlxyXG5cdCMgdCA9IHRoaXM7XHJcblxyXG5cdCN0LnN1YnNjcmliZSBcImluc3RhbmNlX2RhdGFcIiwgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpLCAtPlxyXG5cdCMgICAgVHJhY2tlci5hZnRlckZsdXNoIC0+XHJcblx0aW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRpZiAhaW5zdGFuY2VcclxuXHRcdHJldHVybjtcclxuXHJcblx0IyQoXCIjaW5zX2FwcGxpY2FudFwiKS5zZWxlY3QyKCkudmFsKGluc3RhbmNlLmFwcGxpY2FudCkudHJpZ2dlcignY2hhbmdlJyk7XHJcblx0IyQoXCIjaW5zX2FwcGxpY2FudFwiKS52YWwoaW5zdGFuY2UuYXBwbGljYW50KTtcclxuXHQkKFwiaW5wdXRbbmFtZT0naW5zX2FwcGxpY2FudCddXCIpWzBdPy5kYXRhc2V0LnZhbHVlcyA9IGluc3RhbmNlLmFwcGxpY2FudDtcclxuXHQkKFwiaW5wdXRbbmFtZT0naW5zX2FwcGxpY2FudCddXCIpLnZhbChpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZSlcclxuXHJcblxyXG5cdEFwcHJvdmVNYW5hZ2VyLmVycm9yID0ge25leHRTdGVwczogJycsIG5leHRTdGVwVXNlcnM6ICcnfTtcclxuXHJcblx0IyBpbnN0YW5jZSBmcm9t57uR5a6a5LqL5Lu2XHJcblx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94JyB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnZHJhZnQnXHJcblx0XHRJbnN0YW5jZUV2ZW50LmluaXRFdmVudHMoaW5zdGFuY2UuZmxvdyk7XHJcblxyXG5cdGlmICFBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KClcclxuXHJcblx0XHRjdXJyZW50QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSgpO1xyXG5cclxuXHJcblx0XHRpbnN0YW5jZU51bWJlckZpZWxkcyA9ICQoXCJbZGF0YS1mb3JtdWxhXVwiLCAkKFwiI2luc3RhbmNlZm9ybVwiKSlcclxuXHJcblx0XHRpbnN0YW5jZU51bWJlckZpZWxkcy5lYWNoICgpLT5cclxuXHRcdFx0c2NoZW1hS2V5ID0gdGhpcy5kYXRhc2V0LnNjaGVtYUtleVxyXG5cdFx0XHRlbGVtZW50ID0gJCh0aGlzKVxyXG5cdFx0XHRpZiAhJCh0aGlzKS52YWwoKSAmJiBzY2hlbWFLZXkgJiYgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpXHJcblx0XHRcdFx0TWV0ZW9yLmNhbGwgJ2dldEluc3RhbmNlVmFsdWVzJywgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpLCAoZXJyb3IsIHJlc3VsdCktPlxyXG5cdFx0XHRcdFx0aWYgZXJyb3JcclxuXHRcdFx0XHRcdFx0dG9hc3RyLmVycm9yKGVycm9yLnJlYXNvbilcclxuXHJcblx0XHRcdFx0XHRpZiAhcmVzdWx0W3NjaGVtYUtleV1cclxuXHRcdFx0XHRcdFx0a2V5ID0gZWxlbWVudC5kYXRhKFwiZm9ybXVsYVwiKT8ucmVwbGFjZShcImF1dG9fbnVtYmVyKFwiLCBcIlwiKS5yZXBsYWNlKFwiKVwiLCBcIlwiKVxyXG5cclxuXHRcdFx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcXCIvZywgXCJcIikucmVwbGFjZSgvXFwnL2csIFwiXCIpXHJcblxyXG5cdFx0XHRcdFx0XHRpZiBrZXkuaW5kZXhPZihcIntcIikgPiAtMVxyXG5cdFx0XHRcdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKFwie1wiLFwiXCIpLnJlcGxhY2UoXCJ9XCIsXCJcIilcclxuXHRcdFx0XHRcdFx0XHRrZXkgPSBrZXkudHJpbSgpXHJcblx0XHRcdFx0XHRcdFx0a2V5ID0gQXV0b0Zvcm0uZ2V0RmllbGRWYWx1ZShrZXksICdpbnN0YW5jZWZvcm0nKVxyXG5cdFx0XHRcdFx0XHRJbnN0YW5jZU51bWJlclJ1bGVzLmluc3RhbmNlTnVtYmVyQnVpbGRlciBlbGVtZW50LCBrZXlcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0ZWxlbWVudD8udmFsKHJlc3VsdFtzY2hlbWFLZXldKS50cmlnZ2VyKFwiY2hhbmdlXCIpXHJcblxyXG5cdFx0anVkZ2UgPSBjdXJyZW50QXBwcm92ZS5qdWRnZVxyXG5cdFx0Y3VycmVudFN0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcclxuXHRcdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XHJcblxyXG5cdFx0Zm9ybXVsYV9maWVsZHMgPSBGb3JtX2Zvcm11bGEuZ2V0Rm9ybXVsYUZpZWxkVmFyaWFibGUoXCJGb3JtX2Zvcm11bGEuZmllbGRfdmFsdWVzXCIsIGZvcm1fdmVyc2lvbi5maWVsZHMpO1xyXG5cdFx0Rm9ybV9mb3JtdWxhLnJ1bihcIlwiLCBcIlwiLCBmb3JtdWxhX2ZpZWxkcywgQXV0b0Zvcm0uZ2V0Rm9ybVZhbHVlcyhcImluc3RhbmNlZm9ybVwiKS5pbnNlcnREb2MsIGZvcm1fdmVyc2lvbi5maWVsZHMpO1xyXG5cdFx0I+WcqOatpOWkhOWIneWni+WMlnNlc3Npb24g5Lit55qEIGZvcm1fdmFsdWVzIOWPmOmHj++8jOeUqOS6juinpuWPkeS4i+S4gOatpeatpemqpOiuoeeul1xyXG5cdFx0U2Vzc2lvbi5zZXQoXCJpbnN0YW5jZV9mb3JtX3ZhbHVlc1wiLCB7aW5zdGFuY2VJZDogaW5zdGFuY2UuX2lkLCB2YWx1ZXM6IEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jfSk7XHJcblxyXG5cclxuXHJcbiIsIkluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMgPSB7XG4gIGFwcGxpY2FudENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRhLCBzdGVlZG9zX2luc3RhbmNlO1xuICAgIHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBkYXRhID0ge1xuICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgYXR0czoge1xuICAgICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIGlkOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIFwiY2xhc3NcIjogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnXG4gICAgICB9LFxuICAgICAgdmFsdWU6IHN0ZWVkb3NfaW5zdGFuY2UuYXBwbGljYW50X25hbWVcbiAgICB9O1xuICAgIGlmICghc3RlZWRvc19pbnN0YW5jZSB8fCBzdGVlZG9zX2luc3RhbmNlLnN0YXRlICE9PSBcImRyYWZ0XCIpIHtcbiAgICAgIGRhdGEuYXR0cy5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9LFxuICBpbnN0YW5jZUlkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ2luc3RhbmNlZm9ybSc7XG4gIH0sXG4gIGZvcm1fdHlwZXM6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KCkpIHtcbiAgICAgIHJldHVybiAnZGlzYWJsZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ21ldGhvZCc7XG4gICAgfVxuICB9LFxuICBzdGVlZG9zX2Zvcm06IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gZm9ybV92ZXJzaW9uO1xuICAgIH1cbiAgfSxcbiAgaW5uZXJzdWJmb3JtQ29udGV4dDogZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGRvY192YWx1ZXM7XG4gICAgZG9jX3ZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgICBvYmpbXCJ0YWJsZVZhbHVlc1wiXSA9IGRvY192YWx1ZXMgPyBkb2NfdmFsdWVzW29iai5jb2RlXSA6IFtdO1xuICAgIG9ialtcImZvcm1JZFwiXSA9IFwiaW5zdGFuY2Vmb3JtXCI7XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcbiAgaW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGVlZG9zX2luc3RhbmNlO1xuICAgIFNlc3Npb24uZ2V0KFwiY2hhbmdlX2RhdGVcIik7XG4gICAgaWYgKFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSkge1xuICAgICAgc3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgcmV0dXJuIHN0ZWVkb3NfaW5zdGFuY2U7XG4gICAgfVxuICB9LFxuICBlbXB0eTogZnVuY3Rpb24odmFsKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIHVuZW1wdHk6IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBlcXVhbHM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfSxcbiAgdW5lcXVhbHM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gIShhID09PSBiKTtcbiAgfSxcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xuICB9LFxuICBpbmNsdWRlOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcbiAgfSxcbiAgZmllbGRzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYShmb3JtX3ZlcnNpb24pKTtcbiAgICB9XG4gIH0sXG4gIGZvcm1hdERhdGU6IGZ1bmN0aW9uKGRhdGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIWRhdGUpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuZm9ybWF0KSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBmb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbW9tZW50KGRhdGUpLmZvcm1hdChvcHRpb25zLmZvcm1hdCk7XG4gIH0sXG4gIHRyYWNlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZsb3csIGluc3RhbmNlLCBsb2NhbGUsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgc3RlZWRvc0RhdGEsIHN0ZXBzLCB0cmFjZXM7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgc3RlZWRvc0RhdGEgPSAocmVmID0gVGVtcGxhdGUuaW5zdGFuY2UoKSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLnZpZXcpICE9IG51bGwgPyAocmVmMiA9IHJlZjEudGVtcGxhdGUpICE9IG51bGwgPyByZWYyLnN0ZWVkb3NEYXRhIDogdm9pZCAwIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgaW5zdGFuY2UgPSBzdGVlZG9zRGF0YSAhPSBudWxsID8gc3RlZWRvc0RhdGEuaW5zdGFuY2UgOiB2b2lkIDA7XG4gICAgICBmbG93ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEZsb3dWZXJzaW9uKGluc3RhbmNlKTtcbiAgICAgIGxvY2FsZSA9IHN0ZWVkb3NEYXRhICE9IG51bGwgPyBzdGVlZG9zRGF0YS5sb2NhbGUgOiB2b2lkIDA7XG4gICAgICBpZiAobG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09ICd6aC1jbicpIHtcbiAgICAgICAgbG9jYWxlID0gXCJ6aC1DTlwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgZmxvdyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZsb3dWZXJzaW9uKCk7XG4gICAgICBsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpO1xuICAgIH1cbiAgICBpZiAoIWluc3RhbmNlIHx8ICFmbG93KSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIHN0ZXBzID0gZmxvdy5zdGVwcztcbiAgICB0cmFjZXMgPSB7fTtcbiAgICBpZiAoKHJlZjMgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwpIHtcbiAgICAgIHJlZjMuZm9yRWFjaChmdW5jdGlvbih0cmFjZSkge1xuICAgICAgICB2YXIgYXBwcm92ZXMsIHJlZjQsIHN0ZXA7XG4gICAgICAgIHN0ZXAgPSBzdGVwcy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHRyYWNlLnN0ZXApO1xuICAgICAgICBhcHByb3ZlcyA9IFtdO1xuICAgICAgICBpZiAoKHJlZjQgPSB0cmFjZS5hcHByb3ZlcykgIT0gbnVsbCkge1xuICAgICAgICAgIHJlZjQuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgICAgICB2YXIganVkZ2VfbmFtZTtcbiAgICAgICAgICAgIGlmICh0cmFjZS5pc19maW5pc2hlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBpZiAoYXBwcm92ZS5qdWRnZSA9PT0gJ2FwcHJvdmVkJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgYXBwcm92ZWRcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBwcm92ZS5qdWRnZSA9PT0gJ3JlamVjdGVkJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcmVqZWN0ZWRcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBwcm92ZS5qdWRnZSA9PT0gJ3Rlcm1pbmF0ZWQnKSB7XG4gICAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSB0ZXJtaW5hdGVkXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICdyZWFzc2lnbmVkJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcmVhc3NpZ25lZFwiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZlLmp1ZGdlID09PSAncmVsb2NhdGVkJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcmVsb2NhdGVkXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcGVuZGluZ1wiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcHByb3Zlcy5wdXNoKHtcbiAgICAgICAgICAgICAgX2lkOiBhcHByb3ZlLl9pZCxcbiAgICAgICAgICAgICAgaGFuZGxlcjogYXBwcm92ZS51c2VyLFxuICAgICAgICAgICAgICBoYW5kbGVyX25hbWU6IGFwcHJvdmUuaGFuZGxlcl9uYW1lLFxuICAgICAgICAgICAgICBoYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lOiBhcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUsXG4gICAgICAgICAgICAgIGhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lOiBhcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lLFxuICAgICAgICAgICAgICBmaW5pc2hfZGF0ZTogYXBwcm92ZS5maW5pc2hfZGF0ZSxcbiAgICAgICAgICAgICAganVkZ2U6IGFwcHJvdmUuanVkZ2UsXG4gICAgICAgICAgICAgIGp1ZGdlX25hbWU6IGp1ZGdlX25hbWUsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhcHByb3ZlLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICBpc19maW5pc2hlZDogYXBwcm92ZS5pc19maW5pc2hlZCxcbiAgICAgICAgICAgICAgdHlwZTogYXBwcm92ZS50eXBlLFxuICAgICAgICAgICAgICBvcGluaW9uX2ZpZWxkc19jb2RlOiBhcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGUsXG4gICAgICAgICAgICAgIHNpZ25fZmllbGRfY29kZTogYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUsXG4gICAgICAgICAgICAgIGlzX3JlYWQ6IGFwcHJvdmUuaXNfcmVhZCxcbiAgICAgICAgICAgICAgc2lnbl9zaG93OiBhcHByb3ZlLnNpZ25fc2hvd1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ZXApIHtcbiAgICAgICAgICBpZiAoc3RlcC5uYW1lIGluIHRyYWNlcykge1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNlc1tzdGVwLm5hbWVdID0gdHJhY2VzW3N0ZXAubmFtZV0uY29uY2F0KGFwcHJvdmVzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNlc1tzdGVwLm5hbWVdID0gYXBwcm92ZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYWNlcztcbiAgfSxcbiAgZG9jX3ZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgfSxcbiAgaW5zdGFuY2VfYm94X3N0eWxlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm94LCBpbnMsIGp1ZGdlO1xuICAgIGJveCA9IFNlc3Npb24uZ2V0KFwiYm94XCIpO1xuICAgIGlmIChib3ggPT09IFwiaW5ib3hcIiB8fCBib3ggPT09IFwiZHJhZnRcIikge1xuICAgICAganVkZ2UgPSBTZXNzaW9uLmdldChcImp1ZGdlXCIpO1xuICAgICAgaWYgKGp1ZGdlKSB7XG4gICAgICAgIGlmIChqdWRnZSA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYm94LXN1Y2Nlc3NcIjtcbiAgICAgICAgfSBlbHNlIGlmIChqdWRnZSA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYm94LWRhbmdlclwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGlmIChpbnMgJiYgaW5zLmZpbmFsX2RlY2lzaW9uKSB7XG4gICAgICBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYm94LXN1Y2Nlc3NcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09PSBcInJlamVjdGVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYm94LWRhbmdlclwiO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdGFibGVfZmllbGRzOiBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgIHZhciBmaWVsZHMsIGZvcm1fdmVyc2lvbjtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcbiAgICB9XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgZmllbGRzID0gXy5jbG9uZShmb3JtX3ZlcnNpb24uZmllbGRzKTtcbiAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkLCBpbmRleCkge1xuICAgICAgICB2YXIgYWZ0ZXJfZmllbGQsIGJlZm9yZV9maWVsZCwgcHJlX2ZpZWxkcywgcHJlX3dpZGVfZmllbGRzLCB0ZF9jb2xzcGFuLCB0cl9lbmQsIHRyX3N0YXJ0O1xuICAgICAgICBmaWVsZC50cl9zdGFydCA9IFwiXCI7XG4gICAgICAgIGZpZWxkLnRyX2VuZCA9IFwiXCI7XG4gICAgICAgIHRkX2NvbHNwYW4gPSAxO1xuICAgICAgICBpZiAoKHR5cGVvZiBDb3JlRm9ybSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBDb3JlRm9ybSAhPT0gbnVsbCA/IENvcmVGb3JtLnBhZ2VUaXRsZUZpZWxkTmFtZSA6IHZvaWQgMCkgPT09IGZpZWxkLmNvZGUpIHtcbiAgICAgICAgICBmaWVsZC5pc193aWRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGQuZm9ybXVsYSAmJiBmaWVsZC50eXBlICE9PSAnb2RhdGEnKSB7XG4gICAgICAgICAgZmllbGQucGVybWlzc2lvbiA9IFwicmVhZG9ubHlcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdzZWN0aW9uJyB8fCBmaWVsZC50eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgICAgICBmaWVsZC50ZF9jb2xzcGFuID0gNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmllbGQudGRfY29sc3BhbiA9IDM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgZmllbGQudHJfc3RhcnQgPSBcIjx0cj5cIjtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZC50cl9lbmQgPSBcIjwvdHI+XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZV9maWVsZHMgPSBmaWVsZHMuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICAgIHByZV93aWRlX2ZpZWxkcyA9IHByZV9maWVsZHMuZmlsdGVyUHJvcGVydHkoXCJpc193aWRlXCIsIHRydWUpO1xuICAgICAgICAgIHRyX3N0YXJ0ID0gXCJcIjtcbiAgICAgICAgICB0cl9lbmQgPSBcIlwiO1xuICAgICAgICAgIGJlZm9yZV9maWVsZCA9IG51bGw7XG4gICAgICAgICAgYWZ0ZXJfZmllbGQgPSBudWxsO1xuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGJlZm9yZV9maWVsZCA9IGZpZWxkc1tpbmRleCAtIDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5kZXggPCBmaWVsZHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgYWZ0ZXJfZmllbGQgPSBmaWVsZHNbaW5kZXggKyAxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdzZWN0aW9uJyB8fCBmaWVsZC50eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgICAgICB0ZF9jb2xzcGFuID0gNDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLmlzX3dpZGUpIHtcbiAgICAgICAgICAgIHRkX2NvbHNwYW4gPSAzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYmVmb3JlX2ZpZWxkICYmIGFmdGVyX2ZpZWxkICYmIGJlZm9yZV9maWVsZC5pc193aWRlICYmIGFmdGVyX2ZpZWxkLmlzX3dpZGUpIHtcbiAgICAgICAgICAgICAgZmllbGQuaXNfd2lkZSA9IHRydWU7XG4gICAgICAgICAgICAgIHRkX2NvbHNwYW4gPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiA9PT0gMCAmJiBhZnRlcl9maWVsZCAmJiBhZnRlcl9maWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICAgIGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xuICAgICAgICAgICAgICB0ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT09IDAgJiYgYWZ0ZXJfZmllbGQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZmllbGQuaXNfd2lkZSA9IHRydWU7XG4gICAgICAgICAgICAgIHRkX2NvbHNwYW4gPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmaWVsZC50ZF9jb2xzcGFuID0gdGRfY29sc3BhbjtcbiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHRyX3N0YXJ0ID0gXCI8dHI+XCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICgocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT09IDAgfHwgZmllbGQuaXNfd2lkZSkge1xuICAgICAgICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgICAgICAgIHRyX3N0YXJ0ID0gXCI8dHIgY2xhc3MgPSBcXFwidHItY2hpbGQtdGFibGVcXFwiPlwiO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyX3N0YXJ0ID0gXCI8dHI+XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZmllbGQudHJfc3RhcnQgPSB0cl9zdGFydDtcbiAgICAgICAgICBpZiAoaW5kZXggKyAxID09PSBmaWVsZHMubGVuZ3RoIHx8IGZpZWxkLnR5cGUgPT09ICdzZWN0aW9uJyB8fCBmaWVsZC50eXBlID09PSAndGFibGUnIHx8IGZpZWxkLmlzX3dpZGUpIHtcbiAgICAgICAgICAgIHRyX2VuZCA9IFwiPC90cj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiAhPT0gMCkge1xuICAgICAgICAgICAgdHJfZW5kID0gXCI8L3RyPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmllbGQudHJfZW5kID0gdHJfZW5kO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgfVxuICB9LFxuICBzb3J0X2FwcHJvdmU6IGZ1bmN0aW9uKGFwcHJvdmVzLCBvcmRlcikge1xuICAgIGlmICghYXBwcm92ZXMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCFhcHByb3ZlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcmRlciA9PT0gJ2Rlc2MnKSB7XG4gICAgICAgIGFwcHJvdmVzLnNvcnQoZnVuY3Rpb24ocDEsIHAyKSB7XG4gICAgICAgICAgdmFyIF9wMSwgX3AyO1xuICAgICAgICAgIF9wMSA9IDA7XG4gICAgICAgICAgX3AyID0gMDtcbiAgICAgICAgICBpZiAocDEuZmluaXNoX2RhdGUpIHtcbiAgICAgICAgICAgIF9wMSA9IHAxLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHAyLmZpbmlzaF9kYXRlKSB7XG4gICAgICAgICAgICBfcDIgPSBwMi5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfcDIgLSBfcDE7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwcm92ZXMuc29ydChmdW5jdGlvbihwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgX3AxLCBfcDI7XG4gICAgICAgICAgX3AxID0gMDtcbiAgICAgICAgICBfcDIgPSAwO1xuICAgICAgICAgIGlmIChwMS5maW5pc2hfZGF0ZSkge1xuICAgICAgICAgICAgX3AxID0gcDEuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocDIuZmluaXNoX2RhdGUpIHtcbiAgICAgICAgICAgIF9wMiA9IHAyLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9wMSAtIF9wMjtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcHByb3ZlcztcbiAgfSxcbiAgX3Q6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBUQVBpMThuLl9fKGtleSk7XG4gIH0sXG4gIGdldEZpZWxkOiBmdW5jdGlvbihjb2RlKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uO1xuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIHJldHVybiBmb3JtX3ZlcnNpb24uZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpO1xuICAgIH1cbiAgfSxcbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uLCBpbnN0YW5jZSwgbG9jYWxlLCB1dGNPZmZzZXQsIHZhbHVlcztcbiAgICBpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZTtcbiAgICBmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uO1xuICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGU7XG4gICAgdXRjT2Zmc2V0ID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnV0Y09mZnNldDtcbiAgICB2YWx1ZXMgPSBpbnN0YW5jZS52YWx1ZXMgfHwge307XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgdmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xuICAgIH1cbiAgICByZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFZhbHVlKHZhbHVlc1tjb2RlXSwgZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKSwgbG9jYWxlLCB1dGNPZmZzZXQpO1xuICB9LFxuICBnZXRMYWJlbDogZnVuY3Rpb24oY29kZSkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbjtcbiAgICByZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsKGZvcm1fdmVyc2lvbi5maWVsZHMsIGNvZGUpO1xuICB9LFxuICBnZXRDZkNsYXNzOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIGlmICgoZmllbGQgIT0gbnVsbCA/IGZpZWxkLnR5cGUgOiB2b2lkIDApID09PSBcImlucHV0XCIgJiYgKGZpZWxkICE9IG51bGwgPyBmaWVsZC5pc190ZXh0YXJlYSA6IHZvaWQgMCkpIHtcbiAgICAgIHJldHVybiBcImNmVGV4dGFyZWFcIjtcbiAgICB9XG4gIH0sXG4gIGdldFRhYmxlVGhlYWQ6IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgcmV0dXJuIFN0ZWVkb3NUYWJsZS5nZXRUaGVhZChmaWVsZCwgZmFsc2UpO1xuICB9LFxuICBnZXRUYWJsZUJvZHk6IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgdmFyIGluc3RhbmNlLCB0YWJsZVZhbHVlLCB2YWx1ZXM7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgaW5zdGFuY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuaW5zdGFuY2U7XG4gICAgICB2YWx1ZXMgPSBpbnN0YW5jZS52YWx1ZXMgfHwge307XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgICB9XG4gICAgdGFibGVWYWx1ZSA9IHZhbHVlc1tmaWVsZC5jb2RlXTtcbiAgICByZXR1cm4gU3RlZWRvc1RhYmxlLmdldFRib2R5KGZpZWxkLnNmaWVsZHMuZ2V0UHJvcGVydHkoXCJjb2RlXCIpLCBmaWVsZCwgdGFibGVWYWx1ZSwgZmFsc2UpO1xuICB9LFxuICBzaG93TGFiZWw6IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgdmFyIHRlbXBsYXRlRGF0YTtcbiAgICB0ZW1wbGF0ZURhdGEgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGE7XG4gICAgaWYgKHRlbXBsYXRlRGF0YS5sYWJlbCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGlzT3BpbmlvbkZpZWxkOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkLmZvcm11bGEpO1xuICB9LFxuICBpc09waW5pb25GaWVsZF9mcm9tX3N0cmluZzogZnVuY3Rpb24oZmllbGRfZm9ybXVsYSkge1xuICAgIHJldHVybiBJbnN0YW5jZVNpZ25UZXh0LmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpO1xuICB9LFxuICBpbmNsdWRlc09waW5pb25GaWVsZDogZnVuY3Rpb24oZm9ybSwgZm9ybV92ZXJzaW9uKSB7XG4gICAgdmFyIGZpZWxkX2Zvcm11bGFzLCBmaWVsZHMsIHJlZjtcbiAgICBmaWVsZF9mb3JtdWxhcyA9IG5ldyBBcnJheSgpO1xuICAgIGZpZWxkcyA9ICgocmVmID0gZGIuZm9ybV92ZXJzaW9ucy5maW5kT25lKHtcbiAgICAgIF9pZDogZm9ybV92ZXJzaW9uLFxuICAgICAgZm9ybTogZm9ybVxuICAgIH0pKSAhPSBudWxsID8gcmVmLmZpZWxkcyA6IHZvaWQgMCkgfHwgW107XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgICAgdmFyIHJlZjE7XG4gICAgICBpZiAoZi50eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnaWdub3JlIG9waW5pb24gZmllbGQgaW4gdGFibGUnKTtcbiAgICAgIH0gZWxzZSBpZiAoZi50eXBlID09PSAnc2VjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGYgIT0gbnVsbCA/IChyZWYxID0gZi5maWVsZHMpICE9IG51bGwgPyByZWYxLmZvckVhY2goZnVuY3Rpb24oZjEpIHtcbiAgICAgICAgICByZXR1cm4gZmllbGRfZm9ybXVsYXMucHVzaChmMS5mb3JtdWxhKTtcbiAgICAgICAgfSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmllbGRfZm9ybXVsYXMucHVzaChmLmZvcm11bGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfLnNvbWUoZmllbGRfZm9ybXVsYXMsIGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEpIHtcbiAgICAgIHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpO1xuICAgIH0pO1xuICB9LFxuICBnZXRPcGluaW9uRmllbGRTdGVwc05hbWU6IGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEsIHRvcF9rZXl3b3Jkcykge1xuICAgIHZhciBmb28xLCBvcGluaW9uRmllbGRzO1xuICAgIG9waW5pb25GaWVsZHMgPSBuZXcgQXJyYXkoKTtcbiAgICBpZiAoSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKSkge1xuICAgICAgaWYgKGZpZWxkX2Zvcm11bGEpIHtcbiAgICAgICAgZm9vMSA9IGZpZWxkX2Zvcm11bGEuc3BsaXQoXCI7XCIpO1xuICAgICAgICBmb28xLmZvckVhY2goZnVuY3Rpb24oZm9vKSB7XG4gICAgICAgICAgdmFyIGpzb25fZm9ybXVsYSwgcmVmLCByZWYxLCBzMSwgc2Y7XG4gICAgICAgICAganNvbl9mb3JtdWxhID0ge307XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGpzb25fZm9ybXVsYSA9IGV2YWwoXCIoXCIgKyBmb28gKyBcIilcIik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgICAgICBqc29uX2Zvcm11bGEgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGpzb25fZm9ybXVsYSAhPSBudWxsID8ganNvbl9mb3JtdWxhLnlpamlhbmxhbiA6IHZvaWQgMCkge1xuICAgICAgICAgICAgc2YgPSB7fTtcbiAgICAgICAgICAgIHNmLnN0ZXBOYW1lID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5zdGVwO1xuICAgICAgICAgICAgc2YuaW1hZ2Vfc2lnbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uaW1hZ2Vfc2lnbiB8fCBmYWxzZTtcbiAgICAgICAgICAgIHNmLm9ubHlfY2Nfb3BpbmlvbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4ub25seV9jYyB8fCBmYWxzZTtcbiAgICAgICAgICAgIHNmLmRlZmF1bHRfZGVzY3JpcHRpb24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuW1wiZGVmYXVsdFwiXTtcbiAgICAgICAgICAgIHNmLm9ubHlfaGFuZGxlciA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4ub25seV9oYW5kbGVyO1xuICAgICAgICAgICAgc2YudG9wX2tleXdvcmRzID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi50b3Bfa2V5d29yZHMgfHwgdG9wX2tleXdvcmRzO1xuICAgICAgICAgICAgcmV0dXJuIG9waW5pb25GaWVsZHMucHVzaChzZik7XG4gICAgICAgICAgfSBlbHNlIGlmICgoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie3RyYWNlcy5cIikgOiB2b2lkIDApID4gLTEgfHwgKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA6IHZvaWQgMCkgPiAtMSkge1xuICAgICAgICAgICAgc2YgPSB7XG4gICAgICAgICAgICAgIG9ubHlfY2Nfb3BpbmlvbjogZmFsc2UsXG4gICAgICAgICAgICAgIGltYWdlX3NpZ246IGZhbHNlLFxuICAgICAgICAgICAgICB0b3Bfa2V5d29yZHM6IHRvcF9rZXl3b3Jkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChmb28uaW5kZXhPZihcIntzaWduYXR1cmUuXCIpID4gLTEpIHtcbiAgICAgICAgICAgICAgc2YuaW1hZ2Vfc2lnbiA9IHRydWU7XG4gICAgICAgICAgICAgIGZvbyA9IGZvby5yZXBsYWNlKFwie3NpZ25hdHVyZS5cIiwgXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzMSA9IGZvby5yZXBsYWNlKFwie1wiLCBcIlwiKS5yZXBsYWNlKFwifVwiLCBcIlwiKTtcbiAgICAgICAgICAgIGlmIChzMS5zcGxpdChcIi5cIikubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBzZi5zdGVwTmFtZSA9IHMxLnNwbGl0KFwiLlwiKVsxXTtcbiAgICAgICAgICAgICAgaWYgKG9waW5pb25GaWVsZHMuZmlsdGVyUHJvcGVydHkoXCJzdGVwTmFtZVwiLCBzZi5zdGVwTmFtZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICgocmVmID0gb3BpbmlvbkZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwic3RlcE5hbWVcIiwgc2Yuc3RlcE5hbWUpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICByZWYub25seV9jY19vcGluaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoKChyZWYxID0gczEuc3BsaXQoXCIuXCIpWzJdKSAhPSBudWxsID8gcmVmMS50b0xvY2FsZUxvd2VyQ2FzZSgpIDogdm9pZCAwKSA9PT0gJ2NjJykge1xuICAgICAgICAgICAgICAgICAgICBzZi5vbmx5X2NjX29waW5pb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9waW5pb25GaWVsZHMucHVzaChzZik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9waW5pb25GaWVsZHM7XG4gIH0sXG4gIHNob3dDQ09waW5pb246IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgdmFyIHJlZiwgcmVmMSwgcmVmMiwgczE7XG4gICAgaWYgKCgocmVmID0gZmllbGQuZm9ybXVsYSkgIT0gbnVsbCA/IHJlZi5pbmRleE9mKFwie3RyYWNlcy5cIikgOiB2b2lkIDApID4gLTEgfHwgKChyZWYxID0gZmllbGQuZm9ybXVsYSkgIT0gbnVsbCA/IHJlZjEuaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA6IHZvaWQgMCkgPiAtMSkge1xuICAgICAgczEgPSBmaWVsZC5mb3JtdWxhLnJlcGxhY2UoXCJ7c2lnbmF0dXJlLlwiLCBcIlwiKS5yZXBsYWNlKFwie1wiLCBcIlwiKS5yZXBsYWNlKFwifVwiLCBcIlwiKTtcbiAgICAgIGlmIChzMS5zcGxpdChcIi5cIikubGVuZ3RoID4gMikge1xuICAgICAgICBpZiAoKChyZWYyID0gczEuc3BsaXQoXCIuXCIpWzJdKSAhPSBudWxsID8gcmVmMi50b0xvY2FsZUxvd2VyQ2FzZSgpIDogdm9pZCAwKSA9PT0gJ2NjJykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgbWFya0Rvd25Ub0h0bWw6IGZ1bmN0aW9uKG1hcmtEb3duU3RyaW5nKSB7XG4gICAgdmFyIHJlbmRlcmVyO1xuICAgIGlmIChtYXJrRG93blN0cmluZykge1xuICAgICAgcmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcbiAgICAgIHJlbmRlcmVyLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIgKyBocmVmICsgXCInIHRpdGxlPSdcIiArIHRpdGxlICsgXCInPlwiICsgdGV4dCArIFwiPC9hPlwiO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge1xuICAgICAgICByZW5kZXJlcjogcmVuZGVyZXJcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sXG4gIGZfbGFiZWw6IGZ1bmN0aW9uKHRoYXQpIHtcbiAgICByZXR1cm4gdGhhdC5uYW1lIHx8IHRoYXQuY29kZTtcbiAgfVxufTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnN0ZWVkb3NfZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZvcm1fdmVyc2lvbjtcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc1NlY3Rpb24gPSBmdW5jdGlvbihjb2RlKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSB0aGlzLmZvcm1fdmVyc2lvbjtcbiAgICByZXR1cm4gZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKS50eXBlID09PSAnc2VjdGlvbic7XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZG9jX3ZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnN0YW5jZTtcbiAgICBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XG4gICAgcmV0dXJuIGluc3RhbmNlLnZhbHVlcztcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5hcHBsaWNhbnRDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGEsIGluc3RhbmNlO1xuICAgIGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZTtcbiAgICByZXR1cm4gZGF0YSA9IHtcbiAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgIGF0dHM6IHtcbiAgICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBpZDogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBcImNsYXNzXCI6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50J1xuICAgICAgfSxcbiAgICAgIHZhbHVlOiBpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZVxuICAgIH07XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5maWVsZHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IHRoaXMuZm9ybV92ZXJzaW9uO1xuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XG4gICAgfVxuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmZvcm1fdHlwZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJkaXNhYmxlZFwiO1xuICB9O1xuICBUZW1wbGF0ZS5yZWdpc3RlckhlbHBlcihcImFmRmllbGRMYWJlbFRleHRcIiwgZnVuY3Rpb24ob3ApIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uLCByZWY7XG4gICAgZm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbjtcbiAgICByZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsKGZvcm1fdmVyc2lvbi5maWVsZHMsIG9wICE9IG51bGwgPyAocmVmID0gb3AuaGFzaCkgIT0gbnVsbCA/IHJlZi5uYW1lIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgfSk7XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuX3QgPSBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgbG9jYWxlO1xuICAgIGxvY2FsZSA9IHRoaXMubG9jYWxlO1xuICAgIHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSk7XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5zX2F0dGFjaF9kb3dubG9hZF91cmwgPSBmdW5jdGlvbihfaWQsIGFic29sdXRlKSB7XG4gICAgaWYgKGFic29sdXRlKSB7XG4gICAgICByZXR1cm4gTWV0ZW9yLmFic29sdXRlVXJsKFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvXCIgKyBfaWQgKyBcIj9kb3dubG9hZD10cnVlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy9cIiArIF9pZCArIFwiP2Rvd25sb2FkPXRydWVcIjtcbiAgICB9XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMub3B0aW9ucyA9IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgdmFyIG9wdGlvbnMsIHJlZiwgcmV2O1xuICAgIG9wdGlvbnMgPSBmaWVsZCAhPSBudWxsID8gKHJlZiA9IGZpZWxkLm9wdGlvbnMpICE9IG51bGwgPyByZWYuc3BsaXQoXCJcXG5cIikgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgcmV2ID0gW107XG4gICAgaWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHJldi5wdXNoKHtcbiAgICAgICAgICBsYWJlbDogaXRlbSxcbiAgICAgICAgICB2YWx1ZTogaXRlbVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV2O1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmdldFBlcm1pc3Npb25zID0gZnVuY3Rpb24oY29kZSkge1xuICAgIHZhciByZWY7XG4gICAgaWYgKCEoKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5zdGFydFN0ZXBFZGl0YWJsZUZpZWxkcykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhjb2RlKSA6IHZvaWQgMCkpIHtcbiAgICAgIHJldHVybiBcInJlYWRvbmx5IGRpc2FibGVkXCI7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuICB9O1xufVxuXG5JbnN0YW5jZWZvcm1UZW1wbGF0ZS5ldmVudHMgPSB7XG4gICdjaGFuZ2UgLmZvcm0tY29udHJvbCwuY2hlY2tib3ggaW5wdXQsLmFmLXJhZGlvLWdyb3VwIGlucHV0LC5hZi1jaGVja2JveC1ncm91cCBpbnB1dCc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIEluc3RhbmNlTWFuYWdlci5pbnN0YW5jZWZvcm1DaGFuZ2VFdmVudChldmVudCk7XG4gIH0sXG4gICd0eXBlYWhlYWQ6Y2hhbmdlIC5mb3JtLWNvbnRyb2wnOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiBJbnN0YW5jZU1hbmFnZXIuaW5zdGFuY2Vmb3JtQ2hhbmdlRXZlbnQoZXZlbnQpO1xuICB9LFxuICAnY2xpY2sgLmNmVGV4dGFyZWEgYSc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm4gU3RlZWRvcy5vcGVuV2luZG93KGV2ZW50LnRhcmdldC5ocmVmKTtcbiAgfVxufTtcblxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUub25DcmVhdGVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb21waWxlZCwgZSwgaW5zdGFuY2UsIGluc3RhbmNlQ3VzdG9tVGVtcGxhdGUsIGluc3RhbmNlVmlldywgcmVuZGVyRnVuY3Rpb24sIHRlbXBsYXRlO1xuICBpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICBpZiAoIWluc3RhbmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRlbXBsYXRlID0gVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlKGluc3RhbmNlKTtcbiAgdHJ5IHtcbiAgICBjb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtcbiAgICAgIGlzQm9keTogdHJ1ZVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICBlID0gZXJyb3IxO1xuICAgIGNvbnNvbGUubG9nKFwiSW5zdGFuY2UgVGVtcGxhdGUgRXJyb3JcIiwgZSk7XG4gICAgY29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKFwiXCIsIHtcbiAgICAgIGlzQm9keTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJlbmRlckZ1bmN0aW9uID0gZXZhbChjb21waWxlZCk7XG4gIGluc3RhbmNlVmlldyA9IG5ldyBCbGF6ZS5WaWV3KFwiY3VzdG9tX2luc3RhbmNlX3RlbXBsYXRlXCIsIHJlbmRlckZ1bmN0aW9uKTtcbiAgaW5zdGFuY2VDdXN0b21UZW1wbGF0ZSA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShpbnN0YW5jZVZpZXcubmFtZSwgcmVuZGVyRnVuY3Rpb24pO1xuICBUZW1wbGF0ZS5pbnN0YW5jZV9jdXN0b21fdGVtcGxhdGUgPSBpbnN0YW5jZUN1c3RvbVRlbXBsYXRlO1xuICByZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlLmhlbHBlcnMoSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycyk7XG59O1xuXG5JbnN0YW5jZWZvcm1UZW1wbGF0ZS5vblJlbmRlcmVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyZW50QXBwcm92ZSwgY3VycmVudFN0ZXAsIGZvcm1fdmVyc2lvbiwgZm9ybXVsYV9maWVsZHMsIGluc3RhbmNlLCBpbnN0YW5jZU51bWJlckZpZWxkcywganVkZ2UsIHJlZjtcbiAgaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgaWYgKCFpbnN0YW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoKHJlZiA9ICQoXCJpbnB1dFtuYW1lPSdpbnNfYXBwbGljYW50J11cIilbMF0pICE9IG51bGwpIHtcbiAgICByZWYuZGF0YXNldC52YWx1ZXMgPSBpbnN0YW5jZS5hcHBsaWNhbnQ7XG4gIH1cbiAgJChcImlucHV0W25hbWU9J2luc19hcHBsaWNhbnQnXVwiKS52YWwoaW5zdGFuY2UuYXBwbGljYW50X25hbWUpO1xuICBBcHByb3ZlTWFuYWdlci5lcnJvciA9IHtcbiAgICBuZXh0U3RlcHM6ICcnLFxuICAgIG5leHRTdGVwVXNlcnM6ICcnXG4gIH07XG4gIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94JyB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2RyYWZ0Jykge1xuICAgIEluc3RhbmNlRXZlbnQuaW5pdEV2ZW50cyhpbnN0YW5jZS5mbG93KTtcbiAgfVxuICBpZiAoIUFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKSkge1xuICAgIGN1cnJlbnRBcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKCk7XG4gICAgaW5zdGFuY2VOdW1iZXJGaWVsZHMgPSAkKFwiW2RhdGEtZm9ybXVsYV1cIiwgJChcIiNpbnN0YW5jZWZvcm1cIikpO1xuICAgIGluc3RhbmNlTnVtYmVyRmllbGRzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWxlbWVudCwgc2NoZW1hS2V5O1xuICAgICAgc2NoZW1hS2V5ID0gdGhpcy5kYXRhc2V0LnNjaGVtYUtleTtcbiAgICAgIGVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgaWYgKCEkKHRoaXMpLnZhbCgpICYmIHNjaGVtYUtleSAmJiBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIikpIHtcbiAgICAgICAgcmV0dXJuIE1ldGVvci5jYWxsKCdnZXRJbnN0YW5jZVZhbHVlcycsIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSwgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgIHZhciBrZXksIHJlZjE7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB0b2FzdHIuZXJyb3IoZXJyb3IucmVhc29uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFyZXN1bHRbc2NoZW1hS2V5XSkge1xuICAgICAgICAgICAga2V5ID0gKHJlZjEgPSBlbGVtZW50LmRhdGEoXCJmb3JtdWxhXCIpKSAhPSBudWxsID8gcmVmMS5yZXBsYWNlKFwiYXV0b19udW1iZXIoXCIsIFwiXCIpLnJlcGxhY2UoXCIpXCIsIFwiXCIpIDogdm9pZCAwO1xuICAgICAgICAgICAga2V5ID0ga2V5LnJlcGxhY2UoL1xcXCIvZywgXCJcIikucmVwbGFjZSgvXFwnL2csIFwiXCIpO1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKFwie1wiKSA+IC0xKSB7XG4gICAgICAgICAgICAgIGtleSA9IGtleS5yZXBsYWNlKFwie1wiLCBcIlwiKS5yZXBsYWNlKFwifVwiLCBcIlwiKTtcbiAgICAgICAgICAgICAga2V5ID0ga2V5LnRyaW0oKTtcbiAgICAgICAgICAgICAga2V5ID0gQXV0b0Zvcm0uZ2V0RmllbGRWYWx1ZShrZXksICdpbnN0YW5jZWZvcm0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBJbnN0YW5jZU51bWJlclJ1bGVzLmluc3RhbmNlTnVtYmVyQnVpbGRlcihlbGVtZW50LCBrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAhPSBudWxsID8gZWxlbWVudC52YWwocmVzdWx0W3NjaGVtYUtleV0pLnRyaWdnZXIoXCJjaGFuZ2VcIikgOiB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBqdWRnZSA9IGN1cnJlbnRBcHByb3ZlLmp1ZGdlO1xuICAgIGN1cnJlbnRTdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICBmb3JtdWxhX2ZpZWxkcyA9IEZvcm1fZm9ybXVsYS5nZXRGb3JtdWxhRmllbGRWYXJpYWJsZShcIkZvcm1fZm9ybXVsYS5maWVsZF92YWx1ZXNcIiwgZm9ybV92ZXJzaW9uLmZpZWxkcyk7XG4gICAgRm9ybV9mb3JtdWxhLnJ1bihcIlwiLCBcIlwiLCBmb3JtdWxhX2ZpZWxkcywgQXV0b0Zvcm0uZ2V0Rm9ybVZhbHVlcyhcImluc3RhbmNlZm9ybVwiKS5pbnNlcnREb2MsIGZvcm1fdmVyc2lvbi5maWVsZHMpO1xuICAgIHJldHVybiBTZXNzaW9uLnNldChcImluc3RhbmNlX2Zvcm1fdmFsdWVzXCIsIHtcbiAgICAgIGluc3RhbmNlSWQ6IGluc3RhbmNlLl9pZCxcbiAgICAgIHZhbHVlczogQXV0b0Zvcm0uZ2V0Rm9ybVZhbHVlcyhcImluc3RhbmNlZm9ybVwiKS5pbnNlcnREb2NcbiAgICB9KTtcbiAgfVxufTtcbiIsIkluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMgPSB7XHJcblxyXG5cdHNob3dNYWluVGl0bGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkud29ya2Zsb3dNYWluQXR0YWNoVGl0bGUuZ2V0KCk7XHJcblx0fSxcclxuXHRlbmFibGVkX2FkZF9tYWluX2F0dGFjaG1lbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgKCFpbnMpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdGlmIChTZXNzaW9uICYmIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSlcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0aWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpICE9IFwiZHJhZnRcIiAmJiBTZXNzaW9uLmdldChcImJveFwiKSAhPSBcImluYm94XCIpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g5bey57uP57uT5p2f55qE5Y2V5a2Q5LiN6IO95pS56ZmE5Lu2XHJcblx0XHRpZiAoaW5zLnN0YXRlID09IFwiY29tcGxldGVkXCIpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xyXG5cclxuXHRcdGlmICghY3VycmVudF9zdGVwKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0Ly8g5YiG5Y+R55qE5q2j5paH5oiW6ICF6ZmE5Lu25LiN5pi+56S66L2s5Li6cGRm5oyJ6ZKuXHJcblx0XHQvLyDlpoLmnpzmnInmraPmlofmnYPpmZDliJnkuLrmraPmlofvvIzlkKbliJnliIblj5HkuLrpmYTku7ZcclxuXHRcdC8vIOWIhuWPkeeahOmZhOS7tuS4jeWFgeiuuOS/ruaUuSDliKDpmaQg5paw5aKe54mI5pysXHJcblx0XHR2YXIgbWFpbl9hdHRhY2hfY291bnQgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnMuX2lkLFxyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxyXG5cdFx0fSkuY291bnQoKTtcclxuXHJcblx0XHR2YXIgZGlzdHJpYnV0ZV9tYWluX2F0dGFjaF9jb3VudCA9IDA7XHJcblxyXG5cdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcclxuXHRcdFx0dmFyIHN0YXJ0X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0U3RhcnRTdGVwKCk7XHJcblx0XHRcdGlmIChzdGFydF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoKSB7XHJcblx0XHRcdFx0dmFyIGRpc3RyaWJ1dGVfbWFpbl9hdHRhY2hfY291bnQgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzogaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSxcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxyXG5cdFx0XHRcdH0pLmNvdW50KCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoY3VycmVudF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoID09IHRydWUgJiYgbWFpbl9hdHRhY2hfY291bnQgPCAxICYmIGRpc3RyaWJ1dGVfbWFpbl9hdHRhY2hfY291bnQgPCAxKSB7XHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g5q2j5paH5pyA5aSa5Y+q6IO95pyJ5LiA5LiqXHJcblx0XHRpZiAobWFpbl9hdHRhY2hfY291bnQgPj0gMSB8fCBkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50ID49IDEpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOW8gOWni+iKgueCueW5tuS4lOiuvue9ruS6huWPr+S7peS4iuS8oOato+aWh+aJjeaYvuekuuS4iuS8oOato+aWh+eahOaMiemSrlxyXG5cdFx0dmFyIGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xyXG5cdFx0aWYgKGN1cnJlbnRfc3RlcCAmJiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlID09IFwic3RhcnRcIiAmJiBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggPT0gdHJ1ZSlcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHR9LFxyXG5cclxuXHRlbmFibGVkX2VkaXRfbm9ybWFsX2F0dGFjaG1lbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgKCFpbnMpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdGlmIChTZXNzaW9uICYmIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSlcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0dmFyIGZsb3cgPSBXb3JrZmxvd01hbmFnZXIuZ2V0RmxvdyhpbnMuZmxvdyk7XHJcblx0XHRpZiAoIWZsb3cpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHJcblx0XHQvLyDliIblj5HlkI7nmoQg6ZmE5Lu277yM5LiN5Y+v5Lul57yW6L6RL+WIoOmZpO+8jOS5n+S4jeiuqeS4iuS8oOaWsOeahOmZhOS7tiwg5rWB56iL5YiX6KGo77ya5re75Yqg5bGe5oCnIOKAmOiiq+WIhuWPkeWQjuaYr+WQpuWFgeiuuOS4iuS8oOmZhOS7tuKAmSAjMTgzN1xyXG5cdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UgJiYgIWZsb3cudXBsb2FkX2FmdGVyX2JlaW5nX2Rpc3RyaWJ1dGVkKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgIT0gXCJkcmFmdFwiICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9IFwiaW5ib3hcIikge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH1cclxuXHJcblx0XHQvLyDlt7Lnu4/nu5PmnZ/nmoTljZXlrZDkuI3og73mlLnpmYTku7ZcclxuXHRcdGlmIChpbnMuc3RhdGUgPT0gXCJjb21wbGV0ZWRcIikge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoSW5zdGFuY2VNYW5hZ2VyLmlzQ0MoaW5zKSkge1xyXG5cdFx0XHR2YXIgc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDQ1N0ZXAoKTtcclxuXHRcdFx0aWYgKHN0ZXAgJiYgKHN0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PSB0cnVlIHx8IHN0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PSB1bmRlZmluZWQpKVxyXG5cdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgY3VycmVudF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XHJcblx0XHRcdGlmIChjdXJyZW50X3N0ZXAgJiYgKGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHRydWUgfHwgY3VycmVudF9zdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdW5kZWZpbmVkKSlcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZVxyXG5cdH0sXHJcblxyXG5cdG1haW5fYXR0YWNobWVudDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRpZiAoIWlucylcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0dmFyIHN0YXJ0X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0U3RhcnRTdGVwKCk7XHJcblxyXG5cdFx0Ly8g5aaC5p6c5piv6KKr5YiG5Y+R55qE55Sz6K+35Y2V5bm25LiU5pyJ5L+u5pS55q2j5paH55qE5p2D6ZmQ77yM5YiZ5LyY5YWI5pi+56S65Y6f55Sz6K+35Y2V5paH5Lu2XHJcblx0XHR2YXIgbWFpbl9hdHRhY2ggPSBudWxsO1xyXG5cdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UgJiYgc3RhcnRfc3RlcC5jYW5fZWRpdF9tYWluX2F0dGFjaCA9PSB0cnVlKSB7XHJcblx0XHRcdG1haW5fYXR0YWNoID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKHtcclxuXHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlLFxyXG5cdFx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFtYWluX2F0dGFjaCkge1xyXG5cdFx0XHRtYWluX2F0dGFjaCA9IGNmcy5pbnN0YW5jZXMuZmluZE9uZSh7XHJcblx0XHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzogaW5zLl9pZCxcclxuXHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYWluX2F0dGFjaDtcclxuXHR9LFxyXG5cclxuXHRub3JtYWxfYXR0YWNobWVudHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgKCFpbnMpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdHZhciBzZWxlY3RvciA9IHtcclxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHtcclxuXHRcdFx0XHQkbmU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIGF0dHMgPSBuZXcgQXJyYXkoKTtcclxuXHJcblx0XHRpZiAoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSkge1xyXG5cdFx0XHQvLyDlpoLmnpzmmK/ooqvliIblj5HnmoTnlLPor7fljZXvvIzliJnmmL7npLrljp/nlLPor7fljZXmlofku7YsIOWmguaenOmAieaLqeS6huWwhuWOn+ihqOWNleWtmOWCqOS4uumZhOS7tuS5n+imgeaYvuekuiwg5ZCM5pe25Lmf6KaB5pi+56S65paw5LiK5Lyg55qE6ZmE5Lu2XHJcblx0XHRcdHZhciBkZmlzID0gXy5jbG9uZShpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XHJcblx0XHRcdGRmaXMucHVzaChpbnMuX2lkKTtcclxuXHRcdFx0c2VsZWN0b3JbJ21ldGFkYXRhLmluc3RhbmNlJ10gPSB7XHJcblx0XHRcdFx0JGluOiBkZmlzXHJcblx0XHRcdH07XHJcblxyXG5cclxuXHRcdFx0c2VsZWN0b3JbXCIkb3JcIl0gPSBbe1xyXG5cdFx0XHRcdFwibWV0YWRhdGEuaW5zdGFuY2VcIjogaW5zLl9pZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0XCJtZXRhZGF0YS5pbnN0YW5jZVwiOiB7XHJcblx0XHRcdFx0XHQkaW46IGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjoge1xyXG5cdFx0XHRcdFx0JG5lOiB0cnVlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XVxyXG5cclxuXHRcdFx0Ly8g5aaC5p6c5Y6f55Sz6K+35Y2V5pyJ5q2j5paH5L2G5piv5YiG5Y+R5ZCO5rKh5pyJ5q2j5paH5p2D6ZmQ77yM5YiZ5Y6f55Sz6K+35Y2V5q2j5paH5pi+56S65Zyo6ZmE5Lu25qCPXHJcblx0XHRcdHZhciBzdGFydF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldFN0YXJ0U3RlcCgpO1xyXG5cdFx0XHRpZiAoc3RhcnRfc3RlcCAmJiBzdGFydF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoICE9IHRydWUpIHtcclxuXHRcdFx0XHR2YXIgZGlzdHJpYnV0ZV9tYWluID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKHtcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcclxuXHRcdFx0XHRcdFx0JGluOiBpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlc1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZSxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRpZiAoZGlzdHJpYnV0ZV9tYWluKSB7XHJcblx0XHRcdFx0XHR2YXIgZmlyc3RWZXJzaW9uTWFpbiA9IGNmcy5pbnN0YW5jZXMuZmluZE9uZShkaXN0cmlidXRlX21haW4ubWV0YWRhdGEucGFyZW50KTtcclxuXHRcdFx0XHRcdGRpc3RyaWJ1dGVfbWFpbi5hdHRhY2htZW50VXBsb2FkZWRBdCA9IGZpcnN0VmVyc2lvbk1haW4gPyBmaXJzdFZlcnNpb25NYWluLnVwbG9hZGVkQXQgOiBkaXN0cmlidXRlX21haW4udXBsb2FkZWRBdDtcclxuXHRcdFx0XHRcdGF0dHMucHVzaChkaXN0cmlidXRlX21haW4pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c2VsZWN0b3JbJ21ldGFkYXRhLmluc3RhbmNlJ10gPSBpbnMuX2lkO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNmcy5pbnN0YW5jZXMuZmluZChzZWxlY3RvcikuZm9yRWFjaChmdW5jdGlvbihjKSB7XHJcblx0XHRcdHZhciBmaXJzdFZlcnNpb24gPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoYy5tZXRhZGF0YS5wYXJlbnQpO1xyXG5cdFx0XHRjLmF0dGFjaG1lbnRVcGxvYWRlZEF0ID0gZmlyc3RWZXJzaW9uID8gZmlyc3RWZXJzaW9uLnVwbG9hZGVkQXQgOiBjLnVwbG9hZGVkQXQ7XHJcblx0XHRcdGF0dHMucHVzaChjKTtcclxuXHRcdH0pXHJcblxyXG5cdFx0cmV0dXJuIF8uc29ydEJ5KGF0dHMsICdhdHRhY2htZW50VXBsb2FkZWRBdCcpO1xyXG5cdH0sXHJcblxyXG5cdHNob3dBdHRhY2htZW50czogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRpZiAoIWlucylcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdC8vIOWmguaenOaYr+iiq+WIhuWPkeeahOeUs+ivt+WNle+8jOWImeaYvuekuuWOn+eUs+ivt+WNleaWh+S7tiDlkozliIblj5HlkI7nlLPor7fljZXmlofku7ZcclxuXHRcdHZhciBpbnN0YW5jZUlkcyA9IF8uY2xvbmUoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMpIHx8IFtdO1xyXG5cdFx0aW5zdGFuY2VJZHMucHVzaChpbnMuX2lkKTtcclxuXHRcdHZhciBhdHRhY2htZW50c19jb3VudCA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XHJcblx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcclxuXHRcdFx0XHQkaW46IGluc3RhbmNlSWRzXHJcblx0XHRcdH0sXHJcblx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZVxyXG5cdFx0fSkuY291bnQoKTtcclxuXHJcblx0XHRpZiAoU2Vzc2lvbiAmJiBTZXNzaW9uLmdldChcImluc3RhbmNlUHJpbnRcIikgJiYgYXR0YWNobWVudHNfY291bnQgPCAxKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gXCJkcmFmdFwiIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09IFwiaW5ib3hcIiB8fCBhdHRhY2htZW50c19jb3VudCA+IDApXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSxcclxuXHJcblx0X3Q6IGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLl90ID0gZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpXHJcblx0fVxyXG5cdEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMuZW5hYmxlZF9hZGRfbWFpbl9hdHRhY2htZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHR9O1xyXG5cdEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMuZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHR9O1xyXG5cclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLm1haW5fYXR0YWNobWVudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xyXG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jb21wYWN0KFtpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UsIGluc3RhbmNlLl9pZF0pO1xyXG5cdFx0dmFyIGF0dGFjaG1lbnQgPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoe1xyXG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XHJcblx0XHRcdFx0JGluOiBpbnN0YW5jZUlkc1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIGF0dGFjaG1lbnQ7XHJcblx0fTtcclxuXHJcblx0SW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycy5ub3JtYWxfYXR0YWNobWVudHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzdGVlZG9zRGF0YSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YVxyXG5cdFx0dmFyIGluc3RhbmNlID0gc3RlZWRvc0RhdGEuaW5zdGFuY2U7XHJcblx0XHR2YXIgaW5zdGFuY2VJZHMgPSBfLmNsb25lKGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMpIHx8IFtdO1xyXG5cdFx0aW5zdGFuY2VJZHMucHVzaChpbnN0YW5jZS5faWQpO1xyXG5cdFx0dmFyIGF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcclxuXHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzoge1xyXG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcclxuXHRcdFx0fSxcclxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHtcclxuXHRcdFx0XHQkbmU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0JG9yOiBbe1xyXG5cdFx0XHRcdCdtZXRhZGF0YS5pc19wcml2YXRlJzoge1xyXG5cdFx0XHRcdFx0JG5lOiB0cnVlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0J21ldGFkYXRhLmlzX3ByaXZhdGUnOiB0cnVlLFxyXG5cdFx0XHRcdFwibWV0YWRhdGEub3duZXJcIjogc3RlZWRvc0RhdGEudXNlcklkXHJcblx0XHRcdH1dXHJcblx0XHR9KS5mZXRjaCgpO1xyXG5cclxuXHRcdHJldHVybiBhdHRhY2htZW50cztcclxuXHR9O1xyXG5cclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLnNob3dBdHRhY2htZW50cyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xyXG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jbG9uZShpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzKSB8fCBbXTtcclxuXHRcdGluc3RhbmNlSWRzLnB1c2goaW5zdGFuY2UuX2lkKTtcclxuXHJcblx0XHR2YXIgYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XHJcblx0XHRcdFx0JGluOiBpbnN0YW5jZUlkc1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcclxuXHRcdH0pLmZldGNoKCk7XHJcblxyXG5cdFx0aWYgKGF0dGFjaG1lbnRzICYmIGF0dGFjaG1lbnRzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLnNob3dNYWluVGl0bGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZTtcclxuXHRcdHZhciBpbnN0YW5jZUlkcyA9IF8uY29tcGFjdChbaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlLCBpbnN0YW5jZS5faWRdKTtcclxuXHRcdHZhciBtYWluX2F0dGFjaF9jb3VudCA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XHJcblx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcclxuXHRcdFx0XHQkaW46IGluc3RhbmNlSWRzXHJcblx0XHRcdH0sXHJcblx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlXHJcblx0XHR9KS5jb3VudCgpO1xyXG5cclxuXHRcdHJldHVybiBtYWluX2F0dGFjaF9jb3VudCA+IDBcclxuXHR9XHJcbn1cclxuIiwiSW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzID1cclxuXHRzaG93OiAoc3RlcE5hbWUpLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRpZiBTZXNzaW9uLmdldCgnaW5zdGFuY2VQcmludCcpXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRcdGlmIEluc3RhbmNlTWFuYWdlci5pc0luYm94KClcclxuXHRcdFx0XHRteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKVxyXG5cdFx0XHRcdGlmIG15QXBwcm92ZVxyXG5cdFx0XHRcdFx0aW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdFx0XHRcdG15VHJhY2UgPSBpbnN0YW5jZT8udHJhY2VzPy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIG15QXBwcm92ZS50cmFjZSlcclxuXHRcdFx0XHRcdHJldHVybiBteVRyYWNlPy5uYW1lID09IHN0ZXBOYW1lXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0ZGVmYXVsdERlc2NyaXB0aW9uOiAoKS0+XHJcbiNcdFx0cmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uIHx8IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9kZWZhdWx0X29waW5pb25cIilcclxuXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvblxyXG5cclxuXHR0cmFjZXM6ICgpLT5cclxuXHRcdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKClcclxuXHJcblx0dHJhY2U6IChzdGVwTmFtZSwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduLCB0b3Bfa2V5d29yZHMpLT5cclxuXHRcdGluc3RhbmNlID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnN0YW5jZSgpXHJcblxyXG5cdFx0aXNfY29tcGxldGVkID0gaW5zdGFuY2U/LnN0YXRlID09IFwiY29tcGxldGVkXCJcclxuXHJcblx0XHRjb21wbGV0ZWRfZGF0ZSA9IGlmIGlzX2NvbXBsZXRlZCB0aGVuIF8ubGFzdChpbnN0YW5jZS50cmFjZXMpPy5maW5pc2hfZGF0ZT8uZ2V0VGltZSgpIGVsc2UgMFxyXG5cclxuXHRcdGlmIGlzX2NvbXBsZXRlZCAmJiBpbnN0YW5jZS5maW5pc2hfZGF0ZVxyXG5cdFx0XHRjb21wbGV0ZWRfZGF0ZSA9IGluc3RhbmNlLmZpbmlzaF9kYXRlPy5nZXRUaW1lKClcclxuXHJcblx0XHR0cmFjZXMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpXHJcblxyXG5cdFx0YXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tzdGVwTmFtZV0pXHJcblxyXG5cdFx0YXBwcm92ZV9zb3J0ID0gKGFwcHJvdmVzLCB0b3Bfa2V5d29yZHMpLT5cclxuXHJcbiPlr7lBcHByb3Zlc+aOkuW6j++8jCDmjInnhafmj5DkuqTml7bpl7TmjpLlgJLluo/vvIzlpoLmnpzmsqHmnInmj5DkuqTliJnmmL7npLrlnKjmnIDkuIrovrlcclxuXHRcdFx0YXBwcm92ZXNfc29ydGVkID0gXy5zb3J0QnkgYXBwcm92ZXMsIChhcHByb3ZlKS0+XHJcblx0XHRcdFx0cmV0dXJuIC0oYXBwcm92ZS5maW5pc2hfZGF0ZSB8fCBuZXcgRGF0ZSgpKS5nZXRUaW1lKClcclxuXHJcblx0XHRcdCPpgJrov4flhbPplK7lrZfmjpLluo9cclxuXHRcdFx0aWYgdG9wX2tleXdvcmRzXHJcblx0XHRcdFx0dG9wX2FwcHJvdmVzID0gbmV3IEFycmF5KClcclxuXHJcblx0XHRcdFx0dG9wX2tleXdvcmRzLnNwbGl0KFwiLFwiKS5mb3JFYWNoIChrZXkpIC0+XHJcblx0XHRcdFx0XHR0b3BfYXBwcm92ZXMgPSBfLnVuaW9uIHRvcF9hcHByb3ZlcywgXy5maWx0ZXIoYXBwcm92ZXNfc29ydGVkLCAoYXBwcm92ZSktPlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gYXBwcm92ZT8uaGFuZGxlcl9uYW1lPy5pbmRleE9mKGtleSkgPiAtMVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCMg5a+5572u6aG25oSP6KeB5oyJ54Wn5aSE55CG5LqL5Lu25o6S5YCS5bqPXHJcblx0XHRcdFx0dG9wX2FwcHJvdmVzID0gXy5zb3J0QnkgdG9wX2FwcHJvdmVzLCAodG9wX2FwcHJvdmUpLT5cclxuXHRcdFx0XHRcdHJldHVybiAtKHRvcF9hcHByb3ZlLmZpbmlzaF9kYXRlIHx8IG5ldyBEYXRlKCkpLmdldFRpbWUoKVxyXG5cclxuXHRcdFx0XHRhcHByb3Zlc19zb3J0ZWQgPSBfLnVuaW9uIHRvcF9hcHByb3ZlcywgYXBwcm92ZXNfc29ydGVkXHJcblx0XHRcdHJldHVybiBhcHByb3Zlc19zb3J0ZWQgfHwgW11cclxuXHJcblx0XHRhcHByb3ZlcyA9IF8uZmlsdGVyIGFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRyZXR1cm4gYS50eXBlIGlzbnQgXCJmb3J3YXJkXCIgYW5kIGEudHlwZSBpc250IFwiZGlzdHJpYnV0ZVwiIGFuZCBhLnR5cGUgaXNudCBcInRlcm1pbmF0ZWRcIlxyXG5cclxuXHRcdGlmIG9ubHlfY2Nfb3BpbmlvblxyXG5cdFx0XHRhcHByb3ZlcyA9IGFwcHJvdmVzPy5maWx0ZXJQcm9wZXJ0eShcInR5cGVcIiwgXCJjY1wiKVxyXG5cclxuXHRcdGFwcHJvdmVzX3NvcnRlZCA9IGFwcHJvdmVfc29ydChhcHByb3ZlcywgdG9wX2tleXdvcmRzKVxyXG5cclxuXHRcdGFwcHJvdmVzR3JvdXAgPSBfLmdyb3VwQnkoYXBwcm92ZXMsIFwiaGFuZGxlclwiKTtcclxuXHJcblx0XHRoYXNOZXh0ID0gKGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApIC0+XHJcblx0XHRcdGhhbmRsZXJBcHByb3ZlcyA9IGFwcHJvdmVzR3JvdXBbYXBwcm92ZS5oYW5kbGVyXVxyXG5cdFx0XHRyZXR1cm4gXy5pbmRleE9mKGhhbmRsZXJBcHByb3ZlcywgYXBwcm92ZSkgKyAxIDwgaGFuZGxlckFwcHJvdmVzLmxlbmd0aFxyXG5cclxuXHRcdGhhdmVEZXNjcmlwdGlvbkFwcHJvdmUgPSAoYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkgLT5cclxuXHRcdFx0aGFuZGxlckFwcHJvdmVzID0gYXBwcm92ZXNHcm91cFthcHByb3ZlLmhhbmRsZXJdXHJcblxyXG5cdFx0XHRkZXNjcmlwdGlvbkFwcHJvdmVzID0gXy5maWx0ZXIgaGFuZGxlckFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRcdGlmIGEuZGVzY3JpcHRpb25cclxuXHRcdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRpZiBkZXNjcmlwdGlvbkFwcHJvdmVzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cclxuXHJcblx0XHRhcHByb3Zlc19zb3J0ZWQuZm9yRWFjaCAoYXBwcm92ZSkgLT5cclxuI1x0XHRcdOaciei+k+WFpeaEj+ingSDmiJYg5pyA5paw5LiA5p2h5bm25LiU55So5oi35rKh5pyJ6L6T5YWl6L+H5oSP6KeBXHJcbiNcdFx0XHRpZiAhYXBwcm92ZS5pc19maW5pc2hlZCB8fCBhcHByb3ZlLmRlc2NyaXB0aW9uIHx8ICghaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSAmJiAhaGF2ZURlc2NyaXB0aW9uQXBwcm92ZShhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSlcclxuI1x0XHRcdGlmICFoYXNOZXh0KGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApXHJcblx0XHRcdGlmIGFwcHJvdmUuc2lnbl9zaG93ICE9IGZhbHNlICYmIChhcHByb3ZlLmRlc2NyaXB0aW9uIHx8ICghYXBwcm92ZS5kZXNjcmlwdGlvbiAmJiAhaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSkgKVxyXG5cdFx0XHRcdGlmIGFwcHJvdmUuanVkZ2UgaXNudCAndGVybWluYXRlZCdcclxuXHRcdFx0XHRcdGFwcHJvdmUuX2Rpc3BsYXkgPSB0cnVlXHJcblxyXG5cdFx0YXBwcm92ZXNfc29ydGVkID0gXy5maWx0ZXIgYXBwcm92ZXNfc29ydGVkLCAoYSkgLT5cclxuXHRcdFx0aWYgaXNfY29tcGxldGVkXHJcblx0XHRcdFx0cmV0dXJuIGEuX2Rpc3BsYXkgPT0gdHJ1ZSAmJiBhLmlzX2ZpbmlzaGVkICYmIGEuZmluaXNoX2RhdGU/LmdldFRpbWUoKSA8PSBjb21wbGV0ZWRfZGF0ZVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIGEuX2Rpc3BsYXkgPT0gdHJ1ZVxyXG5cclxuXHRcdHJldHVybiBhcHByb3Zlc19zb3J0ZWRcclxuXHJcblx0aW5jbHVkZTogKGEsIGIpIC0+XHJcblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlKGEsIGIpXHJcblxyXG5cdHVuZW1wdHk6ICh2YWwpLT5cclxuXHRcdHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnVuZW1wdHkodmFsKVxyXG5cclxuXHRmb3JtYXREYXRlOiAoZGF0ZSwgb3B0aW9ucyktPlxyXG5cdFx0aWYgIW9wdGlvbnNcclxuXHRcdFx0b3B0aW9ucyA9IHtcImZvcm1hdFwiOiBcIllZWVktTU0tRERcIn1cclxuXHJcblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtYXREYXRlKGRhdGUsIG9wdGlvbnMpXHJcblxyXG5cdGlzTXlBcHByb3ZlOiAoYXBwcm92ZSwgb25seV9jY19vcGluaW9uKSAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuXHRcdFx0Y3VycmVudEFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKVxyXG5cclxuXHRcdFx0aWYgIWFwcHJvdmU/Ll9pZFxyXG5cdFx0XHRcdGFwcHJvdmUgPSBjdXJyZW50QXBwcm92ZVxyXG5cclxuXHRcdFx0aWYgYXBwcm92ZS5faWQgPT0gY3VycmVudEFwcHJvdmU/Ll9pZCAmJiBjdXJyZW50QXBwcm92ZT8udHlwZSA9PSAnY2MnICYmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lXHJcblx0XHRcdFx0aWYgXy5pbmRleE9mKGN1cnJlbnRBcHByb3ZlPy5vcGluaW9uX2ZpZWxkc19jb2RlLCBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZSkgPiAtMVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRcdGlmICEoY3VycmVudEFwcHJvdmU/LnR5cGUgPT0gJ2NjJykgJiYgb25seV9jY19vcGluaW9uXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRpZiBjdXJyZW50QXBwcm92ZSAmJiBhcHByb3ZlLl9pZCA9PSBjdXJyZW50QXBwcm92ZS5faWRcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdG15QXBwcm92ZURlc2NyaXB0aW9uOiAoYXBwcm92ZUlkKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0cmV0dXJuIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMubXlBcHByb3ZlRGVzY3JpcHRpb24oYXBwcm92ZUlkKVxyXG5cclxuXHRub3c6ICgpLT5cclxuXHRcdHJldHVybiBuZXcgRGF0ZSgpO1xyXG5cclxuXHRpc1JlYWRPbmx5OiAoKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0cmV0dXJuIEFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdGlzT3Bpbmlvbk9mRmllbGQ6IChhcHByb3ZlKS0+XHJcblx0XHRpZiBhcHByb3ZlLnR5cGUgPT0gXCJjY1wiICYmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lXHJcblx0XHRcdGlmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lID09IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlXHJcblx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0bWFya0Rvd25Ub0h0bWw6IChtYXJrRG93blN0cmluZyktPlxyXG5cdFx0aWYgbWFya0Rvd25TdHJpbmdcclxuXHRcdFx0cmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcclxuXHRcdFx0cmVuZGVyZXIubGluayA9IChocmVmLCB0aXRsZSwgdGV4dCkgLT5cclxuXHRcdFx0XHRyZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nI3tocmVmfScgdGl0bGU9JyN7dGl0bGV9Jz4je3RleHR9PC9hPlwiXHJcblx0XHRcdHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge3JlbmRlcmVyOiByZW5kZXJlcn0pKVxyXG5cclxuXHRzdGVwczogKGZpZWxkX2Zvcm11bGEsIHN0ZXAsIG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbiktPlxyXG5cdFx0c3RlcHMgPSBbXVxyXG5cdFx0aWYgIXN0ZXBcclxuXHRcdFx0aWYgIWZpZWxkX2Zvcm11bGFcclxuXHRcdFx0XHRmaWVsZF9mb3JtdWxhID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKT8uZmllbGRzPy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCB0aGlzLm5hbWUpLmZvcm11bGFcclxuXHRcdFx0c3RlcHMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmdldE9waW5pb25GaWVsZFN0ZXBzTmFtZShmaWVsZF9mb3JtdWxhLCBUZW1wbGF0ZS5pbnN0YW5jZSgpPy5kYXRhLnRvcF9rZXl3b3JkcylcclxuXHRcdGVsc2VcclxuXHRcdFx0c3RlcHMgPSBbe3N0ZXBOYW1lOiBzdGVwLCBvbmx5X2NjX29waW5pb246IG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbjogaW1hZ2Vfc2lnbn1dXHJcblx0XHRyZXR1cm4gc3RlcHNcclxuXHJcblx0aW1hZ2VTaWduRGF0YTogKGhhbmRsZXIpIC0+XHJcblx0XHRyZXR1cm4ge3VzZXI6IGhhbmRsZXJ9XHJcblxyXG5cdHNob3dTaWduSW1hZ2U6IChoYW5kbGVyLCBpbWFnZV9zaWduKSAtPlxyXG5cdFx0c3BhY2VVc2VyU2lnbiA9IEltYWdlU2lnbi5oZWxwZXJzLnNwYWNlVXNlclNpZ24oaGFuZGxlcik7XHJcblxyXG5cdFx0aWYgc3BhY2VVc2VyU2lnbj8uc2lnbiAmJiBpbWFnZV9zaWduXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRnZXRMYXN0U2lnbkFwcHJvdmU6ICgpLT5cclxuXHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuXHRcdHJldHVybiBfLmxhc3QoVHJhY2VzTWFuYWdlci5nZXRIYW5kbGVyU2lnblNob3dBcHByb3ZlcyBpbnMsIE1ldGVvci51c2VySWQoKSlcclxuXHJcblxyXG5cdGxhc3RNeUFwcHJvdmVEZXNjcmlwdGlvbjogKCktPlxyXG5cdFx0dHJhY2VzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50cmFjZXMoKVxyXG5cdFx0Y3VycmVudFN0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcclxuXHRcdGFwcHJvdmVzID0gXy5jbG9uZSh0cmFjZXNbY3VycmVudFN0ZXAubmFtZV0pXHJcblxyXG5cdFx0YXBwcm92ZXMgPSBhcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgTWV0ZW9yLnVzZXJJZCgpKVxyXG5cclxuXHRcdGlmIGFwcHJvdmVzLmxlbmd0aCA+IDFcclxuXHRcdFx0cmV0dXJuIGFwcHJvdmVzW2FwcHJvdmVzLmxlbmd0aCAtIDJdPy5kZXNjcmlwdGlvblxyXG5cclxuXHRcdHJldHVybiBcIlwiO1xyXG5cclxuXHRzaG93QXBwcm92ZTogKGFwcHJvdmUpLT5cclxuXHRcdGlmIGFwcHJvdmU/LmlzX3JlYWRcclxuXHRcdFx0aWYgYXBwcm92ZS5pc19maW5pc2hlZFxyXG5cdFx0XHRcdHJldHVybiBbXCJhcHByb3ZlZFwiLCBcInJlamVjdGVkXCIsIFwic3VibWl0dGVkXCIsIFwicmVhZGVkXCJdLmluY2x1ZGVzKGFwcHJvdmUuanVkZ2UpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0anVkZ2VfZGVzY3JpcHRpb246IChqdWRnZSktPlxyXG5cdFx0cmV0dXJuIHQoanVkZ2UgKyBcIl9kZXNjcmlwdGlvblwiKVxyXG5cclxuXHRpc19hcHByb3ZlZDogKGp1ZGdlKS0+XHJcblx0XHRyZXR1cm4gXCJhcHByb3ZlZFwiID09IGp1ZGdlXHJcblxyXG5cdGlzX3JlamVjdGVkOiAoanVkZ2UpLT5cclxuXHRcdHJldHVybiBcInJlamVjdGVkXCIgPT0ganVkZ2VcclxuXHJcblx0aXNfcmVhZGVkOiAoanVkZ2UpLT5cclxuXHRcdHJldHVybiBbXCJhcHByb3ZlZFwiLCBcInJlamVjdGVkXCIsIFwic3VibWl0dGVkXCIsIFwicmVhZGVkXCJdLmluY2x1ZGVzKGp1ZGdlKVxyXG5cclxuXHRhZGRDbGFzczogKCktPlxyXG5cdFx0bmFtZSA9IFRlbXBsYXRlLmluc3RhbmNlKCk/LmRhdGE/Lm5hbWVcclxuXHRcdHNldFRpbWVvdXQgKCkgLT5cclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0ZWxlbWVudCA9ICQoXCIuYXV0b21hdGljLm9waW5pb24tZmllbGQtXCIgKyBuYW1lKVxyXG5cdFx0XHRcdGlmIGVsZW1lbnQubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0aWYgZWxlbWVudD8uaXMoXCJ0ZFwiKVxyXG5cdFx0XHRcdFx0XHRlbGVtZW50LmFkZENsYXNzKCdmaWVsZC1lZGl0YWJsZScpXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdCQoXCIuaW5zdGFuY2Utc2lnblwiLCBlbGVtZW50KS5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKVxyXG5cdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgZVxyXG5cdFx0LCAxXHJcblx0XHRyZXR1cm4gJydcclxuXHJcbmlmIE1ldGVvci5pc1NlcnZlclxyXG5cdEluc3RhbmNlU2lnblRleHQuaGVscGVycy5kZWZhdWx0RGVzY3JpcHRpb24gPSAtPlxyXG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0cmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uIHx8IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9kZWZhdWx0X29waW5pb25cIiwge30sIGxvY2FsZSkiLCJJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMgPSB7XG4gIHNob3c6IGZ1bmN0aW9uKHN0ZXBOYW1lKSB7XG4gICAgdmFyIGluc3RhbmNlLCBteUFwcHJvdmUsIG15VHJhY2UsIHJlZjtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoJ2luc3RhbmNlUHJpbnQnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoSW5zdGFuY2VNYW5hZ2VyLmlzSW5ib3goKSkge1xuICAgICAgICBteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKTtcbiAgICAgICAgaWYgKG15QXBwcm92ZSkge1xuICAgICAgICAgIGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgICAgbXlUcmFjZSA9IGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgbXlBcHByb3ZlLnRyYWNlKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gKG15VHJhY2UgIT0gbnVsbCA/IG15VHJhY2UubmFtZSA6IHZvaWQgMCkgPT09IHN0ZXBOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZGVmYXVsdERlc2NyaXB0aW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLmRlZmF1bHRfZGVzY3JpcHRpb247XG4gIH0sXG4gIHRyYWNlczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKCk7XG4gIH0sXG4gIHRyYWNlOiBmdW5jdGlvbihzdGVwTmFtZSwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduLCB0b3Bfa2V5d29yZHMpIHtcbiAgICB2YXIgYXBwcm92ZV9zb3J0LCBhcHByb3ZlcywgYXBwcm92ZXNHcm91cCwgYXBwcm92ZXNfc29ydGVkLCBjb21wbGV0ZWRfZGF0ZSwgaGFzTmV4dCwgaGF2ZURlc2NyaXB0aW9uQXBwcm92ZSwgaW5zdGFuY2UsIGlzX2NvbXBsZXRlZCwgcmVmLCByZWYxLCByZWYyLCB0cmFjZXM7XG4gICAgaW5zdGFuY2UgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc3RhbmNlKCk7XG4gICAgaXNfY29tcGxldGVkID0gKGluc3RhbmNlICE9IG51bGwgPyBpbnN0YW5jZS5zdGF0ZSA6IHZvaWQgMCkgPT09IFwiY29tcGxldGVkXCI7XG4gICAgY29tcGxldGVkX2RhdGUgPSBpc19jb21wbGV0ZWQgPyAocmVmID0gXy5sYXN0KGluc3RhbmNlLnRyYWNlcykpICE9IG51bGwgPyAocmVmMSA9IHJlZi5maW5pc2hfZGF0ZSkgIT0gbnVsbCA/IHJlZjEuZ2V0VGltZSgpIDogdm9pZCAwIDogdm9pZCAwIDogMDtcbiAgICBpZiAoaXNfY29tcGxldGVkICYmIGluc3RhbmNlLmZpbmlzaF9kYXRlKSB7XG4gICAgICBjb21wbGV0ZWRfZGF0ZSA9IChyZWYyID0gaW5zdGFuY2UuZmluaXNoX2RhdGUpICE9IG51bGwgPyByZWYyLmdldFRpbWUoKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdHJhY2VzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50cmFjZXMoKTtcbiAgICBhcHByb3ZlcyA9IF8uY2xvbmUodHJhY2VzW3N0ZXBOYW1lXSk7XG4gICAgYXBwcm92ZV9zb3J0ID0gZnVuY3Rpb24oYXBwcm92ZXMsIHRvcF9rZXl3b3Jkcykge1xuICAgICAgdmFyIGFwcHJvdmVzX3NvcnRlZCwgdG9wX2FwcHJvdmVzO1xuICAgICAgYXBwcm92ZXNfc29ydGVkID0gXy5zb3J0QnkoYXBwcm92ZXMsIGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgICAgcmV0dXJuIC0oYXBwcm92ZS5maW5pc2hfZGF0ZSB8fCBuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICB9KTtcbiAgICAgIGlmICh0b3Bfa2V5d29yZHMpIHtcbiAgICAgICAgdG9wX2FwcHJvdmVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRvcF9rZXl3b3Jkcy5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4gdG9wX2FwcHJvdmVzID0gXy51bmlvbih0b3BfYXBwcm92ZXMsIF8uZmlsdGVyKGFwcHJvdmVzX3NvcnRlZCwgZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgICAgdmFyIHJlZjM7XG4gICAgICAgICAgICByZXR1cm4gKGFwcHJvdmUgIT0gbnVsbCA/IChyZWYzID0gYXBwcm92ZS5oYW5kbGVyX25hbWUpICE9IG51bGwgPyByZWYzLmluZGV4T2Yoa2V5KSA6IHZvaWQgMCA6IHZvaWQgMCkgPiAtMTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0b3BfYXBwcm92ZXMgPSBfLnNvcnRCeSh0b3BfYXBwcm92ZXMsIGZ1bmN0aW9uKHRvcF9hcHByb3ZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0odG9wX2FwcHJvdmUuZmluaXNoX2RhdGUgfHwgbmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBwcm92ZXNfc29ydGVkID0gXy51bmlvbih0b3BfYXBwcm92ZXMsIGFwcHJvdmVzX3NvcnRlZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXBwcm92ZXNfc29ydGVkIHx8IFtdO1xuICAgIH07XG4gICAgYXBwcm92ZXMgPSBfLmZpbHRlcihhcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgcmV0dXJuIGEudHlwZSAhPT0gXCJmb3J3YXJkXCIgJiYgYS50eXBlICE9PSBcImRpc3RyaWJ1dGVcIiAmJiBhLnR5cGUgIT09IFwidGVybWluYXRlZFwiO1xuICAgIH0pO1xuICAgIGlmIChvbmx5X2NjX29waW5pb24pIHtcbiAgICAgIGFwcHJvdmVzID0gYXBwcm92ZXMgIT0gbnVsbCA/IGFwcHJvdmVzLmZpbHRlclByb3BlcnR5KFwidHlwZVwiLCBcImNjXCIpIDogdm9pZCAwO1xuICAgIH1cbiAgICBhcHByb3Zlc19zb3J0ZWQgPSBhcHByb3ZlX3NvcnQoYXBwcm92ZXMsIHRvcF9rZXl3b3Jkcyk7XG4gICAgYXBwcm92ZXNHcm91cCA9IF8uZ3JvdXBCeShhcHByb3ZlcywgXCJoYW5kbGVyXCIpO1xuICAgIGhhc05leHQgPSBmdW5jdGlvbihhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSB7XG4gICAgICB2YXIgaGFuZGxlckFwcHJvdmVzO1xuICAgICAgaGFuZGxlckFwcHJvdmVzID0gYXBwcm92ZXNHcm91cFthcHByb3ZlLmhhbmRsZXJdO1xuICAgICAgcmV0dXJuIF8uaW5kZXhPZihoYW5kbGVyQXBwcm92ZXMsIGFwcHJvdmUpICsgMSA8IGhhbmRsZXJBcHByb3Zlcy5sZW5ndGg7XG4gICAgfTtcbiAgICBoYXZlRGVzY3JpcHRpb25BcHByb3ZlID0gZnVuY3Rpb24oYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkge1xuICAgICAgdmFyIGRlc2NyaXB0aW9uQXBwcm92ZXMsIGhhbmRsZXJBcHByb3ZlcztcbiAgICAgIGhhbmRsZXJBcHByb3ZlcyA9IGFwcHJvdmVzR3JvdXBbYXBwcm92ZS5oYW5kbGVyXTtcbiAgICAgIGRlc2NyaXB0aW9uQXBwcm92ZXMgPSBfLmZpbHRlcihoYW5kbGVyQXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgaWYgKGEuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChkZXNjcmlwdGlvbkFwcHJvdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIGFwcHJvdmVzX3NvcnRlZC5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgIGlmIChhcHByb3ZlLnNpZ25fc2hvdyAhPT0gZmFsc2UgJiYgKGFwcHJvdmUuZGVzY3JpcHRpb24gfHwgKCFhcHByb3ZlLmRlc2NyaXB0aW9uICYmICFoYXNOZXh0KGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApKSkpIHtcbiAgICAgICAgaWYgKGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgICAgIHJldHVybiBhcHByb3ZlLl9kaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGFwcHJvdmVzX3NvcnRlZCA9IF8uZmlsdGVyKGFwcHJvdmVzX3NvcnRlZCwgZnVuY3Rpb24oYSkge1xuICAgICAgdmFyIHJlZjM7XG4gICAgICBpZiAoaXNfY29tcGxldGVkKSB7XG4gICAgICAgIHJldHVybiBhLl9kaXNwbGF5ID09PSB0cnVlICYmIGEuaXNfZmluaXNoZWQgJiYgKChyZWYzID0gYS5maW5pc2hfZGF0ZSkgIT0gbnVsbCA/IHJlZjMuZ2V0VGltZSgpIDogdm9pZCAwKSA8PSBjb21wbGV0ZWRfZGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLl9kaXNwbGF5ID09PSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhcHByb3Zlc19zb3J0ZWQ7XG4gIH0sXG4gIGluY2x1ZGU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlKGEsIGIpO1xuICB9LFxuICB1bmVtcHR5OiBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy51bmVtcHR5KHZhbCk7XG4gIH0sXG4gIGZvcm1hdERhdGU6IGZ1bmN0aW9uKGRhdGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIFwiZm9ybWF0XCI6IFwiWVlZWS1NTS1ERFwiXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtYXREYXRlKGRhdGUsIG9wdGlvbnMpO1xuICB9LFxuICBpc015QXBwcm92ZTogZnVuY3Rpb24oYXBwcm92ZSwgb25seV9jY19vcGluaW9uKSB7XG4gICAgdmFyIGN1cnJlbnRBcHByb3ZlLCBpbnM7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICBjdXJyZW50QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSgpO1xuICAgICAgaWYgKCEoYXBwcm92ZSAhPSBudWxsID8gYXBwcm92ZS5faWQgOiB2b2lkIDApKSB7XG4gICAgICAgIGFwcHJvdmUgPSBjdXJyZW50QXBwcm92ZTtcbiAgICAgIH1cbiAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gKGN1cnJlbnRBcHByb3ZlICE9IG51bGwgPyBjdXJyZW50QXBwcm92ZS5faWQgOiB2b2lkIDApICYmIChjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUudHlwZSA6IHZvaWQgMCkgPT09ICdjYycgJiYgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUpIHtcbiAgICAgICAgaWYgKF8uaW5kZXhPZihjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSA6IHZvaWQgMCwgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUpID4gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghKChjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUudHlwZSA6IHZvaWQgMCkgPT09ICdjYycpICYmIG9ubHlfY2Nfb3Bpbmlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudEFwcHJvdmUgJiYgYXBwcm92ZS5faWQgPT09IGN1cnJlbnRBcHByb3ZlLl9pZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBteUFwcHJvdmVEZXNjcmlwdGlvbjogZnVuY3Rpb24oYXBwcm92ZUlkKSB7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgcmV0dXJuIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMubXlBcHByb3ZlRGVzY3JpcHRpb24oYXBwcm92ZUlkKTtcbiAgICB9XG4gIH0sXG4gIG5vdzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gIH0sXG4gIGlzUmVhZE9ubHk6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIHJldHVybiBBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNPcGluaW9uT2ZGaWVsZDogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChhcHByb3ZlLnR5cGUgPT09IFwiY2NcIiAmJiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZSkge1xuICAgICAgaWYgKFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lID09PSBhcHByb3ZlLnNpZ25fZmllbGRfY29kZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICBtYXJrRG93blRvSHRtbDogZnVuY3Rpb24obWFya0Rvd25TdHJpbmcpIHtcbiAgICB2YXIgcmVuZGVyZXI7XG4gICAgaWYgKG1hcmtEb3duU3RyaW5nKSB7XG4gICAgICByZW5kZXJlciA9IG5ldyBNYXJrZG93bi5SZW5kZXJlcigpO1xuICAgICAgcmVuZGVyZXIubGluayA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdcIiArIGhyZWYgKyBcIicgdGl0bGU9J1wiICsgdGl0bGUgKyBcIic+XCIgKyB0ZXh0ICsgXCI8L2E+XCI7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFNwYWNlYmFycy5TYWZlU3RyaW5nKE1hcmtkb3duKG1hcmtEb3duU3RyaW5nLCB7XG4gICAgICAgIHJlbmRlcmVyOiByZW5kZXJlclxuICAgICAgfSkpO1xuICAgIH1cbiAgfSxcbiAgc3RlcHM6IGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEsIHN0ZXAsIG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbikge1xuICAgIHZhciByZWYsIHJlZjEsIHJlZjIsIHN0ZXBzO1xuICAgIHN0ZXBzID0gW107XG4gICAgaWYgKCFzdGVwKSB7XG4gICAgICBpZiAoIWZpZWxkX2Zvcm11bGEpIHtcbiAgICAgICAgZmllbGRfZm9ybXVsYSA9IChyZWYgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpKSAhPSBudWxsID8gKHJlZjEgPSByZWYuZmllbGRzKSAhPSBudWxsID8gcmVmMS5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCB0aGlzLm5hbWUpLmZvcm11bGEgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBzdGVwcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZ2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lKGZpZWxkX2Zvcm11bGEsIChyZWYyID0gVGVtcGxhdGUuaW5zdGFuY2UoKSkgIT0gbnVsbCA/IHJlZjIuZGF0YS50b3Bfa2V5d29yZHMgOiB2b2lkIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGVwcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIHN0ZXBOYW1lOiBzdGVwLFxuICAgICAgICAgIG9ubHlfY2Nfb3Bpbmlvbjogb25seV9jY19vcGluaW9uLFxuICAgICAgICAgIGltYWdlX3NpZ246IGltYWdlX3NpZ25cbiAgICAgICAgfVxuICAgICAgXTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ZXBzO1xuICB9LFxuICBpbWFnZVNpZ25EYXRhOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXI6IGhhbmRsZXJcbiAgICB9O1xuICB9LFxuICBzaG93U2lnbkltYWdlOiBmdW5jdGlvbihoYW5kbGVyLCBpbWFnZV9zaWduKSB7XG4gICAgdmFyIHNwYWNlVXNlclNpZ247XG4gICAgc3BhY2VVc2VyU2lnbiA9IEltYWdlU2lnbi5oZWxwZXJzLnNwYWNlVXNlclNpZ24oaGFuZGxlcik7XG4gICAgaWYgKChzcGFjZVVzZXJTaWduICE9IG51bGwgPyBzcGFjZVVzZXJTaWduLnNpZ24gOiB2b2lkIDApICYmIGltYWdlX3NpZ24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBnZXRMYXN0U2lnbkFwcHJvdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnM7XG4gICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgcmV0dXJuIF8ubGFzdChUcmFjZXNNYW5hZ2VyLmdldEhhbmRsZXJTaWduU2hvd0FwcHJvdmVzKGlucywgTWV0ZW9yLnVzZXJJZCgpKSk7XG4gIH0sXG4gIGxhc3RNeUFwcHJvdmVEZXNjcmlwdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFwcHJvdmVzLCBjdXJyZW50U3RlcCwgcmVmLCB0cmFjZXM7XG4gICAgdHJhY2VzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50cmFjZXMoKTtcbiAgICBjdXJyZW50U3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xuICAgIGFwcHJvdmVzID0gXy5jbG9uZSh0cmFjZXNbY3VycmVudFN0ZXAubmFtZV0pO1xuICAgIGFwcHJvdmVzID0gYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoXCJoYW5kbGVyXCIsIE1ldGVvci51c2VySWQoKSk7XG4gICAgaWYgKGFwcHJvdmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiAocmVmID0gYXBwcm92ZXNbYXBwcm92ZXMubGVuZ3RoIC0gMl0pICE9IG51bGwgPyByZWYuZGVzY3JpcHRpb24gOiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuICB9LFxuICBzaG93QXBwcm92ZTogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChhcHByb3ZlICE9IG51bGwgPyBhcHByb3ZlLmlzX3JlYWQgOiB2b2lkIDApIHtcbiAgICAgIGlmIChhcHByb3ZlLmlzX2ZpbmlzaGVkKSB7XG4gICAgICAgIHJldHVybiBbXCJhcHByb3ZlZFwiLCBcInJlamVjdGVkXCIsIFwic3VibWl0dGVkXCIsIFwicmVhZGVkXCJdLmluY2x1ZGVzKGFwcHJvdmUuanVkZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAganVkZ2VfZGVzY3JpcHRpb246IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIHQoanVkZ2UgKyBcIl9kZXNjcmlwdGlvblwiKTtcbiAgfSxcbiAgaXNfYXBwcm92ZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIFwiYXBwcm92ZWRcIiA9PT0ganVkZ2U7XG4gIH0sXG4gIGlzX3JlamVjdGVkOiBmdW5jdGlvbihqdWRnZSkge1xuICAgIHJldHVybiBcInJlamVjdGVkXCIgPT09IGp1ZGdlO1xuICB9LFxuICBpc19yZWFkZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIFtcImFwcHJvdmVkXCIsIFwicmVqZWN0ZWRcIiwgXCJzdWJtaXR0ZWRcIiwgXCJyZWFkZWRcIl0uaW5jbHVkZXMoanVkZ2UpO1xuICB9LFxuICBhZGRDbGFzczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5hbWUsIHJlZiwgcmVmMTtcbiAgICBuYW1lID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5kYXRhKSAhPSBudWxsID8gcmVmMS5uYW1lIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSwgZWxlbWVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsZW1lbnQgPSAkKFwiLmF1dG9tYXRpYy5vcGluaW9uLWZpZWxkLVwiICsgbmFtZSk7XG4gICAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoZWxlbWVudCAhPSBudWxsID8gZWxlbWVudC5pcyhcInRkXCIpIDogdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICQoXCIuaW5zdGFuY2Utc2lnblwiLCBlbGVtZW50KS5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGUpO1xuICAgICAgfVxuICAgIH0sIDEpO1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMuZGVmYXVsdERlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvbiB8fCBUQVBpMThuLl9fKFwiaW5zdGFuY2VfZGVmYXVsdF9vcGluaW9uXCIsIHt9LCBsb2NhbGUpO1xuICB9O1xufVxuIiwiVHJhY2VzVGVtcGxhdGUuaGVscGVycyA9XHJcblx0ZXF1YWxzOiAoYSwgYikgLT5cclxuXHRcdGEgPT0gYlxyXG5cdGVtcHR5OiAoYSkgLT5cclxuXHRcdGlmIGFcclxuXHRcdFx0YS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPCAxXHJcblx0XHRlbHNlXHJcblx0XHRcdHRydWVcclxuXHR1bmVtcHR5OiAoYSkgLT5cclxuXHRcdGlmIGFcclxuXHRcdFx0YS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwXHJcblx0XHRlbHNlXHJcblx0XHRcdGZhbHNlXHJcblxyXG5cdGFwcGVuZDogKGEsIGIpIC0+XHJcblx0XHRhICsgYlxyXG5cclxuXHRkYXRlRm9ybWF0OiAoZGF0ZSkgLT5cclxuXHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpICYmIGRhdGU/LmdldEZ1bGxZZWFyKCkgPT0gKG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpXHJcblx0XHRcdFx0cmV0dXJuICQuZm9ybWF0LmRhdGUgbmV3IERhdGUoZGF0ZSksIFwiTU0tZGQgSEg6bW1cIlxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuICQuZm9ybWF0LmRhdGUgbmV3IERhdGUoZGF0ZSksIFwieXl5eS1NTS1kZCBISDptbVwiXHJcblxyXG5cdGdldFN0ZXBOYW1lOiAoc3RlcElkKSAtPlxyXG5cdFx0c3RlcCA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZVN0ZXAoc3RlcElkKVxyXG5cdFx0aWYgc3RlcFxyXG5cdFx0XHRyZXR1cm4gc3RlcC5uYW1lXHJcblx0XHRudWxsXHJcblx0c2hvd0RlbGV0ZUJ1dHRvbjogKGFwcHJvdmVkKSAtPlxyXG5cdFx0aWYgYXBwcm92ZWQgYW5kIGFwcHJvdmVkLnR5cGUgPT0gJ2NjJyBhbmQgYXBwcm92ZWQuZnJvbV91c2VyID09IE1ldGVvci51c2VySWQoKSBhbmQgYXBwcm92ZWQuaXNfZmluaXNoZWQgIT0gdHJ1ZSBhbmQgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ZmFsc2VcclxuXHRpc1Nob3dNb2RpZmljYXRpb25CdXR0b246IChhcHByb3ZlZCkgLT5cclxuXHRcdGFwcHJvdmVfYWRtaW5zID0gTWV0ZW9yLnNldHRpbmdzPy5wdWJsaWM/LndvcmtmbG93Py5hcHByb3ZlX2FkbWluc1xyXG5cdFx0aWYgYXBwcm92ZV9hZG1pbnM/Lmxlbmd0aFxyXG5cdFx0XHRpc1Nob3cgPSBhcHByb3ZlX2FkbWlucz8uY29udGFpbnMgTWV0ZW9yLnVzZXJJZCgpXHJcblx0XHR1bmxlc3MgaXNTaG93XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0cmV0dXJuIGFwcHJvdmVkLmhhbmRsZXIgPT0gTWV0ZW9yLnVzZXJJZCgpXHJcblx0aXNFZGl0aW5nOiAoKSAtPlxyXG5cdFx0IHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmlzX2VkaXRpbmc/LmdldCgpXHJcblx0aXNTaG93RGVzY3JpcHRpb246IChhcHByb3ZlZCktPlxyXG5cdFx0IyBkZWJ1Z2dlclxyXG5cdFx0aWYgVHJhY2VzVGVtcGxhdGUuaGVscGVycy5pc1Nob3dNb2RpZmljYXRpb25CdXR0b24gYXBwcm92ZWRcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdHJldHVybiBhcHByb3ZlZC5kZXNjcmlwdGlvbj8udG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID4gMFxyXG5cdGlzQ0M6IChhcHByb3ZlZCkgLT5cclxuXHRcdGlmIGFwcHJvdmVkIGFuZCBhcHByb3ZlZC50eXBlID09ICdjYydcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGZhbHNlXHJcblx0Z2V0QXBwcm92ZVN0YXR1c0ljb246IChhcHByb3ZlSnVkZ2UpIC0+XHJcblx0XHQj5bey57uT5p2f55qE5pi+56S65Li65qC45YeGL+mps+Wbni/lj5bmtojnlLPor7fvvIzlubbmmL7npLrlpITnkIbnirbmgIHlm77moIdcclxuXHRcdGFwcHJvdmVTdGF0dXNJY29uID0gdW5kZWZpbmVkXHJcblx0XHRzd2l0Y2ggYXBwcm92ZUp1ZGdlXHJcblx0XHRcdHdoZW4gJ2FwcHJvdmVkJ1xyXG5cdFx0XHRcdCMg5bey5qC45YeGXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1jaGVja21hcmstcm91bmQnXHJcblx0XHRcdHdoZW4gJ3JlamVjdGVkJ1xyXG5cdFx0XHRcdCMg5bey6amz5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1jbG9zZS1yb3VuZCdcclxuXHRcdFx0d2hlbiAndGVybWluYXRlZCdcclxuXHRcdFx0XHQjIOW3suWPlua2iFxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2ZhIGZhLWJhbidcclxuXHRcdFx0d2hlbiAncmVhc3NpZ25lZCdcclxuXHRcdFx0XHQjIOi9rOetvuaguFxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tYW5kcm9pZC1jb250YWN0J1xyXG5cdFx0XHR3aGVuICdyZWxvY2F0ZWQnXHJcblx0XHRcdFx0IyDph43lrprkvY1cclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWFycm93LXNocmluaydcclxuXHRcdFx0d2hlbiAncmV0cmlldmVkJ1xyXG5cdFx0XHRcdCMg5bey5Y+W5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnZmEgZmEtdW5kbydcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJydcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0YXBwcm92ZVN0YXR1c0ljb25cclxuXHRnZXRBcHByb3ZlU3RhdHVzVGV4dDogKGFwcHJvdmVKdWRnZSkgLT5cclxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblx0XHRcdGlmIGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcclxuXHRcdFx0XHRsb2NhbGUgPSBcInpoLUNOXCJcclxuXHRcdGVsc2VcclxuXHRcdFx0bG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKVxyXG5cdFx0I+W3sue7k+adn+eahOaYvuekuuS4uuaguOWHhi/pqbPlm54v5Y+W5raI55Sz6K+377yM5bm25pi+56S65aSE55CG54q25oCB5Zu+5qCHXHJcblx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IHVuZGVmaW5lZFxyXG5cdFx0c3dpdGNoIGFwcHJvdmVKdWRnZVxyXG5cdFx0XHR3aGVuICdhcHByb3ZlZCdcclxuXHRcdFx0XHQjIOW3suaguOWHhlxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgYXBwcm92ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZWplY3RlZCdcclxuXHRcdFx0XHQjIOW3sumps+WbnlxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVqZWN0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICd0ZXJtaW5hdGVkJ1xyXG5cdFx0XHRcdCMg5bey5Y+W5raIXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSB0ZXJtaW5hdGVkJywge30sIGxvY2FsZSlcclxuXHRcdFx0d2hlbiAncmVhc3NpZ25lZCdcclxuXHRcdFx0XHQjIOi9rOetvuaguFxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVhc3NpZ25lZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdHdoZW4gJ3JlbG9jYXRlZCdcclxuXHRcdFx0XHQjIOmHjeWumuS9jVxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVsb2NhdGVkJywge30sIGxvY2FsZSlcclxuXHRcdFx0d2hlbiAncmV0cmlldmVkJ1xyXG5cdFx0XHRcdCMg5bey5Y+W5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZXRyaWV2ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZXR1cm5lZCdcclxuXHRcdFx0XHQjIOW3sumAgOWbnlxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmV0dXJuZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZWFkZWQnXHJcblx0XHRcdFx0IyDlt7LpmIVcclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJlYWRlZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9ICcnXHJcblx0XHRcdFx0YnJlYWtcclxuXHRcdGFwcHJvdmVTdGF0dXNUZXh0XHJcblx0X3Q6IChrZXkpLT5cclxuXHRcdHJldHVybiBUQVBpMThuLl9fKGtleSlcclxuXHJcblx0bXlBcHByb3ZlRGVzY3JpcHRpb246IChhcHByb3ZlSWQpLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXHJcblx0XHRcdFx0bXlBcHByb3ZlID0gVGVtcGxhdGUuaW5zdGFuY2UoKT8ubXlBcHByb3ZlPy5nZXQoKVxyXG5cdFx0XHRcdGlmIG15QXBwcm92ZSAmJiBteUFwcHJvdmUuaWQgPT0gYXBwcm92ZUlkXHJcblx0XHRcdFx0XHRpZiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpXHJcblx0XHRcdFx0XHRcdHJldHVybiBteUFwcHJvdmU/LmRlc2NyaXB0aW9uIHx8IFwiXCJcclxuXHRcdFx0XHRcdHJldHVybiBTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIilcclxuXHRpc0ZvcndhcmQ6IChhcHByb3ZlZCkgLT5cclxuXHRcdGlmIGFwcHJvdmVkIGFuZCBhcHByb3ZlZC50eXBlID09ICdmb3J3YXJkJ1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ZmFsc2VcclxuXHRzaG93Rm9yd2FyZERlbGV0ZUJ1dHRvbjogKGFwcHJvdmUpIC0+XHJcblx0XHRpZiBkYi5pbnN0YW5jZXMuZmluZChhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpLmNvdW50KCkgaXMgMFxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdGlmIGFwcHJvdmUgYW5kIGFwcHJvdmUudHlwZSA9PSAnZm9yd2FyZCcgYW5kIGFwcHJvdmUuZnJvbV91c2VyID09IE1ldGVvci51c2VySWQoKSBhbmQgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSBhbmQgYXBwcm92ZS5qdWRnZSBpc250ICd0ZXJtaW5hdGVkJ1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ZmFsc2VcclxuXHRtYXJrRG93blRvSHRtbDogKG1hcmtEb3duU3RyaW5nKS0+XHJcblx0XHRpZiBtYXJrRG93blN0cmluZ1xyXG5cdFx0XHRyZW5kZXJlciA9IG5ldyBNYXJrZG93bi5SZW5kZXJlcigpO1xyXG5cdFx0XHRyZW5kZXJlci5saW5rID0gKCBocmVmLCB0aXRsZSwgdGV4dCApIC0+XHJcblx0XHRcdFx0cmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9JyN7aHJlZn0nIHRpdGxlPScje3RpdGxlfSc+I3t0ZXh0fTwvYT5cIlxyXG5cdFx0XHRyZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtyZW5kZXJlcjpyZW5kZXJlcn0pKVxyXG5cdGlzRGlzdHJpYnV0ZTogKGFwcHJvdmUpIC0+XHJcblx0XHRpZiBhcHByb3ZlIGFuZCBhcHByb3ZlLnR5cGUgPT0gJ2Rpc3RyaWJ1dGUnXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRmYWxzZVxyXG5cdHNob3dEaXN0cmlidXRlRGVsZXRlQnV0dG9uOiAoYXBwcm92ZSkgLT5cclxuXHRcdGlmIGRiLmluc3RhbmNlcy5maW5kKGFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZSkuY291bnQoKSBpcyAwXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdGlmIGFwcHJvdmUgYW5kIGFwcHJvdmUudHlwZSA9PSAnZGlzdHJpYnV0ZScgYW5kICFTZXNzaW9uLmdldChcImluc3RhbmNlUHJpbnRcIikgYW5kIGFwcHJvdmUuanVkZ2UgaXNudCAndGVybWluYXRlZCcgYW5kIFN0ZWVkb3MuaXNMZWdhbFZlcnNpb24oJycsXCJ3b3JrZmxvdy5lbnRlcnByaXNlXCIpXHJcblx0XHRcdCMg5rWB56iL566h55CG5ZGY5ZKM57O757uf566h55CG5ZGY77yM5Y+v5Lul5omn6KGM5Lu75L2V5oOF5Ya15LiL55qE5paH5Lu25Y+W5raI5YiG5Y+RXHJcblx0XHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGFwcHJvdmUuaW5zdGFuY2V9LCB7ZmllbGRzOiB7ZmxvdzogMSwgc3BhY2U6IDF9fSlcclxuXHRcdFx0aWYgaW5zIGFuZCBpbnMuZmxvdyBhbmQgaW5zLnNwYWNlXHJcblx0XHRcdFx0aWYgV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgTWV0ZW9yLnVzZXJJZCgpKVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblx0XHRcdGlmIGFwcHJvdmUuZnJvbV91c2VyID09IE1ldGVvci51c2VySWQoKVxyXG5cdFx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdFx0ZmFsc2VcclxuXHJcblx0ZmluaXNoRGF0ZVNjaGVtYTogKCkgLT5cclxuXHRcdGlmIFN0ZWVkb3MuaXNBbmRyb2lkT3JJT1MoKVxyXG5cdFx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYSh7XHJcblx0XHRcdFx0ZmluaXNoX2RhdGU6IHtcclxuXHRcdFx0XHRcdGF1dG9mb3JtOiB7XHJcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGF0ZXRpbWUtbG9jYWxcIlxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdG9wdGlvbmFsOiBmYWxzZSxcclxuXHRcdFx0XHRcdHR5cGU6IERhdGVcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKHtcclxuXHRcdFx0XHRmaW5pc2hfZGF0ZToge1xyXG5cdFx0XHRcdFx0YXV0b2Zvcm06IHtcclxuXHRcdFx0XHRcdFx0dHlwZTogXCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcIlxyXG5cdFx0XHRcdFx0XHRyZWFkb25seTogdHJ1ZVxyXG5cdFx0XHRcdFx0XHRkYXRlVGltZVBpY2tlck9wdGlvbnM6e1xyXG5cdFx0XHRcdFx0XHRcdGZvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCIsXHJcblx0XHRcdFx0XHRcdFx0aWdub3JlUmVhZG9ubHk6dHJ1ZSxcclxuXHRcdFx0XHRcdFx0XHRsb2NhbGU6IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIiksXHJcblx0XHRcdFx0XHRcdFx0d2lkZ2V0UG9zaXRpb25pbmc6e1xyXG5cdFx0XHRcdFx0XHRcdFx0aG9yaXpvbnRhbDogJ3JpZ2h0J1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdG9wdGlvbmFsOiBmYWxzZSxcclxuXHRcdFx0XHRcdHR5cGU6IERhdGVcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblxyXG5cdGZpbmlzaERhdGVWYWx1ZXM6ICgpIC0+XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRmaW5pc2hfZGF0ZTp0aGlzLmZpbmlzaF9kYXRlXHJcblx0XHR9O1xyXG5cclxuXHQjIyNcclxuICAgIFx05q2k5Ye95pWw55So5LqO5o6n5Yi25piv5ZCm5pi+56S6dHJhY2VzIHZpZXdcclxuICAgIFx0dHJ1ZTog5pi+56S6dHJhY2VzIHZpZXcs562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCO5piv55u05o6l5a6a5L2N5YiwdHJhY2VzIHZpZXdcclxuICAgIFx0ZmFsc2U6IOS4jeaYvuekunRyYWNlcyB2aWV377yM562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCOLOS7pU1vZGFsIOaWueW8j+aYvuekunRyYWNlcyB2aWV3XHJcblx0IyMjXHJcblx0c2hvd1RyYWNlc1ZpZXc6IChmb3JtLCBmb3JtX3ZlcnNpb24pLT5cclxuI1x0XHRyZXR1cm4gIShJbnN0YW5jZU1hbmFnZXIuaXNUYWJsZVN0eWxlKGZvcm0pICYmIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5jbHVkZXNPcGluaW9uRmllbGQoZm9ybSwgZm9ybV92ZXJzaW9uKSlcclxuXHJcblx0XHRzaG93X21vZGFsX3RyYWNlc19saXN0ID0gZGIuc3BhY2Vfc2V0dGluZ3MuZmluZE9uZSh7c3BhY2U6IFNlc3Npb24uZ2V0KFwic3BhY2VJZFwiKSwga2V5OiBcInNob3dfbW9kYWxfdHJhY2VzX2xpc3RcIn0pPy52YWx1ZXMgfHwgZmFsc2VcclxuXHJcblx0XHRyZXR1cm4gIXNob3dfbW9kYWxfdHJhY2VzX2xpc3RcclxuXHJcblx0Z2V0SW5zdGFuY2VTdGF0ZVRleHQ6IChpbnN0YW5jZV9pZCktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHRcdFx0aWYgbG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xyXG5cdFx0XHRcdGxvY2FsZSA9IFwiemgtQ05cIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VfaWR9LCB7ZmllbGRzOiB7c3RhdGU6IDEsIGlzX3JlYWQ6IDF9fSlcclxuXHRcdGlmIG5vdCBpbnNcclxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oJ2luc3RhbmNlX2RlbGV0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cclxuXHRcdHRleHQgPSAnJ1xyXG5cdFx0aWYgaW5zLnN0YXRlIGlzICdjb21wbGV0ZWQnXHJcblx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdjb21wbGV0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0ZWxzZSBpZiBpbnMuc3RhdGUgaXMgJ3BlbmRpbmcnXHJcblx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdwZW5kaW5nJywge30sIGxvY2FsZSlcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdkcmFmdCdcclxuXHRcdFx0aWYgaW5zLmlzX3JlYWRcclxuXHRcdFx0XHR0ZXh0ID0gVEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92ZV9yZWFkJywge30sIGxvY2FsZSlcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX25vdF95ZXRfaGFuZGxlZCcsIHt9LCBsb2NhbGUpXHJcblxyXG5cdFx0cmV0dXJuIHRleHRcclxuXHJcblx0Z2V0SW5zdGFuY2VTdGF0ZUNvbG9yOiAoaW5zdGFuY2VfaWQpLT5cclxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlX2lkfSwge2ZpZWxkczoge3N0YXRlOiAxLCBpc19yZWFkOiAxfX0pXHJcblx0XHRpZiBub3QgaW5zXHJcblx0XHRcdHJldHVybiBcIlwiXHJcblxyXG5cdFx0Y2xhID0gJydcclxuXHRcdGlmIGlucy5zdGF0ZSBpcyAnZHJhZnQnXHJcblx0XHRcdGlmIGlucy5pc19yZWFkXHJcblx0XHRcdFx0Y2xhID0gJ2JsdWUnXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRjbGEgPSAncmVkJ1xyXG5cdFx0cmV0dXJuIGNsYVxyXG5cclxuXHRmaXJzdFRyYWNlOiAoaW5kZXgpLT5cclxuXHRcdHJldHVybiBpbmRleCBpcyAwXHJcblxyXG5cdGxhc3RfZGlzdHJpYnV0ZV9mcm9tOiAoaW5zdGFuY2VfaWQpLT5cclxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlX2lkLCBkaXN0cmlidXRlX2Zyb21faW5zdGFuY2U6IHskZXhpc3RzOiB0cnVlfX0se2ZpZWxkczp7Y3JlYXRlZDogMSwgY3JlYXRlZF9ieTogMX19KVxyXG5cdFx0aWYgaW5zXHJcblx0XHRcdGRpc19pbmZvID0ge31cclxuXHRcdFx0dXNlciA9IHt9XHJcblx0XHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRcdHVzZXIgPSBVVWZsb3dfYXBpLmdldE5hbWVGb3JVc2VyKGlucy5jcmVhdGVkX2J5KVxyXG5cdFx0XHRlbHNlIGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRcdHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtfaWQ6IGlucy5jcmVhdGVkX2J5fSwge2ZpZWxkczoge25hbWU6IDF9fSlcclxuXHJcblx0XHRcdGlmIHVzZXIubmFtZVxyXG5cdFx0XHRcdGRpc19pbmZvLmZyb21fdXNlcl9uYW1lID0gdXNlci5uYW1lXHJcblx0XHRcdFx0ZGlzX2luZm8uY3JlYXRlZCA9IGlucy5jcmVhdGVkXHJcblxyXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KGRpc19pbmZvKVxyXG5cdFx0XHRcdHJldHVybiBkaXNfaW5mb1xyXG5cdFx0cmV0dXJuXHJcblxyXG5cdGlzQ0NPckRpc3RyaWJ1dGVPckZvcndhcmRUZXJtaW5hdGVkOiAoYXBwcm92ZSktPlxyXG5cdFx0aWYgKGFwcHJvdmUudHlwZSBpcyAnY2MnIG9yIGFwcHJvdmUudHlwZSBpcyAnZGlzdHJpYnV0ZScgb3IgYXBwcm92ZS50eXBlIGlzICdmb3J3YXJkJykgYW5kIGFwcHJvdmUuanVkZ2UgaXMgJ3Rlcm1pbmF0ZWQnXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0anVkZ2VUZXJtaW5hdGVkOiAoanVkZ2UpLT5cclxuXHRcdHJldHVybiBqdWRnZSBpcyAndGVybWluYXRlZCdcclxuXHJcblx0aW5zdGFuY2VFeGlzdHM6IChpbnN0YW5jZV9pZCktPlxyXG5cdFx0cmV0dXJuICEhZGIuaW5zdGFuY2VzLmZpbmQoaW5zdGFuY2VfaWQpLmNvdW50KClcclxuXHJcblx0YWdlbnREZXNjcmlwdGlvbjogKHVzZXJOYW1lKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0XHRpZiBsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnemgtY24nXHJcblx0XHRcdFx0bG9jYWxlID0gXCJ6aC1DTlwiXHJcblx0XHRlbHNlXHJcblx0XHRcdGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIilcclxuXHJcblx0XHRyZXR1cm4gVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge3VzZXJOYW1lOiB1c2VyTmFtZX0sIGxvY2FsZSlcclxuXHR0cmFjZU5hbWU6IChpbnN0YW5jZV9pZCwgdHJhY2VJZCktPlxyXG5cdFx0cmV0dXJuIF8uZmluZChkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZCwge2ZpZWxkczoge3RyYWNlczogMX19KT8udHJhY2VzLCAodHJhY2UpLT5cclxuXHRcdFx0XHRcdHJldHVybiB0cmFjZS5faWQgPT0gIHRyYWNlSWRcclxuXHRcdCk/Lm5hbWVcclxuaWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0VHJhY2VzVGVtcGxhdGUuaGVscGVycy5kYXRlRm9ybWF0ID0gKGRhdGUpLT5cclxuXHRcdGlmIGRhdGVcclxuXHRcdFx0dXRjT2Zmc2V0ID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnV0Y09mZnNldFxyXG5cdFx0XHRyZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUoZGF0ZSwgdXRjT2Zmc2V0KTtcclxuXHJcblx0VHJhY2VzVGVtcGxhdGUuaGVscGVycy5fdCA9IChrZXkpLT5cclxuXHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHRcdHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSlcclxuXHJcblx0VHJhY2VzVGVtcGxhdGUuaGVscGVycy5zaG93RGVsZXRlQnV0dG9uID0gKGFwcHJvdmVkKSAtPlxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuVHJhY2VzVGVtcGxhdGUuZXZlbnRzID1cclxuXHQnY2xpY2sgLmNjLWFwcHJvdmUtcmVtb3ZlJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcblx0XHRpZiBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyAqIDEgIT0gMVxyXG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDFcclxuXHRcdFx0JChcImlcIixldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhcImZhLXNwaW5cIilcclxuXHRcdFx0aW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJylcclxuXHRcdFx0YXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZVxyXG5cdFx0XHQjIENBTEwg5Yig6ZmkYXBwcm92ZeWHveaVsOOAglxyXG5cdFx0XHQkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIilcclxuXHRcdFx0TWV0ZW9yLmNhbGwgJ2NjX3JlbW92ZScsIGluc3RhbmNlSWQsIGFwcHJvdmVJZCwgKGVyciwgcmVzdWx0KSAtPlxyXG5cdFx0XHRcdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0XHRcdGlmIGVyclxyXG5cdFx0XHRcdFx0dG9hc3RyLmVycm9yIGVyclxyXG5cdFx0XHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGxpbmcgPSAwXHJcblx0XHRcdFx0XHQkKFwiaVwiLGV2ZW50LmN1cnJlbnRUYXJnZXQpLnJlbW92ZUNsYXNzKFwiZmEtc3BpblwiKVxyXG5cdFx0XHRcdGlmIHJlc3VsdCA9PSB0cnVlXHJcblx0XHRcdFx0XHR0b2FzdHIuc3VjY2VzcyhUQVBpMThuLl9fKFwicmVtb3ZlX2NjX2FwcHJvdmVcIikpO1xyXG5cdFx0XHRcdFx0aWYgJChcIi5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWxcIikubGVuZ3RoXHJcblx0XHRcdFx0XHRcdE1vZGFsLmhpZGUgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIlxyXG5cdFx0XHRcdHJldHVyblxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0J2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1jYy1hcHByb3ZlLXJlbW92ZSc6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblx0XHRpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKVxyXG5cdFx0YXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZVxyXG5cdFx0IyBDQUxMIOWIoOmZpGFwcHJvdmXlh73mlbDjgIJcclxuXHRcdCQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0TWV0ZW9yLmNhbGwgJ2NjX3JlbW92ZScsIGluc3RhbmNlSWQsIGFwcHJvdmVJZCwgKGVyciwgcmVzdWx0KSAtPlxyXG5cdFx0XHQkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIilcclxuXHRcdFx0aWYgZXJyXHJcblx0XHRcdFx0dG9hc3RyLmVycm9yIGVyclxyXG5cdFx0XHRpZiByZXN1bHQgPT0gdHJ1ZVxyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJyZW1vdmVfY2NfYXBwcm92ZVwiKSk7XHJcblx0XHRcdFx0TW9kYWwuaGlkZSBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiXHJcblx0XHRcdHJldHVyblxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdCdjbGljayAuYXBwcm92ZS1pdGVtLC5hcHByb3ZlLWRlc2NyaXB0aW9uJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdE1vZGFsLnNob3cgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIiwgdGhpc1xyXG5cclxuXHQndGFwaG9sZCAuYXBwcm92ZS1pdGVtLC5hcHByb3ZlLWRlc2NyaXB0aW9uJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdE1vZGFsLnNob3cgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIiwgdGhpc1xyXG5cclxuXHQndGFwZW5kIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyDkuIrov7Dplb/mjInmiZPlvIBhcHByb3Zl6K+m57uG56qX5Y+j55qE5LqL5Lu2dGFwaG9sZOS8muinpuWPkeaJk+W8gOeql+WPo+WQjueahHRvdWNoZW5k5LqL5Lu277yM6YCg5oiQ6ZW/5oyJ5omT5byA56qX5Y+j5ZCO5LiA5pS+5omL56qX5Y+j5bCx5Y+I5YWz5o6J5LqGXHJcblx0XHQjIOi/memHjOWPquiDvemAmui/h+mYu+atonRhcGVuZOS6i+S7tijkuI3lj6/ku6XnlKh0b3VjaGVuZOS6i+S7tu+8jOWboOS4uuS8muW9seWTjXRhcGhvbGTlip/og73vvIzpgKDmiJDmsqHmnInplb/mjInmlYjmnpzml7bkuZ/kvJrop6blj5F0YXBob2xk5LqL5Lu2KeWGkuazoeadpemBv+WFjemXrumimOOAglxyXG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHQnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWZvcndhcmQtYXBwcm92ZS1yZW1vdmUnOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0aW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJylcclxuXHRcdGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmVcclxuXHRcdHRyYWNlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC50cmFjZVxyXG5cdFx0IyBDQUxMIOWIoOmZpGFwcHJvdmXlh73mlbDjgIJcclxuXHRcdCQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0TWV0ZW9yLmNhbGwgJ2ZvcndhcmRfcmVtb3ZlJywgaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCAoZXJyLCByZXN1bHQpIC0+XHJcblx0XHRcdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0XHRpZiBlcnJcclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IgVEFQaTE4bi5fXyhlcnIucmVhc29uKVxyXG5cdFx0XHRpZiByZXN1bHQgPT0gdHJ1ZVxyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJpbnN0YW5jZV9hcHByb3ZlX2ZvcndhcmRfcmVtb3ZlX3N1Y2Nlc3NcIikpO1xyXG5cdFx0XHRcdE1vZGFsLmhpZGUgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIlxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdHJldHVyblxyXG5cclxuXHQnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWZvcndhcmQtaW5zdGFuY2UtbG9vayc6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblx0XHRmb3J3YXJkX3NwYWNlID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuZm9yd2FyZHNwYWNlXHJcblx0XHRmb3J3YXJkX2luc3RhbmNlID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuZm9yd2FyZGluc3RhbmNlXHJcblx0XHRTdGVlZG9zLm9wZW5XaW5kb3coU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgZm9yd2FyZF9zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBmb3J3YXJkX2luc3RhbmNlKSlcclxuXHJcblx0J2NsaWNrIC5idG4tbW9kaWZpY2F0aW9uJ1x0OiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0dGVtcGxhdGUuaXNfZWRpdGluZy5zZXQoIXRlbXBsYXRlLmlzX2VkaXRpbmcuZ2V0KCkpO1xyXG5cdFx0dW5sZXNzIFN0ZWVkb3MuaXNBbmRyb2lkT3JJT1MoKVxyXG5cdFx0XHRUcmFja2VyLmFmdGVyRmx1c2ggLT5cclxuXHRcdFx0XHQjIOaYvuekuuaXpeW/l+eahOaXtuWAmeaKiua7muWKqOadoeW+gOS4i+enu+eCue+8jOiuqeaXpeacn+aOp+S7tuaYvuekuuWHuuS4gOmDqOWIhu+8jOS7pemBv+WFjeeUqOaIt+eci+S4jeWIsOaXpeacn+aOp+S7tlxyXG5cdFx0XHRcdCQoXCIjaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsICNmaW5pc2hfaW5wdXRcIikub24gXCJkcC5zaG93XCIsICgpIC0+XHJcblx0XHRcdFx0XHQkKFwiLm1vZGFsLWJvZHlcIikuc2Nyb2xsVG9wKDEwMClcclxuXHJcblx0J2NsaWNrIC5idG4tY2FuY2VsQnV0JyA6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblxyXG5cdFx0dGVtcGxhdGUuaXNfZWRpdGluZy5zZXQoIXRlbXBsYXRlLmlzX2VkaXRpbmcuZ2V0KCkpO1xyXG5cclxuXHQnY2xpY2sgLmJ0bi1zYXZlQnV0JyA6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblx0XHQjIHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKVxyXG5cclxuXHRcdGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpXHJcblx0XHRhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlXHJcblx0XHR0cmFjZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQudHJhY2VcclxuXHRcdG9waW5pb25faW5wdXQgPSAkKCcjb3Bpbmlvbl9pbnB1dCcpLnZhbCgpXHJcblx0XHRmaW5pc2hfaW5wdXQgPSBBdXRvRm9ybS5nZXRGaWVsZFZhbHVlKFwiZmluaXNoX2RhdGVcIiwgXCJmaW5pc2hEYXRlQXV0b0Zvcm1cIilcclxuXHJcblx0XHQkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIilcclxuXHRcdE1ldGVvci5jYWxsICdjaGFuZ2VfYXBwcm92ZV9pbmZvJywgaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCBvcGluaW9uX2lucHV0LCBmaW5pc2hfaW5wdXQsIChlcnIsIHJlc3VsdCktPlxyXG5cdFx0XHQkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIilcclxuXHRcdFx0aWYgZXJyXHJcblx0XHRcdFx0dG9hc3RyLmVycm9yIFRBUGkxOG4uX18oZXJyLnJlYXNvbilcclxuXHRcdFx0aWYgcmVzdWx0ID09IHRydWVcclxuXHRcdFx0XHR0b2FzdHIuc3VjY2Vzcyh0KFwiaW5zdGFuY2VfYXBwcm92ZV9tb2RhbF9tb2RpZmljYXRpb25zYXZlXCIpKVxyXG5cdFx0XHRcdE1vZGFsLmhpZGUgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIlxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0J2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1kaXN0cmlidXRlLWFwcHJvdmUtcmVtb3ZlJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdE1vZGFsLmFsbG93TXVsdGlwbGUgPSB0cnVlXHJcblx0XHRNb2RhbC5zaG93ICdjYW5jZWxfZGlzdHJpYnV0ZV9tb2RhbCdcclxuIiwiVHJhY2VzVGVtcGxhdGUuaGVscGVycyA9IHtcbiAgZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbihhKSB7XG4gICAgaWYgKGEpIHtcbiAgICAgIHJldHVybiBhLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA8IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgdW5lbXB0eTogZnVuY3Rpb24oYSkge1xuICAgIGlmIChhKSB7XG4gICAgICByZXR1cm4gYS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBhcHBlbmQ6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSArIGI7XG4gIH0sXG4gIGRhdGVGb3JtYXQ6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBpZiAoU3RlZWRvcy5pc01vYmlsZSgpICYmIChkYXRlICE9IG51bGwgPyBkYXRlLmdldEZ1bGxZZWFyKCkgOiB2b2lkIDApID09PSAobmV3IERhdGUpLmdldEZ1bGxZZWFyKCkpIHtcbiAgICAgIHJldHVybiAkLmZvcm1hdC5kYXRlKG5ldyBEYXRlKGRhdGUpLCBcIk1NLWRkIEhIOm1tXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJC5mb3JtYXQuZGF0ZShuZXcgRGF0ZShkYXRlKSwgXCJ5eXl5LU1NLWRkIEhIOm1tXCIpO1xuICAgIH1cbiAgfSxcbiAgZ2V0U3RlcE5hbWU6IGZ1bmN0aW9uKHN0ZXBJZCkge1xuICAgIHZhciBzdGVwO1xuICAgIHN0ZXAgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VTdGVwKHN0ZXBJZCk7XG4gICAgaWYgKHN0ZXApIHtcbiAgICAgIHJldHVybiBzdGVwLm5hbWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBzaG93RGVsZXRlQnV0dG9uOiBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIGlmIChhcHByb3ZlZCAmJiBhcHByb3ZlZC50eXBlID09PSAnY2MnICYmIGFwcHJvdmVkLmZyb21fdXNlciA9PT0gTWV0ZW9yLnVzZXJJZCgpICYmIGFwcHJvdmVkLmlzX2ZpbmlzaGVkICE9PSB0cnVlICYmICFTZXNzaW9uLmdldChcImluc3RhbmNlUHJpbnRcIikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICB2YXIgYXBwcm92ZV9hZG1pbnMsIGlzU2hvdywgcmVmLCByZWYxLCByZWYyO1xuICAgIGFwcHJvdmVfYWRtaW5zID0gKHJlZiA9IE1ldGVvci5zZXR0aW5ncykgIT0gbnVsbCA/IChyZWYxID0gcmVmW1wicHVibGljXCJdKSAhPSBudWxsID8gKHJlZjIgPSByZWYxLndvcmtmbG93KSAhPSBudWxsID8gcmVmMi5hcHByb3ZlX2FkbWlucyA6IHZvaWQgMCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICBpZiAoYXBwcm92ZV9hZG1pbnMgIT0gbnVsbCA/IGFwcHJvdmVfYWRtaW5zLmxlbmd0aCA6IHZvaWQgMCkge1xuICAgICAgaXNTaG93ID0gYXBwcm92ZV9hZG1pbnMgIT0gbnVsbCA/IGFwcHJvdmVfYWRtaW5zLmNvbnRhaW5zKE1ldGVvci51c2VySWQoKSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmICghaXNTaG93KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBhcHByb3ZlZC5oYW5kbGVyID09PSBNZXRlb3IudXNlcklkKCk7XG4gIH0sXG4gIGlzRWRpdGluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkuaXNfZWRpdGluZykgIT0gbnVsbCA/IHJlZi5nZXQoKSA6IHZvaWQgMDtcbiAgfSxcbiAgaXNTaG93RGVzY3JpcHRpb246IGZ1bmN0aW9uKGFwcHJvdmVkKSB7XG4gICAgdmFyIHJlZjtcbiAgICBpZiAoVHJhY2VzVGVtcGxhdGUuaGVscGVycy5pc1Nob3dNb2RpZmljYXRpb25CdXR0b24oYXBwcm92ZWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICgocmVmID0gYXBwcm92ZWQuZGVzY3JpcHRpb24pICE9IG51bGwgPyByZWYudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoIDogdm9pZCAwKSA+IDA7XG4gIH0sXG4gIGlzQ0M6IGZ1bmN0aW9uKGFwcHJvdmVkKSB7XG4gICAgaWYgKGFwcHJvdmVkICYmIGFwcHJvdmVkLnR5cGUgPT09ICdjYycpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGdldEFwcHJvdmVTdGF0dXNJY29uOiBmdW5jdGlvbihhcHByb3ZlSnVkZ2UpIHtcbiAgICB2YXIgYXBwcm92ZVN0YXR1c0ljb247XG4gICAgYXBwcm92ZVN0YXR1c0ljb24gPSB2b2lkIDA7XG4gICAgc3dpdGNoIChhcHByb3ZlSnVkZ2UpIHtcbiAgICAgIGNhc2UgJ2FwcHJvdmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1jaGVja21hcmstcm91bmQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlamVjdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1jbG9zZS1yb3VuZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGVybWluYXRlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2ZhIGZhLWJhbic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVhc3NpZ25lZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tYW5kcm9pZC1jb250YWN0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWxvY2F0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWFycm93LXNocmluayc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmV0cmlldmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnZmEgZmEtdW5kbyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhcHByb3ZlU3RhdHVzSWNvbjtcbiAgfSxcbiAgZ2V0QXBwcm92ZVN0YXR1c1RleHQ6IGZ1bmN0aW9uKGFwcHJvdmVKdWRnZSkge1xuICAgIHZhciBhcHByb3ZlU3RhdHVzVGV4dCwgbG9jYWxlO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGU7XG4gICAgICBpZiAobG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09ICd6aC1jbicpIHtcbiAgICAgICAgbG9jYWxlID0gXCJ6aC1DTlwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpO1xuICAgIH1cbiAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKGFwcHJvdmVKdWRnZSkge1xuICAgICAgY2FzZSAnYXBwcm92ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIGFwcHJvdmVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVqZWN0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJlamVjdGVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGVybWluYXRlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgdGVybWluYXRlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlYXNzaWduZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJlYXNzaWduZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWxvY2F0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJlbG9jYXRlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JldHJpZXZlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmV0cmlldmVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmV0dXJuZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJldHVybmVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVhZGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWFkZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGFwcHJvdmVTdGF0dXNUZXh0O1xuICB9LFxuICBfdDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5KTtcbiAgfSxcbiAgbXlBcHByb3ZlRGVzY3JpcHRpb246IGZ1bmN0aW9uKGFwcHJvdmVJZCkge1xuICAgIHZhciBteUFwcHJvdmUsIHJlZiwgcmVmMTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgbXlBcHByb3ZlID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5teUFwcHJvdmUpICE9IG51bGwgPyByZWYxLmdldCgpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAobXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgaWYgKCFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiAobXlBcHByb3ZlICE9IG51bGwgPyBteUFwcHJvdmUuZGVzY3JpcHRpb24gOiB2b2lkIDApIHx8IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzRm9yd2FyZDogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICBpZiAoYXBwcm92ZWQgJiYgYXBwcm92ZWQudHlwZSA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzaG93Rm9yd2FyZERlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChkYi5pbnN0YW5jZXMuZmluZChhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFwcHJvdmUgJiYgYXBwcm92ZS50eXBlID09PSAnZm9yd2FyZCcgJiYgYXBwcm92ZS5mcm9tX3VzZXIgPT09IE1ldGVvci51c2VySWQoKSAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpICYmIGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgbWFya0Rvd25Ub0h0bWw6IGZ1bmN0aW9uKG1hcmtEb3duU3RyaW5nKSB7XG4gICAgdmFyIHJlbmRlcmVyO1xuICAgIGlmIChtYXJrRG93blN0cmluZykge1xuICAgICAgcmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcbiAgICAgIHJlbmRlcmVyLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIgKyBocmVmICsgXCInIHRpdGxlPSdcIiArIHRpdGxlICsgXCInPlwiICsgdGV4dCArIFwiPC9hPlwiO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge1xuICAgICAgICByZW5kZXJlcjogcmVuZGVyZXJcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sXG4gIGlzRGlzdHJpYnV0ZTogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChhcHByb3ZlICYmIGFwcHJvdmUudHlwZSA9PT0gJ2Rpc3RyaWJ1dGUnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzaG93RGlzdHJpYnV0ZURlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIHZhciBpbnM7XG4gICAgaWYgKGRiLmluc3RhbmNlcy5maW5kKGFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYXBwcm92ZSAmJiBhcHByb3ZlLnR5cGUgPT09ICdkaXN0cmlidXRlJyAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpICYmIGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJyAmJiBTdGVlZG9zLmlzTGVnYWxWZXJzaW9uKCcnLCBcIndvcmtmbG93LmVudGVycHJpc2VcIikpIHtcbiAgICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBhcHByb3ZlLmluc3RhbmNlXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGZsb3c6IDEsXG4gICAgICAgICAgc3BhY2U6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoaW5zICYmIGlucy5mbG93ICYmIGlucy5zcGFjZSkge1xuICAgICAgICBpZiAoV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgTWV0ZW9yLnVzZXJJZCgpKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXBwcm92ZS5mcm9tX3VzZXIgPT09IE1ldGVvci51c2VySWQoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBmaW5pc2hEYXRlU2NoZW1hOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoU3RlZWRvcy5pc0FuZHJvaWRPcklPUygpKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYSh7XG4gICAgICAgIGZpbmlzaF9kYXRlOiB7XG4gICAgICAgICAgYXV0b2Zvcm06IHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGF0ZXRpbWUtbG9jYWxcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICAgIHR5cGU6IERhdGVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKHtcbiAgICAgICAgZmluaXNoX2RhdGU6IHtcbiAgICAgICAgICBhdXRvZm9ybToge1xuICAgICAgICAgICAgdHlwZTogXCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcIixcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGF0ZVRpbWVQaWNrZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgIGZvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCIsXG4gICAgICAgICAgICAgIGlnbm9yZVJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgICBsb2NhbGU6IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIiksXG4gICAgICAgICAgICAgIHdpZGdldFBvc2l0aW9uaW5nOiB7XG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgICAgdHlwZTogRGF0ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGZpbmlzaERhdGVWYWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaW5pc2hfZGF0ZTogdGhpcy5maW5pc2hfZGF0ZVxuICAgIH07XG4gIH0sXG5cbiAgLypcbiAgICAgXHTmraTlh73mlbDnlKjkuo7mjqfliLbmmK/lkKbmmL7npLp0cmFjZXMgdmlld1xuICAgICBcdHRydWU6IOaYvuekunRyYWNlcyB2aWV3LOetvuaguOWOhueoi+aMiemSrueCueWHu+WQjuaYr+ebtOaOpeWumuS9jeWIsHRyYWNlcyB2aWV3XG4gICAgIFx0ZmFsc2U6IOS4jeaYvuekunRyYWNlcyB2aWV377yM562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCOLOS7pU1vZGFsIOaWueW8j+aYvuekunRyYWNlcyB2aWV3XG4gICAqL1xuICBzaG93VHJhY2VzVmlldzogZnVuY3Rpb24oZm9ybSwgZm9ybV92ZXJzaW9uKSB7XG4gICAgdmFyIHJlZiwgc2hvd19tb2RhbF90cmFjZXNfbGlzdDtcbiAgICBzaG93X21vZGFsX3RyYWNlc19saXN0ID0gKChyZWYgPSBkYi5zcGFjZV9zZXR0aW5ncy5maW5kT25lKHtcbiAgICAgIHNwYWNlOiBTZXNzaW9uLmdldChcInNwYWNlSWRcIiksXG4gICAgICBrZXk6IFwic2hvd19tb2RhbF90cmFjZXNfbGlzdFwiXG4gICAgfSkpICE9IG51bGwgPyByZWYudmFsdWVzIDogdm9pZCAwKSB8fCBmYWxzZTtcbiAgICByZXR1cm4gIXNob3dfbW9kYWxfdHJhY2VzX2xpc3Q7XG4gIH0sXG4gIGdldEluc3RhbmNlU3RhdGVUZXh0OiBmdW5jdGlvbihpbnN0YW5jZV9pZCkge1xuICAgIHZhciBpbnMsIGxvY2FsZSwgdGV4dDtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgICAgaWYgKGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnemgtY24nKSB7XG4gICAgICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKTtcbiAgICB9XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgaXNfcmVhZDogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghaW5zKSB7XG4gICAgICByZXR1cm4gVEFQaTE4bi5fXygnaW5zdGFuY2VfZGVsZXRlZCcsIHt9LCBsb2NhbGUpO1xuICAgIH1cbiAgICB0ZXh0ID0gJyc7XG4gICAgaWYgKGlucy5zdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgIHRleHQgPSBUQVBpMThuLl9fKCdjb21wbGV0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICB9IGVsc2UgaWYgKGlucy5zdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XG4gICAgICB0ZXh0ID0gVEFQaTE4bi5fXygncGVuZGluZycsIHt9LCBsb2NhbGUpO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnZHJhZnQnKSB7XG4gICAgICBpZiAoaW5zLmlzX3JlYWQpIHtcbiAgICAgICAgdGV4dCA9IFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmVfcmVhZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmVfbm90X3lldF9oYW5kbGVkJywge30sIGxvY2FsZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9LFxuICBnZXRJbnN0YW5jZVN0YXRlQ29sb3I6IGZ1bmN0aW9uKGluc3RhbmNlX2lkKSB7XG4gICAgdmFyIGNsYSwgaW5zO1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGlzX3JlYWQ6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWlucykge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNsYSA9ICcnO1xuICAgIGlmIChpbnMuc3RhdGUgPT09ICdkcmFmdCcpIHtcbiAgICAgIGlmIChpbnMuaXNfcmVhZCkge1xuICAgICAgICBjbGEgPSAnYmx1ZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGEgPSAncmVkJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsYTtcbiAgfSxcbiAgZmlyc3RUcmFjZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IDA7XG4gIH0sXG4gIGxhc3RfZGlzdHJpYnV0ZV9mcm9tOiBmdW5jdGlvbihpbnN0YW5jZV9pZCkge1xuICAgIHZhciBkaXNfaW5mbywgaW5zLCB1c2VyO1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWQsXG4gICAgICBkaXN0cmlidXRlX2Zyb21faW5zdGFuY2U6IHtcbiAgICAgICAgJGV4aXN0czogdHJ1ZVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBjcmVhdGVkOiAxLFxuICAgICAgICBjcmVhdGVkX2J5OiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlucykge1xuICAgICAgZGlzX2luZm8gPSB7fTtcbiAgICAgIHVzZXIgPSB7fTtcbiAgICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgICAgdXNlciA9IFVVZmxvd19hcGkuZ2V0TmFtZUZvclVzZXIoaW5zLmNyZWF0ZWRfYnkpO1xuICAgICAgfSBlbHNlIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgICAgdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIF9pZDogaW5zLmNyZWF0ZWRfYnlcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5uYW1lKSB7XG4gICAgICAgIGRpc19pbmZvLmZyb21fdXNlcl9uYW1lID0gdXNlci5uYW1lO1xuICAgICAgICBkaXNfaW5mby5jcmVhdGVkID0gaW5zLmNyZWF0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIV8uaXNFbXB0eShkaXNfaW5mbykpIHtcbiAgICAgICAgcmV0dXJuIGRpc19pbmZvO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNDQ09yRGlzdHJpYnV0ZU9yRm9yd2FyZFRlcm1pbmF0ZWQ6IGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICBpZiAoKGFwcHJvdmUudHlwZSA9PT0gJ2NjJyB8fCBhcHByb3ZlLnR5cGUgPT09ICdkaXN0cmlidXRlJyB8fCBhcHByb3ZlLnR5cGUgPT09ICdmb3J3YXJkJykgJiYgYXBwcm92ZS5qdWRnZSA9PT0gJ3Rlcm1pbmF0ZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBqdWRnZVRlcm1pbmF0ZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIGp1ZGdlID09PSAndGVybWluYXRlZCc7XG4gIH0sXG4gIGluc3RhbmNlRXhpc3RzOiBmdW5jdGlvbihpbnN0YW5jZV9pZCkge1xuICAgIHJldHVybiAhIWRiLmluc3RhbmNlcy5maW5kKGluc3RhbmNlX2lkKS5jb3VudCgpO1xuICB9LFxuICBhZ2VudERlc2NyaXB0aW9uOiBmdW5jdGlvbih1c2VyTmFtZSkge1xuICAgIHZhciBsb2NhbGU7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICAgIGlmIChsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3poLWNuJykge1xuICAgICAgICBsb2NhbGUgPSBcInpoLUNOXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIik7XG4gICAgfVxuICAgIHJldHVybiBUQVBpMThuLl9fKCdwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXNfZGVzY3JpcHRpb24nLCB7XG4gICAgICB1c2VyTmFtZTogdXNlck5hbWVcbiAgICB9LCBsb2NhbGUpO1xuICB9LFxuICB0cmFjZU5hbWU6IGZ1bmN0aW9uKGluc3RhbmNlX2lkLCB0cmFjZUlkKSB7XG4gICAgdmFyIHJlZiwgcmVmMTtcbiAgICByZXR1cm4gKHJlZiA9IF8uZmluZCgocmVmMSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkLCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgdHJhY2VzOiAxXG4gICAgICB9XG4gICAgfSkpICE9IG51bGwgPyByZWYxLnRyYWNlcyA6IHZvaWQgMCwgZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgIHJldHVybiB0cmFjZS5faWQgPT09IHRyYWNlSWQ7XG4gICAgfSkpICE9IG51bGwgPyByZWYubmFtZSA6IHZvaWQgMDtcbiAgfVxufTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLmRhdGVGb3JtYXQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIHV0Y09mZnNldDtcbiAgICBpZiAoZGF0ZSkge1xuICAgICAgdXRjT2Zmc2V0ID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnV0Y09mZnNldDtcbiAgICAgIHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZShkYXRlLCB1dGNPZmZzZXQpO1xuICAgIH1cbiAgfTtcbiAgVHJhY2VzVGVtcGxhdGUuaGVscGVycy5fdCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBsb2NhbGU7XG4gICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpO1xuICB9O1xuICBUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLnNob3dEZWxldGVCdXR0b24gPSBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cblxuVHJhY2VzVGVtcGxhdGUuZXZlbnRzID0ge1xuICAnY2xpY2sgLmNjLWFwcHJvdmUtcmVtb3ZlJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGFwcHJvdmVJZCwgaW5zdGFuY2VJZDtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGxpbmcgKiAxICE9PSAxKSB7XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDE7XG4gICAgICAkKFwiaVwiLCBldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcyhcImZhLXNwaW5cIik7XG4gICAgICBpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKTtcbiAgICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBNZXRlb3IuY2FsbCgnY2NfcmVtb3ZlJywgaW5zdGFuY2VJZCwgYXBwcm92ZUlkLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0b2FzdHIuZXJyb3IoZXJyKTtcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDA7XG4gICAgICAgICAgJChcImlcIiwgZXZlbnQuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoXCJmYS1zcGluXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhUQVBpMThuLl9fKFwicmVtb3ZlX2NjX2FwcHJvdmVcIikpO1xuICAgICAgICAgIGlmICgkKFwiLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbFwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIE1vZGFsLmhpZGUoXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gICdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tY2MtYXBwcm92ZS1yZW1vdmUnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgYXBwcm92ZUlkLCBpbnN0YW5jZUlkO1xuICAgIGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpO1xuICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgIE1ldGVvci5jYWxsKCdjY19yZW1vdmUnLCBpbnN0YW5jZUlkLCBhcHByb3ZlSWQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRvYXN0ci5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICB0b2FzdHIuc3VjY2VzcyhUQVBpMThuLl9fKFwicmVtb3ZlX2NjX2FwcHJvdmVcIikpO1xuICAgICAgICBNb2RhbC5oaWRlKFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICAnY2xpY2sgLmFwcHJvdmUtaXRlbSwuYXBwcm92ZS1kZXNjcmlwdGlvbic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHJldHVybiBNb2RhbC5zaG93KFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIsIHRoaXMpO1xuICB9LFxuICAndGFwaG9sZCAuYXBwcm92ZS1pdGVtLC5hcHByb3ZlLWRlc2NyaXB0aW9uJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgcmV0dXJuIE1vZGFsLnNob3coXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIiwgdGhpcyk7XG4gIH0sXG4gICd0YXBlbmQgLmFwcHJvdmUtaXRlbSwuYXBwcm92ZS1kZXNjcmlwdGlvbic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWZvcndhcmQtYXBwcm92ZS1yZW1vdmUnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgYXBwcm92ZUlkLCBpbnN0YW5jZUlkLCB0cmFjZUlkO1xuICAgIGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpO1xuICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgdHJhY2VJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LnRyYWNlO1xuICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKTtcbiAgICBNZXRlb3IuY2FsbCgnZm9yd2FyZF9yZW1vdmUnLCBpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRvYXN0ci5lcnJvcihUQVBpMThuLl9fKGVyci5yZWFzb24pKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcImluc3RhbmNlX2FwcHJvdmVfZm9yd2FyZF9yZW1vdmVfc3VjY2Vzc1wiKSk7XG4gICAgICAgIE1vZGFsLmhpZGUoXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZm9yd2FyZC1pbnN0YW5jZS1sb29rJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGZvcndhcmRfaW5zdGFuY2UsIGZvcndhcmRfc3BhY2U7XG4gICAgZm9yd2FyZF9zcGFjZSA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmZvcndhcmRzcGFjZTtcbiAgICBmb3J3YXJkX2luc3RhbmNlID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuZm9yd2FyZGluc3RhbmNlO1xuICAgIHJldHVybiBTdGVlZG9zLm9wZW5XaW5kb3coU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgZm9yd2FyZF9zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBmb3J3YXJkX2luc3RhbmNlKSk7XG4gIH0sXG4gICdjbGljayAuYnRuLW1vZGlmaWNhdGlvbic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKTtcbiAgICBpZiAoIVN0ZWVkb3MuaXNBbmRyb2lkT3JJT1MoKSkge1xuICAgICAgcmV0dXJuIFRyYWNrZXIuYWZ0ZXJGbHVzaChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICQoXCIjaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsICNmaW5pc2hfaW5wdXRcIikub24oXCJkcC5zaG93XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkKFwiLm1vZGFsLWJvZHlcIikuc2Nyb2xsVG9wKDEwMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAnY2xpY2sgLmJ0bi1jYW5jZWxCdXQnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICByZXR1cm4gdGVtcGxhdGUuaXNfZWRpdGluZy5zZXQoIXRlbXBsYXRlLmlzX2VkaXRpbmcuZ2V0KCkpO1xuICB9LFxuICAnY2xpY2sgLmJ0bi1zYXZlQnV0JzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGFwcHJvdmVJZCwgZmluaXNoX2lucHV0LCBpbnN0YW5jZUlkLCBvcGluaW9uX2lucHV0LCB0cmFjZUlkO1xuICAgIGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpO1xuICAgIGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmU7XG4gICAgdHJhY2VJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LnRyYWNlO1xuICAgIG9waW5pb25faW5wdXQgPSAkKCcjb3Bpbmlvbl9pbnB1dCcpLnZhbCgpO1xuICAgIGZpbmlzaF9pbnB1dCA9IEF1dG9Gb3JtLmdldEZpZWxkVmFsdWUoXCJmaW5pc2hfZGF0ZVwiLCBcImZpbmlzaERhdGVBdXRvRm9ybVwiKTtcbiAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgcmV0dXJuIE1ldGVvci5jYWxsKCdjaGFuZ2VfYXBwcm92ZV9pbmZvJywgaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCBvcGluaW9uX2lucHV0LCBmaW5pc2hfaW5wdXQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRvYXN0ci5lcnJvcihUQVBpMThuLl9fKGVyci5yZWFzb24pKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgdG9hc3RyLnN1Y2Nlc3ModChcImluc3RhbmNlX2FwcHJvdmVfbW9kYWxfbW9kaWZpY2F0aW9uc2F2ZVwiKSk7XG4gICAgICAgIE1vZGFsLmhpZGUoXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZGlzdHJpYnV0ZS1hcHByb3ZlLXJlbW92ZSc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIE1vZGFsLmFsbG93TXVsdGlwbGUgPSB0cnVlO1xuICAgIHJldHVybiBNb2RhbC5zaG93KCdjYW5jZWxfZGlzdHJpYnV0ZV9tb2RhbCcpO1xuICB9XG59O1xuIiwiUmVsYXRlZEluc3RhbmNlcy5oZWxwZXJzID1cclxuXHRzaG93UmVsYXRlZEluc3RhY2VzOiAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnMgPSB0aGlzLmluc3RhbmNlXHJcblx0XHRpZiBpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzICYmIF8uaXNBcnJheShpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzKVxyXG5cdFx0XHRpZiBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiB7JGluOiBpbnMucmVsYXRlZF9pbnN0YW5jZXN9fSwge2ZpZWxkczoge3NwYWNlOiAxLCBuYW1lOiAxfX0pLmNvdW50KCkgPiAwXHJcblx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRyZWxhdGVkX2luc3RhY2VzOiAtPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnMgPSB0aGlzLmluc3RhbmNlXHJcblx0XHRpZiBpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzICYmIF8uaXNBcnJheShpbnM/LnJlbGF0ZWRfaW5zdGFuY2VzKVxyXG5cdFx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogaW5zLnJlbGF0ZWRfaW5zdGFuY2VzfX0sIHtmaWVsZHM6IHtzcGFjZTogMSwgbmFtZTogMX19KS5mZXRjaCgpXHJcblxyXG5cdHJlbGF0ZWRfaW5zdGFjZV91cmw6IChpbnMpIC0+XHJcblxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50ICYmIChTdGVlZG9zLmlzTW9iaWxlKCkgfHwgU3RlZWRvcy5pc0NvcmRvdmEoKSlcclxuXHRcdFx0cmV0dXJuICcnXHJcblxyXG5cdFx0YWJzb2x1dGUgPSBmYWxzZVxyXG5cclxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRhYnNvbHV0ZSA9IHRoaXMuYWJzb2x1dGVcclxuXHRcdGlmIGFic29sdXRlXHJcblx0XHRcdHJldHVybiBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIitpbnMuc3BhY2UrXCIvdmlldy9yZWFkb25seS9cIiArIGlucy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiK2lucy5zcGFjZStcIi92aWV3L3JlYWRvbmx5L1wiICsgaW5zLl9pZCArICc/aGlkZV90cmFjZXM9MCcpXHJcblxyXG5cdF90OiAoa2V5KS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblx0XHRcdHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSlcclxuXHJcblx0c2hvd19kZWxldGU6ICgpLT5cclxuXHRcdGlmICFNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRlbHNlXHJcblx0XHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0XHRyZXR1cm4gaW5zLnN0YXRlID09ICdkcmFmdCciLCJSZWxhdGVkSW5zdGFuY2VzLmhlbHBlcnMgPSB7XG4gIHNob3dSZWxhdGVkSW5zdGFjZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnM7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucyA9IHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuICAgIGlmICgoaW5zICE9IG51bGwgPyBpbnMucmVsYXRlZF9pbnN0YW5jZXMgOiB2b2lkIDApICYmIF8uaXNBcnJheShpbnMgIT0gbnVsbCA/IGlucy5yZWxhdGVkX2luc3RhbmNlcyA6IHZvaWQgMCkpIHtcbiAgICAgIGlmIChkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogaW5zLnJlbGF0ZWRfaW5zdGFuY2VzXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgbmFtZTogMVxuICAgICAgICB9XG4gICAgICB9KS5jb3VudCgpID4gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgcmVsYXRlZF9pbnN0YWNlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucztcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zID0gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG4gICAgaWYgKChpbnMgIT0gbnVsbCA/IGlucy5yZWxhdGVkX2luc3RhbmNlcyA6IHZvaWQgMCkgJiYgXy5pc0FycmF5KGlucyAhPSBudWxsID8gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwKSkge1xuICAgICAgcmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBpbnMucmVsYXRlZF9pbnN0YW5jZXNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICBuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgfVxuICB9LFxuICByZWxhdGVkX2luc3RhY2VfdXJsOiBmdW5jdGlvbihpbnMpIHtcbiAgICB2YXIgYWJzb2x1dGU7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCAmJiAoU3RlZWRvcy5pc01vYmlsZSgpIHx8IFN0ZWVkb3MuaXNDb3Jkb3ZhKCkpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGFic29sdXRlID0gZmFsc2U7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgYWJzb2x1dGUgPSB0aGlzLmFic29sdXRlO1xuICAgIH1cbiAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgIHJldHVybiBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGlucy5zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBpbnMuX2lkICsgJz9oaWRlX3RyYWNlcz0wJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIgKyBpbnMuc3BhY2UgKyBcIi92aWV3L3JlYWRvbmx5L1wiICsgaW5zLl9pZCArICc/aGlkZV90cmFjZXM9MCcpO1xuICAgIH1cbiAgfSxcbiAgX3Q6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBsb2NhbGU7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICAgIHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSk7XG4gICAgfVxuICB9LFxuICBzaG93X2RlbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucztcbiAgICBpZiAoIU1ldGVvci5pc0NsaWVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgIHJldHVybiBpbnMuc3RhdGUgPT09ICdkcmFmdCc7XG4gICAgfVxuICB9XG59O1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRzZXRfaW5zdGFuY2Vfc3RlcF9hcHByb3ZlOiAoaW5zX2lkLCBzdGVwX2FwcHJvdmUpLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWR9LCB7ZmllbGRzOiB7c3RhdGU6IDF9fSlcclxuXHJcblx0XHRpZiBpbnMuc3RhdGUgIT0gJ2RyYWZ0J1xyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUge19pZDogaW5zX2lkfSwgeyRzZXQ6IHtzdGVwX2FwcHJvdmU6IHN0ZXBfYXBwcm92ZX19IiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBzZXRfaW5zdGFuY2Vfc3RlcF9hcHByb3ZlOiBmdW5jdGlvbihpbnNfaWQsIHN0ZXBfYXBwcm92ZSkge1xuICAgIHZhciBpbnM7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnMuc3RhdGUgIT09ICdkcmFmdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgX2lkOiBpbnNfaWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIHN0ZXBfYXBwcm92ZTogc3RlcF9hcHByb3ZlXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG5cclxuXHRnZXRfaW5zdGFuY2VfZGF0YTogZnVuY3Rpb24gKGluc3RhbmNlX2lkLCBmb3JtQ2FjaGVkLCBmbG93Q2FjaGVkKSB7XHJcblxyXG5cdFx0Y2hlY2soaW5zdGFuY2VfaWQsIFN0cmluZyk7XHJcblx0XHRjaGVjayhmb3JtQ2FjaGVkLCBCb29sZWFuKTtcclxuXHRcdGNoZWNrKGZsb3dDYWNoZWQsIEJvb2xlYW4pO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKTtcclxuXHJcblx0XHRpZiAoIWluc3RhbmNlKVxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGluc3RhbmNlOiBudWxsXHJcblx0XHRcdH07XHJcblxyXG5cdFx0aWYgKGZvcm1DYWNoZWQgJiYgZmxvd0NhY2hlZClcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRpbnN0YW5jZTogaW5zdGFuY2VcclxuXHRcdFx0fTtcclxuXHJcblx0XHRpZiAoIWZvcm1DYWNoZWQpIHtcclxuXHRcdFx0dmFyIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cdFx0XHR2YXIgZm9ybV92ZXJzaW9uID0ge307XHJcblx0XHRcdGlmIChmb3JtLmN1cnJlbnQuX2lkID09IGluc3RhbmNlLmZvcm1fdmVyc2lvbikge1xyXG5cdFx0XHRcdGZvcm1fdmVyc2lvbiA9IGZvcm0uY3VycmVudDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRmb3JtX3ZlcnNpb24gPSBfLndoZXJlKGZvcm0uaGlzdG9yeXMsIHtfaWQ6IGluc3RhbmNlLmZvcm1fdmVyc2lvbn0pWzBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdGlmICghZmxvd0NhY2hlZCkge1xyXG5cdFx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XHJcblx0XHRcdHZhciBmbG93X3ZlcnNpb24gPSB7fTtcclxuXHRcdFx0aWYgKGZsb3cuY3VycmVudC5faWQgPT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uKSB7XHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50O1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGZsb3dfdmVyc2lvbiA9IF8ud2hlcmUoZmxvdy5oaXN0b3J5cywge19pZDogaW5zdGFuY2UuZmxvd192ZXJzaW9ufSlbMF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRpbnN0YW5jZTogaW5zdGFuY2UsXHJcblx0XHRcdGZvcm1fdmVyc2lvbjogZm9ybV92ZXJzaW9uLFxyXG5cdFx0XHRmbG93X3ZlcnNpb246IGZsb3dfdmVyc2lvblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG5cclxuXHRkcmFmdF9zYXZlX2luc3RhbmNlOiBmdW5jdGlvbiAoaW5zKSB7XHJcblx0XHRpZiAoIXRoaXMudXNlcklkKVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR2YXIgcmVzdWx0ID0gdHJ1ZTtcclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblx0XHR2YXIgaW5zX2lkID0gaW5zLl9pZDtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGlucy50cmFjZXNbMF0uX2lkO1xyXG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLl9pZDtcclxuXHRcdHZhciBkZXNjcmlwdGlvbiA9IGlucy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uZGVzY3JpcHRpb247XHJcblx0XHR2YXIgbmV4dF9zdGVwcyA9IGlucy50cmFjZXNbMF0uYXBwcm92ZXNbMF0ubmV4dF9zdGVwcztcclxuXHRcdHZhciB2YWx1ZXMgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLnZhbHVlcyB8fCB7fTtcclxuXHRcdHZhciBhcHBsaWNhbnRfaWQgPSBpbnMuYXBwbGljYW50O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRhcHBsaWNhbnQ6IDEsXHJcblx0XHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdFx0c3VibWl0dGVyOiAxLFxyXG5cdFx0XHRcdHRyYWNlczogMSxcclxuXHRcdFx0XHRmb3JtOiAxLFxyXG5cdFx0XHRcdGZsb3dfdmVyc2lvbjogMSxcclxuXHRcdFx0XHRzcGFjZTogMSxcclxuXHRcdFx0XHRmbG93OiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHZhciBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xyXG5cdFx0dmFyIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xyXG5cdFx0dmFyIGZvcm1faWQgPSBpbnN0YW5jZS5mb3JtO1xyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHRcdHZhciBjdXJyZW50X3RyYWNlID0gXy5maW5kKHRyYWNlcywgZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0cmV0dXJuIHQuX2lkID09IHRyYWNlX2lkO1xyXG5cdFx0fSk7XHJcblx0XHRjdXJyZW50X3RyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRpZiAoYS5faWQgPT0gYXBwcm92ZV9pZCkge1xyXG5cdFx0XHRcdGluZGV4ID0gaWR4O1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0dmFyIGtleV9zdHIgPSAndHJhY2VzLiQuYXBwcm92ZXMuJyArIGluZGV4ICsgJy4nO1xyXG5cclxuXHRcdC8vIOWIpOaWreS4gOS4qmluc3RhbmNl5piv5ZCm5Li65ouf56i/54q25oCBXHJcblx0XHR2YXIgY3VycmVudF91c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XHJcblx0XHRcdF9pZDogdGhpcy51c2VySWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0bG9jYWxlOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGxhbmcgPSBjdXJyZW50X3VzZXIubG9jYWxlID09ICd6aC1jbicgPyAnemgtQ04nIDogJ2VuJztcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlLCBsYW5nKTtcclxuXHRcdC8vIOWIpOaWreS4gOS4queUqOaIt+aYr+WQpuaYr+S4gOS4qmluc3RhbmNl55qE5o+Q5Lqk6ICFXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VTdWJtaXR0ZXIoaW5zdGFuY2UsIHRoaXMudXNlcklkKTtcclxuXHJcblx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcImN1cnJlbnQuX2lkXCI6IDEsXHJcblx0XHRcdFx0XCJjdXJyZW50LmZvcm1fdmVyc2lvblwiOiAxLFxyXG5cdFx0XHRcdFwibmFtZVwiOiAxLFxyXG5cdFx0XHRcdFwiY3VycmVudC5zdGVwc1wiOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRpZiAoZmxvdy5jdXJyZW50Ll9pZCAhPSBpbnN0YW5jZS5mbG93X3ZlcnNpb24pIHtcclxuXHRcdFx0cmVzdWx0ID0gXCJ1cGdyYWRlZFwiO1xyXG5cdFx0XHR2YXIgc3RhcnRfc3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uIChzKSB7XHJcblx0XHRcdFx0cmV0dXJuIHMuc3RlcF90eXBlID09IFwic3RhcnRcIjtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIOa1geeoi+W3suWNh+e6p1xyXG5cdFx0XHRzZXRPYmouZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50Ll9pZDtcclxuXHRcdFx0c2V0T2JqLmZvcm1fdmVyc2lvbiA9IGZsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XHJcblx0XHRcdC8vIOWtmOWFpeW9k+WJjeacgOaWsOeJiGZsb3fkuK3lvIDlp4voioLngrnnmoRzdGVwX2lkXHJcblx0XHRcdHNldE9ialtcInRyYWNlcy4kLnN0ZXBcIl0gPSBzdGFydF9zdGVwLl9pZDtcclxuXHRcdFx0c2V0T2JqW1widHJhY2VzLiQubmFtZVwiXSA9IHN0YXJ0X3N0ZXAubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaW5zdGFuY2UuYXBwbGljYW50ICE9IGFwcGxpY2FudF9pZCkge1xyXG5cdFx0XHQvLyDnlLPor7fkurrlt7Llj5jmjaJcclxuXHRcdFx0dmFyIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKGFwcGxpY2FudF9pZCwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhciBhcHBsaWNhbnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0dXNlcjogYXBwbGljYW50X2lkXHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcdG9yZ2FuaXphdGlvbjogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhciBvcmdfaWQgPSBhcHBsaWNhbnQuZmV0Y2goKVswXS5vcmdhbml6YXRpb247XHJcblx0XHRcdHZhciBvcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUob3JnX2lkLCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudCA9IGFwcGxpY2FudF9pZDtcclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudF9uYW1lID0gdXNlci5uYW1lO1xyXG5cdFx0XHRzZXRPYmouYXBwbGljYW50X29yZ2FuaXphdGlvbiA9IG9yZ19pZDtcclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZSA9IG9yZ2FuaXphdGlvbi5uYW1lO1xyXG5cdFx0XHRzZXRPYmouYXBwbGljYW50X29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG9yZ2FuaXphdGlvbi5mdWxsbmFtZTtcclxuXHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ3VzZXInXSA9IGFwcGxpY2FudF9pZDtcclxuXHRcdFx0c2V0T2JqW2tleV9zdHIgKyAndXNlcl9uYW1lJ10gPSB1c2VyLm5hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0T2JqW2tleV9zdHIgKyAndmFsdWVzJ10gPSB2YWx1ZXM7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdqdWRnZSddID0gJ3N1Ym1pdHRlZCc7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdyZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRpZiAocmVzdWx0ICE9IFwidXBncmFkZWRcIiAmJiBuZXh0X3N0ZXBzKSB7XHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ25leHRfc3RlcHMnXSA9IG5leHRfc3RlcHM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g6K6h566X55Sz6K+35Y2V5qCH6aKYXHJcblx0XHR2YXIgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xyXG5cdFx0XHRfaWQ6IGZvcm1faWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XCJjdXJyZW50Lm5hbWVfZm9ydW1sYVwiOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm0uY3VycmVudC5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdC8vIHZhciBpc2NyaXB0ID0gbmFtZV9mb3J1bWxhLnJlcGxhY2UoL1xcey9nLCBcIih2YWx1ZXNbJ1wiKS5yZXBsYWNlKC9cXH0vZywgXCInXSB8fCAnJylcIik7XHJcblx0XHRcdC8vIHZhciByZXYgPSBldmFsKGlzY3JpcHQpO1xyXG5cdFx0XHRzZXRPYmoubmFtZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VOYW1lKGlucywgdmFsdWVzKTtcclxuXHRcdH1cclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZV9pZFxyXG5cdFx0fSwge1xyXG5cdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRpbmJveF9zYXZlX2luc3RhbmNlOiBmdW5jdGlvbiAoYXBwcm92ZSkge1xyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblx0XHR2YXIgaW5zX2lkID0gYXBwcm92ZS5pbnN0YW5jZTtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGFwcHJvdmUudHJhY2U7XHJcblx0XHR2YXIgYXBwcm92ZV9pZCA9IGFwcHJvdmUuaWQ7XHJcblx0XHR2YXIgdmFsdWVzID0gYXBwcm92ZS52YWx1ZXM7XHJcblx0XHR2YXIgbmV4dF9zdGVwcyA9IGFwcHJvdmUubmV4dF9zdGVwcztcclxuXHRcdHZhciBkZXNjcmlwdGlvbiA9IGFwcHJvdmUuZGVzY3JpcHRpb247XHJcblx0XHR2YXIganVkZ2UgPSBhcHByb3ZlLmp1ZGdlO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHR0cmFjZXM6IDEsXHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uOiAxLFxyXG5cdFx0XHRcdGZsb3c6IDEsXHJcblx0XHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdFx0Zm9ybTogMSxcclxuXHRcdFx0XHRmb3JtX3ZlcnNpb246IDEsXHJcblx0XHRcdFx0dmFsdWVzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHZhciB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCBmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRyZXR1cm4gdC5faWQgPT0gdHJhY2VfaWQ7XHJcblx0XHR9KTtcclxuXHRcdHZhciBjdXJyZW50X2FwcHJvdmUgPSBfLmZpbmQoY3VycmVudF90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24gKGEpIHtcclxuXHRcdFx0cmV0dXJuIGEuX2lkID09IGFwcHJvdmVfaWQ7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyDliKTmlq3kuIDkuKppbnN0YW5jZeaYr+WQpuS4uuWuoeaguOS4reeKtuaAgVxyXG5cdFx0dmFyIGN1cnJlbnRfdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoe1xyXG5cdFx0XHRfaWQ6IHRoaXMudXNlcklkXHJcblx0XHR9LCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdGxvY2FsZTogMVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBsYW5nID0gY3VycmVudF91c2VyLmxvY2FsZSA9PSAnemgtY24nID8gJ3poLUNOJyA6ICdlbic7XHJcblx0XHR0cnkge1xyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VQZW5kaW5nKGluc3RhbmNlLCBsYW5nKTtcclxuXHRcdFx0Ly8g5Yik5pat5LiA5LiqdHJhY2XmmK/lkKbkuLrmnKrlrozmiJDnirbmgIFcclxuXHRcdFx0dXVmbG93TWFuYWdlci5pc1RyYWNlTm90RmluaXNoZWQoY3VycmVudF90cmFjZSk7XHJcblx0XHRcdC8vIOWIpOaWreS4gOS4qmFwcHJvdmXmmK/lkKbkuLrmnKrlrozmiJDnirbmgIFcclxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0FwcHJvdmVOb3RGaW5pc2hlZChjdXJyZW50X2FwcHJvdmUpO1xyXG5cdFx0XHQvLyDliKTmlq3lvZPliY3nlKjmiLfmmK/lkKZhcHByb3ZlIOWvueW6lOeahOWkhOeQhuS6uuaIluS7o+eQhuS6ulxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzSGFuZGxlck9yQWdlbnQoY3VycmVudF9hcHByb3ZlLCB0aGlzLnVzZXJJZCk7XHJcblx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGUuc3RhY2spXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHZhciBmbG93X3ZlcnNpb24gPSBpbnN0YW5jZS5mbG93X3ZlcnNpb247XHJcblx0XHR2YXIgZmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XHJcblx0XHR2YXIgc3RlcF9pZCA9IFwiXCI7XHJcblx0XHRzdGVwX2lkID0gY3VycmVudF90cmFjZS5zdGVwO1xyXG5cdFx0dmFyIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0Y3VycmVudDogMSxcclxuXHRcdFx0XHRoaXN0b3J5czogMVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBzdGVwID0gbnVsbDtcclxuXHRcdGlmIChmbG93LmN1cnJlbnQuX2lkID09IGZsb3dfdmVyc2lvbikge1xyXG5cdFx0XHRmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAocykge1xyXG5cdFx0XHRcdGlmIChzLl9pZCA9PSBzdGVwX2lkKVxyXG5cdFx0XHRcdFx0c3RlcCA9IHM7XHJcblx0XHRcdH0pXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRmbG93Lmhpc3RvcnlzLmZvckVhY2goZnVuY3Rpb24gKGgpIHtcclxuXHRcdFx0XHRoLnN0ZXBzLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcclxuXHRcdFx0XHRcdGlmIChzLl9pZCA9PSBzdGVwX2lkKVxyXG5cdFx0XHRcdFx0XHRzdGVwID0gcztcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghc3RlcClcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0dmFyIHN0ZXBfdHlwZSA9IHN0ZXAuc3RlcF90eXBlO1xyXG5cclxuXHRcdGN1cnJlbnRfdHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbiAoYSwgaWR4KSB7XHJcblx0XHRcdGlmIChhLl9pZCA9PSBhcHByb3ZlX2lkKSB7XHJcblx0XHRcdFx0aW5kZXggPSBpZHg7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0dmFyIGtleV9zdHIgPSAndHJhY2VzLiQuYXBwcm92ZXMuJyArIGluZGV4ICsgJy4nO1xyXG5cclxuXHRcdHZhciBwZXJtaXNzaW9uc192YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMoYXBwcm92ZS52YWx1ZXMsIHN0ZXAucGVybWlzc2lvbnMsIGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbik7XHJcblxyXG5cdFx0dmFyIGNoYW5nZV92YWx1ZXMgPSBhcHByb3ZlTWFuYWdlci5nZXRDaGFuZ2VWYWx1ZXMoaW5zdGFuY2UudmFsdWVzLCBwZXJtaXNzaW9uc192YWx1ZXMpO1xyXG5cclxuXHRcdHNldE9iai52YWx1ZXMgPSBfLmV4dGVuZCgoaW5zdGFuY2UudmFsdWVzIHx8IHt9KSwgcGVybWlzc2lvbnNfdmFsdWVzKTtcclxuXHJcblx0XHRpZiAoIV8uaXNFbXB0eShjaGFuZ2VfdmFsdWVzKSkge1xyXG5cclxuXHRcdFx0dmFsdWVzX2hpc3RvcnkgPSBjdXJyZW50X2FwcHJvdmUudmFsdWVzX2hpc3RvcnkgfHwgW11cclxuXHJcblx0XHRcdHZhbHVlc19oaXN0b3J5LnB1c2goe1xyXG5cdFx0XHRcdHZhbHVlczogY2hhbmdlX3ZhbHVlcyxcclxuXHRcdFx0XHRjcmVhdGU6IG5ldyBEYXRlKClcclxuXHRcdFx0fSlcclxuXHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ3ZhbHVlc19oaXN0b3J5J10gPSB2YWx1ZXNfaGlzdG9yeVxyXG5cdFx0fVxyXG5cclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ2lzX3JlYWQnXSA9IHRydWU7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdyZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICd2YWx1ZXMnXSA9IHNldE9iai52YWx1ZXM7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICduZXh0X3N0ZXBzJ10gPSBuZXh0X3N0ZXBzO1xyXG5cdFx0aWYgKHN0ZXBfdHlwZSA9PSBcInN1Ym1pdFwiIHx8IHN0ZXBfdHlwZSA9PSBcInN0YXJ0XCIpIHtcclxuXHRcdFx0c2V0T2JqW2tleV9zdHIgKyAnanVkZ2UnXSA9IFwic3VibWl0dGVkXCI7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzZXRPYmpba2V5X3N0ciArICdqdWRnZSddID0ganVkZ2U7XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdHNldE9iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xyXG5cclxuXHRcdC8vIOiuoeeul+eUs+ivt+WNleagh+mimFxyXG5cdFx0dmFyIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cdFx0dmFyIGZvcm1fdiA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcclxuXHRcdHZhciBuYW1lX2ZvcnVtbGEgPSBmb3JtX3YubmFtZV9mb3J1bWxhO1xyXG5cdFx0aWYgKG5hbWVfZm9ydW1sYSkge1xyXG5cdFx0XHRzZXRPYmoubmFtZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VOYW1lKGluc3RhbmNlLCBzZXRPYmoudmFsdWVzKTtcclxuXHRcdH1cclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZV9pZFxyXG5cdFx0fSwge1xyXG5cdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxufSkiLCJNZXRlb3IubWV0aG9kcyh7XHJcblx0Ly8gPz8/IOiDveWQpuS8oOmYhee7meW9k+WJjeatpemqpOWkhOeQhuS6uiDlpoLmnpzlvZPliY3mraXpqqTmmK/kvJrnrb7jgIJcclxuXHRjY19kbzogZnVuY3Rpb24gKGFwcHJvdmUsIGNjX3VzZXJfaWRzLCBkZXNjcmlwdGlvbikge1xyXG5cclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbnNfaWQgPSBhcHByb3ZlLmluc3RhbmNlO1xyXG5cdFx0dmFyIHRyYWNlX2lkID0gYXBwcm92ZS50cmFjZTtcclxuXHRcdHZhciBhcHByb3ZlX2lkID0gYXBwcm92ZS5faWQ7XHJcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0c3BhY2U6IDEsXHJcblx0XHRcdFx0dHJhY2VzOiAxLFxyXG5cdFx0XHRcdGNjX3VzZXJzOiAxLFxyXG5cdFx0XHRcdHZhbHVlczogMVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZDtcclxuXHRcdHZhciBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xyXG5cdFx0dmFyIG5ld19hcHByb3ZlcyA9IFtdO1xyXG5cclxuXHRcdHZhciBmcm9tX3VzZXJfbmFtZSA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyX2lkLCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdG5hbWU6IDFcclxuXHRcdFx0fVxyXG5cdFx0fSkubmFtZVxyXG5cclxuXHRcdGNjX3VzZXJfaWRzLmZvckVhY2goZnVuY3Rpb24gKHVzZXJJZCwgaWR4KSB7XHJcblx0XHRcdHZhciB1c2VyID0gZGIudXNlcnMuZmluZE9uZSh1c2VySWQsIHtcclxuXHRcdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcdG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR2YXIgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcclxuXHRcdFx0XHR1c2VyOiB1c2VySWRcclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0b3JnYW5pemF0aW9uOiAxXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0dmFyIG9yZ19pZCA9IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xyXG5cdFx0XHR2YXIgb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKG9yZ19pZCwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRcdGZ1bGxuYW1lOiAxXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0dmFyIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgdXNlcklkKTtcclxuXHRcdFx0dmFyIGhhbmRsZXJfaWQgPSB1c2VySWQ7XHJcblx0XHRcdHZhciBoYW5kbGVyX2luZm8gPSB1c2VyO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9zcGFjZV91c2VyID0gc3BhY2VfdXNlcjtcclxuXHRcdFx0dmFyIGhhbmRsZXJfb3JnX2luZm8gPSBvcmdhbml6YXRpb247XHJcblx0XHRcdGlmIChhZ2VudCkge1xyXG5cdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudDtcclxuXHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGFnZW50LCB7XHJcblx0XHRcdFx0XHRmaWxlZHM6IHtcclxuXHRcdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGhhbmRsZXJfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBhZ2VudCk7XHJcblx0XHRcdFx0aGFuZGxlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhoYW5kbGVyX3NwYWNlX3VzZXIpO1xyXG5cdFx0XHRcdGNjX3VzZXJfaWRzW2lkeF0gPSBhZ2VudDtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgYXBwciA9IHtcclxuXHRcdFx0XHQnX2lkJzogbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cixcclxuXHRcdFx0XHQnaW5zdGFuY2UnOiBpbnNfaWQsXHJcblx0XHRcdFx0J3RyYWNlJzogdHJhY2VfaWQsXHJcblx0XHRcdFx0J2lzX2ZpbmlzaGVkJzogZmFsc2UsXHJcblx0XHRcdFx0J3VzZXInOiB1c2VySWQsXHJcblx0XHRcdFx0J3VzZXJfbmFtZSc6IHVzZXIubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcic6IGhhbmRsZXJfaWQsXHJcblx0XHRcdFx0J2hhbmRsZXJfbmFtZSc6IGhhbmRsZXJfaW5mby5uYW1lLFxyXG5cdFx0XHRcdCdoYW5kbGVyX29yZ2FuaXphdGlvbic6IGhhbmRsZXJfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sXHJcblx0XHRcdFx0J2hhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUnOiBoYW5kbGVyX29yZ19pbmZvLm5hbWUsXHJcblx0XHRcdFx0J2hhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lJzogaGFuZGxlcl9vcmdfaW5mby5mdWxsbmFtZSxcclxuXHRcdFx0XHQndHlwZSc6ICdjYycsXHJcblx0XHRcdFx0J3N0YXJ0X2RhdGUnOiBuZXcgRGF0ZSgpLFxyXG5cdFx0XHRcdCdpc19yZWFkJzogZmFsc2UsXHJcblx0XHRcdFx0J2Zyb21fdXNlcic6IGN1cnJlbnRfdXNlcl9pZCxcclxuXHRcdFx0XHQnZnJvbV91c2VyX25hbWUnOiBmcm9tX3VzZXJfbmFtZSxcclxuXHRcdFx0XHQnb3Bpbmlvbl9maWVsZHNfY29kZSc6IGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSxcclxuXHRcdFx0XHQnc2lnbl9maWVsZF9jb2RlJzogKGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSAmJiBhcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGUubGVuZ3RoID09IDEpID8gYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlWzBdIDogXCJcIixcclxuXHRcdFx0XHQnZnJvbV9hcHByb3ZlX2lkJzogYXBwcm92ZV9pZCxcclxuXHRcdFx0XHQnY2NfZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvblxyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZiAoYWdlbnQpIHtcclxuXHRcdFx0XHRhcHByLmFnZW50ID0gYWdlbnQ7XHJcblx0XHRcdH1cclxuXHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgYXBwcilcclxuXHRcdFx0bmV3X2FwcHJvdmVzLnB1c2goYXBwcik7XHJcblx0XHR9KVxyXG5cclxuXHJcblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblxyXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdF9pZDogaW5zX2lkLFxyXG5cdFx0XHQndHJhY2VzLl9pZCc6IHRyYWNlX2lkXHJcblx0XHR9LCB7XHJcblx0XHRcdCRzZXQ6IHNldE9iaixcclxuXHRcdFx0JGFkZFRvU2V0OiB7XHJcblx0XHRcdFx0J3RyYWNlcy4kLmFwcHJvdmVzJzoge1xyXG5cdFx0XHRcdFx0JGVhY2g6IG5ld19hcHByb3Zlc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0JHB1c2g6IHtcclxuXHRcdFx0XHRjY191c2Vyczoge1xyXG5cdFx0XHRcdFx0JGVhY2g6IGNjX3VzZXJfaWRzXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyX2lkKTtcclxuXHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwidHJhY2VfYXBwcm92ZV9jY1wiLCBpbnN0YW5jZSwgXCJcIiwgY3VycmVudF91c2VyX2luZm8sIGNjX3VzZXJfaWRzKTtcclxuXHJcblx0XHRmbG93X2lkID0gaW5zdGFuY2UuZmxvdztcclxuXHRcdGFwcHJvdmUuY2NfdXNlcl9pZHMgPSBjY191c2VyX2lkczsgLy8g6K6w5b2V5LiL5pys5qyh5Lyg6ZiF55qE5Lq65ZGYSUTkvZzkuLpob29r5o6l5Y+j5Lit55qE5Y+C5pWwXHJcblx0XHQvLyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhmbG93X2lkLCBpbnN0YW5jZSwgYXBwcm92ZSwgJ2NjX2RvJywgY3VycmVudF91c2VyX2lkLCBjY191c2VyX2lkcylcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNjX3JlYWQ6IGZ1bmN0aW9uIChhcHByb3ZlKSB7XHJcblx0XHR2YXIgc2V0T2JqID0ge307XHJcblx0XHR2YXIgaW5zX2lkID0gYXBwcm92ZS5pbnN0YW5jZTtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGFwcHJvdmUudHJhY2U7XHJcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0dHJhY2VzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xyXG5cdFx0dmFyIGN1cnJlbnRfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRyZXR1cm4gdC5faWQgPT0gdHJhY2VfaWQ7XHJcblx0XHR9KVxyXG5cclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblxyXG5cdFx0Y3VycmVudF90cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0aWYgKGEudHlwZSA9PSAnY2MnICYmIGEuaGFuZGxlciA9PSBjdXJyZW50X3VzZXJfaWQgJiYgIWEuaXNfcmVhZCkge1xyXG5cdFx0XHRcdGluZGV4ID0gaWR4O1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcuaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGluZGV4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblxyXG5cdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdCd0cmFjZXMuX2lkJzogdHJhY2VfaWRcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0T2JqXHJcblx0XHR9KTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNjX3N1Ym1pdDogZnVuY3Rpb24gKGluc19pZCwgZGVzY3JpcHRpb24pIHtcclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHJcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0dHJhY2VzOiAxLFxyXG5cdFx0XHRcdGNjX3VzZXJzOiAxLFxyXG5cdFx0XHRcdG91dGJveF91c2VyczogMVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XHJcblx0XHR2YXIgY3VycmVudF91c2VyX2lkID0gdGhpcy51c2VySWQ7XHJcblx0XHR2YXIgY3VycmVudF9hcHByb3ZlO1xyXG5cclxuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdGlmIChhLnR5cGUgPT0gJ2NjJyAmJiBhLmhhbmRsZXIgPT0gY3VycmVudF91c2VyX2lkICYmIGEuaXNfZmluaXNoZWQgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0Y3VycmVudF9hcHByb3ZlID0gYTtcclxuXHRcdFx0XHRcdFx0dmFyIHVwb2JqID0ge307XHJcblx0XHRcdFx0XHRcdHVwb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19maW5pc2hlZCddID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0dXBvYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdHVwb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5maW5pc2hfZGF0ZSddID0gbmV3IERhdGUoKTtcclxuXHRcdFx0XHRcdFx0dXBvYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSBcInN1Ym1pdHRlZFwiO1xyXG5cdFx0XHRcdFx0XHR1cG9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuY29zdF90aW1lJ10gPSBuZXcgRGF0ZSgpIC0gYS5zdGFydF9kYXRlO1xyXG5cdFx0XHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRcdFx0XHRfaWQ6IGluc19pZCxcclxuXHRcdFx0XHRcdFx0XHQndHJhY2VzLl9pZCc6IHQuX2lkXHJcblx0XHRcdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdFx0XHQkc2V0OiB1cG9ialxyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRpZiAoY3VycmVudF9hcHByb3ZlKSB7XHJcblx0XHRcdHZhciBpbmRleCA9IDA7XHJcblxyXG5cdFx0XHQvL+iuvue9ruaEj+inge+8jOaEj+ingeWPqua3u+WKoOWIsOacgOWQjuS4gOadoWFwcHJvdmXkuK1cclxuXHRcdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0XHRpZiAoY3VycmVudF9hcHByb3ZlICYmIHQuX2lkID09PSBjdXJyZW50X2FwcHJvdmUudHJhY2UpIHtcclxuXHRcdFx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0XHRcdHQuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbiAoYSwgaWR4KSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGEuX2lkID09PSBjdXJyZW50X2FwcHJvdmUuX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRhLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcblx0XHRcdFx0XHRcdFx0XHRpbmRleCA9IGlkeDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLmRlc2NyaXB0aW9uJ10gPSBkZXNjcmlwdGlvbjtcclxuXHJcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdF9pZDogaW5zX2lkLFxyXG5cdFx0XHRcdCd0cmFjZXMuX2lkJzogY3VycmVudF9hcHByb3ZlLnRyYWNlXHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHQkc2V0OiBzZXRPYmosXHJcblx0XHRcdFx0JHB1bGw6IHtcclxuXHRcdFx0XHRcdGNjX3VzZXJzOiBjdXJyZW50X3VzZXJfaWRcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCRhZGRUb1NldDoge1xyXG5cdFx0XHRcdFx0b3V0Ym94X3VzZXJzOiB7XHJcblx0XHRcdFx0XHRcdCRlYWNoOiBbY3VycmVudF91c2VyX2lkLCBjdXJyZW50X2FwcHJvdmUudXNlcl1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQpO1xyXG5cclxuXHRcdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcl9pZCk7XHJcblx0XHRcdC8v5Lyg6ZiF5o+Q5Lqk5LiN6YCa55+l5Lyg6ZiF6ICFXHJcblx0XHRcdGlmIChmYWxzZSAmJiBkZXNjcmlwdGlvbiAmJiBjdXJyZW50X2FwcHJvdmUgJiYgY3VycmVudF9hcHByb3ZlLmZyb21fdXNlcikge1xyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwidHJhY2VfYXBwcm92ZV9jY19zdWJtaXRcIiwgaW5zdGFuY2UsIFwiXCIsIGN1cnJlbnRfdXNlcl9pbmZvLCBbY3VycmVudF9hcHByb3ZlLmZyb21fdXNlcl0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyX2lkKTtcclxuXHJcblx0XHRcdGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xyXG5cdFx0XHQvLyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGZsb3dfaWQsIGluc3RhbmNlLCBjdXJyZW50X2FwcHJvdmUsICdjY19zdWJtaXQnLCBjdXJyZW50X3VzZXJfaWQsIFtdKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHRjY19yZW1vdmU6IGZ1bmN0aW9uIChpbnN0YW5jZUlkLCBhcHByb3ZlSWQpIHtcclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHJcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZUlkLCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdHRyYWNlczogMSxcclxuXHRcdFx0XHRjY191c2VyczogMVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XHJcblx0XHR2YXIgdHJhY2VfaWQsIHJlbW92ZV91c2VyX2lkLCBtdWx0aSA9IGZhbHNlO1xyXG5cclxuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdGlmIChhLl9pZCA9PSBhcHByb3ZlSWQpIHtcclxuXHRcdFx0XHRcdFx0dHJhY2VfaWQgPSBhLnRyYWNlO1xyXG5cdFx0XHRcdFx0XHRyZW1vdmVfdXNlcl9pZCA9IGEuaGFuZGxlcjtcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gJ3Rlcm1pbmF0ZWQnO1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcucmVhZF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdGlmICghdHJhY2VfaWQgfHwgIXJlbW92ZV91c2VyX2lkKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0dmFyIG11bHRpID0gMDtcclxuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XHJcblx0XHRcdFx0XHRpZiAoYS5oYW5kbGVyID09IHJlbW92ZV91c2VyX2lkICYmIGEudHlwZSA9PSAnY2MnICYmIGEuaXNfZmluaXNoZWQgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0bXVsdGkrKztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblxyXG5cdFx0aWYgKG11bHRpID4gMSkge1xyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0J3RyYWNlcy5faWQnOiB0cmFjZV9pZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0JHNldDogc2V0T2JqXHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0X2lkOiBpbnN0YW5jZUlkLFxyXG5cdFx0XHRcdCd0cmFjZXMuX2lkJzogdHJhY2VfaWRcclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdCRzZXQ6IHNldE9iaixcclxuXHRcdFx0XHQkcHVsbDoge1xyXG5cdFx0XHRcdFx0Y2NfdXNlcnM6IHJlbW92ZV91c2VyX2lkXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHJlbW92ZV91c2VyX2lkKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNjX3NhdmU6IGZ1bmN0aW9uIChpbnNfaWQsIGRlc2NyaXB0aW9uKSB7XHJcblx0XHR2YXIgc2V0T2JqID0ge307XHJcblxyXG5cdFx0dmFyIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkLCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdHRyYWNlczogMVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XHJcblx0XHR2YXIgY3VycmVudF91c2VyX2lkID0gdGhpcy51c2VySWQ7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRfYXBwcm92ZTtcclxuXHJcblx0XHR0cmFjZXMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRpZiAodC5hcHByb3Zlcykge1xyXG5cdFx0XHRcdHQuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbiAoYSwgaWR4KSB7XHJcblx0XHRcdFx0XHRpZiAoYS5oYW5kbGVyID09IGN1cnJlbnRfdXNlcl9pZCAmJiBhLnR5cGUgPT0gJ2NjJyAmJiBhLmlzX2ZpbmlzaGVkID09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdGN1cnJlbnRfYXBwcm92ZSA9IGE7XHJcblx0XHRcdFx0XHRcdHZhciB1cG9iaiA9IHt9O1xyXG5cdFx0XHRcdFx0XHR1cG9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuanVkZ2UnXSA9IFwic3VibWl0dGVkXCI7XHJcblx0XHRcdFx0XHRcdHVwb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRcdF9pZDogaW5zX2lkLFxyXG5cdFx0XHRcdFx0XHRcdCd0cmFjZXMuX2lkJzogdC5faWRcclxuXHRcdFx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0XHRcdCRzZXQ6IHVwb2JqXHJcblx0XHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblxyXG5cdFx0Ly/orr7nva7mhI/op4HvvIzmhI/op4Hlj6rmt7vliqDliLDmnIDlkI7kuIDmnaFhcHByb3Zl5LitXHJcblx0XHR0cmFjZXMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRpZiAoY3VycmVudF9hcHByb3ZlICYmIHQuX2lkID09PSBjdXJyZW50X2FwcHJvdmUudHJhY2UpIHtcclxuXHRcdFx0XHRpZiAodC5hcHByb3Zlcykge1xyXG5cdFx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGEuX2lkID09PSBjdXJyZW50X2FwcHJvdmUuX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0aW5kZXggPSBpZHg7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLmRlc2NyaXB0aW9uJ10gPSBkZXNjcmlwdGlvbjtcclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdCd0cmFjZXMuX2lkJzogY3VycmVudF9hcHByb3ZlLnRyYWNlXHJcblx0XHR9LCB7XHJcblx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG59KSIsIk1ldGVvci5tZXRob2RzKHtcclxuXHQvLyDmlLnkuLrpgJrov4dhcGnosIPnlKhcclxuXHRmb3J3YXJkX2luc3RhbmNlOiBmdW5jdGlvbiAoaW5zdGFuY2VfaWQsIHNwYWNlX2lkLCBmbG93X2lkLCBoYXNTYXZlSW5zdGFuY2VUb0F0dGFjaG1lbnQsIGRlc2NyaXB0aW9uLCBpc0ZvcndhcmRBdHRhY2htZW50cywgc2VsZWN0ZWRVc2VycywgYWN0aW9uX3R5cGUsIHJlbGF0ZWQsIGZyb21fYXBwcm92ZV9pZCkge1xyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignbm90LWF1dGhvcml6ZWQnKTtcclxuXHJcblx0XHRyZXR1cm47XHJcblx0fSxcclxuXHJcblxyXG5cdGZvcndhcmRfcmVtb3ZlOiBmdW5jdGlvbiAoaW5zdGFuY2VfaWQsIHRyYWNlX2lkLCBhcHByb3ZlX2lkKSB7XHJcblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKTtcclxuXHRcdGNoZWNrKHRyYWNlX2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soYXBwcm92ZV9pZCwgU3RyaW5nKTtcclxuXHJcblx0XHR2YXIgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpO1xyXG5cclxuXHRcdGlmICghaW5zKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3BhcmFtcyBlcnJvciEnLCAncmVjb3JkIG5vdCBleGlzdHMhJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRyYWNlID0gXy5maW5kKGlucy50cmFjZXMsIGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdHJldHVybiB0Ll9pZCA9PSB0cmFjZV9pZDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHZhciBhcHByb3ZlID0gXy5maW5kKHRyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYXBwcikge1xyXG5cdFx0XHRyZXR1cm4gYXBwci5faWQgPT0gYXBwcm92ZV9pZDtcclxuXHRcdH0pXHJcblxyXG5cdFx0dmFyIGhhc0FkbWluUGVybWlzc2lvbiA9IFdvcmtmbG93TWFuYWdlci5oYXNGbG93QWRtaW5QZXJtaXNzaW9uKGlucy5mbG93LCBpbnMuc3BhY2UsIHRoaXMudXNlcklkKVxyXG5cclxuXHRcdGlmICghYXBwcm92ZSB8fCAhWydmb3J3YXJkJywgJ2Rpc3RyaWJ1dGUnXS5pbmNsdWRlcyhhcHByb3ZlLnR5cGUpIHx8ICFhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpIHtcclxuXHRcdFx0aWYgKCFoYXNBZG1pblBlcm1pc3Npb24pIHtcclxuXHRcdFx0XHRpZiAoYXBwcm92ZS5mcm9tX3VzZXIgIT0gdGhpcy51c2VySWQpXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCAnaW5zdGFuY2VfZm9yd2FyZF9jYW5ub3RfY2FuY2VsJyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZm9yd2FyZF9pbnN0YW5jZV9pZCA9IGFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZTtcclxuXHRcdHZhciBmb3J3YXJkX2luc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoZm9yd2FyZF9pbnN0YW5jZV9pZCk7XHJcblx0XHRpZiAoZm9yd2FyZF9pbnN0YW5jZSkge1xyXG5cdFx0XHRpZiAoZm9yd2FyZF9pbnN0YW5jZS5zdGF0ZSAhPSBcImRyYWZ0XCIpIHtcclxuXHRcdFx0XHRpZiAoIWhhc0FkbWluUGVybWlzc2lvbilcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsICdpbnN0YW5jZV9mb3J3YXJkX2luc3RhbmNlX3N0YXRlX2NoYW5nZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgaW5ib3hfdXNlcnMgPSBmb3J3YXJkX2luc3RhbmNlLmluYm94X3VzZXJzIHx8IFtdO1xyXG5cclxuXHRcdFx0Zm9yd2FyZF9pbnN0YW5jZS5kZWxldGVkID0gbmV3IERhdGUoKTtcclxuXHRcdFx0Zm9yd2FyZF9pbnN0YW5jZS5kZWxldGVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHZhciBkZWxldGVkX2ZvcndhcmRfaW5zdGFuY2VfaWQgPSBkYi5kZWxldGVkX2luc3RhbmNlcy5pbnNlcnQoZm9yd2FyZF9pbnN0YW5jZSk7XHJcblx0XHRcdGlmIChkZWxldGVkX2ZvcndhcmRfaW5zdGFuY2VfaWQpIHtcclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMucmVtb3ZlKHtcclxuXHRcdFx0XHRcdF9pZDogZm9yd2FyZF9pbnN0YW5jZV9pZFxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvLyDliKDpmaTnlLPor7fljZXlkI7ph43mlrDorqHnrpdpbmJveF91c2Vyc+eahGJhZGdlXHJcblx0XHRcdFx0Xy5lYWNoKGluYm94X3VzZXJzLCBmdW5jdGlvbiAodV9pZCkge1xyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVfaWQpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgc2V0X29iaiA9IG5ldyBPYmplY3Q7XHJcblx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdHNldF9vYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRfLmVhY2godHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uIChhcHByLCBpZHgpIHtcclxuXHRcdFx0aWYgKGFwcHIuX2lkID09IGFwcHJvdmVfaWQpIHtcclxuXHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gJ3Rlcm1pbmF0ZWQnO1xyXG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xyXG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWU7XHJcblx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcucmVhZF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc3RhbmNlX2lkLFxyXG5cdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VfaWRcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0X29ialxyXG5cdFx0fSlcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHRjYW5jZWxEaXN0cmlidXRlOiBmdW5jdGlvbiAoaW5zdGFuY2VfaWQsIGFwcHJvdmVfaWRzKSB7XHJcblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soYXBwcm92ZV9pZHMsIEFycmF5KVxyXG5cclxuXHRcdHZhciBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZClcclxuXHJcblx0XHRpZiAoIWlucykge1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdwYXJhbXMgZXJyb3IhJywgJ3JlY29yZCBub3QgZXhpc3RzIScpXHJcblx0XHR9XHJcblxyXG5cdFx0dXNlcklkID0gdGhpcy51c2VySWRcclxuXHJcblx0XHR2YXIgaGFzQWRtaW5QZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgdXNlcklkKVxyXG5cclxuXHRcdF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRpZiAodC5hcHByb3Zlcykge1xyXG5cdFx0XHRcdHZhciBleGlzdHMgPSBmYWxzZVxyXG5cdFx0XHRcdHZhciBzZXRfb2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbiAoYSwgaWR4KSB7XHJcblx0XHRcdFx0XHRpZiAoYXBwcm92ZV9pZHMuaW5jbHVkZXMoYS5faWQpICYmIChhLmZyb21fdXNlciA9PSB1c2VySWQgfHwgaGFzQWRtaW5QZXJtaXNzaW9uKSAmJiAnZGlzdHJpYnV0ZScgPT0gYS50eXBlICYmIGEuZm9yd2FyZF9pbnN0YW5jZSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZm9yd2FyZF9pbnN0YW5jZV9pZCA9IGEuZm9yd2FyZF9pbnN0YW5jZVxyXG5cdFx0XHRcdFx0XHR2YXIgZm9yd2FyZF9pbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGZvcndhcmRfaW5zdGFuY2VfaWQpXHJcblx0XHRcdFx0XHRcdGlmIChmb3J3YXJkX2luc3RhbmNlKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGZvcndhcmRfaW5zdGFuY2Uuc3RhdGUgIT0gXCJkcmFmdFwiKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dmFyIGluYm94X3VzZXJzID0gZm9yd2FyZF9pbnN0YW5jZS5pbmJveF91c2VycyB8fCBbXVxyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3J3YXJkX2luc3RhbmNlLmRlbGV0ZWQgPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0XHRcdFx0Zm9yd2FyZF9pbnN0YW5jZS5kZWxldGVkX2J5ID0gdXNlcklkXHJcblx0XHRcdFx0XHRcdFx0dmFyIGRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCA9IGRiLmRlbGV0ZWRfaW5zdGFuY2VzLmluc2VydChmb3J3YXJkX2luc3RhbmNlKVxyXG5cdFx0XHRcdFx0XHRcdGlmIChkZWxldGVkX2ZvcndhcmRfaW5zdGFuY2VfaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGRiLmluc3RhbmNlcy5yZW1vdmUoe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRfaWQ6IGZvcndhcmRfaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8g5Yig6Zmk55Sz6K+35Y2V5ZCO6YeN5paw6K6h566XaW5ib3hfdXNlcnPnmoRiYWRnZVxyXG5cdFx0XHRcdFx0XHRcdFx0Xy5lYWNoKGluYm94X3VzZXJzLCBmdW5jdGlvbiAodV9pZCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdV9pZClcclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gJ3Rlcm1pbmF0ZWQnXHJcblx0XHRcdFx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5maW5pc2hfZGF0ZSddID0gbmV3IERhdGUoKVxyXG5cdFx0XHRcdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKClcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0ZXhpc3RzID0gdHJ1ZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdGlmICghZXhpc3RzKVxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRcdHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0c2V0X29iai5tb2RpZmllZF9ieSA9IHVzZXJJZFxyXG5cclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRcdF9pZDogaW5zdGFuY2VfaWQsXHJcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdC5faWRcclxuXHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHQkc2V0OiBzZXRfb2JqXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cdH1cclxuXHJcblxyXG59KSIsIk1ldGVvci5tZXRob2RzKHtcclxuICAgIGNmc19pbnN0YW5jZXNfcmVtb3ZlOiBmdW5jdGlvbiAoZmlsZV9pZCkge1xyXG4gICAgICAgIGNoZWNrKGZpbGVfaWQsIFN0cmluZyk7XHJcbiAgICAgICAgY2ZzLmluc3RhbmNlcy5yZW1vdmUoZmlsZV9pZCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIGNmc19pbnN0YW5jZXNfc2V0X2N1cnJlbnQ6IGZ1bmN0aW9uIChmaWxlX2lkKSB7XHJcbiAgICAgICAgY2hlY2soZmlsZV9pZCwgU3RyaW5nKTtcclxuICAgICAgICBjZnMuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIF9pZDogZmlsZV9pZFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgJHNldDoge1xyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgY2ZzX2luc3RhbmNlc19sb2NrOiBmdW5jdGlvbiAoZmlsZV9pZCwgdXNlcl9pZCwgdXNlcl9uYW1lKSB7XHJcbiAgICAgICAgY2ZzLmluc3RhbmNlcy51cGRhdGUoe1xyXG4gICAgICAgICAgICBfaWQ6IGZpbGVfaWRcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICRzZXQ6IHtcclxuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfYnknOiB1c2VyX2lkLFxyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF9ieV9uYW1lJzogdXNlcl9uYW1lLFxyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF90aW1lJzogbmV3IERhdGUoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIGNmc19pbnN0YW5jZXNfdW5sb2NrOiBmdW5jdGlvbiAoZmlsZV9pZCkge1xyXG4gICAgICAgIGNmcy5pbnN0YW5jZXMudXBkYXRlKHtcclxuICAgICAgICAgICAgX2lkOiBmaWxlX2lkXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAkdW5zZXQ6IHtcclxuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfYnknOiAnJyxcclxuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfYnlfbmFtZSc6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF90aW1lJzogJydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICBkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrOiBmdW5jdGlvbiAoc3BhY2VJZCwgY2ZzUmVjb3JkSWRzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVzZXJJZClcclxuICAgICAgICAgICAgcmV0dXJuIFwi5LiN56ym5ZCI5omn6KGM5p2h5Lu2XCJcclxuXHJcbiAgICAgICAgaWYgKE1ldGVvci51c2Vycy5maW5kKHtcclxuICAgICAgICAgICAgICAgIF9pZDogdGhpcy51c2VySWQsXHJcbiAgICAgICAgICAgICAgICBpc19jbG91ZGFkbWluOiB0cnVlXHJcbiAgICAgICAgICAgIH0pLmNvdW50KCkgPCAxKVxyXG4gICAgICAgICAgICByZXR1cm4gXCLkuI3nrKblkIjmiafooYzmnaHku7ZcIlxyXG5cclxuICAgICAgICBjaGVjayhzcGFjZUlkLCBTdHJpbmcpO1xyXG5cclxuICAgICAgICB2YXIgc3RvcmUgPSBcImluc3RhbmNlc1wiO1xyXG4gICAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbiAgICAgICAgdmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbiAgICAgICAgdmFyIG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpO1xyXG4gICAgICAgIHZhciBwYXRobmFtZSA9IHBhdGguam9pbihfX21ldGVvcl9ib290c3RyYXBfXy5zZXJ2ZXJEaXIsICcuLi8uLi8uLi9jZnMvc3BhY2VJbnN0YW5jZUF0dGFjaG1lbnRzJyk7XHJcbiAgICAgICAgLy8gU2V0IGFic29sdXRlIHBhdGhcclxuICAgICAgICB2YXIgYWJzb2x1dGVQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGhuYW1lKTtcclxuICAgICAgICAvLyBFbnN1cmUgdGhlIHBhdGggZXhpc3RzXHJcbiAgICAgICAgbWtkaXJwLnN5bmMoYWJzb2x1dGVQYXRoKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnYWJzb2x1dGVQYXRoOiAnLCBhYnNvbHV0ZVBhdGgpO1xyXG4gICAgICAgIGNvbnNvbGUudGltZSgnZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzaycpO1xyXG4gICAgICAgIHZhciBxdWVyeSA9IHtcclxuICAgICAgICAgICAgJ21ldGFkYXRhLnNwYWNlJzogc3BhY2VJZFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2ZzUmVjb3JkSWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5Ll9pZCA9IHtcclxuICAgICAgICAgICAgICAgICRpbjogY2ZzUmVjb3JkSWRzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkb3dubG9hZEZhaWxlZFJlY29yZElkcyA9IFtdO1xyXG4gICAgICAgIGNmcy5pbnN0YW5jZXMuZmluZChxdWVyeSkuZm9yRWFjaChmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gc3RvcmUgKyAnLScgKyBjLl9pZCArICctJyArIGMubmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVQYXRoID0gcGF0aC5qb2luKGFic29sdXRlUGF0aCwgZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgTWV0ZW9yLndyYXBBc3luYyhmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3JpdGVyID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiBfLmlzRnVuY3Rpb24oY2FsbGJhY2spKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IGMuY3JlYXRlUmVhZFN0cmVhbShzdG9yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkRmFpbGVkUmVjb3JkSWRzLnB1c2goYy5faWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzazogJywgYy5faWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5waXBlKHdyaXRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzazogJywgYy5faWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pKClcclxuXHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrOiAnLCBjLl9pZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb3dubG9hZEZhaWxlZFJlY29yZElkczogJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS50aW1lRW5kKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBkb3dubG9hZEZhaWxlZFJlY29yZElkcztcclxuICAgIH1cclxufSkiLCJNZXRlb3IubWV0aG9kc1xyXG5cdHNldF9hcHByb3ZlX2hhdmVfcmVhZDogKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCkgLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRzZWxmID0gdGhpc1xyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlSWQsIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkIH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXHJcblxyXG5cdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxyXG5cdFx0XHR0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXVxyXG5cdFx0XHRzZXRPYmogPSB7XHJcblx0XHRcdFx0bW9kaWZpZWQ6IG5ldyBEYXRlLFxyXG5cdFx0XHRcdG1vZGlmaWVkX2J5OiBzZWxmLnVzZXJJZFxyXG5cdFx0XHR9XHJcblx0XHRcdHRyYWNlLmFwcHJvdmVzLmZvckVhY2ggKGFwcHJvdmUsIGlkeCkgLT5cclxuXHRcdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBhcHByb3ZlSWQgJiYgIWFwcHJvdmUuaXNfcmVhZFxyXG5cdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LmlzX3JlYWRcIl0gPSB0cnVlXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0aWYgbm90IF8uaXNFbXB0eShzZXRPYmopXHJcblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VJZFxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdGNoYW5nZV9hcHByb3ZlX2luZm86IChpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIGRlc2NyaXB0aW9uLCBmaW5pc2hfZGF0ZSkgLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdGNoZWNrKGluc3RhbmNlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKHRyYWNlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKGFwcHJvdmVJZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soZGVzY3JpcHRpb24sIFN0cmluZylcclxuXHRcdGNoZWNrKGZpbmlzaF9kYXRlLCBEYXRlKVxyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlSWQsIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkIH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXHJcblxyXG5cdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxyXG5cdFx0XHR0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXVxyXG5cdFx0XHRzZXRPYmogPSB7fVxyXG5cdFx0XHR0cmFjZS5hcHByb3Zlcy5mb3JFYWNoIChhcHByb3ZlLCBpZHgpIC0+XHJcblx0XHRcdFx0aWYgYXBwcm92ZS5faWQgPT0gYXBwcm92ZUlkXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvblxyXG5cdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LmZpbmlzaF9kYXRlXCJdID0gZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5jb3N0X3RpbWVcIl0gPSBuZXcgRGF0ZSgpIC0gYXBwcm92ZS5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0aWYgbm90IF8uaXNFbXB0eShzZXRPYmopXHJcblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VJZFxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdHVwZGF0ZV9hcHByb3ZlX3NpZ246IChpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIHNpZ25fZmllbGRfY29kZSwgZGVzY3JpcHRpb24sIHNpZ25fdHlwZSwgbGFzdFNpZ25BcHByb3ZlKS0+XHJcblx0XHRjaGVjayhpbnN0YW5jZUlkLCBTdHJpbmcpXHJcblx0XHRjaGVjayh0cmFjZUlkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhhcHByb3ZlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKHNpZ25fZmllbGRfY29kZSwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soZGVzY3JpcHRpb24sIFN0cmluZylcclxuXHJcblx0XHRpZiAhdGhpcy51c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0c2Vzc2lvbl91c2VySWQgPSB0aGlzLnVzZXJJZFxyXG5cclxuXHRcdGlmIGxhc3RTaWduQXBwcm92ZVxyXG5cclxuXHRcdFx0aWYgbGFzdFNpZ25BcHByb3ZlLmN1c3RvbV9zaWduX3Nob3dcclxuXHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcclxuXHRcdFx0XHRcInRyYWNlcy5faWRcIjogbGFzdFNpZ25BcHByb3ZlLnRyYWNlXHJcblx0XHRcdH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXHJcblxyXG5cdFx0XHRsYXN0VHJhY2UgPSBfLmZpbmQgaW5zdGFuY2U/LnRyYWNlcywgKHQpIC0+XHJcblx0XHRcdFx0cmV0dXJuIHQuX2lkID0gbGFzdFNpZ25BcHByb3ZlLnRyYWNlXHJcblxyXG5cdFx0XHRpZiBsYXN0VHJhY2VcclxuXHRcdFx0XHRzZXRPYmogPSB7fVxyXG5cdFx0XHRcdGxhc3RUcmFjZT8uYXBwcm92ZXMuZm9yRWFjaCAoYSwgaWR4KSAtPlxyXG5cdFx0XHRcdFx0aWYgYS5faWQgPT0gbGFzdFNpZ25BcHByb3ZlLl9pZFxyXG5cdFx0XHRcdFx0XHRpZiBzaWduX3R5cGUgPT0gXCJ1cGRhdGVcIlxyXG5cdFx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5zaWduX3Nob3dcIl0gPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZFwiXSA9IG5ldyBEYXRlKClcclxuXHRcdFx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ubW9kaWZpZWRfYnlcIl0gPSBzZXNzaW9uX3VzZXJJZFxyXG5cclxuXHRcdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcclxuXHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiBsYXN0VHJhY2UuX2lkXHJcblx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0XHRcdFx0fSlcclxuXHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHsgX2lkOiBpbnN0YW5jZUlkLCBcInRyYWNlcy5faWRcIjogdHJhY2VJZCB9LCB7IGZpZWxkczogeyBcInRyYWNlcy4kXCI6IDEgfSB9KVxyXG5cclxuXHRcdGlmIGluc3RhbmNlPy50cmFjZXM/Lmxlbmd0aCA+IDBcclxuXHJcblx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXHJcblx0XHRcdHVwT2JqID0ge31cclxuXHRcdFx0dHJhY2UuYXBwcm92ZXMuZm9yRWFjaCAoYXBwcm92ZSwgaWR4KSAtPlxyXG5cdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IGFwcHJvdmVJZFxyXG5cdFx0XHRcdFx0aWYgc2lnbl9maWVsZF9jb2RlXHJcblx0XHRcdFx0XHRcdHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LnNpZ25fZmllbGRfY29kZVwiXSA9IHNpZ25fZmllbGRfY29kZVxyXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvblxyXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uc2lnbl9zaG93XCJdID0gdHJ1ZVxyXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ubW9kaWZpZWRcIl0gPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZF9ieVwiXSA9IHNlc3Npb25fdXNlcklkXHJcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXHJcblxyXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KHVwT2JqKVxyXG5cdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0X2lkOiBpbnN0YW5jZUlkLFxyXG5cdFx0XHRcdFx0XCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcclxuXHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHQkc2V0OiB1cE9ialxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cclxuXHR1cGRhdGVfc2lnbl9zaG93OiAob2JqcywgbXlBcHByb3ZlX2lkKSAtPlxyXG5cdFx0b2Jqcy5mb3JFYWNoIChvYmosIGluZGV4KSAtPlxyXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHsgX2lkOiBvYmouaW5zdGFuY2UsIFwidHJhY2VzLl9pZFwiOiBvYmoudHJhY2UgfSwgeyBmaWVsZHM6IHsgXCJ0cmFjZXMuJFwiOiAxIH0gfSlcclxuXHRcdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXHJcblx0XHRcdFx0c2V0T2JqID0ge31cclxuXHRcdFx0XHR0cmFjZS5hcHByb3Zlcy5mb3JFYWNoIChhcHByb3ZlLCBpZHgpIC0+XHJcblx0XHRcdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBvYmouX2lkXHJcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5zaWduX3Nob3dcIl0gPSBvYmouc2lnbl9zaG93XHJcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5jdXN0b21fc2lnbl9zaG93XCJdID0gb2JqLnNpZ25fc2hvd1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IG15QXBwcm92ZV9pZFxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcclxuXHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRfaWQ6IG9iai5pbnN0YW5jZSxcclxuXHRcdFx0XHRcdFx0XCJ0cmFjZXMuX2lkXCI6IG9iai50cmFjZVxyXG5cdFx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0cmV0dXJuIHRydWVcclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBzZXRfYXBwcm92ZV9oYXZlX3JlYWQ6IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCkge1xuICAgIHZhciBpbnN0YW5jZSwgcmVmLCBzZWxmLCBzZXRPYmosIHRyYWNlO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZiA9IHRoaXM7XG4gICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy4kXCI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoKGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICB0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXTtcbiAgICAgIHNldE9iaiA9IHtcbiAgICAgICAgbW9kaWZpZWQ6IG5ldyBEYXRlLFxuICAgICAgICBtb2RpZmllZF9ieTogc2VsZi51c2VySWRcbiAgICAgIH07XG4gICAgICB0cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUsIGlkeCkge1xuICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IGFwcHJvdmVJZCAmJiAhYXBwcm92ZS5pc19yZWFkKSB7XG4gICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5pc19yZWFkXCJdID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghXy5pc0VtcHR5KHNldE9iaikpIHtcbiAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIGNoYW5nZV9hcHByb3ZlX2luZm86IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgZGVzY3JpcHRpb24sIGZpbmlzaF9kYXRlKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHNldE9iaiwgdHJhY2U7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGVjayhpbnN0YW5jZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHRyYWNlSWQsIFN0cmluZyk7XG4gICAgY2hlY2soYXBwcm92ZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGRlc2NyaXB0aW9uLCBTdHJpbmcpO1xuICAgIGNoZWNrKGZpbmlzaF9kYXRlLCBEYXRlKTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLiRcIjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgoaW5zdGFuY2UgIT0gbnVsbCA/IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdO1xuICAgICAgc2V0T2JqID0ge307XG4gICAgICB0cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUsIGlkeCkge1xuICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IGFwcHJvdmVJZCkge1xuICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmZpbmlzaF9kYXRlXCJdID0gZmluaXNoX2RhdGU7XG4gICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5jb3N0X3RpbWVcIl0gPSBuZXcgRGF0ZSgpIC0gYXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgICAgIHJldHVybiBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFfLmlzRW1wdHkoc2V0T2JqKSkge1xuICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlX2FwcHJvdmVfc2lnbjogZnVuY3Rpb24oaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCBzaWduX2ZpZWxkX2NvZGUsIGRlc2NyaXB0aW9uLCBzaWduX3R5cGUsIGxhc3RTaWduQXBwcm92ZSkge1xuICAgIHZhciBpbnN0YW5jZSwgbGFzdFRyYWNlLCByZWYsIHNlc3Npb25fdXNlcklkLCBzZXRPYmosIHRyYWNlLCB1cE9iajtcbiAgICBjaGVjayhpbnN0YW5jZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHRyYWNlSWQsIFN0cmluZyk7XG4gICAgY2hlY2soYXBwcm92ZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHNpZ25fZmllbGRfY29kZSwgU3RyaW5nKTtcbiAgICBjaGVjayhkZXNjcmlwdGlvbiwgU3RyaW5nKTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlc3Npb25fdXNlcklkID0gdGhpcy51c2VySWQ7XG4gICAgaWYgKGxhc3RTaWduQXBwcm92ZSkge1xuICAgICAgaWYgKGxhc3RTaWduQXBwcm92ZS5jdXN0b21fc2lnbl9zaG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICAgIFwidHJhY2VzLl9pZFwiOiBsYXN0U2lnbkFwcHJvdmUudHJhY2VcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgXCJ0cmFjZXMuJFwiOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGFzdFRyYWNlID0gXy5maW5kKGluc3RhbmNlICE9IG51bGwgPyBpbnN0YW5jZS50cmFjZXMgOiB2b2lkIDAsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuX2lkID0gbGFzdFNpZ25BcHByb3ZlLnRyYWNlO1xuICAgICAgfSk7XG4gICAgICBpZiAobGFzdFRyYWNlKSB7XG4gICAgICAgIHNldE9iaiA9IHt9O1xuICAgICAgICBpZiAobGFzdFRyYWNlICE9IG51bGwpIHtcbiAgICAgICAgICBsYXN0VHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbihhLCBpZHgpIHtcbiAgICAgICAgICAgIGlmIChhLl9pZCA9PT0gbGFzdFNpZ25BcHByb3ZlLl9pZCkge1xuICAgICAgICAgICAgICBpZiAoc2lnbl90eXBlID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5zaWduX3Nob3dcIl0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLm1vZGlmaWVkXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5tb2RpZmllZF9ieVwiXSA9IHNlc3Npb25fdXNlcklkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzRW1wdHkoc2V0T2JqKSkge1xuICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IGxhc3RUcmFjZS5faWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLiRcIjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgoaW5zdGFuY2UgIT0gbnVsbCA/IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdO1xuICAgICAgdXBPYmogPSB7fTtcbiAgICAgIHRyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSwgaWR4KSB7XG4gICAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgaWYgKHNpZ25fZmllbGRfY29kZSkge1xuICAgICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnNpZ25fZmllbGRfY29kZVwiXSA9IHNpZ25fZmllbGRfY29kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmRlc2NyaXB0aW9uXCJdID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnNpZ25fc2hvd1wiXSA9IHRydWU7XG4gICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLm1vZGlmaWVkXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgICB1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIubW9kaWZpZWRfYnlcIl0gPSBzZXNzaW9uX3VzZXJJZDtcbiAgICAgICAgICByZXR1cm4gdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFfLmlzRW1wdHkodXBPYmopKSB7XG4gICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogdXBPYmpcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZV9zaWduX3Nob3c6IGZ1bmN0aW9uKG9ianMsIG15QXBwcm92ZV9pZCkge1xuICAgIG9ianMuZm9yRWFjaChmdW5jdGlvbihvYmosIGluZGV4KSB7XG4gICAgICB2YXIgaW5zdGFuY2UsIHJlZiwgc2V0T2JqLCB0cmFjZTtcbiAgICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IG9iai5pbnN0YW5jZSxcbiAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IG9iai50cmFjZVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBcInRyYWNlcy4kXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoKGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgIHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdO1xuICAgICAgICBzZXRPYmogPSB7fTtcbiAgICAgICAgdHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlLCBpZHgpIHtcbiAgICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IG9iai5faWQpIHtcbiAgICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuc2lnbl9zaG93XCJdID0gb2JqLnNpZ25fc2hvdztcbiAgICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuY3VzdG9tX3NpZ25fc2hvd1wiXSA9IG9iai5zaWduX3Nob3c7XG4gICAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gbXlBcHByb3ZlX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghXy5pc0VtcHR5KHNldE9iaikpIHtcbiAgICAgICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgICBfaWQ6IG9iai5pbnN0YW5jZSxcbiAgICAgICAgICAgIFwidHJhY2VzLl9pZFwiOiBvYmoudHJhY2VcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0aW5zdGFuY2VfcmV0dXJuOiAoYXBwcm92ZSwgcmVhc29uKS0+XHJcblx0XHRjaGVjayhhcHByb3ZlLCBPYmplY3QpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gdGhpcy51c2VySWRcclxuXHRcdGluc3RhbmNlX2lkID0gYXBwcm92ZS5pbnN0YW5jZVxyXG5cclxuXHRcdGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRzcGFjZV9pZCA9IGlucy5zcGFjZVxyXG5cclxuXHRcdCMgLSDlvoXlrqHmoLjnrrFcclxuXHRcdGlmIGlucy5zdGF0ZSBpc250IFwicGVuZGluZ1wiIG9yICFpbnMuaW5ib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxyXG5cclxuXHRcdCMgLSDmlofku7bkuI3mmK/kvKDpmIVcclxuXHRcdGlmIGFwcHJvdmUudHlwZSBpcyBcImNjXCIgYW5kIGlucy5jY191c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXHJcblxyXG5cdFx0IyAtIOetvuaguOWOhueoi+S4reW9k+WJjeatpemqpOS4iuS4gOatpemqpOS4jeaYr+S8muetvlxyXG5cdFx0aWYgaW5zLnRyYWNlcy5sZW5ndGggPCAyXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXHJcblx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGlucy5mbG93KVxyXG5cdFx0cHJlX3RyYWNlID0gaW5zLnRyYWNlc1tpbnMudHJhY2VzLmxlbmd0aCAtIDJdXHJcblx0XHRwcmVfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIHByZV90cmFjZS5zdGVwKVxyXG5cdFx0aWYgcHJlX3N0ZXAuc3RlcF90eXBlIGlzIFwiY291bnRlclNpZ25cIlxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxyXG5cclxuXHRcdCMgLSDlvZPliY3mraXpqqTkuLrloavlhpnmiJbogIXlrqHmiblcclxuXHRcdGxhc3RfdHJhY2UgPSBfLmxhc3QoaW5zLnRyYWNlcylcclxuXHRcdGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIGxhc3RfdHJhY2Uuc3RlcClcclxuXHRcdGlmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXNudCBcInN1Ym1pdFwiIGFuZCBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzbnQgXCJzaWduXCIgYW5kIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXNudCBcImNvdW50ZXJTaWduXCJcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIilcclxuXHJcblx0XHQjIC0g5Y+C5pWwYXBwcm92ZeS4rXRyYWNl5LiO5b2T5YmN6I635Y+W55qEdHJhY2XmmK/lkKbljLnphY1cclxuXHRcdGlmIGFwcHJvdmUudHJhY2UgaXNudCBsYXN0X3RyYWNlLl9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxyXG5cclxuXHRcdG5ld19pbmJveF91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoIHByZV90cmFjZS5hcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0aWYgKCFhLnR5cGUgb3IgYS50eXBlIGlzIFwiZHJhZnRcIiBvciBhLnR5cGUgaXMgXCJyZWFzc2lnblwiKSBhbmQgKCFhLmp1ZGdlIG9yIGEuanVkZ2UgaXMgXCJzdWJtaXR0ZWRcIiBvciBhLmp1ZGdlIGlzIFwiYXBwcm92ZWRcIiBvciBhLmp1ZGdlIGlzIFwicmVqZWN0ZWRcIilcclxuXHRcdFx0XHRuZXdfaW5ib3hfdXNlcnMucHVzaChhLnVzZXIpXHJcblxyXG5cdFx0aWYgXy5pc0VtcHR5KG5ld19pbmJveF91c2VycylcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrmib7liLDkuIvkuIDmraXlpITnkIbkurrvvIzpgIDlm57lpLHotKVcIilcclxuXHJcblx0XHR0cmFjZXMgPSBpbnMudHJhY2VzXHJcblxyXG5cdFx0YXBwcm92ZV92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMoYXBwcm92ZS52YWx1ZXMgfHwge30sIGN1cnJlbnRfc3RlcC5wZXJtaXNzaW9ucywgaW5zLmZvcm0sIGlucy5mb3JtX3ZlcnNpb24pXHJcblxyXG5cdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdHJlc3RfY291bnRlcl91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoIHRyYWNlcywgKHQpLT5cclxuXHRcdFx0aWYgdC5faWQgaXMgbGFzdF90cmFjZS5faWRcclxuXHRcdFx0XHRpZiBub3QgdC5hcHByb3Zlc1xyXG5cdFx0XHRcdFx0dC5hcHByb3ZlcyA9IG5ldyBBcnJheVxyXG5cdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYSwgaWR4KS0+XHJcblx0XHRcdFx0XHRpZiAoIWEudHlwZSBvciBhLnR5cGUgaXMgXCJyZWFzc2lnblwiKSBhbmQgKCFhLmp1ZGdlIG9yIGEuanVkZ2UgaXMgXCJzdWJtaXR0ZWRcIiBvciBhLmp1ZGdlIGlzIFwiYXBwcm92ZWRcIiBvciBhLmp1ZGdlIGlzIFwicmVqZWN0ZWRcIiBvciBhLmp1ZGdlIGlzIFwicmVhZGVkXCIpIGFuZCBhLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBub3dcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2Vycm9yJ10gPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWVcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19maW5pc2hlZCddID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmNvc3RfdGltZSddID0gbm93IC0gYS5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcudmFsdWVzJ10gPSBhcHByb3ZlX3ZhbHVlc1xyXG5cdFx0XHRcdFx0XHRpZiBhLmhhbmRsZXIgaXMgY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gXCJyZXR1cm5lZFwiXHJcblx0XHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5kZXNjcmlwdGlvbiddID0gcmVhc29uXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRyZXN0X2NvdW50ZXJfdXNlcnMucHVzaCBhLmhhbmRsZXJcclxuXHJcblx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZeiusOW9lVxyXG5cdFx0XHRcdHNldE9ialsndHJhY2VzLiQuaXNfZmluaXNoZWQnXSA9IHRydWVcclxuXHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmZpbmlzaF9kYXRlJ10gPSB0cnVlXHJcblx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5qdWRnZSddID0gXCJyZXR1cm5lZFwiXHJcblxyXG5cdFx0aW5zLnZhbHVlcyA9IF8uZXh0ZW5kKChpbnMudmFsdWVzIHx8IHt9KSwgYXBwcm92ZV92YWx1ZXMpXHJcblxyXG5cdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZeiusOW9lVxyXG5cdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdXHJcblx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRuZXdUcmFjZS5zdGVwID0gcHJlX3RyYWNlLnN0ZXBcclxuXHRcdG5ld1RyYWNlLm5hbWUgPSBwcmVfdHJhY2UubmFtZVxyXG5cdFx0bmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0bmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUocHJlX3N0ZXAudGltZW91dF9ob3VycylcclxuXHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cclxuXHRcdF8uZWFjaCBuZXdfaW5ib3hfdXNlcnMsIChuZXh0X3N0ZXBfdXNlcl9pZCwgaWR4KS0+XHJcblx0XHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2UuYXBwcm92ZeiusOW9lVxyXG5cdFx0XHRuZXdBcHByb3ZlID0gbmV3IE9iamVjdFxyXG5cdFx0XHRuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0bmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRcdG5ld0FwcHJvdmUudHJhY2UgPSBuZXdUcmFjZS5faWRcclxuXHRcdFx0bmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdG5ld0FwcHJvdmUudXNlciA9IG5leHRfc3RlcF91c2VyX2lkXHJcblxyXG5cdFx0XHR1c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKG5leHRfc3RlcF91c2VyX2lkLCB7ZmllbGRzOiB7bmFtZTogMX19KVxyXG5cdFx0XHRuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IHVzZXJfaW5mby5uYW1lXHJcblxyXG5cdFx0XHRoYW5kbGVyX2lkID0gbmV4dF9zdGVwX3VzZXJfaWRcclxuXHRcdFx0aGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvXHJcblx0XHRcdGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpXHJcblx0XHRcdGlmIGFnZW50XHJcblx0XHRcdFx0bmV3X2luYm94X3VzZXJzW2lkeF0gPSBhZ2VudFxyXG5cdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudFxyXG5cdFx0XHRcdGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IGFnZW50IH0sIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuYWdlbnQgPSBhZ2VudFxyXG5cclxuXHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZFxyXG5cdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lXHJcblxyXG5cdFx0XHRuZXh0X3N0ZXBfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBoYW5kbGVyX2lkKVxyXG5cdFx0XHQjIOiOt+WPlm5leHRfc3RlcF91c2Vy5omA5Zyo55qE6YOo6Zeo5L+h5oGvXHJcblx0XHRcdG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKVxyXG5cdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl1cclxuXHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl1cclxuXHJcblx0XHRcdG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZVxyXG5cdFx0XHRuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0bmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0XHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnMudmFsdWVzLCBuZXdBcHByb3ZlKVxyXG5cdFx0XHRuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpXHJcblxyXG5cdFx0c2V0T2JqLmluYm94X3VzZXJzID0gbmV3X2luYm94X3VzZXJzXHJcblx0XHRzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIlxyXG5cclxuXHRcdGlucy5vdXRib3hfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpXHJcblx0XHRzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGlucy5vdXRib3hfdXNlcnMpXHJcblx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcclxuXHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cdFx0c2V0T2JqLnZhbHVlcyA9IGlucy52YWx1ZXNcclxuXHJcblx0XHRzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBwcmVfdHJhY2UubmFtZVxyXG5cclxuXHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkLCAndHJhY2VzLl9pZCc6IGxhc3RfdHJhY2UuX2lkfSwgeyRzZXQ6IHNldE9ian0pXHJcblx0XHRiID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskcHVzaDoge3RyYWNlczogbmV3VHJhY2V9fSlcclxuXHRcdGlmIHIgJiYgYlxyXG5cdFx0XHQjIOaWsGluYm94X3VzZXJzIOWSjCDlvZPliY3nlKjmiLcg5Y+R6YCBcHVzaFxyXG5cdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyKVxyXG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpXHJcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmV0dXJuX3BlbmRpbmdfaW5ib3hcIiwgaW5zdGFuY2UsIHJlYXNvbiwgY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdCMg5aaC5p6c5piv5Lya562+5YiZ57uZ5Lya562+5pyq5o+Q5Lqk55qE5Lq65Y+R6YCBcHVzaFxyXG5cdFx0XHRfLmVhY2ggcmVzdF9jb3VudGVyX3VzZXJzLCAodXNlcl9pZCktPlxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKVxyXG5cdFx0cmV0dXJuIHRydWUiLCJNZXRlb3IubWV0aG9kcyh7XG4gIGluc3RhbmNlX3JldHVybjogZnVuY3Rpb24oYXBwcm92ZSwgcmVhc29uKSB7XG4gICAgdmFyIGFwcHJvdmVfdmFsdWVzLCBiLCBjdXJyZW50X3N0ZXAsIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGZsb3csIGlucywgaW5zdGFuY2UsIGluc3RhbmNlX2lkLCBsYXN0X3RyYWNlLCBuZXdUcmFjZSwgbmV3X2luYm94X3VzZXJzLCBub3csIHByZV9zdGVwLCBwcmVfdHJhY2UsIHIsIHJlc3RfY291bnRlcl91c2Vycywgc2V0T2JqLCBzcGFjZV9pZCwgdHJhY2VzO1xuICAgIGNoZWNrKGFwcHJvdmUsIE9iamVjdCk7XG4gICAgY3VycmVudF91c2VyID0gdGhpcy51c2VySWQ7XG4gICAgaW5zdGFuY2VfaWQgPSBhcHByb3ZlLmluc3RhbmNlO1xuICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgIHNwYWNlX2lkID0gaW5zLnNwYWNlO1xuICAgIGlmIChpbnMuc3RhdGUgIT09IFwicGVuZGluZ1wiIHx8ICFpbnMuaW5ib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIik7XG4gICAgfVxuICAgIGlmIChhcHByb3ZlLnR5cGUgPT09IFwiY2NcIiAmJiBpbnMuY2NfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIik7XG4gICAgfVxuICAgIGlmIChpbnMudHJhY2VzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGlucy5mbG93KTtcbiAgICBwcmVfdHJhY2UgPSBpbnMudHJhY2VzW2lucy50cmFjZXMubGVuZ3RoIC0gMl07XG4gICAgcHJlX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zLCBmbG93LCBwcmVfdHJhY2Uuc3RlcCk7XG4gICAgaWYgKHByZV9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJjb3VudGVyU2lnblwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKTtcbiAgICB9XG4gICAgbGFzdF90cmFjZSA9IF8ubGFzdChpbnMudHJhY2VzKTtcbiAgICBjdXJyZW50X3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zLCBmbG93LCBsYXN0X3RyYWNlLnN0ZXApO1xuICAgIGlmIChjdXJyZW50X3N0ZXAuc3RlcF90eXBlICE9PSBcInN1Ym1pdFwiICYmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgIT09IFwic2lnblwiICYmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgIT09IFwiY291bnRlclNpZ25cIikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIik7XG4gICAgfVxuICAgIGlmIChhcHByb3ZlLnRyYWNlICE9PSBsYXN0X3RyYWNlLl9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIik7XG4gICAgfVxuICAgIG5ld19pbmJveF91c2VycyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2gocHJlX3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICBpZiAoKCFhLnR5cGUgfHwgYS50eXBlID09PSBcImRyYWZ0XCIgfHwgYS50eXBlID09PSBcInJlYXNzaWduXCIpICYmICghYS5qdWRnZSB8fCBhLmp1ZGdlID09PSBcInN1Ym1pdHRlZFwiIHx8IGEuanVkZ2UgPT09IFwiYXBwcm92ZWRcIiB8fCBhLmp1ZGdlID09PSBcInJlamVjdGVkXCIpKSB7XG4gICAgICAgIHJldHVybiBuZXdfaW5ib3hfdXNlcnMucHVzaChhLnVzZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChfLmlzRW1wdHkobmV3X2luYm94X3VzZXJzKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrmib7liLDkuIvkuIDmraXlpITnkIbkurrvvIzpgIDlm57lpLHotKVcIik7XG4gICAgfVxuICAgIHRyYWNlcyA9IGlucy50cmFjZXM7XG4gICAgYXBwcm92ZV92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMoYXBwcm92ZS52YWx1ZXMgfHwge30sIGN1cnJlbnRfc3RlcC5wZXJtaXNzaW9ucywgaW5zLmZvcm0sIGlucy5mb3JtX3ZlcnNpb24pO1xuICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgbm93ID0gbmV3IERhdGU7XG4gICAgcmVzdF9jb3VudGVyX3VzZXJzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaCh0cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGlmICh0Ll9pZCA9PT0gbGFzdF90cmFjZS5faWQpIHtcbiAgICAgICAgaWYgKCF0LmFwcHJvdmVzKSB7XG4gICAgICAgICAgdC5hcHByb3ZlcyA9IG5ldyBBcnJheTtcbiAgICAgICAgfVxuICAgICAgICBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYSwgaWR4KSB7XG4gICAgICAgICAgaWYgKCghYS50eXBlIHx8IGEudHlwZSA9PT0gXCJyZWFzc2lnblwiKSAmJiAoIWEuanVkZ2UgfHwgYS5qdWRnZSA9PT0gXCJzdWJtaXR0ZWRcIiB8fCBhLmp1ZGdlID09PSBcImFwcHJvdmVkXCIgfHwgYS5qdWRnZSA9PT0gXCJyZWplY3RlZFwiIHx8IGEuanVkZ2UgPT09IFwicmVhZGVkXCIpICYmIGEuaXNfZmluaXNoZWQgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZmluaXNoX2RhdGUnXSA9IG5vdztcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcucmVhZF9kYXRlJ10gPSBub3c7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2Vycm9yJ10gPSBmYWxzZTtcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWU7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmNvc3RfdGltZSddID0gbm93IC0gYS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy52YWx1ZXMnXSA9IGFwcHJvdmVfdmFsdWVzO1xuICAgICAgICAgICAgaWYgKGEuaGFuZGxlciA9PT0gY3VycmVudF91c2VyKSB7XG4gICAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuanVkZ2UnXSA9IFwicmV0dXJuZWRcIjtcbiAgICAgICAgICAgICAgcmV0dXJuIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZGVzY3JpcHRpb24nXSA9IHJlYXNvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN0X2NvdW50ZXJfdXNlcnMucHVzaChhLmhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNldE9ialsndHJhY2VzLiQuaXNfZmluaXNoZWQnXSA9IHRydWU7XG4gICAgICAgIHNldE9ialsndHJhY2VzLiQuZmluaXNoX2RhdGUnXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBzZXRPYmpbJ3RyYWNlcy4kLmp1ZGdlJ10gPSBcInJldHVybmVkXCI7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaW5zLnZhbHVlcyA9IF8uZXh0ZW5kKGlucy52YWx1ZXMgfHwge30sIGFwcHJvdmVfdmFsdWVzKTtcbiAgICBuZXdUcmFjZSA9IG5ldyBPYmplY3Q7XG4gICAgbmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICBuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgIG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlLl9pZF07XG4gICAgbmV3VHJhY2UuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICBuZXdUcmFjZS5zdGVwID0gcHJlX3RyYWNlLnN0ZXA7XG4gICAgbmV3VHJhY2UubmFtZSA9IHByZV90cmFjZS5uYW1lO1xuICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgbmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUocHJlX3N0ZXAudGltZW91dF9ob3Vycyk7XG4gICAgbmV3VHJhY2UuYXBwcm92ZXMgPSBbXTtcbiAgICBfLmVhY2gobmV3X2luYm94X3VzZXJzLCBmdW5jdGlvbihuZXh0X3N0ZXBfdXNlcl9pZCwgaWR4KSB7XG4gICAgICB2YXIgYWdlbnQsIGhhbmRsZXJfaWQsIGhhbmRsZXJfaW5mbywgbmV3QXBwcm92ZSwgbmV4dF9zdGVwX3NwYWNlX3VzZXIsIG5leHRfc3RlcF91c2VyX29yZ19pbmZvLCB1c2VyX2luZm87XG4gICAgICBuZXdBcHByb3ZlID0gbmV3IE9iamVjdDtcbiAgICAgIG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgIG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgIG5ld0FwcHJvdmUudHJhY2UgPSBuZXdUcmFjZS5faWQ7XG4gICAgICBuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICBuZXdBcHByb3ZlLnVzZXIgPSBuZXh0X3N0ZXBfdXNlcl9pZDtcbiAgICAgIHVzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUobmV4dF9zdGVwX3VzZXJfaWQsIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgbmFtZTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG5ld0FwcHJvdmUudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWU7XG4gICAgICBoYW5kbGVyX2lkID0gbmV4dF9zdGVwX3VzZXJfaWQ7XG4gICAgICBoYW5kbGVyX2luZm8gPSB1c2VyX2luZm87XG4gICAgICBhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIG5leHRfc3RlcF91c2VyX2lkKTtcbiAgICAgIGlmIChhZ2VudCkge1xuICAgICAgICBuZXdfaW5ib3hfdXNlcnNbaWR4XSA9IGFnZW50O1xuICAgICAgICBoYW5kbGVyX2lkID0gYWdlbnQ7XG4gICAgICAgIGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIF9pZDogYWdlbnRcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5ld0FwcHJvdmUuYWdlbnQgPSBhZ2VudDtcbiAgICAgIH1cbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlciA9IGhhbmRsZXJfaWQ7XG4gICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xuICAgICAgbmV4dF9zdGVwX3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgaGFuZGxlcl9pZCk7XG4gICAgICBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhuZXh0X3N0ZXBfc3BhY2VfdXNlcik7XG4gICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl07XG4gICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdO1xuICAgICAgbmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgbmV3QXBwcm92ZS5pc19yZWFkID0gZmFsc2U7XG4gICAgICBuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICBuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICB1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zLnZhbHVlcywgbmV3QXBwcm92ZSk7XG4gICAgICByZXR1cm4gbmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKTtcbiAgICB9KTtcbiAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSBuZXdfaW5ib3hfdXNlcnM7XG4gICAgc2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCI7XG4gICAgaW5zLm91dGJveF91c2Vycy5wdXNoKGN1cnJlbnRfdXNlcik7XG4gICAgc2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnMub3V0Ym94X3VzZXJzKTtcbiAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgc2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgIHNldE9iai52YWx1ZXMgPSBpbnMudmFsdWVzO1xuICAgIHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHByZV90cmFjZS5uYW1lO1xuICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWQsXG4gICAgICAndHJhY2VzLl9pZCc6IGxhc3RfdHJhY2UuX2lkXG4gICAgfSwge1xuICAgICAgJHNldDogc2V0T2JqXG4gICAgfSk7XG4gICAgYiA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgIH0sIHtcbiAgICAgICRwdXNoOiB7XG4gICAgICAgIHRyYWNlczogbmV3VHJhY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAociAmJiBiKSB7XG4gICAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyKTtcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmV0dXJuX3BlbmRpbmdfaW5ib3hcIiwgaW5zdGFuY2UsIHJlYXNvbiwgY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgXy5lYWNoKHJlc3RfY291bnRlcl91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0aW5zdGFuY2VfcmVtaW5kOiAocmVtaW5kX3VzZXJzLCByZW1pbmRfY291bnQsIHJlbWluZF9kZWFkbGluZSwgaW5zdGFuY2VfaWQsIGFjdGlvbl90eXBlcywgdHJhY2VfaWQpLT5cclxuXHRcdGNoZWNrIHJlbWluZF91c2VycywgQXJyYXlcclxuXHRcdGNoZWNrIHJlbWluZF9jb3VudCwgTWF0Y2guT25lT2YoJ3NpbmdsZScsICdtdWx0aScpXHJcblx0XHRjaGVjayByZW1pbmRfZGVhZGxpbmUsIERhdGVcclxuXHRcdGNoZWNrIGluc3RhbmNlX2lkLCBTdHJpbmdcclxuXHRcdGNoZWNrIGFjdGlvbl90eXBlcywgQXJyYXlcclxuXHRcdGNoZWNrIHRyYWNlX2lkLCBTdHJpbmdcclxuXHJcblx0XHRjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZFxyXG5cdFx0bGFzdF9yZW1pbmRfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlX2lkfSwge2ZpZWxkczoge25hbWU6IDEsIHRyYWNlczogMSwgdmFsdWVzOiAxLCBzcGFjZTogMX19KVxyXG5cdFx0aWYgYWN0aW9uX3R5cGVzLmluY2x1ZGVzKCdhZG1pbicpXHJcblx0XHRcdGlmIHJlbWluZF9jb3VudCBpcyAnc2luZ2xlJ1xyXG5cdFx0XHRcdF8uZWFjaCBpbnMudHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhcCktPlxyXG5cdFx0XHRcdFx0XHRpZiByZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgYW5kIGFwLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdGxhc3RfcmVtaW5kX3VzZXJzLnB1c2ggYXAudXNlclxyXG5cdFx0XHRlbHNlIGlmIHJlbWluZF9jb3VudCBpcyAnbXVsdGknXHJcblx0XHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0XHRwcmlvcml0eSA9IGlucy52YWx1ZXMucHJpb3JpdHlcclxuXHRcdFx0XHRfLmVhY2ggaW5zLnRyYWNlcywgKHQpLT5cclxuXHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYXApLT5cclxuXHRcdFx0XHRcdFx0aWYgcmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpIGFuZCBhcC5pc19maW5pc2hlZCBpc250IHRydWVcclxuXHRcdFx0XHRcdFx0XHRsYXN0X3JlbWluZF91c2Vycy5wdXNoIGFwLnVzZXJcclxuXHRcdFx0XHRcdFx0XHRhcC5tYW51YWxfZGVhZGxpbmUgPSByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHQjIO+8iDHvvInigJzmma7pgJrigJ3vvJrlpoLkuInkuKrlt6XkvZzml6XlhoXmnKrlpITnkIbvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrkuozml6XlhoXvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDlpoLkuozml6XlkI7ku43mnKrlpITnkIbvvIzns7vnu5/mr4/lpKnoh6rliqjlj5Hnn63kv6Hmj5DphpLvvIzlip7nu5Pml7bpmZDkuLrkuIDml6XlhoXjgIJcclxuXHRcdFx0XHRcdFx0XHRpZiBwcmlvcml0eSBpcyBcIuaZrumAmlwiIG9yIG5vdCBwcmlvcml0eVxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdFx0IyDvvIgy77yJ4oCc5Yqe5paH4oCd77ya5aaC5LiA5Liq5bel5L2c5pel5YaF5pyq5aSE55CG77yM57O757uf6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5Li66KGo5Y2V5LiK55qE4oCc5Yqe57uT5pe26ZmQ4oCd77yI5paH5Lmm5b2V5YWl55qE5pe26Ze077yJ77ybXHJcblx0XHRcdFx0XHRcdFx0IyAg5aaC5LiA5pel5ZCO5LuN5pyq5aSE55CG77yM57O757uf5q+P5aSp6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5LiN5Y+Y77ybXHJcblx0XHRcdFx0XHRcdFx0IyAg6Led56a75Yqe57uT5pe26ZmQ5Li65Y2K5pel5pe277yM5YiZ5q+P5Y2K5Liq5bel5L2c5pel5o+Q6YaS5Zub5qyh77yb6LaF6L+H5Yqe57uT5pe26ZmQ5ZCO5LuN54S25oyJ54Wn5q+P5Y2K5pel5Zub5qyh5o+Q6YaS44CCXHJcblx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBwcmlvcml0eSBpcyBcIuWKnuaWh1wiXHJcblx0XHRcdFx0XHRcdFx0XHRpZiBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUgIyDotoXov4fkuoblip7nu5Pml7bpmZDmiJbogIXot53nprvlip7nu5Pml7bpmZDljYrml6XlhoVcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXAucmVtaW5kX2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdywgdHJ1ZSlcclxuXHRcdFx0XHRcdFx0XHRcdGVsc2UgaWYgU3RlZWRvcy5jYWN1bGF0ZVdvcmtpbmdUaW1lKG5vdywgMSkgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZSA9IChiYXNlX2RhdGUpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwbHVzX2hhbGZkYXlfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIHBsdXNfaGFsZmRheV9kYXRlID4gcmVtaW5kX2RlYWRsaW5lXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUsIHRydWUpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlKG5vdylcclxuXHJcblx0XHRcdFx0XHRcdFx0IyDvvIgz77yJ4oCc57Sn5oCl4oCd77ya5Zyo5Y+R6YCB55qE5ZCM5pe277yM57O757uf6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5Li66KGo5Y2V5LiK55qE4oCc5Yqe57uT5pe26ZmQ4oCd77yI5paH5Lmm5b2V5YWl55qE5pe26Ze077yJ77ybXHJcblx0XHRcdFx0XHRcdFx0IyAg5aaC5Y2K5pel5YaF5LuN5pyq5aSE55CG77yM57O757uf5q+P5Y2K5aSp6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5LiN5Y+Y77yb6Led56a75Yqe57uT5pe26ZmQ5Li65Y2K5pel5pe277yM5q+P5Y2K5Liq5bel5L2c5pel5o+Q6YaS5Zub5qyh77yb6LaF6L+H5Yqe57uT5pe26ZmQ5ZCO5LuN54S25oyJ54Wn5q+P5Y2K5pel5Zub5qyh5o+Q6YaS44CCXHJcblx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBwcmlvcml0eSBpcyBcIue0p+aApVwiXHJcblx0XHRcdFx0XHRcdFx0XHRpZiBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUgIyDotoXov4fkuoblip7nu5Pml7bpmZDmiJbogIXot53nprvlip7nu5Pml7bpmZDljYrml6XlhoVcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXAucmVtaW5kX2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdywgdHJ1ZSlcclxuXHRcdFx0XHRcdFx0XHRcdGVsc2UgaWYgU3RlZWRvcy5jYWN1bGF0ZVdvcmtpbmdUaW1lKG5vdywgMSkgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZSA9IChiYXNlX2RhdGUpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwbHVzX2hhbGZkYXlfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIHBsdXNfaGFsZmRheV9kYXRlID4gcmVtaW5kX2RlYWRsaW5lXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUsIHRydWUpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlKG5vdylcclxuXHJcblx0XHRcdFx0XHRcdFx0IyDvvIg077yJ4oCc54m55oCl4oCd77ya5Zyo5Y+R6YCB55qE5ZCM5pe277yM57O757uf6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5Li66KGo5Y2V5LiK55qE4oCc5Yqe57uT5pe26ZmQ4oCd77yI5paH5Lmm5b2V5YWl55qE5pe26Ze077yJ77ybXHJcblx0XHRcdFx0XHRcdFx0IyAg5aaC5Y2K5pel5YaF5LuN5pyq5aSE55CG77yM57O757uf5q+P5Y2K5Liq5bel5L2c5pel5o+Q6YaS5Zub5qyh77ya5Yqe57uT5pe26ZmQ5LiN5Y+Y77yb6LaF6L+H5Yqe57uT5pe26ZmQ5ZCO5LuN54S25oyJ54Wn5q+P5Y2K5pel5Zub5qyh5o+Q6YaS44CCXHJcblx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBwcmlvcml0eSBpcyBcIueJueaApVwiXHJcblx0XHRcdFx0XHRcdFx0XHRpZiBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUgIyDotoXov4fkuoblip7nu5Pml7bpmZDmiJbogIXot53nprvlip7nu5Pml7bpmZDljYrml6XlhoVcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXAucmVtaW5kX2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdywgdHJ1ZSlcclxuXHRcdFx0XHRcdFx0XHRcdGVsc2UgaWYgU3RlZWRvcy5jYWN1bGF0ZVdvcmtpbmdUaW1lKG5vdywgMSkgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZSA9IChiYXNlX2RhdGUpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwbHVzX2hhbGZkYXlfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIHBsdXNfaGFsZmRheV9kYXRlID4gcmVtaW5kX2RlYWRsaW5lXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUsIHRydWUpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlKG5vdylcclxuXHJcblx0XHRcdFx0aWYgbm90IF8uaXNFbXB0eShsYXN0X3JlbWluZF91c2VycylcclxuXHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHNldDogeyd0cmFjZXMnOiBpbnMudHJhY2VzfX0pXHJcblxyXG5cdFx0ZWxzZSBpZiBhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2FwcGxpY2FudCcpXHJcblx0XHRcdHRyYWNlID0gXy5maW5kIGlucy50cmFjZXMsICh0KS0+XHJcblx0XHRcdFx0cmV0dXJuIHQuX2lkIGlzIHRyYWNlX2lkXHJcblx0XHRcdF8uZWFjaCB0cmFjZS5hcHByb3ZlcywgKGFwKS0+XHJcblx0XHRcdFx0aWYgcmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpIGFuZCBhcC5pc19maW5pc2hlZCBpc250IHRydWVcclxuXHRcdFx0XHRcdGxhc3RfcmVtaW5kX3VzZXJzLnB1c2ggYXAudXNlclxyXG5cclxuXHRcdGVsc2UgaWYgYWN0aW9uX3R5cGVzLmluY2x1ZGVzKCdjYycpXHJcblx0XHRcdF8uZWFjaCBpbnMudHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYXApLT5cclxuXHRcdFx0XHRcdGlmIHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSBhbmQgYXAuaXNfZmluaXNoZWQgaXNudCB0cnVlIGFuZCBhcC50eXBlIGlzICdjYycgYW5kIGFwLmZyb21fdXNlciBpcyBjdXJyZW50X3VzZXJfaWRcclxuXHRcdFx0XHRcdFx0bGFzdF9yZW1pbmRfdXNlcnMucHVzaCBhcC51c2VyXHJcblxyXG5cdFx0dXVmbG93TWFuYWdlci5zZW5kUmVtaW5kU01TIGlucy5uYW1lLCByZW1pbmRfZGVhZGxpbmUsIGxhc3RfcmVtaW5kX3VzZXJzLCBpbnMuc3BhY2UsIGlucy5faWRcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIGluc3RhbmNlX3JlbWluZDogZnVuY3Rpb24ocmVtaW5kX3VzZXJzLCByZW1pbmRfY291bnQsIHJlbWluZF9kZWFkbGluZSwgaW5zdGFuY2VfaWQsIGFjdGlvbl90eXBlcywgdHJhY2VfaWQpIHtcbiAgICB2YXIgY3VycmVudF91c2VyX2lkLCBpbnMsIGxhc3RfcmVtaW5kX3VzZXJzLCBub3csIHByaW9yaXR5LCB0cmFjZTtcbiAgICBjaGVjayhyZW1pbmRfdXNlcnMsIEFycmF5KTtcbiAgICBjaGVjayhyZW1pbmRfY291bnQsIE1hdGNoLk9uZU9mKCdzaW5nbGUnLCAnbXVsdGknKSk7XG4gICAgY2hlY2socmVtaW5kX2RlYWRsaW5lLCBEYXRlKTtcbiAgICBjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKTtcbiAgICBjaGVjayhhY3Rpb25fdHlwZXMsIEFycmF5KTtcbiAgICBjaGVjayh0cmFjZV9pZCwgU3RyaW5nKTtcbiAgICBjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZDtcbiAgICBsYXN0X3JlbWluZF91c2VycyA9IG5ldyBBcnJheTtcbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU6IDEsXG4gICAgICAgIHRyYWNlczogMSxcbiAgICAgICAgdmFsdWVzOiAxLFxuICAgICAgICBzcGFjZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2FkbWluJykpIHtcbiAgICAgIGlmIChyZW1pbmRfY291bnQgPT09ICdzaW5nbGUnKSB7XG4gICAgICAgIF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgcmV0dXJuIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhcCkge1xuICAgICAgICAgICAgaWYgKHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSAmJiBhcC5pc19maW5pc2hlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gbGFzdF9yZW1pbmRfdXNlcnMucHVzaChhcC51c2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHJlbWluZF9jb3VudCA9PT0gJ211bHRpJykge1xuICAgICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgICAgcHJpb3JpdHkgPSBpbnMudmFsdWVzLnByaW9yaXR5O1xuICAgICAgICBfLmVhY2goaW5zLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHJldHVybiBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYXApIHtcbiAgICAgICAgICAgIHZhciBjYWN1bGF0ZV9kYXRlO1xuICAgICAgICAgICAgaWYgKHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSAmJiBhcC5pc19maW5pc2hlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBsYXN0X3JlbWluZF91c2Vycy5wdXNoKGFwLnVzZXIpO1xuICAgICAgICAgICAgICBhcC5tYW51YWxfZGVhZGxpbmUgPSByZW1pbmRfZGVhZGxpbmU7XG4gICAgICAgICAgICAgIGlmIChwcmlvcml0eSA9PT0gXCLmma7pgJpcIiB8fCAhcHJpb3JpdHkpIHtcblxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByaW9yaXR5ID09PSBcIuWKnuaWh1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwLnJlbWluZF9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3csIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoU3RlZWRvcy5jYWN1bGF0ZVdvcmtpbmdUaW1lKG5vdywgMSkgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUgPSBmdW5jdGlvbihiYXNlX2RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsdXNfaGFsZmRheV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICBwbHVzX2hhbGZkYXlfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdXNfaGFsZmRheV9kYXRlID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXAucmVtaW5kX2RhdGUgPSBiYXNlX2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY3VsYXRlX2RhdGUobm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpb3JpdHkgPT09IFwi57Sn5oClXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3cpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYXAucmVtaW5kX2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZSA9IGZ1bmN0aW9uKGJhc2VfZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGx1c19oYWxmZGF5X2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FjdWxhdGVfZGF0ZShub3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmlvcml0eSA9PT0gXCLnibnmgKVcIikge1xuICAgICAgICAgICAgICAgIGlmIChTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFN0ZWVkb3MuY2FjdWxhdGVXb3JraW5nVGltZShub3csIDEpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlID0gZnVuY3Rpb24oYmFzZV9kYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbHVzX2hhbGZkYXlfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgcGx1c19oYWxmZGF5X2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVzX2hhbGZkYXlfZGF0ZSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWN1bGF0ZV9kYXRlKG5vdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIV8uaXNFbXB0eShsYXN0X3JlbWluZF91c2VycykpIHtcbiAgICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICd0cmFjZXMnOiBpbnMudHJhY2VzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFjdGlvbl90eXBlcy5pbmNsdWRlcygnYXBwbGljYW50JykpIHtcbiAgICAgIHRyYWNlID0gXy5maW5kKGlucy50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuX2lkID09PSB0cmFjZV9pZDtcbiAgICAgIH0pO1xuICAgICAgXy5lYWNoKHRyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbihhcCkge1xuICAgICAgICBpZiAocmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpICYmIGFwLmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3RfcmVtaW5kX3VzZXJzLnB1c2goYXAudXNlcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uX3R5cGVzLmluY2x1ZGVzKCdjYycpKSB7XG4gICAgICBfLmVhY2goaW5zLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGFwKSB7XG4gICAgICAgICAgaWYgKHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSAmJiBhcC5pc19maW5pc2hlZCAhPT0gdHJ1ZSAmJiBhcC50eXBlID09PSAnY2MnICYmIGFwLmZyb21fdXNlciA9PT0gY3VycmVudF91c2VyX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdF9yZW1pbmRfdXNlcnMucHVzaChhcC51c2VyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuc2VuZFJlbWluZFNNUyhpbnMubmFtZSwgcmVtaW5kX2RlYWRsaW5lLCBsYXN0X3JlbWluZF91c2VycywgaW5zLnNwYWNlLCBpbnMuX2lkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xyXG5cdG5leHRfc3RlcF91c2Vyc19ub3RfZm91bmQ6IChkZWFsX3R5cGUsIHN0ZXBfbmFtZSwgcGFyYW1zKSAtPlxyXG5cdFx0Y2hlY2sgZGVhbF90eXBlLCBTdHJpbmdcclxuXHRcdGNoZWNrIHN0ZXBfbmFtZSwgU3RyaW5nXHJcblx0XHRjaGVjayBwYXJhbXMsIE9iamVjdFxyXG5cclxuXHRcdHN0ciA9IFwiXCJcclxuXHRcdHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiB0aGlzLnVzZXJJZCB9LCB7IGZpZWxkczogeyBsb2NhbGU6IDEgfSB9KVxyXG5cdFx0I+iuvue9ruW9k+WJjeivreiogOeOr+Wig1xyXG5cdFx0bGFuZyA9ICdlbidcclxuXHRcdGlmIHVzZXIubG9jYWxlIGlzICd6aC1jbidcclxuXHRcdFx0bGFuZyA9ICd6aC1DTidcclxuXHJcblx0XHQjIOaMh+WumuWuoeaJueWyl+S9jVxyXG5cdFx0aWYgZGVhbF90eXBlIGlzICdhcHBsaWNhbnRSb2xlJ1xyXG5cdFx0XHRhcHByb3Zlcl9yb2xlcyA9IHBhcmFtcy5hcHByb3Zlcl9yb2xlc1xyXG5cdFx0XHRyb2xlcyA9IGRiLmZsb3dfcm9sZXMuZmluZCh7IF9pZDogeyAkaW46IGFwcHJvdmVyX3JvbGVzIH0gfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pLmZldGNoKClcclxuXHRcdFx0cm9sZXNfbmFtZSA9IF8ucGx1Y2socm9sZXMsICduYW1lJykudG9TdHJpbmcoKVxyXG5cdFx0XHRzdHIgPSBUQVBpMThuLl9fICduZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmFwcGxpY2FudF9yb2xlJywgeyBzdGVwX25hbWU6IHN0ZXBfbmFtZSwgcm9sZV9uYW1lOiByb2xlc19uYW1lIH0sIGxhbmdcclxuXHJcblxyXG5cdFx0cmV0dXJuIHN0clxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIG5leHRfc3RlcF91c2Vyc19ub3RfZm91bmQ6IGZ1bmN0aW9uKGRlYWxfdHlwZSwgc3RlcF9uYW1lLCBwYXJhbXMpIHtcbiAgICB2YXIgYXBwcm92ZXJfcm9sZXMsIGxhbmcsIHJvbGVzLCByb2xlc19uYW1lLCBzdHIsIHVzZXI7XG4gICAgY2hlY2soZGVhbF90eXBlLCBTdHJpbmcpO1xuICAgIGNoZWNrKHN0ZXBfbmFtZSwgU3RyaW5nKTtcbiAgICBjaGVjayhwYXJhbXMsIE9iamVjdCk7XG4gICAgc3RyID0gXCJcIjtcbiAgICB1c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICBfaWQ6IHRoaXMudXNlcklkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGxvY2FsZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGxhbmcgPSAnZW4nO1xuICAgIGlmICh1c2VyLmxvY2FsZSA9PT0gJ3poLWNuJykge1xuICAgICAgbGFuZyA9ICd6aC1DTic7XG4gICAgfVxuICAgIGlmIChkZWFsX3R5cGUgPT09ICdhcHBsaWNhbnRSb2xlJykge1xuICAgICAgYXBwcm92ZXJfcm9sZXMgPSBwYXJhbXMuYXBwcm92ZXJfcm9sZXM7XG4gICAgICByb2xlcyA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogYXBwcm92ZXJfcm9sZXNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICByb2xlc19uYW1lID0gXy5wbHVjayhyb2xlcywgJ25hbWUnKS50b1N0cmluZygpO1xuICAgICAgc3RyID0gVEFQaTE4bi5fXygnbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZC5hcHBsaWNhbnRfcm9sZScsIHtcbiAgICAgICAgc3RlcF9uYW1lOiBzdGVwX25hbWUsXG4gICAgICAgIHJvbGVfbmFtZTogcm9sZXNfbmFtZVxuICAgICAgfSwgbGFuZyk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH1cbn0pO1xuIiwiX2V2YWwgPSByZXF1aXJlKCdldmFsJylcclxuXHJcbk1ldGVvci5tZXRob2RzXHJcblx0aW5zdGFuY2VOdW1iZXJCdWlsZGVyOiAoc3BhY2VJZCwgbmFtZSktPlxyXG5cclxuXHRcdG51bWJlclJ1bGVzID0gZGIuaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmZpbmRPbmUoe3NwYWNlOiBzcGFjZUlkLCBuYW1lOiBuYW1lfSlcclxuXHJcblx0XHRpZiAhbnVtYmVyUnVsZXNcclxuXHRcdFx0dGhyb3cgbmV3ICBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwiI3tuYW1lfVwiKVxyXG5cclxuXHRcdGRhdGUgPSBuZXcgRGF0ZSgpXHJcblxyXG5cdFx0Y29udGV4dCA9IHt9XHJcblxyXG5cdFx0Y29udGV4dC5fID0gX1xyXG5cclxuXHRcdF9ZWVlZID0gZGF0ZS5nZXRGdWxsWWVhcigpXHJcblxyXG5cdFx0X05VTUJFUiA9IChudW1iZXJSdWxlcy5udW1iZXIgfHwgMCkgKyAxXHJcblxyXG5cdFx0Y29udGV4dC5ZWVlZID0gXy5jbG9uZShfWVlZWSlcclxuXHJcblx0XHRjb250ZXh0Lk1NID0gZGF0ZS5nZXRNb250aCgpICsgMVxyXG5cclxuXHRcdGNvbnRleHQubW0gPSBkYXRlLmdldE1vbnRoKCkgKyAxXHJcblxyXG5cdFx0aWYgY29udGV4dC5NTSA8IDEwXHJcblx0XHRcdGNvbnRleHQuTU0gPSBcIjBcIiArIGNvbnRleHQuTU1cclxuXHJcblx0XHRjb250ZXh0LkREID0gZGF0ZS5nZXREYXRlKClcclxuXHJcblx0XHRjb250ZXh0LmRkID0gZGF0ZS5nZXREYXRlKClcclxuXHJcblx0XHRpZiBjb250ZXh0LkREIDwgMTBcclxuXHRcdFx0Y29udGV4dC5ERCA9IFwiMFwiICsgY29udGV4dC5ERFxyXG5cclxuXHRcdGlmIGNvbnRleHQuWVlZWSAhPSBudW1iZXJSdWxlcy55ZWFyXHJcblx0XHRcdF9OVU1CRVIgPSBudW1iZXJSdWxlcy5maXJzdF9udW1iZXIgfHwgMVxyXG5cclxuXHRcdGNvbnRleHQuTlVNQkVSID0gXy5jbG9uZShfTlVNQkVSKVxyXG5cclxuXHRcdHJ1bGVzID0gbnVtYmVyUnVsZXMucnVsZXMucmVwbGFjZShcIntZWVlZfVwiLCBcIicgKyBZWVlZICsgJ1wiKS5yZXBsYWNlKFwie01NfVwiLCBcIicgKyBNTSArICdcIikucmVwbGFjZShcIntOVU1CRVJ9XCIsIFwiJyArIE5VTUJFUiArICdcIilcclxuXHJcblx0XHRzY3JpcHQgPSBcInZhciBuZXdObyA9ICcje3J1bGVzfSc7IGV4cG9ydHMubmV3Tm8gPSBuZXdOb1wiO1xyXG5cclxuXHRcdHRyeVxyXG5cdFx0XHRyZXMgPSBfZXZhbChzY3JpcHQsIFwibmV3Tm9cIiwgY29udGV4dCwgZmFsc2UpLm5ld05vXHJcblxyXG5cdFx0XHRkYi5pbnN0YW5jZV9udW1iZXJfcnVsZXMudXBkYXRlKHtfaWQ6IG51bWJlclJ1bGVzLl9pZH0sIHskc2V0OiB7eWVhcjogX1lZWVksIG51bWJlcjogX05VTUJFUn19KVxyXG5cclxuXHRcdFx0Y29uc29sZS5sb2cgdGhpcy51c2VySWQsIHJlc1xyXG5cclxuXHRcdGNhdGNoIGVcclxuXHRcdFx0cmVzID0ge19lcnJvcjogZX1cclxuXHJcblx0XHRyZXR1cm4gcmVzO1xyXG4iLCJ2YXIgX2V2YWw7XG5cbl9ldmFsID0gcmVxdWlyZSgnZXZhbCcpO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIGluc3RhbmNlTnVtYmVyQnVpbGRlcjogZnVuY3Rpb24oc3BhY2VJZCwgbmFtZSkge1xuICAgIHZhciBfTlVNQkVSLCBfWVlZWSwgY29udGV4dCwgZGF0ZSwgZSwgbnVtYmVyUnVsZXMsIHJlcywgcnVsZXMsIHNjcmlwdDtcbiAgICBudW1iZXJSdWxlcyA9IGRiLmluc3RhbmNlX251bWJlcl9ydWxlcy5maW5kT25lKHtcbiAgICAgIHNwYWNlOiBzcGFjZUlkLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuICAgIGlmICghbnVtYmVyUnVsZXMpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwiXCIgKyBuYW1lKTtcbiAgICB9XG4gICAgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY29udGV4dCA9IHt9O1xuICAgIGNvbnRleHQuXyA9IF87XG4gICAgX1lZWVkgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgX05VTUJFUiA9IChudW1iZXJSdWxlcy5udW1iZXIgfHwgMCkgKyAxO1xuICAgIGNvbnRleHQuWVlZWSA9IF8uY2xvbmUoX1lZWVkpO1xuICAgIGNvbnRleHQuTU0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgIGNvbnRleHQubW0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgIGlmIChjb250ZXh0Lk1NIDwgMTApIHtcbiAgICAgIGNvbnRleHQuTU0gPSBcIjBcIiArIGNvbnRleHQuTU07XG4gICAgfVxuICAgIGNvbnRleHQuREQgPSBkYXRlLmdldERhdGUoKTtcbiAgICBjb250ZXh0LmRkID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgaWYgKGNvbnRleHQuREQgPCAxMCkge1xuICAgICAgY29udGV4dC5ERCA9IFwiMFwiICsgY29udGV4dC5ERDtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQuWVlZWSAhPT0gbnVtYmVyUnVsZXMueWVhcikge1xuICAgICAgX05VTUJFUiA9IG51bWJlclJ1bGVzLmZpcnN0X251bWJlciB8fCAxO1xuICAgIH1cbiAgICBjb250ZXh0Lk5VTUJFUiA9IF8uY2xvbmUoX05VTUJFUik7XG4gICAgcnVsZXMgPSBudW1iZXJSdWxlcy5ydWxlcy5yZXBsYWNlKFwie1lZWVl9XCIsIFwiJyArIFlZWVkgKyAnXCIpLnJlcGxhY2UoXCJ7TU19XCIsIFwiJyArIE1NICsgJ1wiKS5yZXBsYWNlKFwie05VTUJFUn1cIiwgXCInICsgTlVNQkVSICsgJ1wiKTtcbiAgICBzY3JpcHQgPSBcInZhciBuZXdObyA9ICdcIiArIHJ1bGVzICsgXCInOyBleHBvcnRzLm5ld05vID0gbmV3Tm9cIjtcbiAgICB0cnkge1xuICAgICAgcmVzID0gX2V2YWwoc2NyaXB0LCBcIm5ld05vXCIsIGNvbnRleHQsIGZhbHNlKS5uZXdObztcbiAgICAgIGRiLmluc3RhbmNlX251bWJlcl9ydWxlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IG51bWJlclJ1bGVzLl9pZFxuICAgICAgfSwge1xuICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgeWVhcjogX1lZWVksXG4gICAgICAgICAgbnVtYmVyOiBfTlVNQkVSXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2codGhpcy51c2VySWQsIHJlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGUgPSBlcnJvcjtcbiAgICAgIHJlcyA9IHtcbiAgICAgICAgX2Vycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0Y2hlY2tfbWFpbl9hdHRhY2g6IChpbnNfaWQsIG5hbWUpLT5cclxuXHRcdGNoZWNrIGluc19pZCwgU3RyaW5nXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmNoZWNrTWFpbkF0dGFjaChpbnNfaWQsIG5hbWUpXHJcblx0XHRyZXR1cm4gJ3N1Y2Nlc3MnXHJcblxyXG4iLCJNZXRlb3IubWV0aG9kc1xyXG5cdHJlbW92ZV9yZWxhdGVkOiAoaW5zX2lkLCByZV9pbnNfaWQpLT5cclxuXHRcdGNoZWNrKGluc19pZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2socmVfaW5zX2lkLCBTdHJpbmcpXHJcblx0XHRpZiAhdGhpcy51c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zX2lkfSwge2ZpZWxkczoge3JlbGF0ZWRfaW5zdGFuY2VzOiAxfX0pXHJcblxyXG5cdFx0aWYgaW5zXHJcblx0XHRcdHJlcyA9IGlucy5yZWxhdGVkX2luc3RhbmNlcyB8fCBbXVxyXG5cclxuXHRcdFx0aW5kZXggPSByZXMuaW5kZXhPZihyZV9pbnNfaWQpXHJcblxyXG5cdFx0XHRpZiBpbmRleCA+IC0xXHJcblx0XHRcdFx0cmVzLnJlbW92ZShpbmRleClcclxuXHJcblx0XHRcdHNldF9vYmogPSBuZXcgT2JqZWN0O1xyXG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdFx0c2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xyXG5cdFx0XHRzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVzXHJcblxyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc19pZH0sIHskc2V0OiBzZXRfb2JqfSlcclxuXHJcblx0dXBkYXRlX2luc3RhbmNlX3JlbGF0ZWQ6IChpbnNfaWQsIHJlbGF0ZWRfaW5zdGFuY2VzKS0+XHJcblx0XHRjaGVjayhpbnNfaWQsIFN0cmluZylcclxuXHRcdGNoZWNrKHJlbGF0ZWRfaW5zdGFuY2VzLCBBcnJheSlcclxuXHJcblx0XHRpZiAhdGhpcy51c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zX2lkLCAkb3I6IFt7c3VibWl0dGVyOiB0aGlzLnVzZXJJZH0sIHthcHBsaWNhbnQ6IHRoaXMudXNlcklkfV19LCB7ZmllbGRzOiB7c3RhdGU6IDF9fSlcclxuXHJcblx0XHRpZiBpbnNcclxuXHRcdFx0c2V0X29iaiA9IG5ldyBPYmplY3Q7XHJcblx0XHRcdHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHNldF9vYmoucmVsYXRlZF9pbnN0YW5jZXMgPSByZWxhdGVkX2luc3RhbmNlc1xyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc19pZH0sIHskc2V0OiBzZXRfb2JqfSlcclxuXHJcblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogIHJlbGF0ZWRfaW5zdGFuY2VzfX0sIHtmaWVsZHM6IHtfaWQ6IDEsIHZhbHVlczogMX19KS5mZXRjaCgpXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgcmVtb3ZlX3JlbGF0ZWQ6IGZ1bmN0aW9uKGluc19pZCwgcmVfaW5zX2lkKSB7XG4gICAgdmFyIGluZGV4LCBpbnMsIHJlcywgc2V0X29iajtcbiAgICBjaGVjayhpbnNfaWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVfaW5zX2lkLCBTdHJpbmcpO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnNfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgcmVsYXRlZF9pbnN0YW5jZXM6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zKSB7XG4gICAgICByZXMgPSBpbnMucmVsYXRlZF9pbnN0YW5jZXMgfHwgW107XG4gICAgICBpbmRleCA9IHJlcy5pbmRleE9mKHJlX2luc19pZCk7XG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICByZXMucmVtb3ZlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHNldF9vYmogPSBuZXcgT2JqZWN0O1xuICAgICAgc2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG4gICAgICBzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XG4gICAgICBzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVzO1xuICAgICAgcmV0dXJuIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IGluc19pZFxuICAgICAgfSwge1xuICAgICAgICAkc2V0OiBzZXRfb2JqXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZV9pbnN0YW5jZV9yZWxhdGVkOiBmdW5jdGlvbihpbnNfaWQsIHJlbGF0ZWRfaW5zdGFuY2VzKSB7XG4gICAgdmFyIGlucywgc2V0X29iajtcbiAgICBjaGVjayhpbnNfaWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVsYXRlZF9pbnN0YW5jZXMsIEFycmF5KTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zX2lkLFxuICAgICAgJG9yOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzdWJtaXR0ZXI6IHRoaXMudXNlcklkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBhcHBsaWNhbnQ6IHRoaXMudXNlcklkXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zKSB7XG4gICAgICBzZXRfb2JqID0gbmV3IE9iamVjdDtcbiAgICAgIHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuICAgICAgc2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xuICAgICAgc2V0X29iai5yZWxhdGVkX2luc3RhbmNlcyA9IHJlbGF0ZWRfaW5zdGFuY2VzO1xuICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRzZXQ6IHNldF9vYmpcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgX2lkOiB7XG4gICAgICAgICRpbjogcmVsYXRlZF9pbnN0YW5jZXNcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgX2lkOiAxLFxuICAgICAgICB2YWx1ZXM6IDFcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0dXBkYXRlRmxvd1Bvc2l0aW9uOiAoZGF0YSkgLT5cclxuXHRcdGRiLmZsb3dfcG9zaXRpb25zLnVwZGF0ZSB7IF9pZDogZGF0YS5faWQgfSwgJHNldDpcclxuXHRcdFx0cm9sZTogZGF0YS5yb2xlXHJcblx0XHRcdHVzZXJzOiBkYXRhLnVzZXJzXHJcblx0XHRcdG9yZzogZGF0YS5vcmdcclxuXHJcblx0dXBkYXRlRmxvd1JvbGU6IChkYXRhKSAtPlxyXG5cdFx0Y29uc29sZS5sb2cgZGF0YS5faWRcclxuXHRcdGNvbnNvbGUubG9nIGRhdGEubmFtZVxyXG5cdFx0ZGIuZmxvd19yb2xlcy51cGRhdGUgeyBfaWQ6IGRhdGEuX2lkIH0sICRzZXQ6XHJcblx0XHRcdG5hbWU6IGRhdGEubmFtZSIsIk1ldGVvci5tZXRob2RzKHtcbiAgdXBkYXRlRmxvd1Bvc2l0aW9uOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIGRiLmZsb3dfcG9zaXRpb25zLnVwZGF0ZSh7XG4gICAgICBfaWQ6IGRhdGEuX2lkXG4gICAgfSwge1xuICAgICAgJHNldDoge1xuICAgICAgICByb2xlOiBkYXRhLnJvbGUsXG4gICAgICAgIHVzZXJzOiBkYXRhLnVzZXJzLFxuICAgICAgICBvcmc6IGRhdGEub3JnXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHVwZGF0ZUZsb3dSb2xlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgY29uc29sZS5sb2coZGF0YS5faWQpO1xuICAgIGNvbnNvbGUubG9nKGRhdGEubmFtZSk7XG4gICAgcmV0dXJuIGRiLmZsb3dfcm9sZXMudXBkYXRlKHtcbiAgICAgIF9pZDogZGF0YS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIG5hbWU6IGRhdGEubmFtZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0c3RhcnRfZmxvdzogKHNwYWNlLCBmbG93SWQsIHN0YXJ0KSAtPlxyXG5cclxuXHRcdGtleVZhbHVlID0gZGIuc3RlZWRvc19rZXl2YWx1ZXMuZmluZE9uZSh7IHNwYWNlOiBzcGFjZSwgdXNlcjogdGhpcy51c2VySWQsIGtleTogJ3N0YXJ0X2Zsb3dzJyB9LCB7IGZpZWxkczogeyB2YWx1ZTogMSB9IH0pXHJcblxyXG5cdFx0c3RhcnRfZmxvd3MgPSBrZXlWYWx1ZT8udmFsdWUgfHwgW11cclxuXHJcblx0XHRpZiBzdGFydFxyXG5cdFx0XHRzdGFydF9mbG93cy5wdXNoKGZsb3dJZClcclxuXHJcblx0XHRcdHN0YXJ0X2Zsb3dzID0gXy51bmlxKHN0YXJ0X2Zsb3dzKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRzdGFydF9mbG93cy5yZW1vdmUoc3RhcnRfZmxvd3MuaW5kZXhPZihmbG93SWQpKVxyXG5cclxuXHRcdGlmIGtleVZhbHVlXHJcblx0XHRcdGRiLnN0ZWVkb3Nfa2V5dmFsdWVzLnVwZGF0ZSh7IF9pZDoga2V5VmFsdWUuX2lkIH0sIHsgc3BhY2U6IHNwYWNlLCB1c2VyOiB0aGlzLnVzZXJJZCwga2V5OiAnc3RhcnRfZmxvd3MnLCB2YWx1ZTogc3RhcnRfZmxvd3MgfSlcclxuXHRcdGVsc2VcclxuXHRcdFx0ZGIuc3RlZWRvc19rZXl2YWx1ZXMuaW5zZXJ0KHsgc3BhY2U6IHNwYWNlLCB1c2VyOiB0aGlzLnVzZXJJZCwga2V5OiAnc3RhcnRfZmxvd3MnLCB2YWx1ZTogc3RhcnRfZmxvd3MgfSlcclxuXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgc3RhcnRfZmxvdzogZnVuY3Rpb24oc3BhY2UsIGZsb3dJZCwgc3RhcnQpIHtcbiAgICB2YXIga2V5VmFsdWUsIHN0YXJ0X2Zsb3dzO1xuICAgIGtleVZhbHVlID0gZGIuc3RlZWRvc19rZXl2YWx1ZXMuZmluZE9uZSh7XG4gICAgICBzcGFjZTogc3BhY2UsXG4gICAgICB1c2VyOiB0aGlzLnVzZXJJZCxcbiAgICAgIGtleTogJ3N0YXJ0X2Zsb3dzJ1xuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB2YWx1ZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIHN0YXJ0X2Zsb3dzID0gKGtleVZhbHVlICE9IG51bGwgPyBrZXlWYWx1ZS52YWx1ZSA6IHZvaWQgMCkgfHwgW107XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICBzdGFydF9mbG93cy5wdXNoKGZsb3dJZCk7XG4gICAgICBzdGFydF9mbG93cyA9IF8udW5pcShzdGFydF9mbG93cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0X2Zsb3dzLnJlbW92ZShzdGFydF9mbG93cy5pbmRleE9mKGZsb3dJZCkpO1xuICAgIH1cbiAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgIHJldHVybiBkYi5zdGVlZG9zX2tleXZhbHVlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IGtleVZhbHVlLl9pZFxuICAgICAgfSwge1xuICAgICAgICBzcGFjZTogc3BhY2UsXG4gICAgICAgIHVzZXI6IHRoaXMudXNlcklkLFxuICAgICAgICBrZXk6ICdzdGFydF9mbG93cycsXG4gICAgICAgIHZhbHVlOiBzdGFydF9mbG93c1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkYi5zdGVlZG9zX2tleXZhbHVlcy5pbnNlcnQoe1xuICAgICAgICBzcGFjZTogc3BhY2UsXG4gICAgICAgIHVzZXI6IHRoaXMudXNlcklkLFxuICAgICAgICBrZXk6ICdzdGFydF9mbG93cycsXG4gICAgICAgIHZhbHVlOiBzdGFydF9mbG93c1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0Z2V0X2luc3RhbmNlX3RyYWNlczogKGluc19pZCktPlxyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0bWluaUFwcHJvdmVGaWVsZHMgPSBbJ19pZCcsICdpc19maW5pc2hlZCcsICd1c2VyJywgJ2hhbmRsZXInLCAnaGFuZGxlcl9uYW1lJywgJ3R5cGUnLCAnc3RhcnRfZGF0ZScsICdkZXNjcmlwdGlvbicsXHJcblx0XHRcdCdpc19yZWFkJywgJ2p1ZGdlJywgJ2ZpbmlzaF9kYXRlJywgJ2Zyb21fdXNlcl9uYW1lJywgJ2Zyb21fdXNlcicsICdjY19kZXNjcmlwdGlvbiddXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUge19pZDogaW5zX2lkfSwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcInRyYWNlcy5faWRcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5pc19maW5pc2hlZFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLnN0ZXBcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5zdGFydF9kYXRlXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMubmFtZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmZpbmlzaF9kYXRlXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuanVkZ2VcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5faWRcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5pc19maW5pc2hlZFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLnVzZXJcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9uYW1lXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy50eXBlXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuc3RhcnRfZGF0ZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmRlc2NyaXB0aW9uXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaXNfcmVhZFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmp1ZGdlXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZmluaXNoX2RhdGVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5mcm9tX3VzZXJfbmFtZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmZyb21fdXNlclwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmNjX2Rlc2NyaXB0aW9uXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMudHJhY2VcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5mb3J3YXJkX3NwYWNlXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZm9yd2FyZF9pbnN0YW5jZVwiOiAxXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAhaW5zXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHJldHVybiBpbnM/LnRyYWNlc1xyXG5cclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBnZXRfaW5zdGFuY2VfdHJhY2VzOiBmdW5jdGlvbihpbnNfaWQpIHtcbiAgICB2YXIgaW5zLCBtaW5pQXBwcm92ZUZpZWxkcztcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1pbmlBcHByb3ZlRmllbGRzID0gWydfaWQnLCAnaXNfZmluaXNoZWQnLCAndXNlcicsICdoYW5kbGVyJywgJ2hhbmRsZXJfbmFtZScsICd0eXBlJywgJ3N0YXJ0X2RhdGUnLCAnZGVzY3JpcHRpb24nLCAnaXNfcmVhZCcsICdqdWRnZScsICdmaW5pc2hfZGF0ZScsICdmcm9tX3VzZXJfbmFtZScsICdmcm9tX3VzZXInLCAnY2NfZGVzY3JpcHRpb24nXTtcbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy5faWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuaXNfZmluaXNoZWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuc3RlcFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5zdGFydF9kYXRlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLm5hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuZmluaXNoX2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuanVkZ2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuX2lkXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmlzX2ZpbmlzaGVkXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLnVzZXJcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlclwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX25hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMudHlwZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5zdGFydF9kYXRlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmRlc2NyaXB0aW9uXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmlzX3JlYWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuanVkZ2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZmluaXNoX2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyX25hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmNjX2Rlc2NyaXB0aW9uXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLnRyYWNlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmZvcndhcmRfc3BhY2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZm9yd2FyZF9pbnN0YW5jZVwiOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGlucyAhPSBudWxsID8gaW5zLnRyYWNlcyA6IHZvaWQgMDtcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xyXG5cdCdnZXRfYmF0Y2hfaW5zdGFuY2VzJzogKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzKS0+XHJcblx0XHRpZiAhdGhpcy51c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0aWYgIXNwYWNlXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdF9iYXRjaF9pbnN0YW5jZXMgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0QmF0Y2hJbnN0YW5jZXMoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMsIHRoaXMudXNlcklkKVxyXG5cclxuXHRcdHJldHVybiBfYmF0Y2hfaW5zdGFuY2VzXHJcblxyXG5cdCdnZXRfYmF0Y2hfaW5zdGFuY2VzX2NvdW50JzogKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzKS0+XHJcblx0XHRpZiAhdGhpcy51c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0aWYgIXNwYWNlXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdF9iYXRjaF9pbnN0YW5jZXMgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0QmF0Y2hJbnN0YW5jZXMoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMsIHRoaXMudXNlcklkKVxyXG5cclxuXHRcdHJldHVybiBfYmF0Y2hfaW5zdGFuY2VzPy5sZW5ndGggfHwgMFxyXG5cclxuXHQnZ2V0X215X2FwcHJvdmVzJzogKGluc3RhbmNlSWRzKS0+XHJcblxyXG5cdFx0dGhhdCA9IHRoaXNcclxuXHJcblx0XHRpZiAhdGhhdC51c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0bXlBcHByb3ZlcyA9IG5ldyBBcnJheSgpXHJcblxyXG5cdFx0aW5zdGFuY2VJZHMuZm9yRWFjaCAoaW5zSWQpLT5cclxuXHRcdFx0bXlfYXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRNeUFwcHJvdmUoaW5zSWQsIHRoYXQudXNlcklkKVxyXG5cdFx0XHRpZiBteV9hcHByb3ZlXHJcblx0XHRcdFx0bXlBcHByb3Zlcy5wdXNoKG15X2FwcHJvdmUpXHJcblxyXG5cdFx0cmV0dXJuIG15QXBwcm92ZXNcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gICdnZXRfYmF0Y2hfaW5zdGFuY2VzJzogZnVuY3Rpb24oc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMpIHtcbiAgICB2YXIgX2JhdGNoX2luc3RhbmNlcztcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghc3BhY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpO1xuICAgIHJldHVybiBfYmF0Y2hfaW5zdGFuY2VzO1xuICB9LFxuICAnZ2V0X2JhdGNoX2luc3RhbmNlc19jb3VudCc6IGZ1bmN0aW9uKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzKSB7XG4gICAgdmFyIF9iYXRjaF9pbnN0YW5jZXM7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXNwYWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF9iYXRjaF9pbnN0YW5jZXMgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0QmF0Y2hJbnN0YW5jZXMoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMsIHRoaXMudXNlcklkKTtcbiAgICByZXR1cm4gKF9iYXRjaF9pbnN0YW5jZXMgIT0gbnVsbCA/IF9iYXRjaF9pbnN0YW5jZXMubGVuZ3RoIDogdm9pZCAwKSB8fCAwO1xuICB9LFxuICAnZ2V0X215X2FwcHJvdmVzJzogZnVuY3Rpb24oaW5zdGFuY2VJZHMpIHtcbiAgICB2YXIgbXlBcHByb3ZlcywgdGhhdDtcbiAgICB0aGF0ID0gdGhpcztcbiAgICBpZiAoIXRoYXQudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG15QXBwcm92ZXMgPSBuZXcgQXJyYXkoKTtcbiAgICBpbnN0YW5jZUlkcy5mb3JFYWNoKGZ1bmN0aW9uKGluc0lkKSB7XG4gICAgICB2YXIgbXlfYXBwcm92ZTtcbiAgICAgIG15X2FwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0TXlBcHByb3ZlKGluc0lkLCB0aGF0LnVzZXJJZCk7XG4gICAgICBpZiAobXlfYXBwcm92ZSkge1xuICAgICAgICByZXR1cm4gbXlBcHByb3Zlcy5wdXNoKG15X2FwcHJvdmUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBteUFwcHJvdmVzO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0Y2hhbmdlX2Zsb3dfc3RhdGU6IChmbG93cykgLT5cclxuXHRcdGNoZWNrIGZsb3dzLCBBcnJheVxyXG5cclxuXHRcdF91c2VySWQgPSB0aGlzLnVzZXJJZFxyXG5cclxuXHRcdGlmICFfdXNlcklkXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGZsb3dzLmZvckVhY2ggKGZsb3cpIC0+XHJcblx0XHRcdHNwYWNlSWQgPSBmbG93LnNwYWNlXHJcblx0XHRcdGZvcm1JZCA9IGZsb3cuZm9ybVxyXG5cdFx0XHRmbG93SWQgPSBmbG93LmlkXHJcblx0XHRcdHN0YXRlID0gZmxvdy5zdGF0ZVxyXG5cclxuXHRcdFx0aWYgIVN0ZWVkb3MuaXNTcGFjZUFkbWluKHNwYWNlSWQsIF91c2VySWQpXHJcblx0XHRcdFx0dGhyb3cgIE1ldGVvci5FcnJvcig0MDEsIFwiTm8gcGVybWlzc2lvblwiKVxyXG5cclxuXHRcdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoeyBfaWQ6IGZvcm1JZCB9LCB7IGZpZWxkczogeyBoaXN0b3J5czogMCB9IH0pXHJcblxyXG5cdFx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7IF9pZDogZmxvd0lkIH0sIHsgZmllbGRzOiB7IGhpc3RvcnlzOiAwIH0gfSlcclxuXHJcblx0XHRcdGlmIHN0YXRlICE9ICdlbmFibGVkJyAmJiBzdGF0ZSAhPSAnZGlzYWJsZWQnXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwic3RhdGXml6DmlYhcIilcclxuXHJcblx0XHRcdGlmICFmb3JtXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwiZm9ybeaXoOaViFwiKVxyXG5cclxuXHRcdFx0aWYgIWZsb3dcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmbG935peg5pWIXCIpXHJcblxyXG5cdFx0XHRpZiAhZm9ybS5pc192YWxpZFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+W8leeUqOeahOihqOWNlVsje2Zvcm0ubmFtZX1d6aqM6K+B5pyq6YCa6L+H77yM6K+35omT5byA5rWB56iL6K6+6K6h5Zmo5qOA5p+l6KGo5Y2V6K6+572uXCIpXHJcblxyXG5cdFx0XHRpZiAhZmxvdy5pc192YWxpZFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOivt+aJk+W8gOa1geeoi+iuvuiuoeWZqOajgOafpea1geeoi+iuvue9rlwiKVxyXG5cclxuXHRcdFx0aWYgIVsnbmV3JywgJ21vZGlmeScsICdkZWxldGUnXS5pbmNsdWRlcyhmbG93LmZsb3d0eXBlKVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jGZsb3d0eXBl5YC85b+F6aG75pivbmV344CBbW9kaWZ544CBZGVsZXRl5YW25Lit5LmL5LiAXCIpXHJcblxyXG5cdFx0XHRpZiAhXy5pc0FycmF5KGZsb3cuY3VycmVudC5zdGVwcylcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzmtYHnqIvnmoTmraXpqqTkuI3og73kuLrnqbpcIilcclxuXHJcblx0XHRcdGlmIF8udW5pcShmbG93LmN1cnJlbnQuc3RlcHMsICduYW1lJykubGVuZ3RoICE9IGZsb3cuY3VycmVudC5zdGVwcy5sZW5ndGhcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzlkIzkuIDkuKrmtYHnqIvkuIvnmoTmraXpqqTnmoTlkI3np7DkuI3og73ph43lpI1cIilcclxuXHJcblx0XHRcdG5vdyA9IG5ldyBEYXRlXHJcblxyXG5cdFx0XHRpZiBzdGF0ZSA9PSAnZW5hYmxlZCdcclxuXHRcdFx0XHQj5rWB56iL5ZCv55So5YmN77yM5qCh6aqM5YW24oCc5oyH5a6a5Y6G5Y+y5q2l6aqk4oCd5bGe5oCn5Lit6KKr5byV55So55qE5q2l6aqk5piv5ZCm5a2Y5Zyo5LiU6IO96KKr5om+5Yiw77yI5LuF6ZmQ5LqO5rWB56iL55qE5pyA5paw54mI77yJXHJcblx0XHRcdFx0Zmxvdy5jdXJyZW50LnN0ZXBzLmZvckVhY2ggKHN0ZXApIC0+XHJcblx0XHRcdFx0XHRpZiBbJ3NwZWNpZnlTdGVwVXNlcicsICdzcGVjaWZ5U3RlcFJvbGUnXS5pbmNsdWRlcyhzdGVwLmRlYWxfdHlwZSlcclxuXHRcdFx0XHRcdFx0aWYgIXN0ZXAuYXBwcm92ZXJfc3RlcFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIuatpemqpFsje3N0ZXAubmFtZX1d5Lit55qE5oyH5a6a5Y6G5Y+y5q2l6aqk5LiN5a2Y5Zyo44CCXCIpXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRzcGVjaWZ5U3RlcCA9IF8uZmluZCBmbG93LmN1cnJlbnQuc3RlcHMsIChfc3RlcCkgLT5cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBzdGVwLmFwcHJvdmVyX3N0ZXAgPT0gX3N0ZXAuX2lkXHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICFzcGVjaWZ5U3RlcFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5q2l6aqkWyN7c3RlcC5uYW1lfV3kuK3nmoTmjIflrprljoblj7LmraXpqqTkuI3lrZjlnKjjgIJcIilcclxuXHJcblx0XHRcdFx0Zm9ybV9jdXJyZW50X2ZpZWxkc19jb2RlID0gZm9ybS5jdXJyZW50LmZpZWxkcy5nZXRQcm9wZXJ0eShcImNvZGVcIilcclxuXHJcblx0XHRcdFx0Zmxvdy5jdXJyZW50LnN0ZXBzLmZvckVhY2ggKHN0ZXApIC0+XHJcblx0XHRcdFx0XHRzdGVwLmZpZWxkc19tb2RpZmlhYmxlID0gXy5pbnRlcnNlY3Rpb24oc3RlcC5maWVsZHNfbW9kaWZpYWJsZSwgZm9ybV9jdXJyZW50X2ZpZWxkc19jb2RlKVxyXG5cclxuXHRcdFx0XHQj5aaC5p6cIOa1geeoi+WvueW6lOihqOWNlSDmmK/lgZznlKjnmoQg5YiZ5ZCv55SoXHJcblx0XHRcdFx0aWYgZm9ybS5zdGF0ZSA9PSAnZGlzYWJsZWQnXHJcblx0XHRcdFx0XHRkYi5mb3Jtcy51cGRhdGUoe19pZDogZm9ybS5faWR9LCB7JHNldDoge1wic3RhdGVcIjogXCJlbmFibGVkXCIsIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWR9fSlcclxuXHJcblx0XHRcdFx0Zmxvdy5jdXJyZW50Lm1vZGlmaWVkID0gbm93XHJcblx0XHRcdFx0Zmxvdy5jdXJyZW50LnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRmbG93LmN1cnJlbnQubW9kaWZpZWRfYnkgPSBfdXNlcklkXHJcblxyXG5cdFx0XHRcdGRiLmZsb3dzLnVwZGF0ZSh7IF9pZDogZmxvdy5faWQgfSwgeyAkc2V0OiB7IFwic3RhdGVcIjogXCJlbmFibGVkXCIsIFwiY3VycmVudFwiOiBmbG93LmN1cnJlbnQgfSB9KVxyXG5cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdCPnpoHnlKjmtYHnqItcclxuXHRcdFx0XHRkYi5mbG93cy51cGRhdGUoe19pZDogZmxvdy5faWR9LCB7JHNldDoge1wic3RhdGVcIjogXCJkaXNhYmxlZFwiLCBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LCBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csIFwiY3VycmVudC5tb2RpZmllZF9ieVwiOiBfdXNlcklkfX0pXHJcblxyXG5cdFx0XHRcdCMg5Yik5pat6KGo5Y2V5omA5pyJ5rWB56iL5piv5ZCm5bey57uP5YWo6YOo5YGc55SoIOWmguaenOW3suWFqOmDqOWBnOeUqCDliJnkv67mlLnooajljZXnirbmgIHkuLrlgZznlKhcclxuXHRcdFx0XHRfZmxvd3MgPSBkYi5mbG93cy5maW5kKHsgZm9ybTogZm9ybS5faWQgfSwgeyBmaWVsZHM6IHsgX2lkOiAxLCBzdGF0ZTogMSB9IH0pLmZldGNoKClcclxuXHJcblx0XHRcdFx0X2Zsb3dzX3N0YXRlID0gX2Zsb3dzLmdldFByb3BlcnR5KFwic3RhdGVcIilcclxuXHJcblx0XHRcdFx0aWYgIV9mbG93c19zdGF0ZS5pbmNsdWRlcygnZW5hYmxlZCcpXHJcblx0XHRcdFx0XHRkYi5mb3Jtcy51cGRhdGUoe19pZDogZm9ybS5faWR9LCB7JHNldDoge1wic3RhdGVcIjogXCJkaXNhYmxlZFwiLCBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LCBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csIFwiY3VycmVudC5tb2RpZmllZF9ieVwiOiBfdXNlcklkfX0pXHJcblxyXG5cclxuXHJcblxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIGNoYW5nZV9mbG93X3N0YXRlOiBmdW5jdGlvbihmbG93cykge1xuICAgIHZhciBfdXNlcklkO1xuICAgIGNoZWNrKGZsb3dzLCBBcnJheSk7XG4gICAgX3VzZXJJZCA9IHRoaXMudXNlcklkO1xuICAgIGlmICghX3VzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZmxvd3MuZm9yRWFjaChmdW5jdGlvbihmbG93KSB7XG4gICAgICB2YXIgX2Zsb3dzLCBfZmxvd3Nfc3RhdGUsIGZsb3dJZCwgZm9ybSwgZm9ybUlkLCBmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUsIG5vdywgc3BhY2VJZCwgc3RhdGU7XG4gICAgICBzcGFjZUlkID0gZmxvdy5zcGFjZTtcbiAgICAgIGZvcm1JZCA9IGZsb3cuZm9ybTtcbiAgICAgIGZsb3dJZCA9IGZsb3cuaWQ7XG4gICAgICBzdGF0ZSA9IGZsb3cuc3RhdGU7XG4gICAgICBpZiAoIVN0ZWVkb3MuaXNTcGFjZUFkbWluKHNwYWNlSWQsIF91c2VySWQpKSB7XG4gICAgICAgIHRocm93IE1ldGVvci5FcnJvcig0MDEsIFwiTm8gcGVybWlzc2lvblwiKTtcbiAgICAgIH1cbiAgICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmb3JtSWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgaGlzdG9yeXM6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICAgIF9pZDogZmxvd0lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGhpc3RvcnlzOiAwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHN0YXRlICE9PSAnZW5hYmxlZCcgJiYgc3RhdGUgIT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwic3RhdGXml6DmlYhcIik7XG4gICAgICB9XG4gICAgICBpZiAoIWZvcm0pIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwiZm9ybeaXoOaViFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghZmxvdykge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmbG935peg5pWIXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFmb3JtLmlzX3ZhbGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+W8leeUqOeahOihqOWNlVtcIiArIGZvcm0ubmFtZSArIFwiXemqjOivgeacqumAmui/h++8jOivt+aJk+W8gOa1geeoi+iuvuiuoeWZqOajgOafpeihqOWNleiuvue9rlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghZmxvdy5pc192YWxpZCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzor7fmiZPlvIDmtYHnqIvorr7orqHlmajmo4Dmn6XmtYHnqIvorr7nva5cIik7XG4gICAgICB9XG4gICAgICBpZiAoIVsnbmV3JywgJ21vZGlmeScsICdkZWxldGUnXS5pbmNsdWRlcyhmbG93LmZsb3d0eXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIxmbG93dHlwZeWAvOW/hemhu+aYr25ld+OAgW1vZGlmeeOAgWRlbGV0ZeWFtuS4reS5i+S4gFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghXy5pc0FycmF5KGZsb3cuY3VycmVudC5zdGVwcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yM5rWB56iL55qE5q2l6aqk5LiN6IO95Li656m6XCIpO1xuICAgICAgfVxuICAgICAgaWYgKF8udW5pcShmbG93LmN1cnJlbnQuc3RlcHMsICduYW1lJykubGVuZ3RoICE9PSBmbG93LmN1cnJlbnQuc3RlcHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOWQjOS4gOS4qua1geeoi+S4i+eahOatpemqpOeahOWQjeensOS4jeiDvemHjeWkjVwiKTtcbiAgICAgIH1cbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgaWYgKHN0YXRlID09PSAnZW5hYmxlZCcpIHtcbiAgICAgICAgZmxvdy5jdXJyZW50LnN0ZXBzLmZvckVhY2goZnVuY3Rpb24oc3RlcCkge1xuICAgICAgICAgIHZhciBzcGVjaWZ5U3RlcDtcbiAgICAgICAgICBpZiAoWydzcGVjaWZ5U3RlcFVzZXInLCAnc3BlY2lmeVN0ZXBSb2xlJ10uaW5jbHVkZXMoc3RlcC5kZWFsX3R5cGUpKSB7XG4gICAgICAgICAgICBpZiAoIXN0ZXAuYXBwcm92ZXJfc3RlcCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmraXpqqRbXCIgKyBzdGVwLm5hbWUgKyBcIl3kuK3nmoTmjIflrprljoblj7LmraXpqqTkuI3lrZjlnKjjgIJcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzcGVjaWZ5U3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uKF9zdGVwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ZXAuYXBwcm92ZXJfc3RlcCA9PT0gX3N0ZXAuX2lkO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKCFzcGVjaWZ5U3RlcCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIuatpemqpFtcIiArIHN0ZXAubmFtZSArIFwiXeS4reeahOaMh+WumuWOhuWPsuatpemqpOS4jeWtmOWcqOOAglwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvcm1fY3VycmVudF9maWVsZHNfY29kZSA9IGZvcm0uY3VycmVudC5maWVsZHMuZ2V0UHJvcGVydHkoXCJjb2RlXCIpO1xuICAgICAgICBmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaChmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXAuZmllbGRzX21vZGlmaWFibGUgPSBfLmludGVyc2VjdGlvbihzdGVwLmZpZWxkc19tb2RpZmlhYmxlLCBmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZvcm0uc3RhdGUgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICBkYi5mb3Jtcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBmb3JtLl9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImVuYWJsZWRcIixcbiAgICAgICAgICAgICAgXCJjdXJyZW50LnN0YXJ0X2RhdGVcIjogbm93LFxuICAgICAgICAgICAgICBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LFxuICAgICAgICAgICAgICBcImN1cnJlbnQubW9kaWZpZWRfYnlcIjogX3VzZXJJZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZsb3cuY3VycmVudC5tb2RpZmllZCA9IG5vdztcbiAgICAgICAgZmxvdy5jdXJyZW50LnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIGZsb3cuY3VycmVudC5tb2RpZmllZF9ieSA9IF91c2VySWQ7XG4gICAgICAgIHJldHVybiBkYi5mbG93cy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogZmxvdy5faWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgIFwic3RhdGVcIjogXCJlbmFibGVkXCIsXG4gICAgICAgICAgICBcImN1cnJlbnRcIjogZmxvdy5jdXJyZW50XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRiLmZsb3dzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBmbG93Ll9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgICBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LFxuICAgICAgICAgICAgXCJjdXJyZW50LnN0YXJ0X2RhdGVcIjogbm93LFxuICAgICAgICAgICAgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfZmxvd3MgPSBkYi5mbG93cy5maW5kKHtcbiAgICAgICAgICBmb3JtOiBmb3JtLl9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBfaWQ6IDEsXG4gICAgICAgICAgICBzdGF0ZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgICAgX2Zsb3dzX3N0YXRlID0gX2Zsb3dzLmdldFByb3BlcnR5KFwic3RhdGVcIik7XG4gICAgICAgIGlmICghX2Zsb3dzX3N0YXRlLmluY2x1ZGVzKCdlbmFibGVkJykpIHtcbiAgICAgICAgICByZXR1cm4gZGIuZm9ybXMudXBkYXRlKHtcbiAgICAgICAgICAgIF9pZDogZm9ybS5faWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgIFwic3RhdGVcIjogXCJkaXNhYmxlZFwiLFxuICAgICAgICAgICAgICBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LFxuICAgICAgICAgICAgICBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZF9ieVwiOiBfdXNlcklkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xyXG5cclxuXHRoaWRlX2luc3RhbmNlOiAoaW5zSWQsIGlzX2hpZGRlbikgLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRjaGVjayhpbnNJZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soaXNfaGlkZGVuLCBCb29sZWFuKVxyXG5cclxuXHRcdHVzZXJJZCA9IHRoaXMudXNlcklkXHJcblxyXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNJZCwgeyBmaWVsZHM6IHsgc3RhdGU6IDEsIGZsb3c6IDEsIHNwYWNlOiAxIH0gfSlcclxuXHJcblx0XHRpZiBub3QgaW5zdGFuY2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrmib7liLDnlLPor7fljZVcIilcclxuXHJcblx0XHRpZiBpbnN0YW5jZS5zdGF0ZSBpc250ICdjb21wbGV0ZWQnXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55Sz6K+35Y2V54q25oCB5LiN5piv5bey57uT5p2fXCIpXHJcblxyXG5cdFx0IyDpqozor4Fsb2dpbiB1c2VyX2lk5a+56K+l5rWB56iL5pyJ566h55CG55Sz6K+35Y2V55qE5p2D6ZmQXHJcblx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCB1c2VySWQpXHJcblx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKGluc3RhbmNlLnNwYWNlLCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxyXG5cdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXModXNlcklkKSlcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIilcclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKGluc0lkLCB7ICRzZXQ6IHsgaXNfaGlkZGVuOiBpc19oaWRkZW4gfSB9KVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIGhpZGVfaW5zdGFuY2U6IGZ1bmN0aW9uKGluc0lkLCBpc19oaWRkZW4pIHtcbiAgICB2YXIgaW5zdGFuY2UsIHBlcm1pc3Npb25zLCBzcGFjZSwgdXNlcklkO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hlY2soaW5zSWQsIFN0cmluZyk7XG4gICAgY2hlY2soaXNfaGlkZGVuLCBCb29sZWFuKTtcbiAgICB1c2VySWQgPSB0aGlzLnVzZXJJZDtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc0lkLCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGZsb3c6IDEsXG4gICAgICAgIHNwYWNlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrmib7liLDnlLPor7fljZVcIik7XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55Sz6K+35Y2V54q25oCB5LiN5piv5bey57uT5p2fXCIpO1xuICAgIH1cbiAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCB1c2VySWQpO1xuICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoaW5zdGFuY2Uuc3BhY2UsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBhZG1pbnM6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VySWQpKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIik7XG4gICAgfVxuICAgIGRiLmluc3RhbmNlcy51cGRhdGUoaW5zSWQsIHtcbiAgICAgICRzZXQ6IHtcbiAgICAgICAgaXNfaGlkZGVuOiBpc19oaWRkZW5cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xyXG5cdGdldEluc3RhbmNlVmFsdWVzOiAoaW5zSWQpLT5cclxuXHRcdGlmICghdGhpcy51c2VySWQpXHJcblx0XHRcdHJldHVybjtcclxuXHRcdHJldHVybiBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNJZH0sIHtmaWVsZHM6IHt2YWx1ZXM6IDF9fSk/LnZhbHVlcyIsIk1ldGVvci5tZXRob2RzKHtcbiAgZ2V0SW5zdGFuY2VWYWx1ZXM6IGZ1bmN0aW9uKGluc0lkKSB7XG4gICAgdmFyIHJlZjtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiAocmVmID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnNJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB2YWx1ZXM6IDFcbiAgICAgIH1cbiAgICB9KSkgIT0gbnVsbCA/IHJlZi52YWx1ZXMgOiB2b2lkIDA7XG4gIH1cbn0pO1xuIiwiQ29va2llcyA9IHJlcXVpcmUoXCJjb29raWVzXCIpXHJcblxyXG5nZXRJbnN0YW5jZVJlYWRPbmx5ID0gKHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKSAtPlxyXG5cclxuXHR1c2VyID0gU3RlZWRvcy5nZXRBUElMb2dpblVzZXIocmVxLCByZXMpXHJcblxyXG5cdGlmIHJlcT8ucXVlcnk/LmFjY2Vzc190b2tlblxyXG5cdFx0dXNlcklkID0gU3RlZWRvcy5nZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4ocmVxLnF1ZXJ5LmFjY2Vzc190b2tlbilcclxuXHRcdGlmIHVzZXJJZFxyXG5cdFx0XHR1c2VyID0gTWV0ZW9yLnVzZXJzLmZpbmRPbmUoe19pZDogdXNlcklkfSlcclxuXHJcblx0c3BhY2VJZCA9IHJlcS5wYXJhbXMuc3BhY2VcclxuXHJcblx0aW5zdGFuY2VJZCA9IHJlcS5wYXJhbXMuaW5zdGFuY2VfaWRcclxuXHJcblx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZUlkfSk7XHJcblxyXG5cdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe19pZDogc3BhY2VJZH0pO1xyXG5cclxuXHRoaWRlX3RyYWNlcyA9IHJlcS5xdWVyeT8uaGlkZV90cmFjZXNcclxuXHJcblx0aWYgIW9wdGlvbnNcclxuXHRcdG9wdGlvbnMgPSB7c2hvd1RyYWNlOiB0cnVlfVxyXG5cdGVsc2VcclxuXHRcdG9wdGlvbnMuc2hvd1RyYWNlID0gdHJ1ZVxyXG5cclxuXHRpZiBoaWRlX3RyYWNlcyBpcyBcIjFcIlxyXG5cdFx0aWYgb3B0aW9uc1xyXG5cdFx0XHRvcHRpb25zLnNob3dUcmFjZSA9IGZhbHNlXHJcblx0XHRlbHNlXHJcblx0XHRcdG9wdGlvbnMgPSB7c2hvd1RyYWNlOiBmYWxzZX1cclxuXHJcblx0aWYgIW9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzXHJcblx0XHRvcHRpb25zLnNob3dBdHRhY2htZW50cyA9IHRydWVcclxuXHJcblx0aWYgIXNwYWNlXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBzcGFjZVwiLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHRpZiAgIWluc3RhbmNlXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBpbnN0YW5jZVwiLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHRpZiAhdXNlclxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogNDAxLFxyXG5cdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgWC1BdXRoLVRva2VuLFgtVXNlci1JZFwiLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHRpZiBpbnN0YW5jZS5zcGFjZSAhPSBzcGFjZUlkXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBzcGFjZSBvciBpbnN0YW5jZVwiLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHJcblxyXG5cdHNwYWNlVXNlckNvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHVzZXI6IHVzZXIuX2lkLCBzcGFjZTogc3BhY2VJZCB9KS5jb3VudCgpXHJcblxyXG5cdGlmIHNwYWNlVXNlckNvdW50IGlzIDBcclxuXHRcdGlmICFzcGFjZVxyXG5cdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBzYXBjZVVzZXJcIixcclxuXHRcdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdCPmoKHpqox1c2Vy5piv5ZCm5a+5aW5zdGFuY2XmnInmn6XnnIvmnYPpmZBcclxuXHRfaGFzUGVybWlzc2lvbiA9IFdvcmtmbG93TWFuYWdlci5oYXNJbnN0YW5jZVBlcm1pc3Npb25zKHVzZXIsIGluc3RhbmNlKVxyXG5cclxuXHRpZiAhX2hhc1Blcm1pc3Npb24gICYmIGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZVxyXG5cdFx0X3BhcmVudF9pbnN0YW5jZXMgPSBfLnVuaW9uKFtpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VdLCBpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIHx8IFtdKVxyXG5cclxuXHRcdF9oYXNQZXJtaXNzaW9uID0gXy5maW5kIF9wYXJlbnRfaW5zdGFuY2VzLCAoX3BhcmVudF9pZCktPlxyXG5cdFx0XHRfcGFyZW50X2lucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6X3BhcmVudF9pZH0sIHtmaWVsZHM6IHt0cmFjZXM6IDB9fSlcclxuXHJcblx0XHRcdHJldHVybiBXb3JrZmxvd01hbmFnZXIuaGFzSW5zdGFuY2VQZXJtaXNzaW9ucyh1c2VyLCBfcGFyZW50X2lucylcclxuXHJcblx0aWYgIV9oYXNQZXJtaXNzaW9uXHJcblx0XHRfbG9jYWxlID0gU3RlZWRvcy5sb2NhbGUodXNlci5faWQsIHRydWUpXHJcblx0XHRlcnJvciA9IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9wZXJtaXNzaW9uc19lcnJvclwiLCB7fSwgX2xvY2FsZSlcclxuXHRcdHJlcy5jaGFyc2V0ID0gXCJ1dGYtOFwiXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJlcnJvclwiOiBlcnJvcixcclxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdHJldHVybjtcclxuXHJcblx0aHRtbCA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKVxyXG5cdGRhdGFCdWYgPSBuZXcgQnVmZmVyKGh0bWwpO1xyXG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgZGF0YUJ1Zi5sZW5ndGgpXHJcblx0cmVzLnNldEhlYWRlcignY29udGVudC1yYW5nZScsIFwiYnl0ZXMgMC0je2RhdGFCdWYubGVuZ3RoIC0gMX0vI3tkYXRhQnVmLmxlbmd0aH1cIilcclxuXHRyZXMuc3RhdHVzQ29kZSA9IDIwMFxyXG5cdHJlcy5lbmQoaHRtbClcclxuXHJcbkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL3dvcmtmbG93L3NwYWNlLzpzcGFjZS92aWV3L3JlYWRvbmx5LzppbnN0YW5jZV9pZFwiLCBnZXRJbnN0YW5jZVJlYWRPbmx5XHJcblxyXG5Kc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi93b3JrZmxvdy9zcGFjZS86c3BhY2Uvdmlldy9yZWFkb25seS86aW5zdGFuY2VfaWQvOmluc3RhbmNlX25hbWVcIiwgKHJlcSwgcmVzLCBuZXh0KS0+XHJcblx0cmVzLnNldEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtbXNkb3dubG9hZCcpO1xyXG5cdHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDtmaWxlbmFtZT0nK2VuY29kZVVSSShyZXEucGFyYW1zLmluc3RhbmNlX25hbWUpKTtcclxuXHRyZXMuc2V0SGVhZGVyKCdUcmFuc2Zlci1FbmNvZGluZycsICcnKVxyXG5cclxuXHRvcHRpb25zID0ge2Fic29sdXRlOiB0cnVlfVxyXG5cclxuXHRyZXR1cm4gZ2V0SW5zdGFuY2VSZWFkT25seShyZXEsIHJlcywgbmV4dCwgb3B0aW9ucylcclxuIyMjXHJcblx06I635Y+W55Sz6K+35Y2V5YiX6KGo77yaXHJcbiAgICBmaW5hbF9kZWNpc2lvbu+8muWuoeaJuee7k+aenFxyXG4gICAgc3RhdGU6IOeUs+ivt+WNleeKtuaAgVxyXG4jIyNcclxuSnNvblJvdXRlcy5hZGQgXCJnZXRcIiwgXCIvYXBpL3dvcmtmbG93L2luc3RhbmNlc1wiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblxyXG5cdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRyZXR1cm4gO1xyXG5cclxuXHR1c2VyX2lkID0gcmVxLnVzZXJJZFxyXG5cclxuXHRzcGFjZUlkID0gcmVxLmhlYWRlcnNbXCJ4LXNwYWNlLWlkXCJdXHJcblxyXG5cdGlmIG5vdCBzcGFjZUlkXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLVNwYWNlLUlkXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdGZsb3dJZCA9IHJlcS5xdWVyeT8uZmxvd0lkXHJcblxyXG5cdGlmICFmbG93SWRcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMCxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIGZsb3dJZFwiLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHRxdWVyeSA9IHt9XHJcblxyXG5cdHJldF9zeW5jX3Rva2VuID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuXHJcblx0Zmxvd0lkcyA9IGZsb3dJZC5zcGxpdChcIixcIilcclxuXHJcblxyXG5cdGZsb3dzID0gZGIuZmxvd3MuZmluZCh7X2lkOiB7JGluOiBmbG93SWRzfX0pLmZldGNoKClcclxuXHJcblx0aSA9IDBcclxuXHR3aGlsZSBpIDwgZmxvd3MubGVuZ3RoXHJcblx0XHRmID0gZmxvd3NbaV1cclxuXHRcdHNwYWNlVXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe3NwYWNlOiBmLnNwYWNlLCB1c2VyOiB1c2VyX2lkfSlcclxuXHRcdGlmICFzcGFjZVVzZXJcclxuXHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb24sIGZsb3cgaXMgI3tmLl9pZH1cIixcclxuXHRcdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHRlbHNlXHJcblxyXG5cdCNcdOaYr+WQpuW3peS9nOWMuueuoeeQhuWRmFxyXG5cdFx0aWYgIVN0ZWVkb3MuaXNTcGFjZUFkbWluKHNwYWNlSWQsIHVzZXJfaWQpXHJcblx0XHRcdHNwYWNlVXNlck9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xyXG5cdFx0XHRcdF9pZDoge1xyXG5cdFx0XHRcdFx0JGluOiBzcGFjZVVzZXIub3JnYW5pemF0aW9uc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkuZmV0Y2goKTtcclxuXHJcblx0XHRcdGlmICFXb3JrZmxvd01hbmFnZXIuY2FuTW9uaXRvcihmLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpICYmICFXb3JrZmxvd01hbmFnZXIuY2FuQWRtaW4oZiwgc3BhY2VVc2VyLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zKVxyXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBObyBwZXJtaXNzaW9uLCBmbG93IGlzICN7Zi5faWR9XCIsXHJcblx0XHRcdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdGkrK1xyXG5cclxuXHJcblx0cXVlcnkuZmxvdyA9IHskaW46IGZsb3dJZHN9XHJcblxyXG5cdHF1ZXJ5LnNwYWNlID0gc3BhY2VJZFxyXG5cclxuXHRpZiByZXEucXVlcnk/LnN5bmNfdG9rZW5cclxuXHRcdHN5bmNfdG9rZW4gPSBuZXcgRGF0ZShOdW1iZXIocmVxLnF1ZXJ5LnN5bmNfdG9rZW4pKVxyXG5cdFx0cXVlcnkubW9kaWZpZWQgPSB7JGd0OiBzeW5jX3Rva2VufVxyXG5cclxuXHRpZiByZXEucXVlcnk/LmZpbmFsX2RlY2lzaW9uXHJcblx0XHRxdWVyeS5maW5hbF9kZWNpc2lvbiA9IHskaW4gOiByZXEucXVlcnkuZmluYWxfZGVjaXNpb24uc3BsaXQoXCIsXCIpfVxyXG5cdGVsc2VcclxuXHRcdHF1ZXJ5LmZpbmFsX2RlY2lzaW9uID0geyRuaW46IFtcInRlcm1pbmF0ZWRcIiwgXCJyZWplY3RlZFwiXX1cclxuXHJcblx0aWYgcmVxLnF1ZXJ5Py5zdGF0ZVxyXG5cdFx0cXVlcnkuc3RhdGUgPSB7JGluOiByZXEucXVlcnkuc3RhdGUuc3BsaXQoXCIsXCIpfVxyXG5cdGVsc2VcclxuXHRcdHF1ZXJ5LnN0YXRlID0gXCJjb21wbGV0ZWRcIlxyXG5cclxuI1x05pyA5aSa6L+U5ZueNTAw5p2h5pWw5o2uXHJcblx0aW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtmaWVsZHM6IHtpbmJveF91ZXJzOiAwLCBjY191c2VyczogMCwgb3V0Ym94X3VzZXJzOiAwLCB0cmFjZXM6IDAsIGF0dGFjaG1lbnRzOiAwfSwgc2tpcDogMCwgbGltaXQ6IDUwMH0pLmZldGNoKClcclxuXHRpbnN0YW5jZXMuZm9yRWFjaCAoaW5zdGFuY2UpLT5cclxuXHJcblx0XHRhdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHskbmU6IHRydWV9fSwge2ZpZWxkczoge2NvcGllczogMH19KS5mZXRjaCgpXHJcblxyXG5cdFx0aW5zdGFuY2UuYXR0YWNobWVudHMgPSBhdHRhY2htZW50c1xyXG5cclxuXHJcblx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG5cdFx0XHRcdFwic3luY190b2tlblwiOiByZXRfc3luY190b2tlblxyXG5cdFx0XHRcdFwiZGF0YVwiOiBpbnN0YW5jZXNcclxuXHRyZXR1cm47XHJcbiIsInZhciBDb29raWVzLCBnZXRJbnN0YW5jZVJlYWRPbmx5O1xuXG5Db29raWVzID0gcmVxdWlyZShcImNvb2tpZXNcIik7XG5cbmdldEluc3RhbmNlUmVhZE9ubHkgPSBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCwgb3B0aW9ucykge1xuICB2YXIgX2hhc1Blcm1pc3Npb24sIF9sb2NhbGUsIF9wYXJlbnRfaW5zdGFuY2VzLCBkYXRhQnVmLCBlcnJvciwgaGlkZV90cmFjZXMsIGh0bWwsIGluc3RhbmNlLCBpbnN0YW5jZUlkLCByZWYsIHJlZjEsIHNwYWNlLCBzcGFjZUlkLCBzcGFjZVVzZXJDb3VudCwgdXNlciwgdXNlcklkO1xuICB1c2VyID0gU3RlZWRvcy5nZXRBUElMb2dpblVzZXIocmVxLCByZXMpO1xuICBpZiAocmVxICE9IG51bGwgPyAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLmFjY2Vzc190b2tlbiA6IHZvaWQgMCA6IHZvaWQgMCkge1xuICAgIHVzZXJJZCA9IFN0ZWVkb3MuZ2V0VXNlcklkRnJvbUFjY2Vzc1Rva2VuKHJlcS5xdWVyeS5hY2Nlc3NfdG9rZW4pO1xuICAgIGlmICh1c2VySWQpIHtcbiAgICAgIHVzZXIgPSBNZXRlb3IudXNlcnMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogdXNlcklkXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgc3BhY2VJZCA9IHJlcS5wYXJhbXMuc3BhY2U7XG4gIGluc3RhbmNlSWQgPSByZXEucGFyYW1zLmluc3RhbmNlX2lkO1xuICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICBfaWQ6IGluc3RhbmNlSWRcbiAgfSk7XG4gIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe1xuICAgIF9pZDogc3BhY2VJZFxuICB9KTtcbiAgaGlkZV90cmFjZXMgPSAocmVmMSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEuaGlkZV90cmFjZXMgOiB2b2lkIDA7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBzaG93VHJhY2U6IHRydWVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMuc2hvd1RyYWNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaGlkZV90cmFjZXMgPT09IFwiMVwiKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMuc2hvd1RyYWNlID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHNob3dUcmFjZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGlmICghb3B0aW9ucy5zaG93QXR0YWNobWVudHMpIHtcbiAgICBvcHRpb25zLnNob3dBdHRhY2htZW50cyA9IHRydWU7XG4gIH1cbiAgaWYgKCFzcGFjZSkge1xuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDQwMSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBzcGFjZVwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFpbnN0YW5jZSkge1xuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDQwMSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBpbnN0YW5jZVwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF1c2VyKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIFgtQXV0aC1Ub2tlbixYLVVzZXItSWRcIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbnN0YW5jZS5zcGFjZSAhPT0gc3BhY2VJZCkge1xuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDQwMSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBzcGFjZSBvciBpbnN0YW5jZVwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgc3BhY2VVc2VyQ291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICB1c2VyOiB1c2VyLl9pZCxcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9KS5jb3VudCgpO1xuICBpZiAoc3BhY2VVc2VyQ291bnQgPT09IDApIHtcbiAgICBpZiAoIXNwYWNlKSB7XG4gICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDQwMSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3Npbmcgc2FwY2VVc2VyXCIsXG4gICAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBfaGFzUGVybWlzc2lvbiA9IFdvcmtmbG93TWFuYWdlci5oYXNJbnN0YW5jZVBlcm1pc3Npb25zKHVzZXIsIGluc3RhbmNlKTtcbiAgaWYgKCFfaGFzUGVybWlzc2lvbiAmJiBpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcbiAgICBfcGFyZW50X2luc3RhbmNlcyA9IF8udW5pb24oW2luc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZV0sIGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMgfHwgW10pO1xuICAgIF9oYXNQZXJtaXNzaW9uID0gXy5maW5kKF9wYXJlbnRfaW5zdGFuY2VzLCBmdW5jdGlvbihfcGFyZW50X2lkKSB7XG4gICAgICB2YXIgX3BhcmVudF9pbnM7XG4gICAgICBfcGFyZW50X2lucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBfcGFyZW50X2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHRyYWNlczogMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBXb3JrZmxvd01hbmFnZXIuaGFzSW5zdGFuY2VQZXJtaXNzaW9ucyh1c2VyLCBfcGFyZW50X2lucyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFfaGFzUGVybWlzc2lvbikge1xuICAgIF9sb2NhbGUgPSBTdGVlZG9zLmxvY2FsZSh1c2VyLl9pZCwgdHJ1ZSk7XG4gICAgZXJyb3IgPSBUQVBpMThuLl9fKFwiaW5zdGFuY2VfcGVybWlzc2lvbnNfZXJyb3JcIiwge30sIF9sb2NhbGUpO1xuICAgIHJlcy5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDQwMSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgXCJlcnJvclwiOiBlcnJvcixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGh0bWwgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VIdG1sKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyk7XG4gIGRhdGFCdWYgPSBuZXcgQnVmZmVyKGh0bWwpO1xuICByZXMuc2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcsIGRhdGFCdWYubGVuZ3RoKTtcbiAgcmVzLnNldEhlYWRlcignY29udGVudC1yYW5nZScsIFwiYnl0ZXMgMC1cIiArIChkYXRhQnVmLmxlbmd0aCAtIDEpICsgXCIvXCIgKyBkYXRhQnVmLmxlbmd0aCk7XG4gIHJlcy5zdGF0dXNDb2RlID0gMjAwO1xuICByZXR1cm4gcmVzLmVuZChodG1sKTtcbn07XG5cbkpzb25Sb3V0ZXMuYWRkKFwiZ2V0XCIsIFwiL3dvcmtmbG93L3NwYWNlLzpzcGFjZS92aWV3L3JlYWRvbmx5LzppbnN0YW5jZV9pZFwiLCBnZXRJbnN0YW5jZVJlYWRPbmx5KTtcblxuSnNvblJvdXRlcy5hZGQoXCJnZXRcIiwgXCIvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvcmVhZG9ubHkvOmluc3RhbmNlX2lkLzppbnN0YW5jZV9uYW1lXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBvcHRpb25zO1xuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDtmaWxlbmFtZT0nICsgZW5jb2RlVVJJKHJlcS5wYXJhbXMuaW5zdGFuY2VfbmFtZSkpO1xuICByZXMuc2V0SGVhZGVyKCdUcmFuc2Zlci1FbmNvZGluZycsICcnKTtcbiAgb3B0aW9ucyA9IHtcbiAgICBhYnNvbHV0ZTogdHJ1ZVxuICB9O1xuICByZXR1cm4gZ2V0SW5zdGFuY2VSZWFkT25seShyZXEsIHJlcywgbmV4dCwgb3B0aW9ucyk7XG59KTtcblxuXG4vKlxuXHTojrflj5bnlLPor7fljZXliJfooajvvJpcbiAgICBmaW5hbF9kZWNpc2lvbu+8muWuoeaJuee7k+aenFxuICAgIHN0YXRlOiDnlLPor7fljZXnirbmgIFcbiAqL1xuXG5Kc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvaW5zdGFuY2VzXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBmLCBmbG93SWQsIGZsb3dJZHMsIGZsb3dzLCBpLCBpbnN0YW5jZXMsIHF1ZXJ5LCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJldF9zeW5jX3Rva2VuLCBzcGFjZUlkLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMsIHN5bmNfdG9rZW4sIHVzZXJfaWQ7XG4gIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgIHJldHVybjtcbiAgfVxuICB1c2VyX2lkID0gcmVxLnVzZXJJZDtcbiAgc3BhY2VJZCA9IHJlcS5oZWFkZXJzW1wieC1zcGFjZS1pZFwiXTtcbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIFgtU3BhY2UtSWRcIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZsb3dJZCA9IChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuZmxvd0lkIDogdm9pZCAwO1xuICBpZiAoIWZsb3dJZCkge1xuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDQwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBmbG93SWRcIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHF1ZXJ5ID0ge307XG4gIHJldF9zeW5jX3Rva2VuID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGZsb3dJZHMgPSBmbG93SWQuc3BsaXQoXCIsXCIpO1xuICBmbG93cyA9IGRiLmZsb3dzLmZpbmQoe1xuICAgIF9pZDoge1xuICAgICAgJGluOiBmbG93SWRzXG4gICAgfVxuICB9KS5mZXRjaCgpO1xuICBpID0gMDtcbiAgd2hpbGUgKGkgPCBmbG93cy5sZW5ndGgpIHtcbiAgICBmID0gZmxvd3NbaV07XG4gICAgc3BhY2VVc2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgICBzcGFjZTogZi5zcGFjZSxcbiAgICAgIHVzZXI6IHVzZXJfaWRcbiAgICB9KTtcbiAgICBpZiAoIXNwYWNlVXNlcikge1xuICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiA0MDEsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBObyBwZXJtaXNzaW9uLCBmbG93IGlzIFwiICsgZi5faWQsXG4gICAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG5cbiAgICB9XG4gICAgaWYgKCFTdGVlZG9zLmlzU3BhY2VBZG1pbihzcGFjZUlkLCB1c2VyX2lkKSkge1xuICAgICAgc3BhY2VVc2VyT3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogc3BhY2VVc2VyLm9yZ2FuaXphdGlvbnNcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIGlmICghV29ya2Zsb3dNYW5hZ2VyLmNhbk1vbml0b3IoZiwgc3BhY2VVc2VyLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zKSAmJiAhV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGYsIHNwYWNlVXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucykpIHtcbiAgICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgIGNvZGU6IDQwMSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBObyBwZXJtaXNzaW9uLCBmbG93IGlzIFwiICsgZi5faWQsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICBxdWVyeS5mbG93ID0ge1xuICAgICRpbjogZmxvd0lkc1xuICB9O1xuICBxdWVyeS5zcGFjZSA9IHNwYWNlSWQ7XG4gIGlmICgocmVmMSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEuc3luY190b2tlbiA6IHZvaWQgMCkge1xuICAgIHN5bmNfdG9rZW4gPSBuZXcgRGF0ZShOdW1iZXIocmVxLnF1ZXJ5LnN5bmNfdG9rZW4pKTtcbiAgICBxdWVyeS5tb2RpZmllZCA9IHtcbiAgICAgICRndDogc3luY190b2tlblxuICAgIH07XG4gIH1cbiAgaWYgKChyZWYyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMi5maW5hbF9kZWNpc2lvbiA6IHZvaWQgMCkge1xuICAgIHF1ZXJ5LmZpbmFsX2RlY2lzaW9uID0ge1xuICAgICAgJGluOiByZXEucXVlcnkuZmluYWxfZGVjaXNpb24uc3BsaXQoXCIsXCIpXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBxdWVyeS5maW5hbF9kZWNpc2lvbiA9IHtcbiAgICAgICRuaW46IFtcInRlcm1pbmF0ZWRcIiwgXCJyZWplY3RlZFwiXVxuICAgIH07XG4gIH1cbiAgaWYgKChyZWYzID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMy5zdGF0ZSA6IHZvaWQgMCkge1xuICAgIHF1ZXJ5LnN0YXRlID0ge1xuICAgICAgJGluOiByZXEucXVlcnkuc3RhdGUuc3BsaXQoXCIsXCIpXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBxdWVyeS5zdGF0ZSA9IFwiY29tcGxldGVkXCI7XG4gIH1cbiAgaW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIGluYm94X3VlcnM6IDAsXG4gICAgICBjY191c2VyczogMCxcbiAgICAgIG91dGJveF91c2VyczogMCxcbiAgICAgIHRyYWNlczogMCxcbiAgICAgIGF0dGFjaG1lbnRzOiAwXG4gICAgfSxcbiAgICBza2lwOiAwLFxuICAgIGxpbWl0OiA1MDBcbiAgfSkuZmV0Y2goKTtcbiAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICB2YXIgYXR0YWNobWVudHM7XG4gICAgYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLFxuICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcbiAgICAgICAgJG5lOiB0cnVlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGNvcGllczogMFxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gICAgcmV0dXJuIGluc3RhbmNlLmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHM7XG4gIH0pO1xuICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgY29kZTogMjAwLFxuICAgIGRhdGE6IHtcbiAgICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgXCJzeW5jX3Rva2VuXCI6IHJldF9zeW5jX3Rva2VuLFxuICAgICAgXCJkYXRhXCI6IGluc3RhbmNlc1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIlxyXG5Kc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9zdGVlZG9zLWNzc1wiLCAocmVxLCByZXMsIG5leHQpLT5cclxuXHJcblx0YWxsQ3NzID0gV2ViQXBwLmdldFJlZnJlc2hhYmxlQXNzZXRzKClcclxuXHJcblx0YWxsQ3NzTGluayA9IFwiXCJcclxuXHJcblx0YWxsQ3NzLmZvckVhY2ggKGNzcykgLT5cclxuXHRcdGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoY3NzLnVybClcclxuXHRcdGFsbENzc0xpbmsgKz0gXCJAaW1wb3J0IHVybCgje2Nzc0hyZWZ9KTtcIlxyXG5cclxuXHRyZXMuc3RhdHVzQ29kZSA9IDIwMFxyXG5cdHJlcy5lbmQoYWxsQ3NzTGluaykiLCJKc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9zdGVlZG9zLWNzc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYWxsQ3NzLCBhbGxDc3NMaW5rO1xuICBhbGxDc3MgPSBXZWJBcHAuZ2V0UmVmcmVzaGFibGVBc3NldHMoKTtcbiAgYWxsQ3NzTGluayA9IFwiXCI7XG4gIGFsbENzcy5mb3JFYWNoKGZ1bmN0aW9uKGNzcykge1xuICAgIHZhciBjc3NIcmVmO1xuICAgIGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoY3NzLnVybCk7XG4gICAgcmV0dXJuIGFsbENzc0xpbmsgKz0gXCJAaW1wb3J0IHVybChcIiArIGNzc0hyZWYgKyBcIik7XCI7XG4gIH0pO1xuICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgcmV0dXJuIHJlcy5lbmQoYWxsQ3NzTGluayk7XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL2FwaS93b3JrZmxvdy9zcGFjZS86c3BhY2Uvdmlldy9kcmFmdC86Zmxvd1wiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdHJldHVyblxyXG5cclxuXHR1c2VyX2lkID0gcmVxLnVzZXJJZFxyXG5cclxuXHR1c2VyID0gZGIudXNlcnMuZmluZE9uZSh7IF9pZDogdXNlcl9pZCB9KVxyXG5cclxuXHRzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZVxyXG5cclxuXHRmbG93SWQgPSByZXEucGFyYW1zLmZsb3dcclxuXHJcblx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZSh7IF9pZDogc3BhY2VJZCB9KVxyXG5cclxuXHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7IF9pZDogZmxvd0lkIH0sIHsgZmllbGRzOiB7IG5hbWU6IDEsICdjdXJyZW50Ll9pZCc6IDEsIGZvcm06IDEgfSB9KVxyXG5cclxuXHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdy5mb3JtIH0sIHsgZmllbGRzOiB7ICdjdXJyZW50Ll9pZCc6IDEgfSB9KVxyXG5cclxuXHRvcHRpb25zID0ge1xyXG5cdFx0c2hvd1RyYWNlOiBmYWxzZSxcclxuXHRcdHNob3dBdHRhY2htZW50czogZmFsc2UsXHJcblx0XHR0ZW1wbGF0ZU5hbWU6IFwiZGVmYXVsdFwiLFxyXG5cdFx0ZWRpdGFibGU6IHRydWUsXHJcblx0XHR3aWR0aDogXCIxMDAlXCIsXHJcblx0XHRpbnN0YW5jZV9zdHlsZTogXCJpbnN0YW5jZS1kZWZhdWx0XCIsXHJcblx0XHRwbHVnaW5zOiBcIlwiXCJcclxuXHJcblx0XHRcdDxtZXRhIGh0dHAtZXF1aXY9XCJYLVVBLUNvbXBhdGlibGVcIiBjb250ZW50PVwiSUU9ZWRnZSxjaHJvbWU9MVwiIC8+XHJcblx0XHRcdDxtZXRhIG5hbWU9XCJmb3JtYXQtZGV0ZWN0aW9uXCIgY29udGVudD1cInRlbGVwaG9uZT1ub1wiPlxyXG5cdFx0XHQ8bWV0YSBodHRwLWVxdWl2PVwieC1yaW0tYXV0by1tYXRjaFwiIGNvbnRlbnQ9XCJub25lXCI+XHJcblx0XHRcdDx0aXRsZT4je2Zsb3cubmFtZX08L3RpdGxlPlxyXG5cdFx0XHQ8bWV0YSBjb250ZW50PSd3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT0wJyBuYW1lPSd2aWV3cG9ydCcgLz5cclxuXHRcdFx0PG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aFwiIC8+XHJcblxyXG5cdFx0XHQ8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9jc3MvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLm1pbi5jc3NcIj5cclxuXHJcblx0XHRcdDxzY3JpcHQgc3JjPVwiL3BsdWdpbnMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2pzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5taW4uanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+PC9zY3JpcHQ+XHJcblxyXG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9qcy9sb2NhbGVzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci56aC1DTi5qc1wiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBjaGFyc2V0PVwiVVRGLThcIj48L3NjcmlwdD5cclxuXHJcblx0XHRcdDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBocmVmPVwiL3BsdWdpbnMvdG9hc3RyL3RvYXN0ci5taW4uY3NzXCI+XHJcblx0XHRcdDxzY3JpcHQgc3JjPVwiL3BsdWdpbnMvdG9hc3RyL3RvYXN0ci5taW4uanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+PC9zY3JpcHQ+XHJcblx0XHRcdDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBocmVmPVwiL2pzL3dvcmtmbG93X2NsaWVudC5jc3NcIj5cclxuXHRcdFx0PHNjcmlwdCBzcmM9XCIvanMvd29ya2Zsb3dfY2xpZW50LmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxyXG5cdFx0XCJcIlwiXHJcblx0fVxyXG5cclxuXHRpbnN0YW5jZSA9IHtcclxuXHRcdGZsb3c6IGZsb3cuX2lkLFxyXG5cdFx0Zmxvd192ZXJzaW9uOiBmbG93LmN1cnJlbnQuX2lkLFxyXG5cdFx0Zm9ybTogZm9ybS5faWQsXHJcblx0XHRmb3JtX3ZlcnNpb246IGZvcm0uY3VycmVudC5faWQsXHJcblx0XHR2YWx1ZXM6IHt9LFxyXG5cdFx0bmFtZTogZmxvdy5uYW1lLFxyXG5cdFx0c3BhY2U6IHNwYWNlSWRcclxuXHR9XHJcblxyXG5cdGh0bWwgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VIdG1sKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucylcclxuXHJcblx0ZGF0YUJ1ZiA9IG5ldyBCdWZmZXIoaHRtbClcclxuXHJcblx0cmVzLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBkYXRhQnVmLmxlbmd0aClcclxuXHJcblx0cmVzLnNldEhlYWRlcignY29udGVudC1yYW5nZScsIFwiYnl0ZXMgMC0je2RhdGFCdWYubGVuZ3RoIC0gMX0vI3tkYXRhQnVmLmxlbmd0aH1cIilcclxuXHJcblx0cmVzLnN0YXR1c0NvZGUgPSAyMDBcclxuXHJcblx0cmVzLmVuZChodG1sKVxyXG4iLCJKc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvZHJhZnQvOmZsb3dcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGRhdGFCdWYsIGZsb3csIGZsb3dJZCwgZm9ybSwgaHRtbCwgaW5zdGFuY2UsIG9wdGlvbnMsIHNwYWNlLCBzcGFjZUlkLCB1c2VyLCB1c2VyX2lkO1xuICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdXNlcl9pZCA9IHJlcS51c2VySWQ7XG4gIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICBfaWQ6IHVzZXJfaWRcbiAgfSk7XG4gIHNwYWNlSWQgPSByZXEucGFyYW1zLnNwYWNlO1xuICBmbG93SWQgPSByZXEucGFyYW1zLmZsb3c7XG4gIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe1xuICAgIF9pZDogc3BhY2VJZFxuICB9KTtcbiAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgIF9pZDogZmxvd0lkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDEsXG4gICAgICAnY3VycmVudC5faWQnOiAxLFxuICAgICAgZm9ybTogMVxuICAgIH1cbiAgfSk7XG4gIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICBfaWQ6IGZsb3cuZm9ybVxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICAnY3VycmVudC5faWQnOiAxXG4gICAgfVxuICB9KTtcbiAgb3B0aW9ucyA9IHtcbiAgICBzaG93VHJhY2U6IGZhbHNlLFxuICAgIHNob3dBdHRhY2htZW50czogZmFsc2UsXG4gICAgdGVtcGxhdGVOYW1lOiBcImRlZmF1bHRcIixcbiAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgaW5zdGFuY2Vfc3R5bGU6IFwiaW5zdGFuY2UtZGVmYXVsdFwiLFxuICAgIHBsdWdpbnM6IFwiXFxuPG1ldGEgaHR0cC1lcXVpdj1cXFwiWC1VQS1Db21wYXRpYmxlXFxcIiBjb250ZW50PVxcXCJJRT1lZGdlLGNocm9tZT0xXFxcIiAvPlxcbjxtZXRhIG5hbWU9XFxcImZvcm1hdC1kZXRlY3Rpb25cXFwiIGNvbnRlbnQ9XFxcInRlbGVwaG9uZT1ub1xcXCI+XFxuPG1ldGEgaHR0cC1lcXVpdj1cXFwieC1yaW0tYXV0by1tYXRjaFxcXCIgY29udGVudD1cXFwibm9uZVxcXCI+XFxuPHRpdGxlPlwiICsgZmxvdy5uYW1lICsgXCI8L3RpdGxlPlxcbjxtZXRhIGNvbnRlbnQ9J3dpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPTAnIG5hbWU9J3ZpZXdwb3J0JyAvPlxcbjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGhcXFwiIC8+XFxuXFxuPGxpbmsgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiB0eXBlPVxcXCJ0ZXh0L2Nzc1xcXCIgaHJlZj1cXFwiL3BsdWdpbnMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Nzcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmNzc1xcXCI+XFxuXFxuPHNjcmlwdCBzcmM9XFxcIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9qcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPjwvc2NyaXB0PlxcblxcbjxzY3JpcHQgc3JjPVxcXCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvanMvbG9jYWxlcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIuemgtQ04uanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgY2hhcnNldD1cXFwiVVRGLThcXFwiPjwvc2NyaXB0PlxcblxcbjxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgdHlwZT1cXFwidGV4dC9jc3NcXFwiIGhyZWY9XFxcIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmNzc1xcXCI+XFxuPHNjcmlwdCBzcmM9XFxcIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPjwvc2NyaXB0PlxcbjxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgdHlwZT1cXFwidGV4dC9jc3NcXFwiIGhyZWY9XFxcIi9qcy93b3JrZmxvd19jbGllbnQuY3NzXFxcIj5cXG48c2NyaXB0IHNyYz1cXFwiL2pzL3dvcmtmbG93X2NsaWVudC5qc1xcXCIgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj48L3NjcmlwdD5cIlxuICB9O1xuICBpbnN0YW5jZSA9IHtcbiAgICBmbG93OiBmbG93Ll9pZCxcbiAgICBmbG93X3ZlcnNpb246IGZsb3cuY3VycmVudC5faWQsXG4gICAgZm9ybTogZm9ybS5faWQsXG4gICAgZm9ybV92ZXJzaW9uOiBmb3JtLmN1cnJlbnQuX2lkLFxuICAgIHZhbHVlczoge30sXG4gICAgbmFtZTogZmxvdy5uYW1lLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH07XG4gIGh0bWwgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VIdG1sKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyk7XG4gIGRhdGFCdWYgPSBuZXcgQnVmZmVyKGh0bWwpO1xuICByZXMuc2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcsIGRhdGFCdWYubGVuZ3RoKTtcbiAgcmVzLnNldEhlYWRlcignY29udGVudC1yYW5nZScsIFwiYnl0ZXMgMC1cIiArIChkYXRhQnVmLmxlbmd0aCAtIDEpICsgXCIvXCIgKyBkYXRhQnVmLmxlbmd0aCk7XG4gIHJlcy5zdGF0dXNDb2RlID0gMjAwO1xuICByZXR1cm4gcmVzLmVuZChodG1sKTtcbn0pO1xuIiwiQXJyYXkucHJvdG90eXBlLmZpbHRlclByb3BlcnR5ID0gZnVuY3Rpb24oaCwgbCl7XHJcbiAgICB2YXIgZyA9IFtdO1xyXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe1xyXG4gICAgICAgIHZhciBtID0gdD8gdFtoXTpudWxsO1xyXG4gICAgICAgIHZhciBkID0gZmFsc2U7XHJcbiAgICAgICAgaWYobSBpbnN0YW5jZW9mIEFycmF5KXtcclxuICAgICAgICAgICAgZCA9IG0uaW5jbHVkZXMobCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGQgPSAobCA9PT0gdW5kZWZpbmVkKT8gZmFsc2U6bT09bDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoZCl7XHJcbiAgICAgICAgICAgIGcucHVzaCh0KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBnO1xyXG59O1xyXG5cclxuQXJyYXkucHJvdG90eXBlLmdldFByb3BlcnR5ID0gZnVuY3Rpb24oayl7XHJcbiAgICB2YXIgdiA9IG5ldyBBcnJheSgpO1xyXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe1xyXG4gICAgICAgIHZhciBtID0gdD8gdFtrXTpudWxsO1xyXG4gICAgICAgIHYucHVzaChtKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHY7XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS5nZXRFYWNoID0gZnVuY3Rpb24oY29kZSl7XHJcbiAgICB2YXIgcmV2ID0gW107XHJcbiAgICBmb3IodmFyIGkgPSAwIDsgaSA8IHRoaXMubGVuZ3RoIDsgaSsrKXtcclxuICAgICAgICByZXYucHVzaCh0aGlzW2ldW2NvZGVdKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXY7XHJcbn07XHJcblxyXG5BcnJheS5wcm90b3R5cGUudW5pcSA9IGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgYSA9IFtdO1xyXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGIpeyBcclxuICAgICAgICBpZihhLmluZGV4T2YoYikgPCAwKVxyXG4gICAgICAgICAgICB7YVthLmxlbmd0aF0gPSBifVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxuXHJcbkZvcm1fZm9ybXVsYSA9IHt9O1xyXG5cclxuXHJcbkZvcm1fZm9ybXVsYS5taXhpbiA9IGZ1bmN0aW9uKGRlc3QsIHNyYyl7XHJcbiAgICBmb3IodmFyIGtleSBpbiBzcmMpe1xyXG4gICAgICAgIGRlc3Rba2V5XSA9IHNyY1trZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRlc3Q7XHJcbn07XHJcblxyXG5cclxuRm9ybV9mb3JtdWxhLmhhbmRlclVzZXJPYmplY3QgPSBmdW5jdGlvbih1KXtcclxuXHJcbiAgICBpZih1IGluc3RhbmNlb2YgQXJyYXkpe1xyXG4gICAgICAgIHZhciB1c2VyID0ge307XHJcblxyXG4gICAgICAgIHVzZXIubmFtZSA9IHUuZ2V0UHJvcGVydHkoXCJuYW1lXCIpXHJcbiAgICAgICAgdXNlci5vcmdhbml6YXRpb24gPSB7fTtcclxuICAgICAgICB1c2VyLm9yZ2FuaXphdGlvbi5uYW1lID0gdS5nZXRQcm9wZXJ0eShcIm9yZ2FuaXphdGlvblwiKS5nZXRQcm9wZXJ0eShcIm5hbWVcIik7XHJcbiAgICAgICAgdXNlci5vcmdhbml6YXRpb24uZnVsbG5hbWUgPSB1LmdldFByb3BlcnR5KFwib3JnYW5pemF0aW9uXCIpLmdldFByb3BlcnR5KFwiZnVsbG5hbWVcIik7XHJcblxyXG4gICAgICAgIHVzZXIuaHIgPSB1LmdldFByb3BlcnR5KFwiaHJcIilcclxuXHJcbiAgICAgICAgdXNlci5zb3J0X25vID0gdS5nZXRQcm9wZXJ0eShcInNvcnRfbm9cIilcclxuXHJcblx0XHR1c2VyLm1vYmlsZSA9IHUuZ2V0UHJvcGVydHkoXCJtb2JpbGVcIilcclxuXHJcblx0XHR1c2VyLndvcmtfcGhvbmUgPSB1LmdldFByb3BlcnR5KFwid29ya19waG9uZVwiKVxyXG5cclxuXHRcdHVzZXIucG9zaXRpb24gPSB1LmdldFByb3BlcnR5KFwicG9zaXRpb25cIilcclxuXHJcbiAgICAgICAgdmFyIHVzZXJSb2xlcyA9IHUuZ2V0UHJvcGVydHkoXCJyb2xlc1wiKTtcclxuICAgICAgICB2YXIgcm9sZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICB1c2VyUm9sZXMuZm9yRWFjaChmdW5jdGlvbihpKXtcclxuICAgICAgICAgICAgcm9sZXMgPSByb2xlcy5jb25jYXQoaSk7XHJcbiAgICAgICAgfSk7IFxyXG4gICAgICAgIHJvbGVzLnVuaXEoKTtcclxuICAgICAgICB1c2VyLnJvbGVzID0gcm9sZXM7XHJcbiAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICByZXR1cm4gdTtcclxuICAgIH1cclxufVxyXG5cclxuRm9ybV9mb3JtdWxhLmhhbmRlck9yZ09iamVjdCA9IGZ1bmN0aW9uKG8pe1xyXG5cclxuICAgIGlmKG8gaW5zdGFuY2VvZiBBcnJheSl7XHJcbiAgICAgICAgdmFyIG9yZyA9IHt9O1xyXG5cdFx0b3JnLmlkID0gby5nZXRQcm9wZXJ0eShcIl9pZFwiKTtcclxuICAgICAgICBvcmcubmFtZSA9IG8uZ2V0UHJvcGVydHkoXCJuYW1lXCIpO1xyXG4gICAgICAgIG9yZy5mdWxsbmFtZSA9IG8uZ2V0UHJvcGVydHkoXCJmdWxsbmFtZVwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9yZztcclxuICAgIH1lbHNle1xyXG4gICAgICAgIHJldHVybiBvO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gICAgKiDojrflvpflhazlvI/pnIDopoHnlKjliLDnmoTliJ3lp4vlgLxcclxuICAgICog6L6T5YWl77yaZmllbGRzLCB2YWx1ZXMsIGFwcGxpY2FudFxyXG4gICAgKiDovpPlh7rvvJpfX3ZhbHVlc1xyXG4qKi9cclxuRm9ybV9mb3JtdWxhLmluaXRfZm9ybXVsYV92YWx1ZXMgPSBmdW5jdGlvbihmaWVsZHMsIGF1dG9Gb3JtRG9jLCBhcHByb3ZlciwgYXBwbGljYW50LCBzcGFjZUlkKXtcclxuICAgIHZhciBfX3ZhbHVlcyA9IHt9O1xyXG4gICAgLy/nlLPor7fljZXkuK3loavnmoTlgLzlpITnkIZcclxuICAgIGlmKGZpZWxkcyAmJiBmaWVsZHMubGVuZ3RoICYmIGF1dG9Gb3JtRG9jKSB7XHJcbiAgICAgICAgLy9kZWJ1Z2dlcjtcclxuICAgICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCl7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gZmllbGQudHlwZTtcclxuICAgICAgICAgICAgaWYodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PT0gJ3RhYmxlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgKiDlsIbooajmoLzlrZfmrrXnmoTlgLzov5vooYzovazmjaLlkI7kvKDlhaVfX3ZhbHVlc+S4rVxyXG4gICAgICAgICAgICAgICAgICAgICogdmFsdWVz5Lit6KGo5qC855qE5YC85qC85byP5Li6XHJcbiAgICAgICAgICAgICAgICAgICAgKiBbe1wiYVwiOjEsXCJiXCI6NH0se1wiYVwiOjIsXCJiXCI6NX0se1wiYVwiOjMsXCJiXCI6Nn1dXHJcbiAgICAgICAgICAgICAgICAgICAgKiBfX3ZhbHVlc+mcgOimgei9rOWMluS4uuS4i+mdouagvOW8j+S4lOWSjOS4u+ihqOeahOWAvOS4gOagt+aUvuWIsOesrOS4gOWxglxyXG4gICAgICAgICAgICAgICAgICAgICoge1wiYVwiOlsxLDIsM10sXCJiXCI6WzQsNSw2XX1cclxuICAgICAgICAgICAgICAgICAgICAqKi9cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGVGaWVsZHMgPSBmaWVsZC5zZmllbGRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcyA9IGF1dG9Gb3JtRG9jW2ZpZWxkLmNvZGVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtdWxhVGFibGVWYWx1ZXMgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX190YWJsZVZhbHVlcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8v5oyJ5YWs5byP55qE5qC85byP6L2s5o2i5YC85Li6X190YWJsZVZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRhYmxlRmllbGRzICYmIHRhYmxlRmllbGRzLmxlbmd0aCAmJiB0YWJsZVZhbHVlcyAmJiB0YWJsZVZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlVmFsdWVzLmZvckVhY2goZnVuY3Rpb24odGFibGVWYWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtdWxhVGFibGVWYWx1ZXMucHVzaChGb3JtX2Zvcm11bGEuaW5pdF9mb3JtdWxhX3ZhbHVlcyh0YWJsZUZpZWxkcywgdGFibGVWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/mjInkuLvooajnmoTmoLzlvI/ovazmjaJfX3RhYmxlVmFsdWVz5Yqg5YiwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRmllbGRzLmZvckVhY2goZnVuY3Rpb24odGFibGVmaWVsZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3RhYmxlVmFsdWVzW3RhYmxlZmllbGQuY29kZV0gPSBmb3JtdWxhVGFibGVWYWx1ZXMuZ2V0RWFjaCh0YWJsZWZpZWxkLmNvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX192YWx1ZXMgPSBGb3JtX2Zvcm11bGEubWl4aW4oX192YWx1ZXMsIF9fdGFibGVWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAndXNlcicpe1xyXG4gICAgICAgICAgICAgICAgICAgIF9fdmFsdWVzW2ZpZWxkLmNvZGVdID0gRm9ybV9mb3JtdWxhLmhhbmRlclVzZXJPYmplY3QoV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0cyhzcGFjZUlkLCBhdXRvRm9ybURvY1tmaWVsZC5jb2RlXSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnZ3JvdXAnKXtcclxuICAgICAgICAgICAgICAgICAgICBfX3ZhbHVlc1tmaWVsZC5jb2RlXSA9IEZvcm1fZm9ybXVsYS5oYW5kZXJPcmdPYmplY3QoV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFPcmdPYmplY3RzKGF1dG9Gb3JtRG9jW2ZpZWxkLmNvZGVdKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdvZGF0YScpe1xyXG5cdFx0XHRcdFx0X192YWx1ZXNbZmllbGQuY29kZV0gPSBhdXRvRm9ybURvY1tmaWVsZC5jb2RlXSB8fCB7fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8v5q2k5aSE5Lygc3BhY2VJZOe7memAieS6uuaOp+S7tueahOaXp+aVsOaNruiuoeeul3JvbGVz5ZKMb3JnYW5pemF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgX192YWx1ZXNbZmllbGQuY29kZV0gPSBhdXRvRm9ybURvY1tmaWVsZC5jb2RlXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLy/lvZPliY3lpITnkIbkurpcclxuICAgIF9fdmFsdWVzW1wiYXBwcm92ZXJcIl0gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybXVsYVVzZXJPYmplY3Qoc3BhY2VJZCwgYXBwcm92ZXIpO1xyXG4gICAgLy/nlLPor7fkurpcclxuICAgIF9fdmFsdWVzW1wiYXBwbGljYW50XCJdID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0KHNwYWNlSWQsIGFwcGxpY2FudCk7XHJcblxyXG4gICAgcmV0dXJuIF9fdmFsdWVzO1xyXG59O1xyXG5cclxuIiwiZ2V0SGFuZGxlcnNNYW5hZ2VyID0ge31cclxuXHJcbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyA9ICh1c2VyX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKS0+XHJcblx0YXBwcm92ZV91c2VycyA9IG5ldyBBcnJheVxyXG5cdF8uZWFjaCh1c2VyX2lkcywgKHVzZXJfaWQpLT5cclxuXHRcdGlmIGRiLnVzZXJzLmZpbmQoe19pZDogdXNlcl9pZH0pLmNvdW50KCkgPiAwXHJcblx0XHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXModXNlcl9pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKVxyXG5cdFx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXHJcblx0XHRcdFx0YXBwcm92ZV91c2VycyA9IGFwcHJvdmVfdXNlcnMuY29uY2F0KHVzZXJzKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInVzZXJfaWTkuI3lkIjms5XkuI3lkIjms5VcIilcclxuXHQpXHJcblx0YXBwcm92ZV91c2VycyA9IF8udW5pcShhcHByb3ZlX3VzZXJzKVxyXG5cdHJldHVybiBhcHByb3ZlX3VzZXJzXHJcblxyXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyA9ICh1c2VyX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpLT5cclxuXHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdF8uZWFjaChyb2xlX2lkcywgKHJvbGVfaWQpLT5cclxuXHRcdGlmIGRiLmZsb3dfcm9sZXMuZmluZCh7X2lkOiByb2xlX2lkfSkuY291bnQoKSA+IDBcclxuXHRcdFx0dXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlKHVzZXJfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKVxyXG5cdFx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXHJcblx0XHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQodXNlcnMpXHJcblx0XHRlbHNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwicm9sZV9pZOW3sue7j+iiq+WIoOmZpFwiKVxyXG5cdClcclxuXHRpZiB1c2VyX2lkcy5sZW5ndGggPiAwXHJcblx0XHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcclxuXHRcdHJldHVybiB1c2VyX2lkc1xyXG5cdGVsc2VcclxuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2udXNlcl9pZOWSjHJvbGVfaWRz5rKh5p+l5Yiw5a+55bqU55qE5aSE55CG5Lq6XCIpXHJcblxyXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlID0gKHVzZXJfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKSAtPlxyXG5cdG9yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXJzOiB1c2VyX2lkIH0sIHsgZmllbGRzOiB7IF9pZDogMSB9IH0pLmZldGNoKClcclxuXHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdF8uZWFjaChvcmdzLCAob3JnKSAtPlxyXG5cdFx0dXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUob3JnLl9pZCwgcm9sZV9pZCwgc3BhY2VfaWQpXHJcblx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXHJcblx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxyXG5cdClcclxuXHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcclxuXHRyZXR1cm4gdXNlcl9pZHNcclxuXHJcbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzID0gKG9yZ19pZHMsIHJvbGVfaWRzLCBzcGFjZV9pZCktPlxyXG5cdHVzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0Xy5lYWNoKG9yZ19pZHMsIChvcmdfaWQpLT5cclxuXHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlcyhvcmdfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZClcclxuXHRcdGlmIHVzZXJzLmxlbmd0aCA+IDBcclxuXHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQodXNlcnMpXHJcblx0KVxyXG5cdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdHJldHVybiB1c2VyX2lkc1xyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlcyA9IChvcmdfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCktPlxyXG5cdHVzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0Xy5lYWNoKHJvbGVfaWRzLCAocm9sZV9pZCktPlxyXG5cdFx0dXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUob3JnX2lkLCByb2xlX2lkLCBzcGFjZV9pZClcclxuXHRcdGlmIHVzZXJzLmxlbmd0aCA+IDBcclxuXHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQodXNlcnMpXHJcblx0KVxyXG5cdGlmIHVzZXJfaWRzLmxlbmd0aCA+IDBcclxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHVzZXJfaWRzXHJcblx0ZWxzZVxyXG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmoLnmja5vcmdfaWTlkoxyb2xlX2lkc+ayoeafpeWIsOWvueW6lOeahOWkhOeQhuS6ulwiKVxyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlID0gKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpIC0+XHJcblx0b3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiBvcmdfaWQgfSwgeyBmaWVsZHM6IHsgcGFyZW50czogMSB9IH0pXHJcblx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBvcmc6IG9yZ19pZCwgcm9sZTogcm9sZV9pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcclxuXHRfLmVhY2gocG9zaXRpb25zLCAocG9zaXRpb24pIC0+XHJcblx0XHR1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2VycylcclxuXHQpXHJcblx0aWYgdXNlcl9pZHMubGVuZ3RoIGlzIDBcclxuXHRcdHBhcmVudHMgPSBvcmcucGFyZW50c1xyXG5cdFx0Xy5lYWNoKHBhcmVudHMsIChwYXJlbnRfaWQpIC0+XHJcblx0XHRcdHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIG9yZzogcGFyZW50X2lkLCByb2xlOiByb2xlX2lkIH0sIHsgZmllbGRzOiB7IHVzZXJzOiAxIH0gfSkuZmV0Y2goKVxyXG5cdFx0XHRpZiBwb3NpdGlvbnMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdF8uZWFjaChwb3NpdGlvbnMsIChwb3NpdGlvbikgLT5cclxuXHRcdFx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHBvc2l0aW9uLnVzZXJzKVxyXG5cdFx0XHRcdClcclxuXHRcdClcclxuXHJcblx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0cmV0dXJuIHVzZXJfaWRzXHJcblxyXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMgPSAoaW5zdGFuY2VfaWQsIHN0ZXBfaWQpIC0+XHJcblx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZClcclxuXHJcblx0IyDmi5/nqL/ml7YsIOWPr+S7peiuvuWumuWQjue7reavj+S4quatpemqpOeahOWkhOeQhuS6uiAjMTkyNlxyXG5cdGlmIGluc3RhbmNlLnN0ZXBfYXBwcm92ZSAmJiBpbnN0YW5jZS5zdGVwX2FwcHJvdmVbc3RlcF9pZF1cclxuXHRcdHJldHVybiBpbnN0YW5jZS5zdGVwX2FwcHJvdmVbc3RlcF9pZF1cclxuXHJcblx0YXBwcm92ZV91c2VycyA9IG5ldyBBcnJheVxyXG5cdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2VcclxuXHRmbG93X2lkID0gaW5zdGFuY2UuZmxvd1xyXG5cdGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uXHJcblx0Y3VycmVudF9mbG93ID0gZGIuZmxvd3MuZmluZE9uZShmbG93X2lkKVxyXG5cdGN1cnJlbnRfc3RlcCA9IG51bGxcclxuXHRjdXJyZW50X3N0ZXBzID0gbmV3IEFycmF5XHJcblxyXG5cdGlmIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0Y3VycmVudF9zdGVwcyA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LnN0ZXBzXHJcblx0ZWxzZVxyXG5cdFx0Y3VycmVudCA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChoaXN0b3J5KSAtPlxyXG5cdFx0XHRyZXR1cm4gaGlzdG9yeS5faWQgaXMgZmxvd19yZXZcclxuXHRcdClcclxuXHRcdGN1cnJlbnRfc3RlcHMgPSBjdXJyZW50LnN0ZXBzXHJcblxyXG5cdCMg5LuO6I635Y+W55qEc3RlcHPkuK3moLnmja46c3RlcF9pZOaPkOWPluWvueW6lOeahHN0ZXDlr7nosaFcclxuXHRjdXJyZW50X3N0ZXAgPSBfLmZpbmQoY3VycmVudF9zdGVwcywgKHN0ZXApIC0+XHJcblx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxyXG5cdClcclxuXHQjIOWIpOaWrXN0ZXBfdHlwZVxyXG5cdGlmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXMgXCJjb25kaXRpb25cIlxyXG5cdFx0dW5maW5pc2hlZF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsICh0cmFjZSkgLT5cclxuXHRcdFx0cmV0dXJuIHRyYWNlLmlzX2ZpbmlzaGVkIGlzIGZhbHNlXHJcblx0XHQpXHJcblxyXG5cdFx0cmV0dXJuIG5ldyBBcnJheSh1bmZpbmlzaGVkX3RyYWNlLmFwcHJvdmVzWzBdLnVzZXIpXHJcblxyXG5cdGlmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXMgXCJzdGFydFwiXHJcblx0XHRoYW5kbGVycyA9IG5ldyBBcnJheVxyXG5cdFx0aGFuZGxlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpXHJcblx0XHRoYW5kbGVycy5wdXNoKGluc3RhbmNlLnN1Ym1pdHRlcilcclxuXHRcdGhhbmRsZXJzID0gXy51bmlxKGhhbmRsZXJzKVxyXG5cdFx0cmV0dXJuIGhhbmRsZXJzXHJcblx0IyDlvpfliLBzdGVw55qEXCJkZWFsX3R5cGVcIu+8jOW5tui/m+ihjOmAu+i+keWIpOaWreaJvuWIsOWvueW6lOeahOWkhOeQhuS6ulxyXG5cdGRlYWxfdHlwZSA9IGN1cnJlbnRfc3RlcC5kZWFsX3R5cGVcclxuXHR1c2VycyA9IG5ldyBBcnJheVxyXG5cdGlmIGRlYWxfdHlwZSBpcyBcImFwcGxpY2FudFJvbGVcIlxyXG5cdFx0IyAxLioqKioqKioqKioq55Sz6K+35Lq65omA5bGe57uE57uH5Lit55qE5a6h5om55bKX5L2NKioqKioqKioqKipcclxuXHRcdGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudFxyXG5cdFx0aWYgYXBwbGljYW50XHJcblx0XHRcdHNwYWNlX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBhcHBsaWNhbnQgfSkuY291bnQoKVxyXG5cdFx0XHRpZiBzcGFjZV91c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaPkOS6pOS6uuW3sue7j+iiq+WIoOmZpOaIluS4jeWxnuS6juW9k+WJjXNwYWNlXCIpXHJcblxyXG5cdFx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXHJcblx0XHRcdFx0Xy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgKGFwcHJvdmVyX3JvbGUpIC0+XHJcblx0XHRcdFx0XHRyb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiBhcHByb3Zlcl9yb2xlIH0pLmNvdW50KClcclxuXHRcdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxyXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuinkuiJsuW3sue7j+iiq+WIoOmZpFwiKVxyXG5cdFx0XHRcdClcclxuXHJcblx0XHRcdFx0cmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKGFwcGxpY2FudCwgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZClcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5a6h5om55bKX5L2N5pyq5oyH5a6aXCIpXHJcblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIkluc3RhbmNl55qE5o+Q5Lqk5Lq65Li656m6XCIpXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRcIlxyXG5cdFx0IyAyLioqKioqKioqKioq55Sz6K+35Lq6KioqKioqKioqKipcclxuXHRcdGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudFxyXG5cdFx0c3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcGxpY2FudCB9KS5jb3VudCgpXHJcblx0XHRpZiBzcGFjZV91c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gbmV3IEFycmF5KGFwcGxpY2FudClcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcIm9yZ0ZpZWxkUm9sZVwiXHJcblx0XHQjIDMuKioqKioqKioqKirpg6jpl6jlrZfmrrXmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxyXG5cdFx0Zm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtXHJcblx0XHRmb3JtX3JldiA9IG51bGxcclxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHRcdClcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cclxuXHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKVxyXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxyXG5cdFx0aWYgZm9ybV9yZXYgaXMgZm9ybS5jdXJyZW50Ll9pZFxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnRcclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIChmb3JtX2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGZvcm1faGlzdG9yeS5faWQgaXMgZm9ybV9yZXZcclxuXHRcdFx0KVxyXG5cclxuXHRcdGFwcHJvdmVyX29yZ19maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdfZmllbGRcclxuXHRcdGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkc1xyXG5cdFx0ZmllbGRfY29kZSA9IG51bGxcclxuXHRcdF8uZWFjaChmb3JtX2ZpZWxkcywgKGZvcm1fZmllbGQpIC0+XHJcblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxyXG5cdFx0XHRcdGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGVcclxuXHRcdClcclxuXHJcblx0XHQjIOWPluW+l+acgOaWsOeahHZhbHVlc1xyXG5cdFx0bmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSlcclxuXHRcdG9yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRcdG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXlcclxuXHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XHJcblx0XHRcdFx0b3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKVxyXG5cclxuXHRcdCMg5qCh6aqMb3JnX2lk5pWw57uE5Litb3JnX2lk5piv5ZCm5ZCI5rOVXHJcblx0XHRfLmVhY2gob3JnX2lkc19uYW1lcywgKG9yZykgLT5cclxuXHRcdFx0Y2hlY2tfb3JnX2NvdW50ID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgX2lkOiBvcmdbXCJpZFwiXSB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX29yZ19jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dJROS4jeWQiOazlVwiKVxyXG5cdFx0XHRvcmdfaWRzLnB1c2gob3JnW1wiaWRcIl0pXHJcblx0XHQpXHJcblxyXG5cdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzIGFuZCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMFxyXG5cdFx0XHQjIOajgOafpWFwcHJvdmVyX3JvbGVz5Litcm9sZeaYr+WQpuS4jeWtmOWcqOaIluW3sue7j+iiq+WIoOmZpFxyXG5cdFx0XHRfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCAoYXBwcm92ZXJfcm9sZSkgLT5cclxuXHRcdFx0XHRyb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiBhcHByb3Zlcl9yb2xlIH0pLmNvdW50KClcclxuXHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKVxyXG5cdFx0XHQpXHJcblx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyhvcmdfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKVxyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwib3JnRmllbGRcIlxyXG5cdFx0IyA0LioqKioqKioqKioq6YOo6Zeo5a2X5q615omA5bGe57uE57uH5Lit55qE5Lq65ZGYKioqKioqKioqKipcclxuXHRcdGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybVxyXG5cdFx0Zm9ybV9yZXYgPSBudWxsXHJcblx0XHRpZiBmbG93X3JldiBpcyBjdXJyZW50X2Zsb3cuY3VycmVudC5faWRcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb25cclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCAoY3VycmVudF9mbG93X2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0XHQpXHJcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uIGlmIGN1cnJlbnRfZmxvd192ZXJzaW9uXHJcblxyXG5cdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZClcclxuXHRcdGN1cnJlbnRfZm9ybSA9IG51bGxcclxuXHRcdGlmIGZvcm1fcmV2IGlzIGZvcm0uY3VycmVudC5faWRcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50XHJcblx0XHRlbHNlXHJcblx0XHRcdGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCAoZm9ybV9oaXN0b3J5KSAtPlxyXG5cdFx0XHRcdHJldHVybiBmb3JtX2hpc3RvcnkuX2lkIGlzIGZvcm1fcmV2XHJcblx0XHRcdClcclxuXHJcblx0XHRhcHByb3Zlcl9vcmdfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JnX2ZpZWxkXHJcblx0XHRmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHNcclxuXHRcdGZpZWxkX2NvZGUgPSBudWxsXHJcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKS0+XHJcblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxyXG5cdFx0XHRcdGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGVcclxuXHRcdClcclxuXHJcblx0XHQjIOWPluW+l+acgOaWsOeahHZhbHVlc1xyXG5cdFx0bmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSlcclxuXHJcblx0XHRvcmdfaWRzID0gbmV3IEFycmF5XHJcblx0XHRvcmdfaWRzX25hbWVzID0gbmV3IEFycmF5XHJcblx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheVxyXG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRvcmdfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSlcclxuXHJcblx0XHQjIOagoemqjG9yZ19pZOaVsOe7hOS4rW9yZ19pZOaYr+WQpuWQiOazlVxyXG5cdFx0Xy5lYWNoKG9yZ19pZHNfbmFtZXMsIChvcmcpIC0+XHJcblx0XHRcdGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7IF9pZDogb3JnW1wiaWRcIl0gfSkuY291bnQoKVxyXG5cdFx0XHRpZiBjaGVja19vcmdfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHSUTkuI3lkIjms5VcIilcclxuXHRcdFx0b3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5qCh6aqMb3Jn5LiL5a2Y5Zyo5aSE55CG5Lq6XHJcblx0XHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoKG9yZ19pZHMsIChvcmdfaWQpIC0+XHJcblx0XHRcdG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogb3JnX2lkIH0sIHsgZmllbGRzOiB7IHVzZXJzOiAxIH0gfSlcclxuXHRcdFx0b3JnX2NoaWxkcmVuID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBwYXJlbnRzOiBvcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KS5mZXRjaCgpXHJcblx0XHRcdG9yZ19jaGlsZHJlbi51bnNoaWZ0KG9yZylcclxuXHRcdFx0Y2hlY2tfb3JncyA9IG9yZ19jaGlsZHJlblxyXG5cdFx0XHRvcmdfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0Xy5lYWNoKGNoZWNrX29yZ3MsIChjaGVja19vcmdfdXNlcikgLT5cclxuXHRcdFx0XHRpZiBjaGVja19vcmdfdXNlci51c2Vyc1xyXG5cdFx0XHRcdFx0Xy5lYWNoKGNoZWNrX29yZ191c2VyLnVzZXJzLCAob3JnX3VzZXIpIC0+XHJcblx0XHRcdFx0XHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IG9yZ191c2VyIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwic3BhY2XkuIvkuI3lrZjlnKjmraR1c2VyXCIpXHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQoY2hlY2tfb3JnX3VzZXIudXNlcnMpXHJcblx0XHRcdFx0b3JnX3VzZXJzID0gb3JnX3VzZXJzLmNvbmNhdChjaGVja19vcmdfdXNlci51c2VycylcclxuXHRcdFx0KVxyXG5cclxuXHRcdFx0aWYgb3JnX3VzZXJzLmxlbmd0aCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dcIiArIG9yZ19pZCArIFwi5LiN5a2Y5Zyo5aSE55CG5Lq6XCIpXHJcblxyXG5cdFx0KVxyXG5cclxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHVzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJ1c2VyRmllbGRSb2xlXCJcclxuXHRcdCMgNS4qKioqKioqKioqKuS6uuWRmOWtl+auteaJgOWxnue7hOe7h+S4reeahOWuoeaJueWyl+S9jSoqKioqKioqKioqXHJcblx0XHRmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm1cclxuXHRcdGZvcm1fcmV2ID0gbnVsbFxyXG5cdFx0aWYgZmxvd19yZXYgaXMgY3VycmVudF9mbG93LmN1cnJlbnQuX2lkXHJcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uXHJcblx0XHRlbHNlXHJcblx0XHRcdGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgKGN1cnJlbnRfZmxvd19oaXN0b3J5KSAtPlxyXG5cdFx0XHRcdHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgaXMgZmxvd19yZXZcclxuXHRcdFx0KVxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbiBpZiBjdXJyZW50X2Zsb3dfdmVyc2lvblxyXG5cclxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpXHJcblx0XHRjdXJyZW50X2Zvcm0gPSBudWxsXHJcblx0XHRpZiBmb3JtX3JldiBpcyBmb3JtLmN1cnJlbnQuX2lkXHJcblx0XHRcdGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgKGZvcm1faGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCBpcyBmb3JtX3JldlxyXG5cdFx0XHQpXHJcblxyXG5cdFx0YXBwcm92ZXJfdXNlcl9maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHNcclxuXHRcdGZpZWxkX2NvZGUgPSBudWxsXHJcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKSAtPlxyXG5cdFx0XHRpZiBmb3JtX2ZpZWxkLl9pZCBpcyBhcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRcdFx0ZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5Y+W5b6X5pyA5paw55qEdmFsdWVzXHJcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cdFx0IyDojrflj5Z1c2VyX2lk5pWw57uEXHJcblx0XHR1c2VyX2lkc19uYW1lcyA9IG5ldyBBcnJheVxyXG5cdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXVxyXG5cdFx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXlcclxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHVzZXJfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSlcclxuXHJcblx0XHQjIOagoemqjHVzZXJfaWTmlbDnu4TkuK11c2VyX2lk5piv5ZCm5ZCI5rOVXHJcblx0XHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoKHVzZXJfaWRzX25hbWVzLCAodXNlcikgLT5cclxuXHRcdFx0Y2hlY2tfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IHVzZXJbXCJpZFwiXSB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX3VzZXJfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5Lq65ZGYSUTkuI3lkIjms5VcIilcclxuXHRcdFx0dXNlcl9pZHMucHVzaCh1c2VyW1wiaWRcIl0pXHJcblx0XHQpXHJcblxyXG5cdFx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXHJcblx0XHRcdCMg5qOA5p+lYXBwcm92ZXJfcm9sZXPkuK1yb2xl5piv5ZCm5LiN5a2Y5Zyo5oiW5bey57uP6KKr5Yig6ZmkXHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpXHJcblx0XHRcdClcclxuXHRcdFx0cmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyh1c2VyX2lkcywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBpbnN0YW5jZS5zcGFjZSlcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIilcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInVzZXJGaWVsZFwiXHJcblx0XHQjIDYuKioqKioqKioqKirooajljZXkurrlkZjlrZfmrrUqKioqKioqKioqKlxyXG5cdFx0Zm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtXHJcblx0XHRmb3JtX3JldiA9IG51bGxcclxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHRcdClcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cclxuXHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKVxyXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxyXG5cdFx0aWYgZm9ybV9yZXYgaXMgZm9ybS5jdXJyZW50Ll9pZFxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnRcclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIChmb3JtX2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGZvcm1faGlzdG9yeS5faWQgaXMgZm9ybV9yZXZcclxuXHRcdFx0KVxyXG5cclxuXHRcdGFwcHJvdmVyX3VzZXJfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcl9maWVsZFxyXG5cdFx0Zm9ybV9maWVsZHMgPSBjdXJyZW50X2Zvcm0uZmllbGRzXHJcblx0XHRmaWVsZF9jb2RlID0gbnVsbFxyXG5cdFx0Xy5lYWNoKGZvcm1fZmllbGRzLCAoZm9ybV9maWVsZCktPlxyXG5cdFx0XHRpZiBmb3JtX2ZpZWxkLl9pZCBpcyBhcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRcdFx0ZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5Y+W5b6X5pyA5paw55qEdmFsdWVzXHJcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cclxuXHRcdCMg6I635Y+WdXNlcl9pZOaVsOe7hFxyXG5cdFx0dXNlcl9pZHNfbmFtZXMgPSBuZXcgQXJyYXlcclxuXHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XHJcblx0XHRcdFx0dXNlcl9pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcy5wdXNoKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pXHJcblxyXG5cdFx0IyDmoKHpqox1c2VyX2lk5pWw57uE5LitdXNlcl9pZOaYr+WQpuWQiOazlVxyXG5cdFx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaCh1c2VyX2lkc19uYW1lcywgKHVzZXIpIC0+XHJcblx0XHRcdGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiB1c2VyW1wiaWRcIl0gfSkuY291bnQoKVxyXG5cdFx0XHRpZiBjaGVja191c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS6uuWRmElE5LiN5ZCI5rOVXCIpXHJcblx0XHRcdHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKVxyXG5cdFx0KVxyXG5cclxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHVzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzcGVjaWZ5U3RlcFJvbGVcIlxyXG5cdFx0IyA3LioqKioqKioqKioq5oyH5a6a5q2l6aqk5aSE55CG5a6h5om55bKX5L2NKioqKioqKioqKipcclxuXHRcdGFwcHJvdmVyX3N0ZXAgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfc3RlcFxyXG5cdFx0ZmluaXNoZWRfdHJhY2VzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2goaW5zdGFuY2UudHJhY2VzLCAodHJhY2UpIC0+XHJcblx0XHRcdGlmIHRyYWNlLnN0ZXAgaXMgYXBwcm92ZXJfc3RlcFxyXG5cdFx0XHRcdGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKVxyXG5cdFx0KVxyXG5cdFx0IyDmoLnmja5zdGFydF9kYXRl5Y+W5pyA5paw55qEdHJhY2VcclxuXHRcdG1heF9zdGFydERhdGVfdHJhY2UgPSBfLm1heChmaW5pc2hlZF90cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRyZXR1cm4gdC5zdGFydF9kYXRlXHJcblx0XHQpXHJcblxyXG5cdFx0YXBwcm92ZV91c2VycyA9IF8ucGx1Y2sobWF4X3N0YXJ0RGF0ZV90cmFjZS5hcHByb3ZlcywgXCJ1c2VyXCIpXHJcblxyXG5cdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzXHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0KVxyXG5cclxuXHRcdCMg6aqM6K+B5p+l5Yiw55qEdXNlcuaYr+WQpumDveWQiOazlVxyXG5cdFx0Xy5lYWNoKGFwcHJvdmVfdXNlcnMsIChhcHByb3ZlX3VzZXIpIC0+XHJcblx0XHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVfdXNlciB9KS5jb3VudCgpIGlzIDBcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaMh+WumuatpemqpOeahOWkhOeQhuS6uuW3sue7j+WPmOabtFwiKVxyXG5cdFx0KVxyXG5cclxuXHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMoYXBwcm92ZV91c2VycywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZClcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInNwZWNpZnlTdGVwVXNlclwiXHJcblx0XHQjIDguKioqKioqKioqKirmjIflrprmraXpqqTlpITnkIbkuroqKioqKioqKioqKlxyXG5cdFx0YXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwXHJcblx0XHRmaW5pc2hlZF90cmFjZXMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChpbnN0YW5jZS50cmFjZXMsICh0cmFjZSkgLT5cclxuXHRcdFx0aWYgdHJhY2Uuc3RlcCBpcyBhcHByb3Zlcl9zdGVwXHJcblx0XHRcdFx0ZmluaXNoZWRfdHJhY2VzLnB1c2godHJhY2UpXHJcblx0XHQpXHJcblx0XHQjIOagueaNrnN0YXJ0X2RhdGXlj5bmnIDmlrDnmoR0cmFjZVxyXG5cdFx0bWF4X3N0YXJ0RGF0ZV90cmFjZSA9IF8ubWF4KGZpbmlzaGVkX3RyYWNlcywgKHQpIC0+XHJcblx0XHRcdHJldHVybiB0LnN0YXJ0X2RhdGVcclxuXHRcdClcclxuXHJcblx0XHRhcHByb3ZlX3VzZXJzID0gXy5wbHVjayhtYXhfc3RhcnREYXRlX3RyYWNlLmFwcHJvdmVzLCBcInVzZXJcIilcclxuXHJcblx0XHQjIOmqjOivgeafpeWIsOeahHVzZXLmmK/lkKbpg73lkIjms5VcclxuXHRcdF8uZWFjaChhcHByb3ZlX3VzZXJzLCAoYXBwcm92ZV91c2VyKS0+XHJcblx0XHRcdGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVfdXNlciB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmjIflrprmraXpqqTnmoTlpITnkIbkurrlt7Lnu4/lj5jmm7RcIilcclxuXHRcdClcclxuXHJcblx0XHRhcHByb3ZlX3VzZXJzID0gXy51bmlxKGFwcHJvdmVfdXNlcnMpXHJcblx0XHRyZXR1cm4gYXBwcm92ZV91c2Vyc1xyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3VibWl0dGVyUm9sZVwiXHJcblx0XHQjIDkuKioqKioqKioqKirloavljZXkurrmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxyXG5cdFx0c3VibWl0dGVyID0gaW5zdGFuY2Uuc3VibWl0dGVyXHJcblx0XHRpZiBub3Qgc3VibWl0dGVyXHJcblx0XHRcdCMg5Yik5pat5o+Q5Lqk5Lq65piv5ZCm5bey57uP6KKr5Yig6ZmkXHJcblx0XHRcdHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogc3VibWl0dGVyIH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3VibWl0dGVyX3VzZXJfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmN5bel5L2c5Yy6XCIpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHQjIOajgOafpWFwcHJvdmVyX3JvbGVz5Litcm9sZeaYr+WQpuS4jeWtmOWcqOaIluW3sue7j+iiq+WIoOmZpFxyXG5cdFx0XHRcdFx0Xy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgKGFwcHJvdmVyX3JvbGUpIC0+XHJcblx0XHRcdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBhcHByb3Zlcl9yb2xlICsgXCLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhzdWJtaXR0ZXIsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIilcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnmoTmj5DkuqTkurrkuLrnqbpcIilcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInN1Ym1pdHRlclwiXHJcblx0XHQjIDEwLioqKioqKioqKioq5o+Q5Lqk5Lq6KioqKioqKioqKipcclxuXHRcdHN1Ym1pdHRlciA9IGluc3RhbmNlLnN1Ym1pdHRlclxyXG5cdFx0IyDliKTmlq3mj5DkuqTkurrmmK/lkKblt7Lnu4/ooqvliKDpmaRcclxuXHRcdHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogc3VibWl0dGVyIH0pLmNvdW50KClcclxuXHRcdGlmIHN1Ym1pdHRlcl91c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIilcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIG5ldyBBcnJheShzdWJtaXR0ZXIpXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzcGVjaWZ5T3JnXCJcclxuXHRcdCMgMTEuKioqKioqKioqKirmn5Dpg6jpl6jlhoXnmoTmiYDmnInkuroqKioqKioqKioqKlxyXG5cdFx0YXBwcm92ZXJfb3JnX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdzXHJcblx0XHRpZiBub3QgYXBwcm92ZXJfb3JnX2lkcyBvciBhcHByb3Zlcl9vcmdfaWRzLmxlbmd0aCBpcyAwXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5a6a5LmJ55So5LqO5p+l5om+5LiL5LiA5q2l5aSE55CG5Lq655qE6YOo6Zeo77yM6K+36IGU57O7566h55CG5ZGY6LCD5p+l5rWB56iL5Zu+55qE6YWN572u5piv5ZCm5q2j56GuXCIpXHJcblxyXG5cdFx0IyDpqozor4HmiYDmjIflrprnmoRvcmdhbml6YXRpb25faWTpg73lrZjlnKhcclxuXHRcdHZhbGlkX2FwcHJvdmVyX29yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChhcHByb3Zlcl9vcmdfaWRzLCAoYXBwcm92ZXJfb3JnX2lkKSAtPlxyXG5cdFx0XHRpZiBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX29yZ19pZCB9KS5jb3VudCgpID4gMFxyXG5cdFx0XHRcdHZhbGlkX2FwcHJvdmVyX29yZ19pZHMudW5zaGlmdChhcHByb3Zlcl9vcmdfaWQpXHJcblx0XHQpXHJcblxyXG5cdFx0b3JnX3VzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2godmFsaWRfYXBwcm92ZXJfb3JnX2lkcywgKHZhbGlkX2FwcHJvdmVyX29yZ19pZCkgLT5cclxuXHRcdFx0dmFsaWRfYXBwcm92ZXJfb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiB2YWxpZF9hcHByb3Zlcl9vcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KVxyXG5cdFx0XHRpZiB2YWxpZF9hcHByb3Zlcl9vcmcudXNlcnNcclxuXHRcdFx0XHRvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KHZhbGlkX2FwcHJvdmVyX29yZy51c2VycylcclxuXHJcblx0XHRcdGNoaWxkX29yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHBhcmVudHM6IHZhbGlkX2FwcHJvdmVyX29yZ19pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcclxuXHRcdFx0Xy5lYWNoKGNoaWxkX29yZ3MsIChjaGlsZF9vcmcpIC0+XHJcblx0XHRcdFx0aWYgY2hpbGRfb3JnLnVzZXJzXHJcblx0XHRcdFx0XHRvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KGNoaWxkX29yZy51c2VycylcclxuXHRcdFx0KVxyXG5cdFx0KVxyXG5cclxuXHRcdG9yZ191c2VyX2lkcyA9IF8udW5pcShvcmdfdXNlcl9pZHMpXHJcblx0XHRuZXdfb3JnX3VzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2gob3JnX3VzZXJfaWRzLCAob3JnX3VzZXJfaWQpIC0+XHJcblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IG9yZ191c2VyX2lkIH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3BhY2VfdXNlcl9pbmZvX2NvdW50ID4gMFxyXG5cdFx0XHRcdG5ld19vcmdfdXNlcl9pZHMucHVzaChvcmdfdXNlcl9pZClcclxuXHRcdClcclxuXHJcblx0XHRyZXR1cm4gbmV3X29yZ191c2VyX2lkc1xyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3BlY2lmeVVzZXJcIlxyXG5cdFx0IyAxMi4qKioqKioqKioqKuaMh+WumueahOS6uuWRmCoqKioqKioqKioqXHJcblx0XHRhcHByb3Zlcl91c2VyX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2Vyc1xyXG5cdFx0YXBwcm92ZXJfdXNlcl9pZHMgPSBfLnVuaXEoYXBwcm92ZXJfdXNlcl9pZHMpXHJcblx0XHRuZXdfYXBwcm92ZXJfdXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChhcHByb3Zlcl91c2VyX2lkcywgKGFwcHJvdmVyX3VzZXJfaWQpIC0+XHJcblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVyX3VzZXJfaWQgfSkuY291bnQoKVxyXG5cdFx0XHRpZiBzcGFjZV91c2VyX2luZm9fY291bnQgPiAwXHJcblx0XHRcdFx0bmV3X2FwcHJvdmVyX3VzZXJfaWRzLnB1c2goYXBwcm92ZXJfdXNlcl9pZClcclxuXHRcdClcclxuXHJcblx0XHRyZXR1cm4gbmV3X2FwcHJvdmVyX3VzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJwaWNrdXBBdFJ1bnRpbWVcIlxyXG5cdFx0IyAxMy4qKioqKioqKioqKuWuoeaJueaXtuaMh+WumioqKioqKioqKioqXHJcblx0XHRuZXh0X3N0ZXBfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIChfdHIpIC0+XHJcblx0XHRcdHJldHVybiBfdHIuaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdClcclxuXHRcdF9hcHByb3ZlID0gXy5maW5kKF90cmFjZS5hcHByb3ZlcywgKF9hcHApIC0+XHJcblx0XHRcdHJldHVybiBfYXBwLmlzX2ZpbmlzaGVkIGlzIGZhbHNlIGFuZCBfYXBwLnR5cGUgaXNudCAnY2MnXHJcblx0XHQpXHJcblxyXG5cdFx0aWYgX2FwcHJvdmUubmV4dF9zdGVwc1xyXG5cdFx0XHRpZiBfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl1cclxuXHRcdFx0XHRuZXh0X3N0ZXBfdXNlcnMgPSBfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl1cclxuXHJcblx0XHRyZXR1cm4gbmV4dF9zdGVwX3VzZXJzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRTdXBlcmlvclwiXHJcblx0XHQjIDE0LioqKioqKioqKioq55Sz6K+35Lq65LiK57qn5Li7566hKioqKioqKioqKipcclxuXHRcdGFwcGxpY2FudFN1cGVyaW9ycyA9IG5ldyBBcnJheVxyXG5cdFx0X3NwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBpbnN0YW5jZS5hcHBsaWNhbnQgfSwgeyBmaWVsZHM6IHsgbWFuYWdlcjogMSB9IH0pXHJcblx0XHRpZiBfc3BhY2VfdXNlci5tYW5hZ2VyXHJcblx0XHRcdGFwcGxpY2FudFN1cGVyaW9ycy5wdXNoKF9zcGFjZV91c2VyLm1hbmFnZXIpXHJcblxyXG5cdFx0cmV0dXJuIGFwcGxpY2FudFN1cGVyaW9ycyIsIiAgICAgICAgICAgICAgICAgICAgICAgXG5cbmdldEhhbmRsZXJzTWFuYWdlciA9IHt9O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMgPSBmdW5jdGlvbih1c2VyX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKSB7XG4gIHZhciBhcHByb3ZlX3VzZXJzO1xuICBhcHByb3ZlX3VzZXJzID0gbmV3IEFycmF5O1xuICBfLmVhY2godXNlcl9pZHMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgaWYgKGRiLnVzZXJzLmZpbmQoe1xuICAgICAgX2lkOiB1c2VyX2lkXG4gICAgfSkuY291bnQoKSA+IDApIHtcbiAgICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXModXNlcl9pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKTtcbiAgICAgIGlmICh1c2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBhcHByb3ZlX3VzZXJzID0gYXBwcm92ZV91c2Vycy5jb25jYXQodXNlcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInVzZXJfaWTkuI3lkIjms5XkuI3lkIjms5VcIik7XG4gICAgfVxuICB9KTtcbiAgYXBwcm92ZV91c2VycyA9IF8udW5pcShhcHByb3ZlX3VzZXJzKTtcbiAgcmV0dXJuIGFwcHJvdmVfdXNlcnM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyA9IGZ1bmN0aW9uKHVzZXJfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgdXNlcl9pZHM7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gocm9sZV9pZHMsIGZ1bmN0aW9uKHJvbGVfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgaWYgKGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICBfaWQ6IHJvbGVfaWRcbiAgICB9KS5jb3VudCgpID4gMCkge1xuICAgICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlKHVzZXJfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKTtcbiAgICAgIGlmICh1c2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwicm9sZV9pZOW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICB9XG4gIH0pO1xuICBpZiAodXNlcl9pZHMubGVuZ3RoID4gMCkge1xuICAgIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgICByZXR1cm4gdXNlcl9pZHM7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmoLnmja51c2VyX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIik7XG4gIH1cbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGUgPSBmdW5jdGlvbih1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZCkge1xuICB2YXIgb3JncywgdXNlcl9pZHM7XG4gIG9yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICB1c2VyczogdXNlcl9pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDFcbiAgICB9XG4gIH0pLmZldGNoKCk7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gob3JncywgZnVuY3Rpb24ob3JnKSB7XG4gICAgdmFyIHVzZXJzO1xuICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZy5faWQsIHJvbGVfaWQsIHNwYWNlX2lkKTtcbiAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKTtcbiAgICB9XG4gIH0pO1xuICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gIHJldHVybiB1c2VyX2lkcztcbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzID0gZnVuY3Rpb24ob3JnX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKSB7XG4gIHZhciB1c2VyX2lkcztcbiAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gIF8uZWFjaChvcmdfaWRzLCBmdW5jdGlvbihvcmdfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGVzKG9yZ19pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKTtcbiAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKTtcbiAgICB9XG4gIH0pO1xuICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gIHJldHVybiB1c2VyX2lkcztcbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMgPSBmdW5jdGlvbihvcmdfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgdXNlcl9pZHM7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gocm9sZV9pZHMsIGZ1bmN0aW9uKHJvbGVfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUob3JnX2lkLCByb2xlX2lkLCBzcGFjZV9pZCk7XG4gICAgaWYgKHVzZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgfVxuICB9KTtcbiAgaWYgKHVzZXJfaWRzLmxlbmd0aCA+IDApIHtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2ub3JnX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIik7XG4gIH1cbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZSA9IGZ1bmN0aW9uKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpIHtcbiAgdmFyIG9yZywgcGFyZW50cywgcG9zaXRpb25zLCB1c2VyX2lkcztcbiAgb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHtcbiAgICBfaWQ6IG9yZ19pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwYXJlbnRzOiAxXG4gICAgfVxuICB9KTtcbiAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICBvcmc6IG9yZ19pZCxcbiAgICByb2xlOiByb2xlX2lkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHVzZXJzOiAxXG4gICAgfVxuICB9KS5mZXRjaCgpO1xuICBfLmVhY2gocG9zaXRpb25zLCBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2Vycyk7XG4gIH0pO1xuICBpZiAodXNlcl9pZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcGFyZW50cyA9IG9yZy5wYXJlbnRzO1xuICAgIF8uZWFjaChwYXJlbnRzLCBmdW5jdGlvbihwYXJlbnRfaWQpIHtcbiAgICAgIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIG9yZzogcGFyZW50X2lkLFxuICAgICAgICByb2xlOiByb2xlX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIF8uZWFjaChwb3NpdGlvbnMsIGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHBvc2l0aW9uLnVzZXJzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICByZXR1cm4gdXNlcl9pZHM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMgPSBmdW5jdGlvbihpbnN0YW5jZV9pZCwgc3RlcF9pZCkge1xuICB2YXIgX2FwcHJvdmUsIF9zcGFjZV91c2VyLCBfdHJhY2UsIGFwcGxpY2FudCwgYXBwbGljYW50U3VwZXJpb3JzLCBhcHByb3ZlX3VzZXJzLCBhcHByb3Zlcl9vcmdfZmllbGQsIGFwcHJvdmVyX29yZ19pZHMsIGFwcHJvdmVyX3N0ZXAsIGFwcHJvdmVyX3VzZXJfZmllbGQsIGFwcHJvdmVyX3VzZXJfaWRzLCBjdXJyZW50LCBjdXJyZW50X2Zsb3csIGN1cnJlbnRfZmxvd192ZXJzaW9uLCBjdXJyZW50X2Zvcm0sIGN1cnJlbnRfc3RlcCwgY3VycmVudF9zdGVwcywgZGVhbF90eXBlLCBmaWVsZF9jb2RlLCBmaW5pc2hlZF90cmFjZXMsIGZsb3dfaWQsIGZsb3dfcmV2LCBmb3JtLCBmb3JtX2ZpZWxkcywgZm9ybV9pZCwgZm9ybV9yZXYsIGhhbmRsZXJzLCBpbnN0YW5jZSwgbWF4X3N0YXJ0RGF0ZV90cmFjZSwgbmV3X2FwcHJvdmVyX3VzZXJfaWRzLCBuZXdfb3JnX3VzZXJfaWRzLCBuZXdlc3RfdmFsdWVzLCBuZXh0X3N0ZXBfdXNlcnMsIG9yZ19pZHMsIG9yZ19pZHNfbmFtZXMsIG9yZ191c2VyX2lkcywgc3BhY2VfaWQsIHNwYWNlX3VzZXJfY291bnQsIHN1Ym1pdHRlciwgc3VibWl0dGVyX3VzZXJfY291bnQsIHVuZmluaXNoZWRfdHJhY2UsIHVzZXJfaWRzLCB1c2VyX2lkc19uYW1lcywgdXNlcnMsIHZhbGlkX2FwcHJvdmVyX29yZ19pZHM7XG4gIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpO1xuICBpZiAoaW5zdGFuY2Uuc3RlcF9hcHByb3ZlICYmIGluc3RhbmNlLnN0ZXBfYXBwcm92ZVtzdGVwX2lkXSkge1xuICAgIHJldHVybiBpbnN0YW5jZS5zdGVwX2FwcHJvdmVbc3RlcF9pZF07XG4gIH1cbiAgYXBwcm92ZV91c2VycyA9IG5ldyBBcnJheTtcbiAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgZmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG4gIGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICBjdXJyZW50X2Zsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQpO1xuICBjdXJyZW50X3N0ZXAgPSBudWxsO1xuICBjdXJyZW50X3N0ZXBzID0gbmV3IEFycmF5O1xuICBpZiAoY3VycmVudF9mbG93LmN1cnJlbnQuX2lkID09PSBmbG93X3Jldikge1xuICAgIGN1cnJlbnRfc3RlcHMgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5zdGVwcztcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50ID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oaGlzdG9yeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICB9KTtcbiAgICBjdXJyZW50X3N0ZXBzID0gY3VycmVudC5zdGVwcztcbiAgfVxuICBjdXJyZW50X3N0ZXAgPSBfLmZpbmQoY3VycmVudF9zdGVwcywgZnVuY3Rpb24oc3RlcCkge1xuICAgIHJldHVybiBzdGVwLl9pZCA9PT0gc3RlcF9pZDtcbiAgfSk7XG4gIGlmIChjdXJyZW50X3N0ZXAuc3RlcF90eXBlID09PSBcImNvbmRpdGlvblwiKSB7XG4gICAgdW5maW5pc2hlZF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICByZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgPT09IGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgQXJyYXkodW5maW5pc2hlZF90cmFjZS5hcHByb3Zlc1swXS51c2VyKTtcbiAgfVxuICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJzdGFydFwiKSB7XG4gICAgaGFuZGxlcnMgPSBuZXcgQXJyYXk7XG4gICAgaGFuZGxlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpO1xuICAgIGhhbmRsZXJzLnB1c2goaW5zdGFuY2Uuc3VibWl0dGVyKTtcbiAgICBoYW5kbGVycyA9IF8udW5pcShoYW5kbGVycyk7XG4gICAgcmV0dXJuIGhhbmRsZXJzO1xuICB9XG4gIGRlYWxfdHlwZSA9IGN1cnJlbnRfc3RlcC5kZWFsX3R5cGU7XG4gIHVzZXJzID0gbmV3IEFycmF5O1xuICBpZiAoZGVhbF90eXBlID09PSBcImFwcGxpY2FudFJvbGVcIikge1xuICAgIGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudDtcbiAgICBpZiAoYXBwbGljYW50KSB7XG4gICAgICBzcGFjZV91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwbGljYW50XG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHNwYWNlX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgJiYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICAgIHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoe1xuICAgICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgICBpZiAocm9sZV9jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKGFwcGxpY2FudCwgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJJbnN0YW5jZeeahOaPkOS6pOS6uuS4uuepulwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcImFwcGxpY2FudFwiKSB7XG4gICAgYXBwbGljYW50ID0gaW5zdGFuY2UuYXBwbGljYW50O1xuICAgIHNwYWNlX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIHVzZXI6IGFwcGxpY2FudFxuICAgIH0pLmNvdW50KCk7XG4gICAgaWYgKHNwYWNlX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmNc3BhY2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXkoYXBwbGljYW50KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcIm9yZ0ZpZWxkUm9sZVwiKSB7XG4gICAgZm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtO1xuICAgIGZvcm1fcmV2ID0gbnVsbDtcbiAgICBpZiAoZmxvd19yZXYgPT09IGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCkge1xuICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oY3VycmVudF9mbG93X2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCA9PT0gZmxvd19yZXY7XG4gICAgICB9KTtcbiAgICAgIGlmIChjdXJyZW50X2Zsb3dfdmVyc2lvbikge1xuICAgICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZCk7XG4gICAgY3VycmVudF9mb3JtID0gbnVsbDtcbiAgICBpZiAoZm9ybV9yZXYgPT09IGZvcm0uY3VycmVudC5faWQpIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIGZ1bmN0aW9uKGZvcm1faGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCA9PT0gZm9ybV9yZXY7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZXJfb3JnX2ZpZWxkID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX29yZ19maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX29yZ19maWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICBvcmdfaWRzID0gbmV3IEFycmF5O1xuICAgIG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgb3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcmdfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIF8uZWFjaChvcmdfaWRzX25hbWVzLCBmdW5jdGlvbihvcmcpIHtcbiAgICAgIHZhciBjaGVja19vcmdfY291bnQ7XG4gICAgICBjaGVja19vcmdfY291bnQgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IG9yZ1tcImlkXCJdXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX29yZ19jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIue7hOe7h0lE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yZ19pZHMucHVzaChvcmdbXCJpZFwiXSk7XG4gICAgfSk7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcyAmJiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICB2YXIgcm9sZV9jb3VudDtcbiAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgIH0pLmNvdW50KCk7XG4gICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyhvcmdfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJvcmdGaWVsZFwiKSB7XG4gICAgZm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtO1xuICAgIGZvcm1fcmV2ID0gbnVsbDtcbiAgICBpZiAoZmxvd19yZXYgPT09IGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCkge1xuICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oY3VycmVudF9mbG93X2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCA9PT0gZmxvd19yZXY7XG4gICAgICB9KTtcbiAgICAgIGlmIChjdXJyZW50X2Zsb3dfdmVyc2lvbikge1xuICAgICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZCk7XG4gICAgY3VycmVudF9mb3JtID0gbnVsbDtcbiAgICBpZiAoZm9ybV9yZXYgPT09IGZvcm0uY3VycmVudC5faWQpIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIGZ1bmN0aW9uKGZvcm1faGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCA9PT0gZm9ybV9yZXY7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZXJfb3JnX2ZpZWxkID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX29yZ19maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX29yZ19maWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICBvcmdfaWRzID0gbmV3IEFycmF5O1xuICAgIG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgb3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcmdfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIF8uZWFjaChvcmdfaWRzX25hbWVzLCBmdW5jdGlvbihvcmcpIHtcbiAgICAgIHZhciBjaGVja19vcmdfY291bnQ7XG4gICAgICBjaGVja19vcmdfY291bnQgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IG9yZ1tcImlkXCJdXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX29yZ19jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIue7hOe7h0lE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yZ19pZHMucHVzaChvcmdbXCJpZFwiXSk7XG4gICAgfSk7XG4gICAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKG9yZ19pZHMsIGZ1bmN0aW9uKG9yZ19pZCkge1xuICAgICAgdmFyIGNoZWNrX29yZ3MsIG9yZywgb3JnX2NoaWxkcmVuLCBvcmdfdXNlcnM7XG4gICAgICBvcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IG9yZ19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB1c2VyczogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG9yZ19jaGlsZHJlbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgcGFyZW50czogb3JnX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBvcmdfY2hpbGRyZW4udW5zaGlmdChvcmcpO1xuICAgICAgY2hlY2tfb3JncyA9IG9yZ19jaGlsZHJlbjtcbiAgICAgIG9yZ191c2VycyA9IG5ldyBBcnJheTtcbiAgICAgIF8uZWFjaChjaGVja19vcmdzLCBmdW5jdGlvbihjaGVja19vcmdfdXNlcikge1xuICAgICAgICBpZiAoY2hlY2tfb3JnX3VzZXIudXNlcnMpIHtcbiAgICAgICAgICBfLmVhY2goY2hlY2tfb3JnX3VzZXIudXNlcnMsIGZ1bmN0aW9uKG9yZ191c2VyKSB7XG4gICAgICAgICAgICBpZiAoZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgICAgICAgdXNlcjogb3JnX3VzZXJcbiAgICAgICAgICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJzcGFjZeS4i+S4jeWtmOWcqOatpHVzZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQoY2hlY2tfb3JnX3VzZXIudXNlcnMpO1xuICAgICAgICByZXR1cm4gb3JnX3VzZXJzID0gb3JnX3VzZXJzLmNvbmNhdChjaGVja19vcmdfdXNlci51c2Vycyk7XG4gICAgICB9KTtcbiAgICAgIGlmIChvcmdfdXNlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHXCIgKyBvcmdfaWQgKyBcIuS4jeWtmOWcqOWkhOeQhuS6ulwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJ1c2VyRmllbGRSb2xlXCIpIHtcbiAgICBmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm07XG4gICAgZm9ybV9yZXYgPSBudWxsO1xuICAgIGlmIChmbG93X3JldiA9PT0gY3VycmVudF9mbG93LmN1cnJlbnQuX2lkKSB7XG4gICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihjdXJyZW50X2Zsb3dfaGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICAgIH0pO1xuICAgICAgaWYgKGN1cnJlbnRfZmxvd192ZXJzaW9uKSB7XG4gICAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKTtcbiAgICBjdXJyZW50X2Zvcm0gPSBudWxsO1xuICAgIGlmIChmb3JtX3JldiA9PT0gZm9ybS5jdXJyZW50Ll9pZCkge1xuICAgICAgY3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgZnVuY3Rpb24oZm9ybV9oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBmb3JtX2hpc3RvcnkuX2lkID09PSBmb3JtX3JldjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHByb3Zlcl91c2VyX2ZpZWxkID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX3VzZXJfZmllbGQ7XG4gICAgZm9ybV9maWVsZHMgPSBjdXJyZW50X2Zvcm0uZmllbGRzO1xuICAgIGZpZWxkX2NvZGUgPSBudWxsO1xuICAgIF8uZWFjaChmb3JtX2ZpZWxkcywgZnVuY3Rpb24oZm9ybV9maWVsZCkge1xuICAgICAgaWYgKGZvcm1fZmllbGQuX2lkID09PSBhcHByb3Zlcl91c2VyX2ZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5ld2VzdF92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgIHVzZXJfaWRzX25hbWVzID0gbmV3IEFycmF5O1xuICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKSB7XG4gICAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHVzZXJfaWRzX25hbWVzID0gbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZXJfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaCh1c2VyX2lkc19uYW1lcywgZnVuY3Rpb24odXNlcikge1xuICAgICAgdmFyIGNoZWNrX3VzZXJfY291bnQ7XG4gICAgICBjaGVja191c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogdXNlcltcImlkXCJdXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkurrlkZhJROS4jeWQiOazlVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1c2VyX2lkcy5wdXNoKHVzZXJbXCJpZFwiXSk7XG4gICAgfSk7XG4gICAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICAgIGlmIChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgJiYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGZ1bmN0aW9uKGFwcHJvdmVyX3JvbGUpIHtcbiAgICAgICAgdmFyIHJvbGVfY291bnQ7XG4gICAgICAgIHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoe1xuICAgICAgICAgIF9pZDogYXBwcm92ZXJfcm9sZVxuICAgICAgICB9KS5jb3VudCgpO1xuICAgICAgICBpZiAocm9sZV9jb3VudCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2Vyc0FuZFJvbGVzKHVzZXJfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJ1c2VyRmllbGRcIikge1xuICAgIGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybTtcbiAgICBmb3JtX3JldiA9IG51bGw7XG4gICAgaWYgKGZsb3dfcmV2ID09PSBjdXJyZW50X2Zsb3cuY3VycmVudC5faWQpIHtcbiAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIGZ1bmN0aW9uKGN1cnJlbnRfZmxvd19oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgPT09IGZsb3dfcmV2O1xuICAgICAgfSk7XG4gICAgICBpZiAoY3VycmVudF9mbG93X3ZlcnNpb24pIHtcbiAgICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb247XG4gICAgICB9XG4gICAgfVxuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpO1xuICAgIGN1cnJlbnRfZm9ybSA9IG51bGw7XG4gICAgaWYgKGZvcm1fcmV2ID09PSBmb3JtLmN1cnJlbnQuX2lkKSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCBmdW5jdGlvbihmb3JtX2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1faGlzdG9yeS5faWQgPT09IGZvcm1fcmV2O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGFwcHJvdmVyX3VzZXJfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcl9maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX3VzZXJfZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSk7XG4gICAgdXNlcl9pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKHVzZXJfaWRzX25hbWVzLCBmdW5jdGlvbih1c2VyKSB7XG4gICAgICB2YXIgY2hlY2tfdXNlcl9jb3VudDtcbiAgICAgIGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiB1c2VyW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS6uuWRmElE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKTtcbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJzcGVjaWZ5U3RlcFJvbGVcIikge1xuICAgIGFwcHJvdmVyX3N0ZXAgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfc3RlcDtcbiAgICBmaW5pc2hlZF90cmFjZXMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgIGlmICh0cmFjZS5zdGVwID09PSBhcHByb3Zlcl9zdGVwKSB7XG4gICAgICAgIHJldHVybiBmaW5pc2hlZF90cmFjZXMucHVzaCh0cmFjZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbWF4X3N0YXJ0RGF0ZV90cmFjZSA9IF8ubWF4KGZpbmlzaGVkX3RyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQuc3RhcnRfZGF0ZTtcbiAgICB9KTtcbiAgICBhcHByb3ZlX3VzZXJzID0gXy5wbHVjayhtYXhfc3RhcnREYXRlX3RyYWNlLmFwcHJvdmVzLCBcInVzZXJcIik7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcykge1xuICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICB2YXIgcm9sZV9jb3VudDtcbiAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgIH0pLmNvdW50KCk7XG4gICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBfLmVhY2goYXBwcm92ZV91c2VycywgZnVuY3Rpb24oYXBwcm92ZV91c2VyKSB7XG4gICAgICBpZiAoZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwcm92ZV91c2VyXG4gICAgICB9KS5jb3VudCgpID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oyH5a6a5q2l6aqk55qE5aSE55CG5Lq65bey57uP5Y+Y5pu0XCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMoYXBwcm92ZV91c2VycywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZCk7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlTdGVwVXNlclwiKSB7XG4gICAgYXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwO1xuICAgIGZpbmlzaGVkX3RyYWNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0cmFjZSkge1xuICAgICAgaWYgKHRyYWNlLnN0ZXAgPT09IGFwcHJvdmVyX3N0ZXApIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtYXhfc3RhcnREYXRlX3RyYWNlID0gXy5tYXgoZmluaXNoZWRfdHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5zdGFydF9kYXRlO1xuICAgIH0pO1xuICAgIGFwcHJvdmVfdXNlcnMgPSBfLnBsdWNrKG1heF9zdGFydERhdGVfdHJhY2UuYXBwcm92ZXMsIFwidXNlclwiKTtcbiAgICBfLmVhY2goYXBwcm92ZV91c2VycywgZnVuY3Rpb24oYXBwcm92ZV91c2VyKSB7XG4gICAgICB2YXIgY2hlY2tfYXBwcm92ZV91c2VyX2NvdW50O1xuICAgICAgY2hlY2tfYXBwcm92ZV91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwcm92ZV91c2VyXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaMh+WumuatpemqpOeahOWkhOeQhuS6uuW3sue7j+WPmOabtFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhcHByb3ZlX3VzZXJzID0gXy51bmlxKGFwcHJvdmVfdXNlcnMpO1xuICAgIHJldHVybiBhcHByb3ZlX3VzZXJzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJzdWJtaXR0ZXJSb2xlXCIpIHtcbiAgICBzdWJtaXR0ZXIgPSBpbnN0YW5jZS5zdWJtaXR0ZXI7XG4gICAgaWYgKCFzdWJtaXR0ZXIpIHtcbiAgICAgIHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogc3VibWl0dGVyXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHN1Ym1pdHRlcl91c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmN5bel5L2c5Yy6XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcyAmJiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGZ1bmN0aW9uKGFwcHJvdmVyX3JvbGUpIHtcbiAgICAgICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgICAgIF9pZDogYXBwcm92ZXJfcm9sZVxuICAgICAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMoc3VibWl0dGVyLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIHNwYWNlX2lkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUs+ivt+WNleeahOaPkOS6pOS6uuS4uuepulwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInN1Ym1pdHRlclwiKSB7XG4gICAgc3VibWl0dGVyID0gaW5zdGFuY2Uuc3VibWl0dGVyO1xuICAgIHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICB1c2VyOiBzdWJtaXR0ZXJcbiAgICB9KS5jb3VudCgpO1xuICAgIGlmIChzdWJtaXR0ZXJfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXkoc3VibWl0dGVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlPcmdcIikge1xuICAgIGFwcHJvdmVyX29yZ19pZHMgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JncztcbiAgICBpZiAoIWFwcHJvdmVyX29yZ19pZHMgfHwgYXBwcm92ZXJfb3JnX2lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5a6a5LmJ55So5LqO5p+l5om+5LiL5LiA5q2l5aSE55CG5Lq655qE6YOo6Zeo77yM6K+36IGU57O7566h55CG5ZGY6LCD5p+l5rWB56iL5Zu+55qE6YWN572u5piv5ZCm5q2j56GuXCIpO1xuICAgIH1cbiAgICB2YWxpZF9hcHByb3Zlcl9vcmdfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChhcHByb3Zlcl9vcmdfaWRzLCBmdW5jdGlvbihhcHByb3Zlcl9vcmdfaWQpIHtcbiAgICAgIGlmIChkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IGFwcHJvdmVyX29yZ19pZFxuICAgICAgfSkuY291bnQoKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkX2FwcHJvdmVyX29yZ19pZHMudW5zaGlmdChhcHByb3Zlcl9vcmdfaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9yZ191c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2godmFsaWRfYXBwcm92ZXJfb3JnX2lkcywgZnVuY3Rpb24odmFsaWRfYXBwcm92ZXJfb3JnX2lkKSB7XG4gICAgICB2YXIgY2hpbGRfb3JncywgdmFsaWRfYXBwcm92ZXJfb3JnO1xuICAgICAgdmFsaWRfYXBwcm92ZXJfb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHtcbiAgICAgICAgX2lkOiB2YWxpZF9hcHByb3Zlcl9vcmdfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdXNlcnM6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAodmFsaWRfYXBwcm92ZXJfb3JnLnVzZXJzKSB7XG4gICAgICAgIG9yZ191c2VyX2lkcyA9IG9yZ191c2VyX2lkcy5jb25jYXQodmFsaWRfYXBwcm92ZXJfb3JnLnVzZXJzKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkX29yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHBhcmVudHM6IHZhbGlkX2FwcHJvdmVyX29yZ19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB1c2VyczogMVxuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgICAgcmV0dXJuIF8uZWFjaChjaGlsZF9vcmdzLCBmdW5jdGlvbihjaGlsZF9vcmcpIHtcbiAgICAgICAgaWYgKGNoaWxkX29yZy51c2Vycykge1xuICAgICAgICAgIHJldHVybiBvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KGNoaWxkX29yZy51c2Vycyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9yZ191c2VyX2lkcyA9IF8udW5pcShvcmdfdXNlcl9pZHMpO1xuICAgIG5ld19vcmdfdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKG9yZ191c2VyX2lkcywgZnVuY3Rpb24ob3JnX3VzZXJfaWQpIHtcbiAgICAgIHZhciBzcGFjZV91c2VyX2luZm9fY291bnQ7XG4gICAgICBzcGFjZV91c2VyX2luZm9fY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBvcmdfdXNlcl9pZFxuICAgICAgfSkuY291bnQoKTtcbiAgICAgIGlmIChzcGFjZV91c2VyX2luZm9fY291bnQgPiAwKSB7XG4gICAgICAgIHJldHVybiBuZXdfb3JnX3VzZXJfaWRzLnB1c2gob3JnX3VzZXJfaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXdfb3JnX3VzZXJfaWRzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJzcGVjaWZ5VXNlclwiKSB7XG4gICAgYXBwcm92ZXJfdXNlcl9pZHMgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcnM7XG4gICAgYXBwcm92ZXJfdXNlcl9pZHMgPSBfLnVuaXEoYXBwcm92ZXJfdXNlcl9pZHMpO1xuICAgIG5ld19hcHByb3Zlcl91c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goYXBwcm92ZXJfdXNlcl9pZHMsIGZ1bmN0aW9uKGFwcHJvdmVyX3VzZXJfaWQpIHtcbiAgICAgIHZhciBzcGFjZV91c2VyX2luZm9fY291bnQ7XG4gICAgICBzcGFjZV91c2VyX2luZm9fY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHByb3Zlcl91c2VyX2lkXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHNwYWNlX3VzZXJfaW5mb19jb3VudCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG5ld19hcHByb3Zlcl91c2VyX2lkcy5wdXNoKGFwcHJvdmVyX3VzZXJfaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXdfYXBwcm92ZXJfdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInBpY2t1cEF0UnVudGltZVwiKSB7XG4gICAgbmV4dF9zdGVwX3VzZXJzID0gbmV3IEFycmF5O1xuICAgIF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKF90cikge1xuICAgICAgcmV0dXJuIF90ci5pc19maW5pc2hlZCA9PT0gZmFsc2U7XG4gICAgfSk7XG4gICAgX2FwcHJvdmUgPSBfLmZpbmQoX3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbihfYXBwKSB7XG4gICAgICByZXR1cm4gX2FwcC5pc19maW5pc2hlZCA9PT0gZmFsc2UgJiYgX2FwcC50eXBlICE9PSAnY2MnO1xuICAgIH0pO1xuICAgIGlmIChfYXBwcm92ZS5uZXh0X3N0ZXBzKSB7XG4gICAgICBpZiAoX2FwcHJvdmUubmV4dF9zdGVwc1swXVtcInVzZXJzXCJdKSB7XG4gICAgICAgIG5leHRfc3RlcF91c2VycyA9IF9hcHByb3ZlLm5leHRfc3RlcHNbMF1bXCJ1c2Vyc1wiXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRfc3RlcF91c2VycztcbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwiYXBwbGljYW50U3VwZXJpb3JcIikge1xuICAgIGFwcGxpY2FudFN1cGVyaW9ycyA9IG5ldyBBcnJheTtcbiAgICBfc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgdXNlcjogaW5zdGFuY2UuYXBwbGljYW50XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG1hbmFnZXI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoX3NwYWNlX3VzZXIubWFuYWdlcikge1xuICAgICAgYXBwbGljYW50U3VwZXJpb3JzLnB1c2goX3NwYWNlX3VzZXIubWFuYWdlcik7XG4gICAgfVxuICAgIHJldHVybiBhcHBsaWNhbnRTdXBlcmlvcnM7XG4gIH1cbn07XG4iLCJwZXJtaXNzaW9uTWFuYWdlciA9IHt9XHJcblxyXG5wZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMgPSAoZmxvd19pZCwgdXNlcl9pZCkgLT5cclxuXHQjIOagueaNrjpmbG93X2lk5p+l5Yiw5a+55bqU55qEZmxvd1xyXG5cdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coZmxvd19pZClcclxuXHRzcGFjZV9pZCA9IGZsb3cuc3BhY2VcclxuXHQjIOagueaNrnNwYWNlX2lk5ZKMOnVzZXJfaWTliLBvcmdhbml6YXRpb25z6KGo5Lit5p+l5Yiw55So5oi35omA5bGe5omA5pyJ55qEb3JnX2lk77yI5YyF5ous5LiK57qn57uESUTvvIlcclxuXHRvcmdfaWRzID0gbmV3IEFycmF5XHJcblx0b3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XHJcblx0XHRzcGFjZTogc3BhY2VfaWQsIHVzZXJzOiB1c2VyX2lkIH0sIHsgZmllbGRzOiB7IHBhcmVudHM6IDEgfSB9KS5mZXRjaCgpXHJcblx0Xy5lYWNoKG9yZ2FuaXphdGlvbnMsIChvcmcpIC0+XHJcblx0XHRvcmdfaWRzLnB1c2gob3JnLl9pZClcclxuXHRcdGlmIG9yZy5wYXJlbnRzXHJcblx0XHRcdF8uZWFjaChvcmcucGFyZW50cywgKHBhcmVudF9pZCkgLT5cclxuXHRcdFx0XHRvcmdfaWRzLnB1c2gocGFyZW50X2lkKVxyXG5cdFx0XHQpXHJcblx0KVxyXG5cdG9yZ19pZHMgPSBfLnVuaXEob3JnX2lkcylcclxuXHRteV9wZXJtaXNzaW9ucyA9IG5ldyBBcnJheVxyXG5cdGlmIGZsb3cucGVybXNcclxuXHRcdCMg5Yik5patZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRtaW7kuK3mmK/lkKbljIXlkKvlvZPliY3nlKjmiLfvvIxcclxuXHRcdCMg5oiW6ICFZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZGTmmK/lkKbljIXlkKs05q2l5b6X5Yiw55qEb3JnX2lk5pWw57uE5Lit55qE5Lu75L2V5LiA5Liq77yMXHJcblx0XHQjIOiLpeaYr++8jOWImeWcqOi/lOWbnueahOaVsOe7hOS4reWKoOS4imFkZFxyXG5cdFx0aWYgZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRkXHJcblx0XHRcdHVzZXJzX2Nhbl9hZGQgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGRcclxuXHRcdFx0aWYgdXNlcnNfY2FuX2FkZC5pbmNsdWRlcyh1c2VyX2lkKVxyXG5cdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJhZGRcIilcclxuXHJcblx0XHRpZiBmbG93LnBlcm1zLm9yZ3NfY2FuX2FkZFxyXG5cdFx0XHRvcmdzX2Nhbl9hZGQgPSBmbG93LnBlcm1zLm9yZ3NfY2FuX2FkZFxyXG5cdFx0XHRfLmVhY2gob3JnX2lkcywgKG9yZ19pZCkgLT5cclxuXHRcdFx0XHRpZiBvcmdzX2Nhbl9hZGQuaW5jbHVkZXMob3JnX2lkKVxyXG5cdFx0XHRcdFx0bXlfcGVybWlzc2lvbnMucHVzaChcImFkZFwiKVxyXG5cdFx0XHQpXHJcblx0XHQjIOWIpOaWrWZsb3cucGVybXMudXNlcnNfY2FuX21vbml0b3LkuK3mmK/lkKbljIXlkKvlvZPliY3nlKjmiLfvvIxcclxuXHRcdCMg5oiW6ICFZmxvdy5wZXJtcy5vcmdzX2Nhbl9tb25pdG9y5piv5ZCm5YyF5ZCrNOatpeW+l+WIsOeahG9yZ19pZOaVsOe7hOS4reeahOS7u+S9leS4gOS4qu+8jFxyXG5cdFx0IyDoi6XmmK/vvIzliJnlnKjov5Tlm57nmoTmlbDnu4TkuK3liqDkuIptb25pdG9yXHJcblx0XHRpZiBmbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9yXHJcblx0XHRcdHVzZXJzX2Nhbl9tb25pdG9yID0gZmxvdy5wZXJtcy51c2Vyc19jYW5fbW9uaXRvclxyXG5cdFx0XHRpZiB1c2Vyc19jYW5fbW9uaXRvci5pbmNsdWRlcyh1c2VyX2lkKVxyXG5cdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJtb25pdG9yXCIpXHJcblxyXG5cdFx0aWYgZmxvdy5wZXJtcy5vcmdzX2Nhbl9tb25pdG9yXHJcblx0XHRcdG9yZ3NfY2FuX21vbml0b3IgPSBmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3JcclxuXHRcdFx0Xy5lYWNoKG9yZ19pZHMsIChvcmdfaWQpIC0+XHJcblx0XHRcdFx0aWYgb3Jnc19jYW5fbW9uaXRvci5pbmNsdWRlcyhvcmdfaWQpXHJcblx0XHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwibW9uaXRvclwiKVxyXG5cdFx0XHQpXHJcblx0XHQjIOWIpOaWrWZsb3cucGVybXMudXNlcnNfY2FuX2FkbWlu5Lit5piv5ZCm5YyF5ZCr5b2T5YmN55So5oi377yMXHJcblx0XHQjIOaIluiAhWZsb3cucGVybXMub3Jnc19jYW5fYWRtaW7mmK/lkKbljIXlkKs05q2l5b6X5Yiw55qEb3JnX2lk5pWw57uE5Lit55qE5Lu75L2V5LiA5Liq77yMXHJcblx0XHQjIOiLpeaYr++8jOWImeWcqOi/lOWbnueahOaVsOe7hOS4reWKoOS4imFkbWluXHJcblx0XHRpZiBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pblxyXG5cdFx0XHR1c2Vyc19jYW5fYWRtaW4gPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pblxyXG5cdFx0XHRpZiB1c2Vyc19jYW5fYWRtaW4uaW5jbHVkZXModXNlcl9pZClcclxuXHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRtaW5cIilcclxuXHJcblx0XHRpZiBmbG93LnBlcm1zLm9yZ3NfY2FuX2FkbWluXHJcblx0XHRcdG9yZ3NfY2FuX2FkbWluID0gZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZG1pblxyXG5cdFx0XHRfLmVhY2gob3JnX2lkcywgKG9yZ19pZCkgLT5cclxuXHRcdFx0XHRpZiBvcmdzX2Nhbl9hZG1pbi5pbmNsdWRlcyhvcmdfaWQpXHJcblx0XHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRtaW5cIilcclxuXHRcdFx0KVxyXG5cclxuXHRteV9wZXJtaXNzaW9ucyA9IF8udW5pcShteV9wZXJtaXNzaW9ucylcclxuXHRyZXR1cm4gbXlfcGVybWlzc2lvbnMiLCIgICAgICAgICAgICAgICAgICAgICAgXG5cbnBlcm1pc3Npb25NYW5hZ2VyID0ge307XG5cbnBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyA9IGZ1bmN0aW9uKGZsb3dfaWQsIHVzZXJfaWQpIHtcbiAgdmFyIGZsb3csIG15X3Blcm1pc3Npb25zLCBvcmdfaWRzLCBvcmdhbml6YXRpb25zLCBvcmdzX2Nhbl9hZGQsIG9yZ3NfY2FuX2FkbWluLCBvcmdzX2Nhbl9tb25pdG9yLCBzcGFjZV9pZCwgdXNlcnNfY2FuX2FkZCwgdXNlcnNfY2FuX2FkbWluLCB1c2Vyc19jYW5fbW9uaXRvcjtcbiAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhmbG93X2lkKTtcbiAgc3BhY2VfaWQgPSBmbG93LnNwYWNlO1xuICBvcmdfaWRzID0gbmV3IEFycmF5O1xuICBvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgdXNlcnM6IHVzZXJfaWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgcGFyZW50czogMVxuICAgIH1cbiAgfSkuZmV0Y2goKTtcbiAgXy5lYWNoKG9yZ2FuaXphdGlvbnMsIGZ1bmN0aW9uKG9yZykge1xuICAgIG9yZ19pZHMucHVzaChvcmcuX2lkKTtcbiAgICBpZiAob3JnLnBhcmVudHMpIHtcbiAgICAgIHJldHVybiBfLmVhY2gob3JnLnBhcmVudHMsIGZ1bmN0aW9uKHBhcmVudF9pZCkge1xuICAgICAgICByZXR1cm4gb3JnX2lkcy5wdXNoKHBhcmVudF9pZCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBvcmdfaWRzID0gXy51bmlxKG9yZ19pZHMpO1xuICBteV9wZXJtaXNzaW9ucyA9IG5ldyBBcnJheTtcbiAgaWYgKGZsb3cucGVybXMpIHtcbiAgICBpZiAoZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRkKSB7XG4gICAgICB1c2Vyc19jYW5fYWRkID0gZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRkO1xuICAgICAgaWYgKHVzZXJzX2Nhbl9hZGQuaW5jbHVkZXModXNlcl9pZCkpIHtcbiAgICAgICAgbXlfcGVybWlzc2lvbnMucHVzaChcImFkZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZsb3cucGVybXMub3Jnc19jYW5fYWRkKSB7XG4gICAgICBvcmdzX2Nhbl9hZGQgPSBmbG93LnBlcm1zLm9yZ3NfY2FuX2FkZDtcbiAgICAgIF8uZWFjaChvcmdfaWRzLCBmdW5jdGlvbihvcmdfaWQpIHtcbiAgICAgICAgaWYgKG9yZ3NfY2FuX2FkZC5pbmNsdWRlcyhvcmdfaWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG15X3Blcm1pc3Npb25zLnB1c2goXCJhZGRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZmxvdy5wZXJtcy51c2Vyc19jYW5fbW9uaXRvcikge1xuICAgICAgdXNlcnNfY2FuX21vbml0b3IgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9yO1xuICAgICAgaWYgKHVzZXJzX2Nhbl9tb25pdG9yLmluY2x1ZGVzKHVzZXJfaWQpKSB7XG4gICAgICAgIG15X3Blcm1pc3Npb25zLnB1c2goXCJtb25pdG9yXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmxvdy5wZXJtcy5vcmdzX2Nhbl9tb25pdG9yKSB7XG4gICAgICBvcmdzX2Nhbl9tb25pdG9yID0gZmxvdy5wZXJtcy5vcmdzX2Nhbl9tb25pdG9yO1xuICAgICAgXy5lYWNoKG9yZ19pZHMsIGZ1bmN0aW9uKG9yZ19pZCkge1xuICAgICAgICBpZiAob3Jnc19jYW5fbW9uaXRvci5pbmNsdWRlcyhvcmdfaWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG15X3Blcm1pc3Npb25zLnB1c2goXCJtb25pdG9yXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGZsb3cucGVybXMudXNlcnNfY2FuX2FkbWluKSB7XG4gICAgICB1c2Vyc19jYW5fYWRtaW4gPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pbjtcbiAgICAgIGlmICh1c2Vyc19jYW5fYWRtaW4uaW5jbHVkZXModXNlcl9pZCkpIHtcbiAgICAgICAgbXlfcGVybWlzc2lvbnMucHVzaChcImFkbWluXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZG1pbikge1xuICAgICAgb3Jnc19jYW5fYWRtaW4gPSBmbG93LnBlcm1zLm9yZ3NfY2FuX2FkbWluO1xuICAgICAgXy5lYWNoKG9yZ19pZHMsIGZ1bmN0aW9uKG9yZ19pZCkge1xuICAgICAgICBpZiAob3Jnc19jYW5fYWRtaW4uaW5jbHVkZXMob3JnX2lkKSkge1xuICAgICAgICAgIHJldHVybiBteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRtaW5cIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBteV9wZXJtaXNzaW9ucyA9IF8udW5pcShteV9wZXJtaXNzaW9ucyk7XG4gIHJldHVybiBteV9wZXJtaXNzaW9ucztcbn07XG4iLCJhcHByb3ZlTWFuYWdlciA9IHt9XHJcblxyXG5cclxuIyMjXHJcbiAgICDlr7nmr5RhcHByb3ZlX3ZhbHVlc+S4jmxhc3RfdmFsdWVzIOWvueixoe+8jCDov5Tlm55hcHByb3ZlX3ZhbHVlc+avlGxhc3RfdmFsdWVz5aSa5Ye655qE5oiW6ICF5pS55Y+Y55qE6YOo5YiGXHJcbiMjI1xyXG5hcHByb3ZlTWFuYWdlci5nZXRDaGFuZ2VWYWx1ZXMgPSAobGFzdF92YWx1ZXMsYXBwcm92ZV92YWx1ZXMpIC0+XHJcblxyXG5cdGNoYW5nZVZhbHVlcyA9IHt9XHJcblxyXG5cdGxhc3RfdmFsdWVzX2tleXMgPSBfLmtleXMobGFzdF92YWx1ZXMpXHJcblxyXG5cdGFwcHJvdmVfdmFsdWVzX2tleXMgPSBfLmtleXMoYXBwcm92ZV92YWx1ZXMpXHJcblxyXG4jXHRjb25zb2xlLmxvZyhcImxhc3RfdmFsdWVzX2tleXNcIiwgbGFzdF92YWx1ZXNfa2V5cylcclxuI1xyXG4jXHRjb25zb2xlLmxvZyhcImFwcHJvdmVfdmFsdWVzX2tleXNcIiwgYXBwcm92ZV92YWx1ZXNfa2V5cylcclxuXHJcblx0YXBwcm92ZV92YWx1ZXNfa2V5cy5mb3JFYWNoIChrZXkpLT5cclxuXHRcdGlmIF8uY29udGFpbnMobGFzdF92YWx1ZXNfa2V5cywga2V5KVxyXG5cdFx0XHRpZiAhXy5pc0VxdWFsKGxhc3RfdmFsdWVzW2tleV0sIGFwcHJvdmVfdmFsdWVzW2tleV0pXHJcblx0XHRcdFx0Y2hhbmdlVmFsdWVzW2tleV0gPSBhcHByb3ZlX3ZhbHVlc1trZXldXHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIGFwcHJvdmVfdmFsdWVzW2tleV0gIT0gJydcclxuI1x0XHRcdFx0Y29uc29sZS5sb2coa2V5LGFwcHJvdmVfdmFsdWVzW2tleV0pXHJcblx0XHRcdFx0Y2hhbmdlVmFsdWVzW2tleV0gPSBhcHByb3ZlX3ZhbHVlc1trZXldXHJcblxyXG5cdHJldHVybiBjaGFuZ2VWYWx1ZXNcclxuIiwiICAgICAgICAgICAgICAgICAgIFxuXG5hcHByb3ZlTWFuYWdlciA9IHt9O1xuXG5cbi8qXG4gICAg5a+55q+UYXBwcm92ZV92YWx1ZXPkuI5sYXN0X3ZhbHVlcyDlr7nosaHvvIwg6L+U5ZueYXBwcm92ZV92YWx1ZXPmr5RsYXN0X3ZhbHVlc+WkmuWHuueahOaIluiAheaUueWPmOeahOmDqOWIhlxuICovXG5cbmFwcHJvdmVNYW5hZ2VyLmdldENoYW5nZVZhbHVlcyA9IGZ1bmN0aW9uKGxhc3RfdmFsdWVzLCBhcHByb3ZlX3ZhbHVlcykge1xuICB2YXIgYXBwcm92ZV92YWx1ZXNfa2V5cywgY2hhbmdlVmFsdWVzLCBsYXN0X3ZhbHVlc19rZXlzO1xuICBjaGFuZ2VWYWx1ZXMgPSB7fTtcbiAgbGFzdF92YWx1ZXNfa2V5cyA9IF8ua2V5cyhsYXN0X3ZhbHVlcyk7XG4gIGFwcHJvdmVfdmFsdWVzX2tleXMgPSBfLmtleXMoYXBwcm92ZV92YWx1ZXMpO1xuICBhcHByb3ZlX3ZhbHVlc19rZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKF8uY29udGFpbnMobGFzdF92YWx1ZXNfa2V5cywga2V5KSkge1xuICAgICAgaWYgKCFfLmlzRXF1YWwobGFzdF92YWx1ZXNba2V5XSwgYXBwcm92ZV92YWx1ZXNba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZVZhbHVlc1trZXldID0gYXBwcm92ZV92YWx1ZXNba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFwcHJvdmVfdmFsdWVzW2tleV0gIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBjaGFuZ2VWYWx1ZXNba2V5XSA9IGFwcHJvdmVfdmFsdWVzW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoYW5nZVZhbHVlcztcbn07XG4iLCJmbG93TWFuYWdlciA9IHt9XHJcblxyXG5mbG93TWFuYWdlci5nZXRDYXRlZ29yaWVzRmxvd3MgPSAoc3BhY2VJZCwgY2F0ZWdvcmllSWQsIGZpZWxkcyktPlxyXG5cclxuXHRjYXRlZ29yaWVzRm9ybXMgPSBmb3JtTWFuYWdlci5nZXRDYXRlZ29yaWVzRm9ybXMoc3BhY2VJZCwgY2F0ZWdvcmllSWQsIHtfaWQ6IDF9KS5mZXRjaCgpXHJcblxyXG5cdHJldHVybiBkYi5mbG93cy5maW5kKHtmb3JtOiB7JGluIDogY2F0ZWdvcmllc0Zvcm1zLmdldFByb3BlcnR5KFwiX2lkXCIpfX0pXHJcblxyXG5mbG93TWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGbG93cyA9IChzcGFjZUlkLCBmaWVsZHMpLT5cclxuXHJcblx0dW5DYXRlZ29yaWVzRm9ybXMgPSBmb3JtTWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGb3JtcyhzcGFjZUlkLCB7X2lkOiAxfSkuZmV0Y2goKVxyXG5cclxuXHRyZXR1cm4gZGIuZmxvd3MuZmluZCh7Zm9ybTogeyRpbiA6IHVuQ2F0ZWdvcmllc0Zvcm1zLmdldFByb3BlcnR5KFwiX2lkXCIpfX0pXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJmb3JtTWFuYWdlciA9IHt9XHJcblxyXG5mb3JtTWFuYWdlci5nZXRDYXRlZ29yaWVzRm9ybXMgPSAoc3BhY2VJZCwgY2F0ZWdvcmllSWQsIGZpZWxkcyktPlxyXG5cdGlmIGZpZWxkc1xyXG5cdFx0X2ZpZWxkcyA9IHtmaWVsZHM6IGZpZWxkc31cclxuXHJcblx0cmV0dXJuIGRiLmZvcm1zLmZpbmQoe3NwYWNlOiBzcGFjZUlkLCBjYXRlZ29yeTogY2F0ZWdvcmllSWQsIHN0YXRlOiBcImVuYWJsZWRcIn0sIF9maWVsZHMpXHJcblxyXG5mb3JtTWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGb3JtcyA9IChzcGFjZUlkLCBmaWVsZHMpIC0+XHJcblx0aWYgZmllbGRzXHJcblx0XHRfZmllbGRzID0ge2ZpZWxkczogZmllbGRzfVxyXG5cdHJldHVybiBkYi5mb3Jtcy5maW5kKHtzcGFjZTogc3BhY2VJZCwgY2F0ZWdvcnk6IHskaW46IFtudWxsLCBcIlwiXX0sIHN0YXRlOiBcImVuYWJsZWRcIn0sIF9maWVsZHMpXHJcbiIsIiAgICAgICAgICAgICAgICBcblxuZm9ybU1hbmFnZXIgPSB7fTtcblxuZm9ybU1hbmFnZXIuZ2V0Q2F0ZWdvcmllc0Zvcm1zID0gZnVuY3Rpb24oc3BhY2VJZCwgY2F0ZWdvcmllSWQsIGZpZWxkcykge1xuICB2YXIgX2ZpZWxkcztcbiAgaWYgKGZpZWxkcykge1xuICAgIF9maWVsZHMgPSB7XG4gICAgICBmaWVsZHM6IGZpZWxkc1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGRiLmZvcm1zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkLFxuICAgIGNhdGVnb3J5OiBjYXRlZ29yaWVJZCxcbiAgICBzdGF0ZTogXCJlbmFibGVkXCJcbiAgfSwgX2ZpZWxkcyk7XG59O1xuXG5mb3JtTWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGb3JtcyA9IGZ1bmN0aW9uKHNwYWNlSWQsIGZpZWxkcykge1xuICB2YXIgX2ZpZWxkcztcbiAgaWYgKGZpZWxkcykge1xuICAgIF9maWVsZHMgPSB7XG4gICAgICBmaWVsZHM6IGZpZWxkc1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGRiLmZvcm1zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkLFxuICAgIGNhdGVnb3J5OiB7XG4gICAgICAkaW46IFtudWxsLCBcIlwiXVxuICAgIH0sXG4gICAgc3RhdGU6IFwiZW5hYmxlZFwiXG4gIH0sIF9maWVsZHMpO1xufTtcbiIsInN0ZXBNYW5hZ2VyID0ge31cclxuXHJcbnN0ZXBNYW5hZ2VyLmFsbG93QmF0Y2ggPSAoc3RlcCktPlxyXG5cdHJldHVybiBzdGVwLnN0ZXBfdHlwZSA9PSAnY291bnRlclNpZ24nICYmIHN0ZXAuYWxsb3dCYXRjaFxyXG5cclxuc3RlcE1hbmFnZXIuZ2V0U3RlcCA9IChpbnN0YW5jZSwgZmxvdywgc3RlcF9pZCktPlxyXG5cdGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uXHJcblx0aXNFeGlzdFN0ZXAgPSBudWxsXHJcblx0aWYgZmxvdy5jdXJyZW50Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0aXNFeGlzdFN0ZXAgPSBfLmZpbmQoZmxvdy5jdXJyZW50LnN0ZXBzLCAoc3RlcCktPlxyXG5cdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxyXG5cdFx0KVxyXG5cdGVsc2VcclxuXHRcdF8uZWFjaChmbG93Lmhpc3RvcnlzLCAoaGlzdG9yeSktPlxyXG5cdFx0XHRpZiBoaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0XHRcdGlzRXhpc3RTdGVwID0gXy5maW5kKGhpc3Rvcnkuc3RlcHMsIChzdGVwKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxyXG5cdFx0XHRcdClcclxuXHRcdClcclxuXHJcblx0aWYgbm90IGlzRXhpc3RTdGVwXHJcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeiDveiOt+WPlnN0ZXBcIilcclxuXHJcblx0cmV0dXJuIGlzRXhpc3RTdGVwIiwiICAgICAgICAgICAgICAgIFxuXG5zdGVwTWFuYWdlciA9IHt9O1xuXG5zdGVwTWFuYWdlci5hbGxvd0JhdGNoID0gZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gc3RlcC5zdGVwX3R5cGUgPT09ICdjb3VudGVyU2lnbicgJiYgc3RlcC5hbGxvd0JhdGNoO1xufTtcblxuc3RlcE1hbmFnZXIuZ2V0U3RlcCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBmbG93LCBzdGVwX2lkKSB7XG4gIHZhciBmbG93X3JldiwgaXNFeGlzdFN0ZXA7XG4gIGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICBpc0V4aXN0U3RlcCA9IG51bGw7XG4gIGlmIChmbG93LmN1cnJlbnQuX2lkID09PSBmbG93X3Jldikge1xuICAgIGlzRXhpc3RTdGVwID0gXy5maW5kKGZsb3cuY3VycmVudC5zdGVwcywgZnVuY3Rpb24oc3RlcCkge1xuICAgICAgcmV0dXJuIHN0ZXAuX2lkID09PSBzdGVwX2lkO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF8uZWFjaChmbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihoaXN0b3J5KSB7XG4gICAgICBpZiAoaGlzdG9yeS5faWQgPT09IGZsb3dfcmV2KSB7XG4gICAgICAgIHJldHVybiBpc0V4aXN0U3RlcCA9IF8uZmluZChoaXN0b3J5LnN0ZXBzLCBmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXAuX2lkID09PSBzdGVwX2lkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoIWlzRXhpc3RTdGVwKSB7XG4gICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3og73ojrflj5ZzdGVwXCIpO1xuICB9XG4gIHJldHVybiBpc0V4aXN0U3RlcDtcbn07XG4iLCJfZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyID0ge31cclxuXHJcbmxvZ2dlciA9IG5ldyBMb2dnZXIgJ1dvcmtmbG93IC0+IEluc3RhbmNlTWFuYWdlcidcclxuXHJcbkluc3RhbmNlTWFuYWdlci5oYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwID0gKGlucywgZmllbGRfbWFwKSAtPlxyXG5cdHJlcyA9IGluc1xyXG5cdGlmIGluc1xyXG5cdFx0aWYgIWZpZWxkX21hcFxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGlucy5mbG93IH0sIHsgZmllbGRzOiB7IGZpZWxkX21hcDogMSB9IH0pXHJcblxyXG5cdFx0XHRpZiBmbG93Py5maWVsZF9tYXBcclxuXHRcdFx0XHRmaWVsZF9tYXAgPSBmbG93LmZpZWxkX21hcFxyXG5cclxuXHRcdGlmIGZpZWxkX21hcFxyXG5cdFx0XHRjb250ZXh0ID0gXy5jbG9uZShpbnMpXHJcblxyXG5cdFx0XHRjb250ZXh0Ll8gPSBfXHJcblxyXG5cdFx0XHRzY3JpcHQgPSBcInZhciBpbnN0YW5jZXMgPSAje2ZpZWxkX21hcH07IGV4cG9ydHMuaW5zdGFuY2VzID0gaW5zdGFuY2VzXCJcclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0cmVzID0gX2V2YWwoc2NyaXB0LCBcImhhbmRsZXJJbnN0YW5jZUJ5RmllbGRNYXBcIiwgY29udGV4dCwgZmFsc2UpLmluc3RhbmNlc1xyXG5cdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0cmVzID0geyBfZXJyb3I6IGUgfVxyXG5cdFx0XHRcdGxvZ2dlci5lcnJvciBlXHJcblx0cmV0dXJuIHJlc1xyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlID0gKGluc3RhbmNlLCBoYW5kbGVyKS0+XHJcblxyXG5cdGlmICFpbnN0YW5jZSBvciAhaW5zdGFuY2UudHJhY2VzIG9yIGluc3RhbmNlLnRyYWNlcy5sZW5ndGggPCAxXHJcblx0XHRyZXR1cm5cclxuXHJcblx0Y3VycmVudFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eSgnaXNfZmluaXNoZWQnLCBmYWxzZSlcclxuXHJcblx0aWYgY3VycmVudFRyYWNlcy5sZW5ndGhcclxuXHRcdGN1cnJlbnRBcHByb3ZlcyA9IGN1cnJlbnRUcmFjZXNbMF0uYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoJ2lzX2ZpbmlzaGVkJywgZmFsc2UpLmZpbHRlclByb3BlcnR5KCdoYW5kbGVyJywgaGFuZGxlcilcclxuXHRcdGN1cnJlbnRBcHByb3ZlID0gaWYgY3VycmVudEFwcHJvdmVzLmxlbmd0aCA+IDAgdGhlbiBjdXJyZW50QXBwcm92ZXNbMF0gZWxzZSBudWxsXHJcblxyXG5cdCPkvKDpmIXnmoRhcHByb3Zl6L+U5Zue5pyA5paw5LiA5p2hXHJcblx0aWYgIWN1cnJlbnRBcHByb3ZlIG9yIGN1cnJlbnRBcHByb3ZlLnR5cGUgPT0gJ2NjJ1xyXG5cdFx0IyDlvZPliY3mmK/kvKDpmIVcclxuXHRcdF8uZWFjaCBpbnN0YW5jZS50cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGEpIC0+XHJcblx0XHRcdFx0aWYgYS50eXBlID09ICdjYycgYW5kIGEudXNlciA9PSBoYW5kbGVyIGFuZCBhLmlzX2ZpbmlzaGVkID09IGZhbHNlXHJcblx0XHRcdFx0XHRjdXJyZW50QXBwcm92ZSA9IGFcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdGlmICFjdXJyZW50QXBwcm92ZVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdHJldHVybiBjdXJyZW50QXBwcm92ZVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRUcmFjZSA9IChpbnN0YW5jZSwgdHJhY2VJZCktPlxyXG5cdHJldHVybiBpbnN0YW5jZS50cmFjZXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZUlkKVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZSA9IChpbnN0YW5jZUlkLCB1c2VySWQpLT5cclxuXHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9KVxyXG5cclxuXHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblxyXG5cdG15X2FwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoaW5zdGFuY2UsIHVzZXJJZClcclxuXHJcblx0aWYgbXlfYXBwcm92ZVxyXG5cclxuI1x0XHRsYW5nID0gU3RlZWRvcy5sb2NhbGUodGhhdC51c2VySWQsIHRydWUpXHJcblxyXG5cdFx0dHJhY2UgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFRyYWNlKGluc3RhbmNlLCBteV9hcHByb3ZlLnRyYWNlKVxyXG5cclxuXHRcdHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHRyYWNlLnN0ZXApXHJcblxyXG5cdFx0bmV4dFN0ZXBzID0gdXVmbG93TWFuYWdlci5nZXROZXh0U3RlcHMoaW5zdGFuY2UsIGZsb3csIHN0ZXAsIFwiXCIpXHJcblxyXG5cdFx0aWYgbmV4dFN0ZXBzLmxlbmd0aCA9PSAxXHJcblx0XHRcdG5leHRfdXNlcl9pZHMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMoaW5zdGFuY2UuX2lkICwgbmV4dFN0ZXBzWzBdKVxyXG5cdFx0XHRpZiBuZXh0X3VzZXJfaWRzLmxlbmd0aCA9PSAxXHJcblx0XHRcdFx0bXlfYXBwcm92ZS5uZXh0X3N0ZXBzID0gW3tzdGVwOiBuZXh0U3RlcHNbMF0sIHVzZXJzOiBuZXh0X3VzZXJfaWRzfV1cclxuXHRcdFx0XHRyZXR1cm4gbXlfYXBwcm92ZVxyXG4jXHRcdFx0ZWxzZVxyXG4jXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBUQVBpMThuLl9fKCd3b3JrZmxvd19lcnJvcl9tdWx0aXBsZV9uZXh0X3N0ZXBfdXNlcnMnLCB7aW5zbmFtZTogaW5zdGFuY2UubmFtZX0sIGxhbmcpKVxyXG4jXHRcdGVsc2VcclxuI1x0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFRBUGkxOG4uX18oJ3dvcmtmbG93X2Vycm9yX211bHRpcGxlX25leHRfc3RlcCcsIHtpbnNuYW1lOiBpbnN0YW5jZS5uYW1lfSwgbGFuZykpXHJcblxyXG5cdHJldHVyblxyXG5cclxuXHJcbkluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyA9IChzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgaW5ib3hfdXNlciktPlxyXG5cdF9iYXRjaF9pbnN0YW5jZXMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2UsIGluYm94X3VzZXJzOiBpbmJveF91c2VyfVxyXG5cclxuXHRGSUVMRFMgPSB7bmFtZTogMSwgYXBwbGljYW50X25hbWU6IDEsIHN1Ym1pdF9kYXRlOiAxLCBmbG93X3ZlcnNpb246IDEsIFwidHJhY2VzLnN0ZXBcIjogMSwgZmxvdzogMX1cclxuXHJcblx0aWYgY2F0ZWdvcnlJZFxyXG5cclxuXHRcdGlmIGNhdGVnb3J5SWQgPT0gJy0xJ1xyXG5cdFx0XHR1bkNhdGVnb3J5Rmxvd3MgPSBmbG93TWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGbG93cyhzcGFjZSwge19pZDogMX0pLmZldGNoKCkuZ2V0UHJvcGVydHkoXCJfaWRcIilcclxuXHRcdFx0cXVlcnkuZmxvdyA9IHskaW46IHVuQ2F0ZWdvcnlGbG93c31cclxuXHRcdGVsc2VcclxuXHRcdFx0Y2F0ZWdvcnlGbG93cyA9IGZsb3dNYW5hZ2VyLmdldENhdGVnb3JpZXNGbG93cyhzcGFjZSwgY2F0ZWdvcnlJZCwge19pZDogMX0pLmZldGNoKCkuZ2V0UHJvcGVydHkoXCJfaWRcIilcclxuXHRcdFx0cXVlcnkuZmxvdyA9IHskaW46IGNhdGVnb3J5Rmxvd3N9XHJcblxyXG5cdGlmIGZsb3dJZHNcclxuXHRcdHF1ZXJ5LmZsb3cgPSB7JGluOiBmbG93SWRzfVxyXG5cclxuI1x0Y29uc29sZS5sb2coXCJxdWVyeVwiLCBKU09OLnN0cmluZ2lmeShxdWVyeSkpXHJcblxyXG5cdGluYm94X2luc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7ZmllbGRzOiBGSUVMRFMsIHNraXA6IDAsIGxpbWl0OiAxMDB9KVxyXG5cclxuXHRpbmJveF9pbnN0YW5jZXMuZm9yRWFjaCAoaW5zKS0+XHJcblx0XHRjdXJyZW50U3RlcElkID0gXy5sYXN0KGlucy50cmFjZXMpLnN0ZXAgI1RPRE8g5q2k5Luj56CB5LiN6YCC55So5Lyg6ZiF5om55aSE55CGXHJcblxyXG5cdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogaW5zLmZsb3d9KVxyXG5cclxuXHRcdGN1cnJlbnRTdGVwID0gc3RlcE1hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIGN1cnJlbnRTdGVwSWQpXHJcblxyXG5cdFx0aWYgc3RlcE1hbmFnZXIuYWxsb3dCYXRjaChjdXJyZW50U3RlcCkgJiYgSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZShpbnMuX2lkLCBpbmJveF91c2VyKVxyXG5cclxuXHRcdFx0ZGVsZXRlIGlucy5mbG93X3ZlcnNpb25cclxuXHJcblx0XHRcdGRlbGV0ZSBpbnMudHJhY2VzXHJcblxyXG5cdFx0XHRkZWxldGUgaW5zLmZsb3dcclxuXHJcblx0XHRcdF9iYXRjaF9pbnN0YW5jZXMucHVzaChpbnMpXHJcbiNcdFx0ZWxzZVxyXG4jXHRcdFx0Y29uc29sZS5sb2coXCLmibnph4/lrqHmibkt5byC5bi45pWw5o2uXCIsIGlucy5faWQpXHJcblxyXG5cdHJldHVybiBfYmF0Y2hfaW5zdGFuY2VzXHJcbiIsInZhciBfZXZhbCwgbG9nZ2VyOyAgICAgICAgICAgICAgICAgXG5cbl9ldmFsID0gcmVxdWlyZSgnZXZhbCcpO1xuXG5JbnN0YW5jZU1hbmFnZXIgPSB7fTtcblxubG9nZ2VyID0gbmV3IExvZ2dlcignV29ya2Zsb3cgLT4gSW5zdGFuY2VNYW5hZ2VyJyk7XG5cbkluc3RhbmNlTWFuYWdlci5oYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwID0gZnVuY3Rpb24oaW5zLCBmaWVsZF9tYXApIHtcbiAgdmFyIGNvbnRleHQsIGUsIGZsb3csIHJlcywgc2NyaXB0O1xuICByZXMgPSBpbnM7XG4gIGlmIChpbnMpIHtcbiAgICBpZiAoIWZpZWxkX21hcCkge1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGlucy5mbG93XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGZpZWxkX21hcDogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChmbG93ICE9IG51bGwgPyBmbG93LmZpZWxkX21hcCA6IHZvaWQgMCkge1xuICAgICAgICBmaWVsZF9tYXAgPSBmbG93LmZpZWxkX21hcDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZpZWxkX21hcCkge1xuICAgICAgY29udGV4dCA9IF8uY2xvbmUoaW5zKTtcbiAgICAgIGNvbnRleHQuXyA9IF87XG4gICAgICBzY3JpcHQgPSBcInZhciBpbnN0YW5jZXMgPSBcIiArIGZpZWxkX21hcCArIFwiOyBleHBvcnRzLmluc3RhbmNlcyA9IGluc3RhbmNlc1wiO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzID0gX2V2YWwoc2NyaXB0LCBcImhhbmRsZXJJbnN0YW5jZUJ5RmllbGRNYXBcIiwgY29udGV4dCwgZmFsc2UpLmluc3RhbmNlcztcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgcmVzID0ge1xuICAgICAgICAgIF9lcnJvcjogZVxuICAgICAgICB9O1xuICAgICAgICBsb2dnZXIuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5JbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUgPSBmdW5jdGlvbihpbnN0YW5jZSwgaGFuZGxlcikge1xuICB2YXIgY3VycmVudEFwcHJvdmUsIGN1cnJlbnRBcHByb3ZlcywgY3VycmVudFRyYWNlcztcbiAgaWYgKCFpbnN0YW5jZSB8fCAhaW5zdGFuY2UudHJhY2VzIHx8IGluc3RhbmNlLnRyYWNlcy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN1cnJlbnRUcmFjZXMgPSBpbnN0YW5jZS50cmFjZXMuZmlsdGVyUHJvcGVydHkoJ2lzX2ZpbmlzaGVkJywgZmFsc2UpO1xuICBpZiAoY3VycmVudFRyYWNlcy5sZW5ndGgpIHtcbiAgICBjdXJyZW50QXBwcm92ZXMgPSBjdXJyZW50VHJhY2VzWzBdLmFwcHJvdmVzLmZpbHRlclByb3BlcnR5KCdpc19maW5pc2hlZCcsIGZhbHNlKS5maWx0ZXJQcm9wZXJ0eSgnaGFuZGxlcicsIGhhbmRsZXIpO1xuICAgIGN1cnJlbnRBcHByb3ZlID0gY3VycmVudEFwcHJvdmVzLmxlbmd0aCA+IDAgPyBjdXJyZW50QXBwcm92ZXNbMF0gOiBudWxsO1xuICB9XG4gIGlmICghY3VycmVudEFwcHJvdmUgfHwgY3VycmVudEFwcHJvdmUudHlwZSA9PT0gJ2NjJykge1xuICAgIF8uZWFjaChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgIGlmIChhLnR5cGUgPT09ICdjYycgJiYgYS51c2VyID09PSBoYW5kbGVyICYmIGEuaXNfZmluaXNoZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgY3VycmVudEFwcHJvdmUgPSBhO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBpZiAoIWN1cnJlbnRBcHByb3ZlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBjdXJyZW50QXBwcm92ZTtcbn07XG5cbkluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50VHJhY2UgPSBmdW5jdGlvbihpbnN0YW5jZSwgdHJhY2VJZCkge1xuICByZXR1cm4gaW5zdGFuY2UudHJhY2VzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgdHJhY2VJZCk7XG59O1xuXG5JbnN0YW5jZU1hbmFnZXIuZ2V0TXlBcHByb3ZlID0gZnVuY3Rpb24oaW5zdGFuY2VJZCwgdXNlcklkKSB7XG4gIHZhciBmbG93LCBpbnN0YW5jZSwgbXlfYXBwcm92ZSwgbmV4dFN0ZXBzLCBuZXh0X3VzZXJfaWRzLCBzdGVwLCB0cmFjZTtcbiAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgX2lkOiBpbnN0YW5jZUlkXG4gIH0pO1xuICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICBteV9hcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKGluc3RhbmNlLCB1c2VySWQpO1xuICBpZiAobXlfYXBwcm92ZSkge1xuICAgIHRyYWNlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRUcmFjZShpbnN0YW5jZSwgbXlfYXBwcm92ZS50cmFjZSk7XG4gICAgc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgdHJhY2Uuc3RlcCk7XG4gICAgbmV4dFN0ZXBzID0gdXVmbG93TWFuYWdlci5nZXROZXh0U3RlcHMoaW5zdGFuY2UsIGZsb3csIHN0ZXAsIFwiXCIpO1xuICAgIGlmIChuZXh0U3RlcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBuZXh0X3VzZXJfaWRzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzKGluc3RhbmNlLl9pZCwgbmV4dFN0ZXBzWzBdKTtcbiAgICAgIGlmIChuZXh0X3VzZXJfaWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBteV9hcHByb3ZlLm5leHRfc3RlcHMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RlcDogbmV4dFN0ZXBzWzBdLFxuICAgICAgICAgICAgdXNlcnM6IG5leHRfdXNlcl9pZHNcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBteV9hcHByb3ZlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzID0gZnVuY3Rpb24oc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMsIGluYm94X3VzZXIpIHtcbiAgdmFyIEZJRUxEUywgX2JhdGNoX2luc3RhbmNlcywgY2F0ZWdvcnlGbG93cywgaW5ib3hfaW5zdGFuY2VzLCBxdWVyeSwgdW5DYXRlZ29yeUZsb3dzO1xuICBfYmF0Y2hfaW5zdGFuY2VzID0gbmV3IEFycmF5KCk7XG4gIHF1ZXJ5ID0ge1xuICAgIHNwYWNlOiBzcGFjZSxcbiAgICBpbmJveF91c2VyczogaW5ib3hfdXNlclxuICB9O1xuICBGSUVMRFMgPSB7XG4gICAgbmFtZTogMSxcbiAgICBhcHBsaWNhbnRfbmFtZTogMSxcbiAgICBzdWJtaXRfZGF0ZTogMSxcbiAgICBmbG93X3ZlcnNpb246IDEsXG4gICAgXCJ0cmFjZXMuc3RlcFwiOiAxLFxuICAgIGZsb3c6IDFcbiAgfTtcbiAgaWYgKGNhdGVnb3J5SWQpIHtcbiAgICBpZiAoY2F0ZWdvcnlJZCA9PT0gJy0xJykge1xuICAgICAgdW5DYXRlZ29yeUZsb3dzID0gZmxvd01hbmFnZXIuZ2V0VW5DYXRlZ29yaWVzRmxvd3Moc3BhY2UsIHtcbiAgICAgICAgX2lkOiAxXG4gICAgICB9KS5mZXRjaCgpLmdldFByb3BlcnR5KFwiX2lkXCIpO1xuICAgICAgcXVlcnkuZmxvdyA9IHtcbiAgICAgICAgJGluOiB1bkNhdGVnb3J5Rmxvd3NcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhdGVnb3J5Rmxvd3MgPSBmbG93TWFuYWdlci5nZXRDYXRlZ29yaWVzRmxvd3Moc3BhY2UsIGNhdGVnb3J5SWQsIHtcbiAgICAgICAgX2lkOiAxXG4gICAgICB9KS5mZXRjaCgpLmdldFByb3BlcnR5KFwiX2lkXCIpO1xuICAgICAgcXVlcnkuZmxvdyA9IHtcbiAgICAgICAgJGluOiBjYXRlZ29yeUZsb3dzXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBpZiAoZmxvd0lkcykge1xuICAgIHF1ZXJ5LmZsb3cgPSB7XG4gICAgICAkaW46IGZsb3dJZHNcbiAgICB9O1xuICB9XG4gIGluYm94X2luc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XG4gICAgZmllbGRzOiBGSUVMRFMsXG4gICAgc2tpcDogMCxcbiAgICBsaW1pdDogMTAwXG4gIH0pO1xuICBpbmJveF9pbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihpbnMpIHtcbiAgICB2YXIgY3VycmVudFN0ZXAsIGN1cnJlbnRTdGVwSWQsIGZsb3c7XG4gICAgY3VycmVudFN0ZXBJZCA9IF8ubGFzdChpbnMudHJhY2VzKS5zdGVwO1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zLmZsb3dcbiAgICB9KTtcbiAgICBjdXJyZW50U3RlcCA9IHN0ZXBNYW5hZ2VyLmdldFN0ZXAoaW5zLCBmbG93LCBjdXJyZW50U3RlcElkKTtcbiAgICBpZiAoc3RlcE1hbmFnZXIuYWxsb3dCYXRjaChjdXJyZW50U3RlcCkgJiYgSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZShpbnMuX2lkLCBpbmJveF91c2VyKSkge1xuICAgICAgZGVsZXRlIGlucy5mbG93X3ZlcnNpb247XG4gICAgICBkZWxldGUgaW5zLnRyYWNlcztcbiAgICAgIGRlbGV0ZSBpbnMuZmxvdztcbiAgICAgIHJldHVybiBfYmF0Y2hfaW5zdGFuY2VzLnB1c2goaW5zKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gX2JhdGNoX2luc3RhbmNlcztcbn07XG4iLCJNZXRlb3IucHVibGlzaCAnY2F0ZWdvcmllcycsIChzcGFjZUlkKSAtPlxyXG5cdGNoZWNrIHNwYWNlSWQsIFN0cmluZ1xyXG5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblxyXG5cdHJldHVybiBkYi5jYXRlZ29yaWVzLmZpbmQoeyBzcGFjZTogc3BhY2VJZCB9LCB7IGZpZWxkczogeyBuYW1lOiAxLCBzcGFjZTogMSwgc29ydF9ubzogMSwgYXBwOiAxIH0gfSkiLCJNZXRlb3IucHVibGlzaCgnY2F0ZWdvcmllcycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgY2hlY2soc3BhY2VJZCwgU3RyaW5nKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuY2F0ZWdvcmllcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgc3BhY2U6IDEsXG4gICAgICBzb3J0X25vOiAxLFxuICAgICAgYXBwOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiXHJcbk1ldGVvci5wdWJsaXNoICdjZnNfaW5zdGFuY2VzJywgKGluc3RhbmNlSWRzKS0+XHJcblx0Y2hlY2soaW5zdGFuY2VJZHMsIEFycmF5KVxyXG5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGluc3RhbmNlSWRzXHJcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0cmV0dXJuIGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogeyRpbjogaW5zdGFuY2VJZHN9ICwgJG9yOiBbeydtZXRhZGF0YS5pc19wcml2YXRlJzogeyRuZTogdHJ1ZX19LHsnbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHRydWUsIFwibWV0YWRhdGEub3duZXJcIjogdGhpcy51c2VySWR9XX0pXHJcbiIsIk1ldGVvci5wdWJsaXNoKCdjZnNfaW5zdGFuY2VzJywgZnVuY3Rpb24oaW5zdGFuY2VJZHMpIHtcbiAgY2hlY2soaW5zdGFuY2VJZHMsIEFycmF5KTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZUlkcykge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGNmcy5pbnN0YW5jZXMuZmluZCh7XG4gICAgJ21ldGFkYXRhLmluc3RhbmNlJzoge1xuICAgICAgJGluOiBpbnN0YW5jZUlkc1xuICAgIH0sXG4gICAgJG9yOiBbXG4gICAgICB7XG4gICAgICAgICdtZXRhZGF0YS5pc19wcml2YXRlJzoge1xuICAgICAgICAgICRuZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgICdtZXRhZGF0YS5pc19wcml2YXRlJzogdHJ1ZSxcbiAgICAgICAgXCJtZXRhZGF0YS5vd25lclwiOiB0aGlzLnVzZXJJZFxuICAgICAgfVxuICAgIF1cbiAgfSk7XG59KTtcbiIsIlxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dfcG9zaXRpb25zJywgKHNwYWNlSWQpLT5cclxuXHRcclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHRcclxuXHR1bmxlc3Mgc3BhY2VJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRyZXR1cm4gZGIuZmxvd19wb3NpdGlvbnMuZmluZCh7c3BhY2U6IHNwYWNlSWR9LCB7ZmllbGRzOiB7cm9sZToxLCB1c2VyczogMSwgb3JnOiAxfX0pO1xyXG4iLCJNZXRlb3IucHVibGlzaCgnZmxvd19wb3NpdGlvbnMnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHJvbGU6IDEsXG4gICAgICB1c2VyczogMSxcbiAgICAgIG9yZzogMVxuICAgIH1cbiAgfSk7XG59KTtcbiIsIk1ldGVvci5wdWJsaXNoQ29tcG9zaXRlICdmbG93X3Bvc2l0aW9uc190YWJ1bGFyJywgKHRhYmxlTmFtZSwgaWRzLCBmaWVsZHMpLT5cclxuXHRjaGVjayh0YWJsZU5hbWUsIFN0cmluZyk7XHJcblx0Y2hlY2soaWRzLCBBcnJheSk7XHJcblx0Y2hlY2soZmllbGRzLCBNYXRjaC5PcHRpb25hbChPYmplY3QpKTtcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHRoaXMudW5ibG9jaygpXHJcblxyXG5cdGZpbmQ6IC0+XHJcblx0XHR0aGlzLnVuYmxvY2soKVxyXG5cdFx0ZGIuZmxvd19wb3NpdGlvbnMuZmluZCB7X2lkOiB7JGluOiBpZHN9fSwgZmllbGRzOiBmaWVsZHNcclxuXHJcblx0Y2hpbGRyZW46IFtcclxuXHRcdHtcclxuXHRcdFx0ZmluZDogKHBvc2l0aW9uKSAtPlxyXG5cdFx0XHRcdEB1bmJsb2NrKClcclxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgZmxvd19yb2xlc1xyXG5cdFx0XHRcdGRiLmZsb3dfcm9sZXMuZmluZCB7IF9pZDogcG9zaXRpb24ucm9sZSB9LCBmaWVsZHM6IG5hbWU6IDFcclxuXHRcdH1cclxuXHRcdHtcclxuXHRcdFx0ZmluZDogKHBvc2l0aW9uKSAtPlxyXG5cdFx0XHRcdEB1bmJsb2NrKClcclxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgb3JnYW5pemF0aW9uc1xyXG5cdFx0XHRcdGRiLm9yZ2FuaXphdGlvbnMuZmluZCB7IF9pZDogcG9zaXRpb24ub3JnIH0sIGZpZWxkczogZnVsbG5hbWU6IDFcclxuXHRcdH1cclxuXHRcdHtcclxuXHRcdFx0ZmluZDogKHBvc2l0aW9uKSAtPlxyXG5cdFx0XHRcdEB1bmJsb2NrKClcclxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgdXNlclxyXG5cdFx0XHRcdGRiLnNwYWNlX3VzZXJzLmZpbmQge1xyXG5cdFx0XHRcdFx0c3BhY2U6IHBvc2l0aW9uLnNwYWNlXHJcblx0XHRcdFx0XHR1c2VyOiAkaW46IHBvc2l0aW9uLnVzZXJzXHJcblx0XHRcdFx0fSwgZmllbGRzOlxyXG5cdFx0XHRcdFx0c3BhY2U6IDFcclxuXHRcdFx0XHRcdHVzZXI6IDFcclxuXHRcdFx0XHRcdG5hbWU6IDFcclxuXHRcdH1cclxuXHRdIiwiTWV0ZW9yLnB1Ymxpc2hDb21wb3NpdGUoJ2Zsb3dfcG9zaXRpb25zX3RhYnVsYXInLCBmdW5jdGlvbih0YWJsZU5hbWUsIGlkcywgZmllbGRzKSB7XG4gIGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcbiAgY2hlY2soaWRzLCBBcnJheSk7XG4gIGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHRoaXMudW5ibG9jaygpO1xuICByZXR1cm4ge1xuICAgIGZpbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICByZXR1cm4gZGIuZmxvd19wb3NpdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogaWRzXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgICAgICByZXR1cm4gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICAgIF9pZDogcG9zaXRpb24ucm9sZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgICAgICByZXR1cm4gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICAgICAgICAgIF9pZDogcG9zaXRpb24ub3JnXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIGZ1bGxuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgICAgICByZXR1cm4gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgICAgICBzcGFjZTogcG9zaXRpb24uc3BhY2UsXG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgICRpbjogcG9zaXRpb24udXNlcnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgICAgIHVzZXI6IDEsXG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn0pO1xuIiwiXHJcblxyXG5cdE1ldGVvci5wdWJsaXNoICdmbG93X3JvbGVzJywgKHNwYWNlSWQpLT5cclxuXHRcdFxyXG5cdFx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHRcdFxyXG5cdFx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHJcblx0XHRyZXR1cm4gZGIuZmxvd19yb2xlcy5maW5kKHtzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtuYW1lOjF9fSk7XHJcbiIsIk1ldGVvci5wdWJsaXNoKCdmbG93X3JvbGVzJywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93X3JvbGVzLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDFcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAnZmxvd3MnLCAoc3BhY2VJZCktPlxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3Mgc3BhY2VJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHQjIOesrOS4gOasoeiuoumYheaXtuWIneWni+WMluW3peS9nOWMulxyXG5cdGlmIGRiLmZsb3dzLmZpbmQoe3NwYWNlOiBzcGFjZUlkfSkuY291bnQoKSA9PSAwXHJcblx0XHRkYi5zcGFjZXMuY3JlYXRlVGVtcGxhdGVGb3JtQW5kRmxvdyhzcGFjZUlkKVxyXG5cclxuXHRyZXR1cm4gZGIuZmxvd3MuZmluZCh7c3BhY2U6IHNwYWNlSWR9LCB7XHJcblx0XHRmaWVsZHM6IHtcclxuXHRcdFx0bmFtZTogMSxcclxuXHRcdFx0Zm9ybTogMSxcclxuXHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdHBlcm1zOiAxLFxyXG5cdFx0XHRzcGFjZTogMSxcclxuXHRcdFx0Y29tcGFueV9pZDogMSxcclxuXHRcdFx0c29ydF9ubzogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dfdmVyc2lvbicsIChzcGFjZUlkLCBmbG93SWQsIHZlcnNpb25JZCkgLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3MgdmVyc2lvbklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cclxuXHRzZWxmID0gdGhpcztcclxuXHJcblx0Z2V0Rmxvd1ZlcnNpb24gPSAoaWQgLCB2ZXJzaW9uSWQpLT5cclxuXHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQgOiBpZH0pO1xyXG5cdFx0aWYgZmxvd1xyXG5cdFx0XHRmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnRcclxuXHRcdFx0Zmxvd192ZXJzaW9uLmxhdGVzdCA9IHRydWVcclxuXHJcblx0XHRcdGlmIGZsb3dfdmVyc2lvbi5faWQgIT0gdmVyc2lvbklkXHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZClcclxuXHRcdFx0XHRmbG93X3ZlcnNpb24ubGF0ZXN0ID0gZmFsc2VcclxuXHJcblx0XHRcdHJldHVybiBmbG93X3ZlcnNpb25cclxuXHRoYW5kbGUgPSBkYi5mbG93cy5maW5kKHtfaWQ6IGZsb3dJZH0sIHtmaWVsZHM6IHtfaWQ6IDEsIFwiY3VycmVudC5tb2RpZmllZFwiOiAxfX0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oaWQsIHZlcnNpb25JZCkpO1xyXG5cdH1cclxuXHJcblxyXG5cdHNlbGYuYWRkZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oZmxvd0lkLCB2ZXJzaW9uSWQpKTtcclxuXHRzZWxmLnJlYWR5KCk7XHJcblx0c2VsZi5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKVxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ2Rpc3RyaWJ1dGVfb3B0aW9uYWxfZmxvd3MnLCAoZmxvd19pZHMpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dfaWRzXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHJldHVybiBkYi5mbG93cy5maW5kKHtfaWQ6IHskaW46IGZsb3dfaWRzfX0sIHtcclxuXHRcdGZpZWxkczoge1xyXG5cdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRmb3JtOiAxLFxyXG5cdFx0XHRzdGF0ZTogMSxcclxuXHRcdFx0cGVybXM6IDEsXHJcblx0XHRcdHNwYWNlOiAxLFxyXG5cdFx0XHRkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxyXG5cdFx0XHRkaXN0cmlidXRlX3RvX3NlbGY6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcclxuXHRcdFx0Y29tcGFueV9pZDogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5NZXRlb3IucHVibGlzaCAnZmxvdycsIChzcGFjZUlkLCBmbG93SWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHJcblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe19pZDogZmxvd0lkLCBzcGFjZTogc3BhY2VJZH0sIHtcclxuXHRcdGZpZWxkczoge1xyXG5cdFx0XHRwcmludF90ZW1wbGF0ZTogMSxcclxuXHRcdFx0aW5zdGFuY2VfdGVtcGxhdGU6IDEsXHJcblx0XHRcdGV2ZW50czogMSxcclxuXHRcdFx0ZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcclxuXHRcdFx0ZGlzdHJpYnV0ZV90b19zZWxmOiAxLFxyXG5cdFx0XHR1cGxvYWRfYWZ0ZXJfYmVpbmdfZGlzdHJpYnV0ZWQ6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcclxuXHRcdFx0Y29tcGFueV9pZDogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5NZXRlb3IucHVibGlzaENvbXBvc2l0ZSAnZmxvd3NfdGFidWxhcicsICh0YWJsZU5hbWUsIGlkcywgZmllbGRzKS0+XHJcblx0Y2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xyXG5cdGNoZWNrKGlkcywgQXJyYXkpO1xyXG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR0aGlzLnVuYmxvY2soKVxyXG5cclxuXHRmaW5kOiAtPlxyXG5cdFx0dGhpcy51bmJsb2NrKClcclxuXHRcdGRiLmZsb3dzLmZpbmQge19pZDogeyRpbjogaWRzfX0sIGZpZWxkczogZmllbGRzXHJcblxyXG5cdGNoaWxkcmVuOiBbXHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChmbG93KSAtPlxyXG5cdFx0XHRcdEB1bmJsb2NrKClcclxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgdXNlclxyXG5cdFx0XHRcdGRiLnNwYWNlX3VzZXJzLmZpbmQge1xyXG5cdFx0XHRcdFx0c3BhY2U6IGZsb3cuc3BhY2UsXHJcblx0XHRcdFx0XHR1c2VyOiBmbG93LmN1cnJlbnQubW9kaWZpZWRfYnlcclxuXHRcdFx0XHR9LCBmaWVsZHM6XHJcblx0XHRcdFx0XHRzcGFjZTogMVxyXG5cdFx0XHRcdFx0dXNlcjogMVxyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0ZmluZDogKGZsb3cpIC0+XHJcblx0XHRcdFx0QHVuYmxvY2soKVxyXG5cdFx0XHRcdCMgUHVibGlzaCB0aGUgcmVsYXRlZCB1c2VyXHJcblx0XHRcdFx0ZGIuZm9ybXMuZmluZCB7XHJcblx0XHRcdFx0XHRzcGFjZTogZmxvdy5zcGFjZSxcclxuXHRcdFx0XHRcdF9pZDogZmxvdy5mb3JtXHJcblx0XHRcdFx0fSwgZmllbGRzOlxyXG5cdFx0XHRcdFx0c3BhY2U6IDFcclxuXHRcdFx0XHRcdF9pZDogMVxyXG5cdFx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRcdGNhdGVnb3J5OiAxXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRmaW5kOiAoZmxvdykgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIHVzZXJcclxuXHRcdFx0XHRkYi5jYXRlZ29yaWVzLmZpbmQge1xyXG5cdFx0XHRcdFx0c3BhY2U6IGZsb3cuc3BhY2VcclxuXHRcdFx0XHR9LCBmaWVsZHM6XHJcblx0XHRcdFx0XHRzcGFjZTogMVxyXG5cdFx0XHRcdFx0X2lkOiAxXHJcblx0XHRcdFx0XHRuYW1lOiAxXHJcblx0XHR9XHJcblx0XSIsIk1ldGVvci5wdWJsaXNoKCdmbG93cycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoZGIuZmxvd3MuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgIGRiLnNwYWNlcy5jcmVhdGVUZW1wbGF0ZUZvcm1BbmRGbG93KHNwYWNlSWQpO1xuICB9XG4gIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgZm9ybTogMSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgcGVybXM6IDEsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIGNvbXBhbnlfaWQ6IDEsXG4gICAgICBzb3J0X25vOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaCgnZmxvd192ZXJzaW9uJywgZnVuY3Rpb24oc3BhY2VJZCwgZmxvd0lkLCB2ZXJzaW9uSWQpIHtcbiAgdmFyIGdldEZsb3dWZXJzaW9uLCBoYW5kbGUsIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFmbG93SWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghdmVyc2lvbklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgZ2V0Rmxvd1ZlcnNpb24gPSBmdW5jdGlvbihpZCwgdmVyc2lvbklkKSB7XG4gICAgdmFyIGZsb3csIGZsb3dfdmVyc2lvbjtcbiAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICBfaWQ6IGlkXG4gICAgfSk7XG4gICAgaWYgKGZsb3cpIHtcbiAgICAgIGZsb3dfdmVyc2lvbiA9IGZsb3cuY3VycmVudDtcbiAgICAgIGZsb3dfdmVyc2lvbi5sYXRlc3QgPSB0cnVlO1xuICAgICAgaWYgKGZsb3dfdmVyc2lvbi5faWQgIT09IHZlcnNpb25JZCkge1xuICAgICAgICBmbG93X3ZlcnNpb24gPSBmbG93Lmhpc3RvcnlzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgdmVyc2lvbklkKTtcbiAgICAgICAgZmxvd192ZXJzaW9uLmxhdGVzdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZsb3dfdmVyc2lvbjtcbiAgICB9XG4gIH07XG4gIGhhbmRsZSA9IGRiLmZsb3dzLmZpbmQoe1xuICAgIF9pZDogZmxvd0lkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMSxcbiAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiAxXG4gICAgfVxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBzZWxmLmNoYW5nZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oaWQsIHZlcnNpb25JZCkpO1xuICAgIH1cbiAgfSk7XG4gIHNlbGYuYWRkZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oZmxvd0lkLCB2ZXJzaW9uSWQpKTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG5cbk1ldGVvci5wdWJsaXNoKCdkaXN0cmlidXRlX29wdGlvbmFsX2Zsb3dzJywgZnVuY3Rpb24oZmxvd19pZHMpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFmbG93X2lkcykge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGRiLmZsb3dzLmZpbmQoe1xuICAgIF9pZDoge1xuICAgICAgJGluOiBmbG93X2lkc1xuICAgIH1cbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogMSxcbiAgICAgIGZvcm06IDEsXG4gICAgICBzdGF0ZTogMSxcbiAgICAgIHBlcm1zOiAxLFxuICAgICAgc3BhY2U6IDEsXG4gICAgICBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxuICAgICAgZGlzdHJpYnV0ZV90b19zZWxmOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9lbmRfbm90aWZpY2F0aW9uOiAxLFxuICAgICAgY29tcGFueV9pZDogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Zsb3cnLCBmdW5jdGlvbihzcGFjZUlkLCBmbG93SWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWZsb3dJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGRiLmZsb3dzLmZpbmQoe1xuICAgIF9pZDogZmxvd0lkLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHByaW50X3RlbXBsYXRlOiAxLFxuICAgICAgaW5zdGFuY2VfdGVtcGxhdGU6IDEsXG4gICAgICBldmVudHM6IDEsXG4gICAgICBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxuICAgICAgZGlzdHJpYnV0ZV90b19zZWxmOiAxLFxuICAgICAgdXBsb2FkX2FmdGVyX2JlaW5nX2Rpc3RyaWJ1dGVkOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9lbmRfbm90aWZpY2F0aW9uOiAxLFxuICAgICAgY29tcGFueV9pZDogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2hDb21wb3NpdGUoJ2Zsb3dzX3RhYnVsYXInLCBmdW5jdGlvbih0YWJsZU5hbWUsIGlkcywgZmllbGRzKSB7XG4gIGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcbiAgY2hlY2soaWRzLCBBcnJheSk7XG4gIGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHRoaXMudW5ibG9jaygpO1xuICByZXR1cm4ge1xuICAgIGZpbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICByZXR1cm4gZGIuZmxvd3MuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogaWRzXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgZmluZDogZnVuY3Rpb24oZmxvdykge1xuICAgICAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgICAgIHJldHVybiBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgICAgIHNwYWNlOiBmbG93LnNwYWNlLFxuICAgICAgICAgICAgdXNlcjogZmxvdy5jdXJyZW50Lm1vZGlmaWVkX2J5XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgICAgICB1c2VyOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmluZDogZnVuY3Rpb24oZmxvdykge1xuICAgICAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgICAgIHJldHVybiBkYi5mb3Jtcy5maW5kKHtcbiAgICAgICAgICAgIHNwYWNlOiBmbG93LnNwYWNlLFxuICAgICAgICAgICAgX2lkOiBmbG93LmZvcm1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgICAgIF9pZDogMSxcbiAgICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgICAgY2F0ZWdvcnk6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaW5kOiBmdW5jdGlvbihmbG93KSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLmNhdGVnb3JpZXMuZmluZCh7XG4gICAgICAgICAgICBzcGFjZTogZmxvdy5zcGFjZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICAgICAgX2lkOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59KTtcbiIsIk1ldGVvci5wdWJsaXNoICdmb3JtcycsIChzcGFjZUlkKS0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBzcGFjZUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cclxuXHRyZXR1cm4gZGIuZm9ybXMuZmluZCh7c3BhY2U6IHNwYWNlSWR9LCB7ZmllbGRzOiB7bmFtZTogMSwgY2F0ZWdvcnk6IDEsIHN0YXRlOiAxLCBkZXNjcmlwdGlvbjogMSwgaW5zdGFuY2Vfc3R5bGU6IDF9fSlcclxuXHJcblxyXG5NZXRlb3IucHVibGlzaCAnZm9ybV92ZXJzaW9uJywgKHNwYWNlSWQsIGZvcm1JZCwgdmVyc2lvbklkKSAtPlxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3Mgc3BhY2VJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3MgZm9ybUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyB2ZXJzaW9uSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblxyXG5cdHNlbGYgPSB0aGlzO1xyXG5cclxuXHRnZXRGb3JtVmVyc2lvbiA9IChpZCAsIHZlcnNpb25JZCktPlxyXG5cdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe19pZCA6IGlkfSk7XHJcblx0XHRpZiAhZm9ybVxyXG5cdFx0XHRyZXR1cm4ge31cclxuXHRcdGZvcm1fdmVyc2lvbiA9IGZvcm0uY3VycmVudFxyXG5cdFx0Zm9ybV92ZXJzaW9uLmxhdGVzdCA9IHRydWVcclxuXHRcdGlmIGZvcm1fdmVyc2lvbi5faWQgIT0gdmVyc2lvbklkXHJcblx0XHRcdGZvcm1fdmVyc2lvbiA9IGZvcm0uaGlzdG9yeXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB2ZXJzaW9uSWQpXHJcblx0XHRcdGZvcm1fdmVyc2lvbi5sYXRlc3QgPSBmYWxzZVxyXG5cdFx0cmV0dXJuIGZvcm1fdmVyc2lvblxyXG5cclxuXHRoYW5kbGUgPSBkYi5mb3Jtcy5maW5kKHtfaWQ6IGZvcm1JZH0sIHtmaWVsZHM6IHtfaWQ6IDEsIFwiY3VycmVudC5tb2RpZmllZFwiOiAxfX0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJmb3JtX3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rm9ybVZlcnNpb24oaWQsIHZlcnNpb25JZCkpO1xyXG5cdH1cclxuXHJcblx0c2VsZi5hZGRlZChcImZvcm1fdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGb3JtVmVyc2lvbihmb3JtSWQsIHZlcnNpb25JZCkpO1xyXG5cdHNlbGYucmVhZHkoKTtcclxuXHRzZWxmLm9uU3RvcCAoKS0+XHJcblx0XHRoYW5kbGUuc3RvcCgpIiwiTWV0ZW9yLnB1Ymxpc2goJ2Zvcm1zJywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mb3Jtcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgY2F0ZWdvcnk6IDEsXG4gICAgICBzdGF0ZTogMSxcbiAgICAgIGRlc2NyaXB0aW9uOiAxLFxuICAgICAgaW5zdGFuY2Vfc3R5bGU6IDFcbiAgICB9XG4gIH0pO1xufSk7XG5cbk1ldGVvci5wdWJsaXNoKCdmb3JtX3ZlcnNpb24nLCBmdW5jdGlvbihzcGFjZUlkLCBmb3JtSWQsIHZlcnNpb25JZCkge1xuICB2YXIgZ2V0Rm9ybVZlcnNpb24sIGhhbmRsZSwgc2VsZjtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWZvcm1JZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCF2ZXJzaW9uSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHNlbGYgPSB0aGlzO1xuICBnZXRGb3JtVmVyc2lvbiA9IGZ1bmN0aW9uKGlkLCB2ZXJzaW9uSWQpIHtcbiAgICB2YXIgZm9ybSwgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgIF9pZDogaWRcbiAgICB9KTtcbiAgICBpZiAoIWZvcm0pIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgZm9ybV92ZXJzaW9uID0gZm9ybS5jdXJyZW50O1xuICAgIGZvcm1fdmVyc2lvbi5sYXRlc3QgPSB0cnVlO1xuICAgIGlmIChmb3JtX3ZlcnNpb24uX2lkICE9PSB2ZXJzaW9uSWQpIHtcbiAgICAgIGZvcm1fdmVyc2lvbiA9IGZvcm0uaGlzdG9yeXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB2ZXJzaW9uSWQpO1xuICAgICAgZm9ybV92ZXJzaW9uLmxhdGVzdCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybV92ZXJzaW9uO1xuICB9O1xuICBoYW5kbGUgPSBkYi5mb3Jtcy5maW5kKHtcbiAgICBfaWQ6IGZvcm1JZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDEsXG4gICAgICBcImN1cnJlbnQubW9kaWZpZWRcIjogMVxuICAgIH1cbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiZm9ybV92ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZvcm1WZXJzaW9uKGlkLCB2ZXJzaW9uSWQpKTtcbiAgICB9XG4gIH0pO1xuICBzZWxmLmFkZGVkKFwiZm9ybV92ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZvcm1WZXJzaW9uKGZvcm1JZCwgdmVyc2lvbklkKSk7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2luc3RhbmNlX2RhdGEnLCAoaW5zdGFuY2VJZCwgYm94KS0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBpbnN0YW5jZUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHNlbGYgPSB0aGlzO1xyXG5cclxuXHRtaW5pQXBwcm92ZUZpZWxkcyA9IFsnX2lkJywgJ2lzX2ZpbmlzaGVkJywgJ3VzZXInLCAnaGFuZGxlcicsICdoYW5kbGVyX25hbWUnLCAndHlwZScsICdzdGFydF9kYXRlJywgJ2Rlc2NyaXB0aW9uJyxcclxuXHRcdCdpc19yZWFkJywgJ2p1ZGdlJywgJ2ZpbmlzaF9kYXRlJywgJ2Zyb21fdXNlcl9uYW1lJywgJ2Zyb21fdXNlcicsICdjY19kZXNjcmlwdGlvbicsICdhdXRvX3N1Ym1pdHRlZCddXHJcblxyXG5cdHRyaWdnZXJDaGFuZ2VGaWVsZHMgPSBbJ2Zvcm1fdmVyc2lvbicsICdmbG93X3ZlcnNpb24nLCAncmVsYXRlZF9pbnN0YW5jZXMnLCAnX215X2FwcHJvdmVfcmVhZF9kYXRlcyddXHJcblxyXG5cdHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXMgPSB7fVxyXG5cclxuXHRpbnN0YW5jZV9maWVsZHNfMCA9IHtcclxuXHRcdFwicmVjb3JkX3N5bmNlZFwiOiAwLFxyXG5cclxuI1x0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25cIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmNvc3RfdGltZVwiOiAwLFxyXG4jXHRcdFwidHJhY2VzLmFwcHJvdmVzLnJlYWRfZGF0ZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaXNfZXJyb3JcIjogMCxcclxuXHRcdCMgXCJ0cmFjZXMuYXBwcm92ZXMudXNlcl9uYW1lXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5kZWFkbGluZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMucmVtaW5kX2RhdGVcIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLnJlbWluZGVkX2NvdW50XCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5tb2RpZmllZF9ieVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMubW9kaWZpZWRcIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmdlb2xvY2F0aW9uXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5jY191c2Vyc1wiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV9hcHByb3ZlX2lkXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy52YWx1ZXNfaGlzdG9yeVwiOiAwXHJcblx0fVxyXG5cclxuXHRnZXRNeWFwcHJvdmVNb2RpZmllZCA9ICh0cmFjZXMpLT5cclxuXHRcdG15QXBwcm92ZU1vZGlmaWVkcyA9IG5ldyBBcnJheSgpXHJcblxyXG5cdFx0dHJhY2VzPy5mb3JFYWNoICh0cmFjZSktPlxyXG5cdFx0XHR0cmFjZT8uYXBwcm92ZXM/LmZvckVhY2ggKGFwcHJvdmUpLT5cclxuXHRcdFx0XHRpZiAoYXBwcm92ZS51c2VyID09IHNlbGYudXNlcklkIHx8IGFwcHJvdmUuaGFuZGxlciA9PSBzZWxmLnVzZXJJZClcclxuXHRcdFx0XHQjICYmICFhcHByb3ZlLmlzX2ZpbmlzaGVkXHJcbiNcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJhcHByb3ZlXCIsIGFwcHJvdmUuX2lkLCBhcHByb3ZlLnJlYWRfZGF0ZSlcclxuXHJcblx0XHRcdFx0XHRteUFwcHJvdmVNb2RpZmllZHMucHVzaChhcHByb3ZlLnJlYWRfZGF0ZSlcclxuXHJcblx0XHRyZXR1cm4gbXlBcHByb3ZlTW9kaWZpZWRzXHJcblxyXG5cclxuXHRnZXRNaW5pSW5zdGFuY2UgPSAoX2luc3RhbmNlSWQpLT5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogX2luc3RhbmNlSWR9LCB7ZmllbGRzOiBpbnN0YW5jZV9maWVsZHNfMH0pXHJcblxyXG5cdFx0aWYgaW5zdGFuY2VcclxuXHJcblx0XHRcdHRyaWdnZXJDaGFuZ2VGaWVsZHMuZm9yRWFjaCAoa2V5KS0+XHJcblx0XHRcdFx0aWYga2V5ID09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJ1xyXG5cdFx0XHRcdFx0dHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldID0gZ2V0TXlhcHByb3ZlTW9kaWZpZWQoaW5zdGFuY2UudHJhY2VzKVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSA9IGluc3RhbmNlW2tleV1cclxuXHJcbiNcdFx0XHRoYXNPcGluaW9uRmllbGQgPSBJbnN0YW5jZVNpZ25UZXh0LmluY2x1ZGVzT3BpbmlvbkZpZWxkKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcclxuXHJcblx0XHRcdHNob3dfbW9kYWxfdHJhY2VzX2xpc3QgPSBkYi5zcGFjZV9zZXR0aW5ncy5maW5kT25lKHsgc3BhY2U6IGluc3RhbmNlLnNwYWNlLCBrZXk6IFwic2hvd19tb2RhbF90cmFjZXNfbGlzdFwiIH0sIHsgZmllbGRzOiB7IHZhbHVlczogMSB9IH0pPy52YWx1ZXMgfHwgZmFsc2VcclxuXHJcblx0XHRcdGlmIHNob3dfbW9kYWxfdHJhY2VzX2xpc3RcclxuXHJcblx0XHRcdFx0dHJhY2VzID0gbmV3IEFycmF5KCk7XHJcblxyXG5cdFx0XHRcdGluc3RhbmNlPy50cmFjZXM/LmZvckVhY2ggKHRyYWNlKS0+XHJcblx0XHRcdFx0XHRfdHJhY2UgPSBfLmNsb25lKHRyYWNlKVxyXG5cclxuXHRcdFx0XHRcdGFwcHJvdmVzID0gbmV3IEFycmF5KClcclxuXHJcblx0XHRcdFx0XHR0cmFjZT8uYXBwcm92ZXM/LmZvckVhY2ggKGFwcHJvdmUpLT5cclxuXHRcdFx0XHRcdFx0aWYgYXBwcm92ZS50eXBlICE9ICdjYycgfHwgYXBwcm92ZS51c2VyID09IHNlbGYudXNlcklkIHx8IGFwcHJvdmUuaGFuZGxlciA9PSBzZWxmLnVzZXJJZCB8fCAoIV8uaXNFbXB0eShhcHByb3ZlLnNpZ25fZmllbGRfY29kZSkpXHJcblx0XHRcdFx0XHRcdFx0YXBwcm92ZXMucHVzaChhcHByb3ZlKVxyXG5cclxuXHRcdFx0XHRcdF90cmFjZS5hcHByb3ZlcyA9IGFwcHJvdmVzXHJcblxyXG5cdFx0XHRcdFx0dHJhY2VzLnB1c2goX3RyYWNlKVxyXG5cclxuXHRcdFx0XHRpbnN0YW5jZS50cmFjZXMgPSB0cmFjZXM7XHJcblxyXG5cdFx0cmV0dXJuIGluc3RhbmNlXHJcblxyXG5cclxuXHRuZWVkQ2hhbmdlID0gKGNoYW5nZUZpZWxkcyktPlxyXG5cdFx0aWYgY2hhbmdlRmllbGRzXHJcblxyXG5cdFx0XHRfY2hhbmdlID0gZmFsc2VcclxuXHJcblx0XHRcdF9yZXYgPSBfLmZpbmQgdHJpZ2dlckNoYW5nZUZpZWxkcywgKGtleSktPlxyXG5cdFx0XHRcdF9rZXkgPSBrZXlcclxuXHJcblx0XHRcdFx0aWYga2V5ID09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJ1xyXG5cdFx0XHRcdFx0X2tleSA9ICd0cmFjZXMnXHJcblxyXG5cdFx0XHRcdGlmIF8uaGFzKGNoYW5nZUZpZWxkcywgX2tleSlcclxuXHJcblx0XHRcdFx0XHRpZiBrZXkgPT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnXHJcblxyXG5cdFx0XHRcdFx0XHRfbXlfYXBwcm92ZV9tb2RpZmllZHMgPSBnZXRNeWFwcHJvdmVNb2RpZmllZChjaGFuZ2VGaWVsZHMudHJhY2VzKVxyXG5cclxuI1x0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgX215X2FwcHJvdmVfbW9kaWZpZWRzKVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuICFfLmlzRXF1YWwodHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldLCBfbXlfYXBwcm92ZV9tb2RpZmllZHMpXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHJldHVybiAhXy5pc0VxdWFsKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgY2hhbmdlRmllbGRzW2tleV0pXHJcblxyXG5cdFx0XHRpZiBfcmV2XHJcblx0XHRcdFx0X2NoYW5nZSA9IHRydWVcclxuXHJcbiNcdFx0XHRjb25zb2xlLmxvZyhfcmV2LCBfY2hhbmdlKVxyXG5cclxuXHRcdFx0cmV0dXJuIF9jaGFuZ2VcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cdCPmraTlpITkuI3og73mt7vliqBmaWVsZHPpmZDliLbvvIzlkKbliJnkvJrlr7zoh7TmlbDmja7kuI3lrp7ml7ZcclxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiBpbnN0YW5jZUlkfSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0Y2hhbmdlZDogKGlkLCBmaWVsZHMpLT5cclxuXHRcdFx0aWYoYm94ICE9ICdpbmJveCcgfHwgbmVlZENoYW5nZShmaWVsZHMpKVxyXG5cdFx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgZ2V0TWluaUluc3RhbmNlKGlkKSk7XHJcblx0XHRyZW1vdmVkOiAoaWQpLT5cclxuXHRcdFx0c2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcclxuXHR9XHJcblxyXG5cdGluc3RhbmNlID0gZ2V0TWluaUluc3RhbmNlKGluc3RhbmNlSWQpXHJcblxyXG5cdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaW5zdGFuY2U/Ll9pZCwgaW5zdGFuY2UpO1xyXG5cclxuXHRzZWxmLnJlYWR5KCk7XHJcblxyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKClcclxuXHJcblxyXG5NZXRlb3IucHVibGlzaCAnaW5zdGFuY2VfdHJhY2VzJywgKGluc3RhbmNlSWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGluc3RhbmNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0c2VsZiA9IHRoaXNcclxuXHJcblx0Z2V0SW5zdGFuY2VUcmFjZXMgPSAoX2luc0lkKS0+XHJcblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogX2luc0lkfSwge2ZpZWxkczoge19pZDogMSwgdHJhY2VzOiAxfX0pXHJcblxyXG5cclxuXHRoYW5kbGUgPSAgZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogaW5zdGFuY2VJZH0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZV90cmFjZXNcIiwgaW5zdGFuY2VJZCwgZ2V0SW5zdGFuY2VUcmFjZXMoaW5zdGFuY2VJZCkpO1xyXG5cdH1cclxuXHJcblx0c2VsZi5hZGRlZChcImluc3RhbmNlX3RyYWNlc1wiLCBpbnN0YW5jZUlkLCBnZXRJbnN0YW5jZVRyYWNlcyhpbnN0YW5jZUlkKSk7XHJcblxyXG5cdHNlbGYucmVhZHkoKTtcclxuXHRzZWxmLm9uU3RvcCAoKS0+XHJcblx0XHRoYW5kbGUuc3RvcCgpIiwiTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlX2RhdGEnLCBmdW5jdGlvbihpbnN0YW5jZUlkLCBib3gpIHtcbiAgdmFyIGdldE1pbmlJbnN0YW5jZSwgZ2V0TXlhcHByb3ZlTW9kaWZpZWQsIGhhbmRsZSwgaW5zdGFuY2UsIGluc3RhbmNlX2ZpZWxkc18wLCBtaW5pQXBwcm92ZUZpZWxkcywgbmVlZENoYW5nZSwgc2VsZiwgdHJpZ2dlckNoYW5nZUZpZWxkcywgdHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcztcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgbWluaUFwcHJvdmVGaWVsZHMgPSBbJ19pZCcsICdpc19maW5pc2hlZCcsICd1c2VyJywgJ2hhbmRsZXInLCAnaGFuZGxlcl9uYW1lJywgJ3R5cGUnLCAnc3RhcnRfZGF0ZScsICdkZXNjcmlwdGlvbicsICdpc19yZWFkJywgJ2p1ZGdlJywgJ2ZpbmlzaF9kYXRlJywgJ2Zyb21fdXNlcl9uYW1lJywgJ2Zyb21fdXNlcicsICdjY19kZXNjcmlwdGlvbicsICdhdXRvX3N1Ym1pdHRlZCddO1xuICB0cmlnZ2VyQ2hhbmdlRmllbGRzID0gWydmb3JtX3ZlcnNpb24nLCAnZmxvd192ZXJzaW9uJywgJ3JlbGF0ZWRfaW5zdGFuY2VzJywgJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnXTtcbiAgdHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcyA9IHt9O1xuICBpbnN0YW5jZV9maWVsZHNfMCA9IHtcbiAgICBcInJlY29yZF9zeW5jZWRcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25cIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5jb3N0X3RpbWVcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5pc19lcnJvclwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmRlYWRsaW5lXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMucmVtaW5kX2RhdGVcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5yZW1pbmRlZF9jb3VudFwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLm1vZGlmaWVkX2J5XCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMubW9kaWZpZWRcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5nZW9sb2NhdGlvblwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmNjX3VzZXJzXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV9hcHByb3ZlX2lkXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMudmFsdWVzX2hpc3RvcnlcIjogMFxuICB9O1xuICBnZXRNeWFwcHJvdmVNb2RpZmllZCA9IGZ1bmN0aW9uKHRyYWNlcykge1xuICAgIHZhciBteUFwcHJvdmVNb2RpZmllZHM7XG4gICAgbXlBcHByb3ZlTW9kaWZpZWRzID0gbmV3IEFycmF5KCk7XG4gICAgaWYgKHRyYWNlcyAhPSBudWxsKSB7XG4gICAgICB0cmFjZXMuZm9yRWFjaChmdW5jdGlvbih0cmFjZSkge1xuICAgICAgICB2YXIgcmVmO1xuICAgICAgICByZXR1cm4gdHJhY2UgIT0gbnVsbCA/IChyZWYgPSB0cmFjZS5hcHByb3ZlcykgIT0gbnVsbCA/IHJlZi5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgICAgICBpZiAoYXBwcm92ZS51c2VyID09PSBzZWxmLnVzZXJJZCB8fCBhcHByb3ZlLmhhbmRsZXIgPT09IHNlbGYudXNlcklkKSB7XG4gICAgICAgICAgICByZXR1cm4gbXlBcHByb3ZlTW9kaWZpZWRzLnB1c2goYXBwcm92ZS5yZWFkX2RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG15QXBwcm92ZU1vZGlmaWVkcztcbiAgfTtcbiAgZ2V0TWluaUluc3RhbmNlID0gZnVuY3Rpb24oX2luc3RhbmNlSWQpIHtcbiAgICB2YXIgaW5zdGFuY2UsIHJlZiwgcmVmMSwgc2hvd19tb2RhbF90cmFjZXNfbGlzdCwgdHJhY2VzO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBfaW5zdGFuY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczogaW5zdGFuY2VfZmllbGRzXzBcbiAgICB9KTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHRyaWdnZXJDaGFuZ2VGaWVsZHMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnKSB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSA9IGdldE15YXBwcm92ZU1vZGlmaWVkKGluc3RhbmNlLnRyYWNlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSA9IGluc3RhbmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc2hvd19tb2RhbF90cmFjZXNfbGlzdCA9ICgocmVmID0gZGIuc3BhY2Vfc2V0dGluZ3MuZmluZE9uZSh7XG4gICAgICAgIHNwYWNlOiBpbnN0YW5jZS5zcGFjZSxcbiAgICAgICAga2V5OiBcInNob3dfbW9kYWxfdHJhY2VzX2xpc3RcIlxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB2YWx1ZXM6IDFcbiAgICAgICAgfVxuICAgICAgfSkpICE9IG51bGwgPyByZWYudmFsdWVzIDogdm9pZCAwKSB8fCBmYWxzZTtcbiAgICAgIGlmIChzaG93X21vZGFsX3RyYWNlc19saXN0KSB7XG4gICAgICAgIHRyYWNlcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBpZiAoaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgICAgIGlmICgocmVmMSA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVmMS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgICAgICAgIHZhciBfdHJhY2UsIGFwcHJvdmVzLCByZWYyO1xuICAgICAgICAgICAgICBfdHJhY2UgPSBfLmNsb25lKHRyYWNlKTtcbiAgICAgICAgICAgICAgYXBwcm92ZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgICAgaWYgKHRyYWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHJlZjIgPSB0cmFjZS5hcHByb3ZlcykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcmVmMi5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFwcHJvdmUudHlwZSAhPT0gJ2NjJyB8fCBhcHByb3ZlLnVzZXIgPT09IHNlbGYudXNlcklkIHx8IGFwcHJvdmUuaGFuZGxlciA9PT0gc2VsZi51c2VySWQgfHwgKCFfLmlzRW1wdHkoYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcHByb3Zlcy5wdXNoKGFwcHJvdmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3RyYWNlLmFwcHJvdmVzID0gYXBwcm92ZXM7XG4gICAgICAgICAgICAgIHJldHVybiB0cmFjZXMucHVzaChfdHJhY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLnRyYWNlcyA9IHRyYWNlcztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuICBuZWVkQ2hhbmdlID0gZnVuY3Rpb24oY2hhbmdlRmllbGRzKSB7XG4gICAgdmFyIF9jaGFuZ2UsIF9yZXY7XG4gICAgaWYgKGNoYW5nZUZpZWxkcykge1xuICAgICAgX2NoYW5nZSA9IGZhbHNlO1xuICAgICAgX3JldiA9IF8uZmluZCh0cmlnZ2VyQ2hhbmdlRmllbGRzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIF9rZXksIF9teV9hcHByb3ZlX21vZGlmaWVkcztcbiAgICAgICAgX2tleSA9IGtleTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnKSB7XG4gICAgICAgICAgX2tleSA9ICd0cmFjZXMnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLmhhcyhjaGFuZ2VGaWVsZHMsIF9rZXkpKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnKSB7XG4gICAgICAgICAgICBfbXlfYXBwcm92ZV9tb2RpZmllZHMgPSBnZXRNeWFwcHJvdmVNb2RpZmllZChjaGFuZ2VGaWVsZHMudHJhY2VzKTtcbiAgICAgICAgICAgIHJldHVybiAhXy5pc0VxdWFsKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgX215X2FwcHJvdmVfbW9kaWZpZWRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICFfLmlzRXF1YWwodHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldLCBjaGFuZ2VGaWVsZHNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChfcmV2KSB7XG4gICAgICAgIF9jaGFuZ2UgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jaGFuZ2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICBoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgX2lkOiBpbnN0YW5jZUlkXG4gIH0pLm9ic2VydmVDaGFuZ2VzKHtcbiAgICBjaGFuZ2VkOiBmdW5jdGlvbihpZCwgZmllbGRzKSB7XG4gICAgICBpZiAoYm94ICE9PSAnaW5ib3gnIHx8IG5lZWRDaGFuZ2UoZmllbGRzKSkge1xuICAgICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBnZXRNaW5pSW5zdGFuY2UoaWQpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcbiAgICB9XG4gIH0pO1xuICBpbnN0YW5jZSA9IGdldE1pbmlJbnN0YW5jZShpbnN0YW5jZUlkKTtcbiAgc2VsZi5hZGRlZChcImluc3RhbmNlc1wiLCBpbnN0YW5jZSAhPSBudWxsID8gaW5zdGFuY2UuX2lkIDogdm9pZCAwLCBpbnN0YW5jZSk7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaCgnaW5zdGFuY2VfdHJhY2VzJywgZnVuY3Rpb24oaW5zdGFuY2VJZCkge1xuICB2YXIgZ2V0SW5zdGFuY2VUcmFjZXMsIGhhbmRsZSwgc2VsZjtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgZ2V0SW5zdGFuY2VUcmFjZXMgPSBmdW5jdGlvbihfaW5zSWQpIHtcbiAgICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBfaW5zSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgX2lkOiAxLFxuICAgICAgICB0cmFjZXM6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIF9pZDogaW5zdGFuY2VJZFxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZV90cmFjZXNcIiwgaW5zdGFuY2VJZCwgZ2V0SW5zdGFuY2VUcmFjZXMoaW5zdGFuY2VJZCkpO1xuICAgIH1cbiAgfSk7XG4gIHNlbGYuYWRkZWQoXCJpbnN0YW5jZV90cmFjZXNcIiwgaW5zdGFuY2VJZCwgZ2V0SW5zdGFuY2VUcmFjZXMoaW5zdGFuY2VJZCkpO1xuICBzZWxmLnJlYWR5KCk7XG4gIHJldHVybiBzZWxmLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcbiIsIlxyXG5cdE1ldGVvci5wdWJsaXNoICdpbnN0YW5jZXNfbGlzdCcsIChzcGFjZUlkLCBib3gsIGZsb3dJZCktPlxyXG5cclxuXHRcdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblx0XHRcclxuXHRcdHVubGVzcyBzcGFjZUlkXHJcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0XHRxdWVyeSA9IHtzcGFjZTogc3BhY2VJZH1cclxuXHRcdGlmIGJveCA9PSBcImluYm94XCJcclxuXHRcdFx0cXVlcnkuaW5ib3hfdXNlcnMgPSB0aGlzLnVzZXJJZDtcclxuXHRcdGVsc2UgaWYgYm94ID09IFwib3V0Ym94XCJcclxuXHRcdFx0cXVlcnkub3V0Ym94X3VzZXJzID0gdGhpcy51c2VySWQ7XHJcblx0XHRlbHNlIGlmIGJveCA9PSBcImRyYWZ0XCJcclxuXHRcdFx0cXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHF1ZXJ5LnN0YXRlID0gXCJkcmFmdFwiXHJcblx0XHRlbHNlIGlmIGJveCA9PSBcInBlbmRpbmdcIlxyXG5cdFx0XHRxdWVyeS5zdWJtaXR0ZXIgPSB0aGlzLnVzZXJJZDtcclxuXHRcdFx0cXVlcnkuc3RhdGUgPSBcInBlbmRpbmdcIlxyXG5cdFx0ZWxzZSBpZiBib3ggPT0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0XHRxdWVyeS5zdWJtaXR0ZXIgPSB0aGlzLnVzZXJJZDtcclxuXHRcdFx0cXVlcnkuc3RhdGUgPSBcImNvbXBsZXRlZFwiXHJcblx0XHRlbHNlIGlmIGJveCA9PSBcIm1vbml0b3JcIlxyXG5cdFx0XHRxdWVyeS5mbG93ID0gZmxvd0lkO1xyXG5cdFx0XHRxdWVyeS5zdGF0ZSA9IHskaW46IFtcInBlbmRpbmdcIixcImNvbXBsZXRlZFwiXX07XHJcblx0XHRlbHNlXHJcblx0XHRcdHF1ZXJ5LnN0YXRlID0gXCJub25lXCJcclxuXHJcblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtmaWVsZHM6IHtuYW1lOjEsIGNyZWF0ZWQ6MSwgZm9ybToxLCBmbG93OiAxLCBzcGFjZToxLCBtb2RpZmllZDoxLCBhcHBsaWNhbnQ6IDEsIGlzX2FyY2hpdmVkOjEsIGZvcm1fdmVyc2lvbjogMSwgZmxvd192ZXJzaW9uOiAxfX0pXHJcblxyXG4iLCJNZXRlb3IucHVibGlzaCgnaW5zdGFuY2VzX2xpc3QnLCBmdW5jdGlvbihzcGFjZUlkLCBib3gsIGZsb3dJZCkge1xuICB2YXIgcXVlcnk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcXVlcnkgPSB7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfTtcbiAgaWYgKGJveCA9PT0gXCJpbmJveFwiKSB7XG4gICAgcXVlcnkuaW5ib3hfdXNlcnMgPSB0aGlzLnVzZXJJZDtcbiAgfSBlbHNlIGlmIChib3ggPT09IFwib3V0Ym94XCIpIHtcbiAgICBxdWVyeS5vdXRib3hfdXNlcnMgPSB0aGlzLnVzZXJJZDtcbiAgfSBlbHNlIGlmIChib3ggPT09IFwiZHJhZnRcIikge1xuICAgIHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xuICAgIHF1ZXJ5LnN0YXRlID0gXCJkcmFmdFwiO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICBxdWVyeS5zdWJtaXR0ZXIgPSB0aGlzLnVzZXJJZDtcbiAgICBxdWVyeS5zdGF0ZSA9IFwicGVuZGluZ1wiO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJjb21wbGV0ZWRcIikge1xuICAgIHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xuICAgIHF1ZXJ5LnN0YXRlID0gXCJjb21wbGV0ZWRcIjtcbiAgfSBlbHNlIGlmIChib3ggPT09IFwibW9uaXRvclwiKSB7XG4gICAgcXVlcnkuZmxvdyA9IGZsb3dJZDtcbiAgICBxdWVyeS5zdGF0ZSA9IHtcbiAgICAgICRpbjogW1wicGVuZGluZ1wiLCBcImNvbXBsZXRlZFwiXVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcXVlcnkuc3RhdGUgPSBcIm5vbmVcIjtcbiAgfVxuICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDEsXG4gICAgICBjcmVhdGVkOiAxLFxuICAgICAgZm9ybTogMSxcbiAgICAgIGZsb3c6IDEsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIG1vZGlmaWVkOiAxLFxuICAgICAgYXBwbGljYW50OiAxLFxuICAgICAgaXNfYXJjaGl2ZWQ6IDEsXG4gICAgICBmb3JtX3ZlcnNpb246IDEsXG4gICAgICBmbG93X3ZlcnNpb246IDFcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlID0gKGluc3RhbmNlaWQsIHVzZXJJZCwgZGF0YU1hcCwgY2FsbGJhY2spLT5cclxuXHRvcGVyYXRpb24gPSBbe1xyXG5cdFx0XCIkbWF0Y2hcIjoge1xyXG5cdFx0XHRcIl9pZFwiOiBpbnN0YW5jZWlkXHJcblx0XHR9XHJcblx0fSwge1wiJHByb2plY3RcIjoge1wibmFtZVwiOiAxLCBcIl9hcHByb3ZlXCI6IFwiJHRyYWNlcy5hcHByb3Zlc1wifX0sIHtcIiR1bndpbmRcIjogXCIkX2FwcHJvdmVcIn0sIHtcIiR1bndpbmRcIjogXCIkX2FwcHJvdmVcIn0sXHJcblx0XHR7XCIkbWF0Y2hcIjoge1wiX2FwcHJvdmUuaXNfZmluaXNoZWRcIjogdHJ1ZSwgJG9yOlt7XCJfYXBwcm92ZS5oYW5kbGVyXCI6IHVzZXJJZH0se1wiX2FwcHJvdmUudXNlclwiOiB1c2VySWR9XX19LFxyXG5cdFx0e1wiJGdyb3VwXCI6IHtcIl9pZFwiOiBcIiRfaWRcIiwgXCJmaW5pc2hfZGF0ZVwiOiB7XCIkbGFzdFwiOiBcIiRfYXBwcm92ZS5maW5pc2hfZGF0ZVwifX19XHJcblx0XVxyXG5cclxuXHRkYi5pbnN0YW5jZXMucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShvcGVyYXRpb24pLnRvQXJyYXkgKGVyciwgZGF0YSktPlxyXG5cdFx0aWYgZXJyXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpXHJcblxyXG5cdFx0ZGF0YS5mb3JFYWNoIChkb2MpIC0+XHJcblx0XHRcdGRhdGFNYXAucHVzaCBkb2NcclxuXHJcblx0XHRpZiBjYWxsYmFjayAmJiBfLmlzRnVuY3Rpb24oY2FsbGJhY2spXHJcblx0XHRcdGNhbGxiYWNrKClcclxuXHRcdHJldHVyblxyXG5cclxuYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlID0gTWV0ZW9yLndyYXBBc3luYyhsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlKVxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggXCJpbnN0YW5jZV90YWJ1bGFyXCIsICh0YWJsZU5hbWUsIGlkcywgZmllbGRzKS0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcclxuXHJcblx0Y2hlY2soaWRzLCBBcnJheSk7XHJcblxyXG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSlcclxuXHJcblx0ZmllbGRzLmNjX3VzZXJzID0gMVxyXG5cclxuXHRzZWxmID0gdGhpcztcclxuXHJcblx0Z2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlID0gKHVzZXJJZCwgaW5zdGFuY2VJZCktPlxyXG5cdFx0ZGF0YSA9IFtdXHJcblx0XHRhc3luY0xhc3RGaW5pc2hlZEFwcHJvdmUoaW5zdGFuY2VJZCwgdXNlcklkLCBkYXRhKVxyXG5cdFx0aWYgZGF0YS5sZW5ndGggPiAwXHJcblx0XHRcdHJldHVybiBkYXRhWzBdXHJcblxyXG5cclxuXHRnZXRNeUFwcHJvdmUgPSAodXNlcklkLCBpbnN0YW5jZUlkKS0+XHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9LCB7ZmllbGRzOiB7dHJhY2VzOiAxfX0pXHJcblx0XHRteUFwcHJvdmUgPSBudWxsXHJcblxyXG5cdFx0aWYgIWluc3RhbmNlXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGlmICFpbnN0YW5jZS50cmFjZXMgfHwgaW5zdGFuY2UudHJhY2VzLmxlbmd0aCA8IDFcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0bm90RmluaXNoZWRUcmFjZXMgPSBpbnN0YW5jZS50cmFjZXMuZmlsdGVyUHJvcGVydHkoXCJpc19maW5pc2hlZFwiLCBmYWxzZSlcclxuXHJcblx0XHRpZiBub3RGaW5pc2hlZFRyYWNlcy5sZW5ndGggPiAwXHJcblx0XHRcdGFwcHJvdmVzID0gbm90RmluaXNoZWRUcmFjZXNbMF0uYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoXCJpc19maW5pc2hlZFwiLCBmYWxzZSkuZmlsdGVyUHJvcGVydHkoXCJoYW5kbGVyXCIsIHVzZXJJZCk7XHJcblxyXG5cdFx0XHRpZiBhcHByb3Zlcy5sZW5ndGggPiAwXHJcblx0XHRcdFx0YXBwcm92ZSA9IGFwcHJvdmVzWzBdXHJcblx0XHRcdFx0bXlBcHByb3ZlID0ge1xyXG5cdFx0XHRcdFx0aWQ6IGFwcHJvdmUuX2lkLFxyXG5cdFx0XHRcdFx0aW5zdGFuY2U6IGFwcHJvdmUuaW5zdGFuY2UsXHJcblx0XHRcdFx0XHR0cmFjZTogYXBwcm92ZS50cmFjZSxcclxuXHRcdFx0XHRcdGlzX3JlYWQ6IGFwcHJvdmUuaXNfcmVhZCxcclxuXHRcdFx0XHRcdHN0YXJ0X2RhdGU6IGFwcHJvdmUuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0YWdlbnQ6IGFwcHJvdmUuYWdlbnRcclxuXHRcdFx0XHRcdHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWVcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0aWYgIW15QXBwcm92ZVxyXG5cdFx0XHRpc19yZWFkID0gZmFsc2VcclxuXHRcdFx0aW5zdGFuY2UudHJhY2VzLmZvckVhY2ggKHRyYWNlKSAtPlxyXG5cdFx0XHRcdHRyYWNlPy5hcHByb3Zlcz8uZm9yRWFjaCAoYXBwcm92ZSkgLT5cclxuXHRcdFx0XHRcdGlmIGFwcHJvdmUudHlwZSA9PSAnY2MnIGFuZCBhcHByb3ZlLnVzZXIgPT0gdXNlcklkIGFuZCBhcHByb3ZlLmlzX2ZpbmlzaGVkID09IGZhbHNlXHJcblx0XHRcdFx0XHRcdGlmIGFwcHJvdmUuaXNfcmVhZFxyXG5cdFx0XHRcdFx0XHRcdGlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdG15QXBwcm92ZSA9IHtpZDogYXBwcm92ZS5faWQsIGlzX3JlYWQ6IGlzX3JlYWQsIHN0YXJ0X2RhdGU6IGFwcHJvdmUuc3RhcnRfZGF0ZSwgYWdlbnQ6IGFwcHJvdmUuYWdlbnQsIHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWV9XHJcblxyXG5cdFx0cmV0dXJuIG15QXBwcm92ZVxyXG5cclxuXHRnZXRTdGVwQ3VycmVudE5hbWUgPSAoaW5zdGFuY2VJZCkgLT5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VJZH0sIHtmaWVsZHM6IHtcInRyYWNlcy5uYW1lXCI6IDEsIFwidHJhY2VzXCI6IHskc2xpY2U6IC0xfX19KVxyXG5cdFx0aWYgaW5zdGFuY2VcclxuXHRcdFx0c3RlcEN1cnJlbnROYW1lID0gaW5zdGFuY2UudHJhY2VzP1swXT8ubmFtZVxyXG5cclxuXHRcdHJldHVybiBzdGVwQ3VycmVudE5hbWVcclxuXHJcblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogaWRzfX0sIHtmaWVsZHM6IHt0cmFjZXM6IDB9fSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0Y2hhbmdlZDogKGlkKS0+XHJcblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxyXG5cdFx0XHRyZXR1cm4gaWYgbm90IGluc3RhbmNlXHJcblx0XHRcdG15QXBwcm92ZSA9IGdldE15QXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpXHJcblx0XHRcdG15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpXHJcblx0XHRcdGlmIG15QXBwcm92ZVxyXG5cdFx0XHRcdGluc3RhbmNlLmlzX3JlYWQgPSBteUFwcHJvdmUuaXNfcmVhZFxyXG5cdFx0XHRcdGluc3RhbmNlLnN0YXJ0X2RhdGUgPSBteUFwcHJvdmUuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdGlmIG15QXBwcm92ZS5hZ2VudFxyXG5cdFx0XHRcdFx0aW5zdGFuY2UuYWdlbnRfdXNlcl9uYW1lID0gbXlBcHByb3ZlLnVzZXJfbmFtZVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IHRydWVcclxuXHJcblx0XHRcdGlmIG15TGFzdEZpbmlzaGVkQXBwcm92ZVxyXG5cdFx0XHRcdGluc3RhbmNlLm15X2ZpbmlzaF9kYXRlID0gbXlMYXN0RmluaXNoZWRBcHByb3ZlLmZpbmlzaF9kYXRlXHJcblxyXG5cdFx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2VcclxuXHRcdFx0aW5zdGFuY2UuY2NfY291bnQgPSBpbnN0YW5jZS5jY191c2Vycz8ubGVuZ3RoIHx8IDBcclxuXHRcdFx0ZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzXHJcblx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xyXG5cdFx0cmVtb3ZlZDogKGlkKS0+XHJcblx0XHRcdHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XHJcblx0fVxyXG5cclxuXHRpZHMuZm9yRWFjaCAoaWQpLT5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxyXG5cdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0bXlBcHByb3ZlID0gZ2V0TXlBcHByb3ZlKHNlbGYudXNlcklkLCBpZClcclxuXHRcdG15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpXHJcblx0XHRpZiBteUFwcHJvdmVcclxuXHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IG15QXBwcm92ZS5pc19yZWFkXHJcblx0XHRcdGluc3RhbmNlLnN0YXJ0X2RhdGUgPSBteUFwcHJvdmUuc3RhcnRfZGF0ZVxyXG5cdFx0XHRpZiBteUFwcHJvdmUuYWdlbnRcclxuXHRcdFx0XHRcdGluc3RhbmNlLmFnZW50X3VzZXJfbmFtZSA9IG15QXBwcm92ZS51c2VyX25hbWVcclxuXHRcdGVsc2VcclxuXHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IHRydWVcclxuXHJcblx0XHRpZiBteUxhc3RGaW5pc2hlZEFwcHJvdmVcclxuXHRcdFx0aW5zdGFuY2UubXlfZmluaXNoX2RhdGUgPSBteUxhc3RGaW5pc2hlZEFwcHJvdmUuZmluaXNoX2RhdGVcclxuXHJcblx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2VcclxuXHRcdGluc3RhbmNlLmNjX2NvdW50ID0gaW5zdGFuY2UuY2NfdXNlcnM/Lmxlbmd0aCB8fCAwXHJcblx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcclxuXHRcdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcclxuXHJcblx0c2VsZi5yZWFkeSgpO1xyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKCkiLCJ2YXIgYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlLCBsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlO1xuXG5sYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlID0gZnVuY3Rpb24oaW5zdGFuY2VpZCwgdXNlcklkLCBkYXRhTWFwLCBjYWxsYmFjaykge1xuICB2YXIgb3BlcmF0aW9uO1xuICBvcGVyYXRpb24gPSBbXG4gICAge1xuICAgICAgXCIkbWF0Y2hcIjoge1xuICAgICAgICBcIl9pZFwiOiBpbnN0YW5jZWlkXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgXCIkcHJvamVjdFwiOiB7XG4gICAgICAgIFwibmFtZVwiOiAxLFxuICAgICAgICBcIl9hcHByb3ZlXCI6IFwiJHRyYWNlcy5hcHByb3Zlc1wiXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgXCIkdW53aW5kXCI6IFwiJF9hcHByb3ZlXCJcbiAgICB9LCB7XG4gICAgICBcIiR1bndpbmRcIjogXCIkX2FwcHJvdmVcIlxuICAgIH0sIHtcbiAgICAgIFwiJG1hdGNoXCI6IHtcbiAgICAgICAgXCJfYXBwcm92ZS5pc19maW5pc2hlZFwiOiB0cnVlLFxuICAgICAgICAkb3I6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIl9hcHByb3ZlLmhhbmRsZXJcIjogdXNlcklkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJfYXBwcm92ZS51c2VyXCI6IHVzZXJJZFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIFwiJGdyb3VwXCI6IHtcbiAgICAgICAgXCJfaWRcIjogXCIkX2lkXCIsXG4gICAgICAgIFwiZmluaXNoX2RhdGVcIjoge1xuICAgICAgICAgIFwiJGxhc3RcIjogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBdO1xuICByZXR1cm4gZGIuaW5zdGFuY2VzLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUob3BlcmF0aW9uKS50b0FycmF5KGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZG9jKSB7XG4gICAgICByZXR1cm4gZGF0YU1hcC5wdXNoKGRvYyk7XG4gICAgfSk7XG4gICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZSA9IE1ldGVvci53cmFwQXN5bmMobGFzdEZpbmlzaGVkQXBwcm92ZUFnZ3JlZ2F0ZSk7XG5cbk1ldGVvci5wdWJsaXNoKFwiaW5zdGFuY2VfdGFidWxhclwiLCBmdW5jdGlvbih0YWJsZU5hbWUsIGlkcywgZmllbGRzKSB7XG4gIHZhciBnZXRNeUFwcHJvdmUsIGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZSwgZ2V0U3RlcEN1cnJlbnROYW1lLCBoYW5kbGUsIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcbiAgY2hlY2soaWRzLCBBcnJheSk7XG4gIGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XG4gIGZpZWxkcy5jY191c2VycyA9IDE7XG4gIHNlbGYgPSB0aGlzO1xuICBnZXRNeUxhc3RGaW5pc2hlZEFwcHJvdmUgPSBmdW5jdGlvbih1c2VySWQsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgZGF0YTtcbiAgICBkYXRhID0gW107XG4gICAgYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlKGluc3RhbmNlSWQsIHVzZXJJZCwgZGF0YSk7XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGRhdGFbMF07XG4gICAgfVxuICB9O1xuICBnZXRNeUFwcHJvdmUgPSBmdW5jdGlvbih1c2VySWQsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgYXBwcm92ZSwgYXBwcm92ZXMsIGluc3RhbmNlLCBpc19yZWFkLCBteUFwcHJvdmUsIG5vdEZpbmlzaGVkVHJhY2VzO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHRyYWNlczogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIG15QXBwcm92ZSA9IG51bGw7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWluc3RhbmNlLnRyYWNlcyB8fCBpbnN0YW5jZS50cmFjZXMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub3RGaW5pc2hlZFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKTtcbiAgICBpZiAobm90RmluaXNoZWRUcmFjZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXBwcm92ZXMgPSBub3RGaW5pc2hlZFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKS5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgdXNlcklkKTtcbiAgICAgIGlmIChhcHByb3Zlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFwcHJvdmUgPSBhcHByb3Zlc1swXTtcbiAgICAgICAgbXlBcHByb3ZlID0ge1xuICAgICAgICAgIGlkOiBhcHByb3ZlLl9pZCxcbiAgICAgICAgICBpbnN0YW5jZTogYXBwcm92ZS5pbnN0YW5jZSxcbiAgICAgICAgICB0cmFjZTogYXBwcm92ZS50cmFjZSxcbiAgICAgICAgICBpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWQsXG4gICAgICAgICAgc3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlLFxuICAgICAgICAgIGFnZW50OiBhcHByb3ZlLmFnZW50LFxuICAgICAgICAgIHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFteUFwcHJvdmUpIHtcbiAgICAgIGlzX3JlYWQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLnRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgIHZhciByZWY7XG4gICAgICAgIHJldHVybiB0cmFjZSAhPSBudWxsID8gKHJlZiA9IHRyYWNlLmFwcHJvdmVzKSAhPSBudWxsID8gcmVmLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgIGlmIChhcHByb3ZlLnR5cGUgPT09ICdjYycgJiYgYXBwcm92ZS51c2VyID09PSB1c2VySWQgJiYgYXBwcm92ZS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChhcHByb3ZlLmlzX3JlYWQpIHtcbiAgICAgICAgICAgICAgaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbXlBcHByb3ZlID0ge1xuICAgICAgICAgICAgICBpZDogYXBwcm92ZS5faWQsXG4gICAgICAgICAgICAgIGlzX3JlYWQ6IGlzX3JlYWQsXG4gICAgICAgICAgICAgIHN0YXJ0X2RhdGU6IGFwcHJvdmUuc3RhcnRfZGF0ZSxcbiAgICAgICAgICAgICAgYWdlbnQ6IGFwcHJvdmUuYWdlbnQsXG4gICAgICAgICAgICAgIHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbXlBcHByb3ZlO1xuICB9O1xuICBnZXRTdGVwQ3VycmVudE5hbWUgPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHJlZjEsIHN0ZXBDdXJyZW50TmFtZTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy5uYW1lXCI6IDEsXG4gICAgICAgIFwidHJhY2VzXCI6IHtcbiAgICAgICAgICAkc2xpY2U6IC0xXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHN0ZXBDdXJyZW50TmFtZSA9IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyAocmVmMSA9IHJlZlswXSkgIT0gbnVsbCA/IHJlZjEubmFtZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIHN0ZXBDdXJyZW50TmFtZTtcbiAgfTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIF9pZDoge1xuICAgICAgJGluOiBpZHNcbiAgICB9XG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHRyYWNlczogMFxuICAgIH1cbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgaW5zdGFuY2UsIG15QXBwcm92ZSwgbXlMYXN0RmluaXNoZWRBcHByb3ZlLCByZWYsIHJlZjE7XG4gICAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IGZpZWxkc1xuICAgICAgfSk7XG4gICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG15QXBwcm92ZSA9IGdldE15QXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpO1xuICAgICAgbXlMYXN0RmluaXNoZWRBcHByb3ZlID0gZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlKHNlbGYudXNlcklkLCBpZCk7XG4gICAgICBpZiAobXlBcHByb3ZlKSB7XG4gICAgICAgIGluc3RhbmNlLmlzX3JlYWQgPSBteUFwcHJvdmUuaXNfcmVhZDtcbiAgICAgICAgaW5zdGFuY2Uuc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgICBpZiAobXlBcHByb3ZlLmFnZW50KSB7XG4gICAgICAgICAgaW5zdGFuY2UuYWdlbnRfdXNlcl9uYW1lID0gbXlBcHByb3ZlLnVzZXJfbmFtZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2UuaXNfcmVhZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAobXlMYXN0RmluaXNoZWRBcHByb3ZlKSB7XG4gICAgICAgIGluc3RhbmNlLm15X2ZpbmlzaF9kYXRlID0gbXlMYXN0RmluaXNoZWRBcHByb3ZlLmZpbmlzaF9kYXRlO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UuaXNfY2MgPSAoKHJlZiA9IGluc3RhbmNlLmNjX3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKHNlbGYudXNlcklkKSA6IHZvaWQgMCkgfHwgZmFsc2U7XG4gICAgICBpbnN0YW5jZS5jY19jb3VudCA9ICgocmVmMSA9IGluc3RhbmNlLmNjX3VzZXJzKSAhPSBudWxsID8gcmVmMS5sZW5ndGggOiB2b2lkIDApIHx8IDA7XG4gICAgICBkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnM7XG4gICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSk7XG4gICAgfSxcbiAgICByZW1vdmVkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XG4gICAgfVxuICB9KTtcbiAgaWRzLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcbiAgICB2YXIgaW5zdGFuY2UsIG15QXBwcm92ZSwgbXlMYXN0RmluaXNoZWRBcHByb3ZlLCByZWYsIHJlZjE7XG4gICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICB9KTtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG15QXBwcm92ZSA9IGdldE15QXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpO1xuICAgIG15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpO1xuICAgIGlmIChteUFwcHJvdmUpIHtcbiAgICAgIGluc3RhbmNlLmlzX3JlYWQgPSBteUFwcHJvdmUuaXNfcmVhZDtcbiAgICAgIGluc3RhbmNlLnN0YXJ0X2RhdGUgPSBteUFwcHJvdmUuc3RhcnRfZGF0ZTtcbiAgICAgIGlmIChteUFwcHJvdmUuYWdlbnQpIHtcbiAgICAgICAgaW5zdGFuY2UuYWdlbnRfdXNlcl9uYW1lID0gbXlBcHByb3ZlLnVzZXJfbmFtZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UuaXNfcmVhZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChteUxhc3RGaW5pc2hlZEFwcHJvdmUpIHtcbiAgICAgIGluc3RhbmNlLm15X2ZpbmlzaF9kYXRlID0gbXlMYXN0RmluaXNoZWRBcHByb3ZlLmZpbmlzaF9kYXRlO1xuICAgIH1cbiAgICBpbnN0YW5jZS5pc19jYyA9ICgocmVmID0gaW5zdGFuY2UuY2NfdXNlcnMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoc2VsZi51c2VySWQpIDogdm9pZCAwKSB8fCBmYWxzZTtcbiAgICBpbnN0YW5jZS5jY19jb3VudCA9ICgocmVmMSA9IGluc3RhbmNlLmNjX3VzZXJzKSAhPSBudWxsID8gcmVmMS5sZW5ndGggOiB2b2lkIDApIHx8IDA7XG4gICAgZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzO1xuICAgIHJldHVybiBzZWxmLmFkZGVkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSk7XG4gIH0pO1xuICBzZWxmLnJlYWR5KCk7XG4gIHJldHVybiBzZWxmLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcbiIsIk1ldGVvci5wdWJsaXNoICdpbnN0YW5jZXNfZHJhZnQnLCAoc3BhY2VJZCkgLT5cclxuXHRjaGVjayBzcGFjZUlkLCBTdHJpbmdcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVzZXJJZCA9IHRoaXMudXNlcklkXHJcblx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtzdGF0ZTpcImRyYWZ0XCIsc3BhY2U6c3BhY2VJZCxzdWJtaXR0ZXI6dXNlcklkLCRvcjpbe2luYm94X3VzZXJzOiB7JGV4aXN0czpmYWxzZX19LCB7aW5ib3hfdXNlcnM6IFtdfV19LCB7ZmllbGRzOiB7X2lkOiAxLCBzdGF0ZTogMSwgc3BhY2U6IDEsIHN1Ym1pdHRlcjogMSwgaW5ib3hfdXNlcnM6IDEsIG1vZGlmaWVkOiAxLCBuYW1lOiAxfSwgc29ydDp7bW9kaWZpZWQ6IC0xfX0pIiwiTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlc19kcmFmdCcsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgdmFyIHVzZXJJZDtcbiAgY2hlY2soc3BhY2VJZCwgU3RyaW5nKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgdXNlcklkID0gdGhpcy51c2VySWQ7XG4gIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgc3RhdGU6IFwiZHJhZnRcIixcbiAgICBzcGFjZTogc3BhY2VJZCxcbiAgICBzdWJtaXR0ZXI6IHVzZXJJZCxcbiAgICAkb3I6IFtcbiAgICAgIHtcbiAgICAgICAgaW5ib3hfdXNlcnM6IHtcbiAgICAgICAgICAkZXhpc3RzOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGluYm94X3VzZXJzOiBbXVxuICAgICAgfVxuICAgIF1cbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxLFxuICAgICAgc3RhdGU6IDEsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIHN1Ym1pdHRlcjogMSxcbiAgICAgIGluYm94X3VzZXJzOiAxLFxuICAgICAgbW9kaWZpZWQ6IDEsXG4gICAgICBuYW1lOiAxXG4gICAgfSxcbiAgICBzb3J0OiB7XG4gICAgICBtb2RpZmllZDogLTFcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAnZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcycsIChpbnN0YW5jZV9pZHMpLT5cclxuXHRjaGVjayhpbnN0YW5jZV9pZHMsIEFycmF5KVxyXG5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHRcclxuXHR1bmxlc3MgaW5zdGFuY2VfaWRzXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdGlmIF8uaXNFbXB0eShpbnN0YW5jZV9pZHMpXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHNlbGYgPSB0aGlzXHJcblxyXG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW46IGluc3RhbmNlX2lkc319LCB7ZmllbGRzOiB7c3RhdGU6IDEsIHRyYWNlczp7JHNsaWNlOiAxfSB9IH0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGFkZGVkOiAoaWQsIGZpZWxkcyktPlxyXG5cdFx0XHRzZWxmLmFkZGVkKCdpbnN0YW5jZXMnLCBpZCwge3N0YXRlOiBmaWVsZHMuc3RhdGUsIGlzX3JlYWQ6IGZpZWxkcy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uaXNfcmVhZH0pXHJcblxyXG5cdFx0Y2hhbmdlZDogKGlkLCBmaWVsZHMpLT5cclxuXHRcdFx0aWYgZmllbGRzLnN0YXRlXHJcblx0XHRcdFx0c2VsZi5jaGFuZ2VkKCdpbnN0YW5jZXMnLCBpZCwge3N0YXRlOiBmaWVsZHMuc3RhdGV9KVxyXG5cdFx0XHRpZiBmaWVsZHMudHJhY2VzXHJcblx0XHRcdFx0c2VsZi5jaGFuZ2VkKCdpbnN0YW5jZXMnLCBpZCwge2lzX3JlYWQ6IGZpZWxkcy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uaXNfcmVhZH0pXHJcblx0fVxyXG5cclxuXHR0aGlzLnJlYWR5KClcclxuXHR0aGlzLm9uU3RvcCAoKS0+XHJcblx0XHRoYW5kbGUuc3RvcCgpXHJcbiIsIk1ldGVvci5wdWJsaXNoKCdkaXN0cmlidXRlZF9pbnN0YW5jZXNfc3RhdGVfYnlfaWRzJywgZnVuY3Rpb24oaW5zdGFuY2VfaWRzKSB7XG4gIHZhciBoYW5kbGUsIHNlbGY7XG4gIGNoZWNrKGluc3RhbmNlX2lkcywgQXJyYXkpO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWluc3RhbmNlX2lkcykge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKF8uaXNFbXB0eShpbnN0YW5jZV9pZHMpKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIF9pZDoge1xuICAgICAgJGluOiBpbnN0YW5jZV9pZHNcbiAgICB9XG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgdHJhY2VzOiB7XG4gICAgICAgICRzbGljZTogMVxuICAgICAgfVxuICAgIH1cbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGFkZGVkOiBmdW5jdGlvbihpZCwgZmllbGRzKSB7XG4gICAgICByZXR1cm4gc2VsZi5hZGRlZCgnaW5zdGFuY2VzJywgaWQsIHtcbiAgICAgICAgc3RhdGU6IGZpZWxkcy5zdGF0ZSxcbiAgICAgICAgaXNfcmVhZDogZmllbGRzLnRyYWNlc1swXS5hcHByb3Zlc1swXS5pc19yZWFkXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkLCBmaWVsZHMpIHtcbiAgICAgIGlmIChmaWVsZHMuc3RhdGUpIHtcbiAgICAgICAgc2VsZi5jaGFuZ2VkKCdpbnN0YW5jZXMnLCBpZCwge1xuICAgICAgICAgIHN0YXRlOiBmaWVsZHMuc3RhdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoZmllbGRzLnRyYWNlcykge1xuICAgICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKCdpbnN0YW5jZXMnLCBpZCwge1xuICAgICAgICAgIGlzX3JlYWQ6IGZpZWxkcy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uaXNfcmVhZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB0aGlzLnJlYWR5KCk7XG4gIHJldHVybiB0aGlzLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcbiIsIk1ldGVvci5wdWJsaXNoICdyZWxhdGVkX2luc3RhY2VzJywgKGluc3RhbmNlSWQsIHJlbGF0ZWRfaW5zdGFuY2VzKS0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBpbnN0YW5jZUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHJlbGF0ZWRfaW5zdGFuY2VfaWRzID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VJZCx7ZmllbGRzOiB7cmVsYXRlZF9pbnN0YW5jZXM6IDF9fSk/LnJlbGF0ZWRfaW5zdGFuY2VzXHJcblxyXG5cdGlmIHJlbGF0ZWRfaW5zdGFuY2VfaWRzICYmIF8uaXNBcnJheShyZWxhdGVkX2luc3RhbmNlX2lkcylcclxuXHRcdHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiB7JGluIDogcmVsYXRlZF9pbnN0YW5jZV9pZHN9fSwge2ZpZWxkczoge19pZDogMSwgbmFtZTogMSwgc3BhY2U6IDF9fSlcclxuXHRlbHNlXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpIiwiTWV0ZW9yLnB1Ymxpc2goJ3JlbGF0ZWRfaW5zdGFjZXMnLCBmdW5jdGlvbihpbnN0YW5jZUlkLCByZWxhdGVkX2luc3RhbmNlcykge1xuICB2YXIgcmVmLCByZWxhdGVkX2luc3RhbmNlX2lkcztcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZWxhdGVkX2luc3RhbmNlX2lkcyA9IChyZWYgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZUlkLCB7XG4gICAgZmllbGRzOiB7XG4gICAgICByZWxhdGVkX2luc3RhbmNlczogMVxuICAgIH1cbiAgfSkpICE9IG51bGwgPyByZWYucmVsYXRlZF9pbnN0YW5jZXMgOiB2b2lkIDA7XG4gIGlmIChyZWxhdGVkX2luc3RhbmNlX2lkcyAmJiBfLmlzQXJyYXkocmVsYXRlZF9pbnN0YW5jZV9pZHMpKSB7XG4gICAgcmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICAgIF9pZDoge1xuICAgICAgICAkaW46IHJlbGF0ZWRfaW5zdGFuY2VfaWRzXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIF9pZDogMSxcbiAgICAgICAgbmFtZTogMSxcbiAgICAgICAgc3BhY2U6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG59KTtcbiIsImlmIE1ldGVvci5pc1NlcnZlclxyXG4gICAgTWV0ZW9yLnB1Ymxpc2ggJ3NwYWNlX3VzZXJfc2lnbnMnLCAoc3BhY2VJZCkgLT5cclxuICAgICAgICBjaGVjayBzcGFjZUlkLCBTdHJpbmdcclxuXHJcbiAgICAgICAgdW5sZXNzIHRoaXMudXNlcklkXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcbiAgICAgICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJfc2lnbnMuZmluZCh7IHNwYWNlOiBzcGFjZUlkIH0sIHtmaWVsZHM6IHtjcmVhdGVkX2J5OiAwLCBjcmVhdGVkOiAwLCBtb2RpZmllZF9ieTogMH19KVxyXG4iLCJpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIE1ldGVvci5wdWJsaXNoKCdzcGFjZV91c2VyX3NpZ25zJywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICAgIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJfc2lnbnMuZmluZCh7XG4gICAgICBzcGFjZTogc3BhY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBjcmVhdGVkX2J5OiAwLFxuICAgICAgICBjcmVhdGVkOiAwLFxuICAgICAgICBtb2RpZmllZF9ieTogMFxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbiIsIiMjI1xyXG5NZXRlb3IucHVibGlzaENvbXBvc2l0ZSBcInVzZXJfaW5ib3hfaW5zdGFuY2VcIiwgKCktPlxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1c2VyU3BhY2VJZHMgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcclxuXHRcdHVzZXI6IHRoaXMudXNlcklkLFxyXG5cdFx0dXNlcl9hY2NlcHRlZDogdHJ1ZVxyXG5cdH0sIHtmaWVsZHM6IHtzcGFjZTogMX19KS5mZXRjaCgpLmdldEVhY2goXCJzcGFjZVwiKTtcclxuXHRxdWVyeSA9IHtzcGFjZTogeyRpbjogdXNlclNwYWNlSWRzfX1cclxuXHJcblx0cXVlcnkuJG9yID0gW3tpbmJveF91c2VyczogdGhpcy51c2VySWR9LCB7Y2NfdXNlcnM6IHRoaXMudXNlcklkfV1cclxuXHJcblx0ZmluZDogLT5cclxuXHRcdGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdHNwYWNlOiAxLFxyXG5cdFx0XHRcdGFwcGxpY2FudF9uYW1lOiAxLFxyXG5cdFx0XHRcdGZsb3c6IDEsXHJcblx0XHRcdFx0aW5ib3hfdXNlcnM6IDEsXHJcblx0XHRcdFx0Y2NfdXNlcnM6IDEsXHJcblx0XHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRtb2RpZmllZDogMSxcclxuXHRcdFx0XHRmb3JtOiAxXHJcblx0XHRcdH0sIHNvcnQ6IHttb2RpZmllZDogLTF9LCBza2lwOiAwLCBsaW1pdDogMjAwXHJcblx0XHR9KTtcclxuXHRjaGlsZHJlbjogW1xyXG5cdFx0e1xyXG5cdFx0XHRmaW5kOiAoaW5zdGFuY2UsIHBvc3QpLT5cclxuXHRcdFx0XHRkYi5mbG93cy5maW5kKHtfaWQ6IGluc3RhbmNlLmZsb3d9LCB7ZmllbGRzOiB7bmFtZTogMSwgc3BhY2U6IDF9fSk7XHJcblx0XHR9XHJcblx0XVxyXG4jIyNcclxuXHJcbiMjI1xyXG5NZXRlb3IucHVibGlzaCAnbXlfaW5ib3hfaW5zdGFuY2VzJywgKHNwYWNlSWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdCNcdHVzZXJTcGFjZUlkcyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xyXG5cdCNcdFx0dXNlcjogdGhpcy51c2VySWQsXHJcblx0I1x0XHR1c2VyX2FjY2VwdGVkOiB0cnVlXHJcblx0I1x0fSwge2ZpZWxkczoge3NwYWNlOiAxfX0pLmZldGNoKCkuZ2V0RWFjaChcInNwYWNlXCIpO1xyXG5cclxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2VJZH1cclxuXHJcblx0cXVlcnkuJG9yID0gW3tpbmJveF91c2VyczogdGhpcy51c2VySWR9LCB7Y2NfdXNlcnM6IHRoaXMudXNlcklkfV1cclxuXHJcblx0ZmllbGRzID0ge1xyXG5cdFx0c3BhY2U6IDEsXHJcbiNcdFx0YXBwbGljYW50X25hbWU6IDEsXHJcblx0XHRmbG93OiAxLFxyXG5cdFx0aW5ib3hfdXNlcnM6IDEsXHJcblx0XHRjY191c2VyczogMSxcclxuXHRcdHN0YXRlOiAxLFxyXG4jXHRcdG5hbWU6IDEsXHJcbiNcdFx0bW9kaWZpZWQ6IDEsXHJcblx0XHRmb3JtOiAxXHJcblx0fVxyXG5cclxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge3NvcnQ6IHttb2RpZmllZDogLTF9LCBza2lwOiAwLCBsaW1pdDogNTAwfSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0YWRkZWQ6IChpZCktPlxyXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGlkfSwge2ZpZWxkczogZmllbGRzfSlcclxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2VcclxuXHRcdFx0ZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzXHJcblx0XHRcdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKVxyXG5cdFx0Y2hhbmdlZDogKGlkKS0+XHJcblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxyXG5cdFx0XHRyZXR1cm4gaWYgbm90IGluc3RhbmNlXHJcblx0XHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxyXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcclxuXHRcdFx0c2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSk7XHJcblx0XHRyZW1vdmVkOiAoaWQpLT5cclxuXHRcdFx0c2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcclxuXHR9XHJcblxyXG5cdHNlbGYucmVhZHkoKTtcclxuXHRzZWxmLm9uU3RvcCAoKS0+XHJcblx0XHRoYW5kbGUuc3RvcCgpXHJcbiMjI1xyXG5cclxuX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUgPSAoc3BhY2VJZCwgdXNlcklkLCBfaXRlbXMsIGNhbGxiYWNrKS0+XHJcblx0ZGIuaW5zdGFuY2VzLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUoW1xyXG5cdFx0e1xyXG5cdFx0XHQkbWF0Y2g6IHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VJZCxcclxuXHRcdFx0XHQkb3I6IFt7aW5ib3hfdXNlcnM6IHVzZXJJZH0sIHtjY191c2VyczogdXNlcklkfV1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0JGdyb3VwOiB7XHJcblx0XHRcdFx0X2lkOiB7ZmxvdzogXCIkZmxvd1wiLCBjYXRlZ29yeTogXCIkY2F0ZWdvcnlcIn0sIGNvdW50OiB7JHN1bTogMX1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdF0pLnRvQXJyYXkgKGVyciwgZGF0YSktPlxyXG5cdFx0aWYgZXJyXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpXHJcblxyXG5cdFx0ZGF0YS5mb3JFYWNoIChkb2MpIC0+XHJcblx0XHRcdF9pdGVtcy5wdXNoIGRvY1xyXG5cclxuXHRcdGlmIGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaylcclxuXHRcdFx0Y2FsbGJhY2soKVxyXG5cdFx0cmV0dXJuXHJcblxyXG5fYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSA9IE1ldGVvci53cmFwQXN5bmMoX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUpXHJcblxyXG5NZXRlb3IucHVibGlzaCAnbXlfaW5ib3hfZmxvd19pbnN0YW5jZXNfY291bnQnLCAoc3BhY2VJZCktPlxyXG5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdHF1ZXJ5ID0ge3NwYWNlOiBzcGFjZUlkfVxyXG5cclxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxyXG5cclxuXHRkYXRhID0gW10gICPmlbDmja7moLzlvI/vvJpbe19pZDpmbG93SWQsIGNvdW50OiDlvoXlip7mlbDph499LCB7X2lkOmZsb3dJZDIsIGNvdW50OiDlvoXlip7mlbDph48yfV1cclxuXHRfYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZShzcGFjZUlkLCBzZWxmLnVzZXJJZCwgZGF0YSlcclxuXHJcblx0X2Zsb3dzRGF0YSA9IFtdXHJcblxyXG5cdF8uZWFjaCBkYXRhLCAoZGF0YUl0ZW0pLT5cclxuXHRcdF9mbG93c0RhdGEucHVzaCh7X2lkOiBkYXRhSXRlbS5faWQuZmxvdywgY2F0ZWdvcnk6IGRhdGFJdGVtLl9pZC5jYXRlZ29yeSwgY291bnQ6IGRhdGFJdGVtLmNvdW50fSlcclxuXHJcblx0c2VsZi5hZGRlZChcImZsb3dfaW5zdGFuY2VzXCIsIHNwYWNlSWQsIHtmbG93czogX2Zsb3dzRGF0YX0pO1xyXG5cclxuXHRfY2hhbmdlRGF0YSA9IChkb2MsIGFjdGlvbiktPlxyXG5cdFx0Zmxvd19pbnN0YW5jZSA9IF8uZmluZCBfZmxvd3NEYXRhLCAoZiktPlxyXG5cdFx0XHRyZXR1cm4gZi5faWQgPT0gZG9jLmZsb3dcclxuXHRcdGlmIGZsb3dfaW5zdGFuY2VcclxuXHRcdFx0aWYgYWN0aW9uID09IFwiYWRkZWRcIlxyXG5cdFx0XHRcdGZsb3dfaW5zdGFuY2UuY291bnQrK1xyXG5cdFx0XHRlbHNlIGlmIGFjdGlvbiA9PSBcInJlbW92ZWRcIlxyXG5cdFx0XHRcdGZsb3dfaW5zdGFuY2UuY291bnQtLVxyXG5cdFx0ZWxzZSBpZiBhY3Rpb24gPT0gXCJhZGRlZFwiXHJcblx0XHRcdF9mbG93c0RhdGEucHVzaCB7X2lkOiBkb2MuZmxvdywgY2F0ZWdvcnk6IGRvYy5jYXRlZ29yeSwgY291bnQ6IDF9XHJcblxyXG5cdFx0c2VsZi5jaGFuZ2VkKFwiZmxvd19pbnN0YW5jZXNcIiwgc3BhY2VJZCwge2Zsb3dzOiBfZmxvd3NEYXRhfSk7XHJcblxyXG5cdF9pbml0ID0gdHJ1ZVxyXG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7ZmllbGRzOiB7X2lkOiAxLCBpbmJveF91c2VyczogMSwgY2NfdXNlcnM6IDEsIGZsb3c6IDEsIGNhdGVnb3J5OiAxfX0pLm9ic2VydmUge1xyXG5cdFx0YWRkZWQ6IChkb2MpLT5cclxuXHRcdFx0aWYgIV9pbml0XHJcblx0XHRcdFx0X2NoYW5nZURhdGEoZG9jLCBcImFkZGVkXCIpXHJcblx0XHRyZW1vdmVkOiAoZG9jKS0+XHJcblx0XHRcdGlmICFfaW5pdFxyXG5cdFx0XHRcdF9jaGFuZ2VEYXRhKGRvYywgXCJyZW1vdmVkXCIpXHJcblx0fVxyXG5cdF9pbml0ID0gZmFsc2VcclxuXHJcblx0c2VsZi5yZWFkeSgpO1xyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKCkiLCJcbi8qXG5NZXRlb3IucHVibGlzaENvbXBvc2l0ZSBcInVzZXJfaW5ib3hfaW5zdGFuY2VcIiwgKCktPlxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0dXNlclNwYWNlSWRzID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG5cdFx0dXNlcjogdGhpcy51c2VySWQsXG5cdFx0dXNlcl9hY2NlcHRlZDogdHJ1ZVxuXHR9LCB7ZmllbGRzOiB7c3BhY2U6IDF9fSkuZmV0Y2goKS5nZXRFYWNoKFwic3BhY2VcIik7XG5cdHF1ZXJ5ID0ge3NwYWNlOiB7JGluOiB1c2VyU3BhY2VJZHN9fVxuXG5cdHF1ZXJ5LiRvciA9IFt7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dXG5cblx0ZmluZDogLT5cblx0XHRkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdHNwYWNlOiAxLFxuXHRcdFx0XHRhcHBsaWNhbnRfbmFtZTogMSxcblx0XHRcdFx0ZmxvdzogMSxcblx0XHRcdFx0aW5ib3hfdXNlcnM6IDEsXG5cdFx0XHRcdGNjX3VzZXJzOiAxLFxuXHRcdFx0XHRzdGF0ZTogMSxcblx0XHRcdFx0bmFtZTogMSxcblx0XHRcdFx0bW9kaWZpZWQ6IDEsXG5cdFx0XHRcdGZvcm06IDFcblx0XHRcdH0sIHNvcnQ6IHttb2RpZmllZDogLTF9LCBza2lwOiAwLCBsaW1pdDogMjAwXG5cdFx0fSk7XG5cdGNoaWxkcmVuOiBbXG5cdFx0e1xuXHRcdFx0ZmluZDogKGluc3RhbmNlLCBwb3N0KS0+XG5cdFx0XHRcdGRiLmZsb3dzLmZpbmQoe19pZDogaW5zdGFuY2UuZmxvd30sIHtmaWVsZHM6IHtuYW1lOiAxLCBzcGFjZTogMX19KTtcblx0XHR9XG5cdF1cbiAqL1xuXG4vKlxuTWV0ZW9yLnB1Ymxpc2ggJ215X2luYm94X2luc3RhbmNlcycsIChzcGFjZUlkKS0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHRzZWxmID0gdGhpcztcblxuXHQgKlx0dXNlclNwYWNlSWRzID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG5cdCAqXHRcdHVzZXI6IHRoaXMudXNlcklkLFxuXHQgKlx0XHR1c2VyX2FjY2VwdGVkOiB0cnVlXG5cdCAqXHR9LCB7ZmllbGRzOiB7c3BhY2U6IDF9fSkuZmV0Y2goKS5nZXRFYWNoKFwic3BhY2VcIik7XG5cblx0cXVlcnkgPSB7c3BhY2U6IHNwYWNlSWR9XG5cblx0cXVlcnkuJG9yID0gW3tpbmJveF91c2VyczogdGhpcy51c2VySWR9LCB7Y2NfdXNlcnM6IHRoaXMudXNlcklkfV1cblxuXHRmaWVsZHMgPSB7XG5cdFx0c3BhY2U6IDEsXG4gKlx0XHRhcHBsaWNhbnRfbmFtZTogMSxcblx0XHRmbG93OiAxLFxuXHRcdGluYm94X3VzZXJzOiAxLFxuXHRcdGNjX3VzZXJzOiAxLFxuXHRcdHN0YXRlOiAxLFxuICpcdFx0bmFtZTogMSxcbiAqXHRcdG1vZGlmaWVkOiAxLFxuXHRcdGZvcm06IDFcblx0fVxuXG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7c29ydDoge21vZGlmaWVkOiAtMX0sIHNraXA6IDAsIGxpbWl0OiA1MDB9KS5vYnNlcnZlQ2hhbmdlcyB7XG5cdFx0YWRkZWQ6IChpZCktPlxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXG5cdFx0XHRyZXR1cm4gaWYgbm90IGluc3RhbmNlXG5cdFx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2Vcblx0XHRcdGRlbGV0ZSBpbnN0YW5jZS5jY191c2Vyc1xuXHRcdFx0c2VsZi5hZGRlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpXG5cdFx0Y2hhbmdlZDogKGlkKS0+XG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGlkfSwge2ZpZWxkczogZmllbGRzfSlcblx0XHRcdHJldHVybiBpZiBub3QgaW5zdGFuY2Vcblx0XHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxuXHRcdFx0ZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcblx0XHRyZW1vdmVkOiAoaWQpLT5cblx0XHRcdHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XG5cdH1cblxuXHRzZWxmLnJlYWR5KCk7XG5cdHNlbGYub25TdG9wICgpLT5cblx0XHRoYW5kbGUuc3RvcCgpXG4gKi9cbnZhciBfYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSwgX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGU7XG5cbl9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlID0gZnVuY3Rpb24oc3BhY2VJZCwgdXNlcklkLCBfaXRlbXMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBkYi5pbnN0YW5jZXMucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShbXG4gICAge1xuICAgICAgJG1hdGNoOiB7XG4gICAgICAgIHNwYWNlOiBzcGFjZUlkLFxuICAgICAgICAkb3I6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmJveF91c2VyczogdXNlcklkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY2NfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgICRncm91cDoge1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICBmbG93OiBcIiRmbG93XCIsXG4gICAgICAgICAgY2F0ZWdvcnk6IFwiJGNhdGVnb3J5XCJcbiAgICAgICAgfSxcbiAgICAgICAgY291bnQ6IHtcbiAgICAgICAgICAkc3VtOiAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIF0pLnRvQXJyYXkoZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgfVxuICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihkb2MpIHtcbiAgICAgIHJldHVybiBfaXRlbXMucHVzaChkb2MpO1xuICAgIH0pO1xuICAgIGlmIChjYWxsYmFjayAmJiBfLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5fYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSA9IE1ldGVvci53cmFwQXN5bmMoX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUpO1xuXG5NZXRlb3IucHVibGlzaCgnbXlfaW5ib3hfZmxvd19pbnN0YW5jZXNfY291bnQnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIHZhciBfY2hhbmdlRGF0YSwgX2Zsb3dzRGF0YSwgX2luaXQsIGRhdGEsIGhhbmRsZSwgcXVlcnksIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHNlbGYgPSB0aGlzO1xuICBxdWVyeSA9IHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9O1xuICBxdWVyeS4kb3IgPSBbXG4gICAge1xuICAgICAgaW5ib3hfdXNlcnM6IHRoaXMudXNlcklkXG4gICAgfSwge1xuICAgICAgY2NfdXNlcnM6IHRoaXMudXNlcklkXG4gICAgfVxuICBdO1xuICBkYXRhID0gW107XG4gIF9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlKHNwYWNlSWQsIHNlbGYudXNlcklkLCBkYXRhKTtcbiAgX2Zsb3dzRGF0YSA9IFtdO1xuICBfLmVhY2goZGF0YSwgZnVuY3Rpb24oZGF0YUl0ZW0pIHtcbiAgICByZXR1cm4gX2Zsb3dzRGF0YS5wdXNoKHtcbiAgICAgIF9pZDogZGF0YUl0ZW0uX2lkLmZsb3csXG4gICAgICBjYXRlZ29yeTogZGF0YUl0ZW0uX2lkLmNhdGVnb3J5LFxuICAgICAgY291bnQ6IGRhdGFJdGVtLmNvdW50XG4gICAgfSk7XG4gIH0pO1xuICBzZWxmLmFkZGVkKFwiZmxvd19pbnN0YW5jZXNcIiwgc3BhY2VJZCwge1xuICAgIGZsb3dzOiBfZmxvd3NEYXRhXG4gIH0pO1xuICBfY2hhbmdlRGF0YSA9IGZ1bmN0aW9uKGRvYywgYWN0aW9uKSB7XG4gICAgdmFyIGZsb3dfaW5zdGFuY2U7XG4gICAgZmxvd19pbnN0YW5jZSA9IF8uZmluZChfZmxvd3NEYXRhLCBmdW5jdGlvbihmKSB7XG4gICAgICByZXR1cm4gZi5faWQgPT09IGRvYy5mbG93O1xuICAgIH0pO1xuICAgIGlmIChmbG93X2luc3RhbmNlKSB7XG4gICAgICBpZiAoYWN0aW9uID09PSBcImFkZGVkXCIpIHtcbiAgICAgICAgZmxvd19pbnN0YW5jZS5jb3VudCsrO1xuICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVtb3ZlZFwiKSB7XG4gICAgICAgIGZsb3dfaW5zdGFuY2UuY291bnQtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJhZGRlZFwiKSB7XG4gICAgICBfZmxvd3NEYXRhLnB1c2goe1xuICAgICAgICBfaWQ6IGRvYy5mbG93LFxuICAgICAgICBjYXRlZ29yeTogZG9jLmNhdGVnb3J5LFxuICAgICAgICBjb3VudDogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmLmNoYW5nZWQoXCJmbG93X2luc3RhbmNlc1wiLCBzcGFjZUlkLCB7XG4gICAgICBmbG93czogX2Zsb3dzRGF0YVxuICAgIH0pO1xuICB9O1xuICBfaW5pdCA9IHRydWU7XG4gIGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDEsXG4gICAgICBpbmJveF91c2VyczogMSxcbiAgICAgIGNjX3VzZXJzOiAxLFxuICAgICAgZmxvdzogMSxcbiAgICAgIGNhdGVnb3J5OiAxXG4gICAgfVxuICB9KS5vYnNlcnZlKHtcbiAgICBhZGRlZDogZnVuY3Rpb24oZG9jKSB7XG4gICAgICBpZiAoIV9pbml0KSB7XG4gICAgICAgIHJldHVybiBfY2hhbmdlRGF0YShkb2MsIFwiYWRkZWRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVkOiBmdW5jdGlvbihkb2MpIHtcbiAgICAgIGlmICghX2luaXQpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFuZ2VEYXRhKGRvYywgXCJyZW1vdmVkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIF9pbml0ID0gZmFsc2U7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuIiwiXHJcbk1ldGVvci5wdWJsaXNoICdmbG93X21haW5fYXR0YWNoX3RlbXBsYXRlJywgKHNwYWNlSWQsIGZsb3dJZCktPlxyXG5cdGNoZWNrKHNwYWNlSWQsIFN0cmluZylcclxuXHRjaGVjayhmbG93SWQsIFN0cmluZylcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBzcGFjZUlkICYmIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRyZXR1cm4gQ3JlYXRvci5nZXRDb2xsZWN0aW9uKCdjbXNfZmlsZXMnKS5maW5kKHsgc3BhY2U6IHNwYWNlSWQsICdwYXJlbnQubyc6ICdmbG93cycsICdwYXJlbnQuaWRzJzogZmxvd0lkLCAgbmFtZTogJ+ato+aWhy5kb2N4JyB9KVxyXG4iLCJNZXRlb3IucHVibGlzaCgnZmxvd19tYWluX2F0dGFjaF90ZW1wbGF0ZScsIGZ1bmN0aW9uKHNwYWNlSWQsIGZsb3dJZCkge1xuICBjaGVjayhzcGFjZUlkLCBTdHJpbmcpO1xuICBjaGVjayhmbG93SWQsIFN0cmluZyk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghKHNwYWNlSWQgJiYgZmxvd0lkKSkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIENyZWF0b3IuZ2V0Q29sbGVjdGlvbignY21zX2ZpbGVzJykuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgJ3BhcmVudC5vJzogJ2Zsb3dzJyxcbiAgICAncGFyZW50Lmlkcyc6IGZsb3dJZCxcbiAgICBuYW1lOiAn5q2j5paHLmRvY3gnXG4gIH0pO1xufSk7XG4iLCJ3b3JrZmxvd1RlbXBsYXRlID0ge31cclxuXHJcbiPlj6/nlKjmraTohJrmnKzku47mqKHmnb/lt6XkvZzljLrlgZrmibnph4/lr7zlh7rvvJpcclxuI+S9v+eUqOeuoeeQhuWRmOi0puaIt+eZu+W9leWQju+8jOi/m+WFpUZsb3dNb2R1bGVz77yM5Zyo5o6n5Yi25Y+w5omn6KGM5Lul5LiL6ISa5pys5Y2z5Y+vXHJcbiNkYi5mb3Jtcy5maW5kKHtzdGF0ZTpcImVuYWJsZWRcIn0pLmZvckVhY2goZnVuY3Rpb24oZm9ybSl7d2luZG93Lm9wZW4oTWV0ZW9yLmFic29sdXRlVXJsKFwiYXBpL3dvcmtmbG93L2V4cG9ydC9mb3JtP2Zvcm09XCIrZm9ybS5faWQpKX0pXHJcbndvcmtmbG93VGVtcGxhdGVbXCJlblwiXSA9W11cclxuXHJcbiPlj6/nlKjmraTohJrmnKzku47mqKHmnb/lt6XkvZzljLrlgZrmibnph4/lr7zlh7rvvJpcclxuI+S9v+eUqOeuoeeQhuWRmOi0puaIt+eZu+W9leWQju+8jOi/m+WFpeaooeadv+S4k+WMuu+8jOWcqOaOp+WItuWPsOaJp+ihjOS7peS4i+iEmuacrOWNs+WPr1xyXG4jZGIuZm9ybXMuZmluZCh7c3RhdGU6XCJlbmFibGVkXCJ9KS5mb3JFYWNoKGZ1bmN0aW9uKGZvcm0pe3dpbmRvdy5vcGVuKE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS93b3JrZmxvdy9leHBvcnQvZm9ybT9mb3JtPVwiK2Zvcm0uX2lkKSl9KVxyXG53b3JrZmxvd1RlbXBsYXRlW1wiemgtQ05cIl0gPVtdXHJcblxyXG5NZXRlb3Iuc3RhcnR1cCAoKS0+XHJcblx0ZnMgPSByZXF1aXJlKCdmcycpXHJcblx0cGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxyXG5cdG1pbWUgPSByZXF1aXJlKCdtaW1lJylcclxuXHRyZWFkRmlsZUxpc3QgPSAocGF0aERpciwgZmlsZXNMaXN0KS0+XHJcblx0XHRmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKHBhdGhEaXIpXHJcblx0XHRmaWxlcy5mb3JFYWNoIChuYW1lLCBpbmRleCktPlxyXG5cdFx0XHRzdGF0ID0gZnMuc3RhdFN5bmMocGF0aC5qb2luKHBhdGhEaXIsIG5hbWUpKVxyXG5cdFx0XHRpZiBzdGF0LmlzRGlyZWN0b3J5KClcclxuXHRcdFx0XHQjIOmAkuW9kuivu+WPluaWh+S7tlxyXG5cdFx0XHRcdHJlYWRGaWxlTGlzdChwYXRoLmpvaW4ocGF0aERpciwgbmFtZSksIGZpbGVzTGlzdClcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdG9iaiA9IHt9XHJcblx0XHRcdFx0b2JqLnBhdGggPSBwYXRoRGlyXHJcblx0XHRcdFx0b2JqLm5hbWUgPSBuYW1lXHJcblx0XHRcdFx0ZmlsZXNMaXN0LnB1c2gob2JqKVxyXG5cclxuXHQj6I635Y+WemgtY27mlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcclxuXHRmaWxlc0xpc3RfY24gPSBbXVxyXG5cdHBhdGhfY24gPSBNZXRlb3Iuc2V0dGluZ3Mud29ya2Zsb3dUZW1wbGF0ZXM/LnBhdGhfY25cclxuXHRpZiBwYXRoX2NuXHJcblx0XHRhYnNvbHV0ZV9wYXRoX2NuID0gcGF0aC5yZXNvbHZlKHBhdGhfY24pXHJcblx0XHRjb25zb2xlLmxvZyBcImFic29sdXRlX3BhdGhfY25cIiwgYWJzb2x1dGVfcGF0aF9jblxyXG5cdFx0aWYgZnMuZXhpc3RzU3luYyhhYnNvbHV0ZV9wYXRoX2NuKVxyXG5cdFx0XHRyZWFkRmlsZUxpc3QoYWJzb2x1dGVfcGF0aF9jbiwgZmlsZXNMaXN0X2NuKVxyXG5cdFx0XHRmaWxlc0xpc3RfY24uZm9yRWFjaCAoZmlsZSktPlxyXG5cdFx0XHRcdHRyeVxyXG5cdFx0XHRcdFx0aWYgbWltZS5nZXRUeXBlKGZpbGUubmFtZSkgaXMgXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuXHRcdFx0XHRcdFx0ZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpLCAndXRmOCcpXHJcblx0XHRcdFx0XHRcdHdvcmtmbG93VGVtcGxhdGVbXCJ6aC1DTlwiXS5wdXNoKEpTT04ucGFyc2UoZGF0YSkpXHJcblx0XHRcdFx0Y2F0Y2ggZVxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciBcIuiOt+WPlnpoLWNu5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XCIsIHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSlcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cclxuXHQj6I635Y+WZW4tdXPmlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcclxuXHRmaWxlc0xpc3RfdXMgPSBbXVxyXG5cdHBhdGhfdXMgPSBNZXRlb3Iuc2V0dGluZ3Mud29ya2Zsb3dUZW1wbGF0ZXM/LnBhdGhfdXNcclxuXHRpZiBwYXRoX3VzXHJcblx0XHRhYnNvbHV0ZV9wYXRoX3VzID0gcGF0aC5yZXNvbHZlKHBhdGhfdXMpXHJcblx0XHRjb25zb2xlLmxvZyBcImFic29sdXRlX3BhdGhfdXNcIiwgYWJzb2x1dGVfcGF0aF91c1xyXG5cdFx0aWYgZnMuZXhpc3RzU3luYyhhYnNvbHV0ZV9wYXRoX3VzKVxyXG5cdFx0XHRyZWFkRmlsZUxpc3QoYWJzb2x1dGVfcGF0aF91cywgZmlsZXNMaXN0X3VzKVxyXG5cdFx0XHRmaWxlc0xpc3RfdXMuZm9yRWFjaCAoZmlsZSktPlxyXG5cdFx0XHRcdHRyeVxyXG5cdFx0XHRcdFx0aWYgbWltZS5nZXRUeXBlKGZpbGUubmFtZSkgaXMgXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuXHRcdFx0XHRcdFx0ZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpLCAndXRmOCcpXHJcblx0XHRcdFx0XHRcdHdvcmtmbG93VGVtcGxhdGVbXCJlblwiXS5wdXNoKEpTT04ucGFyc2UoZGF0YSkpXHJcblx0XHRcdFx0Y2F0Y2ggZVxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciBcIuiOt+WPlmVuLXVz5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XCIsIHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSlcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHJcblxyXG5cclxuIiwiICAgICAgICAgICAgICAgICAgICAgXG5cbndvcmtmbG93VGVtcGxhdGUgPSB7fTtcblxud29ya2Zsb3dUZW1wbGF0ZVtcImVuXCJdID0gW107XG5cbndvcmtmbG93VGVtcGxhdGVbXCJ6aC1DTlwiXSA9IFtdO1xuXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgdmFyIGFic29sdXRlX3BhdGhfY24sIGFic29sdXRlX3BhdGhfdXMsIGZpbGVzTGlzdF9jbiwgZmlsZXNMaXN0X3VzLCBmcywgbWltZSwgcGF0aCwgcGF0aF9jbiwgcGF0aF91cywgcmVhZEZpbGVMaXN0LCByZWYsIHJlZjE7XG4gIGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAgbWltZSA9IHJlcXVpcmUoJ21pbWUnKTtcbiAgcmVhZEZpbGVMaXN0ID0gZnVuY3Rpb24ocGF0aERpciwgZmlsZXNMaXN0KSB7XG4gICAgdmFyIGZpbGVzO1xuICAgIGZpbGVzID0gZnMucmVhZGRpclN5bmMocGF0aERpcik7XG4gICAgcmV0dXJuIGZpbGVzLmZvckVhY2goZnVuY3Rpb24obmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBvYmosIHN0YXQ7XG4gICAgICBzdGF0ID0gZnMuc3RhdFN5bmMocGF0aC5qb2luKHBhdGhEaXIsIG5hbWUpKTtcbiAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRGaWxlTGlzdChwYXRoLmpvaW4ocGF0aERpciwgbmFtZSksIGZpbGVzTGlzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmogPSB7fTtcbiAgICAgICAgb2JqLnBhdGggPSBwYXRoRGlyO1xuICAgICAgICBvYmoubmFtZSA9IG5hbWU7XG4gICAgICAgIHJldHVybiBmaWxlc0xpc3QucHVzaChvYmopO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBmaWxlc0xpc3RfY24gPSBbXTtcbiAgcGF0aF9jbiA9IChyZWYgPSBNZXRlb3Iuc2V0dGluZ3Mud29ya2Zsb3dUZW1wbGF0ZXMpICE9IG51bGwgPyByZWYucGF0aF9jbiA6IHZvaWQgMDtcbiAgaWYgKHBhdGhfY24pIHtcbiAgICBhYnNvbHV0ZV9wYXRoX2NuID0gcGF0aC5yZXNvbHZlKHBhdGhfY24pO1xuICAgIGNvbnNvbGUubG9nKFwiYWJzb2x1dGVfcGF0aF9jblwiLCBhYnNvbHV0ZV9wYXRoX2NuKTtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhhYnNvbHV0ZV9wYXRoX2NuKSkge1xuICAgICAgcmVhZEZpbGVMaXN0KGFic29sdXRlX3BhdGhfY24sIGZpbGVzTGlzdF9jbik7XG4gICAgICBmaWxlc0xpc3RfY24uZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgIHZhciBkYXRhLCBlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChtaW1lLmdldFR5cGUoZmlsZS5uYW1lKSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgICAgICAgIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKSwgJ3V0ZjgnKTtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZmxvd1RlbXBsYXRlW1wiemgtQ05cIl0ucHVzaChKU09OLnBhcnNlKGRhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLojrflj5Z6aC1jbuaWh+S7tuWkueS4i+eahOaJgOacieaWh+S7tlwiLCBwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpKTtcbiAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZpbGVzTGlzdF91cyA9IFtdO1xuICBwYXRoX3VzID0gKHJlZjEgPSBNZXRlb3Iuc2V0dGluZ3Mud29ya2Zsb3dUZW1wbGF0ZXMpICE9IG51bGwgPyByZWYxLnBhdGhfdXMgOiB2b2lkIDA7XG4gIGlmIChwYXRoX3VzKSB7XG4gICAgYWJzb2x1dGVfcGF0aF91cyA9IHBhdGgucmVzb2x2ZShwYXRoX3VzKTtcbiAgICBjb25zb2xlLmxvZyhcImFic29sdXRlX3BhdGhfdXNcIiwgYWJzb2x1dGVfcGF0aF91cyk7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVfcGF0aF91cykpIHtcbiAgICAgIHJlYWRGaWxlTGlzdChhYnNvbHV0ZV9wYXRoX3VzLCBmaWxlc0xpc3RfdXMpO1xuICAgICAgcmV0dXJuIGZpbGVzTGlzdF91cy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgdmFyIGRhdGEsIGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKG1pbWUuZ2V0VHlwZShmaWxlLm5hbWUpID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgICAgICAgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpLCAndXRmOCcpO1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtmbG93VGVtcGxhdGVbXCJlblwiXS5wdXNoKEpTT04ucGFyc2UoZGF0YSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIuiOt+WPlmVuLXVz5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XCIsIHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSkpO1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiIyMjXHJcbiogICAgKiAgICAqICAgICogICAgKiAgICAqXHJcbuKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsXHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAgfFxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlCBkYXkgb2Ygd2VlayAoMCAtIDcpICgwIG9yIDcgaXMgU3VuKVxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSAIG1vbnRoICgxIC0gMTIpXHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBkYXkgb2YgbW9udGggKDEgLSAzMSlcclxu4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgaG91ciAoMCAtIDIzKVxyXG7ilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIG1pbnV0ZSAoMCAtIDU5KVxyXG7ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc2Vjb25kICgwIC0gNTksIE9QVElPTkFMKVxyXG4jIyNcclxuTWV0ZW9yLnN0YXJ0dXAgLT5cclxuXHRpZiBNZXRlb3Iuc2V0dGluZ3MuY3Jvbj8uYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uXHJcblx0XHRzY2hlZHVsZSA9IHJlcXVpcmUoJ25vZGUtc2NoZWR1bGUnKVxyXG5cdFx0IyDlrprml7bmiafooYzlkIzmraVcclxuXHRcdHJ1bGUgPSBNZXRlb3Iuc2V0dGluZ3MuY3Jvbi5hdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb25cclxuXHRcdGdvX25leHQgPSB0cnVlXHJcblx0XHRzY2hlZHVsZS5zY2hlZHVsZUpvYiBydWxlLCBNZXRlb3IuYmluZEVudmlyb25tZW50ICgpLT5cclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0aWYgIWdvX25leHRcclxuXHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdGdvX25leHQgPSBmYWxzZVxyXG5cdFx0XHRcdGNvbnNvbGUudGltZSAnYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uJ1xyXG5cclxuXHRcdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cclxuXHRcdFx0XHQjIOWwhuWnlOaJmOinhOWImeiuvue9ruS4uuS4jeWPr+eUqFxyXG5cdFx0XHRcdGRiLnByb2Nlc3NfZGVsZWdhdGlvbl9ydWxlcy51cGRhdGUoeyBlbmFibGVkOiB0cnVlLCBlbmRfdGltZTogeyAkbHRlOiBub3cgfSB9LCB7ICRzZXQ6IHsgZW5hYmxlZDogZmFsc2UgfSB9LCB7IG11bHRpIDp0cnVlIH0pXHJcblxyXG5cdFx0XHRcdGNvbnNvbGUudGltZUVuZCAnYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uJ1xyXG5cdFx0XHRcdGdvX25leHQgPSB0cnVlXHJcblxyXG5cdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBcIkFVVE8gQVVUT19GSU5JU0hfUFJPQ0VTU19ERUxFR0FUSU9OIEVSUk9SOiBcIlxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0XHRcdGdvX25leHQgPSB0cnVlXHJcblxyXG5cdFx0LCAoKS0+XHJcblx0XHRcdGNvbnNvbGUubG9nICdGYWlsZWQgdG8gYmluZCBlbnZpcm9ubWVudCdcclxuIiwiXG4vKlxuKiAgICAqICAgICogICAgKiAgICAqICAgICpcbuKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIHxcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSUIGRheSBvZiB3ZWVrICgwIC0gNykgKDAgb3IgNyBpcyBTdW4pXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSAIG1vbnRoICgxIC0gMTIpXG7ilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgZGF5IG9mIG1vbnRoICgxIC0gMzEpXG7ilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBob3VyICgwIC0gMjMpXG7ilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIG1pbnV0ZSAoMCAtIDU5KVxu4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIHNlY29uZCAoMCAtIDU5LCBPUFRJT05BTClcbiAqL1xuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHZhciBnb19uZXh0LCByZWYsIHJ1bGUsIHNjaGVkdWxlO1xuICBpZiAoKHJlZiA9IE1ldGVvci5zZXR0aW5ncy5jcm9uKSAhPSBudWxsID8gcmVmLmF1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbiA6IHZvaWQgMCkge1xuICAgIHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpO1xuICAgIHJ1bGUgPSBNZXRlb3Iuc2V0dGluZ3MuY3Jvbi5hdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb247XG4gICAgZ29fbmV4dCA9IHRydWU7XG4gICAgcmV0dXJuIHNjaGVkdWxlLnNjaGVkdWxlSm9iKHJ1bGUsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSwgbm93O1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFnb19uZXh0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdvX25leHQgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS50aW1lKCdhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24nKTtcbiAgICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIGRiLnByb2Nlc3NfZGVsZWdhdGlvbl9ydWxlcy51cGRhdGUoe1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgZW5kX3RpbWU6IHtcbiAgICAgICAgICAgICRsdGU6IG5vd1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgnYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uJyk7XG4gICAgICAgIHJldHVybiBnb19uZXh0ID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkFVVE8gQVVUT19GSU5JU0hfUFJPQ0VTU19ERUxFR0FUSU9OIEVSUk9SOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIHJldHVybiBnb19uZXh0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQnKTtcbiAgICB9KSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbiogICAgKiAgICAqICAgICogICAgKiAgICAqXHJcbuKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsXHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAgfFxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlCBkYXkgb2Ygd2VlayAoMCAtIDcpICgwIG9yIDcgaXMgU3VuKVxyXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSAIG1vbnRoICgxIC0gMTIpXHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBkYXkgb2YgbW9udGggKDEgLSAzMSlcclxu4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgaG91ciAoMCAtIDIzKVxyXG7ilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIG1pbnV0ZSAoMCAtIDU5KVxyXG7ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc2Vjb25kICgwIC0gNTksIE9QVElPTkFMKVxyXG4jIyNcclxuTWV0ZW9yLnN0YXJ0dXAgLT5cclxuXHRpZiBNZXRlb3Iuc2V0dGluZ3MuY3Jvbj8udGltZW91dF9hdXRvX3N1Ym1pdFxyXG5cdFx0c2NoZWR1bGUgPSByZXF1aXJlKCdub2RlLXNjaGVkdWxlJylcclxuXHRcdCMg5a6a5pe25omn6KGM5ZCM5q2lXHJcblx0XHRydWxlID0gTWV0ZW9yLnNldHRpbmdzLmNyb24udGltZW91dF9hdXRvX3N1Ym1pdFxyXG5cdFx0Z29fbmV4dCA9IHRydWVcclxuXHRcdHNjaGVkdWxlLnNjaGVkdWxlSm9iIHJ1bGUsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQgKCktPlxyXG5cdFx0XHR0cnlcclxuXHRcdFx0XHRpZiAhZ29fbmV4dFxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0Z29fbmV4dCA9IGZhbHNlXHJcblx0XHRcdFx0Y29uc29sZS50aW1lICd0aW1lb3V0X2F1dG9fc3VibWl0J1xyXG5cclxuXHRcdFx0XHR1dWZsb3dNYW5hZ2VyLnRpbWVvdXRBdXRvU3VibWl0KClcclxuXHJcblx0XHRcdFx0Y29uc29sZS50aW1lRW5kICd0aW1lb3V0X2F1dG9fc3VibWl0J1xyXG5cdFx0XHRcdGdvX25leHQgPSB0cnVlXHJcblxyXG5cdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBcIkFVVE8gVElNRU9VVF9BVVRPX1NVQk1JVCBFUlJPUjogXCJcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdFx0XHRnb19uZXh0ID0gdHJ1ZVxyXG5cclxuXHRcdCwgKCktPlxyXG5cdFx0XHRjb25zb2xlLmxvZyAnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQnXHJcblxyXG5NZXRlb3IubWV0aG9kc1xyXG5cdHRpbWVvdXRfYXV0b19zdWJtaXQ6IChpbnNfaWQpLT5cclxuXHRcdHV1Zmxvd01hbmFnZXIudGltZW91dEF1dG9TdWJtaXQoaW5zX2lkKVxyXG5cdFx0cmV0dXJuIHRydWVcclxuXHJcblxyXG4iLCJcbi8qXG4qICAgICogICAgKiAgICAqICAgICogICAgKlxu4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKxcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAgfFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJQgZGF5IG9mIHdlZWsgKDAgLSA3KSAoMCBvciA3IGlzIFN1bilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIAgbW9udGggKDEgLSAxMilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBkYXkgb2YgbW9udGggKDEgLSAzMSlcbuKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGhvdXIgKDAgLSAyMylcbuKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgbWludXRlICgwIC0gNTkpXG7ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc2Vjb25kICgwIC0gNTksIE9QVElPTkFMKVxuICovXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgdmFyIGdvX25leHQsIHJlZiwgcnVsZSwgc2NoZWR1bGU7XG4gIGlmICgocmVmID0gTWV0ZW9yLnNldHRpbmdzLmNyb24pICE9IG51bGwgPyByZWYudGltZW91dF9hdXRvX3N1Ym1pdCA6IHZvaWQgMCkge1xuICAgIHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpO1xuICAgIHJ1bGUgPSBNZXRlb3Iuc2V0dGluZ3MuY3Jvbi50aW1lb3V0X2F1dG9fc3VibWl0O1xuICAgIGdvX25leHQgPSB0cnVlO1xuICAgIHJldHVybiBzY2hlZHVsZS5zY2hlZHVsZUpvYihydWxlLCBNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGU7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWdvX25leHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ29fbmV4dCA9IGZhbHNlO1xuICAgICAgICBjb25zb2xlLnRpbWUoJ3RpbWVvdXRfYXV0b19zdWJtaXQnKTtcbiAgICAgICAgdXVmbG93TWFuYWdlci50aW1lb3V0QXV0b1N1Ym1pdCgpO1xuICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ3RpbWVvdXRfYXV0b19zdWJtaXQnKTtcbiAgICAgICAgcmV0dXJuIGdvX25leHQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQVVUTyBUSU1FT1VUX0FVVE9fU1VCTUlUIEVSUk9SOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIHJldHVybiBnb19uZXh0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQnKTtcbiAgICB9KSk7XG4gIH1cbn0pO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHRpbWVvdXRfYXV0b19zdWJtaXQ6IGZ1bmN0aW9uKGluc19pZCkge1xuICAgIHV1Zmxvd01hbmFnZXIudGltZW91dEF1dG9TdWJtaXQoaW5zX2lkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L25leHRTdGVwVXNlcnNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcclxuXHR2YXJcclxuXHRcdGRlYWxfdHlwZSA9IHJlcS5xdWVyeS5kZWFsX3R5cGUsXHJcblx0XHRzcGFjZUlkID0gcmVxLnF1ZXJ5LnNwYWNlSWQsXHJcblx0XHRlcnJvciA9IFwiXCI7XHJcblxyXG5cdGlmICghZGVhbF90eXBlIHx8ICFzcGFjZUlkKSB7XHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHZhclxyXG5cdFx0Ym9keSA9IHJlcS5ib2R5LFxyXG5cdFx0bmV4dFN0ZXBVc2VycyA9IFtdO1xyXG5cclxuXHJcblx0c3dpdGNoIChkZWFsX3R5cGUpIHtcclxuXHRcdGNhc2UgJ3NwZWNpZnlVc2VyJzpcclxuXHRcdFx0dmFyIHNwZWNpZnlVc2VySWRzID0gYm9keS5zcGVjaWZ5VXNlcklkcztcclxuXHJcblx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgc3BlY2lmeVVzZXJJZHMpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ2FwcGxpY2FudFJvbGUnOlxyXG5cdFx0XHR2YXJcclxuXHRcdFx0XHRhcHBsaWNhbnRJZCA9IGJvZHkuYXBwbGljYW50SWQsXHJcblx0XHRcdFx0YXBwcm92ZVJvbGVJZHMgPSBib2R5LmFwcHJvdmVSb2xlSWRzO1xyXG5cdFx0XHR2YXIgYXBwbGljYW50ID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXIoc3BhY2VJZCwgYXBwbGljYW50SWQpO1xyXG5cclxuXHRcdFx0aWYgKGFwcGxpY2FudClcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5T3Jnc0FuZFJvbGVzKHNwYWNlSWQsIGFwcGxpY2FudC5vcmdhbml6YXRpb25zLCBhcHByb3ZlUm9sZUlkcyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnYXBwbGljYW50U3VwZXJpb3InOlxyXG5cdFx0XHR2YXIgYXBwbGljYW50SWQgPSBib2R5LmFwcGxpY2FudElkO1xyXG5cdFx0XHR2YXIgYXBwbGljYW50ID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXIoc3BhY2VJZCwgYXBwbGljYW50SWQpO1xyXG5cdFx0XHRpZiAoYXBwbGljYW50Lm1hbmFnZXIpIHtcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXJzKHNwYWNlSWQsIGFwcGxpY2FudC5tYW5hZ2VyKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ2FwcGxpY2FudCc6XHJcblx0XHRcdHZhciBhcHBsaWNhbnRJZCA9IGJvZHkuYXBwbGljYW50SWQ7XHJcblx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgYXBwbGljYW50SWQpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ3VzZXJGaWVsZCc6XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdHVzZXJGaWVsZCA9IGJvZHkudXNlckZpZWxkLFxyXG5cdFx0XHRcdHVzZXJGaWVsZFZhbHVlID0gYm9keS51c2VyRmllbGRWYWx1ZTtcclxuXHRcdFx0aWYgKHVzZXJGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pXVzZXJGaWVsZFZhbHVl5YC85Li6QXJyYXlcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXJzKHNwYWNlSWQsIHVzZXJGaWVsZFZhbHVlKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzLnB1c2goV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXIoc3BhY2VJZCwgdXNlckZpZWxkVmFsdWUpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ29yZ0ZpZWxkJzpcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0b3JncyxcclxuXHRcdFx0XHRvcmdDaGlsZHJlbnMsXHJcblx0XHRcdFx0b3JnRmllbGQgPSBib2R5Lm9yZ0ZpZWxkLFxyXG5cdFx0XHRcdG9yZ0ZpZWxkVmFsdWUgPSBib2R5Lm9yZ0ZpZWxkVmFsdWU7XHJcblx0XHRcdGlmIChvcmdGaWVsZFZhbHVlKSB7XHJcblx0XHRcdFx0aWYgKG9yZ0ZpZWxkLmlzX211bHRpc2VsZWN0KSB7IC8v5aaC5p6c5aSa6YCJ77yM5Lulb3JnRmllbGRWYWx1ZeWAvOS4ukFycmF5XHJcblx0XHRcdFx0XHRvcmdzID0gV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnMob3JnRmllbGRWYWx1ZSk7XHJcblx0XHRcdFx0XHRvcmdDaGlsZHJlbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc0NoaWxkcmVucyhzcGFjZUlkLCBvcmdGaWVsZFZhbHVlKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0b3JncyA9IFtXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uKG9yZ0ZpZWxkVmFsdWUpXTtcclxuXHRcdFx0XHRcdG9yZ0NoaWxkcmVucyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25DaGlsZHJlbnMoc3BhY2VJZCwgb3JnRmllbGRWYWx1ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc1VzZXJzKHNwYWNlSWQsIG9yZ0NoaWxkcmVucyk7XHJcblxyXG5cdFx0XHRcdG9yZ0ZpZWxkVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc1VzZXJzKHNwYWNlSWQsIG9yZ3MpO1xyXG5cclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gbmV4dFN0ZXBVc2Vycy5jb25jYXQob3JnRmllbGRVc2Vycyk7XHJcblxyXG5cdFx0XHRcdGlmICghbmV4dFN0ZXBVc2VycyB8fCBuZXh0U3RlcFVzZXJzLmxlbmd0aCA8IDEpIHtcclxuXHRcdFx0XHRcdGVycm9yID0gXCJPUkdfTk9fTUVNQkVSU1wiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlcnJvciA9IFwiRklFTERfVkFMVUVfRU1QVFlcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdzcGVjaWZ5T3JnJzpcclxuXHRcdFx0dmFyIHNwZWNpZnlPcmdJZHMgPSBib2R5LnNwZWNpZnlPcmdJZHM7XHJcblx0XHRcdHZhciBzcGVjaWZ5T3JncyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zKHNwZWNpZnlPcmdJZHMpO1xyXG5cdFx0XHR2YXIgc3BlY2lmeU9yZ0NoaWxkcmVucyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zQ2hpbGRyZW5zKHNwYWNlSWQsIHNwZWNpZnlPcmdJZHMpO1xyXG5cclxuXHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zVXNlcnMoc3BhY2VJZCwgc3BlY2lmeU9yZ3MpO1xyXG5cdFx0XHRuZXh0U3RlcFVzZXJzID0gbmV4dFN0ZXBVc2Vycy5jb25jYXQoV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnNVc2VycyhzcGFjZUlkLCBzcGVjaWZ5T3JnQ2hpbGRyZW5zKSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAndXNlckZpZWxkUm9sZSc6XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdHVzZXJGaWVsZCA9IGJvZHkudXNlckZpZWxkLFxyXG5cdFx0XHRcdHVzZXJGaWVsZFZhbHVlID0gYm9keS51c2VyRmllbGRWYWx1ZSxcclxuXHRcdFx0XHRhcHByb3ZlclJvbGVJZHMgPSBib2R5LmFwcHJvdmVyUm9sZUlkcztcclxuXHRcdFx0aWYgKHVzZXJGaWVsZFZhbHVlKSB7XHJcblx0XHRcdFx0aWYgKHVzZXJGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pXVzZXJGaWVsZFZhbHVl5YC85Li6QXJyYXlcclxuXHRcdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0Um9sZVVzZXJzQnlVc2Vyc0FuZFJvbGVzKHNwYWNlSWQsIHVzZXJGaWVsZFZhbHVlLCBhcHByb3ZlclJvbGVJZHMpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5VXNlcnNBbmRSb2xlcyhzcGFjZUlkLCBbdXNlckZpZWxkVmFsdWVdLCBhcHByb3ZlclJvbGVJZHMpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCFuZXh0U3RlcFVzZXJzIHx8IG5leHRTdGVwVXNlcnMubGVuZ3RoIDwgMSkge1xyXG5cdFx0XHRcdFx0ZXJyb3IgPSBcIlJPTEVfTk9fTUVNQkVSU1wiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlcnJvciA9IFwiRklFTERfVkFMVUVfRU1QVFlcIjtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnb3JnRmllbGRSb2xlJzpcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0b3JnRmllbGQgPSBib2R5Lm9yZ0ZpZWxkLFxyXG5cdFx0XHRcdG9yZ0ZpZWxkVmFsdWUgPSBib2R5Lm9yZ0ZpZWxkVmFsdWUsXHJcblx0XHRcdFx0YXBwcm92ZXJSb2xlSWRzID0gYm9keS5hcHByb3ZlclJvbGVJZHM7XHJcblxyXG5cdFx0XHRpZiAob3JnRmllbGRWYWx1ZSkge1xyXG5cdFx0XHRcdGlmIChvcmdGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pW9yZ0ZpZWxkVmFsdWXlgLzkuLpBcnJheVxyXG5cdFx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyhzcGFjZUlkLCBvcmdGaWVsZFZhbHVlLCBhcHByb3ZlclJvbGVJZHMpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5T3Jnc0FuZFJvbGVzKHNwYWNlSWQsIFtvcmdGaWVsZFZhbHVlXSwgYXBwcm92ZXJSb2xlSWRzKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICghbmV4dFN0ZXBVc2VycyB8fCBuZXh0U3RlcFVzZXJzLmxlbmd0aCA8IDEpIHtcclxuXHRcdFx0XHRcdGVycm9yID0gXCJST0xFX05PX01FTUJFUlNcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZXJyb3IgPSBcIkZJRUxEX1ZBTFVFX0VNUFRZXCI7XHJcblx0XHRcdH1cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRicmVhaztcclxuXHR9XHJcblxyXG5cdHZhciByZXN1bHQgPSBbXTtcclxuXHJcblx0bmV4dFN0ZXBVc2Vycy5mb3JFYWNoKGZ1bmN0aW9uKHN1KSB7XHJcblx0XHR2YXIgbyA9IHtcclxuXHRcdFx0aWQ6IHN1LmlkLFxyXG5cdFx0XHRuYW1lOiBzdS5uYW1lXHJcblx0XHR9O1xyXG5cdFx0cmVzdWx0LnB1c2gobyk7XHJcblx0fSlcclxuXHJcblx0SnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0Y29kZTogMjAwLFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHQnbmV4dFN0ZXBVc2Vycyc6IFdvcmtmbG93TWFuYWdlci51bmlxVXNlcnMocmVzdWx0KSxcclxuXHRcdFx0J2Vycm9yJzogZXJyb3JcclxuXHRcdH1cclxuXHR9KTtcclxufSkiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldFNwYWNlVXNlcnNcIiwgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgdmFyXHJcbiAgICB1c2VySWRzID0gcmVxLmJvZHkudXNlcklkcyxcclxuICAgIHNwYWNlSWQgPSByZXEucXVlcnkuc3BhY2VJZCxcclxuICAgIHNwYWNlVXNlcnMgPSBbXVxyXG4gIDtcclxuXHJcbiAgaWYgKCF1c2VySWRzIHx8ICFzcGFjZUlkKSB7XHJcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcbiAgICAgIGNvZGU6IDIwMCxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgICdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNwYWNlVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgdXNlcklkcyk7XHJcblxyXG4gIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuICAgIGNvZGU6IDIwMCxcclxuICAgIGRhdGE6IHtcclxuICAgICAgJ3NwYWNlVXNlcnMnOiBzcGFjZVVzZXJzXHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pXHJcblxyXG5cclxuICBcclxuICAiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldEZvcm11bGFVc2VyT2JqZWN0c1wiLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuICB2YXJcclxuICAgIHVzZXJJZHMgPSByZXEuYm9keS51c2VySWRzLFxyXG4gICAgc3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxyXG4gICAgc3BhY2VVc2VycyA9IFtdXHJcbiAgO1xyXG5cclxuICBpZiAoIXVzZXJJZHMgfHwgIXNwYWNlSWQpIHtcclxuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuICAgICAgY29kZTogMjAwLFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgJ2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdmFyIHVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0KHNwYWNlSWQsIHVzZXJJZHMpO1xyXG5cclxuICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcbiAgICBjb2RlOiAyMDAsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICdzcGFjZVVzZXJzJzogdXNlcnNcclxuICAgIH1cclxuICB9KTtcclxufSlcclxuXHJcblxyXG4gIFxyXG4gICIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvaW5pdF9mb3JtdWxhX3ZhbHVlc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xyXG5cdHZhclxyXG5cdFx0ZmllbGRzID0gcmVxLmJvZHkuZmllbGRzLFxyXG5cdFx0YXV0b0Zvcm1Eb2MgPSByZXEuYm9keS5hdXRvRm9ybURvYyxcclxuXHRcdGFwcHJvdmVyID0gcmVxLmJvZHkuYXBwcm92ZXIsXHJcblx0XHRhcHBsaWNhbnQgPSByZXEuYm9keS5hcHBsaWNhbnQsXHJcblxyXG5cdFx0c3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxyXG5cclxuXHRcdHNwYWNlVXNlcnMgPSBbXTtcclxuXHJcblx0aWYgKCFmaWVsZHMgfHwgIXNwYWNlSWQgfHwgIWF1dG9Gb3JtRG9jIHx8ICFhcHByb3ZlciB8fCAhYXBwbGljYW50KSB7XHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGZvcm11bGFfdmFsdWVzID0gRm9ybV9mb3JtdWxhLmluaXRfZm9ybXVsYV92YWx1ZXMoZmllbGRzLCBhdXRvRm9ybURvYywgYXBwcm92ZXIsIGFwcGxpY2FudCwgc3BhY2VJZCk7XHJcblxyXG5cdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdGNvZGU6IDIwMCxcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0J2Zvcm11bGFfdmFsdWVzJzogZm9ybXVsYV92YWx1ZXNcclxuXHRcdH1cclxuXHR9KTtcclxufSlcclxuIiwiSnNvblJvdXRlcy5hZGQgXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9nZXROYW1lRm9yVXNlclwiLCAgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0dXNlcklkID0gcmVxLmJvZHkudXNlcklkXHJcblxyXG5cdFx0aWYgbm90IHVzZXJJZCBcclxuXHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywgXHJcblx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHR1c2VyID0gV29ya2Zsb3dNYW5hZ2VyLmdldE5hbWVGb3JVc2VyKHVzZXJJZClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCBcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7dXNlcjogdXNlcn1cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cclxuXHRcclxuXHRcdFxyXG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldE5hbWVGb3JVc2VyXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBlLCB1c2VyLCB1c2VySWQ7XG4gIHRyeSB7XG4gICAgdXNlcklkID0gcmVxLmJvZHkudXNlcklkO1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXNlciA9IFdvcmtmbG93TWFuYWdlci5nZXROYW1lRm9yVXNlcih1c2VySWQpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVzZXI6IHVzZXJcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL2FwaS9kZXNpZ25lci9zdGFydHVwJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0Y29tcGFueUlkID0gcmVxLnF1ZXJ5Py5jb21wYW55SWQgfHwgJydcclxuXHJcblx0XHRzcGFjZXNRdWVyeSA9IHsgYWRtaW5zOiBjdXJyZW50X3VzZXIgfVxyXG5cclxuXHRcdGlmIGNvbXBhbnlJZFxyXG5cdFx0XHRvcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoY29tcGFueUlkLCB7IGZpZWxkczogeyBzcGFjZToxIH0gfSlcclxuXHRcdFx0aWYgbm90IG9yZ1xyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NvbXBhbnlJZCBpcyBpbnZhbGlkJylcclxuXHJcblx0XHRcdHNwYWNlc1F1ZXJ5ID0geyBfaWQ6IG9yZy5zcGFjZSB9XHJcblxyXG5cdFx0c3BhY2VzID0gZGIuc3BhY2VzLmZpbmQoc3BhY2VzUXVlcnkpLmZldGNoKClcclxuXHJcblx0XHRzcGFjZUlkcyA9IF8ucGx1Y2sgc3BhY2VzLCAnX2lkJ1xyXG5cclxuXHRcdHF1ZXJ5ID0geyBzcGFjZTogeyAkaW46IHNwYWNlSWRzIH0gfVxyXG5cdFx0aWYgY29tcGFueUlkXHJcblx0XHRcdHF1ZXJ5LmNvbXBhbnlfaWQgPSBjb21wYW55SWRcclxuXHJcblx0XHRzcGFjZVVzZXJzID0gZGIuc3BhY2VfdXNlcnMuZmluZChxdWVyeSkuZmV0Y2goKVxyXG5cclxuXHRcdGZvcm1zID0gZGIuZm9ybXMuZmluZChxdWVyeSwgeyBmaWVsZHM6IHsgbmFtZToxLCBzdGF0ZToxLCBpc19kZWxldGVkOjEsIGlzX3ZhbGlkOjEsIHNwYWNlOjEsIGRlc2NyaXB0aW9uOjEsIGhlbHBfdGV4dDoxLFxyXG5cdFx0Y3JlYXRlZDoxLCBjcmVhdGVkX2J5OjEsIGN1cnJlbnQ6MSwgY2F0ZWdvcnk6MSwgaW5zdGFuY2Vfc3R5bGU6MSwgY29tcGFueV9pZDoxIH0gfSkuZmV0Y2goKVxyXG5cclxuXHRcdGZsb3dzID0gZGIuZmxvd3MuZmluZChxdWVyeSwgeyBmaWVsZHM6IHsgbmFtZToxLCBuYW1lX2Zvcm11bGE6MSwgY29kZV9mb3JtdWxhOjEsIHNwYWNlOjEsIGRlc2NyaXB0aW9uOjEsIGlzX3ZhbGlkOjEsIGZvcm06MSxcclxuXHRcdGZsb3d0eXBlOjEsIHN0YXRlOjEsIGlzX2RlbGV0ZWQ6MSwgY3JlYXRlZDoxLCBjcmVhdGVkX2J5OjEsIGhlbHBfdGV4dDoxLCBjdXJyZW50X25vOjEsIGN1cnJlbnQ6MSwgcGVybXM6MSwgZXJyb3JfbWVzc2FnZToxLCBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOjEsIGNvbXBhbnlfaWQ6MSB9IH0pLmZldGNoKClcclxuXHJcblx0XHRyb2xlcyA9IGRiLmZsb3dfcm9sZXMuZmluZChxdWVyeSkuZmV0Y2goKVxyXG5cclxuXHRcdG9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQocXVlcnkpLmZldGNoKClcclxuXHJcblx0XHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpXHJcblxyXG5cdFx0Y2F0ZWdvcmllcyA9IGRiLmNhdGVnb3JpZXMuZmluZCh7IHNwYWNlOiB7ICRpbjogc3BhY2VJZHMgfSB9KS5mZXRjaCgpXHJcblxyXG5cdFx0dXNlcklkcyA9IF8ucGx1Y2sgc3BhY2VVc2VycywgJ3VzZXInXHJcblx0XHR1c2VycyA9IGRiLnVzZXJzLmZpbmQoeyBfaWQ6IHsgJGluOiB1c2VySWRzIH0gfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pLmZldGNoKClcclxuXHJcblx0XHRyZXN1bHQgPSB7fVxyXG5cdFx0cmVzdWx0LlNwYWNlVXNlcnMgPSBzcGFjZVVzZXJzXHJcblx0XHRyZXN1bHQuVXNlcnMgPSB1c2Vyc1xyXG5cdFx0cmVzdWx0LkZvcm1zID0gZm9ybXNcclxuXHRcdHJlc3VsdC5GbG93cyA9IGZsb3dzXHJcblx0XHRyZXN1bHQuT3JnYW5pemF0aW9ucyA9IG9yZ2FuaXphdGlvbnNcclxuXHRcdHJlc3VsdC5Qb3NpdGlvbnMgPSBwb3NpdGlvbnNcclxuXHRcdHJlc3VsdC5Sb2xlcyA9IHJvbGVzXHJcblx0XHRyZXN1bHQuQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXNcclxuXHRcdHJlc3VsdC5TcGFjZXMgPSBzcGFjZXNcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdGRhdGE6IHJlc3VsdFxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfVxyXG5cclxuIiwiSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvYXBpL2Rlc2lnbmVyL3N0YXJ0dXAnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY2F0ZWdvcmllcywgY29tcGFueUlkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93cywgZm9ybXMsIG9yZywgb3JnYW5pemF0aW9ucywgcG9zaXRpb25zLCBxdWVyeSwgcmVmLCByZXN1bHQsIHJvbGVzLCBzcGFjZUlkcywgc3BhY2VVc2Vycywgc3BhY2VzLCBzcGFjZXNRdWVyeSwgdXNlcklkcywgdXNlcnM7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgY29tcGFueUlkID0gKChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuY29tcGFueUlkIDogdm9pZCAwKSB8fCAnJztcbiAgICBzcGFjZXNRdWVyeSA9IHtcbiAgICAgIGFkbWluczogY3VycmVudF91c2VyXG4gICAgfTtcbiAgICBpZiAoY29tcGFueUlkKSB7XG4gICAgICBvcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoY29tcGFueUlkLCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHNwYWNlOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFvcmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY29tcGFueUlkIGlzIGludmFsaWQnKTtcbiAgICAgIH1cbiAgICAgIHNwYWNlc1F1ZXJ5ID0ge1xuICAgICAgICBfaWQ6IG9yZy5zcGFjZVxuICAgICAgfTtcbiAgICB9XG4gICAgc3BhY2VzID0gZGIuc3BhY2VzLmZpbmQoc3BhY2VzUXVlcnkpLmZldGNoKCk7XG4gICAgc3BhY2VJZHMgPSBfLnBsdWNrKHNwYWNlcywgJ19pZCcpO1xuICAgIHF1ZXJ5ID0ge1xuICAgICAgc3BhY2U6IHtcbiAgICAgICAgJGluOiBzcGFjZUlkc1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGNvbXBhbnlJZCkge1xuICAgICAgcXVlcnkuY29tcGFueV9pZCA9IGNvbXBhbnlJZDtcbiAgICB9XG4gICAgc3BhY2VVc2VycyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQocXVlcnkpLmZldGNoKCk7XG4gICAgZm9ybXMgPSBkYi5mb3Jtcy5maW5kKHF1ZXJ5LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZTogMSxcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGlzX2RlbGV0ZWQ6IDEsXG4gICAgICAgIGlzX3ZhbGlkOiAxLFxuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgZGVzY3JpcHRpb246IDEsXG4gICAgICAgIGhlbHBfdGV4dDogMSxcbiAgICAgICAgY3JlYXRlZDogMSxcbiAgICAgICAgY3JlYXRlZF9ieTogMSxcbiAgICAgICAgY3VycmVudDogMSxcbiAgICAgICAgY2F0ZWdvcnk6IDEsXG4gICAgICAgIGluc3RhbmNlX3N0eWxlOiAxLFxuICAgICAgICBjb21wYW55X2lkOiAxXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICBmbG93cyA9IGRiLmZsb3dzLmZpbmQocXVlcnksIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBuYW1lOiAxLFxuICAgICAgICBuYW1lX2Zvcm11bGE6IDEsXG4gICAgICAgIGNvZGVfZm9ybXVsYTogMSxcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAxLFxuICAgICAgICBpc192YWxpZDogMSxcbiAgICAgICAgZm9ybTogMSxcbiAgICAgICAgZmxvd3R5cGU6IDEsXG4gICAgICAgIHN0YXRlOiAxLFxuICAgICAgICBpc19kZWxldGVkOiAxLFxuICAgICAgICBjcmVhdGVkOiAxLFxuICAgICAgICBjcmVhdGVkX2J5OiAxLFxuICAgICAgICBoZWxwX3RleHQ6IDEsXG4gICAgICAgIGN1cnJlbnRfbm86IDEsXG4gICAgICAgIGN1cnJlbnQ6IDEsXG4gICAgICAgIHBlcm1zOiAxLFxuICAgICAgICBlcnJvcl9tZXNzYWdlOiAxLFxuICAgICAgICBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxuICAgICAgICBjb21wYW55X2lkOiAxXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICByb2xlcyA9IGRiLmZsb3dfcm9sZXMuZmluZChxdWVyeSkuZmV0Y2goKTtcbiAgICBvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpO1xuICAgIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQocXVlcnkpLmZldGNoKCk7XG4gICAgY2F0ZWdvcmllcyA9IGRiLmNhdGVnb3JpZXMuZmluZCh7XG4gICAgICBzcGFjZToge1xuICAgICAgICAkaW46IHNwYWNlSWRzXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICB1c2VySWRzID0gXy5wbHVjayhzcGFjZVVzZXJzLCAndXNlcicpO1xuICAgIHVzZXJzID0gZGIudXNlcnMuZmluZCh7XG4gICAgICBfaWQ6IHtcbiAgICAgICAgJGluOiB1c2VySWRzXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU6IDFcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICAgIHJlc3VsdCA9IHt9O1xuICAgIHJlc3VsdC5TcGFjZVVzZXJzID0gc3BhY2VVc2VycztcbiAgICByZXN1bHQuVXNlcnMgPSB1c2VycztcbiAgICByZXN1bHQuRm9ybXMgPSBmb3JtcztcbiAgICByZXN1bHQuRmxvd3MgPSBmbG93cztcbiAgICByZXN1bHQuT3JnYW5pemF0aW9ucyA9IG9yZ2FuaXphdGlvbnM7XG4gICAgcmVzdWx0LlBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICByZXN1bHQuUm9sZXMgPSByb2xlcztcbiAgICByZXN1bHQuQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG4gICAgcmVzdWx0LlNwYWNlcyA9IHNwYWNlcztcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YTogcmVzdWx0XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L2VuZ2luZScsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0FwcHJvdmFscyddLCAoYXBwcm92ZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0dXVmbG93TWFuYWdlci53b3JrZmxvd19lbmdpbmUoYXBwcm92ZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8sIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YToge31cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L2VuZ2luZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnQXBwcm92YWxzJ10sIGZ1bmN0aW9uKGFwcHJvdmVfZnJvbV9jbGllbnQpIHtcbiAgICAgIHJldHVybiB1dWZsb3dNYW5hZ2VyLndvcmtmbG93X2VuZ2luZShhcHByb3ZlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbywgY3VycmVudF91c2VyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvZHJhZnRzJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cclxuXHRcdGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheVxyXG5cclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0bmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRcdG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7IF9pZDogbmV3X2luc19pZCB9LCB7IGZpZWxkczogeyBzcGFjZTogMSwgZmxvdzogMSwgZmxvd192ZXJzaW9uOiAxLCBmb3JtOiAxLCBmb3JtX3ZlcnNpb246IDEgfSB9KVxyXG5cclxuXHRcdFx0aW5zZXJ0ZWRfaW5zdGFuY2VzLnB1c2gobmV3X2lucylcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGluc2VydHM6IGluc2VydGVkX2luc3RhbmNlcyB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxyXG5cdFx0fVxyXG5cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9kcmFmdHMnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGEsIGluc2VydGVkX2luc3RhbmNlcztcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIG5ld19pbnMsIG5ld19pbnNfaWQ7XG4gICAgICBuZXdfaW5zX2lkID0gdXVmbG93TWFuYWdlci5jcmVhdGVfaW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnQsIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgIG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogbmV3X2luc19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICBmbG93OiAxLFxuICAgICAgICAgIGZsb3dfdmVyc2lvbjogMSxcbiAgICAgICAgICBmb3JtOiAxLFxuICAgICAgICAgIGZvcm1fdmVyc2lvbjogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbnNlcnRlZF9pbnN0YW5jZXMucHVzaChuZXdfaW5zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBpbnNlcnRzOiBpbnNlcnRlZF9pbnN0YW5jZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVtb3ZlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cclxuXHRcdGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheVxyXG5cclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0IyDojrflj5bkuIDkuKppbnN0YW5jZVxyXG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2VcclxuXHRcdFx0IyDojrflj5bkuIDkuKpzcGFjZVxyXG5cdFx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2XkuIvnmoTkuIDkuKp1c2VyXHJcblx0XHRcdHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogaW5zdGFuY2UuZmxvd30pXHJcblxyXG5cdFx0XHRzcGFjZVVzZXJPcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcclxuXHRcdFx0XHRfaWQ6IHtcclxuXHRcdFx0XHRcdCRpbjogc3BhY2VfdXNlci5vcmdhbml6YXRpb25zXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KS5mZXRjaCgpO1xyXG5cclxuXHRcdFx0IyDliKTmlq3kuIDkuKrnlKjmiLfmmK/lkKbmmK/kuIDkuKppbnN0YW5jZeeahOaPkOS6pOiAheaIluiAheeUs+ivt+S6uiDmiJZTcGFjZUFkbWluXHJcblx0XHRcdGlmIChpbnN0YW5jZS5zdWJtaXR0ZXIgaXNudCBjdXJyZW50X3VzZXIpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyBjdXJyZW50X3VzZXIpIGFuZCAhV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGZsb3csIHNwYWNlX3VzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpXHJcblx0XHRcdFx0dGhyb3cgbmV3ICBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oKo5LiN6IO95Yig6Zmk5q2k55Sz6K+35Y2V44CCXCIpXHJcblxyXG5cdFx0XHRkZWxldGVfb2JqID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblx0XHRcdGRlbGV0ZV9vYmouZGVsZXRlZCA9IG5ldyBEYXRlXHJcblx0XHRcdGRlbGV0ZV9vYmouZGVsZXRlZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cclxuXHRcdFx0ZGIuZGVsZXRlZF9pbnN0YW5jZXMuaW5zZXJ0KGRlbGV0ZV9vYmopXHJcblxyXG5cdFx0XHQjIOWIoOmZpGluc3RhbmNlXHJcblx0XHRcdGRiLmluc3RhbmNlcy5yZW1vdmUoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblxyXG5cdFx0XHRpZiBkZWxldGVfb2JqLnN0YXRlIGlzbnQgXCJkcmFmdFwiXHJcblx0XHRcdFx0I+WPkemAgee7meW+heWkhOeQhuS6uiwgI+WPkemAgee7meiiq+S8oOmYheS6ulxyXG5cdFx0XHRcdGluYm94X3VzZXJzID0gaWYgZGVsZXRlX29iai5pbmJveF91c2VycyB0aGVuIGRlbGV0ZV9vYmouaW5ib3hfdXNlcnMgZWxzZSBbXVxyXG5cdFx0XHRcdGNjX3VzZXJzID0gaWYgZGVsZXRlX29iai5jY191c2VycyB0aGVuIGRlbGV0ZV9vYmouY2NfdXNlcnMgZWxzZSBbXVxyXG5cdFx0XHRcdHVzZXJfaWRzID0gXy51bmlxKGluYm94X3VzZXJzLmNvbmNhdChjY191c2VycykpXHJcblx0XHRcdFx0Xy5lYWNoIHVzZXJfaWRzLCAodV9pZCktPlxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwidGVybWluYXRlX2FwcHJvdmFsXCIsIHVfaWQpXHJcblxyXG5cdFx0XHRcdCMg5Y+R6YCB5Yig6Zmk6YCa55+l6YKu5Lu257uZ6YCa6L+H5qCh6aqM55qE55Sz6K+35Lq6L+Whq+WNleS6uu+8jOWvueeUs+ivt+S6ui/loavljZXkurrlkITnlJ/miJDkuIDmnaFzbXRwIG1lc3NhZ2VcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcIm1vbml0b3JfZGVsZXRlX2FwcGxpY2FudFwiLCBkZWxldGVfb2JqLCBcIlwiLCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBpbnNlcnRzOiBpbnNlcnRlZF9pbnN0YW5jZXN9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuXHRcclxuXHRcdCIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVtb3ZlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhLCBpbnNlcnRlZF9pbnN0YW5jZXM7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBpbnNlcnRlZF9pbnN0YW5jZXMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBjY191c2VycywgZGVsZXRlX29iaiwgZmxvdywgaW5ib3hfdXNlcnMsIGluc3RhbmNlLCBzcGFjZSwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucywgc3BhY2VfaWQsIHNwYWNlX3VzZXIsIHVzZXJfaWRzO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKTtcbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICBzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgICAgc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlLmZsb3dcbiAgICAgIH0pO1xuICAgICAgc3BhY2VVc2VyT3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogc3BhY2VfdXNlci5vcmdhbml6YXRpb25zXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBpZiAoKGluc3RhbmNlLnN1Ym1pdHRlciAhPT0gY3VycmVudF91c2VyKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSAmJiAhV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGZsb3csIHNwYWNlX3VzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oKo5LiN6IO95Yig6Zmk5q2k55Sz6K+35Y2V44CCXCIpO1xuICAgICAgfVxuICAgICAgZGVsZXRlX29iaiA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKTtcbiAgICAgIGRlbGV0ZV9vYmouZGVsZXRlZCA9IG5ldyBEYXRlO1xuICAgICAgZGVsZXRlX29iai5kZWxldGVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgZGIuZGVsZXRlZF9pbnN0YW5jZXMuaW5zZXJ0KGRlbGV0ZV9vYmopO1xuICAgICAgZGIuaW5zdGFuY2VzLnJlbW92ZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICBpZiAoZGVsZXRlX29iai5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICAgIGluYm94X3VzZXJzID0gZGVsZXRlX29iai5pbmJveF91c2VycyA/IGRlbGV0ZV9vYmouaW5ib3hfdXNlcnMgOiBbXTtcbiAgICAgICAgY2NfdXNlcnMgPSBkZWxldGVfb2JqLmNjX3VzZXJzID8gZGVsZXRlX29iai5jY191c2VycyA6IFtdO1xuICAgICAgICB1c2VyX2lkcyA9IF8udW5pcShpbmJveF91c2Vycy5jb25jYXQoY2NfdXNlcnMpKTtcbiAgICAgICAgXy5lYWNoKHVzZXJfaWRzLCBmdW5jdGlvbih1X2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1X2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcIm1vbml0b3JfZGVsZXRlX2FwcGxpY2FudFwiLCBkZWxldGVfb2JqLCBcIlwiLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgaW5zZXJ0czogaW5zZXJ0ZWRfaW5zdGFuY2VzXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L3N1Ym1pdCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHRcdHJlc3VsdCA9IFtdXHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdHIgPSB1dWZsb3dNYW5hZ2VyLnN1Ym1pdF9pbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdGlmIHIuYWxlcnRzXHJcblx0XHRcdFx0cmVzdWx0LnB1c2gocilcclxuXHRcdFx0aWYgbm90IF8uaXNFbXB0eShpbnN0YW5jZV9mcm9tX2NsaWVudFsnaW5ib3hfdXNlcnMnXSlcclxuXHRcdFx0XHQjIOWmguaenOaYr+i9rOWPkeWwsemcgOimgee7meW9k+WJjeeUqOaIt+WPkemAgXB1c2gg6YeN5paw6K6h566XYmFkZ2VcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyKTtcclxuXHJcblx0XHRcdGlmIF8uaXNFbXB0eShyLmFsZXJ0cylcclxuXHRcdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50Ll9pZClcclxuXHRcdFx0XHRmbG93X2lkID0gaW5zdGFuY2UuZmxvd1xyXG5cdFx0XHRcdGN1cnJlbnRfYXBwcm92ZSA9IGluc3RhbmNlX2Zyb21fY2xpZW50LnRyYWNlc1swXS5hcHByb3Zlc1swXVxyXG5cdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGZsb3dfaWQsIGluc3RhbmNlLCBjdXJyZW50X2FwcHJvdmUsICdkcmFmdF9zdWJtaXQnLCBjdXJyZW50X3VzZXIsIGluc3RhbmNlLmluYm94X3VzZXJzKVxyXG5cclxuXHRcdFx0IyDliKTmlq3nlLPor7fljZXmmK/lkKbliIblj5HvvIzliIblj5Hmlofku7bnu5PmnZ/mj5DphpLlj5HotbfkurpcclxuXHRcdFx0dXVmbG93TWFuYWdlci5kaXN0cmlidXRlZEluc3RhbmNlc1JlbWluZChpbnN0YW5jZV9mcm9tX2NsaWVudClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdGRhdGE6IHsgcmVzdWx0OiByZXN1bHQgfVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfVxyXG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L3N1Ym1pdCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YSwgcmVzdWx0O1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgcmVzdWx0ID0gW107XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBjdXJyZW50X2FwcHJvdmUsIGZsb3dfaWQsIGluc3RhbmNlLCByO1xuICAgICAgciA9IHV1Zmxvd01hbmFnZXIuc3VibWl0X2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICBpZiAoci5hbGVydHMpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocik7XG4gICAgICB9XG4gICAgICBpZiAoIV8uaXNFbXB0eShpbnN0YW5jZV9mcm9tX2NsaWVudFsnaW5ib3hfdXNlcnMnXSkpIHtcbiAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIGN1cnJlbnRfdXNlcik7XG4gICAgICB9XG4gICAgICBpZiAoXy5pc0VtcHR5KHIuYWxlcnRzKSkge1xuICAgICAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50Ll9pZCk7XG4gICAgICAgIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xuICAgICAgICBjdXJyZW50X2FwcHJvdmUgPSBpbnN0YW5jZV9mcm9tX2NsaWVudC50cmFjZXNbMF0uYXBwcm92ZXNbMF07XG4gICAgICAgIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGZsb3dfaWQsIGluc3RhbmNlLCBjdXJyZW50X2FwcHJvdmUsICdkcmFmdF9zdWJtaXQnLCBjdXJyZW50X3VzZXIsIGluc3RhbmNlLmluYm94X3VzZXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1dWZsb3dNYW5hZ2VyLmRpc3RyaWJ1dGVkSW5zdGFuY2VzUmVtaW5kKGluc3RhbmNlX2Zyb21fY2xpZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy90ZXJtaW5hdGUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdHRlcm1pbmF0ZV9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRlcm1pbmF0ZV9yZWFzb25cIl1cclxuXHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qmluc3RhbmNlXHJcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdFx0XHRmbG93X2lkID0gaW5zdGFuY2UuZmxvd1xyXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNlXHJcblx0XHRcdHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdFx0IyDojrflj5bkuIDkuKpmbG93XHJcblx0XHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coZmxvd19pZClcclxuXHRcdFx0IyDliKTmlq3kuIDkuKppbnN0YW5jZeaYr+WQpuS4uuWuoeaguOS4reeKtuaAgVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VQZW5kaW5nKGluc3RhbmNlKVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNl5LiL55qE5LiA5LiqdXNlclxyXG5cdFx0XHRzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0IyDojrflj5ZzcGFjZV91c2Vy5omA5Zyo55qE6YOo6Zeo5L+h5oGvXHJcblx0XHRcdHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcclxuXHRcdFx0IyDojrflj5bnu5PmnZ/oioLngrlcclxuXHRcdFx0aW5zdGFuY2VfZmxvd192ZXIgPSBudWxsXHJcblx0XHRcdGZsb3dfdmVyX2VuZF9zdGVwID0gbnVsbFxyXG5cdFx0XHRmbG93X3ZlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0Zmxvd192ZXJzLnB1c2goZmxvdy5jdXJyZW50KVxyXG5cdFx0XHRmbG93X3ZlcnMgPSBmbG93X3ZlcnMuY29uY2F0KGZsb3cuaGlzdG9yeXMpXHJcblx0XHRcdGluc3RhbmNlX2Zsb3dfdmVyID0gXy5maW5kKGZsb3dfdmVycywgKGZfdmVyKS0+XHJcblx0XHRcdFx0cmV0dXJuIGZfdmVyLl9pZCBpcyBpbnN0YW5jZS5mbG93X3ZlcnNpb25cclxuXHRcdFx0KVxyXG5cdFx0XHRpZiBub3QgaW5zdGFuY2VfZmxvd192ZXJcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNleWvueW6lOa1geeoi+eJiOacrFwiKVxyXG5cdFx0XHRmbG93X3Zlcl9lbmRfc3RlcCA9IF8uZmluZChpbnN0YW5jZV9mbG93X3Zlci5zdGVwcywgKGZfc3RlcCktPlxyXG5cdFx0XHRcdHJldHVybiBmX3N0ZXAuc3RlcF90eXBlIGlzIFwiZW5kXCJcclxuXHRcdFx0KVxyXG5cdFx0XHQjIOiwg+eUqGdldEZsb3dQZXJtaXNzaW9uc+aWueazle+8jOeci+i/lOWbnueahOe7k+aenOS4reaYr+WQpuaciWFkbWluXHJcblx0XHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHQjIHNwYWNl55qEYWRtaW4sIOWhq+WNleS6uiDnlLPor7fkurog5pyJ5p2D6ZmQIOWPlua2iOeUs+ivt1xyXG5cdFx0XHRpZiBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpIG9yIHNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpIG9yIGluc3RhbmNlLnN1Ym1pdHRlciBpcyBjdXJyZW50X3VzZXIgb3IgaW5zdGFuY2UuYXBwbGljYW50IGlzIGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdGlmIG5vdCB0ZXJtaW5hdGVfcmVhc29uXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLFwi6L+Y5pyq5aGr5YaZ5by65Yi257uT5p2f55Sz6K+35Y2V55qE55CG55Sx77yM5pON5L2c5aSx6LSlXCIpXHJcblxyXG5cdFx0XHRcdGluc3RhbmNlX3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgKHRyYWNlKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlc1xyXG5cdFx0XHRcdGkgPSAwXHJcblx0XHRcdFx0d2hpbGUgaSA8IHRyYWNlcy5sZW5ndGhcclxuXHRcdFx0XHRcdGlmIHRyYWNlc1tpXS5pc19maW5pc2hlZCBpcyBmYWxzZVxyXG5cdFx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0XHRcdHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0dHJhY2VzW2ldLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdGggPSAwXHJcblx0XHRcdFx0XHRcdHdoaWxlIGggPCB0cmFjZXNbaV0uYXBwcm92ZXMubGVuZ3RoXHJcblx0XHRcdFx0XHRcdFx0aWYgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkIGlzIGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmp1ZGdlID0gbnVsbFxyXG5cdFx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmRlc2NyaXB0aW9uID0gbnVsbFxyXG5cdFx0XHRcdFx0XHRcdGgrK1xyXG5cdFx0XHRcdFx0XHQjIOaPkuWFpeW9k+WJjVRyYWNlIHRyYWNlLmFwcHJvdmXorrDlvZXvvJrlvZN0cmFjZS50eXBl5Li65Y+W5Zue44CB5by65Yi257uT5p2f5pe277yMaXNfcmVhZD10cnVl5LiUcmVhZF9kYXRl5Li65b2T5YmN5pe26Ze044CCXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IGluc3RhbmNlX3RyYWNlLl9pZFxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLnVzZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl1cclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBpbnN0YW5jZV90cmFjZS5kdWVfZGF0ZVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19yZWFkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmRlc2NyaXB0aW9uID0gdGVybWluYXRlX3JlYXNvblxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuY29zdF90aW1lID0gbmV3QXBwcm92ZS5maW5pc2hfZGF0ZSAtIG5ld0FwcHJvdmUuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKVxyXG5cdFx0XHRcdFx0aSsrXHJcblxyXG5cdFx0XHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2XorrDlvZVcclxuXHRcdFx0XHRuZXdUcmFjZSA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdFx0bmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRcdG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtpbnN0YW5jZV90cmFjZS5faWRdXHJcblx0XHRcdFx0IyB0eXBlLS0t5YGc55SoXHJcblx0XHRcdFx0IyBuZXdUcmFjZS50eXBlID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGVwID0gZmxvd192ZXJfZW5kX3N0ZXAuX2lkXHJcblx0XHRcdFx0bmV3VHJhY2UubmFtZSA9IGZsb3dfdmVyX2VuZF9zdGVwLm5hbWVcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3VHJhY2UuZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdUcmFjZS5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblxyXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwiY29tcGxldGVkXCJcclxuXHRcdFx0XHRzZXRPYmouZmluYWxfZGVjaXNpb24gPSBcInRlcm1pbmF0ZWRcIlxyXG5cdFx0XHRcdG9sZF9pbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzXHJcblx0XHRcdFx0b2xkX2NjX3VzZXJzID0gaW5zdGFuY2UuY2NfdXNlcnNcclxuXHRcdFx0XHRvbGRfb3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzXHJcblx0XHRcdFx0dGVtcFVzZXJzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0Xy5lYWNoKGluc3RhbmNlX3RyYWNlLmFwcHJvdmVzLCAobmZ0X2FwcHJvdmUpLT5cclxuXHRcdFx0XHRcdHRlbXBVc2Vycy5wdXNoKG5mdF9hcHByb3ZlLnVzZXIpXHJcblx0XHRcdFx0XHR0ZW1wVXNlcnMucHVzaChuZnRfYXBwcm92ZS5oYW5kbGVyKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQodGVtcFVzZXJzKSlcclxuXHRcdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRzZXRPYmouY2NfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHR0cmFjZXMucHVzaChuZXdUcmFjZSlcclxuXHRcdFx0XHRzZXRPYmoudHJhY2VzID0gdHJhY2VzXHJcblxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IGZsb3dfdmVyX2VuZF9zdGVwLm5hbWVcclxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gZmFsc2VcclxuXHJcblx0XHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHNldDogc2V0T2JqfSlcclxuXHRcdFx0XHRpZiByXHJcblx0XHRcdFx0XHRpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRcdFx0I+mAmuefpeWhq+WNleS6uuOAgeeUs+ivt+S6ulxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJzdWJtaXRfdGVybWluYXRlX2FwcGxpY2FudFwiLCBpbnMsIHRlcm1pbmF0ZV9yZWFzb24sIGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cclxuXHRcdFx0XHRcdCPlj5HpgIHnu5nlvoXlpITnkIbkurog6KKr5Lyg6ZiF5Lq6XHJcblx0XHRcdFx0XHRpZiBvbGRfaW5ib3hfdXNlcnNcclxuXHRcdFx0XHRcdFx0Xy5lYWNoKF8udW5pcShvbGRfaW5ib3hfdXNlcnMuY29uY2F0KG9sZF9jY191c2VycykpLCAodXNlcl9pZCktPlxyXG5cdFx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1c2VyX2lkKVxyXG5cdFx0XHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3Rlcm1pbmF0ZScsIGN1cnJlbnRfdXNlciwgW10pXHJcblxyXG5cdFx0I+WPkemAgea2iOaBr+e7meW9k+WJjeeUqOaIt1xyXG5cdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbylcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0ZGF0YToge31cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy90ZXJtaW5hdGUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGE7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIGZsb3csIGZsb3dfaWQsIGZsb3dfdmVyX2VuZF9zdGVwLCBmbG93X3ZlcnMsIGgsIGksIGlucywgaW5zdGFuY2UsIGluc3RhbmNlX2Zsb3dfdmVyLCBpbnN0YW5jZV9pZCwgaW5zdGFuY2VfdHJhY2UsIG5ld0FwcHJvdmUsIG5ld1RyYWNlLCBub3csIG9sZF9jY191c2Vycywgb2xkX2luYm94X3VzZXJzLCBvbGRfb3V0Ym94X3VzZXJzLCBwZXJtaXNzaW9ucywgciwgc2V0T2JqLCBzcGFjZSwgc3BhY2VfaWQsIHNwYWNlX3VzZXIsIHNwYWNlX3VzZXJfb3JnX2luZm8sIHRlbXBVc2VycywgdGVybWluYXRlX3JlYXNvbiwgdHJhY2VzO1xuICAgICAgdGVybWluYXRlX3JlYXNvbiA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1widGVybWluYXRlX3JlYXNvblwiXTtcbiAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl07XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgICAgIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xuICAgICAgc3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coZmxvd19pZCk7XG4gICAgICB1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VQZW5kaW5nKGluc3RhbmNlKTtcbiAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcik7XG4gICAgICBpbnN0YW5jZV9mbG93X3ZlciA9IG51bGw7XG4gICAgICBmbG93X3Zlcl9lbmRfc3RlcCA9IG51bGw7XG4gICAgICBmbG93X3ZlcnMgPSBuZXcgQXJyYXk7XG4gICAgICBmbG93X3ZlcnMucHVzaChmbG93LmN1cnJlbnQpO1xuICAgICAgZmxvd192ZXJzID0gZmxvd192ZXJzLmNvbmNhdChmbG93Lmhpc3RvcnlzKTtcbiAgICAgIGluc3RhbmNlX2Zsb3dfdmVyID0gXy5maW5kKGZsb3dfdmVycywgZnVuY3Rpb24oZl92ZXIpIHtcbiAgICAgICAgcmV0dXJuIGZfdmVyLl9pZCA9PT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWluc3RhbmNlX2Zsb3dfdmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5om+5Yiw55Sz6K+35Y2V5a+55bqU5rWB56iL54mI5pysXCIpO1xuICAgICAgfVxuICAgICAgZmxvd192ZXJfZW5kX3N0ZXAgPSBfLmZpbmQoaW5zdGFuY2VfZmxvd192ZXIuc3RlcHMsIGZ1bmN0aW9uKGZfc3RlcCkge1xuICAgICAgICByZXR1cm4gZl9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJlbmRcIjtcbiAgICAgIH0pO1xuICAgICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoZmxvd19pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgIGlmIChwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpIHx8IHNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpIHx8IGluc3RhbmNlLnN1Ym1pdHRlciA9PT0gY3VycmVudF91c2VyIHx8IGluc3RhbmNlLmFwcGxpY2FudCA9PT0gY3VycmVudF91c2VyKSB7XG4gICAgICAgIGlmICghdGVybWluYXRlX3JlYXNvbikge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi6L+Y5pyq5aGr5YaZ5by65Yi257uT5p2f55Sz6K+35Y2V55qE55CG55Sx77yM5pON5L2c5aSx6LSlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlX3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgICByZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgPT09IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0cmFjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHRyYWNlc1tpXS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0cmFjZXNbaV0uZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICBoID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChoIDwgdHJhY2VzW2ldLmFwcHJvdmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBpZiAodHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5qdWRnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmRlc2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBoKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdBcHByb3ZlID0gbmV3IE9iamVjdDtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUudHJhY2UgPSBpbnN0YW5jZV90cmFjZS5faWQ7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5kdWVfZGF0ZSA9IGluc3RhbmNlX3RyYWNlLmR1ZV9kYXRlO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5yZWFkX2RhdGUgPSBub3c7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5kZXNjcmlwdGlvbiA9IHRlcm1pbmF0ZV9yZWFzb247XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmNvc3RfdGltZSA9IG5ld0FwcHJvdmUuZmluaXNoX2RhdGUgLSBuZXdBcHByb3ZlLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIG5ld1RyYWNlID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgbmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2luc3RhbmNlX3RyYWNlLl9pZF07XG4gICAgICAgIG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RlcCA9IGZsb3dfdmVyX2VuZF9zdGVwLl9pZDtcbiAgICAgICAgbmV3VHJhY2UubmFtZSA9IGZsb3dfdmVyX2VuZF9zdGVwLm5hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICBuZXdUcmFjZS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICBzZXRPYmouc3RhdGUgPSBcImNvbXBsZXRlZFwiO1xuICAgICAgICBzZXRPYmouZmluYWxfZGVjaXNpb24gPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgb2xkX2luYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnM7XG4gICAgICAgIG9sZF9jY191c2VycyA9IGluc3RhbmNlLmNjX3VzZXJzO1xuICAgICAgICBvbGRfb3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzO1xuICAgICAgICB0ZW1wVXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIF8uZWFjaChpbnN0YW5jZV90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24obmZ0X2FwcHJvdmUpIHtcbiAgICAgICAgICB0ZW1wVXNlcnMucHVzaChuZnRfYXBwcm92ZS51c2VyKTtcbiAgICAgICAgICByZXR1cm4gdGVtcFVzZXJzLnB1c2gobmZ0X2FwcHJvdmUuaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQodGVtcFVzZXJzKSk7XG4gICAgICAgIHNldE9iai5pbmJveF91c2VycyA9IG5ldyBBcnJheTtcbiAgICAgICAgc2V0T2JqLmNjX3VzZXJzID0gbmV3IEFycmF5O1xuICAgICAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgdHJhY2VzLnB1c2gobmV3VHJhY2UpO1xuICAgICAgICBzZXRPYmoudHJhY2VzID0gdHJhY2VzO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBmbG93X3Zlcl9lbmRfc3RlcC5uYW1lO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gZmFsc2U7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJzdWJtaXRfdGVybWluYXRlX2FwcGxpY2FudFwiLCBpbnMsIHRlcm1pbmF0ZV9yZWFzb24sIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgICBpZiAob2xkX2luYm94X3VzZXJzKSB7XG4gICAgICAgICAgICBfLmVhY2goXy51bmlxKG9sZF9pbmJveF91c2Vycy5jb25jYXQob2xkX2NjX3VzZXJzKSksIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1c2VyX2lkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICd0ZXJtaW5hdGUnLCBjdXJyZW50X3VzZXIsIFtdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7fVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWFzc2lnbicsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFsnX2lkJ11cclxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0XHRcdCMg6aqM6K+BaW5zdGFuY2XkuLrlrqHmoLjkuK3nirbmgIFcclxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSlcclxuXHRcdFx0IyDpqozor4HlvZPliY3miafooYzovaznrb7moLjnmoR0cmFjZeacque7k+adn1xyXG5cdFx0XHRsYXN0X3RyYWNlX2Zyb21fY2xpZW50ID0gXy5sYXN0KGluc3RhbmNlX2Zyb21fY2xpZW50W1widHJhY2VzXCJdKVxyXG5cdFx0XHRsYXN0X3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgKHQpIC0+XHJcblx0XHRcdFx0cmV0dXJuIHQuX2lkIGlzIGxhc3RfdHJhY2VfZnJvbV9jbGllbnRbXCJfaWRcIl1cclxuXHRcdFx0KVxyXG5cdFx0XHRpZiBsYXN0X3RyYWNlLmlzX2ZpbmlzaGVkIGlzIHRydWVcclxuXHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdCMg6aqM6K+BbG9naW4gdXNlcl9pZOWvueivpea1geeoi+acieeuoeeQhueUs+ivt+WNleeahOadg+mZkFxyXG5cdFx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoeyBfaWQ6IHNwYWNlX2lkIH0sIHsgZmllbGRzOiB7IGFkbWluczogMSB9IH0pXHJcblx0XHRcdGlmIChub3QgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgYW5kIChub3Qgc3BhY2UuYWRtaW5zLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIilcclxuXHJcblx0XHRcdGluYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnNcclxuXHRcdFx0aW5ib3hfdXNlcnNfZnJvbV9jbGllbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImluYm94X3VzZXJzXCJdXHJcblx0XHRcdHJlYXNzaWduX3JlYXNvbiA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVhc3NpZ25fcmVhc29uXCJdXHJcblx0XHRcdG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQpXHJcblx0XHRcdG5ld19pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2Vyc19mcm9tX2NsaWVudCwgaW5ib3hfdXNlcnMpXHJcblx0XHRcdCMg6IulYXNzaWduZWU95Y6faW5ib3hfdXNlcnPvvIzor7TmmI7kuI3pnIDopoHmiafooYzovaznrb7moLjvvIzns7vnu5/ku4DkuYjpg73kuI3lgZpcclxuXHRcdFx0cmV0dXJuIGlmIG5vdF9pbl9pbmJveF91c2Vycy5sZW5ndGggaXMgMCBhbmQgbmV3X2luYm94X3VzZXJzLmxlbmd0aCBpcyAwXHJcblx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0aSA9IDBcclxuXHRcdFx0YXBwcm92ZV91c2Vyc19oYW5kbGVycyA9IFtdXHJcblx0XHRcdHdoaWxlIGkgPCBsYXN0X3RyYWNlLmFwcHJvdmVzLmxlbmd0aFxyXG5cdFx0XHRcdGlmIG5vdF9pbl9pbmJveF91c2Vycy5pbmNsdWRlcyhsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmhhbmRsZXIpXHJcblx0XHRcdFx0XHRpZiBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmlzX2ZpbmlzaGVkIGlzIGZhbHNlIGFuZCBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnR5cGUgaXNudCBcImNjXCIgYW5kIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0udHlwZSBpc250IFwiZGlzdHJpYnV0ZVwiXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0bGFzdF90cmFjZS5hcHByb3Zlc1tpXS5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZGVzY3JpcHRpb24gPSBcIlwiXHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uY29zdF90aW1lID0gbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5maW5pc2hfZGF0ZSAtIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHRhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLnB1c2gobGFzdF90cmFjZS5hcHByb3Zlc1tpXS51c2VyKVxyXG5cdFx0XHRcdFx0XHRhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLnB1c2gobGFzdF90cmFjZS5hcHByb3Zlc1tpXS5oYW5kbGVyKVxyXG5cdFx0XHRcdGkrK1xyXG5cdFx0XHQjIOWcqOWQjOS4gHRyYWNl5LiL5o+S5YWl6L2s562+5qC45pON5L2c6ICF55qEYXBwcm92ZeiusOW9lVxyXG5cdFx0XHRjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uIH0sIHsgZmllbGRzOiB7IG5hbWU6IDEsIGZ1bGxuYW1lOiAxIH0gfSlcclxuXHRcdFx0YXNzaWduZWVfYXBwciA9IG5ldyBPYmplY3RcclxuXHRcdFx0YXNzaWduZWVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaW5zdGFuY2UgPSBsYXN0X3RyYWNlLmluc3RhbmNlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIudHJhY2UgPSBsYXN0X3RyYWNlLl9pZFxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLnVzZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0YXNzaWduZWVfYXBwci51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0YXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb25cclxuXHRcdFx0YXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIucmVhZF9kYXRlID0gbm93XHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuanVkZ2UgPSBcInJlYXNzaWduZWRcIlxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuZGVzY3JpcHRpb24gPSByZWFzc2lnbl9yZWFzb25cclxuXHRcdFx0YXNzaWduZWVfYXBwci5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmNvc3RfdGltZSA9IGFzc2lnbmVlX2FwcHIuZmluaXNoX2RhdGUgLSBhc3NpZ25lZV9hcHByLnN0YXJ0X2RhdGVcclxuXHRcdFx0bGFzdF90cmFjZS5hcHByb3Zlcy5wdXNoKGFzc2lnbmVlX2FwcHIpXHJcblx0XHRcdCMg5a+55paw5aKe55qE5q+P5L2N5b6F5a6h5qC45Lq677yM5ZCE5aKe5Yqg5LiA5p2h5paw55qEYXBwcm92ZVxyXG5cdFx0XHRfLmVhY2gobmV3X2luYm94X3VzZXJzLCAodXNlcl9pZCkgLT5cclxuXHRcdFx0XHRuZXdfdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUodXNlcl9pZCwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCB1c2VyX2lkKVxyXG5cdFx0XHRcdHVzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHNwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7IGZpZWxkczogeyBuYW1lOiAxLCBmdWxsbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0bmV3X2FwcHIgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3X2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld19hcHByLmluc3RhbmNlID0gbGFzdF90cmFjZS5pbnN0YW5jZVxyXG5cdFx0XHRcdG5ld19hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWRcclxuXHRcdFx0XHRuZXdfYXBwci5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0bmV3X2FwcHIudXNlciA9IHVzZXJfaWRcclxuXHRcdFx0XHRuZXdfYXBwci51c2VyX25hbWUgPSBuZXdfdXNlci5uYW1lXHJcblxyXG5cdFx0XHRcdGhhbmRsZXJfaWQgPSB1c2VyX2lkXHJcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gbmV3X3VzZXJcclxuXHRcdFx0XHRhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIHVzZXJfaWQpXHJcblx0XHRcdFx0aWYgYWdlbnRcclxuXHRcdFx0XHRcdGluYm94X3VzZXJzX2Zyb21fY2xpZW50W2luYm94X3VzZXJzX2Zyb21fY2xpZW50LmluZGV4T2YodXNlcl9pZCldID0gYWdlbnRcclxuXHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudFxyXG5cdFx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7IF9pZDogYWdlbnQgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0XHRuZXdfYXBwci5hZ2VudCA9IGFnZW50XHJcblxyXG5cdFx0XHRcdG5ld19hcHByLmhhbmRsZXIgPSBoYW5kbGVyX2lkXHJcblx0XHRcdFx0bmV3X2FwcHIuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uXHJcblx0XHRcdFx0bmV3X2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IHVzZXJfb3JnYW5pemF0aW9uLm5hbWVcclxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IHVzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lXHJcblx0XHRcdFx0bmV3X2FwcHIuZnJvbV91c2VyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0bmV3X2FwcHIuZnJvbV91c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0bmV3X2FwcHIudHlwZSA9IFwicmVhc3NpZ25cIlxyXG5cdFx0XHRcdG5ld19hcHByLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdfYXBwci5kdWVfZGF0ZSA9IGxhc3RfdHJhY2UuZHVlX2RhdGVcclxuXHRcdFx0XHRuZXdfYXBwci5pc19yZWFkID0gZmFsc2VcclxuXHRcdFx0XHRuZXdfYXBwci5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0bmV3X2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnN0YW5jZS52YWx1ZXMsIG5ld19hcHByKVxyXG5cdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXMucHVzaChuZXdfYXBwcilcclxuXHRcdFx0KVxyXG5cclxuXHRcdFx0aW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKVxyXG5cdFx0XHRpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMpXHJcblx0XHRcdHNldE9iai5vdXRib3hfdXNlcnMgPSBfLnVuaXEoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKVxyXG5cdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBpbmJveF91c2Vyc19mcm9tX2NsaWVudFxyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXHJcblx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzXCJdID0gbGFzdF90cmFjZS5hcHByb3Zlc1xyXG5cdFx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7IF9pZDogaW5zdGFuY2VfaWQsIFwidHJhY2VzLl9pZFwiOiBsYXN0X3RyYWNlLl9pZCB9LCB7ICRzZXQ6IHNldE9iaiB9KVxyXG5cdFx0XHRpZiByXHJcblx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0XHQjIOe7meiiq+WIoOmZpOeahGluYm94X3VzZXJzIOWSjCDlvZPliY3nlKjmiLcg5Y+R6YCBcHVzaFxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdFx0Xy5lYWNoKG5vdF9pbl9pbmJveF91c2VycywgKHVzZXJfaWQpIC0+XHJcblx0XHRcdFx0XHRpZiB1c2VyX2lkIGlzbnQgY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHQjIOaPkOWPlmluc3RhbmNlcy5vdXRib3hfdXNlcnPmlbDnu4TlkozloavljZXkurrjgIHnlLPor7fkurpcclxuXHRcdFx0XHRfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRfdXNlcnMucHVzaChpbnMuYXBwbGljYW50KVxyXG5cdFx0XHRcdF91c2Vycy5wdXNoKGlucy5zdWJtaXR0ZXIpXHJcblx0XHRcdFx0X3VzZXJzID0gXy51bmlxKF91c2Vycy5jb25jYXQoaW5zLm91dGJveF91c2VycykpXHJcblx0XHRcdFx0Xy5lYWNoKF91c2VycywgKHVzZXJfaWQpIC0+XHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZClcclxuXHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdCMg57uZ5paw5Yqg5YWl55qEaW5ib3hfdXNlcnPlj5HpgIFwdXNoIG1lc3NhZ2VcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcInJlYXNzaWduX25ld19pbmJveF91c2Vyc1wiLCBpbnMsIHJlYXNzaWduX3JlYXNvbiwgY3VycmVudF91c2VyX2luZm8pXHJcblxyXG5cdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmVhc3NpZ24nLCBjdXJyZW50X3VzZXIsIGlucy5pbmJveF91c2VycylcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7fVxyXG5cdFx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5tZXNzYWdlIH1dIH1cclxuXHRcdH1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWFzc2lnbicsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgX3VzZXJzLCBhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLCBhc3NpZ25lZV9hcHByLCBjdXJyZW50X3NwYWNlX3VzZXIsIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24sIGksIGluYm94X3VzZXJzLCBpbmJveF91c2Vyc19mcm9tX2NsaWVudCwgaW5zLCBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIGxhc3RfdHJhY2UsIGxhc3RfdHJhY2VfZnJvbV9jbGllbnQsIG5ld19pbmJveF91c2Vycywgbm90X2luX2luYm94X3VzZXJzLCBub3csIHBlcm1pc3Npb25zLCByLCByZWFzc2lnbl9yZWFzb24sIHNldE9iaiwgc3BhY2UsIHNwYWNlX2lkO1xuICAgICAgaW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFsnX2lkJ107XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVBlbmRpbmcoaW5zdGFuY2UpO1xuICAgICAgbGFzdF90cmFjZV9mcm9tX2NsaWVudCA9IF8ubGFzdChpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRyYWNlc1wiXSk7XG4gICAgICBsYXN0X3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5faWQgPT09IGxhc3RfdHJhY2VfZnJvbV9jbGllbnRbXCJfaWRcIl07XG4gICAgICB9KTtcbiAgICAgIGlmIChsYXN0X3RyYWNlLmlzX2ZpbmlzaGVkID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIGN1cnJlbnRfdXNlcik7XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBzcGFjZV9pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBhZG1pbnM6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKTtcbiAgICAgIH1cbiAgICAgIGluYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnM7XG4gICAgICBpbmJveF91c2Vyc19mcm9tX2NsaWVudCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wiaW5ib3hfdXNlcnNcIl07XG4gICAgICByZWFzc2lnbl9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlYXNzaWduX3JlYXNvblwiXTtcbiAgICAgIG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQpO1xuICAgICAgbmV3X2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKGluYm94X3VzZXJzX2Zyb21fY2xpZW50LCBpbmJveF91c2Vycyk7XG4gICAgICBpZiAobm90X2luX2luYm94X3VzZXJzLmxlbmd0aCA9PT0gMCAmJiBuZXdfaW5ib3hfdXNlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgIGkgPSAwO1xuICAgICAgYXBwcm92ZV91c2Vyc19oYW5kbGVycyA9IFtdO1xuICAgICAgd2hpbGUgKGkgPCBsYXN0X3RyYWNlLmFwcHJvdmVzLmxlbmd0aCkge1xuICAgICAgICBpZiAobm90X2luX2luYm94X3VzZXJzLmluY2x1ZGVzKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaGFuZGxlcikpIHtcbiAgICAgICAgICBpZiAobGFzdF90cmFjZS5hcHByb3Zlc1tpXS5pc19maW5pc2hlZCA9PT0gZmFsc2UgJiYgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS50eXBlICE9PSBcImNjXCIgJiYgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS50eXBlICE9PSBcImRpc3RyaWJ1dGVcIikge1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmNvc3RfdGltZSA9IGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZmluaXNoX2RhdGUgLSBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICBhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLnB1c2gobGFzdF90cmFjZS5hcHByb3Zlc1tpXS51c2VyKTtcbiAgICAgICAgICAgIGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMucHVzaChsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmhhbmRsZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb25cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGFzc2lnbmVlX2FwcHIgPSBuZXcgT2JqZWN0O1xuICAgICAgYXNzaWduZWVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgYXNzaWduZWVfYXBwci5pbnN0YW5jZSA9IGxhc3RfdHJhY2UuaW5zdGFuY2U7XG4gICAgICBhc3NpZ25lZV9hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWQ7XG4gICAgICBhc3NpZ25lZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIGFzc2lnbmVlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuICAgICAgYXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lO1xuICAgICAgYXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWU7XG4gICAgICBhc3NpZ25lZV9hcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICBhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgYXNzaWduZWVfYXBwci5kdWVfZGF0ZSA9IGxhc3RfdHJhY2UuZHVlX2RhdGU7XG4gICAgICBhc3NpZ25lZV9hcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgIGFzc2lnbmVlX2FwcHIuanVkZ2UgPSBcInJlYXNzaWduZWRcIjtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaXNfcmVhZCA9IHRydWU7XG4gICAgICBhc3NpZ25lZV9hcHByLmRlc2NyaXB0aW9uID0gcmVhc3NpZ25fcmVhc29uO1xuICAgICAgYXNzaWduZWVfYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgYXNzaWduZWVfYXBwci52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgYXNzaWduZWVfYXBwci5jb3N0X3RpbWUgPSBhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlIC0gYXNzaWduZWVfYXBwci5zdGFydF9kYXRlO1xuICAgICAgbGFzdF90cmFjZS5hcHByb3Zlcy5wdXNoKGFzc2lnbmVlX2FwcHIpO1xuICAgICAgXy5lYWNoKG5ld19pbmJveF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICB2YXIgYWdlbnQsIGhhbmRsZXJfaWQsIGhhbmRsZXJfaW5mbywgbmV3X2FwcHIsIG5ld191c2VyLCBzcGFjZV91c2VyLCB1c2VyX29yZ2FuaXphdGlvbjtcbiAgICAgICAgbmV3X3VzZXIgPSBkYi51c2Vycy5maW5kT25lKHVzZXJfaWQsIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIHVzZXJfaWQpO1xuICAgICAgICB1c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShzcGFjZV91c2VyLm9yZ2FuaXphdGlvbiwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgIGZ1bGxuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3X2FwcHIgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdfYXBwci5pbnN0YW5jZSA9IGxhc3RfdHJhY2UuaW5zdGFuY2U7XG4gICAgICAgIG5ld19hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWQ7XG4gICAgICAgIG5ld19hcHByLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIG5ld19hcHByLnVzZXIgPSB1c2VyX2lkO1xuICAgICAgICBuZXdfYXBwci51c2VyX25hbWUgPSBuZXdfdXNlci5uYW1lO1xuICAgICAgICBoYW5kbGVyX2lkID0gdXNlcl9pZDtcbiAgICAgICAgaGFuZGxlcl9pbmZvID0gbmV3X3VzZXI7XG4gICAgICAgIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgdXNlcl9pZCk7XG4gICAgICAgIGlmIChhZ2VudCkge1xuICAgICAgICAgIGluYm94X3VzZXJzX2Zyb21fY2xpZW50W2luYm94X3VzZXJzX2Zyb21fY2xpZW50LmluZGV4T2YodXNlcl9pZCldID0gYWdlbnQ7XG4gICAgICAgICAgaGFuZGxlcl9pZCA9IGFnZW50O1xuICAgICAgICAgIGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgICAgX2lkOiBhZ2VudFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbmV3X2FwcHIuYWdlbnQgPSBhZ2VudDtcbiAgICAgICAgfVxuICAgICAgICBuZXdfYXBwci5oYW5kbGVyID0gaGFuZGxlcl9pZDtcbiAgICAgICAgbmV3X2FwcHIuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICAgIG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gc3BhY2VfdXNlci5vcmdhbml6YXRpb247XG4gICAgICAgIG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSB1c2VyX29yZ2FuaXphdGlvbi5uYW1lO1xuICAgICAgICBuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IHVzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lO1xuICAgICAgICBuZXdfYXBwci5mcm9tX3VzZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIG5ld19hcHByLmZyb21fdXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgbmV3X2FwcHIudHlwZSA9IFwicmVhc3NpZ25cIjtcbiAgICAgICAgbmV3X2FwcHIuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3X2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlO1xuICAgICAgICBuZXdfYXBwci5pc19yZWFkID0gZmFsc2U7XG4gICAgICAgIG5ld19hcHByLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgIG5ld19hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgIHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnN0YW5jZS52YWx1ZXMsIG5ld19hcHByKTtcbiAgICAgICAgcmV0dXJuIGxhc3RfdHJhY2UuYXBwcm92ZXMucHVzaChuZXdfYXBwcik7XG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLm91dGJveF91c2Vycy5wdXNoKGN1cnJlbnRfdXNlcik7XG4gICAgICBpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMpO1xuICAgICAgc2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMpO1xuICAgICAgc2V0T2JqLmluYm94X3VzZXJzID0gaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQ7XG4gICAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGxhc3RfdHJhY2UuYXBwcm92ZXM7XG4gICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2VfaWQsXG4gICAgICAgIFwidHJhY2VzLl9pZFwiOiBsYXN0X3RyYWNlLl9pZFxuICAgICAgfSwge1xuICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgIH0pO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICBfLmVhY2gobm90X2luX2luYm94X3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgaWYgKHVzZXJfaWQgIT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIF91c2Vycy5wdXNoKGlucy5hcHBsaWNhbnQpO1xuICAgICAgICBfdXNlcnMucHVzaChpbnMuc3VibWl0dGVyKTtcbiAgICAgICAgX3VzZXJzID0gXy51bmlxKF91c2Vycy5jb25jYXQoaW5zLm91dGJveF91c2VycykpO1xuICAgICAgICBfLmVhY2goX3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmVhc3NpZ25fbmV3X2luYm94X3VzZXJzXCIsIGlucywgcmVhc3NpZ25fcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JlYXNzaWduJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7fVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWxvY2F0ZScsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKVxyXG5cclxuXHRcdFx0bGFzdF90cmFjZSA9IF8ubGFzdChpbnN0YW5jZS50cmFjZXMpXHJcblxyXG5cdFx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKVxyXG5cdFx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKGluc3RhbmNlLnNwYWNlLCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxyXG5cdFx0XHRpZiAobm90IHBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55So5oi35rKh5pyJ5a+55b2T5YmN5rWB56iL55qE566h55CG5p2D6ZmQXCIpXHJcblxyXG5cdFx0XHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0XHRcdGluc3RhbmNlX2lkID0gbGFzdF90cmFjZS5pbnN0YW5jZVxyXG5cdFx0XHRpbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzXHJcblx0XHRcdHJlbG9jYXRlX2luYm94X3VzZXJzID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWxvY2F0ZV9pbmJveF91c2Vyc1wiXVxyXG5cdFx0XHRyZWxvY2F0ZV9jb21tZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWxvY2F0ZV9jb21tZW50XCJdXHJcblx0XHRcdHJlbG9jYXRlX25leHRfc3RlcCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfbmV4dF9zdGVwXCJdXHJcblx0XHRcdG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgcmVsb2NhdGVfaW5ib3hfdXNlcnMpXHJcblx0XHRcdG5ld19pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShyZWxvY2F0ZV9pbmJveF91c2VycywgaW5ib3hfdXNlcnMpXHJcblxyXG5cdFx0XHRhcHByb3ZlX3VzZXJzID0gW11cclxuXHJcblx0XHRcdCMg6I635Y+W5LiA5LiqZmxvd1xyXG5cdFx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblx0XHRcdG5leHRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcmVsb2NhdGVfbmV4dF9zdGVwKVxyXG5cdFx0XHRuZXh0X3N0ZXBfdHlwZSA9IG5leHRfc3RlcC5zdGVwX3R5cGVcclxuXHRcdFx0bmV4dF9zdGVwX25hbWUgPSBuZXh0X3N0ZXAubmFtZVxyXG5cdFx0XHRjdXJyZW50X3NldHAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGxhc3RfdHJhY2Uuc3RlcClcclxuXHRcdFx0Y3VycmVudF9zZXRwX3R5cGUgPSBjdXJyZW50X3NldHAuc3RlcF90eXBlXHJcblxyXG5cdFx0XHR0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXNcclxuXHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxyXG5cdFx0XHQjIOmHjeWumuS9jeeahOaXtuWAmeS9v+eUqGFwcHJvdmUudmFsdWVz5ZCI5bm2IGluc3RhbmNlLnZhbHVlc+eUn+aIkOaWsOeahGluc3RhbmNlLnZhbHVlcyAjMTMyOFxyXG5cdFx0XHRzZXRPYmoudmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0XHRpID0gMFxyXG5cdFx0XHR3aGlsZSBpIDwgdHJhY2VzLmxlbmd0aFxyXG5cdFx0XHRcdGlmIHRyYWNlc1tpXS5faWQgaXMgbGFzdF90cmFjZS5faWRcclxuXHRcdFx0XHRcdGlmIG5vdCB0cmFjZXNbaV0uYXBwcm92ZXNcclxuXHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdGggPSAwXHJcblx0XHRcdFx0XHR3aGlsZSBoIDwgdHJhY2VzW2ldLmFwcHJvdmVzLmxlbmd0aFxyXG5cdFx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgaXMgZmFsc2UgYW5kIHRyYWNlc1tpXS5hcHByb3Zlc1toXS50eXBlIGlzbnQgXCJjY1wiIGFuZCB0cmFjZXNbaV0uYXBwcm92ZXNbaF0udHlwZSBpc250IFwiZGlzdHJpYnV0ZVwiXHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0ucmVhZF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfcmVhZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uY29zdF90aW1lID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlIC0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0XHRhcHByb3ZlX3VzZXJzLnB1c2godHJhY2VzW2ldLmFwcHJvdmVzW2hdLnVzZXIpXHJcblxyXG5cdFx0XHRcdFx0XHRcdCMgYmVnaW4g6KKr6YeN5a6a5L2N57uZQe+8jOWGjeiiq+mHjeWumuS9jei1sO+8jOS5i+WJjUHnmoTmhI/op4HlnKjmhI/op4HmoI/kuK3mmL7npLrkuI3lh7rmnaXkuobjgIIgIzE5MjFcclxuXHRcdFx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID09IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdHRhID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdXHJcblx0XHRcdFx0XHRcdFx0XHRzYW1lVHJhY2VzID0gXy5maWx0ZXIgdHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdC5zdGVwID09IHRyYWNlc1tpXS5zdGVwXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0bCA9IHNhbWVUcmFjZXMubGVuZ3RoIC0gMVxyXG5cdFx0XHRcdFx0XHRcdFx0c2lnblNob3dBcHByb3ZlSWQgPSBudWxsXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgbCA+IC0xXHJcblx0XHRcdFx0XHRcdFx0XHRcdF8uZWFjaCBzYW1lVHJhY2VzW2xdLmFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIGEudXNlciA9PSB0YS51c2VyICYmIGEuanVkZ2UgIT0gXCJ0ZXJtaW5hdGVkXCIgJiYgYS5kZXNjcmlwdGlvbiAmJiAhc2lnblNob3dBcHByb3ZlSWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNpZ25TaG93QXBwcm92ZUlkID0gYS5faWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0bC0tXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgc2lnblNob3dBcHByb3ZlSWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGkgPSAwXHJcblx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlIHRpIDwgdHJhY2VzLmxlbmd0aFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFoID0gMFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlIGFoIDwgdHJhY2VzW3RpXS5hcHByb3Zlcy5sZW5ndGhcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIHRyYWNlc1t0aV0uYXBwcm92ZXNbYWhdLl9pZCA9PSBzaWduU2hvd0FwcHJvdmVJZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0cmFjZXNbdGldLmFwcHJvdmVzW2FoXS5zaWduX3Nob3cgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zaWduX3Nob3cgPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YWgrK1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRpKytcclxuXHRcdFx0XHRcdFx0XHQjIGVuZCDooqvph43lrprkvY3nu5lB77yM5YaN6KKr6YeN5a6a5L2N6LWw77yM5LmL5YmNQeeahOaEj+ingeWcqOaEj+ingeagj+S4reaYvuekuuS4jeWHuuadpeS6huOAgiAjMTkyMVxyXG5cclxuXHRcdFx0XHRcdFx0aCsrXHJcblxyXG5cdFx0XHRcdFx0IyDlnKjlkIzkuIB0cmFjZeS4i+aPkuWFpemHjeWumuS9jeaTjeS9nOiAheeahGFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdGN1cnJlbnRfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHsgZmllbGRzOiB7IG5hbWU6IDEgLCBmdWxsbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIudHJhY2UgPSB0cmFjZXNbaV0uX2lkXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci51c2VyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmR1ZV9kYXRlID0gdHJhY2VzW2ldLmR1ZV9kYXRlXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5qdWRnZSA9IFwicmVsb2NhdGVkXCJcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaXNfcmVhZCA9IHRydWVcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuZGVzY3JpcHRpb24gPSByZWxvY2F0ZV9jb21tZW50XHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5jb3N0X3RpbWUgPSByZWxvY2F0ZV9hcHByLmZpbmlzaF9kYXRlIC0gcmVsb2NhdGVfYXBwci5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXMucHVzaChyZWxvY2F0ZV9hcHByKVxyXG5cclxuXHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2XorrDlvZVcclxuXHRcdFx0XHRcdHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdHRyYWNlc1tpXS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0dHJhY2VzW2ldLmp1ZGdlID0gXCJyZWxvY2F0ZWRcIlxyXG5cclxuXHRcdFx0XHRpKytcclxuXHJcblx0XHRcdGlmIG5leHRfc3RlcF90eXBlIGlzIFwiZW5kXCJcclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdXHJcblx0XHRcdFx0bmV3VHJhY2UuaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RlcCA9IHJlbG9jYXRlX25leHRfc3RlcFxyXG5cdFx0XHRcdG5ld1RyYWNlLm5hbWUgPSBuZXh0X3N0ZXBfbmFtZVxyXG5cdFx0XHRcdG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdUcmFjZS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cclxuXHRcdFx0XHQjIOabtOaWsGluc3RhbmNl6K6w5b2VXHJcblx0XHRcdFx0c2V0T2JqLnN0YXRlID0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0XHRcdHNldE9iai5pbmJveF91c2VycyA9IFtdXHJcblx0XHRcdFx0c2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRzZXRPYmouZmluaXNoX2RhdGUgPSBuZXcgRGF0ZVxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdXHJcblx0XHRcdFx0bmV3VHJhY2UuaXNfZmluaXNoZWQgPSBmYWxzZVxyXG5cdFx0XHRcdG5ld1RyYWNlLnN0ZXAgPSByZWxvY2F0ZV9uZXh0X3N0ZXBcclxuXHRcdFx0XHRuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWVcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUobmV4dF9zdGVwLnRpbWVvdXRfaG91cnMpXHJcblx0XHRcdFx0bmV3VHJhY2UuYXBwcm92ZXMgPSBbXVxyXG5cdFx0XHRcdF8uZWFjaChyZWxvY2F0ZV9pbmJveF91c2VycywgKG5leHRfc3RlcF91c2VyX2lkLCBpZHgpLT5cclxuXHRcdFx0XHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2UuYXBwcm92ZeiusOW9lVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZSA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLnRyYWNlID0gbmV3VHJhY2UuX2lkXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2VcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUudXNlciA9IG5leHRfc3RlcF91c2VyX2lkXHJcblxyXG5cdFx0XHRcdFx0dXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IHVzZXJfaW5mby5uYW1lXHJcblxyXG5cdFx0XHRcdFx0aGFuZGxlcl9pZCA9IG5leHRfc3RlcF91c2VyX2lkXHJcblx0XHRcdFx0XHRoYW5kbGVyX2luZm8gPSB1c2VyX2luZm9cclxuXHRcdFx0XHRcdGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpXHJcblx0XHRcdFx0XHRpZiBhZ2VudFxyXG5cdFx0XHRcdFx0XHRyZWxvY2F0ZV9pbmJveF91c2Vyc1tpZHhdID0gYWdlbnRcclxuXHRcdFx0XHRcdFx0aGFuZGxlcl9pZCA9IGFnZW50XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IGFnZW50IH0sIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmFnZW50ID0gYWdlbnRcclxuXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXIgPSBoYW5kbGVyX2lkXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lXHJcblxyXG5cdFx0XHRcdFx0bmV4dF9zdGVwX3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgaGFuZGxlcl9pZClcclxuXHRcdFx0XHRcdCMg6I635Y+WbmV4dF9zdGVwX3VzZXLmiYDlnKjnmoTpg6jpl6jkv6Hmga9cclxuXHRcdFx0XHRcdG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl1cclxuXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBuZXdUcmFjZS5kdWVfZGF0ZVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19yZWFkID0gZmFsc2VcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHR1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBuZXdBcHByb3ZlKVxyXG5cdFx0XHRcdFx0bmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKVxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSByZWxvY2F0ZV9pbmJveF91c2Vyc1xyXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gbmV4dF9zdGVwX25hbWVcclxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gdXVmbG93TWFuYWdlci5nZXRDdXJyZW50U3RlcEF1dG9TdWJtaXQoZmxvdy50aW1lb3V0X2F1dG9fc3VibWl0LCBuZXh0X3N0ZXAubGluZXMpXHJcblxyXG5cdFx0XHRpbnN0YW5jZS5vdXRib3hfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpXHJcblx0XHRcdGluc3RhbmNlLm91dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQoaW5ib3hfdXNlcnMpLmNvbmNhdChhcHByb3ZlX3VzZXJzKVxyXG5cdFx0XHRzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2VycylcclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XHJcblx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZVxyXG5cdFx0XHR0cmFjZXMucHVzaChuZXdUcmFjZSlcclxuXHRcdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlc1xyXG5cclxuXHRcdFx0aWYgc2V0T2JqLnN0YXRlID09ICdjb21wbGV0ZWQnXHJcblx0XHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHNldDogc2V0T2JqfSlcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9iaiwgJHVuc2V0OiB7ZmluaXNoX2RhdGU6IDF9fSlcclxuXHJcblx0XHRcdGlmIHJcclxuXHRcdFx0XHRpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRcdCMg57uZ6KKr5Yig6Zmk55qEaW5ib3hfdXNlcnMg5ZKMIOW9k+WJjeeUqOaItyDlj5HpgIFwdXNoXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbylcclxuXHRcdFx0XHRfLmVhY2gobm90X2luX2luYm94X3VzZXJzLCAodXNlcl9pZCktPlxyXG5cdFx0XHRcdFx0aWYgdXNlcl9pZCBpc250IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZClcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0IyDmj5Dlj5ZpbnN0YW5jZXMub3V0Ym94X3VzZXJz5pWw57uE5ZKM5aGr5Y2V5Lq644CB55Sz6K+35Lq6XHJcblx0XHRcdFx0X3VzZXJzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0X3VzZXJzLnB1c2goaW5zLmFwcGxpY2FudClcclxuXHRcdFx0XHRfdXNlcnMucHVzaChpbnMuc3VibWl0dGVyKVxyXG5cdFx0XHRcdF91c2VycyA9IF8udW5pcShfdXNlcnMuY29uY2F0KGlucy5vdXRib3hfdXNlcnMpKVxyXG5cdFx0XHRcdF8uZWFjaChfdXNlcnMsICh1c2VyX2lkKS0+XHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZClcclxuXHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdCMg57uZ5paw5Yqg5YWl55qEaW5ib3hfdXNlcnPlj5HpgIFwdXNoIG1lc3NhZ2VcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcInJlYXNzaWduX25ld19pbmJveF91c2Vyc1wiLCBpbnMsIHJlbG9jYXRlX2NvbW1lbnQsIGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cclxuXHRcdFx0XHQjIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JlbG9jYXRlJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHt9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YToge2Vycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L3JlbG9jYXRlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBfdXNlcnMsIGFoLCBhcHByb3ZlX3VzZXJzLCBjdXJyZW50X3NldHAsIGN1cnJlbnRfc2V0cF90eXBlLCBjdXJyZW50X3NwYWNlX3VzZXIsIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24sIGZsb3csIGgsIGksIGluYm94X3VzZXJzLCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9pZCwgbCwgbGFzdF90cmFjZSwgbmV3VHJhY2UsIG5ld19pbmJveF91c2VycywgbmV4dF9zdGVwLCBuZXh0X3N0ZXBfbmFtZSwgbmV4dF9zdGVwX3R5cGUsIG5vdF9pbl9pbmJveF91c2Vycywgbm93LCBwZXJtaXNzaW9ucywgciwgcmVsb2NhdGVfYXBwciwgcmVsb2NhdGVfY29tbWVudCwgcmVsb2NhdGVfaW5ib3hfdXNlcnMsIHJlbG9jYXRlX25leHRfc3RlcCwgc2FtZVRyYWNlcywgc2V0T2JqLCBzaWduU2hvd0FwcHJvdmVJZCwgc3BhY2UsIHNwYWNlX2lkLCB0YSwgdGksIHRyYWNlcztcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICBsYXN0X3RyYWNlID0gXy5sYXN0KGluc3RhbmNlLnRyYWNlcyk7XG4gICAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpO1xuICAgICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShpbnN0YW5jZS5zcGFjZSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBhZG1pbnM6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKTtcbiAgICAgIH1cbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICBpbnN0YW5jZV9pZCA9IGxhc3RfdHJhY2UuaW5zdGFuY2U7XG4gICAgICBpbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzO1xuICAgICAgcmVsb2NhdGVfaW5ib3hfdXNlcnMgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX2luYm94X3VzZXJzXCJdO1xuICAgICAgcmVsb2NhdGVfY29tbWVudCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfY29tbWVudFwiXTtcbiAgICAgIHJlbG9jYXRlX25leHRfc3RlcCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfbmV4dF9zdGVwXCJdO1xuICAgICAgbm90X2luX2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKGluYm94X3VzZXJzLCByZWxvY2F0ZV9pbmJveF91c2Vycyk7XG4gICAgICBuZXdfaW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UocmVsb2NhdGVfaW5ib3hfdXNlcnMsIGluYm94X3VzZXJzKTtcbiAgICAgIGFwcHJvdmVfdXNlcnMgPSBbXTtcbiAgICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgICBuZXh0X3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHJlbG9jYXRlX25leHRfc3RlcCk7XG4gICAgICBuZXh0X3N0ZXBfdHlwZSA9IG5leHRfc3RlcC5zdGVwX3R5cGU7XG4gICAgICBuZXh0X3N0ZXBfbmFtZSA9IG5leHRfc3RlcC5uYW1lO1xuICAgICAgY3VycmVudF9zZXRwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBsYXN0X3RyYWNlLnN0ZXApO1xuICAgICAgY3VycmVudF9zZXRwX3R5cGUgPSBjdXJyZW50X3NldHAuc3RlcF90eXBlO1xuICAgICAgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgIHNldE9iai52YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgdHJhY2VzLmxlbmd0aCkge1xuICAgICAgICBpZiAodHJhY2VzW2ldLl9pZCA9PT0gbGFzdF90cmFjZS5faWQpIHtcbiAgICAgICAgICBpZiAoIXRyYWNlc1tpXS5hcHByb3Zlcykge1xuICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzID0gbmV3IEFycmF5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBoID0gMDtcbiAgICAgICAgICB3aGlsZSAoaCA8IHRyYWNlc1tpXS5hcHByb3Zlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPT09IGZhbHNlICYmIHRyYWNlc1tpXS5hcHByb3Zlc1toXS50eXBlICE9PSBcImNjXCIgJiYgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnR5cGUgIT09IFwiZGlzdHJpYnV0ZVwiKSB7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5yZWFkX2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uY29zdF90aW1lID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlIC0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICAgIGFwcHJvdmVfdXNlcnMucHVzaCh0cmFjZXNbaV0uYXBwcm92ZXNbaF0udXNlcik7XG4gICAgICAgICAgICAgIGlmICh0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGEgPSB0cmFjZXNbaV0uYXBwcm92ZXNbaF07XG4gICAgICAgICAgICAgICAgc2FtZVRyYWNlcyA9IF8uZmlsdGVyKHRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc3RlcCA9PT0gdHJhY2VzW2ldLnN0ZXA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbCA9IHNhbWVUcmFjZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBzaWduU2hvd0FwcHJvdmVJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGwgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgXy5lYWNoKHNhbWVUcmFjZXNbbF0uYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEudXNlciA9PT0gdGEudXNlciAmJiBhLmp1ZGdlICE9PSBcInRlcm1pbmF0ZWRcIiAmJiBhLmRlc2NyaXB0aW9uICYmICFzaWduU2hvd0FwcHJvdmVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduU2hvd0FwcHJvdmVJZCA9IGEuX2lkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGwtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25TaG93QXBwcm92ZUlkKSB7XG4gICAgICAgICAgICAgICAgICB0aSA9IDA7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAodGkgPCB0cmFjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGFoIDwgdHJhY2VzW3RpXS5hcHByb3Zlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2VzW3RpXS5hcHByb3Zlc1thaF0uX2lkID09PSBzaWduU2hvd0FwcHJvdmVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VzW3RpXS5hcHByb3Zlc1thaF0uc2lnbl9zaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zaWduX3Nob3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgYWgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aSsrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgICAgICBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci50cmFjZSA9IHRyYWNlc1tpXS5faWQ7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci51c2VyID0gY3VycmVudF91c2VyO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24ubmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmR1ZV9kYXRlID0gdHJhY2VzW2ldLmR1ZV9kYXRlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuanVkZ2UgPSBcInJlbG9jYXRlZFwiO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5kZXNjcmlwdGlvbiA9IHJlbG9jYXRlX2NvbW1lbnQ7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmNvc3RfdGltZSA9IHJlbG9jYXRlX2FwcHIuZmluaXNoX2RhdGUgLSByZWxvY2F0ZV9hcHByLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzLnB1c2gocmVsb2NhdGVfYXBwcik7XG4gICAgICAgICAgdHJhY2VzW2ldLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICB0cmFjZXNbaV0uZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgdHJhY2VzW2ldLmp1ZGdlID0gXCJyZWxvY2F0ZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBpZiAobmV4dF9zdGVwX3R5cGUgPT09IFwiZW5kXCIpIHtcbiAgICAgICAgbmV3VHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICBuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIG5ld1RyYWNlLnN0ZXAgPSByZWxvY2F0ZV9uZXh0X3N0ZXA7XG4gICAgICAgIG5ld1RyYWNlLm5hbWUgPSBuZXh0X3N0ZXBfbmFtZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3VHJhY2UuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmFwcHJvdmVzID0gW107XG4gICAgICAgIHNldE9iai5zdGF0ZSA9IFwiY29tcGxldGVkXCI7XG4gICAgICAgIHNldE9iai5pbmJveF91c2VycyA9IFtdO1xuICAgICAgICBzZXRPYmouZmluYWxfZGVjaXNpb24gPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgc2V0T2JqLmZpbmlzaF9kYXRlID0gbmV3IERhdGU7XG4gICAgICAgIHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUcmFjZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgIG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgIG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlLl9pZF07XG4gICAgICAgIG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIG5ld1RyYWNlLnN0ZXAgPSByZWxvY2F0ZV9uZXh0X3N0ZXA7XG4gICAgICAgIG5ld1RyYWNlLm5hbWUgPSBuZXh0X3N0ZXBfbmFtZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUobmV4dF9zdGVwLnRpbWVvdXRfaG91cnMpO1xuICAgICAgICBuZXdUcmFjZS5hcHByb3ZlcyA9IFtdO1xuICAgICAgICBfLmVhY2gocmVsb2NhdGVfaW5ib3hfdXNlcnMsIGZ1bmN0aW9uKG5leHRfc3RlcF91c2VyX2lkLCBpZHgpIHtcbiAgICAgICAgICB2YXIgYWdlbnQsIGhhbmRsZXJfaWQsIGhhbmRsZXJfaW5mbywgbmV3QXBwcm92ZSwgbmV4dF9zdGVwX3NwYWNlX3VzZXIsIG5leHRfc3RlcF91c2VyX29yZ19pbmZvLCB1c2VyX2luZm87XG4gICAgICAgICAgbmV3QXBwcm92ZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgbmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgICBuZXdBcHByb3ZlLnRyYWNlID0gbmV3VHJhY2UuX2lkO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgICBuZXdBcHByb3ZlLnVzZXIgPSBuZXh0X3N0ZXBfdXNlcl9pZDtcbiAgICAgICAgICB1c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKG5leHRfc3RlcF91c2VyX2lkLCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG5ld0FwcHJvdmUudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgaGFuZGxlcl9pZCA9IG5leHRfc3RlcF91c2VyX2lkO1xuICAgICAgICAgIGhhbmRsZXJfaW5mbyA9IHVzZXJfaW5mbztcbiAgICAgICAgICBhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIG5leHRfc3RlcF91c2VyX2lkKTtcbiAgICAgICAgICBpZiAoYWdlbnQpIHtcbiAgICAgICAgICAgIHJlbG9jYXRlX2luYm94X3VzZXJzW2lkeF0gPSBhZ2VudDtcbiAgICAgICAgICAgIGhhbmRsZXJfaWQgPSBhZ2VudDtcbiAgICAgICAgICAgIGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgICAgICBfaWQ6IGFnZW50XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmFnZW50ID0gYWdlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlciA9IGhhbmRsZXJfaWQ7XG4gICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZTtcbiAgICAgICAgICBuZXh0X3N0ZXBfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBoYW5kbGVyX2lkKTtcbiAgICAgICAgICBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhuZXh0X3N0ZXBfc3BhY2VfdXNlcik7XG4gICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl07XG4gICAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdO1xuICAgICAgICAgIG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgICBuZXdBcHByb3ZlLmR1ZV9kYXRlID0gbmV3VHJhY2UuZHVlX2RhdGU7XG4gICAgICAgICAgbmV3QXBwcm92ZS5pc19yZWFkID0gZmFsc2U7XG4gICAgICAgICAgbmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgIG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgICAgICB1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBuZXdBcHByb3ZlKTtcbiAgICAgICAgICByZXR1cm4gbmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldE9iai5pbmJveF91c2VycyA9IHJlbG9jYXRlX2luYm94X3VzZXJzO1xuICAgICAgICBzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gbmV4dF9zdGVwX25hbWU7XG4gICAgICAgIHNldE9iai5jdXJyZW50X3N0ZXBfYXV0b19zdWJtaXQgPSB1dWZsb3dNYW5hZ2VyLmdldEN1cnJlbnRTdGVwQXV0b1N1Ym1pdChmbG93LnRpbWVvdXRfYXV0b19zdWJtaXQsIG5leHRfc3RlcC5saW5lcyk7XG4gICAgICB9XG4gICAgICBpbnN0YW5jZS5vdXRib3hfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpO1xuICAgICAgaW5zdGFuY2Uub3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzLmNvbmNhdChpbmJveF91c2VycykuY29uY2F0KGFwcHJvdmVfdXNlcnMpO1xuICAgICAgc2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMpO1xuICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbm93O1xuICAgICAgc2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgc2V0T2JqLmlzX2FyY2hpdmVkID0gZmFsc2U7XG4gICAgICB0cmFjZXMucHVzaChuZXdUcmFjZSk7XG4gICAgICBzZXRPYmoudHJhY2VzID0gdHJhY2VzO1xuICAgICAgaWYgKHNldE9iai5zdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmosXG4gICAgICAgICAgJHVuc2V0OiB7XG4gICAgICAgICAgICBmaW5pc2hfZGF0ZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocikge1xuICAgICAgICBpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgIF8uZWFjaChub3RfaW5faW5ib3hfdXNlcnMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgICBpZiAodXNlcl9pZCAhPT0gY3VycmVudF91c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIF91c2VycyA9IG5ldyBBcnJheTtcbiAgICAgICAgX3VzZXJzLnB1c2goaW5zLmFwcGxpY2FudCk7XG4gICAgICAgIF91c2Vycy5wdXNoKGlucy5zdWJtaXR0ZXIpO1xuICAgICAgICBfdXNlcnMgPSBfLnVuaXEoX3VzZXJzLmNvbmNhdChpbnMub3V0Ym94X3VzZXJzKSk7XG4gICAgICAgIF8uZWFjaChfdXNlcnMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZWFzc2lnbl9uZXdfaW5ib3hfdXNlcnNcIiwgaW5zLCByZWxvY2F0ZV9jb21tZW50LCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JlbG9jYXRlJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7fVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9hcmNoaXZlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgKGluc3RhbmNlX2Zyb21fY2xpZW50KSAtPlxyXG5cdFx0XHRpbnN0YW5jZV9pZCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdXHJcblx0XHRcdCMg6I635Y+W5LiA5LiqaW5zdGFuY2VcclxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2VcclxuXHRcdFx0c3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0XHQjIOWIpOaWreS4gOS4qmluc3RhbmNl5piv5ZCm5Li65a6M5oiQ5bm25LiU5pyq5b2S5qGj54q25oCBXHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZUZpbmlzaGVkQW5kTm90QXJjaGlldmVkKGluc3RhbmNlKVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNl5LiL55qE5LiA5LiqdXNlclxyXG5cdFx0XHRzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0IyDliKTmlq3kuIDkuKrnlKjmiLfmmK/lkKbmmK/kuIDkuKppbnN0YW5jZeeahOaPkOS6pOiAhSDmiJbogIVzcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VTdWJtaXR0ZXJPckFwcGxpY2FudE9yU3BhY2VBZG1pbihpbnN0YW5jZSwgY3VycmVudF91c2VyLCBzcGFjZSlcclxuXHRcdFx0XHJcblx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdFx0c2V0T2JqLmlzX2FyY2hpdmVkID0gdHJ1ZVxyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZVxyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHJcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHNldDogc2V0T2JqfSlcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdGRhdGE6IHt9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9XHJcblx0XHJcblx0XHQiLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L2FyY2hpdmUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGE7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIGluc3RhbmNlLCBpbnN0YW5jZV9pZCwgc2V0T2JqLCBzcGFjZSwgc3BhY2VfaWQsIHNwYWNlX3VzZXI7XG4gICAgICBpbnN0YW5jZV9pZCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICBzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgICAgdXVmbG93TWFuYWdlci5pc0luc3RhbmNlRmluaXNoZWRBbmROb3RBcmNoaWV2ZWQoaW5zdGFuY2UpO1xuICAgICAgc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgICAgdXVmbG93TWFuYWdlci5pc0luc3RhbmNlU3VibWl0dGVyT3JBcHBsaWNhbnRPclNwYWNlQWRtaW4oaW5zdGFuY2UsIGN1cnJlbnRfdXNlciwgc3BhY2UpO1xuICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgIHNldE9iai5pc19hcmNoaXZlZCA9IHRydWU7XG4gICAgICBzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZTtcbiAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgfSwge1xuICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7fVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLnN0YXJ0dXAgLT5cclxuXHRXZWJBcHAuY29ubmVjdEhhbmRsZXJzLnVzZSBcIi9hcGkvd29ya2Zsb3cvZXhwb3J0L2luc3RhbmNlc1wiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0XHR0cnlcclxuXHRcdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cclxuXHRcdFx0cXVlcnkgPSByZXEucXVlcnlcclxuXHRcdFx0c3BhY2VfaWQgPSBxdWVyeS5zcGFjZV9pZFxyXG5cdFx0XHRmbG93X2lkID0gcXVlcnkuZmxvd19pZFxyXG5cdFx0XHR0eXBlID0gcGFyc2VJbnQocXVlcnkudHlwZSlcclxuXHRcdFx0dGltZXpvbmVvZmZzZXQgPSBwYXJzZUludChxdWVyeS50aW1lem9uZW9mZnNldClcclxuXHJcblx0XHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHsgX2lkOiBmbG93X2lkIH0sIHsgZmllbGRzOiB7IGZvcm06IDEgfSB9KVxyXG5cdFx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdy5mb3JtIH0sIHsgZmllbGRzOiB7IG5hbWU6IDEsICdjdXJyZW50LmZpZWxkcyc6IDEgfSB9KVxyXG5cclxuXHRcdFx0Zm9ybV9uYW1lID0gZm9ybS5uYW1lXHJcblx0XHRcdGZpZWxkcyA9IGZvcm0uY3VycmVudC5maWVsZHNcclxuXHRcdFx0dGFibGVfZmllbGRzID0gbmV3IEFycmF5XHJcblx0XHRcdF8uZWFjaCBmb3JtLmN1cnJlbnQuZmllbGRzLCAoZmllbGQpIC0+XHJcblx0XHRcdFx0aWYgZmllbGQudHlwZSBpcyBcInRhYmxlXCJcclxuXHRcdFx0XHRcdHRhYmxlX2ZpZWxkcy5wdXNoKGZpZWxkKVxyXG5cclxuXHRcdFx0aW5zX3RvX3hscyA9IG5ldyBBcnJheVxyXG5cdFx0XHRzdGFydF9kYXRlID0gbnVsbFxyXG5cdFx0XHRlbmRfZGF0ZSA9IG51bGxcclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0IyAwLeacrOaciFxyXG5cdFx0XHRpZiB0eXBlIGlzIDBcclxuXHRcdFx0XHRzdGFydF9kYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCAxKVxyXG5cdFx0XHRcdGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZCh7XHJcblx0XHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0XHRmbG93OiBmbG93X2lkLFxyXG5cdFx0XHRcdFx0c3RhdGU6IHsgJG5lOiBcImRyYWZ0XCIgfSxcclxuXHRcdFx0XHRcdHN1Ym1pdF9kYXRlOiB7ICRndGU6IHN0YXJ0X2RhdGUgfVxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdHNvcnQ6IHsgc3VibWl0X2RhdGU6IDEgfVxyXG5cdFx0XHRcdH0pLmZldGNoKClcclxuXHRcdFx0IyAxLeS4iuaciFxyXG5cdFx0XHRlbHNlIGlmIHR5cGUgaXMgMVxyXG5cdFx0XHRcdGxhc3RfbW9udGhfZGF0ZSA9IG5ldyBEYXRlKG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSkgLSAxMDAwICogNjAgKiA2MCAqIDI0KVxyXG5cdFx0XHRcdHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShsYXN0X21vbnRoX2RhdGUuZ2V0RnVsbFllYXIoKSwgbGFzdF9tb250aF9kYXRlLmdldE1vbnRoKCksIDEpXHJcblx0XHRcdFx0ZW5kX2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpXHJcblx0XHRcdFx0aW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHtcclxuXHRcdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcclxuXHRcdFx0XHRcdGZsb3c6IGZsb3dfaWQsXHJcblx0XHRcdFx0XHRzdGF0ZTogeyAkbmU6IFwiZHJhZnRcIiB9LFxyXG5cdFx0XHRcdFx0JGFuZDogW3sgc3VibWl0X2RhdGU6IHsgJGd0ZTogc3RhcnRfZGF0ZSB9IH0sIHsgc3VibWl0X2RhdGU6IHsgJGx0ZTogZW5kX2RhdGUgfSB9XVxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdHNvcnQ6IHsgc3VibWl0X2RhdGU6IDEgfVxyXG5cdFx0XHRcdH0pLmZldGNoKClcclxuXHRcdFx0IyAyLeaVtOS4quW5tOW6plxyXG5cdFx0XHRlbHNlIGlmIHR5cGUgaXMgMlxyXG5cdFx0XHRcdHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgMCwgMSlcclxuXHRcdFx0XHRpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHRcdFx0c3BhY2U6IHNwYWNlX2lkLFxyXG5cdFx0XHRcdFx0ZmxvdzogZmxvd19pZCxcclxuXHRcdFx0XHRcdHN0YXRlOiB7ICRuZTogXCJkcmFmdFwiIH0sXHJcblx0XHRcdFx0XHRzdWJtaXRfZGF0ZTogeyAkZ3RlOiBzdGFydF9kYXRlIH1cclxuXHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRzb3J0OiB7IHN1Ym1pdF9kYXRlOiAxIH1cclxuXHRcdFx0XHR9KS5mZXRjaCgpXHJcblx0XHRcdCMgMy3miYDmnIlcclxuXHRcdFx0ZWxzZSBpZiB0eXBlIGlzIDNcclxuXHRcdFx0XHRpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHRcdFx0c3BhY2U6IHNwYWNlX2lkLFxyXG5cdFx0XHRcdFx0ZmxvdzogZmxvd19pZCxcclxuXHRcdFx0XHRcdHN0YXRlOiB7ICRuZTogXCJkcmFmdFwiIH1cclxuXHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRzb3J0OiB7IHN1Ym1pdF9kYXRlOiAxIH1cclxuXHRcdFx0XHR9KS5mZXRjaCgpXHJcblxyXG5cdFx0XHRlanMgPSByZXF1aXJlKCdlanMnKVxyXG5cdFx0XHRzdHIgPSBBc3NldHMuZ2V0VGV4dCgnc2VydmVyL2Vqcy9leHBvcnRfaW5zdGFuY2VzLmVqcycpXHJcblxyXG5cdFx0XHQjIOajgOa1i+aYr+WQpuacieivreazlemUmeivr1xyXG5cdFx0XHRlanNMaW50ID0gcmVxdWlyZSgnZWpzLWxpbnQnKVxyXG5cdFx0XHRlcnJvcl9vYmogPSBlanNMaW50LmxpbnQoc3RyLCB7fSlcclxuXHRcdFx0aWYgZXJyb3Jfb2JqXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBcIj09PS9hcGkvd29ya2Zsb3cvZXhwb3J0OlwiXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBlcnJvcl9vYmpcclxuXHJcblx0XHRcdHRlbXBsYXRlID0gZWpzLmNvbXBpbGUoc3RyKVxyXG5cclxuXHRcdFx0bGFuZyA9ICdlbidcclxuXHRcdFx0aWYgY3VycmVudF91c2VyX2luZm8ubG9jYWxlIGlzICd6aC1jbidcclxuXHRcdFx0XHRsYW5nID0gJ3poLUNOJ1xyXG5cclxuXHRcdFx0cmV0ID0gdGVtcGxhdGUoe1xyXG5cdFx0XHRcdGxhbmc6IGxhbmcsXHJcblx0XHRcdFx0dGltZXpvbmVvZmZzZXQ6IHRpbWV6b25lb2Zmc2V0LFxyXG5cdFx0XHRcdGZvcm1fbmFtZTogZm9ybV9uYW1lLFxyXG5cdFx0XHRcdGZpZWxkczogZmllbGRzLFxyXG5cdFx0XHRcdHRhYmxlX2ZpZWxkczogdGFibGVfZmllbGRzLFxyXG5cdFx0XHRcdGluc190b194bHM6IGluc190b194bHNcclxuXHRcdFx0fSlcclxuXHJcblx0XHRcdGZpbGVOYW1lID0gXCJTdGVlZE9TV29ya2Zsb3dfXCIgKyBtb21lbnQoKS5mb3JtYXQoJ1lZWVlNTURESEhtbScpICsgXCIueGxzXCJcclxuXHRcdFx0cmVzLnNldEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKVxyXG5cdFx0XHRyZXMuc2V0SGVhZGVyKFwiQ29udGVudC1EaXNwb3NpdGlvblwiLCBcImF0dGFjaG1lbnQ7ZmlsZW5hbWU9XCIgKyBlbmNvZGVVUkkoZmlsZU5hbWUpKVxyXG5cdFx0XHRyZXMuZW5kKHJldClcclxuXHRcdGNhdGNoIGVcclxuXHRcdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRcdHJlcy5lbmQoZS5tZXNzYWdlKSIsIk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gV2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UoXCIvYXBpL3dvcmtmbG93L2V4cG9ydC9pbnN0YW5jZXNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICB2YXIgY3VycmVudF91c2VyX2luZm8sIGUsIGVqcywgZWpzTGludCwgZW5kX2RhdGUsIGVycm9yX29iaiwgZmllbGRzLCBmaWxlTmFtZSwgZmxvdywgZmxvd19pZCwgZm9ybSwgZm9ybV9uYW1lLCBpbnNfdG9feGxzLCBsYW5nLCBsYXN0X21vbnRoX2RhdGUsIG5vdywgcXVlcnksIHJldCwgc3BhY2VfaWQsIHN0YXJ0X2RhdGUsIHN0ciwgdGFibGVfZmllbGRzLCB0ZW1wbGF0ZSwgdGltZXpvbmVvZmZzZXQsIHR5cGU7XG4gICAgdHJ5IHtcbiAgICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgICBxdWVyeSA9IHJlcS5xdWVyeTtcbiAgICAgIHNwYWNlX2lkID0gcXVlcnkuc3BhY2VfaWQ7XG4gICAgICBmbG93X2lkID0gcXVlcnkuZmxvd19pZDtcbiAgICAgIHR5cGUgPSBwYXJzZUludChxdWVyeS50eXBlKTtcbiAgICAgIHRpbWV6b25lb2Zmc2V0ID0gcGFyc2VJbnQocXVlcnkudGltZXpvbmVvZmZzZXQpO1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZsb3dfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgZm9ybTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93LmZvcm1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAnY3VycmVudC5maWVsZHMnOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9ybV9uYW1lID0gZm9ybS5uYW1lO1xuICAgICAgZmllbGRzID0gZm9ybS5jdXJyZW50LmZpZWxkcztcbiAgICAgIHRhYmxlX2ZpZWxkcyA9IG5ldyBBcnJheTtcbiAgICAgIF8uZWFjaChmb3JtLmN1cnJlbnQuZmllbGRzLCBmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gXCJ0YWJsZVwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRhYmxlX2ZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnNfdG9feGxzID0gbmV3IEFycmF5O1xuICAgICAgc3RhcnRfZGF0ZSA9IG51bGw7XG4gICAgICBlbmRfZGF0ZSA9IG51bGw7XG4gICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgIGlmICh0eXBlID09PSAwKSB7XG4gICAgICAgIHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpO1xuICAgICAgICBpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgICBmbG93OiBmbG93X2lkLFxuICAgICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICAkbmU6IFwiZHJhZnRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VibWl0X2RhdGU6IHtcbiAgICAgICAgICAgICRndGU6IHN0YXJ0X2RhdGVcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBzb3J0OiB7XG4gICAgICAgICAgICBzdWJtaXRfZGF0ZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMSkge1xuICAgICAgICBsYXN0X21vbnRoX2RhdGUgPSBuZXcgRGF0ZShuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpIC0gMTAwMCAqIDYwICogNjAgKiAyNCk7XG4gICAgICAgIHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShsYXN0X21vbnRoX2RhdGUuZ2V0RnVsbFllYXIoKSwgbGFzdF9tb250aF9kYXRlLmdldE1vbnRoKCksIDEpO1xuICAgICAgICBlbmRfZGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSk7XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICAgIGZsb3c6IGZsb3dfaWQsXG4gICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICRuZTogXCJkcmFmdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICAkYW5kOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiB7XG4gICAgICAgICAgICAgICAgJGd0ZTogc3RhcnRfZGF0ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiB7XG4gICAgICAgICAgICAgICAgJGx0ZTogZW5kX2RhdGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAyKSB7XG4gICAgICAgIHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICAgIGZsb3c6IGZsb3dfaWQsXG4gICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICRuZTogXCJkcmFmdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdWJtaXRfZGF0ZToge1xuICAgICAgICAgICAgJGd0ZTogc3RhcnRfZGF0ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAzKSB7XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICAgIGZsb3c6IGZsb3dfaWQsXG4gICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICRuZTogXCJkcmFmdFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgc3VibWl0X2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9XG4gICAgICBlanMgPSByZXF1aXJlKCdlanMnKTtcbiAgICAgIHN0ciA9IEFzc2V0cy5nZXRUZXh0KCdzZXJ2ZXIvZWpzL2V4cG9ydF9pbnN0YW5jZXMuZWpzJyk7XG4gICAgICBlanNMaW50ID0gcmVxdWlyZSgnZWpzLWxpbnQnKTtcbiAgICAgIGVycm9yX29iaiA9IGVqc0xpbnQubGludChzdHIsIHt9KTtcbiAgICAgIGlmIChlcnJvcl9vYmopIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIj09PS9hcGkvd29ya2Zsb3cvZXhwb3J0OlwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcl9vYmopO1xuICAgICAgfVxuICAgICAgdGVtcGxhdGUgPSBlanMuY29tcGlsZShzdHIpO1xuICAgICAgbGFuZyA9ICdlbic7XG4gICAgICBpZiAoY3VycmVudF91c2VyX2luZm8ubG9jYWxlID09PSAnemgtY24nKSB7XG4gICAgICAgIGxhbmcgPSAnemgtQ04nO1xuICAgICAgfVxuICAgICAgcmV0ID0gdGVtcGxhdGUoe1xuICAgICAgICBsYW5nOiBsYW5nLFxuICAgICAgICB0aW1lem9uZW9mZnNldDogdGltZXpvbmVvZmZzZXQsXG4gICAgICAgIGZvcm1fbmFtZTogZm9ybV9uYW1lLFxuICAgICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgICAgdGFibGVfZmllbGRzOiB0YWJsZV9maWVsZHMsXG4gICAgICAgIGluc190b194bHM6IGluc190b194bHNcbiAgICAgIH0pO1xuICAgICAgZmlsZU5hbWUgPSBcIlN0ZWVkT1NXb3JrZmxvd19cIiArIG1vbWVudCgpLmZvcm1hdCgnWVlZWU1NRERISG1tJykgKyBcIi54bHNcIjtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIik7XG4gICAgICByZXMuc2V0SGVhZGVyKFwiQ29udGVudC1EaXNwb3NpdGlvblwiLCBcImF0dGFjaG1lbnQ7ZmlsZW5hbWU9XCIgKyBlbmNvZGVVUkkoZmlsZU5hbWUpKTtcbiAgICAgIHJldHVybiByZXMuZW5kKHJldCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGUgPSBlcnJvcjtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICByZXR1cm4gcmVzLmVuZChlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL3VmL3NwYWNlL2NoYW5nZXNldCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdHF1ZXJ5ID0gcmVxLnF1ZXJ5XHJcblx0XHRhdXRoX3Rva2VuID0gZGIuYXV0aF90b2tlbnMuZmluZE9uZSh7YXV0aF90b2tlbjogcXVlcnkuYXV0aF90b2tlbn0pXHJcblxyXG5cdFx0aWYgKG5vdCBhdXRoX3Rva2VuKSBvciAobm90IGF1dGhfdG9rZW4uZW5hYmxlZClcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvciA0MDEsICdVbmF1dGhvcml6ZWQnXHJcblxyXG5cdFx0c3luY190b2tlbiA9IHF1ZXJ5W1wic3luY190b2tlblwiXVxyXG5cdFx0Zm9ybWlkcyA9IHF1ZXJ5W1wiZm9ybWlkc1wiXSAjIOmAl+WPt+malOW8gOWtl+espuS4slxyXG5cdFx0aXNfYWRtaW4gPSBxdWVyeVtcImlzX2FkbWluXCJdXHJcblxyXG5cdFx0ZGF0YSA9IHV1Zmxvd01hbmFnZXIuZ2V0X1NwYWNlQ2hhbmdlU2V0KGZvcm1pZHMsIGlzX2FkbWluLCBzeW5jX3Rva2VuKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0ZGF0YTogZGF0YVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfSIsIkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL3VmL3NwYWNlL2NoYW5nZXNldCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhdXRoX3Rva2VuLCBkYXRhLCBlLCBmb3JtaWRzLCBpc19hZG1pbiwgcXVlcnksIHN5bmNfdG9rZW47XG4gIHRyeSB7XG4gICAgcXVlcnkgPSByZXEucXVlcnk7XG4gICAgYXV0aF90b2tlbiA9IGRiLmF1dGhfdG9rZW5zLmZpbmRPbmUoe1xuICAgICAgYXV0aF90b2tlbjogcXVlcnkuYXV0aF90b2tlblxuICAgIH0pO1xuICAgIGlmICgoIWF1dGhfdG9rZW4pIHx8ICghYXV0aF90b2tlbi5lbmFibGVkKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig0MDEsICdVbmF1dGhvcml6ZWQnKTtcbiAgICB9XG4gICAgc3luY190b2tlbiA9IHF1ZXJ5W1wic3luY190b2tlblwiXTtcbiAgICBmb3JtaWRzID0gcXVlcnlbXCJmb3JtaWRzXCJdO1xuICAgIGlzX2FkbWluID0gcXVlcnlbXCJpc19hZG1pblwiXTtcbiAgICBkYXRhID0gdXVmbG93TWFuYWdlci5nZXRfU3BhY2VDaGFuZ2VTZXQoZm9ybWlkcywgaXNfYWRtaW4sIHN5bmNfdG9rZW4pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L3JldHJpZXZlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgKGluc3RhbmNlX2Zyb21fY2xpZW50KSAtPlxyXG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXHJcblx0XHRcdHJldHJpZXZlX2NvbW1lbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFsncmV0cmlldmVfY29tbWVudCddXHJcblxyXG5cdFx0XHQjIOmqjOivgWluc3RhbmNl5Li65a6h5qC45Lit54q25oCBXHJcblx0XHRcdCMgdXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSlcclxuXHRcdFx0IyDmoKHpqoznlLPor7fljZXmmK/lvZPliY3nlKjmiLflt7LlrqHmoLjov4fnmoTljZXlrZDmiJbogIXlvZPliY3nlKjmiLfmmK/mj5DkuqTkurrmiJbnlLPor7fkurpcclxuXHRcdFx0aWYgKG5vdCBpbnN0YW5jZS5vdXRib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgYW5kIChpbnN0YW5jZS5zdWJtaXR0ZXIgaXNudCBjdXJyZW50X3VzZXIgYW5kIGluc3RhbmNlLmFwcGxpY2FudCBpc250IGN1cnJlbnRfdXNlcilcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICflvZPliY3nlKjmiLfkuI3nrKblkIjlj5blm57mnaHku7YnKVxyXG5cclxuXHRcdFx0cmV0cmlldmVfdHlwZSA9IFwiXCJcclxuXHJcblx0XHRcdHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlc1xyXG5cclxuXHRcdFx0I+iOt+WPluacgOaWsOeahHRyYWNl77yMIOWNs+WPluWbnuatpemqpFxyXG5cdFx0XHRsYXN0X3RyYWNlID0gXy5sYXN0KHRyYWNlcylcclxuXHRcdFx0bGFzdF90cmFjZV9pZCA9IGxhc3RfdHJhY2UuX2lkXHJcblx0XHRcdHByZXZpb3VzX3RyYWNlX2lkID0gbGFzdF90cmFjZS5wcmV2aW91c190cmFjZV9pZHNbMF07XHJcblx0XHRcdHByZXZpb3VzX3RyYWNlID0gXy5maW5kKHRyYWNlcywgKHQpLT5cclxuXHRcdFx0XHRyZXR1cm4gdC5faWQgaXMgcHJldmlvdXNfdHJhY2VfaWRcclxuXHRcdFx0KVxyXG5cdFx0XHRwcmV2aW91c190cmFjZV9zdGVwX2lkID0gcHJldmlvdXNfdHJhY2Uuc3RlcFxyXG5cdFx0XHRwcmV2aW91c190cmFjZV9uYW1lID0gcHJldmlvdXNfdHJhY2UubmFtZVxyXG5cdFx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblx0XHRcdHByZXZpb3VzX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQpXHJcblx0XHRcdGlmIHByZXZpb3VzX3N0ZXAuc3RlcF90eXBlIGlzIFwiY291bnRlclNpZ25cIlxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+S8muetvuS4jeiDveWPluWbnicpXHJcblxyXG5cdFx0XHQjIOWPluWbnuatpemqpOeahOWJjeS4gOS4quatpemqpOWkhOeQhuS6uuWUr+S4gO+8iOWNs+aOkumZpOaOieS8oOmYheWSjOi9rOWPkeeahGFwcHJvdmXlkI7vvIzliankvZnnmoRhcHByb3Zl5Y+q5pyJ5LiA5Liq77yJ5bm25LiU5piv5b2T5YmN55So5oi3XHJcblx0XHRcdHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzID0gXy5maWx0ZXIgcHJldmlvdXNfdHJhY2UuYXBwcm92ZXMsIChhKS0+XHJcblx0XHRcdFx0cmV0dXJuIGEudHlwZSBpc250ICdjYycgYW5kIGEudHlwZSBpc250ICdkaXN0cmlidXRlJyBhbmQgYS50eXBlIGlzbnQgJ2ZvcndhcmQnIGFuZCBbJ2FwcHJvdmVkJywnc3VibWl0dGVkJywncmVqZWN0ZWQnXS5pbmNsdWRlcyhhLmp1ZGdlKVxyXG5cclxuXHRcdFx0aWYgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXMubGVuZ3RoIGlzIDEgYW5kIChwcmV2aW91c190cmFjZV9hcHByb3Zlc1swXS51c2VyIGlzIGN1cnJlbnRfdXNlciBvciBwcmV2aW91c190cmFjZV9hcHByb3Zlc1swXS5oYW5kbGVyIGlzIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0XHRyZXRyaWV2ZV90eXBlID0gJ25vcm1hbCcgIyDnlLPor7fljZXmraPluLjmtYHovaznmoTlj5blm57vvIzljbPpnZ7kvKDpmIXlj5blm55cclxuXHJcblx0XHRcdGkgPSB0cmFjZXMubGVuZ3RoXHJcblx0XHRcdHJldHJpZXZlX2FwcHJvdmUgPSB7fVxyXG5cdFx0XHR3aGlsZSBpID4gMFxyXG5cdFx0XHRcdF8uZWFjaCB0cmFjZXNbaS0xXS5hcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0XHRcdGlmIGEudHlwZSBpcyAnY2MnIGFuZCBhLmlzX2ZpbmlzaGVkIGlzIHRydWUgYW5kIGEudXNlciBpcyBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfdHlwZSA9ICdjYydcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwcm92ZSA9IGFcclxuXHJcblx0XHRcdFx0aWYgcmV0cmlldmVfdHlwZSBpcyAnY2MnXHJcblx0XHRcdFx0XHRicmVha1xyXG5cclxuXHRcdFx0XHRpLS1cclxuXHJcblxyXG5cdFx0XHRpZiByZXRyaWV2ZV90eXBlIGlzICdub3JtYWwnXHJcblx0XHRcdFx0IyDojrflj5bkuIDkuKpmbG93XHJcblx0XHRcdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxyXG5cdFx0XHRcdHByZXZpb3VzX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQpXHJcblx0XHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdFx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkXHJcblx0XHRcdFx0b2xkX2luYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnNcclxuXHRcdFx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0XHRfLmVhY2ggdHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0aWYgdC5faWQgaXMgbGFzdF90cmFjZV9pZFxyXG5cdFx0XHRcdFx0XHRpZiBub3QgdC5hcHByb3Zlc1xyXG5cdFx0XHRcdFx0XHRcdHQuYXBwcm92ZXMgPSBuZXcgQXJyYXlcclxuXHRcdFx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZS5hcHByb3Zl6K6w5b2VXHJcblx0XHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYXBwciktPlxyXG5cdFx0XHRcdFx0XHRcdGlmIGFwcHIuaXNfZmluaXNoZWQgPT0gZmFsc2UgYW5kIGFwcHIudHlwZSBpc250IFwiY2NcIlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwci5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRcdFx0YXBwci5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwci5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmNvc3RfdGltZSA9IGFwcHIuZmluaXNoX2RhdGUgLSBhcHByLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0IyDlnKjlkIzkuIB0cmFjZeS4i+aPkuWFpeWPluWbnuaTjeS9nOiAheeahGFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdFx0Y3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0XHRcdFx0Y3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7IGZpZWxkczogeyBuYW1lOiAxLCBmdWxsbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci50cmFjZSA9IHQuX2lkXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5kdWVfZGF0ZSA9IHQuZHVlX2RhdGVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5yZWFkX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5qdWRnZSA9IFwicmV0cmlldmVkXCJcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5pc19yZWFkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmRlc2NyaXB0aW9uID0gcmV0cmlldmVfY29tbWVudFxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci52YWx1ZXMgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuY29zdF90aW1lID0gcmV0cmlldmVfYXBwci5maW5pc2hfZGF0ZSAtIHJldHJpZXZlX2FwcHIuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHR0LmFwcHJvdmVzLnB1c2gocmV0cmlldmVfYXBwcilcclxuXHJcblx0XHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2XorrDlvZVcclxuXHRcdFx0XHRcdFx0dC5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0dC5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHR0Lmp1ZGdlID0gXCJyZXRyaWV2ZWRcIlxyXG5cclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZV9pZF1cclxuXHRcdFx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RlcCA9IHByZXZpb3VzX3RyYWNlX3N0ZXBfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5uYW1lID0gcHJldmlvdXNfdHJhY2VfbmFtZVxyXG5cdFx0XHRcdG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdUcmFjZS5kdWVfZGF0ZSA9IHV1Zmxvd01hbmFnZXIuZ2V0RHVlRGF0ZShwcmV2aW91c19zdGVwLnRpbWVvdXRfaG91cnMpXHJcblx0XHRcdFx0bmV3VHJhY2UuYXBwcm92ZXMgPSBbXVxyXG5cdFx0XHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2UuYXBwcm92ZeiusOW9lVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZFxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUudXNlciA9IGN1cnJlbnRfdXNlclxyXG5cclxuXHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlciwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0bmV3QXBwcm92ZS51c2VyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWVcclxuXHJcblx0XHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdFx0IyDojrflj5ZuZXh0X3N0ZXBfdXNlcuaJgOWcqOeahOmDqOmXqOS/oeaBr1xyXG5cdFx0XHRcdG9yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKHNwYWNlX3VzZXIpXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBvcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXVxyXG5cclxuXHRcdFx0XHRuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmR1ZV9kYXRlID0gbmV3VHJhY2UuZHVlX2RhdGVcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cclxuXHRcdFx0XHR1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBuZXdBcHByb3ZlKVxyXG5cclxuXHRcdFx0XHRuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpXHJcblx0XHRcdFx0c2V0T2JqLmluYm94X3VzZXJzID0gW2N1cnJlbnRfdXNlcl1cclxuXHJcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XHJcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0dHJhY2VzLnB1c2gobmV3VHJhY2UpXHJcblx0XHRcdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlc1xyXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiXHJcblx0XHRcdFx0c2V0T2JqLmlzX2FyY2hpdmVkID0gZmFsc2VcclxuXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gcHJldmlvdXNfdHJhY2VfbmFtZVxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfYXV0b19zdWJtaXQgPSB1dWZsb3dNYW5hZ2VyLmdldEN1cnJlbnRTdGVwQXV0b1N1Ym1pdChmbG93LnRpbWVvdXRfYXV0b19zdWJtaXQsIHByZXZpb3VzX3N0ZXAubGluZXMpXHJcblxyXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9ian0pXHJcblx0XHRcdFx0aWYgclxyXG5cdFx0XHRcdFx0IyDnu5nooqvliKDpmaTnmoRpbmJveF91c2VycyDlkowg5b2T5YmN55So5oi3IOWPkemAgXB1c2hcclxuXHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdFx0XHRfLmVhY2gob2xkX2luYm94X3VzZXJzLCAodXNlcl9pZCktPlxyXG5cdFx0XHRcdFx0XHRpZiB1c2VyX2lkIGlzbnQgY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXHJcblx0XHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZXRyaWV2ZScsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKVxyXG5cclxuXHRcdFx0ZWxzZSBpZiByZXRyaWV2ZV90eXBlIGlzICdjYydcclxuXHRcdFx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0XHRpbnN0YW5jZV9pZCA9IGluc3RhbmNlLl9pZFxyXG5cdFx0XHRcdHRoZV90cmFjZSA9IF8uZmluZCB0cmFjZXMsICh0KS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gdC5faWQgaXMgcmV0cmlldmVfYXBwcm92ZS50cmFjZVxyXG5cclxuXHRcdFx0XHRfLmVhY2ggdGhlX3RyYWNlLmFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRcdFx0aWYgYS5faWQgaXMgcmV0cmlldmVfYXBwcm92ZS5faWRcclxuXHRcdFx0XHRcdFx0YS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdGEuZmluaXNoX2RhdGUgPSB1bmRlZmluZWRcclxuXHRcdFx0XHRcdFx0YS5qdWRnZSA9IHVuZGVmaW5lZFxyXG5cdFx0XHRcdFx0XHRhLmNvc3RfdGltZSA9IHVuZGVmaW5lZFxyXG5cclxuXHRcdFx0XHRjY191c2VycyA9IGluc3RhbmNlLmNjX3VzZXJzXHJcblx0XHRcdFx0Y2NfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5vd1xyXG5cdFx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiXHJcblx0XHRcdFx0c2V0T2JqLmlzX2FyY2hpdmVkID0gZmFsc2VcclxuXHRcdFx0XHRzZXRPYmouY2NfdXNlcnMgPSBjY191c2Vyc1xyXG5cdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMnXSA9IHRoZV90cmFjZS5hcHByb3Zlc1xyXG5cclxuXHRcdFx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZCwgJ3RyYWNlcy5faWQnOiByZXRyaWV2ZV9hcHByb3ZlLnRyYWNlfSwgeyRzZXQ6IHNldE9ian0pXHJcblx0XHRcdFx0aWYgclxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0XHQjIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JldHJpZXZlJywgY3VycmVudF91c2VyLCBbY3VycmVudF91c2VyXSlcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YToge31cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7ZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmV0cmlldmUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGE7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIGNjX3VzZXJzLCBmbG93LCBoYW5kbGVyX2luZm8sIGksIGlucywgaW5zdGFuY2UsIGluc3RhbmNlX2lkLCBsYXN0X3RyYWNlLCBsYXN0X3RyYWNlX2lkLCBuZXdBcHByb3ZlLCBuZXdUcmFjZSwgbm93LCBvbGRfaW5ib3hfdXNlcnMsIG9yZ19pbmZvLCBwcmV2aW91c19zdGVwLCBwcmV2aW91c190cmFjZSwgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXMsIHByZXZpb3VzX3RyYWNlX2lkLCBwcmV2aW91c190cmFjZV9uYW1lLCBwcmV2aW91c190cmFjZV9zdGVwX2lkLCByLCByZXRyaWV2ZV9hcHByb3ZlLCByZXRyaWV2ZV9jb21tZW50LCByZXRyaWV2ZV90eXBlLCBzZXRPYmosIHNwYWNlX2lkLCBzcGFjZV91c2VyLCB0aGVfdHJhY2UsIHRyYWNlcztcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICByZXRyaWV2ZV9jb21tZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbJ3JldHJpZXZlX2NvbW1lbnQnXTtcbiAgICAgIGlmICgoIWluc3RhbmNlLm91dGJveF91c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSAmJiAoaW5zdGFuY2Uuc3VibWl0dGVyICE9PSBjdXJyZW50X3VzZXIgJiYgaW5zdGFuY2UuYXBwbGljYW50ICE9PSBjdXJyZW50X3VzZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+W9k+WJjeeUqOaIt+S4jeespuWQiOWPluWbnuadoeS7ticpO1xuICAgICAgfVxuICAgICAgcmV0cmlldmVfdHlwZSA9IFwiXCI7XG4gICAgICB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XG4gICAgICBsYXN0X3RyYWNlID0gXy5sYXN0KHRyYWNlcyk7XG4gICAgICBsYXN0X3RyYWNlX2lkID0gbGFzdF90cmFjZS5faWQ7XG4gICAgICBwcmV2aW91c190cmFjZV9pZCA9IGxhc3RfdHJhY2UucHJldmlvdXNfdHJhY2VfaWRzWzBdO1xuICAgICAgcHJldmlvdXNfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Ll9pZCA9PT0gcHJldmlvdXNfdHJhY2VfaWQ7XG4gICAgICB9KTtcbiAgICAgIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQgPSBwcmV2aW91c190cmFjZS5zdGVwO1xuICAgICAgcHJldmlvdXNfdHJhY2VfbmFtZSA9IHByZXZpb3VzX3RyYWNlLm5hbWU7XG4gICAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICAgICAgcHJldmlvdXNfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZCk7XG4gICAgICBpZiAocHJldmlvdXNfc3RlcC5zdGVwX3R5cGUgPT09IFwiY291bnRlclNpZ25cIikge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfkvJrnrb7kuI3og73lj5blm54nKTtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzID0gXy5maWx0ZXIocHJldmlvdXNfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgcmV0dXJuIGEudHlwZSAhPT0gJ2NjJyAmJiBhLnR5cGUgIT09ICdkaXN0cmlidXRlJyAmJiBhLnR5cGUgIT09ICdmb3J3YXJkJyAmJiBbJ2FwcHJvdmVkJywgJ3N1Ym1pdHRlZCcsICdyZWplY3RlZCddLmluY2x1ZGVzKGEuanVkZ2UpO1xuICAgICAgfSk7XG4gICAgICBpZiAocHJldmlvdXNfdHJhY2VfYXBwcm92ZXMubGVuZ3RoID09PSAxICYmIChwcmV2aW91c190cmFjZV9hcHByb3Zlc1swXS51c2VyID09PSBjdXJyZW50X3VzZXIgfHwgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXNbMF0uaGFuZGxlciA9PT0gY3VycmVudF91c2VyKSkge1xuICAgICAgICByZXRyaWV2ZV90eXBlID0gJ25vcm1hbCc7XG4gICAgICB9XG4gICAgICBpID0gdHJhY2VzLmxlbmd0aDtcbiAgICAgIHJldHJpZXZlX2FwcHJvdmUgPSB7fTtcbiAgICAgIHdoaWxlIChpID4gMCkge1xuICAgICAgICBfLmVhY2godHJhY2VzW2kgLSAxXS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgIGlmIChhLnR5cGUgPT09ICdjYycgJiYgYS5pc19maW5pc2hlZCA9PT0gdHJ1ZSAmJiBhLnVzZXIgPT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgcmV0cmlldmVfdHlwZSA9ICdjYyc7XG4gICAgICAgICAgICByZXR1cm4gcmV0cmlldmVfYXBwcm92ZSA9IGE7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJldHJpZXZlX3R5cGUgPT09ICdjYycpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBpZiAocmV0cmlldmVfdHlwZSA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KTtcbiAgICAgICAgcHJldmlvdXNfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZCk7XG4gICAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkO1xuICAgICAgICBvbGRfaW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2VycztcbiAgICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIF8uZWFjaCh0cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICB2YXIgY3VycmVudF9zcGFjZV91c2VyLCBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLCByZXRyaWV2ZV9hcHByO1xuICAgICAgICAgIGlmICh0Ll9pZCA9PT0gbGFzdF90cmFjZV9pZCkge1xuICAgICAgICAgICAgaWYgKCF0LmFwcHJvdmVzKSB7XG4gICAgICAgICAgICAgIHQuYXBwcm92ZXMgPSBuZXcgQXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYXBwcikge1xuICAgICAgICAgICAgICBpZiAoYXBwci5pc19maW5pc2hlZCA9PT0gZmFsc2UgJiYgYXBwci50eXBlICE9PSBcImNjXCIpIHtcbiAgICAgICAgICAgICAgICBhcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgICAgYXBwci5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgICBhcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgICBhcHByLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYXBwci5pc19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhcHByLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcHIuY29zdF90aW1lID0gYXBwci5maW5pc2hfZGF0ZSAtIGFwcHIuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgICAgICAgIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbiwge1xuICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgICAgIGZ1bGxuYW1lOiAxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwciA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnRyYWNlID0gdC5faWQ7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5kdWVfZGF0ZSA9IHQuZHVlX2RhdGU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuanVkZ2UgPSBcInJldHJpZXZlZFwiO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5pc19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuZGVzY3JpcHRpb24gPSByZXRyaWV2ZV9jb21tZW50O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5jb3N0X3RpbWUgPSByZXRyaWV2ZV9hcHByLmZpbmlzaF9kYXRlIC0gcmV0cmlldmVfYXBwci5zdGFydF9kYXRlO1xuICAgICAgICAgICAgdC5hcHByb3Zlcy5wdXNoKHJldHJpZXZlX2FwcHIpO1xuICAgICAgICAgICAgdC5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0LmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgcmV0dXJuIHQuanVkZ2UgPSBcInJldHJpZXZlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5ld1RyYWNlID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgbmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2VfaWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICBuZXdUcmFjZS5zdGVwID0gcHJldmlvdXNfdHJhY2Vfc3RlcF9pZDtcbiAgICAgICAgbmV3VHJhY2UubmFtZSA9IHByZXZpb3VzX3RyYWNlX25hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKHByZXZpb3VzX3N0ZXAudGltZW91dF9ob3Vycyk7XG4gICAgICAgIG5ld1RyYWNlLmFwcHJvdmVzID0gW107XG4gICAgICAgIG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgIG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgbmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZDtcbiAgICAgICAgbmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICBuZXdBcHByb3ZlLnVzZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyLCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3QXBwcm92ZS51c2VyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZTtcbiAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyID0gY3VycmVudF91c2VyO1xuICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xuICAgICAgICBzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICAgIG9yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKHNwYWNlX3VzZXIpO1xuICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl07XG4gICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl07XG4gICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBvcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXTtcbiAgICAgICAgbmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICBuZXdBcHByb3ZlLmR1ZV9kYXRlID0gbmV3VHJhY2UuZHVlX2RhdGU7XG4gICAgICAgIG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlO1xuICAgICAgICBuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgIG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgICAgdXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSk7XG4gICAgICAgIG5ld1RyYWNlLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSk7XG4gICAgICAgIHNldE9iai5pbmJveF91c2VycyA9IFtjdXJyZW50X3VzZXJdO1xuICAgICAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgdHJhY2VzLnB1c2gobmV3VHJhY2UpO1xuICAgICAgICBzZXRPYmoudHJhY2VzID0gdHJhY2VzO1xuICAgICAgICBzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgICAgICAgc2V0T2JqLmlzX2FyY2hpdmVkID0gZmFsc2U7XG4gICAgICAgIHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHByZXZpb3VzX3RyYWNlX25hbWU7XG4gICAgICAgIHNldE9iai5jdXJyZW50X3N0ZXBfYXV0b19zdWJtaXQgPSB1dWZsb3dNYW5hZ2VyLmdldEN1cnJlbnRTdGVwQXV0b1N1Ym1pdChmbG93LnRpbWVvdXRfYXV0b19zdWJtaXQsIHByZXZpb3VzX3N0ZXAubGluZXMpO1xuICAgICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICAgIF8uZWFjaChvbGRfaW5ib3hfdXNlcnMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgICAgIGlmICh1c2VyX2lkICE9PSBjdXJyZW50X3VzZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZXRyaWV2ZScsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXRyaWV2ZV90eXBlID09PSAnY2MnKSB7XG4gICAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgICBpbnN0YW5jZV9pZCA9IGluc3RhbmNlLl9pZDtcbiAgICAgICAgdGhlX3RyYWNlID0gXy5maW5kKHRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHJldHVybiB0Ll9pZCA9PT0gcmV0cmlldmVfYXBwcm92ZS50cmFjZTtcbiAgICAgICAgfSk7XG4gICAgICAgIF8uZWFjaCh0aGVfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICBpZiAoYS5faWQgPT09IHJldHJpZXZlX2FwcHJvdmUuX2lkKSB7XG4gICAgICAgICAgICBhLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBhLmZpbmlzaF9kYXRlID0gdm9pZCAwO1xuICAgICAgICAgICAgYS5qdWRnZSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiBhLmNvc3RfdGltZSA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjY191c2VycyA9IGluc3RhbmNlLmNjX3VzZXJzO1xuICAgICAgICBjY191c2Vycy5wdXNoKGN1cnJlbnRfdXNlcik7XG4gICAgICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgICBzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgICAgICAgc2V0T2JqLmlzX2FyY2hpdmVkID0gZmFsc2U7XG4gICAgICAgIHNldE9iai5jY191c2VycyA9IGNjX3VzZXJzO1xuICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzJ10gPSB0aGVfdHJhY2UuYXBwcm92ZXM7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkLFxuICAgICAgICAgICd0cmFjZXMuX2lkJzogcmV0cmlldmVfYXBwcm92ZS50cmFjZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICB9XG4gICAgICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZXRyaWV2ZScsIGN1cnJlbnRfdXNlciwgW2N1cnJlbnRfdXNlcl0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7fVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9mb3J3YXJkJywgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XHJcblx0dHJ5IHtcclxuXHRcdHZhciBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pZCA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcclxuXHJcblx0XHR2YXIgaGFzaERhdGEgPSByZXEuYm9keTtcclxuXHRcdHZhciBpbnN0YW5jZV9pZCA9IGhhc2hEYXRhLmluc3RhbmNlX2lkO1xyXG5cdFx0dmFyIHNwYWNlX2lkID0gaGFzaERhdGEuc3BhY2VfaWQ7XHJcblx0XHR2YXIgZmxvd19pZCA9IGhhc2hEYXRhLmZsb3dfaWQ7XHJcblx0XHR2YXIgaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50ID0gaGFzaERhdGEuaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50O1xyXG5cdFx0dmFyIGRlc2NyaXB0aW9uID0gaGFzaERhdGEuZGVzY3JpcHRpb247XHJcblx0XHR2YXIgaXNGb3J3YXJkQXR0YWNobWVudHMgPSBoYXNoRGF0YS5pc0ZvcndhcmRBdHRhY2htZW50cztcclxuXHRcdHZhciBzZWxlY3RlZFVzZXJzID0gaGFzaERhdGEuc2VsZWN0ZWRVc2VycztcclxuXHRcdHZhciBhY3Rpb25fdHlwZSA9IGhhc2hEYXRhLmFjdGlvbl90eXBlO1xyXG5cdFx0dmFyIHJlbGF0ZWQgPSBoYXNoRGF0YS5yZWxhdGVkO1xyXG5cdFx0dmFyIGZyb21fYXBwcm92ZV9pZCA9IGhhc2hEYXRhLmZyb21fYXBwcm92ZV9pZDtcclxuXHJcblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKTtcclxuXHRcdGNoZWNrKHNwYWNlX2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soZmxvd19pZCwgU3RyaW5nKTtcclxuXHRcdGNoZWNrKGhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCwgQm9vbGVhbik7XHJcblx0XHRjaGVjayhkZXNjcmlwdGlvbiwgU3RyaW5nKTtcclxuXHRcdGNoZWNrKGlzRm9yd2FyZEF0dGFjaG1lbnRzLCBCb29sZWFuKTtcclxuXHRcdGNoZWNrKHNlbGVjdGVkVXNlcnMsIEFycmF5KTtcclxuXHRcdGNoZWNrKGFjdGlvbl90eXBlLCBNYXRjaC5PbmVPZignZm9yd2FyZCcsICdkaXN0cmlidXRlJykpO1xyXG5cclxuXHRcdGlmIChhY3Rpb25fdHlwZSA9PSBcImRpc3RyaWJ1dGVcIilcclxuXHRcdFx0Y2hlY2soZnJvbV9hcHByb3ZlX2lkLCBTdHJpbmcpO1xyXG5cclxuXHRcdHZhciBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZCk7XHJcblx0XHR2YXIgb2xkX3NwYWNlX2lkID0gaW5zLnNwYWNlO1xyXG5cclxuXHRcdHZhciBmbG93ID0gZGIuZmxvd3MuZmluZE9uZShmbG93X2lkKTtcclxuXHJcblx0XHR2YXIgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShzcGFjZV9pZCk7XHJcblxyXG5cdFx0aWYgKCFpbnMgfHwgIWZsb3cgfHwgIXNwYWNlKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3BhcmFtcyBlcnJvciEnLCAncmVjb3JkIG5vdCBleGlzdHMhJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGZvcndhcmRfdXNlcnMgPSBuZXcgQXJyYXk7XHJcblx0XHRpZiAoXy5pc0VtcHR5KHNlbGVjdGVkVXNlcnMpKSB7XHJcblx0XHRcdGZvcndhcmRfdXNlcnMgPSBbY3VycmVudF91c2VyX2lkXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvcndhcmRfdXNlcnMgPSBzZWxlY3RlZFVzZXJzO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOagoemqjOWIhuWPkeWvueixoeaYr+WQpuacieWIhuWPkea1geeoi+eahOaPkOS6pOadg+mZkFxyXG5cdFx0dmFyIG5vX3Blcm1pc3Npb25fdXNlcl9pZHMgPSBuZXcgQXJyYXkoKTtcclxuXHRcdF8uZWFjaChmb3J3YXJkX3VzZXJzLCBmdW5jdGlvbiAodWlkKSB7XHJcblx0XHRcdHZhciBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhmbG93X2lkLCB1aWQpO1xyXG5cdFx0XHRpZiAoIXBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRkXCIpKSB7XHJcblx0XHRcdFx0Ly8gdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLor6XnlLPor7fkurrmsqHmnInmj5DkuqTmraTnlLPor7fljZXnmoTmnYPpmZDjgIJcIilcclxuXHRcdFx0XHRub19wZXJtaXNzaW9uX3VzZXJfaWRzLnB1c2godWlkKTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdGlmICghXy5pc0VtcHR5KG5vX3Blcm1pc3Npb25fdXNlcl9pZHMpKSB7XHJcblx0XHRcdHZhciBub19wZXJtaXNzaW9uX3VzZXJzX25hbWUgPSBuZXcgQXJyYXkoKTtcclxuXHRcdFx0ZGIudXNlcnMuZmluZCh7XHJcblx0XHRcdFx0X2lkOiB7XHJcblx0XHRcdFx0XHQkaW46IG5vX3Blcm1pc3Npb25fdXNlcl9pZHNcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcdG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLmZvckVhY2goZnVuY3Rpb24gKHUpIHtcclxuXHRcdFx0XHRub19wZXJtaXNzaW9uX3VzZXJzX25hbWUucHVzaCh1Lm5hbWUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignbm9fcGVybWlzc2lvbicsIFwi6K+l5o+Q5Lqk5Lq65rKh5pyJ5o+Q5Lqk5q2k55Sz6K+35Y2V55qE5p2D6ZmQ44CCXCIsIG5vX3Blcm1pc3Npb25fdXNlcnNfbmFtZS5qb2luKCcsJykpXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG5ld19pbnNfaWRzID0gbmV3IEFycmF5O1xyXG5cclxuXHRcdHZhciBjdXJyZW50X3RyYWNlID0gbnVsbDtcclxuXHRcdGlmIChhY3Rpb25fdHlwZSA9PSBcImRpc3RyaWJ1dGVcIikge1xyXG5cdFx0XHRfLmVhY2goaW5zLnRyYWNlcywgZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0XHRpZiAoIWN1cnJlbnRfdHJhY2UpIHtcclxuXHRcdFx0XHRcdF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbiAoYSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIWN1cnJlbnRfdHJhY2UpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoYS5faWQgPT0gZnJvbV9hcHByb3ZlX2lkKVxyXG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudF90cmFjZSA9IHQ7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VycmVudF90cmFjZSA9IF8ubGFzdChpbnMudHJhY2VzKTtcclxuXHRcdH1cclxuXHRcdHZhciBjdXJyZW50X3RyYWNlX2lkID0gY3VycmVudF90cmFjZS5faWQ7XHJcblx0XHR2YXIgZm9yd2FyZF9hcHByb3ZlcyA9IFtdO1xyXG5cdFx0dmFyIGZyb21fdXNlcl9uYW1lID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXJfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHR9XHJcblx0XHR9KS5uYW1lXHJcblx0XHR2YXIgc2V0X29iaiA9IG5ldyBPYmplY3Q7XHJcblxyXG5cdFx0Ly8g6K6h566XdmFsdWVzXHJcblx0XHR2YXIgb2xkX3ZhbHVlcyA9IGlucy52YWx1ZXMsXHJcblx0XHRcdG5ld192YWx1ZXMgPSB7fTtcclxuXHRcdHZhciBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmbG93LmZvcm0pO1xyXG5cdFx0dmFyIGZpZWxkcyA9IGZvcm0uY3VycmVudC5maWVsZHMgfHwgW107XHJcblxyXG5cdFx0dmFyIG9sZF9mb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnMuZm9ybSk7XHJcblx0XHR2YXIgb2xkX2Zvcm1fdmVyc2lvbiA9IGlucy5mb3JtX3ZlcnNpb24sXHJcblx0XHRcdG9sZF9maWVsZHMgPSBbXSxcclxuXHRcdFx0Y29tbW9uX2ZpZWxkcyA9IFtdO1xyXG5cclxuXHRcdHZhciBzZWxlY3RfdG9faW5wdXRfZmllbGRzID0gW107XHJcblxyXG5cdFx0aWYgKG9sZF9mb3JtLmN1cnJlbnQuX2lkID09IG9sZF9mb3JtX3ZlcnNpb24pIHtcclxuXHRcdFx0b2xkX2ZpZWxkcyA9IG9sZF9mb3JtLmN1cnJlbnQuZmllbGRzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aWYgKG9sZF9mb3JtLmhpc3RvcnlzKSB7XHJcblx0XHRcdFx0b2xkX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbiAoaCkge1xyXG5cdFx0XHRcdFx0aWYgKGguX2lkID09IG9sZF9mb3JtX3ZlcnNpb24pXHJcblx0XHRcdFx0XHRcdG9sZF9maWVsZHMgPSBoLmZpZWxkcztcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0ZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XHJcblx0XHRcdHZhciBleGlzdHNfZmllbGQgPSBfLmZpbmQob2xkX2ZpZWxkcywgZnVuY3Rpb24gKGYpIHtcclxuXHRcdFx0XHRyZXR1cm4gZi50eXBlID09IGZpZWxkLnR5cGUgJiYgZi5jb2RlID09IGZpZWxkLmNvZGU7XHJcblx0XHRcdH0pXHJcblx0XHRcdGlmIChleGlzdHNfZmllbGQpXHJcblx0XHRcdFx0Y29tbW9uX2ZpZWxkcy5wdXNoKGZpZWxkKTtcclxuXHRcdFx0dmFyIHNlbGVjdF9pbnB1dF9maWVsZCA9IF8uZmluZChvbGRfZmllbGRzLCBmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdHJldHVybiBmLnR5cGUgPT0gJ3NlbGVjdCcgJiYgZmllbGQudHlwZSA9PSAnaW5wdXQnICYmIGYuY29kZSA9PSBmaWVsZC5jb2RlO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHRpZiAoc2VsZWN0X2lucHV0X2ZpZWxkKVxyXG5cdFx0XHRcdHNlbGVjdF90b19pbnB1dF9maWVsZHMucHVzaChzZWxlY3RfaW5wdXRfZmllbGQpO1xyXG5cdFx0fSlcclxuXHJcblx0XHRzZWxlY3RfdG9faW5wdXRfZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XHJcblx0XHRcdGlmIChvbGRfdmFsdWVzW2ZpZWxkLmNvZGVdKSB7XHJcblx0XHRcdFx0bmV3X3ZhbHVlc1tmaWVsZC5jb2RlXSA9IG9sZF92YWx1ZXNbZmllbGQuY29kZV07XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0Y29tbW9uX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xyXG5cdFx0XHRpZiAoZmllbGQudHlwZSA9PSAnc2VjdGlvbicpIHtcclxuXHRcdFx0XHRpZiAoZmllbGQuZmllbGRzKSB7XHJcblx0XHRcdFx0XHRmaWVsZC5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdFx0XHQvLyDot6jlt6XkvZzljLrovazlj5HkuI3lpI3liLbpgInkurrpgInnu4RcclxuXHRcdFx0XHRcdFx0aWYgKFsnZ3JvdXAnLCAndXNlciddLmluY2x1ZGVzKGYudHlwZSkgJiYgb2xkX3NwYWNlX2lkICE9IHNwYWNlX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHZhciBrZXkgPSBmLmNvZGU7XHJcblx0XHRcdFx0XHRcdHZhciBvbGRfdiA9IG9sZF92YWx1ZXNba2V5XTtcclxuXHRcdFx0XHRcdFx0aWYgKG9sZF92KSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8g5qCh6aqMIOWNlemAie+8jOWkmumAie+8jOS4i+aLieahhiDlrZfmrrXlgLzmmK/lkKblnKjmlrDooajljZXlr7nlupTlrZfmrrXnmoTlj6/pgInlgLzojIPlm7TlhoVcclxuXHRcdFx0XHRcdFx0XHRpZiAoZi50eXBlID09ICdzZWxlY3QnIHx8IGYudHlwZSA9PSAncmFkaW8nKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgb3B0aW9ucyA9IGYub3B0aW9ucy5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaW5jbHVkZXMob2xkX3YpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoZi50eXBlID09ICdtdWx0aVNlbGVjdCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZi5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBvbGRfbXVsdGlTZWxlY3RlZCA9IG9sZF92LnNwbGl0KCcsJyk7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgbmV3X211bHRpU2VsZWN0ZWQgPSBfLmludGVyc2VjdGlvbihvcHRpb25zLCBvbGRfbXVsdGlTZWxlY3RlZCk7XHJcblx0XHRcdFx0XHRcdFx0XHRvbGRfdiA9IG5ld19tdWx0aVNlbGVjdGVkLmpvaW4oJywnKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdG5ld192YWx1ZXNba2V5XSA9IG9sZF92O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmIChmaWVsZC50eXBlID09ICd0YWJsZScpIHtcclxuXHRcdFx0XHRpZiAoIV8uaXNFbXB0eShvbGRfdmFsdWVzW2ZpZWxkLmNvZGVdKSkge1xyXG5cdFx0XHRcdFx0bmV3X3ZhbHVlc1tmaWVsZC5jb2RlXSA9IG5ldyBBcnJheTtcclxuXHRcdFx0XHRcdG9sZF92YWx1ZXNbZmllbGQuY29kZV0uZm9yRWFjaChmdW5jdGlvbiAob2xkX3RhYmxlX3Jvd192YWx1ZXMpIHtcclxuXHRcdFx0XHRcdFx0dmFyIG5ld190YWJsZV9yb3dfdmFsdWVzID0ge307XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIV8uaXNFbXB0eShmaWVsZC5maWVsZHMpKSB7XHJcblx0XHRcdFx0XHRcdFx0ZmllbGQuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIOi3qOW3peS9nOWMuui9rOWPkeS4jeWkjeWItumAieS6uumAiee7hFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFsnZ3JvdXAnLCAndXNlciddLmluY2x1ZGVzKGYudHlwZSkgJiYgb2xkX3NwYWNlX2lkICE9IHNwYWNlX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHZhciBrZXkgPSBmLmNvZGU7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgb2xkX3YgPSBvbGRfdGFibGVfcm93X3ZhbHVlc1trZXldO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKG9sZF92KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIOagoemqjCDljZXpgInvvIzlpJrpgInvvIzkuIvmi4nmoYYg5a2X5q615YC85piv5ZCm5Zyo5paw6KGo5Y2V5a+55bqU5a2X5q6155qE5Y+v6YCJ5YC86IyD5Zu05YaFXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChmLnR5cGUgPT0gJ3NlbGVjdCcgfHwgZi50eXBlID09ICdyYWRpbycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb3B0aW9ucyA9IGYub3B0aW9ucy5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmluY2x1ZGVzKG9sZF92KSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGYudHlwZSA9PSAnbXVsdGlTZWxlY3QnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmLm9wdGlvbnMuc3BsaXQoJ1xcbicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBvbGRfbXVsdGlTZWxlY3RlZCA9IG9sZF92LnNwbGl0KCcsJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIG5ld19tdWx0aVNlbGVjdGVkID0gXy5pbnRlcnNlY3Rpb24ob3B0aW9ucywgb2xkX211bHRpU2VsZWN0ZWQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9sZF92ID0gbmV3X211bHRpU2VsZWN0ZWQuam9pbignLCcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdfdGFibGVfcm93X3ZhbHVlc1trZXldID0gb2xkX3Y7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCFfLmlzRW1wdHkobmV3X3RhYmxlX3Jvd192YWx1ZXMpKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3X3ZhbHVlc1tmaWVsZC5jb2RlXS5wdXNoKG5ld190YWJsZV9yb3dfdmFsdWVzKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8g6Leo5bel5L2c5Yy66L2s5Y+R5LiN5aSN5Yi26YCJ5Lq66YCJ57uEXHJcblx0XHRcdFx0aWYgKFsnZ3JvdXAnLCAndXNlciddLmluY2x1ZGVzKGZpZWxkLnR5cGUpICYmIG9sZF9zcGFjZV9pZCAhPSBzcGFjZV9pZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIga2V5ID0gZmllbGQuY29kZTtcclxuXHRcdFx0XHR2YXIgb2xkX3YgPSBvbGRfdmFsdWVzW2tleV07XHJcblx0XHRcdFx0aWYgKG9sZF92KSB7XHJcblx0XHRcdFx0XHQvLyDmoKHpqowg5Y2V6YCJ77yM5aSa6YCJ77yM5LiL5ouJ5qGGIOWtl+auteWAvOaYr+WQpuWcqOaWsOihqOWNleWvueW6lOWtl+auteeahOWPr+mAieWAvOiMg+WbtOWGhVxyXG5cdFx0XHRcdFx0aWYgKGZpZWxkLnR5cGUgPT0gJ3NlbGVjdCcgfHwgZmllbGQudHlwZSA9PSAncmFkaW8nKSB7XHJcblx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZmllbGQub3B0aW9ucy5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pbmNsdWRlcyhvbGRfdikpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChmaWVsZC50eXBlID09ICdtdWx0aVNlbGVjdCcpIHtcclxuXHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmaWVsZC5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0dmFyIG9sZF9tdWx0aVNlbGVjdGVkID0gb2xkX3Yuc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdFx0dmFyIG5ld19tdWx0aVNlbGVjdGVkID0gXy5pbnRlcnNlY3Rpb24ob3B0aW9ucywgb2xkX211bHRpU2VsZWN0ZWQpO1xyXG5cdFx0XHRcdFx0XHRvbGRfdiA9IG5ld19tdWx0aVNlbGVjdGVkLmpvaW4oJywnKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRuZXdfdmFsdWVzW2tleV0gPSBvbGRfdjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9KVxyXG5cclxuXHRcdC8v5aaC5p6c5piv5YiG5Y+R77yM5YiZdmFsdWXkuK3nmoRyZWNvcmRfbmVlZOOAgUZPTkRTSUTkuI3pnIDopoHliIblj5HliLDmlrDnlLPor7fljZXkuK1cclxuXHRcdGlmIChhY3Rpb25fdHlwZSA9PT0gJ2Rpc3RyaWJ1dGUnKSB7XHJcblx0XHRcdGRlbGV0ZSBuZXdfdmFsdWVzLnJlY29yZF9uZWVkO1xyXG5cdFx0XHRkZWxldGUgbmV3X3ZhbHVlcy5GT05EU0lEO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOiuoeeul+eUs+ivt+WNleagh+mimFxyXG5cdFx0dmFyIGluc3RhbmNlX25hbWUgPSBcIlwiO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm0uY3VycmVudC5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdHZhciBpc2NyaXB0ID0gbmFtZV9mb3J1bWxhLnJlcGxhY2UoL1xcey9nLCBcIihuZXdfdmFsdWVzWydcIikucmVwbGFjZSgvXFx9L2csIFwiJ10gfHwgJycpXCIpO1xyXG5cdFx0XHR2YXIgcmV2ID0gZXZhbChpc2NyaXB0KTtcclxuXHRcdFx0aW5zdGFuY2VfbmFtZSA9IHJldiB8fCBmbG93Lm5hbWU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpbnN0YW5jZV9uYW1lID0gZmxvdy5uYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGluc3RhbmNl5Lit6K6w5b2V5b2T5YmN5q2l6aqk5ZCN56ewICMxMzE0XHJcblx0XHR2YXIgc3RhcnRfc3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uIChzdGVwKSB7XHJcblx0XHRcdHJldHVybiBzdGVwLnN0ZXBfdHlwZSA9PSAnc3RhcnQnO1xyXG5cdFx0fSlcclxuXHJcblx0XHQvLyDmlrDlu7rnlLPor7fljZXml7bvvIxpbnN0YW5jZXPorrDlvZXmtYHnqIvlkI3np7DjgIHmtYHnqIvliIbnsbvlkI3np7AgIzEzMTNcclxuXHRcdHZhciBjYXRlZ29yeV9uYW1lID0gXCJcIjtcclxuXHRcdGlmIChmb3JtLmNhdGVnb3J5KSB7XHJcblx0XHRcdHZhciBjYXRlZ29yeSA9IHV1Zmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcnkoZm9ybS5jYXRlZ29yeSk7XHJcblx0XHRcdGlmIChjYXRlZ29yeSlcclxuXHRcdFx0XHRjYXRlZ29yeV9uYW1lID0gY2F0ZWdvcnkubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRfLmVhY2goZm9yd2FyZF91c2VycywgZnVuY3Rpb24gKHVzZXJfaWQpIHtcclxuXHJcblx0XHRcdHZhciB1c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHVzZXJfaWQpO1xyXG5cclxuXHRcdFx0dmFyIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0dXNlcjogdXNlcl9pZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRvcmdhbml6YXRpb246IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR2YXIgc3BhY2VfdXNlcl9vcmdfaW5mbyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7XHJcblx0XHRcdFx0X2lkOiBzcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dmFyIG5vdyA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdHZhciBpbnNfb2JqID0ge307XHJcblxyXG5cdFx0XHR2YXIgYWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCB1c2VyX2lkKTtcclxuXHRcdFx0dmFyIGhhbmRsZXJfaWQgPSB1c2VyX2lkO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9zcGFjZV91c2VyID0gc3BhY2VfdXNlcjtcclxuXHRcdFx0dmFyIGhhbmRsZXJfb3JnX2luZm8gPSBzcGFjZV91c2VyX29yZ19pbmZvO1xyXG5cdFx0XHRpZiAoYWdlbnQpIHtcclxuXHRcdFx0XHRoYW5kbGVyX2lkID0gYWdlbnQ7XHJcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShhZ2VudCk7XHJcblx0XHRcdFx0aGFuZGxlcl9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGFnZW50KTtcclxuXHRcdFx0XHRoYW5kbGVyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKGhhbmRsZXJfc3BhY2VfdXNlcik7XHJcblx0XHRcdH1cclxuXHRcdFx0aW5zX29iai5faWQgPSBkYi5pbnN0YW5jZXMuX21ha2VOZXdJRCgpO1xyXG5cdFx0XHRpbnNfb2JqLnNwYWNlID0gc3BhY2VfaWQ7XHJcblx0XHRcdGluc19vYmouZmxvdyA9IGZsb3dfaWQ7XHJcblx0XHRcdGluc19vYmouZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50Ll9pZDtcclxuXHRcdFx0aW5zX29iai5mb3JtID0gZmxvdy5mb3JtO1xyXG5cdFx0XHRpbnNfb2JqLmZvcm1fdmVyc2lvbiA9IGZsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XHJcblx0XHRcdGluc19vYmoubmFtZSA9IGluc3RhbmNlX25hbWU7XHJcblx0XHRcdGluc19vYmouc3VibWl0dGVyID0gaGFuZGxlcl9pZDtcclxuXHRcdFx0aW5zX29iai5zdWJtaXR0ZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xyXG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudCA9IHVzZXJfaWQ7XHJcblx0XHRcdGluc19vYmouYXBwbGljYW50X25hbWUgPSB1c2VyX2luZm8ubmFtZTtcclxuXHRcdFx0aW5zX29iai5hcHBsaWNhbnRfb3JnYW5pemF0aW9uID0gc3BhY2VfdXNlci5vcmdhbml6YXRpb247XHJcblx0XHRcdGluc19vYmouYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mby5uYW1lO1xyXG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBzcGFjZV91c2VyX29yZ19pbmZvLmZ1bGxuYW1lO1xyXG5cdFx0XHRpbnNfb2JqLnN0YXRlID0gXCJkcmFmdFwiO1xyXG5cdFx0XHRpbnNfb2JqLmNvZGUgPSBcIlwiO1xyXG5cdFx0XHRpbnNfb2JqLmlzX2FyY2hpdmVkID0gZmFsc2U7XHJcblx0XHRcdGluc19vYmouaXNfZGVsZXRlZCA9IGZhbHNlO1xyXG5cdFx0XHRpbnNfb2JqLmNyZWF0ZWQgPSBub3c7XHJcblx0XHRcdGluc19vYmouY3JlYXRlZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcclxuXHRcdFx0aW5zX29iai5tb2RpZmllZCA9IG5vdztcclxuXHRcdFx0aW5zX29iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcclxuXHRcdFx0aW5zX29iai5pbmJveF91c2VycyA9IFtoYW5kbGVyX2lkXTtcclxuXHRcdFx0aW5zX29iai52YWx1ZXMgPSBuZXdfdmFsdWVzO1xyXG5cdFx0XHRpZiAoYWN0aW9uX3R5cGUgPT0gJ2Rpc3RyaWJ1dGUnKSB7XHJcblx0XHRcdFx0Ly8g6Kej5Yaz5aSa5qyh5YiG5Y+R55yL5LiN5Yiw5q2j5paH44CB6ZmE5Lu26Zeu6aKYXHJcblx0XHRcdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcclxuXHRcdFx0XHRcdGluc19vYmouZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlID0gaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzID0gXy5jbG9uZShpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XHJcblx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzLnB1c2goaW5zdGFuY2VfaWQpO1xyXG5cclxuXHRcdFx0XHRpZiAocmVsYXRlZCkge1xyXG5cdFx0XHRcdFx0aW5zX29iai5yZWxhdGVkX2luc3RhbmNlcyA9IFtpbnN0YW5jZV9pZF1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGFjdGlvbl90eXBlID09ICdmb3J3YXJkJykge1xyXG5cdFx0XHRcdGluc19vYmouZm9yd2FyZF9mcm9tX2luc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8g5paw5bu6VHJhY2VcclxuXHRcdFx0dmFyIHRyYWNlX29iaiA9IHt9O1xyXG5cdFx0XHR0cmFjZV9vYmouX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0dHJhY2Vfb2JqLmluc3RhbmNlID0gaW5zX29iai5faWQ7XHJcblx0XHRcdHRyYWNlX29iai5pc19maW5pc2hlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly8g5b2T5YmN5pyA5paw54mIZmxvd+S4reW8gOWni+iKgueCueeahHN0ZXBfaWRcclxuXHRcdFx0dmFyIHN0ZXBfaWQsIHN0ZXBfbmFtZSwgY2FuX2VkaXRfbWFpbl9hdHRhY2gsIGNhbl9lZGl0X25vcm1hbF9hdHRhY2g7XHJcblx0XHRcdGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwKSB7XHJcblx0XHRcdFx0aWYgKHN0ZXAuc3RlcF90eXBlID09IFwic3RhcnRcIikge1xyXG5cdFx0XHRcdFx0c3RlcF9pZCA9IHN0ZXAuX2lkO1xyXG5cdFx0XHRcdFx0c3RlcF9uYW1lID0gc3RlcC5uYW1lO1xyXG5cdFx0XHRcdFx0Y2FuX2VkaXRfbWFpbl9hdHRhY2ggPSBzdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoO1xyXG5cdFx0XHRcdFx0Y2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9IHN0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdHRyYWNlX29iai5zdGVwID0gc3RlcF9pZDtcclxuXHRcdFx0dHJhY2Vfb2JqLnN0YXJ0X2RhdGUgPSBub3c7XHJcblx0XHRcdHRyYWNlX29iai5uYW1lID0gc3RlcF9uYW1lO1xyXG5cclxuXHRcdFx0Ly8g5paw5bu6QXBwcm92ZVxyXG5cdFx0XHR2YXIgYXBwcl9vYmogPSB7fTtcclxuXHRcdFx0YXBwcl9vYmouX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0YXBwcl9vYmouaW5zdGFuY2UgPSBpbnNfb2JqLl9pZDtcclxuXHRcdFx0YXBwcl9vYmoudHJhY2UgPSB0cmFjZV9vYmouX2lkO1xyXG5cdFx0XHRhcHByX29iai5pc19maW5pc2hlZCA9IGZhbHNlO1xyXG5cdFx0XHRhcHByX29iai51c2VyID0gdXNlcl9pZDtcclxuXHRcdFx0YXBwcl9vYmoudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWU7XHJcblx0XHRcdGFwcHJfb2JqLmhhbmRsZXIgPSBoYW5kbGVyX2lkO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZTtcclxuXHRcdFx0YXBwcl9vYmouaGFuZGxlcl9vcmdhbml6YXRpb24gPSBoYW5kbGVyX3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gaGFuZGxlcl9vcmdfaW5mby5uYW1lO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGhhbmRsZXJfb3JnX2luZm8uZnVsbG5hbWU7XHJcblx0XHRcdGFwcHJfb2JqLnR5cGUgPSBcImRyYWZ0XCI7XHJcblx0XHRcdGFwcHJfb2JqLnN0YXJ0X2RhdGUgPSBub3c7XHJcblx0XHRcdGFwcHJfb2JqLnJlYWRfZGF0ZSA9IG5vdztcclxuXHRcdFx0YXBwcl9vYmouaXNfcmVhZCA9IGZhbHNlO1xyXG5cdFx0XHRhcHByX29iai5pc19lcnJvciA9IGZhbHNlO1xyXG5cclxuXHRcdFx0YXBwcl9vYmoudmFsdWVzID0gbmV3X3ZhbHVlcztcclxuXHJcblx0XHRcdGlmIChhZ2VudCkge1xyXG5cdFx0XHRcdGFwcHJfb2JqLmFnZW50ID0gYWdlbnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRyYWNlX29iai5hcHByb3ZlcyA9IFthcHByX29ial07XHJcblx0XHRcdGluc19vYmoudHJhY2VzID0gW3RyYWNlX29ial07XHJcblxyXG5cdFx0XHRpZiAoZmxvdy5hdXRvX3JlbWluZCA9PSB0cnVlKVxyXG5cdFx0XHRcdGluc19vYmouYXV0b19yZW1pbmQgPSB0cnVlO1xyXG5cclxuXHRcdFx0aW5zX29iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHN0YXJ0X3N0ZXAubmFtZTtcclxuXHJcblx0XHRcdGluc19vYmouZmxvd19uYW1lID0gZmxvdy5uYW1lO1xyXG5cdFx0XHRpZiAoY2F0ZWdvcnlfbmFtZSlcclxuXHRcdFx0XHRpbnNfb2JqLmNhdGVnb3J5X25hbWUgPSBjYXRlZ29yeS5uYW1lO1xyXG5cdFx0XHRcdGluc19vYmouY2F0ZWdvcnkgPSBjYXRlZ29yeS5faWQ7XHJcblxyXG5cdFx0XHRuZXdfaW5zX2lkID0gZGIuaW5zdGFuY2VzLmluc2VydChpbnNfb2JqKTtcclxuXHJcblx0XHRcdC8vIOWkjeWItumZhOS7tlxyXG5cdFx0XHR2YXIgY29sbGVjdGlvbiA9IGNmcy5pbnN0YW5jZXM7XHJcblxyXG5cdFx0XHQvL+WwhuWOn+ihqOWNleWGheWuueWtmOWCqOS4uuesrOS4gOS4qumZhOS7tlxyXG5cdFx0XHRpZiAoaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50KSB7XHJcblx0XHRcdFx0Ly8gdHJ5IHtcclxuXHJcblx0XHRcdFx0aW5zdGFuY2VIdG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyX2luZm8sIHNwYWNlX2lkLCBpbnMsIHtcclxuXHRcdFx0XHRcdGFic29sdXRlOiB0cnVlXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHR2YXIgaW5zdGFuY2VGaWxlID0gbmV3IEZTLkZpbGUoKTtcclxuXHRcdFx0XHRpbnN0YW5jZUZpbGUuYXR0YWNoRGF0YShCdWZmZXIuZnJvbShpbnN0YW5jZUh0bWwsIFwidXRmLThcIiksIHtcclxuXHRcdFx0XHRcdHR5cGU6IFwidGV4dC9odG1sXCJcclxuXHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHRcdFx0XHRcdGlmIChlcnJvcikge1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKGVycm9yLmVycm9yLCBlcnJvci5yZWFzb24pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGluc3RhbmNlRmlsZS5uYW1lKGlucy5uYW1lICsgXCIuaHRtbFwiKTtcclxuXHRcdFx0XHRcdGluc3RhbmNlRmlsZS5zaXplKGluc3RhbmNlSHRtbC5sZW5ndGgpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBtZXRhZGF0YSA9IHtcclxuXHRcdFx0XHRcdFx0b3duZXI6IHVzZXJfaWQsXHJcblx0XHRcdFx0XHRcdG93bmVyX25hbWU6IHVzZXJfaW5mby5uYW1lLFxyXG5cdFx0XHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0XHRcdGluc3RhbmNlOiBuZXdfaW5zX2lkLFxyXG5cdFx0XHRcdFx0XHRhcHByb3ZlOiBhcHByX29iai5faWQsXHJcblx0XHRcdFx0XHRcdGN1cnJlbnQ6IHRydWVcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRpbnN0YW5jZUZpbGUubWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuXHRcdFx0XHRcdHZhciBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQoaW5zdGFuY2VGaWxlKTtcclxuXHRcdFx0XHRcdGZpbGVPYmoudXBkYXRlKHtcclxuXHRcdFx0XHRcdFx0JHNldDoge1xyXG5cdFx0XHRcdFx0XHRcdCdtZXRhZGF0YS5wYXJlbnQnOiBmaWxlT2JqLl9pZFxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdC8vIH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHQvLyAgICAgY29uc29sZS5lcnJvcihlKTtcclxuXHRcdFx0XHQvLyB9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChpc0ZvcndhcmRBdHRhY2htZW50cyAmJiBhY3Rpb25fdHlwZSA9PSAnZm9yd2FyZCcpIHtcclxuXHRcdFx0XHR2YXIgZmlsZXMgPSBjb2xsZWN0aW9uLmZpbmQoe1xyXG5cdFx0XHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2VfaWQsXHJcblx0XHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XHJcblx0XHRcdFx0XHQvLyDliKTmlq3mlrDnmoTmtYHnqIvlvIDlp4voioLngrnmmK/lkKbmnInnvJbovpHmraPmloflkoznvJbovpHpmYTku7bmnYPpmZBcclxuXHRcdFx0XHRcdGlmIChmLm1ldGFkYXRhLm1haW4gPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoY2FuX2VkaXRfbWFpbl9hdHRhY2ggIT0gdHJ1ZSAmJiBjYW5fZWRpdF9ub3JtYWxfYXR0YWNoICE9IHRydWUpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYgKGNhbl9lZGl0X25vcm1hbF9hdHRhY2ggIT0gdHJ1ZSlcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dmFyIG5ld0ZpbGUgPSBuZXcgRlMuRmlsZSgpO1xyXG5cdFx0XHRcdFx0bmV3RmlsZS5hdHRhY2hEYXRhKGYuY3JlYXRlUmVhZFN0cmVhbSgnaW5zdGFuY2VzJyksIHtcclxuXHRcdFx0XHRcdFx0dHlwZTogZi5vcmlnaW5hbC50eXBlXHJcblx0XHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyKSB7XHJcblx0XHRcdFx0XHRcdGlmIChlcnIpIHtcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKGVyci5lcnJvciwgZXJyLnJlYXNvbik7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bmV3RmlsZS5uYW1lKGYubmFtZSgpKTtcclxuXHRcdFx0XHRcdFx0bmV3RmlsZS5zaXplKGYuc2l6ZSgpKTtcclxuXHRcdFx0XHRcdFx0dmFyIG1ldGFkYXRhID0ge1xyXG5cdFx0XHRcdFx0XHRcdG93bmVyOiB1c2VyX2lkLFxyXG5cdFx0XHRcdFx0XHRcdG93bmVyX25hbWU6IHVzZXJfaW5mby5uYW1lLFxyXG5cdFx0XHRcdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcclxuXHRcdFx0XHRcdFx0XHRpbnN0YW5jZTogbmV3X2luc19pZCxcclxuXHRcdFx0XHRcdFx0XHRhcHByb3ZlOiBhcHByX29iai5faWQsXHJcblx0XHRcdFx0XHRcdFx0Y3VycmVudDogdHJ1ZVxyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHRpZiAoZi5tZXRhZGF0YS5tYWluID09IHRydWUgJiYgY2FuX2VkaXRfbWFpbl9hdHRhY2ggPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhLm1haW4gPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdG5ld0ZpbGUubWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuXHRcdFx0XHRcdFx0dmFyIGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydChuZXdGaWxlKTtcclxuXHRcdFx0XHRcdFx0ZmlsZU9iai51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRcdCRzZXQ6IHtcclxuXHRcdFx0XHRcdFx0XHRcdCdtZXRhZGF0YS5wYXJlbnQnOiBmaWxlT2JqLl9pZFxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIOe7meW9k+WJjeeahOeUs+ivt+WNleWinuWKoOi9rOWPkeiusOW9lVxyXG5cdFx0XHR2YXIgYXBwciA9IHtcclxuXHRcdFx0XHQnX2lkJzogbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cixcclxuXHRcdFx0XHQnaW5zdGFuY2UnOiBpbnN0YW5jZV9pZCxcclxuXHRcdFx0XHQndHJhY2UnOiBjdXJyZW50X3RyYWNlX2lkLFxyXG5cdFx0XHRcdCdpc19maW5pc2hlZCc6IHRydWUsXHJcblx0XHRcdFx0J3VzZXInOiB1c2VyX2lkLFxyXG5cdFx0XHRcdCd1c2VyX25hbWUnOiB1c2VyX2luZm8ubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcic6IHVzZXJfaWQsXHJcblx0XHRcdFx0J2hhbmRsZXJfbmFtZSc6IHVzZXJfaW5mby5uYW1lLFxyXG5cdFx0XHRcdCdoYW5kbGVyX29yZ2FuaXphdGlvbic6IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uLFxyXG5cdFx0XHRcdCdoYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lJzogc3BhY2VfdXNlcl9vcmdfaW5mby5uYW1lLFxyXG5cdFx0XHRcdCdoYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSc6IHNwYWNlX3VzZXJfb3JnX2luZm8uZnVsbG5hbWUsXHJcblx0XHRcdFx0J3R5cGUnOiBhY3Rpb25fdHlwZSxcclxuXHRcdFx0XHQnc3RhcnRfZGF0ZSc6IG5ldyBEYXRlKCksXHJcblx0XHRcdFx0J2ZpbmlzaF9kYXRlJzogbmV3IERhdGUoKSxcclxuXHRcdFx0XHQnaXNfcmVhZCc6IGZhbHNlLFxyXG5cdFx0XHRcdCdqdWRnZSc6ICdzdWJtaXR0ZWQnLFxyXG5cdFx0XHRcdCdmcm9tX3VzZXInOiBjdXJyZW50X3VzZXJfaWQsXHJcblx0XHRcdFx0J2Zyb21fdXNlcl9uYW1lJzogZnJvbV91c2VyX25hbWUsXHJcblx0XHRcdFx0J2ZvcndhcmRfc3BhY2UnOiBzcGFjZV9pZCxcclxuXHRcdFx0XHQnZm9yd2FyZF9pbnN0YW5jZSc6IG5ld19pbnNfaWQsXHJcblx0XHRcdFx0J2Rlc2NyaXB0aW9uJzogZGVzY3JpcHRpb24sXHJcblx0XHRcdFx0J2Zyb21fYXBwcm92ZV9pZCc6IGZyb21fYXBwcm92ZV9pZFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Zm9yd2FyZF9hcHByb3Zlcy5wdXNoKGFwcHIpO1xyXG5cclxuXHRcdFx0bmV3X2luc19pZHMucHVzaChuZXdfaW5zX2lkKTtcclxuXHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xyXG5cdFx0fSlcclxuXHJcblx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdHNldF9vYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJfaWQ7XHJcblx0XHR2YXIgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc3RhbmNlX2lkLFxyXG5cdFx0XHRcInRyYWNlcy5faWRcIjogY3VycmVudF90cmFjZV9pZFxyXG5cdFx0fSwge1xyXG5cdFx0XHQkc2V0OiBzZXRfb2JqLFxyXG5cdFx0XHQkYWRkVG9TZXQ6IHtcclxuXHRcdFx0XHQndHJhY2VzLiQuYXBwcm92ZXMnOiB7XHJcblx0XHRcdFx0XHQkZWFjaDogZm9yd2FyZF9hcHByb3Zlc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0aWYgKHIpIHtcclxuXHRcdFx0Xy5lYWNoKGN1cnJlbnRfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRpZiAoYS5faWQgPT0gZnJvbV9hcHByb3ZlX2lkKSB7XHJcblx0XHRcdFx0XHR2YXIgdXBkYXRlX3JlYWQgPSB7fTtcclxuXHRcdFx0XHRcdHVwZGF0ZV9yZWFkW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdF9pZDogaW5zdGFuY2VfaWQsXHJcblx0XHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiBjdXJyZW50X3RyYWNlX2lkXHJcblx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdCRzZXQ6IHVwZGF0ZV9yZWFkXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7fVxyXG5cdFx0fSlcclxuXHR9IGNhdGNoIChlKSB7XHJcblx0XHRjb25zb2xlLmVycm9yKGUuc3RhY2spXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdGVycm9yczogW2VdXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fVxyXG5cclxufSkiLCJKc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvaW5zdGFuY2UvOmluc3RhbmNlSWQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEsIHJlcylcclxuXHRcdGN1cnJlbnRfdXNlcl9pZCA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGluc0lkID0gcmVxLnBhcmFtcy5pbnN0YW5jZUlkXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHsgZmllbGRzOiB7IHNwYWNlOiAxLCBmbG93OiAxLCBzdGF0ZTogMSwgaW5ib3hfdXNlcnM6IDEsIGNjX3VzZXJzOiAxLCBvdXRib3hfdXNlcnM6IDEsIHN1Ym1pdHRlcjogMSwgYXBwbGljYW50OiAxIH0gfSlcclxuXHJcblx0XHRpZiBub3QgaW5zXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlSWQgaXMgd3Jvbmcgb3IgaW5zdGFuY2Ugbm90IGV4aXN0cy4nKVxyXG5cclxuXHRcdHNwYWNlSWQgPSBpbnMuc3BhY2VcclxuXHRcdGZsb3dJZCA9IGlucy5mbG93XHJcblxyXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZUlkLCB1c2VyOiBjdXJyZW50X3VzZXJfaWQgfSkuY291bnQoKSBpcyAwXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ3VzZXIgaXMgbm90IGJlbG9uZyB0byB0aGlzIHNwYWNlLicpXHJcblxyXG5cdFx0Ym94ID0gJydcclxuXHJcblx0XHRpZiAoaW5zLmluYm94X3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWQpIG9yIChpbnMuY2NfdXNlcnM/LmluY2x1ZGVzIGN1cnJlbnRfdXNlcl9pZClcclxuXHRcdFx0Ym94ID0gJ2luYm94J1xyXG5cdFx0ZWxzZSBpZiBpbnMub3V0Ym94X3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWRcclxuXHRcdFx0Ym94ID0gJ291dGJveCdcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdkcmFmdCcgYW5kIGlucy5zdWJtaXR0ZXIgaXMgY3VycmVudF91c2VyX2lkXHJcblx0XHRcdGJveCA9ICdkcmFmdCdcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdwZW5kaW5nJyBhbmQgKGlucy5zdWJtaXR0ZXIgaXMgY3VycmVudF91c2VyX2lkIG9yIGlucy5hcHBsaWNhbnQgaXMgY3VycmVudF91c2VyX2lkKVxyXG5cdFx0XHRib3ggPSAncGVuZGluZydcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdjb21wbGV0ZWQnIGFuZCBpbnMuc3VibWl0dGVyIGlzIGN1cnJlbnRfdXNlcl9pZFxyXG5cdFx0XHRib3ggPSAnY29tcGxldGVkJ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoZmxvd0lkLCBjdXJyZW50X3VzZXJfaWQpXHJcblx0XHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoc3BhY2VJZCwgeyBmaWVsZHM6IHsgYWRtaW5zOiAxIH0gfSlcclxuXHRcdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSlcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsIFwibm8gcGVybWlzc2lvbi5cIilcclxuXHRcdFx0Ym94ID0gJ21vbml0b3InXHJcblxyXG5cdFx0cmVkaXJlY3RUbyA9IE1ldGVvci5hYnNvbHV0ZVVybCBcIndvcmtmbG93L3NwYWNlLyN7c3BhY2VJZH0vI3tib3h9LyN7aW5zSWR9XCJcclxuXHJcblx0XHRyZXMuc2V0SGVhZGVyIFwiTG9jYXRpb25cIiwgcmVkaXJlY3RUb1xyXG5cdFx0cmVzLndyaXRlSGVhZCAzMDJcclxuXHRcdHJlcy5lbmQoKVxyXG5cdFx0cmV0dXJuXHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9XHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9pbnN0YW5jZS86aW5zdGFuY2VJZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBib3gsIGN1cnJlbnRfdXNlcl9pZCwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3dJZCwgaW5zLCBpbnNJZCwgcGVybWlzc2lvbnMsIHJlZGlyZWN0VG8sIHJlZiwgcmVmMSwgcmVmMiwgc3BhY2UsIHNwYWNlSWQ7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxLCByZXMpO1xuICAgIGN1cnJlbnRfdXNlcl9pZCA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBpbnNJZCA9IHJlcS5wYXJhbXMuaW5zdGFuY2VJZDtcbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNJZCwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHNwYWNlOiAxLFxuICAgICAgICBmbG93OiAxLFxuICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgaW5ib3hfdXNlcnM6IDEsXG4gICAgICAgIGNjX3VzZXJzOiAxLFxuICAgICAgICBvdXRib3hfdXNlcnM6IDEsXG4gICAgICAgIHN1Ym1pdHRlcjogMSxcbiAgICAgICAgYXBwbGljYW50OiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbnMpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlSWQgaXMgd3Jvbmcgb3IgaW5zdGFuY2Ugbm90IGV4aXN0cy4nKTtcbiAgICB9XG4gICAgc3BhY2VJZCA9IGlucy5zcGFjZTtcbiAgICBmbG93SWQgPSBpbnMuZmxvdztcbiAgICBpZiAoZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICBzcGFjZTogc3BhY2VJZCxcbiAgICAgIHVzZXI6IGN1cnJlbnRfdXNlcl9pZFxuICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ3VzZXIgaXMgbm90IGJlbG9uZyB0byB0aGlzIHNwYWNlLicpO1xuICAgIH1cbiAgICBib3ggPSAnJztcbiAgICBpZiAoKChyZWYgPSBpbnMuaW5ib3hfdXNlcnMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSA6IHZvaWQgMCkgfHwgKChyZWYxID0gaW5zLmNjX3VzZXJzKSAhPSBudWxsID8gcmVmMS5pbmNsdWRlcyhjdXJyZW50X3VzZXJfaWQpIDogdm9pZCAwKSkge1xuICAgICAgYm94ID0gJ2luYm94JztcbiAgICB9IGVsc2UgaWYgKChyZWYyID0gaW5zLm91dGJveF91c2VycykgIT0gbnVsbCA/IHJlZjIuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSA6IHZvaWQgMCkge1xuICAgICAgYm94ID0gJ291dGJveCc7XG4gICAgfSBlbHNlIGlmIChpbnMuc3RhdGUgPT09ICdkcmFmdCcgJiYgaW5zLnN1Ym1pdHRlciA9PT0gY3VycmVudF91c2VyX2lkKSB7XG4gICAgICBib3ggPSAnZHJhZnQnO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAncGVuZGluZycgJiYgKGlucy5zdWJtaXR0ZXIgPT09IGN1cnJlbnRfdXNlcl9pZCB8fCBpbnMuYXBwbGljYW50ID09PSBjdXJyZW50X3VzZXJfaWQpKSB7XG4gICAgICBib3ggPSAncGVuZGluZyc7XG4gICAgfSBlbHNlIGlmIChpbnMuc3RhdGUgPT09ICdjb21wbGV0ZWQnICYmIGlucy5zdWJtaXR0ZXIgPT09IGN1cnJlbnRfdXNlcl9pZCkge1xuICAgICAgYm94ID0gJ2NvbXBsZXRlZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dJZCwgY3VycmVudF91c2VyX2lkKTtcbiAgICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoc3BhY2VJZCwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBhZG1pbnM6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXJfaWQpKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsIFwibm8gcGVybWlzc2lvbi5cIik7XG4gICAgICB9XG4gICAgICBib3ggPSAnbW9uaXRvcic7XG4gICAgfVxuICAgIHJlZGlyZWN0VG8gPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIHNwYWNlSWQgKyBcIi9cIiArIGJveCArIFwiL1wiICsgaW5zSWQpO1xuICAgIHJlcy5zZXRIZWFkZXIoXCJMb2NhdGlvblwiLCByZWRpcmVjdFRvKTtcbiAgICByZXMud3JpdGVIZWFkKDMwMik7XG4gICAgcmVzLmVuZCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL3BlbmRpbmcg6I635Y+W5b6F5Yqe5paH5Lu2XHJcblxyXG5AYXBpRGVzY3JpcHRpb24g6I635Y+W5b2T5YmN55So5oi355qE5b6F5Yqe5LqL6aG55YiX6KGoXHJcblxyXG5AYXBpTmFtZSBnZXRJbmJveFxyXG5cclxuQGFwaUdyb3VwIFdvcmtmbG93XHJcblxyXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXHJcblxyXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXHJcblxyXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XHJcblx0e1xyXG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxyXG5cdH1cclxuXHJcbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcclxuXHR7XHJcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuXHRcdFwiZGF0YVwiOiBbXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcImlkXCI6IFwiZzd3b2tYTmtSOXl4SHZBNERcIixcclxuXHRcdFx0XHRcInN0YXJ0X2RhdGVcIjogXCIyMDE3LTExLTIzVDAyOjI4OjUzLjE2NFpcIixcclxuXHRcdFx0XHRcImZsb3dfbmFtZVwiOiBcIuato+aWh+a1geeoi1wiLFxyXG5cdFx0XHRcdFwic3BhY2VfbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxyXG5cdFx0XHRcdFwibmFtZVwiOiBcIuato+aWh+a1geeoiyAxXCIsXHJcblx0XHRcdFx0XCJhcHBsaWNhbnRfbmFtZVwiOiBudWxsLFxyXG5cdFx0XHRcdFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCI6IFwi5a6h5om5546LXCIsXHJcblx0XHRcdFx0XCJzdWJtaXRfZGF0ZVwiOiBcIjIwMTctMDctMjVUMDY6MzY6NDguNDkyWlwiLFxyXG5cdFx0XHRcdFwic3RlcF9uYW1lXCI6IFwi5byA5aeLXCIsXHJcblx0XHRcdFx0XCJzcGFjZV9pZFwiOiBcImtmRHNNdjdnQmV3bUdYR0VMXCIsXHJcblx0XHRcdFx0XCJtb2RpZmllZFwiOiBcIjIwMTctMTEtMjNUMDI6Mjg6NTMuMTY0WlwiLFxyXG5cdFx0XHRcdFwiaXNfcmVhZFwiOiBmYWxzZSxcclxuXHRcdFx0XHRcInZhbHVlc1wiOiB7fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJpZFwiOiBcIldxS1NyV1FveXdnSmFNcDlrXCIsXHJcblx0XHRcdFx0XCJzdGFydF9kYXRlXCI6IFwiMjAxNy0wOC0xN1QwNzozODozNS40MjBaXCIsXHJcblx0XHRcdFx0XCJmbG93X25hbWVcIjogXCLmraPmlodcXG5cIixcclxuXHRcdFx0XHRcInNwYWNlX25hbWVcIjogXCLlrqHmibnnjotcIixcclxuXHRcdFx0XHRcIm5hbWVcIjogXCLmraPmlodcXG4gMVwiLFxyXG5cdFx0XHRcdFwiYXBwbGljYW50X25hbWVcIjogXCLmrrfkuq7ovolcIixcclxuXHRcdFx0XHRcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxyXG5cdFx0XHRcdFwic3VibWl0X2RhdGVcIjogXCIyMDE3LTA2LTI3VDEwOjI2OjE5LjQ2OFpcIixcclxuXHRcdFx0XHRcInN0ZXBfbmFtZVwiOiBcIuW8gOWni1wiLFxyXG5cdFx0XHRcdFwic3BhY2VfaWRcIjogXCJrZkRzTXY3Z0Jld21HWEdFTFwiLFxyXG5cdFx0XHRcdFwibW9kaWZpZWRcIjogXCIyMDE3LTA4LTE3VDA3OjM4OjM1LjQyMVpcIixcclxuXHRcdFx0XHRcImlzX3JlYWRcIjogdHJ1ZSxcclxuXHRcdFx0XHRcInZhbHVlc1wiOiB7fVxyXG5cdFx0XHR9XHJcblx0XHRdXHJcblx0fVxyXG4jIyNcclxuSnNvblJvdXRlcy5hZGQgJ2dldCcsICcvYXBpL3dvcmtmbG93L29wZW4vcGVuZGluZycsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ10gfHwgcmVxLnF1ZXJ5Py5zcGFjZUlkXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgc3BhY2VfaWQnKVxyXG5cclxuXHRcdHVzZXJfaWQgPSByZXEudXNlcklkXHJcblxyXG5cdFx0aWYgIXVzZXJfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnTm90IGxvZ2dlZCBpbicpXHJcblxyXG5cdFx0aWYgZGIudXNlcnMuZmluZCh7IF9pZDogdXNlcl9pZCB9KS5jb3VudCgpIGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxyXG5cclxuXHRcdGxpbWl0ID0gcmVxLnF1ZXJ5Py5saW1pdCB8fCA1MDBcclxuXHJcblx0XHRsaW1pdCA9IHBhcnNlSW50KGxpbWl0KVxyXG5cclxuXHRcdHVzZXJuYW1lID0gcmVxLnF1ZXJ5Py51c2VybmFtZVxyXG5cclxuXHRcdHVzZXJpZCA9IHJlcS5xdWVyeT8udXNlcmlkXHJcblxyXG5cdFx0YXR0YWNoID0gcmVxLnF1ZXJ5Py5hdHRhY2hcclxuXHJcblx0XHR3b3JrZmxvd19jYXRlZ29yaWVzID0gcmVxLnF1ZXJ5Py53b3JrZmxvd19jYXRlZ29yaWVzXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0c3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cclxuXHRcdCMg5aaC5p6c5b2T5YmN55So5oi35piv5bel5L2c5Yy6566h55CG5ZGY77yM5YiZ6YCa6L+H5p+l55yLdXJs5LiK5piv5ZCm5pyJdXNlcm5hbWVcXHVzZXJpZCDvvIxcclxuXHRcdCMg5aaC5p6c5pyJ77yM5YiZ6L+U5ZuedXNlcm5hbWVcXHVzZXJpZOWvueW6lOeahOeUqOaIt++8jOWQpuWImei/lOWbnuW9k+WJjeeUqOaIt+W+heWKnuOAglxyXG5cdFx0IyB1c2VybmFtZVxcdXNlcmlk6YO95a2Y5Zyo5pe277yMdXNlcmlk5LyY5YWIXHJcblx0XHRzcGVjaWFsX3VzZXJfaWRcclxuXHRcdGlmIHNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VyX2lkKVxyXG5cdFx0XHRpZiB1c2VyaWRcclxuXHRcdFx0XHRpZiBkYi51c2Vycy5maW5kKHsgX2lkOiB1c2VyaWQgfSkuY291bnQoKSA8IDFcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VyaWQ6ICN7dXNlcmlkfVwiKVxyXG5cclxuXHRcdFx0XHRzcGVjaWFsX3VzZXJfaWQgPSB1c2VyaWRcclxuXHRcdFx0ZWxzZSBpZiB1c2VybmFtZVxyXG5cdFx0XHRcdHUgPSBkYi51c2Vycy5maW5kT25lKHsgdXNlcm5hbWU6IHVzZXJuYW1lIH0sIHsgZmllbGRzOiB7IF9pZDogMSB9IH0pXHJcblx0XHRcdFx0aWYgXy5pc0VtcHR5KHUpXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsIFwiY2FuIG5vdCBmaW5kIHVzZXIgYnkgdXNlcm5hbWU6ICN7dXNlcm5hbWV9XCIpXHJcblxyXG5cdFx0XHRcdHNwZWNpYWxfdXNlcl9pZCA9IHUuX2lkXHJcblxyXG5cdFx0cmVzdWx0X2luc3RhbmNlcyA9IG5ldyBBcnJheVxyXG5cclxuXHRcdGlzX3JlYWQgPSBmYWxzZVxyXG5cdFx0c3RhcnRfZGF0ZSA9ICcnXHJcblx0XHR1aWQgPSB1c2VyX2lkXHJcblx0XHRxdWVyeSA9IHtcclxuXHRcdFx0JG9yOiBbeyBpbmJveF91c2VyczogdXNlcl9pZCB9LCB7IGNjX3VzZXJzOiB1c2VyX2lkIH1dXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgc3BlY2lhbF91c2VyX2lkXHJcblx0XHRcdHVpZCA9IHNwZWNpYWxfdXNlcl9pZFxyXG5cdFx0XHRxdWVyeSA9IHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0JG9yOiBbeyBpbmJveF91c2Vyczogc3BlY2lhbF91c2VyX2lkIH0sIHsgY2NfdXNlcnM6IHNwZWNpYWxfdXNlcl9pZCB9XVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0aWYgd29ya2Zsb3dfY2F0ZWdvcmllc1xyXG5cdFx0XHRxdWVyeS5jYXRlZ29yeSA9IHsgJGluOiB3b3JrZmxvd19jYXRlZ29yaWVzLnNwbGl0KCcsJykgfVxyXG5cclxuXHRcdHNwYWNlX25hbWVzID0ge31cclxuXHRcdHNwYWNlX25hbWVzW3NwYWNlLl9pZF0gPSBzcGFjZS5uYW1lXHJcblxyXG5cdFx0aWYgbGltaXQgPiAwXHJcblx0XHRcdGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7IHNvcnQ6IHsgbW9kaWZpZWQ6IC0xIH0sIGxpbWl0OiBsaW1pdCB9KS5mb3JFYWNoIChpKSAtPlxyXG5cclxuXHRcdFx0XHRpZiBpLmluYm94X3VzZXJzPy5pbmNsdWRlcyh1aWQpXHJcblx0XHRcdFx0XHRfLmVhY2ggaS50cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRcdFx0XHRpZiB0LmlzX2ZpbmlzaGVkIGlzIGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhKSAtPlxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgYS51c2VyIGlzIHVpZCBhbmQgYS50eXBlIGlzbnQgJ2NjJyBhbmQgbm90IGEuaXNfZmluaXNoZWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0aXNfcmVhZCA9IGEuaXNfcmVhZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydF9kYXRlID0gYS5zdGFydF9kYXRlXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0Xy5lYWNoIGkudHJhY2VzLCAodCkgLT5cclxuXHRcdFx0XHRcdFx0aWYgbm90IHN0YXJ0X2RhdGUgYW5kIHQuYXBwcm92ZXNcclxuXHRcdFx0XHRcdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGEpIC0+XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBub3Qgc3RhcnRfZGF0ZSBhbmQgYS51c2VyIGlzIHVpZCBhbmQgYS50eXBlIGlzICdjYycgYW5kIG5vdCBhLmlzX2ZpbmlzaGVkXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlzX3JlYWQgPSBhLmlzX3JlYWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhcnRfZGF0ZSA9IGEuc3RhcnRfZGF0ZVxyXG5cclxuXHRcdFx0XHRpZiBub3Qgc3BhY2VfbmFtZXNbaS5zcGFjZV1cclxuXHRcdFx0XHRcdHNwYWNlX25hbWVzW2kuc3BhY2VdID0gZGIuc3BhY2VzLmZpbmRPbmUoaS5zcGFjZSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pPy5uYW1lXHJcblxyXG5cdFx0XHRcdGggPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0aFtcImlkXCJdID0gaVtcIl9pZFwiXVxyXG5cdFx0XHRcdGhbXCJzdGFydF9kYXRlXCJdID0gc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdGhbXCJmbG93X25hbWVcIl0gPSBpLmZsb3dfbmFtZVxyXG5cdFx0XHRcdGhbXCJzcGFjZV9uYW1lXCJdID0gc3BhY2VfbmFtZXNbaS5zcGFjZV1cclxuXHRcdFx0XHRoW1wibmFtZVwiXSA9IGlbXCJuYW1lXCJdXHJcblx0XHRcdFx0aFtcImFwcGxpY2FudF9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9uYW1lXCJdXHJcblx0XHRcdFx0aFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXSA9IGlbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIl1cclxuXHRcdFx0XHRoW1wic3VibWl0X2RhdGVcIl0gPSBpW1wic3VibWl0X2RhdGVcIl1cclxuXHRcdFx0XHRoW1wic3RlcF9uYW1lXCJdID0gaS5jdXJyZW50X3N0ZXBfbmFtZVxyXG5cdFx0XHRcdGhbXCJzcGFjZV9pZFwiXSA9IGkuc3BhY2VcclxuXHRcdFx0XHRoW1wibW9kaWZpZWRcIl0gPSBpW1wibW9kaWZpZWRcIl1cclxuXHRcdFx0XHRoW1wiaXNfcmVhZFwiXSA9IGlzX3JlYWRcclxuXHRcdFx0XHRoW1widmFsdWVzXCJdID0gaVtcInZhbHVlc1wiXVxyXG5cclxuXHRcdFx0XHRpZiBhdHRhY2ggaXMgJ3RydWUnXHJcblx0XHRcdFx0XHRoLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHsgJ21ldGFkYXRhLmluc3RhbmNlJzogaS5faWQsICdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHsgJG5lOiB0cnVlIH0gfSwgeyBmaWVsZHM6IHsgY29waWVzOiAwIH0gfSkuZmV0Y2goKVxyXG5cclxuXHRcdFx0XHRyZXN1bHRfaW5zdGFuY2VzLnB1c2goaClcclxuXHJcblx0XHRub19saW1pdF9jb3VudCA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5KS5jb3VudCgpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXN1bHRfaW5zdGFuY2VzLCBjb3VudDogbm9fbGltaXRfY291bnQgfVxyXG5cdFx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5yZWFzb24gfV0gfVxyXG5cdFx0fVxyXG5cclxuIiwiXG4vKlxuQGFwaSB7Z2V0fSAvYXBpL3dvcmtmbG93L29wZW4vcGVuZGluZyDojrflj5blvoXlip7mlofku7ZcblxuQGFwaURlc2NyaXB0aW9uIOiOt+WPluW9k+WJjeeUqOaIt+eahOW+heWKnuS6i+mhueWIl+ihqFxuXG5AYXBpTmFtZSBnZXRJbmJveFxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcblx0e1xuXHRcdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcblx0fVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG5cdHtcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XHRcImRhdGFcIjogW1xuXHRcdFx0e1xuXHRcdFx0XHRcImlkXCI6IFwiZzd3b2tYTmtSOXl4SHZBNERcIixcblx0XHRcdFx0XCJzdGFydF9kYXRlXCI6IFwiMjAxNy0xMS0yM1QwMjoyODo1My4xNjRaXCIsXG5cdFx0XHRcdFwiZmxvd19uYW1lXCI6IFwi5q2j5paH5rWB56iLXCIsXG5cdFx0XHRcdFwic3BhY2VfbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxuXHRcdFx0XHRcIm5hbWVcIjogXCLmraPmlofmtYHnqIsgMVwiLFxuXHRcdFx0XHRcImFwcGxpY2FudF9uYW1lXCI6IG51bGwsXG5cdFx0XHRcdFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCI6IFwi5a6h5om5546LXCIsXG5cdFx0XHRcdFwic3VibWl0X2RhdGVcIjogXCIyMDE3LTA3LTI1VDA2OjM2OjQ4LjQ5MlpcIixcblx0XHRcdFx0XCJzdGVwX25hbWVcIjogXCLlvIDlp4tcIixcblx0XHRcdFx0XCJzcGFjZV9pZFwiOiBcImtmRHNNdjdnQmV3bUdYR0VMXCIsXG5cdFx0XHRcdFwibW9kaWZpZWRcIjogXCIyMDE3LTExLTIzVDAyOjI4OjUzLjE2NFpcIixcblx0XHRcdFx0XCJpc19yZWFkXCI6IGZhbHNlLFxuXHRcdFx0XHRcInZhbHVlc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJpZFwiOiBcIldxS1NyV1FveXdnSmFNcDlrXCIsXG5cdFx0XHRcdFwic3RhcnRfZGF0ZVwiOiBcIjIwMTctMDgtMTdUMDc6Mzg6MzUuNDIwWlwiLFxuXHRcdFx0XHRcImZsb3dfbmFtZVwiOiBcIuato+aWh1xcblwiLFxuXHRcdFx0XHRcInNwYWNlX25hbWVcIjogXCLlrqHmibnnjotcIixcblx0XHRcdFx0XCJuYW1lXCI6IFwi5q2j5paHXFxuIDFcIixcblx0XHRcdFx0XCJhcHBsaWNhbnRfbmFtZVwiOiBcIuaut+S6rui+iVwiLFxuXHRcdFx0XHRcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxuXHRcdFx0XHRcInN1Ym1pdF9kYXRlXCI6IFwiMjAxNy0wNi0yN1QxMDoyNjoxOS40NjhaXCIsXG5cdFx0XHRcdFwic3RlcF9uYW1lXCI6IFwi5byA5aeLXCIsXG5cdFx0XHRcdFwic3BhY2VfaWRcIjogXCJrZkRzTXY3Z0Jld21HWEdFTFwiLFxuXHRcdFx0XHRcIm1vZGlmaWVkXCI6IFwiMjAxNy0wOC0xN1QwNzozODozNS40MjFaXCIsXG5cdFx0XHRcdFwiaXNfcmVhZFwiOiB0cnVlLFxuXHRcdFx0XHRcInZhbHVlc1wiOiB7fVxuXHRcdFx0fVxuXHRcdF1cblx0fVxuICovXG5Kc29uUm91dGVzLmFkZCgnZ2V0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9wZW5kaW5nJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGF0dGFjaCwgZSwgaXNfcmVhZCwgbGltaXQsIG5vX2xpbWl0X2NvdW50LCBxdWVyeSwgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZXN1bHRfaW5zdGFuY2VzLCBzcGFjZSwgc3BhY2VfaWQsIHNwYWNlX25hbWVzLCBzcGVjaWFsX3VzZXJfaWQsIHN0YXJ0X2RhdGUsIHUsIHVpZCwgdXNlcl9pZCwgdXNlcmlkLCB1c2VybmFtZSwgd29ya2Zsb3dfY2F0ZWdvcmllcztcbiAgdHJ5IHtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddIHx8ICgocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLnNwYWNlSWQgOiB2b2lkIDApO1xuICAgIGlmICghc3BhY2VfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgc3BhY2VfaWQnKTtcbiAgICB9XG4gICAgdXNlcl9pZCA9IHJlcS51c2VySWQ7XG4gICAgaWYgKCF1c2VyX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdOb3QgbG9nZ2VkIGluJyk7XG4gICAgfVxuICAgIGlmIChkYi51c2Vycy5maW5kKHtcbiAgICAgIF9pZDogdXNlcl9pZFxuICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIGxpbWl0ID0gKChyZWYxID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMS5saW1pdCA6IHZvaWQgMCkgfHwgNTAwO1xuICAgIGxpbWl0ID0gcGFyc2VJbnQobGltaXQpO1xuICAgIHVzZXJuYW1lID0gKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLnVzZXJuYW1lIDogdm9pZCAwO1xuICAgIHVzZXJpZCA9IChyZWYzID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMy51c2VyaWQgOiB2b2lkIDA7XG4gICAgYXR0YWNoID0gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LmF0dGFjaCA6IHZvaWQgMDtcbiAgICB3b3JrZmxvd19jYXRlZ29yaWVzID0gKHJlZjUgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY1LndvcmtmbG93X2NhdGVnb3JpZXMgOiB2b2lkIDA7XG4gICAgc3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICBzcGVjaWFsX3VzZXJfaWQ7XG4gICAgaWYgKHNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VyX2lkKSkge1xuICAgICAgaWYgKHVzZXJpZCkge1xuICAgICAgICBpZiAoZGIudXNlcnMuZmluZCh7XG4gICAgICAgICAgX2lkOiB1c2VyaWRcbiAgICAgICAgfSkuY291bnQoKSA8IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsIFwiY2FuIG5vdCBmaW5kIHVzZXIgYnkgdXNlcmlkOiBcIiArIHVzZXJpZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3BlY2lhbF91c2VyX2lkID0gdXNlcmlkO1xuICAgICAgfSBlbHNlIGlmICh1c2VybmFtZSkge1xuICAgICAgICB1ID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIF9pZDogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfLmlzRW1wdHkodSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsIFwiY2FuIG5vdCBmaW5kIHVzZXIgYnkgdXNlcm5hbWU6IFwiICsgdXNlcm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHNwZWNpYWxfdXNlcl9pZCA9IHUuX2lkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHRfaW5zdGFuY2VzID0gbmV3IEFycmF5O1xuICAgIGlzX3JlYWQgPSBmYWxzZTtcbiAgICBzdGFydF9kYXRlID0gJyc7XG4gICAgdWlkID0gdXNlcl9pZDtcbiAgICBxdWVyeSA9IHtcbiAgICAgICRvcjogW1xuICAgICAgICB7XG4gICAgICAgICAgaW5ib3hfdXNlcnM6IHVzZXJfaWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIGNjX3VzZXJzOiB1c2VyX2lkXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICAgIGlmIChzcGVjaWFsX3VzZXJfaWQpIHtcbiAgICAgIHVpZCA9IHNwZWNpYWxfdXNlcl9pZDtcbiAgICAgIHF1ZXJ5ID0ge1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgICRvcjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluYm94X3VzZXJzOiBzcGVjaWFsX3VzZXJfaWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBjY191c2Vyczogc3BlY2lhbF91c2VyX2lkXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAod29ya2Zsb3dfY2F0ZWdvcmllcykge1xuICAgICAgcXVlcnkuY2F0ZWdvcnkgPSB7XG4gICAgICAgICRpbjogd29ya2Zsb3dfY2F0ZWdvcmllcy5zcGxpdCgnLCcpXG4gICAgICB9O1xuICAgIH1cbiAgICBzcGFjZV9uYW1lcyA9IHt9O1xuICAgIHNwYWNlX25hbWVzW3NwYWNlLl9pZF0gPSBzcGFjZS5uYW1lO1xuICAgIGlmIChsaW1pdCA+IDApIHtcbiAgICAgIGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XG4gICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICBtb2RpZmllZDogLTFcbiAgICAgICAgfSxcbiAgICAgICAgbGltaXQ6IGxpbWl0XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgdmFyIGgsIHJlZjYsIHJlZjc7XG4gICAgICAgIGlmICgocmVmNiA9IGkuaW5ib3hfdXNlcnMpICE9IG51bGwgPyByZWY2LmluY2x1ZGVzKHVpZCkgOiB2b2lkIDApIHtcbiAgICAgICAgICBfLmVhY2goaS50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0LmlzX2ZpbmlzaGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICByZXR1cm4gXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoYS51c2VyID09PSB1aWQgJiYgYS50eXBlICE9PSAnY2MnICYmICFhLmlzX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgICBpc19yZWFkID0gYS5pc19yZWFkO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0X2RhdGUgPSBhLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfLmVhY2goaS50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICghc3RhcnRfZGF0ZSAmJiB0LmFwcHJvdmVzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIGlmICghc3RhcnRfZGF0ZSAmJiBhLnVzZXIgPT09IHVpZCAmJiBhLnR5cGUgPT09ICdjYycgJiYgIWEuaXNfZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlzX3JlYWQgPSBhLmlzX3JlYWQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRfZGF0ZSA9IGEuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3BhY2VfbmFtZXNbaS5zcGFjZV0pIHtcbiAgICAgICAgICBzcGFjZV9uYW1lc1tpLnNwYWNlXSA9IChyZWY3ID0gZGIuc3BhY2VzLmZpbmRPbmUoaS5zcGFjZSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkgIT0gbnVsbCA/IHJlZjcubmFtZSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBoID0gbmV3IE9iamVjdDtcbiAgICAgICAgaFtcImlkXCJdID0gaVtcIl9pZFwiXTtcbiAgICAgICAgaFtcInN0YXJ0X2RhdGVcIl0gPSBzdGFydF9kYXRlO1xuICAgICAgICBoW1wiZmxvd19uYW1lXCJdID0gaS5mbG93X25hbWU7XG4gICAgICAgIGhbXCJzcGFjZV9uYW1lXCJdID0gc3BhY2VfbmFtZXNbaS5zcGFjZV07XG4gICAgICAgIGhbXCJuYW1lXCJdID0gaVtcIm5hbWVcIl07XG4gICAgICAgIGhbXCJhcHBsaWNhbnRfbmFtZVwiXSA9IGlbXCJhcHBsaWNhbnRfbmFtZVwiXTtcbiAgICAgICAgaFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXSA9IGlbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIl07XG4gICAgICAgIGhbXCJzdWJtaXRfZGF0ZVwiXSA9IGlbXCJzdWJtaXRfZGF0ZVwiXTtcbiAgICAgICAgaFtcInN0ZXBfbmFtZVwiXSA9IGkuY3VycmVudF9zdGVwX25hbWU7XG4gICAgICAgIGhbXCJzcGFjZV9pZFwiXSA9IGkuc3BhY2U7XG4gICAgICAgIGhbXCJtb2RpZmllZFwiXSA9IGlbXCJtb2RpZmllZFwiXTtcbiAgICAgICAgaFtcImlzX3JlYWRcIl0gPSBpc19yZWFkO1xuICAgICAgICBoW1widmFsdWVzXCJdID0gaVtcInZhbHVlc1wiXTtcbiAgICAgICAgaWYgKGF0dGFjaCA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgaC5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpLl9pZCxcbiAgICAgICAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcbiAgICAgICAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICAgICAgICRuZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBjb3BpZXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRfaW5zdGFuY2VzLnB1c2goaCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgbm9fbGltaXRfY291bnQgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSkuY291bnQoKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiLFxuICAgICAgICBkYXRhOiByZXN1bHRfaW5zdGFuY2VzLFxuICAgICAgICBjb3VudDogbm9fbGltaXRfY291bnRcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUucmVhc29uXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiQ29va2llcyA9IHJlcXVpcmUoXCJjb29raWVzXCIpXHJcblxyXG5NZXRlb3Iuc3RhcnR1cCAtPlxyXG5cdFdlYkFwcC5jb25uZWN0SGFuZGxlcnMudXNlIFwiL2FwaS93b3JrZmxvdy9leHBvcnQvdGFsYmVfdGVtcGxhdGVcIiwgKHJlcSwgcmVzLCBuZXh0KS0+XHJcblx0XHRjb29raWVzID0gbmV3IENvb2tpZXMoIHJlcSwgcmVzICk7XHJcblx0XHQjIGZpcnN0IGNoZWNrIHJlcXVlc3QgYm9keVxyXG5cdFx0aWYgcmVxLmJvZHlcclxuXHRcdFx0dXNlcklkID0gcmVxLmJvZHlbXCJYLVVzZXItSWRcIl1cclxuXHRcdFx0YXV0aFRva2VuID0gcmVxLmJvZHlbXCJYLUF1dGgtVG9rZW5cIl1cclxuXHJcblx0XHQjIHRoZW4gY2hlY2sgY29va2llXHJcblx0XHRpZiAhdXNlcklkIG9yICFhdXRoVG9rZW5cclxuXHRcdFx0dXNlcklkID0gY29va2llcy5nZXQoXCJYLVVzZXItSWRcIilcclxuXHRcdFx0YXV0aFRva2VuID0gY29va2llcy5nZXQoXCJYLUF1dGgtVG9rZW5cIilcclxuXHJcblx0XHRpZiAhKHVzZXJJZCBhbmQgYXV0aFRva2VuKVxyXG5cdFx0XHRyZXMud3JpdGVIZWFkKDQwMSk7XHJcblx0XHRcdHJlcy5lbmQgSlNPTi5zdHJpbmdpZnkoe1xyXG5cdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgWC1BdXRoLVRva2VuXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdH0pXHJcblx0XHRcdHJldHVybiA7XHJcblxyXG5cdFx0Zmxvd0lkID0gcmVxLnF1ZXJ5Py5mbG93O1xyXG5cclxuXHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQ6IGZsb3dJZH0sIHtmaWVsZHM6IHtzcGFjZTogMSwgZm9ybTogMSwgbmFtZTogMX19KVxyXG5cclxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtfaWQ6IGZsb3cuZm9ybX0sIHtmaWVsZHM6IHtzcGFjZTogMSwgXCJjdXJyZW50Ll9pZFwiOiAxfX0pXHJcblxyXG5cdFx0aWYgXy5pc0VtcHR5KGZsb3cpXHJcblx0XHRcdHJlcy53cml0ZUhlYWQoNDAxKTtcclxuXHRcdFx0cmVzLmVuZCBKU09OLnN0cmluZ2lmeSh7XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gSW52YWxpZCBmb3JtSWRcIixcclxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdFx0fSlcclxuXHRcdFx0cmV0dXJuIDtcclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgIVN0ZWVkb3MuaXNTcGFjZUFkbWluKGZsb3cuc3BhY2UsIHVzZXJJZClcclxuXHRcdFx0XHRyZXMud3JpdGVIZWFkKDQwMSk7XHJcblx0XHRcdFx0cmVzLmVuZCBKU09OLnN0cmluZ2lmeSh7XHJcblx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBObyBwZXJtaXNzaW9uXCIsXHJcblx0XHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoZmxvdy5zcGFjZSwgeyBmaWVsZHM6IHsgaXNfcGFpZDogMSB9IH0pXHJcblx0XHRcdGlmICFzcGFjZT8uaXNfcGFpZFxyXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0XHRjb2RlOiA0MDQsXHJcblx0XHRcdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBOb24tcGFpZCBzcGFjZS5cIixcclxuXHRcdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdGRhdGEgPSBUZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZSh7Zm9ybTogZmxvdy5mb3JtLCBmb3JtX3ZlcnNpb246IGZvcm0/LmN1cnJlbnQ/Ll9pZH0sIHRydWUpO1xyXG5cclxuXHRcdGZpbGVOYW1lID0gZmxvdy5uYW1lXHJcblxyXG5cdFx0cmVzLnNldEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtbXNkb3dubG9hZCcpO1xyXG5cdFx0cmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScrZW5jb2RlVVJJKGZpbGVOYW1lKSsnLmh0bWwnKTtcclxuXHRcdHJlcy5lbmQoZGF0YSkiLCJ2YXIgQ29va2llcztcblxuQ29va2llcyA9IHJlcXVpcmUoXCJjb29raWVzXCIpO1xuXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFdlYkFwcC5jb25uZWN0SGFuZGxlcnMudXNlKFwiL2FwaS93b3JrZmxvdy9leHBvcnQvdGFsYmVfdGVtcGxhdGVcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICB2YXIgYXV0aFRva2VuLCBjb29raWVzLCBkYXRhLCBmaWxlTmFtZSwgZmxvdywgZmxvd0lkLCBmb3JtLCByZWYsIHJlZjEsIHNwYWNlLCB1c2VySWQ7XG4gICAgY29va2llcyA9IG5ldyBDb29raWVzKHJlcSwgcmVzKTtcbiAgICBpZiAocmVxLmJvZHkpIHtcbiAgICAgIHVzZXJJZCA9IHJlcS5ib2R5W1wiWC1Vc2VyLUlkXCJdO1xuICAgICAgYXV0aFRva2VuID0gcmVxLmJvZHlbXCJYLUF1dGgtVG9rZW5cIl07XG4gICAgfVxuICAgIGlmICghdXNlcklkIHx8ICFhdXRoVG9rZW4pIHtcbiAgICAgIHVzZXJJZCA9IGNvb2tpZXMuZ2V0KFwiWC1Vc2VyLUlkXCIpO1xuICAgICAgYXV0aFRva2VuID0gY29va2llcy5nZXQoXCJYLUF1dGgtVG9rZW5cIik7XG4gICAgfVxuICAgIGlmICghKHVzZXJJZCAmJiBhdXRoVG9rZW4pKSB7XG4gICAgICByZXMud3JpdGVIZWFkKDQwMSk7XG4gICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLUF1dGgtVG9rZW5cIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZsb3dJZCA9IChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuZmxvdyA6IHZvaWQgMDtcbiAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZsb3dJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgZm9ybTogMSxcbiAgICAgICAgbmFtZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgIF9pZDogZmxvdy5mb3JtXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHNwYWNlOiAxLFxuICAgICAgICBcImN1cnJlbnQuX2lkXCI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoXy5pc0VtcHR5KGZsb3cpKSB7XG4gICAgICByZXMud3JpdGVIZWFkKDQwMSk7XG4gICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gSW52YWxpZCBmb3JtSWRcIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghU3RlZWRvcy5pc1NwYWNlQWRtaW4oZmxvdy5zcGFjZSwgdXNlcklkKSkge1xuICAgICAgICByZXMud3JpdGVIZWFkKDQwMSk7XG4gICAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb25cIixcbiAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKGZsb3cuc3BhY2UsIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgaXNfcGFpZDogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghKHNwYWNlICE9IG51bGwgPyBzcGFjZS5pc19wYWlkIDogdm9pZCAwKSkge1xuICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgY29kZTogNDA0LFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vbi1wYWlkIHNwYWNlLlwiLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBkYXRhID0gVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUoe1xuICAgICAgZm9ybTogZmxvdy5mb3JtLFxuICAgICAgZm9ybV92ZXJzaW9uOiBmb3JtICE9IG51bGwgPyAocmVmMSA9IGZvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjEuX2lkIDogdm9pZCAwIDogdm9pZCAwXG4gICAgfSwgdHJ1ZSk7XG4gICAgZmlsZU5hbWUgPSBmbG93Lm5hbWU7XG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtbXNkb3dubG9hZCcpO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDtmaWxlbmFtZT0nICsgZW5jb2RlVVJJKGZpbGVOYW1lKSArICcuaHRtbCcpO1xuICAgIHJldHVybiByZXMuZW5kKGRhdGEpO1xuICB9KTtcbn0pO1xuIiwiIyMjXHJcbkBhcGkge3Bvc3R9IC9hcGkvd29ya2Zsb3cvb3Blbi9kcmFmdHMg5paw5bu655Sz6K+35Y2VXHJcblxyXG5AYXBpTmFtZSBjcmVhdGVJbnN0YW5jZVxyXG5cclxuQGFwaUdyb3VwIFdvcmtmbG93XHJcblxyXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcclxuXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxue1xyXG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcclxufVxyXG5cclxuQGFwaVBhcmFtRXhhbXBsZSB7anNvbn0gUmVxdWVzdCBQYXlsb2FkOlxyXG57XHJcbiAgICBcImZsb3dcIjog5rWB56iLSWQsXHJcbiAgICBcImFwcGxpY2FudFwiOiDnlLPor7fkurpJZCxcclxuICAgIFwidmFsdWVzXCI6IHtcclxuICAgICAgICBcImZpZWxkczFcIiA6IOWtl+auteWAvCxcclxuICAgICAgICBcImZpZWxkczJcIiA6IOWtl+auteWAvCxcclxuICAgICAgICAuLi5cclxuICAgIH1cclxufVxyXG5cclxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxyXG57XHJcbiAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XHJcbn1cclxuXHJcbkBhcGlFcnJvckV4YW1wbGUge2pzb259IGVycm9yLVJlc3BvbnNlOlxyXG57XHJcbiAgICBcInN0YXR1c1wiOiBcImVycm9yXCIsXHJcbiAgICBcImRhdGFcIjogey4uLn1cclxufVxyXG4jIyNcclxuSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2RyYWZ0cycsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHR1c2VyX2lkID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7IF9pZDogdXNlcl9pZCB9KVxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciB4X3NwYWNlX2lkJylcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcl9pbmZvLl9pZClcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblxyXG5cdFx0aWYgbm90IGhhc2hEYXRhW1wiZmxvd1wiXVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG51bGwnKVxyXG5cclxuXHRcdGZsb3dfaWQgICAgICA9IGhhc2hEYXRhW1wiZmxvd1wiXVxyXG5cdFx0YXBwbGljYW50X2lkID0gaGFzaERhdGFbXCJhcHBsaWNhbnRcIl1cclxuXHRcdGFwcGxpY2FudF91c2VybmFtZSA9IGhhc2hEYXRhW1wiYXBwbGljYW50X3VzZXJuYW1lXCJdXHJcblxyXG5cdFx0aW5zdGFuY2VfZnJvbV9jbGllbnQgPSBuZXcgT2JqZWN0XHJcblxyXG5cdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGZsb3dfaWQgfSwgeyBmaWVsZHM6IHsgc3BhY2U6IDEsICdjdXJyZW50Ll9pZCc6IDEgfSB9KVxyXG5cdFx0aWYgbm90IGZsb3dcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmxvdyBpcyBub3QgZXhpc3RzJylcclxuXHJcblx0XHRpZiBzcGFjZV9pZCBpc250IGZsb3cuc3BhY2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmxvdyBpcyBub3QgYmVsb25nIHRvIHRoaXMgc3BhY2UnKVxyXG5cclxuXHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGN1cnJlbnRfdXNlcl9pbmZvLl9pZCB9KS5jb3VudCgpIGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXV0aF90b2tlbiBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBzcGFjZScpXHJcblxyXG5cdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJzcGFjZVwiXSA9IHNwYWNlX2lkXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImZsb3dcIl0gPSBmbG93X2lkXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImZsb3dfdmVyc2lvblwiXSA9IGZsb3cuY3VycmVudC5faWRcclxuXHJcblx0XHRhcHBsaWNhbnQgPSBudWxsXHJcblx0XHRpZiBhcHBsaWNhbnRfaWQgb3IgYXBwbGljYW50X3VzZXJuYW1lXHJcblxyXG5cdFx0XHRpZiBhcHBsaWNhbnRfaWRcclxuXHRcdFx0XHRhcHBsaWNhbnQgPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiBhcHBsaWNhbnRfaWQgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0aWYgbm90IGFwcGxpY2FudFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIHdyb25nJylcclxuXHJcblx0XHRcdGVsc2UgaWYgYXBwbGljYW50X3VzZXJuYW1lXHJcblx0XHRcdFx0YXBwbGljYW50ID0gZGIudXNlcnMuZmluZE9uZSh7IHVzZXJuYW1lOiBhcHBsaWNhbnRfdXNlcm5hbWUgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0aWYgbm90IGFwcGxpY2FudFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50X3VzZXJuYW1lIGlzIHdyb25nJylcclxuXHJcblx0XHRcdHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBhcHBsaWNhbnQuX2lkIH0pXHJcblx0XHRcdGlmIG5vdCBzcGFjZV91c2VyXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIHNwYWNlJylcclxuXHJcblx0XHRcdGlmIHNwYWNlX3VzZXIudXNlcl9hY2NlcHRlZCBpc250IHRydWVcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgZGlzYWJsZWQgaW4gdGhpcyBzcGFjZScpXHJcblxyXG5cdFx0XHRzcGFjZV91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKHNwYWNlX3VzZXIpXHJcblx0XHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50XCJdID0gYXBwbGljYW50Ll9pZFxyXG5cdFx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9uYW1lXCJdID0gYXBwbGljYW50Lm5hbWVcclxuXHRcdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uXCJdID0gIHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl1cclxuXHRcdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXVxyXG5cdFx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cclxuXHRcdGFwcGxpY2FudEluZm8gPSBhcHBsaWNhbnQgfHwgY3VycmVudF91c2VyX2luZm9cclxuXHJcblx0XHR0cmFjZXMgPSBbXVxyXG5cdFx0dHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRhcHByb3ZlcyA9IFtdXHJcblx0XHRhcHByb3ZlID0gbmV3IE9iamVjdFxyXG5cdFx0YXBwcm92ZVtcInZhbHVlc1wiXSA9IGhhc2hEYXRhW1widmFsdWVzXCJdXHJcblx0XHRhcHByb3Zlcy5wdXNoKGFwcHJvdmUpXHJcblx0XHR0cmFjZVtcImFwcHJvdmVzXCJdID0gYXBwcm92ZXNcclxuXHRcdHRyYWNlcy5wdXNoKHRyYWNlKVxyXG5cdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJ0cmFjZXNcIl0gPSB0cmFjZXNcclxuXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImluYm94X3VzZXJzXCJdID0gW2FwcGxpY2FudEluZm8uX2lkXVxyXG5cclxuXHRcdG5ld19pbnNfaWQgPSB1dWZsb3dNYW5hZ2VyLmNyZWF0ZV9pbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudCwgYXBwbGljYW50SW5mbylcclxuXHJcblx0XHRuZXdfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUobmV3X2luc19pZClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IG5ld19pbnMgfVxyXG5cdFx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5tZXNzYWdlIH1dIH1cclxuXHRcdH1cclxuIiwiXG4vKlxuQGFwaSB7cG9zdH0gL2FwaS93b3JrZmxvdy9vcGVuL2RyYWZ0cyDmlrDlu7rnlLPor7fljZVcblxuQGFwaU5hbWUgY3JlYXRlSW5zdGFuY2VcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxue1xuXHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG59XG5cbkBhcGlQYXJhbUV4YW1wbGUge2pzb259IFJlcXVlc3QgUGF5bG9hZDpcbntcbiAgICBcImZsb3dcIjog5rWB56iLSWQsXG4gICAgXCJhcHBsaWNhbnRcIjog55Sz6K+35Lq6SWQsXG4gICAgXCJ2YWx1ZXNcIjoge1xuICAgICAgICBcImZpZWxkczFcIiA6IOWtl+auteWAvCxcbiAgICAgICAgXCJmaWVsZHMyXCIgOiDlrZfmrrXlgLwsXG4gICAgICAgIC4uLlxuICAgIH1cbn1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxue1xuICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XG59XG5cbkBhcGlFcnJvckV4YW1wbGUge2pzb259IGVycm9yLVJlc3BvbnNlOlxue1xuICAgIFwic3RhdHVzXCI6IFwiZXJyb3JcIixcbiAgICBcImRhdGFcIjogey4uLn1cbn1cbiAqL1xuSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2RyYWZ0cycsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhcHBsaWNhbnQsIGFwcGxpY2FudEluZm8sIGFwcGxpY2FudF9pZCwgYXBwbGljYW50X3VzZXJuYW1lLCBhcHByb3ZlLCBhcHByb3ZlcywgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3csIGZsb3dfaWQsIGhhc2hEYXRhLCBpbnN0YW5jZV9mcm9tX2NsaWVudCwgbmV3X2lucywgbmV3X2luc19pZCwgc3BhY2VfaWQsIHNwYWNlX3VzZXIsIHNwYWNlX3VzZXJfb3JnX2luZm8sIHRyYWNlLCB0cmFjZXMsIHVzZXJfaWQ7XG4gIHRyeSB7XG4gICAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHVzZXJfaWQgPSByZXEudXNlcklkO1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICBfaWQ6IHVzZXJfaWRcbiAgICB9KTtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgeF9zcGFjZV9pZCcpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyX2luZm8uX2lkKTtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIGlmICghaGFzaERhdGFbXCJmbG93XCJdKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG51bGwnKTtcbiAgICB9XG4gICAgZmxvd19pZCA9IGhhc2hEYXRhW1wiZmxvd1wiXTtcbiAgICBhcHBsaWNhbnRfaWQgPSBoYXNoRGF0YVtcImFwcGxpY2FudFwiXTtcbiAgICBhcHBsaWNhbnRfdXNlcm5hbWUgPSBoYXNoRGF0YVtcImFwcGxpY2FudF91c2VybmFtZVwiXTtcbiAgICBpbnN0YW5jZV9mcm9tX2NsaWVudCA9IG5ldyBPYmplY3Q7XG4gICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmbG93X2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAnY3VycmVudC5faWQnOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFmbG93KSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG5vdCBleGlzdHMnKTtcbiAgICB9XG4gICAgaWYgKHNwYWNlX2lkICE9PSBmbG93LnNwYWNlKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpO1xuICAgIH1cbiAgICBpZiAoZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICB1c2VyOiBjdXJyZW50X3VzZXJfaW5mby5faWRcbiAgICB9KS5jb3VudCgpID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhdXRoX3Rva2VuIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIHNwYWNlJyk7XG4gICAgfVxuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wic3BhY2VcIl0gPSBzcGFjZV9pZDtcbiAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImZsb3dcIl0gPSBmbG93X2lkO1xuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiZmxvd192ZXJzaW9uXCJdID0gZmxvdy5jdXJyZW50Ll9pZDtcbiAgICBhcHBsaWNhbnQgPSBudWxsO1xuICAgIGlmIChhcHBsaWNhbnRfaWQgfHwgYXBwbGljYW50X3VzZXJuYW1lKSB7XG4gICAgICBpZiAoYXBwbGljYW50X2lkKSB7XG4gICAgICAgIGFwcGxpY2FudCA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIF9pZDogYXBwbGljYW50X2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWFwcGxpY2FudCkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2FwcGxpY2FudCBpcyB3cm9uZycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpY2FudF91c2VybmFtZSkge1xuICAgICAgICBhcHBsaWNhbnQgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICB1c2VybmFtZTogYXBwbGljYW50X3VzZXJuYW1lXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWFwcGxpY2FudCkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2FwcGxpY2FudF91c2VybmFtZSBpcyB3cm9uZycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwbGljYW50Ll9pZFxuICAgICAgfSk7XG4gICAgICBpZiAoIXNwYWNlX3VzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIHNwYWNlJyk7XG4gICAgICB9XG4gICAgICBpZiAoc3BhY2VfdXNlci51c2VyX2FjY2VwdGVkICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2FwcGxpY2FudCBpcyBkaXNhYmxlZCBpbiB0aGlzIHNwYWNlJyk7XG4gICAgICB9XG4gICAgICBzcGFjZV91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKHNwYWNlX3VzZXIpO1xuICAgICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRcIl0gPSBhcHBsaWNhbnQuX2lkO1xuICAgICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfbmFtZVwiXSA9IGFwcGxpY2FudC5uYW1lO1xuICAgICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICB9XG4gICAgYXBwbGljYW50SW5mbyA9IGFwcGxpY2FudCB8fCBjdXJyZW50X3VzZXJfaW5mbztcbiAgICB0cmFjZXMgPSBbXTtcbiAgICB0cmFjZSA9IG5ldyBPYmplY3Q7XG4gICAgYXBwcm92ZXMgPSBbXTtcbiAgICBhcHByb3ZlID0gbmV3IE9iamVjdDtcbiAgICBhcHByb3ZlW1widmFsdWVzXCJdID0gaGFzaERhdGFbXCJ2YWx1ZXNcIl07XG4gICAgYXBwcm92ZXMucHVzaChhcHByb3ZlKTtcbiAgICB0cmFjZVtcImFwcHJvdmVzXCJdID0gYXBwcm92ZXM7XG4gICAgdHJhY2VzLnB1c2godHJhY2UpO1xuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1widHJhY2VzXCJdID0gdHJhY2VzO1xuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiaW5ib3hfdXNlcnNcIl0gPSBbYXBwbGljYW50SW5mby5faWRdO1xuICAgIG5ld19pbnNfaWQgPSB1dWZsb3dNYW5hZ2VyLmNyZWF0ZV9pbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudCwgYXBwbGljYW50SW5mbyk7XG4gICAgbmV3X2lucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKG5ld19pbnNfaWQpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IG5ld19pbnNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIiMjI1xyXG5AYXBpIHtnZXR9IC9hcGkvd29ya2Zsb3cvb3Blbi9nZXQvOmluc19pZCDmn6XnnIvnlLPor7fljZXor6bmg4VcclxuXHJcbkBhcGlOYW1lIGdldEluc3RhbmNlXHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueahOeuoeeQhuWRmFxyXG5cclxuQGFwaVBhcmFtIHtTdHJpbmd9IGluc19pZCDnlLPor7fljZVJZFxyXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXHJcblxyXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXHJcblxyXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XHJcbntcclxuXHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXHJcbn1cclxuXHJcbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcclxue1xyXG4gICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXHJcbiAgICBcImRhdGFcIjoge2luc3RhbmNlfVxyXG59XHJcbiMjI1xyXG5Kc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9nZXQvOmluc19pZCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkXHJcblxyXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJylcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZClcclxuXHRcdGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgaW5zdGFuY2UnKVxyXG5cclxuXHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogaW5zdGFuY2Uuc3BhY2UsIHVzZXI6IGN1cnJlbnRfdXNlciB9KS5jb3VudCgpIGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXV0aF90b2tlbiBpcyB3cm9uZycpXHJcblxyXG5cdFx0IyDmnYPpmZDvvJrku4Xku6XkuIvkurrlkZjlj6/ku6Xmn6XnnIvnlLPor7fljZXor6bmg4XvvJrmj5DkuqTogIXjgIHnlLPor7fogIXjgIHnu4/miYvogIXjgIHmnKzmtYHnqIvnmoTnrqHnkIblkZjjgIHmnKzmtYHnqIvnmoTop4Llr5/lkZjjgIHmnKzlt6XkvZzljLrnmoTnrqHnkIblkZjjgIHmnKzlt6XkvZzljLrnmoTmiYDmnInogIXjgIJcclxuXHRcdHBlcm1fdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5zdWJtaXR0ZXIpXHJcblx0XHRwZXJtX3VzZXJzLnB1c2goaW5zdGFuY2UuYXBwbGljYW50KVxyXG5cdFx0aWYgaW5zdGFuY2Uub3V0Ym94X3VzZXJzXHJcblx0XHRcdHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5vdXRib3hfdXNlcnMpXHJcblx0XHRpZiBpbnN0YW5jZS5pbmJveF91c2Vyc1xyXG5cdFx0XHRwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoaW5zdGFuY2UuaW5ib3hfdXNlcnMpXHJcblx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHsgX2lkOiBpbnN0YW5jZS5zcGFjZSB9LCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxyXG5cdFx0cGVybV91c2VycyA9IHBlcm1fdXNlcnMuY29uY2F0KHNwYWNlLmFkbWlucylcclxuXHJcblx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aWYgKG5vdCBwZXJtX3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpIGFuZCAobm90IHBlcm1pc3Npb25zLmluY2x1ZGVzKFwibW9uaXRvclwiKSkgYW5kIChub3QgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSlcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbm8gcGVybWlzc2lvbicpXHJcblxyXG5cdFx0aW5zdGFuY2UuYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoeydtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlLl9pZCwnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7JG5lOiB0cnVlfX0sIHtmaWVsZHM6IHtjb3BpZXM6IDB9fSkuZmV0Y2goKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogaW5zdGFuY2UgfVxyXG5cdFx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5tZXNzYWdlIH1dIH1cclxuXHRcdH1cclxuXHJcbiIsIlxuLypcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkIOafpeeci+eUs+ivt+WNleivpuaDhVxuXG5AYXBpTmFtZSBnZXRJbnN0YW5jZVxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy655qE566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBpbnNfaWQg55Sz6K+35Y2VSWRcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG57XG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcbn1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxue1xuICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XG59XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgZSwgaW5zX2lkLCBpbnN0YW5jZSwgcGVybV91c2VycywgcGVybWlzc2lvbnMsIHNwYWNlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIGluc3RhbmNlJyk7XG4gICAgfVxuICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBpbnN0YW5jZS5zcGFjZSxcbiAgICAgIHVzZXI6IGN1cnJlbnRfdXNlclxuICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2F1dGhfdG9rZW4gaXMgd3JvbmcnKTtcbiAgICB9XG4gICAgcGVybV91c2VycyA9IG5ldyBBcnJheTtcbiAgICBwZXJtX3VzZXJzLnB1c2goaW5zdGFuY2Uuc3VibWl0dGVyKTtcbiAgICBwZXJtX3VzZXJzLnB1c2goaW5zdGFuY2UuYXBwbGljYW50KTtcbiAgICBpZiAoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKSB7XG4gICAgICBwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLmluYm94X3VzZXJzKSB7XG4gICAgICBwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoaW5zdGFuY2UuaW5ib3hfdXNlcnMpO1xuICAgIH1cbiAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2Uuc3BhY2VcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgYWRtaW5zOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgcGVybV91c2VycyA9IHBlcm1fdXNlcnMuY29uY2F0KHNwYWNlLmFkbWlucyk7XG4gICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKTtcbiAgICBpZiAoKCFwZXJtX3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpICYmICghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJtb25pdG9yXCIpKSAmJiAoIXBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdubyBwZXJtaXNzaW9uJyk7XG4gICAgfVxuICAgIGluc3RhbmNlLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlLl9pZCxcbiAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcbiAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICRuZTogdHJ1ZVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBjb3BpZXM6IDBcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IGluc3RhbmNlXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcclxuQGFwaSB7cHV0fSAvYXBpL3dvcmtmbG93L29wZW4vc3VibWl0LzppbnNfaWQg5o+Q5Lqk55Sz6K+35Y2VXHJcblxyXG5AYXBpRGVzY3JpcHRpb24g5pqC5LiN5pSv5oyB5byA5aeL6IqC54K55LiL5LiA6IqC54K55Li65p2h5Lu255qE5oOF5Ya1XHJcblxyXG5AYXBpTmFtZSBzdWJtaXRJbnN0YW5jZVxyXG5cclxuQGFwaUdyb3VwIFdvcmtmbG93XHJcblxyXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcclxuXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxuICAgIHtcclxuXHRcdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcclxuXHR9XHJcblxyXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XHJcbiAgICB7XHJcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuXHRcdFwiZGF0YVwiOiB7aW5zdGFuY2V9XHJcblx0fVxyXG4jIyNcclxuXHJcbkpzb25Sb3V0ZXMuYWRkICdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3N1Ym1pdC86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0aW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWRcclxuXHJcblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiBub3QgY3VycmVudF91c2VyX2luZm9cclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpXHJcblxyXG5cdFx0IyDmoKHpqoznlLPor7fljZXnirbmgIHkuLrojYnnqL9cclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlKVxyXG5cclxuXHRcdGlmIHNwYWNlX2lkIGlzbnQgaW5zdGFuY2VbXCJzcGFjZVwiXVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdpbnN0YW5jZSBpcyBub3QgYmVsb25nIHRvIHRoaXMgc3BhY2UnKVxyXG5cclxuXHRcdCMg5qCh6aqM55Sz6K+35Y2V5b+F5aGr5a2X5q615piv5ZCm5pyJ5YC8XHJcblx0XHR2YWx1ZXMgPSBpbnN0YW5jZVtcInRyYWNlc1wiXVswXVtcImFwcHJvdmVzXCJdWzBdLnZhbHVlc1xyXG5cclxuXHRcdGZvcm0gPSB1dWZsb3dNYW5hZ2VyLmdldEZvcm0oaW5zdGFuY2UuZm9ybSlcclxuXHJcblx0XHRyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMgPSB1dWZsb3dNYW5hZ2VyLmNoZWNrVmFsdWVGaWVsZHNSZXF1aXJlKHZhbHVlcywgZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKVxyXG5cclxuXHRcdGlmIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPiAwXHJcblx0XHRcdGlmIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPiAxXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmllbGRzIDwnICsgcmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmpvaW4oXCIsXCIpICsgJz4gYXJlIHJlcXVpcmVkJylcclxuXHRcdFx0ZWxzZSBpZiByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID0gMVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2ZpZWxkIDwnICsgcmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmpvaW4oXCIsXCIpICsgJz4gaXMgcmVxdWlyZWQnKVxyXG5cclxuXHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdylcclxuXHJcblx0XHRzdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBpbnN0YW5jZVtcInRyYWNlc1wiXVswXS5zdGVwKVxyXG5cclxuXHRcdCMg6K6h566X5LiL5LiA5q2l6aqk6YCJ6aG5XHJcblx0XHRuZXh0U3RlcHMgPSB1dWZsb3dNYW5hZ2VyLmdldE5leHRTdGVwcyhpbnN0YW5jZSwgZmxvdywgc3RlcCwgXCJzdWJtaXR0ZWRcIilcclxuXHJcblx0XHRpZiBuZXh0U3RlcHMubGVuZ3RoIDwgMVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgbmV4dCBzdGVwcycpXHJcblxyXG5cdFx0aWYgbmV4dFN0ZXBzLmxlbmd0aCA+IDFcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmV4dCBzdGVwIG5vdCB1bmlxJylcclxuXHJcblx0XHRuZXh0X3N0ZXBfaWQgPSBuZXh0U3RlcHNbMF1cclxuXHJcblx0XHQjIOiuoeeul+S4i+S4gOatpeWkhOeQhuS6uumAiemhuVxyXG5cdFx0bmV4dF91c2VyX2lkcyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVycyhpbnNfaWQsIG5leHRfc3RlcF9pZCkgfHwgW11cclxuXHJcblx0XHRpZiBuZXh0X3VzZXJfaWRzLmxlbmd0aCA+IDFcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmV4dCBzdGVwIGhhbmRsZXIgbm90IHVuaXEnKVxyXG5cclxuXHRcdGluc3RhbmNlW1widHJhY2VzXCJdWzBdW1wiYXBwcm92ZXNcIl1bMF1bXCJuZXh0X3N0ZXBzXCJdID0gW3snc3RlcCc6IG5leHRfc3RlcF9pZCwgJ3VzZXJzJzogbmV4dF91c2VyX2lkc31dXHJcblxyXG5cdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxyXG5cclxuXHRcdHN1Ym1pdHRlciA9IGRiLnVzZXJzLmZpbmRPbmUoaW5zdGFuY2Uuc3VibWl0dGVyKVxyXG5cclxuXHRcdGlmIG5vdCBzdWJtaXR0ZXJcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHN1Ym1pdHRlcicpXHJcblxyXG5cdFx0ciA9IHV1Zmxvd01hbmFnZXIuc3VibWl0X2luc3RhbmNlKGluc3RhbmNlLCBzdWJtaXR0ZXIpXHJcblxyXG5cdFx0aWYgci5hbGVydHNcclxuXHRcdFx0cmVzdWx0ID0gclxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXN1bHQgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQpXHJcblx0XHRcdGlmIHJlc3VsdFxyXG5cdFx0XHRcdHJlc3VsdC5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogaW5zX2lkLCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHskbmU6IHRydWV9fSwge2ZpZWxkczoge2NvcGllczogMH19KS5mZXRjaCgpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzdWx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcbiIsIlxuLypcbkBhcGkge3B1dH0gL2FwaS93b3JrZmxvdy9vcGVuL3N1Ym1pdC86aW5zX2lkIOaPkOS6pOeUs+ivt+WNlVxuXG5AYXBpRGVzY3JpcHRpb24g5pqC5LiN5pSv5oyB5byA5aeL6IqC54K55LiL5LiA6IqC54K55Li65p2h5Lu255qE5oOF5Ya1XG5cbkBhcGlOYW1lIHN1Ym1pdEluc3RhbmNlXG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcbiAgICB7XG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxuXHR9XG5cbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcbiAgICB7XG5cdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG5cdFx0XCJkYXRhXCI6IHtpbnN0YW5jZX1cblx0fVxuICovXG5Kc29uUm91dGVzLmFkZCgncHV0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9zdWJtaXQvOmluc19pZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93LCBmb3JtLCBpbnNfaWQsIGluc3RhbmNlLCBuZXh0U3RlcHMsIG5leHRfc3RlcF9pZCwgbmV4dF91c2VyX2lkcywgciwgcmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLCByZXN1bHQsIHNwYWNlX2lkLCBzdGVwLCBzdWJtaXR0ZXIsIHZhbHVlcztcbiAgdHJ5IHtcbiAgICBpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VEcmFmdChpbnN0YW5jZSk7XG4gICAgaWYgKHNwYWNlX2lkICE9PSBpbnN0YW5jZVtcInNwYWNlXCJdKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdpbnN0YW5jZSBpcyBub3QgYmVsb25nIHRvIHRoaXMgc3BhY2UnKTtcbiAgICB9XG4gICAgdmFsdWVzID0gaW5zdGFuY2VbXCJ0cmFjZXNcIl1bMF1bXCJhcHByb3Zlc1wiXVswXS52YWx1ZXM7XG4gICAgZm9ybSA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybShpbnN0YW5jZS5mb3JtKTtcbiAgICByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMgPSB1dWZsb3dNYW5hZ2VyLmNoZWNrVmFsdWVGaWVsZHNSZXF1aXJlKHZhbHVlcywgZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcbiAgICBpZiAocmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZHMgPCcgKyByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMuam9pbihcIixcIikgKyAnPiBhcmUgcmVxdWlyZWQnKTtcbiAgICAgIH0gZWxzZSBpZiAocmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmxlbmd0aCA9IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmllbGQgPCcgKyByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMuam9pbihcIixcIikgKyAnPiBpcyByZXF1aXJlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICAgIHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGluc3RhbmNlW1widHJhY2VzXCJdWzBdLnN0ZXApO1xuICAgIG5leHRTdGVwcyA9IHV1Zmxvd01hbmFnZXIuZ2V0TmV4dFN0ZXBzKGluc3RhbmNlLCBmbG93LCBzdGVwLCBcInN1Ym1pdHRlZFwiKTtcbiAgICBpZiAobmV4dFN0ZXBzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBuZXh0IHN0ZXBzJyk7XG4gICAgfVxuICAgIGlmIChuZXh0U3RlcHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmV4dCBzdGVwIG5vdCB1bmlxJyk7XG4gICAgfVxuICAgIG5leHRfc3RlcF9pZCA9IG5leHRTdGVwc1swXTtcbiAgICBuZXh0X3VzZXJfaWRzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzKGluc19pZCwgbmV4dF9zdGVwX2lkKSB8fCBbXTtcbiAgICBpZiAobmV4dF91c2VyX2lkcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgaGFuZGxlciBub3QgdW5pcScpO1xuICAgIH1cbiAgICBpbnN0YW5jZVtcInRyYWNlc1wiXVswXVtcImFwcHJvdmVzXCJdWzBdW1wibmV4dF9zdGVwc1wiXSA9IFtcbiAgICAgIHtcbiAgICAgICAgJ3N0ZXAnOiBuZXh0X3N0ZXBfaWQsXG4gICAgICAgICd1c2Vycyc6IG5leHRfdXNlcl9pZHNcbiAgICAgIH1cbiAgICBdO1xuICAgIHJlc3VsdCA9IG5ldyBPYmplY3Q7XG4gICAgc3VibWl0dGVyID0gZGIudXNlcnMuZmluZE9uZShpbnN0YW5jZS5zdWJtaXR0ZXIpO1xuICAgIGlmICghc3VibWl0dGVyKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgc3VibWl0dGVyJyk7XG4gICAgfVxuICAgIHIgPSB1dWZsb3dNYW5hZ2VyLnN1Ym1pdF9pbnN0YW5jZShpbnN0YW5jZSwgc3VibWl0dGVyKTtcbiAgICBpZiAoci5hbGVydHMpIHtcbiAgICAgIHJlc3VsdCA9IHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zX2lkLFxuICAgICAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcbiAgICAgICAgICBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjoge1xuICAgICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBjb3BpZXM6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbkBhcGkge3B1dH0gL2FwaS93b3JrZmxvdy9vcGVuL3NhdmUvOmluc19pZCDmmoLlrZjnlLPor7fljZVcclxuXHJcbkBhcGlOYW1lIHNhdmVJbnN0YW5jZXNcclxuXHJcbkBhcGlHcm91cCBXb3JrZmxvd1xyXG5cclxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy6566h55CG5ZGYXHJcblxyXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXHJcblxyXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXHJcblxyXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XHJcbiAgICB7XHJcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXHJcblx0fVxyXG5cclxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxyXG4gICAge1xyXG5cdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXHJcblx0XHRcImRhdGFcIjoge2luc3RhbmNlfVxyXG5cdH1cclxuIyMjXHJcbkpzb25Sb3V0ZXMuYWRkICdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3NhdmUvOmluc19pZCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkXHJcblxyXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJylcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHR2YWx1ZXMgPSByZXEuYm9keVxyXG5cclxuXHRcdGlmIG5vdCB2YWx1ZXNcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCB2YWx1ZXMnKVxyXG5cclxuXHRcdGN1cnJlbnRfdHJhY2UgPSBudWxsXHJcblx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XHJcblx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKVxyXG5cdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxyXG5cclxuXHRcdF8uZWFjaCBpbnN0YW5jZS50cmFjZXMsICh0KS0+XHJcblx0XHRcdGlmIHQuaXNfZmluaXNoZWQgaXNudCB0cnVlXHJcblx0XHRcdFx0Y3VycmVudF90cmFjZSA9IHRcclxuXHJcblx0XHRjdXJyZW50X3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGN1cnJlbnRfdHJhY2Uuc3RlcClcclxuXHJcblx0XHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzIFwiY291bnRlclNpZ25cIlxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfkvJrnrb7mraXpqqTkuI3og73kv67mlLnooajljZXlgLwnKVxyXG5cclxuXHRcdF8uZWFjaCBjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRpZiBhLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZSBhbmQgYS50eXBlIGlzbnQgXCJjY1wiXHJcblx0XHRcdFx0YS52YWx1ZXMgPSB2YWx1ZXNcclxuXHJcblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZVxyXG5cdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXNcIl0gPSBjdXJyZW50X3RyYWNlLmFwcHJvdmVzXHJcblxyXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSB7XHJcblx0XHRcdF9pZDogaW5zX2lkXHJcblx0XHRcdCd0cmFjZXMuX2lkJzogY3VycmVudF90cmFjZS5faWRcclxuXHRcdH0sICRzZXQ6IHNldE9ialxyXG5cclxuXHRcdHJlc3VsdCA9IG5ldyBPYmplY3RcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXN1bHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiXG4vKlxuQGFwaSB7cHV0fSAvYXBpL3dvcmtmbG93L29wZW4vc2F2ZS86aW5zX2lkIOaaguWtmOeUs+ivt+WNlVxuXG5AYXBpTmFtZSBzYXZlSW5zdGFuY2VzXG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcbiAgICB7XG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxuXHR9XG5cbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcbiAgICB7XG5cdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG5cdFx0XCJkYXRhXCI6IHtpbnN0YW5jZX1cblx0fVxuICovXG5Kc29uUm91dGVzLmFkZCgncHV0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9zYXZlLzppbnNfaWQnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF9zdGVwLCBjdXJyZW50X3RyYWNlLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93LCBpbnNfaWQsIGluc3RhbmNlLCByZXN1bHQsIHNldE9iaiwgc3BhY2VfaWQsIHZhbHVlcztcbiAgdHJ5IHtcbiAgICBpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICB2YWx1ZXMgPSByZXEuYm9keTtcbiAgICBpZiAoIXZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCB2YWx1ZXMnKTtcbiAgICB9XG4gICAgY3VycmVudF90cmFjZSA9IG51bGw7XG4gICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKTtcbiAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICAgIF8uZWFjaChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGlmICh0LmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50X3RyYWNlID0gdDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjdXJyZW50X3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGN1cnJlbnRfdHJhY2Uuc3RlcCk7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgPT09IFwiY291bnRlclNpZ25cIikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5Lya562+5q2l6aqk5LiN6IO95L+u5pS56KGo5Y2V5YC8Jyk7XG4gICAgfVxuICAgIF8uZWFjaChjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICBpZiAoYS5pc19maW5pc2hlZCAhPT0gdHJ1ZSAmJiBhLnR5cGUgIT09IFwiY2NcIikge1xuICAgICAgICByZXR1cm4gYS52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGU7XG4gICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXNcIl0gPSBjdXJyZW50X3RyYWNlLmFwcHJvdmVzO1xuICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgX2lkOiBpbnNfaWQsXG4gICAgICAndHJhY2VzLl9pZCc6IGN1cnJlbnRfdHJhY2UuX2lkXG4gICAgfSwge1xuICAgICAgJHNldDogc2V0T2JqXG4gICAgfSk7XG4gICAgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiLFxuICAgICAgICBkYXRhOiByZXN1bHRcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIiMjI1xyXG5AYXBpIHtwb3N0fSAvYXBpL3dvcmtmbG93L29wZW4vZ2V0YnlzdGVwbmFtZSDmoLnmja7mraXpqqTlkI3np7Dojrflj5bnlLPor7fljZVcclxuXHJcbkBhcGlOYW1lIGdldEluc3RhbmNlQnlTdGVwTmFtZVxyXG5cclxuQGFwaUdyb3VwIFdvcmtmbG93XHJcblxyXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcclxuXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxue1xyXG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcclxufVxyXG5cclxuQGFwaVBhcmFtRXhhbXBsZSB7anNvbn0gUmVxdWVzdCBQYXlsb2FkOlxyXG57XHJcbiAgICBcImZsb3dcIjog5rWB56iLSWQsXHJcbiAgICBcInN0ZXBuYW1lXCI6IOatpemqpOWQjeensFxyXG59XHJcblxyXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XHJcbntcclxuXHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuXHRcImRhdGFcIjogW1xyXG5cdFx0e1xyXG5cdFx0XHRpbnN0YW5jZVxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0aW5zdGFuY2VcclxuXHRcdH1cclxuXHRdXHJcbn1cclxuIyMjXHJcbkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9nZXRieXN0ZXBuYW1lJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVybiA7XHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJylcclxuXHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cdFx0c3RlcG5hbWUgPSBoYXNoRGF0YVtcInN0ZXBuYW1lXCJdXHJcblx0XHRmbG93ID0gaGFzaERhdGFbXCJmbG93XCJdXHJcblxyXG5cdFx0aWYgbm90IHN0ZXBuYW1lXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgc3RlcG5hbWUnKVxyXG5cclxuXHRcdGlmIG5vdCBmbG93XHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgZmxvdycpXHJcblxyXG5cdFx0IyDljrvmjol7ZmllbGRzOiB7aW5ib3hfdWVyczogMCwgY2NfdXNlcnM6IDAsIG91dGJveF91c2VyczogMCwgdHJhY2VzOiAwLCBhdHRhY2htZW50czogMH1cclxuXHRcdGluc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHtzcGFjZTogc3BhY2VfaWQsIGZsb3c6IGZsb3csIHN0YXRlOidwZW5kaW5nJywgdHJhY2VzOnskZWxlbU1hdGNoOiB7aXNfZmluaXNoZWQ6IGZhbHNlLCBuYW1lOiBzdGVwbmFtZX19fSwge2ZpZWxkczoge2luYm94X3VlcnM6IDAsIGNjX3VzZXJzOiAwLCBvdXRib3hfdXNlcnM6IDAsIGF0dGFjaG1lbnRzOiAwLCB0cmFjZXM6IDB9fSkuZmV0Y2goKVxyXG5cclxuXHRcdGluc3RhbmNlcy5mb3JFYWNoIChpbnN0YW5jZSktPlxyXG5cdFx0XHRpbnN0YW5jZS5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHskbmU6IHRydWV9fSwge2ZpZWxkczoge2NvcGllczogMH19KS5mZXRjaCgpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogaW5zdGFuY2VzfVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcbiIsIlxuLypcbkBhcGkge3Bvc3R9IC9hcGkvd29ya2Zsb3cvb3Blbi9nZXRieXN0ZXBuYW1lIOagueaNruatpemqpOWQjeensOiOt+WPlueUs+ivt+WNlVxuXG5AYXBpTmFtZSBnZXRJbnN0YW5jZUJ5U3RlcE5hbWVcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxue1xuXHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG59XG5cbkBhcGlQYXJhbUV4YW1wbGUge2pzb259IFJlcXVlc3QgUGF5bG9hZDpcbntcbiAgICBcImZsb3dcIjog5rWB56iLSWQsXG4gICAgXCJzdGVwbmFtZVwiOiDmraXpqqTlkI3np7Bcbn1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxue1xuXHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XCJkYXRhXCI6IFtcblx0XHR7XG5cdFx0XHRpbnN0YW5jZVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0aW5zdGFuY2Vcblx0XHR9XG5cdF1cbn1cbiAqL1xuSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldGJ5c3RlcG5hbWUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgZmxvdywgaGFzaERhdGEsIGluc3RhbmNlcywgc3BhY2VfaWQsIHN0ZXBuYW1lO1xuICB0cnkge1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgc3RlcG5hbWUgPSBoYXNoRGF0YVtcInN0ZXBuYW1lXCJdO1xuICAgIGZsb3cgPSBoYXNoRGF0YVtcImZsb3dcIl07XG4gICAgaWYgKCFzdGVwbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBzdGVwbmFtZScpO1xuICAgIH1cbiAgICBpZiAoIWZsb3cpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgZmxvdycpO1xuICAgIH1cbiAgICBpbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICBmbG93OiBmbG93LFxuICAgICAgc3RhdGU6ICdwZW5kaW5nJyxcbiAgICAgIHRyYWNlczoge1xuICAgICAgICAkZWxlbU1hdGNoOiB7XG4gICAgICAgICAgaXNfZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgIG5hbWU6IHN0ZXBuYW1lXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgaW5ib3hfdWVyczogMCxcbiAgICAgICAgY2NfdXNlcnM6IDAsXG4gICAgICAgIG91dGJveF91c2VyczogMCxcbiAgICAgICAgYXR0YWNobWVudHM6IDAsXG4gICAgICAgIHRyYWNlczogMFxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlLl9pZCxcbiAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgICBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjoge1xuICAgICAgICAgICRuZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGNvcGllczogMFxuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IGluc3RhbmNlc1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbkNvbnRlbnQtVHlwZe+8mmFwcGxpY2F0aW9uL2pzb25cclxuZm9ybS1kYXRhIOagvOW8jzpcclxuZmQgPSBuZXcgRm9ybURhdGE7XHJcbmZkLmFwcGVuZChcImZpbGVcIiwgZmlsZSk7XHJcblxyXG5mZC5hcHBlbmQoXCJpc19wcml2YXRlXCIsIGZhbHNlKTtcclxuXHJcbmlmIChpc0FkZFZlcnNpb24pIHtcclxuXHRmZC5hcHBlbmQoXCJpc0FkZFZlcnNpb25cIiwgaXNBZGRWZXJzaW9uKTtcclxuXHRmZC5hcHBlbmQoXCJwYXJlbnRcIiwgYXR0YWNoX3BhcmVudF9pZCk7XHJcbn1cclxuXHJcbmlmIChpc01haW5BdHRhY2gpIHtcclxuXHRmZC5hcHBlbmQoXCJtYWluXCIsIHRydWUpO1xyXG59XHJcbiMjI1xyXG5cclxuQnVzYm95ID0gcmVxdWlyZSgnYnVzYm95Jyk7XHJcbkZpYmVyID0gcmVxdWlyZSgnZmliZXJzJyk7XHJcblxyXG5Kc29uUm91dGVzLnBhcnNlRmlsZXMgPSAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0ZmlsZXMgPSBbXTsgIyBTdG9yZSBmaWxlcyBpbiBhbiBhcnJheSBhbmQgdGhlbiBwYXNzIHRoZW0gdG8gcmVxdWVzdC5cclxuXHRpbWFnZSA9IHt9OyAjIGNyYXRlIGFuIGltYWdlIG9iamVjdFxyXG5cclxuXHRpZiAocmVxLm1ldGhvZCA9PSBcIlBPU1RcIilcclxuXHRcdGJ1c2JveSA9IG5ldyBCdXNib3koeyBoZWFkZXJzOiByZXEuaGVhZGVycyB9KTtcclxuXHRcdGJ1c2JveS5vbiBcImZpbGVcIiwgIChmaWVsZG5hbWUsIGZpbGUsIGZpbGVuYW1lLCBlbmNvZGluZywgbWltZXR5cGUpIC0+XHJcblx0XHRcdGltYWdlLm1pbWVUeXBlID0gbWltZXR5cGU7XHJcblx0XHRcdGltYWdlLmVuY29kaW5nID0gZW5jb2Rpbmc7XHJcblx0XHRcdGltYWdlLmZpbGVuYW1lID0gZmlsZW5hbWU7XHJcblxyXG5cdFx0XHQjIGJ1ZmZlciB0aGUgcmVhZCBjaHVua3NcclxuXHRcdFx0YnVmZmVycyA9IFtdO1xyXG5cclxuXHRcdFx0ZmlsZS5vbiAnZGF0YScsIChkYXRhKSAtPlxyXG5cdFx0XHRcdGJ1ZmZlcnMucHVzaChkYXRhKTtcclxuXHJcblx0XHRcdGZpbGUub24gJ2VuZCcsICgpIC0+XHJcblx0XHRcdFx0IyBjb25jYXQgdGhlIGNodW5rc1xyXG5cdFx0XHRcdGltYWdlLmRhdGEgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpO1xyXG5cdFx0XHRcdCMgcHVzaCB0aGUgaW1hZ2Ugb2JqZWN0IHRvIHRoZSBmaWxlIGFycmF5XHJcblx0XHRcdFx0ZmlsZXMucHVzaChpbWFnZSk7XHJcblxyXG5cclxuXHRcdGJ1c2JveS5vbiBcImZpZWxkXCIsIChmaWVsZG5hbWUsIHZhbHVlKSAtPlxyXG5cdFx0XHRyZXEuYm9keVtmaWVsZG5hbWVdID0gdmFsdWU7XHJcblxyXG5cdFx0YnVzYm95Lm9uIFwiZmluaXNoXCIsICAoKSAtPlxyXG5cdFx0XHQjIFBhc3MgdGhlIGZpbGUgYXJyYXkgdG9nZXRoZXIgd2l0aCB0aGUgcmVxdWVzdFxyXG5cdFx0XHRyZXEuZmlsZXMgPSBmaWxlcztcclxuXHJcblx0XHRcdEZpYmVyICgpLT5cclxuXHRcdFx0XHRuZXh0KCk7XHJcblx0XHRcdC5ydW4oKTtcclxuXHJcblx0XHQjIFBhc3MgcmVxdWVzdCB0byBidXNib3lcclxuXHRcdHJlcS5waXBlKGJ1c2JveSk7XHJcblxyXG5cdGVsc2VcclxuXHRcdG5leHQoKTtcclxuXHJcbkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmluc19pZCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkXHJcblxyXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJylcclxuXHJcblx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKVxyXG5cclxuXHRcdGlmIGluc3RhbmNlLnN0YXRlIGlzbnQgXCJkcmFmdFwiXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+eUs+ivt+WNleiNieeov+eKtuaAgeaXtuaJjeiDveS4iuS8oCcpXHJcblxyXG5cdFx0YXBwcm92ZV9pZCA9IGluc3RhbmNlLnRyYWNlc1swXS5hcHByb3Zlc1swXS5faWRcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRKc29uUm91dGVzLnBhcnNlRmlsZXMgcmVxLCByZXMsICgpLT5cclxuXHRcdFx0Y29sbGVjdGlvbiA9IGNmcy5pbnN0YW5jZXNcclxuXHJcblx0XHRcdGlmIHJlcS5maWxlcyBhbmQgcmVxLmZpbGVzWzBdXHJcblx0XHRcdFx0IyDpmYTku7bkuIrkvKDmjqXlj6PvvIzpmZDliLbpmYTku7blpKflsI/vvIzmnIDlpKfkuLoxMDBNXHJcblx0XHRcdFx0aWYgcmVxLmZpbGVzWzBdLmRhdGEubGVuZ3RoID4gKDEwMCoxMDI0KjEwMjQpXHJcblx0XHRcdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0XHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBcIui2hei/h+S4iuS8oOmZhOS7tuWkp+Wwj+mZkOWItigxMDBNKVwifV19XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdFx0bmV3RmlsZSA9IG5ldyBGUy5GaWxlKCk7XHJcblx0XHRcdFx0bmV3RmlsZS5hdHRhY2hEYXRhIHJlcS5maWxlc1swXS5kYXRhLCB7dHlwZTogcmVxLmZpbGVzWzBdLm1pbWVUeXBlfSwgKGVycikgLT5cclxuXHRcdFx0XHRcdGZpbGVuYW1lID0gcmVxLmZpbGVzWzBdLmZpbGVuYW1lXHJcblxyXG5cdFx0XHRcdFx0aWYgW1wiaW1hZ2UuanBnXCIsIFwiaW1hZ2UuZ2lmXCIsIFwiaW1hZ2UuanBlZ1wiLCBcImltYWdlLnBuZ1wiXS5pbmNsdWRlcyhmaWxlbmFtZS50b0xvd2VyQ2FzZSgpKVxyXG5cdFx0XHRcdFx0XHRmaWxlbmFtZSA9IFwiaW1hZ2UtXCIgKyBtb21lbnQobmV3IERhdGUoKSkuZm9ybWF0KCdZWVlZTU1EREhIbW1zcycpICsgXCIuXCIgKyBmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpXHJcblxyXG5cdFx0XHRcdFx0Ym9keSA9IHJlcS5ib2R5XHJcblxyXG5cdFx0XHRcdFx0Ym9keVsnb3duZXInXSA9IGluc3RhbmNlLnN1Ym1pdHRlclxyXG5cdFx0XHRcdFx0Ym9keVsnb3duZXJfbmFtZSddID0gaW5zdGFuY2Uuc3VibWl0dGVyX25hbWVcclxuXHRcdFx0XHRcdGJvZHlbJ3NwYWNlJ10gPSBzcGFjZV9pZFxyXG5cdFx0XHRcdFx0Ym9keVsnaW5zdGFuY2UnXSA9IGluc19pZFxyXG5cdFx0XHRcdFx0Ym9keVsnYXBwcm92ZSddID0gYXBwcm92ZV9pZFxyXG5cclxuXHRcdFx0XHRcdHRyeVxyXG5cdFx0XHRcdFx0XHRpZiBib2R5ICYmIChib2R5Wyd1cGxvYWRfZnJvbSddIGlzIFwiSUVcIiBvciBib2R5Wyd1cGxvYWRfZnJvbSddIGlzIFwibm9kZVwiKVxyXG5cdFx0XHRcdFx0XHRcdGZpbGVuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKVxyXG5cdFx0XHRcdFx0Y2F0Y2ggZVxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGZpbGVuYW1lKVxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yIGVcclxuXHRcdFx0XHRcdFx0ZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC8lL2csIFwiLVwiKVxyXG5cclxuXHRcdFx0XHRcdG5ld0ZpbGUubmFtZShmaWxlbmFtZSlcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYgYm9keSAmJiBib2R5Wydvd25lciddICYmIGJvZHlbJ293bmVyX25hbWUnXSAmJiBib2R5WydzcGFjZSddICYmIGJvZHlbJ2luc3RhbmNlJ10gICYmIGJvZHlbJ2FwcHJvdmUnXVxyXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSAnJ1xyXG5cdFx0XHRcdFx0XHRtZXRhZGF0YSA9IHtvd25lcjpib2R5Wydvd25lciddLCBvd25lcl9uYW1lOmJvZHlbJ293bmVyX25hbWUnXSwgc3BhY2U6Ym9keVsnc3BhY2UnXSwgaW5zdGFuY2U6Ym9keVsnaW5zdGFuY2UnXSwgYXBwcm92ZTogYm9keVsnYXBwcm92ZSddLCBjdXJyZW50OiB0cnVlfVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgYm9keVtcImlzX3ByaXZhdGVcIl0gJiYgYm9keVtcImlzX3ByaXZhdGVcIl0udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSBcInRydWVcIlxyXG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhLmlzX3ByaXZhdGUgPSB0cnVlXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5pc19wcml2YXRlID0gZmFsc2VcclxuXHJcblx0XHRcdFx0XHRcdGlmIGJvZHlbJ21haW4nXSA9PSBcInRydWVcIlxyXG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhLm1haW4gPSB0cnVlXHJcblxyXG5cdFx0XHRcdFx0XHRpZiBib2R5Wydpc0FkZFZlcnNpb24nXSAmJiBib2R5WydwYXJlbnQnXVxyXG5cdFx0XHRcdFx0XHRcdHBhcmVudCA9IGJvZHlbJ3BhcmVudCddXHJcblx0XHRcdFx0XHRcdCMgZWxzZVxyXG5cdFx0XHRcdFx0XHQjICAgY29sbGVjdGlvbi5maW5kKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBib2R5WydpbnN0YW5jZSddLCAnbWV0YWRhdGEuY3VycmVudCcgOiB0cnVlfSkuZm9yRWFjaCAoYykgLT5cclxuXHRcdFx0XHRcdFx0IyAgICAgaWYgYy5uYW1lKCkgPT0gZmlsZW5hbWVcclxuXHRcdFx0XHRcdFx0IyAgICAgICBwYXJlbnQgPSBjLm1ldGFkYXRhLnBhcmVudFxyXG5cclxuXHRcdFx0XHRcdFx0aWYgcGFyZW50XHJcblx0XHRcdFx0XHRcdFx0ciA9IGNvbGxlY3Rpb24udXBkYXRlKHsnbWV0YWRhdGEucGFyZW50JzogcGFyZW50LCAnbWV0YWRhdGEuY3VycmVudCcgOiB0cnVlfSwgeyR1bnNldCA6IHsnbWV0YWRhdGEuY3VycmVudCcgOiAnJ319KVxyXG5cdFx0XHRcdFx0XHRcdGlmIHJcclxuXHRcdFx0XHRcdFx0XHRcdG1ldGFkYXRhLnBhcmVudCA9IHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgYm9keVsnbG9ja2VkX2J5J10gJiYgYm9keVsnbG9ja2VkX2J5X25hbWUnXVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5sb2NrZWRfYnkgPSBib2R5Wydsb2NrZWRfYnknXVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5sb2NrZWRfYnlfbmFtZSA9IGJvZHlbJ2xvY2tlZF9ieV9uYW1lJ11cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRuZXdGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGFcclxuXHRcdFx0XHRcdFx0XHRcdGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydCBuZXdGaWxlXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0IyDliKDpmaTlkIzkuIDkuKrnlLPor7fljZXlkIzkuIDkuKrmraXpqqTlkIzkuIDkuKrkurrkuIrkvKDnmoTph43lpI3nmoTmlofku7ZcclxuXHRcdFx0XHRcdFx0XHRcdGlmIGJvZHlbXCJvdmVyd3JpdGVcIl0gJiYgYm9keVtcIm92ZXJ3cml0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09IFwidHJ1ZVwiXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbGxlY3Rpb24ucmVtb3ZlKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBib2R5WydpbnN0YW5jZSddLCAnbWV0YWRhdGEucGFyZW50JzogcGFyZW50LCAnbWV0YWRhdGEub3duZXInOiBib2R5Wydvd25lciddLCAnbWV0YWRhdGEuYXBwcm92ZSc6IGJvZHlbJ2FwcHJvdmUnXSwgJ21ldGFkYXRhLmN1cnJlbnQnOiB7JG5lOiB0cnVlfX0pXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRuZXdGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGFcclxuXHRcdFx0XHRcdFx0XHRmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQgbmV3RmlsZVxyXG5cdFx0XHRcdFx0XHRcdGZpbGVPYmoudXBkYXRlKHskc2V0OiB7J21ldGFkYXRhLnBhcmVudCcgOiBmaWxlT2JqLl9pZH19KVxyXG5cclxuXHRcdFx0XHRcdCMg5YW85a656ICB54mI5pysXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydCBuZXdGaWxlXHJcblxyXG5cdFx0XHRcdFx0c2l6ZSA9IGZpbGVPYmoub3JpZ2luYWwuc2l6ZVxyXG5cdFx0XHRcdFx0aWYgIXNpemVcclxuXHRcdFx0XHRcdFx0c2l6ZSA9IDEwMjRcclxuXHJcblx0XHRcdFx0XHRyZXN1bHQgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRyZXN1bHQgPVxyXG5cdFx0XHRcdFx0XHRhdHRhY2hfaWQ6IGZpbGVPYmouX2lkLFxyXG5cdFx0XHRcdFx0XHRzaXplOiBzaXplXHJcblxyXG5cdFx0XHRcdFx0cmVzLnNldEhlYWRlcihcIngtYW16LXZlcnNpb24taWRcIixmaWxlT2JqLl9pZCk7XHJcblxyXG5cdFx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzdWx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBcIm5lZWQgZmlsZVwifV19XHJcblx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcblxyXG5Kc29uUm91dGVzLmFkZCBcImRlbGV0ZVwiLCBcIi9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmluc19pZFwiLCAgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0aW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWRcclxuXHJcblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiBub3QgY3VycmVudF91c2VyX2luZm9cclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxyXG5cclxuXHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpXHJcblxyXG5cdFx0aWYgaW5zdGFuY2Uuc3RhdGUgaXNudCBcImRyYWZ0XCJcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn55Sz6K+35Y2V6I2J56i/54q25oCB5pe25omN6IO95Yig6Zmk6ZmE5Lu2JylcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5IHx8IHt9XHJcblx0XHRhdHRhY2hfaWQgPSBoYXNoRGF0YVtcImF0dGFjaF9pZFwiXVxyXG5cclxuXHRcdGlmIG5vdCBhdHRhY2hfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIGF0dGFjaF9pZCcpXHJcblxyXG5cdFx0Y29sbGVjdGlvbiA9IGNmcy5pbnN0YW5jZXNcclxuXHJcblx0XHRmaWxlID0gY29sbGVjdGlvbi5maW5kT25lKHsgX2lkOiBhdHRhY2hfaWQsICdtZXRhZGF0YS5pbnN0YW5jZSc6IGluc19pZH0pXHJcblx0XHRpZiBmaWxlXHJcblx0XHRcdGZpbGUucmVtb3ZlKClcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5q2k6ZmE5Lu25LiN5bGe5LqO5q2k55Sz6K+35Y2V77yM5oiW5bey6KKr5Yig6ZmkJylcclxuXHJcblx0XHRyZXN1bHQgPSBuZXcgT2JqZWN0XHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXN1bHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuXHJcbkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL2FwaS93b3JrZmxvdy9vcGVuL2Nmcy86YXR0YWNoX2lkXCIsICAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRhdHRhY2hfaWQgPSByZXEucGFyYW1zLmF0dGFjaF9pZFxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVybiA7XHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJylcclxuXHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0cmVzLnN0YXR1c0NvZGUgPSAzMDJcclxuXHRcdHJlcy5zZXRIZWFkZXIgXCJMb2NhdGlvblwiLCBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2luc3RhbmNlcy9cIikgKyBhdHRhY2hfaWQgKyBcIj9kb3dubG9hZD10cnVlXCJcclxuXHRcdHJlcy5lbmQoKVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcbiIsIlxuLypcbkNvbnRlbnQtVHlwZe+8mmFwcGxpY2F0aW9uL2pzb25cbmZvcm0tZGF0YSDmoLzlvI86XG5mZCA9IG5ldyBGb3JtRGF0YTtcbmZkLmFwcGVuZChcImZpbGVcIiwgZmlsZSk7XG5cbmZkLmFwcGVuZChcImlzX3ByaXZhdGVcIiwgZmFsc2UpO1xuXG5pZiAoaXNBZGRWZXJzaW9uKSB7XG5cdGZkLmFwcGVuZChcImlzQWRkVmVyc2lvblwiLCBpc0FkZFZlcnNpb24pO1xuXHRmZC5hcHBlbmQoXCJwYXJlbnRcIiwgYXR0YWNoX3BhcmVudF9pZCk7XG59XG5cbmlmIChpc01haW5BdHRhY2gpIHtcblx0ZmQuYXBwZW5kKFwibWFpblwiLCB0cnVlKTtcbn1cbiAqL1xudmFyIEJ1c2JveSwgRmliZXI7XG5cbkJ1c2JveSA9IHJlcXVpcmUoJ2J1c2JveScpO1xuXG5GaWJlciA9IHJlcXVpcmUoJ2ZpYmVycycpO1xuXG5Kc29uUm91dGVzLnBhcnNlRmlsZXMgPSBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYnVzYm95LCBmaWxlcywgaW1hZ2U7XG4gIGZpbGVzID0gW107XG4gIGltYWdlID0ge307XG4gIGlmIChyZXEubWV0aG9kID09PSBcIlBPU1RcIikge1xuICAgIGJ1c2JveSA9IG5ldyBCdXNib3koe1xuICAgICAgaGVhZGVyczogcmVxLmhlYWRlcnNcbiAgICB9KTtcbiAgICBidXNib3kub24oXCJmaWxlXCIsIGZ1bmN0aW9uKGZpZWxkbmFtZSwgZmlsZSwgZmlsZW5hbWUsIGVuY29kaW5nLCBtaW1ldHlwZSkge1xuICAgICAgdmFyIGJ1ZmZlcnM7XG4gICAgICBpbWFnZS5taW1lVHlwZSA9IG1pbWV0eXBlO1xuICAgICAgaW1hZ2UuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICAgIGltYWdlLmZpbGVuYW1lID0gZmlsZW5hbWU7XG4gICAgICBidWZmZXJzID0gW107XG4gICAgICBmaWxlLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICByZXR1cm4gYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmlsZS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGltYWdlLmRhdGEgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpO1xuICAgICAgICByZXR1cm4gZmlsZXMucHVzaChpbWFnZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBidXNib3kub24oXCJmaWVsZFwiLCBmdW5jdGlvbihmaWVsZG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gcmVxLmJvZHlbZmllbGRuYW1lXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIGJ1c2JveS5vbihcImZpbmlzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHJlcS5maWxlcyA9IGZpbGVzO1xuICAgICAgcmV0dXJuIEZpYmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfSkucnVuKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcS5waXBlKGJ1c2JveSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfVxufTtcblxuSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2Nmcy86aW5zX2lkJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGFwcHJvdmVfaWQsIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGluc19pZCwgaW5zdGFuY2UsIHNwYWNlX2lkO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfnlLPor7fljZXojYnnqL/nirbmgIHml7bmiY3og73kuIrkvKAnKTtcbiAgICB9XG4gICAgYXBwcm92ZV9pZCA9IGluc3RhbmNlLnRyYWNlc1swXS5hcHByb3Zlc1swXS5faWQ7XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMucGFyc2VGaWxlcyhyZXEsIHJlcywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29sbGVjdGlvbiwgbmV3RmlsZTtcbiAgICAgIGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzO1xuICAgICAgaWYgKHJlcS5maWxlcyAmJiByZXEuZmlsZXNbMF0pIHtcbiAgICAgICAgaWYgKHJlcS5maWxlc1swXS5kYXRhLmxlbmd0aCA+ICgxMDAgKiAxMDI0ICogMTAyNCkpIHtcbiAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGVycm9yczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCLotoXov4fkuIrkvKDpmYTku7blpKflsI/pmZDliLYoMTAwTSlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBuZXdGaWxlID0gbmV3IEZTLkZpbGUoKTtcbiAgICAgICAgcmV0dXJuIG5ld0ZpbGUuYXR0YWNoRGF0YShyZXEuZmlsZXNbMF0uZGF0YSwge1xuICAgICAgICAgIHR5cGU6IHJlcS5maWxlc1swXS5taW1lVHlwZVxuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICB2YXIgYm9keSwgZSwgZmlsZU9iaiwgZmlsZW5hbWUsIG1ldGFkYXRhLCBwYXJlbnQsIHIsIHJlc3VsdCwgc2l6ZTtcbiAgICAgICAgICBmaWxlbmFtZSA9IHJlcS5maWxlc1swXS5maWxlbmFtZTtcbiAgICAgICAgICBpZiAoW1wiaW1hZ2UuanBnXCIsIFwiaW1hZ2UuZ2lmXCIsIFwiaW1hZ2UuanBlZ1wiLCBcImltYWdlLnBuZ1wiXS5pbmNsdWRlcyhmaWxlbmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBcImltYWdlLVwiICsgbW9tZW50KG5ldyBEYXRlKCkpLmZvcm1hdCgnWVlZWU1NRERISG1tc3MnKSArIFwiLlwiICsgZmlsZW5hbWUuc3BsaXQoJy4nKS5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYm9keSA9IHJlcS5ib2R5O1xuICAgICAgICAgIGJvZHlbJ293bmVyJ10gPSBpbnN0YW5jZS5zdWJtaXR0ZXI7XG4gICAgICAgICAgYm9keVsnb3duZXJfbmFtZSddID0gaW5zdGFuY2Uuc3VibWl0dGVyX25hbWU7XG4gICAgICAgICAgYm9keVsnc3BhY2UnXSA9IHNwYWNlX2lkO1xuICAgICAgICAgIGJvZHlbJ2luc3RhbmNlJ10gPSBpbnNfaWQ7XG4gICAgICAgICAgYm9keVsnYXBwcm92ZSddID0gYXBwcm92ZV9pZDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGJvZHkgJiYgKGJvZHlbJ3VwbG9hZF9mcm9tJ10gPT09IFwiSUVcIiB8fCBib2R5Wyd1cGxvYWRfZnJvbSddID09PSBcIm5vZGVcIikpIHtcbiAgICAgICAgICAgICAgZmlsZW5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQoZmlsZW5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZpbGVuYW1lKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lLnJlcGxhY2UoLyUvZywgXCItXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdGaWxlLm5hbWUoZmlsZW5hbWUpO1xuICAgICAgICAgIGlmIChib2R5ICYmIGJvZHlbJ293bmVyJ10gJiYgYm9keVsnb3duZXJfbmFtZSddICYmIGJvZHlbJ3NwYWNlJ10gJiYgYm9keVsnaW5zdGFuY2UnXSAmJiBib2R5WydhcHByb3ZlJ10pIHtcbiAgICAgICAgICAgIHBhcmVudCA9ICcnO1xuICAgICAgICAgICAgbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgIG93bmVyOiBib2R5Wydvd25lciddLFxuICAgICAgICAgICAgICBvd25lcl9uYW1lOiBib2R5Wydvd25lcl9uYW1lJ10sXG4gICAgICAgICAgICAgIHNwYWNlOiBib2R5WydzcGFjZSddLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogYm9keVsnaW5zdGFuY2UnXSxcbiAgICAgICAgICAgICAgYXBwcm92ZTogYm9keVsnYXBwcm92ZSddLFxuICAgICAgICAgICAgICBjdXJyZW50OiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGJvZHlbXCJpc19wcml2YXRlXCJdICYmIGJvZHlbXCJpc19wcml2YXRlXCJdLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLmlzX3ByaXZhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWV0YWRhdGEuaXNfcHJpdmF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJvZHlbJ21haW4nXSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgbWV0YWRhdGEubWFpbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYm9keVsnaXNBZGRWZXJzaW9uJ10gJiYgYm9keVsncGFyZW50J10pIHtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYm9keVsncGFyZW50J107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgIHIgPSBjb2xsZWN0aW9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLnBhcmVudCc6IHBhcmVudCxcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICR1bnNldDoge1xuICAgICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiAnJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEucGFyZW50ID0gcGFyZW50O1xuICAgICAgICAgICAgICAgIGlmIChib2R5Wydsb2NrZWRfYnknXSAmJiBib2R5Wydsb2NrZWRfYnlfbmFtZSddKSB7XG4gICAgICAgICAgICAgICAgICBtZXRhZGF0YS5sb2NrZWRfYnkgPSBib2R5Wydsb2NrZWRfYnknXTtcbiAgICAgICAgICAgICAgICAgIG1ldGFkYXRhLmxvY2tlZF9ieV9uYW1lID0gYm9keVsnbG9ja2VkX2J5X25hbWUnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICAgICAgICAgIGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydChuZXdGaWxlKTtcbiAgICAgICAgICAgICAgICBpZiAoYm9keVtcIm92ZXJ3cml0ZVwiXSAmJiBib2R5W1wib3ZlcndyaXRlXCJdLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnJlbW92ZSh7XG4gICAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IGJvZHlbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5wYXJlbnQnOiBwYXJlbnQsXG4gICAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5vd25lcic6IGJvZHlbJ293bmVyJ10sXG4gICAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5hcHByb3ZlJzogYm9keVsnYXBwcm92ZSddLFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgICAgICAgIGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydChuZXdGaWxlKTtcbiAgICAgICAgICAgICAgZmlsZU9iai51cGRhdGUoe1xuICAgICAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5wYXJlbnQnOiBmaWxlT2JqLl9pZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydChuZXdGaWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2l6ZSA9IGZpbGVPYmoub3JpZ2luYWwuc2l6ZTtcbiAgICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAgIHNpemUgPSAxMDI0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIGF0dGFjaF9pZDogZmlsZU9iai5faWQsXG4gICAgICAgICAgICBzaXplOiBzaXplXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXMuc2V0SGVhZGVyKFwieC1hbXotdmVyc2lvbi1pZFwiLCBmaWxlT2JqLl9pZCk7XG4gICAgICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCJuZWVkIGZpbGVcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcblxuSnNvblJvdXRlcy5hZGQoXCJkZWxldGVcIiwgXCIvYXBpL3dvcmtmbG93L29wZW4vY2ZzLzppbnNfaWRcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGF0dGFjaF9pZCwgY29sbGVjdGlvbiwgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgZmlsZSwgaGFzaERhdGEsIGluc19pZCwgaW5zdGFuY2UsIHJlc3VsdCwgc3BhY2VfaWQ7XG4gIHRyeSB7XG4gICAgaW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWQ7XG4gICAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWQ7XG4gICAgc3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddO1xuICAgIGlmICghc3BhY2VfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKTtcbiAgICB9XG4gICAgY3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcik7XG4gICAgaWYgKCFjdXJyZW50X3VzZXJfaW5mbykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKTtcbiAgICB9XG4gICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZCk7XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlICE9PSBcImRyYWZ0XCIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+eUs+ivt+WNleiNieeov+eKtuaAgeaXtuaJjeiDveWIoOmZpOmZhOS7ticpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5IHx8IHt9O1xuICAgIGF0dGFjaF9pZCA9IGhhc2hEYXRhW1wiYXR0YWNoX2lkXCJdO1xuICAgIGlmICghYXR0YWNoX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgYXR0YWNoX2lkJyk7XG4gICAgfVxuICAgIGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzO1xuICAgIGZpbGUgPSBjb2xsZWN0aW9uLmZpbmRPbmUoe1xuICAgICAgX2lkOiBhdHRhY2hfaWQsXG4gICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWRcbiAgICB9KTtcbiAgICBpZiAoZmlsZSkge1xuICAgICAgZmlsZS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5q2k6ZmE5Lu25LiN5bGe5LqO5q2k55Sz6K+35Y2V77yM5oiW5bey6KKr5Yig6ZmkJyk7XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyBPYmplY3Q7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbkpzb25Sb3V0ZXMuYWRkKFwiZ2V0XCIsIFwiL2FwaS93b3JrZmxvdy9vcGVuL2Nmcy86YXR0YWNoX2lkXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhdHRhY2hfaWQsIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIHNwYWNlX2lkO1xuICB0cnkge1xuICAgIGF0dGFjaF9pZCA9IHJlcS5wYXJhbXMuYXR0YWNoX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIHJlcy5zdGF0dXNDb2RlID0gMzAyO1xuICAgIHJlcy5zZXRIZWFkZXIoXCJMb2NhdGlvblwiLCBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2luc3RhbmNlcy9cIikgKyBhdHRhY2hfaWQgKyBcIj9kb3dubG9hZD10cnVlXCIpO1xuICAgIHJldHVybiByZXMuZW5kKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2ZvcndhcmRfcmVmaWxsXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWbnuWhq+WtkOihqD09PT09PT09PT1cIlxyXG5cdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uc3ViVGFibGVcIixyZXE/LnF1ZXJ5Py5zdWJUYWJsZVxyXG5cdGNvbnNvbGUubG9nIFwiPT09PT09PT095YiG5Y+R5Zue5aGr55qE5YiXPT09PT09PT09PVwiXHJcblx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5jb2x1bW5cIixyZXE/LnF1ZXJ5Py5jb2x1bW5cclxuXHJcblx0Y29sdW1ucyA9IHJlcT8ucXVlcnk/LmNvbHVtbi5zcGxpdCgnOycpXHJcblx0Y29uc29sZS5sb2cgXCJjb2x1bW5zXCIsY29sdW1uc1xyXG5cclxuXHJcblx0IyDliIblj5HnmoTnlLPor7fljZVcclxuXHRmb3J3YXJkX2lucyA9IHJlcT8uYm9keT8uaW5zdGFuY2VcclxuXHJcblx0c3ViVGFibGUgPSByZXE/LnF1ZXJ5Py5zdWJUYWJsZVxyXG5cclxuXHRpZiBmb3J3YXJkX2lucz8uc3RhdGUgPT0gXCJjb21wbGV0ZWRcIiAmJiBmb3J3YXJkX2lucz8uZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcz8ubGVuZ3RoPjAgJiYgc3ViVGFibGUgJiYgY29sdW1uc1xyXG5cdFx0XHJcblx0XHQjIOWIhuWPkeWbnuadpeeahOWAvFxyXG5cdFx0Zm9yd2FyZF9pbnNfdmFsdWVzID0gZm9yd2FyZF9pbnM/LnZhbHVlc1xyXG5cclxuXHRcdCMgIyDljp/nlLPor7fljZXlrZfmrrVcclxuXHRcdG9yaWdpbmFsX2luc19pZCA9IF8ubGFzdCBmb3J3YXJkX2lucz8uZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlc1xyXG5cdFx0b3JpZ2luYWxfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob3JpZ2luYWxfaW5zX2lkKVxyXG5cdFx0b3JpZ2luYWxfaW5zX2Zvcm0gPSBkYi5mb3Jtcy5maW5kT25lKG9yaWdpbmFsX2lucz8uZm9ybSlcclxuXHJcblx0XHRvcmlnaW5hbF9pbnNfZmllbGRzID0gW11cclxuXHRcdG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyA9IFtdXHJcblxyXG5cdFx0Y29uc29sZS5sb2cgXCJvcmlnaW5hbF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXCIsb3JpZ2luYWxfaW5zX2Zvcm0/LmN1cnJlbnQ/Ll9pZFxyXG5cdFx0Y29uc29sZS5sb2cgXCJvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvblwiLG9yaWdpbmFsX2lucz8uZm9ybV92ZXJzaW9uXHJcblxyXG5cdFx0IyDmn6XnnIvljp/nlLPor7fljZXmmK/lkKbmnInlr7nlupTnmoTlrZDooahcclxuXHRcdGlmIG9yaWdpbmFsX2lucz8uZm9ybV92ZXJzaW9uID09IG9yaWdpbmFsX2luc19mb3JtPy5jdXJyZW50Py5faWRcclxuXHRcdFx0b3JpZ2luYWxfaW5zX2ZpZWxkcyA9IG9yaWdpbmFsX2luc19mb3JtLmN1cnJlbnQ/LmZpZWxkc1xyXG5cdFx0XHRvcmlnaW5hbF9pbnNfZmllbGRzLmZvckVhY2ggKG9yaWdpbmFsX2luc19maWVsZCktPlxyXG5cdFx0XHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfaW5zX2ZpZWxkXCIsb3JpZ2luYWxfaW5zX2ZpZWxkPy5jb2RlXHJcblx0XHRcdFx0aWYgb3JpZ2luYWxfaW5zX2ZpZWxkPy5jb2RlID09IHN1YlRhYmxlICYmIG9yaWdpbmFsX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnXHJcblx0XHRcdFx0XHRvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBvcmlnaW5hbF9pbnNfZmllbGQ/LmZpZWxkc1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpZiBvcmlnaW5hbF9pbnNfZm9ybT8uaGlzdG9yeXM/Lmxlbmd0aCA+IDBcclxuXHRcdFx0XHRvcmlnaW5hbF9pbnNfZm9ybS5oaXN0b3J5cy5mb3JFYWNoIChvaCktPlxyXG5cdFx0XHRcdFx0aWYgb3JpZ2luYWxfaW5zPy5mb3JtX3ZlcnNpb24gPT0gb2guX2lkXHJcblx0XHRcdFx0XHRcdG9yaWdpbmFsX2luc19maWVsZHMgPSBvaD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdG9yaWdpbmFsX2luc19maWVsZHMuZm9yRWFjaCAob3JpZ2luYWxfaW5zX2ZpZWxkKS0+XHJcblx0XHRcdFx0XHRcdFx0aWYgb3JpZ2luYWxfaW5zX2ZpZWxkPy5jb2RlID09IHN1YlRhYmxlICYmIG9yaWdpbmFsX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnXHJcblx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBvcmlnaW5hbF9pbnNfZmllbGQ/LmZpZWxkc1xyXG5cclxuXHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfc3VidGFibGVfZmllbGRzXCIsb3JpZ2luYWxfc3VidGFibGVfZmllbGRzPy5sZW5ndGhcclxuXHJcblx0XHRpZiBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHNcclxuXHRcdFx0IyAjIOabtOaWsOatpemqpOeahOWAvFxyXG5cdFx0XHQjIDEu5om+5Yiw5b2T5YmN55qE5q2l6aqkXHJcblx0XHRcdCMgMi7lvZPliY3mraXpqqTkuK1hcHByb3Zlc+S4reeahHZhbHVlc1xyXG5cdFx0XHQjIDMu5ZyodmFsdWVz5Lit5om+5Yiw6KGo5qC8XHJcblx0XHRcdCMgNC7moLnmja7ooajmoLznmoRmaWVsZHPlsZ7mgKfvvIzkuIDkuKrkuKrnmoTotYvlgLxcclxuXHRcdFx0IyA1LuaKiuWkjeWItueahHB1c2jliLDooajmoLzmlbDnu4TnmoTlkI7pnaJcclxuXHRcdFx0dHJhY2VzID0gb3JpZ2luYWxfaW5zPy50cmFjZXNcclxuXHJcblx0XHRcdHRyYWNlID0gdHJhY2VzW3RyYWNlcy5sZW5ndGgtMV1cclxuXHJcblx0XHRcdGFwcHJvdmUgPSB0cmFjZT8uYXBwcm92ZXNbMF1cclxuXHJcblx0XHRcdHRhYmxlX2RhdGEgPSBhcHByb3ZlPy52YWx1ZXNbc3ViVGFibGVdIHx8IFtdXHJcblxyXG5cdFx0XHRyb3dfZGF0YSA9IHt9XHJcblxyXG5cdFx0XHRjb2x1bW5zLmZvckVhY2ggKGNvbHVtbiktPlxyXG5cdFx0XHRcdHJvd19kYXRhW2NvbHVtbl0gPSBmb3J3YXJkX2luc192YWx1ZXNbY29sdW1uXSB8fCBcIlwiXHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0aWYgcm93X2RhdGEgJiYgcm93X2RhdGEgIT0ge31cclxuXHRcdFx0XHR0YWJsZV9kYXRhLnB1c2ggcm93X2RhdGFcclxuXHRcdFx0XHR0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXNbc3ViVGFibGVdID0gdGFibGVfZGF0YVxyXG5cclxuXHRcdFx0XHRjb25zb2xlLmxvZyB0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXNbc3ViVGFibGVdXHJcblxyXG5cdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUob3JpZ2luYWxfaW5zX2lkLHtcclxuXHRcdFx0XHRcdCRzZXQ6e1xyXG5cdFx0XHRcdFx0XHQndHJhY2VzJzp0cmFjZXNcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0XHRcdCdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0XHRcdCdpbmZvJzogJ+WbnuWhq+aVsOaNruS4uuepuidcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRcdCdlcnJvcic6ICfljp/nlLPor7fljZXml6Dnm7jlhbPlrZDooagnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0ZWxzZVxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnc3VjY2Vzcyc6ICfnlLPor7fljZXmnKrnu5PmnZ8nXHJcblx0XHRcdH1cclxuXHRcdH1cclxuKSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvZm9yd2FyZF9yZWZpbGxcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGFwcHJvdmUsIGNvbHVtbnMsIGZvcndhcmRfaW5zLCBmb3J3YXJkX2luc192YWx1ZXMsIG9yaWdpbmFsX2lucywgb3JpZ2luYWxfaW5zX2ZpZWxkcywgb3JpZ2luYWxfaW5zX2Zvcm0sIG9yaWdpbmFsX2luc19pZCwgb3JpZ2luYWxfc3VidGFibGVfZmllbGRzLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlZjYsIHJlZjcsIHJlZjgsIHJlZjksIHJvd19kYXRhLCBzdWJUYWJsZSwgdGFibGVfZGF0YSwgdHJhY2UsIHRyYWNlcztcbiAgY29uc29sZS5sb2coXCI9PT09PT09PT3lm57loavlrZDooag9PT09PT09PT09XCIpO1xuICBjb25zb2xlLmxvZyhcInJlcT8ucXVlcnk/LnN1YlRhYmxlXCIsIHJlcSAhPSBudWxsID8gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5zdWJUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gIGNvbnNvbGUubG9nKFwiPT09PT09PT095YiG5Y+R5Zue5aGr55qE5YiXPT09PT09PT09PVwiKTtcbiAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5jb2x1bW5cIiwgcmVxICE9IG51bGwgPyAocmVmMSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEuY29sdW1uIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgY29sdW1ucyA9IHJlcSAhPSBudWxsID8gKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLmNvbHVtbi5zcGxpdCgnOycpIDogdm9pZCAwIDogdm9pZCAwO1xuICBjb25zb2xlLmxvZyhcImNvbHVtbnNcIiwgY29sdW1ucyk7XG4gIGZvcndhcmRfaW5zID0gcmVxICE9IG51bGwgPyAocmVmMyA9IHJlcS5ib2R5KSAhPSBudWxsID8gcmVmMy5pbnN0YW5jZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgc3ViVGFibGUgPSByZXEgIT0gbnVsbCA/IChyZWY0ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNC5zdWJUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgaWYgKChmb3J3YXJkX2lucyAhPSBudWxsID8gZm9yd2FyZF9pbnMuc3RhdGUgOiB2b2lkIDApID09PSBcImNvbXBsZXRlZFwiICYmIChmb3J3YXJkX2lucyAhPSBudWxsID8gKHJlZjUgPSBmb3J3YXJkX2lucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzKSAhPSBudWxsID8gcmVmNS5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCAmJiBzdWJUYWJsZSAmJiBjb2x1bW5zKSB7XG4gICAgZm9yd2FyZF9pbnNfdmFsdWVzID0gZm9yd2FyZF9pbnMgIT0gbnVsbCA/IGZvcndhcmRfaW5zLnZhbHVlcyA6IHZvaWQgMDtcbiAgICBvcmlnaW5hbF9pbnNfaWQgPSBfLmxhc3QoZm9yd2FyZF9pbnMgIT0gbnVsbCA/IGZvcndhcmRfaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMgOiB2b2lkIDApO1xuICAgIG9yaWdpbmFsX2lucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKG9yaWdpbmFsX2luc19pZCk7XG4gICAgb3JpZ2luYWxfaW5zX2Zvcm0gPSBkYi5mb3Jtcy5maW5kT25lKG9yaWdpbmFsX2lucyAhPSBudWxsID8gb3JpZ2luYWxfaW5zLmZvcm0gOiB2b2lkIDApO1xuICAgIG9yaWdpbmFsX2luc19maWVsZHMgPSBbXTtcbiAgICBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBbXTtcbiAgICBjb25zb2xlLmxvZyhcIm9yaWdpbmFsX2luc19mb3JtPy5jdXJyZW50Py5faWRcIiwgb3JpZ2luYWxfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWY2ID0gb3JpZ2luYWxfaW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjYuX2lkIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIm9yaWdpbmFsX2lucz8uZm9ybV92ZXJzaW9uXCIsIG9yaWdpbmFsX2lucyAhPSBudWxsID8gb3JpZ2luYWxfaW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCk7XG4gICAgaWYgKChvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApID09PSAob3JpZ2luYWxfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWY3ID0gb3JpZ2luYWxfaW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjcuX2lkIDogdm9pZCAwIDogdm9pZCAwKSkge1xuICAgICAgb3JpZ2luYWxfaW5zX2ZpZWxkcyA9IChyZWY4ID0gb3JpZ2luYWxfaW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjguZmllbGRzIDogdm9pZCAwO1xuICAgICAgb3JpZ2luYWxfaW5zX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKG9yaWdpbmFsX2luc19maWVsZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9yaWdpbmFsX2luc19maWVsZFwiLCBvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC5jb2RlIDogdm9pZCAwKTtcbiAgICAgICAgaWYgKChvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gc3ViVGFibGUgJiYgKG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnKSB7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyA9IG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgob3JpZ2luYWxfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWY5ID0gb3JpZ2luYWxfaW5zX2Zvcm0uaGlzdG9yeXMpICE9IG51bGwgPyByZWY5Lmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgIG9yaWdpbmFsX2luc19mb3JtLmhpc3RvcnlzLmZvckVhY2goZnVuY3Rpb24ob2gpIHtcbiAgICAgICAgICBpZiAoKG9yaWdpbmFsX2lucyAhPSBudWxsID8gb3JpZ2luYWxfaW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IG9oLl9pZCkge1xuICAgICAgICAgICAgb3JpZ2luYWxfaW5zX2ZpZWxkcyA9IG9oICE9IG51bGwgPyBvaC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxfaW5zX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKG9yaWdpbmFsX2luc19maWVsZCkge1xuICAgICAgICAgICAgICBpZiAoKG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBzdWJUYWJsZSAmJiAob3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gb3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQuZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIm9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkc1wiLCBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgIT0gbnVsbCA/IG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcy5sZW5ndGggOiB2b2lkIDApO1xuICAgIGlmIChvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMpIHtcbiAgICAgIHRyYWNlcyA9IG9yaWdpbmFsX2lucyAhPSBudWxsID8gb3JpZ2luYWxfaW5zLnRyYWNlcyA6IHZvaWQgMDtcbiAgICAgIHRyYWNlID0gdHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXTtcbiAgICAgIGFwcHJvdmUgPSB0cmFjZSAhPSBudWxsID8gdHJhY2UuYXBwcm92ZXNbMF0gOiB2b2lkIDA7XG4gICAgICB0YWJsZV9kYXRhID0gKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUudmFsdWVzW3N1YlRhYmxlXSA6IHZvaWQgMCkgfHwgW107XG4gICAgICByb3dfZGF0YSA9IHt9O1xuICAgICAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gcm93X2RhdGFbY29sdW1uXSA9IGZvcndhcmRfaW5zX3ZhbHVlc1tjb2x1bW5dIHx8IFwiXCI7XG4gICAgICB9KTtcbiAgICAgIGlmIChyb3dfZGF0YSAmJiByb3dfZGF0YSAhPT0ge30pIHtcbiAgICAgICAgdGFibGVfZGF0YS5wdXNoKHJvd19kYXRhKTtcbiAgICAgICAgdHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXS5hcHByb3Zlc1swXS52YWx1ZXNbc3ViVGFibGVdID0gdGFibGVfZGF0YTtcbiAgICAgICAgY29uc29sZS5sb2codHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXS5hcHByb3Zlc1swXS52YWx1ZXNbc3ViVGFibGVdKTtcbiAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZShvcmlnaW5hbF9pbnNfaWQsIHtcbiAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAndHJhY2VzJzogdHJhY2VzXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgJ3N1Y2Nlc3MnOiAn5Zue5aGr5oiQ5YqfJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAnaW5mbyc6ICflm57loavmlbDmja7kuLrnqbonXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogMjAwLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgJ2Vycm9yJzogJ+WOn+eUs+ivt+WNleaXoOebuOWFs+WtkOihqCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgICdzdWNjZXNzJzogJ+eUs+ivt+WNleacque7k+adnydcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2ZvcndhcmRfdGFibGVfcmVmaWxsXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT095Y6f6KGo5a2Q6KGoPT09PT09PT09PVwiXHJcblx0XHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/Lm9UYWJsZVwiLHJlcT8ucXVlcnk/Lm9UYWJsZVxyXG5cdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3njrDooajlrZDooag9PT09PT09PT09XCJcclxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uZFRhYmxlXCIscmVxPy5xdWVyeT8uZFRhYmxlXHJcblx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWOn+ihqOWNleeahOWtkOihqOWMuemFjeWIlz09PT09PT09PT1cIlxyXG5cdFx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5vTWF0Y2hDb2xcIixyZXE/LnF1ZXJ5Py5vTWF0Y2hDb2xcclxuXHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT09546w6KGo5Y2V55qE5a2Q6KGo5Yy56YWN5YiXPT09PT09PT09PVwiXHJcblx0XHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LmRNYXRjaENvbFwiLHJlcT8ucXVlcnk/LmRNYXRjaENvbFxyXG5cdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3pnIDopoHlm57loavnmoTliJc9PT09PT09PT09XCJcdFxyXG5cdFx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5yZWZpbGxDb2xcIixyZXE/LnF1ZXJ5Py5yZWZpbGxDb2xcclxuXHJcblx0XHQjIOWIhuWPkeeahOeUs+ivt+WNlVxyXG5cdFx0ZF9pbnMgPSByZXE/LmJvZHk/Lmluc3RhbmNlXHJcblxyXG5cdFx0XHJcblx0XHRpZiBkX2lucz8uc3RhdGUgPT0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0XHRpZiByZXE/LnF1ZXJ5Py5vVGFibGVcclxuXHRcdFx0XHRvX3RhYmxlID0gcmVxPy5xdWVyeT8ub1RhYmxlXHJcblx0XHRcdFx0aWYgcmVxPy5xdWVyeT8uZFRhYmxlXHJcblx0XHRcdFx0XHRkX3RhYmxlID0gcmVxPy5xdWVyeT8uZFRhYmxlXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0ZF90YWJsZSA9IG9fdGFibGVcclxuXHRcdFx0XHRpZiByZXE/LnF1ZXJ5Py5hVGFibGVcclxuXHRcdFx0XHRcdGFfdGFibGUgPSByZXE/LnF1ZXJ5Py5hVGFibGVcclxuXHRcdFx0XHRpZiByZXE/LnF1ZXJ5Py5vTWF0Y2hDb2xcclxuXHRcdFx0XHRcdG9fbWF0Y2hfY29sID0gcmVxPy5xdWVyeT8ub01hdGNoQ29sXHJcblx0XHRcdFx0XHRpZiByZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcclxuXHRcdFx0XHRcdFx0ZF9tYXRjaF9jb2wgPSByZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0ZF9tYXRjaF9jb2wgPSBvX21hdGNoX2NvbFxyXG5cdFx0XHRcdFx0Y29sdW1ucyA9IHJlcT8ucXVlcnk/LnJlZmlsbENvbC5zcGxpdCgnOycpIHx8IFtdXHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyBcImNvbHVtbnNcIixjb2x1bW5zXHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdGlmIGNvbHVtbnMgfHwgY29sdW1ucy5sZW5ndGg8MVxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PT09PT09PT09PT09PT1cIlxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyBkX3RhYmxlLCBvX21hdGNoX2NvbCwgY29sdW1uc1xyXG5cclxuXHRcdFx0XHRcdFx0IyDliIblj5Hlm57mnaXnmoTlgLxcclxuXHRcdFx0XHRcdFx0ZF9pbnNfdmFsdWVzID0gZF9pbnM/LnZhbHVlc1xyXG5cclxuXHRcdFx0XHRcdFx0IyDljp/nlLPor7fljZUgZm9ybSDooajlrZfmrrVcclxuXHRcdFx0XHRcdFx0b19pbnNfaWQgPSBfLmxhc3QgZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcclxuXHRcdFx0XHRcdFx0b19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShvX2luc19pZClcclxuXHRcdFx0XHRcdFx0b19pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUob19pbnM/LmZvcm0pXHJcblxyXG5cdFx0XHRcdFx0XHRkX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShkX2lucz8uZm9ybSlcclxuXHJcblx0XHRcdFx0XHRcdCMg5Y6f55Sz6K+35Y2V55qEIGZpZWxkc1xyXG5cdFx0XHRcdFx0XHRvX2luc19maWVsZHMgPSBbXVxyXG5cclxuXHRcdFx0XHRcdFx0IyDljp/lrZDooajlrZfmrrVcclxuXHRcdFx0XHRcdFx0b19zdWJ0YWJsZV9maWVsZHMgPSBbXVxyXG5cclxuXHRcdFx0XHRcdFx0IyDliIblj5HnlLPor7fljZXnmoQgZmllbGRzXHJcblx0XHRcdFx0XHRcdGRfaW5zX2ZpZWxkcyA9IFtdXHJcblx0XHRcdFx0XHRcdCMg546w55Sz6K+35Y2V5a2X6KGo5a2X5q61XHJcblx0XHRcdFx0XHRcdGRfc3VidGFibGVfZmllbGRzID0gW11cclxuXHJcblx0XHRcdFx0XHRcdCMg6LWL5YC85a+55bqU55qE5a2X5q61XHJcblx0XHRcdFx0XHRcdGNvbHVtbl9saXN0ID0gW11cclxuXHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHQjIOWIhuWPkeWQjueUs+ivt+WNleeahCDlrZDooajlgLxcclxuXHRcdFx0XHRcdFx0ZF90YWJsZV92YWx1ZXMgPSBbXVxyXG5cclxuXHRcdFx0XHRcdFx0IyDmn6XnnIvljp/nlLPor7fljZXmmK/lkKbmnInlr7nlupTnmoTlrZDooahcclxuXHRcdFx0XHRcdFx0aWYgb19pbnM/LmZvcm1fdmVyc2lvbiA9PSBvX2luc19mb3JtPy5jdXJyZW50Py5faWRcclxuXHRcdFx0XHRcdFx0XHRvX2luc19maWVsZHMgPSBvX2luc19mb3JtPy5jdXJyZW50Py5maWVsZHNcclxuXHRcdFx0XHRcdFx0XHRvX2luc19maWVsZHMuZm9yRWFjaCAob19pbnNfZmllbGQpLT5cclxuXHRcdFx0XHRcdFx0XHRcdGlmIG9faW5zX2ZpZWxkPy50eXBlID09ICd0YWJsZScgJiYgb19pbnNfZmllbGQ/LmNvZGUgPT0gb190YWJsZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRvX3N1YnRhYmxlX2ZpZWxkcyA9IG9faW5zX2ZpZWxkPy5maWVsZHNcclxuXHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdGlmIG9faW5zX2Zvcm0/Lmhpc3RvcnlzPy5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHRcdFx0XHRvX2luc19mb3JtLmhpc3RvcnlzLmZvckVhY2ggKG9oKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmIG9faW5zPy5mb3JtX3ZlcnNpb24gPT0gb2guX2lkXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b19pbnNfZmllbGRzID0gb2g/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9faW5zX2ZpZWxkcy5mb3JFYWNoIChvX2luc19maWVsZCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgb19pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBvX2luc19maWVsZD8uY29kZSA9PSBvX3RhYmxlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9fc3VidGFibGVfZmllbGRzID0gb19pbnNfZmllbGQ/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0IyDmn6XnnIvliIblj5HnmoTnlLPor7fljZXmmK/lkKbmnInlr7nlupTnmoTlrZfooahcclxuXHRcdFx0XHRcdFx0aWYgZF9pbnM/LmZvcm1fdmVyc2lvbiA9PSBkX2luc19mb3JtPy5jdXJyZW50Py5faWRcclxuXHRcdFx0XHRcdFx0XHRkX2luc19maWVsZHMgPSBkX2luc19mb3JtPy5jdXJyZW50Py5maWVsZHNcclxuXHRcdFx0XHRcdFx0XHRkX2luc19maWVsZHMuZm9yRWFjaCAoZF9pbnNfZmllbGQpLT5cclxuXHRcdFx0XHRcdFx0XHRcdGlmKChkX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIGRfaW5zX2ZpZWxkPy5jb2RlID09IGRfdGFibGUpfHwoYV90YWJsZSAmJiBkX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIGRfaW5zX2ZpZWxkPy5jb2RlID09IGFfdGFibGUpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkX3N1YnRhYmxlX2ZpZWxkcyA9IGRfc3VidGFibGVfZmllbGRzLmNvbmNhdCBkX2luc19maWVsZD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRpZiBkX2luc19mb3JtPy5oaXN0b3J5cz8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0XHRcdFx0ZF9pbnNfZm9ybS5oaXN0b3J5cy5mb3JFYWNoIChkaCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiBkX2lucz8uZm9ybV92ZXJzaW9uID09IGRoLl9pZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRfaW5zX2ZpZWxkcyA9IGRoPy5maWVsZHNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRkX2luc19maWVsZHMuZm9yRWFjaCAoZF9pbnNfZmllbGQpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKChkX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIGRfaW5zX2ZpZWxkPy5jb2RlID09IGRfdGFibGUpfHwoYV90YWJsZSAmJiBkX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIGRfaW5zX2ZpZWxkPy5jb2RlID09IGFfdGFibGUpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkX3N1YnRhYmxlX2ZpZWxkcyA9IGRfc3VidGFibGVfZmllbGRzLmNvbmNhdCBkX2luc19maWVsZD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHJcblxyXG5cdFx0XHRcdFx0XHRpZiBvX3N1YnRhYmxlX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nIFwib19zdWJ0YWJsZV9maWVsZHNcIixvX3N1YnRhYmxlX2ZpZWxkc1xyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfljp/nlLPor7fljZXml6Dlr7nlupTlrZDooagnKTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdGlmIGRfc3VidGFibGVfZmllbGRzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleaXoOWvueW6lOWtkOihqCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0ZF90YWJsZV92YWx1ZXMgPSBkX2lucz8udmFsdWVzW2RfdGFibGVdIHx8IFtdXHJcblxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0aWYgYV90YWJsZVxyXG5cdFx0XHRcdFx0XHRcdGFfdGFibGVfdmFsdWVzID0gIGRfaW5zPy52YWx1ZXNbYV90YWJsZV0gfHwgW11cclxuXHRcdFx0XHRcdFx0XHRpZiBhX3RhYmxlX3ZhbHVlcyAmJiBhX3RhYmxlX3ZhbHVlcz8ubGVuZ3RoPT1kX3RhYmxlX3ZhbHVlcz8ubGVuZ3RoXHJcblx0XHRcdFx0XHRcdFx0XHRhX3RhYmxlX3ZhbHVlcy5mb3JFYWNoIChhX3JvdyxpbmRleCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkX3RhYmxlX3ZhbHVlc1tpbmRleF1ba2V5XSA9IHZhbHVlIGZvciBrZXksdmFsdWUgb2YgYV9yb3dcclxuXHJcblx0XHRcdFx0XHRcdGlmIGRfdGFibGVfdmFsdWVzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaVsOaNruS4uuepuicpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0b19tYXRjaF9jb2xfZmllbGRzID0gb19zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKChtKS0+cmV0dXJuIG0uY29kZT09b19tYXRjaF9jb2wpXHJcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sX2ZpZWxkcyA9IGRfc3VidGFibGVfZmllbGRzLmZpbHRlcigobSktPnJldHVybiBtLmNvZGU9PWRfbWF0Y2hfY29sKVxyXG5cclxuXHRcdFx0XHRcdFx0IyDljLnphY3liJfliKTmlq1cclxuXHRcdFx0XHRcdFx0aWYgb19tYXRjaF9jb2xfZmllbGRzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgZF9tYXRjaF9jb2xfZmllbGRzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xyXG5cclxuXHRcdFx0XHRcdFx0IyDliKTmlq3ljLnphY3liJflrZfmrrXnmoTlgLznsbvlnovmmK/lkKbkuIDoh7RcclxuXHRcdFx0XHRcdFx0b19tYXRjaF9jb2xfZmllbGQgPSBvX21hdGNoX2NvbF9maWVsZHNbMF1cclxuXHRcdFx0XHRcdFx0ZF9tYXRjaF9jb2xfZmllbGQgPSBkX21hdGNoX2NvbF9maWVsZHNbMF1cclxuXHJcblx0XHRcdFx0XHRcdGlmIG9fbWF0Y2hfY29sX2ZpZWxkPy50eXBlICE9IGRfbWF0Y2hfY29sX2ZpZWxkPy50eXBlXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWSjOWOn+eUs+ivt+WNleWtkOihqOeahOWMuemFjeWIl+Wtl+auteS4jeS4gOiHtCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0IyDlm57loavliJfliKTmlq1cclxuXHRcdFx0XHRcdFx0Y29sdW1ucy5mb3JFYWNoIChjb2x1bW4pLT5cclxuXHRcdFx0XHRcdFx0XHRjb2xzID0gY29sdW1uLnNwbGl0KCctJykgfHwgW11cclxuXHRcdFx0XHRcdFx0XHRpZiBjb2xzLmxlbmd0aCA9PSAyXHJcblx0XHRcdFx0XHRcdFx0XHRvX2NvbCA9IGNvbHNbMF1cclxuXHRcdFx0XHRcdFx0XHRcdGRfY29sID0gY29sc1sxXVxyXG5cdFx0XHRcdFx0XHRcdFx0b19jb2xfZmllbGRzID0gb19zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKChtKS0+cmV0dXJuIG0uY29kZT09b19jb2wpXHJcblx0XHRcdFx0XHRcdFx0XHRkX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoKG0pLT5yZXR1cm4gbS5jb2RlPT1kX2NvbClcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQjIOWIpOaWreaYr+WQpuacieWvueW6lOeahOWbnuWhq+WIl1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgb19jb2xfZmllbGRzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfljp/nlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiBkX2NvbF9maWVsZHMubGVuZ3RoID09IDBcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaXoOWvueW6lOWbnuWhq+WIlycpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdCMg5Yik5pat5Yy56YWN5YiX5a2X5q6155qE5YC857G75Z6L5piv5ZCm5LiA6Ie0XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBvX2NvbF9maWVsZHM/LnR5cGUgIT0gZF9jb2xfZmllbGRzPy50eXBlXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICflm57loavliJflrZfmrrXnsbvlnovkuI3kuIDoh7QnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29sID0ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRvX2NvbDogb19jb2wsXHJcblx0XHRcdFx0XHRcdFx0XHRcdGRfY29sOiBkX2NvbFxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uX2xpc3QucHVzaCBjb2xcclxuXHJcblx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WbnuWhq+WIl+S4jeWMuemFjScpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0IyDotYvlgLxcclxuXHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyAgJz09PT09PWNvbHVtbl9saXN0PT09PT09PScsY29sdW1uX2xpc3RcclxuXHJcblx0XHRcdFx0XHRcdHRyYWNlcyA9IG9faW5zPy50cmFjZXNcclxuXHJcblx0XHRcdFx0XHRcdCMg5Y6f55Sz6K+35Y2V55qEIHN0ZXAgXHJcblx0XHRcdFx0XHRcdHRyYWNlID0gdHJhY2VzW3RyYWNlcy5sZW5ndGgtMV1cclxuXHJcblx0XHRcdFx0XHRcdCMg5Y6f55Sz6K+35Y2V55qE5b2T5YmN5q2l6aqkXHJcblx0XHRcdFx0XHRcdGFwcHJvdmUgPSB0cmFjZT8uYXBwcm92ZXNbMF1cclxuXHJcblx0XHRcdFx0XHRcdCMg5YWD55Sz6K+35Y2V55qE5b2T5YmNIHZhbHVlIOeahCDlrZDooahcclxuXHRcdFx0XHRcdFx0dGFibGVfZGF0YSA9IGFwcHJvdmU/LnZhbHVlc1tvX3RhYmxlXSB8fCBbXVxyXG5cclxuXHJcblx0XHRcdFx0XHRcdCMg5qC55o2uIGNvbHVtbl9saXN0IOi1i+WAvOWvueW6lOWtl+autei/m+ihjOi1i+WAvFxyXG5cdFx0XHRcdFx0XHQjIOW+queOr+WIhuWPkeeUs+ivt+WNleeahOavj+ihjFxyXG5cdFx0XHRcdFx0XHRkX3RhYmxlX3ZhbHVlcy5mb3JFYWNoIChkX3JvdyktPlxyXG5cdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJkX3Jvd1wiLGRfcm93XHJcblx0XHRcdFx0XHRcdFx0IyDmn6Xmib7ljLnphY3nmoTliJfmmK/lkKbkuI7lvZPliY3nmoTljLnphY3liJfkuIDoh7RcclxuXHRcdFx0XHRcdFx0XHRoYXNfb2JqID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0XHRjb3VudCA9IC0xXHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0IyDnnIvljp/lrZDooajmmK/lkKbmnInor6XljLnphY3liJdcclxuXHRcdFx0XHRcdFx0XHR0YWJsZV9kYXRhLmZvckVhY2ggKG9fcm93LCBpbmRleCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcIm9fcm93XCIsIG9fcm93XHJcblx0XHRcdFx0XHRcdFx0XHQjIGNvbnNvbGUubG9nIFwiaW5kZXhcIixpbmRleFxyXG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcIm9fcm93W29fbWF0Y2hfY29sXVwiLG9fcm93W29fbWF0Y2hfY29sXVxyXG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImRfcm93W2RfbWF0Y2hfY29sXVwiLGRfcm93W2RfbWF0Y2hfY29sXVxyXG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcIm9fcm93W29fbWF0Y2hfY29sXSA9PSBkX3Jvd1tkX21hdGNoX2NvbF1cIixvX3Jvd1tvX21hdGNoX2NvbF0gPT0gZF9yb3dbZF9tYXRjaF9jb2xdXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgb19yb3dbb19tYXRjaF9jb2xdID09IGRfcm93W2RfbWF0Y2hfY29sXVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRoYXNfb2JqID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb3VudCA9IGluZGV4XHJcblxyXG5cdFx0XHRcdFx0XHRcdCMg5Y6f55Sz6K+35Y2V55qE5Yy56YWN5a2X5q615pyJ5YC8XHJcblx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImhhc19vYmpcIixoYXNfb2JqXHJcblx0XHRcdFx0XHRcdFx0aWYgaGFzX29iaj09dHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uX2xpc3QuZm9yRWFjaCAoY29sKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRhYmxlX2RhdGFbY291bnRdW2NvbD8ub19jb2xdID0gZF9yb3dbY29sPy5kX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRyb3dfZGF0YSA9IHt9XHJcblx0XHRcdFx0XHRcdFx0XHRyb3dfZGF0YVtvX21hdGNoX2NvbF0gPSBkX3Jvd1tkX21hdGNoX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbl9saXN0LmZvckVhY2ggKGNvbCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyb3dfZGF0YVtjb2w/Lm9fY29sXSA9IGRfcm93W2NvbD8uZF9jb2xdXHJcblx0XHRcdFx0XHRcdFx0XHR0YWJsZV9kYXRhLnB1c2ggcm93X2RhdGFcclxuXHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHR0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXMgPSBvX2lucz8udmFsdWVzXHJcblx0XHRcdFx0XHRcdHRyYWNlc1t0cmFjZXMubGVuZ3RoLTFdLmFwcHJvdmVzWzBdLnZhbHVlc1tvX3RhYmxlXSA9IHRhYmxlX2RhdGFcclxuXHJcblx0XHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUob19pbnNfaWQse1xyXG5cdFx0XHRcdFx0XHRcdCRzZXQ6e1xyXG5cdFx0XHRcdFx0XHRcdFx0J3RyYWNlcyc6dHJhY2VzXHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuXHRcdFx0XHRcdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdFx0XHRcdFx0J3N1Y2Nlc3MnOiAn5Zue5aGr5oiQ5YqfJ1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7lrZDooajlm57loavliJflrZfmrrUgY29sdW1ucyDlgLwnKTtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAnd2ViaG9va+acqumFjee9ruWMuemFjeWIl+Wtl+autSBvTWF0Y2hDb2wg5YC8Jyk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAnd2ViaG9va+acqumFjee9ruWOn+ihqOWNleWtkOihqCBvVGFibGUg5YC8Jyk7XHJcblx0XHRlbHNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfnlLPor7fljZXmnKrnu5PmnZ8nKTtcclxuXHRjYXRjaCBlXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdGVycm9yczogW2VdXHJcblx0XHRcdH1cclxuXHRcdH1cclxuKSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvZm9yd2FyZF90YWJsZV9yZWZpbGxcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGFfdGFibGUsIGFfdGFibGVfdmFsdWVzLCBhcHByb3ZlLCBjb2x1bW5fbGlzdCwgY29sdW1ucywgZF9pbnMsIGRfaW5zX2ZpZWxkcywgZF9pbnNfZm9ybSwgZF9pbnNfdmFsdWVzLCBkX21hdGNoX2NvbCwgZF9tYXRjaF9jb2xfZmllbGQsIGRfbWF0Y2hfY29sX2ZpZWxkcywgZF9zdWJ0YWJsZV9maWVsZHMsIGRfdGFibGUsIGRfdGFibGVfdmFsdWVzLCBlLCBvX2lucywgb19pbnNfZmllbGRzLCBvX2luc19mb3JtLCBvX2luc19pZCwgb19tYXRjaF9jb2wsIG9fbWF0Y2hfY29sX2ZpZWxkLCBvX21hdGNoX2NvbF9maWVsZHMsIG9fc3VidGFibGVfZmllbGRzLCBvX3RhYmxlLCByZWYsIHJlZjEsIHJlZjEwLCByZWYxMSwgcmVmMTIsIHJlZjEzLCByZWYxNCwgcmVmMTUsIHJlZjE2LCByZWYxNywgcmVmMTgsIHJlZjE5LCByZWYyLCByZWYyMCwgcmVmMjEsIHJlZjIyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCByZWY3LCByZWY4LCByZWY5LCB0YWJsZV9kYXRhLCB0cmFjZSwgdHJhY2VzO1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT095Y6f6KGo5a2Q6KGoPT09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhcInJlcT8ucXVlcnk/Lm9UYWJsZVwiLCByZXEgIT0gbnVsbCA/IChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYub1RhYmxlIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeeOsOihqOWtkOihqD09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5kVGFibGVcIiwgcmVxICE9IG51bGwgPyAocmVmMSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEuZFRhYmxlIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWOn+ihqOWNleeahOWtkOihqOWMuemFjeWIlz09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5vTWF0Y2hDb2xcIiwgcmVxICE9IG51bGwgPyAocmVmMiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjIub01hdGNoQ29sIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeeOsOihqOWNleeahOWtkOihqOWMuemFjeWIlz09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcIiwgcmVxICE9IG51bGwgPyAocmVmMyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjMuZE1hdGNoQ29sIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PemcgOimgeWbnuWhq+eahOWIlz09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5yZWZpbGxDb2xcIiwgcmVxICE9IG51bGwgPyAocmVmNCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjQucmVmaWxsQ29sIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBkX2lucyA9IHJlcSAhPSBudWxsID8gKHJlZjUgPSByZXEuYm9keSkgIT0gbnVsbCA/IHJlZjUuaW5zdGFuY2UgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKChkX2lucyAhPSBudWxsID8gZF9pbnMuc3RhdGUgOiB2b2lkIDApID09PSBcImNvbXBsZXRlZFwiKSB7XG4gICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmNiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjYub1RhYmxlIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgICAgIG9fdGFibGUgPSByZXEgIT0gbnVsbCA/IChyZWY3ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNy5vVGFibGUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgIGlmIChyZXEgIT0gbnVsbCA/IChyZWY4ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmOC5kVGFibGUgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICBkX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmOSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjkuZFRhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRfdGFibGUgPSBvX3RhYmxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXEgIT0gbnVsbCA/IChyZWYxMCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEwLmFUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCkge1xuICAgICAgICAgIGFfdGFibGUgPSByZXEgIT0gbnVsbCA/IChyZWYxMSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjExLmFUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmMTIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxMi5vTWF0Y2hDb2wgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICBvX21hdGNoX2NvbCA9IHJlcSAhPSBudWxsID8gKHJlZjEzID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMTMub01hdGNoQ29sIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICAgIGlmIChyZXEgIT0gbnVsbCA/IChyZWYxNCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjE0LmRNYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMCkge1xuICAgICAgICAgICAgZF9tYXRjaF9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWYxNSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjE1LmRNYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZF9tYXRjaF9jb2wgPSBvX21hdGNoX2NvbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29sdW1ucyA9IChyZXEgIT0gbnVsbCA/IChyZWYxNiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjE2LnJlZmlsbENvbC5zcGxpdCgnOycpIDogdm9pZCAwIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbHVtbnNcIiwgY29sdW1ucyk7XG4gICAgICAgICAgaWYgKGNvbHVtbnMgfHwgY29sdW1ucy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT1cIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkX3RhYmxlLCBvX21hdGNoX2NvbCwgY29sdW1ucyk7XG4gICAgICAgICAgICBkX2luc192YWx1ZXMgPSBkX2lucyAhPSBudWxsID8gZF9pbnMudmFsdWVzIDogdm9pZCAwO1xuICAgICAgICAgICAgb19pbnNfaWQgPSBfLmxhc3QoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMgOiB2b2lkIDApO1xuICAgICAgICAgICAgb19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShvX2luc19pZCk7XG4gICAgICAgICAgICBvX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShvX2lucyAhPSBudWxsID8gb19pbnMuZm9ybSA6IHZvaWQgMCk7XG4gICAgICAgICAgICBkX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShkX2lucyAhPSBudWxsID8gZF9pbnMuZm9ybSA6IHZvaWQgMCk7XG4gICAgICAgICAgICBvX2luc19maWVsZHMgPSBbXTtcbiAgICAgICAgICAgIG9fc3VidGFibGVfZmllbGRzID0gW107XG4gICAgICAgICAgICBkX2luc19maWVsZHMgPSBbXTtcbiAgICAgICAgICAgIGRfc3VidGFibGVfZmllbGRzID0gW107XG4gICAgICAgICAgICBjb2x1bW5fbGlzdCA9IFtdO1xuICAgICAgICAgICAgZF90YWJsZV92YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIGlmICgob19pbnMgIT0gbnVsbCA/IG9faW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IChvX2luc19mb3JtICE9IG51bGwgPyAocmVmMTcgPSBvX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYxNy5faWQgOiB2b2lkIDAgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIG9faW5zX2ZpZWxkcyA9IG9faW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYxOCA9IG9faW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjE4LmZpZWxkcyA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgb19pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24ob19pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAob19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBvX3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gb19zdWJ0YWJsZV9maWVsZHMgPSBvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQuZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoKG9faW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYxOSA9IG9faW5zX2Zvcm0uaGlzdG9yeXMpICE9IG51bGwgPyByZWYxOS5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICAgICAgICAgIG9faW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbihvaCkge1xuICAgICAgICAgICAgICAgICAgaWYgKChvX2lucyAhPSBudWxsID8gb19pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gb2guX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9faW5zX2ZpZWxkcyA9IG9oICE9IG51bGwgPyBvaC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihvX2luc19maWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgob19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnICYmIChvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IG9fdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvX3N1YnRhYmxlX2ZpZWxkcyA9IG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChkX2lucyAhPSBudWxsID8gZF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gKGRfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYyMCA9IGRfaW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjIwLl9pZCA6IHZvaWQgMCA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgICAgZF9pbnNfZmllbGRzID0gZF9pbnNfZm9ybSAhPSBudWxsID8gKHJlZjIxID0gZF9pbnNfZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmMjEuZmllbGRzIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICAgICAgICBkX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihkX2luc19maWVsZCkge1xuICAgICAgICAgICAgICAgIGlmICgoKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBkX3RhYmxlKSB8fCAoYV90YWJsZSAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnICYmIChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IGFfdGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICgoZF9pbnNfZm9ybSAhPSBudWxsID8gKHJlZjIyID0gZF9pbnNfZm9ybS5oaXN0b3J5cykgIT0gbnVsbCA/IHJlZjIyLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgZF9pbnNfZm9ybS5oaXN0b3J5cy5mb3JFYWNoKGZ1bmN0aW9uKGRoKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoKGRfaW5zICE9IG51bGwgPyBkX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApID09PSBkaC5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZF9pbnNfZmllbGRzID0gZGggIT0gbnVsbCA/IGRoLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRfaW5zX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGRfaW5zX2ZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCgoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnICYmIChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IGRfdGFibGUpIHx8IChhX3RhYmxlICYmIChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScgJiYgKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gYV90YWJsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkX3N1YnRhYmxlX2ZpZWxkcyA9IGRfc3VidGFibGVfZmllbGRzLmNvbmNhdChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQuZmllbGRzIDogdm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob19zdWJ0YWJsZV9maWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib19zdWJ0YWJsZV9maWVsZHNcIiwgb19zdWJ0YWJsZV9maWVsZHMpO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Y6f55Sz6K+35Y2V5peg5a+55bqU5a2Q6KGoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZF9zdWJ0YWJsZV9maWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXml6Dlr7nlupTlrZDooagnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRfdGFibGVfdmFsdWVzID0gKGRfaW5zICE9IG51bGwgPyBkX2lucy52YWx1ZXNbZF90YWJsZV0gOiB2b2lkIDApIHx8IFtdO1xuICAgICAgICAgICAgaWYgKGFfdGFibGUpIHtcbiAgICAgICAgICAgICAgYV90YWJsZV92YWx1ZXMgPSAoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLnZhbHVlc1thX3RhYmxlXSA6IHZvaWQgMCkgfHwgW107XG4gICAgICAgICAgICAgIGlmIChhX3RhYmxlX3ZhbHVlcyAmJiAoYV90YWJsZV92YWx1ZXMgIT0gbnVsbCA/IGFfdGFibGVfdmFsdWVzLmxlbmd0aCA6IHZvaWQgMCkgPT09IChkX3RhYmxlX3ZhbHVlcyAhPSBudWxsID8gZF90YWJsZV92YWx1ZXMubGVuZ3RoIDogdm9pZCAwKSkge1xuICAgICAgICAgICAgICAgIGFfdGFibGVfdmFsdWVzLmZvckVhY2goZnVuY3Rpb24oYV9yb3csIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICB2YXIga2V5LCByZXN1bHRzLCB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFfcm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYV9yb3dba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGRfdGFibGVfdmFsdWVzW2luZGV4XVtrZXldID0gdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkX3RhYmxlX3ZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaVsOaNruS4uuepuicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb19tYXRjaF9jb2xfZmllbGRzID0gb19zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKGZ1bmN0aW9uKG0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG0uY29kZSA9PT0gb19tYXRjaF9jb2w7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sX2ZpZWxkcyA9IGRfc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtLmNvZGUgPT09IGRfbWF0Y2hfY29sO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAob19tYXRjaF9jb2xfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Y6f55Sz6K+35Y2V5a2Q6KGo5peg5a+55bqU5Yy56YWN5YiXJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZF9tYXRjaF9jb2xfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5YiG5Y+R55qE55Sz6K+35Y2V5a2Q6KGo5peg5a+55bqU5Yy56YWN5YiXJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvX21hdGNoX2NvbF9maWVsZCA9IG9fbWF0Y2hfY29sX2ZpZWxkc1swXTtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sX2ZpZWxkID0gZF9tYXRjaF9jb2xfZmllbGRzWzBdO1xuICAgICAgICAgICAgaWYgKChvX21hdGNoX2NvbF9maWVsZCAhPSBudWxsID8gb19tYXRjaF9jb2xfZmllbGQudHlwZSA6IHZvaWQgMCkgIT09IChkX21hdGNoX2NvbF9maWVsZCAhPSBudWxsID8gZF9tYXRjaF9jb2xfZmllbGQudHlwZSA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWSjOWOn+eUs+ivt+WNleWtkOihqOeahOWMuemFjeWIl+Wtl+auteS4jeS4gOiHtCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICAgICAgICB2YXIgY29sLCBjb2xzLCBkX2NvbCwgZF9jb2xfZmllbGRzLCBvX2NvbCwgb19jb2xfZmllbGRzO1xuICAgICAgICAgICAgICBjb2xzID0gY29sdW1uLnNwbGl0KCctJykgfHwgW107XG4gICAgICAgICAgICAgIGlmIChjb2xzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIG9fY29sID0gY29sc1swXTtcbiAgICAgICAgICAgICAgICBkX2NvbCA9IGNvbHNbMV07XG4gICAgICAgICAgICAgICAgb19jb2xfZmllbGRzID0gb19zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKGZ1bmN0aW9uKG0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtLmNvZGUgPT09IG9fY29sO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRfY29sX2ZpZWxkcyA9IGRfc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb2RlID09PSBkX2NvbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAob19jb2xfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleWtkOihqOaXoOWvueW6lOWbnuWhq+WIlycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZF9jb2xfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaXoOWvueW6lOWbnuWhq+WIlycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKG9fY29sX2ZpZWxkcyAhPSBudWxsID8gb19jb2xfZmllbGRzLnR5cGUgOiB2b2lkIDApICE9PSAoZF9jb2xfZmllbGRzICE9IG51bGwgPyBkX2NvbF9maWVsZHMudHlwZSA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICflm57loavliJflrZfmrrXnsbvlnovkuI3kuIDoh7QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29sID0ge1xuICAgICAgICAgICAgICAgICAgb19jb2w6IG9fY29sLFxuICAgICAgICAgICAgICAgICAgZF9jb2w6IGRfY29sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uX2xpc3QucHVzaChjb2wpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICflm57loavliJfkuI3ljLnphY0nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cmFjZXMgPSBvX2lucyAhPSBudWxsID8gb19pbnMudHJhY2VzIDogdm9pZCAwO1xuICAgICAgICAgICAgdHJhY2UgPSB0cmFjZXNbdHJhY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgYXBwcm92ZSA9IHRyYWNlICE9IG51bGwgPyB0cmFjZS5hcHByb3Zlc1swXSA6IHZvaWQgMDtcbiAgICAgICAgICAgIHRhYmxlX2RhdGEgPSAoYXBwcm92ZSAhPSBudWxsID8gYXBwcm92ZS52YWx1ZXNbb190YWJsZV0gOiB2b2lkIDApIHx8IFtdO1xuICAgICAgICAgICAgZF90YWJsZV92YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihkX3Jvdykge1xuICAgICAgICAgICAgICB2YXIgY291bnQsIGhhc19vYmosIHJvd19kYXRhO1xuICAgICAgICAgICAgICBoYXNfb2JqID0gZmFsc2U7XG4gICAgICAgICAgICAgIGNvdW50ID0gLTE7XG4gICAgICAgICAgICAgIHRhYmxlX2RhdGEuZm9yRWFjaChmdW5jdGlvbihvX3JvdywgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAob19yb3dbb19tYXRjaF9jb2xdID09PSBkX3Jvd1tkX21hdGNoX2NvbF0pIHtcbiAgICAgICAgICAgICAgICAgIGhhc19vYmogPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKGhhc19vYmogPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uX2xpc3QuZm9yRWFjaChmdW5jdGlvbihjb2wpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZV9kYXRhW2NvdW50XVtjb2wgIT0gbnVsbCA/IGNvbC5vX2NvbCA6IHZvaWQgMF0gPSBkX3Jvd1tjb2wgIT0gbnVsbCA/IGNvbC5kX2NvbCA6IHZvaWQgMF07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcm93X2RhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICByb3dfZGF0YVtvX21hdGNoX2NvbF0gPSBkX3Jvd1tkX21hdGNoX2NvbF07XG4gICAgICAgICAgICAgICAgY29sdW1uX2xpc3QuZm9yRWFjaChmdW5jdGlvbihjb2wpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByb3dfZGF0YVtjb2wgIT0gbnVsbCA/IGNvbC5vX2NvbCA6IHZvaWQgMF0gPSBkX3Jvd1tjb2wgIT0gbnVsbCA/IGNvbC5kX2NvbCA6IHZvaWQgMF07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlX2RhdGEucHVzaChyb3dfZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXS5hcHByb3Zlc1swXS52YWx1ZXMgPSBvX2lucyAhPSBudWxsID8gb19pbnMudmFsdWVzIDogdm9pZCAwO1xuICAgICAgICAgICAgdHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXS5hcHByb3Zlc1swXS52YWx1ZXNbb190YWJsZV0gPSB0YWJsZV9kYXRhO1xuICAgICAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZShvX2luc19pZCwge1xuICAgICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICAgJ3RyYWNlcyc6IHRyYWNlc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiAn5Zue5aGr5oiQ5YqfJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7lrZDooajlm57loavliJflrZfmrrUgY29sdW1ucyDlgLwnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljLnphY3liJflrZfmrrUgb01hdGNoQ29sIOWAvCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAnd2ViaG9va+acqumFjee9ruWOn+ihqOWNleWtkOihqCBvVGFibGUg5YC8Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfnlLPor7fljZXmnKrnu5PmnZ8nKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW2VdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9zdWJfdGFibGVfc29ydFwiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcbiAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PT09PT3lrZDooag9PT09PT09PT09XCJcclxuICAgICAgICBjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LnN1YlRhYmxlXCIscmVxPy5xdWVyeT8uc3ViVGFibGVcclxuICAgICAgICBjb25zb2xlLmxvZyBcIj09PT09PT09PeWtkOihqOaAu+WIhuWIlz09PT09PT09PT1cIlxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uc3VtQ29sXCIscmVxPy5xdWVyeT8uc3VtQ29sXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PT09PT3lrZDooajmjpLluo/liJc9PT09PT09PT09XCJcclxuICAgICAgICBjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LnNvcnRDb2xcIixyZXE/LnF1ZXJ5Py5zb3J0Q29sXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PT09PT3lrZDooajljZXliJfpnIDopoHorqHnrpfnmoTlkow9PT09PT09PT09XCJcclxuICAgICAgICBjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LnNpbmdsZUNvbHNcIixyZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgc3ViX3RhYmxlID0gcmVxPy5xdWVyeT8uc3ViVGFibGVcclxuICAgICAgICBpZiAhc3ViX3RhYmxlXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zdWJfdGFibGU9PT09PT1cIlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICd3ZWJob29rIOacqumFjee9riBzdWJUYWJsZSDlrZfmrrUnICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3VtX2NvbCA9IHJlcT8ucXVlcnk/LnN1bUNvbFxyXG4gICAgICAgIGlmICFzdW1fY29sXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zdW1fY29sPT09PT09XCJcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3VtQ29sIOWtl+autScgKTtcclxuICAgICAgICBcclxuICAgICAgICBzb3J0X2NvbCA9IHJlcT8ucXVlcnk/LnNvcnRDb2xcclxuICAgICAgICBpZiAhc29ydF9jb2xcclxuICAgICAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PXNvcnRfY29sPT09PT09XCJcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc29ydENvbCDlrZfmrrUnICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgIyBzaW5nbGVfY29scyA9IHJlcT8ucXVlcnk/LnNpbmdsZUNvbHNcclxuICAgICAgICAjIGlmICFzaW5nbGVfY29sc1xyXG4gICAgICAgICMgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zaW5nbGVfY29scz09PT09PVwiXHJcblxyXG4gICAgICAgICMgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHNpbmdsZUNvbHMg5a2X5q61JyApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlucyA9IHJlcT8uYm9keT8uaW5zdGFuY2VcclxuICAgICAgICBcclxuICAgICAgICBzdWJfdGFibGVfdmFsdWVzID0gaW5zLnZhbHVlc1tzdWJfdGFibGVdXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgc3ViX3RhYmxlX3ZhbHVlcz8ubGVuZ3RoID4gMCBcclxuICAgICAgICAgICAgIyAjIOagueaNriBzdWJfdGFibGVfdmFsdWVzIOi/m+ihjOaOkuW6j1xyXG4gICAgICAgICAgICAjID09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAgICAgIyDmjpLluo/lrZfmrrXvvIzlhbPplK7lrZfvvIzmraPluo8odHJ1ZSkv5YCS5bqPKGZhbHNlKVxyXG4gICAgICAgICAgICBgZnVuY3Rpb24gSnNvblNvcnQoanNvbkFyciwga2V5LCBhc2Mpe1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBqPTEsamw9anNvbkFyci5sZW5ndGg7aiA8IGpsO2orKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBqc29uQXJyW2pdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgID0gTnVtYmVyKHRlbXBba2V5XSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgICAgPSBqLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYXNjPT10cnVlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoaSA+PTAgJiYgTnVtYmVyKGpzb25BcnJbaV1ba2V5XSk+dmFsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnJbaSsxXSA9IGpzb25BcnJbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShpID49MCAmJiBOdW1iZXIoanNvbkFycltpXVtrZXldKTx2YWwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0ganNvbkFycltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLTE7ICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGpzb25BcnJbaSsxXSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ganNvbkFycjtcclxuICAgICAgICAgICAgfWBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5ld190YWJsZV92YWx1ZXMgPSBKc29uU29ydChzdWJfdGFibGVfdmFsdWVzLHN1bV9jb2wsZmFsc2UpXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIm5ld190YWJsZV92YWx1ZXNcIixuZXdfdGFibGVfdmFsdWVzXHJcblxyXG4gICAgICAgICAgICBuZXdfdGFibGVfdmFsdWVzLmZvckVhY2ggKG9iaiwgaW5kZXgpLT5cclxuICAgICAgICAgICAgICAgIGlmIHNvcnRfY29sIGFuZCBvYmpbc3VtX2NvbF1cclxuICAgICAgICAgICAgICAgICAgICBvYmpbc29ydF9jb2xdID0gKGluZGV4KzEpLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwibmV3X3RhYmxlX3ZhbHVlc1wiLG5ld190YWJsZV92YWx1ZXNcclxuXHJcbiAgICAgICAgICAgIGlucy52YWx1ZXNbc3ViX3RhYmxlXSA9IG5ld190YWJsZV92YWx1ZXNcclxuXHJcbiAgICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoaW5zLl9pZCx7XHJcbiAgICAgICAgICAgICAgICAkc2V0OntcclxuICAgICAgICAgICAgICAgICAgICAndmFsdWVzJzppbnMudmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwic3VjY2Vzc1wiXHJcbiAgICAgICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IDIwMCxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6ICforqHnrpfmjpLluo/miJDlip8nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ+WtkOihqOaVsOaNruS4uuepuicpO1xyXG4gICAgY2F0Y2ggZVxyXG4gICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuICAgICAgICAgICAgY29kZTogMjAwLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcnM6IFtlXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4pIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9zdWJfdGFibGVfc29ydFwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgZSwgaW5zLCBuZXdfdGFibGVfdmFsdWVzLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlZjYsIHJlZjcsIHNvcnRfY29sLCBzdWJfdGFibGUsIHN1Yl90YWJsZV92YWx1ZXMsIHN1bV9jb2w7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3lrZDooag9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc3ViVGFibGVcIiwgcmVxICE9IG51bGwgPyAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLnN1YlRhYmxlIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWtkOihqOaAu+WIhuWIlz09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5zdW1Db2xcIiwgcmVxICE9IG51bGwgPyAocmVmMSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEuc3VtQ29sIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWtkOihqOaOkuW6j+WIlz09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5zb3J0Q29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLnNvcnRDb2wgOiB2b2lkIDAgOiB2b2lkIDApO1xuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT095a2Q6KGo5Y2V5YiX6ZyA6KaB6K6h566X55qE5ZKMPT09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhcInJlcT8ucXVlcnk/LnNpbmdsZUNvbHNcIiwgcmVxICE9IG51bGwgPyAocmVmMyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjMuc2luZ2xlQ29scyA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgc3ViX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmNCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjQuc3ViVGFibGUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKCFzdWJfdGFibGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiPT09PT1zdWJfdGFibGU9PT09PT1cIik7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICd3ZWJob29rIOacqumFjee9riBzdWJUYWJsZSDlrZfmrrUnKTtcbiAgICB9XG4gICAgc3VtX2NvbCA9IHJlcSAhPSBudWxsID8gKHJlZjUgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY1LnN1bUNvbCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICBpZiAoIXN1bV9jb2wpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiPT09PT1zdW1fY29sPT09PT09XCIpO1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3VtQ29sIOWtl+autScpO1xuICAgIH1cbiAgICBzb3J0X2NvbCA9IHJlcSAhPSBudWxsID8gKHJlZjYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY2LnNvcnRDb2wgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKCFzb3J0X2NvbCkge1xuICAgICAgY29uc29sZS5sb2coXCI9PT09PXNvcnRfY29sPT09PT09XCIpO1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc29ydENvbCDlrZfmrrUnKTtcbiAgICB9XG4gICAgaW5zID0gcmVxICE9IG51bGwgPyAocmVmNyA9IHJlcS5ib2R5KSAhPSBudWxsID8gcmVmNy5pbnN0YW5jZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICBzdWJfdGFibGVfdmFsdWVzID0gaW5zLnZhbHVlc1tzdWJfdGFibGVdO1xuICAgIGlmICgoc3ViX3RhYmxlX3ZhbHVlcyAhPSBudWxsID8gc3ViX3RhYmxlX3ZhbHVlcy5sZW5ndGggOiB2b2lkIDApID4gMCkge1xuICAgICAgZnVuY3Rpb24gSnNvblNvcnQoanNvbkFyciwga2V5LCBhc2Mpe1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaj0xLGpsPWpzb25BcnIubGVuZ3RoO2ogPCBqbDtqKyspe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IGpzb25BcnJbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgID0gTnVtYmVyKHRlbXBba2V5XSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpICAgID0gai0xO1xuICAgICAgICAgICAgICAgICAgICBpZihhc2M9PXRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoaSA+PTAgJiYgTnVtYmVyKGpzb25BcnJbaV1ba2V5XSk+dmFsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSBqc29uQXJyW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLTE7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGkgPj0wICYmIE51bWJlcihqc29uQXJyW2ldW2tleV0pPHZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0ganNvbkFycltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSB0ZW1wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ganNvbkFycjtcbiAgICAgICAgICAgIH07XG4gICAgICBuZXdfdGFibGVfdmFsdWVzID0gSnNvblNvcnQoc3ViX3RhYmxlX3ZhbHVlcywgc3VtX2NvbCwgZmFsc2UpO1xuICAgICAgY29uc29sZS5sb2coXCJuZXdfdGFibGVfdmFsdWVzXCIsIG5ld190YWJsZV92YWx1ZXMpO1xuICAgICAgbmV3X3RhYmxlX3ZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKG9iaiwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHNvcnRfY29sICYmIG9ialtzdW1fY29sXSkge1xuICAgICAgICAgIHJldHVybiBvYmpbc29ydF9jb2xdID0gKGluZGV4ICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhcIm5ld190YWJsZV92YWx1ZXNcIiwgbmV3X3RhYmxlX3ZhbHVlcyk7XG4gICAgICBpbnMudmFsdWVzW3N1Yl90YWJsZV0gPSBuZXdfdGFibGVfdmFsdWVzO1xuICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZShpbnMuX2lkLCB7XG4gICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAndmFsdWVzJzogaW5zLnZhbHVlc1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKFwic3VjY2Vzc1wiKTtcbiAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICdzdWNjZXNzJzogJ+iuoeeul+aOkuW6j+aIkOWKnydcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ+WtkOihqOaVsOaNruS4uuepuicpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbZV1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJpZiBNZXRlb3IuaXNEZXZlbG9wbWVudFxyXG4gICAgSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL3Rlc3Qvd2ViaG9vaycsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuICAgICAgICB0cnlcclxuXHJcbiAgICAgICAgICAgIGhhc2hEYXRhID0gcmVxLmJvZHlcclxuICAgICAgICAgICAgY29uc29sZS5sb2cgJ2FjdGlvbjogJywgaGFzaERhdGEuYWN0aW9uXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nICdmcm9tX3VzZXI6ICcsIGhhc2hEYXRhLmZyb21fdXNlclxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyAndG9fdXNlcnM6ICcsIGhhc2hEYXRhLnRvX3VzZXJzXHJcblxyXG5cclxuICAgICAgICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAyMDBcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7fVxyXG4gICAgICAgIGNhdGNoIGVcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvciBlLnN0YWNrXHJcbiAgICAgICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcbiAgICAgICAgICAgICAgICBjb2RlOiAyMDBcclxuICAgICAgICAgICAgICAgIGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfSIsImlmIChNZXRlb3IuaXNEZXZlbG9wbWVudCkge1xuICBKc29uUm91dGVzLmFkZCgncG9zdCcsICcvdGVzdC93ZWJob29rJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICB2YXIgZSwgaGFzaERhdGE7XG4gICAgdHJ5IHtcbiAgICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgICBjb25zb2xlLmxvZygnYWN0aW9uOiAnLCBoYXNoRGF0YS5hY3Rpb24pO1xuICAgICAgY29uc29sZS5sb2coJ2Zyb21fdXNlcjogJywgaGFzaERhdGEuZnJvbV91c2VyKTtcbiAgICAgIGNvbnNvbGUubG9nKCd0b191c2VyczogJywgaGFzaERhdGEudG9fdXNlcnMpO1xuICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogMjAwLFxuICAgICAgICBkYXRhOiB7fVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGUgPSBlcnJvcjtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL2Zvcm11bGEvdXNlcnNcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cclxuXHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdHVzZXJJZHMgPSByZXEuYm9keS51c2VySWRzXHJcblx0c3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWRcclxuXHRzcGFjZVVzZXJzID0gW107XHJcblxyXG5cdHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHt1c2VyOiBjdXJyZW50X3VzZXIsIHNwYWNlOiBzcGFjZUlkfSwge2ZpZWxkczoge19pZDogMX19KVxyXG5cdGlmICFzcGFjZV91c2VyXHJcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnZXJyb3JzJzogJ+aXoOadg+mZkCdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdGlmICghdXNlcklkcyB8fCAhc3BhY2VJZClcclxuXHRcdHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRzcGFjZVVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0cyhzcGFjZUlkLCB1c2VySWRzKVxyXG5cclxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRjb2RlOiAyMDAsXHJcblx0XHRkYXRhOiB7XHJcblx0XHRcdCdzcGFjZVVzZXJzJzogc3BhY2VVc2Vyc1xyXG5cdFx0fVxyXG5cdH1cclxuKSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvZm9ybXVsYS91c2Vyc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgc3BhY2VJZCwgc3BhY2VVc2Vycywgc3BhY2VfdXNlciwgdXNlcklkcztcbiAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICB1c2VySWRzID0gcmVxLmJvZHkudXNlcklkcztcbiAgc3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWQ7XG4gIHNwYWNlVXNlcnMgPSBbXTtcbiAgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgIHVzZXI6IGN1cnJlbnRfdXNlcixcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDFcbiAgICB9XG4gIH0pO1xuICBpZiAoIXNwYWNlX3VzZXIpIHtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnZXJyb3JzJzogJ+aXoOadg+mZkCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoIXVzZXJJZHMgfHwgIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzcGFjZVVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0cyhzcGFjZUlkLCB1c2VySWRzKTtcbiAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICBjb2RlOiAyMDAsXG4gICAgZGF0YToge1xuICAgICAgJ3NwYWNlVXNlcnMnOiBzcGFjZVVzZXJzXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS9mb3JtdWxhL29yZ3NcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHRvcmdJZHMgPSByZXEuYm9keS5vcmdJZHNcclxuXHRzcGFjZUlkID0gcmVxLmJvZHkuc3BhY2VJZFxyXG5cclxuXHRzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7dXNlcjogY3VycmVudF91c2VyLCBzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtfaWQ6IDF9fSlcclxuXHRpZiAhc3BhY2VfdXNlclxyXG5cdFx0cmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0J2Vycm9ycyc6ICfml6DmnYPpmZAnXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRpZiAoIW9yZ0lkcyB8fCAhc3BhY2VJZClcclxuXHRcdHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0b3JncyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhT3JnT2JqZWN0cyhvcmdJZHMpXHJcblxyXG5cdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdGNvZGU6IDIwMCxcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0J29yZ3MnOiBvcmdzXHJcblx0XHR9XHJcblx0fSk7XHJcbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL2Zvcm11bGEvb3Jnc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgb3JnSWRzLCBvcmdzLCBzcGFjZUlkLCBzcGFjZV91c2VyO1xuICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gIG9yZ0lkcyA9IHJlcS5ib2R5Lm9yZ0lkcztcbiAgc3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWQ7XG4gIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICB1c2VyOiBjdXJyZW50X3VzZXIsXG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxXG4gICAgfVxuICB9KTtcbiAgaWYgKCFzcGFjZV91c2VyKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfml6DmnYPpmZAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFvcmdJZHMgfHwgIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBvcmdzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFPcmdPYmplY3RzKG9yZ0lkcyk7XG4gIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgY29kZTogMjAwLFxuICAgIGRhdGE6IHtcbiAgICAgICdvcmdzJzogb3Jnc1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIk1ldGVvci5zdGFydHVwICgpLT5cclxuXHRUYWJ1bGFyVGFibGVzLnJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIgPSBuZXcgVGFidWxhci5UYWJsZVxyXG5cdFx0bmFtZTogXCJyZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyXCJcclxuXHRcdGNvbGxlY3Rpb246IGRiLmluc3RhbmNlc1xyXG5cdFx0Y29sdW1uczogW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJfaWRcIixcclxuXHRcdFx0XHR0aXRsZTogJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicmV2ZXJzZVwiIGlkPVwicmV2ZXJzZVwiPicsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZSxcclxuXHRcdFx0XHR3aWR0aDogJzFweCcsXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpbnB1dCA9ICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJyZWxhdGVkLWluc3RhbmNlcy1saXN0LWNoZWNrYm94XCIgbmFtZT1cInJlbGF0ZWRfaW5zdGFuY2VzX2lkc1wiIGlkPVwicmVsYXRlZF9pbnN0YW5jZXNfaWRzXCIgdmFsdWU9XCInICsgZG9jLl9pZCArICdcIidcclxuXHJcblx0XHRcdFx0XHRpZiBUYWJ1bGFyVGFibGVzLnJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIucmVsYXRlZF9pbnN0YW5jZXM/LmluY2x1ZGVzKGRvYy5faWQpXHJcblx0XHRcdFx0XHRcdGlucHV0ICs9IFwiIGNoZWNrZWQgXCJcclxuXHJcblx0XHRcdFx0XHRpbnB1dCArPSBcIj5cIlxyXG5cdFx0XHRcdFx0cmV0dXJuIGlucHV0XHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcIm5hbWVcIixcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlLFxyXG5cdFx0XHRcdHdpZHRoOiAnNDUlJyxcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdHJldHVybiBcIjxkaXYgZGF0YS1pZD0nI3tkb2MuX2lkfSc+XCIgKyBkb2MubmFtZSArIFwiPC9kaXY+XCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiYXBwbGljYW50X25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfbmFtZVwiKSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImZsb3dfbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJjdXJyZW50X3N0ZXBfbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpZiBkb2Muc3RhdGUgPT0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0XHRcdFx0XHRqdWRnZSA9IGRvYy5maW5hbF9kZWNpc2lvbiB8fCBcImFwcHJvdmVkXCJcclxuXHJcblx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZSA9IGRvYy5jdXJyZW50X3N0ZXBfbmFtZSB8fCAnJ1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBcIlwiXCJcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwic3RlcC1jdXJyZW50LXN0YXRlICN7anVkZ2V9XCI+I3tzdGVwX2N1cnJlbnRfbmFtZX08L2Rpdj5cclxuXHRcdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdH1cclxuXHRcdF1cclxuXHJcblx0XHRkb206IFwidHBcIixcclxuXHRcdGxlbmd0aENoYW5nZTogZmFsc2UsXHJcblx0XHRleHRyYUZpZWxkczogW1wic3RhdGVcIiwgXCJmaW5hbF9kZWNpc2lvblwiLCBcInNwYWNlXCIsIFwia2V5d29yZHNcIl0sXHJcblx0XHRwYWdlTGVuZ3RoOiAxMCxcclxuXHRcdGluZm86IGZhbHNlLFxyXG5cdFx0c2VhcmNoaW5nOiB0cnVlLFxyXG5cdFx0cmVzcG9uc2l2ZTpcclxuXHRcdFx0ZGV0YWlsczogZmFsc2VcclxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXHJcblx0XHRjaGFuZ2VTZWxlY3RvcjogKHNlbGVjdG9yLCB1c2VySWQpIC0+XHJcblx0XHRcdHVubGVzcyB1c2VySWRcclxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XHJcblx0XHRcdCPlj6/lhbPogZTnmoTmlofku7blj6/ku6Xot6jlt6XkvZzljLpcclxuXHRcdFx0IyBfLmV4dGVuZCBzZWxlY3Rvciwge1xyXG5cdFx0XHQjIFx0JG9yOiBbe3N1Ym1pdHRlcjogdXNlcklkfSwge2FwcGxpY2FudDogdXNlcklkfSwge2luYm94X3VzZXJzOiB1c2VySWR9LCB7b3V0Ym94X3VzZXJzOiB1c2VySWR9LFxyXG5cdFx0XHQjIFx0XHR7Y2NfdXNlcnM6IHVzZXJJZH1dXHJcblx0XHRcdCMgfVxyXG5cdFx0XHRzcGFjZSA9IHNlbGVjdG9yLnNwYWNlXHJcblx0XHRcdGRlbGV0ZSBzZWxlY3Rvci5zcGFjZVxyXG5cdFx0XHRzZWxlY3Rvci4kb3IgPSBbeyBzcGFjZTogc3BhY2UgfSwge3N1Ym1pdHRlcjogdXNlcklkfSwge2FwcGxpY2FudDogdXNlcklkfSwge2luYm94X3VzZXJzOiB1c2VySWR9LCB7b3V0Ym94X3VzZXJzOiB1c2VySWR9LFxyXG5cdFx0XHRcdFx0e2NjX3VzZXJzOiB1c2VySWR9XVxyXG5cdFx0XHRyZXR1cm4gc2VsZWN0b3IiLCJNZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFRhYnVsYXJUYWJsZXMucmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhciA9IG5ldyBUYWJ1bGFyLlRhYmxlKHtcbiAgICBuYW1lOiBcInJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXJcIixcbiAgICBjb2xsZWN0aW9uOiBkYi5pbnN0YW5jZXMsXG4gICAgY29sdW1uczogW1xuICAgICAge1xuICAgICAgICBkYXRhOiBcIl9pZFwiLFxuICAgICAgICB0aXRsZTogJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicmV2ZXJzZVwiIGlkPVwicmV2ZXJzZVwiPicsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdpZHRoOiAnMXB4JyxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBpbnB1dCwgcmVmO1xuICAgICAgICAgIGlucHV0ID0gJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInJlbGF0ZWQtaW5zdGFuY2VzLWxpc3QtY2hlY2tib3hcIiBuYW1lPVwicmVsYXRlZF9pbnN0YW5jZXNfaWRzXCIgaWQ9XCJyZWxhdGVkX2luc3RhbmNlc19pZHNcIiB2YWx1ZT1cIicgKyBkb2MuX2lkICsgJ1wiJztcbiAgICAgICAgICBpZiAoKHJlZiA9IFRhYnVsYXJUYWJsZXMucmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhci5yZWxhdGVkX2luc3RhbmNlcykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhkb2MuX2lkKSA6IHZvaWQgMCkge1xuICAgICAgICAgICAgaW5wdXQgKz0gXCIgY2hlY2tlZCBcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5wdXQgKz0gXCI+XCI7XG4gICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwibmFtZVwiLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxuICAgICAgICB3aWR0aDogJzQ1JScsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICByZXR1cm4gKFwiPGRpdiBkYXRhLWlkPSdcIiArIGRvYy5faWQgKyBcIic+XCIpICsgZG9jLm5hbWUgKyBcIjwvZGl2PlwiO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiYXBwbGljYW50X25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfYXBwbGljYW50X25hbWVcIiksXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJmbG93X25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfZmxvd1wiKSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImN1cnJlbnRfc3RlcF9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIganVkZ2UsIHN0ZXBfY3VycmVudF9uYW1lO1xuICAgICAgICAgIGlmIChkb2Muc3RhdGUgPT09IFwiY29tcGxldGVkXCIpIHtcbiAgICAgICAgICAgIGp1ZGdlID0gZG9jLmZpbmFsX2RlY2lzaW9uIHx8IFwiYXBwcm92ZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RlcF9jdXJyZW50X25hbWUgPSBkb2MuY3VycmVudF9zdGVwX25hbWUgfHwgJyc7XG4gICAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwic3RlcC1jdXJyZW50LXN0YXRlIFwiICsganVkZ2UgKyBcIlxcXCI+XCIgKyBzdGVwX2N1cnJlbnRfbmFtZSArIFwiPC9kaXY+XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdLFxuICAgIGRvbTogXCJ0cFwiLFxuICAgIGxlbmd0aENoYW5nZTogZmFsc2UsXG4gICAgZXh0cmFGaWVsZHM6IFtcInN0YXRlXCIsIFwiZmluYWxfZGVjaXNpb25cIiwgXCJzcGFjZVwiLCBcImtleXdvcmRzXCJdLFxuICAgIHBhZ2VMZW5ndGg6IDEwLFxuICAgIGluZm86IGZhbHNlLFxuICAgIHNlYXJjaGluZzogdHJ1ZSxcbiAgICByZXNwb25zaXZlOiB7XG4gICAgICBkZXRhaWxzOiBmYWxzZVxuICAgIH0sXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgICBjaGFuZ2VTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IsIHVzZXJJZCkge1xuICAgICAgdmFyIHNwYWNlO1xuICAgICAgaWYgKCF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfaWQ6IC0xXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzcGFjZSA9IHNlbGVjdG9yLnNwYWNlO1xuICAgICAgZGVsZXRlIHNlbGVjdG9yLnNwYWNlO1xuICAgICAgc2VsZWN0b3IuJG9yID0gW1xuICAgICAgICB7XG4gICAgICAgICAgc3BhY2U6IHNwYWNlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBzdWJtaXR0ZXI6IHVzZXJJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXBwbGljYW50OiB1c2VySWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIGluYm94X3VzZXJzOiB1c2VySWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIG91dGJveF91c2VyczogdXNlcklkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjY191c2VyczogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuICB9KTtcbn0pO1xuIiwiU3RlZWRvcy5zdWJzW1wiSW5zdGFuY2VUYWJ1bGFyXCJdID0gbmV3IFN1YnNNYW5hZ2VyKClcclxuXHJcblxyXG5faGFuZGxlTGlzdEZpZWxkcyA9IChmaWVsZHMpIC0+XHJcblx0aW5zX2ZpZWxkcyA9IG5ldyBBcnJheSgpO1xyXG5cclxuXHRmaWVsZHM/LmZvckVhY2ggKGYpLT5cclxuXHRcdGlmIGYudHlwZSA9PSAndGFibGUnXHJcblx0XHRcdGNvbnNvbGUubG9nICdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZSdcclxuXHRcdGVsc2UgaWYgZi50eXBlID09ICdzZWN0aW9uJ1xyXG5cdFx0XHRmPy5maWVsZHM/LmZvckVhY2ggKGYxKS0+XHJcblx0XHRcdFx0aW5zX2ZpZWxkcy5wdXNoIGYxXHJcblx0XHRlbHNlXHJcblx0XHRcdGluc19maWVsZHMucHVzaCBmXHJcblxyXG5cdHJldHVybiBpbnNfZmllbGRzXHJcblxyXG5cclxudXBkYXRlVGFidWxhclRpdGxlID0gKCktPlxyXG5cclxuIyDlpoLmnpxjb2x1bW5z5pyJ5Yqg5YeP77yM6K+35L+u5pS5VGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fdGFibGVDb2x1bW5zIOWHveaVsFxyXG5pbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyID0gKGZsb3dJZCwgZmllbGRzKS0+XHJcblx0b3B0aW9ucyA9IHtcclxuXHRcdG5hbWU6IFwiaW5zdGFuY2VzXCIsXHJcblx0XHRjb2xsZWN0aW9uOiBkYi5pbnN0YW5jZXMsXHJcblx0XHRwdWI6IFwiaW5zdGFuY2VfdGFidWxhclwiLFxyXG5cdFx0b25VbmxvYWQ6ICgpLT5cclxuXHRcdFx0TWV0ZW9yLnNldFRpbWVvdXQoVGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fdGFibGVDb2x1bW5zLCAxNTApXHJcblxyXG5cdFx0ZHJhd0NhbGxiYWNrOiAoc2V0dGluZ3MpLT5cclxuXHRcdFx0ZW1wdHlUZCA9ICQoXCIuZGF0YVRhYmxlc19lbXB0eVwiKVxyXG5cdFx0XHRpZiBlbXB0eVRkLmxlbmd0aFxyXG5cdFx0XHRcdGVtcHR5VGRbMF0uY29sU3BhbiA9IFwiNlwiXHJcblx0XHRcdGlmICFTdGVlZG9zLmlzTW9iaWxlKCkgJiYgIVN0ZWVkb3MuaXNQYWQoKVxyXG5cdFx0XHRcdE1ldGVvci5zZXRUaW1lb3V0KFRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucywgMTUwKVxyXG5cdFx0XHRcdCQoXCIuaW5zdGFuY2UtbGlzdFwiKS5zY3JvbGxUb3AoMCkucmVhZHkgLT5cclxuXHRcdFx0XHRcdCQoXCIuaW5zdGFuY2UtbGlzdFwiKS5wZXJmZWN0U2Nyb2xsYmFyKFwidXBkYXRlXCIpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHQkKFwiLmluc3RhbmNlLWxpc3RcIikuc2Nyb2xsVG9wKDApXHJcblxyXG5cdFx0XHR0aXRsZSA9IHQgXCJwYWdlcl9pbnB1dF9oaW50XCJcclxuXHRcdFx0ZWxsaXBzaXNMaW5rID0gc2V0dGluZ3Mub0luc3RhbmNlLnBhcmVudCgpLmZpbmQoJy5wYWdpbmdfbnVtYmVycyAucGFnaW5hdGlvbiAuZGlzYWJsZWQgYScpXHJcblx0XHRcdGVsbGlwc2lzTGluay5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmNzcyhcImN1cnNvclwiLCBcInBvaW50ZXJcIikuY2xpY2sgLT5cclxuXHRcdFx0XHRpZiAhJCh0aGlzKS5maW5kKCdpbnB1dCcpLmxlbmd0aFxyXG5cdFx0XHRcdFx0aW5wdXQgPSAkKCc8aW5wdXQgY2xhc3M9XCJwYWdpbmF0ZV9pbnB1dCBmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiB0eXBlPVwidGV4dFwiIHN0eWxlPVwiYm9yZGVyOiBub25lOyBwYWRkaW5nOjAgMnB4O1wiLz4nKVxyXG5cdFx0XHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpXHJcblx0XHRcdFx0XHRcdGlucHV0LmNzcyh7XHJcblx0XHRcdFx0XHRcdFx0d2lkdGg6XCI1MnB4XCJcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IFwiMjBweFwiXHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGlucHV0LmNzcyh7XHJcblx0XHRcdFx0XHRcdFx0d2lkdGg6XCI1MnB4XCJcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IFwiMTZweFwiXHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRpbnB1dC5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmF0dHIoXCJwbGFjZWhvbGRlclwiLCB0aXRsZSlcclxuXHRcdFx0XHRcdCQodGhpcykuZW1wdHkoKS5hcHBlbmQgaW5wdXRcclxuXHRcdFx0XHRcdGdvUGFnZSA9IChpbmRleCktPlxyXG5cdFx0XHRcdFx0XHRpZiBpbmRleCA+IDBcclxuXHRcdFx0XHRcdFx0XHRwYWdlcyA9IE1hdGguY2VpbChzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCkgLyBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgpXHJcblx0XHRcdFx0XHRcdFx0aWYgaW5kZXggPiBwYWdlc1xyXG5cdFx0XHRcdFx0XHRcdFx0IyDpobXnoIHotoXlh7rntKLlvJXml7bot7PovazliLDmnIDlkI7kuIDpobVcclxuXHRcdFx0XHRcdFx0XHRcdGluZGV4ID0gcGFnZXNcclxuXHRcdFx0XHRcdFx0XHRpbmRleC0tXHJcblx0XHRcdFx0XHRcdFx0c2V0dGluZ3Mub0luc3RhbmNlLkRhdGFUYWJsZSgpLnBhZ2UoaW5kZXgpLmRyYXcoJ3BhZ2UnKVxyXG5cdFx0XHRcdFx0aW5wdXQuYmx1ciAoZSktPlxyXG5cdFx0XHRcdFx0XHRjdXJyZW50UGFnZSA9ICQodGhpcykudmFsKClcclxuXHRcdFx0XHRcdFx0Z29QYWdlIGN1cnJlbnRQYWdlXHJcblx0XHRcdFx0XHRcdCQodGhpcykucGFyZW50KCkuaHRtbCAnLi4uJ1xyXG5cdFx0XHRcdFx0aW5wdXQua2V5ZG93biAoZSktPlxyXG5cdFx0XHRcdFx0XHRpZihlLmtleUNvZGUudG9TdHJpbmcoKSA9PSBcIjEzXCIpXHJcblx0XHRcdFx0XHRcdFx0Y3VycmVudFBhZ2UgPSAkKHRoaXMpLnZhbCgpXHJcblx0XHRcdFx0XHRcdFx0Z29QYWdlIGN1cnJlbnRQYWdlXHJcblxyXG5cdFx0Y3JlYXRlZFJvdzogKHJvdywgZGF0YSwgZGF0YUluZGV4KSAtPlxyXG5cdFx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0XHRpZiBkYXRhLl9pZCA9PSBGbG93Um91dGVyLmN1cnJlbnQoKS5wYXJhbXMuaW5zdGFuY2VJZFxyXG5cdFx0XHRcdFx0cm93LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic2VsZWN0ZWRcIilcclxuXHRcdGNvbHVtbnM6IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiX2lkXCIsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0bW9kaWZpZWRTdHJpbmcgPSBtb21lbnQoZG9jLm1vZGlmaWVkKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcclxuXHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGRvYy5tb2RpZmllZFxyXG5cdFx0XHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94JyAmJiBkb2Muc3RhdGUgIT0gJ2RyYWZ0J1xyXG5cdFx0XHRcdFx0XHRtb2RpZmllZCA9IGRvYy5zdGFydF9kYXRlIHx8IGRvYy5tb2RpZmllZFxyXG5cclxuXHRcdFx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdvdXRib3gnIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdtb25pdG9yJ1xyXG5cdFx0XHRcdFx0XHRtb2RpZmllZCA9IGRvYy5zdWJtaXRfZGF0ZSB8fCBkb2Muc3VibWl0X2RhdGVcclxuXHJcblx0XHRcdFx0XHRtb2RpZmllZEZyb21Ob3cgPSBTdGVlZG9zLm1vbWVudFJlYWN0aXZlRnJvbU5vdyhtb2RpZmllZCk7XHJcblx0XHRcdFx0XHRmbG93X25hbWUgPSBkb2MuZmxvd19uYW1lXHJcblx0XHRcdFx0XHRjY192aWV3ID0gXCJcIjtcclxuXHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIlwiO1xyXG5cdFx0XHRcdFx0IyDlvZPliY3nlKjmiLflnKhjYyB1c2Vy5Lit77yM5L2G5piv5LiN5ZyoaW5ib3ggdXNlcnPml7bmiY3mmL7npLon5Lyg6ZiFJ+aWh+Wtl1xyXG5cdFx0XHRcdFx0aWYgZG9jLmlzX2NjICYmICFkb2MuaW5ib3hfdXNlcnM/LmluY2x1ZGVzKE1ldGVvci51c2VySWQoKSkgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xyXG5cdFx0XHRcdFx0XHRjY192aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKFwiaW5zdGFuY2VfY2NfdGl0bGVcIikgKyBcIik8L2xhYmVsPiBcIlxyXG5cdFx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCI8ZGl2IGNsYXNzPSdmbG93LW5hbWUnPiN7Zmxvd19uYW1lfTxzcGFuPigje2RvYy5jdXJyZW50X3N0ZXBfbmFtZX0pPC9zcGFuPjwvZGl2PlwiXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9ICdkcmFmdCcgJiYgZG9jLmN1cnJlbnRfc3RlcF9uYW1lXHJcblx0XHRcdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz4je2Zsb3dfbmFtZX08c3Bhbj4oI3tkb2MuY3VycmVudF9zdGVwX25hbWV9KTwvc3Bhbj48L2Rpdj5cIlxyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz4je2Zsb3dfbmFtZX08L2Rpdj5cIlxyXG5cclxuXHRcdFx0XHRcdGFnZW50X3ZpZXcgPSBcIlwiO1xyXG5cdFx0XHRcdFx0aWYgZG9jLmFnZW50X3VzZXJfbmFtZSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXHJcblx0XHRcdFx0XHRcdGFnZW50X3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHt1c2VyTmFtZTogZG9jLmFnZW50X3VzZXJfbmFtZX0pICsgXCIpPC9sYWJlbD5cIlxyXG5cclxuXHRcdFx0XHRcdHVucmVhZCA9ICcnXHJcblxyXG5cdFx0XHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94JyAmJiBkb2MuaXNfcmVhZCA9PSBmYWxzZVxyXG5cdFx0XHRcdFx0XHR1bnJlYWQgPSAnPGkgY2xhc3M9XCJpb24gaW9uLXJlY29yZCB1bnJlYWRcIj48L2k+J1xyXG5cdFx0XHRcdFx0ZWxzZSBpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnbW9uaXRvcicgJiYgZG9jLmlzX2hpZGRlbiA9PSB0cnVlXHJcblx0XHRcdFx0XHRcdHVucmVhZCA9ICc8aSBjbGFzcz1cImZhIGZhLWxvY2tcIj48L2k+J1xyXG5cclxuXHRcdFx0XHRcdHByaW9yaXR5SWNvbiA9IFwiXCJcclxuXHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJcIlxyXG5cdFx0XHRcdFx0cHJpb3JpdHlWYWx1ZSA9IGRvYy52YWx1ZXM/LnByaW9yaXR5XHJcblx0XHRcdFx0XHRzd2l0Y2ggcHJpb3JpdHlWYWx1ZVxyXG5cdFx0XHRcdFx0XHR3aGVuIFwi54m55oClXCJcclxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwiZGFuZ2VyXCJcclxuXHRcdFx0XHRcdFx0d2hlbiBcIue0p+aApVwiXHJcblx0XHRcdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIndhcm5pbmdcIlxyXG5cdFx0XHRcdFx0XHR3aGVuIFwi5Yqe5paHXCJcclxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwibXV0ZWRcIlxyXG5cdFx0XHRcdFx0aWYgcHJpb3JpdHlJY29uQ2xhc3NcclxuXHRcdFx0XHRcdFx0aW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyA9IFwiY29sb3ItcHJpb3JpdHkgY29sb3ItcHJpb3JpdHktI3twcmlvcml0eUljb25DbGFzc31cIlxyXG5cclxuXHRcdFx0XHRcdHJldHVybiBcIlwiXCJcclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLXJlYWQtYmFyJz4je3VucmVhZH08L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLW5hbWUgI3tpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzfSc+I3tkb2MubmFtZX0je2NjX3ZpZXd9I3thZ2VudF92aWV3fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3Bhbj4je2RvYy5hcHBsaWNhbnRfbmFtZX08L3NwYW4+XHJcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLWRldGFpbCc+I3tzdGVwX2N1cnJlbnRfbmFtZV92aWV3fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz0naW5zdGFuY2UtbW9kaWZpZWQnIHRpdGxlPScje21vZGlmaWVkU3RyaW5nfSc+I3ttb2RpZmllZEZyb21Ob3d9PC9zcGFuPlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiKSxcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwibmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX25hbWVcIiksXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRjY192aWV3ID0gXCJcIjtcclxuXHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIlwiO1xyXG5cdFx0XHRcdFx0IyDlvZPliY3nlKjmiLflnKhjYyB1c2Vy5Lit77yM5L2G5piv5LiN5ZyoaW5ib3ggdXNlcnPml7bmiY3mmL7npLon5Lyg6ZiFJ+aWh+Wtl1xyXG5cdFx0XHRcdFx0aWYgZG9jLmlzX2NjICYmICFkb2MuaW5ib3hfdXNlcnM/LmluY2x1ZGVzKE1ldGVvci51c2VySWQoKSkgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xyXG5cdFx0XHRcdFx0XHRjY192aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKFwiaW5zdGFuY2VfY2NfdGl0bGVcIikgKyBcIik8L2xhYmVsPiBcIlxyXG5cclxuXHRcdFx0XHRcdGFnZW50X3ZpZXcgPSBcIlwiO1xyXG5cdFx0XHRcdFx0aWYgZG9jLmFnZW50X3VzZXJfbmFtZVxyXG5cdFx0XHRcdFx0XHRhZ2VudF92aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKCdwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXNfZGVzY3JpcHRpb24nLCB7dXNlck5hbWU6IGRvYy5hZ2VudF91c2VyX25hbWV9KSArIFwiKTwvbGFiZWw+XCJcclxuXHJcblx0XHRcdFx0XHR1bnJlYWQgPSAnJ1xyXG5cclxuXHRcdFx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCcgJiYgZG9jLmlzX3JlYWQgPT0gZmFsc2VcclxuXHRcdFx0XHRcdFx0dW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1yZWNvcmQgdW5yZWFkXCI+PC9pPidcclxuXHRcdFx0XHRcdGVsc2UgaWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ21vbml0b3InICYmIGRvYy5pc19oaWRkZW4gPT0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHR1bnJlYWQgPSAnPGkgY2xhc3M9XCJmYSBmYS1sb2NrXCI+PC9pPidcclxuXHJcblx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwiXCJcclxuXHRcdFx0XHRcdHByaW9yaXR5VmFsdWUgPSBkb2MudmFsdWVzPy5wcmlvcml0eVxyXG5cdFx0XHRcdFx0c3dpdGNoIHByaW9yaXR5VmFsdWVcclxuXHRcdFx0XHRcdFx0d2hlbiBcIueJueaApVwiXHJcblx0XHRcdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcImRhbmdlclwiXHJcblx0XHRcdFx0XHRcdHdoZW4gXCLntKfmgKVcIlxyXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJ3YXJuaW5nXCJcclxuXHRcdFx0XHRcdFx0d2hlbiBcIuWKnuaWh1wiXHJcblx0XHRcdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIm11dGVkXCJcclxuXHRcdFx0XHRcdGlmIHByaW9yaXR5SWNvbkNsYXNzXHJcblx0XHRcdFx0XHRcdGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgPSBcImNvbG9yLXByaW9yaXR5IGNvbG9yLXByaW9yaXR5LSN7cHJpb3JpdHlJY29uQ2xhc3N9XCJcclxuXHRcdFx0XHRcdHJldHVybiBcIlwiXCJcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS1yZWFkLWJhcic+I3t1bnJlYWR9PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtbmFtZSAje2luc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3N9Jz4je2RvYy5uYW1lfSN7Y2Nfdmlld30je2FnZW50X3ZpZXd9PC9kaXY+XHJcblx0XHRcdFx0XHRcdFwiXCJcIlxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiYXBwbGljYW50X25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfbmFtZVwiKSxcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcInN1Ym1pdF9kYXRlXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfc3VibWl0X2RhdGVcIiksXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpZiBkb2Muc3VibWl0X2RhdGVcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1vbWVudChkb2Muc3VibWl0X2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xyXG5cdFx0XHRcdCxcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiZmxvd19uYW1lXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfZmxvd1wiKSxcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImN1cnJlbnRfc3RlcF9uYW1lXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfc3RlcF9jdXJyZW50X25hbWVcIiksXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRpZiBkb2Muc3RhdGUgPT0gXCJjb21wbGV0ZWRcIlxyXG5cdFx0XHRcdFx0XHRqdWRnZSA9IGRvYy5maW5hbF9kZWNpc2lvbiB8fCBcImFwcHJvdmVkXCJcclxuXHJcblx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZSA9IGRvYy5jdXJyZW50X3N0ZXBfbmFtZSB8fCAnJ1xyXG5cclxuXHRcdFx0XHRcdGNjX3RhZyA9ICcnXHJcblxyXG5cdFx0XHRcdFx0aWYgZG9jLmNjX2NvdW50ID4gMFxyXG5cdFx0XHRcdFx0XHRjY190YWcgPSBUQVBpMThuLl9fKCdjY190YWcnKVxyXG5cclxuXHRcdFx0XHRcdHJldHVybiBcIlwiXCJcclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInN0ZXAtY3VycmVudC1zdGF0ZSAje2p1ZGdlfVwiPiN7c3RlcF9jdXJyZW50X25hbWV9I3tjY190YWd9PC9kaXY+XHJcblx0XHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcIm1vZGlmaWVkXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfbW9kaWZpZWRcIiksXHJcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblx0XHRcdFx0XHRyZXR1cm4gbW9tZW50KGRvYy5tb2RpZmllZCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XHJcblx0XHRcdFx0LFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogdHJ1ZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJzdGFydF9kYXRlXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfc3RhcnRfZGF0ZVwiKSxcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdGlmIGRvYy5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRcdHJldHVybiBtb21lbnQoZG9jLnN0YXJ0X2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xyXG5cdFx0XHRcdCxcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRvcmRlcmFibGU6IHRydWVcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwibXlfZmluaXNoX2RhdGVcIixcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdGlmIGRvYy5teV9maW5pc2hfZGF0ZVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbW9tZW50KGRvYy5teV9maW5pc2hfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XHJcblx0XHRcdFx0LFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogdHJ1ZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJtb2RpZmllZFwiLFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImtleXdvcmRzXCIsXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiaXNfYXJjaGl2ZWRcIixcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdGlmIGRvYz8udmFsdWVzPy5yZWNvcmRfbmVlZCAmJiBkb2MudmFsdWVzLnJlY29yZF9uZWVkID09IFwidHJ1ZVwiXHJcblx0XHRcdFx0XHRcdGlmIGRvYz8uaXNfYXJjaGl2ZWRcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdChcIllFU1wiKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdChcIk5PXCIpXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2VcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXHJcblx0XHRcdH1cclxuXHRcdF0sXHJcblx0XHRkb206IGRvIC0+XHJcblx0XHRcdCMg5omL5py65LiK5LiN5pi+56S65LiA6aG15pi+56S65aSa5bCR5p2h6K6w5b2V6YCJ6aG5XHJcblx0XHRcdGlmIFN0ZWVkb3MuaXNNb2JpbGUoKVxyXG5cdFx0XHRcdCd0cCdcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdCd0cGwnXHJcblx0XHRvcmRlcjogW1s0LCBcImRlc2NcIl1dLFxyXG5cdFx0ZXh0cmFGaWVsZHM6IFtcImZvcm1cIiwgXCJmbG93XCIsIFwiaW5ib3hfdXNlcnNcIiwgXCJzdGF0ZVwiLCBcInNwYWNlXCIsIFwiYXBwbGljYW50XCIsIFwiZm9ybV92ZXJzaW9uXCIsXHJcblx0XHRcdFwiZmxvd192ZXJzaW9uXCIsIFwiaXNfY2NcIiwgXCJjY19jb3VudFwiLCBcImlzX3JlYWRcIiwgXCJjdXJyZW50X3N0ZXBfbmFtZVwiLCBcInZhbHVlc1wiLCBcImtleXdvcmRzXCIsIFwiZmluYWxfZGVjaXNpb25cIiwgXCJmbG93X25hbWVcIiwgXCJpc19oaWRkZW5cIiwgXCJhZ2VudF91c2VyX25hbWVcIl0sXHJcblx0XHRsZW5ndGhDaGFuZ2U6IHRydWUsXHJcblx0XHRsZW5ndGhNZW51OiBbMTAsMTUsMjAsMjUsNTAsMTAwXSxcclxuXHRcdHBhZ2VMZW5ndGg6IDEwLFxyXG5cdFx0aW5mbzogZmFsc2UsXHJcblx0XHRzZWFyY2hpbmc6IHRydWUsXHJcblx0XHRyZXNwb25zaXZlOlxyXG5cdFx0XHRkZXRhaWxzOiBmYWxzZVxyXG5cdFx0YXV0b1dpZHRoOiBmYWxzZSxcclxuXHRcdGNoYW5nZVNlbGVjdG9yOiAoc2VsZWN0b3IsIHVzZXJJZCkgLT5cclxuXHRcdFx0dW5sZXNzIHVzZXJJZFxyXG5cdFx0XHRcdHJldHVybiB7X2lkOiAtMX1cclxuXHRcdFx0c3BhY2UgPSBzZWxlY3Rvci5zcGFjZVxyXG5cdFx0XHR1bmxlc3Mgc3BhY2VcclxuXHRcdFx0XHRpZiBzZWxlY3Rvcj8uJGFuZD8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0c3BhY2UgPSBzZWxlY3Rvci4kYW5kLmdldFByb3BlcnR5KCdzcGFjZScpWzBdXHJcblx0XHRcdHVubGVzcyBzcGFjZVxyXG5cdFx0XHRcdHJldHVybiB7X2lkOiAtMX1cclxuXHRcdFx0c3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe3VzZXI6IHVzZXJJZCwgc3BhY2U6IHNwYWNlfSwge2ZpZWxkczoge19pZDogMX19KVxyXG5cdFx0XHR1bmxlc3Mgc3BhY2VfdXNlclxyXG5cdFx0XHRcdHJldHVybiB7X2lkOiAtMX1cclxuXHRcdFx0cmV0dXJuIHNlbGVjdG9yXHJcblx0XHRwYWdpbmdUeXBlOiBcIm51bWJlcnNcIlxyXG5cclxuXHR9XHJcblxyXG5cdGlmIGZsb3dJZFxyXG5cdFx0a2V5ID0gXCJpbnN0YW5jZUZsb3dcIiArIGZsb3dJZFxyXG5cclxuXHRcdG9wdGlvbnMubmFtZSA9IGtleVxyXG5cclxuXHRcdFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzLmZpZWxkcyA9IGZpZWxkc1xyXG5cclxuXHRcdGluc19maWVsZHMgPSBfaGFuZGxlTGlzdEZpZWxkcyBUYWJ1bGFyVGFibGVzLmluc3RhbmNlcy5maWVsZHNcclxuXHJcblx0XHRpbnNfZmllbGRzLmZvckVhY2ggKGYpLT5cclxuXHRcdFx0aWYgZi50eXBlICE9ICd0YWJsZScgJiYgZi5pc19saXN0X2Rpc3BsYXlcclxuXHRcdFx0XHRvcHRpb25zLmNvbHVtbnMucHVzaFxyXG5cdFx0XHRcdFx0ZGF0YTogKGYubmFtZSB8fCBmLmNvZGUpLFxyXG5cdFx0XHRcdFx0dGl0bGU6IHQoZi5uYW1lIHx8IGYuY29kZSksXHJcblx0XHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcclxuXHRcdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cclxuXHRcdFx0XHRcdFx0dmFsdWVzID0gZG9jLnZhbHVlcyB8fCB7fVxyXG5cclxuXHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZXNbZi5jb2RlXVxyXG5cclxuXHRcdFx0XHRcdFx0c3dpdGNoIGYudHlwZVxyXG5cdFx0XHRcdFx0XHRcdHdoZW4gJ3VzZXInXHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlPy5uYW1lXHJcblx0XHRcdFx0XHRcdFx0d2hlbiAnZ3JvdXAnXHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlPy5mdWxsbmFtZVxyXG5cdFx0XHRcdFx0XHRcdHdoZW4gJ2RhdGUnXHJcblx0XHRcdFx0XHRcdFx0XHRpZiB2YWx1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IG1vbWVudCh2YWx1ZSkuZm9ybWF0KCdZWVlZLU1NLUREJylcclxuXHRcdFx0XHRcdFx0XHR3aGVuICdkYXRlVGltZSdcclxuXHRcdFx0XHRcdFx0XHRcdGlmIHZhbHVlXHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKVxyXG5cdFx0XHRcdFx0XHRcdHdoZW4gJ2NoZWNrYm94J1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgdmFsdWUgPT0gdHJ1ZSB8fCB2YWx1ZSA9PSAndHJ1ZSdcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF95ZXNcIik7XHJcblx0XHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfbm9cIik7XHJcblx0XHRcdFx0XHRcdFx0d2hlbiAnb2RhdGEnXHJcblx0XHRcdFx0XHRcdFx0XHRpZiB2YWx1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlWydAbGFiZWwnXVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXHJcblxyXG5cclxuXHRyZXR1cm4gb3B0aW9ucztcclxuXHJcbk1ldGVvci5zdGFydHVwICgpLT5cclxuXHRUYWJ1bGFyVGFibGVzLmluc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlIGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoKVxyXG5cclxuXHJcbkdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zID0gKGJveCwgZmxvd0lkLCBmaWVsZHMpLT5cclxuXHRrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgYm94ICsgZmxvd0lkXHJcblx0aWYgYm94ID09IFwiaW5ib3hcIlxyXG5cdFx0b3B0aW9ucyA9IF9nZXRfaW5ib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyhmbG93SWQsIGZpZWxkcylcclxuXHRlbHNlIGlmIGJveCA9PSBcIm91dGJveFwiXHJcblx0XHRvcHRpb25zID0gX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyhmbG93SWQsIGZpZWxkcylcclxuXHRlbHNlXHJcblx0XHRvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcylcclxuXHRcdGlmICFmbG93SWRcclxuXHRcdFx0b3B0aW9ucy5uYW1lID0gXCJpbmJveF9pbnN0YW5jZXNcIlxyXG5cdGlmIGZsb3dJZFxyXG5cdFx0b3B0aW9ucy5uYW1lID0ga2V5XHJcblx0cmV0dXJuIG9wdGlvbnNcclxuXHJcblxyXG5cclxuX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zID0gKGZsb3dJZCwgZmllbGRzKS0+XHJcblx0b3B0aW9ucyA9IGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoZmxvd0lkLCBmaWVsZHMpXHJcblxyXG5cdGlmICFmbG93SWRcclxuXHRcdG9wdGlvbnMubmFtZSA9IFwiaW5ib3hfaW5zdGFuY2VzXCJcclxuXHJcblx0b3B0aW9ucy5vcmRlciA9IFtbOCwgXCJkZXNjXCJdXVxyXG5cdG9wdGlvbnMuZmlsdGVyZWRSZWNvcmRJZHMgPSAodGFibGUsIHNlbGVjdG9yLCBzb3J0LCBza2lwLCBsaW1pdCwgb2xkX2ZpbHRlcmVkUmVjb3JkSWRzLCB1c2VySWQsIGZpbmRPcHRpb25zKS0+XHJcblx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uID0gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0JG1hdGNoOiBzZWxlY3RvclxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHByb2plY3Q6IHtcclxuXHRcdFx0XHRcdG5hbWU6IDEsXHJcblx0XHRcdFx0XHRcIl9hcHByb3ZlXCI6ICckdHJhY2VzLmFwcHJvdmVzJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCRtYXRjaDoge1xyXG5cdFx0XHRcdFx0J19hcHByb3ZlLmlzX2ZpbmlzaGVkJzogZmFsc2VcclxuXHRcdFx0XHRcdCdfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkLFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XVxyXG5cdFx0aWYgc29ydCBhbmQgc29ydC5sZW5ndGggPiAwXHJcblx0XHRcdHMxID0gc29ydFswXVxyXG5cdFx0XHRzMV8wID0gczFbMF1cclxuXHRcdFx0czFfMSA9IHMxWzFdXHJcblx0XHRcdGlmIHMxXzAgPT0gJ3N0YXJ0X2RhdGUnXHJcblxyXG5cdFx0XHRcdGZpbmRPcHRpb25zLnNvcnQgPSBbWydtb2RpZmllZCcsIHMxXzFdXVxyXG5cclxuXHRcdFx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2ggJGdyb3VwOiB7X2lkOiBcIiRfaWRcIiwgXCJhcHByb3ZlX3N0YXJ0X2RhdGVcIjogeyRmaXJzdDogXCIkX2FwcHJvdmUuc3RhcnRfZGF0ZVwifX1cclxuXHJcblx0XHRcdFx0YWdfc29ydCA9ICdhcHByb3ZlX3N0YXJ0X2RhdGUnOiBpZiBzMV8xID09ICdhc2MnIHRoZW4gMSBlbHNlIC0xXHJcblxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc29ydDogYWdfc29ydFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc2tpcDogc2tpcFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkbGltaXQ6IGxpbWl0XHJcblx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRcdFx0XHRhZ2dyZWdhdGUgPSAodGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikgLT5cclxuXHRcdFx0XHRcdHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5IChlcnIsIGRhdGEpIC0+XHJcblx0XHRcdFx0XHRcdGlmIGVyclxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpXHJcblx0XHRcdFx0XHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxyXG5cdFx0XHRcdFx0XHRcdGZpbHRlcmVkUmVjb3JkSWRzLnB1c2ggZG9jLl9pZFxyXG5cdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRpZiBjYlxyXG5cdFx0XHRcdFx0XHRcdGNiKClcclxuXHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhhZ2dyZWdhdGUpXHJcblxyXG5cdFx0XHRcdGFzeW5jX2FnZ3JlZ2F0ZSB0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHNcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkUmVjb3JkSWRzLnVuaXEoKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkc1xyXG5cclxuXHRyZXR1cm4gb3B0aW9uc1xyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRhYnVsYXJUYWJsZXMuaW5ib3hfaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUgR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoXCJpbmJveFwiKVxyXG5cclxuXHJcbl9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMgPSAoZmxvd0lkLCBmaWVsZHMpLT5cclxuXHRvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcylcclxuXHJcblx0aWYgIWZsb3dJZFxyXG5cdFx0b3B0aW9ucy5uYW1lID0gXCJvdXRib3hfaW5zdGFuY2VzXCJcclxuXHJcblx0b3B0aW9ucy5vcmRlciA9IFtbOSwgXCJkZXNjXCJdXVxyXG5cdG9wdGlvbnMuZmlsdGVyZWRSZWNvcmRJZHMgPSAodGFibGUsIHNlbGVjdG9yLCBzb3J0LCBza2lwLCBsaW1pdCwgb2xkX2ZpbHRlcmVkUmVjb3JkSWRzLCB1c2VySWQsIGZpbmRPcHRpb25zKS0+XHJcblx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uID0gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0JG1hdGNoOiBzZWxlY3RvclxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHByb2plY3Q6IHtcclxuXHRcdFx0XHRcdG5hbWU6IDEsXHJcblx0XHRcdFx0XHRcIl9hcHByb3ZlXCI6ICckdHJhY2VzLmFwcHJvdmVzJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCRtYXRjaDoge1xyXG5cdFx0XHRcdFx0J19hcHByb3ZlLmlzX2ZpbmlzaGVkJzogdHJ1ZVxyXG5cdFx0XHRcdFx0JG9yOiBbeydfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkfSx7J19hcHByb3ZlLnVzZXInOiB1c2VySWR9XVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XVxyXG5cdFx0aWYgc29ydCBhbmQgc29ydC5sZW5ndGggPiAwXHJcblx0XHRcdHMxID0gc29ydFswXVxyXG5cdFx0XHRzMV8wID0gczFbMF1cclxuXHRcdFx0czFfMSA9IHMxWzFdXHJcblx0XHRcdGlmIHMxXzAgPT0gJ215X2ZpbmlzaF9kYXRlJ1xyXG5cclxuXHRcdFx0XHRmaW5kT3B0aW9ucy5zb3J0ID0gW1snbW9kaWZpZWQnLCBzMV8xXV1cclxuXHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRncm91cDoge19pZDogXCIkX2lkXCIsIFwiYXBwcm92ZV9maW5pc2hfZGF0ZVwiOiB7JGxhc3Q6IFwiJF9hcHByb3ZlLmZpbmlzaF9kYXRlXCJ9fVxyXG5cclxuXHRcdFx0XHRhZ19zb3J0ID0gJ2FwcHJvdmVfZmluaXNoX2RhdGUnOiBpZiBzMV8xID09ICdhc2MnIHRoZW4gMSBlbHNlIC0xXHJcblxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc29ydDogYWdfc29ydFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc2tpcDogc2tpcFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkbGltaXQ6IGxpbWl0XHJcblx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRcdFx0XHRhZ2dyZWdhdGUgPSAodGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikgLT5cclxuXHRcdFx0XHRcdHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5IChlcnIsIGRhdGEpIC0+XHJcblx0XHRcdFx0XHRcdGlmIGVyclxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpXHJcblx0XHRcdFx0XHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxyXG5cdFx0XHRcdFx0XHRcdGZpbHRlcmVkUmVjb3JkSWRzLnB1c2ggZG9jLl9pZFxyXG5cdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRpZiBjYlxyXG5cdFx0XHRcdFx0XHRcdGNiKClcclxuXHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhhZ2dyZWdhdGUpXHJcblxyXG5cdFx0XHRcdGFzeW5jX2FnZ3JlZ2F0ZSB0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHNcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkUmVjb3JkSWRzLnVuaXEoKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkc1xyXG5cclxuXHRyZXR1cm4gb3B0aW9uc1xyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRhYnVsYXJUYWJsZXMub3V0Ym94X2luc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKFwib3V0Ym94XCIpXHJcblxyXG5pZiBNZXRlb3IuaXNDbGllbnRcclxuXHRUYWJ1bGFyVGFibGVzLmZsb3dJbnN0YW5jZXMgPSBuZXcgUmVhY3RpdmVWYXIoKVxyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRyYWNrZXIuYXV0b3J1biAoYykgLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudCAmJiAhU3RlZWRvcy5pc01vYmlsZSgpXHJcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9ICdkcmFmdCdcclxuXHRcdFx0XHRNZXRlb3IuY2FsbCBcIm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyXCIsIFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgKGVycm9yLCByZXN1bHQpIC0+XHJcblx0XHRcdFx0XHRuZXdJbnN0YW5jZXNMaXN0VGFidWxhciBTZXNzaW9uLmdldChcImJveFwiKSwgU2Vzc2lvbi5nZXQoXCJmbG93SWRcIiksIHJlc3VsdFxyXG5cdFx0XHRcdFx0VGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fY2hhbmdlT3JkZXIoKVxyXG5cclxuXHJcbm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyID0gKGJveCwgZmxvd0lkLCBmaWVsZHMpLT5cclxuXHRpZiAhZmllbGRzXHJcblx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBmbG93SWR9LCB7ZmllbGRzOiB7Zm9ybTogMX19KVxyXG5cdFx0ZmllbGRzID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdz8uZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5maWVsZHMnOiAxIH0gfSk/LmN1cnJlbnQ/LmZpZWxkc1xyXG5cclxuXHRmaWVsZHMgPSBfaGFuZGxlTGlzdEZpZWxkcyBmaWVsZHNcclxuXHJcblx0aWYgZmllbGRzPy5maWx0ZXJQcm9wZXJ0eShcImlzX2xpc3RfZGlzcGxheVwiLCB0cnVlKT8ubGVuZ3RoID4gMFxyXG5cdFx0a2V5ID0gXCJpbnN0YW5jZUZsb3dcIiArIGJveCArIGZsb3dJZFxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdFRhYnVsYXJUYWJsZXMuZmxvd0luc3RhbmNlcy5zZXQobmV3IFRhYnVsYXIuVGFibGUgR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoYm94LCBmbG93SWQsIGZpZWxkcykpXHJcblx0XHRlbHNlXHJcblx0XHRcdG5ldyBUYWJ1bGFyLlRhYmxlIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKGJveCwgZmxvd0lkLCBmaWVsZHMpXHJcblx0XHRjb25zb2xlLmxvZyBcIm5ldyBUYWJ1bGFyVGFibGVzIFwiLCBrZXlcclxuXHJcbmlmIE1ldGVvci5pc1NlcnZlclxyXG5cdE1ldGVvci5tZXRob2RzXHJcblx0XHRuZXdJbnN0YW5jZXNMaXN0VGFidWxhcjogKGJveCwgZmxvd0lkKS0+XHJcblx0XHRcdG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyKGJveCwgZmxvd0lkKVxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogZmxvd0lkfSwge2ZpZWxkczoge2Zvcm06IDF9fSlcclxuXHRcdFx0ZmllbGRzID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdz8uZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5maWVsZHMnOiAxIH0gfSk/LmN1cnJlbnQ/LmZpZWxkc1xyXG5cdFx0XHRyZXR1cm4gZmllbGRzXHJcblxyXG5cclxuIiwidmFyIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zLCBfZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMsIF9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMsIF9oYW5kbGVMaXN0RmllbGRzLCBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyLCBuZXdJbnN0YW5jZXNMaXN0VGFidWxhciwgdXBkYXRlVGFidWxhclRpdGxlO1xuXG5TdGVlZG9zLnN1YnNbXCJJbnN0YW5jZVRhYnVsYXJcIl0gPSBuZXcgU3Vic01hbmFnZXIoKTtcblxuX2hhbmRsZUxpc3RGaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMpIHtcbiAgdmFyIGluc19maWVsZHM7XG4gIGluc19maWVsZHMgPSBuZXcgQXJyYXkoKTtcbiAgaWYgKGZpZWxkcyAhPSBudWxsKSB7XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIGlmIChmLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZScpO1xuICAgICAgfSBlbHNlIGlmIChmLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgICByZXR1cm4gZiAhPSBudWxsID8gKHJlZiA9IGYuZmllbGRzKSAhPSBudWxsID8gcmVmLmZvckVhY2goZnVuY3Rpb24oZjEpIHtcbiAgICAgICAgICByZXR1cm4gaW5zX2ZpZWxkcy5wdXNoKGYxKTtcbiAgICAgICAgfSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5zX2ZpZWxkcy5wdXNoKGYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBpbnNfZmllbGRzO1xufTtcblxudXBkYXRlVGFidWxhclRpdGxlID0gZnVuY3Rpb24oKSB7fTtcblxuaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhciA9IGZ1bmN0aW9uKGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBpbnNfZmllbGRzLCBrZXksIG9wdGlvbnM7XG4gIG9wdGlvbnMgPSB7XG4gICAgbmFtZTogXCJpbnN0YW5jZXNcIixcbiAgICBjb2xsZWN0aW9uOiBkYi5pbnN0YW5jZXMsXG4gICAgcHViOiBcImluc3RhbmNlX3RhYnVsYXJcIixcbiAgICBvblVubG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWV0ZW9yLnNldFRpbWVvdXQoVGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fdGFibGVDb2x1bW5zLCAxNTApO1xuICAgIH0sXG4gICAgZHJhd0NhbGxiYWNrOiBmdW5jdGlvbihzZXR0aW5ncykge1xuICAgICAgdmFyIGVsbGlwc2lzTGluaywgZW1wdHlUZCwgdGl0bGU7XG4gICAgICBlbXB0eVRkID0gJChcIi5kYXRhVGFibGVzX2VtcHR5XCIpO1xuICAgICAgaWYgKGVtcHR5VGQubGVuZ3RoKSB7XG4gICAgICAgIGVtcHR5VGRbMF0uY29sU3BhbiA9IFwiNlwiO1xuICAgICAgfVxuICAgICAgaWYgKCFTdGVlZG9zLmlzTW9iaWxlKCkgJiYgIVN0ZWVkb3MuaXNQYWQoKSkge1xuICAgICAgICBNZXRlb3Iuc2V0VGltZW91dChUZW1wbGF0ZS5pbnN0YW5jZV9saXN0Ll90YWJsZUNvbHVtbnMsIDE1MCk7XG4gICAgICAgICQoXCIuaW5zdGFuY2UtbGlzdFwiKS5zY3JvbGxUb3AoMCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICQoXCIuaW5zdGFuY2UtbGlzdFwiKS5wZXJmZWN0U2Nyb2xsYmFyKFwidXBkYXRlXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIuaW5zdGFuY2UtbGlzdFwiKS5zY3JvbGxUb3AoMCk7XG4gICAgICB9XG4gICAgICB0aXRsZSA9IHQoXCJwYWdlcl9pbnB1dF9oaW50XCIpO1xuICAgICAgZWxsaXBzaXNMaW5rID0gc2V0dGluZ3Mub0luc3RhbmNlLnBhcmVudCgpLmZpbmQoJy5wYWdpbmdfbnVtYmVycyAucGFnaW5hdGlvbiAuZGlzYWJsZWQgYScpO1xuICAgICAgcmV0dXJuIGVsbGlwc2lzTGluay5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmNzcyhcImN1cnNvclwiLCBcInBvaW50ZXJcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBnb1BhZ2UsIGlucHV0O1xuICAgICAgICBpZiAoISQodGhpcykuZmluZCgnaW5wdXQnKS5sZW5ndGgpIHtcbiAgICAgICAgICBpbnB1dCA9ICQoJzxpbnB1dCBjbGFzcz1cInBhZ2luYXRlX2lucHV0IGZvcm0tY29udHJvbCBpbnB1dC1zbVwiIHR5cGU9XCJ0ZXh0XCIgc3R5bGU9XCJib3JkZXI6IG5vbmU7IHBhZGRpbmc6MCAycHg7XCIvPicpO1xuICAgICAgICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgICAgIGlucHV0LmNzcyh7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjUycHhcIixcbiAgICAgICAgICAgICAgaGVpZ2h0OiBcIjIwcHhcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0LmNzcyh7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjUycHhcIixcbiAgICAgICAgICAgICAgaGVpZ2h0OiBcIjE2cHhcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlucHV0LmF0dHIoXCJ0aXRsZVwiLCB0aXRsZSkuYXR0cihcInBsYWNlaG9sZGVyXCIsIHRpdGxlKTtcbiAgICAgICAgICAkKHRoaXMpLmVtcHR5KCkuYXBwZW5kKGlucHV0KTtcbiAgICAgICAgICBnb1BhZ2UgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgdmFyIHBhZ2VzO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICBwYWdlcyA9IE1hdGguY2VpbChzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCkgLyBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgpO1xuICAgICAgICAgICAgICBpZiAoaW5kZXggPiBwYWdlcykge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gcGFnZXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLm9JbnN0YW5jZS5EYXRhVGFibGUoKS5wYWdlKGluZGV4KS5kcmF3KCdwYWdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpbnB1dC5ibHVyKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50UGFnZTtcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgIGdvUGFnZShjdXJyZW50UGFnZSk7XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5wYXJlbnQoKS5odG1sKCcuLi4nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gaW5wdXQua2V5ZG93bihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFBhZ2U7XG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlLnRvU3RyaW5nKCkgPT09IFwiMTNcIikge1xuICAgICAgICAgICAgICBjdXJyZW50UGFnZSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgIHJldHVybiBnb1BhZ2UoY3VycmVudFBhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNyZWF0ZWRSb3c6IGZ1bmN0aW9uKHJvdywgZGF0YSwgZGF0YUluZGV4KSB7XG4gICAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICAgIGlmIChkYXRhLl9pZCA9PT0gRmxvd1JvdXRlci5jdXJyZW50KCkucGFyYW1zLmluc3RhbmNlSWQpIHtcbiAgICAgICAgICByZXR1cm4gcm93LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic2VsZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZGF0YTogXCJfaWRcIixcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBhZ2VudF92aWV3LCBjY192aWV3LCBmbG93X25hbWUsIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MsIG1vZGlmaWVkLCBtb2RpZmllZEZyb21Ob3csIG1vZGlmaWVkU3RyaW5nLCBwcmlvcml0eUljb24sIHByaW9yaXR5SWNvbkNsYXNzLCBwcmlvcml0eVZhbHVlLCByZWYsIHJlZjEsIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcsIHVucmVhZDtcbiAgICAgICAgICBtb2RpZmllZFN0cmluZyA9IG1vbWVudChkb2MubW9kaWZpZWQpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICAgIG1vZGlmaWVkID0gZG9jLm1vZGlmaWVkO1xuICAgICAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94JyAmJiBkb2Muc3RhdGUgIT09ICdkcmFmdCcpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkID0gZG9jLnN0YXJ0X2RhdGUgfHwgZG9jLm1vZGlmaWVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdvdXRib3gnIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnbW9uaXRvcicpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkID0gZG9jLnN1Ym1pdF9kYXRlIHx8IGRvYy5zdWJtaXRfZGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kaWZpZWRGcm9tTm93ID0gU3RlZWRvcy5tb21lbnRSZWFjdGl2ZUZyb21Ob3cobW9kaWZpZWQpO1xuICAgICAgICAgIGZsb3dfbmFtZSA9IGRvYy5mbG93X25hbWU7XG4gICAgICAgICAgY2NfdmlldyA9IFwiXCI7XG4gICAgICAgICAgc3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiXCI7XG4gICAgICAgICAgaWYgKGRvYy5pc19jYyAmJiAhKChyZWYgPSBkb2MuaW5ib3hfdXNlcnMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoTWV0ZW9yLnVzZXJJZCgpKSA6IHZvaWQgMCkgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgICAgIGNjX3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oXCJpbnN0YW5jZV9jY190aXRsZVwiKSArIFwiKTwvbGFiZWw+IFwiO1xuICAgICAgICAgICAgc3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz5cIiArIGZsb3dfbmFtZSArIFwiPHNwYW4+KFwiICsgZG9jLmN1cnJlbnRfc3RlcF9uYW1lICsgXCIpPC9zcGFuPjwvZGl2PlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgIT09ICdkcmFmdCcgJiYgZG9jLmN1cnJlbnRfc3RlcF9uYW1lKSB7XG4gICAgICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+XCIgKyBmbG93X25hbWUgKyBcIjxzcGFuPihcIiArIGRvYy5jdXJyZW50X3N0ZXBfbmFtZSArIFwiKTwvc3Bhbj48L2Rpdj5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+XCIgKyBmbG93X25hbWUgKyBcIjwvZGl2PlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZ2VudF92aWV3ID0gXCJcIjtcbiAgICAgICAgICBpZiAoZG9jLmFnZW50X3VzZXJfbmFtZSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94Jykge1xuICAgICAgICAgICAgYWdlbnRfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge1xuICAgICAgICAgICAgICB1c2VyTmFtZTogZG9jLmFnZW50X3VzZXJfbmFtZVxuICAgICAgICAgICAgfSkgKyBcIik8L2xhYmVsPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1bnJlYWQgPSAnJztcbiAgICAgICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcgJiYgZG9jLmlzX3JlYWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1bnJlYWQgPSAnPGkgY2xhc3M9XCJpb24gaW9uLXJlY29yZCB1bnJlYWRcIj48L2k+JztcbiAgICAgICAgICB9IGVsc2UgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnbW9uaXRvcicgJiYgZG9jLmlzX2hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdW5yZWFkID0gJzxpIGNsYXNzPVwiZmEgZmEtbG9ja1wiPjwvaT4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmlvcml0eUljb24gPSBcIlwiO1xuICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJcIjtcbiAgICAgICAgICBwcmlvcml0eVZhbHVlID0gKHJlZjEgPSBkb2MudmFsdWVzKSAhPSBudWxsID8gcmVmMS5wcmlvcml0eSA6IHZvaWQgMDtcbiAgICAgICAgICBzd2l0Y2ggKHByaW9yaXR5VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCLnibnmgKVcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcImRhbmdlclwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCLntKfmgKVcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIndhcm5pbmdcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwi5Yqe5paHXCI6XG4gICAgICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJtdXRlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJpb3JpdHlJY29uQ2xhc3MpIHtcbiAgICAgICAgICAgIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgPSBcImNvbG9yLXByaW9yaXR5IGNvbG9yLXByaW9yaXR5LVwiICsgcHJpb3JpdHlJY29uQ2xhc3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXJlYWQtYmFyJz5cIiArIHVucmVhZCArIFwiPC9kaXY+XFxuPGRpdiBjbGFzcz0naW5zdGFuY2UtbmFtZSBcIiArIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgKyBcIic+XCIgKyBkb2MubmFtZSArIGNjX3ZpZXcgKyBhZ2VudF92aWV3ICsgXCJcXG5cdDxzcGFuPlwiICsgZG9jLmFwcGxpY2FudF9uYW1lICsgXCI8L3NwYW4+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz0naW5zdGFuY2UtZGV0YWlsJz5cIiArIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgKyBcIlxcblx0PHNwYW4gY2xhc3M9J2luc3RhbmNlLW1vZGlmaWVkJyB0aXRsZT0nXCIgKyBtb2RpZmllZFN0cmluZyArIFwiJz5cIiArIG1vZGlmaWVkRnJvbU5vdyArIFwiPC9zcGFuPlxcbjwvZGl2PlwiO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiKSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJuYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX25hbWVcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIgYWdlbnRfdmlldywgY2NfdmlldywgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcywgcHJpb3JpdHlJY29uQ2xhc3MsIHByaW9yaXR5VmFsdWUsIHJlZiwgcmVmMSwgc3RlcF9jdXJyZW50X25hbWVfdmlldywgdW5yZWFkO1xuICAgICAgICAgIGNjX3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIGlmIChkb2MuaXNfY2MgJiYgISgocmVmID0gZG9jLmluYm94X3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKE1ldGVvci51c2VySWQoKSkgOiB2b2lkIDApICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnKSB7XG4gICAgICAgICAgICBjY192aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKFwiaW5zdGFuY2VfY2NfdGl0bGVcIikgKyBcIik8L2xhYmVsPiBcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWdlbnRfdmlldyA9IFwiXCI7XG4gICAgICAgICAgaWYgKGRvYy5hZ2VudF91c2VyX25hbWUpIHtcbiAgICAgICAgICAgIGFnZW50X3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgdXNlck5hbWU6IGRvYy5hZ2VudF91c2VyX25hbWVcbiAgICAgICAgICAgIH0pICsgXCIpPC9sYWJlbD5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdW5yZWFkID0gJyc7XG4gICAgICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnICYmIGRvYy5pc19yZWFkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1yZWNvcmQgdW5yZWFkXCI+PC9pPic7XG4gICAgICAgICAgfSBlbHNlIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ21vbml0b3InICYmIGRvYy5pc19oaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHVucmVhZCA9ICc8aSBjbGFzcz1cImZhIGZhLWxvY2tcIj48L2k+JztcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIlwiO1xuICAgICAgICAgIHByaW9yaXR5VmFsdWUgPSAocmVmMSA9IGRvYy52YWx1ZXMpICE9IG51bGwgPyByZWYxLnByaW9yaXR5IDogdm9pZCAwO1xuICAgICAgICAgIHN3aXRjaCAocHJpb3JpdHlWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcIueJueaApVwiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwiZGFuZ2VyXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIue0p+aApVwiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwid2FybmluZ1wiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCLlip7mlodcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIm11dGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmlvcml0eUljb25DbGFzcykge1xuICAgICAgICAgICAgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyA9IFwiY29sb3ItcHJpb3JpdHkgY29sb3ItcHJpb3JpdHktXCIgKyBwcmlvcml0eUljb25DbGFzcztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtcmVhZC1iYXInPlwiICsgdW5yZWFkICsgXCI8L2Rpdj5cXG48ZGl2IGNsYXNzPSdpbnN0YW5jZS1uYW1lIFwiICsgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyArIFwiJz5cIiArIGRvYy5uYW1lICsgY2NfdmlldyArIGFnZW50X3ZpZXcgKyBcIjwvZGl2PlwiO1xuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImFwcGxpY2FudF9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9uYW1lXCIpLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcInN1Ym1pdF9kYXRlXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N1Ym1pdF9kYXRlXCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgaWYgKGRvYy5zdWJtaXRfZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkb2Muc3VibWl0X2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImZsb3dfbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImN1cnJlbnRfc3RlcF9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N0ZXBfY3VycmVudF9uYW1lXCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIGNjX3RhZywganVkZ2UsIHN0ZXBfY3VycmVudF9uYW1lO1xuICAgICAgICAgIGlmIChkb2Muc3RhdGUgPT09IFwiY29tcGxldGVkXCIpIHtcbiAgICAgICAgICAgIGp1ZGdlID0gZG9jLmZpbmFsX2RlY2lzaW9uIHx8IFwiYXBwcm92ZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RlcF9jdXJyZW50X25hbWUgPSBkb2MuY3VycmVudF9zdGVwX25hbWUgfHwgJyc7XG4gICAgICAgICAgY2NfdGFnID0gJyc7XG4gICAgICAgICAgaWYgKGRvYy5jY19jb3VudCA+IDApIHtcbiAgICAgICAgICAgIGNjX3RhZyA9IFRBUGkxOG4uX18oJ2NjX3RhZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJzdGVwLWN1cnJlbnQtc3RhdGUgXCIgKyBqdWRnZSArIFwiXFxcIj5cIiArIHN0ZXBfY3VycmVudF9uYW1lICsgY2NfdGFnICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJtb2RpZmllZFwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19tb2RpZmllZFwiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHJldHVybiBtb21lbnQoZG9jLm1vZGlmaWVkKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcInN0YXJ0X2RhdGVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfc3RhcnRfZGF0ZVwiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIGlmIChkb2Muc3RhcnRfZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkb2Muc3RhcnRfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwibXlfZmluaXNoX2RhdGVcIixcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIGlmIChkb2MubXlfZmluaXNoX2RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZG9jLm15X2ZpbmlzaF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJtb2RpZmllZFwiLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImtleXdvcmRzXCIsXG4gICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiaXNfYXJjaGl2ZWRcIixcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciByZWY7XG4gICAgICAgICAgaWYgKChkb2MgIT0gbnVsbCA/IChyZWYgPSBkb2MudmFsdWVzKSAhPSBudWxsID8gcmVmLnJlY29yZF9uZWVkIDogdm9pZCAwIDogdm9pZCAwKSAmJiBkb2MudmFsdWVzLnJlY29yZF9uZWVkID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgaWYgKGRvYyAhPSBudWxsID8gZG9jLmlzX2FyY2hpdmVkIDogdm9pZCAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0KFwiWUVTXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHQoXCJOT1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9XG4gICAgXSxcbiAgICBkb206IChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgcmV0dXJuICd0cCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3RwbCc7XG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBvcmRlcjogW1s0LCBcImRlc2NcIl1dLFxuICAgIGV4dHJhRmllbGRzOiBbXCJmb3JtXCIsIFwiZmxvd1wiLCBcImluYm94X3VzZXJzXCIsIFwic3RhdGVcIiwgXCJzcGFjZVwiLCBcImFwcGxpY2FudFwiLCBcImZvcm1fdmVyc2lvblwiLCBcImZsb3dfdmVyc2lvblwiLCBcImlzX2NjXCIsIFwiY2NfY291bnRcIiwgXCJpc19yZWFkXCIsIFwiY3VycmVudF9zdGVwX25hbWVcIiwgXCJ2YWx1ZXNcIiwgXCJrZXl3b3Jkc1wiLCBcImZpbmFsX2RlY2lzaW9uXCIsIFwiZmxvd19uYW1lXCIsIFwiaXNfaGlkZGVuXCIsIFwiYWdlbnRfdXNlcl9uYW1lXCJdLFxuICAgIGxlbmd0aENoYW5nZTogdHJ1ZSxcbiAgICBsZW5ndGhNZW51OiBbMTAsIDE1LCAyMCwgMjUsIDUwLCAxMDBdLFxuICAgIHBhZ2VMZW5ndGg6IDEwLFxuICAgIGluZm86IGZhbHNlLFxuICAgIHNlYXJjaGluZzogdHJ1ZSxcbiAgICByZXNwb25zaXZlOiB7XG4gICAgICBkZXRhaWxzOiBmYWxzZVxuICAgIH0sXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgICBjaGFuZ2VTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IsIHVzZXJJZCkge1xuICAgICAgdmFyIHJlZiwgc3BhY2UsIHNwYWNlX3VzZXI7XG4gICAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIF9pZDogLTFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHNwYWNlID0gc2VsZWN0b3Iuc3BhY2U7XG4gICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgIGlmICgoc2VsZWN0b3IgIT0gbnVsbCA/IChyZWYgPSBzZWxlY3Rvci4kYW5kKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgICAgc3BhY2UgPSBzZWxlY3Rvci4kYW5kLmdldFByb3BlcnR5KCdzcGFjZScpWzBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX2lkOiAtMVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgICAgICB1c2VyOiB1c2VySWQsXG4gICAgICAgIHNwYWNlOiBzcGFjZVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBfaWQ6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIXNwYWNlX3VzZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfaWQ6IC0xXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfSxcbiAgICBwYWdpbmdUeXBlOiBcIm51bWJlcnNcIlxuICB9O1xuICBpZiAoZmxvd0lkKSB7XG4gICAga2V5ID0gXCJpbnN0YW5jZUZsb3dcIiArIGZsb3dJZDtcbiAgICBvcHRpb25zLm5hbWUgPSBrZXk7XG4gICAgVGFidWxhclRhYmxlcy5pbnN0YW5jZXMuZmllbGRzID0gZmllbGRzO1xuICAgIGluc19maWVsZHMgPSBfaGFuZGxlTGlzdEZpZWxkcyhUYWJ1bGFyVGFibGVzLmluc3RhbmNlcy5maWVsZHMpO1xuICAgIGluc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgICBpZiAoZi50eXBlICE9PSAndGFibGUnICYmIGYuaXNfbGlzdF9kaXNwbGF5KSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmNvbHVtbnMucHVzaCh7XG4gICAgICAgICAgZGF0YTogZi5uYW1lIHx8IGYuY29kZSxcbiAgICAgICAgICB0aXRsZTogdChmLm5hbWUgfHwgZi5jb2RlKSxcbiAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSwgdmFsdWVzO1xuICAgICAgICAgICAgdmFsdWVzID0gZG9jLnZhbHVlcyB8fCB7fTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2YuY29kZV07XG4gICAgICAgICAgICBzd2l0Y2ggKGYudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlICd1c2VyJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5uYW1lIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdncm91cCc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZnVsbG5hbWUgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtb21lbnQodmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZGF0ZVRpbWUnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtb21lbnQodmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X3llc1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ29kYXRhJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbJ0BsYWJlbCddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUYWJ1bGFyVGFibGVzLmluc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlKGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoKSk7XG59KTtcblxuR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMgPSBmdW5jdGlvbihib3gsIGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBrZXksIG9wdGlvbnM7XG4gIGtleSA9IFwiaW5zdGFuY2VGbG93XCIgKyBib3ggKyBmbG93SWQ7XG4gIGlmIChib3ggPT09IFwiaW5ib3hcIikge1xuICAgIG9wdGlvbnMgPSBfZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMoZmxvd0lkLCBmaWVsZHMpO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJvdXRib3hcIikge1xuICAgIG9wdGlvbnMgPSBfZ2V0X291dGJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zKGZsb3dJZCwgZmllbGRzKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcyk7XG4gICAgaWYgKCFmbG93SWQpIHtcbiAgICAgIG9wdGlvbnMubmFtZSA9IFwiaW5ib3hfaW5zdGFuY2VzXCI7XG4gICAgfVxuICB9XG4gIGlmIChmbG93SWQpIHtcbiAgICBvcHRpb25zLm5hbWUgPSBrZXk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5fZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMgPSBmdW5jdGlvbihmbG93SWQsIGZpZWxkcykge1xuICB2YXIgb3B0aW9ucztcbiAgb3B0aW9ucyA9IGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoZmxvd0lkLCBmaWVsZHMpO1xuICBpZiAoIWZsb3dJZCkge1xuICAgIG9wdGlvbnMubmFtZSA9IFwiaW5ib3hfaW5zdGFuY2VzXCI7XG4gIH1cbiAgb3B0aW9ucy5vcmRlciA9IFtbOCwgXCJkZXNjXCJdXTtcbiAgb3B0aW9ucy5maWx0ZXJlZFJlY29yZElkcyA9IGZ1bmN0aW9uKHRhYmxlLCBzZWxlY3Rvciwgc29ydCwgc2tpcCwgbGltaXQsIG9sZF9maWx0ZXJlZFJlY29yZElkcywgdXNlcklkLCBmaW5kT3B0aW9ucykge1xuICAgIHZhciBhZ19zb3J0LCBhZ2dyZWdhdGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGFzeW5jX2FnZ3JlZ2F0ZSwgZmlsdGVyZWRSZWNvcmRJZHMsIHMxLCBzMV8wLCBzMV8xO1xuICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24gPSBbXG4gICAgICB7XG4gICAgICAgICRtYXRjaDogc2VsZWN0b3JcbiAgICAgIH0sIHtcbiAgICAgICAgJHByb2plY3Q6IHtcbiAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgIFwiX2FwcHJvdmVcIjogJyR0cmFjZXMuYXBwcm92ZXMnXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgJHVud2luZDogXCIkX2FwcHJvdmVcIlxuICAgICAgfSwge1xuICAgICAgICAkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG4gICAgICB9LCB7XG4gICAgICAgICRtYXRjaDoge1xuICAgICAgICAgICdfYXBwcm92ZS5pc19maW5pc2hlZCc6IGZhbHNlLFxuICAgICAgICAgICdfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICAgIGlmIChzb3J0ICYmIHNvcnQubGVuZ3RoID4gMCkge1xuICAgICAgczEgPSBzb3J0WzBdO1xuICAgICAgczFfMCA9IHMxWzBdO1xuICAgICAgczFfMSA9IHMxWzFdO1xuICAgICAgaWYgKHMxXzAgPT09ICdzdGFydF9kYXRlJykge1xuICAgICAgICBmaW5kT3B0aW9ucy5zb3J0ID0gW1snbW9kaWZpZWQnLCBzMV8xXV07XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJGdyb3VwOiB7XG4gICAgICAgICAgICBfaWQ6IFwiJF9pZFwiLFxuICAgICAgICAgICAgXCJhcHByb3ZlX3N0YXJ0X2RhdGVcIjoge1xuICAgICAgICAgICAgICAkZmlyc3Q6IFwiJF9hcHByb3ZlLnN0YXJ0X2RhdGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFnX3NvcnQgPSB7XG4gICAgICAgICAgJ2FwcHJvdmVfc3RhcnRfZGF0ZSc6IHMxXzEgPT09ICdhc2MnID8gMSA6IC0xXG4gICAgICAgIH07XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJHNvcnQ6IGFnX3NvcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJHNraXA6IHNraXBcbiAgICAgICAgfSk7XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJGxpbWl0OiBsaW1pdFxuICAgICAgICB9KTtcbiAgICAgICAgZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgYWdncmVnYXRlID0gZnVuY3Rpb24odGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikge1xuICAgICAgICAgIHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5KGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgICAgZmlsdGVyZWRSZWNvcmRJZHMucHVzaChkb2MuX2lkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGFzeW5jX2FnZ3JlZ2F0ZSA9IE1ldGVvci53cmFwQXN5bmMoYWdncmVnYXRlKTtcbiAgICAgICAgYXN5bmNfYWdncmVnYXRlKHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkcyk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFJlY29yZElkcy51bmlxKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb2xkX2ZpbHRlcmVkUmVjb3JkSWRzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFRhYnVsYXJUYWJsZXMuaW5ib3hfaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUoR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoXCJpbmJveFwiKSk7XG59KTtcblxuX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyA9IGZ1bmN0aW9uKGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBvcHRpb25zO1xuICBvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcyk7XG4gIGlmICghZmxvd0lkKSB7XG4gICAgb3B0aW9ucy5uYW1lID0gXCJvdXRib3hfaW5zdGFuY2VzXCI7XG4gIH1cbiAgb3B0aW9ucy5vcmRlciA9IFtbOSwgXCJkZXNjXCJdXTtcbiAgb3B0aW9ucy5maWx0ZXJlZFJlY29yZElkcyA9IGZ1bmN0aW9uKHRhYmxlLCBzZWxlY3Rvciwgc29ydCwgc2tpcCwgbGltaXQsIG9sZF9maWx0ZXJlZFJlY29yZElkcywgdXNlcklkLCBmaW5kT3B0aW9ucykge1xuICAgIHZhciBhZ19zb3J0LCBhZ2dyZWdhdGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGFzeW5jX2FnZ3JlZ2F0ZSwgZmlsdGVyZWRSZWNvcmRJZHMsIHMxLCBzMV8wLCBzMV8xO1xuICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24gPSBbXG4gICAgICB7XG4gICAgICAgICRtYXRjaDogc2VsZWN0b3JcbiAgICAgIH0sIHtcbiAgICAgICAgJHByb2plY3Q6IHtcbiAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgIFwiX2FwcHJvdmVcIjogJyR0cmFjZXMuYXBwcm92ZXMnXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgJHVud2luZDogXCIkX2FwcHJvdmVcIlxuICAgICAgfSwge1xuICAgICAgICAkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG4gICAgICB9LCB7XG4gICAgICAgICRtYXRjaDoge1xuICAgICAgICAgICdfYXBwcm92ZS5pc19maW5pc2hlZCc6IHRydWUsXG4gICAgICAgICAgJG9yOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICdfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICdfYXBwcm92ZS51c2VyJzogdXNlcklkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXTtcbiAgICBpZiAoc29ydCAmJiBzb3J0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHMxID0gc29ydFswXTtcbiAgICAgIHMxXzAgPSBzMVswXTtcbiAgICAgIHMxXzEgPSBzMVsxXTtcbiAgICAgIGlmIChzMV8wID09PSAnbXlfZmluaXNoX2RhdGUnKSB7XG4gICAgICAgIGZpbmRPcHRpb25zLnNvcnQgPSBbWydtb2RpZmllZCcsIHMxXzFdXTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkZ3JvdXA6IHtcbiAgICAgICAgICAgIF9pZDogXCIkX2lkXCIsXG4gICAgICAgICAgICBcImFwcHJvdmVfZmluaXNoX2RhdGVcIjoge1xuICAgICAgICAgICAgICAkbGFzdDogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFnX3NvcnQgPSB7XG4gICAgICAgICAgJ2FwcHJvdmVfZmluaXNoX2RhdGUnOiBzMV8xID09PSAnYXNjJyA/IDEgOiAtMVxuICAgICAgICB9O1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRzb3J0OiBhZ19zb3J0XG4gICAgICAgIH0pO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRza2lwOiBza2lwXG4gICAgICAgIH0pO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRsaW1pdDogbGltaXRcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbHRlcmVkUmVjb3JkSWRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGFnZ3JlZ2F0ZSA9IGZ1bmN0aW9uKHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkcywgY2IpIHtcbiAgICAgICAgICB0YWJsZS5jb2xsZWN0aW9uLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUoYWdncmVnYXRlX29wZXJhdGlvbikudG9BcnJheShmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICAgIGZpbHRlcmVkUmVjb3JkSWRzLnB1c2goZG9jLl9pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBhc3luY19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKGFnZ3JlZ2F0ZSk7XG4gICAgICAgIGFzeW5jX2FnZ3JlZ2F0ZSh0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMpO1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRSZWNvcmRJZHMudW5pcSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkcztcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUYWJ1bGFyVGFibGVzLm91dGJveF9pbnN0YW5jZXMgPSBuZXcgVGFidWxhci5UYWJsZShHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhcIm91dGJveFwiKSk7XG59KTtcblxuaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICBUYWJ1bGFyVGFibGVzLmZsb3dJbnN0YW5jZXMgPSBuZXcgUmVhY3RpdmVWYXIoKTtcbn1cblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUcmFja2VyLmF1dG9ydW4oZnVuY3Rpb24oYykge1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQgJiYgIVN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9PSAnZHJhZnQnKSB7XG4gICAgICAgIHJldHVybiBNZXRlb3IuY2FsbChcIm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyXCIsIFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgIG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyKFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgcmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fY2hhbmdlT3JkZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pO1xuXG5uZXdJbnN0YW5jZXNMaXN0VGFidWxhciA9IGZ1bmN0aW9uKGJveCwgZmxvd0lkLCBmaWVsZHMpIHtcbiAgdmFyIGZsb3csIGtleSwgcmVmLCByZWYxLCByZWYyO1xuICBpZiAoIWZpZWxkcykge1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogZmxvd0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGZvcm06IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmaWVsZHMgPSAocmVmID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZsb3cgIT0gbnVsbCA/IGZsb3cuZm9ybSA6IHZvaWQgMFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICAnY3VycmVudC5maWVsZHMnOiAxXG4gICAgICB9XG4gICAgfSkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5jdXJyZW50KSAhPSBudWxsID8gcmVmMS5maWVsZHMgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIH1cbiAgZmllbGRzID0gX2hhbmRsZUxpc3RGaWVsZHMoZmllbGRzKTtcbiAgaWYgKChmaWVsZHMgIT0gbnVsbCA/IChyZWYyID0gZmllbGRzLmZpbHRlclByb3BlcnR5KFwiaXNfbGlzdF9kaXNwbGF5XCIsIHRydWUpKSAhPSBudWxsID8gcmVmMi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgIGtleSA9IFwiaW5zdGFuY2VGbG93XCIgKyBib3ggKyBmbG93SWQ7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgVGFidWxhclRhYmxlcy5mbG93SW5zdGFuY2VzLnNldChuZXcgVGFidWxhci5UYWJsZShHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhib3gsIGZsb3dJZCwgZmllbGRzKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgVGFidWxhci5UYWJsZShHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhib3gsIGZsb3dJZCwgZmllbGRzKSk7XG4gICAgfVxuICAgIHJldHVybiBjb25zb2xlLmxvZyhcIm5ldyBUYWJ1bGFyVGFibGVzIFwiLCBrZXkpO1xuICB9XG59O1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIE1ldGVvci5tZXRob2RzKHtcbiAgICBuZXdJbnN0YW5jZXNMaXN0VGFidWxhcjogZnVuY3Rpb24oYm94LCBmbG93SWQpIHtcbiAgICAgIHZhciBmaWVsZHMsIGZsb3csIHJlZiwgcmVmMTtcbiAgICAgIG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyKGJveCwgZmxvd0lkKTtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93SWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgZm9ybTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZpZWxkcyA9IChyZWYgPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93ICE9IG51bGwgPyBmbG93LmZvcm0gOiB2b2lkIDBcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgJ2N1cnJlbnQuZmllbGRzJzogMVxuICAgICAgICB9XG4gICAgICB9KSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLmN1cnJlbnQpICE9IG51bGwgPyByZWYxLmZpZWxkcyA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==
