(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var DDP = Package['ddp-client'].DDP;
var DDPServer = Package['ddp-server'].DDPServer;
var check = Package.check.check;
var Match = Package.check.Match;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var JsonRoutes = Package['simple:json-routes'].JsonRoutes;
var RestMiddleware = Package['simple:json-routes'].RestMiddleware;
var Restivus = Package['nimble:restivus'].Restivus;
var SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;
var MongoObject = Package['aldeed:simple-schema'].MongoObject;
var Tabular = Package['aldeed:tabular'].Tabular;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var WorkflowManager = Package['steedos:app-workflow'].WorkflowManager;
var uuflowManager = Package['steedos:app-workflow'].uuflowManager;
var pushManager = Package['steedos:app-workflow'].pushManager;
var steedosExport = Package['steedos:app-workflow'].steedosExport;
var steedosImport = Package['steedos:app-workflow'].steedosImport;
var Template = Package['meteorhacks:ssr'].Template;
var SSR = Package['meteorhacks:ssr'].SSR;
var SubsManager = Package['meteorhacks:subs-manager'].SubsManager;
var WebApp = Package.webapp.WebApp;
var WebAppInternals = Package.webapp.WebAppInternals;
var main = Package.webapp.main;
var moment = Package['momentjs:moment'].moment;
var CFDataManager = Package['steedos:autoform'].CFDataManager;
var Selector = Package['steedos:base'].Selector;
var Steedos = Package['steedos:base'].Steedos;
var AjaxCollection = Package['steedos:base'].AjaxCollection;
var SteedosDataManager = Package['steedos:base'].SteedosDataManager;
var SteedosOffice = Package['steedos:base'].SteedosOffice;
var billingManager = Package['steedos:base'].billingManager;
var MailQueue = Package['steedos:mailqueue'].MailQueue;
var WebhookQueue = Package['steedos:webhookqueue'].WebhookQueue;
var _i18n = Package['universe:i18n']._i18n;
var i18n = Package['universe:i18n'].i18n;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var meteorInstall = Package.modules.meteorInstall;
var HTML = Package.htmljs.HTML;
var Collection2 = Package['aldeed:collection2-core'].Collection2;
var FS = Package['steedos:cfs-base-package'].FS;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;

/* Package-scope variables */
var __coffeescriptShare, Workflow, InstanceReadOnlyTemplate, TemplateManager, SteedosTable, year, month, date, hours, seconds, locale, utcOffset, str, addItemTr, values_history, current_user_info, flow_id, userId, orgFieldUsers, formula_values, new_ins_id, instanceHtml, Form_formula, getHandlersManager, permissionManager, approveManager, flowManager, formManager, stepManager, workflowTemplate, InstanceManager, WorkflowManager_format, CoreForm, InstanceNumberRules;

var require = meteorInstall({"node_modules":{"meteor":{"steedos:workflow":{"checkNpm.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/checkNpm.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let checkNpmVersions;
module.link("meteor/tmeasday:check-npm-versions", {
  checkNpmVersions(v) {
    checkNpmVersions = v;
  }

}, 0);
checkNpmVersions({
  "node-schedule": "^1.3.1",
  cookies: "^0.6.2",
  "xml2js": "^0.4.19",
  mkdirp: "^0.3.5"
}, 'steedos:workflow');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"URI.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/URI.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.17.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */
(function (root, factory) {
  'use strict'; // https://github.com/umdjs/umd/blob/master/returnExports.js
  // if (typeof exports === 'object') {
  //   // Node
  //   module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  // } else

  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
})(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase

  /*jshint camelcase: false */
  // save current URI variable, if any

  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;

    var _baseSupplied = arguments.length >= 2; // Allow instantiation without the 'new' keyword


    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    this.href(url); // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor

    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  URI.version = '1.17.0';
  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */


      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length; // value may be string, number, array, regexp

    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);

    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    } // arrays can't be equal if they have different amount of content


    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function () {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  }; // state: allow duplicate query parameters (a=1&a=1)


  URI.duplicateQueryParameters = false; // state: replaces + with %20 (space in query strings)

  URI.escapeQuerySpace = true; // static properties

  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\.-]/i;
  URI.punycode_expression = /(xn--)/i; // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?

  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/; // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt

  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/; // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html

  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
  }; // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports

  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  }; // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -

  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/; // map DOM Elements to their URI attribute

  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src',
    // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };

  URI.getDomAttribute = function (node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase(); // <input> should only expose src for type="image"

    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  } // encoding / decoding according to RFC3986


  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, '%2A');
  }

  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;

  URI.iso8859 = function () {
    URI.encode = escape;
    URI.decode = unescape;
  };

  URI.unicode = function () {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };

  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };

  URI.encodeQuery = function (string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };

  URI.decodeQuery = function (string, escapeQuerySpace) {
    string += '';

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch (e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  }; // generate encode/decode path functions


  var _parts = {
    'encode': 'encode',
    'decode': 'decode'
  };

  var _part;

  var generateAccessor = function (_group, _part) {
    return function (string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function (c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function (_sep, _codingFuncName, _innerCodingFuncName) {
    return function (string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;

      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function (string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  }; // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.


  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function (string, parts) {
    var pos;

    if (!parts) {
      parts = {};
    } // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
    // extract fragment


    pos = string.indexOf('#');

    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // extract query


    pos = string.indexOf('?');

    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // extract protocol


    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2); // extract "user:pass@host:port"

      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');

      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;

        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3); // extract "user:pass@host:port"

          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    } // what's left must be the path


    parts.path = string; // and we're done

    return parts;
  };

  URI.parseHost = function (string, parts) {
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233
    string = string.replace(/\\/g, '/'); // extract host:port

    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;

      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);

      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    return string.substring(pos) || '/';
  };

  URI.parseAuthority = function (string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };

  URI.parseUserinfo = function (string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t; // authority@ must come before /path

    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };

  URI.parseQuery = function (string, escapeQuerySpace) {
    if (!string) {
      return {};
    } // throw out the funky business - "?"[name"="value"&"]+


    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace); // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters

      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function (parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += URI.buildAuthority(parts) || '';

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }

    return t;
  };

  URI.buildHost = function (parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };

  URI.buildAuthority = function (parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };

  URI.buildUserinfo = function (parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);

      if (parts.password) {
        t += ':' + URI.encode(parts.password);
      }

      t += '@';
    }

    return t;
  };

  URI.buildQuery = function (data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
    var t = '';
    var unique, key, i, length;

    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};

          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);

              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };

  URI.buildQueryParameter = function (name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function (data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };

  URI.removeQuery = function (data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };

  URI.hasQuery = function (data, name, value, withinArray) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          if (!URI.hasQuery(data, key, name[key])) {
            return false;
          }
        }
      }

      return true;
    } else if (typeof name !== 'string') {
      throw new TypeError('URI.hasQuery() accepts an object, string as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data;
      // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);

        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);

      /* falls through */

      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };

  URI.commonPath = function (one, two) {
    var length = Math.min(one.length, two.length);
    var pos; // find first non-matching character

    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    } // revert to last /


    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function (string, callback, options) {
    options || (options = {});

    var _start = options.start || URI.findUri.start;

    var _end = options.end || URI.findUri.end;

    var _trim = options.trim || URI.findUri.trim;

    var _attributeOpen = /[a-z0-9-]=["']?$/i;
    _start.lastIndex = 0;

    while (true) {
      var match = _start.exec(string);

      if (!match) {
        break;
      }

      var start = match.index;

      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);

        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end).replace(_trim, '');

      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function (v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js
    if (v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }
    }
  }; // noConflict


  URI.noConflict = function (removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function (deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function () {
    return new URI(this);
  };

  p.valueOf = p.toString = function () {
    return this.build(false)._string;
  };

  function generateSimpleAccessor(_part) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';

          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function (v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? '?' + t : t;
  };

  p.hash = function (v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? '#' + t : t;
  };

  p.pathname = function (v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }

      this.build(!build);
      return this;
    }
  };

  p.path = p.pathname;

  p.href = function (href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;

    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);

    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    } // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)


    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;

      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  }; // identification accessors


  p.is = function (what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;
      // hostname identification

      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  }; // component specific input validation


  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function (v, build) {
    if (v !== undefined) {
      if (v) {
        // accept trailing ://
        v = v.replace(/:(\/\/)?$/, '');

        if (!v.match(URI.protocol_expression)) {
          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
        }
      }
    }

    return _protocol.call(this, v, build);
  };

  p.scheme = p.protocol;

  p.port = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';

        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        if (v.match(/[^0-9]/)) {
          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
        }
      }
    }

    return _port.call(this, v, build);
  };

  p.hostname = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {};
      var res = URI.parseHost(v, x);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;
    }

    return _hostname.call(this, v, build);
  }; // compound accessors


  p.origin = function (v, build) {
    var parts;

    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();
      if (!authority) return '';
      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
      return this;
    }
  };

  p.host = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.authority = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.userinfo = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      if (!this._parts.username) {
        return '';
      }

      var t = URI.buildUserinfo(this._parts);
      return t.substring(0, t.length - 1);
    } else {
      if (v[v.length - 1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };

  p.resource = function (v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  }; // fraction accessors


  p.subdomain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    } // convenience, return "www" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // grab domain and add another segment


      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;

      var sub = this._parts.hostname.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v) {
        URI.ensureValidHostname(v);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.domain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // convenience, return "example.org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // if hostname consists of 1 or 2 segments, it must be the domain


      var t = this._parts.hostname.match(/\./g);

      if (t && t.length < 2) {
        return this._parts.hostname;
      } // grab tld and add another segment


      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end - 1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      URI.ensureValidHostname(v);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.tld = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // return "org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');

      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.directory = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
      return v ? URI.decodePath(res) : res;
    } else {
      var e = this._parts.path.length - this.filename().length;

      var directory = this._parts.path.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(directory)); // fully qualifier directories begin with a slash

      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      } // directories always end with a slash


      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.filename = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');

      var res = this._parts.path.substring(pos + 1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };

  p.suffix = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      } // suffix may only contain alnum characters (yup, I made this up.)


      s = filename.substring(pos + 1);
      res = /^[a-z0-9%]+$/i.test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.segment = function (segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined ? segments : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = []; // collapse empty elements within array

        for (var i = 0, l = v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length - 1].length) {
            segments.pop();
          }

          segments.push(trimSlashes(v[i]));
        }
      } else if (v || typeof v === 'string') {
        v = trimSlashes(v);

        if (segments[segments.length - 1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length - 1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = trimSlashes(v);
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };

  p.segmentCoded = function (segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);

      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = typeof v === 'string' || v instanceof String ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  }; // mutating query string


  var q = p.query;

  p.query = function (v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };

  p.setQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.addQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.removeQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.hasQuery = function (name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };

  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery; // sanitizing URLs

  p.normalize = function () {
    if (this._parts.urn) {
      return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    }

    return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
  };

  p.normalizeProtocol = function (build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizeHostname = function (build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizePort = function (build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizePath = function (build) {
    var _path = this._parts.path;

    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    var _was_relative;

    var _leadingParents = '';

    var _parent, _pos; // handle relative paths


    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    } // handle relative files (as opposed to directories)


    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    } // resolve simples


    _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, '/').replace(/\/{2,}/g, '/'); // remember leading parents

    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';

      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    } // resolve parents


    while (true) {
      _parent = _path.indexOf('/..');

      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');

      if (_pos === -1) {
        _pos = _parent;
      }

      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    } // revert to relative


    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    _path = URI.recodePath(_path);
    this._parts.path = _path;
    this.build(!build);
    return this;
  };

  p.normalizePathname = p.normalizePath;

  p.normalizeQuery = function (build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };

  p.normalizeFragment = function (build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function () {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = escape;
    URI.decode = decodeURIComponent;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.unicode = function () {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.readable = function () {
    var uri = this.clone(); // removing username, password, because they shouldn't be displayed according to RFC 3986

    uri.username('').password('').normalize();
    var t = '';

    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);

        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);

    if (uri._parts.query) {
      var q = '';

      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, '%26');
        }
      }

      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  }; // resolving relative and absolute URLs


  p.absoluteTo = function (base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (!resolved._parts.protocol) {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; p = properties[i]; i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;

      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else if (resolved._parts.path.substring(-2) === '..') {
      resolved._parts.path += '/';
    }

    if (resolved.path().charAt(0) !== '/') {
      basedir = base.directory();
      basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
      resolved._parts.path = (basedir ? basedir + '/' : '') + resolved._parts.path;
      resolved.normalizePath();
    }

    resolved.build();
    return resolved;
  };

  p.relativeTo = function (base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    } // determine common sub path


    common = URI.commonPath(relativePath, basePath); // If the paths have nothing in common, return a relative URL with the absolute path.

    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, '').replace(/.*?\//g, '../');
    relativeParts.path = parents + relativeParts.path.substring(common.length) || './';
    return relative.build();
  }; // comparing URIs


  p.equals = function (uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;
    one.normalize();
    two.normalize(); // exact match

    if (one.toString() === two.toString()) {
      return true;
    } // extract query string


    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query(''); // definitely not equal if not even non-query parts match

    if (one.toString() !== two.toString()) {
      return false;
    } // query parameters have the same length, even if they're permuted


    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  }; // state


  p.duplicateQueryParameters = function (v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function (v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"collection_helpers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/collection_helpers.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tapi18n.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/tapi18n.coffee                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"core.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/core.coffee                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Workflow = {};
this.ImageSign = {};
this.TracesHandler = {};
this.TracesTemplate = {};
this.InstanceformTemplate = {};
this.InstanceAttachmentTemplate = {};
this.InstanceSignText = {};
this.RelatedInstances = {};
this.RelatedRecords = {};
this.InstanceMacro = {
  context: {}
};
this.TracesManager = {};

InstanceSignText.isOpinionField_from_string = function (field_formula) {
  return (field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{yijianlan:") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{\"yijianlan\":") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{'yijianlan':") : void 0) > -1;
};

InstanceSignText.includesOpinionField = function (form, form_version) {
  var _form_version, field_formulas, fields;

  field_formulas = new Array();
  _form_version = {};

  if (Meteor.isServer) {
    _form_version = uuflowManager.getFormVersion(db.forms.findOne({
      _id: form
    }), form_version);
  } else {
    _form_version = db.form_versions.findOne({
      _id: form_version,
      form: form
    });
  }

  fields = (_form_version != null ? _form_version.fields : void 0) || [];
  fields.forEach(function (f) {
    var ref;

    if (f.type === 'table') {
      return console.log('ignore opinion field in table');
    } else if (f.type === 'section') {
      return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
        return field_formulas.push(f1.formula);
      }) : void 0 : void 0;
    } else {
      return field_formulas.push(f.formula);
    }
  });
  return _.some(field_formulas, function (field_formula) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"models":{"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/forms.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flows.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_roles.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_positions.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/instances.coffee                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/categories.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"spaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/spaces.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleted_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/deleted_instances.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"auth_tokens.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/auth_tokens.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
db.auth_tokens = new Meteor.Collection('auth_tokens');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"webhooks.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/webhooks.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_user_signs.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_users.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"cfs":{"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/cfs/instances.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"admin.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/admin.coffee                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"client":{"lib":{"instance_readonly_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/instance_readonly_template.coffee                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _getLocale, _getRequiredFields, _getStartStepEditableFields, _getStartStepRequiredFields, _getTemplateData, _getViewHtml, getLinkText;

InstanceReadOnlyTemplate = {};
InstanceReadOnlyTemplate.instance_attachment = "<tr>\n	<td class=\"ins-attach-view\">\n		<a href=\"{{ins_attach_download_url _id absolute}}\" class=\"ins_attach_href\" target=\"_parent\" data-name=\"{{this.name}}\" data-type=\"{{this.original.type}}\" data-id=\"{{_id}}\">{{this.name}}</a>\n	</td>\n</tr>";
InstanceReadOnlyTemplate.afSelectUserRead = "<div class='selectUser form-control ins_applicant'>{{value}}</div>";
InstanceReadOnlyTemplate.afFormGroupRead = "<div class='form-group'>\n	{{#with getField this.name}}\n		{{#if equals type 'section'}}\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if showLabel}}\n					<label>{{getLabel code}}</label>\n				{{/if}}\n				<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n			{{/if}}\n		{{/if}}\n	{{/with}}\n</div>";
InstanceReadOnlyTemplate.afFormGroup = "\n{{#with getField this.name}}\n		{{#if equals type 'section'}}\n			<div class=\"form-group\">\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n  				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if equals type 'input'}}\n					<div class=\"form-group\" data-required=\"{{#if is_required}}true{{/if}}\">\n						<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n						{{#if is_textarea}}\n							<textarea title=\"{{getLabel code}}\" name=\"{{code}}\" {{getPermissions code}} data-schema-key=\"{{getLabel code}}\" class=\"form-control\"></textarea>\n						{{/if}}\n						{{#unless is_textarea}}\n							<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" {{getPermissions code}} data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n						{{/unless}}\n					</div>\n				{{else}}\n					{{#if equals type 'number'}}\n						<div class=\"form-group\">\n							<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n							<input type=\"number\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n						</div>\n					{{else}}\n						{{#if equals type 'date'}}\n							<div class=\"form-group\">\n								<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n								<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type=\"date\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n							</div>\n						{{else}}\n							{{#if equals type 'dateTime'}}\n								<div class=\"form-group\">\n									<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n									<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type='datetime' data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n								</div>\n							{{else}}\n								{{#if equals type 'password'}}\n									<div class=\"form-group\">\n										<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n										<input type=\"password\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n									</div>\n								{{else}}\n									{{#if equals type 'select'}}\n										<div class=\"form-group\">\n											<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n											<select name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n												{{#each options this}}\n													<option value=\"{{value}}\">{{label}}</option>\n												{{/each}}\n											</select>\n										</div>\n									{{else}}\n										{{#if equals type 'radio'}}\n											<div class=\"form-group\">\n												<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n												<div class=\"af-radio-group\" data-schema-key=\"{{getLabel code}}\">\n													{{#each options this}}\n        												<label class=\"radio-inline fix-indent\"><input type=\"radio\" value=\"{{value}}\" name=\"{{../code}}\" class=\"radio-inline fix-indent\"> {{label}}</label>\n    													{{/each}}\n    												</div>\n											</div>\n										{{else}}\n											{{#if equals type 'multiSelect'}}\n												<div class=\"form-group\">\n													<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n													<div class=\"af-checkbox-group\" data-schema-key=\"{{getLabel code}}\">\n														{{#each options this}}\n														<label class=\"checkbox-inline fix-indent\"><input type=\"checkbox\" value=\"{{value}}\" name=\"{{../code}}\" class=\"checkbox-inline fix-indent\"> {{label}}</label>\n														{{/each}}\n													</div>\n												</div>\n											{{else}}\n												{{#if equals type 'url'}}\n													<div class=\"form-group\">\n														<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n														<input type=\"url\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n													</div>\n												{{else}}\n													{{#if equals type 'email'}}\n														<div class=\"form-group\">\n															<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n															<input type=\"email\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n														</div>\n													{{else}}\n														{{#if equals type 'checkbox'}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class=\"checkbox\" data-schema-key=\"{{getLabel code}}\">\n																	<label style=\"width: 100%;\"><input type=\"checkbox\" value=\"true\" name=\"{{code}}\" class=\"checkbox-inline fix-indent\"></label>\n																</div>\n															</div>\n														{{else}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n															</div>\n														{{/if}}\n													{{/if}}\n												{{/if}}\n											{{/if}}\n										{{/if}}\n									{{/if}}\n								{{/if}}\n							{{/if}}\n						{{/if}}\n					{{/if}}\n				{{/if}}\n			{{/if}}\n		{{/if}}\n	{{/with}}";

InstanceReadOnlyTemplate.create = function (tempalteName, steedosData) {
  var template, templateCompiled, templateRenderFunction;
  template = InstanceReadOnlyTemplate[tempalteName];
  templateCompiled = SpacebarsCompiler.compile(template, {
    isBody: true
  });
  templateRenderFunction = eval(templateCompiled);
  Template[tempalteName] = new Blaze.Template(tempalteName, templateRenderFunction);
  Template[tempalteName].steedosData = steedosData;
  return Template[tempalteName].helpers(InstanceformTemplate.helpers);
};

InstanceReadOnlyTemplate.createInstanceSignText = function (steedosData) {
  var instanceSignTextCompiled, instanceSignTextHtml, instanceSignTextRenderFunction;
  instanceSignTextHtml = _getViewHtml('client/views/instance/instance_sign_text.html');
  instanceSignTextCompiled = SpacebarsCompiler.compile(instanceSignTextHtml, {
    isBody: true
  });
  instanceSignTextRenderFunction = eval(instanceSignTextCompiled);
  Template.instanceSignText = new Blaze.Template("instanceSignText", instanceSignTextRenderFunction);
  Template.instanceSignText.steedosData = steedosData;
  return Template.instanceSignText.helpers(InstanceSignText.helpers);
};

InstanceReadOnlyTemplate.createImageSign = function (steedosData) {
  var imageSignCompiled, imageSignHtml, imageSignRenderFunction;
  imageSignHtml = _getViewHtml('client/views/instance/image_sign.html');
  imageSignCompiled = SpacebarsCompiler.compile(imageSignHtml, {
    isBody: true
  });
  imageSignRenderFunction = eval(imageSignCompiled);
  Template.imageSign = new Blaze.Template("imageSign", imageSignRenderFunction);
  Template.imageSign.steedosData = steedosData;
  return Template.imageSign.helpers(ImageSign.helpers);
};

InstanceReadOnlyTemplate.createTracesHanlder = function (steedosData) {
  var tracesHanlderCompiled, tracesHanlderHtml, tracesHanlderRenderFunction;
  tracesHanlderHtml = _getViewHtml('client/views/instance/traces_handler.html');
  tracesHanlderCompiled = SpacebarsCompiler.compile(tracesHanlderHtml, {
    isBody: true
  });
  tracesHanlderRenderFunction = eval(tracesHanlderCompiled);
  Template.instance_traces_handler = new Blaze.Template("instance_traces_handler", tracesHanlderRenderFunction);
  Template.instance_traces_handler.steedosData = steedosData;
  return Template.instance_traces_handler.helpers(TracesHandler.helpers);
};

InstanceReadOnlyTemplate.init = function (steedosData) {
  InstanceReadOnlyTemplate.create("afSelectUserRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("afFormGroup", steedosData);
  }

  InstanceReadOnlyTemplate.create("afFormGroupRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("instance_attachment", {
      absolute: steedosData.absolute
    });
    InstanceReadOnlyTemplate.createImageSign(steedosData);
    InstanceReadOnlyTemplate.createTracesHanlder(steedosData);
    return InstanceReadOnlyTemplate.createInstanceSignText(steedosData);
  }
};

getLinkText = function (item, label, detail_url) {
  if (detail_url) {
    detail_url = detail_url.replace("{_id}", item._id);

    if (!/^http(s?):\/\//.test(detail_url)) {
      detail_url = Steedos.absoluteUrl(detail_url);
    }

    return '<a href="' + detail_url + '" target="_blank">' + label + '</a>';
  } else {
    return label;
  }
};

InstanceReadOnlyTemplate.getValue = function (value, field, locale, utcOffset) {
  var date, detail_url, e, hours, month, seconds, t, t0, t1, year;

  if (!value && value !== false) {
    return '';
  }

  switch (field.type) {
    case 'email':
      value = value ? '<a href=\'mailto:' + value + '\'>' + value + '</a>' : '';
      break;

    case 'url':
      if (value) {
        if (value.indexOf("http") === 0) {
          try {
            value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
          } catch (error) {
            e = error;
            value = "<a href='' target='_blank'>" + value + "</a>";
          }
        } else {
          value = "<a href='http://" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
        }
      } else {
        value = '';
      }

      break;

    case 'group':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("fullname").toString() : void 0;
      } else {
        value = value != null ? value.fullname : void 0;
      }

      break;

    case 'user':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("name").toString() : void 0;
      } else {
        value = value != null ? value.name : void 0;
      }

      break;

    case 'password':
      value = '******';
      break;

    case 'checkbox':
      if (value && value !== 'false') {
        value = TAPi18n.__("form_field_checkbox_yes", {}, locale);
      } else {
        value = TAPi18n.__("form_field_checkbox_no", {}, locale);
      }

      break;

    case 'dateTime':
      if (value && value.length === 16) {
        t = value.split("T");
        t0 = t[0].split("-");
        t1 = t[1].split(":");
        year = t0[0];
        month = t0[1];
        date = t0[2];
        hours = t1[0];
        seconds = t1[1];
        value = new Date(year, month - 1, date, hours, seconds);
      } else {
        value = new Date(value);
      }

      value = InstanceReadOnlyTemplate.formatDate(value, utcOffset);
      break;

    case 'input':
      if (field.is_textarea) {
        value = Spacebars.SafeString(Markdown(value));
      }

      break;

    case 'number':
      if (value || value === 0) {
        value = Steedos.numberToString(value, field.digits);
      }

      break;

    case 'odata':
      detail_url = field.detail_url;

      if (field.is_multiselect) {
        value = _.map(value, function (item) {
          return getLinkText(item, item['@label'], detail_url);
        });
      } else {
        value = getLinkText(value, value['@label'], detail_url);
      }

      break;

    case 'html':
      value = value ? "<div class=\"steedos-html\">" + value + "</div>" : '';
  }

  return value;
};

InstanceReadOnlyTemplate.getLabel = function (fields, code) {
  var field;
  field = fields.findPropertyByPK("code", code);

  if (field) {
    if (field.name) {
      return field.name;
    } else {
      return field.code;
    }
  }
};

InstanceReadOnlyTemplate.getInstanceFormVersion = function (instance) {
  var form, form_fields, form_version;
  form = db.forms.findOne(instance.form);
  form_version = {};
  form_fields = [];

  if (form.current._id === instance.form_version) {
    form_version = form.current;
  } else {
    form_version = _.where(form.historys, {
      _id: instance.form_version
    })[0];
  }

  form_version.fields.forEach(function (field) {
    if (field.type === 'section') {
      form_fields.push(field);

      if (field.fields) {
        return field.fields.forEach(function (f) {
          return form_fields.push(f);
        });
      }
    } else if (field.type === 'table') {
      field['sfields'] = field['fields'];
      delete field['fields'];
      return form_fields.push(field);
    } else {
      return form_fields.push(field);
    }
  });
  form_version.fields = form_fields;
  return form_version;
};

InstanceReadOnlyTemplate.getFlowVersion = function (instance) {
  var flow, flow_version;
  flow = db.flows.findOne(instance.flow);
  flow_version = {};

  if (flow.current._id === instance.flow_version) {
    flow_version = flow.current;
  } else {
    flow_version = _.where(flow.historys, {
      _id: instance.flow_version
    })[0];
  }

  return flow_version;
};

_getViewHtml = function (path) {
  var viewHtml;
  viewHtml = Assets.getText(path);

  if (viewHtml) {
    viewHtml = viewHtml.replace(/<template[\w\s\"\=']+>/i, "").replace(/<\/template>/i, "");
  }

  return viewHtml;
};

_getLocale = function (user) {
  var locale, ref, ref1;

  if ((user != null ? (ref = user.locale) != null ? ref.toLocaleLowerCase() : void 0 : void 0) === 'zh-cn') {
    locale = "zh-CN";
  } else if ((user != null ? (ref1 = user.locale) != null ? ref1.toLocaleLowerCase() : void 0 : void 0) === 'en-us') {
    locale = "en";
  } else {
    locale = "zh-CN";
  }

  return locale;
};

_getRequiredFields = function (fields, rev) {
  if (!rev) {
    rev = [];
  }

  fields.forEach(function (field) {
    if (field.type === 'section') {
      return _getRequiredFields(field.fields, rev);
    } else if (field.type === 'table') {} else {
      if (field.is_required) {
        return rev.push(field.code);
      }
    }
  });
  return rev;
};

_getStartStepEditableFields = function (fields, steps) {
  var editableCode, startStep;
  startStep = steps.findPropertyByPK("step_type", "start");
  editableCode = [];

  _.keys(startStep.permissions).forEach(function (key) {
    if (startStep.permissions[key] === 'editable') {
      return editableCode.push(key);
    }
  });

  return editableCode;
};

_getStartStepRequiredFields = function (fields, steps) {
  var editableCode, requiredFields;
  requiredFields = _getRequiredFields(fields);
  editableCode = _getStartStepEditableFields(fields, steps);
  return _.intersection(requiredFields, editableCode);
};

_getTemplateData = function (user, space, instance, options) {
  var flow, form, form_version, locale, steedosData;

  if (Meteor.isServer) {
    form_version = InstanceReadOnlyTemplate.getInstanceFormVersion(instance);
  } else {
    form_version = WorkflowManager.getInstanceFormVersion(instance);
  }

  locale = _getLocale(user);
  steedosData = {};

  if (Meteor.isClient) {
    steedosData = _.clone(WorkflowManager_format.getAutoformSchemaValues());
    steedosData.insname = instance.name;
    steedosData.ins_state = instance.state;
    steedosData.ins_final_decision = instance.ins_final_decision;
    steedosData.ins_code = instance.code;
    steedosData.ins_is_archived = instance.is_archived;
    steedosData.ins_is_deleted = instance.ins_is_deleted;
    steedosData.applicant_name = instance.applicant_name;
    steedosData.applicantContext = instance.applicant_name;
  }

  steedosData.instance = instance;
  steedosData.form_version = form_version;
  steedosData.locale = locale;
  steedosData.utcOffset = user.utcOffset;
  steedosData.space = instance.space;
  steedosData.sessionUserId = user._id;

  if (Meteor.isServer) {
    if (options != null ? options.editable : void 0) {
      form = db.forms.findOne({
        _id: instance.form
      });
      flow = db.flows.findOne({
        _id: instance.flow
      });
      steedosData.startStepEditableFields = _getStartStepEditableFields(form.current.fields, flow.current.steps);
    }
  }

  return steedosData;
};

InstanceReadOnlyTemplate.formatDate = function (date, utcOffset) {
  var passing;

  if (Meteor.isServer) {
    passing = false;
  } else {
    passing = true;
  }

  if (!utcOffset && utcOffset !== 0) {
    utcOffset = 8;
  }

  return moment(date).utcOffset(utcOffset, passing).format("YYYY-MM-DD HH:mm");
};

InstanceReadOnlyTemplate.getInstanceView = function (user, space, instance, options) {
  var body, instanceCompiled, instanceRenderFunction, instanceTemplate, steedosData;
  steedosData = _getTemplateData(user, space, instance, options);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  instanceTemplate = TemplateManager.getTemplate(instance, options != null ? options.templateName : void 0);
  instanceTemplate = instanceTemplate.replace(/afSelectUser/g, "afSelectUserRead");

  if (!(options != null ? options.editable : void 0)) {
    instanceTemplate = instanceTemplate.replace(/afFormGroup/g, "afFormGroupRead");
  }

  instanceCompiled = SpacebarsCompiler.compile(instanceTemplate, {
    isBody: true
  });
  instanceRenderFunction = eval(instanceCompiled);
  Template.instance_readonly_view = new Blaze.Template("instance_readonly_view", instanceRenderFunction);
  Template.instance_readonly_view.steedosData = steedosData;
  Template.instance_readonly_view.helpers(InstanceformTemplate.helpers);
  InstanceReadOnlyTemplate.init(steedosData);
  body = Blaze.toHTMLWithData(Template.instance_readonly_view, steedosData);
  return "<div id='instanceform' >\n	" + body + "\n</div>";
};

InstanceReadOnlyTemplate.getTracesView = function (user, space, instance, options) {
  var body, form, steedosData, traceCompiled, traceRenderFunction, tracesHtml;
  steedosData = _getTemplateData(user, space, instance);
  form = db.forms.findOne(instance.form);

  if (form.instance_style === "table" || (options != null ? options.templateName : void 0) === "table") {
    tracesHtml = _getViewHtml('client/views/instance/traces_table.html');
  } else {
    tracesHtml = _getViewHtml('client/views/instance/traces.html');
  }

  traceCompiled = SpacebarsCompiler.compile(tracesHtml, {
    isBody: true
  });
  traceRenderFunction = eval(traceCompiled);
  Template.trace_readonly_view = new Blaze.Template("trace_readonly_view", traceRenderFunction);
  Template.trace_readonly_view.steedosData = steedosData;
  Template.trace_readonly_view.helpers(TracesTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.trace_readonly_view, instance.traces);
  return body;
};

InstanceReadOnlyTemplate.getAttachmentView = function (user, space, instance) {
  var attachmentCompiled, attachmentHtml, attachmentRenderFunction, body, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  attachmentHtml = _getViewHtml('client/views/instance/instance_attachments.html');
  attachmentCompiled = SpacebarsCompiler.compile(attachmentHtml, {
    isBody: true
  });
  attachmentRenderFunction = eval(attachmentCompiled);
  Template.attachments_readonly_view = new Blaze.Template("attachments_readonly_view", attachmentRenderFunction);
  Template.attachments_readonly_view.steedosData = steedosData;
  Template.attachments_readonly_view.helpers(InstanceAttachmentTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.attachments_readonly_view);
  return body;
};

InstanceReadOnlyTemplate.getRelatedInstancesView = function (user, space, instance, options) {
  var body, relatedInstancesCompiled, relatedInstancesHtml, relatedInstancesRenderFunction, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  relatedInstancesHtml = _getViewHtml('client/views/instance/related_instances.html');
  relatedInstancesCompiled = SpacebarsCompiler.compile(relatedInstancesHtml, {
    isBody: true
  });
  relatedInstancesRenderFunction = eval(relatedInstancesCompiled);
  Template.related_instances_view = new Blaze.Template("related_instances_view", relatedInstancesRenderFunction);
  Template.related_instances_view.steedosData = steedosData;
  Template.related_instances_view.helpers(RelatedInstances.helpers);
  body = Blaze.toHTMLWithData(Template.related_instances_view, steedosData);
  return body;
};

InstanceReadOnlyTemplate.getRelatedRecordsView = function (user, space, instance, options) {
  var body, relatedRecordsCompiled, relatedRecordsHtml, relatedRecordsRenderFunction, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  relatedRecordsHtml = _getViewHtml('client/views/instance/related_records.html');
  relatedRecordsCompiled = SpacebarsCompiler.compile(relatedRecordsHtml, {
    isBody: true
  });
  relatedRecordsRenderFunction = eval(relatedRecordsCompiled);
  Template.related_records_view = new Blaze.Template("related_records_view", relatedRecordsRenderFunction);
  Template.related_records_view.steedosData = steedosData;
  Template.related_records_view.helpers(RelatedRecords.helpers);
  body = Blaze.toHTMLWithData(Template.related_records_view, steedosData);
  return body;
};

InstanceReadOnlyTemplate.getOnLoadScript = function (instance) {
  var form_script, form_version;
  form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
  form_script = form_version.form_script;

  if (form_script && form_script.replace(/\n/g, "").replace(/\s/g, "").length > 0) {
    form_script = "CoreForm = {};CoreForm.instanceform = {};" + form_script;
    return form_script += ";if(CoreForm.form_OnLoad){window.onload = CoreForm.form_OnLoad();}";
  } else {
    return form_script = "";
  }
};

InstanceReadOnlyTemplate.getInstanceHtml = function (user, space, instance, options) {
  var allCssLink, attachment, body, creatorService, cssHref, form, formDescription, formDescriptionHtml, html, ins_record_ids, instanceBoxStyle, instance_style, locale, onLoadScript, openFileScript, ref, ref1, related_instances, related_records, showTracesBtn, showTracesScript, trace, traceCheck, width;
  body = InstanceReadOnlyTemplate.getInstanceView(user, space, instance, options);
  onLoadScript = InstanceReadOnlyTemplate.getOnLoadScript(instance);
  creatorService = (ref = Meteor.settings["public"].webservices) != null ? (ref1 = ref.creator) != null ? ref1.url : void 0 : void 0;
  ins_record_ids = instance.record_ids;
  locale = _getLocale(user);
  openFileScript = "if(window.isNode && isNode()){\n	attachs = document.getElementsByClassName(\"ins_attach_href\");\n	for(var i = 0; i < attachs.length; i++){\n		attach = attachs[i];\n		attach.addEventListener(\"click\", function(e){\n			if(isImage(this.dataset.type) || isHtml(this.dataset.type)){\n				e.preventDefault();\n				openWindow(\"/api/files/instances/\" + this.dataset.id);\n			}else if(nw_core.canOpenFile(this.dataset.name)){\n				e.preventDefault();\n				nw_core.openFile(this.href, this.dataset.name)\n			}\n		});\n	}\n}\n\nvar flow = \"" + instance.flow + "\";\nvar space = \"" + instance.space + "\";\n\nfunction getCookie(name){\n	let pattern = RegExp(name + \"=.[^;]*\")\n	let matched = document.cookie.match(pattern)\n	if(matched){\n		let cookie = matched[0].split('=')\n		return cookie[1]\n	}\n	return ''\n}\n\nvar records = document.getElementsByClassName(\"ins-related-records\");\nfor(var i = 0; i < records.length; i++){\n		var record = records[i];\n		record.addEventListener(\"click\", function(e){\n			var creatorService = \"" + creatorService + "\"\n			var ins_record_ids = " + JSON.stringify(ins_record_ids) + "\n			if(creatorService && ins_record_ids && ins_record_ids.length > 0){\n				var objcetName = ins_record_ids[0].o\n				var id = ins_record_ids[0].ids[0]\n				var uobj = {};\n				uobj[\"X-User-Id\"] = getCookie(\"X-User-Id\");\n				uobj[\"X-Auth-Token\"] = getCookie(\"X-Auth-Token\");\n				redirectUrl = creatorService + \"app/-/\" + objcetName + \"/view/\" + id + \"?\" + $.param(uobj);\n				openWindow(redirectUrl);\n			}\n		});\n	}\n";

  if (!Steedos.isMobile()) {
    form = db.forms.findOne(instance.form);

    if ((form != null ? form.instance_style : void 0) === 'table') {
      instance_style = "instance-table";
    }
  }

  if ((options != null ? options.templateName : void 0) === 'table') {
    instance_style = "instance-table";
  }

  if (options != null ? options.instance_style : void 0) {
    instance_style = options.instance_style;
  }

  if (!options || options.showTrace === true) {
    trace = InstanceReadOnlyTemplate.getTracesView(user, space, instance);
  } else {
    trace = "";
  }

  instanceBoxStyle = "";

  if (instance && instance.final_decision) {
    if (instance.final_decision === "approved") {
      instanceBoxStyle = "box-success";
    } else if (instance.final_decision === "rejected") {
      instanceBoxStyle = "box-danger";
    }
  }

  if (!options || options.showAttachments === true) {
    attachment = InstanceReadOnlyTemplate.getAttachmentView(user, space, instance);
    related_instances = InstanceReadOnlyTemplate.getRelatedInstancesView(user, space, instance, options);
    related_records = InstanceReadOnlyTemplate.getRelatedRecordsView(user, space, instance, options);
  } else {
    attachment = "";
    related_instances = "";
    related_records = "";
  }

  width = "960px";

  if (options != null ? options.width : void 0) {
    width = "";
  }

  cssHref = Meteor.absoluteUrl("steedos-css");
  allCssLink = "<link rel=\"stylesheet\" type=\"text/css\" class=\"__meteor-css__\" href=\"" + cssHref + "\">";
  traceCheck = "";

  if (!_.isEmpty(trace)) {
    traceCheck = "checked";
  }

  if ((options != null ? options.tagger : void 0) === 'email' || (options != null ? options.editable : void 0)) {
    showTracesBtn = "";
  } else {
    showTracesBtn = "<div class=\"navigation-bar btn-group no-print\" style=\"min-width: 600px; z-index: 999\">\n	<div class=\"print-tool\">\n		<label class=\"cbx-label\"><input type=\"checkbox\" class=\"cbx-print cbx-print-attachments\" id=\"cbx-print-attachments\" checked=\"checked\"><span>" + TAPi18n.__('instance_attachment', {}, locale) + "</span></label>\n		<label class=\"cbx-label\"><input type=\"checkbox\" class=\"cbx-print cbx-print-traces\" id=\"cbx-print-traces\" checked=\"" + traceCheck + "\"><span>" + TAPi18n.__('instance_approval_history', {}, locale) + "</span></label>\n	</div>\n</div>";
  }

  showTracesScript = "$( document ).ready(function(){\n	var b = document.getElementById('cbx-print-traces');\n	var t = document.getElementsByClassName('instance-traces')[0];\n	if (b && b.checked && t){\n		t.style = 'display: block;'\n	} else if(t){\n		t.style = 'display: none;'\n	}\n	if(b){\n		b.addEventListener('change', function(e){\n			if (e.target.checked){\n				t.style = 'display: block;'\n			} else {\n				t.style = 'display: none;'\n			}\n		});\n	}\n\n\n	var attachmentsCheckbox = document.getElementById('cbx-print-attachments');\n	var attachmentsView = document.getElementsByClassName('attachments-section')[0];\n	if (attachmentsCheckbox && attachmentsCheckbox.checked && attachmentsView){\n		attachmentsView.style = 'display: block;'\n	} else if(attachmentsView){\n		attachmentsView.style = 'display: none;'\n	}\n	if(attachmentsCheckbox){\n		attachmentsCheckbox.addEventListener('change', function(e){\n			if (e.target.checked){\n				attachmentsView.style = 'display: block;'\n			} else {\n				attachmentsView.style = 'display: none;'\n			}\n		});\n	}\n});\n";

  if (options != null ? options.styles : void 0) {
    allCssLink = "";
  }

  form = db.forms.findOne({
    _id: instance.form
  });
  formDescriptionHtml = "";

  if (form) {
    formDescription = form.description;

    if (formDescription) {
      formDescription = formDescription.replace(/\n/g, "<br/>");
      formDescriptionHtml = "<div class=\"box-header  with-border instance-header\">\n	<div>\n		" + formDescription + "\n	</div>\n</div>";
    }
  }

  html = "<!DOCTYPE html>\n<html>\n	<head>\n		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n		" + allCssLink + "\n		<script src=\"https://www.steedos.com/website/libs/jquery.min.js\" type=\"text/javascript\"></script>\n		<script src=\"/js/nw_core.js\" type=\"text/javascript\"></script>\n		" + (options.plugins || "") + "\n\n		<style>\n			.steedos{\n				width: " + width + ";\n				margin-left: auto;\n				margin-right: auto;\n			}\n\n			.instance-view .instance-name{\n				display: inline !important\n			}\n			.box-tools{\n				display: none;\n			}\n			.box.collapsed-box .box-body,.box.collapsed-box .box-footer {\n			  display: block;\n			}\n\n			body{\n				background: azure !important;\n			}\n\n			.instance-view .instance-traces{\n				padding-left: 15px;\n				padding-right: 15px;\n			}\n\n			" + ((options != null ? options.styles : void 0) || "") + "\n		</style>\n	</head>\n	<body>\n		<div class=\"steedos workflow instance-print\">\n			<div class=\"skin-green skin-admin-lte\">\n				<div class=\"wrapper\">\n					<div class=\"content-wrapper\">\n						" + showTracesBtn + "\n						<div class=\"instance-print\">\n							<div class=\"instance " + instance_style + "\">\n								<form name=\"instanceForm\">\n									<div class=\"instance-form box " + instanceBoxStyle + "\">\n										" + formDescriptionHtml + "\n										<div class=\"box-body\">\n											<div class=\"col-md-12\">\n												<div class='attachments-section'>\n													" + attachment + "\n													" + related_instances + "\n													" + related_records + "\n												</div>\n												" + body + "\n											</div>\n										</div>\n									</div>\n								</form>\n								" + trace + "\n							</div>\n\n						</div>\n					</div>\n				</div>\n			</div>\n		</div>\n	</body>\n	<script>" + openFileScript + ";" + onLoadScript + ";" + showTracesScript + "</script>\n</html>";
  return html;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/template_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var formId;
TemplateManager = {};
formId = 'instanceform';

TemplateManager.instance_title = function () {
  var pageTitle, pageTitleTrClass, val;
  pageTitle = "{{instance.name}}";
  pageTitleTrClass = "instance-name";

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) {
    pageTitle = "{{> afFormGroup name=\"" + CoreForm.pageTitleFieldName + "\" label=false}}";
    pageTitleTrClass = "";
  }

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitle : void 0) {
    pageTitle = "" + CoreForm.pageTitle;
    pageTitleTrClass = "";
  }

  val = {
    pageTitle: pageTitle,
    pageTitleTrClass: pageTitleTrClass
  };
  return val;
};

TemplateManager.handleTableTemplate = function (instance, _export) {
  var table_fields, template;
  template = "<div class='instance-template'>\n	<table class=\"table-page-title form-table no-border text-align-center\" style=\"width: 100%;display: inline-table;\">\n		<tr class=\"" + this.instance_title().pageTitleTrClass + "\">\n			<td class=\"instance-table-name-td page-title\">\n				" + this.instance_title().pageTitle + "\n			</td>\n		</tr>\n\n	</table>\n	<table class=\"table-page-body form-table\">\n			<tr style=\"height:0px\">\n				<th style='width: 16%'></th>\n				<th></th>\n				<th style='width: 16%'></th>\n				<th></th>\n			</tr>";
  table_fields = InstanceformTemplate.helpers.table_fields(instance);
  table_fields.forEach(function (table_field) {
    var field_permission, pureCode, required, title_permission;
    required = "";

    if (!(typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) || (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) !== table_field.code) {
      if (table_field.is_required) {
        required = "is-required";
      }

      if (_export) {
        required = "";
      }

      pureCode = Steedos.removeSpecialCharacter(table_field.code);

      if (InstanceformTemplate.helpers.isOpinionField(table_field)) {
        template += table_field.tr_start;
        template += "<td class=\"td-title " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field opinion-field opinion-field-" + pureCode + " automatic\" colspan = \"" + table_field.td_colspan + "\">\n	{{> instanceSignText name=\"" + table_field.code + "\"}}\n</td>";
        return template += table_field.tr_end;
      } else {
        if (InstanceformTemplate.helpers.includes(table_field.type, 'section,table')) {
          template += table_field.tr_start;
          template += "<td class=\"td-childfield td-childfield-" + pureCode + "\" colspan = \"" + table_field.td_colspan + "\">\n   {{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        } else {
          template += table_field.tr_start;

          if (_export) {
            title_permission = "";
            field_permission = "";
          } else {
            title_permission = "title-" + table_field.permission;
            field_permission = "field-" + table_field.permission;
          }

          template += "<td class=\"td-title td-title-" + pureCode + " " + title_permission + " " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field td-field-" + pureCode + " " + field_permission + "\" colspan = \"" + table_field.td_colspan + "\">\n	{{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        }
      }
    }
  });
  template += "	</table>\n\n	<table class=\"table-page-footer form-table no-border\">\n		<tr class=\"applicant-wrapper\">\n			<td class=\"nowrap\">\n				<div class='inline-left'>\n					<label class=\"control-label\">{{_t \"instance_initiator\"}}：</label>\n				</div>\n				<div class='instance-table-wrapper-td inline-left'>\n					{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n				</div>\n			</td>\n			<td class=\"nowrap\">\n				<div class='pull-left'>\n					<div class='inline-left'>\n						<label>{{_t \"instance_submit_date\"}}：</label>\n					</div>\n					<div class='inline-right'>\n						<div class=\"form-group\">\n							{{formatDate instance.submit_date '{\"format\":\"YYYY-MM-DD\"}'}}\n						</div>\n					</div>\n				</div>\n			</td>\n		</tr>\n	</table>\n</div>";
  return template;
};

TemplateManager._template = {
  "default": function (instance) {
    var template;
    template = "<div class=\"with-border col-md-12\">\n	<div class=\"instance-name\">\n		<h3 class=\"box-title\">" + TemplateManager.instance_title().pageTitle + "</h3>\n		<span class=\"help-block\"></span>\n	</div>\n	<span class=\"help-block\"></span>\n</div>\n{{#each steedos_form.fields}}\n	{{#if isOpinionField this}}\n		<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}} field-{{this.code}}\">\n			<div class=\"form-group automatic opinion-field-{{this.code}}\">\n				<label class=\"control-label\">{{afFieldLabelText name=this.code}}</label>\n\n				{{> instanceSignText name=this.code}}\n			</div>\n		</div>\n	{{else}}\n		{{#if includes this.type 'section,table'}}\n			<div class=\"col-md-12 field-{{this.code}}\">\n				{{> afFormGroup name=this.code label=false}}\n			</div>\n		{{else}}\n			<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}} field-{{this.code}}\">\n			{{> afFormGroup name=this.code}}\n			</div>\n		{{/if}}\n	{{/if}}\n{{/each}}\n<div class=\"col-md-12\">\n	<div class=\"applicant-wrapper form-group form-horizontal\">\n	<div class=\"input-group\">\n		<div class=\"input-group-addon\">\n		  {{_t \"instance_initiator\"}}&nbsp;:\n		</div>\n		{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n	  </div>\n	</div>\n</div>";
    return template;
  },
  table: function (instance) {
    return TemplateManager.handleTableTemplate(instance);
  }
};
TemplateManager._templateHelps = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control',
        style: 'padding:6px 12px;width:140px;display:inline'
      }
    };
    data.atts.disabled = true;
    return data;
  }
};
({
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = formId;
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  }
});

TemplateManager.getTemplate = function (instance, templateName) {
  var flow, form;
  flow = db.flows.findOne(instance.flow);
  form = db.forms.findOne(instance.form);

  if (templateName) {
    if (templateName === 'table') {
      return TemplateManager._template.table(instance);
    }

    return TemplateManager._template["default"](instance);
  }

  if (typeof Session !== "undefined" && Session !== null ? Session.get("instancePrint") : void 0) {
    if (flow != null ? flow.print_template : void 0) {
      return "<div class='instance-template'>" + flow.print_template + "</div>";
    } else {
      if (flow != null ? flow.instance_template : void 0) {
        return "<div class='instance-template'>" + flow.instance_template + "</div>";
      } else {
        return TemplateManager._template.table(instance);
      }
    }
  } else {
    if (Steedos.isMobile()) {
      return TemplateManager._template["default"](instance);
    }

    if (flow != null ? flow.instance_template : void 0) {
      return "<div class='instance-template'>" + flow.instance_template + "</div>";
    }

    if (form != null ? form.instance_style : void 0) {
      if (form.instance_style === 'table') {
        return TemplateManager._template.table(instance);
      }

      return TemplateManager._template["default"](instance);
    } else {
      return TemplateManager._template["default"](instance);
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"coreform":{"inputTypes":{"coreform-table":{"steedos-table.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/coreform/inputTypes/coreform-table/steedos-table.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
SteedosTable = {};
SteedosTable.formId = "instanceform";

SteedosTable.checkItem = function (field, item_index) {
  var fieldObj = SteedosTable.getField(field);
  var fieldVal = SteedosTable.getItemModalValue(field, item_index);
  var sf_name = '';
  var rev = true;
  fieldObj.sfields.forEach(function (sf) {
    if (sf.permission == 'editable') {
      sf_name = fieldObj.code + "." + sf.code;

      if (!InstanceManager.checkFormFieldValue($("[name='" + sf_name + "']")[0])) {
        rev = false;
      }
    }
  });
  return rev;
};

SteedosTable.setTableItemValue = function (field, item_index, item_value) {
  var tableValue = SteedosTable.getTableValue(field);
  tableValue[item_index] = item_value;
};

SteedosTable.getTableItemValue = function (field, item_index) {
  return SteedosTable.getTableValue(field)[item_index];
};

SteedosTable.removeTableItem = function (field, item_index) {
  var item_value = SteedosTable.getTableItemValue(field, item_index);
  item_value.removed = true;
};

SteedosTable.setTableValue = function (field, value) {
  $("table[name='" + field + "']").val({
    val: value
  });
};

SteedosTable.getTableValue = function (field) {
  return $("table[name='" + field + "']").val().val;
};

SteedosTable.getValidValue = function (field) {
  var value = SteedosTable.getTableValue(field);

  if (!value) {
    return;
  }

  var validValue = [];
  value.forEach(function (v) {
    if (!v.removed) {
      validValue.push(v);
    }
  });
  return validValue;
};

SteedosTable.handleData = function (field, values) {
  if (!values || !(values instanceof Array)) {
    return values;
  }

  var fieldObj = SteedosTable.getField(field);
  values.forEach(function (v) {
    fieldObj.sfields.forEach(function (f) {
      if (f.type == 'user' || f.type == 'group') {
        var value = v[f.code];

        if (f.is_multiselect) {
          if (value && value.length > 0 && typeof value[0] == 'object') {
            v[f.code] = v[f.code].getProperty("id");
          }
        } else {
          if (value && typeof value == 'object') {
            v[f.code] = v[f.code].id;
          }
        }
      } else if (f.type == 'dateTime') {
        var value = v[f.code];

        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
            v[f.code] = value;
          }
        }
      }
    });
  });
  return values;
};

SteedosTable.getField = function (field) {
  var instanceFields = WorkflowManager.getInstanceFields();
  if (!instanceFields) return;
  var fieldObj = instanceFields.findPropertyByPK("code", field);
  return fieldObj;
};

SteedosTable.getModalData = function (field, index) {
  var data = {};
  var fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return;
  }

  data.field = fieldObj;
  data.field.formula = Form_formula.getFormulaFieldVariable("Form_formula.field_values", fieldObj.sfields);
  data.value = {};
  data.value[field] = SteedosTable.getTableItemValue(field, index);
  data.index = index;
  return data;
};

SteedosTable.getItemModalValue = function (field, item_index) {
  if (!AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index)) {
    return {};
  }

  var item_value = AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index).insertDoc[field];
  return item_value;
};

SteedosTable.addItem = function (field, index, _item_value) {
  var keys = SteedosTable.getKeys(field);

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  $("tbody[name='" + field + "Tbody']").append(SteedosTable.getTr(keys, item_value, index, field, true));
};

SteedosTable.updateItem = function (field, index, _item_value) {
  var item = $("tr[name='" + field + "_item_" + index + "']");

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  if (item && item.length > 0) {
    var keys = SteedosTable.getKeys(field);
    var tds = SteedosTable.getRemoveTd(field, index);
    var sfields = SteedosTable.getField(field).sfields;
    keys.forEach(function (key) {
      var sfield = sfields.findPropertyByPK("code", key);
      var value = item_value[key];
      tds = tds + SteedosTable.getTd(sfield, index, value);
    });
    item.empty();
    item.append(tds);
  } else {
    SteedosTable.addItem(field, index);
  }

  if (SteedosTable.getTableValue(field)) {
    SteedosTable.setTableItemValue(field, index, item_value); //SteedosTable.valueHash[field][index] = item_value;
  } else {
    //SteedosTable.valueHash[field] = [item_value];
    SteedosTable.setTableValue(field, [item_value]);
  } //执行主表公式计算


  InstanceManager.runFormula(field);
};

SteedosTable.removeItem = function (field, index) {
  $("tr[name='" + field + "_item_" + index + "']").hide();
  SteedosTable.removeTableItem(field, index);
  InstanceManager.runFormula(field);
};

SteedosTable.showModal = function (field, index, method) {
  var modalData = SteedosTable.getModalData(field, index);
  modalData.method = method;
  Modal.show("steedosTableModal", modalData);
};

SteedosTable.getKeys = function (field) {
  if (!AutoForm.getCurrentDataForForm(SteedosTable.formId)) {
    return [];
  }

  var ss = AutoForm.getFormSchema(SteedosTable.formId);
  var keys = [];

  if (ss.schema(field + ".$").type === Object) {
    keys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');
  }

  return keys;
};

SteedosTable.getThead = function (field, editable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return '';
  }

  var thead = '',
      trs = '',
      label = '',
      width = 100;

  if (editable) {
    // trs = "<th class='removed'></th>"
    trs = "";
  }

  var sfields = fieldObj.sfields;

  if (!sfields) {
    return thead;
  }

  var sf_length = sfields.length;

  if (sf_length > 0) {
    var wide_fields = sfields.filterProperty("is_wide", true);
    width = 100 / (sf_length + wide_fields.length);
  }

  sfields.forEach(function (sf, index) {
    label = sf.name != null && sf.name.length > 0 ? sf.name : sf.code;
    trs = trs + "<td "; // nowrap='nowrap'

    trs = trs + " class='title " + sf.type + "'";

    if (index != sf_length - 1) {
      if (sf.is_wide) {
        trs = trs + "style='width:" + width * 2 + "%'";
      } else {
        trs = trs + "style='width:" + width + "%'";
      }
    }

    trs = trs + ">" + label + "</td>";
  });
  thead = '<tr>' + trs + '</tr>';
  return thead;
};

SteedosTable.getTbody = function (keys, field, values, editable, sfieldsEditable) {
  var tbody = "";

  if (values instanceof Array) {
    values.forEach(function (value, index) {
      tbody = tbody + SteedosTable.getTr(keys, value, index, field, editable, sfieldsEditable);
    });
  }

  return tbody;
};

SteedosTable.getTr = function (keys, item_value, index, field, editable, sfieldsEditable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);
  var tr = "<tr id='" + fieldObj.code + "_item_" + index + "' name='" + fieldObj.code + "_item_" + index + "' data-index='" + index + "'";

  if (editable || sfieldsEditable) {
    tr = tr + "' class='item edit'";
  } else {
    if (Steedos.isMobile()) {
      tr = tr + " class='item item-readonly'";
    } else {
      tr = tr + " class='item '";
    }
  }

  if (item_value.removed) {
    tr = tr + " style='display:none' ";
  }

  tr = tr + "'>";
  var tds = "";

  if (editable) {
    tds = SteedosTable.getRemoveTd(fieldObj.code, index);
  }

  var sfields = fieldObj.sfields;
  keys.forEach(function (key) {
    var sfield = sfields.findPropertyByPK("code", key);
    var value = item_value[key];
    tds = tds + SteedosTable.getTd(sfield, index, value);
  });
  tr = tr + tds + "</tr>";
  return tr;
};

SteedosTable.getRemoveTd = function (field, index) {
  // return "<td class='steedosTable-item-remove removed' data-index='" + index + "'><i class='fa fa-times' aria-hidden='true'></td>";
  return "";
};

SteedosTable.getTd = function (field, index, value) {
  var td = "<td ";
  td = td + " class='steedosTable-item-field " + field.type + "' ";
  var td_value = "";

  if (Meteor.isClient) {
    td_value = SteedosTable.getTDValue(field, value);
  } else {
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    td_value = InstanceReadOnlyTemplate.getValue(value, field, locale, utcOffset);
  }

  td = td + " data-index='" + index + "'>" + td_value + "</td>";
  return td;
};

SteedosTable.getTDValue = function (field, value) {
  var td_value = "";

  if (!field) {
    return td_value;
  }

  try {
    switch (field.type) {
      case 'user':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaSpaceUsers(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var u = CFDataManager.getFormulaSpaceUsers(value);
              td_value = u ? u.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'group':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaOrganizations(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var o = CFDataManager.getFormulaOrganization(value);
              td_value = o ? o.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'checkbox':
        if (value === true || value == 'true') {
          td_value = TAPi18n.__("form_field_checkbox_yes");
        } else {
          td_value = TAPi18n.__("form_field_checkbox_no");
        }

        break;

      case 'email':
        td_value = value ? "<a href='mailto:" + value + "'>" + value + "</a>" : "";
        break;

      case 'url':
        if (value) {
          if (value.indexOf("http") == 0) {
            try {
              td_value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
            } catch (e) {
              td_value = "<a href='' target='_blank'>" + value + "</a>";
            }
          } else {
            td_value = "<a href='http://" + encodeURI(value) + "' target='_blank'>http://" + value + "</a>";
          }
        } else {
          td_value = "";
        }

        break;

      case 'password':
        td_value = '******';
        break;

      case 'date':
        if (value) {
          if (value.length == 10) {
            var t = value.split("-");
            year = t[0];
            month = t[1];
            date = t[2];
            value = new Date(year, month - 1, date);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd');
        }

        break;

      case 'dateTime':
        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd HH:mm');
        }

        break;

      case 'number':
        if (value || value == 0) {
          td_value = Steedos.numberToString(value, field.digits);
        }

        break;

      case 'odata':
        if (value) {
          if (field.is_multiselect) {
            td_value = _.pluck(value, '@label').toString();
          } else {
            td_value = value['@label'];
          }
        }

        break;

      default:
        td_value = value ? value : '';
        break;
    }
  } catch (e) {
    e;
    return '';
  }

  return td_value;
};

if (Meteor.isClient) {
  AutoForm.addInputType("table", {
    template: "afTable",
    valueOut: function () {
      var name = this.data("schemaKey");
      return SteedosTable.getValidValue(name);
    },
    valueConverters: {
      "stringArray": AutoForm.valueConverters.stringToStringArray,
      "number": AutoForm.valueConverters.stringToNumber,
      "numerArray": AutoForm.valueConverters.stringToNumberArray,
      "boolean": AutoForm.valueConverters.stringToBoolean,
      "booleanArray": AutoForm.valueConverters.stringToBooleanArray,
      "date": AutoForm.valueConverters.stringToDate,
      "dateArray": AutoForm.valueConverters.stringToDateArray
    },
    contextAdjust: function (context) {
      if (typeof context.atts.maxlength === 'undefined' && typeof context.max === 'number') {
        context.atts.maxlength = context.max;
      }

      return context;
    }
  });
  Template.afTable.events({
    'tap .steedos-table .steedosTable-item-add,.add-item-tr': function (event, template) {
      var name = template.data.name;
      var tableValue = SteedosTable.getTableValue(name);
      var new_item_index = tableValue ? tableValue.length : 0;
      SteedosTable.showModal(name, new_item_index, "add");
    },
    'tap .steedos-table .steedosTable-item-field': function (event, template) {
      if (template.data.atts.editable || template.data.atts.sfieldsEditable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "edit");
      }
    },
    'tap .steedos-table .steedosTable-item-remove': function (event, template) {
      var field = template.data.name;
      var item_index = event.currentTarget.dataset.index;
      Session.set("instance_change", true);
      SteedosTable.removeItem(field, item_index);
    },
    'tap .steedos-table .item-readonly': function (event, template) {
      if (!template.data.atts.editable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "read");
      }
    }
  });

  Template.afTable.rendered = function () {
    var field = this.data.name;
    var sfieldsEditable = this.data.atts.sfieldsEditable;
    var keys = SteedosTable.getKeys(field);
    var validValue = SteedosTable.handleData(field, this.data.value);
    SteedosTable.setTableValue(field, validValue);
    $("thead[name='" + field + "Thead']").html(SteedosTable.getThead(field, this.data.atts.editable));
    $("tbody[name='" + field + "Tbody']").html(SteedosTable.getTbody(keys, field, SteedosTable.getTableValue(field), this.data.atts.editable, sfieldsEditable));
    str = t("steedos_table_add_item");
    addItemTr = "<tr class='add-item-tr'><td colspan='" + keys.length + "'><i class='ion ion-plus-round'></i>" + str + "</td></tr>";

    if (this.data.atts.editable) {
      $("tfoot[name='" + field + "Tfoot']").append(addItemTr);
    }

    this.autorun(function () {
      var data = Template.currentData();
      var field = data.name;
      var keys = SteedosTable.getKeys(field);
      var validValue = SteedosTable.handleData(field, data.value);
      SteedosTable.setTableValue(field, validValue);
      $("tbody[name='" + field + "Tbody']").html(SteedosTable.getTbody(keys, field, SteedosTable.getTableValue(field), data.atts.editable, sfieldsEditable));
    });
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"views":{"instance":{"_image_sign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_image_sign.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
ImageSign.helpers = {
  spaceUserSign: function (userId) {
    var space, spaceUserSign;
    space = "";

    if (Meteor.isServer) {
      space = Template.instance().view.template.steedosData.space;
    } else {
      space = Session.get("spaceId");
    }

    spaceUserSign = db.space_user_signs.findOne({
      space: space,
      user: userId
    });
    return spaceUserSign;
  },
  imageURL: function (userId) {
    var absolute, spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(userId);
    absolute = false;

    if (Meteor.isServer) {
      absolute = Template.instance().view.template.steedosData.absolute;
    }

    if (spaceUserSign != null ? spaceUserSign.sign : void 0) {
      if (absolute) {
        return Meteor.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      } else {
        return Steedos.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      }
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_traces_handler.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_traces_handler.coffee                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
TracesHandler.helpers = {
  showSignImage: function (handler, is_finished, judge) {
    var spaceUserSign;

    if (!is_finished) {
      return false;
    }

    if (['returned', 'terminated', 'retrieved'].includes(judge)) {
      return false;
    }

    spaceUserSign = ImageSign.helpers.spaceUserSign(handler);

    if (spaceUserSign != null ? spaceUserSign.sign : void 0) {
      return true;
    } else {
      return false;
    }
  },
  objectUrl: function (object_name, record_id, app_id) {
    return Creator.getObjectUrl(object_name, record_id, app_id);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_form.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_form.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceformTemplate.helpers = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: steedos_instance.applicant_name
    };

    if (!steedos_instance || steedos_instance.state !== "draft") {
      data.atts.disabled = true;
    }

    return data;
  },
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = "instanceform";
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  empty: function (val) {
    if (val) {
      return false;
    } else {
      return true;
    }
  },
  unempty: function (val) {
    if (val) {
      return true;
    } else {
      return false;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  unequals: function (a, b) {
    return !(a === b);
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  include: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  formatDate: function (date, options) {
    if (!date) {
      return "";
    }

    if (options && typeof options === 'string') {
      options = JSON.parse(options);
    }

    if (!options.format) {
      options = {
        format: "YYYY-MM-DD HH:mm"
      };
    }

    return moment(date).format(options.format);
  },
  traces: function () {
    var flow, instance, locale, ref, ref1, ref2, ref3, steedosData, steps, traces;

    if (Meteor.isServer) {
      steedosData = (ref = Template.instance()) != null ? (ref1 = ref.view) != null ? (ref2 = ref1.template) != null ? ref2.steedosData : void 0 : void 0 : void 0;
      instance = steedosData != null ? steedosData.instance : void 0;
      flow = InstanceReadOnlyTemplate.getFlowVersion(instance);
      locale = steedosData != null ? steedosData.locale : void 0;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      instance = WorkflowManager.getInstance();
      flow = WorkflowManager.getInstanceFlowVersion();
      locale = Session.get("TAPi18n::loaded_lang");
    }

    if (!instance || !flow) {
      return {};
    }

    steps = flow.steps;
    traces = {};

    if ((ref3 = instance.traces) != null) {
      ref3.forEach(function (trace) {
        var approves, ref4, step;
        step = steps.findPropertyByPK("_id", trace.step);
        approves = [];

        if ((ref4 = trace.approves) != null) {
          ref4.forEach(function (approve) {
            var judge_name;

            if (trace.is_finished === true) {
              if (approve.judge === 'approved') {
                judge_name = TAPi18n.__("Instance State approved", {}, locale);
              } else if (approve.judge === 'rejected') {
                judge_name = TAPi18n.__("Instance State rejected", {}, locale);
              } else if (approve.judge === 'terminated') {
                judge_name = TAPi18n.__("Instance State terminated", {}, locale);
              } else if (approve.judge === 'reassigned') {
                judge_name = TAPi18n.__("Instance State reassigned", {}, locale);
              } else if (approve.judge === 'relocated') {
                judge_name = TAPi18n.__("Instance State relocated", {}, locale);
              } else if (approve.judge === '') {
                judge_name = "";
              } else {
                judge_name = "";
              }
            } else {
              judge_name = TAPi18n.__("Instance State pending", {}, locale);
            }

            return approves.push({
              _id: approve._id,
              handler: approve.user,
              handler_name: approve.handler_name,
              handler_organization_name: approve.handler_organization_name,
              handler_organization_fullname: approve.handler_organization_fullname,
              finish_date: approve.finish_date,
              judge: approve.judge,
              judge_name: judge_name,
              description: approve.description,
              is_finished: approve.is_finished,
              type: approve.type,
              opinion_fields_code: approve.opinion_fields_code,
              sign_field_code: approve.sign_field_code,
              is_read: approve.is_read,
              sign_show: approve.sign_show
            });
          });
        }

        if (step) {
          if (step.name in traces) {
            return traces[step.name] = traces[step.name].concat(approves);
          } else {
            return traces[step.name] = approves;
          }
        }
      });
    }

    return traces;
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  },
  table_fields: function (instance) {
    var fields, form_version;

    if (Meteor.isClient) {
      form_version = WorkflowManager.getInstanceFormVersion();
    } else {
      form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
    }

    if (form_version) {
      fields = _.clone(form_version.fields);
      fields.forEach(function (field, index) {
        var after_field, before_field, pre_fields, pre_wide_fields, td_colspan, tr_end, tr_start;
        field.tr_start = "";
        field.tr_end = "";
        td_colspan = 1;

        if ((typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) === field.code) {
          field.is_wide = true;
        }

        if (field.formula && field.type !== 'odata') {
          field.permission = "readonly";
        }

        if (Steedos.isMobile()) {
          if (field.type === 'section' || field.type === 'table') {
            field.td_colspan = 4;
          } else {
            field.td_colspan = 3;
          }

          if (index !== 0) {
            field.tr_start = "<tr>";
            return field.tr_end = "</tr>";
          }
        } else {
          pre_fields = fields.slice(0, index);
          pre_wide_fields = pre_fields.filterProperty("is_wide", true);
          tr_start = "";
          tr_end = "";
          before_field = null;
          after_field = null;

          if (index > 0) {
            before_field = fields[index - 1];
          }

          if (index < fields.length - 1) {
            after_field = fields[index + 1];
          }

          if (field.type === 'section' || field.type === 'table') {
            td_colspan = 4;
          } else if (field.is_wide) {
            td_colspan = 3;
          } else {
            if (before_field && after_field && before_field.is_wide && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field === null) {
              field.is_wide = true;
              td_colspan = 3;
            }
          }

          field.td_colspan = td_colspan;

          if (index === 0) {
            tr_start = "<tr>";
          } else {
            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 || field.is_wide) {
              if (field.type === 'table') {
                tr_start = "<tr class = \"tr-child-table\">";
              } else {
                tr_start = "<tr>";
              }
            }
          }

          field.tr_start = tr_start;

          if (index + 1 === fields.length || field.type === 'section' || field.type === 'table' || field.is_wide) {
            tr_end = "</tr>";
          }

          if ((pre_fields.length + pre_wide_fields.length) % 2 !== 0) {
            tr_end = "</tr>";
          }

          return field.tr_end = tr_end;
        }
      });
      return fields;
    }
  },
  sort_approve: function (approves, order) {
    if (!approves) {
      return [];
    }

    if (!approves instanceof Array) {
      return [];
    } else {
      if (order === 'desc') {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p2 - _p1;
        });
      } else {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p1 - _p2;
        });
      }
    }

    return approves;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  getField: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;

    if (form_version) {
      return form_version.fields.findPropertyByPK("code", code);
    }
  },
  getValue: function (code) {
    var form_version, instance, locale, utcOffset, values;
    instance = Template.instance().view.template.steedosData.instance;
    form_version = Template.instance().view.template.steedosData.form_version;
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    values = instance.values || {};

    if (Meteor.isClient) {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    return InstanceReadOnlyTemplate.getValue(values[code], form_version.fields.findPropertyByPK("code", code), locale, utcOffset);
  },
  getLabel: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, code);
  },
  getCfClass: function (field) {
    if ((field != null ? field.type : void 0) === "input" && (field != null ? field.is_textarea : void 0)) {
      return "cfTextarea";
    }
  },
  getTableThead: function (field) {
    return SteedosTable.getThead(field, false);
  },
  getTableBody: function (field) {
    var instance, tableValue, values;

    if (Meteor.isServer) {
      instance = Template.instance().view.template.steedosData.instance;
      values = instance.values || {};
    } else {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    tableValue = values[field.code];
    return SteedosTable.getTbody(field.sfields.getProperty("code"), field, tableValue, false);
  },
  showLabel: function (field) {
    var templateData;
    templateData = Template.instance().data;

    if (templateData.label === false) {
      return false;
    }

    return true;
  },
  isOpinionField: function (field) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field.formula);
  },
  isOpinionField_from_string: function (field_formula) {
    return InstanceSignText.isOpinionField_from_string(field_formula);
  },
  includesOpinionField: function (form, form_version) {
    var field_formulas, fields, ref;
    field_formulas = new Array();
    fields = ((ref = db.form_versions.findOne({
      _id: form_version,
      form: form
    })) != null ? ref.fields : void 0) || [];
    fields.forEach(function (f) {
      var ref1;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref1 = f.fields) != null ? ref1.forEach(function (f1) {
          return field_formulas.push(f1.formula);
        }) : void 0 : void 0;
      } else {
        return field_formulas.push(f.formula);
      }
    });
    return _.some(field_formulas, function (field_formula) {
      return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
    });
  },
  getOpinionFieldStepsName: function (field_formula, top_keywords) {
    var foo1, opinionFields;
    opinionFields = new Array();

    if (InstanceformTemplate.helpers.isOpinionField_from_string(field_formula)) {
      if (field_formula) {
        foo1 = field_formula.split(";");
        foo1.forEach(function (foo) {
          var json_formula, ref, ref1, s1, sf;
          json_formula = {};

          try {
            json_formula = eval("(" + foo + ")");
          } catch (error1) {
            json_formula = {};
          }

          if (json_formula != null ? json_formula.yijianlan : void 0) {
            sf = {};
            sf.stepName = json_formula.yijianlan.step;
            sf.image_sign = json_formula.yijianlan.image_sign || false;
            sf.only_cc_opinion = json_formula.yijianlan.only_cc || false;
            sf.default_description = json_formula.yijianlan["default"];
            sf.only_handler = json_formula.yijianlan.only_handler;
            sf.top_keywords = json_formula.yijianlan.top_keywords || top_keywords;
            return opinionFields.push(sf);
          } else if ((field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1) {
            sf = {
              only_cc_opinion: false,
              image_sign: false,
              top_keywords: top_keywords
            };

            if (foo.indexOf("{signature.") > -1) {
              sf.image_sign = true;
              foo = foo.replace("{signature.", "");
            }

            s1 = foo.replace("{", "").replace("}", "");

            if (s1.split(".").length > 1) {
              sf.stepName = s1.split(".")[1];

              if (opinionFields.filterProperty("stepName", sf.stepName).length > 0) {
                if ((ref = opinionFields.findPropertyByPK("stepName", sf.stepName)) != null) {
                  ref.only_cc_opinion = true;
                }
              } else {
                if (s1.split(".").length > 2) {
                  if (((ref1 = s1.split(".")[2]) != null ? ref1.toLocaleLowerCase() : void 0) === 'cc') {
                    sf.only_cc_opinion = true;
                  }
                }
              }
            }

            return opinionFields.push(sf);
          }
        });
      }
    }

    return opinionFields;
  },
  showCCOpinion: function (field) {
    var ref, ref1, ref2, s1;

    if (((ref = field.formula) != null ? ref.indexOf("{traces.") : void 0) > -1 || ((ref1 = field.formula) != null ? ref1.indexOf("{signature.traces.") : void 0) > -1) {
      s1 = field.formula.replace("{signature.", "").replace("{", "").replace("}", "");

      if (s1.split(".").length > 2) {
        if (((ref2 = s1.split(".")[2]) != null ? ref2.toLocaleLowerCase() : void 0) === 'cc') {
          return true;
        }
      }
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  f_label: function (that) {
    return that.name || that.code;
  }
};

if (Meteor.isServer) {
  InstanceformTemplate.helpers.steedos_form = function () {
    return this.form_version;
  };

  InstanceformTemplate.helpers.isSection = function (code) {
    var form_version;
    form_version = this.form_version;
    return form_version.fields.findPropertyByPK("code", code).type === 'section';
  };

  InstanceformTemplate.helpers.doc_values = function () {
    var instance;
    instance = this.instance;
    return instance.values;
  };

  InstanceformTemplate.helpers.applicantContext = function () {
    var data, instance;
    instance = this.instance;
    return data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: instance.applicant_name
    };
  };

  InstanceformTemplate.helpers.instance = function () {
    return this.instance;
  };

  InstanceformTemplate.helpers.fields = function () {
    var form_version;
    form_version = this.form_version;

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  };

  InstanceformTemplate.helpers.form_types = function () {
    return "disabled";
  };

  Template.registerHelper("afFieldLabelText", function (op) {
    var form_version, ref;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, op != null ? (ref = op.hash) != null ? ref.name : void 0 : void 0);
  });

  InstanceformTemplate.helpers._t = function (key) {
    var locale;
    locale = this.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceformTemplate.helpers.ins_attach_download_url = function (_id, absolute) {
    if (absolute) {
      return Meteor.absoluteUrl("/api/files/instances/" + _id + "?download=true");
    } else {
      return "/api/files/instances/" + _id + "?download=true";
    }
  };

  InstanceformTemplate.helpers.options = function (field) {
    var options, ref, rev;
    options = field != null ? (ref = field.options) != null ? ref.split("\n") : void 0 : void 0;
    rev = [];

    if (options != null) {
      options.forEach(function (item) {
        return rev.push({
          label: item,
          value: item
        });
      });
    }

    return rev;
  };

  InstanceformTemplate.helpers.getPermissions = function (code) {
    var ref;

    if (!((ref = Template.instance().view.template.steedosData.startStepEditableFields) != null ? ref.includes(code) : void 0)) {
      return "readonly disabled";
    }

    return "";
  };
}

InstanceformTemplate.events = {
  'change .form-control,.checkbox input,.af-radio-group input,.af-checkbox-group input': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'typeahead:change .form-control': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'click .cfTextarea a': function (event) {
    event.preventDefault();
    return Steedos.openWindow(event.target.href);
  }
};

InstanceformTemplate.onCreated = function () {
  var compiled, e, instance, instanceCustomTemplate, instanceView, renderFunction, template;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  template = TemplateManager.getTemplate(instance);

  try {
    compiled = SpacebarsCompiler.compile(template, {
      isBody: true
    });
  } catch (error1) {
    e = error1;
    console.log("Instance Template Error", e);
    compiled = SpacebarsCompiler.compile("", {
      isBody: true
    });
  }

  renderFunction = eval(compiled);
  instanceView = new Blaze.View("custom_instance_template", renderFunction);
  instanceCustomTemplate = new Blaze.Template(instanceView.name, renderFunction);
  Template.instance_custom_template = instanceCustomTemplate;
  return Template.instance_custom_template.helpers(InstanceformTemplate.helpers);
};

InstanceformTemplate.onRendered = function () {
  var currentApprove, currentStep, form_version, formula_fields, instance, instanceNumberFields, judge, ref;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  if ((ref = $("input[name='ins_applicant']")[0]) != null) {
    ref.dataset.values = instance.applicant;
  }

  $("input[name='ins_applicant']").val(instance.applicant_name);
  ApproveManager.error = {
    nextSteps: '',
    nextStepUsers: ''
  };

  if (Session.get("box") === 'inbox' || Session.get("box") === 'draft') {
    InstanceEvent.initEvents(instance.flow);
  }

  if (!ApproveManager.isReadOnly()) {
    currentApprove = InstanceManager.getCurrentApprove();
    instanceNumberFields = $("[data-formula]", $("#instanceform"));
    instanceNumberFields.each(function () {
      var element, schemaKey;
      schemaKey = this.dataset.schemaKey;
      element = $(this);

      if (!$(this).val() && schemaKey && Session.get("instanceId")) {
        return Meteor.call('getInstanceValues', Session.get("instanceId"), function (error, result) {
          var key, ref1;

          if (error) {
            toastr.error(error.reason);
          }

          if (!result[schemaKey]) {
            key = (ref1 = element.data("formula")) != null ? ref1.replace("auto_number(", "").replace(")", "") : void 0;
            key = key.replace(/\"/g, "").replace(/\'/g, "");

            if (key.indexOf("{") > -1) {
              key = key.replace("{", "").replace("}", "");
              key = key.trim();
              key = AutoForm.getFieldValue(key, 'instanceform');
            }

            return InstanceNumberRules.instanceNumberBuilder(element, key);
          } else {
            return element != null ? element.val(result[schemaKey]).trigger("change") : void 0;
          }
        });
      }
    });
    judge = currentApprove.judge;
    currentStep = InstanceManager.getCurrentStep();
    form_version = WorkflowManager.getInstanceFormVersion();
    formula_fields = Form_formula.getFormulaFieldVariable("Form_formula.field_values", form_version.fields);
    Form_formula.run("", "", formula_fields, AutoForm.getFormValues("instanceform").insertDoc, form_version.fields);
    return Session.set("instance_form_values", {
      instanceId: instance._id,
      values: AutoForm.getFormValues("instanceform").insertDoc
    });
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_attachments.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_attachments.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
InstanceAttachmentTemplate.helpers = {
  showMainTitle: function () {
    return Template.instance().workflowMainAttachTitle.get();
  },
  enabled_add_main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    var current_step = InstanceManager.getCurrentStep();
    if (!current_step) return false; // 分发的正文或者附件不显示转为pdf按钮
    // 如果有正文权限则为正文，否则分发为附件
    // 分发的附件不允许修改 删除 新增版本

    var main_attach_count = cfs.instances.find({
      'metadata.instance': ins._id,
      'metadata.current': true,
      'metadata.main': true
    }).count();
    var distribute_main_attach_count = 0;

    if (ins.distribute_from_instance) {
      var start_step = InstanceManager.getStartStep();

      if (start_step.can_edit_main_attach) {
        var distribute_main_attach_count = cfs.instances.find({
          'metadata.instance': ins.distribute_from_instance,
          'metadata.current': true,
          'metadata.main': true
        }).count();
      }
    }

    if (current_step.can_edit_main_attach == true && main_attach_count < 1 && distribute_main_attach_count < 1) {
      return true;
    } // 正文最多只能有一个


    if (main_attach_count >= 1 || distribute_main_attach_count >= 1) {
      return false;
    } // 开始节点并且设置了可以上传正文才显示上传正文的按钮


    var current_step = InstanceManager.getCurrentStep();
    if (current_step && current_step.step_type == "start" && current_step.can_edit_main_attach == true) return true;
    return false;
  },
  enabled_edit_normal_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;
    var flow = WorkflowManager.getFlow(ins.flow);
    if (!flow) return false; // 分发后的 附件，不可以编辑/删除，也不让上传新的附件, 流程列表：添加属性 ‘被分发后是否允许上传附件’ #1837

    if (ins.distribute_from_instance && !flow.upload_after_being_distributed) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    if (InstanceManager.isCC(ins)) {
      var step = InstanceManager.getCCStep();
      if (step && (step.can_edit_normal_attach == true || step.can_edit_normal_attach == undefined)) return true;
    } else {
      var current_step = InstanceManager.getCurrentStep();
      if (current_step && (current_step.can_edit_normal_attach == true || current_step.can_edit_normal_attach == undefined)) return true;
    }

    return false;
  },
  main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var start_step = InstanceManager.getStartStep(); // 如果是被分发的申请单并且有修改正文的权限，则优先显示原申请单文件

    var main_attach = null;

    if (ins.distribute_from_instance && start_step.can_edit_main_attach == true) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins.distribute_from_instance,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    if (!main_attach) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins._id,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    return main_attach;
  },
  normal_attachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var selector = {
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      }
    };
    var atts = new Array();

    if (ins.distribute_from_instance) {
      // 如果是被分发的申请单，则显示原申请单文件, 如果选择了将原表单存储为附件也要显示, 同时也要显示新上传的附件
      var dfis = _.clone(ins.distribute_from_instances) || [];
      dfis.push(ins._id);
      selector['metadata.instance'] = {
        $in: dfis
      };
      selector["$or"] = [{
        "metadata.instance": ins._id
      }, {
        "metadata.instance": {
          $in: ins.distribute_from_instances
        },
        "metadata.is_private": {
          $ne: true
        }
      }]; // 如果原申请单有正文但是分发后没有正文权限，则原申请单正文显示在附件栏

      var start_step = InstanceManager.getStartStep();

      if (start_step && start_step.can_edit_main_attach != true) {
        var distribute_main = cfs.instances.findOne({
          'metadata.instance': {
            $in: ins.distribute_from_instances
          },
          'metadata.current': true,
          'metadata.main': true
        });

        if (distribute_main) {
          var firstVersionMain = cfs.instances.findOne(distribute_main.metadata.parent);
          distribute_main.attachmentUploadedAt = firstVersionMain ? firstVersionMain.uploadedAt : distribute_main.uploadedAt;
          atts.push(distribute_main);
        }
      }
    } else {
      selector['metadata.instance'] = ins._id;
    }

    cfs.instances.find(selector).forEach(function (c) {
      var firstVersion = cfs.instances.findOne(c.metadata.parent);
      c.attachmentUploadedAt = firstVersion ? firstVersion.uploadedAt : c.uploadedAt;
      atts.push(c);
    });
    return _.sortBy(atts, 'attachmentUploadedAt');
  },
  showAttachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false; // 如果是被分发的申请单，则显示原申请单文件 和分发后申请单文件

    var instanceIds = _.clone(ins.distribute_from_instances) || [];
    instanceIds.push(ins._id);
    var attachments_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).count();
    if (Session && Session.get("instancePrint") && attachments_count < 1) return false;
    if (Session.get("box") == "draft" || Session.get("box") == "inbox" || attachments_count > 0) return true;else return false;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  _: function (key) {
    var locale;

    if (Meteor.isClient) {
      return TAPi18n.__(key);
    } else {
      locale = Template.instance().view.template.steedosData.locale;
      return TAPi18n.__(key, {}, locale);
    }
  },
  flow_files: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    return cfs.files.find({
      'metadata.space': ins.space,
      'metadata.object_name': 'flows',
      'metadata.record_id': ins.flow
    });
  },
  isDraftAndFlowfilesExist: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    return Session.get('box') == 'draft' && !!cfs.files.find({
      'metadata.space': ins.space,
      'metadata.object_name': 'flows',
      'metadata.record_id': ins.flow
    }).count();
  }
};

if (Meteor.isServer) {
  InstanceAttachmentTemplate.helpers._t = function (key) {
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceAttachmentTemplate.helpers.enabled_add_main_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.enabled_edit_normal_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.main_attachment = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var attachment = cfs.instances.findOne({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    });
    return attachment;
  };

  InstanceAttachmentTemplate.helpers.normal_attachments = function () {
    var steedosData = Template.instance().view.template.steedosData;
    var instance = steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      },
      $or: [{
        'metadata.is_private': {
          $ne: true
        }
      }, {
        'metadata.is_private': true,
        "metadata.owner": steedosData.userId
      }]
    }).fetch();
    return attachments;
  };

  InstanceAttachmentTemplate.helpers.showAttachments = function () {
    var instance = Template.instance().view.template.steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).fetch();

    if (attachments && attachments.length > 0) {
      return true;
    }

    return false;
  };

  InstanceAttachmentTemplate.helpers.showMainTitle = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var main_attach_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    }).count();
    return main_attach_count > 0;
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_sign_text.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_sign_text.coffee                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceSignText.helpers = {
  show: function (stepName) {
    var instance, myApprove, myTrace, ref;

    if (Meteor.isClient) {
      if (Session.get('instancePrint')) {
        return false;
      }

      if (InstanceManager.isInbox()) {
        myApprove = InstanceManager.getCurrentApprove();

        if (myApprove) {
          instance = WorkflowManager.getInstance();
          myTrace = instance != null ? (ref = instance.traces) != null ? ref.findPropertyByPK("_id", myApprove.trace) : void 0 : void 0;
          return (myTrace != null ? myTrace.name : void 0) === stepName;
        }
      }
    }

    return false;
  },
  defaultDescription: function () {
    return Template.instance().data.default_description;
  },
  traces: function () {
    return InstanceformTemplate.helpers.traces();
  },
  trace: function (stepName, only_cc_opinion, image_sign, top_keywords) {
    var approve_sort, approves, approvesGroup, approves_sorted, completed_date, hasNext, haveDescriptionApprove, instance, is_completed, ref, ref1, ref2, traces;
    instance = InstanceformTemplate.helpers.instance();
    is_completed = (instance != null ? instance.state : void 0) === "completed";
    completed_date = is_completed ? (ref = _.last(instance.traces)) != null ? (ref1 = ref.finish_date) != null ? ref1.getTime() : void 0 : void 0 : 0;

    if (is_completed && instance.finish_date) {
      completed_date = (ref2 = instance.finish_date) != null ? ref2.getTime() : void 0;
    }

    traces = InstanceformTemplate.helpers.traces();
    approves = _.clone(traces[stepName]);

    approve_sort = function (approves, top_keywords) {
      var approves_sorted, top_approves;
      approves_sorted = _.sortBy(approves, function (approve) {
        return -(approve.finish_date || new Date()).getTime();
      });

      if (top_keywords) {
        top_approves = new Array();
        top_keywords.split(",").forEach(function (key) {
          return top_approves = _.union(top_approves, _.filter(approves_sorted, function (approve) {
            var ref3;
            return (approve != null ? (ref3 = approve.handler_name) != null ? ref3.indexOf(key) : void 0 : void 0) > -1;
          }));
        });
        top_approves = _.sortBy(top_approves, function (top_approve) {
          return -(top_approve.finish_date || new Date()).getTime();
        });
        approves_sorted = _.union(top_approves, approves_sorted);
      }

      return approves_sorted || [];
    };

    approves = _.filter(approves, function (a) {
      return a.type !== "forward" && a.type !== "distribute" && a.type !== "terminated";
    });

    if (only_cc_opinion) {
      approves = approves != null ? approves.filterProperty("type", "cc") : void 0;
    }

    approves_sorted = approve_sort(approves, top_keywords);
    approvesGroup = _.groupBy(approves, "handler");

    hasNext = function (approve, approvesGroup) {
      var handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      return _.indexOf(handlerApproves, approve) + 1 < handlerApproves.length;
    };

    haveDescriptionApprove = function (approve, approvesGroup) {
      var descriptionApproves, handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      descriptionApproves = _.filter(handlerApproves, function (a) {
        if (a.description) {
          return true;
        }

        return false;
      });

      if (descriptionApproves.length === 0) {
        return false;
      }

      return true;
    };

    approves_sorted.forEach(function (approve) {
      if (approve.sign_show !== false && (approve.description || !approve.description && !hasNext(approve, approvesGroup))) {
        if (approve.judge !== 'terminated') {
          return approve._display = true;
        }
      }
    });
    approves_sorted = _.filter(approves_sorted, function (a) {
      var ref3;

      if (is_completed) {
        return a._display === true && a.is_finished && ((ref3 = a.finish_date) != null ? ref3.getTime() : void 0) <= completed_date;
      } else {
        return a._display === true;
      }
    });
    return approves_sorted;
  },
  include: function (a, b) {
    return InstanceformTemplate.helpers.include(a, b);
  },
  unempty: function (val) {
    return InstanceformTemplate.helpers.unempty(val);
  },
  formatDate: function (date, options) {
    if (!options) {
      options = {
        "format": "YYYY-MM-DD"
      };
    }

    return InstanceformTemplate.helpers.formatDate(date, options);
  },
  isMyApprove: function (approve, only_cc_opinion) {
    var currentApprove, ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
      currentApprove = InstanceManager.getCurrentApprove();

      if (!(approve != null ? approve._id : void 0)) {
        approve = currentApprove;
      }

      if (approve._id === (currentApprove != null ? currentApprove._id : void 0) && (currentApprove != null ? currentApprove.type : void 0) === 'cc' && Template.instance().data.name) {
        if (_.indexOf(currentApprove != null ? currentApprove.opinion_fields_code : void 0, Template.instance().data.name) > -1) {
          return true;
        } else {
          return false;
        }
      }

      if (!((currentApprove != null ? currentApprove.type : void 0) === 'cc') && only_cc_opinion) {
        return false;
      }

      if (currentApprove && approve._id === currentApprove._id) {
        return true;
      }
    }

    return false;
  },
  myApproveDescription: function (approveId) {
    var myApprove, ref, ref1, ref2, ref3;

    if (Meteor.isClient) {
      if (Session.get("box") === 'inbox') {
        myApprove = (ref = Template.instance()) != null ? (ref1 = ref.myApprove) != null ? ref1.get() : void 0 : void 0;

        if (myApprove && myApprove.id === approveId) {
          if (!myApprove.sign_field_code || myApprove.sign_field_code === ((ref2 = Template.instance()) != null ? (ref3 = ref2.data) != null ? ref3.name : void 0 : void 0)) {
            if (!Session.get("instance_my_approve_description")) {
              return (myApprove != null ? myApprove.description : void 0) || "";
            }

            return Session.get("instance_my_approve_description");
          }
        }
      }
    }
  },
  now: function () {
    return new Date();
  },
  isReadOnly: function () {
    if (Meteor.isClient) {
      return ApproveManager.isReadOnly();
    }

    return false;
  },
  isOpinionOfField: function (approve) {
    if (approve.type === "cc" && Template.instance().data.name) {
      if (Template.instance().data.name === approve.sign_field_code) {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  steps: function (field_formula, step, only_cc_opinion, image_sign) {
    var ref, ref1, ref2, steps;
    steps = [];

    if (!step) {
      if (!field_formula) {
        field_formula = (ref = WorkflowManager.getInstanceFormVersion()) != null ? (ref1 = ref.fields) != null ? ref1.findPropertyByPK("code", this.name).formula : void 0 : void 0;
      }

      steps = InstanceformTemplate.helpers.getOpinionFieldStepsName(field_formula, (ref2 = Template.instance()) != null ? ref2.data.top_keywords : void 0);
    } else {
      steps = [{
        stepName: step,
        only_cc_opinion: only_cc_opinion,
        image_sign: image_sign
      }];
    }

    return steps;
  },
  imageSignData: function (handler) {
    return {
      user: handler
    };
  },
  showSignImage: function (handler, image_sign) {
    var spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(handler);

    if ((spaceUserSign != null ? spaceUserSign.sign : void 0) && image_sign) {
      return true;
    } else {
      return false;
    }
  },
  getLastSignApprove: function () {
    var ins;
    ins = WorkflowManager.getInstance();
    return _.last(TracesManager.getHandlerSignShowApproves(ins, Meteor.userId()));
  },
  lastMyApproveDescription: function () {
    var approves, currentStep, ref, traces;
    traces = InstanceformTemplate.helpers.traces();
    currentStep = InstanceManager.getCurrentStep();
    approves = _.clone(traces[currentStep.name]);
    approves = approves.filterProperty("handler", Meteor.userId());

    if (approves.length > 1) {
      return (ref = approves[approves.length - 2]) != null ? ref.description : void 0;
    }

    return "";
  },
  showApprove: function (approve) {
    var ref, ref1;

    if (!approve.sign_field_code || approve.sign_field_code === ((ref = Template.instance()) != null ? (ref1 = ref.data) != null ? ref1.name : void 0 : void 0)) {
      if (approve != null ? approve.is_read : void 0) {
        if (approve.is_finished) {
          return ["approved", "rejected", "submitted", "readed"].includes(approve.judge);
        } else {
          return true;
        }
      }
    }

    return false;
  },
  judge_description: function (judge) {
    return t(judge + "_description");
  },
  is_approved: function (judge) {
    return "approved" === judge;
  },
  is_rejected: function (judge) {
    return "rejected" === judge;
  },
  is_readed: function (judge) {
    return ["approved", "rejected", "submitted", "readed"].includes(judge);
  },
  addClass: function () {
    var name, ref, ref1;
    name = (ref = Template.instance()) != null ? (ref1 = ref.data) != null ? ref1.name : void 0 : void 0;
    setTimeout(function () {
      var e, element;

      try {
        element = $(".automatic.opinion-field-" + name);

        if (element.length > 0) {
          if (element != null ? element.is("td") : void 0) {
            return element.addClass('field-editable');
          } else {
            return $(".instance-sign", element).addClass('field-editable');
          }
        }
      } catch (error) {
        e = error;
        return console.log(e);
      }
    }, 1);
    return '';
  }
};

if (Meteor.isServer) {
  InstanceSignText.helpers.defaultDescription = function () {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return Template.instance().data.default_description || TAPi18n.__("instance_default_opinion", {}, locale);
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_traces_help.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_traces_help.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
TracesTemplate.helpers = {
  equals: function (a, b) {
    return a === b;
  },
  empty: function (a) {
    if (a) {
      return a.toString().trim().length < 1;
    } else {
      return true;
    }
  },
  unempty: function (a) {
    if (a) {
      return a.toString().trim().length > 0;
    } else {
      return false;
    }
  },
  append: function (a, b) {
    return a + b;
  },
  dateFormat: function (date) {
    if (Steedos.isMobile() && (date != null ? date.getFullYear() : void 0) === new Date().getFullYear()) {
      return $.format.date(new Date(date), "MM-dd HH:mm");
    } else {
      return $.format.date(new Date(date), "yyyy-MM-dd HH:mm");
    }
  },
  getStepName: function (stepId) {
    var step;
    step = WorkflowManager.getInstanceStep(stepId);

    if (step) {
      return step.name;
    }

    return null;
  },
  showDeleteButton: function (approved) {
    if (approved && approved.type === 'cc' && approved.from_user === Meteor.userId() && approved.is_finished !== true && !Session.get("instancePrint")) {
      return true;
    }

    return false;
  },
  isShowModificationButton: function (approved) {
    var approve_admins, isShow, ref, ref1, ref2;
    approve_admins = (ref = Meteor.settings) != null ? (ref1 = ref["public"]) != null ? (ref2 = ref1.workflow) != null ? ref2.approve_admins : void 0 : void 0 : void 0;

    if (approve_admins != null ? approve_admins.length : void 0) {
      isShow = approve_admins != null ? approve_admins.contains(Meteor.userId()) : void 0;
    }

    if (!isShow) {
      return false;
    }

    return approved.handler === Meteor.userId();
  },
  isEditing: function () {
    var ref;
    return (ref = Template.instance().is_editing) != null ? ref.get() : void 0;
  },
  isShowDescription: function (approved) {
    var ref;

    if (TracesTemplate.helpers.isShowModificationButton(approved)) {
      return true;
    }

    return ((ref = approved.description) != null ? ref.toString().trim().length : void 0) > 0;
  },
  isCC: function (approved) {
    if (approved && approved.type === 'cc') {
      return true;
    }

    return false;
  },
  getApproveStatusIcon: function (approveJudge, autoSubmitted) {
    var approveStatusIcon;

    if (autoSubmitted === true) {
      return 'ion ion-android-alarm-clock';
    }

    approveStatusIcon = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusIcon = 'ion ion-checkmark-round';
        break;

      case 'rejected':
        approveStatusIcon = 'ion ion-close-round';
        break;

      case 'terminated':
        approveStatusIcon = 'fa fa-ban';
        break;

      case 'reassigned':
        approveStatusIcon = 'ion ion-android-contact';
        break;

      case 'relocated':
        approveStatusIcon = 'ion ion-arrow-shrink';
        break;

      case 'retrieved':
        approveStatusIcon = 'fa fa-undo';
        break;

      default:
        approveStatusIcon = '';
        break;
    }

    return approveStatusIcon;
  },
  getApproveStatusText: function (approveJudge, autoSubmitted) {
    var approveStatusText, locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    if (autoSubmitted === true) {
      return TAPi18n.__('instance_approve_timeout_auto_submitted', {}, locale);
    }

    approveStatusText = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusText = TAPi18n.__('Instance State approved', {}, locale);
        break;

      case 'rejected':
        approveStatusText = TAPi18n.__('Instance State rejected', {}, locale);
        break;

      case 'terminated':
        approveStatusText = TAPi18n.__('Instance State terminated', {}, locale);
        break;

      case 'reassigned':
        approveStatusText = TAPi18n.__('Instance State reassigned', {}, locale);
        break;

      case 'relocated':
        approveStatusText = TAPi18n.__('Instance State relocated', {}, locale);
        break;

      case 'retrieved':
        approveStatusText = TAPi18n.__('Instance State retrieved', {}, locale);
        break;

      case 'returned':
        approveStatusText = TAPi18n.__('Instance State returned', {}, locale);
        break;

      case 'readed':
        approveStatusText = TAPi18n.__('Instance State readed', {}, locale);
        break;

      default:
        approveStatusText = '';
        break;
    }

    return approveStatusText;
  },
  getApproveJudgeClass: function (approveJudge, autoSubmitted) {
    if (autoSubmitted === true) {
      return 'autoSubmitted';
    }

    return approveJudge;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  myApproveDescription: function (approveId) {
    var myApprove, ref, ref1;

    if (Meteor.isClient) {
      if (Session.get("box") === 'inbox') {
        myApprove = (ref = Template.instance()) != null ? (ref1 = ref.myApprove) != null ? ref1.get() : void 0 : void 0;

        if (myApprove && myApprove.id === approveId) {
          if (!Session.get("instance_my_approve_description")) {
            return (myApprove != null ? myApprove.description : void 0) || "";
          }

          return Session.get("instance_my_approve_description");
        }
      }
    }
  },
  isForward: function (approved) {
    if (approved && approved.type === 'forward') {
      return true;
    }

    return false;
  },
  showForwardDeleteButton: function (approve) {
    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'forward' && approve.from_user === Meteor.userId() && !Session.get("instancePrint") && approve.judge !== 'terminated') {
      return true;
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  isDistribute: function (approve) {
    if (approve && approve.type === 'distribute') {
      return true;
    }

    return false;
  },
  showDistributeDeleteButton: function (approve) {
    var ins;

    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'distribute' && !Session.get("instancePrint") && approve.judge !== 'terminated' && Steedos.hasFeature('file_distribution', Steedos.getSpaceId())) {
      ins = db.instances.findOne({
        _id: approve.instance
      }, {
        fields: {
          flow: 1,
          space: 1
        }
      });

      if (ins && ins.flow && ins.space) {
        if (WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, Meteor.userId())) {
          return true;
        }
      }

      if (approve.from_user === Meteor.userId()) {
        return true;
      }
    }

    return false;
  },
  finishDateSchema: function () {
    if (Steedos.isAndroidOrIOS()) {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "datetime-local"
          },
          optional: false,
          type: Date
        }
      });
    } else {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "bootstrap-datetimepicker",
            readonly: true,
            dateTimePickerOptions: {
              format: "YYYY-MM-DD HH:mm",
              ignoreReadonly: true,
              locale: Session.get("TAPi18n::loaded_lang"),
              widgetPositioning: {
                horizontal: 'right'
              }
            }
          },
          optional: false,
          type: Date
        }
      });
    }
  },
  finishDateValues: function () {
    return {
      finish_date: this.finish_date
    };
  },
  /*
     	此函数用于控制是否显示traces view
     	true: 显示traces view,签核历程按钮点击后是直接定位到traces view
     	false: 不显示traces view，签核历程按钮点击后,以Modal 方式显示traces view
   */showTracesView: function (form, form_version) {
    var ref, show_modal_traces_list;
    show_modal_traces_list = ((ref = db.space_settings.findOne({
      space: Session.get("spaceId"),
      key: "show_modal_traces_list"
    })) != null ? ref.values : void 0) || false;
    return !show_modal_traces_list;
  },
  getInstanceStateText: function (instance_id) {
    var ins, locale, text;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return TAPi18n.__('instance_deleted', {}, locale);
    }

    text = '';

    if (ins.state === 'completed') {
      text = TAPi18n.__('completed', {}, locale);
    } else if (ins.state === 'pending') {
      text = TAPi18n.__('pending', {}, locale);
    } else if (ins.state === 'draft') {
      if (ins.is_read) {
        text = TAPi18n.__('instance_approve_read', {}, locale);
      } else {
        text = TAPi18n.__('instance_approve_not_yet_handled', {}, locale);
      }
    }

    return text;
  },
  getInstanceStateColor: function (instance_id) {
    var cla, ins;
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return "";
    }

    cla = '';

    if (ins.state === 'draft') {
      if (ins.is_read) {
        cla = 'blue';
      } else {
        cla = 'red';
      }
    }

    return cla;
  },
  firstTrace: function (index) {
    return index === 0;
  },
  last_distribute_from: function (instance_id) {
    var dis_info, ins, user;
    ins = db.instances.findOne({
      _id: instance_id,
      distribute_from_instance: {
        $exists: true
      }
    }, {
      fields: {
        created: 1,
        created_by: 1
      }
    });

    if (ins) {
      dis_info = {};
      user = {};

      if (Meteor.isClient) {
        user = UUflow_api.getNameForUser(ins.created_by);
      } else if (Meteor.isServer) {
        user = db.users.findOne({
          _id: ins.created_by
        }, {
          fields: {
            name: 1
          }
        });
      }

      if (user.name) {
        dis_info.from_user = user._id;
        dis_info.from_user_name = user.name;
        dis_info.created = ins.created;
      }

      if (!_.isEmpty(dis_info)) {
        return dis_info;
      }
    }
  },
  isCCOrDistributeOrForwardTerminated: function (approve) {
    if ((approve.type === 'cc' || approve.type === 'distribute' || approve.type === 'forward') && approve.judge === 'terminated') {
      return true;
    }

    return false;
  },
  judgeTerminated: function (judge) {
    return judge === 'terminated';
  },
  instanceExists: function (instance_id) {
    return !!db.instances.find(instance_id).count();
  },
  agentDescription: function (userName) {
    var locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    return TAPi18n.__('process_delegation_rules_description', {
      userName: userName
    }, locale);
  },
  traceName: function (instance_id, traceId) {
    var ref, ref1;
    return (ref = _.find((ref1 = db.instances.findOne(instance_id, {
      fields: {
        traces: 1
      }
    })) != null ? ref1.traces : void 0, function (trace) {
      return trace._id === traceId;
    })) != null ? ref.name : void 0;
  },
  objectUrl: function (object_name, record_id, app_id) {
    return Creator.getObjectUrl(object_name, record_id, app_id);
  }
};

if (Meteor.isServer) {
  TracesTemplate.helpers.dateFormat = function (date) {
    var utcOffset;

    if (date) {
      utcOffset = Template.instance().view.template.steedosData.utcOffset;
      return InstanceReadOnlyTemplate.formatDate(date, utcOffset);
    }
  };

  TracesTemplate.helpers._t = function (key) {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  TracesTemplate.helpers.showDeleteButton = function (approved) {
    return false;
  };
}

TracesTemplate.events = {
  'click .cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    event.stopPropagation();

    if (event.currentTarget.dataset.calling * 1 !== 1) {
      event.currentTarget.dataset.calling = 1;
      $("i", event.currentTarget).addClass("fa-spin");
      instanceId = Session.get('instanceId');
      approveId = event.target.dataset.approve;
      $("body").addClass("loading");
      Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
        $("body").removeClass("loading");

        if (err) {
          toastr.error(err);
          event.currentTarget.dataset.calling = 0;
          $("i", event.currentTarget).removeClass("fa-spin");
        }

        if (result === true) {
          toastr.success(TAPi18n.__("remove_cc_approve"));

          if ($(".instance-trace-detail-modal").length) {
            Modal.hide("instance_trace_detail_modal");
          }
        }
      });
    }
  },
  'click .instance-trace-detail-modal .btn-cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    $("body").addClass("loading");
    Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(err);
      }

      if (result === true) {
        toastr.success(TAPi18n.__("remove_cc_approve"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      return Modal.show("instance_trace_detail_modal", this);
    }
  },
  'taphold .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      return Modal.show("instance_trace_detail_modal", this);
    }
  },
  'click .approve-item a.btn-link,.approve-description a.btn-link,.approve-item-distribute a.btn-link': function (event, template) {
    var ref, userId;

    if (Steedos.isMobile()) {
      userId = (ref = event.target.dataset) != null ? ref.target_user_id : void 0;
      return Creator.openSafeObjectUrl('users', userId);
    }
  },
  'tapend .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      event.stopPropagation();
      event.preventDefault();
      return false;
    }
  },
  'click .instance-trace-detail-modal .btn-forward-approve-remove': function (event, template) {
    var approveId, instanceId, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    $("body").addClass("loading");
    Meteor.call('forward_remove', instanceId, traceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(TAPi18n.__("instance_approve_forward_remove_success"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-forward-instance-look': function (event, template) {
    var forward_instance, forward_space;
    forward_space = event.target.dataset.forwardspace;
    forward_instance = event.target.dataset.forwardinstance;
    return Steedos.openWindow(Steedos.absoluteUrl("workflow/space/" + forward_space + "/view/readonly/" + forward_instance));
  },
  'click .btn-modification': function (event, template) {
    template.is_editing.set(!template.is_editing.get());

    if (!Steedos.isAndroidOrIOS()) {
      return Tracker.afterFlush(function () {
        return $("#instance_trace_detail_modal #finish_input").on("dp.show", function () {
          return $(".modal-body").scrollTop(100);
        });
      });
    }
  },
  'click .btn-cancelBut': function (event, template) {
    return template.is_editing.set(!template.is_editing.get());
  },
  'click .btn-saveBut': function (event, template) {
    var approveId, finish_input, instanceId, opinion_input, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    opinion_input = $('#opinion_input').val();
    finish_input = AutoForm.getFieldValue("finish_date", "finishDateAutoForm");
    $("body").addClass("loading");
    return Meteor.call('change_approve_info', instanceId, traceId, approveId, opinion_input, finish_input, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(t("instance_approve_modal_modificationsave"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-distribute-approve-remove': function (event, template) {
    Modal.allowMultiple = true;
    return Modal.show('cancel_distribute_modal');
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_related_instances.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RelatedInstances.helpers = {
  showRelatedInstaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      if (db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).count() > 0) {
        return true;
      }

      return false;
    } else {
      return false;
    }
  },
  related_instaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      return db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).fetch();
    }
  },
  related_instace_url: function (ins) {
    var absolute;

    if (Meteor.isClient && (Steedos.isMobile() || Steedos.isCordova())) {
      return '';
    }

    absolute = false;

    if (Meteor.isServer) {
      absolute = this.absolute;
    }

    if (absolute) {
      return Meteor.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    } else {
      return Steedos.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    }
  },
  _t: function (key) {
    var locale;

    if (Meteor.isClient) {
      return TAPi18n.__(key);
    } else {
      locale = Template.instance().view.template.steedosData.locale;
      return TAPi18n.__(key, {}, locale);
    }
  },
  show_delete: function () {
    var current_step;

    if (!Meteor.isClient) {
      return false;
    } else {
      if (Session.get("box") === "draft" || Session.get("box") === 'inbox') {
        current_step = InstanceManager.getCurrentStep();

        if (current_step) {
          if (current_step.can_edit_main_attach || current_step.can_edit_normal_attach === true || current_step.can_edit_normal_attach === void 0) {
            return true;
          }
        }
      }
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_related_records.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_related_records.coffee                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RelatedRecords.helpers = {
  showRelatedRecords: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if (!ins) {
      return false;
    }

    return !_.isEmpty(ins.record_ids);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"routes":{"designer.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/designer.coffee                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var DesignerAPI;
DesignerAPI = {
  getAbsoluteUrl: function (url) {
    var rootUrl;
    rootUrl = __meteor_runtime_config__ ? __meteor_runtime_config__.ROOT_URL_PATH_PREFIX : "";

    if (rootUrl) {
      url = rootUrl + url;
    }

    return url;
  },
  writeResponse: function (res, httpCode, body) {
    res.statusCode = httpCode;
    return res.end(body);
  },
  sendInvalidURLResponse: function (res) {
    return this.writeResponse(res, 404, "the param 'url' is required as querys.");
  },
  sendAuthTokenExpiredResponse: function (res) {
    return this.writeResponse(res, 401, "the auth_token has expired.");
  },
  sendHtmlResponse: function (req, res, type) {
    var error_msg, query, title, url;
    query = req.query;
    url = query.url;

    if (url) {
      url = decodeURIComponent(url);
    } else {
      DesignerAPI.sendInvalidURLResponse(res);
    }

    title = query.title;

    if (title) {
      title = decodeURIComponent(title);
    } else {
      title = "Steedos Designer";
    }

    error_msg = "";
    return this.writeResponse(res, 200, "<html>\n	<head>\n		<style>\n			html,body{\n				margin: 0;\n				padding: 0;\n				height: 100%;\n			}\n			body { \n				font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n				text-align: center;\n				background-color: #fff;\n			}\n			.loading{\n				position: absolute;\n				left: 0px;\n				right: 0px;\n				top: 50%;\n				z-index: -1;/*设置为-1，可以在iframe加载出来后自动消失*/\n				text-align: center;\n				margin-top: -30px;\n				font-size: 36px;\n				color: #dfdfdf;\n			}\n			.error-msg{\n				position: absolute;\n				left: 0px;\n				right: 0px;\n				bottom: 20px;\n				z-index: 1100;\n				text-align: center;\n				font-size: 20px;\n				color: #a94442;\n			}\n		</style>\n		<meta charset=\"utf-8\">\n		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n		<title>" + title + "</title>\n		<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"" + this.getAbsoluteUrl("/favicons/android-chrome-192x192.png") + "\">\n		<link rel=\"manifest\" href=\"" + this.getAbsoluteUrl("/favicons/manifest.json") + "\">\n		<meta name=\"mobile-web-app-capable\" content=\"yes\">\n		<meta name=\"theme-color\" content=\"#000\">\n		<meta name=\"application-name\">\n		<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-57x57.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-60x60.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-72x72.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-76x76.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-114x114.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-120x120.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-144x144.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-152x152.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-180x180.png") + "\">\n		<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n		<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n		<meta name=\"apple-mobile-web-app-title\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"228x228\" href=\"" + this.getAbsoluteUrl("/favicons/coast-228x228.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-16x16.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-32x32.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-96x96.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"230x230\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-230x230.png") + "\">\n		<link rel=\"shortcut icon\" href=\"" + this.getAbsoluteUrl("/favicons/favicon.ico") + "\">\n		<link rel=\"yandex-tableau-widget\" href=\"" + this.getAbsoluteUrl("/favicons/yandex-browser-manifest.json") + "\">\n		<meta name=\"msapplication-TileColor\" content=\"#fff\">\n		<meta name=\"msapplication-TileImage\" content=\"" + this.getAbsoluteUrl("/favicons/mstile-144x144.png") + "\">\n		<meta name=\"msapplication-config\" content=\"" + this.getAbsoluteUrl("/favicons/browserconfig.xml") + "\">\n		<meta property=\"twitter:image\" content=\"" + this.getAbsoluteUrl("/favicons/twitter.png") + "\">\n		<meta property=\"og:image\" content=\"" + this.getAbsoluteUrl("/favicons/open-graph.png") + "\">\n	</head>\n	<body>\n		<div class = \"loading\">Loading...</div>\n		<div class = \"error-msg\">" + error_msg + "</div>\n		<iframe id=\"ifrDesigner\" src=\"\" width=\"100%\" height=\"100%\" nwdisable=\"true\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" allowtransparency=\"yes\"></iframe>\n		<script type=\"text/javascript\" src=\"" + this.getAbsoluteUrl("/lib/jquery/jquery-1.11.2.min.js") + "\"></script>\n		<script type=\"text/javascript\">\n			var designer = {\n				urlQuery:function(name){\n					var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n					var r = window.location.search.substr(1).match(reg);\n					if (r != null) return unescape(r[2]);\n					return null;\n				},\n				run:function(){\n					var url = this.urlQuery(\"url\");\n					url = decodeURIComponent(url);\n					\n					if(url){\n						$(\"#ifrDesigner\").attr(\"src\",url);\n					}\n					var Steedos = window.opener.Steedos || null;\n					if (Steedos) {\n						Steedos.forbidNodeContextmenu(window);\n					}\n				}\n			};\n			$(function(){\n				designer.run();\n			});\n		</script>\n	<body>\n</html>");
  }
};
JsonRoutes.add('get', '/api/workflow/designer?url=:url', function (req, res, next) {
  return DesignerAPI.sendHtmlResponse(req, res);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"nextStepUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/nextStepUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/nextStepUsers", function (req, res, next) {
  var deal_type = req.query.deal_type,
      spaceId = req.query.spaceId,
      error = "";

  if (!deal_type || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var body = req.body,
      nextStepUsers = [];

  switch (deal_type) {
    case 'specifyUser':
      var specifyUserIds = body.specifyUserIds;
      nextStepUsers = WorkflowManager.getUsers(spaceId, specifyUserIds);
      break;

    case 'applicantRole':
      var applicantId = body.applicantId,
          approveRoleIds = body.approveRoleIds;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);
      if (applicant) nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, applicant.organizations, approveRoleIds);
      break;

    case 'hrRole':
      var approveHrRoleIds = body.approveHrRoleIds;
      if (approveHrRoleIds) nextStepUsers = WorkflowManager.getHrRolesUsers(spaceId, approveHrRoleIds);
      break;

    case 'applicantSuperior':
      var applicantId = body.applicantId;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);

      if (applicant.manager) {
        nextStepUsers = WorkflowManager.getUsers(spaceId, applicant.manager);
      }

      break;

    case 'applicant':
      var applicantId = body.applicantId;
      nextStepUsers = WorkflowManager.getUsers(spaceId, applicantId);
      break;

    case 'userField':
      var userField = body.userField,
          userFieldValue = body.userFieldValue;

      if (userField.is_multiselect) {
        //如果多选，以userFieldValue值为Array
        nextStepUsers = WorkflowManager.getUsers(spaceId, userFieldValue);
      } else {
        nextStepUsers.push(WorkflowManager.getUser(spaceId, userFieldValue));
      }

      break;

    case 'orgField':
      var orgs,
          orgChildrens,
          orgField = body.orgField,
          orgFieldValue = body.orgFieldValue;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          orgs = WorkflowManager.getOrganizations(orgFieldValue);
          orgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, orgFieldValue);
        } else {
          orgs = [WorkflowManager.getOrganization(orgFieldValue)];
          orgChildrens = WorkflowManager.getOrganizationChildrens(spaceId, orgFieldValue);
        }

        nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgChildrens);
        orgFieldUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgs);
        nextStepUsers = nextStepUsers.concat(orgFieldUsers);

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ORG_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'specifyOrg':
      var specifyOrgIds = body.specifyOrgIds;
      var specifyOrgs = WorkflowManager.getOrganizations(specifyOrgIds);
      var specifyOrgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, specifyOrgIds);
      nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgs);
      nextStepUsers = nextStepUsers.concat(WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgChildrens));
      break;

    case 'userFieldRole':
      var userField = body.userField,
          userFieldValue = body.userFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (userFieldValue) {
        if (userField.is_multiselect) {
          //如果多选，以userFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, userFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, [userFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'orgFieldRole':
      var orgField = body.orgField,
          orgFieldValue = body.orgFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, orgFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, [orgFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    default:
      break;
  }

  var result = [];
  nextStepUsers.forEach(function (su) {
    if (su.user_accepted) {
      var o = {
        id: su.id,
        name: su.name
      };
      result.push(o);
    }
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'nextStepUsers': WorkflowManager.uniqUsers(result),
      'error': error
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getSpaceUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getSpaceUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getSpaceUsers", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getUsers(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFormulaUserObjects.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getFormulaUserObjects.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getFormulaUserObjects", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var users = WorkflowManager.getFormulaUserObject(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': users
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_formula_values.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/init_formula_values.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/init_formula_values", function (req, res, next) {
  var fields = req.body.fields,
      autoFormDoc = req.body.autoFormDoc,
      approver = req.body.approver,
      applicant = req.body.applicant,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!fields || !spaceId || !autoFormDoc || !approver || !applicant) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
    return;
  }

  formula_values = Form_formula.init_formula_values(fields, autoFormDoc, approver, applicant, spaceId);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'formula_values': formula_values
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getNameForUser.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getNameForUser.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/getNameForUser", function (req, res, next) {
  var e, user, userId;

  try {
    userId = req.body.userId;

    if (!userId) {
      JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'errors': '缺少参数'
        }
      });
    }

    user = WorkflowManager.getNameForUser(userId);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        user: user
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_designer_startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_designer_startup.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/designer/startup', function (req, res, next) {
  var categories, companyId, current_user, current_user_info, e, flows, forms, org, organizations, positions, query, ref, result, roles, spaceIds, spaceUsers, spaces, spacesQuery, userIds, users;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    companyId = ((ref = req.query) != null ? ref.companyId : void 0) || '';
    spacesQuery = {
      admins: current_user
    };

    if (companyId) {
      org = db.organizations.findOne(companyId, {
        fields: {
          space: 1
        }
      });

      if (!org) {
        throw new Meteor.Error('error', 'companyId is invalid');
      }

      spacesQuery = {
        _id: org.space
      };
    }

    spaces = db.spaces.find(spacesQuery).fetch();
    spaceIds = _.pluck(spaces, '_id');
    query = {
      space: {
        $in: spaceIds
      }
    };

    if (companyId) {
      query.company_id = companyId;
    }

    spaceUsers = db.space_users.find(query).fetch();
    forms = db.forms.find(query, {
      fields: {
        name: 1,
        state: 1,
        is_deleted: 1,
        is_valid: 1,
        space: 1,
        description: 1,
        help_text: 1,
        created: 1,
        created_by: 1,
        current: 1,
        category: 1,
        instance_style: 1,
        company_id: 1
      }
    }).fetch();
    flows = db.flows.find(query, {
      fields: {
        name: 1,
        name_formula: 1,
        code_formula: 1,
        space: 1,
        description: 1,
        is_valid: 1,
        form: 1,
        flowtype: 1,
        state: 1,
        is_deleted: 1,
        created: 1,
        created_by: 1,
        help_text: 1,
        current_no: 1,
        current: 1,
        perms: 1,
        error_message: 1,
        distribute_optional_users: 1,
        company_id: 1
      }
    }).fetch();
    roles = db.flow_roles.find(query).fetch();
    organizations = db.organizations.find(query).fetch();
    positions = db.flow_positions.find(query).fetch();
    categories = db.categories.find({
      space: {
        $in: spaceIds
      }
    }).fetch();
    userIds = _.pluck(spaceUsers, 'user');
    users = db.users.find({
      _id: {
        $in: userIds
      }
    }, {
      fields: {
        name: 1
      }
    }).fetch();
    result = {};
    result.SpaceUsers = spaceUsers;
    result.Users = users;
    result.Forms = forms;
    result.Flows = flows;
    result.Organizations = organizations;
    result.Positions = positions;
    result.Roles = roles;
    result.Categories = categories;
    result.Spaces = spaces;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: result
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_engine.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_engine.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/engine', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Approvals'], function (approve_from_client) {
      return uuflowManager.workflow_engine(approve_from_client, current_user_info, current_user);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_drafts.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/drafts', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var new_ins, new_ins_id;
      new_ins_id = uuflowManager.create_instance(instance_from_client, current_user_info);
      new_ins = db.instances.findOne({
        _id: new_ins_id
      }, {
        fields: {
          space: 1,
          flow: 1,
          flow_version: 1,
          form: 1,
          form_version: 1
        }
      });
      return inserted_instances.push(new_ins);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_remove.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_remove.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/remove', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, delete_obj, flow, inbox_users, instance, space, spaceUserOrganizations, space_id, space_user, user_ids;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      flow = db.flows.findOne({
        _id: instance.flow
      });
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: space_user.organizations
        }
      }).fetch();

      if (instance.submitter !== current_user && !space.admins.includes(current_user) && !WorkflowManager.canAdmin(flow, space_user, spaceUserOrganizations)) {
        throw new Meteor.Error('error!', "您不能删除此申请单。");
      }

      delete_obj = db.instances.findOne(instance_from_client["_id"]);
      delete_obj.deleted = new Date();
      delete_obj.deleted_by = current_user;
      db.deleted_instances.insert(delete_obj);
      db.instances.remove(instance_from_client["_id"]);

      if (delete_obj.state !== "draft") {
        inbox_users = delete_obj.inbox_users ? delete_obj.inbox_users : [];
        cc_users = delete_obj.cc_users ? delete_obj.cc_users : [];
        user_ids = _.uniq(inbox_users.concat(cc_users));

        _.each(user_ids, function (u_id) {
          return pushManager.send_message_to_specifyUser("terminate_approval", u_id);
        });

        return pushManager.send_instance_notification("monitor_delete_applicant", delete_obj, "", current_user_info);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_submit.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/submit', function (req, res, next) {
  var current_user, current_user_info, e, hashData, result;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    result = [];

    _.each(hashData['Instances'], function (instance_from_client) {
      var current_approve, flow_id, instance, r;
      r = uuflowManager.submit_instance(instance_from_client, current_user_info);

      if (r.alerts) {
        result.push(r);
      }

      if (!_.isEmpty(instance_from_client['inbox_users'])) {
        pushManager.send_message_to_specifyUser("current_user", current_user);
      }

      if (_.isEmpty(r.alerts)) {
        instance = db.instances.findOne(instance_from_client._id);
        flow_id = instance.flow;
        current_approve = instance_from_client.traces[0].approves[0];
        pushManager.triggerWebhook(flow_id, instance, current_approve, 'draft_submit', current_user, instance.inbox_users);
      }

      return uuflowManager.distributedInstancesRemind(instance_from_client);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        result: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_terminate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_terminate.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/terminate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var flow, flow_id, flow_ver_end_step, flow_vers, h, i, ins, instance, instance_flow_ver, instance_id, instance_trace, newApprove, newTrace, now, old_cc_users, old_inbox_users, old_outbox_users, permissions, r, setObj, space, space_id, space_user, space_user_org_info, tempUsers, terminate_reason, traces;
      terminate_reason = instance_from_client["terminate_reason"];
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      flow_id = instance.flow;
      space = uuflowManager.getSpace(space_id);
      flow = uuflowManager.getFlow(flow_id);
      uuflowManager.isInstancePending(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_flow_ver = null;
      flow_ver_end_step = null;
      flow_vers = new Array();
      flow_vers.push(flow.current);
      flow_vers = flow_vers.concat(flow.historys);
      instance_flow_ver = _.find(flow_vers, function (f_ver) {
        return f_ver._id === instance.flow_version;
      });

      if (!instance_flow_ver) {
        throw new Meteor.Error('error!', "未找到申请单对应流程版本");
      }

      flow_ver_end_step = _.find(instance_flow_ver.steps, function (f_step) {
        return f_step.step_type === "end";
      });
      permissions = permissionManager.getFlowPermissions(flow_id, current_user);
      now = new Date();
      setObj = new Object();

      if (permissions.includes("admin") || space.admins.includes(current_user) || instance.submitter === current_user || instance.applicant === current_user) {
        if (!terminate_reason) {
          throw new Meteor.Error('error!', "还未填写强制结束申请单的理由，操作失败");
        }

        instance_trace = _.find(instance.traces, function (trace) {
          return trace.is_finished === false;
        });
        traces = instance.traces;
        i = 0;

        while (i < traces.length) {
          if (traces[i].is_finished === false) {
            traces[i].is_finished = true;
            traces[i].finish_date = now;
            h = 0;

            while (h < traces[i].approves.length) {
              if (traces[i].approves[h].is_finished === false) {
                traces[i].approves[h].is_finished = true;
                traces[i].approves[h].finish_date = now;
                traces[i].approves[h].judge = null;
                traces[i].approves[h].description = null;
              }

              h++;
            }

            newApprove = new Object();
            newApprove._id = new Mongo.ObjectID()._str;
            newApprove.instance = instance_id;
            newApprove.trace = instance_trace._id;
            newApprove.is_finished = true;
            newApprove.user = current_user;
            newApprove.user_name = current_user_info.name;
            newApprove.handler = current_user;
            newApprove.handler_name = current_user_info.name;
            newApprove.handler_organization = space_user_org_info["organization"];
            newApprove.handler_organization_name = space_user_org_info["organization_name"];
            newApprove.handler_organization_fullname = space_user_org_info["organization_fullname"];
            newApprove.start_date = now;
            newApprove.finish_date = now;
            newApprove.due_date = instance_trace.due_date;
            newApprove.read_date = now;
            newApprove.judge = "terminated";
            newApprove.is_read = true;
            newApprove.description = terminate_reason;
            newApprove.is_error = false;
            newApprove.values = new Object();
            newApprove.cost_time = newApprove.finish_date - newApprove.start_date;
            traces[i].approves.push(newApprove);
          }

          i++;
        }

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [instance_trace._id];
        newTrace.is_finished = true;
        newTrace.step = flow_ver_end_step._id;
        newTrace.name = flow_ver_end_step.name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.judge = "terminated";
        setObj.state = "completed";
        setObj.final_decision = "terminated";
        old_inbox_users = instance.inbox_users;
        old_cc_users = instance.cc_users || [];
        old_outbox_users = instance.outbox_users;
        tempUsers = new Array();

        _.each(instance_trace.approves, function (nft_approve) {
          tempUsers.push(nft_approve.user);
          return tempUsers.push(nft_approve.handler);
        });

        setObj.outbox_users = _.uniq(instance.outbox_users.concat(tempUsers));
        setObj.inbox_users = new Array();
        setObj.cc_users = new Array();
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.current_step_name = flow_ver_end_step.name;
        setObj.current_step_auto_submit = false;
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          ins = uuflowManager.getInstance(instance_id);
          pushManager.send_instance_notification("submit_terminate_applicant", ins, terminate_reason, current_user_info);

          if (old_inbox_users) {
            _.each(_.uniq(old_inbox_users.concat(old_cc_users)), function (user_id) {
              return pushManager.send_message_to_specifyUser("terminate_approval", user_id);
            });
          }

          return pushManager.triggerWebhook(ins.flow, ins, {}, 'terminate', current_user, []);
        }
      }
    });

    pushManager.send_message_current_user(current_user_info);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_reassign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_reassign.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/reassign', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, approve_users_handlers, assignee_appr, current_space_user, current_user_organization, i, inbox_users, inbox_users_from_client, ins, instance, instance_id, last_trace, last_trace_from_client, new_inbox_users, not_in_inbox_users, now, permissions, r, reassign_reason, setObj, space, space_id;

      instance_id = instance_from_client['_id'];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      uuflowManager.isInstancePending(instance);
      last_trace_from_client = _.last(instance_from_client["traces"]);
      last_trace = _.find(instance.traces, function (t) {
        return t._id === last_trace_from_client["_id"];
      });

      if (last_trace.is_finished === true) {
        return;
      }

      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne({
        _id: space_id
      }, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      inbox_users = instance.inbox_users;
      inbox_users_from_client = instance_from_client["inbox_users"];
      reassign_reason = instance_from_client["reassign_reason"];
      not_in_inbox_users = _.difference(inbox_users, inbox_users_from_client);
      new_inbox_users = _.difference(inbox_users_from_client, inbox_users);

      if (not_in_inbox_users.length === 0 && new_inbox_users.length === 0) {
        return;
      }

      setObj = new Object();
      now = new Date();
      i = 0;
      approve_users_handlers = [];

      while (i < last_trace.approves.length) {
        if (not_in_inbox_users.includes(last_trace.approves[i].handler)) {
          if (last_trace.approves[i].is_finished === false && last_trace.approves[i].type !== "cc" && last_trace.approves[i].type !== "distribute") {
            last_trace.approves[i].is_finished = true;
            last_trace.approves[i].finish_date = now;
            last_trace.approves[i].judge = "terminated";
            last_trace.approves[i].description = "";
            last_trace.approves[i].cost_time = last_trace.approves[i].finish_date - last_trace.approves[i].start_date;
            approve_users_handlers.push(last_trace.approves[i].user);
            approve_users_handlers.push(last_trace.approves[i].handler);
          }
        }

        i++;
      }

      current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
      current_user_organization = db.organizations.findOne({
        _id: current_space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      assignee_appr = new Object();
      assignee_appr._id = new Mongo.ObjectID()._str;
      assignee_appr.instance = last_trace.instance;
      assignee_appr.trace = last_trace._id;
      assignee_appr.is_finished = true;
      assignee_appr.user = current_user;
      assignee_appr.user_name = current_user_info.name;
      assignee_appr.handler = current_user;
      assignee_appr.handler_name = current_user_info.name;
      assignee_appr.handler_organization = current_space_user.organization;
      assignee_appr.handler_organization_name = current_user_organization.name;
      assignee_appr.handler_organization_fullname = current_user_organization.fullname;
      assignee_appr.start_date = now;
      assignee_appr.finish_date = now;
      assignee_appr.due_date = last_trace.due_date;
      assignee_appr.read_date = now;
      assignee_appr.judge = "reassigned";
      assignee_appr.is_read = true;
      assignee_appr.description = reassign_reason;
      assignee_appr.is_error = false;
      assignee_appr.values = new Object();
      assignee_appr.cost_time = assignee_appr.finish_date - assignee_appr.start_date;
      last_trace.approves.push(assignee_appr);

      _.each(new_inbox_users, function (user_id) {
        var agent, handler_id, handler_info, new_appr, new_user, space_user, user_organization;
        new_user = db.users.findOne(user_id, {
          fields: {
            name: 1
          }
        });
        space_user = uuflowManager.getSpaceUser(space_id, user_id);
        user_organization = db.organizations.findOne(space_user.organization, {
          fields: {
            name: 1,
            fullname: 1
          }
        });
        new_appr = new Object();
        new_appr._id = new Mongo.ObjectID()._str;
        new_appr.instance = last_trace.instance;
        new_appr.trace = last_trace._id;
        new_appr.is_finished = false;
        new_appr.user = user_id;
        new_appr.user_name = new_user.name;
        handler_id = user_id;
        handler_info = new_user;
        agent = uuflowManager.getAgent(space_id, user_id);

        if (agent) {
          inbox_users_from_client[inbox_users_from_client.indexOf(user_id)] = agent;
          handler_id = agent;
          handler_info = db.users.findOne({
            _id: agent
          }, {
            fields: {
              name: 1
            }
          });
          new_appr.agent = agent;
        }

        new_appr.handler = handler_id;
        new_appr.handler_name = handler_info.name;
        new_appr.handler_organization = space_user.organization;
        new_appr.handler_organization_name = user_organization.name;
        new_appr.handler_organization_fullname = user_organization.fullname;
        new_appr.from_user = current_user;
        new_appr.from_user_name = current_user_info.name;
        new_appr.type = "reassign";
        new_appr.start_date = now;
        new_appr.due_date = last_trace.due_date;
        new_appr.is_read = false;
        new_appr.is_error = false;
        new_appr.values = new Object();
        uuflowManager.setRemindInfo(instance.values, new_appr);
        return last_trace.approves.push(new_appr);
      });

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(approve_users_handlers);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.inbox_users = inbox_users_from_client;
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj["traces.$.approves"] = last_trace.approves;
      r = db.instances.update({
        _id: instance_id,
        "traces._id": last_trace._id
      }, {
        $set: setObj
      });

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, reassign_reason, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'reassign', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_relocate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_relocate.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/relocate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, ah, approve_users, current_setp, current_setp_type, current_space_user, current_user_organization, flow, h, i, inbox_users, ins, instance, instance_id, l, last_trace, newTrace, new_inbox_users, next_step, next_step_name, next_step_type, not_in_inbox_users, now, permissions, r, relocate_appr, relocate_comment, relocate_inbox_users, relocate_next_step, sameTraces, setObj, signShowApproveId, space, space_id, ta, ti, traces;

      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      last_trace = _.last(instance.traces);
      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne(instance.space, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      space_id = instance.space;
      instance_id = last_trace.instance;
      inbox_users = instance.inbox_users;
      relocate_inbox_users = instance_from_client["relocate_inbox_users"];
      relocate_comment = instance_from_client["relocate_comment"];
      relocate_next_step = instance_from_client["relocate_next_step"];
      not_in_inbox_users = _.difference(inbox_users, relocate_inbox_users);
      new_inbox_users = _.difference(relocate_inbox_users, inbox_users);
      approve_users = [];
      flow = uuflowManager.getFlow(instance.flow);
      next_step = uuflowManager.getStep(instance, flow, relocate_next_step);
      next_step_type = next_step.step_type;
      next_step_name = next_step.name;
      current_setp = uuflowManager.getStep(instance, flow, last_trace.step);
      current_setp_type = current_setp.step_type;
      traces = instance.traces;
      setObj = new Object();
      setObj.values = uuflowManager.getUpdatedValues(instance);
      now = new Date();
      i = 0;

      while (i < traces.length) {
        if (traces[i]._id === last_trace._id) {
          if (!traces[i].approves) {
            traces[i].approves = new Array();
          }

          h = 0;

          while (h < traces[i].approves.length) {
            if (traces[i].approves[h].is_finished === false && traces[i].approves[h].type !== "cc" && traces[i].approves[h].type !== "distribute") {
              traces[i].approves[h].start_date = now;
              traces[i].approves[h].finish_date = now;
              traces[i].approves[h].read_date = now;
              traces[i].approves[h].is_error = false;
              traces[i].approves[h].is_read = true;
              traces[i].approves[h].is_finished = true;
              traces[i].approves[h].judge = "terminated";
              traces[i].approves[h].cost_time = traces[i].approves[h].finish_date - traces[i].approves[h].start_date;
              approve_users.push(traces[i].approves[h].user);

              if (traces[i].approves[h].sign_show === true) {
                ta = traces[i].approves[h];
                sameTraces = _.filter(traces, function (t) {
                  return t.step === traces[i].step;
                });
                l = sameTraces.length - 1;
                signShowApproveId = null;

                while (l > -1) {
                  _.each(sameTraces[l].approves, function (a) {
                    if (a.user === ta.user && a.judge !== "terminated" && a.description && !signShowApproveId) {
                      return signShowApproveId = a._id;
                    }
                  });

                  l--;
                }

                if (signShowApproveId) {
                  ti = 0;

                  while (ti < traces.length) {
                    ah = 0;

                    while (ah < traces[ti].approves.length) {
                      if (traces[ti].approves[ah]._id === signShowApproveId) {
                        traces[ti].approves[ah].sign_show = true;
                        traces[i].approves[h].sign_show = false;
                      }

                      ah++;
                    }

                    ti++;
                  }
                }
              }
            }

            h++;
          }

          current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
          current_user_organization = db.organizations.findOne(current_space_user.organization, {
            fields: {
              name: 1,
              fullname: 1
            }
          });
          relocate_appr = new Object();
          relocate_appr._id = new Mongo.ObjectID()._str;
          relocate_appr.instance = instance_id;
          relocate_appr.trace = traces[i]._id;
          relocate_appr.is_finished = true;
          relocate_appr.user = current_user;
          relocate_appr.user_name = current_user_info.name;
          relocate_appr.handler = current_user;
          relocate_appr.handler_name = current_user_info.name;
          relocate_appr.handler_organization = current_space_user.organization;
          relocate_appr.handler_organization_name = current_user_organization.name;
          relocate_appr.handler_organization_fullname = current_user_organization.fullname;
          relocate_appr.start_date = now;
          relocate_appr.finish_date = now;
          relocate_appr.due_date = traces[i].due_date;
          relocate_appr.read_date = now;
          relocate_appr.judge = "relocated";
          relocate_appr.is_read = true;
          relocate_appr.description = relocate_comment;
          relocate_appr.is_error = false;
          relocate_appr.values = new Object();
          relocate_appr.cost_time = relocate_appr.finish_date - relocate_appr.start_date;
          traces[i].approves.push(relocate_appr);
          traces[i].is_finished = true;
          traces[i].finish_date = now;
          traces[i].judge = "relocated";
        }

        i++;
      }

      if (next_step_type === "end") {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = true;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.approves = [];
        setObj.state = "completed";
        setObj.inbox_users = [];
        setObj.final_decision = "terminated";
        setObj.finish_date = new Date();
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = false;
      } else {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = false;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(next_step.timeout_hours, space_id);
        newTrace.approves = [];

        _.each(relocate_inbox_users, function (next_step_user_id, idx) {
          var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
          newApprove = new Object();
          newApprove._id = new Mongo.ObjectID()._str;
          newApprove.instance = instance_id;
          newApprove.trace = newTrace._id;
          newApprove.is_finished = false;
          newApprove.user = next_step_user_id;
          user_info = db.users.findOne(next_step_user_id, {
            fields: {
              name: 1
            }
          });
          newApprove.user_name = user_info.name;
          handler_id = next_step_user_id;
          handler_info = user_info;
          agent = uuflowManager.getAgent(space_id, next_step_user_id);

          if (agent) {
            relocate_inbox_users[idx] = agent;
            handler_id = agent;
            handler_info = db.users.findOne({
              _id: agent
            }, {
              fields: {
                name: 1
              }
            });
            newApprove.agent = agent;
          }

          newApprove.handler = handler_id;
          newApprove.handler_name = handler_info.name;
          next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
          next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
          newApprove.handler_organization = next_step_user_org_info["organization"];
          newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
          newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
          newApprove.start_date = now;
          newApprove.due_date = newTrace.due_date;
          newApprove.is_read = false;
          newApprove.is_error = false;
          newApprove.values = new Object();
          uuflowManager.setRemindInfo(instance.values, newApprove);
          return newTrace.approves.push(newApprove);
        });

        setObj.inbox_users = relocate_inbox_users;
        setObj.state = "pending";
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, next_step.lines);
      }

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(inbox_users).concat(approve_users);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj.is_archived = false;
      traces.push(newTrace);
      setObj.traces = traces;

      if (setObj.state === 'completed') {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });
      } else {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj,
          $unset: {
            finish_date: 1
          }
        });
      }

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, relocate_comment, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'relocate', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_archive.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_archive.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/archive', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var instance, instance_id, setObj, space, space_id, space_user;
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      uuflowManager.isInstanceFinishedAndNotArchieved(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      uuflowManager.isInstanceSubmitterOrApplicantOrSpaceAdmin(instance, current_user, space);
      setObj = new Object();
      setObj.is_archived = true;
      setObj.modified = new Date();
      setObj.modified_by = current_user;
      return db.instances.update({
        _id: instance_id
      }, {
        $set: setObj
      });
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_export.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_export.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/instances", function (req, res, next) {
    var current_user_info, e, ejs, ejsLint, end_date, error_obj, fields, fileName, flow, flow_id, flow_ids, form, form_name, formatDate, ins_to_xls, lang, last_month_date, now, query, ret, selector, space, space_id, start_date, str, table_fields, template, timezoneoffset, type, uid, utcOffset;

    try {
      current_user_info = uuflowManager.check_authorization(req);
      query = req.query;
      space_id = query.space_id;
      flow_id = query.flow_id;
      type = parseInt(query.type);
      timezoneoffset = parseInt(query.timezoneoffset);
      flow = db.flows.findOne({
        _id: flow_id
      }, {
        fields: {
          form: 1
        }
      });
      form = db.forms.findOne({
        _id: flow.form
      }, {
        fields: {
          name: 1,
          'current.fields': 1
        }
      });
      form_name = form.name;
      fields = form.current.fields;
      table_fields = new Array();

      _.each(form.current.fields, function (field) {
        if (field.type === "table") {
          return table_fields.push(field);
        }
      });

      ins_to_xls = new Array();
      start_date = null;
      end_date = null;
      now = new Date();
      selector = {
        space: space_id,
        flow: flow_id
      };
      selector.state = {
        $in: ["pending", "completed"]
      };
      uid = current_user_info._id;
      space = db.spaces.findOne(space_id);

      if (!space) {
        selector.state = "none";
      }

      if (!space.admins.includes(uid)) {
        flow_ids = WorkflowManager.getMyAdminOrMonitorFlows(space_id, uid);

        if (!flow_ids.includes(selector.flow)) {
          selector.$or = [{
            submitter: uid
          }, {
            applicant: uid
          }, {
            inbox_users: uid
          }, {
            outbox_users: uid
          }];
        }
      }

      if (type === 0) {
        start_date = new Date(now.getFullYear(), now.getMonth(), 1);
        selector.submit_date = {
          $gte: start_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 1) {
        last_month_date = new Date(new Date(now.getFullYear(), now.getMonth(), 1) - 1000 * 60 * 60 * 24);
        start_date = new Date(last_month_date.getFullYear(), last_month_date.getMonth(), 1);
        end_date = new Date(now.getFullYear(), now.getMonth(), 1);
        selector.submit_date = {
          $gte: start_date,
          $lte: end_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 2) {
        start_date = new Date(now.getFullYear(), 0, 1);
        selector.submit_date = {
          $gte: start_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 3) {
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      }

      ejs = require('ejs');
      str = Assets.getText('server/ejs/export_instances.ejs');
      ejsLint = require('ejs-lint');
      error_obj = ejsLint.lint(str, {});

      if (error_obj) {
        console.error("===/api/workflow/export:");
        console.error(error_obj);
      }

      template = ejs.compile(str);
      lang = 'en';

      if (current_user_info.locale === 'zh-cn') {
        lang = 'zh-CN';
      }

      utcOffset = timezoneoffset / -60;

      formatDate = function (date, formater) {
        return moment(date).utcOffset(utcOffset).format(formater);
      };

      ret = template({
        lang: lang,
        formatDate: formatDate,
        form_name: form_name,
        fields: fields,
        table_fields: table_fields,
        ins_to_xls: ins_to_xls
      });
      fileName = "SteedOSWorkflow_" + moment().format('YYYYMMDDHHmm') + ".xls";
      res.setHeader("Content-type", "application/octet-stream");
      res.setHeader("Content-Disposition", "attachment;filename=" + encodeURI(fileName));
      return res.end(ret);
    } catch (error) {
      e = error;
      console.error(e.stack);
      return res.end(e.message);
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_space_changeset.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_space_changeset.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/uf/space/changeset', function (req, res, next) {
  var auth_token, data, e, formids, is_admin, query, sync_token;

  try {
    query = req.query;
    auth_token = db.auth_tokens.findOne({
      auth_token: query.auth_token
    });

    if (!auth_token || !auth_token.enabled) {
      throw new Meteor.Error(401, 'Unauthorized');
    }

    sync_token = query["sync_token"];
    formids = query["formids"];
    is_admin = query["is_admin"];
    data = uuflowManager.get_SpaceChangeSet(formids, is_admin, sync_token);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: data
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_retrieve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_retrieve.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/retrieve', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, flow, handler_info, i, ins, instance, instance_id, last_trace, last_trace_id, newApprove, newTrace, now, old_inbox_users, org_info, previous_step, previous_trace, previous_trace_approves, previous_trace_id, previous_trace_name, previous_trace_step_id, r, retrieve_approve, retrieve_comment, retrieve_type, setObj, space_id, space_user, the_trace, traces;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      retrieve_comment = instance_from_client['retrieve_comment'];

      if (!instance.outbox_users.includes(current_user) && instance.submitter !== current_user && instance.applicant !== current_user) {
        throw new Meteor.Error('error', '当前用户不符合取回条件');
      }

      retrieve_type = "";
      traces = instance.traces;
      last_trace = _.last(traces);
      last_trace_id = last_trace._id;
      previous_trace_id = last_trace.previous_trace_ids[0];
      previous_trace = _.find(traces, function (t) {
        return t._id === previous_trace_id;
      });
      previous_trace_step_id = previous_trace.step;
      previous_trace_name = previous_trace.name;
      flow = uuflowManager.getFlow(instance.flow);
      previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);

      if (previous_step.step_type === "counterSign") {
        throw new Meteor.Error('error', '会签不能取回');
      }

      previous_trace_approves = _.filter(previous_trace.approves, function (a) {
        return a.type !== 'cc' && a.type !== 'distribute' && a.type !== 'forward' && ['approved', 'submitted', 'rejected'].includes(a.judge);
      });

      if (previous_trace_approves.length === 1 && (previous_trace_approves[0].user === current_user || previous_trace_approves[0].handler === current_user)) {
        retrieve_type = 'normal';
      }

      i = traces.length;
      retrieve_approve = {};

      while (i > 0) {
        _.each(traces[i - 1].approves, function (a) {
          if (a.type === 'cc' && a.is_finished === true && a.user === current_user) {
            retrieve_type = 'cc';
            return retrieve_approve = a;
          }
        });

        if (retrieve_type === 'cc') {
          break;
        }

        i--;
      }

      if (retrieve_type === 'normal') {
        flow = uuflowManager.getFlow(instance.flow);
        previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);
        space_id = instance.space;
        instance_id = instance._id;
        old_inbox_users = instance.inbox_users;
        setObj = new Object();
        now = new Date();

        _.each(traces, function (t) {
          var current_space_user, current_user_organization, retrieve_appr;

          if (t._id === last_trace_id) {
            if (!t.approves) {
              t.approves = new Array();
            }

            _.each(t.approves, function (appr) {
              if (appr.is_finished === false && appr.type !== "cc") {
                appr.start_date = now;
                appr.finish_date = now;
                appr.read_date = now;
                appr.is_error = false;
                appr.is_read = true;
                appr.is_finished = true;
                appr.judge = "terminated";
                return appr.cost_time = appr.finish_date - appr.start_date;
              }
            });

            current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
            current_user_organization = db.organizations.findOne(current_space_user.organization, {
              fields: {
                name: 1,
                fullname: 1
              }
            });
            retrieve_appr = new Object();
            retrieve_appr._id = new Mongo.ObjectID()._str;
            retrieve_appr.instance = instance_id;
            retrieve_appr.trace = t._id;
            retrieve_appr.is_finished = true;
            retrieve_appr.user = current_user;
            retrieve_appr.user_name = current_user_info.name;
            retrieve_appr.handler = current_user;
            retrieve_appr.handler_name = current_user_info.name;
            retrieve_appr.handler_organization = current_space_user.organization;
            retrieve_appr.handler_organization_name = current_user_organization.name;
            retrieve_appr.handler_organization_fullname = current_user_organization.fullname;
            retrieve_appr.start_date = now;
            retrieve_appr.finish_date = now;
            retrieve_appr.due_date = t.due_date;
            retrieve_appr.read_date = now;
            retrieve_appr.judge = "retrieved";
            retrieve_appr.is_read = true;
            retrieve_appr.description = retrieve_comment;
            retrieve_appr.is_error = false;
            retrieve_appr.values = new Object();
            retrieve_appr.cost_time = retrieve_appr.finish_date - retrieve_appr.start_date;
            t.approves.push(retrieve_appr);
            t.is_finished = true;
            t.finish_date = now;
            return t.judge = "retrieved";
          }
        });

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace_id];
        newTrace.is_finished = false;
        newTrace.step = previous_trace_step_id;
        newTrace.name = previous_trace_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(previous_step.timeout_hours, space_id);
        newTrace.approves = [];
        newApprove = new Object();
        newApprove._id = new Mongo.ObjectID()._str;
        newApprove.instance = instance_id;
        newApprove.trace = newTrace._id;
        newApprove.is_finished = false;
        newApprove.user = current_user;
        handler_info = db.users.findOne(current_user, {
          fields: {
            name: 1
          }
        });
        newApprove.user_name = handler_info.name;
        newApprove.handler = current_user;
        newApprove.handler_name = handler_info.name;
        space_user = uuflowManager.getSpaceUser(space_id, current_user);
        org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
        newApprove.handler_organization = org_info["organization"];
        newApprove.handler_organization_name = org_info["organization_name"];
        newApprove.handler_organization_fullname = org_info["organization_fullname"];
        newApprove.start_date = now;
        newApprove.due_date = newTrace.due_date;
        newApprove.is_read = false;
        newApprove.is_error = false;
        newApprove.values = new Object();
        uuflowManager.setRemindInfo(instance.values, newApprove);
        newTrace.approves.push(newApprove);
        setObj.inbox_users = [current_user];
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.current_step_name = previous_trace_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, previous_step.lines);
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);

          _.each(old_inbox_users, function (user_id) {
            if (user_id !== current_user) {
              return pushManager.send_message_to_specifyUser("current_user", user_id);
            }
          });

          ins = uuflowManager.getInstance(instance_id);
          return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, ins.inbox_users);
        }
      } else if (retrieve_type === 'cc') {
        setObj = new Object();
        now = new Date();
        instance_id = instance._id;
        the_trace = _.find(traces, function (t) {
          return t._id === retrieve_approve.trace;
        });

        _.each(the_trace.approves, function (a) {
          if (a._id === retrieve_approve._id) {
            a.is_finished = false;
            a.finish_date = void 0;
            a.judge = void 0;
            return a.cost_time = void 0;
          }
        });

        cc_users = instance.cc_users;
        cc_users.push(current_user);
        setObj.modified = now;
        setObj.modified_by = current_user;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.cc_users = cc_users;
        setObj['traces.$.approves'] = the_trace.approves;
        r = db.instances.update({
          _id: instance_id,
          'traces._id': retrieve_approve.trace
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);
        }

        ins = uuflowManager.getInstance(instance_id);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, [current_user]);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add('post', '/api/workflow/forward', function (req, res, next) {
  try {
    var current_user_info = uuflowManager.check_authorization(req);
    var current_user_id = current_user_info._id;
    var hashData = req.body;
    var instance_id = hashData.instance_id;
    var space_id = hashData.space_id;
    var flow_id = hashData.flow_id;
    var hasSaveInstanceToAttachment = hashData.hasSaveInstanceToAttachment;
    var description = hashData.description;
    var isForwardAttachments = hashData.isForwardAttachments;
    var selectedUsers = hashData.selectedUsers;
    var action_type = hashData.action_type;
    var related = hashData.related;
    var from_approve_id = hashData.from_approve_id;
    check(instance_id, String);
    check(space_id, String);
    check(flow_id, String);
    check(hasSaveInstanceToAttachment, Boolean);
    check(description, String);
    check(isForwardAttachments, Boolean);
    check(selectedUsers, Array);
    check(action_type, Match.OneOf('forward', 'distribute'));
    if (action_type == "distribute") check(from_approve_id, String);
    var ins = db.instances.findOne(instance_id);
    var old_space_id = ins.space;
    var flow = db.flows.findOne(flow_id);
    var space = db.spaces.findOne(space_id);

    if (!ins || !flow || !space) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var forward_users = new Array();

    if (_.isEmpty(selectedUsers)) {
      forward_users = [current_user_id];
    } else {
      forward_users = selectedUsers;
    } // 校验分发对象是否有分发流程的提交权限


    var no_permission_user_ids = new Array();

    _.each(forward_users, function (uid) {
      var permissions = permissionManager.getFlowPermissions(flow_id, uid);

      if (!permissions.includes("add")) {
        // throw new Meteor.Error('error!', "该申请人没有提交此申请单的权限。")
        no_permission_user_ids.push(uid);
      }
    });

    if (!_.isEmpty(no_permission_user_ids)) {
      var no_permission_users_name = new Array();
      db.users.find({
        _id: {
          $in: no_permission_user_ids
        }
      }, {
        fields: {
          name: 1
        }
      }).forEach(function (u) {
        no_permission_users_name.push(u.name);
      });
      throw new Meteor.Error('no_permission', "该提交人没有提交此申请单的权限。", no_permission_users_name.join(','));
    }

    var new_ins_ids = new Array();
    var current_trace = null;

    if (action_type == "distribute") {
      _.each(ins.traces, function (t) {
        if (!current_trace) {
          _.each(t.approves, function (a) {
            if (!current_trace) {
              if (a._id == from_approve_id) current_trace = t;
            }
          });
        }
      });
    } else {
      current_trace = _.last(ins.traces);
    }

    var current_trace_id = current_trace._id;
    var forward_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    var set_obj = new Object(); // 计算values

    var old_values = ins.values,
        new_values = {};
    var form = db.forms.findOne(flow.form);
    var fields = form.current.fields || [];
    var old_form = db.forms.findOne(ins.form);
    var old_form_version = ins.form_version,
        old_fields = [],
        common_fields = [];
    var select_to_input_fields = [];

    if (old_form.current._id == old_form_version) {
      old_fields = old_form.current.fields;
    } else {
      if (old_form.historys) {
        old_form.historys.forEach(function (h) {
          if (h._id == old_form_version) old_fields = h.fields;
        });
      }
    }

    fields.forEach(function (field) {
      var exists_field = _.find(old_fields, function (f) {
        return f.type == field.type && f.code == field.code;
      });

      if (exists_field) common_fields.push(field);

      var select_input_field = _.find(old_fields, function (f) {
        return f.type == 'select' && field.type == 'input' && f.code == field.code;
      });

      if (select_input_field) select_to_input_fields.push(select_input_field);
    });
    select_to_input_fields.forEach(function (field) {
      if (old_values[field.code]) {
        new_values[field.code] = old_values[field.code];
      }
    });
    common_fields.forEach(function (field) {
      if (field.type == 'section') {
        if (field.fields) {
          field.fields.forEach(function (f) {
            // 跨工作区转发不复制选人选组
            if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
              return;
            }

            var key = f.code;
            var old_v = old_values[key];

            if (old_v) {
              // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
              if (f.type == 'select' || f.type == 'radio') {
                var options = f.options.split('\n');
                if (!options.includes(old_v)) return;
              }

              if (f.type == 'multiSelect') {
                var options = f.options.split('\n');
                var old_multiSelected = old_v.split(',');

                var new_multiSelected = _.intersection(options, old_multiSelected);

                old_v = new_multiSelected.join(',');
              }

              new_values[key] = old_v;
            }
          });
        }
      } else if (field.type == 'table') {
        if (!_.isEmpty(old_values[field.code])) {
          new_values[field.code] = new Array();
          old_values[field.code].forEach(function (old_table_row_values) {
            var new_table_row_values = {};

            if (!_.isEmpty(field.fields)) {
              field.fields.forEach(function (f) {
                // 跨工作区转发不复制选人选组
                if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
                  return;
                }

                var key = f.code;
                var old_v = old_table_row_values[key];

                if (old_v) {
                  // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
                  if (f.type == 'select' || f.type == 'radio') {
                    var options = f.options.split('\n');
                    if (!options.includes(old_v)) return;
                  }

                  if (f.type == 'multiSelect') {
                    var options = f.options.split('\n');
                    var old_multiSelected = old_v.split(',');

                    var new_multiSelected = _.intersection(options, old_multiSelected);

                    old_v = new_multiSelected.join(',');
                  }

                  new_table_row_values[key] = old_v;
                }
              });
            }

            if (old_table_row_values._id) {
              new_table_row_values._id = new Mongo.ObjectID()._str;
            }

            if (!_.isEmpty(new_table_row_values)) {
              new_values[field.code].push(new_table_row_values);
            }
          });
        }
      } else {
        // 跨工作区转发不复制选人选组
        if (['group', 'user'].includes(field.type) && old_space_id != space_id) {
          return;
        }

        var key = field.code;
        var old_v = old_values[key];

        if (old_v) {
          // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
          if (field.type == 'select' || field.type == 'radio') {
            var options = field.options.split('\n');
            if (!options.includes(old_v)) return;
          }

          if (field.type == 'multiSelect') {
            var options = field.options.split('\n');
            var old_multiSelected = old_v.split(',');

            var new_multiSelected = _.intersection(options, old_multiSelected);

            old_v = new_multiSelected.join(',');
          }

          new_values[key] = old_v;
        }
      }
    }); //如果是分发，则value中的record_need、FONDSID不需要分发到新申请单中

    if (action_type === 'distribute') {
      delete new_values.record_need;
      delete new_values.FONDSID;
    } // 计算申请单标题


    var instance_name = "";
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      try {
        var iscript = name_forumla.replace(/\{/g, "(new_values['").replace(/\}/g, "'] || '')");
        var rev = eval(iscript);
        instance_name = rev || flow.name;
      } catch (error) {
        throw new Meteor.Error('caculate_instance_name', "计算申请单标题出错请检查表单标题脚本。");
      }
    } else {
      instance_name = flow.name;
    } // instance中记录当前步骤名称 #1314


    var start_step = _.find(flow.current.steps, function (step) {
      return step.step_type == 'start';
    }); // 新建申请单时，instances记录流程名称、流程分类名称 #1313


    var category_name = "";

    if (form.category) {
      var category = uuflowManager.getCategory(form.category);
      if (category) category_name = category.name;
    }

    _.each(forward_users, function (user_id) {
      var user_info = db.users.findOne(user_id);
      var space_user = db.space_users.findOne({
        space: space_id,
        user: user_id
      }, {
        fields: {
          organization: 1
        }
      });
      var space_user_org_info = db.organizations.findOne({
        _id: space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var now = new Date();
      var ins_obj = {};
      var agent = uuflowManager.getAgent(space_id, user_id);
      var handler_id = user_id;
      var handler_info = user_info;
      var handler_space_user = space_user;
      var handler_org_info = space_user_org_info;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent);
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
      }

      ins_obj._id = db.instances._makeNewID();
      ins_obj.space = space_id;
      ins_obj.flow = flow_id;
      ins_obj.flow_version = flow.current._id;
      ins_obj.form = flow.form;
      ins_obj.form_version = flow.current.form_version;
      ins_obj.name = instance_name;
      ins_obj.submitter = handler_id;
      ins_obj.submitter_name = handler_info.name;
      ins_obj.applicant = user_id;
      ins_obj.applicant_name = user_info.name;
      ins_obj.applicant_organization = space_user.organization;
      ins_obj.applicant_organization_name = space_user_org_info.name;
      ins_obj.applicant_organization_fullname = space_user_org_info.fullname;
      ins_obj.state = "draft";
      ins_obj.code = "";
      ins_obj.is_archived = false;
      ins_obj.is_deleted = false;
      ins_obj.created = now;
      ins_obj.created_by = current_user_id;
      ins_obj.modified = now;
      ins_obj.modified_by = current_user_id;
      ins_obj.inbox_users = [handler_id];
      ins_obj.values = new_values;

      if (action_type == 'distribute') {
        // 解决多次分发看不到正文、附件问题
        if (ins.distribute_from_instance) {
          ins_obj.distribute_from_instance = ins.distribute_from_instance;
        } else {
          ins_obj.distribute_from_instance = instance_id;
        }

        ins_obj.distribute_from_instances = _.clone(ins.distribute_from_instances) || [];
        ins_obj.distribute_from_instances.push(instance_id);

        if (related) {
          ins_obj.related_instances = [instance_id];
        }
      } else if (action_type == 'forward') {
        ins_obj.forward_from_instance = instance_id;
      } // 新建Trace


      var trace_obj = {};
      trace_obj._id = new Mongo.ObjectID()._str;
      trace_obj.instance = ins_obj._id;
      trace_obj.is_finished = false; // 当前最新版flow中开始节点的step_id

      var step_id, step_name, can_edit_main_attach, can_edit_normal_attach;
      flow.current.steps.forEach(function (step) {
        if (step.step_type == "start") {
          step_id = step._id;
          step_name = step.name;
          can_edit_main_attach = step.can_edit_main_attach;
          can_edit_normal_attach = step.can_edit_normal_attach;
        }
      });
      trace_obj.step = step_id;
      trace_obj.start_date = now;
      trace_obj.name = step_name; // 新建Approve

      var appr_obj = {};
      appr_obj._id = new Mongo.ObjectID()._str;
      appr_obj.instance = ins_obj._id;
      appr_obj.trace = trace_obj._id;
      appr_obj.is_finished = false;
      appr_obj.user = user_id;
      appr_obj.user_name = user_info.name;
      appr_obj.handler = handler_id;
      appr_obj.handler_name = handler_info.name;
      appr_obj.handler_organization = handler_space_user.organization;
      appr_obj.handler_organization_name = handler_org_info.name;
      appr_obj.handler_organization_fullname = handler_org_info.fullname;
      appr_obj.type = "draft";
      appr_obj.start_date = now;
      appr_obj.read_date = now;
      appr_obj.is_read = false;
      appr_obj.is_error = false;
      appr_obj.values = new_values;

      if (agent) {
        appr_obj.agent = agent;
      }

      trace_obj.approves = [appr_obj];
      ins_obj.traces = [trace_obj];
      if (flow.auto_remind == true) ins_obj.auto_remind = true;
      ins_obj.current_step_name = start_step.name;
      ins_obj.flow_name = flow.name;

      if (category_name) {
        ins_obj.category_name = category.name;
        ins_obj.category = category._id;
      }

      new_ins_id = db.instances.insert(ins_obj); // 复制附件

      var collection = cfs.instances; //将原表单内容存储为第一个附件

      if (hasSaveInstanceToAttachment) {
        // try {
        instanceHtml = InstanceReadOnlyTemplate.getInstanceHtml(user_info, space_id, ins, {
          absolute: true
        });
        var instanceFile = new FS.File();
        instanceFile.attachData(Buffer.from(instanceHtml, "utf-8"), {
          type: "text/html"
        }, function (error) {
          if (error) {
            throw new Meteor.Error(error.error, error.reason);
          }

          instanceFile.name(ins.name + ".html");
          instanceFile.size(instanceHtml.length);
          var metadata = {
            owner: user_id,
            owner_name: user_info.name,
            space: space_id,
            instance: new_ins_id,
            approve: appr_obj._id,
            current: true
          };
          instanceFile.metadata = metadata;
          var fileObj = collection.insert(instanceFile);
          fileObj.update({
            $set: {
              'metadata.parent': fileObj._id
            }
          });
        }); // } catch (e) {
        //     console.error(e);
        // }
      }

      if (isForwardAttachments && action_type == 'forward') {
        var files = collection.find({
          'metadata.instance': instance_id,
          'metadata.current': true
        });
        files.forEach(function (f) {
          // 判断新的流程开始节点是否有编辑正文和编辑附件权限
          if (f.metadata.main == true) {
            if (can_edit_main_attach != true && can_edit_normal_attach != true) return;
          } else {
            if (can_edit_normal_attach != true) return;
          }

          var newFile = new FS.File();
          newFile.attachData(f.createReadStream('instances'), {
            type: f.original.type
          }, function (err) {
            if (err) {
              throw new Meteor.Error(err.error, err.reason);
            }

            newFile.name(f.name());
            newFile.size(f.size());
            var metadata = {
              owner: user_id,
              owner_name: user_info.name,
              space: space_id,
              instance: new_ins_id,
              approve: appr_obj._id,
              current: true
            };

            if (f.metadata.main == true && can_edit_main_attach == true) {
              metadata.main = true;
            }

            newFile.metadata = metadata;
            var fileObj = collection.insert(newFile);
            fileObj.update({
              $set: {
                'metadata.parent': fileObj._id
              }
            });
          });
        });
      } // 给当前的申请单增加转发记录


      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': instance_id,
        'trace': current_trace_id,
        'is_finished': true,
        'user': user_id,
        'user_name': user_info.name,
        'handler': user_id,
        'handler_name': user_info.name,
        'handler_organization': space_user.organization,
        'handler_organization_name': space_user_org_info.name,
        'handler_organization_fullname': space_user_org_info.fullname,
        'type': action_type,
        'start_date': new Date(),
        'finish_date': new Date(),
        'is_read': false,
        'judge': 'submitted',
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'forward_space': space_id,
        'forward_instance': new_ins_id,
        'description': description,
        'from_approve_id': from_approve_id
      };
      forward_approves.push(appr);
      new_ins_ids.push(new_ins_id);
      pushManager.send_message_to_specifyUser("current_user", user_id);
    });

    set_obj.modified = new Date();
    set_obj.modified_by = current_user_id;
    var r = db.instances.update({
      _id: instance_id,
      "traces._id": current_trace_id
    }, {
      $set: set_obj,
      $addToSet: {
        'traces.$.approves': {
          $each: forward_approves
        }
      }
    });

    if (r) {
      _.each(current_trace.approves, function (a, idx) {
        if (a._id == from_approve_id) {
          var update_read = {};
          update_read["traces.$.approves." + idx + ".read_date"] = new Date();
          db.instances.update({
            _id: instance_id,
            "traces._id": current_trace_id
          }, {
            $set: update_read
          });
        }
      });
    }

    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        new_ins_ids: new_ins_ids
      }
    });
  } catch (e) {
    console.error(e.stack);
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/workflow/instance/:instanceId', function (req, res, next) {
  var box, current_user_id, current_user_info, e, flowId, ins, insId, permissions, redirectTo, redirectToUrl, ref, ref1, ref2, req_async, space, spaceId;

  try {
    current_user_info = uuflowManager.check_authorization(req, res);
    current_user_id = current_user_info._id;
    req_async = _.has(req.query, 'async');
    insId = req.params.instanceId;
    ins = db.instances.findOne(insId, {
      fields: {
        space: 1,
        flow: 1,
        state: 1,
        inbox_users: 1,
        cc_users: 1,
        outbox_users: 1,
        submitter: 1,
        applicant: 1
      }
    });

    if (!ins) {
      throw new Meteor.Error('error', 'instanceId is wrong or instance not exists.');
    }

    spaceId = ins.space;
    flowId = ins.flow;

    if (db.space_users.find({
      space: spaceId,
      user: current_user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'user is not belong to this space.');
    }

    box = '';

    if (((ref = ins.inbox_users) != null ? ref.includes(current_user_id) : void 0) || ((ref1 = ins.cc_users) != null ? ref1.includes(current_user_id) : void 0)) {
      box = 'inbox';
    } else if ((ref2 = ins.outbox_users) != null ? ref2.includes(current_user_id) : void 0) {
      box = 'outbox';
    } else if (ins.state === 'draft' && ins.submitter === current_user_id) {
      box = 'draft';
    } else if (ins.state === 'pending' && (ins.submitter === current_user_id || ins.applicant === current_user_id)) {
      box = 'pending';
    } else if (ins.state === 'completed' && ins.submitter === current_user_id) {
      box = 'completed';
    } else {
      permissions = permissionManager.getFlowPermissions(flowId, current_user_id);
      space = db.spaces.findOne(spaceId, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user_id)) {
        throw new Meteor.Error('error', "no permission.");
      }

      box = 'monitor';
    }

    redirectTo = "workflow/space/" + spaceId + "/" + box + "/" + insId;
    redirectToUrl = Meteor.absoluteUrl(redirectTo);

    if (req_async) {
      return res.status(200).send({
        "status": 302,
        "redirect": redirectTo
      });
    } else {
      res.setHeader("Location", redirectToUrl);
      res.writeHead(302);
      res.end();
    }
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_pending.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_pending.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/pending 获取待办文件

@apiDescription 获取当前用户的待办事项列表

@apiName getInbox

@apiGroup Workflow

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
	{
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
	{
		"status": "success",
		"data": [
			{
				"id": "g7wokXNkR9yxHvA4D",
				"start_date": "2017-11-23T02:28:53.164Z",
				"flow_name": "正文流程",
				"space_name": "审批王",
				"name": "正文流程 1",
				"applicant_name": null,
				"applicant_organization_name": "审批王",
				"submit_date": "2017-07-25T06:36:48.492Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-11-23T02:28:53.164Z",
				"is_read": false,
				"values": {}
			},
			{
				"id": "WqKSrWQoywgJaMp9k",
				"start_date": "2017-08-17T07:38:35.420Z",
				"flow_name": "正文\n",
				"space_name": "审批王",
				"name": "正文\n 1",
				"applicant_name": "殷亮辉",
				"applicant_organization_name": "审批王",
				"submit_date": "2017-06-27T10:26:19.468Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-08-17T07:38:35.421Z",
				"is_read": true,
				"values": {}
			}
		]
	}
 */JsonRoutes.add('get', '/api/workflow/open/pending', function (req, res, next) {
  var attach, e, is_read, limit, no_limit_count, query, ref, ref1, ref2, ref3, ref4, ref5, result_instances, space, space_id, space_names, special_user_id, start_date, u, uid, user_id, userid, username, workflow_categories;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    space_id = req.headers['x-space-id'] || ((ref = req.query) != null ? ref.spaceId : void 0);

    if (!space_id) {
      throw new Meteor.Error('error', 'need space_id');
    }

    user_id = req.userId;

    if (!user_id) {
      throw new Meteor.Error('error', 'Not logged in');
    }

    if (db.users.find({
      _id: user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'can not find user');
    }

    limit = ((ref1 = req.query) != null ? ref1.limit : void 0) || 500;
    limit = parseInt(limit);
    username = (ref2 = req.query) != null ? ref2.username : void 0;
    userid = (ref3 = req.query) != null ? ref3.userid : void 0;
    attach = (ref4 = req.query) != null ? ref4.attach : void 0;
    workflow_categories = (ref5 = req.query) != null ? ref5.workflow_categories : void 0;
    space = uuflowManager.getSpace(space_id);
    special_user_id;

    if (space.admins.includes(user_id)) {
      if (userid) {
        if (db.users.find({
          _id: userid
        }).count() < 1) {
          throw new Meteor.Error('error', "can not find user by userid: " + userid);
        }

        special_user_id = userid;
      } else if (username) {
        u = db.users.findOne({
          username: username
        }, {
          fields: {
            _id: 1
          }
        });

        if (_.isEmpty(u)) {
          throw new Meteor.Error('error', "can not find user by username: " + username);
        }

        special_user_id = u._id;
      }
    }

    result_instances = new Array();
    is_read = false;
    start_date = '';
    uid = user_id;
    query = {
      $or: [{
        inbox_users: user_id
      }, {
        cc_users: user_id
      }]
    };

    if (special_user_id) {
      uid = special_user_id;
      query = {
        space: space_id,
        $or: [{
          inbox_users: special_user_id
        }, {
          cc_users: special_user_id
        }]
      };
    }

    if (workflow_categories) {
      query.category = {
        $in: workflow_categories.split(',')
      };
    }

    space_names = {};
    space_names[space._id] = space.name;

    if (limit > 0) {
      db.instances.find(query, {
        sort: {
          modified: -1
        },
        limit: limit
      }).forEach(function (i) {
        var h, ref6, ref7;

        if ((ref6 = i.inbox_users) != null ? ref6.includes(uid) : void 0) {
          _.each(i.traces, function (t) {
            if (t.is_finished === false) {
              return _.each(t.approves, function (a) {
                if (a.user === uid && a.type !== 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        } else {
          _.each(i.traces, function (t) {
            if (!start_date && t.approves) {
              return _.each(t.approves, function (a) {
                if (!start_date && a.user === uid && a.type === 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        }

        if (!space_names[i.space]) {
          space_names[i.space] = (ref7 = db.spaces.findOne(i.space, {
            fields: {
              name: 1
            }
          })) != null ? ref7.name : void 0;
        }

        h = new Object();
        h["id"] = i["_id"];
        h["start_date"] = start_date;
        h["flow_name"] = i.flow_name;
        h["space_name"] = space_names[i.space];
        h["name"] = i["name"];
        h["applicant_name"] = i["applicant_name"];
        h["applicant_organization_name"] = i["applicant_organization_name"];
        h["submit_date"] = i["submit_date"];
        h["step_name"] = i.current_step_name;
        h["space_id"] = i.space;
        h["modified"] = i["modified"];
        h["is_read"] = is_read;
        h["values"] = i["values"];

        if (attach === 'true') {
          h.attachments = cfs.instances.find({
            'metadata.instance': i._id,
            'metadata.current': true,
            "metadata.is_private": {
              $ne: true
            }
          }, {
            fields: {
              copies: 0
            }
          }).fetch();
        }

        return result_instances.push(h);
      });
    }

    no_limit_count = db.instances.find(query).count();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result_instances,
        count: no_limit_count
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.reason
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"export_table_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/export_table_template.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies;
Cookies = require("cookies");
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/talbe_template", function (req, res, next) {
    var authToken, cookies, data, fileName, flow, flowId, form, ref, ref1, space, userId;
    cookies = new Cookies(req, res);

    if (req.body) {
      userId = req.body["X-User-Id"];
      authToken = req.body["X-Auth-Token"];
    }

    if (!userId || !authToken) {
      userId = cookies.get("X-User-Id");
      authToken = cookies.get("X-Auth-Token");
    }

    if (!(userId && authToken)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Missing X-Auth-Token",
        "success": false
      }));
      return;
    }

    flowId = (ref = req.query) != null ? ref.flow : void 0;
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        space: 1,
        form: 1,
        name: 1
      }
    });
    form = db.forms.findOne({
      _id: flow.form
    }, {
      fields: {
        space: 1,
        "current._id": 1
      }
    });

    if (_.isEmpty(flow)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Invalid formId",
        "success": false
      }));
      return;
    } else {
      if (!Steedos.isSpaceAdmin(flow.space, userId)) {
        res.writeHead(401);
        res.end(JSON.stringify({
          "error": "Validate Request -- No permission",
          "success": false
        }));
        return;
      }

      space = db.spaces.findOne(flow.space, {
        fields: {
          is_paid: 1
        }
      });

      if (!(space != null ? space.is_paid : void 0)) {
        JsonRoutes.sendResult(res, {
          code: 404,
          data: {
            "error": "Validate Request -- Non-paid space.",
            "success": false
          }
        });
        return;
      }
    }

    data = TemplateManager.handleTableTemplate({
      form: flow.form,
      form_version: form != null ? (ref1 = form.current) != null ? ref1._id : void 0 : void 0
    }, true);
    fileName = flow.name;
    res.setHeader('Content-type', 'application/x-msdownload');
    res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(fileName) + '.html');
    return res.end(data);
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_drafts.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/drafts 新建申请单

@apiName createInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "applicant": 申请人Id,
    "values": {
        "fields1" : 字段值,
        "fields2" : 字段值,
        ...
    }
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}

@apiErrorExample {json} error-Response:
{
    "status": "error",
    "data": {...}
}
 */JsonRoutes.add('post', '/api/workflow/open/drafts', function (req, res, next) {
  var applicant, applicantInfo, applicant_id, applicant_username, approve, approves, current_user_info, e, flow, flow_id, hashData, instance_from_client, new_ins, new_ins_id, space_id, space_user, space_user_org_info, trace, traces, user_id;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    user_id = req.userId;
    current_user_info = db.users.findOne({
      _id: user_id
    });
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header x_space_id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user_info._id);
    hashData = req.body;

    if (!hashData["flow"]) {
      throw new Meteor.Error('error', 'flow is null');
    }

    flow_id = hashData["flow"];
    applicant_id = hashData["applicant"];
    applicant_username = hashData["applicant_username"];
    instance_from_client = new Object();
    flow = db.flows.findOne({
      _id: flow_id
    }, {
      fields: {
        space: 1,
        'current._id': 1
      }
    });

    if (!flow) {
      throw new Meteor.Error('error', 'flow is not exists');
    }

    if (space_id !== flow.space) {
      throw new Meteor.Error('error', 'flow is not belong to this space');
    }

    if (db.space_users.find({
      space: space_id,
      user: current_user_info._id
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is not a member of this space');
    }

    instance_from_client["space"] = space_id;
    instance_from_client["flow"] = flow_id;
    instance_from_client["flow_version"] = flow.current._id;
    applicant = null;

    if (applicant_id || applicant_username) {
      if (applicant_id) {
        applicant = db.users.findOne({
          _id: applicant_id
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant is wrong');
        }
      } else if (applicant_username) {
        applicant = db.users.findOne({
          username: applicant_username
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant_username is wrong');
        }
      }

      space_user = db.space_users.findOne({
        space: space_id,
        user: applicant._id
      });

      if (!space_user) {
        throw new Meteor.Error('error', 'applicant is not a member of this space');
      }

      if (space_user.user_accepted !== true) {
        throw new Meteor.Error('error', 'applicant is disabled in this space');
      }

      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_from_client["applicant"] = applicant._id;
      instance_from_client["applicant_name"] = applicant.name;
      instance_from_client["applicant_organization"] = space_user_org_info["organization"];
      instance_from_client["applicant_organization_fullname"] = space_user_org_info["organization_fullname"];
      instance_from_client["applicant_organization_name"] = space_user_org_info["organization_name"];
    }

    applicantInfo = applicant || current_user_info;
    traces = [];
    trace = new Object();
    approves = [];
    approve = new Object();
    approve["values"] = hashData["values"];
    approves.push(approve);
    trace["approves"] = approves;
    traces.push(trace);
    instance_from_client["traces"] = traces;
    instance_from_client["inbox_users"] = [applicantInfo._id];
    new_ins_id = uuflowManager.create_instance(instance_from_client, applicantInfo);
    new_ins = db.instances.findOne(new_ins_id);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: new_ins
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/get/:ins_id 查看申请单详情

@apiName getInstance

@apiGroup Workflow

@apiPermission 工作区的管理员

@apiParam {String} ins_id 申请单Id
@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}
 */JsonRoutes.add('get', '/api/workflow/open/get/:ins_id', function (req, res, next) {
  var current_user, e, ins_id, instance, perm_users, permissions, space, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = db.instances.findOne(ins_id);

    if (!instance) {
      throw new Meteor.Error('error', 'can not find instance');
    }

    if (db.space_users.find({
      space: instance.space,
      user: current_user
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is wrong');
    }

    perm_users = new Array();
    perm_users.push(instance.submitter);
    perm_users.push(instance.applicant);

    if (instance.outbox_users) {
      perm_users = perm_users.concat(instance.outbox_users);
    }

    if (instance.inbox_users) {
      perm_users = perm_users.concat(instance.inbox_users);
    }

    space = db.spaces.findOne({
      _id: instance.space
    }, {
      fields: {
        admins: 1
      }
    });
    perm_users = perm_users.concat(space.admins);
    permissions = permissionManager.getFlowPermissions(instance.flow, current_user);

    if (!perm_users.includes(current_user) && !permissions.includes("monitor") && !permissions.includes("admin")) {
      throw new Meteor.Error('error', 'no permission');
    }

    instance.attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instance
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_submit.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/submit/:ins_id 提交申请单

@apiDescription 暂不支持开始节点下一节点为条件的情况

@apiName submitInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/submit/:ins_id', function (req, res, next) {
  var current_user, current_user_info, e, flow, form, ins_id, instance, nextSteps, next_step_id, next_user_ids, r, require_but_empty_fields, result, space_id, step, submitter, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = uuflowManager.getInstance(ins_id);
    uuflowManager.isInstanceDraft(instance);

    if (space_id !== instance["space"]) {
      throw new Meteor.Error('error', 'instance is not belong to this space');
    }

    values = instance["traces"][0]["approves"][0].values;
    form = uuflowManager.getForm(instance.form);
    require_but_empty_fields = uuflowManager.checkValueFieldsRequire(values, form, instance.form_version);

    if (require_but_empty_fields.length > 0) {
      if (require_but_empty_fields.length > 1) {
        throw new Meteor.Error('error', 'fields <' + require_but_empty_fields.join(",") + '> are required');
      } else if (require_but_empty_fields.length = 1) {
        throw new Meteor.Error('error', 'field <' + require_but_empty_fields.join(",") + '> is required');
      }
    }

    flow = uuflowManager.getFlow(instance.flow);
    step = uuflowManager.getStep(instance, flow, instance["traces"][0].step);
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, "submitted");

    if (nextSteps.length < 1) {
      throw new Meteor.Error('error', 'can not find next steps');
    }

    if (nextSteps.length > 1) {
      throw new Meteor.Error('error', 'next step not uniq');
    }

    next_step_id = nextSteps[0];
    next_user_ids = getHandlersManager.getHandlers(ins_id, next_step_id) || [];

    if (next_user_ids.length > 1) {
      throw new Meteor.Error('error', 'next step handler not uniq');
    }

    instance["traces"][0]["approves"][0]["next_steps"] = [{
      'step': next_step_id,
      'users': next_user_ids
    }];
    result = new Object();
    submitter = db.users.findOne(instance.submitter);

    if (!submitter) {
      throw new Meteor.Error('error', 'can not find submitter');
    }

    r = uuflowManager.submit_instance(instance, submitter);

    if (r.alerts) {
      result = r;
    } else {
      result = db.instances.findOne(ins_id);

      if (result) {
        result.attachments = cfs.instances.find({
          'metadata.instance': ins_id,
          'metadata.current': true,
          "metadata.is_private": {
            $ne: true
          }
        }, {
          fields: {
            copies: 0
          }
        }).fetch();
      }
    }

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_save.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_save.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/save/:ins_id 暂存申请单

@apiName saveInstances

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/save/:ins_id', function (req, res, next) {
  var current_step, current_trace, current_user, current_user_info, e, flow, ins_id, instance, result, setObj, space_id, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    values = req.body;

    if (!values) {
      throw new Meteor.Error('error', 'need values');
    }

    current_trace = null;
    setObj = new Object();
    instance = uuflowManager.getInstance(ins_id);
    flow = uuflowManager.getFlow(instance.flow);

    _.each(instance.traces, function (t) {
      if (t.is_finished !== true) {
        return current_trace = t;
      }
    });

    current_step = uuflowManager.getStep(instance, flow, current_trace.step);

    if (current_step.step_type === "counterSign") {
      throw new Meteor.Error('error', '会签步骤不能修改表单值');
    }

    _.each(current_trace.approves, function (a) {
      if (a.is_finished !== true && a.type !== "cc") {
        return a.values = values;
      }
    });

    setObj.modified = new Date();
    setObj["traces.$.approves"] = current_trace.approves;
    db.instances.update({
      _id: ins_id,
      'traces._id': current_trace._id
    }, {
      $set: setObj
    });
    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get_by_stepname.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get_by_stepname.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/getbystepname 根据步骤名称获取申请单

@apiName getInstanceByStepName

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "stepname": 步骤名称
}

@apiSuccessExample {json} Success-Response:
{
	"status": "success",
	"data": [
		{
			instance
		},
		{
			instance
		}
	]
}
 */JsonRoutes.add('post', '/api/workflow/open/getbystepname', function (req, res, next) {
  var current_user, current_user_info, e, flow, hashData, instances, space_id, stepname;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body;
    stepname = hashData["stepname"];
    flow = hashData["flow"];

    if (!stepname) {
      throw new Meteor.Error('error', 'need stepname');
    }

    if (!flow) {
      throw new Meteor.Error('error', 'need flow');
    }

    instances = db.instances.find({
      space: space_id,
      flow: flow,
      state: 'pending',
      traces: {
        $elemMatch: {
          is_finished: false,
          name: stepname
        }
      }
    }, {
      fields: {
        inbox_uers: 0,
        cc_users: 0,
        outbox_users: 0,
        attachments: 0,
        traces: 0
      }
    }).fetch();
    instances.forEach(function (instance) {
      return instance.attachments = cfs.instances.find({
        'metadata.instance': instance._id,
        'metadata.current': true,
        "metadata.is_private": {
          $ne: true
        }
      }, {
        fields: {
          copies: 0
        }
      }).fetch();
    });
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_cfs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_cfs.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Content-Type：application/json
form-data 格式:
fd = new FormData;
fd.append("file", file);

fd.append("is_private", false);

if (isAddVersion) {
	fd.append("isAddVersion", isAddVersion);
	fd.append("parent", attach_parent_id);
}

if (isMainAttach) {
	fd.append("main", true);
}
 */JsonRoutes.add('post', '/api/workflow/open/cfs/:ins_id', function (req, res, next) {
  var approve_id, current_user, current_user_info, e, ins_id, instance, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能上传');
    }

    approve_id = instance.traces[0].approves[0]._id;
    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    return JsonRoutes.parseFiles(req, res, function () {
      var collection, newFile;
      collection = cfs.instances;

      if (req.files && req.files[0]) {
        if (req.files[0].data.length > 100 * 1024 * 1024) {
          JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              errors: [{
                errorMessage: "超过上传附件大小限制(100M)"
              }]
            }
          });
          return;
        }

        newFile = new FS.File();
        return newFile.attachData(req.files[0].data, {
          type: req.files[0].mimeType
        }, function (err) {
          var body, e, fileObj, filename, metadata, parent, r, result, size;
          filename = req.files[0].filename;

          if (["image.jpg", "image.gif", "image.jpeg", "image.png"].includes(filename.toLowerCase())) {
            filename = "image-" + moment(new Date()).format('YYYYMMDDHHmmss') + "." + filename.split('.').pop();
          }

          body = req.body;
          body['owner'] = instance.submitter;
          body['owner_name'] = instance.submitter_name;
          body['space'] = space_id;
          body['instance'] = ins_id;
          body['approve'] = approve_id;

          try {
            if (body && (body['upload_from'] === "IE" || body['upload_from'] === "node")) {
              filename = decodeURIComponent(filename);
            }
          } catch (error) {
            e = error;
            console.error(filename);
            console.error(e);
            filename = filename.replace(/%/g, "-");
          }

          newFile.name(filename);

          if (body && body['owner'] && body['owner_name'] && body['space'] && body['instance'] && body['approve']) {
            parent = '';
            metadata = {
              owner: body['owner'],
              owner_name: body['owner_name'],
              space: body['space'],
              instance: body['instance'],
              approve: body['approve'],
              current: true
            };

            if (body["is_private"] && body["is_private"].toLocaleLowerCase() === "true") {
              metadata.is_private = true;
            } else {
              metadata.is_private = false;
            }

            if (body['main'] === "true") {
              metadata.main = true;
            }

            if (body['isAddVersion'] && body['parent']) {
              parent = body['parent'];
            }

            if (parent) {
              r = collection.update({
                'metadata.parent': parent,
                'metadata.current': true
              }, {
                $unset: {
                  'metadata.current': ''
                }
              });

              if (r) {
                metadata.parent = parent;

                if (body['locked_by'] && body['locked_by_name']) {
                  metadata.locked_by = body['locked_by'];
                  metadata.locked_by_name = body['locked_by_name'];
                }

                newFile.metadata = metadata;
                fileObj = collection.insert(newFile);

                if (body["overwrite"] && body["overwrite"].toLocaleLowerCase() === "true") {
                  collection.remove({
                    'metadata.instance': body['instance'],
                    'metadata.parent': parent,
                    'metadata.owner': body['owner'],
                    'metadata.approve': body['approve'],
                    'metadata.current': {
                      $ne: true
                    }
                  });
                }
              }
            } else {
              newFile.metadata = metadata;
              fileObj = collection.insert(newFile);
              fileObj.update({
                $set: {
                  'metadata.parent': fileObj._id
                }
              });
            }
          } else {
            fileObj = collection.insert(newFile);
          }

          size = fileObj.original.size;

          if (!size) {
            size = 1024;
          }

          result = new Object();
          result = {
            attach_id: fileObj._id,
            size: size
          };
          res.setHeader("x-amz-version-id", fileObj._id);
          return JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              status: "success",
              data: result
            }
          });
        });
      } else {
        JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            errors: [{
              errorMessage: "need file"
            }]
          }
        });
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("delete", "/api/workflow/open/cfs/:ins_id", function (req, res, next) {
  var attach_id, collection, current_user, current_user_info, e, file, hashData, ins_id, instance, result, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能删除附件');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body || {};
    attach_id = hashData["attach_id"];

    if (!attach_id) {
      throw new Meteor.Error('error', 'can not find attach_id');
    }

    collection = cfs.instances;
    file = collection.findOne({
      _id: attach_id,
      'metadata.instance': ins_id
    });

    if (file) {
      file.remove();
    } else {
      throw new Meteor.Error('error', '此附件不属于此申请单，或已被删除');
    }

    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("get", "/api/workflow/open/cfs/:attach_id", function (req, res, next) {
  var attach_id, current_user, current_user_info, e, space_id;

  try {
    attach_id = req.params.attach_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    res.statusCode = 302;
    res.setHeader("Location", Steedos.absoluteUrl("api/files/instances/") + attach_id + "?download=true");
    return res.end();
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_refill.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_refill", function (req, res, next) {
  var approve, columns, forward_ins, forward_ins_values, original_ins, original_ins_fields, original_ins_form, original_ins_id, original_subtable_fields, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, row_data, subTable, table_data, trace, traces;
  console.log("=========回填子表==========");
  console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
  console.log("=========分发回填的列==========");
  console.log("req?.query?.column", req != null ? (ref1 = req.query) != null ? ref1.column : void 0 : void 0);
  columns = req != null ? (ref2 = req.query) != null ? ref2.column.split(';') : void 0 : void 0;
  console.log("columns", columns);
  forward_ins = req != null ? (ref3 = req.body) != null ? ref3.instance : void 0 : void 0;
  subTable = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

  if ((forward_ins != null ? forward_ins.state : void 0) === "completed" && (forward_ins != null ? (ref5 = forward_ins.distribute_from_instances) != null ? ref5.length : void 0 : void 0) > 0 && subTable && columns) {
    forward_ins_values = forward_ins != null ? forward_ins.values : void 0;
    original_ins_id = _.last(forward_ins != null ? forward_ins.distribute_from_instances : void 0);
    original_ins = db.instances.findOne(original_ins_id);
    original_ins_form = db.forms.findOne(original_ins != null ? original_ins.form : void 0);
    original_ins_fields = [];
    original_subtable_fields = [];
    console.log("original_ins_form?.current?._id", original_ins_form != null ? (ref6 = original_ins_form.current) != null ? ref6._id : void 0 : void 0);
    console.log("original_ins?.form_version", original_ins != null ? original_ins.form_version : void 0);

    if ((original_ins != null ? original_ins.form_version : void 0) === (original_ins_form != null ? (ref7 = original_ins_form.current) != null ? ref7._id : void 0 : void 0)) {
      original_ins_fields = (ref8 = original_ins_form.current) != null ? ref8.fields : void 0;
      original_ins_fields.forEach(function (original_ins_field) {
        console.log("original_ins_field", original_ins_field != null ? original_ins_field.code : void 0);

        if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
          return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
        }
      });
    } else {
      if ((original_ins_form != null ? (ref9 = original_ins_form.historys) != null ? ref9.length : void 0 : void 0) > 0) {
        original_ins_form.historys.forEach(function (oh) {
          if ((original_ins != null ? original_ins.form_version : void 0) === oh._id) {
            original_ins_fields = oh != null ? oh.fields : void 0;
            return original_ins_fields.forEach(function (original_ins_field) {
              if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
                return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
              }
            });
          }
        });
      }
    }

    console.log("original_subtable_fields", original_subtable_fields != null ? original_subtable_fields.length : void 0);

    if (original_subtable_fields) {
      traces = original_ins != null ? original_ins.traces : void 0;
      trace = traces[traces.length - 1];
      approve = trace != null ? trace.approves[0] : void 0;
      table_data = (approve != null ? approve.values[subTable] : void 0) || [];
      row_data = {};
      columns.forEach(function (column) {
        return row_data[column] = forward_ins_values[column] || "";
      });

      if (row_data && row_data !== {}) {
        table_data.push(row_data);
        traces[traces.length - 1].approves[0].values[subTable] = table_data;
        console.log(traces[traces.length - 1].approves[0].values[subTable]);
        db.instances.update(original_ins_id, {
          $set: {
            'traces': traces
          }
        });
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'success': '回填成功'
          }
        });
      } else {
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'info': '回填数据为空'
          }
        });
      }
    } else {
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'error': '原申请单无相关子表'
        }
      });
    }
  } else {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'success': '申请单未结束'
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_table_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_table_refill.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_table_refill", function (req, res, next) {
  var a_table, a_table_values, approve, column_list, columns, d_ins, d_ins_fields, d_ins_form, d_ins_values, d_match_col, d_match_col_field, d_match_col_fields, d_subtable_fields, d_table, d_table_values, e, o_ins, o_ins_fields, o_ins_form, o_ins_id, o_match_col, o_match_col_field, o_match_col_fields, o_subtable_fields, o_table, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref3, ref4, ref5, ref6, ref7, ref8, ref9, table_data, trace, traces;

  try {
    console.log("=========原表子表==========");
    console.log("req?.query?.oTable", req != null ? (ref = req.query) != null ? ref.oTable : void 0 : void 0);
    console.log("=========现表子表==========");
    console.log("req?.query?.dTable", req != null ? (ref1 = req.query) != null ? ref1.dTable : void 0 : void 0);
    console.log("=========原表单的子表匹配列==========");
    console.log("req?.query?.oMatchCol", req != null ? (ref2 = req.query) != null ? ref2.oMatchCol : void 0 : void 0);
    console.log("=========现表单的子表匹配列==========");
    console.log("req?.query?.dMatchCol", req != null ? (ref3 = req.query) != null ? ref3.dMatchCol : void 0 : void 0);
    console.log("=========需要回填的列==========");
    console.log("req?.query?.refillCol", req != null ? (ref4 = req.query) != null ? ref4.refillCol : void 0 : void 0);
    d_ins = req != null ? (ref5 = req.body) != null ? ref5.instance : void 0 : void 0;

    if ((d_ins != null ? d_ins.state : void 0) === "completed") {
      if (req != null ? (ref6 = req.query) != null ? ref6.oTable : void 0 : void 0) {
        o_table = req != null ? (ref7 = req.query) != null ? ref7.oTable : void 0 : void 0;

        if (req != null ? (ref8 = req.query) != null ? ref8.dTable : void 0 : void 0) {
          d_table = req != null ? (ref9 = req.query) != null ? ref9.dTable : void 0 : void 0;
        } else {
          d_table = o_table;
        }

        if (req != null ? (ref10 = req.query) != null ? ref10.aTable : void 0 : void 0) {
          a_table = req != null ? (ref11 = req.query) != null ? ref11.aTable : void 0 : void 0;
        }

        if (req != null ? (ref12 = req.query) != null ? ref12.oMatchCol : void 0 : void 0) {
          o_match_col = req != null ? (ref13 = req.query) != null ? ref13.oMatchCol : void 0 : void 0;

          if (req != null ? (ref14 = req.query) != null ? ref14.dMatchCol : void 0 : void 0) {
            d_match_col = req != null ? (ref15 = req.query) != null ? ref15.dMatchCol : void 0 : void 0;
          } else {
            d_match_col = o_match_col;
          }

          columns = (req != null ? (ref16 = req.query) != null ? ref16.refillCol.split(';') : void 0 : void 0) || [];
          console.log("columns", columns);

          if (columns || columns.length < 1) {
            console.log("======================");
            console.log(d_table, o_match_col, columns);
            d_ins_values = d_ins != null ? d_ins.values : void 0;
            o_ins_id = _.last(d_ins != null ? d_ins.distribute_from_instances : void 0);
            o_ins = db.instances.findOne(o_ins_id);
            o_ins_form = db.forms.findOne(o_ins != null ? o_ins.form : void 0);
            d_ins_form = db.forms.findOne(d_ins != null ? d_ins.form : void 0);
            o_ins_fields = [];
            o_subtable_fields = [];
            d_ins_fields = [];
            d_subtable_fields = [];
            column_list = [];
            d_table_values = [];

            if ((o_ins != null ? o_ins.form_version : void 0) === (o_ins_form != null ? (ref17 = o_ins_form.current) != null ? ref17._id : void 0 : void 0)) {
              o_ins_fields = o_ins_form != null ? (ref18 = o_ins_form.current) != null ? ref18.fields : void 0 : void 0;
              o_ins_fields.forEach(function (o_ins_field) {
                if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                  return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                }
              });
            } else {
              if ((o_ins_form != null ? (ref19 = o_ins_form.historys) != null ? ref19.length : void 0 : void 0) > 0) {
                o_ins_form.historys.forEach(function (oh) {
                  if ((o_ins != null ? o_ins.form_version : void 0) === oh._id) {
                    o_ins_fields = oh != null ? oh.fields : void 0;
                    return o_ins_fields.forEach(function (o_ins_field) {
                      if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                        return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                      }
                    });
                  }
                });
              }
            }

            if ((d_ins != null ? d_ins.form_version : void 0) === (d_ins_form != null ? (ref20 = d_ins_form.current) != null ? ref20._id : void 0 : void 0)) {
              d_ins_fields = d_ins_form != null ? (ref21 = d_ins_form.current) != null ? ref21.fields : void 0 : void 0;
              d_ins_fields.forEach(function (d_ins_field) {
                if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                  return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                }
              });
            } else {
              if ((d_ins_form != null ? (ref22 = d_ins_form.historys) != null ? ref22.length : void 0 : void 0) > 0) {
                d_ins_form.historys.forEach(function (dh) {
                  if ((d_ins != null ? d_ins.form_version : void 0) === dh._id) {
                    d_ins_fields = dh != null ? dh.fields : void 0;
                    return d_ins_fields.forEach(function (d_ins_field) {
                      if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                        return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                      }
                    });
                  }
                });
              }
            }

            if (o_subtable_fields.length === 0) {
              console.log("o_subtable_fields", o_subtable_fields);
              throw new Meteor.Error('forward table refill error!', '原申请单无对应子表');
            }

            if (d_subtable_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单无对应子表');
            }

            d_table_values = (d_ins != null ? d_ins.values[d_table] : void 0) || [];

            if (a_table) {
              a_table_values = (d_ins != null ? d_ins.values[a_table] : void 0) || [];

              if (a_table_values && (a_table_values != null ? a_table_values.length : void 0) === (d_table_values != null ? d_table_values.length : void 0)) {
                a_table_values.forEach(function (a_row, index) {
                  var key, results, value;
                  results = [];

                  for (key in meteorBabelHelpers.sanitizeForInObject(a_row)) {
                    value = a_row[key];
                    results.push(d_table_values[index][key] = value);
                  }

                  return results;
                });
              }
            }

            if (d_table_values.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表数据为空');
            }

            o_match_col_fields = o_subtable_fields.filter(function (m) {
              return m.code === o_match_col;
            });
            d_match_col_fields = d_subtable_fields.filter(function (m) {
              return m.code === d_match_col;
            });

            if (o_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '原申请单子表无对应匹配列');
            }

            if (d_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应匹配列');
            }

            o_match_col_field = o_match_col_fields[0];
            d_match_col_field = d_match_col_fields[0];

            if ((o_match_col_field != null ? o_match_col_field.type : void 0) !== (d_match_col_field != null ? d_match_col_field.type : void 0)) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单和原申请单子表的匹配列字段不一致');
            }

            columns.forEach(function (column) {
              var col, cols, d_col, d_col_fields, o_col, o_col_fields;
              cols = column.split('-') || [];

              if (cols.length === 2) {
                o_col = cols[0];
                d_col = cols[1];
                o_col_fields = o_subtable_fields.filter(function (m) {
                  return m.code === o_col;
                });
                d_col_fields = d_subtable_fields.filter(function (m) {
                  return m.code === d_col;
                });

                if (o_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '原申请单子表无对应回填列');
                }

                if (d_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应回填列');
                }

                if ((o_col_fields != null ? o_col_fields.type : void 0) !== (d_col_fields != null ? d_col_fields.type : void 0)) {
                  throw new Meteor.Error('forward table refill error!', '回填列字段类型不一致');
                }

                col = {
                  o_col: o_col,
                  d_col: d_col
                };
                return column_list.push(col);
              } else {
                throw new Meteor.Error('forward table refill error!', '回填列不匹配');
              }
            });
            traces = o_ins != null ? o_ins.traces : void 0;
            trace = traces[traces.length - 1];
            approve = trace != null ? trace.approves[0] : void 0;
            table_data = (approve != null ? approve.values[o_table] : void 0) || [];
            d_table_values.forEach(function (d_row) {
              var count, has_obj, row_data;
              has_obj = false;
              count = -1;
              table_data.forEach(function (o_row, index) {
                if (o_row[o_match_col] === d_row[d_match_col]) {
                  has_obj = true;
                  return count = index;
                }
              });

              if (has_obj === true) {
                return column_list.forEach(function (col) {
                  return table_data[count][col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
              } else {
                row_data = {};
                row_data[o_match_col] = d_row[d_match_col];
                column_list.forEach(function (col) {
                  return row_data[col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
                return table_data.push(row_data);
              }
            });
            traces[traces.length - 1].approves[0].values = o_ins != null ? o_ins.values : void 0;
            traces[traces.length - 1].approves[0].values[o_table] = table_data;
            db.instances.update(o_ins_id, {
              $set: {
                'traces': traces
              }
            });
            JsonRoutes.sendResult(res, {
              code: 200,
              data: {
                'success': '回填成功'
              }
            });
          } else {
            throw new Meteor.Error('forward table refill error!', 'webhook未配置子表回填列字段 columns 值');
          }
        } else {
          throw new Meteor.Error('forward table refill error!', 'webhook未配置匹配列字段 oMatchCol 值');
        }
      } else {
        throw new Meteor.Error('forward table refill error!', 'webhook未配置原表单子表 oTable 值');
      }
    } else {
      throw new Meteor.Error('forward table refill error!', '申请单未结束');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_sub_table_sort.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_sub_table_sort.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/sub_table_sort", function (req, res, next) {
  var e, ins, new_table_values, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, sort_col, sub_table, sub_table_values, sum_col;

  try {
    console.log("=========子表==========");
    console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
    console.log("=========子表总分列==========");
    console.log("req?.query?.sumCol", req != null ? (ref1 = req.query) != null ? ref1.sumCol : void 0 : void 0);
    console.log("=========子表排序列==========");
    console.log("req?.query?.sortCol", req != null ? (ref2 = req.query) != null ? ref2.sortCol : void 0 : void 0);
    console.log("=========子表单列需要计算的和==========");
    console.log("req?.query?.singleCols", req != null ? (ref3 = req.query) != null ? ref3.singleCols : void 0 : void 0);
    sub_table = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

    if (!sub_table) {
      console.log("=====sub_table======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 subTable 字段');
    }

    sum_col = req != null ? (ref5 = req.query) != null ? ref5.sumCol : void 0 : void 0;

    if (!sum_col) {
      console.log("=====sum_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sumCol 字段');
    }

    sort_col = req != null ? (ref6 = req.query) != null ? ref6.sortCol : void 0 : void 0;

    if (!sort_col) {
      console.log("=====sort_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sortCol 字段');
    }

    ins = req != null ? (ref7 = req.body) != null ? ref7.instance : void 0 : void 0;
    sub_table_values = ins.values[sub_table];

    if ((sub_table_values != null ? sub_table_values.length : void 0) > 0) {
      var JsonSort = function (jsonArr, key, asc) {
        for (var j = 1, jl = jsonArr.length; j < jl; j++) {
          var temp = jsonArr[j],
              val = Number(temp[key]),
              i = j - 1;

          if (asc == true) {
            while (i >= 0 && Number(jsonArr[i][key]) > val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          } else {
            while (i >= 0 && Number(jsonArr[i][key]) < val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          }

          jsonArr[i + 1] = temp;
        }

        return jsonArr;
      };

      ;
      new_table_values = JsonSort(sub_table_values, sum_col, false);
      console.log("new_table_values", new_table_values);
      new_table_values.forEach(function (obj, index) {
        if (sort_col && obj[sum_col]) {
          return obj[sort_col] = (index + 1).toString();
        }
      });
      console.log("new_table_values", new_table_values);
      ins.values[sub_table] = new_table_values;
      db.instances.update(ins._id, {
        $set: {
          'values': ins.values
        }
      });
      console.log("success");
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'success': '计算排序成功'
        }
      });
    } else {
      throw new Meteor.Error('table sort error!', '子表数据为空');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"test_webhook.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/test_webhook.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isDevelopment) {
  JsonRoutes.add('post', '/test/webhook', function (req, res, next) {
    var e, hashData;

    try {
      hashData = req.body;
      console.log('action: ', hashData.action);
      console.log('from_user: ', hashData.from_user);
      console.log('to_users: ', hashData.to_users);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {}
      });
    } catch (error) {
      e = error;
      console.error(e.stack);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          errors: [{
            errorMessage: e.message
          }]
        }
      });
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_users.coffee                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/users", function (req, res, next) {
  var current_user, current_user_info, spaceId, spaceUsers, space_user, userIds;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  userIds = req.body.userIds;
  spaceId = req.body.spaceId;
  spaceUsers = [];
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!userIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getFormulaUserObjects(spaceId, userIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_organizations.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_organizations.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/orgs", function (req, res, next) {
  var current_user, current_user_info, orgIds, orgs, spaceId, space_user;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  orgIds = req.body.orgIds;
  spaceId = req.body.spaceId;
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!orgIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  orgs = WorkflowManager.getFormulaOrgObjects(orgIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'orgs': orgs
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server":{"methods":{"set_instance_step_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/set_instance_step_approve.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_instance_step_approve: function (ins_id, step_approve, stepsApprovesOptions) {
    var _keys1, _keys2, ins, keys, stepsApproves;

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        state: 1
      }
    });

    if (ins.state !== 'draft') {
      return;
    }

    _keys1 = _.keys(step_approve);
    _keys2 = _.keys(stepsApprovesOptions);
    keys = _.compact(_.union(_keys1, _keys2));
    stepsApproves = {};

    _.each(keys, function (stepId) {
      var stepApproves, stepsApproveOptions;
      stepApproves = step_approve[stepId];
      stepsApproveOptions = stepsApprovesOptions[stepId];

      if (stepApproves) {
        stepsApproves[stepId] = stepApproves;

        if (stepsApproveOptions) {
          if (_.isArray(stepApproves)) {
            stepsApproveOptions = stepApproves.concat(stepsApproveOptions);
          } else {
            stepsApproveOptions.push(stepApproves);
          }
        }
      }

      if (stepsApproveOptions) {
        return stepsApproves[stepId + '_options'] = _.uniq(stepsApproveOptions);
      }
    });

    return db.instances.update({
      _id: ins_id
    }, {
      $set: {
        step_approve: stepsApproves
      }
    });
  },
  set_instance_skip_steps: function (ins_id, stepId, action) {
    if (action === 'pull') {
      return db.instances.update({
        _id: ins_id
      }, {
        $pull: {
          skip_steps: stepId
        }
      });
    } else if (action === 'push') {
      return db.instances.update({
        _id: ins_id
      }, {
        $push: {
          skip_steps: stepId
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_instance_data.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/get_instance_data.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  get_instance_data: function (instance_id, formCached, flowCached) {
    check(instance_id, String);
    check(formCached, Boolean);
    check(flowCached, Boolean);
    var instance = db.instances.findOne(instance_id);
    if (!instance) return {
      instance: null
    };
    if (formCached && flowCached) return {
      instance: instance
    };

    if (!formCached) {
      var form = db.forms.findOne(instance.form);
      var form_version = {};

      if (form.current._id == instance.form_version) {
        form_version = form.current;
      } else {
        form_version = _.where(form.historys, {
          _id: instance.form_version
        })[0];
      }
    }

    if (!flowCached) {
      var flow = db.flows.findOne(instance.flow);
      var flow_version = {};

      if (flow.current._id == instance.flow_version) {
        flow_version = flow.current;
      } else {
        flow_version = _.where(flow.historys, {
          _id: instance.flow_version
        })[0];
      }
    }

    return {
      instance: instance,
      form_version: form_version,
      flow_version: flow_version
    };
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"save_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/save_instance.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  draft_save_instance: function (ins) {
    if (!this.userId) return;
    var result = true;
    var setObj = {};
    var index = 0;
    var ins_id = ins._id;
    var trace_id = ins.traces[0]._id;
    var approve_id = ins.traces[0].approves[0]._id;
    var description = ins.traces[0].approves[0].description;
    var next_steps = ins.traces[0].approves[0].next_steps;
    var values = ins.traces[0].approves[0].values || {};
    var applicant_id = ins.applicant;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        applicant: 1,
        state: 1,
        submitter: 1,
        traces: 1,
        form: 1,
        flow_version: 1,
        space: 1,
        flow: 1
      }
    });
    var space_id = instance.space;
    var flow_id = instance.flow;
    var form_id = instance.form;
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.'; // 判断一个instance是否为拟稿状态

    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';
    uuflowManager.isInstanceDraft(instance, lang); // 判断一个用户是否是一个instance的提交者

    uuflowManager.isInstanceSubmitter(instance, this.userId);
    var flow = db.flows.findOne(flow_id, {
      fields: {
        "current._id": 1,
        "current.form_version": 1,
        "name": 1,
        "current.steps": 1
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (flow.current._id != instance.flow_version) {
      result = "upgraded";

      var start_step = _.find(flow.current.steps, function (s) {
        return s.step_type == "start";
      }); // 流程已升级


      setObj.flow_version = flow.current._id;
      setObj.form_version = flow.current.form_version; // 存入当前最新版flow中开始节点的step_id

      setObj["traces.$.step"] = start_step._id;
      setObj["traces.$.name"] = start_step.name;
    }

    if (instance.applicant != applicant_id) {
      // 申请人已变换
      var user = db.users.findOne(applicant_id, {
        fields: {
          name: 1
        }
      });
      var applicant = db.space_users.find({
        space: space_id,
        user: applicant_id
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = applicant.fetch()[0].organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      setObj.applicant = applicant_id;
      setObj.applicant_name = user.name;
      setObj.applicant_organization = org_id;
      setObj.applicant_organization_name = organization.name;
      setObj.applicant_organization_fullname = organization.fullname;
      setObj[key_str + 'user'] = applicant_id;
      setObj[key_str + 'user_name'] = user.name;
    }

    setObj[key_str + 'values'] = values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'judge'] = 'submitted';
    setObj[key_str + 'read_date'] = new Date();

    if (result != "upgraded" && next_steps) {
      setObj[key_str + 'next_steps'] = next_steps;
    } // 计算申请单标题


    var form = db.forms.findOne({
      _id: form_id
    }, {
      fields: {
        "current.name_forumla": 1
      }
    });
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      // var iscript = name_forumla.replace(/\{/g, "(values['").replace(/\}/g, "'] || '')");
      // var rev = eval(iscript);
      setObj.name = uuflowManager.getInstanceName(ins, values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return result;
  },
  inbox_save_instance: function (approve) {
    if (!this.userId) return;
    var setObj = {};
    var index = 0;
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve.id;
    var values = approve.values;
    var next_steps = approve.next_steps;
    var description = approve.description;
    var judge = approve.judge;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1,
        flow_version: 1,
        flow: 1,
        state: 1,
        form: 1,
        form_version: 1,
        values: 1,
        code: 1
      }
    });
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    var current_approve = _.find(current_trace.approves, function (a) {
      return a._id == approve_id;
    }); // 判断一个instance是否为审核中状态


    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';

    try {
      uuflowManager.isInstancePending(instance, lang); // 判断一个trace是否为未完成状态

      uuflowManager.isTraceNotFinished(current_trace); // 判断一个approve是否为未完成状态

      uuflowManager.isApproveNotFinished(current_approve); // 判断当前用户是否approve 对应的处理人或代理人

      uuflowManager.isHandlerOrAgent(current_approve, this.userId);
    } catch (e) {
      console.log(e.stack);
      return true;
    }

    var flow_version = instance.flow_version;
    var flow_id = instance.flow;
    var step_id = "";
    step_id = current_trace.step;
    var flow = db.flows.findOne(flow_id, {
      fields: {
        current: 1,
        historys: 1
      }
    });
    var step = null;

    if (flow.current._id == flow_version) {
      flow.current.steps.forEach(function (s) {
        if (s._id == step_id) step = s;
      });
    } else {
      flow.historys.forEach(function (h) {
        h.steps.forEach(function (s) {
          if (s._id == step_id) step = s;
        });
      });
    }

    if (!step) return false;
    var step_type = step.step_type;
    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.';
    var permissions_values = uuflowManager.getApproveValues(approve.values, step.permissions, instance.form, instance.form_version);
    var change_values = approveManager.getChangeValues(instance.values, permissions_values);
    setObj.values = _.extend(instance.values || {}, permissions_values);

    if (!_.isEmpty(change_values)) {
      values_history = current_approve.values_history || [];
      values_history.push({
        values: change_values,
        create: new Date()
      });
      setObj[key_str + 'values_history'] = values_history;
    }

    setObj[key_str + 'is_read'] = true;
    setObj[key_str + 'read_date'] = new Date();
    setObj[key_str + 'values'] = setObj.values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'next_steps'] = next_steps;

    if (step_type == "submit" || step_type == "start") {
      setObj[key_str + 'judge'] = "submitted";
    } else {
      setObj[key_str + 'judge'] = judge;
    }

    setObj.modified = new Date();
    setObj.modified_by = this.userId; // 计算申请单标题

    var form = db.forms.findOne(instance.form);
    var form_v = uuflowManager.getFormVersion(form, instance.form_version);
    var name_forumla = form_v.name_forumla;

    if (name_forumla) {
      setObj.name = uuflowManager.getInstanceName(instance, setObj.values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"trace_approve_cc.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/trace_approve_cc.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  cc_do: function (approve, cc_user_ids, description) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve._id;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        space: 1,
        traces: 1,
        cc_users: 1,
        values: 1
      }
    });
    var current_user_id = this.userId;
    var space_id = instance.space;
    var new_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    cc_user_ids.forEach(function (userId, idx) {
      var user = db.users.findOne(userId, {
        fields: {
          name: 1
        }
      });
      var space_user = db.space_users.findOne({
        space: space_id,
        user: userId
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = space_user.organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var agent = uuflowManager.getAgent(space_id, userId);
      var handler_id = userId;
      var handler_info = user;
      var handler_space_user = space_user;
      var handler_org_info = organization;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent, {
          fileds: {
            name: 1
          }
        });
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
        cc_user_ids[idx] = agent;
      }

      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': ins_id,
        'trace': trace_id,
        'is_finished': false,
        'user': userId,
        'user_name': user.name,
        'handler': handler_id,
        'handler_name': handler_info.name,
        'handler_organization': handler_space_user.organization,
        'handler_organization_name': handler_org_info.name,
        'handler_organization_fullname': handler_org_info.fullname,
        'type': 'cc',
        'start_date': new Date(),
        'is_read': false,
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'opinion_fields_code': approve.opinion_fields_code,
        'sign_field_code': approve.opinion_fields_code && approve.opinion_fields_code.length == 1 ? approve.opinion_fields_code[0] : "",
        'from_approve_id': approve_id,
        'cc_description': description
      };

      if (agent) {
        appr.agent = agent;
      }

      uuflowManager.setRemindInfo(instance.values, appr);
      new_approves.push(appr);
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj,
      $addToSet: {
        'traces.$.approves': {
          $each: new_approves
        }
      },
      $push: {
        cc_users: {
          $each: cc_user_ids
        }
      }
    });
    instance = db.instances.findOne(ins_id);
    current_user_info = db.users.findOne(current_user_id);
    pushManager.send_instance_notification("trace_approve_cc", instance, "", current_user_info, cc_user_ids);
    flow_id = instance.flow;
    approve.cc_user_ids = cc_user_ids; // 记录下本次传阅的人员ID作为hook接口中的参数
    // 如果已经配置webhook并已激活则触发

    pushManager.triggerWebhook(flow_id, instance, approve, 'cc_do', current_user_id, cc_user_ids);
    return true;
  },
  cc_read: function (approve) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1
      }
    });
    var current_user_id = this.userId;

    var current_trace = _.find(instance.traces, function (t) {
      return t._id == trace_id;
    });

    var index = 0;
    current_trace.approves.forEach(function (a, idx) {
      if (a.type == 'cc' && a.handler == current_user_id && !a.is_read) {
        index = idx;
      }
    });
    setObj['traces.$.approves.' + index + '.is_read'] = true;
    setObj['traces.$.approves.' + index + '.read_date'] = new Date();
    setObj.traces = traces;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj
    });
    return true;
  },
  cc_submit: function (ins_id, description, myApprove, ccHasEditPermission) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id);
    var traces = instance.traces;
    var current_user_id = this.userId;
    var flow = uuflowManager.getFlow(instance.flow);
    var values = myApprove.values || {};
    var approve_id = myApprove._id;
    var myTrace;

    for (let tidx = 0; tidx < traces.length; tidx++) {
      const t = traces[tidx];

      if (t.approves) {
        for (let aidx = 0; aidx < t.approves.length; aidx++) {
          const a = t.approves[aidx];

          if (a.type == 'cc' && a.handler == current_user_id && a.is_finished == false) {
            var upobj = {};
            var key_str = 'traces.$.approves.' + aidx + '.';
            upobj[key_str + 'is_finished'] = true;
            upobj[key_str + 'is_read'] = true;
            upobj[key_str + 'finish_date'] = new Date();
            upobj[key_str + 'judge'] = "submitted";
            upobj[key_str + 'cost_time'] = new Date() - a.start_date;

            if (approve_id == a._id && !t.is_finished && ccHasEditPermission) {
              myTrace = t;
              var step = uuflowManager.getStep(instance, flow, t.step);
              upobj[key_str + "values"] = uuflowManager.getApproveValues(values, step["permissions"], instance.form, instance.form_version);
            } //设置意见，意见只添加到最后一条approve中


            if (approve_id == a._id) {
              upobj[key_str + 'description'] = description;
            }

            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        }
      }
    }

    if (myApprove) {
      setObj.modified = new Date();
      setObj.modified_by = this.userId;

      if (ccHasEditPermission && myApprove && !myTrace.is_finished) {
        var ins = uuflowManager.getInstance(ins_id);
        var updated_values = uuflowManager.getUpdatedValues(ins, approve_id);
        setObj.values = updated_values;
        setObj.name = uuflowManager.getInstanceName(instance);
      }

      db.instances.update({
        _id: ins_id,
        'traces._id': myApprove.trace
      }, {
        $set: setObj,
        $pull: {
          cc_users: current_user_id
        },
        $addToSet: {
          outbox_users: {
            $each: [current_user_id, myApprove.user]
          }
        }
      });
      instance = db.instances.findOne(ins_id);
      current_user_info = db.users.findOne(current_user_id); //传阅提交不通知传阅者

      if (false && description && myApprove && myApprove.from_user) {
        pushManager.send_instance_notification("trace_approve_cc_submit", instance, "", current_user_info, [myApprove.from_user]);
      }

      pushManager.send_message_to_specifyUser("current_user", current_user_id);
      flow_id = instance.flow; // 如果已经配置webhook并已激活则触发

      pushManager.triggerWebhook(flow_id, instance, myApprove, 'cc_submit', current_user_id, []);
    }

    return true;
  },
  cc_remove: function (instanceId, approveId) {
    var setObj = {};
    var instance = db.instances.findOne(instanceId, {
      fields: {
        traces: 1,
        cc_users: 1
      }
    });
    var traces = instance.traces;
    var trace_id,
        remove_user_id,
        multi = false;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a._id == approveId) {
            trace_id = a.trace;
            remove_user_id = a.handler;
            setObj['traces.$.approves.' + idx + '.judge'] = 'terminated';
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.finish_date'] = new Date();
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.read_date'] = new Date();
          }
        });
      }
    });
    if (!trace_id || !remove_user_id) return;
    var multi = 0;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a) {
          if (a.handler == remove_user_id && a.type == 'cc' && a.is_finished == false) {
            multi++;
          }
        });
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (multi > 1) {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj
      });
    } else {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj,
        $pull: {
          cc_users: remove_user_id
        }
      });
    }

    pushManager.send_message_to_specifyUser("current_user", remove_user_id);
    return true;
  },
  cc_save: function (ins_id, description, myApprove, ccHasEditPermission) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id);
    var traces = instance.traces;
    var current_user_id = this.userId;
    var myTrace;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a.handler == current_user_id && a.type == 'cc' && a.is_finished == false) {
            var upobj = {};
            upobj['traces.$.approves.' + idx + '.judge'] = "submitted";
            upobj['traces.$.approves.' + idx + '.read_date'] = new Date();
            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        });
      }
    });
    var index = 0;
    var currentStepId; //设置意见，意见只添加到最后一条approve中

    traces.forEach(function (t) {
      if (myApprove && t._id === myApprove.trace) {
        currentStepId = t.step;
        myTrace = t;

        if (t.approves) {
          t.approves.forEach(function (a, idx) {
            if (a._id === myApprove._id) {
              index = idx;
            }
          });
        }
      }
    });
    setObj['traces.$.approves.' + index + '.description'] = description;
    var updateObj = {};

    if (ccHasEditPermission && myApprove && !myTrace.is_finished) {
      var key_str = 'traces.$.approves.' + index + '.';
      var flow = uuflowManager.getFlow(instance.flow);
      var step = uuflowManager.getStep(instance, flow, currentStepId);
      var permissions_values = uuflowManager.getApproveValues(myApprove.values, step.permissions, instance.form, instance.form_version);
      var change_values = approveManager.getChangeValues(instance.values, permissions_values);
      setObj.values = _.extend(instance.values || {}, permissions_values);

      if (!_.isEmpty(change_values)) {
        var pushObj = {};
        pushObj[key_str + 'values_history'] = {
          values: change_values,
          create: new Date()
        };
        updateObj.$push = pushObj;
      }

      setObj.name = uuflowManager.getInstanceName(instance);
    }

    updateObj.$set = setObj;
    db.instances.update({
      _id: ins_id,
      'traces._id': myApprove.trace
    }, updateObj);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forward_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/forward_instance.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  // 改为通过api调用
  forward_instance: function (instance_id, space_id, flow_id, hasSaveInstanceToAttachment, description, isForwardAttachments, selectedUsers, action_type, related, from_approve_id) {
    if (!this.userId) throw new Meteor.Error('not-authorized');
    return;
  },
  forward_remove: function (instance_id, trace_id, approve_id) {
    check(instance_id, String);
    check(trace_id, String);
    check(approve_id, String);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var trace = _.find(ins.traces, function (t) {
      return t._id == trace_id;
    });

    var approve = _.find(trace.approves, function (appr) {
      return appr._id == approve_id;
    });

    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, this.userId);

    if (!approve || !['forward', 'distribute'].includes(approve.type) || !approve.forward_instance) {
      if (!hasAdminPermission) {
        if (approve.from_user != this.userId) throw new Meteor.Error('error!', 'instance_forward_cannot_cancel');
      }
    }

    var forward_instance_id = approve.forward_instance;
    var forward_instance = db.instances.findOne(forward_instance_id);

    if (forward_instance) {
      if (forward_instance.state != "draft") {
        if (!hasAdminPermission) throw new Meteor.Error('error!', 'instance_forward_instance_state_changed');
      }

      var inbox_users = forward_instance.inbox_users || [];
      forward_instance.deleted = new Date();
      forward_instance.deleted_by = this.userId;
      var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

      if (deleted_forward_instance_id) {
        db.instances.remove({
          _id: forward_instance_id
        }); // 删除申请单后重新计算inbox_users的badge

        _.each(inbox_users, function (u_id) {
          pushManager.send_message_to_specifyUser("current_user", u_id);
        });
      }
    }

    var set_obj = new Object();
    set_obj.modified = new Date();
    set_obj.modified_by = this.userId;

    _.each(trace.approves, function (appr, idx) {
      if (appr._id == approve_id) {
        set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
        set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
        set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
        set_obj['traces.$.approves.' + idx + '.is_read'] = true;
        set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
      }
    });

    db.instances.update({
      _id: instance_id,
      "traces._id": trace_id
    }, {
      $set: set_obj
    });
    return true;
  },
  cancelDistribute: function (instance_id, approve_ids) {
    check(instance_id, String);
    check(approve_ids, Array);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    userId = this.userId;
    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, userId);

    _.each(ins.traces, function (t) {
      if (t.approves) {
        var exists = false;
        var set_obj = new Object();

        _.each(t.approves, function (a, idx) {
          if (approve_ids.includes(a._id) && (a.from_user == userId || hasAdminPermission) && 'distribute' == a.type && a.forward_instance) {
            var forward_instance_id = a.forward_instance;
            var forward_instance = db.instances.findOne(forward_instance_id);

            if (forward_instance) {
              if (forward_instance.state != "draft") {
                return;
              }

              var inbox_users = forward_instance.inbox_users || [];
              forward_instance.deleted = new Date();
              forward_instance.deleted_by = userId;
              var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

              if (deleted_forward_instance_id) {
                db.instances.remove({
                  _id: forward_instance_id
                }); // 删除申请单后重新计算inbox_users的badge

                _.each(inbox_users, function (u_id) {
                  pushManager.send_message_to_specifyUser("current_user", u_id);
                });
              }

              set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
              set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
              set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
              set_obj['traces.$.approves.' + idx + '.is_read'] = true;
              set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
            }

            exists = true;
          }
        });

        if (!exists) return;
        set_obj.modified = new Date();
        set_obj.modified_by = userId;
        db.instances.update({
          _id: instance_id,
          "traces._id": t._id
        }, {
          $set: set_obj
        });
      }
    });

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/cfs_instances.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  cfs_instances_remove: function (file_id) {
    check(file_id, String);
    cfs.instances.remove(file_id);
    return true;
  },
  cfs_instances_set_current: function (file_id) {
    check(file_id, String);
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.current': true
      }
    });
    return true;
  },
  cfs_instances_lock: function (file_id, user_id, user_name) {
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.locked_by': user_id,
        'metadata.locked_by_name': user_name,
        'metadata.locked_time': new Date()
      }
    });
    return true;
  },
  cfs_instances_unlock: function (file_id) {
    cfs.instances.update({
      _id: file_id
    }, {
      $unset: {
        'metadata.locked_by': '',
        'metadata.locked_by_name': '',
        'metadata.locked_time': ''
      }
    });
    return true;
  },
  download_space_instance_attachments_to_disk: function (spaceId, cfsRecordIds) {
    if (!this.userId) return "不符合执行条件";
    if (Meteor.users.find({
      _id: this.userId,
      is_cloudadmin: true
    }).count() < 1) return "不符合执行条件";
    check(spaceId, String);
    var store = "instances";

    var fs = require('fs');

    var path = require('path');

    var mkdirp = require('mkdirp');

    var pathname = path.join(__meteor_bootstrap__.serverDir, '../../../cfs/spaceInstanceAttachments'); // Set absolute path

    var absolutePath = path.resolve(pathname); // Ensure the path exists

    mkdirp.sync(absolutePath);
    console.log('absolutePath: ', absolutePath);
    console.time('download_space_instance_attachments_to_disk');
    var query = {
      'metadata.space': spaceId
    };

    if (cfsRecordIds) {
      query._id = {
        $in: cfsRecordIds
      };
    }

    var downloadFailedRecordIds = [];
    cfs.instances.find(query).forEach(function (c) {
      try {
        var fileName = store + '-' + c._id + '-' + c.name();
        var filePath = path.join(absolutePath, fileName);
        Meteor.wrapAsync(function (callback) {
          try {
            var writer = fs.createWriteStream(filePath);
            writer.on('finish', function () {
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            var reader = c.createReadStream(store);
            reader.on('error', function (error) {
              downloadFailedRecordIds.push(c._id);
              console.error('download_space_instance_attachments_to_disk: ', c._id);
              console.error(error.stack);
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            reader.pipe(writer);
          } catch (error) {
            console.error('download_space_instance_attachments_to_disk: ', c._id);
            console.error(error.stack);
            if (callback && _.isFunction(callback)) callback();
            return;
          }
        })();
      } catch (error) {
        console.error('download_space_instance_attachments_to_disk: ', c._id);
        console.error(error.stack);
      }
    });

    if (downloadFailedRecordIds.length > 0) {
      console.error('downloadFailedRecordIds: ');
      console.error(downloadFailedRecordIds);
    }

    console.timeEnd('download_space_instance_attachments_to_disk');
    return downloadFailedRecordIds;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_approve.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_approve_have_read: function (instanceId, traceId, approveId) {
    var instance, ref, self, setObj, trace;

    if (!this.userId) {
      return;
    }

    self = this;
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {
        modified: new Date(),
        modified_by: self.userId
      };
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId && !approve.is_read) {
          setObj["traces.$.approves." + idx + ".is_read"] = true;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  change_approve_info: function (instanceId, traceId, approveId, description, finish_date) {
    var instance, ref, setObj, trace;

    if (!this.userId) {
      return;
    }

    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(description, String);
    check(finish_date, Date);
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          setObj["traces.$.approves." + idx + ".description"] = description;
          setObj["traces.$.approves." + idx + ".finish_date"] = finish_date;
          setObj["traces.$.approves." + idx + ".cost_time"] = new Date() - approve.start_date;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  update_approve_sign: function (instanceId, traceId, approveId, sign_field_code, description, sign_type, lastSignApprove) {
    var instance, lastTrace, ref, session_userId, setObj, trace, upObj;
    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(sign_field_code, String);
    check(description, String);

    if (!this.userId) {
      return;
    }

    session_userId = this.userId;

    if (lastSignApprove) {
      if (lastSignApprove.custom_sign_show) {
        return;
      }

      instance = db.instances.findOne({
        _id: instanceId,
        "traces._id": lastSignApprove.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });
      lastTrace = _.find(instance != null ? instance.traces : void 0, function (t) {
        return t._id = lastSignApprove.trace;
      });

      if (lastTrace) {
        setObj = {};

        if (lastTrace != null) {
          lastTrace.approves.forEach(function (a, idx) {
            if (a._id === lastSignApprove._id) {
              if (sign_type === "update") {
                setObj["traces.$.approves." + idx + ".sign_show"] = false;
                setObj["traces.$.approves." + idx + ".modified"] = new Date();
                return setObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
              }
            }
          });
        }

        if (!_.isEmpty(setObj)) {
          db.instances.update({
            _id: instanceId,
            "traces._id": lastTrace._id
          }, {
            $set: setObj
          });
        }
      }
    }

    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      upObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          if (sign_field_code) {
            upObj["traces.$.approves." + idx + ".sign_field_code"] = sign_field_code;
          }

          upObj["traces.$.approves." + idx + ".description"] = description;
          upObj["traces.$.approves." + idx + ".sign_show"] = true;
          upObj["traces.$.approves." + idx + ".modified"] = new Date();
          upObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
          return upObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(upObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: upObj
        });
      }

      return true;
    }
  },
  update_sign_show: function (objs, myApprove_id) {
    objs.forEach(function (obj, index) {
      var instance, ref, setObj, trace;
      instance = db.instances.findOne({
        _id: obj.instance,
        "traces._id": obj.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });

      if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
        trace = instance.traces[0];
        setObj = {};
        trace.approves.forEach(function (approve, idx) {
          if (approve._id === obj._id) {
            setObj["traces.$.approves." + idx + ".sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".custom_sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }

          if (approve._id === myApprove_id) {
            return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }
        });

        if (!_.isEmpty(setObj)) {
          return db.instances.update({
            _id: obj.instance,
            "traces._id": obj.trace
          }, {
            $set: setObj
          });
        }
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_return.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_return.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_return: function (approve, reason) {
    var approve_values, b, current_step, current_user, current_user_info, flow, ins, instance, instance_id, last_trace, newTrace, new_inbox_users, now, pre_step, pre_trace, r, rest_counter_users, setObj, space_id, traces;
    check(approve, Object);
    current_user = this.userId;
    instance_id = approve.instance;
    ins = uuflowManager.getInstance(instance_id);
    space_id = ins.space;

    if (ins.state !== "pending" || !ins.inbox_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.type === "cc" && ins.cc_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (ins.traces.length < 2) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    flow = uuflowManager.getFlow(ins.flow);
    pre_trace = ins.traces[ins.traces.length - 2];
    pre_step = uuflowManager.getStep(ins, flow, pre_trace.step);

    if (pre_step.step_type === "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    last_trace = _.last(ins.traces);
    current_step = uuflowManager.getStep(ins, flow, last_trace.step);

    if (current_step.step_type !== "submit" && current_step.step_type !== "sign" && current_step.step_type !== "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.trace !== last_trace._id) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    new_inbox_users = new Array();

    _.each(pre_trace.approves, function (a) {
      if ((!a.type || a.type === "draft" || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected")) {
        return new_inbox_users.push(a.user);
      }
    });

    if (_.isEmpty(new_inbox_users)) {
      throw new Meteor.Error('error!', "未找到下一步处理人，退回失败");
    }

    traces = ins.traces;
    approve_values = uuflowManager.getApproveValues(approve.values || {}, current_step.permissions, ins.form, ins.form_version);
    setObj = new Object();
    now = new Date();
    rest_counter_users = new Array();

    _.each(traces, function (t) {
      if (t._id === last_trace._id) {
        if (!t.approves) {
          t.approves = new Array();
        }

        _.each(t.approves, function (a, idx) {
          if ((!a.type || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected" || a.judge === "readed") && a.is_finished !== true) {
            setObj['traces.$.approves.' + idx + '.finish_date'] = now;
            setObj['traces.$.approves.' + idx + '.read_date'] = now;
            setObj['traces.$.approves.' + idx + '.is_error'] = false;
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.cost_time'] = now - a.start_date;
            setObj['traces.$.approves.' + idx + '.values'] = approve_values;

            if (a.handler === current_user) {
              setObj['traces.$.approves.' + idx + '.judge'] = "returned";
              return setObj['traces.$.approves.' + idx + '.description'] = reason;
            } else {
              return rest_counter_users.push(a.handler);
            }
          }
        });

        setObj['traces.$.is_finished'] = true;
        setObj['traces.$.finish_date'] = true;
        return setObj['traces.$.judge'] = "returned";
      }
    });

    ins.values = _.extend(ins.values || {}, approve_values);
    newTrace = new Object();
    newTrace._id = new Mongo.ObjectID()._str;
    newTrace.instance = instance_id;
    newTrace.previous_trace_ids = [last_trace._id];
    newTrace.is_finished = false;
    newTrace.step = pre_trace.step;
    newTrace.name = pre_trace.name;
    newTrace.start_date = now;
    newTrace.due_date = uuflowManager.getDueDate(pre_step.timeout_hours, space_id);
    newTrace.approves = [];

    _.each(new_inbox_users, function (next_step_user_id, idx) {
      var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
      newApprove = new Object();
      newApprove._id = new Mongo.ObjectID()._str;
      newApprove.instance = instance_id;
      newApprove.trace = newTrace._id;
      newApprove.is_finished = false;
      newApprove.user = next_step_user_id;
      user_info = db.users.findOne(next_step_user_id, {
        fields: {
          name: 1
        }
      });
      newApprove.user_name = user_info.name;
      handler_id = next_step_user_id;
      handler_info = user_info;
      agent = uuflowManager.getAgent(space_id, next_step_user_id);

      if (agent) {
        new_inbox_users[idx] = agent;
        handler_id = agent;
        handler_info = db.users.findOne({
          _id: agent
        }, {
          fields: {
            name: 1
          }
        });
        newApprove.agent = agent;
      }

      newApprove.handler = handler_id;
      newApprove.handler_name = handler_info.name;
      next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
      next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
      newApprove.handler_organization = next_step_user_org_info["organization"];
      newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
      newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
      newApprove.start_date = now;
      newApprove.is_read = false;
      newApprove.is_error = false;
      newApprove.values = new Object();
      uuflowManager.setRemindInfo(ins.values, newApprove);
      return newTrace.approves.push(newApprove);
    });

    setObj.inbox_users = new_inbox_users;
    setObj.state = "pending";
    ins.outbox_users.push(current_user);
    setObj.outbox_users = _.uniq(ins.outbox_users);
    setObj.modified = now;
    setObj.modified_by = current_user;
    setObj.values = ins.values;
    setObj.current_step_name = pre_trace.name;
    r = db.instances.update({
      _id: instance_id,
      'traces._id': last_trace._id
    }, {
      $set: setObj
    });
    b = db.instances.update({
      _id: instance_id
    }, {
      $push: {
        traces: newTrace
      }
    });

    if (r && b) {
      pushManager.send_message_to_specifyUser("current_user", current_user);
      instance = uuflowManager.getInstance(instance_id);
      current_user_info = db.users.findOne(current_user);
      pushManager.send_instance_notification("return_pending_inbox", instance, reason, current_user_info);

      _.each(rest_counter_users, function (user_id) {
        return pushManager.send_message_to_specifyUser("current_user", user_id);
      });
    }

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_remind.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_remind.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_remind: function (remind_users, remind_count, remind_deadline, instance_id, action_types, trace_id) {
    var current_user_id, ins, last_remind_users, now, priority, trace;
    check(remind_users, Array);
    check(remind_count, Match.OneOf('single', 'multi'));
    check(remind_deadline, Date);
    check(instance_id, String);
    check(action_types, Array);
    check(trace_id, String);
    current_user_id = this.userId;
    last_remind_users = new Array();
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        name: 1,
        traces: 1,
        values: 1,
        space: 1
      }
    });

    if (action_types.includes('admin')) {
      if (remind_count === 'single') {
        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              return last_remind_users.push(ap.user);
            }
          });
        });
      } else if (remind_count === 'multi') {
        now = new Date();
        priority = ins.values.priority;

        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            var caculate_date;

            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              last_remind_users.push(ap.user);
              ap.manual_deadline = remind_deadline;

              if (priority === "普通" || !priority) {} else if (priority === "办文") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "紧急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "特急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              }
            }
          });
        });

        if (!_.isEmpty(last_remind_users)) {
          db.instances.update({
            _id: instance_id
          }, {
            $set: {
              'traces': ins.traces
            }
          });
        }
      }
    } else if (action_types.includes('applicant')) {
      trace = _.find(ins.traces, function (t) {
        return t._id === trace_id;
      });

      _.each(trace.approves, function (ap) {
        if (remind_users.includes(ap.user) && ap.is_finished !== true) {
          return last_remind_users.push(ap.user);
        }
      });
    } else if (action_types.includes('cc')) {
      _.each(ins.traces, function (t) {
        return _.each(t.approves, function (ap) {
          if (remind_users.includes(ap.user) && ap.is_finished !== true && ap.type === 'cc' && ap.from_user === current_user_id) {
            return last_remind_users.push(ap.user);
          }
        });
      });
    }

    uuflowManager.sendRemindSMS(ins.name, remind_deadline, last_remind_users, ins.space, ins._id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"next_step_users_not_found.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/next_step_users_not_found.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  next_step_users_not_found: function (deal_type, step_name, params) {
    var approver_roles, lang, roles, roles_name, str, user;
    check(deal_type, String);
    check(step_name, String);
    check(params, Object);
    str = "";
    user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    lang = 'en';

    if (user.locale === 'zh-cn') {
      lang = 'zh-CN';
    }

    if (deal_type === 'applicantRole') {
      approver_roles = params.approver_roles;
      roles = db.flow_roles.find({
        _id: {
          $in: approver_roles
        }
      }, {
        fields: {
          name: 1
        }
      }).fetch();
      roles_name = _.pluck(roles, 'name').toString();
      str = TAPi18n.__('next_step_users_not_found.applicant_role', {
        step_name: step_name,
        role_name: roles_name
      }, lang);
    }

    return str;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_number_rules.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_number_rules.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval;

_eval = require('eval');
Meteor.methods({
  instanceNumberBuilder: function (spaceId, name) {
    var _NUMBER, _YYYY, context, date, e, numberRules, res, rules, script;

    numberRules = db.instance_number_rules.findOne({
      space: spaceId,
      name: name
    });

    if (!numberRules) {
      throw new Meteor.Error('error!', "" + name);
    }

    date = new Date();
    context = {};
    context._ = _;
    _YYYY = date.getFullYear();
    _NUMBER = (numberRules.number || 0) + 1;
    context.YYYY = _.clone(_YYYY);
    context.MM = date.getMonth() + 1;
    context.mm = date.getMonth() + 1;

    if (context.MM < 10) {
      context.MM = "0" + context.MM;
    }

    context.DD = date.getDate();
    context.dd = date.getDate();

    if (context.DD < 10) {
      context.DD = "0" + context.DD;
    }

    if (context.YYYY !== numberRules.year) {
      _NUMBER = numberRules.first_number || 1;
    }

    context.NUMBER = _.clone(_NUMBER);
    rules = numberRules.rules.replace("{YYYY}", "' + YYYY + '").replace("{MM}", "' + MM + '").replace("{NUMBER}", "' + NUMBER + '");
    script = "var newNo = '" + rules + "'; exports.newNo = newNo";

    try {
      res = _eval(script, "newNo", context, false).newNo;
      db.instance_number_rules.update({
        _id: numberRules._id
      }, {
        $set: {
          year: _YYYY,
          number: _NUMBER
        }
      });
      console.log(this.userId, res);
    } catch (error) {
      e = error;
      res = {
        _error: e
      };
    }

    return res;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"check_main_attach.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/check_main_attach.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  check_main_attach: function (ins_id, name) {
    check(ins_id, String);
    uuflowManager.checkMainAttach(ins_id, name);
    return 'success';
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/related_instances.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  remove_related: function (ins_id, re_ins_id) {
    var index, ins, res, set_obj;
    check(ins_id, String);
    check(re_ins_id, String);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        related_instances: 1
      }
    });

    if (ins) {
      res = ins.related_instances || [];
      index = res.indexOf(re_ins_id);

      if (index > -1) {
        res.remove(index);
      }

      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = res;
      return db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }
  },
  update_instance_related: function (ins_id, related_instances) {
    var ins, set_obj;
    check(ins_id, String);
    check(related_instances, Array);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id,
      $or: [{
        submitter: this.userId
      }, {
        applicant: this.userId
      }, {
        inbox_users: this.userId
      }, {
        cc_users: this.userId
      }]
    }, {
      fields: {
        state: 1
      }
    });

    if (ins) {
      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = related_instances;
      db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }

    return db.instances.find({
      _id: {
        $in: related_instances
      }
    }, {
      fields: {
        _id: 1,
        values: 1
      }
    }).fetch();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"edit_flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/edit_flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  updateFlowPosition: function (data) {
    return db.flow_positions.update({
      _id: data._id
    }, {
      $set: {
        role: data.role,
        users: data.users,
        org: data.org
      }
    });
  },
  updateFlowRole: function (data) {
    console.log(data._id);
    console.log(data.name);
    return db.flow_roles.update({
      _id: data._id
    }, {
      $set: {
        name: data.name
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"start_flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/start_flow.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  start_flow: function (space, flowId, start) {
    var keyValue, start_flows;
    keyValue = db.steedos_keyvalues.findOne({
      space: space,
      user: this.userId,
      key: 'start_flows'
    }, {
      fields: {
        value: 1
      }
    });
    start_flows = (keyValue != null ? keyValue.value : void 0) || [];

    if (start) {
      start_flows.push(flowId);
      start_flows = _.uniq(start_flows);
    } else {
      start_flows.remove(start_flows.indexOf(flowId));
    }

    if (keyValue) {
      return db.steedos_keyvalues.update({
        _id: keyValue._id
      }, {
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    } else {
      return db.steedos_keyvalues.insert({
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_traces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_traces.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  get_instance_traces: function (ins_id) {
    var ins, miniApproveFields;

    if (!this.userId) {
      return;
    }

    miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description'];
    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        "traces._id": 1,
        "traces.is_finished": 1,
        "traces.step": 1,
        "traces.start_date": 1,
        "traces.name": 1,
        "traces.finish_date": 1,
        "traces.judge": 1,
        "traces.approves._id": 1,
        "traces.approves.is_finished": 1,
        "traces.approves.user": 1,
        "traces.approves.handler": 1,
        "traces.approves.handler_name": 1,
        "traces.approves.handler_organization_fullname": 1,
        "traces.approves.type": 1,
        "traces.approves.start_date": 1,
        "traces.approves.description": 1,
        "traces.approves.is_read": 1,
        "traces.approves.judge": 1,
        "traces.approves.finish_date": 1,
        "traces.approves.from_user_name": 1,
        "traces.approves.from_user": 1,
        "traces.approves.cc_description": 1,
        "traces.approves.trace": 1,
        "traces.approves.forward_space": 1,
        "traces.approves.forward_instance": 1
      }
    });

    if (!ins) {
      return;
    }

    return ins != null ? ins.traces : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_batch.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_batch.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  'get_batch_instances': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return _batch_instances;
  },
  'get_batch_instances_count': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return (_batch_instances != null ? _batch_instances.length : void 0) || 0;
  },
  'get_my_approves': function (instanceIds) {
    var myApproves, that;
    that = this;

    if (!that.userId) {
      return;
    }

    myApproves = new Array();
    instanceIds.forEach(function (insId) {
      var my_approve;
      my_approve = InstanceManager.getMyApprove(insId, that.userId);

      if (my_approve) {
        return myApproves.push(my_approve);
      }
    });
    return myApproves;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/flow.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  change_flow_state: function (flows) {
    var _userId;

    check(flows, Array);
    _userId = this.userId;

    if (!_userId) {
      return;
    }

    return flows.forEach(function (flow) {
      var _flows, _flows_state, flowId, form, formId, form_current_fields_code, now, spaceId, state;

      spaceId = flow.space;
      formId = flow.form;
      flowId = flow.id;
      state = flow.state;

      if (!Steedos.isSpaceAdmin(spaceId, _userId)) {
        throw Meteor.Error(401, "No permission");
      }

      form = db.forms.findOne({
        _id: formId
      }, {
        fields: {
          historys: 0
        }
      });
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          historys: 0
        }
      });

      if (state !== 'enabled' && state !== 'disabled') {
        throw new Meteor.Error(500, "state无效");
      }

      if (!form) {
        throw new Meteor.Error(500, "form无效");
      }

      if (!flow) {
        throw new Meteor.Error(500, "flow无效");
      }

      if (!form.is_valid) {
        throw new Meteor.Error(500, "流程引用的表单[" + form.name + "]验证未通过，请打开流程设计器检查表单设置");
      }

      if (!flow.is_valid) {
        throw new Meteor.Error(500, "流程验证未通过，请打开流程设计器检查流程设置");
      }

      if (!['new', 'modify', 'delete'].includes(flow.flowtype)) {
        throw new Meteor.Error(500, "流程验证未通过，flowtype值必须是new、modify、delete其中之一");
      }

      if (!_.isArray(flow.current.steps)) {
        throw new Meteor.Error(500, "流程验证未通过，流程的步骤不能为空");
      }

      if (_.uniq(flow.current.steps, 'name').length !== flow.current.steps.length) {
        throw new Meteor.Error(500, "流程验证未通过，同一个流程下的步骤的名称不能重复");
      }

      now = new Date();

      if (state === 'enabled') {
        flow.current.steps.forEach(function (step) {
          var specifyStep;

          if (['specifyStepUser', 'specifyStepRole'].includes(step.deal_type)) {
            if (!step.approver_step) {
              throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
            } else {
              specifyStep = _.find(flow.current.steps, function (_step) {
                return step.approver_step === _step._id;
              });

              if (!specifyStep) {
                throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
              }
            }
          }
        });
        form_current_fields_code = form.current.fields.getProperty("code");
        flow.current.steps.forEach(function (step) {
          return step.fields_modifiable = _.intersection(step.fields_modifiable, form_current_fields_code);
        });

        if (form.state === 'disabled') {
          db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "enabled",
              "current.start_date": now,
              "current.modified": now,
              "current.modified_by": _userId
            }
          });
        }

        flow.current.modified = now;
        flow.current.start_date = now;
        flow.current.modified_by = _userId;
        return db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "enabled",
            "current": flow.current
          }
        });
      } else {
        db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "disabled",
            "current.modified": now,
            "current.start_date": now,
            "current.modified_by": _userId
          }
        });
        _flows = db.flows.find({
          form: form._id
        }, {
          fields: {
            _id: 1,
            state: 1
          }
        }).fetch();
        _flows_state = _flows.getProperty("state");

        if (!_flows_state.includes('enabled')) {
          return db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "disabled",
              "current.modified": now,
              "current.start_date": now,
              "current.modified_by": _userId
            }
          });
        }
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distribute.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/distribute.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hide_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/hide_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  hide_instance: function (insId, is_hidden) {
    var instance, permissions, space, userId;

    if (!this.userId) {
      return;
    }

    check(insId, String);
    check(is_hidden, Boolean);
    userId = this.userId;
    instance = db.instances.findOne(insId, {
      fields: {
        state: 1,
        flow: 1,
        space: 1
      }
    });

    if (!instance) {
      throw new Meteor.Error('error!', "未找到申请单");
    }

    if (instance.state !== 'completed') {
      throw new Meteor.Error('error!', "申请单状态不是已结束");
    }

    permissions = permissionManager.getFlowPermissions(instance.flow, userId);
    space = db.spaces.findOne(instance.space, {
      fields: {
        admins: 1
      }
    });

    if (!permissions.includes("admin") && !space.admins.includes(userId)) {
      throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
    }

    db.instances.update(insId, {
      $set: {
        is_hidden: is_hidden
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_value.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_value.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  getInstanceValues: function (insId) {
    var ref;

    if (!this.userId) {
      return;
    }

    return (ref = db.instances.findOne({
      _id: insId
    }, {
      fields: {
        values: 1
      }
    })) != null ? ref.values : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"routes":{"instance.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies, getInstanceReadOnly;
Cookies = require("cookies");

getInstanceReadOnly = function (req, res, next, options) {
  var _hasPermission, _locale, _parent_instances, dataBuf, error, hide_traces, html, instance, instanceId, ref, ref1, space, spaceId, spaceUserCount, user, userId;

  user = Steedos.getAPILoginUser(req, res);

  if (req != null ? (ref = req.query) != null ? ref.access_token : void 0 : void 0) {
    userId = Steedos.getUserIdFromAccessToken(req.query.access_token);

    if (userId) {
      user = Meteor.users.findOne({
        _id: userId
      });
    }
  }

  spaceId = req.params.space;
  instanceId = req.params.instance_id;
  instance = db.instances.findOne({
    _id: instanceId
  });
  space = db.spaces.findOne({
    _id: spaceId
  });
  hide_traces = (ref1 = req.query) != null ? ref1.hide_traces : void 0;

  if (!options) {
    options = {
      showTrace: true
    };
  } else {
    options.showTrace = true;
  }

  if (hide_traces === "1") {
    if (options) {
      options.showTrace = false;
    } else {
      options = {
        showTrace: false
      };
    }
  }

  if (!options.showAttachments) {
    options.showAttachments = true;
  }

  if (!space) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space",
        "success": false
      }
    });
    return;
  }

  if (!instance) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing instance",
        "success": false
      }
    });
    return;
  }

  if (!user) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Auth-Token,X-User-Id",
        "success": false
      }
    });
    return;
  }

  if (instance.space !== spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space or instance",
        "success": false
      }
    });
    return;
  }

  spaceUserCount = db.space_users.find({
    user: user._id,
    space: spaceId
  }).count();

  if (spaceUserCount === 0) {
    if (!space) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- Missing sapceUser",
          "success": false
        }
      });
      return;
    }
  }

  _hasPermission = WorkflowManager.hasInstancePermissions(user, instance);

  if (!_hasPermission && instance.distribute_from_instance) {
    _parent_instances = _.union([instance.distribute_from_instance], instance.distribute_from_instances || []);
    _hasPermission = _.find(_parent_instances, function (_parent_id) {
      var _parent_ins;

      _parent_ins = db.instances.findOne({
        _id: _parent_id
      }, {
        fields: {
          traces: 0
        }
      });
      return WorkflowManager.hasInstancePermissions(user, _parent_ins);
    });
  }

  if (!_hasPermission) {
    _locale = Steedos.locale(user._id, true);
    error = TAPi18n.__("instance_permissions_error", {}, _locale);
    res.charset = "utf-8";
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": error,
        "success": false
      }
    });
    return;
  }

  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
};

JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id", getInstanceReadOnly);
JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id/:instance_name", function (req, res, next) {
  var options;
  res.setHeader('Content-type', 'application/x-msdownload');
  res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(req.params.instance_name));
  res.setHeader('Transfer-Encoding', '');
  options = {
    absolute: true
  };
  return getInstanceReadOnly(req, res, next, options);
}); /*
    	获取申请单列表：
        final_decision：审批结果
        state: 申请单状态
     */
JsonRoutes.add("get", "/api/workflow/instances", function (req, res, next) {
  var f, flowId, flowIds, flows, i, instances, query, ref, ref1, ref2, ref3, ret_sync_token, spaceId, spaceUser, spaceUserOrganizations, sync_token, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  spaceId = req.headers["x-space-id"];

  if (!spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Space-Id",
        "success": false
      }
    });
    return;
  }

  flowId = (ref = req.query) != null ? ref.flowId : void 0;

  if (!flowId) {
    JsonRoutes.sendResult(res, {
      code: 400,
      data: {
        "error": "Validate Request -- Missing flowId",
        "success": false
      }
    });
    return;
  }

  query = {};
  ret_sync_token = new Date().getTime();
  flowIds = flowId.split(",");
  flows = db.flows.find({
    _id: {
      $in: flowIds
    }
  }).fetch();
  i = 0;

  while (i < flows.length) {
    f = flows[i];
    spaceUser = db.space_users.findOne({
      space: f.space,
      user: user_id
    });

    if (!spaceUser) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- No permission, flow is " + f._id,
          "success": false
        }
      });
      return;
    } else {}

    if (!Steedos.isSpaceAdmin(spaceId, user_id)) {
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: spaceUser.organizations
        }
      }).fetch();

      if (!WorkflowManager.canMonitor(f, spaceUser, spaceUserOrganizations) && !WorkflowManager.canAdmin(f, spaceUser, spaceUserOrganizations)) {
        JsonRoutes.sendResult(res, {
          code: 401,
          data: {
            "error": "Validate Request -- No permission, flow is " + f._id,
            "success": false
          }
        });
        return;
      }
    }

    i++;
  }

  query.flow = {
    $in: flowIds
  };
  query.space = spaceId;

  if ((ref1 = req.query) != null ? ref1.sync_token : void 0) {
    sync_token = new Date(Number(req.query.sync_token));
    query.modified = {
      $gt: sync_token
    };
  }

  if ((ref2 = req.query) != null ? ref2.final_decision : void 0) {
    query.final_decision = {
      $in: req.query.final_decision.split(",")
    };
  } else {
    query.final_decision = {
      $nin: ["terminated", "rejected"]
    };
  }

  if ((ref3 = req.query) != null ? ref3.state : void 0) {
    query.state = {
      $in: req.query.state.split(",")
    };
  } else {
    query.state = "completed";
  }

  instances = db.instances.find(query, {
    fields: {
      inbox_uers: 0,
      cc_users: 0,
      outbox_users: 0,
      traces: 0,
      attachments: 0
    },
    skip: 0,
    limit: 500
  }).fetch();
  instances.forEach(function (instance) {
    var attachments;
    attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return instance.attachments = attachments;
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      "status": "success",
      "sync_token": ret_sync_token,
      "data": instances
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"steedos_css.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/steedos_css.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/steedos-css", function (req, res, next) {
  var allCss, allCssLink;
  allCss = WebApp.getRefreshableAssets();
  allCssLink = "";
  allCss.forEach(function (css) {
    var cssHref, rootUrl;

    if (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX) {
      rootUrl = __meteor_runtime_config__.ROOT_URL;

      if (rootUrl.endsWith("/")) {
        cssHref = rootUrl.replace(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX + "/", "") + css.url;
      } else {
        cssHref = rootUrl.replace(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX, "") + css.url;
      }
    } else {
      cssHref = Meteor.absoluteUrl(css.url);
    }

    return allCssLink += "@import url(" + cssHref + ");";
  });
  res.statusCode = 200;
  return res.end(allCssLink);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft_view.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance_draft_view.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/api/workflow/space/:space/view/draft/:flow", function (req, res, next) {
  var dataBuf, flow, flowId, form, html, instance, options, space, spaceId, user, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  user = db.users.findOne({
    _id: user_id
  });
  spaceId = req.params.space;
  flowId = req.params.flow;
  space = db.spaces.findOne({
    _id: spaceId
  });
  flow = db.flows.findOne({
    _id: flowId
  }, {
    fields: {
      name: 1,
      'current._id': 1,
      form: 1
    }
  });
  form = db.forms.findOne({
    _id: flow.form
  }, {
    fields: {
      'current._id': 1
    }
  });
  options = {
    showTrace: false,
    showAttachments: false,
    templateName: "default",
    editable: true,
    width: "100%",
    instance_style: "instance-default",
    plugins: "\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta http-equiv=\"x-rim-auto-match\" content=\"none\">\n<title>" + flow.name + "</title>\n<meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />\n<meta name=\"viewport\" content=\"width=device-width\" />\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.min.css\">\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js\" type=\"text/javascript\"></script>\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/toastr/toastr.min.css\">\n<script src=\"/plugins/toastr/toastr.min.js\" type=\"text/javascript\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/js/workflow_client.css\">\n<script src=\"/js/workflow_client.js\" type=\"text/javascript\"></script>"
  };
  instance = {
    flow: flow._id,
    flow_version: flow.current._id,
    form: form._id,
    form_version: form.current._id,
    values: {},
    name: flow.name,
    space: spaceId
  };
  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lib":{"1_form_formula.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/1_form_formula.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Array.prototype.filterProperty = function (h, l) {
  var g = [];
  this.forEach(function (t) {
    var m = t ? t[h] : null;
    var d = false;

    if (m instanceof Array) {
      d = m.includes(l);
    } else {
      d = l === undefined ? false : m == l;
    }

    if (d) {
      g.push(t);
    }
  });
  return g;
};

Array.prototype.getProperty = function (k) {
  var v = new Array();
  this.forEach(function (t) {
    var m = t ? t[k] : null;
    v.push(m);
  });
  return v;
};

Array.prototype.getEach = function (code) {
  var rev = [];

  for (var i = 0; i < this.length; i++) {
    rev.push(this[i][code]);
  }

  return rev;
};

Array.prototype.uniq = function () {
  var a = [];
  this.forEach(function (b) {
    if (a.indexOf(b) < 0) {
      a[a.length] = b;
    }
  });
  return a;
};

Form_formula = {};

Form_formula.mixin = function (dest, src) {
  for (var key in src) {
    dest[key] = src[key];
  }

  return dest;
};

Form_formula.handerUserObject = function (u) {
  if (u instanceof Array) {
    var user = {};
    user.name = u.getProperty("name");
    user.organization = {};
    user.organization.name = u.getProperty("organization").getProperty("name");
    user.organization.fullname = u.getProperty("organization").getProperty("fullname");
    user.hr = u.getProperty("hr");
    user.sort_no = u.getProperty("sort_no");
    user.mobile = u.getProperty("mobile");
    user.work_phone = u.getProperty("work_phone");
    user.position = u.getProperty("position");
    var userRoles = u.getProperty("roles");
    var roles = new Array();
    userRoles.forEach(function (i) {
      roles = roles.concat(i);
    });
    roles.uniq();
    user.roles = roles;
    return user;
  } else {
    return u;
  }
};

Form_formula.handerOrgObject = function (o) {
  if (o instanceof Array) {
    var org = {};
    org.id = o.getProperty("_id");
    org.name = o.getProperty("name");
    org.fullname = o.getProperty("fullname");
    return org;
  } else {
    return o;
  }
};
/**
    * 获得公式需要用到的初始值
    * 输入：fields, values, applicant
    * 输出：__values
**/


Form_formula.init_formula_values = function (fields, autoFormDoc, approver, applicant, spaceId) {
  var __values = {}; //申请单中填的值处理

  if (fields && fields.length && autoFormDoc) {
    //debugger;
    fields.forEach(function (field) {
      var type = field.type;

      if (type) {
        if (type === 'table') {
          /*
          * 将表格字段的值进行转换后传入__values中
          * values中表格的值格式为
          * [{"a":1,"b":4},{"a":2,"b":5},{"a":3,"b":6}]
          * __values需要转化为下面格式且和主表的值一样放到第一层
          * {"a":[1,2,3],"b":[4,5,6]}
          **/
          var tableFields = field.sfields,
              tableValues = autoFormDoc[field.code],
              formulaTableValues = [],
              __tableValues = {}; //按公式的格式转换值为__tableValues

          if (tableFields && tableFields.length && tableValues && tableValues instanceof Array) {
            tableValues.forEach(function (tableValue) {
              formulaTableValues.push(Form_formula.init_formula_values(tableFields, tableValue));
            }, this); //按主表的格式转换__tableValues加到

            tableFields.forEach(function (tablefield) {
              __tableValues[tablefield.code] = formulaTableValues.getEach(tablefield.code);
            });
            __values = Form_formula.mixin(__values, __tableValues);
          }
        } else if (type == 'user') {
          __values[field.code] = Form_formula.handerUserObject(WorkflowManager.getFormulaUserObjects(spaceId, autoFormDoc[field.code]));
        } else if (type == 'group') {
          __values[field.code] = Form_formula.handerOrgObject(WorkflowManager.getFormulaOrgObjects(autoFormDoc[field.code]));
        } else if (type == 'odata') {
          __values[field.code] = autoFormDoc[field.code] || {};
        } else {
          //此处传spaceId给选人控件的旧数据计算roles和organization
          __values[field.code] = autoFormDoc[field.code];
        }
      }
    }, this);
  } //当前处理人


  __values["approver"] = WorkflowManager.getFormulaUserObject(spaceId, approver); //申请人

  __values["applicant"] = WorkflowManager.getFormulaUserObject(spaceId, applicant);
  return __values;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_handlers_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/get_handlers_manager.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
getHandlersManager = {};

getHandlersManager.getHandlersByUsersAndRoles = function (user_ids, role_ids, space_id) {
  var approve_users;
  approve_users = new Array();

  _.each(user_ids, function (user_id) {
    var users;

    if (db.users.find({
      _id: user_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRoles(user_id, role_ids, space_id);

      if (users.length > 0) {
        return approve_users = approve_users.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "user_id不合法不合法");
    }
  });

  approve_users = _.uniq(approve_users);
  return approve_users;
};

getHandlersManager.getHandlersByUserAndRoles = function (user_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;

    if (db.flow_roles.find({
      _id: role_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRole(user_id, role_id, space_id);

      if (users.length > 0) {
        return user_ids = user_ids.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "role_id已经被删除");
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据user_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByUserAndRole = function (user_id, role_id, space_id) {
  var orgs, user_ids;
  orgs = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      _id: 1
    }
  }).fetch();
  user_ids = new Array();

  _.each(orgs, function (org) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org._id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgsAndRoles = function (org_ids, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(org_ids, function (org_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRoles(org_id, role_ids, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgAndRoles = function (org_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org_id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据org_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByOrgAndRole = function (org_id, role_id, space_id) {
  var org, parents, positions, user_ids;
  org = db.organizations.findOne({
    _id: org_id
  }, {
    fields: {
      parents: 1
    }
  });
  user_ids = new Array();
  positions = db.flow_positions.find({
    space: space_id,
    org: org_id,
    role: role_id
  }, {
    fields: {
      users: 1
    }
  }).fetch();

  _.each(positions, function (position) {
    return user_ids = user_ids.concat(position.users);
  });

  if (user_ids.length === 0) {
    parents = org.parents;

    _.each(parents, function (parent_id) {
      positions = db.flow_positions.find({
        space: space_id,
        org: parent_id,
        role: role_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();

      if (positions.length > 0) {
        return _.each(positions, function (position) {
          return user_ids = user_ids.concat(position.users);
        });
      }
    });
  }

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlers = function (instance_id, step_id) {
  var _approve, _space_user, _trace, applicant, applicantSuperiors, approveHrRoleIds, approve_users, approver_org_field, approver_org_ids, approver_step, approver_user_field, approver_user_ids, current, current_flow, current_flow_version, current_form, current_step, current_steps, deal_type, field_code, finished_traces, flow_id, flow_rev, form, form_fields, form_id, form_rev, handlers, instance, max_startDate_trace, new_approver_user_ids, new_org_user_ids, newest_values, next_step_users, org_ids, org_ids_names, org_user_ids, space_id, space_user_count, submitter, submitter_user_count, unfinished_trace, user_ids, user_ids_names, users, valid_approver_org_ids;

  instance = db.instances.findOne(instance_id);

  if (instance.step_approve && !_.isEmpty(instance.step_approve[step_id + "_options"])) {
    return instance.step_approve[step_id + "_options"];
  }

  approve_users = new Array();
  space_id = instance.space;
  flow_id = instance.flow;
  flow_rev = instance.flow_version;
  current_flow = db.flows.findOne(flow_id);
  current_step = null;
  current_steps = new Array();

  if (current_flow.current._id === flow_rev) {
    current_steps = current_flow.current.steps;
  } else {
    current = _.find(current_flow.historys, function (history) {
      return history._id === flow_rev;
    });
    current_steps = current.steps;
  }

  current_step = _.find(current_steps, function (step) {
    return step._id === step_id;
  });

  if (current_step.step_type === "condition") {
    unfinished_trace = _.find(instance.traces, function (trace) {
      return trace.is_finished === false;
    });
    return new Array(unfinished_trace.approves[0].user);
  }

  if (current_step.step_type === "start") {
    handlers = new Array();
    handlers.push(instance.applicant);
    handlers.push(instance.submitter);
    handlers = _.uniq(handlers);
    return handlers;
  }

  deal_type = current_step.deal_type;
  users = new Array();

  if (deal_type === "applicantRole") {
    applicant = instance.applicant;

    if (applicant) {
      space_user_count = db.space_users.find({
        space: space_id,
        user: applicant
      }).count();

      if (space_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
      }

      if (current_step.approver_roles && current_step.approver_roles.length > 0) {
        _.each(current_step.approver_roles, function (approver_role) {
          var role_count;
          role_count = db.flow_roles.find({
            _id: approver_role
          }).count();

          if (role_count === 0) {
            throw new Meteor.Error('error!', "角色已经被删除");
          }
        });

        return getHandlersManager.getHandlersByUserAndRoles(applicant, current_step.approver_roles, space_id);
      } else {
        throw new Meteor.Error('error!', "审批岗位未指定");
      }
    } else {
      throw new Meteor.Error('error!', "Instance的提交人为空");
    }
  } else if (deal_type === "hrRole") {
    approveHrRoleIds = current_step.approver_hr_roles;

    if (approveHrRoleIds) {
      return _.pluck(WorkflowManager.getHrRolesUsers(space_id, approveHrRoleIds), 'user');
    } else {
      throw new Meteor.Error('error!', "角色未指定");
    }
  } else if (deal_type === "applicant") {
    applicant = instance.applicant;
    space_user_count = db.space_users.find({
      space: space_id,
      user: applicant
    }).count();

    if (space_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
    } else {
      return new Array(applicant);
    }
  } else if (deal_type === "orgFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByOrgsAndRoles(org_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "orgField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    user_ids = new Array();

    _.each(org_ids, function (org_id) {
      var check_orgs, org, org_children, org_users;
      org = db.organizations.findOne({
        _id: org_id
      }, {
        fields: {
          users: 1
        }
      });
      org_children = db.organizations.find({
        space: space_id,
        parents: org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      org_children.unshift(org);
      check_orgs = org_children;
      org_users = new Array();

      _.each(check_orgs, function (check_org_user) {
        if (check_org_user.users) {
          _.each(check_org_user.users, function (org_user) {
            if (db.space_users.find({
              space: space_id,
              user: org_user
            }).count() === 0) {
              throw new Meteor.Error('error!', "space下不存在此user");
            }
          });
        }

        user_ids = user_ids.concat(check_org_user.users);
        return org_users = org_users.concat(check_org_user.users);
      });

      if (org_users.length === 0) {
        throw new Meteor.Error('error!', "组织" + org_id + "不存在处理人");
      }
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "userFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByUsersAndRoles(user_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "userField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "specifyStepRole") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    if (current_step.approver_roles) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', "角色已经被删除");
        }
      });
    }

    _.each(approve_users, function (approve_user) {
      if (db.space_users.find({
        space: space_id,
        user: approve_user
      }).count() === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    return getHandlersManager.getHandlersByUsersAndRoles(approve_users, current_step.approver_roles, space_id);
  } else if (deal_type === "specifyStepUser") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    _.each(approve_users, function (approve_user) {
      var check_approve_user_count;
      check_approve_user_count = db.space_users.find({
        space: space_id,
        user: approve_user
      }).count();

      if (check_approve_user_count === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    approve_users = _.uniq(approve_users);
    return approve_users;
  } else if (deal_type === "submitterRole") {
    submitter = instance.submitter;

    if (!submitter) {
      submitter_user_count = db.space_users.find({
        space: space_id,
        user: submitter
      }).count();

      if (submitter_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
      } else {
        if (current_step.approver_roles && current_step.approver_roles.length > 0) {
          _.each(current_step.approver_roles, function (approver_role) {
            var role_count;
            role_count = db.flow_roles.find({
              _id: approver_role
            }).count();

            if (role_count === 0) {
              throw new Meteor.Error('error!', approver_role + "已经被删除");
            }
          });

          return getHandlersManager.getHandlersByUserAndRoles(submitter, current_step.approver_roles, space_id);
        } else {
          throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
        }
      }
    } else {
      throw new Meteor.Error('error!', "申请单的提交人为空");
    }
  } else if (deal_type === "submitter") {
    submitter = instance.submitter;
    submitter_user_count = db.space_users.find({
      space: space_id,
      user: submitter
    }).count();

    if (submitter_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
    } else {
      return new Array(submitter);
    }
  } else if (deal_type === "specifyOrg") {
    approver_org_ids = current_step.approver_orgs;

    if (!approver_org_ids || approver_org_ids.length === 0) {
      throw new Meteor.Error('error!', "未定义用于查找下一步处理人的部门，请联系管理员调查流程图的配置是否正确");
    }

    valid_approver_org_ids = new Array();

    _.each(approver_org_ids, function (approver_org_id) {
      if (db.organizations.find({
        _id: approver_org_id
      }).count() > 0) {
        return valid_approver_org_ids.unshift(approver_org_id);
      }
    });

    org_user_ids = new Array();

    _.each(valid_approver_org_ids, function (valid_approver_org_id) {
      var child_orgs, valid_approver_org;
      valid_approver_org = db.organizations.findOne({
        _id: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      });

      if (valid_approver_org.users) {
        org_user_ids = org_user_ids.concat(valid_approver_org.users);
      }

      child_orgs = db.organizations.find({
        space: space_id,
        parents: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      return _.each(child_orgs, function (child_org) {
        if (child_org.users) {
          return org_user_ids = org_user_ids.concat(child_org.users);
        }
      });
    });

    org_user_ids = _.uniq(org_user_ids);
    new_org_user_ids = new Array();

    _.each(org_user_ids, function (org_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: org_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_org_user_ids.push(org_user_id);
      }
    });

    return new_org_user_ids;
  } else if (deal_type === "specifyUser") {
    approver_user_ids = current_step.approver_users;
    approver_user_ids = _.uniq(approver_user_ids);
    new_approver_user_ids = new Array();

    _.each(approver_user_ids, function (approver_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: approver_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_approver_user_ids.push(approver_user_id);
      }
    });

    return new_approver_user_ids;
  } else if (deal_type === "pickupAtRuntime") {
    next_step_users = new Array();
    _trace = _.find(instance.traces, function (_tr) {
      return _tr.is_finished === false;
    });
    _approve = _.find(_trace.approves, function (_app) {
      return _app.is_finished === false && _app.type !== 'cc';
    });

    if (_approve.next_steps) {
      if (_approve.next_steps[0]["users"]) {
        next_step_users = _approve.next_steps[0]["users"];
      }
    }

    return next_step_users;
  } else if (deal_type === "applicantSuperior") {
    applicantSuperiors = new Array();
    _space_user = db.space_users.findOne({
      space: space_id,
      user: instance.applicant
    }, {
      fields: {
        manager: 1
      }
    });

    if (_space_user.manager) {
      applicantSuperiors.push(_space_user.manager);
    }

    return applicantSuperiors;
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"permission_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/permission_manager.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
permissionManager = {};

permissionManager.getFlowPermissions = function (flow_id, user_id) {
  var flow, my_permissions, org_ids, organizations, orgs_can_add, orgs_can_admin, orgs_can_monitor, space_id, users_can_add, users_can_admin, users_can_monitor;
  flow = uuflowManager.getFlow(flow_id);
  space_id = flow.space;
  org_ids = new Array();
  organizations = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      parents: 1
    }
  }).fetch();

  _.each(organizations, function (org) {
    org_ids.push(org._id);

    if (org.parents) {
      return _.each(org.parents, function (parent_id) {
        return org_ids.push(parent_id);
      });
    }
  });

  org_ids = _.uniq(org_ids);
  my_permissions = new Array();

  if (flow.perms) {
    if (flow.perms.users_can_add) {
      users_can_add = flow.perms.users_can_add;

      if (users_can_add.includes(user_id)) {
        my_permissions.push("add");
      }
    }

    if (flow.perms.orgs_can_add) {
      orgs_can_add = flow.perms.orgs_can_add;

      _.each(org_ids, function (org_id) {
        if (orgs_can_add.includes(org_id)) {
          return my_permissions.push("add");
        }
      });
    }

    if (flow.perms.users_can_monitor) {
      users_can_monitor = flow.perms.users_can_monitor;

      if (users_can_monitor.includes(user_id)) {
        my_permissions.push("monitor");
      }
    }

    if (flow.perms.orgs_can_monitor) {
      orgs_can_monitor = flow.perms.orgs_can_monitor;

      _.each(org_ids, function (org_id) {
        if (orgs_can_monitor.includes(org_id)) {
          return my_permissions.push("monitor");
        }
      });
    }

    if (flow.perms.users_can_admin) {
      users_can_admin = flow.perms.users_can_admin;

      if (users_can_admin.includes(user_id)) {
        my_permissions.push("admin");
      }
    }

    if (flow.perms.orgs_can_admin) {
      orgs_can_admin = flow.perms.orgs_can_admin;

      _.each(org_ids, function (org_id) {
        if (orgs_can_admin.includes(org_id)) {
          return my_permissions.push("admin");
        }
      });
    }
  }

  my_permissions = _.uniq(my_permissions);
  return my_permissions;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"approve_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/approve_manager.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
approveManager = {}; /*
                         对比approve_values与last_values 对象， 返回approve_values比last_values多出的或者改变的部分
                      */

approveManager.getChangeValues = function (last_values, approve_values) {
  var approve_values_keys, changeValues, last_values_keys;
  changeValues = {};
  last_values_keys = _.keys(last_values);
  approve_values_keys = _.keys(approve_values);
  approve_values_keys.forEach(function (key) {
    if (_.contains(last_values_keys, key)) {
      if (!_.isEqual(last_values[key], approve_values[key])) {
        return changeValues[key] = approve_values[key];
      }
    } else {
      if (approve_values[key] !== '') {
        return changeValues[key] = approve_values[key];
      }
    }
  });
  return changeValues;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/flow_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
flowManager = {};

flowManager.getCategoriesFlows = function (spaceId, categorieId, fields) {
  var categoriesForms;
  categoriesForms = formManager.getCategoriesForms(spaceId, categorieId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: categoriesForms.getProperty("_id")
    }
  });
};

flowManager.getUnCategoriesFlows = function (spaceId, fields) {
  var unCategoriesForms;
  unCategoriesForms = formManager.getUnCategoriesForms(spaceId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: unCategoriesForms.getProperty("_id")
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"form_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/form_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
formManager = {};

formManager.getCategoriesForms = function (spaceId, categorieId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: categorieId,
    state: "enabled"
  }, _fields);
};

formManager.getUnCategoriesForms = function (spaceId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: {
      $in: [null, ""]
    },
    state: "enabled"
  }, _fields);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"step_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/step_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
stepManager = {};

stepManager.allowBatch = function (step) {
  return step.allowBatch;
};

stepManager.getStep = function (instance, flow, step_id) {
  var flow_rev, isExistStep;
  flow_rev = instance.flow_version;
  isExistStep = null;

  if (flow.current._id === flow_rev) {
    isExistStep = _.find(flow.current.steps, function (step) {
      return step._id === step_id;
    });
  } else {
    _.each(flow.historys, function (history) {
      if (history._id === flow_rev) {
        return isExistStep = _.find(history.steps, function (step) {
          return step._id === step_id;
        });
      }
    });
  }

  if (!isExistStep) {
    throw new Meteor.Error('error!', "不能获取step");
  }

  return isExistStep;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_manager.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/instance_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval, logger;

_eval = require('eval');
InstanceManager = {};
logger = new Logger('Workflow -> InstanceManager');

InstanceManager.handlerInstanceByFieldMap = function (ins, field_map) {
  var context, e, flow, res, script;
  res = ins;

  if (ins) {
    if (!field_map) {
      flow = db.flows.findOne({
        _id: ins.flow
      }, {
        fields: {
          field_map: 1
        }
      });

      if (flow != null ? flow.field_map : void 0) {
        field_map = flow.field_map;
      }
    }

    if (field_map) {
      context = _.clone(ins);
      context._ = _;
      script = "var instances = " + field_map + "; exports.instances = instances";

      try {
        res = _eval(script, "handlerInstanceByFieldMap", context, false).instances;
      } catch (error) {
        e = error;
        res = {
          _error: e
        };
        logger.error(e);
      }
    }
  }

  return res;
};

InstanceManager.getCurrentApprove = function (instance, handler) {
  var currentApprove, currentApproves, currentTraces;

  if (!instance || !instance.traces || instance.traces.length < 1) {
    return;
  }

  currentTraces = instance.traces.filterProperty('is_finished', false);

  if (currentTraces.length) {
    currentApproves = currentTraces[0].approves.filterProperty('is_finished', false).filterProperty('handler', handler);
    currentApprove = currentApproves.length > 0 ? currentApproves[0] : null;
  }

  if (!currentApprove || currentApprove.type === 'cc') {
    _.each(instance.traces, function (t) {
      _.each(t.approves, function (a) {
        if (a.type === 'cc' && a.user === handler && a.is_finished === false) {
          currentApprove = a;
        }
      });
    });
  }

  if (!currentApprove) {
    return;
  }

  return currentApprove;
};

InstanceManager.getCurrentTrace = function (instance, traceId) {
  return instance.traces.findPropertyByPK("_id", traceId);
};

InstanceManager.getMyApprove = function (instanceId, userId) {
  var flow, instance, judge, my_approve, nextSteps, next_user_ids, step, step_type, trace;
  instance = db.instances.findOne({
    _id: instanceId
  });
  flow = uuflowManager.getFlow(instance.flow);
  my_approve = InstanceManager.getCurrentApprove(instance, userId);

  if (my_approve) {
    trace = InstanceManager.getCurrentTrace(instance, my_approve.trace);
    step = uuflowManager.getStep(instance, flow, trace.step);
    step_type = step.step_type;
    judge = step_type === "sign" ? "approved" : "";
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, judge);

    if (nextSteps.length === 1) {
      if (step_type === "sign" || step_type === "counterSign") {
        my_approve.judge = 'approved';
      }

      next_user_ids = getHandlersManager.getHandlers(instance._id, nextSteps[0]);

      if (!next_user_ids) {
        my_approve.next_steps = [{
          step: nextSteps[0],
          users: []
        }];
        return my_approve;
      }

      if (next_user_ids.length === 1) {
        my_approve.next_steps = [{
          step: nextSteps[0],
          users: next_user_ids
        }];
        return my_approve;
      }
    }
  }
};

InstanceManager.getBatchInstances = function (space, categoryId, flowIds, inbox_user) {
  var FIELDS, _batch_instances, categoryFlows, inbox_instances, query, unCategoryFlows;

  _batch_instances = new Array();
  query = {
    space: space,
    inbox_users: inbox_user
  };
  FIELDS = {
    name: 1,
    applicant_name: 1,
    submit_date: 1,
    flow_version: 1,
    "traces.step": 1,
    flow: 1,
    current_step_name: 1,
    flow_name: 1
  };

  if (categoryId) {
    if (categoryId === '-1') {
      unCategoryFlows = flowManager.getUnCategoriesFlows(space, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: unCategoryFlows
      };
    } else {
      categoryFlows = flowManager.getCategoriesFlows(space, categoryId, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: categoryFlows
      };
    }
  }

  if (flowIds) {
    query.flow = {
      $in: flowIds
    };
  }

  inbox_instances = db.instances.find(query, {
    fields: FIELDS,
    skip: 0,
    limit: 100
  });
  inbox_instances.forEach(function (ins) {
    var currentStep, currentStepId, flow, myApprove;
    currentStepId = _.last(ins.traces).step;
    flow = db.flows.findOne({
      _id: ins.flow
    });
    currentStep = stepManager.getStep(ins, flow, currentStepId);
    myApprove = InstanceManager.getMyApprove(ins._id, inbox_user);

    if (stepManager.allowBatch(currentStep) && myApprove) {
      delete ins.flow_version;
      delete ins.traces;
      delete ins.flow;
      ins.approve_start_date = myApprove.start_date;
      return _batch_instances.push(ins);
    }
  });
  return _batch_instances;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/categories.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('categories', function (spaceId) {
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.categories.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      space: 1,
      sort_no: 1,
      app: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/cfs_instances.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('cfs_instances', function (instanceIds) {
  check(instanceIds, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceIds) {
    return this.ready();
  }

  return cfs.instances.find({
    'metadata.instance': {
      $in: instanceIds
    },
    $or: [{
      'metadata.is_private': {
        $ne: true
      }
    }, {
      'metadata.is_private': true,
      "metadata.owner": this.userId
    }]
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_positions', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_positions.find({
    space: spaceId
  }, {
    fields: {
      role: 1,
      users: 1,
      org: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions_tabular.coffee                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publishComposite('flow_positions_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flow_positions.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (position) {
        this.unblock();
        return db.flow_roles.find({
          _id: position.role
        }, {
          fields: {
            name: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.organizations.find({
          _id: position.org
        }, {
          fields: {
            fullname: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.space_users.find({
          space: position.space,
          user: {
            $in: position.users
          }
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_roles.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_roles', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_roles.find({
    space: spaceId
  }, {
    fields: {
      name: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flows.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flows', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (db.flows.find({
    space: spaceId
  }).count() === 0) {
    db.spaces.createTemplateFormAndFlow(spaceId);
  }

  return db.flows.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      company_id: 1,
      sort_no: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1
    }
  });
});
Meteor.publish('flow_version', function (spaceId, flowId, versionId) {
  var getFlowVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFlowVersion = function (id, versionId) {
    var flow, flow_version;
    flow = db.flows.findOne({
      _id: id
    });

    if (flow) {
      flow_version = flow.current;
      flow_version.latest = true;

      if (flow_version._id !== versionId) {
        flow_version = flow.historys.findPropertyByPK("_id", versionId);
        flow_version.latest = false;
      }

      return flow_version;
    }
  };

  handle = db.flows.find({
    _id: flowId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("flow_versions", versionId, getFlowVersion(id, versionId));
    }
  });
  self.added("flow_versions", versionId, getFlowVersion(flowId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('distribute_optional_flows', function (flow_ids) {
  if (!this.userId) {
    return this.ready();
  }

  if (!flow_ids) {
    return this.ready();
  }

  return db.flows.find({
    _id: {
      $in: flow_ids
    }
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      distribute_end_notification: 1,
      company_id: 1
    }
  });
});
Meteor.publish('flow', function (spaceId, flowId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  return db.flows.find({
    _id: flowId,
    space: spaceId
  }, {
    fields: {
      print_template: 1,
      instance_template: 1,
      events: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      upload_after_being_distributed: 1,
      distribute_end_notification: 1,
      company_id: 1,
      allow_select_step: 1
    }
  });
});
Meteor.publish('flow_files', function (spaceId, flowId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  return cfs.files.find({
    'metadata.space': spaceId,
    'metadata.object_name': 'flows',
    'metadata.record_id': flowId
  });
});
Meteor.publishComposite('flows_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flows.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (flow) {
        this.unblock();
        return db.space_users.find({
          space: flow.space,
          user: flow.current.modified_by
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.forms.find({
          space: flow.space,
          _id: flow.form
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1,
            category: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.categories.find({
          space: flow.space
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/forms.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('forms', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.forms.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      category: 1,
      state: 1,
      description: 1,
      instance_style: 1
    }
  });
});
Meteor.publish('form_version', function (spaceId, formId, versionId) {
  var getFormVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!formId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFormVersion = function (id, versionId) {
    var form, form_version;
    form = db.forms.findOne({
      _id: id
    });

    if (!form) {
      return {};
    }

    form_version = form.current;
    form_version.latest = true;

    if (form_version._id !== versionId) {
      form_version = form.historys.findPropertyByPK("_id", versionId);
      form_version.latest = false;
    }

    return form_version;
  };

  handle = db.forms.find({
    _id: formId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("form_versions", versionId, getFormVersion(id, versionId));
    }
  });
  self.added("form_versions", versionId, getFormVersion(formId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_data.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_data.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instance_data', function (instanceId, box) {
  var getMiniInstance, getMyapproveModified, handle, instance, instance_fields_0, miniApproveFields, needChange, self, triggerChangeFields, triggerChangeFieldsValues;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;
  miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description', 'auto_submitted'];
  triggerChangeFields = ['form_version', 'flow_version', 'related_instances', '_my_approve_read_dates', 'values'];
  triggerChangeFieldsValues = {};
  instance_fields_0 = {
    "record_synced": 0,
    "traces.approves.handler_organization_name": 0,
    "traces.approves.handler_organization": 0,
    "traces.approves.cost_time": 0,
    "traces.approves.is_error": 0,
    "traces.approves.deadline": 0,
    "traces.approves.remind_date": 0,
    "traces.approves.reminded_count": 0,
    "traces.approves.modified_by": 0,
    "traces.approves.modified": 0,
    "traces.approves.geolocation": 0,
    "traces.approves.cc_users": 0,
    "traces.approves.from_approve_id": 0,
    "traces.approves.values_history": 0
  };

  getMyapproveModified = function (traces) {
    var myApproveModifieds;
    myApproveModifieds = new Array();

    if (traces != null) {
      traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.user === self.userId || approve.handler === self.userId) {
            return myApproveModifieds.push(approve.read_date);
          }
        }) : void 0 : void 0;
      });
    }

    return myApproveModifieds;
  };

  getMiniInstance = function (_instanceId) {
    var instance, ref, ref1, show_modal_traces_list, traces;
    instance = db.instances.findOne({
      _id: _instanceId
    }, {
      fields: instance_fields_0
    });

    if (instance) {
      triggerChangeFields.forEach(function (key) {
        if (key === '_my_approve_read_dates') {
          return triggerChangeFieldsValues[key] = getMyapproveModified(instance.traces);
        } else {
          return triggerChangeFieldsValues[key] = instance[key];
        }
      });
      show_modal_traces_list = ((ref = db.space_settings.findOne({
        space: instance.space,
        key: "show_modal_traces_list"
      }, {
        fields: {
          values: 1
        }
      })) != null ? ref.values : void 0) || false;

      if (show_modal_traces_list) {
        traces = new Array();

        if (instance != null) {
          if ((ref1 = instance.traces) != null) {
            ref1.forEach(function (trace) {
              var _trace, approves, ref2;

              _trace = _.clone(trace);
              approves = new Array();

              if (trace != null) {
                if ((ref2 = trace.approves) != null) {
                  ref2.forEach(function (approve) {
                    if (approve.type !== 'cc' || approve.user === self.userId || approve.handler === self.userId || !_.isEmpty(approve.sign_field_code)) {
                      return approves.push(approve);
                    }
                  });
                }
              }

              _trace.approves = approves;
              return traces.push(_trace);
            });
          }
        }

        instance.traces = traces;
      }
    }

    return instance;
  };

  needChange = function (changeFields) {
    var _change, _rev;

    if (changeFields) {
      _change = false;
      _rev = _.find(triggerChangeFields, function (key) {
        var _key, _my_approve_modifieds;

        _key = key;

        if (key === '_my_approve_read_dates') {
          _key = 'traces';
        }

        if (_.has(changeFields, _key)) {
          if (key === '_my_approve_read_dates') {
            _my_approve_modifieds = getMyapproveModified(changeFields.traces);
            return !_.isEqual(triggerChangeFieldsValues[key], _my_approve_modifieds);
          } else {
            return !_.isEqual(triggerChangeFieldsValues[key], changeFields[key]);
          }
        }
      });

      if (_rev) {
        _change = true;
      }

      return _change;
    }

    return true;
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id, fields) {
      if (box !== 'inbox' || needChange(fields)) {
        return self.changed("instances", id, getMiniInstance(id));
      }
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  instance = getMiniInstance(instanceId);
  self.added("instances", instance != null ? instance._id : void 0, instance);
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('instance_traces', function (instanceId) {
  var getInstanceTraces, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;

  getInstanceTraces = function (_insId) {
    return db.instances.findOne({
      _id: _insId
    }, {
      fields: {
        _id: 1,
        traces: 1
      }
    });
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id) {
      return self.changed("instance_traces", instanceId, getInstanceTraces(instanceId));
    }
  });
  self.added("instance_traces", instanceId, getInstanceTraces(instanceId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_list.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_list.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_list', function (spaceId, box, flowId) {
  var query;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  query = {
    space: spaceId
  };

  if (box === "inbox") {
    query.inbox_users = this.userId;
  } else if (box === "outbox") {
    query.outbox_users = this.userId;
  } else if (box === "draft") {
    query.submitter = this.userId;
    query.state = "draft";
  } else if (box === "pending") {
    query.submitter = this.userId;
    query.state = "pending";
  } else if (box === "completed") {
    query.submitter = this.userId;
    query.state = "completed";
  } else if (box === "monitor") {
    query.flow = flowId;
    query.state = {
      $in: ["pending", "completed"]
    };
  } else {
    query.state = "none";
  }

  return db.instances.find(query, {
    fields: {
      name: 1,
      created: 1,
      form: 1,
      flow: 1,
      space: 1,
      modified: 1,
      applicant: 1,
      is_archived: 1,
      form_version: 1,
      flow_version: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_tabular.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var asyncLastFinishedApprove, lastFinishedApproveAggregate;

lastFinishedApproveAggregate = function (instanceid, userId, dataMap, callback) {
  var operation;
  operation = [{
    "$match": {
      "_id": instanceid
    }
  }, {
    "$project": {
      "name": 1,
      "_approve": "$traces.approves"
    }
  }, {
    "$unwind": "$_approve"
  }, {
    "$unwind": "$_approve"
  }, {
    "$match": {
      "_approve.is_finished": true,
      $or: [{
        "_approve.handler": userId
      }, {
        "_approve.user": userId
      }]
    }
  }, {
    "$group": {
      "_id": "$_id",
      "finish_date": {
        "$last": "$_approve.finish_date"
      }
    }
  }];
  return db.instances.rawCollection().aggregate(operation).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return dataMap.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

asyncLastFinishedApprove = Meteor.wrapAsync(lastFinishedApproveAggregate);
Meteor.publish("instance_tabular", function (tableName, ids, fields) {
  var getMyApprove, getMyLastFinishedApprove, getStepCurrentName, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));
  fields.cc_users = 1;
  self = this;

  getMyLastFinishedApprove = function (userId, instanceId) {
    var data;
    data = [];
    asyncLastFinishedApprove(instanceId, userId, data);

    if (data.length > 0) {
      return data[0];
    }
  };

  getMyApprove = function (userId, instanceId) {
    var approve, approves, instance, is_read, myApprove, notFinishedTraces;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        traces: 1
      }
    });
    myApprove = null;

    if (!instance) {
      return;
    }

    if (!instance.traces || instance.traces.length < 1) {
      return;
    }

    notFinishedTraces = instance.traces.filterProperty("is_finished", false);

    if (notFinishedTraces.length > 0) {
      approves = notFinishedTraces[0].approves.filterProperty("is_finished", false).filterProperty("handler", userId);

      if (approves.length > 0) {
        approve = approves[0];
        myApprove = {
          id: approve._id,
          instance: approve.instance,
          trace: approve.trace,
          is_read: approve.is_read,
          start_date: approve.start_date,
          agent: approve.agent,
          user_name: approve.user_name
        };
      }
    }

    if (!myApprove) {
      is_read = false;
      instance.traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.type === 'cc' && approve.user === userId && approve.is_finished === false) {
            if (approve.is_read) {
              is_read = true;
            }

            return myApprove = {
              id: approve._id,
              is_read: is_read,
              start_date: approve.start_date,
              agent: approve.agent,
              user_name: approve.user_name
            };
          }
        }) : void 0 : void 0;
      });
    }

    return myApprove;
  };

  getStepCurrentName = function (instanceId) {
    var instance, ref, ref1, stepCurrentName;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        "traces.name": 1,
        "traces": {
          $slice: -1
        }
      }
    });

    if (instance) {
      stepCurrentName = (ref = instance.traces) != null ? (ref1 = ref[0]) != null ? ref1.name : void 0 : void 0;
    }

    return stepCurrentName;
  };

  handle = db.instances.find({
    _id: {
      $in: ids
    }
  }, {
    fields: {
      traces: 0
    }
  }).observeChanges({
    changed: function (id) {
      var error, instance, myApprove, myLastFinishedApprove, ref, ref1;
      instance = db.instances.findOne({
        _id: id
      }, {
        fields: fields
      });

      if (!instance) {
        return;
      }

      myApprove = getMyApprove(self.userId, id);
      myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

      if (myApprove) {
        instance.is_read = myApprove.is_read;
        instance.start_date = myApprove.start_date;

        if (myApprove.agent) {
          instance.agent_user_name = myApprove.user_name;
        }
      } else {
        instance.is_read = true;
      }

      if (myLastFinishedApprove) {
        instance.my_finish_date = myLastFinishedApprove.finish_date;
      }

      instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
      instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
      delete instance.cc_users;

      try {
        return self.changed("instances", id, instance);
      } catch (error1) {
        error = error1;
        console.log('instance observeChanges error: ', error.message);
        console.log('self.userId: ', self.userId);
        console.log('tableName: ', tableName);
        console.log('ids: ', JSON.stringify(ids));
        return console.log('myApprove: ', JSON.stringify(myApprove));
      }
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  ids.forEach(function (id) {
    var instance, myApprove, myLastFinishedApprove, ref, ref1;
    instance = db.instances.findOne({
      _id: id
    }, {
      fields: fields
    });

    if (!instance) {
      return;
    }

    myApprove = getMyApprove(self.userId, id);
    myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

    if (myApprove) {
      instance.is_read = myApprove.is_read;
      instance.start_date = myApprove.start_date;

      if (myApprove.agent) {
        instance.agent_user_name = myApprove.user_name;
      }
    } else {
      instance.is_read = true;
    }

    if (myLastFinishedApprove) {
      instance.my_finish_date = myLastFinishedApprove.finish_date;
    }

    instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
    instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
    delete instance.cc_users;
    return self.added("instances", id, instance);
  });
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_draft.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_draft', function (spaceId) {
  var userId;
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  userId = this.userId;
  return db.instances.find({
    state: "draft",
    space: spaceId,
    submitter: userId,
    $or: [{
      inbox_users: {
        $exists: false
      }
    }, {
      inbox_users: []
    }]
  }, {
    fields: {
      _id: 1,
      state: 1,
      space: 1,
      submitter: 1,
      inbox_users: 1,
      modified: 1,
      name: 1
    },
    sort: {
      modified: -1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distributed_instances_state_by_ids.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/distributed_instances_state_by_ids.coffee                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('distributed_instances_state_by_ids', function (instance_ids) {
  var handle, self;
  check(instance_ids, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instance_ids) {
    return this.ready();
  }

  if (_.isEmpty(instance_ids)) {
    return this.ready();
  }

  self = this;
  handle = db.instances.find({
    _id: {
      $in: instance_ids
    }
  }, {
    fields: {
      state: 1,
      traces: {
        $slice: 1
      }
    }
  }).observeChanges({
    added: function (id, fields) {
      return self.added('instances', id, {
        state: fields.state,
        is_read: fields.traces[0].approves[0].is_read
      });
    },
    changed: function (id, fields) {
      if (fields.state) {
        self.changed('instances', id, {
          state: fields.state
        });
      }

      if (fields.traces) {
        return self.changed('instances', id, {
          is_read: fields.traces[0].approves[0].is_read
        });
      }
    }
  });
  this.ready();
  return this.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/related_instaces.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('related_instaces', function (instanceId, related_instances) {
  var ref, related_instance_ids;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  related_instance_ids = (ref = db.instances.findOne(instanceId, {
    fields: {
      related_instances: 1
    }
  })) != null ? ref.related_instances : void 0;

  if (related_instance_ids && _.isArray(related_instance_ids)) {
    return db.instances.find({
      _id: {
        $in: related_instance_ids
      }
    }, {
      fields: {
        _id: 1,
        name: 1,
        space: 1
      }
    });
  } else {
    return this.ready();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/space_user_signs.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isServer) {
  Meteor.publish('space_user_signs', function (spaceId) {
    check(spaceId, String);

    if (!this.userId) {
      return this.ready();
    }

    return db.space_user_signs.find({
      space: spaceId
    }, {
      fields: {
        created_by: 0,
        created: 0,
        modified_by: 0
      }
    });
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user_inbox_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/user_inbox_instance.coffee                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Meteor.publishComposite "user_inbox_instance", ()->
	unless this.userId
		return this.ready()

	userSpaceIds = db.space_users.find({
		user: this.userId,
		user_accepted: true
	}, {fields: {space: 1}}).fetch().getEach("space");
	query = {space: {$in: userSpaceIds}}

	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]

	find: ->
		db.instances.find(query, {
			fields: {
				space: 1,
				applicant_name: 1,
				flow: 1,
				inbox_users: 1,
				cc_users: 1,
				state: 1,
				name: 1,
				modified: 1,
				form: 1
			}, sort: {modified: -1}, skip: 0, limit: 200
		});
	children: [
		{
			find: (instance, post)->
				db.flows.find({_id: instance.flow}, {fields: {name: 1, space: 1}});
		}
	]
 */ /*
    Meteor.publish 'my_inbox_instances', (spaceId)->
    	unless this.userId
    		return this.ready()
    
    	self = this;
    
    	 *	userSpaceIds = db.space_users.find({
    	 *		user: this.userId,
    	 *		user_accepted: true
    	 *	}, {fields: {space: 1}}).fetch().getEach("space");
    
    	query = {space: spaceId}
    
    	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]
    
    	fields = {
    		space: 1,
     *		applicant_name: 1,
    		flow: 1,
    		inbox_users: 1,
    		cc_users: 1,
    		state: 1,
     *		name: 1,
     *		modified: 1,
    		form: 1
    	}
    
    	handle = db.instances.find(query, {sort: {modified: -1}, skip: 0, limit: 500}).observeChanges {
    		added: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.added("instances", id, instance)
    		changed: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.changed("instances", id, instance);
    		removed: (id)->
    			self.removed("instances", id);
    	}
    
    	self.ready();
    	self.onStop ()->
    		handle.stop()
     */var _async_get_flow_instances_aggregate, _get_flow_instances_aggregate;

_get_flow_instances_aggregate = function (spaceId, userId, _items, callback) {
  return db.instances.rawCollection().aggregate([{
    $match: {
      space: spaceId,
      $or: [{
        inbox_users: userId
      }, {
        cc_users: userId
      }]
    }
  }, {
    $group: {
      _id: {
        flow: "$flow",
        category: "$category"
      },
      count: {
        $sum: 1
      }
    }
  }]).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return _items.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

_async_get_flow_instances_aggregate = Meteor.wrapAsync(_get_flow_instances_aggregate);
Meteor.publish('my_inbox_flow_instances_count', function (spaceId) {
  var _changeData, _flowsData, _init, data, handle, query, self;

  if (!this.userId) {
    return this.ready();
  }

  self = this;
  query = {
    space: spaceId
  };
  query.$or = [{
    inbox_users: this.userId
  }, {
    cc_users: this.userId
  }];
  data = [];

  _async_get_flow_instances_aggregate(spaceId, self.userId, data);

  _flowsData = [];

  _.each(data, function (dataItem) {
    return _flowsData.push({
      _id: dataItem._id.flow,
      category: dataItem._id.category,
      count: dataItem.count
    });
  });

  self.added("flow_instances", spaceId, {
    flows: _flowsData
  });

  _changeData = function (doc, action) {
    var flow_instance;
    flow_instance = _.find(_flowsData, function (f) {
      return f._id === doc.flow;
    });

    if (flow_instance) {
      if (action === "added") {
        flow_instance.count++;
      } else if (action === "removed") {
        flow_instance.count--;
      }
    } else if (action === "added") {
      _flowsData.push({
        _id: doc.flow,
        category: doc.category,
        count: 1
      });
    }

    return self.changed("flow_instances", spaceId, {
      flows: _flowsData
    });
  };

  _init = true;
  handle = db.instances.find(query, {
    fields: {
      _id: 1,
      inbox_users: 1,
      cc_users: 1,
      flow: 1,
      category: 1
    }
  }).observe({
    added: function (doc) {
      if (!_init) {
        return _changeData(doc, "added");
      }
    },
    removed: function (doc) {
      if (!_init) {
        return _changeData(doc, "removed");
      }
    }
  });
  _init = false;
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_main_attach_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_main_attach_template.coffee                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_main_attach_template', function (spaceId, flowId) {
  check(spaceId, String);
  check(flowId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!(spaceId && flowId)) {
    return this.ready();
  }

  return Creator.getCollection('cms_files').find({
    space: spaceId,
    'parent.o': 'flows',
    'parent.ids': flowId,
    name: '正文.docx'
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"flow-template":{"workflow_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/flow-template/workflow_template.coffee                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
workflowTemplate = {};
workflowTemplate["en"] = [];
workflowTemplate["zh-CN"] = [];
Meteor.startup(function () {
  var absolute_path_cn, absolute_path_us, filesList_cn, filesList_us, fs, mime, path, path_cn, path_us, readFileList, ref, ref1;
  fs = require('fs');
  path = require('path');
  mime = require('mime');

  readFileList = function (pathDir, filesList) {
    var files;
    files = fs.readdirSync(pathDir);
    return files.forEach(function (name, index) {
      var obj, stat;
      stat = fs.statSync(path.join(pathDir, name));

      if (stat.isDirectory()) {
        return readFileList(path.join(pathDir, name), filesList);
      } else {
        obj = {};
        obj.path = pathDir;
        obj.name = name;
        return filesList.push(obj);
      }
    });
  };

  filesList_cn = [];
  path_cn = (ref = Meteor.settings.workflowTemplates) != null ? ref.path_cn : void 0;

  if (path_cn) {
    absolute_path_cn = path.resolve(path_cn);
    console.log("absolute_path_cn", absolute_path_cn);

    if (fs.existsSync(absolute_path_cn)) {
      readFileList(absolute_path_cn, filesList_cn);
      filesList_cn.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["zh-CN"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取zh-cn文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }

  filesList_us = [];
  path_us = (ref1 = Meteor.settings.workflowTemplates) != null ? ref1.path_us : void 0;

  if (path_us) {
    absolute_path_us = path.resolve(path_us);
    console.log("absolute_path_us", absolute_path_us);

    if (fs.existsSync(absolute_path_us)) {
      readFileList(absolute_path_us, filesList_us);
      return filesList_us.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["en"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取en-us文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/startup.coffee                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"schedule":{"auto_finish_process_delegation.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/auto_finish_process_delegation.coffee                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.auto_finish_process_delegation : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.auto_finish_process_delegation;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e, now;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('auto_finish_process_delegation');
        now = new Date();
        db.process_delegation_rules.update({
          enabled: true,
          end_time: {
            $lte: now
          }
        }, {
          $set: {
            enabled: false
          }
        }, {
          multi: true
        });
        console.timeEnd('auto_finish_process_delegation');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO AUTO_FINISH_PROCESS_DELEGATION ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function (e) {
      console.log('Failed to bind environment: auto_finish_process_delegation.coffee');
      return console.log(e.stack);
    }));
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"timeout_auto_submit.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/timeout_auto_submit.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.timeout_auto_submit : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.timeout_auto_submit;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('timeout_auto_submit');
        uuflowManager.timeoutAutoSubmit();
        console.timeEnd('timeout_auto_submit');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO TIMEOUT_AUTO_SUBMIT ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function (e) {
      console.log('Failed to bind environment: timeout_auto_submit.coffee');
      return console.log(e.stack);
    }));
  }
});
Meteor.methods({
  timeout_auto_submit: function (ins_id) {
    uuflowManager.timeoutAutoSubmit(ins_id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"related_instances_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/related_instances_tabular.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return TabularTables.related_instances_tabular = new Tabular.Table({
    name: "related_instances_tabular",
    collection: db.instances,
    columns: [{
      data: "_id",
      title: '<input type="checkbox" name="reverse" id="reverse">',
      orderable: false,
      width: '1px',
      render: function (val, type, doc) {
        var input, ref;
        input = '<input type="checkbox" class="related-instances-list-checkbox" name="related_instances_ids" id="related_instances_ids" value="' + doc._id + '"';

        if ((ref = TabularTables.related_instances_tabular.related_instances) != null ? ref.includes(doc._id) : void 0) {
          input += " checked ";
        }

        input += ">";
        return input;
      }
    }, {
      data: "name",
      orderable: false,
      width: '45%',
      render: function (val, type, doc) {
        var absolute, href;
        href = '';

        if (Meteor.isClient && (Steedos.isMobile() || Steedos.isCordova())) {
          href = '';
        }

        absolute = false;

        if (Meteor.isServer) {
          absolute = this.absolute;
        }

        if (absolute) {
          href = Meteor.absoluteUrl("workflow/space/" + doc.space + "/view/readonly/" + doc._id + '?hide_traces=0');
        } else {
          href = Steedos.absoluteUrl("workflow/space/" + doc.space + "/view/readonly/" + doc._id + '?hide_traces=0');
        }

        return "<a data-id='" + doc._id + "' target='_blank' href='" + href + "'>" + doc.name + "</a>";
      }
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      orderable: false
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_flow"),
      render: function (val, type, doc) {
        var judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + "</div>";
      }
    }],
    dom: "tp",
    lengthChange: false,
    extraFields: ["state", "final_decision", "space", "keywords"],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var curSpaceUser, flow_ids, flows, organizations, ref, ref1, space, spaceId;

      if (!userId) {
        return {
          _id: -1
        };
      }

      spaceId = selector.space;

      if (!spaceId) {
        if ((selector != null ? (ref = selector.$and) != null ? ref.length : void 0 : void 0) > 0) {
          spaceId = selector.$and.getProperty('space')[0];
        }
      }

      if (!spaceId) {
        return {
          _id: -1
        };
      }

      space = db.spaces.findOne(spaceId);

      if (!space) {
        selector.state = "none";
      }

      if (!space.admins.includes(userId)) {
        flow_ids = [];
        curSpaceUser = db.space_users.findOne({
          space: spaceId,
          'user': userId
        });

        if (curSpaceUser) {
          organizations = db.organizations.find({
            _id: {
              $in: curSpaceUser.organizations
            }
          }).fetch();
          flows = db.flows.find({
            space: spaceId
          });
          flows.forEach(function (fl) {
            if (WorkflowManager.canMonitor(fl, curSpaceUser, organizations) || WorkflowManager.canAdmin(fl, curSpaceUser, organizations)) {
              return flow_ids.push(fl._id);
            }
          });
        }

        if ((selector != null ? (ref1 = selector.$and) != null ? ref1.length : void 0 : void 0) > 0) {
          selector.$and[0].$or = [{
            submitter: userId
          }, {
            applicant: userId
          }, {
            inbox_users: userId
          }, {
            outbox_users: userId
          }, {
            cc_users: userId
          }, {
            flow: {
              $in: flow_ids
            }
          }];
        } else {
          _.extend(selector, {
            $or: [{
              submitter: userId
            }, {
              applicant: userId
            }, {
              inbox_users: userId
            }, {
              outbox_users: userId
            }, {
              cc_users: userId
            }, {
              flow: {
                $in: flow_ids
              }
            }]
          });
        }
      }

      return selector;
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/tabular.coffee                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var GetBoxInstancesTabularOptions, _get_inbox_instances_tabular_options, _get_outbox_instances_tabular_options, _handleListFields, instancesListTableTabular, newInstancesListTabular, updateTabularTitle;

Steedos.subs["InstanceTabular"] = new SubsManager();

_handleListFields = function (fields) {
  var ins_fields;
  ins_fields = new Array();

  if (fields != null) {
    fields.forEach(function (f) {
      var ref;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
          return ins_fields.push(f1);
        }) : void 0 : void 0;
      } else {
        return ins_fields.push(f);
      }
    });
  }

  return ins_fields;
};

updateTabularTitle = function () {};

instancesListTableTabular = function (flowId, fields) {
  var ins_fields, key, options;
  options = {
    name: "instances",
    collection: db.instances,
    pub: "instance_tabular",
    onUnload: function () {
      return Meteor.setTimeout(Template.instance_list._tableColumns, 150);
    },
    drawCallback: function (settings) {
      var ellipsisLink, emptyTd, title;
      emptyTd = $(".dataTables_empty");

      if (emptyTd.length) {
        emptyTd[0].colSpan = "6";
      }

      if (!Steedos.isMobile() && !Steedos.isPad()) {
        Meteor.setTimeout(Template.instance_list._tableColumns, 150);
        $(".instance-list").scrollTop(0).ready(function () {
          return $(".instance-list").perfectScrollbar("update");
        });
      } else {
        $(".instance-list").scrollTop(0);
      }

      title = t("pager_input_hint");
      ellipsisLink = settings.oInstance.parent().find('.paging_numbers .pagination .disabled a');
      return ellipsisLink.attr("title", title).css("cursor", "pointer").click(function () {
        var goPage, input;

        if (!$(this).find('input').length) {
          input = $('<input class="paginate_input form-control input-sm" type="text" style="border: none; padding:0 2px;"/>');

          if (Steedos.isMobile()) {
            input.css({
              width: "52px",
              height: "20px"
            });
          } else {
            input.css({
              width: "52px",
              height: "16px"
            });
          }

          input.attr("title", title).attr("placeholder", title);
          $(this).empty().append(input);

          goPage = function (index) {
            var pages;

            if (index > 0) {
              pages = Math.ceil(settings.fnRecordsDisplay() / settings._iDisplayLength);

              if (index > pages) {
                index = pages;
              }

              index--;
              return settings.oInstance.DataTable().page(index).draw('page');
            }
          };

          input.blur(function (e) {
            var currentPage;
            currentPage = $(this).val();
            goPage(currentPage);
            return $(this).parent().html('...');
          });
          return input.keydown(function (e) {
            var currentPage;

            if (e.keyCode.toString() === "13") {
              currentPage = $(this).val();
              return goPage(currentPage);
            }
          });
        }
      });
    },
    createdRow: function (row, data, dataIndex) {
      if (Meteor.isClient) {
        if (data._id === FlowRouter.current().params.instanceId) {
          return row.setAttribute("class", "selected");
        }
      }
    },
    columns: [{
      data: "_id",
      orderable: false,
      render: function (val, type, doc) {
        var agent_view, cc_view, flow_name, instanceNamePriorityClass, isFavoriteSelected, modified, modifiedFromNow, modifiedString, priorityIcon, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        modifiedString = moment(doc.modified).format('YYYY-MM-DD');
        modified = doc.modified;

        if (Session.get("box") === 'inbox' && doc.state !== 'draft') {
          modified = doc.start_date || doc.modified;
        }

        if (Session.get("box") === 'outbox' || Session.get("box") === 'monitor') {
          modified = doc.submit_date || doc.submit_date;
        }

        modifiedFromNow = Steedos.momentReactiveFromNow(modified);
        flow_name = doc.flow_name;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
          step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
        } else {
          if (Session.get("box") !== 'draft' && doc.current_step_name) {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
          } else {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "</div>";
          }
        }

        agent_view = "";

        if (doc.agent_user_name && Session.get("box") === 'inbox') {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';
        isFavoriteSelected = Favorites.isRecordSelected("instances", doc._id);

        if (Favorites.isRecordSelected("instances", doc._id)) {
          unread = '<i class="ion ion-ios-star-outline instance-favorite-selected"></i>';
        } else if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIcon = "";
        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "\n	<span>" + doc.applicant_name + "</span>\n</div>\n<div class='instance-detail'>" + step_current_name_view + "\n	<span class='instance-modified' title='" + modifiedString + "'>" + modifiedFromNow + "</span>\n</div>";
      }
    }, {
      data: "applicant_organization_name",
      title: t("instances_applicant_organization_name"),
      visible: false
    }, {
      data: "name",
      title: t("instances_name"),
      render: function (val, type, doc) {
        var agent_view, cc_view, instanceNamePriorityClass, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
        }

        agent_view = "";

        if (doc.agent_user_name) {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';

        if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      visible: false,
      orderable: false
    }, {
      data: "submit_date",
      title: t("instances_submit_date"),
      render: function (val, type, doc) {
        if (doc.submit_date) {
          return moment(doc.submit_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      visible: false,
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_step_current_name"),
      render: function (val, type, doc) {
        var cc_tag, judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        cc_tag = '';

        if (doc.cc_count > 0) {
          cc_tag = TAPi18n.__('cc_tag');
        }

        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + cc_tag + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "modified",
      title: t("instances_modified"),
      render: function (val, type, doc) {
        return moment(doc.modified).format('YYYY-MM-DD HH:mm');
      },
      visible: false,
      orderable: true
    }, {
      data: "start_date",
      title: t("instances_start_date"),
      render: function (val, type, doc) {
        if (doc.start_date) {
          return moment(doc.start_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "my_finish_date",
      render: function (val, type, doc) {
        if (doc.my_finish_date) {
          return moment(doc.my_finish_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "modified",
      visible: false
    }, {
      data: "keywords",
      visible: false
    }, {
      data: "is_archived",
      render: function (val, type, doc) {
        var ref;

        if ((doc != null ? (ref = doc.values) != null ? ref.record_need : void 0 : void 0) && doc.values.record_need === "true") {
          if (doc != null ? doc.is_archived : void 0) {
            return t("YES");
          }

          return t("NO");
        }
      },
      visible: false,
      orderable: false
    }],
    dom: function () {
      if (Steedos.isMobile()) {
        return 'tp';
      } else {
        return 'tpl';
      }
    }(),
    order: [[4, "desc"]],
    extraFields: ["form", "flow", "inbox_users", "state", "space", "applicant", "form_version", "flow_version", "is_cc", "cc_count", "is_read", "current_step_name", "values", "keywords", "final_decision", "flow_name", "is_hidden", "agent_user_name"],
    lengthChange: true,
    lengthMenu: [10, 15, 20, 25, 50, 100],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var ref, space, space_user;

      if (!userId) {
        return {
          _id: -1
        };
      }

      space = selector.space;

      if (!space) {
        if ((selector != null ? (ref = selector.$and) != null ? ref.length : void 0 : void 0) > 0) {
          space = selector.$and.getProperty('space')[0];
        }
      }

      if (!space) {
        return {
          _id: -1
        };
      }

      space_user = db.space_users.findOne({
        user: userId,
        space: space
      }, {
        fields: {
          _id: 1
        }
      });

      if (!space_user) {
        return {
          _id: -1
        };
      }

      return selector;
    },
    pagingType: "numbers"
  };

  if (flowId) {
    key = "instanceFlow" + flowId;
    options.name = key;
    TabularTables.instances.fields = fields;
    ins_fields = _handleListFields(TabularTables.instances.fields);
    ins_fields.forEach(function (f) {
      if (f.type !== 'table' && f.is_list_display) {
        return options.columns.push({
          data: f.name || f.code,
          title: t(f.name || f.code),
          visible: false,
          orderable: false,
          render: function (val, type, doc) {
            var value, values;
            values = doc.values || {};
            value = values[f.code];

            switch (f.type) {
              case 'user':
                value = value != null ? value.name : void 0;
                break;

              case 'group':
                value = value != null ? value.fullname : void 0;
                break;

              case 'date':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD');
                }

                break;

              case 'dateTime':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD HH:mm');
                }

                break;

              case 'checkbox':
                if (value === true || value === 'true') {
                  value = TAPi18n.__("form_field_checkbox_yes");
                } else {
                  value = TAPi18n.__("form_field_checkbox_no");
                }

                break;

              case 'odata':
                if (value) {
                  if (_.isArray(value)) {
                    value = _.pluck(value, '@label').toString();
                  } else {
                    value = value['@label'];
                  }
                }

            }

            return value;
          }
        });
      }
    });
  }

  return options;
};

Meteor.startup(function () {
  return TabularTables.instances = new Tabular.Table(instancesListTableTabular());
});

GetBoxInstancesTabularOptions = function (box, flowId, fields) {
  var key, options;
  key = "instanceFlow" + box + flowId;

  if (box === "inbox") {
    options = _get_inbox_instances_tabular_options(flowId, fields);
  } else if (box === "outbox") {
    options = _get_outbox_instances_tabular_options(flowId, fields);
  } else {
    options = instancesListTableTabular(flowId, fields);

    if (!flowId) {
      options.name = "inbox_instances";
    }
  }

  if (flowId) {
    options.name = key;
  }

  return options;
};

_get_inbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "inbox_instances";
  }

  options.order = [[8, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': false,
        '_approve.handler': userId
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'start_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_start_date": {
              $first: "$_approve.start_date"
            }
          }
        });
        ag_sort = {
          'approve_start_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.inbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("inbox"));
});

_get_outbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "outbox_instances";
  }

  options.order = [[9, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': true,
        $or: [{
          '_approve.handler': userId
        }, {
          '_approve.user': userId
        }]
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'my_finish_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_finish_date": {
              $last: "$_approve.finish_date"
            }
          }
        });
        ag_sort = {
          'approve_finish_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.outbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("outbox"));
});

if (Meteor.isClient) {
  TabularTables.flowInstances = new ReactiveVar();
}

Meteor.startup(function () {
  return Tracker.autorun(function (c) {
    if (Meteor.isClient && !Steedos.isMobile()) {
      if (Session.get("flowId") && Session.get("box") !== 'draft') {
        return Meteor.call("newInstancesListTabular", Session.get("box"), Session.get("flowId"), function (error, result) {
          newInstancesListTabular(Session.get("box"), Session.get("flowId"), result);
          return Template.instance_list._changeOrder();
        });
      }
    }
  });
});

newInstancesListTabular = function (box, flowId, fields) {
  var flow, key, ref, ref1, ref2;

  if (!fields) {
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        form: 1
      }
    });
    fields = (ref = db.forms.findOne({
      _id: flow != null ? flow.form : void 0
    }, {
      fields: {
        'current.fields': 1
      }
    })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
  }

  fields = _handleListFields(fields);

  if ((fields != null ? (ref2 = fields.filterProperty("is_list_display", true)) != null ? ref2.length : void 0 : void 0) > 0) {
    key = "instanceFlow" + box + flowId;

    if (Meteor.isClient) {
      TabularTables.flowInstances.set(new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields)));
    } else {
      new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields));
    }

    return console.log("new TabularTables ", key);
  }
};

if (Meteor.isServer) {
  Meteor.methods({
    newInstancesListTabular: function (box, flowId) {
      var fields, flow, ref, ref1;
      newInstancesListTabular(box, flowId);
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          form: 1
        }
      });
      fields = (ref = db.forms.findOne({
        _id: flow != null ? flow.form : void 0
      }, {
        fields: {
          'current.fields': 1
        }
      })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
      return fields;
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".coffee"
  ]
});

require("/node_modules/meteor/steedos:workflow/checkNpm.js");
require("/node_modules/meteor/steedos:workflow/lib/URI.js");
require("/node_modules/meteor/steedos:workflow/lib/collection_helpers.js");
require("/node_modules/meteor/steedos:workflow/lib/tapi18n.coffee");
require("/node_modules/meteor/steedos:workflow/lib/core.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/forms.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flows.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/categories.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/spaces.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/deleted_instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/auth_tokens.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/webhooks.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_users.coffee");
require("/node_modules/meteor/steedos:workflow/lib/cfs/instances.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/instance_readonly_template.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/template_manager.coffee");
require("/node_modules/meteor/steedos:workflow/client/coreform/inputTypes/coreform-table/steedos-table.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_image_sign.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_traces_handler.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_form.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_attachments.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_sign_text.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_traces_help.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_related_records.coffee");
require("/node_modules/meteor/steedos:workflow/routes/designer.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/set_instance_step_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/get_instance_data.js");
require("/node_modules/meteor/steedos:workflow/server/methods/save_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/trace_approve_cc.js");
require("/node_modules/meteor/steedos:workflow/server/methods/forward_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/cfs_instances.js");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_return.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_remind.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/next_step_users_not_found.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_number_rules.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/check_main_attach.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/edit_flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/start_flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_traces.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_batch.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/distribute.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/hide_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_value.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/steedos_css.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance_draft_view.coffee");
require("/node_modules/meteor/steedos:workflow/routes/nextStepUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getSpaceUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getFormulaUserObjects.js");
require("/node_modules/meteor/steedos:workflow/routes/init_formula_values.js");
require("/node_modules/meteor/steedos:workflow/routes/getNameForUser.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_designer_startup.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_engine.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_remove.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_terminate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_reassign.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_relocate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_archive.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_export.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_space_changeset.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_retrieve.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward.js");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_instance.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_pending.coffee");
require("/node_modules/meteor/steedos:workflow/routes/export_table_template.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_save.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get_by_stepname.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_cfs.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_table_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_sub_table_sort.coffee");
require("/node_modules/meteor/steedos:workflow/routes/test_webhook.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/1_form_formula.js");
require("/node_modules/meteor/steedos:workflow/server/lib/get_handlers_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/permission_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/approve_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/flow_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/form_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/step_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/categories.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/cfs_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flows.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/forms.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_data.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_list.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_draft.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/distributed_instances_state_by_ids.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/related_instaces.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/user_inbox_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_main_attach_template.coffee");
require("/node_modules/meteor/steedos:workflow/lib/admin.coffee");
require("/node_modules/meteor/steedos:workflow/related_instances_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/tabular.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_users.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_organizations.coffee");
require("/node_modules/meteor/steedos:workflow/server/flow-template/workflow_template.coffee");
require("/node_modules/meteor/steedos:workflow/server/startup.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/instance_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/auto_finish_process_delegation.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/timeout_auto_submit.coffee");

/* Exports */
Package._define("steedos:workflow", {
  InstanceManager: InstanceManager,
  WorkflowManager_format: WorkflowManager_format,
  Workflow: Workflow,
  SteedosTable: SteedosTable,
  InstanceReadOnlyTemplate: InstanceReadOnlyTemplate,
  TemplateManager: TemplateManager,
  CoreForm: CoreForm,
  InstanceNumberRules: InstanceNumberRules,
  getHandlersManager: getHandlersManager,
  permissionManager: permissionManager,
  workflowTemplate: workflowTemplate,
  approveManager: approveManager,
  stepManager: stepManager,
  flowManager: flowManager,
  formManager: formManager
});

})();

//# sourceURL=meteor://💻app/packages/steedos_workflow.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jaGVja05wbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9saWIvVVJJLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2xpYi9jb3JlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvbGliL2NvcmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2xpYi9tb2RlbHMvYXV0aF90b2tlbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC9saWIvaW5zdGFuY2VfcmVhZG9ubHlfdGVtcGxhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvbGliL2luc3RhbmNlX3JlYWRvbmx5X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvbGliL3RlbXBsYXRlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvbGliL3RlbXBsYXRlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L2NsaWVudC9jb3JlZm9ybS9pbnB1dFR5cGVzL2NvcmVmb3JtLXRhYmxlL3N0ZWVkb3MtdGFibGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbWFnZV9zaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbWFnZV9zaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3RyYWNlc19oYW5kbGVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL190cmFjZXNfaGFuZGxlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX2luc3RhbmNlX2F0dGFjaG1lbnRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9faW5zdGFuY2Vfc2lnbl90ZXh0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9zaWduX3RleHQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9fdHJhY2VzX2hlbHAuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3RyYWNlc19oZWxwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3JlbGF0ZWRfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19yZWxhdGVkX3JlY29yZHMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3JlbGF0ZWRfcmVjb3Jkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2Rlc2lnbmVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2Rlc2lnbmVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvbmV4dFN0ZXBVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvZ2V0U3BhY2VVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvZ2V0Rm9ybXVsYVVzZXJPYmplY3RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3JvdXRlcy9pbml0X2Zvcm11bGFfdmFsdWVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9nZXROYW1lRm9yVXNlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9nZXROYW1lRm9yVXNlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV9kZXNpZ25lcl9zdGFydHVwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV9kZXNpZ25lcl9zdGFydHVwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2VuZ2luZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZW5naW5lLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2RyYWZ0cy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZHJhZnRzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlbW92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVtb3ZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfc3VibWl0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3Rlcm1pbmF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfdGVybWluYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlYXNzaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19yZWFzc2lnbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZWxvY2F0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVsb2NhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfYXJjaGl2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfYXJjaGl2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19leHBvcnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2V4cG9ydC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19zcGFjZV9jaGFuZ2VzZXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3NwYWNlX2NoYW5nZXNldC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZXRyaWV2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmV0cmlldmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2luc3RhbmNlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3BlbmRpbmcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fcGVuZGluZy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2V4cG9ydF90YWJsZV90ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9leHBvcnRfdGFibGVfdGVtcGxhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9kcmFmdHMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZHJhZnRzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZ2V0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2dldC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zYXZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3NhdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9nZXRfYnlfc3RlcG5hbWUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZ2V0X2J5X3N0ZXBuYW1lLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fY2ZzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2Nmcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19mb3J3YXJkX3JlZmlsbC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZF9yZWZpbGwuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZF90YWJsZV9yZWZpbGwuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2ZvcndhcmRfdGFibGVfcmVmaWxsLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3N1Yl90YWJsZV9zb3J0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV9zdWJfdGFibGVfc29ydC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL3Rlc3Rfd2ViaG9vay5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy90ZXN0X3dlYmhvb2suY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfZm9ybXVsYV91c2Vycy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfZm9ybXVsYV91c2Vycy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV9mb3JtdWxhX29yZ2FuaXphdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX2Zvcm11bGFfb3JnYW5pemF0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvc2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL3NldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2dldF9pbnN0YW5jZV9kYXRhLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL3NhdmVfaW5zdGFuY2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3M6d29ya2Zsb3cvc2VydmVyL21ldGhvZHMvdHJhY2VfYXBwcm92ZV9jYy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9mb3J3YXJkX2luc3RhbmNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2Nmc19pbnN0YW5jZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9uZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9jaGVja19tYWluX2F0dGFjaC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvcmVsYXRlZF9pbnN0YW5jZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvZWRpdF9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2VkaXRfZmxvd19wb3NpdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL3N0YXJ0X2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9zdGFydF9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2JhdGNoLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYmF0Y2guY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9oaWRlX2luc3RhbmNlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaGlkZV9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfdmFsdWUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV92YWx1ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3JvdXRlcy9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9yb3V0ZXMvaW5zdGFuY2UuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9yb3V0ZXMvc3RlZWRvc19jc3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL3N0ZWVkb3NfY3NzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9saWIvMV9mb3JtX2Zvcm11bGEuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL2xpYi9nZXRfaGFuZGxlcnNfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZ2V0X2hhbmRsZXJzX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvcGVybWlzc2lvbl9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9wZXJtaXNzaW9uX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvYXBwcm92ZV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9hcHByb3ZlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvZmxvd19tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2Zvcm1fbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZm9ybV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL3N0ZXBfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvc3RlcF9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcG9zaXRpb25zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZmxvd3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zvcm1zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mb3Jtcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kcmFmdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfZHJhZnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvZmxvdy10ZW1wbGF0ZS93b3JrZmxvd190ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9mbG93LXRlbXBsYXRlL3dvcmtmbG93X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvc2NoZWR1bGUvYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3NjaGVkdWxlL2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3NjaGVkdWxlL3RpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvc2NoZWR1bGUvdGltZW91dF9hdXRvX3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3RhYnVsYXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC90YWJ1bGFyLmNvZmZlZSJdLCJuYW1lcyI6WyJjaGVja05wbVZlcnNpb25zIiwibW9kdWxlIiwibGluayIsInYiLCJjb29raWVzIiwibWtkaXJwIiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJVUkkiLCJwdW55Y29kZSIsIklQdjYiLCJTZWNvbmRMZXZlbERvbWFpbnMiLCJTTEQiLCJfVVJJIiwidXJsIiwiYmFzZSIsIl91cmxTdXBwbGllZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIl9iYXNlU3VwcGxpZWQiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJsb2NhdGlvbiIsImhyZWYiLCJhYnNvbHV0ZVRvIiwidmVyc2lvbiIsInAiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImVzY2FwZVJlZ0V4Iiwic3RyaW5nIiwicmVwbGFjZSIsImdldFR5cGUiLCJ2YWx1ZSIsIlN0cmluZyIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiaXNBcnJheSIsIm9iaiIsImZpbHRlckFycmF5VmFsdWVzIiwiZGF0YSIsImxvb2t1cCIsImkiLCJfbWF0Y2giLCJ0ZXN0Iiwic3BsaWNlIiwiYXJyYXlDb250YWlucyIsImxpc3QiLCJfdHlwZSIsIm1hdGNoIiwiYXJyYXlzRXF1YWwiLCJvbmUiLCJ0d28iLCJzb3J0IiwibCIsInRyaW1TbGFzaGVzIiwidGV4dCIsInRyaW1fZXhwcmVzc2lvbiIsIl9wYXJ0cyIsInByb3RvY29sIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImhvc3RuYW1lIiwidXJuIiwicG9ydCIsInBhdGgiLCJxdWVyeSIsImZyYWdtZW50IiwiZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzIiwiZXNjYXBlUXVlcnlTcGFjZSIsInByb3RvY29sX2V4cHJlc3Npb24iLCJpZG5fZXhwcmVzc2lvbiIsInB1bnljb2RlX2V4cHJlc3Npb24iLCJpcDRfZXhwcmVzc2lvbiIsImlwNl9leHByZXNzaW9uIiwiZmluZF91cmlfZXhwcmVzc2lvbiIsImZpbmRVcmkiLCJzdGFydCIsImVuZCIsInRyaW0iLCJkZWZhdWx0UG9ydHMiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJ3cyIsIndzcyIsImludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycyIsImRvbUF0dHJpYnV0ZXMiLCJnZXREb21BdHRyaWJ1dGUiLCJub2RlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInR5cGUiLCJlc2NhcGVGb3JEdW1iRmlyZWZveDM2IiwiZXNjYXBlIiwic3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaXNvODg1OSIsInVuZXNjYXBlIiwidW5pY29kZSIsImNoYXJhY3RlcnMiLCJwYXRobmFtZSIsImV4cHJlc3Npb24iLCJtYXAiLCJyZXNlcnZlZCIsInVybnBhdGgiLCJlbmNvZGVRdWVyeSIsImVzY2FwZWQiLCJkZWNvZGVRdWVyeSIsImUiLCJfcGFydCIsImdlbmVyYXRlQWNjZXNzb3IiLCJfZ3JvdXAiLCJjIiwiZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24iLCJfc2VwIiwiX2NvZGluZ0Z1bmNOYW1lIiwiX2lubmVyQ29kaW5nRnVuY05hbWUiLCJhY3R1YWxDb2RpbmdGdW5jIiwic2VnbWVudHMiLCJzcGxpdCIsImpvaW4iLCJkZWNvZGVQYXRoIiwiZGVjb2RlVXJuUGF0aCIsInJlY29kZVBhdGgiLCJyZWNvZGVVcm5QYXRoIiwiZW5jb2RlUmVzZXJ2ZWQiLCJwYXJzZSIsInBhcnRzIiwicG9zIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsInBhcnNlQXV0aG9yaXR5IiwicGFyc2VIb3N0IiwiYnJhY2tldFBvcyIsInQiLCJjaGFyQXQiLCJmaXJzdENvbG9uIiwiZmlyc3RTbGFzaCIsIm5leHRDb2xvbiIsInBhcnNlVXNlcmluZm8iLCJsYXN0SW5kZXhPZiIsInNoaWZ0IiwicGFyc2VRdWVyeSIsIml0ZW1zIiwic3BsaXRzIiwibmFtZSIsInB1c2giLCJidWlsZCIsImJ1aWxkQXV0aG9yaXR5IiwiYnVpbGRIb3N0IiwiYnVpbGRVc2VyaW5mbyIsImJ1aWxkUXVlcnkiLCJ1bmlxdWUiLCJrZXkiLCJidWlsZFF1ZXJ5UGFyYW1ldGVyIiwiYWRkUXVlcnkiLCJjb25jYXQiLCJyZW1vdmVRdWVyeSIsImhhc1F1ZXJ5Iiwid2l0aGluQXJyYXkiLCJfYm9vbHkiLCJCb29sZWFuIiwib3AiLCJjb21tb25QYXRoIiwiTWF0aCIsIm1pbiIsIndpdGhpblN0cmluZyIsImNhbGxiYWNrIiwib3B0aW9ucyIsIl9zdGFydCIsIl9lbmQiLCJfdHJpbSIsIl9hdHRyaWJ1dGVPcGVuIiwibGFzdEluZGV4IiwiZXhlYyIsImluZGV4IiwiaWdub3JlSHRtbCIsImF0dHJpYnV0ZU9wZW4iLCJtYXgiLCJzZWFyY2giLCJpZ25vcmUiLCJyZXN1bHQiLCJlbnN1cmVWYWxpZEhvc3RuYW1lIiwidG9BU0NJSSIsIm5vQ29uZmxpY3QiLCJyZW1vdmVBbGwiLCJ1bmNvbmZsaWN0ZWQiLCJVUklUZW1wbGF0ZSIsImRlZmVyQnVpbGQiLCJfZGVmZXJyZWRfYnVpbGQiLCJfc3RyaW5nIiwiY2xvbmUiLCJ2YWx1ZU9mIiwiZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvciIsImdlbmVyYXRlUHJlZml4QWNjZXNzb3IiLCJfa2V5IiwiaGFzaCIsInJlcyIsIl9vYmplY3QiLCJhdHRyaWJ1dGUiLCJzcmMiLCJpcyIsIndoYXQiLCJpcCIsImlwNCIsImlwNiIsInNsZCIsImlkbiIsInJlbGF0aXZlIiwiaGFzIiwiX3Byb3RvY29sIiwiX3BvcnQiLCJfaG9zdG5hbWUiLCJzY2hlbWUiLCJ4Iiwib3JpZ2luIiwiYXV0aG9yaXR5IiwiaG9zdCIsInVzZXJpbmZvIiwicmVzb3VyY2UiLCJzdWJkb21haW4iLCJkb21haW4iLCJzdWIiLCJSZWdFeHAiLCJ0bGQiLCJnZXQiLCJSZWZlcmVuY2VFcnJvciIsImRpcmVjdG9yeSIsImZpbGVuYW1lIiwiZGVjb2RlUGF0aFNlZ21lbnQiLCJtdXRhdGVkRGlyZWN0b3J5Iiwibm9ybWFsaXplUGF0aCIsInN1ZmZpeCIsInMiLCJzZWdtZW50Iiwic2VwYXJhdG9yIiwiYWJzb2x1dGUiLCJFcnJvciIsInBvcCIsInVuc2hpZnQiLCJzZWdtZW50Q29kZWQiLCJxIiwic2V0UXVlcnkiLCJzZXRTZWFyY2giLCJhZGRTZWFyY2giLCJyZW1vdmVTZWFyY2giLCJoYXNTZWFyY2giLCJub3JtYWxpemUiLCJub3JtYWxpemVQcm90b2NvbCIsIm5vcm1hbGl6ZVF1ZXJ5Iiwibm9ybWFsaXplRnJhZ21lbnQiLCJub3JtYWxpemVIb3N0bmFtZSIsIm5vcm1hbGl6ZVBvcnQiLCJiZXN0IiwiX3BhdGgiLCJfd2FzX3JlbGF0aXZlIiwiX2xlYWRpbmdQYXJlbnRzIiwiX3BhcmVudCIsIl9wb3MiLCJub3JtYWxpemVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJkIiwicmVhZGFibGUiLCJ1cmkiLCJ0b1VuaWNvZGUiLCJxcCIsImt2IiwicmVzb2x2ZWQiLCJwcm9wZXJ0aWVzIiwiYmFzZWRpciIsInJlbGF0aXZlVG8iLCJyZWxhdGl2ZVBhcnRzIiwiYmFzZVBhcnRzIiwiY29tbW9uIiwicmVsYXRpdmVQYXRoIiwiYmFzZVBhdGgiLCJwYXJlbnRzIiwiZXF1YWxzIiwib25lX21hcCIsInR3b19tYXAiLCJjaGVja2VkIiwib25lX3F1ZXJ5IiwidHdvX3F1ZXJ5IiwiV29ya2Zsb3ciLCJJbWFnZVNpZ24iLCJUcmFjZXNIYW5kbGVyIiwiVHJhY2VzVGVtcGxhdGUiLCJJbnN0YW5jZWZvcm1UZW1wbGF0ZSIsIkluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlIiwiSW5zdGFuY2VTaWduVGV4dCIsIlJlbGF0ZWRJbnN0YW5jZXMiLCJSZWxhdGVkUmVjb3JkcyIsIkluc3RhbmNlTWFjcm8iLCJjb250ZXh0IiwiVHJhY2VzTWFuYWdlciIsImlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nIiwiZmllbGRfZm9ybXVsYSIsImluY2x1ZGVzT3BpbmlvbkZpZWxkIiwiZm9ybSIsImZvcm1fdmVyc2lvbiIsIl9mb3JtX3ZlcnNpb24iLCJmaWVsZF9mb3JtdWxhcyIsImZpZWxkcyIsIkFycmF5IiwiTWV0ZW9yIiwiaXNTZXJ2ZXIiLCJ1dWZsb3dNYW5hZ2VyIiwiZ2V0Rm9ybVZlcnNpb24iLCJkYiIsImZvcm1zIiwiZmluZE9uZSIsIl9pZCIsImZvcm1fdmVyc2lvbnMiLCJmb3JFYWNoIiwiZiIsInJlZiIsImNvbnNvbGUiLCJsb2ciLCJmMSIsImZvcm11bGEiLCJfIiwic29tZSIsImhlbHBlcnMiLCJhdXRoX3Rva2VucyIsIkNvbGxlY3Rpb24iLCJfZ2V0TG9jYWxlIiwiX2dldFJlcXVpcmVkRmllbGRzIiwiX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzIiwiX2dldFN0YXJ0U3RlcFJlcXVpcmVkRmllbGRzIiwiX2dldFRlbXBsYXRlRGF0YSIsIl9nZXRWaWV3SHRtbCIsImdldExpbmtUZXh0IiwiSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlIiwiaW5zdGFuY2VfYXR0YWNobWVudCIsImFmU2VsZWN0VXNlclJlYWQiLCJhZkZvcm1Hcm91cFJlYWQiLCJhZkZvcm1Hcm91cCIsImNyZWF0ZSIsInRlbXBhbHRlTmFtZSIsInN0ZWVkb3NEYXRhIiwidGVtcGxhdGUiLCJ0ZW1wbGF0ZUNvbXBpbGVkIiwidGVtcGxhdGVSZW5kZXJGdW5jdGlvbiIsIlNwYWNlYmFyc0NvbXBpbGVyIiwiY29tcGlsZSIsImlzQm9keSIsImV2YWwiLCJUZW1wbGF0ZSIsIkJsYXplIiwiY3JlYXRlSW5zdGFuY2VTaWduVGV4dCIsImluc3RhbmNlU2lnblRleHRDb21waWxlZCIsImluc3RhbmNlU2lnblRleHRIdG1sIiwiaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VTaWduVGV4dCIsImNyZWF0ZUltYWdlU2lnbiIsImltYWdlU2lnbkNvbXBpbGVkIiwiaW1hZ2VTaWduSHRtbCIsImltYWdlU2lnblJlbmRlckZ1bmN0aW9uIiwiaW1hZ2VTaWduIiwiY3JlYXRlVHJhY2VzSGFubGRlciIsInRyYWNlc0hhbmxkZXJDb21waWxlZCIsInRyYWNlc0hhbmxkZXJIdG1sIiwidHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXIiLCJpbml0IiwiaXRlbSIsImxhYmVsIiwiZGV0YWlsX3VybCIsIlN0ZWVkb3MiLCJhYnNvbHV0ZVVybCIsImdldFZhbHVlIiwiZmllbGQiLCJsb2NhbGUiLCJ1dGNPZmZzZXQiLCJkYXRlIiwiaG91cnMiLCJtb250aCIsInNlY29uZHMiLCJ0MCIsInQxIiwieWVhciIsImVuY29kZVVSSSIsImVycm9yIiwiaXNfbXVsdGlzZWxlY3QiLCJnZXRQcm9wZXJ0eSIsImZ1bGxuYW1lIiwiVEFQaTE4biIsIl9fIiwiRGF0ZSIsImZvcm1hdERhdGUiLCJpc190ZXh0YXJlYSIsIlNwYWNlYmFycyIsIlNhZmVTdHJpbmciLCJNYXJrZG93biIsIm51bWJlclRvU3RyaW5nIiwiZGlnaXRzIiwiZ2V0TGFiZWwiLCJjb2RlIiwiZmluZFByb3BlcnR5QnlQSyIsImdldEluc3RhbmNlRm9ybVZlcnNpb24iLCJpbnN0YW5jZSIsImZvcm1fZmllbGRzIiwiY3VycmVudCIsIndoZXJlIiwiaGlzdG9yeXMiLCJnZXRGbG93VmVyc2lvbiIsImZsb3ciLCJmbG93X3ZlcnNpb24iLCJmbG93cyIsInZpZXdIdG1sIiwiQXNzZXRzIiwiZ2V0VGV4dCIsInVzZXIiLCJyZWYxIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyZXYiLCJpc19yZXF1aXJlZCIsInN0ZXBzIiwiZWRpdGFibGVDb2RlIiwic3RhcnRTdGVwIiwia2V5cyIsInBlcm1pc3Npb25zIiwicmVxdWlyZWRGaWVsZHMiLCJpbnRlcnNlY3Rpb24iLCJzcGFjZSIsIldvcmtmbG93TWFuYWdlciIsImlzQ2xpZW50IiwiV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdCIsImdldEF1dG9mb3JtU2NoZW1hVmFsdWVzIiwiaW5zbmFtZSIsImluc19zdGF0ZSIsInN0YXRlIiwiaW5zX2ZpbmFsX2RlY2lzaW9uIiwiaW5zX2NvZGUiLCJpbnNfaXNfYXJjaGl2ZWQiLCJpc19hcmNoaXZlZCIsImluc19pc19kZWxldGVkIiwiYXBwbGljYW50X25hbWUiLCJhcHBsaWNhbnRDb250ZXh0Iiwic2Vzc2lvblVzZXJJZCIsImVkaXRhYmxlIiwic3RhcnRTdGVwRWRpdGFibGVGaWVsZHMiLCJwYXNzaW5nIiwibW9tZW50IiwiZm9ybWF0IiwiZ2V0SW5zdGFuY2VWaWV3IiwiYm9keSIsImluc3RhbmNlQ29tcGlsZWQiLCJpbnN0YW5jZVJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VUZW1wbGF0ZSIsIlRlbXBsYXRlTWFuYWdlciIsImdldFRlbXBsYXRlIiwidGVtcGxhdGVOYW1lIiwiaW5zdGFuY2VfcmVhZG9ubHlfdmlldyIsInRvSFRNTFdpdGhEYXRhIiwiZ2V0VHJhY2VzVmlldyIsInRyYWNlQ29tcGlsZWQiLCJ0cmFjZVJlbmRlckZ1bmN0aW9uIiwidHJhY2VzSHRtbCIsImluc3RhbmNlX3N0eWxlIiwidHJhY2VfcmVhZG9ubHlfdmlldyIsInRyYWNlcyIsImdldEF0dGFjaG1lbnRWaWV3IiwiYXR0YWNobWVudENvbXBpbGVkIiwiYXR0YWNobWVudEh0bWwiLCJhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24iLCJhdHRhY2htZW50c19yZWFkb25seV92aWV3IiwiZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXciLCJyZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQiLCJyZWxhdGVkSW5zdGFuY2VzSHRtbCIsInJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbiIsInJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXciLCJnZXRSZWxhdGVkUmVjb3Jkc1ZpZXciLCJyZWxhdGVkUmVjb3Jkc0NvbXBpbGVkIiwicmVsYXRlZFJlY29yZHNIdG1sIiwicmVsYXRlZFJlY29yZHNSZW5kZXJGdW5jdGlvbiIsInJlbGF0ZWRfcmVjb3Jkc192aWV3IiwiZ2V0T25Mb2FkU2NyaXB0IiwiZm9ybV9zY3JpcHQiLCJnZXRJbnN0YW5jZUh0bWwiLCJhbGxDc3NMaW5rIiwiYXR0YWNobWVudCIsImNyZWF0b3JTZXJ2aWNlIiwiY3NzSHJlZiIsImZvcm1EZXNjcmlwdGlvbiIsImZvcm1EZXNjcmlwdGlvbkh0bWwiLCJodG1sIiwiaW5zX3JlY29yZF9pZHMiLCJpbnN0YW5jZUJveFN0eWxlIiwib25Mb2FkU2NyaXB0Iiwib3BlbkZpbGVTY3JpcHQiLCJyZWxhdGVkX2luc3RhbmNlcyIsInJlbGF0ZWRfcmVjb3JkcyIsInNob3dUcmFjZXNCdG4iLCJzaG93VHJhY2VzU2NyaXB0IiwidHJhY2UiLCJ0cmFjZUNoZWNrIiwid2lkdGgiLCJzZXR0aW5ncyIsIndlYnNlcnZpY2VzIiwiY3JlYXRvciIsInJlY29yZF9pZHMiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNNb2JpbGUiLCJzaG93VHJhY2UiLCJmaW5hbF9kZWNpc2lvbiIsInNob3dBdHRhY2htZW50cyIsImlzRW1wdHkiLCJ0YWdnZXIiLCJzdHlsZXMiLCJkZXNjcmlwdGlvbiIsInBsdWdpbnMiLCJmb3JtSWQiLCJpbnN0YW5jZV90aXRsZSIsInBhZ2VUaXRsZSIsInBhZ2VUaXRsZVRyQ2xhc3MiLCJ2YWwiLCJDb3JlRm9ybSIsInBhZ2VUaXRsZUZpZWxkTmFtZSIsImhhbmRsZVRhYmxlVGVtcGxhdGUiLCJfZXhwb3J0IiwidGFibGVfZmllbGRzIiwidGFibGVfZmllbGQiLCJmaWVsZF9wZXJtaXNzaW9uIiwicHVyZUNvZGUiLCJyZXF1aXJlZCIsInRpdGxlX3Blcm1pc3Npb24iLCJyZW1vdmVTcGVjaWFsQ2hhcmFjdGVyIiwiaXNPcGluaW9uRmllbGQiLCJ0cl9zdGFydCIsInRkX2NvbHNwYW4iLCJ0cl9lbmQiLCJpbmNsdWRlcyIsInBlcm1pc3Npb24iLCJfdGVtcGxhdGUiLCJ0YWJsZSIsIl90ZW1wbGF0ZUhlbHBzIiwic3RlZWRvc19pbnN0YW5jZSIsImdldEluc3RhbmNlIiwiYXR0cyIsImlkIiwic3R5bGUiLCJkaXNhYmxlZCIsImluc3RhbmNlSWQiLCJmb3JtX3R5cGVzIiwiQXBwcm92ZU1hbmFnZXIiLCJpc1JlYWRPbmx5Iiwic3RlZWRvc19mb3JtIiwiaW5uZXJzdWJmb3JtQ29udGV4dCIsImRvY192YWx1ZXMiLCJTZXNzaW9uIiwiYSIsImIiLCJTaW1wbGVTY2hlbWEiLCJnZXRBdXRvZm9ybVNjaGVtYSIsImluc3RhbmNlX2JveF9zdHlsZSIsImJveCIsImlucyIsImp1ZGdlIiwicHJpbnRfdGVtcGxhdGUiLCJpbnN0YW5jZV90ZW1wbGF0ZSIsIlN0ZWVkb3NUYWJsZSIsImNoZWNrSXRlbSIsIml0ZW1faW5kZXgiLCJmaWVsZE9iaiIsImdldEZpZWxkIiwiZmllbGRWYWwiLCJnZXRJdGVtTW9kYWxWYWx1ZSIsInNmX25hbWUiLCJzZmllbGRzIiwic2YiLCJJbnN0YW5jZU1hbmFnZXIiLCJjaGVja0Zvcm1GaWVsZFZhbHVlIiwiJCIsInNldFRhYmxlSXRlbVZhbHVlIiwiaXRlbV92YWx1ZSIsInRhYmxlVmFsdWUiLCJnZXRUYWJsZVZhbHVlIiwiZ2V0VGFibGVJdGVtVmFsdWUiLCJyZW1vdmVUYWJsZUl0ZW0iLCJyZW1vdmVkIiwic2V0VGFibGVWYWx1ZSIsImdldFZhbGlkVmFsdWUiLCJ2YWxpZFZhbHVlIiwiaGFuZGxlRGF0YSIsInZhbHVlcyIsImluc3RhbmNlRmllbGRzIiwiZ2V0SW5zdGFuY2VGaWVsZHMiLCJnZXRNb2RhbERhdGEiLCJGb3JtX2Zvcm11bGEiLCJnZXRGb3JtdWxhRmllbGRWYXJpYWJsZSIsIkF1dG9Gb3JtIiwiZ2V0Rm9ybVZhbHVlcyIsImluc2VydERvYyIsImFkZEl0ZW0iLCJfaXRlbV92YWx1ZSIsImdldEtleXMiLCJhcHBlbmQiLCJnZXRUciIsInVwZGF0ZUl0ZW0iLCJ0ZHMiLCJnZXRSZW1vdmVUZCIsInNmaWVsZCIsImdldFRkIiwiZW1wdHkiLCJydW5Gb3JtdWxhIiwicmVtb3ZlSXRlbSIsImhpZGUiLCJzaG93TW9kYWwiLCJtZXRob2QiLCJtb2RhbERhdGEiLCJNb2RhbCIsInNob3ciLCJnZXRDdXJyZW50RGF0YUZvckZvcm0iLCJzcyIsImdldEZvcm1TY2hlbWEiLCJzY2hlbWEiLCJvYmplY3RLZXlzIiwiX21ha2VHZW5lcmljIiwiZ2V0VGhlYWQiLCJpc09iamVjdCIsInRoZWFkIiwidHJzIiwic2ZfbGVuZ3RoIiwid2lkZV9maWVsZHMiLCJmaWx0ZXJQcm9wZXJ0eSIsImlzX3dpZGUiLCJnZXRUYm9keSIsInNmaWVsZHNFZGl0YWJsZSIsInRib2R5IiwidHIiLCJ0ZCIsInRkX3ZhbHVlIiwiZ2V0VERWYWx1ZSIsInZpZXciLCJDRkRhdGFNYW5hZ2VyIiwiZ2V0Rm9ybXVsYVNwYWNlVXNlcnMiLCJ1IiwiZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbnMiLCJvIiwiZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbiIsInBsdWNrIiwiYWRkSW5wdXRUeXBlIiwidmFsdWVPdXQiLCJ2YWx1ZUNvbnZlcnRlcnMiLCJzdHJpbmdUb1N0cmluZ0FycmF5Iiwic3RyaW5nVG9OdW1iZXIiLCJzdHJpbmdUb051bWJlckFycmF5Iiwic3RyaW5nVG9Cb29sZWFuIiwic3RyaW5nVG9Cb29sZWFuQXJyYXkiLCJzdHJpbmdUb0RhdGUiLCJzdHJpbmdUb0RhdGVBcnJheSIsImNvbnRleHRBZGp1c3QiLCJtYXhsZW5ndGgiLCJhZlRhYmxlIiwiZXZlbnRzIiwiZXZlbnQiLCJuZXdfaXRlbV9pbmRleCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0Iiwic2V0IiwicmVuZGVyZWQiLCJzdHIiLCJhZGRJdGVtVHIiLCJhdXRvcnVuIiwiY3VycmVudERhdGEiLCJzcGFjZVVzZXJTaWduIiwidXNlcklkIiwic3BhY2VfdXNlcl9zaWducyIsImltYWdlVVJMIiwic2lnbiIsInNob3dTaWduSW1hZ2UiLCJoYW5kbGVyIiwiaXNfZmluaXNoZWQiLCJvYmplY3RVcmwiLCJvYmplY3RfbmFtZSIsInJlY29yZF9pZCIsImFwcF9pZCIsIkNyZWF0b3IiLCJnZXRPYmplY3RVcmwiLCJ1bmVtcHR5IiwidW5lcXVhbHMiLCJpbmNsdWRlIiwicmVmMiIsInJlZjMiLCJnZXRJbnN0YW5jZUZsb3dWZXJzaW9uIiwiYXBwcm92ZXMiLCJyZWY0Iiwic3RlcCIsImFwcHJvdmUiLCJqdWRnZV9uYW1lIiwiaGFuZGxlcl9uYW1lIiwiaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSIsImhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lIiwiZmluaXNoX2RhdGUiLCJvcGluaW9uX2ZpZWxkc19jb2RlIiwic2lnbl9maWVsZF9jb2RlIiwiaXNfcmVhZCIsInNpZ25fc2hvdyIsImFmdGVyX2ZpZWxkIiwiYmVmb3JlX2ZpZWxkIiwicHJlX2ZpZWxkcyIsInByZV93aWRlX2ZpZWxkcyIsInNvcnRfYXBwcm92ZSIsIm9yZGVyIiwicDEiLCJwMiIsIl9wMSIsIl9wMiIsImdldFRpbWUiLCJfdCIsImdldENmQ2xhc3MiLCJnZXRUYWJsZVRoZWFkIiwiZ2V0VGFibGVCb2R5Iiwic2hvd0xhYmVsIiwidGVtcGxhdGVEYXRhIiwiZ2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lIiwidG9wX2tleXdvcmRzIiwiZm9vMSIsIm9waW5pb25GaWVsZHMiLCJmb28iLCJqc29uX2Zvcm11bGEiLCJzMSIsImVycm9yMSIsInlpamlhbmxhbiIsInN0ZXBOYW1lIiwiaW1hZ2Vfc2lnbiIsIm9ubHlfY2Nfb3BpbmlvbiIsIm9ubHlfY2MiLCJkZWZhdWx0X2Rlc2NyaXB0aW9uIiwib25seV9oYW5kbGVyIiwic2hvd0NDT3BpbmlvbiIsIm1hcmtEb3duVG9IdG1sIiwibWFya0Rvd25TdHJpbmciLCJyZW5kZXJlciIsIlJlbmRlcmVyIiwidGl0bGUiLCJmX2xhYmVsIiwidGhhdCIsImlzU2VjdGlvbiIsInJlZ2lzdGVySGVscGVyIiwiaW5zX2F0dGFjaF9kb3dubG9hZF91cmwiLCJnZXRQZXJtaXNzaW9ucyIsImluc3RhbmNlZm9ybUNoYW5nZUV2ZW50IiwicHJldmVudERlZmF1bHQiLCJvcGVuV2luZG93IiwidGFyZ2V0Iiwib25DcmVhdGVkIiwiY29tcGlsZWQiLCJpbnN0YW5jZUN1c3RvbVRlbXBsYXRlIiwiaW5zdGFuY2VWaWV3IiwicmVuZGVyRnVuY3Rpb24iLCJWaWV3IiwiaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlIiwib25SZW5kZXJlZCIsImN1cnJlbnRBcHByb3ZlIiwiY3VycmVudFN0ZXAiLCJmb3JtdWxhX2ZpZWxkcyIsImluc3RhbmNlTnVtYmVyRmllbGRzIiwiYXBwbGljYW50IiwibmV4dFN0ZXBzIiwibmV4dFN0ZXBVc2VycyIsIkluc3RhbmNlRXZlbnQiLCJpbml0RXZlbnRzIiwiZ2V0Q3VycmVudEFwcHJvdmUiLCJlYWNoIiwiZWxlbWVudCIsInNjaGVtYUtleSIsInRvYXN0ciIsInJlYXNvbiIsImdldEZpZWxkVmFsdWUiLCJJbnN0YW5jZU51bWJlclJ1bGVzIiwiaW5zdGFuY2VOdW1iZXJCdWlsZGVyIiwidHJpZ2dlciIsImdldEN1cnJlbnRTdGVwIiwicnVuIiwic2hvd01haW5UaXRsZSIsIndvcmtmbG93TWFpbkF0dGFjaFRpdGxlIiwiZW5hYmxlZF9hZGRfbWFpbl9hdHRhY2htZW50IiwiY3VycmVudF9zdGVwIiwibWFpbl9hdHRhY2hfY291bnQiLCJjZnMiLCJpbnN0YW5jZXMiLCJmaW5kIiwiY291bnQiLCJkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50IiwiZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlIiwic3RhcnRfc3RlcCIsImdldFN0YXJ0U3RlcCIsImNhbl9lZGl0X21haW5fYXR0YWNoIiwic3RlcF90eXBlIiwiZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50IiwiZ2V0RmxvdyIsInVwbG9hZF9hZnRlcl9iZWluZ19kaXN0cmlidXRlZCIsImlzQ0MiLCJnZXRDQ1N0ZXAiLCJjYW5fZWRpdF9ub3JtYWxfYXR0YWNoIiwibWFpbl9hdHRhY2htZW50IiwibWFpbl9hdHRhY2giLCJub3JtYWxfYXR0YWNobWVudHMiLCJzZWxlY3RvciIsIiRuZSIsImRmaXMiLCJkaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIiwiJGluIiwiZGlzdHJpYnV0ZV9tYWluIiwiZmlyc3RWZXJzaW9uTWFpbiIsIm1ldGFkYXRhIiwicGFyZW50IiwiYXR0YWNobWVudFVwbG9hZGVkQXQiLCJ1cGxvYWRlZEF0IiwiZmlyc3RWZXJzaW9uIiwic29ydEJ5IiwiaW5zdGFuY2VJZHMiLCJhdHRhY2htZW50c19jb3VudCIsImZsb3dfZmlsZXMiLCJmaWxlcyIsImlzRHJhZnRBbmRGbG93ZmlsZXNFeGlzdCIsImNvbXBhY3QiLCJhdHRhY2htZW50cyIsIiRvciIsImZldGNoIiwibXlBcHByb3ZlIiwibXlUcmFjZSIsImlzSW5ib3giLCJkZWZhdWx0RGVzY3JpcHRpb24iLCJhcHByb3ZlX3NvcnQiLCJhcHByb3Zlc0dyb3VwIiwiYXBwcm92ZXNfc29ydGVkIiwiY29tcGxldGVkX2RhdGUiLCJoYXNOZXh0IiwiaGF2ZURlc2NyaXB0aW9uQXBwcm92ZSIsImlzX2NvbXBsZXRlZCIsImxhc3QiLCJ0b3BfYXBwcm92ZXMiLCJ1bmlvbiIsImZpbHRlciIsInRvcF9hcHByb3ZlIiwiZ3JvdXBCeSIsImhhbmRsZXJBcHByb3ZlcyIsImRlc2NyaXB0aW9uQXBwcm92ZXMiLCJfZGlzcGxheSIsImlzTXlBcHByb3ZlIiwibXlBcHByb3ZlRGVzY3JpcHRpb24iLCJhcHByb3ZlSWQiLCJub3ciLCJpc09waW5pb25PZkZpZWxkIiwiaW1hZ2VTaWduRGF0YSIsImdldExhc3RTaWduQXBwcm92ZSIsImdldEhhbmRsZXJTaWduU2hvd0FwcHJvdmVzIiwibGFzdE15QXBwcm92ZURlc2NyaXB0aW9uIiwic2hvd0FwcHJvdmUiLCJqdWRnZV9kZXNjcmlwdGlvbiIsImlzX2FwcHJvdmVkIiwiaXNfcmVqZWN0ZWQiLCJpc19yZWFkZWQiLCJhZGRDbGFzcyIsInNldFRpbWVvdXQiLCJkYXRlRm9ybWF0IiwiZ2V0RnVsbFllYXIiLCJnZXRTdGVwTmFtZSIsInN0ZXBJZCIsImdldEluc3RhbmNlU3RlcCIsInNob3dEZWxldGVCdXR0b24iLCJhcHByb3ZlZCIsImZyb21fdXNlciIsImlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbiIsImFwcHJvdmVfYWRtaW5zIiwiaXNTaG93Iiwid29ya2Zsb3ciLCJjb250YWlucyIsImlzRWRpdGluZyIsImlzX2VkaXRpbmciLCJpc1Nob3dEZXNjcmlwdGlvbiIsImdldEFwcHJvdmVTdGF0dXNJY29uIiwiYXBwcm92ZUp1ZGdlIiwiYXV0b1N1Ym1pdHRlZCIsImFwcHJvdmVTdGF0dXNJY29uIiwiZ2V0QXBwcm92ZVN0YXR1c1RleHQiLCJhcHByb3ZlU3RhdHVzVGV4dCIsImdldEFwcHJvdmVKdWRnZUNsYXNzIiwiaXNGb3J3YXJkIiwic2hvd0ZvcndhcmREZWxldGVCdXR0b24iLCJmb3J3YXJkX2luc3RhbmNlIiwiaXNEaXN0cmlidXRlIiwic2hvd0Rpc3RyaWJ1dGVEZWxldGVCdXR0b24iLCJoYXNGZWF0dXJlIiwiZ2V0U3BhY2VJZCIsImhhc0Zsb3dBZG1pblBlcm1pc3Npb24iLCJmaW5pc2hEYXRlU2NoZW1hIiwiaXNBbmRyb2lkT3JJT1MiLCJhdXRvZm9ybSIsIm9wdGlvbmFsIiwicmVhZG9ubHkiLCJkYXRlVGltZVBpY2tlck9wdGlvbnMiLCJpZ25vcmVSZWFkb25seSIsIndpZGdldFBvc2l0aW9uaW5nIiwiaG9yaXpvbnRhbCIsImZpbmlzaERhdGVWYWx1ZXMiLCJzaG93VHJhY2VzVmlldyIsInNob3dfbW9kYWxfdHJhY2VzX2xpc3QiLCJzcGFjZV9zZXR0aW5ncyIsImdldEluc3RhbmNlU3RhdGVUZXh0IiwiaW5zdGFuY2VfaWQiLCJnZXRJbnN0YW5jZVN0YXRlQ29sb3IiLCJjbGEiLCJmaXJzdFRyYWNlIiwibGFzdF9kaXN0cmlidXRlX2Zyb20iLCJkaXNfaW5mbyIsIiRleGlzdHMiLCJjcmVhdGVkIiwiY3JlYXRlZF9ieSIsIlVVZmxvd19hcGkiLCJnZXROYW1lRm9yVXNlciIsInVzZXJzIiwiZnJvbV91c2VyX25hbWUiLCJpc0NDT3JEaXN0cmlidXRlT3JGb3J3YXJkVGVybWluYXRlZCIsImp1ZGdlVGVybWluYXRlZCIsImluc3RhbmNlRXhpc3RzIiwiYWdlbnREZXNjcmlwdGlvbiIsInVzZXJOYW1lIiwidHJhY2VOYW1lIiwidHJhY2VJZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbGxpbmciLCJlcnIiLCJyZW1vdmVDbGFzcyIsInN1Y2Nlc3MiLCJjbG9zZXN0IiwidGFyZ2V0X3VzZXJfaWQiLCJvcGVuU2FmZU9iamVjdFVybCIsImZvcndhcmRfc3BhY2UiLCJmb3J3YXJkc3BhY2UiLCJmb3J3YXJkaW5zdGFuY2UiLCJUcmFja2VyIiwiYWZ0ZXJGbHVzaCIsIm9uIiwic2Nyb2xsVG9wIiwiZmluaXNoX2lucHV0Iiwib3Bpbmlvbl9pbnB1dCIsImFsbG93TXVsdGlwbGUiLCJzaG93UmVsYXRlZEluc3RhY2VzIiwicmVsYXRlZF9pbnN0YWNlcyIsInJlbGF0ZWRfaW5zdGFjZV91cmwiLCJpc0NvcmRvdmEiLCJzaG93X2RlbGV0ZSIsInNob3dSZWxhdGVkUmVjb3JkcyIsIkRlc2lnbmVyQVBJIiwiZ2V0QWJzb2x1dGVVcmwiLCJyb290VXJsIiwiX19tZXRlb3JfcnVudGltZV9jb25maWdfXyIsIlJPT1RfVVJMX1BBVEhfUFJFRklYIiwid3JpdGVSZXNwb25zZSIsImh0dHBDb2RlIiwic3RhdHVzQ29kZSIsInNlbmRJbnZhbGlkVVJMUmVzcG9uc2UiLCJzZW5kQXV0aFRva2VuRXhwaXJlZFJlc3BvbnNlIiwic2VuZEh0bWxSZXNwb25zZSIsInJlcSIsImVycm9yX21zZyIsIkpzb25Sb3V0ZXMiLCJhZGQiLCJuZXh0IiwiZGVhbF90eXBlIiwic3BhY2VJZCIsInNlbmRSZXN1bHQiLCJzcGVjaWZ5VXNlcklkcyIsImdldFVzZXJzIiwiYXBwbGljYW50SWQiLCJhcHByb3ZlUm9sZUlkcyIsImdldFVzZXIiLCJnZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyIsIm9yZ2FuaXphdGlvbnMiLCJhcHByb3ZlSHJSb2xlSWRzIiwiZ2V0SHJSb2xlc1VzZXJzIiwibWFuYWdlciIsInVzZXJGaWVsZCIsInVzZXJGaWVsZFZhbHVlIiwib3JncyIsIm9yZ0NoaWxkcmVucyIsIm9yZ0ZpZWxkIiwib3JnRmllbGRWYWx1ZSIsImdldE9yZ2FuaXphdGlvbnMiLCJnZXRPcmdhbml6YXRpb25zQ2hpbGRyZW5zIiwiZ2V0T3JnYW5pemF0aW9uIiwiZ2V0T3JnYW5pemF0aW9uQ2hpbGRyZW5zIiwiZ2V0T3JnYW5pemF0aW9uc1VzZXJzIiwib3JnRmllbGRVc2VycyIsInNwZWNpZnlPcmdJZHMiLCJzcGVjaWZ5T3JncyIsInNwZWNpZnlPcmdDaGlsZHJlbnMiLCJhcHByb3ZlclJvbGVJZHMiLCJnZXRSb2xlVXNlcnNCeVVzZXJzQW5kUm9sZXMiLCJzdSIsInVzZXJfYWNjZXB0ZWQiLCJ1bmlxVXNlcnMiLCJ1c2VySWRzIiwic3BhY2VVc2VycyIsImdldEZvcm11bGFVc2VyT2JqZWN0IiwiYXV0b0Zvcm1Eb2MiLCJhcHByb3ZlciIsImZvcm11bGFfdmFsdWVzIiwiaW5pdF9mb3JtdWxhX3ZhbHVlcyIsInN0YWNrIiwiZXJyb3JzIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsImNhdGVnb3JpZXMiLCJjb21wYW55SWQiLCJjdXJyZW50X3VzZXIiLCJjdXJyZW50X3VzZXJfaW5mbyIsIm9yZyIsInBvc2l0aW9ucyIsInJvbGVzIiwic3BhY2VJZHMiLCJzcGFjZXMiLCJzcGFjZXNRdWVyeSIsImNoZWNrX2F1dGhvcml6YXRpb24iLCJhZG1pbnMiLCJjb21wYW55X2lkIiwic3BhY2VfdXNlcnMiLCJpc19kZWxldGVkIiwiaXNfdmFsaWQiLCJoZWxwX3RleHQiLCJjYXRlZ29yeSIsIm5hbWVfZm9ybXVsYSIsImNvZGVfZm9ybXVsYSIsImZsb3d0eXBlIiwiY3VycmVudF9ubyIsInBlcm1zIiwiZXJyb3JfbWVzc2FnZSIsImRpc3RyaWJ1dGVfb3B0aW9uYWxfdXNlcnMiLCJmbG93X3JvbGVzIiwiZmxvd19wb3NpdGlvbnMiLCJTcGFjZVVzZXJzIiwiVXNlcnMiLCJGb3JtcyIsIkZsb3dzIiwiT3JnYW5pemF0aW9ucyIsIlBvc2l0aW9ucyIsIlJvbGVzIiwiQ2F0ZWdvcmllcyIsIlNwYWNlcyIsImhhc2hEYXRhIiwiYXBwcm92ZV9mcm9tX2NsaWVudCIsIndvcmtmbG93X2VuZ2luZSIsImluc2VydGVkX2luc3RhbmNlcyIsImluc3RhbmNlX2Zyb21fY2xpZW50IiwibmV3X2lucyIsIm5ld19pbnNfaWQiLCJjcmVhdGVfaW5zdGFuY2UiLCJpbnNlcnRzIiwiY2NfdXNlcnMiLCJkZWxldGVfb2JqIiwiaW5ib3hfdXNlcnMiLCJzcGFjZVVzZXJPcmdhbml6YXRpb25zIiwic3BhY2VfaWQiLCJzcGFjZV91c2VyIiwidXNlcl9pZHMiLCJnZXRTcGFjZSIsImdldFNwYWNlVXNlciIsInN1Ym1pdHRlciIsImNhbkFkbWluIiwiZGVsZXRlZCIsImRlbGV0ZWRfYnkiLCJkZWxldGVkX2luc3RhbmNlcyIsImluc2VydCIsInJlbW92ZSIsInVuaXEiLCJ1X2lkIiwicHVzaE1hbmFnZXIiLCJzZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIiLCJzZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbiIsImN1cnJlbnRfYXBwcm92ZSIsImZsb3dfaWQiLCJyIiwic3VibWl0X2luc3RhbmNlIiwiYWxlcnRzIiwidHJpZ2dlcldlYmhvb2siLCJkaXN0cmlidXRlZEluc3RhbmNlc1JlbWluZCIsImZsb3dfdmVyX2VuZF9zdGVwIiwiZmxvd192ZXJzIiwiaCIsImluc3RhbmNlX2Zsb3dfdmVyIiwiaW5zdGFuY2VfdHJhY2UiLCJuZXdBcHByb3ZlIiwibmV3VHJhY2UiLCJvbGRfY2NfdXNlcnMiLCJvbGRfaW5ib3hfdXNlcnMiLCJvbGRfb3V0Ym94X3VzZXJzIiwic2V0T2JqIiwic3BhY2VfdXNlcl9vcmdfaW5mbyIsInRlbXBVc2VycyIsInRlcm1pbmF0ZV9yZWFzb24iLCJpc0luc3RhbmNlUGVuZGluZyIsImdldFNwYWNlVXNlck9yZ0luZm8iLCJmX3ZlciIsImZfc3RlcCIsInBlcm1pc3Npb25NYW5hZ2VyIiwiZ2V0Rmxvd1Blcm1pc3Npb25zIiwiTW9uZ28iLCJPYmplY3RJRCIsIl9zdHIiLCJ1c2VyX25hbWUiLCJoYW5kbGVyX29yZ2FuaXphdGlvbiIsInN0YXJ0X2RhdGUiLCJkdWVfZGF0ZSIsInJlYWRfZGF0ZSIsImlzX2Vycm9yIiwiY29zdF90aW1lIiwicHJldmlvdXNfdHJhY2VfaWRzIiwib3V0Ym94X3VzZXJzIiwibmZ0X2FwcHJvdmUiLCJtb2RpZmllZCIsIm1vZGlmaWVkX2J5IiwiY3VycmVudF9zdGVwX25hbWUiLCJjdXJyZW50X3N0ZXBfYXV0b19zdWJtaXQiLCJ1cGRhdGUiLCIkc2V0IiwidXNlcl9pZCIsInNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIiLCJfdXNlcnMiLCJhcHByb3ZlX3VzZXJzX2hhbmRsZXJzIiwiYXNzaWduZWVfYXBwciIsImN1cnJlbnRfc3BhY2VfdXNlciIsImN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24iLCJpbmJveF91c2Vyc19mcm9tX2NsaWVudCIsImxhc3RfdHJhY2UiLCJsYXN0X3RyYWNlX2Zyb21fY2xpZW50IiwibmV3X2luYm94X3VzZXJzIiwibm90X2luX2luYm94X3VzZXJzIiwicmVhc3NpZ25fcmVhc29uIiwiZGlmZmVyZW5jZSIsIm9yZ2FuaXphdGlvbiIsImFnZW50IiwiaGFuZGxlcl9pZCIsImhhbmRsZXJfaW5mbyIsIm5ld19hcHByIiwibmV3X3VzZXIiLCJ1c2VyX29yZ2FuaXphdGlvbiIsImdldEFnZW50Iiwic2V0UmVtaW5kSW5mbyIsImFoIiwiYXBwcm92ZV91c2VycyIsImN1cnJlbnRfc2V0cCIsImN1cnJlbnRfc2V0cF90eXBlIiwibmV4dF9zdGVwIiwibmV4dF9zdGVwX25hbWUiLCJuZXh0X3N0ZXBfdHlwZSIsInJlbG9jYXRlX2FwcHIiLCJyZWxvY2F0ZV9jb21tZW50IiwicmVsb2NhdGVfaW5ib3hfdXNlcnMiLCJyZWxvY2F0ZV9uZXh0X3N0ZXAiLCJzYW1lVHJhY2VzIiwic2lnblNob3dBcHByb3ZlSWQiLCJ0YSIsInRpIiwiZ2V0U3RlcCIsImdldFVwZGF0ZWRWYWx1ZXMiLCJnZXREdWVEYXRlIiwidGltZW91dF9ob3VycyIsIm5leHRfc3RlcF91c2VyX2lkIiwiaWR4IiwibmV4dF9zdGVwX3NwYWNlX3VzZXIiLCJuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyIsInVzZXJfaW5mbyIsImdldEN1cnJlbnRTdGVwQXV0b1N1Ym1pdCIsInRpbWVvdXRfYXV0b19zdWJtaXQiLCJsaW5lcyIsIiR1bnNldCIsImlzSW5zdGFuY2VGaW5pc2hlZEFuZE5vdEFyY2hpZXZlZCIsImlzSW5zdGFuY2VTdWJtaXR0ZXJPckFwcGxpY2FudE9yU3BhY2VBZG1pbiIsInN0YXJ0dXAiLCJXZWJBcHAiLCJjb25uZWN0SGFuZGxlcnMiLCJ1c2UiLCJlanMiLCJlanNMaW50IiwiZW5kX2RhdGUiLCJlcnJvcl9vYmoiLCJmaWxlTmFtZSIsImZsb3dfaWRzIiwiZm9ybV9uYW1lIiwiaW5zX3RvX3hscyIsImxhbmciLCJsYXN0X21vbnRoX2RhdGUiLCJyZXQiLCJ0aW1lem9uZW9mZnNldCIsInVpZCIsInBhcnNlSW50IiwiZ2V0TXlBZG1pbk9yTW9uaXRvckZsb3dzIiwiZ2V0TW9udGgiLCJzdWJtaXRfZGF0ZSIsIiRndGUiLCIkbHRlIiwicmVxdWlyZSIsImxpbnQiLCJmb3JtYXRlciIsInNldEhlYWRlciIsImF1dGhfdG9rZW4iLCJmb3JtaWRzIiwiaXNfYWRtaW4iLCJzeW5jX3Rva2VuIiwiZW5hYmxlZCIsImdldF9TcGFjZUNoYW5nZVNldCIsImxhc3RfdHJhY2VfaWQiLCJvcmdfaW5mbyIsInByZXZpb3VzX3N0ZXAiLCJwcmV2aW91c190cmFjZSIsInByZXZpb3VzX3RyYWNlX2FwcHJvdmVzIiwicHJldmlvdXNfdHJhY2VfaWQiLCJwcmV2aW91c190cmFjZV9uYW1lIiwicHJldmlvdXNfdHJhY2Vfc3RlcF9pZCIsInJldHJpZXZlX2FwcHJvdmUiLCJyZXRyaWV2ZV9jb21tZW50IiwicmV0cmlldmVfdHlwZSIsInRoZV90cmFjZSIsInJldHJpZXZlX2FwcHIiLCJhcHByIiwiY3VycmVudF91c2VyX2lkIiwiaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50IiwiaXNGb3J3YXJkQXR0YWNobWVudHMiLCJzZWxlY3RlZFVzZXJzIiwiYWN0aW9uX3R5cGUiLCJyZWxhdGVkIiwiZnJvbV9hcHByb3ZlX2lkIiwiY2hlY2siLCJNYXRjaCIsIk9uZU9mIiwib2xkX3NwYWNlX2lkIiwiZm9yd2FyZF91c2VycyIsIm5vX3Blcm1pc3Npb25fdXNlcl9pZHMiLCJub19wZXJtaXNzaW9uX3VzZXJzX25hbWUiLCJuZXdfaW5zX2lkcyIsImN1cnJlbnRfdHJhY2UiLCJjdXJyZW50X3RyYWNlX2lkIiwiZm9yd2FyZF9hcHByb3ZlcyIsInNldF9vYmoiLCJvbGRfdmFsdWVzIiwibmV3X3ZhbHVlcyIsIm9sZF9mb3JtIiwib2xkX2Zvcm1fdmVyc2lvbiIsIm9sZF9maWVsZHMiLCJjb21tb25fZmllbGRzIiwic2VsZWN0X3RvX2lucHV0X2ZpZWxkcyIsImV4aXN0c19maWVsZCIsInNlbGVjdF9pbnB1dF9maWVsZCIsIm9sZF92Iiwib2xkX211bHRpU2VsZWN0ZWQiLCJuZXdfbXVsdGlTZWxlY3RlZCIsIm9sZF90YWJsZV9yb3dfdmFsdWVzIiwibmV3X3RhYmxlX3Jvd192YWx1ZXMiLCJyZWNvcmRfbmVlZCIsIkZPTkRTSUQiLCJpbnN0YW5jZV9uYW1lIiwibmFtZV9mb3J1bWxhIiwiaXNjcmlwdCIsImNhdGVnb3J5X25hbWUiLCJnZXRDYXRlZ29yeSIsImluc19vYmoiLCJoYW5kbGVyX3NwYWNlX3VzZXIiLCJoYW5kbGVyX29yZ19pbmZvIiwiX21ha2VOZXdJRCIsInN1Ym1pdHRlcl9uYW1lIiwiYXBwbGljYW50X29yZ2FuaXphdGlvbiIsImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZSIsImFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWUiLCJmb3J3YXJkX2Zyb21faW5zdGFuY2UiLCJ0cmFjZV9vYmoiLCJzdGVwX2lkIiwic3RlcF9uYW1lIiwiYXBwcl9vYmoiLCJhdXRvX3JlbWluZCIsImZsb3dfbmFtZSIsImNvbGxlY3Rpb24iLCJpbnN0YW5jZUh0bWwiLCJpbnN0YW5jZUZpbGUiLCJGUyIsIkZpbGUiLCJhdHRhY2hEYXRhIiwiQnVmZmVyIiwiZnJvbSIsInNpemUiLCJvd25lciIsIm93bmVyX25hbWUiLCJmaWxlT2JqIiwibWFpbiIsIm5ld0ZpbGUiLCJjcmVhdGVSZWFkU3RyZWFtIiwib3JpZ2luYWwiLCIkYWRkVG9TZXQiLCIkZWFjaCIsInVwZGF0ZV9yZWFkIiwiZmxvd0lkIiwiaW5zSWQiLCJyZWRpcmVjdFRvIiwicmVkaXJlY3RUb1VybCIsInJlcV9hc3luYyIsInBhcmFtcyIsInN0YXR1cyIsInNlbmQiLCJ3cml0ZUhlYWQiLCJhdHRhY2giLCJsaW1pdCIsIm5vX2xpbWl0X2NvdW50IiwicmVmNSIsInJlc3VsdF9pbnN0YW5jZXMiLCJzcGFjZV9uYW1lcyIsInNwZWNpYWxfdXNlcl9pZCIsInVzZXJpZCIsIndvcmtmbG93X2NhdGVnb3JpZXMiLCJBUElBdXRoZW50aWNhdGlvbkNoZWNrIiwiaGVhZGVycyIsInJlZjYiLCJyZWY3IiwiY29waWVzIiwiQ29va2llcyIsImF1dGhUb2tlbiIsImlzU3BhY2VBZG1pbiIsImlzX3BhaWQiLCJhcHBsaWNhbnRJbmZvIiwiYXBwbGljYW50X2lkIiwiYXBwbGljYW50X3VzZXJuYW1lIiwiaW5zX2lkIiwicGVybV91c2VycyIsIm5leHRfc3RlcF9pZCIsIm5leHRfdXNlcl9pZHMiLCJyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMiLCJpc0luc3RhbmNlRHJhZnQiLCJnZXRGb3JtIiwiY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUiLCJnZXROZXh0U3RlcHMiLCJnZXRIYW5kbGVyc01hbmFnZXIiLCJnZXRIYW5kbGVycyIsInN0ZXBuYW1lIiwiJGVsZW1NYXRjaCIsImluYm94X3VlcnMiLCJhcHByb3ZlX2lkIiwicGFyc2VGaWxlcyIsIm1pbWVUeXBlIiwiaXNfcHJpdmF0ZSIsImxvY2tlZF9ieSIsImxvY2tlZF9ieV9uYW1lIiwiYXR0YWNoX2lkIiwiZmlsZSIsImNvbHVtbnMiLCJmb3J3YXJkX2lucyIsImZvcndhcmRfaW5zX3ZhbHVlcyIsIm9yaWdpbmFsX2lucyIsIm9yaWdpbmFsX2luc19maWVsZHMiLCJvcmlnaW5hbF9pbnNfZm9ybSIsIm9yaWdpbmFsX2luc19pZCIsIm9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyIsInJlZjgiLCJyZWY5Iiwicm93X2RhdGEiLCJzdWJUYWJsZSIsInRhYmxlX2RhdGEiLCJjb2x1bW4iLCJvcmlnaW5hbF9pbnNfZmllbGQiLCJvaCIsImFfdGFibGUiLCJhX3RhYmxlX3ZhbHVlcyIsImNvbHVtbl9saXN0IiwiZF9pbnMiLCJkX2luc19maWVsZHMiLCJkX2luc19mb3JtIiwiZF9pbnNfdmFsdWVzIiwiZF9tYXRjaF9jb2wiLCJkX21hdGNoX2NvbF9maWVsZCIsImRfbWF0Y2hfY29sX2ZpZWxkcyIsImRfc3VidGFibGVfZmllbGRzIiwiZF90YWJsZSIsImRfdGFibGVfdmFsdWVzIiwib19pbnMiLCJvX2luc19maWVsZHMiLCJvX2luc19mb3JtIiwib19pbnNfaWQiLCJvX21hdGNoX2NvbCIsIm9fbWF0Y2hfY29sX2ZpZWxkIiwib19tYXRjaF9jb2xfZmllbGRzIiwib19zdWJ0YWJsZV9maWVsZHMiLCJvX3RhYmxlIiwicmVmMTAiLCJyZWYxMSIsInJlZjEyIiwicmVmMTMiLCJyZWYxNCIsInJlZjE1IiwicmVmMTYiLCJyZWYxNyIsInJlZjE4IiwicmVmMTkiLCJyZWYyMCIsInJlZjIxIiwicmVmMjIiLCJvVGFibGUiLCJkVGFibGUiLCJvTWF0Y2hDb2wiLCJkTWF0Y2hDb2wiLCJyZWZpbGxDb2wiLCJhVGFibGUiLCJvX2luc19maWVsZCIsImRfaW5zX2ZpZWxkIiwiZGgiLCJhX3JvdyIsInJlc3VsdHMiLCJtIiwiY29sIiwiY29scyIsImRfY29sIiwiZF9jb2xfZmllbGRzIiwib19jb2wiLCJvX2NvbF9maWVsZHMiLCJkX3JvdyIsImhhc19vYmoiLCJvX3JvdyIsIm5ld190YWJsZV92YWx1ZXMiLCJzb3J0X2NvbCIsInN1Yl90YWJsZSIsInN1Yl90YWJsZV92YWx1ZXMiLCJzdW1fY29sIiwic3VtQ29sIiwic29ydENvbCIsInNpbmdsZUNvbHMiLCJKc29uU29ydCIsImpzb25BcnIiLCJhc2MiLCJqIiwiamwiLCJ0ZW1wIiwiTnVtYmVyIiwiaXNEZXZlbG9wbWVudCIsImFjdGlvbiIsInRvX3VzZXJzIiwiZ2V0Rm9ybXVsYVVzZXJPYmplY3RzIiwib3JnSWRzIiwiZ2V0Rm9ybXVsYU9yZ09iamVjdHMiLCJtZXRob2RzIiwic2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZSIsInN0ZXBfYXBwcm92ZSIsInN0ZXBzQXBwcm92ZXNPcHRpb25zIiwiX2tleXMxIiwiX2tleXMyIiwic3RlcHNBcHByb3ZlcyIsInN0ZXBBcHByb3ZlcyIsInN0ZXBzQXBwcm92ZU9wdGlvbnMiLCJzZXRfaW5zdGFuY2Vfc2tpcF9zdGVwcyIsIiRwdWxsIiwic2tpcF9zdGVwcyIsIiRwdXNoIiwiZ2V0X2luc3RhbmNlX2RhdGEiLCJmb3JtQ2FjaGVkIiwiZmxvd0NhY2hlZCIsImRyYWZ0X3NhdmVfaW5zdGFuY2UiLCJ0cmFjZV9pZCIsIm5leHRfc3RlcHMiLCJmb3JtX2lkIiwia2V5X3N0ciIsImlzSW5zdGFuY2VTdWJtaXR0ZXIiLCJvcmdfaWQiLCJnZXRJbnN0YW5jZU5hbWUiLCJpbmJveF9zYXZlX2luc3RhbmNlIiwiaXNUcmFjZU5vdEZpbmlzaGVkIiwiaXNBcHByb3ZlTm90RmluaXNoZWQiLCJpc0hhbmRsZXJPckFnZW50IiwicGVybWlzc2lvbnNfdmFsdWVzIiwiZ2V0QXBwcm92ZVZhbHVlcyIsImNoYW5nZV92YWx1ZXMiLCJhcHByb3ZlTWFuYWdlciIsImdldENoYW5nZVZhbHVlcyIsImV4dGVuZCIsInZhbHVlc19oaXN0b3J5IiwiZm9ybV92IiwiY2NfZG8iLCJjY191c2VyX2lkcyIsIm5ld19hcHByb3ZlcyIsImZpbGVkcyIsImNjX3JlYWQiLCJjY19zdWJtaXQiLCJjY0hhc0VkaXRQZXJtaXNzaW9uIiwidGlkeCIsImFpZHgiLCJ1cG9iaiIsInVwZGF0ZWRfdmFsdWVzIiwiY2NfcmVtb3ZlIiwicmVtb3ZlX3VzZXJfaWQiLCJtdWx0aSIsImNjX3NhdmUiLCJjdXJyZW50U3RlcElkIiwidXBkYXRlT2JqIiwicHVzaE9iaiIsImZvcndhcmRfcmVtb3ZlIiwiaGFzQWRtaW5QZXJtaXNzaW9uIiwiZm9yd2FyZF9pbnN0YW5jZV9pZCIsImRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCIsImNhbmNlbERpc3RyaWJ1dGUiLCJhcHByb3ZlX2lkcyIsImV4aXN0cyIsImNmc19pbnN0YW5jZXNfcmVtb3ZlIiwiZmlsZV9pZCIsImNmc19pbnN0YW5jZXNfc2V0X2N1cnJlbnQiLCJjZnNfaW5zdGFuY2VzX2xvY2siLCJjZnNfaW5zdGFuY2VzX3VubG9jayIsImRvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2siLCJjZnNSZWNvcmRJZHMiLCJpc19jbG91ZGFkbWluIiwic3RvcmUiLCJmcyIsIl9fbWV0ZW9yX2Jvb3RzdHJhcF9fIiwic2VydmVyRGlyIiwiYWJzb2x1dGVQYXRoIiwicmVzb2x2ZSIsInN5bmMiLCJ0aW1lIiwiZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMiLCJmaWxlUGF0aCIsIndyYXBBc3luYyIsIndyaXRlciIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiaXNGdW5jdGlvbiIsInJlYWRlciIsInBpcGUiLCJ0aW1lRW5kIiwic2V0X2FwcHJvdmVfaGF2ZV9yZWFkIiwic2VsZiIsImNoYW5nZV9hcHByb3ZlX2luZm8iLCJ1cGRhdGVfYXBwcm92ZV9zaWduIiwic2lnbl90eXBlIiwibGFzdFNpZ25BcHByb3ZlIiwibGFzdFRyYWNlIiwic2Vzc2lvbl91c2VySWQiLCJ1cE9iaiIsImN1c3RvbV9zaWduX3Nob3ciLCJ1cGRhdGVfc2lnbl9zaG93Iiwib2JqcyIsIm15QXBwcm92ZV9pZCIsImluc3RhbmNlX3JldHVybiIsImFwcHJvdmVfdmFsdWVzIiwicHJlX3N0ZXAiLCJwcmVfdHJhY2UiLCJyZXN0X2NvdW50ZXJfdXNlcnMiLCJpbnN0YW5jZV9yZW1pbmQiLCJyZW1pbmRfdXNlcnMiLCJyZW1pbmRfY291bnQiLCJyZW1pbmRfZGVhZGxpbmUiLCJhY3Rpb25fdHlwZXMiLCJsYXN0X3JlbWluZF91c2VycyIsInByaW9yaXR5IiwiYXAiLCJjYWN1bGF0ZV9kYXRlIiwibWFudWFsX2RlYWRsaW5lIiwiY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkiLCJyZW1pbmRfZGF0ZSIsImNhY3VsYXRlV29ya2luZ1RpbWUiLCJiYXNlX2RhdGUiLCJwbHVzX2hhbGZkYXlfZGF0ZSIsInNlbmRSZW1pbmRTTVMiLCJuZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kIiwiYXBwcm92ZXJfcm9sZXMiLCJyb2xlc19uYW1lIiwicm9sZV9uYW1lIiwiX2V2YWwiLCJfTlVNQkVSIiwiX1lZWVkiLCJudW1iZXJSdWxlcyIsInJ1bGVzIiwic2NyaXB0IiwiaW5zdGFuY2VfbnVtYmVyX3J1bGVzIiwibnVtYmVyIiwiWVlZWSIsIk1NIiwibW0iLCJERCIsImdldERhdGUiLCJkZCIsImZpcnN0X251bWJlciIsIk5VTUJFUiIsIm5ld05vIiwiX2Vycm9yIiwiY2hlY2tfbWFpbl9hdHRhY2giLCJjaGVja01haW5BdHRhY2giLCJyZW1vdmVfcmVsYXRlZCIsInJlX2luc19pZCIsInVwZGF0ZV9pbnN0YW5jZV9yZWxhdGVkIiwidXBkYXRlRmxvd1Bvc2l0aW9uIiwicm9sZSIsInVwZGF0ZUZsb3dSb2xlIiwic3RhcnRfZmxvdyIsImtleVZhbHVlIiwic3RhcnRfZmxvd3MiLCJzdGVlZG9zX2tleXZhbHVlcyIsImdldF9pbnN0YW5jZV90cmFjZXMiLCJtaW5pQXBwcm92ZUZpZWxkcyIsImNhdGVnb3J5SWQiLCJmbG93SWRzIiwiX2JhdGNoX2luc3RhbmNlcyIsImdldEJhdGNoSW5zdGFuY2VzIiwibXlBcHByb3ZlcyIsIm15X2FwcHJvdmUiLCJnZXRNeUFwcHJvdmUiLCJjaGFuZ2VfZmxvd19zdGF0ZSIsIl91c2VySWQiLCJfZmxvd3MiLCJfZmxvd3Nfc3RhdGUiLCJmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUiLCJzcGVjaWZ5U3RlcCIsImFwcHJvdmVyX3N0ZXAiLCJfc3RlcCIsImZpZWxkc19tb2RpZmlhYmxlIiwiaGlkZV9pbnN0YW5jZSIsImlzX2hpZGRlbiIsImdldEluc3RhbmNlVmFsdWVzIiwiZ2V0SW5zdGFuY2VSZWFkT25seSIsIl9oYXNQZXJtaXNzaW9uIiwiX2xvY2FsZSIsIl9wYXJlbnRfaW5zdGFuY2VzIiwiZGF0YUJ1ZiIsImhpZGVfdHJhY2VzIiwic3BhY2VVc2VyQ291bnQiLCJnZXRBUElMb2dpblVzZXIiLCJhY2Nlc3NfdG9rZW4iLCJnZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4iLCJoYXNJbnN0YW5jZVBlcm1pc3Npb25zIiwiX3BhcmVudF9pZCIsIl9wYXJlbnRfaW5zIiwiY2hhcnNldCIsInJldF9zeW5jX3Rva2VuIiwic3BhY2VVc2VyIiwiY2FuTW9uaXRvciIsIiRndCIsIiRuaW4iLCJza2lwIiwiYWxsQ3NzIiwiZ2V0UmVmcmVzaGFibGVBc3NldHMiLCJjc3MiLCJST09UX1VSTCIsImVuZHNXaXRoIiwiZyIsImsiLCJnZXRFYWNoIiwibWl4aW4iLCJkZXN0IiwiaGFuZGVyVXNlck9iamVjdCIsImhyIiwic29ydF9ubyIsIm1vYmlsZSIsIndvcmtfcGhvbmUiLCJwb3NpdGlvbiIsInVzZXJSb2xlcyIsImhhbmRlck9yZ09iamVjdCIsIl9fdmFsdWVzIiwidGFibGVGaWVsZHMiLCJ0YWJsZVZhbHVlcyIsImZvcm11bGFUYWJsZVZhbHVlcyIsIl9fdGFibGVWYWx1ZXMiLCJ0YWJsZWZpZWxkIiwiZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMiLCJyb2xlX2lkcyIsImdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMiLCJyb2xlX2lkIiwiZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlIiwiZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUiLCJnZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzIiwib3JnX2lkcyIsImdldEhhbmRsZXJzQnlPcmdBbmRSb2xlcyIsInBhcmVudF9pZCIsIl9hcHByb3ZlIiwiX3NwYWNlX3VzZXIiLCJfdHJhY2UiLCJhcHBsaWNhbnRTdXBlcmlvcnMiLCJhcHByb3Zlcl9vcmdfZmllbGQiLCJhcHByb3Zlcl9vcmdfaWRzIiwiYXBwcm92ZXJfdXNlcl9maWVsZCIsImFwcHJvdmVyX3VzZXJfaWRzIiwiY3VycmVudF9mbG93IiwiY3VycmVudF9mbG93X3ZlcnNpb24iLCJjdXJyZW50X2Zvcm0iLCJjdXJyZW50X3N0ZXBzIiwiZmllbGRfY29kZSIsImZpbmlzaGVkX3RyYWNlcyIsImZsb3dfcmV2IiwiZm9ybV9yZXYiLCJoYW5kbGVycyIsIm1heF9zdGFydERhdGVfdHJhY2UiLCJuZXdfYXBwcm92ZXJfdXNlcl9pZHMiLCJuZXdfb3JnX3VzZXJfaWRzIiwibmV3ZXN0X3ZhbHVlcyIsIm5leHRfc3RlcF91c2VycyIsIm9yZ19pZHNfbmFtZXMiLCJvcmdfdXNlcl9pZHMiLCJzcGFjZV91c2VyX2NvdW50Iiwic3VibWl0dGVyX3VzZXJfY291bnQiLCJ1bmZpbmlzaGVkX3RyYWNlIiwidXNlcl9pZHNfbmFtZXMiLCJ2YWxpZF9hcHByb3Zlcl9vcmdfaWRzIiwiaGlzdG9yeSIsImFwcHJvdmVyX3JvbGUiLCJyb2xlX2NvdW50IiwiYXBwcm92ZXJfaHJfcm9sZXMiLCJjdXJyZW50X2Zsb3dfaGlzdG9yeSIsImZvcm1faGlzdG9yeSIsImZvcm1fZmllbGQiLCJjaGVja19vcmdfY291bnQiLCJjaGVja19vcmdzIiwib3JnX2NoaWxkcmVuIiwib3JnX3VzZXJzIiwiY2hlY2tfb3JnX3VzZXIiLCJvcmdfdXNlciIsImNoZWNrX3VzZXJfY291bnQiLCJhcHByb3ZlX3VzZXIiLCJjaGVja19hcHByb3ZlX3VzZXJfY291bnQiLCJhcHByb3Zlcl9vcmdzIiwiYXBwcm92ZXJfb3JnX2lkIiwidmFsaWRfYXBwcm92ZXJfb3JnX2lkIiwiY2hpbGRfb3JncyIsInZhbGlkX2FwcHJvdmVyX29yZyIsImNoaWxkX29yZyIsIm9yZ191c2VyX2lkIiwic3BhY2VfdXNlcl9pbmZvX2NvdW50IiwiYXBwcm92ZXJfdXNlcnMiLCJhcHByb3Zlcl91c2VyX2lkIiwiX3RyIiwiX2FwcCIsIm15X3Blcm1pc3Npb25zIiwib3Jnc19jYW5fYWRkIiwib3Jnc19jYW5fYWRtaW4iLCJvcmdzX2Nhbl9tb25pdG9yIiwidXNlcnNfY2FuX2FkZCIsInVzZXJzX2Nhbl9hZG1pbiIsInVzZXJzX2Nhbl9tb25pdG9yIiwibGFzdF92YWx1ZXMiLCJhcHByb3ZlX3ZhbHVlc19rZXlzIiwiY2hhbmdlVmFsdWVzIiwibGFzdF92YWx1ZXNfa2V5cyIsImlzRXF1YWwiLCJmbG93TWFuYWdlciIsImdldENhdGVnb3JpZXNGbG93cyIsImNhdGVnb3JpZUlkIiwiY2F0ZWdvcmllc0Zvcm1zIiwiZm9ybU1hbmFnZXIiLCJnZXRDYXRlZ29yaWVzRm9ybXMiLCJnZXRVbkNhdGVnb3JpZXNGbG93cyIsInVuQ2F0ZWdvcmllc0Zvcm1zIiwiZ2V0VW5DYXRlZ29yaWVzRm9ybXMiLCJfZmllbGRzIiwic3RlcE1hbmFnZXIiLCJhbGxvd0JhdGNoIiwiaXNFeGlzdFN0ZXAiLCJsb2dnZXIiLCJMb2dnZXIiLCJoYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwIiwiZmllbGRfbWFwIiwiY3VycmVudEFwcHJvdmVzIiwiY3VycmVudFRyYWNlcyIsImdldEN1cnJlbnRUcmFjZSIsImluYm94X3VzZXIiLCJGSUVMRFMiLCJjYXRlZ29yeUZsb3dzIiwiaW5ib3hfaW5zdGFuY2VzIiwidW5DYXRlZ29yeUZsb3dzIiwiYXBwcm92ZV9zdGFydF9kYXRlIiwicHVibGlzaCIsInJlYWR5IiwiYXBwIiwicHVibGlzaENvbXBvc2l0ZSIsInRhYmxlTmFtZSIsImlkcyIsIk9wdGlvbmFsIiwidW5ibG9jayIsImNoaWxkcmVuIiwiY3JlYXRlVGVtcGxhdGVGb3JtQW5kRmxvdyIsImRpc3RyaWJ1dGVfdG9fc2VsZiIsInZlcnNpb25JZCIsImhhbmRsZSIsImxhdGVzdCIsIm9ic2VydmVDaGFuZ2VzIiwiY2hhbmdlZCIsImFkZGVkIiwib25TdG9wIiwic3RvcCIsImRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbiIsImFsbG93X3NlbGVjdF9zdGVwIiwiZ2V0TWluaUluc3RhbmNlIiwiZ2V0TXlhcHByb3ZlTW9kaWZpZWQiLCJpbnN0YW5jZV9maWVsZHNfMCIsIm5lZWRDaGFuZ2UiLCJ0cmlnZ2VyQ2hhbmdlRmllbGRzIiwidHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcyIsIm15QXBwcm92ZU1vZGlmaWVkcyIsIl9pbnN0YW5jZUlkIiwiY2hhbmdlRmllbGRzIiwiX2NoYW5nZSIsIl9yZXYiLCJfbXlfYXBwcm92ZV9tb2RpZmllZHMiLCJnZXRJbnN0YW5jZVRyYWNlcyIsIl9pbnNJZCIsImFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZSIsImxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGUiLCJpbnN0YW5jZWlkIiwiZGF0YU1hcCIsIm9wZXJhdGlvbiIsInJhd0NvbGxlY3Rpb24iLCJhZ2dyZWdhdGUiLCJ0b0FycmF5IiwiZG9jIiwiZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlIiwiZ2V0U3RlcEN1cnJlbnROYW1lIiwibm90RmluaXNoZWRUcmFjZXMiLCJzdGVwQ3VycmVudE5hbWUiLCIkc2xpY2UiLCJteUxhc3RGaW5pc2hlZEFwcHJvdmUiLCJhZ2VudF91c2VyX25hbWUiLCJteV9maW5pc2hfZGF0ZSIsImlzX2NjIiwiY2NfY291bnQiLCJpbnN0YW5jZV9pZHMiLCJyZWxhdGVkX2luc3RhbmNlX2lkcyIsIl9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlIiwiX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUiLCJfaXRlbXMiLCIkbWF0Y2giLCIkZ3JvdXAiLCIkc3VtIiwiX2NoYW5nZURhdGEiLCJfZmxvd3NEYXRhIiwiX2luaXQiLCJkYXRhSXRlbSIsImZsb3dfaW5zdGFuY2UiLCJvYnNlcnZlIiwiZ2V0Q29sbGVjdGlvbiIsIndvcmtmbG93VGVtcGxhdGUiLCJhYnNvbHV0ZV9wYXRoX2NuIiwiYWJzb2x1dGVfcGF0aF91cyIsImZpbGVzTGlzdF9jbiIsImZpbGVzTGlzdF91cyIsIm1pbWUiLCJwYXRoX2NuIiwicGF0aF91cyIsInJlYWRGaWxlTGlzdCIsInBhdGhEaXIiLCJmaWxlc0xpc3QiLCJyZWFkZGlyU3luYyIsInN0YXQiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5Iiwid29ya2Zsb3dUZW1wbGF0ZXMiLCJleGlzdHNTeW5jIiwicmVhZEZpbGVTeW5jIiwiZ29fbmV4dCIsInJ1bGUiLCJzY2hlZHVsZSIsImNyb24iLCJhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24iLCJzY2hlZHVsZUpvYiIsImJpbmRFbnZpcm9ubWVudCIsInByb2Nlc3NfZGVsZWdhdGlvbl9ydWxlcyIsImVuZF90aW1lIiwidGltZW91dEF1dG9TdWJtaXQiLCJUYWJ1bGFyVGFibGVzIiwicmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhciIsIlRhYnVsYXIiLCJUYWJsZSIsIm9yZGVyYWJsZSIsInJlbmRlciIsImlucHV0Iiwic3RlcF9jdXJyZW50X25hbWUiLCJkb20iLCJsZW5ndGhDaGFuZ2UiLCJleHRyYUZpZWxkcyIsInBhZ2VMZW5ndGgiLCJpbmZvIiwic2VhcmNoaW5nIiwicmVzcG9uc2l2ZSIsImRldGFpbHMiLCJhdXRvV2lkdGgiLCJjaGFuZ2VTZWxlY3RvciIsImN1clNwYWNlVXNlciIsIiRhbmQiLCJmbCIsIkdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zIiwiX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zIiwiX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyIsIl9oYW5kbGVMaXN0RmllbGRzIiwiaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhciIsIm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyIiwidXBkYXRlVGFidWxhclRpdGxlIiwic3VicyIsIlN1YnNNYW5hZ2VyIiwiaW5zX2ZpZWxkcyIsInB1YiIsIm9uVW5sb2FkIiwiaW5zdGFuY2VfbGlzdCIsIl90YWJsZUNvbHVtbnMiLCJkcmF3Q2FsbGJhY2siLCJlbGxpcHNpc0xpbmsiLCJlbXB0eVRkIiwiY29sU3BhbiIsImlzUGFkIiwicGVyZmVjdFNjcm9sbGJhciIsIm9JbnN0YW5jZSIsImF0dHIiLCJjbGljayIsImdvUGFnZSIsImhlaWdodCIsInBhZ2VzIiwiY2VpbCIsImZuUmVjb3Jkc0Rpc3BsYXkiLCJfaURpc3BsYXlMZW5ndGgiLCJEYXRhVGFibGUiLCJwYWdlIiwiZHJhdyIsImJsdXIiLCJjdXJyZW50UGFnZSIsImtleWRvd24iLCJrZXlDb2RlIiwiY3JlYXRlZFJvdyIsInJvdyIsImRhdGFJbmRleCIsIkZsb3dSb3V0ZXIiLCJzZXRBdHRyaWJ1dGUiLCJhZ2VudF92aWV3IiwiY2NfdmlldyIsImluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MiLCJpc0Zhdm9yaXRlU2VsZWN0ZWQiLCJtb2RpZmllZEZyb21Ob3ciLCJtb2RpZmllZFN0cmluZyIsInByaW9yaXR5SWNvbiIsInByaW9yaXR5SWNvbkNsYXNzIiwicHJpb3JpdHlWYWx1ZSIsInN0ZXBfY3VycmVudF9uYW1lX3ZpZXciLCJ1bnJlYWQiLCJtb21lbnRSZWFjdGl2ZUZyb21Ob3ciLCJGYXZvcml0ZXMiLCJpc1JlY29yZFNlbGVjdGVkIiwidmlzaWJsZSIsImNjX3RhZyIsImxlbmd0aE1lbnUiLCJwYWdpbmdUeXBlIiwiaXNfbGlzdF9kaXNwbGF5IiwiZmlsdGVyZWRSZWNvcmRJZHMiLCJvbGRfZmlsdGVyZWRSZWNvcmRJZHMiLCJmaW5kT3B0aW9ucyIsImFnX3NvcnQiLCJhZ2dyZWdhdGVfb3BlcmF0aW9uIiwiYXN5bmNfYWdncmVnYXRlIiwiczFfMCIsInMxXzEiLCIkcHJvamVjdCIsIiR1bndpbmQiLCIkZmlyc3QiLCIkc29ydCIsIiRza2lwIiwiJGxpbWl0IiwiY2IiLCIkbGFzdCIsIm91dGJveF9pbnN0YW5jZXMiLCJmbG93SW5zdGFuY2VzIiwiUmVhY3RpdmVWYXIiLCJfY2hhbmdlT3JkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxnQkFBSjtBQUFxQkMsTUFBTSxDQUFDQyxJQUFQLENBQVksb0NBQVosRUFBaUQ7QUFBQ0Ysa0JBQWdCLENBQUNHLENBQUQsRUFBRztBQUFDSCxvQkFBZ0IsR0FBQ0csQ0FBakI7QUFBbUI7O0FBQXhDLENBQWpELEVBQTJGLENBQTNGO0FBQ3JCSCxnQkFBZ0IsQ0FBQztBQUNoQixtQkFBaUIsUUFERDtBQUVoQkksU0FBTyxFQUFFLFFBRk87QUFHaEIsWUFBVSxTQUhNO0FBSWhCQyxRQUFNLEVBQUU7QUFKUSxDQUFELEVBS2Isa0JBTGEsQ0FBaEIsQzs7Ozs7Ozs7Ozs7QUNEQTs7Ozs7Ozs7Ozs7OztBQWFDLFdBQVVDLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCO0FBQ3pCLGVBRHlCLENBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxNQUFNLENBQUNDLEdBQTNDLEVBQWdEO0FBQy9DO0FBQ0FELFVBQU0sQ0FBQyxDQUFDLFlBQUQsRUFBZSxRQUFmLEVB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R0FBOEYsTUFBOUY7QUFDQSxhQUFPQSxNQUFQO0FBTEQ7QUFBQSxHQUREO0FDaUhBLEMiLCJmaWxlIjoiL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja05wbVZlcnNpb25zIH0gZnJvbSAnbWV0ZW9yL3RtZWFzZGF5OmNoZWNrLW5wbS12ZXJzaW9ucyc7XG5jaGVja05wbVZlcnNpb25zKHtcblx0XCJub2RlLXNjaGVkdWxlXCI6IFwiXjEuMy4xXCIsXG5cdGNvb2tpZXM6IFwiXjAuNi4yXCIsXG5cdFwieG1sMmpzXCI6IFwiXjAuNC4xOVwiLFxuXHRta2RpcnA6IFwiXjAuMy41XCIsXG59LCAnc3RlZWRvczp3b3JrZmxvdycpOyIsIi8qIVxuICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMc1xuICpcbiAqIFZlcnNpb246IDEuMTcuMFxuICpcbiAqIEF1dGhvcjogUm9kbmV5IFJlaG1cbiAqIFdlYjogaHR0cDovL21lZGlhbGl6ZS5naXRodWIuaW8vVVJJLmpzL1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyXG4gKiAgIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqICAgR1BMIHYzIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9HUEwtMy4wXG4gKlxuICovXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcblx0Ly8gaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHQvLyAgIC8vIE5vZGVcblx0Ly8gICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnLi9wdW55Y29kZScpLCByZXF1aXJlKCcuL0lQdjYnKSwgcmVxdWlyZSgnLi9TZWNvbmRMZXZlbERvbWFpbnMnKSk7XG5cdC8vIH0gZWxzZVxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuXHRcdGRlZmluZShbJy4vcHVueWNvZGUnLCAnLi9JUHY2JywgJy4vU2Vjb25kTGV2ZWxEb21haW5zJ10sIGZhY3RvcnkpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG5cdFx0cm9vdC5VUkkgPSBmYWN0b3J5KHJvb3QucHVueWNvZGUsIHJvb3QuSVB2Niwgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMsIHJvb3QpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChwdW55Y29kZSwgSVB2NiwgU0xELCByb290KSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LypnbG9iYWwgbG9jYXRpb24sIGVzY2FwZSwgdW5lc2NhcGUgKi9cblx0Ly8gRklYTUU6IHYyLjAuMCByZW5hbWNlIG5vbi1jYW1lbENhc2UgcHJvcGVydGllcyB0byB1cHBlcmNhc2Vcblx0Lypqc2hpbnQgY2FtZWxjYXNlOiBmYWxzZSAqL1xuXG5cdC8vIHNhdmUgY3VycmVudCBVUkkgdmFyaWFibGUsIGlmIGFueVxuXHR2YXIgX1VSSSA9IHJvb3QgJiYgcm9vdC5VUkk7XG5cblx0ZnVuY3Rpb24gVVJJKHVybCwgYmFzZSkge1xuXHRcdHZhciBfdXJsU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDE7XG5cdFx0dmFyIF9iYXNlU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG5cblx0XHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0XHRpZiAoISh0aGlzIGluc3RhbmNlb2YgVVJJKSkge1xuXHRcdFx0aWYgKF91cmxTdXBwbGllZCkge1xuXHRcdFx0XHRpZiAoX2Jhc2VTdXBwbGllZCkge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgVVJJKHVybCwgYmFzZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbmV3IFVSSSh1cmwpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IFVSSSgpO1xuXHRcdH1cblxuXHRcdGlmICh1cmwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKF91cmxTdXBwbGllZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmRlZmluZWQgaXMgbm90IGEgdmFsaWQgYXJndW1lbnQgZm9yIFVSSScpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHR1cmwgPSBsb2NhdGlvbi5ocmVmICsgJyc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cmwgPSAnJztcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmhyZWYodXJsKTtcblxuXHRcdC8vIHJlc29sdmUgdG8gYmFzZSBhY2NvcmRpbmcgdG8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3VybC9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCNjb25zdHJ1Y3RvclxuXHRcdGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLmFic29sdXRlVG8oYmFzZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRVUkkudmVyc2lvbiA9ICcxLjE3LjAnO1xuXG5cdHZhciBwID0gVVJJLnByb3RvdHlwZTtcblx0dmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gZXNjYXBlUmVnRXgoc3RyaW5nKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvY29tbWl0Lzg1YWMyMTc4M2MxMWY4Y2NhYjA2MTA2ZGJhOTczNWEzMWE4NjkyNGQjY29tbWl0Y29tbWVudC04MjE5NjNcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyhbLiorP149IToke30oKXxbXFxdXFwvXFxcXF0pL2csICdcXFxcJDEnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFR5cGUodmFsdWUpIHtcblx0XHQvLyBJRTggZG9lc24ndCByZXR1cm4gW09iamVjdCBVbmRlZmluZWRdIGJ1dCBbT2JqZWN0IE9iamVjdF0gZm9yIHVuZGVmaW5lZCB2YWx1ZVxuXHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gJ1VuZGVmaW5lZCc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFN0cmluZyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpKS5zbGljZSg4LCAtMSk7XG5cdH1cblxuXHRmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuXHRcdHJldHVybiBnZXRUeXBlKG9iaikgPT09ICdBcnJheSc7XG5cdH1cblxuXHRmdW5jdGlvbiBmaWx0ZXJBcnJheVZhbHVlcyhkYXRhLCB2YWx1ZSkge1xuXHRcdHZhciBsb29rdXAgPSB7fTtcblx0XHR2YXIgaSwgbGVuZ3RoO1xuXG5cdFx0aWYgKGdldFR5cGUodmFsdWUpID09PSAnUmVnRXhwJykge1xuXHRcdFx0bG9va3VwID0gbnVsbDtcblx0XHR9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsb29rdXBbdmFsdWVbaV1dID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9va3VwW3ZhbHVlXSA9IHRydWU7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gZGF0YS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0Lypqc2hpbnQgbGF4YnJlYWs6IHRydWUgKi9cblx0XHRcdHZhciBfbWF0Y2ggPSBsb29rdXAgJiYgbG9va3VwW2RhdGFbaV1dICE9PSB1bmRlZmluZWRcblx0XHRcdFx0fHwgIWxvb2t1cCAmJiB2YWx1ZS50ZXN0KGRhdGFbaV0pO1xuXHRcdFx0Lypqc2hpbnQgbGF4YnJlYWs6IGZhbHNlICovXG5cdFx0XHRpZiAoX21hdGNoKSB7XG5cdFx0XHRcdGRhdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRsZW5ndGgtLTtcblx0XHRcdFx0aS0tO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXJyYXlDb250YWlucyhsaXN0LCB2YWx1ZSkge1xuXHRcdHZhciBpLCBsZW5ndGg7XG5cblx0XHQvLyB2YWx1ZSBtYXkgYmUgc3RyaW5nLCBudW1iZXIsIGFycmF5LCByZWdleHBcblx0XHRpZiAoaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdC8vIE5vdGU6IHRoaXMgY2FuIGJlIG9wdGltaXplZCB0byBPKG4pIChpbnN0ZWFkIG9mIGN1cnJlbnQgTyhtICogbikpXG5cdFx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoIWFycmF5Q29udGFpbnMobGlzdCwgdmFsdWVbaV0pKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHZhciBfdHlwZSA9IGdldFR5cGUodmFsdWUpO1xuXHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChfdHlwZSA9PT0gJ1JlZ0V4cCcpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBsaXN0W2ldID09PSAnc3RyaW5nJyAmJiBsaXN0W2ldLm1hdGNoKHZhbHVlKSkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGxpc3RbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFycmF5c0VxdWFsKG9uZSwgdHdvKSB7XG5cdFx0aWYgKCFpc0FycmF5KG9uZSkgfHwgIWlzQXJyYXkodHdvKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGFycmF5cyBjYW4ndCBiZSBlcXVhbCBpZiB0aGV5IGhhdmUgZGlmZmVyZW50IGFtb3VudCBvZiBjb250ZW50XG5cdFx0aWYgKG9uZS5sZW5ndGggIT09IHR3by5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRvbmUuc29ydCgpO1xuXHRcdHR3by5zb3J0KCk7XG5cblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IG9uZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdGlmIChvbmVbaV0gIT09IHR3b1tpXSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmltU2xhc2hlcyh0ZXh0KSB7XG5cdFx0dmFyIHRyaW1fZXhwcmVzc2lvbiA9IC9eXFwvK3xcXC8rJC9nO1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UodHJpbV9leHByZXNzaW9uLCAnJyk7XG5cdH1cblxuXHRVUkkuX3BhcnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHByb3RvY29sOiBudWxsLFxuXHRcdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRcdGhvc3RuYW1lOiBudWxsLFxuXHRcdFx0dXJuOiBudWxsLFxuXHRcdFx0cG9ydDogbnVsbCxcblx0XHRcdHBhdGg6IG51bGwsXG5cdFx0XHRxdWVyeTogbnVsbCxcblx0XHRcdGZyYWdtZW50OiBudWxsLFxuXHRcdFx0Ly8gc3RhdGVcblx0XHRcdGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVyczogVVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyxcblx0XHRcdGVzY2FwZVF1ZXJ5U3BhY2U6IFVSSS5lc2NhcGVRdWVyeVNwYWNlXG5cdFx0fTtcblx0fTtcblx0Ly8gc3RhdGU6IGFsbG93IGR1cGxpY2F0ZSBxdWVyeSBwYXJhbWV0ZXJzIChhPTEmYT0xKVxuXHRVUkkuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gZmFsc2U7XG5cdC8vIHN0YXRlOiByZXBsYWNlcyArIHdpdGggJTIwIChzcGFjZSBpbiBxdWVyeSBzdHJpbmdzKVxuXHRVUkkuZXNjYXBlUXVlcnlTcGFjZSA9IHRydWU7XG5cdC8vIHN0YXRpYyBwcm9wZXJ0aWVzXG5cdFVSSS5wcm90b2NvbF9leHByZXNzaW9uID0gL15bYS16XVthLXowLTkuKy1dKiQvaTtcblx0VVJJLmlkbl9leHByZXNzaW9uID0gL1teYS16MC05XFwuLV0vaTtcblx0VVJJLnB1bnljb2RlX2V4cHJlc3Npb24gPSAvKHhuLS0pL2k7XG5cdC8vIHdlbGwsIDMzMy40NDQuNTU1LjY2NiBtYXRjaGVzLCBidXQgaXQgc3VyZSBhaW4ndCBubyBJUHY0IC0gZG8gd2UgY2FyZT9cblx0VVJJLmlwNF9leHByZXNzaW9uID0gL15cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfSQvO1xuXHQvLyBjcmVkaXRzIHRvIFJpY2ggQnJvd25cblx0Ly8gc291cmNlOiBodHRwOi8vZm9ydW1zLmludGVybWFwcGVyLmNvbS92aWV3dG9waWMucGhwP3A9MTA5NiMxMDk2XG5cdC8vIHNwZWNpZmljYXRpb246IGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzQyOTEudHh0XG5cdFVSSS5pcDZfZXhwcmVzc2lvbiA9IC9eXFxzKigoKFswLTlBLUZhLWZdezEsNH06KXs3fShbMC05QS1GYS1mXXsxLDR9fDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs2fSg6WzAtOUEtRmEtZl17MSw0fXwoKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezV9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsMn0pfDooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezR9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsM30pfCgoOlswLTlBLUZhLWZdezEsNH0pPzooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXszfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDR9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDJ9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezJ9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNX0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsM306KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7MX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw2fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw0fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoOigoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDd9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDV9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpKSglLispP1xccyokLztcblx0Ly8gZXhwcmVzc2lvbiB1c2VkIGlzIFwiZ3J1YmVyIHJldmlzZWRcIiAoQGdydWJlciB2MikgZGV0ZXJtaW5lZCB0byBiZSB0aGVcblx0Ly8gYmVzdCBzb2x1dGlvbiBpbiBhIHJlZ2V4LWdvbGYgd2UgZGlkIGEgY291cGxlIG9mIGFnZXMgYWdvIGF0XG5cdC8vICogaHR0cDovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXhcblx0Ly8gKiBodHRwOi8vcm9kbmV5cmVobS5kZS90L3VybC1yZWdleC5odG1sXG5cdFVSSS5maW5kX3VyaV9leHByZXNzaW9uID0gL1xcYigoPzpbYS16XVtcXHctXSs6KD86XFwvezEsM318W2EtejAtOSVdKXx3d3dcXGR7MCwzfVsuXXxbYS16MC05LlxcLV0rWy5dW2Etel17Miw0fVxcLykoPzpbXlxccygpPD5dK3xcXCgoW15cXHMoKTw+XSt8KFxcKFteXFxzKCk8Pl0rXFwpKSkqXFwpKSsoPzpcXCgoW15cXHMoKTw+XSt8KFxcKFteXFxzKCk8Pl0rXFwpKSkqXFwpfFteXFxzYCEoKVxcW1xcXXt9OzonXCIuLDw+P8KrwrvigJzigJ3igJjigJldKSkvaWc7XG5cdFVSSS5maW5kVXJpID0ge1xuXHRcdC8vIHZhbGlkIFwic2NoZW1lOi8vXCIgb3IgXCJ3d3cuXCJcblx0XHRzdGFydDogL1xcYig/OihbYS16XVthLXowLTkuKy1dKjpcXC9cXC8pfHd3d1xcLikvZ2ksXG5cdFx0Ly8gZXZlcnl0aGluZyB1cCB0byB0aGUgbmV4dCB3aGl0ZXNwYWNlXG5cdFx0ZW5kOiAvW1xcc1xcclxcbl18JC8sXG5cdFx0Ly8gdHJpbSB0cmFpbGluZyBwdW5jdHVhdGlvbiBjYXB0dXJlZCBieSBlbmQgUmVnRXhwXG5cdFx0dHJpbTogL1tgISgpXFxbXFxde307OidcIi4sPD4/wqvCu+KAnOKAneKAnuKAmOKAmV0rJC9cblx0fTtcblx0Ly8gaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy5odG1sXG5cdC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9UQ1BfYW5kX1VEUF9wb3J0X251bWJlcnMjV2VsbC1rbm93bl9wb3J0c1xuXHRVUkkuZGVmYXVsdFBvcnRzID0ge1xuXHRcdGh0dHA6ICc4MCcsXG5cdFx0aHR0cHM6ICc0NDMnLFxuXHRcdGZ0cDogJzIxJyxcblx0XHRnb3BoZXI6ICc3MCcsXG5cdFx0d3M6ICc4MCcsXG5cdFx0d3NzOiAnNDQzJ1xuXHR9O1xuXHQvLyBhbGxvd2VkIGhvc3RuYW1lIGNoYXJhY3RlcnMgYWNjb3JkaW5nIHRvIFJGQyAzOTg2XG5cdC8vIEFMUEhBIERJR0lUIFwiLVwiIFwiLlwiIFwiX1wiIFwiflwiIFwiIVwiIFwiJFwiIFwiJlwiIFwiJ1wiIFwiKFwiIFwiKVwiIFwiKlwiIFwiK1wiIFwiLFwiIFwiO1wiIFwiPVwiICVlbmNvZGVkXG5cdC8vIEkndmUgbmV2ZXIgc2VlbiBhIChub24tSUROKSBob3N0bmFtZSBvdGhlciB0aGFuOiBBTFBIQSBESUdJVCAuIC1cblx0VVJJLmludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycyA9IC9bXmEtekEtWjAtOVxcLi1dLztcblx0Ly8gbWFwIERPTSBFbGVtZW50cyB0byB0aGVpciBVUkkgYXR0cmlidXRlXG5cdFVSSS5kb21BdHRyaWJ1dGVzID0ge1xuXHRcdCdhJzogJ2hyZWYnLFxuXHRcdCdibG9ja3F1b3RlJzogJ2NpdGUnLFxuXHRcdCdsaW5rJzogJ2hyZWYnLFxuXHRcdCdiYXNlJzogJ2hyZWYnLFxuXHRcdCdzY3JpcHQnOiAnc3JjJyxcblx0XHQnZm9ybSc6ICdhY3Rpb24nLFxuXHRcdCdpbWcnOiAnc3JjJyxcblx0XHQnYXJlYSc6ICdocmVmJyxcblx0XHQnaWZyYW1lJzogJ3NyYycsXG5cdFx0J2VtYmVkJzogJ3NyYycsXG5cdFx0J3NvdXJjZSc6ICdzcmMnLFxuXHRcdCd0cmFjayc6ICdzcmMnLFxuXHRcdCdpbnB1dCc6ICdzcmMnLCAvLyBidXQgb25seSBpZiB0eXBlPVwiaW1hZ2VcIlxuXHRcdCdhdWRpbyc6ICdzcmMnLFxuXHRcdCd2aWRlbyc6ICdzcmMnXG5cdH07XG5cdFVSSS5nZXREb21BdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlKSB7XG5cdFx0aWYgKCFub2RlIHx8ICFub2RlLm5vZGVOYW1lKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHQvLyA8aW5wdXQ+IHNob3VsZCBvbmx5IGV4cG9zZSBzcmMgZm9yIHR5cGU9XCJpbWFnZVwiXG5cdFx0aWYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIG5vZGUudHlwZSAhPT0gJ2ltYWdlJykge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gVVJJLmRvbUF0dHJpYnV0ZXNbbm9kZU5hbWVdO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGVzY2FwZUZvckR1bWJGaXJlZm94MzYodmFsdWUpIHtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvOTFcblx0XHRyZXR1cm4gZXNjYXBlKHZhbHVlKTtcblx0fVxuXG5cdC8vIGVuY29kaW5nIC8gZGVjb2RpbmcgYWNjb3JkaW5nIHRvIFJGQzM5ODZcblx0ZnVuY3Rpb24gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZykge1xuXHRcdC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2VuY29kZVVSSUNvbXBvbmVudFxuXHRcdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKVxuXHRcdFx0LnJlcGxhY2UoL1shJygpKl0vZywgZXNjYXBlRm9yRHVtYkZpcmVmb3gzNilcblx0XHRcdC5yZXBsYWNlKC9cXCovZywgJyUyQScpO1xuXHR9XG5cdFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7XG5cdFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XG5cdFVSSS5pc284ODU5ID0gZnVuY3Rpb24oKSB7XG5cdFx0VVJJLmVuY29kZSA9IGVzY2FwZTtcblx0XHRVUkkuZGVjb2RlID0gdW5lc2NhcGU7XG5cdH07XG5cdFVSSS51bmljb2RlID0gZnVuY3Rpb24oKSB7XG5cdFx0VVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcblx0XHRVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuXHR9O1xuXHRVUkkuY2hhcmFjdGVycyA9IHtcblx0XHRwYXRobmFtZToge1xuXHRcdFx0ZW5jb2RlOiB7XG5cdFx0XHRcdC8vIFJGQzM5ODYgMi4xOiBGb3IgY29uc2lzdGVuY3ksIFVSSSBwcm9kdWNlcnMgYW5kIG5vcm1hbGl6ZXJzIHNob3VsZFxuXHRcdFx0XHQvLyB1c2UgdXBwZXJjYXNlIGhleGFkZWNpbWFsIGRpZ2l0cyBmb3IgYWxsIHBlcmNlbnQtZW5jb2RpbmdzLlxuXHRcdFx0XHRleHByZXNzaW9uOiAvJSgyNHwyNnwyQnwyQ3wzQnwzRHwzQXw0MCkvaWcsXG5cdFx0XHRcdG1hcDoge1xuXHRcdFx0XHRcdC8vIC0uX34hJygpKlxuXHRcdFx0XHRcdCclMjQnOiAnJCcsXG5cdFx0XHRcdFx0JyUyNic6ICcmJyxcblx0XHRcdFx0XHQnJTJCJzogJysnLFxuXHRcdFx0XHRcdCclMkMnOiAnLCcsXG5cdFx0XHRcdFx0JyUzQic6ICc7Jyxcblx0XHRcdFx0XHQnJTNEJzogJz0nLFxuXHRcdFx0XHRcdCclM0EnOiAnOicsXG5cdFx0XHRcdFx0JyU0MCc6ICdAJ1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVjb2RlOiB7XG5cdFx0XHRcdGV4cHJlc3Npb246IC9bXFwvXFw/I10vZyxcblx0XHRcdFx0bWFwOiB7XG5cdFx0XHRcdFx0Jy8nOiAnJTJGJyxcblx0XHRcdFx0XHQnPyc6ICclM0YnLFxuXHRcdFx0XHRcdCcjJzogJyUyMydcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVzZXJ2ZWQ6IHtcblx0XHRcdGVuY29kZToge1xuXHRcdFx0XHQvLyBSRkMzOTg2IDIuMTogRm9yIGNvbnNpc3RlbmN5LCBVUkkgcHJvZHVjZXJzIGFuZCBub3JtYWxpemVycyBzaG91bGRcblx0XHRcdFx0Ly8gdXNlIHVwcGVyY2FzZSBoZXhhZGVjaW1hbCBkaWdpdHMgZm9yIGFsbCBwZXJjZW50LWVuY29kaW5ncy5cblx0XHRcdFx0ZXhwcmVzc2lvbjogLyUoMjF8MjN8MjR8MjZ8Mjd8Mjh8Mjl8MkF8MkJ8MkN8MkZ8M0F8M0J8M0R8M0Z8NDB8NUJ8NUQpL2lnLFxuXHRcdFx0XHRtYXA6IHtcblx0XHRcdFx0XHQvLyBnZW4tZGVsaW1zXG5cdFx0XHRcdFx0JyUzQSc6ICc6Jyxcblx0XHRcdFx0XHQnJTJGJzogJy8nLFxuXHRcdFx0XHRcdCclM0YnOiAnPycsXG5cdFx0XHRcdFx0JyUyMyc6ICcjJyxcblx0XHRcdFx0XHQnJTVCJzogJ1snLFxuXHRcdFx0XHRcdCclNUQnOiAnXScsXG5cdFx0XHRcdFx0JyU0MCc6ICdAJyxcblx0XHRcdFx0XHQvLyBzdWItZGVsaW1zXG5cdFx0XHRcdFx0JyUyMSc6ICchJyxcblx0XHRcdFx0XHQnJTI0JzogJyQnLFxuXHRcdFx0XHRcdCclMjYnOiAnJicsXG5cdFx0XHRcdFx0JyUyNyc6ICdcXCcnLFxuXHRcdFx0XHRcdCclMjgnOiAnKCcsXG5cdFx0XHRcdFx0JyUyOSc6ICcpJyxcblx0XHRcdFx0XHQnJTJBJzogJyonLFxuXHRcdFx0XHRcdCclMkInOiAnKycsXG5cdFx0XHRcdFx0JyUyQyc6ICcsJyxcblx0XHRcdFx0XHQnJTNCJzogJzsnLFxuXHRcdFx0XHRcdCclM0QnOiAnPSdcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dXJucGF0aDoge1xuXHRcdFx0Ly8gVGhlIGNoYXJhY3RlcnMgdW5kZXIgYGVuY29kZWAgYXJlIHRoZSBjaGFyYWN0ZXJzIGNhbGxlZCBvdXQgYnkgUkZDIDIxNDEgYXMgYmVpbmcgYWNjZXB0YWJsZVxuXHRcdFx0Ly8gZm9yIHVzYWdlIGluIGEgVVJOLiBSRkMyMTQxIGFsc28gY2FsbHMgb3V0IFwiLVwiLCBcIi5cIiwgYW5kIFwiX1wiIGFzIGFjY2VwdGFibGUgY2hhcmFjdGVycywgYnV0XG5cdFx0XHQvLyB0aGVzZSBhcmVuJ3QgZW5jb2RlZCBieSBlbmNvZGVVUklDb21wb25lbnQsIHNvIHdlIGRvbid0IGhhdmUgdG8gY2FsbCB0aGVtIG91dCBoZXJlLiBBbHNvXG5cdFx0XHQvLyBub3RlIHRoYXQgdGhlIGNvbG9uIGNoYXJhY3RlciBpcyBub3QgZmVhdHVyZWQgaW4gdGhlIGVuY29kaW5nIG1hcDsgdGhpcyBpcyBiZWNhdXNlIFVSSS5qc1xuXHRcdFx0Ly8gZ2l2ZXMgdGhlIGNvbG9ucyBpbiBVUk5zIHNlbWFudGljIG1lYW5pbmcgYXMgdGhlIGRlbGltaXRlcnMgb2YgcGF0aCBzZWdlbWVudHMsIGFuZCBzbyBpdFxuXHRcdFx0Ly8gc2hvdWxkIG5vdCBhcHBlYXIgdW5lbmNvZGVkIGluIGEgc2VnbWVudCBpdHNlbGYuXG5cdFx0XHQvLyBTZWUgYWxzbyB0aGUgbm90ZSBhYm92ZSBhYm91dCBSRkMzOTg2IGFuZCBjYXBpdGFsYWxpemVkIGhleCBkaWdpdHMuXG5cdFx0XHRlbmNvZGU6IHtcblx0XHRcdFx0ZXhwcmVzc2lvbjogLyUoMjF8MjR8Mjd8Mjh8Mjl8MkF8MkJ8MkN8M0J8M0R8NDApL2lnLFxuXHRcdFx0XHRtYXA6IHtcblx0XHRcdFx0XHQnJTIxJzogJyEnLFxuXHRcdFx0XHRcdCclMjQnOiAnJCcsXG5cdFx0XHRcdFx0JyUyNyc6ICdcXCcnLFxuXHRcdFx0XHRcdCclMjgnOiAnKCcsXG5cdFx0XHRcdFx0JyUyOSc6ICcpJyxcblx0XHRcdFx0XHQnJTJBJzogJyonLFxuXHRcdFx0XHRcdCclMkInOiAnKycsXG5cdFx0XHRcdFx0JyUyQyc6ICcsJyxcblx0XHRcdFx0XHQnJTNCJzogJzsnLFxuXHRcdFx0XHRcdCclM0QnOiAnPScsXG5cdFx0XHRcdFx0JyU0MCc6ICdAJ1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Ly8gVGhlc2UgY2hhcmFjdGVycyBhcmUgdGhlIGNoYXJhY3RlcnMgY2FsbGVkIG91dCBieSBSRkMyMTQxIGFzIFwicmVzZXJ2ZWRcIiBjaGFyYWN0ZXJzIHRoYXRcblx0XHRcdC8vIHNob3VsZCBuZXZlciBhcHBlYXIgaW4gYSBVUk4sIHBsdXMgdGhlIGNvbG9uIGNoYXJhY3RlciAoc2VlIG5vdGUgYWJvdmUpLlxuXHRcdFx0ZGVjb2RlOiB7XG5cdFx0XHRcdGV4cHJlc3Npb246IC9bXFwvXFw/IzpdL2csXG5cdFx0XHRcdG1hcDoge1xuXHRcdFx0XHRcdCcvJzogJyUyRicsXG5cdFx0XHRcdFx0Jz8nOiAnJTNGJyxcblx0XHRcdFx0XHQnIyc6ICclMjMnLFxuXHRcdFx0XHRcdCc6JzogJyUzQSdcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0VVJJLmVuY29kZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG5cdFx0dmFyIGVzY2FwZWQgPSBVUkkuZW5jb2RlKHN0cmluZyArICcnKTtcblx0XHRpZiAoZXNjYXBlUXVlcnlTcGFjZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRlc2NhcGVRdWVyeVNwYWNlID0gVVJJLmVzY2FwZVF1ZXJ5U3BhY2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVzY2FwZVF1ZXJ5U3BhY2UgPyBlc2NhcGVkLnJlcGxhY2UoLyUyMC9nLCAnKycpIDogZXNjYXBlZDtcblx0fTtcblx0VVJJLmRlY29kZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG5cdFx0c3RyaW5nICs9ICcnO1xuXHRcdGlmIChlc2NhcGVRdWVyeVNwYWNlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGVzY2FwZVF1ZXJ5U3BhY2UgPSBVUkkuZXNjYXBlUXVlcnlTcGFjZTtcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIFVSSS5kZWNvZGUoZXNjYXBlUXVlcnlTcGFjZSA/IHN0cmluZy5yZXBsYWNlKC9cXCsvZywgJyUyMCcpIDogc3RyaW5nKTtcblx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdC8vIHdlJ3JlIG5vdCBnb2luZyB0byBtZXNzIHdpdGggd2VpcmQgZW5jb2RpbmdzLFxuXHRcdFx0Ly8gZ2l2ZSB1cCBhbmQgcmV0dXJuIHRoZSB1bmRlY29kZWQgb3JpZ2luYWwgc3RyaW5nXG5cdFx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzg3XG5cdFx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzkyXG5cdFx0XHRyZXR1cm4gc3RyaW5nO1xuXHRcdH1cblx0fTtcblx0Ly8gZ2VuZXJhdGUgZW5jb2RlL2RlY29kZSBwYXRoIGZ1bmN0aW9uc1xuXHR2YXIgX3BhcnRzID0geydlbmNvZGUnOidlbmNvZGUnLCAnZGVjb2RlJzonZGVjb2RlJ307XG5cdHZhciBfcGFydDtcblx0dmFyIGdlbmVyYXRlQWNjZXNzb3IgPSBmdW5jdGlvbihfZ3JvdXAsIF9wYXJ0KSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuIFVSSVtfcGFydF0oc3RyaW5nICsgJycpLnJlcGxhY2UoVVJJLmNoYXJhY3RlcnNbX2dyb3VwXVtfcGFydF0uZXhwcmVzc2lvbiwgZnVuY3Rpb24oYykge1xuXHRcdFx0XHRcdHJldHVybiBVUkkuY2hhcmFjdGVyc1tfZ3JvdXBdW19wYXJ0XS5tYXBbY107XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHQvLyB3ZSdyZSBub3QgZ29pbmcgdG8gbWVzcyB3aXRoIHdlaXJkIGVuY29kaW5ncyxcblx0XHRcdFx0Ly8gZ2l2ZSB1cCBhbmQgcmV0dXJuIHRoZSB1bmRlY29kZWQgb3JpZ2luYWwgc3RyaW5nXG5cdFx0XHRcdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvODdcblx0XHRcdFx0Ly8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy85MlxuXHRcdFx0XHRyZXR1cm4gc3RyaW5nO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cblx0Zm9yIChfcGFydCBpbiBfcGFydHMpIHtcblx0XHRVUklbX3BhcnQgKyAnUGF0aFNlZ21lbnQnXSA9IGdlbmVyYXRlQWNjZXNzb3IoJ3BhdGhuYW1lJywgX3BhcnRzW19wYXJ0XSk7XG5cdFx0VVJJW19wYXJ0ICsgJ1VyblBhdGhTZWdtZW50J10gPSBnZW5lcmF0ZUFjY2Vzc29yKCd1cm5wYXRoJywgX3BhcnRzW19wYXJ0XSk7XG5cdH1cblxuXHR2YXIgZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24gPSBmdW5jdGlvbihfc2VwLCBfY29kaW5nRnVuY05hbWUsIF9pbm5lckNvZGluZ0Z1bmNOYW1lKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0Ly8gV2h5IHBhc3MgaW4gbmFtZXMgb2YgZnVuY3Rpb25zLCByYXRoZXIgdGhhbiB0aGUgZnVuY3Rpb24gb2JqZWN0cyB0aGVtc2VsdmVzPyBUaGVcblx0XHRcdC8vIGRlZmluaXRpb25zIG9mIHNvbWUgZnVuY3Rpb25zIChidXQgaW4gcGFydGljdWxhciwgVVJJLmRlY29kZSkgd2lsbCBvY2Nhc2lvbmFsbHkgY2hhbmdlIGR1ZVxuXHRcdFx0Ly8gdG8gVVJJLmpzIGhhdmluZyBJU084ODU5IGFuZCBVbmljb2RlIG1vZGVzLiBQYXNzaW5nIGluIHRoZSBuYW1lIGFuZCBnZXR0aW5nIGl0IHdpbGwgZW5zdXJlXG5cdFx0XHQvLyB0aGF0IHRoZSBmdW5jdGlvbnMgd2UgdXNlIGhlcmUgYXJlIFwiZnJlc2hcIi5cblx0XHRcdHZhciBhY3R1YWxDb2RpbmdGdW5jO1xuXHRcdFx0aWYgKCFfaW5uZXJDb2RpbmdGdW5jTmFtZSkge1xuXHRcdFx0XHRhY3R1YWxDb2RpbmdGdW5jID0gVVJJW19jb2RpbmdGdW5jTmFtZV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhY3R1YWxDb2RpbmdGdW5jID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFVSSVtfY29kaW5nRnVuY05hbWVdKFVSSVtfaW5uZXJDb2RpbmdGdW5jTmFtZV0oc3RyaW5nKSk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzZWdtZW50cyA9IChzdHJpbmcgKyAnJykuc3BsaXQoX3NlcCk7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRzZWdtZW50c1tpXSA9IGFjdHVhbENvZGluZ0Z1bmMoc2VnbWVudHNbaV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2VnbWVudHMuam9pbihfc2VwKTtcblx0XHR9O1xuXHR9O1xuXG5cdC8vIFRoaXMgdGFrZXMgcGxhY2Ugb3V0c2lkZSB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGRvbid0IHdhbnQsIGUuZy4sIGVuY29kZVVyblBhdGggZnVuY3Rpb25zLlxuXHRVUkkuZGVjb2RlUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCcvJywgJ2RlY29kZVBhdGhTZWdtZW50Jyk7XG5cdFVSSS5kZWNvZGVVcm5QYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oJzonLCAnZGVjb2RlVXJuUGF0aFNlZ21lbnQnKTtcblx0VVJJLnJlY29kZVBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignLycsICdlbmNvZGVQYXRoU2VnbWVudCcsICdkZWNvZGUnKTtcblx0VVJJLnJlY29kZVVyblBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignOicsICdlbmNvZGVVcm5QYXRoU2VnbWVudCcsICdkZWNvZGUnKTtcblxuXHRVUkkuZW5jb2RlUmVzZXJ2ZWQgPSBnZW5lcmF0ZUFjY2Vzc29yKCdyZXNlcnZlZCcsICdlbmNvZGUnKTtcblxuXHRVUkkucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XG5cdFx0dmFyIHBvcztcblx0XHRpZiAoIXBhcnRzKSB7XG5cdFx0XHRwYXJ0cyA9IHt9O1xuXHRcdH1cblx0XHQvLyBbcHJvdG9jb2xcIjovL1wiW3VzZXJuYW1lW1wiOlwicGFzc3dvcmRdXCJAXCJdaG9zdG5hbWVbXCI6XCJwb3J0XVwiL1wiP11bcGF0aF1bXCI/XCJxdWVyeXN0cmluZ11bXCIjXCJmcmFnbWVudF1cblxuXHRcdC8vIGV4dHJhY3QgZnJhZ21lbnRcblx0XHRwb3MgPSBzdHJpbmcuaW5kZXhPZignIycpO1xuXHRcdGlmIChwb3MgPiAtMSkge1xuXHRcdFx0Ly8gZXNjYXBpbmc/XG5cdFx0XHRwYXJ0cy5mcmFnbWVudCA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSkgfHwgbnVsbDtcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTtcblx0XHR9XG5cblx0XHQvLyBleHRyYWN0IHF1ZXJ5XG5cdFx0cG9zID0gc3RyaW5nLmluZGV4T2YoJz8nKTtcblx0XHRpZiAocG9zID4gLTEpIHtcblx0XHRcdC8vIGVzY2FwaW5nP1xuXHRcdFx0cGFydHMucXVlcnkgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpIHx8IG51bGw7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcyk7XG5cdFx0fVxuXG5cdFx0Ly8gZXh0cmFjdCBwcm90b2NvbFxuXHRcdGlmIChzdHJpbmcuc3Vic3RyaW5nKDAsIDIpID09PSAnLy8nKSB7XG5cdFx0XHQvLyByZWxhdGl2ZS1zY2hlbWVcblx0XHRcdHBhcnRzLnByb3RvY29sID0gbnVsbDtcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMik7XG5cdFx0XHQvLyBleHRyYWN0IFwidXNlcjpwYXNzQGhvc3Q6cG9ydFwiXG5cdFx0XHRzdHJpbmcgPSBVUkkucGFyc2VBdXRob3JpdHkoc3RyaW5nLCBwYXJ0cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBvcyA9IHN0cmluZy5pbmRleE9mKCc6Jyk7XG5cdFx0XHRpZiAocG9zID4gLTEpIHtcblx0XHRcdFx0cGFydHMucHJvdG9jb2wgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykgfHwgbnVsbDtcblx0XHRcdFx0aWYgKHBhcnRzLnByb3RvY29sICYmICFwYXJ0cy5wcm90b2NvbC5tYXRjaChVUkkucHJvdG9jb2xfZXhwcmVzc2lvbikpIHtcblx0XHRcdFx0XHQvLyA6IG1heSBiZSB3aXRoaW4gdGhlIHBhdGhcblx0XHRcdFx0XHRwYXJ0cy5wcm90b2NvbCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fSBlbHNlIGlmIChzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEsIHBvcyArIDMpID09PSAnLy8nKSB7XG5cdFx0XHRcdFx0c3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAzKTtcblxuXHRcdFx0XHRcdC8vIGV4dHJhY3QgXCJ1c2VyOnBhc3NAaG9zdDpwb3J0XCJcblx0XHRcdFx0XHRzdHJpbmcgPSBVUkkucGFyc2VBdXRob3JpdHkoc3RyaW5nLCBwYXJ0cyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTtcblx0XHRcdFx0XHRwYXJ0cy51cm4gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gd2hhdCdzIGxlZnQgbXVzdCBiZSB0aGUgcGF0aFxuXHRcdHBhcnRzLnBhdGggPSBzdHJpbmc7XG5cblx0XHQvLyBhbmQgd2UncmUgZG9uZVxuXHRcdHJldHVybiBwYXJ0cztcblx0fTtcblx0VVJJLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcblx0XHQvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cblx0XHQvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcblx0XHQvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9ibG9iLzM4NmZkMjRmNDliMGU5ZDFhOGEwNzY1OTJhNDA0MTY4ZmFlZWNjMzQvbGliL3VybC5qcyNMMTE1LUwxMjRcblx0XHQvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL3B1bGwvMjMzXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcblxuXHRcdC8vIGV4dHJhY3QgaG9zdDpwb3J0XG5cdFx0dmFyIHBvcyA9IHN0cmluZy5pbmRleE9mKCcvJyk7XG5cdFx0dmFyIGJyYWNrZXRQb3M7XG5cdFx0dmFyIHQ7XG5cblx0XHRpZiAocG9zID09PSAtMSkge1xuXHRcdFx0cG9zID0gc3RyaW5nLmxlbmd0aDtcblx0XHR9XG5cblx0XHRpZiAoc3RyaW5nLmNoYXJBdCgwKSA9PT0gJ1snKSB7XG5cdFx0XHQvLyBJUHY2IGhvc3QgLSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLTZtYW4tdGV4dC1hZGRyLXJlcHJlc2VudGF0aW9uLTA0I3NlY3Rpb24tNlxuXHRcdFx0Ly8gSSBjbGFpbSBtb3N0IGNsaWVudCBzb2Z0d2FyZSBicmVha3Mgb24gSVB2NiBhbnl3YXlzLiBUbyBzaW1wbGlmeSB0aGluZ3MsIFVSSSBvbmx5IGFjY2VwdHNcblx0XHRcdC8vIElQdjYrcG9ydCBpbiB0aGUgZm9ybWF0IFsyMDAxOmRiODo6MV06ODAgKGZvciB0aGUgdGltZSBiZWluZylcblx0XHRcdGJyYWNrZXRQb3MgPSBzdHJpbmcuaW5kZXhPZignXScpO1xuXHRcdFx0cGFydHMuaG9zdG5hbWUgPSBzdHJpbmcuc3Vic3RyaW5nKDEsIGJyYWNrZXRQb3MpIHx8IG51bGw7XG5cdFx0XHRwYXJ0cy5wb3J0ID0gc3RyaW5nLnN1YnN0cmluZyhicmFja2V0UG9zICsgMiwgcG9zKSB8fCBudWxsO1xuXHRcdFx0aWYgKHBhcnRzLnBvcnQgPT09ICcvJykge1xuXHRcdFx0XHRwYXJ0cy5wb3J0ID0gbnVsbDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGZpcnN0Q29sb24gPSBzdHJpbmcuaW5kZXhPZignOicpO1xuXHRcdFx0dmFyIGZpcnN0U2xhc2ggPSBzdHJpbmcuaW5kZXhPZignLycpO1xuXHRcdFx0dmFyIG5leHRDb2xvbiA9IHN0cmluZy5pbmRleE9mKCc6JywgZmlyc3RDb2xvbiArIDEpO1xuXHRcdFx0aWYgKG5leHRDb2xvbiAhPT0gLTEgJiYgKGZpcnN0U2xhc2ggPT09IC0xIHx8IG5leHRDb2xvbiA8IGZpcnN0U2xhc2gpKSB7XG5cdFx0XHRcdC8vIElQdjYgaG9zdCBjb250YWlucyBtdWx0aXBsZSBjb2xvbnMgLSBidXQgbm8gcG9ydFxuXHRcdFx0XHQvLyB0aGlzIG5vdGF0aW9uIGlzIGFjdHVhbGx5IG5vdCBhbGxvd2VkIGJ5IFJGQyAzOTg2LCBidXQgd2UncmUgYSBsaWJlcmFsIHBhcnNlclxuXHRcdFx0XHRwYXJ0cy5ob3N0bmFtZSA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsO1xuXHRcdFx0XHRwYXJ0cy5wb3J0ID0gbnVsbDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoJzonKTtcblx0XHRcdFx0cGFydHMuaG9zdG5hbWUgPSB0WzBdIHx8IG51bGw7XG5cdFx0XHRcdHBhcnRzLnBvcnQgPSB0WzFdIHx8IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHBhcnRzLmhvc3RuYW1lICYmIHN0cmluZy5zdWJzdHJpbmcocG9zKS5jaGFyQXQoMCkgIT09ICcvJykge1xuXHRcdFx0cG9zKys7XG5cdFx0XHRzdHJpbmcgPSAnLycgKyBzdHJpbmc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0cmluZy5zdWJzdHJpbmcocG9zKSB8fCAnLyc7XG5cdH07XG5cdFVSSS5wYXJzZUF1dGhvcml0eSA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcblx0XHRzdHJpbmcgPSBVUkkucGFyc2VVc2VyaW5mbyhzdHJpbmcsIHBhcnRzKTtcblx0XHRyZXR1cm4gVVJJLnBhcnNlSG9zdChzdHJpbmcsIHBhcnRzKTtcblx0fTtcblx0VVJJLnBhcnNlVXNlcmluZm8gPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XG5cdFx0Ly8gZXh0cmFjdCB1c2VybmFtZTpwYXNzd29yZFxuXHRcdHZhciBmaXJzdFNsYXNoID0gc3RyaW5nLmluZGV4T2YoJy8nKTtcblx0XHR2YXIgcG9zID0gc3RyaW5nLmxhc3RJbmRleE9mKCdAJywgZmlyc3RTbGFzaCA+IC0xID8gZmlyc3RTbGFzaCA6IHN0cmluZy5sZW5ndGggLSAxKTtcblx0XHR2YXIgdDtcblxuXHRcdC8vIGF1dGhvcml0eUAgbXVzdCBjb21lIGJlZm9yZSAvcGF0aFxuXHRcdGlmIChwb3MgPiAtMSAmJiAoZmlyc3RTbGFzaCA9PT0gLTEgfHwgcG9zIDwgZmlyc3RTbGFzaCkpIHtcblx0XHRcdHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoJzonKTtcblx0XHRcdHBhcnRzLnVzZXJuYW1lID0gdFswXSA/IFVSSS5kZWNvZGUodFswXSkgOiBudWxsO1xuXHRcdFx0dC5zaGlmdCgpO1xuXHRcdFx0cGFydHMucGFzc3dvcmQgPSB0WzBdID8gVVJJLmRlY29kZSh0LmpvaW4oJzonKSkgOiBudWxsO1xuXHRcdFx0c3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFydHMudXNlcm5hbWUgPSBudWxsO1xuXHRcdFx0cGFydHMucGFzc3dvcmQgPSBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiBzdHJpbmc7XG5cdH07XG5cdFVSSS5wYXJzZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG5cdFx0aWYgKCFzdHJpbmcpIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHQvLyB0aHJvdyBvdXQgdGhlIGZ1bmt5IGJ1c2luZXNzIC0gXCI/XCJbbmFtZVwiPVwidmFsdWVcIiZcIl0rXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoLyYrL2csICcmJykucmVwbGFjZSgvXlxcPyomKnwmKyQvZywgJycpO1xuXG5cdFx0aWYgKCFzdHJpbmcpIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHR2YXIgaXRlbXMgPSB7fTtcblx0XHR2YXIgc3BsaXRzID0gc3RyaW5nLnNwbGl0KCcmJyk7XG5cdFx0dmFyIGxlbmd0aCA9IHNwbGl0cy5sZW5ndGg7XG5cdFx0dmFyIHYsIG5hbWUsIHZhbHVlO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0diA9IHNwbGl0c1tpXS5zcGxpdCgnPScpO1xuXHRcdFx0bmFtZSA9IFVSSS5kZWNvZGVRdWVyeSh2LnNoaWZ0KCksIGVzY2FwZVF1ZXJ5U3BhY2UpO1xuXHRcdFx0Ly8gbm8gXCI9XCIgaXMgbnVsbCBhY2NvcmRpbmcgdG8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3VybC9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG5cdFx0XHR2YWx1ZSA9IHYubGVuZ3RoID8gVVJJLmRlY29kZVF1ZXJ5KHYuam9pbignPScpLCBlc2NhcGVRdWVyeVNwYWNlKSA6IG51bGw7XG5cblx0XHRcdGlmIChoYXNPd24uY2FsbChpdGVtcywgbmFtZSkpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtc1tuYW1lXSA9PT0gJ3N0cmluZycgfHwgaXRlbXNbbmFtZV0gPT09IG51bGwpIHtcblx0XHRcdFx0XHRpdGVtc1tuYW1lXSA9IFtpdGVtc1tuYW1lXV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtc1tuYW1lXS5wdXNoKHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZW1zO1xuXHR9O1xuXG5cdFVSSS5idWlsZCA9IGZ1bmN0aW9uKHBhcnRzKSB7XG5cdFx0dmFyIHQgPSAnJztcblxuXHRcdGlmIChwYXJ0cy5wcm90b2NvbCkge1xuXHRcdFx0dCArPSBwYXJ0cy5wcm90b2NvbCArICc6Jztcblx0XHR9XG5cblx0XHRpZiAoIXBhcnRzLnVybiAmJiAodCB8fCBwYXJ0cy5ob3N0bmFtZSkpIHtcblx0XHRcdHQgKz0gJy8vJztcblx0XHR9XG5cblx0XHR0ICs9IChVUkkuYnVpbGRBdXRob3JpdHkocGFydHMpIHx8ICcnKTtcblxuXHRcdGlmICh0eXBlb2YgcGFydHMucGF0aCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGlmIChwYXJ0cy5wYXRoLmNoYXJBdCgwKSAhPT0gJy8nICYmIHR5cGVvZiBwYXJ0cy5ob3N0bmFtZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0dCArPSAnLyc7XG5cdFx0XHR9XG5cblx0XHRcdHQgKz0gcGFydHMucGF0aDtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHBhcnRzLnF1ZXJ5ID09PSAnc3RyaW5nJyAmJiBwYXJ0cy5xdWVyeSkge1xuXHRcdFx0dCArPSAnPycgKyBwYXJ0cy5xdWVyeTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHBhcnRzLmZyYWdtZW50ID09PSAnc3RyaW5nJyAmJiBwYXJ0cy5mcmFnbWVudCkge1xuXHRcdFx0dCArPSAnIycgKyBwYXJ0cy5mcmFnbWVudDtcblx0XHR9XG5cdFx0cmV0dXJuIHQ7XG5cdH07XG5cdFVSSS5idWlsZEhvc3QgPSBmdW5jdGlvbihwYXJ0cykge1xuXHRcdHZhciB0ID0gJyc7XG5cblx0XHRpZiAoIXBhcnRzLmhvc3RuYW1lKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fSBlbHNlIGlmIChVUkkuaXA2X2V4cHJlc3Npb24udGVzdChwYXJ0cy5ob3N0bmFtZSkpIHtcblx0XHRcdHQgKz0gJ1snICsgcGFydHMuaG9zdG5hbWUgKyAnXSc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHQgKz0gcGFydHMuaG9zdG5hbWU7XG5cdFx0fVxuXG5cdFx0aWYgKHBhcnRzLnBvcnQpIHtcblx0XHRcdHQgKz0gJzonICsgcGFydHMucG9ydDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdDtcblx0fTtcblx0VVJJLmJ1aWxkQXV0aG9yaXR5ID0gZnVuY3Rpb24ocGFydHMpIHtcblx0XHRyZXR1cm4gVVJJLmJ1aWxkVXNlcmluZm8ocGFydHMpICsgVVJJLmJ1aWxkSG9zdChwYXJ0cyk7XG5cdH07XG5cdFVSSS5idWlsZFVzZXJpbmZvID0gZnVuY3Rpb24ocGFydHMpIHtcblx0XHR2YXIgdCA9ICcnO1xuXG5cdFx0aWYgKHBhcnRzLnVzZXJuYW1lKSB7XG5cdFx0XHR0ICs9IFVSSS5lbmNvZGUocGFydHMudXNlcm5hbWUpO1xuXG5cdFx0XHRpZiAocGFydHMucGFzc3dvcmQpIHtcblx0XHRcdFx0dCArPSAnOicgKyBVUkkuZW5jb2RlKHBhcnRzLnBhc3N3b3JkKTtcblx0XHRcdH1cblxuXHRcdFx0dCArPSAnQCc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHQ7XG5cdH07XG5cdFVSSS5idWlsZFF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG5cdFx0Ly8gYWNjb3JkaW5nIHRvIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYgb3IgaHR0cDovL2xhYnMuYXBhY2hlLm9yZy93ZWJhcmNoL3VyaS9yZmMvcmZjMzk4Ni5odG1sXG5cdFx0Ly8gYmVpbmcgwrstLl9+ISQmJygpKissOz06QC8/wqsgJUhFWCBhbmQgYWxudW0gYXJlIGFsbG93ZWRcblx0XHQvLyB0aGUgUkZDIGV4cGxpY2l0bHkgc3RhdGVzID8vZm9vIGJlaW5nIGEgdmFsaWQgdXNlIGNhc2UsIG5vIG1lbnRpb24gb2YgcGFyYW1ldGVyIHN5bnRheCFcblx0XHQvLyBVUkkuanMgdHJlYXRzIHRoZSBxdWVyeSBzdHJpbmcgYXMgYmVpbmcgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG5cdFx0Ly8gc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAvaW50ZXJhY3QvZm9ybXMuaHRtbCNmb3JtLWNvbnRlbnQtdHlwZVxuXG5cdFx0dmFyIHQgPSAnJztcblx0XHR2YXIgdW5pcXVlLCBrZXksIGksIGxlbmd0aDtcblx0XHRmb3IgKGtleSBpbiBkYXRhKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoZGF0YSwga2V5KSAmJiBrZXkpIHtcblx0XHRcdFx0aWYgKGlzQXJyYXkoZGF0YVtrZXldKSkge1xuXHRcdFx0XHRcdHVuaXF1ZSA9IHt9O1xuXHRcdFx0XHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGFba2V5XS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKGRhdGFba2V5XVtpXSAhPT0gdW5kZWZpbmVkICYmIHVuaXF1ZVtkYXRhW2tleV1baV0gKyAnJ10gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHR0ICs9ICcmJyArIFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyKGtleSwgZGF0YVtrZXldW2ldLCBlc2NhcGVRdWVyeVNwYWNlKTtcblx0XHRcdFx0XHRcdFx0aWYgKGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyAhPT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZVtkYXRhW2tleV1baV0gKyAnJ10gPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0dCArPSAnJicgKyBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlcihrZXksIGRhdGFba2V5XSwgZXNjYXBlUXVlcnlTcGFjZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdC5zdWJzdHJpbmcoMSk7XG5cdH07XG5cdFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGVzY2FwZVF1ZXJ5U3BhY2UpIHtcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwL2ludGVyYWN0L2Zvcm1zLmh0bWwjZm9ybS1jb250ZW50LXR5cGUgLS0gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG5cdFx0Ly8gZG9uJ3QgYXBwZW5kIFwiPVwiIGZvciBudWxsIHZhbHVlcywgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjdXJsLXBhcmFtZXRlci1zZXJpYWxpemF0aW9uXG5cdFx0cmV0dXJuIFVSSS5lbmNvZGVRdWVyeShuYW1lLCBlc2NhcGVRdWVyeVNwYWNlKSArICh2YWx1ZSAhPT0gbnVsbCA/ICc9JyArIFVSSS5lbmNvZGVRdWVyeSh2YWx1ZSwgZXNjYXBlUXVlcnlTcGFjZSkgOiAnJyk7XG5cdH07XG5cblx0VVJJLmFkZFF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgbmFtZSwgdmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuXHRcdFx0XHRpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuXHRcdFx0XHRcdFVSSS5hZGRRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuXHRcdFx0aWYgKGRhdGFbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRkYXRhW25hbWVdID0gdmFsdWU7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGRhdGFbbmFtZV0gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGRhdGFbbmFtZV0gPSBbZGF0YVtuYW1lXV07XG5cdFx0XHR9XG5cblx0XHRcdGlmICghaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0dmFsdWUgPSBbdmFsdWVdO1xuXHRcdFx0fVxuXG5cdFx0XHRkYXRhW25hbWVdID0gKGRhdGFbbmFtZV0gfHwgW10pLmNvbmNhdCh2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyJyk7XG5cdFx0fVxuXHR9O1xuXHRVUkkucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkge1xuXHRcdHZhciBpLCBsZW5ndGgsIGtleTtcblxuXHRcdGlmIChpc0FycmF5KG5hbWUpKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSBuYW1lLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGRhdGFbbmFtZVtpXV0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChnZXRUeXBlKG5hbWUpID09PSAnUmVnRXhwJykge1xuXHRcdFx0Zm9yIChrZXkgaW4gZGF0YSkge1xuXHRcdFx0XHRpZiAobmFtZS50ZXN0KGtleSkpIHtcblx0XHRcdFx0XHRkYXRhW2tleV0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yIChrZXkgaW4gbmFtZSkge1xuXHRcdFx0XHRpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuXHRcdFx0XHRcdFVSSS5yZW1vdmVRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKGdldFR5cGUodmFsdWUpID09PSAnUmVnRXhwJykge1xuXHRcdFx0XHRcdGlmICghaXNBcnJheShkYXRhW25hbWVdKSAmJiB2YWx1ZS50ZXN0KGRhdGFbbmFtZV0pKSB7XG5cdFx0XHRcdFx0XHRkYXRhW25hbWVdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRkYXRhW25hbWVdID0gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YVtuYW1lXSwgdmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhW25hbWVdID09PSBTdHJpbmcodmFsdWUpICYmICghaXNBcnJheSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID09PSAxKSkge1xuXHRcdFx0XHRcdGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNBcnJheShkYXRhW25hbWVdKSkge1xuXHRcdFx0XHRcdGRhdGFbbmFtZV0gPSBmaWx0ZXJBcnJheVZhbHVlcyhkYXRhW25hbWVdLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5yZW1vdmVRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcsIFJlZ0V4cCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyJyk7XG5cdFx0fVxuXHR9O1xuXHRVUkkuaGFzUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpIHtcblx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuXHRcdFx0XHRpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuXHRcdFx0XHRcdGlmICghVVJJLmhhc1F1ZXJ5KGRhdGEsIGtleSwgbmFtZVtrZXldKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgbmFtZSBwYXJhbWV0ZXInKTtcblx0XHR9XG5cblx0XHRzd2l0Y2ggKGdldFR5cGUodmFsdWUpKSB7XG5cdFx0XHRjYXNlICdVbmRlZmluZWQnOlxuXHRcdFx0XHQvLyB0cnVlIGlmIGV4aXN0cyAoYnV0IG1heSBiZSBlbXB0eSlcblx0XHRcdFx0cmV0dXJuIG5hbWUgaW4gZGF0YTsgLy8gZGF0YVtuYW1lXSAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRjYXNlICdCb29sZWFuJzpcblx0XHRcdFx0Ly8gdHJ1ZSBpZiBleGlzdHMgYW5kIG5vbi1lbXB0eVxuXHRcdFx0XHR2YXIgX2Jvb2x5ID0gQm9vbGVhbihpc0FycmF5KGRhdGFbbmFtZV0pID8gZGF0YVtuYW1lXS5sZW5ndGggOiBkYXRhW25hbWVdKTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBfYm9vbHk7XG5cblx0XHRcdGNhc2UgJ0Z1bmN0aW9uJzpcblx0XHRcdFx0Ly8gYWxsb3cgY29tcGxleCBjb21wYXJpc29uXG5cdFx0XHRcdHJldHVybiAhIXZhbHVlKGRhdGFbbmFtZV0sIG5hbWUsIGRhdGEpO1xuXG5cdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdGlmICghaXNBcnJheShkYXRhW25hbWVdKSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBvcCA9IHdpdGhpbkFycmF5ID8gYXJyYXlDb250YWlucyA6IGFycmF5c0VxdWFsO1xuXHRcdFx0XHRyZXR1cm4gb3AoZGF0YVtuYW1lXSwgdmFsdWUpO1xuXG5cdFx0XHRjYXNlICdSZWdFeHAnOlxuXHRcdFx0XHRpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gQm9vbGVhbihkYXRhW25hbWVdICYmIGRhdGFbbmFtZV0ubWF0Y2godmFsdWUpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghd2l0aGluQXJyYXkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gYXJyYXlDb250YWlucyhkYXRhW25hbWVdLCB2YWx1ZSk7XG5cblx0XHRcdGNhc2UgJ051bWJlcic6XG5cdFx0XHRcdHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgJ1N0cmluZyc6XG5cdFx0XHRcdGlmICghaXNBcnJheShkYXRhW25hbWVdKSkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhW25hbWVdID09PSB2YWx1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghd2l0aGluQXJyYXkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gYXJyYXlDb250YWlucyhkYXRhW25hbWVdLCB2YWx1ZSk7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5oYXNRdWVyeSgpIGFjY2VwdHMgdW5kZWZpbmVkLCBib29sZWFuLCBzdHJpbmcsIG51bWJlciwgUmVnRXhwLCBGdW5jdGlvbiBhcyB0aGUgdmFsdWUgcGFyYW1ldGVyJyk7XG5cdFx0fVxuXHR9O1xuXG5cblx0VVJJLmNvbW1vblBhdGggPSBmdW5jdGlvbihvbmUsIHR3bykge1xuXHRcdHZhciBsZW5ndGggPSBNYXRoLm1pbihvbmUubGVuZ3RoLCB0d28ubGVuZ3RoKTtcblx0XHR2YXIgcG9zO1xuXG5cdFx0Ly8gZmluZCBmaXJzdCBub24tbWF0Y2hpbmcgY2hhcmFjdGVyXG5cdFx0Zm9yIChwb3MgPSAwOyBwb3MgPCBsZW5ndGg7IHBvcysrKSB7XG5cdFx0XHRpZiAob25lLmNoYXJBdChwb3MpICE9PSB0d28uY2hhckF0KHBvcykpIHtcblx0XHRcdFx0cG9zLS07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChwb3MgPCAxKSB7XG5cdFx0XHRyZXR1cm4gb25lLmNoYXJBdCgwKSA9PT0gdHdvLmNoYXJBdCgwKSAmJiBvbmUuY2hhckF0KDApID09PSAnLycgPyAnLycgOiAnJztcblx0XHR9XG5cblx0XHQvLyByZXZlcnQgdG8gbGFzdCAvXG5cdFx0aWYgKG9uZS5jaGFyQXQocG9zKSAhPT0gJy8nIHx8IHR3by5jaGFyQXQocG9zKSAhPT0gJy8nKSB7XG5cdFx0XHRwb3MgPSBvbmUuc3Vic3RyaW5nKDAsIHBvcykubGFzdEluZGV4T2YoJy8nKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gb25lLnN1YnN0cmluZygwLCBwb3MgKyAxKTtcblx0fTtcblxuXHRVUkkud2l0aGluU3RyaW5nID0gZnVuY3Rpb24oc3RyaW5nLCBjYWxsYmFjaywgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG5cdFx0dmFyIF9zdGFydCA9IG9wdGlvbnMuc3RhcnQgfHwgVVJJLmZpbmRVcmkuc3RhcnQ7XG5cdFx0dmFyIF9lbmQgPSBvcHRpb25zLmVuZCB8fCBVUkkuZmluZFVyaS5lbmQ7XG5cdFx0dmFyIF90cmltID0gb3B0aW9ucy50cmltIHx8IFVSSS5maW5kVXJpLnRyaW07XG5cdFx0dmFyIF9hdHRyaWJ1dGVPcGVuID0gL1thLXowLTktXT1bXCInXT8kL2k7XG5cblx0XHRfc3RhcnQubGFzdEluZGV4ID0gMDtcblx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0dmFyIG1hdGNoID0gX3N0YXJ0LmV4ZWMoc3RyaW5nKTtcblx0XHRcdGlmICghbWF0Y2gpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzdGFydCA9IG1hdGNoLmluZGV4O1xuXHRcdFx0aWYgKG9wdGlvbnMuaWdub3JlSHRtbCkge1xuXHRcdFx0XHQvLyBhdHRyaWJ1dChlPVtcIiddPyQpXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVPcGVuID0gc3RyaW5nLnNsaWNlKE1hdGgubWF4KHN0YXJ0IC0gMywgMCksIHN0YXJ0KTtcblx0XHRcdFx0aWYgKGF0dHJpYnV0ZU9wZW4gJiYgX2F0dHJpYnV0ZU9wZW4udGVzdChhdHRyaWJ1dGVPcGVuKSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBlbmQgPSBzdGFydCArIHN0cmluZy5zbGljZShzdGFydCkuc2VhcmNoKF9lbmQpO1xuXHRcdFx0dmFyIHNsaWNlID0gc3RyaW5nLnNsaWNlKHN0YXJ0LCBlbmQpLnJlcGxhY2UoX3RyaW0sICcnKTtcblx0XHRcdGlmIChvcHRpb25zLmlnbm9yZSAmJiBvcHRpb25zLmlnbm9yZS50ZXN0KHNsaWNlKSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0ZW5kID0gc3RhcnQgKyBzbGljZS5sZW5ndGg7XG5cdFx0XHR2YXIgcmVzdWx0ID0gY2FsbGJhY2soc2xpY2UsIHN0YXJ0LCBlbmQsIHN0cmluZyk7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgc3RhcnQpICsgcmVzdWx0ICsgc3RyaW5nLnNsaWNlKGVuZCk7XG5cdFx0XHRfc3RhcnQubGFzdEluZGV4ID0gc3RhcnQgKyByZXN1bHQubGVuZ3RoO1xuXHRcdH1cblxuXHRcdF9zdGFydC5sYXN0SW5kZXggPSAwO1xuXHRcdHJldHVybiBzdHJpbmc7XG5cdH07XG5cblx0VVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUgPSBmdW5jdGlvbih2KSB7XG5cdFx0Ly8gVGhlb3JldGljYWxseSBVUklzIGFsbG93IHBlcmNlbnQtZW5jb2RpbmcgaW4gSG9zdG5hbWVzIChhY2NvcmRpbmcgdG8gUkZDIDM5ODYpXG5cdFx0Ly8gdGhleSBhcmUgbm90IHBhcnQgb2YgRE5TIGFuZCB0aGVyZWZvcmUgaWdub3JlZCBieSBVUkkuanNcblxuXHRcdGlmICh2Lm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7XG5cdFx0XHQvLyB0ZXN0IHB1bnljb2RlXG5cdFx0XHRpZiAoIXB1bnljb2RlKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0gYW5kIFB1bnljb2RlLmpzIGlzIG5vdCBhdmFpbGFibGUnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHB1bnljb2RlLnRvQVNDSUkodikubWF0Y2goVVJJLmludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXScpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvLyBub0NvbmZsaWN0XG5cdFVSSS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24ocmVtb3ZlQWxsKSB7XG5cdFx0aWYgKHJlbW92ZUFsbCkge1xuXHRcdFx0dmFyIHVuY29uZmxpY3RlZCA9IHtcblx0XHRcdFx0VVJJOiB0aGlzLm5vQ29uZmxpY3QoKVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHJvb3QuVVJJVGVtcGxhdGUgJiYgdHlwZW9mIHJvb3QuVVJJVGVtcGxhdGUubm9Db25mbGljdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHR1bmNvbmZsaWN0ZWQuVVJJVGVtcGxhdGUgPSByb290LlVSSVRlbXBsYXRlLm5vQ29uZmxpY3QoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHJvb3QuSVB2NiAmJiB0eXBlb2Ygcm9vdC5JUHY2Lm5vQ29uZmxpY3QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dW5jb25mbGljdGVkLklQdjYgPSByb290LklQdjYubm9Db25mbGljdCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocm9vdC5TZWNvbmRMZXZlbERvbWFpbnMgJiYgdHlwZW9mIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zLm5vQ29uZmxpY3QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dW5jb25mbGljdGVkLlNlY29uZExldmVsRG9tYWlucyA9IHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zLm5vQ29uZmxpY3QoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVuY29uZmxpY3RlZDtcblx0XHR9IGVsc2UgaWYgKHJvb3QuVVJJID09PSB0aGlzKSB7XG5cdFx0XHRyb290LlVSSSA9IF9VUkk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0cC5idWlsZCA9IGZ1bmN0aW9uKGRlZmVyQnVpbGQpIHtcblx0XHRpZiAoZGVmZXJCdWlsZCA9PT0gdHJ1ZSkge1xuXHRcdFx0dGhpcy5fZGVmZXJyZWRfYnVpbGQgPSB0cnVlO1xuXHRcdH0gZWxzZSBpZiAoZGVmZXJCdWlsZCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX2RlZmVycmVkX2J1aWxkKSB7XG5cdFx0XHR0aGlzLl9zdHJpbmcgPSBVUkkuYnVpbGQodGhpcy5fcGFydHMpO1xuXHRcdFx0dGhpcy5fZGVmZXJyZWRfYnVpbGQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRwLmNsb25lID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBVUkkodGhpcyk7XG5cdH07XG5cblx0cC52YWx1ZU9mID0gcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmJ1aWxkKGZhbHNlKS5fc3RyaW5nO1xuXHR9O1xuXG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcihfcGFydCl7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9wYXJ0c1tfcGFydF0gfHwgJyc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9wYXJ0c1tfcGFydF0gPSB2IHx8IG51bGw7XG5cdFx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoX3BhcnQsIF9rZXkpe1xuXHRcdHJldHVybiBmdW5jdGlvbih2LCBidWlsZCkge1xuXHRcdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcGFydHNbX3BhcnRdIHx8ICcnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHYgIT09IG51bGwpIHtcblx0XHRcdFx0XHR2ID0gdiArICcnO1xuXHRcdFx0XHRcdGlmICh2LmNoYXJBdCgwKSA9PT0gX2tleSkge1xuXHRcdFx0XHRcdFx0diA9IHYuc3Vic3RyaW5nKDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuX3BhcnRzW19wYXJ0XSA9IHY7XG5cdFx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdHAucHJvdG9jb2wgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdwcm90b2NvbCcpO1xuXHRwLnVzZXJuYW1lID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigndXNlcm5hbWUnKTtcblx0cC5wYXNzd29yZCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3Bhc3N3b3JkJyk7XG5cdHAuaG9zdG5hbWUgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdob3N0bmFtZScpO1xuXHRwLnBvcnQgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdwb3J0Jyk7XG5cdHAucXVlcnkgPSBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKCdxdWVyeScsICc/Jyk7XG5cdHAuZnJhZ21lbnQgPSBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKCdmcmFnbWVudCcsICcjJyk7XG5cblx0cC5zZWFyY2ggPSBmdW5jdGlvbih2LCBidWlsZCkge1xuXHRcdHZhciB0ID0gdGhpcy5xdWVyeSh2LCBidWlsZCk7XG5cdFx0cmV0dXJuIHR5cGVvZiB0ID09PSAnc3RyaW5nJyAmJiB0Lmxlbmd0aCA/ICgnPycgKyB0KSA6IHQ7XG5cdH07XG5cdHAuaGFzaCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0dmFyIHQgPSB0aGlzLmZyYWdtZW50KHYsIGJ1aWxkKTtcblx0XHRyZXR1cm4gdHlwZW9mIHQgPT09ICdzdHJpbmcnICYmIHQubGVuZ3RoID8gKCcjJyArIHQpIDogdDtcblx0fTtcblxuXHRwLnBhdGhuYW1lID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHtcblx0XHRcdHZhciByZXMgPSB0aGlzLl9wYXJ0cy5wYXRoIHx8ICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/ICcvJyA6ICcnKTtcblx0XHRcdHJldHVybiB2ID8gKHRoaXMuX3BhcnRzLnVybiA/IFVSSS5kZWNvZGVVcm5QYXRoIDogVVJJLmRlY29kZVBhdGgpKHJlcykgOiByZXM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcblx0XHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IHYgPyBVUkkucmVjb2RlVXJuUGF0aCh2KSA6ICcnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IHYgPyBVUkkucmVjb2RlUGF0aCh2KSA6ICcvJztcblx0XHRcdH1cblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fTtcblx0cC5wYXRoID0gcC5wYXRobmFtZTtcblx0cC5ocmVmID0gZnVuY3Rpb24oaHJlZiwgYnVpbGQpIHtcblx0XHR2YXIga2V5O1xuXG5cdFx0aWYgKGhyZWYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zdHJpbmcgPSAnJztcblx0XHR0aGlzLl9wYXJ0cyA9IFVSSS5fcGFydHMoKTtcblxuXHRcdHZhciBfVVJJID0gaHJlZiBpbnN0YW5jZW9mIFVSSTtcblx0XHR2YXIgX29iamVjdCA9IHR5cGVvZiBocmVmID09PSAnb2JqZWN0JyAmJiAoaHJlZi5ob3N0bmFtZSB8fCBocmVmLnBhdGggfHwgaHJlZi5wYXRobmFtZSk7XG5cdFx0aWYgKGhyZWYubm9kZU5hbWUpIHtcblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBVUkkuZ2V0RG9tQXR0cmlidXRlKGhyZWYpO1xuXHRcdFx0aHJlZiA9IGhyZWZbYXR0cmlidXRlXSB8fCAnJztcblx0XHRcdF9vYmplY3QgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyB3aW5kb3cubG9jYXRpb24gaXMgcmVwb3J0ZWQgdG8gYmUgYW4gb2JqZWN0LCBidXQgaXQncyBub3QgdGhlIHNvcnRcblx0XHQvLyBvZiBvYmplY3Qgd2UncmUgbG9va2luZyBmb3I6XG5cdFx0Ly8gKiBsb2NhdGlvbi5wcm90b2NvbCBlbmRzIHdpdGggYSBjb2xvblxuXHRcdC8vICogbG9jYXRpb24ucXVlcnkgIT0gb2JqZWN0LnNlYXJjaFxuXHRcdC8vICogbG9jYXRpb24uaGFzaCAhPSBvYmplY3QuZnJhZ21lbnRcblx0XHQvLyBzaW1wbHkgc2VyaWFsaXppbmcgdGhlIHVua25vd24gb2JqZWN0IHNob3VsZCBkbyB0aGUgdHJpY2tcblx0XHQvLyAoZm9yIGxvY2F0aW9uLCBub3QgZm9yIGV2ZXJ5dGhpbmcuLi4pXG5cdFx0aWYgKCFfVVJJICYmIF9vYmplY3QgJiYgaHJlZi5wYXRobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRocmVmID0gaHJlZi50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgaHJlZiA9PT0gJ3N0cmluZycgfHwgaHJlZiBpbnN0YW5jZW9mIFN0cmluZykge1xuXHRcdFx0dGhpcy5fcGFydHMgPSBVUkkucGFyc2UoU3RyaW5nKGhyZWYpLCB0aGlzLl9wYXJ0cyk7XG5cdFx0fSBlbHNlIGlmIChfVVJJIHx8IF9vYmplY3QpIHtcblx0XHRcdHZhciBzcmMgPSBfVVJJID8gaHJlZi5fcGFydHMgOiBocmVmO1xuXHRcdFx0Zm9yIChrZXkgaW4gc3JjKSB7XG5cdFx0XHRcdGlmIChoYXNPd24uY2FsbCh0aGlzLl9wYXJ0cywga2V5KSkge1xuXHRcdFx0XHRcdHRoaXMuX3BhcnRzW2tleV0gPSBzcmNba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGlucHV0Jyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5idWlsZCghYnVpbGQpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8vIGlkZW50aWZpY2F0aW9uIGFjY2Vzc29yc1xuXHRwLmlzID0gZnVuY3Rpb24od2hhdCkge1xuXHRcdHZhciBpcCA9IGZhbHNlO1xuXHRcdHZhciBpcDQgPSBmYWxzZTtcblx0XHR2YXIgaXA2ID0gZmFsc2U7XG5cdFx0dmFyIG5hbWUgPSBmYWxzZTtcblx0XHR2YXIgc2xkID0gZmFsc2U7XG5cdFx0dmFyIGlkbiA9IGZhbHNlO1xuXHRcdHZhciBwdW55Y29kZSA9IGZhbHNlO1xuXHRcdHZhciByZWxhdGl2ZSA9ICF0aGlzLl9wYXJ0cy51cm47XG5cblx0XHRpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcblx0XHRcdHJlbGF0aXZlID0gZmFsc2U7XG5cdFx0XHRpcDQgPSBVUkkuaXA0X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG5cdFx0XHRpcDYgPSBVUkkuaXA2X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG5cdFx0XHRpcCA9IGlwNCB8fCBpcDY7XG5cdFx0XHRuYW1lID0gIWlwO1xuXHRcdFx0c2xkID0gbmFtZSAmJiBTTEQgJiYgU0xELmhhcyh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG5cdFx0XHRpZG4gPSBuYW1lICYmIFVSSS5pZG5fZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcblx0XHRcdHB1bnljb2RlID0gbmFtZSAmJiBVUkkucHVueWNvZGVfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcblx0XHR9XG5cblx0XHRzd2l0Y2ggKHdoYXQudG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0Y2FzZSAncmVsYXRpdmUnOlxuXHRcdFx0XHRyZXR1cm4gcmVsYXRpdmU7XG5cblx0XHRcdGNhc2UgJ2Fic29sdXRlJzpcblx0XHRcdFx0cmV0dXJuICFyZWxhdGl2ZTtcblxuXHRcdFx0Ly8gaG9zdG5hbWUgaWRlbnRpZmljYXRpb25cblx0XHRcdGNhc2UgJ2RvbWFpbic6XG5cdFx0XHRjYXNlICduYW1lJzpcblx0XHRcdFx0cmV0dXJuIG5hbWU7XG5cblx0XHRcdGNhc2UgJ3NsZCc6XG5cdFx0XHRcdHJldHVybiBzbGQ7XG5cblx0XHRcdGNhc2UgJ2lwJzpcblx0XHRcdFx0cmV0dXJuIGlwO1xuXG5cdFx0XHRjYXNlICdpcDQnOlxuXHRcdFx0Y2FzZSAnaXB2NCc6XG5cdFx0XHRjYXNlICdpbmV0NCc6XG5cdFx0XHRcdHJldHVybiBpcDQ7XG5cblx0XHRcdGNhc2UgJ2lwNic6XG5cdFx0XHRjYXNlICdpcHY2Jzpcblx0XHRcdGNhc2UgJ2luZXQ2Jzpcblx0XHRcdFx0cmV0dXJuIGlwNjtcblxuXHRcdFx0Y2FzZSAnaWRuJzpcblx0XHRcdFx0cmV0dXJuIGlkbjtcblxuXHRcdFx0Y2FzZSAndXJsJzpcblx0XHRcdFx0cmV0dXJuICF0aGlzLl9wYXJ0cy51cm47XG5cblx0XHRcdGNhc2UgJ3Vybic6XG5cdFx0XHRcdHJldHVybiAhIXRoaXMuX3BhcnRzLnVybjtcblxuXHRcdFx0Y2FzZSAncHVueWNvZGUnOlxuXHRcdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH07XG5cblx0Ly8gY29tcG9uZW50IHNwZWNpZmljIGlucHV0IHZhbGlkYXRpb25cblx0dmFyIF9wcm90b2NvbCA9IHAucHJvdG9jb2w7XG5cdHZhciBfcG9ydCA9IHAucG9ydDtcblx0dmFyIF9ob3N0bmFtZSA9IHAuaG9zdG5hbWU7XG5cblx0cC5wcm90b2NvbCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0aWYgKHYgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKHYpIHtcblx0XHRcdFx0Ly8gYWNjZXB0IHRyYWlsaW5nIDovL1xuXHRcdFx0XHR2ID0gdi5yZXBsYWNlKC86KFxcL1xcLyk/JC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXYubWF0Y2goVVJJLnByb3RvY29sX2V4cHJlc3Npb24pKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdG9jb2wgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4rLV0gb3IgZG9lc25cXCd0IHN0YXJ0IHdpdGggW0EtWl0nKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gX3Byb3RvY29sLmNhbGwodGhpcywgdiwgYnVpbGQpO1xuXHR9O1xuXHRwLnNjaGVtZSA9IHAucHJvdG9jb2w7XG5cdHAucG9ydCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcblx0XHR9XG5cblx0XHRpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpZiAodiA9PT0gMCkge1xuXHRcdFx0XHR2ID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHYpIHtcblx0XHRcdFx0diArPSAnJztcblx0XHRcdFx0aWYgKHYuY2hhckF0KDApID09PSAnOicpIHtcblx0XHRcdFx0XHR2ID0gdi5zdWJzdHJpbmcoMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodi5tYXRjaCgvW14wLTldLykpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdQb3J0IFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFswLTldJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIF9wb3J0LmNhbGwodGhpcywgdiwgYnVpbGQpO1xuXHR9O1xuXHRwLmhvc3RuYW1lID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICh2ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHZhciB4ID0ge307XG5cdFx0XHR2YXIgcmVzID0gVVJJLnBhcnNlSG9zdCh2LCB4KTtcblx0XHRcdGlmIChyZXMgIT09ICcvJykge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dJyk7XG5cdFx0XHR9XG5cblx0XHRcdHYgPSB4Lmhvc3RuYW1lO1xuXHRcdH1cblx0XHRyZXR1cm4gX2hvc3RuYW1lLmNhbGwodGhpcywgdiwgYnVpbGQpO1xuXHR9O1xuXG5cdC8vIGNvbXBvdW5kIGFjY2Vzc29yc1xuXHRwLm9yaWdpbiA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0dmFyIHBhcnRzO1xuXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcblx0XHR9XG5cblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sKCk7XG5cdFx0XHR2YXIgYXV0aG9yaXR5ID0gdGhpcy5hdXRob3JpdHkoKTtcblx0XHRcdGlmICghYXV0aG9yaXR5KSByZXR1cm4gJyc7XG5cdFx0XHRyZXR1cm4gKHByb3RvY29sID8gcHJvdG9jb2wgKyAnOi8vJyA6ICcnKSArIHRoaXMuYXV0aG9yaXR5KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBvcmlnaW4gPSBVUkkodik7XG5cdFx0XHR0aGlzXG5cdFx0XHRcdC5wcm90b2NvbChvcmlnaW4ucHJvdG9jb2woKSlcblx0XHRcdFx0LmF1dGhvcml0eShvcmlnaW4uYXV0aG9yaXR5KCkpXG5cdFx0XHRcdC5idWlsZCghYnVpbGQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9O1xuXHRwLmhvc3QgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gVVJJLmJ1aWxkSG9zdCh0aGlzLl9wYXJ0cykgOiAnJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHJlcyA9IFVSSS5wYXJzZUhvc3QodiwgdGhpcy5fcGFydHMpO1xuXHRcdFx0aWYgKHJlcyAhPT0gJy8nKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9O1xuXHRwLmF1dGhvcml0eSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcblx0XHR9XG5cblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRBdXRob3JpdHkodGhpcy5fcGFydHMpIDogJyc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciByZXMgPSBVUkkucGFyc2VBdXRob3JpdHkodiwgdGhpcy5fcGFydHMpO1xuXHRcdFx0aWYgKHJlcyAhPT0gJy8nKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9O1xuXHRwLnVzZXJpbmZvID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGlmICghdGhpcy5fcGFydHMudXNlcm5hbWUpIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdCA9IFVSSS5idWlsZFVzZXJpbmZvKHRoaXMuX3BhcnRzKTtcblx0XHRcdHJldHVybiB0LnN1YnN0cmluZygwLCB0Lmxlbmd0aCAtMSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh2W3YubGVuZ3RoLTFdICE9PSAnQCcpIHtcblx0XHRcdFx0diArPSAnQCc7XG5cdFx0XHR9XG5cblx0XHRcdFVSSS5wYXJzZVVzZXJpbmZvKHYsIHRoaXMuX3BhcnRzKTtcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fTtcblx0cC5yZXNvdXJjZSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0dmFyIHBhcnRzO1xuXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucGF0aCgpICsgdGhpcy5zZWFyY2goKSArIHRoaXMuaGFzaCgpO1xuXHRcdH1cblxuXHRcdHBhcnRzID0gVVJJLnBhcnNlKHYpO1xuXHRcdHRoaXMuX3BhcnRzLnBhdGggPSBwYXJ0cy5wYXRoO1xuXHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gcGFydHMucXVlcnk7XG5cdFx0dGhpcy5fcGFydHMuZnJhZ21lbnQgPSBwYXJ0cy5mcmFnbWVudDtcblx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0Ly8gZnJhY3Rpb24gYWNjZXNzb3JzXG5cdHAuc3ViZG9tYWluID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlbmllbmNlLCByZXR1cm4gXCJ3d3dcIiBmcm9tIFwid3d3LmV4YW1wbGUub3JnXCJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBncmFiIGRvbWFpbiBhbmQgYWRkIGFub3RoZXIgc2VnbWVudFxuXHRcdFx0dmFyIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMuZG9tYWluKCkubGVuZ3RoIC0gMTtcblx0XHRcdHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoMCwgZW5kKSB8fCAnJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLmRvbWFpbigpLmxlbmd0aDtcblx0XHRcdHZhciBzdWIgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoMCwgZSk7XG5cdFx0XHR2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoJ14nICsgZXNjYXBlUmVnRXgoc3ViKSk7XG5cblx0XHRcdGlmICh2ICYmIHYuY2hhckF0KHYubGVuZ3RoIC0gMSkgIT09ICcuJykge1xuXHRcdFx0XHR2ICs9ICcuJztcblx0XHRcdH1cblxuXHRcdFx0aWYgKHYpIHtcblx0XHRcdFx0VVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUodik7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTtcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fTtcblx0cC5kb21haW4gPSBmdW5jdGlvbih2LCBidWlsZCkge1xuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcblx0XHRcdGJ1aWxkID0gdjtcblx0XHRcdHYgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVuaWVuY2UsIHJldHVybiBcImV4YW1wbGUub3JnXCIgZnJvbSBcInd3dy5leGFtcGxlLm9yZ1wiXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgaG9zdG5hbWUgY29uc2lzdHMgb2YgMSBvciAyIHNlZ21lbnRzLCBpdCBtdXN0IGJlIHRoZSBkb21haW5cblx0XHRcdHZhciB0ID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubWF0Y2goL1xcLi9nKTtcblx0XHRcdGlmICh0ICYmIHQubGVuZ3RoIDwgMikge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGdyYWIgdGxkIGFuZCBhZGQgYW5vdGhlciBzZWdtZW50XG5cdFx0XHR2YXIgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy50bGQoYnVpbGQpLmxlbmd0aCAtIDE7XG5cdFx0XHRlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sYXN0SW5kZXhPZignLicsIGVuZCAtMSkgKyAxO1xuXHRcdFx0cmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZyhlbmQpIHx8ICcnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIXYpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IHNldCBkb21haW4gZW1wdHknKTtcblx0XHRcdH1cblxuXHRcdFx0VVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUodik7XG5cblx0XHRcdGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xuXHRcdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHY7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5kb21haW4oKSkgKyAnJCcpO1xuXHRcdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdik7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fTtcblx0cC50bGQgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcblx0XHRcdGJ1aWxkID0gdjtcblx0XHRcdHYgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIFwib3JnXCIgZnJvbSBcInd3dy5leGFtcGxlLm9yZ1wiXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBvcyA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxhc3RJbmRleE9mKCcuJyk7XG5cdFx0XHR2YXIgdGxkID0gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKHBvcyArIDEpO1xuXG5cdFx0XHRpZiAoYnVpbGQgIT09IHRydWUgJiYgU0xEICYmIFNMRC5saXN0W3RsZC50b0xvd2VyQ2FzZSgpXSkge1xuXHRcdFx0XHRyZXR1cm4gU0xELmdldCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkgfHwgdGxkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGxkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcmVwbGFjZTtcblxuXHRcdFx0aWYgKCF2KSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgVExEIGVtcHR5Jyk7XG5cdFx0XHR9IGVsc2UgaWYgKHYubWF0Y2goL1teYS16QS1aMC05LV0vKSkge1xuXHRcdFx0XHRpZiAoU0xEICYmIFNMRC5pcyh2KSkge1xuXHRcdFx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMudGxkKCkpICsgJyQnKTtcblx0XHRcdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVExEIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTldJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCdjYW5ub3Qgc2V0IFRMRCBvbiBub24tZG9tYWluIGhvc3QnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMudGxkKCkpICsgJyQnKTtcblx0XHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH07XG5cdHAuZGlyZWN0b3J5ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5wYXRoICYmICF0aGlzLl9wYXJ0cy5ob3N0bmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHtcblx0XHRcdFx0cmV0dXJuICcvJztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGVuZCA9IHRoaXMuX3BhcnRzLnBhdGgubGVuZ3RoIC0gdGhpcy5maWxlbmFtZSgpLmxlbmd0aCAtIDE7XG5cdFx0XHR2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcoMCwgZW5kKSB8fCAodGhpcy5fcGFydHMuaG9zdG5hbWUgPyAnLycgOiAnJyk7XG5cblx0XHRcdHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGgocmVzKSA6IHJlcztcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZSA9IHRoaXMuX3BhcnRzLnBhdGgubGVuZ3RoIC0gdGhpcy5maWxlbmFtZSgpLmxlbmd0aDtcblx0XHRcdHZhciBkaXJlY3RvcnkgPSB0aGlzLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygwLCBlKTtcblx0XHRcdHZhciByZXBsYWNlID0gbmV3IFJlZ0V4cCgnXicgKyBlc2NhcGVSZWdFeChkaXJlY3RvcnkpKTtcblxuXHRcdFx0Ly8gZnVsbHkgcXVhbGlmaWVyIGRpcmVjdG9yaWVzIGJlZ2luIHdpdGggYSBzbGFzaFxuXHRcdFx0aWYgKCF0aGlzLmlzKCdyZWxhdGl2ZScpKSB7XG5cdFx0XHRcdGlmICghdikge1xuXHRcdFx0XHRcdHYgPSAnLyc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodi5jaGFyQXQoMCkgIT09ICcvJykge1xuXHRcdFx0XHRcdHYgPSAnLycgKyB2O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRpcmVjdG9yaWVzIGFsd2F5cyBlbmQgd2l0aCBhIHNsYXNoXG5cdFx0XHRpZiAodiAmJiB2LmNoYXJBdCh2Lmxlbmd0aCAtIDEpICE9PSAnLycpIHtcblx0XHRcdFx0diArPSAnLyc7XG5cdFx0XHR9XG5cblx0XHRcdHYgPSBVUkkucmVjb2RlUGF0aCh2KTtcblx0XHRcdHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdik7XG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH07XG5cdHAuZmlsZW5hbWUgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7XG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLnBhdGggfHwgdGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBvcyA9IHRoaXMuX3BhcnRzLnBhdGgubGFzdEluZGV4T2YoJy8nKTtcblx0XHRcdHZhciByZXMgPSB0aGlzLl9wYXJ0cy5wYXRoLnN1YnN0cmluZyhwb3MrMSk7XG5cblx0XHRcdHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBtdXRhdGVkRGlyZWN0b3J5ID0gZmFsc2U7XG5cblx0XHRcdGlmICh2LmNoYXJBdCgwKSA9PT0gJy8nKSB7XG5cdFx0XHRcdHYgPSB2LnN1YnN0cmluZygxKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHYubWF0Y2goL1xcLj9cXC8vKSkge1xuXHRcdFx0XHRtdXRhdGVkRGlyZWN0b3J5ID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMuZmlsZW5hbWUoKSkgKyAnJCcpO1xuXHRcdFx0diA9IFVSSS5yZWNvZGVQYXRoKHYpO1xuXHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IHRoaXMuX3BhcnRzLnBhdGgucmVwbGFjZShyZXBsYWNlLCB2KTtcblxuXHRcdFx0aWYgKG11dGF0ZWREaXJlY3RvcnkpIHtcblx0XHRcdFx0dGhpcy5ub3JtYWxpemVQYXRoKGJ1aWxkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9O1xuXHRwLnN1ZmZpeCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcblx0XHR9XG5cblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHtcblx0XHRcdGlmICghdGhpcy5fcGFydHMucGF0aCB8fCB0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZmlsZW5hbWUgPSB0aGlzLmZpbGVuYW1lKCk7XG5cdFx0XHR2YXIgcG9zID0gZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKTtcblx0XHRcdHZhciBzLCByZXM7XG5cblx0XHRcdGlmIChwb3MgPT09IC0xKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblxuXHRcdFx0Ly8gc3VmZml4IG1heSBvbmx5IGNvbnRhaW4gYWxudW0gY2hhcmFjdGVycyAoeXVwLCBJIG1hZGUgdGhpcyB1cC4pXG5cdFx0XHRzID0gZmlsZW5hbWUuc3Vic3RyaW5nKHBvcysxKTtcblx0XHRcdHJlcyA9ICgvXlthLXowLTklXSskL2kpLnRlc3QocykgPyBzIDogJyc7XG5cdFx0XHRyZXR1cm4gdiA/IFVSSS5kZWNvZGVQYXRoU2VnbWVudChyZXMpIDogcmVzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodi5jaGFyQXQoMCkgPT09ICcuJykge1xuXHRcdFx0XHR2ID0gdi5zdWJzdHJpbmcoMSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzdWZmaXggPSB0aGlzLnN1ZmZpeCgpO1xuXHRcdFx0dmFyIHJlcGxhY2U7XG5cblx0XHRcdGlmICghc3VmZml4KSB7XG5cdFx0XHRcdGlmICghdikge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fcGFydHMucGF0aCArPSAnLicgKyBVUkkucmVjb2RlUGF0aCh2KTtcblx0XHRcdH0gZWxzZSBpZiAoIXYpIHtcblx0XHRcdFx0cmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgoJy4nICsgc3VmZml4KSArICckJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeChzdWZmaXgpICsgJyQnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHJlcGxhY2UpIHtcblx0XHRcdFx0diA9IFVSSS5yZWNvZGVQYXRoKHYpO1xuXHRcdFx0XHR0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH07XG5cdHAuc2VnbWVudCA9IGZ1bmN0aW9uKHNlZ21lbnQsIHYsIGJ1aWxkKSB7XG5cdFx0dmFyIHNlcGFyYXRvciA9IHRoaXMuX3BhcnRzLnVybiA/ICc6JyA6ICcvJztcblx0XHR2YXIgcGF0aCA9IHRoaXMucGF0aCgpO1xuXHRcdHZhciBhYnNvbHV0ZSA9IHBhdGguc3Vic3RyaW5nKDAsIDEpID09PSAnLyc7XG5cdFx0dmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdChzZXBhcmF0b3IpO1xuXG5cdFx0aWYgKHNlZ21lbnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc2VnbWVudCAhPT0gJ251bWJlcicpIHtcblx0XHRcdGJ1aWxkID0gdjtcblx0XHRcdHYgPSBzZWdtZW50O1xuXHRcdFx0c2VnbWVudCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoc2VnbWVudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzZWdtZW50ICE9PSAnbnVtYmVyJykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdCYWQgc2VnbWVudCBcIicgKyBzZWdtZW50ICsgJ1wiLCBtdXN0IGJlIDAtYmFzZWQgaW50ZWdlcicpO1xuXHRcdH1cblxuXHRcdGlmIChhYnNvbHV0ZSkge1xuXHRcdFx0c2VnbWVudHMuc2hpZnQoKTtcblx0XHR9XG5cblx0XHRpZiAoc2VnbWVudCA8IDApIHtcblx0XHRcdC8vIGFsbG93IG5lZ2F0aXZlIGluZGV4ZXMgdG8gYWRkcmVzcyBmcm9tIHRoZSBlbmRcblx0XHRcdHNlZ21lbnQgPSBNYXRoLm1heChzZWdtZW50cy5sZW5ndGggKyBzZWdtZW50LCAwKTtcblx0XHR9XG5cblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvKmpzaGludCBsYXhicmVhazogdHJ1ZSAqL1xuXHRcdFx0cmV0dXJuIHNlZ21lbnQgPT09IHVuZGVmaW5lZFxuXHRcdFx0XHQ/IHNlZ21lbnRzXG5cdFx0XHRcdDogc2VnbWVudHNbc2VnbWVudF07XG5cdFx0XHQvKmpzaGludCBsYXhicmVhazogZmFsc2UgKi9cblx0XHR9IGVsc2UgaWYgKHNlZ21lbnQgPT09IG51bGwgfHwgc2VnbWVudHNbc2VnbWVudF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKGlzQXJyYXkodikpIHtcblx0XHRcdFx0c2VnbWVudHMgPSBbXTtcblx0XHRcdFx0Ly8gY29sbGFwc2UgZW1wdHkgZWxlbWVudHMgd2l0aGluIGFycmF5XG5cdFx0XHRcdGZvciAodmFyIGk9MCwgbD12Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGlmICghdltpXS5sZW5ndGggJiYgKCFzZWdtZW50cy5sZW5ndGggfHwgIXNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtMV0ubGVuZ3RoKSkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHNlZ21lbnRzLmxlbmd0aCAmJiAhc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHNlZ21lbnRzLnBvcCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNlZ21lbnRzLnB1c2godHJpbVNsYXNoZXModltpXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHYgfHwgdHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHYgPSB0cmltU2xhc2hlcyh2KTtcblx0XHRcdFx0aWYgKHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtMV0gPT09ICcnKSB7XG5cdFx0XHRcdFx0Ly8gZW1wdHkgdHJhaWxpbmcgZWxlbWVudHMgaGF2ZSB0byBiZSBvdmVyd3JpdHRlblxuXHRcdFx0XHRcdC8vIHRvIHByZXZlbnQgcmVzdWx0cyBzdWNoIGFzIC9mb28vL2JhclxuXHRcdFx0XHRcdHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtMV0gPSB2O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlZ21lbnRzLnB1c2godik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHYpIHtcblx0XHRcdFx0c2VnbWVudHNbc2VnbWVudF0gPSB0cmltU2xhc2hlcyh2KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlZ21lbnRzLnNwbGljZShzZWdtZW50LCAxKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoYWJzb2x1dGUpIHtcblx0XHRcdHNlZ21lbnRzLnVuc2hpZnQoJycpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnBhdGgoc2VnbWVudHMuam9pbihzZXBhcmF0b3IpLCBidWlsZCk7XG5cdH07XG5cdHAuc2VnbWVudENvZGVkID0gZnVuY3Rpb24oc2VnbWVudCwgdiwgYnVpbGQpIHtcblx0XHR2YXIgc2VnbWVudHMsIGksIGw7XG5cblx0XHRpZiAodHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XG5cdFx0XHRidWlsZCA9IHY7XG5cdFx0XHR2ID0gc2VnbWVudDtcblx0XHRcdHNlZ21lbnQgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0c2VnbWVudHMgPSB0aGlzLnNlZ21lbnQoc2VnbWVudCwgdiwgYnVpbGQpO1xuXHRcdFx0aWYgKCFpc0FycmF5KHNlZ21lbnRzKSkge1xuXHRcdFx0XHRzZWdtZW50cyA9IHNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBVUkkuZGVjb2RlKHNlZ21lbnRzKSA6IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSA9IDAsIGwgPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRzZWdtZW50c1tpXSA9IFVSSS5kZWNvZGUoc2VnbWVudHNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZWdtZW50cztcblx0XHR9XG5cblx0XHRpZiAoIWlzQXJyYXkodikpIHtcblx0XHRcdHYgPSAodHlwZW9mIHYgPT09ICdzdHJpbmcnIHx8IHYgaW5zdGFuY2VvZiBTdHJpbmcpID8gVVJJLmVuY29kZSh2KSA6IHY7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoaSA9IDAsIGwgPSB2Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2W2ldID0gVVJJLmVuY29kZSh2W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5zZWdtZW50KHNlZ21lbnQsIHYsIGJ1aWxkKTtcblx0fTtcblxuXHQvLyBtdXRhdGluZyBxdWVyeSBzdHJpbmdcblx0dmFyIHEgPSBwLnF1ZXJ5O1xuXHRwLnF1ZXJ5ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcblx0XHRpZiAodiA9PT0gdHJ1ZSkge1xuXHRcdFx0cmV0dXJuIFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcblx0XHRcdHZhciByZXN1bHQgPSB2LmNhbGwodGhpcywgZGF0YSk7XG5cdFx0XHR0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KHJlc3VsdCB8fCBkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSBlbHNlIGlmICh2ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHR0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KHYsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHEuY2FsbCh0aGlzLCB2LCBidWlsZCk7XG5cdFx0fVxuXHR9O1xuXHRwLnNldFF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7XG5cdFx0dmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG5cblx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IG5hbWUgaW5zdGFuY2VvZiBTdHJpbmcpIHtcblx0XHRcdGRhdGFbbmFtZV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBudWxsO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuXHRcdFx0XHRpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuXHRcdFx0XHRcdGRhdGFba2V5XSA9IG5hbWVba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuYWRkUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcblx0XHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRidWlsZCA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0cC5hZGRRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBidWlsZCkge1xuXHRcdHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuXHRcdFVSSS5hZGRRdWVyeShkYXRhLCBuYW1lLCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlKTtcblx0XHR0aGlzLl9wYXJ0cy5xdWVyeSA9IFVSSS5idWlsZFF1ZXJ5KGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG5cdFx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuXHRcdFx0YnVpbGQgPSB2YWx1ZTtcblx0XHR9XG5cblx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdHAucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHtcblx0XHR2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcblx0XHRVUkkucmVtb3ZlUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUpO1xuXHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcblx0XHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRidWlsZCA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0cC5oYXNRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkge1xuXHRcdHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuXHRcdHJldHVybiBVUkkuaGFzUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KTtcblx0fTtcblx0cC5zZXRTZWFyY2ggPSBwLnNldFF1ZXJ5O1xuXHRwLmFkZFNlYXJjaCA9IHAuYWRkUXVlcnk7XG5cdHAucmVtb3ZlU2VhcmNoID0gcC5yZW1vdmVRdWVyeTtcblx0cC5oYXNTZWFyY2ggPSBwLmhhc1F1ZXJ5O1xuXG5cdC8vIHNhbml0aXppbmcgVVJMc1xuXHRwLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcblx0XHRcdHJldHVybiB0aGlzXG5cdFx0XHRcdC5ub3JtYWxpemVQcm90b2NvbChmYWxzZSlcblx0XHRcdFx0Lm5vcm1hbGl6ZVBhdGgoZmFsc2UpXG5cdFx0XHRcdC5ub3JtYWxpemVRdWVyeShmYWxzZSlcblx0XHRcdFx0Lm5vcm1hbGl6ZUZyYWdtZW50KGZhbHNlKVxuXHRcdFx0XHQuYnVpbGQoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0Lm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKVxuXHRcdFx0Lm5vcm1hbGl6ZUhvc3RuYW1lKGZhbHNlKVxuXHRcdFx0Lm5vcm1hbGl6ZVBvcnQoZmFsc2UpXG5cdFx0XHQubm9ybWFsaXplUGF0aChmYWxzZSlcblx0XHRcdC5ub3JtYWxpemVRdWVyeShmYWxzZSlcblx0XHRcdC5ub3JtYWxpemVGcmFnbWVudChmYWxzZSlcblx0XHRcdC5idWlsZCgpO1xuXHR9O1xuXHRwLm5vcm1hbGl6ZVByb3RvY29sID0gZnVuY3Rpb24oYnVpbGQpIHtcblx0XHRpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJykge1xuXHRcdFx0dGhpcy5fcGFydHMucHJvdG9jb2wgPSB0aGlzLl9wYXJ0cy5wcm90b2NvbC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHRwLm5vcm1hbGl6ZUhvc3RuYW1lID0gZnVuY3Rpb24oYnVpbGQpIHtcblx0XHRpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcblx0XHRcdGlmICh0aGlzLmlzKCdJRE4nKSAmJiBwdW55Y29kZSkge1xuXHRcdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmlzKCdJUHY2JykgJiYgSVB2Nikge1xuXHRcdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IElQdjYuYmVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0cC5ub3JtYWxpemVQb3J0ID0gZnVuY3Rpb24oYnVpbGQpIHtcblx0XHQvLyByZW1vdmUgcG9ydCBvZiBpdCdzIHRoZSBwcm90b2NvbCdzIGRlZmF1bHRcblx0XHRpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJyAmJiB0aGlzLl9wYXJ0cy5wb3J0ID09PSBVUkkuZGVmYXVsdFBvcnRzW3RoaXMuX3BhcnRzLnByb3RvY29sXSkge1xuXHRcdFx0dGhpcy5fcGFydHMucG9ydCA9IG51bGw7XG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdHAubm9ybWFsaXplUGF0aCA9IGZ1bmN0aW9uKGJ1aWxkKSB7XG5cdFx0dmFyIF9wYXRoID0gdGhpcy5fcGFydHMucGF0aDtcblx0XHRpZiAoIV9wYXRoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XG5cdFx0XHR0aGlzLl9wYXJ0cy5wYXRoID0gVVJJLnJlY29kZVVyblBhdGgodGhpcy5fcGFydHMucGF0aCk7XG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHR2YXIgX3dhc19yZWxhdGl2ZTtcblx0XHR2YXIgX2xlYWRpbmdQYXJlbnRzID0gJyc7XG5cdFx0dmFyIF9wYXJlbnQsIF9wb3M7XG5cblx0XHQvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHNcblx0XHRpZiAoX3BhdGguY2hhckF0KDApICE9PSAnLycpIHtcblx0XHRcdF93YXNfcmVsYXRpdmUgPSB0cnVlO1xuXHRcdFx0X3BhdGggPSAnLycgKyBfcGF0aDtcblx0XHR9XG5cblx0XHQvLyBoYW5kbGUgcmVsYXRpdmUgZmlsZXMgKGFzIG9wcG9zZWQgdG8gZGlyZWN0b3JpZXMpXG5cdFx0aWYgKF9wYXRoLnNsaWNlKC0zKSA9PT0gJy8uLicgfHwgX3BhdGguc2xpY2UoLTIpID09PSAnLy4nKSB7XG5cdFx0XHRfcGF0aCArPSAnLyc7XG5cdFx0fVxuXG5cdFx0Ly8gcmVzb2x2ZSBzaW1wbGVzXG5cdFx0X3BhdGggPSBfcGF0aFxuXHRcdFx0LnJlcGxhY2UoLyhcXC8oXFwuXFwvKSspfChcXC9cXC4kKS9nLCAnLycpXG5cdFx0XHQucmVwbGFjZSgvXFwvezIsfS9nLCAnLycpO1xuXG5cdFx0Ly8gcmVtZW1iZXIgbGVhZGluZyBwYXJlbnRzXG5cdFx0aWYgKF93YXNfcmVsYXRpdmUpIHtcblx0XHRcdF9sZWFkaW5nUGFyZW50cyA9IF9wYXRoLnN1YnN0cmluZygxKS5tYXRjaCgvXihcXC5cXC5cXC8pKy8pIHx8ICcnO1xuXHRcdFx0aWYgKF9sZWFkaW5nUGFyZW50cykge1xuXHRcdFx0XHRfbGVhZGluZ1BhcmVudHMgPSBfbGVhZGluZ1BhcmVudHNbMF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gcmVzb2x2ZSBwYXJlbnRzXG5cdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdF9wYXJlbnQgPSBfcGF0aC5pbmRleE9mKCcvLi4nKTtcblx0XHRcdGlmIChfcGFyZW50ID09PSAtMSkge1xuXHRcdFx0XHQvLyBubyBtb3JlIC4uLyB0byByZXNvbHZlXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fSBlbHNlIGlmIChfcGFyZW50ID09PSAwKSB7XG5cdFx0XHRcdC8vIHRvcCBsZXZlbCBjYW5ub3QgYmUgcmVsYXRpdmUsIHNraXAgaXRcblx0XHRcdFx0X3BhdGggPSBfcGF0aC5zdWJzdHJpbmcoMyk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRfcG9zID0gX3BhdGguc3Vic3RyaW5nKDAsIF9wYXJlbnQpLmxhc3RJbmRleE9mKCcvJyk7XG5cdFx0XHRpZiAoX3BvcyA9PT0gLTEpIHtcblx0XHRcdFx0X3BvcyA9IF9wYXJlbnQ7XG5cdFx0XHR9XG5cdFx0XHRfcGF0aCA9IF9wYXRoLnN1YnN0cmluZygwLCBfcG9zKSArIF9wYXRoLnN1YnN0cmluZyhfcGFyZW50ICsgMyk7XG5cdFx0fVxuXG5cdFx0Ly8gcmV2ZXJ0IHRvIHJlbGF0aXZlXG5cdFx0aWYgKF93YXNfcmVsYXRpdmUgJiYgdGhpcy5pcygncmVsYXRpdmUnKSkge1xuXHRcdFx0X3BhdGggPSBfbGVhZGluZ1BhcmVudHMgKyBfcGF0aC5zdWJzdHJpbmcoMSk7XG5cdFx0fVxuXG5cdFx0X3BhdGggPSBVUkkucmVjb2RlUGF0aChfcGF0aCk7XG5cdFx0dGhpcy5fcGFydHMucGF0aCA9IF9wYXRoO1xuXHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0cC5ub3JtYWxpemVQYXRobmFtZSA9IHAubm9ybWFsaXplUGF0aDtcblx0cC5ub3JtYWxpemVRdWVyeSA9IGZ1bmN0aW9uKGJ1aWxkKSB7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLl9wYXJ0cy5xdWVyeSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGlmICghdGhpcy5fcGFydHMucXVlcnkubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gbnVsbDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucXVlcnkoVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXHRwLm5vcm1hbGl6ZUZyYWdtZW50ID0gZnVuY3Rpb24oYnVpbGQpIHtcblx0XHRpZiAoIXRoaXMuX3BhcnRzLmZyYWdtZW50KSB7XG5cdFx0XHR0aGlzLl9wYXJ0cy5mcmFnbWVudCA9IG51bGw7XG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdHAubm9ybWFsaXplU2VhcmNoID0gcC5ub3JtYWxpemVRdWVyeTtcblx0cC5ub3JtYWxpemVIYXNoID0gcC5ub3JtYWxpemVGcmFnbWVudDtcblxuXHRwLmlzbzg4NTkgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBleHBlY3QgdW5pY29kZSBpbnB1dCwgaXNvODg1OSBvdXRwdXRcblx0XHR2YXIgZSA9IFVSSS5lbmNvZGU7XG5cdFx0dmFyIGQgPSBVUkkuZGVjb2RlO1xuXG5cdFx0VVJJLmVuY29kZSA9IGVzY2FwZTtcblx0XHRVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLm5vcm1hbGl6ZSgpO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRVUkkuZW5jb2RlID0gZTtcblx0XHRcdFVSSS5kZWNvZGUgPSBkO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRwLnVuaWNvZGUgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBleHBlY3QgaXNvODg1OSBpbnB1dCwgdW5pY29kZSBvdXRwdXRcblx0XHR2YXIgZSA9IFVSSS5lbmNvZGU7XG5cdFx0dmFyIGQgPSBVUkkuZGVjb2RlO1xuXG5cdFx0VVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcblx0XHRVUkkuZGVjb2RlID0gdW5lc2NhcGU7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMubm9ybWFsaXplKCk7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdFVSSS5lbmNvZGUgPSBlO1xuXHRcdFx0VVJJLmRlY29kZSA9IGQ7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHAucmVhZGFibGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgdXJpID0gdGhpcy5jbG9uZSgpO1xuXHRcdC8vIHJlbW92aW5nIHVzZXJuYW1lLCBwYXNzd29yZCwgYmVjYXVzZSB0aGV5IHNob3VsZG4ndCBiZSBkaXNwbGF5ZWQgYWNjb3JkaW5nIHRvIFJGQyAzOTg2XG5cdFx0dXJpLnVzZXJuYW1lKCcnKS5wYXNzd29yZCgnJykubm9ybWFsaXplKCk7XG5cdFx0dmFyIHQgPSAnJztcblx0XHRpZiAodXJpLl9wYXJ0cy5wcm90b2NvbCkge1xuXHRcdFx0dCArPSB1cmkuX3BhcnRzLnByb3RvY29sICsgJzovLyc7XG5cdFx0fVxuXG5cdFx0aWYgKHVyaS5fcGFydHMuaG9zdG5hbWUpIHtcblx0XHRcdGlmICh1cmkuaXMoJ3B1bnljb2RlJykgJiYgcHVueWNvZGUpIHtcblx0XHRcdFx0dCArPSBwdW55Y29kZS50b1VuaWNvZGUodXJpLl9wYXJ0cy5ob3N0bmFtZSk7XG5cdFx0XHRcdGlmICh1cmkuX3BhcnRzLnBvcnQpIHtcblx0XHRcdFx0XHR0ICs9ICc6JyArIHVyaS5fcGFydHMucG9ydDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dCArPSB1cmkuaG9zdCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lICYmIHVyaS5fcGFydHMucGF0aCAmJiB1cmkuX3BhcnRzLnBhdGguY2hhckF0KDApICE9PSAnLycpIHtcblx0XHRcdHQgKz0gJy8nO1xuXHRcdH1cblxuXHRcdHQgKz0gdXJpLnBhdGgodHJ1ZSk7XG5cdFx0aWYgKHVyaS5fcGFydHMucXVlcnkpIHtcblx0XHRcdHZhciBxID0gJyc7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgcXAgPSB1cmkuX3BhcnRzLnF1ZXJ5LnNwbGl0KCcmJyksIGwgPSBxcC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dmFyIGt2ID0gKHFwW2ldIHx8ICcnKS5zcGxpdCgnPScpO1xuXHRcdFx0XHRxICs9ICcmJyArIFVSSS5kZWNvZGVRdWVyeShrdlswXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSlcblx0XHRcdFx0XHQucmVwbGFjZSgvJi9nLCAnJTI2Jyk7XG5cblx0XHRcdFx0aWYgKGt2WzFdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRxICs9ICc9JyArIFVSSS5kZWNvZGVRdWVyeShrdlsxXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSlcblx0XHRcdFx0XHRcdC5yZXBsYWNlKC8mL2csICclMjYnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dCArPSAnPycgKyBxLnN1YnN0cmluZygxKTtcblx0XHR9XG5cblx0XHR0ICs9IFVSSS5kZWNvZGVRdWVyeSh1cmkuaGFzaCgpLCB0cnVlKTtcblx0XHRyZXR1cm4gdDtcblx0fTtcblxuXHQvLyByZXNvbHZpbmcgcmVsYXRpdmUgYW5kIGFic29sdXRlIFVSTHNcblx0cC5hYnNvbHV0ZVRvID0gZnVuY3Rpb24oYmFzZSkge1xuXHRcdHZhciByZXNvbHZlZCA9IHRoaXMuY2xvbmUoKTtcblx0XHR2YXIgcHJvcGVydGllcyA9IFsncHJvdG9jb2wnLCAndXNlcm5hbWUnLCAncGFzc3dvcmQnLCAnaG9zdG5hbWUnLCAncG9ydCddO1xuXHRcdHZhciBiYXNlZGlyLCBpLCBwO1xuXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cycpO1xuXHRcdH1cblxuXHRcdGlmICghKGJhc2UgaW5zdGFuY2VvZiBVUkkpKSB7XG5cdFx0XHRiYXNlID0gbmV3IFVSSShiYXNlKTtcblx0XHR9XG5cblx0XHRpZiAoIXJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCkge1xuXHRcdFx0cmVzb2x2ZWQuX3BhcnRzLnByb3RvY29sID0gYmFzZS5fcGFydHMucHJvdG9jb2w7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7XG5cdFx0XHRyZXR1cm4gcmVzb2x2ZWQ7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgKHAgPSBwcm9wZXJ0aWVzW2ldKTsgaSsrKSB7XG5cdFx0XHRyZXNvbHZlZC5fcGFydHNbcF0gPSBiYXNlLl9wYXJ0c1twXTtcblx0XHR9XG5cblx0XHRpZiAoIXJlc29sdmVkLl9wYXJ0cy5wYXRoKSB7XG5cdFx0XHRyZXNvbHZlZC5fcGFydHMucGF0aCA9IGJhc2UuX3BhcnRzLnBhdGg7XG5cdFx0XHRpZiAoIXJlc29sdmVkLl9wYXJ0cy5xdWVyeSkge1xuXHRcdFx0XHRyZXNvbHZlZC5fcGFydHMucXVlcnkgPSBiYXNlLl9wYXJ0cy5xdWVyeTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHJlc29sdmVkLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygtMikgPT09ICcuLicpIHtcblx0XHRcdHJlc29sdmVkLl9wYXJ0cy5wYXRoICs9ICcvJztcblx0XHR9XG5cblx0XHRpZiAocmVzb2x2ZWQucGF0aCgpLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG5cdFx0XHRiYXNlZGlyID0gYmFzZS5kaXJlY3RvcnkoKTtcblx0XHRcdGJhc2VkaXIgPSBiYXNlZGlyID8gYmFzZWRpciA6IGJhc2UucGF0aCgpLmluZGV4T2YoJy8nKSA9PT0gMCA/ICcvJyA6ICcnO1xuXHRcdFx0cmVzb2x2ZWQuX3BhcnRzLnBhdGggPSAoYmFzZWRpciA/IChiYXNlZGlyICsgJy8nKSA6ICcnKSArIHJlc29sdmVkLl9wYXJ0cy5wYXRoO1xuXHRcdFx0cmVzb2x2ZWQubm9ybWFsaXplUGF0aCgpO1xuXHRcdH1cblxuXHRcdHJlc29sdmVkLmJ1aWxkKCk7XG5cdFx0cmV0dXJuIHJlc29sdmVkO1xuXHR9O1xuXHRwLnJlbGF0aXZlVG8gPSBmdW5jdGlvbihiYXNlKSB7XG5cdFx0dmFyIHJlbGF0aXZlID0gdGhpcy5jbG9uZSgpLm5vcm1hbGl6ZSgpO1xuXHRcdHZhciByZWxhdGl2ZVBhcnRzLCBiYXNlUGFydHMsIGNvbW1vbiwgcmVsYXRpdmVQYXRoLCBiYXNlUGF0aDtcblxuXHRcdGlmIChyZWxhdGl2ZS5fcGFydHMudXJuKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VSTnMgZG8gbm90IGhhdmUgYW55IGdlbmVyYWxseSBkZWZpbmVkIGhpZXJhcmNoaWNhbCBjb21wb25lbnRzJyk7XG5cdFx0fVxuXG5cdFx0YmFzZSA9IG5ldyBVUkkoYmFzZSkubm9ybWFsaXplKCk7XG5cdFx0cmVsYXRpdmVQYXJ0cyA9IHJlbGF0aXZlLl9wYXJ0cztcblx0XHRiYXNlUGFydHMgPSBiYXNlLl9wYXJ0cztcblx0XHRyZWxhdGl2ZVBhdGggPSByZWxhdGl2ZS5wYXRoKCk7XG5cdFx0YmFzZVBhdGggPSBiYXNlLnBhdGgoKTtcblxuXHRcdGlmIChyZWxhdGl2ZVBhdGguY2hhckF0KDApICE9PSAnLycpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVVJJIGlzIGFscmVhZHkgcmVsYXRpdmUnKTtcblx0XHR9XG5cblx0XHRpZiAoYmFzZVBhdGguY2hhckF0KDApICE9PSAnLycpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNhbGN1bGF0ZSBhIFVSSSByZWxhdGl2ZSB0byBhbm90aGVyIHJlbGF0aXZlIFVSSScpO1xuXHRcdH1cblxuXHRcdGlmIChyZWxhdGl2ZVBhcnRzLnByb3RvY29sID09PSBiYXNlUGFydHMucHJvdG9jb2wpIHtcblx0XHRcdHJlbGF0aXZlUGFydHMucHJvdG9jb2wgPSBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChyZWxhdGl2ZVBhcnRzLnVzZXJuYW1lICE9PSBiYXNlUGFydHMudXNlcm5hbWUgfHwgcmVsYXRpdmVQYXJ0cy5wYXNzd29yZCAhPT0gYmFzZVBhcnRzLnBhc3N3b3JkKSB7XG5cdFx0XHRyZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcblx0XHR9XG5cblx0XHRpZiAocmVsYXRpdmVQYXJ0cy5wcm90b2NvbCAhPT0gbnVsbCB8fCByZWxhdGl2ZVBhcnRzLnVzZXJuYW1lICE9PSBudWxsIHx8IHJlbGF0aXZlUGFydHMucGFzc3dvcmQgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xuXHRcdH1cblxuXHRcdGlmIChyZWxhdGl2ZVBhcnRzLmhvc3RuYW1lID09PSBiYXNlUGFydHMuaG9zdG5hbWUgJiYgcmVsYXRpdmVQYXJ0cy5wb3J0ID09PSBiYXNlUGFydHMucG9ydCkge1xuXHRcdFx0cmVsYXRpdmVQYXJ0cy5ob3N0bmFtZSA9IG51bGw7XG5cdFx0XHRyZWxhdGl2ZVBhcnRzLnBvcnQgPSBudWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcblx0XHR9XG5cblx0XHRpZiAocmVsYXRpdmVQYXRoID09PSBiYXNlUGF0aCkge1xuXHRcdFx0cmVsYXRpdmVQYXJ0cy5wYXRoID0gJyc7XG5cdFx0XHRyZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcblx0XHR9XG5cblx0XHQvLyBkZXRlcm1pbmUgY29tbW9uIHN1YiBwYXRoXG5cdFx0Y29tbW9uID0gVVJJLmNvbW1vblBhdGgocmVsYXRpdmVQYXRoLCBiYXNlUGF0aCk7XG5cblx0XHQvLyBJZiB0aGUgcGF0aHMgaGF2ZSBub3RoaW5nIGluIGNvbW1vbiwgcmV0dXJuIGEgcmVsYXRpdmUgVVJMIHdpdGggdGhlIGFic29sdXRlIHBhdGguXG5cdFx0aWYgKCFjb21tb24pIHtcblx0XHRcdHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xuXHRcdH1cblxuXHRcdHZhciBwYXJlbnRzID0gYmFzZVBhcnRzLnBhdGhcblx0XHRcdC5zdWJzdHJpbmcoY29tbW9uLmxlbmd0aClcblx0XHRcdC5yZXBsYWNlKC9bXlxcL10qJC8sICcnKVxuXHRcdFx0LnJlcGxhY2UoLy4qP1xcLy9nLCAnLi4vJyk7XG5cblx0XHRyZWxhdGl2ZVBhcnRzLnBhdGggPSAocGFyZW50cyArIHJlbGF0aXZlUGFydHMucGF0aC5zdWJzdHJpbmcoY29tbW9uLmxlbmd0aCkpIHx8ICcuLyc7XG5cblx0XHRyZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcblx0fTtcblxuXHQvLyBjb21wYXJpbmcgVVJJc1xuXHRwLmVxdWFscyA9IGZ1bmN0aW9uKHVyaSkge1xuXHRcdHZhciBvbmUgPSB0aGlzLmNsb25lKCk7XG5cdFx0dmFyIHR3byA9IG5ldyBVUkkodXJpKTtcblx0XHR2YXIgb25lX21hcCA9IHt9O1xuXHRcdHZhciB0d29fbWFwID0ge307XG5cdFx0dmFyIGNoZWNrZWQgPSB7fTtcblx0XHR2YXIgb25lX3F1ZXJ5LCB0d29fcXVlcnksIGtleTtcblxuXHRcdG9uZS5ub3JtYWxpemUoKTtcblx0XHR0d28ubm9ybWFsaXplKCk7XG5cblx0XHQvLyBleGFjdCBtYXRjaFxuXHRcdGlmIChvbmUudG9TdHJpbmcoKSA9PT0gdHdvLnRvU3RyaW5nKCkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIGV4dHJhY3QgcXVlcnkgc3RyaW5nXG5cdFx0b25lX3F1ZXJ5ID0gb25lLnF1ZXJ5KCk7XG5cdFx0dHdvX3F1ZXJ5ID0gdHdvLnF1ZXJ5KCk7XG5cdFx0b25lLnF1ZXJ5KCcnKTtcblx0XHR0d28ucXVlcnkoJycpO1xuXG5cdFx0Ly8gZGVmaW5pdGVseSBub3QgZXF1YWwgaWYgbm90IGV2ZW4gbm9uLXF1ZXJ5IHBhcnRzIG1hdGNoXG5cdFx0aWYgKG9uZS50b1N0cmluZygpICE9PSB0d28udG9TdHJpbmcoKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIHF1ZXJ5IHBhcmFtZXRlcnMgaGF2ZSB0aGUgc2FtZSBsZW5ndGgsIGV2ZW4gaWYgdGhleSdyZSBwZXJtdXRlZFxuXHRcdGlmIChvbmVfcXVlcnkubGVuZ3RoICE9PSB0d29fcXVlcnkubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0b25lX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KG9uZV9xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG5cdFx0dHdvX21hcCA9IFVSSS5wYXJzZVF1ZXJ5KHR3b19xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG5cblx0XHRmb3IgKGtleSBpbiBvbmVfbWFwKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwob25lX21hcCwga2V5KSkge1xuXHRcdFx0XHRpZiAoIWlzQXJyYXkob25lX21hcFtrZXldKSkge1xuXHRcdFx0XHRcdGlmIChvbmVfbWFwW2tleV0gIT09IHR3b19tYXBba2V5XSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICghYXJyYXlzRXF1YWwob25lX21hcFtrZXldLCB0d29fbWFwW2tleV0pKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2hlY2tlZFtrZXldID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGtleSBpbiB0d29fbWFwKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwodHdvX21hcCwga2V5KSkge1xuXHRcdFx0XHRpZiAoIWNoZWNrZWRba2V5XSkge1xuXHRcdFx0XHRcdC8vIHR3byBjb250YWlucyBhIHBhcmFtZXRlciBub3QgcHJlc2VudCBpbiBvbmVcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvLyBzdGF0ZVxuXHRwLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uKHYpIHtcblx0XHR0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSAhIXY7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0cC5lc2NhcGVRdWVyeVNwYWNlID0gZnVuY3Rpb24odikge1xuXHRcdHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UgPSAhIXY7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0cmV0dXJuIFVSSTtcbn0pKTsiLCJXb3JrZmxvdyA9IHt9XG5cbkBJbWFnZVNpZ24gPSB7fTtcblxuQFRyYWNlc0hhbmRsZXIgPSB7fTtcblxuQFRyYWNlc1RlbXBsYXRlID0ge307XG5cbkBJbnN0YW5jZWZvcm1UZW1wbGF0ZSA9IHt9O1xuXG5ASW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUgPSB7fTtcblxuQEluc3RhbmNlU2lnblRleHQgPSB7fVxuXG5AUmVsYXRlZEluc3RhbmNlcyA9IHt9XG5cbkBSZWxhdGVkUmVjb3JkcyA9IHt9XG5cbkBJbnN0YW5jZU1hY3JvID0ge2NvbnRleHQ6IHt9fVxuXG5AVHJhY2VzTWFuYWdlciA9IHt9O1xuXG5JbnN0YW5jZVNpZ25UZXh0LmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nID0gKGZpZWxkX2Zvcm11bGEpLT5cblx0cmV0dXJuIChmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwie3RyYWNlcy5cIikgPiAtMSB8fCBmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInt5aWppYW5sYW46XCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcIntcXFwieWlqaWFubGFuXFxcIjpcIikgPiAtMSB8fCBmaWVsZF9mb3JtdWxhPy5pbmRleE9mKFwieyd5aWppYW5sYW4nOlwiKSA+IC0xKVxuXG5JbnN0YW5jZVNpZ25UZXh0LmluY2x1ZGVzT3BpbmlvbkZpZWxkID0gKGZvcm0sIGZvcm1fdmVyc2lvbiktPlxuXHRmaWVsZF9mb3JtdWxhcyA9IG5ldyBBcnJheSgpO1xuXG5cdF9mb3JtX3ZlcnNpb24gPSB7fVxuXG5cdGlmIE1ldGVvci5pc1NlcnZlclxuXHRcdF9mb3JtX3ZlcnNpb24gPSB1dWZsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGRiLmZvcm1zLmZpbmRPbmUoe19pZDogZm9ybX0pLCBmb3JtX3ZlcnNpb24pXG5cdGVsc2Vcblx0XHRfZm9ybV92ZXJzaW9uID0gZGIuZm9ybV92ZXJzaW9ucy5maW5kT25lKHtfaWQ6IGZvcm1fdmVyc2lvbiwgZm9ybTogZm9ybX0pXG5cblx0ZmllbGRzID0gX2Zvcm1fdmVyc2lvbj8uZmllbGRzIHx8IFtdXG5cblx0ZmllbGRzLmZvckVhY2ggKGYpLT5cblx0XHRpZiBmLnR5cGUgPT0gJ3RhYmxlJ1xuXHRcdFx0Y29uc29sZS5sb2cgJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJ1xuXHRcdGVsc2UgaWYgZi50eXBlID09ICdzZWN0aW9uJ1xuXHRcdFx0Zj8uZmllbGRzPy5mb3JFYWNoIChmMSktPlxuXHRcdFx0XHRmaWVsZF9mb3JtdWxhcy5wdXNoIGYxLmZvcm11bGFcblx0XHRlbHNlXG5cdFx0XHRmaWVsZF9mb3JtdWxhcy5wdXNoIGYuZm9ybXVsYVxuXG5cdF8uc29tZSBmaWVsZF9mb3JtdWxhcywgKGZpZWxkX2Zvcm11bGEpLT5cblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKVxuXG4iLCIgICAgICAgICAgICAgXG5cbldvcmtmbG93ID0ge307XG5cbnRoaXMuSW1hZ2VTaWduID0ge307XG5cbnRoaXMuVHJhY2VzSGFuZGxlciA9IHt9O1xuXG50aGlzLlRyYWNlc1RlbXBsYXRlID0ge307XG5cbnRoaXMuSW5zdGFuY2Vmb3JtVGVtcGxhdGUgPSB7fTtcblxudGhpcy5JbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZSA9IHt9O1xuXG50aGlzLkluc3RhbmNlU2lnblRleHQgPSB7fTtcblxudGhpcy5SZWxhdGVkSW5zdGFuY2VzID0ge307XG5cbnRoaXMuUmVsYXRlZFJlY29yZHMgPSB7fTtcblxudGhpcy5JbnN0YW5jZU1hY3JvID0ge1xuICBjb250ZXh0OiB7fVxufTtcblxudGhpcy5UcmFjZXNNYW5hZ2VyID0ge307XG5cbkluc3RhbmNlU2lnblRleHQuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcgPSBmdW5jdGlvbihmaWVsZF9mb3JtdWxhKSB7XG4gIHJldHVybiAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie3RyYWNlcy5cIikgOiB2b2lkIDApID4gLTEgfHwgKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie3lpamlhbmxhbjpcIikgOiB2b2lkIDApID4gLTEgfHwgKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcIntcXFwieWlqaWFubGFuXFxcIjpcIikgOiB2b2lkIDApID4gLTEgfHwgKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcInsneWlqaWFubGFuJzpcIikgOiB2b2lkIDApID4gLTE7XG59O1xuXG5JbnN0YW5jZVNpZ25UZXh0LmluY2x1ZGVzT3BpbmlvbkZpZWxkID0gZnVuY3Rpb24oZm9ybSwgZm9ybV92ZXJzaW9uKSB7XG4gIHZhciBfZm9ybV92ZXJzaW9uLCBmaWVsZF9mb3JtdWxhcywgZmllbGRzO1xuICBmaWVsZF9mb3JtdWxhcyA9IG5ldyBBcnJheSgpO1xuICBfZm9ybV92ZXJzaW9uID0ge307XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBfZm9ybV92ZXJzaW9uID0gdXVmbG93TWFuYWdlci5nZXRGb3JtVmVyc2lvbihkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgIF9pZDogZm9ybVxuICAgIH0pLCBmb3JtX3ZlcnNpb24pO1xuICB9IGVsc2Uge1xuICAgIF9mb3JtX3ZlcnNpb24gPSBkYi5mb3JtX3ZlcnNpb25zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmb3JtX3ZlcnNpb24sXG4gICAgICBmb3JtOiBmb3JtXG4gICAgfSk7XG4gIH1cbiAgZmllbGRzID0gKF9mb3JtX3ZlcnNpb24gIT0gbnVsbCA/IF9mb3JtX3ZlcnNpb24uZmllbGRzIDogdm9pZCAwKSB8fCBbXTtcbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgIHZhciByZWY7XG4gICAgaWYgKGYudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZScpO1xuICAgIH0gZWxzZSBpZiAoZi50eXBlID09PSAnc2VjdGlvbicpIHtcbiAgICAgIHJldHVybiBmICE9IG51bGwgPyAocmVmID0gZi5maWVsZHMpICE9IG51bGwgPyByZWYuZm9yRWFjaChmdW5jdGlvbihmMSkge1xuICAgICAgICByZXR1cm4gZmllbGRfZm9ybXVsYXMucHVzaChmMS5mb3JtdWxhKTtcbiAgICAgIH0pIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmllbGRfZm9ybXVsYXMucHVzaChmLmZvcm11bGEpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBfLnNvbWUoZmllbGRfZm9ybXVsYXMsIGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEpIHtcbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKTtcbiAgfSk7XG59O1xuIiwiZGIuYXV0aF90b2tlbnMgPSBuZXcgTWV0ZW9yLkNvbGxlY3Rpb24oJ2F1dGhfdG9rZW5zJykiLCJJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUgPSB7fTtcblxuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuaW5zdGFuY2VfYXR0YWNobWVudCA9IFwiXCJcIlxuXHQ8dHI+XG5cdFx0PHRkIGNsYXNzPVwiaW5zLWF0dGFjaC12aWV3XCI+XG5cdFx0XHQ8YSBocmVmPVwie3tpbnNfYXR0YWNoX2Rvd25sb2FkX3VybCBfaWQgYWJzb2x1dGV9fVwiIGNsYXNzPVwiaW5zX2F0dGFjaF9ocmVmXCIgdGFyZ2V0PVwiX3BhcmVudFwiIGRhdGEtbmFtZT1cInt7dGhpcy5uYW1lfX1cIiBkYXRhLXR5cGU9XCJ7e3RoaXMub3JpZ2luYWwudHlwZX19XCIgZGF0YS1pZD1cInt7X2lkfX1cIj57e3RoaXMubmFtZX19PC9hPlxuXHRcdDwvdGQ+XG5cdDwvdHI+XG5cIlwiXCJcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmU2VsZWN0VXNlclJlYWQgPSBcIlwiXCJcblx0PGRpdiBjbGFzcz0nc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wgaW5zX2FwcGxpY2FudCc+e3t2YWx1ZX19PC9kaXY+XG5cIlwiXCJcblxuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuYWZGb3JtR3JvdXBSZWFkID0gXCJcIlwiXG5cdDxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPlxuXHRcdHt7I3dpdGggZ2V0RmllbGQgdGhpcy5uYW1lfX1cblx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWN0aW9uJ319XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0nc2VjdGlvbiBjYWxsb3V0IGNhbGxvdXQtZGVmYXVsdCc+XG5cdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tmX2xhYmVsIHRoaXN9fTwvbGFiZWw+XG5cdFx0XHRcdFx0XHQ8cD57e3tkZXNjcmlwdGlvbn19fTwvcD5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdHt7ZWxzZX19XG5cdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbCBwYW5lbC1kZWZhdWx0IHN0ZWVkb3MtdGFibGVcIj5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbC1ib2R5XCIgc3R5bGU9XCJwYWRkaW5nOjBweDtcIj5cblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsLWhlYWRpbmdcIiA+XG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsJz57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XG5cdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJkZXNjcmlwdGlvblwiPnt7e2Rlc2NyaXB0aW9ufX19PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInJlYWRvbmx5LXRhYmxlXCIgc3R5bGU9XCJwYWRkaW5nOjBweDtvdmVyZmxvdy14OmF1dG87XCI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGFibGUgdHlwZT0ndGFibGUnIGNsYXNzPVwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtY29uZGVuc2VkIGF1dG9mb3JtLXRhYmxlXCIgc3R5bGU9J21hcmdpbi1ib3R0b206MHB4Oycge3t0aGlzLmF0dHN9fSBpZD1cInt7dGhpcy5jb2RlfX1UYWJsZVwiIG5hbWU9XCJ7e3RoaXMuY29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3t0aGlzLm5hbWV9fVwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGhlYWQgaWQ9XCJ7e3RoaXMubmFtZX19VGhlYWRcIiBuYW1lPVwie3t0aGlzLm5hbWV9fVRoZWFkXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVUaGVhZCB0aGlzfX19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvdGhlYWQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDx0Ym9keSBpZD1cInt7dGhpcy5uYW1lfX1UYm9keVwiIG5hbWU9XCJ7e3RoaXMubmFtZX19VGJvZHlcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZUJvZHkgdGhpc319fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3Rib2R5PlxuXHRcdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0e3tlbHNlfX1cblx0XHRcdFx0XHR7eyNpZiBzaG93TGFiZWx9fVxuXHRcdFx0XHRcdFx0PGxhYmVsPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cblx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0ne3tnZXRDZkNsYXNzIHRoaXN9fSBmb3JtLWNvbnRyb2wnIHJlYWRvbmx5IGRpc2FibGVkPnt7e2dldFZhbHVlIGNvZGV9fX08L2Rpdj5cblx0XHRcdFx0e3svaWZ9fVxuXHRcdFx0e3svaWZ9fVxuXHRcdHt7L3dpdGh9fVxuXHQ8L2Rpdj5cblwiXCJcIlxuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuYWZGb3JtR3JvdXAgPSBcIlwiXCJcblxuXHR7eyN3aXRoIGdldEZpZWxkIHRoaXMubmFtZX19XG5cdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VjdGlvbid9fVxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J3NlY3Rpb24gY2FsbG91dCBjYWxsb3V0LWRlZmF1bHQnPlxuXHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Zl9sYWJlbCB0aGlzfX08L2xhYmVsPlxuXHRcdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XG5cdFx0XHRcdFx0PC9kaXY+XG4gIFx0XHRcdFx0PC9kaXY+XG5cdFx0XHR7e2Vsc2V9fVxuXHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndGFibGUnfX1cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicGFuZWwgcGFuZWwtZGVmYXVsdCBzdGVlZG9zLXRhYmxlXCI+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiIHN0eWxlPVwicGFkZGluZzowcHg7XCI+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbC1oZWFkaW5nXCIgPlxuXHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCc+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZGVzY3JpcHRpb25cIj57e3tkZXNjcmlwdGlvbn19fTwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJyZWFkb25seS10YWJsZVwiIHN0eWxlPVwicGFkZGluZzowcHg7b3ZlcmZsb3cteDphdXRvO1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRhYmxlIHR5cGU9J3RhYmxlJyBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVwiIHN0eWxlPSdtYXJnaW4tYm90dG9tOjBweDsnIHt7dGhpcy5hdHRzfX0gaWQ9XCJ7e3RoaXMuY29kZX19VGFibGVcIiBuYW1lPVwie3t0aGlzLmNvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7dGhpcy5uYW1lfX1cIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PHRoZWFkIGlkPVwie3t0aGlzLm5hbWV9fVRoZWFkXCIgbmFtZT1cInt7dGhpcy5uYW1lfX1UaGVhZFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlVGhlYWQgdGhpc319fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3RoZWFkPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGJvZHkgaWQ9XCJ7e3RoaXMubmFtZX19VGJvZHlcIiBuYW1lPVwie3t0aGlzLm5hbWV9fVRib2R5XCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVCb2R5IHRoaXN9fX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cblx0XHRcdFx0XHRcdFx0XHRcdDwvdGFibGU+XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdHt7ZWxzZX19XG5cdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2lucHV0J319XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiIGRhdGEtcmVxdWlyZWQ9XCJ7eyNpZiBpc19yZXF1aXJlZH19dHJ1ZXt7L2lmfX1cIj5cblx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHR7eyNpZiBpc190ZXh0YXJlYX19XG5cdFx0XHRcdFx0XHRcdFx0PHRleHRhcmVhIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiB7e2dldFBlcm1pc3Npb25zIGNvZGV9fSBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+PC90ZXh0YXJlYT5cblx0XHRcdFx0XHRcdFx0e3svaWZ9fVxuXHRcdFx0XHRcdFx0XHR7eyN1bmxlc3MgaXNfdGV4dGFyZWF9fVxuXHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiB7e2dldFBlcm1pc3Npb25zIGNvZGV9fSBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG5cdFx0XHRcdFx0XHRcdHt7L3VubGVzc319XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHR7e2Vsc2V9fVxuXHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ251bWJlcid9fVxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cblx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cIm51bWJlclwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0e3tlbHNlfX1cblx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2RhdGUnfX1cblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIGRhdGEtdHlwZT1cImRhdGVcIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdHt7ZWxzZX19XG5cdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2RhdGVUaW1lJ319XG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXR5cGU9J2RhdGV0aW1lJyBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxuXHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3Bhc3N3b3JkJ319XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWxlY3QnfX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PHNlbGVjdCBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8b3B0aW9uIHZhbHVlPVwie3t2YWx1ZX19XCI+e3tsYWJlbH19PC9vcHRpb24+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9zZWxlY3Q+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3JhZGlvJ319XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJhZi1yYWRpby1ncm91cFwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxuICAgICAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmUgZml4LWluZGVudFwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cInt7dmFsdWV9fVwiIG5hbWU9XCJ7ey4uL2NvZGV9fVwiIGNsYXNzPVwicmFkaW8taW5saW5lIGZpeC1pbmRlbnRcIj4ge3tsYWJlbH19PC9sYWJlbD5cbiAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxuICAgIFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdtdWx0aVNlbGVjdCd9fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYWYtY2hlY2tib3gtZ3JvdXBcIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJ7e3ZhbHVlfX1cIiBuYW1lPVwie3suLi9jb2RlfX1cIiBjbGFzcz1cImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XCI+IHt7bGFiZWx9fTwvbGFiZWw+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndXJsJ319XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidXJsXCIgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnZW1haWwnfX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJlbWFpbFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2NoZWNrYm94J319XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJjaGVja2JveFwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJ0cnVlXCIgbmFtZT1cInt7Y29kZX19XCIgY2xhc3M9XCJjaGVja2JveC1pbmxpbmUgZml4LWluZGVudFwiPjwvbGFiZWw+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0ne3tnZXRDZkNsYXNzIHRoaXN9fSBmb3JtLWNvbnRyb2wnIHJlYWRvbmx5IGRpc2FibGVkPnt7e2dldFZhbHVlIGNvZGV9fX08L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxuXHRcdFx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdFx0e3svaWZ9fVxuXHRcdFx0XHR7ey9pZn19XG5cdFx0XHR7ey9pZn19XG5cdFx0e3svd2l0aH19XG5cIlwiXCJcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZSA9ICh0ZW1wYWx0ZU5hbWUsIHN0ZWVkb3NEYXRhKSAtPlxuXHR0ZW1wbGF0ZSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdXG5cblx0dGVtcGxhdGVDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtpc0JvZHk6IHRydWV9KTtcblxuXHR0ZW1wbGF0ZVJlbmRlckZ1bmN0aW9uID0gZXZhbCh0ZW1wbGF0ZUNvbXBpbGVkKTtcblxuXHRUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdID0gbmV3IEJsYXplLlRlbXBsYXRlKHRlbXBhbHRlTmFtZSwgdGVtcGxhdGVSZW5kZXJGdW5jdGlvbik7XG5cdFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxuXHRUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdLmhlbHBlcnMgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVyc1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW5zdGFuY2VTaWduVGV4dCA9IChzdGVlZG9zRGF0YSktPlxuXHRpbnN0YW5jZVNpZ25UZXh0SHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2luc3RhbmNlX3NpZ25fdGV4dC5odG1sJylcblxuXHRpbnN0YW5jZVNpZ25UZXh0Q29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGluc3RhbmNlU2lnblRleHRIdG1sLCB7aXNCb2R5OiB0cnVlfSk7XG5cblx0aW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uID0gZXZhbChpbnN0YW5jZVNpZ25UZXh0Q29tcGlsZWQpO1xuXG5cdFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZVNpZ25UZXh0XCIsIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbik7XG5cdFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxuXHRUZW1wbGF0ZS5pbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMgSW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzXG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbWFnZVNpZ24gPSAoc3RlZWRvc0RhdGEpIC0+XG5cdGltYWdlU2lnbkh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbWFnZV9zaWduLmh0bWwnKVxuXHRpbWFnZVNpZ25Db21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoaW1hZ2VTaWduSHRtbCwge2lzQm9keTogdHJ1ZX0pO1xuXHRpbWFnZVNpZ25SZW5kZXJGdW5jdGlvbiA9IGV2YWwoaW1hZ2VTaWduQ29tcGlsZWQpO1xuXHRUZW1wbGF0ZS5pbWFnZVNpZ24gPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbWFnZVNpZ25cIiwgaW1hZ2VTaWduUmVuZGVyRnVuY3Rpb24pO1xuXHRUZW1wbGF0ZS5pbWFnZVNpZ24uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxuXHRUZW1wbGF0ZS5pbWFnZVNpZ24uaGVscGVycyBJbWFnZVNpZ24uaGVscGVyc1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlVHJhY2VzSGFubGRlciA9IChzdGVlZG9zRGF0YSkgLT5cblx0dHJhY2VzSGFubGRlckh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS90cmFjZXNfaGFuZGxlci5odG1sJylcblx0dHJhY2VzSGFubGRlckNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0cmFjZXNIYW5sZGVySHRtbCwge2lzQm9keTogdHJ1ZX0pO1xuXHR0cmFjZXNIYW5sZGVyUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRyYWNlc0hhbmxkZXJDb21waWxlZCk7XG5cdFRlbXBsYXRlLmluc3RhbmNlX3RyYWNlc19oYW5kbGVyID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXJcIiwgdHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uKTtcblx0VGVtcGxhdGUuaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXIuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxuXHRUZW1wbGF0ZS5pbnN0YW5jZV90cmFjZXNfaGFuZGxlci5oZWxwZXJzIFRyYWNlc0hhbmRsZXIuaGVscGVyc1xuXG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbml0ID0gKHN0ZWVkb3NEYXRhKSAtPlxuXHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiYWZTZWxlY3RVc2VyUmVhZFwiLCBzdGVlZG9zRGF0YSk7XG5cblx0aWYgTWV0ZW9yLmlzU2VydmVyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmRm9ybUdyb3VwXCIsIHN0ZWVkb3NEYXRhKTtcblxuXHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiYWZGb3JtR3JvdXBSZWFkXCIsIHN0ZWVkb3NEYXRhKTtcblx0aWYgTWV0ZW9yLmlzU2VydmVyXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImluc3RhbmNlX2F0dGFjaG1lbnRcIiwge2Fic29sdXRlOiBzdGVlZG9zRGF0YS5hYnNvbHV0ZX0pO1xuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbWFnZVNpZ24oc3RlZWRvc0RhdGEpXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZVRyYWNlc0hhbmxkZXIoc3RlZWRvc0RhdGEpO1xuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbnN0YW5jZVNpZ25UZXh0KHN0ZWVkb3NEYXRhKVxuXG5nZXRMaW5rVGV4dCA9IChpdGVtLCBsYWJlbCwgZGV0YWlsX3VybCktPlxuXHRpZiBkZXRhaWxfdXJsXG5cdFx0ZGV0YWlsX3VybCA9IGRldGFpbF91cmwucmVwbGFjZShcIntfaWR9XCIsIGl0ZW0uX2lkKVxuXHRcdGlmICEvXmh0dHAocz8pOlxcL1xcLy8udGVzdChkZXRhaWxfdXJsKVxuXHRcdFx0ZGV0YWlsX3VybCA9IFN0ZWVkb3MuYWJzb2x1dGVVcmwoZGV0YWlsX3VybClcblx0XHRyZXR1cm4gJzxhIGhyZWY9XCInK2RldGFpbF91cmwrJ1wiIHRhcmdldD1cIl9ibGFua1wiPicrbGFiZWwrJzwvYT4nO1xuXHRlbHNlXG5cdFx0cmV0dXJuIGxhYmVsXG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSA9ICh2YWx1ZSwgZmllbGQsIGxvY2FsZSwgdXRjT2Zmc2V0KSAtPlxuXHRpZiAhdmFsdWUgJiYgdmFsdWUgIT0gZmFsc2Vcblx0XHRyZXR1cm4gJydcblx0c3dpdGNoIGZpZWxkLnR5cGVcblx0XHR3aGVuICdlbWFpbCdcblx0XHRcdHZhbHVlID0gaWYgdmFsdWUgdGhlbiAnPGEgaHJlZj1cXCdtYWlsdG86JyArIHZhbHVlICsgJ1xcJz4nICsgdmFsdWUgKyAnPC9hPicgZWxzZSAnJ1xuXHRcdHdoZW4gJ3VybCdcblx0XHRcdGlmIHZhbHVlXG5cdFx0XHRcdGlmIHZhbHVlLmluZGV4T2YoXCJodHRwXCIpID09IDBcblx0XHRcdFx0XHR0cnlcblx0XHRcdFx0XHRcdHZhbHVlID0gXCI8YSBocmVmPSdcIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcblx0XHRcdFx0XHRjYXRjaCBlXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IFwiPGEgaHJlZj0nJyB0YXJnZXQ9J19ibGFuayc+XCIgKyB2YWx1ZSArIFwiPC9hPlwiO1xuXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR2YWx1ZSA9IFwiPGEgaHJlZj0naHR0cDovL1wiICsgZW5jb2RlVVJJKHZhbHVlKSArIFwiJyB0YXJnZXQ9J19ibGFuayc+XCIgKyB2YWx1ZSArIFwiPC9hPlwiO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR2YWx1ZSA9ICcnXG5cdFx0d2hlbiAnZ3JvdXAnXG5cdFx0XHRpZiBmaWVsZC5pc19tdWx0aXNlbGVjdFxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlPy5nZXRQcm9wZXJ0eShcImZ1bGxuYW1lXCIpLnRvU3RyaW5nKClcblx0XHRcdGVsc2Vcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8uZnVsbG5hbWVcblx0XHR3aGVuICd1c2VyJ1xuXHRcdFx0aWYgZmllbGQuaXNfbXVsdGlzZWxlY3Rcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8uZ2V0UHJvcGVydHkoXCJuYW1lXCIpLnRvU3RyaW5nKClcblx0XHRcdGVsc2Vcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8ubmFtZVxuXHRcdHdoZW4gJ3Bhc3N3b3JkJ1xuXHRcdFx0dmFsdWUgPSAnKioqKioqJ1xuXHRcdHdoZW4gJ2NoZWNrYm94J1xuXHRcdFx0aWYgdmFsdWUgJiYgdmFsdWUgIT0gJ2ZhbHNlJ1xuXHRcdFx0XHR2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X3llc1wiLCB7fSwgbG9jYWxlKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X25vXCIsIHt9LCBsb2NhbGUpXG5cdFx0d2hlbiAnZGF0ZVRpbWUnXG5cdFx0XHRpZiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPT0gMTZcblx0XHRcdFx0dCA9IHZhbHVlLnNwbGl0KFwiVFwiKVxuXHRcdFx0XHR0MCA9IHRbMF0uc3BsaXQoXCItXCIpO1xuXHRcdFx0XHR0MSA9IHRbMV0uc3BsaXQoXCI6XCIpO1xuXG5cdFx0XHRcdHllYXIgPSB0MFswXTtcblx0XHRcdFx0bW9udGggPSB0MFsxXTtcblx0XHRcdFx0ZGF0ZSA9IHQwWzJdO1xuXHRcdFx0XHRob3VycyA9IHQxWzBdO1xuXHRcdFx0XHRzZWNvbmRzID0gdDFbMV07XG5cblx0XHRcdFx0dmFsdWUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRhdGUsIGhvdXJzLCBzZWNvbmRzKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxuXG5cdFx0XHR2YWx1ZSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5mb3JtYXREYXRlKHZhbHVlLCB1dGNPZmZzZXQpO1xuXHRcdHdoZW4gJ2lucHV0J1xuXHRcdFx0aWYgZmllbGQuaXNfdGV4dGFyZWFcblx0XHRcdFx0dmFsdWUgPSBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bih2YWx1ZSkpXG5cdFx0d2hlbiAnbnVtYmVyJ1xuXHRcdFx0aWYgdmFsdWUgb3IgdmFsdWUgPT0gMFxuXHRcdFx0XHR2YWx1ZSA9IFN0ZWVkb3MubnVtYmVyVG9TdHJpbmcgdmFsdWUsIGZpZWxkLmRpZ2l0c1xuXHRcdHdoZW4gJ29kYXRhJ1xuXHRcdFx0ZGV0YWlsX3VybCA9IGZpZWxkLmRldGFpbF91cmxcblx0XHRcdGlmIGZpZWxkLmlzX211bHRpc2VsZWN0XG5cdFx0XHRcdHZhbHVlID0gXy5tYXAgdmFsdWUsIChpdGVtKS0+XG5cdFx0XHRcdFx0cmV0dXJuIGdldExpbmtUZXh0KGl0ZW0sIGl0ZW1bJ0BsYWJlbCddLCBkZXRhaWxfdXJsKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR2YWx1ZSA9IGdldExpbmtUZXh0KHZhbHVlLCB2YWx1ZVsnQGxhYmVsJ10sIGRldGFpbF91cmwpXG5cdFx0d2hlbiAnaHRtbCdcblx0XHRcdHZhbHVlID0gaWYgdmFsdWUgdGhlbiBcIjxkaXYgY2xhc3M9XFxcInN0ZWVkb3MtaHRtbFxcXCI+I3t2YWx1ZX08L2Rpdj5cIiBlbHNlICcnXG5cblx0cmV0dXJuIHZhbHVlO1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwgPSAoZmllbGRzLCBjb2RlKSAtPlxuXHRmaWVsZCA9IGZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKVxuXHRpZiBmaWVsZFxuXHRcdGlmIGZpZWxkLm5hbWVcblx0XHRcdHJldHVybiBmaWVsZC5uYW1lXG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIGZpZWxkLmNvZGVcblxuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbiA9IChpbnN0YW5jZSktPlxuXHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcblxuXHRmb3JtX3ZlcnNpb24gPSB7fVxuXG5cdGZvcm1fZmllbGRzID0gW107XG5cblx0aWYgZm9ybS5jdXJyZW50Ll9pZCA9PSBpbnN0YW5jZS5mb3JtX3ZlcnNpb25cblx0XHRmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnRcblx0ZWxzZVxuXHRcdGZvcm1fdmVyc2lvbiA9IF8ud2hlcmUoZm9ybS5oaXN0b3J5cywge19pZDogaW5zdGFuY2UuZm9ybV92ZXJzaW9ufSlbMF1cblxuXHRmb3JtX3ZlcnNpb24uZmllbGRzLmZvckVhY2ggKGZpZWxkKS0+XG5cdFx0aWYgZmllbGQudHlwZSA9PSAnc2VjdGlvbidcblx0XHRcdGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuXHRcdFx0aWYgZmllbGQuZmllbGRzXG5cdFx0XHRcdGZpZWxkLmZpZWxkcy5mb3JFYWNoIChmKSAtPlxuXHRcdFx0XHRcdGZvcm1fZmllbGRzLnB1c2goZik7XG5cdFx0ZWxzZSBpZiBmaWVsZC50eXBlID09ICd0YWJsZSdcblx0XHRcdGZpZWxkWydzZmllbGRzJ10gPSBmaWVsZFsnZmllbGRzJ11cblx0XHRcdGRlbGV0ZSBmaWVsZFsnZmllbGRzJ11cblx0XHRcdGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuXHRcdGVsc2Vcblx0XHRcdGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuXG5cdGZvcm1fdmVyc2lvbi5maWVsZHMgPSBmb3JtX2ZpZWxkcztcblxuXHRyZXR1cm4gZm9ybV92ZXJzaW9uO1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0Rmxvd1ZlcnNpb24gPSAoaW5zdGFuY2UpLT5cblx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XG5cdGZsb3dfdmVyc2lvbiA9IHt9XG5cdGlmIGZsb3cuY3VycmVudC5faWQgPT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uXG5cdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50XG5cdGVsc2Vcblx0XHRmbG93X3ZlcnNpb24gPSBfLndoZXJlKGZsb3cuaGlzdG9yeXMsIHtfaWQ6IGluc3RhbmNlLmZsb3dfdmVyc2lvbn0pWzBdXG5cblx0cmV0dXJuIGZsb3dfdmVyc2lvbjtcblxuXG5fZ2V0Vmlld0h0bWwgPSAocGF0aCkgLT5cblx0dmlld0h0bWwgPSBBc3NldHMuZ2V0VGV4dChwYXRoKVxuXG5cdGlmIHZpZXdIdG1sXG5cdFx0dmlld0h0bWwgPSB2aWV3SHRtbC5yZXBsYWNlKC88dGVtcGxhdGVbXFx3XFxzXFxcIlxcPSddKz4vaSxcIlwiKS5yZXBsYWNlKC88XFwvdGVtcGxhdGU+L2ksXCJcIilcblxuXHRyZXR1cm4gdmlld0h0bWw7XG5cbl9nZXRMb2NhbGUgPSAodXNlciktPlxuXHRpZiB1c2VyPy5sb2NhbGU/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xuXHRcdGxvY2FsZSA9IFwiemgtQ05cIlxuXHRlbHNlIGlmIHVzZXI/LmxvY2FsZT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnZW4tdXMnXG5cdFx0bG9jYWxlID0gXCJlblwiXG5cdGVsc2Vcblx0XHRsb2NhbGUgPSBcInpoLUNOXCJcblx0cmV0dXJuIGxvY2FsZVxuXG5cbl9nZXRSZXF1aXJlZEZpZWxkcyA9IChmaWVsZHMsIHJldiktPlxuXHRpZiAhcmV2XG5cdFx0cmV2ID0gW107XG5cblx0ZmllbGRzLmZvckVhY2ggKGZpZWxkKS0+XG5cdFx0aWYgZmllbGQudHlwZSA9PSAnc2VjdGlvbidcblx0XHRcdF9nZXRSZXF1aXJlZEZpZWxkcyhmaWVsZC5maWVsZHMsIHJldilcblx0XHRlbHNlIGlmIGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xuXG5cdFx0ZWxzZVxuXHRcdFx0aWYgZmllbGQuaXNfcmVxdWlyZWRcblx0XHRcdFx0cmV2LnB1c2ggZmllbGQuY29kZVxuXHRyZXR1cm4gcmV2O1xuXG5fZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMgPSAoZmllbGRzLCBzdGVwcyktPlxuXHRzdGFydFN0ZXAgPSBzdGVwcy5maW5kUHJvcGVydHlCeVBLKFwic3RlcF90eXBlXCIsXCJzdGFydFwiKVxuXG5cdGVkaXRhYmxlQ29kZSA9IFtdXG5cblx0Xy5rZXlzKHN0YXJ0U3RlcC5wZXJtaXNzaW9ucykuZm9yRWFjaCAoa2V5KS0+XG5cdFx0aWYgc3RhcnRTdGVwLnBlcm1pc3Npb25zW2tleV0gPT0gJ2VkaXRhYmxlJ1xuXHRcdFx0ZWRpdGFibGVDb2RlLnB1c2gga2V5XG5cblx0cmV0dXJuIGVkaXRhYmxlQ29kZVxuXG5fZ2V0U3RhcnRTdGVwUmVxdWlyZWRGaWVsZHMgPSAoZmllbGRzLCBzdGVwcyktPlxuXHRyZXF1aXJlZEZpZWxkcyA9IF9nZXRSZXF1aXJlZEZpZWxkcyhmaWVsZHMpXG5cblx0ZWRpdGFibGVDb2RlID0gX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzKGZpZWxkcywgc3RlcHMpXG5cblx0cmV0dXJuIF8uaW50ZXJzZWN0aW9uKHJlcXVpcmVkRmllbGRzLCBlZGl0YWJsZUNvZGUpXG5cbl9nZXRUZW1wbGF0ZURhdGEgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKS0+XG5cdGlmIE1ldGVvci5pc1NlcnZlclxuXHRcdGZvcm1fdmVyc2lvbiA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKGluc3RhbmNlKVxuXHRlbHNlXG5cdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oaW5zdGFuY2UpXG5cblx0bG9jYWxlID0gX2dldExvY2FsZSh1c2VyKVxuXG5cdHN0ZWVkb3NEYXRhID0ge31cblxuXHRpZiBNZXRlb3IuaXNDbGllbnRcblx0XHRzdGVlZG9zRGF0YSA9IF8uY2xvbmUoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpKVxuXHRcdHN0ZWVkb3NEYXRhLmluc25hbWUgPSBpbnN0YW5jZS5uYW1lXG5cdFx0c3RlZWRvc0RhdGEuaW5zX3N0YXRlID0gaW5zdGFuY2Uuc3RhdGVcblx0XHRzdGVlZG9zRGF0YS5pbnNfZmluYWxfZGVjaXNpb24gPSBpbnN0YW5jZS5pbnNfZmluYWxfZGVjaXNpb25cblx0XHRzdGVlZG9zRGF0YS5pbnNfY29kZSA9IGluc3RhbmNlLmNvZGVcblx0XHRzdGVlZG9zRGF0YS5pbnNfaXNfYXJjaGl2ZWQgPSBpbnN0YW5jZS5pc19hcmNoaXZlZFxuXHRcdHN0ZWVkb3NEYXRhLmluc19pc19kZWxldGVkID0gaW5zdGFuY2UuaW5zX2lzX2RlbGV0ZWRcblx0XHRzdGVlZG9zRGF0YS5hcHBsaWNhbnRfbmFtZSA9IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lXG5cdFx0c3RlZWRvc0RhdGEuYXBwbGljYW50Q29udGV4dCA9IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lXG5cblx0c3RlZWRvc0RhdGEuaW5zdGFuY2UgPSBpbnN0YW5jZVxuXHRzdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb24gPSBmb3JtX3ZlcnNpb25cblx0c3RlZWRvc0RhdGEubG9jYWxlID0gbG9jYWxlXG5cdHN0ZWVkb3NEYXRhLnV0Y09mZnNldCA9IHVzZXIudXRjT2Zmc2V0XG5cdHN0ZWVkb3NEYXRhLnNwYWNlID0gaW5zdGFuY2Uuc3BhY2Vcblx0c3RlZWRvc0RhdGEuc2Vzc2lvblVzZXJJZCA9IHVzZXIuX2lkXG5cblx0aWYgTWV0ZW9yLmlzU2VydmVyXG5cdFx0aWYgb3B0aW9ucz8uZWRpdGFibGVcblx0XHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlLmZvcm19KVxuXG5cdFx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBpbnN0YW5jZS5mbG93fSlcblxuXHRcdFx0c3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHMgPSBfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMoZm9ybS5jdXJyZW50LmZpZWxkcywgZmxvdy5jdXJyZW50LnN0ZXBzKTtcblxuXHRyZXR1cm4gc3RlZWRvc0RhdGE7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5mb3JtYXREYXRlID0gKGRhdGUsIHV0Y09mZnNldCktPlxuXHRpZiBNZXRlb3IuaXNTZXJ2ZXJcblx0XHRwYXNzaW5nID0gZmFsc2U7XG5cdGVsc2Vcblx0XHRwYXNzaW5nID0gdHJ1ZTtcblxuXHRpZiAhdXRjT2Zmc2V0ICYmIHV0Y09mZnNldCAhPTBcblx0XHR1dGNPZmZzZXQgPSA4XG5cblx0cmV0dXJuIG1vbWVudChkYXRlKS51dGNPZmZzZXQodXRjT2Zmc2V0LCBwYXNzaW5nKS5mb3JtYXQoXCJZWVlZLU1NLUREIEhIOm1tXCIpO1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxuXG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXG5cblx0c3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcblxuXHRpZiBvcHRpb25zPy5hYnNvbHV0ZVxuXHRcdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gdHJ1ZTtcblxuXHRpbnN0YW5jZVRlbXBsYXRlID0gVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlKGluc3RhbmNlLCBvcHRpb25zPy50ZW1wbGF0ZU5hbWUpO1xuXG5cdGluc3RhbmNlVGVtcGxhdGUgPSBpbnN0YW5jZVRlbXBsYXRlLnJlcGxhY2UoL2FmU2VsZWN0VXNlci9nLFwiYWZTZWxlY3RVc2VyUmVhZFwiKVxuXG5cdGlmICFvcHRpb25zPy5lZGl0YWJsZVxuXHRcdGluc3RhbmNlVGVtcGxhdGUgPSBpbnN0YW5jZVRlbXBsYXRlLnJlcGxhY2UoL2FmRm9ybUdyb3VwL2csXCJhZkZvcm1Hcm91cFJlYWRcIilcblxuXHRpbnN0YW5jZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbnN0YW5jZVRlbXBsYXRlLCB7aXNCb2R5OiB0cnVlfSk7XG5cblx0aW5zdGFuY2VSZW5kZXJGdW5jdGlvbiA9IGV2YWwoaW5zdGFuY2VDb21waWxlZCk7XG5cblx0VGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlX3JlYWRvbmx5X3ZpZXdcIiwgaW5zdGFuY2VSZW5kZXJGdW5jdGlvbik7XG5cblx0VGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXG5cblx0VGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldy5oZWxwZXJzIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnNcblxuXHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuaW5pdChzdGVlZG9zRGF0YSk7XG5cblx0Ym9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcsIHN0ZWVkb3NEYXRhKVxuXG5cdHJldHVybiBcIlwiXCJcblx0XHQ8ZGl2IGlkPSdpbnN0YW5jZWZvcm0nID5cblx0XHRcdCN7Ym9keX1cblx0XHQ8L2Rpdj5cblx0XCJcIlwiXG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRUcmFjZXNWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxuXG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXG5cblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XG5cdGlmIGZvcm0uaW5zdGFuY2Vfc3R5bGUgPT0gXCJ0YWJsZVwiIHx8IG9wdGlvbnM/LnRlbXBsYXRlTmFtZSA9PSBcInRhYmxlXCJcblx0XHR0cmFjZXNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvdHJhY2VzX3RhYmxlLmh0bWwnKVxuXHRlbHNlXG5cdFx0dHJhY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlcy5odG1sJylcblxuXHR0cmFjZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0cmFjZXNIdG1sLCB7aXNCb2R5OiB0cnVlfSk7XG5cblx0dHJhY2VSZW5kZXJGdW5jdGlvbiA9IGV2YWwodHJhY2VDb21waWxlZCk7XG5cblx0VGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInRyYWNlX3JlYWRvbmx5X3ZpZXdcIiwgdHJhY2VSZW5kZXJGdW5jdGlvbik7XG5cblx0VGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXG5cblx0VGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldy5oZWxwZXJzIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnNcblxuXHRib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldywgaW5zdGFuY2UudHJhY2VzKVxuXG5cdHJldHVybiBib2R5O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0QXR0YWNobWVudFZpZXcgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlKS0+XG5cblx0c3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSlcblxuXHRhdHRhY2htZW50SHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2luc3RhbmNlX2F0dGFjaG1lbnRzLmh0bWwnKVxuXG5cdGF0dGFjaG1lbnRDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoYXR0YWNobWVudEh0bWwsIHtpc0JvZHk6IHRydWV9KTtcblxuXHRhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24gPSBldmFsKGF0dGFjaG1lbnRDb21waWxlZCk7XG5cblx0VGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXdcIiwgYXR0YWNobWVudFJlbmRlckZ1bmN0aW9uKTtcblxuXHRUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcblxuXHRUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3LmhlbHBlcnMgSW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVyc1xuXG5cdGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3KVxuXG5cdHJldHVybiBib2R5O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXcgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKS0+XG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXG5cblx0c3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcblxuXHRpZiBvcHRpb25zPy5hYnNvbHV0ZVxuXHRcdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gdHJ1ZTtcblxuXHRyZWxhdGVkSW5zdGFuY2VzSHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3JlbGF0ZWRfaW5zdGFuY2VzLmh0bWwnKVxuXG5cdHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUocmVsYXRlZEluc3RhbmNlc0h0bWwsIHtpc0JvZHk6IHRydWV9KTtcblxuXHRyZWxhdGVkSW5zdGFuY2VzUmVuZGVyRnVuY3Rpb24gPSBldmFsKHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCk7XG5cblx0VGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXdcIiwgcmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uKTtcblxuXHRUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcblxuXHRUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LmhlbHBlcnMgUmVsYXRlZEluc3RhbmNlcy5oZWxwZXJzXG5cblx0Ym9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcsIHN0ZWVkb3NEYXRhKVxuXG5cdHJldHVybiBib2R5O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxuXHRzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKVxuXG5cdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gZmFsc2U7XG5cblx0aWYgb3B0aW9ucz8uYWJzb2x1dGVcblx0XHRzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XG5cblx0cmVsYXRlZFJlY29yZHNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvcmVsYXRlZF9yZWNvcmRzLmh0bWwnKVxuXG5cdHJlbGF0ZWRSZWNvcmRzQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHJlbGF0ZWRSZWNvcmRzSHRtbCwge2lzQm9keTogdHJ1ZX0pO1xuXG5cdHJlbGF0ZWRSZWNvcmRzUmVuZGVyRnVuY3Rpb24gPSBldmFsKHJlbGF0ZWRSZWNvcmRzQ29tcGlsZWQpO1xuXG5cdFRlbXBsYXRlLnJlbGF0ZWRfcmVjb3Jkc192aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwicmVsYXRlZF9yZWNvcmRzX3ZpZXdcIiwgcmVsYXRlZFJlY29yZHNSZW5kZXJGdW5jdGlvbik7XG5cblx0VGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxuXG5cdFRlbXBsYXRlLnJlbGF0ZWRfcmVjb3Jkc192aWV3LmhlbHBlcnMgUmVsYXRlZFJlY29yZHMuaGVscGVyc1xuXG5cdGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5yZWxhdGVkX3JlY29yZHNfdmlldywgc3RlZWRvc0RhdGEpXG5cblx0cmV0dXJuIGJvZHk7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRPbkxvYWRTY3JpcHQgPSAoaW5zdGFuY2UpLT5cblx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcblxuXHRmb3JtX3NjcmlwdCA9IGZvcm1fdmVyc2lvbi5mb3JtX3NjcmlwdDtcblxuXHRpZiBmb3JtX3NjcmlwdCAmJiBmb3JtX3NjcmlwdC5yZXBsYWNlKC9cXG4vZyxcIlwiKS5yZXBsYWNlKC9cXHMvZyxcIlwiKS5sZW5ndGggPiAwXG5cdFx0Zm9ybV9zY3JpcHQgPSBcIkNvcmVGb3JtID0ge307Q29yZUZvcm0uaW5zdGFuY2Vmb3JtID0ge307XCIgKyBmb3JtX3NjcmlwdFxuXHRcdGZvcm1fc2NyaXB0ICs9IFwiO2lmKENvcmVGb3JtLmZvcm1fT25Mb2FkKXt3aW5kb3cub25sb2FkID0gQ29yZUZvcm0uZm9ybV9PbkxvYWQoKTt9XCJcblx0ZWxzZVxuXHRcdGZvcm1fc2NyaXB0ID0gXCJcIlxuXG5cblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpLT5cblxuXHRib2R5ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuXG5cdG9uTG9hZFNjcmlwdCA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRPbkxvYWRTY3JpcHQoaW5zdGFuY2UpO1xuXG5cdGNyZWF0b3JTZXJ2aWNlID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy53ZWJzZXJ2aWNlcz8uY3JlYXRvcj8udXJsXG5cdGluc19yZWNvcmRfaWRzID0gaW5zdGFuY2UucmVjb3JkX2lkc1xuXHRsb2NhbGUgPSBfZ2V0TG9jYWxlKHVzZXIpO1xuXHRvcGVuRmlsZVNjcmlwdCA9IFwiXCJcIlxuXHRcdFx0aWYod2luZG93LmlzTm9kZSAmJiBpc05vZGUoKSl7XG5cdFx0XHRcdGF0dGFjaHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaW5zX2F0dGFjaF9ocmVmXCIpO1xuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYXR0YWNocy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0YXR0YWNoID0gYXR0YWNoc1tpXTtcblx0XHRcdFx0XHRhdHRhY2guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0aWYoaXNJbWFnZSh0aGlzLmRhdGFzZXQudHlwZSkgfHwgaXNIdG1sKHRoaXMuZGF0YXNldC50eXBlKSl7XG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0b3BlbldpbmRvdyhcIi9hcGkvZmlsZXMvaW5zdGFuY2VzL1wiICsgdGhpcy5kYXRhc2V0LmlkKTtcblx0XHRcdFx0XHRcdH1lbHNlIGlmKG53X2NvcmUuY2FuT3BlbkZpbGUodGhpcy5kYXRhc2V0Lm5hbWUpKXtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRud19jb3JlLm9wZW5GaWxlKHRoaXMuaHJlZiwgdGhpcy5kYXRhc2V0Lm5hbWUpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyIGZsb3cgPSBcIiN7aW5zdGFuY2UuZmxvd31cIjtcblx0XHRcdHZhciBzcGFjZSA9IFwiI3tpbnN0YW5jZS5zcGFjZX1cIjtcblxuXHRcdFx0ZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpe1xuXHRcdFx0XHRsZXQgcGF0dGVybiA9IFJlZ0V4cChuYW1lICsgXCI9LlteO10qXCIpXG5cdFx0XHRcdGxldCBtYXRjaGVkID0gZG9jdW1lbnQuY29va2llLm1hdGNoKHBhdHRlcm4pXG5cdFx0XHRcdGlmKG1hdGNoZWQpe1xuXHRcdFx0XHRcdGxldCBjb29raWUgPSBtYXRjaGVkWzBdLnNwbGl0KCc9Jylcblx0XHRcdFx0XHRyZXR1cm4gY29va2llWzFdXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICcnXG5cdFx0XHR9XG5cblx0XHRcdHZhciByZWNvcmRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImlucy1yZWxhdGVkLXJlY29yZHNcIik7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgcmVjb3Jkcy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0dmFyIHJlY29yZCA9IHJlY29yZHNbaV07XG5cdFx0XHRcdFx0cmVjb3JkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdHZhciBjcmVhdG9yU2VydmljZSA9IFwiI3tjcmVhdG9yU2VydmljZX1cIlxuXHRcdFx0XHRcdFx0dmFyIGluc19yZWNvcmRfaWRzID0gI3tKU09OLnN0cmluZ2lmeShpbnNfcmVjb3JkX2lkcyl9XG5cdFx0XHRcdFx0XHRpZihjcmVhdG9yU2VydmljZSAmJiBpbnNfcmVjb3JkX2lkcyAmJiBpbnNfcmVjb3JkX2lkcy5sZW5ndGggPiAwKXtcblx0XHRcdFx0XHRcdFx0dmFyIG9iamNldE5hbWUgPSBpbnNfcmVjb3JkX2lkc1swXS5vXG5cdFx0XHRcdFx0XHRcdHZhciBpZCA9IGluc19yZWNvcmRfaWRzWzBdLmlkc1swXVxuXHRcdFx0XHRcdFx0XHR2YXIgdW9iaiA9IHt9O1xuXHRcdFx0XHRcdFx0XHR1b2JqW1wiWC1Vc2VyLUlkXCJdID0gZ2V0Q29va2llKFwiWC1Vc2VyLUlkXCIpO1xuXHRcdFx0XHRcdFx0XHR1b2JqW1wiWC1BdXRoLVRva2VuXCJdID0gZ2V0Q29va2llKFwiWC1BdXRoLVRva2VuXCIpO1xuXHRcdFx0XHRcdFx0XHRyZWRpcmVjdFVybCA9IGNyZWF0b3JTZXJ2aWNlICsgXCJhcHAvLS9cIiArIG9iamNldE5hbWUgKyBcIi92aWV3L1wiICsgaWQgKyBcIj9cIiArICQucGFyYW0odW9iaik7XG5cdFx0XHRcdFx0XHRcdG9wZW5XaW5kb3cocmVkaXJlY3RVcmwpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XCJcIlwiO1xuXG5cblx0aWYgIVN0ZWVkb3MuaXNNb2JpbGUoKVxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuXHRcdGlmIGZvcm0/Lmluc3RhbmNlX3N0eWxlID09ICd0YWJsZSdcblx0XHRcdGluc3RhbmNlX3N0eWxlID0gXCJpbnN0YW5jZS10YWJsZVwiXG5cblx0aWYgb3B0aW9ucz8udGVtcGxhdGVOYW1lID09ICd0YWJsZSdcblx0XHRpbnN0YW5jZV9zdHlsZSA9IFwiaW5zdGFuY2UtdGFibGVcIlxuXG5cdGlmIG9wdGlvbnM/Lmluc3RhbmNlX3N0eWxlXG5cdFx0aW5zdGFuY2Vfc3R5bGUgPSBvcHRpb25zLmluc3RhbmNlX3N0eWxlXG5cblx0aWYgIW9wdGlvbnMgfHwgb3B0aW9ucy5zaG93VHJhY2UgPT0gdHJ1ZVxuXHRcdHRyYWNlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFRyYWNlc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKVxuXHRlbHNlXG5cdFx0dHJhY2UgPSBcIlwiXG5cblx0aW5zdGFuY2VCb3hTdHlsZSA9IFwiXCI7XG5cblx0aWYgaW5zdGFuY2UgJiYgaW5zdGFuY2UuZmluYWxfZGVjaXNpb25cblx0XHRpZiBpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PSBcImFwcHJvdmVkXCJcblx0XHRcdGluc3RhbmNlQm94U3R5bGUgPSBcImJveC1zdWNjZXNzXCJcblx0XHRlbHNlIGlmIChpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PSBcInJlamVjdGVkXCIpXG5cdFx0XHRpbnN0YW5jZUJveFN0eWxlID0gXCJib3gtZGFuZ2VyXCJcblx0aWYgIW9wdGlvbnMgfHwgb3B0aW9ucy5zaG93QXR0YWNobWVudHMgPT0gdHJ1ZVxuXHRcdGF0dGFjaG1lbnQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0QXR0YWNobWVudFZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKVxuXHRcdHJlbGF0ZWRfaW5zdGFuY2VzID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFJlbGF0ZWRJbnN0YW5jZXNWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucylcblx0XHRyZWxhdGVkX3JlY29yZHMgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucylcblx0ZWxzZVxuXHRcdGF0dGFjaG1lbnQgPSBcIlwiXG5cdFx0cmVsYXRlZF9pbnN0YW5jZXMgPSBcIlwiXG5cdFx0cmVsYXRlZF9yZWNvcmRzID0gXCJcIlxuXG5cblx0d2lkdGggPSBcIjk2MHB4XCJcblx0I1x05aaC5p6c57uZdGFibGXnmoRwYXJlbnTorr7nva53aWR0aO+8jOWImeS8muWvvOiHtOmYv+mHjOS6kemCrueuseaYvuekunRhYmxlIOW8guW4uFxuXHRpZiBvcHRpb25zPy53aWR0aFxuXHRcdHdpZHRoID0gXCJcIlxuXG5cdGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJzdGVlZG9zLWNzc1wiKVxuXG5cdGFsbENzc0xpbmsgPSBcIlwiXCI8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgY2xhc3M9XCJfX21ldGVvci1jc3NfX1wiIGhyZWY9XCIje2Nzc0hyZWZ9XCI+XCJcIlwiXG5cblx0dHJhY2VDaGVjayA9IFwiXCJcblx0aWYgIV8uaXNFbXB0eSh0cmFjZSlcblx0XHR0cmFjZUNoZWNrID0gXCJjaGVja2VkXCJcblx0aWYgb3B0aW9ucz8udGFnZ2VyID09ICdlbWFpbCcgfHwgb3B0aW9ucz8uZWRpdGFibGVcblx0XHRzaG93VHJhY2VzQnRuID0gXCJcIlxuXHRlbHNlXG5cdFx0c2hvd1RyYWNlc0J0biA9IFwiXCJcIlxuXHRcdFx0PGRpdiBjbGFzcz1cIm5hdmlnYXRpb24tYmFyIGJ0bi1ncm91cCBuby1wcmludFwiIHN0eWxlPVwibWluLXdpZHRoOiA2MDBweDsgei1pbmRleDogOTk5XCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJwcmludC10b29sXCI+XG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY2J4LWxhYmVsXCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY2J4LXByaW50IGNieC1wcmludC1hdHRhY2htZW50c1wiIGlkPVwiY2J4LXByaW50LWF0dGFjaG1lbnRzXCIgY2hlY2tlZD1cImNoZWNrZWRcIj48c3Bhbj4je1RBUGkxOG4uX18oJ2luc3RhbmNlX2F0dGFjaG1lbnQnLCB7fSwgbG9jYWxlKX08L3NwYW4+PC9sYWJlbD5cblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjYngtbGFiZWxcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjYngtcHJpbnQgY2J4LXByaW50LXRyYWNlc1wiIGlkPVwiY2J4LXByaW50LXRyYWNlc1wiIGNoZWNrZWQ9XCIje3RyYWNlQ2hlY2t9XCI+PHNwYW4+I3tUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZhbF9oaXN0b3J5Jywge30sIGxvY2FsZSl9PC9zcGFuPjwvbGFiZWw+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHRcIlwiXCJcblxuXHRzaG93VHJhY2VzU2NyaXB0ID0gXCJcIlwiXG5cdFx0JCggZG9jdW1lbnQgKS5yZWFkeShmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2J4LXByaW50LXRyYWNlcycpO1xuXHRcdFx0dmFyIHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpbnN0YW5jZS10cmFjZXMnKVswXTtcblx0XHRcdGlmIChiICYmIGIuY2hlY2tlZCAmJiB0KXtcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXG5cdFx0XHR9IGVsc2UgaWYodCl7XG5cdFx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXG5cdFx0XHR9XG5cdFx0XHRpZihiKXtcblx0XHRcdFx0Yi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRpZiAoZS50YXJnZXQuY2hlY2tlZCl7XG5cdFx0XHRcdFx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IGJsb2NrOydcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cblx0XHRcdHZhciBhdHRhY2htZW50c0NoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC1hdHRhY2htZW50cycpO1xuXHRcdFx0dmFyIGF0dGFjaG1lbnRzVmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2F0dGFjaG1lbnRzLXNlY3Rpb24nKVswXTtcblx0XHRcdGlmIChhdHRhY2htZW50c0NoZWNrYm94ICYmIGF0dGFjaG1lbnRzQ2hlY2tib3guY2hlY2tlZCAmJiBhdHRhY2htZW50c1ZpZXcpe1xuXHRcdFx0XHRhdHRhY2htZW50c1ZpZXcuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xuXHRcdFx0fSBlbHNlIGlmKGF0dGFjaG1lbnRzVmlldyl7XG5cdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcblx0XHRcdH1cblx0XHRcdGlmKGF0dGFjaG1lbnRzQ2hlY2tib3gpe1xuXHRcdFx0XHRhdHRhY2htZW50c0NoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdGlmIChlLnRhcmdldC5jaGVja2VkKXtcblx0XHRcdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFwiXCJcIlxuXG5cdGlmIG9wdGlvbnM/LnN0eWxlc1xuXHRcdGFsbENzc0xpbmsgPSBcIlwiXG5cblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe19pZDogaW5zdGFuY2UuZm9ybX0pO1xuXHRmb3JtRGVzY3JpcHRpb25IdG1sID0gXCJcIlxuXHRpZiBmb3JtXG5cdFx0Zm9ybURlc2NyaXB0aW9uID0gZm9ybS5kZXNjcmlwdGlvblxuXHRcdGlmIGZvcm1EZXNjcmlwdGlvblxuXHRcdFx0Zm9ybURlc2NyaXB0aW9uID0gZm9ybURlc2NyaXB0aW9uLnJlcGxhY2UoL1xcbi9nLFwiPGJyLz5cIilcblx0XHRcdGZvcm1EZXNjcmlwdGlvbkh0bWwgPSBcIlwiXCJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImJveC1oZWFkZXIgIHdpdGgtYm9yZGVyIGluc3RhbmNlLWhlYWRlclwiPlxuXHRcdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0XHQje2Zvcm1EZXNjcmlwdGlvbn1cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFwiXCJcIlxuXG5cdGh0bWwgPSBcIlwiXCJcblx0XHQ8IURPQ1RZUEUgaHRtbD5cblx0XHQ8aHRtbD5cblx0XHRcdDxoZWFkPlxuXHRcdFx0XHQ8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD1VVEYtOFwiLz5cblx0XHRcdFx0I3thbGxDc3NMaW5rfVxuXHRcdFx0XHQ8c2NyaXB0IHNyYz1cImh0dHBzOi8vd3d3LnN0ZWVkb3MuY29tL3dlYnNpdGUvbGlicy9qcXVlcnkubWluLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxuXHRcdFx0XHQ8c2NyaXB0IHNyYz1cIi9qcy9ud19jb3JlLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxuXHRcdFx0XHQje29wdGlvbnMucGx1Z2lucyB8fCBcIlwifVxuXG5cdFx0XHRcdDxzdHlsZT5cblx0XHRcdFx0XHQuc3RlZWRvc3tcblx0XHRcdFx0XHRcdHdpZHRoOiAje3dpZHRofTtcblx0XHRcdFx0XHRcdG1hcmdpbi1sZWZ0OiBhdXRvO1xuXHRcdFx0XHRcdFx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC5pbnN0YW5jZS12aWV3IC5pbnN0YW5jZS1uYW1le1xuXHRcdFx0XHRcdFx0ZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0LmJveC10b29sc3tcblx0XHRcdFx0XHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC5ib3guY29sbGFwc2VkLWJveCAuYm94LWJvZHksLmJveC5jb2xsYXBzZWQtYm94IC5ib3gtZm9vdGVyIHtcblx0XHRcdFx0XHQgIGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJvZHl7XG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBhenVyZSAhaW1wb3J0YW50O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC5pbnN0YW5jZS12aWV3IC5pbnN0YW5jZS10cmFjZXN7XG5cdFx0XHRcdFx0XHRwYWRkaW5nLWxlZnQ6IDE1cHg7XG5cdFx0XHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAxNXB4O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCN7b3B0aW9ucz8uc3R5bGVzIHx8IFwiXCJ9XG5cdFx0XHRcdDwvc3R5bGU+XG5cdFx0XHQ8L2hlYWQ+XG5cdFx0XHQ8Ym9keT5cblx0XHRcdFx0PGRpdiBjbGFzcz1cInN0ZWVkb3Mgd29ya2Zsb3cgaW5zdGFuY2UtcHJpbnRcIj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwic2tpbi1ncmVlbiBza2luLWFkbWluLWx0ZVwiPlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cIndyYXBwZXJcIj5cblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbnRlbnQtd3JhcHBlclwiPlxuXHRcdFx0XHRcdFx0XHRcdCN7c2hvd1RyYWNlc0J0bn1cblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5zdGFuY2UtcHJpbnRcIj5cblx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnN0YW5jZSAje2luc3RhbmNlX3N0eWxlfVwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8Zm9ybSBuYW1lPVwiaW5zdGFuY2VGb3JtXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImluc3RhbmNlLWZvcm0gYm94ICN7aW5zdGFuY2VCb3hTdHlsZX1cIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCN7Zm9ybURlc2NyaXB0aW9uSHRtbH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJib3gtYm9keVwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLW1kLTEyXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0nYXR0YWNobWVudHMtc2VjdGlvbic+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQje2F0dGFjaG1lbnR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQje3JlbGF0ZWRfaW5zdGFuY2VzfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3tyZWxhdGVkX3JlY29yZHN9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3tib2R5fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Zvcm0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCN7dHJhY2V9XG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvYm9keT5cblx0XHRcdDxzY3JpcHQ+I3tvcGVuRmlsZVNjcmlwdH07I3tvbkxvYWRTY3JpcHR9OyN7c2hvd1RyYWNlc1NjcmlwdH08L3NjcmlwdD5cblx0XHQ8L2h0bWw+XG5cdFwiXCJcIlxuXG5cdHJldHVybiBodG1sIiwidmFyIF9nZXRMb2NhbGUsIF9nZXRSZXF1aXJlZEZpZWxkcywgX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzLCBfZ2V0U3RhcnRTdGVwUmVxdWlyZWRGaWVsZHMsIF9nZXRUZW1wbGF0ZURhdGEsIF9nZXRWaWV3SHRtbCwgZ2V0TGlua1RleHQ7ICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlID0ge307XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbnN0YW5jZV9hdHRhY2htZW50ID0gXCI8dHI+XFxuXHQ8dGQgY2xhc3M9XFxcImlucy1hdHRhY2gtdmlld1xcXCI+XFxuXHRcdDxhIGhyZWY9XFxcInt7aW5zX2F0dGFjaF9kb3dubG9hZF91cmwgX2lkIGFic29sdXRlfX1cXFwiIGNsYXNzPVxcXCJpbnNfYXR0YWNoX2hyZWZcXFwiIHRhcmdldD1cXFwiX3BhcmVudFxcXCIgZGF0YS1uYW1lPVxcXCJ7e3RoaXMubmFtZX19XFxcIiBkYXRhLXR5cGU9XFxcInt7dGhpcy5vcmlnaW5hbC50eXBlfX1cXFwiIGRhdGEtaWQ9XFxcInt7X2lkfX1cXFwiPnt7dGhpcy5uYW1lfX08L2E+XFxuXHQ8L3RkPlxcbjwvdHI+XCI7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5hZlNlbGVjdFVzZXJSZWFkID0gXCI8ZGl2IGNsYXNzPSdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50Jz57e3ZhbHVlfX08L2Rpdj5cIjtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwUmVhZCA9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+XFxuXHR7eyN3aXRoIGdldEZpZWxkIHRoaXMubmFtZX19XFxuXHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWN0aW9uJ319XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdzZWN0aW9uIGNhbGxvdXQgY2FsbG91dC1kZWZhdWx0Jz5cXG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cXG5cdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0e3tlbHNlfX1cXG5cdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndGFibGUnfX1cXG5cdFx0XHRcdDxkaXYgY2xhc3M9XFxcInBhbmVsIHBhbmVsLWRlZmF1bHQgc3RlZWRvcy10YWJsZVxcXCI+XFxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInBhbmVsLWJvZHlcXFwiIHN0eWxlPVxcXCJwYWRkaW5nOjBweDtcXFwiPlxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInBhbmVsLWhlYWRpbmdcXFwiID5cXG5cdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCc+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XFxcImRlc2NyaXB0aW9uXFxcIj57e3tkZXNjcmlwdGlvbn19fTwvc3Bhbj5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJyZWFkb25seS10YWJsZVxcXCIgc3R5bGU9XFxcInBhZGRpbmc6MHB4O292ZXJmbG93LXg6YXV0bztcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHQ8dGFibGUgdHlwZT0ndGFibGUnIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1jb25kZW5zZWQgYXV0b2Zvcm0tdGFibGVcXFwiIHN0eWxlPSdtYXJnaW4tYm90dG9tOjBweDsnIHt7dGhpcy5hdHRzfX0gaWQ9XFxcInt7dGhpcy5jb2RlfX1UYWJsZVxcXCIgbmFtZT1cXFwie3t0aGlzLmNvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e3RoaXMubmFtZX19XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGhlYWQgaWQ9XFxcInt7dGhpcy5uYW1lfX1UaGVhZFxcXCIgbmFtZT1cXFwie3t0aGlzLm5hbWV9fVRoZWFkXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlVGhlYWQgdGhpc319fVxcblx0XHRcdFx0XHRcdFx0XHRcdDwvdGhlYWQ+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PHRib2R5IGlkPVxcXCJ7e3RoaXMubmFtZX19VGJvZHlcXFwiIG5hbWU9XFxcInt7dGhpcy5uYW1lfX1UYm9keVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZUJvZHkgdGhpc319fVxcblx0XHRcdFx0XHRcdFx0XHRcdDwvdGJvZHk+XFxuXHRcdFx0XHRcdFx0XHRcdDwvdGFibGU+XFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdHt7I2lmIHNob3dMYWJlbH19XFxuXHRcdFx0XHRcdDxsYWJlbD57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSd7e2dldENmQ2xhc3MgdGhpc319IGZvcm0tY29udHJvbCcgcmVhZG9ubHkgZGlzYWJsZWQ+e3t7Z2V0VmFsdWUgY29kZX19fTwvZGl2Plxcblx0XHRcdHt7L2lmfX1cXG5cdFx0e3svaWZ9fVxcblx0e3svd2l0aH19XFxuPC9kaXY+XCI7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5hZkZvcm1Hcm91cCA9IFwiXFxue3sjd2l0aCBnZXRGaWVsZCB0aGlzLm5hbWV9fVxcblx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VjdGlvbid9fVxcblx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0PGRpdiBjbGFzcz0nc2VjdGlvbiBjYWxsb3V0IGNhbGxvdXQtZGVmYXVsdCc+XFxuXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tmX2xhYmVsIHRoaXN9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdDxwPnt7e2Rlc2NyaXB0aW9ufX19PC9wPlxcblx0XHRcdFx0PC9kaXY+XFxuICBcdFx0XHRcdDwvZGl2Plxcblx0XHR7e2Vsc2V9fVxcblx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxcblx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwgcGFuZWwtZGVmYXVsdCBzdGVlZG9zLXRhYmxlXFxcIj5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtYm9keVxcXCIgc3R5bGU9XFxcInBhZGRpbmc6MHB4O1xcXCI+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtaGVhZGluZ1xcXCIgPlxcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsJz57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cXFwiZGVzY3JpcHRpb25cXFwiPnt7e2Rlc2NyaXB0aW9ufX19PC9zcGFuPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInJlYWRvbmx5LXRhYmxlXFxcIiBzdHlsZT1cXFwicGFkZGluZzowcHg7b3ZlcmZsb3cteDphdXRvO1xcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDx0YWJsZSB0eXBlPSd0YWJsZScgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVxcXCIgc3R5bGU9J21hcmdpbi1ib3R0b206MHB4Oycge3t0aGlzLmF0dHN9fSBpZD1cXFwie3t0aGlzLmNvZGV9fVRhYmxlXFxcIiBuYW1lPVxcXCJ7e3RoaXMuY29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7dGhpcy5uYW1lfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdDx0aGVhZCBpZD1cXFwie3t0aGlzLm5hbWV9fVRoZWFkXFxcIiBuYW1lPVxcXCJ7e3RoaXMubmFtZX19VGhlYWRcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVUaGVhZCB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90aGVhZD5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGJvZHkgaWQ9XFxcInt7dGhpcy5uYW1lfX1UYm9keVxcXCIgbmFtZT1cXFwie3t0aGlzLm5hbWV9fVRib2R5XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlQm9keSB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cXG5cdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2lucHV0J319XFxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIGRhdGEtcmVxdWlyZWQ9XFxcInt7I2lmIGlzX3JlcXVpcmVkfX10cnVle3svaWZ9fVxcXCI+XFxuXHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0e3sjaWYgaXNfdGV4dGFyZWF9fVxcblx0XHRcdFx0XHRcdFx0PHRleHRhcmVhIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIHt7Z2V0UGVybWlzc2lvbnMgY29kZX19IGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPjwvdGV4dGFyZWE+XFxuXHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdHt7I3VubGVzcyBpc190ZXh0YXJlYX19XFxuXHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIge3tnZXRQZXJtaXNzaW9ucyBjb2RlfX0gZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0e3svdW5sZXNzfX1cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnbnVtYmVyJ319XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlJ319XFxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXR5cGU9XFxcImRhdGVcXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlVGltZSd9fVxcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS10eXBlPSdkYXRldGltZScgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3Bhc3N3b3JkJ319XFxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJwYXNzd29yZFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3NlbGVjdCd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8c2VsZWN0IG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNlYWNoIG9wdGlvbnMgdGhpc319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8b3B0aW9uIHZhbHVlPVxcXCJ7e3ZhbHVlfX1cXFwiPnt7bGFiZWx9fTwvb3B0aW9uPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3NlbGVjdD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAncmFkaW8nfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiYWYtcmFkaW8tZ3JvdXBcXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJyYWRpby1pbmxpbmUgZml4LWluZGVudFxcXCI+PGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiB2YWx1ZT1cXFwie3t2YWx1ZX19XFxcIiBuYW1lPVxcXCJ7ey4uL2NvZGV9fVxcXCIgY2xhc3M9XFxcInJhZGlvLWlubGluZSBmaXgtaW5kZW50XFxcIj4ge3tsYWJlbH19PC9sYWJlbD5cXG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cXG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ211bHRpU2VsZWN0J319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImFmLWNoZWNrYm94LWdyb3VwXFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XFxcImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XFxcIj48aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIHZhbHVlPVxcXCJ7e3ZhbHVlfX1cXFwiIG5hbWU9XFxcInt7Li4vY29kZX19XFxcIiBjbGFzcz1cXFwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcXFwiPiB7e2xhYmVsfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd1cmwnfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XFxcInVybFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2VtYWlsJ319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJlbWFpbFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2NoZWNrYm94J319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImNoZWNrYm94XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIHN0eWxlPVxcXCJ3aWR0aDogMTAwJTtcXFwiPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgdmFsdWU9XFxcInRydWVcXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBjbGFzcz1cXFwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcXFwiPjwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0ne3tnZXRDZkNsYXNzIHRoaXN9fSBmb3JtLWNvbnRyb2wnIHJlYWRvbmx5IGRpc2FibGVkPnt7e2dldFZhbHVlIGNvZGV9fX08L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdHt7L2lmfX1cXG5cdFx0e3svaWZ9fVxcblx0e3svd2l0aH19XCI7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUgPSBmdW5jdGlvbih0ZW1wYWx0ZU5hbWUsIHN0ZWVkb3NEYXRhKSB7XG4gIHZhciB0ZW1wbGF0ZSwgdGVtcGxhdGVDb21waWxlZCwgdGVtcGxhdGVSZW5kZXJGdW5jdGlvbjtcbiAgdGVtcGxhdGUgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGVbdGVtcGFsdGVOYW1lXTtcbiAgdGVtcGxhdGVDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIHRlbXBsYXRlUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRlbXBsYXRlQ29tcGlsZWQpO1xuICBUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdID0gbmV3IEJsYXplLlRlbXBsYXRlKHRlbXBhbHRlTmFtZSwgdGVtcGxhdGVSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgcmV0dXJuIFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0uaGVscGVycyhJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzKTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbnN0YW5jZVNpZ25UZXh0ID0gZnVuY3Rpb24oc3RlZWRvc0RhdGEpIHtcbiAgdmFyIGluc3RhbmNlU2lnblRleHRDb21waWxlZCwgaW5zdGFuY2VTaWduVGV4dEh0bWwsIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbjtcbiAgaW5zdGFuY2VTaWduVGV4dEh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbnN0YW5jZV9zaWduX3RleHQuaHRtbCcpO1xuICBpbnN0YW5jZVNpZ25UZXh0Q29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGluc3RhbmNlU2lnblRleHRIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICBpbnN0YW5jZVNpZ25UZXh0UmVuZGVyRnVuY3Rpb24gPSBldmFsKGluc3RhbmNlU2lnblRleHRDb21waWxlZCk7XG4gIFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZVNpZ25UZXh0XCIsIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQuaGVscGVycyhJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMpO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUltYWdlU2lnbiA9IGZ1bmN0aW9uKHN0ZWVkb3NEYXRhKSB7XG4gIHZhciBpbWFnZVNpZ25Db21waWxlZCwgaW1hZ2VTaWduSHRtbCwgaW1hZ2VTaWduUmVuZGVyRnVuY3Rpb247XG4gIGltYWdlU2lnbkh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbWFnZV9zaWduLmh0bWwnKTtcbiAgaW1hZ2VTaWduQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGltYWdlU2lnbkh0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIGltYWdlU2lnblJlbmRlckZ1bmN0aW9uID0gZXZhbChpbWFnZVNpZ25Db21waWxlZCk7XG4gIFRlbXBsYXRlLmltYWdlU2lnbiA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImltYWdlU2lnblwiLCBpbWFnZVNpZ25SZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmltYWdlU2lnbi5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICByZXR1cm4gVGVtcGxhdGUuaW1hZ2VTaWduLmhlbHBlcnMoSW1hZ2VTaWduLmhlbHBlcnMpO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZVRyYWNlc0hhbmxkZXIgPSBmdW5jdGlvbihzdGVlZG9zRGF0YSkge1xuICB2YXIgdHJhY2VzSGFubGRlckNvbXBpbGVkLCB0cmFjZXNIYW5sZGVySHRtbCwgdHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uO1xuICB0cmFjZXNIYW5sZGVySHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlc19oYW5kbGVyLmh0bWwnKTtcbiAgdHJhY2VzSGFubGRlckNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0cmFjZXNIYW5sZGVySHRtbCwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgdHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uID0gZXZhbCh0cmFjZXNIYW5sZGVyQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS5pbnN0YW5jZV90cmFjZXNfaGFuZGxlciA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlX3RyYWNlc19oYW5kbGVyXCIsIHRyYWNlc0hhbmxkZXJSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmluc3RhbmNlX3RyYWNlc19oYW5kbGVyLnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZV90cmFjZXNfaGFuZGxlci5oZWxwZXJzKFRyYWNlc0hhbmRsZXIuaGVscGVycyk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuaW5pdCA9IGZ1bmN0aW9uKHN0ZWVkb3NEYXRhKSB7XG4gIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZlNlbGVjdFVzZXJSZWFkXCIsIHN0ZWVkb3NEYXRhKTtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZkZvcm1Hcm91cFwiLCBzdGVlZG9zRGF0YSk7XG4gIH1cbiAgSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmRm9ybUdyb3VwUmVhZFwiLCBzdGVlZG9zRGF0YSk7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiaW5zdGFuY2VfYXR0YWNobWVudFwiLCB7XG4gICAgICBhYnNvbHV0ZTogc3RlZWRvc0RhdGEuYWJzb2x1dGVcbiAgICB9KTtcbiAgICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW1hZ2VTaWduKHN0ZWVkb3NEYXRhKTtcbiAgICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlVHJhY2VzSGFubGRlcihzdGVlZG9zRGF0YSk7XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbnN0YW5jZVNpZ25UZXh0KHN0ZWVkb3NEYXRhKTtcbiAgfVxufTtcblxuZ2V0TGlua1RleHQgPSBmdW5jdGlvbihpdGVtLCBsYWJlbCwgZGV0YWlsX3VybCkge1xuICBpZiAoZGV0YWlsX3VybCkge1xuICAgIGRldGFpbF91cmwgPSBkZXRhaWxfdXJsLnJlcGxhY2UoXCJ7X2lkfVwiLCBpdGVtLl9pZCk7XG4gICAgaWYgKCEvXmh0dHAocz8pOlxcL1xcLy8udGVzdChkZXRhaWxfdXJsKSkge1xuICAgICAgZGV0YWlsX3VybCA9IFN0ZWVkb3MuYWJzb2x1dGVVcmwoZGV0YWlsX3VybCk7XG4gICAgfVxuICAgIHJldHVybiAnPGEgaHJlZj1cIicgKyBkZXRhaWxfdXJsICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPicgKyBsYWJlbCArICc8L2E+JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBmaWVsZCwgbG9jYWxlLCB1dGNPZmZzZXQpIHtcbiAgdmFyIGRhdGUsIGRldGFpbF91cmwsIGUsIGhvdXJzLCBtb250aCwgc2Vjb25kcywgdCwgdDAsIHQxLCB5ZWFyO1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSBmYWxzZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdlbWFpbCc6XG4gICAgICB2YWx1ZSA9IHZhbHVlID8gJzxhIGhyZWY9XFwnbWFpbHRvOicgKyB2YWx1ZSArICdcXCc+JyArIHZhbHVlICsgJzwvYT4nIDogJyc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1cmwnOlxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFwiPGEgaHJlZj0nXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICAgIHZhbHVlID0gXCI8YSBocmVmPScnIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gXCI8YSBocmVmPSdodHRwOi8vXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdncm91cCc6XG4gICAgICBpZiAoZmllbGQuaXNfbXVsdGlzZWxlY3QpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZ2V0UHJvcGVydHkoXCJmdWxsbmFtZVwiKS50b1N0cmluZygpIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZnVsbG5hbWUgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1c2VyJzpcbiAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKSA6IHZvaWQgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLm5hbWUgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICB2YWx1ZSA9ICcqKioqKionO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgaWYgKHZhbHVlICYmIHZhbHVlICE9PSAnZmFsc2UnKSB7XG4gICAgICAgIHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiLCB7fSwgbG9jYWxlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RhdGVUaW1lJzpcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPT09IDE2KSB7XG4gICAgICAgIHQgPSB2YWx1ZS5zcGxpdChcIlRcIik7XG4gICAgICAgIHQwID0gdFswXS5zcGxpdChcIi1cIik7XG4gICAgICAgIHQxID0gdFsxXS5zcGxpdChcIjpcIik7XG4gICAgICAgIHllYXIgPSB0MFswXTtcbiAgICAgICAgbW9udGggPSB0MFsxXTtcbiAgICAgICAgZGF0ZSA9IHQwWzJdO1xuICAgICAgICBob3VycyA9IHQxWzBdO1xuICAgICAgICBzZWNvbmRzID0gdDFbMV07XG4gICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUodmFsdWUsIHV0Y09mZnNldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpZiAoZmllbGQuaXNfdGV4dGFyZWEpIHtcbiAgICAgICAgdmFsdWUgPSBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bih2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IFN0ZWVkb3MubnVtYmVyVG9TdHJpbmcodmFsdWUsIGZpZWxkLmRpZ2l0cyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdvZGF0YSc6XG4gICAgICBkZXRhaWxfdXJsID0gZmllbGQuZGV0YWlsX3VybDtcbiAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xuICAgICAgICB2YWx1ZSA9IF8ubWFwKHZhbHVlLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGdldExpbmtUZXh0KGl0ZW0sIGl0ZW1bJ0BsYWJlbCddLCBkZXRhaWxfdXJsKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGdldExpbmtUZXh0KHZhbHVlLCB2YWx1ZVsnQGxhYmVsJ10sIGRldGFpbF91cmwpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaHRtbCc6XG4gICAgICB2YWx1ZSA9IHZhbHVlID8gXCI8ZGl2IGNsYXNzPVxcXCJzdGVlZG9zLWh0bWxcXFwiPlwiICsgdmFsdWUgKyBcIjwvZGl2PlwiIDogJyc7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsID0gZnVuY3Rpb24oZmllbGRzLCBjb2RlKSB7XG4gIHZhciBmaWVsZDtcbiAgZmllbGQgPSBmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSk7XG4gIGlmIChmaWVsZCkge1xuICAgIGlmIChmaWVsZC5uYW1lKSB7XG4gICAgICByZXR1cm4gZmllbGQubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpZWxkLmNvZGU7XG4gICAgfVxuICB9XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbiA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBmb3JtLCBmb3JtX2ZpZWxkcywgZm9ybV92ZXJzaW9uO1xuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcbiAgZm9ybV92ZXJzaW9uID0ge307XG4gIGZvcm1fZmllbGRzID0gW107XG4gIGlmIChmb3JtLmN1cnJlbnQuX2lkID09PSBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pIHtcbiAgICBmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgZm9ybV92ZXJzaW9uID0gXy53aGVyZShmb3JtLmhpc3RvcnlzLCB7XG4gICAgICBfaWQ6IGluc3RhbmNlLmZvcm1fdmVyc2lvblxuICAgIH0pWzBdO1xuICB9XG4gIGZvcm1fdmVyc2lvbi5maWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCkge1xuICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VjdGlvbicpIHtcbiAgICAgIGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgaWYgKGZpZWxkLmZpZWxkcykge1xuICAgICAgICByZXR1cm4gZmllbGQuZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgICAgICAgIHJldHVybiBmb3JtX2ZpZWxkcy5wdXNoKGYpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpZWxkLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgIGZpZWxkWydzZmllbGRzJ10gPSBmaWVsZFsnZmllbGRzJ107XG4gICAgICBkZWxldGUgZmllbGRbJ2ZpZWxkcyddO1xuICAgICAgcmV0dXJuIGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm9ybV9maWVsZHMucHVzaChmaWVsZCk7XG4gICAgfVxuICB9KTtcbiAgZm9ybV92ZXJzaW9uLmZpZWxkcyA9IGZvcm1fZmllbGRzO1xuICByZXR1cm4gZm9ybV92ZXJzaW9uO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEZsb3dWZXJzaW9uID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgdmFyIGZsb3csIGZsb3dfdmVyc2lvbjtcbiAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XG4gIGZsb3dfdmVyc2lvbiA9IHt9O1xuICBpZiAoZmxvdy5jdXJyZW50Ll9pZCA9PT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uKSB7XG4gICAgZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50O1xuICB9IGVsc2Uge1xuICAgIGZsb3dfdmVyc2lvbiA9IF8ud2hlcmUoZmxvdy5oaXN0b3J5cywge1xuICAgICAgX2lkOiBpbnN0YW5jZS5mbG93X3ZlcnNpb25cbiAgICB9KVswXTtcbiAgfVxuICByZXR1cm4gZmxvd192ZXJzaW9uO1xufTtcblxuX2dldFZpZXdIdG1sID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgdmlld0h0bWw7XG4gIHZpZXdIdG1sID0gQXNzZXRzLmdldFRleHQocGF0aCk7XG4gIGlmICh2aWV3SHRtbCkge1xuICAgIHZpZXdIdG1sID0gdmlld0h0bWwucmVwbGFjZSgvPHRlbXBsYXRlW1xcd1xcc1xcXCJcXD0nXSs+L2ksIFwiXCIpLnJlcGxhY2UoLzxcXC90ZW1wbGF0ZT4vaSwgXCJcIik7XG4gIH1cbiAgcmV0dXJuIHZpZXdIdG1sO1xufTtcblxuX2dldExvY2FsZSA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgdmFyIGxvY2FsZSwgcmVmLCByZWYxO1xuICBpZiAoKHVzZXIgIT0gbnVsbCA/IChyZWYgPSB1c2VyLmxvY2FsZSkgIT0gbnVsbCA/IHJlZi50b0xvY2FsZUxvd2VyQ2FzZSgpIDogdm9pZCAwIDogdm9pZCAwKSA9PT0gJ3poLWNuJykge1xuICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgfSBlbHNlIGlmICgodXNlciAhPSBudWxsID8gKHJlZjEgPSB1c2VyLmxvY2FsZSkgIT0gbnVsbCA/IHJlZjEudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHZvaWQgMCA6IHZvaWQgMCkgPT09ICdlbi11cycpIHtcbiAgICBsb2NhbGUgPSBcImVuXCI7XG4gIH0gZWxzZSB7XG4gICAgbG9jYWxlID0gXCJ6aC1DTlwiO1xuICB9XG4gIHJldHVybiBsb2NhbGU7XG59O1xuXG5fZ2V0UmVxdWlyZWRGaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMsIHJldikge1xuICBpZiAoIXJldikge1xuICAgIHJldiA9IFtdO1xuICB9XG4gIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgcmV0dXJuIF9nZXRSZXF1aXJlZEZpZWxkcyhmaWVsZC5maWVsZHMsIHJldik7XG4gICAgfSBlbHNlIGlmIChmaWVsZC50eXBlID09PSAndGFibGUnKSB7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZpZWxkLmlzX3JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiByZXYucHVzaChmaWVsZC5jb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV2O1xufTtcblxuX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzID0gZnVuY3Rpb24oZmllbGRzLCBzdGVwcykge1xuICB2YXIgZWRpdGFibGVDb2RlLCBzdGFydFN0ZXA7XG4gIHN0YXJ0U3RlcCA9IHN0ZXBzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJzdGVwX3R5cGVcIiwgXCJzdGFydFwiKTtcbiAgZWRpdGFibGVDb2RlID0gW107XG4gIF8ua2V5cyhzdGFydFN0ZXAucGVybWlzc2lvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKHN0YXJ0U3RlcC5wZXJtaXNzaW9uc1trZXldID09PSAnZWRpdGFibGUnKSB7XG4gICAgICByZXR1cm4gZWRpdGFibGVDb2RlLnB1c2goa2V5KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZWRpdGFibGVDb2RlO1xufTtcblxuX2dldFN0YXJ0U3RlcFJlcXVpcmVkRmllbGRzID0gZnVuY3Rpb24oZmllbGRzLCBzdGVwcykge1xuICB2YXIgZWRpdGFibGVDb2RlLCByZXF1aXJlZEZpZWxkcztcbiAgcmVxdWlyZWRGaWVsZHMgPSBfZ2V0UmVxdWlyZWRGaWVsZHMoZmllbGRzKTtcbiAgZWRpdGFibGVDb2RlID0gX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzKGZpZWxkcywgc3RlcHMpO1xuICByZXR1cm4gXy5pbnRlcnNlY3Rpb24ocmVxdWlyZWRGaWVsZHMsIGVkaXRhYmxlQ29kZSk7XG59O1xuXG5fZ2V0VGVtcGxhdGVEYXRhID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBmbG93LCBmb3JtLCBmb3JtX3ZlcnNpb24sIGxvY2FsZSwgc3RlZWRvc0RhdGE7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBmb3JtX3ZlcnNpb24gPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbihpbnN0YW5jZSk7XG4gIH0gZWxzZSB7XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oaW5zdGFuY2UpO1xuICB9XG4gIGxvY2FsZSA9IF9nZXRMb2NhbGUodXNlcik7XG4gIHN0ZWVkb3NEYXRhID0ge307XG4gIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICBzdGVlZG9zRGF0YSA9IF8uY2xvbmUoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpKTtcbiAgICBzdGVlZG9zRGF0YS5pbnNuYW1lID0gaW5zdGFuY2UubmFtZTtcbiAgICBzdGVlZG9zRGF0YS5pbnNfc3RhdGUgPSBpbnN0YW5jZS5zdGF0ZTtcbiAgICBzdGVlZG9zRGF0YS5pbnNfZmluYWxfZGVjaXNpb24gPSBpbnN0YW5jZS5pbnNfZmluYWxfZGVjaXNpb247XG4gICAgc3RlZWRvc0RhdGEuaW5zX2NvZGUgPSBpbnN0YW5jZS5jb2RlO1xuICAgIHN0ZWVkb3NEYXRhLmluc19pc19hcmNoaXZlZCA9IGluc3RhbmNlLmlzX2FyY2hpdmVkO1xuICAgIHN0ZWVkb3NEYXRhLmluc19pc19kZWxldGVkID0gaW5zdGFuY2UuaW5zX2lzX2RlbGV0ZWQ7XG4gICAgc3RlZWRvc0RhdGEuYXBwbGljYW50X25hbWUgPSBpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZTtcbiAgICBzdGVlZG9zRGF0YS5hcHBsaWNhbnRDb250ZXh0ID0gaW5zdGFuY2UuYXBwbGljYW50X25hbWU7XG4gIH1cbiAgc3RlZWRvc0RhdGEuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uID0gZm9ybV92ZXJzaW9uO1xuICBzdGVlZG9zRGF0YS5sb2NhbGUgPSBsb2NhbGU7XG4gIHN0ZWVkb3NEYXRhLnV0Y09mZnNldCA9IHVzZXIudXRjT2Zmc2V0O1xuICBzdGVlZG9zRGF0YS5zcGFjZSA9IGluc3RhbmNlLnNwYWNlO1xuICBzdGVlZG9zRGF0YS5zZXNzaW9uVXNlcklkID0gdXNlci5faWQ7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5lZGl0YWJsZSA6IHZvaWQgMCkge1xuICAgICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlLmZvcm1cbiAgICAgIH0pO1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlLmZsb3dcbiAgICAgIH0pO1xuICAgICAgc3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHMgPSBfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMoZm9ybS5jdXJyZW50LmZpZWxkcywgZmxvdy5jdXJyZW50LnN0ZXBzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0ZWVkb3NEYXRhO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUgPSBmdW5jdGlvbihkYXRlLCB1dGNPZmZzZXQpIHtcbiAgdmFyIHBhc3Npbmc7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBwYXNzaW5nID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcGFzc2luZyA9IHRydWU7XG4gIH1cbiAgaWYgKCF1dGNPZmZzZXQgJiYgdXRjT2Zmc2V0ICE9PSAwKSB7XG4gICAgdXRjT2Zmc2V0ID0gODtcbiAgfVxuICByZXR1cm4gbW9tZW50KGRhdGUpLnV0Y09mZnNldCh1dGNPZmZzZXQsIHBhc3NpbmcpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIik7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCBpbnN0YW5jZUNvbXBpbGVkLCBpbnN0YW5jZVJlbmRlckZ1bmN0aW9uLCBpbnN0YW5jZVRlbXBsYXRlLCBzdGVlZG9zRGF0YTtcbiAgc3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyk7XG4gIHN0ZWVkb3NEYXRhLmFic29sdXRlID0gZmFsc2U7XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmFic29sdXRlIDogdm9pZCAwKSB7XG4gICAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSB0cnVlO1xuICB9XG4gIGluc3RhbmNlVGVtcGxhdGUgPSBUZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUoaW5zdGFuY2UsIG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMudGVtcGxhdGVOYW1lIDogdm9pZCAwKTtcbiAgaW5zdGFuY2VUZW1wbGF0ZSA9IGluc3RhbmNlVGVtcGxhdGUucmVwbGFjZSgvYWZTZWxlY3RVc2VyL2csIFwiYWZTZWxlY3RVc2VyUmVhZFwiKTtcbiAgaWYgKCEob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5lZGl0YWJsZSA6IHZvaWQgMCkpIHtcbiAgICBpbnN0YW5jZVRlbXBsYXRlID0gaW5zdGFuY2VUZW1wbGF0ZS5yZXBsYWNlKC9hZkZvcm1Hcm91cC9nLCBcImFmRm9ybUdyb3VwUmVhZFwiKTtcbiAgfVxuICBpbnN0YW5jZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbnN0YW5jZVRlbXBsYXRlLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICBpbnN0YW5jZVJlbmRlckZ1bmN0aW9uID0gZXZhbChpbnN0YW5jZUNvbXBpbGVkKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlX3JlYWRvbmx5X3ZpZXdcIiwgaW5zdGFuY2VSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldy5oZWxwZXJzKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMpO1xuICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuaW5pdChzdGVlZG9zRGF0YSk7XG4gIGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3LCBzdGVlZG9zRGF0YSk7XG4gIHJldHVybiBcIjxkaXYgaWQ9J2luc3RhbmNlZm9ybScgPlxcblx0XCIgKyBib2R5ICsgXCJcXG48L2Rpdj5cIjtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRUcmFjZXNWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCBmb3JtLCBzdGVlZG9zRGF0YSwgdHJhY2VDb21waWxlZCwgdHJhY2VSZW5kZXJGdW5jdGlvbiwgdHJhY2VzSHRtbDtcbiAgc3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSk7XG4gIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuICBpZiAoZm9ybS5pbnN0YW5jZV9zdHlsZSA9PT0gXCJ0YWJsZVwiIHx8IChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnRlbXBsYXRlTmFtZSA6IHZvaWQgMCkgPT09IFwidGFibGVcIikge1xuICAgIHRyYWNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS90cmFjZXNfdGFibGUuaHRtbCcpO1xuICB9IGVsc2Uge1xuICAgIHRyYWNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS90cmFjZXMuaHRtbCcpO1xuICB9XG4gIHRyYWNlQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRyYWNlc0h0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIHRyYWNlUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRyYWNlQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwidHJhY2VfcmVhZG9ubHlfdmlld1wiLCB0cmFjZVJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICBUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LmhlbHBlcnMoVHJhY2VzVGVtcGxhdGUuaGVscGVycyk7XG4gIGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LCBpbnN0YW5jZS50cmFjZXMpO1xuICByZXR1cm4gYm9keTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRBdHRhY2htZW50VmlldyA9IGZ1bmN0aW9uKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSkge1xuICB2YXIgYXR0YWNobWVudENvbXBpbGVkLCBhdHRhY2htZW50SHRtbCwgYXR0YWNobWVudFJlbmRlckZ1bmN0aW9uLCBib2R5LCBzdGVlZG9zRGF0YTtcbiAgc3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSk7XG4gIGF0dGFjaG1lbnRIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW5zdGFuY2VfYXR0YWNobWVudHMuaHRtbCcpO1xuICBhdHRhY2htZW50Q29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGF0dGFjaG1lbnRIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICBhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24gPSBldmFsKGF0dGFjaG1lbnRDb21waWxlZCk7XG4gIFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJhdHRhY2htZW50c19yZWFkb25seV92aWV3XCIsIGF0dGFjaG1lbnRSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldy5oZWxwZXJzKEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMpO1xuICBib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldyk7XG4gIHJldHVybiBib2R5O1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFJlbGF0ZWRJbnN0YW5jZXNWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCByZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQsIHJlbGF0ZWRJbnN0YW5jZXNIdG1sLCByZWxhdGVkSW5zdGFuY2VzUmVuZGVyRnVuY3Rpb24sIHN0ZWVkb3NEYXRhO1xuICBzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuYWJzb2x1dGUgOiB2b2lkIDApIHtcbiAgICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XG4gIH1cbiAgcmVsYXRlZEluc3RhbmNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9yZWxhdGVkX2luc3RhbmNlcy5odG1sJyk7XG4gIHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUocmVsYXRlZEluc3RhbmNlc0h0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIHJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbiA9IGV2YWwocmVsYXRlZEluc3RhbmNlc0NvbXBpbGVkKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXdcIiwgcmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICBUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LmhlbHBlcnMoUmVsYXRlZEluc3RhbmNlcy5oZWxwZXJzKTtcbiAgYm9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcsIHN0ZWVkb3NEYXRhKTtcbiAgcmV0dXJuIGJvZHk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCByZWxhdGVkUmVjb3Jkc0NvbXBpbGVkLCByZWxhdGVkUmVjb3Jkc0h0bWwsIHJlbGF0ZWRSZWNvcmRzUmVuZGVyRnVuY3Rpb24sIHN0ZWVkb3NEYXRhO1xuICBzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuYWJzb2x1dGUgOiB2b2lkIDApIHtcbiAgICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XG4gIH1cbiAgcmVsYXRlZFJlY29yZHNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvcmVsYXRlZF9yZWNvcmRzLmh0bWwnKTtcbiAgcmVsYXRlZFJlY29yZHNDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUocmVsYXRlZFJlY29yZHNIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICByZWxhdGVkUmVjb3Jkc1JlbmRlckZ1bmN0aW9uID0gZXZhbChyZWxhdGVkUmVjb3Jkc0NvbXBpbGVkKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJyZWxhdGVkX3JlY29yZHNfdmlld1wiLCByZWxhdGVkUmVjb3Jkc1JlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcuaGVscGVycyhSZWxhdGVkUmVjb3Jkcy5oZWxwZXJzKTtcbiAgYm9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnJlbGF0ZWRfcmVjb3Jkc192aWV3LCBzdGVlZG9zRGF0YSk7XG4gIHJldHVybiBib2R5O1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldE9uTG9hZFNjcmlwdCA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBmb3JtX3NjcmlwdCwgZm9ybV92ZXJzaW9uO1xuICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcbiAgZm9ybV9zY3JpcHQgPSBmb3JtX3ZlcnNpb24uZm9ybV9zY3JpcHQ7XG4gIGlmIChmb3JtX3NjcmlwdCAmJiBmb3JtX3NjcmlwdC5yZXBsYWNlKC9cXG4vZywgXCJcIikucmVwbGFjZSgvXFxzL2csIFwiXCIpLmxlbmd0aCA+IDApIHtcbiAgICBmb3JtX3NjcmlwdCA9IFwiQ29yZUZvcm0gPSB7fTtDb3JlRm9ybS5pbnN0YW5jZWZvcm0gPSB7fTtcIiArIGZvcm1fc2NyaXB0O1xuICAgIHJldHVybiBmb3JtX3NjcmlwdCArPSBcIjtpZihDb3JlRm9ybS5mb3JtX09uTG9hZCl7d2luZG93Lm9ubG9hZCA9IENvcmVGb3JtLmZvcm1fT25Mb2FkKCk7fVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmb3JtX3NjcmlwdCA9IFwiXCI7XG4gIH1cbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGFsbENzc0xpbmssIGF0dGFjaG1lbnQsIGJvZHksIGNyZWF0b3JTZXJ2aWNlLCBjc3NIcmVmLCBmb3JtLCBmb3JtRGVzY3JpcHRpb24sIGZvcm1EZXNjcmlwdGlvbkh0bWwsIGh0bWwsIGluc19yZWNvcmRfaWRzLCBpbnN0YW5jZUJveFN0eWxlLCBpbnN0YW5jZV9zdHlsZSwgbG9jYWxlLCBvbkxvYWRTY3JpcHQsIG9wZW5GaWxlU2NyaXB0LCByZWYsIHJlZjEsIHJlbGF0ZWRfaW5zdGFuY2VzLCByZWxhdGVkX3JlY29yZHMsIHNob3dUcmFjZXNCdG4sIHNob3dUcmFjZXNTY3JpcHQsIHRyYWNlLCB0cmFjZUNoZWNrLCB3aWR0aDtcbiAgYm9keSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZVZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgb25Mb2FkU2NyaXB0ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldE9uTG9hZFNjcmlwdChpbnN0YW5jZSk7XG4gIGNyZWF0b3JTZXJ2aWNlID0gKHJlZiA9IE1ldGVvci5zZXR0aW5nc1tcInB1YmxpY1wiXS53ZWJzZXJ2aWNlcykgIT0gbnVsbCA/IChyZWYxID0gcmVmLmNyZWF0b3IpICE9IG51bGwgPyByZWYxLnVybCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgaW5zX3JlY29yZF9pZHMgPSBpbnN0YW5jZS5yZWNvcmRfaWRzO1xuICBsb2NhbGUgPSBfZ2V0TG9jYWxlKHVzZXIpO1xuICBvcGVuRmlsZVNjcmlwdCA9IFwiaWYod2luZG93LmlzTm9kZSAmJiBpc05vZGUoKSl7XFxuXHRhdHRhY2hzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcXFwiaW5zX2F0dGFjaF9ocmVmXFxcIik7XFxuXHRmb3IodmFyIGkgPSAwOyBpIDwgYXR0YWNocy5sZW5ndGg7IGkrKyl7XFxuXHRcdGF0dGFjaCA9IGF0dGFjaHNbaV07XFxuXHRcdGF0dGFjaC5hZGRFdmVudExpc3RlbmVyKFxcXCJjbGlja1xcXCIsIGZ1bmN0aW9uKGUpe1xcblx0XHRcdGlmKGlzSW1hZ2UodGhpcy5kYXRhc2V0LnR5cGUpIHx8IGlzSHRtbCh0aGlzLmRhdGFzZXQudHlwZSkpe1xcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xcblx0XHRcdFx0b3BlbldpbmRvdyhcXFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvXFxcIiArIHRoaXMuZGF0YXNldC5pZCk7XFxuXHRcdFx0fWVsc2UgaWYobndfY29yZS5jYW5PcGVuRmlsZSh0aGlzLmRhdGFzZXQubmFtZSkpe1xcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xcblx0XHRcdFx0bndfY29yZS5vcGVuRmlsZSh0aGlzLmhyZWYsIHRoaXMuZGF0YXNldC5uYW1lKVxcblx0XHRcdH1cXG5cdFx0fSk7XFxuXHR9XFxufVxcblxcbnZhciBmbG93ID0gXFxcIlwiICsgaW5zdGFuY2UuZmxvdyArIFwiXFxcIjtcXG52YXIgc3BhY2UgPSBcXFwiXCIgKyBpbnN0YW5jZS5zcGFjZSArIFwiXFxcIjtcXG5cXG5mdW5jdGlvbiBnZXRDb29raWUobmFtZSl7XFxuXHRsZXQgcGF0dGVybiA9IFJlZ0V4cChuYW1lICsgXFxcIj0uW147XSpcXFwiKVxcblx0bGV0IG1hdGNoZWQgPSBkb2N1bWVudC5jb29raWUubWF0Y2gocGF0dGVybilcXG5cdGlmKG1hdGNoZWQpe1xcblx0XHRsZXQgY29va2llID0gbWF0Y2hlZFswXS5zcGxpdCgnPScpXFxuXHRcdHJldHVybiBjb29raWVbMV1cXG5cdH1cXG5cdHJldHVybiAnJ1xcbn1cXG5cXG52YXIgcmVjb3JkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXFxcImlucy1yZWxhdGVkLXJlY29yZHNcXFwiKTtcXG5mb3IodmFyIGkgPSAwOyBpIDwgcmVjb3Jkcy5sZW5ndGg7IGkrKyl7XFxuXHRcdHZhciByZWNvcmQgPSByZWNvcmRzW2ldO1xcblx0XHRyZWNvcmQuYWRkRXZlbnRMaXN0ZW5lcihcXFwiY2xpY2tcXFwiLCBmdW5jdGlvbihlKXtcXG5cdFx0XHR2YXIgY3JlYXRvclNlcnZpY2UgPSBcXFwiXCIgKyBjcmVhdG9yU2VydmljZSArIFwiXFxcIlxcblx0XHRcdHZhciBpbnNfcmVjb3JkX2lkcyA9IFwiICsgKEpTT04uc3RyaW5naWZ5KGluc19yZWNvcmRfaWRzKSkgKyBcIlxcblx0XHRcdGlmKGNyZWF0b3JTZXJ2aWNlICYmIGluc19yZWNvcmRfaWRzICYmIGluc19yZWNvcmRfaWRzLmxlbmd0aCA+IDApe1xcblx0XHRcdFx0dmFyIG9iamNldE5hbWUgPSBpbnNfcmVjb3JkX2lkc1swXS5vXFxuXHRcdFx0XHR2YXIgaWQgPSBpbnNfcmVjb3JkX2lkc1swXS5pZHNbMF1cXG5cdFx0XHRcdHZhciB1b2JqID0ge307XFxuXHRcdFx0XHR1b2JqW1xcXCJYLVVzZXItSWRcXFwiXSA9IGdldENvb2tpZShcXFwiWC1Vc2VyLUlkXFxcIik7XFxuXHRcdFx0XHR1b2JqW1xcXCJYLUF1dGgtVG9rZW5cXFwiXSA9IGdldENvb2tpZShcXFwiWC1BdXRoLVRva2VuXFxcIik7XFxuXHRcdFx0XHRyZWRpcmVjdFVybCA9IGNyZWF0b3JTZXJ2aWNlICsgXFxcImFwcC8tL1xcXCIgKyBvYmpjZXROYW1lICsgXFxcIi92aWV3L1xcXCIgKyBpZCArIFxcXCI/XFxcIiArICQucGFyYW0odW9iaik7XFxuXHRcdFx0XHRvcGVuV2luZG93KHJlZGlyZWN0VXJsKTtcXG5cdFx0XHR9XFxuXHRcdH0pO1xcblx0fVxcblwiO1xuICBpZiAoIVN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuICAgIGlmICgoZm9ybSAhPSBudWxsID8gZm9ybS5pbnN0YW5jZV9zdHlsZSA6IHZvaWQgMCkgPT09ICd0YWJsZScpIHtcbiAgICAgIGluc3RhbmNlX3N0eWxlID0gXCJpbnN0YW5jZS10YWJsZVwiO1xuICAgIH1cbiAgfVxuICBpZiAoKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMudGVtcGxhdGVOYW1lIDogdm9pZCAwKSA9PT0gJ3RhYmxlJykge1xuICAgIGluc3RhbmNlX3N0eWxlID0gXCJpbnN0YW5jZS10YWJsZVwiO1xuICB9XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmluc3RhbmNlX3N0eWxlIDogdm9pZCAwKSB7XG4gICAgaW5zdGFuY2Vfc3R5bGUgPSBvcHRpb25zLmluc3RhbmNlX3N0eWxlO1xuICB9XG4gIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnNob3dUcmFjZSA9PT0gdHJ1ZSkge1xuICAgIHRyYWNlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFRyYWNlc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFjZSA9IFwiXCI7XG4gIH1cbiAgaW5zdGFuY2VCb3hTdHlsZSA9IFwiXCI7XG4gIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5maW5hbF9kZWNpc2lvbikge1xuICAgIGlmIChpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICBpbnN0YW5jZUJveFN0eWxlID0gXCJib3gtc3VjY2Vzc1wiO1xuICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuZmluYWxfZGVjaXNpb24gPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgaW5zdGFuY2VCb3hTdHlsZSA9IFwiYm94LWRhbmdlclwiO1xuICAgIH1cbiAgfVxuICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5zaG93QXR0YWNobWVudHMgPT09IHRydWUpIHtcbiAgICBhdHRhY2htZW50ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEF0dGFjaG1lbnRWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSk7XG4gICAgcmVsYXRlZF9pbnN0YW5jZXMgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgICByZWxhdGVkX3JlY29yZHMgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgYXR0YWNobWVudCA9IFwiXCI7XG4gICAgcmVsYXRlZF9pbnN0YW5jZXMgPSBcIlwiO1xuICAgIHJlbGF0ZWRfcmVjb3JkcyA9IFwiXCI7XG4gIH1cbiAgd2lkdGggPSBcIjk2MHB4XCI7XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLndpZHRoIDogdm9pZCAwKSB7XG4gICAgd2lkdGggPSBcIlwiO1xuICB9XG4gIGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJzdGVlZG9zLWNzc1wiKTtcbiAgYWxsQ3NzTGluayA9IFwiPGxpbmsgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiB0eXBlPVxcXCJ0ZXh0L2Nzc1xcXCIgY2xhc3M9XFxcIl9fbWV0ZW9yLWNzc19fXFxcIiBocmVmPVxcXCJcIiArIGNzc0hyZWYgKyBcIlxcXCI+XCI7XG4gIHRyYWNlQ2hlY2sgPSBcIlwiO1xuICBpZiAoIV8uaXNFbXB0eSh0cmFjZSkpIHtcbiAgICB0cmFjZUNoZWNrID0gXCJjaGVja2VkXCI7XG4gIH1cbiAgaWYgKChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnRhZ2dlciA6IHZvaWQgMCkgPT09ICdlbWFpbCcgfHwgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuZWRpdGFibGUgOiB2b2lkIDApKSB7XG4gICAgc2hvd1RyYWNlc0J0biA9IFwiXCI7XG4gIH0gZWxzZSB7XG4gICAgc2hvd1RyYWNlc0J0biA9IFwiPGRpdiBjbGFzcz1cXFwibmF2aWdhdGlvbi1iYXIgYnRuLWdyb3VwIG5vLXByaW50XFxcIiBzdHlsZT1cXFwibWluLXdpZHRoOiA2MDBweDsgei1pbmRleDogOTk5XFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcInByaW50LXRvb2xcXFwiPlxcblx0XHQ8bGFiZWwgY2xhc3M9XFxcImNieC1sYWJlbFxcXCI+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBjbGFzcz1cXFwiY2J4LXByaW50IGNieC1wcmludC1hdHRhY2htZW50c1xcXCIgaWQ9XFxcImNieC1wcmludC1hdHRhY2htZW50c1xcXCIgY2hlY2tlZD1cXFwiY2hlY2tlZFxcXCI+PHNwYW4+XCIgKyAoVEFQaTE4bi5fXygnaW5zdGFuY2VfYXR0YWNobWVudCcsIHt9LCBsb2NhbGUpKSArIFwiPC9zcGFuPjwvbGFiZWw+XFxuXHRcdDxsYWJlbCBjbGFzcz1cXFwiY2J4LWxhYmVsXFxcIj48aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGNsYXNzPVxcXCJjYngtcHJpbnQgY2J4LXByaW50LXRyYWNlc1xcXCIgaWQ9XFxcImNieC1wcmludC10cmFjZXNcXFwiIGNoZWNrZWQ9XFxcIlwiICsgdHJhY2VDaGVjayArIFwiXFxcIj48c3Bhbj5cIiArIChUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZhbF9oaXN0b3J5Jywge30sIGxvY2FsZSkpICsgXCI8L3NwYW4+PC9sYWJlbD5cXG5cdDwvZGl2PlxcbjwvZGl2PlwiO1xuICB9XG4gIHNob3dUcmFjZXNTY3JpcHQgPSBcIiQoIGRvY3VtZW50ICkucmVhZHkoZnVuY3Rpb24oKXtcXG5cdHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC10cmFjZXMnKTtcXG5cdHZhciB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaW5zdGFuY2UtdHJhY2VzJylbMF07XFxuXHRpZiAoYiAmJiBiLmNoZWNrZWQgJiYgdCl7XFxuXHRcdHQuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xcblx0fSBlbHNlIGlmKHQpe1xcblx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xcblx0fVxcblx0aWYoYil7XFxuXHRcdGIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZSl7XFxuXHRcdFx0aWYgKGUudGFyZ2V0LmNoZWNrZWQpe1xcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXFxuXHRcdFx0fSBlbHNlIHtcXG5cdFx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXFxuXHRcdFx0fVxcblx0XHR9KTtcXG5cdH1cXG5cXG5cXG5cdHZhciBhdHRhY2htZW50c0NoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC1hdHRhY2htZW50cycpO1xcblx0dmFyIGF0dGFjaG1lbnRzVmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2F0dGFjaG1lbnRzLXNlY3Rpb24nKVswXTtcXG5cdGlmIChhdHRhY2htZW50c0NoZWNrYm94ICYmIGF0dGFjaG1lbnRzQ2hlY2tib3guY2hlY2tlZCAmJiBhdHRhY2htZW50c1ZpZXcpe1xcblx0XHRhdHRhY2htZW50c1ZpZXcuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xcblx0fSBlbHNlIGlmKGF0dGFjaG1lbnRzVmlldyl7XFxuXHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcXG5cdH1cXG5cdGlmKGF0dGFjaG1lbnRzQ2hlY2tib3gpe1xcblx0XHRhdHRhY2htZW50c0NoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpe1xcblx0XHRcdGlmIChlLnRhcmdldC5jaGVja2VkKXtcXG5cdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXFxuXHRcdFx0fSBlbHNlIHtcXG5cdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcXG5cdFx0XHR9XFxuXHRcdH0pO1xcblx0fVxcbn0pO1xcblwiO1xuICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5zdHlsZXMgOiB2b2lkIDApIHtcbiAgICBhbGxDc3NMaW5rID0gXCJcIjtcbiAgfVxuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgX2lkOiBpbnN0YW5jZS5mb3JtXG4gIH0pO1xuICBmb3JtRGVzY3JpcHRpb25IdG1sID0gXCJcIjtcbiAgaWYgKGZvcm0pIHtcbiAgICBmb3JtRGVzY3JpcHRpb24gPSBmb3JtLmRlc2NyaXB0aW9uO1xuICAgIGlmIChmb3JtRGVzY3JpcHRpb24pIHtcbiAgICAgIGZvcm1EZXNjcmlwdGlvbiA9IGZvcm1EZXNjcmlwdGlvbi5yZXBsYWNlKC9cXG4vZywgXCI8YnIvPlwiKTtcbiAgICAgIGZvcm1EZXNjcmlwdGlvbkh0bWwgPSBcIjxkaXYgY2xhc3M9XFxcImJveC1oZWFkZXIgIHdpdGgtYm9yZGVyIGluc3RhbmNlLWhlYWRlclxcXCI+XFxuXHQ8ZGl2Plxcblx0XHRcIiArIGZvcm1EZXNjcmlwdGlvbiArIFwiXFxuXHQ8L2Rpdj5cXG48L2Rpdj5cIjtcbiAgICB9XG4gIH1cbiAgaHRtbCA9IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWw+XFxuXHQ8aGVhZD5cXG5cdFx0PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLThcXFwiLz5cXG5cdFx0XCIgKyBhbGxDc3NMaW5rICsgXCJcXG5cdFx0PHNjcmlwdCBzcmM9XFxcImh0dHBzOi8vd3d3LnN0ZWVkb3MuY29tL3dlYnNpdGUvbGlicy9qcXVlcnkubWluLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPjwvc2NyaXB0Plxcblx0XHQ8c2NyaXB0IHNyYz1cXFwiL2pzL253X2NvcmUuanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+PC9zY3JpcHQ+XFxuXHRcdFwiICsgKG9wdGlvbnMucGx1Z2lucyB8fCBcIlwiKSArIFwiXFxuXFxuXHRcdDxzdHlsZT5cXG5cdFx0XHQuc3RlZWRvc3tcXG5cdFx0XHRcdHdpZHRoOiBcIiArIHdpZHRoICsgXCI7XFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogYXV0bztcXG5cdFx0XHRcdG1hcmdpbi1yaWdodDogYXV0bztcXG5cdFx0XHR9XFxuXFxuXHRcdFx0Lmluc3RhbmNlLXZpZXcgLmluc3RhbmNlLW5hbWV7XFxuXHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudFxcblx0XHRcdH1cXG5cdFx0XHQuYm94LXRvb2xze1xcblx0XHRcdFx0ZGlzcGxheTogbm9uZTtcXG5cdFx0XHR9XFxuXHRcdFx0LmJveC5jb2xsYXBzZWQtYm94IC5ib3gtYm9keSwuYm94LmNvbGxhcHNlZC1ib3ggLmJveC1mb290ZXIge1xcblx0XHRcdCAgZGlzcGxheTogYmxvY2s7XFxuXHRcdFx0fVxcblxcblx0XHRcdGJvZHl7XFxuXHRcdFx0XHRiYWNrZ3JvdW5kOiBhenVyZSAhaW1wb3J0YW50O1xcblx0XHRcdH1cXG5cXG5cdFx0XHQuaW5zdGFuY2UtdmlldyAuaW5zdGFuY2UtdHJhY2Vze1xcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAxNXB4O1xcblx0XHRcdFx0cGFkZGluZy1yaWdodDogMTVweDtcXG5cdFx0XHR9XFxuXFxuXHRcdFx0XCIgKyAoKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuc3R5bGVzIDogdm9pZCAwKSB8fCBcIlwiKSArIFwiXFxuXHRcdDwvc3R5bGU+XFxuXHQ8L2hlYWQ+XFxuXHQ8Ym9keT5cXG5cdFx0PGRpdiBjbGFzcz1cXFwic3RlZWRvcyB3b3JrZmxvdyBpbnN0YW5jZS1wcmludFxcXCI+XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwic2tpbi1ncmVlbiBza2luLWFkbWluLWx0ZVxcXCI+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJ3cmFwcGVyXFxcIj5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiY29udGVudC13cmFwcGVyXFxcIj5cXG5cdFx0XHRcdFx0XHRcIiArIHNob3dUcmFjZXNCdG4gKyBcIlxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImluc3RhbmNlLXByaW50XFxcIj5cXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImluc3RhbmNlIFwiICsgaW5zdGFuY2Vfc3R5bGUgKyBcIlxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDxmb3JtIG5hbWU9XFxcImluc3RhbmNlRm9ybVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiaW5zdGFuY2UtZm9ybSBib3ggXCIgKyBpbnN0YW5jZUJveFN0eWxlICsgXCJcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XCIgKyBmb3JtRGVzY3JpcHRpb25IdG1sICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImJveC1ib2R5XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdhdHRhY2htZW50cy1zZWN0aW9uJz5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiICsgYXR0YWNobWVudCArIFwiXFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIiArIHJlbGF0ZWRfaW5zdGFuY2VzICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiICsgcmVsYXRlZF9yZWNvcmRzICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIiArIGJvZHkgKyBcIlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHQ8L2Zvcm0+XFxuXHRcdFx0XHRcdFx0XHRcdFwiICsgdHJhY2UgKyBcIlxcblx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0PC9kaXY+XFxuXHRcdDwvZGl2Plxcblx0PC9ib2R5Plxcblx0PHNjcmlwdD5cIiArIG9wZW5GaWxlU2NyaXB0ICsgXCI7XCIgKyBvbkxvYWRTY3JpcHQgKyBcIjtcIiArIHNob3dUcmFjZXNTY3JpcHQgKyBcIjwvc2NyaXB0PlxcbjwvaHRtbD5cIjtcbiAgcmV0dXJuIGh0bWw7XG59O1xuIiwiVGVtcGxhdGVNYW5hZ2VyID0ge307XG5cbmZvcm1JZCA9ICdpbnN0YW5jZWZvcm0nO1xuXG5cblRlbXBsYXRlTWFuYWdlci5pbnN0YW5jZV90aXRsZSA9ICgpLT5cblx0cGFnZVRpdGxlID0gXCJcIlwiXG5cdFx0e3tpbnN0YW5jZS5uYW1lfX1cblx0XCJcIlwiXG5cblx0cGFnZVRpdGxlVHJDbGFzcyA9IFwiaW5zdGFuY2UtbmFtZVwiXG5cblx0aWYgQ29yZUZvcm0/LnBhZ2VUaXRsZUZpZWxkTmFtZVxuXHRcdHBhZ2VUaXRsZSA9IFwiXCJcIlxuXHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT1cIiN7Q29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lfVwiIGxhYmVsPWZhbHNlfX1cblx0XHRcIlwiXCJcblx0XHRwYWdlVGl0bGVUckNsYXNzID0gXCJcIlxuXG5cdGlmIENvcmVGb3JtPy5wYWdlVGl0bGVcblx0XHRwYWdlVGl0bGUgPSBcIlwiXCJcblx0XHRcdCN7Q29yZUZvcm0ucGFnZVRpdGxlfVxuXHRcdFwiXCJcIlxuXHRcdHBhZ2VUaXRsZVRyQ2xhc3MgPSBcIlwiXG5cblx0dmFsID1cblx0XHRwYWdlVGl0bGU6IHBhZ2VUaXRsZVxuXHRcdHBhZ2VUaXRsZVRyQ2xhc3M6IHBhZ2VUaXRsZVRyQ2xhc3NcblxuXHRyZXR1cm4gdmFsXG5cblRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlID0gKGluc3RhbmNlLCBfZXhwb3J0KSAtPlxuXG5cdHRlbXBsYXRlID0gXCJcIlwiXG5cdDxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cblx0XHQ8dGFibGUgY2xhc3M9XCJ0YWJsZS1wYWdlLXRpdGxlIGZvcm0tdGFibGUgbm8tYm9yZGVyIHRleHQtYWxpZ24tY2VudGVyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtkaXNwbGF5OiBpbmxpbmUtdGFibGU7XCI+XG5cdFx0XHQ8dHIgY2xhc3M9XCIje3RoaXMuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGVUckNsYXNzfVwiPlxuXHRcdFx0XHQ8dGQgY2xhc3M9XCJpbnN0YW5jZS10YWJsZS1uYW1lLXRkIHBhZ2UtdGl0bGVcIj5cblx0XHRcdFx0XHQje3RoaXMuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGV9XG5cdFx0XHRcdDwvdGQ+XG5cdFx0XHQ8L3RyPlxuXG5cdFx0PC90YWJsZT5cblx0XHQ8dGFibGUgY2xhc3M9XCJ0YWJsZS1wYWdlLWJvZHkgZm9ybS10YWJsZVwiPlxuXHRcdFx0XHQ8dHIgc3R5bGU9XCJoZWlnaHQ6MHB4XCI+XG5cdFx0XHRcdFx0PHRoIHN0eWxlPSd3aWR0aDogMTYlJz48L3RoPlxuXHRcdFx0XHRcdDx0aD48L3RoPlxuXHRcdFx0XHRcdDx0aCBzdHlsZT0nd2lkdGg6IDE2JSc+PC90aD5cblx0XHRcdFx0XHQ8dGg+PC90aD5cblx0XHRcdFx0PC90cj5cblx0XCJcIlwiO1xuXG5cdHRhYmxlX2ZpZWxkcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudGFibGVfZmllbGRzKGluc3RhbmNlKVxuXG5cdHRhYmxlX2ZpZWxkcy5mb3JFYWNoICh0YWJsZV9maWVsZCktPlxuXG5cdFx0cmVxdWlyZWQgPSBcIlwiXG5cdFx0aWYgIUNvcmVGb3JtPy5wYWdlVGl0bGVGaWVsZE5hbWUgfHwgQ29yZUZvcm0/LnBhZ2VUaXRsZUZpZWxkTmFtZSAhPSB0YWJsZV9maWVsZC5jb2RlXG5cdFx0XHRpZiB0YWJsZV9maWVsZC5pc19yZXF1aXJlZFxuXHRcdFx0XHRyZXF1aXJlZCA9IFwiaXMtcmVxdWlyZWRcIlxuXG5cdFx0XHRpZiBfZXhwb3J0XG5cdFx0XHRcdHJlcXVpcmVkID0gXCJcIjtcblxuXHRcdFx0cHVyZUNvZGUgPSBTdGVlZG9zLnJlbW92ZVNwZWNpYWxDaGFyYWN0ZXIodGFibGVfZmllbGQuY29kZSk7XG5cblx0XHRcdGlmIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGQodGFibGVfZmllbGQpXG5cdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0XG5cdFx0XHRcdHRlbXBsYXRlICs9IFwiXCJcIlxuXHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLXRpdGxlICN7cmVxdWlyZWR9XCI+XG5cdFx0XHRcdFx0XHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIn19XG5cdFx0XHRcdFx0PC90ZD5cblx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1maWVsZCBvcGluaW9uLWZpZWxkIG9waW5pb24tZmllbGQtI3twdXJlQ29kZX0gYXV0b21hdGljXCIgY29sc3BhbiA9IFwiI3t0YWJsZV9maWVsZC50ZF9jb2xzcGFufVwiPlxuXHRcdFx0XHRcdFx0e3s+IGluc3RhbmNlU2lnblRleHQgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIn19XG5cdFx0XHRcdFx0PC90ZD5cblx0XHRcdFx0XCJcIlwiXG5cdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZFxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRpZiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluY2x1ZGVzKHRhYmxlX2ZpZWxkLnR5cGUsICdzZWN0aW9uLHRhYmxlJylcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydFxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IFwiXCJcIlxuXHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtY2hpbGRmaWVsZCB0ZC1jaGlsZGZpZWxkLSN7cHVyZUNvZGV9XCIgY29sc3BhbiA9IFwiI3t0YWJsZV9maWVsZC50ZF9jb2xzcGFufVwiPlxuXHRcdFx0XHRcdFx0ICAge3s+IGFmRm9ybUdyb3VwIG5hbWU9XCIje3RhYmxlX2ZpZWxkLmNvZGV9XCIgbGFiZWw9ZmFsc2V9fVxuXHRcdFx0XHRcdFx0PC90ZD5cblx0XHRcdFx0XHRcIlwiXCJcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9lbmRcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0XG5cblx0XHRcdFx0XHRpZiBfZXhwb3J0XG5cdFx0XHRcdFx0XHR0aXRsZV9wZXJtaXNzaW9uID0gXCJcIlxuXHRcdFx0XHRcdFx0ZmllbGRfcGVybWlzc2lvbiA9IFwiXCJcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHR0aXRsZV9wZXJtaXNzaW9uID0gXCJ0aXRsZS1cIiArIHRhYmxlX2ZpZWxkLnBlcm1pc3Npb25cblx0XHRcdFx0XHRcdGZpZWxkX3Blcm1pc3Npb24gPSBcImZpZWxkLVwiICsgdGFibGVfZmllbGQucGVybWlzc2lvblxuXG5cdFx0XHRcdFx0dGVtcGxhdGUgKz0gXCJcIlwiXG5cdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC10aXRsZSB0ZC10aXRsZS0je3B1cmVDb2RlfSAje3RpdGxlX3Blcm1pc3Npb259ICN7cmVxdWlyZWR9XCI+XG5cdFx0XHRcdFx0XHRcdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPVwiI3t0YWJsZV9maWVsZC5jb2RlfVwifX1cblx0XHRcdFx0XHRcdDwvdGQ+XG5cdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1maWVsZCB0ZC1maWVsZC0je3B1cmVDb2RlfSAje2ZpZWxkX3Blcm1pc3Npb259XCIgY29sc3BhbiA9IFwiI3t0YWJsZV9maWVsZC50ZF9jb2xzcGFufVwiPlxuXHRcdFx0XHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIiBsYWJlbD1mYWxzZX19XG5cdFx0XHRcdFx0XHQ8L3RkPlxuXHRcdFx0XHRcdFwiXCJcIlxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZFxuXG5cdHRlbXBsYXRlICs9IFwiXCJcIlxuXHRcdDwvdGFibGU+XG5cblx0XHQ8dGFibGUgY2xhc3M9XCJ0YWJsZS1wYWdlLWZvb3RlciBmb3JtLXRhYmxlIG5vLWJvcmRlclwiPlxuXHRcdFx0PHRyIGNsYXNzPVwiYXBwbGljYW50LXdyYXBwZXJcIj5cblx0XHRcdFx0PHRkIGNsYXNzPVwibm93cmFwXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLWxlZnQnPlxuXHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7X3QgXCJpbnN0YW5jZV9pbml0aWF0b3JcIn1977yaPC9sYWJlbD5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS10YWJsZS13cmFwcGVyLXRkIGlubGluZS1sZWZ0Jz5cblx0XHRcdFx0XHRcdHt7PlRlbXBsYXRlLmR5bmFtaWMgIHRlbXBsYXRlPVwiYWZTZWxlY3RVc2VyXCIgZGF0YT1hcHBsaWNhbnRDb250ZXh0fX1cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC90ZD5cblx0XHRcdFx0PHRkIGNsYXNzPVwibm93cmFwXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0ncHVsbC1sZWZ0Jz5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1sZWZ0Jz5cblx0XHRcdFx0XHRcdFx0PGxhYmVsPnt7X3QgXCJpbnN0YW5jZV9zdWJtaXRfZGF0ZVwifX3vvJo8L2xhYmVsPlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtcmlnaHQnPlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0XHRcdHt7Zm9ybWF0RGF0ZSBpbnN0YW5jZS5zdWJtaXRfZGF0ZSAne1wiZm9ybWF0XCI6XCJZWVlZLU1NLUREXCJ9J319XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvdGQ+XG5cdFx0XHQ8L3RyPlxuXHRcdDwvdGFibGU+XG5cdDwvZGl2PlxuXHRcIlwiXCJcblx0cmV0dXJuIHRlbXBsYXRlXG5cbiPmraTlpITmqKHmnb/lhaznlKjkuI7vvJppbnN0YW5jZSDnvJbovpHjgIHmn6XnnIvjgIHmiZPljbDjgIHovazlj5Hml7bnlJ/miJDpmYTku7bjgIHlj5HpgIHpgq7ku7Zib2R56YOo5YiGKHRhYmxlIOaooeadvylcbiPlpoLmnpzmnInkv67mlLnvvIzor7fmtYvor5Xnoa7orqTlhbbku5blip/og73mmK/lkKbmraPluLjjgIJcblRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUgPVxuXHRkZWZhdWx0OiAoaW5zdGFuY2UpLT5cblxuXHRcdHRlbXBsYXRlID0gXCJcIlwiXG5cdFx0XHQ8ZGl2IGNsYXNzPVwid2l0aC1ib3JkZXIgY29sLW1kLTEyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnN0YW5jZS1uYW1lXCI+XG5cdFx0XHRcdFx0PGgzIGNsYXNzPVwiYm94LXRpdGxlXCI+I3tUZW1wbGF0ZU1hbmFnZXIuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGV9PC9oMz5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImhlbHAtYmxvY2tcIj48L3NwYW4+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImhlbHAtYmxvY2tcIj48L3NwYW4+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdHt7I2VhY2ggc3RlZWRvc19mb3JtLmZpZWxkc319XG5cdFx0XHRcdHt7I2lmIGlzT3BpbmlvbkZpZWxkIHRoaXN9fVxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ7eyNpZiB0aGlzLmlzX3dpZGV9fWNvbC1tZC0xMnt7ZWxzZX19Y29sLW1kLTZ7ey9pZn19IGZpZWxkLXt7dGhpcy5jb2RlfX1cIj5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGF1dG9tYXRpYyBvcGluaW9uLWZpZWxkLXt7dGhpcy5jb2RlfX1cIj5cblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPXRoaXMuY29kZX19PC9sYWJlbD5cblxuXHRcdFx0XHRcdFx0XHR7ez4gaW5zdGFuY2VTaWduVGV4dCBuYW1lPXRoaXMuY29kZX19XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0e3tlbHNlfX1cblx0XHRcdFx0XHR7eyNpZiBpbmNsdWRlcyB0aGlzLnR5cGUgJ3NlY3Rpb24sdGFibGUnfX1cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgZmllbGQte3t0aGlzLmNvZGV9fVwiPlxuXHRcdFx0XHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGUgbGFiZWw9ZmFsc2V9fVxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0e3tlbHNlfX1cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ7eyNpZiB0aGlzLmlzX3dpZGV9fWNvbC1tZC0xMnt7ZWxzZX19Y29sLW1kLTZ7ey9pZn19IGZpZWxkLXt7dGhpcy5jb2RlfX1cIj5cblx0XHRcdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZX19XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHR7ey9pZn19XG5cdFx0XHRcdHt7L2lmfX1cblx0XHRcdHt7L2VhY2h9fVxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYXBwbGljYW50LXdyYXBwZXIgZm9ybS1ncm91cCBmb3JtLWhvcml6b250YWxcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+XG5cdFx0XHRcdFx0ICB7e190IFwiaW5zdGFuY2VfaW5pdGlhdG9yXCJ9fSZuYnNwOzpcblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cImFmU2VsZWN0VXNlclwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XG5cdFx0XHRcdCAgPC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XCJcIlwiXG5cdFx0cmV0dXJuIHRlbXBsYXRlXG5cblx0dGFibGU6IChpbnN0YW5jZSktPlxuXHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZShpbnN0YW5jZSlcbiNcdHRhYmxlOiAnJydcbiNcdFx0PHRhYmxlIGNsYXNzPVwiYm94LWhlYWRlciAgd2l0aC1ib3JkZXJcIiBzdHlsZT1cIndpZHRoOiAxMDAlO2Rpc3BsYXk6IGlubGluZS10YWJsZTtcIj5cbiNcdFx0XHQ8dHIgY2xhc3M9XCJpbnN0YW5jZS1uYW1lXCI+XG4jXHRcdFx0XHQ8dGQgY2xhc3M9XCJpbnN0YW5jZS10YWJsZS1uYW1lLXRkXCI+XG4jXHRcdFx0XHRcdDxoMyBjbGFzcz1cImJveC10aXRsZVwiPnt7aW5zdGFuY2UubmFtZX19PC9oMz5cbiNcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJoZWxwLWJsb2NrXCI+PC9zcGFuPlxuI1x0XHRcdFx0PC90ZD5cbiNcdFx0XHQ8L3RyPlxuIyAgICAgICAgICAgIDx0ciBjbGFzcz1cImFwcGxpY2FudC13cmFwcGVyXCI+XG4jXHRcdFx0XHQ8dGQgY2xhc3M9XCJpbnN0YW5jZS10YWJsZS13cmFwcGVyLXRkXCI+XG4jXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e190IFwiaW5zdGFuY2VfaW5pdGlhdG9yXCJ9fSZuYnNwOzo8L2xhYmVsPlxuI1x0XHRcdFx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cImFmU2VsZWN0VXNlclwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XG4jXHRcdFx0XHQ8L3RkPlxuI1x0XHRcdDwvdHI+XG4jICAgICAgICA8L3RhYmxlPlxuI1x0XHQ8dGFibGUgY2xhc3M9XCJmb3JtLXRhYmxlXCI+XG4jXHRcdCAgICB7eyNlYWNoIHRhYmxlX2ZpZWxkc319XG4jXHRcdFx0XHR7eyNpZiBpc09waW5pb25GaWVsZCB0aGlzfX1cbiNcdFx0XHRcdFx0e3t7dHJfc3RhcnR9fX1cbiNcdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC10aXRsZSB7eyNpZiBpc19yZXF1aXJlZH19aXMtcmVxdWlyZWR7ey9pZn19XCI+XG4jXHRcdFx0XHRcdFx0XHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT10aGlzLmNvZGV9fVxuI1x0XHRcdFx0XHRcdDwvdGQ+XG4jXHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtZmllbGQgb3Bpbmlvbi1maWVsZFwiIGNvbHNwYW4gPSAne3t0ZF9jb2xzcGFufX0nPlxuI1x0XHRcdFx0XHRcdFx0e3s+IGluc3RhbmNlU2lnblRleHQgc3RlcD0oZ2V0T3BpbmlvbkZpZWxkU3RlcE5hbWUgdGhpcykgZGVmYXVsdD0nJ319XG4jXHRcdFx0XHRcdFx0PC90ZD5cbiNcdFx0XHRcdFx0e3t7dHJfZW5kfX19XG4jXHRcdFx0XHR7e2Vsc2V9fVxuI1x0XHRcdFx0XHR7eyNpZiBpbmNsdWRlcyB0aGlzLnR5cGUgJ3NlY3Rpb24sdGFibGUnfX1cbiNcdFx0XHRcdFx0XHR7e3t0cl9zdGFydH19fVxuI1x0XHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtY2hpbGRmaWVsZFwiIGNvbHNwYW4gPSAne3t0ZF9jb2xzcGFufX0nPlxuI1x0XHRcdFx0XHRcdFx0ICAge3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlIGxhYmVsPWZhbHNlfX1cbiNcdFx0XHRcdFx0XHRcdDwvdGQ+XG4jXHRcdFx0XHRcdFx0e3t7dHJfZW5kfX19XG4jXHRcdFx0XHRcdHt7ZWxzZX19XG4jXHRcdFx0XHRcdFx0e3t7dHJfc3RhcnR9fX1cbiNcdFx0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLXRpdGxlIHt7I2lmIGlzX3JlcXVpcmVkfX1pcy1yZXF1aXJlZHt7L2lmfX1cIj5cbiNcdFx0XHRcdFx0XHRcdFx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9dGhpcy5jb2RlfX1cbiNcdFx0XHRcdFx0XHRcdDwvdGQ+XG4jXHRcdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1maWVsZCB7e3Blcm1pc3Npb259fVwiIGNvbHNwYW4gPSAne3t0ZF9jb2xzcGFufX0nPlxuI1x0XHRcdFx0XHRcdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGUgbGFiZWw9ZmFsc2V9fVxuI1x0XHRcdFx0XHRcdFx0PC90ZD5cbiNcdFx0XHRcdFx0XHR7e3t0cl9lbmR9fX1cbiNcdFx0XHRcdFx0e3svaWZ9fVxuI1x0XHRcdFx0e3svaWZ9fVxuI1xuI1x0XHQgICAge3svZWFjaH19XG4jXHRcdDwvdGFibGU+XG4jXHQnJydcblxuVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZUhlbHBzID1cblx0YXBwbGljYW50Q29udGV4dDogLT5cblx0XHRzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdFx0ZGF0YSA9IHtcblx0XHRcdG5hbWU6ICdpbnNfYXBwbGljYW50Jyxcblx0XHRcdGF0dHM6IHtcblx0XHRcdFx0bmFtZTogJ2luc19hcHBsaWNhbnQnLFxuXHRcdFx0XHRpZDogJ2luc19hcHBsaWNhbnQnLFxuXHRcdFx0XHRjbGFzczogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sJyxcblx0XHRcdFx0c3R5bGU6ICdwYWRkaW5nOjZweCAxMnB4O3dpZHRoOjE0MHB4O2Rpc3BsYXk6aW5saW5lJ1xuXHRcdFx0fVxuXHRcdH1cbiNcdFx0aWYgbm90IHN0ZWVkb3NfaW5zdGFuY2UgfHwgc3RlZWRvc19pbnN0YW5jZS5zdGF0ZSAhPSBcImRyYWZ0XCJcblx0XHRkYXRhLmF0dHMuZGlzYWJsZWQgPSB0cnVlXG5cdFx0cmV0dXJuIGRhdGE7XG5cbmluc3RhbmNlSWQ6IC0+XG5cdHJldHVybiAnaW5zdGFuY2Vmb3JtJzsjXCJpbnN0YW5jZV9cIiArIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKTtcblxuZm9ybV90eXBlczogLT5cblx0aWYgQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpXG5cdFx0cmV0dXJuICdkaXNhYmxlZCc7XG5cdGVsc2Vcblx0XHRyZXR1cm4gJ21ldGhvZCc7XG5cbnN0ZWVkb3NfZm9ybTogLT5cblx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcblx0aWYgZm9ybV92ZXJzaW9uXG5cdFx0cmV0dXJuIGZvcm1fdmVyc2lvblxuXG5pbm5lcnN1YmZvcm1Db250ZXh0OiAob2JqKS0+XG5cdGRvY192YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG5cdG9ialtcInRhYmxlVmFsdWVzXCJdID0gaWYgZG9jX3ZhbHVlcyB0aGVuIGRvY192YWx1ZXNbb2JqLmNvZGVdIGVsc2UgW11cblx0b2JqW1wiZm9ybUlkXCJdID0gZm9ybUlkO1xuXHRyZXR1cm4gb2JqO1xuXG5pbnN0YW5jZTogLT5cblx0U2Vzc2lvbi5nZXQoXCJjaGFuZ2VfZGF0ZVwiKVxuXHRpZiAoU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKVxuXHRcdHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0XHRyZXR1cm4gc3RlZWRvc19pbnN0YW5jZTtcblxuZXF1YWxzOiAoYSwgYikgLT5cblx0cmV0dXJuIChhID09IGIpXG5cbmluY2x1ZGVzOiAoYSwgYikgLT5cblx0cmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcblxuZmllbGRzOiAtPlxuXHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuXHRpZiBmb3JtX3ZlcnNpb25cblx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xuXG5kb2NfdmFsdWVzOiAtPlxuXHRXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG5cbmluc3RhbmNlX2JveF9zdHlsZTogLT5cblx0Ym94ID0gU2Vzc2lvbi5nZXQoXCJib3hcIilcblx0aWYgYm94ID09IFwiaW5ib3hcIiB8fCBib3ggPT0gXCJkcmFmdFwiXG5cdFx0anVkZ2UgPSBTZXNzaW9uLmdldChcImp1ZGdlXCIpXG5cdFx0aWYganVkZ2Vcblx0XHRcdGlmIChqdWRnZSA9PSBcImFwcHJvdmVkXCIpXG5cdFx0XHRcdHJldHVybiBcImJveC1zdWNjZXNzXCJcblx0XHRcdGVsc2UgaWYgKGp1ZGdlID09IFwicmVqZWN0ZWRcIilcblx0XHRcdFx0cmV0dXJuIFwiYm94LWRhbmdlclwiXG5cdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRpZiBpbnMgJiYgaW5zLmZpbmFsX2RlY2lzaW9uXG5cdFx0aWYgaW5zLmZpbmFsX2RlY2lzaW9uID09IFwiYXBwcm92ZWRcIlxuXHRcdFx0cmV0dXJuIFwiYm94LXN1Y2Nlc3NcIlxuXHRcdGVsc2UgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PSBcInJlamVjdGVkXCIpXG5cdFx0XHRyZXR1cm4gXCJib3gtZGFuZ2VyXCJcblxuXG5UZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUgPSAoaW5zdGFuY2UsIHRlbXBsYXRlTmFtZSkgLT5cblx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XG5cdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuXG5cdGlmIHRlbXBsYXRlTmFtZVxuXHRcdGlmIHRlbXBsYXRlTmFtZSA9PSAndGFibGUnXG5cdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSlcblx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS5kZWZhdWx0KGluc3RhbmNlKVxuXG5cdGlmIFNlc3Npb24/LmdldChcImluc3RhbmNlUHJpbnRcIilcblx0XHRpZiBmbG93Py5wcmludF90ZW1wbGF0ZVxuXHRcdFx0cmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5wcmludF90ZW1wbGF0ZSArIFwiPC9kaXY+XCJcblx0XHRlbHNlXG5cdFx0XHRpZiBmbG93Py5pbnN0YW5jZV90ZW1wbGF0ZVxuXHRcdFx0XHRyZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlICsgXCI8L2Rpdj5cIlxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSlcblx0ZWxzZVxuXHRcdGlmIFN0ZWVkb3MuaXNNb2JpbGUoKVxuXHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUuZGVmYXVsdChpbnN0YW5jZSlcblxuXHRcdGlmIGZsb3c/Lmluc3RhbmNlX3RlbXBsYXRlXG5cdFx0XHRyZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlICsgXCI8L2Rpdj5cIlxuXG5cdFx0aWYgZm9ybT8uaW5zdGFuY2Vfc3R5bGVcblx0XHRcdGlmIGZvcm0uaW5zdGFuY2Vfc3R5bGUgPT0gJ3RhYmxlJ1xuXHRcdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSlcblx0XHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLmRlZmF1bHQoaW5zdGFuY2UpXG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUuZGVmYXVsdChpbnN0YW5jZSlcblxuI1RlbXBsYXRlTWFuYWdlci5leHBvcnRUZW1wbGF0ZSA9IChmbG93SWQpIC0+XG4jXHR0ZW1wbGF0ZSA9IFRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZShmbG93SWQpO1xuI1xuI1x0ZmxvdyA9IFdvcmtmbG93TWFuYWdlci5nZXRGbG93KGZsb3dJZCk7XG4jXG4jXHRpZiBmbG93Py5pbnN0YW5jZV90ZW1wbGF0ZVxuI1x0XHRyZXR1cm4gdGVtcGxhdGU7XG4jXG4jXHRyZXR1cm4gdGVtcGxhdGU7XG5cbiIsInZhciBmb3JtSWQ7ICAgICAgICAgICAgICAgICBcblxuVGVtcGxhdGVNYW5hZ2VyID0ge307XG5cbmZvcm1JZCA9ICdpbnN0YW5jZWZvcm0nO1xuXG5UZW1wbGF0ZU1hbmFnZXIuaW5zdGFuY2VfdGl0bGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhZ2VUaXRsZSwgcGFnZVRpdGxlVHJDbGFzcywgdmFsO1xuICBwYWdlVGl0bGUgPSBcInt7aW5zdGFuY2UubmFtZX19XCI7XG4gIHBhZ2VUaXRsZVRyQ2xhc3MgPSBcImluc3RhbmNlLW5hbWVcIjtcbiAgaWYgKHR5cGVvZiBDb3JlRm9ybSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBDb3JlRm9ybSAhPT0gbnVsbCA/IENvcmVGb3JtLnBhZ2VUaXRsZUZpZWxkTmFtZSA6IHZvaWQgMCkge1xuICAgIHBhZ2VUaXRsZSA9IFwie3s+IGFmRm9ybUdyb3VwIG5hbWU9XFxcIlwiICsgQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lICsgXCJcXFwiIGxhYmVsPWZhbHNlfX1cIjtcbiAgICBwYWdlVGl0bGVUckNsYXNzID0gXCJcIjtcbiAgfVxuICBpZiAodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlIDogdm9pZCAwKSB7XG4gICAgcGFnZVRpdGxlID0gXCJcIiArIENvcmVGb3JtLnBhZ2VUaXRsZTtcbiAgICBwYWdlVGl0bGVUckNsYXNzID0gXCJcIjtcbiAgfVxuICB2YWwgPSB7XG4gICAgcGFnZVRpdGxlOiBwYWdlVGl0bGUsXG4gICAgcGFnZVRpdGxlVHJDbGFzczogcGFnZVRpdGxlVHJDbGFzc1xuICB9O1xuICByZXR1cm4gdmFsO1xufTtcblxuVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUgPSBmdW5jdGlvbihpbnN0YW5jZSwgX2V4cG9ydCkge1xuICB2YXIgdGFibGVfZmllbGRzLCB0ZW1wbGF0ZTtcbiAgdGVtcGxhdGUgPSBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cXG5cdDx0YWJsZSBjbGFzcz1cXFwidGFibGUtcGFnZS10aXRsZSBmb3JtLXRhYmxlIG5vLWJvcmRlciB0ZXh0LWFsaWduLWNlbnRlclxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlO2Rpc3BsYXk6IGlubGluZS10YWJsZTtcXFwiPlxcblx0XHQ8dHIgY2xhc3M9XFxcIlwiICsgKHRoaXMuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGVUckNsYXNzKSArIFwiXFxcIj5cXG5cdFx0XHQ8dGQgY2xhc3M9XFxcImluc3RhbmNlLXRhYmxlLW5hbWUtdGQgcGFnZS10aXRsZVxcXCI+XFxuXHRcdFx0XHRcIiArICh0aGlzLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlKSArIFwiXFxuXHRcdFx0PC90ZD5cXG5cdFx0PC90cj5cXG5cXG5cdDwvdGFibGU+XFxuXHQ8dGFibGUgY2xhc3M9XFxcInRhYmxlLXBhZ2UtYm9keSBmb3JtLXRhYmxlXFxcIj5cXG5cdFx0XHQ8dHIgc3R5bGU9XFxcImhlaWdodDowcHhcXFwiPlxcblx0XHRcdFx0PHRoIHN0eWxlPSd3aWR0aDogMTYlJz48L3RoPlxcblx0XHRcdFx0PHRoPjwvdGg+XFxuXHRcdFx0XHQ8dGggc3R5bGU9J3dpZHRoOiAxNiUnPjwvdGg+XFxuXHRcdFx0XHQ8dGg+PC90aD5cXG5cdFx0XHQ8L3RyPlwiO1xuICB0YWJsZV9maWVsZHMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRhYmxlX2ZpZWxkcyhpbnN0YW5jZSk7XG4gIHRhYmxlX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKHRhYmxlX2ZpZWxkKSB7XG4gICAgdmFyIGZpZWxkX3Blcm1pc3Npb24sIHB1cmVDb2RlLCByZXF1aXJlZCwgdGl0bGVfcGVybWlzc2lvbjtcbiAgICByZXF1aXJlZCA9IFwiXCI7XG4gICAgaWYgKCEodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lIDogdm9pZCAwKSB8fCAodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lIDogdm9pZCAwKSAhPT0gdGFibGVfZmllbGQuY29kZSkge1xuICAgICAgaWYgKHRhYmxlX2ZpZWxkLmlzX3JlcXVpcmVkKSB7XG4gICAgICAgIHJlcXVpcmVkID0gXCJpcy1yZXF1aXJlZFwiO1xuICAgICAgfVxuICAgICAgaWYgKF9leHBvcnQpIHtcbiAgICAgICAgcmVxdWlyZWQgPSBcIlwiO1xuICAgICAgfVxuICAgICAgcHVyZUNvZGUgPSBTdGVlZG9zLnJlbW92ZVNwZWNpYWxDaGFyYWN0ZXIodGFibGVfZmllbGQuY29kZSk7XG4gICAgICBpZiAoSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZCh0YWJsZV9maWVsZCkpIHtcbiAgICAgICAgdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfc3RhcnQ7XG4gICAgICAgIHRlbXBsYXRlICs9IFwiPHRkIGNsYXNzPVxcXCJ0ZC10aXRsZSBcIiArIHJlcXVpcmVkICsgXCJcXFwiPlxcblx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIn19XFxuPC90ZD5cXG48dGQgY2xhc3M9XFxcInRkLWZpZWxkIG9waW5pb24tZmllbGQgb3Bpbmlvbi1maWVsZC1cIiArIHB1cmVDb2RlICsgXCIgYXV0b21hdGljXFxcIiBjb2xzcGFuID0gXFxcIlwiICsgdGFibGVfZmllbGQudGRfY29sc3BhbiArIFwiXFxcIj5cXG5cdHt7PiBpbnN0YW5jZVNpZ25UZXh0IG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIn19XFxuPC90ZD5cIjtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluY2x1ZGVzKHRhYmxlX2ZpZWxkLnR5cGUsICdzZWN0aW9uLHRhYmxlJykpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydDtcbiAgICAgICAgICB0ZW1wbGF0ZSArPSBcIjx0ZCBjbGFzcz1cXFwidGQtY2hpbGRmaWVsZCB0ZC1jaGlsZGZpZWxkLVwiICsgcHVyZUNvZGUgKyBcIlxcXCIgY29sc3BhbiA9IFxcXCJcIiArIHRhYmxlX2ZpZWxkLnRkX2NvbHNwYW4gKyBcIlxcXCI+XFxuICAge3s+IGFmRm9ybUdyb3VwIG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIiBsYWJlbD1mYWxzZX19XFxuPC90ZD5cIjtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0O1xuICAgICAgICAgIGlmIChfZXhwb3J0KSB7XG4gICAgICAgICAgICB0aXRsZV9wZXJtaXNzaW9uID0gXCJcIjtcbiAgICAgICAgICAgIGZpZWxkX3Blcm1pc3Npb24gPSBcIlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZV9wZXJtaXNzaW9uID0gXCJ0aXRsZS1cIiArIHRhYmxlX2ZpZWxkLnBlcm1pc3Npb247XG4gICAgICAgICAgICBmaWVsZF9wZXJtaXNzaW9uID0gXCJmaWVsZC1cIiArIHRhYmxlX2ZpZWxkLnBlcm1pc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHRlbXBsYXRlICs9IFwiPHRkIGNsYXNzPVxcXCJ0ZC10aXRsZSB0ZC10aXRsZS1cIiArIHB1cmVDb2RlICsgXCIgXCIgKyB0aXRsZV9wZXJtaXNzaW9uICsgXCIgXCIgKyByZXF1aXJlZCArIFwiXFxcIj5cXG5cdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPVxcXCJcIiArIHRhYmxlX2ZpZWxkLmNvZGUgKyBcIlxcXCJ9fVxcbjwvdGQ+XFxuPHRkIGNsYXNzPVxcXCJ0ZC1maWVsZCB0ZC1maWVsZC1cIiArIHB1cmVDb2RlICsgXCIgXCIgKyBmaWVsZF9wZXJtaXNzaW9uICsgXCJcXFwiIGNvbHNwYW4gPSBcXFwiXCIgKyB0YWJsZV9maWVsZC50ZF9jb2xzcGFuICsgXCJcXFwiPlxcblx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIiBsYWJlbD1mYWxzZX19XFxuPC90ZD5cIjtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGVtcGxhdGUgKz0gXCJcdDwvdGFibGU+XFxuXFxuXHQ8dGFibGUgY2xhc3M9XFxcInRhYmxlLXBhZ2UtZm9vdGVyIGZvcm0tdGFibGUgbm8tYm9yZGVyXFxcIj5cXG5cdFx0PHRyIGNsYXNzPVxcXCJhcHBsaWNhbnQtd3JhcHBlclxcXCI+XFxuXHRcdFx0PHRkIGNsYXNzPVxcXCJub3dyYXBcXFwiPlxcblx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLWxlZnQnPlxcblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7X3QgXFxcImluc3RhbmNlX2luaXRpYXRvclxcXCJ9fe+8mjwvbGFiZWw+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLXRhYmxlLXdyYXBwZXItdGQgaW5saW5lLWxlZnQnPlxcblx0XHRcdFx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cXFwiYWZTZWxlY3RVc2VyXFxcIiBkYXRhPWFwcGxpY2FudENvbnRleHR9fVxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0PC90ZD5cXG5cdFx0XHQ8dGQgY2xhc3M9XFxcIm5vd3JhcFxcXCI+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdwdWxsLWxlZnQnPlxcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtbGVmdCc+XFxuXHRcdFx0XHRcdFx0PGxhYmVsPnt7X3QgXFxcImluc3RhbmNlX3N1Ym1pdF9kYXRlXFxcIn1977yaPC9sYWJlbD5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1yaWdodCc+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHR7e2Zvcm1hdERhdGUgaW5zdGFuY2Uuc3VibWl0X2RhdGUgJ3tcXFwiZm9ybWF0XFxcIjpcXFwiWVlZWS1NTS1ERFxcXCJ9J319XFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0PC90ZD5cXG5cdFx0PC90cj5cXG5cdDwvdGFibGU+XFxuPC9kaXY+XCI7XG4gIHJldHVybiB0ZW1wbGF0ZTtcbn07XG5cblRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUgPSB7XG4gIFwiZGVmYXVsdFwiOiBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgIHZhciB0ZW1wbGF0ZTtcbiAgICB0ZW1wbGF0ZSA9IFwiPGRpdiBjbGFzcz1cXFwid2l0aC1ib3JkZXIgY29sLW1kLTEyXFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcImluc3RhbmNlLW5hbWVcXFwiPlxcblx0XHQ8aDMgY2xhc3M9XFxcImJveC10aXRsZVxcXCI+XCIgKyAoVGVtcGxhdGVNYW5hZ2VyLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlKSArIFwiPC9oMz5cXG5cdFx0PHNwYW4gY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPjwvc3Bhbj5cXG5cdDwvZGl2Plxcblx0PHNwYW4gY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPjwvc3Bhbj5cXG48L2Rpdj5cXG57eyNlYWNoIHN0ZWVkb3NfZm9ybS5maWVsZHN9fVxcblx0e3sjaWYgaXNPcGluaW9uRmllbGQgdGhpc319XFxuXHRcdDxkaXYgY2xhc3M9XFxcInt7I2lmIHRoaXMuaXNfd2lkZX19Y29sLW1kLTEye3tlbHNlfX1jb2wtbWQtNnt7L2lmfX0gZmllbGQte3t0aGlzLmNvZGV9fVxcXCI+XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBhdXRvbWF0aWMgb3Bpbmlvbi1maWVsZC17e3RoaXMuY29kZX19XFxcIj5cXG5cdFx0XHRcdDxsYWJlbCBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9dGhpcy5jb2RlfX08L2xhYmVsPlxcblxcblx0XHRcdFx0e3s+IGluc3RhbmNlU2lnblRleHQgbmFtZT10aGlzLmNvZGV9fVxcblx0XHRcdDwvZGl2Plxcblx0XHQ8L2Rpdj5cXG5cdHt7ZWxzZX19XFxuXHRcdHt7I2lmIGluY2x1ZGVzIHRoaXMudHlwZSAnc2VjdGlvbix0YWJsZSd9fVxcblx0XHRcdDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMiBmaWVsZC17e3RoaXMuY29kZX19XFxcIj5cXG5cdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZSBsYWJlbD1mYWxzZX19XFxuXHRcdFx0PC9kaXY+XFxuXHRcdHt7ZWxzZX19XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwie3sjaWYgdGhpcy5pc193aWRlfX1jb2wtbWQtMTJ7e2Vsc2V9fWNvbC1tZC02e3svaWZ9fSBmaWVsZC17e3RoaXMuY29kZX19XFxcIj5cXG5cdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGV9fVxcblx0XHRcdDwvZGl2Plxcblx0XHR7ey9pZn19XFxuXHR7ey9pZn19XFxue3svZWFjaH19XFxuPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcImFwcGxpY2FudC13cmFwcGVyIGZvcm0tZ3JvdXAgZm9ybS1ob3Jpem9udGFsXFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj5cXG5cdFx0PGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYWRkb25cXFwiPlxcblx0XHQgIHt7X3QgXFxcImluc3RhbmNlX2luaXRpYXRvclxcXCJ9fSZuYnNwOzpcXG5cdFx0PC9kaXY+XFxuXHRcdHt7PlRlbXBsYXRlLmR5bmFtaWMgIHRlbXBsYXRlPVxcXCJhZlNlbGVjdFVzZXJcXFwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XFxuXHQgIDwvZGl2Plxcblx0PC9kaXY+XFxuPC9kaXY+XCI7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9LFxuICB0YWJsZTogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUoaW5zdGFuY2UpO1xuICB9XG59O1xuXG5UZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlSGVscHMgPSB7XG4gIGFwcGxpY2FudENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRhLCBzdGVlZG9zX2luc3RhbmNlO1xuICAgIHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBkYXRhID0ge1xuICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgYXR0czoge1xuICAgICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIGlkOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIFwiY2xhc3NcIjogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sJyxcbiAgICAgICAgc3R5bGU6ICdwYWRkaW5nOjZweCAxMnB4O3dpZHRoOjE0MHB4O2Rpc3BsYXk6aW5saW5lJ1xuICAgICAgfVxuICAgIH07XG4gICAgZGF0YS5hdHRzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufTtcblxuKHtcbiAgaW5zdGFuY2VJZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdpbnN0YW5jZWZvcm0nO1xuICB9LFxuICBmb3JtX3R5cGVzOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpKSB7XG4gICAgICByZXR1cm4gJ2Rpc2FibGVkJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdtZXRob2QnO1xuICAgIH1cbiAgfSxcbiAgc3RlZWRvc19mb3JtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIGZvcm1fdmVyc2lvbjtcbiAgICB9XG4gIH0sXG4gIGlubmVyc3ViZm9ybUNvbnRleHQ6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBkb2NfdmFsdWVzO1xuICAgIGRvY192YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gICAgb2JqW1widGFibGVWYWx1ZXNcIl0gPSBkb2NfdmFsdWVzID8gZG9jX3ZhbHVlc1tvYmouY29kZV0gOiBbXTtcbiAgICBvYmpbXCJmb3JtSWRcIl0gPSBmb3JtSWQ7XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcbiAgaW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGVlZG9zX2luc3RhbmNlO1xuICAgIFNlc3Npb24uZ2V0KFwiY2hhbmdlX2RhdGVcIik7XG4gICAgaWYgKFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSkge1xuICAgICAgc3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgcmV0dXJuIHN0ZWVkb3NfaW5zdGFuY2U7XG4gICAgfVxuICB9LFxuICBlcXVhbHM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfSxcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xuICB9LFxuICBmaWVsZHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xuICAgIH1cbiAgfSxcbiAgZG9jX3ZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgfSxcbiAgaW5zdGFuY2VfYm94X3N0eWxlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm94LCBpbnMsIGp1ZGdlO1xuICAgIGJveCA9IFNlc3Npb24uZ2V0KFwiYm94XCIpO1xuICAgIGlmIChib3ggPT09IFwiaW5ib3hcIiB8fCBib3ggPT09IFwiZHJhZnRcIikge1xuICAgICAganVkZ2UgPSBTZXNzaW9uLmdldChcImp1ZGdlXCIpO1xuICAgICAgaWYgKGp1ZGdlKSB7XG4gICAgICAgIGlmIChqdWRnZSA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYm94LXN1Y2Nlc3NcIjtcbiAgICAgICAgfSBlbHNlIGlmIChqdWRnZSA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYm94LWRhbmdlclwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGlmIChpbnMgJiYgaW5zLmZpbmFsX2RlY2lzaW9uKSB7XG4gICAgICBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYm94LXN1Y2Nlc3NcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09PSBcInJlamVjdGVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYm94LWRhbmdlclwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cblRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uKGluc3RhbmNlLCB0ZW1wbGF0ZU5hbWUpIHtcbiAgdmFyIGZsb3csIGZvcm07XG4gIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGluc3RhbmNlLmZsb3cpO1xuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcbiAgaWYgKHRlbXBsYXRlTmFtZSkge1xuICAgIGlmICh0ZW1wbGF0ZU5hbWUgPT09ICd0YWJsZScpIHtcbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGVbXCJkZWZhdWx0XCJdKGluc3RhbmNlKTtcbiAgfVxuICBpZiAodHlwZW9mIFNlc3Npb24gIT09IFwidW5kZWZpbmVkXCIgJiYgU2Vzc2lvbiAhPT0gbnVsbCA/IFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSA6IHZvaWQgMCkge1xuICAgIGlmIChmbG93ICE9IG51bGwgPyBmbG93LnByaW50X3RlbXBsYXRlIDogdm9pZCAwKSB7XG4gICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93LnByaW50X3RlbXBsYXRlICsgXCI8L2Rpdj5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZsb3cgIT0gbnVsbCA/IGZsb3cuaW5zdGFuY2VfdGVtcGxhdGUgOiB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5pbnN0YW5jZV90ZW1wbGF0ZSArIFwiPC9kaXY+XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlW1wiZGVmYXVsdFwiXShpbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmIChmbG93ICE9IG51bGwgPyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlIDogdm9pZCAwKSB7XG4gICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlICsgXCI8L2Rpdj5cIjtcbiAgICB9XG4gICAgaWYgKGZvcm0gIT0gbnVsbCA/IGZvcm0uaW5zdGFuY2Vfc3R5bGUgOiB2b2lkIDApIHtcbiAgICAgIGlmIChmb3JtLmluc3RhbmNlX3N0eWxlID09PSAndGFibGUnKSB7XG4gICAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlW1wiZGVmYXVsdFwiXShpbnN0YW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlW1wiZGVmYXVsdFwiXShpbnN0YW5jZSk7XG4gICAgfVxuICB9XG59O1xuIiwiU3RlZWRvc1RhYmxlID0ge307XG5cblN0ZWVkb3NUYWJsZS5mb3JtSWQgPSBcImluc3RhbmNlZm9ybVwiO1xuXG5TdGVlZG9zVGFibGUuY2hlY2tJdGVtID0gZnVuY3Rpb24gKGZpZWxkLCBpdGVtX2luZGV4KSB7XG4gICAgdmFyIGZpZWxkT2JqID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKTtcblxuICAgIHZhciBmaWVsZFZhbCA9IFN0ZWVkb3NUYWJsZS5nZXRJdGVtTW9kYWxWYWx1ZShmaWVsZCwgaXRlbV9pbmRleCk7XG5cbiAgICB2YXIgc2ZfbmFtZSA9ICcnO1xuICAgIHZhciByZXYgPSB0cnVlO1xuICAgIGZpZWxkT2JqLnNmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoc2YpIHtcbiAgICAgICAgaWYgKHNmLnBlcm1pc3Npb24gPT0gJ2VkaXRhYmxlJykge1xuICAgICAgICAgICAgc2ZfbmFtZSA9IGZpZWxkT2JqLmNvZGUgKyBcIi5cIiArIHNmLmNvZGU7XG4gICAgICAgICAgICBpZiAoIUluc3RhbmNlTWFuYWdlci5jaGVja0Zvcm1GaWVsZFZhbHVlKCQoXCJbbmFtZT0nXCIgKyBzZl9uYW1lICsgXCInXVwiKVswXSkpIHtcbiAgICAgICAgICAgICAgICByZXYgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJldjtcbn1cblxuU3RlZWRvc1RhYmxlLnNldFRhYmxlSXRlbVZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCBpdGVtX2luZGV4LCBpdGVtX3ZhbHVlKSB7XG5cbiAgICB2YXIgdGFibGVWYWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKTtcbiAgICB0YWJsZVZhbHVlW2l0ZW1faW5kZXhdID0gaXRlbV92YWx1ZTtcbn1cblxuU3RlZWRvc1RhYmxlLmdldFRhYmxlSXRlbVZhbHVlID0gZnVuY3Rpb24gKGZpZWxkLCBpdGVtX2luZGV4KSB7XG4gICAgcmV0dXJuIFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKVtpdGVtX2luZGV4XTtcbn1cblxuU3RlZWRvc1RhYmxlLnJlbW92ZVRhYmxlSXRlbSA9IGZ1bmN0aW9uIChmaWVsZCwgaXRlbV9pbmRleCkge1xuICAgIHZhciBpdGVtX3ZhbHVlID0gU3RlZWRvc1RhYmxlLmdldFRhYmxlSXRlbVZhbHVlKGZpZWxkLCBpdGVtX2luZGV4KTtcbiAgICBpdGVtX3ZhbHVlLnJlbW92ZWQgPSB0cnVlO1xufVxuXG5TdGVlZG9zVGFibGUuc2V0VGFibGVWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUpIHtcbiAgICAkKFwidGFibGVbbmFtZT0nXCIgKyBmaWVsZCArIFwiJ11cIikudmFsKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgIH0pO1xufVxuXG5TdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHJldHVybiAkKFwidGFibGVbbmFtZT0nXCIgKyBmaWVsZCArIFwiJ11cIikudmFsKCkudmFsO1xufVxuXG5TdGVlZG9zVGFibGUuZ2V0VmFsaWRWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHZhciB2YWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKTtcblxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHZhbGlkVmFsdWUgPSBbXTtcblxuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgaWYgKCF2LnJlbW92ZWQpIHtcbiAgICAgICAgICAgIHZhbGlkVmFsdWUucHVzaCh2KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWxpZFZhbHVlO1xufVxuXG5cblN0ZWVkb3NUYWJsZS5oYW5kbGVEYXRhID0gZnVuY3Rpb24gKGZpZWxkLCB2YWx1ZXMpIHtcblxuICAgIGlmICghdmFsdWVzIHx8ICEodmFsdWVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIGZpZWxkT2JqID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKTtcblxuICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGZpZWxkT2JqLnNmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgaWYgKGYudHlwZSA9PSAndXNlcicgfHwgZi50eXBlID09ICdncm91cCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2W2YuY29kZV1cbiAgICAgICAgICAgICAgICBpZiAoZi5pc19tdWx0aXNlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMCAmJiB0eXBlb2YgKHZhbHVlWzBdKSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdltmLmNvZGVdID0gdltmLmNvZGVdLmdldFByb3BlcnR5KFwiaWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZSkgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZbZi5jb2RlXSA9IHZbZi5jb2RlXS5pZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZi50eXBlID09ICdkYXRlVGltZScpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2W2YuY29kZV1cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB2YWx1ZS5zcGxpdChcIlRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDAgPSB0WzBdLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0MSA9IHRbMV0uc3BsaXQoXCI6XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gdDBbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9IHQwWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IHQwWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSB0MVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSB0MVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2W2YuY29kZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWVzO1xufVxuXG5TdGVlZG9zVGFibGUuZ2V0RmllbGQgPSBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICB2YXIgaW5zdGFuY2VGaWVsZHMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGaWVsZHMoKTtcbiAgICBpZiAoIWluc3RhbmNlRmllbGRzKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgZmllbGRPYmogPSBpbnN0YW5jZUZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBmaWVsZCk7XG5cbiAgICByZXR1cm4gZmllbGRPYmo7XG59XG5cblxuU3RlZWRvc1RhYmxlLmdldE1vZGFsRGF0YSA9IGZ1bmN0aW9uIChmaWVsZCwgaW5kZXgpIHtcblxuICAgIHZhciBkYXRhID0ge307XG5cbiAgICB2YXIgZmllbGRPYmogPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpO1xuXG4gICAgaWYgKCFmaWVsZE9iaikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGF0YS5maWVsZCA9IGZpZWxkT2JqO1xuXG4gICAgZGF0YS5maWVsZC5mb3JtdWxhID0gRm9ybV9mb3JtdWxhLmdldEZvcm11bGFGaWVsZFZhcmlhYmxlKFwiRm9ybV9mb3JtdWxhLmZpZWxkX3ZhbHVlc1wiLCBmaWVsZE9iai5zZmllbGRzKTtcblxuICAgIGRhdGEudmFsdWUgPSB7fTtcblxuICAgIGRhdGEudmFsdWVbZmllbGRdID0gU3RlZWRvc1RhYmxlLmdldFRhYmxlSXRlbVZhbHVlKGZpZWxkLCBpbmRleCk7XG5cbiAgICBkYXRhLmluZGV4ID0gaW5kZXg7XG5cbiAgICByZXR1cm4gZGF0YTtcbn1cblxuXG5cblN0ZWVkb3NUYWJsZS5nZXRJdGVtTW9kYWxWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCwgaXRlbV9pbmRleCkge1xuXG4gICAgaWYgKCFBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwic3RlZWRvc190YWJsZV9tb2RhbF9cIiArIGZpZWxkICsgXCJfXCIgKyBpdGVtX2luZGV4KSkge1xuICAgICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICB2YXIgaXRlbV92YWx1ZSA9IEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJzdGVlZG9zX3RhYmxlX21vZGFsX1wiICsgZmllbGQgKyBcIl9cIiArIGl0ZW1faW5kZXgpLmluc2VydERvY1tmaWVsZF07XG4gICAgcmV0dXJuIGl0ZW1fdmFsdWU7XG59XG5cblxuU3RlZWRvc1RhYmxlLmFkZEl0ZW0gPSBmdW5jdGlvbiAoZmllbGQsIGluZGV4LCBfaXRlbV92YWx1ZSkge1xuICAgIHZhciBrZXlzID0gU3RlZWRvc1RhYmxlLmdldEtleXMoZmllbGQpO1xuICAgIHZhciBpdGVtX3ZhbHVlID0gX2l0ZW1fdmFsdWUgfHwgU3RlZWRvc1RhYmxlLmdldEl0ZW1Nb2RhbFZhbHVlKGZpZWxkLCBpbmRleCk7XG4gICAgJChcInRib2R5W25hbWU9J1wiICsgZmllbGQgKyBcIlRib2R5J11cIikuYXBwZW5kKFN0ZWVkb3NUYWJsZS5nZXRUcihrZXlzLCBpdGVtX3ZhbHVlLCBpbmRleCwgZmllbGQsIHRydWUpKVxuXG59XG5cblN0ZWVkb3NUYWJsZS51cGRhdGVJdGVtID0gZnVuY3Rpb24gKGZpZWxkLCBpbmRleCwgX2l0ZW1fdmFsdWUpIHtcblxuICAgIHZhciBpdGVtID0gJChcInRyW25hbWU9J1wiICsgZmllbGQgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIiddXCIpO1xuXG4gICAgdmFyIGl0ZW1fdmFsdWUgPSBfaXRlbV92YWx1ZSB8fCBTdGVlZG9zVGFibGUuZ2V0SXRlbU1vZGFsVmFsdWUoZmllbGQsIGluZGV4KTtcblxuICAgIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIga2V5cyA9IFN0ZWVkb3NUYWJsZS5nZXRLZXlzKGZpZWxkKTtcbiAgICAgICAgdmFyIHRkcyA9IFN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZChmaWVsZCwgaW5kZXgpO1xuXG4gICAgICAgIHZhciBzZmllbGRzID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKS5zZmllbGRzO1xuXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgc2ZpZWxkID0gc2ZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBrZXkpO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtX3ZhbHVlW2tleV07XG5cbiAgICAgICAgICAgIHRkcyA9IHRkcyArIFN0ZWVkb3NUYWJsZS5nZXRUZChzZmllbGQsIGluZGV4LCB2YWx1ZSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXRlbS5lbXB0eSgpO1xuXG4gICAgICAgIGl0ZW0uYXBwZW5kKHRkcyk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIFN0ZWVkb3NUYWJsZS5hZGRJdGVtKGZpZWxkLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKSkge1xuXG4gICAgICAgIFN0ZWVkb3NUYWJsZS5zZXRUYWJsZUl0ZW1WYWx1ZShmaWVsZCwgaW5kZXgsIGl0ZW1fdmFsdWUpO1xuXG4gICAgICAgIC8vU3RlZWRvc1RhYmxlLnZhbHVlSGFzaFtmaWVsZF1baW5kZXhdID0gaXRlbV92YWx1ZTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vU3RlZWRvc1RhYmxlLnZhbHVlSGFzaFtmaWVsZF0gPSBbaXRlbV92YWx1ZV07XG5cbiAgICAgICAgU3RlZWRvc1RhYmxlLnNldFRhYmxlVmFsdWUoZmllbGQsIFtpdGVtX3ZhbHVlXSlcblxuICAgIH1cblxuICAgIC8v5omn6KGM5Li76KGo5YWs5byP6K6h566XXG4gICAgSW5zdGFuY2VNYW5hZ2VyLnJ1bkZvcm11bGEoZmllbGQpO1xuXG59XG5cblN0ZWVkb3NUYWJsZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24gKGZpZWxkLCBpbmRleCkge1xuXG4gICAgJChcInRyW25hbWU9J1wiICsgZmllbGQgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIiddXCIpLmhpZGUoKTtcblxuICAgIFN0ZWVkb3NUYWJsZS5yZW1vdmVUYWJsZUl0ZW0oZmllbGQsIGluZGV4KTtcblxuICAgIEluc3RhbmNlTWFuYWdlci5ydW5Gb3JtdWxhKGZpZWxkKTtcbn1cblxuU3RlZWRvc1RhYmxlLnNob3dNb2RhbCA9IGZ1bmN0aW9uIChmaWVsZCwgaW5kZXgsIG1ldGhvZCkge1xuXG5cbiAgICB2YXIgbW9kYWxEYXRhID0gU3RlZWRvc1RhYmxlLmdldE1vZGFsRGF0YShmaWVsZCwgaW5kZXgpO1xuXG4gICAgbW9kYWxEYXRhLm1ldGhvZCA9IG1ldGhvZDtcblxuICAgIE1vZGFsLnNob3coXCJzdGVlZG9zVGFibGVNb2RhbFwiLCBtb2RhbERhdGEpO1xuXG59XG5cblN0ZWVkb3NUYWJsZS5nZXRLZXlzID0gZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgaWYgKCFBdXRvRm9ybS5nZXRDdXJyZW50RGF0YUZvckZvcm0oU3RlZWRvc1RhYmxlLmZvcm1JZCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHZhciBzcyA9IEF1dG9Gb3JtLmdldEZvcm1TY2hlbWEoU3RlZWRvc1RhYmxlLmZvcm1JZCk7XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHNzLnNjaGVtYShmaWVsZCArIFwiLiRcIikudHlwZSA9PT0gT2JqZWN0KSB7XG4gICAgICAgIGtleXMgPSBzcy5vYmplY3RLZXlzKFNpbXBsZVNjaGVtYS5fbWFrZUdlbmVyaWMoZmllbGQpICsgJy4kJylcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcblxufVxuXG5TdGVlZG9zVGFibGUuZ2V0VGhlYWQgPSBmdW5jdGlvbiAoZmllbGQsIGVkaXRhYmxlKSB7XG5cbiAgICB2YXIgZmllbGRPYmogPSBmaWVsZDtcbiAgICBpZiAoIV8uaXNPYmplY3QoZmllbGQpKVxuICAgICAgICBmaWVsZE9iaiA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCk7XG5cbiAgICBpZiAoIWZpZWxkT2JqKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgdGhlYWQgPSAnJyxcbiAgICAgICAgdHJzID0gJycsXG4gICAgICAgIGxhYmVsID0gJycsXG4gICAgICAgIHdpZHRoID0gMTAwO1xuXG4gICAgaWYgKGVkaXRhYmxlKSB7XG4gICAgICAgIC8vIHRycyA9IFwiPHRoIGNsYXNzPSdyZW1vdmVkJz48L3RoPlwiXG4gICAgICAgIHRycyA9IFwiXCJcbiAgICB9XG5cbiAgICB2YXIgc2ZpZWxkcyA9IGZpZWxkT2JqLnNmaWVsZHM7XG5cbiAgICBpZiAoIXNmaWVsZHMpIHtcbiAgICAgICAgcmV0dXJuIHRoZWFkO1xuICAgIH1cblxuICAgIHZhciBzZl9sZW5ndGggPSBzZmllbGRzLmxlbmd0aDtcblxuICAgIGlmIChzZl9sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciB3aWRlX2ZpZWxkcyA9IHNmaWVsZHMuZmlsdGVyUHJvcGVydHkoXCJpc193aWRlXCIsIHRydWUpO1xuXG4gICAgICAgIHdpZHRoID0gMTAwIC8gKHNmX2xlbmd0aCArIHdpZGVfZmllbGRzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgc2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChzZiwgaW5kZXgpIHtcblxuICAgICAgICBsYWJlbCA9IChzZi5uYW1lICE9IG51bGwgJiYgc2YubmFtZS5sZW5ndGggPiAwKSA/IHNmLm5hbWUgOiBzZi5jb2RlO1xuXG4gICAgICAgIHRycyA9IHRycyArIFwiPHRkIFwiOyAvLyBub3dyYXA9J25vd3JhcCdcblxuICAgICAgICB0cnMgPSB0cnMgKyBcIiBjbGFzcz0ndGl0bGUgXCIgKyBzZi50eXBlICsgXCInXCI7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IChzZl9sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgaWYgKHNmLmlzX3dpZGUpIHtcbiAgICAgICAgICAgICAgICB0cnMgPSB0cnMgKyBcInN0eWxlPSd3aWR0aDpcIiArIHdpZHRoICogMiArIFwiJSdcIlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnMgPSB0cnMgKyBcInN0eWxlPSd3aWR0aDpcIiArIHdpZHRoICsgXCIlJ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0cnMgPSB0cnMgKyBcIj5cIiArIGxhYmVsICsgXCI8L3RkPlwiXG4gICAgfSk7XG5cbiAgICB0aGVhZCA9ICc8dHI+JyArIHRycyArICc8L3RyPic7XG5cbiAgICByZXR1cm4gdGhlYWQ7XG59XG5cblN0ZWVkb3NUYWJsZS5nZXRUYm9keSA9IGZ1bmN0aW9uIChrZXlzLCBmaWVsZCwgdmFsdWVzLCBlZGl0YWJsZSwgc2ZpZWxkc0VkaXRhYmxlKSB7XG4gICAgdmFyIHRib2R5ID0gXCJcIjtcblxuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICB0Ym9keSA9IHRib2R5ICsgU3RlZWRvc1RhYmxlLmdldFRyKGtleXMsIHZhbHVlLCBpbmRleCwgZmllbGQsIGVkaXRhYmxlLCBzZmllbGRzRWRpdGFibGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGJvZHk7XG59XG5cblN0ZWVkb3NUYWJsZS5nZXRUciA9IGZ1bmN0aW9uIChrZXlzLCBpdGVtX3ZhbHVlLCBpbmRleCwgZmllbGQsIGVkaXRhYmxlLCBzZmllbGRzRWRpdGFibGUpIHtcblxuICAgIHZhciBmaWVsZE9iaiA9IGZpZWxkO1xuICAgIGlmICghXy5pc09iamVjdChmaWVsZCkpXG4gICAgICAgIGZpZWxkT2JqID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKTtcblxuICAgIHZhciB0ciA9IFwiPHRyIGlkPSdcIiArIGZpZWxkT2JqLmNvZGUgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIicgbmFtZT0nXCIgKyBmaWVsZE9iai5jb2RlICsgXCJfaXRlbV9cIiArIGluZGV4ICsgXCInIGRhdGEtaW5kZXg9J1wiICsgaW5kZXggKyBcIidcIlxuXG4gICAgaWYgKGVkaXRhYmxlIHx8IHNmaWVsZHNFZGl0YWJsZSkge1xuICAgICAgICB0ciA9IHRyICsgXCInIGNsYXNzPSdpdGVtIGVkaXQnXCJcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgICAgICAgICB0ciA9IHRyICsgXCIgY2xhc3M9J2l0ZW0gaXRlbS1yZWFkb25seSdcIlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHIgPSB0ciArIFwiIGNsYXNzPSdpdGVtICdcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1fdmFsdWUucmVtb3ZlZCkge1xuICAgICAgICB0ciA9IHRyICsgXCIgc3R5bGU9J2Rpc3BsYXk6bm9uZScgXCI7XG4gICAgfVxuXG4gICAgdHIgPSB0ciArIFwiJz5cIjtcblxuICAgIHZhciB0ZHMgPSBcIlwiO1xuXG4gICAgaWYgKGVkaXRhYmxlKSB7XG4gICAgICAgIHRkcyA9IFN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZChmaWVsZE9iai5jb2RlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHNmaWVsZHMgPSBmaWVsZE9iai5zZmllbGRzO1xuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHNmaWVsZCA9IHNmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwga2V5KTtcblxuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtX3ZhbHVlW2tleV07XG5cbiAgICAgICAgdGRzID0gdGRzICsgU3RlZWRvc1RhYmxlLmdldFRkKHNmaWVsZCwgaW5kZXgsIHZhbHVlKTtcblxuICAgIH0pO1xuXG4gICAgdHIgPSB0ciArIHRkcyArIFwiPC90cj5cIjtcbiAgICByZXR1cm4gdHI7XG59XG5cblN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZCA9IGZ1bmN0aW9uIChmaWVsZCwgaW5kZXgpIHtcbiAgICAvLyByZXR1cm4gXCI8dGQgY2xhc3M9J3N0ZWVkb3NUYWJsZS1pdGVtLXJlbW92ZSByZW1vdmVkJyBkYXRhLWluZGV4PSdcIiArIGluZGV4ICsgXCInPjxpIGNsYXNzPSdmYSBmYS10aW1lcycgYXJpYS1oaWRkZW49J3RydWUnPjwvdGQ+XCI7XG4gICAgcmV0dXJuIFwiXCJcbn1cblxuU3RlZWRvc1RhYmxlLmdldFRkID0gZnVuY3Rpb24gKGZpZWxkLCBpbmRleCwgdmFsdWUpIHtcbiAgICB2YXIgdGQgPSBcIjx0ZCBcIjtcblxuICAgIHRkID0gdGQgKyBcIiBjbGFzcz0nc3RlZWRvc1RhYmxlLWl0ZW0tZmllbGQgXCIgKyBmaWVsZC50eXBlICsgXCInIFwiO1xuXG4gICAgdmFyIHRkX3ZhbHVlID0gXCJcIjtcblxuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgICAgdGRfdmFsdWUgPSBTdGVlZG9zVGFibGUuZ2V0VERWYWx1ZShmaWVsZCwgdmFsdWUpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxuXG4gICAgICAgIHV0Y09mZnNldCA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS51dGNPZmZzZXRcblxuICAgICAgICB0ZF92YWx1ZSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSh2YWx1ZSwgZmllbGQsIGxvY2FsZSwgdXRjT2Zmc2V0KVxuICAgIH1cblxuICAgIHRkID0gdGQgKyBcIiBkYXRhLWluZGV4PSdcIiArIGluZGV4ICsgXCInPlwiICsgdGRfdmFsdWUgKyBcIjwvdGQ+XCJcblxuICAgIHJldHVybiB0ZDtcbn1cblxuXG5TdGVlZG9zVGFibGUuZ2V0VERWYWx1ZSA9IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUpIHtcbiAgICB2YXIgdGRfdmFsdWUgPSBcIlwiO1xuICAgIGlmICghZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHRkX3ZhbHVlXG4gICAgfVxuICAgIHRyeSB7XG5cbiAgICAgICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICd1c2VyJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmlzX211bHRpc2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiAodmFsdWVbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhU3BhY2VVc2Vycyh2YWx1ZSkuZ2V0UHJvcGVydHkoXCJuYW1lXCIpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhU3BhY2VVc2Vycyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB1ID8gdS5uYW1lIDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2dyb3VwJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmlzX211bHRpc2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiAodmFsdWVbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhT3JnYW5pemF0aW9ucyh2YWx1ZSkuZ2V0UHJvcGVydHkoXCJuYW1lXCIpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhT3JnYW5pemF0aW9uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IG8gPyBvLm5hbWUgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF95ZXNcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZSA/IFwiPGEgaHJlZj0nbWFpbHRvOlwiICsgdmFsdWUgKyBcIic+XCIgKyB2YWx1ZSArIFwiPC9hPlwiIDogXCJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3VybCc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiaHR0cFwiKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCI8YSBocmVmPSdcIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFwiPGEgaHJlZj0nJyB0YXJnZXQ9J19ibGFuayc+XCIgKyB2YWx1ZSArIFwiPC9hPlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFwiPGEgaHJlZj0naHR0cDovL1wiICsgZW5jb2RlVVJJKHZhbHVlKSArIFwiJyB0YXJnZXQ9J19ibGFuayc+aHR0cDovL1wiICsgdmFsdWUgKyBcIjwvYT5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICAgICAgICAgICAgdGRfdmFsdWUgPSAnKioqKioqJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHZhbHVlLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgPSB0WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0WzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IHRbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gJC5mb3JtYXQuZGF0ZSh2YWx1ZSwgJ3l5eXktTU0tZGQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXRlVGltZSc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gMTYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdmFsdWUuc3BsaXQoXCJUXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQwID0gdFswXS5zcGxpdChcIi1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDEgPSB0WzFdLnNwbGl0KFwiOlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IHQwWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0MFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSB0MFsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJzID0gdDFbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gdDFbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9ICQuZm9ybWF0LmRhdGUodmFsdWUsICd5eXl5LU1NLWRkIEhIOm1tJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFN0ZWVkb3MubnVtYmVyVG9TdHJpbmcodmFsdWUsIGZpZWxkLmRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnb2RhdGEnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuaXNfbXVsdGlzZWxlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXy5wbHVjayh2YWx1ZSwgJ0BsYWJlbCcpLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWVbJ0BsYWJlbCddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUgPyB2YWx1ZSA6ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlO1xuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHRkX3ZhbHVlO1xufTtcblxuaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgIEF1dG9Gb3JtLmFkZElucHV0VHlwZShcInRhYmxlXCIsIHtcbiAgICAgICAgdGVtcGxhdGU6IFwiYWZUYWJsZVwiLFxuICAgICAgICB2YWx1ZU91dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmRhdGEoXCJzY2hlbWFLZXlcIik7XG4gICAgICAgICAgICByZXR1cm4gU3RlZWRvc1RhYmxlLmdldFZhbGlkVmFsdWUobmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbHVlQ29udmVydGVyczoge1xuICAgICAgICAgICAgXCJzdHJpbmdBcnJheVwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9TdHJpbmdBcnJheSxcbiAgICAgICAgICAgIFwibnVtYmVyXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb051bWJlcixcbiAgICAgICAgICAgIFwibnVtZXJBcnJheVwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9OdW1iZXJBcnJheSxcbiAgICAgICAgICAgIFwiYm9vbGVhblwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9Cb29sZWFuLFxuICAgICAgICAgICAgXCJib29sZWFuQXJyYXlcIjogQXV0b0Zvcm0udmFsdWVDb252ZXJ0ZXJzLnN0cmluZ1RvQm9vbGVhbkFycmF5LFxuICAgICAgICAgICAgXCJkYXRlXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0RhdGUsXG4gICAgICAgICAgICBcImRhdGVBcnJheVwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9EYXRlQXJyYXlcbiAgICAgICAgfSxcbiAgICAgICAgY29udGV4dEFkanVzdDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5hdHRzLm1heGxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnRleHQubWF4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXR0cy5tYXhsZW5ndGggPSBjb250ZXh0Lm1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBUZW1wbGF0ZS5hZlRhYmxlLmV2ZW50cyh7XG4gICAgICAgICd0YXAgLnN0ZWVkb3MtdGFibGUgLnN0ZWVkb3NUYWJsZS1pdGVtLWFkZCwuYWRkLWl0ZW0tdHInOiBmdW5jdGlvbiAoZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRlbXBsYXRlLmRhdGEubmFtZTtcblxuICAgICAgICAgICAgdmFyIHRhYmxlVmFsdWUgPSBTdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZShuYW1lKTtcblxuICAgICAgICAgICAgdmFyIG5ld19pdGVtX2luZGV4ID0gdGFibGVWYWx1ZSA/IHRhYmxlVmFsdWUubGVuZ3RoIDogMDtcblxuICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnNob3dNb2RhbChuYW1lLCBuZXdfaXRlbV9pbmRleCwgXCJhZGRcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ3RhcCAuc3RlZWRvcy10YWJsZSAuc3RlZWRvc1RhYmxlLWl0ZW0tZmllbGQnOiBmdW5jdGlvbiAoZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgICAgICAgICBpZiAodGVtcGxhdGUuZGF0YS5hdHRzLmVkaXRhYmxlIHx8IHRlbXBsYXRlLmRhdGEuYXR0cy5zZmllbGRzRWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSB0ZW1wbGF0ZS5kYXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xuICAgICAgICAgICAgICAgIFN0ZWVkb3NUYWJsZS5zaG93TW9kYWwoZmllbGQsIGluZGV4LCBcImVkaXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ3RhcCAuc3RlZWRvcy10YWJsZSAuc3RlZWRvc1RhYmxlLWl0ZW0tcmVtb3ZlJzogZnVuY3Rpb24gKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkID0gdGVtcGxhdGUuZGF0YS5uYW1lO1xuICAgICAgICAgICAgdmFyIGl0ZW1faW5kZXggPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXg7XG4gICAgICAgICAgICBTZXNzaW9uLnNldChcImluc3RhbmNlX2NoYW5nZVwiLCB0cnVlKTtcbiAgICAgICAgICAgIFN0ZWVkb3NUYWJsZS5yZW1vdmVJdGVtKGZpZWxkLCBpdGVtX2luZGV4KTtcbiAgICAgICAgfSxcblxuICAgICAgICAndGFwIC5zdGVlZG9zLXRhYmxlIC5pdGVtLXJlYWRvbmx5JzogZnVuY3Rpb24gKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZS5kYXRhLmF0dHMuZWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSB0ZW1wbGF0ZS5kYXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xuICAgICAgICAgICAgICAgIFN0ZWVkb3NUYWJsZS5zaG93TW9kYWwoZmllbGQsIGluZGV4LCBcInJlYWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuXG5cbiAgICBUZW1wbGF0ZS5hZlRhYmxlLnJlbmRlcmVkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBmaWVsZCA9IHRoaXMuZGF0YS5uYW1lO1xuXG4gICAgICAgIHZhciBzZmllbGRzRWRpdGFibGUgPSB0aGlzLmRhdGEuYXR0cy5zZmllbGRzRWRpdGFibGU7XG5cbiAgICAgICAgdmFyIGtleXMgPSBTdGVlZG9zVGFibGUuZ2V0S2V5cyhmaWVsZCk7XG4gICAgICAgIHZhciB2YWxpZFZhbHVlID0gU3RlZWRvc1RhYmxlLmhhbmRsZURhdGEoZmllbGQsIHRoaXMuZGF0YS52YWx1ZSk7XG4gICAgICAgIFN0ZWVkb3NUYWJsZS5zZXRUYWJsZVZhbHVlKGZpZWxkLCB2YWxpZFZhbHVlKTtcblxuICAgICAgICAkKFwidGhlYWRbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGhlYWQnXVwiKS5odG1sKFN0ZWVkb3NUYWJsZS5nZXRUaGVhZChmaWVsZCwgdGhpcy5kYXRhLmF0dHMuZWRpdGFibGUpKTtcblxuICAgICAgICAkKFwidGJvZHlbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGJvZHknXVwiKS5odG1sKFN0ZWVkb3NUYWJsZS5nZXRUYm9keShrZXlzLCBmaWVsZCwgU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUoZmllbGQpLCB0aGlzLmRhdGEuYXR0cy5lZGl0YWJsZSwgc2ZpZWxkc0VkaXRhYmxlKSk7XG5cbiAgICAgICAgc3RyID0gdChcInN0ZWVkb3NfdGFibGVfYWRkX2l0ZW1cIik7XG4gICAgICAgIGFkZEl0ZW1UciA9IFwiPHRyIGNsYXNzPSdhZGQtaXRlbS10cic+PHRkIGNvbHNwYW49J1wiICsga2V5cy5sZW5ndGggKyBcIic+PGkgY2xhc3M9J2lvbiBpb24tcGx1cy1yb3VuZCc+PC9pPlwiICsgc3RyICsgXCI8L3RkPjwvdHI+XCI7XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5hdHRzLmVkaXRhYmxlKSB7XG4gICAgICAgICAgICAkKFwidGZvb3RbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGZvb3QnXVwiKS5hcHBlbmQoYWRkSXRlbVRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXV0b3J1bihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IFRlbXBsYXRlLmN1cnJlbnREYXRhKCk7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSBkYXRhLm5hbWU7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFN0ZWVkb3NUYWJsZS5nZXRLZXlzKGZpZWxkKTtcbiAgICAgICAgICAgIHZhciB2YWxpZFZhbHVlID0gU3RlZWRvc1RhYmxlLmhhbmRsZURhdGEoZmllbGQsIGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnNldFRhYmxlVmFsdWUoZmllbGQsIHZhbGlkVmFsdWUpO1xuICAgICAgICAgICAgJChcInRib2R5W25hbWU9J1wiICsgZmllbGQgKyBcIlRib2R5J11cIikuaHRtbChTdGVlZG9zVGFibGUuZ2V0VGJvZHkoa2V5cywgZmllbGQsIFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKSwgZGF0YS5hdHRzLmVkaXRhYmxlLCBzZmllbGRzRWRpdGFibGUpKTtcbiAgICAgICAgfSlcbiAgICB9O1xufSIsIkltYWdlU2lnbi5oZWxwZXJzID1cblx0c3BhY2VVc2VyU2lnbjogKHVzZXJJZCktPlxuXHRcdHNwYWNlID0gXCJcIlxuXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXG5cdFx0XHRzcGFjZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5zcGFjZVxuXHRcdGVsc2Vcblx0XHRcdHNwYWNlID0gU2Vzc2lvbi5nZXQoXCJzcGFjZUlkXCIpXG5cblx0XHRzcGFjZVVzZXJTaWduID0gZGIuc3BhY2VfdXNlcl9zaWducy5maW5kT25lKHtzcGFjZTogc3BhY2UsIHVzZXI6IHVzZXJJZH0pO1xuXHRcdHJldHVybiBzcGFjZVVzZXJTaWduXG5cblx0aW1hZ2VVUkw6ICh1c2VySWQpLT5cblxuXHRcdHNwYWNlVXNlclNpZ24gPSBJbWFnZVNpZ24uaGVscGVycy5zcGFjZVVzZXJTaWduKHVzZXJJZCk7XG5cblx0XHRhYnNvbHV0ZSA9IGZhbHNlXG5cblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcblx0XHRcdGFic29sdXRlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmFic29sdXRlXG5cblx0XHRpZiBzcGFjZVVzZXJTaWduPy5zaWduXG5cdFx0XHRpZiBhYnNvbHV0ZVxuXHRcdFx0XHRyZXR1cm4gTWV0ZW9yLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gU3RlZWRvcy5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9hdmF0YXJzL1wiICsgc3BhY2VVc2VyU2lnbi5zaWduKTtcbiIsIkltYWdlU2lnbi5oZWxwZXJzID0ge1xuICBzcGFjZVVzZXJTaWduOiBmdW5jdGlvbih1c2VySWQpIHtcbiAgICB2YXIgc3BhY2UsIHNwYWNlVXNlclNpZ247XG4gICAgc3BhY2UgPSBcIlwiO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIHNwYWNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnNwYWNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzcGFjZSA9IFNlc3Npb24uZ2V0KFwic3BhY2VJZFwiKTtcbiAgICB9XG4gICAgc3BhY2VVc2VyU2lnbiA9IGRiLnNwYWNlX3VzZXJfc2lnbnMuZmluZE9uZSh7XG4gICAgICBzcGFjZTogc3BhY2UsXG4gICAgICB1c2VyOiB1c2VySWRcbiAgICB9KTtcbiAgICByZXR1cm4gc3BhY2VVc2VyU2lnbjtcbiAgfSxcbiAgaW1hZ2VVUkw6IGZ1bmN0aW9uKHVzZXJJZCkge1xuICAgIHZhciBhYnNvbHV0ZSwgc3BhY2VVc2VyU2lnbjtcbiAgICBzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbih1c2VySWQpO1xuICAgIGFic29sdXRlID0gZmFsc2U7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgYWJzb2x1dGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuYWJzb2x1dGU7XG4gICAgfVxuICAgIGlmIChzcGFjZVVzZXJTaWduICE9IG51bGwgPyBzcGFjZVVzZXJTaWduLnNpZ24gOiB2b2lkIDApIHtcbiAgICAgIGlmIChhYnNvbHV0ZSkge1xuICAgICAgICByZXR1cm4gTWV0ZW9yLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJhcGkvZmlsZXMvYXZhdGFycy9cIiArIHNwYWNlVXNlclNpZ24uc2lnbik7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIiwiVHJhY2VzSGFuZGxlci5oZWxwZXJzID1cblx0c2hvd1NpZ25JbWFnZTogKGhhbmRsZXIsIGlzX2ZpbmlzaGVkLCBqdWRnZSkgLT5cblx0XHRpZiAhaXNfZmluaXNoZWRcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdGlmIFsncmV0dXJuZWQnLCAndGVybWluYXRlZCcsICdyZXRyaWV2ZWQnXS5pbmNsdWRlcyhqdWRnZSlcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdHNwYWNlVXNlclNpZ24gPSBJbWFnZVNpZ24uaGVscGVycy5zcGFjZVVzZXJTaWduKGhhbmRsZXIpXG5cblx0XHRpZiBzcGFjZVVzZXJTaWduPy5zaWduXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBmYWxzZVxuXG5cdG9iamVjdFVybDogKG9iamVjdF9uYW1lLCByZWNvcmRfaWQsIGFwcF9pZCktPlxuXHRcdHJldHVybiBDcmVhdG9yLmdldE9iamVjdFVybChvYmplY3RfbmFtZSwgcmVjb3JkX2lkLCBhcHBfaWQpIiwiVHJhY2VzSGFuZGxlci5oZWxwZXJzID0ge1xuICBzaG93U2lnbkltYWdlOiBmdW5jdGlvbihoYW5kbGVyLCBpc19maW5pc2hlZCwganVkZ2UpIHtcbiAgICB2YXIgc3BhY2VVc2VyU2lnbjtcbiAgICBpZiAoIWlzX2ZpbmlzaGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChbJ3JldHVybmVkJywgJ3Rlcm1pbmF0ZWQnLCAncmV0cmlldmVkJ10uaW5jbHVkZXMoanVkZ2UpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNwYWNlVXNlclNpZ24gPSBJbWFnZVNpZ24uaGVscGVycy5zcGFjZVVzZXJTaWduKGhhbmRsZXIpO1xuICAgIGlmIChzcGFjZVVzZXJTaWduICE9IG51bGwgPyBzcGFjZVVzZXJTaWduLnNpZ24gOiB2b2lkIDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBvYmplY3RVcmw6IGZ1bmN0aW9uKG9iamVjdF9uYW1lLCByZWNvcmRfaWQsIGFwcF9pZCkge1xuICAgIHJldHVybiBDcmVhdG9yLmdldE9iamVjdFVybChvYmplY3RfbmFtZSwgcmVjb3JkX2lkLCBhcHBfaWQpO1xuICB9XG59O1xuIiwiSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycyA9XG5cdGFwcGxpY2FudENvbnRleHQ6IC0+XG5cdFx0c3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRcdGRhdGEgPSB7XG5cdFx0XHRuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG5cdFx0XHRhdHRzOiB7bmFtZTogJ2luc19hcHBsaWNhbnQnLCBpZDogJ2luc19hcHBsaWNhbnQnLCBjbGFzczogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnfSxcblx0XHRcdHZhbHVlOiBzdGVlZG9zX2luc3RhbmNlLmFwcGxpY2FudF9uYW1lXG5cdFx0fVxuXHRcdGlmIG5vdCBzdGVlZG9zX2luc3RhbmNlIHx8IHN0ZWVkb3NfaW5zdGFuY2Uuc3RhdGUgIT0gXCJkcmFmdFwiXG5cdFx0XHRkYXRhLmF0dHMuZGlzYWJsZWQgPSB0cnVlXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0aW5zdGFuY2VJZDogLT5cblx0XHRyZXR1cm4gJ2luc3RhbmNlZm9ybSc7I1wiaW5zdGFuY2VfXCIgKyBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIik7XG5cblx0Zm9ybV90eXBlczogLT5cblx0XHRpZiBBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KClcblx0XHRcdHJldHVybiAnZGlzYWJsZWQnO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiAnbWV0aG9kJztcblxuXHRzdGVlZG9zX2Zvcm06IC0+XG5cdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcblx0XHRpZiBmb3JtX3ZlcnNpb25cblx0XHRcdHJldHVybiBmb3JtX3ZlcnNpb25cblxuXHRpbm5lcnN1YmZvcm1Db250ZXh0OiAob2JqKS0+XG5cdFx0ZG9jX3ZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcblx0XHRvYmpbXCJ0YWJsZVZhbHVlc1wiXSA9IGlmIGRvY192YWx1ZXMgdGhlbiBkb2NfdmFsdWVzW29iai5jb2RlXSBlbHNlIFtdXG5cdFx0b2JqW1wiZm9ybUlkXCJdID0gXCJpbnN0YW5jZWZvcm1cIjtcblx0XHRyZXR1cm4gb2JqO1xuXG5cdGluc3RhbmNlOiAtPlxuXHRcdFNlc3Npb24uZ2V0KFwiY2hhbmdlX2RhdGVcIilcblx0XHRpZiAoU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKVxuXHRcdFx0c3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRcdFx0cmV0dXJuIHN0ZWVkb3NfaW5zdGFuY2U7XG5cblx0ZW1wdHk6ICh2YWwpIC0+XG5cdFx0aWYgdmFsXG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR1bmVtcHR5OiAodmFsKSAtPlxuXHRcdGlmIHZhbFxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdGVxdWFsczogKGEsIGIpIC0+XG5cdFx0cmV0dXJuIChhID09IGIpXG5cblx0dW5lcXVhbHM6IChhLCBiKSAtPlxuXHRcdHJldHVybiAhKGEgPT0gYilcblxuXHRpbmNsdWRlczogKGEsIGIpIC0+XG5cdFx0cmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcblxuXHRpbmNsdWRlOiAoYSwgYikgLT5cblx0XHRyZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xuXG5cdGZpZWxkczogLT5cblx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuXHRcdGlmIGZvcm1fdmVyc2lvblxuXHRcdFx0cmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYShmb3JtX3ZlcnNpb24pKTtcblxuXHRmb3JtYXREYXRlOiAoZGF0ZSwgb3B0aW9ucyktPlxuXHRcdGlmICFkYXRlXG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0XHRpZiBvcHRpb25zICYmIHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJ1xuXHRcdFx0b3B0aW9ucyA9IEpTT04ucGFyc2Uob3B0aW9ucyk7XG5cblx0XHRpZiAhb3B0aW9ucy5mb3JtYXRcblx0XHRcdG9wdGlvbnMgPSB7Zm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIn1cblxuXHRcdHJldHVybiBtb21lbnQoZGF0ZSkuZm9ybWF0KG9wdGlvbnMuZm9ybWF0KTtcblxuXHR0cmFjZXM6IC0+XG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXG5cdFx0XHRzdGVlZG9zRGF0YSA9IFRlbXBsYXRlLmluc3RhbmNlKCk/LnZpZXc/LnRlbXBsYXRlPy5zdGVlZG9zRGF0YVxuXHRcdFx0aW5zdGFuY2UgPSBzdGVlZG9zRGF0YT8uaW5zdGFuY2Vcblx0XHRcdGZsb3cgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0Rmxvd1ZlcnNpb24oaW5zdGFuY2UpO1xuXHRcdFx0bG9jYWxlID0gc3RlZWRvc0RhdGE/LmxvY2FsZVxuXHRcdFx0aWYgbG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xuXHRcdFx0XHRsb2NhbGUgPSBcInpoLUNOXCJcblx0XHRlbHNlXG5cdFx0XHRpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG5cdFx0XHRmbG93ID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRmxvd1ZlcnNpb24oKVxuXG5cdFx0XHRsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpXG5cblx0XHRpZiAhaW5zdGFuY2UgfHwgIWZsb3dcblx0XHRcdHJldHVybiB7fTtcblxuXHRcdHN0ZXBzID0gZmxvdy5zdGVwcztcblxuXHRcdHRyYWNlcyA9IHt9O1xuXG5cdFx0aW5zdGFuY2UudHJhY2VzPy5mb3JFYWNoICh0cmFjZSktPlxuXHRcdFx0c3RlcCA9IHN0ZXBzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgdHJhY2Uuc3RlcClcblxuXHRcdFx0YXBwcm92ZXMgPSBbXVxuXG5cdFx0XHR0cmFjZS5hcHByb3Zlcz8uZm9yRWFjaCAoYXBwcm92ZSkgLT5cblx0XHRcdFx0aWYgdHJhY2UuaXNfZmluaXNoZWQgPT0gdHJ1ZVxuIyDlt7Lnu5PmnZ/nmoTmmL7npLrkuLrmoLjlh4Yv6amz5ZueL+WPlua2iOeUs+ivt1xuXHRcdFx0XHRcdGlmIGFwcHJvdmUuanVkZ2UgPT0gJ2FwcHJvdmVkJ1xuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSBhcHByb3ZlZFwiLCB7fSwgbG9jYWxlKVxuXHRcdFx0XHRcdGVsc2UgaWYgYXBwcm92ZS5qdWRnZSA9PSAncmVqZWN0ZWQnXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlamVjdGVkXCIsIHt9LCBsb2NhbGUpXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICd0ZXJtaW5hdGVkJ1xuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSB0ZXJtaW5hdGVkXCIsIHt9LCBsb2NhbGUpXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICdyZWFzc2lnbmVkJ1xuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSByZWFzc2lnbmVkXCIsIHt9LCBsb2NhbGUpXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICdyZWxvY2F0ZWQnXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlbG9jYXRlZFwiLCB7fSwgbG9jYWxlKVxuXHRcdFx0XHRcdGVsc2UgaWYgYXBwcm92ZS5qdWRnZSA9PSAnJ1xuXHRcdFx0XHRcdFx0anVkZ2VfbmFtZSA9IFwiXCJcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gXCJcIlxuXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHBlbmRpbmdcIiwge30sIGxvY2FsZSlcblxuXHRcdFx0XHRhcHByb3Zlcy5wdXNoXG5cdFx0XHRcdFx0X2lkOiBhcHByb3ZlLl9pZFxuXHRcdFx0XHRcdGhhbmRsZXI6IGFwcHJvdmUudXNlclxuXHRcdFx0XHRcdGhhbmRsZXJfbmFtZTogYXBwcm92ZS5oYW5kbGVyX25hbWVcblx0XHRcdFx0XHRoYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lOiBhcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWVcblx0XHRcdFx0XHRoYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZTogYXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVxuXHRcdFx0XHRcdGZpbmlzaF9kYXRlOiBhcHByb3ZlLmZpbmlzaF9kYXRlXG5cdFx0XHRcdFx0anVkZ2U6IGFwcHJvdmUuanVkZ2Vcblx0XHRcdFx0XHRqdWRnZV9uYW1lOiBqdWRnZV9uYW1lXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IGFwcHJvdmUuZGVzY3JpcHRpb25cblx0XHRcdFx0XHRpc19maW5pc2hlZDogYXBwcm92ZS5pc19maW5pc2hlZFxuXHRcdFx0XHRcdHR5cGU6IGFwcHJvdmUudHlwZVxuXHRcdFx0XHRcdG9waW5pb25fZmllbGRzX2NvZGU6IGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZVxuXHRcdFx0XHRcdHNpZ25fZmllbGRfY29kZTogYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGVcblx0XHRcdFx0XHRpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWRcblx0XHRcdFx0XHRzaWduX3Nob3c6IGFwcHJvdmUuc2lnbl9zaG93XG5cblxuXHRcdFx0aWYgc3RlcFxuXHRcdFx0XHRpZiBzdGVwLm5hbWUgb2YgdHJhY2VzXG5cdFx0XHRcdFx0dHJhY2VzW3N0ZXAubmFtZV0gPSB0cmFjZXNbc3RlcC5uYW1lXS5jb25jYXQoYXBwcm92ZXMpXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR0cmFjZXNbc3RlcC5uYW1lXSA9IGFwcHJvdmVzXG5cblx0XHRyZXR1cm4gdHJhY2VzO1xuXG5cblxuXHRkb2NfdmFsdWVzOiAtPlxuXHRcdFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcblxuXHRpbnN0YW5jZV9ib3hfc3R5bGU6IC0+XG5cdFx0Ym94ID0gU2Vzc2lvbi5nZXQoXCJib3hcIilcblx0XHRpZiBib3ggPT0gXCJpbmJveFwiIHx8IGJveCA9PSBcImRyYWZ0XCJcblx0XHRcdGp1ZGdlID0gU2Vzc2lvbi5nZXQoXCJqdWRnZVwiKVxuXHRcdFx0aWYganVkZ2Vcblx0XHRcdFx0aWYgKGp1ZGdlID09IFwiYXBwcm92ZWRcIilcblx0XHRcdFx0XHRyZXR1cm4gXCJib3gtc3VjY2Vzc1wiXG5cdFx0XHRcdGVsc2UgaWYgKGp1ZGdlID09IFwicmVqZWN0ZWRcIilcblx0XHRcdFx0XHRyZXR1cm4gXCJib3gtZGFuZ2VyXCJcblx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0XHRpZiBpbnMgJiYgaW5zLmZpbmFsX2RlY2lzaW9uXG5cdFx0XHRpZiBpbnMuZmluYWxfZGVjaXNpb24gPT0gXCJhcHByb3ZlZFwiXG5cdFx0XHRcdHJldHVybiBcImJveC1zdWNjZXNzXCJcblx0XHRcdGVsc2UgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PSBcInJlamVjdGVkXCIpXG5cdFx0XHRcdHJldHVybiBcImJveC1kYW5nZXJcIlxuXG4jaXNfZGlzYWJsZWQ6IC0+XG4jICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuIyAgICBpZiAhaW5zXG4jICAgICAgICByZXR1cm47XG4jICAgIGlmIGlucy5zdGF0ZSE9XCJkcmFmdFwiXG4jICAgICAgICByZXR1cm4gXCJkaXNhYmxlZFwiO1xuIyAgICByZXR1cm47XG5cblx0dGFibGVfZmllbGRzOiAoaW5zdGFuY2UpLT5cblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcblx0XHRcdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG5cdFx0ZWxzZVxuXHRcdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcblx0XHRpZiBmb3JtX3ZlcnNpb25cblx0XHRcdGZpZWxkcyA9IF8uY2xvbmUoZm9ybV92ZXJzaW9uLmZpZWxkcyk7XG5cblx0XHRcdGZpZWxkcy5mb3JFYWNoIChmaWVsZCwgaW5kZXgpIC0+XG5cdFx0XHRcdGZpZWxkLnRyX3N0YXJ0ID0gXCJcIjtcblx0XHRcdFx0ZmllbGQudHJfZW5kID0gXCJcIjtcblx0XHRcdFx0dGRfY29sc3BhbiA9IDE7XG4jXHRcdFx0XHTlvLrliLborr7nva7moIflpLTlrZfmrrXkuLrlrr3lrZfmrrVcblx0XHRcdFx0aWYgQ29yZUZvcm0/LnBhZ2VUaXRsZUZpZWxkTmFtZSA9PSBmaWVsZC5jb2RlXG5cdFx0XHRcdFx0ZmllbGQuaXNfd2lkZSA9IHRydWVcblxuXHRcdFx0XHRpZiBmaWVsZC5mb3JtdWxhICYmIGZpZWxkLnR5cGUgIT0gJ29kYXRhJ1xuXHRcdFx0XHRcdGZpZWxkLnBlcm1pc3Npb24gPSBcInJlYWRvbmx5XCI7XG5cblx0XHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpXG4jIOWmguaenOW9k+WJjeWtl+auteaYr+WIhue7hOOAgeihqOagvOOAgeWuveWtl+autVxuXHRcdFx0XHRcdGlmIGZpZWxkLnR5cGUgPT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xuXHRcdFx0XHRcdFx0ZmllbGQudGRfY29sc3BhbiA9IDQ7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZmllbGQudGRfY29sc3BhbiA9IDM7XG5cblx0XHRcdFx0XHRpZiBpbmRleCAhPSAwXG5cdFx0XHRcdFx0XHRmaWVsZC50cl9zdGFydCA9IFwiPHRyPlwiO1xuXHRcdFx0XHRcdFx0ZmllbGQudHJfZW5kID0gXCI8L3RyPlwiO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0cHJlX2ZpZWxkcyA9IGZpZWxkcy5zbGljZSgwLCBpbmRleCk7XG5cblx0XHRcdFx0XHRwcmVfd2lkZV9maWVsZHMgPSBwcmVfZmllbGRzLmZpbHRlclByb3BlcnR5KFwiaXNfd2lkZVwiLCB0cnVlKTtcblxuXHRcdFx0XHRcdHRyX3N0YXJ0ID0gXCJcIjtcblxuXHRcdFx0XHRcdHRyX2VuZCA9IFwiXCI7XG5cblx0XHRcdFx0XHQjIOWFiOiuoeeul+W9k+WJjeWtl+auteaYr+WQpuS4uuWuveWtl+autVxuXHRcdFx0XHRcdGJlZm9yZV9maWVsZCA9IG51bGw7XG5cdFx0XHRcdFx0YWZ0ZXJfZmllbGQgPSBudWxsO1xuXG5cdFx0XHRcdFx0aWYgaW5kZXggPiAwXG5cdFx0XHRcdFx0XHRiZWZvcmVfZmllbGQgPSBmaWVsZHNbaW5kZXggLSAxXVxuXG5cdFx0XHRcdFx0aWYgaW5kZXggPCBmaWVsZHMubGVuZ3RoIC0gMVxuXHRcdFx0XHRcdFx0YWZ0ZXJfZmllbGQgPSBmaWVsZHNbaW5kZXggKyAxXVxuXG5cdFx0XHRcdFx0IyDlpoLmnpzlvZPliY3lrZfmrrXmmK/liIbnu4TjgIHooajmoLzjgIHlrr3lrZfmrrVcblx0XHRcdFx0XHRpZiBmaWVsZC50eXBlID09ICdzZWN0aW9uJyB8fCBmaWVsZC50eXBlID09ICd0YWJsZSdcblx0XHRcdFx0XHRcdHRkX2NvbHNwYW4gPSA0O1xuXHRcdFx0XHRcdGVsc2UgaWYgZmllbGQuaXNfd2lkZVxuXHRcdFx0XHRcdFx0dGRfY29sc3BhbiA9IDM7XG5cdFx0XHRcdFx0ZWxzZVxuIyDliY3lkI7pg73mmK/lrr3lrZfmrrVcblx0XHRcdFx0XHRcdGlmIGJlZm9yZV9maWVsZCAmJiBhZnRlcl9maWVsZCAmJiBiZWZvcmVfZmllbGQuaXNfd2lkZSAmJiBhZnRlcl9maWVsZC5pc193aWRlXG5cdFx0XHRcdFx0XHRcdGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR0ZF9jb2xzcGFuID0gMztcblxuXHRcdFx0XHRcdFx0IyDlvZPliY3mmK90ciDkuIvnmoQg56ys5LiA5LiqdGQgJiDlkI7ovrnnmoTlrZfmrrXmmK/lrr3lrZfmrrVcblx0XHRcdFx0XHRcdGlmIChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiA9PSAwICYmIGFmdGVyX2ZpZWxkICYmIGFmdGVyX2ZpZWxkLmlzX3dpZGVcblx0XHRcdFx0XHRcdFx0ZmllbGQuaXNfd2lkZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHRkX2NvbHNwYW4gPSAzO1xuXG5cdFx0XHRcdFx0XHQjIOW9k+WJjeaYr3RyIOS4i+eahCDnrKzkuIDkuKp0ZCAmIOW9k+WJjeWtl+auteaYr+acgOWQjuS4gOS4quWtl+autVxuXHRcdFx0XHRcdFx0aWYgKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09IDAgJiYgYWZ0ZXJfZmllbGQgPT0gbnVsbFxuXHRcdFx0XHRcdFx0XHRmaWVsZC5pc193aWRlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0dGRfY29sc3BhbiA9IDM7XG5cblx0XHRcdFx0XHRmaWVsZC50ZF9jb2xzcGFuID0gdGRfY29sc3BhbjtcblxuXG5cdFx0XHRcdFx0aWYgaW5kZXggPT0gMFxuIyB0cl9zdGFydCA9IFwiPHRyPlwiOyDnlLHkuo5UZW1wbGF0ZeeahOe8luivkWJ1Z++8jOWvvOiHtOavj+asoee7meS4gOS4qnRy5byA5aeL5pe277yM5Lya6Ieq5Yqo6KGl5aS05oiW6KGl5bC+44CC5Zug5q2k5Zyo56ys5LiA6KGM6L+U5Zue5LiA5Liq56m65a2X56ym5LiyLlxuXHRcdFx0XHRcdFx0dHJfc3RhcnQgPSBcIjx0cj5cIjtcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRpZiAocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT0gMCB8fCBmaWVsZC5pc193aWRlXG5cdFx0XHRcdFx0XHRcdGlmIGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xuXHRcdFx0XHRcdFx0XHRcdHRyX3N0YXJ0ID0gXCI8dHIgY2xhc3MgPSBcXFwidHItY2hpbGQtdGFibGVcXFwiPlwiO1xuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0dHJfc3RhcnQgPSBcIjx0cj5cIjtcblxuXHRcdFx0XHRcdGZpZWxkLnRyX3N0YXJ0ID0gdHJfc3RhcnQ7XG5cblxuXHRcdFx0XHRcdGlmIGluZGV4ICsgMSA9PSBmaWVsZHMubGVuZ3RoIHx8IGZpZWxkLnR5cGUgPT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT0gJ3RhYmxlJyB8fCBmaWVsZC5pc193aWRlXG5cdFx0XHRcdFx0XHR0cl9lbmQgPSBcIjwvdHI+XCI7XG5cblx0XHRcdFx0XHRpZiAocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgIT0gMFxuXHRcdFx0XHRcdFx0dHJfZW5kID0gXCI8L3RyPlwiO1xuXG5cdFx0XHRcdFx0ZmllbGQudHJfZW5kID0gdHJfZW5kO1xuXG5cdFx0XHRyZXR1cm4gZmllbGRzO1xuXG5cdHNvcnRfYXBwcm92ZTogKGFwcHJvdmVzLCBvcmRlciktPlxuXHRcdGlmICFhcHByb3Zlc1xuXHRcdFx0cmV0dXJuIFtdXG5cblx0XHRpZiAhYXBwcm92ZXMgaW5zdGFuY2VvZiBBcnJheVxuXHRcdFx0cmV0dXJuIFtdXG5cdFx0ZWxzZVxuXHRcdFx0aWYgb3JkZXIgPT0gJ2Rlc2MnXG5cdFx0XHRcdGFwcHJvdmVzLnNvcnQgKHAxLCBwMikgLT5cblx0XHRcdFx0XHRfcDEgPSAwXG5cdFx0XHRcdFx0X3AyID0gMFxuXG5cdFx0XHRcdFx0aWYgcDEuZmluaXNoX2RhdGVcblx0XHRcdFx0XHRcdF9wMSA9IHAxLmZpbmlzaF9kYXRlLmdldFRpbWUoKVxuXG5cdFx0XHRcdFx0aWYgcDIuZmluaXNoX2RhdGVcblx0XHRcdFx0XHRcdF9wMiA9IHAyLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcblxuXHRcdFx0XHRcdHJldHVybiBfcDIgLSBfcDFcblx0XHRcdGVsc2Vcblx0XHRcdFx0YXBwcm92ZXMuc29ydCAocDEsIHAyKSAtPlxuXHRcdFx0XHRcdF9wMSA9IDBcblx0XHRcdFx0XHRfcDIgPSAwXG5cblx0XHRcdFx0XHRpZiBwMS5maW5pc2hfZGF0ZVxuXHRcdFx0XHRcdFx0X3AxID0gcDEuZmluaXNoX2RhdGUuZ2V0VGltZSgpXG5cblx0XHRcdFx0XHRpZiBwMi5maW5pc2hfZGF0ZVxuXHRcdFx0XHRcdFx0X3AyID0gcDIuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIF9wMSAtIF9wMlxuXHRcdHJldHVybiBhcHByb3Zlc1xuXG5cdF90OiAoa2V5KS0+XG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxuXHRnZXRGaWVsZDogKGNvZGUpLT5cblx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXG5cdFx0aWYgZm9ybV92ZXJzaW9uXG5cdFx0XHRyZXR1cm4gZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKVxuXG5cdGdldFZhbHVlOiAoY29kZSktPlxuXHRcdGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlXG5cblx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXG5cblx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXG5cblx0XHR1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0XG5cblx0XHR2YWx1ZXMgPSBpbnN0YW5jZS52YWx1ZXMgfHwge31cblxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxuXHRcdFx0dmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpXG5cblx0XHRyZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFZhbHVlIHZhbHVlc1tjb2RlXSwgZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKSwgbG9jYWxlLCB1dGNPZmZzZXRcblxuXHRnZXRMYWJlbDogKGNvZGUpLT5cblx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXG5cdFx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsIGZvcm1fdmVyc2lvbi5maWVsZHMsIGNvZGVcblxuXHRnZXRDZkNsYXNzOiAoZmllbGQpLT5cblx0XHRpZiBmaWVsZD8udHlwZSA9PSBcImlucHV0XCIgJiYgZmllbGQ/LmlzX3RleHRhcmVhXG5cdFx0XHRyZXR1cm4gXCJjZlRleHRhcmVhXCJcblxuXHRnZXRUYWJsZVRoZWFkOiAoZmllbGQpLT5cblx0XHRyZXR1cm4gU3RlZWRvc1RhYmxlLmdldFRoZWFkKGZpZWxkLCBmYWxzZSlcblxuXHRnZXRUYWJsZUJvZHk6IChmaWVsZCktPlxuXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXG5cdFx0XHRpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZVxuXHRcdFx0dmFsdWVzID0gaW5zdGFuY2UudmFsdWVzIHx8IHt9XG5cdFx0ZWxzZVxuXHRcdFx0dmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpXG5cblx0XHR0YWJsZVZhbHVlID0gdmFsdWVzW2ZpZWxkLmNvZGVdO1xuXHRcdHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VGJvZHkoZmllbGQuc2ZpZWxkcy5nZXRQcm9wZXJ0eShcImNvZGVcIiksIGZpZWxkLCB0YWJsZVZhbHVlLCBmYWxzZSlcblxuXHRzaG93TGFiZWw6IChmaWVsZCktPlxuXHRcdHRlbXBsYXRlRGF0YSA9IFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YVxuXHRcdGlmIHRlbXBsYXRlRGF0YS5sYWJlbCA9PSBmYWxzZVxuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0cmV0dXJuIHRydWVcblxuI1x0YWZGaWVsZExhYmVsVGV4dDogKG9wKS0+XG4jXHRcdGlmICFUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGFcbiNcdFx0XHRyZXR1cm4gQXV0b0Zvcm0uZ2V0TGFiZWxGb3JGaWVsZChvcC5uYW1lKVxuI1x0XHRlbHNlXG4jXHRcdFx0Zm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvblxuI1x0XHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbCBmb3JtX3ZlcnNpb24uZmllbGRzLCBvcD8uaGFzaD8ubmFtZVxuXG5cdGlzT3BpbmlvbkZpZWxkOiAoZmllbGQpLT5cblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZC5mb3JtdWxhKVxuXG5cdGlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nOiAoZmllbGRfZm9ybXVsYSktPlxuXHRcdHJldHVybiBJbnN0YW5jZVNpZ25UZXh0LmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpXG5cblx0aW5jbHVkZXNPcGluaW9uRmllbGQ6IChmb3JtLCBmb3JtX3ZlcnNpb24pLT5cblxuXHRcdGZpZWxkX2Zvcm11bGFzID0gbmV3IEFycmF5KCk7XG5cblx0XHRmaWVsZHMgPSBkYi5mb3JtX3ZlcnNpb25zLmZpbmRPbmUoe19pZDogZm9ybV92ZXJzaW9uLCBmb3JtOiBmb3JtfSk/LmZpZWxkcyB8fCBbXVxuXG5cdFx0ZmllbGRzLmZvckVhY2ggKGYpLT5cblx0XHRcdGlmIGYudHlwZSA9PSAndGFibGUnXG5cdFx0XHRcdGNvbnNvbGUubG9nICdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZSdcblx0XHRcdGVsc2UgaWYgZi50eXBlID09ICdzZWN0aW9uJ1xuXHRcdFx0XHRmPy5maWVsZHM/LmZvckVhY2ggKGYxKS0+XG5cdFx0XHRcdFx0ZmllbGRfZm9ybXVsYXMucHVzaCBmMS5mb3JtdWxhXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGZpZWxkX2Zvcm11bGFzLnB1c2ggZi5mb3JtdWxhXG5cblx0XHRfLnNvbWUgZmllbGRfZm9ybXVsYXMsIChmaWVsZF9mb3JtdWxhKS0+XG5cdFx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKVxuXG5cdGdldE9waW5pb25GaWVsZFN0ZXBzTmFtZTogKGZpZWxkX2Zvcm11bGEsIHRvcF9rZXl3b3JkcyktPlxuXG5cdFx0b3BpbmlvbkZpZWxkcyA9IG5ldyBBcnJheSgpO1xuI1x0XHRjb25zb2xlLmxvZyhcImZpZWxkX2Zvcm11bGFcIiwgZmllbGRfZm9ybXVsYSlcblx0XHRpZiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpXG5cdFx0XHRpZiBmaWVsZF9mb3JtdWxhXG5cbiNcdFx0XHRcdGZvbzEgPSBmaWVsZF9mb3JtdWxhLnNwbGl0KFwiLFwiKVxuXHRcdFx0XHRmb28xID0gZmllbGRfZm9ybXVsYS5zcGxpdChcIjtcIilcblxuI1x0XHRcdFx0aWYgdG9wX2tleXdvcmRzXG4jXHRcdFx0XHRcdGZvbzEgPSBmaWVsZF9mb3JtdWxhLnNwbGl0KFwiO1wiKVxuXG5cdFx0XHRcdGZvbzEuZm9yRWFjaCAoZm9vKS0+XG5cdFx0XHRcdFx0anNvbl9mb3JtdWxhID0ge31cblxuXHRcdFx0XHRcdHRyeVxuXHRcdFx0XHRcdFx0anNvbl9mb3JtdWxhID0gZXZhbChcIihcIiArIGZvbyArIFwiKVwiKVxuXHRcdFx0XHRcdGNhdGNoXG5cdFx0XHRcdFx0XHRqc29uX2Zvcm11bGEgPSB7fVxuXG5cdFx0XHRcdFx0aWYganNvbl9mb3JtdWxhPy55aWppYW5sYW5cblx0XHRcdFx0XHRcdHNmID0ge31cblxuXHRcdFx0XHRcdFx0c2Yuc3RlcE5hbWUgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLnN0ZXBcblxuXHRcdFx0XHRcdFx0c2YuaW1hZ2Vfc2lnbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uaW1hZ2Vfc2lnbiB8fCBmYWxzZVxuXG5cdFx0XHRcdFx0XHRzZi5vbmx5X2NjX29waW5pb24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfY2MgfHwgZmFsc2VcblxuXHRcdFx0XHRcdFx0c2YuZGVmYXVsdF9kZXNjcmlwdGlvbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uZGVmYXVsdFxuXG5cdFx0XHRcdFx0XHRzZi5vbmx5X2hhbmRsZXIgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfaGFuZGxlclxuXG5cdFx0XHRcdFx0XHRzZi50b3Bfa2V5d29yZHMgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLnRvcF9rZXl3b3JkcyB8fCB0b3Bfa2V5d29yZHNcblxuXHRcdFx0XHRcdFx0b3BpbmlvbkZpZWxkcy5wdXNoKHNmKTtcblxuXHRcdFx0XHRcdGVsc2UgaWYoZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInt0cmFjZXMuXCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA+IC0xKVxuXG5cdFx0XHRcdFx0XHRzZiA9IHtvbmx5X2NjX29waW5pb246IGZhbHNlLCBpbWFnZV9zaWduOiBmYWxzZSwgdG9wX2tleXdvcmRzOiB0b3Bfa2V5d29yZHN9XG5cblx0XHRcdFx0XHRcdGlmIGZvby5pbmRleE9mKFwie3NpZ25hdHVyZS5cIikgPiAtMVxuXHRcdFx0XHRcdFx0XHRzZi5pbWFnZV9zaWduID0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHRmb28gPSBmb28ucmVwbGFjZShcIntzaWduYXR1cmUuXCIsXCJcIik7XG5cblx0XHRcdFx0XHRcdHMxID0gZm9vLnJlcGxhY2UoXCJ7XCIsXCJcIikucmVwbGFjZShcIn1cIixcIlwiKVxuXHRcdFx0XHRcdFx0aWYgczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDFcblx0XHRcdFx0XHRcdFx0c2Yuc3RlcE5hbWUgPSBzMS5zcGxpdChcIi5cIilbMV1cblx0XHRcdFx0XHRcdFx0aWYgb3BpbmlvbkZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcInN0ZXBOYW1lXCIsc2Yuc3RlcE5hbWUpLmxlbmd0aCA+IDBcblx0XHRcdFx0XHRcdFx0XHRvcGluaW9uRmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJzdGVwTmFtZVwiLCBzZi5zdGVwTmFtZSk/Lm9ubHlfY2Nfb3BpbmlvbiA9IHRydWVcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiBzMS5zcGxpdChcIi5cIilbMl0/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ2NjJ1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRzZi5vbmx5X2NjX29waW5pb24gPSB0cnVlXG5cdFx0XHRcdFx0XHRvcGluaW9uRmllbGRzLnB1c2goc2YpO1xuXG5cdFx0cmV0dXJuIG9waW5pb25GaWVsZHNcblxuXHRzaG93Q0NPcGluaW9uOiAoZmllbGQpLT5cblx0XHRpZiBmaWVsZC5mb3JtdWxhPy5pbmRleE9mKFwie3RyYWNlcy5cIikgPiAtMSB8fCBmaWVsZC5mb3JtdWxhPy5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpID4gLTFcblx0XHRcdHMxID0gZmllbGQuZm9ybXVsYS5yZXBsYWNlKFwie3NpZ25hdHVyZS5cIixcIlwiKS5yZXBsYWNlKFwie1wiLFwiXCIpLnJlcGxhY2UoXCJ9XCIsXCJcIilcblx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAyXG5cdFx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKVsyXT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnY2MnXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRyZXR1cm4gZmFsc2VcblxuXHRtYXJrRG93blRvSHRtbDogKG1hcmtEb3duU3RyaW5nKS0+XG5cdFx0aWYgbWFya0Rvd25TdHJpbmdcblx0XHRcdHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XG5cdFx0XHRyZW5kZXJlci5saW5rID0gKCBocmVmLCB0aXRsZSwgdGV4dCApIC0+XG5cdFx0XHRcdHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPScje2hyZWZ9JyB0aXRsZT0nI3t0aXRsZX0nPiN7dGV4dH08L2E+XCJcblx0XHRcdHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge3JlbmRlcmVyOnJlbmRlcmVyfSkpXG5cblx0Zl9sYWJlbDogKHRoYXQpLT5cblx0XHRyZXR1cm4gdGhhdC5uYW1lIHx8IHRoYXQuY29kZVxuXG5pZiBNZXRlb3IuaXNTZXJ2ZXJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5zdGVlZG9zX2Zvcm0gPSAtPlxuXHRcdHJldHVybiB0aGlzLmZvcm1fdmVyc2lvblxuXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNTZWN0aW9uID0gKGNvZGUpLT5cblx0XHRmb3JtX3ZlcnNpb24gPSB0aGlzLmZvcm1fdmVyc2lvblxuXHRcdHJldHVybiBmb3JtX3ZlcnNpb24uZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpLnR5cGUgPT0gJ3NlY3Rpb24nXG5cblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5kb2NfdmFsdWVzID0gLT5cblx0XHRpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XG5cdFx0cmV0dXJuIGluc3RhbmNlLnZhbHVlcztcblxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmFwcGxpY2FudENvbnRleHQgPSAtPlxuXHRcdGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZTtcblx0XHRkYXRhID0ge1xuXHRcdFx0bmFtZTogJ2luc19hcHBsaWNhbnQnLFxuXHRcdFx0YXR0czoge25hbWU6ICdpbnNfYXBwbGljYW50JywgaWQ6ICdpbnNfYXBwbGljYW50JywgY2xhc3M6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50J30sXG5cdFx0XHR2YWx1ZTogaW5zdGFuY2UuYXBwbGljYW50X25hbWVcblx0XHR9XG5cblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnN0YW5jZSA9IC0+XG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2VcblxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmZpZWxkcyA9IC0+XG5cdFx0Zm9ybV92ZXJzaW9uID0gdGhpcy5mb3JtX3ZlcnNpb25cblx0XHRpZiBmb3JtX3ZlcnNpb25cblx0XHRcdHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XG5cblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtX3R5cGVzID0gLT5cblx0XHRyZXR1cm4gXCJkaXNhYmxlZFwiXG5cblx0VGVtcGxhdGUucmVnaXN0ZXJIZWxwZXIgXCJhZkZpZWxkTGFiZWxUZXh0XCIsIChvcCktPlxuXHRcdGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb25cblx0XHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwgZm9ybV92ZXJzaW9uLmZpZWxkcywgb3A/Lmhhc2g/Lm5hbWVcblxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLl90ID0gKGtleSktPlxuXHRcdGxvY2FsZSA9IHRoaXMubG9jYWxlXG5cblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpXG5cblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnNfYXR0YWNoX2Rvd25sb2FkX3VybCA9IChfaWQsIGFic29sdXRlKS0+XG5cdFx0aWYgYWJzb2x1dGVcblx0XHRcdHJldHVybiBNZXRlb3IuYWJzb2x1dGVVcmwoXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy8je19pZH0/ZG93bmxvYWQ9dHJ1ZVwiKTtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy8je19pZH0/ZG93bmxvYWQ9dHJ1ZVwiO1xuXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMub3B0aW9ucyA9IChmaWVsZCktPlxuXHRcdG9wdGlvbnMgPSBmaWVsZD8ub3B0aW9ucz8uc3BsaXQoXCJcXG5cIilcblx0XHRyZXYgPSBbXVxuXHRcdG9wdGlvbnM/LmZvckVhY2ggKGl0ZW0pLT5cblx0XHRcdHJldi5wdXNoKHtsYWJlbDogaXRlbSwgdmFsdWU6IGl0ZW19KVxuXG5cdFx0cmV0dXJuIHJldlxuXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZ2V0UGVybWlzc2lvbnMgPSAoY29kZSktPlxuXHRcdGlmICFUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHM/LmluY2x1ZGVzKGNvZGUpXG5cdFx0XHRyZXR1cm4gXCJyZWFkb25seSBkaXNhYmxlZFwiXG5cdFx0cmV0dXJuIFwiXCJcblxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUuZXZlbnRzID1cblx0J2NoYW5nZSAuZm9ybS1jb250cm9sLC5jaGVja2JveCBpbnB1dCwuYWYtcmFkaW8tZ3JvdXAgaW5wdXQsLmFmLWNoZWNrYm94LWdyb3VwIGlucHV0JzogKGV2ZW50KS0+XG5cdFx0SW5zdGFuY2VNYW5hZ2VyLmluc3RhbmNlZm9ybUNoYW5nZUV2ZW50KGV2ZW50KVxuXG5cdCd0eXBlYWhlYWQ6Y2hhbmdlIC5mb3JtLWNvbnRyb2wnOiAoZXZlbnQpIC0+XG5cdFx0SW5zdGFuY2VNYW5hZ2VyLmluc3RhbmNlZm9ybUNoYW5nZUV2ZW50KGV2ZW50KVxuXG5cdCdjbGljayAuY2ZUZXh0YXJlYSBhJzogKGV2ZW50KS0+XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRTdGVlZG9zLm9wZW5XaW5kb3coZXZlbnQudGFyZ2V0LmhyZWYpO1xuXG5cbkluc3RhbmNlZm9ybVRlbXBsYXRlLm9uQ3JlYXRlZCA9ICgpLT5cblx0aW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0aWYgIWluc3RhbmNlXG5cdFx0cmV0dXJuO1xuXG5cdHRlbXBsYXRlID0gVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlKGluc3RhbmNlKTtcblxuXHR0cnlcblx0XHRjb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtpc0JvZHk6IHRydWV9KTtcblx0Y2F0Y2ggZVxuXHRcdGNvbnNvbGUubG9nIFwiSW5zdGFuY2UgVGVtcGxhdGUgRXJyb3JcIiwgZVxuXHRcdGNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShcIlwiLCB7aXNCb2R5OiB0cnVlfSk7XG5cblxuXHRyZW5kZXJGdW5jdGlvbiA9IGV2YWwoY29tcGlsZWQpO1xuXG5cdGluc3RhbmNlVmlldyA9IG5ldyBCbGF6ZS5WaWV3KFwiY3VzdG9tX2luc3RhbmNlX3RlbXBsYXRlXCIsIHJlbmRlckZ1bmN0aW9uKTtcblxuXHRpbnN0YW5jZUN1c3RvbVRlbXBsYXRlID0gbmV3IEJsYXplLlRlbXBsYXRlKGluc3RhbmNlVmlldy5uYW1lLCByZW5kZXJGdW5jdGlvbik7XG5cblx0VGVtcGxhdGUuaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlID0gaW5zdGFuY2VDdXN0b21UZW1wbGF0ZVxuXG5cdFRlbXBsYXRlLmluc3RhbmNlX2N1c3RvbV90ZW1wbGF0ZS5oZWxwZXJzIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnNcblxuXG5cblxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUub25SZW5kZXJlZCA9ICgpLT5cblx0IyB0ID0gdGhpcztcblxuXHQjdC5zdWJzY3JpYmUgXCJpbnN0YW5jZV9kYXRhXCIsIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSwgLT5cblx0IyAgICBUcmFja2VyLmFmdGVyRmx1c2ggLT5cblx0aW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0aWYgIWluc3RhbmNlXG5cdFx0cmV0dXJuO1xuXG5cdCMkKFwiI2luc19hcHBsaWNhbnRcIikuc2VsZWN0MigpLnZhbChpbnN0YW5jZS5hcHBsaWNhbnQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuXHQjJChcIiNpbnNfYXBwbGljYW50XCIpLnZhbChpbnN0YW5jZS5hcHBsaWNhbnQpO1xuXHQkKFwiaW5wdXRbbmFtZT0naW5zX2FwcGxpY2FudCddXCIpWzBdPy5kYXRhc2V0LnZhbHVlcyA9IGluc3RhbmNlLmFwcGxpY2FudDtcblx0JChcImlucHV0W25hbWU9J2luc19hcHBsaWNhbnQnXVwiKS52YWwoaW5zdGFuY2UuYXBwbGljYW50X25hbWUpXG5cblxuXHRBcHByb3ZlTWFuYWdlci5lcnJvciA9IHtuZXh0U3RlcHM6ICcnLCBuZXh0U3RlcFVzZXJzOiAnJ307XG5cblx0IyBpbnN0YW5jZSBmcm9t57uR5a6a5LqL5Lu2XG5cdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCcgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2RyYWZ0J1xuXHRcdEluc3RhbmNlRXZlbnQuaW5pdEV2ZW50cyhpbnN0YW5jZS5mbG93KTtcblxuXHRpZiAhQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpXG5cblx0XHRjdXJyZW50QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSgpO1xuXG5cblx0XHRpbnN0YW5jZU51bWJlckZpZWxkcyA9ICQoXCJbZGF0YS1mb3JtdWxhXVwiLCAkKFwiI2luc3RhbmNlZm9ybVwiKSlcblxuXHRcdGluc3RhbmNlTnVtYmVyRmllbGRzLmVhY2ggKCktPlxuXHRcdFx0c2NoZW1hS2V5ID0gdGhpcy5kYXRhc2V0LnNjaGVtYUtleVxuXHRcdFx0ZWxlbWVudCA9ICQodGhpcylcblx0XHRcdGlmICEkKHRoaXMpLnZhbCgpICYmIHNjaGVtYUtleSAmJiBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIilcblx0XHRcdFx0TWV0ZW9yLmNhbGwgJ2dldEluc3RhbmNlVmFsdWVzJywgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpLCAoZXJyb3IsIHJlc3VsdCktPlxuXHRcdFx0XHRcdGlmIGVycm9yXG5cdFx0XHRcdFx0XHR0b2FzdHIuZXJyb3IoZXJyb3IucmVhc29uKVxuXG5cdFx0XHRcdFx0aWYgIXJlc3VsdFtzY2hlbWFLZXldXG5cdFx0XHRcdFx0XHRrZXkgPSBlbGVtZW50LmRhdGEoXCJmb3JtdWxhXCIpPy5yZXBsYWNlKFwiYXV0b19udW1iZXIoXCIsIFwiXCIpLnJlcGxhY2UoXCIpXCIsIFwiXCIpXG5cblx0XHRcdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFwiL2csIFwiXCIpLnJlcGxhY2UoL1xcJy9nLCBcIlwiKVxuXG5cdFx0XHRcdFx0XHRpZiBrZXkuaW5kZXhPZihcIntcIikgPiAtMVxuXHRcdFx0XHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZShcIntcIixcIlwiKS5yZXBsYWNlKFwifVwiLFwiXCIpXG5cdFx0XHRcdFx0XHRcdGtleSA9IGtleS50cmltKClcblx0XHRcdFx0XHRcdFx0a2V5ID0gQXV0b0Zvcm0uZ2V0RmllbGRWYWx1ZShrZXksICdpbnN0YW5jZWZvcm0nKVxuXHRcdFx0XHRcdFx0SW5zdGFuY2VOdW1iZXJSdWxlcy5pbnN0YW5jZU51bWJlckJ1aWxkZXIgZWxlbWVudCwga2V5XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZWxlbWVudD8udmFsKHJlc3VsdFtzY2hlbWFLZXldKS50cmlnZ2VyKFwiY2hhbmdlXCIpXG5cblx0XHRqdWRnZSA9IGN1cnJlbnRBcHByb3ZlLmp1ZGdlXG5cdFx0Y3VycmVudFN0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcblx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuXG5cdFx0Zm9ybXVsYV9maWVsZHMgPSBGb3JtX2Zvcm11bGEuZ2V0Rm9ybXVsYUZpZWxkVmFyaWFibGUoXCJGb3JtX2Zvcm11bGEuZmllbGRfdmFsdWVzXCIsIGZvcm1fdmVyc2lvbi5maWVsZHMpO1xuXHRcdEZvcm1fZm9ybXVsYS5ydW4oXCJcIiwgXCJcIiwgZm9ybXVsYV9maWVsZHMsIEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jLCBmb3JtX3ZlcnNpb24uZmllbGRzKTtcblx0XHQj5Zyo5q2k5aSE5Yid5aeL5YyWc2Vzc2lvbiDkuK3nmoQgZm9ybV92YWx1ZXMg5Y+Y6YeP77yM55So5LqO6Kem5Y+R5LiL5LiA5q2l5q2l6aqk6K6h566XXG5cdFx0U2Vzc2lvbi5zZXQoXCJpbnN0YW5jZV9mb3JtX3ZhbHVlc1wiLCB7aW5zdGFuY2VJZDogaW5zdGFuY2UuX2lkLCB2YWx1ZXM6IEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jfSk7XG5cblxuXG4iLCJJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzID0ge1xuICBhcHBsaWNhbnRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0YSwgc3RlZWRvc19pbnN0YW5jZTtcbiAgICBzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgZGF0YSA9IHtcbiAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgIGF0dHM6IHtcbiAgICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBpZDogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgICBcImNsYXNzXCI6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50J1xuICAgICAgfSxcbiAgICAgIHZhbHVlOiBzdGVlZG9zX2luc3RhbmNlLmFwcGxpY2FudF9uYW1lXG4gICAgfTtcbiAgICBpZiAoIXN0ZWVkb3NfaW5zdGFuY2UgfHwgc3RlZWRvc19pbnN0YW5jZS5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICBkYXRhLmF0dHMuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfSxcbiAgaW5zdGFuY2VJZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdpbnN0YW5jZWZvcm0nO1xuICB9LFxuICBmb3JtX3R5cGVzOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpKSB7XG4gICAgICByZXR1cm4gJ2Rpc2FibGVkJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdtZXRob2QnO1xuICAgIH1cbiAgfSxcbiAgc3RlZWRvc19mb3JtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIGZvcm1fdmVyc2lvbjtcbiAgICB9XG4gIH0sXG4gIGlubmVyc3ViZm9ybUNvbnRleHQ6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBkb2NfdmFsdWVzO1xuICAgIGRvY192YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gICAgb2JqW1widGFibGVWYWx1ZXNcIl0gPSBkb2NfdmFsdWVzID8gZG9jX3ZhbHVlc1tvYmouY29kZV0gOiBbXTtcbiAgICBvYmpbXCJmb3JtSWRcIl0gPSBcImluc3RhbmNlZm9ybVwiO1xuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gIGluc3RhbmNlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RlZWRvc19pbnN0YW5jZTtcbiAgICBTZXNzaW9uLmdldChcImNoYW5nZV9kYXRlXCIpO1xuICAgIGlmIChTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIikpIHtcbiAgICAgIHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgIHJldHVybiBzdGVlZG9zX2luc3RhbmNlO1xuICAgIH1cbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICB1bmVtcHR5OiBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0sXG4gIHVuZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuICEoYSA9PT0gYik7XG4gIH0sXG4gIGluY2x1ZGVzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcbiAgfSxcbiAgaW5jbHVkZTogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLnNwbGl0KCcsJykuaW5jbHVkZXMoYSk7XG4gIH0sXG4gIGZpZWxkczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XG4gICAgfVxuICB9LFxuICBmb3JtYXREYXRlOiBmdW5jdGlvbihkYXRlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zID0gSlNPTi5wYXJzZShvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmZvcm1hdCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgZm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIlxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQob3B0aW9ucy5mb3JtYXQpO1xuICB9LFxuICB0cmFjZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmbG93LCBpbnN0YW5jZSwgbG9jYWxlLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHN0ZWVkb3NEYXRhLCBzdGVwcywgdHJhY2VzO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIHN0ZWVkb3NEYXRhID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi52aWV3KSAhPSBudWxsID8gKHJlZjIgPSByZWYxLnRlbXBsYXRlKSAhPSBudWxsID8gcmVmMi5zdGVlZG9zRGF0YSA6IHZvaWQgMCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIGluc3RhbmNlID0gc3RlZWRvc0RhdGEgIT0gbnVsbCA/IHN0ZWVkb3NEYXRhLmluc3RhbmNlIDogdm9pZCAwO1xuICAgICAgZmxvdyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRGbG93VmVyc2lvbihpbnN0YW5jZSk7XG4gICAgICBsb2NhbGUgPSBzdGVlZG9zRGF0YSAhPSBudWxsID8gc3RlZWRvc0RhdGEubG9jYWxlIDogdm9pZCAwO1xuICAgICAgaWYgKGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnemgtY24nKSB7XG4gICAgICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgIGZsb3cgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGbG93VmVyc2lvbigpO1xuICAgICAgbG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKTtcbiAgICB9XG4gICAgaWYgKCFpbnN0YW5jZSB8fCAhZmxvdykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBzdGVwcyA9IGZsb3cuc3RlcHM7XG4gICAgdHJhY2VzID0ge307XG4gICAgaWYgKChyZWYzID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsKSB7XG4gICAgICByZWYzLmZvckVhY2goZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgdmFyIGFwcHJvdmVzLCByZWY0LCBzdGVwO1xuICAgICAgICBzdGVwID0gc3RlcHMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZS5zdGVwKTtcbiAgICAgICAgYXBwcm92ZXMgPSBbXTtcbiAgICAgICAgaWYgKChyZWY0ID0gdHJhY2UuYXBwcm92ZXMpICE9IG51bGwpIHtcbiAgICAgICAgICByZWY0LmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgICAgdmFyIGp1ZGdlX25hbWU7XG4gICAgICAgICAgICBpZiAodHJhY2UuaXNfZmluaXNoZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICdhcHByb3ZlZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIGFwcHJvdmVkXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICdyZWplY3RlZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlamVjdGVkXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgdGVybWluYXRlZFwiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZlLmp1ZGdlID09PSAncmVhc3NpZ25lZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlYXNzaWduZWRcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBwcm92ZS5qdWRnZSA9PT0gJ3JlbG9jYXRlZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlbG9jYXRlZFwiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZlLmp1ZGdlID09PSAnJykge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGp1ZGdlX25hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHBlbmRpbmdcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXBwcm92ZXMucHVzaCh7XG4gICAgICAgICAgICAgIF9pZDogYXBwcm92ZS5faWQsXG4gICAgICAgICAgICAgIGhhbmRsZXI6IGFwcHJvdmUudXNlcixcbiAgICAgICAgICAgICAgaGFuZGxlcl9uYW1lOiBhcHByb3ZlLmhhbmRsZXJfbmFtZSxcbiAgICAgICAgICAgICAgaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZTogYXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lLFxuICAgICAgICAgICAgICBoYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZTogYXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSxcbiAgICAgICAgICAgICAgZmluaXNoX2RhdGU6IGFwcHJvdmUuZmluaXNoX2RhdGUsXG4gICAgICAgICAgICAgIGp1ZGdlOiBhcHByb3ZlLmp1ZGdlLFxuICAgICAgICAgICAgICBqdWRnZV9uYW1lOiBqdWRnZV9uYW1lLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYXBwcm92ZS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgaXNfZmluaXNoZWQ6IGFwcHJvdmUuaXNfZmluaXNoZWQsXG4gICAgICAgICAgICAgIHR5cGU6IGFwcHJvdmUudHlwZSxcbiAgICAgICAgICAgICAgb3Bpbmlvbl9maWVsZHNfY29kZTogYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlLFxuICAgICAgICAgICAgICBzaWduX2ZpZWxkX2NvZGU6IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlLFxuICAgICAgICAgICAgICBpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWQsXG4gICAgICAgICAgICAgIHNpZ25fc2hvdzogYXBwcm92ZS5zaWduX3Nob3dcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwKSB7XG4gICAgICAgICAgaWYgKHN0ZXAubmFtZSBpbiB0cmFjZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZXNbc3RlcC5uYW1lXSA9IHRyYWNlc1tzdGVwLm5hbWVdLmNvbmNhdChhcHByb3Zlcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZXNbc3RlcC5uYW1lXSA9IGFwcHJvdmVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cmFjZXM7XG4gIH0sXG4gIGRvY192YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gIH0sXG4gIGluc3RhbmNlX2JveF9zdHlsZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJveCwgaW5zLCBqdWRnZTtcbiAgICBib3ggPSBTZXNzaW9uLmdldChcImJveFwiKTtcbiAgICBpZiAoYm94ID09PSBcImluYm94XCIgfHwgYm94ID09PSBcImRyYWZ0XCIpIHtcbiAgICAgIGp1ZGdlID0gU2Vzc2lvbi5nZXQoXCJqdWRnZVwiKTtcbiAgICAgIGlmIChqdWRnZSkge1xuICAgICAgICBpZiAoanVkZ2UgPT09IFwiYXBwcm92ZWRcIikge1xuICAgICAgICAgIHJldHVybiBcImJveC1zdWNjZXNzXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoanVkZ2UgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgIHJldHVybiBcImJveC1kYW5nZXJcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBpZiAoaW5zICYmIGlucy5maW5hbF9kZWNpc2lvbikge1xuICAgICAgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICAgIHJldHVybiBcImJveC1zdWNjZXNzXCI7XG4gICAgICB9IGVsc2UgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgIHJldHVybiBcImJveC1kYW5nZXJcIjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHRhYmxlX2ZpZWxkczogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICB2YXIgZmllbGRzLCBmb3JtX3ZlcnNpb247XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbik7XG4gICAgfVxuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIGZpZWxkcyA9IF8uY2xvbmUoZm9ybV92ZXJzaW9uLmZpZWxkcyk7XG4gICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGFmdGVyX2ZpZWxkLCBiZWZvcmVfZmllbGQsIHByZV9maWVsZHMsIHByZV93aWRlX2ZpZWxkcywgdGRfY29sc3BhbiwgdHJfZW5kLCB0cl9zdGFydDtcbiAgICAgICAgZmllbGQudHJfc3RhcnQgPSBcIlwiO1xuICAgICAgICBmaWVsZC50cl9lbmQgPSBcIlwiO1xuICAgICAgICB0ZF9jb2xzcGFuID0gMTtcbiAgICAgICAgaWYgKCh0eXBlb2YgQ29yZUZvcm0gIT09IFwidW5kZWZpbmVkXCIgJiYgQ29yZUZvcm0gIT09IG51bGwgPyBDb3JlRm9ybS5wYWdlVGl0bGVGaWVsZE5hbWUgOiB2b2lkIDApID09PSBmaWVsZC5jb2RlKSB7XG4gICAgICAgICAgZmllbGQuaXNfd2lkZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkLmZvcm11bGEgJiYgZmllbGQudHlwZSAhPT0gJ29kYXRhJykge1xuICAgICAgICAgIGZpZWxkLnBlcm1pc3Npb24gPSBcInJlYWRvbmx5XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgICAgZmllbGQudGRfY29sc3BhbiA9IDQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpZWxkLnRkX2NvbHNwYW4gPSAzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgIGZpZWxkLnRyX3N0YXJ0ID0gXCI8dHI+XCI7XG4gICAgICAgICAgICByZXR1cm4gZmllbGQudHJfZW5kID0gXCI8L3RyPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVfZmllbGRzID0gZmllbGRzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBwcmVfd2lkZV9maWVsZHMgPSBwcmVfZmllbGRzLmZpbHRlclByb3BlcnR5KFwiaXNfd2lkZVwiLCB0cnVlKTtcbiAgICAgICAgICB0cl9zdGFydCA9IFwiXCI7XG4gICAgICAgICAgdHJfZW5kID0gXCJcIjtcbiAgICAgICAgICBiZWZvcmVfZmllbGQgPSBudWxsO1xuICAgICAgICAgIGFmdGVyX2ZpZWxkID0gbnVsbDtcbiAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICBiZWZvcmVfZmllbGQgPSBmaWVsZHNbaW5kZXggLSAxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4IDwgZmllbGRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGFmdGVyX2ZpZWxkID0gZmllbGRzW2luZGV4ICsgMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgICAgdGRfY29sc3BhbiA9IDQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICB0ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGJlZm9yZV9maWVsZCAmJiBhZnRlcl9maWVsZCAmJiBiZWZvcmVfZmllbGQuaXNfd2lkZSAmJiBhZnRlcl9maWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICAgIGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xuICAgICAgICAgICAgICB0ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgPT09IDAgJiYgYWZ0ZXJfZmllbGQgJiYgYWZ0ZXJfZmllbGQuaXNfd2lkZSkge1xuICAgICAgICAgICAgICBmaWVsZC5pc193aWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGRfY29sc3BhbiA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09PSAwICYmIGFmdGVyX2ZpZWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xuICAgICAgICAgICAgICB0ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZmllbGQudGRfY29sc3BhbiA9IHRkX2NvbHNwYW47XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICB0cl9zdGFydCA9IFwiPHRyPlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09PSAwIHx8IGZpZWxkLmlzX3dpZGUpIHtcbiAgICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgICAgICAgICB0cl9zdGFydCA9IFwiPHRyIGNsYXNzID0gXFxcInRyLWNoaWxkLXRhYmxlXFxcIj5cIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cl9zdGFydCA9IFwiPHRyPlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpZWxkLnRyX3N0YXJ0ID0gdHJfc3RhcnQ7XG4gICAgICAgICAgaWYgKGluZGV4ICsgMSA9PT0gZmllbGRzLmxlbmd0aCB8fCBmaWVsZC50eXBlID09PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PT0gJ3RhYmxlJyB8fCBmaWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICB0cl9lbmQgPSBcIjwvdHI+XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgocHJlX2ZpZWxkcy5sZW5ndGggKyBwcmVfd2lkZV9maWVsZHMubGVuZ3RoKSAlIDIgIT09IDApIHtcbiAgICAgICAgICAgIHRyX2VuZCA9IFwiPC90cj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLnRyX2VuZCA9IHRyX2VuZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmllbGRzO1xuICAgIH1cbiAgfSxcbiAgc29ydF9hcHByb3ZlOiBmdW5jdGlvbihhcHByb3Zlcywgb3JkZXIpIHtcbiAgICBpZiAoIWFwcHJvdmVzKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICghYXBwcm92ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3JkZXIgPT09ICdkZXNjJykge1xuICAgICAgICBhcHByb3Zlcy5zb3J0KGZ1bmN0aW9uKHAxLCBwMikge1xuICAgICAgICAgIHZhciBfcDEsIF9wMjtcbiAgICAgICAgICBfcDEgPSAwO1xuICAgICAgICAgIF9wMiA9IDA7XG4gICAgICAgICAgaWYgKHAxLmZpbmlzaF9kYXRlKSB7XG4gICAgICAgICAgICBfcDEgPSBwMS5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwMi5maW5pc2hfZGF0ZSkge1xuICAgICAgICAgICAgX3AyID0gcDIuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3AyIC0gX3AxO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcHJvdmVzLnNvcnQoZnVuY3Rpb24ocDEsIHAyKSB7XG4gICAgICAgICAgdmFyIF9wMSwgX3AyO1xuICAgICAgICAgIF9wMSA9IDA7XG4gICAgICAgICAgX3AyID0gMDtcbiAgICAgICAgICBpZiAocDEuZmluaXNoX2RhdGUpIHtcbiAgICAgICAgICAgIF9wMSA9IHAxLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHAyLmZpbmlzaF9kYXRlKSB7XG4gICAgICAgICAgICBfcDIgPSBwMi5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfcDEgLSBfcDI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZXM7XG4gIH0sXG4gIF90OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXkpO1xuICB9LFxuICBnZXRGaWVsZDogZnVuY3Rpb24oY29kZSkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbjtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKTtcbiAgICB9XG4gIH0sXG4gIGdldFZhbHVlOiBmdW5jdGlvbihjb2RlKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbiwgaW5zdGFuY2UsIGxvY2FsZSwgdXRjT2Zmc2V0LCB2YWx1ZXM7XG4gICAgaW5zdGFuY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuaW5zdGFuY2U7XG4gICAgZm9ybV92ZXJzaW9uID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmZvcm1fdmVyc2lvbjtcbiAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgIHV0Y09mZnNldCA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS51dGNPZmZzZXQ7XG4gICAgdmFsdWVzID0gaW5zdGFuY2UudmFsdWVzIHx8IHt9O1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIHZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgICB9XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSh2YWx1ZXNbY29kZV0sIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSksIGxvY2FsZSwgdXRjT2Zmc2V0KTtcbiAgfSxcbiAgZ2V0TGFiZWw6IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb247XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbChmb3JtX3ZlcnNpb24uZmllbGRzLCBjb2RlKTtcbiAgfSxcbiAgZ2V0Q2ZDbGFzczogZnVuY3Rpb24oZmllbGQpIHtcbiAgICBpZiAoKGZpZWxkICE9IG51bGwgPyBmaWVsZC50eXBlIDogdm9pZCAwKSA9PT0gXCJpbnB1dFwiICYmIChmaWVsZCAhPSBudWxsID8gZmllbGQuaXNfdGV4dGFyZWEgOiB2b2lkIDApKSB7XG4gICAgICByZXR1cm4gXCJjZlRleHRhcmVhXCI7XG4gICAgfVxuICB9LFxuICBnZXRUYWJsZVRoZWFkOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VGhlYWQoZmllbGQsIGZhbHNlKTtcbiAgfSxcbiAgZ2V0VGFibGVCb2R5OiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciBpbnN0YW5jZSwgdGFibGVWYWx1ZSwgdmFsdWVzO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xuICAgICAgdmFsdWVzID0gaW5zdGFuY2UudmFsdWVzIHx8IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gICAgfVxuICAgIHRhYmxlVmFsdWUgPSB2YWx1ZXNbZmllbGQuY29kZV07XG4gICAgcmV0dXJuIFN0ZWVkb3NUYWJsZS5nZXRUYm9keShmaWVsZC5zZmllbGRzLmdldFByb3BlcnR5KFwiY29kZVwiKSwgZmllbGQsIHRhYmxlVmFsdWUsIGZhbHNlKTtcbiAgfSxcbiAgc2hvd0xhYmVsOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciB0ZW1wbGF0ZURhdGE7XG4gICAgdGVtcGxhdGVEYXRhID0gVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhO1xuICAgIGlmICh0ZW1wbGF0ZURhdGEubGFiZWwgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBpc09waW5pb25GaWVsZDogZnVuY3Rpb24oZmllbGQpIHtcbiAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZC5mb3JtdWxhKTtcbiAgfSxcbiAgaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmc6IGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEpIHtcbiAgICByZXR1cm4gSW5zdGFuY2VTaWduVGV4dC5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKTtcbiAgfSxcbiAgaW5jbHVkZXNPcGluaW9uRmllbGQ6IGZ1bmN0aW9uKGZvcm0sIGZvcm1fdmVyc2lvbikge1xuICAgIHZhciBmaWVsZF9mb3JtdWxhcywgZmllbGRzLCByZWY7XG4gICAgZmllbGRfZm9ybXVsYXMgPSBuZXcgQXJyYXkoKTtcbiAgICBmaWVsZHMgPSAoKHJlZiA9IGRiLmZvcm1fdmVyc2lvbnMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZvcm1fdmVyc2lvbixcbiAgICAgIGZvcm06IGZvcm1cbiAgICB9KSkgIT0gbnVsbCA/IHJlZi5maWVsZHMgOiB2b2lkIDApIHx8IFtdO1xuICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICAgIHZhciByZWYxO1xuICAgICAgaWYgKGYudHlwZSA9PT0gJ3RhYmxlJykge1xuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJyk7XG4gICAgICB9IGVsc2UgaWYgKGYudHlwZSA9PT0gJ3NlY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmICE9IG51bGwgPyAocmVmMSA9IGYuZmllbGRzKSAhPSBudWxsID8gcmVmMS5mb3JFYWNoKGZ1bmN0aW9uKGYxKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkX2Zvcm11bGFzLnB1c2goZjEuZm9ybXVsYSk7XG4gICAgICAgIH0pIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkX2Zvcm11bGFzLnB1c2goZi5mb3JtdWxhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gXy5zb21lKGZpZWxkX2Zvcm11bGFzLCBmdW5jdGlvbihmaWVsZF9mb3JtdWxhKSB7XG4gICAgICByZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lOiBmdW5jdGlvbihmaWVsZF9mb3JtdWxhLCB0b3Bfa2V5d29yZHMpIHtcbiAgICB2YXIgZm9vMSwgb3BpbmlvbkZpZWxkcztcbiAgICBvcGluaW9uRmllbGRzID0gbmV3IEFycmF5KCk7XG4gICAgaWYgKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSkpIHtcbiAgICAgIGlmIChmaWVsZF9mb3JtdWxhKSB7XG4gICAgICAgIGZvbzEgPSBmaWVsZF9mb3JtdWxhLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgZm9vMS5mb3JFYWNoKGZ1bmN0aW9uKGZvbykge1xuICAgICAgICAgIHZhciBqc29uX2Zvcm11bGEsIHJlZiwgcmVmMSwgczEsIHNmO1xuICAgICAgICAgIGpzb25fZm9ybXVsYSA9IHt9O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBqc29uX2Zvcm11bGEgPSBldmFsKFwiKFwiICsgZm9vICsgXCIpXCIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgICAganNvbl9mb3JtdWxhID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqc29uX2Zvcm11bGEgIT0gbnVsbCA/IGpzb25fZm9ybXVsYS55aWppYW5sYW4gOiB2b2lkIDApIHtcbiAgICAgICAgICAgIHNmID0ge307XG4gICAgICAgICAgICBzZi5zdGVwTmFtZSA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uc3RlcDtcbiAgICAgICAgICAgIHNmLmltYWdlX3NpZ24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLmltYWdlX3NpZ24gfHwgZmFsc2U7XG4gICAgICAgICAgICBzZi5vbmx5X2NjX29waW5pb24gPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfY2MgfHwgZmFsc2U7XG4gICAgICAgICAgICBzZi5kZWZhdWx0X2Rlc2NyaXB0aW9uID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbltcImRlZmF1bHRcIl07XG4gICAgICAgICAgICBzZi5vbmx5X2hhbmRsZXIgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfaGFuZGxlcjtcbiAgICAgICAgICAgIHNmLnRvcF9rZXl3b3JkcyA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4udG9wX2tleXdvcmRzIHx8IHRvcF9rZXl3b3JkcztcbiAgICAgICAgICAgIHJldHVybiBvcGluaW9uRmllbGRzLnB1c2goc2YpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKGZpZWxkX2Zvcm11bGEgIT0gbnVsbCA/IGZpZWxkX2Zvcm11bGEuaW5kZXhPZihcInt0cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xIHx8IChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7c2lnbmF0dXJlLnRyYWNlcy5cIikgOiB2b2lkIDApID4gLTEpIHtcbiAgICAgICAgICAgIHNmID0ge1xuICAgICAgICAgICAgICBvbmx5X2NjX29waW5pb246IGZhbHNlLFxuICAgICAgICAgICAgICBpbWFnZV9zaWduOiBmYWxzZSxcbiAgICAgICAgICAgICAgdG9wX2tleXdvcmRzOiB0b3Bfa2V5d29yZHNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZm9vLmluZGV4T2YoXCJ7c2lnbmF0dXJlLlwiKSA+IC0xKSB7XG4gICAgICAgICAgICAgIHNmLmltYWdlX3NpZ24gPSB0cnVlO1xuICAgICAgICAgICAgICBmb28gPSBmb28ucmVwbGFjZShcIntzaWduYXR1cmUuXCIsIFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgczEgPSBmb28ucmVwbGFjZShcIntcIiwgXCJcIikucmVwbGFjZShcIn1cIiwgXCJcIik7XG4gICAgICAgICAgICBpZiAoczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgc2Yuc3RlcE5hbWUgPSBzMS5zcGxpdChcIi5cIilbMV07XG4gICAgICAgICAgICAgIGlmIChvcGluaW9uRmllbGRzLmZpbHRlclByb3BlcnR5KFwic3RlcE5hbWVcIiwgc2Yuc3RlcE5hbWUpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoKHJlZiA9IG9waW5pb25GaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcInN0ZXBOYW1lXCIsIHNmLnN0ZXBOYW1lKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcmVmLm9ubHlfY2Nfb3BpbmlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzMS5zcGxpdChcIi5cIikubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgaWYgKCgocmVmMSA9IHMxLnNwbGl0KFwiLlwiKVsyXSkgIT0gbnVsbCA/IHJlZjEudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHZvaWQgMCkgPT09ICdjYycpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Yub25seV9jY19vcGluaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcGluaW9uRmllbGRzLnB1c2goc2YpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcGluaW9uRmllbGRzO1xuICB9LFxuICBzaG93Q0NPcGluaW9uOiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciByZWYsIHJlZjEsIHJlZjIsIHMxO1xuICAgIGlmICgoKHJlZiA9IGZpZWxkLmZvcm11bGEpICE9IG51bGwgPyByZWYuaW5kZXhPZihcInt0cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xIHx8ICgocmVmMSA9IGZpZWxkLmZvcm11bGEpICE9IG51bGwgPyByZWYxLmluZGV4T2YoXCJ7c2lnbmF0dXJlLnRyYWNlcy5cIikgOiB2b2lkIDApID4gLTEpIHtcbiAgICAgIHMxID0gZmllbGQuZm9ybXVsYS5yZXBsYWNlKFwie3NpZ25hdHVyZS5cIiwgXCJcIikucmVwbGFjZShcIntcIiwgXCJcIikucmVwbGFjZShcIn1cIiwgXCJcIik7XG4gICAgICBpZiAoczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgaWYgKCgocmVmMiA9IHMxLnNwbGl0KFwiLlwiKVsyXSkgIT0gbnVsbCA/IHJlZjIudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHZvaWQgMCkgPT09ICdjYycpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIG1hcmtEb3duVG9IdG1sOiBmdW5jdGlvbihtYXJrRG93blN0cmluZykge1xuICAgIHZhciByZW5kZXJlcjtcbiAgICBpZiAobWFya0Rvd25TdHJpbmcpIHtcbiAgICAgIHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XG4gICAgICByZW5kZXJlci5saW5rID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J1wiICsgaHJlZiArIFwiJyB0aXRsZT0nXCIgKyB0aXRsZSArIFwiJz5cIiArIHRleHQgKyBcIjwvYT5cIjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtcbiAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyXG4gICAgICB9KSk7XG4gICAgfVxuICB9LFxuICBmX2xhYmVsOiBmdW5jdGlvbih0aGF0KSB7XG4gICAgcmV0dXJuIHRoYXQubmFtZSB8fCB0aGF0LmNvZGU7XG4gIH1cbn07XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5zdGVlZG9zX2Zvcm0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtX3ZlcnNpb247XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNTZWN0aW9uID0gZnVuY3Rpb24oY29kZSkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gdGhpcy5mb3JtX3ZlcnNpb247XG4gICAgcmV0dXJuIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSkudHlwZSA9PT0gJ3NlY3Rpb24nO1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmRvY192YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zdGFuY2U7XG4gICAgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuICAgIHJldHVybiBpbnN0YW5jZS52YWx1ZXM7XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuYXBwbGljYW50Q29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRhLCBpbnN0YW5jZTtcbiAgICBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XG4gICAgcmV0dXJuIGRhdGEgPSB7XG4gICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICBhdHRzOiB7XG4gICAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgaWQ6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgXCJjbGFzc1wiOiAnc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wgaW5zX2FwcGxpY2FudCdcbiAgICAgIH0sXG4gICAgICB2YWx1ZTogaW5zdGFuY2UuYXBwbGljYW50X25hbWVcbiAgICB9O1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZmllbGRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSB0aGlzLmZvcm1fdmVyc2lvbjtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xuICAgIH1cbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtX3R5cGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiZGlzYWJsZWRcIjtcbiAgfTtcbiAgVGVtcGxhdGUucmVnaXN0ZXJIZWxwZXIoXCJhZkZpZWxkTGFiZWxUZXh0XCIsIGZ1bmN0aW9uKG9wKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbiwgcmVmO1xuICAgIGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb247XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRMYWJlbChmb3JtX3ZlcnNpb24uZmllbGRzLCBvcCAhPSBudWxsID8gKHJlZiA9IG9wLmhhc2gpICE9IG51bGwgPyByZWYubmFtZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gIH0pO1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLl90ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBsb2NhbGUgPSB0aGlzLmxvY2FsZTtcbiAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpO1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc19hdHRhY2hfZG93bmxvYWRfdXJsID0gZnVuY3Rpb24oX2lkLCBhYnNvbHV0ZSkge1xuICAgIGlmIChhYnNvbHV0ZSkge1xuICAgICAgcmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcIi9hcGkvZmlsZXMvaW5zdGFuY2VzL1wiICsgX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvXCIgKyBfaWQgKyBcIj9kb3dubG9hZD10cnVlXCI7XG4gICAgfVxuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLm9wdGlvbnMgPSBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciBvcHRpb25zLCByZWYsIHJldjtcbiAgICBvcHRpb25zID0gZmllbGQgIT0gbnVsbCA/IChyZWYgPSBmaWVsZC5vcHRpb25zKSAhPSBudWxsID8gcmVmLnNwbGl0KFwiXFxuXCIpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIHJldiA9IFtdO1xuICAgIGlmIChvcHRpb25zICE9IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiByZXYucHVzaCh7XG4gICAgICAgICAgbGFiZWw6IGl0ZW0sXG4gICAgICAgICAgdmFsdWU6IGl0ZW1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldjtcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5nZXRQZXJtaXNzaW9ucyA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmICghKChyZWYgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoY29kZSkgOiB2b2lkIDApKSB7XG4gICAgICByZXR1cm4gXCJyZWFkb25seSBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfTtcbn1cblxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUuZXZlbnRzID0ge1xuICAnY2hhbmdlIC5mb3JtLWNvbnRyb2wsLmNoZWNrYm94IGlucHV0LC5hZi1yYWRpby1ncm91cCBpbnB1dCwuYWYtY2hlY2tib3gtZ3JvdXAgaW5wdXQnOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiBJbnN0YW5jZU1hbmFnZXIuaW5zdGFuY2Vmb3JtQ2hhbmdlRXZlbnQoZXZlbnQpO1xuICB9LFxuICAndHlwZWFoZWFkOmNoYW5nZSAuZm9ybS1jb250cm9sJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gSW5zdGFuY2VNYW5hZ2VyLmluc3RhbmNlZm9ybUNoYW5nZUV2ZW50KGV2ZW50KTtcbiAgfSxcbiAgJ2NsaWNrIC5jZlRleHRhcmVhIGEnOiBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuIFN0ZWVkb3Mub3BlbldpbmRvdyhldmVudC50YXJnZXQuaHJlZik7XG4gIH1cbn07XG5cbkluc3RhbmNlZm9ybVRlbXBsYXRlLm9uQ3JlYXRlZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29tcGlsZWQsIGUsIGluc3RhbmNlLCBpbnN0YW5jZUN1c3RvbVRlbXBsYXRlLCBpbnN0YW5jZVZpZXcsIHJlbmRlckZ1bmN0aW9uLCB0ZW1wbGF0ZTtcbiAgaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgaWYgKCFpbnN0YW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB0ZW1wbGF0ZSA9IFRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZShpbnN0YW5jZSk7XG4gIHRyeSB7XG4gICAgY29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRlbXBsYXRlLCB7XG4gICAgICBpc0JvZHk6IHRydWVcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgZSA9IGVycm9yMTtcbiAgICBjb25zb2xlLmxvZyhcIkluc3RhbmNlIFRlbXBsYXRlIEVycm9yXCIsIGUpO1xuICAgIGNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShcIlwiLCB7XG4gICAgICBpc0JvZHk6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZW5kZXJGdW5jdGlvbiA9IGV2YWwoY29tcGlsZWQpO1xuICBpbnN0YW5jZVZpZXcgPSBuZXcgQmxhemUuVmlldyhcImN1c3RvbV9pbnN0YW5jZV90ZW1wbGF0ZVwiLCByZW5kZXJGdW5jdGlvbik7XG4gIGluc3RhbmNlQ3VzdG9tVGVtcGxhdGUgPSBuZXcgQmxhemUuVGVtcGxhdGUoaW5zdGFuY2VWaWV3Lm5hbWUsIHJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlID0gaW5zdGFuY2VDdXN0b21UZW1wbGF0ZTtcbiAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlX2N1c3RvbV90ZW1wbGF0ZS5oZWxwZXJzKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMpO1xufTtcblxuSW5zdGFuY2Vmb3JtVGVtcGxhdGUub25SZW5kZXJlZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VycmVudEFwcHJvdmUsIGN1cnJlbnRTdGVwLCBmb3JtX3ZlcnNpb24sIGZvcm11bGFfZmllbGRzLCBpbnN0YW5jZSwgaW5zdGFuY2VOdW1iZXJGaWVsZHMsIGp1ZGdlLCByZWY7XG4gIGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gIGlmICghaW5zdGFuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKChyZWYgPSAkKFwiaW5wdXRbbmFtZT0naW5zX2FwcGxpY2FudCddXCIpWzBdKSAhPSBudWxsKSB7XG4gICAgcmVmLmRhdGFzZXQudmFsdWVzID0gaW5zdGFuY2UuYXBwbGljYW50O1xuICB9XG4gICQoXCJpbnB1dFtuYW1lPSdpbnNfYXBwbGljYW50J11cIikudmFsKGluc3RhbmNlLmFwcGxpY2FudF9uYW1lKTtcbiAgQXBwcm92ZU1hbmFnZXIuZXJyb3IgPSB7XG4gICAgbmV4dFN0ZXBzOiAnJyxcbiAgICBuZXh0U3RlcFVzZXJzOiAnJ1xuICB9O1xuICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdkcmFmdCcpIHtcbiAgICBJbnN0YW5jZUV2ZW50LmluaXRFdmVudHMoaW5zdGFuY2UuZmxvdyk7XG4gIH1cbiAgaWYgKCFBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KCkpIHtcbiAgICBjdXJyZW50QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSgpO1xuICAgIGluc3RhbmNlTnVtYmVyRmllbGRzID0gJChcIltkYXRhLWZvcm11bGFdXCIsICQoXCIjaW5zdGFuY2Vmb3JtXCIpKTtcbiAgICBpbnN0YW5jZU51bWJlckZpZWxkcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVsZW1lbnQsIHNjaGVtYUtleTtcbiAgICAgIHNjaGVtYUtleSA9IHRoaXMuZGF0YXNldC5zY2hlbWFLZXk7XG4gICAgICBlbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgIGlmICghJCh0aGlzKS52YWwoKSAmJiBzY2hlbWFLZXkgJiYgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKSB7XG4gICAgICAgIHJldHVybiBNZXRlb3IuY2FsbCgnZ2V0SW5zdGFuY2VWYWx1ZXMnLCBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIiksIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgICB2YXIga2V5LCByZWYxO1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKGVycm9yLnJlYXNvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcmVzdWx0W3NjaGVtYUtleV0pIHtcbiAgICAgICAgICAgIGtleSA9IChyZWYxID0gZWxlbWVudC5kYXRhKFwiZm9ybXVsYVwiKSkgIT0gbnVsbCA/IHJlZjEucmVwbGFjZShcImF1dG9fbnVtYmVyKFwiLCBcIlwiKS5yZXBsYWNlKFwiKVwiLCBcIlwiKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGtleSA9IGtleS5yZXBsYWNlKC9cXFwiL2csIFwiXCIpLnJlcGxhY2UoL1xcJy9nLCBcIlwiKTtcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihcIntcIikgPiAtMSkge1xuICAgICAgICAgICAgICBrZXkgPSBrZXkucmVwbGFjZShcIntcIiwgXCJcIikucmVwbGFjZShcIn1cIiwgXCJcIik7XG4gICAgICAgICAgICAgIGtleSA9IGtleS50cmltKCk7XG4gICAgICAgICAgICAgIGtleSA9IEF1dG9Gb3JtLmdldEZpZWxkVmFsdWUoa2V5LCAnaW5zdGFuY2Vmb3JtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSW5zdGFuY2VOdW1iZXJSdWxlcy5pbnN0YW5jZU51bWJlckJ1aWxkZXIoZWxlbWVudCwga2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgIT0gbnVsbCA/IGVsZW1lbnQudmFsKHJlc3VsdFtzY2hlbWFLZXldKS50cmlnZ2VyKFwiY2hhbmdlXCIpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAganVkZ2UgPSBjdXJyZW50QXBwcm92ZS5qdWRnZTtcbiAgICBjdXJyZW50U3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgZm9ybXVsYV9maWVsZHMgPSBGb3JtX2Zvcm11bGEuZ2V0Rm9ybXVsYUZpZWxkVmFyaWFibGUoXCJGb3JtX2Zvcm11bGEuZmllbGRfdmFsdWVzXCIsIGZvcm1fdmVyc2lvbi5maWVsZHMpO1xuICAgIEZvcm1fZm9ybXVsYS5ydW4oXCJcIiwgXCJcIiwgZm9ybXVsYV9maWVsZHMsIEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jLCBmb3JtX3ZlcnNpb24uZmllbGRzKTtcbiAgICByZXR1cm4gU2Vzc2lvbi5zZXQoXCJpbnN0YW5jZV9mb3JtX3ZhbHVlc1wiLCB7XG4gICAgICBpbnN0YW5jZUlkOiBpbnN0YW5jZS5faWQsXG4gICAgICB2YWx1ZXM6IEF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJpbnN0YW5jZWZvcm1cIikuaW5zZXJ0RG9jXG4gICAgfSk7XG4gIH1cbn07XG4iLCJJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzID0ge1xuXG5cdHNob3dNYWluVGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLndvcmtmbG93TWFpbkF0dGFjaFRpdGxlLmdldCgpO1xuXHR9LFxuXHRlbmFibGVkX2FkZF9tYWluX2F0dGFjaG1lbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0XHRpZiAoIWlucylcblx0XHRcdHJldHVybiBmYWxzZVxuXG5cdFx0aWYgKFNlc3Npb24gJiYgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpKVxuXHRcdFx0cmV0dXJuIGZhbHNlXG5cblx0XHRpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgIT0gXCJkcmFmdFwiICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9IFwiaW5ib3hcIikge1xuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0fVxuXG5cdFx0Ly8g5bey57uP57uT5p2f55qE5Y2V5a2Q5LiN6IO95pS56ZmE5Lu2XG5cdFx0aWYgKGlucy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9XG5cblx0XHR2YXIgY3VycmVudF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XG5cblx0XHRpZiAoIWN1cnJlbnRfc3RlcClcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdC8vIOWIhuWPkeeahOato+aWh+aIluiAhemZhOS7tuS4jeaYvuekuui9rOS4unBkZuaMiemSrlxuXHRcdC8vIOWmguaenOacieato+aWh+adg+mZkOWImeS4uuato+aWh++8jOWQpuWImeWIhuWPkeS4uumZhOS7tlxuXHRcdC8vIOWIhuWPkeeahOmZhOS7tuS4jeWFgeiuuOS/ruaUuSDliKDpmaQg5paw5aKe54mI5pysXG5cdFx0dmFyIG1haW5fYXR0YWNoX2NvdW50ID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcblx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGlucy5faWQsXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcblx0XHR9KS5jb3VudCgpO1xuXG5cdFx0dmFyIGRpc3RyaWJ1dGVfbWFpbl9hdHRhY2hfY291bnQgPSAwO1xuXG5cdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcblx0XHRcdHZhciBzdGFydF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldFN0YXJ0U3RlcCgpO1xuXHRcdFx0aWYgKHN0YXJ0X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2gpIHtcblx0XHRcdFx0dmFyIGRpc3RyaWJ1dGVfbWFpbl9hdHRhY2hfY291bnQgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuXHRcdFx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UsXG5cdFx0XHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuXHRcdFx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxuXHRcdFx0XHR9KS5jb3VudCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggPT0gdHJ1ZSAmJiBtYWluX2F0dGFjaF9jb3VudCA8IDEgJiYgZGlzdHJpYnV0ZV9tYWluX2F0dGFjaF9jb3VudCA8IDEpIHtcblx0XHRcdHJldHVybiB0cnVlXG5cdFx0fVxuXG5cdFx0Ly8g5q2j5paH5pyA5aSa5Y+q6IO95pyJ5LiA5LiqXG5cdFx0aWYgKG1haW5fYXR0YWNoX2NvdW50ID49IDEgfHwgZGlzdHJpYnV0ZV9tYWluX2F0dGFjaF9jb3VudCA+PSAxKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8g5byA5aeL6IqC54K55bm25LiU6K6+572u5LqG5Y+v5Lul5LiK5Lyg5q2j5paH5omN5pi+56S65LiK5Lyg5q2j5paH55qE5oyJ6ZKuXG5cdFx0dmFyIGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xuXHRcdGlmIChjdXJyZW50X3N0ZXAgJiYgY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PSBcInN0YXJ0XCIgJiYgY3VycmVudF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoID09IHRydWUpXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXG5cdFx0cmV0dXJuIGZhbHNlXG5cdH0sXG5cblx0ZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdFx0aWYgKCFpbnMpXG5cdFx0XHRyZXR1cm4gZmFsc2VcblxuXHRcdGlmIChTZXNzaW9uICYmIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSlcblx0XHRcdHJldHVybiBmYWxzZVxuXG5cdFx0dmFyIGZsb3cgPSBXb3JrZmxvd01hbmFnZXIuZ2V0RmxvdyhpbnMuZmxvdyk7XG5cdFx0aWYgKCFmbG93KVxuXHRcdFx0cmV0dXJuIGZhbHNlXG5cblxuXHRcdC8vIOWIhuWPkeWQjueahCDpmYTku7bvvIzkuI3lj6/ku6XnvJbovpEv5Yig6Zmk77yM5Lmf5LiN6K6p5LiK5Lyg5paw55qE6ZmE5Lu2LCDmtYHnqIvliJfooajvvJrmt7vliqDlsZ7mgKcg4oCY6KKr5YiG5Y+R5ZCO5piv5ZCm5YWB6K645LiK5Lyg6ZmE5Lu24oCZICMxODM3XG5cdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UgJiYgIWZsb3cudXBsb2FkX2FmdGVyX2JlaW5nX2Rpc3RyaWJ1dGVkKVxuXHRcdFx0cmV0dXJuIGZhbHNlXG5cblx0XHRpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgIT0gXCJkcmFmdFwiICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9IFwiaW5ib3hcIikge1xuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0fVxuXG5cdFx0Ly8g5bey57uP57uT5p2f55qE5Y2V5a2Q5LiN6IO95pS56ZmE5Lu2XG5cdFx0aWYgKGlucy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9XG5cblx0XHRpZiAoSW5zdGFuY2VNYW5hZ2VyLmlzQ0MoaW5zKSkge1xuXHRcdFx0dmFyIHN0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q0NTdGVwKCk7XG5cdFx0XHRpZiAoc3RlcCAmJiAoc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHRydWUgfHwgc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHVuZGVmaW5lZCkpXG5cdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBjdXJyZW50X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcblx0XHRcdGlmIChjdXJyZW50X3N0ZXAgJiYgKGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHRydWUgfHwgY3VycmVudF9zdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdW5kZWZpbmVkKSlcblx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2Vcblx0fSxcblxuXHRtYWluX2F0dGFjaG1lbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0XHRpZiAoIWlucylcblx0XHRcdHJldHVybiBmYWxzZVxuXG5cdFx0dmFyIHN0YXJ0X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0U3RhcnRTdGVwKCk7XG5cblx0XHQvLyDlpoLmnpzmmK/ooqvliIblj5HnmoTnlLPor7fljZXlubbkuJTmnInkv67mlLnmraPmlofnmoTmnYPpmZDvvIzliJnkvJjlhYjmmL7npLrljp/nlLPor7fljZXmlofku7Zcblx0XHR2YXIgbWFpbl9hdHRhY2ggPSBudWxsO1xuXHRcdGlmIChpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlICYmIHN0YXJ0X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggPT0gdHJ1ZSkge1xuXHRcdFx0bWFpbl9hdHRhY2ggPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoe1xuXHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlLFxuXHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG5cdFx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFtYWluX2F0dGFjaCkge1xuXHRcdFx0bWFpbl9hdHRhY2ggPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoe1xuXHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnMuX2lkLFxuXHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG5cdFx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1haW5fYXR0YWNoO1xuXHR9LFxuXG5cdG5vcm1hbF9hdHRhY2htZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHRcdGlmICghaW5zKVxuXHRcdFx0cmV0dXJuIGZhbHNlXG5cblx0XHR2YXIgc2VsZWN0b3IgPSB7XG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHtcblx0XHRcdFx0JG5lOiB0cnVlXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHR2YXIgYXR0cyA9IG5ldyBBcnJheSgpO1xuXG5cdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcblx0XHRcdC8vIOWmguaenOaYr+iiq+WIhuWPkeeahOeUs+ivt+WNle+8jOWImeaYvuekuuWOn+eUs+ivt+WNleaWh+S7tiwg5aaC5p6c6YCJ5oup5LqG5bCG5Y6f6KGo5Y2V5a2Y5YKo5Li66ZmE5Lu25Lmf6KaB5pi+56S6LCDlkIzml7bkuZ/opoHmmL7npLrmlrDkuIrkvKDnmoTpmYTku7Zcblx0XHRcdHZhciBkZmlzID0gXy5jbG9uZShpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XG5cdFx0XHRkZmlzLnB1c2goaW5zLl9pZCk7XG5cdFx0XHRzZWxlY3RvclsnbWV0YWRhdGEuaW5zdGFuY2UnXSA9IHtcblx0XHRcdFx0JGluOiBkZmlzXG5cdFx0XHR9O1xuXG5cblx0XHRcdHNlbGVjdG9yW1wiJG9yXCJdID0gW3tcblx0XHRcdFx0XCJtZXRhZGF0YS5pbnN0YW5jZVwiOiBpbnMuX2lkXG5cdFx0XHR9LCB7XG5cdFx0XHRcdFwibWV0YWRhdGEuaW5zdGFuY2VcIjoge1xuXHRcdFx0XHRcdCRpbjogaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcblx0XHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdFx0fVxuXHRcdFx0fV1cblxuXHRcdFx0Ly8g5aaC5p6c5Y6f55Sz6K+35Y2V5pyJ5q2j5paH5L2G5piv5YiG5Y+R5ZCO5rKh5pyJ5q2j5paH5p2D6ZmQ77yM5YiZ5Y6f55Sz6K+35Y2V5q2j5paH5pi+56S65Zyo6ZmE5Lu25qCPXG5cdFx0XHR2YXIgc3RhcnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRTdGFydFN0ZXAoKTtcblx0XHRcdGlmIChzdGFydF9zdGVwICYmIHN0YXJ0X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggIT0gdHJ1ZSkge1xuXHRcdFx0XHR2YXIgZGlzdHJpYnV0ZV9tYWluID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKHtcblx0XHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XG5cdFx0XHRcdFx0XHQkaW46IGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG5cdFx0XHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYgKGRpc3RyaWJ1dGVfbWFpbikge1xuXHRcdFx0XHRcdHZhciBmaXJzdFZlcnNpb25NYWluID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKGRpc3RyaWJ1dGVfbWFpbi5tZXRhZGF0YS5wYXJlbnQpO1xuXHRcdFx0XHRcdGRpc3RyaWJ1dGVfbWFpbi5hdHRhY2htZW50VXBsb2FkZWRBdCA9IGZpcnN0VmVyc2lvbk1haW4gPyBmaXJzdFZlcnNpb25NYWluLnVwbG9hZGVkQXQgOiBkaXN0cmlidXRlX21haW4udXBsb2FkZWRBdDtcblx0XHRcdFx0XHRhdHRzLnB1c2goZGlzdHJpYnV0ZV9tYWluKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZWxlY3RvclsnbWV0YWRhdGEuaW5zdGFuY2UnXSA9IGlucy5faWQ7XG5cdFx0fVxuXG5cdFx0Y2ZzLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yKS5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcblx0XHRcdHZhciBmaXJzdFZlcnNpb24gPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoYy5tZXRhZGF0YS5wYXJlbnQpO1xuXHRcdFx0Yy5hdHRhY2htZW50VXBsb2FkZWRBdCA9IGZpcnN0VmVyc2lvbiA/IGZpcnN0VmVyc2lvbi51cGxvYWRlZEF0IDogYy51cGxvYWRlZEF0O1xuXHRcdFx0YXR0cy5wdXNoKGMpO1xuXHRcdH0pXG5cblx0XHRyZXR1cm4gXy5zb3J0QnkoYXR0cywgJ2F0dGFjaG1lbnRVcGxvYWRlZEF0Jyk7XG5cdH0sXG5cblx0c2hvd0F0dGFjaG1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdFx0aWYgKCFpbnMpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHQvLyDlpoLmnpzmmK/ooqvliIblj5HnmoTnlLPor7fljZXvvIzliJnmmL7npLrljp/nlLPor7fljZXmlofku7Yg5ZKM5YiG5Y+R5ZCO55Sz6K+35Y2V5paH5Lu2XG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jbG9uZShpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XG5cdFx0aW5zdGFuY2VJZHMucHVzaChpbnMuX2lkKTtcblx0XHR2YXIgYXR0YWNobWVudHNfY291bnQgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuXHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzoge1xuXHRcdFx0XHQkaW46IGluc3RhbmNlSWRzXG5cdFx0XHR9LFxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXG5cdFx0fSkuY291bnQoKTtcblxuXHRcdGlmIChTZXNzaW9uICYmIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSAmJiBhdHRhY2htZW50c19jb3VudCA8IDEpXG5cdFx0XHRyZXR1cm4gZmFsc2VcblxuXHRcdGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PSBcImRyYWZ0XCIgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gXCJpbmJveFwiIHx8IGF0dGFjaG1lbnRzX2NvdW50ID4gMClcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfdDogZnVuY3Rpb24oa2V5KSB7XG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxuXHR9LFxuXG5cdF86IGZ1bmN0aW9uKGtleSkge1xuXHRcdHZhciBsb2NhbGU7XG5cdFx0aWYgKE1ldGVvci5pc0NsaWVudCkge1xuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcblx0XHRcdHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSk7XG5cdFx0fVxuXHR9LFxuXG5cdGZsb3dfZmlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0XHRpZiAoIWlucylcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRyZXR1cm4gY2ZzLmZpbGVzLmZpbmQoeyAnbWV0YWRhdGEuc3BhY2UnOiBpbnMuc3BhY2UsICdtZXRhZGF0YS5vYmplY3RfbmFtZSc6ICdmbG93cycsICdtZXRhZGF0YS5yZWNvcmRfaWQnOiBpbnMuZmxvdyB9KTtcblx0fSxcblxuXHRpc0RyYWZ0QW5kRmxvd2ZpbGVzRXhpc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0XHRpZiAoIWlucylcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRyZXR1cm4gKFNlc3Npb24uZ2V0KCdib3gnKSA9PSAnZHJhZnQnKSAmJiAhIWNmcy5maWxlcy5maW5kKHsgJ21ldGFkYXRhLnNwYWNlJzogaW5zLnNwYWNlLCAnbWV0YWRhdGEub2JqZWN0X25hbWUnOiAnZmxvd3MnLCAnbWV0YWRhdGEucmVjb3JkX2lkJzogaW5zLmZsb3cgfSkuY291bnQoKTtcblx0fVxuXG5cbn1cblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLl90ID0gZnVuY3Rpb24oa2V5KSB7XG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxuXHRcdHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSlcblx0fVxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLmVuYWJsZWRfYWRkX21haW5fYXR0YWNobWVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9O1xuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLmVuYWJsZWRfZWRpdF9ub3JtYWxfYXR0YWNobWVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9O1xuXG5cdEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMubWFpbl9hdHRhY2htZW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xuXHRcdHZhciBpbnN0YW5jZUlkcyA9IF8uY29tcGFjdChbaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlLCBpbnN0YW5jZS5faWRdKTtcblx0XHR2YXIgYXR0YWNobWVudCA9IGNmcy5pbnN0YW5jZXMuZmluZE9uZSh7XG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcblx0XHRcdH0sXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcblx0XHR9KTtcblxuXHRcdHJldHVybiBhdHRhY2htZW50O1xuXHR9O1xuXG5cdEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMubm9ybWFsX2F0dGFjaG1lbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHN0ZWVkb3NEYXRhID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhXG5cdFx0dmFyIGluc3RhbmNlID0gc3RlZWRvc0RhdGEuaW5zdGFuY2U7XG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jbG9uZShpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzKSB8fCBbXTtcblx0XHRpbnN0YW5jZUlkcy5wdXNoKGluc3RhbmNlLl9pZCk7XG5cdFx0dmFyIGF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcblx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcblx0XHRcdFx0JGluOiBpbnN0YW5jZUlkc1xuXHRcdFx0fSxcblx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcblx0XHRcdCdtZXRhZGF0YS5tYWluJzoge1xuXHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHQkb3I6IFt7XG5cdFx0XHRcdCdtZXRhZGF0YS5pc19wcml2YXRlJzoge1xuXHRcdFx0XHRcdCRuZTogdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9LCB7XG5cdFx0XHRcdCdtZXRhZGF0YS5pc19wcml2YXRlJzogdHJ1ZSxcblx0XHRcdFx0XCJtZXRhZGF0YS5vd25lclwiOiBzdGVlZG9zRGF0YS51c2VySWRcblx0XHRcdH1dXG5cdFx0fSkuZmV0Y2goKTtcblxuXHRcdHJldHVybiBhdHRhY2htZW50cztcblx0fTtcblxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLnNob3dBdHRhY2htZW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZTtcblx0XHR2YXIgaW5zdGFuY2VJZHMgPSBfLmNsb25lKGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMpIHx8IFtdO1xuXHRcdGluc3RhbmNlSWRzLnB1c2goaW5zdGFuY2UuX2lkKTtcblxuXHRcdHZhciBhdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcblx0XHRcdH0sXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcblx0XHR9KS5mZXRjaCgpO1xuXG5cdFx0aWYgKGF0dGFjaG1lbnRzICYmIGF0dGFjaG1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLnNob3dNYWluVGl0bGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW5zdGFuY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuaW5zdGFuY2U7XG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jb21wYWN0KFtpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UsIGluc3RhbmNlLl9pZF0pO1xuXHRcdHZhciBtYWluX2F0dGFjaF9jb3VudCA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcblx0XHRcdH0sXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcblx0XHR9KS5jb3VudCgpO1xuXG5cdFx0cmV0dXJuIG1haW5fYXR0YWNoX2NvdW50ID4gMFxuXHR9XG59XG4iLCJJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMgPVxuXHRzaG93OiAoc3RlcE5hbWUpLT5cblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcblx0XHRcdGlmIFNlc3Npb24uZ2V0KCdpbnN0YW5jZVByaW50Jylcblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0XHRpZiBJbnN0YW5jZU1hbmFnZXIuaXNJbmJveCgpXG5cdFx0XHRcdG15QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSgpXG5cdFx0XHRcdGlmIG15QXBwcm92ZVxuXHRcdFx0XHRcdGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdFx0XHRcdFx0bXlUcmFjZSA9IGluc3RhbmNlPy50cmFjZXM/LmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgbXlBcHByb3ZlLnRyYWNlKVxuXHRcdFx0XHRcdHJldHVybiBteVRyYWNlPy5uYW1lID09IHN0ZXBOYW1lXG5cdFx0cmV0dXJuIGZhbHNlXG5cblx0ZGVmYXVsdERlc2NyaXB0aW9uOiAoKS0+XG4jXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvbiB8fCBUQVBpMThuLl9fKFwiaW5zdGFuY2VfZGVmYXVsdF9vcGluaW9uXCIpXG5cdFx0cmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uXG5cblx0dHJhY2VzOiAoKS0+XG5cdFx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50cmFjZXMoKVxuXG5cdHRyYWNlOiAoc3RlcE5hbWUsIG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbiwgdG9wX2tleXdvcmRzKS0+XG5cdFx0aW5zdGFuY2UgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc3RhbmNlKClcblxuXHRcdGlzX2NvbXBsZXRlZCA9IGluc3RhbmNlPy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiXG5cblx0XHRjb21wbGV0ZWRfZGF0ZSA9IGlmIGlzX2NvbXBsZXRlZCB0aGVuIF8ubGFzdChpbnN0YW5jZS50cmFjZXMpPy5maW5pc2hfZGF0ZT8uZ2V0VGltZSgpIGVsc2UgMFxuXG5cdFx0aWYgaXNfY29tcGxldGVkICYmIGluc3RhbmNlLmZpbmlzaF9kYXRlXG5cdFx0XHRjb21wbGV0ZWRfZGF0ZSA9IGluc3RhbmNlLmZpbmlzaF9kYXRlPy5nZXRUaW1lKClcblxuXHRcdHRyYWNlcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKClcblxuXHRcdGFwcHJvdmVzID0gXy5jbG9uZSh0cmFjZXNbc3RlcE5hbWVdKVxuXG5cdFx0YXBwcm92ZV9zb3J0ID0gKGFwcHJvdmVzLCB0b3Bfa2V5d29yZHMpLT5cblxuI+WvuUFwcHJvdmVz5o6S5bqP77yMIOaMieeFp+aPkOS6pOaXtumXtOaOkuWAkuW6j++8jOWmguaenOayoeacieaPkOS6pOWImeaYvuekuuWcqOacgOS4iui+uVxuXHRcdFx0YXBwcm92ZXNfc29ydGVkID0gXy5zb3J0QnkgYXBwcm92ZXMsIChhcHByb3ZlKS0+XG5cdFx0XHRcdHJldHVybiAtKGFwcHJvdmUuZmluaXNoX2RhdGUgfHwgbmV3IERhdGUoKSkuZ2V0VGltZSgpXG5cblx0XHRcdCPpgJrov4flhbPplK7lrZfmjpLluo9cblx0XHRcdGlmIHRvcF9rZXl3b3Jkc1xuXHRcdFx0XHR0b3BfYXBwcm92ZXMgPSBuZXcgQXJyYXkoKVxuXG5cdFx0XHRcdHRvcF9rZXl3b3Jkcy5zcGxpdChcIixcIikuZm9yRWFjaCAoa2V5KSAtPlxuXHRcdFx0XHRcdHRvcF9hcHByb3ZlcyA9IF8udW5pb24gdG9wX2FwcHJvdmVzLCBfLmZpbHRlcihhcHByb3Zlc19zb3J0ZWQsIChhcHByb3ZlKS0+XG5cdFx0XHRcdFx0XHRyZXR1cm4gYXBwcm92ZT8uaGFuZGxlcl9uYW1lPy5pbmRleE9mKGtleSkgPiAtMVxuXHRcdFx0XHRcdClcblx0XHRcdFx0IyDlr7nnva7pobbmhI/op4HmjInnhaflpITnkIbkuovku7bmjpLlgJLluo9cblx0XHRcdFx0dG9wX2FwcHJvdmVzID0gXy5zb3J0QnkgdG9wX2FwcHJvdmVzLCAodG9wX2FwcHJvdmUpLT5cblx0XHRcdFx0XHRyZXR1cm4gLSh0b3BfYXBwcm92ZS5maW5pc2hfZGF0ZSB8fCBuZXcgRGF0ZSgpKS5nZXRUaW1lKClcblxuXHRcdFx0XHRhcHByb3Zlc19zb3J0ZWQgPSBfLnVuaW9uIHRvcF9hcHByb3ZlcywgYXBwcm92ZXNfc29ydGVkXG5cdFx0XHRyZXR1cm4gYXBwcm92ZXNfc29ydGVkIHx8IFtdXG5cblx0XHRhcHByb3ZlcyA9IF8uZmlsdGVyIGFwcHJvdmVzLCAoYSktPlxuXHRcdFx0cmV0dXJuIGEudHlwZSBpc250IFwiZm9yd2FyZFwiIGFuZCBhLnR5cGUgaXNudCBcImRpc3RyaWJ1dGVcIiBhbmQgYS50eXBlIGlzbnQgXCJ0ZXJtaW5hdGVkXCJcblxuXHRcdGlmIG9ubHlfY2Nfb3BpbmlvblxuXHRcdFx0YXBwcm92ZXMgPSBhcHByb3Zlcz8uZmlsdGVyUHJvcGVydHkoXCJ0eXBlXCIsIFwiY2NcIilcblxuXHRcdGFwcHJvdmVzX3NvcnRlZCA9IGFwcHJvdmVfc29ydChhcHByb3ZlcywgdG9wX2tleXdvcmRzKVxuXG5cdFx0YXBwcm92ZXNHcm91cCA9IF8uZ3JvdXBCeShhcHByb3ZlcywgXCJoYW5kbGVyXCIpO1xuXG5cdFx0aGFzTmV4dCA9IChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSAtPlxuXHRcdFx0aGFuZGxlckFwcHJvdmVzID0gYXBwcm92ZXNHcm91cFthcHByb3ZlLmhhbmRsZXJdXG5cdFx0XHRyZXR1cm4gXy5pbmRleE9mKGhhbmRsZXJBcHByb3ZlcywgYXBwcm92ZSkgKyAxIDwgaGFuZGxlckFwcHJvdmVzLmxlbmd0aFxuXG5cdFx0aGF2ZURlc2NyaXB0aW9uQXBwcm92ZSA9IChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSAtPlxuXHRcdFx0aGFuZGxlckFwcHJvdmVzID0gYXBwcm92ZXNHcm91cFthcHByb3ZlLmhhbmRsZXJdXG5cblx0XHRcdGRlc2NyaXB0aW9uQXBwcm92ZXMgPSBfLmZpbHRlciBoYW5kbGVyQXBwcm92ZXMsIChhKS0+XG5cdFx0XHRcdGlmIGEuZGVzY3JpcHRpb25cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdFx0XHRyZXR1cm4gZmFsc2VcblxuXHRcdFx0aWYgZGVzY3JpcHRpb25BcHByb3Zlcy5sZW5ndGggPT0gMFxuXHRcdFx0XHRyZXR1cm4gZmFsc2VcblxuXHRcdFx0cmV0dXJuIHRydWVcblxuXG5cdFx0YXBwcm92ZXNfc29ydGVkLmZvckVhY2ggKGFwcHJvdmUpIC0+XG4jXHRcdFx05pyJ6L6T5YWl5oSP6KeBIOaIliDmnIDmlrDkuIDmnaHlubbkuJTnlKjmiLfmsqHmnInovpPlhaXov4fmhI/op4FcbiNcdFx0XHRpZiAhYXBwcm92ZS5pc19maW5pc2hlZCB8fCBhcHByb3ZlLmRlc2NyaXB0aW9uIHx8ICghaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSAmJiAhaGF2ZURlc2NyaXB0aW9uQXBwcm92ZShhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSlcbiNcdFx0XHRpZiAhaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKVxuXHRcdFx0aWYgYXBwcm92ZS5zaWduX3Nob3cgIT0gZmFsc2UgJiYgKGFwcHJvdmUuZGVzY3JpcHRpb24gfHwgKCFhcHByb3ZlLmRlc2NyaXB0aW9uICYmICFoYXNOZXh0KGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApKSApXG5cdFx0XHRcdGlmIGFwcHJvdmUuanVkZ2UgaXNudCAndGVybWluYXRlZCdcblx0XHRcdFx0XHRhcHByb3ZlLl9kaXNwbGF5ID0gdHJ1ZVxuXG5cdFx0YXBwcm92ZXNfc29ydGVkID0gXy5maWx0ZXIgYXBwcm92ZXNfc29ydGVkLCAoYSkgLT5cblx0XHRcdGlmIGlzX2NvbXBsZXRlZFxuXHRcdFx0XHRyZXR1cm4gYS5fZGlzcGxheSA9PSB0cnVlICYmIGEuaXNfZmluaXNoZWQgJiYgYS5maW5pc2hfZGF0ZT8uZ2V0VGltZSgpIDw9IGNvbXBsZXRlZF9kYXRlXG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBhLl9kaXNwbGF5ID09IHRydWVcblxuXHRcdHJldHVybiBhcHByb3Zlc19zb3J0ZWRcblxuXHRpbmNsdWRlOiAoYSwgYikgLT5cblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlKGEsIGIpXG5cblx0dW5lbXB0eTogKHZhbCktPlxuXHRcdHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnVuZW1wdHkodmFsKVxuXG5cdGZvcm1hdERhdGU6IChkYXRlLCBvcHRpb25zKS0+XG5cdFx0aWYgIW9wdGlvbnNcblx0XHRcdG9wdGlvbnMgPSB7XCJmb3JtYXRcIjogXCJZWVlZLU1NLUREXCJ9XG5cblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5mb3JtYXREYXRlKGRhdGUsIG9wdGlvbnMpXG5cblx0aXNNeUFwcHJvdmU6IChhcHByb3ZlLCBvbmx5X2NjX29waW5pb24pIC0+XG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XG5cdFx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuXHRcdFx0Y3VycmVudEFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKVxuXG5cdFx0XHRpZiAhYXBwcm92ZT8uX2lkXG5cdFx0XHRcdGFwcHJvdmUgPSBjdXJyZW50QXBwcm92ZVxuXG5cdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBjdXJyZW50QXBwcm92ZT8uX2lkICYmIGN1cnJlbnRBcHByb3ZlPy50eXBlID09ICdjYycgJiYgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWVcblx0XHRcdFx0aWYgXy5pbmRleE9mKGN1cnJlbnRBcHByb3ZlPy5vcGluaW9uX2ZpZWxkc19jb2RlLCBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZSkgPiAtMVxuXHRcdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2VcblxuXHRcdFx0aWYgIShjdXJyZW50QXBwcm92ZT8udHlwZSA9PSAnY2MnKSAmJiBvbmx5X2NjX29waW5pb25cblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cblx0XHRcdGlmIGN1cnJlbnRBcHByb3ZlICYmIGFwcHJvdmUuX2lkID09IGN1cnJlbnRBcHByb3ZlLl9pZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdHJldHVybiBmYWxzZVxuXG5cdG15QXBwcm92ZURlc2NyaXB0aW9uOiAoYXBwcm92ZUlkKS0+XG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XG5cdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXG5cdFx0XHRcdG15QXBwcm92ZSA9IFRlbXBsYXRlLmluc3RhbmNlKCk/Lm15QXBwcm92ZT8uZ2V0KClcblx0XHRcdFx0aWYgbXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PSBhcHByb3ZlSWRcblx0XHRcdFx0XHRpZiAhbXlBcHByb3ZlLnNpZ25fZmllbGRfY29kZSB8fCBteUFwcHJvdmUuc2lnbl9maWVsZF9jb2RlID09IFRlbXBsYXRlLmluc3RhbmNlKCk/LmRhdGE/Lm5hbWVcblx0XHRcdFx0XHRcdGlmICFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIilcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG15QXBwcm92ZT8uZGVzY3JpcHRpb24gfHwgXCJcIlxuXHRcdFx0XHRcdFx0cmV0dXJuIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VfbXlfYXBwcm92ZV9kZXNjcmlwdGlvblwiKVxuXG5cdG5vdzogKCktPlxuXHRcdHJldHVybiBuZXcgRGF0ZSgpO1xuXG5cdGlzUmVhZE9ubHk6ICgpLT5cblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcblx0XHRcdHJldHVybiBBcHByb3ZlTWFuYWdlci5pc1JlYWRPbmx5KClcblx0XHRyZXR1cm4gZmFsc2VcblxuXHRpc09waW5pb25PZkZpZWxkOiAoYXBwcm92ZSktPlxuXHRcdGlmIGFwcHJvdmUudHlwZSA9PSBcImNjXCIgJiYgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWVcblx0XHRcdGlmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lID09IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlXG5cdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBmYWxzZVxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdG1hcmtEb3duVG9IdG1sOiAobWFya0Rvd25TdHJpbmcpLT5cblx0XHRpZiBtYXJrRG93blN0cmluZ1xuXHRcdFx0cmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcblx0XHRcdHJlbmRlcmVyLmxpbmsgPSAoaHJlZiwgdGl0bGUsIHRleHQpIC0+XG5cdFx0XHRcdHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPScje2hyZWZ9JyB0aXRsZT0nI3t0aXRsZX0nPiN7dGV4dH08L2E+XCJcblx0XHRcdHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge3JlbmRlcmVyOiByZW5kZXJlcn0pKVxuXG5cdHN0ZXBzOiAoZmllbGRfZm9ybXVsYSwgc3RlcCwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduKS0+XG5cdFx0c3RlcHMgPSBbXVxuXHRcdGlmICFzdGVwXG5cdFx0XHRpZiAhZmllbGRfZm9ybXVsYVxuXHRcdFx0XHRmaWVsZF9mb3JtdWxhID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKT8uZmllbGRzPy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCB0aGlzLm5hbWUpLmZvcm11bGFcblx0XHRcdHN0ZXBzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5nZXRPcGluaW9uRmllbGRTdGVwc05hbWUoZmllbGRfZm9ybXVsYSwgVGVtcGxhdGUuaW5zdGFuY2UoKT8uZGF0YS50b3Bfa2V5d29yZHMpXG5cdFx0ZWxzZVxuXHRcdFx0c3RlcHMgPSBbe3N0ZXBOYW1lOiBzdGVwLCBvbmx5X2NjX29waW5pb246IG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbjogaW1hZ2Vfc2lnbn1dXG5cdFx0cmV0dXJuIHN0ZXBzXG5cblx0aW1hZ2VTaWduRGF0YTogKGhhbmRsZXIpIC0+XG5cdFx0cmV0dXJuIHt1c2VyOiBoYW5kbGVyfVxuXG5cdHNob3dTaWduSW1hZ2U6IChoYW5kbGVyLCBpbWFnZV9zaWduKSAtPlxuXHRcdHNwYWNlVXNlclNpZ24gPSBJbWFnZVNpZ24uaGVscGVycy5zcGFjZVVzZXJTaWduKGhhbmRsZXIpO1xuXG5cdFx0aWYgc3BhY2VVc2VyU2lnbj8uc2lnbiAmJiBpbWFnZV9zaWduXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBmYWxzZVxuXG5cdGdldExhc3RTaWduQXBwcm92ZTogKCktPlxuXHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG5cdFx0cmV0dXJuIF8ubGFzdChUcmFjZXNNYW5hZ2VyLmdldEhhbmRsZXJTaWduU2hvd0FwcHJvdmVzIGlucywgTWV0ZW9yLnVzZXJJZCgpKVxuXG5cblx0bGFzdE15QXBwcm92ZURlc2NyaXB0aW9uOiAoKS0+XG5cdFx0dHJhY2VzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50cmFjZXMoKVxuXHRcdGN1cnJlbnRTdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XG5cdFx0YXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tjdXJyZW50U3RlcC5uYW1lXSlcblxuXHRcdGFwcHJvdmVzID0gYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoXCJoYW5kbGVyXCIsIE1ldGVvci51c2VySWQoKSlcblxuXHRcdGlmIGFwcHJvdmVzLmxlbmd0aCA+IDFcblx0XHRcdHJldHVybiBhcHByb3Zlc1thcHByb3Zlcy5sZW5ndGggLSAyXT8uZGVzY3JpcHRpb25cblxuXHRcdHJldHVybiBcIlwiO1xuXG5cdHNob3dBcHByb3ZlOiAoYXBwcm92ZSktPlxuXHRcdGlmICFhcHByb3ZlLnNpZ25fZmllbGRfY29kZSB8fCBhcHByb3ZlLnNpZ25fZmllbGRfY29kZSA9PSBUZW1wbGF0ZS5pbnN0YW5jZSgpPy5kYXRhPy5uYW1lXG5cdFx0XHRpZiBhcHByb3ZlPy5pc19yZWFkXG5cdFx0XHRcdGlmIGFwcHJvdmUuaXNfZmluaXNoZWRcblx0XHRcdFx0XHRyZXR1cm4gW1wiYXBwcm92ZWRcIiwgXCJyZWplY3RlZFwiLCBcInN1Ym1pdHRlZFwiLCBcInJlYWRlZFwiXS5pbmNsdWRlcyhhcHByb3ZlLmp1ZGdlKVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdGp1ZGdlX2Rlc2NyaXB0aW9uOiAoanVkZ2UpLT5cblx0XHRyZXR1cm4gdChqdWRnZSArIFwiX2Rlc2NyaXB0aW9uXCIpXG5cblx0aXNfYXBwcm92ZWQ6IChqdWRnZSktPlxuXHRcdHJldHVybiBcImFwcHJvdmVkXCIgPT0ganVkZ2VcblxuXHRpc19yZWplY3RlZDogKGp1ZGdlKS0+XG5cdFx0cmV0dXJuIFwicmVqZWN0ZWRcIiA9PSBqdWRnZVxuXG5cdGlzX3JlYWRlZDogKGp1ZGdlKS0+XG5cdFx0cmV0dXJuIFtcImFwcHJvdmVkXCIsIFwicmVqZWN0ZWRcIiwgXCJzdWJtaXR0ZWRcIiwgXCJyZWFkZWRcIl0uaW5jbHVkZXMoanVkZ2UpXG5cblx0YWRkQ2xhc3M6ICgpLT5cblx0XHRuYW1lID0gVGVtcGxhdGUuaW5zdGFuY2UoKT8uZGF0YT8ubmFtZVxuXHRcdHNldFRpbWVvdXQgKCkgLT5cblx0XHRcdHRyeVxuXHRcdFx0XHRlbGVtZW50ID0gJChcIi5hdXRvbWF0aWMub3Bpbmlvbi1maWVsZC1cIiArIG5hbWUpXG5cdFx0XHRcdGlmIGVsZW1lbnQubGVuZ3RoID4gMFxuXHRcdFx0XHRcdGlmIGVsZW1lbnQ/LmlzKFwidGRcIilcblx0XHRcdFx0XHRcdGVsZW1lbnQuYWRkQ2xhc3MoJ2ZpZWxkLWVkaXRhYmxlJylcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHQkKFwiLmluc3RhbmNlLXNpZ25cIiwgZWxlbWVudCkuYWRkQ2xhc3MoJ2ZpZWxkLWVkaXRhYmxlJylcblx0XHRcdGNhdGNoIGVcblx0XHRcdFx0Y29uc29sZS5sb2cgZVxuXHRcdCwgMVxuXHRcdHJldHVybiAnJ1xuXG5pZiBNZXRlb3IuaXNTZXJ2ZXJcblx0SW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzLmRlZmF1bHREZXNjcmlwdGlvbiA9IC0+XG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxuXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvbiB8fCBUQVBpMThuLl9fKFwiaW5zdGFuY2VfZGVmYXVsdF9vcGluaW9uXCIsIHt9LCBsb2NhbGUpIiwiSW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzID0ge1xuICBzaG93OiBmdW5jdGlvbihzdGVwTmFtZSkge1xuICAgIHZhciBpbnN0YW5jZSwgbXlBcHByb3ZlLCBteVRyYWNlLCByZWY7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgaWYgKFNlc3Npb24uZ2V0KCdpbnN0YW5jZVByaW50JykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKEluc3RhbmNlTWFuYWdlci5pc0luYm94KCkpIHtcbiAgICAgICAgbXlBcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKCk7XG4gICAgICAgIGlmIChteUFwcHJvdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgIG15VHJhY2UgPSBpbnN0YW5jZSAhPSBudWxsID8gKHJlZiA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCA/IHJlZi5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIG15QXBwcm92ZS50cmFjZSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIChteVRyYWNlICE9IG51bGwgPyBteVRyYWNlLm5hbWUgOiB2b2lkIDApID09PSBzdGVwTmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGRlZmF1bHREZXNjcmlwdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uO1xuICB9LFxuICB0cmFjZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpO1xuICB9LFxuICB0cmFjZTogZnVuY3Rpb24oc3RlcE5hbWUsIG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbiwgdG9wX2tleXdvcmRzKSB7XG4gICAgdmFyIGFwcHJvdmVfc29ydCwgYXBwcm92ZXMsIGFwcHJvdmVzR3JvdXAsIGFwcHJvdmVzX3NvcnRlZCwgY29tcGxldGVkX2RhdGUsIGhhc05leHQsIGhhdmVEZXNjcmlwdGlvbkFwcHJvdmUsIGluc3RhbmNlLCBpc19jb21wbGV0ZWQsIHJlZiwgcmVmMSwgcmVmMiwgdHJhY2VzO1xuICAgIGluc3RhbmNlID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnN0YW5jZSgpO1xuICAgIGlzX2NvbXBsZXRlZCA9IChpbnN0YW5jZSAhPSBudWxsID8gaW5zdGFuY2Uuc3RhdGUgOiB2b2lkIDApID09PSBcImNvbXBsZXRlZFwiO1xuICAgIGNvbXBsZXRlZF9kYXRlID0gaXNfY29tcGxldGVkID8gKHJlZiA9IF8ubGFzdChpbnN0YW5jZS50cmFjZXMpKSAhPSBudWxsID8gKHJlZjEgPSByZWYuZmluaXNoX2RhdGUpICE9IG51bGwgPyByZWYxLmdldFRpbWUoKSA6IHZvaWQgMCA6IHZvaWQgMCA6IDA7XG4gICAgaWYgKGlzX2NvbXBsZXRlZCAmJiBpbnN0YW5jZS5maW5pc2hfZGF0ZSkge1xuICAgICAgY29tcGxldGVkX2RhdGUgPSAocmVmMiA9IGluc3RhbmNlLmZpbmlzaF9kYXRlKSAhPSBudWxsID8gcmVmMi5nZXRUaW1lKCkgOiB2b2lkIDA7XG4gICAgfVxuICAgIHRyYWNlcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKCk7XG4gICAgYXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tzdGVwTmFtZV0pO1xuICAgIGFwcHJvdmVfc29ydCA9IGZ1bmN0aW9uKGFwcHJvdmVzLCB0b3Bfa2V5d29yZHMpIHtcbiAgICAgIHZhciBhcHByb3Zlc19zb3J0ZWQsIHRvcF9hcHByb3ZlcztcbiAgICAgIGFwcHJvdmVzX3NvcnRlZCA9IF8uc29ydEJ5KGFwcHJvdmVzLCBmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgIHJldHVybiAtKGFwcHJvdmUuZmluaXNoX2RhdGUgfHwgbmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgfSk7XG4gICAgICBpZiAodG9wX2tleXdvcmRzKSB7XG4gICAgICAgIHRvcF9hcHByb3ZlcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0b3Bfa2V5d29yZHMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHRvcF9hcHByb3ZlcyA9IF8udW5pb24odG9wX2FwcHJvdmVzLCBfLmZpbHRlcihhcHByb3Zlc19zb3J0ZWQsIGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgICAgICAgIHZhciByZWYzO1xuICAgICAgICAgICAgcmV0dXJuIChhcHByb3ZlICE9IG51bGwgPyAocmVmMyA9IGFwcHJvdmUuaGFuZGxlcl9uYW1lKSAhPSBudWxsID8gcmVmMy5pbmRleE9mKGtleSkgOiB2b2lkIDAgOiB2b2lkIDApID4gLTE7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdG9wX2FwcHJvdmVzID0gXy5zb3J0QnkodG9wX2FwcHJvdmVzLCBmdW5jdGlvbih0b3BfYXBwcm92ZSkge1xuICAgICAgICAgIHJldHVybiAtKHRvcF9hcHByb3ZlLmZpbmlzaF9kYXRlIHx8IG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFwcHJvdmVzX3NvcnRlZCA9IF8udW5pb24odG9wX2FwcHJvdmVzLCBhcHByb3Zlc19zb3J0ZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFwcHJvdmVzX3NvcnRlZCB8fCBbXTtcbiAgICB9O1xuICAgIGFwcHJvdmVzID0gXy5maWx0ZXIoYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBhLnR5cGUgIT09IFwiZm9yd2FyZFwiICYmIGEudHlwZSAhPT0gXCJkaXN0cmlidXRlXCIgJiYgYS50eXBlICE9PSBcInRlcm1pbmF0ZWRcIjtcbiAgICB9KTtcbiAgICBpZiAob25seV9jY19vcGluaW9uKSB7XG4gICAgICBhcHByb3ZlcyA9IGFwcHJvdmVzICE9IG51bGwgPyBhcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcInR5cGVcIiwgXCJjY1wiKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgYXBwcm92ZXNfc29ydGVkID0gYXBwcm92ZV9zb3J0KGFwcHJvdmVzLCB0b3Bfa2V5d29yZHMpO1xuICAgIGFwcHJvdmVzR3JvdXAgPSBfLmdyb3VwQnkoYXBwcm92ZXMsIFwiaGFuZGxlclwiKTtcbiAgICBoYXNOZXh0ID0gZnVuY3Rpb24oYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkge1xuICAgICAgdmFyIGhhbmRsZXJBcHByb3ZlcztcbiAgICAgIGhhbmRsZXJBcHByb3ZlcyA9IGFwcHJvdmVzR3JvdXBbYXBwcm92ZS5oYW5kbGVyXTtcbiAgICAgIHJldHVybiBfLmluZGV4T2YoaGFuZGxlckFwcHJvdmVzLCBhcHByb3ZlKSArIDEgPCBoYW5kbGVyQXBwcm92ZXMubGVuZ3RoO1xuICAgIH07XG4gICAgaGF2ZURlc2NyaXB0aW9uQXBwcm92ZSA9IGZ1bmN0aW9uKGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApIHtcbiAgICAgIHZhciBkZXNjcmlwdGlvbkFwcHJvdmVzLCBoYW5kbGVyQXBwcm92ZXM7XG4gICAgICBoYW5kbGVyQXBwcm92ZXMgPSBhcHByb3Zlc0dyb3VwW2FwcHJvdmUuaGFuZGxlcl07XG4gICAgICBkZXNjcmlwdGlvbkFwcHJvdmVzID0gXy5maWx0ZXIoaGFuZGxlckFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgIGlmIChhLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgICBpZiAoZGVzY3JpcHRpb25BcHByb3Zlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBhcHByb3Zlc19zb3J0ZWQuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICBpZiAoYXBwcm92ZS5zaWduX3Nob3cgIT09IGZhbHNlICYmIChhcHByb3ZlLmRlc2NyaXB0aW9uIHx8ICghYXBwcm92ZS5kZXNjcmlwdGlvbiAmJiAhaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSkpKSB7XG4gICAgICAgIGlmIChhcHByb3ZlLmp1ZGdlICE9PSAndGVybWluYXRlZCcpIHtcbiAgICAgICAgICByZXR1cm4gYXBwcm92ZS5fZGlzcGxheSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBhcHByb3Zlc19zb3J0ZWQgPSBfLmZpbHRlcihhcHByb3Zlc19zb3J0ZWQsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIHZhciByZWYzO1xuICAgICAgaWYgKGlzX2NvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm4gYS5fZGlzcGxheSA9PT0gdHJ1ZSAmJiBhLmlzX2ZpbmlzaGVkICYmICgocmVmMyA9IGEuZmluaXNoX2RhdGUpICE9IG51bGwgPyByZWYzLmdldFRpbWUoKSA6IHZvaWQgMCkgPD0gY29tcGxldGVkX2RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5fZGlzcGxheSA9PT0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXBwcm92ZXNfc29ydGVkO1xuICB9LFxuICBpbmNsdWRlOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5jbHVkZShhLCBiKTtcbiAgfSxcbiAgdW5lbXB0eTogZnVuY3Rpb24odmFsKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudW5lbXB0eSh2YWwpO1xuICB9LFxuICBmb3JtYXREYXRlOiBmdW5jdGlvbihkYXRlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBcImZvcm1hdFwiOiBcIllZWVktTU0tRERcIlxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZm9ybWF0RGF0ZShkYXRlLCBvcHRpb25zKTtcbiAgfSxcbiAgaXNNeUFwcHJvdmU6IGZ1bmN0aW9uKGFwcHJvdmUsIG9ubHlfY2Nfb3Bpbmlvbikge1xuICAgIHZhciBjdXJyZW50QXBwcm92ZSwgaW5zO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgY3VycmVudEFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKTtcbiAgICAgIGlmICghKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUuX2lkIDogdm9pZCAwKSkge1xuICAgICAgICBhcHByb3ZlID0gY3VycmVudEFwcHJvdmU7XG4gICAgICB9XG4gICAgICBpZiAoYXBwcm92ZS5faWQgPT09IChjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUuX2lkIDogdm9pZCAwKSAmJiAoY3VycmVudEFwcHJvdmUgIT0gbnVsbCA/IGN1cnJlbnRBcHByb3ZlLnR5cGUgOiB2b2lkIDApID09PSAnY2MnICYmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lKSB7XG4gICAgICAgIGlmIChfLmluZGV4T2YoY3VycmVudEFwcHJvdmUgIT0gbnVsbCA/IGN1cnJlbnRBcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGUgOiB2b2lkIDAsIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lKSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoISgoY3VycmVudEFwcHJvdmUgIT0gbnVsbCA/IGN1cnJlbnRBcHByb3ZlLnR5cGUgOiB2b2lkIDApID09PSAnY2MnKSAmJiBvbmx5X2NjX29waW5pb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRBcHByb3ZlICYmIGFwcHJvdmUuX2lkID09PSBjdXJyZW50QXBwcm92ZS5faWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgbXlBcHByb3ZlRGVzY3JpcHRpb246IGZ1bmN0aW9uKGFwcHJvdmVJZCkge1xuICAgIHZhciBteUFwcHJvdmUsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMztcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgbXlBcHByb3ZlID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5teUFwcHJvdmUpICE9IG51bGwgPyByZWYxLmdldCgpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAobXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgaWYgKCFteUFwcHJvdmUuc2lnbl9maWVsZF9jb2RlIHx8IG15QXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgPT09ICgocmVmMiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMyA9IHJlZjIuZGF0YSkgIT0gbnVsbCA/IHJlZjMubmFtZSA6IHZvaWQgMCA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgIGlmICghU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAobXlBcHByb3ZlICE9IG51bGwgPyBteUFwcHJvdmUuZGVzY3JpcHRpb24gOiB2b2lkIDApIHx8IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbm93OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKTtcbiAgfSxcbiAgaXNSZWFkT25seTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgcmV0dXJuIEFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc09waW5pb25PZkZpZWxkOiBmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgaWYgKGFwcHJvdmUudHlwZSA9PT0gXCJjY1wiICYmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lKSB7XG4gICAgICBpZiAoVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUgPT09IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIG1hcmtEb3duVG9IdG1sOiBmdW5jdGlvbihtYXJrRG93blN0cmluZykge1xuICAgIHZhciByZW5kZXJlcjtcbiAgICBpZiAobWFya0Rvd25TdHJpbmcpIHtcbiAgICAgIHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XG4gICAgICByZW5kZXJlci5saW5rID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J1wiICsgaHJlZiArIFwiJyB0aXRsZT0nXCIgKyB0aXRsZSArIFwiJz5cIiArIHRleHQgKyBcIjwvYT5cIjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtcbiAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyXG4gICAgICB9KSk7XG4gICAgfVxuICB9LFxuICBzdGVwczogZnVuY3Rpb24oZmllbGRfZm9ybXVsYSwgc3RlcCwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduKSB7XG4gICAgdmFyIHJlZiwgcmVmMSwgcmVmMiwgc3RlcHM7XG4gICAgc3RlcHMgPSBbXTtcbiAgICBpZiAoIXN0ZXApIHtcbiAgICAgIGlmICghZmllbGRfZm9ybXVsYSkge1xuICAgICAgICBmaWVsZF9mb3JtdWxhID0gKHJlZiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5maWVsZHMpICE9IG51bGwgPyByZWYxLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIHRoaXMubmFtZSkuZm9ybXVsYSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHN0ZXBzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5nZXRPcGluaW9uRmllbGRTdGVwc05hbWUoZmllbGRfZm9ybXVsYSwgKHJlZjIgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpKSAhPSBudWxsID8gcmVmMi5kYXRhLnRvcF9rZXl3b3JkcyA6IHZvaWQgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ZXBzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgc3RlcE5hbWU6IHN0ZXAsXG4gICAgICAgICAgb25seV9jY19vcGluaW9uOiBvbmx5X2NjX29waW5pb24sXG4gICAgICAgICAgaW1hZ2Vfc2lnbjogaW1hZ2Vfc2lnblxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gc3RlcHM7XG4gIH0sXG4gIGltYWdlU2lnbkRhdGE6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcjogaGFuZGxlclxuICAgIH07XG4gIH0sXG4gIHNob3dTaWduSW1hZ2U6IGZ1bmN0aW9uKGhhbmRsZXIsIGltYWdlX3NpZ24pIHtcbiAgICB2YXIgc3BhY2VVc2VyU2lnbjtcbiAgICBzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbihoYW5kbGVyKTtcbiAgICBpZiAoKHNwYWNlVXNlclNpZ24gIT0gbnVsbCA/IHNwYWNlVXNlclNpZ24uc2lnbiA6IHZvaWQgMCkgJiYgaW1hZ2Vfc2lnbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIGdldExhc3RTaWduQXBwcm92ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucztcbiAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICByZXR1cm4gXy5sYXN0KFRyYWNlc01hbmFnZXIuZ2V0SGFuZGxlclNpZ25TaG93QXBwcm92ZXMoaW5zLCBNZXRlb3IudXNlcklkKCkpKTtcbiAgfSxcbiAgbGFzdE15QXBwcm92ZURlc2NyaXB0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXBwcm92ZXMsIGN1cnJlbnRTdGVwLCByZWYsIHRyYWNlcztcbiAgICB0cmFjZXMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpO1xuICAgIGN1cnJlbnRTdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XG4gICAgYXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tjdXJyZW50U3RlcC5uYW1lXSk7XG4gICAgYXBwcm92ZXMgPSBhcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgTWV0ZW9yLnVzZXJJZCgpKTtcbiAgICBpZiAoYXBwcm92ZXMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIChyZWYgPSBhcHByb3Zlc1thcHByb3Zlcy5sZW5ndGggLSAyXSkgIT0gbnVsbCA/IHJlZi5kZXNjcmlwdGlvbiA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH0sXG4gIHNob3dBcHByb3ZlOiBmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgdmFyIHJlZiwgcmVmMTtcbiAgICBpZiAoIWFwcHJvdmUuc2lnbl9maWVsZF9jb2RlIHx8IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlID09PSAoKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5kYXRhKSAhPSBudWxsID8gcmVmMS5uYW1lIDogdm9pZCAwIDogdm9pZCAwKSkge1xuICAgICAgaWYgKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUuaXNfcmVhZCA6IHZvaWQgMCkge1xuICAgICAgICBpZiAoYXBwcm92ZS5pc19maW5pc2hlZCkge1xuICAgICAgICAgIHJldHVybiBbXCJhcHByb3ZlZFwiLCBcInJlamVjdGVkXCIsIFwic3VibWl0dGVkXCIsIFwicmVhZGVkXCJdLmluY2x1ZGVzKGFwcHJvdmUuanVkZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAganVkZ2VfZGVzY3JpcHRpb246IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIHQoanVkZ2UgKyBcIl9kZXNjcmlwdGlvblwiKTtcbiAgfSxcbiAgaXNfYXBwcm92ZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIFwiYXBwcm92ZWRcIiA9PT0ganVkZ2U7XG4gIH0sXG4gIGlzX3JlamVjdGVkOiBmdW5jdGlvbihqdWRnZSkge1xuICAgIHJldHVybiBcInJlamVjdGVkXCIgPT09IGp1ZGdlO1xuICB9LFxuICBpc19yZWFkZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIFtcImFwcHJvdmVkXCIsIFwicmVqZWN0ZWRcIiwgXCJzdWJtaXR0ZWRcIiwgXCJyZWFkZWRcIl0uaW5jbHVkZXMoanVkZ2UpO1xuICB9LFxuICBhZGRDbGFzczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5hbWUsIHJlZiwgcmVmMTtcbiAgICBuYW1lID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5kYXRhKSAhPSBudWxsID8gcmVmMS5uYW1lIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSwgZWxlbWVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsZW1lbnQgPSAkKFwiLmF1dG9tYXRpYy5vcGluaW9uLWZpZWxkLVwiICsgbmFtZSk7XG4gICAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoZWxlbWVudCAhPSBudWxsID8gZWxlbWVudC5pcyhcInRkXCIpIDogdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICQoXCIuaW5zdGFuY2Utc2lnblwiLCBlbGVtZW50KS5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGUpO1xuICAgICAgfVxuICAgIH0sIDEpO1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMuZGVmYXVsdERlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvbiB8fCBUQVBpMThuLl9fKFwiaW5zdGFuY2VfZGVmYXVsdF9vcGluaW9uXCIsIHt9LCBsb2NhbGUpO1xuICB9O1xufVxuIiwiVHJhY2VzVGVtcGxhdGUuaGVscGVycyA9XG5cdGVxdWFsczogKGEsIGIpIC0+XG5cdFx0YSA9PSBiXG5cdGVtcHR5OiAoYSkgLT5cblx0XHRpZiBhXG5cdFx0XHRhLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA8IDFcblx0XHRlbHNlXG5cdFx0XHR0cnVlXG5cdHVuZW1wdHk6IChhKSAtPlxuXHRcdGlmIGFcblx0XHRcdGEudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID4gMFxuXHRcdGVsc2Vcblx0XHRcdGZhbHNlXG5cblx0YXBwZW5kOiAoYSwgYikgLT5cblx0XHRhICsgYlxuXG5cdGRhdGVGb3JtYXQ6IChkYXRlKSAtPlxuXHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpICYmIGRhdGU/LmdldEZ1bGxZZWFyKCkgPT0gKG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpXG5cdFx0XHRcdHJldHVybiAkLmZvcm1hdC5kYXRlIG5ldyBEYXRlKGRhdGUpLCBcIk1NLWRkIEhIOm1tXCJcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuICQuZm9ybWF0LmRhdGUgbmV3IERhdGUoZGF0ZSksIFwieXl5eS1NTS1kZCBISDptbVwiXG5cblx0Z2V0U3RlcE5hbWU6IChzdGVwSWQpIC0+XG5cdFx0c3RlcCA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZVN0ZXAoc3RlcElkKVxuXHRcdGlmIHN0ZXBcblx0XHRcdHJldHVybiBzdGVwLm5hbWVcblx0XHRudWxsXG5cdHNob3dEZWxldGVCdXR0b246IChhcHByb3ZlZCkgLT5cblx0XHRpZiBhcHByb3ZlZCBhbmQgYXBwcm92ZWQudHlwZSA9PSAnY2MnIGFuZCBhcHByb3ZlZC5mcm9tX3VzZXIgPT0gTWV0ZW9yLnVzZXJJZCgpIGFuZCBhcHByb3ZlZC5pc19maW5pc2hlZCAhPSB0cnVlIGFuZCAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdGZhbHNlXG5cdGlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbjogKGFwcHJvdmVkKSAtPlxuXHRcdGFwcHJvdmVfYWRtaW5zID0gTWV0ZW9yLnNldHRpbmdzPy5wdWJsaWM/LndvcmtmbG93Py5hcHByb3ZlX2FkbWluc1xuXHRcdGlmIGFwcHJvdmVfYWRtaW5zPy5sZW5ndGhcblx0XHRcdGlzU2hvdyA9IGFwcHJvdmVfYWRtaW5zPy5jb250YWlucyBNZXRlb3IudXNlcklkKClcblx0XHR1bmxlc3MgaXNTaG93XG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRyZXR1cm4gYXBwcm92ZWQuaGFuZGxlciA9PSBNZXRlb3IudXNlcklkKClcblx0aXNFZGl0aW5nOiAoKSAtPlxuXHRcdCByZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2UoKS5pc19lZGl0aW5nPy5nZXQoKVxuXHRpc1Nob3dEZXNjcmlwdGlvbjogKGFwcHJvdmVkKS0+XG5cdFx0IyBkZWJ1Z2dlclxuXHRcdGlmIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMuaXNTaG93TW9kaWZpY2F0aW9uQnV0dG9uIGFwcHJvdmVkXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdHJldHVybiBhcHByb3ZlZC5kZXNjcmlwdGlvbj8udG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID4gMFxuXHRpc0NDOiAoYXBwcm92ZWQpIC0+XG5cdFx0aWYgYXBwcm92ZWQgYW5kIGFwcHJvdmVkLnR5cGUgPT0gJ2NjJ1xuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRmYWxzZVxuXHRnZXRBcHByb3ZlU3RhdHVzSWNvbjogKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkgLT5cblx0XHRpZiBhdXRvU3VibWl0dGVkID09IHRydWVcblx0XHRcdHJldHVybiAnaW9uIGlvbi1hbmRyb2lkLWFsYXJtLWNsb2NrJ1xuXHRcdCPlt7Lnu5PmnZ/nmoTmmL7npLrkuLrmoLjlh4Yv6amz5ZueL+WPlua2iOeUs+ivt++8jOW5tuaYvuekuuWkhOeQhueKtuaAgeWbvuagh1xuXHRcdGFwcHJvdmVTdGF0dXNJY29uID0gdW5kZWZpbmVkXG5cdFx0c3dpdGNoIGFwcHJvdmVKdWRnZVxuXHRcdFx0d2hlbiAnYXBwcm92ZWQnXG5cdFx0XHRcdCMg5bey5qC45YeGXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tY2hlY2ttYXJrLXJvdW5kJ1xuXHRcdFx0d2hlbiAncmVqZWN0ZWQnXG5cdFx0XHRcdCMg5bey6amz5ZueXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tY2xvc2Utcm91bmQnXG5cdFx0XHR3aGVuICd0ZXJtaW5hdGVkJ1xuXHRcdFx0XHQjIOW3suWPlua2iFxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzSWNvbiA9ICdmYSBmYS1iYW4nXG5cdFx0XHR3aGVuICdyZWFzc2lnbmVkJ1xuXHRcdFx0XHQjIOi9rOetvuaguFxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWFuZHJvaWQtY29udGFjdCdcblx0XHRcdHdoZW4gJ3JlbG9jYXRlZCdcblx0XHRcdFx0IyDph43lrprkvY1cblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1hcnJvdy1zaHJpbmsnXG5cdFx0XHR3aGVuICdyZXRyaWV2ZWQnXG5cdFx0XHRcdCMg5bey5Y+W5ZueXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2ZhIGZhLXVuZG8nXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJydcblx0XHRcdFx0YnJlYWtcblx0XHRhcHByb3ZlU3RhdHVzSWNvblxuXHRnZXRBcHByb3ZlU3RhdHVzVGV4dDogKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkgLT5cblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcblx0XHRcdGlmIGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcblx0XHRcdFx0bG9jYWxlID0gXCJ6aC1DTlwiXG5cdFx0ZWxzZVxuXHRcdFx0bG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKVxuXHRcdCPlt7Lnu5PmnZ/nmoTmmL7npLrkuLrmoLjlh4Yv6amz5ZueL+WPlua2iOeUs+ivt++8jOW5tuaYvuekuuWkhOeQhueKtuaAgeWbvuagh1xuXHRcdGlmIGF1dG9TdWJtaXR0ZWQgPT0gdHJ1ZVxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmVfdGltZW91dF9hdXRvX3N1Ym1pdHRlZCcsIHt9LCBsb2NhbGUpXG5cdFx0YXBwcm92ZVN0YXR1c1RleHQgPSB1bmRlZmluZWRcblx0XHRzd2l0Y2ggYXBwcm92ZUp1ZGdlXG5cdFx0XHR3aGVuICdhcHByb3ZlZCdcblx0XHRcdFx0IyDlt7LmoLjlh4Zcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSBhcHByb3ZlZCcsIHt9LCBsb2NhbGUpXG5cdFx0XHR3aGVuICdyZWplY3RlZCdcblx0XHRcdFx0IyDlt7LpqbPlm55cblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWplY3RlZCcsIHt9LCBsb2NhbGUpXG5cdFx0XHR3aGVuICd0ZXJtaW5hdGVkJ1xuXHRcdFx0XHQjIOW3suWPlua2iFxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHRlcm1pbmF0ZWQnLCB7fSwgbG9jYWxlKVxuXHRcdFx0d2hlbiAncmVhc3NpZ25lZCdcblx0XHRcdFx0IyDovaznrb7moLhcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWFzc2lnbmVkJywge30sIGxvY2FsZSlcblx0XHRcdHdoZW4gJ3JlbG9jYXRlZCdcblx0XHRcdFx0IyDph43lrprkvY1cblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWxvY2F0ZWQnLCB7fSwgbG9jYWxlKVxuXHRcdFx0d2hlbiAncmV0cmlldmVkJ1xuXHRcdFx0XHQjIOW3suWPluWbnlxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJldHJpZXZlZCcsIHt9LCBsb2NhbGUpXG5cdFx0XHR3aGVuICdyZXR1cm5lZCdcblx0XHRcdFx0IyDlt7LpgIDlm55cblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZXR1cm5lZCcsIHt9LCBsb2NhbGUpXG5cdFx0XHR3aGVuICdyZWFkZWQnXG5cdFx0XHRcdCMg5bey6ZiFXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVhZGVkJywge30sIGxvY2FsZSlcblx0XHRcdGVsc2Vcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSAnJ1xuXHRcdFx0XHRicmVha1xuXHRcdGFwcHJvdmVTdGF0dXNUZXh0XG5cdFxuXHRnZXRBcHByb3ZlSnVkZ2VDbGFzczogKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkgLT5cblx0XHRpZiBhdXRvU3VibWl0dGVkID09IHRydWVcblx0XHRcdHJldHVybiAnYXV0b1N1Ym1pdHRlZCdcblx0XHRyZXR1cm4gYXBwcm92ZUp1ZGdlXG5cblx0X3Q6IChrZXkpLT5cblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXkpXG5cblx0bXlBcHByb3ZlRGVzY3JpcHRpb246IChhcHByb3ZlSWQpLT5cblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCdcblx0XHRcdFx0bXlBcHByb3ZlID0gVGVtcGxhdGUuaW5zdGFuY2UoKT8ubXlBcHByb3ZlPy5nZXQoKVxuXHRcdFx0XHRpZiBteUFwcHJvdmUgJiYgbXlBcHByb3ZlLmlkID09IGFwcHJvdmVJZFxuXHRcdFx0XHRcdGlmICFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIilcblx0XHRcdFx0XHRcdHJldHVybiBteUFwcHJvdmU/LmRlc2NyaXB0aW9uIHx8IFwiXCJcblx0XHRcdFx0XHRyZXR1cm4gU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpXG5cdGlzRm9yd2FyZDogKGFwcHJvdmVkKSAtPlxuXHRcdGlmIGFwcHJvdmVkIGFuZCBhcHByb3ZlZC50eXBlID09ICdmb3J3YXJkJ1xuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRmYWxzZVxuXHRzaG93Rm9yd2FyZERlbGV0ZUJ1dHRvbjogKGFwcHJvdmUpIC0+XG5cdFx0aWYgZGIuaW5zdGFuY2VzLmZpbmQoYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlKS5jb3VudCgpIGlzIDBcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdGlmIGFwcHJvdmUgYW5kIGFwcHJvdmUudHlwZSA9PSAnZm9yd2FyZCcgYW5kIGFwcHJvdmUuZnJvbV91c2VyID09IE1ldGVvci51c2VySWQoKSBhbmQgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSBhbmQgYXBwcm92ZS5qdWRnZSBpc250ICd0ZXJtaW5hdGVkJ1xuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRmYWxzZVxuXHRtYXJrRG93blRvSHRtbDogKG1hcmtEb3duU3RyaW5nKS0+XG5cdFx0aWYgbWFya0Rvd25TdHJpbmdcblx0XHRcdHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XG5cdFx0XHRyZW5kZXJlci5saW5rID0gKCBocmVmLCB0aXRsZSwgdGV4dCApIC0+XG5cdFx0XHRcdHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPScje2hyZWZ9JyB0aXRsZT0nI3t0aXRsZX0nPiN7dGV4dH08L2E+XCJcblx0XHRcdHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge3JlbmRlcmVyOnJlbmRlcmVyfSkpXG5cdGlzRGlzdHJpYnV0ZTogKGFwcHJvdmUpIC0+XG5cdFx0aWYgYXBwcm92ZSBhbmQgYXBwcm92ZS50eXBlID09ICdkaXN0cmlidXRlJ1xuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRmYWxzZVxuXHRzaG93RGlzdHJpYnV0ZURlbGV0ZUJ1dHRvbjogKGFwcHJvdmUpIC0+XG5cdFx0aWYgZGIuaW5zdGFuY2VzLmZpbmQoYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlKS5jb3VudCgpIGlzIDBcblx0XHRcdHJldHVybiBmYWxzZVxuXG5cdFx0aWYgYXBwcm92ZSBhbmQgYXBwcm92ZS50eXBlID09ICdkaXN0cmlidXRlJyBhbmQgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSBhbmQgYXBwcm92ZS5qdWRnZSBpc250ICd0ZXJtaW5hdGVkJyBhbmQgU3RlZWRvcy5oYXNGZWF0dXJlKCdmaWxlX2Rpc3RyaWJ1dGlvbicsIFN0ZWVkb3MuZ2V0U3BhY2VJZCgpKVxuXHRcdFx0IyDmtYHnqIvnrqHnkIblkZjlkozns7vnu5/nrqHnkIblkZjvvIzlj6/ku6XmiafooYzku7vkvZXmg4XlhrXkuIvnmoTmlofku7blj5bmtojliIblj5Fcblx0XHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGFwcHJvdmUuaW5zdGFuY2V9LCB7ZmllbGRzOiB7ZmxvdzogMSwgc3BhY2U6IDF9fSlcblx0XHRcdGlmIGlucyBhbmQgaW5zLmZsb3cgYW5kIGlucy5zcGFjZVxuXHRcdFx0XHRpZiBXb3JrZmxvd01hbmFnZXIuaGFzRmxvd0FkbWluUGVybWlzc2lvbihpbnMuZmxvdywgaW5zLnNwYWNlLCBNZXRlb3IudXNlcklkKCkpXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcblxuXHRcdFx0aWYgYXBwcm92ZS5mcm9tX3VzZXIgPT0gTWV0ZW9yLnVzZXJJZCgpXG5cdFx0XHRcdHJldHVybiB0cnVlXG5cblx0XHRmYWxzZVxuXG5cdGZpbmlzaERhdGVTY2hlbWE6ICgpIC0+XG5cdFx0aWYgU3RlZWRvcy5pc0FuZHJvaWRPcklPUygpXG5cdFx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYSh7XG5cdFx0XHRcdGZpbmlzaF9kYXRlOiB7XG5cdFx0XHRcdFx0YXV0b2Zvcm06IHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGF0ZXRpbWUtbG9jYWxcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0b3B0aW9uYWw6IGZhbHNlLFxuXHRcdFx0XHRcdHR5cGU6IERhdGVcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYSh7XG5cdFx0XHRcdGZpbmlzaF9kYXRlOiB7XG5cdFx0XHRcdFx0YXV0b2Zvcm06IHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyXCJcblx0XHRcdFx0XHRcdHJlYWRvbmx5OiB0cnVlXG5cdFx0XHRcdFx0XHRkYXRlVGltZVBpY2tlck9wdGlvbnM6e1xuXHRcdFx0XHRcdFx0XHRmb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuXHRcdFx0XHRcdFx0XHRpZ25vcmVSZWFkb25seTp0cnVlLFxuXHRcdFx0XHRcdFx0XHRsb2NhbGU6IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIiksXG5cdFx0XHRcdFx0XHRcdHdpZGdldFBvc2l0aW9uaW5nOntcblx0XHRcdFx0XHRcdFx0XHRob3Jpem9udGFsOiAncmlnaHQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdG9wdGlvbmFsOiBmYWxzZSxcblx0XHRcdFx0XHR0eXBlOiBEYXRlXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0ZmluaXNoRGF0ZVZhbHVlczogKCkgLT5cblx0XHRyZXR1cm4ge1xuXHRcdFx0ZmluaXNoX2RhdGU6dGhpcy5maW5pc2hfZGF0ZVxuXHRcdH07XG5cblx0IyMjXG4gICAgXHTmraTlh73mlbDnlKjkuo7mjqfliLbmmK/lkKbmmL7npLp0cmFjZXMgdmlld1xuICAgIFx0dHJ1ZTog5pi+56S6dHJhY2VzIHZpZXcs562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCO5piv55u05o6l5a6a5L2N5YiwdHJhY2VzIHZpZXdcbiAgICBcdGZhbHNlOiDkuI3mmL7npLp0cmFjZXMgdmlld++8jOetvuaguOWOhueoi+aMiemSrueCueWHu+WQjizku6VNb2RhbCDmlrnlvI/mmL7npLp0cmFjZXMgdmlld1xuXHQjIyNcblx0c2hvd1RyYWNlc1ZpZXc6IChmb3JtLCBmb3JtX3ZlcnNpb24pLT5cbiNcdFx0cmV0dXJuICEoSW5zdGFuY2VNYW5hZ2VyLmlzVGFibGVTdHlsZShmb3JtKSAmJiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluY2x1ZGVzT3BpbmlvbkZpZWxkKGZvcm0sIGZvcm1fdmVyc2lvbikpXG5cblx0XHRzaG93X21vZGFsX3RyYWNlc19saXN0ID0gZGIuc3BhY2Vfc2V0dGluZ3MuZmluZE9uZSh7c3BhY2U6IFNlc3Npb24uZ2V0KFwic3BhY2VJZFwiKSwga2V5OiBcInNob3dfbW9kYWxfdHJhY2VzX2xpc3RcIn0pPy52YWx1ZXMgfHwgZmFsc2VcblxuXHRcdHJldHVybiAhc2hvd19tb2RhbF90cmFjZXNfbGlzdFxuXG5cdGdldEluc3RhbmNlU3RhdGVUZXh0OiAoaW5zdGFuY2VfaWQpLT5cblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcblx0XHRcdGlmIGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcblx0XHRcdFx0bG9jYWxlID0gXCJ6aC1DTlwiXG5cdFx0ZWxzZVxuXHRcdFx0bG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKVxuXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VfaWR9LCB7ZmllbGRzOiB7c3RhdGU6IDEsIGlzX3JlYWQ6IDF9fSlcblx0XHRpZiBub3QgaW5zXG5cdFx0XHRyZXR1cm4gVEFQaTE4bi5fXygnaW5zdGFuY2VfZGVsZXRlZCcsIHt9LCBsb2NhbGUpXG5cblx0XHR0ZXh0ID0gJydcblx0XHRpZiBpbnMuc3RhdGUgaXMgJ2NvbXBsZXRlZCdcblx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdjb21wbGV0ZWQnLCB7fSwgbG9jYWxlKVxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdwZW5kaW5nJ1xuXHRcdFx0dGV4dCA9IFRBUGkxOG4uX18oJ3BlbmRpbmcnLCB7fSwgbG9jYWxlKVxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdkcmFmdCdcblx0XHRcdGlmIGlucy5pc19yZWFkXG5cdFx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX3JlYWQnLCB7fSwgbG9jYWxlKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0ZXh0ID0gVEFQaTE4bi5fXygnaW5zdGFuY2VfYXBwcm92ZV9ub3RfeWV0X2hhbmRsZWQnLCB7fSwgbG9jYWxlKVxuXG5cdFx0cmV0dXJuIHRleHRcblxuXHRnZXRJbnN0YW5jZVN0YXRlQ29sb3I6IChpbnN0YW5jZV9pZCktPlxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlX2lkfSwge2ZpZWxkczoge3N0YXRlOiAxLCBpc19yZWFkOiAxfX0pXG5cdFx0aWYgbm90IGluc1xuXHRcdFx0cmV0dXJuIFwiXCJcblxuXHRcdGNsYSA9ICcnXG5cdFx0aWYgaW5zLnN0YXRlIGlzICdkcmFmdCdcblx0XHRcdGlmIGlucy5pc19yZWFkXG5cdFx0XHRcdGNsYSA9ICdibHVlJ1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRjbGEgPSAncmVkJ1xuXHRcdHJldHVybiBjbGFcblxuXHRmaXJzdFRyYWNlOiAoaW5kZXgpLT5cblx0XHRyZXR1cm4gaW5kZXggaXMgMFxuXG5cdGxhc3RfZGlzdHJpYnV0ZV9mcm9tOiAoaW5zdGFuY2VfaWQpLT5cblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZV9pZCwgZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlOiB7JGV4aXN0czogdHJ1ZX19LHtmaWVsZHM6e2NyZWF0ZWQ6IDEsIGNyZWF0ZWRfYnk6IDF9fSlcblx0XHRpZiBpbnNcblx0XHRcdGRpc19pbmZvID0ge31cblx0XHRcdHVzZXIgPSB7fVxuXHRcdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XG5cdFx0XHRcdHVzZXIgPSBVVWZsb3dfYXBpLmdldE5hbWVGb3JVc2VyKGlucy5jcmVhdGVkX2J5KVxuXHRcdFx0ZWxzZSBpZiBNZXRlb3IuaXNTZXJ2ZXJcblx0XHRcdFx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoe19pZDogaW5zLmNyZWF0ZWRfYnl9LCB7ZmllbGRzOiB7bmFtZTogMX19KVxuXG5cdFx0XHRpZiB1c2VyLm5hbWVcblx0XHRcdFx0ZGlzX2luZm8uZnJvbV91c2VyID0gdXNlci5faWRcblx0XHRcdFx0ZGlzX2luZm8uZnJvbV91c2VyX25hbWUgPSB1c2VyLm5hbWVcblx0XHRcdFx0ZGlzX2luZm8uY3JlYXRlZCA9IGlucy5jcmVhdGVkXG5cblx0XHRcdGlmIG5vdCBfLmlzRW1wdHkoZGlzX2luZm8pXG5cdFx0XHRcdHJldHVybiBkaXNfaW5mb1xuXHRcdHJldHVyblxuXG5cdGlzQ0NPckRpc3RyaWJ1dGVPckZvcndhcmRUZXJtaW5hdGVkOiAoYXBwcm92ZSktPlxuXHRcdGlmIChhcHByb3ZlLnR5cGUgaXMgJ2NjJyBvciBhcHByb3ZlLnR5cGUgaXMgJ2Rpc3RyaWJ1dGUnIG9yIGFwcHJvdmUudHlwZSBpcyAnZm9yd2FyZCcpIGFuZCBhcHByb3ZlLmp1ZGdlIGlzICd0ZXJtaW5hdGVkJ1xuXHRcdFx0cmV0dXJuIHRydWVcblx0XHRyZXR1cm4gZmFsc2VcblxuXHRqdWRnZVRlcm1pbmF0ZWQ6IChqdWRnZSktPlxuXHRcdHJldHVybiBqdWRnZSBpcyAndGVybWluYXRlZCdcblxuXHRpbnN0YW5jZUV4aXN0czogKGluc3RhbmNlX2lkKS0+XG5cdFx0cmV0dXJuICEhZGIuaW5zdGFuY2VzLmZpbmQoaW5zdGFuY2VfaWQpLmNvdW50KClcblxuXHRhZ2VudERlc2NyaXB0aW9uOiAodXNlck5hbWUpLT5cblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcblx0XHRcdGlmIGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcblx0XHRcdFx0bG9jYWxlID0gXCJ6aC1DTlwiXG5cdFx0ZWxzZVxuXHRcdFx0bG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKVxuXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHt1c2VyTmFtZTogdXNlck5hbWV9LCBsb2NhbGUpXG5cdFxuXHR0cmFjZU5hbWU6IChpbnN0YW5jZV9pZCwgdHJhY2VJZCktPlxuXHRcdHJldHVybiBfLmZpbmQoZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQsIHtmaWVsZHM6IHt0cmFjZXM6IDF9fSk/LnRyYWNlcywgKHRyYWNlKS0+XG5cdFx0XHRcdFx0cmV0dXJuIHRyYWNlLl9pZCA9PSAgdHJhY2VJZFxuXHRcdCk/Lm5hbWVcblxuXHRvYmplY3RVcmw6IChvYmplY3RfbmFtZSwgcmVjb3JkX2lkLCBhcHBfaWQpLT5cblx0XHRyZXR1cm4gQ3JlYXRvci5nZXRPYmplY3RVcmwob2JqZWN0X25hbWUsIHJlY29yZF9pZCwgYXBwX2lkKVxuXG5pZiBNZXRlb3IuaXNTZXJ2ZXJcblx0VHJhY2VzVGVtcGxhdGUuaGVscGVycy5kYXRlRm9ybWF0ID0gKGRhdGUpLT5cblx0XHRpZiBkYXRlXG5cdFx0XHR1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0XG5cdFx0XHRyZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUoZGF0ZSwgdXRjT2Zmc2V0KTtcblxuXHRUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLl90ID0gKGtleSktPlxuXHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpXG5cblx0VHJhY2VzVGVtcGxhdGUuaGVscGVycy5zaG93RGVsZXRlQnV0dG9uID0gKGFwcHJvdmVkKSAtPlxuXHRcdHJldHVybiBmYWxzZTtcblxuVHJhY2VzVGVtcGxhdGUuZXZlbnRzID1cblx0J2NsaWNrIC5jYy1hcHByb3ZlLXJlbW92ZSc6IChldmVudCwgdGVtcGxhdGUpIC0+XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblx0XHRpZiBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyAqIDEgIT0gMVxuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGxpbmcgPSAxXG5cdFx0XHQkKFwiaVwiLGV2ZW50LmN1cnJlbnRUYXJnZXQpLmFkZENsYXNzKFwiZmEtc3BpblwiKVxuXHRcdFx0aW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJylcblx0XHRcdGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmVcblx0XHRcdCMgQ0FMTCDliKDpmaRhcHByb3Zl5Ye95pWw44CCXG5cdFx0XHQkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIilcblx0XHRcdE1ldGVvci5jYWxsICdjY19yZW1vdmUnLCBpbnN0YW5jZUlkLCBhcHByb3ZlSWQsIChlcnIsIHJlc3VsdCkgLT5cblx0XHRcdFx0JChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpXG5cdFx0XHRcdGlmIGVyclxuXHRcdFx0XHRcdHRvYXN0ci5lcnJvciBlcnJcblx0XHRcdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDBcblx0XHRcdFx0XHQkKFwiaVwiLGV2ZW50LmN1cnJlbnRUYXJnZXQpLnJlbW92ZUNsYXNzKFwiZmEtc3BpblwiKVxuXHRcdFx0XHRpZiByZXN1bHQgPT0gdHJ1ZVxuXHRcdFx0XHRcdHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJyZW1vdmVfY2NfYXBwcm92ZVwiKSk7XG5cdFx0XHRcdFx0aWYgJChcIi5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWxcIikubGVuZ3RoXG5cdFx0XHRcdFx0XHRNb2RhbC5oaWRlIFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCJcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHRyZXR1cm5cblxuXHQnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWNjLWFwcHJvdmUtcmVtb3ZlJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cblx0XHRpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKVxuXHRcdGFwcHJvdmVJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmFwcHJvdmVcblx0XHQjIENBTEwg5Yig6ZmkYXBwcm92ZeWHveaVsOOAglxuXHRcdCQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKVxuXHRcdE1ldGVvci5jYWxsICdjY19yZW1vdmUnLCBpbnN0YW5jZUlkLCBhcHByb3ZlSWQsIChlcnIsIHJlc3VsdCkgLT5cblx0XHRcdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKVxuXHRcdFx0aWYgZXJyXG5cdFx0XHRcdHRvYXN0ci5lcnJvciBlcnJcblx0XHRcdGlmIHJlc3VsdCA9PSB0cnVlXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJyZW1vdmVfY2NfYXBwcm92ZVwiKSk7XG5cdFx0XHRcdE1vZGFsLmhpZGUgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIlxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblx0J2NsaWNrIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxuXHRcdCMgUEPkuIrpk77mjqXlhYHorrjnm7TmjqXngrnlvIDvvIzkuI3lho3miZPlvIDnrb7mibnljobnqIvor6bnu4Zcblx0XHR1bmxlc3MgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJhLmJ0bi1saW5rXCIpLmxlbmd0aFxuXHRcdFx0TW9kYWwuc2hvdyBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiLCB0aGlzXG5cblx0J3RhcGhvbGQgLmFwcHJvdmUtaXRlbSwuYXBwcm92ZS1kZXNjcmlwdGlvbic6IChldmVudCwgdGVtcGxhdGUpIC0+XG5cdFx0IyDmiYvmnLrkuIrplb/mjInmiZPlvIDnrb7mibnljobnqIvor6bnu4bvvIzlpoLmnpzmmK/pk77mjqXplb/mjInmiZPlvIDlkI7kuIDmlL7miYvnqpflj6PlsLHlj4jlhbPmjonkuobvvIzmiYDku6XkuI3orqnpk77mjqXmiZPlvIDnrb7mibnljobnqIvor6bnu4Zcblx0XHR1bmxlc3MgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJhLmJ0bi1saW5rXCIpLmxlbmd0aFxuXHRcdFx0TW9kYWwuc2hvdyBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiLCB0aGlzXG5cblx0J2NsaWNrIC5hcHByb3ZlLWl0ZW0gYS5idG4tbGluaywuYXBwcm92ZS1kZXNjcmlwdGlvbiBhLmJ0bi1saW5rLC5hcHByb3ZlLWl0ZW0tZGlzdHJpYnV0ZSBhLmJ0bi1saW5rJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cblx0XHQjIOaJi+acuuS4iueCueWHu+mTvuaOpe+8jOW8ueWHuuaWsOeql+WPo++8jOS4jeaUr+aMge+8jOWboOS4umFuZHJvaWTkuIrkvJrlvLnlh7rnmbvlvZXnlYzpnaJcblx0XHRpZiBTdGVlZG9zLmlzTW9iaWxlKClcblx0XHRcdHVzZXJJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0Py50YXJnZXRfdXNlcl9pZFxuXHRcdFx0Q3JlYXRvci5vcGVuU2FmZU9iamVjdFVybCgndXNlcnMnLCB1c2VySWQpXG5cblx0J3RhcGVuZCAuYXBwcm92ZS1pdGVtLC5hcHByb3ZlLWRlc2NyaXB0aW9uJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cblx0XHQjIOS4iui/sOmVv+aMieaJk+W8gGFwcHJvdmXor6bnu4bnqpflj6PnmoTkuovku7Z0YXBob2xk5Lya6Kem5Y+R5omT5byA56qX5Y+j5ZCO55qEdG91Y2hlbmTkuovku7bvvIzpgKDmiJDplb/mjInmiZPlvIDnqpflj6PlkI7kuIDmlL7miYvnqpflj6PlsLHlj4jlhbPmjonkuoZcblx0XHQjIOi/memHjOWPquiDvemAmui/h+mYu+atonRhcGVuZOS6i+S7tijkuI3lj6/ku6XnlKh0b3VjaGVuZOS6i+S7tu+8jOWboOS4uuS8muW9seWTjXRhcGhvbGTlip/og73vvIzpgKDmiJDmsqHmnInplb/mjInmlYjmnpzml7bkuZ/kvJrop6blj5F0YXBob2xk5LqL5Lu2KeWGkuazoeadpemBv+WFjemXrumimOOAglxuXHRcdCMg6ZO+5o6l5YWB6K6455u05o6l54K55byAXG5cdFx0dW5sZXNzICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiYS5idG4tbGlua1wiKS5sZW5ndGhcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0XHRyZXR1cm4gZmFsc2VcblxuXHQnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWZvcndhcmQtYXBwcm92ZS1yZW1vdmUnOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxuXHRcdGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpXG5cdFx0YXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZVxuXHRcdHRyYWNlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC50cmFjZVxuXHRcdCMgQ0FMTCDliKDpmaRhcHByb3Zl5Ye95pWw44CCXG5cdFx0JChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpXG5cdFx0TWV0ZW9yLmNhbGwgJ2ZvcndhcmRfcmVtb3ZlJywgaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCAoZXJyLCByZXN1bHQpIC0+XG5cdFx0XHQkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIilcblx0XHRcdGlmIGVyclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IgVEFQaTE4bi5fXyhlcnIucmVhc29uKVxuXHRcdFx0aWYgcmVzdWx0ID09IHRydWVcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcImluc3RhbmNlX2FwcHJvdmVfZm9yd2FyZF9yZW1vdmVfc3VjY2Vzc1wiKSk7XG5cdFx0XHRcdE1vZGFsLmhpZGUgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIlxuXHRcdFx0cmV0dXJuXG5cdFx0cmV0dXJuXG5cblx0J2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1mb3J3YXJkLWluc3RhbmNlLWxvb2snOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxuXHRcdGZvcndhcmRfc3BhY2UgPSBldmVudC50YXJnZXQuZGF0YXNldC5mb3J3YXJkc3BhY2Vcblx0XHRmb3J3YXJkX2luc3RhbmNlID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuZm9yd2FyZGluc3RhbmNlXG5cdFx0U3RlZWRvcy5vcGVuV2luZG93KFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGZvcndhcmRfc3BhY2UgKyBcIi92aWV3L3JlYWRvbmx5L1wiICsgZm9yd2FyZF9pbnN0YW5jZSkpXG5cblx0J2NsaWNrIC5idG4tbW9kaWZpY2F0aW9uJ1x0OiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxuXHRcdHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKTtcblx0XHR1bmxlc3MgU3RlZWRvcy5pc0FuZHJvaWRPcklPUygpXG5cdFx0XHRUcmFja2VyLmFmdGVyRmx1c2ggLT5cblx0XHRcdFx0IyDmmL7npLrml6Xlv5fnmoTml7blgJnmiormu5rliqjmnaHlvoDkuIvnp7vngrnvvIzorqnml6XmnJ/mjqfku7bmmL7npLrlh7rkuIDpg6jliIbvvIzku6Xpgb/lhY3nlKjmiLfnnIvkuI3liLDml6XmnJ/mjqfku7Zcblx0XHRcdFx0JChcIiNpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWwgI2ZpbmlzaF9pbnB1dFwiKS5vbiBcImRwLnNob3dcIiwgKCkgLT5cblx0XHRcdFx0XHQkKFwiLm1vZGFsLWJvZHlcIikuc2Nyb2xsVG9wKDEwMClcblxuXHQnY2xpY2sgLmJ0bi1jYW5jZWxCdXQnIDogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cblxuXHRcdHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKTtcblxuXHQnY2xpY2sgLmJ0bi1zYXZlQnV0JyA6IChldmVudCwgdGVtcGxhdGUpIC0+XG5cdFx0IyB0ZW1wbGF0ZS5pc19lZGl0aW5nLnNldCghdGVtcGxhdGUuaXNfZWRpdGluZy5nZXQoKSlcblxuXHRcdGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpXG5cdFx0YXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZVxuXHRcdHRyYWNlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC50cmFjZVxuXHRcdG9waW5pb25faW5wdXQgPSAkKCcjb3Bpbmlvbl9pbnB1dCcpLnZhbCgpXG5cdFx0ZmluaXNoX2lucHV0ID0gQXV0b0Zvcm0uZ2V0RmllbGRWYWx1ZShcImZpbmlzaF9kYXRlXCIsIFwiZmluaXNoRGF0ZUF1dG9Gb3JtXCIpXG5cblx0XHQkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIilcblx0XHRNZXRlb3IuY2FsbCAnY2hhbmdlX2FwcHJvdmVfaW5mbycsIGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgb3Bpbmlvbl9pbnB1dCwgZmluaXNoX2lucHV0LCAoZXJyLCByZXN1bHQpLT5cblx0XHRcdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKVxuXHRcdFx0aWYgZXJyXG5cdFx0XHRcdHRvYXN0ci5lcnJvciBUQVBpMThuLl9fKGVyci5yZWFzb24pXG5cdFx0XHRpZiByZXN1bHQgPT0gdHJ1ZVxuXHRcdFx0XHR0b2FzdHIuc3VjY2Vzcyh0KFwiaW5zdGFuY2VfYXBwcm92ZV9tb2RhbF9tb2RpZmljYXRpb25zYXZlXCIpKVxuXHRcdFx0XHRNb2RhbC5oaWRlIFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCJcblx0XHRcdHJldHVyblxuXG5cdCdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZGlzdHJpYnV0ZS1hcHByb3ZlLXJlbW92ZSc6IChldmVudCwgdGVtcGxhdGUpIC0+XG5cdFx0TW9kYWwuYWxsb3dNdWx0aXBsZSA9IHRydWVcblx0XHRNb2RhbC5zaG93ICdjYW5jZWxfZGlzdHJpYnV0ZV9tb2RhbCdcbiIsIlRyYWNlc1RlbXBsYXRlLmhlbHBlcnMgPSB7XG4gIGVxdWFsczogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oYSkge1xuICAgIGlmIChhKSB7XG4gICAgICByZXR1cm4gYS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPCAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIHVuZW1wdHk6IGZ1bmN0aW9uKGEpIHtcbiAgICBpZiAoYSkge1xuICAgICAgcmV0dXJuIGEudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgYXBwZW5kOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgKyBiO1xuICB9LFxuICBkYXRlRm9ybWF0OiBmdW5jdGlvbihkYXRlKSB7XG4gICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSAmJiAoZGF0ZSAhPSBudWxsID8gZGF0ZS5nZXRGdWxsWWVhcigpIDogdm9pZCAwKSA9PT0gKG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICByZXR1cm4gJC5mb3JtYXQuZGF0ZShuZXcgRGF0ZShkYXRlKSwgXCJNTS1kZCBISDptbVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQuZm9ybWF0LmRhdGUobmV3IERhdGUoZGF0ZSksIFwieXl5eS1NTS1kZCBISDptbVwiKTtcbiAgICB9XG4gIH0sXG4gIGdldFN0ZXBOYW1lOiBmdW5jdGlvbihzdGVwSWQpIHtcbiAgICB2YXIgc3RlcDtcbiAgICBzdGVwID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlU3RlcChzdGVwSWQpO1xuICAgIGlmIChzdGVwKSB7XG4gICAgICByZXR1cm4gc3RlcC5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgc2hvd0RlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICBpZiAoYXBwcm92ZWQgJiYgYXBwcm92ZWQudHlwZSA9PT0gJ2NjJyAmJiBhcHByb3ZlZC5mcm9tX3VzZXIgPT09IE1ldGVvci51c2VySWQoKSAmJiBhcHByb3ZlZC5pc19maW5pc2hlZCAhPT0gdHJ1ZSAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc1Nob3dNb2RpZmljYXRpb25CdXR0b246IGZ1bmN0aW9uKGFwcHJvdmVkKSB7XG4gICAgdmFyIGFwcHJvdmVfYWRtaW5zLCBpc1Nob3csIHJlZiwgcmVmMSwgcmVmMjtcbiAgICBhcHByb3ZlX2FkbWlucyA9IChyZWYgPSBNZXRlb3Iuc2V0dGluZ3MpICE9IG51bGwgPyAocmVmMSA9IHJlZltcInB1YmxpY1wiXSkgIT0gbnVsbCA/IChyZWYyID0gcmVmMS53b3JrZmxvdykgIT0gbnVsbCA/IHJlZjIuYXBwcm92ZV9hZG1pbnMgOiB2b2lkIDAgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKGFwcHJvdmVfYWRtaW5zICE9IG51bGwgPyBhcHByb3ZlX2FkbWlucy5sZW5ndGggOiB2b2lkIDApIHtcbiAgICAgIGlzU2hvdyA9IGFwcHJvdmVfYWRtaW5zICE9IG51bGwgPyBhcHByb3ZlX2FkbWlucy5jb250YWlucyhNZXRlb3IudXNlcklkKCkpIDogdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoIWlzU2hvdykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZWQuaGFuZGxlciA9PT0gTWV0ZW9yLnVzZXJJZCgpO1xuICB9LFxuICBpc0VkaXRpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWY7XG4gICAgcmV0dXJuIChyZWYgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLmlzX2VkaXRpbmcpICE9IG51bGwgPyByZWYuZ2V0KCkgOiB2b2lkIDA7XG4gIH0sXG4gIGlzU2hvd0Rlc2NyaXB0aW9uOiBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIHZhciByZWY7XG4gICAgaWYgKFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMuaXNTaG93TW9kaWZpY2F0aW9uQnV0dG9uKGFwcHJvdmVkKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAoKHJlZiA9IGFwcHJvdmVkLmRlc2NyaXB0aW9uKSAhPSBudWxsID8gcmVmLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA6IHZvaWQgMCkgPiAwO1xuICB9LFxuICBpc0NDOiBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIGlmIChhcHByb3ZlZCAmJiBhcHByb3ZlZC50eXBlID09PSAnY2MnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBnZXRBcHByb3ZlU3RhdHVzSWNvbjogZnVuY3Rpb24oYXBwcm92ZUp1ZGdlLCBhdXRvU3VibWl0dGVkKSB7XG4gICAgdmFyIGFwcHJvdmVTdGF0dXNJY29uO1xuICAgIGlmIChhdXRvU3VibWl0dGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gJ2lvbiBpb24tYW5kcm9pZC1hbGFybS1jbG9jayc7XG4gICAgfVxuICAgIGFwcHJvdmVTdGF0dXNJY29uID0gdm9pZCAwO1xuICAgIHN3aXRjaCAoYXBwcm92ZUp1ZGdlKSB7XG4gICAgICBjYXNlICdhcHByb3ZlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tY2hlY2ttYXJrLXJvdW5kJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWplY3RlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tY2xvc2Utcm91bmQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Rlcm1pbmF0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdmYSBmYS1iYW4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlYXNzaWduZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWFuZHJvaWQtY29udGFjdCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVsb2NhdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1hcnJvdy1zaHJpbmsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JldHJpZXZlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2ZhIGZhLXVuZG8nO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJyc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZVN0YXR1c0ljb247XG4gIH0sXG4gIGdldEFwcHJvdmVTdGF0dXNUZXh0OiBmdW5jdGlvbihhcHByb3ZlSnVkZ2UsIGF1dG9TdWJtaXR0ZWQpIHtcbiAgICB2YXIgYXBwcm92ZVN0YXR1c1RleHQsIGxvY2FsZTtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgICAgaWYgKGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnemgtY24nKSB7XG4gICAgICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKTtcbiAgICB9XG4gICAgaWYgKGF1dG9TdWJtaXR0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX3RpbWVvdXRfYXV0b19zdWJtaXR0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICB9XG4gICAgYXBwcm92ZVN0YXR1c1RleHQgPSB2b2lkIDA7XG4gICAgc3dpdGNoIChhcHByb3ZlSnVkZ2UpIHtcbiAgICAgIGNhc2UgJ2FwcHJvdmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSBhcHByb3ZlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlamVjdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWplY3RlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Rlcm1pbmF0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHRlcm1pbmF0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWFzc2lnbmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWFzc2lnbmVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVsb2NhdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWxvY2F0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXRyaWV2ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJldHJpZXZlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JldHVybmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZXR1cm5lZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlYWRlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVhZGVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhcHByb3ZlU3RhdHVzVGV4dDtcbiAgfSxcbiAgZ2V0QXBwcm92ZUp1ZGdlQ2xhc3M6IGZ1bmN0aW9uKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkge1xuICAgIGlmIChhdXRvU3VibWl0dGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gJ2F1dG9TdWJtaXR0ZWQnO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZUp1ZGdlO1xuICB9LFxuICBfdDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5KTtcbiAgfSxcbiAgbXlBcHByb3ZlRGVzY3JpcHRpb246IGZ1bmN0aW9uKGFwcHJvdmVJZCkge1xuICAgIHZhciBteUFwcHJvdmUsIHJlZiwgcmVmMTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgbXlBcHByb3ZlID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5teUFwcHJvdmUpICE9IG51bGwgPyByZWYxLmdldCgpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAobXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgaWYgKCFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiAobXlBcHByb3ZlICE9IG51bGwgPyBteUFwcHJvdmUuZGVzY3JpcHRpb24gOiB2b2lkIDApIHx8IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzRm9yd2FyZDogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICBpZiAoYXBwcm92ZWQgJiYgYXBwcm92ZWQudHlwZSA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzaG93Rm9yd2FyZERlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChkYi5pbnN0YW5jZXMuZmluZChhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFwcHJvdmUgJiYgYXBwcm92ZS50eXBlID09PSAnZm9yd2FyZCcgJiYgYXBwcm92ZS5mcm9tX3VzZXIgPT09IE1ldGVvci51c2VySWQoKSAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpICYmIGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgbWFya0Rvd25Ub0h0bWw6IGZ1bmN0aW9uKG1hcmtEb3duU3RyaW5nKSB7XG4gICAgdmFyIHJlbmRlcmVyO1xuICAgIGlmIChtYXJrRG93blN0cmluZykge1xuICAgICAgcmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcbiAgICAgIHJlbmRlcmVyLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIgKyBocmVmICsgXCInIHRpdGxlPSdcIiArIHRpdGxlICsgXCInPlwiICsgdGV4dCArIFwiPC9hPlwiO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge1xuICAgICAgICByZW5kZXJlcjogcmVuZGVyZXJcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sXG4gIGlzRGlzdHJpYnV0ZTogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChhcHByb3ZlICYmIGFwcHJvdmUudHlwZSA9PT0gJ2Rpc3RyaWJ1dGUnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzaG93RGlzdHJpYnV0ZURlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIHZhciBpbnM7XG4gICAgaWYgKGRiLmluc3RhbmNlcy5maW5kKGFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYXBwcm92ZSAmJiBhcHByb3ZlLnR5cGUgPT09ICdkaXN0cmlidXRlJyAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpICYmIGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJyAmJiBTdGVlZG9zLmhhc0ZlYXR1cmUoJ2ZpbGVfZGlzdHJpYnV0aW9uJywgU3RlZWRvcy5nZXRTcGFjZUlkKCkpKSB7XG4gICAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogYXBwcm92ZS5pbnN0YW5jZVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBmbG93OiAxLFxuICAgICAgICAgIHNwYWNlOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGlucyAmJiBpbnMuZmxvdyAmJiBpbnMuc3BhY2UpIHtcbiAgICAgICAgaWYgKFdvcmtmbG93TWFuYWdlci5oYXNGbG93QWRtaW5QZXJtaXNzaW9uKGlucy5mbG93LCBpbnMuc3BhY2UsIE1ldGVvci51c2VySWQoKSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFwcHJvdmUuZnJvbV91c2VyID09PSBNZXRlb3IudXNlcklkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZmluaXNoRGF0ZVNjaGVtYTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKFN0ZWVkb3MuaXNBbmRyb2lkT3JJT1MoKSkge1xuICAgICAgcmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoe1xuICAgICAgICBmaW5pc2hfZGF0ZToge1xuICAgICAgICAgIGF1dG9mb3JtOiB7XG4gICAgICAgICAgICB0eXBlOiBcImRhdGV0aW1lLWxvY2FsXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgICB0eXBlOiBEYXRlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYSh7XG4gICAgICAgIGZpbmlzaF9kYXRlOiB7XG4gICAgICAgICAgYXV0b2Zvcm06IHtcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyXCIsXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGVUaW1lUGlja2VyT3B0aW9uczoge1xuICAgICAgICAgICAgICBmb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuICAgICAgICAgICAgICBpZ25vcmVSZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgbG9jYWxlOiBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpLFxuICAgICAgICAgICAgICB3aWRnZXRQb3NpdGlvbmluZzoge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWw6ICdyaWdodCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICAgIHR5cGU6IERhdGVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBmaW5pc2hEYXRlVmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmluaXNoX2RhdGU6IHRoaXMuZmluaXNoX2RhdGVcbiAgICB9O1xuICB9LFxuXG4gIC8qXG4gICAgIFx05q2k5Ye95pWw55So5LqO5o6n5Yi25piv5ZCm5pi+56S6dHJhY2VzIHZpZXdcbiAgICAgXHR0cnVlOiDmmL7npLp0cmFjZXMgdmlldyznrb7moLjljobnqIvmjInpkq7ngrnlh7vlkI7mmK/nm7TmjqXlrprkvY3liLB0cmFjZXMgdmlld1xuICAgICBcdGZhbHNlOiDkuI3mmL7npLp0cmFjZXMgdmlld++8jOetvuaguOWOhueoi+aMiemSrueCueWHu+WQjizku6VNb2RhbCDmlrnlvI/mmL7npLp0cmFjZXMgdmlld1xuICAgKi9cbiAgc2hvd1RyYWNlc1ZpZXc6IGZ1bmN0aW9uKGZvcm0sIGZvcm1fdmVyc2lvbikge1xuICAgIHZhciByZWYsIHNob3dfbW9kYWxfdHJhY2VzX2xpc3Q7XG4gICAgc2hvd19tb2RhbF90cmFjZXNfbGlzdCA9ICgocmVmID0gZGIuc3BhY2Vfc2V0dGluZ3MuZmluZE9uZSh7XG4gICAgICBzcGFjZTogU2Vzc2lvbi5nZXQoXCJzcGFjZUlkXCIpLFxuICAgICAga2V5OiBcInNob3dfbW9kYWxfdHJhY2VzX2xpc3RcIlxuICAgIH0pKSAhPSBudWxsID8gcmVmLnZhbHVlcyA6IHZvaWQgMCkgfHwgZmFsc2U7XG4gICAgcmV0dXJuICFzaG93X21vZGFsX3RyYWNlc19saXN0O1xuICB9LFxuICBnZXRJbnN0YW5jZVN0YXRlVGV4dDogZnVuY3Rpb24oaW5zdGFuY2VfaWQpIHtcbiAgICB2YXIgaW5zLCBsb2NhbGUsIHRleHQ7XG4gICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICAgIGlmIChsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3poLWNuJykge1xuICAgICAgICBsb2NhbGUgPSBcInpoLUNOXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIik7XG4gICAgfVxuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGlzX3JlYWQ6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWlucykge1xuICAgICAgcmV0dXJuIFRBUGkxOG4uX18oJ2luc3RhbmNlX2RlbGV0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICB9XG4gICAgdGV4dCA9ICcnO1xuICAgIGlmIChpbnMuc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICB0ZXh0ID0gVEFQaTE4bi5fXygnY29tcGxldGVkJywge30sIGxvY2FsZSk7XG4gICAgfSBlbHNlIGlmIChpbnMuc3RhdGUgPT09ICdwZW5kaW5nJykge1xuICAgICAgdGV4dCA9IFRBUGkxOG4uX18oJ3BlbmRpbmcnLCB7fSwgbG9jYWxlKTtcbiAgICB9IGVsc2UgaWYgKGlucy5zdGF0ZSA9PT0gJ2RyYWZ0Jykge1xuICAgICAgaWYgKGlucy5pc19yZWFkKSB7XG4gICAgICAgIHRleHQgPSBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX3JlYWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX25vdF95ZXRfaGFuZGxlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfSxcbiAgZ2V0SW5zdGFuY2VTdGF0ZUNvbG9yOiBmdW5jdGlvbihpbnN0YW5jZV9pZCkge1xuICAgIHZhciBjbGEsIGlucztcbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHN0YXRlOiAxLFxuICAgICAgICBpc19yZWFkOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbnMpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjbGEgPSAnJztcbiAgICBpZiAoaW5zLnN0YXRlID09PSAnZHJhZnQnKSB7XG4gICAgICBpZiAoaW5zLmlzX3JlYWQpIHtcbiAgICAgICAgY2xhID0gJ2JsdWUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhID0gJ3JlZCc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGE7XG4gIH0sXG4gIGZpcnN0VHJhY2U6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4ID09PSAwO1xuICB9LFxuICBsYXN0X2Rpc3RyaWJ1dGVfZnJvbTogZnVuY3Rpb24oaW5zdGFuY2VfaWQpIHtcbiAgICB2YXIgZGlzX2luZm8sIGlucywgdXNlcjtcbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlX2lkLFxuICAgICAgZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlOiB7XG4gICAgICAgICRleGlzdHM6IHRydWVcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgY3JlYXRlZDogMSxcbiAgICAgICAgY3JlYXRlZF9ieTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnMpIHtcbiAgICAgIGRpc19pbmZvID0ge307XG4gICAgICB1c2VyID0ge307XG4gICAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICAgIHVzZXIgPSBVVWZsb3dfYXBpLmdldE5hbWVGb3JVc2VyKGlucy5jcmVhdGVkX2J5KTtcbiAgICAgIH0gZWxzZSBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICAgIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICBfaWQ6IGlucy5jcmVhdGVkX2J5XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXIubmFtZSkge1xuICAgICAgICBkaXNfaW5mby5mcm9tX3VzZXIgPSB1c2VyLl9pZDtcbiAgICAgICAgZGlzX2luZm8uZnJvbV91c2VyX25hbWUgPSB1c2VyLm5hbWU7XG4gICAgICAgIGRpc19pbmZvLmNyZWF0ZWQgPSBpbnMuY3JlYXRlZDtcbiAgICAgIH1cbiAgICAgIGlmICghXy5pc0VtcHR5KGRpc19pbmZvKSkge1xuICAgICAgICByZXR1cm4gZGlzX2luZm87XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBpc0NDT3JEaXN0cmlidXRlT3JGb3J3YXJkVGVybWluYXRlZDogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmICgoYXBwcm92ZS50eXBlID09PSAnY2MnIHx8IGFwcHJvdmUudHlwZSA9PT0gJ2Rpc3RyaWJ1dGUnIHx8IGFwcHJvdmUudHlwZSA9PT0gJ2ZvcndhcmQnKSAmJiBhcHByb3ZlLmp1ZGdlID09PSAndGVybWluYXRlZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGp1ZGdlVGVybWluYXRlZDogZnVuY3Rpb24oanVkZ2UpIHtcbiAgICByZXR1cm4ganVkZ2UgPT09ICd0ZXJtaW5hdGVkJztcbiAgfSxcbiAgaW5zdGFuY2VFeGlzdHM6IGZ1bmN0aW9uKGluc3RhbmNlX2lkKSB7XG4gICAgcmV0dXJuICEhZGIuaW5zdGFuY2VzLmZpbmQoaW5zdGFuY2VfaWQpLmNvdW50KCk7XG4gIH0sXG4gIGFnZW50RGVzY3JpcHRpb246IGZ1bmN0aW9uKHVzZXJOYW1lKSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgICAgaWYgKGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnemgtY24nKSB7XG4gICAgICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHtcbiAgICAgIHVzZXJOYW1lOiB1c2VyTmFtZVxuICAgIH0sIGxvY2FsZSk7XG4gIH0sXG4gIHRyYWNlTmFtZTogZnVuY3Rpb24oaW5zdGFuY2VfaWQsIHRyYWNlSWQpIHtcbiAgICB2YXIgcmVmLCByZWYxO1xuICAgIHJldHVybiAocmVmID0gXy5maW5kKChyZWYxID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB0cmFjZXM6IDFcbiAgICAgIH1cbiAgICB9KSkgIT0gbnVsbCA/IHJlZjEudHJhY2VzIDogdm9pZCAwLCBmdW5jdGlvbih0cmFjZSkge1xuICAgICAgcmV0dXJuIHRyYWNlLl9pZCA9PT0gdHJhY2VJZDtcbiAgICB9KSkgIT0gbnVsbCA/IHJlZi5uYW1lIDogdm9pZCAwO1xuICB9LFxuICBvYmplY3RVcmw6IGZ1bmN0aW9uKG9iamVjdF9uYW1lLCByZWNvcmRfaWQsIGFwcF9pZCkge1xuICAgIHJldHVybiBDcmVhdG9yLmdldE9iamVjdFVybChvYmplY3RfbmFtZSwgcmVjb3JkX2lkLCBhcHBfaWQpO1xuICB9XG59O1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMuZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgdXRjT2Zmc2V0O1xuICAgIGlmIChkYXRlKSB7XG4gICAgICB1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0O1xuICAgICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5mb3JtYXREYXRlKGRhdGUsIHV0Y09mZnNldCk7XG4gICAgfVxuICB9O1xuICBUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLl90ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgIHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSk7XG4gIH07XG4gIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMuc2hvd0RlbGV0ZUJ1dHRvbiA9IGZ1bmN0aW9uKGFwcHJvdmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufVxuXG5UcmFjZXNUZW1wbGF0ZS5ldmVudHMgPSB7XG4gICdjbGljayAuY2MtYXBwcm92ZS1yZW1vdmUnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgYXBwcm92ZUlkLCBpbnN0YW5jZUlkO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyAqIDEgIT09IDEpIHtcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYWxsaW5nID0gMTtcbiAgICAgICQoXCJpXCIsIGV2ZW50LmN1cnJlbnRUYXJnZXQpLmFkZENsYXNzKFwiZmEtc3BpblwiKTtcbiAgICAgIGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpO1xuICAgICAgYXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZTtcbiAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKTtcbiAgICAgIE1ldGVvci5jYWxsKCdjY19yZW1vdmUnLCBpbnN0YW5jZUlkLCBhcHByb3ZlSWQsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKTtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHRvYXN0ci5lcnJvcihlcnIpO1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYWxsaW5nID0gMDtcbiAgICAgICAgICAkKFwiaVwiLCBldmVudC5jdXJyZW50VGFyZ2V0KS5yZW1vdmVDbGFzcyhcImZhLXNwaW5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJyZW1vdmVfY2NfYXBwcm92ZVwiKSk7XG4gICAgICAgICAgaWYgKCQoXCIuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsXCIpLmxlbmd0aCkge1xuICAgICAgICAgICAgTW9kYWwuaGlkZShcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgJ2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1jYy1hcHByb3ZlLXJlbW92ZSc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHZhciBhcHByb3ZlSWQsIGluc3RhbmNlSWQ7XG4gICAgaW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJyk7XG4gICAgYXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZTtcbiAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgTWV0ZW9yLmNhbGwoJ2NjX3JlbW92ZScsIGluc3RhbmNlSWQsIGFwcHJvdmVJZCwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKTtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdG9hc3RyLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJyZW1vdmVfY2NfYXBwcm92ZVwiKSk7XG4gICAgICAgIE1vZGFsLmhpZGUoXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICdjbGljayAuYXBwcm92ZS1pdGVtLC5hcHByb3ZlLWRlc2NyaXB0aW9uJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgaWYgKCEkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcImEuYnRuLWxpbmtcIikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gTW9kYWwuc2hvdyhcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiLCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gICd0YXBob2xkIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICBpZiAoISQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiYS5idG4tbGlua1wiKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBNb2RhbC5zaG93KFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIsIHRoaXMpO1xuICAgIH1cbiAgfSxcbiAgJ2NsaWNrIC5hcHByb3ZlLWl0ZW0gYS5idG4tbGluaywuYXBwcm92ZS1kZXNjcmlwdGlvbiBhLmJ0bi1saW5rLC5hcHByb3ZlLWl0ZW0tZGlzdHJpYnV0ZSBhLmJ0bi1saW5rJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIHJlZiwgdXNlcklkO1xuICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgIHVzZXJJZCA9IChyZWYgPSBldmVudC50YXJnZXQuZGF0YXNldCkgIT0gbnVsbCA/IHJlZi50YXJnZXRfdXNlcl9pZCA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBDcmVhdG9yLm9wZW5TYWZlT2JqZWN0VXJsKCd1c2VycycsIHVzZXJJZCk7XG4gICAgfVxuICB9LFxuICAndGFwZW5kIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICBpZiAoISQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiYS5idG4tbGlua1wiKS5sZW5ndGgpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gICdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZm9yd2FyZC1hcHByb3ZlLXJlbW92ZSc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHZhciBhcHByb3ZlSWQsIGluc3RhbmNlSWQsIHRyYWNlSWQ7XG4gICAgaW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJyk7XG4gICAgYXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZTtcbiAgICB0cmFjZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQudHJhY2U7XG4gICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgIE1ldGVvci5jYWxsKCdmb3J3YXJkX3JlbW92ZScsIGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKTtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdG9hc3RyLmVycm9yKFRBUGkxOG4uX18oZXJyLnJlYXNvbikpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICB0b2FzdHIuc3VjY2VzcyhUQVBpMThuLl9fKFwiaW5zdGFuY2VfYXBwcm92ZV9mb3J3YXJkX3JlbW92ZV9zdWNjZXNzXCIpKTtcbiAgICAgICAgTW9kYWwuaGlkZShcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgJ2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1mb3J3YXJkLWluc3RhbmNlLWxvb2snOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgZm9yd2FyZF9pbnN0YW5jZSwgZm9yd2FyZF9zcGFjZTtcbiAgICBmb3J3YXJkX3NwYWNlID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuZm9yd2FyZHNwYWNlO1xuICAgIGZvcndhcmRfaW5zdGFuY2UgPSBldmVudC50YXJnZXQuZGF0YXNldC5mb3J3YXJkaW5zdGFuY2U7XG4gICAgcmV0dXJuIFN0ZWVkb3Mub3BlbldpbmRvdyhTdGVlZG9zLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIgKyBmb3J3YXJkX3NwYWNlICsgXCIvdmlldy9yZWFkb25seS9cIiArIGZvcndhcmRfaW5zdGFuY2UpKTtcbiAgfSxcbiAgJ2NsaWNrIC5idG4tbW9kaWZpY2F0aW9uJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdGVtcGxhdGUuaXNfZWRpdGluZy5zZXQoIXRlbXBsYXRlLmlzX2VkaXRpbmcuZ2V0KCkpO1xuICAgIGlmICghU3RlZWRvcy5pc0FuZHJvaWRPcklPUygpKSB7XG4gICAgICByZXR1cm4gVHJhY2tlci5hZnRlckZsdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJChcIiNpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWwgI2ZpbmlzaF9pbnB1dFwiKS5vbihcImRwLnNob3dcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICQoXCIubW9kYWwtYm9keVwiKS5zY3JvbGxUb3AoMTAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gICdjbGljayAuYnRuLWNhbmNlbEJ1dCc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHJldHVybiB0ZW1wbGF0ZS5pc19lZGl0aW5nLnNldCghdGVtcGxhdGUuaXNfZWRpdGluZy5nZXQoKSk7XG4gIH0sXG4gICdjbGljayAuYnRuLXNhdmVCdXQnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgYXBwcm92ZUlkLCBmaW5pc2hfaW5wdXQsIGluc3RhbmNlSWQsIG9waW5pb25faW5wdXQsIHRyYWNlSWQ7XG4gICAgaW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJyk7XG4gICAgYXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZTtcbiAgICB0cmFjZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQudHJhY2U7XG4gICAgb3Bpbmlvbl9pbnB1dCA9ICQoJyNvcGluaW9uX2lucHV0JykudmFsKCk7XG4gICAgZmluaXNoX2lucHV0ID0gQXV0b0Zvcm0uZ2V0RmllbGRWYWx1ZShcImZpbmlzaF9kYXRlXCIsIFwiZmluaXNoRGF0ZUF1dG9Gb3JtXCIpO1xuICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKTtcbiAgICByZXR1cm4gTWV0ZW9yLmNhbGwoJ2NoYW5nZV9hcHByb3ZlX2luZm8nLCBpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIG9waW5pb25faW5wdXQsIGZpbmlzaF9pbnB1dCwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKTtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgdG9hc3RyLmVycm9yKFRBUGkxOG4uX18oZXJyLnJlYXNvbikpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICB0b2FzdHIuc3VjY2Vzcyh0KFwiaW5zdGFuY2VfYXBwcm92ZV9tb2RhbF9tb2RpZmljYXRpb25zYXZlXCIpKTtcbiAgICAgICAgTW9kYWwuaGlkZShcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgJ2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1kaXN0cmlidXRlLWFwcHJvdmUtcmVtb3ZlJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgTW9kYWwuYWxsb3dNdWx0aXBsZSA9IHRydWU7XG4gICAgcmV0dXJuIE1vZGFsLnNob3coJ2NhbmNlbF9kaXN0cmlidXRlX21vZGFsJyk7XG4gIH1cbn07XG4iLCJSZWxhdGVkSW5zdGFuY2VzLmhlbHBlcnMgPVxuXHRzaG93UmVsYXRlZEluc3RhY2VzOiAtPlxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxuXHRcdFx0aW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdFx0ZWxzZVxuXHRcdFx0aW5zID0gdGhpcy5pbnN0YW5jZVxuXHRcdGlmIGlucz8ucmVsYXRlZF9pbnN0YW5jZXMgJiYgXy5pc0FycmF5KGlucz8ucmVsYXRlZF9pbnN0YW5jZXMpXG5cdFx0XHRpZiBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiB7JGluOiBpbnMucmVsYXRlZF9pbnN0YW5jZXN9fSwge2ZpZWxkczoge3NwYWNlOiAxLCBuYW1lOiAxfX0pLmNvdW50KCkgPiAwXG5cdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gZmFsc2VcblxuXHRyZWxhdGVkX2luc3RhY2VzOiAtPlxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxuXHRcdFx0aW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cdFx0ZWxzZVxuXHRcdFx0aW5zID0gdGhpcy5pbnN0YW5jZVxuXHRcdGlmIGlucz8ucmVsYXRlZF9pbnN0YW5jZXMgJiYgXy5pc0FycmF5KGlucz8ucmVsYXRlZF9pbnN0YW5jZXMpXG5cdFx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogaW5zLnJlbGF0ZWRfaW5zdGFuY2VzfX0sIHtmaWVsZHM6IHtzcGFjZTogMSwgbmFtZTogMX19KS5mZXRjaCgpXG5cblx0cmVsYXRlZF9pbnN0YWNlX3VybDogKGlucykgLT5cblxuXHRcdGlmIE1ldGVvci5pc0NsaWVudCAmJiAoU3RlZWRvcy5pc01vYmlsZSgpIHx8IFN0ZWVkb3MuaXNDb3Jkb3ZhKCkpXG5cdFx0XHRyZXR1cm4gJydcblxuXHRcdGFic29sdXRlID0gZmFsc2VcblxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxuXHRcdFx0YWJzb2x1dGUgPSB0aGlzLmFic29sdXRlXG5cdFx0aWYgYWJzb2x1dGVcblx0XHRcdHJldHVybiBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIitpbnMuc3BhY2UrXCIvdmlldy9yZWFkb25seS9cIiArIGlucy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKVxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIraW5zLnNwYWNlK1wiL3ZpZXcvcmVhZG9ubHkvXCIgKyBpbnMuX2lkICsgJz9oaWRlX3RyYWNlcz0wJylcblxuXHRfdDogKGtleSktPlxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxuXHRcdGVsc2Vcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcblx0XHRcdHJldHVybiBUQVBpMThuLl9fKGtleSwge30sIGxvY2FsZSlcblxuXHRzaG93X2RlbGV0ZTogKCktPlxuXHRcdGlmICFNZXRlb3IuaXNDbGllbnRcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdGVsc2Vcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09IFwiZHJhZnRcIiB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXG5cdFx0XHRcdGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpXG5cdFx0XHRcdGlmIGN1cnJlbnRfc3RlcFxuXHRcdFx0XHRcdGlmIChjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggfHwgY3VycmVudF9zdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdHJ1ZSB8fCBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PSB1bmRlZmluZWQpXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZSIsIlJlbGF0ZWRJbnN0YW5jZXMuaGVscGVycyA9IHtcbiAgc2hvd1JlbGF0ZWRJbnN0YWNlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucztcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zID0gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG4gICAgaWYgKChpbnMgIT0gbnVsbCA/IGlucy5yZWxhdGVkX2luc3RhbmNlcyA6IHZvaWQgMCkgJiYgXy5pc0FycmF5KGlucyAhPSBudWxsID8gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwKSkge1xuICAgICAgaWYgKGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBpbnMucmVsYXRlZF9pbnN0YW5jZXNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICBuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmNvdW50KCkgPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICByZWxhdGVkX2luc3RhY2VzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnMgPSB0aGlzLmluc3RhbmNlO1xuICAgIH1cbiAgICBpZiAoKGlucyAhPSBudWxsID8gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwKSAmJiBfLmlzQXJyYXkoaW5zICE9IG51bGwgPyBpbnMucmVsYXRlZF9pbnN0YW5jZXMgOiB2b2lkIDApKSB7XG4gICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IGlucy5yZWxhdGVkX2luc3RhbmNlc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICB9XG4gIH0sXG4gIHJlbGF0ZWRfaW5zdGFjZV91cmw6IGZ1bmN0aW9uKGlucykge1xuICAgIHZhciBhYnNvbHV0ZTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50ICYmIChTdGVlZG9zLmlzTW9iaWxlKCkgfHwgU3RlZWRvcy5pc0NvcmRvdmEoKSkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgYWJzb2x1dGUgPSBmYWxzZTtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBhYnNvbHV0ZSA9IHRoaXMuYWJzb2x1dGU7XG4gICAgfVxuICAgIGlmIChhYnNvbHV0ZSkge1xuICAgICAgcmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgaW5zLnNwYWNlICsgXCIvdmlldy9yZWFkb25seS9cIiArIGlucy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGlucy5zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBpbnMuX2lkICsgJz9oaWRlX3RyYWNlcz0wJyk7XG4gICAgfVxuICB9LFxuICBfdDogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKTtcbiAgICB9XG4gIH0sXG4gIHNob3dfZGVsZXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudF9zdGVwO1xuICAgIGlmICghTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gXCJkcmFmdFwiIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnKSB7XG4gICAgICAgIGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xuICAgICAgICBpZiAoY3VycmVudF9zdGVwKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9tYWluX2F0dGFjaCB8fCBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PT0gdHJ1ZSB8fCBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iLCJSZWxhdGVkUmVjb3Jkcy5oZWxwZXJzID1cblx0c2hvd1JlbGF0ZWRSZWNvcmRzOiAoKS0+XG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XG5cdFx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblx0XHRlbHNlXG5cdFx0XHRpbnMgPSB0aGlzLmluc3RhbmNlXG5cdFx0aWYgIWluc1xuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0cmV0dXJuICFfLmlzRW1wdHkoaW5zLnJlY29yZF9pZHMpIiwiUmVsYXRlZFJlY29yZHMuaGVscGVycyA9IHtcbiAgc2hvd1JlbGF0ZWRSZWNvcmRzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnMgPSB0aGlzLmluc3RhbmNlO1xuICAgIH1cbiAgICBpZiAoIWlucykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gIV8uaXNFbXB0eShpbnMucmVjb3JkX2lkcyk7XG4gIH1cbn07XG4iLCJEZXNpZ25lckFQSSA9XG5cblx0Z2V0QWJzb2x1dGVVcmw6ICh1cmwpLT5cblx0XHRyb290VXJsID0gaWYgX19tZXRlb3JfcnVudGltZV9jb25maWdfXyB0aGVuIF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggZWxzZSBcIlwiXG5cdFx0aWYgcm9vdFVybFxuXHRcdFx0dXJsID0gcm9vdFVybCArIHVybFxuXHRcdHJldHVybiB1cmw7XG5cblx0d3JpdGVSZXNwb25zZTogKHJlcywgaHR0cENvZGUsIGJvZHkpLT5cblx0XHRyZXMuc3RhdHVzQ29kZSA9IGh0dHBDb2RlO1xuXHRcdHJlcy5lbmQoYm9keSk7XG5cdFx0XG5cdHNlbmRJbnZhbGlkVVJMUmVzcG9uc2U6IChyZXMpLT5cblx0XHRyZXR1cm4gQHdyaXRlUmVzcG9uc2UocmVzLCA0MDQsIFwidGhlIHBhcmFtICd1cmwnIGlzIHJlcXVpcmVkIGFzIHF1ZXJ5cy5cIik7XG5cdFx0XG5cdHNlbmRBdXRoVG9rZW5FeHBpcmVkUmVzcG9uc2U6IChyZXMpLT5cblx0XHRyZXR1cm4gQHdyaXRlUmVzcG9uc2UocmVzLCA0MDEsIFwidGhlIGF1dGhfdG9rZW4gaGFzIGV4cGlyZWQuXCIpO1xuXG5cdHNlbmRIdG1sUmVzcG9uc2U6IChyZXEsIHJlcywgdHlwZSktPlxuXHRcdHF1ZXJ5ID0gcmVxLnF1ZXJ5XG5cdFx0dXJsID0gcXVlcnkudXJsXG5cblx0XHRpZiB1cmxcblx0XHRcdHVybCA9IGRlY29kZVVSSUNvbXBvbmVudCh1cmwpXG5cdFx0ZWxzZVxuXHRcdFx0RGVzaWduZXJBUEkuc2VuZEludmFsaWRVUkxSZXNwb25zZSByZXNcblx0XHRcblx0XHR0aXRsZSA9IHF1ZXJ5LnRpdGxlXG5cdFx0aWYgdGl0bGVcblx0XHRcdHRpdGxlID0gZGVjb2RlVVJJQ29tcG9uZW50KHRpdGxlKVxuXHRcdGVsc2Vcblx0XHRcdHRpdGxlID0gXCJTdGVlZG9zIERlc2lnbmVyXCJcblx0XHRcblx0XHRlcnJvcl9tc2cgPSBcIlwiXG5cblx0XHRyZXR1cm4gQHdyaXRlUmVzcG9uc2UgcmVzLCAyMDAsIFwiXCJcIlxuXHRcdFx0PGh0bWw+XG5cdFx0XHRcdDxoZWFkPlxuXHRcdFx0XHRcdDxzdHlsZT5cblx0XHRcdFx0XHRcdGh0bWwsYm9keXtcblx0XHRcdFx0XHRcdFx0bWFyZ2luOiAwO1xuXHRcdFx0XHRcdFx0XHRwYWRkaW5nOiAwO1xuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRib2R5IHsgXG5cdFx0XHRcdFx0XHRcdGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcblx0XHRcdFx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0LmxvYWRpbmd7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdFx0XHRcdFx0bGVmdDogMHB4O1xuXHRcdFx0XHRcdFx0XHRyaWdodDogMHB4O1xuXHRcdFx0XHRcdFx0XHR0b3A6IDUwJTtcblx0XHRcdFx0XHRcdFx0ei1pbmRleDogLTE7Lyrorr7nva7kuLotMe+8jOWPr+S7peWcqGlmcmFtZeWKoOi9veWHuuadpeWQjuiHquWKqOa2iOWksSovXG5cdFx0XHRcdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHRcdFx0XHRcdFx0bWFyZ2luLXRvcDogLTMwcHg7XG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMzZweDtcblx0XHRcdFx0XHRcdFx0Y29sb3I6ICNkZmRmZGY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQuZXJyb3ItbXNne1xuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDBweDtcblx0XHRcdFx0XHRcdFx0cmlnaHQ6IDBweDtcblx0XHRcdFx0XHRcdFx0Ym90dG9tOiAyMHB4O1xuXHRcdFx0XHRcdFx0XHR6LWluZGV4OiAxMTAwO1xuXHRcdFx0XHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMjBweDtcblx0XHRcdFx0XHRcdFx0Y29sb3I6ICNhOTQ0NDI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0PC9zdHlsZT5cblx0XHRcdFx0XHQ8bWV0YSBjaGFyc2V0PVwidXRmLThcIj5cblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ub1wiPlxuXHRcdFx0XHRcdDx0aXRsZT4je3RpdGxlfTwvdGl0bGU+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjE5MngxOTJcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwibWFuaWZlc3RcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvbWFuaWZlc3QuanNvblwiKX1cIj5cblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwibW9iaWxlLXdlYi1hcHAtY2FwYWJsZVwiIGNvbnRlbnQ9XCJ5ZXNcIj5cblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwidGhlbWUtY29sb3JcIiBjb250ZW50PVwiIzAwMFwiPlxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJhcHBsaWNhdGlvbi1uYW1lXCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiNTd4NTdcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi01N3g1Ny5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiNjB4NjBcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi02MHg2MC5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiNzJ4NzJcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi03Mng3Mi5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiNzZ4NzZcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi03Nng3Ni5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiMTE0eDExNFwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTExNHgxMTQucG5nXCIpfVwiPlxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjEyMHgxMjBcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xMjB4MTIwLnBuZ1wiKX1cIj5cblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCIxNDR4MTQ0XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tMTQ0eDE0NC5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiMTUyeDE1MlwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nXCIpfVwiPlxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjE4MHgxODBcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xODB4MTgwLnBuZ1wiKX1cIj5cblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZVwiIGNvbnRlbnQ9XCJ5ZXNcIj5cblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZVwiIGNvbnRlbnQ9XCJibGFjay10cmFuc2x1Y2VudFwiPlxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZVwiPlxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImljb25cIiB0eXBlPVwiaW1hZ2UvcG5nXCIgc2l6ZXM9XCIyMjh4MjI4XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2NvYXN0LTIyOHgyMjgucG5nXCIpfVwiPlxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImljb25cIiB0eXBlPVwiaW1hZ2UvcG5nXCIgc2l6ZXM9XCIxNngxNlwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLTE2eDE2LnBuZ1wiKX1cIj5cblx0XHRcdFx0XHQ8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3BuZ1wiIHNpemVzPVwiMzJ4MzJcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi0zMngzMi5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjk2eDk2XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tOTZ4OTYucG5nXCIpfVwiPlxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImljb25cIiB0eXBlPVwiaW1hZ2UvcG5nXCIgc2l6ZXM9XCIyMzB4MjMwXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tMjMweDIzMC5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwic2hvcnRjdXQgaWNvblwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLmljb1wiKX1cIj5cblx0XHRcdFx0XHQ8bGluayByZWw9XCJ5YW5kZXgtdGFibGVhdS13aWRnZXRcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMveWFuZGV4LWJyb3dzZXItbWFuaWZlc3QuanNvblwiKX1cIj5cblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3JcIiBjb250ZW50PVwiI2ZmZlwiPlxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJtc2FwcGxpY2F0aW9uLVRpbGVJbWFnZVwiIGNvbnRlbnQ9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9tc3RpbGUtMTQ0eDE0NC5wbmdcIil9XCI+XG5cdFx0XHRcdFx0PG1ldGEgbmFtZT1cIm1zYXBwbGljYXRpb24tY29uZmlnXCIgY29udGVudD1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Jyb3dzZXJjb25maWcueG1sXCIpfVwiPlxuXHRcdFx0XHRcdDxtZXRhIHByb3BlcnR5PVwidHdpdHRlcjppbWFnZVwiIGNvbnRlbnQ9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy90d2l0dGVyLnBuZ1wiKX1cIj5cblx0XHRcdFx0XHQ8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL29wZW4tZ3JhcGgucG5nXCIpfVwiPlxuXHRcdFx0XHQ8L2hlYWQ+XG5cdFx0XHRcdDxib2R5PlxuXHRcdFx0XHRcdDxkaXYgY2xhc3MgPSBcImxvYWRpbmdcIj5Mb2FkaW5nLi4uPC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcyA9IFwiZXJyb3ItbXNnXCI+I3tlcnJvcl9tc2d9PC9kaXY+XG5cdFx0XHRcdFx0PGlmcmFtZSBpZD1cImlmckRlc2lnbmVyXCIgc3JjPVwiXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIG53ZGlzYWJsZT1cInRydWVcIiBmcmFtZWJvcmRlcj1cIm5vXCIgYm9yZGVyPVwiMFwiIG1hcmdpbndpZHRoPVwiMFwiIG1hcmdpbmhlaWdodD1cIjBcIiBzY3JvbGxpbmc9XCJub1wiIGFsbG93dHJhbnNwYXJlbmN5PVwieWVzXCI+PC9pZnJhbWU+XG5cdFx0XHRcdFx0PHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgc3JjPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvbGliL2pxdWVyeS9qcXVlcnktMS4xMS4yLm1pbi5qc1wiKX1cIj48L3NjcmlwdD5cblx0XHRcdFx0XHQ8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cblx0XHRcdFx0XHRcdHZhciBkZXNpZ25lciA9IHtcblx0XHRcdFx0XHRcdFx0dXJsUXVlcnk6ZnVuY3Rpb24obmFtZSl7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAoXCIoXnwmKVwiICsgbmFtZSArIFwiPShbXiZdKikoJnwkKVwiKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgciA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpLm1hdGNoKHJlZyk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHIgIT0gbnVsbCkgcmV0dXJuIHVuZXNjYXBlKHJbMl0pO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRydW46ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHR2YXIgdXJsID0gdGhpcy51cmxRdWVyeShcInVybFwiKTtcblx0XHRcdFx0XHRcdFx0XHR1cmwgPSBkZWNvZGVVUklDb21wb25lbnQodXJsKTtcblx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRpZih1cmwpe1xuXHRcdFx0XHRcdFx0XHRcdFx0JChcIiNpZnJEZXNpZ25lclwiKS5hdHRyKFwic3JjXCIsdXJsKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0dmFyIFN0ZWVkb3MgPSB3aW5kb3cub3BlbmVyLlN0ZWVkb3MgfHwgbnVsbDtcblx0XHRcdFx0XHRcdFx0XHRpZiAoU3RlZWRvcykge1xuXHRcdFx0XHRcdFx0XHRcdFx0U3RlZWRvcy5mb3JiaWROb2RlQ29udGV4dG1lbnUod2luZG93KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHQkKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdGRlc2lnbmVyLnJ1bigpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0PC9zY3JpcHQ+XG5cdFx0XHRcdDxib2R5PlxuXHRcdFx0PC9odG1sPlxuXHRcdFwiXCJcIlxuXG5Kc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvZGVzaWduZXI/dXJsPTp1cmwnLCAocmVxLCByZXMsIG5leHQpIC0+XG5cdERlc2lnbmVyQVBJLnNlbmRIdG1sUmVzcG9uc2UgcmVxLCByZXNcblxuIiwidmFyIERlc2lnbmVyQVBJO1xuXG5EZXNpZ25lckFQSSA9IHtcbiAgZ2V0QWJzb2x1dGVVcmw6IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciByb290VXJsO1xuICAgIHJvb3RVcmwgPSBfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fID8gX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCA6IFwiXCI7XG4gICAgaWYgKHJvb3RVcmwpIHtcbiAgICAgIHVybCA9IHJvb3RVcmwgKyB1cmw7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH0sXG4gIHdyaXRlUmVzcG9uc2U6IGZ1bmN0aW9uKHJlcywgaHR0cENvZGUsIGJvZHkpIHtcbiAgICByZXMuc3RhdHVzQ29kZSA9IGh0dHBDb2RlO1xuICAgIHJldHVybiByZXMuZW5kKGJvZHkpO1xuICB9LFxuICBzZW5kSW52YWxpZFVSTFJlc3BvbnNlOiBmdW5jdGlvbihyZXMpIHtcbiAgICByZXR1cm4gdGhpcy53cml0ZVJlc3BvbnNlKHJlcywgNDA0LCBcInRoZSBwYXJhbSAndXJsJyBpcyByZXF1aXJlZCBhcyBxdWVyeXMuXCIpO1xuICB9LFxuICBzZW5kQXV0aFRva2VuRXhwaXJlZFJlc3BvbnNlOiBmdW5jdGlvbihyZXMpIHtcbiAgICByZXR1cm4gdGhpcy53cml0ZVJlc3BvbnNlKHJlcywgNDAxLCBcInRoZSBhdXRoX3Rva2VuIGhhcyBleHBpcmVkLlwiKTtcbiAgfSxcbiAgc2VuZEh0bWxSZXNwb25zZTogZnVuY3Rpb24ocmVxLCByZXMsIHR5cGUpIHtcbiAgICB2YXIgZXJyb3JfbXNnLCBxdWVyeSwgdGl0bGUsIHVybDtcbiAgICBxdWVyeSA9IHJlcS5xdWVyeTtcbiAgICB1cmwgPSBxdWVyeS51cmw7XG4gICAgaWYgKHVybCkge1xuICAgICAgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERlc2lnbmVyQVBJLnNlbmRJbnZhbGlkVVJMUmVzcG9uc2UocmVzKTtcbiAgICB9XG4gICAgdGl0bGUgPSBxdWVyeS50aXRsZTtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIHRpdGxlID0gZGVjb2RlVVJJQ29tcG9uZW50KHRpdGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSBcIlN0ZWVkb3MgRGVzaWduZXJcIjtcbiAgICB9XG4gICAgZXJyb3JfbXNnID0gXCJcIjtcbiAgICByZXR1cm4gdGhpcy53cml0ZVJlc3BvbnNlKHJlcywgMjAwLCBcIjxodG1sPlxcblx0PGhlYWQ+XFxuXHRcdDxzdHlsZT5cXG5cdFx0XHRodG1sLGJvZHl7XFxuXHRcdFx0XHRtYXJnaW46IDA7XFxuXHRcdFx0XHRwYWRkaW5nOiAwO1xcblx0XHRcdFx0aGVpZ2h0OiAxMDAlO1xcblx0XHRcdH1cXG5cdFx0XHRib2R5IHsgXFxuXHRcdFx0XHRmb250LWZhbWlseTogJ1NvdXJjZSBTYW5zIFBybycsICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuXHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcblx0XHRcdH1cXG5cdFx0XHQubG9hZGluZ3tcXG5cdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cdFx0XHRcdGxlZnQ6IDBweDtcXG5cdFx0XHRcdHJpZ2h0OiAwcHg7XFxuXHRcdFx0XHR0b3A6IDUwJTtcXG5cdFx0XHRcdHotaW5kZXg6IC0xOy8q6K6+572u5Li6LTHvvIzlj6/ku6XlnKhpZnJhbWXliqDovb3lh7rmnaXlkI7oh6rliqjmtojlpLEqL1xcblx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblx0XHRcdFx0bWFyZ2luLXRvcDogLTMwcHg7XFxuXHRcdFx0XHRmb250LXNpemU6IDM2cHg7XFxuXHRcdFx0XHRjb2xvcjogI2RmZGZkZjtcXG5cdFx0XHR9XFxuXHRcdFx0LmVycm9yLW1zZ3tcXG5cdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cdFx0XHRcdGxlZnQ6IDBweDtcXG5cdFx0XHRcdHJpZ2h0OiAwcHg7XFxuXHRcdFx0XHRib3R0b206IDIwcHg7XFxuXHRcdFx0XHR6LWluZGV4OiAxMTAwO1xcblx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblx0XHRcdFx0Zm9udC1zaXplOiAyMHB4O1xcblx0XHRcdFx0Y29sb3I6ICNhOTQ0NDI7XFxuXHRcdFx0fVxcblx0XHQ8L3N0eWxlPlxcblx0XHQ8bWV0YSBjaGFyc2V0PVxcXCJ1dGYtOFxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgbWF4aW11bS1zY2FsZT0xLCB1c2VyLXNjYWxhYmxlPW5vXFxcIj5cXG5cdFx0PHRpdGxlPlwiICsgdGl0bGUgKyBcIjwvdGl0bGU+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMTkyeDE5MlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hbmRyb2lkLWNocm9tZS0xOTJ4MTkyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwibWFuaWZlc3RcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvbWFuaWZlc3QuanNvblwiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcIm1vYmlsZS13ZWItYXBwLWNhcGFibGVcXFwiIGNvbnRlbnQ9XFxcInllc1xcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcInRoZW1lLWNvbG9yXFxcIiBjb250ZW50PVxcXCIjMDAwXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwiYXBwbGljYXRpb24tbmFtZVxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjU3eDU3XFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tNTd4NTcucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiNjB4NjBcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi02MHg2MC5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImFwcGxlLXRvdWNoLWljb25cXFwiIHNpemVzPVxcXCI3Mng3MlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTcyeDcyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjc2eDc2XFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tNzZ4NzYucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTE0eDExNFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTExNHgxMTQucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTIweDEyMFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTEyMHgxMjAucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTQ0eDE0NFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTE0NHgxNDQucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTUyeDE1MlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiMTgweDE4MFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTE4MHgxODAucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZVxcXCIgY29udGVudD1cXFwieWVzXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZVxcXCIgY29udGVudD1cXFwiYmxhY2stdHJhbnNsdWNlbnRcXFwiPlxcblx0XHQ8bWV0YSBuYW1lPVxcXCJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZVxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMjI4eDIyOFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9jb2FzdC0yMjh4MjI4LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMTZ4MTZcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi0xNngxNi5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImljb25cXFwiIHR5cGU9XFxcImltYWdlL3BuZ1xcXCIgc2l6ZXM9XFxcIjMyeDMyXFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tMzJ4MzIucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJpY29uXFxcIiB0eXBlPVxcXCJpbWFnZS9wbmdcXFwiIHNpemVzPVxcXCI5Nng5NlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLTk2eDk2LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiMjMweDIzMFxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLTIzMHgyMzAucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJzaG9ydGN1dCBpY29uXFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24uaWNvXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJ5YW5kZXgtdGFibGVhdS13aWRnZXRcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMveWFuZGV4LWJyb3dzZXItbWFuaWZlc3QuanNvblwiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcIm1zYXBwbGljYXRpb24tVGlsZUNvbG9yXFxcIiBjb250ZW50PVxcXCIjZmZmXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2VcXFwiIGNvbnRlbnQ9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvbXN0aWxlLTE0NHgxNDQucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwibXNhcHBsaWNhdGlvbi1jb25maWdcXFwiIGNvbnRlbnQ9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYnJvd3NlcmNvbmZpZy54bWxcIikpICsgXCJcXFwiPlxcblx0XHQ8bWV0YSBwcm9wZXJ0eT1cXFwidHdpdHRlcjppbWFnZVxcXCIgY29udGVudD1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy90d2l0dGVyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIHByb3BlcnR5PVxcXCJvZzppbWFnZVxcXCIgY29udGVudD1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9vcGVuLWdyYXBoLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHQ8L2hlYWQ+XFxuXHQ8Ym9keT5cXG5cdFx0PGRpdiBjbGFzcyA9IFxcXCJsb2FkaW5nXFxcIj5Mb2FkaW5nLi4uPC9kaXY+XFxuXHRcdDxkaXYgY2xhc3MgPSBcXFwiZXJyb3ItbXNnXFxcIj5cIiArIGVycm9yX21zZyArIFwiPC9kaXY+XFxuXHRcdDxpZnJhbWUgaWQ9XFxcImlmckRlc2lnbmVyXFxcIiBzcmM9XFxcIlxcXCIgd2lkdGg9XFxcIjEwMCVcXFwiIGhlaWdodD1cXFwiMTAwJVxcXCIgbndkaXNhYmxlPVxcXCJ0cnVlXFxcIiBmcmFtZWJvcmRlcj1cXFwibm9cXFwiIGJvcmRlcj1cXFwiMFxcXCIgbWFyZ2lud2lkdGg9XFxcIjBcXFwiIG1hcmdpbmhlaWdodD1cXFwiMFxcXCIgc2Nyb2xsaW5nPVxcXCJub1xcXCIgYWxsb3d0cmFuc3BhcmVuY3k9XFxcInllc1xcXCI+PC9pZnJhbWU+XFxuXHRcdDxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBzcmM9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvbGliL2pxdWVyeS9qcXVlcnktMS4xMS4yLm1pbi5qc1wiKSkgKyBcIlxcXCI+PC9zY3JpcHQ+XFxuXHRcdDxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj5cXG5cdFx0XHR2YXIgZGVzaWduZXIgPSB7XFxuXHRcdFx0XHR1cmxRdWVyeTpmdW5jdGlvbihuYW1lKXtcXG5cdFx0XHRcdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAoXFxcIihefCYpXFxcIiArIG5hbWUgKyBcXFwiPShbXiZdKikoJnwkKVxcXCIpO1xcblx0XHRcdFx0XHR2YXIgciA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpLm1hdGNoKHJlZyk7XFxuXHRcdFx0XHRcdGlmIChyICE9IG51bGwpIHJldHVybiB1bmVzY2FwZShyWzJdKTtcXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XFxuXHRcdFx0XHR9LFxcblx0XHRcdFx0cnVuOmZ1bmN0aW9uKCl7XFxuXHRcdFx0XHRcdHZhciB1cmwgPSB0aGlzLnVybFF1ZXJ5KFxcXCJ1cmxcXFwiKTtcXG5cdFx0XHRcdFx0dXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCk7XFxuXHRcdFx0XHRcdFxcblx0XHRcdFx0XHRpZih1cmwpe1xcblx0XHRcdFx0XHRcdCQoXFxcIiNpZnJEZXNpZ25lclxcXCIpLmF0dHIoXFxcInNyY1xcXCIsdXJsKTtcXG5cdFx0XHRcdFx0fVxcblx0XHRcdFx0XHR2YXIgU3RlZWRvcyA9IHdpbmRvdy5vcGVuZXIuU3RlZWRvcyB8fCBudWxsO1xcblx0XHRcdFx0XHRpZiAoU3RlZWRvcykge1xcblx0XHRcdFx0XHRcdFN0ZWVkb3MuZm9yYmlkTm9kZUNvbnRleHRtZW51KHdpbmRvdyk7XFxuXHRcdFx0XHRcdH1cXG5cdFx0XHRcdH1cXG5cdFx0XHR9O1xcblx0XHRcdCQoZnVuY3Rpb24oKXtcXG5cdFx0XHRcdGRlc2lnbmVyLnJ1bigpO1xcblx0XHRcdH0pO1xcblx0XHQ8L3NjcmlwdD5cXG5cdDxib2R5PlxcbjwvaHRtbD5cIik7XG4gIH1cbn07XG5cbkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9kZXNpZ25lcj91cmw9OnVybCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHJldHVybiBEZXNpZ25lckFQSS5zZW5kSHRtbFJlc3BvbnNlKHJlcSwgcmVzKTtcbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9uZXh0U3RlcFVzZXJzXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG5cdHZhclxuXHRcdGRlYWxfdHlwZSA9IHJlcS5xdWVyeS5kZWFsX3R5cGUsXG5cdFx0c3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxuXHRcdGVycm9yID0gXCJcIjtcblxuXHRpZiAoIWRlYWxfdHlwZSB8fCAhc3BhY2VJZCkge1xuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcblx0XHRcdGNvZGU6IDIwMCxcblx0XHRcdGRhdGE6IHtcblx0XHRcdFx0J2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHR2YXJcblx0XHRib2R5ID0gcmVxLmJvZHksXG5cdFx0bmV4dFN0ZXBVc2VycyA9IFtdO1xuXG5cblx0c3dpdGNoIChkZWFsX3R5cGUpIHtcblx0XHRjYXNlICdzcGVjaWZ5VXNlcic6XG5cdFx0XHR2YXIgc3BlY2lmeVVzZXJJZHMgPSBib2R5LnNwZWNpZnlVc2VySWRzO1xuXG5cdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXJzKHNwYWNlSWQsIHNwZWNpZnlVc2VySWRzKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2FwcGxpY2FudFJvbGUnOlxuXHRcdFx0dmFyXG5cdFx0XHRcdGFwcGxpY2FudElkID0gYm9keS5hcHBsaWNhbnRJZCxcblx0XHRcdFx0YXBwcm92ZVJvbGVJZHMgPSBib2R5LmFwcHJvdmVSb2xlSWRzO1xuXHRcdFx0dmFyIGFwcGxpY2FudCA9IFdvcmtmbG93TWFuYWdlci5nZXRVc2VyKHNwYWNlSWQsIGFwcGxpY2FudElkKTtcblxuXHRcdFx0aWYgKGFwcGxpY2FudClcblx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyhzcGFjZUlkLCBhcHBsaWNhbnQub3JnYW5pemF0aW9ucywgYXBwcm92ZVJvbGVJZHMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnaHJSb2xlJzpcblx0XHRcdHZhciBhcHByb3ZlSHJSb2xlSWRzID0gYm9keS5hcHByb3ZlSHJSb2xlSWRzO1xuXHRcdFx0aWYgKGFwcHJvdmVIclJvbGVJZHMpXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SHJSb2xlc1VzZXJzKHNwYWNlSWQsIGFwcHJvdmVIclJvbGVJZHMpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnYXBwbGljYW50U3VwZXJpb3InOlxuXHRcdFx0dmFyIGFwcGxpY2FudElkID0gYm9keS5hcHBsaWNhbnRJZDtcblx0XHRcdHZhciBhcHBsaWNhbnQgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcihzcGFjZUlkLCBhcHBsaWNhbnRJZCk7XG5cdFx0XHRpZiAoYXBwbGljYW50Lm1hbmFnZXIpIHtcblx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRVc2VycyhzcGFjZUlkLCBhcHBsaWNhbnQubWFuYWdlcik7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdhcHBsaWNhbnQnOlxuXHRcdFx0dmFyIGFwcGxpY2FudElkID0gYm9keS5hcHBsaWNhbnRJZDtcblx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgYXBwbGljYW50SWQpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAndXNlckZpZWxkJzpcblx0XHRcdHZhclxuXHRcdFx0XHR1c2VyRmllbGQgPSBib2R5LnVzZXJGaWVsZCxcblx0XHRcdFx0dXNlckZpZWxkVmFsdWUgPSBib2R5LnVzZXJGaWVsZFZhbHVlO1xuXHRcdFx0aWYgKHVzZXJGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pXVzZXJGaWVsZFZhbHVl5YC85Li6QXJyYXlcblx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRVc2VycyhzcGFjZUlkLCB1c2VyRmllbGRWYWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZXh0U3RlcFVzZXJzLnB1c2goV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXIoc3BhY2VJZCwgdXNlckZpZWxkVmFsdWUpKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ29yZ0ZpZWxkJzpcblx0XHRcdHZhclxuXHRcdFx0XHRvcmdzLFxuXHRcdFx0XHRvcmdDaGlsZHJlbnMsXG5cdFx0XHRcdG9yZ0ZpZWxkID0gYm9keS5vcmdGaWVsZCxcblx0XHRcdFx0b3JnRmllbGRWYWx1ZSA9IGJvZHkub3JnRmllbGRWYWx1ZTtcblx0XHRcdGlmIChvcmdGaWVsZFZhbHVlKSB7XG5cdFx0XHRcdGlmIChvcmdGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pW9yZ0ZpZWxkVmFsdWXlgLzkuLpBcnJheVxuXHRcdFx0XHRcdG9yZ3MgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9ucyhvcmdGaWVsZFZhbHVlKTtcblx0XHRcdFx0XHRvcmdDaGlsZHJlbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc0NoaWxkcmVucyhzcGFjZUlkLCBvcmdGaWVsZFZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcmdzID0gW1dvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb24ob3JnRmllbGRWYWx1ZSldO1xuXHRcdFx0XHRcdG9yZ0NoaWxkcmVucyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25DaGlsZHJlbnMoc3BhY2VJZCwgb3JnRmllbGRWYWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zVXNlcnMoc3BhY2VJZCwgb3JnQ2hpbGRyZW5zKTtcblxuXHRcdFx0XHRvcmdGaWVsZFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnNVc2VycyhzcGFjZUlkLCBvcmdzKTtcblxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gbmV4dFN0ZXBVc2Vycy5jb25jYXQob3JnRmllbGRVc2Vycyk7XG5cblx0XHRcdFx0aWYgKCFuZXh0U3RlcFVzZXJzIHx8IG5leHRTdGVwVXNlcnMubGVuZ3RoIDwgMSkge1xuXHRcdFx0XHRcdGVycm9yID0gXCJPUkdfTk9fTUVNQkVSU1wiO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlcnJvciA9IFwiRklFTERfVkFMVUVfRU1QVFlcIjtcblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnc3BlY2lmeU9yZyc6XG5cdFx0XHR2YXIgc3BlY2lmeU9yZ0lkcyA9IGJvZHkuc3BlY2lmeU9yZ0lkcztcblx0XHRcdHZhciBzcGVjaWZ5T3JncyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zKHNwZWNpZnlPcmdJZHMpO1xuXHRcdFx0dmFyIHNwZWNpZnlPcmdDaGlsZHJlbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc0NoaWxkcmVucyhzcGFjZUlkLCBzcGVjaWZ5T3JnSWRzKTtcblxuXHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zVXNlcnMoc3BhY2VJZCwgc3BlY2lmeU9yZ3MpO1xuXHRcdFx0bmV4dFN0ZXBVc2VycyA9IG5leHRTdGVwVXNlcnMuY29uY2F0KFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zVXNlcnMoc3BhY2VJZCwgc3BlY2lmeU9yZ0NoaWxkcmVucykpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAndXNlckZpZWxkUm9sZSc6XG5cdFx0XHR2YXJcblx0XHRcdFx0dXNlckZpZWxkID0gYm9keS51c2VyRmllbGQsXG5cdFx0XHRcdHVzZXJGaWVsZFZhbHVlID0gYm9keS51c2VyRmllbGRWYWx1ZSxcblx0XHRcdFx0YXBwcm92ZXJSb2xlSWRzID0gYm9keS5hcHByb3ZlclJvbGVJZHM7XG5cdFx0XHRpZiAodXNlckZpZWxkVmFsdWUpIHtcblx0XHRcdFx0aWYgKHVzZXJGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pXVzZXJGaWVsZFZhbHVl5YC85Li6QXJyYXlcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5VXNlcnNBbmRSb2xlcyhzcGFjZUlkLCB1c2VyRmllbGRWYWx1ZSwgYXBwcm92ZXJSb2xlSWRzKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5VXNlcnNBbmRSb2xlcyhzcGFjZUlkLCBbdXNlckZpZWxkVmFsdWVdLCBhcHByb3ZlclJvbGVJZHMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFuZXh0U3RlcFVzZXJzIHx8IG5leHRTdGVwVXNlcnMubGVuZ3RoIDwgMSkge1xuXHRcdFx0XHRcdGVycm9yID0gXCJST0xFX05PX01FTUJFUlNcIjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXJyb3IgPSBcIkZJRUxEX1ZBTFVFX0VNUFRZXCI7XG5cdFx0XHR9XG5cblxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnb3JnRmllbGRSb2xlJzpcblx0XHRcdHZhclxuXHRcdFx0XHRvcmdGaWVsZCA9IGJvZHkub3JnRmllbGQsXG5cdFx0XHRcdG9yZ0ZpZWxkVmFsdWUgPSBib2R5Lm9yZ0ZpZWxkVmFsdWUsXG5cdFx0XHRcdGFwcHJvdmVyUm9sZUlkcyA9IGJvZHkuYXBwcm92ZXJSb2xlSWRzO1xuXG5cdFx0XHRpZiAob3JnRmllbGRWYWx1ZSkge1xuXHRcdFx0XHRpZiAob3JnRmllbGQuaXNfbXVsdGlzZWxlY3QpIHsgLy/lpoLmnpzlpJrpgInvvIzku6VvcmdGaWVsZFZhbHVl5YC85Li6QXJyYXlcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5T3Jnc0FuZFJvbGVzKHNwYWNlSWQsIG9yZ0ZpZWxkVmFsdWUsIGFwcHJvdmVyUm9sZUlkcyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyhzcGFjZUlkLCBbb3JnRmllbGRWYWx1ZV0sIGFwcHJvdmVyUm9sZUlkcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIW5leHRTdGVwVXNlcnMgfHwgbmV4dFN0ZXBVc2Vycy5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdFx0ZXJyb3IgPSBcIlJPTEVfTk9fTUVNQkVSU1wiO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlcnJvciA9IFwiRklFTERfVkFMVUVfRU1QVFlcIjtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVhaztcblx0fVxuXG5cdHZhciByZXN1bHQgPSBbXTtcblxuXHRuZXh0U3RlcFVzZXJzLmZvckVhY2goZnVuY3Rpb24oc3UpIHtcblx0XHRpZihzdS51c2VyX2FjY2VwdGVkKXtcblx0XHRcdHZhciBvID0ge1xuXHRcdFx0XHRpZDogc3UuaWQsXG5cdFx0XHRcdG5hbWU6IHN1Lm5hbWVcblx0XHRcdH07XG5cdFx0XHRyZXN1bHQucHVzaChvKTtcblx0XHR9XG5cdH0pO1xuXG5cdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcblx0XHRjb2RlOiAyMDAsXG5cdFx0ZGF0YToge1xuXHRcdFx0J25leHRTdGVwVXNlcnMnOiBXb3JrZmxvd01hbmFnZXIudW5pcVVzZXJzKHJlc3VsdCksXG5cdFx0XHQnZXJyb3InOiBlcnJvclxuXHRcdH1cblx0fSk7XG59KSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvZ2V0U3BhY2VVc2Vyc1wiLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyXG4gICAgdXNlcklkcyA9IHJlcS5ib2R5LnVzZXJJZHMsXG4gICAgc3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxuICAgIHNwYWNlVXNlcnMgPSBbXVxuICA7XG5cbiAgaWYgKCF1c2VySWRzIHx8ICFzcGFjZUlkKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNwYWNlVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgdXNlcklkcyk7XG5cbiAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgIGNvZGU6IDIwMCxcbiAgICBkYXRhOiB7XG4gICAgICAnc3BhY2VVc2Vycyc6IHNwYWNlVXNlcnNcbiAgICB9XG4gIH0pO1xufSlcblxuXG4gIFxuICAiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldEZvcm11bGFVc2VyT2JqZWN0c1wiLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyXG4gICAgdXNlcklkcyA9IHJlcS5ib2R5LnVzZXJJZHMsXG4gICAgc3BhY2VJZCA9IHJlcS5xdWVyeS5zcGFjZUlkLFxuICAgIHNwYWNlVXNlcnMgPSBbXVxuICA7XG5cbiAgaWYgKCF1c2VySWRzIHx8ICFzcGFjZUlkKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciB1c2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdChzcGFjZUlkLCB1c2VySWRzKTtcblxuICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgY29kZTogMjAwLFxuICAgIGRhdGE6IHtcbiAgICAgICdzcGFjZVVzZXJzJzogdXNlcnNcbiAgICB9XG4gIH0pO1xufSlcblxuXG4gIFxuICAiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2luaXRfZm9ybXVsYV92YWx1ZXNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcblx0dmFyXG5cdFx0ZmllbGRzID0gcmVxLmJvZHkuZmllbGRzLFxuXHRcdGF1dG9Gb3JtRG9jID0gcmVxLmJvZHkuYXV0b0Zvcm1Eb2MsXG5cdFx0YXBwcm92ZXIgPSByZXEuYm9keS5hcHByb3Zlcixcblx0XHRhcHBsaWNhbnQgPSByZXEuYm9keS5hcHBsaWNhbnQsXG5cblx0XHRzcGFjZUlkID0gcmVxLnF1ZXJ5LnNwYWNlSWQsXG5cblx0XHRzcGFjZVVzZXJzID0gW107XG5cblx0aWYgKCFmaWVsZHMgfHwgIXNwYWNlSWQgfHwgIWF1dG9Gb3JtRG9jIHx8ICFhcHByb3ZlciB8fCAhYXBwbGljYW50KSB7XG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuXHRcdFx0Y29kZTogMjAwLFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRmb3JtdWxhX3ZhbHVlcyA9IEZvcm1fZm9ybXVsYS5pbml0X2Zvcm11bGFfdmFsdWVzKGZpZWxkcywgYXV0b0Zvcm1Eb2MsIGFwcHJvdmVyLCBhcHBsaWNhbnQsIHNwYWNlSWQpO1xuXG5cdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcblx0XHRjb2RlOiAyMDAsXG5cdFx0ZGF0YToge1xuXHRcdFx0J2Zvcm11bGFfdmFsdWVzJzogZm9ybXVsYV92YWx1ZXNcblx0XHR9XG5cdH0pO1xufSlcbiIsIkpzb25Sb3V0ZXMuYWRkIFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvZ2V0TmFtZUZvclVzZXJcIiwgIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cdFx0dXNlcklkID0gcmVxLmJvZHkudXNlcklkXG5cblx0XHRpZiBub3QgdXNlcklkIFxuXHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywgXG5cdFx0XHRcdGNvZGU6IDIwMCxcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdCdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xuXHRcdFx0XHR9XG5cblx0XHR1c2VyID0gV29ya2Zsb3dNYW5hZ2VyLmdldE5hbWVGb3JVc2VyKHVzZXJJZClcblxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIFxuXHRcdFx0Y29kZTogMjAwLFxuXHRcdFx0ZGF0YToge3VzZXI6IHVzZXJ9XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cblx0XG5cdFx0XG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2dldE5hbWVGb3JVc2VyXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBlLCB1c2VyLCB1c2VySWQ7XG4gIHRyeSB7XG4gICAgdXNlcklkID0gcmVxLmJvZHkudXNlcklkO1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXNlciA9IFdvcmtmbG93TWFuYWdlci5nZXROYW1lRm9yVXNlcih1c2VySWQpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVzZXI6IHVzZXJcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL2FwaS9kZXNpZ25lci9zdGFydHVwJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXG5cblx0XHRjb21wYW55SWQgPSByZXEucXVlcnk/LmNvbXBhbnlJZCB8fCAnJ1xuXG5cdFx0c3BhY2VzUXVlcnkgPSB7IGFkbWluczogY3VycmVudF91c2VyIH1cblxuXHRcdGlmIGNvbXBhbnlJZFxuXHRcdFx0b3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGNvbXBhbnlJZCwgeyBmaWVsZHM6IHsgc3BhY2U6MSB9IH0pXG5cdFx0XHRpZiBub3Qgb3JnXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NvbXBhbnlJZCBpcyBpbnZhbGlkJylcblxuXHRcdFx0c3BhY2VzUXVlcnkgPSB7IF9pZDogb3JnLnNwYWNlIH1cblxuXHRcdHNwYWNlcyA9IGRiLnNwYWNlcy5maW5kKHNwYWNlc1F1ZXJ5KS5mZXRjaCgpXG5cblx0XHRzcGFjZUlkcyA9IF8ucGx1Y2sgc3BhY2VzLCAnX2lkJ1xuXG5cdFx0cXVlcnkgPSB7IHNwYWNlOiB7ICRpbjogc3BhY2VJZHMgfSB9XG5cdFx0aWYgY29tcGFueUlkXG5cdFx0XHRxdWVyeS5jb21wYW55X2lkID0gY29tcGFueUlkXG5cblx0XHRzcGFjZVVzZXJzID0gZGIuc3BhY2VfdXNlcnMuZmluZChxdWVyeSkuZmV0Y2goKVxuXG5cdFx0Zm9ybXMgPSBkYi5mb3Jtcy5maW5kKHF1ZXJ5LCB7IGZpZWxkczogeyBuYW1lOjEsIHN0YXRlOjEsIGlzX2RlbGV0ZWQ6MSwgaXNfdmFsaWQ6MSwgc3BhY2U6MSwgZGVzY3JpcHRpb246MSwgaGVscF90ZXh0OjEsXG5cdFx0Y3JlYXRlZDoxLCBjcmVhdGVkX2J5OjEsIGN1cnJlbnQ6MSwgY2F0ZWdvcnk6MSwgaW5zdGFuY2Vfc3R5bGU6MSwgY29tcGFueV9pZDoxIH0gfSkuZmV0Y2goKVxuXG5cdFx0Zmxvd3MgPSBkYi5mbG93cy5maW5kKHF1ZXJ5LCB7IGZpZWxkczogeyBuYW1lOjEsIG5hbWVfZm9ybXVsYToxLCBjb2RlX2Zvcm11bGE6MSwgc3BhY2U6MSwgZGVzY3JpcHRpb246MSwgaXNfdmFsaWQ6MSwgZm9ybToxLFxuXHRcdGZsb3d0eXBlOjEsIHN0YXRlOjEsIGlzX2RlbGV0ZWQ6MSwgY3JlYXRlZDoxLCBjcmVhdGVkX2J5OjEsIGhlbHBfdGV4dDoxLCBjdXJyZW50X25vOjEsIGN1cnJlbnQ6MSwgcGVybXM6MSwgZXJyb3JfbWVzc2FnZToxLCBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOjEsIGNvbXBhbnlfaWQ6MSB9IH0pLmZldGNoKClcblxuXHRcdHJvbGVzID0gZGIuZmxvd19yb2xlcy5maW5kKHF1ZXJ5KS5mZXRjaCgpXG5cblx0XHRvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpXG5cblx0XHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpXG5cblx0XHRjYXRlZ29yaWVzID0gZGIuY2F0ZWdvcmllcy5maW5kKHsgc3BhY2U6IHsgJGluOiBzcGFjZUlkcyB9IH0pLmZldGNoKClcblxuXHRcdHVzZXJJZHMgPSBfLnBsdWNrIHNwYWNlVXNlcnMsICd1c2VyJ1xuXHRcdHVzZXJzID0gZGIudXNlcnMuZmluZCh7IF9pZDogeyAkaW46IHVzZXJJZHMgfSB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSkuZmV0Y2goKVxuXG5cdFx0cmVzdWx0ID0ge31cblx0XHRyZXN1bHQuU3BhY2VVc2VycyA9IHNwYWNlVXNlcnNcblx0XHRyZXN1bHQuVXNlcnMgPSB1c2Vyc1xuXHRcdHJlc3VsdC5Gb3JtcyA9IGZvcm1zXG5cdFx0cmVzdWx0LkZsb3dzID0gZmxvd3Ncblx0XHRyZXN1bHQuT3JnYW5pemF0aW9ucyA9IG9yZ2FuaXphdGlvbnNcblx0XHRyZXN1bHQuUG9zaXRpb25zID0gcG9zaXRpb25zXG5cdFx0cmVzdWx0LlJvbGVzID0gcm9sZXNcblx0XHRyZXN1bHQuQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXNcblx0XHRyZXN1bHQuU3BhY2VzID0gc3BhY2VzXG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0XHRjb2RlOiAyMDBcblx0XHRcdFx0ZGF0YTogcmVzdWx0XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cblxuIiwiSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvYXBpL2Rlc2lnbmVyL3N0YXJ0dXAnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY2F0ZWdvcmllcywgY29tcGFueUlkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93cywgZm9ybXMsIG9yZywgb3JnYW5pemF0aW9ucywgcG9zaXRpb25zLCBxdWVyeSwgcmVmLCByZXN1bHQsIHJvbGVzLCBzcGFjZUlkcywgc3BhY2VVc2Vycywgc3BhY2VzLCBzcGFjZXNRdWVyeSwgdXNlcklkcywgdXNlcnM7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgY29tcGFueUlkID0gKChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuY29tcGFueUlkIDogdm9pZCAwKSB8fCAnJztcbiAgICBzcGFjZXNRdWVyeSA9IHtcbiAgICAgIGFkbWluczogY3VycmVudF91c2VyXG4gICAgfTtcbiAgICBpZiAoY29tcGFueUlkKSB7XG4gICAgICBvcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoY29tcGFueUlkLCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHNwYWNlOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFvcmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY29tcGFueUlkIGlzIGludmFsaWQnKTtcbiAgICAgIH1cbiAgICAgIHNwYWNlc1F1ZXJ5ID0ge1xuICAgICAgICBfaWQ6IG9yZy5zcGFjZVxuICAgICAgfTtcbiAgICB9XG4gICAgc3BhY2VzID0gZGIuc3BhY2VzLmZpbmQoc3BhY2VzUXVlcnkpLmZldGNoKCk7XG4gICAgc3BhY2VJZHMgPSBfLnBsdWNrKHNwYWNlcywgJ19pZCcpO1xuICAgIHF1ZXJ5ID0ge1xuICAgICAgc3BhY2U6IHtcbiAgICAgICAgJGluOiBzcGFjZUlkc1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGNvbXBhbnlJZCkge1xuICAgICAgcXVlcnkuY29tcGFueV9pZCA9IGNvbXBhbnlJZDtcbiAgICB9XG4gICAgc3BhY2VVc2VycyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQocXVlcnkpLmZldGNoKCk7XG4gICAgZm9ybXMgPSBkYi5mb3Jtcy5maW5kKHF1ZXJ5LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZTogMSxcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGlzX2RlbGV0ZWQ6IDEsXG4gICAgICAgIGlzX3ZhbGlkOiAxLFxuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgZGVzY3JpcHRpb246IDEsXG4gICAgICAgIGhlbHBfdGV4dDogMSxcbiAgICAgICAgY3JlYXRlZDogMSxcbiAgICAgICAgY3JlYXRlZF9ieTogMSxcbiAgICAgICAgY3VycmVudDogMSxcbiAgICAgICAgY2F0ZWdvcnk6IDEsXG4gICAgICAgIGluc3RhbmNlX3N0eWxlOiAxLFxuICAgICAgICBjb21wYW55X2lkOiAxXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICBmbG93cyA9IGRiLmZsb3dzLmZpbmQocXVlcnksIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBuYW1lOiAxLFxuICAgICAgICBuYW1lX2Zvcm11bGE6IDEsXG4gICAgICAgIGNvZGVfZm9ybXVsYTogMSxcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAxLFxuICAgICAgICBpc192YWxpZDogMSxcbiAgICAgICAgZm9ybTogMSxcbiAgICAgICAgZmxvd3R5cGU6IDEsXG4gICAgICAgIHN0YXRlOiAxLFxuICAgICAgICBpc19kZWxldGVkOiAxLFxuICAgICAgICBjcmVhdGVkOiAxLFxuICAgICAgICBjcmVhdGVkX2J5OiAxLFxuICAgICAgICBoZWxwX3RleHQ6IDEsXG4gICAgICAgIGN1cnJlbnRfbm86IDEsXG4gICAgICAgIGN1cnJlbnQ6IDEsXG4gICAgICAgIHBlcm1zOiAxLFxuICAgICAgICBlcnJvcl9tZXNzYWdlOiAxLFxuICAgICAgICBkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxuICAgICAgICBjb21wYW55X2lkOiAxXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICByb2xlcyA9IGRiLmZsb3dfcm9sZXMuZmluZChxdWVyeSkuZmV0Y2goKTtcbiAgICBvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpO1xuICAgIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQocXVlcnkpLmZldGNoKCk7XG4gICAgY2F0ZWdvcmllcyA9IGRiLmNhdGVnb3JpZXMuZmluZCh7XG4gICAgICBzcGFjZToge1xuICAgICAgICAkaW46IHNwYWNlSWRzXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICB1c2VySWRzID0gXy5wbHVjayhzcGFjZVVzZXJzLCAndXNlcicpO1xuICAgIHVzZXJzID0gZGIudXNlcnMuZmluZCh7XG4gICAgICBfaWQ6IHtcbiAgICAgICAgJGluOiB1c2VySWRzXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU6IDFcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICAgIHJlc3VsdCA9IHt9O1xuICAgIHJlc3VsdC5TcGFjZVVzZXJzID0gc3BhY2VVc2VycztcbiAgICByZXN1bHQuVXNlcnMgPSB1c2VycztcbiAgICByZXN1bHQuRm9ybXMgPSBmb3JtcztcbiAgICByZXN1bHQuRmxvd3MgPSBmbG93cztcbiAgICByZXN1bHQuT3JnYW5pemF0aW9ucyA9IG9yZ2FuaXphdGlvbnM7XG4gICAgcmVzdWx0LlBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICByZXN1bHQuUm9sZXMgPSByb2xlcztcbiAgICByZXN1bHQuQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG4gICAgcmVzdWx0LlNwYWNlcyA9IHNwYWNlcztcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YTogcmVzdWx0XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L2VuZ2luZScsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxuXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxuXG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydBcHByb3ZhbHMnXSwgKGFwcHJvdmVfZnJvbV9jbGllbnQpIC0+XG5cdFx0XHR1dWZsb3dNYW5hZ2VyLndvcmtmbG93X2VuZ2luZShhcHByb3ZlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbywgY3VycmVudF91c2VyKVxuXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YToge31cblx0Y2F0Y2ggZVxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L2VuZ2luZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnQXBwcm92YWxzJ10sIGZ1bmN0aW9uKGFwcHJvdmVfZnJvbV9jbGllbnQpIHtcbiAgICAgIHJldHVybiB1dWZsb3dNYW5hZ2VyLndvcmtmbG93X2VuZ2luZShhcHByb3ZlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbywgY3VycmVudF91c2VyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvZHJhZnRzJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXG5cblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XG5cblx0XHRpbnNlcnRlZF9pbnN0YW5jZXMgPSBuZXcgQXJyYXlcblxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cblx0XHRcdG5ld19pbnNfaWQgPSB1dWZsb3dNYW5hZ2VyLmNyZWF0ZV9pbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8pXG5cblx0XHRcdG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7IF9pZDogbmV3X2luc19pZCB9LCB7IGZpZWxkczogeyBzcGFjZTogMSwgZmxvdzogMSwgZmxvd192ZXJzaW9uOiAxLCBmb3JtOiAxLCBmb3JtX3ZlcnNpb246IDEgfSB9KVxuXG5cdFx0XHRpbnNlcnRlZF9pbnN0YW5jZXMucHVzaChuZXdfaW5zKVxuXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGluc2VydHM6IGluc2VydGVkX2luc3RhbmNlcyB9XG5cdFx0fVxuXHRjYXRjaCBlXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxuXHRcdH1cblxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9kcmFmdHMnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGEsIGluc2VydGVkX2luc3RhbmNlcztcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIG5ld19pbnMsIG5ld19pbnNfaWQ7XG4gICAgICBuZXdfaW5zX2lkID0gdXVmbG93TWFuYWdlci5jcmVhdGVfaW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnQsIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgIG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogbmV3X2luc19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICBmbG93OiAxLFxuICAgICAgICAgIGZsb3dfdmVyc2lvbjogMSxcbiAgICAgICAgICBmb3JtOiAxLFxuICAgICAgICAgIGZvcm1fdmVyc2lvbjogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbnNlcnRlZF9pbnN0YW5jZXMucHVzaChuZXdfaW5zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBpbnNlcnRzOiBpbnNlcnRlZF9pbnN0YW5jZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVtb3ZlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXG5cblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XG5cblx0XHRpbnNlcnRlZF9pbnN0YW5jZXMgPSBuZXcgQXJyYXlcblxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cblx0XHRcdCMg6I635Y+W5LiA5LiqaW5zdGFuY2Vcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSlcblx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2Vcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2Vcblx0XHRcdHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2XkuIvnmoTkuIDkuKp1c2VyXG5cdFx0XHRzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcblxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogaW5zdGFuY2UuZmxvd30pXG5cblx0XHRcdHNwYWNlVXNlck9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuXHRcdFx0XHRfaWQ6IHtcblx0XHRcdFx0XHQkaW46IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uc1xuXHRcdFx0XHR9XG5cdFx0XHR9KS5mZXRjaCgpO1xuXG5cdFx0XHQjIOWIpOaWreS4gOS4queUqOaIt+aYr+WQpuaYr+S4gOS4qmluc3RhbmNl55qE5o+Q5Lqk6ICF5oiW6ICF55Sz6K+35Lq6IOaIllNwYWNlQWRtaW5cblx0XHRcdGlmIChpbnN0YW5jZS5zdWJtaXR0ZXIgaXNudCBjdXJyZW50X3VzZXIpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyBjdXJyZW50X3VzZXIpIGFuZCAhV29ya2Zsb3dNYW5hZ2VyLmNhbkFkbWluKGZsb3csIHNwYWNlX3VzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpXG5cdFx0XHRcdHRocm93IG5ldyAgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaCqOS4jeiDveWIoOmZpOatpOeUs+ivt+WNleOAglwiKVxuXG5cdFx0XHRkZWxldGVfb2JqID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXG5cdFx0XHRkZWxldGVfb2JqLmRlbGV0ZWQgPSBuZXcgRGF0ZVxuXHRcdFx0ZGVsZXRlX29iai5kZWxldGVkX2J5ID0gY3VycmVudF91c2VyXG5cblx0XHRcdGRiLmRlbGV0ZWRfaW5zdGFuY2VzLmluc2VydChkZWxldGVfb2JqKVxuXG5cdFx0XHQjIOWIoOmZpGluc3RhbmNlXG5cdFx0XHRkYi5pbnN0YW5jZXMucmVtb3ZlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKVxuXG5cdFx0XHRpZiBkZWxldGVfb2JqLnN0YXRlIGlzbnQgXCJkcmFmdFwiXG5cdFx0XHRcdCPlj5HpgIHnu5nlvoXlpITnkIbkurosICPlj5HpgIHnu5nooqvkvKDpmIXkurpcblx0XHRcdFx0aW5ib3hfdXNlcnMgPSBpZiBkZWxldGVfb2JqLmluYm94X3VzZXJzIHRoZW4gZGVsZXRlX29iai5pbmJveF91c2VycyBlbHNlIFtdXG5cdFx0XHRcdGNjX3VzZXJzID0gaWYgZGVsZXRlX29iai5jY191c2VycyB0aGVuIGRlbGV0ZV9vYmouY2NfdXNlcnMgZWxzZSBbXVxuXHRcdFx0XHR1c2VyX2lkcyA9IF8udW5pcShpbmJveF91c2Vycy5jb25jYXQoY2NfdXNlcnMpKVxuXHRcdFx0XHRfLmVhY2ggdXNlcl9pZHMsICh1X2lkKS0+XG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwidGVybWluYXRlX2FwcHJvdmFsXCIsIHVfaWQpXG5cblx0XHRcdFx0IyDlj5HpgIHliKDpmaTpgJrnn6Xpgq7ku7bnu5npgJrov4fmoKHpqoznmoTnlLPor7fkurov5aGr5Y2V5Lq677yM5a+555Sz6K+35Lq6L+Whq+WNleS6uuWQhOeUn+aIkOS4gOadoXNtdHAgbWVzc2FnZVxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcIm1vbml0b3JfZGVsZXRlX2FwcGxpY2FudFwiLCBkZWxldGVfb2JqLCBcIlwiLCBjdXJyZW50X3VzZXJfaW5mbylcblxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgaW5zZXJ0czogaW5zZXJ0ZWRfaW5zdGFuY2VzfVxuXHRjYXRjaCBlXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cblx0XG5cdFx0IiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZW1vdmUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGEsIGluc2VydGVkX2luc3RhbmNlcztcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIGluc2VydGVkX2luc3RhbmNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIGNjX3VzZXJzLCBkZWxldGVfb2JqLCBmbG93LCBpbmJveF91c2VycywgaW5zdGFuY2UsIHNwYWNlLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zLCBzcGFjZV9pZCwgc3BhY2VfdXNlciwgdXNlcl9pZHM7XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pO1xuICAgICAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgICAgIHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgICBzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2UuZmxvd1xuICAgICAgfSk7XG4gICAgICBzcGFjZVVzZXJPcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBzcGFjZV91c2VyLm9yZ2FuaXphdGlvbnNcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIGlmICgoaW5zdGFuY2Uuc3VibWl0dGVyICE9PSBjdXJyZW50X3VzZXIpICYmICghc3BhY2UuYWRtaW5zLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpICYmICFXb3JrZmxvd01hbmFnZXIuY2FuQWRtaW4oZmxvdywgc3BhY2VfdXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucykpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmgqjkuI3og73liKDpmaTmraTnlLPor7fljZXjgIJcIik7XG4gICAgICB9XG4gICAgICBkZWxldGVfb2JqID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pO1xuICAgICAgZGVsZXRlX29iai5kZWxldGVkID0gbmV3IERhdGU7XG4gICAgICBkZWxldGVfb2JqLmRlbGV0ZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICBkYi5kZWxldGVkX2luc3RhbmNlcy5pbnNlcnQoZGVsZXRlX29iaik7XG4gICAgICBkYi5pbnN0YW5jZXMucmVtb3ZlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKTtcbiAgICAgIGlmIChkZWxldGVfb2JqLnN0YXRlICE9PSBcImRyYWZ0XCIpIHtcbiAgICAgICAgaW5ib3hfdXNlcnMgPSBkZWxldGVfb2JqLmluYm94X3VzZXJzID8gZGVsZXRlX29iai5pbmJveF91c2VycyA6IFtdO1xuICAgICAgICBjY191c2VycyA9IGRlbGV0ZV9vYmouY2NfdXNlcnMgPyBkZWxldGVfb2JqLmNjX3VzZXJzIDogW107XG4gICAgICAgIHVzZXJfaWRzID0gXy51bmlxKGluYm94X3VzZXJzLmNvbmNhdChjY191c2VycykpO1xuICAgICAgICBfLmVhY2godXNlcl9pZHMsIGZ1bmN0aW9uKHVfaWQpIHtcbiAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwidGVybWluYXRlX2FwcHJvdmFsXCIsIHVfaWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwibW9uaXRvcl9kZWxldGVfYXBwbGljYW50XCIsIGRlbGV0ZV9vYmosIFwiXCIsIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBpbnNlcnRzOiBpbnNlcnRlZF9pbnN0YW5jZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvc3VibWl0JywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXG5cblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XG5cdFx0cmVzdWx0ID0gW11cblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XG5cdFx0XHRyID0gdXVmbG93TWFuYWdlci5zdWJtaXRfaW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnQsIGN1cnJlbnRfdXNlcl9pbmZvKVxuXHRcdFx0aWYgci5hbGVydHNcblx0XHRcdFx0cmVzdWx0LnB1c2gocilcblx0XHRcdGlmIG5vdCBfLmlzRW1wdHkoaW5zdGFuY2VfZnJvbV9jbGllbnRbJ2luYm94X3VzZXJzJ10pXG5cdFx0XHRcdCMg5aaC5p6c5piv6L2s5Y+R5bCx6ZyA6KaB57uZ5b2T5YmN55So5oi35Y+R6YCBcHVzaCDph43mlrDorqHnrpdiYWRnZVxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyKTtcblxuXHRcdFx0aWYgXy5pc0VtcHR5KHIuYWxlcnRzKVxuXHRcdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50Ll9pZClcblx0XHRcdFx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3dcblx0XHRcdFx0Y3VycmVudF9hcHByb3ZlID0gaW5zdGFuY2VfZnJvbV9jbGllbnQudHJhY2VzWzBdLmFwcHJvdmVzWzBdXG5cdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxuXHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhmbG93X2lkLCBpbnN0YW5jZSwgY3VycmVudF9hcHByb3ZlLCAnZHJhZnRfc3VibWl0JywgY3VycmVudF91c2VyLCBpbnN0YW5jZS5pbmJveF91c2VycylcblxuXHRcdFx0IyDliKTmlq3nlLPor7fljZXmmK/lkKbliIblj5HvvIzliIblj5Hmlofku7bnu5PmnZ/mj5DphpLlj5Hotbfkurpcblx0XHRcdHV1Zmxvd01hbmFnZXIuZGlzdHJpYnV0ZWRJbnN0YW5jZXNSZW1pbmQoaW5zdGFuY2VfZnJvbV9jbGllbnQpXG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0XHRjb2RlOiAyMDBcblx0XHRcdFx0ZGF0YTogeyByZXN1bHQ6IHJlc3VsdCB9XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvc3VibWl0JywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhLCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICByZXN1bHQgPSBbXTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIGN1cnJlbnRfYXBwcm92ZSwgZmxvd19pZCwgaW5zdGFuY2UsIHI7XG4gICAgICByID0gdXVmbG93TWFuYWdlci5zdWJtaXRfaW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnQsIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgIGlmIChyLmFsZXJ0cykge1xuICAgICAgICByZXN1bHQucHVzaChyKTtcbiAgICAgIH1cbiAgICAgIGlmICghXy5pc0VtcHR5KGluc3RhbmNlX2Zyb21fY2xpZW50WydpbmJveF91c2VycyddKSkge1xuICAgICAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyKTtcbiAgICAgIH1cbiAgICAgIGlmIChfLmlzRW1wdHkoci5hbGVydHMpKSB7XG4gICAgICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfZnJvbV9jbGllbnQuX2lkKTtcbiAgICAgICAgZmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG4gICAgICAgIGN1cnJlbnRfYXBwcm92ZSA9IGluc3RhbmNlX2Zyb21fY2xpZW50LnRyYWNlc1swXS5hcHByb3Zlc1swXTtcbiAgICAgICAgcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soZmxvd19pZCwgaW5zdGFuY2UsIGN1cnJlbnRfYXBwcm92ZSwgJ2RyYWZ0X3N1Ym1pdCcsIGN1cnJlbnRfdXNlciwgaW5zdGFuY2UuaW5ib3hfdXNlcnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHV1Zmxvd01hbmFnZXIuZGlzdHJpYnV0ZWRJbnN0YW5jZXNSZW1pbmQoaW5zdGFuY2VfZnJvbV9jbGllbnQpO1xuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHJlc3VsdDogcmVzdWx0XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L3Rlcm1pbmF0ZScsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxuXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cblx0XHRcdHRlcm1pbmF0ZV9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRlcm1pbmF0ZV9yZWFzb25cIl1cblx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl1cblx0XHRcdCMg6I635Y+W5LiA5LiqaW5zdGFuY2Vcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcblx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2Vcblx0XHRcdGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93XG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNlXG5cdFx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXG5cdFx0XHQjIOiOt+WPluS4gOS4qmZsb3dcblx0XHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coZmxvd19pZClcblx0XHRcdCMg5Yik5pat5LiA5LiqaW5zdGFuY2XmmK/lkKbkuLrlrqHmoLjkuK3nirbmgIFcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVBlbmRpbmcoaW5zdGFuY2UpXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNl5LiL55qE5LiA5LiqdXNlclxuXHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXG5cdFx0XHQjIOiOt+WPlnNwYWNlX3VzZXLmiYDlnKjnmoTpg6jpl6jkv6Hmga9cblx0XHRcdHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcblx0XHRcdCMg6I635Y+W57uT5p2f6IqC54K5XG5cdFx0XHRpbnN0YW5jZV9mbG93X3ZlciA9IG51bGxcblx0XHRcdGZsb3dfdmVyX2VuZF9zdGVwID0gbnVsbFxuXHRcdFx0Zmxvd192ZXJzID0gbmV3IEFycmF5XG5cdFx0XHRmbG93X3ZlcnMucHVzaChmbG93LmN1cnJlbnQpXG5cdFx0XHRmbG93X3ZlcnMgPSBmbG93X3ZlcnMuY29uY2F0KGZsb3cuaGlzdG9yeXMpXG5cdFx0XHRpbnN0YW5jZV9mbG93X3ZlciA9IF8uZmluZChmbG93X3ZlcnMsIChmX3ZlciktPlxuXHRcdFx0XHRyZXR1cm4gZl92ZXIuX2lkIGlzIGluc3RhbmNlLmZsb3dfdmVyc2lvblxuXHRcdFx0KVxuXHRcdFx0aWYgbm90IGluc3RhbmNlX2Zsb3dfdmVyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5om+5Yiw55Sz6K+35Y2V5a+55bqU5rWB56iL54mI5pysXCIpXG5cdFx0XHRmbG93X3Zlcl9lbmRfc3RlcCA9IF8uZmluZChpbnN0YW5jZV9mbG93X3Zlci5zdGVwcywgKGZfc3RlcCktPlxuXHRcdFx0XHRyZXR1cm4gZl9zdGVwLnN0ZXBfdHlwZSBpcyBcImVuZFwiXG5cdFx0XHQpXG5cdFx0XHQjIOiwg+eUqGdldEZsb3dQZXJtaXNzaW9uc+aWueazle+8jOeci+i/lOWbnueahOe7k+aenOS4reaYr+WQpuaciWFkbWluXG5cdFx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhmbG93X2lkLCBjdXJyZW50X3VzZXIpXG5cdFx0XHRub3cgPSBuZXcgRGF0ZVxuXHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxuXHRcdFx0IyBzcGFjZeeahGFkbWluLCDloavljZXkurog55Sz6K+35Lq6IOacieadg+mZkCDlj5bmtojnlLPor7dcblx0XHRcdGlmIHBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikgb3Igc3BhY2UuYWRtaW5zLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikgb3IgaW5zdGFuY2Uuc3VibWl0dGVyIGlzIGN1cnJlbnRfdXNlciBvciBpbnN0YW5jZS5hcHBsaWNhbnQgaXMgY3VycmVudF91c2VyXG5cdFx0XHRcdGlmIG5vdCB0ZXJtaW5hdGVfcmVhc29uXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJyxcIui/mOacquWhq+WGmeW8uuWItue7k+adn+eUs+ivt+WNleeahOeQhueUse+8jOaTjeS9nOWksei0pVwiKVxuXG5cdFx0XHRcdGluc3RhbmNlX3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgKHRyYWNlKS0+XG5cdFx0XHRcdFx0cmV0dXJuIHRyYWNlLmlzX2ZpbmlzaGVkIGlzIGZhbHNlXG5cdFx0XHRcdClcblxuXHRcdFx0XHR0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXNcblx0XHRcdFx0aSA9IDBcblx0XHRcdFx0d2hpbGUgaSA8IHRyYWNlcy5sZW5ndGhcblx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uaXNfZmluaXNoZWQgaXMgZmFsc2Vcblx0XHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2XorrDlvZVcblx0XHRcdFx0XHRcdHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWVcblx0XHRcdFx0XHRcdHRyYWNlc1tpXS5maW5pc2hfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdFx0aCA9IDBcblx0XHRcdFx0XHRcdHdoaWxlIGggPCB0cmFjZXNbaV0uYXBwcm92ZXMubGVuZ3RoXG5cdFx0XHRcdFx0XHRcdGlmIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCBpcyBmYWxzZVxuXHRcdFx0XHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2UuYXBwcm92ZeiusOW9lVxuXHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9IHRydWVcblx0XHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uZmluaXNoX2RhdGUgPSBub3dcblx0XHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uanVkZ2UgPSBudWxsXG5cdFx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmRlc2NyaXB0aW9uID0gbnVsbFxuXHRcdFx0XHRcdFx0XHRoKytcblx0XHRcdFx0XHRcdCMg5o+S5YWl5b2T5YmNVHJhY2UgdHJhY2UuYXBwcm92ZeiusOW9le+8muW9k3RyYWNlLnR5cGXkuLrlj5blm57jgIHlvLrliLbnu5PmnZ/ml7bvvIxpc19yZWFkPXRydWXkuJRyZWFkX2RhdGXkuLrlvZPliY3ml7bpl7TjgIJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IGluc3RhbmNlX3RyYWNlLl9pZFxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IHRydWVcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUudXNlciA9IGN1cnJlbnRfdXNlclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXIgPSBjdXJyZW50X3VzZXJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl1cblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXVxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl1cblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5maW5pc2hfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5kdWVfZGF0ZSA9IGluc3RhbmNlX3RyYWNlLmR1ZV9kYXRlXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLnJlYWRfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5qdWRnZSA9IFwidGVybWluYXRlZFwiXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX3JlYWQgPSB0cnVlXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmRlc2NyaXB0aW9uID0gdGVybWluYXRlX3JlYXNvblxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Rcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuY29zdF90aW1lID0gbmV3QXBwcm92ZS5maW5pc2hfZGF0ZSAtIG5ld0FwcHJvdmUuc3RhcnRfZGF0ZVxuXHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSlcblx0XHRcdFx0XHRpKytcblxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXG5cdFx0XHRcdG5ld1RyYWNlID0gbmV3IE9iamVjdFxuXHRcdFx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcblx0XHRcdFx0bmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2luc3RhbmNlX3RyYWNlLl9pZF1cblx0XHRcdFx0IyB0eXBlLS0t5YGc55SoXG5cdFx0XHRcdCMgbmV3VHJhY2UudHlwZSA9IFwidGVybWluYXRlZFwiXG5cdFx0XHRcdG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gdHJ1ZVxuXHRcdFx0XHRuZXdUcmFjZS5zdGVwID0gZmxvd192ZXJfZW5kX3N0ZXAuX2lkXG5cdFx0XHRcdG5ld1RyYWNlLm5hbWUgPSBmbG93X3Zlcl9lbmRfc3RlcC5uYW1lXG5cdFx0XHRcdG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3dcblx0XHRcdFx0bmV3VHJhY2UuZmluaXNoX2RhdGUgPSBub3dcblx0XHRcdFx0bmV3VHJhY2UuanVkZ2UgPSBcInRlcm1pbmF0ZWRcIlxuXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwiY29tcGxldGVkXCJcblx0XHRcdFx0c2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCJcblx0XHRcdFx0b2xkX2luYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnNcblx0XHRcdFx0b2xkX2NjX3VzZXJzID0gaW5zdGFuY2UuY2NfdXNlcnMgfHwgW11cblx0XHRcdFx0b2xkX291dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2Vyc1xuXHRcdFx0XHR0ZW1wVXNlcnMgPSBuZXcgQXJyYXlcblx0XHRcdFx0Xy5lYWNoKGluc3RhbmNlX3RyYWNlLmFwcHJvdmVzLCAobmZ0X2FwcHJvdmUpLT5cblx0XHRcdFx0XHR0ZW1wVXNlcnMucHVzaChuZnRfYXBwcm92ZS51c2VyKVxuXHRcdFx0XHRcdHRlbXBVc2Vycy5wdXNoKG5mdF9hcHByb3ZlLmhhbmRsZXIpXG5cdFx0XHRcdClcblx0XHRcdFx0c2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KHRlbXBVc2VycykpXG5cdFx0XHRcdHNldE9iai5pbmJveF91c2VycyA9IG5ldyBBcnJheVxuXHRcdFx0XHRzZXRPYmouY2NfdXNlcnMgPSBuZXcgQXJyYXlcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XG5cdFx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxuXHRcdFx0XHR0cmFjZXMucHVzaChuZXdUcmFjZSlcblx0XHRcdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlc1xuXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IGZsb3dfdmVyX2VuZF9zdGVwLm5hbWVcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlXG5cblx0XHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHNldDogc2V0T2JqfSlcblx0XHRcdFx0aWYgclxuXHRcdFx0XHRcdGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXG5cdFx0XHRcdFx0I+mAmuefpeWhq+WNleS6uuOAgeeUs+ivt+S6ulxuXHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwic3VibWl0X3Rlcm1pbmF0ZV9hcHBsaWNhbnRcIiwgaW5zLCB0ZXJtaW5hdGVfcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbylcblxuXHRcdFx0XHRcdCPlj5HpgIHnu5nlvoXlpITnkIbkurog6KKr5Lyg6ZiF5Lq6XG5cdFx0XHRcdFx0aWYgb2xkX2luYm94X3VzZXJzXG5cdFx0XHRcdFx0XHRfLmVhY2goXy51bmlxKG9sZF9pbmJveF91c2Vycy5jb25jYXQob2xkX2NjX3VzZXJzKSksICh1c2VyX2lkKS0+XG5cdFx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1c2VyX2lkKVxuXHRcdFx0XHRcdFx0KVxuXG5cdFx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICd0ZXJtaW5hdGUnLCBjdXJyZW50X3VzZXIsIFtdKVxuXG5cdFx0I+WPkemAgea2iOaBr+e7meW9k+WJjeeUqOaIt1xuXHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdFx0Y29kZTogMjAwXG5cdFx0XHRcdGRhdGE6IHt9XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvdGVybWluYXRlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBmbG93LCBmbG93X2lkLCBmbG93X3Zlcl9lbmRfc3RlcCwgZmxvd192ZXJzLCBoLCBpLCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9mbG93X3ZlciwgaW5zdGFuY2VfaWQsIGluc3RhbmNlX3RyYWNlLCBuZXdBcHByb3ZlLCBuZXdUcmFjZSwgbm93LCBvbGRfY2NfdXNlcnMsIG9sZF9pbmJveF91c2Vycywgb2xkX291dGJveF91c2VycywgcGVybWlzc2lvbnMsIHIsIHNldE9iaiwgc3BhY2UsIHNwYWNlX2lkLCBzcGFjZV91c2VyLCBzcGFjZV91c2VyX29yZ19pbmZvLCB0ZW1wVXNlcnMsIHRlcm1pbmF0ZV9yZWFzb24sIHRyYWNlcztcbiAgICAgIHRlcm1pbmF0ZV9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRlcm1pbmF0ZV9yZWFzb25cIl07XG4gICAgICBpbnN0YW5jZV9pZCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICBmbG93X2lkID0gaW5zdGFuY2UuZmxvdztcbiAgICAgIHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGZsb3dfaWQpO1xuICAgICAgdXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSk7XG4gICAgICBzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICBzcGFjZV91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKHNwYWNlX3VzZXIpO1xuICAgICAgaW5zdGFuY2VfZmxvd192ZXIgPSBudWxsO1xuICAgICAgZmxvd192ZXJfZW5kX3N0ZXAgPSBudWxsO1xuICAgICAgZmxvd192ZXJzID0gbmV3IEFycmF5O1xuICAgICAgZmxvd192ZXJzLnB1c2goZmxvdy5jdXJyZW50KTtcbiAgICAgIGZsb3dfdmVycyA9IGZsb3dfdmVycy5jb25jYXQoZmxvdy5oaXN0b3J5cyk7XG4gICAgICBpbnN0YW5jZV9mbG93X3ZlciA9IF8uZmluZChmbG93X3ZlcnMsIGZ1bmN0aW9uKGZfdmVyKSB7XG4gICAgICAgIHJldHVybiBmX3Zlci5faWQgPT09IGluc3RhbmNlLmZsb3dfdmVyc2lvbjtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFpbnN0YW5jZV9mbG93X3Zlcikge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNleWvueW6lOa1geeoi+eJiOacrFwiKTtcbiAgICAgIH1cbiAgICAgIGZsb3dfdmVyX2VuZF9zdGVwID0gXy5maW5kKGluc3RhbmNlX2Zsb3dfdmVyLnN0ZXBzLCBmdW5jdGlvbihmX3N0ZXApIHtcbiAgICAgICAgcmV0dXJuIGZfc3RlcC5zdGVwX3R5cGUgPT09IFwiZW5kXCI7XG4gICAgICB9KTtcbiAgICAgIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBpZiAocGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSB8fCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSB8fCBpbnN0YW5jZS5zdWJtaXR0ZXIgPT09IGN1cnJlbnRfdXNlciB8fCBpbnN0YW5jZS5hcHBsaWNhbnQgPT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICBpZiAoIXRlcm1pbmF0ZV9yZWFzb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIui/mOacquWhq+WGmeW8uuWItue7k+adn+eUs+ivt+WNleeahOeQhueUse+8jOaTjeS9nOWksei0pVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZV90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWNlLmlzX2ZpbmlzaGVkID09PSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdHJhY2VzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0cmFjZXNbaV0uaXNfZmluaXNoZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFjZXNbaV0uaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdHJhY2VzW2ldLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgaCA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaCA8IHRyYWNlc1tpXS5hcHByb3Zlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uanVkZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5kZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3QXBwcm92ZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnRyYWNlID0gaW5zdGFuY2VfdHJhY2UuX2lkO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnVzZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBpbnN0YW5jZV90cmFjZS5kdWVfZGF0ZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5pc19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuZGVzY3JpcHRpb24gPSB0ZXJtaW5hdGVfcmVhc29uO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5jb3N0X3RpbWUgPSBuZXdBcHByb3ZlLmZpbmlzaF9kYXRlIC0gbmV3QXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBuZXdUcmFjZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgIG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgIG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtpbnN0YW5jZV90cmFjZS5faWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIG5ld1RyYWNlLnN0ZXAgPSBmbG93X3Zlcl9lbmRfc3RlcC5faWQ7XG4gICAgICAgIG5ld1RyYWNlLm5hbWUgPSBmbG93X3Zlcl9lbmRfc3RlcC5uYW1lO1xuICAgICAgICBuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICBuZXdUcmFjZS5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3VHJhY2UuanVkZ2UgPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgc2V0T2JqLnN0YXRlID0gXCJjb21wbGV0ZWRcIjtcbiAgICAgICAgc2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgIG9sZF9pbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzO1xuICAgICAgICBvbGRfY2NfdXNlcnMgPSBpbnN0YW5jZS5jY191c2VycyB8fCBbXTtcbiAgICAgICAgb2xkX291dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2VycztcbiAgICAgICAgdGVtcFVzZXJzID0gbmV3IEFycmF5O1xuICAgICAgICBfLmVhY2goaW5zdGFuY2VfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKG5mdF9hcHByb3ZlKSB7XG4gICAgICAgICAgdGVtcFVzZXJzLnB1c2gobmZ0X2FwcHJvdmUudXNlcik7XG4gICAgICAgICAgcmV0dXJuIHRlbXBVc2Vycy5wdXNoKG5mdF9hcHByb3ZlLmhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KHRlbXBVc2VycykpO1xuICAgICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIHNldE9iai5jY191c2VycyA9IG5ldyBBcnJheTtcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbm93O1xuICAgICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIHRyYWNlcy5wdXNoKG5ld1RyYWNlKTtcbiAgICAgICAgc2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gZmxvd192ZXJfZW5kX3N0ZXAubmFtZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlO1xuICAgICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwic3VibWl0X3Rlcm1pbmF0ZV9hcHBsaWNhbnRcIiwgaW5zLCB0ZXJtaW5hdGVfcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgICAgaWYgKG9sZF9pbmJveF91c2Vycykge1xuICAgICAgICAgICAgXy5lYWNoKF8udW5pcShvbGRfaW5ib3hfdXNlcnMuY29uY2F0KG9sZF9jY191c2VycykpLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJ0ZXJtaW5hdGVfYXBwcm92YWxcIiwgdXNlcl9pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAndGVybWluYXRlJywgY3VycmVudF91c2VyLCBbXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVhc3NpZ24nLCAocmVxLCByZXMsIG5leHQpIC0+XG5cdHRyeVxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcblxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XG5cdFx0XHRpbnN0YW5jZV9pZCA9IGluc3RhbmNlX2Zyb21fY2xpZW50WydfaWQnXVxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxuXHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxuXHRcdFx0IyDpqozor4FpbnN0YW5jZeS4uuWuoeaguOS4reeKtuaAgVxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSlcblx0XHRcdCMg6aqM6K+B5b2T5YmN5omn6KGM6L2s562+5qC455qEdHJhY2XmnKrnu5PmnZ9cblx0XHRcdGxhc3RfdHJhY2VfZnJvbV9jbGllbnQgPSBfLmxhc3QoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJ0cmFjZXNcIl0pXG5cdFx0XHRsYXN0X3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgKHQpIC0+XG5cdFx0XHRcdHJldHVybiB0Ll9pZCBpcyBsYXN0X3RyYWNlX2Zyb21fY2xpZW50W1wiX2lkXCJdXG5cdFx0XHQpXG5cdFx0XHRpZiBsYXN0X3RyYWNlLmlzX2ZpbmlzaGVkIGlzIHRydWVcblx0XHRcdFx0cmV0dXJuXG5cblx0XHRcdCMg6aqM6K+BbG9naW4gdXNlcl9pZOWvueivpea1geeoi+acieeuoeeQhueUs+ivt+WNleeahOadg+mZkFxuXHRcdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKVxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZSh7IF9pZDogc3BhY2VfaWQgfSwgeyBmaWVsZHM6IHsgYWRtaW5zOiAxIH0gfSlcblx0XHRcdGlmIChub3QgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgYW5kIChub3Qgc3BhY2UuYWRtaW5zLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55So5oi35rKh5pyJ5a+55b2T5YmN5rWB56iL55qE566h55CG5p2D6ZmQXCIpXG5cblx0XHRcdGluYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnNcblx0XHRcdGluYm94X3VzZXJzX2Zyb21fY2xpZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJpbmJveF91c2Vyc1wiXVxuXHRcdFx0cmVhc3NpZ25fcmVhc29uID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWFzc2lnbl9yZWFzb25cIl1cblx0XHRcdG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQpXG5cdFx0XHRuZXdfaW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UoaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQsIGluYm94X3VzZXJzKVxuXHRcdFx0IyDoi6Vhc3NpZ25lZT3ljp9pbmJveF91c2Vyc++8jOivtOaYjuS4jemcgOimgeaJp+ihjOi9rOetvuaguO+8jOezu+e7n+S7gOS5iOmDveS4jeWBmlxuXHRcdFx0cmV0dXJuIGlmIG5vdF9pbl9pbmJveF91c2Vycy5sZW5ndGggaXMgMCBhbmQgbmV3X2luYm94X3VzZXJzLmxlbmd0aCBpcyAwXG5cdFx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XG5cdFx0XHRub3cgPSBuZXcgRGF0ZVxuXHRcdFx0aSA9IDBcblx0XHRcdGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMgPSBbXVxuXHRcdFx0d2hpbGUgaSA8IGxhc3RfdHJhY2UuYXBwcm92ZXMubGVuZ3RoXG5cdFx0XHRcdGlmIG5vdF9pbl9pbmJveF91c2Vycy5pbmNsdWRlcyhsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmhhbmRsZXIpXG5cdFx0XHRcdFx0aWYgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5pc19maW5pc2hlZCBpcyBmYWxzZSBhbmQgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS50eXBlIGlzbnQgXCJjY1wiIGFuZCBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnR5cGUgaXNudCBcImRpc3RyaWJ1dGVcIlxuXHRcdFx0XHRcdFx0bGFzdF90cmFjZS5hcHByb3Zlc1tpXS5pc19maW5pc2hlZCA9IHRydWVcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZmluaXNoX2RhdGUgPSBub3dcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uanVkZ2UgPSBcInRlcm1pbmF0ZWRcIlxuXHRcdFx0XHRcdFx0bGFzdF90cmFjZS5hcHByb3Zlc1tpXS5kZXNjcmlwdGlvbiA9IFwiXCJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uY29zdF90aW1lID0gbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5maW5pc2hfZGF0ZSAtIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uc3RhcnRfZGF0ZVxuXHRcdFx0XHRcdFx0YXBwcm92ZV91c2Vyc19oYW5kbGVycy5wdXNoKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0udXNlcilcblx0XHRcdFx0XHRcdGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMucHVzaChsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmhhbmRsZXIpXG5cdFx0XHRcdGkrK1xuXHRcdFx0IyDlnKjlkIzkuIB0cmFjZeS4i+aPkuWFpei9rOetvuaguOaTjeS9nOiAheeahGFwcHJvdmXorrDlvZVcblx0XHRcdGN1cnJlbnRfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXG5cdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uIH0sIHsgZmllbGRzOiB7IG5hbWU6IDEsIGZ1bGxuYW1lOiAxIH0gfSlcblx0XHRcdGFzc2lnbmVlX2FwcHIgPSBuZXcgT2JqZWN0XG5cdFx0XHRhc3NpZ25lZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaW5zdGFuY2UgPSBsYXN0X3RyYWNlLmluc3RhbmNlXG5cdFx0XHRhc3NpZ25lZV9hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWRcblx0XHRcdGFzc2lnbmVlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlXG5cdFx0XHRhc3NpZ25lZV9hcHByLnVzZXIgPSBjdXJyZW50X3VzZXJcblx0XHRcdGFzc2lnbmVlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxuXHRcdFx0YXNzaWduZWVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uXG5cdFx0XHRhc3NpZ25lZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWVcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lXG5cdFx0XHRhc3NpZ25lZV9hcHByLnN0YXJ0X2RhdGUgPSBub3dcblx0XHRcdGFzc2lnbmVlX2FwcHIuZmluaXNoX2RhdGUgPSBub3dcblx0XHRcdGFzc2lnbmVlX2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlXG5cdFx0XHRhc3NpZ25lZV9hcHByLnJlYWRfZGF0ZSA9IG5vd1xuXHRcdFx0YXNzaWduZWVfYXBwci5qdWRnZSA9IFwicmVhc3NpZ25lZFwiXG5cdFx0XHRhc3NpZ25lZV9hcHByLmlzX3JlYWQgPSB0cnVlXG5cdFx0XHRhc3NpZ25lZV9hcHByLmRlc2NyaXB0aW9uID0gcmVhc3NpZ25fcmVhc29uXG5cdFx0XHRhc3NpZ25lZV9hcHByLmlzX2Vycm9yID0gZmFsc2Vcblx0XHRcdGFzc2lnbmVlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxuXHRcdFx0YXNzaWduZWVfYXBwci5jb3N0X3RpbWUgPSBhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlIC0gYXNzaWduZWVfYXBwci5zdGFydF9kYXRlXG5cdFx0XHRsYXN0X3RyYWNlLmFwcHJvdmVzLnB1c2goYXNzaWduZWVfYXBwcilcblx0XHRcdCMg5a+55paw5aKe55qE5q+P5L2N5b6F5a6h5qC45Lq677yM5ZCE5aKe5Yqg5LiA5p2h5paw55qEYXBwcm92ZVxuXHRcdFx0Xy5lYWNoKG5ld19pbmJveF91c2VycywgKHVzZXJfaWQpIC0+XG5cdFx0XHRcdG5ld191c2VyID0gZGIudXNlcnMuZmluZE9uZSh1c2VyX2lkLCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcblx0XHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCB1c2VyX2lkKVxuXHRcdFx0XHR1c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShzcGFjZV91c2VyLm9yZ2FuaXphdGlvbiwgeyBmaWVsZHM6IHsgbmFtZTogMSwgZnVsbG5hbWU6IDEgfSB9KVxuXHRcdFx0XHRuZXdfYXBwciA9IG5ldyBPYmplY3Rcblx0XHRcdFx0bmV3X2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxuXHRcdFx0XHRuZXdfYXBwci5pbnN0YW5jZSA9IGxhc3RfdHJhY2UuaW5zdGFuY2Vcblx0XHRcdFx0bmV3X2FwcHIudHJhY2UgPSBsYXN0X3RyYWNlLl9pZFxuXHRcdFx0XHRuZXdfYXBwci5pc19maW5pc2hlZCA9IGZhbHNlXG5cdFx0XHRcdG5ld19hcHByLnVzZXIgPSB1c2VyX2lkXG5cdFx0XHRcdG5ld19hcHByLnVzZXJfbmFtZSA9IG5ld191c2VyLm5hbWVcblxuXHRcdFx0XHRoYW5kbGVyX2lkID0gdXNlcl9pZFxuXHRcdFx0XHRoYW5kbGVyX2luZm8gPSBuZXdfdXNlclxuXHRcdFx0XHRhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIHVzZXJfaWQpXG5cdFx0XHRcdGlmIGFnZW50XG5cdFx0XHRcdFx0aW5ib3hfdXNlcnNfZnJvbV9jbGllbnRbaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQuaW5kZXhPZih1c2VyX2lkKV0gPSBhZ2VudFxuXHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudFxuXHRcdFx0XHRcdGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IGFnZW50IH0sIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxuXHRcdFx0XHRcdG5ld19hcHByLmFnZW50ID0gYWdlbnRcblxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyID0gaGFuZGxlcl9pZFxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZVxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uXG5cdFx0XHRcdG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSB1c2VyX29yZ2FuaXphdGlvbi5uYW1lXG5cdFx0XHRcdG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWVcblx0XHRcdFx0bmV3X2FwcHIuZnJvbV91c2VyID0gY3VycmVudF91c2VyXG5cdFx0XHRcdG5ld19hcHByLmZyb21fdXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxuXHRcdFx0XHRuZXdfYXBwci50eXBlID0gXCJyZWFzc2lnblwiXG5cdFx0XHRcdG5ld19hcHByLnN0YXJ0X2RhdGUgPSBub3dcblx0XHRcdFx0bmV3X2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlXG5cdFx0XHRcdG5ld19hcHByLmlzX3JlYWQgPSBmYWxzZVxuXHRcdFx0XHRuZXdfYXBwci5pc19lcnJvciA9IGZhbHNlXG5cdFx0XHRcdG5ld19hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Rcblx0XHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3X2FwcHIpXG5cdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXMucHVzaChuZXdfYXBwcilcblx0XHRcdClcblxuXHRcdFx0aW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKVxuXHRcdFx0aW5zdGFuY2Uub3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzLmNvbmNhdChhcHByb3ZlX3VzZXJzX2hhbmRsZXJzKVxuXHRcdFx0c2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMpXG5cdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBpbmJveF91c2Vyc19mcm9tX2NsaWVudFxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcblx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzXCJdID0gbGFzdF90cmFjZS5hcHByb3Zlc1xuXHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoeyBfaWQ6IGluc3RhbmNlX2lkLCBcInRyYWNlcy5faWRcIjogbGFzdF90cmFjZS5faWQgfSwgeyAkc2V0OiBzZXRPYmogfSlcblx0XHRcdGlmIHJcblx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcblx0XHRcdFx0IyDnu5nooqvliKDpmaTnmoRpbmJveF91c2VycyDlkowg5b2T5YmN55So5oi3IOWPkemAgXB1c2hcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbylcblx0XHRcdFx0Xy5lYWNoKG5vdF9pbl9pbmJveF91c2VycywgKHVzZXJfaWQpIC0+XG5cdFx0XHRcdFx0aWYgdXNlcl9pZCBpc250IGN1cnJlbnRfdXNlclxuXHRcdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXG5cdFx0XHRcdClcblx0XHRcdFx0IyDmj5Dlj5ZpbnN0YW5jZXMub3V0Ym94X3VzZXJz5pWw57uE5ZKM5aGr5Y2V5Lq644CB55Sz6K+35Lq6XG5cdFx0XHRcdF91c2VycyA9IG5ldyBBcnJheVxuXHRcdFx0XHRfdXNlcnMucHVzaChpbnMuYXBwbGljYW50KVxuXHRcdFx0XHRfdXNlcnMucHVzaChpbnMuc3VibWl0dGVyKVxuXHRcdFx0XHRfdXNlcnMgPSBfLnVuaXEoX3VzZXJzLmNvbmNhdChpbnMub3V0Ym94X3VzZXJzKSlcblx0XHRcdFx0Xy5lYWNoKF91c2VycywgKHVzZXJfaWQpIC0+XG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXG5cdFx0XHRcdClcblxuXHRcdFx0XHQjIOe7meaWsOWKoOWFpeeahGluYm94X3VzZXJz5Y+R6YCBcHVzaCBtZXNzYWdlXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmVhc3NpZ25fbmV3X2luYm94X3VzZXJzXCIsIGlucywgcmVhc3NpZ25fcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbylcblxuXHRcdFx0XHQjIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5Fcblx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZWFzc2lnbicsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKVxuXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7fVxuXHRcdH1cblx0Y2F0Y2ggZVxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5tZXNzYWdlIH1dIH1cblx0XHR9XG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L3JlYXNzaWduJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBfdXNlcnMsIGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMsIGFzc2lnbmVlX2FwcHIsIGN1cnJlbnRfc3BhY2VfdXNlciwgY3VycmVudF91c2VyX29yZ2FuaXphdGlvbiwgaSwgaW5ib3hfdXNlcnMsIGluYm94X3VzZXJzX2Zyb21fY2xpZW50LCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9pZCwgbGFzdF90cmFjZSwgbGFzdF90cmFjZV9mcm9tX2NsaWVudCwgbmV3X2luYm94X3VzZXJzLCBub3RfaW5faW5ib3hfdXNlcnMsIG5vdywgcGVybWlzc2lvbnMsIHIsIHJlYXNzaWduX3JlYXNvbiwgc2V0T2JqLCBzcGFjZSwgc3BhY2VfaWQ7XG4gICAgICBpbnN0YW5jZV9pZCA9IGluc3RhbmNlX2Zyb21fY2xpZW50WydfaWQnXTtcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuICAgICAgdXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSk7XG4gICAgICBsYXN0X3RyYWNlX2Zyb21fY2xpZW50ID0gXy5sYXN0KGluc3RhbmNlX2Zyb21fY2xpZW50W1widHJhY2VzXCJdKTtcbiAgICAgIGxhc3RfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Ll9pZCA9PT0gbGFzdF90cmFjZV9mcm9tX2NsaWVudFtcIl9pZFwiXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGxhc3RfdHJhY2UuaXNfZmluaXNoZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKTtcbiAgICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IHNwYWNlX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGFkbWluczogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICgoIXBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpICYmICghc3BhY2UuYWRtaW5zLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55So5oi35rKh5pyJ5a+55b2T5YmN5rWB56iL55qE566h55CG5p2D6ZmQXCIpO1xuICAgICAgfVxuICAgICAgaW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2VycztcbiAgICAgIGluYm94X3VzZXJzX2Zyb21fY2xpZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJpbmJveF91c2Vyc1wiXTtcbiAgICAgIHJlYXNzaWduX3JlYXNvbiA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVhc3NpZ25fcmVhc29uXCJdO1xuICAgICAgbm90X2luX2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKGluYm94X3VzZXJzLCBpbmJveF91c2Vyc19mcm9tX2NsaWVudCk7XG4gICAgICBuZXdfaW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UoaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQsIGluYm94X3VzZXJzKTtcbiAgICAgIGlmIChub3RfaW5faW5ib3hfdXNlcnMubGVuZ3RoID09PSAwICYmIG5ld19pbmJveF91c2Vycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgaSA9IDA7XG4gICAgICBhcHByb3ZlX3VzZXJzX2hhbmRsZXJzID0gW107XG4gICAgICB3aGlsZSAoaSA8IGxhc3RfdHJhY2UuYXBwcm92ZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChub3RfaW5faW5ib3hfdXNlcnMuaW5jbHVkZXMobGFzdF90cmFjZS5hcHByb3Zlc1tpXS5oYW5kbGVyKSkge1xuICAgICAgICAgIGlmIChsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmlzX2ZpbmlzaGVkID09PSBmYWxzZSAmJiBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnR5cGUgIT09IFwiY2NcIiAmJiBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnR5cGUgIT09IFwiZGlzdHJpYnV0ZVwiKSB7XG4gICAgICAgICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgICAgIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uY29zdF90aW1lID0gbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5maW5pc2hfZGF0ZSAtIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgIGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMucHVzaChsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnVzZXIpO1xuICAgICAgICAgICAgYXBwcm92ZV91c2Vyc19oYW5kbGVycy5wdXNoKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaGFuZGxlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgICAgY3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvblxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgIGZ1bGxuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYXNzaWduZWVfYXBwciA9IG5ldyBPYmplY3Q7XG4gICAgICBhc3NpZ25lZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICBhc3NpZ25lZV9hcHByLmluc3RhbmNlID0gbGFzdF90cmFjZS5pbnN0YW5jZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIudHJhY2UgPSBsYXN0X3RyYWNlLl9pZDtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgYXNzaWduZWVfYXBwci51c2VyID0gY3VycmVudF91c2VyO1xuICAgICAgYXNzaWduZWVfYXBwci51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lO1xuICAgICAgYXNzaWduZWVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyO1xuICAgICAgYXNzaWduZWVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lO1xuICAgICAgYXNzaWduZWVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb247XG4gICAgICBhc3NpZ25lZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWU7XG4gICAgICBhc3NpZ25lZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgIGFzc2lnbmVlX2FwcHIuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICBhc3NpZ25lZV9hcHByLmR1ZV9kYXRlID0gbGFzdF90cmFjZS5kdWVfZGF0ZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIucmVhZF9kYXRlID0gbm93O1xuICAgICAgYXNzaWduZWVfYXBwci5qdWRnZSA9IFwicmVhc3NpZ25lZFwiO1xuICAgICAgYXNzaWduZWVfYXBwci5pc19yZWFkID0gdHJ1ZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIuZGVzY3JpcHRpb24gPSByZWFzc2lnbl9yZWFzb247XG4gICAgICBhc3NpZ25lZV9hcHByLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICBhc3NpZ25lZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICBhc3NpZ25lZV9hcHByLmNvc3RfdGltZSA9IGFzc2lnbmVlX2FwcHIuZmluaXNoX2RhdGUgLSBhc3NpZ25lZV9hcHByLnN0YXJ0X2RhdGU7XG4gICAgICBsYXN0X3RyYWNlLmFwcHJvdmVzLnB1c2goYXNzaWduZWVfYXBwcik7XG4gICAgICBfLmVhY2gobmV3X2luYm94X3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgIHZhciBhZ2VudCwgaGFuZGxlcl9pZCwgaGFuZGxlcl9pbmZvLCBuZXdfYXBwciwgbmV3X3VzZXIsIHNwYWNlX3VzZXIsIHVzZXJfb3JnYW5pemF0aW9uO1xuICAgICAgICBuZXdfdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUodXNlcl9pZCwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgdXNlcl9pZCk7XG4gICAgICAgIHVzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHNwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgZnVsbG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBuZXdfYXBwciA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld19hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgIG5ld19hcHByLmluc3RhbmNlID0gbGFzdF90cmFjZS5pbnN0YW5jZTtcbiAgICAgICAgbmV3X2FwcHIudHJhY2UgPSBsYXN0X3RyYWNlLl9pZDtcbiAgICAgICAgbmV3X2FwcHIuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgbmV3X2FwcHIudXNlciA9IHVzZXJfaWQ7XG4gICAgICAgIG5ld19hcHByLnVzZXJfbmFtZSA9IG5ld191c2VyLm5hbWU7XG4gICAgICAgIGhhbmRsZXJfaWQgPSB1c2VyX2lkO1xuICAgICAgICBoYW5kbGVyX2luZm8gPSBuZXdfdXNlcjtcbiAgICAgICAgYWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCB1c2VyX2lkKTtcbiAgICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgICAgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnRbaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQuaW5kZXhPZih1c2VyX2lkKV0gPSBhZ2VudDtcbiAgICAgICAgICBoYW5kbGVyX2lkID0gYWdlbnQ7XG4gICAgICAgICAgaGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgICBfaWQ6IGFnZW50XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBuZXdfYXBwci5hZ2VudCA9IGFnZW50O1xuICAgICAgICB9XG4gICAgICAgIG5ld19hcHByLmhhbmRsZXIgPSBoYW5kbGVyX2lkO1xuICAgICAgICBuZXdfYXBwci5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZTtcbiAgICAgICAgbmV3X2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBzcGFjZV91c2VyLm9yZ2FuaXphdGlvbjtcbiAgICAgICAgbmV3X2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IHVzZXJfb3JnYW5pemF0aW9uLm5hbWU7XG4gICAgICAgIG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWU7XG4gICAgICAgIG5ld19hcHByLmZyb21fdXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgbmV3X2FwcHIuZnJvbV91c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lO1xuICAgICAgICBuZXdfYXBwci50eXBlID0gXCJyZWFzc2lnblwiO1xuICAgICAgICBuZXdfYXBwci5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICBuZXdfYXBwci5kdWVfZGF0ZSA9IGxhc3RfdHJhY2UuZHVlX2RhdGU7XG4gICAgICAgIG5ld19hcHByLmlzX3JlYWQgPSBmYWxzZTtcbiAgICAgICAgbmV3X2FwcHIuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgbmV3X2FwcHIudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgICAgdXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3X2FwcHIpO1xuICAgICAgICByZXR1cm4gbGFzdF90cmFjZS5hcHByb3Zlcy5wdXNoKG5ld19hcHByKTtcbiAgICAgIH0pO1xuICAgICAgaW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICAgIGluc3RhbmNlLm91dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQoYXBwcm92ZV91c2Vyc19oYW5kbGVycyk7XG4gICAgICBzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2Vycyk7XG4gICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSBpbmJveF91c2Vyc19mcm9tX2NsaWVudDtcbiAgICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzXCJdID0gbGFzdF90cmFjZS5hcHByb3ZlcztcbiAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnN0YW5jZV9pZCxcbiAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IGxhc3RfdHJhY2UuX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgfSk7XG4gICAgICBpZiAocikge1xuICAgICAgICBpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgIF8uZWFjaChub3RfaW5faW5ib3hfdXNlcnMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgICBpZiAodXNlcl9pZCAhPT0gY3VycmVudF91c2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIF91c2VycyA9IG5ldyBBcnJheTtcbiAgICAgICAgX3VzZXJzLnB1c2goaW5zLmFwcGxpY2FudCk7XG4gICAgICAgIF91c2Vycy5wdXNoKGlucy5zdWJtaXR0ZXIpO1xuICAgICAgICBfdXNlcnMgPSBfLnVuaXEoX3VzZXJzLmNvbmNhdChpbnMub3V0Ym94X3VzZXJzKSk7XG4gICAgICAgIF8uZWFjaChfdXNlcnMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZWFzc2lnbl9uZXdfaW5ib3hfdXNlcnNcIiwgaW5zLCByZWFzc2lnbl9yZWFzb24sIGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmVhc3NpZ24nLCBjdXJyZW50X3VzZXIsIGlucy5pbmJveF91c2Vycyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHt9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L3JlbG9jYXRlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXG5cblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgKGluc3RhbmNlX2Zyb21fY2xpZW50KSAtPlxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKVxuXG5cdFx0XHRsYXN0X3RyYWNlID0gXy5sYXN0KGluc3RhbmNlLnRyYWNlcylcblxuXHRcdFx0IyDpqozor4Fsb2dpbiB1c2VyX2lk5a+56K+l5rWB56iL5pyJ566h55CG55Sz6K+35Y2V55qE5p2D6ZmQXG5cdFx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpXG5cdFx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKGluc3RhbmNlLnNwYWNlLCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxuXHRcdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSlcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIilcblxuXHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxuXHRcdFx0aW5zdGFuY2VfaWQgPSBsYXN0X3RyYWNlLmluc3RhbmNlXG5cdFx0XHRpbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzXG5cdFx0XHRyZWxvY2F0ZV9pbmJveF91c2VycyA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfaW5ib3hfdXNlcnNcIl1cblx0XHRcdHJlbG9jYXRlX2NvbW1lbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX2NvbW1lbnRcIl1cblx0XHRcdHJlbG9jYXRlX25leHRfc3RlcCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfbmV4dF9zdGVwXCJdXG5cdFx0XHRub3RfaW5faW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UoaW5ib3hfdXNlcnMsIHJlbG9jYXRlX2luYm94X3VzZXJzKVxuXHRcdFx0bmV3X2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKHJlbG9jYXRlX2luYm94X3VzZXJzLCBpbmJveF91c2VycylcblxuXHRcdFx0YXBwcm92ZV91c2VycyA9IFtdXG5cblx0XHRcdCMg6I635Y+W5LiA5LiqZmxvd1xuXHRcdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxuXHRcdFx0bmV4dF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCByZWxvY2F0ZV9uZXh0X3N0ZXApXG5cdFx0XHRuZXh0X3N0ZXBfdHlwZSA9IG5leHRfc3RlcC5zdGVwX3R5cGVcblx0XHRcdG5leHRfc3RlcF9uYW1lID0gbmV4dF9zdGVwLm5hbWVcblx0XHRcdGN1cnJlbnRfc2V0cCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgbGFzdF90cmFjZS5zdGVwKVxuXHRcdFx0Y3VycmVudF9zZXRwX3R5cGUgPSBjdXJyZW50X3NldHAuc3RlcF90eXBlXG5cblx0XHRcdHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlc1xuXHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxuXHRcdFx0IyDph43lrprkvY3nmoTml7blgJnkvb/nlKhhcHByb3ZlLnZhbHVlc+WQiOW5tiBpbnN0YW5jZS52YWx1ZXPnlJ/miJDmlrDnmoRpbnN0YW5jZS52YWx1ZXMgIzEzMjhcblx0XHRcdHNldE9iai52YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpXG5cdFx0XHRub3cgPSBuZXcgRGF0ZVxuXHRcdFx0aSA9IDBcblx0XHRcdHdoaWxlIGkgPCB0cmFjZXMubGVuZ3RoXG5cdFx0XHRcdGlmIHRyYWNlc1tpXS5faWQgaXMgbGFzdF90cmFjZS5faWRcblx0XHRcdFx0XHRpZiBub3QgdHJhY2VzW2ldLmFwcHJvdmVzXG5cdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXMgPSBuZXcgQXJyYXlcblx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNlLmFwcHJvdmXorrDlvZVcblx0XHRcdFx0XHRoID0gMFxuXHRcdFx0XHRcdHdoaWxlIGggPCB0cmFjZXNbaV0uYXBwcm92ZXMubGVuZ3RoXG5cdFx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgaXMgZmFsc2UgYW5kIHRyYWNlc1tpXS5hcHByb3Zlc1toXS50eXBlIGlzbnQgXCJjY1wiIGFuZCB0cmFjZXNbaV0uYXBwcm92ZXNbaF0udHlwZSBpc250IFwiZGlzdHJpYnV0ZVwiXG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zdGFydF9kYXRlID0gbm93XG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0ucmVhZF9kYXRlID0gbm93XG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19lcnJvciA9IGZhbHNlXG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19yZWFkID0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlXG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5qdWRnZSA9IFwidGVybWluYXRlZFwiXG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5jb3N0X3RpbWUgPSB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uZmluaXNoX2RhdGUgLSB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc3RhcnRfZGF0ZVxuXHRcdFx0XHRcdFx0XHRhcHByb3ZlX3VzZXJzLnB1c2godHJhY2VzW2ldLmFwcHJvdmVzW2hdLnVzZXIpXG5cblx0XHRcdFx0XHRcdFx0IyBiZWdpbiDooqvph43lrprkvY3nu5lB77yM5YaN6KKr6YeN5a6a5L2N6LWw77yM5LmL5YmNQeeahOaEj+ingeWcqOaEj+ingeagj+S4reaYvuekuuS4jeWHuuadpeS6huOAgiAjMTkyMVxuXHRcdFx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID09IHRydWVcblx0XHRcdFx0XHRcdFx0XHR0YSA9IHRyYWNlc1tpXS5hcHByb3Zlc1toXVxuXHRcdFx0XHRcdFx0XHRcdHNhbWVUcmFjZXMgPSBfLmZpbHRlciB0cmFjZXMsICh0KS0+XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdC5zdGVwID09IHRyYWNlc1tpXS5zdGVwXG5cblx0XHRcdFx0XHRcdFx0XHRsID0gc2FtZVRyYWNlcy5sZW5ndGggLSAxXG5cdFx0XHRcdFx0XHRcdFx0c2lnblNob3dBcHByb3ZlSWQgPSBudWxsXG5cblx0XHRcdFx0XHRcdFx0XHR3aGlsZSBsID4gLTFcblx0XHRcdFx0XHRcdFx0XHRcdF8uZWFjaCBzYW1lVHJhY2VzW2xdLmFwcHJvdmVzLCAoYSktPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiBhLnVzZXIgPT0gdGEudXNlciAmJiBhLmp1ZGdlICE9IFwidGVybWluYXRlZFwiICYmIGEuZGVzY3JpcHRpb24gJiYgIXNpZ25TaG93QXBwcm92ZUlkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2lnblNob3dBcHByb3ZlSWQgPSBhLl9pZFxuXHRcdFx0XHRcdFx0XHRcdFx0bC0tXG5cblx0XHRcdFx0XHRcdFx0XHRpZiBzaWduU2hvd0FwcHJvdmVJZFxuXHRcdFx0XHRcdFx0XHRcdFx0dGkgPSAwXG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSB0aSA8IHRyYWNlcy5sZW5ndGhcblx0XHRcdFx0XHRcdFx0XHRcdFx0YWggPSAwXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdoaWxlIGFoIDwgdHJhY2VzW3RpXS5hcHByb3Zlcy5sZW5ndGhcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiB0cmFjZXNbdGldLmFwcHJvdmVzW2FoXS5faWQgPT0gc2lnblNob3dBcHByb3ZlSWRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRyYWNlc1t0aV0uYXBwcm92ZXNbYWhdLnNpZ25fc2hvdyA9IHRydWVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zaWduX3Nob3cgPSBmYWxzZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFoKytcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGkrK1xuXHRcdFx0XHRcdFx0XHQjIGVuZCDooqvph43lrprkvY3nu5lB77yM5YaN6KKr6YeN5a6a5L2N6LWw77yM5LmL5YmNQeeahOaEj+ingeWcqOaEj+ingeagj+S4reaYvuekuuS4jeWHuuadpeS6huOAgiAjMTkyMVxuXG5cdFx0XHRcdFx0XHRoKytcblxuXHRcdFx0XHRcdCMg5Zyo5ZCM5LiAdHJhY2XkuIvmj5LlhaXph43lrprkvY3mk43kvZzogIXnmoRhcHByb3Zl6K6w5b2VXG5cdFx0XHRcdFx0Y3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcblx0XHRcdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHsgZmllbGRzOiB7IG5hbWU6IDEgLCBmdWxsbmFtZTogMSB9IH0pXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwciA9IG5ldyBPYmplY3Rcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLnRyYWNlID0gdHJhY2VzW2ldLl9pZFxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci51c2VyID0gY3VycmVudF91c2VyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb25cblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWVcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZVxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuc3RhcnRfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuZmluaXNoX2RhdGUgPSBub3dcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmR1ZV9kYXRlID0gdHJhY2VzW2ldLmR1ZV9kYXRlXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5yZWFkX2RhdGUgPSBub3dcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmp1ZGdlID0gXCJyZWxvY2F0ZWRcIlxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaXNfcmVhZCA9IHRydWVcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmRlc2NyaXB0aW9uID0gcmVsb2NhdGVfY29tbWVudFxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaXNfZXJyb3IgPSBmYWxzZVxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdFxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuY29zdF90aW1lID0gcmVsb2NhdGVfYXBwci5maW5pc2hfZGF0ZSAtIHJlbG9jYXRlX2FwcHIuc3RhcnRfZGF0ZVxuXHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlcy5wdXNoKHJlbG9jYXRlX2FwcHIpXG5cblx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNl6K6w5b2VXG5cdFx0XHRcdFx0dHJhY2VzW2ldLmlzX2ZpbmlzaGVkID0gdHJ1ZVxuXHRcdFx0XHRcdHRyYWNlc1tpXS5maW5pc2hfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdHRyYWNlc1tpXS5qdWRnZSA9IFwicmVsb2NhdGVkXCJcblxuXHRcdFx0XHRpKytcblxuXHRcdFx0aWYgbmV4dF9zdGVwX3R5cGUgaXMgXCJlbmRcIlxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXG5cdFx0XHRcdG5ld1RyYWNlID0gbmV3IE9iamVjdFxuXHRcdFx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcblx0XHRcdFx0bmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2UuX2lkXVxuXHRcdFx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IHRydWVcblx0XHRcdFx0bmV3VHJhY2Uuc3RlcCA9IHJlbG9jYXRlX25leHRfc3RlcFxuXHRcdFx0XHRuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWVcblx0XHRcdFx0bmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vd1xuXHRcdFx0XHRuZXdUcmFjZS5maW5pc2hfZGF0ZSA9IG5vd1xuXHRcdFx0XHRuZXdUcmFjZS5hcHByb3ZlcyA9IFtdXG5cdFx0XHRcdCMg5pu05pawaW5zdGFuY2XorrDlvZVcblx0XHRcdFx0c2V0T2JqLnN0YXRlID0gXCJjb21wbGV0ZWRcIlxuXHRcdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBbXVxuXHRcdFx0XHRzZXRPYmouZmluYWxfZGVjaXNpb24gPSBcInRlcm1pbmF0ZWRcIlxuXHRcdFx0XHRzZXRPYmouZmluaXNoX2RhdGUgPSBuZXcgRGF0ZVxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBuZXh0X3N0ZXBfbmFtZVxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gZmFsc2Vcblx0XHRcdGVsc2Vcblx0XHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZeiusOW9lVxuXHRcdFx0XHRuZXdUcmFjZSA9IG5ldyBPYmplY3Rcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxuXHRcdFx0XHRuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXG5cdFx0XHRcdG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlLl9pZF1cblx0XHRcdFx0bmV3VHJhY2UuaXNfZmluaXNoZWQgPSBmYWxzZVxuXHRcdFx0XHRuZXdUcmFjZS5zdGVwID0gcmVsb2NhdGVfbmV4dF9zdGVwXG5cdFx0XHRcdG5ld1RyYWNlLm5hbWUgPSBuZXh0X3N0ZXBfbmFtZVxuXHRcdFx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XG5cdFx0XHRcdG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKG5leHRfc3RlcC50aW1lb3V0X2hvdXJzLCBzcGFjZV9pZClcblx0XHRcdFx0bmV3VHJhY2UuYXBwcm92ZXMgPSBbXVxuXHRcdFx0XHRfLmVhY2gocmVsb2NhdGVfaW5ib3hfdXNlcnMsIChuZXh0X3N0ZXBfdXNlcl9pZCwgaWR4KS0+XG5cdFx0XHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZS5hcHByb3Zl6K6w5b2VXG5cdFx0XHRcdFx0bmV3QXBwcm92ZSA9IG5ldyBPYmplY3Rcblx0XHRcdFx0XHRuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcblx0XHRcdFx0XHRuZXdBcHByb3ZlLnRyYWNlID0gbmV3VHJhY2UuX2lkXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IGZhbHNlXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS51c2VyID0gbmV4dF9zdGVwX3VzZXJfaWRcblxuXHRcdFx0XHRcdHVzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUobmV4dF9zdGVwX3VzZXJfaWQsIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxuXHRcdFx0XHRcdG5ld0FwcHJvdmUudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWVcblxuXHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZFxuXHRcdFx0XHRcdGhhbmRsZXJfaW5mbyA9IHVzZXJfaW5mb1xuXHRcdFx0XHRcdGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpXG5cdFx0XHRcdFx0aWYgYWdlbnRcblx0XHRcdFx0XHRcdHJlbG9jYXRlX2luYm94X3VzZXJzW2lkeF0gPSBhZ2VudFxuXHRcdFx0XHRcdFx0aGFuZGxlcl9pZCA9IGFnZW50XG5cdFx0XHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiBhZ2VudCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuYWdlbnQgPSBhZ2VudFxuXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZFxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWVcblxuXHRcdFx0XHRcdG5leHRfc3RlcF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGhhbmRsZXJfaWQpXG5cdFx0XHRcdFx0IyDojrflj5ZuZXh0X3N0ZXBfdXNlcuaJgOWcqOeahOmDqOmXqOS/oeaBr1xuXHRcdFx0XHRcdG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKVxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl1cblx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl1cblxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBuZXdUcmFjZS5kdWVfZGF0ZVxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0XG5cdFx0XHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSlcblx0XHRcdFx0XHRuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpXG5cdFx0XHRcdClcblx0XHRcdFx0c2V0T2JqLmluYm94X3VzZXJzID0gcmVsb2NhdGVfaW5ib3hfdXNlcnNcblx0XHRcdFx0c2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gbmV4dF9zdGVwX25hbWVcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgbmV4dF9zdGVwLmxpbmVzKVxuXG5cdFx0XHRpbnN0YW5jZS5vdXRib3hfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpXG5cdFx0XHRpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGluYm94X3VzZXJzKS5jb25jYXQoYXBwcm92ZV91c2Vycylcblx0XHRcdHNldE9iai5vdXRib3hfdXNlcnMgPSBfLnVuaXEoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKVxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcblx0XHRcdHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlXG5cdFx0XHR0cmFjZXMucHVzaChuZXdUcmFjZSlcblx0XHRcdHNldE9iai50cmFjZXMgPSB0cmFjZXNcblxuXHRcdFx0aWYgc2V0T2JqLnN0YXRlID09ICdjb21wbGV0ZWQnXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9ian0pXG5cdFx0XHRlbHNlXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9iaiwgJHVuc2V0OiB7ZmluaXNoX2RhdGU6IDF9fSlcblxuXHRcdFx0aWYgclxuXHRcdFx0XHRpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxuXHRcdFx0XHQjIOe7meiiq+WIoOmZpOeahGluYm94X3VzZXJzIOWSjCDlvZPliY3nlKjmiLcg5Y+R6YCBcHVzaFxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKVxuXHRcdFx0XHRfLmVhY2gobm90X2luX2luYm94X3VzZXJzLCAodXNlcl9pZCktPlxuXHRcdFx0XHRcdGlmIHVzZXJfaWQgaXNudCBjdXJyZW50X3VzZXJcblx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKVxuXHRcdFx0XHQpXG5cdFx0XHRcdCMg5o+Q5Y+WaW5zdGFuY2VzLm91dGJveF91c2Vyc+aVsOe7hOWSjOWhq+WNleS6uuOAgeeUs+ivt+S6ulxuXHRcdFx0XHRfdXNlcnMgPSBuZXcgQXJyYXlcblx0XHRcdFx0X3VzZXJzLnB1c2goaW5zLmFwcGxpY2FudClcblx0XHRcdFx0X3VzZXJzLnB1c2goaW5zLnN1Ym1pdHRlcilcblx0XHRcdFx0X3VzZXJzID0gXy51bmlxKF91c2Vycy5jb25jYXQoaW5zLm91dGJveF91c2VycykpXG5cdFx0XHRcdF8uZWFjaChfdXNlcnMsICh1c2VyX2lkKS0+XG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXG5cdFx0XHRcdClcblxuXHRcdFx0XHQjIOe7meaWsOWKoOWFpeeahGluYm94X3VzZXJz5Y+R6YCBcHVzaCBtZXNzYWdlXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmVhc3NpZ25fbmV3X2luYm94X3VzZXJzXCIsIGlucywgcmVsb2NhdGVfY29tbWVudCwgY3VycmVudF91c2VyX2luZm8pXG5cblx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmVsb2NhdGUnLCBjdXJyZW50X3VzZXIsIGlucy5pbmJveF91c2VycylcblxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHt9XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7ZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L3JlbG9jYXRlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBfdXNlcnMsIGFoLCBhcHByb3ZlX3VzZXJzLCBjdXJyZW50X3NldHAsIGN1cnJlbnRfc2V0cF90eXBlLCBjdXJyZW50X3NwYWNlX3VzZXIsIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24sIGZsb3csIGgsIGksIGluYm94X3VzZXJzLCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9pZCwgbCwgbGFzdF90cmFjZSwgbmV3VHJhY2UsIG5ld19pbmJveF91c2VycywgbmV4dF9zdGVwLCBuZXh0X3N0ZXBfbmFtZSwgbmV4dF9zdGVwX3R5cGUsIG5vdF9pbl9pbmJveF91c2Vycywgbm93LCBwZXJtaXNzaW9ucywgciwgcmVsb2NhdGVfYXBwciwgcmVsb2NhdGVfY29tbWVudCwgcmVsb2NhdGVfaW5ib3hfdXNlcnMsIHJlbG9jYXRlX25leHRfc3RlcCwgc2FtZVRyYWNlcywgc2V0T2JqLCBzaWduU2hvd0FwcHJvdmVJZCwgc3BhY2UsIHNwYWNlX2lkLCB0YSwgdGksIHRyYWNlcztcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICBsYXN0X3RyYWNlID0gXy5sYXN0KGluc3RhbmNlLnRyYWNlcyk7XG4gICAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpO1xuICAgICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShpbnN0YW5jZS5zcGFjZSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBhZG1pbnM6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKTtcbiAgICAgIH1cbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICBpbnN0YW5jZV9pZCA9IGxhc3RfdHJhY2UuaW5zdGFuY2U7XG4gICAgICBpbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzO1xuICAgICAgcmVsb2NhdGVfaW5ib3hfdXNlcnMgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX2luYm94X3VzZXJzXCJdO1xuICAgICAgcmVsb2NhdGVfY29tbWVudCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfY29tbWVudFwiXTtcbiAgICAgIHJlbG9jYXRlX25leHRfc3RlcCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfbmV4dF9zdGVwXCJdO1xuICAgICAgbm90X2luX2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKGluYm94X3VzZXJzLCByZWxvY2F0ZV9pbmJveF91c2Vycyk7XG4gICAgICBuZXdfaW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UocmVsb2NhdGVfaW5ib3hfdXNlcnMsIGluYm94X3VzZXJzKTtcbiAgICAgIGFwcHJvdmVfdXNlcnMgPSBbXTtcbiAgICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgICBuZXh0X3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHJlbG9jYXRlX25leHRfc3RlcCk7XG4gICAgICBuZXh0X3N0ZXBfdHlwZSA9IG5leHRfc3RlcC5zdGVwX3R5cGU7XG4gICAgICBuZXh0X3N0ZXBfbmFtZSA9IG5leHRfc3RlcC5uYW1lO1xuICAgICAgY3VycmVudF9zZXRwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBsYXN0X3RyYWNlLnN0ZXApO1xuICAgICAgY3VycmVudF9zZXRwX3R5cGUgPSBjdXJyZW50X3NldHAuc3RlcF90eXBlO1xuICAgICAgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgIHNldE9iai52YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgdHJhY2VzLmxlbmd0aCkge1xuICAgICAgICBpZiAodHJhY2VzW2ldLl9pZCA9PT0gbGFzdF90cmFjZS5faWQpIHtcbiAgICAgICAgICBpZiAoIXRyYWNlc1tpXS5hcHByb3Zlcykge1xuICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzID0gbmV3IEFycmF5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBoID0gMDtcbiAgICAgICAgICB3aGlsZSAoaCA8IHRyYWNlc1tpXS5hcHByb3Zlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPT09IGZhbHNlICYmIHRyYWNlc1tpXS5hcHByb3Zlc1toXS50eXBlICE9PSBcImNjXCIgJiYgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnR5cGUgIT09IFwiZGlzdHJpYnV0ZVwiKSB7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5yZWFkX2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uY29zdF90aW1lID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlIC0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICAgIGFwcHJvdmVfdXNlcnMucHVzaCh0cmFjZXNbaV0uYXBwcm92ZXNbaF0udXNlcik7XG4gICAgICAgICAgICAgIGlmICh0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGEgPSB0cmFjZXNbaV0uYXBwcm92ZXNbaF07XG4gICAgICAgICAgICAgICAgc2FtZVRyYWNlcyA9IF8uZmlsdGVyKHRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc3RlcCA9PT0gdHJhY2VzW2ldLnN0ZXA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbCA9IHNhbWVUcmFjZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBzaWduU2hvd0FwcHJvdmVJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGwgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgXy5lYWNoKHNhbWVUcmFjZXNbbF0uYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEudXNlciA9PT0gdGEudXNlciAmJiBhLmp1ZGdlICE9PSBcInRlcm1pbmF0ZWRcIiAmJiBhLmRlc2NyaXB0aW9uICYmICFzaWduU2hvd0FwcHJvdmVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWduU2hvd0FwcHJvdmVJZCA9IGEuX2lkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGwtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25TaG93QXBwcm92ZUlkKSB7XG4gICAgICAgICAgICAgICAgICB0aSA9IDA7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAodGkgPCB0cmFjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGFoIDwgdHJhY2VzW3RpXS5hcHByb3Zlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2VzW3RpXS5hcHByb3Zlc1thaF0uX2lkID09PSBzaWduU2hvd0FwcHJvdmVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VzW3RpXS5hcHByb3Zlc1thaF0uc2lnbl9zaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zaWduX3Nob3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgYWgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aSsrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgICAgICBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci50cmFjZSA9IHRyYWNlc1tpXS5faWQ7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci51c2VyID0gY3VycmVudF91c2VyO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24ubmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmR1ZV9kYXRlID0gdHJhY2VzW2ldLmR1ZV9kYXRlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuanVkZ2UgPSBcInJlbG9jYXRlZFwiO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5kZXNjcmlwdGlvbiA9IHJlbG9jYXRlX2NvbW1lbnQ7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmNvc3RfdGltZSA9IHJlbG9jYXRlX2FwcHIuZmluaXNoX2RhdGUgLSByZWxvY2F0ZV9hcHByLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzLnB1c2gocmVsb2NhdGVfYXBwcik7XG4gICAgICAgICAgdHJhY2VzW2ldLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICB0cmFjZXNbaV0uZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgdHJhY2VzW2ldLmp1ZGdlID0gXCJyZWxvY2F0ZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBpZiAobmV4dF9zdGVwX3R5cGUgPT09IFwiZW5kXCIpIHtcbiAgICAgICAgbmV3VHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICBuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIG5ld1RyYWNlLnN0ZXAgPSByZWxvY2F0ZV9uZXh0X3N0ZXA7XG4gICAgICAgIG5ld1RyYWNlLm5hbWUgPSBuZXh0X3N0ZXBfbmFtZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3VHJhY2UuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmFwcHJvdmVzID0gW107XG4gICAgICAgIHNldE9iai5zdGF0ZSA9IFwiY29tcGxldGVkXCI7XG4gICAgICAgIHNldE9iai5pbmJveF91c2VycyA9IFtdO1xuICAgICAgICBzZXRPYmouZmluYWxfZGVjaXNpb24gPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgc2V0T2JqLmZpbmlzaF9kYXRlID0gbmV3IERhdGU7XG4gICAgICAgIHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUcmFjZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgIG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgIG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlLl9pZF07XG4gICAgICAgIG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIG5ld1RyYWNlLnN0ZXAgPSByZWxvY2F0ZV9uZXh0X3N0ZXA7XG4gICAgICAgIG5ld1RyYWNlLm5hbWUgPSBuZXh0X3N0ZXBfbmFtZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUobmV4dF9zdGVwLnRpbWVvdXRfaG91cnMsIHNwYWNlX2lkKTtcbiAgICAgICAgbmV3VHJhY2UuYXBwcm92ZXMgPSBbXTtcbiAgICAgICAgXy5lYWNoKHJlbG9jYXRlX2luYm94X3VzZXJzLCBmdW5jdGlvbihuZXh0X3N0ZXBfdXNlcl9pZCwgaWR4KSB7XG4gICAgICAgICAgdmFyIGFnZW50LCBoYW5kbGVyX2lkLCBoYW5kbGVyX2luZm8sIG5ld0FwcHJvdmUsIG5leHRfc3RlcF9zcGFjZV91c2VyLCBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbywgdXNlcl9pbmZvO1xuICAgICAgICAgIG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgIG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgICBuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgbmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZDtcbiAgICAgICAgICBuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgICAgbmV3QXBwcm92ZS51c2VyID0gbmV4dF9zdGVwX3VzZXJfaWQ7XG4gICAgICAgICAgdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IHVzZXJfaW5mby5uYW1lO1xuICAgICAgICAgIGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZDtcbiAgICAgICAgICBoYW5kbGVyX2luZm8gPSB1c2VyX2luZm87XG4gICAgICAgICAgYWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCBuZXh0X3N0ZXBfdXNlcl9pZCk7XG4gICAgICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgICAgICByZWxvY2F0ZV9pbmJveF91c2Vyc1tpZHhdID0gYWdlbnQ7XG4gICAgICAgICAgICBoYW5kbGVyX2lkID0gYWdlbnQ7XG4gICAgICAgICAgICBoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICAgICAgX2lkOiBhZ2VudFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXIgPSBoYW5kbGVyX2lkO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgbmV4dF9zdGVwX3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgaGFuZGxlcl9pZCk7XG4gICAgICAgICAgbmV4dF9zdGVwX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8obmV4dF9zdGVwX3NwYWNlX3VzZXIpO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXTtcbiAgICAgICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgbmV3QXBwcm92ZS5kdWVfZGF0ZSA9IG5ld1RyYWNlLmR1ZV9kYXRlO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICBuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgdXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSk7XG4gICAgICAgICAgcmV0dXJuIG5ld1RyYWNlLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSByZWxvY2F0ZV9pbmJveF91c2VycztcbiAgICAgICAgc2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCI7XG4gICAgICAgIHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gdXVmbG93TWFuYWdlci5nZXRDdXJyZW50U3RlcEF1dG9TdWJtaXQoZmxvdy50aW1lb3V0X2F1dG9fc3VibWl0LCBuZXh0X3N0ZXAubGluZXMpO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICAgIGluc3RhbmNlLm91dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQoaW5ib3hfdXNlcnMpLmNvbmNhdChhcHByb3ZlX3VzZXJzKTtcbiAgICAgIHNldE9iai5vdXRib3hfdXNlcnMgPSBfLnVuaXEoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKTtcbiAgICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlO1xuICAgICAgdHJhY2VzLnB1c2gobmV3VHJhY2UpO1xuICAgICAgc2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcbiAgICAgIGlmIChzZXRPYmouc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqLFxuICAgICAgICAgICR1bnNldDoge1xuICAgICAgICAgICAgZmluaXNoX2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHIpIHtcbiAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICBfLmVhY2gobm90X2luX2luYm94X3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgaWYgKHVzZXJfaWQgIT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIF91c2Vycy5wdXNoKGlucy5hcHBsaWNhbnQpO1xuICAgICAgICBfdXNlcnMucHVzaChpbnMuc3VibWl0dGVyKTtcbiAgICAgICAgX3VzZXJzID0gXy51bmlxKF91c2Vycy5jb25jYXQoaW5zLm91dGJveF91c2VycykpO1xuICAgICAgICBfLmVhY2goX3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmVhc3NpZ25fbmV3X2luYm94X3VzZXJzXCIsIGlucywgcmVsb2NhdGVfY29tbWVudCwgY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZWxvY2F0ZScsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvYXJjaGl2ZScsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxuXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cblx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl1cblx0XHRcdCMg6I635Y+W5LiA5LiqaW5zdGFuY2Vcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcblx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2Vcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2Vcblx0XHRcdHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcblx0XHRcdCMg5Yik5pat5LiA5LiqaW5zdGFuY2XmmK/lkKbkuLrlrozmiJDlubbkuJTmnKrlvZLmoaPnirbmgIFcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZUZpbmlzaGVkQW5kTm90QXJjaGlldmVkKGluc3RhbmNlKVxuXHRcdFx0IyDojrflj5bkuIDkuKpzcGFjZeS4i+eahOS4gOS4qnVzZXJcblx0XHRcdHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxuXHRcdFx0IyDliKTmlq3kuIDkuKrnlKjmiLfmmK/lkKbmmK/kuIDkuKppbnN0YW5jZeeahOaPkOS6pOiAhSDmiJbogIVzcGFjZeeahOeuoeeQhuWRmFxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlU3VibWl0dGVyT3JBcHBsaWNhbnRPclNwYWNlQWRtaW4oaW5zdGFuY2UsIGN1cnJlbnRfdXNlciwgc3BhY2UpXG5cdFx0XHRcblx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3Rcblx0XHRcdHNldE9iai5pc19hcmNoaXZlZCA9IHRydWVcblx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlXG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcblxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiBzZXRPYmp9KVxuXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdFx0Y29kZTogMjAwXG5cdFx0XHRcdGRhdGE6IHt9XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cblx0XG5cdFx0IiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9hcmNoaXZlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIHNldE9iaiwgc3BhY2UsIHNwYWNlX2lkLCBzcGFjZV91c2VyO1xuICAgICAgaW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXTtcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuICAgICAgc3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZUZpbmlzaGVkQW5kTm90QXJjaGlldmVkKGluc3RhbmNlKTtcbiAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVN1Ym1pdHRlck9yQXBwbGljYW50T3JTcGFjZUFkbWluKGluc3RhbmNlLCBjdXJyZW50X3VzZXIsIHNwYWNlKTtcbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBzZXRPYmouaXNfYXJjaGl2ZWQgPSB0cnVlO1xuICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGU7XG4gICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIk1ldGVvci5zdGFydHVwIC0+XG5cdFdlYkFwcC5jb25uZWN0SGFuZGxlcnMudXNlIFwiL2FwaS93b3JrZmxvdy9leHBvcnQvaW5zdGFuY2VzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0XHR0cnlcblx0XHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcblxuXHRcdFx0cXVlcnkgPSByZXEucXVlcnlcblx0XHRcdHNwYWNlX2lkID0gcXVlcnkuc3BhY2VfaWRcblx0XHRcdGZsb3dfaWQgPSBxdWVyeS5mbG93X2lkXG5cdFx0XHR0eXBlID0gcGFyc2VJbnQocXVlcnkudHlwZSlcblx0XHRcdHRpbWV6b25lb2Zmc2V0ID0gcGFyc2VJbnQocXVlcnkudGltZXpvbmVvZmZzZXQpXG5cblx0XHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHsgX2lkOiBmbG93X2lkIH0sIHsgZmllbGRzOiB7IGZvcm06IDEgfSB9KVxuXHRcdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoeyBfaWQ6IGZsb3cuZm9ybSB9LCB7IGZpZWxkczogeyBuYW1lOiAxLCAnY3VycmVudC5maWVsZHMnOiAxIH0gfSlcblxuXHRcdFx0Zm9ybV9uYW1lID0gZm9ybS5uYW1lXG5cdFx0XHRmaWVsZHMgPSBmb3JtLmN1cnJlbnQuZmllbGRzXG5cdFx0XHR0YWJsZV9maWVsZHMgPSBuZXcgQXJyYXlcblx0XHRcdF8uZWFjaCBmb3JtLmN1cnJlbnQuZmllbGRzLCAoZmllbGQpIC0+XG5cdFx0XHRcdGlmIGZpZWxkLnR5cGUgaXMgXCJ0YWJsZVwiXG5cdFx0XHRcdFx0dGFibGVfZmllbGRzLnB1c2goZmllbGQpXG5cblx0XHRcdGluc190b194bHMgPSBuZXcgQXJyYXlcblx0XHRcdHN0YXJ0X2RhdGUgPSBudWxsXG5cdFx0XHRlbmRfZGF0ZSA9IG51bGxcblx0XHRcdG5vdyA9IG5ldyBEYXRlXG5cdFx0XHRzZWxlY3RvciA9IHsgc3BhY2U6IHNwYWNlX2lkLCBmbG93OiBmbG93X2lkIH1cblx0XHRcdHNlbGVjdG9yLnN0YXRlID0geyRpbjogW1wicGVuZGluZ1wiLCBcImNvbXBsZXRlZFwiXX1cblx0XHRcdHVpZCA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShzcGFjZV9pZClcblx0XHRcdGlmICFzcGFjZVxuXHRcdFx0XHRzZWxlY3Rvci5zdGF0ZSA9IFwibm9uZVwiXG5cblx0XHRcdGlmICFzcGFjZS5hZG1pbnMuaW5jbHVkZXModWlkKVxuXHRcdFx0XHRmbG93X2lkcyA9IFdvcmtmbG93TWFuYWdlci5nZXRNeUFkbWluT3JNb25pdG9yRmxvd3Moc3BhY2VfaWQsIHVpZClcblx0XHRcdFx0aWYgIWZsb3dfaWRzLmluY2x1ZGVzKHNlbGVjdG9yLmZsb3cpXG5cdFx0XHRcdFx0c2VsZWN0b3IuJG9yID0gW3tzdWJtaXR0ZXI6IHVpZH0sIHthcHBsaWNhbnQ6IHVpZH0sIHtpbmJveF91c2VyczogdWlkfSwge291dGJveF91c2VyczogdWlkfV1cblxuXHRcdFx0IyAwLeacrOaciFxuXHRcdFx0aWYgdHlwZSBpcyAwXG5cdFx0XHRcdHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpXG5cdFx0XHRcdHNlbGVjdG9yLnN1Ym1pdF9kYXRlID0geyAkZ3RlOiBzdGFydF9kYXRlIH1cblx0XHRcdFx0aW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG5cdFx0XHRcdFx0c29ydDogeyBzdWJtaXRfZGF0ZTogMSB9XG5cdFx0XHRcdH0pLmZldGNoKClcblx0XHRcdCMgMS3kuIrmnIhcblx0XHRcdGVsc2UgaWYgdHlwZSBpcyAxXG5cdFx0XHRcdGxhc3RfbW9udGhfZGF0ZSA9IG5ldyBEYXRlKG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSkgLSAxMDAwICogNjAgKiA2MCAqIDI0KVxuXHRcdFx0XHRzdGFydF9kYXRlID0gbmV3IERhdGUobGFzdF9tb250aF9kYXRlLmdldEZ1bGxZZWFyKCksIGxhc3RfbW9udGhfZGF0ZS5nZXRNb250aCgpLCAxKVxuXHRcdFx0XHRlbmRfZGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSlcblx0XHRcdFx0c2VsZWN0b3Iuc3VibWl0X2RhdGUgPSB7ICRndGU6IHN0YXJ0X2RhdGUsICRsdGU6IGVuZF9kYXRlIH1cblx0XHRcdFx0aW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG5cdFx0XHRcdFx0c29ydDogeyBzdWJtaXRfZGF0ZTogMSB9XG5cdFx0XHRcdH0pLmZldGNoKClcblx0XHRcdCMgMi3mlbTkuKrlubTluqZcblx0XHRcdGVsc2UgaWYgdHlwZSBpcyAyXG5cdFx0XHRcdHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgMCwgMSlcblx0XHRcdFx0c2VsZWN0b3Iuc3VibWl0X2RhdGUgPSB7ICRndGU6IHN0YXJ0X2RhdGUgfVxuXHRcdFx0XHRpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoc2VsZWN0b3IsIHtcblx0XHRcdFx0XHRzb3J0OiB7IHN1Ym1pdF9kYXRlOiAxIH1cblx0XHRcdFx0fSkuZmV0Y2goKVxuXHRcdFx0IyAzLeaJgOaciVxuXHRcdFx0ZWxzZSBpZiB0eXBlIGlzIDNcblx0XHRcdFx0aW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG5cdFx0XHRcdFx0c29ydDogeyBzdWJtaXRfZGF0ZTogMSB9XG5cdFx0XHRcdH0pLmZldGNoKClcblxuXHRcdFx0ZWpzID0gcmVxdWlyZSgnZWpzJylcblx0XHRcdHN0ciA9IEFzc2V0cy5nZXRUZXh0KCdzZXJ2ZXIvZWpzL2V4cG9ydF9pbnN0YW5jZXMuZWpzJylcblxuXHRcdFx0IyDmo4DmtYvmmK/lkKbmnInor63ms5XplJnor69cblx0XHRcdGVqc0xpbnQgPSByZXF1aXJlKCdlanMtbGludCcpXG5cdFx0XHRlcnJvcl9vYmogPSBlanNMaW50LmxpbnQoc3RyLCB7fSlcblx0XHRcdGlmIGVycm9yX29ialxuXHRcdFx0XHRjb25zb2xlLmVycm9yIFwiPT09L2FwaS93b3JrZmxvdy9leHBvcnQ6XCJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBlcnJvcl9vYmpcblxuXHRcdFx0dGVtcGxhdGUgPSBlanMuY29tcGlsZShzdHIpXG5cblx0XHRcdGxhbmcgPSAnZW4nXG5cdFx0XHRpZiBjdXJyZW50X3VzZXJfaW5mby5sb2NhbGUgaXMgJ3poLWNuJ1xuXHRcdFx0XHRsYW5nID0gJ3poLUNOJ1xuXHRcdFx0XG5cdFx0XHR1dGNPZmZzZXQgPSB0aW1lem9uZW9mZnNldCAvIC02MFxuXHRcdFx0XG5cdFx0XHRmb3JtYXREYXRlID0gKGRhdGUsIGZvcm1hdGVyKSAtPlxuXHRcdFx0XHRyZXR1cm4gbW9tZW50KGRhdGUpLnV0Y09mZnNldCh1dGNPZmZzZXQpLmZvcm1hdChmb3JtYXRlcilcblxuXHRcdFx0cmV0ID0gdGVtcGxhdGUoe1xuXHRcdFx0XHRsYW5nOiBsYW5nLFxuXHRcdFx0XHRmb3JtYXREYXRlOiBmb3JtYXREYXRlLFxuXHRcdFx0XHRmb3JtX25hbWU6IGZvcm1fbmFtZSxcblx0XHRcdFx0ZmllbGRzOiBmaWVsZHMsXG5cdFx0XHRcdHRhYmxlX2ZpZWxkczogdGFibGVfZmllbGRzLFxuXHRcdFx0XHRpbnNfdG9feGxzOiBpbnNfdG9feGxzXG5cdFx0XHR9KVxuXG5cdFx0XHRmaWxlTmFtZSA9IFwiU3RlZWRPU1dvcmtmbG93X1wiICsgbW9tZW50KCkuZm9ybWF0KCdZWVlZTU1EREhIbW0nKSArIFwiLnhsc1wiXG5cdFx0XHRyZXMuc2V0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpXG5cdFx0XHRyZXMuc2V0SGVhZGVyKFwiQ29udGVudC1EaXNwb3NpdGlvblwiLCBcImF0dGFjaG1lbnQ7ZmlsZW5hbWU9XCIgKyBlbmNvZGVVUkkoZmlsZU5hbWUpKVxuXHRcdFx0cmVzLmVuZChyZXQpXG5cdFx0Y2F0Y2ggZVxuXHRcdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0XHRyZXMuZW5kKGUubWVzc2FnZSkiLCJNZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFdlYkFwcC5jb25uZWN0SGFuZGxlcnMudXNlKFwiL2FwaS93b3JrZmxvdy9leHBvcnQvaW5zdGFuY2VzXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBlanMsIGVqc0xpbnQsIGVuZF9kYXRlLCBlcnJvcl9vYmosIGZpZWxkcywgZmlsZU5hbWUsIGZsb3csIGZsb3dfaWQsIGZsb3dfaWRzLCBmb3JtLCBmb3JtX25hbWUsIGZvcm1hdERhdGUsIGluc190b194bHMsIGxhbmcsIGxhc3RfbW9udGhfZGF0ZSwgbm93LCBxdWVyeSwgcmV0LCBzZWxlY3Rvciwgc3BhY2UsIHNwYWNlX2lkLCBzdGFydF9kYXRlLCBzdHIsIHRhYmxlX2ZpZWxkcywgdGVtcGxhdGUsIHRpbWV6b25lb2Zmc2V0LCB0eXBlLCB1aWQsIHV0Y09mZnNldDtcbiAgICB0cnkge1xuICAgICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICAgIHF1ZXJ5ID0gcmVxLnF1ZXJ5O1xuICAgICAgc3BhY2VfaWQgPSBxdWVyeS5zcGFjZV9pZDtcbiAgICAgIGZsb3dfaWQgPSBxdWVyeS5mbG93X2lkO1xuICAgICAgdHlwZSA9IHBhcnNlSW50KHF1ZXJ5LnR5cGUpO1xuICAgICAgdGltZXpvbmVvZmZzZXQgPSBwYXJzZUludChxdWVyeS50aW1lem9uZW9mZnNldCk7XG4gICAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICAgIF9pZDogZmxvd19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBmb3JtOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZsb3cuZm9ybVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICdjdXJyZW50LmZpZWxkcyc6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3JtX25hbWUgPSBmb3JtLm5hbWU7XG4gICAgICBmaWVsZHMgPSBmb3JtLmN1cnJlbnQuZmllbGRzO1xuICAgICAgdGFibGVfZmllbGRzID0gbmV3IEFycmF5O1xuICAgICAgXy5lYWNoKGZvcm0uY3VycmVudC5maWVsZHMsIGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgIGlmIChmaWVsZC50eXBlID09PSBcInRhYmxlXCIpIHtcbiAgICAgICAgICByZXR1cm4gdGFibGVfZmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGluc190b194bHMgPSBuZXcgQXJyYXk7XG4gICAgICBzdGFydF9kYXRlID0gbnVsbDtcbiAgICAgIGVuZF9kYXRlID0gbnVsbDtcbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgc2VsZWN0b3IgPSB7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgZmxvdzogZmxvd19pZFxuICAgICAgfTtcbiAgICAgIHNlbGVjdG9yLnN0YXRlID0ge1xuICAgICAgICAkaW46IFtcInBlbmRpbmdcIiwgXCJjb21wbGV0ZWRcIl1cbiAgICAgIH07XG4gICAgICB1aWQgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlX2lkKTtcbiAgICAgIGlmICghc3BhY2UpIHtcbiAgICAgICAgc2VsZWN0b3Iuc3RhdGUgPSBcIm5vbmVcIjtcbiAgICAgIH1cbiAgICAgIGlmICghc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVpZCkpIHtcbiAgICAgICAgZmxvd19pZHMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0TXlBZG1pbk9yTW9uaXRvckZsb3dzKHNwYWNlX2lkLCB1aWQpO1xuICAgICAgICBpZiAoIWZsb3dfaWRzLmluY2x1ZGVzKHNlbGVjdG9yLmZsb3cpKSB7XG4gICAgICAgICAgc2VsZWN0b3IuJG9yID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdWJtaXR0ZXI6IHVpZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhcHBsaWNhbnQ6IHVpZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBpbmJveF91c2VyczogdWlkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIG91dGJveF91c2VyczogdWlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgICAgc3RhcnRfZGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSk7XG4gICAgICAgIHNlbGVjdG9yLnN1Ym1pdF9kYXRlID0ge1xuICAgICAgICAgICRndGU6IHN0YXJ0X2RhdGVcbiAgICAgICAgfTtcbiAgICAgICAgaW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG4gICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgc3VibWl0X2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDEpIHtcbiAgICAgICAgbGFzdF9tb250aF9kYXRlID0gbmV3IERhdGUobmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCAxKSAtIDEwMDAgKiA2MCAqIDYwICogMjQpO1xuICAgICAgICBzdGFydF9kYXRlID0gbmV3IERhdGUobGFzdF9tb250aF9kYXRlLmdldEZ1bGxZZWFyKCksIGxhc3RfbW9udGhfZGF0ZS5nZXRNb250aCgpLCAxKTtcbiAgICAgICAgZW5kX2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpO1xuICAgICAgICBzZWxlY3Rvci5zdWJtaXRfZGF0ZSA9IHtcbiAgICAgICAgICAkZ3RlOiBzdGFydF9kYXRlLFxuICAgICAgICAgICRsdGU6IGVuZF9kYXRlXG4gICAgICAgIH07XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xuICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAyKSB7XG4gICAgICAgIHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgIHNlbGVjdG9yLnN1Ym1pdF9kYXRlID0ge1xuICAgICAgICAgICRndGU6IHN0YXJ0X2RhdGVcbiAgICAgICAgfTtcbiAgICAgICAgaW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG4gICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgc3VibWl0X2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgICAgaW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG4gICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgc3VibWl0X2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9XG4gICAgICBlanMgPSByZXF1aXJlKCdlanMnKTtcbiAgICAgIHN0ciA9IEFzc2V0cy5nZXRUZXh0KCdzZXJ2ZXIvZWpzL2V4cG9ydF9pbnN0YW5jZXMuZWpzJyk7XG4gICAgICBlanNMaW50ID0gcmVxdWlyZSgnZWpzLWxpbnQnKTtcbiAgICAgIGVycm9yX29iaiA9IGVqc0xpbnQubGludChzdHIsIHt9KTtcbiAgICAgIGlmIChlcnJvcl9vYmopIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIj09PS9hcGkvd29ya2Zsb3cvZXhwb3J0OlwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcl9vYmopO1xuICAgICAgfVxuICAgICAgdGVtcGxhdGUgPSBlanMuY29tcGlsZShzdHIpO1xuICAgICAgbGFuZyA9ICdlbic7XG4gICAgICBpZiAoY3VycmVudF91c2VyX2luZm8ubG9jYWxlID09PSAnemgtY24nKSB7XG4gICAgICAgIGxhbmcgPSAnemgtQ04nO1xuICAgICAgfVxuICAgICAgdXRjT2Zmc2V0ID0gdGltZXpvbmVvZmZzZXQgLyAtNjA7XG4gICAgICBmb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0ZXIpIHtcbiAgICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS51dGNPZmZzZXQodXRjT2Zmc2V0KS5mb3JtYXQoZm9ybWF0ZXIpO1xuICAgICAgfTtcbiAgICAgIHJldCA9IHRlbXBsYXRlKHtcbiAgICAgICAgbGFuZzogbGFuZyxcbiAgICAgICAgZm9ybWF0RGF0ZTogZm9ybWF0RGF0ZSxcbiAgICAgICAgZm9ybV9uYW1lOiBmb3JtX25hbWUsXG4gICAgICAgIGZpZWxkczogZmllbGRzLFxuICAgICAgICB0YWJsZV9maWVsZHM6IHRhYmxlX2ZpZWxkcyxcbiAgICAgICAgaW5zX3RvX3hsczogaW5zX3RvX3hsc1xuICAgICAgfSk7XG4gICAgICBmaWxlTmFtZSA9IFwiU3RlZWRPU1dvcmtmbG93X1wiICsgbW9tZW50KCkuZm9ybWF0KCdZWVlZTU1EREhIbW0nKSArIFwiLnhsc1wiO1xuICAgICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKTtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LURpc3Bvc2l0aW9uXCIsIFwiYXR0YWNobWVudDtmaWxlbmFtZT1cIiArIGVuY29kZVVSSShmaWxlTmFtZSkpO1xuICAgICAgcmV0dXJuIHJlcy5lbmQocmV0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZSA9IGVycm9yO1xuICAgICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgIHJldHVybiByZXMuZW5kKGUubWVzc2FnZSk7XG4gICAgfVxuICB9KTtcbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ2dldCcsICcvdWYvc3BhY2UvY2hhbmdlc2V0JywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRxdWVyeSA9IHJlcS5xdWVyeVxuXHRcdGF1dGhfdG9rZW4gPSBkYi5hdXRoX3Rva2Vucy5maW5kT25lKHthdXRoX3Rva2VuOiBxdWVyeS5hdXRoX3Rva2VufSlcblxuXHRcdGlmIChub3QgYXV0aF90b2tlbikgb3IgKG5vdCBhdXRoX3Rva2VuLmVuYWJsZWQpXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yIDQwMSwgJ1VuYXV0aG9yaXplZCdcblxuXHRcdHN5bmNfdG9rZW4gPSBxdWVyeVtcInN5bmNfdG9rZW5cIl1cblx0XHRmb3JtaWRzID0gcXVlcnlbXCJmb3JtaWRzXCJdICMg6YCX5Y+36ZqU5byA5a2X56ym5LiyXG5cdFx0aXNfYWRtaW4gPSBxdWVyeVtcImlzX2FkbWluXCJdXG5cblx0XHRkYXRhID0gdXVmbG93TWFuYWdlci5nZXRfU3BhY2VDaGFuZ2VTZXQoZm9ybWlkcywgaXNfYWRtaW4sIHN5bmNfdG9rZW4pXG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0XHRjb2RlOiAyMDBcblx0XHRcdFx0ZGF0YTogZGF0YVxuXHRjYXRjaCBlXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9IiwiSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvdWYvc3BhY2UvY2hhbmdlc2V0JywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGF1dGhfdG9rZW4sIGRhdGEsIGUsIGZvcm1pZHMsIGlzX2FkbWluLCBxdWVyeSwgc3luY190b2tlbjtcbiAgdHJ5IHtcbiAgICBxdWVyeSA9IHJlcS5xdWVyeTtcbiAgICBhdXRoX3Rva2VuID0gZGIuYXV0aF90b2tlbnMuZmluZE9uZSh7XG4gICAgICBhdXRoX3Rva2VuOiBxdWVyeS5hdXRoX3Rva2VuXG4gICAgfSk7XG4gICAgaWYgKCghYXV0aF90b2tlbikgfHwgKCFhdXRoX3Rva2VuLmVuYWJsZWQpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDQwMSwgJ1VuYXV0aG9yaXplZCcpO1xuICAgIH1cbiAgICBzeW5jX3Rva2VuID0gcXVlcnlbXCJzeW5jX3Rva2VuXCJdO1xuICAgIGZvcm1pZHMgPSBxdWVyeVtcImZvcm1pZHNcIl07XG4gICAgaXNfYWRtaW4gPSBxdWVyeVtcImlzX2FkbWluXCJdO1xuICAgIGRhdGEgPSB1dWZsb3dNYW5hZ2VyLmdldF9TcGFjZUNoYW5nZVNldChmb3JtaWRzLCBpc19hZG1pbiwgc3luY190b2tlbik7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmV0cmlldmUnLCAocmVxLCByZXMsIG5leHQpIC0+XG5cdHRyeVxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcblxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pXG5cdFx0XHRyZXRyaWV2ZV9jb21tZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbJ3JldHJpZXZlX2NvbW1lbnQnXVxuXG5cdFx0XHQjIOmqjOivgWluc3RhbmNl5Li65a6h5qC45Lit54q25oCBXG5cdFx0XHQjIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVBlbmRpbmcoaW5zdGFuY2UpXG5cdFx0XHQjIOagoemqjOeUs+ivt+WNleaYr+W9k+WJjeeUqOaIt+W3suWuoeaguOi/h+eahOWNleWtkOaIluiAheW9k+WJjeeUqOaIt+aYr+aPkOS6pOS6uuaIlueUs+ivt+S6ulxuXHRcdFx0aWYgKG5vdCBpbnN0YW5jZS5vdXRib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgYW5kIChpbnN0YW5jZS5zdWJtaXR0ZXIgaXNudCBjdXJyZW50X3VzZXIgYW5kIGluc3RhbmNlLmFwcGxpY2FudCBpc250IGN1cnJlbnRfdXNlcilcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5b2T5YmN55So5oi35LiN56ym5ZCI5Y+W5Zue5p2h5Lu2JylcblxuXHRcdFx0cmV0cmlldmVfdHlwZSA9IFwiXCJcblxuXHRcdFx0dHJhY2VzID0gaW5zdGFuY2UudHJhY2VzXG5cblx0XHRcdCPojrflj5bmnIDmlrDnmoR0cmFjZe+8jCDljbPlj5blm57mraXpqqRcblx0XHRcdGxhc3RfdHJhY2UgPSBfLmxhc3QodHJhY2VzKVxuXHRcdFx0bGFzdF90cmFjZV9pZCA9IGxhc3RfdHJhY2UuX2lkXG5cdFx0XHRwcmV2aW91c190cmFjZV9pZCA9IGxhc3RfdHJhY2UucHJldmlvdXNfdHJhY2VfaWRzWzBdO1xuXHRcdFx0cHJldmlvdXNfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCAodCktPlxuXHRcdFx0XHRyZXR1cm4gdC5faWQgaXMgcHJldmlvdXNfdHJhY2VfaWRcblx0XHRcdClcblx0XHRcdHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQgPSBwcmV2aW91c190cmFjZS5zdGVwXG5cdFx0XHRwcmV2aW91c190cmFjZV9uYW1lID0gcHJldmlvdXNfdHJhY2UubmFtZVxuXHRcdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxuXHRcdFx0cHJldmlvdXNfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZClcblx0XHRcdGlmIHByZXZpb3VzX3N0ZXAuc3RlcF90eXBlIGlzIFwiY291bnRlclNpZ25cIlxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfkvJrnrb7kuI3og73lj5blm54nKVxuXG5cdFx0XHQjIOWPluWbnuatpemqpOeahOWJjeS4gOS4quatpemqpOWkhOeQhuS6uuWUr+S4gO+8iOWNs+aOkumZpOaOieS8oOmYheWSjOi9rOWPkeeahGFwcHJvdmXlkI7vvIzliankvZnnmoRhcHByb3Zl5Y+q5pyJ5LiA5Liq77yJ5bm25LiU5piv5b2T5YmN55So5oi3XG5cdFx0XHRwcmV2aW91c190cmFjZV9hcHByb3ZlcyA9IF8uZmlsdGVyIHByZXZpb3VzX3RyYWNlLmFwcHJvdmVzLCAoYSktPlxuXHRcdFx0XHRyZXR1cm4gYS50eXBlIGlzbnQgJ2NjJyBhbmQgYS50eXBlIGlzbnQgJ2Rpc3RyaWJ1dGUnIGFuZCBhLnR5cGUgaXNudCAnZm9yd2FyZCcgYW5kIFsnYXBwcm92ZWQnLCdzdWJtaXR0ZWQnLCdyZWplY3RlZCddLmluY2x1ZGVzKGEuanVkZ2UpXG5cblx0XHRcdGlmIHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzLmxlbmd0aCBpcyAxIGFuZCAocHJldmlvdXNfdHJhY2VfYXBwcm92ZXNbMF0udXNlciBpcyBjdXJyZW50X3VzZXIgb3IgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXNbMF0uaGFuZGxlciBpcyBjdXJyZW50X3VzZXIpXG5cdFx0XHRcdHJldHJpZXZlX3R5cGUgPSAnbm9ybWFsJyAjIOeUs+ivt+WNleato+W4uOa1gei9rOeahOWPluWbnu+8jOWNs+mdnuS8oOmYheWPluWbnlxuXG5cdFx0XHRpID0gdHJhY2VzLmxlbmd0aFxuXHRcdFx0cmV0cmlldmVfYXBwcm92ZSA9IHt9XG5cdFx0XHR3aGlsZSBpID4gMFxuXHRcdFx0XHRfLmVhY2ggdHJhY2VzW2ktMV0uYXBwcm92ZXMsIChhKS0+XG5cdFx0XHRcdFx0aWYgYS50eXBlIGlzICdjYycgYW5kIGEuaXNfZmluaXNoZWQgaXMgdHJ1ZSBhbmQgYS51c2VyIGlzIGN1cnJlbnRfdXNlclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfdHlwZSA9ICdjYydcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHJvdmUgPSBhXG5cblx0XHRcdFx0aWYgcmV0cmlldmVfdHlwZSBpcyAnY2MnXG5cdFx0XHRcdFx0YnJlYWtcblxuXHRcdFx0XHRpLS1cblxuXG5cdFx0XHRpZiByZXRyaWV2ZV90eXBlIGlzICdub3JtYWwnXG5cdFx0XHRcdCMg6I635Y+W5LiA5LiqZmxvd1xuXHRcdFx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXG5cdFx0XHRcdHByZXZpb3VzX3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQpXG5cdFx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2Vcblx0XHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZS5faWRcblx0XHRcdFx0b2xkX2luYm94X3VzZXJzID0gaW5zdGFuY2UuaW5ib3hfdXNlcnNcblx0XHRcdFx0c2V0T2JqID0gbmV3IE9iamVjdFxuXHRcdFx0XHRub3cgPSBuZXcgRGF0ZVxuXHRcdFx0XHRfLmVhY2ggdHJhY2VzLCAodCktPlxuXHRcdFx0XHRcdGlmIHQuX2lkIGlzIGxhc3RfdHJhY2VfaWRcblx0XHRcdFx0XHRcdGlmIG5vdCB0LmFwcHJvdmVzXG5cdFx0XHRcdFx0XHRcdHQuYXBwcm92ZXMgPSBuZXcgQXJyYXlcblx0XHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2UuYXBwcm92ZeiusOW9lVxuXHRcdFx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhcHByKS0+XG5cdFx0XHRcdFx0XHRcdGlmIGFwcHIuaXNfZmluaXNoZWQgPT0gZmFsc2UgYW5kIGFwcHIudHlwZSBpc250IFwiY2NcIlxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuc3RhcnRfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdFx0XHRcdGFwcHIuZmluaXNoX2RhdGUgPSBub3dcblx0XHRcdFx0XHRcdFx0XHRhcHByLnJlYWRfZGF0ZSA9IG5vd1xuXHRcdFx0XHRcdFx0XHRcdGFwcHIuaXNfZXJyb3IgPSBmYWxzZVxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuaXNfcmVhZCA9IHRydWVcblx0XHRcdFx0XHRcdFx0XHRhcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuanVkZ2UgPSBcInRlcm1pbmF0ZWRcIlxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuY29zdF90aW1lID0gYXBwci5maW5pc2hfZGF0ZSAtIGFwcHIuc3RhcnRfZGF0ZVxuXHRcdFx0XHRcdFx0IyDlnKjlkIzkuIB0cmFjZeS4i+aPkuWFpeWPluWbnuaTjeS9nOiAheeahGFwcHJvdmXorrDlvZVcblx0XHRcdFx0XHRcdGN1cnJlbnRfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXG5cdFx0XHRcdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHsgZmllbGRzOiB7IG5hbWU6IDEsIGZ1bGxuYW1lOiAxIH0gfSlcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIgPSBuZXcgT2JqZWN0XG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci50cmFjZSA9IHQuX2lkXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZVxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci51c2VyID0gY3VycmVudF91c2VyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWVcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvblxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZVxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5zdGFydF9kYXRlID0gbm93XG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmZpbmlzaF9kYXRlID0gbm93XG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmR1ZV9kYXRlID0gdC5kdWVfZGF0ZVxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5yZWFkX2RhdGUgPSBub3dcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuanVkZ2UgPSBcInJldHJpZXZlZFwiXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmlzX3JlYWQgPSB0cnVlXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmRlc2NyaXB0aW9uID0gcmV0cmlldmVfY29tbWVudFxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5pc19lcnJvciA9IGZhbHNlXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Rcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuY29zdF90aW1lID0gcmV0cmlldmVfYXBwci5maW5pc2hfZGF0ZSAtIHJldHJpZXZlX2FwcHIuc3RhcnRfZGF0ZVxuXHRcdFx0XHRcdFx0dC5hcHByb3Zlcy5wdXNoKHJldHJpZXZlX2FwcHIpXG5cblx0XHRcdFx0XHRcdCMg5pu05paw5b2T5YmNdHJhY2XorrDlvZVcblx0XHRcdFx0XHRcdHQuaXNfZmluaXNoZWQgPSB0cnVlXG5cdFx0XHRcdFx0XHR0LmZpbmlzaF9kYXRlID0gbm93XG5cdFx0XHRcdFx0XHR0Lmp1ZGdlID0gXCJyZXRyaWV2ZWRcIlxuXG5cdFx0XHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2XorrDlvZVcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XG5cdFx0XHRcdG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcblx0XHRcdFx0bmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZV9pZF1cblx0XHRcdFx0bmV3VHJhY2UuaXNfZmluaXNoZWQgPSBmYWxzZVxuXHRcdFx0XHRuZXdUcmFjZS5zdGVwID0gcHJldmlvdXNfdHJhY2Vfc3RlcF9pZFxuXHRcdFx0XHRuZXdUcmFjZS5uYW1lID0gcHJldmlvdXNfdHJhY2VfbmFtZVxuXHRcdFx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XG5cdFx0XHRcdG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKHByZXZpb3VzX3N0ZXAudGltZW91dF9ob3Vycywgc3BhY2VfaWQpXG5cdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cblx0XHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZS5hcHByb3Zl6K6w5b2VXG5cdFx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XG5cdFx0XHRcdG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxuXHRcdFx0XHRuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcblx0XHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZFxuXHRcdFx0XHRuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2Vcblx0XHRcdFx0bmV3QXBwcm92ZS51c2VyID0gY3VycmVudF91c2VyXG5cblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIsIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxuXHRcdFx0XHRuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lXG5cdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlciA9IGN1cnJlbnRfdXNlclxuXHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lXG5cblx0XHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXG5cdFx0XHRcdCMg6I635Y+WbmV4dF9zdGVwX3VzZXLmiYDlnKjnmoTpg6jpl6jkv6Hmga9cblx0XHRcdFx0b3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcblx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdXG5cdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl1cblx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXG5cblx0XHRcdFx0bmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93XG5cdFx0XHRcdG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBuZXdUcmFjZS5kdWVfZGF0ZVxuXHRcdFx0XHRuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZVxuXHRcdFx0XHRuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2Vcblx0XHRcdFx0bmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0XG5cblx0XHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSlcblxuXHRcdFx0XHRuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpXG5cdFx0XHRcdHNldE9iai5pbmJveF91c2VycyA9IFtjdXJyZW50X3VzZXJdXG5cblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XG5cdFx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxuXHRcdFx0XHR0cmFjZXMucHVzaChuZXdUcmFjZSlcblx0XHRcdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlc1xuXHRcdFx0XHRzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIlxuXHRcdFx0XHRzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZVxuXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHByZXZpb3VzX3RyYWNlX25hbWVcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgcHJldmlvdXNfc3RlcC5saW5lcylcblxuXHRcdFx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiBzZXRPYmp9KVxuXHRcdFx0XHRpZiByXG5cdFx0XHRcdFx0IyDnu5nooqvliKDpmaTnmoRpbmJveF91c2VycyDlkowg5b2T5YmN55So5oi3IOWPkemAgXB1c2hcblx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKVxuXHRcdFx0XHRcdF8uZWFjaChvbGRfaW5ib3hfdXNlcnMsICh1c2VyX2lkKS0+XG5cdFx0XHRcdFx0XHRpZiB1c2VyX2lkIGlzbnQgY3VycmVudF91c2VyXG5cdFx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKVxuXHRcdFx0XHRcdClcblxuXHRcdFx0XHRcdGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXG5cdFx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZXRyaWV2ZScsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKVxuXG5cdFx0XHRlbHNlIGlmIHJldHJpZXZlX3R5cGUgaXMgJ2NjJ1xuXHRcdFx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XG5cdFx0XHRcdG5vdyA9IG5ldyBEYXRlXG5cdFx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkXG5cdFx0XHRcdHRoZV90cmFjZSA9IF8uZmluZCB0cmFjZXMsICh0KS0+XG5cdFx0XHRcdFx0cmV0dXJuIHQuX2lkIGlzIHJldHJpZXZlX2FwcHJvdmUudHJhY2VcblxuXHRcdFx0XHRfLmVhY2ggdGhlX3RyYWNlLmFwcHJvdmVzLCAoYSktPlxuXHRcdFx0XHRcdGlmIGEuX2lkIGlzIHJldHJpZXZlX2FwcHJvdmUuX2lkXG5cdFx0XHRcdFx0XHRhLmlzX2ZpbmlzaGVkID0gZmFsc2Vcblx0XHRcdFx0XHRcdGEuZmluaXNoX2RhdGUgPSB1bmRlZmluZWRcblx0XHRcdFx0XHRcdGEuanVkZ2UgPSB1bmRlZmluZWRcblx0XHRcdFx0XHRcdGEuY29zdF90aW1lID0gdW5kZWZpbmVkXG5cblx0XHRcdFx0Y2NfdXNlcnMgPSBpbnN0YW5jZS5jY191c2Vyc1xuXHRcdFx0XHRjY191c2Vycy5wdXNoKGN1cnJlbnRfdXNlcilcblxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiXG5cdFx0XHRcdHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlXG5cdFx0XHRcdHNldE9iai5jY191c2VycyA9IGNjX3VzZXJzXG5cdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMnXSA9IHRoZV90cmFjZS5hcHByb3Zlc1xuXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkLCAndHJhY2VzLl9pZCc6IHJldHJpZXZlX2FwcHJvdmUudHJhY2V9LCB7JHNldDogc2V0T2JqfSlcblx0XHRcdFx0aWYgclxuXHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXG5cblx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcblx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmV0cmlldmUnLCBjdXJyZW50X3VzZXIsIFtjdXJyZW50X3VzZXJdKVxuXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YToge31cblx0Y2F0Y2ggZVxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHtlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmV0cmlldmUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGE7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIGNjX3VzZXJzLCBmbG93LCBoYW5kbGVyX2luZm8sIGksIGlucywgaW5zdGFuY2UsIGluc3RhbmNlX2lkLCBsYXN0X3RyYWNlLCBsYXN0X3RyYWNlX2lkLCBuZXdBcHByb3ZlLCBuZXdUcmFjZSwgbm93LCBvbGRfaW5ib3hfdXNlcnMsIG9yZ19pbmZvLCBwcmV2aW91c19zdGVwLCBwcmV2aW91c190cmFjZSwgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXMsIHByZXZpb3VzX3RyYWNlX2lkLCBwcmV2aW91c190cmFjZV9uYW1lLCBwcmV2aW91c190cmFjZV9zdGVwX2lkLCByLCByZXRyaWV2ZV9hcHByb3ZlLCByZXRyaWV2ZV9jb21tZW50LCByZXRyaWV2ZV90eXBlLCBzZXRPYmosIHNwYWNlX2lkLCBzcGFjZV91c2VyLCB0aGVfdHJhY2UsIHRyYWNlcztcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICByZXRyaWV2ZV9jb21tZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbJ3JldHJpZXZlX2NvbW1lbnQnXTtcbiAgICAgIGlmICgoIWluc3RhbmNlLm91dGJveF91c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSAmJiAoaW5zdGFuY2Uuc3VibWl0dGVyICE9PSBjdXJyZW50X3VzZXIgJiYgaW5zdGFuY2UuYXBwbGljYW50ICE9PSBjdXJyZW50X3VzZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+W9k+WJjeeUqOaIt+S4jeespuWQiOWPluWbnuadoeS7ticpO1xuICAgICAgfVxuICAgICAgcmV0cmlldmVfdHlwZSA9IFwiXCI7XG4gICAgICB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XG4gICAgICBsYXN0X3RyYWNlID0gXy5sYXN0KHRyYWNlcyk7XG4gICAgICBsYXN0X3RyYWNlX2lkID0gbGFzdF90cmFjZS5faWQ7XG4gICAgICBwcmV2aW91c190cmFjZV9pZCA9IGxhc3RfdHJhY2UucHJldmlvdXNfdHJhY2VfaWRzWzBdO1xuICAgICAgcHJldmlvdXNfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Ll9pZCA9PT0gcHJldmlvdXNfdHJhY2VfaWQ7XG4gICAgICB9KTtcbiAgICAgIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQgPSBwcmV2aW91c190cmFjZS5zdGVwO1xuICAgICAgcHJldmlvdXNfdHJhY2VfbmFtZSA9IHByZXZpb3VzX3RyYWNlLm5hbWU7XG4gICAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICAgICAgcHJldmlvdXNfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZCk7XG4gICAgICBpZiAocHJldmlvdXNfc3RlcC5zdGVwX3R5cGUgPT09IFwiY291bnRlclNpZ25cIikge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfkvJrnrb7kuI3og73lj5blm54nKTtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzID0gXy5maWx0ZXIocHJldmlvdXNfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgcmV0dXJuIGEudHlwZSAhPT0gJ2NjJyAmJiBhLnR5cGUgIT09ICdkaXN0cmlidXRlJyAmJiBhLnR5cGUgIT09ICdmb3J3YXJkJyAmJiBbJ2FwcHJvdmVkJywgJ3N1Ym1pdHRlZCcsICdyZWplY3RlZCddLmluY2x1ZGVzKGEuanVkZ2UpO1xuICAgICAgfSk7XG4gICAgICBpZiAocHJldmlvdXNfdHJhY2VfYXBwcm92ZXMubGVuZ3RoID09PSAxICYmIChwcmV2aW91c190cmFjZV9hcHByb3Zlc1swXS51c2VyID09PSBjdXJyZW50X3VzZXIgfHwgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXNbMF0uaGFuZGxlciA9PT0gY3VycmVudF91c2VyKSkge1xuICAgICAgICByZXRyaWV2ZV90eXBlID0gJ25vcm1hbCc7XG4gICAgICB9XG4gICAgICBpID0gdHJhY2VzLmxlbmd0aDtcbiAgICAgIHJldHJpZXZlX2FwcHJvdmUgPSB7fTtcbiAgICAgIHdoaWxlIChpID4gMCkge1xuICAgICAgICBfLmVhY2godHJhY2VzW2kgLSAxXS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgIGlmIChhLnR5cGUgPT09ICdjYycgJiYgYS5pc19maW5pc2hlZCA9PT0gdHJ1ZSAmJiBhLnVzZXIgPT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgcmV0cmlldmVfdHlwZSA9ICdjYyc7XG4gICAgICAgICAgICByZXR1cm4gcmV0cmlldmVfYXBwcm92ZSA9IGE7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJldHJpZXZlX3R5cGUgPT09ICdjYycpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBpZiAocmV0cmlldmVfdHlwZSA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KTtcbiAgICAgICAgcHJldmlvdXNfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZCk7XG4gICAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkO1xuICAgICAgICBvbGRfaW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2VycztcbiAgICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIF8uZWFjaCh0cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICB2YXIgY3VycmVudF9zcGFjZV91c2VyLCBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLCByZXRyaWV2ZV9hcHByO1xuICAgICAgICAgIGlmICh0Ll9pZCA9PT0gbGFzdF90cmFjZV9pZCkge1xuICAgICAgICAgICAgaWYgKCF0LmFwcHJvdmVzKSB7XG4gICAgICAgICAgICAgIHQuYXBwcm92ZXMgPSBuZXcgQXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYXBwcikge1xuICAgICAgICAgICAgICBpZiAoYXBwci5pc19maW5pc2hlZCA9PT0gZmFsc2UgJiYgYXBwci50eXBlICE9PSBcImNjXCIpIHtcbiAgICAgICAgICAgICAgICBhcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgICAgICAgYXBwci5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgICBhcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgICBhcHByLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYXBwci5pc19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhcHByLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcHIuY29zdF90aW1lID0gYXBwci5maW5pc2hfZGF0ZSAtIGFwcHIuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgICAgICAgIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbiwge1xuICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgICAgIGZ1bGxuYW1lOiAxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwciA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnRyYWNlID0gdC5faWQ7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5uYW1lO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5kdWVfZGF0ZSA9IHQuZHVlX2RhdGU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuanVkZ2UgPSBcInJldHJpZXZlZFwiO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5pc19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuZGVzY3JpcHRpb24gPSByZXRyaWV2ZV9jb21tZW50O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5jb3N0X3RpbWUgPSByZXRyaWV2ZV9hcHByLmZpbmlzaF9kYXRlIC0gcmV0cmlldmVfYXBwci5zdGFydF9kYXRlO1xuICAgICAgICAgICAgdC5hcHByb3Zlcy5wdXNoKHJldHJpZXZlX2FwcHIpO1xuICAgICAgICAgICAgdC5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0LmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgcmV0dXJuIHQuanVkZ2UgPSBcInJldHJpZXZlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5ld1RyYWNlID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgbmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2VfaWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICBuZXdUcmFjZS5zdGVwID0gcHJldmlvdXNfdHJhY2Vfc3RlcF9pZDtcbiAgICAgICAgbmV3VHJhY2UubmFtZSA9IHByZXZpb3VzX3RyYWNlX25hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKHByZXZpb3VzX3N0ZXAudGltZW91dF9ob3Vycywgc3BhY2VfaWQpO1xuICAgICAgICBuZXdUcmFjZS5hcHByb3ZlcyA9IFtdO1xuICAgICAgICBuZXdBcHByb3ZlID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgIG5ld0FwcHJvdmUudHJhY2UgPSBuZXdUcmFjZS5faWQ7XG4gICAgICAgIG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgbmV3QXBwcm92ZS51c2VyID0gY3VycmVudF91c2VyO1xuICAgICAgICBoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlciwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5ld0FwcHJvdmUudXNlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZTtcbiAgICAgICAgc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgICAgICBvcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhzcGFjZV91c2VyKTtcbiAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdO1xuICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBvcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICAgIG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3QXBwcm92ZS5kdWVfZGF0ZSA9IG5ld1RyYWNlLmR1ZV9kYXRlO1xuICAgICAgICBuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZTtcbiAgICAgICAgbmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICBuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgIHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnN0YW5jZS52YWx1ZXMsIG5ld0FwcHJvdmUpO1xuICAgICAgICBuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpO1xuICAgICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSBbY3VycmVudF91c2VyXTtcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbm93O1xuICAgICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIHRyYWNlcy5wdXNoKG5ld1RyYWNlKTtcbiAgICAgICAgc2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcbiAgICAgICAgc2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCI7XG4gICAgICAgIHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBwcmV2aW91c190cmFjZV9uYW1lO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gdXVmbG93TWFuYWdlci5nZXRDdXJyZW50U3RlcEF1dG9TdWJtaXQoZmxvdy50aW1lb3V0X2F1dG9fc3VibWl0LCBwcmV2aW91c19zdGVwLmxpbmVzKTtcbiAgICAgICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgICBfLmVhY2gob2xkX2luYm94X3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgICBpZiAodXNlcl9pZCAhPT0gY3VycmVudF91c2VyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmV0cmlldmUnLCBjdXJyZW50X3VzZXIsIGlucy5pbmJveF91c2Vycyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmV0cmlldmVfdHlwZSA9PT0gJ2NjJykge1xuICAgICAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgICAgaW5zdGFuY2VfaWQgPSBpbnN0YW5jZS5faWQ7XG4gICAgICAgIHRoZV90cmFjZSA9IF8uZmluZCh0cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5faWQgPT09IHJldHJpZXZlX2FwcHJvdmUudHJhY2U7XG4gICAgICAgIH0pO1xuICAgICAgICBfLmVhY2godGhlX3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgaWYgKGEuX2lkID09PSByZXRyaWV2ZV9hcHByb3ZlLl9pZCkge1xuICAgICAgICAgICAgYS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgYS5maW5pc2hfZGF0ZSA9IHZvaWQgMDtcbiAgICAgICAgICAgIGEuanVkZ2UgPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gYS5jb3N0X3RpbWUgPSB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY2NfdXNlcnMgPSBpbnN0YW5jZS5jY191c2VycztcbiAgICAgICAgY2NfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpO1xuICAgICAgICBzZXRPYmoubW9kaWZpZWQgPSBub3c7XG4gICAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgc2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCI7XG4gICAgICAgIHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlO1xuICAgICAgICBzZXRPYmouY2NfdXNlcnMgPSBjY191c2VycztcbiAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3ZlcyddID0gdGhlX3RyYWNlLmFwcHJvdmVzO1xuICAgICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZCxcbiAgICAgICAgICAndHJhY2VzLl9pZCc6IHJldHJpZXZlX2FwcHJvdmUudHJhY2VcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmV0cmlldmUnLCBjdXJyZW50X3VzZXIsIFtjdXJyZW50X3VzZXJdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvZm9yd2FyZCcsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuXHR0cnkge1xuXHRcdHZhciBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuXHRcdHZhciBjdXJyZW50X3VzZXJfaWQgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG5cblx0XHR2YXIgaGFzaERhdGEgPSByZXEuYm9keTtcblx0XHR2YXIgaW5zdGFuY2VfaWQgPSBoYXNoRGF0YS5pbnN0YW5jZV9pZDtcblx0XHR2YXIgc3BhY2VfaWQgPSBoYXNoRGF0YS5zcGFjZV9pZDtcblx0XHR2YXIgZmxvd19pZCA9IGhhc2hEYXRhLmZsb3dfaWQ7XG5cdFx0dmFyIGhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCA9IGhhc2hEYXRhLmhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudDtcblx0XHR2YXIgZGVzY3JpcHRpb24gPSBoYXNoRGF0YS5kZXNjcmlwdGlvbjtcblx0XHR2YXIgaXNGb3J3YXJkQXR0YWNobWVudHMgPSBoYXNoRGF0YS5pc0ZvcndhcmRBdHRhY2htZW50cztcblx0XHR2YXIgc2VsZWN0ZWRVc2VycyA9IGhhc2hEYXRhLnNlbGVjdGVkVXNlcnM7XG5cdFx0dmFyIGFjdGlvbl90eXBlID0gaGFzaERhdGEuYWN0aW9uX3R5cGU7XG5cdFx0dmFyIHJlbGF0ZWQgPSBoYXNoRGF0YS5yZWxhdGVkO1xuXHRcdHZhciBmcm9tX2FwcHJvdmVfaWQgPSBoYXNoRGF0YS5mcm9tX2FwcHJvdmVfaWQ7XG5cblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKTtcblx0XHRjaGVjayhzcGFjZV9pZCwgU3RyaW5nKTtcblx0XHRjaGVjayhmbG93X2lkLCBTdHJpbmcpO1xuXHRcdGNoZWNrKGhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCwgQm9vbGVhbik7XG5cdFx0Y2hlY2soZGVzY3JpcHRpb24sIFN0cmluZyk7XG5cdFx0Y2hlY2soaXNGb3J3YXJkQXR0YWNobWVudHMsIEJvb2xlYW4pO1xuXHRcdGNoZWNrKHNlbGVjdGVkVXNlcnMsIEFycmF5KTtcblx0XHRjaGVjayhhY3Rpb25fdHlwZSwgTWF0Y2guT25lT2YoJ2ZvcndhcmQnLCAnZGlzdHJpYnV0ZScpKTtcblxuXHRcdGlmIChhY3Rpb25fdHlwZSA9PSBcImRpc3RyaWJ1dGVcIilcblx0XHRcdGNoZWNrKGZyb21fYXBwcm92ZV9pZCwgU3RyaW5nKTtcblxuXHRcdHZhciBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZCk7XG5cdFx0dmFyIG9sZF9zcGFjZV9pZCA9IGlucy5zcGFjZTtcblxuXHRcdHZhciBmbG93ID0gZGIuZmxvd3MuZmluZE9uZShmbG93X2lkKTtcblxuXHRcdHZhciBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlX2lkKTtcblxuXHRcdGlmICghaW5zIHx8ICFmbG93IHx8ICFzcGFjZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcigncGFyYW1zIGVycm9yIScsICdyZWNvcmQgbm90IGV4aXN0cyEnKTtcblx0XHR9XG5cblx0XHR2YXIgZm9yd2FyZF91c2VycyA9IG5ldyBBcnJheTtcblx0XHRpZiAoXy5pc0VtcHR5KHNlbGVjdGVkVXNlcnMpKSB7XG5cdFx0XHRmb3J3YXJkX3VzZXJzID0gW2N1cnJlbnRfdXNlcl9pZF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvcndhcmRfdXNlcnMgPSBzZWxlY3RlZFVzZXJzO1xuXHRcdH1cblxuXHRcdC8vIOagoemqjOWIhuWPkeWvueixoeaYr+WQpuacieWIhuWPkea1geeoi+eahOaPkOS6pOadg+mZkFxuXHRcdHZhciBub19wZXJtaXNzaW9uX3VzZXJfaWRzID0gbmV3IEFycmF5KCk7XG5cdFx0Xy5lYWNoKGZvcndhcmRfdXNlcnMsIGZ1bmN0aW9uICh1aWQpIHtcblx0XHRcdHZhciBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhmbG93X2lkLCB1aWQpO1xuXHRcdFx0aWYgKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkZFwiKSkge1xuXHRcdFx0XHQvLyB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuivpeeUs+ivt+S6uuayoeacieaPkOS6pOatpOeUs+ivt+WNleeahOadg+mZkOOAglwiKVxuXHRcdFx0XHRub19wZXJtaXNzaW9uX3VzZXJfaWRzLnB1c2godWlkKTtcblx0XHRcdH1cblx0XHR9KVxuXHRcdGlmICghXy5pc0VtcHR5KG5vX3Blcm1pc3Npb25fdXNlcl9pZHMpKSB7XG5cdFx0XHR2YXIgbm9fcGVybWlzc2lvbl91c2Vyc19uYW1lID0gbmV3IEFycmF5KCk7XG5cdFx0XHRkYi51c2Vycy5maW5kKHtcblx0XHRcdFx0X2lkOiB7XG5cdFx0XHRcdFx0JGluOiBub19wZXJtaXNzaW9uX3VzZXJfaWRzXG5cdFx0XHRcdH1cblx0XHRcdH0sIHtcblx0XHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdFx0bmFtZTogMVxuXHRcdFx0XHR9XG5cdFx0XHR9KS5mb3JFYWNoKGZ1bmN0aW9uICh1KSB7XG5cdFx0XHRcdG5vX3Blcm1pc3Npb25fdXNlcnNfbmFtZS5wdXNoKHUubmFtZSk7XG5cdFx0XHR9KTtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ25vX3Blcm1pc3Npb24nLCBcIuivpeaPkOS6pOS6uuayoeacieaPkOS6pOatpOeUs+ivt+WNleeahOadg+mZkOOAglwiLCBub19wZXJtaXNzaW9uX3VzZXJzX25hbWUuam9pbignLCcpKVxuXHRcdH1cblxuXHRcdHZhciBuZXdfaW5zX2lkcyA9IG5ldyBBcnJheTtcblxuXHRcdHZhciBjdXJyZW50X3RyYWNlID0gbnVsbDtcblx0XHRpZiAoYWN0aW9uX3R5cGUgPT0gXCJkaXN0cmlidXRlXCIpIHtcblx0XHRcdF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRpZiAoIWN1cnJlbnRfdHJhY2UpIHtcblx0XHRcdFx0XHRfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24gKGEpIHtcblx0XHRcdFx0XHRcdGlmICghY3VycmVudF90cmFjZSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoYS5faWQgPT0gZnJvbV9hcHByb3ZlX2lkKVxuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRfdHJhY2UgPSB0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnJlbnRfdHJhY2UgPSBfLmxhc3QoaW5zLnRyYWNlcyk7XG5cdFx0fVxuXHRcdHZhciBjdXJyZW50X3RyYWNlX2lkID0gY3VycmVudF90cmFjZS5faWQ7XG5cdFx0dmFyIGZvcndhcmRfYXBwcm92ZXMgPSBbXTtcblx0XHR2YXIgZnJvbV91c2VyX25hbWUgPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcl9pZCwge1xuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdG5hbWU6IDFcblx0XHRcdH1cblx0XHR9KS5uYW1lXG5cdFx0dmFyIHNldF9vYmogPSBuZXcgT2JqZWN0O1xuXG5cdFx0Ly8g6K6h566XdmFsdWVzXG5cdFx0dmFyIG9sZF92YWx1ZXMgPSBpbnMudmFsdWVzLFxuXHRcdFx0bmV3X3ZhbHVlcyA9IHt9O1xuXHRcdHZhciBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmbG93LmZvcm0pO1xuXHRcdHZhciBmaWVsZHMgPSBmb3JtLmN1cnJlbnQuZmllbGRzIHx8IFtdO1xuXG5cdFx0dmFyIG9sZF9mb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnMuZm9ybSk7XG5cdFx0dmFyIG9sZF9mb3JtX3ZlcnNpb24gPSBpbnMuZm9ybV92ZXJzaW9uLFxuXHRcdFx0b2xkX2ZpZWxkcyA9IFtdLFxuXHRcdFx0Y29tbW9uX2ZpZWxkcyA9IFtdO1xuXG5cdFx0dmFyIHNlbGVjdF90b19pbnB1dF9maWVsZHMgPSBbXTtcblxuXHRcdGlmIChvbGRfZm9ybS5jdXJyZW50Ll9pZCA9PSBvbGRfZm9ybV92ZXJzaW9uKSB7XG5cdFx0XHRvbGRfZmllbGRzID0gb2xkX2Zvcm0uY3VycmVudC5maWVsZHM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChvbGRfZm9ybS5oaXN0b3J5cykge1xuXHRcdFx0XHRvbGRfZm9ybS5oaXN0b3J5cy5mb3JFYWNoKGZ1bmN0aW9uIChoKSB7XG5cdFx0XHRcdFx0aWYgKGguX2lkID09IG9sZF9mb3JtX3ZlcnNpb24pXG5cdFx0XHRcdFx0XHRvbGRfZmllbGRzID0gaC5maWVsZHM7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG5cdFx0XHR2YXIgZXhpc3RzX2ZpZWxkID0gXy5maW5kKG9sZF9maWVsZHMsIGZ1bmN0aW9uIChmKSB7XG5cdFx0XHRcdHJldHVybiBmLnR5cGUgPT0gZmllbGQudHlwZSAmJiBmLmNvZGUgPT0gZmllbGQuY29kZTtcblx0XHRcdH0pXG5cdFx0XHRpZiAoZXhpc3RzX2ZpZWxkKVxuXHRcdFx0XHRjb21tb25fZmllbGRzLnB1c2goZmllbGQpO1xuXHRcdFx0dmFyIHNlbGVjdF9pbnB1dF9maWVsZCA9IF8uZmluZChvbGRfZmllbGRzLCBmdW5jdGlvbiAoZikge1xuXHRcdFx0XHRyZXR1cm4gZi50eXBlID09ICdzZWxlY3QnICYmIGZpZWxkLnR5cGUgPT0gJ2lucHV0JyAmJiBmLmNvZGUgPT0gZmllbGQuY29kZTtcblx0XHRcdH0pXG5cdFx0XHRpZiAoc2VsZWN0X2lucHV0X2ZpZWxkKVxuXHRcdFx0XHRzZWxlY3RfdG9faW5wdXRfZmllbGRzLnB1c2goc2VsZWN0X2lucHV0X2ZpZWxkKTtcblx0XHR9KVxuXG5cdFx0c2VsZWN0X3RvX2lucHV0X2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkge1xuXHRcdFx0aWYgKG9sZF92YWx1ZXNbZmllbGQuY29kZV0pIHtcblx0XHRcdFx0bmV3X3ZhbHVlc1tmaWVsZC5jb2RlXSA9IG9sZF92YWx1ZXNbZmllbGQuY29kZV07XG5cdFx0XHR9XG5cdFx0fSlcblxuXHRcdGNvbW1vbl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcblx0XHRcdGlmIChmaWVsZC50eXBlID09ICdzZWN0aW9uJykge1xuXHRcdFx0XHRpZiAoZmllbGQuZmllbGRzKSB7XG5cdFx0XHRcdFx0ZmllbGQuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcblx0XHRcdFx0XHRcdC8vIOi3qOW3peS9nOWMuui9rOWPkeS4jeWkjeWItumAieS6uumAiee7hFxuXHRcdFx0XHRcdFx0aWYgKFsnZ3JvdXAnLCAndXNlciddLmluY2x1ZGVzKGYudHlwZSkgJiYgb2xkX3NwYWNlX2lkICE9IHNwYWNlX2lkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhciBrZXkgPSBmLmNvZGU7XG5cdFx0XHRcdFx0XHR2YXIgb2xkX3YgPSBvbGRfdmFsdWVzW2tleV07XG5cdFx0XHRcdFx0XHRpZiAob2xkX3YpIHtcblx0XHRcdFx0XHRcdFx0Ly8g5qCh6aqMIOWNlemAie+8jOWkmumAie+8jOS4i+aLieahhiDlrZfmrrXlgLzmmK/lkKblnKjmlrDooajljZXlr7nlupTlrZfmrrXnmoTlj6/pgInlgLzojIPlm7TlhoVcblx0XHRcdFx0XHRcdFx0aWYgKGYudHlwZSA9PSAnc2VsZWN0JyB8fCBmLnR5cGUgPT0gJ3JhZGlvJykge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZi5vcHRpb25zLnNwbGl0KCdcXG4nKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaW5jbHVkZXMob2xkX3YpKVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKGYudHlwZSA9PSAnbXVsdGlTZWxlY3QnKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmLm9wdGlvbnMuc3BsaXQoJ1xcbicpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciBvbGRfbXVsdGlTZWxlY3RlZCA9IG9sZF92LnNwbGl0KCcsJyk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIG5ld19tdWx0aVNlbGVjdGVkID0gXy5pbnRlcnNlY3Rpb24ob3B0aW9ucywgb2xkX211bHRpU2VsZWN0ZWQpO1xuXHRcdFx0XHRcdFx0XHRcdG9sZF92ID0gbmV3X211bHRpU2VsZWN0ZWQuam9pbignLCcpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0bmV3X3ZhbHVlc1trZXldID0gb2xkX3Y7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChmaWVsZC50eXBlID09ICd0YWJsZScpIHtcblx0XHRcdFx0aWYgKCFfLmlzRW1wdHkob2xkX3ZhbHVlc1tmaWVsZC5jb2RlXSkpIHtcblx0XHRcdFx0XHRuZXdfdmFsdWVzW2ZpZWxkLmNvZGVdID0gbmV3IEFycmF5O1xuXHRcdFx0XHRcdG9sZF92YWx1ZXNbZmllbGQuY29kZV0uZm9yRWFjaChmdW5jdGlvbiAob2xkX3RhYmxlX3Jvd192YWx1ZXMpIHtcblx0XHRcdFx0XHRcdHZhciBuZXdfdGFibGVfcm93X3ZhbHVlcyA9IHt9O1xuXG5cdFx0XHRcdFx0XHRpZiAoIV8uaXNFbXB0eShmaWVsZC5maWVsZHMpKSB7XG5cdFx0XHRcdFx0XHRcdGZpZWxkLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8g6Leo5bel5L2c5Yy66L2s5Y+R5LiN5aSN5Yi26YCJ5Lq66YCJ57uEXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFsnZ3JvdXAnLCAndXNlciddLmluY2x1ZGVzKGYudHlwZSkgJiYgb2xkX3NwYWNlX2lkICE9IHNwYWNlX2lkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHZhciBrZXkgPSBmLmNvZGU7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9sZF92ID0gb2xkX3RhYmxlX3Jvd192YWx1ZXNba2V5XTtcblx0XHRcdFx0XHRcdFx0XHRpZiAob2xkX3YpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIOagoemqjCDljZXpgInvvIzlpJrpgInvvIzkuIvmi4nmoYYg5a2X5q615YC85piv5ZCm5Zyo5paw6KGo5Y2V5a+55bqU5a2X5q6155qE5Y+v6YCJ5YC86IyD5Zu05YaFXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZi50eXBlID09ICdzZWxlY3QnIHx8IGYudHlwZSA9PSAncmFkaW8nKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZi5vcHRpb25zLnNwbGl0KCdcXG4nKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmluY2x1ZGVzKG9sZF92KSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChmLnR5cGUgPT0gJ211bHRpU2VsZWN0Jykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb3B0aW9ucyA9IGYub3B0aW9ucy5zcGxpdCgnXFxuJyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBvbGRfbXVsdGlTZWxlY3RlZCA9IG9sZF92LnNwbGl0KCcsJyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBuZXdfbXVsdGlTZWxlY3RlZCA9IF8uaW50ZXJzZWN0aW9uKG9wdGlvbnMsIG9sZF9tdWx0aVNlbGVjdGVkKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b2xkX3YgPSBuZXdfbXVsdGlTZWxlY3RlZC5qb2luKCcsJyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdG5ld190YWJsZV9yb3dfdmFsdWVzW2tleV0gPSBvbGRfdjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChvbGRfdGFibGVfcm93X3ZhbHVlcy5faWQpIHtcblx0XHRcdFx0XHRcdFx0bmV3X3RhYmxlX3Jvd192YWx1ZXMuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCFfLmlzRW1wdHkobmV3X3RhYmxlX3Jvd192YWx1ZXMpKSB7XG5cdFx0XHRcdFx0XHRcdG5ld192YWx1ZXNbZmllbGQuY29kZV0ucHVzaChuZXdfdGFibGVfcm93X3ZhbHVlcyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8g6Leo5bel5L2c5Yy66L2s5Y+R5LiN5aSN5Yi26YCJ5Lq66YCJ57uEXG5cdFx0XHRcdGlmIChbJ2dyb3VwJywgJ3VzZXInXS5pbmNsdWRlcyhmaWVsZC50eXBlKSAmJiBvbGRfc3BhY2VfaWQgIT0gc3BhY2VfaWQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGtleSA9IGZpZWxkLmNvZGU7XG5cdFx0XHRcdHZhciBvbGRfdiA9IG9sZF92YWx1ZXNba2V5XTtcblx0XHRcdFx0aWYgKG9sZF92KSB7XG5cdFx0XHRcdFx0Ly8g5qCh6aqMIOWNlemAie+8jOWkmumAie+8jOS4i+aLieahhiDlrZfmrrXlgLzmmK/lkKblnKjmlrDooajljZXlr7nlupTlrZfmrrXnmoTlj6/pgInlgLzojIPlm7TlhoVcblx0XHRcdFx0XHRpZiAoZmllbGQudHlwZSA9PSAnc2VsZWN0JyB8fCBmaWVsZC50eXBlID09ICdyYWRpbycpIHtcblx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZmllbGQub3B0aW9ucy5zcGxpdCgnXFxuJyk7XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaW5jbHVkZXMob2xkX3YpKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGZpZWxkLnR5cGUgPT0gJ211bHRpU2VsZWN0Jykge1xuXHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmaWVsZC5vcHRpb25zLnNwbGl0KCdcXG4nKTtcblx0XHRcdFx0XHRcdHZhciBvbGRfbXVsdGlTZWxlY3RlZCA9IG9sZF92LnNwbGl0KCcsJyk7XG5cdFx0XHRcdFx0XHR2YXIgbmV3X211bHRpU2VsZWN0ZWQgPSBfLmludGVyc2VjdGlvbihvcHRpb25zLCBvbGRfbXVsdGlTZWxlY3RlZCk7XG5cdFx0XHRcdFx0XHRvbGRfdiA9IG5ld19tdWx0aVNlbGVjdGVkLmpvaW4oJywnKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRuZXdfdmFsdWVzW2tleV0gPSBvbGRfdjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSlcblxuXHRcdC8v5aaC5p6c5piv5YiG5Y+R77yM5YiZdmFsdWXkuK3nmoRyZWNvcmRfbmVlZOOAgUZPTkRTSUTkuI3pnIDopoHliIblj5HliLDmlrDnlLPor7fljZXkuK1cblx0XHRpZiAoYWN0aW9uX3R5cGUgPT09ICdkaXN0cmlidXRlJykge1xuXHRcdFx0ZGVsZXRlIG5ld192YWx1ZXMucmVjb3JkX25lZWQ7XG5cdFx0XHRkZWxldGUgbmV3X3ZhbHVlcy5GT05EU0lEO1xuXHRcdH1cblxuXHRcdC8vIOiuoeeul+eUs+ivt+WNleagh+mimFxuXHRcdHZhciBpbnN0YW5jZV9uYW1lID0gXCJcIjtcblx0XHR2YXIgbmFtZV9mb3J1bWxhID0gZm9ybS5jdXJyZW50Lm5hbWVfZm9ydW1sYTtcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgaXNjcmlwdCA9IG5hbWVfZm9ydW1sYS5yZXBsYWNlKC9cXHsvZywgXCIobmV3X3ZhbHVlc1snXCIpLnJlcGxhY2UoL1xcfS9nLCBcIiddIHx8ICcnKVwiKTtcblx0XHRcdFx0dmFyIHJldiA9IGV2YWwoaXNjcmlwdCk7XG5cdFx0XHRcdGluc3RhbmNlX25hbWUgPSByZXYgfHwgZmxvdy5uYW1lO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignY2FjdWxhdGVfaW5zdGFuY2VfbmFtZScsIFwi6K6h566X55Sz6K+35Y2V5qCH6aKY5Ye66ZSZ6K+35qOA5p+l6KGo5Y2V5qCH6aKY6ISa5pys44CCXCIpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbnN0YW5jZV9uYW1lID0gZmxvdy5uYW1lO1xuXHRcdH1cblxuXHRcdC8vIGluc3RhbmNl5Lit6K6w5b2V5b2T5YmN5q2l6aqk5ZCN56ewICMxMzE0XG5cdFx0dmFyIHN0YXJ0X3N0ZXAgPSBfLmZpbmQoZmxvdy5jdXJyZW50LnN0ZXBzLCBmdW5jdGlvbiAoc3RlcCkge1xuXHRcdFx0cmV0dXJuIHN0ZXAuc3RlcF90eXBlID09ICdzdGFydCc7XG5cdFx0fSlcblxuXHRcdC8vIOaWsOW7uueUs+ivt+WNleaXtu+8jGluc3RhbmNlc+iusOW9lea1geeoi+WQjeensOOAgea1geeoi+WIhuexu+WQjeensCAjMTMxM1xuXHRcdHZhciBjYXRlZ29yeV9uYW1lID0gXCJcIjtcblx0XHRpZiAoZm9ybS5jYXRlZ29yeSkge1xuXHRcdFx0dmFyIGNhdGVnb3J5ID0gdXVmbG93TWFuYWdlci5nZXRDYXRlZ29yeShmb3JtLmNhdGVnb3J5KTtcblx0XHRcdGlmIChjYXRlZ29yeSlcblx0XHRcdFx0Y2F0ZWdvcnlfbmFtZSA9IGNhdGVnb3J5Lm5hbWU7XG5cdFx0fVxuXG5cdFx0Xy5lYWNoKGZvcndhcmRfdXNlcnMsIGZ1bmN0aW9uICh1c2VyX2lkKSB7XG5cblx0XHRcdHZhciB1c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHVzZXJfaWQpO1xuXG5cdFx0XHR2YXIgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXG5cdFx0XHRcdHVzZXI6IHVzZXJfaWRcblx0XHRcdH0sIHtcblx0XHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdFx0b3JnYW5pemF0aW9uOiAxXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0dmFyIHNwYWNlX3VzZXJfb3JnX2luZm8gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoe1xuXHRcdFx0XHRfaWQ6IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0dmFyIGluc19vYmogPSB7fTtcblxuXHRcdFx0dmFyIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgdXNlcl9pZCk7XG5cdFx0XHR2YXIgaGFuZGxlcl9pZCA9IHVzZXJfaWQ7XG5cdFx0XHR2YXIgaGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvO1xuXHRcdFx0dmFyIGhhbmRsZXJfc3BhY2VfdXNlciA9IHNwYWNlX3VzZXI7XG5cdFx0XHR2YXIgaGFuZGxlcl9vcmdfaW5mbyA9IHNwYWNlX3VzZXJfb3JnX2luZm87XG5cdFx0XHRpZiAoYWdlbnQpIHtcblx0XHRcdFx0aGFuZGxlcl9pZCA9IGFnZW50O1xuXHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGFnZW50KTtcblx0XHRcdFx0aGFuZGxlcl9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGFnZW50KTtcblx0XHRcdFx0aGFuZGxlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhoYW5kbGVyX3NwYWNlX3VzZXIpO1xuXHRcdFx0fVxuXHRcdFx0aW5zX29iai5faWQgPSBkYi5pbnN0YW5jZXMuX21ha2VOZXdJRCgpO1xuXHRcdFx0aW5zX29iai5zcGFjZSA9IHNwYWNlX2lkO1xuXHRcdFx0aW5zX29iai5mbG93ID0gZmxvd19pZDtcblx0XHRcdGluc19vYmouZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50Ll9pZDtcblx0XHRcdGluc19vYmouZm9ybSA9IGZsb3cuZm9ybTtcblx0XHRcdGluc19vYmouZm9ybV92ZXJzaW9uID0gZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcblx0XHRcdGluc19vYmoubmFtZSA9IGluc3RhbmNlX25hbWU7XG5cdFx0XHRpbnNfb2JqLnN1Ym1pdHRlciA9IGhhbmRsZXJfaWQ7XG5cdFx0XHRpbnNfb2JqLnN1Ym1pdHRlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudCA9IHVzZXJfaWQ7XG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudF9uYW1lID0gdXNlcl9pbmZvLm5hbWU7XG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudF9vcmdhbml6YXRpb24gPSBzcGFjZV91c2VyLm9yZ2FuaXphdGlvbjtcblx0XHRcdGluc19vYmouYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mby5uYW1lO1xuXHRcdFx0aW5zX29iai5hcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mby5mdWxsbmFtZTtcblx0XHRcdGluc19vYmouc3RhdGUgPSBcImRyYWZ0XCI7XG5cdFx0XHRpbnNfb2JqLmNvZGUgPSBcIlwiO1xuXHRcdFx0aW5zX29iai5pc19hcmNoaXZlZCA9IGZhbHNlO1xuXHRcdFx0aW5zX29iai5pc19kZWxldGVkID0gZmFsc2U7XG5cdFx0XHRpbnNfb2JqLmNyZWF0ZWQgPSBub3c7XG5cdFx0XHRpbnNfb2JqLmNyZWF0ZWRfYnkgPSBjdXJyZW50X3VzZXJfaWQ7XG5cdFx0XHRpbnNfb2JqLm1vZGlmaWVkID0gbm93O1xuXHRcdFx0aW5zX29iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcblx0XHRcdGluc19vYmouaW5ib3hfdXNlcnMgPSBbaGFuZGxlcl9pZF07XG5cdFx0XHRpbnNfb2JqLnZhbHVlcyA9IG5ld192YWx1ZXM7XG5cdFx0XHRpZiAoYWN0aW9uX3R5cGUgPT0gJ2Rpc3RyaWJ1dGUnKSB7XG5cdFx0XHRcdC8vIOino+WGs+WkmuasoeWIhuWPkeeci+S4jeWIsOato+aWh+OAgemZhOS7tumXrumimFxuXHRcdFx0XHRpZiAoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSkge1xuXHRcdFx0XHRcdGluc19vYmouZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlID0gaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpbnNfb2JqLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluc19vYmouZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcyA9IF8uY2xvbmUoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMpIHx8IFtdO1xuXHRcdFx0XHRpbnNfb2JqLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMucHVzaChpbnN0YW5jZV9pZCk7XG5cblx0XHRcdFx0aWYgKHJlbGF0ZWQpIHtcblx0XHRcdFx0XHRpbnNfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gW2luc3RhbmNlX2lkXVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoYWN0aW9uX3R5cGUgPT0gJ2ZvcndhcmQnKSB7XG5cdFx0XHRcdGluc19vYmouZm9yd2FyZF9mcm9tX2luc3RhbmNlID0gaW5zdGFuY2VfaWRcblx0XHRcdH1cblxuXHRcdFx0Ly8g5paw5bu6VHJhY2Vcblx0XHRcdHZhciB0cmFjZV9vYmogPSB7fTtcblx0XHRcdHRyYWNlX29iai5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuXHRcdFx0dHJhY2Vfb2JqLmluc3RhbmNlID0gaW5zX29iai5faWQ7XG5cdFx0XHR0cmFjZV9vYmouaXNfZmluaXNoZWQgPSBmYWxzZTtcblxuXHRcdFx0Ly8g5b2T5YmN5pyA5paw54mIZmxvd+S4reW8gOWni+iKgueCueeahHN0ZXBfaWRcblx0XHRcdHZhciBzdGVwX2lkLCBzdGVwX25hbWUsIGNhbl9lZGl0X21haW5fYXR0YWNoLCBjYW5fZWRpdF9ub3JtYWxfYXR0YWNoO1xuXHRcdFx0Zmxvdy5jdXJyZW50LnN0ZXBzLmZvckVhY2goZnVuY3Rpb24gKHN0ZXApIHtcblx0XHRcdFx0aWYgKHN0ZXAuc3RlcF90eXBlID09IFwic3RhcnRcIikge1xuXHRcdFx0XHRcdHN0ZXBfaWQgPSBzdGVwLl9pZDtcblx0XHRcdFx0XHRzdGVwX25hbWUgPSBzdGVwLm5hbWU7XG5cdFx0XHRcdFx0Y2FuX2VkaXRfbWFpbl9hdHRhY2ggPSBzdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoO1xuXHRcdFx0XHRcdGNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPSBzdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2g7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHR0cmFjZV9vYmouc3RlcCA9IHN0ZXBfaWQ7XG5cdFx0XHR0cmFjZV9vYmouc3RhcnRfZGF0ZSA9IG5vdztcblx0XHRcdHRyYWNlX29iai5uYW1lID0gc3RlcF9uYW1lO1xuXG5cdFx0XHQvLyDmlrDlu7pBcHByb3ZlXG5cdFx0XHR2YXIgYXBwcl9vYmogPSB7fTtcblx0XHRcdGFwcHJfb2JqLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG5cdFx0XHRhcHByX29iai5pbnN0YW5jZSA9IGluc19vYmouX2lkO1xuXHRcdFx0YXBwcl9vYmoudHJhY2UgPSB0cmFjZV9vYmouX2lkO1xuXHRcdFx0YXBwcl9vYmouaXNfZmluaXNoZWQgPSBmYWxzZTtcblx0XHRcdGFwcHJfb2JqLnVzZXIgPSB1c2VyX2lkO1xuXHRcdFx0YXBwcl9vYmoudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWU7XG5cdFx0XHRhcHByX29iai5oYW5kbGVyID0gaGFuZGxlcl9pZDtcblx0XHRcdGFwcHJfb2JqLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xuXHRcdFx0YXBwcl9vYmouaGFuZGxlcl9vcmdhbml6YXRpb24gPSBoYW5kbGVyX3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuXHRcdFx0YXBwcl9vYmouaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGhhbmRsZXJfb3JnX2luZm8ubmFtZTtcblx0XHRcdGFwcHJfb2JqLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gaGFuZGxlcl9vcmdfaW5mby5mdWxsbmFtZTtcblx0XHRcdGFwcHJfb2JqLnR5cGUgPSBcImRyYWZ0XCI7XG5cdFx0XHRhcHByX29iai5zdGFydF9kYXRlID0gbm93O1xuXHRcdFx0YXBwcl9vYmoucmVhZF9kYXRlID0gbm93O1xuXHRcdFx0YXBwcl9vYmouaXNfcmVhZCA9IGZhbHNlO1xuXHRcdFx0YXBwcl9vYmouaXNfZXJyb3IgPSBmYWxzZTtcblxuXHRcdFx0YXBwcl9vYmoudmFsdWVzID0gbmV3X3ZhbHVlcztcblxuXHRcdFx0aWYgKGFnZW50KSB7XG5cdFx0XHRcdGFwcHJfb2JqLmFnZW50ID0gYWdlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHRyYWNlX29iai5hcHByb3ZlcyA9IFthcHByX29ial07XG5cdFx0XHRpbnNfb2JqLnRyYWNlcyA9IFt0cmFjZV9vYmpdO1xuXG5cdFx0XHRpZiAoZmxvdy5hdXRvX3JlbWluZCA9PSB0cnVlKVxuXHRcdFx0XHRpbnNfb2JqLmF1dG9fcmVtaW5kID0gdHJ1ZTtcblxuXHRcdFx0aW5zX29iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHN0YXJ0X3N0ZXAubmFtZTtcblxuXHRcdFx0aW5zX29iai5mbG93X25hbWUgPSBmbG93Lm5hbWU7XG5cdFx0XHRpZiAoY2F0ZWdvcnlfbmFtZSkge1xuXHRcdFx0XHRpbnNfb2JqLmNhdGVnb3J5X25hbWUgPSBjYXRlZ29yeS5uYW1lO1xuXHRcdFx0XHRpbnNfb2JqLmNhdGVnb3J5ID0gY2F0ZWdvcnkuX2lkO1xuXHRcdFx0fVxuXG5cdFx0XHRuZXdfaW5zX2lkID0gZGIuaW5zdGFuY2VzLmluc2VydChpbnNfb2JqKTtcblxuXHRcdFx0Ly8g5aSN5Yi26ZmE5Lu2XG5cdFx0XHR2YXIgY29sbGVjdGlvbiA9IGNmcy5pbnN0YW5jZXM7XG5cblx0XHRcdC8v5bCG5Y6f6KGo5Y2V5YaF5a655a2Y5YKo5Li656ys5LiA5Liq6ZmE5Lu2XG5cdFx0XHRpZiAoaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50KSB7XG5cdFx0XHRcdC8vIHRyeSB7XG5cblx0XHRcdFx0aW5zdGFuY2VIdG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyX2luZm8sIHNwYWNlX2lkLCBpbnMsIHtcblx0XHRcdFx0XHRhYnNvbHV0ZTogdHJ1ZVxuXHRcdFx0XHR9KVxuXHRcdFx0XHR2YXIgaW5zdGFuY2VGaWxlID0gbmV3IEZTLkZpbGUoKTtcblx0XHRcdFx0aW5zdGFuY2VGaWxlLmF0dGFjaERhdGEoQnVmZmVyLmZyb20oaW5zdGFuY2VIdG1sLCBcInV0Zi04XCIpLCB7XG5cdFx0XHRcdFx0dHlwZTogXCJ0ZXh0L2h0bWxcIlxuXHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoZXJyb3IuZXJyb3IsIGVycm9yLnJlYXNvbik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aW5zdGFuY2VGaWxlLm5hbWUoaW5zLm5hbWUgKyBcIi5odG1sXCIpO1xuXHRcdFx0XHRcdGluc3RhbmNlRmlsZS5zaXplKGluc3RhbmNlSHRtbC5sZW5ndGgpO1xuXG5cdFx0XHRcdFx0dmFyIG1ldGFkYXRhID0ge1xuXHRcdFx0XHRcdFx0b3duZXI6IHVzZXJfaWQsXG5cdFx0XHRcdFx0XHRvd25lcl9uYW1lOiB1c2VyX2luZm8ubmFtZSxcblx0XHRcdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcblx0XHRcdFx0XHRcdGluc3RhbmNlOiBuZXdfaW5zX2lkLFxuXHRcdFx0XHRcdFx0YXBwcm92ZTogYXBwcl9vYmouX2lkLFxuXHRcdFx0XHRcdFx0Y3VycmVudDogdHJ1ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0aW5zdGFuY2VGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGE7XG5cdFx0XHRcdFx0dmFyIGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydChpbnN0YW5jZUZpbGUpO1xuXHRcdFx0XHRcdGZpbGVPYmoudXBkYXRlKHtcblx0XHRcdFx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0XHRcdFx0J21ldGFkYXRhLnBhcmVudCc6IGZpbGVPYmouX2lkXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSlcblxuXHRcdFx0XHQvLyB9IGNhdGNoIChlKSB7XG5cdFx0XHRcdC8vICAgICBjb25zb2xlLmVycm9yKGUpO1xuXHRcdFx0XHQvLyB9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc0ZvcndhcmRBdHRhY2htZW50cyAmJiBhY3Rpb25fdHlwZSA9PSAnZm9yd2FyZCcpIHtcblx0XHRcdFx0dmFyIGZpbGVzID0gY29sbGVjdGlvbi5maW5kKHtcblx0XHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZV9pZCxcblx0XHRcdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcblx0XHRcdFx0XHQvLyDliKTmlq3mlrDnmoTmtYHnqIvlvIDlp4voioLngrnmmK/lkKbmnInnvJbovpHmraPmloflkoznvJbovpHpmYTku7bmnYPpmZBcblx0XHRcdFx0XHRpZiAoZi5tZXRhZGF0YS5tYWluID09IHRydWUpIHtcblx0XHRcdFx0XHRcdGlmIChjYW5fZWRpdF9tYWluX2F0dGFjaCAhPSB0cnVlICYmIGNhbl9lZGl0X25vcm1hbF9hdHRhY2ggIT0gdHJ1ZSlcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCAhPSB0cnVlKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIG5ld0ZpbGUgPSBuZXcgRlMuRmlsZSgpO1xuXHRcdFx0XHRcdG5ld0ZpbGUuYXR0YWNoRGF0YShmLmNyZWF0ZVJlYWRTdHJlYW0oJ2luc3RhbmNlcycpLCB7XG5cdFx0XHRcdFx0XHR0eXBlOiBmLm9yaWdpbmFsLnR5cGVcblx0XHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoZXJyLmVycm9yLCBlcnIucmVhc29uKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG5ld0ZpbGUubmFtZShmLm5hbWUoKSk7XG5cdFx0XHRcdFx0XHRuZXdGaWxlLnNpemUoZi5zaXplKCkpO1xuXHRcdFx0XHRcdFx0dmFyIG1ldGFkYXRhID0ge1xuXHRcdFx0XHRcdFx0XHRvd25lcjogdXNlcl9pZCxcblx0XHRcdFx0XHRcdFx0b3duZXJfbmFtZTogdXNlcl9pbmZvLm5hbWUsXG5cdFx0XHRcdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcblx0XHRcdFx0XHRcdFx0aW5zdGFuY2U6IG5ld19pbnNfaWQsXG5cdFx0XHRcdFx0XHRcdGFwcHJvdmU6IGFwcHJfb2JqLl9pZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudDogdHJ1ZVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdGlmIChmLm1ldGFkYXRhLm1haW4gPT0gdHJ1ZSAmJiBjYW5fZWRpdF9tYWluX2F0dGFjaCA9PSB0cnVlKSB7XG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhLm1haW4gPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuXHRcdFx0XHRcdFx0dmFyIGZpbGVPYmogPSBjb2xsZWN0aW9uLmluc2VydChuZXdGaWxlKTtcblx0XHRcdFx0XHRcdGZpbGVPYmoudXBkYXRlKHtcblx0XHRcdFx0XHRcdFx0JHNldDoge1xuXHRcdFx0XHRcdFx0XHRcdCdtZXRhZGF0YS5wYXJlbnQnOiBmaWxlT2JqLl9pZFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdH0pXG5cblx0XHRcdFx0fSlcblx0XHRcdH1cblxuXHRcdFx0Ly8g57uZ5b2T5YmN55qE55Sz6K+35Y2V5aKe5Yqg6L2s5Y+R6K6w5b2VXG5cdFx0XHR2YXIgYXBwciA9IHtcblx0XHRcdFx0J19pZCc6IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHIsXG5cdFx0XHRcdCdpbnN0YW5jZSc6IGluc3RhbmNlX2lkLFxuXHRcdFx0XHQndHJhY2UnOiBjdXJyZW50X3RyYWNlX2lkLFxuXHRcdFx0XHQnaXNfZmluaXNoZWQnOiB0cnVlLFxuXHRcdFx0XHQndXNlcic6IHVzZXJfaWQsXG5cdFx0XHRcdCd1c2VyX25hbWUnOiB1c2VyX2luZm8ubmFtZSxcblx0XHRcdFx0J2hhbmRsZXInOiB1c2VyX2lkLFxuXHRcdFx0XHQnaGFuZGxlcl9uYW1lJzogdXNlcl9pbmZvLm5hbWUsXG5cdFx0XHRcdCdoYW5kbGVyX29yZ2FuaXphdGlvbic6IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uLFxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSc6IHNwYWNlX3VzZXJfb3JnX2luZm8ubmFtZSxcblx0XHRcdFx0J2hhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lJzogc3BhY2VfdXNlcl9vcmdfaW5mby5mdWxsbmFtZSxcblx0XHRcdFx0J3R5cGUnOiBhY3Rpb25fdHlwZSxcblx0XHRcdFx0J3N0YXJ0X2RhdGUnOiBuZXcgRGF0ZSgpLFxuXHRcdFx0XHQnZmluaXNoX2RhdGUnOiBuZXcgRGF0ZSgpLFxuXHRcdFx0XHQnaXNfcmVhZCc6IGZhbHNlLFxuXHRcdFx0XHQnanVkZ2UnOiAnc3VibWl0dGVkJyxcblx0XHRcdFx0J2Zyb21fdXNlcic6IGN1cnJlbnRfdXNlcl9pZCxcblx0XHRcdFx0J2Zyb21fdXNlcl9uYW1lJzogZnJvbV91c2VyX25hbWUsXG5cdFx0XHRcdCdmb3J3YXJkX3NwYWNlJzogc3BhY2VfaWQsXG5cdFx0XHRcdCdmb3J3YXJkX2luc3RhbmNlJzogbmV3X2luc19pZCxcblx0XHRcdFx0J2Rlc2NyaXB0aW9uJzogZGVzY3JpcHRpb24sXG5cdFx0XHRcdCdmcm9tX2FwcHJvdmVfaWQnOiBmcm9tX2FwcHJvdmVfaWRcblx0XHRcdH07XG5cblx0XHRcdGZvcndhcmRfYXBwcm92ZXMucHVzaChhcHByKTtcblxuXHRcdFx0bmV3X2luc19pZHMucHVzaChuZXdfaW5zX2lkKTtcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcblx0XHR9KVxuXG5cdFx0c2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG5cdFx0c2V0X29iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcblx0XHR2YXIgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuXHRcdFx0X2lkOiBpbnN0YW5jZV9pZCxcblx0XHRcdFwidHJhY2VzLl9pZFwiOiBjdXJyZW50X3RyYWNlX2lkXG5cdFx0fSwge1xuXHRcdFx0JHNldDogc2V0X29iaixcblx0XHRcdCRhZGRUb1NldDoge1xuXHRcdFx0XHQndHJhY2VzLiQuYXBwcm92ZXMnOiB7XG5cdFx0XHRcdFx0JGVhY2g6IGZvcndhcmRfYXBwcm92ZXNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKHIpIHtcblx0XHRcdF8uZWFjaChjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYSwgaWR4KSB7XG5cdFx0XHRcdGlmIChhLl9pZCA9PSBmcm9tX2FwcHJvdmVfaWQpIHtcblx0XHRcdFx0XHR2YXIgdXBkYXRlX3JlYWQgPSB7fTtcblx0XHRcdFx0XHR1cGRhdGVfcmVhZFtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcblx0XHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcblx0XHRcdFx0XHRcdF9pZDogaW5zdGFuY2VfaWQsXG5cdFx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogY3VycmVudF90cmFjZV9pZFxuXHRcdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRcdCRzZXQ6IHVwZGF0ZV9yZWFkXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHR9XG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG5cdFx0XHRjb2RlOiAyMDAsXG5cdFx0XHRkYXRhOiB7IG5ld19pbnNfaWRzOiBuZXdfaW5zX2lkcyB9XG5cdFx0fSlcblx0fSBjYXRjaCAoZSkge1xuXHRcdGNvbnNvbGUuZXJyb3IoZS5zdGFjaylcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG5cdFx0XHRjb2RlOiAyMDAsXG5cdFx0XHRkYXRhOiB7XG5cdFx0XHRcdGVycm9yczogW2VdXG5cdFx0XHR9XG5cdFx0fSlcblx0fVxuXG59KSIsIkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL2FwaS93b3JrZmxvdy9pbnN0YW5jZS86aW5zdGFuY2VJZCcsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxLCByZXMpXG5cdFx0Y3VycmVudF91c2VyX2lkID0gY3VycmVudF91c2VyX2luZm8uX2lkXG5cdFx0cmVxX2FzeW5jID0gXy5oYXMocmVxLnF1ZXJ5LCAnYXN5bmMnKTtcblx0XHRpbnNJZCA9IHJlcS5wYXJhbXMuaW5zdGFuY2VJZFxuXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHsgZmllbGRzOiB7IHNwYWNlOiAxLCBmbG93OiAxLCBzdGF0ZTogMSwgaW5ib3hfdXNlcnM6IDEsIGNjX3VzZXJzOiAxLCBvdXRib3hfdXNlcnM6IDEsIHN1Ym1pdHRlcjogMSwgYXBwbGljYW50OiAxIH0gfSlcblxuXHRcdGlmIG5vdCBpbnNcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlSWQgaXMgd3Jvbmcgb3IgaW5zdGFuY2Ugbm90IGV4aXN0cy4nKVxuXG5cdFx0c3BhY2VJZCA9IGlucy5zcGFjZVxuXHRcdGZsb3dJZCA9IGlucy5mbG93XG5cblx0XHRpZiBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlSWQsIHVzZXI6IGN1cnJlbnRfdXNlcl9pZCB9KS5jb3VudCgpIGlzIDBcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ3VzZXIgaXMgbm90IGJlbG9uZyB0byB0aGlzIHNwYWNlLicpXG5cblx0XHRib3ggPSAnJ1xuXG5cdFx0aWYgKGlucy5pbmJveF91c2Vycz8uaW5jbHVkZXMgY3VycmVudF91c2VyX2lkKSBvciAoaW5zLmNjX3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWQpXG5cdFx0XHRib3ggPSAnaW5ib3gnXG5cdFx0ZWxzZSBpZiBpbnMub3V0Ym94X3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWRcblx0XHRcdGJveCA9ICdvdXRib3gnXG5cdFx0ZWxzZSBpZiBpbnMuc3RhdGUgaXMgJ2RyYWZ0JyBhbmQgaW5zLnN1Ym1pdHRlciBpcyBjdXJyZW50X3VzZXJfaWRcblx0XHRcdGJveCA9ICdkcmFmdCdcblx0XHRlbHNlIGlmIGlucy5zdGF0ZSBpcyAncGVuZGluZycgYW5kIChpbnMuc3VibWl0dGVyIGlzIGN1cnJlbnRfdXNlcl9pZCBvciBpbnMuYXBwbGljYW50IGlzIGN1cnJlbnRfdXNlcl9pZClcblx0XHRcdGJveCA9ICdwZW5kaW5nJ1xuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdjb21wbGV0ZWQnIGFuZCBpbnMuc3VibWl0dGVyIGlzIGN1cnJlbnRfdXNlcl9pZFxuXHRcdFx0Ym94ID0gJ2NvbXBsZXRlZCdcblx0XHRlbHNlXG5cdFx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcblx0XHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dJZCwgY3VycmVudF91c2VyX2lkKVxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShzcGFjZUlkLCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxuXHRcdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSlcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcIm5vIHBlcm1pc3Npb24uXCIpXG5cdFx0XHRib3ggPSAnbW9uaXRvcidcblxuXHRcdHJlZGlyZWN0VG8gPSBcIndvcmtmbG93L3NwYWNlLyN7c3BhY2VJZH0vI3tib3h9LyN7aW5zSWR9XCJcblx0XHRyZWRpcmVjdFRvVXJsID0gTWV0ZW9yLmFic29sdXRlVXJsKHJlZGlyZWN0VG8pXG5cdFx0aWYgcmVxX2FzeW5jICMgfHwgcmVxLmdldChcIlgtUmVxdWVzdGVkLVdpdGhcIikgPT09ICdYTUxIdHRwUmVxdWVzdCdcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZCh7XG5cdFx0XHRcdFwic3RhdHVzXCI6IDMwMixcblx0XHRcdFx0XCJyZWRpcmVjdFwiOiByZWRpcmVjdFRvXG5cdFx0XHR9KTtcblx0XHRlbHNlXG5cdFx0XHRyZXMuc2V0SGVhZGVyIFwiTG9jYXRpb25cIiwgcmVkaXJlY3RUb1VybFxuXHRcdFx0cmVzLndyaXRlSGVhZCAzMDJcblx0XHRcdHJlcy5lbmQoKVxuXHRcdFx0cmV0dXJuXG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cbiIsIkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9pbnN0YW5jZS86aW5zdGFuY2VJZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBib3gsIGN1cnJlbnRfdXNlcl9pZCwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3dJZCwgaW5zLCBpbnNJZCwgcGVybWlzc2lvbnMsIHJlZGlyZWN0VG8sIHJlZGlyZWN0VG9VcmwsIHJlZiwgcmVmMSwgcmVmMiwgcmVxX2FzeW5jLCBzcGFjZSwgc3BhY2VJZDtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEsIHJlcyk7XG4gICAgY3VycmVudF91c2VyX2lkID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIHJlcV9hc3luYyA9IF8uaGFzKHJlcS5xdWVyeSwgJ2FzeW5jJyk7XG4gICAgaW5zSWQgPSByZXEucGFyYW1zLmluc3RhbmNlSWQ7XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgZmxvdzogMSxcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGluYm94X3VzZXJzOiAxLFxuICAgICAgICBjY191c2VyczogMSxcbiAgICAgICAgb3V0Ym94X3VzZXJzOiAxLFxuICAgICAgICBzdWJtaXR0ZXI6IDEsXG4gICAgICAgIGFwcGxpY2FudDogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghaW5zKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdpbnN0YW5jZUlkIGlzIHdyb25nIG9yIGluc3RhbmNlIG5vdCBleGlzdHMuJyk7XG4gICAgfVxuICAgIHNwYWNlSWQgPSBpbnMuc3BhY2U7XG4gICAgZmxvd0lkID0gaW5zLmZsb3c7XG4gICAgaWYgKGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICB1c2VyOiBjdXJyZW50X3VzZXJfaWRcbiAgICB9KS5jb3VudCgpID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICd1c2VyIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZS4nKTtcbiAgICB9XG4gICAgYm94ID0gJyc7XG4gICAgaWYgKCgocmVmID0gaW5zLmluYm94X3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKGN1cnJlbnRfdXNlcl9pZCkgOiB2b2lkIDApIHx8ICgocmVmMSA9IGlucy5jY191c2VycykgIT0gbnVsbCA/IHJlZjEuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSA6IHZvaWQgMCkpIHtcbiAgICAgIGJveCA9ICdpbmJveCc7XG4gICAgfSBlbHNlIGlmICgocmVmMiA9IGlucy5vdXRib3hfdXNlcnMpICE9IG51bGwgPyByZWYyLmluY2x1ZGVzKGN1cnJlbnRfdXNlcl9pZCkgOiB2b2lkIDApIHtcbiAgICAgIGJveCA9ICdvdXRib3gnO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnZHJhZnQnICYmIGlucy5zdWJtaXR0ZXIgPT09IGN1cnJlbnRfdXNlcl9pZCkge1xuICAgICAgYm94ID0gJ2RyYWZ0JztcbiAgICB9IGVsc2UgaWYgKGlucy5zdGF0ZSA9PT0gJ3BlbmRpbmcnICYmIChpbnMuc3VibWl0dGVyID09PSBjdXJyZW50X3VzZXJfaWQgfHwgaW5zLmFwcGxpY2FudCA9PT0gY3VycmVudF91c2VyX2lkKSkge1xuICAgICAgYm94ID0gJ3BlbmRpbmcnO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnY29tcGxldGVkJyAmJiBpbnMuc3VibWl0dGVyID09PSBjdXJyZW50X3VzZXJfaWQpIHtcbiAgICAgIGJveCA9ICdjb21wbGV0ZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhmbG93SWQsIGN1cnJlbnRfdXNlcl9pZCk7XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlSWQsIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgYWRtaW5zOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgJiYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcIm5vIHBlcm1pc3Npb24uXCIpO1xuICAgICAgfVxuICAgICAgYm94ID0gJ21vbml0b3InO1xuICAgIH1cbiAgICByZWRpcmVjdFRvID0gXCJ3b3JrZmxvdy9zcGFjZS9cIiArIHNwYWNlSWQgKyBcIi9cIiArIGJveCArIFwiL1wiICsgaW5zSWQ7XG4gICAgcmVkaXJlY3RUb1VybCA9IE1ldGVvci5hYnNvbHV0ZVVybChyZWRpcmVjdFRvKTtcbiAgICBpZiAocmVxX2FzeW5jKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoe1xuICAgICAgICBcInN0YXR1c1wiOiAzMDIsXG4gICAgICAgIFwicmVkaXJlY3RcIjogcmVkaXJlY3RUb1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJMb2NhdGlvblwiLCByZWRpcmVjdFRvVXJsKTtcbiAgICAgIHJlcy53cml0ZUhlYWQoMzAyKTtcbiAgICAgIHJlcy5lbmQoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL3BlbmRpbmcg6I635Y+W5b6F5Yqe5paH5Lu2XG5cbkBhcGlEZXNjcmlwdGlvbiDojrflj5blvZPliY3nlKjmiLfnmoTlvoXlip7kuovpobnliJfooahcblxuQGFwaU5hbWUgZ2V0SW5ib3hcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG5cdHtcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG5cdH1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxuXHR7XG5cdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG5cdFx0XCJkYXRhXCI6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJpZFwiOiBcImc3d29rWE5rUjl5eEh2QTREXCIsXG5cdFx0XHRcdFwic3RhcnRfZGF0ZVwiOiBcIjIwMTctMTEtMjNUMDI6Mjg6NTMuMTY0WlwiLFxuXHRcdFx0XHRcImZsb3dfbmFtZVwiOiBcIuato+aWh+a1geeoi1wiLFxuXHRcdFx0XHRcInNwYWNlX25hbWVcIjogXCLlrqHmibnnjotcIixcblx0XHRcdFx0XCJuYW1lXCI6IFwi5q2j5paH5rWB56iLIDFcIixcblx0XHRcdFx0XCJhcHBsaWNhbnRfbmFtZVwiOiBudWxsLFxuXHRcdFx0XHRcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxuXHRcdFx0XHRcInN1Ym1pdF9kYXRlXCI6IFwiMjAxNy0wNy0yNVQwNjozNjo0OC40OTJaXCIsXG5cdFx0XHRcdFwic3RlcF9uYW1lXCI6IFwi5byA5aeLXCIsXG5cdFx0XHRcdFwic3BhY2VfaWRcIjogXCJrZkRzTXY3Z0Jld21HWEdFTFwiLFxuXHRcdFx0XHRcIm1vZGlmaWVkXCI6IFwiMjAxNy0xMS0yM1QwMjoyODo1My4xNjRaXCIsXG5cdFx0XHRcdFwiaXNfcmVhZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJ2YWx1ZXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiaWRcIjogXCJXcUtTcldRb3l3Z0phTXA5a1wiLFxuXHRcdFx0XHRcInN0YXJ0X2RhdGVcIjogXCIyMDE3LTA4LTE3VDA3OjM4OjM1LjQyMFpcIixcblx0XHRcdFx0XCJmbG93X25hbWVcIjogXCLmraPmlodcXG5cIixcblx0XHRcdFx0XCJzcGFjZV9uYW1lXCI6IFwi5a6h5om5546LXCIsXG5cdFx0XHRcdFwibmFtZVwiOiBcIuato+aWh1xcbiAxXCIsXG5cdFx0XHRcdFwiYXBwbGljYW50X25hbWVcIjogXCLmrrfkuq7ovolcIixcblx0XHRcdFx0XCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIjogXCLlrqHmibnnjotcIixcblx0XHRcdFx0XCJzdWJtaXRfZGF0ZVwiOiBcIjIwMTctMDYtMjdUMTA6MjY6MTkuNDY4WlwiLFxuXHRcdFx0XHRcInN0ZXBfbmFtZVwiOiBcIuW8gOWni1wiLFxuXHRcdFx0XHRcInNwYWNlX2lkXCI6IFwia2ZEc012N2dCZXdtR1hHRUxcIixcblx0XHRcdFx0XCJtb2RpZmllZFwiOiBcIjIwMTctMDgtMTdUMDc6Mzg6MzUuNDIxWlwiLFxuXHRcdFx0XHRcImlzX3JlYWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJ2YWx1ZXNcIjoge31cblx0XHRcdH1cblx0XHRdXG5cdH1cbiMjI1xuSnNvblJvdXRlcy5hZGQgJ2dldCcsICcvYXBpL3dvcmtmbG93L29wZW4vcGVuZGluZycsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxuXHRcdFx0cmV0dXJuXG5cblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ10gfHwgcmVxLnF1ZXJ5Py5zcGFjZUlkXG5cblx0XHRpZiBub3Qgc3BhY2VfaWRcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgc3BhY2VfaWQnKVxuXG5cdFx0dXNlcl9pZCA9IHJlcS51c2VySWRcblxuXHRcdGlmICF1c2VyX2lkXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdOb3QgbG9nZ2VkIGluJylcblxuXHRcdGlmIGRiLnVzZXJzLmZpbmQoeyBfaWQ6IHVzZXJfaWQgfSkuY291bnQoKSBpcyAwXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXG5cblx0XHRsaW1pdCA9IHJlcS5xdWVyeT8ubGltaXQgfHwgNTAwXG5cblx0XHRsaW1pdCA9IHBhcnNlSW50KGxpbWl0KVxuXG5cdFx0dXNlcm5hbWUgPSByZXEucXVlcnk/LnVzZXJuYW1lXG5cblx0XHR1c2VyaWQgPSByZXEucXVlcnk/LnVzZXJpZFxuXG5cdFx0YXR0YWNoID0gcmVxLnF1ZXJ5Py5hdHRhY2hcblxuXHRcdHdvcmtmbG93X2NhdGVnb3JpZXMgPSByZXEucXVlcnk/LndvcmtmbG93X2NhdGVnb3JpZXNcblxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcblx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXG5cblx0XHQjIOWmguaenOW9k+WJjeeUqOaIt+aYr+W3peS9nOWMuueuoeeQhuWRmO+8jOWImemAmui/h+afpeeci3VybOS4iuaYr+WQpuaciXVzZXJuYW1lXFx1c2VyaWQg77yMXG5cdFx0IyDlpoLmnpzmnInvvIzliJnov5Tlm551c2VybmFtZVxcdXNlcmlk5a+55bqU55qE55So5oi377yM5ZCm5YiZ6L+U5Zue5b2T5YmN55So5oi35b6F5Yqe44CCXG5cdFx0IyB1c2VybmFtZVxcdXNlcmlk6YO95a2Y5Zyo5pe277yMdXNlcmlk5LyY5YWIXG5cdFx0c3BlY2lhbF91c2VyX2lkXG5cdFx0aWYgc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJfaWQpXG5cdFx0XHRpZiB1c2VyaWRcblx0XHRcdFx0aWYgZGIudXNlcnMuZmluZCh7IF9pZDogdXNlcmlkIH0pLmNvdW50KCkgPCAxXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcImNhbiBub3QgZmluZCB1c2VyIGJ5IHVzZXJpZDogI3t1c2VyaWR9XCIpXG5cblx0XHRcdFx0c3BlY2lhbF91c2VyX2lkID0gdXNlcmlkXG5cdFx0XHRlbHNlIGlmIHVzZXJuYW1lXG5cdFx0XHRcdHUgPSBkYi51c2Vycy5maW5kT25lKHsgdXNlcm5hbWU6IHVzZXJuYW1lIH0sIHsgZmllbGRzOiB7IF9pZDogMSB9IH0pXG5cdFx0XHRcdGlmIF8uaXNFbXB0eSh1KVxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VybmFtZTogI3t1c2VybmFtZX1cIilcblxuXHRcdFx0XHRzcGVjaWFsX3VzZXJfaWQgPSB1Ll9pZFxuXG5cdFx0cmVzdWx0X2luc3RhbmNlcyA9IG5ldyBBcnJheVxuXG5cdFx0aXNfcmVhZCA9IGZhbHNlXG5cdFx0c3RhcnRfZGF0ZSA9ICcnXG5cdFx0dWlkID0gdXNlcl9pZFxuXHRcdHF1ZXJ5ID0ge1xuXHRcdFx0JG9yOiBbeyBpbmJveF91c2VyczogdXNlcl9pZCB9LCB7IGNjX3VzZXJzOiB1c2VyX2lkIH1dXG5cdFx0fVxuXG5cdFx0aWYgc3BlY2lhbF91c2VyX2lkXG5cdFx0XHR1aWQgPSBzcGVjaWFsX3VzZXJfaWRcblx0XHRcdHF1ZXJ5ID0ge1xuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXG5cdFx0XHRcdCRvcjogW3sgaW5ib3hfdXNlcnM6IHNwZWNpYWxfdXNlcl9pZCB9LCB7IGNjX3VzZXJzOiBzcGVjaWFsX3VzZXJfaWQgfV1cblx0XHRcdH1cblxuXHRcdGlmIHdvcmtmbG93X2NhdGVnb3JpZXNcblx0XHRcdHF1ZXJ5LmNhdGVnb3J5ID0geyAkaW46IHdvcmtmbG93X2NhdGVnb3JpZXMuc3BsaXQoJywnKSB9XG5cblx0XHRzcGFjZV9uYW1lcyA9IHt9XG5cdFx0c3BhY2VfbmFtZXNbc3BhY2UuX2lkXSA9IHNwYWNlLm5hbWVcblxuXHRcdGlmIGxpbWl0ID4gMFxuXHRcdFx0ZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHsgc29ydDogeyBtb2RpZmllZDogLTEgfSwgbGltaXQ6IGxpbWl0IH0pLmZvckVhY2ggKGkpIC0+XG5cblx0XHRcdFx0aWYgaS5pbmJveF91c2Vycz8uaW5jbHVkZXModWlkKVxuXHRcdFx0XHRcdF8uZWFjaCBpLnRyYWNlcywgKHQpIC0+XG5cdFx0XHRcdFx0XHRpZiB0LmlzX2ZpbmlzaGVkIGlzIGZhbHNlXG5cdFx0XHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYSkgLT5cblx0XHRcdFx0XHRcdFx0XHRpZiBhLnVzZXIgaXMgdWlkIGFuZCBhLnR5cGUgaXNudCAnY2MnIGFuZCBub3QgYS5pc19maW5pc2hlZFxuXHRcdFx0XHRcdFx0XHRcdFx0aXNfcmVhZCA9IGEuaXNfcmVhZFxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhcnRfZGF0ZSA9IGEuc3RhcnRfZGF0ZVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0Xy5lYWNoIGkudHJhY2VzLCAodCkgLT5cblx0XHRcdFx0XHRcdGlmIG5vdCBzdGFydF9kYXRlIGFuZCB0LmFwcHJvdmVzXG5cdFx0XHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYSkgLT5cblx0XHRcdFx0XHRcdFx0XHRpZiBub3Qgc3RhcnRfZGF0ZSBhbmQgYS51c2VyIGlzIHVpZCBhbmQgYS50eXBlIGlzICdjYycgYW5kIG5vdCBhLmlzX2ZpbmlzaGVkXG5cdFx0XHRcdFx0XHRcdFx0XHRpc19yZWFkID0gYS5pc19yZWFkXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydF9kYXRlID0gYS5zdGFydF9kYXRlXG5cblx0XHRcdFx0aWYgbm90IHNwYWNlX25hbWVzW2kuc3BhY2VdXG5cdFx0XHRcdFx0c3BhY2VfbmFtZXNbaS5zcGFjZV0gPSBkYi5zcGFjZXMuZmluZE9uZShpLnNwYWNlLCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSk/Lm5hbWVcblxuXHRcdFx0XHRoID0gbmV3IE9iamVjdFxuXHRcdFx0XHRoW1wiaWRcIl0gPSBpW1wiX2lkXCJdXG5cdFx0XHRcdGhbXCJzdGFydF9kYXRlXCJdID0gc3RhcnRfZGF0ZVxuXHRcdFx0XHRoW1wiZmxvd19uYW1lXCJdID0gaS5mbG93X25hbWVcblx0XHRcdFx0aFtcInNwYWNlX25hbWVcIl0gPSBzcGFjZV9uYW1lc1tpLnNwYWNlXVxuXHRcdFx0XHRoW1wibmFtZVwiXSA9IGlbXCJuYW1lXCJdXG5cdFx0XHRcdGhbXCJhcHBsaWNhbnRfbmFtZVwiXSA9IGlbXCJhcHBsaWNhbnRfbmFtZVwiXVxuXHRcdFx0XHRoW1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXVxuXHRcdFx0XHRoW1wic3VibWl0X2RhdGVcIl0gPSBpW1wic3VibWl0X2RhdGVcIl1cblx0XHRcdFx0aFtcInN0ZXBfbmFtZVwiXSA9IGkuY3VycmVudF9zdGVwX25hbWVcblx0XHRcdFx0aFtcInNwYWNlX2lkXCJdID0gaS5zcGFjZVxuXHRcdFx0XHRoW1wibW9kaWZpZWRcIl0gPSBpW1wibW9kaWZpZWRcIl1cblx0XHRcdFx0aFtcImlzX3JlYWRcIl0gPSBpc19yZWFkXG5cdFx0XHRcdGhbXCJ2YWx1ZXNcIl0gPSBpW1widmFsdWVzXCJdXG5cblx0XHRcdFx0aWYgYXR0YWNoIGlzICd0cnVlJ1xuXHRcdFx0XHRcdGguYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoeyAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpLl9pZCwgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyAkbmU6IHRydWUgfSB9LCB7IGZpZWxkczogeyBjb3BpZXM6IDAgfSB9KS5mZXRjaCgpXG5cblx0XHRcdFx0cmVzdWx0X2luc3RhbmNlcy5wdXNoKGgpXG5cblx0XHRub19saW1pdF9jb3VudCA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5KS5jb3VudCgpXG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzdWx0X2luc3RhbmNlcywgY291bnQ6IG5vX2xpbWl0X2NvdW50IH1cblx0XHR9XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbeyBlcnJvck1lc3NhZ2U6IGUucmVhc29uIH1dIH1cblx0XHR9XG5cbiIsIlxuLypcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL3BlbmRpbmcg6I635Y+W5b6F5Yqe5paH5Lu2XG5cbkBhcGlEZXNjcmlwdGlvbiDojrflj5blvZPliY3nlKjmiLfnmoTlvoXlip7kuovpobnliJfooahcblxuQGFwaU5hbWUgZ2V0SW5ib3hcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG5cdHtcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG5cdH1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxuXHR7XG5cdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG5cdFx0XCJkYXRhXCI6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJpZFwiOiBcImc3d29rWE5rUjl5eEh2QTREXCIsXG5cdFx0XHRcdFwic3RhcnRfZGF0ZVwiOiBcIjIwMTctMTEtMjNUMDI6Mjg6NTMuMTY0WlwiLFxuXHRcdFx0XHRcImZsb3dfbmFtZVwiOiBcIuato+aWh+a1geeoi1wiLFxuXHRcdFx0XHRcInNwYWNlX25hbWVcIjogXCLlrqHmibnnjotcIixcblx0XHRcdFx0XCJuYW1lXCI6IFwi5q2j5paH5rWB56iLIDFcIixcblx0XHRcdFx0XCJhcHBsaWNhbnRfbmFtZVwiOiBudWxsLFxuXHRcdFx0XHRcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxuXHRcdFx0XHRcInN1Ym1pdF9kYXRlXCI6IFwiMjAxNy0wNy0yNVQwNjozNjo0OC40OTJaXCIsXG5cdFx0XHRcdFwic3RlcF9uYW1lXCI6IFwi5byA5aeLXCIsXG5cdFx0XHRcdFwic3BhY2VfaWRcIjogXCJrZkRzTXY3Z0Jld21HWEdFTFwiLFxuXHRcdFx0XHRcIm1vZGlmaWVkXCI6IFwiMjAxNy0xMS0yM1QwMjoyODo1My4xNjRaXCIsXG5cdFx0XHRcdFwiaXNfcmVhZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJ2YWx1ZXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiaWRcIjogXCJXcUtTcldRb3l3Z0phTXA5a1wiLFxuXHRcdFx0XHRcInN0YXJ0X2RhdGVcIjogXCIyMDE3LTA4LTE3VDA3OjM4OjM1LjQyMFpcIixcblx0XHRcdFx0XCJmbG93X25hbWVcIjogXCLmraPmlodcXG5cIixcblx0XHRcdFx0XCJzcGFjZV9uYW1lXCI6IFwi5a6h5om5546LXCIsXG5cdFx0XHRcdFwibmFtZVwiOiBcIuato+aWh1xcbiAxXCIsXG5cdFx0XHRcdFwiYXBwbGljYW50X25hbWVcIjogXCLmrrfkuq7ovolcIixcblx0XHRcdFx0XCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIjogXCLlrqHmibnnjotcIixcblx0XHRcdFx0XCJzdWJtaXRfZGF0ZVwiOiBcIjIwMTctMDYtMjdUMTA6MjY6MTkuNDY4WlwiLFxuXHRcdFx0XHRcInN0ZXBfbmFtZVwiOiBcIuW8gOWni1wiLFxuXHRcdFx0XHRcInNwYWNlX2lkXCI6IFwia2ZEc012N2dCZXdtR1hHRUxcIixcblx0XHRcdFx0XCJtb2RpZmllZFwiOiBcIjIwMTctMDgtMTdUMDc6Mzg6MzUuNDIxWlwiLFxuXHRcdFx0XHRcImlzX3JlYWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJ2YWx1ZXNcIjoge31cblx0XHRcdH1cblx0XHRdXG5cdH1cbiAqL1xuSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvYXBpL3dvcmtmbG93L29wZW4vcGVuZGluZycsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhdHRhY2gsIGUsIGlzX3JlYWQsIGxpbWl0LCBub19saW1pdF9jb3VudCwgcXVlcnksIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVzdWx0X2luc3RhbmNlcywgc3BhY2UsIHNwYWNlX2lkLCBzcGFjZV9uYW1lcywgc3BlY2lhbF91c2VyX2lkLCBzdGFydF9kYXRlLCB1LCB1aWQsIHVzZXJfaWQsIHVzZXJpZCwgdXNlcm5hbWUsIHdvcmtmbG93X2NhdGVnb3JpZXM7XG4gIHRyeSB7XG4gICAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXSB8fCAoKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5zcGFjZUlkIDogdm9pZCAwKTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHNwYWNlX2lkJyk7XG4gICAgfVxuICAgIHVzZXJfaWQgPSByZXEudXNlcklkO1xuICAgIGlmICghdXNlcl9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnTm90IGxvZ2dlZCBpbicpO1xuICAgIH1cbiAgICBpZiAoZGIudXNlcnMuZmluZCh7XG4gICAgICBfaWQ6IHVzZXJfaWRcbiAgICB9KS5jb3VudCgpID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICBsaW1pdCA9ICgocmVmMSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEubGltaXQgOiB2b2lkIDApIHx8IDUwMDtcbiAgICBsaW1pdCA9IHBhcnNlSW50KGxpbWl0KTtcbiAgICB1c2VybmFtZSA9IChyZWYyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMi51c2VybmFtZSA6IHZvaWQgMDtcbiAgICB1c2VyaWQgPSAocmVmMyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjMudXNlcmlkIDogdm9pZCAwO1xuICAgIGF0dGFjaCA9IChyZWY0ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNC5hdHRhY2ggOiB2b2lkIDA7XG4gICAgd29ya2Zsb3dfY2F0ZWdvcmllcyA9IChyZWY1ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNS53b3JrZmxvd19jYXRlZ29yaWVzIDogdm9pZCAwO1xuICAgIHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgc3BlY2lhbF91c2VyX2lkO1xuICAgIGlmIChzcGFjZS5hZG1pbnMuaW5jbHVkZXModXNlcl9pZCkpIHtcbiAgICAgIGlmICh1c2VyaWQpIHtcbiAgICAgICAgaWYgKGRiLnVzZXJzLmZpbmQoe1xuICAgICAgICAgIF9pZDogdXNlcmlkXG4gICAgICAgIH0pLmNvdW50KCkgPCAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcImNhbiBub3QgZmluZCB1c2VyIGJ5IHVzZXJpZDogXCIgKyB1c2VyaWQpO1xuICAgICAgICB9XG4gICAgICAgIHNwZWNpYWxfdXNlcl9pZCA9IHVzZXJpZDtcbiAgICAgIH0gZWxzZSBpZiAodXNlcm5hbWUpIHtcbiAgICAgICAgdSA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBfaWQ6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoXy5pc0VtcHR5KHUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcImNhbiBub3QgZmluZCB1c2VyIGJ5IHVzZXJuYW1lOiBcIiArIHVzZXJuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBzcGVjaWFsX3VzZXJfaWQgPSB1Ll9pZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0X2luc3RhbmNlcyA9IG5ldyBBcnJheTtcbiAgICBpc19yZWFkID0gZmFsc2U7XG4gICAgc3RhcnRfZGF0ZSA9ICcnO1xuICAgIHVpZCA9IHVzZXJfaWQ7XG4gICAgcXVlcnkgPSB7XG4gICAgICAkb3I6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluYm94X3VzZXJzOiB1c2VyX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjY191c2VyczogdXNlcl9pZFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgICBpZiAoc3BlY2lhbF91c2VyX2lkKSB7XG4gICAgICB1aWQgPSBzcGVjaWFsX3VzZXJfaWQ7XG4gICAgICBxdWVyeSA9IHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICAkb3I6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmJveF91c2Vyczogc3BlY2lhbF91c2VyX2lkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgY2NfdXNlcnM6IHNwZWNpYWxfdXNlcl9pZFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHdvcmtmbG93X2NhdGVnb3JpZXMpIHtcbiAgICAgIHF1ZXJ5LmNhdGVnb3J5ID0ge1xuICAgICAgICAkaW46IHdvcmtmbG93X2NhdGVnb3JpZXMuc3BsaXQoJywnKVxuICAgICAgfTtcbiAgICB9XG4gICAgc3BhY2VfbmFtZXMgPSB7fTtcbiAgICBzcGFjZV9uYW1lc1tzcGFjZS5faWRdID0gc3BhY2UubmFtZTtcbiAgICBpZiAobGltaXQgPiAwKSB7XG4gICAgICBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgICAgICBzb3J0OiB7XG4gICAgICAgICAgbW9kaWZpZWQ6IC0xXG4gICAgICAgIH0sXG4gICAgICAgIGxpbWl0OiBsaW1pdFxuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIHZhciBoLCByZWY2LCByZWY3O1xuICAgICAgICBpZiAoKHJlZjYgPSBpLmluYm94X3VzZXJzKSAhPSBudWxsID8gcmVmNi5pbmNsdWRlcyh1aWQpIDogdm9pZCAwKSB7XG4gICAgICAgICAgXy5lYWNoKGkudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodC5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEudXNlciA9PT0gdWlkICYmIGEudHlwZSAhPT0gJ2NjJyAmJiAhYS5pc19maW5pc2hlZCkge1xuICAgICAgICAgICAgICAgICAgaXNfcmVhZCA9IGEuaXNfcmVhZDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdGFydF9kYXRlID0gYS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgXy5lYWNoKGkudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAoIXN0YXJ0X2RhdGUgJiYgdC5hcHByb3Zlcykge1xuICAgICAgICAgICAgICByZXR1cm4gXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0X2RhdGUgJiYgYS51c2VyID09PSB1aWQgJiYgYS50eXBlID09PSAnY2MnICYmICFhLmlzX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgICBpc19yZWFkID0gYS5pc19yZWFkO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0X2RhdGUgPSBhLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNwYWNlX25hbWVzW2kuc3BhY2VdKSB7XG4gICAgICAgICAgc3BhY2VfbmFtZXNbaS5zcGFjZV0gPSAocmVmNyA9IGRiLnNwYWNlcy5maW5kT25lKGkuc3BhY2UsIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpICE9IG51bGwgPyByZWY3Lm5hbWUgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaCA9IG5ldyBPYmplY3Q7XG4gICAgICAgIGhbXCJpZFwiXSA9IGlbXCJfaWRcIl07XG4gICAgICAgIGhbXCJzdGFydF9kYXRlXCJdID0gc3RhcnRfZGF0ZTtcbiAgICAgICAgaFtcImZsb3dfbmFtZVwiXSA9IGkuZmxvd19uYW1lO1xuICAgICAgICBoW1wic3BhY2VfbmFtZVwiXSA9IHNwYWNlX25hbWVzW2kuc3BhY2VdO1xuICAgICAgICBoW1wibmFtZVwiXSA9IGlbXCJuYW1lXCJdO1xuICAgICAgICBoW1wiYXBwbGljYW50X25hbWVcIl0gPSBpW1wiYXBwbGljYW50X25hbWVcIl07XG4gICAgICAgIGhbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIl0gPSBpW1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgICAgICBoW1wic3VibWl0X2RhdGVcIl0gPSBpW1wic3VibWl0X2RhdGVcIl07XG4gICAgICAgIGhbXCJzdGVwX25hbWVcIl0gPSBpLmN1cnJlbnRfc3RlcF9uYW1lO1xuICAgICAgICBoW1wic3BhY2VfaWRcIl0gPSBpLnNwYWNlO1xuICAgICAgICBoW1wibW9kaWZpZWRcIl0gPSBpW1wibW9kaWZpZWRcIl07XG4gICAgICAgIGhbXCJpc19yZWFkXCJdID0gaXNfcmVhZDtcbiAgICAgICAgaFtcInZhbHVlc1wiXSA9IGlbXCJ2YWx1ZXNcIl07XG4gICAgICAgIGlmIChhdHRhY2ggPT09ICd0cnVlJykge1xuICAgICAgICAgIGguYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaS5faWQsXG4gICAgICAgICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG4gICAgICAgICAgICBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjoge1xuICAgICAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgY29waWVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0X2luc3RhbmNlcy5wdXNoKGgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG5vX2xpbWl0X2NvdW50ID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnkpLmNvdW50KCk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogcmVzdWx0X2luc3RhbmNlcyxcbiAgICAgICAgY291bnQ6IG5vX2xpbWl0X2NvdW50XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLnJlYXNvblxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkNvb2tpZXMgPSByZXF1aXJlKFwiY29va2llc1wiKVxuXG5NZXRlb3Iuc3RhcnR1cCAtPlxuXHRXZWJBcHAuY29ubmVjdEhhbmRsZXJzLnVzZSBcIi9hcGkvd29ya2Zsb3cvZXhwb3J0L3RhbGJlX3RlbXBsYXRlXCIsIChyZXEsIHJlcywgbmV4dCktPlxuXHRcdGNvb2tpZXMgPSBuZXcgQ29va2llcyggcmVxLCByZXMgKTtcblx0XHQjIGZpcnN0IGNoZWNrIHJlcXVlc3QgYm9keVxuXHRcdGlmIHJlcS5ib2R5XG5cdFx0XHR1c2VySWQgPSByZXEuYm9keVtcIlgtVXNlci1JZFwiXVxuXHRcdFx0YXV0aFRva2VuID0gcmVxLmJvZHlbXCJYLUF1dGgtVG9rZW5cIl1cblxuXHRcdCMgdGhlbiBjaGVjayBjb29raWVcblx0XHRpZiAhdXNlcklkIG9yICFhdXRoVG9rZW5cblx0XHRcdHVzZXJJZCA9IGNvb2tpZXMuZ2V0KFwiWC1Vc2VyLUlkXCIpXG5cdFx0XHRhdXRoVG9rZW4gPSBjb29raWVzLmdldChcIlgtQXV0aC1Ub2tlblwiKVxuXG5cdFx0aWYgISh1c2VySWQgYW5kIGF1dGhUb2tlbilcblx0XHRcdHJlcy53cml0ZUhlYWQoNDAxKTtcblx0XHRcdHJlcy5lbmQgSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIFgtQXV0aC1Ub2tlblwiLFxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2Vcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm4gO1xuXG5cdFx0Zmxvd0lkID0gcmVxLnF1ZXJ5Py5mbG93O1xuXG5cdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogZmxvd0lkfSwge2ZpZWxkczoge3NwYWNlOiAxLCBmb3JtOiAxLCBuYW1lOiAxfX0pXG5cblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7X2lkOiBmbG93LmZvcm19LCB7ZmllbGRzOiB7c3BhY2U6IDEsIFwiY3VycmVudC5faWRcIjogMX19KVxuXG5cdFx0aWYgXy5pc0VtcHR5KGZsb3cpXG5cdFx0XHRyZXMud3JpdGVIZWFkKDQwMSk7XG5cdFx0XHRyZXMuZW5kIEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gSW52YWxpZCBmb3JtSWRcIixcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuIDtcblx0XHRlbHNlXG5cdFx0XHRpZiAhU3RlZWRvcy5pc1NwYWNlQWRtaW4oZmxvdy5zcGFjZSwgdXNlcklkKVxuXHRcdFx0XHRyZXMud3JpdGVIZWFkKDQwMSk7XG5cdFx0XHRcdHJlcy5lbmQgSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb25cIixcblx0XHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2Vcblx0XHRcdFx0fSlcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKGZsb3cuc3BhY2UsIHsgZmllbGRzOiB7IGlzX3BhaWQ6IDEgfSB9KVxuXHRcdFx0aWYgIXNwYWNlPy5pc19wYWlkXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRcdFx0Y29kZTogNDA0LFxuXHRcdFx0XHRcdGRhdGE6XG5cdFx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBOb24tcGFpZCBzcGFjZS5cIixcblx0XHRcdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRkYXRhID0gVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUoe2Zvcm06IGZsb3cuZm9ybSwgZm9ybV92ZXJzaW9uOiBmb3JtPy5jdXJyZW50Py5faWR9LCB0cnVlKTtcblxuXHRcdGZpbGVOYW1lID0gZmxvdy5uYW1lXG5cblx0XHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XG5cdFx0cmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScrZW5jb2RlVVJJKGZpbGVOYW1lKSsnLmh0bWwnKTtcblx0XHRyZXMuZW5kKGRhdGEpIiwidmFyIENvb2tpZXM7XG5cbkNvb2tpZXMgPSByZXF1aXJlKFwiY29va2llc1wiKTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBXZWJBcHAuY29ubmVjdEhhbmRsZXJzLnVzZShcIi9hcGkvd29ya2Zsb3cvZXhwb3J0L3RhbGJlX3RlbXBsYXRlXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIGF1dGhUb2tlbiwgY29va2llcywgZGF0YSwgZmlsZU5hbWUsIGZsb3csIGZsb3dJZCwgZm9ybSwgcmVmLCByZWYxLCBzcGFjZSwgdXNlcklkO1xuICAgIGNvb2tpZXMgPSBuZXcgQ29va2llcyhyZXEsIHJlcyk7XG4gICAgaWYgKHJlcS5ib2R5KSB7XG4gICAgICB1c2VySWQgPSByZXEuYm9keVtcIlgtVXNlci1JZFwiXTtcbiAgICAgIGF1dGhUb2tlbiA9IHJlcS5ib2R5W1wiWC1BdXRoLVRva2VuXCJdO1xuICAgIH1cbiAgICBpZiAoIXVzZXJJZCB8fCAhYXV0aFRva2VuKSB7XG4gICAgICB1c2VySWQgPSBjb29raWVzLmdldChcIlgtVXNlci1JZFwiKTtcbiAgICAgIGF1dGhUb2tlbiA9IGNvb2tpZXMuZ2V0KFwiWC1BdXRoLVRva2VuXCIpO1xuICAgIH1cbiAgICBpZiAoISh1c2VySWQgJiYgYXV0aFRva2VuKSkge1xuICAgICAgcmVzLndyaXRlSGVhZCg0MDEpO1xuICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgWC1BdXRoLVRva2VuXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmbG93SWQgPSAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLmZsb3cgOiB2b2lkIDA7XG4gICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmbG93SWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgIGZvcm06IDEsXG4gICAgICAgIG5hbWU6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZsb3cuZm9ybVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgXCJjdXJyZW50Ll9pZFwiOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKF8uaXNFbXB0eShmbG93KSkge1xuICAgICAgcmVzLndyaXRlSGVhZCg0MDEpO1xuICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIEludmFsaWQgZm9ybUlkXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIVN0ZWVkb3MuaXNTcGFjZUFkbWluKGZsb3cuc3BhY2UsIHVzZXJJZCkpIHtcbiAgICAgICAgcmVzLndyaXRlSGVhZCg0MDEpO1xuICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBObyBwZXJtaXNzaW9uXCIsXG4gICAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShmbG93LnNwYWNlLCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGlzX3BhaWQ6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIShzcGFjZSAhPSBudWxsID8gc3BhY2UuaXNfcGFpZCA6IHZvaWQgMCkpIHtcbiAgICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgIGNvZGU6IDQwNCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBOb24tcGFpZCBzcGFjZS5cIixcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgZGF0YSA9IFRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlKHtcbiAgICAgIGZvcm06IGZsb3cuZm9ybSxcbiAgICAgIGZvcm1fdmVyc2lvbjogZm9ybSAhPSBudWxsID8gKHJlZjEgPSBmb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYxLl9pZCA6IHZvaWQgMCA6IHZvaWQgMFxuICAgIH0sIHRydWUpO1xuICAgIGZpbGVOYW1lID0gZmxvdy5uYW1lO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LW1zZG93bmxvYWQnKTtcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgJ2F0dGFjaG1lbnQ7ZmlsZW5hbWU9JyArIGVuY29kZVVSSShmaWxlTmFtZSkgKyAnLmh0bWwnKTtcbiAgICByZXR1cm4gcmVzLmVuZChkYXRhKTtcbiAgfSk7XG59KTtcbiIsIiMjI1xuQGFwaSB7cG9zdH0gL2FwaS93b3JrZmxvdy9vcGVuL2RyYWZ0cyDmlrDlu7rnlLPor7fljZVcblxuQGFwaU5hbWUgY3JlYXRlSW5zdGFuY2VcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxue1xuXHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG59XG5cbkBhcGlQYXJhbUV4YW1wbGUge2pzb259IFJlcXVlc3QgUGF5bG9hZDpcbntcbiAgICBcImZsb3dcIjog5rWB56iLSWQsXG4gICAgXCJhcHBsaWNhbnRcIjog55Sz6K+35Lq6SWQsXG4gICAgXCJ2YWx1ZXNcIjoge1xuICAgICAgICBcImZpZWxkczFcIiA6IOWtl+auteWAvCxcbiAgICAgICAgXCJmaWVsZHMyXCIgOiDlrZfmrrXlgLwsXG4gICAgICAgIC4uLlxuICAgIH1cbn1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxue1xuICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XG59XG5cbkBhcGlFcnJvckV4YW1wbGUge2pzb259IGVycm9yLVJlc3BvbnNlOlxue1xuICAgIFwic3RhdHVzXCI6IFwiZXJyb3JcIixcbiAgICBcImRhdGFcIjogey4uLn1cbn1cbiMjI1xuSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2RyYWZ0cycsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxuXHRcdFx0cmV0dXJuXG5cblx0XHR1c2VyX2lkID0gcmVxLnVzZXJJZFxuXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiB1c2VyX2lkIH0pXG5cblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cblxuXHRcdGlmIG5vdCBzcGFjZV9pZFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgeF9zcGFjZV9pZCcpXG5cblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcl9pbmZvLl9pZClcblxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcblxuXHRcdGlmIG5vdCBoYXNoRGF0YVtcImZsb3dcIl1cblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbnVsbCcpXG5cblx0XHRmbG93X2lkICAgICAgPSBoYXNoRGF0YVtcImZsb3dcIl1cblx0XHRhcHBsaWNhbnRfaWQgPSBoYXNoRGF0YVtcImFwcGxpY2FudFwiXVxuXHRcdGFwcGxpY2FudF91c2VybmFtZSA9IGhhc2hEYXRhW1wiYXBwbGljYW50X3VzZXJuYW1lXCJdXG5cblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudCA9IG5ldyBPYmplY3RcblxuXHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHsgX2lkOiBmbG93X2lkIH0sIHsgZmllbGRzOiB7IHNwYWNlOiAxLCAnY3VycmVudC5faWQnOiAxIH0gfSlcblx0XHRpZiBub3QgZmxvd1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmxvdyBpcyBub3QgZXhpc3RzJylcblxuXHRcdGlmIHNwYWNlX2lkIGlzbnQgZmxvdy5zcGFjZVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmxvdyBpcyBub3QgYmVsb25nIHRvIHRoaXMgc3BhY2UnKVxuXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogY3VycmVudF91c2VyX2luZm8uX2lkIH0pLmNvdW50KCkgaXMgMFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXV0aF90b2tlbiBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBzcGFjZScpXG5cblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcInNwYWNlXCJdID0gc3BhY2VfaWRcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImZsb3dcIl0gPSBmbG93X2lkXG5cdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJmbG93X3ZlcnNpb25cIl0gPSBmbG93LmN1cnJlbnQuX2lkXG5cblx0XHRhcHBsaWNhbnQgPSBudWxsXG5cdFx0aWYgYXBwbGljYW50X2lkIG9yIGFwcGxpY2FudF91c2VybmFtZVxuXG5cdFx0XHRpZiBhcHBsaWNhbnRfaWRcblx0XHRcdFx0YXBwbGljYW50ID0gZGIudXNlcnMuZmluZE9uZSh7IF9pZDogYXBwbGljYW50X2lkIH0sIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxuXHRcdFx0XHRpZiBub3QgYXBwbGljYW50XG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIHdyb25nJylcblxuXHRcdFx0ZWxzZSBpZiBhcHBsaWNhbnRfdXNlcm5hbWVcblx0XHRcdFx0YXBwbGljYW50ID0gZGIudXNlcnMuZmluZE9uZSh7IHVzZXJuYW1lOiBhcHBsaWNhbnRfdXNlcm5hbWUgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXG5cdFx0XHRcdGlmIG5vdCBhcHBsaWNhbnRcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnRfdXNlcm5hbWUgaXMgd3JvbmcnKVxuXG5cdFx0XHRzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogYXBwbGljYW50Ll9pZCB9KVxuXHRcdFx0aWYgbm90IHNwYWNlX3VzZXJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIHNwYWNlJylcblxuXHRcdFx0aWYgc3BhY2VfdXNlci51c2VyX2FjY2VwdGVkIGlzbnQgdHJ1ZVxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgZGlzYWJsZWQgaW4gdGhpcyBzcGFjZScpXG5cblx0XHRcdHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcblx0XHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50XCJdID0gYXBwbGljYW50Ll9pZFxuXHRcdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfbmFtZVwiXSA9IGFwcGxpY2FudC5uYW1lXG5cdFx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25cIl0gPSAgc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxuXHRcdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXVxuXHRcdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIl0gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl1cblxuXHRcdGFwcGxpY2FudEluZm8gPSBhcHBsaWNhbnQgfHwgY3VycmVudF91c2VyX2luZm9cblxuXHRcdHRyYWNlcyA9IFtdXG5cdFx0dHJhY2UgPSBuZXcgT2JqZWN0XG5cdFx0YXBwcm92ZXMgPSBbXVxuXHRcdGFwcHJvdmUgPSBuZXcgT2JqZWN0XG5cdFx0YXBwcm92ZVtcInZhbHVlc1wiXSA9IGhhc2hEYXRhW1widmFsdWVzXCJdXG5cdFx0YXBwcm92ZXMucHVzaChhcHByb3ZlKVxuXHRcdHRyYWNlW1wiYXBwcm92ZXNcIl0gPSBhcHByb3Zlc1xuXHRcdHRyYWNlcy5wdXNoKHRyYWNlKVxuXHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1widHJhY2VzXCJdID0gdHJhY2VzXG5cblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImluYm94X3VzZXJzXCJdID0gW2FwcGxpY2FudEluZm8uX2lkXVxuXG5cdFx0bmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBhcHBsaWNhbnRJbmZvKVxuXG5cdFx0bmV3X2lucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKG5ld19pbnNfaWQpXG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogbmV3X2lucyB9XG5cdFx0fVxuXHRjYXRjaCBlXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxuXHRcdH1cbiIsIlxuLypcbkBhcGkge3Bvc3R9IC9hcGkvd29ya2Zsb3cvb3Blbi9kcmFmdHMg5paw5bu655Sz6K+35Y2VXG5cbkBhcGlOYW1lIGNyZWF0ZUluc3RhbmNlXG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcbntcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxufVxuXG5AYXBpUGFyYW1FeGFtcGxlIHtqc29ufSBSZXF1ZXN0IFBheWxvYWQ6XG57XG4gICAgXCJmbG93XCI6IOa1geeoi0lkLFxuICAgIFwiYXBwbGljYW50XCI6IOeUs+ivt+S6uklkLFxuICAgIFwidmFsdWVzXCI6IHtcbiAgICAgICAgXCJmaWVsZHMxXCIgOiDlrZfmrrXlgLwsXG4gICAgICAgIFwiZmllbGRzMlwiIDog5a2X5q615YC8LFxuICAgICAgICAuLi5cbiAgICB9XG59XG5cbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcbntcbiAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcbiAgICBcImRhdGFcIjoge2luc3RhbmNlfVxufVxuXG5AYXBpRXJyb3JFeGFtcGxlIHtqc29ufSBlcnJvci1SZXNwb25zZTpcbntcbiAgICBcInN0YXR1c1wiOiBcImVycm9yXCIsXG4gICAgXCJkYXRhXCI6IHsuLi59XG59XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9kcmFmdHMnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYXBwbGljYW50LCBhcHBsaWNhbnRJbmZvLCBhcHBsaWNhbnRfaWQsIGFwcGxpY2FudF91c2VybmFtZSwgYXBwcm92ZSwgYXBwcm92ZXMsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93LCBmbG93X2lkLCBoYXNoRGF0YSwgaW5zdGFuY2VfZnJvbV9jbGllbnQsIG5ld19pbnMsIG5ld19pbnNfaWQsIHNwYWNlX2lkLCBzcGFjZV91c2VyLCBzcGFjZV91c2VyX29yZ19pbmZvLCB0cmFjZSwgdHJhY2VzLCB1c2VyX2lkO1xuICB0cnkge1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1c2VyX2lkID0gcmVxLnVzZXJJZDtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgX2lkOiB1c2VyX2lkXG4gICAgfSk7XG4gICAgc3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddO1xuICAgIGlmICghc3BhY2VfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIHhfc3BhY2VfaWQnKTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcl9pbmZvLl9pZCk7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBpZiAoIWhhc2hEYXRhW1wiZmxvd1wiXSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmxvdyBpcyBudWxsJyk7XG4gICAgfVxuICAgIGZsb3dfaWQgPSBoYXNoRGF0YVtcImZsb3dcIl07XG4gICAgYXBwbGljYW50X2lkID0gaGFzaERhdGFbXCJhcHBsaWNhbnRcIl07XG4gICAgYXBwbGljYW50X3VzZXJuYW1lID0gaGFzaERhdGFbXCJhcHBsaWNhbnRfdXNlcm5hbWVcIl07XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnQgPSBuZXcgT2JqZWN0O1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogZmxvd19pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgJ2N1cnJlbnQuX2lkJzogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghZmxvdykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmxvdyBpcyBub3QgZXhpc3RzJyk7XG4gICAgfVxuICAgIGlmIChzcGFjZV9pZCAhPT0gZmxvdy5zcGFjZSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmxvdyBpcyBub3QgYmVsb25nIHRvIHRoaXMgc3BhY2UnKTtcbiAgICB9XG4gICAgaWYgKGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgdXNlcjogY3VycmVudF91c2VyX2luZm8uX2lkXG4gICAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXV0aF90b2tlbiBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBzcGFjZScpO1xuICAgIH1cbiAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInNwYWNlXCJdID0gc3BhY2VfaWQ7XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJmbG93XCJdID0gZmxvd19pZDtcbiAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImZsb3dfdmVyc2lvblwiXSA9IGZsb3cuY3VycmVudC5faWQ7XG4gICAgYXBwbGljYW50ID0gbnVsbDtcbiAgICBpZiAoYXBwbGljYW50X2lkIHx8IGFwcGxpY2FudF91c2VybmFtZSkge1xuICAgICAgaWYgKGFwcGxpY2FudF9pZCkge1xuICAgICAgICBhcHBsaWNhbnQgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICBfaWQ6IGFwcGxpY2FudF9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFhcHBsaWNhbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgd3JvbmcnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcHBsaWNhbnRfdXNlcm5hbWUpIHtcbiAgICAgICAgYXBwbGljYW50ID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgdXNlcm5hbWU6IGFwcGxpY2FudF91c2VybmFtZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFhcHBsaWNhbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnRfdXNlcm5hbWUgaXMgd3JvbmcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IGFwcGxpY2FudC5faWRcbiAgICAgIH0pO1xuICAgICAgaWYgKCFzcGFjZV91c2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2FwcGxpY2FudCBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBzcGFjZScpO1xuICAgICAgfVxuICAgICAgaWYgKHNwYWNlX3VzZXIudXNlcl9hY2NlcHRlZCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgZGlzYWJsZWQgaW4gdGhpcyBzcGFjZScpO1xuICAgICAgfVxuICAgICAgc3BhY2VfdXNlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhzcGFjZV91c2VyKTtcbiAgICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50XCJdID0gYXBwbGljYW50Ll9pZDtcbiAgICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X25hbWVcIl0gPSBhcHBsaWNhbnQubmFtZTtcbiAgICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X29yZ2FuaXphdGlvblwiXSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl07XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWVcIl0gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdO1xuICAgICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIl0gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl07XG4gICAgfVxuICAgIGFwcGxpY2FudEluZm8gPSBhcHBsaWNhbnQgfHwgY3VycmVudF91c2VyX2luZm87XG4gICAgdHJhY2VzID0gW107XG4gICAgdHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgIGFwcHJvdmVzID0gW107XG4gICAgYXBwcm92ZSA9IG5ldyBPYmplY3Q7XG4gICAgYXBwcm92ZVtcInZhbHVlc1wiXSA9IGhhc2hEYXRhW1widmFsdWVzXCJdO1xuICAgIGFwcHJvdmVzLnB1c2goYXBwcm92ZSk7XG4gICAgdHJhY2VbXCJhcHByb3Zlc1wiXSA9IGFwcHJvdmVzO1xuICAgIHRyYWNlcy5wdXNoKHRyYWNlKTtcbiAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRyYWNlc1wiXSA9IHRyYWNlcztcbiAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImluYm94X3VzZXJzXCJdID0gW2FwcGxpY2FudEluZm8uX2lkXTtcbiAgICBuZXdfaW5zX2lkID0gdXVmbG93TWFuYWdlci5jcmVhdGVfaW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnQsIGFwcGxpY2FudEluZm8pO1xuICAgIG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShuZXdfaW5zX2lkKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiLFxuICAgICAgICBkYXRhOiBuZXdfaW5zXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkIOafpeeci+eUs+ivt+WNleivpuaDhVxuXG5AYXBpTmFtZSBnZXRJbnN0YW5jZVxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy655qE566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBpbnNfaWQg55Sz6K+35Y2VSWRcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG57XG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcbn1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxue1xuICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XG59XG4jIyNcbkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxuXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcblx0XHRcdHJldHVyblxuXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxuXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXG5cblx0XHRpZiBub3Qgc3BhY2VfaWRcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxuXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXG5cblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZClcblx0XHRpZiBub3QgaW5zdGFuY2Vcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBpbnN0YW5jZScpXG5cblx0XHRpZiBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IGluc3RhbmNlLnNwYWNlLCB1c2VyOiBjdXJyZW50X3VzZXIgfSkuY291bnQoKSBpcyAwXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhdXRoX3Rva2VuIGlzIHdyb25nJylcblxuXHRcdCMg5p2D6ZmQ77ya5LuF5Lul5LiL5Lq65ZGY5Y+v5Lul5p+l55yL55Sz6K+35Y2V6K+m5oOF77ya5o+Q5Lqk6ICF44CB55Sz6K+36ICF44CB57uP5omL6ICF44CB5pys5rWB56iL55qE566h55CG5ZGY44CB5pys5rWB56iL55qE6KeC5a+f5ZGY44CB5pys5bel5L2c5Yy655qE566h55CG5ZGY44CB5pys5bel5L2c5Yy655qE5omA5pyJ6ICF44CCXG5cdFx0cGVybV91c2VycyA9IG5ldyBBcnJheVxuXHRcdHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5zdWJtaXR0ZXIpXG5cdFx0cGVybV91c2Vycy5wdXNoKGluc3RhbmNlLmFwcGxpY2FudClcblx0XHRpZiBpbnN0YW5jZS5vdXRib3hfdXNlcnNcblx0XHRcdHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5vdXRib3hfdXNlcnMpXG5cdFx0aWYgaW5zdGFuY2UuaW5ib3hfdXNlcnNcblx0XHRcdHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5pbmJveF91c2Vycylcblx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHsgX2lkOiBpbnN0YW5jZS5zcGFjZSB9LCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxuXHRcdHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChzcGFjZS5hZG1pbnMpXG5cblx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpXG5cblx0XHRpZiAobm90IHBlcm1fdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgYW5kIChub3QgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJtb25pdG9yXCIpKSBhbmQgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbm8gcGVybWlzc2lvbicpXG5cblx0XHRpbnN0YW5jZS5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHskbmU6IHRydWV9fSwge2ZpZWxkczoge2NvcGllczogMH19KS5mZXRjaCgpXG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogaW5zdGFuY2UgfVxuXHRcdH1cblx0Y2F0Y2ggZVxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5tZXNzYWdlIH1dIH1cblx0XHR9XG5cbiIsIlxuLypcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkIOafpeeci+eUs+ivt+WNleivpuaDhVxuXG5AYXBpTmFtZSBnZXRJbnN0YW5jZVxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy655qE566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBpbnNfaWQg55Sz6K+35Y2VSWRcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG57XG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcbn1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxue1xuICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XG59XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgZSwgaW5zX2lkLCBpbnN0YW5jZSwgcGVybV91c2VycywgcGVybWlzc2lvbnMsIHNwYWNlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIGluc3RhbmNlJyk7XG4gICAgfVxuICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBpbnN0YW5jZS5zcGFjZSxcbiAgICAgIHVzZXI6IGN1cnJlbnRfdXNlclxuICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2F1dGhfdG9rZW4gaXMgd3JvbmcnKTtcbiAgICB9XG4gICAgcGVybV91c2VycyA9IG5ldyBBcnJheTtcbiAgICBwZXJtX3VzZXJzLnB1c2goaW5zdGFuY2Uuc3VibWl0dGVyKTtcbiAgICBwZXJtX3VzZXJzLnB1c2goaW5zdGFuY2UuYXBwbGljYW50KTtcbiAgICBpZiAoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKSB7XG4gICAgICBwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLmluYm94X3VzZXJzKSB7XG4gICAgICBwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoaW5zdGFuY2UuaW5ib3hfdXNlcnMpO1xuICAgIH1cbiAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2Uuc3BhY2VcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgYWRtaW5zOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgcGVybV91c2VycyA9IHBlcm1fdXNlcnMuY29uY2F0KHNwYWNlLmFkbWlucyk7XG4gICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKTtcbiAgICBpZiAoKCFwZXJtX3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpICYmICghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJtb25pdG9yXCIpKSAmJiAoIXBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdubyBwZXJtaXNzaW9uJyk7XG4gICAgfVxuICAgIGluc3RhbmNlLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlLl9pZCxcbiAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcbiAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICRuZTogdHJ1ZVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBjb3BpZXM6IDBcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IGluc3RhbmNlXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcbkBhcGkge3B1dH0gL2FwaS93b3JrZmxvdy9vcGVuL3N1Ym1pdC86aW5zX2lkIOaPkOS6pOeUs+ivt+WNlVxuXG5AYXBpRGVzY3JpcHRpb24g5pqC5LiN5pSv5oyB5byA5aeL6IqC54K55LiL5LiA6IqC54K55Li65p2h5Lu255qE5oOF5Ya1XG5cbkBhcGlOYW1lIHN1Ym1pdEluc3RhbmNlXG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcbiAgICB7XG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxuXHR9XG5cbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcbiAgICB7XG5cdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG5cdFx0XCJkYXRhXCI6IHtpbnN0YW5jZX1cblx0fVxuIyMjXG5cbkpzb25Sb3V0ZXMuYWRkICdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3N1Ym1pdC86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxuXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcblx0XHRcdHJldHVybiA7XG5cblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXG5cblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cblxuXHRcdGlmIG5vdCBzcGFjZV9pZFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXG5cblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxuXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXG5cblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcblxuXHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpXG5cblx0XHQjIOagoemqjOeUs+ivt+WNleeKtuaAgeS4uuiNieeov1xuXHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlKVxuXG5cdFx0aWYgc3BhY2VfaWQgaXNudCBpbnN0YW5jZVtcInNwYWNlXCJdXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdpbnN0YW5jZSBpcyBub3QgYmVsb25nIHRvIHRoaXMgc3BhY2UnKVxuXG5cdFx0IyDmoKHpqoznlLPor7fljZXlv4XloavlrZfmrrXmmK/lkKbmnInlgLxcblx0XHR2YWx1ZXMgPSBpbnN0YW5jZVtcInRyYWNlc1wiXVswXVtcImFwcHJvdmVzXCJdWzBdLnZhbHVlc1xuXG5cdFx0Zm9ybSA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybShpbnN0YW5jZS5mb3JtKVxuXG5cdFx0cmVxdWlyZV9idXRfZW1wdHlfZmllbGRzID0gdXVmbG93TWFuYWdlci5jaGVja1ZhbHVlRmllbGRzUmVxdWlyZSh2YWx1ZXMsIGZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcblxuXHRcdGlmIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPiAwXG5cdFx0XHRpZiByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID4gMVxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZHMgPCcgKyByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMuam9pbihcIixcIikgKyAnPiBhcmUgcmVxdWlyZWQnKVxuXHRcdFx0ZWxzZSBpZiByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID0gMVxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZCA8JyArIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5qb2luKFwiLFwiKSArICc+IGlzIHJlcXVpcmVkJylcblxuXHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdylcblxuXHRcdHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGluc3RhbmNlW1widHJhY2VzXCJdWzBdLnN0ZXApXG5cblx0XHQjIOiuoeeul+S4i+S4gOatpemqpOmAiemhuVxuXHRcdG5leHRTdGVwcyA9IHV1Zmxvd01hbmFnZXIuZ2V0TmV4dFN0ZXBzKGluc3RhbmNlLCBmbG93LCBzdGVwLCBcInN1Ym1pdHRlZFwiKVxuXG5cdFx0aWYgbmV4dFN0ZXBzLmxlbmd0aCA8IDFcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBuZXh0IHN0ZXBzJylcblxuXHRcdGlmIG5leHRTdGVwcy5sZW5ndGggPiAxXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgbm90IHVuaXEnKVxuXG5cdFx0bmV4dF9zdGVwX2lkID0gbmV4dFN0ZXBzWzBdXG5cblx0XHQjIOiuoeeul+S4i+S4gOatpeWkhOeQhuS6uumAiemhuVxuXHRcdG5leHRfdXNlcl9pZHMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMoaW5zX2lkLCBuZXh0X3N0ZXBfaWQpIHx8IFtdXG5cblx0XHRpZiBuZXh0X3VzZXJfaWRzLmxlbmd0aCA+IDFcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25leHQgc3RlcCBoYW5kbGVyIG5vdCB1bmlxJylcblxuXHRcdGluc3RhbmNlW1widHJhY2VzXCJdWzBdW1wiYXBwcm92ZXNcIl1bMF1bXCJuZXh0X3N0ZXBzXCJdID0gW3snc3RlcCc6IG5leHRfc3RlcF9pZCwgJ3VzZXJzJzogbmV4dF91c2VyX2lkc31dXG5cblx0XHRyZXN1bHQgPSBuZXcgT2JqZWN0XG5cblx0XHRzdWJtaXR0ZXIgPSBkYi51c2Vycy5maW5kT25lKGluc3RhbmNlLnN1Ym1pdHRlcilcblxuXHRcdGlmIG5vdCBzdWJtaXR0ZXJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBzdWJtaXR0ZXInKVxuXG5cdFx0ciA9IHV1Zmxvd01hbmFnZXIuc3VibWl0X2luc3RhbmNlKGluc3RhbmNlLCBzdWJtaXR0ZXIpXG5cblx0XHRpZiByLmFsZXJ0c1xuXHRcdFx0cmVzdWx0ID0gclxuXHRcdGVsc2Vcblx0XHRcdHJlc3VsdCA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZClcblx0XHRcdGlmIHJlc3VsdFxuXHRcdFx0XHRyZXN1bHQuYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoeydtZXRhZGF0YS5pbnN0YW5jZSc6IGluc19pZCwnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7JG5lOiB0cnVlfX0sIHtmaWVsZHM6IHtjb3BpZXM6IDB9fSkuZmV0Y2goKVxuXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXN1bHR9XG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxuIiwiXG4vKlxuQGFwaSB7cHV0fSAvYXBpL3dvcmtmbG93L29wZW4vc3VibWl0LzppbnNfaWQg5o+Q5Lqk55Sz6K+35Y2VXG5cbkBhcGlEZXNjcmlwdGlvbiDmmoLkuI3mlK/mjIHlvIDlp4voioLngrnkuIvkuIDoioLngrnkuLrmnaHku7bnmoTmg4XlhrVcblxuQGFwaU5hbWUgc3VibWl0SW5zdGFuY2VcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxuICAgIHtcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG5cdH1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxuICAgIHtcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XHRcImRhdGFcIjoge2luc3RhbmNlfVxuXHR9XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3N1Ym1pdC86aW5zX2lkJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3csIGZvcm0sIGluc19pZCwgaW5zdGFuY2UsIG5leHRTdGVwcywgbmV4dF9zdGVwX2lkLCBuZXh0X3VzZXJfaWRzLCByLCByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMsIHJlc3VsdCwgc3BhY2VfaWQsIHN0ZXAsIHN1Ym1pdHRlciwgdmFsdWVzO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlKTtcbiAgICBpZiAoc3BhY2VfaWQgIT09IGluc3RhbmNlW1wic3BhY2VcIl0pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpO1xuICAgIH1cbiAgICB2YWx1ZXMgPSBpbnN0YW5jZVtcInRyYWNlc1wiXVswXVtcImFwcHJvdmVzXCJdWzBdLnZhbHVlcztcbiAgICBmb3JtID0gdXVmbG93TWFuYWdlci5nZXRGb3JtKGluc3RhbmNlLmZvcm0pO1xuICAgIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUodmFsdWVzLCBmb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pO1xuICAgIGlmIChyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2ZpZWxkcyA8JyArIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5qb2luKFwiLFwiKSArICc+IGFyZSByZXF1aXJlZCcpO1xuICAgICAgfSBlbHNlIGlmIChyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZCA8JyArIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5qb2luKFwiLFwiKSArICc+IGlzIHJlcXVpcmVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgaW5zdGFuY2VbXCJ0cmFjZXNcIl1bMF0uc3RlcCk7XG4gICAgbmV4dFN0ZXBzID0gdXVmbG93TWFuYWdlci5nZXROZXh0U3RlcHMoaW5zdGFuY2UsIGZsb3csIHN0ZXAsIFwic3VibWl0dGVkXCIpO1xuICAgIGlmIChuZXh0U3RlcHMubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIG5leHQgc3RlcHMnKTtcbiAgICB9XG4gICAgaWYgKG5leHRTdGVwcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgbm90IHVuaXEnKTtcbiAgICB9XG4gICAgbmV4dF9zdGVwX2lkID0gbmV4dFN0ZXBzWzBdO1xuICAgIG5leHRfdXNlcl9pZHMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMoaW5zX2lkLCBuZXh0X3N0ZXBfaWQpIHx8IFtdO1xuICAgIGlmIChuZXh0X3VzZXJfaWRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25leHQgc3RlcCBoYW5kbGVyIG5vdCB1bmlxJyk7XG4gICAgfVxuICAgIGluc3RhbmNlW1widHJhY2VzXCJdWzBdW1wiYXBwcm92ZXNcIl1bMF1bXCJuZXh0X3N0ZXBzXCJdID0gW1xuICAgICAge1xuICAgICAgICAnc3RlcCc6IG5leHRfc3RlcF9pZCxcbiAgICAgICAgJ3VzZXJzJzogbmV4dF91c2VyX2lkc1xuICAgICAgfVxuICAgIF07XG4gICAgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICBzdWJtaXR0ZXIgPSBkYi51c2Vycy5maW5kT25lKGluc3RhbmNlLnN1Ym1pdHRlcik7XG4gICAgaWYgKCFzdWJtaXR0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBzdWJtaXR0ZXInKTtcbiAgICB9XG4gICAgciA9IHV1Zmxvd01hbmFnZXIuc3VibWl0X2luc3RhbmNlKGluc3RhbmNlLCBzdWJtaXR0ZXIpO1xuICAgIGlmIChyLmFsZXJ0cykge1xuICAgICAgcmVzdWx0ID0gcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWQsXG4gICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIGNvcGllczogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcbkBhcGkge3B1dH0gL2FwaS93b3JrZmxvdy9vcGVuL3NhdmUvOmluc19pZCDmmoLlrZjnlLPor7fljZVcblxuQGFwaU5hbWUgc2F2ZUluc3RhbmNlc1xuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy6566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG4gICAge1xuXHRcdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcblx0fVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG4gICAge1xuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuXHRcdFwiZGF0YVwiOiB7aW5zdGFuY2V9XG5cdH1cbiMjI1xuSnNvblJvdXRlcy5hZGQgJ3B1dCcsICcvYXBpL3dvcmtmbG93L29wZW4vc2F2ZS86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxuXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcblx0XHRcdHJldHVybiA7XG5cblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXG5cblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cblxuXHRcdGlmIG5vdCBzcGFjZV9pZFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXG5cblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxuXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXG5cblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcblxuXHRcdHZhbHVlcyA9IHJlcS5ib2R5XG5cblx0XHRpZiBub3QgdmFsdWVzXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHZhbHVlcycpXG5cblx0XHRjdXJyZW50X3RyYWNlID0gbnVsbFxuXHRcdHNldE9iaiA9IG5ldyBPYmplY3Rcblx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKVxuXHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdylcblxuXHRcdF8uZWFjaCBpbnN0YW5jZS50cmFjZXMsICh0KS0+XG5cdFx0XHRpZiB0LmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxuXHRcdFx0XHRjdXJyZW50X3RyYWNlID0gdFxuXG5cdFx0Y3VycmVudF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBjdXJyZW50X3RyYWNlLnN0ZXApXG5cblx0XHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzIFwiY291bnRlclNpZ25cIlxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5Lya562+5q2l6aqk5LiN6IO95L+u5pS56KGo5Y2V5YC8JylcblxuXHRcdF8uZWFjaCBjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCAoYSktPlxuXHRcdFx0aWYgYS5pc19maW5pc2hlZCBpc250IHRydWUgYW5kIGEudHlwZSBpc250IFwiY2NcIlxuXHRcdFx0XHRhLnZhbHVlcyA9IHZhbHVlc1xuXG5cdFx0c2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGVcblx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGN1cnJlbnRfdHJhY2UuYXBwcm92ZXNcblxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUge1xuXHRcdFx0X2lkOiBpbnNfaWRcblx0XHRcdCd0cmFjZXMuX2lkJzogY3VycmVudF90cmFjZS5faWRcblx0XHR9LCAkc2V0OiBzZXRPYmpcblxuXHRcdHJlc3VsdCA9IG5ldyBPYmplY3RcblxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzdWx0fVxuXHRjYXRjaCBlXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cbiIsIlxuLypcbkBhcGkge3B1dH0gL2FwaS93b3JrZmxvdy9vcGVuL3NhdmUvOmluc19pZCDmmoLlrZjnlLPor7fljZVcblxuQGFwaU5hbWUgc2F2ZUluc3RhbmNlc1xuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy6566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG4gICAge1xuXHRcdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcblx0fVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG4gICAge1xuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuXHRcdFwiZGF0YVwiOiB7aW5zdGFuY2V9XG5cdH1cbiAqL1xuSnNvblJvdXRlcy5hZGQoJ3B1dCcsICcvYXBpL3dvcmtmbG93L29wZW4vc2F2ZS86aW5zX2lkJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfc3RlcCwgY3VycmVudF90cmFjZSwgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgZmxvdywgaW5zX2lkLCBpbnN0YW5jZSwgcmVzdWx0LCBzZXRPYmosIHNwYWNlX2lkLCB2YWx1ZXM7XG4gIHRyeSB7XG4gICAgaW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWQ7XG4gICAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWQ7XG4gICAgc3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddO1xuICAgIGlmICghc3BhY2VfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKTtcbiAgICB9XG4gICAgY3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcik7XG4gICAgaWYgKCFjdXJyZW50X3VzZXJfaW5mbykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgdmFsdWVzID0gcmVxLmJvZHk7XG4gICAgaWYgKCF2YWx1ZXMpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgdmFsdWVzJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdHJhY2UgPSBudWxsO1xuICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZCk7XG4gICAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KTtcbiAgICBfLmVhY2goaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICBpZiAodC5pc19maW5pc2hlZCAhPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gY3VycmVudF90cmFjZSA9IHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY3VycmVudF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBjdXJyZW50X3RyYWNlLnN0ZXApO1xuICAgIGlmIChjdXJyZW50X3N0ZXAuc3RlcF90eXBlID09PSBcImNvdW50ZXJTaWduXCIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+S8muetvuatpemqpOS4jeiDveS/ruaUueihqOWNleWAvCcpO1xuICAgIH1cbiAgICBfLmVhY2goY3VycmVudF90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgaWYgKGEuaXNfZmluaXNoZWQgIT09IHRydWUgJiYgYS50eXBlICE9PSBcImNjXCIpIHtcbiAgICAgICAgcmV0dXJuIGEudmFsdWVzID0gdmFsdWVzO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlO1xuICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzXCJdID0gY3VycmVudF90cmFjZS5hcHByb3ZlcztcbiAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgIF9pZDogaW5zX2lkLFxuICAgICAgJ3RyYWNlcy5faWQnOiBjdXJyZW50X3RyYWNlLl9pZFxuICAgIH0sIHtcbiAgICAgICRzZXQ6IHNldE9ialxuICAgIH0pO1xuICAgIHJlc3VsdCA9IG5ldyBPYmplY3Q7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcbkBhcGkge3Bvc3R9IC9hcGkvd29ya2Zsb3cvb3Blbi9nZXRieXN0ZXBuYW1lIOagueaNruatpemqpOWQjeensOiOt+WPlueUs+ivt+WNlVxuXG5AYXBpTmFtZSBnZXRJbnN0YW5jZUJ5U3RlcE5hbWVcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxue1xuXHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG59XG5cbkBhcGlQYXJhbUV4YW1wbGUge2pzb259IFJlcXVlc3QgUGF5bG9hZDpcbntcbiAgICBcImZsb3dcIjog5rWB56iLSWQsXG4gICAgXCJzdGVwbmFtZVwiOiDmraXpqqTlkI3np7Bcbn1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxue1xuXHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XCJkYXRhXCI6IFtcblx0XHR7XG5cdFx0XHRpbnN0YW5jZVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0aW5zdGFuY2Vcblx0XHR9XG5cdF1cbn1cbiMjI1xuSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldGJ5c3RlcG5hbWUnLCAocmVxLCByZXMsIG5leHQpIC0+XG5cdHRyeVxuXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcblx0XHRcdHJldHVybiA7XG5cblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXG5cblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cblxuXHRcdGlmIG5vdCBzcGFjZV9pZFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXG5cblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxuXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXG5cblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcblxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcblx0XHRzdGVwbmFtZSA9IGhhc2hEYXRhW1wic3RlcG5hbWVcIl1cblx0XHRmbG93ID0gaGFzaERhdGFbXCJmbG93XCJdXG5cblx0XHRpZiBub3Qgc3RlcG5hbWVcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgc3RlcG5hbWUnKVxuXG5cdFx0aWYgbm90IGZsb3dcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgZmxvdycpXG5cblx0XHQjIOWOu+aOiXtmaWVsZHM6IHtpbmJveF91ZXJzOiAwLCBjY191c2VyczogMCwgb3V0Ym94X3VzZXJzOiAwLCB0cmFjZXM6IDAsIGF0dGFjaG1lbnRzOiAwfVxuXHRcdGluc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHtzcGFjZTogc3BhY2VfaWQsIGZsb3c6IGZsb3csIHN0YXRlOidwZW5kaW5nJywgdHJhY2VzOnskZWxlbU1hdGNoOiB7aXNfZmluaXNoZWQ6IGZhbHNlLCBuYW1lOiBzdGVwbmFtZX19fSwge2ZpZWxkczoge2luYm94X3VlcnM6IDAsIGNjX3VzZXJzOiAwLCBvdXRib3hfdXNlcnM6IDAsIGF0dGFjaG1lbnRzOiAwLCB0cmFjZXM6IDB9fSkuZmV0Y2goKVxuXG5cdFx0aW5zdGFuY2VzLmZvckVhY2ggKGluc3RhbmNlKS0+XG5cdFx0XHRpbnN0YW5jZS5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHskbmU6IHRydWV9fSwge2ZpZWxkczoge2NvcGllczogMH19KS5mZXRjaCgpXG5cblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IGluc3RhbmNlc31cblx0Y2F0Y2ggZVxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XG4iLCJcbi8qXG5AYXBpIHtwb3N0fSAvYXBpL3dvcmtmbG93L29wZW4vZ2V0YnlzdGVwbmFtZSDmoLnmja7mraXpqqTlkI3np7Dojrflj5bnlLPor7fljZVcblxuQGFwaU5hbWUgZ2V0SW5zdGFuY2VCeVN0ZXBOYW1lXG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcbntcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxufVxuXG5AYXBpUGFyYW1FeGFtcGxlIHtqc29ufSBSZXF1ZXN0IFBheWxvYWQ6XG57XG4gICAgXCJmbG93XCI6IOa1geeoi0lkLFxuICAgIFwic3RlcG5hbWVcIjog5q2l6aqk5ZCN56ewXG59XG5cbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcbntcblx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG5cdFwiZGF0YVwiOiBbXG5cdFx0e1xuXHRcdFx0aW5zdGFuY2Vcblx0XHR9LFxuXHRcdHtcblx0XHRcdGluc3RhbmNlXG5cdFx0fVxuXHRdXG59XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9nZXRieXN0ZXBuYW1lJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3csIGhhc2hEYXRhLCBpbnN0YW5jZXMsIHNwYWNlX2lkLCBzdGVwbmFtZTtcbiAgdHJ5IHtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIHN0ZXBuYW1lID0gaGFzaERhdGFbXCJzdGVwbmFtZVwiXTtcbiAgICBmbG93ID0gaGFzaERhdGFbXCJmbG93XCJdO1xuICAgIGlmICghc3RlcG5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgc3RlcG5hbWUnKTtcbiAgICB9XG4gICAgaWYgKCFmbG93KSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGZsb3cnKTtcbiAgICB9XG4gICAgaW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgZmxvdzogZmxvdyxcbiAgICAgIHN0YXRlOiAncGVuZGluZycsXG4gICAgICB0cmFjZXM6IHtcbiAgICAgICAgJGVsZW1NYXRjaDoge1xuICAgICAgICAgIGlzX2ZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgICBuYW1lOiBzdGVwbmFtZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGluYm94X3VlcnM6IDAsXG4gICAgICAgIGNjX3VzZXJzOiAwLFxuICAgICAgICBvdXRib3hfdXNlcnM6IDAsXG4gICAgICAgIGF0dGFjaG1lbnRzOiAwLFxuICAgICAgICB0cmFjZXM6IDBcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UuYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZS5faWQsXG4gICAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcbiAgICAgICAgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcbiAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBjb3BpZXM6IDBcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiLFxuICAgICAgICBkYXRhOiBpbnN0YW5jZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIiMjI1xuQ29udGVudC1UeXBl77yaYXBwbGljYXRpb24vanNvblxuZm9ybS1kYXRhIOagvOW8jzpcbmZkID0gbmV3IEZvcm1EYXRhO1xuZmQuYXBwZW5kKFwiZmlsZVwiLCBmaWxlKTtcblxuZmQuYXBwZW5kKFwiaXNfcHJpdmF0ZVwiLCBmYWxzZSk7XG5cbmlmIChpc0FkZFZlcnNpb24pIHtcblx0ZmQuYXBwZW5kKFwiaXNBZGRWZXJzaW9uXCIsIGlzQWRkVmVyc2lvbik7XG5cdGZkLmFwcGVuZChcInBhcmVudFwiLCBhdHRhY2hfcGFyZW50X2lkKTtcbn1cblxuaWYgKGlzTWFpbkF0dGFjaCkge1xuXHRmZC5hcHBlbmQoXCJtYWluXCIsIHRydWUpO1xufVxuIyMjXG5cbkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmluc19pZCcsIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cdFx0aW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWRcblxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXG5cdFx0XHRyZXR1cm4gO1xuXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxuXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXG5cblx0XHRpZiBub3Qgc3BhY2VfaWRcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxuXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcblxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxuXG5cdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZClcblxuXHRcdGlmIGluc3RhbmNlLnN0YXRlIGlzbnQgXCJkcmFmdFwiXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfnlLPor7fljZXojYnnqL/nirbmgIHml7bmiY3og73kuIrkvKAnKVxuXG5cdFx0YXBwcm92ZV9pZCA9IGluc3RhbmNlLnRyYWNlc1swXS5hcHByb3Zlc1swXS5faWRcblxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxuXG5cdFx0SnNvblJvdXRlcy5wYXJzZUZpbGVzIHJlcSwgcmVzLCAoKS0+XG5cdFx0XHRjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlc1xuXG5cdFx0XHRpZiByZXEuZmlsZXMgYW5kIHJlcS5maWxlc1swXVxuXHRcdFx0XHQjIOmZhOS7tuS4iuS8oOaOpeWPo++8jOmZkOWItumZhOS7tuWkp+Wwj++8jOacgOWkp+S4ujEwME1cblx0XHRcdFx0aWYgcmVxLmZpbGVzWzBdLmRhdGEubGVuZ3RoID4gKDEwMCoxMDI0KjEwMjQpXG5cdFx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdFx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0XHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBcIui2hei/h+S4iuS8oOmZhOS7tuWkp+Wwj+mZkOWItigxMDBNKVwifV19XG5cdFx0XHRcdFx0cmV0dXJuXG5cblx0XHRcdFx0bmV3RmlsZSA9IG5ldyBGUy5GaWxlKCk7XG5cdFx0XHRcdG5ld0ZpbGUuYXR0YWNoRGF0YSByZXEuZmlsZXNbMF0uZGF0YSwge3R5cGU6IHJlcS5maWxlc1swXS5taW1lVHlwZX0sIChlcnIpIC0+XG5cdFx0XHRcdFx0ZmlsZW5hbWUgPSByZXEuZmlsZXNbMF0uZmlsZW5hbWVcblxuXHRcdFx0XHRcdGlmIFtcImltYWdlLmpwZ1wiLCBcImltYWdlLmdpZlwiLCBcImltYWdlLmpwZWdcIiwgXCJpbWFnZS5wbmdcIl0uaW5jbHVkZXMoZmlsZW5hbWUudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0XHRcdGZpbGVuYW1lID0gXCJpbWFnZS1cIiArIG1vbWVudChuZXcgRGF0ZSgpKS5mb3JtYXQoJ1lZWVlNTURESEhtbXNzJykgKyBcIi5cIiArIGZpbGVuYW1lLnNwbGl0KCcuJykucG9wKClcblxuXHRcdFx0XHRcdGJvZHkgPSByZXEuYm9keVxuXG5cdFx0XHRcdFx0Ym9keVsnb3duZXInXSA9IGluc3RhbmNlLnN1Ym1pdHRlclxuXHRcdFx0XHRcdGJvZHlbJ293bmVyX25hbWUnXSA9IGluc3RhbmNlLnN1Ym1pdHRlcl9uYW1lXG5cdFx0XHRcdFx0Ym9keVsnc3BhY2UnXSA9IHNwYWNlX2lkXG5cdFx0XHRcdFx0Ym9keVsnaW5zdGFuY2UnXSA9IGluc19pZFxuXHRcdFx0XHRcdGJvZHlbJ2FwcHJvdmUnXSA9IGFwcHJvdmVfaWRcblxuXHRcdFx0XHRcdHRyeVxuXHRcdFx0XHRcdFx0aWYgYm9keSAmJiAoYm9keVsndXBsb2FkX2Zyb20nXSBpcyBcIklFXCIgb3IgYm9keVsndXBsb2FkX2Zyb20nXSBpcyBcIm5vZGVcIilcblx0XHRcdFx0XHRcdFx0ZmlsZW5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQoZmlsZW5hbWUpXG5cdFx0XHRcdFx0Y2F0Y2ggZVxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihmaWxlbmFtZSlcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IgZVxuXHRcdFx0XHRcdFx0ZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC8lL2csIFwiLVwiKVxuXG5cdFx0XHRcdFx0bmV3RmlsZS5uYW1lKGZpbGVuYW1lKVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmIGJvZHkgJiYgYm9keVsnb3duZXInXSAmJiBib2R5Wydvd25lcl9uYW1lJ10gJiYgYm9keVsnc3BhY2UnXSAmJiBib2R5WydpbnN0YW5jZSddICAmJiBib2R5WydhcHByb3ZlJ11cblx0XHRcdFx0XHRcdHBhcmVudCA9ICcnXG5cdFx0XHRcdFx0XHRtZXRhZGF0YSA9IHtvd25lcjpib2R5Wydvd25lciddLCBvd25lcl9uYW1lOmJvZHlbJ293bmVyX25hbWUnXSwgc3BhY2U6Ym9keVsnc3BhY2UnXSwgaW5zdGFuY2U6Ym9keVsnaW5zdGFuY2UnXSwgYXBwcm92ZTogYm9keVsnYXBwcm92ZSddLCBjdXJyZW50OiB0cnVlfVxuXG5cdFx0XHRcdFx0XHRpZiBib2R5W1wiaXNfcHJpdmF0ZVwiXSAmJiBib2R5W1wiaXNfcHJpdmF0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09IFwidHJ1ZVwiXG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhLmlzX3ByaXZhdGUgPSB0cnVlXG5cdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdG1ldGFkYXRhLmlzX3ByaXZhdGUgPSBmYWxzZVxuXG5cdFx0XHRcdFx0XHRpZiBib2R5WydtYWluJ10gPT0gXCJ0cnVlXCJcblx0XHRcdFx0XHRcdFx0bWV0YWRhdGEubWFpbiA9IHRydWVcblxuXHRcdFx0XHRcdFx0aWYgYm9keVsnaXNBZGRWZXJzaW9uJ10gJiYgYm9keVsncGFyZW50J11cblx0XHRcdFx0XHRcdFx0cGFyZW50ID0gYm9keVsncGFyZW50J11cblx0XHRcdFx0XHRcdCMgZWxzZVxuXHRcdFx0XHRcdFx0IyAgIGNvbGxlY3Rpb24uZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogYm9keVsnaW5zdGFuY2UnXSwgJ21ldGFkYXRhLmN1cnJlbnQnIDogdHJ1ZX0pLmZvckVhY2ggKGMpIC0+XG5cdFx0XHRcdFx0XHQjICAgICBpZiBjLm5hbWUoKSA9PSBmaWxlbmFtZVxuXHRcdFx0XHRcdFx0IyAgICAgICBwYXJlbnQgPSBjLm1ldGFkYXRhLnBhcmVudFxuXG5cdFx0XHRcdFx0XHRpZiBwYXJlbnRcblx0XHRcdFx0XHRcdFx0ciA9IGNvbGxlY3Rpb24udXBkYXRlKHsnbWV0YWRhdGEucGFyZW50JzogcGFyZW50LCAnbWV0YWRhdGEuY3VycmVudCcgOiB0cnVlfSwgeyR1bnNldCA6IHsnbWV0YWRhdGEuY3VycmVudCcgOiAnJ319KVxuXHRcdFx0XHRcdFx0XHRpZiByXG5cdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGEucGFyZW50ID0gcGFyZW50XG5cdFx0XHRcdFx0XHRcdFx0aWYgYm9keVsnbG9ja2VkX2J5J10gJiYgYm9keVsnbG9ja2VkX2J5X25hbWUnXVxuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGEubG9ja2VkX2J5ID0gYm9keVsnbG9ja2VkX2J5J11cblx0XHRcdFx0XHRcdFx0XHRcdG1ldGFkYXRhLmxvY2tlZF9ieV9uYW1lID0gYm9keVsnbG9ja2VkX2J5X25hbWUnXVxuXG5cdFx0XHRcdFx0XHRcdFx0bmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhXG5cdFx0XHRcdFx0XHRcdFx0ZmlsZU9iaiA9IGNvbGxlY3Rpb24uaW5zZXJ0IG5ld0ZpbGVcblxuXHRcdFx0XHRcdFx0XHRcdCMg5Yig6Zmk5ZCM5LiA5Liq55Sz6K+35Y2V5ZCM5LiA5Liq5q2l6aqk5ZCM5LiA5Liq5Lq65LiK5Lyg55qE6YeN5aSN55qE5paH5Lu2XG5cdFx0XHRcdFx0XHRcdFx0aWYgYm9keVtcIm92ZXJ3cml0ZVwiXSAmJiBib2R5W1wib3ZlcndyaXRlXCJdLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gXCJ0cnVlXCJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbGxlY3Rpb24ucmVtb3ZlKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBib2R5WydpbnN0YW5jZSddLCAnbWV0YWRhdGEucGFyZW50JzogcGFyZW50LCAnbWV0YWRhdGEub3duZXInOiBib2R5Wydvd25lciddLCAnbWV0YWRhdGEuYXBwcm92ZSc6IGJvZHlbJ2FwcHJvdmUnXSwgJ21ldGFkYXRhLmN1cnJlbnQnOiB7JG5lOiB0cnVlfX0pXG5cdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdG5ld0ZpbGUubWV0YWRhdGEgPSBtZXRhZGF0YVxuXHRcdFx0XHRcdFx0XHRmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQgbmV3RmlsZVxuXHRcdFx0XHRcdFx0XHRmaWxlT2JqLnVwZGF0ZSh7JHNldDogeydtZXRhZGF0YS5wYXJlbnQnIDogZmlsZU9iai5faWR9fSlcblxuXHRcdFx0XHRcdCMg5YW85a656ICB54mI5pysXG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZmlsZU9iaiA9IGNvbGxlY3Rpb24uaW5zZXJ0IG5ld0ZpbGVcblxuXHRcdFx0XHRcdHNpemUgPSBmaWxlT2JqLm9yaWdpbmFsLnNpemVcblx0XHRcdFx0XHRpZiAhc2l6ZVxuXHRcdFx0XHRcdFx0c2l6ZSA9IDEwMjRcblxuXHRcdFx0XHRcdHJlc3VsdCA9IG5ldyBPYmplY3Rcblx0XHRcdFx0XHRyZXN1bHQgPVxuXHRcdFx0XHRcdFx0YXR0YWNoX2lkOiBmaWxlT2JqLl9pZCxcblx0XHRcdFx0XHRcdHNpemU6IHNpemVcblxuXHRcdFx0XHRcdHJlcy5zZXRIZWFkZXIoXCJ4LWFtei12ZXJzaW9uLWlkXCIsZmlsZU9iai5faWQpO1xuXG5cdFx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdFx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0XHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXN1bHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRcdFx0Y29kZTogMjAwXG5cdFx0XHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBcIm5lZWQgZmlsZVwifV19XG5cdFx0XHRcdHJldHVyblxuXG5cdGNhdGNoIGVcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogMjAwXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxuXG5Kc29uUm91dGVzLmFkZCBcImRlbGV0ZVwiLCBcIi9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmluc19pZFwiLCAgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxuXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcblx0XHRcdHJldHVybiA7XG5cblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXG5cblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cblxuXHRcdGlmIG5vdCBzcGFjZV9pZFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXG5cblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxuXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXG5cblx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKVxuXG5cdFx0aWYgaW5zdGFuY2Uuc3RhdGUgaXNudCBcImRyYWZ0XCJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+eUs+ivt+WNleiNieeov+eKtuaAgeaXtuaJjeiDveWIoOmZpOmZhOS7ticpXG5cblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcblxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHkgfHwge31cblx0XHRhdHRhY2hfaWQgPSBoYXNoRGF0YVtcImF0dGFjaF9pZFwiXVxuXG5cdFx0aWYgbm90IGF0dGFjaF9pZFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIGF0dGFjaF9pZCcpXG5cblx0XHRjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlc1xuXG5cdFx0ZmlsZSA9IGNvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogYXR0YWNoX2lkLCAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWR9KVxuXHRcdGlmIGZpbGVcblx0XHRcdGZpbGUucmVtb3ZlKClcblx0XHRlbHNlXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfmraTpmYTku7bkuI3lsZ7kuo7mraTnlLPor7fljZXvvIzmiJblt7LooqvliKDpmaQnKVxuXG5cdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzdWx0fVxuXHRjYXRjaCBlXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMFxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cblxuSnNvblJvdXRlcy5hZGQgXCJnZXRcIiwgXCIvYXBpL3dvcmtmbG93L29wZW4vY2ZzLzphdHRhY2hfaWRcIiwgIChyZXEsIHJlcywgbmV4dCkgLT5cblx0dHJ5XG5cdFx0YXR0YWNoX2lkID0gcmVxLnBhcmFtcy5hdHRhY2hfaWRcblxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXG5cdFx0XHRyZXR1cm4gO1xuXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxuXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXG5cblx0XHRpZiBub3Qgc3BhY2VfaWRcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxuXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcblxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxuXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXG5cblx0XHRyZXMuc3RhdHVzQ29kZSA9IDMwMlxuXHRcdHJlcy5zZXRIZWFkZXIgXCJMb2NhdGlvblwiLCBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2luc3RhbmNlcy9cIikgKyBhdHRhY2hfaWQgKyBcIj9kb3dubG9hZD10cnVlXCJcblx0XHRyZXMuZW5kKClcblx0Y2F0Y2ggZVxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRjb2RlOiAyMDBcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XG4iLCJcbi8qXG5Db250ZW50LVR5cGXvvJphcHBsaWNhdGlvbi9qc29uXG5mb3JtLWRhdGEg5qC85byPOlxuZmQgPSBuZXcgRm9ybURhdGE7XG5mZC5hcHBlbmQoXCJmaWxlXCIsIGZpbGUpO1xuXG5mZC5hcHBlbmQoXCJpc19wcml2YXRlXCIsIGZhbHNlKTtcblxuaWYgKGlzQWRkVmVyc2lvbikge1xuXHRmZC5hcHBlbmQoXCJpc0FkZFZlcnNpb25cIiwgaXNBZGRWZXJzaW9uKTtcblx0ZmQuYXBwZW5kKFwicGFyZW50XCIsIGF0dGFjaF9wYXJlbnRfaWQpO1xufVxuXG5pZiAoaXNNYWluQXR0YWNoKSB7XG5cdGZkLmFwcGVuZChcIm1haW5cIiwgdHJ1ZSk7XG59XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmluc19pZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhcHByb3ZlX2lkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBpbnNfaWQsIGluc3RhbmNlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKTtcbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUgIT09IFwiZHJhZnRcIikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn55Sz6K+35Y2V6I2J56i/54q25oCB5pe25omN6IO95LiK5LygJyk7XG4gICAgfVxuICAgIGFwcHJvdmVfaWQgPSBpbnN0YW5jZS50cmFjZXNbMF0uYXBwcm92ZXNbMF0uX2lkO1xuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnBhcnNlRmlsZXMocmVxLCByZXMsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbGxlY3Rpb24sIG5ld0ZpbGU7XG4gICAgICBjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlcztcbiAgICAgIGlmIChyZXEuZmlsZXMgJiYgcmVxLmZpbGVzWzBdKSB7XG4gICAgICAgIGlmIChyZXEuZmlsZXNbMF0uZGF0YS5sZW5ndGggPiAoMTAwICogMTAyNCAqIDEwMjQpKSB7XG4gICAgICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwi6LaF6L+H5LiK5Lyg6ZmE5Lu25aSn5bCP6ZmQ5Yi2KDEwME0pXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbmV3RmlsZSA9IG5ldyBGUy5GaWxlKCk7XG4gICAgICAgIHJldHVybiBuZXdGaWxlLmF0dGFjaERhdGEocmVxLmZpbGVzWzBdLmRhdGEsIHtcbiAgICAgICAgICB0eXBlOiByZXEuZmlsZXNbMF0ubWltZVR5cGVcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgdmFyIGJvZHksIGUsIGZpbGVPYmosIGZpbGVuYW1lLCBtZXRhZGF0YSwgcGFyZW50LCByLCByZXN1bHQsIHNpemU7XG4gICAgICAgICAgZmlsZW5hbWUgPSByZXEuZmlsZXNbMF0uZmlsZW5hbWU7XG4gICAgICAgICAgaWYgKFtcImltYWdlLmpwZ1wiLCBcImltYWdlLmdpZlwiLCBcImltYWdlLmpwZWdcIiwgXCJpbWFnZS5wbmdcIl0uaW5jbHVkZXMoZmlsZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gXCJpbWFnZS1cIiArIG1vbWVudChuZXcgRGF0ZSgpKS5mb3JtYXQoJ1lZWVlNTURESEhtbXNzJykgKyBcIi5cIiArIGZpbGVuYW1lLnNwbGl0KCcuJykucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJvZHkgPSByZXEuYm9keTtcbiAgICAgICAgICBib2R5Wydvd25lciddID0gaW5zdGFuY2Uuc3VibWl0dGVyO1xuICAgICAgICAgIGJvZHlbJ293bmVyX25hbWUnXSA9IGluc3RhbmNlLnN1Ym1pdHRlcl9uYW1lO1xuICAgICAgICAgIGJvZHlbJ3NwYWNlJ10gPSBzcGFjZV9pZDtcbiAgICAgICAgICBib2R5WydpbnN0YW5jZSddID0gaW5zX2lkO1xuICAgICAgICAgIGJvZHlbJ2FwcHJvdmUnXSA9IGFwcHJvdmVfaWQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChib2R5ICYmIChib2R5Wyd1cGxvYWRfZnJvbSddID09PSBcIklFXCIgfHwgYm9keVsndXBsb2FkX2Zyb20nXSA9PT0gXCJub2RlXCIpKSB7XG4gICAgICAgICAgICAgIGZpbGVuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmaWxlbmFtZSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC8lL2csIFwiLVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3RmlsZS5uYW1lKGZpbGVuYW1lKTtcbiAgICAgICAgICBpZiAoYm9keSAmJiBib2R5Wydvd25lciddICYmIGJvZHlbJ293bmVyX25hbWUnXSAmJiBib2R5WydzcGFjZSddICYmIGJvZHlbJ2luc3RhbmNlJ10gJiYgYm9keVsnYXBwcm92ZSddKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSAnJztcbiAgICAgICAgICAgIG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICBvd25lcjogYm9keVsnb3duZXInXSxcbiAgICAgICAgICAgICAgb3duZXJfbmFtZTogYm9keVsnb3duZXJfbmFtZSddLFxuICAgICAgICAgICAgICBzcGFjZTogYm9keVsnc3BhY2UnXSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGJvZHlbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICAgIGFwcHJvdmU6IGJvZHlbJ2FwcHJvdmUnXSxcbiAgICAgICAgICAgICAgY3VycmVudDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChib2R5W1wiaXNfcHJpdmF0ZVwiXSAmJiBib2R5W1wiaXNfcHJpdmF0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICBtZXRhZGF0YS5pc19wcml2YXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLmlzX3ByaXZhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib2R5WydtYWluJ10gPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLm1haW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJvZHlbJ2lzQWRkVmVyc2lvbiddICYmIGJvZHlbJ3BhcmVudCddKSB7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGJvZHlbJ3BhcmVudCddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgICByID0gY29sbGVjdGlvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5wYXJlbnQnOiBwYXJlbnQsXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAkdW5zZXQ6IHtcbiAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAoYm9keVsnbG9ja2VkX2J5J10gJiYgYm9keVsnbG9ja2VkX2J5X25hbWUnXSkge1xuICAgICAgICAgICAgICAgICAgbWV0YWRhdGEubG9ja2VkX2J5ID0gYm9keVsnbG9ja2VkX2J5J107XG4gICAgICAgICAgICAgICAgICBtZXRhZGF0YS5sb2NrZWRfYnlfbmFtZSA9IGJvZHlbJ2xvY2tlZF9ieV9uYW1lJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0ZpbGUubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlbXCJvdmVyd3JpdGVcIl0gJiYgYm9keVtcIm92ZXJ3cml0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5yZW1vdmUoe1xuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBib2R5WydpbnN0YW5jZSddLFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEucGFyZW50JzogcGFyZW50LFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEub3duZXInOiBib2R5Wydvd25lciddLFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEuYXBwcm92ZSc6IGJvZHlbJ2FwcHJvdmUnXSxcbiAgICAgICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgICAgIGZpbGVPYmoudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICAgICAnbWV0YWRhdGEucGFyZW50JzogZmlsZU9iai5faWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpemUgPSBmaWxlT2JqLm9yaWdpbmFsLnNpemU7XG4gICAgICAgICAgaWYgKCFzaXplKSB7XG4gICAgICAgICAgICBzaXplID0gMTAyNDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICBhdHRhY2hfaWQ6IGZpbGVPYmouX2lkLFxuICAgICAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzLnNldEhlYWRlcihcIngtYW16LXZlcnNpb24taWRcIiwgZmlsZU9iai5faWQpO1xuICAgICAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwibmVlZCBmaWxlXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbkpzb25Sb3V0ZXMuYWRkKFwiZGVsZXRlXCIsIFwiL2FwaS93b3JrZmxvdy9vcGVuL2Nmcy86aW5zX2lkXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhdHRhY2hfaWQsIGNvbGxlY3Rpb24sIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZpbGUsIGhhc2hEYXRhLCBpbnNfaWQsIGluc3RhbmNlLCByZXN1bHQsIHNwYWNlX2lkO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfnlLPor7fljZXojYnnqL/nirbmgIHml7bmiY3og73liKDpmaTpmYTku7YnKTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keSB8fCB7fTtcbiAgICBhdHRhY2hfaWQgPSBoYXNoRGF0YVtcImF0dGFjaF9pZFwiXTtcbiAgICBpZiAoIWF0dGFjaF9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIGF0dGFjaF9pZCcpO1xuICAgIH1cbiAgICBjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlcztcbiAgICBmaWxlID0gY29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgIF9pZDogYXR0YWNoX2lkLFxuICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zX2lkXG4gICAgfSk7XG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIGZpbGUucmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+atpOmZhOS7tuS4jeWxnuS6juatpOeUs+ivt+WNle+8jOaIluW3suiiq+WIoOmZpCcpO1xuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgT2JqZWN0O1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5Kc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmF0dGFjaF9pZFwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYXR0YWNoX2lkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBhdHRhY2hfaWQgPSByZXEucGFyYW1zLmF0dGFjaF9pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICByZXMuc3RhdHVzQ29kZSA9IDMwMjtcbiAgICByZXMuc2V0SGVhZGVyKFwiTG9jYXRpb25cIiwgU3RlZWRvcy5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9pbnN0YW5jZXMvXCIpICsgYXR0YWNoX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiKTtcbiAgICByZXR1cm4gcmVzLmVuZCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9mb3J3YXJkX3JlZmlsbFwiLCAocmVxLCByZXMsIG5leHQpIC0+XG5cdGNvbnNvbGUubG9nIFwiPT09PT09PT095Zue5aGr5a2Q6KGoPT09PT09PT09PVwiXG5cdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uc3ViVGFibGVcIixyZXE/LnF1ZXJ5Py5zdWJUYWJsZVxuXHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWIhuWPkeWbnuWhq+eahOWIlz09PT09PT09PT1cIlxuXHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LmNvbHVtblwiLHJlcT8ucXVlcnk/LmNvbHVtblxuXG5cdGNvbHVtbnMgPSByZXE/LnF1ZXJ5Py5jb2x1bW4uc3BsaXQoJzsnKVxuXHRjb25zb2xlLmxvZyBcImNvbHVtbnNcIixjb2x1bW5zXG5cblxuXHQjIOWIhuWPkeeahOeUs+ivt+WNlVxuXHRmb3J3YXJkX2lucyA9IHJlcT8uYm9keT8uaW5zdGFuY2VcblxuXHRzdWJUYWJsZSA9IHJlcT8ucXVlcnk/LnN1YlRhYmxlXG5cblx0aWYgZm9yd2FyZF9pbnM/LnN0YXRlID09IFwiY29tcGxldGVkXCIgJiYgZm9yd2FyZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXM/Lmxlbmd0aD4wICYmIHN1YlRhYmxlICYmIGNvbHVtbnNcblx0XHRcblx0XHQjIOWIhuWPkeWbnuadpeeahOWAvFxuXHRcdGZvcndhcmRfaW5zX3ZhbHVlcyA9IGZvcndhcmRfaW5zPy52YWx1ZXNcblxuXHRcdCMgIyDljp/nlLPor7fljZXlrZfmrrVcblx0XHRvcmlnaW5hbF9pbnNfaWQgPSBfLmxhc3QgZm9yd2FyZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcblx0XHRvcmlnaW5hbF9pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShvcmlnaW5hbF9pbnNfaWQpXG5cdFx0b3JpZ2luYWxfaW5zX2Zvcm0gPSBkYi5mb3Jtcy5maW5kT25lKG9yaWdpbmFsX2lucz8uZm9ybSlcblxuXHRcdG9yaWdpbmFsX2luc19maWVsZHMgPSBbXVxuXHRcdG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyA9IFtdXG5cblx0XHRjb25zb2xlLmxvZyBcIm9yaWdpbmFsX2luc19mb3JtPy5jdXJyZW50Py5faWRcIixvcmlnaW5hbF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXG5cdFx0Y29uc29sZS5sb2cgXCJvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvblwiLG9yaWdpbmFsX2lucz8uZm9ybV92ZXJzaW9uXG5cblx0XHQjIOafpeeci+WOn+eUs+ivt+WNleaYr+WQpuacieWvueW6lOeahOWtkOihqFxuXHRcdGlmIG9yaWdpbmFsX2lucz8uZm9ybV92ZXJzaW9uID09IG9yaWdpbmFsX2luc19mb3JtPy5jdXJyZW50Py5faWRcblx0XHRcdG9yaWdpbmFsX2luc19maWVsZHMgPSBvcmlnaW5hbF9pbnNfZm9ybS5jdXJyZW50Py5maWVsZHNcblx0XHRcdG9yaWdpbmFsX2luc19maWVsZHMuZm9yRWFjaCAob3JpZ2luYWxfaW5zX2ZpZWxkKS0+XG5cdFx0XHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfaW5zX2ZpZWxkXCIsb3JpZ2luYWxfaW5zX2ZpZWxkPy5jb2RlXG5cdFx0XHRcdGlmIG9yaWdpbmFsX2luc19maWVsZD8uY29kZSA9PSBzdWJUYWJsZSAmJiBvcmlnaW5hbF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJ1xuXHRcdFx0XHRcdG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyA9IG9yaWdpbmFsX2luc19maWVsZD8uZmllbGRzXG5cdFx0ZWxzZVxuXHRcdFx0aWYgb3JpZ2luYWxfaW5zX2Zvcm0/Lmhpc3RvcnlzPy5sZW5ndGggPiAwXG5cdFx0XHRcdG9yaWdpbmFsX2luc19mb3JtLmhpc3RvcnlzLmZvckVhY2ggKG9oKS0+XG5cdFx0XHRcdFx0aWYgb3JpZ2luYWxfaW5zPy5mb3JtX3ZlcnNpb24gPT0gb2guX2lkXG5cdFx0XHRcdFx0XHRvcmlnaW5hbF9pbnNfZmllbGRzID0gb2g/LmZpZWxkc1xuXHRcdFx0XHRcdFx0b3JpZ2luYWxfaW5zX2ZpZWxkcy5mb3JFYWNoIChvcmlnaW5hbF9pbnNfZmllbGQpLT5cblx0XHRcdFx0XHRcdFx0aWYgb3JpZ2luYWxfaW5zX2ZpZWxkPy5jb2RlID09IHN1YlRhYmxlICYmIG9yaWdpbmFsX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnXG5cdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gb3JpZ2luYWxfaW5zX2ZpZWxkPy5maWVsZHNcblxuXHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfc3VidGFibGVfZmllbGRzXCIsb3JpZ2luYWxfc3VidGFibGVfZmllbGRzPy5sZW5ndGhcblxuXHRcdGlmIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkc1xuXHRcdFx0IyAjIOabtOaWsOatpemqpOeahOWAvFxuXHRcdFx0IyAxLuaJvuWIsOW9k+WJjeeahOatpemqpFxuXHRcdFx0IyAyLuW9k+WJjeatpemqpOS4rWFwcHJvdmVz5Lit55qEdmFsdWVzXG5cdFx0XHQjIDMu5ZyodmFsdWVz5Lit5om+5Yiw6KGo5qC8XG5cdFx0XHQjIDQu5qC55o2u6KGo5qC855qEZmllbGRz5bGe5oCn77yM5LiA5Liq5Liq55qE6LWL5YC8XG5cdFx0XHQjIDUu5oqK5aSN5Yi255qEcHVzaOWIsOihqOagvOaVsOe7hOeahOWQjumdolxuXHRcdFx0dHJhY2VzID0gb3JpZ2luYWxfaW5zPy50cmFjZXNcblxuXHRcdFx0dHJhY2UgPSB0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXVxuXG5cdFx0XHRhcHByb3ZlID0gdHJhY2U/LmFwcHJvdmVzWzBdXG5cblx0XHRcdHRhYmxlX2RhdGEgPSBhcHByb3ZlPy52YWx1ZXNbc3ViVGFibGVdIHx8IFtdXG5cblx0XHRcdHJvd19kYXRhID0ge31cblxuXHRcdFx0Y29sdW1ucy5mb3JFYWNoIChjb2x1bW4pLT5cblx0XHRcdFx0cm93X2RhdGFbY29sdW1uXSA9IGZvcndhcmRfaW5zX3ZhbHVlc1tjb2x1bW5dIHx8IFwiXCJcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRpZiByb3dfZGF0YSAmJiByb3dfZGF0YSAhPSB7fVxuXHRcdFx0XHR0YWJsZV9kYXRhLnB1c2ggcm93X2RhdGFcblx0XHRcdFx0dHJhY2VzW3RyYWNlcy5sZW5ndGgtMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXSA9IHRhYmxlX2RhdGFcblxuXHRcdFx0XHRjb25zb2xlLmxvZyB0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXNbc3ViVGFibGVdXG5cblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZShvcmlnaW5hbF9pbnNfaWQse1xuXHRcdFx0XHRcdCRzZXQ6e1xuXHRcdFx0XHRcdFx0J3RyYWNlcyc6dHJhY2VzXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xuXHRcdFx0XHRcdGNvZGU6IDIwMCxcblx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHQnc3VjY2Vzcyc6ICflm57loavmiJDlip8nXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcblx0XHRcdFx0XHRjb2RlOiAyMDAsXG5cdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0J2luZm8nOiAn5Zue5aGr5pWw5o2u5Li656m6J1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0ZWxzZVxuXHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xuXHRcdFx0XHRjb2RlOiAyMDAsXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHQnZXJyb3InOiAn5Y6f55Sz6K+35Y2V5peg55u45YWz5a2Q6KGoJ1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdGVsc2Vcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG5cdFx0XHRjb2RlOiAyMDAsXG5cdFx0XHRkYXRhOiB7XG5cdFx0XHRcdCdzdWNjZXNzJzogJ+eUs+ivt+WNleacque7k+adnydcblx0XHRcdH1cblx0XHR9XG4pIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9mb3J3YXJkX3JlZmlsbFwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYXBwcm92ZSwgY29sdW1ucywgZm9yd2FyZF9pbnMsIGZvcndhcmRfaW5zX3ZhbHVlcywgb3JpZ2luYWxfaW5zLCBvcmlnaW5hbF9pbnNfZmllbGRzLCBvcmlnaW5hbF9pbnNfZm9ybSwgb3JpZ2luYWxfaW5zX2lkLCBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNiwgcmVmNywgcmVmOCwgcmVmOSwgcm93X2RhdGEsIHN1YlRhYmxlLCB0YWJsZV9kYXRhLCB0cmFjZSwgdHJhY2VzO1xuICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWbnuWhq+WtkOihqD09PT09PT09PT1cIik7XG4gIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc3ViVGFibGVcIiwgcmVxICE9IG51bGwgPyAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLnN1YlRhYmxlIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgY29uc29sZS5sb2coXCI9PT09PT09PT3liIblj5Hlm57loavnmoTliJc9PT09PT09PT09XCIpO1xuICBjb25zb2xlLmxvZyhcInJlcT8ucXVlcnk/LmNvbHVtblwiLCByZXEgIT0gbnVsbCA/IChyZWYxID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMS5jb2x1bW4gOiB2b2lkIDAgOiB2b2lkIDApO1xuICBjb2x1bW5zID0gcmVxICE9IG51bGwgPyAocmVmMiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjIuY29sdW1uLnNwbGl0KCc7JykgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIGNvbnNvbGUubG9nKFwiY29sdW1uc1wiLCBjb2x1bW5zKTtcbiAgZm9yd2FyZF9pbnMgPSByZXEgIT0gbnVsbCA/IChyZWYzID0gcmVxLmJvZHkpICE9IG51bGwgPyByZWYzLmluc3RhbmNlIDogdm9pZCAwIDogdm9pZCAwO1xuICBzdWJUYWJsZSA9IHJlcSAhPSBudWxsID8gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LnN1YlRhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICBpZiAoKGZvcndhcmRfaW5zICE9IG51bGwgPyBmb3J3YXJkX2lucy5zdGF0ZSA6IHZvaWQgMCkgPT09IFwiY29tcGxldGVkXCIgJiYgKGZvcndhcmRfaW5zICE9IG51bGwgPyAocmVmNSA9IGZvcndhcmRfaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMpICE9IG51bGwgPyByZWY1Lmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwICYmIHN1YlRhYmxlICYmIGNvbHVtbnMpIHtcbiAgICBmb3J3YXJkX2luc192YWx1ZXMgPSBmb3J3YXJkX2lucyAhPSBudWxsID8gZm9yd2FyZF9pbnMudmFsdWVzIDogdm9pZCAwO1xuICAgIG9yaWdpbmFsX2luc19pZCA9IF8ubGFzdChmb3J3YXJkX2lucyAhPSBudWxsID8gZm9yd2FyZF9pbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcyA6IHZvaWQgMCk7XG4gICAgb3JpZ2luYWxfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob3JpZ2luYWxfaW5zX2lkKTtcbiAgICBvcmlnaW5hbF9pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUob3JpZ2luYWxfaW5zICE9IG51bGwgPyBvcmlnaW5hbF9pbnMuZm9ybSA6IHZvaWQgMCk7XG4gICAgb3JpZ2luYWxfaW5zX2ZpZWxkcyA9IFtdO1xuICAgIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyA9IFtdO1xuICAgIGNvbnNvbGUubG9nKFwib3JpZ2luYWxfaW5zX2Zvcm0/LmN1cnJlbnQ/Ll9pZFwiLCBvcmlnaW5hbF9pbnNfZm9ybSAhPSBudWxsID8gKHJlZjYgPSBvcmlnaW5hbF9pbnNfZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmNi5faWQgOiB2b2lkIDAgOiB2b2lkIDApO1xuICAgIGNvbnNvbGUubG9nKFwib3JpZ2luYWxfaW5zPy5mb3JtX3ZlcnNpb25cIiwgb3JpZ2luYWxfaW5zICE9IG51bGwgPyBvcmlnaW5hbF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKTtcbiAgICBpZiAoKG9yaWdpbmFsX2lucyAhPSBudWxsID8gb3JpZ2luYWxfaW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IChvcmlnaW5hbF9pbnNfZm9ybSAhPSBudWxsID8gKHJlZjcgPSBvcmlnaW5hbF9pbnNfZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmNy5faWQgOiB2b2lkIDAgOiB2b2lkIDApKSB7XG4gICAgICBvcmlnaW5hbF9pbnNfZmllbGRzID0gKHJlZjggPSBvcmlnaW5hbF9pbnNfZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmOC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICBvcmlnaW5hbF9pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24ob3JpZ2luYWxfaW5zX2ZpZWxkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib3JpZ2luYWxfaW5zX2ZpZWxkXCIsIG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApO1xuICAgICAgICBpZiAoKG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBzdWJUYWJsZSAmJiAob3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gb3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQuZmllbGRzIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKChvcmlnaW5hbF9pbnNfZm9ybSAhPSBudWxsID8gKHJlZjkgPSBvcmlnaW5hbF9pbnNfZm9ybS5oaXN0b3J5cykgIT0gbnVsbCA/IHJlZjkubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgb3JpZ2luYWxfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbihvaCkge1xuICAgICAgICAgIGlmICgob3JpZ2luYWxfaW5zICE9IG51bGwgPyBvcmlnaW5hbF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gb2guX2lkKSB7XG4gICAgICAgICAgICBvcmlnaW5hbF9pbnNfZmllbGRzID0gb2ggIT0gbnVsbCA/IG9oLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbF9pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24ob3JpZ2luYWxfaW5zX2ZpZWxkKSB7XG4gICAgICAgICAgICAgIGlmICgob3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IHN1YlRhYmxlICYmIChvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwib3JpZ2luYWxfc3VidGFibGVfZmllbGRzXCIsIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyAhPSBudWxsID8gb3JpZ2luYWxfc3VidGFibGVfZmllbGRzLmxlbmd0aCA6IHZvaWQgMCk7XG4gICAgaWYgKG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcykge1xuICAgICAgdHJhY2VzID0gb3JpZ2luYWxfaW5zICE9IG51bGwgPyBvcmlnaW5hbF9pbnMudHJhY2VzIDogdm9pZCAwO1xuICAgICAgdHJhY2UgPSB0cmFjZXNbdHJhY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgYXBwcm92ZSA9IHRyYWNlICE9IG51bGwgPyB0cmFjZS5hcHByb3Zlc1swXSA6IHZvaWQgMDtcbiAgICAgIHRhYmxlX2RhdGEgPSAoYXBwcm92ZSAhPSBudWxsID8gYXBwcm92ZS52YWx1ZXNbc3ViVGFibGVdIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgIHJvd19kYXRhID0ge307XG4gICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiByb3dfZGF0YVtjb2x1bW5dID0gZm9yd2FyZF9pbnNfdmFsdWVzW2NvbHVtbl0gfHwgXCJcIjtcbiAgICAgIH0pO1xuICAgICAgaWYgKHJvd19kYXRhICYmIHJvd19kYXRhICE9PSB7fSkge1xuICAgICAgICB0YWJsZV9kYXRhLnB1c2gocm93X2RhdGEpO1xuICAgICAgICB0cmFjZXNbdHJhY2VzLmxlbmd0aCAtIDFdLmFwcHJvdmVzWzBdLnZhbHVlc1tzdWJUYWJsZV0gPSB0YWJsZV9kYXRhO1xuICAgICAgICBjb25zb2xlLmxvZyh0cmFjZXNbdHJhY2VzLmxlbmd0aCAtIDFdLmFwcHJvdmVzWzBdLnZhbHVlc1tzdWJUYWJsZV0pO1xuICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKG9yaWdpbmFsX2luc19pZCwge1xuICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICd0cmFjZXMnOiB0cmFjZXNcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAnc3VjY2Vzcyc6ICflm57loavmiJDlip8nXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICdpbmZvJzogJ+WbnuWhq+aVsOaNruS4uuepuidcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAnZXJyb3InOiAn5Y6f55Sz6K+35Y2V5peg55u45YWz5a2Q6KGoJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ3N1Y2Nlc3MnOiAn55Sz6K+35Y2V5pyq57uT5p2fJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvZm9yd2FyZF90YWJsZV9yZWZpbGxcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcblx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWOn+ihqOWtkOihqD09PT09PT09PT1cIlxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8ub1RhYmxlXCIscmVxPy5xdWVyeT8ub1RhYmxlXG5cdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3njrDooajlrZDooag9PT09PT09PT09XCJcblx0XHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LmRUYWJsZVwiLHJlcT8ucXVlcnk/LmRUYWJsZVxuXHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT095Y6f6KGo5Y2V55qE5a2Q6KGo5Yy56YWN5YiXPT09PT09PT09PVwiXG5cdFx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5vTWF0Y2hDb2xcIixyZXE/LnF1ZXJ5Py5vTWF0Y2hDb2xcblx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PeeOsOihqOWNleeahOWtkOihqOWMuemFjeWIlz09PT09PT09PT1cIlxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uZE1hdGNoQ29sXCIscmVxPy5xdWVyeT8uZE1hdGNoQ29sXG5cdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3pnIDopoHlm57loavnmoTliJc9PT09PT09PT09XCJcdFxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8ucmVmaWxsQ29sXCIscmVxPy5xdWVyeT8ucmVmaWxsQ29sXG5cblx0XHQjIOWIhuWPkeeahOeUs+ivt+WNlVxuXHRcdGRfaW5zID0gcmVxPy5ib2R5Py5pbnN0YW5jZVxuXG5cdFx0XG5cdFx0aWYgZF9pbnM/LnN0YXRlID09IFwiY29tcGxldGVkXCJcblx0XHRcdGlmIHJlcT8ucXVlcnk/Lm9UYWJsZVxuXHRcdFx0XHRvX3RhYmxlID0gcmVxPy5xdWVyeT8ub1RhYmxlXG5cdFx0XHRcdGlmIHJlcT8ucXVlcnk/LmRUYWJsZVxuXHRcdFx0XHRcdGRfdGFibGUgPSByZXE/LnF1ZXJ5Py5kVGFibGVcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGRfdGFibGUgPSBvX3RhYmxlXG5cdFx0XHRcdGlmIHJlcT8ucXVlcnk/LmFUYWJsZVxuXHRcdFx0XHRcdGFfdGFibGUgPSByZXE/LnF1ZXJ5Py5hVGFibGVcblx0XHRcdFx0aWYgcmVxPy5xdWVyeT8ub01hdGNoQ29sXG5cdFx0XHRcdFx0b19tYXRjaF9jb2wgPSByZXE/LnF1ZXJ5Py5vTWF0Y2hDb2xcblx0XHRcdFx0XHRpZiByZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sID0gcmVxPy5xdWVyeT8uZE1hdGNoQ29sXG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZF9tYXRjaF9jb2wgPSBvX21hdGNoX2NvbFxuXHRcdFx0XHRcdGNvbHVtbnMgPSByZXE/LnF1ZXJ5Py5yZWZpbGxDb2wuc3BsaXQoJzsnKSB8fCBbXVxuXHRcdFx0XHRcdGNvbnNvbGUubG9nIFwiY29sdW1uc1wiLGNvbHVtbnNcdFx0XHRcdFx0XG5cblx0XHRcdFx0XHRpZiBjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoPDFcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT09PT09PT09PT09PT09PVwiXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyBkX3RhYmxlLCBvX21hdGNoX2NvbCwgY29sdW1uc1xuXG5cdFx0XHRcdFx0XHQjIOWIhuWPkeWbnuadpeeahOWAvFxuXHRcdFx0XHRcdFx0ZF9pbnNfdmFsdWVzID0gZF9pbnM/LnZhbHVlc1xuXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNlSBmb3JtIOihqOWtl+autVxuXHRcdFx0XHRcdFx0b19pbnNfaWQgPSBfLmxhc3QgZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcblx0XHRcdFx0XHRcdG9faW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob19pbnNfaWQpXG5cdFx0XHRcdFx0XHRvX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShvX2lucz8uZm9ybSlcblxuXHRcdFx0XHRcdFx0ZF9pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZF9pbnM/LmZvcm0pXG5cblx0XHRcdFx0XHRcdCMg5Y6f55Sz6K+35Y2V55qEIGZpZWxkc1xuXHRcdFx0XHRcdFx0b19pbnNfZmllbGRzID0gW11cblxuXHRcdFx0XHRcdFx0IyDljp/lrZDooajlrZfmrrVcblx0XHRcdFx0XHRcdG9fc3VidGFibGVfZmllbGRzID0gW11cblxuXHRcdFx0XHRcdFx0IyDliIblj5HnlLPor7fljZXnmoQgZmllbGRzXG5cdFx0XHRcdFx0XHRkX2luc19maWVsZHMgPSBbXVxuXHRcdFx0XHRcdFx0IyDnjrDnlLPor7fljZXlrZfooajlrZfmrrVcblx0XHRcdFx0XHRcdGRfc3VidGFibGVfZmllbGRzID0gW11cblxuXHRcdFx0XHRcdFx0IyDotYvlgLzlr7nlupTnmoTlrZfmrrVcblx0XHRcdFx0XHRcdGNvbHVtbl9saXN0ID0gW11cblxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQjIOWIhuWPkeWQjueUs+ivt+WNleeahCDlrZDooajlgLxcblx0XHRcdFx0XHRcdGRfdGFibGVfdmFsdWVzID0gW11cblxuXHRcdFx0XHRcdFx0IyDmn6XnnIvljp/nlLPor7fljZXmmK/lkKbmnInlr7nlupTnmoTlrZDooahcblx0XHRcdFx0XHRcdGlmIG9faW5zPy5mb3JtX3ZlcnNpb24gPT0gb19pbnNfZm9ybT8uY3VycmVudD8uX2lkXG5cdFx0XHRcdFx0XHRcdG9faW5zX2ZpZWxkcyA9IG9faW5zX2Zvcm0/LmN1cnJlbnQ/LmZpZWxkc1xuXHRcdFx0XHRcdFx0XHRvX2luc19maWVsZHMuZm9yRWFjaCAob19pbnNfZmllbGQpLT5cblx0XHRcdFx0XHRcdFx0XHRpZiBvX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIG9faW5zX2ZpZWxkPy5jb2RlID09IG9fdGFibGVcblx0XHRcdFx0XHRcdFx0XHRcdG9fc3VidGFibGVfZmllbGRzID0gb19pbnNfZmllbGQ/LmZpZWxkc1xuXHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRpZiBvX2luc19mb3JtPy5oaXN0b3J5cz8ubGVuZ3RoID4gMFxuXHRcdFx0XHRcdFx0XHRcdG9faW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaCAob2gpLT5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIG9faW5zPy5mb3JtX3ZlcnNpb24gPT0gb2guX2lkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9faW5zX2ZpZWxkcyA9IG9oPy5maWVsZHNcblx0XHRcdFx0XHRcdFx0XHRcdFx0b19pbnNfZmllbGRzLmZvckVhY2ggKG9faW5zX2ZpZWxkKS0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgb19pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBvX2luc19maWVsZD8uY29kZSA9PSBvX3RhYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvX3N1YnRhYmxlX2ZpZWxkcyA9IG9faW5zX2ZpZWxkPy5maWVsZHNcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0IyDmn6XnnIvliIblj5HnmoTnlLPor7fljZXmmK/lkKbmnInlr7nlupTnmoTlrZfooahcblx0XHRcdFx0XHRcdGlmIGRfaW5zPy5mb3JtX3ZlcnNpb24gPT0gZF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXG5cdFx0XHRcdFx0XHRcdGRfaW5zX2ZpZWxkcyA9IGRfaW5zX2Zvcm0/LmN1cnJlbnQ/LmZpZWxkc1xuXHRcdFx0XHRcdFx0XHRkX2luc19maWVsZHMuZm9yRWFjaCAoZF9pbnNfZmllbGQpLT5cblx0XHRcdFx0XHRcdFx0XHRpZigoZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBkX3RhYmxlKXx8KGFfdGFibGUgJiYgZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBhX3RhYmxlKSlcblx0XHRcdFx0XHRcdFx0XHRcdGRfc3VidGFibGVfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuY29uY2F0IGRfaW5zX2ZpZWxkPy5maWVsZHNcblx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdFx0aWYgZF9pbnNfZm9ybT8uaGlzdG9yeXM/Lmxlbmd0aCA+IDBcblx0XHRcdFx0XHRcdFx0XHRkX2luc19mb3JtLmhpc3RvcnlzLmZvckVhY2ggKGRoKS0+XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiBkX2lucz8uZm9ybV92ZXJzaW9uID09IGRoLl9pZFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRkX2luc19maWVsZHMgPSBkaD8uZmllbGRzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRfaW5zX2ZpZWxkcy5mb3JFYWNoIChkX2luc19maWVsZCktPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmKChkX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIGRfaW5zX2ZpZWxkPy5jb2RlID09IGRfdGFibGUpfHwoYV90YWJsZSAmJiBkX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIGRfaW5zX2ZpZWxkPy5jb2RlID09IGFfdGFibGUpKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQgZF9pbnNfZmllbGQ/LmZpZWxkc1xuXHRcdFx0XHRcdFx0XG5cblx0XHRcdFx0XHRcdFxuXG5cdFx0XHRcdFx0XHRpZiBvX3N1YnRhYmxlX2ZpZWxkcy5sZW5ndGggPT0gMFxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyBcIm9fc3VidGFibGVfZmllbGRzXCIsb19zdWJ0YWJsZV9maWVsZHNcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleaXoOWvueW6lOWtkOihqCcpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiBkX3N1YnRhYmxlX2ZpZWxkcy5sZW5ndGggPT0gMFxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5YiG5Y+R55qE55Sz6K+35Y2V5peg5a+55bqU5a2Q6KGoJyk7XG5cblx0XHRcdFx0XHRcdGRfdGFibGVfdmFsdWVzID0gZF9pbnM/LnZhbHVlc1tkX3RhYmxlXSB8fCBbXVxuXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmIGFfdGFibGVcblx0XHRcdFx0XHRcdFx0YV90YWJsZV92YWx1ZXMgPSAgZF9pbnM/LnZhbHVlc1thX3RhYmxlXSB8fCBbXVxuXHRcdFx0XHRcdFx0XHRpZiBhX3RhYmxlX3ZhbHVlcyAmJiBhX3RhYmxlX3ZhbHVlcz8ubGVuZ3RoPT1kX3RhYmxlX3ZhbHVlcz8ubGVuZ3RoXG5cdFx0XHRcdFx0XHRcdFx0YV90YWJsZV92YWx1ZXMuZm9yRWFjaCAoYV9yb3csaW5kZXgpLT5cblx0XHRcdFx0XHRcdFx0XHRcdGRfdGFibGVfdmFsdWVzW2luZGV4XVtrZXldID0gdmFsdWUgZm9yIGtleSx2YWx1ZSBvZiBhX3Jvd1xuXG5cdFx0XHRcdFx0XHRpZiBkX3RhYmxlX3ZhbHVlcy5sZW5ndGggPT0gMFxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5YiG5Y+R55qE55Sz6K+35Y2V5a2Q6KGo5pWw5o2u5Li656m6Jyk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdG9fbWF0Y2hfY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcigobSktPnJldHVybiBtLmNvZGU9PW9fbWF0Y2hfY29sKVxuXHRcdFx0XHRcdFx0ZF9tYXRjaF9jb2xfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKChtKS0+cmV0dXJuIG0uY29kZT09ZF9tYXRjaF9jb2wpXG5cblx0XHRcdFx0XHRcdCMg5Yy56YWN5YiX5Yik5patXG5cdFx0XHRcdFx0XHRpZiBvX21hdGNoX2NvbF9maWVsZHMubGVuZ3RoID09IDBcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuXG5cdFx0XHRcdFx0XHRpZiBkX21hdGNoX2NvbF9maWVsZHMubGVuZ3RoID09IDBcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuXG5cdFx0XHRcdFx0XHQjIOWIpOaWreWMuemFjeWIl+Wtl+auteeahOWAvOexu+Wei+aYr+WQpuS4gOiHtFxuXHRcdFx0XHRcdFx0b19tYXRjaF9jb2xfZmllbGQgPSBvX21hdGNoX2NvbF9maWVsZHNbMF1cblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sX2ZpZWxkID0gZF9tYXRjaF9jb2xfZmllbGRzWzBdXG5cblx0XHRcdFx0XHRcdGlmIG9fbWF0Y2hfY29sX2ZpZWxkPy50eXBlICE9IGRfbWF0Y2hfY29sX2ZpZWxkPy50eXBlXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlkozljp/nlLPor7fljZXlrZDooajnmoTljLnphY3liJflrZfmrrXkuI3kuIDoh7QnKTtcblxuXHRcdFx0XHRcdFx0IyDlm57loavliJfliKTmlq1cblx0XHRcdFx0XHRcdGNvbHVtbnMuZm9yRWFjaCAoY29sdW1uKS0+XG5cdFx0XHRcdFx0XHRcdGNvbHMgPSBjb2x1bW4uc3BsaXQoJy0nKSB8fCBbXVxuXHRcdFx0XHRcdFx0XHRpZiBjb2xzLmxlbmd0aCA9PSAyXG5cdFx0XHRcdFx0XHRcdFx0b19jb2wgPSBjb2xzWzBdXG5cdFx0XHRcdFx0XHRcdFx0ZF9jb2wgPSBjb2xzWzFdXG5cdFx0XHRcdFx0XHRcdFx0b19jb2xfZmllbGRzID0gb19zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKChtKS0+cmV0dXJuIG0uY29kZT09b19jb2wpXG5cdFx0XHRcdFx0XHRcdFx0ZF9jb2xfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKChtKS0+cmV0dXJuIG0uY29kZT09ZF9jb2wpXG5cblx0XHRcdFx0XHRcdFx0XHQjIOWIpOaWreaYr+WQpuacieWvueW6lOeahOWbnuWhq+WIl1xuXHRcdFx0XHRcdFx0XHRcdGlmIG9fY29sX2ZpZWxkcy5sZW5ndGggPT0gMFxuXHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleWtkOihqOaXoOWvueW6lOWbnuWhq+WIlycpO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgZF9jb2xfZmllbGRzLmxlbmd0aCA9PSAwXG5cdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5YiG5Y+R55qE55Sz6K+35Y2V5a2Q6KGo5peg5a+55bqU5Zue5aGr5YiXJyk7XG5cblx0XHRcdFx0XHRcdFx0XHQjIOWIpOaWreWMuemFjeWIl+Wtl+auteeahOWAvOexu+Wei+aYr+WQpuS4gOiHtFxuXHRcdFx0XHRcdFx0XHRcdGlmIG9fY29sX2ZpZWxkcz8udHlwZSAhPSBkX2NvbF9maWVsZHM/LnR5cGVcblx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICflm57loavliJflrZfmrrXnsbvlnovkuI3kuIDoh7QnKTtcblx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRjb2wgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvX2NvbDogb19jb2wsXG5cdFx0XHRcdFx0XHRcdFx0XHRkX2NvbDogZF9jb2xcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uX2xpc3QucHVzaCBjb2xcblxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WbnuWhq+WIl+S4jeWMuemFjScpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQjIOi1i+WAvFxuXHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyAgJz09PT09PWNvbHVtbl9saXN0PT09PT09PScsY29sdW1uX2xpc3RcblxuXHRcdFx0XHRcdFx0dHJhY2VzID0gb19pbnM/LnRyYWNlc1xuXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahCBzdGVwIFxuXHRcdFx0XHRcdFx0dHJhY2UgPSB0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXVxuXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahOW9k+WJjeatpemqpFxuXHRcdFx0XHRcdFx0YXBwcm92ZSA9IHRyYWNlPy5hcHByb3Zlc1swXVxuXG5cdFx0XHRcdFx0XHQjIOWFg+eUs+ivt+WNleeahOW9k+WJjSB2YWx1ZSDnmoQg5a2Q6KGoXG5cdFx0XHRcdFx0XHR0YWJsZV9kYXRhID0gYXBwcm92ZT8udmFsdWVzW29fdGFibGVdIHx8IFtdXG5cblxuXHRcdFx0XHRcdFx0IyDmoLnmja4gY29sdW1uX2xpc3Qg6LWL5YC85a+55bqU5a2X5q616L+b6KGM6LWL5YC8XG5cdFx0XHRcdFx0XHQjIOW+queOr+WIhuWPkeeUs+ivt+WNleeahOavj+ihjFxuXHRcdFx0XHRcdFx0ZF90YWJsZV92YWx1ZXMuZm9yRWFjaCAoZF9yb3cpLT5cblx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImRfcm93XCIsZF9yb3dcblx0XHRcdFx0XHRcdFx0IyDmn6Xmib7ljLnphY3nmoTliJfmmK/lkKbkuI7lvZPliY3nmoTljLnphY3liJfkuIDoh7Rcblx0XHRcdFx0XHRcdFx0aGFzX29iaiA9IGZhbHNlXG5cdFx0XHRcdFx0XHRcdGNvdW50ID0gLTFcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdCMg55yL5Y6f5a2Q6KGo5piv5ZCm5pyJ6K+l5Yy56YWN5YiXXG5cdFx0XHRcdFx0XHRcdHRhYmxlX2RhdGEuZm9yRWFjaCAob19yb3csIGluZGV4KS0+XG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcIm9fcm93XCIsIG9fcm93XG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImluZGV4XCIsaW5kZXhcblx0XHRcdFx0XHRcdFx0XHQjIGNvbnNvbGUubG9nIFwib19yb3dbb19tYXRjaF9jb2xdXCIsb19yb3dbb19tYXRjaF9jb2xdXG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImRfcm93W2RfbWF0Y2hfY29sXVwiLGRfcm93W2RfbWF0Y2hfY29sXVxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJvX3Jvd1tvX21hdGNoX2NvbF0gPT0gZF9yb3dbZF9tYXRjaF9jb2xdXCIsb19yb3dbb19tYXRjaF9jb2xdID09IGRfcm93W2RfbWF0Y2hfY29sXVxuXG5cdFx0XHRcdFx0XHRcdFx0aWYgb19yb3dbb19tYXRjaF9jb2xdID09IGRfcm93W2RfbWF0Y2hfY29sXVxuXHRcdFx0XHRcdFx0XHRcdFx0aGFzX29iaiA9IHRydWVcblx0XHRcdFx0XHRcdFx0XHRcdGNvdW50ID0gaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahOWMuemFjeWtl+auteacieWAvFxuXHRcdFx0XHRcdFx0XHQjIGNvbnNvbGUubG9nIFwiaGFzX29ialwiLGhhc19vYmpcblx0XHRcdFx0XHRcdFx0aWYgaGFzX29iaj09dHJ1ZVxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbl9saXN0LmZvckVhY2ggKGNvbCktPlxuXHRcdFx0XHRcdFx0XHRcdFx0dGFibGVfZGF0YVtjb3VudF1bY29sPy5vX2NvbF0gPSBkX3Jvd1tjb2w/LmRfY29sXVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHJvd19kYXRhID0ge31cblx0XHRcdFx0XHRcdFx0XHRyb3dfZGF0YVtvX21hdGNoX2NvbF0gPSBkX3Jvd1tkX21hdGNoX2NvbF1cblx0XHRcdFx0XHRcdFx0XHRjb2x1bW5fbGlzdC5mb3JFYWNoIChjb2wpLT5cblx0XHRcdFx0XHRcdFx0XHRcdHJvd19kYXRhW2NvbD8ub19jb2xdID0gZF9yb3dbY29sPy5kX2NvbF1cblx0XHRcdFx0XHRcdFx0XHR0YWJsZV9kYXRhLnB1c2ggcm93X2RhdGFcblxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXMgPSBvX2lucz8udmFsdWVzXG5cdFx0XHRcdFx0XHR0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXNbb190YWJsZV0gPSB0YWJsZV9kYXRhXG5cblx0XHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUob19pbnNfaWQse1xuXHRcdFx0XHRcdFx0XHQkc2V0Ontcblx0XHRcdFx0XHRcdFx0XHQndHJhY2VzJzp0cmFjZXNcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pXG5cblx0XHRcdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcblx0XHRcdFx0XHRcdFx0Y29kZTogMjAwLFxuXHRcdFx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRcdFx0J3N1Y2Nlc3MnOiAn5Zue5aGr5oiQ5YqfJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAnd2ViaG9va+acqumFjee9ruWtkOihqOWbnuWhq+WIl+Wtl+autSBjb2x1bW5zIOWAvCcpO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljLnphY3liJflrZfmrrUgb01hdGNoQ29sIOWAvCcpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAnd2ViaG9va+acqumFjee9ruWOn+ihqOWNleWtkOihqCBvVGFibGUg5YC8Jyk7XG5cdFx0ZWxzZVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+eUs+ivt+WNleacque7k+adnycpO1xuXHRjYXRjaCBlXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xuXHRcdFx0Y29kZTogMjAwLFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHRlcnJvcnM6IFtlXVxuXHRcdFx0fVxuXHRcdH1cbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2ZvcndhcmRfdGFibGVfcmVmaWxsXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhX3RhYmxlLCBhX3RhYmxlX3ZhbHVlcywgYXBwcm92ZSwgY29sdW1uX2xpc3QsIGNvbHVtbnMsIGRfaW5zLCBkX2luc19maWVsZHMsIGRfaW5zX2Zvcm0sIGRfaW5zX3ZhbHVlcywgZF9tYXRjaF9jb2wsIGRfbWF0Y2hfY29sX2ZpZWxkLCBkX21hdGNoX2NvbF9maWVsZHMsIGRfc3VidGFibGVfZmllbGRzLCBkX3RhYmxlLCBkX3RhYmxlX3ZhbHVlcywgZSwgb19pbnMsIG9faW5zX2ZpZWxkcywgb19pbnNfZm9ybSwgb19pbnNfaWQsIG9fbWF0Y2hfY29sLCBvX21hdGNoX2NvbF9maWVsZCwgb19tYXRjaF9jb2xfZmllbGRzLCBvX3N1YnRhYmxlX2ZpZWxkcywgb190YWJsZSwgcmVmLCByZWYxLCByZWYxMCwgcmVmMTEsIHJlZjEyLCByZWYxMywgcmVmMTQsIHJlZjE1LCByZWYxNiwgcmVmMTcsIHJlZjE4LCByZWYxOSwgcmVmMiwgcmVmMjAsIHJlZjIxLCByZWYyMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNiwgcmVmNywgcmVmOCwgcmVmOSwgdGFibGVfZGF0YSwgdHJhY2UsIHRyYWNlcztcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWOn+ihqOWtkOihqD09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5vVGFibGVcIiwgcmVxICE9IG51bGwgPyAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLm9UYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3njrDooajlrZDooag9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uZFRhYmxlXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmRUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3ljp/ooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8ub01hdGNoQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLm9NYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3njrDooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uZE1hdGNoQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLmRNYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3pnIDopoHlm57loavnmoTliJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8ucmVmaWxsQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LnJlZmlsbENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgZF9pbnMgPSByZXEgIT0gbnVsbCA/IChyZWY1ID0gcmVxLmJvZHkpICE9IG51bGwgPyByZWY1Lmluc3RhbmNlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICgoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLnN0YXRlIDogdm9pZCAwKSA9PT0gXCJjb21wbGV0ZWRcIikge1xuICAgICAgaWYgKHJlcSAhPSBudWxsID8gKHJlZjYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY2Lm9UYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCkge1xuICAgICAgICBvX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmNyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjcub1RhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmOCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjguZFRhYmxlIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgICAgICAgZF90YWJsZSA9IHJlcSAhPSBudWxsID8gKHJlZjkgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY5LmRUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkX3RhYmxlID0gb190YWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmMTAgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxMC5hVGFibGUgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICBhX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmMTEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxMS5hVGFibGUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcSAhPSBudWxsID8gKHJlZjEyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMTIub01hdGNoQ29sIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgICAgICAgb19tYXRjaF9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWYxMyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEzLm9NYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmMTQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNC5kTWF0Y2hDb2wgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sID0gcmVxICE9IG51bGwgPyAocmVmMTUgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNS5kTWF0Y2hDb2wgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sID0gb19tYXRjaF9jb2w7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbHVtbnMgPSAocmVxICE9IG51bGwgPyAocmVmMTYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNi5yZWZpbGxDb2wuc3BsaXQoJzsnKSA6IHZvaWQgMCA6IHZvaWQgMCkgfHwgW107XG4gICAgICAgICAgY29uc29sZS5sb2coXCJjb2x1bW5zXCIsIGNvbHVtbnMpO1xuICAgICAgICAgIGlmIChjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCI9PT09PT09PT09PT09PT09PT09PT09XCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZF90YWJsZSwgb19tYXRjaF9jb2wsIGNvbHVtbnMpO1xuICAgICAgICAgICAgZF9pbnNfdmFsdWVzID0gZF9pbnMgIT0gbnVsbCA/IGRfaW5zLnZhbHVlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIG9faW5zX2lkID0gXy5sYXN0KGRfaW5zICE9IG51bGwgPyBkX2lucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIDogdm9pZCAwKTtcbiAgICAgICAgICAgIG9faW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob19pbnNfaWQpO1xuICAgICAgICAgICAgb19pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUob19pbnMgIT0gbnVsbCA/IG9faW5zLmZvcm0gOiB2b2lkIDApO1xuICAgICAgICAgICAgZF9pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLmZvcm0gOiB2b2lkIDApO1xuICAgICAgICAgICAgb19pbnNfZmllbGRzID0gW107XG4gICAgICAgICAgICBvX3N1YnRhYmxlX2ZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgZF9pbnNfZmllbGRzID0gW107XG4gICAgICAgICAgICBkX3N1YnRhYmxlX2ZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgY29sdW1uX2xpc3QgPSBbXTtcbiAgICAgICAgICAgIGRfdGFibGVfdmFsdWVzID0gW107XG4gICAgICAgICAgICBpZiAoKG9faW5zICE9IG51bGwgPyBvX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApID09PSAob19pbnNfZm9ybSAhPSBudWxsID8gKHJlZjE3ID0gb19pbnNfZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmMTcuX2lkIDogdm9pZCAwIDogdm9pZCAwKSkge1xuICAgICAgICAgICAgICBvX2luc19maWVsZHMgPSBvX2luc19mb3JtICE9IG51bGwgPyAocmVmMTggPSBvX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYxOC5maWVsZHMgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIG9faW5zX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKG9faW5zX2ZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKChvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScgJiYgKG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gb190YWJsZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG9fc3VidGFibGVfZmllbGRzID0gb19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKChvX2luc19mb3JtICE9IG51bGwgPyAocmVmMTkgPSBvX2luc19mb3JtLmhpc3RvcnlzKSAhPSBudWxsID8gcmVmMTkubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgICAgICAgICBvX2luc19mb3JtLmhpc3RvcnlzLmZvckVhY2goZnVuY3Rpb24ob2gpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgob19pbnMgIT0gbnVsbCA/IG9faW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IG9oLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICBvX2luc19maWVsZHMgPSBvaCAhPSBudWxsID8gb2guZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb19pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24ob19pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoKG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAob19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBvX3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb19zdWJ0YWJsZV9maWVsZHMgPSBvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQuZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IChkX2luc19mb3JtICE9IG51bGwgPyAocmVmMjAgPSBkX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYyMC5faWQgOiB2b2lkIDAgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIGRfaW5zX2ZpZWxkcyA9IGRfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYyMSA9IGRfaW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjIxLmZpZWxkcyA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgZF9pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZF9pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScgJiYgKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gZF90YWJsZSkgfHwgKGFfdGFibGUgJiYgKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBhX3RhYmxlKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRfc3VidGFibGVfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuY29uY2F0KGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC5maWVsZHMgOiB2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoKGRfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYyMiA9IGRfaW5zX2Zvcm0uaGlzdG9yeXMpICE9IG51bGwgPyByZWYyMi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICAgICAgICAgIGRfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbihkaCkge1xuICAgICAgICAgICAgICAgICAgaWYgKChkX2lucyAhPSBudWxsID8gZF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gZGguX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRfaW5zX2ZpZWxkcyA9IGRoICE9IG51bGwgPyBkaC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihkX2luc19maWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgoKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBkX3RhYmxlKSB8fCAoYV90YWJsZSAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnICYmIChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IGFfdGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9fc3VidGFibGVfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9fc3VidGFibGVfZmllbGRzXCIsIG9fc3VidGFibGVfZmllbGRzKTtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleaXoOWvueW6lOWtkOihqCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRfc3VidGFibGVfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5YiG5Y+R55qE55Sz6K+35Y2V5peg5a+55bqU5a2Q6KGoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkX3RhYmxlX3ZhbHVlcyA9IChkX2lucyAhPSBudWxsID8gZF9pbnMudmFsdWVzW2RfdGFibGVdIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChhX3RhYmxlKSB7XG4gICAgICAgICAgICAgIGFfdGFibGVfdmFsdWVzID0gKGRfaW5zICE9IG51bGwgPyBkX2lucy52YWx1ZXNbYV90YWJsZV0gOiB2b2lkIDApIHx8IFtdO1xuICAgICAgICAgICAgICBpZiAoYV90YWJsZV92YWx1ZXMgJiYgKGFfdGFibGVfdmFsdWVzICE9IG51bGwgPyBhX3RhYmxlX3ZhbHVlcy5sZW5ndGggOiB2b2lkIDApID09PSAoZF90YWJsZV92YWx1ZXMgIT0gbnVsbCA/IGRfdGFibGVfdmFsdWVzLmxlbmd0aCA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgICAgICBhX3RhYmxlX3ZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGFfcm93LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGtleSwgcmVzdWx0cywgdmFsdWU7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhX3Jvdykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFfcm93W2tleV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChkX3RhYmxlX3ZhbHVlc1tpbmRleF1ba2V5XSA9IHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZF90YWJsZV92YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajmlbDmja7kuLrnqbonKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9fbWF0Y2hfY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtLmNvZGUgPT09IG9fbWF0Y2hfY29sO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkX21hdGNoX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgICByZXR1cm4gbS5jb2RlID09PSBkX21hdGNoX2NvbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG9fbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRfbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb19tYXRjaF9jb2xfZmllbGQgPSBvX21hdGNoX2NvbF9maWVsZHNbMF07XG4gICAgICAgICAgICBkX21hdGNoX2NvbF9maWVsZCA9IGRfbWF0Y2hfY29sX2ZpZWxkc1swXTtcbiAgICAgICAgICAgIGlmICgob19tYXRjaF9jb2xfZmllbGQgIT0gbnVsbCA/IG9fbWF0Y2hfY29sX2ZpZWxkLnR5cGUgOiB2b2lkIDApICE9PSAoZF9tYXRjaF9jb2xfZmllbGQgIT0gbnVsbCA/IGRfbWF0Y2hfY29sX2ZpZWxkLnR5cGUgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlkozljp/nlLPor7fljZXlrZDooajnmoTljLnphY3liJflrZfmrrXkuI3kuIDoh7QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgICAgICAgdmFyIGNvbCwgY29scywgZF9jb2wsIGRfY29sX2ZpZWxkcywgb19jb2wsIG9fY29sX2ZpZWxkcztcbiAgICAgICAgICAgICAgY29scyA9IGNvbHVtbi5zcGxpdCgnLScpIHx8IFtdO1xuICAgICAgICAgICAgICBpZiAoY29scy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBvX2NvbCA9IGNvbHNbMF07XG4gICAgICAgICAgICAgICAgZF9jb2wgPSBjb2xzWzFdO1xuICAgICAgICAgICAgICAgIG9fY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb2RlID09PSBvX2NvbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29kZSA9PT0gZF9jb2w7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKG9fY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfljp/nlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChvX2NvbF9maWVsZHMgIT0gbnVsbCA/IG9fY29sX2ZpZWxkcy50eXBlIDogdm9pZCAwKSAhPT0gKGRfY29sX2ZpZWxkcyAhPSBudWxsID8gZF9jb2xfZmllbGRzLnR5cGUgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5a2X5q6157G75Z6L5LiN5LiA6Ie0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbCA9IHtcbiAgICAgICAgICAgICAgICAgIG9fY29sOiBvX2NvbCxcbiAgICAgICAgICAgICAgICAgIGRfY29sOiBkX2NvbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbl9saXN0LnB1c2goY29sKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5LiN5Yy56YWNJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2VzID0gb19pbnMgIT0gbnVsbCA/IG9faW5zLnRyYWNlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIHRyYWNlID0gdHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGFwcHJvdmUgPSB0cmFjZSAhPSBudWxsID8gdHJhY2UuYXBwcm92ZXNbMF0gOiB2b2lkIDA7XG4gICAgICAgICAgICB0YWJsZV9kYXRhID0gKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUudmFsdWVzW29fdGFibGVdIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgICAgICAgIGRfdGFibGVfdmFsdWVzLmZvckVhY2goZnVuY3Rpb24oZF9yb3cpIHtcbiAgICAgICAgICAgICAgdmFyIGNvdW50LCBoYXNfb2JqLCByb3dfZGF0YTtcbiAgICAgICAgICAgICAgaGFzX29iaiA9IGZhbHNlO1xuICAgICAgICAgICAgICBjb3VudCA9IC0xO1xuICAgICAgICAgICAgICB0YWJsZV9kYXRhLmZvckVhY2goZnVuY3Rpb24ob19yb3csIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKG9fcm93W29fbWF0Y2hfY29sXSA9PT0gZF9yb3dbZF9tYXRjaF9jb2xdKSB7XG4gICAgICAgICAgICAgICAgICBoYXNfb2JqID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChoYXNfb2JqID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbl9saXN0LmZvckVhY2goZnVuY3Rpb24oY29sKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVfZGF0YVtjb3VudF1bY29sICE9IG51bGwgPyBjb2wub19jb2wgOiB2b2lkIDBdID0gZF9yb3dbY29sICE9IG51bGwgPyBjb2wuZF9jb2wgOiB2b2lkIDBdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvd19kYXRhID0ge307XG4gICAgICAgICAgICAgICAgcm93X2RhdGFbb19tYXRjaF9jb2xdID0gZF9yb3dbZF9tYXRjaF9jb2xdO1xuICAgICAgICAgICAgICAgIGNvbHVtbl9saXN0LmZvckVhY2goZnVuY3Rpb24oY29sKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcm93X2RhdGFbY29sICE9IG51bGwgPyBjb2wub19jb2wgOiB2b2lkIDBdID0gZF9yb3dbY29sICE9IG51bGwgPyBjb2wuZF9jb2wgOiB2b2lkIDBdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZV9kYXRhLnB1c2gocm93X2RhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzID0gb19pbnMgIT0gbnVsbCA/IG9faW5zLnZhbHVlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzW29fdGFibGVdID0gdGFibGVfZGF0YTtcbiAgICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUob19pbnNfaWQsIHtcbiAgICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICAgICd0cmFjZXMnOiB0cmFjZXNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5a2Q6KGo5Zue5aGr5YiX5a2X5q61IGNvbHVtbnMg5YC8Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5Yy56YWN5YiX5a2X5q61IG9NYXRjaENvbCDlgLwnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljp/ooajljZXlrZDooaggb1RhYmxlIOWAvCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn55Sz6K+35Y2V5pyq57uT5p2fJyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtlXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvc3ViX3RhYmxlX3NvcnRcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHR0cnlcbiAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PT09PT3lrZDooag9PT09PT09PT09XCJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zdWJUYWJsZVwiLHJlcT8ucXVlcnk/LnN1YlRhYmxlXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGo5oC75YiG5YiXPT09PT09PT09PVwiXG4gICAgICAgIGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uc3VtQ29sXCIscmVxPy5xdWVyeT8uc3VtQ29sXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGo5o6S5bqP5YiXPT09PT09PT09PVwiXG4gICAgICAgIGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uc29ydENvbFwiLHJlcT8ucXVlcnk/LnNvcnRDb2xcbiAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PT09PT3lrZDooajljZXliJfpnIDopoHorqHnrpfnmoTlkow9PT09PT09PT09XCJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXCIscmVxPy5xdWVyeT8uc2luZ2xlQ29sc1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHN1Yl90YWJsZSA9IHJlcT8ucXVlcnk/LnN1YlRhYmxlXG4gICAgICAgIGlmICFzdWJfdGFibGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zdWJfdGFibGU9PT09PT1cIlxuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3ViVGFibGUg5a2X5q61JyApO1xuICAgICAgICBcbiAgICAgICAgc3VtX2NvbCA9IHJlcT8ucXVlcnk/LnN1bUNvbFxuICAgICAgICBpZiAhc3VtX2NvbFxuICAgICAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PXN1bV9jb2w9PT09PT1cIlxuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3VtQ29sIOWtl+autScgKTtcbiAgICAgICAgXG4gICAgICAgIHNvcnRfY29sID0gcmVxPy5xdWVyeT8uc29ydENvbFxuICAgICAgICBpZiAhc29ydF9jb2xcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zb3J0X2NvbD09PT09PVwiXG4gICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICd3ZWJob29rIOacqumFjee9riBzb3J0Q29sIOWtl+autScgKTtcbiAgICAgICAgXG4gICAgICAgICMgc2luZ2xlX2NvbHMgPSByZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXG4gICAgICAgICMgaWYgIXNpbmdsZV9jb2xzXG4gICAgICAgICMgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zaW5nbGVfY29scz09PT09PVwiXG5cbiAgICAgICAgIyAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc2luZ2xlQ29scyDlrZfmrrUnICk7XG4gICAgICAgIFxuICAgICAgICBpbnMgPSByZXE/LmJvZHk/Lmluc3RhbmNlXG4gICAgICAgIFxuICAgICAgICBzdWJfdGFibGVfdmFsdWVzID0gaW5zLnZhbHVlc1tzdWJfdGFibGVdXG4gICAgICAgIFxuICAgICAgICBpZiBzdWJfdGFibGVfdmFsdWVzPy5sZW5ndGggPiAwIFxuICAgICAgICAgICAgIyAjIOagueaNriBzdWJfdGFibGVfdmFsdWVzIOi/m+ihjOaOkuW6j1xuICAgICAgICAgICAgIyA9PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAjIOaOkuW6j+Wtl+aute+8jOWFs+mUruWtl++8jOato+W6jyh0cnVlKS/lgJLluo8oZmFsc2UpXG4gICAgICAgICAgICBgZnVuY3Rpb24gSnNvblNvcnQoanNvbkFyciwga2V5LCBhc2Mpe1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaj0xLGpsPWpzb25BcnIubGVuZ3RoO2ogPCBqbDtqKyspe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IGpzb25BcnJbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgID0gTnVtYmVyKHRlbXBba2V5XSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpICAgID0gai0xO1xuICAgICAgICAgICAgICAgICAgICBpZihhc2M9PXRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoaSA+PTAgJiYgTnVtYmVyKGpzb25BcnJbaV1ba2V5XSk+dmFsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSBqc29uQXJyW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLTE7ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGkgPj0wICYmIE51bWJlcihqc29uQXJyW2ldW2tleV0pPHZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0ganNvbkFycltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSB0ZW1wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ganNvbkFycjtcbiAgICAgICAgICAgIH1gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG5ld190YWJsZV92YWx1ZXMgPSBKc29uU29ydChzdWJfdGFibGVfdmFsdWVzLHN1bV9jb2wsZmFsc2UpXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwibmV3X3RhYmxlX3ZhbHVlc1wiLG5ld190YWJsZV92YWx1ZXNcblxuICAgICAgICAgICAgbmV3X3RhYmxlX3ZhbHVlcy5mb3JFYWNoIChvYmosIGluZGV4KS0+XG4gICAgICAgICAgICAgICAgaWYgc29ydF9jb2wgYW5kIG9ialtzdW1fY29sXVxuICAgICAgICAgICAgICAgICAgICBvYmpbc29ydF9jb2xdID0gKGluZGV4KzEpLnRvU3RyaW5nKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2cgXCJuZXdfdGFibGVfdmFsdWVzXCIsbmV3X3RhYmxlX3ZhbHVlc1xuXG4gICAgICAgICAgICBpbnMudmFsdWVzW3N1Yl90YWJsZV0gPSBuZXdfdGFibGVfdmFsdWVzXG5cbiAgICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoaW5zLl9pZCx7XG4gICAgICAgICAgICAgICAgJHNldDp7XG4gICAgICAgICAgICAgICAgICAgICd2YWx1ZXMnOmlucy52YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwic3VjY2Vzc1wiXG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG4gICAgICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiAn6K6h566X5o6S5bqP5oiQ5YqfJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAn5a2Q6KGo5pWw5o2u5Li656m6Jyk7XG4gICAgY2F0Y2ggZVxuICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG4gICAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZXJyb3JzOiBbZV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuKSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvc3ViX3RhYmxlX3NvcnRcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGUsIGlucywgbmV3X3RhYmxlX3ZhbHVlcywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCByZWY3LCBzb3J0X2NvbCwgc3ViX3RhYmxlLCBzdWJfdGFibGVfdmFsdWVzLCBzdW1fY29sO1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT095a2Q6KGoPT09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhcInJlcT8ucXVlcnk/LnN1YlRhYmxlXCIsIHJlcSAhPSBudWxsID8gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5zdWJUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3lrZDooajmgLvliIbliJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc3VtQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLnN1bUNvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3lrZDooajmjpLluo/liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc29ydENvbFwiLCByZXEgIT0gbnVsbCA/IChyZWYyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMi5zb3J0Q29sIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWtkOihqOWNleWIl+mcgOimgeiuoeeul+eahOWSjD09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXCIsIHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLnNpbmdsZUNvbHMgOiB2b2lkIDAgOiB2b2lkIDApO1xuICAgIHN1Yl90YWJsZSA9IHJlcSAhPSBudWxsID8gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LnN1YlRhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICghc3ViX3RhYmxlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIj09PT09c3ViX3RhYmxlPT09PT09XCIpO1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3ViVGFibGUg5a2X5q61Jyk7XG4gICAgfVxuICAgIHN1bV9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWY1ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNS5zdW1Db2wgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKCFzdW1fY29sKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIj09PT09c3VtX2NvbD09PT09PVwiKTtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHN1bUNvbCDlrZfmrrUnKTtcbiAgICB9XG4gICAgc29ydF9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWY2ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNi5zb3J0Q29sIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICghc29ydF9jb2wpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiPT09PT1zb3J0X2NvbD09PT09PVwiKTtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHNvcnRDb2wg5a2X5q61Jyk7XG4gICAgfVxuICAgIGlucyA9IHJlcSAhPSBudWxsID8gKHJlZjcgPSByZXEuYm9keSkgIT0gbnVsbCA/IHJlZjcuaW5zdGFuY2UgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgc3ViX3RhYmxlX3ZhbHVlcyA9IGlucy52YWx1ZXNbc3ViX3RhYmxlXTtcbiAgICBpZiAoKHN1Yl90YWJsZV92YWx1ZXMgIT0gbnVsbCA/IHN1Yl90YWJsZV92YWx1ZXMubGVuZ3RoIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIGZ1bmN0aW9uIEpzb25Tb3J0KGpzb25BcnIsIGtleSwgYXNjKXtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGo9MSxqbD1qc29uQXJyLmxlbmd0aDtqIDwgamw7aisrKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBqc29uQXJyW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsICA9IE51bWJlcih0ZW1wW2tleV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSAgICA9IGotMTtcbiAgICAgICAgICAgICAgICAgICAgaWYoYXNjPT10cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGkgPj0wICYmIE51bWJlcihqc29uQXJyW2ldW2tleV0pPnZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0ganNvbkFycltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShpID49MCAmJiBOdW1iZXIoanNvbkFycltpXVtrZXldKTx2YWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnJbaSsxXSA9IGpzb25BcnJbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGktMTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0gdGVtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25BcnI7XG4gICAgICAgICAgICB9O1xuICAgICAgbmV3X3RhYmxlX3ZhbHVlcyA9IEpzb25Tb3J0KHN1Yl90YWJsZV92YWx1ZXMsIHN1bV9jb2wsIGZhbHNlKTtcbiAgICAgIGNvbnNvbGUubG9nKFwibmV3X3RhYmxlX3ZhbHVlc1wiLCBuZXdfdGFibGVfdmFsdWVzKTtcbiAgICAgIG5ld190YWJsZV92YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihvYmosIGluZGV4KSB7XG4gICAgICAgIGlmIChzb3J0X2NvbCAmJiBvYmpbc3VtX2NvbF0pIHtcbiAgICAgICAgICByZXR1cm4gb2JqW3NvcnRfY29sXSA9IChpbmRleCArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coXCJuZXdfdGFibGVfdmFsdWVzXCIsIG5ld190YWJsZV92YWx1ZXMpO1xuICAgICAgaW5zLnZhbHVlc1tzdWJfdGFibGVdID0gbmV3X3RhYmxlX3ZhbHVlcztcbiAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoaW5zLl9pZCwge1xuICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgJ3ZhbHVlcyc6IGlucy52YWx1ZXNcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhcInN1Y2Nlc3NcIik7XG4gICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAnc3VjY2Vzcyc6ICforqHnrpfmjpLluo/miJDlip8nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICflrZDooajmlbDmja7kuLrnqbonKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW2VdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiaWYgTWV0ZW9yLmlzRGV2ZWxvcG1lbnRcbiAgICBKc29uUm91dGVzLmFkZCAncG9zdCcsICcvdGVzdC93ZWJob29rJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxuICAgICAgICB0cnlcblxuICAgICAgICAgICAgaGFzaERhdGEgPSByZXEuYm9keVxuICAgICAgICAgICAgY29uc29sZS5sb2cgJ2FjdGlvbjogJywgaGFzaERhdGEuYWN0aW9uXG4gICAgICAgICAgICBjb25zb2xlLmxvZyAnZnJvbV91c2VyOiAnLCBoYXNoRGF0YS5mcm9tX3VzZXJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nICd0b191c2VyczogJywgaGFzaERhdGEudG9fdXNlcnNcblxuXG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAyMDBcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge31cbiAgICAgICAgY2F0Y2ggZVxuICAgICAgICAgICAgY29uc29sZS5lcnJvciBlLnN0YWNrXG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuICAgICAgICAgICAgICAgIGNvZGU6IDIwMFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfSIsImlmIChNZXRlb3IuaXNEZXZlbG9wbWVudCkge1xuICBKc29uUm91dGVzLmFkZCgncG9zdCcsICcvdGVzdC93ZWJob29rJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICB2YXIgZSwgaGFzaERhdGE7XG4gICAgdHJ5IHtcbiAgICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgICBjb25zb2xlLmxvZygnYWN0aW9uOiAnLCBoYXNoRGF0YS5hY3Rpb24pO1xuICAgICAgY29uc29sZS5sb2coJ2Zyb21fdXNlcjogJywgaGFzaERhdGEuZnJvbV91c2VyKTtcbiAgICAgIGNvbnNvbGUubG9nKCd0b191c2VyczogJywgaGFzaERhdGEudG9fdXNlcnMpO1xuICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogMjAwLFxuICAgICAgICBkYXRhOiB7fVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGUgPSBlcnJvcjtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL2Zvcm11bGEvdXNlcnNcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXG5cdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcblx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXG5cblx0dXNlcklkcyA9IHJlcS5ib2R5LnVzZXJJZHNcblx0c3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWRcblx0c3BhY2VVc2VycyA9IFtdO1xuXG5cdHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHt1c2VyOiBjdXJyZW50X3VzZXIsIHNwYWNlOiBzcGFjZUlkfSwge2ZpZWxkczoge19pZDogMX19KVxuXHRpZiAhc3BhY2VfdXNlclxuXHRcdHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG5cdFx0XHRjb2RlOiAyMDAsXG5cdFx0XHRkYXRhOiB7XG5cdFx0XHRcdCdlcnJvcnMnOiAn5peg5p2D6ZmQJ1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdGlmICghdXNlcklkcyB8fCAhc3BhY2VJZClcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuXHRcdFx0Y29kZTogMjAwLFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcblx0XHRcdH1cblx0XHR9KTtcblx0c3BhY2VVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdHMoc3BhY2VJZCwgdXNlcklkcylcblxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XG5cdFx0Y29kZTogMjAwLFxuXHRcdGRhdGE6IHtcblx0XHRcdCdzcGFjZVVzZXJzJzogc3BhY2VVc2Vyc1xuXHRcdH1cblx0fVxuKSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvZm9ybXVsYS91c2Vyc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgc3BhY2VJZCwgc3BhY2VVc2Vycywgc3BhY2VfdXNlciwgdXNlcklkcztcbiAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICB1c2VySWRzID0gcmVxLmJvZHkudXNlcklkcztcbiAgc3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWQ7XG4gIHNwYWNlVXNlcnMgPSBbXTtcbiAgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgIHVzZXI6IGN1cnJlbnRfdXNlcixcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDFcbiAgICB9XG4gIH0pO1xuICBpZiAoIXNwYWNlX3VzZXIpIHtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnZXJyb3JzJzogJ+aXoOadg+mZkCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoIXVzZXJJZHMgfHwgIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzcGFjZVVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0cyhzcGFjZUlkLCB1c2VySWRzKTtcbiAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICBjb2RlOiAyMDAsXG4gICAgZGF0YToge1xuICAgICAgJ3NwYWNlVXNlcnMnOiBzcGFjZVVzZXJzXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS9mb3JtdWxhL29yZ3NcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXG5cdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxuXHRvcmdJZHMgPSByZXEuYm9keS5vcmdJZHNcblx0c3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWRcblxuXHRzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7dXNlcjogY3VycmVudF91c2VyLCBzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtfaWQ6IDF9fSlcblx0aWYgIXNwYWNlX3VzZXJcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuXHRcdFx0Y29kZTogMjAwLFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHQnZXJyb3JzJzogJ+aXoOadg+mZkCdcblx0XHRcdH1cblx0XHR9KTtcblxuXHRpZiAoIW9yZ0lkcyB8fCAhc3BhY2VJZClcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuXHRcdFx0Y29kZTogMjAwLFxuXHRcdFx0ZGF0YToge1xuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcblx0XHRcdH1cblx0XHR9KTtcblxuXHRvcmdzID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFPcmdPYmplY3RzKG9yZ0lkcylcblxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG5cdFx0Y29kZTogMjAwLFxuXHRcdGRhdGE6IHtcblx0XHRcdCdvcmdzJzogb3Jnc1xuXHRcdH1cblx0fSk7XG4pIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS9mb3JtdWxhL29yZ3NcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIG9yZ0lkcywgb3Jncywgc3BhY2VJZCwgc3BhY2VfdXNlcjtcbiAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICBvcmdJZHMgPSByZXEuYm9keS5vcmdJZHM7XG4gIHNwYWNlSWQgPSByZXEuYm9keS5zcGFjZUlkO1xuICBzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgdXNlcjogY3VycmVudF91c2VyLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMVxuICAgIH1cbiAgfSk7XG4gIGlmICghc3BhY2VfdXNlcikge1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgICdlcnJvcnMnOiAn5peg5p2D6ZmQJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGlmICghb3JnSWRzIHx8ICFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgb3JncyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhT3JnT2JqZWN0cyhvcmdJZHMpO1xuICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgIGNvZGU6IDIwMCxcbiAgICBkYXRhOiB7XG4gICAgICAnb3Jncyc6IG9yZ3NcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xuXHRzZXRfaW5zdGFuY2Vfc3RlcF9hcHByb3ZlOiAoaW5zX2lkLCBzdGVwX2FwcHJvdmUsIHN0ZXBzQXBwcm92ZXNPcHRpb25zKS0+XG5cdFx0aWYgIXRoaXMudXNlcklkXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc19pZH0sIHtmaWVsZHM6IHtzdGF0ZTogMX19KVxuXG5cdFx0aWYgaW5zLnN0YXRlICE9ICdkcmFmdCdcblx0XHRcdHJldHVybiA7XG5cblx0XHRfa2V5czEgPSBfLmtleXMoc3RlcF9hcHByb3ZlKTtcblx0XHRfa2V5czIgPSBfLmtleXMoc3RlcHNBcHByb3Zlc09wdGlvbnMpO1xuXG5cdFx0a2V5cyA9IF8uY29tcGFjdChfLnVuaW9uKF9rZXlzMSwgX2tleXMyKSk7XG5cblx0XHRzdGVwc0FwcHJvdmVzID0ge307XG5cblx0XHRfLmVhY2gga2V5cywgKHN0ZXBJZCktPlxuXHRcdFx0c3RlcEFwcHJvdmVzID0gc3RlcF9hcHByb3ZlW3N0ZXBJZF1cblx0XHRcdHN0ZXBzQXBwcm92ZU9wdGlvbnMgPSBzdGVwc0FwcHJvdmVzT3B0aW9uc1tzdGVwSWRdXG5cdFx0XHRpZiBzdGVwQXBwcm92ZXNcblx0XHRcdFx0c3RlcHNBcHByb3Zlc1tzdGVwSWRdID0gc3RlcEFwcHJvdmVzXG5cdFx0XHRcdGlmIHN0ZXBzQXBwcm92ZU9wdGlvbnNcblx0XHRcdFx0XHRpZiBfLmlzQXJyYXkoc3RlcEFwcHJvdmVzKVxuXHRcdFx0XHRcdFx0c3RlcHNBcHByb3ZlT3B0aW9ucyA9IHN0ZXBBcHByb3Zlcy5jb25jYXQoc3RlcHNBcHByb3ZlT3B0aW9ucylcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRzdGVwc0FwcHJvdmVPcHRpb25zLnB1c2goc3RlcEFwcHJvdmVzKVxuXHRcdFx0aWYgc3RlcHNBcHByb3ZlT3B0aW9uc1xuXHRcdFx0XHRzdGVwc0FwcHJvdmVzW3N0ZXBJZCArICdfb3B0aW9ucyddID0gXy51bmlxKHN0ZXBzQXBwcm92ZU9wdGlvbnMpXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSB7X2lkOiBpbnNfaWR9LCB7JHNldDoge3N0ZXBfYXBwcm92ZTogc3RlcHNBcHByb3Zlc319XG5cdHNldF9pbnN0YW5jZV9za2lwX3N0ZXBzOiAoaW5zX2lkLCBzdGVwSWQsIGFjdGlvbiktPlxuXHRcdGlmIGFjdGlvbiA9PSAncHVsbCdcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUge19pZDogaW5zX2lkfSwgeyRwdWxsOiB7c2tpcF9zdGVwczogc3RlcElkfX1cblx0XHRlbHNlIGlmIGFjdGlvbiA9PSAncHVzaCdcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUge19pZDogaW5zX2lkfSwgeyRwdXNoOiB7c2tpcF9zdGVwczogc3RlcElkfX0iLCJNZXRlb3IubWV0aG9kcyh7XG4gIHNldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmU6IGZ1bmN0aW9uKGluc19pZCwgc3RlcF9hcHByb3ZlLCBzdGVwc0FwcHJvdmVzT3B0aW9ucykge1xuICAgIHZhciBfa2V5czEsIF9rZXlzMiwgaW5zLCBrZXlzLCBzdGVwc0FwcHJvdmVzO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnNfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zLnN0YXRlICE9PSAnZHJhZnQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF9rZXlzMSA9IF8ua2V5cyhzdGVwX2FwcHJvdmUpO1xuICAgIF9rZXlzMiA9IF8ua2V5cyhzdGVwc0FwcHJvdmVzT3B0aW9ucyk7XG4gICAga2V5cyA9IF8uY29tcGFjdChfLnVuaW9uKF9rZXlzMSwgX2tleXMyKSk7XG4gICAgc3RlcHNBcHByb3ZlcyA9IHt9O1xuICAgIF8uZWFjaChrZXlzLCBmdW5jdGlvbihzdGVwSWQpIHtcbiAgICAgIHZhciBzdGVwQXBwcm92ZXMsIHN0ZXBzQXBwcm92ZU9wdGlvbnM7XG4gICAgICBzdGVwQXBwcm92ZXMgPSBzdGVwX2FwcHJvdmVbc3RlcElkXTtcbiAgICAgIHN0ZXBzQXBwcm92ZU9wdGlvbnMgPSBzdGVwc0FwcHJvdmVzT3B0aW9uc1tzdGVwSWRdO1xuICAgICAgaWYgKHN0ZXBBcHByb3Zlcykge1xuICAgICAgICBzdGVwc0FwcHJvdmVzW3N0ZXBJZF0gPSBzdGVwQXBwcm92ZXM7XG4gICAgICAgIGlmIChzdGVwc0FwcHJvdmVPcHRpb25zKSB7XG4gICAgICAgICAgaWYgKF8uaXNBcnJheShzdGVwQXBwcm92ZXMpKSB7XG4gICAgICAgICAgICBzdGVwc0FwcHJvdmVPcHRpb25zID0gc3RlcEFwcHJvdmVzLmNvbmNhdChzdGVwc0FwcHJvdmVPcHRpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RlcHNBcHByb3ZlT3B0aW9ucy5wdXNoKHN0ZXBBcHByb3Zlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RlcHNBcHByb3ZlT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc3RlcHNBcHByb3Zlc1tzdGVwSWQgKyAnX29wdGlvbnMnXSA9IF8udW5pcShzdGVwc0FwcHJvdmVPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICBfaWQ6IGluc19pZFxuICAgIH0sIHtcbiAgICAgICRzZXQ6IHtcbiAgICAgICAgc3RlcF9hcHByb3ZlOiBzdGVwc0FwcHJvdmVzXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHNldF9pbnN0YW5jZV9za2lwX3N0ZXBzOiBmdW5jdGlvbihpbnNfaWQsIHN0ZXBJZCwgYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbiA9PT0gJ3B1bGwnKSB7XG4gICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRwdWxsOiB7XG4gICAgICAgICAgc2tpcF9zdGVwczogc3RlcElkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAncHVzaCcpIHtcbiAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHB1c2g6IHtcbiAgICAgICAgICBza2lwX3N0ZXBzOiBzdGVwSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblxuXHRnZXRfaW5zdGFuY2VfZGF0YTogZnVuY3Rpb24gKGluc3RhbmNlX2lkLCBmb3JtQ2FjaGVkLCBmbG93Q2FjaGVkKSB7XG5cblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKTtcblx0XHRjaGVjayhmb3JtQ2FjaGVkLCBCb29sZWFuKTtcblx0XHRjaGVjayhmbG93Q2FjaGVkLCBCb29sZWFuKTtcblxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKTtcblxuXHRcdGlmICghaW5zdGFuY2UpXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpbnN0YW5jZTogbnVsbFxuXHRcdFx0fTtcblxuXHRcdGlmIChmb3JtQ2FjaGVkICYmIGZsb3dDYWNoZWQpXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpbnN0YW5jZTogaW5zdGFuY2Vcblx0XHRcdH07XG5cblx0XHRpZiAoIWZvcm1DYWNoZWQpIHtcblx0XHRcdHZhciBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcblx0XHRcdHZhciBmb3JtX3ZlcnNpb24gPSB7fTtcblx0XHRcdGlmIChmb3JtLmN1cnJlbnQuX2lkID09IGluc3RhbmNlLmZvcm1fdmVyc2lvbikge1xuXHRcdFx0XHRmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Zm9ybV92ZXJzaW9uID0gXy53aGVyZShmb3JtLmhpc3RvcnlzLCB7X2lkOiBpbnN0YW5jZS5mb3JtX3ZlcnNpb259KVswXTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHRcdGlmICghZmxvd0NhY2hlZCkge1xuXHRcdFx0dmFyIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGluc3RhbmNlLmZsb3cpO1xuXHRcdFx0dmFyIGZsb3dfdmVyc2lvbiA9IHt9O1xuXHRcdFx0aWYgKGZsb3cuY3VycmVudC5faWQgPT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uKSB7XG5cdFx0XHRcdGZsb3dfdmVyc2lvbiA9IGZsb3cuY3VycmVudDtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRmbG93X3ZlcnNpb24gPSBfLndoZXJlKGZsb3cuaGlzdG9yeXMsIHtfaWQ6IGluc3RhbmNlLmZsb3dfdmVyc2lvbn0pWzBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRpbnN0YW5jZTogaW5zdGFuY2UsXG5cdFx0XHRmb3JtX3ZlcnNpb246IGZvcm1fdmVyc2lvbixcblx0XHRcdGZsb3dfdmVyc2lvbjogZmxvd192ZXJzaW9uXG5cdFx0fVxuXG5cdH1cblxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cblx0ZHJhZnRfc2F2ZV9pbnN0YW5jZTogZnVuY3Rpb24gKGlucykge1xuXHRcdGlmICghdGhpcy51c2VySWQpXG5cdFx0XHRyZXR1cm47XG5cdFx0dmFyIHJlc3VsdCA9IHRydWU7XG5cdFx0dmFyIHNldE9iaiA9IHt9O1xuXHRcdHZhciBpbmRleCA9IDA7XG5cdFx0dmFyIGluc19pZCA9IGlucy5faWQ7XG5cdFx0dmFyIHRyYWNlX2lkID0gaW5zLnRyYWNlc1swXS5faWQ7XG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLl9pZDtcblx0XHR2YXIgZGVzY3JpcHRpb24gPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmRlc2NyaXB0aW9uO1xuXHRcdHZhciBuZXh0X3N0ZXBzID0gaW5zLnRyYWNlc1swXS5hcHByb3Zlc1swXS5uZXh0X3N0ZXBzO1xuXHRcdHZhciB2YWx1ZXMgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLnZhbHVlcyB8fCB7fTtcblx0XHR2YXIgYXBwbGljYW50X2lkID0gaW5zLmFwcGxpY2FudDtcblxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdGFwcGxpY2FudDogMSxcblx0XHRcdFx0c3RhdGU6IDEsXG5cdFx0XHRcdHN1Ym1pdHRlcjogMSxcblx0XHRcdFx0dHJhY2VzOiAxLFxuXHRcdFx0XHRmb3JtOiAxLFxuXHRcdFx0XHRmbG93X3ZlcnNpb246IDEsXG5cdFx0XHRcdHNwYWNlOiAxLFxuXHRcdFx0XHRmbG93OiAxXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR2YXIgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcblx0XHR2YXIgZmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG5cdFx0dmFyIGZvcm1faWQgPSBpbnN0YW5jZS5mb3JtO1xuXHRcdHZhciB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XG5cdFx0dmFyIGN1cnJlbnRfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCBmdW5jdGlvbiAodCkge1xuXHRcdFx0cmV0dXJuIHQuX2lkID09IHRyYWNlX2lkO1xuXHRcdH0pO1xuXHRcdGN1cnJlbnRfdHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbiAoYSwgaWR4KSB7XG5cdFx0XHRpZiAoYS5faWQgPT0gYXBwcm92ZV9pZCkge1xuXHRcdFx0XHRpbmRleCA9IGlkeDtcblx0XHRcdH1cblx0XHR9KVxuXHRcdHZhciBrZXlfc3RyID0gJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcuJztcblxuXHRcdC8vIOWIpOaWreS4gOS4qmluc3RhbmNl5piv5ZCm5Li65ouf56i/54q25oCBXG5cdFx0dmFyIGN1cnJlbnRfdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuXHRcdFx0X2lkOiB0aGlzLnVzZXJJZFxuXHRcdH0sIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRsb2NhbGU6IDFcblx0XHRcdH1cblx0XHR9KTtcblx0XHR2YXIgbGFuZyA9IGN1cnJlbnRfdXNlci5sb2NhbGUgPT0gJ3poLWNuJyA/ICd6aC1DTicgOiAnZW4nO1xuXHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlLCBsYW5nKTtcblx0XHQvLyDliKTmlq3kuIDkuKrnlKjmiLfmmK/lkKbmmK/kuIDkuKppbnN0YW5jZeeahOaPkOS6pOiAhVxuXHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVN1Ym1pdHRlcihpbnN0YW5jZSwgdGhpcy51c2VySWQpO1xuXG5cdFx0dmFyIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQsIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcImN1cnJlbnQuX2lkXCI6IDEsXG5cdFx0XHRcdFwiY3VycmVudC5mb3JtX3ZlcnNpb25cIjogMSxcblx0XHRcdFx0XCJuYW1lXCI6IDEsXG5cdFx0XHRcdFwiY3VycmVudC5zdGVwc1wiOiAxXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuXHRcdHNldE9iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xuXG5cdFx0aWYgKGZsb3cuY3VycmVudC5faWQgIT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uKSB7XG5cdFx0XHRyZXN1bHQgPSBcInVwZ3JhZGVkXCI7XG5cdFx0XHR2YXIgc3RhcnRfc3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uIChzKSB7XG5cdFx0XHRcdHJldHVybiBzLnN0ZXBfdHlwZSA9PSBcInN0YXJ0XCI7XG5cdFx0XHR9KTtcblx0XHRcdC8vIOa1geeoi+W3suWNh+e6p1xuXHRcdFx0c2V0T2JqLmZsb3dfdmVyc2lvbiA9IGZsb3cuY3VycmVudC5faWQ7XG5cdFx0XHRzZXRPYmouZm9ybV92ZXJzaW9uID0gZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcblx0XHRcdC8vIOWtmOWFpeW9k+WJjeacgOaWsOeJiGZsb3fkuK3lvIDlp4voioLngrnnmoRzdGVwX2lkXG5cdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5zdGVwXCJdID0gc3RhcnRfc3RlcC5faWQ7XG5cdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5uYW1lXCJdID0gc3RhcnRfc3RlcC5uYW1lO1xuXHRcdH1cblxuXHRcdGlmIChpbnN0YW5jZS5hcHBsaWNhbnQgIT0gYXBwbGljYW50X2lkKSB7XG5cdFx0XHQvLyDnlLPor7fkurrlt7Llj5jmjaJcblx0XHRcdHZhciB1c2VyID0gZGIudXNlcnMuZmluZE9uZShhcHBsaWNhbnRfaWQsIHtcblx0XHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdFx0bmFtZTogMVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHZhciBhcHBsaWNhbnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcblx0XHRcdFx0c3BhY2U6IHNwYWNlX2lkLFxuXHRcdFx0XHR1c2VyOiBhcHBsaWNhbnRfaWRcblx0XHRcdH0sIHtcblx0XHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdFx0b3JnYW5pemF0aW9uOiAxXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0dmFyIG9yZ19pZCA9IGFwcGxpY2FudC5mZXRjaCgpWzBdLm9yZ2FuaXphdGlvbjtcblx0XHRcdHZhciBvcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUob3JnX2lkLCB7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHNldE9iai5hcHBsaWNhbnQgPSBhcHBsaWNhbnRfaWQ7XG5cdFx0XHRzZXRPYmouYXBwbGljYW50X25hbWUgPSB1c2VyLm5hbWU7XG5cdFx0XHRzZXRPYmouYXBwbGljYW50X29yZ2FuaXphdGlvbiA9IG9yZ19pZDtcblx0XHRcdHNldE9iai5hcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWUgPSBvcmdhbml6YXRpb24ubmFtZTtcblx0XHRcdHNldE9iai5hcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gb3JnYW5pemF0aW9uLmZ1bGxuYW1lO1xuXG5cdFx0XHRzZXRPYmpba2V5X3N0ciArICd1c2VyJ10gPSBhcHBsaWNhbnRfaWQ7XG5cdFx0XHRzZXRPYmpba2V5X3N0ciArICd1c2VyX25hbWUnXSA9IHVzZXIubmFtZTtcblx0XHR9XG5cblx0XHRzZXRPYmpba2V5X3N0ciArICd2YWx1ZXMnXSA9IHZhbHVlcztcblx0XHRzZXRPYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XG5cdFx0c2V0T2JqW2tleV9zdHIgKyAnanVkZ2UnXSA9ICdzdWJtaXR0ZWQnO1xuXHRcdHNldE9ialtrZXlfc3RyICsgJ3JlYWRfZGF0ZSddID0gbmV3IERhdGUoKTtcblx0XHRpZiAocmVzdWx0ICE9IFwidXBncmFkZWRcIiAmJiBuZXh0X3N0ZXBzKSB7XG5cdFx0XHRzZXRPYmpba2V5X3N0ciArICduZXh0X3N0ZXBzJ10gPSBuZXh0X3N0ZXBzO1xuXHRcdH1cblxuXHRcdC8vIOiuoeeul+eUs+ivt+WNleagh+mimFxuXHRcdHZhciBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG5cdFx0XHRfaWQ6IGZvcm1faWRcblx0XHR9LCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0XCJjdXJyZW50Lm5hbWVfZm9ydW1sYVwiOiAxXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm0uY3VycmVudC5uYW1lX2ZvcnVtbGE7XG5cdFx0aWYgKG5hbWVfZm9ydW1sYSkge1xuXHRcdFx0Ly8gdmFyIGlzY3JpcHQgPSBuYW1lX2ZvcnVtbGEucmVwbGFjZSgvXFx7L2csIFwiKHZhbHVlc1snXCIpLnJlcGxhY2UoL1xcfS9nLCBcIiddIHx8ICcnKVwiKTtcblx0XHRcdC8vIHZhciByZXYgPSBldmFsKGlzY3JpcHQpO1xuXHRcdFx0c2V0T2JqLm5hbWUgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlTmFtZShpbnMsIHZhbHVlcyk7XG5cdFx0fVxuXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRfaWQ6IGluc19pZCxcblx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZV9pZFxuXHRcdH0sIHtcblx0XHRcdCRzZXQ6IHNldE9ialxuXHRcdH0pO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0aW5ib3hfc2F2ZV9pbnN0YW5jZTogZnVuY3Rpb24gKGFwcHJvdmUpIHtcblx0XHRpZiAoIXRoaXMudXNlcklkKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xuXHRcdHZhciBpbmRleCA9IDA7XG5cdFx0dmFyIGluc19pZCA9IGFwcHJvdmUuaW5zdGFuY2U7XG5cdFx0dmFyIHRyYWNlX2lkID0gYXBwcm92ZS50cmFjZTtcblx0XHR2YXIgYXBwcm92ZV9pZCA9IGFwcHJvdmUuaWQ7XG5cdFx0dmFyIHZhbHVlcyA9IGFwcHJvdmUudmFsdWVzO1xuXHRcdHZhciBuZXh0X3N0ZXBzID0gYXBwcm92ZS5uZXh0X3N0ZXBzO1xuXHRcdHZhciBkZXNjcmlwdGlvbiA9IGFwcHJvdmUuZGVzY3JpcHRpb247XG5cdFx0dmFyIGp1ZGdlID0gYXBwcm92ZS5qdWRnZTtcblxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdHRyYWNlczogMSxcblx0XHRcdFx0Zmxvd192ZXJzaW9uOiAxLFxuXHRcdFx0XHRmbG93OiAxLFxuXHRcdFx0XHRzdGF0ZTogMSxcblx0XHRcdFx0Zm9ybTogMSxcblx0XHRcdFx0Zm9ybV92ZXJzaW9uOiAxLFxuXHRcdFx0XHR2YWx1ZXM6IDEsXG5cdFx0XHRcdGNvZGU6IDFcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHZhciB0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXM7XG5cblx0XHR2YXIgY3VycmVudF90cmFjZSA9IF8uZmluZCh0cmFjZXMsIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRyZXR1cm4gdC5faWQgPT0gdHJhY2VfaWQ7XG5cdFx0fSk7XG5cdFx0dmFyIGN1cnJlbnRfYXBwcm92ZSA9IF8uZmluZChjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYSkge1xuXHRcdFx0cmV0dXJuIGEuX2lkID09IGFwcHJvdmVfaWQ7XG5cdFx0fSk7XG5cblx0XHQvLyDliKTmlq3kuIDkuKppbnN0YW5jZeaYr+WQpuS4uuWuoeaguOS4reeKtuaAgVxuXHRcdHZhciBjdXJyZW50X3VzZXIgPSBkYi51c2Vycy5maW5kT25lKHtcblx0XHRcdF9pZDogdGhpcy51c2VySWRcblx0XHR9LCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0bG9jYWxlOiAxXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dmFyIGxhbmcgPSBjdXJyZW50X3VzZXIubG9jYWxlID09ICd6aC1jbicgPyAnemgtQ04nIDogJ2VuJztcblx0XHR0cnkge1xuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSwgbGFuZyk7XG5cdFx0XHQvLyDliKTmlq3kuIDkuKp0cmFjZeaYr+WQpuS4uuacquWujOaIkOeKtuaAgVxuXHRcdFx0dXVmbG93TWFuYWdlci5pc1RyYWNlTm90RmluaXNoZWQoY3VycmVudF90cmFjZSk7XG5cdFx0XHQvLyDliKTmlq3kuIDkuKphcHByb3Zl5piv5ZCm5Li65pyq5a6M5oiQ54q25oCBXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzQXBwcm92ZU5vdEZpbmlzaGVkKGN1cnJlbnRfYXBwcm92ZSk7XG5cdFx0XHQvLyDliKTmlq3lvZPliY3nlKjmiLfmmK/lkKZhcHByb3ZlIOWvueW6lOeahOWkhOeQhuS6uuaIluS7o+eQhuS6ulxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0hhbmRsZXJPckFnZW50KGN1cnJlbnRfYXBwcm92ZSwgdGhpcy51c2VySWQpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKGUuc3RhY2spXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblxuXG5cdFx0dmFyIGZsb3dfdmVyc2lvbiA9IGluc3RhbmNlLmZsb3dfdmVyc2lvbjtcblx0XHR2YXIgZmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG5cdFx0dmFyIHN0ZXBfaWQgPSBcIlwiO1xuXHRcdHN0ZXBfaWQgPSBjdXJyZW50X3RyYWNlLnN0ZXA7XG5cdFx0dmFyIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQsIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRjdXJyZW50OiAxLFxuXHRcdFx0XHRoaXN0b3J5czogMVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHZhciBzdGVwID0gbnVsbDtcblx0XHRpZiAoZmxvdy5jdXJyZW50Ll9pZCA9PSBmbG93X3ZlcnNpb24pIHtcblx0XHRcdGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG5cdFx0XHRcdGlmIChzLl9pZCA9PSBzdGVwX2lkKVxuXHRcdFx0XHRcdHN0ZXAgPSBzO1xuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zmxvdy5oaXN0b3J5cy5mb3JFYWNoKGZ1bmN0aW9uIChoKSB7XG5cdFx0XHRcdGguc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuXHRcdFx0XHRcdGlmIChzLl9pZCA9PSBzdGVwX2lkKVxuXHRcdFx0XHRcdFx0c3RlcCA9IHM7XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHRcdH1cblxuXHRcdGlmICghc3RlcClcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR2YXIgc3RlcF90eXBlID0gc3RlcC5zdGVwX3R5cGU7XG5cblx0XHRjdXJyZW50X3RyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xuXHRcdFx0aWYgKGEuX2lkID09IGFwcHJvdmVfaWQpIHtcblx0XHRcdFx0aW5kZXggPSBpZHg7XG5cdFx0XHR9XG5cdFx0fSlcblxuXHRcdHZhciBrZXlfc3RyID0gJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcuJztcblxuXHRcdHZhciBwZXJtaXNzaW9uc192YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMoYXBwcm92ZS52YWx1ZXMsIHN0ZXAucGVybWlzc2lvbnMsIGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbik7XG5cblx0XHR2YXIgY2hhbmdlX3ZhbHVlcyA9IGFwcHJvdmVNYW5hZ2VyLmdldENoYW5nZVZhbHVlcyhpbnN0YW5jZS52YWx1ZXMsIHBlcm1pc3Npb25zX3ZhbHVlcyk7XG5cblx0XHRzZXRPYmoudmFsdWVzID0gXy5leHRlbmQoKGluc3RhbmNlLnZhbHVlcyB8fCB7fSksIHBlcm1pc3Npb25zX3ZhbHVlcyk7XG5cblx0XHRpZiAoIV8uaXNFbXB0eShjaGFuZ2VfdmFsdWVzKSkge1xuXG5cdFx0XHR2YWx1ZXNfaGlzdG9yeSA9IGN1cnJlbnRfYXBwcm92ZS52YWx1ZXNfaGlzdG9yeSB8fCBbXVxuXG5cdFx0XHR2YWx1ZXNfaGlzdG9yeS5wdXNoKHtcblx0XHRcdFx0dmFsdWVzOiBjaGFuZ2VfdmFsdWVzLFxuXHRcdFx0XHRjcmVhdGU6IG5ldyBEYXRlKClcblx0XHRcdH0pXG5cblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ3ZhbHVlc19oaXN0b3J5J10gPSB2YWx1ZXNfaGlzdG9yeVxuXHRcdH1cblxuXHRcdHNldE9ialtrZXlfc3RyICsgJ2lzX3JlYWQnXSA9IHRydWU7XG5cdFx0c2V0T2JqW2tleV9zdHIgKyAncmVhZF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xuXHRcdHNldE9ialtrZXlfc3RyICsgJ3ZhbHVlcyddID0gc2V0T2JqLnZhbHVlcztcblx0XHRzZXRPYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XG5cdFx0c2V0T2JqW2tleV9zdHIgKyAnbmV4dF9zdGVwcyddID0gbmV4dF9zdGVwcztcblx0XHRpZiAoc3RlcF90eXBlID09IFwic3VibWl0XCIgfHwgc3RlcF90eXBlID09IFwic3RhcnRcIikge1xuXHRcdFx0c2V0T2JqW2tleV9zdHIgKyAnanVkZ2UnXSA9IFwic3VibWl0dGVkXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ2p1ZGdlJ10gPSBqdWRnZTtcblx0XHR9XG5cblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuXHRcdHNldE9iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xuXG5cdFx0Ly8g6K6h566X55Sz6K+35Y2V5qCH6aKYXG5cdFx0dmFyIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuXHRcdHZhciBmb3JtX3YgPSB1dWZsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbik7XG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm1fdi5uYW1lX2ZvcnVtbGE7XG5cdFx0aWYgKG5hbWVfZm9ydW1sYSkge1xuXHRcdFx0c2V0T2JqLm5hbWUgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlTmFtZShpbnN0YW5jZSwgc2V0T2JqLnZhbHVlcyk7XG5cdFx0fVxuXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRfaWQ6IGluc19pZCxcblx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZV9pZFxuXHRcdH0sIHtcblx0XHRcdCRzZXQ6IHNldE9ialxuXHRcdH0pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cbn0pIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRjY19kbzogZnVuY3Rpb24gKGFwcHJvdmUsIGNjX3VzZXJfaWRzLCBkZXNjcmlwdGlvbikge1xuXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xuXHRcdHZhciBpbnNfaWQgPSBhcHByb3ZlLmluc3RhbmNlO1xuXHRcdHZhciB0cmFjZV9pZCA9IGFwcHJvdmUudHJhY2U7XG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBhcHByb3ZlLl9pZDtcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRzcGFjZTogMSxcblx0XHRcdFx0dHJhY2VzOiAxLFxuXHRcdFx0XHRjY191c2VyczogMSxcblx0XHRcdFx0dmFsdWVzOiAxXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xuXHRcdHZhciBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuXHRcdHZhciBuZXdfYXBwcm92ZXMgPSBbXTtcblxuXHRcdHZhciBmcm9tX3VzZXJfbmFtZSA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyX2lkLCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0bmFtZTogMVxuXHRcdFx0fVxuXHRcdH0pLm5hbWVcblxuXHRcdGNjX3VzZXJfaWRzLmZvckVhY2goZnVuY3Rpb24gKHVzZXJJZCwgaWR4KSB7XG5cdFx0XHR2YXIgdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUodXNlcklkLCB7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdG5hbWU6IDFcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHR2YXIgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXG5cdFx0XHRcdHVzZXI6IHVzZXJJZFxuXHRcdFx0fSwge1xuXHRcdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0XHRvcmdhbml6YXRpb246IDFcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHR2YXIgb3JnX2lkID0gc3BhY2VfdXNlci5vcmdhbml6YXRpb247XG5cdFx0XHR2YXIgb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKG9yZ19pZCwge1xuXHRcdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0XHRuYW1lOiAxLFxuXHRcdFx0XHRcdGZ1bGxuYW1lOiAxXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0dmFyIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgdXNlcklkKTtcblx0XHRcdHZhciBoYW5kbGVyX2lkID0gdXNlcklkO1xuXHRcdFx0dmFyIGhhbmRsZXJfaW5mbyA9IHVzZXI7XG5cdFx0XHR2YXIgaGFuZGxlcl9zcGFjZV91c2VyID0gc3BhY2VfdXNlcjtcblx0XHRcdHZhciBoYW5kbGVyX29yZ19pbmZvID0gb3JnYW5pemF0aW9uO1xuXHRcdFx0aWYgKGFnZW50KSB7XG5cdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudDtcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShhZ2VudCwge1xuXHRcdFx0XHRcdGZpbGVkczoge1xuXHRcdFx0XHRcdFx0bmFtZTogMVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdGhhbmRsZXJfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBhZ2VudCk7XG5cdFx0XHRcdGhhbmRsZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oaGFuZGxlcl9zcGFjZV91c2VyKTtcblx0XHRcdFx0Y2NfdXNlcl9pZHNbaWR4XSA9IGFnZW50O1xuXHRcdFx0fVxuXHRcdFx0dmFyIGFwcHIgPSB7XG5cdFx0XHRcdCdfaWQnOiBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyLFxuXHRcdFx0XHQnaW5zdGFuY2UnOiBpbnNfaWQsXG5cdFx0XHRcdCd0cmFjZSc6IHRyYWNlX2lkLFxuXHRcdFx0XHQnaXNfZmluaXNoZWQnOiBmYWxzZSxcblx0XHRcdFx0J3VzZXInOiB1c2VySWQsXG5cdFx0XHRcdCd1c2VyX25hbWUnOiB1c2VyLm5hbWUsXG5cdFx0XHRcdCdoYW5kbGVyJzogaGFuZGxlcl9pZCxcblx0XHRcdFx0J2hhbmRsZXJfbmFtZSc6IGhhbmRsZXJfaW5mby5uYW1lLFxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb24nOiBoYW5kbGVyX3NwYWNlX3VzZXIub3JnYW5pemF0aW9uLFxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSc6IGhhbmRsZXJfb3JnX2luZm8ubmFtZSxcblx0XHRcdFx0J2hhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lJzogaGFuZGxlcl9vcmdfaW5mby5mdWxsbmFtZSxcblx0XHRcdFx0J3R5cGUnOiAnY2MnLFxuXHRcdFx0XHQnc3RhcnRfZGF0ZSc6IG5ldyBEYXRlKCksXG5cdFx0XHRcdCdpc19yZWFkJzogZmFsc2UsXG5cdFx0XHRcdCdmcm9tX3VzZXInOiBjdXJyZW50X3VzZXJfaWQsXG5cdFx0XHRcdCdmcm9tX3VzZXJfbmFtZSc6IGZyb21fdXNlcl9uYW1lLFxuXHRcdFx0XHQnb3Bpbmlvbl9maWVsZHNfY29kZSc6IGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSxcblx0XHRcdFx0J3NpZ25fZmllbGRfY29kZSc6IChhcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGUgJiYgYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlLmxlbmd0aCA9PSAxKSA/IGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZVswXSA6IFwiXCIsXG5cdFx0XHRcdCdmcm9tX2FwcHJvdmVfaWQnOiBhcHByb3ZlX2lkLFxuXHRcdFx0XHQnY2NfZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvblxuXHRcdFx0fTtcblx0XHRcdGlmIChhZ2VudCkge1xuXHRcdFx0XHRhcHByLmFnZW50ID0gYWdlbnQ7XG5cdFx0XHR9XG5cdFx0XHR1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBhcHByKVxuXHRcdFx0bmV3X2FwcHJvdmVzLnB1c2goYXBwcik7XG5cdFx0fSlcblxuXG5cdFx0c2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcblxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xuXHRcdFx0X2lkOiBpbnNfaWQsXG5cdFx0XHQndHJhY2VzLl9pZCc6IHRyYWNlX2lkXG5cdFx0fSwge1xuXHRcdFx0JHNldDogc2V0T2JqLFxuXHRcdFx0JGFkZFRvU2V0OiB7XG5cdFx0XHRcdCd0cmFjZXMuJC5hcHByb3Zlcyc6IHtcblx0XHRcdFx0XHQkZWFjaDogbmV3X2FwcHJvdmVzXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQkcHVzaDoge1xuXHRcdFx0XHRjY191c2Vyczoge1xuXHRcdFx0XHRcdCRlYWNoOiBjY191c2VyX2lkc1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcl9pZCk7XG5cdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJ0cmFjZV9hcHByb3ZlX2NjXCIsIGluc3RhbmNlLCBcIlwiLCBjdXJyZW50X3VzZXJfaW5mbywgY2NfdXNlcl9pZHMpO1xuXG5cdFx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG5cdFx0YXBwcm92ZS5jY191c2VyX2lkcyA9IGNjX3VzZXJfaWRzOyAvLyDorrDlvZXkuIvmnKzmrKHkvKDpmIXnmoTkurrlkZhJROS9nOS4umhvb2vmjqXlj6PkuK3nmoTlj4LmlbBcblx0XHQvLyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXG5cdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soZmxvd19pZCwgaW5zdGFuY2UsIGFwcHJvdmUsICdjY19kbycsIGN1cnJlbnRfdXNlcl9pZCwgY2NfdXNlcl9pZHMpXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Y2NfcmVhZDogZnVuY3Rpb24gKGFwcHJvdmUpIHtcblx0XHR2YXIgc2V0T2JqID0ge307XG5cdFx0dmFyIGluc19pZCA9IGFwcHJvdmUuaW5zdGFuY2U7XG5cdFx0dmFyIHRyYWNlX2lkID0gYXBwcm92ZS50cmFjZTtcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHR0cmFjZXM6IDFcblx0XHRcdH1cblx0XHR9KTtcblx0XHR2YXIgY3VycmVudF91c2VyX2lkID0gdGhpcy51c2VySWQ7XG5cdFx0dmFyIGN1cnJlbnRfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbiAodCkge1xuXHRcdFx0cmV0dXJuIHQuX2lkID09IHRyYWNlX2lkO1xuXHRcdH0pXG5cblx0XHR2YXIgaW5kZXggPSAwO1xuXG5cdFx0Y3VycmVudF90cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcblx0XHRcdGlmIChhLnR5cGUgPT0gJ2NjJyAmJiBhLmhhbmRsZXIgPT0gY3VycmVudF91c2VyX2lkICYmICFhLmlzX3JlYWQpIHtcblx0XHRcdFx0aW5kZXggPSBpZHg7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcuaXNfcmVhZCddID0gdHJ1ZTtcblx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcucmVhZF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xuXG5cdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcblxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xuXHRcdFx0X2lkOiBpbnNfaWQsXG5cdFx0XHQndHJhY2VzLl9pZCc6IHRyYWNlX2lkXG5cdFx0fSwge1xuXHRcdFx0JHNldDogc2V0T2JqXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Y2Nfc3VibWl0OiBmdW5jdGlvbiAoaW5zX2lkLCBkZXNjcmlwdGlvbiwgbXlBcHByb3ZlLCBjY0hhc0VkaXRQZXJtaXNzaW9uKSB7XG5cdFx0dmFyIHNldE9iaiA9IHt9O1xuXG5cdFx0dmFyIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcblx0XHR2YXIgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuXHRcdHZhciBjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZDtcblxuXHRcdHZhciBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuXHRcdHZhciB2YWx1ZXMgPSBteUFwcHJvdmUudmFsdWVzIHx8IHt9O1xuXG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBteUFwcHJvdmUuX2lkO1xuXG5cdFx0dmFyIG15VHJhY2U7XG5cblx0XHRmb3IgKGxldCB0aWR4ID0gMDsgdGlkeCA8IHRyYWNlcy5sZW5ndGg7IHRpZHgrKykge1xuXHRcdFx0Y29uc3QgdCA9IHRyYWNlc1t0aWR4XTtcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XG5cdFx0XHRcdGZvciAobGV0IGFpZHggPSAwOyBhaWR4IDwgdC5hcHByb3Zlcy5sZW5ndGg7IGFpZHgrKykge1xuXHRcdFx0XHRcdGNvbnN0IGEgPSB0LmFwcHJvdmVzW2FpZHhdO1xuXHRcdFx0XHRcdGlmIChhLnR5cGUgPT0gJ2NjJyAmJiBhLmhhbmRsZXIgPT0gY3VycmVudF91c2VyX2lkICYmIGEuaXNfZmluaXNoZWQgPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdHZhciB1cG9iaiA9IHt9O1xuXHRcdFx0XHRcdFx0dmFyIGtleV9zdHIgPSAndHJhY2VzLiQuYXBwcm92ZXMuJyArIGFpZHggKyAnLic7XG5cdFx0XHRcdFx0XHR1cG9ialtrZXlfc3RyICsgJ2lzX2ZpbmlzaGVkJ10gPSB0cnVlO1xuXHRcdFx0XHRcdFx0dXBvYmpba2V5X3N0ciArICdpc19yZWFkJ10gPSB0cnVlO1xuXHRcdFx0XHRcdFx0dXBvYmpba2V5X3N0ciArICdmaW5pc2hfZGF0ZSddID0gbmV3IERhdGUoKTtcblx0XHRcdFx0XHRcdHVwb2JqW2tleV9zdHIgKyAnanVkZ2UnXSA9IFwic3VibWl0dGVkXCI7XG5cdFx0XHRcdFx0XHR1cG9ialtrZXlfc3RyICsgJ2Nvc3RfdGltZSddID0gbmV3IERhdGUoKSAtIGEuc3RhcnRfZGF0ZTtcblx0XHRcdFx0XHRcdGlmIChhcHByb3ZlX2lkID09IGEuX2lkICYmICF0LmlzX2ZpbmlzaGVkICYmIGNjSGFzRWRpdFBlcm1pc3Npb24pIHtcblx0XHRcdFx0XHRcdFx0bXlUcmFjZSA9IHQ7XG5cdFx0XHRcdFx0XHRcdHZhciBzdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCB0LnN0ZXApO1xuXHRcdFx0XHRcdFx0XHR1cG9ialtrZXlfc3RyICsgXCJ2YWx1ZXNcIl0gPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXModmFsdWVzLCBzdGVwW1wicGVybWlzc2lvbnNcIl0sIGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8v6K6+572u5oSP6KeB77yM5oSP6KeB5Y+q5re75Yqg5Yiw5pyA5ZCO5LiA5p2hYXBwcm92ZeS4rVxuXHRcdFx0XHRcdFx0aWYgKGFwcHJvdmVfaWQgPT0gYS5faWQpIHtcblx0XHRcdFx0XHRcdFx0dXBvYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcblx0XHRcdFx0XHRcdFx0X2lkOiBpbnNfaWQsXG5cdFx0XHRcdFx0XHRcdCd0cmFjZXMuX2lkJzogdC5faWRcblx0XHRcdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRcdFx0JHNldDogdXBvYmpcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAobXlBcHByb3ZlKSB7XG5cblx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcblxuXHRcdFx0aWYgKGNjSGFzRWRpdFBlcm1pc3Npb24gJiYgbXlBcHByb3ZlICYmICFteVRyYWNlLmlzX2ZpbmlzaGVkKSB7XG5cdFx0XHRcdHZhciBpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZCk7XG5cdFx0XHRcdHZhciB1cGRhdGVkX3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnMsIGFwcHJvdmVfaWQpO1xuXHRcdFx0XHRzZXRPYmoudmFsdWVzID0gdXBkYXRlZF92YWx1ZXM7XG5cdFx0XHRcdHNldE9iai5uYW1lID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZU5hbWUoaW5zdGFuY2UpO1xuXHRcdFx0fVxuXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcblx0XHRcdFx0X2lkOiBpbnNfaWQsXG5cdFx0XHRcdCd0cmFjZXMuX2lkJzogbXlBcHByb3ZlLnRyYWNlXG5cdFx0XHR9LCB7XG5cdFx0XHRcdCRzZXQ6IHNldE9iaixcblx0XHRcdFx0JHB1bGw6IHtcblx0XHRcdFx0XHRjY191c2VyczogY3VycmVudF91c2VyX2lkXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCRhZGRUb1NldDoge1xuXHRcdFx0XHRcdG91dGJveF91c2Vyczoge1xuXHRcdFx0XHRcdFx0JGVhY2g6IFtjdXJyZW50X3VzZXJfaWQsIG15QXBwcm92ZS51c2VyXVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcblxuXHRcdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcl9pZCk7XG5cdFx0XHQvL+S8oOmYheaPkOS6pOS4jemAmuefpeS8oOmYheiAhVxuXHRcdFx0aWYgKGZhbHNlICYmIGRlc2NyaXB0aW9uICYmIG15QXBwcm92ZSAmJiBteUFwcHJvdmUuZnJvbV91c2VyKSB7XG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwidHJhY2VfYXBwcm92ZV9jY19zdWJtaXRcIiwgaW5zdGFuY2UsIFwiXCIsIGN1cnJlbnRfdXNlcl9pbmZvLCBbbXlBcHByb3ZlLmZyb21fdXNlcl0pO1xuXHRcdFx0fVxuXG5cdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyX2lkKTtcblxuXHRcdFx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG5cdFx0XHQvLyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXG5cdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhmbG93X2lkLCBpbnN0YW5jZSwgbXlBcHByb3ZlLCAnY2Nfc3VibWl0JywgY3VycmVudF91c2VyX2lkLCBbXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Y2NfcmVtb3ZlOiBmdW5jdGlvbiAoaW5zdGFuY2VJZCwgYXBwcm92ZUlkKSB7XG5cdFx0dmFyIHNldE9iaiA9IHt9O1xuXG5cdFx0dmFyIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VJZCwge1xuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdHRyYWNlczogMSxcblx0XHRcdFx0Y2NfdXNlcnM6IDFcblx0XHRcdH1cblx0XHR9KTtcblx0XHR2YXIgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuXHRcdHZhciB0cmFjZV9pZCwgcmVtb3ZlX3VzZXJfaWQsIG11bHRpID0gZmFsc2U7XG5cblx0XHR0cmFjZXMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuXHRcdFx0aWYgKHQuYXBwcm92ZXMpIHtcblx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcblx0XHRcdFx0XHRpZiAoYS5faWQgPT0gYXBwcm92ZUlkKSB7XG5cdFx0XHRcdFx0XHR0cmFjZV9pZCA9IGEudHJhY2U7XG5cdFx0XHRcdFx0XHRyZW1vdmVfdXNlcl9pZCA9IGEuaGFuZGxlcjtcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuanVkZ2UnXSA9ICd0ZXJtaW5hdGVkJztcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19yZWFkJ10gPSB0cnVlO1xuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0aWYgKCF0cmFjZV9pZCB8fCAhcmVtb3ZlX3VzZXJfaWQpXG5cdFx0XHRyZXR1cm47XG5cblx0XHR2YXIgbXVsdGkgPSAwO1xuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRpZiAodC5hcHByb3Zlcykge1xuXHRcdFx0XHR0LmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcblx0XHRcdFx0XHRpZiAoYS5oYW5kbGVyID09IHJlbW92ZV91c2VyX2lkICYmIGEudHlwZSA9PSAnY2MnICYmIGEuaXNfZmluaXNoZWQgPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdG11bHRpKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0c2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcblxuXHRcdGlmIChtdWx0aSA+IDEpIHtcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xuXHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXG5cdFx0XHRcdCd0cmFjZXMuX2lkJzogdHJhY2VfaWRcblx0XHRcdH0sIHtcblx0XHRcdFx0JHNldDogc2V0T2JqXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcblx0XHRcdFx0J3RyYWNlcy5faWQnOiB0cmFjZV9pZFxuXHRcdFx0fSwge1xuXHRcdFx0XHQkc2V0OiBzZXRPYmosXG5cdFx0XHRcdCRwdWxsOiB7XG5cdFx0XHRcdFx0Y2NfdXNlcnM6IHJlbW92ZV91c2VyX2lkXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXG5cdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHJlbW92ZV91c2VyX2lkKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRjY19zYXZlOiBmdW5jdGlvbiAoaW5zX2lkLCBkZXNjcmlwdGlvbiwgbXlBcHByb3ZlLCBjY0hhc0VkaXRQZXJtaXNzaW9uKSB7XG5cdFx0dmFyIHNldE9iaiA9IHt9O1xuXG5cdFx0dmFyIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcblx0XHR2YXIgdHJhY2VzID0gaW5zdGFuY2UudHJhY2VzO1xuXHRcdHZhciBjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZDtcblxuXHRcdHZhciBteVRyYWNlO1xuXG5cdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XG5cdFx0XHRcdHQuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbiAoYSwgaWR4KSB7XG5cdFx0XHRcdFx0aWYgKGEuaGFuZGxlciA9PSBjdXJyZW50X3VzZXJfaWQgJiYgYS50eXBlID09ICdjYycgJiYgYS5pc19maW5pc2hlZCA9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0dmFyIHVwb2JqID0ge307XG5cdFx0XHRcdFx0XHR1cG9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuanVkZ2UnXSA9IFwic3VibWl0dGVkXCI7XG5cdFx0XHRcdFx0XHR1cG9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcucmVhZF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRcdFx0XHRcdF9pZDogaW5zX2lkLFxuXHRcdFx0XHRcdFx0XHQndHJhY2VzLl9pZCc6IHQuX2lkXG5cdFx0XHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0XHRcdCRzZXQ6IHVwb2JqXG5cdFx0XHRcdFx0XHR9KVxuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0dmFyIGluZGV4ID0gMDtcblx0XHR2YXIgY3VycmVudFN0ZXBJZDtcblxuXHRcdC8v6K6+572u5oSP6KeB77yM5oSP6KeB5Y+q5re75Yqg5Yiw5pyA5ZCO5LiA5p2hYXBwcm92ZeS4rVxuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRpZiAobXlBcHByb3ZlICYmIHQuX2lkID09PSBteUFwcHJvdmUudHJhY2UpIHtcblx0XHRcdFx0Y3VycmVudFN0ZXBJZCA9IHQuc3RlcDtcblx0XHRcdFx0bXlUcmFjZSA9IHQ7XG5cdFx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XG5cdFx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcblx0XHRcdFx0XHRcdGlmIChhLl9pZCA9PT0gbXlBcHByb3ZlLl9pZCkge1xuXHRcdFx0XHRcdFx0XHRpbmRleCA9IGlkeDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLmRlc2NyaXB0aW9uJ10gPSBkZXNjcmlwdGlvbjtcblxuXHRcdHZhciB1cGRhdGVPYmogPSB7fTtcblxuXHRcdGlmIChjY0hhc0VkaXRQZXJtaXNzaW9uICYmIG15QXBwcm92ZSAmJiAhbXlUcmFjZS5pc19maW5pc2hlZCkge1xuXG5cdFx0XHR2YXIga2V5X3N0ciA9ICd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLic7XG5cblx0XHRcdHZhciBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuXG5cdFx0XHR2YXIgc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgY3VycmVudFN0ZXBJZCk7XG5cblx0XHRcdHZhciBwZXJtaXNzaW9uc192YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMobXlBcHByb3ZlLnZhbHVlcywgc3RlcC5wZXJtaXNzaW9ucywgaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcblxuXHRcdFx0dmFyIGNoYW5nZV92YWx1ZXMgPSBhcHByb3ZlTWFuYWdlci5nZXRDaGFuZ2VWYWx1ZXMoaW5zdGFuY2UudmFsdWVzLCBwZXJtaXNzaW9uc192YWx1ZXMpO1xuXG5cdFx0XHRzZXRPYmoudmFsdWVzID0gXy5leHRlbmQoKGluc3RhbmNlLnZhbHVlcyB8fCB7fSksIHBlcm1pc3Npb25zX3ZhbHVlcyk7XG5cblx0XHRcdGlmICghXy5pc0VtcHR5KGNoYW5nZV92YWx1ZXMpKSB7XG5cdFx0XHRcdHZhciBwdXNoT2JqID0ge307XG5cdFx0XHRcdHB1c2hPYmpba2V5X3N0ciArICd2YWx1ZXNfaGlzdG9yeSddID0ge1xuXHRcdFx0XHRcdHZhbHVlczogY2hhbmdlX3ZhbHVlcyxcblx0XHRcdFx0XHRjcmVhdGU6IG5ldyBEYXRlKClcblx0XHRcdFx0fVxuXHRcdFx0XHR1cGRhdGVPYmouJHB1c2ggPSBwdXNoT2JqO1xuXHRcdFx0fVxuXG5cdFx0XHRzZXRPYmoubmFtZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VOYW1lKGluc3RhbmNlKVxuXHRcdH1cblxuXHRcdHVwZGF0ZU9iai4kc2V0ID0gc2V0T2JqO1xuXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRfaWQ6IGluc19pZCxcblx0XHRcdCd0cmFjZXMuX2lkJzogbXlBcHByb3ZlLnRyYWNlXG5cdFx0fSwgdXBkYXRlT2JqKTtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59KSIsIk1ldGVvci5tZXRob2RzKHtcblx0Ly8g5pS55Li66YCa6L+HYXBp6LCD55SoXG5cdGZvcndhcmRfaW5zdGFuY2U6IGZ1bmN0aW9uIChpbnN0YW5jZV9pZCwgc3BhY2VfaWQsIGZsb3dfaWQsIGhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCwgZGVzY3JpcHRpb24sIGlzRm9yd2FyZEF0dGFjaG1lbnRzLCBzZWxlY3RlZFVzZXJzLCBhY3Rpb25fdHlwZSwgcmVsYXRlZCwgZnJvbV9hcHByb3ZlX2lkKSB7XG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ25vdC1hdXRob3JpemVkJyk7XG5cblx0XHRyZXR1cm47XG5cdH0sXG5cblxuXHRmb3J3YXJkX3JlbW92ZTogZnVuY3Rpb24gKGluc3RhbmNlX2lkLCB0cmFjZV9pZCwgYXBwcm92ZV9pZCkge1xuXHRcdGNoZWNrKGluc3RhbmNlX2lkLCBTdHJpbmcpO1xuXHRcdGNoZWNrKHRyYWNlX2lkLCBTdHJpbmcpO1xuXHRcdGNoZWNrKGFwcHJvdmVfaWQsIFN0cmluZyk7XG5cblx0XHR2YXIgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpO1xuXG5cdFx0aWYgKCFpbnMpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3BhcmFtcyBlcnJvciEnLCAncmVjb3JkIG5vdCBleGlzdHMhJyk7XG5cdFx0fVxuXG5cdFx0dmFyIHRyYWNlID0gXy5maW5kKGlucy50cmFjZXMsIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRyZXR1cm4gdC5faWQgPT0gdHJhY2VfaWQ7XG5cdFx0fSk7XG5cblx0XHR2YXIgYXBwcm92ZSA9IF8uZmluZCh0cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24gKGFwcHIpIHtcblx0XHRcdHJldHVybiBhcHByLl9pZCA9PSBhcHByb3ZlX2lkO1xuXHRcdH0pXG5cblx0XHR2YXIgaGFzQWRtaW5QZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgdGhpcy51c2VySWQpXG5cblx0XHRpZiAoIWFwcHJvdmUgfHwgIVsnZm9yd2FyZCcsICdkaXN0cmlidXRlJ10uaW5jbHVkZXMoYXBwcm92ZS50eXBlKSB8fCAhYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlKSB7XG5cdFx0XHRpZiAoIWhhc0FkbWluUGVybWlzc2lvbikge1xuXHRcdFx0XHRpZiAoYXBwcm92ZS5mcm9tX3VzZXIgIT0gdGhpcy51c2VySWQpXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgJ2luc3RhbmNlX2ZvcndhcmRfY2Fubm90X2NhbmNlbCcpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBmb3J3YXJkX2luc3RhbmNlX2lkID0gYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlO1xuXHRcdHZhciBmb3J3YXJkX2luc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoZm9yd2FyZF9pbnN0YW5jZV9pZCk7XG5cdFx0aWYgKGZvcndhcmRfaW5zdGFuY2UpIHtcblx0XHRcdGlmIChmb3J3YXJkX2luc3RhbmNlLnN0YXRlICE9IFwiZHJhZnRcIikge1xuXHRcdFx0XHRpZiAoIWhhc0FkbWluUGVybWlzc2lvbilcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCAnaW5zdGFuY2VfZm9yd2FyZF9pbnN0YW5jZV9zdGF0ZV9jaGFuZ2VkJyk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgaW5ib3hfdXNlcnMgPSBmb3J3YXJkX2luc3RhbmNlLmluYm94X3VzZXJzIHx8IFtdO1xuXG5cdFx0XHRmb3J3YXJkX2luc3RhbmNlLmRlbGV0ZWQgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0Zm9yd2FyZF9pbnN0YW5jZS5kZWxldGVkX2J5ID0gdGhpcy51c2VySWQ7XG5cdFx0XHR2YXIgZGVsZXRlZF9mb3J3YXJkX2luc3RhbmNlX2lkID0gZGIuZGVsZXRlZF9pbnN0YW5jZXMuaW5zZXJ0KGZvcndhcmRfaW5zdGFuY2UpO1xuXHRcdFx0aWYgKGRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCkge1xuXHRcdFx0XHRkYi5pbnN0YW5jZXMucmVtb3ZlKHtcblx0XHRcdFx0XHRfaWQ6IGZvcndhcmRfaW5zdGFuY2VfaWRcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Ly8g5Yig6Zmk55Sz6K+35Y2V5ZCO6YeN5paw6K6h566XaW5ib3hfdXNlcnPnmoRiYWRnZVxuXHRcdFx0XHRfLmVhY2goaW5ib3hfdXNlcnMsIGZ1bmN0aW9uICh1X2lkKSB7XG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVfaWQpO1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBzZXRfb2JqID0gbmV3IE9iamVjdDtcblx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcblx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XG5cblx0XHRfLmVhY2godHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uIChhcHByLCBpZHgpIHtcblx0XHRcdGlmIChhcHByLl9pZCA9PSBhcHByb3ZlX2lkKSB7XG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSAndGVybWluYXRlZCc7XG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xuXHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5maW5pc2hfZGF0ZSddID0gbmV3IERhdGUoKTtcblx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZTtcblx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcucmVhZF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcblx0XHRcdF9pZDogaW5zdGFuY2VfaWQsXG5cdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VfaWRcblx0XHR9LCB7XG5cdFx0XHQkc2V0OiBzZXRfb2JqXG5cdFx0fSlcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGNhbmNlbERpc3RyaWJ1dGU6IGZ1bmN0aW9uIChpbnN0YW5jZV9pZCwgYXBwcm92ZV9pZHMpIHtcblx0XHRjaGVjayhpbnN0YW5jZV9pZCwgU3RyaW5nKVxuXHRcdGNoZWNrKGFwcHJvdmVfaWRzLCBBcnJheSlcblxuXHRcdHZhciBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZClcblxuXHRcdGlmICghaW5zKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdwYXJhbXMgZXJyb3IhJywgJ3JlY29yZCBub3QgZXhpc3RzIScpXG5cdFx0fVxuXG5cdFx0dXNlcklkID0gdGhpcy51c2VySWRcblxuXHRcdHZhciBoYXNBZG1pblBlcm1pc3Npb24gPSBXb3JrZmxvd01hbmFnZXIuaGFzRmxvd0FkbWluUGVybWlzc2lvbihpbnMuZmxvdywgaW5zLnNwYWNlLCB1c2VySWQpXG5cblx0XHRfLmVhY2goaW5zLnRyYWNlcywgZnVuY3Rpb24gKHQpIHtcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XG5cdFx0XHRcdHZhciBleGlzdHMgPSBmYWxzZVxuXHRcdFx0XHR2YXIgc2V0X29iaiA9IG5ldyBPYmplY3Rcblx0XHRcdFx0Xy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uIChhLCBpZHgpIHtcblx0XHRcdFx0XHRpZiAoYXBwcm92ZV9pZHMuaW5jbHVkZXMoYS5faWQpICYmIChhLmZyb21fdXNlciA9PSB1c2VySWQgfHwgaGFzQWRtaW5QZXJtaXNzaW9uKSAmJiAnZGlzdHJpYnV0ZScgPT0gYS50eXBlICYmIGEuZm9yd2FyZF9pbnN0YW5jZSkge1xuXHRcdFx0XHRcdFx0dmFyIGZvcndhcmRfaW5zdGFuY2VfaWQgPSBhLmZvcndhcmRfaW5zdGFuY2Vcblx0XHRcdFx0XHRcdHZhciBmb3J3YXJkX2luc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoZm9yd2FyZF9pbnN0YW5jZV9pZClcblx0XHRcdFx0XHRcdGlmIChmb3J3YXJkX2luc3RhbmNlKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChmb3J3YXJkX2luc3RhbmNlLnN0YXRlICE9IFwiZHJhZnRcIikge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHZhciBpbmJveF91c2VycyA9IGZvcndhcmRfaW5zdGFuY2UuaW5ib3hfdXNlcnMgfHwgW11cblxuXHRcdFx0XHRcdFx0XHRmb3J3YXJkX2luc3RhbmNlLmRlbGV0ZWQgPSBuZXcgRGF0ZSgpXG5cdFx0XHRcdFx0XHRcdGZvcndhcmRfaW5zdGFuY2UuZGVsZXRlZF9ieSA9IHVzZXJJZFxuXHRcdFx0XHRcdFx0XHR2YXIgZGVsZXRlZF9mb3J3YXJkX2luc3RhbmNlX2lkID0gZGIuZGVsZXRlZF9pbnN0YW5jZXMuaW5zZXJ0KGZvcndhcmRfaW5zdGFuY2UpXG5cdFx0XHRcdFx0XHRcdGlmIChkZWxldGVkX2ZvcndhcmRfaW5zdGFuY2VfaWQpIHtcblx0XHRcdFx0XHRcdFx0XHRkYi5pbnN0YW5jZXMucmVtb3ZlKHtcblx0XHRcdFx0XHRcdFx0XHRcdF9pZDogZm9yd2FyZF9pbnN0YW5jZV9pZFxuXHRcdFx0XHRcdFx0XHRcdH0pXG5cblx0XHRcdFx0XHRcdFx0XHQvLyDliKDpmaTnlLPor7fljZXlkI7ph43mlrDorqHnrpdpbmJveF91c2Vyc+eahGJhZGdlXG5cdFx0XHRcdFx0XHRcdFx0Xy5lYWNoKGluYm94X3VzZXJzLCBmdW5jdGlvbiAodV9pZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVfaWQpXG5cdFx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSAndGVybWluYXRlZCdcblx0XHRcdFx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWVcblx0XHRcdFx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZmluaXNoX2RhdGUnXSA9IG5ldyBEYXRlKClcblx0XHRcdFx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKClcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZXhpc3RzID0gdHJ1ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblxuXHRcdFx0XHRpZiAoIWV4aXN0cylcblx0XHRcdFx0XHRyZXR1cm5cblxuXHRcdFx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKVxuXHRcdFx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdXNlcklkXG5cblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRcdFx0X2lkOiBpbnN0YW5jZV9pZCxcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdC5faWRcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdCRzZXQ6IHNldF9vYmpcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0cmV0dXJuIHRydWVcblx0fVxuXG5cbn0pIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICAgIGNmc19pbnN0YW5jZXNfcmVtb3ZlOiBmdW5jdGlvbiAoZmlsZV9pZCkge1xuICAgICAgICBjaGVjayhmaWxlX2lkLCBTdHJpbmcpO1xuICAgICAgICBjZnMuaW5zdGFuY2VzLnJlbW92ZShmaWxlX2lkKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIGNmc19pbnN0YW5jZXNfc2V0X2N1cnJlbnQ6IGZ1bmN0aW9uIChmaWxlX2lkKSB7XG4gICAgICAgIGNoZWNrKGZpbGVfaWQsIFN0cmluZyk7XG4gICAgICAgIGNmcy5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICAgIF9pZDogZmlsZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgY2ZzX2luc3RhbmNlc19sb2NrOiBmdW5jdGlvbiAoZmlsZV9pZCwgdXNlcl9pZCwgdXNlcl9uYW1lKSB7XG4gICAgICAgIGNmcy5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICAgIF9pZDogZmlsZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF9ieSc6IHVzZXJfaWQsXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF9ieV9uYW1lJzogdXNlcl9uYW1lLFxuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfdGltZSc6IG5ldyBEYXRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBjZnNfaW5zdGFuY2VzX3VubG9jazogZnVuY3Rpb24gKGZpbGVfaWQpIHtcbiAgICAgICAgY2ZzLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBmaWxlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICR1bnNldDoge1xuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5sb2NrZWRfYnknOiAnJyxcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEubG9ja2VkX2J5X25hbWUnOiAnJyxcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEubG9ja2VkX3RpbWUnOiAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIGRvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2s6IGZ1bmN0aW9uIChzcGFjZUlkLCBjZnNSZWNvcmRJZHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnVzZXJJZClcbiAgICAgICAgICAgIHJldHVybiBcIuS4jeespuWQiOaJp+ihjOadoeS7tlwiXG5cbiAgICAgICAgaWYgKE1ldGVvci51c2Vycy5maW5kKHtcbiAgICAgICAgICAgICAgICBfaWQ6IHRoaXMudXNlcklkLFxuICAgICAgICAgICAgICAgIGlzX2Nsb3VkYWRtaW46IHRydWVcbiAgICAgICAgICAgIH0pLmNvdW50KCkgPCAxKVxuICAgICAgICAgICAgcmV0dXJuIFwi5LiN56ym5ZCI5omn6KGM5p2h5Lu2XCJcblxuICAgICAgICBjaGVjayhzcGFjZUlkLCBTdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdG9yZSA9IFwiaW5zdGFuY2VzXCI7XG4gICAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICAgIHZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICAgICAgICB2YXIgbWtkaXJwID0gcmVxdWlyZSgnbWtkaXJwJyk7XG4gICAgICAgIHZhciBwYXRobmFtZSA9IHBhdGguam9pbihfX21ldGVvcl9ib290c3RyYXBfXy5zZXJ2ZXJEaXIsICcuLi8uLi8uLi9jZnMvc3BhY2VJbnN0YW5jZUF0dGFjaG1lbnRzJyk7XG4gICAgICAgIC8vIFNldCBhYnNvbHV0ZSBwYXRoXG4gICAgICAgIHZhciBhYnNvbHV0ZVBhdGggPSBwYXRoLnJlc29sdmUocGF0aG5hbWUpO1xuICAgICAgICAvLyBFbnN1cmUgdGhlIHBhdGggZXhpc3RzXG4gICAgICAgIG1rZGlycC5zeW5jKGFic29sdXRlUGF0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhYnNvbHV0ZVBhdGg6ICcsIGFic29sdXRlUGF0aCk7XG4gICAgICAgIGNvbnNvbGUudGltZSgnZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzaycpO1xuICAgICAgICB2YXIgcXVlcnkgPSB7XG4gICAgICAgICAgICAnbWV0YWRhdGEuc3BhY2UnOiBzcGFjZUlkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNmc1JlY29yZElkcykge1xuICAgICAgICAgICAgcXVlcnkuX2lkID0ge1xuICAgICAgICAgICAgICAgICRpbjogY2ZzUmVjb3JkSWRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBkb3dubG9hZEZhaWxlZFJlY29yZElkcyA9IFtdO1xuICAgICAgICBjZnMuaW5zdGFuY2VzLmZpbmQocXVlcnkpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gc3RvcmUgKyAnLScgKyBjLl9pZCArICctJyArIGMubmFtZSgpO1xuICAgICAgICAgICAgICAgIHZhciBmaWxlUGF0aCA9IHBhdGguam9pbihhYnNvbHV0ZVBhdGgsIGZpbGVOYW1lKTtcbiAgICAgICAgICAgICAgICBNZXRlb3Iud3JhcEFzeW5jKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdyaXRlciA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci5vbignZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiBfLmlzRnVuY3Rpb24oY2FsbGJhY2spKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWFkZXIgPSBjLmNyZWF0ZVJlYWRTdHJlYW0oc3RvcmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkRmFpbGVkUmVjb3JkSWRzLnB1c2goYy5faWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Rvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2s6ICcsIGMuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucGlwZSh3cml0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZG93bmxvYWRfc3BhY2VfaW5zdGFuY2VfYXR0YWNobWVudHNfdG9fZGlzazogJywgYy5faWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKClcblxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrOiAnLCBjLl9pZCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignZG93bmxvYWRGYWlsZWRSZWNvcmRJZHM6ICcpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkb3dubG9hZEZhaWxlZFJlY29yZElkcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ2Rvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2snKTtcblxuICAgICAgICByZXR1cm4gZG93bmxvYWRGYWlsZWRSZWNvcmRJZHM7XG4gICAgfVxufSkiLCJNZXRlb3IubWV0aG9kc1xuXHRzZXRfYXBwcm92ZV9oYXZlX3JlYWQ6IChpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQpIC0+XG5cdFx0aWYgIXRoaXMudXNlcklkXG5cdFx0XHRyZXR1cm5cblxuXHRcdHNlbGYgPSB0aGlzXG5cblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHsgX2lkOiBpbnN0YW5jZUlkLCBcInRyYWNlcy5faWRcIjogdHJhY2VJZCB9LCB7IGZpZWxkczogeyBcInRyYWNlcy4kXCI6IDEgfSB9KVxuXG5cdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxuXHRcdFx0dHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF1cblx0XHRcdHNldE9iaiA9IHtcblx0XHRcdFx0bW9kaWZpZWQ6IG5ldyBEYXRlLFxuXHRcdFx0XHRtb2RpZmllZF9ieTogc2VsZi51c2VySWRcblx0XHRcdH1cblx0XHRcdHRyYWNlLmFwcHJvdmVzLmZvckVhY2ggKGFwcHJvdmUsIGlkeCkgLT5cblx0XHRcdFx0aWYgYXBwcm92ZS5faWQgPT0gYXBwcm92ZUlkICYmICFhcHByb3ZlLmlzX3JlYWRcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uaXNfcmVhZFwiXSA9IHRydWVcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxuXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRcdFx0X2lkOiBpbnN0YW5jZUlkLFxuXHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHQkc2V0OiBzZXRPYmpcblx0XHRcdFx0fSlcblx0XHRcdHJldHVybiB0cnVlXG5cblx0Y2hhbmdlX2FwcHJvdmVfaW5mbzogKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgZGVzY3JpcHRpb24sIGZpbmlzaF9kYXRlKSAtPlxuXHRcdGlmICF0aGlzLnVzZXJJZFxuXHRcdFx0cmV0dXJuXG5cdFx0Y2hlY2soaW5zdGFuY2VJZCwgU3RyaW5nKVxuXHRcdGNoZWNrKHRyYWNlSWQsIFN0cmluZylcblx0XHRjaGVjayhhcHByb3ZlSWQsIFN0cmluZylcblx0XHRjaGVjayhkZXNjcmlwdGlvbiwgU3RyaW5nKVxuXHRcdGNoZWNrKGZpbmlzaF9kYXRlLCBEYXRlKVxuXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7IF9pZDogaW5zdGFuY2VJZCwgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWQgfSwgeyBmaWVsZHM6IHsgXCJ0cmFjZXMuJFwiOiAxIH0gfSlcblxuXHRcdGlmIGluc3RhbmNlPy50cmFjZXM/Lmxlbmd0aCA+IDBcblx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXG5cdFx0XHRzZXRPYmogPSB7fVxuXHRcdFx0dHJhY2UuYXBwcm92ZXMuZm9yRWFjaCAoYXBwcm92ZSwgaWR4KSAtPlxuXHRcdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBhcHByb3ZlSWRcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvblxuXHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5maW5pc2hfZGF0ZVwiXSA9IGZpbmlzaF9kYXRlXG5cdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LmNvc3RfdGltZVwiXSA9IG5ldyBEYXRlKCkgLSBhcHByb3ZlLnN0YXJ0X2RhdGVcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxuXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRcdFx0X2lkOiBpbnN0YW5jZUlkLFxuXHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHQkc2V0OiBzZXRPYmpcblx0XHRcdFx0fSlcblx0XHRcdHJldHVybiB0cnVlXG5cblx0dXBkYXRlX2FwcHJvdmVfc2lnbjogKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgc2lnbl9maWVsZF9jb2RlLCBkZXNjcmlwdGlvbiwgc2lnbl90eXBlLCBsYXN0U2lnbkFwcHJvdmUpLT5cblx0XHRjaGVjayhpbnN0YW5jZUlkLCBTdHJpbmcpXG5cdFx0Y2hlY2sodHJhY2VJZCwgU3RyaW5nKVxuXHRcdGNoZWNrKGFwcHJvdmVJZCwgU3RyaW5nKVxuXHRcdGNoZWNrKHNpZ25fZmllbGRfY29kZSwgU3RyaW5nKVxuXHRcdGNoZWNrKGRlc2NyaXB0aW9uLCBTdHJpbmcpXG5cblx0XHRpZiAhdGhpcy51c2VySWRcblx0XHRcdHJldHVyblxuXG5cdFx0c2Vzc2lvbl91c2VySWQgPSB0aGlzLnVzZXJJZFxuXG5cdFx0aWYgbGFzdFNpZ25BcHByb3ZlXG5cblx0XHRcdGlmIGxhc3RTaWduQXBwcm92ZS5jdXN0b21fc2lnbl9zaG93XG5cdFx0XHRcdHJldHVyblxuXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcblx0XHRcdFx0X2lkOiBpbnN0YW5jZUlkLFxuXHRcdFx0XHRcInRyYWNlcy5faWRcIjogbGFzdFNpZ25BcHByb3ZlLnRyYWNlXG5cdFx0XHR9LCB7IGZpZWxkczogeyBcInRyYWNlcy4kXCI6IDEgfSB9KVxuXG5cdFx0XHRsYXN0VHJhY2UgPSBfLmZpbmQgaW5zdGFuY2U/LnRyYWNlcywgKHQpIC0+XG5cdFx0XHRcdHJldHVybiB0Ll9pZCA9IGxhc3RTaWduQXBwcm92ZS50cmFjZVxuXG5cdFx0XHRpZiBsYXN0VHJhY2Vcblx0XHRcdFx0c2V0T2JqID0ge31cblx0XHRcdFx0bGFzdFRyYWNlPy5hcHByb3Zlcy5mb3JFYWNoIChhLCBpZHgpIC0+XG5cdFx0XHRcdFx0aWYgYS5faWQgPT0gbGFzdFNpZ25BcHByb3ZlLl9pZFxuXHRcdFx0XHRcdFx0aWYgc2lnbl90eXBlID09IFwidXBkYXRlXCJcblx0XHRcdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LnNpZ25fc2hvd1wiXSA9IGZhbHNlXG5cdFx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZFwiXSA9IG5ldyBEYXRlKClcblx0XHRcdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9Lm1vZGlmaWVkX2J5XCJdID0gc2Vzc2lvbl91c2VySWRcblxuXHRcdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcblx0XHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcblx0XHRcdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcblx0XHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiBsYXN0VHJhY2UuX2lkXG5cdFx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdFx0JHNldDogc2V0T2JqXG5cdFx0XHRcdFx0fSlcblxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlSWQsIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkIH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXG5cblx0XHRpZiBpbnN0YW5jZT8udHJhY2VzPy5sZW5ndGggPiAwXG5cblx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXG5cdFx0XHR1cE9iaiA9IHt9XG5cdFx0XHR0cmFjZS5hcHByb3Zlcy5mb3JFYWNoIChhcHByb3ZlLCBpZHgpIC0+XG5cdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IGFwcHJvdmVJZFxuXHRcdFx0XHRcdGlmIHNpZ25fZmllbGRfY29kZVxuXHRcdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uc2lnbl9maWVsZF9jb2RlXCJdID0gc2lnbl9maWVsZF9jb2RlXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvblxuXHRcdFx0XHRcdHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LnNpZ25fc2hvd1wiXSA9IHRydWVcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZFwiXSA9IG5ldyBEYXRlKClcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZF9ieVwiXSA9IHNlc3Npb25fdXNlcklkXG5cdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0ucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKVxuXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KHVwT2JqKVxuXHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcblx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXG5cdFx0XHRcdFx0XCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdCRzZXQ6IHVwT2JqXG5cdFx0XHRcdH0pXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXG5cblx0dXBkYXRlX3NpZ25fc2hvdzogKG9ianMsIG15QXBwcm92ZV9pZCkgLT5cblx0XHRvYmpzLmZvckVhY2ggKG9iaiwgaW5kZXgpIC0+XG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHsgX2lkOiBvYmouaW5zdGFuY2UsIFwidHJhY2VzLl9pZFwiOiBvYmoudHJhY2UgfSwgeyBmaWVsZHM6IHsgXCJ0cmFjZXMuJFwiOiAxIH0gfSlcblx0XHRcdGlmIGluc3RhbmNlPy50cmFjZXM/Lmxlbmd0aCA+IDBcblx0XHRcdFx0dHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF1cblx0XHRcdFx0c2V0T2JqID0ge31cblx0XHRcdFx0dHJhY2UuYXBwcm92ZXMuZm9yRWFjaCAoYXBwcm92ZSwgaWR4KSAtPlxuXHRcdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IG9iai5faWRcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5zaWduX3Nob3dcIl0gPSBvYmouc2lnbl9zaG93XG5cdFx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uY3VzdG9tX3NpZ25fc2hvd1wiXSA9IG9iai5zaWduX3Nob3dcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXG5cblx0XHRcdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBteUFwcHJvdmVfaWRcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXG5cblx0XHRcdFx0aWYgbm90IF8uaXNFbXB0eShzZXRPYmopXG5cdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG5cdFx0XHRcdFx0XHRfaWQ6IG9iai5pbnN0YW5jZSxcblx0XHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiBvYmoudHJhY2Vcblx0XHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0XHQkc2V0OiBzZXRPYmpcblx0XHRcdFx0XHR9KVxuXG5cdFx0cmV0dXJuIHRydWVcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgc2V0X2FwcHJvdmVfaGF2ZV9yZWFkOiBmdW5jdGlvbihpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQpIHtcbiAgICB2YXIgaW5zdGFuY2UsIHJlZiwgc2VsZiwgc2V0T2JqLCB0cmFjZTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlbGYgPSB0aGlzO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgXCJ0cmFjZXMuJFwiOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKChpbnN0YW5jZSAhPSBudWxsID8gKHJlZiA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgdHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF07XG4gICAgICBzZXRPYmogPSB7XG4gICAgICAgIG1vZGlmaWVkOiBuZXcgRGF0ZSxcbiAgICAgICAgbW9kaWZpZWRfYnk6IHNlbGYudXNlcklkXG4gICAgICB9O1xuICAgICAgdHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlLCBpZHgpIHtcbiAgICAgICAgaWYgKGFwcHJvdmUuX2lkID09PSBhcHByb3ZlSWQgJiYgIWFwcHJvdmUuaXNfcmVhZCkge1xuICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuaXNfcmVhZFwiXSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIV8uaXNFbXB0eShzZXRPYmopKSB7XG4gICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICBjaGFuZ2VfYXBwcm92ZV9pbmZvOiBmdW5jdGlvbihpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIGRlc2NyaXB0aW9uLCBmaW5pc2hfZGF0ZSkge1xuICAgIHZhciBpbnN0YW5jZSwgcmVmLCBzZXRPYmosIHRyYWNlO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hlY2soaW5zdGFuY2VJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh0cmFjZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGFwcHJvdmVJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhkZXNjcmlwdGlvbiwgU3RyaW5nKTtcbiAgICBjaGVjayhmaW5pc2hfZGF0ZSwgRGF0ZSk7XG4gICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy4kXCI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoKGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICB0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXTtcbiAgICAgIHNldE9iaiA9IHt9O1xuICAgICAgdHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlLCBpZHgpIHtcbiAgICAgICAgaWYgKGFwcHJvdmUuX2lkID09PSBhcHByb3ZlSWQpIHtcbiAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmRlc2NyaXB0aW9uXCJdID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5maW5pc2hfZGF0ZVwiXSA9IGZpbmlzaF9kYXRlO1xuICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuY29zdF90aW1lXCJdID0gbmV3IERhdGUoKSAtIGFwcHJvdmUuc3RhcnRfZGF0ZTtcbiAgICAgICAgICByZXR1cm4gc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghXy5pc0VtcHR5KHNldE9iaikpIHtcbiAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZV9hcHByb3ZlX3NpZ246IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgc2lnbl9maWVsZF9jb2RlLCBkZXNjcmlwdGlvbiwgc2lnbl90eXBlLCBsYXN0U2lnbkFwcHJvdmUpIHtcbiAgICB2YXIgaW5zdGFuY2UsIGxhc3RUcmFjZSwgcmVmLCBzZXNzaW9uX3VzZXJJZCwgc2V0T2JqLCB0cmFjZSwgdXBPYmo7XG4gICAgY2hlY2soaW5zdGFuY2VJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh0cmFjZUlkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGFwcHJvdmVJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhzaWduX2ZpZWxkX2NvZGUsIFN0cmluZyk7XG4gICAgY2hlY2soZGVzY3JpcHRpb24sIFN0cmluZyk7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXNzaW9uX3VzZXJJZCA9IHRoaXMudXNlcklkO1xuICAgIGlmIChsYXN0U2lnbkFwcHJvdmUpIHtcbiAgICAgIGlmIChsYXN0U2lnbkFwcHJvdmUuY3VzdG9tX3NpZ25fc2hvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgICBcInRyYWNlcy5faWRcIjogbGFzdFNpZ25BcHByb3ZlLnRyYWNlXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIFwidHJhY2VzLiRcIjogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxhc3RUcmFjZSA9IF8uZmluZChpbnN0YW5jZSAhPSBudWxsID8gaW5zdGFuY2UudHJhY2VzIDogdm9pZCAwLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Ll9pZCA9IGxhc3RTaWduQXBwcm92ZS50cmFjZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGxhc3RUcmFjZSkge1xuICAgICAgICBzZXRPYmogPSB7fTtcbiAgICAgICAgaWYgKGxhc3RUcmFjZSAhPSBudWxsKSB7XG4gICAgICAgICAgbGFzdFRyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24oYSwgaWR4KSB7XG4gICAgICAgICAgICBpZiAoYS5faWQgPT09IGxhc3RTaWduQXBwcm92ZS5faWQpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25fdHlwZSA9PT0gXCJ1cGRhdGVcIikge1xuICAgICAgICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuc2lnbl9zaG93XCJdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5tb2RpZmllZFwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIubW9kaWZpZWRfYnlcIl0gPSBzZXNzaW9uX3VzZXJJZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghXy5pc0VtcHR5KHNldE9iaikpIHtcbiAgICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgICAgICAgIFwidHJhY2VzLl9pZFwiOiBsYXN0VHJhY2UuX2lkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy4kXCI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoKGluc3RhbmNlICE9IG51bGwgPyAocmVmID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICB0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXTtcbiAgICAgIHVwT2JqID0ge307XG4gICAgICB0cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUsIGlkeCkge1xuICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IGFwcHJvdmVJZCkge1xuICAgICAgICAgIGlmIChzaWduX2ZpZWxkX2NvZGUpIHtcbiAgICAgICAgICAgIHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5zaWduX2ZpZWxkX2NvZGVcIl0gPSBzaWduX2ZpZWxkX2NvZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5kZXNjcmlwdGlvblwiXSA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgIHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5zaWduX3Nob3dcIl0gPSB0cnVlO1xuICAgICAgICAgIHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5tb2RpZmllZFwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgdXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLm1vZGlmaWVkX2J5XCJdID0gc2Vzc2lvbl91c2VySWQ7XG4gICAgICAgICAgcmV0dXJuIHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghXy5pc0VtcHR5KHVwT2JqKSkge1xuICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHVwT2JqXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICB1cGRhdGVfc2lnbl9zaG93OiBmdW5jdGlvbihvYmpzLCBteUFwcHJvdmVfaWQpIHtcbiAgICBvYmpzLmZvckVhY2goZnVuY3Rpb24ob2JqLCBpbmRleCkge1xuICAgICAgdmFyIGluc3RhbmNlLCByZWYsIHNldE9iaiwgdHJhY2U7XG4gICAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBvYmouaW5zdGFuY2UsXG4gICAgICAgIFwidHJhY2VzLl9pZFwiOiBvYmoudHJhY2VcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgXCJ0cmFjZXMuJFwiOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKChpbnN0YW5jZSAhPSBudWxsID8gKHJlZiA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICB0cmFjZSA9IGluc3RhbmNlLnRyYWNlc1swXTtcbiAgICAgICAgc2V0T2JqID0ge307XG4gICAgICAgIHRyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSwgaWR4KSB7XG4gICAgICAgICAgaWYgKGFwcHJvdmUuX2lkID09PSBvYmouX2lkKSB7XG4gICAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnNpZ25fc2hvd1wiXSA9IG9iai5zaWduX3Nob3c7XG4gICAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmN1c3RvbV9zaWduX3Nob3dcIl0gPSBvYmouc2lnbl9zaG93O1xuICAgICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYXBwcm92ZS5faWQgPT09IG15QXBwcm92ZV9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIV8uaXNFbXB0eShzZXRPYmopKSB7XG4gICAgICAgICAgcmV0dXJuIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBvYmouaW5zdGFuY2UsXG4gICAgICAgICAgICBcInRyYWNlcy5faWRcIjogb2JqLnRyYWNlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xuXHRpbnN0YW5jZV9yZXR1cm46IChhcHByb3ZlLCByZWFzb24pLT5cblx0XHRjaGVjayhhcHByb3ZlLCBPYmplY3QpXG5cblx0XHRjdXJyZW50X3VzZXIgPSB0aGlzLnVzZXJJZFxuXHRcdGluc3RhbmNlX2lkID0gYXBwcm92ZS5pbnN0YW5jZVxuXG5cdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcblx0XHRzcGFjZV9pZCA9IGlucy5zcGFjZVxuXG5cdFx0IyAtIOW+heWuoeaguOeusVxuXHRcdGlmIGlucy5zdGF0ZSBpc250IFwicGVuZGluZ1wiIG9yICFpbnMuaW5ib3hfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIilcblxuXHRcdCMgLSDmlofku7bkuI3mmK/kvKDpmIVcblx0XHRpZiBhcHByb3ZlLnR5cGUgaXMgXCJjY1wiIGFuZCBpbnMuY2NfdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIilcblxuXHRcdCMgLSDnrb7moLjljobnqIvkuK3lvZPliY3mraXpqqTkuIrkuIDmraXpqqTkuI3mmK/kvJrnrb5cblx0XHRpZiBpbnMudHJhY2VzLmxlbmd0aCA8IDJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXG5cdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnMuZmxvdylcblx0XHRwcmVfdHJhY2UgPSBpbnMudHJhY2VzW2lucy50cmFjZXMubGVuZ3RoIC0gMl1cblx0XHRwcmVfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIHByZV90cmFjZS5zdGVwKVxuXHRcdGlmIHByZV9zdGVwLnN0ZXBfdHlwZSBpcyBcImNvdW50ZXJTaWduXCJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXG5cblx0XHQjIC0g5b2T5YmN5q2l6aqk5Li65aGr5YaZ5oiW6ICF5a6h5om5XG5cdFx0bGFzdF90cmFjZSA9IF8ubGFzdChpbnMudHJhY2VzKVxuXHRcdGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIGxhc3RfdHJhY2Uuc3RlcClcblx0XHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzbnQgXCJzdWJtaXRcIiBhbmQgY3VycmVudF9zdGVwLnN0ZXBfdHlwZSBpc250IFwic2lnblwiIGFuZCBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzbnQgXCJjb3VudGVyU2lnblwiXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxuXG5cdFx0IyAtIOWPguaVsGFwcHJvdmXkuK10cmFjZeS4juW9k+WJjeiOt+WPlueahHRyYWNl5piv5ZCm5Yy56YWNXG5cdFx0aWYgYXBwcm92ZS50cmFjZSBpc250IGxhc3RfdHJhY2UuX2lkXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxuXG5cdFx0bmV3X2luYm94X3VzZXJzID0gbmV3IEFycmF5XG5cdFx0Xy5lYWNoIHByZV90cmFjZS5hcHByb3ZlcywgKGEpLT5cblx0XHRcdGlmICghYS50eXBlIG9yIGEudHlwZSBpcyBcImRyYWZ0XCIgb3IgYS50eXBlIGlzIFwicmVhc3NpZ25cIikgYW5kICghYS5qdWRnZSBvciBhLmp1ZGdlIGlzIFwic3VibWl0dGVkXCIgb3IgYS5qdWRnZSBpcyBcImFwcHJvdmVkXCIgb3IgYS5qdWRnZSBpcyBcInJlamVjdGVkXCIpXG5cdFx0XHRcdG5ld19pbmJveF91c2Vycy5wdXNoKGEudXNlcilcblxuXHRcdGlmIF8uaXNFbXB0eShuZXdfaW5ib3hfdXNlcnMpXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOS4i+S4gOatpeWkhOeQhuS6uu+8jOmAgOWbnuWksei0pVwiKVxuXG5cdFx0dHJhY2VzID0gaW5zLnRyYWNlc1xuXG5cdFx0YXBwcm92ZV92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldEFwcHJvdmVWYWx1ZXMoYXBwcm92ZS52YWx1ZXMgfHwge30sIGN1cnJlbnRfc3RlcC5wZXJtaXNzaW9ucywgaW5zLmZvcm0sIGlucy5mb3JtX3ZlcnNpb24pXG5cblx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XG5cdFx0bm93ID0gbmV3IERhdGVcblx0XHRyZXN0X2NvdW50ZXJfdXNlcnMgPSBuZXcgQXJyYXlcblx0XHRfLmVhY2ggdHJhY2VzLCAodCktPlxuXHRcdFx0aWYgdC5faWQgaXMgbGFzdF90cmFjZS5faWRcblx0XHRcdFx0aWYgbm90IHQuYXBwcm92ZXNcblx0XHRcdFx0XHR0LmFwcHJvdmVzID0gbmV3IEFycmF5XG5cdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYSwgaWR4KS0+XG5cdFx0XHRcdFx0aWYgKCFhLnR5cGUgb3IgYS50eXBlIGlzIFwicmVhc3NpZ25cIikgYW5kICghYS5qdWRnZSBvciBhLmp1ZGdlIGlzIFwic3VibWl0dGVkXCIgb3IgYS5qdWRnZSBpcyBcImFwcHJvdmVkXCIgb3IgYS5qdWRnZSBpcyBcInJlamVjdGVkXCIgb3IgYS5qdWRnZSBpcyBcInJlYWRlZFwiKSBhbmQgYS5pc19maW5pc2hlZCBpc250IHRydWVcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZmluaXNoX2RhdGUnXSA9IG5vd1xuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5vd1xuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19lcnJvciddID0gZmFsc2Vcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZVxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19maW5pc2hlZCddID0gdHJ1ZVxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5jb3N0X3RpbWUnXSA9IG5vdyAtIGEuc3RhcnRfZGF0ZVxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy52YWx1ZXMnXSA9IGFwcHJvdmVfdmFsdWVzXG5cdFx0XHRcdFx0XHRpZiBhLmhhbmRsZXIgaXMgY3VycmVudF91c2VyXG5cdFx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuanVkZ2UnXSA9IFwicmV0dXJuZWRcIlxuXHRcdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmRlc2NyaXB0aW9uJ10gPSByZWFzb25cblx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdFx0cmVzdF9jb3VudGVyX3VzZXJzLnB1c2ggYS5oYW5kbGVyXG5cblx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZeiusOW9lVxuXHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmlzX2ZpbmlzaGVkJ10gPSB0cnVlXG5cdFx0XHRcdHNldE9ialsndHJhY2VzLiQuZmluaXNoX2RhdGUnXSA9IHRydWVcblx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5qdWRnZSddID0gXCJyZXR1cm5lZFwiXG5cblx0XHRpbnMudmFsdWVzID0gXy5leHRlbmQoKGlucy52YWx1ZXMgfHwge30pLCBhcHByb3ZlX3ZhbHVlcylcblxuXHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2XorrDlvZVcblx0XHRuZXdUcmFjZSA9IG5ldyBPYmplY3Rcblx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXG5cdFx0bmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxuXHRcdG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlLl9pZF1cblx0XHRuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlXG5cdFx0bmV3VHJhY2Uuc3RlcCA9IHByZV90cmFjZS5zdGVwXG5cdFx0bmV3VHJhY2UubmFtZSA9IHByZV90cmFjZS5uYW1lXG5cdFx0bmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vd1xuXHRcdG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKHByZV9zdGVwLnRpbWVvdXRfaG91cnMsIHNwYWNlX2lkKVxuXHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cblx0XHRfLmVhY2ggbmV3X2luYm94X3VzZXJzLCAobmV4dF9zdGVwX3VzZXJfaWQsIGlkeCktPlxuXHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZS5hcHByb3Zl6K6w5b2VXG5cdFx0XHRuZXdBcHByb3ZlID0gbmV3IE9iamVjdFxuXHRcdFx0bmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXG5cdFx0XHRuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcblx0XHRcdG5ld0FwcHJvdmUudHJhY2UgPSBuZXdUcmFjZS5faWRcblx0XHRcdG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZVxuXHRcdFx0bmV3QXBwcm92ZS51c2VyID0gbmV4dF9zdGVwX3VzZXJfaWRcblxuXHRcdFx0dXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwge2ZpZWxkczoge25hbWU6IDF9fSlcblx0XHRcdG5ld0FwcHJvdmUudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWVcblxuXHRcdFx0aGFuZGxlcl9pZCA9IG5leHRfc3RlcF91c2VyX2lkXG5cdFx0XHRoYW5kbGVyX2luZm8gPSB1c2VyX2luZm9cblx0XHRcdGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpXG5cdFx0XHRpZiBhZ2VudFxuXHRcdFx0XHRuZXdfaW5ib3hfdXNlcnNbaWR4XSA9IGFnZW50XG5cdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudFxuXHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiBhZ2VudCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcblx0XHRcdFx0bmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50XG5cblx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlciA9IGhhbmRsZXJfaWRcblx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWVcblxuXHRcdFx0bmV4dF9zdGVwX3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgaGFuZGxlcl9pZClcblx0XHRcdCMg6I635Y+WbmV4dF9zdGVwX3VzZXLmiYDlnKjnmoTpg6jpl6jkv6Hmga9cblx0XHRcdG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKVxuXHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdXG5cdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXG5cdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl1cblxuXHRcdFx0bmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93XG5cdFx0XHRuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZVxuXHRcdFx0bmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlXG5cdFx0XHRuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Rcblx0XHRcdHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnMudmFsdWVzLCBuZXdBcHByb3ZlKVxuXHRcdFx0bmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKVxuXG5cdFx0c2V0T2JqLmluYm94X3VzZXJzID0gbmV3X2luYm94X3VzZXJzXG5cdFx0c2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCJcblxuXHRcdGlucy5vdXRib3hfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpXG5cdFx0c2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnMub3V0Ym94X3VzZXJzKVxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5vd1xuXHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxuXHRcdHNldE9iai52YWx1ZXMgPSBpbnMudmFsdWVzXG5cblx0XHRzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBwcmVfdHJhY2UubmFtZVxuXG5cdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWQsICd0cmFjZXMuX2lkJzogbGFzdF90cmFjZS5faWR9LCB7JHNldDogc2V0T2JqfSlcblx0XHRiID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskcHVzaDoge3RyYWNlczogbmV3VHJhY2V9fSlcblx0XHRpZiByICYmIGJcblx0XHRcdCMg5pawaW5ib3hfdXNlcnMg5ZKMIOW9k+WJjeeUqOaItyDlj5HpgIFwdXNoXG5cdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgY3VycmVudF91c2VyKVxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxuXHRcdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmV0dXJuX3BlbmRpbmdfaW5ib3hcIiwgaW5zdGFuY2UsIHJlYXNvbiwgY3VycmVudF91c2VyX2luZm8pXG5cdFx0XHQjIOWmguaenOaYr+S8muetvuWImee7meS8muetvuacquaPkOS6pOeahOS6uuWPkemAgXB1c2hcblx0XHRcdF8uZWFjaCByZXN0X2NvdW50ZXJfdXNlcnMsICh1c2VyX2lkKS0+XG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKVxuXHRcdHJldHVybiB0cnVlIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBpbnN0YW5jZV9yZXR1cm46IGZ1bmN0aW9uKGFwcHJvdmUsIHJlYXNvbikge1xuICAgIHZhciBhcHByb3ZlX3ZhbHVlcywgYiwgY3VycmVudF9zdGVwLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBmbG93LCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9pZCwgbGFzdF90cmFjZSwgbmV3VHJhY2UsIG5ld19pbmJveF91c2Vycywgbm93LCBwcmVfc3RlcCwgcHJlX3RyYWNlLCByLCByZXN0X2NvdW50ZXJfdXNlcnMsIHNldE9iaiwgc3BhY2VfaWQsIHRyYWNlcztcbiAgICBjaGVjayhhcHByb3ZlLCBPYmplY3QpO1xuICAgIGN1cnJlbnRfdXNlciA9IHRoaXMudXNlcklkO1xuICAgIGluc3RhbmNlX2lkID0gYXBwcm92ZS5pbnN0YW5jZTtcbiAgICBpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICBzcGFjZV9pZCA9IGlucy5zcGFjZTtcbiAgICBpZiAoaW5zLnN0YXRlICE9PSBcInBlbmRpbmdcIiB8fCAhaW5zLmluYm94X3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBpZiAoYXBwcm92ZS50eXBlID09PSBcImNjXCIgJiYgaW5zLmNjX3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBpZiAoaW5zLnRyYWNlcy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKTtcbiAgICB9XG4gICAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnMuZmxvdyk7XG4gICAgcHJlX3RyYWNlID0gaW5zLnRyYWNlc1tpbnMudHJhY2VzLmxlbmd0aCAtIDJdO1xuICAgIHByZV9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgcHJlX3RyYWNlLnN0ZXApO1xuICAgIGlmIChwcmVfc3RlcC5zdGVwX3R5cGUgPT09IFwiY291bnRlclNpZ25cIikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIik7XG4gICAgfVxuICAgIGxhc3RfdHJhY2UgPSBfLmxhc3QoaW5zLnRyYWNlcyk7XG4gICAgY3VycmVudF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgbGFzdF90cmFjZS5zdGVwKTtcbiAgICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSAhPT0gXCJzdWJtaXRcIiAmJiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlICE9PSBcInNpZ25cIiAmJiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlICE9PSBcImNvdW50ZXJTaWduXCIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBpZiAoYXBwcm92ZS50cmFjZSAhPT0gbGFzdF90cmFjZS5faWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBuZXdfaW5ib3hfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKHByZV90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgaWYgKCghYS50eXBlIHx8IGEudHlwZSA9PT0gXCJkcmFmdFwiIHx8IGEudHlwZSA9PT0gXCJyZWFzc2lnblwiKSAmJiAoIWEuanVkZ2UgfHwgYS5qdWRnZSA9PT0gXCJzdWJtaXR0ZWRcIiB8fCBhLmp1ZGdlID09PSBcImFwcHJvdmVkXCIgfHwgYS5qdWRnZSA9PT0gXCJyZWplY3RlZFwiKSkge1xuICAgICAgICByZXR1cm4gbmV3X2luYm94X3VzZXJzLnB1c2goYS51c2VyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoXy5pc0VtcHR5KG5ld19pbmJveF91c2VycykpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5om+5Yiw5LiL5LiA5q2l5aSE55CG5Lq677yM6YCA5Zue5aSx6LSlXCIpO1xuICAgIH1cbiAgICB0cmFjZXMgPSBpbnMudHJhY2VzO1xuICAgIGFwcHJvdmVfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRBcHByb3ZlVmFsdWVzKGFwcHJvdmUudmFsdWVzIHx8IHt9LCBjdXJyZW50X3N0ZXAucGVybWlzc2lvbnMsIGlucy5mb3JtLCBpbnMuZm9ybV92ZXJzaW9uKTtcbiAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgIHJlc3RfY291bnRlcl91c2VycyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2godHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICBpZiAodC5faWQgPT09IGxhc3RfdHJhY2UuX2lkKSB7XG4gICAgICAgIGlmICghdC5hcHByb3Zlcykge1xuICAgICAgICAgIHQuYXBwcm92ZXMgPSBuZXcgQXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGEsIGlkeCkge1xuICAgICAgICAgIGlmICgoIWEudHlwZSB8fCBhLnR5cGUgPT09IFwicmVhc3NpZ25cIikgJiYgKCFhLmp1ZGdlIHx8IGEuanVkZ2UgPT09IFwic3VibWl0dGVkXCIgfHwgYS5qdWRnZSA9PT0gXCJhcHByb3ZlZFwiIHx8IGEuanVkZ2UgPT09IFwicmVqZWN0ZWRcIiB8fCBhLmp1ZGdlID09PSBcInJlYWRlZFwiKSAmJiBhLmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBub3c7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLnJlYWRfZGF0ZSddID0gbm93O1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19lcnJvciddID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX3JlYWQnXSA9IHRydWU7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5jb3N0X3RpbWUnXSA9IG5vdyAtIGEuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcudmFsdWVzJ10gPSBhcHByb3ZlX3ZhbHVlcztcbiAgICAgICAgICAgIGlmIChhLmhhbmRsZXIgPT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSBcInJldHVybmVkXCI7XG4gICAgICAgICAgICAgIHJldHVybiBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmRlc2NyaXB0aW9uJ10gPSByZWFzb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdF9jb3VudGVyX3VzZXJzLnB1c2goYS5oYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xuICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmZpbmlzaF9kYXRlJ10gPSB0cnVlO1xuICAgICAgICByZXR1cm4gc2V0T2JqWyd0cmFjZXMuJC5qdWRnZSddID0gXCJyZXR1cm5lZFwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlucy52YWx1ZXMgPSBfLmV4dGVuZChpbnMudmFsdWVzIHx8IHt9LCBhcHByb3ZlX3ZhbHVlcyk7XG4gICAgbmV3VHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgIG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICBuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdO1xuICAgIG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgbmV3VHJhY2Uuc3RlcCA9IHByZV90cmFjZS5zdGVwO1xuICAgIG5ld1RyYWNlLm5hbWUgPSBwcmVfdHJhY2UubmFtZTtcbiAgICBuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93O1xuICAgIG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKHByZV9zdGVwLnRpbWVvdXRfaG91cnMsIHNwYWNlX2lkKTtcbiAgICBuZXdUcmFjZS5hcHByb3ZlcyA9IFtdO1xuICAgIF8uZWFjaChuZXdfaW5ib3hfdXNlcnMsIGZ1bmN0aW9uKG5leHRfc3RlcF91c2VyX2lkLCBpZHgpIHtcbiAgICAgIHZhciBhZ2VudCwgaGFuZGxlcl9pZCwgaGFuZGxlcl9pbmZvLCBuZXdBcHByb3ZlLCBuZXh0X3N0ZXBfc3BhY2VfdXNlciwgbmV4dF9zdGVwX3VzZXJfb3JnX2luZm8sIHVzZXJfaW5mbztcbiAgICAgIG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgICAgbmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgbmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgbmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZDtcbiAgICAgIG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUudXNlciA9IG5leHRfc3RlcF91c2VyX2lkO1xuICAgICAgdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbmV3QXBwcm92ZS51c2VyX25hbWUgPSB1c2VyX2luZm8ubmFtZTtcbiAgICAgIGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZDtcbiAgICAgIGhhbmRsZXJfaW5mbyA9IHVzZXJfaW5mbztcbiAgICAgIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpO1xuICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgIG5ld19pbmJveF91c2Vyc1tpZHhdID0gYWdlbnQ7XG4gICAgICAgIGhhbmRsZXJfaWQgPSBhZ2VudDtcbiAgICAgICAgaGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgX2lkOiBhZ2VudFxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50O1xuICAgICAgfVxuICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZDtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICBuZXh0X3N0ZXBfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBoYW5kbGVyX2lkKTtcbiAgICAgIG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKTtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl07XG4gICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICBuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgIHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnMudmFsdWVzLCBuZXdBcHByb3ZlKTtcbiAgICAgIHJldHVybiBuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpO1xuICAgIH0pO1xuICAgIHNldE9iai5pbmJveF91c2VycyA9IG5ld19pbmJveF91c2VycztcbiAgICBzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgICBpbnMub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICBzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGlucy5vdXRib3hfdXNlcnMpO1xuICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgc2V0T2JqLnZhbHVlcyA9IGlucy52YWx1ZXM7XG4gICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gcHJlX3RyYWNlLm5hbWU7XG4gICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZCxcbiAgICAgICd0cmFjZXMuX2lkJzogbGFzdF90cmFjZS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiBzZXRPYmpcbiAgICB9KTtcbiAgICBiID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgfSwge1xuICAgICAgJHB1c2g6IHtcbiAgICAgICAgdHJhY2VzOiBuZXdUcmFjZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChyICYmIGIpIHtcbiAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCBjdXJyZW50X3VzZXIpO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgICAgcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZXR1cm5fcGVuZGluZ19pbmJveFwiLCBpbnN0YW5jZSwgcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICBfLmVhY2gocmVzdF9jb3VudGVyX3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcblx0aW5zdGFuY2VfcmVtaW5kOiAocmVtaW5kX3VzZXJzLCByZW1pbmRfY291bnQsIHJlbWluZF9kZWFkbGluZSwgaW5zdGFuY2VfaWQsIGFjdGlvbl90eXBlcywgdHJhY2VfaWQpLT5cblx0XHRjaGVjayByZW1pbmRfdXNlcnMsIEFycmF5XG5cdFx0Y2hlY2sgcmVtaW5kX2NvdW50LCBNYXRjaC5PbmVPZignc2luZ2xlJywgJ211bHRpJylcblx0XHRjaGVjayByZW1pbmRfZGVhZGxpbmUsIERhdGVcblx0XHRjaGVjayBpbnN0YW5jZV9pZCwgU3RyaW5nXG5cdFx0Y2hlY2sgYWN0aW9uX3R5cGVzLCBBcnJheVxuXHRcdGNoZWNrIHRyYWNlX2lkLCBTdHJpbmdcblxuXHRcdGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkXG5cdFx0bGFzdF9yZW1pbmRfdXNlcnMgPSBuZXcgQXJyYXlcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHtmaWVsZHM6IHtuYW1lOiAxLCB0cmFjZXM6IDEsIHZhbHVlczogMSwgc3BhY2U6IDF9fSlcblx0XHRpZiBhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2FkbWluJylcblx0XHRcdGlmIHJlbWluZF9jb3VudCBpcyAnc2luZ2xlJ1xuXHRcdFx0XHRfLmVhY2ggaW5zLnRyYWNlcywgKHQpLT5cblx0XHRcdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGFwKS0+XG5cdFx0XHRcdFx0XHRpZiByZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgYW5kIGFwLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxuXHRcdFx0XHRcdFx0XHRsYXN0X3JlbWluZF91c2Vycy5wdXNoIGFwLnVzZXJcblx0XHRcdGVsc2UgaWYgcmVtaW5kX2NvdW50IGlzICdtdWx0aSdcblx0XHRcdFx0bm93ID0gbmV3IERhdGVcblx0XHRcdFx0cHJpb3JpdHkgPSBpbnMudmFsdWVzLnByaW9yaXR5XG5cdFx0XHRcdF8uZWFjaCBpbnMudHJhY2VzLCAodCktPlxuXHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYXApLT5cblx0XHRcdFx0XHRcdGlmIHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSBhbmQgYXAuaXNfZmluaXNoZWQgaXNudCB0cnVlXG5cdFx0XHRcdFx0XHRcdGxhc3RfcmVtaW5kX3VzZXJzLnB1c2ggYXAudXNlclxuXHRcdFx0XHRcdFx0XHRhcC5tYW51YWxfZGVhZGxpbmUgPSByZW1pbmRfZGVhZGxpbmVcblx0XHRcdFx0XHRcdFx0IyDvvIgx77yJ4oCc5pmu6YCa4oCd77ya5aaC5LiJ5Liq5bel5L2c5pel5YaF5pyq5aSE55CG77yM57O757uf6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5Li65LqM5pel5YaF77ybXG5cdFx0XHRcdFx0XHRcdCMgIOWmguS6jOaXpeWQjuS7jeacquWkhOeQhu+8jOezu+e7n+avj+WkqeiHquWKqOWPkeefreS/oeaPkOmGku+8jOWKnue7k+aXtumZkOS4uuS4gOaXpeWGheOAglxuXHRcdFx0XHRcdFx0XHRpZiBwcmlvcml0eSBpcyBcIuaZrumAmlwiIG9yIG5vdCBwcmlvcml0eVxuXHRcdFx0XHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRcdFx0XHQjIO+8iDLvvInigJzlip7mlofigJ3vvJrlpoLkuIDkuKrlt6XkvZzml6XlhoXmnKrlpITnkIbvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrooajljZXkuIrnmoTigJzlip7nu5Pml7bpmZDigJ3vvIjmlofkuablvZXlhaXnmoTml7bpl7TvvInvvJtcblx0XHRcdFx0XHRcdFx0IyAg5aaC5LiA5pel5ZCO5LuN5pyq5aSE55CG77yM57O757uf5q+P5aSp6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5LiN5Y+Y77ybXG5cdFx0XHRcdFx0XHRcdCMgIOi3neemu+WKnue7k+aXtumZkOS4uuWNiuaXpeaXtu+8jOWImeavj+WNiuS4quW3peS9nOaXpeaPkOmGkuWbm+asoe+8m+i2hei/h+WKnue7k+aXtumZkOWQjuS7jeeEtuaMieeFp+avj+WNiuaXpeWbm+asoeaPkOmGkuOAglxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi5Yqe5paHXCJcblx0XHRcdFx0XHRcdFx0XHRpZiBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUgIyDotoXov4fkuoblip7nu5Pml7bpmZDmiJbogIXot53nprvlip7nu5Pml7bpmZDljYrml6XlhoVcblx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3csIHRydWUpXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZSA9IChiYXNlX2RhdGUpLT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cGx1c19oYWxmZGF5X2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShub3cpXG5cblx0XHRcdFx0XHRcdFx0IyDvvIgz77yJ4oCc57Sn5oCl4oCd77ya5Zyo5Y+R6YCB55qE5ZCM5pe277yM57O757uf6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5Li66KGo5Y2V5LiK55qE4oCc5Yqe57uT5pe26ZmQ4oCd77yI5paH5Lmm5b2V5YWl55qE5pe26Ze077yJ77ybXG5cdFx0XHRcdFx0XHRcdCMgIOWmguWNiuaXpeWGheS7jeacquWkhOeQhu+8jOezu+e7n+avj+WNiuWkqeiHquWKqOWPkeefreS/oeaPkOmGku+8muWKnue7k+aXtumZkOS4jeWPmO+8m+i3neemu+WKnue7k+aXtumZkOS4uuWNiuaXpeaXtu+8jOavj+WNiuS4quW3peS9nOaXpeaPkOmGkuWbm+asoe+8m+i2hei/h+WKnue7k+aXtumZkOWQjuS7jeeEtuaMieeFp+avj+WNiuaXpeWbm+asoeaPkOmGkuOAglxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi57Sn5oClXCJcblx0XHRcdFx0XHRcdFx0XHRpZiBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUgIyDotoXov4fkuoblip7nu5Pml7bpmZDmiJbogIXot53nprvlip7nu5Pml7bpmZDljYrml6XlhoVcblx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3csIHRydWUpXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZSA9IChiYXNlX2RhdGUpLT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cGx1c19oYWxmZGF5X2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShub3cpXG5cblx0XHRcdFx0XHRcdFx0IyDvvIg077yJ4oCc54m55oCl4oCd77ya5Zyo5Y+R6YCB55qE5ZCM5pe277yM57O757uf6Ieq5Yqo5Y+R55+t5L+h5o+Q6YaS77ya5Yqe57uT5pe26ZmQ5Li66KGo5Y2V5LiK55qE4oCc5Yqe57uT5pe26ZmQ4oCd77yI5paH5Lmm5b2V5YWl55qE5pe26Ze077yJ77ybXG5cdFx0XHRcdFx0XHRcdCMgIOWmguWNiuaXpeWGheS7jeacquWkhOeQhu+8jOezu+e7n+avj+WNiuS4quW3peS9nOaXpeaPkOmGkuWbm+asoe+8muWKnue7k+aXtumZkOS4jeWPmO+8m+i2hei/h+WKnue7k+aXtumZkOWQjuS7jeeEtuaMieeFp+avj+WNiuaXpeWbm+asoeaPkOmGkuOAglxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi54m55oClXCJcblx0XHRcdFx0XHRcdFx0XHRpZiBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUgIyDotoXov4fkuoblip7nu5Pml7bpmZDmiJbogIXot53nprvlip7nu5Pml7bpmZDljYrml6XlhoVcblx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3csIHRydWUpXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZSA9IChiYXNlX2RhdGUpLT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cGx1c19oYWxmZGF5X2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShub3cpXG5cblx0XHRcdFx0aWYgbm90IF8uaXNFbXB0eShsYXN0X3JlbWluZF91c2Vycylcblx0XHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHsndHJhY2VzJzogaW5zLnRyYWNlc319KVxuXG5cdFx0ZWxzZSBpZiBhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2FwcGxpY2FudCcpXG5cdFx0XHR0cmFjZSA9IF8uZmluZCBpbnMudHJhY2VzLCAodCktPlxuXHRcdFx0XHRyZXR1cm4gdC5faWQgaXMgdHJhY2VfaWRcblx0XHRcdF8uZWFjaCB0cmFjZS5hcHByb3ZlcywgKGFwKS0+XG5cdFx0XHRcdGlmIHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSBhbmQgYXAuaXNfZmluaXNoZWQgaXNudCB0cnVlXG5cdFx0XHRcdFx0bGFzdF9yZW1pbmRfdXNlcnMucHVzaCBhcC51c2VyXG5cblx0XHRlbHNlIGlmIGFjdGlvbl90eXBlcy5pbmNsdWRlcygnY2MnKVxuXHRcdFx0Xy5lYWNoIGlucy50cmFjZXMsICh0KS0+XG5cdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYXApLT5cblx0XHRcdFx0XHRpZiByZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgYW5kIGFwLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZSBhbmQgYXAudHlwZSBpcyAnY2MnIGFuZCBhcC5mcm9tX3VzZXIgaXMgY3VycmVudF91c2VyX2lkXG5cdFx0XHRcdFx0XHRsYXN0X3JlbWluZF91c2Vycy5wdXNoIGFwLnVzZXJcblxuXHRcdHV1Zmxvd01hbmFnZXIuc2VuZFJlbWluZFNNUyBpbnMubmFtZSwgcmVtaW5kX2RlYWRsaW5lLCBsYXN0X3JlbWluZF91c2VycywgaW5zLnNwYWNlLCBpbnMuX2lkXG5cblx0XHRyZXR1cm4gdHJ1ZVxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBpbnN0YW5jZV9yZW1pbmQ6IGZ1bmN0aW9uKHJlbWluZF91c2VycywgcmVtaW5kX2NvdW50LCByZW1pbmRfZGVhZGxpbmUsIGluc3RhbmNlX2lkLCBhY3Rpb25fdHlwZXMsIHRyYWNlX2lkKSB7XG4gICAgdmFyIGN1cnJlbnRfdXNlcl9pZCwgaW5zLCBsYXN0X3JlbWluZF91c2Vycywgbm93LCBwcmlvcml0eSwgdHJhY2U7XG4gICAgY2hlY2socmVtaW5kX3VzZXJzLCBBcnJheSk7XG4gICAgY2hlY2socmVtaW5kX2NvdW50LCBNYXRjaC5PbmVPZignc2luZ2xlJywgJ211bHRpJykpO1xuICAgIGNoZWNrKHJlbWluZF9kZWFkbGluZSwgRGF0ZSk7XG4gICAgY2hlY2soaW5zdGFuY2VfaWQsIFN0cmluZyk7XG4gICAgY2hlY2soYWN0aW9uX3R5cGVzLCBBcnJheSk7XG4gICAgY2hlY2sodHJhY2VfaWQsIFN0cmluZyk7XG4gICAgY3VycmVudF91c2VyX2lkID0gdGhpcy51c2VySWQ7XG4gICAgbGFzdF9yZW1pbmRfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBuYW1lOiAxLFxuICAgICAgICB0cmFjZXM6IDEsXG4gICAgICAgIHZhbHVlczogMSxcbiAgICAgICAgc3BhY2U6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoYWN0aW9uX3R5cGVzLmluY2x1ZGVzKCdhZG1pbicpKSB7XG4gICAgICBpZiAocmVtaW5kX2NvdW50ID09PSAnc2luZ2xlJykge1xuICAgICAgICBfLmVhY2goaW5zLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHJldHVybiBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYXApIHtcbiAgICAgICAgICAgIGlmIChyZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgJiYgYXAuaXNfZmluaXNoZWQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxhc3RfcmVtaW5kX3VzZXJzLnB1c2goYXAudXNlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChyZW1pbmRfY291bnQgPT09ICdtdWx0aScpIHtcbiAgICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIHByaW9yaXR5ID0gaW5zLnZhbHVlcy5wcmlvcml0eTtcbiAgICAgICAgXy5lYWNoKGlucy50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICByZXR1cm4gXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGFwKSB7XG4gICAgICAgICAgICB2YXIgY2FjdWxhdGVfZGF0ZTtcbiAgICAgICAgICAgIGlmIChyZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgJiYgYXAuaXNfZmluaXNoZWQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgbGFzdF9yZW1pbmRfdXNlcnMucHVzaChhcC51c2VyKTtcbiAgICAgICAgICAgICAgYXAubWFudWFsX2RlYWRsaW5lID0gcmVtaW5kX2RlYWRsaW5lO1xuICAgICAgICAgICAgICBpZiAocHJpb3JpdHkgPT09IFwi5pmu6YCaXCIgfHwgIXByaW9yaXR5KSB7XG5cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmlvcml0eSA9PT0gXCLlip7mlodcIikge1xuICAgICAgICAgICAgICAgIGlmIChTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFN0ZWVkb3MuY2FjdWxhdGVXb3JraW5nVGltZShub3csIDEpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlID0gZnVuY3Rpb24oYmFzZV9kYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbHVzX2hhbGZkYXlfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgcGx1c19oYWxmZGF5X2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVzX2hhbGZkYXlfZGF0ZSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWN1bGF0ZV9kYXRlKG5vdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByaW9yaXR5ID09PSBcIue0p+aApVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwLnJlbWluZF9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3csIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoU3RlZWRvcy5jYWN1bGF0ZVdvcmtpbmdUaW1lKG5vdywgMSkgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUgPSBmdW5jdGlvbihiYXNlX2RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsdXNfaGFsZmRheV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICBwbHVzX2hhbGZkYXlfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdXNfaGFsZmRheV9kYXRlID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXAucmVtaW5kX2RhdGUgPSBiYXNlX2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY3VsYXRlX2RhdGUobm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpb3JpdHkgPT09IFwi54m55oClXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3cpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYXAucmVtaW5kX2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZSA9IGZ1bmN0aW9uKGJhc2VfZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGx1c19oYWxmZGF5X2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FjdWxhdGVfZGF0ZShub3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFfLmlzRW1wdHkobGFzdF9yZW1pbmRfdXNlcnMpKSB7XG4gICAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICAndHJhY2VzJzogaW5zLnRyYWNlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2FwcGxpY2FudCcpKSB7XG4gICAgICB0cmFjZSA9IF8uZmluZChpbnMudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiB0Ll9pZCA9PT0gdHJhY2VfaWQ7XG4gICAgICB9KTtcbiAgICAgIF8uZWFjaCh0cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24oYXApIHtcbiAgICAgICAgaWYgKHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSAmJiBhcC5pc19maW5pc2hlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBsYXN0X3JlbWluZF91c2Vycy5wdXNoKGFwLnVzZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbl90eXBlcy5pbmNsdWRlcygnY2MnKSkge1xuICAgICAgXy5lYWNoKGlucy50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhcCkge1xuICAgICAgICAgIGlmIChyZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgJiYgYXAuaXNfZmluaXNoZWQgIT09IHRydWUgJiYgYXAudHlwZSA9PT0gJ2NjJyAmJiBhcC5mcm9tX3VzZXIgPT09IGN1cnJlbnRfdXNlcl9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RfcmVtaW5kX3VzZXJzLnB1c2goYXAudXNlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLnNlbmRSZW1pbmRTTVMoaW5zLm5hbWUsIHJlbWluZF9kZWFkbGluZSwgbGFzdF9yZW1pbmRfdXNlcnMsIGlucy5zcGFjZSwgaW5zLl9pZCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcblx0bmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZDogKGRlYWxfdHlwZSwgc3RlcF9uYW1lLCBwYXJhbXMpIC0+XG5cdFx0Y2hlY2sgZGVhbF90eXBlLCBTdHJpbmdcblx0XHRjaGVjayBzdGVwX25hbWUsIFN0cmluZ1xuXHRcdGNoZWNrIHBhcmFtcywgT2JqZWN0XG5cblx0XHRzdHIgPSBcIlwiXG5cdFx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IHRoaXMudXNlcklkIH0sIHsgZmllbGRzOiB7IGxvY2FsZTogMSB9IH0pXG5cdFx0I+iuvue9ruW9k+WJjeivreiogOeOr+Wig1xuXHRcdGxhbmcgPSAnZW4nXG5cdFx0aWYgdXNlci5sb2NhbGUgaXMgJ3poLWNuJ1xuXHRcdFx0bGFuZyA9ICd6aC1DTidcblxuXHRcdCMg5oyH5a6a5a6h5om55bKX5L2NXG5cdFx0aWYgZGVhbF90eXBlIGlzICdhcHBsaWNhbnRSb2xlJ1xuXHRcdFx0YXBwcm92ZXJfcm9sZXMgPSBwYXJhbXMuYXBwcm92ZXJfcm9sZXNcblx0XHRcdHJvbGVzID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiB7ICRpbjogYXBwcm92ZXJfcm9sZXMgfSB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSkuZmV0Y2goKVxuXHRcdFx0cm9sZXNfbmFtZSA9IF8ucGx1Y2socm9sZXMsICduYW1lJykudG9TdHJpbmcoKVxuXHRcdFx0c3RyID0gVEFQaTE4bi5fXyAnbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZC5hcHBsaWNhbnRfcm9sZScsIHsgc3RlcF9uYW1lOiBzdGVwX25hbWUsIHJvbGVfbmFtZTogcm9sZXNfbmFtZSB9LCBsYW5nXG5cblxuXHRcdHJldHVybiBzdHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZDogZnVuY3Rpb24oZGVhbF90eXBlLCBzdGVwX25hbWUsIHBhcmFtcykge1xuICAgIHZhciBhcHByb3Zlcl9yb2xlcywgbGFuZywgcm9sZXMsIHJvbGVzX25hbWUsIHN0ciwgdXNlcjtcbiAgICBjaGVjayhkZWFsX3R5cGUsIFN0cmluZyk7XG4gICAgY2hlY2soc3RlcF9uYW1lLCBTdHJpbmcpO1xuICAgIGNoZWNrKHBhcmFtcywgT2JqZWN0KTtcbiAgICBzdHIgPSBcIlwiO1xuICAgIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgIF9pZDogdGhpcy51c2VySWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbG9jYWxlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgbGFuZyA9ICdlbic7XG4gICAgaWYgKHVzZXIubG9jYWxlID09PSAnemgtY24nKSB7XG4gICAgICBsYW5nID0gJ3poLUNOJztcbiAgICB9XG4gICAgaWYgKGRlYWxfdHlwZSA9PT0gJ2FwcGxpY2FudFJvbGUnKSB7XG4gICAgICBhcHByb3Zlcl9yb2xlcyA9IHBhcmFtcy5hcHByb3Zlcl9yb2xlcztcbiAgICAgIHJvbGVzID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBhcHByb3Zlcl9yb2xlc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIHJvbGVzX25hbWUgPSBfLnBsdWNrKHJvbGVzLCAnbmFtZScpLnRvU3RyaW5nKCk7XG4gICAgICBzdHIgPSBUQVBpMThuLl9fKCduZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmFwcGxpY2FudF9yb2xlJywge1xuICAgICAgICBzdGVwX25hbWU6IHN0ZXBfbmFtZSxcbiAgICAgICAgcm9sZV9uYW1lOiByb2xlc19uYW1lXG4gICAgICB9LCBsYW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufSk7XG4iLCJfZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKVxuXG5NZXRlb3IubWV0aG9kc1xuXHRpbnN0YW5jZU51bWJlckJ1aWxkZXI6IChzcGFjZUlkLCBuYW1lKS0+XG5cblx0XHRudW1iZXJSdWxlcyA9IGRiLmluc3RhbmNlX251bWJlcl9ydWxlcy5maW5kT25lKHtzcGFjZTogc3BhY2VJZCwgbmFtZTogbmFtZX0pXG5cblx0XHRpZiAhbnVtYmVyUnVsZXNcblx0XHRcdHRocm93IG5ldyAgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIiN7bmFtZX1cIilcblxuXHRcdGRhdGUgPSBuZXcgRGF0ZSgpXG5cblx0XHRjb250ZXh0ID0ge31cblxuXHRcdGNvbnRleHQuXyA9IF9cblxuXHRcdF9ZWVlZID0gZGF0ZS5nZXRGdWxsWWVhcigpXG5cblx0XHRfTlVNQkVSID0gKG51bWJlclJ1bGVzLm51bWJlciB8fCAwKSArIDFcblxuXHRcdGNvbnRleHQuWVlZWSA9IF8uY2xvbmUoX1lZWVkpXG5cblx0XHRjb250ZXh0Lk1NID0gZGF0ZS5nZXRNb250aCgpICsgMVxuXG5cdFx0Y29udGV4dC5tbSA9IGRhdGUuZ2V0TW9udGgoKSArIDFcblxuXHRcdGlmIGNvbnRleHQuTU0gPCAxMFxuXHRcdFx0Y29udGV4dC5NTSA9IFwiMFwiICsgY29udGV4dC5NTVxuXG5cdFx0Y29udGV4dC5ERCA9IGRhdGUuZ2V0RGF0ZSgpXG5cblx0XHRjb250ZXh0LmRkID0gZGF0ZS5nZXREYXRlKClcblxuXHRcdGlmIGNvbnRleHQuREQgPCAxMFxuXHRcdFx0Y29udGV4dC5ERCA9IFwiMFwiICsgY29udGV4dC5ERFxuXG5cdFx0aWYgY29udGV4dC5ZWVlZICE9IG51bWJlclJ1bGVzLnllYXJcblx0XHRcdF9OVU1CRVIgPSBudW1iZXJSdWxlcy5maXJzdF9udW1iZXIgfHwgMVxuXG5cdFx0Y29udGV4dC5OVU1CRVIgPSBfLmNsb25lKF9OVU1CRVIpXG5cblx0XHRydWxlcyA9IG51bWJlclJ1bGVzLnJ1bGVzLnJlcGxhY2UoXCJ7WVlZWX1cIiwgXCInICsgWVlZWSArICdcIikucmVwbGFjZShcIntNTX1cIiwgXCInICsgTU0gKyAnXCIpLnJlcGxhY2UoXCJ7TlVNQkVSfVwiLCBcIicgKyBOVU1CRVIgKyAnXCIpXG5cblx0XHRzY3JpcHQgPSBcInZhciBuZXdObyA9ICcje3J1bGVzfSc7IGV4cG9ydHMubmV3Tm8gPSBuZXdOb1wiO1xuXG5cdFx0dHJ5XG5cdFx0XHRyZXMgPSBfZXZhbChzY3JpcHQsIFwibmV3Tm9cIiwgY29udGV4dCwgZmFsc2UpLm5ld05vXG5cblx0XHRcdGRiLmluc3RhbmNlX251bWJlcl9ydWxlcy51cGRhdGUoe19pZDogbnVtYmVyUnVsZXMuX2lkfSwgeyRzZXQ6IHt5ZWFyOiBfWVlZWSwgbnVtYmVyOiBfTlVNQkVSfX0pXG5cblx0XHRcdGNvbnNvbGUubG9nIHRoaXMudXNlcklkLCByZXNcblxuXHRcdGNhdGNoIGVcblx0XHRcdHJlcyA9IHtfZXJyb3I6IGV9XG5cblx0XHRyZXR1cm4gcmVzO1xuIiwidmFyIF9ldmFsO1xuXG5fZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKTtcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICBpbnN0YW5jZU51bWJlckJ1aWxkZXI6IGZ1bmN0aW9uKHNwYWNlSWQsIG5hbWUpIHtcbiAgICB2YXIgX05VTUJFUiwgX1lZWVksIGNvbnRleHQsIGRhdGUsIGUsIG51bWJlclJ1bGVzLCByZXMsIHJ1bGVzLCBzY3JpcHQ7XG4gICAgbnVtYmVyUnVsZXMgPSBkYi5pbnN0YW5jZV9udW1iZXJfcnVsZXMuZmluZE9uZSh7XG4gICAgICBzcGFjZTogc3BhY2VJZCxcbiAgICAgIG5hbWU6IG5hbWVcbiAgICB9KTtcbiAgICBpZiAoIW51bWJlclJ1bGVzKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIlwiICsgbmFtZSk7XG4gICAgfVxuICAgIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnRleHQgPSB7fTtcbiAgICBjb250ZXh0Ll8gPSBfO1xuICAgIF9ZWVlZID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIF9OVU1CRVIgPSAobnVtYmVyUnVsZXMubnVtYmVyIHx8IDApICsgMTtcbiAgICBjb250ZXh0LllZWVkgPSBfLmNsb25lKF9ZWVlZKTtcbiAgICBjb250ZXh0Lk1NID0gZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgICBjb250ZXh0Lm1tID0gZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgICBpZiAoY29udGV4dC5NTSA8IDEwKSB7XG4gICAgICBjb250ZXh0Lk1NID0gXCIwXCIgKyBjb250ZXh0Lk1NO1xuICAgIH1cbiAgICBjb250ZXh0LkREID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgY29udGV4dC5kZCA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgIGlmIChjb250ZXh0LkREIDwgMTApIHtcbiAgICAgIGNvbnRleHQuREQgPSBcIjBcIiArIGNvbnRleHQuREQ7XG4gICAgfVxuICAgIGlmIChjb250ZXh0LllZWVkgIT09IG51bWJlclJ1bGVzLnllYXIpIHtcbiAgICAgIF9OVU1CRVIgPSBudW1iZXJSdWxlcy5maXJzdF9udW1iZXIgfHwgMTtcbiAgICB9XG4gICAgY29udGV4dC5OVU1CRVIgPSBfLmNsb25lKF9OVU1CRVIpO1xuICAgIHJ1bGVzID0gbnVtYmVyUnVsZXMucnVsZXMucmVwbGFjZShcIntZWVlZfVwiLCBcIicgKyBZWVlZICsgJ1wiKS5yZXBsYWNlKFwie01NfVwiLCBcIicgKyBNTSArICdcIikucmVwbGFjZShcIntOVU1CRVJ9XCIsIFwiJyArIE5VTUJFUiArICdcIik7XG4gICAgc2NyaXB0ID0gXCJ2YXIgbmV3Tm8gPSAnXCIgKyBydWxlcyArIFwiJzsgZXhwb3J0cy5uZXdObyA9IG5ld05vXCI7XG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IF9ldmFsKHNjcmlwdCwgXCJuZXdOb1wiLCBjb250ZXh0LCBmYWxzZSkubmV3Tm87XG4gICAgICBkYi5pbnN0YW5jZV9udW1iZXJfcnVsZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBudW1iZXJSdWxlcy5faWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDoge1xuICAgICAgICAgIHllYXI6IF9ZWVlZLFxuICAgICAgICAgIG51bWJlcjogX05VTUJFUlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMudXNlcklkLCByZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBlID0gZXJyb3I7XG4gICAgICByZXMgPSB7XG4gICAgICAgIF9lcnJvcjogZVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xuXHRjaGVja19tYWluX2F0dGFjaDogKGluc19pZCwgbmFtZSktPlxuXHRcdGNoZWNrIGluc19pZCwgU3RyaW5nXG5cdFx0dXVmbG93TWFuYWdlci5jaGVja01haW5BdHRhY2goaW5zX2lkLCBuYW1lKVxuXHRcdHJldHVybiAnc3VjY2VzcydcblxuIiwiTWV0ZW9yLm1ldGhvZHNcblx0cmVtb3ZlX3JlbGF0ZWQ6IChpbnNfaWQsIHJlX2luc19pZCktPlxuXHRcdGNoZWNrKGluc19pZCwgU3RyaW5nKVxuXHRcdGNoZWNrKHJlX2luc19pZCwgU3RyaW5nKVxuXHRcdGlmICF0aGlzLnVzZXJJZFxuXHRcdFx0cmV0dXJuXG5cblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWR9LCB7ZmllbGRzOiB7cmVsYXRlZF9pbnN0YW5jZXM6IDF9fSlcblxuXHRcdGlmIGluc1xuXHRcdFx0cmVzID0gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIHx8IFtdXG5cblx0XHRcdGluZGV4ID0gcmVzLmluZGV4T2YocmVfaW5zX2lkKVxuXG5cdFx0XHRpZiBpbmRleCA+IC0xXG5cdFx0XHRcdHJlcy5yZW1vdmUoaW5kZXgpXG5cblx0XHRcdHNldF9vYmogPSBuZXcgT2JqZWN0O1xuXHRcdFx0c2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XG5cdFx0XHRzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVzXG5cblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zX2lkfSwgeyRzZXQ6IHNldF9vYmp9KVxuXG5cdHVwZGF0ZV9pbnN0YW5jZV9yZWxhdGVkOiAoaW5zX2lkLCByZWxhdGVkX2luc3RhbmNlcyktPlxuXHRcdGNoZWNrKGluc19pZCwgU3RyaW5nKVxuXHRcdGNoZWNrKHJlbGF0ZWRfaW5zdGFuY2VzLCBBcnJheSlcblxuXHRcdGlmICF0aGlzLnVzZXJJZFxuXHRcdFx0cmV0dXJuXG5cblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWQsICRvcjogW3tzdWJtaXR0ZXI6IHRoaXMudXNlcklkfSwge2FwcGxpY2FudDogdGhpcy51c2VySWR9LCB7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dfSwge2ZpZWxkczoge3N0YXRlOiAxfX0pXG5cblx0XHRpZiBpbnNcblx0XHRcdHNldF9vYmogPSBuZXcgT2JqZWN0O1xuXHRcdFx0c2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XG5cdFx0XHRzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVsYXRlZF9pbnN0YW5jZXNcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zX2lkfSwgeyRzZXQ6IHNldF9vYmp9KVxuXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW46ICByZWxhdGVkX2luc3RhbmNlc319LCB7ZmllbGRzOiB7X2lkOiAxLCB2YWx1ZXM6IDF9fSkuZmV0Y2goKVxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICByZW1vdmVfcmVsYXRlZDogZnVuY3Rpb24oaW5zX2lkLCByZV9pbnNfaWQpIHtcbiAgICB2YXIgaW5kZXgsIGlucywgcmVzLCBzZXRfb2JqO1xuICAgIGNoZWNrKGluc19pZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZV9pbnNfaWQsIFN0cmluZyk7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICByZWxhdGVkX2luc3RhbmNlczogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnMpIHtcbiAgICAgIHJlcyA9IGlucy5yZWxhdGVkX2luc3RhbmNlcyB8fCBbXTtcbiAgICAgIGluZGV4ID0gcmVzLmluZGV4T2YocmVfaW5zX2lkKTtcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHJlcy5yZW1vdmUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgc2V0X29iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcbiAgICAgIHNldF9vYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcbiAgICAgIHNldF9vYmoucmVsYXRlZF9pbnN0YW5jZXMgPSByZXM7XG4gICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRzZXQ6IHNldF9vYmpcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlX2luc3RhbmNlX3JlbGF0ZWQ6IGZ1bmN0aW9uKGluc19pZCwgcmVsYXRlZF9pbnN0YW5jZXMpIHtcbiAgICB2YXIgaW5zLCBzZXRfb2JqO1xuICAgIGNoZWNrKGluc19pZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZWxhdGVkX2luc3RhbmNlcywgQXJyYXkpO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnNfaWQsXG4gICAgICAkb3I6IFtcbiAgICAgICAge1xuICAgICAgICAgIHN1Ym1pdHRlcjogdGhpcy51c2VySWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIGFwcGxpY2FudDogdGhpcy51c2VySWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIGluYm94X3VzZXJzOiB0aGlzLnVzZXJJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgY2NfdXNlcnM6IHRoaXMudXNlcklkXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zKSB7XG4gICAgICBzZXRfb2JqID0gbmV3IE9iamVjdDtcbiAgICAgIHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuICAgICAgc2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xuICAgICAgc2V0X29iai5yZWxhdGVkX2luc3RhbmNlcyA9IHJlbGF0ZWRfaW5zdGFuY2VzO1xuICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRzZXQ6IHNldF9vYmpcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgX2lkOiB7XG4gICAgICAgICRpbjogcmVsYXRlZF9pbnN0YW5jZXNcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgX2lkOiAxLFxuICAgICAgICB2YWx1ZXM6IDFcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXG5cdHVwZGF0ZUZsb3dQb3NpdGlvbjogKGRhdGEpIC0+XG5cdFx0ZGIuZmxvd19wb3NpdGlvbnMudXBkYXRlIHsgX2lkOiBkYXRhLl9pZCB9LCAkc2V0OlxuXHRcdFx0cm9sZTogZGF0YS5yb2xlXG5cdFx0XHR1c2VyczogZGF0YS51c2Vyc1xuXHRcdFx0b3JnOiBkYXRhLm9yZ1xuXG5cdHVwZGF0ZUZsb3dSb2xlOiAoZGF0YSkgLT5cblx0XHRjb25zb2xlLmxvZyBkYXRhLl9pZFxuXHRcdGNvbnNvbGUubG9nIGRhdGEubmFtZVxuXHRcdGRiLmZsb3dfcm9sZXMudXBkYXRlIHsgX2lkOiBkYXRhLl9pZCB9LCAkc2V0OlxuXHRcdFx0bmFtZTogZGF0YS5uYW1lIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICB1cGRhdGVGbG93UG9zaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gZGIuZmxvd19wb3NpdGlvbnMudXBkYXRlKHtcbiAgICAgIF9pZDogZGF0YS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIHJvbGU6IGRhdGEucm9sZSxcbiAgICAgICAgdXNlcnM6IGRhdGEudXNlcnMsXG4gICAgICAgIG9yZzogZGF0YS5vcmdcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgdXBkYXRlRmxvd1JvbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhkYXRhLl9pZCk7XG4gICAgY29uc29sZS5sb2coZGF0YS5uYW1lKTtcbiAgICByZXR1cm4gZGIuZmxvd19yb2xlcy51cGRhdGUoe1xuICAgICAgX2lkOiBkYXRhLl9pZFxuICAgIH0sIHtcbiAgICAgICRzZXQ6IHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcblx0c3RhcnRfZmxvdzogKHNwYWNlLCBmbG93SWQsIHN0YXJ0KSAtPlxuXG5cdFx0a2V5VmFsdWUgPSBkYi5zdGVlZG9zX2tleXZhbHVlcy5maW5kT25lKHsgc3BhY2U6IHNwYWNlLCB1c2VyOiB0aGlzLnVzZXJJZCwga2V5OiAnc3RhcnRfZmxvd3MnIH0sIHsgZmllbGRzOiB7IHZhbHVlOiAxIH0gfSlcblxuXHRcdHN0YXJ0X2Zsb3dzID0ga2V5VmFsdWU/LnZhbHVlIHx8IFtdXG5cblx0XHRpZiBzdGFydFxuXHRcdFx0c3RhcnRfZmxvd3MucHVzaChmbG93SWQpXG5cblx0XHRcdHN0YXJ0X2Zsb3dzID0gXy51bmlxKHN0YXJ0X2Zsb3dzKVxuXHRcdGVsc2Vcblx0XHRcdHN0YXJ0X2Zsb3dzLnJlbW92ZShzdGFydF9mbG93cy5pbmRleE9mKGZsb3dJZCkpXG5cblx0XHRpZiBrZXlWYWx1ZVxuXHRcdFx0ZGIuc3RlZWRvc19rZXl2YWx1ZXMudXBkYXRlKHsgX2lkOiBrZXlWYWx1ZS5faWQgfSwgeyBzcGFjZTogc3BhY2UsIHVzZXI6IHRoaXMudXNlcklkLCBrZXk6ICdzdGFydF9mbG93cycsIHZhbHVlOiBzdGFydF9mbG93cyB9KVxuXHRcdGVsc2Vcblx0XHRcdGRiLnN0ZWVkb3Nfa2V5dmFsdWVzLmluc2VydCh7IHNwYWNlOiBzcGFjZSwgdXNlcjogdGhpcy51c2VySWQsIGtleTogJ3N0YXJ0X2Zsb3dzJywgdmFsdWU6IHN0YXJ0X2Zsb3dzIH0pXG5cbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgc3RhcnRfZmxvdzogZnVuY3Rpb24oc3BhY2UsIGZsb3dJZCwgc3RhcnQpIHtcbiAgICB2YXIga2V5VmFsdWUsIHN0YXJ0X2Zsb3dzO1xuICAgIGtleVZhbHVlID0gZGIuc3RlZWRvc19rZXl2YWx1ZXMuZmluZE9uZSh7XG4gICAgICBzcGFjZTogc3BhY2UsXG4gICAgICB1c2VyOiB0aGlzLnVzZXJJZCxcbiAgICAgIGtleTogJ3N0YXJ0X2Zsb3dzJ1xuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB2YWx1ZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIHN0YXJ0X2Zsb3dzID0gKGtleVZhbHVlICE9IG51bGwgPyBrZXlWYWx1ZS52YWx1ZSA6IHZvaWQgMCkgfHwgW107XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICBzdGFydF9mbG93cy5wdXNoKGZsb3dJZCk7XG4gICAgICBzdGFydF9mbG93cyA9IF8udW5pcShzdGFydF9mbG93cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0X2Zsb3dzLnJlbW92ZShzdGFydF9mbG93cy5pbmRleE9mKGZsb3dJZCkpO1xuICAgIH1cbiAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgIHJldHVybiBkYi5zdGVlZG9zX2tleXZhbHVlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IGtleVZhbHVlLl9pZFxuICAgICAgfSwge1xuICAgICAgICBzcGFjZTogc3BhY2UsXG4gICAgICAgIHVzZXI6IHRoaXMudXNlcklkLFxuICAgICAgICBrZXk6ICdzdGFydF9mbG93cycsXG4gICAgICAgIHZhbHVlOiBzdGFydF9mbG93c1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkYi5zdGVlZG9zX2tleXZhbHVlcy5pbnNlcnQoe1xuICAgICAgICBzcGFjZTogc3BhY2UsXG4gICAgICAgIHVzZXI6IHRoaXMudXNlcklkLFxuICAgICAgICBrZXk6ICdzdGFydF9mbG93cycsXG4gICAgICAgIHZhbHVlOiBzdGFydF9mbG93c1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXG5cdGdldF9pbnN0YW5jZV90cmFjZXM6IChpbnNfaWQpLT5cblx0XHRpZiAoIXRoaXMudXNlcklkKVxuXHRcdFx0cmV0dXJuO1xuXHRcdG1pbmlBcHByb3ZlRmllbGRzID0gWydfaWQnLCAnaXNfZmluaXNoZWQnLCAndXNlcicsICdoYW5kbGVyJywgJ2hhbmRsZXJfbmFtZScsICd0eXBlJywgJ3N0YXJ0X2RhdGUnLCAnZGVzY3JpcHRpb24nLFxuXHRcdFx0J2lzX3JlYWQnLCAnanVkZ2UnLCAnZmluaXNoX2RhdGUnLCAnZnJvbV91c2VyX25hbWUnLCAnZnJvbV91c2VyJywgJ2NjX2Rlc2NyaXB0aW9uJ11cblxuXHRcdGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lIHtfaWQ6IGluc19pZH0sIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcInRyYWNlcy5faWRcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuaXNfZmluaXNoZWRcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuc3RlcFwiOiAxLFxuXHRcdFx0XHRcInRyYWNlcy5zdGFydF9kYXRlXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLm5hbWVcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuZmluaXNoX2RhdGVcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuanVkZ2VcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuX2lkXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmlzX2ZpbmlzaGVkXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLnVzZXJcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlclwiOiAxLFxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX25hbWVcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWVcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMudHlwZVwiOiAxLFxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5zdGFydF9kYXRlXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmRlc2NyaXB0aW9uXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmlzX3JlYWRcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuanVkZ2VcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZmluaXNoX2RhdGVcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyX25hbWVcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmNjX2Rlc2NyaXB0aW9uXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLnRyYWNlXCI6IDEsXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmZvcndhcmRfc3BhY2VcIjogMSxcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZm9yd2FyZF9pbnN0YW5jZVwiOiAxXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgIWluc1xuXHRcdFx0cmV0dXJuXG5cblx0XHRyZXR1cm4gaW5zPy50cmFjZXNcblxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBnZXRfaW5zdGFuY2VfdHJhY2VzOiBmdW5jdGlvbihpbnNfaWQpIHtcbiAgICB2YXIgaW5zLCBtaW5pQXBwcm92ZUZpZWxkcztcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1pbmlBcHByb3ZlRmllbGRzID0gWydfaWQnLCAnaXNfZmluaXNoZWQnLCAndXNlcicsICdoYW5kbGVyJywgJ2hhbmRsZXJfbmFtZScsICd0eXBlJywgJ3N0YXJ0X2RhdGUnLCAnZGVzY3JpcHRpb24nLCAnaXNfcmVhZCcsICdqdWRnZScsICdmaW5pc2hfZGF0ZScsICdmcm9tX3VzZXJfbmFtZScsICdmcm9tX3VzZXInLCAnY2NfZGVzY3JpcHRpb24nXTtcbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy5faWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuaXNfZmluaXNoZWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuc3RlcFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5zdGFydF9kYXRlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLm5hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuZmluaXNoX2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuanVkZ2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuX2lkXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmlzX2ZpbmlzaGVkXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLnVzZXJcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlclwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX25hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMudHlwZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5zdGFydF9kYXRlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmRlc2NyaXB0aW9uXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmlzX3JlYWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuanVkZ2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZmluaXNoX2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyX25hbWVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmNjX2Rlc2NyaXB0aW9uXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLnRyYWNlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmZvcndhcmRfc3BhY2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZm9yd2FyZF9pbnN0YW5jZVwiOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGlucyAhPSBudWxsID8gaW5zLnRyYWNlcyA6IHZvaWQgMDtcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xuXHQnZ2V0X2JhdGNoX2luc3RhbmNlcyc6IChzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcyktPlxuXHRcdGlmICF0aGlzLnVzZXJJZFxuXHRcdFx0cmV0dXJuXG5cblx0XHRpZiAhc3BhY2Vcblx0XHRcdHJldHVyblxuXG5cdFx0X2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpXG5cblx0XHRyZXR1cm4gX2JhdGNoX2luc3RhbmNlc1xuXG5cdCdnZXRfYmF0Y2hfaW5zdGFuY2VzX2NvdW50JzogKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzKS0+XG5cdFx0aWYgIXRoaXMudXNlcklkXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlmICFzcGFjZVxuXHRcdFx0cmV0dXJuXG5cblx0XHRfYmF0Y2hfaW5zdGFuY2VzID0gSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzLCB0aGlzLnVzZXJJZClcblxuXHRcdHJldHVybiBfYmF0Y2hfaW5zdGFuY2VzPy5sZW5ndGggfHwgMFxuXG5cdCdnZXRfbXlfYXBwcm92ZXMnOiAoaW5zdGFuY2VJZHMpLT5cblxuXHRcdHRoYXQgPSB0aGlzXG5cblx0XHRpZiAhdGhhdC51c2VySWRcblx0XHRcdHJldHVyblxuXG5cdFx0bXlBcHByb3ZlcyA9IG5ldyBBcnJheSgpXG5cblx0XHRpbnN0YW5jZUlkcy5mb3JFYWNoIChpbnNJZCktPlxuXHRcdFx0bXlfYXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRNeUFwcHJvdmUoaW5zSWQsIHRoYXQudXNlcklkKVxuXHRcdFx0aWYgbXlfYXBwcm92ZVxuXHRcdFx0XHRteUFwcHJvdmVzLnB1c2gobXlfYXBwcm92ZSlcblxuXHRcdHJldHVybiBteUFwcHJvdmVzXG5cblxuXG5cblxuXG5cblxuXG5cblxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICAnZ2V0X2JhdGNoX2luc3RhbmNlcyc6IGZ1bmN0aW9uKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzKSB7XG4gICAgdmFyIF9iYXRjaF9pbnN0YW5jZXM7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXNwYWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF9iYXRjaF9pbnN0YW5jZXMgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0QmF0Y2hJbnN0YW5jZXMoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMsIHRoaXMudXNlcklkKTtcbiAgICByZXR1cm4gX2JhdGNoX2luc3RhbmNlcztcbiAgfSxcbiAgJ2dldF9iYXRjaF9pbnN0YW5jZXNfY291bnQnOiBmdW5jdGlvbihzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcykge1xuICAgIHZhciBfYmF0Y2hfaW5zdGFuY2VzO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzcGFjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfYmF0Y2hfaW5zdGFuY2VzID0gSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzLCB0aGlzLnVzZXJJZCk7XG4gICAgcmV0dXJuIChfYmF0Y2hfaW5zdGFuY2VzICE9IG51bGwgPyBfYmF0Y2hfaW5zdGFuY2VzLmxlbmd0aCA6IHZvaWQgMCkgfHwgMDtcbiAgfSxcbiAgJ2dldF9teV9hcHByb3Zlcyc6IGZ1bmN0aW9uKGluc3RhbmNlSWRzKSB7XG4gICAgdmFyIG15QXBwcm92ZXMsIHRoYXQ7XG4gICAgdGhhdCA9IHRoaXM7XG4gICAgaWYgKCF0aGF0LnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBteUFwcHJvdmVzID0gbmV3IEFycmF5KCk7XG4gICAgaW5zdGFuY2VJZHMuZm9yRWFjaChmdW5jdGlvbihpbnNJZCkge1xuICAgICAgdmFyIG15X2FwcHJvdmU7XG4gICAgICBteV9hcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZShpbnNJZCwgdGhhdC51c2VySWQpO1xuICAgICAgaWYgKG15X2FwcHJvdmUpIHtcbiAgICAgICAgcmV0dXJuIG15QXBwcm92ZXMucHVzaChteV9hcHByb3ZlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbXlBcHByb3ZlcztcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xuXHRjaGFuZ2VfZmxvd19zdGF0ZTogKGZsb3dzKSAtPlxuXHRcdGNoZWNrIGZsb3dzLCBBcnJheVxuXG5cdFx0X3VzZXJJZCA9IHRoaXMudXNlcklkXG5cblx0XHRpZiAhX3VzZXJJZFxuXHRcdFx0cmV0dXJuXG5cblx0XHRmbG93cy5mb3JFYWNoIChmbG93KSAtPlxuXHRcdFx0c3BhY2VJZCA9IGZsb3cuc3BhY2Vcblx0XHRcdGZvcm1JZCA9IGZsb3cuZm9ybVxuXHRcdFx0Zmxvd0lkID0gZmxvdy5pZFxuXHRcdFx0c3RhdGUgPSBmbG93LnN0YXRlXG5cblx0XHRcdGlmICFTdGVlZG9zLmlzU3BhY2VBZG1pbihzcGFjZUlkLCBfdXNlcklkKVxuXHRcdFx0XHR0aHJvdyAgTWV0ZW9yLkVycm9yKDQwMSwgXCJObyBwZXJtaXNzaW9uXCIpXG5cblx0XHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHsgX2lkOiBmb3JtSWQgfSwgeyBmaWVsZHM6IHsgaGlzdG9yeXM6IDAgfSB9KVxuXG5cdFx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7IF9pZDogZmxvd0lkIH0sIHsgZmllbGRzOiB7IGhpc3RvcnlzOiAwIH0gfSlcblxuXHRcdFx0aWYgc3RhdGUgIT0gJ2VuYWJsZWQnICYmIHN0YXRlICE9ICdkaXNhYmxlZCdcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwic3RhdGXml6DmlYhcIilcblxuXHRcdFx0aWYgIWZvcm1cblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwiZm9ybeaXoOaViFwiKVxuXG5cdFx0XHRpZiAhZmxvd1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmbG935peg5pWIXCIpXG5cblx0XHRcdGlmICFmb3JtLmlzX3ZhbGlkXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+W8leeUqOeahOihqOWNlVsje2Zvcm0ubmFtZX1d6aqM6K+B5pyq6YCa6L+H77yM6K+35omT5byA5rWB56iL6K6+6K6h5Zmo5qOA5p+l6KGo5Y2V6K6+572uXCIpXG5cblx0XHRcdGlmICFmbG93LmlzX3ZhbGlkXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOivt+aJk+W8gOa1geeoi+iuvuiuoeWZqOajgOafpea1geeoi+iuvue9rlwiKVxuXG5cdFx0XHRpZiAhWyduZXcnLCAnbW9kaWZ5JywgJ2RlbGV0ZSddLmluY2x1ZGVzKGZsb3cuZmxvd3R5cGUpXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jGZsb3d0eXBl5YC85b+F6aG75pivbmV344CBbW9kaWZ544CBZGVsZXRl5YW25Lit5LmL5LiAXCIpXG5cblx0XHRcdGlmICFfLmlzQXJyYXkoZmxvdy5jdXJyZW50LnN0ZXBzKVxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzmtYHnqIvnmoTmraXpqqTkuI3og73kuLrnqbpcIilcblxuXHRcdFx0aWYgXy51bmlxKGZsb3cuY3VycmVudC5zdGVwcywgJ25hbWUnKS5sZW5ndGggIT0gZmxvdy5jdXJyZW50LnN0ZXBzLmxlbmd0aFxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzlkIzkuIDkuKrmtYHnqIvkuIvnmoTmraXpqqTnmoTlkI3np7DkuI3og73ph43lpI1cIilcblxuXHRcdFx0bm93ID0gbmV3IERhdGVcblxuXHRcdFx0aWYgc3RhdGUgPT0gJ2VuYWJsZWQnXG5cdFx0XHRcdCPmtYHnqIvlkK/nlKjliY3vvIzmoKHpqozlhbbigJzmjIflrprljoblj7LmraXpqqTigJ3lsZ7mgKfkuK3ooqvlvJXnlKjnmoTmraXpqqTmmK/lkKblrZjlnKjkuJTog73ooqvmib7liLDvvIjku4XpmZDkuo7mtYHnqIvnmoTmnIDmlrDniYjvvIlcblx0XHRcdFx0Zmxvdy5jdXJyZW50LnN0ZXBzLmZvckVhY2ggKHN0ZXApIC0+XG5cdFx0XHRcdFx0aWYgWydzcGVjaWZ5U3RlcFVzZXInLCAnc3BlY2lmeVN0ZXBSb2xlJ10uaW5jbHVkZXMoc3RlcC5kZWFsX3R5cGUpXG5cdFx0XHRcdFx0XHRpZiAhc3RlcC5hcHByb3Zlcl9zdGVwXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIuatpemqpFsje3N0ZXAubmFtZX1d5Lit55qE5oyH5a6a5Y6G5Y+y5q2l6aqk5LiN5a2Y5Zyo44CCXCIpXG5cdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdHNwZWNpZnlTdGVwID0gXy5maW5kIGZsb3cuY3VycmVudC5zdGVwcywgKF9zdGVwKSAtPlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBzdGVwLmFwcHJvdmVyX3N0ZXAgPT0gX3N0ZXAuX2lkXG5cblx0XHRcdFx0XHRcdFx0aWYgIXNwZWNpZnlTdGVwXG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5q2l6aqkWyN7c3RlcC5uYW1lfV3kuK3nmoTmjIflrprljoblj7LmraXpqqTkuI3lrZjlnKjjgIJcIilcblxuXHRcdFx0XHRmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUgPSBmb3JtLmN1cnJlbnQuZmllbGRzLmdldFByb3BlcnR5KFwiY29kZVwiKVxuXG5cdFx0XHRcdGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoIChzdGVwKSAtPlxuXHRcdFx0XHRcdHN0ZXAuZmllbGRzX21vZGlmaWFibGUgPSBfLmludGVyc2VjdGlvbihzdGVwLmZpZWxkc19tb2RpZmlhYmxlLCBmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUpXG5cblx0XHRcdFx0I+WmguaenCDmtYHnqIvlr7nlupTooajljZUg5piv5YGc55So55qEIOWImeWQr+eUqFxuXHRcdFx0XHRpZiBmb3JtLnN0YXRlID09ICdkaXNhYmxlZCdcblx0XHRcdFx0XHRkYi5mb3Jtcy51cGRhdGUoe19pZDogZm9ybS5faWR9LCB7JHNldDoge1wic3RhdGVcIjogXCJlbmFibGVkXCIsIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWR9fSlcblxuXHRcdFx0XHRmbG93LmN1cnJlbnQubW9kaWZpZWQgPSBub3dcblx0XHRcdFx0Zmxvdy5jdXJyZW50LnN0YXJ0X2RhdGUgPSBub3dcblx0XHRcdFx0Zmxvdy5jdXJyZW50Lm1vZGlmaWVkX2J5ID0gX3VzZXJJZFxuXG5cdFx0XHRcdGRiLmZsb3dzLnVwZGF0ZSh7IF9pZDogZmxvdy5faWQgfSwgeyAkc2V0OiB7IFwic3RhdGVcIjogXCJlbmFibGVkXCIsIFwiY3VycmVudFwiOiBmbG93LmN1cnJlbnQgfSB9KVxuXG5cdFx0XHRlbHNlXG5cdFx0XHRcdCPnpoHnlKjmtYHnqItcblx0XHRcdFx0ZGIuZmxvd3MudXBkYXRlKHtfaWQ6IGZsb3cuX2lkfSwgeyRzZXQ6IHtcInN0YXRlXCI6IFwiZGlzYWJsZWRcIiwgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IG5vdywgXCJjdXJyZW50LnN0YXJ0X2RhdGVcIjogbm93LCBcImN1cnJlbnQubW9kaWZpZWRfYnlcIjogX3VzZXJJZH19KVxuXG5cdFx0XHRcdCMg5Yik5pat6KGo5Y2V5omA5pyJ5rWB56iL5piv5ZCm5bey57uP5YWo6YOo5YGc55SoIOWmguaenOW3suWFqOmDqOWBnOeUqCDliJnkv67mlLnooajljZXnirbmgIHkuLrlgZznlKhcblx0XHRcdFx0X2Zsb3dzID0gZGIuZmxvd3MuZmluZCh7IGZvcm06IGZvcm0uX2lkIH0sIHsgZmllbGRzOiB7IF9pZDogMSwgc3RhdGU6IDEgfSB9KS5mZXRjaCgpXG5cblx0XHRcdFx0X2Zsb3dzX3N0YXRlID0gX2Zsb3dzLmdldFByb3BlcnR5KFwic3RhdGVcIilcblxuXHRcdFx0XHRpZiAhX2Zsb3dzX3N0YXRlLmluY2x1ZGVzKCdlbmFibGVkJylcblx0XHRcdFx0XHRkYi5mb3Jtcy51cGRhdGUoe19pZDogZm9ybS5faWR9LCB7JHNldDoge1wic3RhdGVcIjogXCJkaXNhYmxlZFwiLCBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LCBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csIFwiY3VycmVudC5tb2RpZmllZF9ieVwiOiBfdXNlcklkfX0pXG5cblxuXG5cbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgY2hhbmdlX2Zsb3dfc3RhdGU6IGZ1bmN0aW9uKGZsb3dzKSB7XG4gICAgdmFyIF91c2VySWQ7XG4gICAgY2hlY2soZmxvd3MsIEFycmF5KTtcbiAgICBfdXNlcklkID0gdGhpcy51c2VySWQ7XG4gICAgaWYgKCFfdXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBmbG93cy5mb3JFYWNoKGZ1bmN0aW9uKGZsb3cpIHtcbiAgICAgIHZhciBfZmxvd3MsIF9mbG93c19zdGF0ZSwgZmxvd0lkLCBmb3JtLCBmb3JtSWQsIGZvcm1fY3VycmVudF9maWVsZHNfY29kZSwgbm93LCBzcGFjZUlkLCBzdGF0ZTtcbiAgICAgIHNwYWNlSWQgPSBmbG93LnNwYWNlO1xuICAgICAgZm9ybUlkID0gZmxvdy5mb3JtO1xuICAgICAgZmxvd0lkID0gZmxvdy5pZDtcbiAgICAgIHN0YXRlID0gZmxvdy5zdGF0ZTtcbiAgICAgIGlmICghU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgX3VzZXJJZCkpIHtcbiAgICAgICAgdGhyb3cgTWV0ZW9yLkVycm9yKDQwMSwgXCJObyBwZXJtaXNzaW9uXCIpO1xuICAgICAgfVxuICAgICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZvcm1JZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBoaXN0b3J5czogMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93SWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgaGlzdG9yeXM6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoc3RhdGUgIT09ICdlbmFibGVkJyAmJiBzdGF0ZSAhPT0gJ2Rpc2FibGVkJykge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJzdGF0ZeaXoOaViFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghZm9ybSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmb3Jt5peg5pWIXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFmbG93KSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcImZsb3fml6DmlYhcIik7XG4gICAgICB9XG4gICAgICBpZiAoIWZvcm0uaXNfdmFsaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL5byV55So55qE6KGo5Y2VW1wiICsgZm9ybS5uYW1lICsgXCJd6aqM6K+B5pyq6YCa6L+H77yM6K+35omT5byA5rWB56iL6K6+6K6h5Zmo5qOA5p+l6KGo5Y2V6K6+572uXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFmbG93LmlzX3ZhbGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOivt+aJk+W8gOa1geeoi+iuvuiuoeWZqOajgOafpea1geeoi+iuvue9rlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghWyduZXcnLCAnbW9kaWZ5JywgJ2RlbGV0ZSddLmluY2x1ZGVzKGZsb3cuZmxvd3R5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jGZsb3d0eXBl5YC85b+F6aG75pivbmV344CBbW9kaWZ544CBZGVsZXRl5YW25Lit5LmL5LiAXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzQXJyYXkoZmxvdy5jdXJyZW50LnN0ZXBzKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzmtYHnqIvnmoTmraXpqqTkuI3og73kuLrnqbpcIik7XG4gICAgICB9XG4gICAgICBpZiAoXy51bmlxKGZsb3cuY3VycmVudC5zdGVwcywgJ25hbWUnKS5sZW5ndGggIT09IGZsb3cuY3VycmVudC5zdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yM5ZCM5LiA5Liq5rWB56iL5LiL55qE5q2l6aqk55qE5ZCN56ew5LiN6IO96YeN5aSNXCIpO1xuICAgICAgfVxuICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICBpZiAoc3RhdGUgPT09ICdlbmFibGVkJykge1xuICAgICAgICBmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaChmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgdmFyIHNwZWNpZnlTdGVwO1xuICAgICAgICAgIGlmIChbJ3NwZWNpZnlTdGVwVXNlcicsICdzcGVjaWZ5U3RlcFJvbGUnXS5pbmNsdWRlcyhzdGVwLmRlYWxfdHlwZSkpIHtcbiAgICAgICAgICAgIGlmICghc3RlcC5hcHByb3Zlcl9zdGVwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIuatpemqpFtcIiArIHN0ZXAubmFtZSArIFwiXeS4reeahOaMh+WumuWOhuWPsuatpemqpOS4jeWtmOWcqOOAglwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNwZWNpZnlTdGVwID0gXy5maW5kKGZsb3cuY3VycmVudC5zdGVwcywgZnVuY3Rpb24oX3N0ZXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RlcC5hcHByb3Zlcl9zdGVwID09PSBfc3RlcC5faWQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIXNwZWNpZnlTdGVwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5q2l6aqkW1wiICsgc3RlcC5uYW1lICsgXCJd5Lit55qE5oyH5a6a5Y6G5Y+y5q2l6aqk5LiN5a2Y5Zyo44CCXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZm9ybV9jdXJyZW50X2ZpZWxkc19jb2RlID0gZm9ybS5jdXJyZW50LmZpZWxkcy5nZXRQcm9wZXJ0eShcImNvZGVcIik7XG4gICAgICAgIGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgICAgICByZXR1cm4gc3RlcC5maWVsZHNfbW9kaWZpYWJsZSA9IF8uaW50ZXJzZWN0aW9uKHN0ZXAuZmllbGRzX21vZGlmaWFibGUsIGZvcm1fY3VycmVudF9maWVsZHNfY29kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZm9ybS5zdGF0ZSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgIGRiLmZvcm1zLnVwZGF0ZSh7XG4gICAgICAgICAgICBfaWQ6IGZvcm0uX2lkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICBcInN0YXRlXCI6IFwiZW5hYmxlZFwiLFxuICAgICAgICAgICAgICBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZF9ieVwiOiBfdXNlcklkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZmxvdy5jdXJyZW50Lm1vZGlmaWVkID0gbm93O1xuICAgICAgICBmbG93LmN1cnJlbnQuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgZmxvdy5jdXJyZW50Lm1vZGlmaWVkX2J5ID0gX3VzZXJJZDtcbiAgICAgICAgcmV0dXJuIGRiLmZsb3dzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBmbG93Ll9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImVuYWJsZWRcIixcbiAgICAgICAgICAgIFwiY3VycmVudFwiOiBmbG93LmN1cnJlbnRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGIuZmxvd3MudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGZsb3cuX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csXG4gICAgICAgICAgICBcImN1cnJlbnQubW9kaWZpZWRfYnlcIjogX3VzZXJJZFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIF9mbG93cyA9IGRiLmZsb3dzLmZpbmQoe1xuICAgICAgICAgIGZvcm06IGZvcm0uX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIF9pZDogMSxcbiAgICAgICAgICAgIHN0YXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgICBfZmxvd3Nfc3RhdGUgPSBfZmxvd3MuZ2V0UHJvcGVydHkoXCJzdGF0ZVwiKTtcbiAgICAgICAgaWYgKCFfZmxvd3Nfc3RhdGUuaW5jbHVkZXMoJ2VuYWJsZWQnKSkge1xuICAgICAgICAgIHJldHVybiBkYi5mb3Jtcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBmb3JtLl9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdyxcbiAgICAgICAgICAgICAgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXG5cblx0aGlkZV9pbnN0YW5jZTogKGluc0lkLCBpc19oaWRkZW4pIC0+XG5cdFx0aWYgIXRoaXMudXNlcklkXG5cdFx0XHRyZXR1cm5cblxuXHRcdGNoZWNrKGluc0lkLCBTdHJpbmcpXG5cdFx0Y2hlY2soaXNfaGlkZGVuLCBCb29sZWFuKVxuXG5cdFx0dXNlcklkID0gdGhpcy51c2VySWRcblxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHsgZmllbGRzOiB7IHN0YXRlOiAxLCBmbG93OiAxLCBzcGFjZTogMSB9IH0pXG5cblx0XHRpZiBub3QgaW5zdGFuY2Vcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5om+5Yiw55Sz6K+35Y2VXCIpXG5cblx0XHRpZiBpbnN0YW5jZS5zdGF0ZSBpc250ICdjb21wbGV0ZWQnXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUs+ivt+WNleeKtuaAgeS4jeaYr+W3sue7k+adn1wiKVxuXG5cdFx0IyDpqozor4Fsb2dpbiB1c2VyX2lk5a+56K+l5rWB56iL5pyJ566h55CG55Sz6K+35Y2V55qE5p2D6ZmQXG5cdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgdXNlcklkKVxuXHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoaW5zdGFuY2Uuc3BhY2UsIHsgZmllbGRzOiB7IGFkbWluczogMSB9IH0pXG5cdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXModXNlcklkKSlcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55So5oi35rKh5pyJ5a+55b2T5YmN5rWB56iL55qE566h55CG5p2D6ZmQXCIpXG5cblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKGluc0lkLCB7ICRzZXQ6IHsgaXNfaGlkZGVuOiBpc19oaWRkZW4gfSB9KVxuXG5cdFx0cmV0dXJuIHRydWU7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIGhpZGVfaW5zdGFuY2U6IGZ1bmN0aW9uKGluc0lkLCBpc19oaWRkZW4pIHtcbiAgICB2YXIgaW5zdGFuY2UsIHBlcm1pc3Npb25zLCBzcGFjZSwgdXNlcklkO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hlY2soaW5zSWQsIFN0cmluZyk7XG4gICAgY2hlY2soaXNfaGlkZGVuLCBCb29sZWFuKTtcbiAgICB1c2VySWQgPSB0aGlzLnVzZXJJZDtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc0lkLCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGZsb3c6IDEsXG4gICAgICAgIHNwYWNlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrmib7liLDnlLPor7fljZVcIik7XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55Sz6K+35Y2V54q25oCB5LiN5piv5bey57uT5p2fXCIpO1xuICAgIH1cbiAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCB1c2VySWQpO1xuICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoaW5zdGFuY2Uuc3BhY2UsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBhZG1pbnM6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSAmJiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VySWQpKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIik7XG4gICAgfVxuICAgIGRiLmluc3RhbmNlcy51cGRhdGUoaW5zSWQsIHtcbiAgICAgICRzZXQ6IHtcbiAgICAgICAgaXNfaGlkZGVuOiBpc19oaWRkZW5cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xuXHRnZXRJbnN0YW5jZVZhbHVlczogKGluc0lkKS0+XG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcblx0XHRcdHJldHVybjtcblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zSWR9LCB7ZmllbGRzOiB7dmFsdWVzOiAxfX0pPy52YWx1ZXMiLCJNZXRlb3IubWV0aG9kcyh7XG4gIGdldEluc3RhbmNlVmFsdWVzOiBmdW5jdGlvbihpbnNJZCkge1xuICAgIHZhciByZWY7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gKHJlZiA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgdmFsdWVzOiAxXG4gICAgICB9XG4gICAgfSkpICE9IG51bGwgPyByZWYudmFsdWVzIDogdm9pZCAwO1xuICB9XG59KTtcbiIsIkNvb2tpZXMgPSByZXF1aXJlKFwiY29va2llc1wiKVxuXG5nZXRJbnN0YW5jZVJlYWRPbmx5ID0gKHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKSAtPlxuXG5cdHVzZXIgPSBTdGVlZG9zLmdldEFQSUxvZ2luVXNlcihyZXEsIHJlcylcblxuXHRpZiByZXE/LnF1ZXJ5Py5hY2Nlc3NfdG9rZW5cblx0XHR1c2VySWQgPSBTdGVlZG9zLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihyZXEucXVlcnkuYWNjZXNzX3Rva2VuKVxuXHRcdGlmIHVzZXJJZFxuXHRcdFx0dXNlciA9IE1ldGVvci51c2Vycy5maW5kT25lKHtfaWQ6IHVzZXJJZH0pXG5cblx0c3BhY2VJZCA9IHJlcS5wYXJhbXMuc3BhY2VcblxuXHRpbnN0YW5jZUlkID0gcmVxLnBhcmFtcy5pbnN0YW5jZV9pZFxuXG5cdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VJZH0pO1xuXG5cdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe19pZDogc3BhY2VJZH0pO1xuXG5cdGhpZGVfdHJhY2VzID0gcmVxLnF1ZXJ5Py5oaWRlX3RyYWNlc1xuXG5cdGlmICFvcHRpb25zXG5cdFx0b3B0aW9ucyA9IHtzaG93VHJhY2U6IHRydWV9XG5cdGVsc2Vcblx0XHRvcHRpb25zLnNob3dUcmFjZSA9IHRydWVcblxuXHRpZiBoaWRlX3RyYWNlcyBpcyBcIjFcIlxuXHRcdGlmIG9wdGlvbnNcblx0XHRcdG9wdGlvbnMuc2hvd1RyYWNlID0gZmFsc2Vcblx0XHRlbHNlXG5cdFx0XHRvcHRpb25zID0ge3Nob3dUcmFjZTogZmFsc2V9XG5cblx0aWYgIW9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzXG5cdFx0b3B0aW9ucy5zaG93QXR0YWNobWVudHMgPSB0cnVlXG5cblx0aWYgIXNwYWNlXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDQwMSxcblx0XHRcdGRhdGE6XG5cdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3Npbmcgc3BhY2VcIixcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXG5cdFx0cmV0dXJuO1xuXG5cdGlmICAhaW5zdGFuY2Vcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogNDAxLFxuXHRcdFx0ZGF0YTpcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBpbnN0YW5jZVwiLFxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2Vcblx0XHRyZXR1cm47XG5cblx0aWYgIXVzZXJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogNDAxLFxuXHRcdFx0ZGF0YTpcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLUF1dGgtVG9rZW4sWC1Vc2VyLUlkXCIsXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxuXHRcdHJldHVybjtcblxuXHRpZiBpbnN0YW5jZS5zcGFjZSAhPSBzcGFjZUlkXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDQwMSxcblx0XHRcdGRhdGE6XG5cdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3Npbmcgc3BhY2Ugb3IgaW5zdGFuY2VcIixcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXG5cdFx0cmV0dXJuO1xuXG5cblxuXHRzcGFjZVVzZXJDb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyB1c2VyOiB1c2VyLl9pZCwgc3BhY2U6IHNwYWNlSWQgfSkuY291bnQoKVxuXG5cdGlmIHNwYWNlVXNlckNvdW50IGlzIDBcblx0XHRpZiAhc3BhY2Vcblx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRcdGNvZGU6IDQwMSxcblx0XHRcdFx0ZGF0YTpcblx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNhcGNlVXNlclwiLFxuXHRcdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxuXHRcdFx0cmV0dXJuO1xuXG5cdCPmoKHpqox1c2Vy5piv5ZCm5a+5aW5zdGFuY2XmnInmn6XnnIvmnYPpmZBcblx0X2hhc1Blcm1pc3Npb24gPSBXb3JrZmxvd01hbmFnZXIuaGFzSW5zdGFuY2VQZXJtaXNzaW9ucyh1c2VyLCBpbnN0YW5jZSlcblxuXHRpZiAhX2hhc1Blcm1pc3Npb24gICYmIGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZVxuXHRcdF9wYXJlbnRfaW5zdGFuY2VzID0gXy51bmlvbihbaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlXSwgaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcyB8fCBbXSlcblxuXHRcdF9oYXNQZXJtaXNzaW9uID0gXy5maW5kIF9wYXJlbnRfaW5zdGFuY2VzLCAoX3BhcmVudF9pZCktPlxuXHRcdFx0X3BhcmVudF9pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOl9wYXJlbnRfaWR9LCB7ZmllbGRzOiB7dHJhY2VzOiAwfX0pXG5cblx0XHRcdHJldHVybiBXb3JrZmxvd01hbmFnZXIuaGFzSW5zdGFuY2VQZXJtaXNzaW9ucyh1c2VyLCBfcGFyZW50X2lucylcblxuXHRpZiAhX2hhc1Blcm1pc3Npb25cblx0XHRfbG9jYWxlID0gU3RlZWRvcy5sb2NhbGUodXNlci5faWQsIHRydWUpXG5cdFx0ZXJyb3IgPSBUQVBpMThuLl9fKFwiaW5zdGFuY2VfcGVybWlzc2lvbnNfZXJyb3JcIiwge30sIF9sb2NhbGUpXG5cdFx0cmVzLmNoYXJzZXQgPSBcInV0Zi04XCJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogNDAxLFxuXHRcdFx0ZGF0YTpcblx0XHRcdFx0XCJlcnJvclwiOiBlcnJvcixcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXG5cdFx0cmV0dXJuO1xuXG5cdGh0bWwgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VIdG1sKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucylcblx0ZGF0YUJ1ZiA9IG5ldyBCdWZmZXIoaHRtbCk7XG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgZGF0YUJ1Zi5sZW5ndGgpXG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtcmFuZ2UnLCBcImJ5dGVzIDAtI3tkYXRhQnVmLmxlbmd0aCAtIDF9LyN7ZGF0YUJ1Zi5sZW5ndGh9XCIpXG5cdHJlcy5zdGF0dXNDb2RlID0gMjAwXG5cdHJlcy5lbmQoaHRtbClcblxuSnNvblJvdXRlcy5hZGQgXCJnZXRcIiwgXCIvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvcmVhZG9ubHkvOmluc3RhbmNlX2lkXCIsIGdldEluc3RhbmNlUmVhZE9ubHlcblxuSnNvblJvdXRlcy5hZGQgXCJnZXRcIiwgXCIvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvcmVhZG9ubHkvOmluc3RhbmNlX2lkLzppbnN0YW5jZV9uYW1lXCIsIChyZXEsIHJlcywgbmV4dCktPlxuXHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XG5cdHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDtmaWxlbmFtZT0nK2VuY29kZVVSSShyZXEucGFyYW1zLmluc3RhbmNlX25hbWUpKTtcblx0cmVzLnNldEhlYWRlcignVHJhbnNmZXItRW5jb2RpbmcnLCAnJylcblxuXHRvcHRpb25zID0ge2Fic29sdXRlOiB0cnVlfVxuXG5cdHJldHVybiBnZXRJbnN0YW5jZVJlYWRPbmx5KHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKVxuIyMjXG5cdOiOt+WPlueUs+ivt+WNleWIl+ihqO+8mlxuICAgIGZpbmFsX2RlY2lzaW9u77ya5a6h5om557uT5p6cXG4gICAgc3RhdGU6IOeUs+ivt+WNleeKtuaAgVxuIyMjXG5Kc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvaW5zdGFuY2VzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cblxuXHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxuXHRcdHJldHVybiA7XG5cblx0dXNlcl9pZCA9IHJlcS51c2VySWRcblxuXHRzcGFjZUlkID0gcmVxLmhlYWRlcnNbXCJ4LXNwYWNlLWlkXCJdXG5cblx0aWYgbm90IHNwYWNlSWRcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogNDAxLFxuXHRcdFx0ZGF0YTpcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLVNwYWNlLUlkXCIsXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxuXHRcdHJldHVybjtcblxuXHRmbG93SWQgPSByZXEucXVlcnk/LmZsb3dJZFxuXG5cdGlmICFmbG93SWRcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxuXHRcdFx0Y29kZTogNDAwLFxuXHRcdFx0ZGF0YTpcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBmbG93SWRcIixcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXG5cdFx0cmV0dXJuO1xuXG5cdHF1ZXJ5ID0ge31cblxuXHRyZXRfc3luY190b2tlbiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG5cblx0Zmxvd0lkcyA9IGZsb3dJZC5zcGxpdChcIixcIilcblxuXG5cdGZsb3dzID0gZGIuZmxvd3MuZmluZCh7X2lkOiB7JGluOiBmbG93SWRzfX0pLmZldGNoKClcblxuXHRpID0gMFxuXHR3aGlsZSBpIDwgZmxvd3MubGVuZ3RoXG5cdFx0ZiA9IGZsb3dzW2ldXG5cdFx0c3BhY2VVc2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7c3BhY2U6IGYuc3BhY2UsIHVzZXI6IHVzZXJfaWR9KVxuXHRcdGlmICFzcGFjZVVzZXJcblx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRcdGNvZGU6IDQwMSxcblx0XHRcdFx0ZGF0YTpcblx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBObyBwZXJtaXNzaW9uLCBmbG93IGlzICN7Zi5faWR9XCIsXG5cdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXG5cdFx0XHRyZXR1cm47XG5cdFx0ZWxzZVxuXG5cdCNcdOaYr+WQpuW3peS9nOWMuueuoeeQhuWRmFxuXHRcdGlmICFTdGVlZG9zLmlzU3BhY2VBZG1pbihzcGFjZUlkLCB1c2VyX2lkKVxuXHRcdFx0c3BhY2VVc2VyT3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG5cdFx0XHRcdF9pZDoge1xuXHRcdFx0XHRcdCRpbjogc3BhY2VVc2VyLm9yZ2FuaXphdGlvbnNcblx0XHRcdFx0fVxuXHRcdFx0fSkuZmV0Y2goKTtcblxuXHRcdFx0aWYgIVdvcmtmbG93TWFuYWdlci5jYW5Nb25pdG9yKGYsIHNwYWNlVXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucykgJiYgIVdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXG5cdFx0XHRcdFx0Y29kZTogNDAxLFxuXHRcdFx0XHRcdGRhdGE6XG5cdFx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBObyBwZXJtaXNzaW9uLCBmbG93IGlzICN7Zi5faWR9XCIsXG5cdFx0XHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2Vcblx0XHRcdFx0cmV0dXJuO1xuXHRcdGkrK1xuXG5cblx0cXVlcnkuZmxvdyA9IHskaW46IGZsb3dJZHN9XG5cblx0cXVlcnkuc3BhY2UgPSBzcGFjZUlkXG5cblx0aWYgcmVxLnF1ZXJ5Py5zeW5jX3Rva2VuXG5cdFx0c3luY190b2tlbiA9IG5ldyBEYXRlKE51bWJlcihyZXEucXVlcnkuc3luY190b2tlbikpXG5cdFx0cXVlcnkubW9kaWZpZWQgPSB7JGd0OiBzeW5jX3Rva2VufVxuXG5cdGlmIHJlcS5xdWVyeT8uZmluYWxfZGVjaXNpb25cblx0XHRxdWVyeS5maW5hbF9kZWNpc2lvbiA9IHskaW4gOiByZXEucXVlcnkuZmluYWxfZGVjaXNpb24uc3BsaXQoXCIsXCIpfVxuXHRlbHNlXG5cdFx0cXVlcnkuZmluYWxfZGVjaXNpb24gPSB7JG5pbjogW1widGVybWluYXRlZFwiLCBcInJlamVjdGVkXCJdfVxuXG5cdGlmIHJlcS5xdWVyeT8uc3RhdGVcblx0XHRxdWVyeS5zdGF0ZSA9IHskaW46IHJlcS5xdWVyeS5zdGF0ZS5zcGxpdChcIixcIil9XG5cdGVsc2Vcblx0XHRxdWVyeS5zdGF0ZSA9IFwiY29tcGxldGVkXCJcblxuI1x05pyA5aSa6L+U5ZueNTAw5p2h5pWw5o2uXG5cdGluc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7ZmllbGRzOiB7aW5ib3hfdWVyczogMCwgY2NfdXNlcnM6IDAsIG91dGJveF91c2VyczogMCwgdHJhY2VzOiAwLCBhdHRhY2htZW50czogMH0sIHNraXA6IDAsIGxpbWl0OiA1MDB9KS5mZXRjaCgpXG5cdGluc3RhbmNlcy5mb3JFYWNoIChpbnN0YW5jZSktPlxuXG5cdFx0YXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoeydtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlLl9pZCwnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7JG5lOiB0cnVlfX0sIHtmaWVsZHM6IHtjb3BpZXM6IDB9fSkuZmV0Y2goKVxuXG5cdFx0aW5zdGFuY2UuYXR0YWNobWVudHMgPSBhdHRhY2htZW50c1xuXG5cblx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcblx0XHRcdGNvZGU6IDIwMCxcblx0XHRcdGRhdGE6XG5cdFx0XHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuXHRcdFx0XHRcInN5bmNfdG9rZW5cIjogcmV0X3N5bmNfdG9rZW5cblx0XHRcdFx0XCJkYXRhXCI6IGluc3RhbmNlc1xuXHRyZXR1cm47XG4iLCJ2YXIgQ29va2llcywgZ2V0SW5zdGFuY2VSZWFkT25seTtcblxuQ29va2llcyA9IHJlcXVpcmUoXCJjb29raWVzXCIpO1xuXG5nZXRJbnN0YW5jZVJlYWRPbmx5ID0gZnVuY3Rpb24ocmVxLCByZXMsIG5leHQsIG9wdGlvbnMpIHtcbiAgdmFyIF9oYXNQZXJtaXNzaW9uLCBfbG9jYWxlLCBfcGFyZW50X2luc3RhbmNlcywgZGF0YUJ1ZiwgZXJyb3IsIGhpZGVfdHJhY2VzLCBodG1sLCBpbnN0YW5jZSwgaW5zdGFuY2VJZCwgcmVmLCByZWYxLCBzcGFjZSwgc3BhY2VJZCwgc3BhY2VVc2VyQ291bnQsIHVzZXIsIHVzZXJJZDtcbiAgdXNlciA9IFN0ZWVkb3MuZ2V0QVBJTG9naW5Vc2VyKHJlcSwgcmVzKTtcbiAgaWYgKHJlcSAhPSBudWxsID8gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5hY2Nlc3NfdG9rZW4gOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICB1c2VySWQgPSBTdGVlZG9zLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihyZXEucXVlcnkuYWNjZXNzX3Rva2VuKTtcbiAgICBpZiAodXNlcklkKSB7XG4gICAgICB1c2VyID0gTWV0ZW9yLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IHVzZXJJZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHNwYWNlSWQgPSByZXEucGFyYW1zLnNwYWNlO1xuICBpbnN0YW5jZUlkID0gcmVxLnBhcmFtcy5pbnN0YW5jZV9pZDtcbiAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgX2lkOiBpbnN0YW5jZUlkXG4gIH0pO1xuICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHtcbiAgICBfaWQ6IHNwYWNlSWRcbiAgfSk7XG4gIGhpZGVfdHJhY2VzID0gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmhpZGVfdHJhY2VzIDogdm9pZCAwO1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgc2hvd1RyYWNlOiB0cnVlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zLnNob3dUcmFjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGhpZGVfdHJhY2VzID09PSBcIjFcIikge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBvcHRpb25zLnNob3dUcmFjZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBzaG93VHJhY2U6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBpZiAoIW9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzKSB7XG4gICAgb3B0aW9ucy5zaG93QXR0YWNobWVudHMgPSB0cnVlO1xuICB9XG4gIGlmICghc3BhY2UpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3Npbmcgc3BhY2VcIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghaW5zdGFuY2UpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgaW5zdGFuY2VcIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghdXNlcikge1xuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDQwMSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLUF1dGgtVG9rZW4sWC1Vc2VyLUlkXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaW5zdGFuY2Uuc3BhY2UgIT09IHNwYWNlSWQpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3Npbmcgc3BhY2Ugb3IgaW5zdGFuY2VcIixcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNwYWNlVXNlckNvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgdXNlcjogdXNlci5faWQsXG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSkuY291bnQoKTtcbiAgaWYgKHNwYWNlVXNlckNvdW50ID09PSAwKSB7XG4gICAgaWYgKCFzcGFjZSkge1xuICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiA0MDEsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNhcGNlVXNlclwiLFxuICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgX2hhc1Blcm1pc3Npb24gPSBXb3JrZmxvd01hbmFnZXIuaGFzSW5zdGFuY2VQZXJtaXNzaW9ucyh1c2VyLCBpbnN0YW5jZSk7XG4gIGlmICghX2hhc1Blcm1pc3Npb24gJiYgaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlKSB7XG4gICAgX3BhcmVudF9pbnN0YW5jZXMgPSBfLnVuaW9uKFtpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VdLCBpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIHx8IFtdKTtcbiAgICBfaGFzUGVybWlzc2lvbiA9IF8uZmluZChfcGFyZW50X2luc3RhbmNlcywgZnVuY3Rpb24oX3BhcmVudF9pZCkge1xuICAgICAgdmFyIF9wYXJlbnRfaW5zO1xuICAgICAgX3BhcmVudF9pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogX3BhcmVudF9pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB0cmFjZXM6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gV29ya2Zsb3dNYW5hZ2VyLmhhc0luc3RhbmNlUGVybWlzc2lvbnModXNlciwgX3BhcmVudF9pbnMpO1xuICAgIH0pO1xuICB9XG4gIGlmICghX2hhc1Blcm1pc3Npb24pIHtcbiAgICBfbG9jYWxlID0gU3RlZWRvcy5sb2NhbGUodXNlci5faWQsIHRydWUpO1xuICAgIGVycm9yID0gVEFQaTE4bi5fXyhcImluc3RhbmNlX3Blcm1pc3Npb25zX2Vycm9yXCIsIHt9LCBfbG9jYWxlKTtcbiAgICByZXMuY2hhcnNldCA9IFwidXRmLThcIjtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogZXJyb3IsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICBkYXRhQnVmID0gbmV3IEJ1ZmZlcihodG1sKTtcbiAgcmVzLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBkYXRhQnVmLmxlbmd0aCk7XG4gIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtcmFuZ2UnLCBcImJ5dGVzIDAtXCIgKyAoZGF0YUJ1Zi5sZW5ndGggLSAxKSArIFwiL1wiICsgZGF0YUJ1Zi5sZW5ndGgpO1xuICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgcmV0dXJuIHJlcy5lbmQoaHRtbCk7XG59O1xuXG5Kc29uUm91dGVzLmFkZChcImdldFwiLCBcIi93b3JrZmxvdy9zcGFjZS86c3BhY2Uvdmlldy9yZWFkb25seS86aW5zdGFuY2VfaWRcIiwgZ2V0SW5zdGFuY2VSZWFkT25seSk7XG5cbkpzb25Sb3V0ZXMuYWRkKFwiZ2V0XCIsIFwiL3dvcmtmbG93L3NwYWNlLzpzcGFjZS92aWV3L3JlYWRvbmx5LzppbnN0YW5jZV9pZC86aW5zdGFuY2VfbmFtZVwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgb3B0aW9ucztcbiAgcmVzLnNldEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtbXNkb3dubG9hZCcpO1xuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgJ2F0dGFjaG1lbnQ7ZmlsZW5hbWU9JyArIGVuY29kZVVSSShyZXEucGFyYW1zLmluc3RhbmNlX25hbWUpKTtcbiAgcmVzLnNldEhlYWRlcignVHJhbnNmZXItRW5jb2RpbmcnLCAnJyk7XG4gIG9wdGlvbnMgPSB7XG4gICAgYWJzb2x1dGU6IHRydWVcbiAgfTtcbiAgcmV0dXJuIGdldEluc3RhbmNlUmVhZE9ubHkocmVxLCByZXMsIG5leHQsIG9wdGlvbnMpO1xufSk7XG5cblxuLypcblx06I635Y+W55Sz6K+35Y2V5YiX6KGo77yaXG4gICAgZmluYWxfZGVjaXNpb27vvJrlrqHmibnnu5PmnpxcbiAgICBzdGF0ZTog55Sz6K+35Y2V54q25oCBXG4gKi9cblxuSnNvblJvdXRlcy5hZGQoXCJnZXRcIiwgXCIvYXBpL3dvcmtmbG93L2luc3RhbmNlc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgZiwgZmxvd0lkLCBmbG93SWRzLCBmbG93cywgaSwgaW5zdGFuY2VzLCBxdWVyeSwgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZXRfc3luY190b2tlbiwgc3BhY2VJZCwgc3BhY2VVc2VyLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zLCBzeW5jX3Rva2VuLCB1c2VyX2lkO1xuICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdXNlcl9pZCA9IHJlcS51c2VySWQ7XG4gIHNwYWNlSWQgPSByZXEuaGVhZGVyc1tcIngtc3BhY2UtaWRcIl07XG4gIGlmICghc3BhY2VJZCkge1xuICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDQwMSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLVNwYWNlLUlkXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBmbG93SWQgPSAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLmZsb3dJZCA6IHZvaWQgMDtcbiAgaWYgKCFmbG93SWQpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgZmxvd0lkXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBxdWVyeSA9IHt9O1xuICByZXRfc3luY190b2tlbiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBmbG93SWRzID0gZmxvd0lkLnNwbGl0KFwiLFwiKTtcbiAgZmxvd3MgPSBkYi5mbG93cy5maW5kKHtcbiAgICBfaWQ6IHtcbiAgICAgICRpbjogZmxvd0lkc1xuICAgIH1cbiAgfSkuZmV0Y2goKTtcbiAgaSA9IDA7XG4gIHdoaWxlIChpIDwgZmxvd3MubGVuZ3RoKSB7XG4gICAgZiA9IGZsb3dzW2ldO1xuICAgIHNwYWNlVXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IGYuc3BhY2UsXG4gICAgICB1c2VyOiB1c2VyX2lkXG4gICAgfSk7XG4gICAgaWYgKCFzcGFjZVVzZXIpIHtcbiAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogNDAxLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm8gcGVybWlzc2lvbiwgZmxvdyBpcyBcIiArIGYuX2lkLFxuICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuXG4gICAgfVxuICAgIGlmICghU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgdXNlcl9pZCkpIHtcbiAgICAgIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IHNwYWNlVXNlci5vcmdhbml6YXRpb25zXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBpZiAoIVdvcmtmbG93TWFuYWdlci5jYW5Nb25pdG9yKGYsIHNwYWNlVXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucykgJiYgIVdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpKSB7XG4gICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiA0MDEsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm8gcGVybWlzc2lvbiwgZmxvdyBpcyBcIiArIGYuX2lkLFxuICAgICAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcXVlcnkuZmxvdyA9IHtcbiAgICAkaW46IGZsb3dJZHNcbiAgfTtcbiAgcXVlcnkuc3BhY2UgPSBzcGFjZUlkO1xuICBpZiAoKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLnN5bmNfdG9rZW4gOiB2b2lkIDApIHtcbiAgICBzeW5jX3Rva2VuID0gbmV3IERhdGUoTnVtYmVyKHJlcS5xdWVyeS5zeW5jX3Rva2VuKSk7XG4gICAgcXVlcnkubW9kaWZpZWQgPSB7XG4gICAgICAkZ3Q6IHN5bmNfdG9rZW5cbiAgICB9O1xuICB9XG4gIGlmICgocmVmMiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjIuZmluYWxfZGVjaXNpb24gOiB2b2lkIDApIHtcbiAgICBxdWVyeS5maW5hbF9kZWNpc2lvbiA9IHtcbiAgICAgICRpbjogcmVxLnF1ZXJ5LmZpbmFsX2RlY2lzaW9uLnNwbGl0KFwiLFwiKVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcXVlcnkuZmluYWxfZGVjaXNpb24gPSB7XG4gICAgICAkbmluOiBbXCJ0ZXJtaW5hdGVkXCIsIFwicmVqZWN0ZWRcIl1cbiAgICB9O1xuICB9XG4gIGlmICgocmVmMyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjMuc3RhdGUgOiB2b2lkIDApIHtcbiAgICBxdWVyeS5zdGF0ZSA9IHtcbiAgICAgICRpbjogcmVxLnF1ZXJ5LnN0YXRlLnNwbGl0KFwiLFwiKVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcXVlcnkuc3RhdGUgPSBcImNvbXBsZXRlZFwiO1xuICB9XG4gIGluc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBpbmJveF91ZXJzOiAwLFxuICAgICAgY2NfdXNlcnM6IDAsXG4gICAgICBvdXRib3hfdXNlcnM6IDAsXG4gICAgICB0cmFjZXM6IDAsXG4gICAgICBhdHRhY2htZW50czogMFxuICAgIH0sXG4gICAgc2tpcDogMCxcbiAgICBsaW1pdDogNTAwXG4gIH0pLmZldGNoKCk7XG4gIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgdmFyIGF0dGFjaG1lbnRzO1xuICAgIGF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlLl9pZCxcbiAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcbiAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICRuZTogdHJ1ZVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBjb3BpZXM6IDBcbiAgICAgIH1cbiAgICB9KS5mZXRjaCgpO1xuICAgIHJldHVybiBpbnN0YW5jZS5hdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzO1xuICB9KTtcbiAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgIGNvZGU6IDIwMCxcbiAgICBkYXRhOiB7XG4gICAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcbiAgICAgIFwic3luY190b2tlblwiOiByZXRfc3luY190b2tlbixcbiAgICAgIFwiZGF0YVwiOiBpbnN0YW5jZXNcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJcbkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL3N0ZWVkb3MtY3NzXCIsIChyZXEsIHJlcywgbmV4dCktPlxuXG5cdGFsbENzcyA9IFdlYkFwcC5nZXRSZWZyZXNoYWJsZUFzc2V0cygpXG5cblx0YWxsQ3NzTGluayA9IFwiXCJcblxuXHRhbGxDc3MuZm9yRWFjaCAoY3NzKSAtPlxuXHRcdGlmIF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVhcblx0XHRcdHJvb3RVcmwgPSBfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMXG5cdFx0XHRpZiByb290VXJsLmVuZHNXaXRoKFwiL1wiKVxuXHRcdFx0XHRjc3NIcmVmID0gcm9vdFVybC5yZXBsYWNlKF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggKyBcIi9cIiwgXCJcIikgKyBjc3MudXJsXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGNzc0hyZWYgPSByb290VXJsLnJlcGxhY2UoX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCwgXCJcIikgKyBjc3MudXJsXG5cdFx0ZWxzZVxuXHRcdFx0Y3NzSHJlZiA9IE1ldGVvci5hYnNvbHV0ZVVybChjc3MudXJsKVxuXHRcdGFsbENzc0xpbmsgKz0gXCJAaW1wb3J0IHVybCgje2Nzc0hyZWZ9KTtcIlxuXG5cdHJlcy5zdGF0dXNDb2RlID0gMjAwXG5cdHJlcy5lbmQoYWxsQ3NzTGluaykiLCJKc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9zdGVlZG9zLWNzc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYWxsQ3NzLCBhbGxDc3NMaW5rO1xuICBhbGxDc3MgPSBXZWJBcHAuZ2V0UmVmcmVzaGFibGVBc3NldHMoKTtcbiAgYWxsQ3NzTGluayA9IFwiXCI7XG4gIGFsbENzcy5mb3JFYWNoKGZ1bmN0aW9uKGNzcykge1xuICAgIHZhciBjc3NIcmVmLCByb290VXJsO1xuICAgIGlmIChfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMX1BBVEhfUFJFRklYKSB7XG4gICAgICByb290VXJsID0gX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTDtcbiAgICAgIGlmIChyb290VXJsLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICBjc3NIcmVmID0gcm9vdFVybC5yZXBsYWNlKF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggKyBcIi9cIiwgXCJcIikgKyBjc3MudXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3NzSHJlZiA9IHJvb3RVcmwucmVwbGFjZShfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMX1BBVEhfUFJFRklYLCBcIlwiKSArIGNzcy51cmw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoY3NzLnVybCk7XG4gICAgfVxuICAgIHJldHVybiBhbGxDc3NMaW5rICs9IFwiQGltcG9ydCB1cmwoXCIgKyBjc3NIcmVmICsgXCIpO1wiO1xuICB9KTtcbiAgcmVzLnN0YXR1c0NvZGUgPSAyMDA7XG4gIHJldHVybiByZXMuZW5kKGFsbENzc0xpbmspO1xufSk7XG4iLCJKc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvZHJhZnQvOmZsb3dcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxuXHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxuXHRcdHJldHVyblxuXG5cdHVzZXJfaWQgPSByZXEudXNlcklkXG5cblx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IHVzZXJfaWQgfSlcblxuXHRzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZVxuXG5cdGZsb3dJZCA9IHJlcS5wYXJhbXMuZmxvd1xuXG5cdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoeyBfaWQ6IHNwYWNlSWQgfSlcblxuXHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7IF9pZDogZmxvd0lkIH0sIHsgZmllbGRzOiB7IG5hbWU6IDEsICdjdXJyZW50Ll9pZCc6IDEsIGZvcm06IDEgfSB9KVxuXG5cdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHsgX2lkOiBmbG93LmZvcm0gfSwgeyBmaWVsZHM6IHsgJ2N1cnJlbnQuX2lkJzogMSB9IH0pXG5cblx0b3B0aW9ucyA9IHtcblx0XHRzaG93VHJhY2U6IGZhbHNlLFxuXHRcdHNob3dBdHRhY2htZW50czogZmFsc2UsXG5cdFx0dGVtcGxhdGVOYW1lOiBcImRlZmF1bHRcIixcblx0XHRlZGl0YWJsZTogdHJ1ZSxcblx0XHR3aWR0aDogXCIxMDAlXCIsXG5cdFx0aW5zdGFuY2Vfc3R5bGU6IFwiaW5zdGFuY2UtZGVmYXVsdFwiLFxuXHRcdHBsdWdpbnM6IFwiXCJcIlxuXG5cdFx0XHQ8bWV0YSBodHRwLWVxdWl2PVwiWC1VQS1Db21wYXRpYmxlXCIgY29udGVudD1cIklFPWVkZ2UsY2hyb21lPTFcIiAvPlxuXHRcdFx0PG1ldGEgbmFtZT1cImZvcm1hdC1kZXRlY3Rpb25cIiBjb250ZW50PVwidGVsZXBob25lPW5vXCI+XG5cdFx0XHQ8bWV0YSBodHRwLWVxdWl2PVwieC1yaW0tYXV0by1tYXRjaFwiIGNvbnRlbnQ9XCJub25lXCI+XG5cdFx0XHQ8dGl0bGU+I3tmbG93Lm5hbWV9PC90aXRsZT5cblx0XHRcdDxtZXRhIGNvbnRlbnQ9J3dpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPTAnIG5hbWU9J3ZpZXdwb3J0JyAvPlxuXHRcdFx0PG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aFwiIC8+XG5cblx0XHRcdDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBocmVmPVwiL3BsdWdpbnMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Nzcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmNzc1wiPlxuXG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9qcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxuXG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9qcy9sb2NhbGVzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci56aC1DTi5qc1wiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBjaGFyc2V0PVwiVVRGLThcIj48L3NjcmlwdD5cblxuXHRcdFx0PGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCIvcGx1Z2lucy90b2FzdHIvdG9hc3RyLm1pbi5jc3NcIj5cblx0XHRcdDxzY3JpcHQgc3JjPVwiL3BsdWdpbnMvdG9hc3RyL3RvYXN0ci5taW4uanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+PC9zY3JpcHQ+XG5cdFx0XHQ8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cIi9qcy93b3JrZmxvd19jbGllbnQuY3NzXCI+XG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9qcy93b3JrZmxvd19jbGllbnQuanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+PC9zY3JpcHQ+XG5cdFx0XCJcIlwiXG5cdH1cblxuXHRpbnN0YW5jZSA9IHtcblx0XHRmbG93OiBmbG93Ll9pZCxcblx0XHRmbG93X3ZlcnNpb246IGZsb3cuY3VycmVudC5faWQsXG5cdFx0Zm9ybTogZm9ybS5faWQsXG5cdFx0Zm9ybV92ZXJzaW9uOiBmb3JtLmN1cnJlbnQuX2lkLFxuXHRcdHZhbHVlczoge30sXG5cdFx0bmFtZTogZmxvdy5uYW1lLFxuXHRcdHNwYWNlOiBzcGFjZUlkXG5cdH1cblxuXHRodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXG5cblx0ZGF0YUJ1ZiA9IG5ldyBCdWZmZXIoaHRtbClcblxuXHRyZXMuc2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcsIGRhdGFCdWYubGVuZ3RoKVxuXG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtcmFuZ2UnLCBcImJ5dGVzIDAtI3tkYXRhQnVmLmxlbmd0aCAtIDF9LyN7ZGF0YUJ1Zi5sZW5ndGh9XCIpXG5cblx0cmVzLnN0YXR1c0NvZGUgPSAyMDBcblxuXHRyZXMuZW5kKGh0bWwpXG4iLCJKc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvZHJhZnQvOmZsb3dcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGRhdGFCdWYsIGZsb3csIGZsb3dJZCwgZm9ybSwgaHRtbCwgaW5zdGFuY2UsIG9wdGlvbnMsIHNwYWNlLCBzcGFjZUlkLCB1c2VyLCB1c2VyX2lkO1xuICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdXNlcl9pZCA9IHJlcS51c2VySWQ7XG4gIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICBfaWQ6IHVzZXJfaWRcbiAgfSk7XG4gIHNwYWNlSWQgPSByZXEucGFyYW1zLnNwYWNlO1xuICBmbG93SWQgPSByZXEucGFyYW1zLmZsb3c7XG4gIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe1xuICAgIF9pZDogc3BhY2VJZFxuICB9KTtcbiAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgIF9pZDogZmxvd0lkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDEsXG4gICAgICAnY3VycmVudC5faWQnOiAxLFxuICAgICAgZm9ybTogMVxuICAgIH1cbiAgfSk7XG4gIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICBfaWQ6IGZsb3cuZm9ybVxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICAnY3VycmVudC5faWQnOiAxXG4gICAgfVxuICB9KTtcbiAgb3B0aW9ucyA9IHtcbiAgICBzaG93VHJhY2U6IGZhbHNlLFxuICAgIHNob3dBdHRhY2htZW50czogZmFsc2UsXG4gICAgdGVtcGxhdGVOYW1lOiBcImRlZmF1bHRcIixcbiAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgaW5zdGFuY2Vfc3R5bGU6IFwiaW5zdGFuY2UtZGVmYXVsdFwiLFxuICAgIHBsdWdpbnM6IFwiXFxuPG1ldGEgaHR0cC1lcXVpdj1cXFwiWC1VQS1Db21wYXRpYmxlXFxcIiBjb250ZW50PVxcXCJJRT1lZGdlLGNocm9tZT0xXFxcIiAvPlxcbjxtZXRhIG5hbWU9XFxcImZvcm1hdC1kZXRlY3Rpb25cXFwiIGNvbnRlbnQ9XFxcInRlbGVwaG9uZT1ub1xcXCI+XFxuPG1ldGEgaHR0cC1lcXVpdj1cXFwieC1yaW0tYXV0by1tYXRjaFxcXCIgY29udGVudD1cXFwibm9uZVxcXCI+XFxuPHRpdGxlPlwiICsgZmxvdy5uYW1lICsgXCI8L3RpdGxlPlxcbjxtZXRhIGNvbnRlbnQ9J3dpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPTAnIG5hbWU9J3ZpZXdwb3J0JyAvPlxcbjxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGhcXFwiIC8+XFxuXFxuPGxpbmsgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiB0eXBlPVxcXCJ0ZXh0L2Nzc1xcXCIgaHJlZj1cXFwiL3BsdWdpbnMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Nzcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmNzc1xcXCI+XFxuXFxuPHNjcmlwdCBzcmM9XFxcIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9qcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPjwvc2NyaXB0PlxcblxcbjxzY3JpcHQgc3JjPVxcXCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvanMvbG9jYWxlcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIuemgtQ04uanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgY2hhcnNldD1cXFwiVVRGLThcXFwiPjwvc2NyaXB0PlxcblxcbjxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgdHlwZT1cXFwidGV4dC9jc3NcXFwiIGhyZWY9XFxcIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmNzc1xcXCI+XFxuPHNjcmlwdCBzcmM9XFxcIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPjwvc2NyaXB0PlxcbjxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgdHlwZT1cXFwidGV4dC9jc3NcXFwiIGhyZWY9XFxcIi9qcy93b3JrZmxvd19jbGllbnQuY3NzXFxcIj5cXG48c2NyaXB0IHNyYz1cXFwiL2pzL3dvcmtmbG93X2NsaWVudC5qc1xcXCIgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj48L3NjcmlwdD5cIlxuICB9O1xuICBpbnN0YW5jZSA9IHtcbiAgICBmbG93OiBmbG93Ll9pZCxcbiAgICBmbG93X3ZlcnNpb246IGZsb3cuY3VycmVudC5faWQsXG4gICAgZm9ybTogZm9ybS5faWQsXG4gICAgZm9ybV92ZXJzaW9uOiBmb3JtLmN1cnJlbnQuX2lkLFxuICAgIHZhbHVlczoge30sXG4gICAgbmFtZTogZmxvdy5uYW1lLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH07XG4gIGh0bWwgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VIdG1sKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyk7XG4gIGRhdGFCdWYgPSBuZXcgQnVmZmVyKGh0bWwpO1xuICByZXMuc2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcsIGRhdGFCdWYubGVuZ3RoKTtcbiAgcmVzLnNldEhlYWRlcignY29udGVudC1yYW5nZScsIFwiYnl0ZXMgMC1cIiArIChkYXRhQnVmLmxlbmd0aCAtIDEpICsgXCIvXCIgKyBkYXRhQnVmLmxlbmd0aCk7XG4gIHJlcy5zdGF0dXNDb2RlID0gMjAwO1xuICByZXR1cm4gcmVzLmVuZChodG1sKTtcbn0pO1xuIiwiQXJyYXkucHJvdG90eXBlLmZpbHRlclByb3BlcnR5ID0gZnVuY3Rpb24oaCwgbCl7XG4gICAgdmFyIGcgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odCl7XG4gICAgICAgIHZhciBtID0gdD8gdFtoXTpudWxsO1xuICAgICAgICB2YXIgZCA9IGZhbHNlO1xuICAgICAgICBpZihtIGluc3RhbmNlb2YgQXJyYXkpe1xuICAgICAgICAgICAgZCA9IG0uaW5jbHVkZXMobCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgZCA9IChsID09PSB1bmRlZmluZWQpPyBmYWxzZTptPT1sO1xuICAgICAgICB9XG4gICAgICAgIGlmKGQpe1xuICAgICAgICAgICAgZy5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGc7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuZ2V0UHJvcGVydHkgPSBmdW5jdGlvbihrKXtcbiAgICB2YXIgdiA9IG5ldyBBcnJheSgpO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih0KXtcbiAgICAgICAgdmFyIG0gPSB0PyB0W2tdOm51bGw7XG4gICAgICAgIHYucHVzaChtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdjtcbn1cblxuQXJyYXkucHJvdG90eXBlLmdldEVhY2ggPSBmdW5jdGlvbihjb2RlKXtcbiAgICB2YXIgcmV2ID0gW107XG4gICAgZm9yKHZhciBpID0gMCA7IGkgPCB0aGlzLmxlbmd0aCA7IGkrKyl7XG4gICAgICAgIHJldi5wdXNoKHRoaXNbaV1bY29kZV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV2O1xufTtcblxuQXJyYXkucHJvdG90eXBlLnVuaXEgPSBmdW5jdGlvbigpe1xuICAgIHZhciBhID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGIpeyBcbiAgICAgICAgaWYoYS5pbmRleE9mKGIpIDwgMClcbiAgICAgICAgICAgIHthW2EubGVuZ3RoXSA9IGJ9XG4gICAgfSk7XG4gICAgcmV0dXJuIGE7XG59O1xuXG5Gb3JtX2Zvcm11bGEgPSB7fTtcblxuXG5Gb3JtX2Zvcm11bGEubWl4aW4gPSBmdW5jdGlvbihkZXN0LCBzcmMpe1xuICAgIGZvcih2YXIga2V5IGluIHNyYyl7XG4gICAgICAgIGRlc3Rba2V5XSA9IHNyY1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdDtcbn07XG5cblxuRm9ybV9mb3JtdWxhLmhhbmRlclVzZXJPYmplY3QgPSBmdW5jdGlvbih1KXtcblxuICAgIGlmKHUgaW5zdGFuY2VvZiBBcnJheSl7XG4gICAgICAgIHZhciB1c2VyID0ge307XG5cbiAgICAgICAgdXNlci5uYW1lID0gdS5nZXRQcm9wZXJ0eShcIm5hbWVcIilcbiAgICAgICAgdXNlci5vcmdhbml6YXRpb24gPSB7fTtcbiAgICAgICAgdXNlci5vcmdhbml6YXRpb24ubmFtZSA9IHUuZ2V0UHJvcGVydHkoXCJvcmdhbml6YXRpb25cIikuZ2V0UHJvcGVydHkoXCJuYW1lXCIpO1xuICAgICAgICB1c2VyLm9yZ2FuaXphdGlvbi5mdWxsbmFtZSA9IHUuZ2V0UHJvcGVydHkoXCJvcmdhbml6YXRpb25cIikuZ2V0UHJvcGVydHkoXCJmdWxsbmFtZVwiKTtcblxuICAgICAgICB1c2VyLmhyID0gdS5nZXRQcm9wZXJ0eShcImhyXCIpXG5cbiAgICAgICAgdXNlci5zb3J0X25vID0gdS5nZXRQcm9wZXJ0eShcInNvcnRfbm9cIilcblxuXHRcdHVzZXIubW9iaWxlID0gdS5nZXRQcm9wZXJ0eShcIm1vYmlsZVwiKVxuXG5cdFx0dXNlci53b3JrX3Bob25lID0gdS5nZXRQcm9wZXJ0eShcIndvcmtfcGhvbmVcIilcblxuXHRcdHVzZXIucG9zaXRpb24gPSB1LmdldFByb3BlcnR5KFwicG9zaXRpb25cIilcblxuICAgICAgICB2YXIgdXNlclJvbGVzID0gdS5nZXRQcm9wZXJ0eShcInJvbGVzXCIpO1xuICAgICAgICB2YXIgcm9sZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdXNlclJvbGVzLmZvckVhY2goZnVuY3Rpb24oaSl7XG4gICAgICAgICAgICByb2xlcyA9IHJvbGVzLmNvbmNhdChpKTtcbiAgICAgICAgfSk7IFxuICAgICAgICByb2xlcy51bmlxKCk7XG4gICAgICAgIHVzZXIucm9sZXMgPSByb2xlcztcbiAgICAgICAgcmV0dXJuIHVzZXI7XG4gICAgfWVsc2V7XG4gICAgICAgIHJldHVybiB1O1xuICAgIH1cbn1cblxuRm9ybV9mb3JtdWxhLmhhbmRlck9yZ09iamVjdCA9IGZ1bmN0aW9uKG8pe1xuXG4gICAgaWYobyBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgdmFyIG9yZyA9IHt9O1xuXHRcdG9yZy5pZCA9IG8uZ2V0UHJvcGVydHkoXCJfaWRcIik7XG4gICAgICAgIG9yZy5uYW1lID0gby5nZXRQcm9wZXJ0eShcIm5hbWVcIik7XG4gICAgICAgIG9yZy5mdWxsbmFtZSA9IG8uZ2V0UHJvcGVydHkoXCJmdWxsbmFtZVwiKTtcblxuICAgICAgICByZXR1cm4gb3JnO1xuICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gbztcbiAgICB9XG59XG5cblxuXG4vKipcbiAgICAqIOiOt+W+l+WFrOW8j+mcgOimgeeUqOWIsOeahOWIneWni+WAvFxuICAgICog6L6T5YWl77yaZmllbGRzLCB2YWx1ZXMsIGFwcGxpY2FudFxuICAgICog6L6T5Ye677yaX192YWx1ZXNcbioqL1xuRm9ybV9mb3JtdWxhLmluaXRfZm9ybXVsYV92YWx1ZXMgPSBmdW5jdGlvbihmaWVsZHMsIGF1dG9Gb3JtRG9jLCBhcHByb3ZlciwgYXBwbGljYW50LCBzcGFjZUlkKXtcbiAgICB2YXIgX192YWx1ZXMgPSB7fTtcbiAgICAvL+eUs+ivt+WNleS4reWhq+eahOWAvOWkhOeQhlxuICAgIGlmKGZpZWxkcyAmJiBmaWVsZHMubGVuZ3RoICYmIGF1dG9Gb3JtRG9jKSB7XG4gICAgICAgIC8vZGVidWdnZXI7XG4gICAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKXtcbiAgICAgICAgICAgIHZhciB0eXBlID0gZmllbGQudHlwZTtcbiAgICAgICAgICAgIGlmKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBpZih0eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICog5bCG6KGo5qC85a2X5q6155qE5YC86L+b6KGM6L2s5o2i5ZCO5Lyg5YWlX192YWx1ZXPkuK1cbiAgICAgICAgICAgICAgICAgICAgKiB2YWx1ZXPkuK3ooajmoLznmoTlgLzmoLzlvI/kuLpcbiAgICAgICAgICAgICAgICAgICAgKiBbe1wiYVwiOjEsXCJiXCI6NH0se1wiYVwiOjIsXCJiXCI6NX0se1wiYVwiOjMsXCJiXCI6Nn1dXG4gICAgICAgICAgICAgICAgICAgICogX192YWx1ZXPpnIDopoHovazljJbkuLrkuIvpnaLmoLzlvI/kuJTlkozkuLvooajnmoTlgLzkuIDmoLfmlL7liLDnrKzkuIDlsYJcbiAgICAgICAgICAgICAgICAgICAgKiB7XCJhXCI6WzEsMiwzXSxcImJcIjpbNCw1LDZdfVxuICAgICAgICAgICAgICAgICAgICAqKi9cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlRmllbGRzID0gZmllbGQuc2ZpZWxkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlVmFsdWVzID0gYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtdWxhVGFibGVWYWx1ZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdGFibGVWYWx1ZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgLy/mjInlhazlvI/nmoTmoLzlvI/ovazmjaLlgLzkuLpfX3RhYmxlVmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmKHRhYmxlRmllbGRzICYmIHRhYmxlRmllbGRzLmxlbmd0aCAmJiB0YWJsZVZhbHVlcyAmJiB0YWJsZVZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHRhYmxlVmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm11bGFUYWJsZVZhbHVlcy5wdXNoKEZvcm1fZm9ybXVsYS5pbml0X2Zvcm11bGFfdmFsdWVzKHRhYmxlRmllbGRzLCB0YWJsZVZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5oyJ5Li76KGo55qE5qC85byP6L2s5o2iX190YWJsZVZhbHVlc+WKoOWIsFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVGaWVsZHMuZm9yRWFjaChmdW5jdGlvbih0YWJsZWZpZWxkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3RhYmxlVmFsdWVzW3RhYmxlZmllbGQuY29kZV0gPSBmb3JtdWxhVGFibGVWYWx1ZXMuZ2V0RWFjaCh0YWJsZWZpZWxkLmNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX3ZhbHVlcyA9IEZvcm1fZm9ybXVsYS5taXhpbihfX3ZhbHVlcywgX190YWJsZVZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3VzZXInKXtcbiAgICAgICAgICAgICAgICAgICAgX192YWx1ZXNbZmllbGQuY29kZV0gPSBGb3JtX2Zvcm11bGEuaGFuZGVyVXNlck9iamVjdChXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybXVsYVVzZXJPYmplY3RzKHNwYWNlSWQsIGF1dG9Gb3JtRG9jW2ZpZWxkLmNvZGVdKSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2dyb3VwJyl7XG4gICAgICAgICAgICAgICAgICAgIF9fdmFsdWVzW2ZpZWxkLmNvZGVdID0gRm9ybV9mb3JtdWxhLmhhbmRlck9yZ09iamVjdChXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybXVsYU9yZ09iamVjdHMoYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV0pKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnb2RhdGEnKXtcblx0XHRcdFx0XHRfX3ZhbHVlc1tmaWVsZC5jb2RlXSA9IGF1dG9Gb3JtRG9jW2ZpZWxkLmNvZGVdIHx8IHt9XG5cblx0XHRcdFx0fSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy/mraTlpITkvKBzcGFjZUlk57uZ6YCJ5Lq65o6n5Lu255qE5pen5pWw5o2u6K6h566Xcm9sZXPlkoxvcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgX192YWx1ZXNbZmllbGQuY29kZV0gPSBhdXRvRm9ybURvY1tmaWVsZC5jb2RlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICAvL+W9k+WJjeWkhOeQhuS6ulxuICAgIF9fdmFsdWVzW1wiYXBwcm92ZXJcIl0gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybXVsYVVzZXJPYmplY3Qoc3BhY2VJZCwgYXBwcm92ZXIpO1xuICAgIC8v55Sz6K+35Lq6XG4gICAgX192YWx1ZXNbXCJhcHBsaWNhbnRcIl0gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybXVsYVVzZXJPYmplY3Qoc3BhY2VJZCwgYXBwbGljYW50KTtcblxuICAgIHJldHVybiBfX3ZhbHVlcztcbn07XG5cbiIsImdldEhhbmRsZXJzTWFuYWdlciA9IHt9XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyA9ICh1c2VyX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKS0+XG5cdGFwcHJvdmVfdXNlcnMgPSBuZXcgQXJyYXlcblx0Xy5lYWNoKHVzZXJfaWRzLCAodXNlcl9pZCktPlxuXHRcdGlmIGRiLnVzZXJzLmZpbmQoe19pZDogdXNlcl9pZH0pLmNvdW50KCkgPiAwXG5cdFx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKHVzZXJfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZClcblx0XHRcdGlmIHVzZXJzLmxlbmd0aCA+IDBcblx0XHRcdFx0YXBwcm92ZV91c2VycyA9IGFwcHJvdmVfdXNlcnMuY29uY2F0KHVzZXJzKVxuXHRcdGVsc2Vcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwidXNlcl9pZOS4jeWQiOazleS4jeWQiOazlVwiKVxuXHQpXG5cdGFwcHJvdmVfdXNlcnMgPSBfLnVuaXEoYXBwcm92ZV91c2Vycylcblx0cmV0dXJuIGFwcHJvdmVfdXNlcnNcblxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMgPSAodXNlcl9pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKS0+XG5cdHVzZXJfaWRzID0gbmV3IEFycmF5XG5cdF8uZWFjaChyb2xlX2lkcywgKHJvbGVfaWQpLT5cblx0XHRpZiBkYi5mbG93X3JvbGVzLmZpbmQoe19pZDogcm9sZV9pZH0pLmNvdW50KCkgPiAwXG5cdFx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGUodXNlcl9pZCwgcm9sZV9pZCwgc3BhY2VfaWQpXG5cdFx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXG5cdFx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxuXHRcdGVsc2Vcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwicm9sZV9pZOW3sue7j+iiq+WIoOmZpFwiKVxuXHQpXG5cdGlmIHVzZXJfaWRzLmxlbmd0aCA+IDBcblx0XHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcblx0XHRyZXR1cm4gdXNlcl9pZHNcblx0ZWxzZVxuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2udXNlcl9pZOWSjHJvbGVfaWRz5rKh5p+l5Yiw5a+55bqU55qE5aSE55CG5Lq6XCIpXG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGUgPSAodXNlcl9pZCwgcm9sZV9pZCwgc3BhY2VfaWQpIC0+XG5cdG9yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXJzOiB1c2VyX2lkIH0sIHsgZmllbGRzOiB7IF9pZDogMSB9IH0pLmZldGNoKClcblx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcblx0Xy5lYWNoKG9yZ3MsIChvcmcpIC0+XG5cdFx0dXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUob3JnLl9pZCwgcm9sZV9pZCwgc3BhY2VfaWQpXG5cdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxuXHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQodXNlcnMpXG5cdClcblx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXG5cdHJldHVybiB1c2VyX2lkc1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyA9IChvcmdfaWRzLCByb2xlX2lkcywgc3BhY2VfaWQpLT5cblx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcblx0Xy5lYWNoKG9yZ19pZHMsIChvcmdfaWQpLT5cblx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMob3JnX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpXG5cdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxuXHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQodXNlcnMpXG5cdClcblx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXG5cdHJldHVybiB1c2VyX2lkc1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGVzID0gKG9yZ19pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKS0+XG5cdHVzZXJfaWRzID0gbmV3IEFycmF5XG5cdF8uZWFjaChyb2xlX2lkcywgKHJvbGVfaWQpLT5cblx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZShvcmdfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKVxuXHRcdGlmIHVzZXJzLmxlbmd0aCA+IDBcblx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxuXHQpXG5cdGlmIHVzZXJfaWRzLmxlbmd0aCA+IDBcblx0XHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcblx0XHRyZXR1cm4gdXNlcl9pZHNcblx0ZWxzZVxuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2ub3JnX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIilcblxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlID0gKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpIC0+XG5cdG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogb3JnX2lkIH0sIHsgZmllbGRzOiB7IHBhcmVudHM6IDEgfSB9KVxuXHR1c2VyX2lkcyA9IG5ldyBBcnJheVxuXHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBvcmc6IG9yZ19pZCwgcm9sZTogcm9sZV9pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcblx0Xy5lYWNoKHBvc2l0aW9ucywgKHBvc2l0aW9uKSAtPlxuXHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHBvc2l0aW9uLnVzZXJzKVxuXHQpXG5cdGlmIHVzZXJfaWRzLmxlbmd0aCBpcyAwXG5cdFx0cGFyZW50cyA9IG9yZy5wYXJlbnRzXG5cdFx0Xy5lYWNoKHBhcmVudHMsIChwYXJlbnRfaWQpIC0+XG5cdFx0XHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBvcmc6IHBhcmVudF9pZCwgcm9sZTogcm9sZV9pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcblx0XHRcdGlmIHBvc2l0aW9ucy5sZW5ndGggPiAwXG5cdFx0XHRcdF8uZWFjaChwb3NpdGlvbnMsIChwb3NpdGlvbikgLT5cblx0XHRcdFx0XHR1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2Vycylcblx0XHRcdFx0KVxuXHRcdClcblxuXHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcblx0cmV0dXJuIHVzZXJfaWRzXG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVycyA9IChpbnN0YW5jZV9pZCwgc3RlcF9pZCkgLT5cblx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZClcblxuXHQjIOaLn+eov+aXtiwg5Y+v5Lul6K6+5a6a5ZCO57ut5q+P5Liq5q2l6aqk55qE5aSE55CG5Lq6ICMxOTI2XG5cdGlmIGluc3RhbmNlLnN0ZXBfYXBwcm92ZSAmJiAhXy5pc0VtcHR5KGluc3RhbmNlLnN0ZXBfYXBwcm92ZVtcIiN7c3RlcF9pZH1fb3B0aW9uc1wiXSlcblx0XHRyZXR1cm4gaW5zdGFuY2Uuc3RlcF9hcHByb3ZlW1wiI3tzdGVwX2lkfV9vcHRpb25zXCJdXG5cblx0YXBwcm92ZV91c2VycyA9IG5ldyBBcnJheVxuXHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXG5cdGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93XG5cdGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uXG5cdGN1cnJlbnRfZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZClcblx0Y3VycmVudF9zdGVwID0gbnVsbFxuXHRjdXJyZW50X3N0ZXBzID0gbmV3IEFycmF5XG5cblx0aWYgY3VycmVudF9mbG93LmN1cnJlbnQuX2lkIGlzIGZsb3dfcmV2XG5cdFx0Y3VycmVudF9zdGVwcyA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LnN0ZXBzXG5cdGVsc2Vcblx0XHRjdXJyZW50ID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgKGhpc3RvcnkpIC0+XG5cdFx0XHRyZXR1cm4gaGlzdG9yeS5faWQgaXMgZmxvd19yZXZcblx0XHQpXG5cdFx0Y3VycmVudF9zdGVwcyA9IGN1cnJlbnQuc3RlcHNcblxuXHQjIOS7juiOt+WPlueahHN0ZXBz5Lit5qC55o2uOnN0ZXBfaWTmj5Dlj5blr7nlupTnmoRzdGVw5a+56LGhXG5cdGN1cnJlbnRfc3RlcCA9IF8uZmluZChjdXJyZW50X3N0ZXBzLCAoc3RlcCkgLT5cblx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxuXHQpXG5cdCMg5Yik5patc3RlcF90eXBlXG5cdGlmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXMgXCJjb25kaXRpb25cIlxuXHRcdHVuZmluaXNoZWRfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCAodHJhY2UpIC0+XG5cdFx0XHRyZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgaXMgZmFsc2Vcblx0XHQpXG5cblx0XHRyZXR1cm4gbmV3IEFycmF5KHVuZmluaXNoZWRfdHJhY2UuYXBwcm92ZXNbMF0udXNlcilcblxuXHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzIFwic3RhcnRcIlxuXHRcdGhhbmRsZXJzID0gbmV3IEFycmF5XG5cdFx0aGFuZGxlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpXG5cdFx0aGFuZGxlcnMucHVzaChpbnN0YW5jZS5zdWJtaXR0ZXIpXG5cdFx0aGFuZGxlcnMgPSBfLnVuaXEoaGFuZGxlcnMpXG5cdFx0cmV0dXJuIGhhbmRsZXJzXG5cdCMg5b6X5Yiwc3RlcOeahFwiZGVhbF90eXBlXCLvvIzlubbov5vooYzpgLvovpHliKTmlq3mib7liLDlr7nlupTnmoTlpITnkIbkurpcblx0ZGVhbF90eXBlID0gY3VycmVudF9zdGVwLmRlYWxfdHlwZVxuXHR1c2VycyA9IG5ldyBBcnJheVxuXHRpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRSb2xlXCJcblx0XHQjIDEuKioqKioqKioqKirnlLPor7fkurrmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxuXHRcdGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudFxuXHRcdGlmIGFwcGxpY2FudFxuXHRcdFx0c3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcGxpY2FudCB9KS5jb3VudCgpXG5cdFx0XHRpZiBzcGFjZV91c2VyX2NvdW50IGlzIDBcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKVxuXG5cdFx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXG5cdFx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxuXHRcdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxuXHRcdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIilcblx0XHRcdFx0KVxuXG5cdFx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhhcHBsaWNhbnQsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5a6h5om55bKX5L2N5pyq5oyH5a6aXCIpXG5cblx0XHRlbHNlXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIkluc3RhbmNl55qE5o+Q5Lqk5Lq65Li656m6XCIpXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwiaHJSb2xlXCJcblx0XHRhcHByb3ZlSHJSb2xlSWRzID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX2hyX3JvbGVzO1xuXHRcdGlmIChhcHByb3ZlSHJSb2xlSWRzKVxuXHRcdFx0cmV0dXJuIF8ucGx1Y2soV29ya2Zsb3dNYW5hZ2VyLmdldEhyUm9sZXNVc2VycyhzcGFjZV9pZCwgYXBwcm92ZUhyUm9sZUlkcyksICd1c2VyJyk7XG5cdFx0ZWxzZVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLmnKrmjIflrppcIilcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRcIlxuXHRcdCMgMi4qKioqKioqKioqKueUs+ivt+S6uioqKioqKioqKioqXG5cdFx0YXBwbGljYW50ID0gaW5zdGFuY2UuYXBwbGljYW50XG5cdFx0c3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcGxpY2FudCB9KS5jb3VudCgpXG5cdFx0aWYgc3BhY2VfdXNlcl9jb3VudCBpcyAwXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaPkOS6pOS6uuW3sue7j+iiq+WIoOmZpOaIluS4jeWxnuS6juW9k+WJjXNwYWNlXCIpXG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIG5ldyBBcnJheShhcHBsaWNhbnQpXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwib3JnRmllbGRSb2xlXCJcblx0XHQjIDMuKioqKioqKioqKirpg6jpl6jlrZfmrrXmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxuXHRcdGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybVxuXHRcdGZvcm1fcmV2ID0gbnVsbFxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb25cblx0XHRlbHNlXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxuXHRcdFx0KVxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cblxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxuXHRcdGlmIGZvcm1fcmV2IGlzIGZvcm0uY3VycmVudC5faWRcblx0XHRcdGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudFxuXHRcdGVsc2Vcblx0XHRcdGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCAoZm9ybV9oaXN0b3J5KSAtPlxuXHRcdFx0XHRyZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCBpcyBmb3JtX3JldlxuXHRcdFx0KVxuXG5cdFx0YXBwcm92ZXJfb3JnX2ZpZWxkID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX29yZ19maWVsZFxuXHRcdGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkc1xuXHRcdGZpZWxkX2NvZGUgPSBudWxsXG5cdFx0Xy5lYWNoKGZvcm1fZmllbGRzLCAoZm9ybV9maWVsZCkgLT5cblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxuXHRcdFx0XHRmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlXG5cdFx0KVxuXG5cdFx0IyDlj5blvpfmnIDmlrDnmoR2YWx1ZXNcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxuXHRcdG9yZ19pZHMgPSBuZXcgQXJyYXlcblx0XHRvcmdfaWRzX25hbWVzID0gbmV3IEFycmF5XG5cdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXVxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXG5cdFx0XHRlbHNlXG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKVxuXG5cdFx0IyDmoKHpqoxvcmdfaWTmlbDnu4TkuK1vcmdfaWTmmK/lkKblkIjms5Vcblx0XHRfLmVhY2gob3JnX2lkc19uYW1lcywgKG9yZykgLT5cblx0XHRcdGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7IF9pZDogb3JnW1wiaWRcIl0gfSkuY291bnQoKVxuXHRcdFx0aWYgY2hlY2tfb3JnX2NvdW50IGlzIDBcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dJROS4jeWQiOazlVwiKVxuXHRcdFx0b3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKVxuXHRcdClcblxuXHRcdGlmIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcyBhbmQgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLmxlbmd0aCA+IDBcblx0XHRcdCMg5qOA5p+lYXBwcm92ZXJfcm9sZXPkuK1yb2xl5piv5ZCm5LiN5a2Y5Zyo5oiW5bey57uP6KKr5Yig6ZmkXG5cdFx0XHRfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCAoYXBwcm92ZXJfcm9sZSkgLT5cblx0XHRcdFx0cm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7IF9pZDogYXBwcm92ZXJfcm9sZSB9KS5jb3VudCgpXG5cdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKVxuXHRcdFx0KVxuXHRcdFx0cmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzKG9yZ19pZHMsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgaW5zdGFuY2Uuc3BhY2UpXG5cdFx0ZWxzZVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIilcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJvcmdGaWVsZFwiXG5cdFx0IyA0LioqKioqKioqKioq6YOo6Zeo5a2X5q615omA5bGe57uE57uH5Lit55qE5Lq65ZGYKioqKioqKioqKipcblx0XHRmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm1cblx0XHRmb3JtX3JldiA9IG51bGxcblx0XHRpZiBmbG93X3JldiBpcyBjdXJyZW50X2Zsb3cuY3VycmVudC5faWRcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uXG5cdFx0ZWxzZVxuXHRcdFx0Y3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCAoY3VycmVudF9mbG93X2hpc3RvcnkpIC0+XG5cdFx0XHRcdHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgaXMgZmxvd19yZXZcblx0XHRcdClcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uIGlmIGN1cnJlbnRfZmxvd192ZXJzaW9uXG5cblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKVxuXHRcdGN1cnJlbnRfZm9ybSA9IG51bGxcblx0XHRpZiBmb3JtX3JldiBpcyBmb3JtLmN1cnJlbnQuX2lkXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnRcblx0XHRlbHNlXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgKGZvcm1faGlzdG9yeSkgLT5cblx0XHRcdFx0cmV0dXJuIGZvcm1faGlzdG9yeS5faWQgaXMgZm9ybV9yZXZcblx0XHRcdClcblxuXHRcdGFwcHJvdmVyX29yZ19maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdfZmllbGRcblx0XHRmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHNcblx0XHRmaWVsZF9jb2RlID0gbnVsbFxuXHRcdF8uZWFjaChmb3JtX2ZpZWxkcywgKGZvcm1fZmllbGQpLT5cblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxuXHRcdFx0XHRmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlXG5cdFx0KVxuXG5cdFx0IyDlj5blvpfmnIDmlrDnmoR2YWx1ZXNcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxuXG5cdFx0b3JnX2lkcyA9IG5ldyBBcnJheVxuXHRcdG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXlcblx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXG5cdFx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXlcblx0XHRcdFx0b3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cblx0XHRcdGVsc2Vcblx0XHRcdFx0b3JnX2lkc19uYW1lcy5wdXNoKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pXG5cblx0XHQjIOagoemqjG9yZ19pZOaVsOe7hOS4rW9yZ19pZOaYr+WQpuWQiOazlVxuXHRcdF8uZWFjaChvcmdfaWRzX25hbWVzLCAob3JnKSAtPlxuXHRcdFx0Y2hlY2tfb3JnX2NvdW50ID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgX2lkOiBvcmdbXCJpZFwiXSB9KS5jb3VudCgpXG5cdFx0XHRpZiBjaGVja19vcmdfY291bnQgaXMgMFxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIue7hOe7h0lE5LiN5ZCI5rOVXCIpXG5cdFx0XHRvcmdfaWRzLnB1c2gob3JnW1wiaWRcIl0pXG5cdFx0KVxuXG5cdFx0IyDmoKHpqoxvcmfkuIvlrZjlnKjlpITnkIbkurpcblx0XHR1c2VyX2lkcyA9IG5ldyBBcnJheVxuXHRcdF8uZWFjaChvcmdfaWRzLCAob3JnX2lkKSAtPlxuXHRcdFx0b3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiBvcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KVxuXHRcdFx0b3JnX2NoaWxkcmVuID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBwYXJlbnRzOiBvcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KS5mZXRjaCgpXG5cdFx0XHRvcmdfY2hpbGRyZW4udW5zaGlmdChvcmcpXG5cdFx0XHRjaGVja19vcmdzID0gb3JnX2NoaWxkcmVuXG5cdFx0XHRvcmdfdXNlcnMgPSBuZXcgQXJyYXlcblx0XHRcdF8uZWFjaChjaGVja19vcmdzLCAoY2hlY2tfb3JnX3VzZXIpIC0+XG5cdFx0XHRcdGlmIGNoZWNrX29yZ191c2VyLnVzZXJzXG5cdFx0XHRcdFx0Xy5lYWNoKGNoZWNrX29yZ191c2VyLnVzZXJzLCAob3JnX3VzZXIpIC0+XG5cdFx0XHRcdFx0XHRpZiBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBvcmdfdXNlciB9KS5jb3VudCgpIGlzIDBcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJzcGFjZeS4i+S4jeWtmOWcqOatpHVzZXJcIilcblx0XHRcdFx0XHQpXG5cdFx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KGNoZWNrX29yZ191c2VyLnVzZXJzKVxuXHRcdFx0XHRvcmdfdXNlcnMgPSBvcmdfdXNlcnMuY29uY2F0KGNoZWNrX29yZ191c2VyLnVzZXJzKVxuXHRcdFx0KVxuXG5cdFx0XHRpZiBvcmdfdXNlcnMubGVuZ3RoIGlzIDBcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dcIiArIG9yZ19pZCArIFwi5LiN5a2Y5Zyo5aSE55CG5Lq6XCIpXG5cblx0XHQpXG5cblx0XHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcblx0XHRyZXR1cm4gdXNlcl9pZHNcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJ1c2VyRmllbGRSb2xlXCJcblx0XHQjIDUuKioqKioqKioqKirkurrlkZjlrZfmrrXmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxuXHRcdGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybVxuXHRcdGZvcm1fcmV2ID0gbnVsbFxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb25cblx0XHRlbHNlXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxuXHRcdFx0KVxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cblxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxuXHRcdGlmIGZvcm1fcmV2IGlzIGZvcm0uY3VycmVudC5faWRcblx0XHRcdGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudFxuXHRcdGVsc2Vcblx0XHRcdGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCAoZm9ybV9oaXN0b3J5KSAtPlxuXHRcdFx0XHRyZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCBpcyBmb3JtX3JldlxuXHRcdFx0KVxuXG5cdFx0YXBwcm92ZXJfdXNlcl9maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VyX2ZpZWxkXG5cdFx0Zm9ybV9maWVsZHMgPSBjdXJyZW50X2Zvcm0uZmllbGRzXG5cdFx0ZmllbGRfY29kZSA9IG51bGxcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKSAtPlxuXHRcdFx0aWYgZm9ybV9maWVsZC5faWQgaXMgYXBwcm92ZXJfdXNlcl9maWVsZFxuXHRcdFx0XHRmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlXG5cdFx0KVxuXG5cdFx0IyDlj5blvpfmnIDmlrDnmoR2YWx1ZXNcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxuXHRcdCMg6I635Y+WdXNlcl9pZOaVsOe7hFxuXHRcdHVzZXJfaWRzX25hbWVzID0gbmV3IEFycmF5XG5cdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXVxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XG5cdFx0XHRcdHVzZXJfaWRzX25hbWVzID0gbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcy5wdXNoKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pXG5cblx0XHQjIOagoemqjHVzZXJfaWTmlbDnu4TkuK11c2VyX2lk5piv5ZCm5ZCI5rOVXG5cdFx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcblx0XHRfLmVhY2godXNlcl9pZHNfbmFtZXMsICh1c2VyKSAtPlxuXHRcdFx0Y2hlY2tfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IHVzZXJbXCJpZFwiXSB9KS5jb3VudCgpXG5cdFx0XHRpZiBjaGVja191c2VyX2NvdW50IGlzIDBcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkurrlkZhJROS4jeWQiOazlVwiKVxuXHRcdFx0dXNlcl9pZHMucHVzaCh1c2VyW1wiaWRcIl0pXG5cdFx0KVxuXG5cdFx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXG5cdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzIGFuZCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMFxuXHRcdFx0IyDmo4Dmn6VhcHByb3Zlcl9yb2xlc+S4rXJvbGXmmK/lkKbkuI3lrZjlnKjmiJblt7Lnu4/ooqvliKDpmaRcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxuXHRcdFx0XHRyb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiBhcHByb3Zlcl9yb2xlIH0pLmNvdW50KClcblx0XHRcdFx0aWYgcm9sZV9jb3VudCBpcyAwXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpXG5cdFx0XHQpXG5cdFx0XHRyZXR1cm4gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2Vyc0FuZFJvbGVzKHVzZXJfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKVxuXHRcdGVsc2Vcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5rWB56iL5q2l6aqkXCIgKyBjdXJyZW50X3N0ZXAubmFtZSArIFwi5a6h5om55bKX5L2N5pyq5oyH5a6aXCIpXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwidXNlckZpZWxkXCJcblx0XHQjIDYuKioqKioqKioqKirooajljZXkurrlkZjlrZfmrrUqKioqKioqKioqKlxuXHRcdGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybVxuXHRcdGZvcm1fcmV2ID0gbnVsbFxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb25cblx0XHRlbHNlXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxuXHRcdFx0KVxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cblxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxuXHRcdGlmIGZvcm1fcmV2IGlzIGZvcm0uY3VycmVudC5faWRcblx0XHRcdGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudFxuXHRcdGVsc2Vcblx0XHRcdGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCAoZm9ybV9oaXN0b3J5KSAtPlxuXHRcdFx0XHRyZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCBpcyBmb3JtX3JldlxuXHRcdFx0KVxuXG5cdFx0YXBwcm92ZXJfdXNlcl9maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VyX2ZpZWxkXG5cdFx0Zm9ybV9maWVsZHMgPSBjdXJyZW50X2Zvcm0uZmllbGRzXG5cdFx0ZmllbGRfY29kZSA9IG51bGxcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKS0+XG5cdFx0XHRpZiBmb3JtX2ZpZWxkLl9pZCBpcyBhcHByb3Zlcl91c2VyX2ZpZWxkXG5cdFx0XHRcdGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGVcblx0XHQpXG5cblx0XHQjIOWPluW+l+acgOaWsOeahHZhbHVlc1xuXHRcdG5ld2VzdF92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpXG5cblx0XHQjIOiOt+WPlnVzZXJfaWTmlbDnu4Rcblx0XHR1c2VyX2lkc19uYW1lcyA9IG5ldyBBcnJheVxuXHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cblx0XHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheVxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cblx0XHRcdGVsc2Vcblx0XHRcdFx0dXNlcl9pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKVxuXG5cdFx0IyDmoKHpqox1c2VyX2lk5pWw57uE5LitdXNlcl9pZOaYr+WQpuWQiOazlVxuXHRcdHVzZXJfaWRzID0gbmV3IEFycmF5XG5cdFx0Xy5lYWNoKHVzZXJfaWRzX25hbWVzLCAodXNlcikgLT5cblx0XHRcdGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiB1c2VyW1wiaWRcIl0gfSkuY291bnQoKVxuXHRcdFx0aWYgY2hlY2tfdXNlcl9jb3VudCBpcyAwXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5Lq65ZGYSUTkuI3lkIjms5VcIilcblx0XHRcdHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKVxuXHRcdClcblxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxuXHRcdHJldHVybiB1c2VyX2lkc1xuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInNwZWNpZnlTdGVwUm9sZVwiXG5cdFx0IyA3LioqKioqKioqKioq5oyH5a6a5q2l6aqk5aSE55CG5a6h5om55bKX5L2NKioqKioqKioqKipcblx0XHRhcHByb3Zlcl9zdGVwID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX3N0ZXBcblx0XHRmaW5pc2hlZF90cmFjZXMgPSBuZXcgQXJyYXlcblx0XHRfLmVhY2goaW5zdGFuY2UudHJhY2VzLCAodHJhY2UpIC0+XG5cdFx0XHRpZiB0cmFjZS5zdGVwIGlzIGFwcHJvdmVyX3N0ZXBcblx0XHRcdFx0ZmluaXNoZWRfdHJhY2VzLnB1c2godHJhY2UpXG5cdFx0KVxuXHRcdCMg5qC55o2uc3RhcnRfZGF0ZeWPluacgOaWsOeahHRyYWNlXG5cdFx0bWF4X3N0YXJ0RGF0ZV90cmFjZSA9IF8ubWF4KGZpbmlzaGVkX3RyYWNlcywgKHQpIC0+XG5cdFx0XHRyZXR1cm4gdC5zdGFydF9kYXRlXG5cdFx0KVxuXG5cdFx0YXBwcm92ZV91c2VycyA9IF8ucGx1Y2sobWF4X3N0YXJ0RGF0ZV90cmFjZS5hcHByb3ZlcywgXCJ1c2VyXCIpXG5cblx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXNcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxuXHRcdFx0XHRyb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiBhcHByb3Zlcl9yb2xlIH0pLmNvdW50KClcblx0XHRcdFx0aWYgcm9sZV9jb3VudCBpcyAwXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIilcblx0XHRcdClcblxuXHRcdCMg6aqM6K+B5p+l5Yiw55qEdXNlcuaYr+WQpumDveWQiOazlVxuXHRcdF8uZWFjaChhcHByb3ZlX3VzZXJzLCAoYXBwcm92ZV91c2VyKSAtPlxuXHRcdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogYXBwcm92ZV91c2VyIH0pLmNvdW50KCkgaXMgMFxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaMh+WumuatpemqpOeahOWkhOeQhuS6uuW3sue7j+WPmOabtFwiKVxuXHRcdClcblxuXHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMoYXBwcm92ZV91c2VycywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZClcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzcGVjaWZ5U3RlcFVzZXJcIlxuXHRcdCMgOC4qKioqKioqKioqKuaMh+WumuatpemqpOWkhOeQhuS6uioqKioqKioqKioqXG5cdFx0YXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwXG5cdFx0ZmluaXNoZWRfdHJhY2VzID0gbmV3IEFycmF5XG5cdFx0Xy5lYWNoKGluc3RhbmNlLnRyYWNlcywgKHRyYWNlKSAtPlxuXHRcdFx0aWYgdHJhY2Uuc3RlcCBpcyBhcHByb3Zlcl9zdGVwXG5cdFx0XHRcdGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKVxuXHRcdClcblx0XHQjIOagueaNrnN0YXJ0X2RhdGXlj5bmnIDmlrDnmoR0cmFjZVxuXHRcdG1heF9zdGFydERhdGVfdHJhY2UgPSBfLm1heChmaW5pc2hlZF90cmFjZXMsICh0KSAtPlxuXHRcdFx0cmV0dXJuIHQuc3RhcnRfZGF0ZVxuXHRcdClcblxuXHRcdGFwcHJvdmVfdXNlcnMgPSBfLnBsdWNrKG1heF9zdGFydERhdGVfdHJhY2UuYXBwcm92ZXMsIFwidXNlclwiKVxuXG5cdFx0IyDpqozor4Hmn6XliLDnmoR1c2Vy5piv5ZCm6YO95ZCI5rOVXG5cdFx0Xy5lYWNoKGFwcHJvdmVfdXNlcnMsIChhcHByb3ZlX3VzZXIpLT5cblx0XHRcdGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVfdXNlciB9KS5jb3VudCgpXG5cdFx0XHRpZiBjaGVja19hcHByb3ZlX3VzZXJfY291bnQgaXMgMFxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaMh+WumuatpemqpOeahOWkhOeQhuS6uuW3sue7j+WPmOabtFwiKVxuXHRcdClcblxuXHRcdGFwcHJvdmVfdXNlcnMgPSBfLnVuaXEoYXBwcm92ZV91c2Vycylcblx0XHRyZXR1cm4gYXBwcm92ZV91c2Vyc1xuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInN1Ym1pdHRlclJvbGVcIlxuXHRcdCMgOS4qKioqKioqKioqKuWhq+WNleS6uuaJgOWxnue7hOe7h+S4reeahOWuoeaJueWyl+S9jSoqKioqKioqKioqXG5cdFx0c3VibWl0dGVyID0gaW5zdGFuY2Uuc3VibWl0dGVyXG5cdFx0aWYgbm90IHN1Ym1pdHRlclxuXHRcdFx0IyDliKTmlq3mj5DkuqTkurrmmK/lkKblt7Lnu4/ooqvliKDpmaRcblx0XHRcdHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogc3VibWl0dGVyIH0pLmNvdW50KClcblx0XHRcdGlmIHN1Ym1pdHRlcl91c2VyX2NvdW50IGlzIDBcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIilcblx0XHRcdGVsc2Vcblx0XHRcdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzIGFuZCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMFxuXHRcdFx0XHRcdCMg5qOA5p+lYXBwcm92ZXJfcm9sZXPkuK1yb2xl5piv5ZCm5LiN5a2Y5Zyo5oiW5bey57uP6KKr5Yig6ZmkXG5cdFx0XHRcdFx0Xy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgKGFwcHJvdmVyX3JvbGUpIC0+XG5cdFx0XHRcdFx0XHRyb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiBhcHByb3Zlcl9yb2xlIH0pLmNvdW50KClcblx0XHRcdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBhcHByb3Zlcl9yb2xlICsgXCLlt7Lnu4/ooqvliKDpmaRcIilcblx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0cmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKHN1Ym1pdHRlciwgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZClcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5rWB56iL5q2l6aqkXCIgKyBjdXJyZW50X3N0ZXAubmFtZSArIFwi5a6h5om55bKX5L2N5pyq5oyH5a6aXCIpXG5cdFx0ZWxzZVxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnmoTmj5DkuqTkurrkuLrnqbpcIilcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzdWJtaXR0ZXJcIlxuXHRcdCMgMTAuKioqKioqKioqKirmj5DkuqTkuroqKioqKioqKioqKlxuXHRcdHN1Ym1pdHRlciA9IGluc3RhbmNlLnN1Ym1pdHRlclxuXHRcdCMg5Yik5pat5o+Q5Lqk5Lq65piv5ZCm5bey57uP6KKr5Yig6ZmkXG5cdFx0c3VibWl0dGVyX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBzdWJtaXR0ZXIgfSkuY291bnQoKVxuXHRcdGlmIHN1Ym1pdHRlcl91c2VyX2NvdW50IGlzIDBcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmN5bel5L2c5Yy6XCIpXG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIG5ldyBBcnJheShzdWJtaXR0ZXIpXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3BlY2lmeU9yZ1wiXG5cdFx0IyAxMS4qKioqKioqKioqKuafkOmDqOmXqOWGheeahOaJgOacieS6uioqKioqKioqKioqXG5cdFx0YXBwcm92ZXJfb3JnX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdzXG5cdFx0aWYgbm90IGFwcHJvdmVyX29yZ19pZHMgb3IgYXBwcm92ZXJfb3JnX2lkcy5sZW5ndGggaXMgMFxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrlrprkuYnnlKjkuo7mn6Xmib7kuIvkuIDmraXlpITnkIbkurrnmoTpg6jpl6jvvIzor7fogZTns7vnrqHnkIblkZjosIPmn6XmtYHnqIvlm77nmoTphY3nva7mmK/lkKbmraPnoa5cIilcblxuXHRcdCMg6aqM6K+B5omA5oyH5a6a55qEb3JnYW5pemF0aW9uX2lk6YO95a2Y5ZyoXG5cdFx0dmFsaWRfYXBwcm92ZXJfb3JnX2lkcyA9IG5ldyBBcnJheVxuXHRcdF8uZWFjaChhcHByb3Zlcl9vcmdfaWRzLCAoYXBwcm92ZXJfb3JnX2lkKSAtPlxuXHRcdFx0aWYgZGIub3JnYW5pemF0aW9ucy5maW5kKHsgX2lkOiBhcHByb3Zlcl9vcmdfaWQgfSkuY291bnQoKSA+IDBcblx0XHRcdFx0dmFsaWRfYXBwcm92ZXJfb3JnX2lkcy51bnNoaWZ0KGFwcHJvdmVyX29yZ19pZClcblx0XHQpXG5cblx0XHRvcmdfdXNlcl9pZHMgPSBuZXcgQXJyYXlcblx0XHRfLmVhY2godmFsaWRfYXBwcm92ZXJfb3JnX2lkcywgKHZhbGlkX2FwcHJvdmVyX29yZ19pZCkgLT5cblx0XHRcdHZhbGlkX2FwcHJvdmVyX29yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogdmFsaWRfYXBwcm92ZXJfb3JnX2lkIH0sIHsgZmllbGRzOiB7IHVzZXJzOiAxIH0gfSlcblx0XHRcdGlmIHZhbGlkX2FwcHJvdmVyX29yZy51c2Vyc1xuXHRcdFx0XHRvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KHZhbGlkX2FwcHJvdmVyX29yZy51c2VycylcblxuXHRcdFx0Y2hpbGRfb3JncyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgcGFyZW50czogdmFsaWRfYXBwcm92ZXJfb3JnX2lkIH0sIHsgZmllbGRzOiB7IHVzZXJzOiAxIH0gfSkuZmV0Y2goKVxuXHRcdFx0Xy5lYWNoKGNoaWxkX29yZ3MsIChjaGlsZF9vcmcpIC0+XG5cdFx0XHRcdGlmIGNoaWxkX29yZy51c2Vyc1xuXHRcdFx0XHRcdG9yZ191c2VyX2lkcyA9IG9yZ191c2VyX2lkcy5jb25jYXQoY2hpbGRfb3JnLnVzZXJzKVxuXHRcdFx0KVxuXHRcdClcblxuXHRcdG9yZ191c2VyX2lkcyA9IF8udW5pcShvcmdfdXNlcl9pZHMpXG5cdFx0bmV3X29yZ191c2VyX2lkcyA9IG5ldyBBcnJheVxuXHRcdF8uZWFjaChvcmdfdXNlcl9pZHMsIChvcmdfdXNlcl9pZCkgLT5cblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IG9yZ191c2VyX2lkIH0pLmNvdW50KClcblx0XHRcdGlmIHNwYWNlX3VzZXJfaW5mb19jb3VudCA+IDBcblx0XHRcdFx0bmV3X29yZ191c2VyX2lkcy5wdXNoKG9yZ191c2VyX2lkKVxuXHRcdClcblxuXHRcdHJldHVybiBuZXdfb3JnX3VzZXJfaWRzXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3BlY2lmeVVzZXJcIlxuXHRcdCMgMTIuKioqKioqKioqKirmjIflrprnmoTkurrlkZgqKioqKioqKioqKlxuXHRcdGFwcHJvdmVyX3VzZXJfaWRzID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX3VzZXJzXG5cdFx0YXBwcm92ZXJfdXNlcl9pZHMgPSBfLnVuaXEoYXBwcm92ZXJfdXNlcl9pZHMpXG5cdFx0bmV3X2FwcHJvdmVyX3VzZXJfaWRzID0gbmV3IEFycmF5XG5cdFx0Xy5lYWNoKGFwcHJvdmVyX3VzZXJfaWRzLCAoYXBwcm92ZXJfdXNlcl9pZCkgLT5cblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVyX3VzZXJfaWQgfSkuY291bnQoKVxuXHRcdFx0aWYgc3BhY2VfdXNlcl9pbmZvX2NvdW50ID4gMFxuXHRcdFx0XHRuZXdfYXBwcm92ZXJfdXNlcl9pZHMucHVzaChhcHByb3Zlcl91c2VyX2lkKVxuXHRcdClcblxuXHRcdHJldHVybiBuZXdfYXBwcm92ZXJfdXNlcl9pZHNcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJwaWNrdXBBdFJ1bnRpbWVcIlxuXHRcdCMgMTMuKioqKioqKioqKirlrqHmibnml7bmjIflrpoqKioqKioqKioqKlxuXHRcdG5leHRfc3RlcF91c2VycyA9IG5ldyBBcnJheVxuXHRcdF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIChfdHIpIC0+XG5cdFx0XHRyZXR1cm4gX3RyLmlzX2ZpbmlzaGVkIGlzIGZhbHNlXG5cdFx0KVxuXHRcdF9hcHByb3ZlID0gXy5maW5kKF90cmFjZS5hcHByb3ZlcywgKF9hcHApIC0+XG5cdFx0XHRyZXR1cm4gX2FwcC5pc19maW5pc2hlZCBpcyBmYWxzZSBhbmQgX2FwcC50eXBlIGlzbnQgJ2NjJ1xuXHRcdClcblxuXHRcdGlmIF9hcHByb3ZlLm5leHRfc3RlcHNcblx0XHRcdGlmIF9hcHByb3ZlLm5leHRfc3RlcHNbMF1bXCJ1c2Vyc1wiXVxuXHRcdFx0XHRuZXh0X3N0ZXBfdXNlcnMgPSBfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl1cblxuXHRcdHJldHVybiBuZXh0X3N0ZXBfdXNlcnNcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRTdXBlcmlvclwiXG5cdFx0IyAxNC4qKioqKioqKioqKueUs+ivt+S6uuS4iue6p+S4u+euoSoqKioqKioqKioqXG5cdFx0YXBwbGljYW50U3VwZXJpb3JzID0gbmV3IEFycmF5XG5cdFx0X3NwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBpbnN0YW5jZS5hcHBsaWNhbnQgfSwgeyBmaWVsZHM6IHsgbWFuYWdlcjogMSB9IH0pXG5cdFx0aWYgX3NwYWNlX3VzZXIubWFuYWdlclxuXHRcdFx0YXBwbGljYW50U3VwZXJpb3JzLnB1c2goX3NwYWNlX3VzZXIubWFuYWdlcilcblxuXHRcdHJldHVybiBhcHBsaWNhbnRTdXBlcmlvcnMiLCIgICAgICAgICAgICAgICAgICAgICAgIFxuXG5nZXRIYW5kbGVyc01hbmFnZXIgPSB7fTtcblxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2Vyc0FuZFJvbGVzID0gZnVuY3Rpb24odXNlcl9pZHMsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgYXBwcm92ZV91c2VycztcbiAgYXBwcm92ZV91c2VycyA9IG5ldyBBcnJheTtcbiAgXy5lYWNoKHVzZXJfaWRzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgdmFyIHVzZXJzO1xuICAgIGlmIChkYi51c2Vycy5maW5kKHtcbiAgICAgIF9pZDogdXNlcl9pZFxuICAgIH0pLmNvdW50KCkgPiAwKSB7XG4gICAgICB1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKHVzZXJfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCk7XG4gICAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gYXBwcm92ZV91c2VycyA9IGFwcHJvdmVfdXNlcnMuY29uY2F0KHVzZXJzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJ1c2VyX2lk5LiN5ZCI5rOV5LiN5ZCI5rOVXCIpO1xuICAgIH1cbiAgfSk7XG4gIGFwcHJvdmVfdXNlcnMgPSBfLnVuaXEoYXBwcm92ZV91c2Vycyk7XG4gIHJldHVybiBhcHByb3ZlX3VzZXJzO1xufTtcblxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMgPSBmdW5jdGlvbih1c2VyX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpIHtcbiAgdmFyIHVzZXJfaWRzO1xuICB1c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgXy5lYWNoKHJvbGVfaWRzLCBmdW5jdGlvbihyb2xlX2lkKSB7XG4gICAgdmFyIHVzZXJzO1xuICAgIGlmIChkYi5mbG93X3JvbGVzLmZpbmQoe1xuICAgICAgX2lkOiByb2xlX2lkXG4gICAgfSkuY291bnQoKSA+IDApIHtcbiAgICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZSh1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZCk7XG4gICAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQodXNlcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInJvbGVfaWTlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgfVxuICB9KTtcbiAgaWYgKHVzZXJfaWRzLmxlbmd0aCA+IDApIHtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2udXNlcl9pZOWSjHJvbGVfaWRz5rKh5p+l5Yiw5a+55bqU55qE5aSE55CG5Lq6XCIpO1xuICB9XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlID0gZnVuY3Rpb24odXNlcl9pZCwgcm9sZV9pZCwgc3BhY2VfaWQpIHtcbiAgdmFyIG9yZ3MsIHVzZXJfaWRzO1xuICBvcmdzID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgdXNlcnM6IHVzZXJfaWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxXG4gICAgfVxuICB9KS5mZXRjaCgpO1xuICB1c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgXy5lYWNoKG9yZ3MsIGZ1bmN0aW9uKG9yZykge1xuICAgIHZhciB1c2VycztcbiAgICB1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZShvcmcuX2lkLCByb2xlX2lkLCBzcGFjZV9pZCk7XG4gICAgaWYgKHVzZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgfVxuICB9KTtcbiAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICByZXR1cm4gdXNlcl9pZHM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyA9IGZ1bmN0aW9uKG9yZ19pZHMsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgdXNlcl9pZHM7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgdmFyIHVzZXJzO1xuICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlcyhvcmdfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCk7XG4gICAgaWYgKHVzZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgfVxuICB9KTtcbiAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICByZXR1cm4gdXNlcl9pZHM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGVzID0gZnVuY3Rpb24ob3JnX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpIHtcbiAgdmFyIHVzZXJfaWRzO1xuICB1c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgXy5lYWNoKHJvbGVfaWRzLCBmdW5jdGlvbihyb2xlX2lkKSB7XG4gICAgdmFyIHVzZXJzO1xuICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpO1xuICAgIGlmICh1c2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQodXNlcnMpO1xuICAgIH1cbiAgfSk7XG4gIGlmICh1c2VyX2lkcy5sZW5ndGggPiAwKSB7XG4gICAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICAgIHJldHVybiB1c2VyX2lkcztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuagueaNrm9yZ19pZOWSjHJvbGVfaWRz5rKh5p+l5Yiw5a+55bqU55qE5aSE55CG5Lq6XCIpO1xuICB9XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUgPSBmdW5jdGlvbihvcmdfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKSB7XG4gIHZhciBvcmcsIHBhcmVudHMsIHBvc2l0aW9ucywgdXNlcl9pZHM7XG4gIG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7XG4gICAgX2lkOiBvcmdfaWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgcGFyZW50czogMVxuICAgIH1cbiAgfSk7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgb3JnOiBvcmdfaWQsXG4gICAgcm9sZTogcm9sZV9pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICB1c2VyczogMVxuICAgIH1cbiAgfSkuZmV0Y2goKTtcbiAgXy5lYWNoKHBvc2l0aW9ucywgZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICByZXR1cm4gdXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQocG9zaXRpb24udXNlcnMpO1xuICB9KTtcbiAgaWYgKHVzZXJfaWRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHBhcmVudHMgPSBvcmcucGFyZW50cztcbiAgICBfLmVhY2gocGFyZW50cywgZnVuY3Rpb24ocGFyZW50X2lkKSB7XG4gICAgICBwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICBvcmc6IHBhcmVudF9pZCxcbiAgICAgICAgcm9sZTogcm9sZV9pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB1c2VyczogMVxuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgICAgaWYgKHBvc2l0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBfLmVhY2gocG9zaXRpb25zLCBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2Vycyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgcmV0dXJuIHVzZXJfaWRzO1xufTtcblxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzID0gZnVuY3Rpb24oaW5zdGFuY2VfaWQsIHN0ZXBfaWQpIHtcbiAgdmFyIF9hcHByb3ZlLCBfc3BhY2VfdXNlciwgX3RyYWNlLCBhcHBsaWNhbnQsIGFwcGxpY2FudFN1cGVyaW9ycywgYXBwcm92ZUhyUm9sZUlkcywgYXBwcm92ZV91c2VycywgYXBwcm92ZXJfb3JnX2ZpZWxkLCBhcHByb3Zlcl9vcmdfaWRzLCBhcHByb3Zlcl9zdGVwLCBhcHByb3Zlcl91c2VyX2ZpZWxkLCBhcHByb3Zlcl91c2VyX2lkcywgY3VycmVudCwgY3VycmVudF9mbG93LCBjdXJyZW50X2Zsb3dfdmVyc2lvbiwgY3VycmVudF9mb3JtLCBjdXJyZW50X3N0ZXAsIGN1cnJlbnRfc3RlcHMsIGRlYWxfdHlwZSwgZmllbGRfY29kZSwgZmluaXNoZWRfdHJhY2VzLCBmbG93X2lkLCBmbG93X3JldiwgZm9ybSwgZm9ybV9maWVsZHMsIGZvcm1faWQsIGZvcm1fcmV2LCBoYW5kbGVycywgaW5zdGFuY2UsIG1heF9zdGFydERhdGVfdHJhY2UsIG5ld19hcHByb3Zlcl91c2VyX2lkcywgbmV3X29yZ191c2VyX2lkcywgbmV3ZXN0X3ZhbHVlcywgbmV4dF9zdGVwX3VzZXJzLCBvcmdfaWRzLCBvcmdfaWRzX25hbWVzLCBvcmdfdXNlcl9pZHMsIHNwYWNlX2lkLCBzcGFjZV91c2VyX2NvdW50LCBzdWJtaXR0ZXIsIHN1Ym1pdHRlcl91c2VyX2NvdW50LCB1bmZpbmlzaGVkX3RyYWNlLCB1c2VyX2lkcywgdXNlcl9pZHNfbmFtZXMsIHVzZXJzLCB2YWxpZF9hcHByb3Zlcl9vcmdfaWRzO1xuICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKTtcbiAgaWYgKGluc3RhbmNlLnN0ZXBfYXBwcm92ZSAmJiAhXy5pc0VtcHR5KGluc3RhbmNlLnN0ZXBfYXBwcm92ZVtzdGVwX2lkICsgXCJfb3B0aW9uc1wiXSkpIHtcbiAgICByZXR1cm4gaW5zdGFuY2Uuc3RlcF9hcHByb3ZlW3N0ZXBfaWQgKyBcIl9vcHRpb25zXCJdO1xuICB9XG4gIGFwcHJvdmVfdXNlcnMgPSBuZXcgQXJyYXk7XG4gIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xuICBmbG93X3JldiA9IGluc3RhbmNlLmZsb3dfdmVyc2lvbjtcbiAgY3VycmVudF9mbG93ID0gZGIuZmxvd3MuZmluZE9uZShmbG93X2lkKTtcbiAgY3VycmVudF9zdGVwID0gbnVsbDtcbiAgY3VycmVudF9zdGVwcyA9IG5ldyBBcnJheTtcbiAgaWYgKGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCA9PT0gZmxvd19yZXYpIHtcbiAgICBjdXJyZW50X3N0ZXBzID0gY3VycmVudF9mbG93LmN1cnJlbnQuc3RlcHM7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudCA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIGZ1bmN0aW9uKGhpc3RvcnkpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5Ll9pZCA9PT0gZmxvd19yZXY7XG4gICAgfSk7XG4gICAgY3VycmVudF9zdGVwcyA9IGN1cnJlbnQuc3RlcHM7XG4gIH1cbiAgY3VycmVudF9zdGVwID0gXy5maW5kKGN1cnJlbnRfc3RlcHMsIGZ1bmN0aW9uKHN0ZXApIHtcbiAgICByZXR1cm4gc3RlcC5faWQgPT09IHN0ZXBfaWQ7XG4gIH0pO1xuICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJjb25kaXRpb25cIikge1xuICAgIHVuZmluaXNoZWRfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0cmFjZSkge1xuICAgICAgcmV0dXJuIHRyYWNlLmlzX2ZpbmlzaGVkID09PSBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IEFycmF5KHVuZmluaXNoZWRfdHJhY2UuYXBwcm92ZXNbMF0udXNlcik7XG4gIH1cbiAgaWYgKGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgPT09IFwic3RhcnRcIikge1xuICAgIGhhbmRsZXJzID0gbmV3IEFycmF5O1xuICAgIGhhbmRsZXJzLnB1c2goaW5zdGFuY2UuYXBwbGljYW50KTtcbiAgICBoYW5kbGVycy5wdXNoKGluc3RhbmNlLnN1Ym1pdHRlcik7XG4gICAgaGFuZGxlcnMgPSBfLnVuaXEoaGFuZGxlcnMpO1xuICAgIHJldHVybiBoYW5kbGVycztcbiAgfVxuICBkZWFsX3R5cGUgPSBjdXJyZW50X3N0ZXAuZGVhbF90eXBlO1xuICB1c2VycyA9IG5ldyBBcnJheTtcbiAgaWYgKGRlYWxfdHlwZSA9PT0gXCJhcHBsaWNhbnRSb2xlXCIpIHtcbiAgICBhcHBsaWNhbnQgPSBpbnN0YW5jZS5hcHBsaWNhbnQ7XG4gICAgaWYgKGFwcGxpY2FudCkge1xuICAgICAgc3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IGFwcGxpY2FudFxuICAgICAgfSkuY291bnQoKTtcbiAgICAgIGlmIChzcGFjZV91c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmNc3BhY2VcIik7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzICYmIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGZ1bmN0aW9uKGFwcHJvdmVyX3JvbGUpIHtcbiAgICAgICAgICB2YXIgcm9sZV9jb3VudDtcbiAgICAgICAgICByb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICAgIF9pZDogYXBwcm92ZXJfcm9sZVxuICAgICAgICAgIH0pLmNvdW50KCk7XG4gICAgICAgICAgaWYgKHJvbGVfY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi6KeS6Imy5bey57uP6KKr5Yig6ZmkXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhhcHBsaWNhbnQsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwiSW5zdGFuY2XnmoTmj5DkuqTkurrkuLrnqbpcIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJoclJvbGVcIikge1xuICAgIGFwcHJvdmVIclJvbGVJZHMgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfaHJfcm9sZXM7XG4gICAgaWYgKGFwcHJvdmVIclJvbGVJZHMpIHtcbiAgICAgIHJldHVybiBfLnBsdWNrKFdvcmtmbG93TWFuYWdlci5nZXRIclJvbGVzVXNlcnMoc3BhY2VfaWQsIGFwcHJvdmVIclJvbGVJZHMpLCAndXNlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuinkuiJsuacquaMh+WumlwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcImFwcGxpY2FudFwiKSB7XG4gICAgYXBwbGljYW50ID0gaW5zdGFuY2UuYXBwbGljYW50O1xuICAgIHNwYWNlX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIHVzZXI6IGFwcGxpY2FudFxuICAgIH0pLmNvdW50KCk7XG4gICAgaWYgKHNwYWNlX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmNc3BhY2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXkoYXBwbGljYW50KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcIm9yZ0ZpZWxkUm9sZVwiKSB7XG4gICAgZm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtO1xuICAgIGZvcm1fcmV2ID0gbnVsbDtcbiAgICBpZiAoZmxvd19yZXYgPT09IGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCkge1xuICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oY3VycmVudF9mbG93X2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCA9PT0gZmxvd19yZXY7XG4gICAgICB9KTtcbiAgICAgIGlmIChjdXJyZW50X2Zsb3dfdmVyc2lvbikge1xuICAgICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZCk7XG4gICAgY3VycmVudF9mb3JtID0gbnVsbDtcbiAgICBpZiAoZm9ybV9yZXYgPT09IGZvcm0uY3VycmVudC5faWQpIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIGZ1bmN0aW9uKGZvcm1faGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCA9PT0gZm9ybV9yZXY7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZXJfb3JnX2ZpZWxkID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX29yZ19maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX29yZ19maWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICBvcmdfaWRzID0gbmV3IEFycmF5O1xuICAgIG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgb3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcmdfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIF8uZWFjaChvcmdfaWRzX25hbWVzLCBmdW5jdGlvbihvcmcpIHtcbiAgICAgIHZhciBjaGVja19vcmdfY291bnQ7XG4gICAgICBjaGVja19vcmdfY291bnQgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IG9yZ1tcImlkXCJdXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX29yZ19jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIue7hOe7h0lE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yZ19pZHMucHVzaChvcmdbXCJpZFwiXSk7XG4gICAgfSk7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcyAmJiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICB2YXIgcm9sZV9jb3VudDtcbiAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgIH0pLmNvdW50KCk7XG4gICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyhvcmdfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJvcmdGaWVsZFwiKSB7XG4gICAgZm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtO1xuICAgIGZvcm1fcmV2ID0gbnVsbDtcbiAgICBpZiAoZmxvd19yZXYgPT09IGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCkge1xuICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oY3VycmVudF9mbG93X2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCA9PT0gZmxvd19yZXY7XG4gICAgICB9KTtcbiAgICAgIGlmIChjdXJyZW50X2Zsb3dfdmVyc2lvbikge1xuICAgICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZCk7XG4gICAgY3VycmVudF9mb3JtID0gbnVsbDtcbiAgICBpZiAoZm9ybV9yZXYgPT09IGZvcm0uY3VycmVudC5faWQpIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIGZ1bmN0aW9uKGZvcm1faGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCA9PT0gZm9ybV9yZXY7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZXJfb3JnX2ZpZWxkID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX29yZ19maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX29yZ19maWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICBvcmdfaWRzID0gbmV3IEFycmF5O1xuICAgIG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgb3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcmdfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIF8uZWFjaChvcmdfaWRzX25hbWVzLCBmdW5jdGlvbihvcmcpIHtcbiAgICAgIHZhciBjaGVja19vcmdfY291bnQ7XG4gICAgICBjaGVja19vcmdfY291bnQgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IG9yZ1tcImlkXCJdXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX29yZ19jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIue7hOe7h0lE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yZ19pZHMucHVzaChvcmdbXCJpZFwiXSk7XG4gICAgfSk7XG4gICAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKG9yZ19pZHMsIGZ1bmN0aW9uKG9yZ19pZCkge1xuICAgICAgdmFyIGNoZWNrX29yZ3MsIG9yZywgb3JnX2NoaWxkcmVuLCBvcmdfdXNlcnM7XG4gICAgICBvcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IG9yZ19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB1c2VyczogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG9yZ19jaGlsZHJlbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgcGFyZW50czogb3JnX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBvcmdfY2hpbGRyZW4udW5zaGlmdChvcmcpO1xuICAgICAgY2hlY2tfb3JncyA9IG9yZ19jaGlsZHJlbjtcbiAgICAgIG9yZ191c2VycyA9IG5ldyBBcnJheTtcbiAgICAgIF8uZWFjaChjaGVja19vcmdzLCBmdW5jdGlvbihjaGVja19vcmdfdXNlcikge1xuICAgICAgICBpZiAoY2hlY2tfb3JnX3VzZXIudXNlcnMpIHtcbiAgICAgICAgICBfLmVhY2goY2hlY2tfb3JnX3VzZXIudXNlcnMsIGZ1bmN0aW9uKG9yZ191c2VyKSB7XG4gICAgICAgICAgICBpZiAoZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgICAgICAgdXNlcjogb3JnX3VzZXJcbiAgICAgICAgICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJzcGFjZeS4i+S4jeWtmOWcqOatpHVzZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQoY2hlY2tfb3JnX3VzZXIudXNlcnMpO1xuICAgICAgICByZXR1cm4gb3JnX3VzZXJzID0gb3JnX3VzZXJzLmNvbmNhdChjaGVja19vcmdfdXNlci51c2Vycyk7XG4gICAgICB9KTtcbiAgICAgIGlmIChvcmdfdXNlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHXCIgKyBvcmdfaWQgKyBcIuS4jeWtmOWcqOWkhOeQhuS6ulwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJ1c2VyRmllbGRSb2xlXCIpIHtcbiAgICBmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm07XG4gICAgZm9ybV9yZXYgPSBudWxsO1xuICAgIGlmIChmbG93X3JldiA9PT0gY3VycmVudF9mbG93LmN1cnJlbnQuX2lkKSB7XG4gICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihjdXJyZW50X2Zsb3dfaGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICAgIH0pO1xuICAgICAgaWYgKGN1cnJlbnRfZmxvd192ZXJzaW9uKSB7XG4gICAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKTtcbiAgICBjdXJyZW50X2Zvcm0gPSBudWxsO1xuICAgIGlmIChmb3JtX3JldiA9PT0gZm9ybS5jdXJyZW50Ll9pZCkge1xuICAgICAgY3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgZnVuY3Rpb24oZm9ybV9oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBmb3JtX2hpc3RvcnkuX2lkID09PSBmb3JtX3JldjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHByb3Zlcl91c2VyX2ZpZWxkID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX3VzZXJfZmllbGQ7XG4gICAgZm9ybV9maWVsZHMgPSBjdXJyZW50X2Zvcm0uZmllbGRzO1xuICAgIGZpZWxkX2NvZGUgPSBudWxsO1xuICAgIF8uZWFjaChmb3JtX2ZpZWxkcywgZnVuY3Rpb24oZm9ybV9maWVsZCkge1xuICAgICAgaWYgKGZvcm1fZmllbGQuX2lkID09PSBhcHByb3Zlcl91c2VyX2ZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5ld2VzdF92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgIHVzZXJfaWRzX25hbWVzID0gbmV3IEFycmF5O1xuICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKSB7XG4gICAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHVzZXJfaWRzX25hbWVzID0gbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZXJfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaCh1c2VyX2lkc19uYW1lcywgZnVuY3Rpb24odXNlcikge1xuICAgICAgdmFyIGNoZWNrX3VzZXJfY291bnQ7XG4gICAgICBjaGVja191c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogdXNlcltcImlkXCJdXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkurrlkZhJROS4jeWQiOazlVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1c2VyX2lkcy5wdXNoKHVzZXJbXCJpZFwiXSk7XG4gICAgfSk7XG4gICAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICAgIGlmIChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgJiYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGZ1bmN0aW9uKGFwcHJvdmVyX3JvbGUpIHtcbiAgICAgICAgdmFyIHJvbGVfY291bnQ7XG4gICAgICAgIHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoe1xuICAgICAgICAgIF9pZDogYXBwcm92ZXJfcm9sZVxuICAgICAgICB9KS5jb3VudCgpO1xuICAgICAgICBpZiAocm9sZV9jb3VudCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2Vyc0FuZFJvbGVzKHVzZXJfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJ1c2VyRmllbGRcIikge1xuICAgIGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybTtcbiAgICBmb3JtX3JldiA9IG51bGw7XG4gICAgaWYgKGZsb3dfcmV2ID09PSBjdXJyZW50X2Zsb3cuY3VycmVudC5faWQpIHtcbiAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIGZ1bmN0aW9uKGN1cnJlbnRfZmxvd19oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgPT09IGZsb3dfcmV2O1xuICAgICAgfSk7XG4gICAgICBpZiAoY3VycmVudF9mbG93X3ZlcnNpb24pIHtcbiAgICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb247XG4gICAgICB9XG4gICAgfVxuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpO1xuICAgIGN1cnJlbnRfZm9ybSA9IG51bGw7XG4gICAgaWYgKGZvcm1fcmV2ID09PSBmb3JtLmN1cnJlbnQuX2lkKSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCBmdW5jdGlvbihmb3JtX2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1faGlzdG9yeS5faWQgPT09IGZvcm1fcmV2O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGFwcHJvdmVyX3VzZXJfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcl9maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX3VzZXJfZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSk7XG4gICAgdXNlcl9pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKHVzZXJfaWRzX25hbWVzLCBmdW5jdGlvbih1c2VyKSB7XG4gICAgICB2YXIgY2hlY2tfdXNlcl9jb3VudDtcbiAgICAgIGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiB1c2VyW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS6uuWRmElE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKTtcbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJzcGVjaWZ5U3RlcFJvbGVcIikge1xuICAgIGFwcHJvdmVyX3N0ZXAgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfc3RlcDtcbiAgICBmaW5pc2hlZF90cmFjZXMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgIGlmICh0cmFjZS5zdGVwID09PSBhcHByb3Zlcl9zdGVwKSB7XG4gICAgICAgIHJldHVybiBmaW5pc2hlZF90cmFjZXMucHVzaCh0cmFjZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbWF4X3N0YXJ0RGF0ZV90cmFjZSA9IF8ubWF4KGZpbmlzaGVkX3RyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQuc3RhcnRfZGF0ZTtcbiAgICB9KTtcbiAgICBhcHByb3ZlX3VzZXJzID0gXy5wbHVjayhtYXhfc3RhcnREYXRlX3RyYWNlLmFwcHJvdmVzLCBcInVzZXJcIik7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcykge1xuICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICB2YXIgcm9sZV9jb3VudDtcbiAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgIH0pLmNvdW50KCk7XG4gICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBfLmVhY2goYXBwcm92ZV91c2VycywgZnVuY3Rpb24oYXBwcm92ZV91c2VyKSB7XG4gICAgICBpZiAoZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwcm92ZV91c2VyXG4gICAgICB9KS5jb3VudCgpID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oyH5a6a5q2l6aqk55qE5aSE55CG5Lq65bey57uP5Y+Y5pu0XCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMoYXBwcm92ZV91c2VycywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZCk7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlTdGVwVXNlclwiKSB7XG4gICAgYXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwO1xuICAgIGZpbmlzaGVkX3RyYWNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0cmFjZSkge1xuICAgICAgaWYgKHRyYWNlLnN0ZXAgPT09IGFwcHJvdmVyX3N0ZXApIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtYXhfc3RhcnREYXRlX3RyYWNlID0gXy5tYXgoZmluaXNoZWRfdHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5zdGFydF9kYXRlO1xuICAgIH0pO1xuICAgIGFwcHJvdmVfdXNlcnMgPSBfLnBsdWNrKG1heF9zdGFydERhdGVfdHJhY2UuYXBwcm92ZXMsIFwidXNlclwiKTtcbiAgICBfLmVhY2goYXBwcm92ZV91c2VycywgZnVuY3Rpb24oYXBwcm92ZV91c2VyKSB7XG4gICAgICB2YXIgY2hlY2tfYXBwcm92ZV91c2VyX2NvdW50O1xuICAgICAgY2hlY2tfYXBwcm92ZV91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwcm92ZV91c2VyXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaMh+WumuatpemqpOeahOWkhOeQhuS6uuW3sue7j+WPmOabtFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhcHByb3ZlX3VzZXJzID0gXy51bmlxKGFwcHJvdmVfdXNlcnMpO1xuICAgIHJldHVybiBhcHByb3ZlX3VzZXJzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJzdWJtaXR0ZXJSb2xlXCIpIHtcbiAgICBzdWJtaXR0ZXIgPSBpbnN0YW5jZS5zdWJtaXR0ZXI7XG4gICAgaWYgKCFzdWJtaXR0ZXIpIHtcbiAgICAgIHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogc3VibWl0dGVyXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHN1Ym1pdHRlcl91c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmN5bel5L2c5Yy6XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcyAmJiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGZ1bmN0aW9uKGFwcHJvdmVyX3JvbGUpIHtcbiAgICAgICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgICAgIF9pZDogYXBwcm92ZXJfcm9sZVxuICAgICAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMoc3VibWl0dGVyLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIHNwYWNlX2lkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUs+ivt+WNleeahOaPkOS6pOS6uuS4uuepulwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInN1Ym1pdHRlclwiKSB7XG4gICAgc3VibWl0dGVyID0gaW5zdGFuY2Uuc3VibWl0dGVyO1xuICAgIHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICB1c2VyOiBzdWJtaXR0ZXJcbiAgICB9KS5jb3VudCgpO1xuICAgIGlmIChzdWJtaXR0ZXJfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXkoc3VibWl0dGVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlPcmdcIikge1xuICAgIGFwcHJvdmVyX29yZ19pZHMgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JncztcbiAgICBpZiAoIWFwcHJvdmVyX29yZ19pZHMgfHwgYXBwcm92ZXJfb3JnX2lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5a6a5LmJ55So5LqO5p+l5om+5LiL5LiA5q2l5aSE55CG5Lq655qE6YOo6Zeo77yM6K+36IGU57O7566h55CG5ZGY6LCD5p+l5rWB56iL5Zu+55qE6YWN572u5piv5ZCm5q2j56GuXCIpO1xuICAgIH1cbiAgICB2YWxpZF9hcHByb3Zlcl9vcmdfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChhcHByb3Zlcl9vcmdfaWRzLCBmdW5jdGlvbihhcHByb3Zlcl9vcmdfaWQpIHtcbiAgICAgIGlmIChkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IGFwcHJvdmVyX29yZ19pZFxuICAgICAgfSkuY291bnQoKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkX2FwcHJvdmVyX29yZ19pZHMudW5zaGlmdChhcHByb3Zlcl9vcmdfaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9yZ191c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2godmFsaWRfYXBwcm92ZXJfb3JnX2lkcywgZnVuY3Rpb24odmFsaWRfYXBwcm92ZXJfb3JnX2lkKSB7XG4gICAgICB2YXIgY2hpbGRfb3JncywgdmFsaWRfYXBwcm92ZXJfb3JnO1xuICAgICAgdmFsaWRfYXBwcm92ZXJfb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHtcbiAgICAgICAgX2lkOiB2YWxpZF9hcHByb3Zlcl9vcmdfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdXNlcnM6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAodmFsaWRfYXBwcm92ZXJfb3JnLnVzZXJzKSB7XG4gICAgICAgIG9yZ191c2VyX2lkcyA9IG9yZ191c2VyX2lkcy5jb25jYXQodmFsaWRfYXBwcm92ZXJfb3JnLnVzZXJzKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkX29yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHBhcmVudHM6IHZhbGlkX2FwcHJvdmVyX29yZ19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB1c2VyczogMVxuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgICAgcmV0dXJuIF8uZWFjaChjaGlsZF9vcmdzLCBmdW5jdGlvbihjaGlsZF9vcmcpIHtcbiAgICAgICAgaWYgKGNoaWxkX29yZy51c2Vycykge1xuICAgICAgICAgIHJldHVybiBvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KGNoaWxkX29yZy51c2Vycyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9yZ191c2VyX2lkcyA9IF8udW5pcShvcmdfdXNlcl9pZHMpO1xuICAgIG5ld19vcmdfdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKG9yZ191c2VyX2lkcywgZnVuY3Rpb24ob3JnX3VzZXJfaWQpIHtcbiAgICAgIHZhciBzcGFjZV91c2VyX2luZm9fY291bnQ7XG4gICAgICBzcGFjZV91c2VyX2luZm9fY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBvcmdfdXNlcl9pZFxuICAgICAgfSkuY291bnQoKTtcbiAgICAgIGlmIChzcGFjZV91c2VyX2luZm9fY291bnQgPiAwKSB7XG4gICAgICAgIHJldHVybiBuZXdfb3JnX3VzZXJfaWRzLnB1c2gob3JnX3VzZXJfaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXdfb3JnX3VzZXJfaWRzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJzcGVjaWZ5VXNlclwiKSB7XG4gICAgYXBwcm92ZXJfdXNlcl9pZHMgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcnM7XG4gICAgYXBwcm92ZXJfdXNlcl9pZHMgPSBfLnVuaXEoYXBwcm92ZXJfdXNlcl9pZHMpO1xuICAgIG5ld19hcHByb3Zlcl91c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goYXBwcm92ZXJfdXNlcl9pZHMsIGZ1bmN0aW9uKGFwcHJvdmVyX3VzZXJfaWQpIHtcbiAgICAgIHZhciBzcGFjZV91c2VyX2luZm9fY291bnQ7XG4gICAgICBzcGFjZV91c2VyX2luZm9fY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHByb3Zlcl91c2VyX2lkXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHNwYWNlX3VzZXJfaW5mb19jb3VudCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG5ld19hcHByb3Zlcl91c2VyX2lkcy5wdXNoKGFwcHJvdmVyX3VzZXJfaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXdfYXBwcm92ZXJfdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInBpY2t1cEF0UnVudGltZVwiKSB7XG4gICAgbmV4dF9zdGVwX3VzZXJzID0gbmV3IEFycmF5O1xuICAgIF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKF90cikge1xuICAgICAgcmV0dXJuIF90ci5pc19maW5pc2hlZCA9PT0gZmFsc2U7XG4gICAgfSk7XG4gICAgX2FwcHJvdmUgPSBfLmZpbmQoX3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbihfYXBwKSB7XG4gICAgICByZXR1cm4gX2FwcC5pc19maW5pc2hlZCA9PT0gZmFsc2UgJiYgX2FwcC50eXBlICE9PSAnY2MnO1xuICAgIH0pO1xuICAgIGlmIChfYXBwcm92ZS5uZXh0X3N0ZXBzKSB7XG4gICAgICBpZiAoX2FwcHJvdmUubmV4dF9zdGVwc1swXVtcInVzZXJzXCJdKSB7XG4gICAgICAgIG5leHRfc3RlcF91c2VycyA9IF9hcHByb3ZlLm5leHRfc3RlcHNbMF1bXCJ1c2Vyc1wiXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRfc3RlcF91c2VycztcbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwiYXBwbGljYW50U3VwZXJpb3JcIikge1xuICAgIGFwcGxpY2FudFN1cGVyaW9ycyA9IG5ldyBBcnJheTtcbiAgICBfc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgdXNlcjogaW5zdGFuY2UuYXBwbGljYW50XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG1hbmFnZXI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoX3NwYWNlX3VzZXIubWFuYWdlcikge1xuICAgICAgYXBwbGljYW50U3VwZXJpb3JzLnB1c2goX3NwYWNlX3VzZXIubWFuYWdlcik7XG4gICAgfVxuICAgIHJldHVybiBhcHBsaWNhbnRTdXBlcmlvcnM7XG4gIH1cbn07XG4iLCJwZXJtaXNzaW9uTWFuYWdlciA9IHt9XG5cbnBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyA9IChmbG93X2lkLCB1c2VyX2lkKSAtPlxuXHQjIOagueaNrjpmbG93X2lk5p+l5Yiw5a+55bqU55qEZmxvd1xuXHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGZsb3dfaWQpXG5cdHNwYWNlX2lkID0gZmxvdy5zcGFjZVxuXHQjIOagueaNrnNwYWNlX2lk5ZKMOnVzZXJfaWTliLBvcmdhbml6YXRpb25z6KGo5Lit5p+l5Yiw55So5oi35omA5bGe5omA5pyJ55qEb3JnX2lk77yI5YyF5ous5LiK57qn57uESUTvvIlcblx0b3JnX2lkcyA9IG5ldyBBcnJheVxuXHRvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcblx0XHRzcGFjZTogc3BhY2VfaWQsIHVzZXJzOiB1c2VyX2lkIH0sIHsgZmllbGRzOiB7IHBhcmVudHM6IDEgfSB9KS5mZXRjaCgpXG5cdF8uZWFjaChvcmdhbml6YXRpb25zLCAob3JnKSAtPlxuXHRcdG9yZ19pZHMucHVzaChvcmcuX2lkKVxuXHRcdGlmIG9yZy5wYXJlbnRzXG5cdFx0XHRfLmVhY2gob3JnLnBhcmVudHMsIChwYXJlbnRfaWQpIC0+XG5cdFx0XHRcdG9yZ19pZHMucHVzaChwYXJlbnRfaWQpXG5cdFx0XHQpXG5cdClcblx0b3JnX2lkcyA9IF8udW5pcShvcmdfaWRzKVxuXHRteV9wZXJtaXNzaW9ucyA9IG5ldyBBcnJheVxuXHRpZiBmbG93LnBlcm1zXG5cdFx0IyDliKTmlq1mbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pbuS4reaYr+WQpuWMheWQq+W9k+WJjeeUqOaIt++8jFxuXHRcdCMg5oiW6ICFZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZGTmmK/lkKbljIXlkKs05q2l5b6X5Yiw55qEb3JnX2lk5pWw57uE5Lit55qE5Lu75L2V5LiA5Liq77yMXG5cdFx0IyDoi6XmmK/vvIzliJnlnKjov5Tlm57nmoTmlbDnu4TkuK3liqDkuIphZGRcblx0XHRpZiBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGRcblx0XHRcdHVzZXJzX2Nhbl9hZGQgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGRcblx0XHRcdGlmIHVzZXJzX2Nhbl9hZGQuaW5jbHVkZXModXNlcl9pZClcblx0XHRcdFx0bXlfcGVybWlzc2lvbnMucHVzaChcImFkZFwiKVxuXG5cdFx0aWYgZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZGRcblx0XHRcdG9yZ3NfY2FuX2FkZCA9IGZsb3cucGVybXMub3Jnc19jYW5fYWRkXG5cdFx0XHRfLmVhY2gob3JnX2lkcywgKG9yZ19pZCkgLT5cblx0XHRcdFx0aWYgb3Jnc19jYW5fYWRkLmluY2x1ZGVzKG9yZ19pZClcblx0XHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRkXCIpXG5cdFx0XHQpXG5cdFx0IyDliKTmlq1mbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9y5Lit5piv5ZCm5YyF5ZCr5b2T5YmN55So5oi377yMXG5cdFx0IyDmiJbogIVmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3LmmK/lkKbljIXlkKs05q2l5b6X5Yiw55qEb3JnX2lk5pWw57uE5Lit55qE5Lu75L2V5LiA5Liq77yMXG5cdFx0IyDoi6XmmK/vvIzliJnlnKjov5Tlm57nmoTmlbDnu4TkuK3liqDkuIptb25pdG9yXG5cdFx0aWYgZmxvdy5wZXJtcy51c2Vyc19jYW5fbW9uaXRvclxuXHRcdFx0dXNlcnNfY2FuX21vbml0b3IgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9yXG5cdFx0XHRpZiB1c2Vyc19jYW5fbW9uaXRvci5pbmNsdWRlcyh1c2VyX2lkKVxuXHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwibW9uaXRvclwiKVxuXG5cdFx0aWYgZmxvdy5wZXJtcy5vcmdzX2Nhbl9tb25pdG9yXG5cdFx0XHRvcmdzX2Nhbl9tb25pdG9yID0gZmxvdy5wZXJtcy5vcmdzX2Nhbl9tb25pdG9yXG5cdFx0XHRfLmVhY2gob3JnX2lkcywgKG9yZ19pZCkgLT5cblx0XHRcdFx0aWYgb3Jnc19jYW5fbW9uaXRvci5pbmNsdWRlcyhvcmdfaWQpXG5cdFx0XHRcdFx0bXlfcGVybWlzc2lvbnMucHVzaChcIm1vbml0b3JcIilcblx0XHRcdClcblx0XHQjIOWIpOaWrWZsb3cucGVybXMudXNlcnNfY2FuX2FkbWlu5Lit5piv5ZCm5YyF5ZCr5b2T5YmN55So5oi377yMXG5cdFx0IyDmiJbogIVmbG93LnBlcm1zLm9yZ3NfY2FuX2FkbWlu5piv5ZCm5YyF5ZCrNOatpeW+l+WIsOeahG9yZ19pZOaVsOe7hOS4reeahOS7u+S9leS4gOS4qu+8jFxuXHRcdCMg6Iul5piv77yM5YiZ5Zyo6L+U5Zue55qE5pWw57uE5Lit5Yqg5LiKYWRtaW5cblx0XHRpZiBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pblxuXHRcdFx0dXNlcnNfY2FuX2FkbWluID0gZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRtaW5cblx0XHRcdGlmIHVzZXJzX2Nhbl9hZG1pbi5pbmNsdWRlcyh1c2VyX2lkKVxuXHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRtaW5cIilcblxuXHRcdGlmIGZsb3cucGVybXMub3Jnc19jYW5fYWRtaW5cblx0XHRcdG9yZ3NfY2FuX2FkbWluID0gZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZG1pblxuXHRcdFx0Xy5lYWNoKG9yZ19pZHMsIChvcmdfaWQpIC0+XG5cdFx0XHRcdGlmIG9yZ3NfY2FuX2FkbWluLmluY2x1ZGVzKG9yZ19pZClcblx0XHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRtaW5cIilcblx0XHRcdClcblxuXHRteV9wZXJtaXNzaW9ucyA9IF8udW5pcShteV9wZXJtaXNzaW9ucylcblx0cmV0dXJuIG15X3Blcm1pc3Npb25zIiwiICAgICAgICAgICAgICAgICAgICAgIFxuXG5wZXJtaXNzaW9uTWFuYWdlciA9IHt9O1xuXG5wZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMgPSBmdW5jdGlvbihmbG93X2lkLCB1c2VyX2lkKSB7XG4gIHZhciBmbG93LCBteV9wZXJtaXNzaW9ucywgb3JnX2lkcywgb3JnYW5pemF0aW9ucywgb3Jnc19jYW5fYWRkLCBvcmdzX2Nhbl9hZG1pbiwgb3Jnc19jYW5fbW9uaXRvciwgc3BhY2VfaWQsIHVzZXJzX2Nhbl9hZGQsIHVzZXJzX2Nhbl9hZG1pbiwgdXNlcnNfY2FuX21vbml0b3I7XG4gIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coZmxvd19pZCk7XG4gIHNwYWNlX2lkID0gZmxvdy5zcGFjZTtcbiAgb3JnX2lkcyA9IG5ldyBBcnJheTtcbiAgb3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgIHVzZXJzOiB1c2VyX2lkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHBhcmVudHM6IDFcbiAgICB9XG4gIH0pLmZldGNoKCk7XG4gIF8uZWFjaChvcmdhbml6YXRpb25zLCBmdW5jdGlvbihvcmcpIHtcbiAgICBvcmdfaWRzLnB1c2gob3JnLl9pZCk7XG4gICAgaWYgKG9yZy5wYXJlbnRzKSB7XG4gICAgICByZXR1cm4gXy5lYWNoKG9yZy5wYXJlbnRzLCBmdW5jdGlvbihwYXJlbnRfaWQpIHtcbiAgICAgICAgcmV0dXJuIG9yZ19pZHMucHVzaChwYXJlbnRfaWQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgb3JnX2lkcyA9IF8udW5pcShvcmdfaWRzKTtcbiAgbXlfcGVybWlzc2lvbnMgPSBuZXcgQXJyYXk7XG4gIGlmIChmbG93LnBlcm1zKSB7XG4gICAgaWYgKGZsb3cucGVybXMudXNlcnNfY2FuX2FkZCkge1xuICAgICAgdXNlcnNfY2FuX2FkZCA9IGZsb3cucGVybXMudXNlcnNfY2FuX2FkZDtcbiAgICAgIGlmICh1c2Vyc19jYW5fYWRkLmluY2x1ZGVzKHVzZXJfaWQpKSB7XG4gICAgICAgIG15X3Blcm1pc3Npb25zLnB1c2goXCJhZGRcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLm9yZ3NfY2FuX2FkZCkge1xuICAgICAgb3Jnc19jYW5fYWRkID0gZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZGQ7XG4gICAgICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgICAgIGlmIChvcmdzX2Nhbl9hZGQuaW5jbHVkZXMob3JnX2lkKSkge1xuICAgICAgICAgIHJldHVybiBteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGZsb3cucGVybXMudXNlcnNfY2FuX21vbml0b3IpIHtcbiAgICAgIHVzZXJzX2Nhbl9tb25pdG9yID0gZmxvdy5wZXJtcy51c2Vyc19jYW5fbW9uaXRvcjtcbiAgICAgIGlmICh1c2Vyc19jYW5fbW9uaXRvci5pbmNsdWRlcyh1c2VyX2lkKSkge1xuICAgICAgICBteV9wZXJtaXNzaW9ucy5wdXNoKFwibW9uaXRvclwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZsb3cucGVybXMub3Jnc19jYW5fbW9uaXRvcikge1xuICAgICAgb3Jnc19jYW5fbW9uaXRvciA9IGZsb3cucGVybXMub3Jnc19jYW5fbW9uaXRvcjtcbiAgICAgIF8uZWFjaChvcmdfaWRzLCBmdW5jdGlvbihvcmdfaWQpIHtcbiAgICAgICAgaWYgKG9yZ3NfY2FuX21vbml0b3IuaW5jbHVkZXMob3JnX2lkKSkge1xuICAgICAgICAgIHJldHVybiBteV9wZXJtaXNzaW9ucy5wdXNoKFwibW9uaXRvclwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pbikge1xuICAgICAgdXNlcnNfY2FuX2FkbWluID0gZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRtaW47XG4gICAgICBpZiAodXNlcnNfY2FuX2FkbWluLmluY2x1ZGVzKHVzZXJfaWQpKSB7XG4gICAgICAgIG15X3Blcm1pc3Npb25zLnB1c2goXCJhZG1pblwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZsb3cucGVybXMub3Jnc19jYW5fYWRtaW4pIHtcbiAgICAgIG9yZ3NfY2FuX2FkbWluID0gZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZG1pbjtcbiAgICAgIF8uZWFjaChvcmdfaWRzLCBmdW5jdGlvbihvcmdfaWQpIHtcbiAgICAgICAgaWYgKG9yZ3NfY2FuX2FkbWluLmluY2x1ZGVzKG9yZ19pZCkpIHtcbiAgICAgICAgICByZXR1cm4gbXlfcGVybWlzc2lvbnMucHVzaChcImFkbWluXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgbXlfcGVybWlzc2lvbnMgPSBfLnVuaXEobXlfcGVybWlzc2lvbnMpO1xuICByZXR1cm4gbXlfcGVybWlzc2lvbnM7XG59O1xuIiwiYXBwcm92ZU1hbmFnZXIgPSB7fVxuXG5cbiMjI1xuICAgIOWvueavlGFwcHJvdmVfdmFsdWVz5LiObGFzdF92YWx1ZXMg5a+56LGh77yMIOi/lOWbnmFwcHJvdmVfdmFsdWVz5q+UbGFzdF92YWx1ZXPlpJrlh7rnmoTmiJbogIXmlLnlj5jnmoTpg6jliIZcbiMjI1xuYXBwcm92ZU1hbmFnZXIuZ2V0Q2hhbmdlVmFsdWVzID0gKGxhc3RfdmFsdWVzLGFwcHJvdmVfdmFsdWVzKSAtPlxuXG5cdGNoYW5nZVZhbHVlcyA9IHt9XG5cblx0bGFzdF92YWx1ZXNfa2V5cyA9IF8ua2V5cyhsYXN0X3ZhbHVlcylcblxuXHRhcHByb3ZlX3ZhbHVlc19rZXlzID0gXy5rZXlzKGFwcHJvdmVfdmFsdWVzKVxuXG4jXHRjb25zb2xlLmxvZyhcImxhc3RfdmFsdWVzX2tleXNcIiwgbGFzdF92YWx1ZXNfa2V5cylcbiNcbiNcdGNvbnNvbGUubG9nKFwiYXBwcm92ZV92YWx1ZXNfa2V5c1wiLCBhcHByb3ZlX3ZhbHVlc19rZXlzKVxuXG5cdGFwcHJvdmVfdmFsdWVzX2tleXMuZm9yRWFjaCAoa2V5KS0+XG5cdFx0aWYgXy5jb250YWlucyhsYXN0X3ZhbHVlc19rZXlzLCBrZXkpXG5cdFx0XHRpZiAhXy5pc0VxdWFsKGxhc3RfdmFsdWVzW2tleV0sIGFwcHJvdmVfdmFsdWVzW2tleV0pXG5cdFx0XHRcdGNoYW5nZVZhbHVlc1trZXldID0gYXBwcm92ZV92YWx1ZXNba2V5XVxuXHRcdGVsc2Vcblx0XHRcdGlmIGFwcHJvdmVfdmFsdWVzW2tleV0gIT0gJydcbiNcdFx0XHRcdGNvbnNvbGUubG9nKGtleSxhcHByb3ZlX3ZhbHVlc1trZXldKVxuXHRcdFx0XHRjaGFuZ2VWYWx1ZXNba2V5XSA9IGFwcHJvdmVfdmFsdWVzW2tleV1cblxuXHRyZXR1cm4gY2hhbmdlVmFsdWVzXG4iLCIgICAgICAgICAgICAgICAgICAgXG5cbmFwcHJvdmVNYW5hZ2VyID0ge307XG5cblxuLypcbiAgICDlr7nmr5RhcHByb3ZlX3ZhbHVlc+S4jmxhc3RfdmFsdWVzIOWvueixoe+8jCDov5Tlm55hcHByb3ZlX3ZhbHVlc+avlGxhc3RfdmFsdWVz5aSa5Ye655qE5oiW6ICF5pS55Y+Y55qE6YOo5YiGXG4gKi9cblxuYXBwcm92ZU1hbmFnZXIuZ2V0Q2hhbmdlVmFsdWVzID0gZnVuY3Rpb24obGFzdF92YWx1ZXMsIGFwcHJvdmVfdmFsdWVzKSB7XG4gIHZhciBhcHByb3ZlX3ZhbHVlc19rZXlzLCBjaGFuZ2VWYWx1ZXMsIGxhc3RfdmFsdWVzX2tleXM7XG4gIGNoYW5nZVZhbHVlcyA9IHt9O1xuICBsYXN0X3ZhbHVlc19rZXlzID0gXy5rZXlzKGxhc3RfdmFsdWVzKTtcbiAgYXBwcm92ZV92YWx1ZXNfa2V5cyA9IF8ua2V5cyhhcHByb3ZlX3ZhbHVlcyk7XG4gIGFwcHJvdmVfdmFsdWVzX2tleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoXy5jb250YWlucyhsYXN0X3ZhbHVlc19rZXlzLCBrZXkpKSB7XG4gICAgICBpZiAoIV8uaXNFcXVhbChsYXN0X3ZhbHVlc1trZXldLCBhcHByb3ZlX3ZhbHVlc1trZXldKSkge1xuICAgICAgICByZXR1cm4gY2hhbmdlVmFsdWVzW2tleV0gPSBhcHByb3ZlX3ZhbHVlc1trZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXBwcm92ZV92YWx1ZXNba2V5XSAhPT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZVZhbHVlc1trZXldID0gYXBwcm92ZV92YWx1ZXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hhbmdlVmFsdWVzO1xufTtcbiIsImZsb3dNYW5hZ2VyID0ge31cblxuZmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcmllc0Zsb3dzID0gKHNwYWNlSWQsIGNhdGVnb3JpZUlkLCBmaWVsZHMpLT5cblxuXHRjYXRlZ29yaWVzRm9ybXMgPSBmb3JtTWFuYWdlci5nZXRDYXRlZ29yaWVzRm9ybXMoc3BhY2VJZCwgY2F0ZWdvcmllSWQsIHtfaWQ6IDF9KS5mZXRjaCgpXG5cblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe2Zvcm06IHskaW4gOiBjYXRlZ29yaWVzRm9ybXMuZ2V0UHJvcGVydHkoXCJfaWRcIil9fSlcblxuZmxvd01hbmFnZXIuZ2V0VW5DYXRlZ29yaWVzRmxvd3MgPSAoc3BhY2VJZCwgZmllbGRzKS0+XG5cblx0dW5DYXRlZ29yaWVzRm9ybXMgPSBmb3JtTWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGb3JtcyhzcGFjZUlkLCB7X2lkOiAxfSkuZmV0Y2goKVxuXG5cdHJldHVybiBkYi5mbG93cy5maW5kKHtmb3JtOiB7JGluIDogdW5DYXRlZ29yaWVzRm9ybXMuZ2V0UHJvcGVydHkoXCJfaWRcIil9fSlcblxuXG5cblxuXG5cblxuIiwiZm9ybU1hbmFnZXIgPSB7fVxuXG5mb3JtTWFuYWdlci5nZXRDYXRlZ29yaWVzRm9ybXMgPSAoc3BhY2VJZCwgY2F0ZWdvcmllSWQsIGZpZWxkcyktPlxuXHRpZiBmaWVsZHNcblx0XHRfZmllbGRzID0ge2ZpZWxkczogZmllbGRzfVxuXG5cdHJldHVybiBkYi5mb3Jtcy5maW5kKHtzcGFjZTogc3BhY2VJZCwgY2F0ZWdvcnk6IGNhdGVnb3JpZUlkLCBzdGF0ZTogXCJlbmFibGVkXCJ9LCBfZmllbGRzKVxuXG5mb3JtTWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGb3JtcyA9IChzcGFjZUlkLCBmaWVsZHMpIC0+XG5cdGlmIGZpZWxkc1xuXHRcdF9maWVsZHMgPSB7ZmllbGRzOiBmaWVsZHN9XG5cdHJldHVybiBkYi5mb3Jtcy5maW5kKHtzcGFjZTogc3BhY2VJZCwgY2F0ZWdvcnk6IHskaW46IFtudWxsLCBcIlwiXX0sIHN0YXRlOiBcImVuYWJsZWRcIn0sIF9maWVsZHMpXG4iLCIgICAgICAgICAgICAgICAgXG5cbmZvcm1NYW5hZ2VyID0ge307XG5cbmZvcm1NYW5hZ2VyLmdldENhdGVnb3JpZXNGb3JtcyA9IGZ1bmN0aW9uKHNwYWNlSWQsIGNhdGVnb3JpZUlkLCBmaWVsZHMpIHtcbiAgdmFyIF9maWVsZHM7XG4gIGlmIChmaWVsZHMpIHtcbiAgICBfZmllbGRzID0ge1xuICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICB9O1xuICB9XG4gIHJldHVybiBkYi5mb3Jtcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZCxcbiAgICBjYXRlZ29yeTogY2F0ZWdvcmllSWQsXG4gICAgc3RhdGU6IFwiZW5hYmxlZFwiXG4gIH0sIF9maWVsZHMpO1xufTtcblxuZm9ybU1hbmFnZXIuZ2V0VW5DYXRlZ29yaWVzRm9ybXMgPSBmdW5jdGlvbihzcGFjZUlkLCBmaWVsZHMpIHtcbiAgdmFyIF9maWVsZHM7XG4gIGlmIChmaWVsZHMpIHtcbiAgICBfZmllbGRzID0ge1xuICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICB9O1xuICB9XG4gIHJldHVybiBkYi5mb3Jtcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZCxcbiAgICBjYXRlZ29yeToge1xuICAgICAgJGluOiBbbnVsbCwgXCJcIl1cbiAgICB9LFxuICAgIHN0YXRlOiBcImVuYWJsZWRcIlxuICB9LCBfZmllbGRzKTtcbn07XG4iLCJzdGVwTWFuYWdlciA9IHt9XG5cbnN0ZXBNYW5hZ2VyLmFsbG93QmF0Y2ggPSAoc3RlcCktPlxuXHRyZXR1cm4gc3RlcC5hbGxvd0JhdGNoXG5cbnN0ZXBNYW5hZ2VyLmdldFN0ZXAgPSAoaW5zdGFuY2UsIGZsb3csIHN0ZXBfaWQpLT5cblx0Zmxvd19yZXYgPSBpbnN0YW5jZS5mbG93X3ZlcnNpb25cblx0aXNFeGlzdFN0ZXAgPSBudWxsXG5cdGlmIGZsb3cuY3VycmVudC5faWQgaXMgZmxvd19yZXZcblx0XHRpc0V4aXN0U3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIChzdGVwKS0+XG5cdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxuXHRcdClcblx0ZWxzZVxuXHRcdF8uZWFjaChmbG93Lmhpc3RvcnlzLCAoaGlzdG9yeSktPlxuXHRcdFx0aWYgaGlzdG9yeS5faWQgaXMgZmxvd19yZXZcblx0XHRcdFx0aXNFeGlzdFN0ZXAgPSBfLmZpbmQoaGlzdG9yeS5zdGVwcywgKHN0ZXApLT5cblx0XHRcdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxuXHRcdFx0XHQpXG5cdFx0KVxuXG5cdGlmIG5vdCBpc0V4aXN0U3RlcFxuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN6IO96I635Y+Wc3RlcFwiKVxuXG5cdHJldHVybiBpc0V4aXN0U3RlcCIsIiAgICAgICAgICAgICAgICBcblxuc3RlcE1hbmFnZXIgPSB7fTtcblxuc3RlcE1hbmFnZXIuYWxsb3dCYXRjaCA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIHN0ZXAuYWxsb3dCYXRjaDtcbn07XG5cbnN0ZXBNYW5hZ2VyLmdldFN0ZXAgPSBmdW5jdGlvbihpbnN0YW5jZSwgZmxvdywgc3RlcF9pZCkge1xuICB2YXIgZmxvd19yZXYsIGlzRXhpc3RTdGVwO1xuICBmbG93X3JldiA9IGluc3RhbmNlLmZsb3dfdmVyc2lvbjtcbiAgaXNFeGlzdFN0ZXAgPSBudWxsO1xuICBpZiAoZmxvdy5jdXJyZW50Ll9pZCA9PT0gZmxvd19yZXYpIHtcbiAgICBpc0V4aXN0U3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHJldHVybiBzdGVwLl9pZCA9PT0gc3RlcF9pZDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBfLmVhY2goZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oaGlzdG9yeSkge1xuICAgICAgaWYgKGhpc3RvcnkuX2lkID09PSBmbG93X3Jldikge1xuICAgICAgICByZXR1cm4gaXNFeGlzdFN0ZXAgPSBfLmZpbmQoaGlzdG9yeS5zdGVwcywgZnVuY3Rpb24oc3RlcCkge1xuICAgICAgICAgIHJldHVybiBzdGVwLl9pZCA9PT0gc3RlcF9pZDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFpc0V4aXN0U3RlcCkge1xuICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN6IO96I635Y+Wc3RlcFwiKTtcbiAgfVxuICByZXR1cm4gaXNFeGlzdFN0ZXA7XG59O1xuIiwiX2V2YWwgPSByZXF1aXJlKCdldmFsJylcblxuSW5zdGFuY2VNYW5hZ2VyID0ge31cblxubG9nZ2VyID0gbmV3IExvZ2dlciAnV29ya2Zsb3cgLT4gSW5zdGFuY2VNYW5hZ2VyJ1xuXG5JbnN0YW5jZU1hbmFnZXIuaGFuZGxlckluc3RhbmNlQnlGaWVsZE1hcCA9IChpbnMsIGZpZWxkX21hcCkgLT5cblx0cmVzID0gaW5zXG5cdGlmIGluc1xuXHRcdGlmICFmaWVsZF9tYXBcblxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGlucy5mbG93IH0sIHsgZmllbGRzOiB7IGZpZWxkX21hcDogMSB9IH0pXG5cblx0XHRcdGlmIGZsb3c/LmZpZWxkX21hcFxuXHRcdFx0XHRmaWVsZF9tYXAgPSBmbG93LmZpZWxkX21hcFxuXG5cdFx0aWYgZmllbGRfbWFwXG5cdFx0XHRjb250ZXh0ID0gXy5jbG9uZShpbnMpXG5cblx0XHRcdGNvbnRleHQuXyA9IF9cblxuXHRcdFx0c2NyaXB0ID0gXCJ2YXIgaW5zdGFuY2VzID0gI3tmaWVsZF9tYXB9OyBleHBvcnRzLmluc3RhbmNlcyA9IGluc3RhbmNlc1wiXG5cdFx0XHR0cnlcblx0XHRcdFx0cmVzID0gX2V2YWwoc2NyaXB0LCBcImhhbmRsZXJJbnN0YW5jZUJ5RmllbGRNYXBcIiwgY29udGV4dCwgZmFsc2UpLmluc3RhbmNlc1xuXHRcdFx0Y2F0Y2ggZVxuXHRcdFx0XHRyZXMgPSB7IF9lcnJvcjogZSB9XG5cdFx0XHRcdGxvZ2dlci5lcnJvciBlXG5cdHJldHVybiByZXNcblxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlID0gKGluc3RhbmNlLCBoYW5kbGVyKS0+XG5cblx0aWYgIWluc3RhbmNlIG9yICFpbnN0YW5jZS50cmFjZXMgb3IgaW5zdGFuY2UudHJhY2VzLmxlbmd0aCA8IDFcblx0XHRyZXR1cm5cblxuXHRjdXJyZW50VHJhY2VzID0gaW5zdGFuY2UudHJhY2VzLmZpbHRlclByb3BlcnR5KCdpc19maW5pc2hlZCcsIGZhbHNlKVxuXG5cdGlmIGN1cnJlbnRUcmFjZXMubGVuZ3RoXG5cdFx0Y3VycmVudEFwcHJvdmVzID0gY3VycmVudFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eSgnaXNfZmluaXNoZWQnLCBmYWxzZSkuZmlsdGVyUHJvcGVydHkoJ2hhbmRsZXInLCBoYW5kbGVyKVxuXHRcdGN1cnJlbnRBcHByb3ZlID0gaWYgY3VycmVudEFwcHJvdmVzLmxlbmd0aCA+IDAgdGhlbiBjdXJyZW50QXBwcm92ZXNbMF0gZWxzZSBudWxsXG5cblx0I+S8oOmYheeahGFwcHJvdmXov5Tlm57mnIDmlrDkuIDmnaFcblx0aWYgIWN1cnJlbnRBcHByb3ZlIG9yIGN1cnJlbnRBcHByb3ZlLnR5cGUgPT0gJ2NjJ1xuXHRcdCMg5b2T5YmN5piv5Lyg6ZiFXG5cdFx0Xy5lYWNoIGluc3RhbmNlLnRyYWNlcywgKHQpIC0+XG5cdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGEpIC0+XG5cdFx0XHRcdGlmIGEudHlwZSA9PSAnY2MnIGFuZCBhLnVzZXIgPT0gaGFuZGxlciBhbmQgYS5pc19maW5pc2hlZCA9PSBmYWxzZVxuXHRcdFx0XHRcdGN1cnJlbnRBcHByb3ZlID0gYVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdHJldHVyblxuXG5cdGlmICFjdXJyZW50QXBwcm92ZVxuXHRcdHJldHVyblxuXG5cdHJldHVybiBjdXJyZW50QXBwcm92ZVxuXG5JbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFRyYWNlID0gKGluc3RhbmNlLCB0cmFjZUlkKS0+XG5cdHJldHVybiBpbnN0YW5jZS50cmFjZXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZUlkKVxuXG5JbnN0YW5jZU1hbmFnZXIuZ2V0TXlBcHByb3ZlID0gKGluc3RhbmNlSWQsIHVzZXJJZCktPlxuXHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9KVxuXG5cdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdylcblxuXHRteV9hcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKGluc3RhbmNlLCB1c2VySWQpXG5cblx0aWYgbXlfYXBwcm92ZVxuXG4jXHRcdGxhbmcgPSBTdGVlZG9zLmxvY2FsZSh0aGF0LnVzZXJJZCwgdHJ1ZSlcblxuXHRcdHRyYWNlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRUcmFjZShpbnN0YW5jZSwgbXlfYXBwcm92ZS50cmFjZSlcblxuXHRcdHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHRyYWNlLnN0ZXApXG5cblx0XHRzdGVwX3R5cGUgPSBzdGVwLnN0ZXBfdHlwZVxuXG5cdFx0anVkZ2UgPSBpZiBzdGVwX3R5cGUgPT0gXCJzaWduXCIgdGhlbiBcImFwcHJvdmVkXCIgZWxzZSBcIlwiXG5cblx0XHRuZXh0U3RlcHMgPSB1dWZsb3dNYW5hZ2VyLmdldE5leHRTdGVwcyhpbnN0YW5jZSwgZmxvdywgc3RlcCwganVkZ2UpXG5cblx0XHRpZiBuZXh0U3RlcHMubGVuZ3RoID09IDFcblx0XHRcdGlmIHN0ZXBfdHlwZSA9PSBcInNpZ25cIiB8fCBzdGVwX3R5cGUgPT0gXCJjb3VudGVyU2lnblwiXG5cdFx0XHRcdG15X2FwcHJvdmUuanVkZ2UgPSAnYXBwcm92ZWQnXG5cdFx0XHRuZXh0X3VzZXJfaWRzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzKGluc3RhbmNlLl9pZCAsIG5leHRTdGVwc1swXSlcblx0XHRcdGlmICFuZXh0X3VzZXJfaWRzXG5cdFx0XHRcdG15X2FwcHJvdmUubmV4dF9zdGVwcyA9IFt7IHN0ZXA6IG5leHRTdGVwc1swXSwgdXNlcnM6IFtdIH1dXG5cdFx0XHRcdHJldHVybiBteV9hcHByb3ZlXG5cdFx0XHRpZiBuZXh0X3VzZXJfaWRzLmxlbmd0aCA9PSAxXG5cdFx0XHRcdG15X2FwcHJvdmUubmV4dF9zdGVwcyA9IFt7c3RlcDogbmV4dFN0ZXBzWzBdLCB1c2VyczogbmV4dF91c2VyX2lkc31dXG5cdFx0XHRcdHJldHVybiBteV9hcHByb3ZlXG4jXHRcdFx0ZWxzZVxuI1x0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgVEFQaTE4bi5fXygnd29ya2Zsb3dfZXJyb3JfbXVsdGlwbGVfbmV4dF9zdGVwX3VzZXJzJywge2luc25hbWU6IGluc3RhbmNlLm5hbWV9LCBsYW5nKSlcbiNcdFx0ZWxzZVxuI1x0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFRBUGkxOG4uX18oJ3dvcmtmbG93X2Vycm9yX211bHRpcGxlX25leHRfc3RlcCcsIHtpbnNuYW1lOiBpbnN0YW5jZS5uYW1lfSwgbGFuZykpXG5cblx0cmV0dXJuXG5cblxuSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzID0gKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzLCBpbmJveF91c2VyKS0+XG5cdF9iYXRjaF9pbnN0YW5jZXMgPSBuZXcgQXJyYXkoKVxuXG5cdHF1ZXJ5ID0ge3NwYWNlOiBzcGFjZSwgaW5ib3hfdXNlcnM6IGluYm94X3VzZXJ9XG5cblx0RklFTERTID0geyBuYW1lOiAxLCBhcHBsaWNhbnRfbmFtZTogMSwgc3VibWl0X2RhdGU6IDEsIGZsb3dfdmVyc2lvbjogMSwgXCJ0cmFjZXMuc3RlcFwiOiAxLCBmbG93OiAxLCBjdXJyZW50X3N0ZXBfbmFtZTogMSwgZmxvd19uYW1lOiAxIH1cblxuXHRpZiBjYXRlZ29yeUlkXG5cblx0XHRpZiBjYXRlZ29yeUlkID09ICctMSdcblx0XHRcdHVuQ2F0ZWdvcnlGbG93cyA9IGZsb3dNYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCB7X2lkOiAxfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKVxuXHRcdFx0cXVlcnkuZmxvdyA9IHskaW46IHVuQ2F0ZWdvcnlGbG93c31cblx0XHRlbHNlXG5cdFx0XHRjYXRlZ29yeUZsb3dzID0gZmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCBjYXRlZ29yeUlkLCB7X2lkOiAxfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKVxuXHRcdFx0cXVlcnkuZmxvdyA9IHskaW46IGNhdGVnb3J5Rmxvd3N9XG5cblx0aWYgZmxvd0lkc1xuXHRcdHF1ZXJ5LmZsb3cgPSB7JGluOiBmbG93SWRzfVxuXG4jXHRjb25zb2xlLmxvZyhcInF1ZXJ5XCIsIEpTT04uc3RyaW5naWZ5KHF1ZXJ5KSlcblxuXHRpbmJveF9pbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge2ZpZWxkczogRklFTERTLCBza2lwOiAwLCBsaW1pdDogMTAwfSlcblxuXHRpbmJveF9pbnN0YW5jZXMuZm9yRWFjaCAoaW5zKS0+XG5cdFx0Y3VycmVudFN0ZXBJZCA9IF8ubGFzdChpbnMudHJhY2VzKS5zdGVwICNUT0RPIOatpOS7o+eggeS4jemAgueUqOS8oOmYheaJueWkhOeQhlxuXG5cdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogaW5zLmZsb3d9KVxuXG5cdFx0Y3VycmVudFN0ZXAgPSBzdGVwTWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgY3VycmVudFN0ZXBJZClcblxuXHRcdG15QXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRNeUFwcHJvdmUoaW5zLl9pZCwgaW5ib3hfdXNlcilcblxuXHRcdGlmIHN0ZXBNYW5hZ2VyLmFsbG93QmF0Y2goY3VycmVudFN0ZXApICYmIG15QXBwcm92ZVxuXG5cdFx0XHRkZWxldGUgaW5zLmZsb3dfdmVyc2lvblxuXG5cdFx0XHRkZWxldGUgaW5zLnRyYWNlc1xuXG5cdFx0XHRkZWxldGUgaW5zLmZsb3dcblxuXHRcdFx0aW5zLmFwcHJvdmVfc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlXG5cblx0XHRcdF9iYXRjaF9pbnN0YW5jZXMucHVzaChpbnMpXG4jXHRcdGVsc2VcbiNcdFx0XHRjb25zb2xlLmxvZyhcIuaJuemHj+WuoeaJuS3lvILluLjmlbDmja5cIiwgaW5zLl9pZClcblxuXHRyZXR1cm4gX2JhdGNoX2luc3RhbmNlc1xuIiwidmFyIF9ldmFsLCBsb2dnZXI7ICAgICAgICAgICAgICAgICBcblxuX2V2YWwgPSByZXF1aXJlKCdldmFsJyk7XG5cbkluc3RhbmNlTWFuYWdlciA9IHt9O1xuXG5sb2dnZXIgPSBuZXcgTG9nZ2VyKCdXb3JrZmxvdyAtPiBJbnN0YW5jZU1hbmFnZXInKTtcblxuSW5zdGFuY2VNYW5hZ2VyLmhhbmRsZXJJbnN0YW5jZUJ5RmllbGRNYXAgPSBmdW5jdGlvbihpbnMsIGZpZWxkX21hcCkge1xuICB2YXIgY29udGV4dCwgZSwgZmxvdywgcmVzLCBzY3JpcHQ7XG4gIHJlcyA9IGlucztcbiAgaWYgKGlucykge1xuICAgIGlmICghZmllbGRfbWFwKSB7XG4gICAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICAgIF9pZDogaW5zLmZsb3dcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgZmllbGRfbWFwOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGZsb3cgIT0gbnVsbCA/IGZsb3cuZmllbGRfbWFwIDogdm9pZCAwKSB7XG4gICAgICAgIGZpZWxkX21hcCA9IGZsb3cuZmllbGRfbWFwO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmllbGRfbWFwKSB7XG4gICAgICBjb250ZXh0ID0gXy5jbG9uZShpbnMpO1xuICAgICAgY29udGV4dC5fID0gXztcbiAgICAgIHNjcmlwdCA9IFwidmFyIGluc3RhbmNlcyA9IFwiICsgZmllbGRfbWFwICsgXCI7IGV4cG9ydHMuaW5zdGFuY2VzID0gaW5zdGFuY2VzXCI7XG4gICAgICB0cnkge1xuICAgICAgICByZXMgPSBfZXZhbChzY3JpcHQsIFwiaGFuZGxlckluc3RhbmNlQnlGaWVsZE1hcFwiLCBjb250ZXh0LCBmYWxzZSkuaW5zdGFuY2VzO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICByZXMgPSB7XG4gICAgICAgICAgX2Vycm9yOiBlXG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5lcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbkluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZSA9IGZ1bmN0aW9uKGluc3RhbmNlLCBoYW5kbGVyKSB7XG4gIHZhciBjdXJyZW50QXBwcm92ZSwgY3VycmVudEFwcHJvdmVzLCBjdXJyZW50VHJhY2VzO1xuICBpZiAoIWluc3RhbmNlIHx8ICFpbnN0YW5jZS50cmFjZXMgfHwgaW5zdGFuY2UudHJhY2VzLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY3VycmVudFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eSgnaXNfZmluaXNoZWQnLCBmYWxzZSk7XG4gIGlmIChjdXJyZW50VHJhY2VzLmxlbmd0aCkge1xuICAgIGN1cnJlbnRBcHByb3ZlcyA9IGN1cnJlbnRUcmFjZXNbMF0uYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoJ2lzX2ZpbmlzaGVkJywgZmFsc2UpLmZpbHRlclByb3BlcnR5KCdoYW5kbGVyJywgaGFuZGxlcik7XG4gICAgY3VycmVudEFwcHJvdmUgPSBjdXJyZW50QXBwcm92ZXMubGVuZ3RoID4gMCA/IGN1cnJlbnRBcHByb3Zlc1swXSA6IG51bGw7XG4gIH1cbiAgaWYgKCFjdXJyZW50QXBwcm92ZSB8fCBjdXJyZW50QXBwcm92ZS50eXBlID09PSAnY2MnKSB7XG4gICAgXy5lYWNoKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgaWYgKGEudHlwZSA9PT0gJ2NjJyAmJiBhLnVzZXIgPT09IGhhbmRsZXIgJiYgYS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjdXJyZW50QXBwcm92ZSA9IGE7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGlmICghY3VycmVudEFwcHJvdmUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRBcHByb3ZlO1xufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRUcmFjZSA9IGZ1bmN0aW9uKGluc3RhbmNlLCB0cmFjZUlkKSB7XG4gIHJldHVybiBpbnN0YW5jZS50cmFjZXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZUlkKTtcbn07XG5cbkluc3RhbmNlTWFuYWdlci5nZXRNeUFwcHJvdmUgPSBmdW5jdGlvbihpbnN0YW5jZUlkLCB1c2VySWQpIHtcbiAgdmFyIGZsb3csIGluc3RhbmNlLCBqdWRnZSwgbXlfYXBwcm92ZSwgbmV4dFN0ZXBzLCBuZXh0X3VzZXJfaWRzLCBzdGVwLCBzdGVwX3R5cGUsIHRyYWNlO1xuICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICBfaWQ6IGluc3RhbmNlSWRcbiAgfSk7XG4gIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gIG15X2FwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoaW5zdGFuY2UsIHVzZXJJZCk7XG4gIGlmIChteV9hcHByb3ZlKSB7XG4gICAgdHJhY2UgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFRyYWNlKGluc3RhbmNlLCBteV9hcHByb3ZlLnRyYWNlKTtcbiAgICBzdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCB0cmFjZS5zdGVwKTtcbiAgICBzdGVwX3R5cGUgPSBzdGVwLnN0ZXBfdHlwZTtcbiAgICBqdWRnZSA9IHN0ZXBfdHlwZSA9PT0gXCJzaWduXCIgPyBcImFwcHJvdmVkXCIgOiBcIlwiO1xuICAgIG5leHRTdGVwcyA9IHV1Zmxvd01hbmFnZXIuZ2V0TmV4dFN0ZXBzKGluc3RhbmNlLCBmbG93LCBzdGVwLCBqdWRnZSk7XG4gICAgaWYgKG5leHRTdGVwcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChzdGVwX3R5cGUgPT09IFwic2lnblwiIHx8IHN0ZXBfdHlwZSA9PT0gXCJjb3VudGVyU2lnblwiKSB7XG4gICAgICAgIG15X2FwcHJvdmUuanVkZ2UgPSAnYXBwcm92ZWQnO1xuICAgICAgfVxuICAgICAgbmV4dF91c2VyX2lkcyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVycyhpbnN0YW5jZS5faWQsIG5leHRTdGVwc1swXSk7XG4gICAgICBpZiAoIW5leHRfdXNlcl9pZHMpIHtcbiAgICAgICAgbXlfYXBwcm92ZS5uZXh0X3N0ZXBzID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0ZXA6IG5leHRTdGVwc1swXSxcbiAgICAgICAgICAgIHVzZXJzOiBbXVxuICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG15X2FwcHJvdmU7XG4gICAgICB9XG4gICAgICBpZiAobmV4dF91c2VyX2lkcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgbXlfYXBwcm92ZS5uZXh0X3N0ZXBzID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0ZXA6IG5leHRTdGVwc1swXSxcbiAgICAgICAgICAgIHVzZXJzOiBuZXh0X3VzZXJfaWRzXG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gbXlfYXBwcm92ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbkluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyA9IGZ1bmN0aW9uKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzLCBpbmJveF91c2VyKSB7XG4gIHZhciBGSUVMRFMsIF9iYXRjaF9pbnN0YW5jZXMsIGNhdGVnb3J5Rmxvd3MsIGluYm94X2luc3RhbmNlcywgcXVlcnksIHVuQ2F0ZWdvcnlGbG93cztcbiAgX2JhdGNoX2luc3RhbmNlcyA9IG5ldyBBcnJheSgpO1xuICBxdWVyeSA9IHtcbiAgICBzcGFjZTogc3BhY2UsXG4gICAgaW5ib3hfdXNlcnM6IGluYm94X3VzZXJcbiAgfTtcbiAgRklFTERTID0ge1xuICAgIG5hbWU6IDEsXG4gICAgYXBwbGljYW50X25hbWU6IDEsXG4gICAgc3VibWl0X2RhdGU6IDEsXG4gICAgZmxvd192ZXJzaW9uOiAxLFxuICAgIFwidHJhY2VzLnN0ZXBcIjogMSxcbiAgICBmbG93OiAxLFxuICAgIGN1cnJlbnRfc3RlcF9uYW1lOiAxLFxuICAgIGZsb3dfbmFtZTogMVxuICB9O1xuICBpZiAoY2F0ZWdvcnlJZCkge1xuICAgIGlmIChjYXRlZ29yeUlkID09PSAnLTEnKSB7XG4gICAgICB1bkNhdGVnb3J5Rmxvd3MgPSBmbG93TWFuYWdlci5nZXRVbkNhdGVnb3JpZXNGbG93cyhzcGFjZSwge1xuICAgICAgICBfaWQ6IDFcbiAgICAgIH0pLmZldGNoKCkuZ2V0UHJvcGVydHkoXCJfaWRcIik7XG4gICAgICBxdWVyeS5mbG93ID0ge1xuICAgICAgICAkaW46IHVuQ2F0ZWdvcnlGbG93c1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2F0ZWdvcnlGbG93cyA9IGZsb3dNYW5hZ2VyLmdldENhdGVnb3JpZXNGbG93cyhzcGFjZSwgY2F0ZWdvcnlJZCwge1xuICAgICAgICBfaWQ6IDFcbiAgICAgIH0pLmZldGNoKCkuZ2V0UHJvcGVydHkoXCJfaWRcIik7XG4gICAgICBxdWVyeS5mbG93ID0ge1xuICAgICAgICAkaW46IGNhdGVnb3J5Rmxvd3NcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGlmIChmbG93SWRzKSB7XG4gICAgcXVlcnkuZmxvdyA9IHtcbiAgICAgICRpbjogZmxvd0lkc1xuICAgIH07XG4gIH1cbiAgaW5ib3hfaW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcbiAgICBmaWVsZHM6IEZJRUxEUyxcbiAgICBza2lwOiAwLFxuICAgIGxpbWl0OiAxMDBcbiAgfSk7XG4gIGluYm94X2luc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGlucykge1xuICAgIHZhciBjdXJyZW50U3RlcCwgY3VycmVudFN0ZXBJZCwgZmxvdywgbXlBcHByb3ZlO1xuICAgIGN1cnJlbnRTdGVwSWQgPSBfLmxhc3QoaW5zLnRyYWNlcykuc3RlcDtcbiAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICBfaWQ6IGlucy5mbG93XG4gICAgfSk7XG4gICAgY3VycmVudFN0ZXAgPSBzdGVwTWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgY3VycmVudFN0ZXBJZCk7XG4gICAgbXlBcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZShpbnMuX2lkLCBpbmJveF91c2VyKTtcbiAgICBpZiAoc3RlcE1hbmFnZXIuYWxsb3dCYXRjaChjdXJyZW50U3RlcCkgJiYgbXlBcHByb3ZlKSB7XG4gICAgICBkZWxldGUgaW5zLmZsb3dfdmVyc2lvbjtcbiAgICAgIGRlbGV0ZSBpbnMudHJhY2VzO1xuICAgICAgZGVsZXRlIGlucy5mbG93O1xuICAgICAgaW5zLmFwcHJvdmVfc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgcmV0dXJuIF9iYXRjaF9pbnN0YW5jZXMucHVzaChpbnMpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBfYmF0Y2hfaW5zdGFuY2VzO1xufTtcbiIsIk1ldGVvci5wdWJsaXNoICdjYXRlZ29yaWVzJywgKHNwYWNlSWQpIC0+XG5cdGNoZWNrIHNwYWNlSWQsIFN0cmluZ1xuXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3Mgc3BhY2VJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXG5cdHJldHVybiBkYi5jYXRlZ29yaWVzLmZpbmQoeyBzcGFjZTogc3BhY2VJZCB9LCB7IGZpZWxkczogeyBuYW1lOiAxLCBzcGFjZTogMSwgc29ydF9ubzogMSwgYXBwOiAxIH0gfSkiLCJNZXRlb3IucHVibGlzaCgnY2F0ZWdvcmllcycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgY2hlY2soc3BhY2VJZCwgU3RyaW5nKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuY2F0ZWdvcmllcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgc3BhY2U6IDEsXG4gICAgICBzb3J0X25vOiAxLFxuICAgICAgYXBwOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiXG5NZXRlb3IucHVibGlzaCAnY2ZzX2luc3RhbmNlcycsIChpbnN0YW5jZUlkcyktPlxuXHRjaGVjayhpbnN0YW5jZUlkcywgQXJyYXkpXG5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHVubGVzcyBpbnN0YW5jZUlkc1xuXHRcdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHJldHVybiBjZnMuaW5zdGFuY2VzLmZpbmQoeydtZXRhZGF0YS5pbnN0YW5jZSc6IHskaW46IGluc3RhbmNlSWRzfSAsICRvcjogW3snbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHskbmU6IHRydWV9fSx7J21ldGFkYXRhLmlzX3ByaXZhdGUnOiB0cnVlLCBcIm1ldGFkYXRhLm93bmVyXCI6IHRoaXMudXNlcklkfV19KVxuIiwiTWV0ZW9yLnB1Ymxpc2goJ2Nmc19pbnN0YW5jZXMnLCBmdW5jdGlvbihpbnN0YW5jZUlkcykge1xuICBjaGVjayhpbnN0YW5jZUlkcywgQXJyYXkpO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWluc3RhbmNlSWRzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XG4gICAgICAkaW46IGluc3RhbmNlSWRzXG4gICAgfSxcbiAgICAkb3I6IFtcbiAgICAgIHtcbiAgICAgICAgJ21ldGFkYXRhLmlzX3ByaXZhdGUnOiB7XG4gICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgJ21ldGFkYXRhLmlzX3ByaXZhdGUnOiB0cnVlLFxuICAgICAgICBcIm1ldGFkYXRhLm93bmVyXCI6IHRoaXMudXNlcklkXG4gICAgICB9XG4gICAgXVxuICB9KTtcbn0pO1xuIiwiXG5cbk1ldGVvci5wdWJsaXNoICdmbG93X3Bvc2l0aW9ucycsIChzcGFjZUlkKS0+XG5cdFxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cdFxuXHR1bmxlc3Mgc3BhY2VJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHRyZXR1cm4gZGIuZmxvd19wb3NpdGlvbnMuZmluZCh7c3BhY2U6IHNwYWNlSWR9LCB7ZmllbGRzOiB7cm9sZToxLCB1c2VyczogMSwgb3JnOiAxfX0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfcG9zaXRpb25zJywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICByb2xlOiAxLFxuICAgICAgdXNlcnM6IDEsXG4gICAgICBvcmc6IDFcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaENvbXBvc2l0ZSAnZmxvd19wb3NpdGlvbnNfdGFidWxhcicsICh0YWJsZU5hbWUsIGlkcywgZmllbGRzKS0+XG5cdGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcblx0Y2hlY2soaWRzLCBBcnJheSk7XG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XG5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHRoaXMudW5ibG9jaygpXG5cblx0ZmluZDogLT5cblx0XHR0aGlzLnVuYmxvY2soKVxuXHRcdGRiLmZsb3dfcG9zaXRpb25zLmZpbmQge19pZDogeyRpbjogaWRzfX0sIGZpZWxkczogZmllbGRzXG5cblx0Y2hpbGRyZW46IFtcblx0XHR7XG5cdFx0XHRmaW5kOiAocG9zaXRpb24pIC0+XG5cdFx0XHRcdEB1bmJsb2NrKClcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIGZsb3dfcm9sZXNcblx0XHRcdFx0ZGIuZmxvd19yb2xlcy5maW5kIHsgX2lkOiBwb3NpdGlvbi5yb2xlIH0sIGZpZWxkczogbmFtZTogMVxuXHRcdH1cblx0XHR7XG5cdFx0XHRmaW5kOiAocG9zaXRpb24pIC0+XG5cdFx0XHRcdEB1bmJsb2NrKClcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIG9yZ2FuaXphdGlvbnNcblx0XHRcdFx0ZGIub3JnYW5pemF0aW9ucy5maW5kIHsgX2lkOiBwb3NpdGlvbi5vcmcgfSwgZmllbGRzOiBmdWxsbmFtZTogMVxuXHRcdH1cblx0XHR7XG5cdFx0XHRmaW5kOiAocG9zaXRpb24pIC0+XG5cdFx0XHRcdEB1bmJsb2NrKClcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIHVzZXJcblx0XHRcdFx0ZGIuc3BhY2VfdXNlcnMuZmluZCB7XG5cdFx0XHRcdFx0c3BhY2U6IHBvc2l0aW9uLnNwYWNlXG5cdFx0XHRcdFx0dXNlcjogJGluOiBwb3NpdGlvbi51c2Vyc1xuXHRcdFx0XHR9LCBmaWVsZHM6XG5cdFx0XHRcdFx0c3BhY2U6IDFcblx0XHRcdFx0XHR1c2VyOiAxXG5cdFx0XHRcdFx0bmFtZTogMVxuXHRcdH1cblx0XSIsIk1ldGVvci5wdWJsaXNoQ29tcG9zaXRlKCdmbG93X3Bvc2l0aW9uc190YWJ1bGFyJywgZnVuY3Rpb24odGFibGVOYW1lLCBpZHMsIGZpZWxkcykge1xuICBjaGVjayh0YWJsZU5hbWUsIFN0cmluZyk7XG4gIGNoZWNrKGlkcywgQXJyYXkpO1xuICBjaGVjayhmaWVsZHMsIE1hdGNoLk9wdGlvbmFsKE9iamVjdCkpO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICB0aGlzLnVuYmxvY2soKTtcbiAgcmV0dXJuIHtcbiAgICBmaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgcmV0dXJuIGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IGlkc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczogZmllbGRzXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgICBfaWQ6IHBvc2l0aW9uLnJvbGVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgICAgICBfaWQ6IHBvc2l0aW9uLm9yZ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IHBvc2l0aW9uLnNwYWNlLFxuICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAkaW46IHBvc2l0aW9uLnVzZXJzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgICAgICB1c2VyOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59KTtcbiIsIlxuXG5cdE1ldGVvci5wdWJsaXNoICdmbG93X3JvbGVzJywgKHNwYWNlSWQpLT5cblx0XHRcblx0XHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcblx0XHRcblx0XHR1bmxlc3Mgc3BhY2VJZFxuXHRcdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cblx0XHRyZXR1cm4gZGIuZmxvd19yb2xlcy5maW5kKHtzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtuYW1lOjF9fSk7XG4iLCJNZXRlb3IucHVibGlzaCgnZmxvd19yb2xlcycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dzJywgKHNwYWNlSWQpLT5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHVubGVzcyBzcGFjZUlkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdCMg56ys5LiA5qyh6K6i6ZiF5pe25Yid5aeL5YyW5bel5L2c5Yy6XG5cdGlmIGRiLmZsb3dzLmZpbmQoe3NwYWNlOiBzcGFjZUlkfSkuY291bnQoKSA9PSAwXG5cdFx0ZGIuc3BhY2VzLmNyZWF0ZVRlbXBsYXRlRm9ybUFuZEZsb3coc3BhY2VJZClcblxuXHRyZXR1cm4gZGIuZmxvd3MuZmluZCh7c3BhY2U6IHNwYWNlSWR9LCB7XG5cdFx0ZmllbGRzOiB7XG5cdFx0XHRuYW1lOiAxLFxuXHRcdFx0Zm9ybTogMSxcblx0XHRcdHN0YXRlOiAxLFxuXHRcdFx0cGVybXM6IDEsXG5cdFx0XHRzcGFjZTogMSxcblx0XHRcdGNvbXBhbnlfaWQ6IDEsXG5cdFx0XHRzb3J0X25vOiAxLFxuXHRcdFx0ZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcblx0XHRcdGRpc3RyaWJ1dGVfdG9fc2VsZjogMVxuXHRcdH1cblx0fSlcblxuXG5NZXRlb3IucHVibGlzaCAnZmxvd192ZXJzaW9uJywgKHNwYWNlSWQsIGZsb3dJZCwgdmVyc2lvbklkKSAtPlxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0dW5sZXNzIHNwYWNlSWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0dW5sZXNzIGZsb3dJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3MgdmVyc2lvbklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cblx0c2VsZiA9IHRoaXM7XG5cblx0Z2V0Rmxvd1ZlcnNpb24gPSAoaWQgLCB2ZXJzaW9uSWQpLT5cblx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkIDogaWR9KTtcblx0XHRpZiBmbG93XG5cdFx0XHRmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnRcblx0XHRcdGZsb3dfdmVyc2lvbi5sYXRlc3QgPSB0cnVlXG5cblx0XHRcdGlmIGZsb3dfdmVyc2lvbi5faWQgIT0gdmVyc2lvbklkXG5cdFx0XHRcdGZsb3dfdmVyc2lvbiA9IGZsb3cuaGlzdG9yeXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB2ZXJzaW9uSWQpXG5cdFx0XHRcdGZsb3dfdmVyc2lvbi5sYXRlc3QgPSBmYWxzZVxuXG5cdFx0XHRyZXR1cm4gZmxvd192ZXJzaW9uXG5cdGhhbmRsZSA9IGRiLmZsb3dzLmZpbmQoe19pZDogZmxvd0lkfSwge2ZpZWxkczoge19pZDogMSwgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IDF9fSkub2JzZXJ2ZUNoYW5nZXMge1xuXHRcdGNoYW5nZWQ6IChpZCktPlxuXHRcdFx0c2VsZi5jaGFuZ2VkKFwiZmxvd192ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZsb3dWZXJzaW9uKGlkLCB2ZXJzaW9uSWQpKTtcblx0fVxuXG5cblx0c2VsZi5hZGRlZChcImZsb3dfdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGbG93VmVyc2lvbihmbG93SWQsIHZlcnNpb25JZCkpO1xuXHRzZWxmLnJlYWR5KCk7XG5cdHNlbGYub25TdG9wICgpLT5cblx0XHRoYW5kbGUuc3RvcCgpXG5cbk1ldGVvci5wdWJsaXNoICdkaXN0cmlidXRlX29wdGlvbmFsX2Zsb3dzJywgKGZsb3dfaWRzKS0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3MgZmxvd19pZHNcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe19pZDogeyRpbjogZmxvd19pZHN9fSwge1xuXHRcdGZpZWxkczoge1xuXHRcdFx0bmFtZTogMSxcblx0XHRcdGZvcm06IDEsXG5cdFx0XHRzdGF0ZTogMSxcblx0XHRcdHBlcm1zOiAxLFxuXHRcdFx0c3BhY2U6IDEsXG5cdFx0XHRkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxuXHRcdFx0ZGlzdHJpYnV0ZV90b19zZWxmOiAxLFxuXHRcdFx0ZGlzdHJpYnV0ZV9lbmRfbm90aWZpY2F0aW9uOiAxLFxuXHRcdFx0Y29tcGFueV9pZDogMVxuXHRcdH1cblx0fSlcblxuTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3cnLCAoc3BhY2VJZCwgZmxvd0lkKS0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3Mgc3BhY2VJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3MgZmxvd0lkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe19pZDogZmxvd0lkLCBzcGFjZTogc3BhY2VJZH0sIHtcblx0XHRmaWVsZHM6IHtcblx0XHRcdHByaW50X3RlbXBsYXRlOiAxLFxuXHRcdFx0aW5zdGFuY2VfdGVtcGxhdGU6IDEsXG5cdFx0XHRldmVudHM6IDEsXG5cdFx0XHRkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxuXHRcdFx0ZGlzdHJpYnV0ZV90b19zZWxmOiAxLFxuXHRcdFx0dXBsb2FkX2FmdGVyX2JlaW5nX2Rpc3RyaWJ1dGVkOiAxLFxuXHRcdFx0ZGlzdHJpYnV0ZV9lbmRfbm90aWZpY2F0aW9uOiAxLFxuXHRcdFx0Y29tcGFueV9pZDogMSxcblx0XHRcdGFsbG93X3NlbGVjdF9zdGVwOiAxXG5cdFx0fVxuXHR9KVxuTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dfZmlsZXMnLCAoc3BhY2VJZCwgZmxvd0lkKS0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3Mgc3BhY2VJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3MgZmxvd0lkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHJldHVybiBjZnMuZmlsZXMuZmluZCh7ICdtZXRhZGF0YS5zcGFjZSc6IHNwYWNlSWQsICdtZXRhZGF0YS5vYmplY3RfbmFtZSc6ICdmbG93cycsICdtZXRhZGF0YS5yZWNvcmRfaWQnOiBmbG93SWQgfSlcblxuTWV0ZW9yLnB1Ymxpc2hDb21wb3NpdGUgJ2Zsb3dzX3RhYnVsYXInLCAodGFibGVOYW1lLCBpZHMsIGZpZWxkcyktPlxuXHRjaGVjayh0YWJsZU5hbWUsIFN0cmluZyk7XG5cdGNoZWNrKGlkcywgQXJyYXkpO1xuXHRjaGVjayhmaWVsZHMsIE1hdGNoLk9wdGlvbmFsKE9iamVjdCkpO1xuXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR0aGlzLnVuYmxvY2soKVxuXG5cdGZpbmQ6IC0+XG5cdFx0dGhpcy51bmJsb2NrKClcblx0XHRkYi5mbG93cy5maW5kIHtfaWQ6IHskaW46IGlkc319LCBmaWVsZHM6IGZpZWxkc1xuXG5cdGNoaWxkcmVuOiBbXG5cdFx0e1xuXHRcdFx0ZmluZDogKGZsb3cpIC0+XG5cdFx0XHRcdEB1bmJsb2NrKClcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIHVzZXJcblx0XHRcdFx0ZGIuc3BhY2VfdXNlcnMuZmluZCB7XG5cdFx0XHRcdFx0c3BhY2U6IGZsb3cuc3BhY2UsXG5cdFx0XHRcdFx0dXNlcjogZmxvdy5jdXJyZW50Lm1vZGlmaWVkX2J5XG5cdFx0XHRcdH0sIGZpZWxkczpcblx0XHRcdFx0XHRzcGFjZTogMVxuXHRcdFx0XHRcdHVzZXI6IDFcblx0XHRcdFx0XHRuYW1lOiAxXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRmaW5kOiAoZmxvdykgLT5cblx0XHRcdFx0QHVuYmxvY2soKVxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgdXNlclxuXHRcdFx0XHRkYi5mb3Jtcy5maW5kIHtcblx0XHRcdFx0XHRzcGFjZTogZmxvdy5zcGFjZSxcblx0XHRcdFx0XHRfaWQ6IGZsb3cuZm9ybVxuXHRcdFx0XHR9LCBmaWVsZHM6XG5cdFx0XHRcdFx0c3BhY2U6IDFcblx0XHRcdFx0XHRfaWQ6IDFcblx0XHRcdFx0XHRuYW1lOiAxLFxuXHRcdFx0XHRcdGNhdGVnb3J5OiAxXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRmaW5kOiAoZmxvdykgLT5cblx0XHRcdFx0QHVuYmxvY2soKVxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgdXNlclxuXHRcdFx0XHRkYi5jYXRlZ29yaWVzLmZpbmQge1xuXHRcdFx0XHRcdHNwYWNlOiBmbG93LnNwYWNlXG5cdFx0XHRcdH0sIGZpZWxkczpcblx0XHRcdFx0XHRzcGFjZTogMVxuXHRcdFx0XHRcdF9pZDogMVxuXHRcdFx0XHRcdG5hbWU6IDFcblx0XHR9XG5cdF0iLCJNZXRlb3IucHVibGlzaCgnZmxvd3MnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKGRiLmZsb3dzLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICBkYi5zcGFjZXMuY3JlYXRlVGVtcGxhdGVGb3JtQW5kRmxvdyhzcGFjZUlkKTtcbiAgfVxuICByZXR1cm4gZGIuZmxvd3MuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogMSxcbiAgICAgIGZvcm06IDEsXG4gICAgICBzdGF0ZTogMSxcbiAgICAgIHBlcm1zOiAxLFxuICAgICAgc3BhY2U6IDEsXG4gICAgICBjb21wYW55X2lkOiAxLFxuICAgICAgc29ydF9ubzogMSxcbiAgICAgIGRpc3RyaWJ1dGVfb3B0aW9uYWxfdXNlcnM6IDEsXG4gICAgICBkaXN0cmlidXRlX3RvX3NlbGY6IDFcbiAgICB9XG4gIH0pO1xufSk7XG5cbk1ldGVvci5wdWJsaXNoKCdmbG93X3ZlcnNpb24nLCBmdW5jdGlvbihzcGFjZUlkLCBmbG93SWQsIHZlcnNpb25JZCkge1xuICB2YXIgZ2V0Rmxvd1ZlcnNpb24sIGhhbmRsZSwgc2VsZjtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWZsb3dJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCF2ZXJzaW9uSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHNlbGYgPSB0aGlzO1xuICBnZXRGbG93VmVyc2lvbiA9IGZ1bmN0aW9uKGlkLCB2ZXJzaW9uSWQpIHtcbiAgICB2YXIgZmxvdywgZmxvd192ZXJzaW9uO1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogaWRcbiAgICB9KTtcbiAgICBpZiAoZmxvdykge1xuICAgICAgZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50O1xuICAgICAgZmxvd192ZXJzaW9uLmxhdGVzdCA9IHRydWU7XG4gICAgICBpZiAoZmxvd192ZXJzaW9uLl9pZCAhPT0gdmVyc2lvbklkKSB7XG4gICAgICAgIGZsb3dfdmVyc2lvbiA9IGZsb3cuaGlzdG9yeXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB2ZXJzaW9uSWQpO1xuICAgICAgICBmbG93X3ZlcnNpb24ubGF0ZXN0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmxvd192ZXJzaW9uO1xuICAgIH1cbiAgfTtcbiAgaGFuZGxlID0gZGIuZmxvd3MuZmluZCh7XG4gICAgX2lkOiBmbG93SWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxLFxuICAgICAgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IDFcbiAgICB9XG4gIH0pLm9ic2VydmVDaGFuZ2VzKHtcbiAgICBjaGFuZ2VkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImZsb3dfdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGbG93VmVyc2lvbihpZCwgdmVyc2lvbklkKSk7XG4gICAgfVxuICB9KTtcbiAgc2VsZi5hZGRlZChcImZsb3dfdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGbG93VmVyc2lvbihmbG93SWQsIHZlcnNpb25JZCkpO1xuICBzZWxmLnJlYWR5KCk7XG4gIHJldHVybiBzZWxmLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Rpc3RyaWJ1dGVfb3B0aW9uYWxfZmxvd3MnLCBmdW5jdGlvbihmbG93X2lkcykge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWZsb3dfaWRzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuZmxvd3MuZmluZCh7XG4gICAgX2lkOiB7XG4gICAgICAkaW46IGZsb3dfaWRzXG4gICAgfVxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgZm9ybTogMSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgcGVybXM6IDEsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIGRpc3RyaWJ1dGVfb3B0aW9uYWxfdXNlcnM6IDEsXG4gICAgICBkaXN0cmlidXRlX3RvX3NlbGY6IDEsXG4gICAgICBkaXN0cmlidXRlX2VuZF9ub3RpZmljYXRpb246IDEsXG4gICAgICBjb21wYW55X2lkOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaCgnZmxvdycsIGZ1bmN0aW9uKHNwYWNlSWQsIGZsb3dJZCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghZmxvd0lkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuZmxvd3MuZmluZCh7XG4gICAgX2lkOiBmbG93SWQsXG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgcHJpbnRfdGVtcGxhdGU6IDEsXG4gICAgICBpbnN0YW5jZV90ZW1wbGF0ZTogMSxcbiAgICAgIGV2ZW50czogMSxcbiAgICAgIGRpc3RyaWJ1dGVfb3B0aW9uYWxfdXNlcnM6IDEsXG4gICAgICBkaXN0cmlidXRlX3RvX3NlbGY6IDEsXG4gICAgICB1cGxvYWRfYWZ0ZXJfYmVpbmdfZGlzdHJpYnV0ZWQ6IDEsXG4gICAgICBkaXN0cmlidXRlX2VuZF9ub3RpZmljYXRpb246IDEsXG4gICAgICBjb21wYW55X2lkOiAxLFxuICAgICAgYWxsb3dfc2VsZWN0X3N0ZXA6IDFcbiAgICB9XG4gIH0pO1xufSk7XG5cbk1ldGVvci5wdWJsaXNoKCdmbG93X2ZpbGVzJywgZnVuY3Rpb24oc3BhY2VJZCwgZmxvd0lkKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFmbG93SWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBjZnMuZmlsZXMuZmluZCh7XG4gICAgJ21ldGFkYXRhLnNwYWNlJzogc3BhY2VJZCxcbiAgICAnbWV0YWRhdGEub2JqZWN0X25hbWUnOiAnZmxvd3MnLFxuICAgICdtZXRhZGF0YS5yZWNvcmRfaWQnOiBmbG93SWRcbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2hDb21wb3NpdGUoJ2Zsb3dzX3RhYnVsYXInLCBmdW5jdGlvbih0YWJsZU5hbWUsIGlkcywgZmllbGRzKSB7XG4gIGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcbiAgY2hlY2soaWRzLCBBcnJheSk7XG4gIGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHRoaXMudW5ibG9jaygpO1xuICByZXR1cm4ge1xuICAgIGZpbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICByZXR1cm4gZGIuZmxvd3MuZmluZCh7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgICRpbjogaWRzXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgZmluZDogZnVuY3Rpb24oZmxvdykge1xuICAgICAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgICAgIHJldHVybiBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgICAgIHNwYWNlOiBmbG93LnNwYWNlLFxuICAgICAgICAgICAgdXNlcjogZmxvdy5jdXJyZW50Lm1vZGlmaWVkX2J5XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgICAgICB1c2VyOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmluZDogZnVuY3Rpb24oZmxvdykge1xuICAgICAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgICAgIHJldHVybiBkYi5mb3Jtcy5maW5kKHtcbiAgICAgICAgICAgIHNwYWNlOiBmbG93LnNwYWNlLFxuICAgICAgICAgICAgX2lkOiBmbG93LmZvcm1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgICAgIF9pZDogMSxcbiAgICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgICAgY2F0ZWdvcnk6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaW5kOiBmdW5jdGlvbihmbG93KSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLmNhdGVnb3JpZXMuZmluZCh7XG4gICAgICAgICAgICBzcGFjZTogZmxvdy5zcGFjZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICAgICAgX2lkOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59KTtcbiIsIk1ldGVvci5wdWJsaXNoICdmb3JtcycsIChzcGFjZUlkKS0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3Mgc3BhY2VJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXG5cdHJldHVybiBkYi5mb3Jtcy5maW5kKHtzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtuYW1lOiAxLCBjYXRlZ29yeTogMSwgc3RhdGU6IDEsIGRlc2NyaXB0aW9uOiAxLCBpbnN0YW5jZV9zdHlsZTogMX19KVxuXG5cbk1ldGVvci5wdWJsaXNoICdmb3JtX3ZlcnNpb24nLCAoc3BhY2VJZCwgZm9ybUlkLCB2ZXJzaW9uSWQpIC0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3Mgc3BhY2VJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3MgZm9ybUlkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHVubGVzcyB2ZXJzaW9uSWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblxuXHRzZWxmID0gdGhpcztcblxuXHRnZXRGb3JtVmVyc2lvbiA9IChpZCAsIHZlcnNpb25JZCktPlxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKHtfaWQgOiBpZH0pO1xuXHRcdGlmICFmb3JtXG5cdFx0XHRyZXR1cm4ge31cblx0XHRmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnRcblx0XHRmb3JtX3ZlcnNpb24ubGF0ZXN0ID0gdHJ1ZVxuXHRcdGlmIGZvcm1fdmVyc2lvbi5faWQgIT0gdmVyc2lvbklkXG5cdFx0XHRmb3JtX3ZlcnNpb24gPSBmb3JtLmhpc3RvcnlzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgdmVyc2lvbklkKVxuXHRcdFx0Zm9ybV92ZXJzaW9uLmxhdGVzdCA9IGZhbHNlXG5cdFx0cmV0dXJuIGZvcm1fdmVyc2lvblxuXG5cdGhhbmRsZSA9IGRiLmZvcm1zLmZpbmQoe19pZDogZm9ybUlkfSwge2ZpZWxkczoge19pZDogMSwgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IDF9fSkub2JzZXJ2ZUNoYW5nZXMge1xuXHRcdGNoYW5nZWQ6IChpZCktPlxuXHRcdFx0c2VsZi5jaGFuZ2VkKFwiZm9ybV92ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZvcm1WZXJzaW9uKGlkLCB2ZXJzaW9uSWQpKTtcblx0fVxuXG5cdHNlbGYuYWRkZWQoXCJmb3JtX3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rm9ybVZlcnNpb24oZm9ybUlkLCB2ZXJzaW9uSWQpKTtcblx0c2VsZi5yZWFkeSgpO1xuXHRzZWxmLm9uU3RvcCAoKS0+XG5cdFx0aGFuZGxlLnN0b3AoKSIsIk1ldGVvci5wdWJsaXNoKCdmb3JtcycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuZm9ybXMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogMSxcbiAgICAgIGNhdGVnb3J5OiAxLFxuICAgICAgc3RhdGU6IDEsXG4gICAgICBkZXNjcmlwdGlvbjogMSxcbiAgICAgIGluc3RhbmNlX3N0eWxlOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaCgnZm9ybV92ZXJzaW9uJywgZnVuY3Rpb24oc3BhY2VJZCwgZm9ybUlkLCB2ZXJzaW9uSWQpIHtcbiAgdmFyIGdldEZvcm1WZXJzaW9uLCBoYW5kbGUsIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFmb3JtSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghdmVyc2lvbklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgZ2V0Rm9ybVZlcnNpb24gPSBmdW5jdGlvbihpZCwgdmVyc2lvbklkKSB7XG4gICAgdmFyIGZvcm0sIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGlkXG4gICAgfSk7XG4gICAgaWYgKCFmb3JtKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGZvcm1fdmVyc2lvbiA9IGZvcm0uY3VycmVudDtcbiAgICBmb3JtX3ZlcnNpb24ubGF0ZXN0ID0gdHJ1ZTtcbiAgICBpZiAoZm9ybV92ZXJzaW9uLl9pZCAhPT0gdmVyc2lvbklkKSB7XG4gICAgICBmb3JtX3ZlcnNpb24gPSBmb3JtLmhpc3RvcnlzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgdmVyc2lvbklkKTtcbiAgICAgIGZvcm1fdmVyc2lvbi5sYXRlc3QgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1fdmVyc2lvbjtcbiAgfTtcbiAgaGFuZGxlID0gZGIuZm9ybXMuZmluZCh7XG4gICAgX2lkOiBmb3JtSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxLFxuICAgICAgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IDFcbiAgICB9XG4gIH0pLm9ic2VydmVDaGFuZ2VzKHtcbiAgICBjaGFuZ2VkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImZvcm1fdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGb3JtVmVyc2lvbihpZCwgdmVyc2lvbklkKSk7XG4gICAgfVxuICB9KTtcbiAgc2VsZi5hZGRlZChcImZvcm1fdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGb3JtVmVyc2lvbihmb3JtSWQsIHZlcnNpb25JZCkpO1xuICBzZWxmLnJlYWR5KCk7XG4gIHJldHVybiBzZWxmLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcbiIsIk1ldGVvci5wdWJsaXNoICdpbnN0YW5jZV9kYXRhJywgKGluc3RhbmNlSWQsIGJveCktPlxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0dW5sZXNzIGluc3RhbmNlSWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0c2VsZiA9IHRoaXM7XG5cblx0bWluaUFwcHJvdmVGaWVsZHMgPSBbJ19pZCcsICdpc19maW5pc2hlZCcsICd1c2VyJywgJ2hhbmRsZXInLCAnaGFuZGxlcl9uYW1lJywgJ3R5cGUnLCAnc3RhcnRfZGF0ZScsICdkZXNjcmlwdGlvbicsXG5cdFx0J2lzX3JlYWQnLCAnanVkZ2UnLCAnZmluaXNoX2RhdGUnLCAnZnJvbV91c2VyX25hbWUnLCAnZnJvbV91c2VyJywgJ2NjX2Rlc2NyaXB0aW9uJywgJ2F1dG9fc3VibWl0dGVkJ11cblxuXHR0cmlnZ2VyQ2hhbmdlRmllbGRzID0gWydmb3JtX3ZlcnNpb24nLCAnZmxvd192ZXJzaW9uJywgJ3JlbGF0ZWRfaW5zdGFuY2VzJywgJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnLCAndmFsdWVzJ11cblxuXHR0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzID0ge31cblxuXHRpbnN0YW5jZV9maWVsZHNfMCA9IHtcblx0XHRcInJlY29yZF9zeW5jZWRcIjogMCxcblxuI1x0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiOiAwLFxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWVcIjogMCxcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvblwiOiAwLFxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmNvc3RfdGltZVwiOiAwLFxuI1x0XHRcInRyYWNlcy5hcHByb3Zlcy5yZWFkX2RhdGVcIjogMCxcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5pc19lcnJvclwiOiAwLFxuXHRcdCMgXCJ0cmFjZXMuYXBwcm92ZXMudXNlcl9uYW1lXCI6IDAsXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZGVhZGxpbmVcIjogMCxcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5yZW1pbmRfZGF0ZVwiOiAwLFxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLnJlbWluZGVkX2NvdW50XCI6IDAsXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMubW9kaWZpZWRfYnlcIjogMCxcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5tb2RpZmllZFwiOiAwLFxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmdlb2xvY2F0aW9uXCI6IDAsXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuY2NfdXNlcnNcIjogMCxcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5mcm9tX2FwcHJvdmVfaWRcIjogMCxcblx0XHRcInRyYWNlcy5hcHByb3Zlcy52YWx1ZXNfaGlzdG9yeVwiOiAwXG5cdH1cblxuXHRnZXRNeWFwcHJvdmVNb2RpZmllZCA9ICh0cmFjZXMpLT5cblx0XHRteUFwcHJvdmVNb2RpZmllZHMgPSBuZXcgQXJyYXkoKVxuXG5cdFx0dHJhY2VzPy5mb3JFYWNoICh0cmFjZSktPlxuXHRcdFx0dHJhY2U/LmFwcHJvdmVzPy5mb3JFYWNoIChhcHByb3ZlKS0+XG5cdFx0XHRcdGlmIChhcHByb3ZlLnVzZXIgPT0gc2VsZi51c2VySWQgfHwgYXBwcm92ZS5oYW5kbGVyID09IHNlbGYudXNlcklkKVxuXHRcdFx0XHQjICYmICFhcHByb3ZlLmlzX2ZpbmlzaGVkXG4jXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiYXBwcm92ZVwiLCBhcHByb3ZlLl9pZCwgYXBwcm92ZS5yZWFkX2RhdGUpXG5cblx0XHRcdFx0XHRteUFwcHJvdmVNb2RpZmllZHMucHVzaChhcHByb3ZlLnJlYWRfZGF0ZSlcblxuXHRcdHJldHVybiBteUFwcHJvdmVNb2RpZmllZHNcblxuXG5cdGdldE1pbmlJbnN0YW5jZSA9IChfaW5zdGFuY2VJZCktPlxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogX2luc3RhbmNlSWR9LCB7ZmllbGRzOiBpbnN0YW5jZV9maWVsZHNfMH0pXG5cblx0XHRpZiBpbnN0YW5jZVxuXG5cdFx0XHR0cmlnZ2VyQ2hhbmdlRmllbGRzLmZvckVhY2ggKGtleSktPlxuXHRcdFx0XHRpZiBrZXkgPT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnXG5cdFx0XHRcdFx0dHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldID0gZ2V0TXlhcHByb3ZlTW9kaWZpZWQoaW5zdGFuY2UudHJhY2VzKVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0dHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldID0gaW5zdGFuY2Vba2V5XVxuXG4jXHRcdFx0aGFzT3BpbmlvbkZpZWxkID0gSW5zdGFuY2VTaWduVGV4dC5pbmNsdWRlc09waW5pb25GaWVsZChpbnN0YW5jZS5mb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pXG5cblx0XHRcdHNob3dfbW9kYWxfdHJhY2VzX2xpc3QgPSBkYi5zcGFjZV9zZXR0aW5ncy5maW5kT25lKHsgc3BhY2U6IGluc3RhbmNlLnNwYWNlLCBrZXk6IFwic2hvd19tb2RhbF90cmFjZXNfbGlzdFwiIH0sIHsgZmllbGRzOiB7IHZhbHVlczogMSB9IH0pPy52YWx1ZXMgfHwgZmFsc2VcblxuXHRcdFx0aWYgc2hvd19tb2RhbF90cmFjZXNfbGlzdFxuXG5cdFx0XHRcdHRyYWNlcyA9IG5ldyBBcnJheSgpO1xuXG5cdFx0XHRcdGluc3RhbmNlPy50cmFjZXM/LmZvckVhY2ggKHRyYWNlKS0+XG5cdFx0XHRcdFx0X3RyYWNlID0gXy5jbG9uZSh0cmFjZSlcblxuXHRcdFx0XHRcdGFwcHJvdmVzID0gbmV3IEFycmF5KClcblxuXHRcdFx0XHRcdHRyYWNlPy5hcHByb3Zlcz8uZm9yRWFjaCAoYXBwcm92ZSktPlxuXHRcdFx0XHRcdFx0aWYgYXBwcm92ZS50eXBlICE9ICdjYycgfHwgYXBwcm92ZS51c2VyID09IHNlbGYudXNlcklkIHx8IGFwcHJvdmUuaGFuZGxlciA9PSBzZWxmLnVzZXJJZCB8fCAoIV8uaXNFbXB0eShhcHByb3ZlLnNpZ25fZmllbGRfY29kZSkpXG5cdFx0XHRcdFx0XHRcdGFwcHJvdmVzLnB1c2goYXBwcm92ZSlcblxuXHRcdFx0XHRcdF90cmFjZS5hcHByb3ZlcyA9IGFwcHJvdmVzXG5cblx0XHRcdFx0XHR0cmFjZXMucHVzaChfdHJhY2UpXG5cblx0XHRcdFx0aW5zdGFuY2UudHJhY2VzID0gdHJhY2VzO1xuXG5cdFx0cmV0dXJuIGluc3RhbmNlXG5cblxuXHRuZWVkQ2hhbmdlID0gKGNoYW5nZUZpZWxkcyktPlxuXHRcdGlmIGNoYW5nZUZpZWxkc1xuXG5cdFx0XHRfY2hhbmdlID0gZmFsc2VcblxuXHRcdFx0X3JldiA9IF8uZmluZCB0cmlnZ2VyQ2hhbmdlRmllbGRzLCAoa2V5KS0+XG5cdFx0XHRcdF9rZXkgPSBrZXlcblxuXHRcdFx0XHRpZiBrZXkgPT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnXG5cdFx0XHRcdFx0X2tleSA9ICd0cmFjZXMnXG5cblx0XHRcdFx0aWYgXy5oYXMoY2hhbmdlRmllbGRzLCBfa2V5KVxuXG5cdFx0XHRcdFx0aWYga2V5ID09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJ1xuXG5cdFx0XHRcdFx0XHRfbXlfYXBwcm92ZV9tb2RpZmllZHMgPSBnZXRNeWFwcHJvdmVNb2RpZmllZChjaGFuZ2VGaWVsZHMudHJhY2VzKVxuXG4jXHRcdFx0XHRcdFx0Y29uc29sZS5sb2codHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldLCBfbXlfYXBwcm92ZV9tb2RpZmllZHMpXG5cblx0XHRcdFx0XHRcdHJldHVybiAhXy5pc0VxdWFsKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgX215X2FwcHJvdmVfbW9kaWZpZWRzKVxuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHJldHVybiAhXy5pc0VxdWFsKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgY2hhbmdlRmllbGRzW2tleV0pXG5cblx0XHRcdGlmIF9yZXZcblx0XHRcdFx0X2NoYW5nZSA9IHRydWVcblxuI1x0XHRcdGNvbnNvbGUubG9nKF9yZXYsIF9jaGFuZ2UpXG5cblx0XHRcdHJldHVybiBfY2hhbmdlXG5cblx0XHRyZXR1cm4gdHJ1ZVxuXHQj5q2k5aSE5LiN6IO95re75YqgZmllbGRz6ZmQ5Yi277yM5ZCm5YiZ5Lya5a+86Ie05pWw5o2u5LiN5a6e5pe2XG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IGluc3RhbmNlSWR9KS5vYnNlcnZlQ2hhbmdlcyB7XG5cdFx0Y2hhbmdlZDogKGlkLCBmaWVsZHMpLT5cblx0XHRcdGlmKGJveCAhPSAnaW5ib3gnIHx8IG5lZWRDaGFuZ2UoZmllbGRzKSlcblx0XHRcdFx0c2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBnZXRNaW5pSW5zdGFuY2UoaWQpKTtcblx0XHRyZW1vdmVkOiAoaWQpLT5cblx0XHRcdHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XG5cdH1cblxuXHRpbnN0YW5jZSA9IGdldE1pbmlJbnN0YW5jZShpbnN0YW5jZUlkKVxuXG5cdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaW5zdGFuY2U/Ll9pZCwgaW5zdGFuY2UpO1xuXG5cdHNlbGYucmVhZHkoKTtcblxuXHRzZWxmLm9uU3RvcCAoKS0+XG5cdFx0aGFuZGxlLnN0b3AoKVxuXG5cbk1ldGVvci5wdWJsaXNoICdpbnN0YW5jZV90cmFjZXMnLCAoaW5zdGFuY2VJZCktPlxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0dW5sZXNzIGluc3RhbmNlSWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0c2VsZiA9IHRoaXNcblxuXHRnZXRJbnN0YW5jZVRyYWNlcyA9IChfaW5zSWQpLT5cblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogX2luc0lkfSwge2ZpZWxkczoge19pZDogMSwgdHJhY2VzOiAxfX0pXG5cblxuXHRoYW5kbGUgPSAgZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogaW5zdGFuY2VJZH0pLm9ic2VydmVDaGFuZ2VzIHtcblx0XHRjaGFuZ2VkOiAoaWQpLT5cblx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlX3RyYWNlc1wiLCBpbnN0YW5jZUlkLCBnZXRJbnN0YW5jZVRyYWNlcyhpbnN0YW5jZUlkKSk7XG5cdH1cblxuXHRzZWxmLmFkZGVkKFwiaW5zdGFuY2VfdHJhY2VzXCIsIGluc3RhbmNlSWQsIGdldEluc3RhbmNlVHJhY2VzKGluc3RhbmNlSWQpKTtcblxuXHRzZWxmLnJlYWR5KCk7XG5cdHNlbGYub25TdG9wICgpLT5cblx0XHRoYW5kbGUuc3RvcCgpIiwiTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlX2RhdGEnLCBmdW5jdGlvbihpbnN0YW5jZUlkLCBib3gpIHtcbiAgdmFyIGdldE1pbmlJbnN0YW5jZSwgZ2V0TXlhcHByb3ZlTW9kaWZpZWQsIGhhbmRsZSwgaW5zdGFuY2UsIGluc3RhbmNlX2ZpZWxkc18wLCBtaW5pQXBwcm92ZUZpZWxkcywgbmVlZENoYW5nZSwgc2VsZiwgdHJpZ2dlckNoYW5nZUZpZWxkcywgdHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcztcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBzZWxmID0gdGhpcztcbiAgbWluaUFwcHJvdmVGaWVsZHMgPSBbJ19pZCcsICdpc19maW5pc2hlZCcsICd1c2VyJywgJ2hhbmRsZXInLCAnaGFuZGxlcl9uYW1lJywgJ3R5cGUnLCAnc3RhcnRfZGF0ZScsICdkZXNjcmlwdGlvbicsICdpc19yZWFkJywgJ2p1ZGdlJywgJ2ZpbmlzaF9kYXRlJywgJ2Zyb21fdXNlcl9uYW1lJywgJ2Zyb21fdXNlcicsICdjY19kZXNjcmlwdGlvbicsICdhdXRvX3N1Ym1pdHRlZCddO1xuICB0cmlnZ2VyQ2hhbmdlRmllbGRzID0gWydmb3JtX3ZlcnNpb24nLCAnZmxvd192ZXJzaW9uJywgJ3JlbGF0ZWRfaW5zdGFuY2VzJywgJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnLCAndmFsdWVzJ107XG4gIHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXMgPSB7fTtcbiAgaW5zdGFuY2VfZmllbGRzXzAgPSB7XG4gICAgXCJyZWNvcmRfc3luY2VkXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJfb3JnYW5pemF0aW9uXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuY29zdF90aW1lXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuaXNfZXJyb3JcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5kZWFkbGluZVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLnJlbWluZF9kYXRlXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMucmVtaW5kZWRfY291bnRcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5tb2RpZmllZF9ieVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLm1vZGlmaWVkXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuZ2VvbG9jYXRpb25cIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5jY191c2Vyc1wiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmZyb21fYXBwcm92ZV9pZFwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLnZhbHVlc19oaXN0b3J5XCI6IDBcbiAgfTtcbiAgZ2V0TXlhcHByb3ZlTW9kaWZpZWQgPSBmdW5jdGlvbih0cmFjZXMpIHtcbiAgICB2YXIgbXlBcHByb3ZlTW9kaWZpZWRzO1xuICAgIG15QXBwcm92ZU1vZGlmaWVkcyA9IG5ldyBBcnJheSgpO1xuICAgIGlmICh0cmFjZXMgIT0gbnVsbCkge1xuICAgICAgdHJhY2VzLmZvckVhY2goZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgcmV0dXJuIHRyYWNlICE9IG51bGwgPyAocmVmID0gdHJhY2UuYXBwcm92ZXMpICE9IG51bGwgPyByZWYuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgICAgaWYgKGFwcHJvdmUudXNlciA9PT0gc2VsZi51c2VySWQgfHwgYXBwcm92ZS5oYW5kbGVyID09PSBzZWxmLnVzZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuIG15QXBwcm92ZU1vZGlmaWVkcy5wdXNoKGFwcHJvdmUucmVhZF9kYXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBteUFwcHJvdmVNb2RpZmllZHM7XG4gIH07XG4gIGdldE1pbmlJbnN0YW5jZSA9IGZ1bmN0aW9uKF9pbnN0YW5jZUlkKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHJlZjEsIHNob3dfbW9kYWxfdHJhY2VzX2xpc3QsIHRyYWNlcztcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogX2luc3RhbmNlSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IGluc3RhbmNlX2ZpZWxkc18wXG4gICAgfSk7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICB0cmlnZ2VyQ2hhbmdlRmllbGRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJykge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0gPSBnZXRNeWFwcHJvdmVNb2RpZmllZChpbnN0YW5jZS50cmFjZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0gPSBpbnN0YW5jZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNob3dfbW9kYWxfdHJhY2VzX2xpc3QgPSAoKHJlZiA9IGRiLnNwYWNlX3NldHRpbmdzLmZpbmRPbmUoe1xuICAgICAgICBzcGFjZTogaW5zdGFuY2Uuc3BhY2UsXG4gICAgICAgIGtleTogXCJzaG93X21vZGFsX3RyYWNlc19saXN0XCJcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdmFsdWVzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pKSAhPSBudWxsID8gcmVmLnZhbHVlcyA6IHZvaWQgMCkgfHwgZmFsc2U7XG4gICAgICBpZiAoc2hvd19tb2RhbF90cmFjZXNfbGlzdCkge1xuICAgICAgICB0cmFjZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgaWYgKGluc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoKHJlZjEgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlZjEuZm9yRWFjaChmdW5jdGlvbih0cmFjZSkge1xuICAgICAgICAgICAgICB2YXIgX3RyYWNlLCBhcHByb3ZlcywgcmVmMjtcbiAgICAgICAgICAgICAgX3RyYWNlID0gXy5jbG9uZSh0cmFjZSk7XG4gICAgICAgICAgICAgIGFwcHJvdmVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICAgIGlmICh0cmFjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKChyZWYyID0gdHJhY2UuYXBwcm92ZXMpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHJlZjIuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcHByb3ZlLnR5cGUgIT09ICdjYycgfHwgYXBwcm92ZS51c2VyID09PSBzZWxmLnVzZXJJZCB8fCBhcHByb3ZlLmhhbmRsZXIgPT09IHNlbGYudXNlcklkIHx8ICghXy5pc0VtcHR5KGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBwcm92ZXMucHVzaChhcHByb3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90cmFjZS5hcHByb3ZlcyA9IGFwcHJvdmVzO1xuICAgICAgICAgICAgICByZXR1cm4gdHJhY2VzLnB1c2goX3RyYWNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS50cmFjZXMgPSB0cmFjZXM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbiAgbmVlZENoYW5nZSA9IGZ1bmN0aW9uKGNoYW5nZUZpZWxkcykge1xuICAgIHZhciBfY2hhbmdlLCBfcmV2O1xuICAgIGlmIChjaGFuZ2VGaWVsZHMpIHtcbiAgICAgIF9jaGFuZ2UgPSBmYWxzZTtcbiAgICAgIF9yZXYgPSBfLmZpbmQodHJpZ2dlckNoYW5nZUZpZWxkcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBfa2V5LCBfbXlfYXBwcm92ZV9tb2RpZmllZHM7XG4gICAgICAgIF9rZXkgPSBrZXk7XG4gICAgICAgIGlmIChrZXkgPT09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJykge1xuICAgICAgICAgIF9rZXkgPSAndHJhY2VzJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5oYXMoY2hhbmdlRmllbGRzLCBfa2V5KSkge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJykge1xuICAgICAgICAgICAgX215X2FwcHJvdmVfbW9kaWZpZWRzID0gZ2V0TXlhcHByb3ZlTW9kaWZpZWQoY2hhbmdlRmllbGRzLnRyYWNlcyk7XG4gICAgICAgICAgICByZXR1cm4gIV8uaXNFcXVhbCh0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0sIF9teV9hcHByb3ZlX21vZGlmaWVkcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAhXy5pc0VxdWFsKHRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXNba2V5XSwgY2hhbmdlRmllbGRzW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoX3Jldikge1xuICAgICAgICBfY2hhbmdlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfY2hhbmdlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIF9pZDogaW5zdGFuY2VJZFxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQsIGZpZWxkcykge1xuICAgICAgaWYgKGJveCAhPT0gJ2luYm94JyB8fCBuZWVkQ2hhbmdlKGZpZWxkcykpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgZ2V0TWluaUluc3RhbmNlKGlkKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XG4gICAgfVxuICB9KTtcbiAgaW5zdGFuY2UgPSBnZXRNaW5pSW5zdGFuY2UoaW5zdGFuY2VJZCk7XG4gIHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaW5zdGFuY2UgIT0gbnVsbCA/IGluc3RhbmNlLl9pZCA6IHZvaWQgMCwgaW5zdGFuY2UpO1xuICBzZWxmLnJlYWR5KCk7XG4gIHJldHVybiBzZWxmLm9uU3RvcChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGFuZGxlLnN0b3AoKTtcbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlX3RyYWNlcycsIGZ1bmN0aW9uKGluc3RhbmNlSWQpIHtcbiAgdmFyIGdldEluc3RhbmNlVHJhY2VzLCBoYW5kbGUsIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghaW5zdGFuY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGdldEluc3RhbmNlVHJhY2VzID0gZnVuY3Rpb24oX2luc0lkKSB7XG4gICAgcmV0dXJuIGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogX2luc0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIF9pZDogMSxcbiAgICAgICAgdHJhY2VzOiAxXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICBfaWQ6IGluc3RhbmNlSWRcbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VfdHJhY2VzXCIsIGluc3RhbmNlSWQsIGdldEluc3RhbmNlVHJhY2VzKGluc3RhbmNlSWQpKTtcbiAgICB9XG4gIH0pO1xuICBzZWxmLmFkZGVkKFwiaW5zdGFuY2VfdHJhY2VzXCIsIGluc3RhbmNlSWQsIGdldEluc3RhbmNlVHJhY2VzKGluc3RhbmNlSWQpKTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJcblx0TWV0ZW9yLnB1Ymxpc2ggJ2luc3RhbmNlc19saXN0JywgKHNwYWNlSWQsIGJveCwgZmxvd0lkKS0+XG5cblx0XHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcblx0XHRcblx0XHR1bmxlc3Mgc3BhY2VJZFxuXHRcdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdFx0cXVlcnkgPSB7c3BhY2U6IHNwYWNlSWR9XG5cdFx0aWYgYm94ID09IFwiaW5ib3hcIlxuXHRcdFx0cXVlcnkuaW5ib3hfdXNlcnMgPSB0aGlzLnVzZXJJZDtcblx0XHRlbHNlIGlmIGJveCA9PSBcIm91dGJveFwiXG5cdFx0XHRxdWVyeS5vdXRib3hfdXNlcnMgPSB0aGlzLnVzZXJJZDtcblx0XHRlbHNlIGlmIGJveCA9PSBcImRyYWZ0XCJcblx0XHRcdHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xuXHRcdFx0cXVlcnkuc3RhdGUgPSBcImRyYWZ0XCJcblx0XHRlbHNlIGlmIGJveCA9PSBcInBlbmRpbmdcIlxuXHRcdFx0cXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XG5cdFx0XHRxdWVyeS5zdGF0ZSA9IFwicGVuZGluZ1wiXG5cdFx0ZWxzZSBpZiBib3ggPT0gXCJjb21wbGV0ZWRcIlxuXHRcdFx0cXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XG5cdFx0XHRxdWVyeS5zdGF0ZSA9IFwiY29tcGxldGVkXCJcblx0XHRlbHNlIGlmIGJveCA9PSBcIm1vbml0b3JcIlxuXHRcdFx0cXVlcnkuZmxvdyA9IGZsb3dJZDtcblx0XHRcdHF1ZXJ5LnN0YXRlID0geyRpbjogW1wicGVuZGluZ1wiLFwiY29tcGxldGVkXCJdfTtcblx0XHRlbHNlXG5cdFx0XHRxdWVyeS5zdGF0ZSA9IFwibm9uZVwiXG5cblx0XHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtmaWVsZHM6IHtuYW1lOjEsIGNyZWF0ZWQ6MSwgZm9ybToxLCBmbG93OiAxLCBzcGFjZToxLCBtb2RpZmllZDoxLCBhcHBsaWNhbnQ6IDEsIGlzX2FyY2hpdmVkOjEsIGZvcm1fdmVyc2lvbjogMSwgZmxvd192ZXJzaW9uOiAxfX0pXG5cbiIsIk1ldGVvci5wdWJsaXNoKCdpbnN0YW5jZXNfbGlzdCcsIGZ1bmN0aW9uKHNwYWNlSWQsIGJveCwgZmxvd0lkKSB7XG4gIHZhciBxdWVyeTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBxdWVyeSA9IHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9O1xuICBpZiAoYm94ID09PSBcImluYm94XCIpIHtcbiAgICBxdWVyeS5pbmJveF91c2VycyA9IHRoaXMudXNlcklkO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJvdXRib3hcIikge1xuICAgIHF1ZXJ5Lm91dGJveF91c2VycyA9IHRoaXMudXNlcklkO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJkcmFmdFwiKSB7XG4gICAgcXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XG4gICAgcXVlcnkuc3RhdGUgPSBcImRyYWZ0XCI7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcInBlbmRpbmdcIikge1xuICAgIHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xuICAgIHF1ZXJ5LnN0YXRlID0gXCJwZW5kaW5nXCI7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcImNvbXBsZXRlZFwiKSB7XG4gICAgcXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XG4gICAgcXVlcnkuc3RhdGUgPSBcImNvbXBsZXRlZFwiO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJtb25pdG9yXCIpIHtcbiAgICBxdWVyeS5mbG93ID0gZmxvd0lkO1xuICAgIHF1ZXJ5LnN0YXRlID0ge1xuICAgICAgJGluOiBbXCJwZW5kaW5nXCIsIFwiY29tcGxldGVkXCJdXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBxdWVyeS5zdGF0ZSA9IFwibm9uZVwiO1xuICB9XG4gIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogMSxcbiAgICAgIGNyZWF0ZWQ6IDEsXG4gICAgICBmb3JtOiAxLFxuICAgICAgZmxvdzogMSxcbiAgICAgIHNwYWNlOiAxLFxuICAgICAgbW9kaWZpZWQ6IDEsXG4gICAgICBhcHBsaWNhbnQ6IDEsXG4gICAgICBpc19hcmNoaXZlZDogMSxcbiAgICAgIGZvcm1fdmVyc2lvbjogMSxcbiAgICAgIGZsb3dfdmVyc2lvbjogMVxuICAgIH1cbiAgfSk7XG59KTtcbiIsImxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGUgPSAoaW5zdGFuY2VpZCwgdXNlcklkLCBkYXRhTWFwLCBjYWxsYmFjayktPlxuXHRvcGVyYXRpb24gPSBbe1xuXHRcdFwiJG1hdGNoXCI6IHtcblx0XHRcdFwiX2lkXCI6IGluc3RhbmNlaWRcblx0XHR9XG5cdH0sIHtcIiRwcm9qZWN0XCI6IHtcIm5hbWVcIjogMSwgXCJfYXBwcm92ZVwiOiBcIiR0cmFjZXMuYXBwcm92ZXNcIn19LCB7XCIkdW53aW5kXCI6IFwiJF9hcHByb3ZlXCJ9LCB7XCIkdW53aW5kXCI6IFwiJF9hcHByb3ZlXCJ9LFxuXHRcdHtcIiRtYXRjaFwiOiB7XCJfYXBwcm92ZS5pc19maW5pc2hlZFwiOiB0cnVlLCAkb3I6W3tcIl9hcHByb3ZlLmhhbmRsZXJcIjogdXNlcklkfSx7XCJfYXBwcm92ZS51c2VyXCI6IHVzZXJJZH1dfX0sXG5cdFx0e1wiJGdyb3VwXCI6IHtcIl9pZFwiOiBcIiRfaWRcIiwgXCJmaW5pc2hfZGF0ZVwiOiB7XCIkbGFzdFwiOiBcIiRfYXBwcm92ZS5maW5pc2hfZGF0ZVwifX19XG5cdF1cblxuXHRkYi5pbnN0YW5jZXMucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShvcGVyYXRpb24pLnRvQXJyYXkgKGVyciwgZGF0YSktPlxuXHRcdGlmIGVyclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycilcblxuXHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxuXHRcdFx0ZGF0YU1hcC5wdXNoIGRvY1xuXG5cdFx0aWYgY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKVxuXHRcdFx0Y2FsbGJhY2soKVxuXHRcdHJldHVyblxuXG5hc3luY0xhc3RGaW5pc2hlZEFwcHJvdmUgPSBNZXRlb3Iud3JhcEFzeW5jKGxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGUpXG5cbk1ldGVvci5wdWJsaXNoIFwiaW5zdGFuY2VfdGFidWxhclwiLCAodGFibGVOYW1lLCBpZHMsIGZpZWxkcyktPlxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0Y2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xuXG5cdGNoZWNrKGlkcywgQXJyYXkpO1xuXG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSlcblxuXHRmaWVsZHMuY2NfdXNlcnMgPSAxXG5cblx0c2VsZiA9IHRoaXM7XG5cblx0Z2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlID0gKHVzZXJJZCwgaW5zdGFuY2VJZCktPlxuXHRcdGRhdGEgPSBbXVxuXHRcdGFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZShpbnN0YW5jZUlkLCB1c2VySWQsIGRhdGEpXG5cdFx0aWYgZGF0YS5sZW5ndGggPiAwXG5cdFx0XHRyZXR1cm4gZGF0YVswXVxuXG5cblx0Z2V0TXlBcHByb3ZlID0gKHVzZXJJZCwgaW5zdGFuY2VJZCktPlxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VJZH0sIHtmaWVsZHM6IHt0cmFjZXM6IDF9fSlcblx0XHRteUFwcHJvdmUgPSBudWxsXG5cblx0XHRpZiAhaW5zdGFuY2Vcblx0XHRcdHJldHVyblxuXG5cdFx0aWYgIWluc3RhbmNlLnRyYWNlcyB8fCBpbnN0YW5jZS50cmFjZXMubGVuZ3RoIDwgMVxuXHRcdFx0cmV0dXJuXG5cblx0XHRub3RGaW5pc2hlZFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKVxuXG5cdFx0aWYgbm90RmluaXNoZWRUcmFjZXMubGVuZ3RoID4gMFxuXHRcdFx0YXBwcm92ZXMgPSBub3RGaW5pc2hlZFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKS5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgdXNlcklkKTtcblxuXHRcdFx0aWYgYXBwcm92ZXMubGVuZ3RoID4gMFxuXHRcdFx0XHRhcHByb3ZlID0gYXBwcm92ZXNbMF1cblx0XHRcdFx0bXlBcHByb3ZlID0ge1xuXHRcdFx0XHRcdGlkOiBhcHByb3ZlLl9pZCxcblx0XHRcdFx0XHRpbnN0YW5jZTogYXBwcm92ZS5pbnN0YW5jZSxcblx0XHRcdFx0XHR0cmFjZTogYXBwcm92ZS50cmFjZSxcblx0XHRcdFx0XHRpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWQsXG5cdFx0XHRcdFx0c3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlXG5cdFx0XHRcdFx0YWdlbnQ6IGFwcHJvdmUuYWdlbnRcblx0XHRcdFx0XHR1c2VyX25hbWU6IGFwcHJvdmUudXNlcl9uYW1lXG5cdFx0XHRcdH1cblxuXHRcdGlmICFteUFwcHJvdmVcblx0XHRcdGlzX3JlYWQgPSBmYWxzZVxuXHRcdFx0aW5zdGFuY2UudHJhY2VzLmZvckVhY2ggKHRyYWNlKSAtPlxuXHRcdFx0XHR0cmFjZT8uYXBwcm92ZXM/LmZvckVhY2ggKGFwcHJvdmUpIC0+XG5cdFx0XHRcdFx0aWYgYXBwcm92ZS50eXBlID09ICdjYycgYW5kIGFwcHJvdmUudXNlciA9PSB1c2VySWQgYW5kIGFwcHJvdmUuaXNfZmluaXNoZWQgPT0gZmFsc2Vcblx0XHRcdFx0XHRcdGlmIGFwcHJvdmUuaXNfcmVhZFxuXHRcdFx0XHRcdFx0XHRpc19yZWFkID0gdHJ1ZVxuXHRcdFx0XHRcdFx0bXlBcHByb3ZlID0ge2lkOiBhcHByb3ZlLl9pZCwgaXNfcmVhZDogaXNfcmVhZCwgc3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlLCBhZ2VudDogYXBwcm92ZS5hZ2VudCwgdXNlcl9uYW1lOiBhcHByb3ZlLnVzZXJfbmFtZX1cblxuXHRcdHJldHVybiBteUFwcHJvdmVcblxuXHRnZXRTdGVwQ3VycmVudE5hbWUgPSAoaW5zdGFuY2VJZCkgLT5cblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9LCB7ZmllbGRzOiB7XCJ0cmFjZXMubmFtZVwiOiAxLCBcInRyYWNlc1wiOiB7JHNsaWNlOiAtMX19fSlcblx0XHRpZiBpbnN0YW5jZVxuXHRcdFx0c3RlcEN1cnJlbnROYW1lID0gaW5zdGFuY2UudHJhY2VzP1swXT8ubmFtZVxuXG5cdFx0cmV0dXJuIHN0ZXBDdXJyZW50TmFtZVxuXG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW46IGlkc319LCB7ZmllbGRzOiB7dHJhY2VzOiAwfX0pLm9ic2VydmVDaGFuZ2VzIHtcblx0XHRjaGFuZ2VkOiAoaWQpLT5cblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxuXHRcdFx0bXlBcHByb3ZlID0gZ2V0TXlBcHByb3ZlKHNlbGYudXNlcklkLCBpZClcblx0XHRcdG15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpXG5cdFx0XHRpZiBteUFwcHJvdmVcblx0XHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IG15QXBwcm92ZS5pc19yZWFkXG5cdFx0XHRcdGluc3RhbmNlLnN0YXJ0X2RhdGUgPSBteUFwcHJvdmUuc3RhcnRfZGF0ZVxuXHRcdFx0XHRpZiBteUFwcHJvdmUuYWdlbnRcblx0XHRcdFx0XHRpbnN0YW5jZS5hZ2VudF91c2VyX25hbWUgPSBteUFwcHJvdmUudXNlcl9uYW1lXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGluc3RhbmNlLmlzX3JlYWQgPSB0cnVlXG5cblx0XHRcdGlmIG15TGFzdEZpbmlzaGVkQXBwcm92ZVxuXHRcdFx0XHRpbnN0YW5jZS5teV9maW5pc2hfZGF0ZSA9IG15TGFzdEZpbmlzaGVkQXBwcm92ZS5maW5pc2hfZGF0ZVxuXG5cdFx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2Vcblx0XHRcdGluc3RhbmNlLmNjX2NvdW50ID0gaW5zdGFuY2UuY2NfdXNlcnM/Lmxlbmd0aCB8fCAwXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcblx0XHRcdHRyeVxuXHRcdFx0XHRzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcblx0XHRcdGNhdGNoIGVycm9yXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdpbnN0YW5jZSBvYnNlcnZlQ2hhbmdlcyBlcnJvcjogJywgZXJyb3IubWVzc2FnZSk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdzZWxmLnVzZXJJZDogJywgc2VsZi51c2VySWQpO1xuXHRcdFx0XHRjb25zb2xlLmxvZygndGFibGVOYW1lOiAnLCB0YWJsZU5hbWUpO1xuXHRcdFx0XHRjb25zb2xlLmxvZygnaWRzOiAnLCBKU09OLnN0cmluZ2lmeShpZHMpKTtcblx0XHRcdFx0Y29uc29sZS5sb2coJ215QXBwcm92ZTogJywgSlNPTi5zdHJpbmdpZnkobXlBcHByb3ZlKSk7XG5cdFx0cmVtb3ZlZDogKGlkKS0+XG5cdFx0XHRzZWxmLnJlbW92ZWQoXCJpbnN0YW5jZXNcIiwgaWQpO1xuXHR9XG5cblx0aWRzLmZvckVhY2ggKGlkKS0+XG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXG5cdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxuXHRcdG15QXBwcm92ZSA9IGdldE15QXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpXG5cdFx0bXlMYXN0RmluaXNoZWRBcHByb3ZlID0gZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlKHNlbGYudXNlcklkLCBpZClcblx0XHRpZiBteUFwcHJvdmVcblx0XHRcdGluc3RhbmNlLmlzX3JlYWQgPSBteUFwcHJvdmUuaXNfcmVhZFxuXHRcdFx0aW5zdGFuY2Uuc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlXG5cdFx0XHRpZiBteUFwcHJvdmUuYWdlbnRcblx0XHRcdFx0XHRpbnN0YW5jZS5hZ2VudF91c2VyX25hbWUgPSBteUFwcHJvdmUudXNlcl9uYW1lXG5cdFx0ZWxzZVxuXHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IHRydWVcblxuXHRcdGlmIG15TGFzdEZpbmlzaGVkQXBwcm92ZVxuXHRcdFx0aW5zdGFuY2UubXlfZmluaXNoX2RhdGUgPSBteUxhc3RGaW5pc2hlZEFwcHJvdmUuZmluaXNoX2RhdGVcblxuXHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxuXHRcdGluc3RhbmNlLmNjX2NvdW50ID0gaW5zdGFuY2UuY2NfdXNlcnM/Lmxlbmd0aCB8fCAwXG5cdFx0ZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzXG5cdFx0c2VsZi5hZGRlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xuXG5cdHNlbGYucmVhZHkoKTtcblx0c2VsZi5vblN0b3AgKCktPlxuXHRcdGhhbmRsZS5zdG9wKCkiLCJ2YXIgYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlLCBsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlO1xuXG5sYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlID0gZnVuY3Rpb24oaW5zdGFuY2VpZCwgdXNlcklkLCBkYXRhTWFwLCBjYWxsYmFjaykge1xuICB2YXIgb3BlcmF0aW9uO1xuICBvcGVyYXRpb24gPSBbXG4gICAge1xuICAgICAgXCIkbWF0Y2hcIjoge1xuICAgICAgICBcIl9pZFwiOiBpbnN0YW5jZWlkXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgXCIkcHJvamVjdFwiOiB7XG4gICAgICAgIFwibmFtZVwiOiAxLFxuICAgICAgICBcIl9hcHByb3ZlXCI6IFwiJHRyYWNlcy5hcHByb3Zlc1wiXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgXCIkdW53aW5kXCI6IFwiJF9hcHByb3ZlXCJcbiAgICB9LCB7XG4gICAgICBcIiR1bndpbmRcIjogXCIkX2FwcHJvdmVcIlxuICAgIH0sIHtcbiAgICAgIFwiJG1hdGNoXCI6IHtcbiAgICAgICAgXCJfYXBwcm92ZS5pc19maW5pc2hlZFwiOiB0cnVlLFxuICAgICAgICAkb3I6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIl9hcHByb3ZlLmhhbmRsZXJcIjogdXNlcklkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJfYXBwcm92ZS51c2VyXCI6IHVzZXJJZFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIFwiJGdyb3VwXCI6IHtcbiAgICAgICAgXCJfaWRcIjogXCIkX2lkXCIsXG4gICAgICAgIFwiZmluaXNoX2RhdGVcIjoge1xuICAgICAgICAgIFwiJGxhc3RcIjogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBdO1xuICByZXR1cm4gZGIuaW5zdGFuY2VzLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUob3BlcmF0aW9uKS50b0FycmF5KGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZG9jKSB7XG4gICAgICByZXR1cm4gZGF0YU1hcC5wdXNoKGRvYyk7XG4gICAgfSk7XG4gICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZSA9IE1ldGVvci53cmFwQXN5bmMobGFzdEZpbmlzaGVkQXBwcm92ZUFnZ3JlZ2F0ZSk7XG5cbk1ldGVvci5wdWJsaXNoKFwiaW5zdGFuY2VfdGFidWxhclwiLCBmdW5jdGlvbih0YWJsZU5hbWUsIGlkcywgZmllbGRzKSB7XG4gIHZhciBnZXRNeUFwcHJvdmUsIGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZSwgZ2V0U3RlcEN1cnJlbnROYW1lLCBoYW5kbGUsIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcbiAgY2hlY2soaWRzLCBBcnJheSk7XG4gIGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XG4gIGZpZWxkcy5jY191c2VycyA9IDE7XG4gIHNlbGYgPSB0aGlzO1xuICBnZXRNeUxhc3RGaW5pc2hlZEFwcHJvdmUgPSBmdW5jdGlvbih1c2VySWQsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgZGF0YTtcbiAgICBkYXRhID0gW107XG4gICAgYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlKGluc3RhbmNlSWQsIHVzZXJJZCwgZGF0YSk7XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGRhdGFbMF07XG4gICAgfVxuICB9O1xuICBnZXRNeUFwcHJvdmUgPSBmdW5jdGlvbih1c2VySWQsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgYXBwcm92ZSwgYXBwcm92ZXMsIGluc3RhbmNlLCBpc19yZWFkLCBteUFwcHJvdmUsIG5vdEZpbmlzaGVkVHJhY2VzO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHRyYWNlczogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIG15QXBwcm92ZSA9IG51bGw7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWluc3RhbmNlLnRyYWNlcyB8fCBpbnN0YW5jZS50cmFjZXMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub3RGaW5pc2hlZFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKTtcbiAgICBpZiAobm90RmluaXNoZWRUcmFjZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXBwcm92ZXMgPSBub3RGaW5pc2hlZFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKS5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgdXNlcklkKTtcbiAgICAgIGlmIChhcHByb3Zlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFwcHJvdmUgPSBhcHByb3Zlc1swXTtcbiAgICAgICAgbXlBcHByb3ZlID0ge1xuICAgICAgICAgIGlkOiBhcHByb3ZlLl9pZCxcbiAgICAgICAgICBpbnN0YW5jZTogYXBwcm92ZS5pbnN0YW5jZSxcbiAgICAgICAgICB0cmFjZTogYXBwcm92ZS50cmFjZSxcbiAgICAgICAgICBpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWQsXG4gICAgICAgICAgc3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlLFxuICAgICAgICAgIGFnZW50OiBhcHByb3ZlLmFnZW50LFxuICAgICAgICAgIHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFteUFwcHJvdmUpIHtcbiAgICAgIGlzX3JlYWQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLnRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgIHZhciByZWY7XG4gICAgICAgIHJldHVybiB0cmFjZSAhPSBudWxsID8gKHJlZiA9IHRyYWNlLmFwcHJvdmVzKSAhPSBudWxsID8gcmVmLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgIGlmIChhcHByb3ZlLnR5cGUgPT09ICdjYycgJiYgYXBwcm92ZS51c2VyID09PSB1c2VySWQgJiYgYXBwcm92ZS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChhcHByb3ZlLmlzX3JlYWQpIHtcbiAgICAgICAgICAgICAgaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbXlBcHByb3ZlID0ge1xuICAgICAgICAgICAgICBpZDogYXBwcm92ZS5faWQsXG4gICAgICAgICAgICAgIGlzX3JlYWQ6IGlzX3JlYWQsXG4gICAgICAgICAgICAgIHN0YXJ0X2RhdGU6IGFwcHJvdmUuc3RhcnRfZGF0ZSxcbiAgICAgICAgICAgICAgYWdlbnQ6IGFwcHJvdmUuYWdlbnQsXG4gICAgICAgICAgICAgIHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbXlBcHByb3ZlO1xuICB9O1xuICBnZXRTdGVwQ3VycmVudE5hbWUgPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHJlZjEsIHN0ZXBDdXJyZW50TmFtZTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy5uYW1lXCI6IDEsXG4gICAgICAgIFwidHJhY2VzXCI6IHtcbiAgICAgICAgICAkc2xpY2U6IC0xXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHN0ZXBDdXJyZW50TmFtZSA9IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyAocmVmMSA9IHJlZlswXSkgIT0gbnVsbCA/IHJlZjEubmFtZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIHN0ZXBDdXJyZW50TmFtZTtcbiAgfTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIF9pZDoge1xuICAgICAgJGluOiBpZHNcbiAgICB9XG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHRyYWNlczogMFxuICAgIH1cbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgZXJyb3IsIGluc3RhbmNlLCBteUFwcHJvdmUsIG15TGFzdEZpbmlzaGVkQXBwcm92ZSwgcmVmLCByZWYxO1xuICAgICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICAgIH0pO1xuICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBteUFwcHJvdmUgPSBnZXRNeUFwcHJvdmUoc2VsZi51c2VySWQsIGlkKTtcbiAgICAgIG15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpO1xuICAgICAgaWYgKG15QXBwcm92ZSkge1xuICAgICAgICBpbnN0YW5jZS5pc19yZWFkID0gbXlBcHByb3ZlLmlzX3JlYWQ7XG4gICAgICAgIGluc3RhbmNlLnN0YXJ0X2RhdGUgPSBteUFwcHJvdmUuc3RhcnRfZGF0ZTtcbiAgICAgICAgaWYgKG15QXBwcm92ZS5hZ2VudCkge1xuICAgICAgICAgIGluc3RhbmNlLmFnZW50X3VzZXJfbmFtZSA9IG15QXBwcm92ZS51c2VyX25hbWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG15TGFzdEZpbmlzaGVkQXBwcm92ZSkge1xuICAgICAgICBpbnN0YW5jZS5teV9maW5pc2hfZGF0ZSA9IG15TGFzdEZpbmlzaGVkQXBwcm92ZS5maW5pc2hfZGF0ZTtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlLmlzX2NjID0gKChyZWYgPSBpbnN0YW5jZS5jY191c2VycykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgOiB2b2lkIDApIHx8IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuY2NfY291bnQgPSAoKHJlZjEgPSBpbnN0YW5jZS5jY191c2VycykgIT0gbnVsbCA/IHJlZjEubGVuZ3RoIDogdm9pZCAwKSB8fCAwO1xuICAgICAgZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICBjb25zb2xlLmxvZygnaW5zdGFuY2Ugb2JzZXJ2ZUNoYW5nZXMgZXJyb3I6ICcsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmxvZygnc2VsZi51c2VySWQ6ICcsIHNlbGYudXNlcklkKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RhYmxlTmFtZTogJywgdGFibGVOYW1lKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2lkczogJywgSlNPTi5zdHJpbmdpZnkoaWRzKSk7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnbXlBcHByb3ZlOiAnLCBKU09OLnN0cmluZ2lmeShteUFwcHJvdmUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcbiAgICB9XG4gIH0pO1xuICBpZHMuZm9yRWFjaChmdW5jdGlvbihpZCkge1xuICAgIHZhciBpbnN0YW5jZSwgbXlBcHByb3ZlLCBteUxhc3RGaW5pc2hlZEFwcHJvdmUsIHJlZiwgcmVmMTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IGZpZWxkc1xuICAgIH0pO1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbXlBcHByb3ZlID0gZ2V0TXlBcHByb3ZlKHNlbGYudXNlcklkLCBpZCk7XG4gICAgbXlMYXN0RmluaXNoZWRBcHByb3ZlID0gZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlKHNlbGYudXNlcklkLCBpZCk7XG4gICAgaWYgKG15QXBwcm92ZSkge1xuICAgICAgaW5zdGFuY2UuaXNfcmVhZCA9IG15QXBwcm92ZS5pc19yZWFkO1xuICAgICAgaW5zdGFuY2Uuc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgaWYgKG15QXBwcm92ZS5hZ2VudCkge1xuICAgICAgICBpbnN0YW5jZS5hZ2VudF91c2VyX25hbWUgPSBteUFwcHJvdmUudXNlcl9uYW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5pc19yZWFkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG15TGFzdEZpbmlzaGVkQXBwcm92ZSkge1xuICAgICAgaW5zdGFuY2UubXlfZmluaXNoX2RhdGUgPSBteUxhc3RGaW5pc2hlZEFwcHJvdmUuZmluaXNoX2RhdGU7XG4gICAgfVxuICAgIGluc3RhbmNlLmlzX2NjID0gKChyZWYgPSBpbnN0YW5jZS5jY191c2VycykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgOiB2b2lkIDApIHx8IGZhbHNlO1xuICAgIGluc3RhbmNlLmNjX2NvdW50ID0gKChyZWYxID0gaW5zdGFuY2UuY2NfdXNlcnMpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCkgfHwgMDtcbiAgICBkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnM7XG4gICAgcmV0dXJuIHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcbiAgfSk7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2luc3RhbmNlc19kcmFmdCcsIChzcGFjZUlkKSAtPlxuXHRjaGVjayBzcGFjZUlkLCBTdHJpbmdcblxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0dXNlcklkID0gdGhpcy51c2VySWRcblx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtzdGF0ZTpcImRyYWZ0XCIsc3BhY2U6c3BhY2VJZCxzdWJtaXR0ZXI6dXNlcklkLCRvcjpbe2luYm94X3VzZXJzOiB7JGV4aXN0czpmYWxzZX19LCB7aW5ib3hfdXNlcnM6IFtdfV19LCB7ZmllbGRzOiB7X2lkOiAxLCBzdGF0ZTogMSwgc3BhY2U6IDEsIHN1Ym1pdHRlcjogMSwgaW5ib3hfdXNlcnM6IDEsIG1vZGlmaWVkOiAxLCBuYW1lOiAxfSwgc29ydDp7bW9kaWZpZWQ6IC0xfX0pIiwiTWV0ZW9yLnB1Ymxpc2goJ2luc3RhbmNlc19kcmFmdCcsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgdmFyIHVzZXJJZDtcbiAgY2hlY2soc3BhY2VJZCwgU3RyaW5nKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgdXNlcklkID0gdGhpcy51c2VySWQ7XG4gIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgc3RhdGU6IFwiZHJhZnRcIixcbiAgICBzcGFjZTogc3BhY2VJZCxcbiAgICBzdWJtaXR0ZXI6IHVzZXJJZCxcbiAgICAkb3I6IFtcbiAgICAgIHtcbiAgICAgICAgaW5ib3hfdXNlcnM6IHtcbiAgICAgICAgICAkZXhpc3RzOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGluYm94X3VzZXJzOiBbXVxuICAgICAgfVxuICAgIF1cbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxLFxuICAgICAgc3RhdGU6IDEsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIHN1Ym1pdHRlcjogMSxcbiAgICAgIGluYm94X3VzZXJzOiAxLFxuICAgICAgbW9kaWZpZWQ6IDEsXG4gICAgICBuYW1lOiAxXG4gICAgfSxcbiAgICBzb3J0OiB7XG4gICAgICBtb2RpZmllZDogLTFcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAnZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcycsIChpbnN0YW5jZV9pZHMpLT5cblx0Y2hlY2soaW5zdGFuY2VfaWRzLCBBcnJheSlcblxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cdFxuXHR1bmxlc3MgaW5zdGFuY2VfaWRzXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdGlmIF8uaXNFbXB0eShpbnN0YW5jZV9pZHMpXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHNlbGYgPSB0aGlzXG5cblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogaW5zdGFuY2VfaWRzfX0sIHtmaWVsZHM6IHtzdGF0ZTogMSwgdHJhY2VzOnskc2xpY2U6IDF9IH0gfSkub2JzZXJ2ZUNoYW5nZXMge1xuXHRcdGFkZGVkOiAoaWQsIGZpZWxkcyktPlxuXHRcdFx0c2VsZi5hZGRlZCgnaW5zdGFuY2VzJywgaWQsIHtzdGF0ZTogZmllbGRzLnN0YXRlLCBpc19yZWFkOiBmaWVsZHMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmlzX3JlYWR9KVxuXG5cdFx0Y2hhbmdlZDogKGlkLCBmaWVsZHMpLT5cblx0XHRcdGlmIGZpZWxkcy5zdGF0ZVxuXHRcdFx0XHRzZWxmLmNoYW5nZWQoJ2luc3RhbmNlcycsIGlkLCB7c3RhdGU6IGZpZWxkcy5zdGF0ZX0pXG5cdFx0XHRpZiBmaWVsZHMudHJhY2VzXG5cdFx0XHRcdHNlbGYuY2hhbmdlZCgnaW5zdGFuY2VzJywgaWQsIHtpc19yZWFkOiBmaWVsZHMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmlzX3JlYWR9KVxuXHR9XG5cblx0dGhpcy5yZWFkeSgpXG5cdHRoaXMub25TdG9wICgpLT5cblx0XHRoYW5kbGUuc3RvcCgpXG4iLCJNZXRlb3IucHVibGlzaCgnZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcycsIGZ1bmN0aW9uKGluc3RhbmNlX2lkcykge1xuICB2YXIgaGFuZGxlLCBzZWxmO1xuICBjaGVjayhpbnN0YW5jZV9pZHMsIEFycmF5KTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFpbnN0YW5jZV9pZHMpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmIChfLmlzRW1wdHkoaW5zdGFuY2VfaWRzKSkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICBfaWQ6IHtcbiAgICAgICRpbjogaW5zdGFuY2VfaWRzXG4gICAgfVxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBzdGF0ZTogMSxcbiAgICAgIHRyYWNlczoge1xuICAgICAgICAkc2xpY2U6IDFcbiAgICAgIH1cbiAgICB9XG4gIH0pLm9ic2VydmVDaGFuZ2VzKHtcbiAgICBhZGRlZDogZnVuY3Rpb24oaWQsIGZpZWxkcykge1xuICAgICAgcmV0dXJuIHNlbGYuYWRkZWQoJ2luc3RhbmNlcycsIGlkLCB7XG4gICAgICAgIHN0YXRlOiBmaWVsZHMuc3RhdGUsXG4gICAgICAgIGlzX3JlYWQ6IGZpZWxkcy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uaXNfcmVhZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjaGFuZ2VkOiBmdW5jdGlvbihpZCwgZmllbGRzKSB7XG4gICAgICBpZiAoZmllbGRzLnN0YXRlKSB7XG4gICAgICAgIHNlbGYuY2hhbmdlZCgnaW5zdGFuY2VzJywgaWQsIHtcbiAgICAgICAgICBzdGF0ZTogZmllbGRzLnN0YXRlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGZpZWxkcy50cmFjZXMpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZCgnaW5zdGFuY2VzJywgaWQsIHtcbiAgICAgICAgICBpc19yZWFkOiBmaWVsZHMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmlzX3JlYWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGhpcy5yZWFkeSgpO1xuICByZXR1cm4gdGhpcy5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAncmVsYXRlZF9pbnN0YWNlcycsIChpbnN0YW5jZUlkLCByZWxhdGVkX2luc3RhbmNlcyktPlxuXHR1bmxlc3MgdGhpcy51c2VySWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0dW5sZXNzIGluc3RhbmNlSWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0cmVsYXRlZF9pbnN0YW5jZV9pZHMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZUlkLHtmaWVsZHM6IHtyZWxhdGVkX2luc3RhbmNlczogMX19KT8ucmVsYXRlZF9pbnN0YW5jZXNcblxuXHRpZiByZWxhdGVkX2luc3RhbmNlX2lkcyAmJiBfLmlzQXJyYXkocmVsYXRlZF9pbnN0YW5jZV9pZHMpXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW4gOiByZWxhdGVkX2luc3RhbmNlX2lkc319LCB7ZmllbGRzOiB7X2lkOiAxLCBuYW1lOiAxLCBzcGFjZTogMX19KVxuXHRlbHNlXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKSIsIk1ldGVvci5wdWJsaXNoKCdyZWxhdGVkX2luc3RhY2VzJywgZnVuY3Rpb24oaW5zdGFuY2VJZCwgcmVsYXRlZF9pbnN0YW5jZXMpIHtcbiAgdmFyIHJlZiwgcmVsYXRlZF9pbnN0YW5jZV9pZHM7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghaW5zdGFuY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmVsYXRlZF9pbnN0YW5jZV9pZHMgPSAocmVmID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VJZCwge1xuICAgIGZpZWxkczoge1xuICAgICAgcmVsYXRlZF9pbnN0YW5jZXM6IDFcbiAgICB9XG4gIH0pKSAhPSBudWxsID8gcmVmLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwO1xuICBpZiAocmVsYXRlZF9pbnN0YW5jZV9pZHMgJiYgXy5pc0FycmF5KHJlbGF0ZWRfaW5zdGFuY2VfaWRzKSkge1xuICAgIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICBfaWQ6IHtcbiAgICAgICAgJGluOiByZWxhdGVkX2luc3RhbmNlX2lkc1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBfaWQ6IDEsXG4gICAgICAgIG5hbWU6IDEsXG4gICAgICAgIHNwYWNlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxufSk7XG4iLCJpZiBNZXRlb3IuaXNTZXJ2ZXJcbiAgICBNZXRlb3IucHVibGlzaCAnc3BhY2VfdXNlcl9zaWducycsIChzcGFjZUlkKSAtPlxuICAgICAgICBjaGVjayBzcGFjZUlkLCBTdHJpbmdcblxuICAgICAgICB1bmxlc3MgdGhpcy51c2VySWRcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWR5KClcblxuICAgICAgICByZXR1cm4gZGIuc3BhY2VfdXNlcl9zaWducy5maW5kKHsgc3BhY2U6IHNwYWNlSWQgfSwge2ZpZWxkczoge2NyZWF0ZWRfYnk6IDAsIGNyZWF0ZWQ6IDAsIG1vZGlmaWVkX2J5OiAwfX0pXG4iLCJpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIE1ldGVvci5wdWJsaXNoKCdzcGFjZV91c2VyX3NpZ25zJywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICAgIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJfc2lnbnMuZmluZCh7XG4gICAgICBzcGFjZTogc3BhY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBjcmVhdGVkX2J5OiAwLFxuICAgICAgICBjcmVhdGVkOiAwLFxuICAgICAgICBtb2RpZmllZF9ieTogMFxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbiIsIiMjI1xuTWV0ZW9yLnB1Ymxpc2hDb21wb3NpdGUgXCJ1c2VyX2luYm94X2luc3RhbmNlXCIsICgpLT5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHVzZXJTcGFjZUlkcyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuXHRcdHVzZXI6IHRoaXMudXNlcklkLFxuXHRcdHVzZXJfYWNjZXB0ZWQ6IHRydWVcblx0fSwge2ZpZWxkczoge3NwYWNlOiAxfX0pLmZldGNoKCkuZ2V0RWFjaChcInNwYWNlXCIpO1xuXHRxdWVyeSA9IHtzcGFjZTogeyRpbjogdXNlclNwYWNlSWRzfX1cblxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxuXG5cdGZpbmQ6IC0+XG5cdFx0ZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRzcGFjZTogMSxcblx0XHRcdFx0YXBwbGljYW50X25hbWU6IDEsXG5cdFx0XHRcdGZsb3c6IDEsXG5cdFx0XHRcdGluYm94X3VzZXJzOiAxLFxuXHRcdFx0XHRjY191c2VyczogMSxcblx0XHRcdFx0c3RhdGU6IDEsXG5cdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHRcdG1vZGlmaWVkOiAxLFxuXHRcdFx0XHRmb3JtOiAxXG5cdFx0XHR9LCBzb3J0OiB7bW9kaWZpZWQ6IC0xfSwgc2tpcDogMCwgbGltaXQ6IDIwMFxuXHRcdH0pO1xuXHRjaGlsZHJlbjogW1xuXHRcdHtcblx0XHRcdGZpbmQ6IChpbnN0YW5jZSwgcG9zdCktPlxuXHRcdFx0XHRkYi5mbG93cy5maW5kKHtfaWQ6IGluc3RhbmNlLmZsb3d9LCB7ZmllbGRzOiB7bmFtZTogMSwgc3BhY2U6IDF9fSk7XG5cdFx0fVxuXHRdXG4jIyNcblxuIyMjXG5NZXRlb3IucHVibGlzaCAnbXlfaW5ib3hfaW5zdGFuY2VzJywgKHNwYWNlSWQpLT5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHNlbGYgPSB0aGlzO1xuXG5cdCNcdHVzZXJTcGFjZUlkcyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuXHQjXHRcdHVzZXI6IHRoaXMudXNlcklkLFxuXHQjXHRcdHVzZXJfYWNjZXB0ZWQ6IHRydWVcblx0I1x0fSwge2ZpZWxkczoge3NwYWNlOiAxfX0pLmZldGNoKCkuZ2V0RWFjaChcInNwYWNlXCIpO1xuXG5cdHF1ZXJ5ID0ge3NwYWNlOiBzcGFjZUlkfVxuXG5cdHF1ZXJ5LiRvciA9IFt7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dXG5cblx0ZmllbGRzID0ge1xuXHRcdHNwYWNlOiAxLFxuI1x0XHRhcHBsaWNhbnRfbmFtZTogMSxcblx0XHRmbG93OiAxLFxuXHRcdGluYm94X3VzZXJzOiAxLFxuXHRcdGNjX3VzZXJzOiAxLFxuXHRcdHN0YXRlOiAxLFxuI1x0XHRuYW1lOiAxLFxuI1x0XHRtb2RpZmllZDogMSxcblx0XHRmb3JtOiAxXG5cdH1cblxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge3NvcnQ6IHttb2RpZmllZDogLTF9LCBza2lwOiAwLCBsaW1pdDogNTAwfSkub2JzZXJ2ZUNoYW5nZXMge1xuXHRcdGFkZGVkOiAoaWQpLT5cblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxuXHRcdFx0aW5zdGFuY2UuaXNfY2MgPSBpbnN0YW5jZS5jY191c2Vycz8uaW5jbHVkZXMoc2VsZi51c2VySWQpIHx8IGZhbHNlXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcblx0XHRcdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKVxuXHRcdGNoYW5nZWQ6IChpZCktPlxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXG5cdFx0XHRyZXR1cm4gaWYgbm90IGluc3RhbmNlXG5cdFx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2Vcblx0XHRcdGRlbGV0ZSBpbnN0YW5jZS5jY191c2Vyc1xuXHRcdFx0c2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSk7XG5cdFx0cmVtb3ZlZDogKGlkKS0+XG5cdFx0XHRzZWxmLnJlbW92ZWQoXCJpbnN0YW5jZXNcIiwgaWQpO1xuXHR9XG5cblx0c2VsZi5yZWFkeSgpO1xuXHRzZWxmLm9uU3RvcCAoKS0+XG5cdFx0aGFuZGxlLnN0b3AoKVxuIyMjXG5cbl9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlID0gKHNwYWNlSWQsIHVzZXJJZCwgX2l0ZW1zLCBjYWxsYmFjayktPlxuXHRkYi5pbnN0YW5jZXMucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShbXG5cdFx0e1xuXHRcdFx0JG1hdGNoOiB7XG5cdFx0XHRcdHNwYWNlOiBzcGFjZUlkLFxuXHRcdFx0XHQkb3I6IFt7aW5ib3hfdXNlcnM6IHVzZXJJZH0sIHtjY191c2VyczogdXNlcklkfV1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHtcblx0XHRcdCRncm91cDoge1xuXHRcdFx0XHRfaWQ6IHtmbG93OiBcIiRmbG93XCIsIGNhdGVnb3J5OiBcIiRjYXRlZ29yeVwifSwgY291bnQ6IHskc3VtOiAxfVxuXHRcdFx0fVxuXHRcdH1cblx0XSkudG9BcnJheSAoZXJyLCBkYXRhKS0+XG5cdFx0aWYgZXJyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoZXJyKVxuXG5cdFx0ZGF0YS5mb3JFYWNoIChkb2MpIC0+XG5cdFx0XHRfaXRlbXMucHVzaCBkb2NcblxuXHRcdGlmIGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaylcblx0XHRcdGNhbGxiYWNrKClcblx0XHRyZXR1cm5cblxuX2FzeW5jX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKF9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlKVxuXG5NZXRlb3IucHVibGlzaCAnbXlfaW5ib3hfZmxvd19pbnN0YW5jZXNfY291bnQnLCAoc3BhY2VJZCktPlxuXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHRzZWxmID0gdGhpcztcblxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2VJZH1cblxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxuXG5cdGRhdGEgPSBbXSAgI+aVsOaNruagvOW8j++8mlt7X2lkOmZsb3dJZCwgY291bnQ6IOW+heWKnuaVsOmHj30sIHtfaWQ6Zmxvd0lkMiwgY291bnQ6IOW+heWKnuaVsOmHjzJ9XVxuXHRfYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZShzcGFjZUlkLCBzZWxmLnVzZXJJZCwgZGF0YSlcblxuXHRfZmxvd3NEYXRhID0gW11cblxuXHRfLmVhY2ggZGF0YSwgKGRhdGFJdGVtKS0+XG5cdFx0X2Zsb3dzRGF0YS5wdXNoKHtfaWQ6IGRhdGFJdGVtLl9pZC5mbG93LCBjYXRlZ29yeTogZGF0YUl0ZW0uX2lkLmNhdGVnb3J5LCBjb3VudDogZGF0YUl0ZW0uY291bnR9KVxuXG5cdHNlbGYuYWRkZWQoXCJmbG93X2luc3RhbmNlc1wiLCBzcGFjZUlkLCB7Zmxvd3M6IF9mbG93c0RhdGF9KTtcblxuXHRfY2hhbmdlRGF0YSA9IChkb2MsIGFjdGlvbiktPlxuXHRcdGZsb3dfaW5zdGFuY2UgPSBfLmZpbmQgX2Zsb3dzRGF0YSwgKGYpLT5cblx0XHRcdHJldHVybiBmLl9pZCA9PSBkb2MuZmxvd1xuXHRcdGlmIGZsb3dfaW5zdGFuY2Vcblx0XHRcdGlmIGFjdGlvbiA9PSBcImFkZGVkXCJcblx0XHRcdFx0Zmxvd19pbnN0YW5jZS5jb3VudCsrXG5cdFx0XHRlbHNlIGlmIGFjdGlvbiA9PSBcInJlbW92ZWRcIlxuXHRcdFx0XHRmbG93X2luc3RhbmNlLmNvdW50LS1cblx0XHRlbHNlIGlmIGFjdGlvbiA9PSBcImFkZGVkXCJcblx0XHRcdF9mbG93c0RhdGEucHVzaCB7X2lkOiBkb2MuZmxvdywgY2F0ZWdvcnk6IGRvYy5jYXRlZ29yeSwgY291bnQ6IDF9XG5cblx0XHRzZWxmLmNoYW5nZWQoXCJmbG93X2luc3RhbmNlc1wiLCBzcGFjZUlkLCB7Zmxvd3M6IF9mbG93c0RhdGF9KTtcblxuXHRfaW5pdCA9IHRydWVcblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtmaWVsZHM6IHtfaWQ6IDEsIGluYm94X3VzZXJzOiAxLCBjY191c2VyczogMSwgZmxvdzogMSwgY2F0ZWdvcnk6IDF9fSkub2JzZXJ2ZSB7XG5cdFx0YWRkZWQ6IChkb2MpLT5cblx0XHRcdGlmICFfaW5pdFxuXHRcdFx0XHRfY2hhbmdlRGF0YShkb2MsIFwiYWRkZWRcIilcblx0XHRyZW1vdmVkOiAoZG9jKS0+XG5cdFx0XHRpZiAhX2luaXRcblx0XHRcdFx0X2NoYW5nZURhdGEoZG9jLCBcInJlbW92ZWRcIilcblx0fVxuXHRfaW5pdCA9IGZhbHNlXG5cblx0c2VsZi5yZWFkeSgpO1xuXHRzZWxmLm9uU3RvcCAoKS0+XG5cdFx0aGFuZGxlLnN0b3AoKSIsIlxuLypcbk1ldGVvci5wdWJsaXNoQ29tcG9zaXRlIFwidXNlcl9pbmJveF9pbnN0YW5jZVwiLCAoKS0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1c2VyU3BhY2VJZHMgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcblx0XHR1c2VyOiB0aGlzLnVzZXJJZCxcblx0XHR1c2VyX2FjY2VwdGVkOiB0cnVlXG5cdH0sIHtmaWVsZHM6IHtzcGFjZTogMX19KS5mZXRjaCgpLmdldEVhY2goXCJzcGFjZVwiKTtcblx0cXVlcnkgPSB7c3BhY2U6IHskaW46IHVzZXJTcGFjZUlkc319XG5cblx0cXVlcnkuJG9yID0gW3tpbmJveF91c2VyczogdGhpcy51c2VySWR9LCB7Y2NfdXNlcnM6IHRoaXMudXNlcklkfV1cblxuXHRmaW5kOiAtPlxuXHRcdGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0c3BhY2U6IDEsXG5cdFx0XHRcdGFwcGxpY2FudF9uYW1lOiAxLFxuXHRcdFx0XHRmbG93OiAxLFxuXHRcdFx0XHRpbmJveF91c2VyczogMSxcblx0XHRcdFx0Y2NfdXNlcnM6IDEsXG5cdFx0XHRcdHN0YXRlOiAxLFxuXHRcdFx0XHRuYW1lOiAxLFxuXHRcdFx0XHRtb2RpZmllZDogMSxcblx0XHRcdFx0Zm9ybTogMVxuXHRcdFx0fSwgc29ydDoge21vZGlmaWVkOiAtMX0sIHNraXA6IDAsIGxpbWl0OiAyMDBcblx0XHR9KTtcblx0Y2hpbGRyZW46IFtcblx0XHR7XG5cdFx0XHRmaW5kOiAoaW5zdGFuY2UsIHBvc3QpLT5cblx0XHRcdFx0ZGIuZmxvd3MuZmluZCh7X2lkOiBpbnN0YW5jZS5mbG93fSwge2ZpZWxkczoge25hbWU6IDEsIHNwYWNlOiAxfX0pO1xuXHRcdH1cblx0XVxuICovXG5cbi8qXG5NZXRlb3IucHVibGlzaCAnbXlfaW5ib3hfaW5zdGFuY2VzJywgKHNwYWNlSWQpLT5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHNlbGYgPSB0aGlzO1xuXG5cdCAqXHR1c2VyU3BhY2VJZHMgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcblx0ICpcdFx0dXNlcjogdGhpcy51c2VySWQsXG5cdCAqXHRcdHVzZXJfYWNjZXB0ZWQ6IHRydWVcblx0ICpcdH0sIHtmaWVsZHM6IHtzcGFjZTogMX19KS5mZXRjaCgpLmdldEVhY2goXCJzcGFjZVwiKTtcblxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2VJZH1cblxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxuXG5cdGZpZWxkcyA9IHtcblx0XHRzcGFjZTogMSxcbiAqXHRcdGFwcGxpY2FudF9uYW1lOiAxLFxuXHRcdGZsb3c6IDEsXG5cdFx0aW5ib3hfdXNlcnM6IDEsXG5cdFx0Y2NfdXNlcnM6IDEsXG5cdFx0c3RhdGU6IDEsXG4gKlx0XHRuYW1lOiAxLFxuICpcdFx0bW9kaWZpZWQ6IDEsXG5cdFx0Zm9ybTogMVxuXHR9XG5cblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtzb3J0OiB7bW9kaWZpZWQ6IC0xfSwgc2tpcDogMCwgbGltaXQ6IDUwMH0pLm9ic2VydmVDaGFuZ2VzIHtcblx0XHRhZGRlZDogKGlkKS0+XG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGlkfSwge2ZpZWxkczogZmllbGRzfSlcblx0XHRcdHJldHVybiBpZiBub3QgaW5zdGFuY2Vcblx0XHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxuXHRcdFx0ZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzXG5cdFx0XHRzZWxmLmFkZGVkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSlcblx0XHRjaGFuZ2VkOiAoaWQpLT5cblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxuXHRcdFx0aW5zdGFuY2UuaXNfY2MgPSBpbnN0YW5jZS5jY191c2Vycz8uaW5jbHVkZXMoc2VsZi51c2VySWQpIHx8IGZhbHNlXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcblx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xuXHRcdHJlbW92ZWQ6IChpZCktPlxuXHRcdFx0c2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcblx0fVxuXG5cdHNlbGYucmVhZHkoKTtcblx0c2VsZi5vblN0b3AgKCktPlxuXHRcdGhhbmRsZS5zdG9wKClcbiAqL1xudmFyIF9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlLCBfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZTtcblxuX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUgPSBmdW5jdGlvbihzcGFjZUlkLCB1c2VySWQsIF9pdGVtcywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGRiLmluc3RhbmNlcy5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKFtcbiAgICB7XG4gICAgICAkbWF0Y2g6IHtcbiAgICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICAgICRvcjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluYm94X3VzZXJzOiB1c2VySWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBjY191c2VyczogdXNlcklkXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgJGdyb3VwOiB7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgIGZsb3c6IFwiJGZsb3dcIixcbiAgICAgICAgICBjYXRlZ29yeTogXCIkY2F0ZWdvcnlcIlxuICAgICAgICB9LFxuICAgICAgICBjb3VudDoge1xuICAgICAgICAgICRzdW06IDFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXSkudG9BcnJheShmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIF9pdGVtcy5wdXNoKGRvYyk7XG4gICAgfSk7XG4gICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbl9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSk7XG5cbk1ldGVvci5wdWJsaXNoKCdteV9pbmJveF9mbG93X2luc3RhbmNlc19jb3VudCcsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgdmFyIF9jaGFuZ2VEYXRhLCBfZmxvd3NEYXRhLCBfaW5pdCwgZGF0YSwgaGFuZGxlLCBxdWVyeSwgc2VsZjtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIHF1ZXJ5ID0ge1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH07XG4gIHF1ZXJ5LiRvciA9IFtcbiAgICB7XG4gICAgICBpbmJveF91c2VyczogdGhpcy51c2VySWRcbiAgICB9LCB7XG4gICAgICBjY191c2VyczogdGhpcy51c2VySWRcbiAgICB9XG4gIF07XG4gIGRhdGEgPSBbXTtcbiAgX2FzeW5jX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUoc3BhY2VJZCwgc2VsZi51c2VySWQsIGRhdGEpO1xuICBfZmxvd3NEYXRhID0gW107XG4gIF8uZWFjaChkYXRhLCBmdW5jdGlvbihkYXRhSXRlbSkge1xuICAgIHJldHVybiBfZmxvd3NEYXRhLnB1c2goe1xuICAgICAgX2lkOiBkYXRhSXRlbS5faWQuZmxvdyxcbiAgICAgIGNhdGVnb3J5OiBkYXRhSXRlbS5faWQuY2F0ZWdvcnksXG4gICAgICBjb3VudDogZGF0YUl0ZW0uY291bnRcbiAgICB9KTtcbiAgfSk7XG4gIHNlbGYuYWRkZWQoXCJmbG93X2luc3RhbmNlc1wiLCBzcGFjZUlkLCB7XG4gICAgZmxvd3M6IF9mbG93c0RhdGFcbiAgfSk7XG4gIF9jaGFuZ2VEYXRhID0gZnVuY3Rpb24oZG9jLCBhY3Rpb24pIHtcbiAgICB2YXIgZmxvd19pbnN0YW5jZTtcbiAgICBmbG93X2luc3RhbmNlID0gXy5maW5kKF9mbG93c0RhdGEsIGZ1bmN0aW9uKGYpIHtcbiAgICAgIHJldHVybiBmLl9pZCA9PT0gZG9jLmZsb3c7XG4gICAgfSk7XG4gICAgaWYgKGZsb3dfaW5zdGFuY2UpIHtcbiAgICAgIGlmIChhY3Rpb24gPT09IFwiYWRkZWRcIikge1xuICAgICAgICBmbG93X2luc3RhbmNlLmNvdW50Kys7XG4gICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZW1vdmVkXCIpIHtcbiAgICAgICAgZmxvd19pbnN0YW5jZS5jb3VudC0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcImFkZGVkXCIpIHtcbiAgICAgIF9mbG93c0RhdGEucHVzaCh7XG4gICAgICAgIF9pZDogZG9jLmZsb3csXG4gICAgICAgIGNhdGVnb3J5OiBkb2MuY2F0ZWdvcnksXG4gICAgICAgIGNvdW50OiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImZsb3dfaW5zdGFuY2VzXCIsIHNwYWNlSWQsIHtcbiAgICAgIGZsb3dzOiBfZmxvd3NEYXRhXG4gICAgfSk7XG4gIH07XG4gIF9pbml0ID0gdHJ1ZTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMSxcbiAgICAgIGluYm94X3VzZXJzOiAxLFxuICAgICAgY2NfdXNlcnM6IDEsXG4gICAgICBmbG93OiAxLFxuICAgICAgY2F0ZWdvcnk6IDFcbiAgICB9XG4gIH0pLm9ic2VydmUoe1xuICAgIGFkZGVkOiBmdW5jdGlvbihkb2MpIHtcbiAgICAgIGlmICghX2luaXQpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFuZ2VEYXRhKGRvYywgXCJhZGRlZFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZWQ6IGZ1bmN0aW9uKGRvYykge1xuICAgICAgaWYgKCFfaW5pdCkge1xuICAgICAgICByZXR1cm4gX2NoYW5nZURhdGEoZG9jLCBcInJlbW92ZWRcIik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgX2luaXQgPSBmYWxzZTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJcbk1ldGVvci5wdWJsaXNoICdmbG93X21haW5fYXR0YWNoX3RlbXBsYXRlJywgKHNwYWNlSWQsIGZsb3dJZCktPlxuXHRjaGVjayhzcGFjZUlkLCBTdHJpbmcpXG5cdGNoZWNrKGZsb3dJZCwgU3RyaW5nKVxuXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1bmxlc3Mgc3BhY2VJZCAmJiBmbG93SWRcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXG5cblx0cmV0dXJuIENyZWF0b3IuZ2V0Q29sbGVjdGlvbignY21zX2ZpbGVzJykuZmluZCh7IHNwYWNlOiBzcGFjZUlkLCAncGFyZW50Lm8nOiAnZmxvd3MnLCAncGFyZW50Lmlkcyc6IGZsb3dJZCwgIG5hbWU6ICfmraPmlocuZG9jeCcgfSlcbiIsIk1ldGVvci5wdWJsaXNoKCdmbG93X21haW5fYXR0YWNoX3RlbXBsYXRlJywgZnVuY3Rpb24oc3BhY2VJZCwgZmxvd0lkKSB7XG4gIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XG4gIGNoZWNrKGZsb3dJZCwgU3RyaW5nKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCEoc3BhY2VJZCAmJiBmbG93SWQpKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gQ3JlYXRvci5nZXRDb2xsZWN0aW9uKCdjbXNfZmlsZXMnKS5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZCxcbiAgICAncGFyZW50Lm8nOiAnZmxvd3MnLFxuICAgICdwYXJlbnQuaWRzJzogZmxvd0lkLFxuICAgIG5hbWU6ICfmraPmlocuZG9jeCdcbiAgfSk7XG59KTtcbiIsIndvcmtmbG93VGVtcGxhdGUgPSB7fVxuXG4j5Y+v55So5q2k6ISa5pys5LuO5qih5p2/5bel5L2c5Yy65YGa5om56YeP5a+85Ye677yaXG4j5L2/55So566h55CG5ZGY6LSm5oi355m75b2V5ZCO77yM6L+b5YWlRmxvd01vZHVsZXPvvIzlnKjmjqfliLblj7DmiafooYzku6XkuIvohJrmnKzljbPlj69cbiNkYi5mb3Jtcy5maW5kKHtzdGF0ZTpcImVuYWJsZWRcIn0pLmZvckVhY2goZnVuY3Rpb24oZm9ybSl7d2luZG93Lm9wZW4oTWV0ZW9yLmFic29sdXRlVXJsKFwiYXBpL3dvcmtmbG93L2V4cG9ydC9mb3JtP2Zvcm09XCIrZm9ybS5faWQpKX0pXG53b3JrZmxvd1RlbXBsYXRlW1wiZW5cIl0gPVtdXG5cbiPlj6/nlKjmraTohJrmnKzku47mqKHmnb/lt6XkvZzljLrlgZrmibnph4/lr7zlh7rvvJpcbiPkvb/nlKjnrqHnkIblkZjotKbmiLfnmbvlvZXlkI7vvIzov5vlhaXmqKHmnb/kuJPljLrvvIzlnKjmjqfliLblj7DmiafooYzku6XkuIvohJrmnKzljbPlj69cbiNkYi5mb3Jtcy5maW5kKHtzdGF0ZTpcImVuYWJsZWRcIn0pLmZvckVhY2goZnVuY3Rpb24oZm9ybSl7d2luZG93Lm9wZW4oTWV0ZW9yLmFic29sdXRlVXJsKFwiYXBpL3dvcmtmbG93L2V4cG9ydC9mb3JtP2Zvcm09XCIrZm9ybS5faWQpKX0pXG53b3JrZmxvd1RlbXBsYXRlW1wiemgtQ05cIl0gPVtdXG5cbk1ldGVvci5zdGFydHVwICgpLT5cblx0ZnMgPSByZXF1aXJlKCdmcycpXG5cdHBhdGggPSByZXF1aXJlKCdwYXRoJylcblx0bWltZSA9IHJlcXVpcmUoJ21pbWUnKVxuXHRyZWFkRmlsZUxpc3QgPSAocGF0aERpciwgZmlsZXNMaXN0KS0+XG5cdFx0ZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhwYXRoRGlyKVxuXHRcdGZpbGVzLmZvckVhY2ggKG5hbWUsIGluZGV4KS0+XG5cdFx0XHRzdGF0ID0gZnMuc3RhdFN5bmMocGF0aC5qb2luKHBhdGhEaXIsIG5hbWUpKVxuXHRcdFx0aWYgc3RhdC5pc0RpcmVjdG9yeSgpXG5cdFx0XHRcdCMg6YCS5b2S6K+75Y+W5paH5Lu2XG5cdFx0XHRcdHJlYWRGaWxlTGlzdChwYXRoLmpvaW4ocGF0aERpciwgbmFtZSksIGZpbGVzTGlzdClcblx0XHRcdGVsc2Vcblx0XHRcdFx0b2JqID0ge31cblx0XHRcdFx0b2JqLnBhdGggPSBwYXRoRGlyXG5cdFx0XHRcdG9iai5uYW1lID0gbmFtZVxuXHRcdFx0XHRmaWxlc0xpc3QucHVzaChvYmopXG5cblx0I+iOt+WPlnpoLWNu5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XG5cdGZpbGVzTGlzdF9jbiA9IFtdXG5cdHBhdGhfY24gPSBNZXRlb3Iuc2V0dGluZ3Mud29ya2Zsb3dUZW1wbGF0ZXM/LnBhdGhfY25cblx0aWYgcGF0aF9jblxuXHRcdGFic29sdXRlX3BhdGhfY24gPSBwYXRoLnJlc29sdmUocGF0aF9jbilcblx0XHRjb25zb2xlLmxvZyBcImFic29sdXRlX3BhdGhfY25cIiwgYWJzb2x1dGVfcGF0aF9jblxuXHRcdGlmIGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVfcGF0aF9jbilcblx0XHRcdHJlYWRGaWxlTGlzdChhYnNvbHV0ZV9wYXRoX2NuLCBmaWxlc0xpc3RfY24pXG5cdFx0XHRmaWxlc0xpc3RfY24uZm9yRWFjaCAoZmlsZSktPlxuXHRcdFx0XHR0cnlcblx0XHRcdFx0XHRpZiBtaW1lLmdldFR5cGUoZmlsZS5uYW1lKSBpcyBcImFwcGxpY2F0aW9uL2pzb25cIlxuXHRcdFx0XHRcdFx0ZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpLCAndXRmOCcpXG5cdFx0XHRcdFx0XHR3b3JrZmxvd1RlbXBsYXRlW1wiemgtQ05cIl0ucHVzaChKU09OLnBhcnNlKGRhdGEpKVxuXHRcdFx0XHRjYXRjaCBlXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciBcIuiOt+WPlnpoLWNu5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XCIsIHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSlcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcblxuXHQj6I635Y+WZW4tdXPmlofku7blpLnkuIvnmoTmiYDmnInmlofku7Zcblx0ZmlsZXNMaXN0X3VzID0gW11cblx0cGF0aF91cyA9IE1ldGVvci5zZXR0aW5ncy53b3JrZmxvd1RlbXBsYXRlcz8ucGF0aF91c1xuXHRpZiBwYXRoX3VzXG5cdFx0YWJzb2x1dGVfcGF0aF91cyA9IHBhdGgucmVzb2x2ZShwYXRoX3VzKVxuXHRcdGNvbnNvbGUubG9nIFwiYWJzb2x1dGVfcGF0aF91c1wiLCBhYnNvbHV0ZV9wYXRoX3VzXG5cdFx0aWYgZnMuZXhpc3RzU3luYyhhYnNvbHV0ZV9wYXRoX3VzKVxuXHRcdFx0cmVhZEZpbGVMaXN0KGFic29sdXRlX3BhdGhfdXMsIGZpbGVzTGlzdF91cylcblx0XHRcdGZpbGVzTGlzdF91cy5mb3JFYWNoIChmaWxlKS0+XG5cdFx0XHRcdHRyeVxuXHRcdFx0XHRcdGlmIG1pbWUuZ2V0VHlwZShmaWxlLm5hbWUpIGlzIFwiYXBwbGljYXRpb24vanNvblwiXG5cdFx0XHRcdFx0XHRkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSksICd1dGY4Jylcblx0XHRcdFx0XHRcdHdvcmtmbG93VGVtcGxhdGVbXCJlblwiXS5wdXNoKEpTT04ucGFyc2UoZGF0YSkpXG5cdFx0XHRcdGNhdGNoIGVcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yIFwi6I635Y+WZW4tdXPmlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcIiwgcGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKVxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdFx0XHRcblx0XHRcdFx0XHRcblxuXG4iLCIgICAgICAgICAgICAgICAgICAgICBcblxud29ya2Zsb3dUZW1wbGF0ZSA9IHt9O1xuXG53b3JrZmxvd1RlbXBsYXRlW1wiZW5cIl0gPSBbXTtcblxud29ya2Zsb3dUZW1wbGF0ZVtcInpoLUNOXCJdID0gW107XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICB2YXIgYWJzb2x1dGVfcGF0aF9jbiwgYWJzb2x1dGVfcGF0aF91cywgZmlsZXNMaXN0X2NuLCBmaWxlc0xpc3RfdXMsIGZzLCBtaW1lLCBwYXRoLCBwYXRoX2NuLCBwYXRoX3VzLCByZWFkRmlsZUxpc3QsIHJlZiwgcmVmMTtcbiAgZnMgPSByZXF1aXJlKCdmcycpO1xuICBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICBtaW1lID0gcmVxdWlyZSgnbWltZScpO1xuICByZWFkRmlsZUxpc3QgPSBmdW5jdGlvbihwYXRoRGlyLCBmaWxlc0xpc3QpIHtcbiAgICB2YXIgZmlsZXM7XG4gICAgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhwYXRoRGlyKTtcbiAgICByZXR1cm4gZmlsZXMuZm9yRWFjaChmdW5jdGlvbihuYW1lLCBpbmRleCkge1xuICAgICAgdmFyIG9iaiwgc3RhdDtcbiAgICAgIHN0YXQgPSBmcy5zdGF0U3luYyhwYXRoLmpvaW4ocGF0aERpciwgbmFtZSkpO1xuICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICByZXR1cm4gcmVhZEZpbGVMaXN0KHBhdGguam9pbihwYXRoRGlyLCBuYW1lKSwgZmlsZXNMaXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iaiA9IHt9O1xuICAgICAgICBvYmoucGF0aCA9IHBhdGhEaXI7XG4gICAgICAgIG9iai5uYW1lID0gbmFtZTtcbiAgICAgICAgcmV0dXJuIGZpbGVzTGlzdC5wdXNoKG9iaik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGZpbGVzTGlzdF9jbiA9IFtdO1xuICBwYXRoX2NuID0gKHJlZiA9IE1ldGVvci5zZXR0aW5ncy53b3JrZmxvd1RlbXBsYXRlcykgIT0gbnVsbCA/IHJlZi5wYXRoX2NuIDogdm9pZCAwO1xuICBpZiAocGF0aF9jbikge1xuICAgIGFic29sdXRlX3BhdGhfY24gPSBwYXRoLnJlc29sdmUocGF0aF9jbik7XG4gICAgY29uc29sZS5sb2coXCJhYnNvbHV0ZV9wYXRoX2NuXCIsIGFic29sdXRlX3BhdGhfY24pO1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGFic29sdXRlX3BhdGhfY24pKSB7XG4gICAgICByZWFkRmlsZUxpc3QoYWJzb2x1dGVfcGF0aF9jbiwgZmlsZXNMaXN0X2NuKTtcbiAgICAgIGZpbGVzTGlzdF9jbi5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgdmFyIGRhdGEsIGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKG1pbWUuZ2V0VHlwZShmaWxlLm5hbWUpID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgICAgICAgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpLCAndXRmOCcpO1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtmbG93VGVtcGxhdGVbXCJ6aC1DTlwiXS5wdXNoKEpTT04ucGFyc2UoZGF0YSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIuiOt+WPlnpoLWNu5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XCIsIHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSkpO1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZmlsZXNMaXN0X3VzID0gW107XG4gIHBhdGhfdXMgPSAocmVmMSA9IE1ldGVvci5zZXR0aW5ncy53b3JrZmxvd1RlbXBsYXRlcykgIT0gbnVsbCA/IHJlZjEucGF0aF91cyA6IHZvaWQgMDtcbiAgaWYgKHBhdGhfdXMpIHtcbiAgICBhYnNvbHV0ZV9wYXRoX3VzID0gcGF0aC5yZXNvbHZlKHBhdGhfdXMpO1xuICAgIGNvbnNvbGUubG9nKFwiYWJzb2x1dGVfcGF0aF91c1wiLCBhYnNvbHV0ZV9wYXRoX3VzKTtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhhYnNvbHV0ZV9wYXRoX3VzKSkge1xuICAgICAgcmVhZEZpbGVMaXN0KGFic29sdXRlX3BhdGhfdXMsIGZpbGVzTGlzdF91cyk7XG4gICAgICByZXR1cm4gZmlsZXNMaXN0X3VzLmZvckVhY2goZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICB2YXIgZGF0YSwgZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAobWltZS5nZXRUeXBlKGZpbGUubmFtZSkgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAgICAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSksICd1dGY4Jyk7XG4gICAgICAgICAgICByZXR1cm4gd29ya2Zsb3dUZW1wbGF0ZVtcImVuXCJdLnB1c2goSlNPTi5wYXJzZShkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwi6I635Y+WZW4tdXPmlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcIiwgcGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKSk7XG4gICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSk7XG4iLCIjIyNcbiogICAgKiAgICAqICAgICogICAgKiAgICAqXG7ilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICB8XG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlCBkYXkgb2Ygd2VlayAoMCAtIDcpICgwIG9yIDcgaXMgU3VuKVxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgCBtb250aCAoMSAtIDEyKVxu4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGRheSBvZiBtb250aCAoMSAtIDMxKVxu4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgaG91ciAoMCAtIDIzKVxu4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBtaW51dGUgKDAgLSA1OSlcbuKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBzZWNvbmQgKDAgLSA1OSwgT1BUSU9OQUwpXG4jIyNcbk1ldGVvci5zdGFydHVwIC0+XG5cdGlmIE1ldGVvci5zZXR0aW5ncy5jcm9uPy5hdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb25cblx0XHRzY2hlZHVsZSA9IHJlcXVpcmUoJ25vZGUtc2NoZWR1bGUnKVxuXHRcdCMg5a6a5pe25omn6KGM5ZCM5q2lXG5cdFx0cnVsZSA9IE1ldGVvci5zZXR0aW5ncy5jcm9uLmF1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvblxuXHRcdGdvX25leHQgPSB0cnVlXG5cdFx0c2NoZWR1bGUuc2NoZWR1bGVKb2IgcnVsZSwgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCAoKS0+XG5cdFx0XHR0cnlcblx0XHRcdFx0aWYgIWdvX25leHRcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Z29fbmV4dCA9IGZhbHNlXG5cdFx0XHRcdGNvbnNvbGUudGltZSAnYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uJ1xuXG5cdFx0XHRcdG5vdyA9IG5ldyBEYXRlXG5cblx0XHRcdFx0IyDlsIblp5TmiZjop4TliJnorr7nva7kuLrkuI3lj6/nlKhcblx0XHRcdFx0ZGIucHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzLnVwZGF0ZSh7IGVuYWJsZWQ6IHRydWUsIGVuZF90aW1lOiB7ICRsdGU6IG5vdyB9IH0sIHsgJHNldDogeyBlbmFibGVkOiBmYWxzZSB9IH0sIHsgbXVsdGkgOnRydWUgfSlcblxuXHRcdFx0XHRjb25zb2xlLnRpbWVFbmQgJ2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbidcblx0XHRcdFx0Z29fbmV4dCA9IHRydWVcblxuXHRcdFx0Y2F0Y2ggZVxuXHRcdFx0XHRjb25zb2xlLmVycm9yIFwiQVVUTyBBVVRPX0ZJTklTSF9QUk9DRVNTX0RFTEVHQVRJT04gRVJST1I6IFwiXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xuXHRcdFx0XHRnb19uZXh0ID0gdHJ1ZVxuXG5cdFx0LCAoZSktPlxuXHRcdFx0Y29uc29sZS5sb2cgJ0ZhaWxlZCB0byBiaW5kIGVudmlyb25tZW50OiBhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24uY29mZmVlJ1xuXHRcdFx0Y29uc29sZS5sb2cgZS5zdGFja1xuIiwiXG4vKlxuKiAgICAqICAgICogICAgKiAgICAqICAgICpcbuKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKwgICAg4pSsXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIHxcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSUIGRheSBvZiB3ZWVrICgwIC0gNykgKDAgb3IgNyBpcyBTdW4pXG7ilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSAIG1vbnRoICgxIC0gMTIpXG7ilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgZGF5IG9mIG1vbnRoICgxIC0gMzEpXG7ilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBob3VyICgwIC0gMjMpXG7ilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIG1pbnV0ZSAoMCAtIDU5KVxu4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIHNlY29uZCAoMCAtIDU5LCBPUFRJT05BTClcbiAqL1xuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHZhciBnb19uZXh0LCByZWYsIHJ1bGUsIHNjaGVkdWxlO1xuICBpZiAoKHJlZiA9IE1ldGVvci5zZXR0aW5ncy5jcm9uKSAhPSBudWxsID8gcmVmLmF1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbiA6IHZvaWQgMCkge1xuICAgIHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpO1xuICAgIHJ1bGUgPSBNZXRlb3Iuc2V0dGluZ3MuY3Jvbi5hdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb247XG4gICAgZ29fbmV4dCA9IHRydWU7XG4gICAgcmV0dXJuIHNjaGVkdWxlLnNjaGVkdWxlSm9iKHJ1bGUsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSwgbm93O1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFnb19uZXh0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdvX25leHQgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS50aW1lKCdhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24nKTtcbiAgICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIGRiLnByb2Nlc3NfZGVsZWdhdGlvbl9ydWxlcy51cGRhdGUoe1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgZW5kX3RpbWU6IHtcbiAgICAgICAgICAgICRsdGU6IG5vd1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgnYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uJyk7XG4gICAgICAgIHJldHVybiBnb19uZXh0ID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkFVVE8gQVVUT19GSU5JU0hfUFJPQ0VTU19ERUxFR0FUSU9OIEVSUk9SOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIHJldHVybiBnb19uZXh0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQ6IGF1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbi5jb2ZmZWUnKTtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlLnN0YWNrKTtcbiAgICB9KSk7XG4gIH1cbn0pO1xuIiwiIyMjXG4qICAgICogICAgKiAgICAqICAgICogICAgKlxu4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKxcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAgfFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJQgZGF5IG9mIHdlZWsgKDAgLSA3KSAoMCBvciA3IGlzIFN1bilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIAgbW9udGggKDEgLSAxMilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBkYXkgb2YgbW9udGggKDEgLSAzMSlcbuKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGhvdXIgKDAgLSAyMylcbuKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgbWludXRlICgwIC0gNTkpXG7ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc2Vjb25kICgwIC0gNTksIE9QVElPTkFMKVxuIyMjXG5NZXRlb3Iuc3RhcnR1cCAtPlxuXHRpZiBNZXRlb3Iuc2V0dGluZ3MuY3Jvbj8udGltZW91dF9hdXRvX3N1Ym1pdFxuXHRcdHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpXG5cdFx0IyDlrprml7bmiafooYzlkIzmraVcblx0XHRydWxlID0gTWV0ZW9yLnNldHRpbmdzLmNyb24udGltZW91dF9hdXRvX3N1Ym1pdFxuXHRcdGdvX25leHQgPSB0cnVlXG5cdFx0c2NoZWR1bGUuc2NoZWR1bGVKb2IgcnVsZSwgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCAoKS0+XG5cdFx0XHR0cnlcblx0XHRcdFx0aWYgIWdvX25leHRcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Z29fbmV4dCA9IGZhbHNlXG5cdFx0XHRcdGNvbnNvbGUudGltZSAndGltZW91dF9hdXRvX3N1Ym1pdCdcblxuXHRcdFx0XHR1dWZsb3dNYW5hZ2VyLnRpbWVvdXRBdXRvU3VibWl0KClcblxuXHRcdFx0XHRjb25zb2xlLnRpbWVFbmQgJ3RpbWVvdXRfYXV0b19zdWJtaXQnXG5cdFx0XHRcdGdvX25leHQgPSB0cnVlXG5cblx0XHRcdGNhdGNoIGVcblx0XHRcdFx0Y29uc29sZS5lcnJvciBcIkFVVE8gVElNRU9VVF9BVVRPX1NVQk1JVCBFUlJPUjogXCJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXG5cdFx0XHRcdGdvX25leHQgPSB0cnVlXG5cblx0XHQsIChlKS0+XG5cdFx0XHRjb25zb2xlLmxvZyAnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQ6IHRpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlJ1xuXHRcdFx0Y29uc29sZS5sb2cgZS5zdGFja1xuXG5NZXRlb3IubWV0aG9kc1xuXHR0aW1lb3V0X2F1dG9fc3VibWl0OiAoaW5zX2lkKS0+XG5cdFx0dXVmbG93TWFuYWdlci50aW1lb3V0QXV0b1N1Ym1pdChpbnNfaWQpXG5cdFx0cmV0dXJuIHRydWVcblxuXG4iLCJcbi8qXG4qICAgICogICAgKiAgICAqICAgICogICAgKlxu4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKxcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAgfFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJQgZGF5IG9mIHdlZWsgKDAgLSA3KSAoMCBvciA3IGlzIFN1bilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIAgbW9udGggKDEgLSAxMilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBkYXkgb2YgbW9udGggKDEgLSAzMSlcbuKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGhvdXIgKDAgLSAyMylcbuKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgbWludXRlICgwIC0gNTkpXG7ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc2Vjb25kICgwIC0gNTksIE9QVElPTkFMKVxuICovXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgdmFyIGdvX25leHQsIHJlZiwgcnVsZSwgc2NoZWR1bGU7XG4gIGlmICgocmVmID0gTWV0ZW9yLnNldHRpbmdzLmNyb24pICE9IG51bGwgPyByZWYudGltZW91dF9hdXRvX3N1Ym1pdCA6IHZvaWQgMCkge1xuICAgIHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpO1xuICAgIHJ1bGUgPSBNZXRlb3Iuc2V0dGluZ3MuY3Jvbi50aW1lb3V0X2F1dG9fc3VibWl0O1xuICAgIGdvX25leHQgPSB0cnVlO1xuICAgIHJldHVybiBzY2hlZHVsZS5zY2hlZHVsZUpvYihydWxlLCBNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGU7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWdvX25leHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ29fbmV4dCA9IGZhbHNlO1xuICAgICAgICBjb25zb2xlLnRpbWUoJ3RpbWVvdXRfYXV0b19zdWJtaXQnKTtcbiAgICAgICAgdXVmbG93TWFuYWdlci50aW1lb3V0QXV0b1N1Ym1pdCgpO1xuICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ3RpbWVvdXRfYXV0b19zdWJtaXQnKTtcbiAgICAgICAgcmV0dXJuIGdvX25leHQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQVVUTyBUSU1FT1VUX0FVVE9fU1VCTUlUIEVSUk9SOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIHJldHVybiBnb19uZXh0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQ6IHRpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlJyk7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coZS5zdGFjayk7XG4gICAgfSkpO1xuICB9XG59KTtcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICB0aW1lb3V0X2F1dG9fc3VibWl0OiBmdW5jdGlvbihpbnNfaWQpIHtcbiAgICB1dWZsb3dNYW5hZ2VyLnRpbWVvdXRBdXRvU3VibWl0KGluc19pZCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLnN0YXJ0dXAgKCktPlxuXHRUYWJ1bGFyVGFibGVzLnJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIgPSBuZXcgVGFidWxhci5UYWJsZVxuXHRcdG5hbWU6IFwicmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhclwiXG5cdFx0Y29sbGVjdGlvbjogZGIuaW5zdGFuY2VzXG5cdFx0Y29sdW1uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcIl9pZFwiLFxuXHRcdFx0XHR0aXRsZTogJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicmV2ZXJzZVwiIGlkPVwicmV2ZXJzZVwiPicsXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHdpZHRoOiAnMXB4Jyxcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XG5cdFx0XHRcdFx0aW5wdXQgPSAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwicmVsYXRlZC1pbnN0YW5jZXMtbGlzdC1jaGVja2JveFwiIG5hbWU9XCJyZWxhdGVkX2luc3RhbmNlc19pZHNcIiBpZD1cInJlbGF0ZWRfaW5zdGFuY2VzX2lkc1wiIHZhbHVlPVwiJyArIGRvYy5faWQgKyAnXCInXG5cblx0XHRcdFx0XHRpZiBUYWJ1bGFyVGFibGVzLnJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIucmVsYXRlZF9pbnN0YW5jZXM/LmluY2x1ZGVzKGRvYy5faWQpXG5cdFx0XHRcdFx0XHRpbnB1dCArPSBcIiBjaGVja2VkIFwiXG5cblx0XHRcdFx0XHRpbnB1dCArPSBcIj5cIlxuXHRcdFx0XHRcdHJldHVybiBpbnB1dFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGF0YTogXCJuYW1lXCIsXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHdpZHRoOiAnNDUlJyxcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XG5cdFx0XHRcdFx0aHJlZiA9ICcnO1xuXHRcdFx0XHRcdGlmIE1ldGVvci5pc0NsaWVudCAmJiAoU3RlZWRvcy5pc01vYmlsZSgpIHx8IFN0ZWVkb3MuaXNDb3Jkb3ZhKCkpXG5cdFx0XHRcdFx0XHRocmVmID0gJydcblxuXHRcdFx0XHRcdGFic29sdXRlID0gZmFsc2VcblxuXHRcdFx0XHRcdGlmIE1ldGVvci5pc1NlcnZlclxuXHRcdFx0XHRcdFx0YWJzb2x1dGUgPSB0aGlzLmFic29sdXRlXG5cdFx0XHRcdFx0aWYgYWJzb2x1dGVcblx0XHRcdFx0XHRcdGhyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIitkb2Muc3BhY2UrXCIvdmlldy9yZWFkb25seS9cIiArIGRvYy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKVxuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdGhyZWYgPSBTdGVlZG9zLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIrZG9jLnNwYWNlK1wiL3ZpZXcvcmVhZG9ubHkvXCIgKyBkb2MuX2lkICsgJz9oaWRlX3RyYWNlcz0wJylcblx0XHRcdFx0XHRyZXR1cm4gXCI8YSBkYXRhLWlkPScje2RvYy5faWR9JyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIraHJlZitcIic+XCIgKyBkb2MubmFtZSArIFwiPC9hPlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcImFwcGxpY2FudF9uYW1lXCIsXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9uYW1lXCIpLFxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcImZsb3dfbmFtZVwiLFxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcImN1cnJlbnRfc3RlcF9uYW1lXCIsXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxuXHRcdFx0XHRcdGlmIGRvYy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiXG5cdFx0XHRcdFx0XHRqdWRnZSA9IGRvYy5maW5hbF9kZWNpc2lvbiB8fCBcImFwcHJvdmVkXCJcblxuXHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lID0gZG9jLmN1cnJlbnRfc3RlcF9uYW1lIHx8ICcnXG5cblx0XHRcdFx0XHRyZXR1cm4gXCJcIlwiXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJzdGVwLWN1cnJlbnQtc3RhdGUgI3tqdWRnZX1cIj4je3N0ZXBfY3VycmVudF9uYW1lfTwvZGl2PlxuXHRcdFx0XHRcdFx0XCJcIlwiXG5cdFx0XHR9XG5cdFx0XVxuXG5cdFx0ZG9tOiBcInRwXCIsXG5cdFx0bGVuZ3RoQ2hhbmdlOiBmYWxzZSxcblx0XHRleHRyYUZpZWxkczogW1wic3RhdGVcIiwgXCJmaW5hbF9kZWNpc2lvblwiLCBcInNwYWNlXCIsIFwia2V5d29yZHNcIl0sXG5cdFx0cGFnZUxlbmd0aDogMTAsXG5cdFx0aW5mbzogZmFsc2UsXG5cdFx0c2VhcmNoaW5nOiB0cnVlLFxuXHRcdHJlc3BvbnNpdmU6XG5cdFx0XHRkZXRhaWxzOiBmYWxzZVxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXG5cdFx0Y2hhbmdlU2VsZWN0b3I6IChzZWxlY3RvciwgdXNlcklkKSAtPlxuXHRcdFx0dW5sZXNzIHVzZXJJZFxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XG5cblx0XHRcdHNwYWNlSWQgPSBzZWxlY3Rvci5zcGFjZVxuXHRcdFx0dW5sZXNzIHNwYWNlSWRcblx0XHRcdFx0aWYgc2VsZWN0b3I/LiRhbmQ/Lmxlbmd0aCA+IDBcblx0XHRcdFx0XHRzcGFjZUlkID0gc2VsZWN0b3IuJGFuZC5nZXRQcm9wZXJ0eSgnc3BhY2UnKVswXVxuXHRcdFx0dW5sZXNzIHNwYWNlSWRcblx0XHRcdFx0cmV0dXJuIHtfaWQ6IC0xfVxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShzcGFjZUlkKVxuXHRcdFx0aWYgIXNwYWNlXG5cdFx0XHRcdHNlbGVjdG9yLnN0YXRlID0gXCJub25lXCJcblx0XHRcdGlmICFzcGFjZS5hZG1pbnMuaW5jbHVkZXModXNlcklkKVxuXG5cdFx0XHRcdGZsb3dfaWRzID0gW11cblx0XHRcdFx0Y3VyU3BhY2VVc2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG5cdFx0XHRcdFx0c3BhY2U6IHNwYWNlSWQsXG5cdFx0XHRcdFx0J3VzZXInOiB1c2VySWRcblx0XHRcdFx0fSlcblx0XHRcdFx0aWYgY3VyU3BhY2VVc2VyXG5cdFx0XHRcdFx0b3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG5cdFx0XHRcdFx0XHRfaWQ6IHtcblx0XHRcdFx0XHRcdFx0JGluOiBjdXJTcGFjZVVzZXIub3JnYW5pemF0aW9uc1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pLmZldGNoKClcblx0XHRcdFx0XHRmbG93cyA9IGRiLmZsb3dzLmZpbmQoeyBzcGFjZTogc3BhY2VJZCB9KVxuXHRcdFx0XHRcdGZsb3dzLmZvckVhY2ggKGZsKS0+XG5cdFx0XHRcdFx0XHRpZiBXb3JrZmxvd01hbmFnZXIuY2FuTW9uaXRvcihmbCwgY3VyU3BhY2VVc2VyLCBvcmdhbml6YXRpb25zKSB8fCBXb3JrZmxvd01hbmFnZXIuY2FuQWRtaW4oZmwsIGN1clNwYWNlVXNlciwgb3JnYW5pemF0aW9ucylcblx0XHRcdFx0XHRcdFx0Zmxvd19pZHMucHVzaChmbC5faWQpXG5cblx0XHRcdFx0aWYgc2VsZWN0b3I/LiRhbmQ/Lmxlbmd0aCA+IDBcblx0XHRcdFx0XHRzZWxlY3Rvci4kYW5kWzBdLiRvciA9IFt7c3VibWl0dGVyOiB1c2VySWR9LCB7YXBwbGljYW50OiB1c2VySWR9LCB7aW5ib3hfdXNlcnM6IHVzZXJJZH0sIHtvdXRib3hfdXNlcnM6IHVzZXJJZH0sXG5cdFx0XHRcdFx0XHRcdHtjY191c2VyczogdXNlcklkfSwgeyBmbG93OiB7ICRpbjogZmxvd19pZHMgfSB9XVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0Xy5leHRlbmQgc2VsZWN0b3IsIHtcblx0XHRcdFx0XHRcdCRvcjogW3tzdWJtaXR0ZXI6IHVzZXJJZH0sIHthcHBsaWNhbnQ6IHVzZXJJZH0sIHtpbmJveF91c2VyczogdXNlcklkfSwge291dGJveF91c2VyczogdXNlcklkfSxcblx0XHRcdFx0XHRcdFx0e2NjX3VzZXJzOiB1c2VySWR9LCB7IGZsb3c6IHsgJGluOiBmbG93X2lkcyB9IH1dXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2VsZWN0b3IiLCJNZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFRhYnVsYXJUYWJsZXMucmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhciA9IG5ldyBUYWJ1bGFyLlRhYmxlKHtcbiAgICBuYW1lOiBcInJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXJcIixcbiAgICBjb2xsZWN0aW9uOiBkYi5pbnN0YW5jZXMsXG4gICAgY29sdW1uczogW1xuICAgICAge1xuICAgICAgICBkYXRhOiBcIl9pZFwiLFxuICAgICAgICB0aXRsZTogJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicmV2ZXJzZVwiIGlkPVwicmV2ZXJzZVwiPicsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdpZHRoOiAnMXB4JyxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBpbnB1dCwgcmVmO1xuICAgICAgICAgIGlucHV0ID0gJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInJlbGF0ZWQtaW5zdGFuY2VzLWxpc3QtY2hlY2tib3hcIiBuYW1lPVwicmVsYXRlZF9pbnN0YW5jZXNfaWRzXCIgaWQ9XCJyZWxhdGVkX2luc3RhbmNlc19pZHNcIiB2YWx1ZT1cIicgKyBkb2MuX2lkICsgJ1wiJztcbiAgICAgICAgICBpZiAoKHJlZiA9IFRhYnVsYXJUYWJsZXMucmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhci5yZWxhdGVkX2luc3RhbmNlcykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhkb2MuX2lkKSA6IHZvaWQgMCkge1xuICAgICAgICAgICAgaW5wdXQgKz0gXCIgY2hlY2tlZCBcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5wdXQgKz0gXCI+XCI7XG4gICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwibmFtZVwiLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxuICAgICAgICB3aWR0aDogJzQ1JScsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIgYWJzb2x1dGUsIGhyZWY7XG4gICAgICAgICAgaHJlZiA9ICcnO1xuICAgICAgICAgIGlmIChNZXRlb3IuaXNDbGllbnQgJiYgKFN0ZWVkb3MuaXNNb2JpbGUoKSB8fCBTdGVlZG9zLmlzQ29yZG92YSgpKSkge1xuICAgICAgICAgICAgaHJlZiA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhYnNvbHV0ZSA9IGZhbHNlO1xuICAgICAgICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgICAgICAgIGFic29sdXRlID0gdGhpcy5hYnNvbHV0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFic29sdXRlKSB7XG4gICAgICAgICAgICBocmVmID0gTWV0ZW9yLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIgKyBkb2Muc3BhY2UgKyBcIi92aWV3L3JlYWRvbmx5L1wiICsgZG9jLl9pZCArICc/aGlkZV90cmFjZXM9MCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBocmVmID0gU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgZG9jLnNwYWNlICsgXCIvdmlldy9yZWFkb25seS9cIiArIGRvYy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChcIjxhIGRhdGEtaWQ9J1wiICsgZG9jLl9pZCArIFwiJyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIpICsgaHJlZiArIFwiJz5cIiArIGRvYy5uYW1lICsgXCI8L2E+XCI7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJhcHBsaWNhbnRfbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfbmFtZVwiKSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImZsb3dfbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiY3VycmVudF9zdGVwX25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfZmxvd1wiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBqdWRnZSwgc3RlcF9jdXJyZW50X25hbWU7XG4gICAgICAgICAgaWYgKGRvYy5zdGF0ZSA9PT0gXCJjb21wbGV0ZWRcIikge1xuICAgICAgICAgICAganVkZ2UgPSBkb2MuZmluYWxfZGVjaXNpb24gfHwgXCJhcHByb3ZlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGVwX2N1cnJlbnRfbmFtZSA9IGRvYy5jdXJyZW50X3N0ZXBfbmFtZSB8fCAnJztcbiAgICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJzdGVwLWN1cnJlbnQtc3RhdGUgXCIgKyBqdWRnZSArIFwiXFxcIj5cIiArIHN0ZXBfY3VycmVudF9uYW1lICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF0sXG4gICAgZG9tOiBcInRwXCIsXG4gICAgbGVuZ3RoQ2hhbmdlOiBmYWxzZSxcbiAgICBleHRyYUZpZWxkczogW1wic3RhdGVcIiwgXCJmaW5hbF9kZWNpc2lvblwiLCBcInNwYWNlXCIsIFwia2V5d29yZHNcIl0sXG4gICAgcGFnZUxlbmd0aDogMTAsXG4gICAgaW5mbzogZmFsc2UsXG4gICAgc2VhcmNoaW5nOiB0cnVlLFxuICAgIHJlc3BvbnNpdmU6IHtcbiAgICAgIGRldGFpbHM6IGZhbHNlXG4gICAgfSxcbiAgICBhdXRvV2lkdGg6IGZhbHNlLFxuICAgIGNoYW5nZVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvciwgdXNlcklkKSB7XG4gICAgICB2YXIgY3VyU3BhY2VVc2VyLCBmbG93X2lkcywgZmxvd3MsIG9yZ2FuaXphdGlvbnMsIHJlZiwgcmVmMSwgc3BhY2UsIHNwYWNlSWQ7XG4gICAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIF9pZDogLTFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHNwYWNlSWQgPSBzZWxlY3Rvci5zcGFjZTtcbiAgICAgIGlmICghc3BhY2VJZCkge1xuICAgICAgICBpZiAoKHNlbGVjdG9yICE9IG51bGwgPyAocmVmID0gc2VsZWN0b3IuJGFuZCkgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICAgIHNwYWNlSWQgPSBzZWxlY3Rvci4kYW5kLmdldFByb3BlcnR5KCdzcGFjZScpWzBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXNwYWNlSWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfaWQ6IC0xXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlSWQpO1xuICAgICAgaWYgKCFzcGFjZSkge1xuICAgICAgICBzZWxlY3Rvci5zdGF0ZSA9IFwibm9uZVwiO1xuICAgICAgfVxuICAgICAgaWYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXModXNlcklkKSkge1xuICAgICAgICBmbG93X2lkcyA9IFtdO1xuICAgICAgICBjdXJTcGFjZVVzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICAgICAgICBzcGFjZTogc3BhY2VJZCxcbiAgICAgICAgICAndXNlcic6IHVzZXJJZFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGN1clNwYWNlVXNlcikge1xuICAgICAgICAgIG9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICAgICAgX2lkOiB7XG4gICAgICAgICAgICAgICRpbjogY3VyU3BhY2VVc2VyLm9yZ2FuaXphdGlvbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgICAgIGZsb3dzID0gZGIuZmxvd3MuZmluZCh7XG4gICAgICAgICAgICBzcGFjZTogc3BhY2VJZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZsb3dzLmZvckVhY2goZnVuY3Rpb24oZmwpIHtcbiAgICAgICAgICAgIGlmIChXb3JrZmxvd01hbmFnZXIuY2FuTW9uaXRvcihmbCwgY3VyU3BhY2VVc2VyLCBvcmdhbml6YXRpb25zKSB8fCBXb3JrZmxvd01hbmFnZXIuY2FuQWRtaW4oZmwsIGN1clNwYWNlVXNlciwgb3JnYW5pemF0aW9ucykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZsb3dfaWRzLnB1c2goZmwuX2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNlbGVjdG9yICE9IG51bGwgPyAocmVmMSA9IHNlbGVjdG9yLiRhbmQpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgICAgc2VsZWN0b3IuJGFuZFswXS4kb3IgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN1Ym1pdHRlcjogdXNlcklkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGFwcGxpY2FudDogdXNlcklkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGluYm94X3VzZXJzOiB1c2VySWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgb3V0Ym94X3VzZXJzOiB1c2VySWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgY2NfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBmbG93OiB7XG4gICAgICAgICAgICAgICAgJGluOiBmbG93X2lkc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfLmV4dGVuZChzZWxlY3Rvciwge1xuICAgICAgICAgICAgJG9yOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdWJtaXR0ZXI6IHVzZXJJZFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgYXBwbGljYW50OiB1c2VySWRcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGluYm94X3VzZXJzOiB1c2VySWRcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG91dGJveF91c2VyczogdXNlcklkXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBjY191c2VyczogdXNlcklkXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBmbG93OiB7XG4gICAgICAgICAgICAgICAgICAkaW46IGZsb3dfaWRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJTdGVlZG9zLnN1YnNbXCJJbnN0YW5jZVRhYnVsYXJcIl0gPSBuZXcgU3Vic01hbmFnZXIoKVxuXG5cbl9oYW5kbGVMaXN0RmllbGRzID0gKGZpZWxkcykgLT5cblx0aW5zX2ZpZWxkcyA9IG5ldyBBcnJheSgpO1xuXG5cdGZpZWxkcz8uZm9yRWFjaCAoZiktPlxuXHRcdGlmIGYudHlwZSA9PSAndGFibGUnXG5cdFx0XHRjb25zb2xlLmxvZyAnaWdub3JlIG9waW5pb24gZmllbGQgaW4gdGFibGUnXG5cdFx0ZWxzZSBpZiBmLnR5cGUgPT0gJ3NlY3Rpb24nXG5cdFx0XHRmPy5maWVsZHM/LmZvckVhY2ggKGYxKS0+XG5cdFx0XHRcdGluc19maWVsZHMucHVzaCBmMVxuXHRcdGVsc2Vcblx0XHRcdGluc19maWVsZHMucHVzaCBmXG5cblx0cmV0dXJuIGluc19maWVsZHNcblxuXG51cGRhdGVUYWJ1bGFyVGl0bGUgPSAoKS0+XG5cbiMg5aaC5p6cY29sdW1uc+acieWKoOWHj++8jOivt+S/ruaUuVRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucyDlh73mlbBcbmluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIgPSAoZmxvd0lkLCBmaWVsZHMpLT5cblx0b3B0aW9ucyA9IHtcblx0XHRuYW1lOiBcImluc3RhbmNlc1wiLFxuXHRcdGNvbGxlY3Rpb246IGRiLmluc3RhbmNlcyxcblx0XHRwdWI6IFwiaW5zdGFuY2VfdGFidWxhclwiLFxuXHRcdG9uVW5sb2FkOiAoKS0+XG5cdFx0XHRNZXRlb3Iuc2V0VGltZW91dChUZW1wbGF0ZS5pbnN0YW5jZV9saXN0Ll90YWJsZUNvbHVtbnMsIDE1MClcblxuXHRcdGRyYXdDYWxsYmFjazogKHNldHRpbmdzKS0+XG5cdFx0XHRlbXB0eVRkID0gJChcIi5kYXRhVGFibGVzX2VtcHR5XCIpXG5cdFx0XHRpZiBlbXB0eVRkLmxlbmd0aFxuXHRcdFx0XHRlbXB0eVRkWzBdLmNvbFNwYW4gPSBcIjZcIlxuXHRcdFx0aWYgIVN0ZWVkb3MuaXNNb2JpbGUoKSAmJiAhU3RlZWRvcy5pc1BhZCgpXG5cdFx0XHRcdE1ldGVvci5zZXRUaW1lb3V0KFRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucywgMTUwKVxuXHRcdFx0XHQkKFwiLmluc3RhbmNlLWxpc3RcIikuc2Nyb2xsVG9wKDApLnJlYWR5IC0+XG5cdFx0XHRcdFx0JChcIi5pbnN0YW5jZS1saXN0XCIpLnBlcmZlY3RTY3JvbGxiYXIoXCJ1cGRhdGVcIilcblx0XHRcdGVsc2Vcblx0XHRcdFx0JChcIi5pbnN0YW5jZS1saXN0XCIpLnNjcm9sbFRvcCgwKVxuXG5cdFx0XHR0aXRsZSA9IHQgXCJwYWdlcl9pbnB1dF9oaW50XCJcblx0XHRcdGVsbGlwc2lzTGluayA9IHNldHRpbmdzLm9JbnN0YW5jZS5wYXJlbnQoKS5maW5kKCcucGFnaW5nX251bWJlcnMgLnBhZ2luYXRpb24gLmRpc2FibGVkIGEnKVxuXHRcdFx0ZWxsaXBzaXNMaW5rLmF0dHIoXCJ0aXRsZVwiLCB0aXRsZSkuY3NzKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKS5jbGljayAtPlxuXHRcdFx0XHRpZiAhJCh0aGlzKS5maW5kKCdpbnB1dCcpLmxlbmd0aFxuXHRcdFx0XHRcdGlucHV0ID0gJCgnPGlucHV0IGNsYXNzPVwicGFnaW5hdGVfaW5wdXQgZm9ybS1jb250cm9sIGlucHV0LXNtXCIgdHlwZT1cInRleHRcIiBzdHlsZT1cImJvcmRlcjogbm9uZTsgcGFkZGluZzowIDJweDtcIi8+Jylcblx0XHRcdFx0XHRpZiBTdGVlZG9zLmlzTW9iaWxlKClcblx0XHRcdFx0XHRcdGlucHV0LmNzcyh7XG5cdFx0XHRcdFx0XHRcdHdpZHRoOlwiNTJweFwiXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogXCIyMHB4XCJcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0aW5wdXQuY3NzKHtcblx0XHRcdFx0XHRcdFx0d2lkdGg6XCI1MnB4XCJcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiBcIjE2cHhcIlxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRpbnB1dC5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmF0dHIoXCJwbGFjZWhvbGRlclwiLCB0aXRsZSlcblx0XHRcdFx0XHQkKHRoaXMpLmVtcHR5KCkuYXBwZW5kIGlucHV0XG5cdFx0XHRcdFx0Z29QYWdlID0gKGluZGV4KS0+XG5cdFx0XHRcdFx0XHRpZiBpbmRleCA+IDBcblx0XHRcdFx0XHRcdFx0cGFnZXMgPSBNYXRoLmNlaWwoc2V0dGluZ3MuZm5SZWNvcmRzRGlzcGxheSgpIC8gc2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoKVxuXHRcdFx0XHRcdFx0XHRpZiBpbmRleCA+IHBhZ2VzXG5cdFx0XHRcdFx0XHRcdFx0IyDpobXnoIHotoXlh7rntKLlvJXml7bot7PovazliLDmnIDlkI7kuIDpobVcblx0XHRcdFx0XHRcdFx0XHRpbmRleCA9IHBhZ2VzXG5cdFx0XHRcdFx0XHRcdGluZGV4LS1cblx0XHRcdFx0XHRcdFx0c2V0dGluZ3Mub0luc3RhbmNlLkRhdGFUYWJsZSgpLnBhZ2UoaW5kZXgpLmRyYXcoJ3BhZ2UnKVxuXHRcdFx0XHRcdGlucHV0LmJsdXIgKGUpLT5cblx0XHRcdFx0XHRcdGN1cnJlbnRQYWdlID0gJCh0aGlzKS52YWwoKVxuXHRcdFx0XHRcdFx0Z29QYWdlIGN1cnJlbnRQYWdlXG5cdFx0XHRcdFx0XHQkKHRoaXMpLnBhcmVudCgpLmh0bWwgJy4uLidcblx0XHRcdFx0XHRpbnB1dC5rZXlkb3duIChlKS0+XG5cdFx0XHRcdFx0XHRpZihlLmtleUNvZGUudG9TdHJpbmcoKSA9PSBcIjEzXCIpXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRQYWdlID0gJCh0aGlzKS52YWwoKVxuXHRcdFx0XHRcdFx0XHRnb1BhZ2UgY3VycmVudFBhZ2VcblxuXHRcdGNyZWF0ZWRSb3c6IChyb3csIGRhdGEsIGRhdGFJbmRleCkgLT5cblx0XHRcdGlmIE1ldGVvci5pc0NsaWVudFxuXHRcdFx0XHRpZiBkYXRhLl9pZCA9PSBGbG93Um91dGVyLmN1cnJlbnQoKS5wYXJhbXMuaW5zdGFuY2VJZFxuXHRcdFx0XHRcdHJvdy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNlbGVjdGVkXCIpXG5cdFx0Y29sdW1uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcIl9pZFwiLFxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxuXHRcdFx0XHRcdG1vZGlmaWVkU3RyaW5nID0gbW9tZW50KGRvYy5tb2RpZmllZCkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG5cblx0XHRcdFx0XHRtb2RpZmllZCA9IGRvYy5tb2RpZmllZFxuXHRcdFx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCcgJiYgZG9jLnN0YXRlICE9ICdkcmFmdCdcblx0XHRcdFx0XHRcdG1vZGlmaWVkID0gZG9jLnN0YXJ0X2RhdGUgfHwgZG9jLm1vZGlmaWVkXG5cblx0XHRcdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnb3V0Ym94JyB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnbW9uaXRvcidcblx0XHRcdFx0XHRcdG1vZGlmaWVkID0gZG9jLnN1Ym1pdF9kYXRlIHx8IGRvYy5zdWJtaXRfZGF0ZVxuXG5cdFx0XHRcdFx0bW9kaWZpZWRGcm9tTm93ID0gU3RlZWRvcy5tb21lbnRSZWFjdGl2ZUZyb21Ob3cobW9kaWZpZWQpO1xuXHRcdFx0XHRcdGZsb3dfbmFtZSA9IGRvYy5mbG93X25hbWVcblx0XHRcdFx0XHRjY192aWV3ID0gXCJcIjtcblx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCJcIjtcblx0XHRcdFx0XHQjIOW9k+WJjeeUqOaIt+WcqGNjIHVzZXLkuK3vvIzkvYbmmK/kuI3lnKhpbmJveCB1c2Vyc+aXtuaJjeaYvuekuifkvKDpmIUn5paH5a2XXG5cdFx0XHRcdFx0aWYgZG9jLmlzX2NjICYmICFkb2MuaW5ib3hfdXNlcnM/LmluY2x1ZGVzKE1ldGVvci51c2VySWQoKSkgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xuXHRcdFx0XHRcdFx0Y2NfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXyhcImluc3RhbmNlX2NjX3RpdGxlXCIpICsgXCIpPC9sYWJlbD4gXCJcblx0XHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+I3tmbG93X25hbWV9PHNwYW4+KCN7ZG9jLmN1cnJlbnRfc3RlcF9uYW1lfSk8L3NwYW4+PC9kaXY+XCJcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSAhPSAnZHJhZnQnICYmIGRvYy5jdXJyZW50X3N0ZXBfbmFtZVxuXHRcdFx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCI8ZGl2IGNsYXNzPSdmbG93LW5hbWUnPiN7Zmxvd19uYW1lfTxzcGFuPigje2RvYy5jdXJyZW50X3N0ZXBfbmFtZX0pPC9zcGFuPjwvZGl2PlwiXG5cdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+I3tmbG93X25hbWV9PC9kaXY+XCJcblxuXHRcdFx0XHRcdGFnZW50X3ZpZXcgPSBcIlwiO1xuXHRcdFx0XHRcdGlmIGRvYy5hZ2VudF91c2VyX25hbWUgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xuXHRcdFx0XHRcdFx0YWdlbnRfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge3VzZXJOYW1lOiBkb2MuYWdlbnRfdXNlcl9uYW1lfSkgKyBcIik8L2xhYmVsPlwiXG5cblx0XHRcdFx0XHR1bnJlYWQgPSAnJ1xuXG5cdFx0XHRcdFx0aXNGYXZvcml0ZVNlbGVjdGVkID0gRmF2b3JpdGVzLmlzUmVjb3JkU2VsZWN0ZWQoXCJpbnN0YW5jZXNcIiwgZG9jLl9pZClcblx0XHRcdFx0XHRpZiBGYXZvcml0ZXMuaXNSZWNvcmRTZWxlY3RlZChcImluc3RhbmNlc1wiLCBkb2MuX2lkKVxuXHRcdFx0XHRcdFx0dW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1pb3Mtc3Rhci1vdXRsaW5lIGluc3RhbmNlLWZhdm9yaXRlLXNlbGVjdGVkXCI+PC9pPidcblx0XHRcdFx0XHRlbHNlIGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCcgJiYgZG9jLmlzX3JlYWQgPT0gZmFsc2Vcblx0XHRcdFx0XHRcdHVucmVhZCA9ICc8aSBjbGFzcz1cImlvbiBpb24tcmVjb3JkIHVucmVhZFwiPjwvaT4nXG5cdFx0XHRcdFx0ZWxzZSBpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnbW9uaXRvcicgJiYgZG9jLmlzX2hpZGRlbiA9PSB0cnVlXG5cdFx0XHRcdFx0XHR1bnJlYWQgPSAnPGkgY2xhc3M9XCJmYSBmYS1sb2NrXCI+PC9pPidcblxuXHRcdFx0XHRcdHByaW9yaXR5SWNvbiA9IFwiXCJcblx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwiXCJcblx0XHRcdFx0XHRwcmlvcml0eVZhbHVlID0gZG9jLnZhbHVlcz8ucHJpb3JpdHlcblx0XHRcdFx0XHRzd2l0Y2ggcHJpb3JpdHlWYWx1ZVxuXHRcdFx0XHRcdFx0d2hlbiBcIueJueaApVwiXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJkYW5nZXJcIlxuXHRcdFx0XHRcdFx0d2hlbiBcIue0p+aApVwiXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJ3YXJuaW5nXCJcblx0XHRcdFx0XHRcdHdoZW4gXCLlip7mlodcIlxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwibXV0ZWRcIlxuXHRcdFx0XHRcdGlmIHByaW9yaXR5SWNvbkNsYXNzXG5cdFx0XHRcdFx0XHRpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzID0gXCJjb2xvci1wcmlvcml0eSBjb2xvci1wcmlvcml0eS0je3ByaW9yaXR5SWNvbkNsYXNzfVwiXG5cblx0XHRcdFx0XHRyZXR1cm4gXCJcIlwiXG5cdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtcmVhZC1iYXInPiN7dW5yZWFkfTwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLW5hbWUgI3tpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzfSc+I3tkb2MubmFtZX0je2NjX3ZpZXd9I3thZ2VudF92aWV3fVxuXHRcdFx0XHRcdFx0XHRcdFx0PHNwYW4+I3tkb2MuYXBwbGljYW50X25hbWV9PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLWRldGFpbCc+I3tzdGVwX2N1cnJlbnRfbmFtZV92aWV3fVxuXHRcdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9J2luc3RhbmNlLW1vZGlmaWVkJyB0aXRsZT0nI3ttb2RpZmllZFN0cmluZ30nPiN7bW9kaWZpZWRGcm9tTm93fTwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XCJcIlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiLFxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIiksXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGF0YTogXCJuYW1lXCIsXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX25hbWVcIiksXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxuXHRcdFx0XHRcdGNjX3ZpZXcgPSBcIlwiO1xuXHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIlwiO1xuXHRcdFx0XHRcdCMg5b2T5YmN55So5oi35ZyoY2MgdXNlcuS4re+8jOS9huaYr+S4jeWcqGluYm94IHVzZXJz5pe25omN5pi+56S6J+S8oOmYhSfmloflrZdcblx0XHRcdFx0XHRpZiBkb2MuaXNfY2MgJiYgIWRvYy5pbmJveF91c2Vycz8uaW5jbHVkZXMoTWV0ZW9yLnVzZXJJZCgpKSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXG5cdFx0XHRcdFx0XHRjY192aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKFwiaW5zdGFuY2VfY2NfdGl0bGVcIikgKyBcIik8L2xhYmVsPiBcIlxuXG5cdFx0XHRcdFx0YWdlbnRfdmlldyA9IFwiXCI7XG5cdFx0XHRcdFx0aWYgZG9jLmFnZW50X3VzZXJfbmFtZVxuXHRcdFx0XHRcdFx0YWdlbnRfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge3VzZXJOYW1lOiBkb2MuYWdlbnRfdXNlcl9uYW1lfSkgKyBcIik8L2xhYmVsPlwiXG5cblx0XHRcdFx0XHR1bnJlYWQgPSAnJ1xuXG5cdFx0XHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94JyAmJiBkb2MuaXNfcmVhZCA9PSBmYWxzZVxuXHRcdFx0XHRcdFx0dW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1yZWNvcmQgdW5yZWFkXCI+PC9pPidcblx0XHRcdFx0XHRlbHNlIGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdtb25pdG9yJyAmJiBkb2MuaXNfaGlkZGVuID09IHRydWVcblx0XHRcdFx0XHRcdHVucmVhZCA9ICc8aSBjbGFzcz1cImZhIGZhLWxvY2tcIj48L2k+J1xuXG5cdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIlwiXG5cdFx0XHRcdFx0cHJpb3JpdHlWYWx1ZSA9IGRvYy52YWx1ZXM/LnByaW9yaXR5XG5cdFx0XHRcdFx0c3dpdGNoIHByaW9yaXR5VmFsdWVcblx0XHRcdFx0XHRcdHdoZW4gXCLnibnmgKVcIlxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwiZGFuZ2VyXCJcblx0XHRcdFx0XHRcdHdoZW4gXCLntKfmgKVcIlxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwid2FybmluZ1wiXG5cdFx0XHRcdFx0XHR3aGVuIFwi5Yqe5paHXCJcblx0XHRcdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIm11dGVkXCJcblx0XHRcdFx0XHRpZiBwcmlvcml0eUljb25DbGFzc1xuXHRcdFx0XHRcdFx0aW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyA9IFwiY29sb3ItcHJpb3JpdHkgY29sb3ItcHJpb3JpdHktI3twcmlvcml0eUljb25DbGFzc31cIlxuXHRcdFx0XHRcdHJldHVybiBcIlwiXCJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtcmVhZC1iYXInPiN7dW5yZWFkfTwvZGl2PlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS1uYW1lICN7aW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzc30nPiN7ZG9jLm5hbWV9I3tjY192aWV3fSN7YWdlbnRfdmlld308L2Rpdj5cblx0XHRcdFx0XHRcdFwiXCJcIlxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGF0YTogXCJhcHBsaWNhbnRfbmFtZVwiLFxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19hcHBsaWNhbnRfbmFtZVwiKSxcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2Vcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRhdGE6IFwic3VibWl0X2RhdGVcIixcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfc3VibWl0X2RhdGVcIiksXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxuXHRcdFx0XHRcdGlmIGRvYy5zdWJtaXRfZGF0ZVxuXHRcdFx0XHRcdFx0cmV0dXJuIG1vbWVudChkb2Muc3VibWl0X2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuXHRcdFx0XHQsXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxuXHRcdFx0XHRvcmRlcmFibGU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRhdGE6IFwiZmxvd19uYW1lXCIsXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcImN1cnJlbnRfc3RlcF9uYW1lXCIsXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N0ZXBfY3VycmVudF9uYW1lXCIpLFxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cblx0XHRcdFx0XHRpZiBkb2Muc3RhdGUgPT0gXCJjb21wbGV0ZWRcIlxuXHRcdFx0XHRcdFx0anVkZ2UgPSBkb2MuZmluYWxfZGVjaXNpb24gfHwgXCJhcHByb3ZlZFwiXG5cblx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZSA9IGRvYy5jdXJyZW50X3N0ZXBfbmFtZSB8fCAnJ1xuXG5cdFx0XHRcdFx0Y2NfdGFnID0gJydcblxuXHRcdFx0XHRcdGlmIGRvYy5jY19jb3VudCA+IDBcblx0XHRcdFx0XHRcdGNjX3RhZyA9IFRBUGkxOG4uX18oJ2NjX3RhZycpXG5cblx0XHRcdFx0XHRyZXR1cm4gXCJcIlwiXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwic3RlcC1jdXJyZW50LXN0YXRlICN7anVkZ2V9XCI+I3tzdGVwX2N1cnJlbnRfbmFtZX0je2NjX3RhZ308L2Rpdj5cblx0XHRcdFx0XHRcIlwiXCJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2Vcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRhdGE6IFwibW9kaWZpZWRcIixcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfbW9kaWZpZWRcIiksXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxuXHRcdFx0XHRcdHJldHVybiBtb21lbnQoZG9jLm1vZGlmaWVkKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcblx0XHRcdFx0LFxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcblx0XHRcdFx0b3JkZXJhYmxlOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhOiBcInN0YXJ0X2RhdGVcIixcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfc3RhcnRfZGF0ZVwiKSxcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XG5cdFx0XHRcdFx0aWYgZG9jLnN0YXJ0X2RhdGVcblx0XHRcdFx0XHRcdHJldHVybiBtb21lbnQoZG9jLnN0YXJ0X2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuXHRcdFx0XHQsXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxuXHRcdFx0XHRvcmRlcmFibGU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRhdGE6IFwibXlfZmluaXNoX2RhdGVcIixcblx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XG5cdFx0XHRcdFx0aWYgZG9jLm15X2ZpbmlzaF9kYXRlXG5cdFx0XHRcdFx0XHRyZXR1cm4gbW9tZW50KGRvYy5teV9maW5pc2hfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XG5cdFx0XHRcdCxcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXG5cdFx0XHRcdG9yZGVyYWJsZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGF0YTogXCJtb2RpZmllZFwiLFxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGF0YTogXCJrZXl3b3Jkc1wiLFxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGF0YTogXCJpc19hcmNoaXZlZFwiLFxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cblx0XHRcdFx0XHRpZiBkb2M/LnZhbHVlcz8ucmVjb3JkX25lZWQgJiYgZG9jLnZhbHVlcy5yZWNvcmRfbmVlZCA9PSBcInRydWVcIlxuXHRcdFx0XHRcdFx0aWYgZG9jPy5pc19hcmNoaXZlZFxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdChcIllFU1wiKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHQoXCJOT1wiKVxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZVxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRkb206IGRvIC0+XG5cdFx0XHQjIOaJi+acuuS4iuS4jeaYvuekuuS4gOmhteaYvuekuuWkmuWwkeadoeiusOW9lemAiemhuVxuXHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpXG5cdFx0XHRcdCd0cCdcblx0XHRcdGVsc2Vcblx0XHRcdFx0J3RwbCdcblx0XHRvcmRlcjogW1s0LCBcImRlc2NcIl1dLFxuXHRcdGV4dHJhRmllbGRzOiBbXCJmb3JtXCIsIFwiZmxvd1wiLCBcImluYm94X3VzZXJzXCIsIFwic3RhdGVcIiwgXCJzcGFjZVwiLCBcImFwcGxpY2FudFwiLCBcImZvcm1fdmVyc2lvblwiLFxuXHRcdFx0XCJmbG93X3ZlcnNpb25cIiwgXCJpc19jY1wiLCBcImNjX2NvdW50XCIsIFwiaXNfcmVhZFwiLCBcImN1cnJlbnRfc3RlcF9uYW1lXCIsIFwidmFsdWVzXCIsIFwia2V5d29yZHNcIiwgXCJmaW5hbF9kZWNpc2lvblwiLCBcImZsb3dfbmFtZVwiLCBcImlzX2hpZGRlblwiLCBcImFnZW50X3VzZXJfbmFtZVwiXSxcblx0XHRsZW5ndGhDaGFuZ2U6IHRydWUsXG5cdFx0bGVuZ3RoTWVudTogWzEwLDE1LDIwLDI1LDUwLDEwMF0sXG5cdFx0cGFnZUxlbmd0aDogMTAsXG5cdFx0aW5mbzogZmFsc2UsXG5cdFx0c2VhcmNoaW5nOiB0cnVlLFxuXHRcdHJlc3BvbnNpdmU6XG5cdFx0XHRkZXRhaWxzOiBmYWxzZVxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXG5cdFx0Y2hhbmdlU2VsZWN0b3I6IChzZWxlY3RvciwgdXNlcklkKSAtPlxuXHRcdFx0dW5sZXNzIHVzZXJJZFxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XG5cdFx0XHRzcGFjZSA9IHNlbGVjdG9yLnNwYWNlXG5cdFx0XHR1bmxlc3Mgc3BhY2Vcblx0XHRcdFx0aWYgc2VsZWN0b3I/LiRhbmQ/Lmxlbmd0aCA+IDBcblx0XHRcdFx0XHRzcGFjZSA9IHNlbGVjdG9yLiRhbmQuZ2V0UHJvcGVydHkoJ3NwYWNlJylbMF1cblx0XHRcdHVubGVzcyBzcGFjZVxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XG5cdFx0XHRzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7dXNlcjogdXNlcklkLCBzcGFjZTogc3BhY2V9LCB7ZmllbGRzOiB7X2lkOiAxfX0pXG5cdFx0XHR1bmxlc3Mgc3BhY2VfdXNlclxuXHRcdFx0XHRyZXR1cm4ge19pZDogLTF9XG5cdFx0XHRyZXR1cm4gc2VsZWN0b3Jcblx0XHRwYWdpbmdUeXBlOiBcIm51bWJlcnNcIlxuXG5cdH1cblxuXHRpZiBmbG93SWRcblx0XHRrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgZmxvd0lkXG5cblx0XHRvcHRpb25zLm5hbWUgPSBrZXlcblxuXHRcdFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzLmZpZWxkcyA9IGZpZWxkc1xuXG5cdFx0aW5zX2ZpZWxkcyA9IF9oYW5kbGVMaXN0RmllbGRzIFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzLmZpZWxkc1xuXG5cdFx0aW5zX2ZpZWxkcy5mb3JFYWNoIChmKS0+XG5cdFx0XHRpZiBmLnR5cGUgIT0gJ3RhYmxlJyAmJiBmLmlzX2xpc3RfZGlzcGxheVxuXHRcdFx0XHRvcHRpb25zLmNvbHVtbnMucHVzaFxuXHRcdFx0XHRcdGRhdGE6IChmLm5hbWUgfHwgZi5jb2RlKSxcblx0XHRcdFx0XHR0aXRsZTogdChmLm5hbWUgfHwgZi5jb2RlKSxcblx0XHRcdFx0XHR2aXNpYmxlOiBmYWxzZSxcblx0XHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlXG5cdFx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XG5cblx0XHRcdFx0XHRcdHZhbHVlcyA9IGRvYy52YWx1ZXMgfHwge31cblxuXHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZXNbZi5jb2RlXVxuXG5cdFx0XHRcdFx0XHRzd2l0Y2ggZi50eXBlXG5cdFx0XHRcdFx0XHRcdHdoZW4gJ3VzZXInXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZT8ubmFtZVxuXHRcdFx0XHRcdFx0XHR3aGVuICdncm91cCdcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlPy5mdWxsbmFtZVxuXHRcdFx0XHRcdFx0XHR3aGVuICdkYXRlJ1xuXHRcdFx0XHRcdFx0XHRcdGlmIHZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IG1vbWVudCh2YWx1ZSkuZm9ybWF0KCdZWVlZLU1NLUREJylcblx0XHRcdFx0XHRcdFx0d2hlbiAnZGF0ZVRpbWUnXG5cdFx0XHRcdFx0XHRcdFx0aWYgdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKVxuXHRcdFx0XHRcdFx0XHR3aGVuICdjaGVja2JveCdcblx0XHRcdFx0XHRcdFx0XHRpZiB2YWx1ZSA9PSB0cnVlIHx8IHZhbHVlID09ICd0cnVlJ1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF95ZXNcIik7XG5cdFx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiKTtcblx0XHRcdFx0XHRcdFx0d2hlbiAnb2RhdGEnXG5cdFx0XHRcdFx0XHRcdFx0aWYgdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdGlmIF8uaXNBcnJheSh2YWx1ZSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBfLnBsdWNrKHZhbHVlLCAnQGxhYmVsJykudG9TdHJpbmcoKVxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlWydAbGFiZWwnXVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblxuXG5cdHJldHVybiBvcHRpb25zO1xuXG5NZXRlb3Iuc3RhcnR1cCAoKS0+XG5cdFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUgaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcigpXG5cblxuR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMgPSAoYm94LCBmbG93SWQsIGZpZWxkcyktPlxuXHRrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgYm94ICsgZmxvd0lkXG5cdGlmIGJveCA9PSBcImluYm94XCJcblx0XHRvcHRpb25zID0gX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zKGZsb3dJZCwgZmllbGRzKVxuXHRlbHNlIGlmIGJveCA9PSBcIm91dGJveFwiXG5cdFx0b3B0aW9ucyA9IF9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMoZmxvd0lkLCBmaWVsZHMpXG5cdGVsc2Vcblx0XHRvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcylcblx0XHRpZiAhZmxvd0lkXG5cdFx0XHRvcHRpb25zLm5hbWUgPSBcImluYm94X2luc3RhbmNlc1wiXG5cdGlmIGZsb3dJZFxuXHRcdG9wdGlvbnMubmFtZSA9IGtleVxuXHRyZXR1cm4gb3B0aW9uc1xuXG5cblxuX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zID0gKGZsb3dJZCwgZmllbGRzKS0+XG5cdG9wdGlvbnMgPSBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyKGZsb3dJZCwgZmllbGRzKVxuXG5cdGlmICFmbG93SWRcblx0XHRvcHRpb25zLm5hbWUgPSBcImluYm94X2luc3RhbmNlc1wiXG5cblx0b3B0aW9ucy5vcmRlciA9IFtbOCwgXCJkZXNjXCJdXVxuXHRvcHRpb25zLmZpbHRlcmVkUmVjb3JkSWRzID0gKHRhYmxlLCBzZWxlY3Rvciwgc29ydCwgc2tpcCwgbGltaXQsIG9sZF9maWx0ZXJlZFJlY29yZElkcywgdXNlcklkLCBmaW5kT3B0aW9ucyktPlxuXHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24gPSBbXG5cdFx0XHR7XG5cdFx0XHRcdCRtYXRjaDogc2VsZWN0b3Jcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdCRwcm9qZWN0OiB7XG5cdFx0XHRcdFx0bmFtZTogMSxcblx0XHRcdFx0XHRcIl9hcHByb3ZlXCI6ICckdHJhY2VzLmFwcHJvdmVzJ1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHQkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHQkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHQkbWF0Y2g6IHtcblx0XHRcdFx0XHQnX2FwcHJvdmUuaXNfZmluaXNoZWQnOiBmYWxzZVxuXHRcdFx0XHRcdCdfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkLFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XVxuXHRcdGlmIHNvcnQgYW5kIHNvcnQubGVuZ3RoID4gMFxuXHRcdFx0czEgPSBzb3J0WzBdXG5cdFx0XHRzMV8wID0gczFbMF1cblx0XHRcdHMxXzEgPSBzMVsxXVxuXHRcdFx0aWYgczFfMCA9PSAnc3RhcnRfZGF0ZSdcblxuXHRcdFx0XHRmaW5kT3B0aW9ucy5zb3J0ID0gW1snbW9kaWZpZWQnLCBzMV8xXV1cblxuXHRcdFx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2ggJGdyb3VwOiB7X2lkOiBcIiRfaWRcIiwgXCJhcHByb3ZlX3N0YXJ0X2RhdGVcIjogeyRmaXJzdDogXCIkX2FwcHJvdmUuc3RhcnRfZGF0ZVwifX1cblxuXHRcdFx0XHRhZ19zb3J0ID0gJ2FwcHJvdmVfc3RhcnRfZGF0ZSc6IGlmIHMxXzEgPT0gJ2FzYycgdGhlbiAxIGVsc2UgLTFcblxuXHRcdFx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2ggJHNvcnQ6IGFnX3NvcnRcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRza2lwOiBza2lwXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkbGltaXQ6IGxpbWl0XG5cdFx0XHRcdGZpbHRlcmVkUmVjb3JkSWRzID0gbmV3IEFycmF5KClcblxuXHRcdFx0XHRhZ2dyZWdhdGUgPSAodGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikgLT5cblx0XHRcdFx0XHR0YWJsZS5jb2xsZWN0aW9uLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUoYWdncmVnYXRlX29wZXJhdGlvbikudG9BcnJheSAoZXJyLCBkYXRhKSAtPlxuXHRcdFx0XHRcdFx0aWYgZXJyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpXG5cdFx0XHRcdFx0XHRkYXRhLmZvckVhY2ggKGRvYykgLT5cblx0XHRcdFx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMucHVzaCBkb2MuX2lkXG5cdFx0XHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRcdFx0aWYgY2Jcblx0XHRcdFx0XHRcdFx0Y2IoKVxuXHRcdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdFx0cmV0dXJuXG5cblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhhZ2dyZWdhdGUpXG5cblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlIHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkc1xuXG5cdFx0XHRcdHJldHVybiBmaWx0ZXJlZFJlY29yZElkcy51bmlxKClcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkc1xuXG5cdHJldHVybiBvcHRpb25zXG5cbk1ldGVvci5zdGFydHVwICgpLT5cblx0VGFidWxhclRhYmxlcy5pbmJveF9pbnN0YW5jZXMgPSBuZXcgVGFidWxhci5UYWJsZSBHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhcImluYm94XCIpXG5cblxuX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyA9IChmbG93SWQsIGZpZWxkcyktPlxuXHRvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcylcblxuXHRpZiAhZmxvd0lkXG5cdFx0b3B0aW9ucy5uYW1lID0gXCJvdXRib3hfaW5zdGFuY2VzXCJcblxuXHRvcHRpb25zLm9yZGVyID0gW1s5LCBcImRlc2NcIl1dXG5cdG9wdGlvbnMuZmlsdGVyZWRSZWNvcmRJZHMgPSAodGFibGUsIHNlbGVjdG9yLCBzb3J0LCBza2lwLCBsaW1pdCwgb2xkX2ZpbHRlcmVkUmVjb3JkSWRzLCB1c2VySWQsIGZpbmRPcHRpb25zKS0+XG5cdFx0YWdncmVnYXRlX29wZXJhdGlvbiA9IFtcblx0XHRcdHtcblx0XHRcdFx0JG1hdGNoOiBzZWxlY3RvclxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0JHByb2plY3Q6IHtcblx0XHRcdFx0XHRuYW1lOiAxLFxuXHRcdFx0XHRcdFwiX2FwcHJvdmVcIjogJyR0cmFjZXMuYXBwcm92ZXMnXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdCRtYXRjaDoge1xuXHRcdFx0XHRcdCdfYXBwcm92ZS5pc19maW5pc2hlZCc6IHRydWVcblx0XHRcdFx0XHQkb3I6IFt7J19hcHByb3ZlLmhhbmRsZXInOiB1c2VySWR9LHsnX2FwcHJvdmUudXNlcic6IHVzZXJJZH1dXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdXG5cdFx0aWYgc29ydCBhbmQgc29ydC5sZW5ndGggPiAwXG5cdFx0XHRzMSA9IHNvcnRbMF1cblx0XHRcdHMxXzAgPSBzMVswXVxuXHRcdFx0czFfMSA9IHMxWzFdXG5cdFx0XHRpZiBzMV8wID09ICdteV9maW5pc2hfZGF0ZSdcblxuXHRcdFx0XHRmaW5kT3B0aW9ucy5zb3J0ID0gW1snbW9kaWZpZWQnLCBzMV8xXV1cblxuXHRcdFx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2ggJGdyb3VwOiB7X2lkOiBcIiRfaWRcIiwgXCJhcHByb3ZlX2ZpbmlzaF9kYXRlXCI6IHskbGFzdDogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIn19XG5cblx0XHRcdFx0YWdfc29ydCA9ICdhcHByb3ZlX2ZpbmlzaF9kYXRlJzogaWYgczFfMSA9PSAnYXNjJyB0aGVuIDEgZWxzZSAtMVxuXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc29ydDogYWdfc29ydFxuXHRcdFx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2ggJHNraXA6IHNraXBcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRsaW1pdDogbGltaXRcblx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKVxuXG5cdFx0XHRcdGFnZ3JlZ2F0ZSA9ICh0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMsIGNiKSAtPlxuXHRcdFx0XHRcdHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5IChlcnIsIGRhdGEpIC0+XG5cdFx0XHRcdFx0XHRpZiBlcnJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycilcblx0XHRcdFx0XHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxuXHRcdFx0XHRcdFx0XHRmaWx0ZXJlZFJlY29yZElkcy5wdXNoIGRvYy5faWRcblx0XHRcdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdFx0XHRpZiBjYlxuXHRcdFx0XHRcdFx0XHRjYigpXG5cdFx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0XHRyZXR1cm5cblxuXHRcdFx0XHRhc3luY19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKGFnZ3JlZ2F0ZSlcblxuXHRcdFx0XHRhc3luY19hZ2dyZWdhdGUgdGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzXG5cblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkUmVjb3JkSWRzLnVuaXEoKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gb2xkX2ZpbHRlcmVkUmVjb3JkSWRzXG5cblx0cmV0dXJuIG9wdGlvbnNcblxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxuXHRUYWJ1bGFyVGFibGVzLm91dGJveF9pbnN0YW5jZXMgPSBuZXcgVGFidWxhci5UYWJsZSBHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhcIm91dGJveFwiKVxuXG5pZiBNZXRlb3IuaXNDbGllbnRcblx0VGFidWxhclRhYmxlcy5mbG93SW5zdGFuY2VzID0gbmV3IFJlYWN0aXZlVmFyKClcblxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxuXHRUcmFja2VyLmF1dG9ydW4gKGMpIC0+XG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50ICYmICFTdGVlZG9zLmlzTW9iaWxlKClcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9ICdkcmFmdCdcblx0XHRcdFx0TWV0ZW9yLmNhbGwgXCJuZXdJbnN0YW5jZXNMaXN0VGFidWxhclwiLCBTZXNzaW9uLmdldChcImJveFwiKSwgU2Vzc2lvbi5nZXQoXCJmbG93SWRcIiksIChlcnJvciwgcmVzdWx0KSAtPlxuXHRcdFx0XHRcdG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyIFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgcmVzdWx0XG5cdFx0XHRcdFx0VGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fY2hhbmdlT3JkZXIoKVxuXG5cbm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyID0gKGJveCwgZmxvd0lkLCBmaWVsZHMpLT5cblx0aWYgIWZpZWxkc1xuXHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQ6IGZsb3dJZH0sIHtmaWVsZHM6IHtmb3JtOiAxfX0pXG5cdFx0ZmllbGRzID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdz8uZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5maWVsZHMnOiAxIH0gfSk/LmN1cnJlbnQ/LmZpZWxkc1xuXG5cdGZpZWxkcyA9IF9oYW5kbGVMaXN0RmllbGRzIGZpZWxkc1xuXG5cdGlmIGZpZWxkcz8uZmlsdGVyUHJvcGVydHkoXCJpc19saXN0X2Rpc3BsYXlcIiwgdHJ1ZSk/Lmxlbmd0aCA+IDBcblx0XHRrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgYm94ICsgZmxvd0lkXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XG5cdFx0XHRUYWJ1bGFyVGFibGVzLmZsb3dJbnN0YW5jZXMuc2V0KG5ldyBUYWJ1bGFyLlRhYmxlIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKGJveCwgZmxvd0lkLCBmaWVsZHMpKVxuXHRcdGVsc2Vcblx0XHRcdG5ldyBUYWJ1bGFyLlRhYmxlIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKGJveCwgZmxvd0lkLCBmaWVsZHMpXG5cdFx0Y29uc29sZS5sb2cgXCJuZXcgVGFidWxhclRhYmxlcyBcIiwga2V5XG5cbmlmIE1ldGVvci5pc1NlcnZlclxuXHRNZXRlb3IubWV0aG9kc1xuXHRcdG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyOiAoYm94LCBmbG93SWQpLT5cblx0XHRcdG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyKGJveCwgZmxvd0lkKVxuXG5cdFx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBmbG93SWR9LCB7ZmllbGRzOiB7Zm9ybTogMX19KVxuXHRcdFx0ZmllbGRzID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdz8uZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5maWVsZHMnOiAxIH0gfSk/LmN1cnJlbnQ/LmZpZWxkc1xuXHRcdFx0cmV0dXJuIGZpZWxkc1xuXG5cbiIsInZhciBHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucywgX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zLCBfZ2V0X291dGJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zLCBfaGFuZGxlTGlzdEZpZWxkcywgaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhciwgbmV3SW5zdGFuY2VzTGlzdFRhYnVsYXIsIHVwZGF0ZVRhYnVsYXJUaXRsZTtcblxuU3RlZWRvcy5zdWJzW1wiSW5zdGFuY2VUYWJ1bGFyXCJdID0gbmV3IFN1YnNNYW5hZ2VyKCk7XG5cbl9oYW5kbGVMaXN0RmllbGRzID0gZnVuY3Rpb24oZmllbGRzKSB7XG4gIHZhciBpbnNfZmllbGRzO1xuICBpbnNfZmllbGRzID0gbmV3IEFycmF5KCk7XG4gIGlmIChmaWVsZHMgIT0gbnVsbCkge1xuICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBpZiAoZi50eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnaWdub3JlIG9waW5pb24gZmllbGQgaW4gdGFibGUnKTtcbiAgICAgIH0gZWxzZSBpZiAoZi50eXBlID09PSAnc2VjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGYgIT0gbnVsbCA/IChyZWYgPSBmLmZpZWxkcykgIT0gbnVsbCA/IHJlZi5mb3JFYWNoKGZ1bmN0aW9uKGYxKSB7XG4gICAgICAgICAgcmV0dXJuIGluc19maWVsZHMucHVzaChmMSk7XG4gICAgICAgIH0pIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGluc19maWVsZHMucHVzaChmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaW5zX2ZpZWxkcztcbn07XG5cbnVwZGF0ZVRhYnVsYXJUaXRsZSA9IGZ1bmN0aW9uKCkge307XG5cbmluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIgPSBmdW5jdGlvbihmbG93SWQsIGZpZWxkcykge1xuICB2YXIgaW5zX2ZpZWxkcywga2V5LCBvcHRpb25zO1xuICBvcHRpb25zID0ge1xuICAgIG5hbWU6IFwiaW5zdGFuY2VzXCIsXG4gICAgY29sbGVjdGlvbjogZGIuaW5zdGFuY2VzLFxuICAgIHB1YjogXCJpbnN0YW5jZV90YWJ1bGFyXCIsXG4gICAgb25VbmxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE1ldGVvci5zZXRUaW1lb3V0KFRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucywgMTUwKTtcbiAgICB9LFxuICAgIGRyYXdDYWxsYmFjazogZnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICAgIHZhciBlbGxpcHNpc0xpbmssIGVtcHR5VGQsIHRpdGxlO1xuICAgICAgZW1wdHlUZCA9ICQoXCIuZGF0YVRhYmxlc19lbXB0eVwiKTtcbiAgICAgIGlmIChlbXB0eVRkLmxlbmd0aCkge1xuICAgICAgICBlbXB0eVRkWzBdLmNvbFNwYW4gPSBcIjZcIjtcbiAgICAgIH1cbiAgICAgIGlmICghU3RlZWRvcy5pc01vYmlsZSgpICYmICFTdGVlZG9zLmlzUGFkKCkpIHtcbiAgICAgICAgTWV0ZW9yLnNldFRpbWVvdXQoVGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fdGFibGVDb2x1bW5zLCAxNTApO1xuICAgICAgICAkKFwiLmluc3RhbmNlLWxpc3RcIikuc2Nyb2xsVG9wKDApLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkKFwiLmluc3RhbmNlLWxpc3RcIikucGVyZmVjdFNjcm9sbGJhcihcInVwZGF0ZVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiLmluc3RhbmNlLWxpc3RcIikuc2Nyb2xsVG9wKDApO1xuICAgICAgfVxuICAgICAgdGl0bGUgPSB0KFwicGFnZXJfaW5wdXRfaGludFwiKTtcbiAgICAgIGVsbGlwc2lzTGluayA9IHNldHRpbmdzLm9JbnN0YW5jZS5wYXJlbnQoKS5maW5kKCcucGFnaW5nX251bWJlcnMgLnBhZ2luYXRpb24gLmRpc2FibGVkIGEnKTtcbiAgICAgIHJldHVybiBlbGxpcHNpc0xpbmsuYXR0cihcInRpdGxlXCIsIHRpdGxlKS5jc3MoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ29QYWdlLCBpbnB1dDtcbiAgICAgICAgaWYgKCEkKHRoaXMpLmZpbmQoJ2lucHV0JykubGVuZ3RoKSB7XG4gICAgICAgICAgaW5wdXQgPSAkKCc8aW5wdXQgY2xhc3M9XCJwYWdpbmF0ZV9pbnB1dCBmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiB0eXBlPVwidGV4dFwiIHN0eWxlPVwiYm9yZGVyOiBub25lOyBwYWRkaW5nOjAgMnB4O1wiLz4nKTtcbiAgICAgICAgICBpZiAoU3RlZWRvcy5pc01vYmlsZSgpKSB7XG4gICAgICAgICAgICBpbnB1dC5jc3Moe1xuICAgICAgICAgICAgICB3aWR0aDogXCI1MnB4XCIsXG4gICAgICAgICAgICAgIGhlaWdodDogXCIyMHB4XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dC5jc3Moe1xuICAgICAgICAgICAgICB3aWR0aDogXCI1MnB4XCIsXG4gICAgICAgICAgICAgIGhlaWdodDogXCIxNnB4XCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnB1dC5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmF0dHIoXCJwbGFjZWhvbGRlclwiLCB0aXRsZSk7XG4gICAgICAgICAgJCh0aGlzKS5lbXB0eSgpLmFwcGVuZChpbnB1dCk7XG4gICAgICAgICAgZ29QYWdlID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBwYWdlcztcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgcGFnZXMgPSBNYXRoLmNlaWwoc2V0dGluZ3MuZm5SZWNvcmRzRGlzcGxheSgpIC8gc2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gcGFnZXMpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHBhZ2VzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5vSW5zdGFuY2UuRGF0YVRhYmxlKCkucGFnZShpbmRleCkuZHJhdygncGFnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaW5wdXQuYmx1cihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFBhZ2U7XG4gICAgICAgICAgICBjdXJyZW50UGFnZSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICBnb1BhZ2UoY3VycmVudFBhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuICQodGhpcykucGFyZW50KCkuaHRtbCgnLi4uJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGlucHV0LmtleWRvd24oZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRQYWdlO1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZS50b1N0cmluZygpID09PSBcIjEzXCIpIHtcbiAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICAgICAgICByZXR1cm4gZ29QYWdlKGN1cnJlbnRQYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjcmVhdGVkUm93OiBmdW5jdGlvbihyb3csIGRhdGEsIGRhdGFJbmRleCkge1xuICAgICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgICBpZiAoZGF0YS5faWQgPT09IEZsb3dSb3V0ZXIuY3VycmVudCgpLnBhcmFtcy5pbnN0YW5jZUlkKSB7XG4gICAgICAgICAgcmV0dXJuIHJvdy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNlbGVjdGVkXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb2x1bW5zOiBbXG4gICAgICB7XG4gICAgICAgIGRhdGE6IFwiX2lkXCIsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIgYWdlbnRfdmlldywgY2NfdmlldywgZmxvd19uYW1lLCBpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzLCBpc0Zhdm9yaXRlU2VsZWN0ZWQsIG1vZGlmaWVkLCBtb2RpZmllZEZyb21Ob3csIG1vZGlmaWVkU3RyaW5nLCBwcmlvcml0eUljb24sIHByaW9yaXR5SWNvbkNsYXNzLCBwcmlvcml0eVZhbHVlLCByZWYsIHJlZjEsIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcsIHVucmVhZDtcbiAgICAgICAgICBtb2RpZmllZFN0cmluZyA9IG1vbWVudChkb2MubW9kaWZpZWQpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICAgIG1vZGlmaWVkID0gZG9jLm1vZGlmaWVkO1xuICAgICAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94JyAmJiBkb2Muc3RhdGUgIT09ICdkcmFmdCcpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkID0gZG9jLnN0YXJ0X2RhdGUgfHwgZG9jLm1vZGlmaWVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdvdXRib3gnIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnbW9uaXRvcicpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkID0gZG9jLnN1Ym1pdF9kYXRlIHx8IGRvYy5zdWJtaXRfZGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kaWZpZWRGcm9tTm93ID0gU3RlZWRvcy5tb21lbnRSZWFjdGl2ZUZyb21Ob3cobW9kaWZpZWQpO1xuICAgICAgICAgIGZsb3dfbmFtZSA9IGRvYy5mbG93X25hbWU7XG4gICAgICAgICAgY2NfdmlldyA9IFwiXCI7XG4gICAgICAgICAgc3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiXCI7XG4gICAgICAgICAgaWYgKGRvYy5pc19jYyAmJiAhKChyZWYgPSBkb2MuaW5ib3hfdXNlcnMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoTWV0ZW9yLnVzZXJJZCgpKSA6IHZvaWQgMCkgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgICAgIGNjX3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oXCJpbnN0YW5jZV9jY190aXRsZVwiKSArIFwiKTwvbGFiZWw+IFwiO1xuICAgICAgICAgICAgc3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz5cIiArIGZsb3dfbmFtZSArIFwiPHNwYW4+KFwiICsgZG9jLmN1cnJlbnRfc3RlcF9uYW1lICsgXCIpPC9zcGFuPjwvZGl2PlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgIT09ICdkcmFmdCcgJiYgZG9jLmN1cnJlbnRfc3RlcF9uYW1lKSB7XG4gICAgICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+XCIgKyBmbG93X25hbWUgKyBcIjxzcGFuPihcIiArIGRvYy5jdXJyZW50X3N0ZXBfbmFtZSArIFwiKTwvc3Bhbj48L2Rpdj5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+XCIgKyBmbG93X25hbWUgKyBcIjwvZGl2PlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZ2VudF92aWV3ID0gXCJcIjtcbiAgICAgICAgICBpZiAoZG9jLmFnZW50X3VzZXJfbmFtZSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94Jykge1xuICAgICAgICAgICAgYWdlbnRfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge1xuICAgICAgICAgICAgICB1c2VyTmFtZTogZG9jLmFnZW50X3VzZXJfbmFtZVxuICAgICAgICAgICAgfSkgKyBcIik8L2xhYmVsPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1bnJlYWQgPSAnJztcbiAgICAgICAgICBpc0Zhdm9yaXRlU2VsZWN0ZWQgPSBGYXZvcml0ZXMuaXNSZWNvcmRTZWxlY3RlZChcImluc3RhbmNlc1wiLCBkb2MuX2lkKTtcbiAgICAgICAgICBpZiAoRmF2b3JpdGVzLmlzUmVjb3JkU2VsZWN0ZWQoXCJpbnN0YW5jZXNcIiwgZG9jLl9pZCkpIHtcbiAgICAgICAgICAgIHVucmVhZCA9ICc8aSBjbGFzcz1cImlvbiBpb24taW9zLXN0YXItb3V0bGluZSBpbnN0YW5jZS1mYXZvcml0ZS1zZWxlY3RlZFwiPjwvaT4nO1xuICAgICAgICAgIH0gZWxzZSBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcgJiYgZG9jLmlzX3JlYWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1bnJlYWQgPSAnPGkgY2xhc3M9XCJpb24gaW9uLXJlY29yZCB1bnJlYWRcIj48L2k+JztcbiAgICAgICAgICB9IGVsc2UgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnbW9uaXRvcicgJiYgZG9jLmlzX2hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdW5yZWFkID0gJzxpIGNsYXNzPVwiZmEgZmEtbG9ja1wiPjwvaT4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmlvcml0eUljb24gPSBcIlwiO1xuICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJcIjtcbiAgICAgICAgICBwcmlvcml0eVZhbHVlID0gKHJlZjEgPSBkb2MudmFsdWVzKSAhPSBudWxsID8gcmVmMS5wcmlvcml0eSA6IHZvaWQgMDtcbiAgICAgICAgICBzd2l0Y2ggKHByaW9yaXR5VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCLnibnmgKVcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcImRhbmdlclwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCLntKfmgKVcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIndhcm5pbmdcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwi5Yqe5paHXCI6XG4gICAgICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJtdXRlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJpb3JpdHlJY29uQ2xhc3MpIHtcbiAgICAgICAgICAgIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgPSBcImNvbG9yLXByaW9yaXR5IGNvbG9yLXByaW9yaXR5LVwiICsgcHJpb3JpdHlJY29uQ2xhc3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXJlYWQtYmFyJz5cIiArIHVucmVhZCArIFwiPC9kaXY+XFxuPGRpdiBjbGFzcz0naW5zdGFuY2UtbmFtZSBcIiArIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MgKyBcIic+XCIgKyBkb2MubmFtZSArIGNjX3ZpZXcgKyBhZ2VudF92aWV3ICsgXCJcXG5cdDxzcGFuPlwiICsgZG9jLmFwcGxpY2FudF9uYW1lICsgXCI8L3NwYW4+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz0naW5zdGFuY2UtZGV0YWlsJz5cIiArIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgKyBcIlxcblx0PHNwYW4gY2xhc3M9J2luc3RhbmNlLW1vZGlmaWVkJyB0aXRsZT0nXCIgKyBtb2RpZmllZFN0cmluZyArIFwiJz5cIiArIG1vZGlmaWVkRnJvbU5vdyArIFwiPC9zcGFuPlxcbjwvZGl2PlwiO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiKSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJuYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX25hbWVcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIgYWdlbnRfdmlldywgY2NfdmlldywgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcywgcHJpb3JpdHlJY29uQ2xhc3MsIHByaW9yaXR5VmFsdWUsIHJlZiwgcmVmMSwgc3RlcF9jdXJyZW50X25hbWVfdmlldywgdW5yZWFkO1xuICAgICAgICAgIGNjX3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIGlmIChkb2MuaXNfY2MgJiYgISgocmVmID0gZG9jLmluYm94X3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKE1ldGVvci51c2VySWQoKSkgOiB2b2lkIDApICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnKSB7XG4gICAgICAgICAgICBjY192aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKFwiaW5zdGFuY2VfY2NfdGl0bGVcIikgKyBcIik8L2xhYmVsPiBcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWdlbnRfdmlldyA9IFwiXCI7XG4gICAgICAgICAgaWYgKGRvYy5hZ2VudF91c2VyX25hbWUpIHtcbiAgICAgICAgICAgIGFnZW50X3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgdXNlck5hbWU6IGRvYy5hZ2VudF91c2VyX25hbWVcbiAgICAgICAgICAgIH0pICsgXCIpPC9sYWJlbD5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdW5yZWFkID0gJyc7XG4gICAgICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnICYmIGRvYy5pc19yZWFkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1yZWNvcmQgdW5yZWFkXCI+PC9pPic7XG4gICAgICAgICAgfSBlbHNlIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ21vbml0b3InICYmIGRvYy5pc19oaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHVucmVhZCA9ICc8aSBjbGFzcz1cImZhIGZhLWxvY2tcIj48L2k+JztcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIlwiO1xuICAgICAgICAgIHByaW9yaXR5VmFsdWUgPSAocmVmMSA9IGRvYy52YWx1ZXMpICE9IG51bGwgPyByZWYxLnByaW9yaXR5IDogdm9pZCAwO1xuICAgICAgICAgIHN3aXRjaCAocHJpb3JpdHlWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcIueJueaApVwiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwiZGFuZ2VyXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIue0p+aApVwiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwid2FybmluZ1wiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCLlip7mlodcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIm11dGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmlvcml0eUljb25DbGFzcykge1xuICAgICAgICAgICAgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyA9IFwiY29sb3ItcHJpb3JpdHkgY29sb3ItcHJpb3JpdHktXCIgKyBwcmlvcml0eUljb25DbGFzcztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtcmVhZC1iYXInPlwiICsgdW5yZWFkICsgXCI8L2Rpdj5cXG48ZGl2IGNsYXNzPSdpbnN0YW5jZS1uYW1lIFwiICsgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyArIFwiJz5cIiArIGRvYy5uYW1lICsgY2NfdmlldyArIGFnZW50X3ZpZXcgKyBcIjwvZGl2PlwiO1xuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImFwcGxpY2FudF9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9uYW1lXCIpLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcInN1Ym1pdF9kYXRlXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N1Ym1pdF9kYXRlXCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgaWYgKGRvYy5zdWJtaXRfZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkb2Muc3VibWl0X2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImZsb3dfbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImN1cnJlbnRfc3RlcF9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX3N0ZXBfY3VycmVudF9uYW1lXCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIGNjX3RhZywganVkZ2UsIHN0ZXBfY3VycmVudF9uYW1lO1xuICAgICAgICAgIGlmIChkb2Muc3RhdGUgPT09IFwiY29tcGxldGVkXCIpIHtcbiAgICAgICAgICAgIGp1ZGdlID0gZG9jLmZpbmFsX2RlY2lzaW9uIHx8IFwiYXBwcm92ZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RlcF9jdXJyZW50X25hbWUgPSBkb2MuY3VycmVudF9zdGVwX25hbWUgfHwgJyc7XG4gICAgICAgICAgY2NfdGFnID0gJyc7XG4gICAgICAgICAgaWYgKGRvYy5jY19jb3VudCA+IDApIHtcbiAgICAgICAgICAgIGNjX3RhZyA9IFRBUGkxOG4uX18oJ2NjX3RhZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJzdGVwLWN1cnJlbnQtc3RhdGUgXCIgKyBqdWRnZSArIFwiXFxcIj5cIiArIHN0ZXBfY3VycmVudF9uYW1lICsgY2NfdGFnICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJtb2RpZmllZFwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19tb2RpZmllZFwiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHJldHVybiBtb21lbnQoZG9jLm1vZGlmaWVkKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcInN0YXJ0X2RhdGVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfc3RhcnRfZGF0ZVwiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIGlmIChkb2Muc3RhcnRfZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkb2Muc3RhcnRfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwibXlfZmluaXNoX2RhdGVcIixcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIGlmIChkb2MubXlfZmluaXNoX2RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZG9jLm15X2ZpbmlzaF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJtb2RpZmllZFwiLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImtleXdvcmRzXCIsXG4gICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiaXNfYXJjaGl2ZWRcIixcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciByZWY7XG4gICAgICAgICAgaWYgKChkb2MgIT0gbnVsbCA/IChyZWYgPSBkb2MudmFsdWVzKSAhPSBudWxsID8gcmVmLnJlY29yZF9uZWVkIDogdm9pZCAwIDogdm9pZCAwKSAmJiBkb2MudmFsdWVzLnJlY29yZF9uZWVkID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgaWYgKGRvYyAhPSBudWxsID8gZG9jLmlzX2FyY2hpdmVkIDogdm9pZCAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0KFwiWUVTXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHQoXCJOT1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9XG4gICAgXSxcbiAgICBkb206IChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgcmV0dXJuICd0cCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3RwbCc7XG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBvcmRlcjogW1s0LCBcImRlc2NcIl1dLFxuICAgIGV4dHJhRmllbGRzOiBbXCJmb3JtXCIsIFwiZmxvd1wiLCBcImluYm94X3VzZXJzXCIsIFwic3RhdGVcIiwgXCJzcGFjZVwiLCBcImFwcGxpY2FudFwiLCBcImZvcm1fdmVyc2lvblwiLCBcImZsb3dfdmVyc2lvblwiLCBcImlzX2NjXCIsIFwiY2NfY291bnRcIiwgXCJpc19yZWFkXCIsIFwiY3VycmVudF9zdGVwX25hbWVcIiwgXCJ2YWx1ZXNcIiwgXCJrZXl3b3Jkc1wiLCBcImZpbmFsX2RlY2lzaW9uXCIsIFwiZmxvd19uYW1lXCIsIFwiaXNfaGlkZGVuXCIsIFwiYWdlbnRfdXNlcl9uYW1lXCJdLFxuICAgIGxlbmd0aENoYW5nZTogdHJ1ZSxcbiAgICBsZW5ndGhNZW51OiBbMTAsIDE1LCAyMCwgMjUsIDUwLCAxMDBdLFxuICAgIHBhZ2VMZW5ndGg6IDEwLFxuICAgIGluZm86IGZhbHNlLFxuICAgIHNlYXJjaGluZzogdHJ1ZSxcbiAgICByZXNwb25zaXZlOiB7XG4gICAgICBkZXRhaWxzOiBmYWxzZVxuICAgIH0sXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgICBjaGFuZ2VTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IsIHVzZXJJZCkge1xuICAgICAgdmFyIHJlZiwgc3BhY2UsIHNwYWNlX3VzZXI7XG4gICAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIF9pZDogLTFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHNwYWNlID0gc2VsZWN0b3Iuc3BhY2U7XG4gICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgIGlmICgoc2VsZWN0b3IgIT0gbnVsbCA/IChyZWYgPSBzZWxlY3Rvci4kYW5kKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgICAgc3BhY2UgPSBzZWxlY3Rvci4kYW5kLmdldFByb3BlcnR5KCdzcGFjZScpWzBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX2lkOiAtMVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgICAgICB1c2VyOiB1c2VySWQsXG4gICAgICAgIHNwYWNlOiBzcGFjZVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBfaWQ6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIXNwYWNlX3VzZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfaWQ6IC0xXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfSxcbiAgICBwYWdpbmdUeXBlOiBcIm51bWJlcnNcIlxuICB9O1xuICBpZiAoZmxvd0lkKSB7XG4gICAga2V5ID0gXCJpbnN0YW5jZUZsb3dcIiArIGZsb3dJZDtcbiAgICBvcHRpb25zLm5hbWUgPSBrZXk7XG4gICAgVGFidWxhclRhYmxlcy5pbnN0YW5jZXMuZmllbGRzID0gZmllbGRzO1xuICAgIGluc19maWVsZHMgPSBfaGFuZGxlTGlzdEZpZWxkcyhUYWJ1bGFyVGFibGVzLmluc3RhbmNlcy5maWVsZHMpO1xuICAgIGluc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgICBpZiAoZi50eXBlICE9PSAndGFibGUnICYmIGYuaXNfbGlzdF9kaXNwbGF5KSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmNvbHVtbnMucHVzaCh7XG4gICAgICAgICAgZGF0YTogZi5uYW1lIHx8IGYuY29kZSxcbiAgICAgICAgICB0aXRsZTogdChmLm5hbWUgfHwgZi5jb2RlKSxcbiAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICBvcmRlcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSwgdmFsdWVzO1xuICAgICAgICAgICAgdmFsdWVzID0gZG9jLnZhbHVlcyB8fCB7fTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2YuY29kZV07XG4gICAgICAgICAgICBzd2l0Y2ggKGYudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlICd1c2VyJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5uYW1lIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdncm91cCc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZnVsbG5hbWUgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtb21lbnQodmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZGF0ZVRpbWUnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtb21lbnQodmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X3llc1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ29kYXRhJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChfLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gXy5wbHVjayh2YWx1ZSwgJ0BsYWJlbCcpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlWydAbGFiZWwnXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn07XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gVGFidWxhclRhYmxlcy5pbnN0YW5jZXMgPSBuZXcgVGFidWxhci5UYWJsZShpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyKCkpO1xufSk7XG5cbkdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zID0gZnVuY3Rpb24oYm94LCBmbG93SWQsIGZpZWxkcykge1xuICB2YXIga2V5LCBvcHRpb25zO1xuICBrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgYm94ICsgZmxvd0lkO1xuICBpZiAoYm94ID09PSBcImluYm94XCIpIHtcbiAgICBvcHRpb25zID0gX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zKGZsb3dJZCwgZmllbGRzKTtcbiAgfSBlbHNlIGlmIChib3ggPT09IFwib3V0Ym94XCIpIHtcbiAgICBvcHRpb25zID0gX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyhmbG93SWQsIGZpZWxkcyk7XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucyA9IGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoZmxvd0lkLCBmaWVsZHMpO1xuICAgIGlmICghZmxvd0lkKSB7XG4gICAgICBvcHRpb25zLm5hbWUgPSBcImluYm94X2luc3RhbmNlc1wiO1xuICAgIH1cbiAgfVxuICBpZiAoZmxvd0lkKSB7XG4gICAgb3B0aW9ucy5uYW1lID0ga2V5O1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zID0gZnVuY3Rpb24oZmxvd0lkLCBmaWVsZHMpIHtcbiAgdmFyIG9wdGlvbnM7XG4gIG9wdGlvbnMgPSBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyKGZsb3dJZCwgZmllbGRzKTtcbiAgaWYgKCFmbG93SWQpIHtcbiAgICBvcHRpb25zLm5hbWUgPSBcImluYm94X2luc3RhbmNlc1wiO1xuICB9XG4gIG9wdGlvbnMub3JkZXIgPSBbWzgsIFwiZGVzY1wiXV07XG4gIG9wdGlvbnMuZmlsdGVyZWRSZWNvcmRJZHMgPSBmdW5jdGlvbih0YWJsZSwgc2VsZWN0b3IsIHNvcnQsIHNraXAsIGxpbWl0LCBvbGRfZmlsdGVyZWRSZWNvcmRJZHMsIHVzZXJJZCwgZmluZE9wdGlvbnMpIHtcbiAgICB2YXIgYWdfc29ydCwgYWdncmVnYXRlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBhc3luY19hZ2dyZWdhdGUsIGZpbHRlcmVkUmVjb3JkSWRzLCBzMSwgczFfMCwgczFfMTtcbiAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uID0gW1xuICAgICAge1xuICAgICAgICAkbWF0Y2g6IHNlbGVjdG9yXG4gICAgICB9LCB7XG4gICAgICAgICRwcm9qZWN0OiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICBcIl9hcHByb3ZlXCI6ICckdHJhY2VzLmFwcHJvdmVzJ1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgICR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcbiAgICAgIH0sIHtcbiAgICAgICAgJHVud2luZDogXCIkX2FwcHJvdmVcIlxuICAgICAgfSwge1xuICAgICAgICAkbWF0Y2g6IHtcbiAgICAgICAgICAnX2FwcHJvdmUuaXNfZmluaXNoZWQnOiBmYWxzZSxcbiAgICAgICAgICAnX2FwcHJvdmUuaGFuZGxlcic6IHVzZXJJZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgXTtcbiAgICBpZiAoc29ydCAmJiBzb3J0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHMxID0gc29ydFswXTtcbiAgICAgIHMxXzAgPSBzMVswXTtcbiAgICAgIHMxXzEgPSBzMVsxXTtcbiAgICAgIGlmIChzMV8wID09PSAnc3RhcnRfZGF0ZScpIHtcbiAgICAgICAgZmluZE9wdGlvbnMuc29ydCA9IFtbJ21vZGlmaWVkJywgczFfMV1dO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRncm91cDoge1xuICAgICAgICAgICAgX2lkOiBcIiRfaWRcIixcbiAgICAgICAgICAgIFwiYXBwcm92ZV9zdGFydF9kYXRlXCI6IHtcbiAgICAgICAgICAgICAgJGZpcnN0OiBcIiRfYXBwcm92ZS5zdGFydF9kYXRlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhZ19zb3J0ID0ge1xuICAgICAgICAgICdhcHByb3ZlX3N0YXJ0X2RhdGUnOiBzMV8xID09PSAnYXNjJyA/IDEgOiAtMVxuICAgICAgICB9O1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRzb3J0OiBhZ19zb3J0XG4gICAgICAgIH0pO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRza2lwOiBza2lwXG4gICAgICAgIH0pO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRsaW1pdDogbGltaXRcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbHRlcmVkUmVjb3JkSWRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGFnZ3JlZ2F0ZSA9IGZ1bmN0aW9uKHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkcywgY2IpIHtcbiAgICAgICAgICB0YWJsZS5jb2xsZWN0aW9uLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUoYWdncmVnYXRlX29wZXJhdGlvbikudG9BcnJheShmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICAgIGZpbHRlcmVkUmVjb3JkSWRzLnB1c2goZG9jLl9pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBhc3luY19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKGFnZ3JlZ2F0ZSk7XG4gICAgICAgIGFzeW5jX2FnZ3JlZ2F0ZSh0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMpO1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRSZWNvcmRJZHMudW5pcSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkcztcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUYWJ1bGFyVGFibGVzLmluYm94X2luc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlKEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKFwiaW5ib3hcIikpO1xufSk7XG5cbl9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMgPSBmdW5jdGlvbihmbG93SWQsIGZpZWxkcykge1xuICB2YXIgb3B0aW9ucztcbiAgb3B0aW9ucyA9IGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoZmxvd0lkLCBmaWVsZHMpO1xuICBpZiAoIWZsb3dJZCkge1xuICAgIG9wdGlvbnMubmFtZSA9IFwib3V0Ym94X2luc3RhbmNlc1wiO1xuICB9XG4gIG9wdGlvbnMub3JkZXIgPSBbWzksIFwiZGVzY1wiXV07XG4gIG9wdGlvbnMuZmlsdGVyZWRSZWNvcmRJZHMgPSBmdW5jdGlvbih0YWJsZSwgc2VsZWN0b3IsIHNvcnQsIHNraXAsIGxpbWl0LCBvbGRfZmlsdGVyZWRSZWNvcmRJZHMsIHVzZXJJZCwgZmluZE9wdGlvbnMpIHtcbiAgICB2YXIgYWdfc29ydCwgYWdncmVnYXRlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBhc3luY19hZ2dyZWdhdGUsIGZpbHRlcmVkUmVjb3JkSWRzLCBzMSwgczFfMCwgczFfMTtcbiAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uID0gW1xuICAgICAge1xuICAgICAgICAkbWF0Y2g6IHNlbGVjdG9yXG4gICAgICB9LCB7XG4gICAgICAgICRwcm9qZWN0OiB7XG4gICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICBcIl9hcHByb3ZlXCI6ICckdHJhY2VzLmFwcHJvdmVzJ1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgICR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcbiAgICAgIH0sIHtcbiAgICAgICAgJHVud2luZDogXCIkX2FwcHJvdmVcIlxuICAgICAgfSwge1xuICAgICAgICAkbWF0Y2g6IHtcbiAgICAgICAgICAnX2FwcHJvdmUuaXNfZmluaXNoZWQnOiB0cnVlLFxuICAgICAgICAgICRvcjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAnX2FwcHJvdmUuaGFuZGxlcic6IHVzZXJJZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAnX2FwcHJvdmUudXNlcic6IHVzZXJJZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG4gICAgaWYgKHNvcnQgJiYgc29ydC5sZW5ndGggPiAwKSB7XG4gICAgICBzMSA9IHNvcnRbMF07XG4gICAgICBzMV8wID0gczFbMF07XG4gICAgICBzMV8xID0gczFbMV07XG4gICAgICBpZiAoczFfMCA9PT0gJ215X2ZpbmlzaF9kYXRlJykge1xuICAgICAgICBmaW5kT3B0aW9ucy5zb3J0ID0gW1snbW9kaWZpZWQnLCBzMV8xXV07XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJGdyb3VwOiB7XG4gICAgICAgICAgICBfaWQ6IFwiJF9pZFwiLFxuICAgICAgICAgICAgXCJhcHByb3ZlX2ZpbmlzaF9kYXRlXCI6IHtcbiAgICAgICAgICAgICAgJGxhc3Q6IFwiJF9hcHByb3ZlLmZpbmlzaF9kYXRlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhZ19zb3J0ID0ge1xuICAgICAgICAgICdhcHByb3ZlX2ZpbmlzaF9kYXRlJzogczFfMSA9PT0gJ2FzYycgPyAxIDogLTFcbiAgICAgICAgfTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkc29ydDogYWdfc29ydFxuICAgICAgICB9KTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkc2tpcDogc2tpcFxuICAgICAgICB9KTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkbGltaXQ6IGxpbWl0XG4gICAgICAgIH0pO1xuICAgICAgICBmaWx0ZXJlZFJlY29yZElkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBhZ2dyZWdhdGUgPSBmdW5jdGlvbih0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMsIGNiKSB7XG4gICAgICAgICAgdGFibGUuY29sbGVjdGlvbi5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKGFnZ3JlZ2F0ZV9vcGVyYXRpb24pLnRvQXJyYXkoZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgICBmaWx0ZXJlZFJlY29yZElkcy5wdXNoKGRvYy5faWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgYXN5bmNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhhZ2dyZWdhdGUpO1xuICAgICAgICBhc3luY19hZ2dyZWdhdGUodGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkUmVjb3JkSWRzLnVuaXEoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvbGRfZmlsdGVyZWRSZWNvcmRJZHM7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gb3B0aW9ucztcbn07XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gVGFidWxhclRhYmxlcy5vdXRib3hfaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUoR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoXCJvdXRib3hcIikpO1xufSk7XG5cbmlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgVGFidWxhclRhYmxlcy5mbG93SW5zdGFuY2VzID0gbmV3IFJlYWN0aXZlVmFyKCk7XG59XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gVHJhY2tlci5hdXRvcnVuKGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50ICYmICFTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgIGlmIChTZXNzaW9uLmdldChcImZsb3dJZFwiKSAmJiBTZXNzaW9uLmdldChcImJveFwiKSAhPT0gJ2RyYWZ0Jykge1xuICAgICAgICByZXR1cm4gTWV0ZW9yLmNhbGwoXCJuZXdJbnN0YW5jZXNMaXN0VGFidWxhclwiLCBTZXNzaW9uLmdldChcImJveFwiKSwgU2Vzc2lvbi5nZXQoXCJmbG93SWRcIiksIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgICBuZXdJbnN0YW5jZXNMaXN0VGFidWxhcihTZXNzaW9uLmdldChcImJveFwiKSwgU2Vzc2lvbi5nZXQoXCJmbG93SWRcIiksIHJlc3VsdCk7XG4gICAgICAgICAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX2NoYW5nZU9yZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KTtcblxubmV3SW5zdGFuY2VzTGlzdFRhYnVsYXIgPSBmdW5jdGlvbihib3gsIGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBmbG93LCBrZXksIHJlZiwgcmVmMSwgcmVmMjtcbiAgaWYgKCFmaWVsZHMpIHtcbiAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZsb3dJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBmb3JtOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgZmllbGRzID0gKHJlZiA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmbG93ICE9IG51bGwgPyBmbG93LmZvcm0gOiB2b2lkIDBcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgJ2N1cnJlbnQuZmllbGRzJzogMVxuICAgICAgfVxuICAgIH0pKSAhPSBudWxsID8gKHJlZjEgPSByZWYuY3VycmVudCkgIT0gbnVsbCA/IHJlZjEuZmllbGRzIDogdm9pZCAwIDogdm9pZCAwO1xuICB9XG4gIGZpZWxkcyA9IF9oYW5kbGVMaXN0RmllbGRzKGZpZWxkcyk7XG4gIGlmICgoZmllbGRzICE9IG51bGwgPyAocmVmMiA9IGZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcImlzX2xpc3RfZGlzcGxheVwiLCB0cnVlKSkgIT0gbnVsbCA/IHJlZjIubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICBrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgYm94ICsgZmxvd0lkO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIFRhYnVsYXJUYWJsZXMuZmxvd0luc3RhbmNlcy5zZXQobmV3IFRhYnVsYXIuVGFibGUoR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoYm94LCBmbG93SWQsIGZpZWxkcykpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IFRhYnVsYXIuVGFibGUoR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoYm94LCBmbG93SWQsIGZpZWxkcykpO1xuICAgIH1cbiAgICByZXR1cm4gY29uc29sZS5sb2coXCJuZXcgVGFidWxhclRhYmxlcyBcIiwga2V5KTtcbiAgfVxufTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBNZXRlb3IubWV0aG9kcyh7XG4gICAgbmV3SW5zdGFuY2VzTGlzdFRhYnVsYXI6IGZ1bmN0aW9uKGJveCwgZmxvd0lkKSB7XG4gICAgICB2YXIgZmllbGRzLCBmbG93LCByZWYsIHJlZjE7XG4gICAgICBuZXdJbnN0YW5jZXNMaXN0VGFidWxhcihib3gsIGZsb3dJZCk7XG4gICAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICAgIF9pZDogZmxvd0lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGZvcm06IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmaWVsZHMgPSAocmVmID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogZmxvdyAhPSBudWxsID8gZmxvdy5mb3JtIDogdm9pZCAwXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICdjdXJyZW50LmZpZWxkcyc6IDFcbiAgICAgICAgfVxuICAgICAgfSkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5jdXJyZW50KSAhPSBudWxsID8gcmVmMS5maWVsZHMgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gZmllbGRzO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=
