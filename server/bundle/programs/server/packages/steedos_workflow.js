(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var DDP = Package['ddp-client'].DDP;
var DDPServer = Package['ddp-server'].DDPServer;
var check = Package.check.check;
var Match = Package.check.Match;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var JsonRoutes = Package['simple:json-routes'].JsonRoutes;
var RestMiddleware = Package['simple:json-routes'].RestMiddleware;
var Restivus = Package['nimble:restivus'].Restivus;
var SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;
var MongoObject = Package['aldeed:simple-schema'].MongoObject;
var Tabular = Package['aldeed:tabular'].Tabular;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var WorkflowManager = Package['steedos:app-workflow'].WorkflowManager;
var uuflowManager = Package['steedos:app-workflow'].uuflowManager;
var pushManager = Package['steedos:app-workflow'].pushManager;
var steedosExport = Package['steedos:app-workflow'].steedosExport;
var steedosImport = Package['steedos:app-workflow'].steedosImport;
var Template = Package['meteorhacks:ssr'].Template;
var SSR = Package['meteorhacks:ssr'].SSR;
var SubsManager = Package['meteorhacks:subs-manager'].SubsManager;
var WebApp = Package.webapp.WebApp;
var WebAppInternals = Package.webapp.WebAppInternals;
var main = Package.webapp.main;
var moment = Package['momentjs:moment'].moment;
var CFDataManager = Package['steedos:autoform'].CFDataManager;
var Selector = Package['steedos:base'].Selector;
var Steedos = Package['steedos:base'].Steedos;
var AjaxCollection = Package['steedos:base'].AjaxCollection;
var SteedosDataManager = Package['steedos:base'].SteedosDataManager;
var SteedosOffice = Package['steedos:base'].SteedosOffice;
var billingManager = Package['steedos:base'].billingManager;
var MailQueue = Package['steedos:mailqueue'].MailQueue;
var WebhookQueue = Package['steedos:webhookqueue'].WebhookQueue;
var _i18n = Package['universe:i18n']._i18n;
var i18n = Package['universe:i18n'].i18n;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var meteorInstall = Package.modules.meteorInstall;
var HTML = Package.htmljs.HTML;
var Collection2 = Package['aldeed:collection2-core'].Collection2;
var FS = Package['steedos:cfs-base-package'].FS;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;

/* Package-scope variables */
var __coffeescriptShare, Workflow, InstanceReadOnlyTemplate, TemplateManager, SteedosTable, year, month, date, hours, seconds, locale, utcOffset, str, addItemTr, values_history, current_user_info, flow_id, userId, orgFieldUsers, formula_values, new_ins_id, instanceHtml, Form_formula, getHandlersManager, permissionManager, approveManager, flowManager, formManager, stepManager, workflowTemplate, InstanceManager, WorkflowManager_format, CoreForm, InstanceNumberRules;

var require = meteorInstall({"node_modules":{"meteor":{"steedos:workflow":{"checkNpm.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/checkNpm.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let checkNpmVersions;
module.link("meteor/tmeasday:check-npm-versions", {
  checkNpmVersions(v) {
    checkNpmVersions = v;
  }

}, 0);
checkNpmVersions({
  "node-schedule": "^1.3.1",
  cookies: "^0.6.2",
  "xml2js": "^0.4.19",
  mkdirp: "^0.3.5"
}, 'steedos:workflow');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"URI.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/URI.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.17.0
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */
(function (root, factory) {
  'use strict'; // https://github.com/umdjs/umd/blob/master/returnExports.js
  // if (typeof exports === 'object') {
  //   // Node
  //   module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  // } else

  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
})(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase

  /*jshint camelcase: false */
  // save current URI variable, if any

  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;

    var _baseSupplied = arguments.length >= 2; // Allow instantiation without the 'new' keyword


    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    this.href(url); // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor

    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  URI.version = '1.17.0';
  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */


      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length; // value may be string, number, array, regexp

    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);

    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    } // arrays can't be equal if they have different amount of content


    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function () {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  }; // state: allow duplicate query parameters (a=1&a=1)


  URI.duplicateQueryParameters = false; // state: replaces + with %20 (space in query strings)

  URI.escapeQuerySpace = true; // static properties

  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\.-]/i;
  URI.punycode_expression = /(xn--)/i; // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?

  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/; // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt

  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/; // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html

  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
  }; // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports

  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  }; // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -

  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/; // map DOM Elements to their URI attribute

  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src',
    // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };

  URI.getDomAttribute = function (node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase(); // <input> should only expose src for type="image"

    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  } // encoding / decoding according to RFC3986


  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, '%2A');
  }

  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;

  URI.iso8859 = function () {
    URI.encode = escape;
    URI.decode = unescape;
  };

  URI.unicode = function () {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };

  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };

  URI.encodeQuery = function (string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };

  URI.decodeQuery = function (string, escapeQuerySpace) {
    string += '';

    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch (e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  }; // generate encode/decode path functions


  var _parts = {
    'encode': 'encode',
    'decode': 'decode'
  };

  var _part;

  var generateAccessor = function (_group, _part) {
    return function (string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function (c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function (_sep, _codingFuncName, _innerCodingFuncName) {
    return function (string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;

      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function (string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  }; // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.


  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function (string, parts) {
    var pos;

    if (!parts) {
      parts = {};
    } // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
    // extract fragment


    pos = string.indexOf('#');

    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // extract query


    pos = string.indexOf('?');

    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    } // extract protocol


    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2); // extract "user:pass@host:port"

      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');

      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;

        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3) === '//') {
          string = string.substring(pos + 3); // extract "user:pass@host:port"

          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    } // what's left must be the path


    parts.path = string; // and we're done

    return parts;
  };

  URI.parseHost = function (string, parts) {
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233
    string = string.replace(/\\/g, '/'); // extract host:port

    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;

      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);

      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    return string.substring(pos) || '/';
  };

  URI.parseAuthority = function (string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };

  URI.parseUserinfo = function (string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t; // authority@ must come before /path

    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };

  URI.parseQuery = function (string, escapeQuerySpace) {
    if (!string) {
      return {};
    } // throw out the funky business - "?"[name"="value"&"]+


    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace); // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters

      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function (parts) {
    var t = '';

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
    }

    t += URI.buildAuthority(parts) || '';

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }

    return t;
  };

  URI.buildHost = function (parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };

  URI.buildAuthority = function (parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };

  URI.buildUserinfo = function (parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);

      if (parts.password) {
        t += ':' + URI.encode(parts.password);
      }

      t += '@';
    }

    return t;
  };

  URI.buildQuery = function (data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
    var t = '';
    var unique, key, i, length;

    for (key in data) {
      if (hasOwn.call(data, key) && key) {
        if (isArray(data[key])) {
          unique = {};

          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);

              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };

  URI.buildQueryParameter = function (name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function (data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };

  URI.removeQuery = function (data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };

  URI.hasQuery = function (data, name, value, withinArray) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          if (!URI.hasQuery(data, key, name[key])) {
            return false;
          }
        }
      }

      return true;
    } else if (typeof name !== 'string') {
      throw new TypeError('URI.hasQuery() accepts an object, string as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data;
      // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);

        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);

      /* falls through */

      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };

  URI.commonPath = function (one, two) {
    var length = Math.min(one.length, two.length);
    var pos; // find first non-matching character

    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    } // revert to last /


    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function (string, callback, options) {
    options || (options = {});

    var _start = options.start || URI.findUri.start;

    var _end = options.end || URI.findUri.end;

    var _trim = options.trim || URI.findUri.trim;

    var _attributeOpen = /[a-z0-9-]=["']?$/i;
    _start.lastIndex = 0;

    while (true) {
      var match = _start.exec(string);

      if (!match) {
        break;
      }

      var start = match.index;

      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);

        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end).replace(_trim, '');

      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function (v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js
    if (v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
      }

      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }
    }
  }; // noConflict


  URI.noConflict = function (removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function (deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function () {
    return new URI(this);
  };

  p.valueOf = p.toString = function () {
    return this.build(false)._string;
  };

  function generateSimpleAccessor(_part) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key) {
    return function (v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';

          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function (v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? '?' + t : t;
  };

  p.hash = function (v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? '#' + t : t;
  };

  p.pathname = function (v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }

      this.build(!build);
      return this;
    }
  };

  p.path = p.pathname;

  p.href = function (href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;

    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);

    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    } // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)


    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;

      for (key in src) {
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  }; // identification accessors


  p.is = function (what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;
      // hostname identification

      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  }; // component specific input validation


  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function (v, build) {
    if (v !== undefined) {
      if (v) {
        // accept trailing ://
        v = v.replace(/:(\/\/)?$/, '');

        if (!v.match(URI.protocol_expression)) {
          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
        }
      }
    }

    return _protocol.call(this, v, build);
  };

  p.scheme = p.protocol;

  p.port = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';

        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        if (v.match(/[^0-9]/)) {
          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
        }
      }
    }

    return _port.call(this, v, build);
  };

  p.hostname = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = {};
      var res = URI.parseHost(v, x);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;
    }

    return _hostname.call(this, v, build);
  }; // compound accessors


  p.origin = function (v, build) {
    var parts;

    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();
      if (!authority) return '';
      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
      return this;
    }
  };

  p.host = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.authority = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);

      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };

  p.userinfo = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      if (!this._parts.username) {
        return '';
      }

      var t = URI.buildUserinfo(this._parts);
      return t.substring(0, t.length - 1);
    } else {
      if (v[v.length - 1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };

  p.resource = function (v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  }; // fraction accessors


  p.subdomain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    } // convenience, return "www" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // grab domain and add another segment


      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;

      var sub = this._parts.hostname.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v) {
        URI.ensureValidHostname(v);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.domain = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // convenience, return "example.org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      } // if hostname consists of 1 or 2 segments, it must be the domain


      var t = this._parts.hostname.match(/\./g);

      if (t && t.length < 2) {
        return this._parts.hostname;
      } // grab tld and add another segment


      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end - 1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      URI.ensureValidHostname(v);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.tld = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    } // return "org" from "www.example.org"


    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');

      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.directory = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
      return v ? URI.decodePath(res) : res;
    } else {
      var e = this._parts.path.length - this.filename().length;

      var directory = this._parts.path.substring(0, e);

      var replace = new RegExp('^' + escapeRegEx(directory)); // fully qualifier directories begin with a slash

      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      } // directories always end with a slash


      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };

  p.filename = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');

      var res = this._parts.path.substring(pos + 1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };

  p.suffix = function (v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      } // suffix may only contain alnum characters (yup, I made this up.)


      s = filename.substring(pos + 1);
      res = /^[a-z0-9%]+$/i.test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };

  p.segment = function (segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined ? segments : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = []; // collapse empty elements within array

        for (var i = 0, l = v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length - 1].length) {
            segments.pop();
          }

          segments.push(trimSlashes(v[i]));
        }
      } else if (v || typeof v === 'string') {
        v = trimSlashes(v);

        if (segments[segments.length - 1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length - 1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = trimSlashes(v);
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };

  p.segmentCoded = function (segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);

      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = typeof v === 'string' || v instanceof String ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  }; // mutating query string


  var q = p.query;

  p.query = function (v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };

  p.setQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.addQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.removeQuery = function (name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);

    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };

  p.hasQuery = function (name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };

  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery; // sanitizing URLs

  p.normalize = function () {
    if (this._parts.urn) {
      return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    }

    return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
  };

  p.normalizeProtocol = function (build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizeHostname = function (build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };

  p.normalizePort = function (build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizePath = function (build) {
    var _path = this._parts.path;

    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    var _was_relative;

    var _leadingParents = '';

    var _parent, _pos; // handle relative paths


    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    } // handle relative files (as opposed to directories)


    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    } // resolve simples


    _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, '/').replace(/\/{2,}/g, '/'); // remember leading parents

    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';

      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    } // resolve parents


    while (true) {
      _parent = _path.indexOf('/..');

      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');

      if (_pos === -1) {
        _pos = _parent;
      }

      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    } // revert to relative


    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    _path = URI.recodePath(_path);
    this._parts.path = _path;
    this.build(!build);
    return this;
  };

  p.normalizePathname = p.normalizePath;

  p.normalizeQuery = function (build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };

  p.normalizeFragment = function (build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };

  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function () {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = escape;
    URI.decode = decodeURIComponent;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.unicode = function () {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;
    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;

    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }

    return this;
  };

  p.readable = function () {
    var uri = this.clone(); // removing username, password, because they shouldn't be displayed according to RFC 3986

    uri.username('').password('').normalize();
    var t = '';

    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);

        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);

    if (uri._parts.query) {
      var q = '';

      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, '%26');
        }
      }

      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  }; // resolving relative and absolute URLs


  p.absoluteTo = function (base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (!resolved._parts.protocol) {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; p = properties[i]; i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;

      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else if (resolved._parts.path.substring(-2) === '..') {
      resolved._parts.path += '/';
    }

    if (resolved.path().charAt(0) !== '/') {
      basedir = base.directory();
      basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
      resolved._parts.path = (basedir ? basedir + '/' : '') + resolved._parts.path;
      resolved.normalizePath();
    }

    resolved.build();
    return resolved;
  };

  p.relativeTo = function (base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    } // determine common sub path


    common = URI.commonPath(relativePath, basePath); // If the paths have nothing in common, return a relative URL with the absolute path.

    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, '').replace(/.*?\//g, '../');
    relativeParts.path = parents + relativeParts.path.substring(common.length) || './';
    return relative.build();
  }; // comparing URIs


  p.equals = function (uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;
    one.normalize();
    two.normalize(); // exact match

    if (one.toString() === two.toString()) {
      return true;
    } // extract query string


    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query(''); // definitely not equal if not even non-query parts match

    if (one.toString() !== two.toString()) {
      return false;
    } // query parameters have the same length, even if they're permuted


    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  }; // state


  p.duplicateQueryParameters = function (v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function (v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"collection_helpers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/collection_helpers.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tapi18n.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/tapi18n.coffee                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"core.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/core.coffee                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Workflow = {};
this.ImageSign = {};
this.TracesHandler = {};
this.TracesTemplate = {};
this.InstanceformTemplate = {};
this.InstanceAttachmentTemplate = {};
this.InstanceSignText = {};
this.RelatedInstances = {};
this.RelatedRecords = {};
this.InstanceMacro = {
  context: {}
};
this.TracesManager = {};

InstanceSignText.isOpinionField_from_string = function (field_formula) {
  return (field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{yijianlan:") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{\"yijianlan\":") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{'yijianlan':") : void 0) > -1;
};

InstanceSignText.includesOpinionField = function (form, form_version) {
  var _form_version, field_formulas, fields;

  field_formulas = new Array();
  _form_version = {};

  if (Meteor.isServer) {
    _form_version = uuflowManager.getFormVersion(db.forms.findOne({
      _id: form
    }), form_version);
  } else {
    _form_version = db.form_versions.findOne({
      _id: form_version,
      form: form
    });
  }

  fields = (_form_version != null ? _form_version.fields : void 0) || [];
  fields.forEach(function (f) {
    var ref;

    if (f.type === 'table') {
      return console.log('ignore opinion field in table');
    } else if (f.type === 'section') {
      return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
        return field_formulas.push(f1.formula);
      }) : void 0 : void 0;
    } else {
      return field_formulas.push(f.formula);
    }
  });
  return _.some(field_formulas, function (field_formula) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"models":{"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/forms.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flows.coffee                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_roles.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/flow_positions.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/instances.coffee                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/categories.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"spaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/spaces.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleted_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/deleted_instances.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"auth_tokens.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/auth_tokens.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
db.auth_tokens = new Meteor.Collection('auth_tokens');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"webhooks.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/webhooks.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_user_signs.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/models/space_users.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"cfs":{"instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/cfs/instances.coffee                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"admin.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/lib/admin.coffee                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"client":{"lib":{"instance_readonly_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/instance_readonly_template.coffee                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _getLocale, _getRequiredFields, _getStartStepEditableFields, _getStartStepRequiredFields, _getTemplateData, _getViewHtml, getLinkText;

InstanceReadOnlyTemplate = {};
InstanceReadOnlyTemplate.instance_attachment = "<tr>\n	<td class=\"ins-attach-view\">\n		<a href=\"{{ins_attach_download_url _id absolute}}\" class=\"ins_attach_href\" target=\"_parent\" data-name=\"{{this.name}}\" data-type=\"{{this.original.type}}\" data-id=\"{{_id}}\">{{this.name}}</a>\n	</td>\n</tr>";
InstanceReadOnlyTemplate.afSelectUserRead = "<div class='selectUser form-control ins_applicant'>{{value}}</div>";
InstanceReadOnlyTemplate.afFormGroupRead = "<div class='form-group'>\n	{{#with getField this.name}}\n		{{#if equals type 'section'}}\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if showLabel}}\n					<label>{{getLabel code}}</label>\n				{{/if}}\n				<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n			{{/if}}\n		{{/if}}\n	{{/with}}\n</div>";
InstanceReadOnlyTemplate.afFormGroup = "\n{{#with getField this.name}}\n		{{#if equals type 'section'}}\n			<div class=\"form-group\">\n				<div class='section callout callout-default'>\n					<label class=\"control-label\">{{f_label this}}</label>\n					<p>{{{description}}}</p>\n				</div>\n  				</div>\n		{{else}}\n			{{#if equals type 'table'}}\n				<div class=\"panel panel-default steedos-table\">\n					<div class=\"panel-body\" style=\"padding:0px;\">\n						<div class=\"panel-heading\" >\n							<label class='control-label'>{{getLabel code}}</label>\n							<span class=\"description\">{{{description}}}</span>\n						</div>\n						<div class=\"readonly-table\" style=\"padding:0px;overflow-x:auto;\">\n								<table type='table' class=\"table table-bordered table-condensed autoform-table\" style='margin-bottom:0px;' {{this.atts}} id=\"{{this.code}}Table\" name=\"{{this.code}}\" data-schema-key=\"{{this.name}}\">\n									<thead id=\"{{this.name}}Thead\" name=\"{{this.name}}Thead\">\n										{{{getTableThead this}}}\n									</thead>\n									<tbody id=\"{{this.name}}Tbody\" name=\"{{this.name}}Tbody\">\n										{{{getTableBody this}}}\n									</tbody>\n								</table>\n						</div>\n					</div>\n				</div>\n			{{else}}\n				{{#if equals type 'input'}}\n					<div class=\"form-group\" data-required=\"{{#if is_required}}true{{/if}}\">\n						<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n						{{#if is_textarea}}\n							<textarea title=\"{{getLabel code}}\" name=\"{{code}}\" {{getPermissions code}} data-schema-key=\"{{getLabel code}}\" class=\"form-control\"></textarea>\n						{{/if}}\n						{{#unless is_textarea}}\n							<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" {{getPermissions code}} data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n						{{/unless}}\n					</div>\n				{{else}}\n					{{#if equals type 'number'}}\n						<div class=\"form-group\">\n							<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n							<input type=\"number\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n						</div>\n					{{else}}\n						{{#if equals type 'date'}}\n							<div class=\"form-group\">\n								<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n								<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type=\"date\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n							</div>\n						{{else}}\n							{{#if equals type 'dateTime'}}\n								<div class=\"form-group\">\n									<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n									<input type=\"text\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-type='datetime' data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n								</div>\n							{{else}}\n								{{#if equals type 'password'}}\n									<div class=\"form-group\">\n										<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n										<input type=\"password\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n									</div>\n								{{else}}\n									{{#if equals type 'select'}}\n										<div class=\"form-group\">\n											<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n											<select name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n												{{#each options this}}\n													<option value=\"{{value}}\">{{label}}</option>\n												{{/each}}\n											</select>\n										</div>\n									{{else}}\n										{{#if equals type 'radio'}}\n											<div class=\"form-group\">\n												<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n												<div class=\"af-radio-group\" data-schema-key=\"{{getLabel code}}\">\n													{{#each options this}}\n        												<label class=\"radio-inline fix-indent\"><input type=\"radio\" value=\"{{value}}\" name=\"{{../code}}\" class=\"radio-inline fix-indent\"> {{label}}</label>\n    													{{/each}}\n    												</div>\n											</div>\n										{{else}}\n											{{#if equals type 'multiSelect'}}\n												<div class=\"form-group\">\n													<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n													<div class=\"af-checkbox-group\" data-schema-key=\"{{getLabel code}}\">\n														{{#each options this}}\n														<label class=\"checkbox-inline fix-indent\"><input type=\"checkbox\" value=\"{{value}}\" name=\"{{../code}}\" class=\"checkbox-inline fix-indent\"> {{label}}</label>\n														{{/each}}\n													</div>\n												</div>\n											{{else}}\n												{{#if equals type 'url'}}\n													<div class=\"form-group\">\n														<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n														<input type=\"url\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n													</div>\n												{{else}}\n													{{#if equals type 'email'}}\n														<div class=\"form-group\">\n															<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n															<input type=\"email\" title=\"{{getLabel code}}\" name=\"{{code}}\" data-schema-key=\"{{getLabel code}}\" class=\"form-control\">\n														</div>\n													{{else}}\n														{{#if equals type 'checkbox'}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class=\"checkbox\" data-schema-key=\"{{getLabel code}}\">\n																	<label style=\"width: 100%;\"><input type=\"checkbox\" value=\"true\" name=\"{{code}}\" class=\"checkbox-inline fix-indent\"></label>\n																</div>\n															</div>\n														{{else}}\n															<div class=\"form-group\">\n																<label for=\"7ZQnDsXBGohZMetA5\" class=\"control-label\">{{getLabel code}}</label>\n																<div class='{{getCfClass this}} form-control' readonly disabled>{{{getValue code}}}</div>\n															</div>\n														{{/if}}\n													{{/if}}\n												{{/if}}\n											{{/if}}\n										{{/if}}\n									{{/if}}\n								{{/if}}\n							{{/if}}\n						{{/if}}\n					{{/if}}\n				{{/if}}\n			{{/if}}\n		{{/if}}\n	{{/with}}";

InstanceReadOnlyTemplate.create = function (tempalteName, steedosData) {
  var template, templateCompiled, templateRenderFunction;
  template = InstanceReadOnlyTemplate[tempalteName];
  templateCompiled = SpacebarsCompiler.compile(template, {
    isBody: true
  });
  templateRenderFunction = eval(templateCompiled);
  Template[tempalteName] = new Blaze.Template(tempalteName, templateRenderFunction);
  Template[tempalteName].steedosData = steedosData;
  return Template[tempalteName].helpers(InstanceformTemplate.helpers);
};

InstanceReadOnlyTemplate.createInstanceSignText = function (steedosData) {
  var instanceSignTextCompiled, instanceSignTextHtml, instanceSignTextRenderFunction;
  instanceSignTextHtml = _getViewHtml('client/views/instance/instance_sign_text.html');
  instanceSignTextCompiled = SpacebarsCompiler.compile(instanceSignTextHtml, {
    isBody: true
  });
  instanceSignTextRenderFunction = eval(instanceSignTextCompiled);
  Template.instanceSignText = new Blaze.Template("instanceSignText", instanceSignTextRenderFunction);
  Template.instanceSignText.steedosData = steedosData;
  return Template.instanceSignText.helpers(InstanceSignText.helpers);
};

InstanceReadOnlyTemplate.createImageSign = function (steedosData) {
  var imageSignCompiled, imageSignHtml, imageSignRenderFunction;
  imageSignHtml = _getViewHtml('client/views/instance/image_sign.html');
  imageSignCompiled = SpacebarsCompiler.compile(imageSignHtml, {
    isBody: true
  });
  imageSignRenderFunction = eval(imageSignCompiled);
  Template.imageSign = new Blaze.Template("imageSign", imageSignRenderFunction);
  Template.imageSign.steedosData = steedosData;
  return Template.imageSign.helpers(ImageSign.helpers);
};

InstanceReadOnlyTemplate.createTracesHanlder = function (steedosData) {
  var tracesHanlderCompiled, tracesHanlderHtml, tracesHanlderRenderFunction;
  tracesHanlderHtml = _getViewHtml('client/views/instance/traces_handler.html');
  tracesHanlderCompiled = SpacebarsCompiler.compile(tracesHanlderHtml, {
    isBody: true
  });
  tracesHanlderRenderFunction = eval(tracesHanlderCompiled);
  Template.instance_traces_handler = new Blaze.Template("instance_traces_handler", tracesHanlderRenderFunction);
  Template.instance_traces_handler.steedosData = steedosData;
  return Template.instance_traces_handler.helpers(TracesHandler.helpers);
};

InstanceReadOnlyTemplate.init = function (steedosData) {
  InstanceReadOnlyTemplate.create("afSelectUserRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("afFormGroup", steedosData);
  }

  InstanceReadOnlyTemplate.create("afFormGroupRead", steedosData);

  if (Meteor.isServer) {
    InstanceReadOnlyTemplate.create("instance_attachment", {
      absolute: steedosData.absolute
    });
    InstanceReadOnlyTemplate.createImageSign(steedosData);
    InstanceReadOnlyTemplate.createTracesHanlder(steedosData);
    return InstanceReadOnlyTemplate.createInstanceSignText(steedosData);
  }
};

getLinkText = function (item, label, detail_url) {
  if (detail_url) {
    detail_url = detail_url.replace("{_id}", item._id);

    if (!/^http(s?):\/\//.test(detail_url)) {
      detail_url = Steedos.absoluteUrl(detail_url);
    }

    return '<a href="' + detail_url + '" target="_blank">' + label + '</a>';
  } else {
    return label;
  }
};

InstanceReadOnlyTemplate.getValue = function (value, field, locale, utcOffset) {
  var date, detail_url, e, hours, month, seconds, t, t0, t1, year;

  if (!value && value !== false) {
    return '';
  }

  switch (field.type) {
    case 'email':
      value = value ? '<a href=\'mailto:' + value + '\'>' + value + '</a>' : '';
      break;

    case 'url':
      if (value) {
        if (value.indexOf("http") === 0) {
          try {
            value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
          } catch (error) {
            e = error;
            value = "<a href='' target='_blank'>" + value + "</a>";
          }
        } else {
          value = "<a href='http://" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
        }
      } else {
        value = '';
      }

      break;

    case 'group':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("fullname").toString() : void 0;
      } else {
        value = value != null ? value.fullname : void 0;
      }

      break;

    case 'user':
      if (field.is_multiselect) {
        value = value != null ? value.getProperty("name").toString() : void 0;
      } else {
        value = value != null ? value.name : void 0;
      }

      break;

    case 'password':
      value = '******';
      break;

    case 'checkbox':
      if (value && value !== 'false') {
        value = TAPi18n.__("form_field_checkbox_yes", {}, locale);
      } else {
        value = TAPi18n.__("form_field_checkbox_no", {}, locale);
      }

      break;

    case 'dateTime':
      if (value && value.length === 16) {
        t = value.split("T");
        t0 = t[0].split("-");
        t1 = t[1].split(":");
        year = t0[0];
        month = t0[1];
        date = t0[2];
        hours = t1[0];
        seconds = t1[1];
        value = new Date(year, month - 1, date, hours, seconds);
      } else {
        value = new Date(value);
      }

      value = InstanceReadOnlyTemplate.formatDate(value, utcOffset);
      break;

    case 'input':
      if (field.is_textarea) {
        value = Spacebars.SafeString(Markdown(value));
      }

      break;

    case 'number':
      if (value || value === 0) {
        value = Steedos.numberToString(value, field.digits);
      }

      break;

    case 'odata':
      detail_url = field.detail_url;

      if (field.is_multiselect) {
        value = _.map(value, function (item) {
          return getLinkText(item, item['@label'], detail_url);
        });
      } else {
        value = getLinkText(value, value['@label'], detail_url);
      }

      break;

    case 'html':
      value = value ? "<div class=\"steedos-html\">" + value + "</div>" : '';
  }

  return value;
};

InstanceReadOnlyTemplate.getLabel = function (fields, code) {
  var field;
  field = fields.findPropertyByPK("code", code);

  if (field) {
    if (field.name) {
      return field.name;
    } else {
      return field.code;
    }
  }
};

InstanceReadOnlyTemplate.getInstanceFormVersion = function (instance) {
  var form, form_fields, form_version;
  form = db.forms.findOne(instance.form);
  form_version = {};
  form_fields = [];

  if (form.current._id === instance.form_version) {
    form_version = form.current;
  } else {
    form_version = _.where(form.historys, {
      _id: instance.form_version
    })[0];
  }

  form_version.fields.forEach(function (field) {
    if (field.type === 'section') {
      form_fields.push(field);

      if (field.fields) {
        return field.fields.forEach(function (f) {
          return form_fields.push(f);
        });
      }
    } else if (field.type === 'table') {
      field['sfields'] = field['fields'];
      delete field['fields'];
      return form_fields.push(field);
    } else {
      return form_fields.push(field);
    }
  });
  form_version.fields = form_fields;
  return form_version;
};

InstanceReadOnlyTemplate.getFlowVersion = function (instance) {
  var flow, flow_version;
  flow = db.flows.findOne(instance.flow);
  flow_version = {};

  if (flow.current._id === instance.flow_version) {
    flow_version = flow.current;
  } else {
    flow_version = _.where(flow.historys, {
      _id: instance.flow_version
    })[0];
  }

  return flow_version;
};

_getViewHtml = function (path) {
  var viewHtml;
  viewHtml = Assets.getText(path);

  if (viewHtml) {
    viewHtml = viewHtml.replace(/<template[\w\s\"\=']+>/i, "").replace(/<\/template>/i, "");
  }

  return viewHtml;
};

_getLocale = function (user) {
  var locale, ref, ref1;

  if ((user != null ? (ref = user.locale) != null ? ref.toLocaleLowerCase() : void 0 : void 0) === 'zh-cn') {
    locale = "zh-CN";
  } else if ((user != null ? (ref1 = user.locale) != null ? ref1.toLocaleLowerCase() : void 0 : void 0) === 'en-us') {
    locale = "en";
  } else {
    locale = "zh-CN";
  }

  return locale;
};

_getRequiredFields = function (fields, rev) {
  if (!rev) {
    rev = [];
  }

  fields.forEach(function (field) {
    if (field.type === 'section') {
      return _getRequiredFields(field.fields, rev);
    } else if (field.type === 'table') {} else {
      if (field.is_required) {
        return rev.push(field.code);
      }
    }
  });
  return rev;
};

_getStartStepEditableFields = function (fields, steps) {
  var editableCode, startStep;
  startStep = steps.findPropertyByPK("step_type", "start");
  editableCode = [];

  _.keys(startStep.permissions).forEach(function (key) {
    if (startStep.permissions[key] === 'editable') {
      return editableCode.push(key);
    }
  });

  return editableCode;
};

_getStartStepRequiredFields = function (fields, steps) {
  var editableCode, requiredFields;
  requiredFields = _getRequiredFields(fields);
  editableCode = _getStartStepEditableFields(fields, steps);
  return _.intersection(requiredFields, editableCode);
};

_getTemplateData = function (user, space, instance, options) {
  var flow, form, form_version, locale, steedosData;

  if (Meteor.isServer) {
    form_version = InstanceReadOnlyTemplate.getInstanceFormVersion(instance);
  } else {
    form_version = WorkflowManager.getInstanceFormVersion(instance);
  }

  locale = _getLocale(user);
  steedosData = {};

  if (Meteor.isClient) {
    steedosData = _.clone(WorkflowManager_format.getAutoformSchemaValues());
    steedosData.insname = instance.name;
    steedosData.ins_state = instance.state;
    steedosData.ins_final_decision = instance.ins_final_decision;
    steedosData.ins_code = instance.code;
    steedosData.ins_is_archived = instance.is_archived;
    steedosData.ins_is_deleted = instance.ins_is_deleted;
    steedosData.applicant_name = instance.applicant_name;
    steedosData.applicantContext = instance.applicant_name;
  }

  steedosData.instance = instance;
  steedosData.form_version = form_version;
  steedosData.locale = locale;
  steedosData.utcOffset = user.utcOffset;
  steedosData.space = instance.space;
  steedosData.sessionUserId = user._id;

  if (Meteor.isServer) {
    if (options != null ? options.editable : void 0) {
      form = db.forms.findOne({
        _id: instance.form
      });
      flow = db.flows.findOne({
        _id: instance.flow
      });
      steedosData.startStepEditableFields = _getStartStepEditableFields(form.current.fields, flow.current.steps);
    }
  }

  return steedosData;
};

InstanceReadOnlyTemplate.formatDate = function (date, utcOffset) {
  var passing;

  if (Meteor.isServer) {
    passing = false;
  } else {
    passing = true;
  }

  if (!utcOffset && utcOffset !== 0) {
    utcOffset = 8;
  }

  return moment(date).utcOffset(utcOffset, passing).format("YYYY-MM-DD HH:mm");
};

InstanceReadOnlyTemplate.getInstanceView = function (user, space, instance, options) {
  var body, instanceCompiled, instanceRenderFunction, instanceTemplate, steedosData;
  steedosData = _getTemplateData(user, space, instance, options);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  instanceTemplate = TemplateManager.getTemplate(instance, options != null ? options.templateName : void 0);
  instanceTemplate = instanceTemplate.replace(/afSelectUser/g, "afSelectUserRead");

  if (!(options != null ? options.editable : void 0)) {
    instanceTemplate = instanceTemplate.replace(/afFormGroup/g, "afFormGroupRead");
  }

  instanceCompiled = SpacebarsCompiler.compile(instanceTemplate, {
    isBody: true
  });
  instanceRenderFunction = eval(instanceCompiled);
  Template.instance_readonly_view = new Blaze.Template("instance_readonly_view", instanceRenderFunction);
  Template.instance_readonly_view.steedosData = steedosData;
  Template.instance_readonly_view.helpers(InstanceformTemplate.helpers);
  InstanceReadOnlyTemplate.init(steedosData);
  body = Blaze.toHTMLWithData(Template.instance_readonly_view, steedosData);
  return "<div id='instanceform' >\n	" + body + "\n</div>";
};

InstanceReadOnlyTemplate.getTracesView = function (user, space, instance, options) {
  var body, form, steedosData, traceCompiled, traceRenderFunction, tracesHtml;
  steedosData = _getTemplateData(user, space, instance);
  form = db.forms.findOne(instance.form);

  if (form.instance_style === "table" || (options != null ? options.templateName : void 0) === "table") {
    tracesHtml = _getViewHtml('client/views/instance/traces_table.html');
  } else {
    tracesHtml = _getViewHtml('client/views/instance/traces.html');
  }

  traceCompiled = SpacebarsCompiler.compile(tracesHtml, {
    isBody: true
  });
  traceRenderFunction = eval(traceCompiled);
  Template.trace_readonly_view = new Blaze.Template("trace_readonly_view", traceRenderFunction);
  Template.trace_readonly_view.steedosData = steedosData;
  Template.trace_readonly_view.helpers(TracesTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.trace_readonly_view, instance.traces);
  return body;
};

InstanceReadOnlyTemplate.getAttachmentView = function (user, space, instance) {
  var attachmentCompiled, attachmentHtml, attachmentRenderFunction, body, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  attachmentHtml = _getViewHtml('client/views/instance/instance_attachments.html');
  attachmentCompiled = SpacebarsCompiler.compile(attachmentHtml, {
    isBody: true
  });
  attachmentRenderFunction = eval(attachmentCompiled);
  Template.attachments_readonly_view = new Blaze.Template("attachments_readonly_view", attachmentRenderFunction);
  Template.attachments_readonly_view.steedosData = steedosData;
  Template.attachments_readonly_view.helpers(InstanceAttachmentTemplate.helpers);
  body = Blaze.toHTMLWithData(Template.attachments_readonly_view);
  return body;
};

InstanceReadOnlyTemplate.getRelatedInstancesView = function (user, space, instance, options) {
  var body, relatedInstancesCompiled, relatedInstancesHtml, relatedInstancesRenderFunction, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  relatedInstancesHtml = _getViewHtml('client/views/instance/related_instances.html');
  relatedInstancesCompiled = SpacebarsCompiler.compile(relatedInstancesHtml, {
    isBody: true
  });
  relatedInstancesRenderFunction = eval(relatedInstancesCompiled);
  Template.related_instances_view = new Blaze.Template("related_instances_view", relatedInstancesRenderFunction);
  Template.related_instances_view.steedosData = steedosData;
  Template.related_instances_view.helpers(RelatedInstances.helpers);
  body = Blaze.toHTMLWithData(Template.related_instances_view, steedosData);
  return body;
};

InstanceReadOnlyTemplate.getRelatedRecordsView = function (user, space, instance, options) {
  var body, relatedRecordsCompiled, relatedRecordsHtml, relatedRecordsRenderFunction, steedosData;
  steedosData = _getTemplateData(user, space, instance);
  steedosData.absolute = false;

  if (options != null ? options.absolute : void 0) {
    steedosData.absolute = true;
  }

  relatedRecordsHtml = _getViewHtml('client/views/instance/related_records.html');
  relatedRecordsCompiled = SpacebarsCompiler.compile(relatedRecordsHtml, {
    isBody: true
  });
  relatedRecordsRenderFunction = eval(relatedRecordsCompiled);
  Template.related_records_view = new Blaze.Template("related_records_view", relatedRecordsRenderFunction);
  Template.related_records_view.steedosData = steedosData;
  Template.related_records_view.helpers(RelatedRecords.helpers);
  body = Blaze.toHTMLWithData(Template.related_records_view, steedosData);
  return body;
};

InstanceReadOnlyTemplate.getOnLoadScript = function (instance) {
  var form_script, form_version;
  form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
  form_script = form_version.form_script;

  if (form_script && form_script.replace(/\n/g, "").replace(/\s/g, "").length > 0) {
    form_script = "CoreForm = {};CoreForm.instanceform = {};" + form_script;
    return form_script += ";if(CoreForm.form_OnLoad){window.onload = CoreForm.form_OnLoad();}";
  } else {
    return form_script = "";
  }
};

InstanceReadOnlyTemplate.getInstanceHtml = function (user, space, instance, options) {
  var allCssLink, attachment, body, creatorService, cssHref, form, formDescription, formDescriptionHtml, html, ins_record_ids, instanceBoxStyle, instance_style, locale, onLoadScript, openFileScript, ref, ref1, related_instances, related_records, showTracesBtn, showTracesScript, trace, traceCheck, width;
  body = InstanceReadOnlyTemplate.getInstanceView(user, space, instance, options);
  onLoadScript = InstanceReadOnlyTemplate.getOnLoadScript(instance);
  creatorService = (ref = Meteor.settings["public"].webservices) != null ? (ref1 = ref.creator) != null ? ref1.url : void 0 : void 0;
  ins_record_ids = instance.record_ids;
  locale = _getLocale(user);
  openFileScript = "if(window.isNode && isNode()){\n	attachs = document.getElementsByClassName(\"ins_attach_href\");\n	for(var i = 0; i < attachs.length; i++){\n		attach = attachs[i];\n		attach.addEventListener(\"click\", function(e){\n			if(isImage(this.dataset.type) || isHtml(this.dataset.type)){\n				e.preventDefault();\n				openWindow(\"/api/files/instances/\" + this.dataset.id);\n			}else if(nw_core.canOpenFile(this.dataset.name)){\n				e.preventDefault();\n				nw_core.openFile(this.href, this.dataset.name)\n			}\n		});\n	}\n}\n\nvar flow = \"" + instance.flow + "\";\nvar space = \"" + instance.space + "\";\n\nfunction getCookie(name){\n	let pattern = RegExp(name + \"=.[^;]*\")\n	let matched = document.cookie.match(pattern)\n	if(matched){\n		let cookie = matched[0].split('=')\n		return cookie[1]\n	}\n	return ''\n}\n\nvar records = document.getElementsByClassName(\"ins-related-records\");\nfor(var i = 0; i < records.length; i++){\n		var record = records[i];\n		record.addEventListener(\"click\", function(e){\n			var creatorService = \"" + creatorService + "\"\n			var ins_record_ids = " + JSON.stringify(ins_record_ids) + "\n			if(creatorService && ins_record_ids && ins_record_ids.length > 0){\n				var objcetName = ins_record_ids[0].o\n				var id = ins_record_ids[0].ids[0]\n				var uobj = {};\n				uobj[\"X-User-Id\"] = getCookie(\"X-User-Id\");\n				uobj[\"X-Auth-Token\"] = getCookie(\"X-Auth-Token\");\n				redirectUrl = creatorService + \"app/-/\" + objcetName + \"/view/\" + id + \"?\" + $.param(uobj);\n				openWindow(redirectUrl);\n			}\n		});\n	}\n";

  if (!Steedos.isMobile()) {
    form = db.forms.findOne(instance.form);

    if ((form != null ? form.instance_style : void 0) === 'table') {
      instance_style = "instance-table";
    }
  }

  if ((options != null ? options.templateName : void 0) === 'table') {
    instance_style = "instance-table";
  }

  if (options != null ? options.instance_style : void 0) {
    instance_style = options.instance_style;
  }

  if (!options || options.showTrace === true) {
    trace = InstanceReadOnlyTemplate.getTracesView(user, space, instance);
  } else {
    trace = "";
  }

  instanceBoxStyle = "";

  if (instance && instance.final_decision) {
    if (instance.final_decision === "approved") {
      instanceBoxStyle = "box-success";
    } else if (instance.final_decision === "rejected") {
      instanceBoxStyle = "box-danger";
    }
  }

  if (!options || options.showAttachments === true) {
    attachment = InstanceReadOnlyTemplate.getAttachmentView(user, space, instance);
    related_instances = InstanceReadOnlyTemplate.getRelatedInstancesView(user, space, instance, options);
    related_records = InstanceReadOnlyTemplate.getRelatedRecordsView(user, space, instance, options);
  } else {
    attachment = "";
    related_instances = "";
    related_records = "";
  }

  width = "960px";

  if (options != null ? options.width : void 0) {
    width = "";
  }

  cssHref = Meteor.absoluteUrl("steedos-css");
  allCssLink = "<link rel=\"stylesheet\" type=\"text/css\" class=\"__meteor-css__\" href=\"" + cssHref + "\">";
  traceCheck = "";

  if (!_.isEmpty(trace)) {
    traceCheck = "checked";
  }

  if ((options != null ? options.tagger : void 0) === 'email' || (options != null ? options.editable : void 0)) {
    showTracesBtn = "";
  } else {
    showTracesBtn = "<div class=\"navigation-bar btn-group no-print\" style=\"min-width: 600px; z-index: 999\">\n	<div class=\"print-tool\">\n		<label class=\"cbx-label\"><input type=\"checkbox\" class=\"cbx-print cbx-print-attachments\" id=\"cbx-print-attachments\" checked=\"checked\"><span>" + TAPi18n.__('instance_attachment', {}, locale) + "</span></label>\n		<label class=\"cbx-label\"><input type=\"checkbox\" class=\"cbx-print cbx-print-traces\" id=\"cbx-print-traces\" checked=\"" + traceCheck + "\"><span>" + TAPi18n.__('instance_approval_history', {}, locale) + "</span></label>\n	</div>\n</div>";
  }

  showTracesScript = "$( document ).ready(function(){\n	var b = document.getElementById('cbx-print-traces');\n	var t = document.getElementsByClassName('instance-traces')[0];\n	if (b && b.checked && t){\n		t.style = 'display: block;'\n	} else if(t){\n		t.style = 'display: none;'\n	}\n	if(b){\n		b.addEventListener('change', function(e){\n			if (e.target.checked){\n				t.style = 'display: block;'\n			} else {\n				t.style = 'display: none;'\n			}\n		});\n	}\n\n\n	var attachmentsCheckbox = document.getElementById('cbx-print-attachments');\n	var attachmentsView = document.getElementsByClassName('attachments-section')[0];\n	if (attachmentsCheckbox && attachmentsCheckbox.checked && attachmentsView){\n		attachmentsView.style = 'display: block;'\n	} else if(attachmentsView){\n		attachmentsView.style = 'display: none;'\n	}\n	if(attachmentsCheckbox){\n		attachmentsCheckbox.addEventListener('change', function(e){\n			if (e.target.checked){\n				attachmentsView.style = 'display: block;'\n			} else {\n				attachmentsView.style = 'display: none;'\n			}\n		});\n	}\n});\n";

  if (options != null ? options.styles : void 0) {
    allCssLink = "";
  }

  form = db.forms.findOne({
    _id: instance.form
  });
  formDescriptionHtml = "";

  if (form) {
    formDescription = form.description;

    if (formDescription) {
      formDescription = formDescription.replace(/\n/g, "<br/>");
      formDescriptionHtml = "<div class=\"box-header  with-border instance-header\">\n	<div>\n		" + formDescription + "\n	</div>\n</div>";
    }
  }

  html = "<!DOCTYPE html>\n<html>\n	<head>\n		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n		" + allCssLink + "\n		<script src=\"https://www.steedos.com/website/libs/jquery.min.js\" type=\"text/javascript\"></script>\n		<script src=\"/js/nw_core.js\" type=\"text/javascript\"></script>\n		" + (options.plugins || "") + "\n\n		<style>\n			.steedos{\n				width: " + width + ";\n				margin-left: auto;\n				margin-right: auto;\n			}\n\n			.instance-view .instance-name{\n				display: inline !important\n			}\n			.box-tools{\n				display: none;\n			}\n			.box.collapsed-box .box-body,.box.collapsed-box .box-footer {\n			  display: block;\n			}\n\n			body{\n				background: azure !important;\n			}\n\n			.instance-view .instance-traces{\n				padding-left: 15px;\n				padding-right: 15px;\n			}\n\n			" + ((options != null ? options.styles : void 0) || "") + "\n		</style>\n	</head>\n	<body>\n		<div class=\"steedos workflow instance-print\">\n			<div class=\"skin-green skin-admin-lte\">\n				<div class=\"wrapper\">\n					<div class=\"content-wrapper\">\n						" + showTracesBtn + "\n						<div class=\"instance-print\">\n							<div class=\"instance " + instance_style + "\">\n								<form name=\"instanceForm\">\n									<div class=\"instance-form box " + instanceBoxStyle + "\">\n										" + formDescriptionHtml + "\n										<div class=\"box-body\">\n											<div class=\"col-md-12\">\n												<div class='attachments-section'>\n													" + attachment + "\n													" + related_instances + "\n													" + related_records + "\n												</div>\n												" + body + "\n											</div>\n										</div>\n									</div>\n								</form>\n								" + trace + "\n							</div>\n\n						</div>\n					</div>\n				</div>\n			</div>\n		</div>\n	</body>\n	<script>" + openFileScript + ";" + onLoadScript + ";" + showTracesScript + "</script>\n</html>";
  return html;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/lib/template_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var formId;
TemplateManager = {};
formId = 'instanceform';

TemplateManager.instance_title = function () {
  var pageTitle, pageTitleTrClass, val;
  pageTitle = "{{instance.name}}";
  pageTitleTrClass = "instance-name";

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) {
    pageTitle = "{{> afFormGroup name=\"" + CoreForm.pageTitleFieldName + "\" label=false}}";
    pageTitleTrClass = "";
  }

  if (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitle : void 0) {
    pageTitle = "" + CoreForm.pageTitle;
    pageTitleTrClass = "";
  }

  val = {
    pageTitle: pageTitle,
    pageTitleTrClass: pageTitleTrClass
  };
  return val;
};

TemplateManager.handleTableTemplate = function (instance, _export) {
  var table_fields, template;
  template = "<div class='instance-template'>\n	<table class=\"table-page-title form-table no-border text-align-center\" style=\"width: 100%;display: inline-table;\">\n		<tr class=\"" + this.instance_title().pageTitleTrClass + "\">\n			<td class=\"instance-table-name-td page-title\">\n				" + this.instance_title().pageTitle + "\n			</td>\n		</tr>\n\n	</table>\n	<table class=\"table-page-body form-table\">\n			<tr style=\"height:0px\">\n				<th style='width: 16%'></th>\n				<th></th>\n				<th style='width: 16%'></th>\n				<th></th>\n			</tr>";
  table_fields = InstanceformTemplate.helpers.table_fields(instance);
  table_fields.forEach(function (table_field) {
    var field_permission, pureCode, required, title_permission;
    required = "";

    if (!(typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) || (typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) !== table_field.code) {
      if (table_field.is_required) {
        required = "is-required";
      }

      if (_export) {
        required = "";
      }

      pureCode = Steedos.removeSpecialCharacter(table_field.code);

      if (InstanceformTemplate.helpers.isOpinionField(table_field)) {
        template += table_field.tr_start;
        template += "<td class=\"td-title " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field opinion-field opinion-field-" + pureCode + " automatic\" colspan = \"" + table_field.td_colspan + "\">\n	{{> instanceSignText name=\"" + table_field.code + "\"}}\n</td>";
        return template += table_field.tr_end;
      } else {
        if (InstanceformTemplate.helpers.includes(table_field.type, 'section,table')) {
          template += table_field.tr_start;
          template += "<td class=\"td-childfield td-childfield-" + pureCode + "\" colspan = \"" + table_field.td_colspan + "\">\n   {{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        } else {
          template += table_field.tr_start;

          if (_export) {
            title_permission = "";
            field_permission = "";
          } else {
            title_permission = "title-" + table_field.permission;
            field_permission = "field-" + table_field.permission;
          }

          template += "<td class=\"td-title td-title-" + pureCode + " " + title_permission + " " + required + "\">\n	{{afFieldLabelText name=\"" + table_field.code + "\"}}\n</td>\n<td class=\"td-field td-field-" + pureCode + " " + field_permission + "\" colspan = \"" + table_field.td_colspan + "\">\n	{{> afFormGroup name=\"" + table_field.code + "\" label=false}}\n</td>";
          return template += table_field.tr_end;
        }
      }
    }
  });
  template += "	</table>\n\n	<table class=\"table-page-footer form-table no-border\">\n		<tr class=\"applicant-wrapper\">\n			<td class=\"nowrap\">\n				<div class='inline-left'>\n					<label class=\"control-label\">{{_t \"instance_initiator\"}}：</label>\n				</div>\n				<div class='instance-table-wrapper-td inline-left'>\n					{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n				</div>\n			</td>\n			<td class=\"nowrap\">\n				<div class='pull-left'>\n					<div class='inline-left'>\n						<label>{{_t \"instance_submit_date\"}}：</label>\n					</div>\n					<div class='inline-right'>\n						<div class=\"form-group\">\n							{{formatDate instance.submit_date '{\"format\":\"YYYY-MM-DD\"}'}}\n						</div>\n					</div>\n				</div>\n			</td>\n		</tr>\n	</table>\n</div>";
  return template;
};

TemplateManager._template = {
  "default": function (instance) {
    var template;
    template = "<div class=\"with-border col-md-12\">\n	<div class=\"instance-name\">\n		<h3 class=\"box-title\">" + TemplateManager.instance_title().pageTitle + "</h3>\n		<span class=\"help-block\"></span>\n	</div>\n	<span class=\"help-block\"></span>\n</div>\n{{#each steedos_form.fields}}\n	{{#if isOpinionField this}}\n		<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}} field-{{this.code}}\">\n			<div class=\"form-group automatic opinion-field-{{this.code}}\">\n				<label class=\"control-label\">{{afFieldLabelText name=this.code}}</label>\n\n				{{> instanceSignText name=this.code}}\n			</div>\n		</div>\n	{{else}}\n		{{#if includes this.type 'section,table'}}\n			<div class=\"col-md-12 field-{{this.code}}\">\n				{{> afFormGroup name=this.code label=false}}\n			</div>\n		{{else}}\n			<div class=\"{{#if this.is_wide}}col-md-12{{else}}col-md-6{{/if}} field-{{this.code}}\">\n			{{> afFormGroup name=this.code}}\n			</div>\n		{{/if}}\n	{{/if}}\n{{/each}}\n<div class=\"col-md-12\">\n	<div class=\"applicant-wrapper form-group form-horizontal\">\n	<div class=\"input-group\">\n		<div class=\"input-group-addon\">\n		  {{_t \"instance_initiator\"}}&nbsp;:\n		</div>\n		{{>Template.dynamic  template=\"afSelectUser\" data=applicantContext}}\n	  </div>\n	</div>\n</div>";
    return template;
  },
  table: function (instance) {
    return TemplateManager.handleTableTemplate(instance);
  }
};
TemplateManager._templateHelps = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control',
        style: 'padding:6px 12px;width:140px;display:inline'
      }
    };
    data.atts.disabled = true;
    return data;
  }
};
({
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = formId;
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  }
});

TemplateManager.getTemplate = function (instance, templateName) {
  var flow, form;
  flow = db.flows.findOne(instance.flow);
  form = db.forms.findOne(instance.form);

  if (templateName) {
    if (templateName === 'table') {
      return TemplateManager._template.table(instance);
    }

    return TemplateManager._template["default"](instance);
  }

  if (typeof Session !== "undefined" && Session !== null ? Session.get("instancePrint") : void 0) {
    if (flow != null ? flow.print_template : void 0) {
      return "<div class='instance-template'>" + flow.print_template + "</div>";
    } else {
      if (flow != null ? flow.instance_template : void 0) {
        return "<div class='instance-template'>" + flow.instance_template + "</div>";
      } else {
        return TemplateManager._template.table(instance);
      }
    }
  } else {
    if (Steedos.isMobile()) {
      return TemplateManager._template["default"](instance);
    }

    if (flow != null ? flow.instance_template : void 0) {
      return "<div class='instance-template'>" + flow.instance_template + "</div>";
    }

    if (form != null ? form.instance_style : void 0) {
      if (form.instance_style === 'table') {
        return TemplateManager._template.table(instance);
      }

      return TemplateManager._template["default"](instance);
    } else {
      return TemplateManager._template["default"](instance);
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"coreform":{"inputTypes":{"coreform-table":{"steedos-table.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/coreform/inputTypes/coreform-table/steedos-table.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
SteedosTable = {};
SteedosTable.formId = "instanceform";

SteedosTable.checkItem = function (field, item_index) {
  var fieldObj = SteedosTable.getField(field);
  var fieldVal = SteedosTable.getItemModalValue(field, item_index);
  var sf_name = '';
  var rev = true;
  fieldObj.sfields.forEach(function (sf) {
    if (sf.permission == 'editable') {
      sf_name = fieldObj.code + "." + sf.code;

      if (!InstanceManager.checkFormFieldValue($("[name='" + sf_name + "']")[0])) {
        rev = false;
      }
    }
  });
  return rev;
};

SteedosTable.setTableItemValue = function (field, item_index, item_value) {
  var tableValue = SteedosTable.getTableValue(field);
  tableValue[item_index] = item_value;
};

SteedosTable.getTableItemValue = function (field, item_index) {
  return SteedosTable.getTableValue(field)[item_index];
};

SteedosTable.removeTableItem = function (field, item_index) {
  var item_value = SteedosTable.getTableItemValue(field, item_index);
  item_value.removed = true;
};

SteedosTable.setTableValue = function (field, value) {
  $("table[name='" + field + "']").val({
    val: value
  });
};

SteedosTable.getTableValue = function (field) {
  return $("table[name='" + field + "']").val().val;
};

SteedosTable.getValidValue = function (field) {
  var value = SteedosTable.getTableValue(field);

  if (!value) {
    return;
  }

  var validValue = [];
  value.forEach(function (v) {
    if (!v.removed) {
      validValue.push(v);
    }
  });
  return validValue;
};

SteedosTable.handleData = function (field, values) {
  if (!values || !(values instanceof Array)) {
    return values;
  }

  var fieldObj = SteedosTable.getField(field);
  values.forEach(function (v) {
    fieldObj.sfields.forEach(function (f) {
      if (f.type == 'user' || f.type == 'group') {
        var value = v[f.code];

        if (f.is_multiselect) {
          if (value && value.length > 0 && typeof value[0] == 'object') {
            v[f.code] = v[f.code].getProperty("id");
          }
        } else {
          if (value && typeof value == 'object') {
            v[f.code] = v[f.code].id;
          }
        }
      } else if (f.type == 'dateTime') {
        var value = v[f.code];

        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
            v[f.code] = value;
          }
        }
      }
    });
  });
  return values;
};

SteedosTable.getField = function (field) {
  var instanceFields = WorkflowManager.getInstanceFields();
  if (!instanceFields) return;
  var fieldObj = instanceFields.findPropertyByPK("code", field);
  return fieldObj;
};

SteedosTable.getModalData = function (field, index) {
  var data = {};
  var fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return;
  }

  data.field = fieldObj;
  data.field.formula = Form_formula.getFormulaFieldVariable("Form_formula.field_values", fieldObj.sfields);
  data.value = {};
  data.value[field] = SteedosTable.getTableItemValue(field, index);
  data.index = index;
  return data;
};

SteedosTable.getItemModalValue = function (field, item_index) {
  if (!AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index)) {
    return {};
  }

  var item_value = AutoForm.getFormValues("steedos_table_modal_" + field + "_" + item_index).insertDoc[field];
  return item_value;
};

SteedosTable.addItem = function (field, index, _item_value) {
  var keys = SteedosTable.getKeys(field);

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  $("tbody[name='" + field + "Tbody']").append(SteedosTable.getTr(keys, item_value, index, field, true));
};

SteedosTable.updateItem = function (field, index, _item_value) {
  var item = $("tr[name='" + field + "_item_" + index + "']");

  var item_value = _item_value || SteedosTable.getItemModalValue(field, index);

  if (item && item.length > 0) {
    var keys = SteedosTable.getKeys(field);
    var tds = SteedosTable.getRemoveTd(field, index);
    var sfields = SteedosTable.getField(field).sfields;
    keys.forEach(function (key) {
      var sfield = sfields.findPropertyByPK("code", key);
      var value = item_value[key];
      tds = tds + SteedosTable.getTd(sfield, index, value);
    });
    item.empty();
    item.append(tds);
  } else {
    SteedosTable.addItem(field, index);
  }

  if (SteedosTable.getTableValue(field)) {
    SteedosTable.setTableItemValue(field, index, item_value); //SteedosTable.valueHash[field][index] = item_value;
  } else {
    //SteedosTable.valueHash[field] = [item_value];
    SteedosTable.setTableValue(field, [item_value]);
  } //执行主表公式计算


  InstanceManager.runFormula(field);
};

SteedosTable.removeItem = function (field, index) {
  $("tr[name='" + field + "_item_" + index + "']").hide();
  SteedosTable.removeTableItem(field, index);
  InstanceManager.runFormula(field);
};

SteedosTable.showModal = function (field, index, method) {
  var modalData = SteedosTable.getModalData(field, index);
  modalData.method = method;
  Modal.show("steedosTableModal", modalData);
};

SteedosTable.getKeys = function (field) {
  if (!AutoForm.getCurrentDataForForm(SteedosTable.formId)) {
    return [];
  }

  var ss = AutoForm.getFormSchema(SteedosTable.formId);
  var keys = [];

  if (ss.schema(field + ".$").type === Object) {
    keys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');
  }

  return keys;
};

SteedosTable.getThead = function (field, editable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);

  if (!fieldObj) {
    return '';
  }

  var thead = '',
      trs = '',
      label = '',
      width = 100;

  if (editable) {
    // trs = "<th class='removed'></th>"
    trs = "";
  }

  var sfields = fieldObj.sfields;

  if (!sfields) {
    return thead;
  }

  var sf_length = sfields.length;

  if (sf_length > 0) {
    var wide_fields = sfields.filterProperty("is_wide", true);
    width = 100 / (sf_length + wide_fields.length);
  }

  sfields.forEach(function (sf, index) {
    label = sf.name != null && sf.name.length > 0 ? sf.name : sf.code;
    trs = trs + "<td "; // nowrap='nowrap'

    trs = trs + " class='title " + sf.type + "'";

    if (index != sf_length - 1) {
      if (sf.is_wide) {
        trs = trs + "style='width:" + width * 2 + "%'";
      } else {
        trs = trs + "style='width:" + width + "%'";
      }
    }

    trs = trs + ">" + label + "</td>";
  });
  thead = '<tr>' + trs + '</tr>';
  return thead;
};

SteedosTable.getTbody = function (keys, field, values, editable) {
  var tbody = "";

  if (values instanceof Array) {
    values.forEach(function (value, index) {
      tbody = tbody + SteedosTable.getTr(keys, value, index, field, editable);
    });
  }

  return tbody;
};

SteedosTable.getTr = function (keys, item_value, index, field, editable) {
  var fieldObj = field;
  if (!_.isObject(field)) fieldObj = SteedosTable.getField(field);
  var tr = "<tr id='" + fieldObj.code + "_item_" + index + "' name='" + fieldObj.code + "_item_" + index + "' data-index='" + index + "'";

  if (editable) {
    tr = tr + "' class='item edit'";
  } else {
    if (Steedos.isMobile()) {
      tr = tr + " class='item item-readonly'";
    } else {
      tr = tr + " class='item '";
    }
  }

  if (item_value.removed) {
    tr = tr + " style='display:none' ";
  }

  tr = tr + "'>";
  var tds = "";

  if (editable) {
    tds = SteedosTable.getRemoveTd(fieldObj.code, index);
  }

  var sfields = fieldObj.sfields;
  keys.forEach(function (key) {
    var sfield = sfields.findPropertyByPK("code", key);
    var value = item_value[key];
    tds = tds + SteedosTable.getTd(sfield, index, value);
  });
  tr = tr + tds + "</tr>";
  return tr;
};

SteedosTable.getRemoveTd = function (field, index) {
  // return "<td class='steedosTable-item-remove removed' data-index='" + index + "'><i class='fa fa-times' aria-hidden='true'></td>";
  return "";
};

SteedosTable.getTd = function (field, index, value) {
  var td = "<td ";
  td = td + " class='steedosTable-item-field " + field.type + "' ";
  var td_value = "";

  if (Meteor.isClient) {
    td_value = SteedosTable.getTDValue(field, value);
  } else {
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    td_value = InstanceReadOnlyTemplate.getValue(value, field, locale, utcOffset);
  }

  td = td + " data-index='" + index + "'>" + td_value + "</td>";
  return td;
};

SteedosTable.getTDValue = function (field, value) {
  var td_value = "";

  if (!field) {
    return td_value;
  }

  try {
    switch (field.type) {
      case 'user':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaSpaceUsers(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var u = CFDataManager.getFormulaSpaceUsers(value);
              td_value = u ? u.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'group':
        if (value) {
          if (field.is_multiselect) {
            if (value.length > 0) {
              if ("string" == typeof value[0]) {
                td_value = CFDataManager.getFormulaOrganizations(value).getProperty("name").toString();
              } else {
                td_value = value.getProperty("name").toString();
              }
            }
          } else {
            if ("string" == typeof value) {
              var o = CFDataManager.getFormulaOrganization(value);
              td_value = o ? o.name : '';
            } else {
              td_value = value.name;
            }
          }
        }

        break;

      case 'checkbox':
        if (value === true || value == 'true') {
          td_value = TAPi18n.__("form_field_checkbox_yes");
        } else {
          td_value = TAPi18n.__("form_field_checkbox_no");
        }

        break;

      case 'email':
        td_value = value ? "<a href='mailto:" + value + "'>" + value + "</a>" : "";
        break;

      case 'url':
        if (value) {
          if (value.indexOf("http") == 0) {
            try {
              td_value = "<a href='" + encodeURI(value) + "' target='_blank'>" + value + "</a>";
            } catch (e) {
              td_value = "<a href='' target='_blank'>" + value + "</a>";
            }
          } else {
            td_value = "<a href='http://" + encodeURI(value) + "' target='_blank'>http://" + value + "</a>";
          }
        } else {
          td_value = "";
        }

        break;

      case 'password':
        td_value = '******';
        break;

      case 'date':
        if (value) {
          if (value.length == 10) {
            var t = value.split("-");
            year = t[0];
            month = t[1];
            date = t[2];
            value = new Date(year, month - 1, date);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd');
        }

        break;

      case 'dateTime':
        if (value) {
          if (value.length == 16) {
            var t = value.split("T");
            var t0 = t[0].split("-");
            var t1 = t[1].split(":");
            year = t0[0];
            month = t0[1];
            date = t0[2];
            hours = t1[0];
            seconds = t1[1];
            value = new Date(year, month - 1, date, hours, seconds);
          } else {
            value = new Date(value);
          }

          td_value = $.format.date(value, 'yyyy-MM-dd HH:mm');
        }

        break;

      case 'number':
        if (value || value == 0) {
          td_value = Steedos.numberToString(value, field.digits);
        }

        break;

      case 'odata':
        if (value) {
          if (field.is_multiselect) {
            td_value = _.pluck(value, '@label').toString();
          } else {
            td_value = value['@label'];
          }
        }

        break;

      default:
        td_value = value ? value : '';
        break;
    }
  } catch (e) {
    e;
    return '';
  }

  return td_value;
};

if (Meteor.isClient) {
  AutoForm.addInputType("table", {
    template: "afTable",
    valueOut: function () {
      var name = this.data("schemaKey");
      return SteedosTable.getValidValue(name);
    },
    valueConverters: {
      "stringArray": AutoForm.valueConverters.stringToStringArray,
      "number": AutoForm.valueConverters.stringToNumber,
      "numerArray": AutoForm.valueConverters.stringToNumberArray,
      "boolean": AutoForm.valueConverters.stringToBoolean,
      "booleanArray": AutoForm.valueConverters.stringToBooleanArray,
      "date": AutoForm.valueConverters.stringToDate,
      "dateArray": AutoForm.valueConverters.stringToDateArray
    },
    contextAdjust: function (context) {
      if (typeof context.atts.maxlength === 'undefined' && typeof context.max === 'number') {
        context.atts.maxlength = context.max;
      }

      return context;
    }
  });
  Template.afTable.events({
    'tap .steedos-table .steedosTable-item-add,.add-item-tr': function (event, template) {
      var name = template.data.name;
      var tableValue = SteedosTable.getTableValue(name);
      var new_item_index = tableValue ? tableValue.length : 0;
      SteedosTable.showModal(name, new_item_index, "add");
    },
    'tap .steedos-table .steedosTable-item-field': function (event, template) {
      if (template.data.atts.editable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "edit");
      }
    },
    'tap .steedos-table .steedosTable-item-remove': function (event, template) {
      var field = template.data.name;
      var item_index = event.currentTarget.dataset.index;
      Session.set("instance_change", true);
      SteedosTable.removeItem(field, item_index);
    },
    'tap .steedos-table .item-readonly': function (event, template) {
      if (!template.data.atts.editable) {
        var field = template.data.name;
        var index = event.currentTarget.dataset.index;
        SteedosTable.showModal(field, index, "read");
      }
    }
  });

  Template.afTable.rendered = function () {
    var field = this.data.name;
    var keys = SteedosTable.getKeys(field);
    var validValue = SteedosTable.handleData(field, this.data.value);
    SteedosTable.setTableValue(field, validValue);
    $("thead[name='" + field + "Thead']").html(SteedosTable.getThead(field, this.data.atts.editable));
    $("tbody[name='" + field + "Tbody']").html(SteedosTable.getTbody(keys, field, SteedosTable.getTableValue(field), this.data.atts.editable));
    str = t("steedos_table_add_item");
    addItemTr = "<tr class='add-item-tr'><td colspan='" + keys.length + "'><i class='ion ion-plus-round'></i>" + str + "</td></tr>";

    if (this.data.atts.editable) {
      $("tfoot[name='" + field + "Tfoot']").append(addItemTr);
    }
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"views":{"instance":{"_image_sign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_image_sign.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
ImageSign.helpers = {
  spaceUserSign: function (userId) {
    var space, spaceUserSign;
    space = "";

    if (Meteor.isServer) {
      space = Template.instance().view.template.steedosData.space;
    } else {
      space = Session.get("spaceId");
    }

    spaceUserSign = db.space_user_signs.findOne({
      space: space,
      user: userId
    });
    return spaceUserSign;
  },
  imageURL: function (userId) {
    var absolute, spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(userId);
    absolute = false;

    if (Meteor.isServer) {
      absolute = Template.instance().view.template.steedosData.absolute;
    }

    if (spaceUserSign != null ? spaceUserSign.sign : void 0) {
      if (absolute) {
        return Meteor.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      } else {
        return Steedos.absoluteUrl("api/files/avatars/" + spaceUserSign.sign);
      }
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_traces_handler.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_traces_handler.coffee                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
TracesHandler.helpers = {
  showSignImage: function (handler, is_finished, judge) {
    var spaceUserSign;

    if (!is_finished) {
      return false;
    }

    if (['returned', 'terminated', 'retrieved'].includes(judge)) {
      return false;
    }

    spaceUserSign = ImageSign.helpers.spaceUserSign(handler);

    if (spaceUserSign != null ? spaceUserSign.sign : void 0) {
      return true;
    } else {
      return false;
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_form.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_form.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceformTemplate.helpers = {
  applicantContext: function () {
    var data, steedos_instance;
    steedos_instance = WorkflowManager.getInstance();
    data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: steedos_instance.applicant_name
    };

    if (!steedos_instance || steedos_instance.state !== "draft") {
      data.atts.disabled = true;
    }

    return data;
  },
  instanceId: function () {
    return 'instanceform';
  },
  form_types: function () {
    if (ApproveManager.isReadOnly()) {
      return 'disabled';
    } else {
      return 'method';
    }
  },
  steedos_form: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return form_version;
    }
  },
  innersubformContext: function (obj) {
    var doc_values;
    doc_values = WorkflowManager_format.getAutoformSchemaValues();
    obj["tableValues"] = doc_values ? doc_values[obj.code] : [];
    obj["formId"] = "instanceform";
    return obj;
  },
  instance: function () {
    var steedos_instance;
    Session.get("change_date");

    if (Session.get("instanceId")) {
      steedos_instance = WorkflowManager.getInstance();
      return steedos_instance;
    }
  },
  empty: function (val) {
    if (val) {
      return false;
    } else {
      return true;
    }
  },
  unempty: function (val) {
    if (val) {
      return true;
    } else {
      return false;
    }
  },
  equals: function (a, b) {
    return a === b;
  },
  unequals: function (a, b) {
    return !(a === b);
  },
  includes: function (a, b) {
    return b.split(',').includes(a);
  },
  include: function (a, b) {
    return b.split(',').includes(a);
  },
  fields: function () {
    var form_version;
    form_version = WorkflowManager.getInstanceFormVersion();

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  },
  formatDate: function (date, options) {
    if (!date) {
      return "";
    }

    if (options && typeof options === 'string') {
      options = JSON.parse(options);
    }

    if (!options.format) {
      options = {
        format: "YYYY-MM-DD HH:mm"
      };
    }

    return moment(date).format(options.format);
  },
  traces: function () {
    var flow, instance, locale, ref, ref1, ref2, ref3, steedosData, steps, traces;

    if (Meteor.isServer) {
      steedosData = (ref = Template.instance()) != null ? (ref1 = ref.view) != null ? (ref2 = ref1.template) != null ? ref2.steedosData : void 0 : void 0 : void 0;
      instance = steedosData != null ? steedosData.instance : void 0;
      flow = InstanceReadOnlyTemplate.getFlowVersion(instance);
      locale = steedosData != null ? steedosData.locale : void 0;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      instance = WorkflowManager.getInstance();
      flow = WorkflowManager.getInstanceFlowVersion();
      locale = Session.get("TAPi18n::loaded_lang");
    }

    if (!instance || !flow) {
      return {};
    }

    steps = flow.steps;
    traces = {};

    if ((ref3 = instance.traces) != null) {
      ref3.forEach(function (trace) {
        var approves, ref4, step;
        step = steps.findPropertyByPK("_id", trace.step);
        approves = [];

        if ((ref4 = trace.approves) != null) {
          ref4.forEach(function (approve) {
            var judge_name;

            if (trace.is_finished === true) {
              if (approve.judge === 'approved') {
                judge_name = TAPi18n.__("Instance State approved", {}, locale);
              } else if (approve.judge === 'rejected') {
                judge_name = TAPi18n.__("Instance State rejected", {}, locale);
              } else if (approve.judge === 'terminated') {
                judge_name = TAPi18n.__("Instance State terminated", {}, locale);
              } else if (approve.judge === 'reassigned') {
                judge_name = TAPi18n.__("Instance State reassigned", {}, locale);
              } else if (approve.judge === 'relocated') {
                judge_name = TAPi18n.__("Instance State relocated", {}, locale);
              } else if (approve.judge === '') {
                judge_name = "";
              } else {
                judge_name = "";
              }
            } else {
              judge_name = TAPi18n.__("Instance State pending", {}, locale);
            }

            return approves.push({
              _id: approve._id,
              handler: approve.user,
              handler_name: approve.handler_name,
              handler_organization_name: approve.handler_organization_name,
              handler_organization_fullname: approve.handler_organization_fullname,
              finish_date: approve.finish_date,
              judge: approve.judge,
              judge_name: judge_name,
              description: approve.description,
              is_finished: approve.is_finished,
              type: approve.type,
              opinion_fields_code: approve.opinion_fields_code,
              sign_field_code: approve.sign_field_code,
              is_read: approve.is_read,
              sign_show: approve.sign_show
            });
          });
        }

        if (step) {
          if (step.name in traces) {
            return traces[step.name] = traces[step.name].concat(approves);
          } else {
            return traces[step.name] = approves;
          }
        }
      });
    }

    return traces;
  },
  doc_values: function () {
    return WorkflowManager_format.getAutoformSchemaValues();
  },
  instance_box_style: function () {
    var box, ins, judge;
    box = Session.get("box");

    if (box === "inbox" || box === "draft") {
      judge = Session.get("judge");

      if (judge) {
        if (judge === "approved") {
          return "box-success";
        } else if (judge === "rejected") {
          return "box-danger";
        }
      }
    }

    ins = WorkflowManager.getInstance();

    if (ins && ins.final_decision) {
      if (ins.final_decision === "approved") {
        return "box-success";
      } else if (ins.final_decision === "rejected") {
        return "box-danger";
      }
    }
  },
  table_fields: function (instance) {
    var fields, form_version;

    if (Meteor.isClient) {
      form_version = WorkflowManager.getInstanceFormVersion();
    } else {
      form_version = WorkflowManager.getFormVersion(instance.form, instance.form_version);
    }

    if (form_version) {
      fields = _.clone(form_version.fields);
      fields.forEach(function (field, index) {
        var after_field, before_field, pre_fields, pre_wide_fields, td_colspan, tr_end, tr_start;
        field.tr_start = "";
        field.tr_end = "";
        td_colspan = 1;

        if ((typeof CoreForm !== "undefined" && CoreForm !== null ? CoreForm.pageTitleFieldName : void 0) === field.code) {
          field.is_wide = true;
        }

        if (field.formula && field.type !== 'odata') {
          field.permission = "readonly";
        }

        if (Steedos.isMobile()) {
          if (field.type === 'section' || field.type === 'table') {
            field.td_colspan = 4;
          } else {
            field.td_colspan = 3;
          }

          if (index !== 0) {
            field.tr_start = "<tr>";
            return field.tr_end = "</tr>";
          }
        } else {
          pre_fields = fields.slice(0, index);
          pre_wide_fields = pre_fields.filterProperty("is_wide", true);
          tr_start = "";
          tr_end = "";
          before_field = null;
          after_field = null;

          if (index > 0) {
            before_field = fields[index - 1];
          }

          if (index < fields.length - 1) {
            after_field = fields[index + 1];
          }

          if (field.type === 'section' || field.type === 'table') {
            td_colspan = 4;
          } else if (field.is_wide) {
            td_colspan = 3;
          } else {
            if (before_field && after_field && before_field.is_wide && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field && after_field.is_wide) {
              field.is_wide = true;
              td_colspan = 3;
            }

            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 && after_field === null) {
              field.is_wide = true;
              td_colspan = 3;
            }
          }

          field.td_colspan = td_colspan;

          if (index === 0) {
            tr_start = "<tr>";
          } else {
            if ((pre_fields.length + pre_wide_fields.length) % 2 === 0 || field.is_wide) {
              if (field.type === 'table') {
                tr_start = "<tr class = \"tr-child-table\">";
              } else {
                tr_start = "<tr>";
              }
            }
          }

          field.tr_start = tr_start;

          if (index + 1 === fields.length || field.type === 'section' || field.type === 'table' || field.is_wide) {
            tr_end = "</tr>";
          }

          if ((pre_fields.length + pre_wide_fields.length) % 2 !== 0) {
            tr_end = "</tr>";
          }

          return field.tr_end = tr_end;
        }
      });
      return fields;
    }
  },
  sort_approve: function (approves, order) {
    if (!approves) {
      return [];
    }

    if (!approves instanceof Array) {
      return [];
    } else {
      if (order === 'desc') {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p2 - _p1;
        });
      } else {
        approves.sort(function (p1, p2) {
          var _p1, _p2;

          _p1 = 0;
          _p2 = 0;

          if (p1.finish_date) {
            _p1 = p1.finish_date.getTime();
          }

          if (p2.finish_date) {
            _p2 = p2.finish_date.getTime();
          }

          return _p1 - _p2;
        });
      }
    }

    return approves;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  getField: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;

    if (form_version) {
      return form_version.fields.findPropertyByPK("code", code);
    }
  },
  getValue: function (code) {
    var form_version, instance, locale, utcOffset, values;
    instance = Template.instance().view.template.steedosData.instance;
    form_version = Template.instance().view.template.steedosData.form_version;
    locale = Template.instance().view.template.steedosData.locale;
    utcOffset = Template.instance().view.template.steedosData.utcOffset;
    values = instance.values || {};

    if (Meteor.isClient) {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    return InstanceReadOnlyTemplate.getValue(values[code], form_version.fields.findPropertyByPK("code", code), locale, utcOffset);
  },
  getLabel: function (code) {
    var form_version;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, code);
  },
  getCfClass: function (field) {
    if ((field != null ? field.type : void 0) === "input" && (field != null ? field.is_textarea : void 0)) {
      return "cfTextarea";
    }
  },
  getTableThead: function (field) {
    return SteedosTable.getThead(field, false);
  },
  getTableBody: function (field) {
    var instance, tableValue, values;

    if (Meteor.isServer) {
      instance = Template.instance().view.template.steedosData.instance;
      values = instance.values || {};
    } else {
      values = WorkflowManager_format.getAutoformSchemaValues();
    }

    tableValue = values[field.code];
    return SteedosTable.getTbody(field.sfields.getProperty("code"), field, tableValue, false);
  },
  showLabel: function (field) {
    var templateData;
    templateData = Template.instance().data;

    if (templateData.label === false) {
      return false;
    }

    return true;
  },
  isOpinionField: function (field) {
    return InstanceformTemplate.helpers.isOpinionField_from_string(field.formula);
  },
  isOpinionField_from_string: function (field_formula) {
    return InstanceSignText.isOpinionField_from_string(field_formula);
  },
  includesOpinionField: function (form, form_version) {
    var field_formulas, fields, ref;
    field_formulas = new Array();
    fields = ((ref = db.form_versions.findOne({
      _id: form_version,
      form: form
    })) != null ? ref.fields : void 0) || [];
    fields.forEach(function (f) {
      var ref1;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref1 = f.fields) != null ? ref1.forEach(function (f1) {
          return field_formulas.push(f1.formula);
        }) : void 0 : void 0;
      } else {
        return field_formulas.push(f.formula);
      }
    });
    return _.some(field_formulas, function (field_formula) {
      return InstanceformTemplate.helpers.isOpinionField_from_string(field_formula);
    });
  },
  getOpinionFieldStepsName: function (field_formula, top_keywords) {
    var foo1, opinionFields;
    opinionFields = new Array();

    if (InstanceformTemplate.helpers.isOpinionField_from_string(field_formula)) {
      if (field_formula) {
        foo1 = field_formula.split(";");
        foo1.forEach(function (foo) {
          var json_formula, ref, ref1, s1, sf;
          json_formula = {};

          try {
            json_formula = eval("(" + foo + ")");
          } catch (error1) {
            json_formula = {};
          }

          if (json_formula != null ? json_formula.yijianlan : void 0) {
            sf = {};
            sf.stepName = json_formula.yijianlan.step;
            sf.image_sign = json_formula.yijianlan.image_sign || false;
            sf.only_cc_opinion = json_formula.yijianlan.only_cc || false;
            sf.default_description = json_formula.yijianlan["default"];
            sf.only_handler = json_formula.yijianlan.only_handler;
            sf.top_keywords = json_formula.yijianlan.top_keywords || top_keywords;
            return opinionFields.push(sf);
          } else if ((field_formula != null ? field_formula.indexOf("{traces.") : void 0) > -1 || (field_formula != null ? field_formula.indexOf("{signature.traces.") : void 0) > -1) {
            sf = {
              only_cc_opinion: false,
              image_sign: false,
              top_keywords: top_keywords
            };

            if (foo.indexOf("{signature.") > -1) {
              sf.image_sign = true;
              foo = foo.replace("{signature.", "");
            }

            s1 = foo.replace("{", "").replace("}", "");

            if (s1.split(".").length > 1) {
              sf.stepName = s1.split(".")[1];

              if (opinionFields.filterProperty("stepName", sf.stepName).length > 0) {
                if ((ref = opinionFields.findPropertyByPK("stepName", sf.stepName)) != null) {
                  ref.only_cc_opinion = true;
                }
              } else {
                if (s1.split(".").length > 2) {
                  if (((ref1 = s1.split(".")[2]) != null ? ref1.toLocaleLowerCase() : void 0) === 'cc') {
                    sf.only_cc_opinion = true;
                  }
                }
              }
            }

            return opinionFields.push(sf);
          }
        });
      }
    }

    return opinionFields;
  },
  showCCOpinion: function (field) {
    var ref, ref1, ref2, s1;

    if (((ref = field.formula) != null ? ref.indexOf("{traces.") : void 0) > -1 || ((ref1 = field.formula) != null ? ref1.indexOf("{signature.traces.") : void 0) > -1) {
      s1 = field.formula.replace("{signature.", "").replace("{", "").replace("}", "");

      if (s1.split(".").length > 2) {
        if (((ref2 = s1.split(".")[2]) != null ? ref2.toLocaleLowerCase() : void 0) === 'cc') {
          return true;
        }
      }
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  f_label: function (that) {
    return that.name || that.code;
  }
};

if (Meteor.isServer) {
  InstanceformTemplate.helpers.steedos_form = function () {
    return this.form_version;
  };

  InstanceformTemplate.helpers.isSection = function (code) {
    var form_version;
    form_version = this.form_version;
    return form_version.fields.findPropertyByPK("code", code).type === 'section';
  };

  InstanceformTemplate.helpers.doc_values = function () {
    var instance;
    instance = this.instance;
    return instance.values;
  };

  InstanceformTemplate.helpers.applicantContext = function () {
    var data, instance;
    instance = this.instance;
    return data = {
      name: 'ins_applicant',
      atts: {
        name: 'ins_applicant',
        id: 'ins_applicant',
        "class": 'selectUser form-control ins_applicant'
      },
      value: instance.applicant_name
    };
  };

  InstanceformTemplate.helpers.instance = function () {
    return this.instance;
  };

  InstanceformTemplate.helpers.fields = function () {
    var form_version;
    form_version = this.form_version;

    if (form_version) {
      return new SimpleSchema(WorkflowManager_format.getAutoformSchema(form_version));
    }
  };

  InstanceformTemplate.helpers.form_types = function () {
    return "disabled";
  };

  Template.registerHelper("afFieldLabelText", function (op) {
    var form_version, ref;
    form_version = Template.instance().view.template.steedosData.form_version;
    return InstanceReadOnlyTemplate.getLabel(form_version.fields, op != null ? (ref = op.hash) != null ? ref.name : void 0 : void 0);
  });

  InstanceformTemplate.helpers._t = function (key) {
    var locale;
    locale = this.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceformTemplate.helpers.ins_attach_download_url = function (_id, absolute) {
    if (absolute) {
      return Meteor.absoluteUrl("/api/files/instances/" + _id + "?download=true");
    } else {
      return "/api/files/instances/" + _id + "?download=true";
    }
  };

  InstanceformTemplate.helpers.options = function (field) {
    var options, ref, rev;
    options = field != null ? (ref = field.options) != null ? ref.split("\n") : void 0 : void 0;
    rev = [];

    if (options != null) {
      options.forEach(function (item) {
        return rev.push({
          label: item,
          value: item
        });
      });
    }

    return rev;
  };

  InstanceformTemplate.helpers.getPermissions = function (code) {
    var ref;

    if (!((ref = Template.instance().view.template.steedosData.startStepEditableFields) != null ? ref.includes(code) : void 0)) {
      return "readonly disabled";
    }

    return "";
  };
}

InstanceformTemplate.events = {
  'change .form-control,.checkbox input,.af-radio-group input,.af-checkbox-group input': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'typeahead:change .form-control': function (event) {
    return InstanceManager.instanceformChangeEvent(event);
  },
  'click .cfTextarea a': function (event) {
    event.preventDefault();
    return Steedos.openWindow(event.target.href);
  }
};

InstanceformTemplate.onCreated = function () {
  var compiled, e, instance, instanceCustomTemplate, instanceView, renderFunction, template;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  template = TemplateManager.getTemplate(instance);

  try {
    compiled = SpacebarsCompiler.compile(template, {
      isBody: true
    });
  } catch (error1) {
    e = error1;
    console.log("Instance Template Error", e);
    compiled = SpacebarsCompiler.compile("", {
      isBody: true
    });
  }

  renderFunction = eval(compiled);
  instanceView = new Blaze.View("custom_instance_template", renderFunction);
  instanceCustomTemplate = new Blaze.Template(instanceView.name, renderFunction);
  Template.instance_custom_template = instanceCustomTemplate;
  return Template.instance_custom_template.helpers(InstanceformTemplate.helpers);
};

InstanceformTemplate.onRendered = function () {
  var currentApprove, currentStep, form_version, formula_fields, instance, instanceNumberFields, judge, ref;
  instance = WorkflowManager.getInstance();

  if (!instance) {
    return;
  }

  if ((ref = $("input[name='ins_applicant']")[0]) != null) {
    ref.dataset.values = instance.applicant;
  }

  $("input[name='ins_applicant']").val(instance.applicant_name);
  ApproveManager.error = {
    nextSteps: '',
    nextStepUsers: ''
  };

  if (Session.get("box") === 'inbox' || Session.get("box") === 'draft') {
    InstanceEvent.initEvents(instance.flow);
  }

  if (!ApproveManager.isReadOnly()) {
    currentApprove = InstanceManager.getCurrentApprove();
    instanceNumberFields = $("[data-formula]", $("#instanceform"));
    instanceNumberFields.each(function () {
      var element, schemaKey;
      schemaKey = this.dataset.schemaKey;
      element = $(this);

      if (!$(this).val() && schemaKey && Session.get("instanceId")) {
        return Meteor.call('getInstanceValues', Session.get("instanceId"), function (error, result) {
          var key, ref1;

          if (error) {
            toastr.error(error.reason);
          }

          if (!result[schemaKey]) {
            key = (ref1 = element.data("formula")) != null ? ref1.replace("auto_number(", "").replace(")", "") : void 0;
            key = key.replace(/\"/g, "").replace(/\'/g, "");

            if (key.indexOf("{") > -1) {
              key = key.replace("{", "").replace("}", "");
              key = key.trim();
              key = AutoForm.getFieldValue(key, 'instanceform');
            }

            return InstanceNumberRules.instanceNumberBuilder(element, key);
          } else {
            return element != null ? element.val(result[schemaKey]).trigger("change") : void 0;
          }
        });
      }
    });
    judge = currentApprove.judge;
    currentStep = InstanceManager.getCurrentStep();
    form_version = WorkflowManager.getInstanceFormVersion();
    formula_fields = Form_formula.getFormulaFieldVariable("Form_formula.field_values", form_version.fields);
    Form_formula.run("", "", formula_fields, AutoForm.getFormValues("instanceform").insertDoc, form_version.fields);
    return Session.set("instance_form_values", {
      instanceId: instance._id,
      values: AutoForm.getFormValues("instanceform").insertDoc
    });
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_attachments.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_attachments.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
InstanceAttachmentTemplate.helpers = {
  showMainTitle: function () {
    return Template.instance().workflowMainAttachTitle.get();
  },
  enabled_add_main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    var current_step = InstanceManager.getCurrentStep();
    if (!current_step) return false; // 分发的正文或者附件不显示转为pdf按钮
    // 如果有正文权限则为正文，否则分发为附件
    // 分发的附件不允许修改 删除 新增版本

    var main_attach_count = cfs.instances.find({
      'metadata.instance': ins._id,
      'metadata.current': true,
      'metadata.main': true
    }).count();
    var distribute_main_attach_count = 0;

    if (ins.distribute_from_instance) {
      var start_step = InstanceManager.getStartStep();

      if (start_step.can_edit_main_attach) {
        var distribute_main_attach_count = cfs.instances.find({
          'metadata.instance': ins.distribute_from_instance,
          'metadata.current': true,
          'metadata.main': true
        }).count();
      }
    }

    if (current_step.can_edit_main_attach == true && main_attach_count < 1 && distribute_main_attach_count < 1) {
      return true;
    } // 正文最多只能有一个


    if (main_attach_count >= 1 || distribute_main_attach_count >= 1) {
      return false;
    } // 开始节点并且设置了可以上传正文才显示上传正文的按钮


    var current_step = InstanceManager.getCurrentStep();
    if (current_step && current_step.step_type == "start" && current_step.can_edit_main_attach == true) return true;
    return false;
  },
  enabled_edit_normal_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    if (Session && Session.get("instancePrint")) return false;
    var flow = WorkflowManager.getFlow(ins.flow);
    if (!flow) return false; // 分发后的 附件，不可以编辑/删除，也不让上传新的附件, 流程列表：添加属性 ‘被分发后是否允许上传附件’ #1837

    if (ins.distribute_from_instance && !flow.upload_after_being_distributed) return false;

    if (Session.get("box") != "draft" && Session.get("box") != "inbox") {
      return false;
    } // 已经结束的单子不能改附件


    if (ins.state == "completed") {
      return false;
    }

    if (InstanceManager.isCC(ins)) {
      var step = InstanceManager.getCCStep();
      if (step && (step.can_edit_normal_attach == true || step.can_edit_normal_attach == undefined)) return true;
    } else {
      var current_step = InstanceManager.getCurrentStep();
      if (current_step && (current_step.can_edit_normal_attach == true || current_step.can_edit_normal_attach == undefined)) return true;
    }

    return false;
  },
  main_attachment: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var start_step = InstanceManager.getStartStep(); // 如果是被分发的申请单并且有修改正文的权限，则优先显示原申请单文件

    var main_attach = null;

    if (ins.distribute_from_instance && start_step.can_edit_main_attach == true) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins.distribute_from_instance,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    if (!main_attach) {
      main_attach = cfs.instances.findOne({
        'metadata.instance': ins._id,
        'metadata.current': true,
        'metadata.main': true
      });
    }

    return main_attach;
  },
  normal_attachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    var selector = {
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      }
    };
    var atts = new Array();

    if (ins.distribute_from_instance) {
      // 如果是被分发的申请单，则显示原申请单文件, 如果选择了将原表单存储为附件也要显示, 同时也要显示新上传的附件
      var dfis = _.clone(ins.distribute_from_instances) || [];
      dfis.push(ins._id);
      selector['metadata.instance'] = {
        $in: dfis
      };
      selector["$or"] = [{
        "metadata.instance": ins._id
      }, {
        "metadata.instance": {
          $in: ins.distribute_from_instances
        },
        "metadata.is_private": {
          $ne: true
        }
      }]; // 如果原申请单有正文但是分发后没有正文权限，则原申请单正文显示在附件栏

      var start_step = InstanceManager.getStartStep();

      if (start_step && start_step.can_edit_main_attach != true) {
        var distribute_main = cfs.instances.findOne({
          'metadata.instance': {
            $in: ins.distribute_from_instances
          },
          'metadata.current': true,
          'metadata.main': true
        });

        if (distribute_main) {
          var firstVersionMain = cfs.instances.findOne(distribute_main.metadata.parent);
          distribute_main.attachmentUploadedAt = firstVersionMain ? firstVersionMain.uploadedAt : distribute_main.uploadedAt;
          atts.push(distribute_main);
        }
      }
    } else {
      selector['metadata.instance'] = ins._id;
    }

    cfs.instances.find(selector).forEach(function (c) {
      var firstVersion = cfs.instances.findOne(c.metadata.parent);
      c.attachmentUploadedAt = firstVersion ? firstVersion.uploadedAt : c.uploadedAt;
      atts.push(c);
    });
    return _.sortBy(atts, 'attachmentUploadedAt');
  },
  showAttachments: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false; // 如果是被分发的申请单，则显示原申请单文件 和分发后申请单文件

    var instanceIds = _.clone(ins.distribute_from_instances) || [];
    instanceIds.push(ins._id);
    var attachments_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).count();
    if (Session && Session.get("instancePrint") && attachments_count < 1) return false;
    if (Session.get("box") == "draft" || Session.get("box") == "inbox" || attachments_count > 0) return true;else return false;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  _: function (key) {
    var locale;

    if (Meteor.isClient) {
      return TAPi18n.__(key);
    } else {
      locale = Template.instance().view.template.steedosData.locale;
      return TAPi18n.__(key, {}, locale);
    }
  },
  flow_files: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    return cfs.files.find({
      'metadata.space': ins.space,
      'metadata.object_name': 'flows',
      'metadata.record_id': ins.flow
    });
  },
  isDraftAndFlowfilesExist: function () {
    var ins = WorkflowManager.getInstance();
    if (!ins) return false;
    return Session.get('box') == 'draft' && !!cfs.files.find({
      'metadata.space': ins.space,
      'metadata.object_name': 'flows',
      'metadata.record_id': ins.flow
    }).count();
  }
};

if (Meteor.isServer) {
  InstanceAttachmentTemplate.helpers._t = function (key) {
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  InstanceAttachmentTemplate.helpers.enabled_add_main_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.enabled_edit_normal_attachment = function () {
    return false;
  };

  InstanceAttachmentTemplate.helpers.main_attachment = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var attachment = cfs.instances.findOne({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    });
    return attachment;
  };

  InstanceAttachmentTemplate.helpers.normal_attachments = function () {
    var steedosData = Template.instance().view.template.steedosData;
    var instance = steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': {
        $ne: true
      },
      $or: [{
        'metadata.is_private': {
          $ne: true
        }
      }, {
        'metadata.is_private': true,
        "metadata.owner": steedosData.userId
      }]
    }).fetch();
    return attachments;
  };

  InstanceAttachmentTemplate.helpers.showAttachments = function () {
    var instance = Template.instance().view.template.steedosData.instance;
    var instanceIds = _.clone(instance.distribute_from_instances) || [];
    instanceIds.push(instance._id);
    var attachments = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true
    }).fetch();

    if (attachments && attachments.length > 0) {
      return true;
    }

    return false;
  };

  InstanceAttachmentTemplate.helpers.showMainTitle = function () {
    var instance = Template.instance().view.template.steedosData.instance;

    var instanceIds = _.compact([instance.distribute_from_instance, instance._id]);

    var main_attach_count = cfs.instances.find({
      'metadata.instance': {
        $in: instanceIds
      },
      'metadata.current': true,
      'metadata.main': true
    }).count();
    return main_attach_count > 0;
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_instance_sign_text.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_instance_sign_text.coffee                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
InstanceSignText.helpers = {
  show: function (stepName) {
    var instance, myApprove, myTrace, ref;

    if (Meteor.isClient) {
      if (Session.get('instancePrint')) {
        return false;
      }

      if (InstanceManager.isInbox()) {
        myApprove = InstanceManager.getCurrentApprove();

        if (myApprove) {
          instance = WorkflowManager.getInstance();
          myTrace = instance != null ? (ref = instance.traces) != null ? ref.findPropertyByPK("_id", myApprove.trace) : void 0 : void 0;
          return (myTrace != null ? myTrace.name : void 0) === stepName;
        }
      }
    }

    return false;
  },
  defaultDescription: function () {
    return Template.instance().data.default_description;
  },
  traces: function () {
    return InstanceformTemplate.helpers.traces();
  },
  trace: function (stepName, only_cc_opinion, image_sign, top_keywords) {
    var approve_sort, approves, approvesGroup, approves_sorted, completed_date, hasNext, haveDescriptionApprove, instance, is_completed, ref, ref1, ref2, traces;
    instance = InstanceformTemplate.helpers.instance();
    is_completed = (instance != null ? instance.state : void 0) === "completed";
    completed_date = is_completed ? (ref = _.last(instance.traces)) != null ? (ref1 = ref.finish_date) != null ? ref1.getTime() : void 0 : void 0 : 0;

    if (is_completed && instance.finish_date) {
      completed_date = (ref2 = instance.finish_date) != null ? ref2.getTime() : void 0;
    }

    traces = InstanceformTemplate.helpers.traces();
    approves = _.clone(traces[stepName]);

    approve_sort = function (approves, top_keywords) {
      var approves_sorted, top_approves;
      approves_sorted = _.sortBy(approves, function (approve) {
        return -(approve.finish_date || new Date()).getTime();
      });

      if (top_keywords) {
        top_approves = new Array();
        top_keywords.split(",").forEach(function (key) {
          return top_approves = _.union(top_approves, _.filter(approves_sorted, function (approve) {
            var ref3;
            return (approve != null ? (ref3 = approve.handler_name) != null ? ref3.indexOf(key) : void 0 : void 0) > -1;
          }));
        });
        top_approves = _.sortBy(top_approves, function (top_approve) {
          return -(top_approve.finish_date || new Date()).getTime();
        });
        approves_sorted = _.union(top_approves, approves_sorted);
      }

      return approves_sorted || [];
    };

    approves = _.filter(approves, function (a) {
      return a.type !== "forward" && a.type !== "distribute" && a.type !== "terminated";
    });

    if (only_cc_opinion) {
      approves = approves != null ? approves.filterProperty("type", "cc") : void 0;
    }

    approves_sorted = approve_sort(approves, top_keywords);
    approvesGroup = _.groupBy(approves, "handler");

    hasNext = function (approve, approvesGroup) {
      var handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      return _.indexOf(handlerApproves, approve) + 1 < handlerApproves.length;
    };

    haveDescriptionApprove = function (approve, approvesGroup) {
      var descriptionApproves, handlerApproves;
      handlerApproves = approvesGroup[approve.handler];
      descriptionApproves = _.filter(handlerApproves, function (a) {
        if (a.description) {
          return true;
        }

        return false;
      });

      if (descriptionApproves.length === 0) {
        return false;
      }

      return true;
    };

    approves_sorted.forEach(function (approve) {
      if (approve.sign_show !== false && (approve.description || !approve.description && !hasNext(approve, approvesGroup))) {
        if (approve.judge !== 'terminated') {
          return approve._display = true;
        }
      }
    });
    approves_sorted = _.filter(approves_sorted, function (a) {
      var ref3;

      if (is_completed) {
        return a._display === true && a.is_finished && ((ref3 = a.finish_date) != null ? ref3.getTime() : void 0) <= completed_date;
      } else {
        return a._display === true;
      }
    });
    return approves_sorted;
  },
  include: function (a, b) {
    return InstanceformTemplate.helpers.include(a, b);
  },
  unempty: function (val) {
    return InstanceformTemplate.helpers.unempty(val);
  },
  formatDate: function (date, options) {
    if (!options) {
      options = {
        "format": "YYYY-MM-DD"
      };
    }

    return InstanceformTemplate.helpers.formatDate(date, options);
  },
  isMyApprove: function (approve, only_cc_opinion) {
    var currentApprove, ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
      currentApprove = InstanceManager.getCurrentApprove();

      if (!(approve != null ? approve._id : void 0)) {
        approve = currentApprove;
      }

      if (approve._id === (currentApprove != null ? currentApprove._id : void 0) && (currentApprove != null ? currentApprove.type : void 0) === 'cc' && Template.instance().data.name) {
        if (_.indexOf(currentApprove != null ? currentApprove.opinion_fields_code : void 0, Template.instance().data.name) > -1) {
          return true;
        } else {
          return false;
        }
      }

      if (!((currentApprove != null ? currentApprove.type : void 0) === 'cc') && only_cc_opinion) {
        return false;
      }

      if (currentApprove && approve._id === currentApprove._id) {
        return true;
      }
    }

    return false;
  },
  myApproveDescription: function (approveId) {
    var myApprove, ref, ref1, ref2, ref3;

    if (Meteor.isClient) {
      if (Session.get("box") === 'inbox') {
        myApprove = (ref = Template.instance()) != null ? (ref1 = ref.myApprove) != null ? ref1.get() : void 0 : void 0;

        if (myApprove && myApprove.id === approveId) {
          if (!myApprove.sign_field_code || myApprove.sign_field_code === ((ref2 = Template.instance()) != null ? (ref3 = ref2.data) != null ? ref3.name : void 0 : void 0)) {
            if (!Session.get("instance_my_approve_description")) {
              return (myApprove != null ? myApprove.description : void 0) || "";
            }

            return Session.get("instance_my_approve_description");
          }
        }
      }
    }
  },
  now: function () {
    return new Date();
  },
  isReadOnly: function () {
    if (Meteor.isClient) {
      return ApproveManager.isReadOnly();
    }

    return false;
  },
  isOpinionOfField: function (approve) {
    if (approve.type === "cc" && Template.instance().data.name) {
      if (Template.instance().data.name === approve.sign_field_code) {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  steps: function (field_formula, step, only_cc_opinion, image_sign) {
    var ref, ref1, ref2, steps;
    steps = [];

    if (!step) {
      if (!field_formula) {
        field_formula = (ref = WorkflowManager.getInstanceFormVersion()) != null ? (ref1 = ref.fields) != null ? ref1.findPropertyByPK("code", this.name).formula : void 0 : void 0;
      }

      steps = InstanceformTemplate.helpers.getOpinionFieldStepsName(field_formula, (ref2 = Template.instance()) != null ? ref2.data.top_keywords : void 0);
    } else {
      steps = [{
        stepName: step,
        only_cc_opinion: only_cc_opinion,
        image_sign: image_sign
      }];
    }

    return steps;
  },
  imageSignData: function (handler) {
    return {
      user: handler
    };
  },
  showSignImage: function (handler, image_sign) {
    var spaceUserSign;
    spaceUserSign = ImageSign.helpers.spaceUserSign(handler);

    if ((spaceUserSign != null ? spaceUserSign.sign : void 0) && image_sign) {
      return true;
    } else {
      return false;
    }
  },
  getLastSignApprove: function () {
    var ins;
    ins = WorkflowManager.getInstance();
    return _.last(TracesManager.getHandlerSignShowApproves(ins, Meteor.userId()));
  },
  lastMyApproveDescription: function () {
    var approves, currentStep, ref, traces;
    traces = InstanceformTemplate.helpers.traces();
    currentStep = InstanceManager.getCurrentStep();
    approves = _.clone(traces[currentStep.name]);
    approves = approves.filterProperty("handler", Meteor.userId());

    if (approves.length > 1) {
      return (ref = approves[approves.length - 2]) != null ? ref.description : void 0;
    }

    return "";
  },
  showApprove: function (approve) {
    var ref, ref1;

    if (!approve.sign_field_code || approve.sign_field_code === ((ref = Template.instance()) != null ? (ref1 = ref.data) != null ? ref1.name : void 0 : void 0)) {
      if (approve != null ? approve.is_read : void 0) {
        if (approve.is_finished) {
          return ["approved", "rejected", "submitted", "readed"].includes(approve.judge);
        } else {
          return true;
        }
      }
    }

    return false;
  },
  judge_description: function (judge) {
    return t(judge + "_description");
  },
  is_approved: function (judge) {
    return "approved" === judge;
  },
  is_rejected: function (judge) {
    return "rejected" === judge;
  },
  is_readed: function (judge) {
    return ["approved", "rejected", "submitted", "readed"].includes(judge);
  },
  addClass: function () {
    var name, ref, ref1;
    name = (ref = Template.instance()) != null ? (ref1 = ref.data) != null ? ref1.name : void 0 : void 0;
    setTimeout(function () {
      var e, element;

      try {
        element = $(".automatic.opinion-field-" + name);

        if (element.length > 0) {
          if (element != null ? element.is("td") : void 0) {
            return element.addClass('field-editable');
          } else {
            return $(".instance-sign", element).addClass('field-editable');
          }
        }
      } catch (error) {
        e = error;
        return console.log(e);
      }
    }, 1);
    return '';
  }
};

if (Meteor.isServer) {
  InstanceSignText.helpers.defaultDescription = function () {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return Template.instance().data.default_description || TAPi18n.__("instance_default_opinion", {}, locale);
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_traces_help.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_traces_help.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
TracesTemplate.helpers = {
  equals: function (a, b) {
    return a === b;
  },
  empty: function (a) {
    if (a) {
      return a.toString().trim().length < 1;
    } else {
      return true;
    }
  },
  unempty: function (a) {
    if (a) {
      return a.toString().trim().length > 0;
    } else {
      return false;
    }
  },
  append: function (a, b) {
    return a + b;
  },
  dateFormat: function (date) {
    if (Steedos.isMobile() && (date != null ? date.getFullYear() : void 0) === new Date().getFullYear()) {
      return $.format.date(new Date(date), "MM-dd HH:mm");
    } else {
      return $.format.date(new Date(date), "yyyy-MM-dd HH:mm");
    }
  },
  getStepName: function (stepId) {
    var step;
    step = WorkflowManager.getInstanceStep(stepId);

    if (step) {
      return step.name;
    }

    return null;
  },
  showDeleteButton: function (approved) {
    if (approved && approved.type === 'cc' && approved.from_user === Meteor.userId() && approved.is_finished !== true && !Session.get("instancePrint")) {
      return true;
    }

    return false;
  },
  isShowModificationButton: function (approved) {
    var approve_admins, isShow, ref, ref1, ref2;
    approve_admins = (ref = Meteor.settings) != null ? (ref1 = ref["public"]) != null ? (ref2 = ref1.workflow) != null ? ref2.approve_admins : void 0 : void 0 : void 0;

    if (approve_admins != null ? approve_admins.length : void 0) {
      isShow = approve_admins != null ? approve_admins.contains(Meteor.userId()) : void 0;
    }

    if (!isShow) {
      return false;
    }

    return approved.handler === Meteor.userId();
  },
  isEditing: function () {
    var ref;
    return (ref = Template.instance().is_editing) != null ? ref.get() : void 0;
  },
  isShowDescription: function (approved) {
    var ref;

    if (TracesTemplate.helpers.isShowModificationButton(approved)) {
      return true;
    }

    return ((ref = approved.description) != null ? ref.toString().trim().length : void 0) > 0;
  },
  isCC: function (approved) {
    if (approved && approved.type === 'cc') {
      return true;
    }

    return false;
  },
  getApproveStatusIcon: function (approveJudge, autoSubmitted) {
    var approveStatusIcon;

    if (autoSubmitted === true) {
      return 'ion ion-android-alarm-clock';
    }

    approveStatusIcon = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusIcon = 'ion ion-checkmark-round';
        break;

      case 'rejected':
        approveStatusIcon = 'ion ion-close-round';
        break;

      case 'terminated':
        approveStatusIcon = 'fa fa-ban';
        break;

      case 'reassigned':
        approveStatusIcon = 'ion ion-android-contact';
        break;

      case 'relocated':
        approveStatusIcon = 'ion ion-arrow-shrink';
        break;

      case 'retrieved':
        approveStatusIcon = 'fa fa-undo';
        break;

      default:
        approveStatusIcon = '';
        break;
    }

    return approveStatusIcon;
  },
  getApproveStatusText: function (approveJudge, autoSubmitted) {
    var approveStatusText, locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    if (autoSubmitted === true) {
      return TAPi18n.__('instance_approve_timeout_auto_submitted', {}, locale);
    }

    approveStatusText = void 0;

    switch (approveJudge) {
      case 'approved':
        approveStatusText = TAPi18n.__('Instance State approved', {}, locale);
        break;

      case 'rejected':
        approveStatusText = TAPi18n.__('Instance State rejected', {}, locale);
        break;

      case 'terminated':
        approveStatusText = TAPi18n.__('Instance State terminated', {}, locale);
        break;

      case 'reassigned':
        approveStatusText = TAPi18n.__('Instance State reassigned', {}, locale);
        break;

      case 'relocated':
        approveStatusText = TAPi18n.__('Instance State relocated', {}, locale);
        break;

      case 'retrieved':
        approveStatusText = TAPi18n.__('Instance State retrieved', {}, locale);
        break;

      case 'returned':
        approveStatusText = TAPi18n.__('Instance State returned', {}, locale);
        break;

      case 'readed':
        approveStatusText = TAPi18n.__('Instance State readed', {}, locale);
        break;

      default:
        approveStatusText = '';
        break;
    }

    return approveStatusText;
  },
  getApproveJudgeClass: function (approveJudge, autoSubmitted) {
    if (autoSubmitted === true) {
      return 'autoSubmitted';
    }

    return approveJudge;
  },
  _t: function (key) {
    return TAPi18n.__(key);
  },
  myApproveDescription: function (approveId) {
    var myApprove, ref, ref1;

    if (Meteor.isClient) {
      if (Session.get("box") === 'inbox') {
        myApprove = (ref = Template.instance()) != null ? (ref1 = ref.myApprove) != null ? ref1.get() : void 0 : void 0;

        if (myApprove && myApprove.id === approveId) {
          if (!Session.get("instance_my_approve_description")) {
            return (myApprove != null ? myApprove.description : void 0) || "";
          }

          return Session.get("instance_my_approve_description");
        }
      }
    }
  },
  isForward: function (approved) {
    if (approved && approved.type === 'forward') {
      return true;
    }

    return false;
  },
  showForwardDeleteButton: function (approve) {
    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'forward' && approve.from_user === Meteor.userId() && !Session.get("instancePrint") && approve.judge !== 'terminated') {
      return true;
    }

    return false;
  },
  markDownToHtml: function (markDownString) {
    var renderer;

    if (markDownString) {
      renderer = new Markdown.Renderer();

      renderer.link = function (href, title, text) {
        return "<a target='_blank' href='" + href + "' title='" + title + "'>" + text + "</a>";
      };

      return Spacebars.SafeString(Markdown(markDownString, {
        renderer: renderer
      }));
    }
  },
  isDistribute: function (approve) {
    if (approve && approve.type === 'distribute') {
      return true;
    }

    return false;
  },
  showDistributeDeleteButton: function (approve) {
    var ins;

    if (db.instances.find(approve.forward_instance).count() === 0) {
      return false;
    }

    if (approve && approve.type === 'distribute' && !Session.get("instancePrint") && approve.judge !== 'terminated' && Steedos.isLegalVersion('', "workflow.enterprise")) {
      ins = db.instances.findOne({
        _id: approve.instance
      }, {
        fields: {
          flow: 1,
          space: 1
        }
      });

      if (ins && ins.flow && ins.space) {
        if (WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, Meteor.userId())) {
          return true;
        }
      }

      if (approve.from_user === Meteor.userId()) {
        return true;
      }
    }

    return false;
  },
  finishDateSchema: function () {
    if (Steedos.isAndroidOrIOS()) {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "datetime-local"
          },
          optional: false,
          type: Date
        }
      });
    } else {
      return new SimpleSchema({
        finish_date: {
          autoform: {
            type: "bootstrap-datetimepicker",
            readonly: true,
            dateTimePickerOptions: {
              format: "YYYY-MM-DD HH:mm",
              ignoreReadonly: true,
              locale: Session.get("TAPi18n::loaded_lang"),
              widgetPositioning: {
                horizontal: 'right'
              }
            }
          },
          optional: false,
          type: Date
        }
      });
    }
  },
  finishDateValues: function () {
    return {
      finish_date: this.finish_date
    };
  },
  /*
     	此函数用于控制是否显示traces view
     	true: 显示traces view,签核历程按钮点击后是直接定位到traces view
     	false: 不显示traces view，签核历程按钮点击后,以Modal 方式显示traces view
   */showTracesView: function (form, form_version) {
    var ref, show_modal_traces_list;
    show_modal_traces_list = ((ref = db.space_settings.findOne({
      space: Session.get("spaceId"),
      key: "show_modal_traces_list"
    })) != null ? ref.values : void 0) || false;
    return !show_modal_traces_list;
  },
  getInstanceStateText: function (instance_id) {
    var ins, locale, text;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return TAPi18n.__('instance_deleted', {}, locale);
    }

    text = '';

    if (ins.state === 'completed') {
      text = TAPi18n.__('completed', {}, locale);
    } else if (ins.state === 'pending') {
      text = TAPi18n.__('pending', {}, locale);
    } else if (ins.state === 'draft') {
      if (ins.is_read) {
        text = TAPi18n.__('instance_approve_read', {}, locale);
      } else {
        text = TAPi18n.__('instance_approve_not_yet_handled', {}, locale);
      }
    }

    return text;
  },
  getInstanceStateColor: function (instance_id) {
    var cla, ins;
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        state: 1,
        is_read: 1
      }
    });

    if (!ins) {
      return "";
    }

    cla = '';

    if (ins.state === 'draft') {
      if (ins.is_read) {
        cla = 'blue';
      } else {
        cla = 'red';
      }
    }

    return cla;
  },
  firstTrace: function (index) {
    return index === 0;
  },
  last_distribute_from: function (instance_id) {
    var dis_info, ins, user;
    ins = db.instances.findOne({
      _id: instance_id,
      distribute_from_instance: {
        $exists: true
      }
    }, {
      fields: {
        created: 1,
        created_by: 1
      }
    });

    if (ins) {
      dis_info = {};
      user = {};

      if (Meteor.isClient) {
        user = UUflow_api.getNameForUser(ins.created_by);
      } else if (Meteor.isServer) {
        user = db.users.findOne({
          _id: ins.created_by
        }, {
          fields: {
            name: 1
          }
        });
      }

      if (user.name) {
        dis_info.from_user = user._id;
        dis_info.from_user_name = user.name;
        dis_info.created = ins.created;
      }

      if (!_.isEmpty(dis_info)) {
        return dis_info;
      }
    }
  },
  isCCOrDistributeOrForwardTerminated: function (approve) {
    if ((approve.type === 'cc' || approve.type === 'distribute' || approve.type === 'forward') && approve.judge === 'terminated') {
      return true;
    }

    return false;
  },
  judgeTerminated: function (judge) {
    return judge === 'terminated';
  },
  instanceExists: function (instance_id) {
    return !!db.instances.find(instance_id).count();
  },
  agentDescription: function (userName) {
    var locale;

    if (Meteor.isServer) {
      locale = Template.instance().view.template.steedosData.locale;

      if (locale.toLocaleLowerCase() === 'zh-cn') {
        locale = "zh-CN";
      }
    } else {
      locale = Session.get("TAPi18n::loaded_lang");
    }

    return TAPi18n.__('process_delegation_rules_description', {
      userName: userName
    }, locale);
  },
  traceName: function (instance_id, traceId) {
    var ref, ref1;
    return (ref = _.find((ref1 = db.instances.findOne(instance_id, {
      fields: {
        traces: 1
      }
    })) != null ? ref1.traces : void 0, function (trace) {
      return trace._id === traceId;
    })) != null ? ref.name : void 0;
  }
};

if (Meteor.isServer) {
  TracesTemplate.helpers.dateFormat = function (date) {
    var utcOffset;

    if (date) {
      utcOffset = Template.instance().view.template.steedosData.utcOffset;
      return InstanceReadOnlyTemplate.formatDate(date, utcOffset);
    }
  };

  TracesTemplate.helpers._t = function (key) {
    var locale;
    locale = Template.instance().view.template.steedosData.locale;
    return TAPi18n.__(key, {}, locale);
  };

  TracesTemplate.helpers.showDeleteButton = function (approved) {
    return false;
  };
}

TracesTemplate.events = {
  'click .cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    event.stopPropagation();

    if (event.currentTarget.dataset.calling * 1 !== 1) {
      event.currentTarget.dataset.calling = 1;
      $("i", event.currentTarget).addClass("fa-spin");
      instanceId = Session.get('instanceId');
      approveId = event.target.dataset.approve;
      $("body").addClass("loading");
      Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
        $("body").removeClass("loading");

        if (err) {
          toastr.error(err);
          event.currentTarget.dataset.calling = 0;
          $("i", event.currentTarget).removeClass("fa-spin");
        }

        if (result === true) {
          toastr.success(TAPi18n.__("remove_cc_approve"));

          if ($(".instance-trace-detail-modal").length) {
            Modal.hide("instance_trace_detail_modal");
          }
        }
      });
    }
  },
  'click .instance-trace-detail-modal .btn-cc-approve-remove': function (event, template) {
    var approveId, instanceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    $("body").addClass("loading");
    Meteor.call('cc_remove', instanceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(err);
      }

      if (result === true) {
        toastr.success(TAPi18n.__("remove_cc_approve"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      return Modal.show("instance_trace_detail_modal", this);
    }
  },
  'taphold .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      return Modal.show("instance_trace_detail_modal", this);
    }
  },
  'click .approve-item a.btn-link,.approve-description a.btn-link,.approve-item-distribute a.btn-link': function (event, template) {
    var ref, userId;

    if (Steedos.isMobile()) {
      userId = (ref = event.target.dataset) != null ? ref.target_user_id : void 0;
      return Creator.openSafeObjectUrl('users', userId);
    }
  },
  'tapend .approve-item,.approve-description': function (event, template) {
    if (!$(event.target).closest("a.btn-link").length) {
      event.stopPropagation();
      event.preventDefault();
      return false;
    }
  },
  'click .instance-trace-detail-modal .btn-forward-approve-remove': function (event, template) {
    var approveId, instanceId, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    $("body").addClass("loading");
    Meteor.call('forward_remove', instanceId, traceId, approveId, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(TAPi18n.__("instance_approve_forward_remove_success"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-forward-instance-look': function (event, template) {
    var forward_instance, forward_space;
    forward_space = event.target.dataset.forwardspace;
    forward_instance = event.target.dataset.forwardinstance;
    return Steedos.openWindow(Steedos.absoluteUrl("workflow/space/" + forward_space + "/view/readonly/" + forward_instance));
  },
  'click .btn-modification': function (event, template) {
    template.is_editing.set(!template.is_editing.get());

    if (!Steedos.isAndroidOrIOS()) {
      return Tracker.afterFlush(function () {
        return $("#instance_trace_detail_modal #finish_input").on("dp.show", function () {
          return $(".modal-body").scrollTop(100);
        });
      });
    }
  },
  'click .btn-cancelBut': function (event, template) {
    return template.is_editing.set(!template.is_editing.get());
  },
  'click .btn-saveBut': function (event, template) {
    var approveId, finish_input, instanceId, opinion_input, traceId;
    instanceId = Session.get('instanceId');
    approveId = event.target.dataset.approve;
    traceId = event.target.dataset.trace;
    opinion_input = $('#opinion_input').val();
    finish_input = AutoForm.getFieldValue("finish_date", "finishDateAutoForm");
    $("body").addClass("loading");
    return Meteor.call('change_approve_info', instanceId, traceId, approveId, opinion_input, finish_input, function (err, result) {
      $("body").removeClass("loading");

      if (err) {
        toastr.error(TAPi18n.__(err.reason));
      }

      if (result === true) {
        toastr.success(t("instance_approve_modal_modificationsave"));
        Modal.hide("instance_trace_detail_modal");
      }
    });
  },
  'click .instance-trace-detail-modal .btn-distribute-approve-remove': function (event, template) {
    Modal.allowMultiple = true;
    return Modal.show('cancel_distribute_modal');
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_related_instances.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RelatedInstances.helpers = {
  showRelatedInstaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      if (db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).count() > 0) {
        return true;
      }

      return false;
    } else {
      return false;
    }
  },
  related_instaces: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if ((ins != null ? ins.related_instances : void 0) && _.isArray(ins != null ? ins.related_instances : void 0)) {
      return db.instances.find({
        _id: {
          $in: ins.related_instances
        }
      }, {
        fields: {
          space: 1,
          name: 1
        }
      }).fetch();
    }
  },
  related_instace_url: function (ins) {
    var absolute;

    if (Meteor.isClient && (Steedos.isMobile() || Steedos.isCordova())) {
      return '';
    }

    absolute = false;

    if (Meteor.isServer) {
      absolute = this.absolute;
    }

    if (absolute) {
      return Meteor.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    } else {
      return Steedos.absoluteUrl("workflow/space/" + ins.space + "/view/readonly/" + ins._id + '?hide_traces=0');
    }
  },
  _t: function (key) {
    var locale;

    if (Meteor.isClient) {
      return TAPi18n.__(key);
    } else {
      locale = Template.instance().view.template.steedosData.locale;
      return TAPi18n.__(key, {}, locale);
    }
  },
  show_delete: function () {
    var current_step;

    if (!Meteor.isClient) {
      return false;
    } else {
      if (Session.get("box") === "draft" || Session.get("box") === 'inbox') {
        current_step = InstanceManager.getCurrentStep();

        if (current_step) {
          if (current_step.can_edit_main_attach || current_step.can_edit_normal_attach === true || current_step.can_edit_normal_attach === void 0) {
            return true;
          }
        }
      }
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_related_records.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/client/views/instance/_related_records.coffee                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RelatedRecords.helpers = {
  showRelatedRecords: function () {
    var ins;

    if (Meteor.isClient) {
      ins = WorkflowManager.getInstance();
    } else {
      ins = this.instance;
    }

    if (!ins) {
      return false;
    }

    return !_.isEmpty(ins.record_ids);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"routes":{"designer.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/designer.coffee                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var DesignerAPI;
DesignerAPI = {
  getAbsoluteUrl: function (url) {
    var rootUrl;
    rootUrl = __meteor_runtime_config__ ? __meteor_runtime_config__.ROOT_URL_PATH_PREFIX : "";

    if (rootUrl) {
      url = rootUrl + url;
    }

    return url;
  },
  writeResponse: function (res, httpCode, body) {
    res.statusCode = httpCode;
    return res.end(body);
  },
  sendInvalidURLResponse: function (res) {
    return this.writeResponse(res, 404, "the param 'url' is required as querys.");
  },
  sendAuthTokenExpiredResponse: function (res) {
    return this.writeResponse(res, 401, "the auth_token has expired.");
  },
  sendHtmlResponse: function (req, res, type) {
    var error_msg, query, title, url;
    query = req.query;
    url = query.url;

    if (url) {
      url = decodeURIComponent(url);
    } else {
      DesignerAPI.sendInvalidURLResponse(res);
    }

    title = query.title;

    if (title) {
      title = decodeURIComponent(title);
    } else {
      title = "Steedos Designer";
    }

    error_msg = "";
    return this.writeResponse(res, 200, "<html>\n	<head>\n		<style>\n			html,body{\n				margin: 0;\n				padding: 0;\n				height: 100%;\n			}\n			body { \n				font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n				text-align: center;\n				background-color: #fff;\n			}\n			.loading{\n				position: absolute;\n				left: 0px;\n				right: 0px;\n				top: 50%;\n				z-index: -1;/*设置为-1，可以在iframe加载出来后自动消失*/\n				text-align: center;\n				margin-top: -30px;\n				font-size: 36px;\n				color: #dfdfdf;\n			}\n			.error-msg{\n				position: absolute;\n				left: 0px;\n				right: 0px;\n				bottom: 20px;\n				z-index: 1100;\n				text-align: center;\n				font-size: 20px;\n				color: #a94442;\n			}\n		</style>\n		<meta charset=\"utf-8\">\n		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n		<title>" + title + "</title>\n		<link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"" + this.getAbsoluteUrl("/favicons/android-chrome-192x192.png") + "\">\n		<link rel=\"manifest\" href=\"" + this.getAbsoluteUrl("/favicons/manifest.json") + "\">\n		<meta name=\"mobile-web-app-capable\" content=\"yes\">\n		<meta name=\"theme-color\" content=\"#000\">\n		<meta name=\"application-name\">\n		<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-57x57.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-60x60.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-72x72.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-76x76.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-114x114.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-120x120.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-144x144.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-152x152.png") + "\">\n		<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"" + this.getAbsoluteUrl("/favicons/apple-touch-icon-180x180.png") + "\">\n		<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n		<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n		<meta name=\"apple-mobile-web-app-title\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"228x228\" href=\"" + this.getAbsoluteUrl("/favicons/coast-228x228.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-16x16.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-32x32.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-96x96.png") + "\">\n		<link rel=\"icon\" type=\"image/png\" sizes=\"230x230\" href=\"" + this.getAbsoluteUrl("/favicons/favicon-230x230.png") + "\">\n		<link rel=\"shortcut icon\" href=\"" + this.getAbsoluteUrl("/favicons/favicon.ico") + "\">\n		<link rel=\"yandex-tableau-widget\" href=\"" + this.getAbsoluteUrl("/favicons/yandex-browser-manifest.json") + "\">\n		<meta name=\"msapplication-TileColor\" content=\"#fff\">\n		<meta name=\"msapplication-TileImage\" content=\"" + this.getAbsoluteUrl("/favicons/mstile-144x144.png") + "\">\n		<meta name=\"msapplication-config\" content=\"" + this.getAbsoluteUrl("/favicons/browserconfig.xml") + "\">\n		<meta property=\"twitter:image\" content=\"" + this.getAbsoluteUrl("/favicons/twitter.png") + "\">\n		<meta property=\"og:image\" content=\"" + this.getAbsoluteUrl("/favicons/open-graph.png") + "\">\n	</head>\n	<body>\n		<div class = \"loading\">Loading...</div>\n		<div class = \"error-msg\">" + error_msg + "</div>\n		<iframe id=\"ifrDesigner\" src=\"\" width=\"100%\" height=\"100%\" nwdisable=\"true\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" allowtransparency=\"yes\"></iframe>\n		<script type=\"text/javascript\" src=\"" + this.getAbsoluteUrl("/lib/jquery/jquery-1.11.2.min.js") + "\"></script>\n		<script type=\"text/javascript\">\n			var designer = {\n				urlQuery:function(name){\n					var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n					var r = window.location.search.substr(1).match(reg);\n					if (r != null) return unescape(r[2]);\n					return null;\n				},\n				run:function(){\n					var url = this.urlQuery(\"url\");\n					url = decodeURIComponent(url);\n					\n					if(url){\n						$(\"#ifrDesigner\").attr(\"src\",url);\n					}\n					var Steedos = window.opener.Steedos || null;\n					if (Steedos) {\n						Steedos.forbidNodeContextmenu(window);\n					}\n				}\n			};\n			$(function(){\n				designer.run();\n			});\n		</script>\n	<body>\n</html>");
  }
};
JsonRoutes.add('get', '/api/workflow/designer?url=:url', function (req, res, next) {
  return DesignerAPI.sendHtmlResponse(req, res);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"nextStepUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/nextStepUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/nextStepUsers", function (req, res, next) {
  var deal_type = req.query.deal_type,
      spaceId = req.query.spaceId,
      error = "";

  if (!deal_type || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var body = req.body,
      nextStepUsers = [];

  switch (deal_type) {
    case 'specifyUser':
      var specifyUserIds = body.specifyUserIds;
      nextStepUsers = WorkflowManager.getUsers(spaceId, specifyUserIds);
      break;

    case 'applicantRole':
      var applicantId = body.applicantId,
          approveRoleIds = body.approveRoleIds;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);
      if (applicant) nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, applicant.organizations, approveRoleIds);
      break;

    case 'hrRole':
      var approveHrRoleIds = body.approveHrRoleIds;
      if (approveHrRoleIds) nextStepUsers = WorkflowManager.getHrRolesUsers(spaceId, approveHrRoleIds);
      break;

    case 'applicantSuperior':
      var applicantId = body.applicantId;
      var applicant = WorkflowManager.getUser(spaceId, applicantId);

      if (applicant.manager) {
        nextStepUsers = WorkflowManager.getUsers(spaceId, applicant.manager);
      }

      break;

    case 'applicant':
      var applicantId = body.applicantId;
      nextStepUsers = WorkflowManager.getUsers(spaceId, applicantId);
      break;

    case 'userField':
      var userField = body.userField,
          userFieldValue = body.userFieldValue;

      if (userField.is_multiselect) {
        //如果多选，以userFieldValue值为Array
        nextStepUsers = WorkflowManager.getUsers(spaceId, userFieldValue);
      } else {
        nextStepUsers.push(WorkflowManager.getUser(spaceId, userFieldValue));
      }

      break;

    case 'orgField':
      var orgs,
          orgChildrens,
          orgField = body.orgField,
          orgFieldValue = body.orgFieldValue;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          orgs = WorkflowManager.getOrganizations(orgFieldValue);
          orgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, orgFieldValue);
        } else {
          orgs = [WorkflowManager.getOrganization(orgFieldValue)];
          orgChildrens = WorkflowManager.getOrganizationChildrens(spaceId, orgFieldValue);
        }

        nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgChildrens);
        orgFieldUsers = WorkflowManager.getOrganizationsUsers(spaceId, orgs);
        nextStepUsers = nextStepUsers.concat(orgFieldUsers);

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ORG_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'specifyOrg':
      var specifyOrgIds = body.specifyOrgIds;
      var specifyOrgs = WorkflowManager.getOrganizations(specifyOrgIds);
      var specifyOrgChildrens = WorkflowManager.getOrganizationsChildrens(spaceId, specifyOrgIds);
      nextStepUsers = WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgs);
      nextStepUsers = nextStepUsers.concat(WorkflowManager.getOrganizationsUsers(spaceId, specifyOrgChildrens));
      break;

    case 'userFieldRole':
      var userField = body.userField,
          userFieldValue = body.userFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (userFieldValue) {
        if (userField.is_multiselect) {
          //如果多选，以userFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, userFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByUsersAndRoles(spaceId, [userFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    case 'orgFieldRole':
      var orgField = body.orgField,
          orgFieldValue = body.orgFieldValue,
          approverRoleIds = body.approverRoleIds;

      if (orgFieldValue) {
        if (orgField.is_multiselect) {
          //如果多选，以orgFieldValue值为Array
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, orgFieldValue, approverRoleIds);
        } else {
          nextStepUsers = WorkflowManager.getRoleUsersByOrgsAndRoles(spaceId, [orgFieldValue], approverRoleIds);
        }

        if (!nextStepUsers || nextStepUsers.length < 1) {
          error = "ROLE_NO_MEMBERS";
        }
      } else {
        error = "FIELD_VALUE_EMPTY";
      }

      break;

    default:
      break;
  }

  var result = [];
  nextStepUsers.forEach(function (su) {
    if (su.user_accepted) {
      var o = {
        id: su.id,
        name: su.name
      };
      result.push(o);
    }
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'nextStepUsers': WorkflowManager.uniqUsers(result),
      'error': error
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getSpaceUsers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getSpaceUsers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getSpaceUsers", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getUsers(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFormulaUserObjects.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getFormulaUserObjects.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/getFormulaUserObjects", function (req, res, next) {
  var userIds = req.body.userIds,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!userIds || !spaceId) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  var users = WorkflowManager.getFormulaUserObject(spaceId, userIds);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': users
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"init_formula_values.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/init_formula_values.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add("post", "/api/workflow/init_formula_values", function (req, res, next) {
  var fields = req.body.fields,
      autoFormDoc = req.body.autoFormDoc,
      approver = req.body.approver,
      applicant = req.body.applicant,
      spaceId = req.query.spaceId,
      spaceUsers = [];

  if (!fields || !spaceId || !autoFormDoc || !approver || !applicant) {
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
    return;
  }

  formula_values = Form_formula.init_formula_values(fields, autoFormDoc, approver, applicant, spaceId);
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'formula_values': formula_values
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getNameForUser.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/getNameForUser.coffee                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/getNameForUser", function (req, res, next) {
  var e, user, userId;

  try {
    userId = req.body.userId;

    if (!userId) {
      JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'errors': '缺少参数'
        }
      });
    }

    user = WorkflowManager.getNameForUser(userId);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        user: user
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_designer_startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_designer_startup.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/designer/startup', function (req, res, next) {
  var categories, companyId, current_user, current_user_info, e, flows, forms, org, organizations, positions, query, ref, result, roles, spaceIds, spaceUsers, spaces, spacesQuery, userIds, users;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    companyId = ((ref = req.query) != null ? ref.companyId : void 0) || '';
    spacesQuery = {
      admins: current_user
    };

    if (companyId) {
      org = db.organizations.findOne(companyId, {
        fields: {
          space: 1
        }
      });

      if (!org) {
        throw new Meteor.Error('error', 'companyId is invalid');
      }

      spacesQuery = {
        _id: org.space
      };
    }

    spaces = db.spaces.find(spacesQuery).fetch();
    spaceIds = _.pluck(spaces, '_id');
    query = {
      space: {
        $in: spaceIds
      }
    };

    if (companyId) {
      query.company_id = companyId;
    }

    spaceUsers = db.space_users.find(query).fetch();
    forms = db.forms.find(query, {
      fields: {
        name: 1,
        state: 1,
        is_deleted: 1,
        is_valid: 1,
        space: 1,
        description: 1,
        help_text: 1,
        created: 1,
        created_by: 1,
        current: 1,
        category: 1,
        instance_style: 1,
        company_id: 1
      }
    }).fetch();
    flows = db.flows.find(query, {
      fields: {
        name: 1,
        name_formula: 1,
        code_formula: 1,
        space: 1,
        description: 1,
        is_valid: 1,
        form: 1,
        flowtype: 1,
        state: 1,
        is_deleted: 1,
        created: 1,
        created_by: 1,
        help_text: 1,
        current_no: 1,
        current: 1,
        perms: 1,
        error_message: 1,
        distribute_optional_users: 1,
        company_id: 1
      }
    }).fetch();
    roles = db.flow_roles.find(query).fetch();
    organizations = db.organizations.find(query).fetch();
    positions = db.flow_positions.find(query).fetch();
    categories = db.categories.find({
      space: {
        $in: spaceIds
      }
    }).fetch();
    userIds = _.pluck(spaceUsers, 'user');
    users = db.users.find({
      _id: {
        $in: userIds
      }
    }, {
      fields: {
        name: 1
      }
    }).fetch();
    result = {};
    result.SpaceUsers = spaceUsers;
    result.Users = users;
    result.Forms = forms;
    result.Flows = flows;
    result.Organizations = organizations;
    result.Positions = positions;
    result.Roles = roles;
    result.Categories = categories;
    result.Spaces = spaces;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: result
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_engine.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_engine.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/engine', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Approvals'], function (approve_from_client) {
      return uuflowManager.workflow_engine(approve_from_client, current_user_info, current_user);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_drafts.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/drafts', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var new_ins, new_ins_id;
      new_ins_id = uuflowManager.create_instance(instance_from_client, current_user_info);
      new_ins = db.instances.findOne({
        _id: new_ins_id
      }, {
        fields: {
          space: 1,
          flow: 1,
          flow_version: 1,
          form: 1,
          form_version: 1
        }
      });
      return inserted_instances.push(new_ins);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_remove.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_remove.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/remove', function (req, res, next) {
  var current_user, current_user_info, e, hashData, inserted_instances;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    inserted_instances = new Array();

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, delete_obj, flow, inbox_users, instance, space, spaceUserOrganizations, space_id, space_user, user_ids;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      flow = db.flows.findOne({
        _id: instance.flow
      });
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: space_user.organizations
        }
      }).fetch();

      if (instance.submitter !== current_user && !space.admins.includes(current_user) && !WorkflowManager.canAdmin(flow, space_user, spaceUserOrganizations)) {
        throw new Meteor.Error('error!', "您不能删除此申请单。");
      }

      delete_obj = db.instances.findOne(instance_from_client["_id"]);
      delete_obj.deleted = new Date();
      delete_obj.deleted_by = current_user;
      db.deleted_instances.insert(delete_obj);
      db.instances.remove(instance_from_client["_id"]);

      if (delete_obj.state !== "draft") {
        inbox_users = delete_obj.inbox_users ? delete_obj.inbox_users : [];
        cc_users = delete_obj.cc_users ? delete_obj.cc_users : [];
        user_ids = _.uniq(inbox_users.concat(cc_users));

        _.each(user_ids, function (u_id) {
          return pushManager.send_message_to_specifyUser("terminate_approval", u_id);
        });

        return pushManager.send_instance_notification("monitor_delete_applicant", delete_obj, "", current_user_info);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        inserts: inserted_instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_submit.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/submit', function (req, res, next) {
  var current_user, current_user_info, e, hashData, result;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;
    result = [];

    _.each(hashData['Instances'], function (instance_from_client) {
      var current_approve, flow_id, instance, r;
      r = uuflowManager.submit_instance(instance_from_client, current_user_info);

      if (r.alerts) {
        result.push(r);
      }

      if (!_.isEmpty(instance_from_client['inbox_users'])) {
        pushManager.send_message_to_specifyUser("current_user", current_user);
      }

      if (_.isEmpty(r.alerts)) {
        instance = db.instances.findOne(instance_from_client._id);
        flow_id = instance.flow;
        current_approve = instance_from_client.traces[0].approves[0];
        pushManager.triggerWebhook(flow_id, instance, current_approve, 'draft_submit', current_user, instance.inbox_users);
      }

      return uuflowManager.distributedInstancesRemind(instance_from_client);
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        result: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_terminate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_terminate.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/terminate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var flow, flow_id, flow_ver_end_step, flow_vers, h, i, ins, instance, instance_flow_ver, instance_id, instance_trace, newApprove, newTrace, now, old_cc_users, old_inbox_users, old_outbox_users, permissions, r, setObj, space, space_id, space_user, space_user_org_info, tempUsers, terminate_reason, traces;
      terminate_reason = instance_from_client["terminate_reason"];
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      flow_id = instance.flow;
      space = uuflowManager.getSpace(space_id);
      flow = uuflowManager.getFlow(flow_id);
      uuflowManager.isInstancePending(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_flow_ver = null;
      flow_ver_end_step = null;
      flow_vers = new Array();
      flow_vers.push(flow.current);
      flow_vers = flow_vers.concat(flow.historys);
      instance_flow_ver = _.find(flow_vers, function (f_ver) {
        return f_ver._id === instance.flow_version;
      });

      if (!instance_flow_ver) {
        throw new Meteor.Error('error!', "未找到申请单对应流程版本");
      }

      flow_ver_end_step = _.find(instance_flow_ver.steps, function (f_step) {
        return f_step.step_type === "end";
      });
      permissions = permissionManager.getFlowPermissions(flow_id, current_user);
      now = new Date();
      setObj = new Object();

      if (permissions.includes("admin") || space.admins.includes(current_user) || instance.submitter === current_user || instance.applicant === current_user) {
        if (!terminate_reason) {
          throw new Meteor.Error('error!', "还未填写强制结束申请单的理由，操作失败");
        }

        instance_trace = _.find(instance.traces, function (trace) {
          return trace.is_finished === false;
        });
        traces = instance.traces;
        i = 0;

        while (i < traces.length) {
          if (traces[i].is_finished === false) {
            traces[i].is_finished = true;
            traces[i].finish_date = now;
            h = 0;

            while (h < traces[i].approves.length) {
              if (traces[i].approves[h].is_finished === false) {
                traces[i].approves[h].is_finished = true;
                traces[i].approves[h].finish_date = now;
                traces[i].approves[h].judge = null;
                traces[i].approves[h].description = null;
              }

              h++;
            }

            newApprove = new Object();
            newApprove._id = new Mongo.ObjectID()._str;
            newApprove.instance = instance_id;
            newApprove.trace = instance_trace._id;
            newApprove.is_finished = true;
            newApprove.user = current_user;
            newApprove.user_name = current_user_info.name;
            newApprove.handler = current_user;
            newApprove.handler_name = current_user_info.name;
            newApprove.handler_organization = space_user_org_info["organization"];
            newApprove.handler_organization_name = space_user_org_info["organization_name"];
            newApprove.handler_organization_fullname = space_user_org_info["organization_fullname"];
            newApprove.start_date = now;
            newApprove.finish_date = now;
            newApprove.due_date = instance_trace.due_date;
            newApprove.read_date = now;
            newApprove.judge = "terminated";
            newApprove.is_read = true;
            newApprove.description = terminate_reason;
            newApprove.is_error = false;
            newApprove.values = new Object();
            newApprove.cost_time = newApprove.finish_date - newApprove.start_date;
            traces[i].approves.push(newApprove);
          }

          i++;
        }

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [instance_trace._id];
        newTrace.is_finished = true;
        newTrace.step = flow_ver_end_step._id;
        newTrace.name = flow_ver_end_step.name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.judge = "terminated";
        setObj.state = "completed";
        setObj.final_decision = "terminated";
        old_inbox_users = instance.inbox_users;
        old_cc_users = instance.cc_users || [];
        old_outbox_users = instance.outbox_users;
        tempUsers = new Array();

        _.each(instance_trace.approves, function (nft_approve) {
          tempUsers.push(nft_approve.user);
          return tempUsers.push(nft_approve.handler);
        });

        setObj.outbox_users = _.uniq(instance.outbox_users.concat(tempUsers));
        setObj.inbox_users = new Array();
        setObj.cc_users = new Array();
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.current_step_name = flow_ver_end_step.name;
        setObj.current_step_auto_submit = false;
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          ins = uuflowManager.getInstance(instance_id);
          pushManager.send_instance_notification("submit_terminate_applicant", ins, terminate_reason, current_user_info);

          if (old_inbox_users) {
            _.each(_.uniq(old_inbox_users.concat(old_cc_users)), function (user_id) {
              return pushManager.send_message_to_specifyUser("terminate_approval", user_id);
            });
          }

          return pushManager.triggerWebhook(ins.flow, ins, {}, 'terminate', current_user, []);
        }
      }
    });

    pushManager.send_message_current_user(current_user_info);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_reassign.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_reassign.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/reassign', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, approve_users_handlers, assignee_appr, current_space_user, current_user_organization, i, inbox_users, inbox_users_from_client, ins, instance, instance_id, last_trace, last_trace_from_client, new_inbox_users, not_in_inbox_users, now, permissions, r, reassign_reason, setObj, space, space_id;

      instance_id = instance_from_client['_id'];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      uuflowManager.isInstancePending(instance);
      last_trace_from_client = _.last(instance_from_client["traces"]);
      last_trace = _.find(instance.traces, function (t) {
        return t._id === last_trace_from_client["_id"];
      });

      if (last_trace.is_finished === true) {
        return;
      }

      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne({
        _id: space_id
      }, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      inbox_users = instance.inbox_users;
      inbox_users_from_client = instance_from_client["inbox_users"];
      reassign_reason = instance_from_client["reassign_reason"];
      not_in_inbox_users = _.difference(inbox_users, inbox_users_from_client);
      new_inbox_users = _.difference(inbox_users_from_client, inbox_users);

      if (not_in_inbox_users.length === 0 && new_inbox_users.length === 0) {
        return;
      }

      setObj = new Object();
      now = new Date();
      i = 0;
      approve_users_handlers = [];

      while (i < last_trace.approves.length) {
        if (not_in_inbox_users.includes(last_trace.approves[i].handler)) {
          if (last_trace.approves[i].is_finished === false && last_trace.approves[i].type !== "cc" && last_trace.approves[i].type !== "distribute") {
            last_trace.approves[i].is_finished = true;
            last_trace.approves[i].finish_date = now;
            last_trace.approves[i].judge = "terminated";
            last_trace.approves[i].description = "";
            last_trace.approves[i].cost_time = last_trace.approves[i].finish_date - last_trace.approves[i].start_date;
            approve_users_handlers.push(last_trace.approves[i].user);
            approve_users_handlers.push(last_trace.approves[i].handler);
          }
        }

        i++;
      }

      current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
      current_user_organization = db.organizations.findOne({
        _id: current_space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      assignee_appr = new Object();
      assignee_appr._id = new Mongo.ObjectID()._str;
      assignee_appr.instance = last_trace.instance;
      assignee_appr.trace = last_trace._id;
      assignee_appr.is_finished = true;
      assignee_appr.user = current_user;
      assignee_appr.user_name = current_user_info.name;
      assignee_appr.handler = current_user;
      assignee_appr.handler_name = current_user_info.name;
      assignee_appr.handler_organization = current_space_user.organization;
      assignee_appr.handler_organization_name = current_user_organization.name;
      assignee_appr.handler_organization_fullname = current_user_organization.fullname;
      assignee_appr.start_date = now;
      assignee_appr.finish_date = now;
      assignee_appr.due_date = last_trace.due_date;
      assignee_appr.read_date = now;
      assignee_appr.judge = "reassigned";
      assignee_appr.is_read = true;
      assignee_appr.description = reassign_reason;
      assignee_appr.is_error = false;
      assignee_appr.values = new Object();
      assignee_appr.cost_time = assignee_appr.finish_date - assignee_appr.start_date;
      last_trace.approves.push(assignee_appr);

      _.each(new_inbox_users, function (user_id) {
        var agent, handler_id, handler_info, new_appr, new_user, space_user, user_organization;
        new_user = db.users.findOne(user_id, {
          fields: {
            name: 1
          }
        });
        space_user = uuflowManager.getSpaceUser(space_id, user_id);
        user_organization = db.organizations.findOne(space_user.organization, {
          fields: {
            name: 1,
            fullname: 1
          }
        });
        new_appr = new Object();
        new_appr._id = new Mongo.ObjectID()._str;
        new_appr.instance = last_trace.instance;
        new_appr.trace = last_trace._id;
        new_appr.is_finished = false;
        new_appr.user = user_id;
        new_appr.user_name = new_user.name;
        handler_id = user_id;
        handler_info = new_user;
        agent = uuflowManager.getAgent(space_id, user_id);

        if (agent) {
          inbox_users_from_client[inbox_users_from_client.indexOf(user_id)] = agent;
          handler_id = agent;
          handler_info = db.users.findOne({
            _id: agent
          }, {
            fields: {
              name: 1
            }
          });
          new_appr.agent = agent;
        }

        new_appr.handler = handler_id;
        new_appr.handler_name = handler_info.name;
        new_appr.handler_organization = space_user.organization;
        new_appr.handler_organization_name = user_organization.name;
        new_appr.handler_organization_fullname = user_organization.fullname;
        new_appr.from_user = current_user;
        new_appr.from_user_name = current_user_info.name;
        new_appr.type = "reassign";
        new_appr.start_date = now;
        new_appr.due_date = last_trace.due_date;
        new_appr.is_read = false;
        new_appr.is_error = false;
        new_appr.values = new Object();
        uuflowManager.setRemindInfo(instance.values, new_appr);
        return last_trace.approves.push(new_appr);
      });

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(approve_users_handlers);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.inbox_users = inbox_users_from_client;
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj["traces.$.approves"] = last_trace.approves;
      r = db.instances.update({
        _id: instance_id,
        "traces._id": last_trace._id
      }, {
        $set: setObj
      });

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, reassign_reason, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'reassign', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_relocate.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_relocate.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/relocate', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var _users, ah, approve_users, current_setp, current_setp_type, current_space_user, current_user_organization, flow, h, i, inbox_users, ins, instance, instance_id, l, last_trace, newTrace, new_inbox_users, next_step, next_step_name, next_step_type, not_in_inbox_users, now, permissions, r, relocate_appr, relocate_comment, relocate_inbox_users, relocate_next_step, sameTraces, setObj, signShowApproveId, space, space_id, ta, ti, traces;

      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      last_trace = _.last(instance.traces);
      permissions = permissionManager.getFlowPermissions(instance.flow, current_user);
      space = db.spaces.findOne(instance.space, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user)) {
        throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
      }

      space_id = instance.space;
      instance_id = last_trace.instance;
      inbox_users = instance.inbox_users;
      relocate_inbox_users = instance_from_client["relocate_inbox_users"];
      relocate_comment = instance_from_client["relocate_comment"];
      relocate_next_step = instance_from_client["relocate_next_step"];
      not_in_inbox_users = _.difference(inbox_users, relocate_inbox_users);
      new_inbox_users = _.difference(relocate_inbox_users, inbox_users);
      approve_users = [];
      flow = uuflowManager.getFlow(instance.flow);
      next_step = uuflowManager.getStep(instance, flow, relocate_next_step);
      next_step_type = next_step.step_type;
      next_step_name = next_step.name;
      current_setp = uuflowManager.getStep(instance, flow, last_trace.step);
      current_setp_type = current_setp.step_type;
      traces = instance.traces;
      setObj = new Object();
      setObj.values = uuflowManager.getUpdatedValues(instance);
      now = new Date();
      i = 0;

      while (i < traces.length) {
        if (traces[i]._id === last_trace._id) {
          if (!traces[i].approves) {
            traces[i].approves = new Array();
          }

          h = 0;

          while (h < traces[i].approves.length) {
            if (traces[i].approves[h].is_finished === false && traces[i].approves[h].type !== "cc" && traces[i].approves[h].type !== "distribute") {
              traces[i].approves[h].start_date = now;
              traces[i].approves[h].finish_date = now;
              traces[i].approves[h].read_date = now;
              traces[i].approves[h].is_error = false;
              traces[i].approves[h].is_read = true;
              traces[i].approves[h].is_finished = true;
              traces[i].approves[h].judge = "terminated";
              traces[i].approves[h].cost_time = traces[i].approves[h].finish_date - traces[i].approves[h].start_date;
              approve_users.push(traces[i].approves[h].user);

              if (traces[i].approves[h].sign_show === true) {
                ta = traces[i].approves[h];
                sameTraces = _.filter(traces, function (t) {
                  return t.step === traces[i].step;
                });
                l = sameTraces.length - 1;
                signShowApproveId = null;

                while (l > -1) {
                  _.each(sameTraces[l].approves, function (a) {
                    if (a.user === ta.user && a.judge !== "terminated" && a.description && !signShowApproveId) {
                      return signShowApproveId = a._id;
                    }
                  });

                  l--;
                }

                if (signShowApproveId) {
                  ti = 0;

                  while (ti < traces.length) {
                    ah = 0;

                    while (ah < traces[ti].approves.length) {
                      if (traces[ti].approves[ah]._id === signShowApproveId) {
                        traces[ti].approves[ah].sign_show = true;
                        traces[i].approves[h].sign_show = false;
                      }

                      ah++;
                    }

                    ti++;
                  }
                }
              }
            }

            h++;
          }

          current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
          current_user_organization = db.organizations.findOne(current_space_user.organization, {
            fields: {
              name: 1,
              fullname: 1
            }
          });
          relocate_appr = new Object();
          relocate_appr._id = new Mongo.ObjectID()._str;
          relocate_appr.instance = instance_id;
          relocate_appr.trace = traces[i]._id;
          relocate_appr.is_finished = true;
          relocate_appr.user = current_user;
          relocate_appr.user_name = current_user_info.name;
          relocate_appr.handler = current_user;
          relocate_appr.handler_name = current_user_info.name;
          relocate_appr.handler_organization = current_space_user.organization;
          relocate_appr.handler_organization_name = current_user_organization.name;
          relocate_appr.handler_organization_fullname = current_user_organization.fullname;
          relocate_appr.start_date = now;
          relocate_appr.finish_date = now;
          relocate_appr.due_date = traces[i].due_date;
          relocate_appr.read_date = now;
          relocate_appr.judge = "relocated";
          relocate_appr.is_read = true;
          relocate_appr.description = relocate_comment;
          relocate_appr.is_error = false;
          relocate_appr.values = new Object();
          relocate_appr.cost_time = relocate_appr.finish_date - relocate_appr.start_date;
          traces[i].approves.push(relocate_appr);
          traces[i].is_finished = true;
          traces[i].finish_date = now;
          traces[i].judge = "relocated";
        }

        i++;
      }

      if (next_step_type === "end") {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = true;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.finish_date = now;
        newTrace.approves = [];
        setObj.state = "completed";
        setObj.inbox_users = [];
        setObj.final_decision = "terminated";
        setObj.finish_date = new Date();
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = false;
      } else {
        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace._id];
        newTrace.is_finished = false;
        newTrace.step = relocate_next_step;
        newTrace.name = next_step_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(next_step.timeout_hours);
        newTrace.approves = [];

        _.each(relocate_inbox_users, function (next_step_user_id, idx) {
          var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
          newApprove = new Object();
          newApprove._id = new Mongo.ObjectID()._str;
          newApprove.instance = instance_id;
          newApprove.trace = newTrace._id;
          newApprove.is_finished = false;
          newApprove.user = next_step_user_id;
          user_info = db.users.findOne(next_step_user_id, {
            fields: {
              name: 1
            }
          });
          newApprove.user_name = user_info.name;
          handler_id = next_step_user_id;
          handler_info = user_info;
          agent = uuflowManager.getAgent(space_id, next_step_user_id);

          if (agent) {
            relocate_inbox_users[idx] = agent;
            handler_id = agent;
            handler_info = db.users.findOne({
              _id: agent
            }, {
              fields: {
                name: 1
              }
            });
            newApprove.agent = agent;
          }

          newApprove.handler = handler_id;
          newApprove.handler_name = handler_info.name;
          next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
          next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
          newApprove.handler_organization = next_step_user_org_info["organization"];
          newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
          newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
          newApprove.start_date = now;
          newApprove.due_date = newTrace.due_date;
          newApprove.is_read = false;
          newApprove.is_error = false;
          newApprove.values = new Object();
          uuflowManager.setRemindInfo(instance.values, newApprove);
          return newTrace.approves.push(newApprove);
        });

        setObj.inbox_users = relocate_inbox_users;
        setObj.state = "pending";
        setObj.current_step_name = next_step_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, next_step.lines);
      }

      instance.outbox_users.push(current_user);
      instance.outbox_users = instance.outbox_users.concat(inbox_users).concat(approve_users);
      setObj.outbox_users = _.uniq(instance.outbox_users);
      setObj.modified = now;
      setObj.modified_by = current_user;
      setObj.is_archived = false;
      traces.push(newTrace);
      setObj.traces = traces;

      if (setObj.state === 'completed') {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });
      } else {
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj,
          $unset: {
            finish_date: 1
          }
        });
      }

      if (r) {
        ins = uuflowManager.getInstance(instance_id);
        pushManager.send_message_current_user(current_user_info);

        _.each(not_in_inbox_users, function (user_id) {
          if (user_id !== current_user) {
            return pushManager.send_message_to_specifyUser("current_user", user_id);
          }
        });

        _users = new Array();

        _users.push(ins.applicant);

        _users.push(ins.submitter);

        _users = _.uniq(_users.concat(ins.outbox_users));

        _.each(_users, function (user_id) {
          return pushManager.send_message_to_specifyUser("current_user", user_id);
        });

        pushManager.send_instance_notification("reassign_new_inbox_users", ins, relocate_comment, current_user_info);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'relocate', current_user, ins.inbox_users);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_archive.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_archive.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/archive', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var instance, instance_id, setObj, space, space_id, space_user;
      instance_id = instance_from_client["_id"];
      instance = uuflowManager.getInstance(instance_id);
      space_id = instance.space;
      space = uuflowManager.getSpace(space_id);
      uuflowManager.isInstanceFinishedAndNotArchieved(instance);
      space_user = uuflowManager.getSpaceUser(space_id, current_user);
      uuflowManager.isInstanceSubmitterOrApplicantOrSpaceAdmin(instance, current_user, space);
      setObj = new Object();
      setObj.is_archived = true;
      setObj.modified = new Date();
      setObj.modified_by = current_user;
      return db.instances.update({
        _id: instance_id
      }, {
        $set: setObj
      });
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_export.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_export.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/instances", function (req, res, next) {
    var current_user_info, e, ejs, ejsLint, end_date, error_obj, fields, fileName, flow, flow_id, flow_ids, form, form_name, formatDate, ins_to_xls, lang, last_month_date, now, query, ret, selector, space, space_id, start_date, str, table_fields, template, timezoneoffset, type, uid, utcOffset;

    try {
      current_user_info = uuflowManager.check_authorization(req);
      query = req.query;
      space_id = query.space_id;
      flow_id = query.flow_id;
      type = parseInt(query.type);
      timezoneoffset = parseInt(query.timezoneoffset);
      flow = db.flows.findOne({
        _id: flow_id
      }, {
        fields: {
          form: 1
        }
      });
      form = db.forms.findOne({
        _id: flow.form
      }, {
        fields: {
          name: 1,
          'current.fields': 1
        }
      });
      form_name = form.name;
      fields = form.current.fields;
      table_fields = new Array();

      _.each(form.current.fields, function (field) {
        if (field.type === "table") {
          return table_fields.push(field);
        }
      });

      ins_to_xls = new Array();
      start_date = null;
      end_date = null;
      now = new Date();
      selector = {
        space: space_id,
        flow: flow_id
      };
      selector.state = {
        $in: ["pending", "completed"]
      };
      uid = current_user_info._id;
      space = db.spaces.findOne(space_id);

      if (!space) {
        selector.state = "none";
      }

      if (!space.admins.includes(uid)) {
        flow_ids = WorkflowManager.getMyAdminOrMonitorFlows(space_id, uid);

        if (!flow_ids.includes(selector.flow)) {
          selector.$or = [{
            submitter: uid
          }, {
            applicant: uid
          }, {
            inbox_users: uid
          }, {
            outbox_users: uid
          }];
        }
      }

      if (type === 0) {
        start_date = new Date(now.getFullYear(), now.getMonth(), 1);
        selector.submit_date = {
          $gte: start_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 1) {
        last_month_date = new Date(new Date(now.getFullYear(), now.getMonth(), 1) - 1000 * 60 * 60 * 24);
        start_date = new Date(last_month_date.getFullYear(), last_month_date.getMonth(), 1);
        end_date = new Date(now.getFullYear(), now.getMonth(), 1);
        selector.submit_date = {
          $gte: start_date,
          $lte: end_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 2) {
        start_date = new Date(now.getFullYear(), 0, 1);
        selector.submit_date = {
          $gte: start_date
        };
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      } else if (type === 3) {
        ins_to_xls = db.instances.find(selector, {
          sort: {
            submit_date: 1
          }
        }).fetch();
      }

      ejs = require('ejs');
      str = Assets.getText('server/ejs/export_instances.ejs');
      ejsLint = require('ejs-lint');
      error_obj = ejsLint.lint(str, {});

      if (error_obj) {
        console.error("===/api/workflow/export:");
        console.error(error_obj);
      }

      template = ejs.compile(str);
      lang = 'en';

      if (current_user_info.locale === 'zh-cn') {
        lang = 'zh-CN';
      }

      utcOffset = timezoneoffset / -60;

      formatDate = function (date, formater) {
        return moment(date).utcOffset(utcOffset).format(formater);
      };

      ret = template({
        lang: lang,
        formatDate: formatDate,
        form_name: form_name,
        fields: fields,
        table_fields: table_fields,
        ins_to_xls: ins_to_xls
      });
      fileName = "SteedOSWorkflow_" + moment().format('YYYYMMDDHHmm') + ".xls";
      res.setHeader("Content-type", "application/octet-stream");
      res.setHeader("Content-Disposition", "attachment;filename=" + encodeURI(fileName));
      return res.end(ret);
    } catch (error) {
      e = error;
      console.error(e.stack);
      return res.end(e.message);
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_space_changeset.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_space_changeset.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/uf/space/changeset', function (req, res, next) {
  var auth_token, data, e, formids, is_admin, query, sync_token;

  try {
    query = req.query;
    auth_token = db.auth_tokens.findOne({
      auth_token: query.auth_token
    });

    if (!auth_token || !auth_token.enabled) {
      throw new Meteor.Error(401, 'Unauthorized');
    }

    sync_token = query["sync_token"];
    formids = query["formids"];
    is_admin = query["is_admin"];
    data = uuflowManager.get_SpaceChangeSet(formids, is_admin, sync_token);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: data
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_retrieve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_retrieve.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('post', '/api/workflow/retrieve', function (req, res, next) {
  var current_user, current_user_info, e, hashData;

  try {
    current_user_info = uuflowManager.check_authorization(req);
    current_user = current_user_info._id;
    hashData = req.body;

    _.each(hashData['Instances'], function (instance_from_client) {
      var cc_users, flow, handler_info, i, ins, instance, instance_id, last_trace, last_trace_id, newApprove, newTrace, now, old_inbox_users, org_info, previous_step, previous_trace, previous_trace_approves, previous_trace_id, previous_trace_name, previous_trace_step_id, r, retrieve_approve, retrieve_comment, retrieve_type, setObj, space_id, space_user, the_trace, traces;
      instance = uuflowManager.getInstance(instance_from_client["_id"]);
      retrieve_comment = instance_from_client['retrieve_comment'];

      if (!instance.outbox_users.includes(current_user) && instance.submitter !== current_user && instance.applicant !== current_user) {
        throw new Meteor.Error('error', '当前用户不符合取回条件');
      }

      retrieve_type = "";
      traces = instance.traces;
      last_trace = _.last(traces);
      last_trace_id = last_trace._id;
      previous_trace_id = last_trace.previous_trace_ids[0];
      previous_trace = _.find(traces, function (t) {
        return t._id === previous_trace_id;
      });
      previous_trace_step_id = previous_trace.step;
      previous_trace_name = previous_trace.name;
      flow = uuflowManager.getFlow(instance.flow);
      previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);

      if (previous_step.step_type === "counterSign") {
        throw new Meteor.Error('error', '会签不能取回');
      }

      previous_trace_approves = _.filter(previous_trace.approves, function (a) {
        return a.type !== 'cc' && a.type !== 'distribute' && a.type !== 'forward' && ['approved', 'submitted', 'rejected'].includes(a.judge);
      });

      if (previous_trace_approves.length === 1 && (previous_trace_approves[0].user === current_user || previous_trace_approves[0].handler === current_user)) {
        retrieve_type = 'normal';
      }

      i = traces.length;
      retrieve_approve = {};

      while (i > 0) {
        _.each(traces[i - 1].approves, function (a) {
          if (a.type === 'cc' && a.is_finished === true && a.user === current_user) {
            retrieve_type = 'cc';
            return retrieve_approve = a;
          }
        });

        if (retrieve_type === 'cc') {
          break;
        }

        i--;
      }

      if (retrieve_type === 'normal') {
        flow = uuflowManager.getFlow(instance.flow);
        previous_step = uuflowManager.getStep(instance, flow, previous_trace_step_id);
        space_id = instance.space;
        instance_id = instance._id;
        old_inbox_users = instance.inbox_users;
        setObj = new Object();
        now = new Date();

        _.each(traces, function (t) {
          var current_space_user, current_user_organization, retrieve_appr;

          if (t._id === last_trace_id) {
            if (!t.approves) {
              t.approves = new Array();
            }

            _.each(t.approves, function (appr) {
              if (appr.is_finished === false && appr.type !== "cc") {
                appr.start_date = now;
                appr.finish_date = now;
                appr.read_date = now;
                appr.is_error = false;
                appr.is_read = true;
                appr.is_finished = true;
                appr.judge = "terminated";
                return appr.cost_time = appr.finish_date - appr.start_date;
              }
            });

            current_space_user = uuflowManager.getSpaceUser(space_id, current_user);
            current_user_organization = db.organizations.findOne(current_space_user.organization, {
              fields: {
                name: 1,
                fullname: 1
              }
            });
            retrieve_appr = new Object();
            retrieve_appr._id = new Mongo.ObjectID()._str;
            retrieve_appr.instance = instance_id;
            retrieve_appr.trace = t._id;
            retrieve_appr.is_finished = true;
            retrieve_appr.user = current_user;
            retrieve_appr.user_name = current_user_info.name;
            retrieve_appr.handler = current_user;
            retrieve_appr.handler_name = current_user_info.name;
            retrieve_appr.handler_organization = current_space_user.organization;
            retrieve_appr.handler_organization_name = current_user_organization.name;
            retrieve_appr.handler_organization_fullname = current_user_organization.fullname;
            retrieve_appr.start_date = now;
            retrieve_appr.finish_date = now;
            retrieve_appr.due_date = t.due_date;
            retrieve_appr.read_date = now;
            retrieve_appr.judge = "retrieved";
            retrieve_appr.is_read = true;
            retrieve_appr.description = retrieve_comment;
            retrieve_appr.is_error = false;
            retrieve_appr.values = new Object();
            retrieve_appr.cost_time = retrieve_appr.finish_date - retrieve_appr.start_date;
            t.approves.push(retrieve_appr);
            t.is_finished = true;
            t.finish_date = now;
            return t.judge = "retrieved";
          }
        });

        newTrace = new Object();
        newTrace._id = new Mongo.ObjectID()._str;
        newTrace.instance = instance_id;
        newTrace.previous_trace_ids = [last_trace_id];
        newTrace.is_finished = false;
        newTrace.step = previous_trace_step_id;
        newTrace.name = previous_trace_name;
        newTrace.start_date = now;
        newTrace.due_date = uuflowManager.getDueDate(previous_step.timeout_hours);
        newTrace.approves = [];
        newApprove = new Object();
        newApprove._id = new Mongo.ObjectID()._str;
        newApprove.instance = instance_id;
        newApprove.trace = newTrace._id;
        newApprove.is_finished = false;
        newApprove.user = current_user;
        handler_info = db.users.findOne(current_user, {
          fields: {
            name: 1
          }
        });
        newApprove.user_name = handler_info.name;
        newApprove.handler = current_user;
        newApprove.handler_name = handler_info.name;
        space_user = uuflowManager.getSpaceUser(space_id, current_user);
        org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
        newApprove.handler_organization = org_info["organization"];
        newApprove.handler_organization_name = org_info["organization_name"];
        newApprove.handler_organization_fullname = org_info["organization_fullname"];
        newApprove.start_date = now;
        newApprove.due_date = newTrace.due_date;
        newApprove.is_read = false;
        newApprove.is_error = false;
        newApprove.values = new Object();
        uuflowManager.setRemindInfo(instance.values, newApprove);
        newTrace.approves.push(newApprove);
        setObj.inbox_users = [current_user];
        setObj.modified = now;
        setObj.modified_by = current_user;
        traces.push(newTrace);
        setObj.traces = traces;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.current_step_name = previous_trace_name;
        setObj.current_step_auto_submit = uuflowManager.getCurrentStepAutoSubmit(flow.timeout_auto_submit, previous_step.lines);
        r = db.instances.update({
          _id: instance_id
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);

          _.each(old_inbox_users, function (user_id) {
            if (user_id !== current_user) {
              return pushManager.send_message_to_specifyUser("current_user", user_id);
            }
          });

          ins = uuflowManager.getInstance(instance_id);
          return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, ins.inbox_users);
        }
      } else if (retrieve_type === 'cc') {
        setObj = new Object();
        now = new Date();
        instance_id = instance._id;
        the_trace = _.find(traces, function (t) {
          return t._id === retrieve_approve.trace;
        });

        _.each(the_trace.approves, function (a) {
          if (a._id === retrieve_approve._id) {
            a.is_finished = false;
            a.finish_date = void 0;
            a.judge = void 0;
            return a.cost_time = void 0;
          }
        });

        cc_users = instance.cc_users;
        cc_users.push(current_user);
        setObj.modified = now;
        setObj.modified_by = current_user;
        setObj.state = "pending";
        setObj.is_archived = false;
        setObj.cc_users = cc_users;
        setObj['traces.$.approves'] = the_trace.approves;
        r = db.instances.update({
          _id: instance_id,
          'traces._id': retrieve_approve.trace
        }, {
          $set: setObj
        });

        if (r) {
          pushManager.send_message_current_user(current_user_info);
        }

        ins = uuflowManager.getInstance(instance_id);
        return pushManager.triggerWebhook(ins.flow, ins, {}, 'retrieve', current_user, [current_user]);
      }
    });

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {}
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
JsonRoutes.add('post', '/api/workflow/forward', function (req, res, next) {
  try {
    var current_user_info = uuflowManager.check_authorization(req);
    var current_user_id = current_user_info._id;
    var hashData = req.body;
    var instance_id = hashData.instance_id;
    var space_id = hashData.space_id;
    var flow_id = hashData.flow_id;
    var hasSaveInstanceToAttachment = hashData.hasSaveInstanceToAttachment;
    var description = hashData.description;
    var isForwardAttachments = hashData.isForwardAttachments;
    var selectedUsers = hashData.selectedUsers;
    var action_type = hashData.action_type;
    var related = hashData.related;
    var from_approve_id = hashData.from_approve_id;
    check(instance_id, String);
    check(space_id, String);
    check(flow_id, String);
    check(hasSaveInstanceToAttachment, Boolean);
    check(description, String);
    check(isForwardAttachments, Boolean);
    check(selectedUsers, Array);
    check(action_type, Match.OneOf('forward', 'distribute'));
    if (action_type == "distribute") check(from_approve_id, String);
    var ins = db.instances.findOne(instance_id);
    var old_space_id = ins.space;
    var flow = db.flows.findOne(flow_id);
    var space = db.spaces.findOne(space_id);

    if (!ins || !flow || !space) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var forward_users = new Array();

    if (_.isEmpty(selectedUsers)) {
      forward_users = [current_user_id];
    } else {
      forward_users = selectedUsers;
    } // 校验分发对象是否有分发流程的提交权限


    var no_permission_user_ids = new Array();

    _.each(forward_users, function (uid) {
      var permissions = permissionManager.getFlowPermissions(flow_id, uid);

      if (!permissions.includes("add")) {
        // throw new Meteor.Error('error!', "该申请人没有提交此申请单的权限。")
        no_permission_user_ids.push(uid);
      }
    });

    if (!_.isEmpty(no_permission_user_ids)) {
      var no_permission_users_name = new Array();
      db.users.find({
        _id: {
          $in: no_permission_user_ids
        }
      }, {
        fields: {
          name: 1
        }
      }).forEach(function (u) {
        no_permission_users_name.push(u.name);
      });
      throw new Meteor.Error('no_permission', "该提交人没有提交此申请单的权限。", no_permission_users_name.join(','));
    }

    var new_ins_ids = new Array();
    var current_trace = null;

    if (action_type == "distribute") {
      _.each(ins.traces, function (t) {
        if (!current_trace) {
          _.each(t.approves, function (a) {
            if (!current_trace) {
              if (a._id == from_approve_id) current_trace = t;
            }
          });
        }
      });
    } else {
      current_trace = _.last(ins.traces);
    }

    var current_trace_id = current_trace._id;
    var forward_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    var set_obj = new Object(); // 计算values

    var old_values = ins.values,
        new_values = {};
    var form = db.forms.findOne(flow.form);
    var fields = form.current.fields || [];
    var old_form = db.forms.findOne(ins.form);
    var old_form_version = ins.form_version,
        old_fields = [],
        common_fields = [];
    var select_to_input_fields = [];

    if (old_form.current._id == old_form_version) {
      old_fields = old_form.current.fields;
    } else {
      if (old_form.historys) {
        old_form.historys.forEach(function (h) {
          if (h._id == old_form_version) old_fields = h.fields;
        });
      }
    }

    fields.forEach(function (field) {
      var exists_field = _.find(old_fields, function (f) {
        return f.type == field.type && f.code == field.code;
      });

      if (exists_field) common_fields.push(field);

      var select_input_field = _.find(old_fields, function (f) {
        return f.type == 'select' && field.type == 'input' && f.code == field.code;
      });

      if (select_input_field) select_to_input_fields.push(select_input_field);
    });
    select_to_input_fields.forEach(function (field) {
      if (old_values[field.code]) {
        new_values[field.code] = old_values[field.code];
      }
    });
    common_fields.forEach(function (field) {
      if (field.type == 'section') {
        if (field.fields) {
          field.fields.forEach(function (f) {
            // 跨工作区转发不复制选人选组
            if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
              return;
            }

            var key = f.code;
            var old_v = old_values[key];

            if (old_v) {
              // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
              if (f.type == 'select' || f.type == 'radio') {
                var options = f.options.split('\n');
                if (!options.includes(old_v)) return;
              }

              if (f.type == 'multiSelect') {
                var options = f.options.split('\n');
                var old_multiSelected = old_v.split(',');

                var new_multiSelected = _.intersection(options, old_multiSelected);

                old_v = new_multiSelected.join(',');
              }

              new_values[key] = old_v;
            }
          });
        }
      } else if (field.type == 'table') {
        if (!_.isEmpty(old_values[field.code])) {
          new_values[field.code] = new Array();
          old_values[field.code].forEach(function (old_table_row_values) {
            var new_table_row_values = {};

            if (!_.isEmpty(field.fields)) {
              field.fields.forEach(function (f) {
                // 跨工作区转发不复制选人选组
                if (['group', 'user'].includes(f.type) && old_space_id != space_id) {
                  return;
                }

                var key = f.code;
                var old_v = old_table_row_values[key];

                if (old_v) {
                  // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
                  if (f.type == 'select' || f.type == 'radio') {
                    var options = f.options.split('\n');
                    if (!options.includes(old_v)) return;
                  }

                  if (f.type == 'multiSelect') {
                    var options = f.options.split('\n');
                    var old_multiSelected = old_v.split(',');

                    var new_multiSelected = _.intersection(options, old_multiSelected);

                    old_v = new_multiSelected.join(',');
                  }

                  new_table_row_values[key] = old_v;
                }
              });
            }

            if (old_table_row_values._id) {
              new_table_row_values._id = new Mongo.ObjectID()._str;
            }

            if (!_.isEmpty(new_table_row_values)) {
              new_values[field.code].push(new_table_row_values);
            }
          });
        }
      } else {
        // 跨工作区转发不复制选人选组
        if (['group', 'user'].includes(field.type) && old_space_id != space_id) {
          return;
        }

        var key = field.code;
        var old_v = old_values[key];

        if (old_v) {
          // 校验 单选，多选，下拉框 字段值是否在新表单对应字段的可选值范围内
          if (field.type == 'select' || field.type == 'radio') {
            var options = field.options.split('\n');
            if (!options.includes(old_v)) return;
          }

          if (field.type == 'multiSelect') {
            var options = field.options.split('\n');
            var old_multiSelected = old_v.split(',');

            var new_multiSelected = _.intersection(options, old_multiSelected);

            old_v = new_multiSelected.join(',');
          }

          new_values[key] = old_v;
        }
      }
    }); //如果是分发，则value中的record_need、FONDSID不需要分发到新申请单中

    if (action_type === 'distribute') {
      delete new_values.record_need;
      delete new_values.FONDSID;
    } // 计算申请单标题


    var instance_name = "";
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      try {
        var iscript = name_forumla.replace(/\{/g, "(new_values['").replace(/\}/g, "'] || '')");
        var rev = eval(iscript);
        instance_name = rev || flow.name;
      } catch (error) {
        throw new Meteor.Error('caculate_instance_name', "计算申请单标题出错请检查表单标题脚本。");
      }
    } else {
      instance_name = flow.name;
    } // instance中记录当前步骤名称 #1314


    var start_step = _.find(flow.current.steps, function (step) {
      return step.step_type == 'start';
    }); // 新建申请单时，instances记录流程名称、流程分类名称 #1313


    var category_name = "";

    if (form.category) {
      var category = uuflowManager.getCategory(form.category);
      if (category) category_name = category.name;
    }

    _.each(forward_users, function (user_id) {
      var user_info = db.users.findOne(user_id);
      var space_user = db.space_users.findOne({
        space: space_id,
        user: user_id
      }, {
        fields: {
          organization: 1
        }
      });
      var space_user_org_info = db.organizations.findOne({
        _id: space_user.organization
      }, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var now = new Date();
      var ins_obj = {};
      var agent = uuflowManager.getAgent(space_id, user_id);
      var handler_id = user_id;
      var handler_info = user_info;
      var handler_space_user = space_user;
      var handler_org_info = space_user_org_info;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent);
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
      }

      ins_obj._id = db.instances._makeNewID();
      ins_obj.space = space_id;
      ins_obj.flow = flow_id;
      ins_obj.flow_version = flow.current._id;
      ins_obj.form = flow.form;
      ins_obj.form_version = flow.current.form_version;
      ins_obj.name = instance_name;
      ins_obj.submitter = handler_id;
      ins_obj.submitter_name = handler_info.name;
      ins_obj.applicant = user_id;
      ins_obj.applicant_name = user_info.name;
      ins_obj.applicant_organization = space_user.organization;
      ins_obj.applicant_organization_name = space_user_org_info.name;
      ins_obj.applicant_organization_fullname = space_user_org_info.fullname;
      ins_obj.state = "draft";
      ins_obj.code = "";
      ins_obj.is_archived = false;
      ins_obj.is_deleted = false;
      ins_obj.created = now;
      ins_obj.created_by = current_user_id;
      ins_obj.modified = now;
      ins_obj.modified_by = current_user_id;
      ins_obj.inbox_users = [handler_id];
      ins_obj.values = new_values;

      if (action_type == 'distribute') {
        // 解决多次分发看不到正文、附件问题
        if (ins.distribute_from_instance) {
          ins_obj.distribute_from_instance = ins.distribute_from_instance;
        } else {
          ins_obj.distribute_from_instance = instance_id;
        }

        ins_obj.distribute_from_instances = _.clone(ins.distribute_from_instances) || [];
        ins_obj.distribute_from_instances.push(instance_id);

        if (related) {
          ins_obj.related_instances = [instance_id];
        }
      } else if (action_type == 'forward') {
        ins_obj.forward_from_instance = instance_id;
      } // 新建Trace


      var trace_obj = {};
      trace_obj._id = new Mongo.ObjectID()._str;
      trace_obj.instance = ins_obj._id;
      trace_obj.is_finished = false; // 当前最新版flow中开始节点的step_id

      var step_id, step_name, can_edit_main_attach, can_edit_normal_attach;
      flow.current.steps.forEach(function (step) {
        if (step.step_type == "start") {
          step_id = step._id;
          step_name = step.name;
          can_edit_main_attach = step.can_edit_main_attach;
          can_edit_normal_attach = step.can_edit_normal_attach;
        }
      });
      trace_obj.step = step_id;
      trace_obj.start_date = now;
      trace_obj.name = step_name; // 新建Approve

      var appr_obj = {};
      appr_obj._id = new Mongo.ObjectID()._str;
      appr_obj.instance = ins_obj._id;
      appr_obj.trace = trace_obj._id;
      appr_obj.is_finished = false;
      appr_obj.user = user_id;
      appr_obj.user_name = user_info.name;
      appr_obj.handler = handler_id;
      appr_obj.handler_name = handler_info.name;
      appr_obj.handler_organization = handler_space_user.organization;
      appr_obj.handler_organization_name = handler_org_info.name;
      appr_obj.handler_organization_fullname = handler_org_info.fullname;
      appr_obj.type = "draft";
      appr_obj.start_date = now;
      appr_obj.read_date = now;
      appr_obj.is_read = false;
      appr_obj.is_error = false;
      appr_obj.values = new_values;

      if (agent) {
        appr_obj.agent = agent;
      }

      trace_obj.approves = [appr_obj];
      ins_obj.traces = [trace_obj];
      if (flow.auto_remind == true) ins_obj.auto_remind = true;
      ins_obj.current_step_name = start_step.name;
      ins_obj.flow_name = flow.name;

      if (category_name) {
        ins_obj.category_name = category.name;
        ins_obj.category = category._id;
      }

      new_ins_id = db.instances.insert(ins_obj); // 复制附件

      var collection = cfs.instances; //将原表单内容存储为第一个附件

      if (hasSaveInstanceToAttachment) {
        // try {
        instanceHtml = InstanceReadOnlyTemplate.getInstanceHtml(user_info, space_id, ins, {
          absolute: true
        });
        var instanceFile = new FS.File();
        instanceFile.attachData(Buffer.from(instanceHtml, "utf-8"), {
          type: "text/html"
        }, function (error) {
          if (error) {
            throw new Meteor.Error(error.error, error.reason);
          }

          instanceFile.name(ins.name + ".html");
          instanceFile.size(instanceHtml.length);
          var metadata = {
            owner: user_id,
            owner_name: user_info.name,
            space: space_id,
            instance: new_ins_id,
            approve: appr_obj._id,
            current: true
          };
          instanceFile.metadata = metadata;
          var fileObj = collection.insert(instanceFile);
          fileObj.update({
            $set: {
              'metadata.parent': fileObj._id
            }
          });
        }); // } catch (e) {
        //     console.error(e);
        // }
      }

      if (isForwardAttachments && action_type == 'forward') {
        var files = collection.find({
          'metadata.instance': instance_id,
          'metadata.current': true
        });
        files.forEach(function (f) {
          // 判断新的流程开始节点是否有编辑正文和编辑附件权限
          if (f.metadata.main == true) {
            if (can_edit_main_attach != true && can_edit_normal_attach != true) return;
          } else {
            if (can_edit_normal_attach != true) return;
          }

          var newFile = new FS.File();
          newFile.attachData(f.createReadStream('instances'), {
            type: f.original.type
          }, function (err) {
            if (err) {
              throw new Meteor.Error(err.error, err.reason);
            }

            newFile.name(f.name());
            newFile.size(f.size());
            var metadata = {
              owner: user_id,
              owner_name: user_info.name,
              space: space_id,
              instance: new_ins_id,
              approve: appr_obj._id,
              current: true
            };

            if (f.metadata.main == true && can_edit_main_attach == true) {
              metadata.main = true;
            }

            newFile.metadata = metadata;
            var fileObj = collection.insert(newFile);
            fileObj.update({
              $set: {
                'metadata.parent': fileObj._id
              }
            });
          });
        });
      } // 给当前的申请单增加转发记录


      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': instance_id,
        'trace': current_trace_id,
        'is_finished': true,
        'user': user_id,
        'user_name': user_info.name,
        'handler': user_id,
        'handler_name': user_info.name,
        'handler_organization': space_user.organization,
        'handler_organization_name': space_user_org_info.name,
        'handler_organization_fullname': space_user_org_info.fullname,
        'type': action_type,
        'start_date': new Date(),
        'finish_date': new Date(),
        'is_read': false,
        'judge': 'submitted',
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'forward_space': space_id,
        'forward_instance': new_ins_id,
        'description': description,
        'from_approve_id': from_approve_id
      };
      forward_approves.push(appr);
      new_ins_ids.push(new_ins_id);
      pushManager.send_message_to_specifyUser("current_user", user_id);
    });

    set_obj.modified = new Date();
    set_obj.modified_by = current_user_id;
    var r = db.instances.update({
      _id: instance_id,
      "traces._id": current_trace_id
    }, {
      $set: set_obj,
      $addToSet: {
        'traces.$.approves': {
          $each: forward_approves
        }
      }
    });

    if (r) {
      _.each(current_trace.approves, function (a, idx) {
        if (a._id == from_approve_id) {
          var update_read = {};
          update_read["traces.$.approves." + idx + ".read_date"] = new Date();
          db.instances.update({
            _id: instance_id,
            "traces._id": current_trace_id
          }, {
            $set: update_read
          });
        }
      });
    }

    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        new_ins_ids: new_ins_ids
      }
    });
  } catch (e) {
    console.error(e.stack);
    JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add('get', '/api/workflow/instance/:instanceId', function (req, res, next) {
  var box, current_user_id, current_user_info, e, flowId, ins, insId, permissions, redirectTo, redirectToUrl, ref, ref1, ref2, req_async, space, spaceId;

  try {
    current_user_info = uuflowManager.check_authorization(req, res);
    current_user_id = current_user_info._id;
    req_async = _.has(req.query, 'async');
    insId = req.params.instanceId;
    ins = db.instances.findOne(insId, {
      fields: {
        space: 1,
        flow: 1,
        state: 1,
        inbox_users: 1,
        cc_users: 1,
        outbox_users: 1,
        submitter: 1,
        applicant: 1
      }
    });

    if (!ins) {
      throw new Meteor.Error('error', 'instanceId is wrong or instance not exists.');
    }

    spaceId = ins.space;
    flowId = ins.flow;

    if (db.space_users.find({
      space: spaceId,
      user: current_user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'user is not belong to this space.');
    }

    box = '';

    if (((ref = ins.inbox_users) != null ? ref.includes(current_user_id) : void 0) || ((ref1 = ins.cc_users) != null ? ref1.includes(current_user_id) : void 0)) {
      box = 'inbox';
    } else if ((ref2 = ins.outbox_users) != null ? ref2.includes(current_user_id) : void 0) {
      box = 'outbox';
    } else if (ins.state === 'draft' && ins.submitter === current_user_id) {
      box = 'draft';
    } else if (ins.state === 'pending' && (ins.submitter === current_user_id || ins.applicant === current_user_id)) {
      box = 'pending';
    } else if (ins.state === 'completed' && ins.submitter === current_user_id) {
      box = 'completed';
    } else {
      permissions = permissionManager.getFlowPermissions(flowId, current_user_id);
      space = db.spaces.findOne(spaceId, {
        fields: {
          admins: 1
        }
      });

      if (!permissions.includes("admin") && !space.admins.includes(current_user_id)) {
        throw new Meteor.Error('error', "no permission.");
      }

      box = 'monitor';
    }

    redirectTo = "workflow/space/" + spaceId + "/" + box + "/" + insId;
    redirectToUrl = Meteor.absoluteUrl(redirectTo);

    if (req_async) {
      return res.status(200).send({
        "status": 302,
        "redirect": redirectTo
      });
    } else {
      res.setHeader("Location", redirectToUrl);
      res.writeHead(302);
      res.end();
    }
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_pending.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_pending.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/pending 获取待办文件

@apiDescription 获取当前用户的待办事项列表

@apiName getInbox

@apiGroup Workflow

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
	{
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
	{
		"status": "success",
		"data": [
			{
				"id": "g7wokXNkR9yxHvA4D",
				"start_date": "2017-11-23T02:28:53.164Z",
				"flow_name": "正文流程",
				"space_name": "审批王",
				"name": "正文流程 1",
				"applicant_name": null,
				"applicant_organization_name": "审批王",
				"submit_date": "2017-07-25T06:36:48.492Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-11-23T02:28:53.164Z",
				"is_read": false,
				"values": {}
			},
			{
				"id": "WqKSrWQoywgJaMp9k",
				"start_date": "2017-08-17T07:38:35.420Z",
				"flow_name": "正文\n",
				"space_name": "审批王",
				"name": "正文\n 1",
				"applicant_name": "殷亮辉",
				"applicant_organization_name": "审批王",
				"submit_date": "2017-06-27T10:26:19.468Z",
				"step_name": "开始",
				"space_id": "kfDsMv7gBewmGXGEL",
				"modified": "2017-08-17T07:38:35.421Z",
				"is_read": true,
				"values": {}
			}
		]
	}
 */JsonRoutes.add('get', '/api/workflow/open/pending', function (req, res, next) {
  var attach, e, is_read, limit, no_limit_count, query, ref, ref1, ref2, ref3, ref4, ref5, result_instances, space, space_id, space_names, special_user_id, start_date, u, uid, user_id, userid, username, workflow_categories;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    space_id = req.headers['x-space-id'] || ((ref = req.query) != null ? ref.spaceId : void 0);

    if (!space_id) {
      throw new Meteor.Error('error', 'need space_id');
    }

    user_id = req.userId;

    if (!user_id) {
      throw new Meteor.Error('error', 'Not logged in');
    }

    if (db.users.find({
      _id: user_id
    }).count() === 0) {
      throw new Meteor.Error('error', 'can not find user');
    }

    limit = ((ref1 = req.query) != null ? ref1.limit : void 0) || 500;
    limit = parseInt(limit);
    username = (ref2 = req.query) != null ? ref2.username : void 0;
    userid = (ref3 = req.query) != null ? ref3.userid : void 0;
    attach = (ref4 = req.query) != null ? ref4.attach : void 0;
    workflow_categories = (ref5 = req.query) != null ? ref5.workflow_categories : void 0;
    space = uuflowManager.getSpace(space_id);
    special_user_id;

    if (space.admins.includes(user_id)) {
      if (userid) {
        if (db.users.find({
          _id: userid
        }).count() < 1) {
          throw new Meteor.Error('error', "can not find user by userid: " + userid);
        }

        special_user_id = userid;
      } else if (username) {
        u = db.users.findOne({
          username: username
        }, {
          fields: {
            _id: 1
          }
        });

        if (_.isEmpty(u)) {
          throw new Meteor.Error('error', "can not find user by username: " + username);
        }

        special_user_id = u._id;
      }
    }

    result_instances = new Array();
    is_read = false;
    start_date = '';
    uid = user_id;
    query = {
      $or: [{
        inbox_users: user_id
      }, {
        cc_users: user_id
      }]
    };

    if (special_user_id) {
      uid = special_user_id;
      query = {
        space: space_id,
        $or: [{
          inbox_users: special_user_id
        }, {
          cc_users: special_user_id
        }]
      };
    }

    if (workflow_categories) {
      query.category = {
        $in: workflow_categories.split(',')
      };
    }

    space_names = {};
    space_names[space._id] = space.name;

    if (limit > 0) {
      db.instances.find(query, {
        sort: {
          modified: -1
        },
        limit: limit
      }).forEach(function (i) {
        var h, ref6, ref7;

        if ((ref6 = i.inbox_users) != null ? ref6.includes(uid) : void 0) {
          _.each(i.traces, function (t) {
            if (t.is_finished === false) {
              return _.each(t.approves, function (a) {
                if (a.user === uid && a.type !== 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        } else {
          _.each(i.traces, function (t) {
            if (!start_date && t.approves) {
              return _.each(t.approves, function (a) {
                if (!start_date && a.user === uid && a.type === 'cc' && !a.is_finished) {
                  is_read = a.is_read;
                  return start_date = a.start_date;
                }
              });
            }
          });
        }

        if (!space_names[i.space]) {
          space_names[i.space] = (ref7 = db.spaces.findOne(i.space, {
            fields: {
              name: 1
            }
          })) != null ? ref7.name : void 0;
        }

        h = new Object();
        h["id"] = i["_id"];
        h["start_date"] = start_date;
        h["flow_name"] = i.flow_name;
        h["space_name"] = space_names[i.space];
        h["name"] = i["name"];
        h["applicant_name"] = i["applicant_name"];
        h["applicant_organization_name"] = i["applicant_organization_name"];
        h["submit_date"] = i["submit_date"];
        h["step_name"] = i.current_step_name;
        h["space_id"] = i.space;
        h["modified"] = i["modified"];
        h["is_read"] = is_read;
        h["values"] = i["values"];

        if (attach === 'true') {
          h.attachments = cfs.instances.find({
            'metadata.instance': i._id,
            'metadata.current': true,
            "metadata.is_private": {
              $ne: true
            }
          }, {
            fields: {
              copies: 0
            }
          }).fetch();
        }

        return result_instances.push(h);
      });
    }

    no_limit_count = db.instances.find(query).count();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result_instances,
        count: no_limit_count
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.reason
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"export_table_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/export_table_template.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies;
Cookies = require("cookies");
Meteor.startup(function () {
  return WebApp.connectHandlers.use("/api/workflow/export/talbe_template", function (req, res, next) {
    var authToken, cookies, data, fileName, flow, flowId, form, ref, ref1, space, userId;
    cookies = new Cookies(req, res);

    if (req.body) {
      userId = req.body["X-User-Id"];
      authToken = req.body["X-Auth-Token"];
    }

    if (!userId || !authToken) {
      userId = cookies.get("X-User-Id");
      authToken = cookies.get("X-Auth-Token");
    }

    if (!(userId && authToken)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Missing X-Auth-Token",
        "success": false
      }));
      return;
    }

    flowId = (ref = req.query) != null ? ref.flow : void 0;
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        space: 1,
        form: 1,
        name: 1
      }
    });
    form = db.forms.findOne({
      _id: flow.form
    }, {
      fields: {
        space: 1,
        "current._id": 1
      }
    });

    if (_.isEmpty(flow)) {
      res.writeHead(401);
      res.end(JSON.stringify({
        "error": "Validate Request -- Invalid formId",
        "success": false
      }));
      return;
    } else {
      if (!Steedos.isSpaceAdmin(flow.space, userId)) {
        res.writeHead(401);
        res.end(JSON.stringify({
          "error": "Validate Request -- No permission",
          "success": false
        }));
        return;
      }

      space = db.spaces.findOne(flow.space, {
        fields: {
          is_paid: 1
        }
      });

      if (!(space != null ? space.is_paid : void 0)) {
        JsonRoutes.sendResult(res, {
          code: 404,
          data: {
            "error": "Validate Request -- Non-paid space.",
            "success": false
          }
        });
        return;
      }
    }

    data = TemplateManager.handleTableTemplate({
      form: flow.form,
      form_version: form != null ? (ref1 = form.current) != null ? ref1._id : void 0 : void 0
    }, true);
    fileName = flow.name;
    res.setHeader('Content-type', 'application/x-msdownload');
    res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(fileName) + '.html');
    return res.end(data);
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_drafts.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_drafts.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/drafts 新建申请单

@apiName createInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "applicant": 申请人Id,
    "values": {
        "fields1" : 字段值,
        "fields2" : 字段值,
        ...
    }
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}

@apiErrorExample {json} error-Response:
{
    "status": "error",
    "data": {...}
}
 */JsonRoutes.add('post', '/api/workflow/open/drafts', function (req, res, next) {
  var applicant, applicantInfo, applicant_id, applicant_username, approve, approves, current_user_info, e, flow, flow_id, hashData, instance_from_client, new_ins, new_ins_id, space_id, space_user, space_user_org_info, trace, traces, user_id;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    user_id = req.userId;
    current_user_info = db.users.findOne({
      _id: user_id
    });
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header x_space_id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user_info._id);
    hashData = req.body;

    if (!hashData["flow"]) {
      throw new Meteor.Error('error', 'flow is null');
    }

    flow_id = hashData["flow"];
    applicant_id = hashData["applicant"];
    applicant_username = hashData["applicant_username"];
    instance_from_client = new Object();
    flow = db.flows.findOne({
      _id: flow_id
    }, {
      fields: {
        space: 1,
        'current._id': 1
      }
    });

    if (!flow) {
      throw new Meteor.Error('error', 'flow is not exists');
    }

    if (space_id !== flow.space) {
      throw new Meteor.Error('error', 'flow is not belong to this space');
    }

    if (db.space_users.find({
      space: space_id,
      user: current_user_info._id
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is not a member of this space');
    }

    instance_from_client["space"] = space_id;
    instance_from_client["flow"] = flow_id;
    instance_from_client["flow_version"] = flow.current._id;
    applicant = null;

    if (applicant_id || applicant_username) {
      if (applicant_id) {
        applicant = db.users.findOne({
          _id: applicant_id
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant is wrong');
        }
      } else if (applicant_username) {
        applicant = db.users.findOne({
          username: applicant_username
        }, {
          fields: {
            name: 1
          }
        });

        if (!applicant) {
          throw new Meteor.Error('error', 'applicant_username is wrong');
        }
      }

      space_user = db.space_users.findOne({
        space: space_id,
        user: applicant._id
      });

      if (!space_user) {
        throw new Meteor.Error('error', 'applicant is not a member of this space');
      }

      if (space_user.user_accepted !== true) {
        throw new Meteor.Error('error', 'applicant is disabled in this space');
      }

      space_user_org_info = uuflowManager.getSpaceUserOrgInfo(space_user);
      instance_from_client["applicant"] = applicant._id;
      instance_from_client["applicant_name"] = applicant.name;
      instance_from_client["applicant_organization"] = space_user_org_info["organization"];
      instance_from_client["applicant_organization_fullname"] = space_user_org_info["organization_fullname"];
      instance_from_client["applicant_organization_name"] = space_user_org_info["organization_name"];
    }

    applicantInfo = applicant || current_user_info;
    traces = [];
    trace = new Object();
    approves = [];
    approve = new Object();
    approve["values"] = hashData["values"];
    approves.push(approve);
    trace["approves"] = approves;
    traces.push(trace);
    instance_from_client["traces"] = traces;
    instance_from_client["inbox_users"] = [applicantInfo._id];
    new_ins_id = uuflowManager.create_instance(instance_from_client, applicantInfo);
    new_ins = db.instances.findOne(new_ins_id);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: new_ins
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {get} /api/workflow/open/get/:ins_id 查看申请单详情

@apiName getInstance

@apiGroup Workflow

@apiPermission 工作区的管理员

@apiParam {String} ins_id 申请单Id
@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiSuccessExample {json} Success-Response:
{
    "status": "success",
    "data": {instance}
}
 */JsonRoutes.add('get', '/api/workflow/open/get/:ins_id', function (req, res, next) {
  var current_user, e, ins_id, instance, perm_users, permissions, space, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = db.instances.findOne(ins_id);

    if (!instance) {
      throw new Meteor.Error('error', 'can not find instance');
    }

    if (db.space_users.find({
      space: instance.space,
      user: current_user
    }).count() === 0) {
      throw new Meteor.Error('error', 'auth_token is wrong');
    }

    perm_users = new Array();
    perm_users.push(instance.submitter);
    perm_users.push(instance.applicant);

    if (instance.outbox_users) {
      perm_users = perm_users.concat(instance.outbox_users);
    }

    if (instance.inbox_users) {
      perm_users = perm_users.concat(instance.inbox_users);
    }

    space = db.spaces.findOne({
      _id: instance.space
    }, {
      fields: {
        admins: 1
      }
    });
    perm_users = perm_users.concat(space.admins);
    permissions = permissionManager.getFlowPermissions(instance.flow, current_user);

    if (!perm_users.includes(current_user) && !permissions.includes("monitor") && !permissions.includes("admin")) {
      throw new Meteor.Error('error', 'no permission');
    }

    instance.attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instance
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_submit.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_submit.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/submit/:ins_id 提交申请单

@apiDescription 暂不支持开始节点下一节点为条件的情况

@apiName submitInstance

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/submit/:ins_id', function (req, res, next) {
  var current_user, current_user_info, e, flow, form, ins_id, instance, nextSteps, next_step_id, next_user_ids, r, require_but_empty_fields, result, space_id, step, submitter, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    instance = uuflowManager.getInstance(ins_id);
    uuflowManager.isInstanceDraft(instance);

    if (space_id !== instance["space"]) {
      throw new Meteor.Error('error', 'instance is not belong to this space');
    }

    values = instance["traces"][0]["approves"][0].values;
    form = uuflowManager.getForm(instance.form);
    require_but_empty_fields = uuflowManager.checkValueFieldsRequire(values, form, instance.form_version);

    if (require_but_empty_fields.length > 0) {
      if (require_but_empty_fields.length > 1) {
        throw new Meteor.Error('error', 'fields <' + require_but_empty_fields.join(",") + '> are required');
      } else if (require_but_empty_fields.length = 1) {
        throw new Meteor.Error('error', 'field <' + require_but_empty_fields.join(",") + '> is required');
      }
    }

    flow = uuflowManager.getFlow(instance.flow);
    step = uuflowManager.getStep(instance, flow, instance["traces"][0].step);
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, "submitted");

    if (nextSteps.length < 1) {
      throw new Meteor.Error('error', 'can not find next steps');
    }

    if (nextSteps.length > 1) {
      throw new Meteor.Error('error', 'next step not uniq');
    }

    next_step_id = nextSteps[0];
    next_user_ids = getHandlersManager.getHandlers(ins_id, next_step_id) || [];

    if (next_user_ids.length > 1) {
      throw new Meteor.Error('error', 'next step handler not uniq');
    }

    instance["traces"][0]["approves"][0]["next_steps"] = [{
      'step': next_step_id,
      'users': next_user_ids
    }];
    result = new Object();
    submitter = db.users.findOne(instance.submitter);

    if (!submitter) {
      throw new Meteor.Error('error', 'can not find submitter');
    }

    r = uuflowManager.submit_instance(instance, submitter);

    if (r.alerts) {
      result = r;
    } else {
      result = db.instances.findOne(ins_id);

      if (result) {
        result.attachments = cfs.instances.find({
          'metadata.instance': ins_id,
          'metadata.current': true,
          "metadata.is_private": {
            $ne: true
          }
        }, {
          fields: {
            copies: 0
          }
        }).fetch();
      }
    }

    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_save.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_save.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {put} /api/workflow/open/save/:ins_id 暂存申请单

@apiName saveInstances

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
    {
		"X-Space-Id": "wsw1re12TdeP223sC"
	}

@apiSuccessExample {json} Success-Response:
    {
		"status": "success",
		"data": {instance}
	}
 */JsonRoutes.add('put', '/api/workflow/open/save/:ins_id', function (req, res, next) {
  var current_step, current_trace, current_user, current_user_info, e, flow, ins_id, instance, result, setObj, space_id, values;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    values = req.body;

    if (!values) {
      throw new Meteor.Error('error', 'need values');
    }

    current_trace = null;
    setObj = new Object();
    instance = uuflowManager.getInstance(ins_id);
    flow = uuflowManager.getFlow(instance.flow);

    _.each(instance.traces, function (t) {
      if (t.is_finished !== true) {
        return current_trace = t;
      }
    });

    current_step = uuflowManager.getStep(instance, flow, current_trace.step);

    if (current_step.step_type === "counterSign") {
      throw new Meteor.Error('error', '会签步骤不能修改表单值');
    }

    _.each(current_trace.approves, function (a) {
      if (a.is_finished !== true && a.type !== "cc") {
        return a.values = values;
      }
    });

    setObj.modified = new Date();
    setObj["traces.$.approves"] = current_trace.approves;
    db.instances.update({
      _id: ins_id,
      'traces._id': current_trace._id
    }, {
      $set: setObj
    });
    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_get_by_stepname.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_get_by_stepname.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
@api {post} /api/workflow/open/getbystepname 根据步骤名称获取申请单

@apiName getInstanceByStepName

@apiGroup Workflow

@apiPermission 工作区管理员

@apiParam {String} access_token User API Token

@apiHeader {String} X-Space-Id	工作区Id

@apiHeaderExample {json} Header-Example:
{
	"X-Space-Id": "wsw1re12TdeP223sC"
}

@apiParamExample {json} Request Payload:
{
    "flow": 流程Id,
    "stepname": 步骤名称
}

@apiSuccessExample {json} Success-Response:
{
	"status": "success",
	"data": [
		{
			instance
		},
		{
			instance
		}
	]
}
 */JsonRoutes.add('post', '/api/workflow/open/getbystepname', function (req, res, next) {
  var current_user, current_user_info, e, flow, hashData, instances, space_id, stepname;

  try {
    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body;
    stepname = hashData["stepname"];
    flow = hashData["flow"];

    if (!stepname) {
      throw new Meteor.Error('error', 'need stepname');
    }

    if (!flow) {
      throw new Meteor.Error('error', 'need flow');
    }

    instances = db.instances.find({
      space: space_id,
      flow: flow,
      state: 'pending',
      traces: {
        $elemMatch: {
          is_finished: false,
          name: stepname
        }
      }
    }, {
      fields: {
        inbox_uers: 0,
        cc_users: 0,
        outbox_users: 0,
        attachments: 0,
        traces: 0
      }
    }).fetch();
    instances.forEach(function (instance) {
      return instance.attachments = cfs.instances.find({
        'metadata.instance': instance._id,
        'metadata.current': true,
        "metadata.is_private": {
          $ne: true
        }
      }, {
        fields: {
          copies: 0
        }
      }).fetch();
    });
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: instances
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_open_cfs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_open_cfs.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Content-Type：application/json
form-data 格式:
fd = new FormData;
fd.append("file", file);

fd.append("is_private", false);

if (isAddVersion) {
	fd.append("isAddVersion", isAddVersion);
	fd.append("parent", attach_parent_id);
}

if (isMainAttach) {
	fd.append("main", true);
}
 */JsonRoutes.add('post', '/api/workflow/open/cfs/:ins_id', function (req, res, next) {
  var approve_id, current_user, current_user_info, e, ins_id, instance, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能上传');
    }

    approve_id = instance.traces[0].approves[0]._id;
    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    return JsonRoutes.parseFiles(req, res, function () {
      var collection, newFile;
      collection = cfs.instances;

      if (req.files && req.files[0]) {
        if (req.files[0].data.length > 100 * 1024 * 1024) {
          JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              errors: [{
                errorMessage: "超过上传附件大小限制(100M)"
              }]
            }
          });
          return;
        }

        newFile = new FS.File();
        return newFile.attachData(req.files[0].data, {
          type: req.files[0].mimeType
        }, function (err) {
          var body, e, fileObj, filename, metadata, parent, r, result, size;
          filename = req.files[0].filename;

          if (["image.jpg", "image.gif", "image.jpeg", "image.png"].includes(filename.toLowerCase())) {
            filename = "image-" + moment(new Date()).format('YYYYMMDDHHmmss') + "." + filename.split('.').pop();
          }

          body = req.body;
          body['owner'] = instance.submitter;
          body['owner_name'] = instance.submitter_name;
          body['space'] = space_id;
          body['instance'] = ins_id;
          body['approve'] = approve_id;

          try {
            if (body && (body['upload_from'] === "IE" || body['upload_from'] === "node")) {
              filename = decodeURIComponent(filename);
            }
          } catch (error) {
            e = error;
            console.error(filename);
            console.error(e);
            filename = filename.replace(/%/g, "-");
          }

          newFile.name(filename);

          if (body && body['owner'] && body['owner_name'] && body['space'] && body['instance'] && body['approve']) {
            parent = '';
            metadata = {
              owner: body['owner'],
              owner_name: body['owner_name'],
              space: body['space'],
              instance: body['instance'],
              approve: body['approve'],
              current: true
            };

            if (body["is_private"] && body["is_private"].toLocaleLowerCase() === "true") {
              metadata.is_private = true;
            } else {
              metadata.is_private = false;
            }

            if (body['main'] === "true") {
              metadata.main = true;
            }

            if (body['isAddVersion'] && body['parent']) {
              parent = body['parent'];
            }

            if (parent) {
              r = collection.update({
                'metadata.parent': parent,
                'metadata.current': true
              }, {
                $unset: {
                  'metadata.current': ''
                }
              });

              if (r) {
                metadata.parent = parent;

                if (body['locked_by'] && body['locked_by_name']) {
                  metadata.locked_by = body['locked_by'];
                  metadata.locked_by_name = body['locked_by_name'];
                }

                newFile.metadata = metadata;
                fileObj = collection.insert(newFile);

                if (body["overwrite"] && body["overwrite"].toLocaleLowerCase() === "true") {
                  collection.remove({
                    'metadata.instance': body['instance'],
                    'metadata.parent': parent,
                    'metadata.owner': body['owner'],
                    'metadata.approve': body['approve'],
                    'metadata.current': {
                      $ne: true
                    }
                  });
                }
              }
            } else {
              newFile.metadata = metadata;
              fileObj = collection.insert(newFile);
              fileObj.update({
                $set: {
                  'metadata.parent': fileObj._id
                }
              });
            }
          } else {
            fileObj = collection.insert(newFile);
          }

          size = fileObj.original.size;

          if (!size) {
            size = 1024;
          }

          result = new Object();
          result = {
            attach_id: fileObj._id,
            size: size
          };
          res.setHeader("x-amz-version-id", fileObj._id);
          return JsonRoutes.sendResult(res, {
            code: 200,
            data: {
              status: "success",
              data: result
            }
          });
        });
      } else {
        JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            errors: [{
              errorMessage: "need file"
            }]
          }
        });
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("delete", "/api/workflow/open/cfs/:ins_id", function (req, res, next) {
  var attach_id, collection, current_user, current_user_info, e, file, hashData, ins_id, instance, result, space_id;

  try {
    ins_id = req.params.ins_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    instance = uuflowManager.getInstance(ins_id);

    if (instance.state !== "draft") {
      throw new Meteor.Error('error', '申请单草稿状态时才能删除附件');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    hashData = req.body || {};
    attach_id = hashData["attach_id"];

    if (!attach_id) {
      throw new Meteor.Error('error', 'can not find attach_id');
    }

    collection = cfs.instances;
    file = collection.findOne({
      _id: attach_id,
      'metadata.instance': ins_id
    });

    if (file) {
      file.remove();
    } else {
      throw new Meteor.Error('error', '此附件不属于此申请单，或已被删除');
    }

    result = new Object();
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        status: "success",
        data: result
      }
    });
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
JsonRoutes.add("get", "/api/workflow/open/cfs/:attach_id", function (req, res, next) {
  var attach_id, current_user, current_user_info, e, space_id;

  try {
    attach_id = req.params.attach_id;

    if (!Steedos.APIAuthenticationCheck(req, res)) {
      return;
    }

    current_user = req.userId;
    space_id = req.headers['x-space-id'];

    if (!space_id) {
      throw new Meteor.Error('error', 'need header X_Space_Id');
    }

    current_user_info = db.users.findOne(current_user);

    if (!current_user_info) {
      throw new Meteor.Error('error', 'can not find user');
    }

    uuflowManager.getSpace(space_id);
    uuflowManager.isSpaceAdmin(space_id, current_user);
    res.statusCode = 302;
    res.setHeader("Location", Steedos.absoluteUrl("api/files/instances/") + attach_id + "?download=true");
    return res.end();
  } catch (error) {
    e = error;
    console.error(e.stack);
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [{
          errorMessage: e.message
        }]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_refill.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_refill", function (req, res, next) {
  var approve, columns, forward_ins, forward_ins_values, original_ins, original_ins_fields, original_ins_form, original_ins_id, original_subtable_fields, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, row_data, subTable, table_data, trace, traces;
  console.log("=========回填子表==========");
  console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
  console.log("=========分发回填的列==========");
  console.log("req?.query?.column", req != null ? (ref1 = req.query) != null ? ref1.column : void 0 : void 0);
  columns = req != null ? (ref2 = req.query) != null ? ref2.column.split(';') : void 0 : void 0;
  console.log("columns", columns);
  forward_ins = req != null ? (ref3 = req.body) != null ? ref3.instance : void 0 : void 0;
  subTable = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

  if ((forward_ins != null ? forward_ins.state : void 0) === "completed" && (forward_ins != null ? (ref5 = forward_ins.distribute_from_instances) != null ? ref5.length : void 0 : void 0) > 0 && subTable && columns) {
    forward_ins_values = forward_ins != null ? forward_ins.values : void 0;
    original_ins_id = _.last(forward_ins != null ? forward_ins.distribute_from_instances : void 0);
    original_ins = db.instances.findOne(original_ins_id);
    original_ins_form = db.forms.findOne(original_ins != null ? original_ins.form : void 0);
    original_ins_fields = [];
    original_subtable_fields = [];
    console.log("original_ins_form?.current?._id", original_ins_form != null ? (ref6 = original_ins_form.current) != null ? ref6._id : void 0 : void 0);
    console.log("original_ins?.form_version", original_ins != null ? original_ins.form_version : void 0);

    if ((original_ins != null ? original_ins.form_version : void 0) === (original_ins_form != null ? (ref7 = original_ins_form.current) != null ? ref7._id : void 0 : void 0)) {
      original_ins_fields = (ref8 = original_ins_form.current) != null ? ref8.fields : void 0;
      original_ins_fields.forEach(function (original_ins_field) {
        console.log("original_ins_field", original_ins_field != null ? original_ins_field.code : void 0);

        if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
          return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
        }
      });
    } else {
      if ((original_ins_form != null ? (ref9 = original_ins_form.historys) != null ? ref9.length : void 0 : void 0) > 0) {
        original_ins_form.historys.forEach(function (oh) {
          if ((original_ins != null ? original_ins.form_version : void 0) === oh._id) {
            original_ins_fields = oh != null ? oh.fields : void 0;
            return original_ins_fields.forEach(function (original_ins_field) {
              if ((original_ins_field != null ? original_ins_field.code : void 0) === subTable && (original_ins_field != null ? original_ins_field.type : void 0) === 'table') {
                return original_subtable_fields = original_ins_field != null ? original_ins_field.fields : void 0;
              }
            });
          }
        });
      }
    }

    console.log("original_subtable_fields", original_subtable_fields != null ? original_subtable_fields.length : void 0);

    if (original_subtable_fields) {
      traces = original_ins != null ? original_ins.traces : void 0;
      trace = traces[traces.length - 1];
      approve = trace != null ? trace.approves[0] : void 0;
      table_data = (approve != null ? approve.values[subTable] : void 0) || [];
      row_data = {};
      columns.forEach(function (column) {
        return row_data[column] = forward_ins_values[column] || "";
      });

      if (row_data && row_data !== {}) {
        table_data.push(row_data);
        traces[traces.length - 1].approves[0].values[subTable] = table_data;
        console.log(traces[traces.length - 1].approves[0].values[subTable]);
        db.instances.update(original_ins_id, {
          $set: {
            'traces': traces
          }
        });
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'success': '回填成功'
          }
        });
      } else {
        return JsonRoutes.sendResult(res, {
          code: 200,
          data: {
            'info': '回填数据为空'
          }
        });
      }
    } else {
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'error': '原申请单无相关子表'
        }
      });
    }
  } else {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'success': '申请单未结束'
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_workflow_forward_table_refill.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_workflow_forward_table_refill.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/forward_table_refill", function (req, res, next) {
  var a_table, a_table_values, approve, column_list, columns, d_ins, d_ins_fields, d_ins_form, d_ins_values, d_match_col, d_match_col_field, d_match_col_fields, d_subtable_fields, d_table, d_table_values, e, o_ins, o_ins_fields, o_ins_form, o_ins_id, o_match_col, o_match_col_field, o_match_col_fields, o_subtable_fields, o_table, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref3, ref4, ref5, ref6, ref7, ref8, ref9, table_data, trace, traces;

  try {
    console.log("=========原表子表==========");
    console.log("req?.query?.oTable", req != null ? (ref = req.query) != null ? ref.oTable : void 0 : void 0);
    console.log("=========现表子表==========");
    console.log("req?.query?.dTable", req != null ? (ref1 = req.query) != null ? ref1.dTable : void 0 : void 0);
    console.log("=========原表单的子表匹配列==========");
    console.log("req?.query?.oMatchCol", req != null ? (ref2 = req.query) != null ? ref2.oMatchCol : void 0 : void 0);
    console.log("=========现表单的子表匹配列==========");
    console.log("req?.query?.dMatchCol", req != null ? (ref3 = req.query) != null ? ref3.dMatchCol : void 0 : void 0);
    console.log("=========需要回填的列==========");
    console.log("req?.query?.refillCol", req != null ? (ref4 = req.query) != null ? ref4.refillCol : void 0 : void 0);
    d_ins = req != null ? (ref5 = req.body) != null ? ref5.instance : void 0 : void 0;

    if ((d_ins != null ? d_ins.state : void 0) === "completed") {
      if (req != null ? (ref6 = req.query) != null ? ref6.oTable : void 0 : void 0) {
        o_table = req != null ? (ref7 = req.query) != null ? ref7.oTable : void 0 : void 0;

        if (req != null ? (ref8 = req.query) != null ? ref8.dTable : void 0 : void 0) {
          d_table = req != null ? (ref9 = req.query) != null ? ref9.dTable : void 0 : void 0;
        } else {
          d_table = o_table;
        }

        if (req != null ? (ref10 = req.query) != null ? ref10.aTable : void 0 : void 0) {
          a_table = req != null ? (ref11 = req.query) != null ? ref11.aTable : void 0 : void 0;
        }

        if (req != null ? (ref12 = req.query) != null ? ref12.oMatchCol : void 0 : void 0) {
          o_match_col = req != null ? (ref13 = req.query) != null ? ref13.oMatchCol : void 0 : void 0;

          if (req != null ? (ref14 = req.query) != null ? ref14.dMatchCol : void 0 : void 0) {
            d_match_col = req != null ? (ref15 = req.query) != null ? ref15.dMatchCol : void 0 : void 0;
          } else {
            d_match_col = o_match_col;
          }

          columns = (req != null ? (ref16 = req.query) != null ? ref16.refillCol.split(';') : void 0 : void 0) || [];
          console.log("columns", columns);

          if (columns || columns.length < 1) {
            console.log("======================");
            console.log(d_table, o_match_col, columns);
            d_ins_values = d_ins != null ? d_ins.values : void 0;
            o_ins_id = _.last(d_ins != null ? d_ins.distribute_from_instances : void 0);
            o_ins = db.instances.findOne(o_ins_id);
            o_ins_form = db.forms.findOne(o_ins != null ? o_ins.form : void 0);
            d_ins_form = db.forms.findOne(d_ins != null ? d_ins.form : void 0);
            o_ins_fields = [];
            o_subtable_fields = [];
            d_ins_fields = [];
            d_subtable_fields = [];
            column_list = [];
            d_table_values = [];

            if ((o_ins != null ? o_ins.form_version : void 0) === (o_ins_form != null ? (ref17 = o_ins_form.current) != null ? ref17._id : void 0 : void 0)) {
              o_ins_fields = o_ins_form != null ? (ref18 = o_ins_form.current) != null ? ref18.fields : void 0 : void 0;
              o_ins_fields.forEach(function (o_ins_field) {
                if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                  return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                }
              });
            } else {
              if ((o_ins_form != null ? (ref19 = o_ins_form.historys) != null ? ref19.length : void 0 : void 0) > 0) {
                o_ins_form.historys.forEach(function (oh) {
                  if ((o_ins != null ? o_ins.form_version : void 0) === oh._id) {
                    o_ins_fields = oh != null ? oh.fields : void 0;
                    return o_ins_fields.forEach(function (o_ins_field) {
                      if ((o_ins_field != null ? o_ins_field.type : void 0) === 'table' && (o_ins_field != null ? o_ins_field.code : void 0) === o_table) {
                        return o_subtable_fields = o_ins_field != null ? o_ins_field.fields : void 0;
                      }
                    });
                  }
                });
              }
            }

            if ((d_ins != null ? d_ins.form_version : void 0) === (d_ins_form != null ? (ref20 = d_ins_form.current) != null ? ref20._id : void 0 : void 0)) {
              d_ins_fields = d_ins_form != null ? (ref21 = d_ins_form.current) != null ? ref21.fields : void 0 : void 0;
              d_ins_fields.forEach(function (d_ins_field) {
                if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                  return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                }
              });
            } else {
              if ((d_ins_form != null ? (ref22 = d_ins_form.historys) != null ? ref22.length : void 0 : void 0) > 0) {
                d_ins_form.historys.forEach(function (dh) {
                  if ((d_ins != null ? d_ins.form_version : void 0) === dh._id) {
                    d_ins_fields = dh != null ? dh.fields : void 0;
                    return d_ins_fields.forEach(function (d_ins_field) {
                      if ((d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === d_table || a_table && (d_ins_field != null ? d_ins_field.type : void 0) === 'table' && (d_ins_field != null ? d_ins_field.code : void 0) === a_table) {
                        return d_subtable_fields = d_subtable_fields.concat(d_ins_field != null ? d_ins_field.fields : void 0);
                      }
                    });
                  }
                });
              }
            }

            if (o_subtable_fields.length === 0) {
              console.log("o_subtable_fields", o_subtable_fields);
              throw new Meteor.Error('forward table refill error!', '原申请单无对应子表');
            }

            if (d_subtable_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单无对应子表');
            }

            d_table_values = (d_ins != null ? d_ins.values[d_table] : void 0) || [];

            if (a_table) {
              a_table_values = (d_ins != null ? d_ins.values[a_table] : void 0) || [];

              if (a_table_values && (a_table_values != null ? a_table_values.length : void 0) === (d_table_values != null ? d_table_values.length : void 0)) {
                a_table_values.forEach(function (a_row, index) {
                  var key, results, value;
                  results = [];

                  for (key in meteorBabelHelpers.sanitizeForInObject(a_row)) {
                    value = a_row[key];
                    results.push(d_table_values[index][key] = value);
                  }

                  return results;
                });
              }
            }

            if (d_table_values.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表数据为空');
            }

            o_match_col_fields = o_subtable_fields.filter(function (m) {
              return m.code === o_match_col;
            });
            d_match_col_fields = d_subtable_fields.filter(function (m) {
              return m.code === d_match_col;
            });

            if (o_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '原申请单子表无对应匹配列');
            }

            if (d_match_col_fields.length === 0) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应匹配列');
            }

            o_match_col_field = o_match_col_fields[0];
            d_match_col_field = d_match_col_fields[0];

            if ((o_match_col_field != null ? o_match_col_field.type : void 0) !== (d_match_col_field != null ? d_match_col_field.type : void 0)) {
              throw new Meteor.Error('forward table refill error!', '分发的申请单和原申请单子表的匹配列字段不一致');
            }

            columns.forEach(function (column) {
              var col, cols, d_col, d_col_fields, o_col, o_col_fields;
              cols = column.split('-') || [];

              if (cols.length === 2) {
                o_col = cols[0];
                d_col = cols[1];
                o_col_fields = o_subtable_fields.filter(function (m) {
                  return m.code === o_col;
                });
                d_col_fields = d_subtable_fields.filter(function (m) {
                  return m.code === d_col;
                });

                if (o_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '原申请单子表无对应回填列');
                }

                if (d_col_fields.length === 0) {
                  throw new Meteor.Error('forward table refill error!', '分发的申请单子表无对应回填列');
                }

                if ((o_col_fields != null ? o_col_fields.type : void 0) !== (d_col_fields != null ? d_col_fields.type : void 0)) {
                  throw new Meteor.Error('forward table refill error!', '回填列字段类型不一致');
                }

                col = {
                  o_col: o_col,
                  d_col: d_col
                };
                return column_list.push(col);
              } else {
                throw new Meteor.Error('forward table refill error!', '回填列不匹配');
              }
            });
            traces = o_ins != null ? o_ins.traces : void 0;
            trace = traces[traces.length - 1];
            approve = trace != null ? trace.approves[0] : void 0;
            table_data = (approve != null ? approve.values[o_table] : void 0) || [];
            d_table_values.forEach(function (d_row) {
              var count, has_obj, row_data;
              has_obj = false;
              count = -1;
              table_data.forEach(function (o_row, index) {
                if (o_row[o_match_col] === d_row[d_match_col]) {
                  has_obj = true;
                  return count = index;
                }
              });

              if (has_obj === true) {
                return column_list.forEach(function (col) {
                  return table_data[count][col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
              } else {
                row_data = {};
                row_data[o_match_col] = d_row[d_match_col];
                column_list.forEach(function (col) {
                  return row_data[col != null ? col.o_col : void 0] = d_row[col != null ? col.d_col : void 0];
                });
                return table_data.push(row_data);
              }
            });
            traces[traces.length - 1].approves[0].values = o_ins != null ? o_ins.values : void 0;
            traces[traces.length - 1].approves[0].values[o_table] = table_data;
            db.instances.update(o_ins_id, {
              $set: {
                'traces': traces
              }
            });
            JsonRoutes.sendResult(res, {
              code: 200,
              data: {
                'success': '回填成功'
              }
            });
          } else {
            throw new Meteor.Error('forward table refill error!', 'webhook未配置子表回填列字段 columns 值');
          }
        } else {
          throw new Meteor.Error('forward table refill error!', 'webhook未配置匹配列字段 oMatchCol 值');
        }
      } else {
        throw new Meteor.Error('forward table refill error!', 'webhook未配置原表单子表 oTable 值');
      }
    } else {
      throw new Meteor.Error('forward table refill error!', '申请单未结束');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_sub_table_sort.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_sub_table_sort.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/workflow/sub_table_sort", function (req, res, next) {
  var e, ins, new_table_values, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, sort_col, sub_table, sub_table_values, sum_col;

  try {
    console.log("=========子表==========");
    console.log("req?.query?.subTable", req != null ? (ref = req.query) != null ? ref.subTable : void 0 : void 0);
    console.log("=========子表总分列==========");
    console.log("req?.query?.sumCol", req != null ? (ref1 = req.query) != null ? ref1.sumCol : void 0 : void 0);
    console.log("=========子表排序列==========");
    console.log("req?.query?.sortCol", req != null ? (ref2 = req.query) != null ? ref2.sortCol : void 0 : void 0);
    console.log("=========子表单列需要计算的和==========");
    console.log("req?.query?.singleCols", req != null ? (ref3 = req.query) != null ? ref3.singleCols : void 0 : void 0);
    sub_table = req != null ? (ref4 = req.query) != null ? ref4.subTable : void 0 : void 0;

    if (!sub_table) {
      console.log("=====sub_table======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 subTable 字段');
    }

    sum_col = req != null ? (ref5 = req.query) != null ? ref5.sumCol : void 0 : void 0;

    if (!sum_col) {
      console.log("=====sum_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sumCol 字段');
    }

    sort_col = req != null ? (ref6 = req.query) != null ? ref6.sortCol : void 0 : void 0;

    if (!sort_col) {
      console.log("=====sort_col======");
      throw new Meteor.Error('table sort error!', 'webhook 未配置 sortCol 字段');
    }

    ins = req != null ? (ref7 = req.body) != null ? ref7.instance : void 0 : void 0;
    sub_table_values = ins.values[sub_table];

    if ((sub_table_values != null ? sub_table_values.length : void 0) > 0) {
      var JsonSort = function (jsonArr, key, asc) {
        for (var j = 1, jl = jsonArr.length; j < jl; j++) {
          var temp = jsonArr[j],
              val = Number(temp[key]),
              i = j - 1;

          if (asc == true) {
            while (i >= 0 && Number(jsonArr[i][key]) > val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          } else {
            while (i >= 0 && Number(jsonArr[i][key]) < val) {
              jsonArr[i + 1] = jsonArr[i];
              i = i - 1;
            }
          }

          jsonArr[i + 1] = temp;
        }

        return jsonArr;
      };

      ;
      new_table_values = JsonSort(sub_table_values, sum_col, false);
      console.log("new_table_values", new_table_values);
      new_table_values.forEach(function (obj, index) {
        if (sort_col && obj[sum_col]) {
          return obj[sort_col] = (index + 1).toString();
        }
      });
      console.log("new_table_values", new_table_values);
      ins.values[sub_table] = new_table_values;
      db.instances.update(ins._id, {
        $set: {
          'values': ins.values
        }
      });
      console.log("success");
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          'success': '计算排序成功'
        }
      });
    } else {
      throw new Meteor.Error('table sort error!', '子表数据为空');
    }
  } catch (error) {
    e = error;
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        errors: [e]
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"test_webhook.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/test_webhook.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isDevelopment) {
  JsonRoutes.add('post', '/test/webhook', function (req, res, next) {
    var e, hashData;

    try {
      hashData = req.body;
      console.log('action: ', hashData.action);
      console.log('from_user: ', hashData.from_user);
      console.log('to_users: ', hashData.to_users);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {}
      });
    } catch (error) {
      e = error;
      console.error(e.stack);
      return JsonRoutes.sendResult(res, {
        code: 200,
        data: {
          errors: [{
            errorMessage: e.message
          }]
        }
      });
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_users.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_users.coffee                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/users", function (req, res, next) {
  var current_user, current_user_info, spaceId, spaceUsers, space_user, userIds;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  userIds = req.body.userIds;
  spaceId = req.body.spaceId;
  spaceUsers = [];
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!userIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  spaceUsers = WorkflowManager.getFormulaUserObjects(spaceId, userIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'spaceUsers': spaceUsers
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"api_formula_organizations.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/routes/api_formula_organizations.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("post", "/api/formula/orgs", function (req, res, next) {
  var current_user, current_user_info, orgIds, orgs, spaceId, space_user;
  current_user_info = uuflowManager.check_authorization(req);
  current_user = current_user_info._id;
  orgIds = req.body.orgIds;
  spaceId = req.body.spaceId;
  space_user = db.space_users.findOne({
    user: current_user,
    space: spaceId
  }, {
    fields: {
      _id: 1
    }
  });

  if (!space_user) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '无权限'
      }
    });
  }

  if (!orgIds || !spaceId) {
    return JsonRoutes.sendResult(res, {
      code: 200,
      data: {
        'errors': '缺少参数'
      }
    });
  }

  orgs = WorkflowManager.getFormulaOrgObjects(orgIds);
  return JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      'orgs': orgs
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server":{"methods":{"set_instance_step_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/set_instance_step_approve.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_instance_step_approve: function (ins_id, step_approve, stepsApprovesOptions) {
    var _keys1, _keys2, ins, keys, stepsApproves;

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        state: 1
      }
    });

    if (ins.state !== 'draft') {
      return;
    }

    _keys1 = _.keys(step_approve);
    _keys2 = _.keys(stepsApprovesOptions);
    keys = _.compact(_.union(_keys1, _keys2));
    stepsApproves = {};

    _.each(keys, function (stepId) {
      var stepApproves, stepsApproveOptions;
      stepApproves = step_approve[stepId];
      stepsApproveOptions = stepsApprovesOptions[stepId];

      if (stepApproves) {
        stepsApproves[stepId] = stepApproves;

        if (stepsApproveOptions) {
          if (_.isArray(stepApproves)) {
            stepsApproveOptions = stepApproves.concat(stepsApproveOptions);
          } else {
            stepsApproveOptions.push(stepApproves);
          }
        }
      }

      if (stepsApproveOptions) {
        return stepsApproves[stepId + '_options'] = _.uniq(stepsApproveOptions);
      }
    });

    return db.instances.update({
      _id: ins_id
    }, {
      $set: {
        step_approve: stepsApproves
      }
    });
  },
  set_instance_skip_steps: function (ins_id, stepId, action) {
    if (action === 'pull') {
      return db.instances.update({
        _id: ins_id
      }, {
        $pull: {
          skip_steps: stepId
        }
      });
    } else if (action === 'push') {
      return db.instances.update({
        _id: ins_id
      }, {
        $push: {
          skip_steps: stepId
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_instance_data.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/get_instance_data.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  get_instance_data: function (instance_id, formCached, flowCached) {
    check(instance_id, String);
    check(formCached, Boolean);
    check(flowCached, Boolean);
    var instance = db.instances.findOne(instance_id);
    if (!instance) return {
      instance: null
    };
    if (formCached && flowCached) return {
      instance: instance
    };

    if (!formCached) {
      var form = db.forms.findOne(instance.form);
      var form_version = {};

      if (form.current._id == instance.form_version) {
        form_version = form.current;
      } else {
        form_version = _.where(form.historys, {
          _id: instance.form_version
        })[0];
      }
    }

    if (!flowCached) {
      var flow = db.flows.findOne(instance.flow);
      var flow_version = {};

      if (flow.current._id == instance.flow_version) {
        flow_version = flow.current;
      } else {
        flow_version = _.where(flow.historys, {
          _id: instance.flow_version
        })[0];
      }
    }

    return {
      instance: instance,
      form_version: form_version,
      flow_version: flow_version
    };
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"save_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/save_instance.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  draft_save_instance: function (ins) {
    if (!this.userId) return;
    var result = true;
    var setObj = {};
    var index = 0;
    var ins_id = ins._id;
    var trace_id = ins.traces[0]._id;
    var approve_id = ins.traces[0].approves[0]._id;
    var description = ins.traces[0].approves[0].description;
    var next_steps = ins.traces[0].approves[0].next_steps;
    var values = ins.traces[0].approves[0].values || {};
    var applicant_id = ins.applicant;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        applicant: 1,
        state: 1,
        submitter: 1,
        traces: 1,
        form: 1,
        flow_version: 1,
        space: 1,
        flow: 1
      }
    });
    var space_id = instance.space;
    var flow_id = instance.flow;
    var form_id = instance.form;
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.'; // 判断一个instance是否为拟稿状态

    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';
    uuflowManager.isInstanceDraft(instance, lang); // 判断一个用户是否是一个instance的提交者

    uuflowManager.isInstanceSubmitter(instance, this.userId);
    var flow = db.flows.findOne(flow_id, {
      fields: {
        "current._id": 1,
        "current.form_version": 1,
        "name": 1,
        "current.steps": 1
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (flow.current._id != instance.flow_version) {
      result = "upgraded";

      var start_step = _.find(flow.current.steps, function (s) {
        return s.step_type == "start";
      }); // 流程已升级


      setObj.flow_version = flow.current._id;
      setObj.form_version = flow.current.form_version; // 存入当前最新版flow中开始节点的step_id

      setObj["traces.$.step"] = start_step._id;
      setObj["traces.$.name"] = start_step.name;
    }

    if (instance.applicant != applicant_id) {
      // 申请人已变换
      var user = db.users.findOne(applicant_id, {
        fields: {
          name: 1
        }
      });
      var applicant = db.space_users.find({
        space: space_id,
        user: applicant_id
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = applicant.fetch()[0].organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      setObj.applicant = applicant_id;
      setObj.applicant_name = user.name;
      setObj.applicant_organization = org_id;
      setObj.applicant_organization_name = organization.name;
      setObj.applicant_organization_fullname = organization.fullname;
      setObj[key_str + 'user'] = applicant_id;
      setObj[key_str + 'user_name'] = user.name;
    }

    setObj[key_str + 'values'] = values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'judge'] = 'submitted';
    setObj[key_str + 'read_date'] = new Date();

    if (result != "upgraded" && next_steps) {
      setObj[key_str + 'next_steps'] = next_steps;
    } // 计算申请单标题


    var form = db.forms.findOne({
      _id: form_id
    }, {
      fields: {
        "current.name_forumla": 1
      }
    });
    var name_forumla = form.current.name_forumla;

    if (name_forumla) {
      // var iscript = name_forumla.replace(/\{/g, "(values['").replace(/\}/g, "'] || '')");
      // var rev = eval(iscript);
      setObj.name = uuflowManager.getInstanceName(ins, values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return result;
  },
  inbox_save_instance: function (approve) {
    if (!this.userId) return;
    var setObj = {};
    var index = 0;
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve.id;
    var values = approve.values;
    var next_steps = approve.next_steps;
    var description = approve.description;
    var judge = approve.judge;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1,
        flow_version: 1,
        flow: 1,
        state: 1,
        form: 1,
        form_version: 1,
        values: 1,
        code: 1
      }
    });
    var traces = instance.traces;

    var current_trace = _.find(traces, function (t) {
      return t._id == trace_id;
    });

    var current_approve = _.find(current_trace.approves, function (a) {
      return a._id == approve_id;
    }); // 判断一个instance是否为审核中状态


    var current_user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    var lang = current_user.locale == 'zh-cn' ? 'zh-CN' : 'en';

    try {
      uuflowManager.isInstancePending(instance, lang); // 判断一个trace是否为未完成状态

      uuflowManager.isTraceNotFinished(current_trace); // 判断一个approve是否为未完成状态

      uuflowManager.isApproveNotFinished(current_approve); // 判断当前用户是否approve 对应的处理人或代理人

      uuflowManager.isHandlerOrAgent(current_approve, this.userId);
    } catch (e) {
      console.log(e.stack);
      return true;
    }

    var flow_version = instance.flow_version;
    var flow_id = instance.flow;
    var step_id = "";
    step_id = current_trace.step;
    var flow = db.flows.findOne(flow_id, {
      fields: {
        current: 1,
        historys: 1
      }
    });
    var step = null;

    if (flow.current._id == flow_version) {
      flow.current.steps.forEach(function (s) {
        if (s._id == step_id) step = s;
      });
    } else {
      flow.historys.forEach(function (h) {
        h.steps.forEach(function (s) {
          if (s._id == step_id) step = s;
        });
      });
    }

    if (!step) return false;
    var step_type = step.step_type;
    current_trace.approves.forEach(function (a, idx) {
      if (a._id == approve_id) {
        index = idx;
      }
    });
    var key_str = 'traces.$.approves.' + index + '.';
    var permissions_values = uuflowManager.getApproveValues(approve.values, step.permissions, instance.form, instance.form_version);
    var change_values = approveManager.getChangeValues(instance.values, permissions_values);
    setObj.values = _.extend(instance.values || {}, permissions_values);

    if (!_.isEmpty(change_values)) {
      values_history = current_approve.values_history || [];
      values_history.push({
        values: change_values,
        create: new Date()
      });
      setObj[key_str + 'values_history'] = values_history;
    }

    setObj[key_str + 'is_read'] = true;
    setObj[key_str + 'read_date'] = new Date();
    setObj[key_str + 'values'] = setObj.values;
    setObj[key_str + 'description'] = description;
    setObj[key_str + 'next_steps'] = next_steps;

    if (step_type == "submit" || step_type == "start") {
      setObj[key_str + 'judge'] = "submitted";
    } else {
      setObj[key_str + 'judge'] = judge;
    }

    setObj.modified = new Date();
    setObj.modified_by = this.userId; // 计算申请单标题

    var form = db.forms.findOne(instance.form);
    var form_v = uuflowManager.getFormVersion(form, instance.form_version);
    var name_forumla = form_v.name_forumla;

    if (name_forumla) {
      setObj.name = uuflowManager.getInstanceName(instance, setObj.values);
    }

    db.instances.update({
      _id: ins_id,
      "traces._id": trace_id
    }, {
      $set: setObj
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"trace_approve_cc.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/trace_approve_cc.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  // ??? 能否传阅给当前步骤处理人 如果当前步骤是会签。
  cc_do: function (approve, cc_user_ids, description) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var approve_id = approve._id;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        space: 1,
        traces: 1,
        cc_users: 1,
        values: 1
      }
    });
    var current_user_id = this.userId;
    var space_id = instance.space;
    var new_approves = [];
    var from_user_name = db.users.findOne(current_user_id, {
      fields: {
        name: 1
      }
    }).name;
    cc_user_ids.forEach(function (userId, idx) {
      var user = db.users.findOne(userId, {
        fields: {
          name: 1
        }
      });
      var space_user = db.space_users.findOne({
        space: space_id,
        user: userId
      }, {
        fields: {
          organization: 1
        }
      });
      var org_id = space_user.organization;
      var organization = db.organizations.findOne(org_id, {
        fields: {
          name: 1,
          fullname: 1
        }
      });
      var agent = uuflowManager.getAgent(space_id, userId);
      var handler_id = userId;
      var handler_info = user;
      var handler_space_user = space_user;
      var handler_org_info = organization;

      if (agent) {
        handler_id = agent;
        handler_info = db.users.findOne(agent, {
          fileds: {
            name: 1
          }
        });
        handler_space_user = uuflowManager.getSpaceUser(space_id, agent);
        handler_org_info = uuflowManager.getSpaceUserOrgInfo(handler_space_user);
        cc_user_ids[idx] = agent;
      }

      var appr = {
        '_id': new Mongo.ObjectID()._str,
        'instance': ins_id,
        'trace': trace_id,
        'is_finished': false,
        'user': userId,
        'user_name': user.name,
        'handler': handler_id,
        'handler_name': handler_info.name,
        'handler_organization': handler_space_user.organization,
        'handler_organization_name': handler_org_info.name,
        'handler_organization_fullname': handler_org_info.fullname,
        'type': 'cc',
        'start_date': new Date(),
        'is_read': false,
        'from_user': current_user_id,
        'from_user_name': from_user_name,
        'opinion_fields_code': approve.opinion_fields_code,
        'sign_field_code': approve.opinion_fields_code && approve.opinion_fields_code.length == 1 ? approve.opinion_fields_code[0] : "",
        'from_approve_id': approve_id,
        'cc_description': description
      };

      if (agent) {
        appr.agent = agent;
      }

      uuflowManager.setRemindInfo(instance.values, appr);
      new_approves.push(appr);
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj,
      $addToSet: {
        'traces.$.approves': {
          $each: new_approves
        }
      },
      $push: {
        cc_users: {
          $each: cc_user_ids
        }
      }
    });
    instance = db.instances.findOne(ins_id);
    current_user_info = db.users.findOne(current_user_id);
    pushManager.send_instance_notification("trace_approve_cc", instance, "", current_user_info, cc_user_ids);
    flow_id = instance.flow;
    approve.cc_user_ids = cc_user_ids; // 记录下本次传阅的人员ID作为hook接口中的参数
    // 如果已经配置webhook并已激活则触发

    pushManager.triggerWebhook(flow_id, instance, approve, 'cc_do', current_user_id, cc_user_ids);
    return true;
  },
  cc_read: function (approve) {
    var setObj = {};
    var ins_id = approve.instance;
    var trace_id = approve.trace;
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1
      }
    });
    var current_user_id = this.userId;

    var current_trace = _.find(instance.traces, function (t) {
      return t._id == trace_id;
    });

    var index = 0;
    current_trace.approves.forEach(function (a, idx) {
      if (a.type == 'cc' && a.handler == current_user_id && !a.is_read) {
        index = idx;
      }
    });
    setObj['traces.$.approves.' + index + '.is_read'] = true;
    setObj['traces.$.approves.' + index + '.read_date'] = new Date();
    setObj.traces = traces;
    db.instances.update({
      _id: ins_id,
      'traces._id': trace_id
    }, {
      $set: setObj
    });
    return true;
  },
  cc_submit: function (ins_id, description) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1,
        cc_users: 1,
        outbox_users: 1
      }
    });
    var traces = instance.traces;
    var current_user_id = this.userId;
    var current_approve;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a.type == 'cc' && a.handler == current_user_id && a.is_finished == false) {
            current_approve = a;
            var upobj = {};
            upobj['traces.$.approves.' + idx + '.is_finished'] = true;
            upobj['traces.$.approves.' + idx + '.is_read'] = true;
            upobj['traces.$.approves.' + idx + '.finish_date'] = new Date();
            upobj['traces.$.approves.' + idx + '.judge'] = "submitted";
            upobj['traces.$.approves.' + idx + '.cost_time'] = new Date() - a.start_date;
            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        });
      }
    });

    if (current_approve) {
      var index = 0; //设置意见，意见只添加到最后一条approve中

      traces.forEach(function (t) {
        if (current_approve && t._id === current_approve.trace) {
          if (t.approves) {
            t.approves.forEach(function (a, idx) {
              if (a._id === current_approve._id) {
                a.description = description;
                index = idx;
              }
            });
          }
        }
      });
      setObj.modified = new Date();
      setObj.modified_by = this.userId;
      setObj['traces.$.approves.' + index + '.description'] = description;
      db.instances.update({
        _id: ins_id,
        'traces._id': current_approve.trace
      }, {
        $set: setObj,
        $pull: {
          cc_users: current_user_id
        },
        $addToSet: {
          outbox_users: {
            $each: [current_user_id, current_approve.user]
          }
        }
      });
      instance = db.instances.findOne(ins_id);
      current_user_info = db.users.findOne(current_user_id); //传阅提交不通知传阅者

      if (false && description && current_approve && current_approve.from_user) {
        pushManager.send_instance_notification("trace_approve_cc_submit", instance, "", current_user_info, [current_approve.from_user]);
      }

      pushManager.send_message_to_specifyUser("current_user", current_user_id);
      flow_id = instance.flow; // 如果已经配置webhook并已激活则触发

      pushManager.triggerWebhook(flow_id, instance, current_approve, 'cc_submit', current_user_id, []);
    }

    return true;
  },
  cc_remove: function (instanceId, approveId) {
    var setObj = {};
    var instance = db.instances.findOne(instanceId, {
      fields: {
        traces: 1,
        cc_users: 1
      }
    });
    var traces = instance.traces;
    var trace_id,
        remove_user_id,
        multi = false;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a._id == approveId) {
            trace_id = a.trace;
            remove_user_id = a.handler;
            setObj['traces.$.approves.' + idx + '.judge'] = 'terminated';
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.finish_date'] = new Date();
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.read_date'] = new Date();
          }
        });
      }
    });
    if (!trace_id || !remove_user_id) return;
    var multi = 0;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a) {
          if (a.handler == remove_user_id && a.type == 'cc' && a.is_finished == false) {
            multi++;
          }
        });
      }
    });
    setObj.modified = new Date();
    setObj.modified_by = this.userId;

    if (multi > 1) {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj
      });
    } else {
      db.instances.update({
        _id: instanceId,
        'traces._id': trace_id
      }, {
        $set: setObj,
        $pull: {
          cc_users: remove_user_id
        }
      });
    }

    pushManager.send_message_to_specifyUser("current_user", remove_user_id);
    return true;
  },
  cc_save: function (ins_id, description) {
    var setObj = {};
    var instance = db.instances.findOne(ins_id, {
      fields: {
        traces: 1
      }
    });
    var traces = instance.traces;
    var current_user_id = this.userId;
    var current_approve;
    traces.forEach(function (t) {
      if (t.approves) {
        t.approves.forEach(function (a, idx) {
          if (a.handler == current_user_id && a.type == 'cc' && a.is_finished == false) {
            current_approve = a;
            var upobj = {};
            upobj['traces.$.approves.' + idx + '.judge'] = "submitted";
            upobj['traces.$.approves.' + idx + '.read_date'] = new Date();
            db.instances.update({
              _id: ins_id,
              'traces._id': t._id
            }, {
              $set: upobj
            });
          }
        });
      }
    });
    var index = 0; //设置意见，意见只添加到最后一条approve中

    traces.forEach(function (t) {
      if (current_approve && t._id === current_approve.trace) {
        if (t.approves) {
          t.approves.forEach(function (a, idx) {
            if (a._id === current_approve._id) {
              index = idx;
            }
          });
        }
      }
    });
    setObj['traces.$.approves.' + index + '.description'] = description;
    db.instances.update({
      _id: ins_id,
      'traces._id': current_approve.trace
    }, {
      $set: setObj
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forward_instance.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/forward_instance.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  // 改为通过api调用
  forward_instance: function (instance_id, space_id, flow_id, hasSaveInstanceToAttachment, description, isForwardAttachments, selectedUsers, action_type, related, from_approve_id) {
    if (!this.userId) throw new Meteor.Error('not-authorized');
    return;
  },
  forward_remove: function (instance_id, trace_id, approve_id) {
    check(instance_id, String);
    check(trace_id, String);
    check(approve_id, String);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    var trace = _.find(ins.traces, function (t) {
      return t._id == trace_id;
    });

    var approve = _.find(trace.approves, function (appr) {
      return appr._id == approve_id;
    });

    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, this.userId);

    if (!approve || !['forward', 'distribute'].includes(approve.type) || !approve.forward_instance) {
      if (!hasAdminPermission) {
        if (approve.from_user != this.userId) throw new Meteor.Error('error!', 'instance_forward_cannot_cancel');
      }
    }

    var forward_instance_id = approve.forward_instance;
    var forward_instance = db.instances.findOne(forward_instance_id);

    if (forward_instance) {
      if (forward_instance.state != "draft") {
        if (!hasAdminPermission) throw new Meteor.Error('error!', 'instance_forward_instance_state_changed');
      }

      var inbox_users = forward_instance.inbox_users || [];
      forward_instance.deleted = new Date();
      forward_instance.deleted_by = this.userId;
      var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

      if (deleted_forward_instance_id) {
        db.instances.remove({
          _id: forward_instance_id
        }); // 删除申请单后重新计算inbox_users的badge

        _.each(inbox_users, function (u_id) {
          pushManager.send_message_to_specifyUser("current_user", u_id);
        });
      }
    }

    var set_obj = new Object();
    set_obj.modified = new Date();
    set_obj.modified_by = this.userId;

    _.each(trace.approves, function (appr, idx) {
      if (appr._id == approve_id) {
        set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
        set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
        set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
        set_obj['traces.$.approves.' + idx + '.is_read'] = true;
        set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
      }
    });

    db.instances.update({
      _id: instance_id,
      "traces._id": trace_id
    }, {
      $set: set_obj
    });
    return true;
  },
  cancelDistribute: function (instance_id, approve_ids) {
    check(instance_id, String);
    check(approve_ids, Array);
    var ins = db.instances.findOne(instance_id);

    if (!ins) {
      throw new Meteor.Error('params error!', 'record not exists!');
    }

    userId = this.userId;
    var hasAdminPermission = WorkflowManager.hasFlowAdminPermission(ins.flow, ins.space, userId);

    _.each(ins.traces, function (t) {
      if (t.approves) {
        var exists = false;
        var set_obj = new Object();

        _.each(t.approves, function (a, idx) {
          if (approve_ids.includes(a._id) && (a.from_user == userId || hasAdminPermission) && 'distribute' == a.type && a.forward_instance) {
            var forward_instance_id = a.forward_instance;
            var forward_instance = db.instances.findOne(forward_instance_id);

            if (forward_instance) {
              if (forward_instance.state != "draft") {
                return;
              }

              var inbox_users = forward_instance.inbox_users || [];
              forward_instance.deleted = new Date();
              forward_instance.deleted_by = userId;
              var deleted_forward_instance_id = db.deleted_instances.insert(forward_instance);

              if (deleted_forward_instance_id) {
                db.instances.remove({
                  _id: forward_instance_id
                }); // 删除申请单后重新计算inbox_users的badge

                _.each(inbox_users, function (u_id) {
                  pushManager.send_message_to_specifyUser("current_user", u_id);
                });
              }

              set_obj['traces.$.approves.' + idx + '.judge'] = 'terminated';
              set_obj['traces.$.approves.' + idx + '.is_finished'] = true;
              set_obj['traces.$.approves.' + idx + '.finish_date'] = new Date();
              set_obj['traces.$.approves.' + idx + '.is_read'] = true;
              set_obj['traces.$.approves.' + idx + '.read_date'] = new Date();
            }

            exists = true;
          }
        });

        if (!exists) return;
        set_obj.modified = new Date();
        set_obj.modified_by = userId;
        db.instances.update({
          _id: instance_id,
          "traces._id": t._id
        }, {
          $set: set_obj
        });
      }
    });

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/cfs_instances.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  cfs_instances_remove: function (file_id) {
    check(file_id, String);
    cfs.instances.remove(file_id);
    return true;
  },
  cfs_instances_set_current: function (file_id) {
    check(file_id, String);
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.current': true
      }
    });
    return true;
  },
  cfs_instances_lock: function (file_id, user_id, user_name) {
    cfs.instances.update({
      _id: file_id
    }, {
      $set: {
        'metadata.locked_by': user_id,
        'metadata.locked_by_name': user_name,
        'metadata.locked_time': new Date()
      }
    });
    return true;
  },
  cfs_instances_unlock: function (file_id) {
    cfs.instances.update({
      _id: file_id
    }, {
      $unset: {
        'metadata.locked_by': '',
        'metadata.locked_by_name': '',
        'metadata.locked_time': ''
      }
    });
    return true;
  },
  download_space_instance_attachments_to_disk: function (spaceId, cfsRecordIds) {
    if (!this.userId) return "不符合执行条件";
    if (Meteor.users.find({
      _id: this.userId,
      is_cloudadmin: true
    }).count() < 1) return "不符合执行条件";
    check(spaceId, String);
    var store = "instances";

    var fs = require('fs');

    var path = require('path');

    var mkdirp = require('mkdirp');

    var pathname = path.join(__meteor_bootstrap__.serverDir, '../../../cfs/spaceInstanceAttachments'); // Set absolute path

    var absolutePath = path.resolve(pathname); // Ensure the path exists

    mkdirp.sync(absolutePath);
    console.log('absolutePath: ', absolutePath);
    console.time('download_space_instance_attachments_to_disk');
    var query = {
      'metadata.space': spaceId
    };

    if (cfsRecordIds) {
      query._id = {
        $in: cfsRecordIds
      };
    }

    var downloadFailedRecordIds = [];
    cfs.instances.find(query).forEach(function (c) {
      try {
        var fileName = store + '-' + c._id + '-' + c.name();
        var filePath = path.join(absolutePath, fileName);
        Meteor.wrapAsync(function (callback) {
          try {
            var writer = fs.createWriteStream(filePath);
            writer.on('finish', function () {
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            var reader = c.createReadStream(store);
            reader.on('error', function (error) {
              downloadFailedRecordIds.push(c._id);
              console.error('download_space_instance_attachments_to_disk: ', c._id);
              console.error(error.stack);
              if (callback && _.isFunction(callback)) callback();
              return;
            });
            reader.pipe(writer);
          } catch (error) {
            console.error('download_space_instance_attachments_to_disk: ', c._id);
            console.error(error.stack);
            if (callback && _.isFunction(callback)) callback();
            return;
          }
        })();
      } catch (error) {
        console.error('download_space_instance_attachments_to_disk: ', c._id);
        console.error(error.stack);
      }
    });

    if (downloadFailedRecordIds.length > 0) {
      console.error('downloadFailedRecordIds: ');
      console.error(downloadFailedRecordIds);
    }

    console.timeEnd('download_space_instance_attachments_to_disk');
    return downloadFailedRecordIds;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_approve.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_approve.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  set_approve_have_read: function (instanceId, traceId, approveId) {
    var instance, ref, self, setObj, trace;

    if (!this.userId) {
      return;
    }

    self = this;
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {
        modified: new Date(),
        modified_by: self.userId
      };
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId && !approve.is_read) {
          setObj["traces.$.approves." + idx + ".is_read"] = true;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  change_approve_info: function (instanceId, traceId, approveId, description, finish_date) {
    var instance, ref, setObj, trace;

    if (!this.userId) {
      return;
    }

    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(description, String);
    check(finish_date, Date);
    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      setObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          setObj["traces.$.approves." + idx + ".description"] = description;
          setObj["traces.$.approves." + idx + ".finish_date"] = finish_date;
          setObj["traces.$.approves." + idx + ".cost_time"] = new Date() - approve.start_date;
          return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(setObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: setObj
        });
      }

      return true;
    }
  },
  update_approve_sign: function (instanceId, traceId, approveId, sign_field_code, description, sign_type, lastSignApprove) {
    var instance, lastTrace, ref, session_userId, setObj, trace, upObj;
    check(instanceId, String);
    check(traceId, String);
    check(approveId, String);
    check(sign_field_code, String);
    check(description, String);

    if (!this.userId) {
      return;
    }

    session_userId = this.userId;

    if (lastSignApprove) {
      if (lastSignApprove.custom_sign_show) {
        return;
      }

      instance = db.instances.findOne({
        _id: instanceId,
        "traces._id": lastSignApprove.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });
      lastTrace = _.find(instance != null ? instance.traces : void 0, function (t) {
        return t._id = lastSignApprove.trace;
      });

      if (lastTrace) {
        setObj = {};

        if (lastTrace != null) {
          lastTrace.approves.forEach(function (a, idx) {
            if (a._id === lastSignApprove._id) {
              if (sign_type === "update") {
                setObj["traces.$.approves." + idx + ".sign_show"] = false;
                setObj["traces.$.approves." + idx + ".modified"] = new Date();
                return setObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
              }
            }
          });
        }

        if (!_.isEmpty(setObj)) {
          db.instances.update({
            _id: instanceId,
            "traces._id": lastTrace._id
          }, {
            $set: setObj
          });
        }
      }
    }

    instance = db.instances.findOne({
      _id: instanceId,
      "traces._id": traceId
    }, {
      fields: {
        "traces.$": 1
      }
    });

    if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
      trace = instance.traces[0];
      upObj = {};
      trace.approves.forEach(function (approve, idx) {
        if (approve._id === approveId) {
          if (sign_field_code) {
            upObj["traces.$.approves." + idx + ".sign_field_code"] = sign_field_code;
          }

          upObj["traces.$.approves." + idx + ".description"] = description;
          upObj["traces.$.approves." + idx + ".sign_show"] = true;
          upObj["traces.$.approves." + idx + ".modified"] = new Date();
          upObj["traces.$.approves." + idx + ".modified_by"] = session_userId;
          return upObj["traces.$.approves." + idx + ".read_date"] = new Date();
        }
      });

      if (!_.isEmpty(upObj)) {
        db.instances.update({
          _id: instanceId,
          "traces._id": traceId
        }, {
          $set: upObj
        });
      }

      return true;
    }
  },
  update_sign_show: function (objs, myApprove_id) {
    objs.forEach(function (obj, index) {
      var instance, ref, setObj, trace;
      instance = db.instances.findOne({
        _id: obj.instance,
        "traces._id": obj.trace
      }, {
        fields: {
          "traces.$": 1
        }
      });

      if ((instance != null ? (ref = instance.traces) != null ? ref.length : void 0 : void 0) > 0) {
        trace = instance.traces[0];
        setObj = {};
        trace.approves.forEach(function (approve, idx) {
          if (approve._id === obj._id) {
            setObj["traces.$.approves." + idx + ".sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".custom_sign_show"] = obj.sign_show;
            setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }

          if (approve._id === myApprove_id) {
            return setObj["traces.$.approves." + idx + ".read_date"] = new Date();
          }
        });

        if (!_.isEmpty(setObj)) {
          return db.instances.update({
            _id: obj.instance,
            "traces._id": obj.trace
          }, {
            $set: setObj
          });
        }
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_return.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_return.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_return: function (approve, reason) {
    var approve_values, b, current_step, current_user, current_user_info, flow, ins, instance, instance_id, last_trace, newTrace, new_inbox_users, now, pre_step, pre_trace, r, rest_counter_users, setObj, space_id, traces;
    check(approve, Object);
    current_user = this.userId;
    instance_id = approve.instance;
    ins = uuflowManager.getInstance(instance_id);
    space_id = ins.space;

    if (ins.state !== "pending" || !ins.inbox_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.type === "cc" && ins.cc_users.includes(current_user)) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (ins.traces.length < 2) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    flow = uuflowManager.getFlow(ins.flow);
    pre_trace = ins.traces[ins.traces.length - 2];
    pre_step = uuflowManager.getStep(ins, flow, pre_trace.step);

    if (pre_step.step_type === "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    last_trace = _.last(ins.traces);
    current_step = uuflowManager.getStep(ins, flow, last_trace.step);

    if (current_step.step_type !== "submit" && current_step.step_type !== "sign" && current_step.step_type !== "counterSign") {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    if (approve.trace !== last_trace._id) {
      throw new Meteor.Error('error!', "不符合退回条件");
    }

    new_inbox_users = new Array();

    _.each(pre_trace.approves, function (a) {
      if ((!a.type || a.type === "draft" || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected")) {
        return new_inbox_users.push(a.user);
      }
    });

    if (_.isEmpty(new_inbox_users)) {
      throw new Meteor.Error('error!', "未找到下一步处理人，退回失败");
    }

    traces = ins.traces;
    approve_values = uuflowManager.getApproveValues(approve.values || {}, current_step.permissions, ins.form, ins.form_version);
    setObj = new Object();
    now = new Date();
    rest_counter_users = new Array();

    _.each(traces, function (t) {
      if (t._id === last_trace._id) {
        if (!t.approves) {
          t.approves = new Array();
        }

        _.each(t.approves, function (a, idx) {
          if ((!a.type || a.type === "reassign") && (!a.judge || a.judge === "submitted" || a.judge === "approved" || a.judge === "rejected" || a.judge === "readed") && a.is_finished !== true) {
            setObj['traces.$.approves.' + idx + '.finish_date'] = now;
            setObj['traces.$.approves.' + idx + '.read_date'] = now;
            setObj['traces.$.approves.' + idx + '.is_error'] = false;
            setObj['traces.$.approves.' + idx + '.is_read'] = true;
            setObj['traces.$.approves.' + idx + '.is_finished'] = true;
            setObj['traces.$.approves.' + idx + '.cost_time'] = now - a.start_date;
            setObj['traces.$.approves.' + idx + '.values'] = approve_values;

            if (a.handler === current_user) {
              setObj['traces.$.approves.' + idx + '.judge'] = "returned";
              return setObj['traces.$.approves.' + idx + '.description'] = reason;
            } else {
              return rest_counter_users.push(a.handler);
            }
          }
        });

        setObj['traces.$.is_finished'] = true;
        setObj['traces.$.finish_date'] = true;
        return setObj['traces.$.judge'] = "returned";
      }
    });

    ins.values = _.extend(ins.values || {}, approve_values);
    newTrace = new Object();
    newTrace._id = new Mongo.ObjectID()._str;
    newTrace.instance = instance_id;
    newTrace.previous_trace_ids = [last_trace._id];
    newTrace.is_finished = false;
    newTrace.step = pre_trace.step;
    newTrace.name = pre_trace.name;
    newTrace.start_date = now;
    newTrace.due_date = uuflowManager.getDueDate(pre_step.timeout_hours);
    newTrace.approves = [];

    _.each(new_inbox_users, function (next_step_user_id, idx) {
      var agent, handler_id, handler_info, newApprove, next_step_space_user, next_step_user_org_info, user_info;
      newApprove = new Object();
      newApprove._id = new Mongo.ObjectID()._str;
      newApprove.instance = instance_id;
      newApprove.trace = newTrace._id;
      newApprove.is_finished = false;
      newApprove.user = next_step_user_id;
      user_info = db.users.findOne(next_step_user_id, {
        fields: {
          name: 1
        }
      });
      newApprove.user_name = user_info.name;
      handler_id = next_step_user_id;
      handler_info = user_info;
      agent = uuflowManager.getAgent(space_id, next_step_user_id);

      if (agent) {
        new_inbox_users[idx] = agent;
        handler_id = agent;
        handler_info = db.users.findOne({
          _id: agent
        }, {
          fields: {
            name: 1
          }
        });
        newApprove.agent = agent;
      }

      newApprove.handler = handler_id;
      newApprove.handler_name = handler_info.name;
      next_step_space_user = uuflowManager.getSpaceUser(space_id, handler_id);
      next_step_user_org_info = uuflowManager.getSpaceUserOrgInfo(next_step_space_user);
      newApprove.handler_organization = next_step_user_org_info["organization"];
      newApprove.handler_organization_name = next_step_user_org_info["organization_name"];
      newApprove.handler_organization_fullname = next_step_user_org_info["organization_fullname"];
      newApprove.start_date = now;
      newApprove.is_read = false;
      newApprove.is_error = false;
      newApprove.values = new Object();
      uuflowManager.setRemindInfo(ins.values, newApprove);
      return newTrace.approves.push(newApprove);
    });

    setObj.inbox_users = new_inbox_users;
    setObj.state = "pending";
    ins.outbox_users.push(current_user);
    setObj.outbox_users = _.uniq(ins.outbox_users);
    setObj.modified = now;
    setObj.modified_by = current_user;
    setObj.values = ins.values;
    setObj.current_step_name = pre_trace.name;
    r = db.instances.update({
      _id: instance_id,
      'traces._id': last_trace._id
    }, {
      $set: setObj
    });
    b = db.instances.update({
      _id: instance_id
    }, {
      $push: {
        traces: newTrace
      }
    });

    if (r && b) {
      pushManager.send_message_to_specifyUser("current_user", current_user);
      instance = uuflowManager.getInstance(instance_id);
      current_user_info = db.users.findOne(current_user);
      pushManager.send_instance_notification("return_pending_inbox", instance, reason, current_user_info);

      _.each(rest_counter_users, function (user_id) {
        return pushManager.send_message_to_specifyUser("current_user", user_id);
      });
    }

    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_remind.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_remind.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  instance_remind: function (remind_users, remind_count, remind_deadline, instance_id, action_types, trace_id) {
    var current_user_id, ins, last_remind_users, now, priority, trace;
    check(remind_users, Array);
    check(remind_count, Match.OneOf('single', 'multi'));
    check(remind_deadline, Date);
    check(instance_id, String);
    check(action_types, Array);
    check(trace_id, String);
    current_user_id = this.userId;
    last_remind_users = new Array();
    ins = db.instances.findOne({
      _id: instance_id
    }, {
      fields: {
        name: 1,
        traces: 1,
        values: 1,
        space: 1
      }
    });

    if (action_types.includes('admin')) {
      if (remind_count === 'single') {
        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              return last_remind_users.push(ap.user);
            }
          });
        });
      } else if (remind_count === 'multi') {
        now = new Date();
        priority = ins.values.priority;

        _.each(ins.traces, function (t) {
          return _.each(t.approves, function (ap) {
            var caculate_date;

            if (remind_users.includes(ap.user) && ap.is_finished !== true) {
              last_remind_users.push(ap.user);
              ap.manual_deadline = remind_deadline;

              if (priority === "普通" || !priority) {} else if (priority === "办文") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "紧急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              } else if (priority === "特急") {
                if (Steedos.caculatePlusHalfWorkingDay(now) > remind_deadline) {
                  return ap.remind_date = Steedos.caculatePlusHalfWorkingDay(now, true);
                } else if (Steedos.caculateWorkingTime(now, 1) > remind_deadline) {
                  caculate_date = function (base_date) {
                    var plus_halfday_date;
                    plus_halfday_date = Steedos.caculatePlusHalfWorkingDay(base_date);

                    if (plus_halfday_date > remind_deadline) {
                      ap.remind_date = base_date;
                    } else {
                      caculate_date(Steedos.caculatePlusHalfWorkingDay(base_date, true));
                    }
                  };

                  return caculate_date(now);
                }
              }
            }
          });
        });

        if (!_.isEmpty(last_remind_users)) {
          db.instances.update({
            _id: instance_id
          }, {
            $set: {
              'traces': ins.traces
            }
          });
        }
      }
    } else if (action_types.includes('applicant')) {
      trace = _.find(ins.traces, function (t) {
        return t._id === trace_id;
      });

      _.each(trace.approves, function (ap) {
        if (remind_users.includes(ap.user) && ap.is_finished !== true) {
          return last_remind_users.push(ap.user);
        }
      });
    } else if (action_types.includes('cc')) {
      _.each(ins.traces, function (t) {
        return _.each(t.approves, function (ap) {
          if (remind_users.includes(ap.user) && ap.is_finished !== true && ap.type === 'cc' && ap.from_user === current_user_id) {
            return last_remind_users.push(ap.user);
          }
        });
      });
    }

    uuflowManager.sendRemindSMS(ins.name, remind_deadline, last_remind_users, ins.space, ins._id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"next_step_users_not_found.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/next_step_users_not_found.coffee                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  next_step_users_not_found: function (deal_type, step_name, params) {
    var approver_roles, lang, roles, roles_name, str, user;
    check(deal_type, String);
    check(step_name, String);
    check(params, Object);
    str = "";
    user = db.users.findOne({
      _id: this.userId
    }, {
      fields: {
        locale: 1
      }
    });
    lang = 'en';

    if (user.locale === 'zh-cn') {
      lang = 'zh-CN';
    }

    if (deal_type === 'applicantRole') {
      approver_roles = params.approver_roles;
      roles = db.flow_roles.find({
        _id: {
          $in: approver_roles
        }
      }, {
        fields: {
          name: 1
        }
      }).fetch();
      roles_name = _.pluck(roles, 'name').toString();
      str = TAPi18n.__('next_step_users_not_found.applicant_role', {
        step_name: step_name,
        role_name: roles_name
      }, lang);
    }

    return str;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_number_rules.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_number_rules.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval;

_eval = require('eval');
Meteor.methods({
  instanceNumberBuilder: function (spaceId, name) {
    var _NUMBER, _YYYY, context, date, e, numberRules, res, rules, script;

    numberRules = db.instance_number_rules.findOne({
      space: spaceId,
      name: name
    });

    if (!numberRules) {
      throw new Meteor.Error('error!', "" + name);
    }

    date = new Date();
    context = {};
    context._ = _;
    _YYYY = date.getFullYear();
    _NUMBER = (numberRules.number || 0) + 1;
    context.YYYY = _.clone(_YYYY);
    context.MM = date.getMonth() + 1;
    context.mm = date.getMonth() + 1;

    if (context.MM < 10) {
      context.MM = "0" + context.MM;
    }

    context.DD = date.getDate();
    context.dd = date.getDate();

    if (context.DD < 10) {
      context.DD = "0" + context.DD;
    }

    if (context.YYYY !== numberRules.year) {
      _NUMBER = numberRules.first_number || 1;
    }

    context.NUMBER = _.clone(_NUMBER);
    rules = numberRules.rules.replace("{YYYY}", "' + YYYY + '").replace("{MM}", "' + MM + '").replace("{NUMBER}", "' + NUMBER + '");
    script = "var newNo = '" + rules + "'; exports.newNo = newNo";

    try {
      res = _eval(script, "newNo", context, false).newNo;
      db.instance_number_rules.update({
        _id: numberRules._id
      }, {
        $set: {
          year: _YYYY,
          number: _NUMBER
        }
      });
      console.log(this.userId, res);
    } catch (error) {
      e = error;
      res = {
        _error: e
      };
    }

    return res;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"check_main_attach.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/check_main_attach.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  check_main_attach: function (ins_id, name) {
    check(ins_id, String);
    uuflowManager.checkMainAttach(ins_id, name);
    return 'success';
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/related_instances.coffee                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  remove_related: function (ins_id, re_ins_id) {
    var index, ins, res, set_obj;
    check(ins_id, String);
    check(re_ins_id, String);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        related_instances: 1
      }
    });

    if (ins) {
      res = ins.related_instances || [];
      index = res.indexOf(re_ins_id);

      if (index > -1) {
        res.remove(index);
      }

      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = res;
      return db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }
  },
  update_instance_related: function (ins_id, related_instances) {
    var ins, set_obj;
    check(ins_id, String);
    check(related_instances, Array);

    if (!this.userId) {
      return;
    }

    ins = db.instances.findOne({
      _id: ins_id,
      $or: [{
        submitter: this.userId
      }, {
        applicant: this.userId
      }, {
        inbox_users: this.userId
      }, {
        cc_users: this.userId
      }]
    }, {
      fields: {
        state: 1
      }
    });

    if (ins) {
      set_obj = new Object();
      set_obj.modified = new Date();
      set_obj.modified_by = this.userId;
      set_obj.related_instances = related_instances;
      db.instances.update({
        _id: ins_id
      }, {
        $set: set_obj
      });
    }

    return db.instances.find({
      _id: {
        $in: related_instances
      }
    }, {
      fields: {
        _id: 1,
        values: 1
      }
    }).fetch();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"edit_flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/edit_flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  updateFlowPosition: function (data) {
    return db.flow_positions.update({
      _id: data._id
    }, {
      $set: {
        role: data.role,
        users: data.users,
        org: data.org
      }
    });
  },
  updateFlowRole: function (data) {
    console.log(data._id);
    console.log(data.name);
    return db.flow_roles.update({
      _id: data._id
    }, {
      $set: {
        name: data.name
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"start_flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/start_flow.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  start_flow: function (space, flowId, start) {
    var keyValue, start_flows;
    keyValue = db.steedos_keyvalues.findOne({
      space: space,
      user: this.userId,
      key: 'start_flows'
    }, {
      fields: {
        value: 1
      }
    });
    start_flows = (keyValue != null ? keyValue.value : void 0) || [];

    if (start) {
      start_flows.push(flowId);
      start_flows = _.uniq(start_flows);
    } else {
      start_flows.remove(start_flows.indexOf(flowId));
    }

    if (keyValue) {
      return db.steedos_keyvalues.update({
        _id: keyValue._id
      }, {
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    } else {
      return db.steedos_keyvalues.insert({
        space: space,
        user: this.userId,
        key: 'start_flows',
        value: start_flows
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_traces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_traces.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  get_instance_traces: function (ins_id) {
    var ins, miniApproveFields;

    if (!this.userId) {
      return;
    }

    miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description'];
    ins = db.instances.findOne({
      _id: ins_id
    }, {
      fields: {
        "traces._id": 1,
        "traces.is_finished": 1,
        "traces.step": 1,
        "traces.start_date": 1,
        "traces.name": 1,
        "traces.finish_date": 1,
        "traces.judge": 1,
        "traces.approves._id": 1,
        "traces.approves.is_finished": 1,
        "traces.approves.user": 1,
        "traces.approves.handler": 1,
        "traces.approves.handler_name": 1,
        "traces.approves.handler_organization_fullname": 1,
        "traces.approves.type": 1,
        "traces.approves.start_date": 1,
        "traces.approves.description": 1,
        "traces.approves.is_read": 1,
        "traces.approves.judge": 1,
        "traces.approves.finish_date": 1,
        "traces.approves.from_user_name": 1,
        "traces.approves.from_user": 1,
        "traces.approves.cc_description": 1,
        "traces.approves.trace": 1,
        "traces.approves.forward_space": 1,
        "traces.approves.forward_instance": 1
      }
    });

    if (!ins) {
      return;
    }

    return ins != null ? ins.traces : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_batch.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_batch.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  'get_batch_instances': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return _batch_instances;
  },
  'get_batch_instances_count': function (space, categoryId, flowIds) {
    var _batch_instances;

    if (!this.userId) {
      return;
    }

    if (!space) {
      return;
    }

    _batch_instances = InstanceManager.getBatchInstances(space, categoryId, flowIds, this.userId);
    return (_batch_instances != null ? _batch_instances.length : void 0) || 0;
  },
  'get_my_approves': function (instanceIds) {
    var myApproves, that;
    that = this;

    if (!that.userId) {
      return;
    }

    myApproves = new Array();
    instanceIds.forEach(function (insId) {
      var my_approve;
      my_approve = InstanceManager.getMyApprove(insId, that.userId);

      if (my_approve) {
        return myApproves.push(my_approve);
      }
    });
    return myApproves;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/flow.coffee                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  change_flow_state: function (flows) {
    var _userId;

    check(flows, Array);
    _userId = this.userId;

    if (!_userId) {
      return;
    }

    return flows.forEach(function (flow) {
      var _flows, _flows_state, flowId, form, formId, form_current_fields_code, now, spaceId, state;

      spaceId = flow.space;
      formId = flow.form;
      flowId = flow.id;
      state = flow.state;

      if (!Steedos.isSpaceAdmin(spaceId, _userId)) {
        throw Meteor.Error(401, "No permission");
      }

      form = db.forms.findOne({
        _id: formId
      }, {
        fields: {
          historys: 0
        }
      });
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          historys: 0
        }
      });

      if (state !== 'enabled' && state !== 'disabled') {
        throw new Meteor.Error(500, "state无效");
      }

      if (!form) {
        throw new Meteor.Error(500, "form无效");
      }

      if (!flow) {
        throw new Meteor.Error(500, "flow无效");
      }

      if (!form.is_valid) {
        throw new Meteor.Error(500, "流程引用的表单[" + form.name + "]验证未通过，请打开流程设计器检查表单设置");
      }

      if (!flow.is_valid) {
        throw new Meteor.Error(500, "流程验证未通过，请打开流程设计器检查流程设置");
      }

      if (!['new', 'modify', 'delete'].includes(flow.flowtype)) {
        throw new Meteor.Error(500, "流程验证未通过，flowtype值必须是new、modify、delete其中之一");
      }

      if (!_.isArray(flow.current.steps)) {
        throw new Meteor.Error(500, "流程验证未通过，流程的步骤不能为空");
      }

      if (_.uniq(flow.current.steps, 'name').length !== flow.current.steps.length) {
        throw new Meteor.Error(500, "流程验证未通过，同一个流程下的步骤的名称不能重复");
      }

      now = new Date();

      if (state === 'enabled') {
        flow.current.steps.forEach(function (step) {
          var specifyStep;

          if (['specifyStepUser', 'specifyStepRole'].includes(step.deal_type)) {
            if (!step.approver_step) {
              throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
            } else {
              specifyStep = _.find(flow.current.steps, function (_step) {
                return step.approver_step === _step._id;
              });

              if (!specifyStep) {
                throw new Meteor.Error(500, "步骤[" + step.name + "]中的指定历史步骤不存在。");
              }
            }
          }
        });
        form_current_fields_code = form.current.fields.getProperty("code");
        flow.current.steps.forEach(function (step) {
          return step.fields_modifiable = _.intersection(step.fields_modifiable, form_current_fields_code);
        });

        if (form.state === 'disabled') {
          db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "enabled",
              "current.start_date": now,
              "current.modified": now,
              "current.modified_by": _userId
            }
          });
        }

        flow.current.modified = now;
        flow.current.start_date = now;
        flow.current.modified_by = _userId;
        return db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "enabled",
            "current": flow.current
          }
        });
      } else {
        db.flows.update({
          _id: flow._id
        }, {
          $set: {
            "state": "disabled",
            "current.modified": now,
            "current.start_date": now,
            "current.modified_by": _userId
          }
        });
        _flows = db.flows.find({
          form: form._id
        }, {
          fields: {
            _id: 1,
            state: 1
          }
        }).fetch();
        _flows_state = _flows.getProperty("state");

        if (!_flows_state.includes('enabled')) {
          return db.forms.update({
            _id: form._id
          }, {
            $set: {
              "state": "disabled",
              "current.modified": now,
              "current.start_date": now,
              "current.modified_by": _userId
            }
          });
        }
      }
    });
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distribute.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/distribute.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hide_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/hide_instance.coffee                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  hide_instance: function (insId, is_hidden) {
    var instance, permissions, space, userId;

    if (!this.userId) {
      return;
    }

    check(insId, String);
    check(is_hidden, Boolean);
    userId = this.userId;
    instance = db.instances.findOne(insId, {
      fields: {
        state: 1,
        flow: 1,
        space: 1
      }
    });

    if (!instance) {
      throw new Meteor.Error('error!', "未找到申请单");
    }

    if (instance.state !== 'completed') {
      throw new Meteor.Error('error!', "申请单状态不是已结束");
    }

    permissions = permissionManager.getFlowPermissions(instance.flow, userId);
    space = db.spaces.findOne(instance.space, {
      fields: {
        admins: 1
      }
    });

    if (!permissions.includes("admin") && !space.admins.includes(userId)) {
      throw new Meteor.Error('error!', "用户没有对当前流程的管理权限");
    }

    db.instances.update(insId, {
      $set: {
        is_hidden: is_hidden
      }
    });
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_value.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/methods/instance_value.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({
  getInstanceValues: function (insId) {
    var ref;

    if (!this.userId) {
      return;
    }

    return (ref = db.instances.findOne({
      _id: insId
    }, {
      fields: {
        values: 1
      }
    })) != null ? ref.values : void 0;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"routes":{"instance.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance.coffee                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var Cookies, getInstanceReadOnly;
Cookies = require("cookies");

getInstanceReadOnly = function (req, res, next, options) {
  var _hasPermission, _locale, _parent_instances, dataBuf, error, hide_traces, html, instance, instanceId, ref, ref1, space, spaceId, spaceUserCount, user, userId;

  user = Steedos.getAPILoginUser(req, res);

  if (req != null ? (ref = req.query) != null ? ref.access_token : void 0 : void 0) {
    userId = Steedos.getUserIdFromAccessToken(req.query.access_token);

    if (userId) {
      user = Meteor.users.findOne({
        _id: userId
      });
    }
  }

  spaceId = req.params.space;
  instanceId = req.params.instance_id;
  instance = db.instances.findOne({
    _id: instanceId
  });
  space = db.spaces.findOne({
    _id: spaceId
  });
  hide_traces = (ref1 = req.query) != null ? ref1.hide_traces : void 0;

  if (!options) {
    options = {
      showTrace: true
    };
  } else {
    options.showTrace = true;
  }

  if (hide_traces === "1") {
    if (options) {
      options.showTrace = false;
    } else {
      options = {
        showTrace: false
      };
    }
  }

  if (!options.showAttachments) {
    options.showAttachments = true;
  }

  if (!space) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space",
        "success": false
      }
    });
    return;
  }

  if (!instance) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing instance",
        "success": false
      }
    });
    return;
  }

  if (!user) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Auth-Token,X-User-Id",
        "success": false
      }
    });
    return;
  }

  if (instance.space !== spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing space or instance",
        "success": false
      }
    });
    return;
  }

  spaceUserCount = db.space_users.find({
    user: user._id,
    space: spaceId
  }).count();

  if (spaceUserCount === 0) {
    if (!space) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- Missing sapceUser",
          "success": false
        }
      });
      return;
    }
  }

  _hasPermission = WorkflowManager.hasInstancePermissions(user, instance);

  if (!_hasPermission && instance.distribute_from_instance) {
    _parent_instances = _.union([instance.distribute_from_instance], instance.distribute_from_instances || []);
    _hasPermission = _.find(_parent_instances, function (_parent_id) {
      var _parent_ins;

      _parent_ins = db.instances.findOne({
        _id: _parent_id
      }, {
        fields: {
          traces: 0
        }
      });
      return WorkflowManager.hasInstancePermissions(user, _parent_ins);
    });
  }

  if (!_hasPermission) {
    _locale = Steedos.locale(user._id, true);
    error = TAPi18n.__("instance_permissions_error", {}, _locale);
    res.charset = "utf-8";
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": error,
        "success": false
      }
    });
    return;
  }

  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
};

JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id", getInstanceReadOnly);
JsonRoutes.add("get", "/workflow/space/:space/view/readonly/:instance_id/:instance_name", function (req, res, next) {
  var options;
  res.setHeader('Content-type', 'application/x-msdownload');
  res.setHeader('Content-Disposition', 'attachment;filename=' + encodeURI(req.params.instance_name));
  res.setHeader('Transfer-Encoding', '');
  options = {
    absolute: true
  };
  return getInstanceReadOnly(req, res, next, options);
}); /*
    	获取申请单列表：
        final_decision：审批结果
        state: 申请单状态
     */
JsonRoutes.add("get", "/api/workflow/instances", function (req, res, next) {
  var f, flowId, flowIds, flows, i, instances, query, ref, ref1, ref2, ref3, ret_sync_token, spaceId, spaceUser, spaceUserOrganizations, sync_token, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  spaceId = req.headers["x-space-id"];

  if (!spaceId) {
    JsonRoutes.sendResult(res, {
      code: 401,
      data: {
        "error": "Validate Request -- Missing X-Space-Id",
        "success": false
      }
    });
    return;
  }

  flowId = (ref = req.query) != null ? ref.flowId : void 0;

  if (!flowId) {
    JsonRoutes.sendResult(res, {
      code: 400,
      data: {
        "error": "Validate Request -- Missing flowId",
        "success": false
      }
    });
    return;
  }

  query = {};
  ret_sync_token = new Date().getTime();
  flowIds = flowId.split(",");
  flows = db.flows.find({
    _id: {
      $in: flowIds
    }
  }).fetch();
  i = 0;

  while (i < flows.length) {
    f = flows[i];
    spaceUser = db.space_users.findOne({
      space: f.space,
      user: user_id
    });

    if (!spaceUser) {
      JsonRoutes.sendResult(res, {
        code: 401,
        data: {
          "error": "Validate Request -- No permission, flow is " + f._id,
          "success": false
        }
      });
      return;
    } else {}

    if (!Steedos.isSpaceAdmin(spaceId, user_id)) {
      spaceUserOrganizations = db.organizations.find({
        _id: {
          $in: spaceUser.organizations
        }
      }).fetch();

      if (!WorkflowManager.canMonitor(f, spaceUser, spaceUserOrganizations) && !WorkflowManager.canAdmin(f, spaceUser, spaceUserOrganizations)) {
        JsonRoutes.sendResult(res, {
          code: 401,
          data: {
            "error": "Validate Request -- No permission, flow is " + f._id,
            "success": false
          }
        });
        return;
      }
    }

    i++;
  }

  query.flow = {
    $in: flowIds
  };
  query.space = spaceId;

  if ((ref1 = req.query) != null ? ref1.sync_token : void 0) {
    sync_token = new Date(Number(req.query.sync_token));
    query.modified = {
      $gt: sync_token
    };
  }

  if ((ref2 = req.query) != null ? ref2.final_decision : void 0) {
    query.final_decision = {
      $in: req.query.final_decision.split(",")
    };
  } else {
    query.final_decision = {
      $nin: ["terminated", "rejected"]
    };
  }

  if ((ref3 = req.query) != null ? ref3.state : void 0) {
    query.state = {
      $in: req.query.state.split(",")
    };
  } else {
    query.state = "completed";
  }

  instances = db.instances.find(query, {
    fields: {
      inbox_uers: 0,
      cc_users: 0,
      outbox_users: 0,
      traces: 0,
      attachments: 0
    },
    skip: 0,
    limit: 500
  }).fetch();
  instances.forEach(function (instance) {
    var attachments;
    attachments = cfs.instances.find({
      'metadata.instance': instance._id,
      'metadata.current': true,
      "metadata.is_private": {
        $ne: true
      }
    }, {
      fields: {
        copies: 0
      }
    }).fetch();
    return instance.attachments = attachments;
  });
  JsonRoutes.sendResult(res, {
    code: 200,
    data: {
      "status": "success",
      "sync_token": ret_sync_token,
      "data": instances
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"steedos_css.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/steedos_css.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/steedos-css", function (req, res, next) {
  var allCss, allCssLink;
  allCss = WebApp.getRefreshableAssets();
  allCssLink = "";
  allCss.forEach(function (css) {
    var cssHref, rootUrl;

    if (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX) {
      rootUrl = __meteor_runtime_config__.ROOT_URL;

      if (rootUrl.endsWith("/")) {
        cssHref = rootUrl.replace(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX + "/", "") + css.url;
      } else {
        cssHref = rootUrl.replace(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX, "") + css.url;
      }
    } else {
      cssHref = Meteor.absoluteUrl(css.url);
    }

    return allCssLink += "@import url(" + cssHref + ");";
  });
  res.statusCode = 200;
  return res.end(allCssLink);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft_view.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/routes/instance_draft_view.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
JsonRoutes.add("get", "/api/workflow/space/:space/view/draft/:flow", function (req, res, next) {
  var dataBuf, flow, flowId, form, html, instance, options, space, spaceId, user, user_id;

  if (!Steedos.APIAuthenticationCheck(req, res)) {
    return;
  }

  user_id = req.userId;
  user = db.users.findOne({
    _id: user_id
  });
  spaceId = req.params.space;
  flowId = req.params.flow;
  space = db.spaces.findOne({
    _id: spaceId
  });
  flow = db.flows.findOne({
    _id: flowId
  }, {
    fields: {
      name: 1,
      'current._id': 1,
      form: 1
    }
  });
  form = db.forms.findOne({
    _id: flow.form
  }, {
    fields: {
      'current._id': 1
    }
  });
  options = {
    showTrace: false,
    showAttachments: false,
    templateName: "default",
    editable: true,
    width: "100%",
    instance_style: "instance-default",
    plugins: "\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"format-detection\" content=\"telephone=no\">\n<meta http-equiv=\"x-rim-auto-match\" content=\"none\">\n<title>" + flow.name + "</title>\n<meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />\n<meta name=\"viewport\" content=\"width=device-width\" />\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.min.css\">\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js\" type=\"text/javascript\"></script>\n\n<script src=\"/plugins/bootstrap-datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/plugins/toastr/toastr.min.css\">\n<script src=\"/plugins/toastr/toastr.min.js\" type=\"text/javascript\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/js/workflow_client.css\">\n<script src=\"/js/workflow_client.js\" type=\"text/javascript\"></script>"
  };
  instance = {
    flow: flow._id,
    flow_version: flow.current._id,
    form: form._id,
    form_version: form.current._id,
    values: {},
    name: flow.name,
    space: spaceId
  };
  html = InstanceReadOnlyTemplate.getInstanceHtml(user, space, instance, options);
  dataBuf = new Buffer(html);
  res.setHeader('content-length', dataBuf.length);
  res.setHeader('content-range', "bytes 0-" + (dataBuf.length - 1) + "/" + dataBuf.length);
  res.statusCode = 200;
  return res.end(html);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lib":{"1_form_formula.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/1_form_formula.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Array.prototype.filterProperty = function (h, l) {
  var g = [];
  this.forEach(function (t) {
    var m = t ? t[h] : null;
    var d = false;

    if (m instanceof Array) {
      d = m.includes(l);
    } else {
      d = l === undefined ? false : m == l;
    }

    if (d) {
      g.push(t);
    }
  });
  return g;
};

Array.prototype.getProperty = function (k) {
  var v = new Array();
  this.forEach(function (t) {
    var m = t ? t[k] : null;
    v.push(m);
  });
  return v;
};

Array.prototype.getEach = function (code) {
  var rev = [];

  for (var i = 0; i < this.length; i++) {
    rev.push(this[i][code]);
  }

  return rev;
};

Array.prototype.uniq = function () {
  var a = [];
  this.forEach(function (b) {
    if (a.indexOf(b) < 0) {
      a[a.length] = b;
    }
  });
  return a;
};

Form_formula = {};

Form_formula.mixin = function (dest, src) {
  for (var key in src) {
    dest[key] = src[key];
  }

  return dest;
};

Form_formula.handerUserObject = function (u) {
  if (u instanceof Array) {
    var user = {};
    user.name = u.getProperty("name");
    user.organization = {};
    user.organization.name = u.getProperty("organization").getProperty("name");
    user.organization.fullname = u.getProperty("organization").getProperty("fullname");
    user.hr = u.getProperty("hr");
    user.sort_no = u.getProperty("sort_no");
    user.mobile = u.getProperty("mobile");
    user.work_phone = u.getProperty("work_phone");
    user.position = u.getProperty("position");
    var userRoles = u.getProperty("roles");
    var roles = new Array();
    userRoles.forEach(function (i) {
      roles = roles.concat(i);
    });
    roles.uniq();
    user.roles = roles;
    return user;
  } else {
    return u;
  }
};

Form_formula.handerOrgObject = function (o) {
  if (o instanceof Array) {
    var org = {};
    org.id = o.getProperty("_id");
    org.name = o.getProperty("name");
    org.fullname = o.getProperty("fullname");
    return org;
  } else {
    return o;
  }
};
/**
    * 获得公式需要用到的初始值
    * 输入：fields, values, applicant
    * 输出：__values
**/


Form_formula.init_formula_values = function (fields, autoFormDoc, approver, applicant, spaceId) {
  var __values = {}; //申请单中填的值处理

  if (fields && fields.length && autoFormDoc) {
    //debugger;
    fields.forEach(function (field) {
      var type = field.type;

      if (type) {
        if (type === 'table') {
          /*
          * 将表格字段的值进行转换后传入__values中
          * values中表格的值格式为
          * [{"a":1,"b":4},{"a":2,"b":5},{"a":3,"b":6}]
          * __values需要转化为下面格式且和主表的值一样放到第一层
          * {"a":[1,2,3],"b":[4,5,6]}
          **/
          var tableFields = field.sfields,
              tableValues = autoFormDoc[field.code],
              formulaTableValues = [],
              __tableValues = {}; //按公式的格式转换值为__tableValues

          if (tableFields && tableFields.length && tableValues && tableValues instanceof Array) {
            tableValues.forEach(function (tableValue) {
              formulaTableValues.push(Form_formula.init_formula_values(tableFields, tableValue));
            }, this); //按主表的格式转换__tableValues加到

            tableFields.forEach(function (tablefield) {
              __tableValues[tablefield.code] = formulaTableValues.getEach(tablefield.code);
            });
            __values = Form_formula.mixin(__values, __tableValues);
          }
        } else if (type == 'user') {
          __values[field.code] = Form_formula.handerUserObject(WorkflowManager.getFormulaUserObjects(spaceId, autoFormDoc[field.code]));
        } else if (type == 'group') {
          __values[field.code] = Form_formula.handerOrgObject(WorkflowManager.getFormulaOrgObjects(autoFormDoc[field.code]));
        } else if (type == 'odata') {
          __values[field.code] = autoFormDoc[field.code] || {};
        } else {
          //此处传spaceId给选人控件的旧数据计算roles和organization
          __values[field.code] = autoFormDoc[field.code];
        }
      }
    }, this);
  } //当前处理人


  __values["approver"] = WorkflowManager.getFormulaUserObject(spaceId, approver); //申请人

  __values["applicant"] = WorkflowManager.getFormulaUserObject(spaceId, applicant);
  return __values;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"get_handlers_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/get_handlers_manager.coffee                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
getHandlersManager = {};

getHandlersManager.getHandlersByUsersAndRoles = function (user_ids, role_ids, space_id) {
  var approve_users;
  approve_users = new Array();

  _.each(user_ids, function (user_id) {
    var users;

    if (db.users.find({
      _id: user_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRoles(user_id, role_ids, space_id);

      if (users.length > 0) {
        return approve_users = approve_users.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "user_id不合法不合法");
    }
  });

  approve_users = _.uniq(approve_users);
  return approve_users;
};

getHandlersManager.getHandlersByUserAndRoles = function (user_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;

    if (db.flow_roles.find({
      _id: role_id
    }).count() > 0) {
      users = getHandlersManager.getHandlersByUserAndRole(user_id, role_id, space_id);

      if (users.length > 0) {
        return user_ids = user_ids.concat(users);
      }
    } else {
      throw new Meteor.Error('error!', "role_id已经被删除");
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据user_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByUserAndRole = function (user_id, role_id, space_id) {
  var orgs, user_ids;
  orgs = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      _id: 1
    }
  }).fetch();
  user_ids = new Array();

  _.each(orgs, function (org) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org._id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgsAndRoles = function (org_ids, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(org_ids, function (org_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRoles(org_id, role_ids, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlersByOrgAndRoles = function (org_id, role_ids, space_id) {
  var user_ids;
  user_ids = new Array();

  _.each(role_ids, function (role_id) {
    var users;
    users = getHandlersManager.getHandlersByOrgAndRole(org_id, role_id, space_id);

    if (users.length > 0) {
      return user_ids = user_ids.concat(users);
    }
  });

  if (user_ids.length > 0) {
    user_ids = _.uniq(user_ids);
    return user_ids;
  } else {
    throw new Meteor.Error('error!', "根据org_id和role_ids没查到对应的处理人");
  }
};

getHandlersManager.getHandlersByOrgAndRole = function (org_id, role_id, space_id) {
  var org, parents, positions, user_ids;
  org = db.organizations.findOne({
    _id: org_id
  }, {
    fields: {
      parents: 1
    }
  });
  user_ids = new Array();
  positions = db.flow_positions.find({
    space: space_id,
    org: org_id,
    role: role_id
  }, {
    fields: {
      users: 1
    }
  }).fetch();

  _.each(positions, function (position) {
    return user_ids = user_ids.concat(position.users);
  });

  if (user_ids.length === 0) {
    parents = org.parents;

    _.each(parents, function (parent_id) {
      positions = db.flow_positions.find({
        space: space_id,
        org: parent_id,
        role: role_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();

      if (positions.length > 0) {
        return _.each(positions, function (position) {
          return user_ids = user_ids.concat(position.users);
        });
      }
    });
  }

  user_ids = _.uniq(user_ids);
  return user_ids;
};

getHandlersManager.getHandlers = function (instance_id, step_id) {
  var _approve, _space_user, _trace, applicant, applicantSuperiors, approveHrRoleIds, approve_users, approver_org_field, approver_org_ids, approver_step, approver_user_field, approver_user_ids, current, current_flow, current_flow_version, current_form, current_step, current_steps, deal_type, field_code, finished_traces, flow_id, flow_rev, form, form_fields, form_id, form_rev, handlers, instance, max_startDate_trace, new_approver_user_ids, new_org_user_ids, newest_values, next_step_users, org_ids, org_ids_names, org_user_ids, space_id, space_user_count, submitter, submitter_user_count, unfinished_trace, user_ids, user_ids_names, users, valid_approver_org_ids;

  instance = db.instances.findOne(instance_id);

  if (instance.step_approve && instance.step_approve[step_id]) {
    return instance.step_approve[step_id];
  }

  approve_users = new Array();
  space_id = instance.space;
  flow_id = instance.flow;
  flow_rev = instance.flow_version;
  current_flow = db.flows.findOne(flow_id);
  current_step = null;
  current_steps = new Array();

  if (current_flow.current._id === flow_rev) {
    current_steps = current_flow.current.steps;
  } else {
    current = _.find(current_flow.historys, function (history) {
      return history._id === flow_rev;
    });
    current_steps = current.steps;
  }

  current_step = _.find(current_steps, function (step) {
    return step._id === step_id;
  });

  if (current_step.step_type === "condition") {
    unfinished_trace = _.find(instance.traces, function (trace) {
      return trace.is_finished === false;
    });
    return new Array(unfinished_trace.approves[0].user);
  }

  if (current_step.step_type === "start") {
    handlers = new Array();
    handlers.push(instance.applicant);
    handlers.push(instance.submitter);
    handlers = _.uniq(handlers);
    return handlers;
  }

  deal_type = current_step.deal_type;
  users = new Array();

  if (deal_type === "applicantRole") {
    applicant = instance.applicant;

    if (applicant) {
      space_user_count = db.space_users.find({
        space: space_id,
        user: applicant
      }).count();

      if (space_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
      }

      if (current_step.approver_roles && current_step.approver_roles.length > 0) {
        _.each(current_step.approver_roles, function (approver_role) {
          var role_count;
          role_count = db.flow_roles.find({
            _id: approver_role
          }).count();

          if (role_count === 0) {
            throw new Meteor.Error('error!', "角色已经被删除");
          }
        });

        return getHandlersManager.getHandlersByUserAndRoles(applicant, current_step.approver_roles, space_id);
      } else {
        throw new Meteor.Error('error!', "审批岗位未指定");
      }
    } else {
      throw new Meteor.Error('error!', "Instance的提交人为空");
    }
  } else if (deal_type === "hrRole") {
    approveHrRoleIds = current_step.approver_hr_roles;

    if (approveHrRoleIds) {
      return _.pluck(WorkflowManager.getHrRolesUsers(space_id, approveHrRoleIds), 'user');
    } else {
      throw new Meteor.Error('error!', "角色未指定");
    }
  } else if (deal_type === "applicant") {
    applicant = instance.applicant;
    space_user_count = db.space_users.find({
      space: space_id,
      user: applicant
    }).count();

    if (space_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前space");
    } else {
      return new Array(applicant);
    }
  } else if (deal_type === "orgFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByOrgsAndRoles(org_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "orgField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_org_field = current_step.approver_org_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_org_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    org_ids = new Array();
    org_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        org_ids_names = newest_values[field_code];
      } else {
        org_ids_names.push(newest_values[field_code]);
      }
    }

    _.each(org_ids_names, function (org) {
      var check_org_count;
      check_org_count = db.organizations.find({
        _id: org["id"]
      }).count();

      if (check_org_count === 0) {
        throw new Meteor.Error('error!', "组织ID不合法");
      }

      return org_ids.push(org["id"]);
    });

    user_ids = new Array();

    _.each(org_ids, function (org_id) {
      var check_orgs, org, org_children, org_users;
      org = db.organizations.findOne({
        _id: org_id
      }, {
        fields: {
          users: 1
        }
      });
      org_children = db.organizations.find({
        space: space_id,
        parents: org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      org_children.unshift(org);
      check_orgs = org_children;
      org_users = new Array();

      _.each(check_orgs, function (check_org_user) {
        if (check_org_user.users) {
          _.each(check_org_user.users, function (org_user) {
            if (db.space_users.find({
              space: space_id,
              user: org_user
            }).count() === 0) {
              throw new Meteor.Error('error!', "space下不存在此user");
            }
          });
        }

        user_ids = user_ids.concat(check_org_user.users);
        return org_users = org_users.concat(check_org_user.users);
      });

      if (org_users.length === 0) {
        throw new Meteor.Error('error!', "组织" + org_id + "不存在处理人");
      }
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "userFieldRole") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);

    if (current_step.approver_roles && current_step.approver_roles.length > 0) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', approver_role + "已经被删除");
        }
      });

      return getHandlersManager.getHandlersByUsersAndRoles(user_ids, current_step.approver_roles, instance.space);
    } else {
      throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
    }
  } else if (deal_type === "userField") {
    form_id = current_flow.form;
    form_rev = null;

    if (flow_rev === current_flow.current._id) {
      form_rev = current_flow.current.form_version;
    } else {
      current_flow_version = _.find(current_flow.historys, function (current_flow_history) {
        return current_flow_history._id === flow_rev;
      });

      if (current_flow_version) {
        form_rev = current_flow_version.form_version;
      }
    }

    form = db.forms.findOne(form_id);
    current_form = null;

    if (form_rev === form.current._id) {
      current_form = form.current;
    } else {
      current_form = _.find(form.historys, function (form_history) {
        return form_history._id === form_rev;
      });
    }

    approver_user_field = current_step.approver_user_field;
    form_fields = current_form.fields;
    field_code = null;

    _.each(form_fields, function (form_field) {
      if (form_field._id === approver_user_field) {
        return field_code = form_field.code;
      }
    });

    newest_values = uuflowManager.getUpdatedValues(instance);
    user_ids_names = new Array();

    if (newest_values[field_code]) {
      if (newest_values[field_code] instanceof Array) {
        user_ids_names = newest_values[field_code];
      } else {
        user_ids_names.push(newest_values[field_code]);
      }
    }

    user_ids = new Array();

    _.each(user_ids_names, function (user) {
      var check_user_count;
      check_user_count = db.space_users.find({
        space: space_id,
        user: user["id"]
      }).count();

      if (check_user_count === 0) {
        throw new Meteor.Error('error!', "人员ID不合法");
      }

      return user_ids.push(user["id"]);
    });

    user_ids = _.uniq(user_ids);
    return user_ids;
  } else if (deal_type === "specifyStepRole") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    if (current_step.approver_roles) {
      _.each(current_step.approver_roles, function (approver_role) {
        var role_count;
        role_count = db.flow_roles.find({
          _id: approver_role
        }).count();

        if (role_count === 0) {
          throw new Meteor.Error('error!', "角色已经被删除");
        }
      });
    }

    _.each(approve_users, function (approve_user) {
      if (db.space_users.find({
        space: space_id,
        user: approve_user
      }).count() === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    return getHandlersManager.getHandlersByUsersAndRoles(approve_users, current_step.approver_roles, space_id);
  } else if (deal_type === "specifyStepUser") {
    approver_step = current_step.approver_step;
    finished_traces = new Array();

    _.each(instance.traces, function (trace) {
      if (trace.step === approver_step) {
        return finished_traces.push(trace);
      }
    });

    max_startDate_trace = _.max(finished_traces, function (t) {
      return t.start_date;
    });
    approve_users = _.pluck(max_startDate_trace.approves, "user");

    _.each(approve_users, function (approve_user) {
      var check_approve_user_count;
      check_approve_user_count = db.space_users.find({
        space: space_id,
        user: approve_user
      }).count();

      if (check_approve_user_count === 0) {
        throw new Meteor.Error('error!', "指定步骤的处理人已经变更");
      }
    });

    approve_users = _.uniq(approve_users);
    return approve_users;
  } else if (deal_type === "submitterRole") {
    submitter = instance.submitter;

    if (!submitter) {
      submitter_user_count = db.space_users.find({
        space: space_id,
        user: submitter
      }).count();

      if (submitter_user_count === 0) {
        throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
      } else {
        if (current_step.approver_roles && current_step.approver_roles.length > 0) {
          _.each(current_step.approver_roles, function (approver_role) {
            var role_count;
            role_count = db.flow_roles.find({
              _id: approver_role
            }).count();

            if (role_count === 0) {
              throw new Meteor.Error('error!', approver_role + "已经被删除");
            }
          });

          return getHandlersManager.getHandlersByUserAndRoles(submitter, current_step.approver_roles, space_id);
        } else {
          throw new Meteor.Error('error!', "流程步骤" + current_step.name + "审批岗位未指定");
        }
      }
    } else {
      throw new Meteor.Error('error!', "申请单的提交人为空");
    }
  } else if (deal_type === "submitter") {
    submitter = instance.submitter;
    submitter_user_count = db.space_users.find({
      space: space_id,
      user: submitter
    }).count();

    if (submitter_user_count === 0) {
      throw new Meteor.Error('error!', "提交人已经被删除或不属于当前工作区");
    } else {
      return new Array(submitter);
    }
  } else if (deal_type === "specifyOrg") {
    approver_org_ids = current_step.approver_orgs;

    if (!approver_org_ids || approver_org_ids.length === 0) {
      throw new Meteor.Error('error!', "未定义用于查找下一步处理人的部门，请联系管理员调查流程图的配置是否正确");
    }

    valid_approver_org_ids = new Array();

    _.each(approver_org_ids, function (approver_org_id) {
      if (db.organizations.find({
        _id: approver_org_id
      }).count() > 0) {
        return valid_approver_org_ids.unshift(approver_org_id);
      }
    });

    org_user_ids = new Array();

    _.each(valid_approver_org_ids, function (valid_approver_org_id) {
      var child_orgs, valid_approver_org;
      valid_approver_org = db.organizations.findOne({
        _id: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      });

      if (valid_approver_org.users) {
        org_user_ids = org_user_ids.concat(valid_approver_org.users);
      }

      child_orgs = db.organizations.find({
        space: space_id,
        parents: valid_approver_org_id
      }, {
        fields: {
          users: 1
        }
      }).fetch();
      return _.each(child_orgs, function (child_org) {
        if (child_org.users) {
          return org_user_ids = org_user_ids.concat(child_org.users);
        }
      });
    });

    org_user_ids = _.uniq(org_user_ids);
    new_org_user_ids = new Array();

    _.each(org_user_ids, function (org_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: org_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_org_user_ids.push(org_user_id);
      }
    });

    return new_org_user_ids;
  } else if (deal_type === "specifyUser") {
    approver_user_ids = current_step.approver_users;
    approver_user_ids = _.uniq(approver_user_ids);
    new_approver_user_ids = new Array();

    _.each(approver_user_ids, function (approver_user_id) {
      var space_user_info_count;
      space_user_info_count = db.space_users.find({
        space: space_id,
        user: approver_user_id
      }).count();

      if (space_user_info_count > 0) {
        return new_approver_user_ids.push(approver_user_id);
      }
    });

    return new_approver_user_ids;
  } else if (deal_type === "pickupAtRuntime") {
    next_step_users = new Array();
    _trace = _.find(instance.traces, function (_tr) {
      return _tr.is_finished === false;
    });
    _approve = _.find(_trace.approves, function (_app) {
      return _app.is_finished === false && _app.type !== 'cc';
    });

    if (_approve.next_steps) {
      if (_approve.next_steps[0]["users"]) {
        next_step_users = _approve.next_steps[0]["users"];
      }
    }

    return next_step_users;
  } else if (deal_type === "applicantSuperior") {
    applicantSuperiors = new Array();
    _space_user = db.space_users.findOne({
      space: space_id,
      user: instance.applicant
    }, {
      fields: {
        manager: 1
      }
    });

    if (_space_user.manager) {
      applicantSuperiors.push(_space_user.manager);
    }

    return applicantSuperiors;
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"permission_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/permission_manager.coffee                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
permissionManager = {};

permissionManager.getFlowPermissions = function (flow_id, user_id) {
  var flow, my_permissions, org_ids, organizations, orgs_can_add, orgs_can_admin, orgs_can_monitor, space_id, users_can_add, users_can_admin, users_can_monitor;
  flow = uuflowManager.getFlow(flow_id);
  space_id = flow.space;
  org_ids = new Array();
  organizations = db.organizations.find({
    space: space_id,
    users: user_id
  }, {
    fields: {
      parents: 1
    }
  }).fetch();

  _.each(organizations, function (org) {
    org_ids.push(org._id);

    if (org.parents) {
      return _.each(org.parents, function (parent_id) {
        return org_ids.push(parent_id);
      });
    }
  });

  org_ids = _.uniq(org_ids);
  my_permissions = new Array();

  if (flow.perms) {
    if (flow.perms.users_can_add) {
      users_can_add = flow.perms.users_can_add;

      if (users_can_add.includes(user_id)) {
        my_permissions.push("add");
      }
    }

    if (flow.perms.orgs_can_add) {
      orgs_can_add = flow.perms.orgs_can_add;

      _.each(org_ids, function (org_id) {
        if (orgs_can_add.includes(org_id)) {
          return my_permissions.push("add");
        }
      });
    }

    if (flow.perms.users_can_monitor) {
      users_can_monitor = flow.perms.users_can_monitor;

      if (users_can_monitor.includes(user_id)) {
        my_permissions.push("monitor");
      }
    }

    if (flow.perms.orgs_can_monitor) {
      orgs_can_monitor = flow.perms.orgs_can_monitor;

      _.each(org_ids, function (org_id) {
        if (orgs_can_monitor.includes(org_id)) {
          return my_permissions.push("monitor");
        }
      });
    }

    if (flow.perms.users_can_admin) {
      users_can_admin = flow.perms.users_can_admin;

      if (users_can_admin.includes(user_id)) {
        my_permissions.push("admin");
      }
    }

    if (flow.perms.orgs_can_admin) {
      orgs_can_admin = flow.perms.orgs_can_admin;

      _.each(org_ids, function (org_id) {
        if (orgs_can_admin.includes(org_id)) {
          return my_permissions.push("admin");
        }
      });
    }
  }

  my_permissions = _.uniq(my_permissions);
  return my_permissions;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"approve_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/approve_manager.coffee                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
approveManager = {}; /*
                         对比approve_values与last_values 对象， 返回approve_values比last_values多出的或者改变的部分
                      */

approveManager.getChangeValues = function (last_values, approve_values) {
  var approve_values_keys, changeValues, last_values_keys;
  changeValues = {};
  last_values_keys = _.keys(last_values);
  approve_values_keys = _.keys(approve_values);
  approve_values_keys.forEach(function (key) {
    if (_.contains(last_values_keys, key)) {
      if (!_.isEqual(last_values[key], approve_values[key])) {
        return changeValues[key] = approve_values[key];
      }
    } else {
      if (approve_values[key] !== '') {
        return changeValues[key] = approve_values[key];
      }
    }
  });
  return changeValues;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/flow_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
flowManager = {};

flowManager.getCategoriesFlows = function (spaceId, categorieId, fields) {
  var categoriesForms;
  categoriesForms = formManager.getCategoriesForms(spaceId, categorieId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: categoriesForms.getProperty("_id")
    }
  });
};

flowManager.getUnCategoriesFlows = function (spaceId, fields) {
  var unCategoriesForms;
  unCategoriesForms = formManager.getUnCategoriesForms(spaceId, {
    _id: 1
  }).fetch();
  return db.flows.find({
    form: {
      $in: unCategoriesForms.getProperty("_id")
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"form_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/form_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
formManager = {};

formManager.getCategoriesForms = function (spaceId, categorieId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: categorieId,
    state: "enabled"
  }, _fields);
};

formManager.getUnCategoriesForms = function (spaceId, fields) {
  var _fields;

  if (fields) {
    _fields = {
      fields: fields
    };
  }

  return db.forms.find({
    space: spaceId,
    category: {
      $in: [null, ""]
    },
    state: "enabled"
  }, _fields);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"step_manager.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/step_manager.coffee                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
stepManager = {};

stepManager.allowBatch = function (step) {
  return step.allowBatch;
};

stepManager.getStep = function (instance, flow, step_id) {
  var flow_rev, isExistStep;
  flow_rev = instance.flow_version;
  isExistStep = null;

  if (flow.current._id === flow_rev) {
    isExistStep = _.find(flow.current.steps, function (step) {
      return step._id === step_id;
    });
  } else {
    _.each(flow.historys, function (history) {
      if (history._id === flow_rev) {
        return isExistStep = _.find(history.steps, function (step) {
          return step._id === step_id;
        });
      }
    });
  }

  if (!isExistStep) {
    throw new Meteor.Error('error!', "不能获取step");
  }

  return isExistStep;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_manager.coffee":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/lib/instance_manager.coffee                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var _eval, logger;

_eval = require('eval');
InstanceManager = {};
logger = new Logger('Workflow -> InstanceManager');

InstanceManager.handlerInstanceByFieldMap = function (ins, field_map) {
  var context, e, flow, res, script;
  res = ins;

  if (ins) {
    if (!field_map) {
      flow = db.flows.findOne({
        _id: ins.flow
      }, {
        fields: {
          field_map: 1
        }
      });

      if (flow != null ? flow.field_map : void 0) {
        field_map = flow.field_map;
      }
    }

    if (field_map) {
      context = _.clone(ins);
      context._ = _;
      script = "var instances = " + field_map + "; exports.instances = instances";

      try {
        res = _eval(script, "handlerInstanceByFieldMap", context, false).instances;
      } catch (error) {
        e = error;
        res = {
          _error: e
        };
        logger.error(e);
      }
    }
  }

  return res;
};

InstanceManager.getCurrentApprove = function (instance, handler) {
  var currentApprove, currentApproves, currentTraces;

  if (!instance || !instance.traces || instance.traces.length < 1) {
    return;
  }

  currentTraces = instance.traces.filterProperty('is_finished', false);

  if (currentTraces.length) {
    currentApproves = currentTraces[0].approves.filterProperty('is_finished', false).filterProperty('handler', handler);
    currentApprove = currentApproves.length > 0 ? currentApproves[0] : null;
  }

  if (!currentApprove || currentApprove.type === 'cc') {
    _.each(instance.traces, function (t) {
      _.each(t.approves, function (a) {
        if (a.type === 'cc' && a.user === handler && a.is_finished === false) {
          currentApprove = a;
        }
      });
    });
  }

  if (!currentApprove) {
    return;
  }

  return currentApprove;
};

InstanceManager.getCurrentTrace = function (instance, traceId) {
  return instance.traces.findPropertyByPK("_id", traceId);
};

InstanceManager.getMyApprove = function (instanceId, userId) {
  var flow, instance, judge, my_approve, nextSteps, next_user_ids, step, step_type, trace;
  instance = db.instances.findOne({
    _id: instanceId
  });
  flow = uuflowManager.getFlow(instance.flow);
  my_approve = InstanceManager.getCurrentApprove(instance, userId);

  if (my_approve) {
    trace = InstanceManager.getCurrentTrace(instance, my_approve.trace);
    step = uuflowManager.getStep(instance, flow, trace.step);
    step_type = step.step_type;
    judge = step_type === "sign" ? "approved" : "";
    nextSteps = uuflowManager.getNextSteps(instance, flow, step, judge);

    if (nextSteps.length === 1) {
      if (step_type === "sign" || step_type === "counterSign") {
        my_approve.judge = 'approved';
      }

      next_user_ids = getHandlersManager.getHandlers(instance._id, nextSteps[0]);

      if (!next_user_ids) {
        my_approve.next_steps = [{
          step: nextSteps[0],
          users: []
        }];
        return my_approve;
      }

      if (next_user_ids.length === 1) {
        my_approve.next_steps = [{
          step: nextSteps[0],
          users: next_user_ids
        }];
        return my_approve;
      }
    }
  }
};

InstanceManager.getBatchInstances = function (space, categoryId, flowIds, inbox_user) {
  var FIELDS, _batch_instances, categoryFlows, inbox_instances, query, unCategoryFlows;

  _batch_instances = new Array();
  query = {
    space: space,
    inbox_users: inbox_user
  };
  FIELDS = {
    name: 1,
    applicant_name: 1,
    submit_date: 1,
    flow_version: 1,
    "traces.step": 1,
    flow: 1,
    current_step_name: 1,
    flow_name: 1
  };

  if (categoryId) {
    if (categoryId === '-1') {
      unCategoryFlows = flowManager.getUnCategoriesFlows(space, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: unCategoryFlows
      };
    } else {
      categoryFlows = flowManager.getCategoriesFlows(space, categoryId, {
        _id: 1
      }).fetch().getProperty("_id");
      query.flow = {
        $in: categoryFlows
      };
    }
  }

  if (flowIds) {
    query.flow = {
      $in: flowIds
    };
  }

  inbox_instances = db.instances.find(query, {
    fields: FIELDS,
    skip: 0,
    limit: 100
  });
  inbox_instances.forEach(function (ins) {
    var currentStep, currentStepId, flow, myApprove;
    currentStepId = _.last(ins.traces).step;
    flow = db.flows.findOne({
      _id: ins.flow
    });
    currentStep = stepManager.getStep(ins, flow, currentStepId);
    myApprove = InstanceManager.getMyApprove(ins._id, inbox_user);

    if (stepManager.allowBatch(currentStep) && myApprove) {
      delete ins.flow_version;
      delete ins.traces;
      delete ins.flow;
      ins.approve_start_date = myApprove.start_date;
      return _batch_instances.push(ins);
    }
  });
  return _batch_instances;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"categories.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/categories.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('categories', function (spaceId) {
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.categories.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      space: 1,
      sort_no: 1,
      app: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cfs_instances.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/cfs_instances.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('cfs_instances', function (instanceIds) {
  check(instanceIds, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceIds) {
    return this.ready();
  }

  return cfs.instances.find({
    'metadata.instance': {
      $in: instanceIds
    },
    $or: [{
      'metadata.is_private': {
        $ne: true
      }
    }, {
      'metadata.is_private': true,
      "metadata.owner": this.userId
    }]
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_positions', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_positions.find({
    space: spaceId
  }, {
    fields: {
      role: 1,
      users: 1,
      org: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_positions_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_positions_tabular.coffee                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publishComposite('flow_positions_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flow_positions.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (position) {
        this.unblock();
        return db.flow_roles.find({
          _id: position.role
        }, {
          fields: {
            name: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.organizations.find({
          _id: position.org
        }, {
          fields: {
            fullname: 1
          }
        });
      }
    }, {
      find: function (position) {
        this.unblock();
        return db.space_users.find({
          space: position.space,
          user: {
            $in: position.users
          }
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_roles.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_roles.coffee                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_roles', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.flow_roles.find({
    space: spaceId
  }, {
    fields: {
      name: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flows.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flows.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flows', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (db.flows.find({
    space: spaceId
  }).count() === 0) {
    db.spaces.createTemplateFormAndFlow(spaceId);
  }

  return db.flows.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      company_id: 1,
      sort_no: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1
    }
  });
});
Meteor.publish('flow_version', function (spaceId, flowId, versionId) {
  var getFlowVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFlowVersion = function (id, versionId) {
    var flow, flow_version;
    flow = db.flows.findOne({
      _id: id
    });

    if (flow) {
      flow_version = flow.current;
      flow_version.latest = true;

      if (flow_version._id !== versionId) {
        flow_version = flow.historys.findPropertyByPK("_id", versionId);
        flow_version.latest = false;
      }

      return flow_version;
    }
  };

  handle = db.flows.find({
    _id: flowId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("flow_versions", versionId, getFlowVersion(id, versionId));
    }
  });
  self.added("flow_versions", versionId, getFlowVersion(flowId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('distribute_optional_flows', function (flow_ids) {
  if (!this.userId) {
    return this.ready();
  }

  if (!flow_ids) {
    return this.ready();
  }

  return db.flows.find({
    _id: {
      $in: flow_ids
    }
  }, {
    fields: {
      name: 1,
      form: 1,
      state: 1,
      perms: 1,
      space: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      distribute_end_notification: 1,
      company_id: 1
    }
  });
});
Meteor.publish('flow', function (spaceId, flowId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  return db.flows.find({
    _id: flowId,
    space: spaceId
  }, {
    fields: {
      print_template: 1,
      instance_template: 1,
      events: 1,
      distribute_optional_users: 1,
      distribute_to_self: 1,
      upload_after_being_distributed: 1,
      distribute_end_notification: 1,
      company_id: 1,
      allow_select_step: 1
    }
  });
});
Meteor.publish('flow_files', function (spaceId, flowId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!flowId) {
    return this.ready();
  }

  return cfs.files.find({
    'metadata.space': spaceId,
    'metadata.object_name': 'flows',
    'metadata.record_id': flowId
  });
});
Meteor.publishComposite('flows_tabular', function (tableName, ids, fields) {
  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));

  if (!this.userId) {
    return this.ready();
  }

  this.unblock();
  return {
    find: function () {
      this.unblock();
      return db.flows.find({
        _id: {
          $in: ids
        }
      }, {
        fields: fields
      });
    },
    children: [{
      find: function (flow) {
        this.unblock();
        return db.space_users.find({
          space: flow.space,
          user: flow.current.modified_by
        }, {
          fields: {
            space: 1,
            user: 1,
            name: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.forms.find({
          space: flow.space,
          _id: flow.form
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1,
            category: 1
          }
        });
      }
    }, {
      find: function (flow) {
        this.unblock();
        return db.categories.find({
          space: flow.space
        }, {
          fields: {
            space: 1,
            _id: 1,
            name: 1
          }
        });
      }
    }]
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"forms.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/forms.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('forms', function (spaceId) {
  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  return db.forms.find({
    space: spaceId
  }, {
    fields: {
      name: 1,
      category: 1,
      state: 1,
      description: 1,
      instance_style: 1
    }
  });
});
Meteor.publish('form_version', function (spaceId, formId, versionId) {
  var getFormVersion, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  if (!formId) {
    return this.ready();
  }

  if (!versionId) {
    return this.ready();
  }

  self = this;

  getFormVersion = function (id, versionId) {
    var form, form_version;
    form = db.forms.findOne({
      _id: id
    });

    if (!form) {
      return {};
    }

    form_version = form.current;
    form_version.latest = true;

    if (form_version._id !== versionId) {
      form_version = form.historys.findPropertyByPK("_id", versionId);
      form_version.latest = false;
    }

    return form_version;
  };

  handle = db.forms.find({
    _id: formId
  }, {
    fields: {
      _id: 1,
      "current.modified": 1
    }
  }).observeChanges({
    changed: function (id) {
      return self.changed("form_versions", versionId, getFormVersion(id, versionId));
    }
  });
  self.added("form_versions", versionId, getFormVersion(formId, versionId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_data.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_data.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instance_data', function (instanceId, box) {
  var getMiniInstance, getMyapproveModified, handle, instance, instance_fields_0, miniApproveFields, needChange, self, triggerChangeFields, triggerChangeFieldsValues;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;
  miniApproveFields = ['_id', 'is_finished', 'user', 'handler', 'handler_name', 'type', 'start_date', 'description', 'is_read', 'judge', 'finish_date', 'from_user_name', 'from_user', 'cc_description', 'auto_submitted'];
  triggerChangeFields = ['form_version', 'flow_version', 'related_instances', '_my_approve_read_dates'];
  triggerChangeFieldsValues = {};
  instance_fields_0 = {
    "record_synced": 0,
    "traces.approves.handler_organization_name": 0,
    "traces.approves.handler_organization": 0,
    "traces.approves.cost_time": 0,
    "traces.approves.is_error": 0,
    "traces.approves.deadline": 0,
    "traces.approves.remind_date": 0,
    "traces.approves.reminded_count": 0,
    "traces.approves.modified_by": 0,
    "traces.approves.modified": 0,
    "traces.approves.geolocation": 0,
    "traces.approves.cc_users": 0,
    "traces.approves.from_approve_id": 0,
    "traces.approves.values_history": 0
  };

  getMyapproveModified = function (traces) {
    var myApproveModifieds;
    myApproveModifieds = new Array();

    if (traces != null) {
      traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.user === self.userId || approve.handler === self.userId) {
            return myApproveModifieds.push(approve.read_date);
          }
        }) : void 0 : void 0;
      });
    }

    return myApproveModifieds;
  };

  getMiniInstance = function (_instanceId) {
    var instance, ref, ref1, show_modal_traces_list, traces;
    instance = db.instances.findOne({
      _id: _instanceId
    }, {
      fields: instance_fields_0
    });

    if (instance) {
      triggerChangeFields.forEach(function (key) {
        if (key === '_my_approve_read_dates') {
          return triggerChangeFieldsValues[key] = getMyapproveModified(instance.traces);
        } else {
          return triggerChangeFieldsValues[key] = instance[key];
        }
      });
      show_modal_traces_list = ((ref = db.space_settings.findOne({
        space: instance.space,
        key: "show_modal_traces_list"
      }, {
        fields: {
          values: 1
        }
      })) != null ? ref.values : void 0) || false;

      if (show_modal_traces_list) {
        traces = new Array();

        if (instance != null) {
          if ((ref1 = instance.traces) != null) {
            ref1.forEach(function (trace) {
              var _trace, approves, ref2;

              _trace = _.clone(trace);
              approves = new Array();

              if (trace != null) {
                if ((ref2 = trace.approves) != null) {
                  ref2.forEach(function (approve) {
                    if (approve.type !== 'cc' || approve.user === self.userId || approve.handler === self.userId || !_.isEmpty(approve.sign_field_code)) {
                      return approves.push(approve);
                    }
                  });
                }
              }

              _trace.approves = approves;
              return traces.push(_trace);
            });
          }
        }

        instance.traces = traces;
      }
    }

    return instance;
  };

  needChange = function (changeFields) {
    var _change, _rev;

    if (changeFields) {
      _change = false;
      _rev = _.find(triggerChangeFields, function (key) {
        var _key, _my_approve_modifieds;

        _key = key;

        if (key === '_my_approve_read_dates') {
          _key = 'traces';
        }

        if (_.has(changeFields, _key)) {
          if (key === '_my_approve_read_dates') {
            _my_approve_modifieds = getMyapproveModified(changeFields.traces);
            return !_.isEqual(triggerChangeFieldsValues[key], _my_approve_modifieds);
          } else {
            return !_.isEqual(triggerChangeFieldsValues[key], changeFields[key]);
          }
        }
      });

      if (_rev) {
        _change = true;
      }

      return _change;
    }

    return true;
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id, fields) {
      if (box !== 'inbox' || needChange(fields)) {
        return self.changed("instances", id, getMiniInstance(id));
      }
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  instance = getMiniInstance(instanceId);
  self.added("instances", instance != null ? instance._id : void 0, instance);
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
Meteor.publish('instance_traces', function (instanceId) {
  var getInstanceTraces, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  self = this;

  getInstanceTraces = function (_insId) {
    return db.instances.findOne({
      _id: _insId
    }, {
      fields: {
        _id: 1,
        traces: 1
      }
    });
  };

  handle = db.instances.find({
    _id: instanceId
  }).observeChanges({
    changed: function (id) {
      return self.changed("instance_traces", instanceId, getInstanceTraces(instanceId));
    }
  });
  self.added("instance_traces", instanceId, getInstanceTraces(instanceId));
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_list.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_list.coffee                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_list', function (spaceId, box, flowId) {
  var query;

  if (!this.userId) {
    return this.ready();
  }

  if (!spaceId) {
    return this.ready();
  }

  query = {
    space: spaceId
  };

  if (box === "inbox") {
    query.inbox_users = this.userId;
  } else if (box === "outbox") {
    query.outbox_users = this.userId;
  } else if (box === "draft") {
    query.submitter = this.userId;
    query.state = "draft";
  } else if (box === "pending") {
    query.submitter = this.userId;
    query.state = "pending";
  } else if (box === "completed") {
    query.submitter = this.userId;
    query.state = "completed";
  } else if (box === "monitor") {
    query.flow = flowId;
    query.state = {
      $in: ["pending", "completed"]
    };
  } else {
    query.state = "none";
  }

  return db.instances.find(query, {
    fields: {
      name: 1,
      created: 1,
      form: 1,
      flow: 1,
      space: 1,
      modified: 1,
      applicant: 1,
      is_archived: 1,
      form_version: 1,
      flow_version: 1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_tabular.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var asyncLastFinishedApprove, lastFinishedApproveAggregate;

lastFinishedApproveAggregate = function (instanceid, userId, dataMap, callback) {
  var operation;
  operation = [{
    "$match": {
      "_id": instanceid
    }
  }, {
    "$project": {
      "name": 1,
      "_approve": "$traces.approves"
    }
  }, {
    "$unwind": "$_approve"
  }, {
    "$unwind": "$_approve"
  }, {
    "$match": {
      "_approve.is_finished": true,
      $or: [{
        "_approve.handler": userId
      }, {
        "_approve.user": userId
      }]
    }
  }, {
    "$group": {
      "_id": "$_id",
      "finish_date": {
        "$last": "$_approve.finish_date"
      }
    }
  }];
  return db.instances.rawCollection().aggregate(operation).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return dataMap.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

asyncLastFinishedApprove = Meteor.wrapAsync(lastFinishedApproveAggregate);
Meteor.publish("instance_tabular", function (tableName, ids, fields) {
  var getMyApprove, getMyLastFinishedApprove, getStepCurrentName, handle, self;

  if (!this.userId) {
    return this.ready();
  }

  check(tableName, String);
  check(ids, Array);
  check(fields, Match.Optional(Object));
  fields.cc_users = 1;
  self = this;

  getMyLastFinishedApprove = function (userId, instanceId) {
    var data;
    data = [];
    asyncLastFinishedApprove(instanceId, userId, data);

    if (data.length > 0) {
      return data[0];
    }
  };

  getMyApprove = function (userId, instanceId) {
    var approve, approves, instance, is_read, myApprove, notFinishedTraces;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        traces: 1
      }
    });
    myApprove = null;

    if (!instance) {
      return;
    }

    if (!instance.traces || instance.traces.length < 1) {
      return;
    }

    notFinishedTraces = instance.traces.filterProperty("is_finished", false);

    if (notFinishedTraces.length > 0) {
      approves = notFinishedTraces[0].approves.filterProperty("is_finished", false).filterProperty("handler", userId);

      if (approves.length > 0) {
        approve = approves[0];
        myApprove = {
          id: approve._id,
          instance: approve.instance,
          trace: approve.trace,
          is_read: approve.is_read,
          start_date: approve.start_date,
          agent: approve.agent,
          user_name: approve.user_name
        };
      }
    }

    if (!myApprove) {
      is_read = false;
      instance.traces.forEach(function (trace) {
        var ref;
        return trace != null ? (ref = trace.approves) != null ? ref.forEach(function (approve) {
          if (approve.type === 'cc' && approve.user === userId && approve.is_finished === false) {
            if (approve.is_read) {
              is_read = true;
            }

            return myApprove = {
              id: approve._id,
              is_read: is_read,
              start_date: approve.start_date,
              agent: approve.agent,
              user_name: approve.user_name
            };
          }
        }) : void 0 : void 0;
      });
    }

    return myApprove;
  };

  getStepCurrentName = function (instanceId) {
    var instance, ref, ref1, stepCurrentName;
    instance = db.instances.findOne({
      _id: instanceId
    }, {
      fields: {
        "traces.name": 1,
        "traces": {
          $slice: -1
        }
      }
    });

    if (instance) {
      stepCurrentName = (ref = instance.traces) != null ? (ref1 = ref[0]) != null ? ref1.name : void 0 : void 0;
    }

    return stepCurrentName;
  };

  handle = db.instances.find({
    _id: {
      $in: ids
    }
  }, {
    fields: {
      traces: 0
    }
  }).observeChanges({
    changed: function (id) {
      var error, instance, myApprove, myLastFinishedApprove, ref, ref1;
      instance = db.instances.findOne({
        _id: id
      }, {
        fields: fields
      });

      if (!instance) {
        return;
      }

      myApprove = getMyApprove(self.userId, id);
      myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

      if (myApprove) {
        instance.is_read = myApprove.is_read;
        instance.start_date = myApprove.start_date;

        if (myApprove.agent) {
          instance.agent_user_name = myApprove.user_name;
        }
      } else {
        instance.is_read = true;
      }

      if (myLastFinishedApprove) {
        instance.my_finish_date = myLastFinishedApprove.finish_date;
      }

      instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
      instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
      delete instance.cc_users;

      try {
        return self.changed("instances", id, instance);
      } catch (error1) {
        error = error1;
        console.log('instance observeChanges error: ', error.message);
        console.log('self.userId: ', self.userId);
        console.log('tableName: ', tableName);
        console.log('ids: ', JSON.stringify(ids));
        return console.log('myApprove: ', JSON.stringify(myApprove));
      }
    },
    removed: function (id) {
      return self.removed("instances", id);
    }
  });
  ids.forEach(function (id) {
    var instance, myApprove, myLastFinishedApprove, ref, ref1;
    instance = db.instances.findOne({
      _id: id
    }, {
      fields: fields
    });

    if (!instance) {
      return;
    }

    myApprove = getMyApprove(self.userId, id);
    myLastFinishedApprove = getMyLastFinishedApprove(self.userId, id);

    if (myApprove) {
      instance.is_read = myApprove.is_read;
      instance.start_date = myApprove.start_date;

      if (myApprove.agent) {
        instance.agent_user_name = myApprove.user_name;
      }
    } else {
      instance.is_read = true;
    }

    if (myLastFinishedApprove) {
      instance.my_finish_date = myLastFinishedApprove.finish_date;
    }

    instance.is_cc = ((ref = instance.cc_users) != null ? ref.includes(self.userId) : void 0) || false;
    instance.cc_count = ((ref1 = instance.cc_users) != null ? ref1.length : void 0) || 0;
    delete instance.cc_users;
    return self.added("instances", id, instance);
  });
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"instance_draft.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/instance_draft.coffee                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('instances_draft', function (spaceId) {
  var userId;
  check(spaceId, String);

  if (!this.userId) {
    return this.ready();
  }

  userId = this.userId;
  return db.instances.find({
    state: "draft",
    space: spaceId,
    submitter: userId,
    $or: [{
      inbox_users: {
        $exists: false
      }
    }, {
      inbox_users: []
    }]
  }, {
    fields: {
      _id: 1,
      state: 1,
      space: 1,
      submitter: 1,
      inbox_users: 1,
      modified: 1,
      name: 1
    },
    sort: {
      modified: -1
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"distributed_instances_state_by_ids.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/distributed_instances_state_by_ids.coffee                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('distributed_instances_state_by_ids', function (instance_ids) {
  var handle, self;
  check(instance_ids, Array);

  if (!this.userId) {
    return this.ready();
  }

  if (!instance_ids) {
    return this.ready();
  }

  if (_.isEmpty(instance_ids)) {
    return this.ready();
  }

  self = this;
  handle = db.instances.find({
    _id: {
      $in: instance_ids
    }
  }, {
    fields: {
      state: 1,
      traces: {
        $slice: 1
      }
    }
  }).observeChanges({
    added: function (id, fields) {
      return self.added('instances', id, {
        state: fields.state,
        is_read: fields.traces[0].approves[0].is_read
      });
    },
    changed: function (id, fields) {
      if (fields.state) {
        self.changed('instances', id, {
          state: fields.state
        });
      }

      if (fields.traces) {
        return self.changed('instances', id, {
          is_read: fields.traces[0].approves[0].is_read
        });
      }
    }
  });
  this.ready();
  return this.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"related_instaces.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/related_instaces.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('related_instaces', function (instanceId, related_instances) {
  var ref, related_instance_ids;

  if (!this.userId) {
    return this.ready();
  }

  if (!instanceId) {
    return this.ready();
  }

  related_instance_ids = (ref = db.instances.findOne(instanceId, {
    fields: {
      related_instances: 1
    }
  })) != null ? ref.related_instances : void 0;

  if (related_instance_ids && _.isArray(related_instance_ids)) {
    return db.instances.find({
      _id: {
        $in: related_instance_ids
      }
    }, {
      fields: {
        _id: 1,
        name: 1,
        space: 1
      }
    });
  } else {
    return this.ready();
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"space_user_signs.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/space_user_signs.coffee                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
if (Meteor.isServer) {
  Meteor.publish('space_user_signs', function (spaceId) {
    check(spaceId, String);

    if (!this.userId) {
      return this.ready();
    }

    return db.space_user_signs.find({
      space: spaceId
    }, {
      fields: {
        created_by: 0,
        created: 0,
        modified_by: 0
      }
    });
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user_inbox_instance.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/user_inbox_instance.coffee                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
Meteor.publishComposite "user_inbox_instance", ()->
	unless this.userId
		return this.ready()

	userSpaceIds = db.space_users.find({
		user: this.userId,
		user_accepted: true
	}, {fields: {space: 1}}).fetch().getEach("space");
	query = {space: {$in: userSpaceIds}}

	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]

	find: ->
		db.instances.find(query, {
			fields: {
				space: 1,
				applicant_name: 1,
				flow: 1,
				inbox_users: 1,
				cc_users: 1,
				state: 1,
				name: 1,
				modified: 1,
				form: 1
			}, sort: {modified: -1}, skip: 0, limit: 200
		});
	children: [
		{
			find: (instance, post)->
				db.flows.find({_id: instance.flow}, {fields: {name: 1, space: 1}});
		}
	]
 */ /*
    Meteor.publish 'my_inbox_instances', (spaceId)->
    	unless this.userId
    		return this.ready()
    
    	self = this;
    
    	 *	userSpaceIds = db.space_users.find({
    	 *		user: this.userId,
    	 *		user_accepted: true
    	 *	}, {fields: {space: 1}}).fetch().getEach("space");
    
    	query = {space: spaceId}
    
    	query.$or = [{inbox_users: this.userId}, {cc_users: this.userId}]
    
    	fields = {
    		space: 1,
     *		applicant_name: 1,
    		flow: 1,
    		inbox_users: 1,
    		cc_users: 1,
    		state: 1,
     *		name: 1,
     *		modified: 1,
    		form: 1
    	}
    
    	handle = db.instances.find(query, {sort: {modified: -1}, skip: 0, limit: 500}).observeChanges {
    		added: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.added("instances", id, instance)
    		changed: (id)->
    			instance = db.instances.findOne({_id: id}, {fields: fields})
    			return if not instance
    			instance.is_cc = instance.cc_users?.includes(self.userId) || false
    			delete instance.cc_users
    			self.changed("instances", id, instance);
    		removed: (id)->
    			self.removed("instances", id);
    	}
    
    	self.ready();
    	self.onStop ()->
    		handle.stop()
     */var _async_get_flow_instances_aggregate, _get_flow_instances_aggregate;

_get_flow_instances_aggregate = function (spaceId, userId, _items, callback) {
  return db.instances.rawCollection().aggregate([{
    $match: {
      space: spaceId,
      $or: [{
        inbox_users: userId
      }, {
        cc_users: userId
      }]
    }
  }, {
    $group: {
      _id: {
        flow: "$flow",
        category: "$category"
      },
      count: {
        $sum: 1
      }
    }
  }]).toArray(function (err, data) {
    if (err) {
      throw new Error(err);
    }

    data.forEach(function (doc) {
      return _items.push(doc);
    });

    if (callback && _.isFunction(callback)) {
      callback();
    }
  });
};

_async_get_flow_instances_aggregate = Meteor.wrapAsync(_get_flow_instances_aggregate);
Meteor.publish('my_inbox_flow_instances_count', function (spaceId) {
  var _changeData, _flowsData, _init, data, handle, query, self;

  if (!this.userId) {
    return this.ready();
  }

  self = this;
  query = {
    space: spaceId
  };
  query.$or = [{
    inbox_users: this.userId
  }, {
    cc_users: this.userId
  }];
  data = [];

  _async_get_flow_instances_aggregate(spaceId, self.userId, data);

  _flowsData = [];

  _.each(data, function (dataItem) {
    return _flowsData.push({
      _id: dataItem._id.flow,
      category: dataItem._id.category,
      count: dataItem.count
    });
  });

  self.added("flow_instances", spaceId, {
    flows: _flowsData
  });

  _changeData = function (doc, action) {
    var flow_instance;
    flow_instance = _.find(_flowsData, function (f) {
      return f._id === doc.flow;
    });

    if (flow_instance) {
      if (action === "added") {
        flow_instance.count++;
      } else if (action === "removed") {
        flow_instance.count--;
      }
    } else if (action === "added") {
      _flowsData.push({
        _id: doc.flow,
        category: doc.category,
        count: 1
      });
    }

    return self.changed("flow_instances", spaceId, {
      flows: _flowsData
    });
  };

  _init = true;
  handle = db.instances.find(query, {
    fields: {
      _id: 1,
      inbox_users: 1,
      cc_users: 1,
      flow: 1,
      category: 1
    }
  }).observe({
    added: function (doc) {
      if (!_init) {
        return _changeData(doc, "added");
      }
    },
    removed: function (doc) {
      if (!_init) {
        return _changeData(doc, "removed");
      }
    }
  });
  _init = false;
  self.ready();
  return self.onStop(function () {
    return handle.stop();
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"flow_main_attach_template.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/publications/flow_main_attach_template.coffee                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.publish('flow_main_attach_template', function (spaceId, flowId) {
  check(spaceId, String);
  check(flowId, String);

  if (!this.userId) {
    return this.ready();
  }

  if (!(spaceId && flowId)) {
    return this.ready();
  }

  return Creator.getCollection('cms_files').find({
    space: spaceId,
    'parent.o': 'flows',
    'parent.ids': flowId,
    name: '正文.docx'
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"flow-template":{"workflow_template.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/flow-template/workflow_template.coffee                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
workflowTemplate = {};
workflowTemplate["en"] = [];
workflowTemplate["zh-CN"] = [];
Meteor.startup(function () {
  var absolute_path_cn, absolute_path_us, filesList_cn, filesList_us, fs, mime, path, path_cn, path_us, readFileList, ref, ref1;
  fs = require('fs');
  path = require('path');
  mime = require('mime');

  readFileList = function (pathDir, filesList) {
    var files;
    files = fs.readdirSync(pathDir);
    return files.forEach(function (name, index) {
      var obj, stat;
      stat = fs.statSync(path.join(pathDir, name));

      if (stat.isDirectory()) {
        return readFileList(path.join(pathDir, name), filesList);
      } else {
        obj = {};
        obj.path = pathDir;
        obj.name = name;
        return filesList.push(obj);
      }
    });
  };

  filesList_cn = [];
  path_cn = (ref = Meteor.settings.workflowTemplates) != null ? ref.path_cn : void 0;

  if (path_cn) {
    absolute_path_cn = path.resolve(path_cn);
    console.log("absolute_path_cn", absolute_path_cn);

    if (fs.existsSync(absolute_path_cn)) {
      readFileList(absolute_path_cn, filesList_cn);
      filesList_cn.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["zh-CN"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取zh-cn文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }

  filesList_us = [];
  path_us = (ref1 = Meteor.settings.workflowTemplates) != null ? ref1.path_us : void 0;

  if (path_us) {
    absolute_path_us = path.resolve(path_us);
    console.log("absolute_path_us", absolute_path_us);

    if (fs.existsSync(absolute_path_us)) {
      readFileList(absolute_path_us, filesList_us);
      return filesList_us.forEach(function (file) {
        var data, e;

        try {
          if (mime.getType(file.name) === "application/json") {
            data = fs.readFileSync(path.join(file.path, file.name), 'utf8');
            return workflowTemplate["en"].push(JSON.parse(data));
          }
        } catch (error) {
          e = error;
          console.error("获取en-us文件夹下的所有文件", path.join(file.path, file.name));
          return console.error(e.stack);
        }
      });
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/startup.coffee                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"schedule":{"auto_finish_process_delegation.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/auto_finish_process_delegation.coffee                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.auto_finish_process_delegation : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.auto_finish_process_delegation;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e, now;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('auto_finish_process_delegation');
        now = new Date();
        db.process_delegation_rules.update({
          enabled: true,
          end_time: {
            $lte: now
          }
        }, {
          $set: {
            enabled: false
          }
        }, {
          multi: true
        });
        console.timeEnd('auto_finish_process_delegation');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO AUTO_FINISH_PROCESS_DELEGATION ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function (e) {
      console.log('Failed to bind environment: auto_finish_process_delegation.coffee');
      return console.log(e.stack);
    }));
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"timeout_auto_submit.coffee":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/server/schedule/timeout_auto_submit.coffee                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
/*
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)
 */Meteor.startup(function () {
  var go_next, ref, rule, schedule;

  if ((ref = Meteor.settings.cron) != null ? ref.timeout_auto_submit : void 0) {
    schedule = require('node-schedule');
    rule = Meteor.settings.cron.timeout_auto_submit;
    go_next = true;
    return schedule.scheduleJob(rule, Meteor.bindEnvironment(function () {
      var e;

      try {
        if (!go_next) {
          return;
        }

        go_next = false;
        console.time('timeout_auto_submit');
        uuflowManager.timeoutAutoSubmit();
        console.timeEnd('timeout_auto_submit');
        return go_next = true;
      } catch (error) {
        e = error;
        console.error("AUTO TIMEOUT_AUTO_SUBMIT ERROR: ");
        console.error(e.stack);
        return go_next = true;
      }
    }, function (e) {
      console.log('Failed to bind environment: timeout_auto_submit.coffee');
      return console.log(e.stack);
    }));
  }
});
Meteor.methods({
  timeout_auto_submit: function (ins_id) {
    uuflowManager.timeoutAutoSubmit(ins_id);
    return true;
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"related_instances_tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/related_instances_tabular.coffee                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.startup(function () {
  return TabularTables.related_instances_tabular = new Tabular.Table({
    name: "related_instances_tabular",
    collection: db.instances,
    columns: [{
      data: "_id",
      title: '<input type="checkbox" name="reverse" id="reverse">',
      orderable: false,
      width: '1px',
      render: function (val, type, doc) {
        var input, ref;
        input = '<input type="checkbox" class="related-instances-list-checkbox" name="related_instances_ids" id="related_instances_ids" value="' + doc._id + '"';

        if ((ref = TabularTables.related_instances_tabular.related_instances) != null ? ref.includes(doc._id) : void 0) {
          input += " checked ";
        }

        input += ">";
        return input;
      }
    }, {
      data: "name",
      orderable: false,
      width: '45%',
      render: function (val, type, doc) {
        var absolute, href;
        href = '';

        if (Meteor.isClient && (Steedos.isMobile() || Steedos.isCordova())) {
          href = '';
        }

        absolute = false;

        if (Meteor.isServer) {
          absolute = this.absolute;
        }

        if (absolute) {
          href = Meteor.absoluteUrl("workflow/space/" + doc.space + "/view/readonly/" + doc._id + '?hide_traces=0');
        } else {
          href = Steedos.absoluteUrl("workflow/space/" + doc.space + "/view/readonly/" + doc._id + '?hide_traces=0');
        }

        return "<a data-id='" + doc._id + "' target='_blank' href='" + href + "'>" + doc.name + "</a>";
      }
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      orderable: false
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_flow"),
      render: function (val, type, doc) {
        var judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + "</div>";
      }
    }],
    dom: "tp",
    lengthChange: false,
    extraFields: ["state", "final_decision", "space", "keywords"],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var curSpaceUser, flow_ids, flows, organizations, ref, ref1, space, spaceId;

      if (!userId) {
        return {
          _id: -1
        };
      }

      spaceId = selector.space;

      if (!spaceId) {
        if ((selector != null ? (ref = selector.$and) != null ? ref.length : void 0 : void 0) > 0) {
          spaceId = selector.$and.getProperty('space')[0];
        }
      }

      if (!spaceId) {
        return {
          _id: -1
        };
      }

      space = db.spaces.findOne(spaceId);

      if (!space) {
        selector.state = "none";
      }

      if (!space.admins.includes(userId)) {
        flow_ids = [];
        curSpaceUser = db.space_users.findOne({
          space: spaceId,
          'user': userId
        });

        if (curSpaceUser) {
          organizations = db.organizations.find({
            _id: {
              $in: curSpaceUser.organizations
            }
          }).fetch();
          flows = db.flows.find({
            space: spaceId
          });
          flows.forEach(function (fl) {
            if (WorkflowManager.canMonitor(fl, curSpaceUser, organizations) || WorkflowManager.canAdmin(fl, curSpaceUser, organizations)) {
              return flow_ids.push(fl._id);
            }
          });
        }

        if ((selector != null ? (ref1 = selector.$and) != null ? ref1.length : void 0 : void 0) > 0) {
          selector.$and[0].$or = [{
            submitter: userId
          }, {
            applicant: userId
          }, {
            inbox_users: userId
          }, {
            outbox_users: userId
          }, {
            cc_users: userId
          }, {
            flow: {
              $in: flow_ids
            }
          }];
        } else {
          _.extend(selector, {
            $or: [{
              submitter: userId
            }, {
              applicant: userId
            }, {
              inbox_users: userId
            }, {
              outbox_users: userId
            }, {
              cc_users: userId
            }, {
              flow: {
                $in: flow_ids
              }
            }]
          });
        }
      }

      return selector;
    }
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tabular.coffee":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/steedos_workflow/tabular.coffee                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var GetBoxInstancesTabularOptions, _get_inbox_instances_tabular_options, _get_outbox_instances_tabular_options, _handleListFields, instancesListTableTabular, newInstancesListTabular, updateTabularTitle;

Steedos.subs["InstanceTabular"] = new SubsManager();

_handleListFields = function (fields) {
  var ins_fields;
  ins_fields = new Array();

  if (fields != null) {
    fields.forEach(function (f) {
      var ref;

      if (f.type === 'table') {
        return console.log('ignore opinion field in table');
      } else if (f.type === 'section') {
        return f != null ? (ref = f.fields) != null ? ref.forEach(function (f1) {
          return ins_fields.push(f1);
        }) : void 0 : void 0;
      } else {
        return ins_fields.push(f);
      }
    });
  }

  return ins_fields;
};

updateTabularTitle = function () {};

instancesListTableTabular = function (flowId, fields) {
  var ins_fields, key, options;
  options = {
    name: "instances",
    collection: db.instances,
    pub: "instance_tabular",
    onUnload: function () {
      return Meteor.setTimeout(Template.instance_list._tableColumns, 150);
    },
    drawCallback: function (settings) {
      var ellipsisLink, emptyTd, title;
      emptyTd = $(".dataTables_empty");

      if (emptyTd.length) {
        emptyTd[0].colSpan = "6";
      }

      if (!Steedos.isMobile() && !Steedos.isPad()) {
        Meteor.setTimeout(Template.instance_list._tableColumns, 150);
        $(".instance-list").scrollTop(0).ready(function () {
          return $(".instance-list").perfectScrollbar("update");
        });
      } else {
        $(".instance-list").scrollTop(0);
      }

      title = t("pager_input_hint");
      ellipsisLink = settings.oInstance.parent().find('.paging_numbers .pagination .disabled a');
      return ellipsisLink.attr("title", title).css("cursor", "pointer").click(function () {
        var goPage, input;

        if (!$(this).find('input').length) {
          input = $('<input class="paginate_input form-control input-sm" type="text" style="border: none; padding:0 2px;"/>');

          if (Steedos.isMobile()) {
            input.css({
              width: "52px",
              height: "20px"
            });
          } else {
            input.css({
              width: "52px",
              height: "16px"
            });
          }

          input.attr("title", title).attr("placeholder", title);
          $(this).empty().append(input);

          goPage = function (index) {
            var pages;

            if (index > 0) {
              pages = Math.ceil(settings.fnRecordsDisplay() / settings._iDisplayLength);

              if (index > pages) {
                index = pages;
              }

              index--;
              return settings.oInstance.DataTable().page(index).draw('page');
            }
          };

          input.blur(function (e) {
            var currentPage;
            currentPage = $(this).val();
            goPage(currentPage);
            return $(this).parent().html('...');
          });
          return input.keydown(function (e) {
            var currentPage;

            if (e.keyCode.toString() === "13") {
              currentPage = $(this).val();
              return goPage(currentPage);
            }
          });
        }
      });
    },
    createdRow: function (row, data, dataIndex) {
      if (Meteor.isClient) {
        if (data._id === FlowRouter.current().params.instanceId) {
          return row.setAttribute("class", "selected");
        }
      }
    },
    columns: [{
      data: "_id",
      orderable: false,
      render: function (val, type, doc) {
        var agent_view, cc_view, flow_name, instanceNamePriorityClass, isFavoriteSelected, modified, modifiedFromNow, modifiedString, priorityIcon, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        modifiedString = moment(doc.modified).format('YYYY-MM-DD');
        modified = doc.modified;

        if (Session.get("box") === 'inbox' && doc.state !== 'draft') {
          modified = doc.start_date || doc.modified;
        }

        if (Session.get("box") === 'outbox' || Session.get("box") === 'monitor') {
          modified = doc.submit_date || doc.submit_date;
        }

        modifiedFromNow = Steedos.momentReactiveFromNow(modified);
        flow_name = doc.flow_name;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
          step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
        } else {
          if (Session.get("box") !== 'draft' && doc.current_step_name) {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "<span>(" + doc.current_step_name + ")</span></div>";
          } else {
            step_current_name_view = "<div class='flow-name'>" + flow_name + "</div>";
          }
        }

        agent_view = "";

        if (doc.agent_user_name && Session.get("box") === 'inbox') {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';
        isFavoriteSelected = Favorites.isRecordSelected("instances", doc._id);

        if (Favorites.isRecordSelected("instances", doc._id)) {
          unread = '<i class="ion ion-ios-star-outline instance-favorite-selected"></i>';
        } else if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIcon = "";
        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "\n	<span>" + doc.applicant_name + "</span>\n</div>\n<div class='instance-detail'>" + step_current_name_view + "\n	<span class='instance-modified' title='" + modifiedString + "'>" + modifiedFromNow + "</span>\n</div>";
      }
    }, {
      data: "applicant_organization_name",
      title: t("instances_applicant_organization_name"),
      visible: false
    }, {
      data: "name",
      title: t("instances_name"),
      render: function (val, type, doc) {
        var agent_view, cc_view, instanceNamePriorityClass, priorityIconClass, priorityValue, ref, ref1, step_current_name_view, unread;
        cc_view = "";
        step_current_name_view = "";

        if (doc.is_cc && !((ref = doc.inbox_users) != null ? ref.includes(Meteor.userId()) : void 0) && Session.get("box") === 'inbox') {
          cc_view = "<label class='cc-label'>(" + TAPi18n.__("instance_cc_title") + ")</label> ";
        }

        agent_view = "";

        if (doc.agent_user_name) {
          agent_view = "<label class='cc-label'>(" + TAPi18n.__('process_delegation_rules_description', {
            userName: doc.agent_user_name
          }) + ")</label>";
        }

        unread = '';

        if (Session.get("box") === 'inbox' && doc.is_read === false) {
          unread = '<i class="ion ion-record unread"></i>';
        } else if (Session.get("box") === 'monitor' && doc.is_hidden === true) {
          unread = '<i class="fa fa-lock"></i>';
        }

        priorityIconClass = "";
        priorityValue = (ref1 = doc.values) != null ? ref1.priority : void 0;

        switch (priorityValue) {
          case "特急":
            priorityIconClass = "danger";
            break;

          case "紧急":
            priorityIconClass = "warning";
            break;

          case "办文":
            priorityIconClass = "muted";
        }

        if (priorityIconClass) {
          instanceNamePriorityClass = "color-priority color-priority-" + priorityIconClass;
        }

        return "<div class='instance-read-bar'>" + unread + "</div>\n<div class='instance-name " + instanceNamePriorityClass + "'>" + doc.name + cc_view + agent_view + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "applicant_name",
      title: t("instances_applicant_name"),
      visible: false,
      orderable: false
    }, {
      data: "submit_date",
      title: t("instances_submit_date"),
      render: function (val, type, doc) {
        if (doc.submit_date) {
          return moment(doc.submit_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "flow_name",
      title: t("instances_flow"),
      visible: false,
      orderable: false
    }, {
      data: "current_step_name",
      title: t("instances_step_current_name"),
      render: function (val, type, doc) {
        var cc_tag, judge, step_current_name;

        if (doc.state === "completed") {
          judge = doc.final_decision || "approved";
        }

        step_current_name = doc.current_step_name || '';
        cc_tag = '';

        if (doc.cc_count > 0) {
          cc_tag = TAPi18n.__('cc_tag');
        }

        return "<div class=\"step-current-state " + judge + "\">" + step_current_name + cc_tag + "</div>";
      },
      visible: false,
      orderable: false
    }, {
      data: "modified",
      title: t("instances_modified"),
      render: function (val, type, doc) {
        return moment(doc.modified).format('YYYY-MM-DD HH:mm');
      },
      visible: false,
      orderable: true
    }, {
      data: "start_date",
      title: t("instances_start_date"),
      render: function (val, type, doc) {
        if (doc.start_date) {
          return moment(doc.start_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "my_finish_date",
      render: function (val, type, doc) {
        if (doc.my_finish_date) {
          return moment(doc.my_finish_date).format('YYYY-MM-DD HH:mm');
        }
      },
      visible: false,
      orderable: true
    }, {
      data: "modified",
      visible: false
    }, {
      data: "keywords",
      visible: false
    }, {
      data: "is_archived",
      render: function (val, type, doc) {
        var ref;

        if ((doc != null ? (ref = doc.values) != null ? ref.record_need : void 0 : void 0) && doc.values.record_need === "true") {
          if (doc != null ? doc.is_archived : void 0) {
            return t("YES");
          }

          return t("NO");
        }
      },
      visible: false,
      orderable: false
    }],
    dom: function () {
      if (Steedos.isMobile()) {
        return 'tp';
      } else {
        return 'tpl';
      }
    }(),
    order: [[4, "desc"]],
    extraFields: ["form", "flow", "inbox_users", "state", "space", "applicant", "form_version", "flow_version", "is_cc", "cc_count", "is_read", "current_step_name", "values", "keywords", "final_decision", "flow_name", "is_hidden", "agent_user_name"],
    lengthChange: true,
    lengthMenu: [10, 15, 20, 25, 50, 100],
    pageLength: 10,
    info: false,
    searching: true,
    responsive: {
      details: false
    },
    autoWidth: false,
    changeSelector: function (selector, userId) {
      var ref, space, space_user;

      if (!userId) {
        return {
          _id: -1
        };
      }

      space = selector.space;

      if (!space) {
        if ((selector != null ? (ref = selector.$and) != null ? ref.length : void 0 : void 0) > 0) {
          space = selector.$and.getProperty('space')[0];
        }
      }

      if (!space) {
        return {
          _id: -1
        };
      }

      space_user = db.space_users.findOne({
        user: userId,
        space: space
      }, {
        fields: {
          _id: 1
        }
      });

      if (!space_user) {
        return {
          _id: -1
        };
      }

      return selector;
    },
    pagingType: "numbers"
  };

  if (flowId) {
    key = "instanceFlow" + flowId;
    options.name = key;
    TabularTables.instances.fields = fields;
    ins_fields = _handleListFields(TabularTables.instances.fields);
    ins_fields.forEach(function (f) {
      if (f.type !== 'table' && f.is_list_display) {
        return options.columns.push({
          data: f.name || f.code,
          title: t(f.name || f.code),
          visible: false,
          orderable: false,
          render: function (val, type, doc) {
            var value, values;
            values = doc.values || {};
            value = values[f.code];

            switch (f.type) {
              case 'user':
                value = value != null ? value.name : void 0;
                break;

              case 'group':
                value = value != null ? value.fullname : void 0;
                break;

              case 'date':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD');
                }

                break;

              case 'dateTime':
                if (value) {
                  value = moment(value).format('YYYY-MM-DD HH:mm');
                }

                break;

              case 'checkbox':
                if (value === true || value === 'true') {
                  value = TAPi18n.__("form_field_checkbox_yes");
                } else {
                  value = TAPi18n.__("form_field_checkbox_no");
                }

                break;

              case 'odata':
                if (value) {
                  if (_.isArray(value)) {
                    value = _.pluck(value, '@label').toString();
                  } else {
                    value = value['@label'];
                  }
                }

            }

            return value;
          }
        });
      }
    });
  }

  return options;
};

Meteor.startup(function () {
  return TabularTables.instances = new Tabular.Table(instancesListTableTabular());
});

GetBoxInstancesTabularOptions = function (box, flowId, fields) {
  var key, options;
  key = "instanceFlow" + box + flowId;

  if (box === "inbox") {
    options = _get_inbox_instances_tabular_options(flowId, fields);
  } else if (box === "outbox") {
    options = _get_outbox_instances_tabular_options(flowId, fields);
  } else {
    options = instancesListTableTabular(flowId, fields);

    if (!flowId) {
      options.name = "inbox_instances";
    }
  }

  if (flowId) {
    options.name = key;
  }

  return options;
};

_get_inbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "inbox_instances";
  }

  options.order = [[8, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': false,
        '_approve.handler': userId
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'start_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_start_date": {
              $first: "$_approve.start_date"
            }
          }
        });
        ag_sort = {
          'approve_start_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.inbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("inbox"));
});

_get_outbox_instances_tabular_options = function (flowId, fields) {
  var options;
  options = instancesListTableTabular(flowId, fields);

  if (!flowId) {
    options.name = "outbox_instances";
  }

  options.order = [[9, "desc"]];

  options.filteredRecordIds = function (table, selector, sort, skip, limit, old_filteredRecordIds, userId, findOptions) {
    var ag_sort, aggregate, aggregate_operation, async_aggregate, filteredRecordIds, s1, s1_0, s1_1;
    aggregate_operation = [{
      $match: selector
    }, {
      $project: {
        name: 1,
        "_approve": '$traces.approves'
      }
    }, {
      $unwind: "$_approve"
    }, {
      $unwind: "$_approve"
    }, {
      $match: {
        '_approve.is_finished': true,
        $or: [{
          '_approve.handler': userId
        }, {
          '_approve.user': userId
        }]
      }
    }];

    if (sort && sort.length > 0) {
      s1 = sort[0];
      s1_0 = s1[0];
      s1_1 = s1[1];

      if (s1_0 === 'my_finish_date') {
        findOptions.sort = [['modified', s1_1]];
        aggregate_operation.push({
          $group: {
            _id: "$_id",
            "approve_finish_date": {
              $last: "$_approve.finish_date"
            }
          }
        });
        ag_sort = {
          'approve_finish_date': s1_1 === 'asc' ? 1 : -1
        };
        aggregate_operation.push({
          $sort: ag_sort
        });
        aggregate_operation.push({
          $skip: skip
        });
        aggregate_operation.push({
          $limit: limit
        });
        filteredRecordIds = new Array();

        aggregate = function (table, aggregate_operation, filteredRecordIds, cb) {
          table.collection.rawCollection().aggregate(aggregate_operation).toArray(function (err, data) {
            if (err) {
              throw new Error(err);
            }

            data.forEach(function (doc) {
              filteredRecordIds.push(doc._id);
            });

            if (cb) {
              cb();
            }
          });
        };

        async_aggregate = Meteor.wrapAsync(aggregate);
        async_aggregate(table, aggregate_operation, filteredRecordIds);
        return filteredRecordIds.uniq();
      } else {
        return old_filteredRecordIds;
      }
    }
  };

  return options;
};

Meteor.startup(function () {
  return TabularTables.outbox_instances = new Tabular.Table(GetBoxInstancesTabularOptions("outbox"));
});

if (Meteor.isClient) {
  TabularTables.flowInstances = new ReactiveVar();
}

Meteor.startup(function () {
  return Tracker.autorun(function (c) {
    if (Meteor.isClient && !Steedos.isMobile()) {
      if (Session.get("flowId") && Session.get("box") !== 'draft') {
        return Meteor.call("newInstancesListTabular", Session.get("box"), Session.get("flowId"), function (error, result) {
          newInstancesListTabular(Session.get("box"), Session.get("flowId"), result);
          return Template.instance_list._changeOrder();
        });
      }
    }
  });
});

newInstancesListTabular = function (box, flowId, fields) {
  var flow, key, ref, ref1, ref2;

  if (!fields) {
    flow = db.flows.findOne({
      _id: flowId
    }, {
      fields: {
        form: 1
      }
    });
    fields = (ref = db.forms.findOne({
      _id: flow != null ? flow.form : void 0
    }, {
      fields: {
        'current.fields': 1
      }
    })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
  }

  fields = _handleListFields(fields);

  if ((fields != null ? (ref2 = fields.filterProperty("is_list_display", true)) != null ? ref2.length : void 0 : void 0) > 0) {
    key = "instanceFlow" + box + flowId;

    if (Meteor.isClient) {
      TabularTables.flowInstances.set(new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields)));
    } else {
      new Tabular.Table(GetBoxInstancesTabularOptions(box, flowId, fields));
    }

    return console.log("new TabularTables ", key);
  }
};

if (Meteor.isServer) {
  Meteor.methods({
    newInstancesListTabular: function (box, flowId) {
      var fields, flow, ref, ref1;
      newInstancesListTabular(box, flowId);
      flow = db.flows.findOne({
        _id: flowId
      }, {
        fields: {
          form: 1
        }
      });
      fields = (ref = db.forms.findOne({
        _id: flow != null ? flow.form : void 0
      }, {
        fields: {
          'current.fields': 1
        }
      })) != null ? (ref1 = ref.current) != null ? ref1.fields : void 0 : void 0;
      return fields;
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".coffee"
  ]
});

require("/node_modules/meteor/steedos:workflow/checkNpm.js");
require("/node_modules/meteor/steedos:workflow/lib/URI.js");
require("/node_modules/meteor/steedos:workflow/lib/collection_helpers.js");
require("/node_modules/meteor/steedos:workflow/lib/tapi18n.coffee");
require("/node_modules/meteor/steedos:workflow/lib/core.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/forms.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flows.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/categories.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/spaces.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/deleted_instances.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/auth_tokens.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/webhooks.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/lib/models/space_users.coffee");
require("/node_modules/meteor/steedos:workflow/lib/cfs/instances.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/instance_readonly_template.coffee");
require("/node_modules/meteor/steedos:workflow/client/lib/template_manager.coffee");
require("/node_modules/meteor/steedos:workflow/client/coreform/inputTypes/coreform-table/steedos-table.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_image_sign.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_traces_handler.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_form.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_attachments.js");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_instance_sign_text.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_traces_help.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/client/views/instance/_related_records.coffee");
require("/node_modules/meteor/steedos:workflow/routes/designer.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/set_instance_step_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/get_instance_data.js");
require("/node_modules/meteor/steedos:workflow/server/methods/save_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/trace_approve_cc.js");
require("/node_modules/meteor/steedos:workflow/server/methods/forward_instance.js");
require("/node_modules/meteor/steedos:workflow/server/methods/cfs_instances.js");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_approve.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_return.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_remind.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/next_step_users_not_found.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_number_rules.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/check_main_attach.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/related_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/edit_flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/start_flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_traces.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_batch.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/flow.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/distribute.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/hide_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/methods/instance_value.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/steedos_css.coffee");
require("/node_modules/meteor/steedos:workflow/server/routes/instance_draft_view.coffee");
require("/node_modules/meteor/steedos:workflow/routes/nextStepUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getSpaceUsers.js");
require("/node_modules/meteor/steedos:workflow/routes/getFormulaUserObjects.js");
require("/node_modules/meteor/steedos:workflow/routes/init_formula_values.js");
require("/node_modules/meteor/steedos:workflow/routes/getNameForUser.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_designer_startup.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_engine.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_remove.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_terminate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_reassign.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_relocate.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_archive.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_export.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_space_changeset.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_retrieve.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward.js");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_instance.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_pending.coffee");
require("/node_modules/meteor/steedos:workflow/routes/export_table_template.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_drafts.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_submit.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_save.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_get_by_stepname.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_open_cfs.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_workflow_forward_table_refill.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_sub_table_sort.coffee");
require("/node_modules/meteor/steedos:workflow/routes/test_webhook.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/1_form_formula.js");
require("/node_modules/meteor/steedos:workflow/server/lib/get_handlers_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/permission_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/approve_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/flow_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/form_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/step_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/categories.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/cfs_instances.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_positions_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_roles.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flows.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/forms.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_data.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_list.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/instance_draft.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/distributed_instances_state_by_ids.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/related_instaces.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/space_user_signs.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/user_inbox_instance.coffee");
require("/node_modules/meteor/steedos:workflow/server/publications/flow_main_attach_template.coffee");
require("/node_modules/meteor/steedos:workflow/lib/admin.coffee");
require("/node_modules/meteor/steedos:workflow/related_instances_tabular.coffee");
require("/node_modules/meteor/steedos:workflow/tabular.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_users.coffee");
require("/node_modules/meteor/steedos:workflow/routes/api_formula_organizations.coffee");
require("/node_modules/meteor/steedos:workflow/server/flow-template/workflow_template.coffee");
require("/node_modules/meteor/steedos:workflow/server/startup.coffee");
require("/node_modules/meteor/steedos:workflow/server/lib/instance_manager.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/auto_finish_process_delegation.coffee");
require("/node_modules/meteor/steedos:workflow/server/schedule/timeout_auto_submit.coffee");

/* Exports */
Package._define("steedos:workflow", {
  InstanceManager: InstanceManager,
  WorkflowManager_format: WorkflowManager_format,
  Workflow: Workflow,
  SteedosTable: SteedosTable,
  InstanceReadOnlyTemplate: InstanceReadOnlyTemplate,
  TemplateManager: TemplateManager,
  CoreForm: CoreForm,
  InstanceNumberRules: InstanceNumberRules,
  getHandlersManager: getHandlersManager,
  permissionManager: permissionManager,
  workflowTemplate: workflowTemplate,
  approveManager: approveManager,
  stepManager: stepManager,
  flowManager: flowManager,
  formManager: formManager
});

})();

//# sourceURL=meteor://💻app/packages/steedos_workflow.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jaGVja05wbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9saWIvVVJJLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2xpYi9jb3JlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvbGliL2NvcmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2xpYi9tb2RlbHMvYXV0aF90b2tlbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC9saWIvaW5zdGFuY2VfcmVhZG9ubHlfdGVtcGxhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvbGliL2luc3RhbmNlX3JlYWRvbmx5X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvbGliL3RlbXBsYXRlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvbGliL3RlbXBsYXRlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L2NsaWVudC9jb3JlZm9ybS9pbnB1dFR5cGVzL2NvcmVmb3JtLXRhYmxlL3N0ZWVkb3MtdGFibGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbWFnZV9zaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbWFnZV9zaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3RyYWNlc19oYW5kbGVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL190cmFjZXNfaGFuZGxlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9mb3JtLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX2luc3RhbmNlX2F0dGFjaG1lbnRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9faW5zdGFuY2Vfc2lnbl90ZXh0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19pbnN0YW5jZV9zaWduX3RleHQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L2NsaWVudC92aWV3cy9pbnN0YW5jZS9fdHJhY2VzX2hlbHAuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3RyYWNlc19oZWxwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3JlbGF0ZWRfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvY2xpZW50L3ZpZXdzL2luc3RhbmNlL19yZWxhdGVkX3JlY29yZHMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9jbGllbnQvdmlld3MvaW5zdGFuY2UvX3JlbGF0ZWRfcmVjb3Jkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2Rlc2lnbmVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2Rlc2lnbmVyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvbmV4dFN0ZXBVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvZ2V0U3BhY2VVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9yb3V0ZXMvZ2V0Rm9ybXVsYVVzZXJPYmplY3RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3JvdXRlcy9pbml0X2Zvcm11bGFfdmFsdWVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9nZXROYW1lRm9yVXNlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9nZXROYW1lRm9yVXNlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV9kZXNpZ25lcl9zdGFydHVwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV9kZXNpZ25lcl9zdGFydHVwLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2VuZ2luZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZW5naW5lLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2RyYWZ0cy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZHJhZnRzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlbW92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVtb3ZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfc3VibWl0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3Rlcm1pbmF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfdGVybWluYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X3JlYXNzaWduLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19yZWFzc2lnbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZWxvY2F0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmVsb2NhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfYXJjaGl2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfYXJjaGl2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19leHBvcnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2V4cG9ydC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19zcGFjZV9jaGFuZ2VzZXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X3NwYWNlX2NoYW5nZXNldC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19yZXRyaWV2ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfcmV0cmlldmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X2luc3RhbmNlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3BlbmRpbmcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fcGVuZGluZy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2V4cG9ydF90YWJsZV90ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9leHBvcnRfdGFibGVfdGVtcGxhdGUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9kcmFmdHMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZHJhZnRzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZ2V0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2dldC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9zYXZlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX3NhdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfb3Blbl9nZXRfYnlfc3RlcG5hbWUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fZ2V0X2J5X3N0ZXBuYW1lLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3dvcmtmbG93X29wZW5fY2ZzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV93b3JrZmxvd19vcGVuX2Nmcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV93b3JrZmxvd19mb3J3YXJkX3JlZmlsbC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZF9yZWZpbGwuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfd29ya2Zsb3dfZm9yd2FyZF90YWJsZV9yZWZpbGwuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX3dvcmtmbG93X2ZvcndhcmRfdGFibGVfcmVmaWxsLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9yb3V0ZXMvYXBpX3N1Yl90YWJsZV9zb3J0LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcm91dGVzL2FwaV9zdWJfdGFibGVfc29ydC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL3Rlc3Rfd2ViaG9vay5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy90ZXN0X3dlYmhvb2suY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3JvdXRlcy9hcGlfZm9ybXVsYV91c2Vycy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JvdXRlcy9hcGlfZm9ybXVsYV91c2Vycy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcm91dGVzL2FwaV9mb3JtdWxhX29yZ2FuaXphdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9yb3V0ZXMvYXBpX2Zvcm11bGFfb3JnYW5pemF0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvc2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL3NldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2dldF9pbnN0YW5jZV9kYXRhLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL3NhdmVfaW5zdGFuY2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3M6d29ya2Zsb3cvc2VydmVyL21ldGhvZHMvdHJhY2VfYXBwcm92ZV9jYy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvczp3b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9mb3J3YXJkX2luc3RhbmNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9tZXRob2RzL2Nmc19pbnN0YW5jZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYXBwcm92ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2FwcHJvdmUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2luc3RhbmNlX3JldHVybi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfcmVtaW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9uZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9jaGVja19tYWluX2F0dGFjaC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvcmVsYXRlZF9pbnN0YW5jZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9yZWxhdGVkX2luc3RhbmNlcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvZWRpdF9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9tZXRob2RzL2VkaXRfZmxvd19wb3NpdGlvbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL3N0YXJ0X2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9zdGFydF9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV90cmFjZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2luc3RhbmNlX2JhdGNoLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfYmF0Y2guY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9tZXRob2RzL2Zsb3cuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9mbG93LmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbWV0aG9kcy9oaWRlX2luc3RhbmNlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL21ldGhvZHMvaGlkZV9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL21ldGhvZHMvaW5zdGFuY2VfdmFsdWUuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWV0aG9kcy9pbnN0YW5jZV92YWx1ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3JvdXRlcy9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9yb3V0ZXMvaW5zdGFuY2UuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9yb3V0ZXMvc3RlZWRvc19jc3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL3N0ZWVkb3NfY3NzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcm91dGVzL2luc3RhbmNlX2RyYWZ0X3ZpZXcuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zOndvcmtmbG93L3NlcnZlci9saWIvMV9mb3JtX2Zvcm11bGEuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL2xpYi9nZXRfaGFuZGxlcnNfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZ2V0X2hhbmRsZXJzX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvcGVybWlzc2lvbl9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9wZXJtaXNzaW9uX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvYXBwcm92ZV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL2xpYi9hcHByb3ZlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9saWIvZmxvd19tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2Zvcm1fbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvZm9ybV9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL3N0ZXBfbWFuYWdlci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9saWIvc3RlcF9tYW5hZ2VyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbGliL2luc3RhbmNlX21hbmFnZXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvY2F0ZWdvcmllcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9jZnNfaW5zdGFuY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcG9zaXRpb25zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9ucy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X3Bvc2l0aW9uc190YWJ1bGFyLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dfcm9sZXMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZmxvd3MuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2Zsb3dzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2Zvcm1zLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mb3Jtcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kYXRhLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL2luc3RhbmNlX2xpc3QuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9pbnN0YW5jZV9kcmFmdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvaW5zdGFuY2VfZHJhZnQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvZGlzdHJpYnV0ZWRfaW5zdGFuY2VzX3N0YXRlX2J5X2lkcy5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9yZWxhdGVkX2luc3RhY2VzLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvcHVibGljYXRpb25zL3NwYWNlX3VzZXJfc2lnbnMuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9wdWJsaWNhdGlvbnMvdXNlcl9pbmJveF9pbnN0YW5jZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3B1YmxpY2F0aW9ucy9mbG93X21haW5fYXR0YWNoX3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvZmxvdy10ZW1wbGF0ZS93b3JrZmxvd190ZW1wbGF0ZS5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3NlcnZlci9mbG93LXRlbXBsYXRlL3dvcmtmbG93X3RlbXBsYXRlLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvc3RlZWRvc193b3JrZmxvdy9zZXJ2ZXIvc2NoZWR1bGUvYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uLmNvZmZlZSIsIm1ldGVvcjovL/CfkrthcHAvc2VydmVyL3NjaGVkdWxlL2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbi5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvc2VydmVyL3NjaGVkdWxlL3RpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvc2NoZWR1bGUvdGltZW91dF9hdXRvX3N1Ym1pdC5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3N0ZWVkb3Nfd29ya2Zsb3cvcmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhci5jb2ZmZWUiLCJtZXRlb3I6Ly/wn5K7YXBwL3JlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93L3RhYnVsYXIuY29mZmVlIiwibWV0ZW9yOi8v8J+Su2FwcC90YWJ1bGFyLmNvZmZlZSJdLCJuYW1lcyI6WyJjaGVja05wbVZlcnNpb25zIiwibW9kdWxlIiwibGluayIsInYiLCJjb29raWVzIiwibWtkaXJwIiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJVUkkiLCJwdW55Y29kZSIsIklQdjYiLCJTZWNvbmRMZXZlbERvbWFpbnMiLCJTTEQiLCJfVVJJIiwidXJsIiwiYmFzZSIsIl91cmxTdXBwbGllZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIl9iYXNlU3VwcGxpZWQiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJsb2NhdGlvbiIsImhyZWYiLCJhYnNvbHV0ZVRvIiwidmVyc2lvbiIsInAiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImVzY2FwZVJlZ0V4Iiwic3RyaW5nIiwicmVwbGFjZSIsImdldFR5cGUiLCJ2YWx1ZSIsIlN0cmluZyIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiaXNBcnJheSIsIm9iaiIsImZpbHRlckFycmF5VmFsdWVzIiwiZGF0YSIsImxvb2t1cCIsImkiLCJfbWF0Y2giLCJ0ZXN0Iiwic3BsaWNlIiwiYXJyYXlDb250YWlucyIsImxpc3QiLCJfdHlwZSIsIm1hdGNoIiwiYXJyYXlzRXF1YWwiLCJvbmUiLCJ0d28iLCJzb3J0IiwibCIsInRyaW1TbGFzaGVzIiwidGV4dCIsInRyaW1fZXhwcmVzc2lvbiIsIl9wYXJ0cyIsInByb3RvY29sIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImhvc3RuYW1lIiwidXJuIiwicG9ydCIsInBhdGgiLCJxdWVyeSIsImZyYWdtZW50IiwiZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzIiwiZXNjYXBlUXVlcnlTcGFjZSIsInByb3RvY29sX2V4cHJlc3Npb24iLCJpZG5fZXhwcmVzc2lvbiIsInB1bnljb2RlX2V4cHJlc3Npb24iLCJpcDRfZXhwcmVzc2lvbiIsImlwNl9leHByZXNzaW9uIiwiZmluZF91cmlfZXhwcmVzc2lvbiIsImZpbmRVcmkiLCJzdGFydCIsImVuZCIsInRyaW0iLCJkZWZhdWx0UG9ydHMiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJ3cyIsIndzcyIsImludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycyIsImRvbUF0dHJpYnV0ZXMiLCJnZXREb21BdHRyaWJ1dGUiLCJub2RlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInR5cGUiLCJlc2NhcGVGb3JEdW1iRmlyZWZveDM2IiwiZXNjYXBlIiwic3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaXNvODg1OSIsInVuZXNjYXBlIiwidW5pY29kZSIsImNoYXJhY3RlcnMiLCJwYXRobmFtZSIsImV4cHJlc3Npb24iLCJtYXAiLCJyZXNlcnZlZCIsInVybnBhdGgiLCJlbmNvZGVRdWVyeSIsImVzY2FwZWQiLCJkZWNvZGVRdWVyeSIsImUiLCJfcGFydCIsImdlbmVyYXRlQWNjZXNzb3IiLCJfZ3JvdXAiLCJjIiwiZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24iLCJfc2VwIiwiX2NvZGluZ0Z1bmNOYW1lIiwiX2lubmVyQ29kaW5nRnVuY05hbWUiLCJhY3R1YWxDb2RpbmdGdW5jIiwic2VnbWVudHMiLCJzcGxpdCIsImpvaW4iLCJkZWNvZGVQYXRoIiwiZGVjb2RlVXJuUGF0aCIsInJlY29kZVBhdGgiLCJyZWNvZGVVcm5QYXRoIiwiZW5jb2RlUmVzZXJ2ZWQiLCJwYXJzZSIsInBhcnRzIiwicG9zIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsInBhcnNlQXV0aG9yaXR5IiwicGFyc2VIb3N0IiwiYnJhY2tldFBvcyIsInQiLCJjaGFyQXQiLCJmaXJzdENvbG9uIiwiZmlyc3RTbGFzaCIsIm5leHRDb2xvbiIsInBhcnNlVXNlcmluZm8iLCJsYXN0SW5kZXhPZiIsInNoaWZ0IiwicGFyc2VRdWVyeSIsIml0ZW1zIiwic3BsaXRzIiwibmFtZSIsInB1c2giLCJidWlsZCIsImJ1aWxkQXV0aG9yaXR5IiwiYnVpbGRIb3N0IiwiYnVpbGRVc2VyaW5mbyIsImJ1aWxkUXVlcnkiLCJ1bmlxdWUiLCJrZXkiLCJidWlsZFF1ZXJ5UGFyYW1ldGVyIiwiYWRkUXVlcnkiLCJjb25jYXQiLCJyZW1vdmVRdWVyeSIsImhhc1F1ZXJ5Iiwid2l0aGluQXJyYXkiLCJfYm9vbHkiLCJCb29sZWFuIiwib3AiLCJjb21tb25QYXRoIiwiTWF0aCIsIm1pbiIsIndpdGhpblN0cmluZyIsImNhbGxiYWNrIiwib3B0aW9ucyIsIl9zdGFydCIsIl9lbmQiLCJfdHJpbSIsIl9hdHRyaWJ1dGVPcGVuIiwibGFzdEluZGV4IiwiZXhlYyIsImluZGV4IiwiaWdub3JlSHRtbCIsImF0dHJpYnV0ZU9wZW4iLCJtYXgiLCJzZWFyY2giLCJpZ25vcmUiLCJyZXN1bHQiLCJlbnN1cmVWYWxpZEhvc3RuYW1lIiwidG9BU0NJSSIsIm5vQ29uZmxpY3QiLCJyZW1vdmVBbGwiLCJ1bmNvbmZsaWN0ZWQiLCJVUklUZW1wbGF0ZSIsImRlZmVyQnVpbGQiLCJfZGVmZXJyZWRfYnVpbGQiLCJfc3RyaW5nIiwiY2xvbmUiLCJ2YWx1ZU9mIiwiZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvciIsImdlbmVyYXRlUHJlZml4QWNjZXNzb3IiLCJfa2V5IiwiaGFzaCIsInJlcyIsIl9vYmplY3QiLCJhdHRyaWJ1dGUiLCJzcmMiLCJpcyIsIndoYXQiLCJpcCIsImlwNCIsImlwNiIsInNsZCIsImlkbiIsInJlbGF0aXZlIiwiaGFzIiwiX3Byb3RvY29sIiwiX3BvcnQiLCJfaG9zdG5hbWUiLCJzY2hlbWUiLCJ4Iiwib3JpZ2luIiwiYXV0aG9yaXR5IiwiaG9zdCIsInVzZXJpbmZvIiwicmVzb3VyY2UiLCJzdWJkb21haW4iLCJkb21haW4iLCJzdWIiLCJSZWdFeHAiLCJ0bGQiLCJnZXQiLCJSZWZlcmVuY2VFcnJvciIsImRpcmVjdG9yeSIsImZpbGVuYW1lIiwiZGVjb2RlUGF0aFNlZ21lbnQiLCJtdXRhdGVkRGlyZWN0b3J5Iiwibm9ybWFsaXplUGF0aCIsInN1ZmZpeCIsInMiLCJzZWdtZW50Iiwic2VwYXJhdG9yIiwiYWJzb2x1dGUiLCJFcnJvciIsInBvcCIsInVuc2hpZnQiLCJzZWdtZW50Q29kZWQiLCJxIiwic2V0UXVlcnkiLCJzZXRTZWFyY2giLCJhZGRTZWFyY2giLCJyZW1vdmVTZWFyY2giLCJoYXNTZWFyY2giLCJub3JtYWxpemUiLCJub3JtYWxpemVQcm90b2NvbCIsIm5vcm1hbGl6ZVF1ZXJ5Iiwibm9ybWFsaXplRnJhZ21lbnQiLCJub3JtYWxpemVIb3N0bmFtZSIsIm5vcm1hbGl6ZVBvcnQiLCJiZXN0IiwiX3BhdGgiLCJfd2FzX3JlbGF0aXZlIiwiX2xlYWRpbmdQYXJlbnRzIiwiX3BhcmVudCIsIl9wb3MiLCJub3JtYWxpemVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJkIiwicmVhZGFibGUiLCJ1cmkiLCJ0b1VuaWNvZGUiLCJxcCIsImt2IiwicmVzb2x2ZWQiLCJwcm9wZXJ0aWVzIiwiYmFzZWRpciIsInJlbGF0aXZlVG8iLCJyZWxhdGl2ZVBhcnRzIiwiYmFzZVBhcnRzIiwiY29tbW9uIiwicmVsYXRpdmVQYXRoIiwiYmFzZVBhdGgiLCJwYXJlbnRzIiwiZXF1YWxzIiwib25lX21hcCIsInR3b19tYXAiLCJjaGVja2VkIiwib25lX3F1ZXJ5IiwidHdvX3F1ZXJ5IiwiV29ya2Zsb3ciLCJJbWFnZVNpZ24iLCJUcmFjZXNIYW5kbGVyIiwiVHJhY2VzVGVtcGxhdGUiLCJJbnN0YW5jZWZvcm1UZW1wbGF0ZSIsIkluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlIiwiSW5zdGFuY2VTaWduVGV4dCIsIlJlbGF0ZWRJbnN0YW5jZXMiLCJSZWxhdGVkUmVjb3JkcyIsIkluc3RhbmNlTWFjcm8iLCJjb250ZXh0IiwiVHJhY2VzTWFuYWdlciIsImlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nIiwiZmllbGRfZm9ybXVsYSIsImluY2x1ZGVzT3BpbmlvbkZpZWxkIiwiZm9ybSIsImZvcm1fdmVyc2lvbiIsIl9mb3JtX3ZlcnNpb24iLCJmaWVsZF9mb3JtdWxhcyIsImZpZWxkcyIsIkFycmF5IiwiTWV0ZW9yIiwiaXNTZXJ2ZXIiLCJ1dWZsb3dNYW5hZ2VyIiwiZ2V0Rm9ybVZlcnNpb24iLCJkYiIsImZvcm1zIiwiZmluZE9uZSIsIl9pZCIsImZvcm1fdmVyc2lvbnMiLCJmb3JFYWNoIiwiZiIsInJlZiIsImNvbnNvbGUiLCJsb2ciLCJmMSIsImZvcm11bGEiLCJfIiwic29tZSIsImhlbHBlcnMiLCJhdXRoX3Rva2VucyIsIkNvbGxlY3Rpb24iLCJfZ2V0TG9jYWxlIiwiX2dldFJlcXVpcmVkRmllbGRzIiwiX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzIiwiX2dldFN0YXJ0U3RlcFJlcXVpcmVkRmllbGRzIiwiX2dldFRlbXBsYXRlRGF0YSIsIl9nZXRWaWV3SHRtbCIsImdldExpbmtUZXh0IiwiSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlIiwiaW5zdGFuY2VfYXR0YWNobWVudCIsImFmU2VsZWN0VXNlclJlYWQiLCJhZkZvcm1Hcm91cFJlYWQiLCJhZkZvcm1Hcm91cCIsImNyZWF0ZSIsInRlbXBhbHRlTmFtZSIsInN0ZWVkb3NEYXRhIiwidGVtcGxhdGUiLCJ0ZW1wbGF0ZUNvbXBpbGVkIiwidGVtcGxhdGVSZW5kZXJGdW5jdGlvbiIsIlNwYWNlYmFyc0NvbXBpbGVyIiwiY29tcGlsZSIsImlzQm9keSIsImV2YWwiLCJUZW1wbGF0ZSIsIkJsYXplIiwiY3JlYXRlSW5zdGFuY2VTaWduVGV4dCIsImluc3RhbmNlU2lnblRleHRDb21waWxlZCIsImluc3RhbmNlU2lnblRleHRIdG1sIiwiaW5zdGFuY2VTaWduVGV4dFJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VTaWduVGV4dCIsImNyZWF0ZUltYWdlU2lnbiIsImltYWdlU2lnbkNvbXBpbGVkIiwiaW1hZ2VTaWduSHRtbCIsImltYWdlU2lnblJlbmRlckZ1bmN0aW9uIiwiaW1hZ2VTaWduIiwiY3JlYXRlVHJhY2VzSGFubGRlciIsInRyYWNlc0hhbmxkZXJDb21waWxlZCIsInRyYWNlc0hhbmxkZXJIdG1sIiwidHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXIiLCJpbml0IiwiaXRlbSIsImxhYmVsIiwiZGV0YWlsX3VybCIsIlN0ZWVkb3MiLCJhYnNvbHV0ZVVybCIsImdldFZhbHVlIiwiZmllbGQiLCJsb2NhbGUiLCJ1dGNPZmZzZXQiLCJkYXRlIiwiaG91cnMiLCJtb250aCIsInNlY29uZHMiLCJ0MCIsInQxIiwieWVhciIsImVuY29kZVVSSSIsImVycm9yIiwiaXNfbXVsdGlzZWxlY3QiLCJnZXRQcm9wZXJ0eSIsImZ1bGxuYW1lIiwiVEFQaTE4biIsIl9fIiwiRGF0ZSIsImZvcm1hdERhdGUiLCJpc190ZXh0YXJlYSIsIlNwYWNlYmFycyIsIlNhZmVTdHJpbmciLCJNYXJrZG93biIsIm51bWJlclRvU3RyaW5nIiwiZGlnaXRzIiwiZ2V0TGFiZWwiLCJjb2RlIiwiZmluZFByb3BlcnR5QnlQSyIsImdldEluc3RhbmNlRm9ybVZlcnNpb24iLCJpbnN0YW5jZSIsImZvcm1fZmllbGRzIiwiY3VycmVudCIsIndoZXJlIiwiaGlzdG9yeXMiLCJnZXRGbG93VmVyc2lvbiIsImZsb3ciLCJmbG93X3ZlcnNpb24iLCJmbG93cyIsInZpZXdIdG1sIiwiQXNzZXRzIiwiZ2V0VGV4dCIsInVzZXIiLCJyZWYxIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyZXYiLCJpc19yZXF1aXJlZCIsInN0ZXBzIiwiZWRpdGFibGVDb2RlIiwic3RhcnRTdGVwIiwia2V5cyIsInBlcm1pc3Npb25zIiwicmVxdWlyZWRGaWVsZHMiLCJpbnRlcnNlY3Rpb24iLCJzcGFjZSIsIldvcmtmbG93TWFuYWdlciIsImlzQ2xpZW50IiwiV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdCIsImdldEF1dG9mb3JtU2NoZW1hVmFsdWVzIiwiaW5zbmFtZSIsImluc19zdGF0ZSIsInN0YXRlIiwiaW5zX2ZpbmFsX2RlY2lzaW9uIiwiaW5zX2NvZGUiLCJpbnNfaXNfYXJjaGl2ZWQiLCJpc19hcmNoaXZlZCIsImluc19pc19kZWxldGVkIiwiYXBwbGljYW50X25hbWUiLCJhcHBsaWNhbnRDb250ZXh0Iiwic2Vzc2lvblVzZXJJZCIsImVkaXRhYmxlIiwic3RhcnRTdGVwRWRpdGFibGVGaWVsZHMiLCJwYXNzaW5nIiwibW9tZW50IiwiZm9ybWF0IiwiZ2V0SW5zdGFuY2VWaWV3IiwiYm9keSIsImluc3RhbmNlQ29tcGlsZWQiLCJpbnN0YW5jZVJlbmRlckZ1bmN0aW9uIiwiaW5zdGFuY2VUZW1wbGF0ZSIsIlRlbXBsYXRlTWFuYWdlciIsImdldFRlbXBsYXRlIiwidGVtcGxhdGVOYW1lIiwiaW5zdGFuY2VfcmVhZG9ubHlfdmlldyIsInRvSFRNTFdpdGhEYXRhIiwiZ2V0VHJhY2VzVmlldyIsInRyYWNlQ29tcGlsZWQiLCJ0cmFjZVJlbmRlckZ1bmN0aW9uIiwidHJhY2VzSHRtbCIsImluc3RhbmNlX3N0eWxlIiwidHJhY2VfcmVhZG9ubHlfdmlldyIsInRyYWNlcyIsImdldEF0dGFjaG1lbnRWaWV3IiwiYXR0YWNobWVudENvbXBpbGVkIiwiYXR0YWNobWVudEh0bWwiLCJhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24iLCJhdHRhY2htZW50c19yZWFkb25seV92aWV3IiwiZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXciLCJyZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQiLCJyZWxhdGVkSW5zdGFuY2VzSHRtbCIsInJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbiIsInJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXciLCJnZXRSZWxhdGVkUmVjb3Jkc1ZpZXciLCJyZWxhdGVkUmVjb3Jkc0NvbXBpbGVkIiwicmVsYXRlZFJlY29yZHNIdG1sIiwicmVsYXRlZFJlY29yZHNSZW5kZXJGdW5jdGlvbiIsInJlbGF0ZWRfcmVjb3Jkc192aWV3IiwiZ2V0T25Mb2FkU2NyaXB0IiwiZm9ybV9zY3JpcHQiLCJnZXRJbnN0YW5jZUh0bWwiLCJhbGxDc3NMaW5rIiwiYXR0YWNobWVudCIsImNyZWF0b3JTZXJ2aWNlIiwiY3NzSHJlZiIsImZvcm1EZXNjcmlwdGlvbiIsImZvcm1EZXNjcmlwdGlvbkh0bWwiLCJodG1sIiwiaW5zX3JlY29yZF9pZHMiLCJpbnN0YW5jZUJveFN0eWxlIiwib25Mb2FkU2NyaXB0Iiwib3BlbkZpbGVTY3JpcHQiLCJyZWxhdGVkX2luc3RhbmNlcyIsInJlbGF0ZWRfcmVjb3JkcyIsInNob3dUcmFjZXNCdG4iLCJzaG93VHJhY2VzU2NyaXB0IiwidHJhY2UiLCJ0cmFjZUNoZWNrIiwid2lkdGgiLCJzZXR0aW5ncyIsIndlYnNlcnZpY2VzIiwiY3JlYXRvciIsInJlY29yZF9pZHMiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNNb2JpbGUiLCJzaG93VHJhY2UiLCJmaW5hbF9kZWNpc2lvbiIsInNob3dBdHRhY2htZW50cyIsImlzRW1wdHkiLCJ0YWdnZXIiLCJzdHlsZXMiLCJkZXNjcmlwdGlvbiIsInBsdWdpbnMiLCJmb3JtSWQiLCJpbnN0YW5jZV90aXRsZSIsInBhZ2VUaXRsZSIsInBhZ2VUaXRsZVRyQ2xhc3MiLCJ2YWwiLCJDb3JlRm9ybSIsInBhZ2VUaXRsZUZpZWxkTmFtZSIsImhhbmRsZVRhYmxlVGVtcGxhdGUiLCJfZXhwb3J0IiwidGFibGVfZmllbGRzIiwidGFibGVfZmllbGQiLCJmaWVsZF9wZXJtaXNzaW9uIiwicHVyZUNvZGUiLCJyZXF1aXJlZCIsInRpdGxlX3Blcm1pc3Npb24iLCJyZW1vdmVTcGVjaWFsQ2hhcmFjdGVyIiwiaXNPcGluaW9uRmllbGQiLCJ0cl9zdGFydCIsInRkX2NvbHNwYW4iLCJ0cl9lbmQiLCJpbmNsdWRlcyIsInBlcm1pc3Npb24iLCJfdGVtcGxhdGUiLCJ0YWJsZSIsIl90ZW1wbGF0ZUhlbHBzIiwic3RlZWRvc19pbnN0YW5jZSIsImdldEluc3RhbmNlIiwiYXR0cyIsImlkIiwic3R5bGUiLCJkaXNhYmxlZCIsImluc3RhbmNlSWQiLCJmb3JtX3R5cGVzIiwiQXBwcm92ZU1hbmFnZXIiLCJpc1JlYWRPbmx5Iiwic3RlZWRvc19mb3JtIiwiaW5uZXJzdWJmb3JtQ29udGV4dCIsImRvY192YWx1ZXMiLCJTZXNzaW9uIiwiYSIsImIiLCJTaW1wbGVTY2hlbWEiLCJnZXRBdXRvZm9ybVNjaGVtYSIsImluc3RhbmNlX2JveF9zdHlsZSIsImJveCIsImlucyIsImp1ZGdlIiwicHJpbnRfdGVtcGxhdGUiLCJpbnN0YW5jZV90ZW1wbGF0ZSIsIlN0ZWVkb3NUYWJsZSIsImNoZWNrSXRlbSIsIml0ZW1faW5kZXgiLCJmaWVsZE9iaiIsImdldEZpZWxkIiwiZmllbGRWYWwiLCJnZXRJdGVtTW9kYWxWYWx1ZSIsInNmX25hbWUiLCJzZmllbGRzIiwic2YiLCJJbnN0YW5jZU1hbmFnZXIiLCJjaGVja0Zvcm1GaWVsZFZhbHVlIiwiJCIsInNldFRhYmxlSXRlbVZhbHVlIiwiaXRlbV92YWx1ZSIsInRhYmxlVmFsdWUiLCJnZXRUYWJsZVZhbHVlIiwiZ2V0VGFibGVJdGVtVmFsdWUiLCJyZW1vdmVUYWJsZUl0ZW0iLCJyZW1vdmVkIiwic2V0VGFibGVWYWx1ZSIsImdldFZhbGlkVmFsdWUiLCJ2YWxpZFZhbHVlIiwiaGFuZGxlRGF0YSIsInZhbHVlcyIsImluc3RhbmNlRmllbGRzIiwiZ2V0SW5zdGFuY2VGaWVsZHMiLCJnZXRNb2RhbERhdGEiLCJGb3JtX2Zvcm11bGEiLCJnZXRGb3JtdWxhRmllbGRWYXJpYWJsZSIsIkF1dG9Gb3JtIiwiZ2V0Rm9ybVZhbHVlcyIsImluc2VydERvYyIsImFkZEl0ZW0iLCJfaXRlbV92YWx1ZSIsImdldEtleXMiLCJhcHBlbmQiLCJnZXRUciIsInVwZGF0ZUl0ZW0iLCJ0ZHMiLCJnZXRSZW1vdmVUZCIsInNmaWVsZCIsImdldFRkIiwiZW1wdHkiLCJydW5Gb3JtdWxhIiwicmVtb3ZlSXRlbSIsImhpZGUiLCJzaG93TW9kYWwiLCJtZXRob2QiLCJtb2RhbERhdGEiLCJNb2RhbCIsInNob3ciLCJnZXRDdXJyZW50RGF0YUZvckZvcm0iLCJzcyIsImdldEZvcm1TY2hlbWEiLCJzY2hlbWEiLCJvYmplY3RLZXlzIiwiX21ha2VHZW5lcmljIiwiZ2V0VGhlYWQiLCJpc09iamVjdCIsInRoZWFkIiwidHJzIiwic2ZfbGVuZ3RoIiwid2lkZV9maWVsZHMiLCJmaWx0ZXJQcm9wZXJ0eSIsImlzX3dpZGUiLCJnZXRUYm9keSIsInRib2R5IiwidHIiLCJ0ZCIsInRkX3ZhbHVlIiwiZ2V0VERWYWx1ZSIsInZpZXciLCJDRkRhdGFNYW5hZ2VyIiwiZ2V0Rm9ybXVsYVNwYWNlVXNlcnMiLCJ1IiwiZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbnMiLCJvIiwiZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbiIsInBsdWNrIiwiYWRkSW5wdXRUeXBlIiwidmFsdWVPdXQiLCJ2YWx1ZUNvbnZlcnRlcnMiLCJzdHJpbmdUb1N0cmluZ0FycmF5Iiwic3RyaW5nVG9OdW1iZXIiLCJzdHJpbmdUb051bWJlckFycmF5Iiwic3RyaW5nVG9Cb29sZWFuIiwic3RyaW5nVG9Cb29sZWFuQXJyYXkiLCJzdHJpbmdUb0RhdGUiLCJzdHJpbmdUb0RhdGVBcnJheSIsImNvbnRleHRBZGp1c3QiLCJtYXhsZW5ndGgiLCJhZlRhYmxlIiwiZXZlbnRzIiwiZXZlbnQiLCJuZXdfaXRlbV9pbmRleCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0Iiwic2V0IiwicmVuZGVyZWQiLCJzdHIiLCJhZGRJdGVtVHIiLCJzcGFjZVVzZXJTaWduIiwidXNlcklkIiwic3BhY2VfdXNlcl9zaWducyIsImltYWdlVVJMIiwic2lnbiIsInNob3dTaWduSW1hZ2UiLCJoYW5kbGVyIiwiaXNfZmluaXNoZWQiLCJ1bmVtcHR5IiwidW5lcXVhbHMiLCJpbmNsdWRlIiwicmVmMiIsInJlZjMiLCJnZXRJbnN0YW5jZUZsb3dWZXJzaW9uIiwiYXBwcm92ZXMiLCJyZWY0Iiwic3RlcCIsImFwcHJvdmUiLCJqdWRnZV9uYW1lIiwiaGFuZGxlcl9uYW1lIiwiaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSIsImhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lIiwiZmluaXNoX2RhdGUiLCJvcGluaW9uX2ZpZWxkc19jb2RlIiwic2lnbl9maWVsZF9jb2RlIiwiaXNfcmVhZCIsInNpZ25fc2hvdyIsImFmdGVyX2ZpZWxkIiwiYmVmb3JlX2ZpZWxkIiwicHJlX2ZpZWxkcyIsInByZV93aWRlX2ZpZWxkcyIsInNvcnRfYXBwcm92ZSIsIm9yZGVyIiwicDEiLCJwMiIsIl9wMSIsIl9wMiIsImdldFRpbWUiLCJfdCIsImdldENmQ2xhc3MiLCJnZXRUYWJsZVRoZWFkIiwiZ2V0VGFibGVCb2R5Iiwic2hvd0xhYmVsIiwidGVtcGxhdGVEYXRhIiwiZ2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lIiwidG9wX2tleXdvcmRzIiwiZm9vMSIsIm9waW5pb25GaWVsZHMiLCJmb28iLCJqc29uX2Zvcm11bGEiLCJzMSIsImVycm9yMSIsInlpamlhbmxhbiIsInN0ZXBOYW1lIiwiaW1hZ2Vfc2lnbiIsIm9ubHlfY2Nfb3BpbmlvbiIsIm9ubHlfY2MiLCJkZWZhdWx0X2Rlc2NyaXB0aW9uIiwib25seV9oYW5kbGVyIiwic2hvd0NDT3BpbmlvbiIsIm1hcmtEb3duVG9IdG1sIiwibWFya0Rvd25TdHJpbmciLCJyZW5kZXJlciIsIlJlbmRlcmVyIiwidGl0bGUiLCJmX2xhYmVsIiwidGhhdCIsImlzU2VjdGlvbiIsInJlZ2lzdGVySGVscGVyIiwiaW5zX2F0dGFjaF9kb3dubG9hZF91cmwiLCJnZXRQZXJtaXNzaW9ucyIsImluc3RhbmNlZm9ybUNoYW5nZUV2ZW50IiwicHJldmVudERlZmF1bHQiLCJvcGVuV2luZG93IiwidGFyZ2V0Iiwib25DcmVhdGVkIiwiY29tcGlsZWQiLCJpbnN0YW5jZUN1c3RvbVRlbXBsYXRlIiwiaW5zdGFuY2VWaWV3IiwicmVuZGVyRnVuY3Rpb24iLCJWaWV3IiwiaW5zdGFuY2VfY3VzdG9tX3RlbXBsYXRlIiwib25SZW5kZXJlZCIsImN1cnJlbnRBcHByb3ZlIiwiY3VycmVudFN0ZXAiLCJmb3JtdWxhX2ZpZWxkcyIsImluc3RhbmNlTnVtYmVyRmllbGRzIiwiYXBwbGljYW50IiwibmV4dFN0ZXBzIiwibmV4dFN0ZXBVc2VycyIsIkluc3RhbmNlRXZlbnQiLCJpbml0RXZlbnRzIiwiZ2V0Q3VycmVudEFwcHJvdmUiLCJlYWNoIiwiZWxlbWVudCIsInNjaGVtYUtleSIsInRvYXN0ciIsInJlYXNvbiIsImdldEZpZWxkVmFsdWUiLCJJbnN0YW5jZU51bWJlclJ1bGVzIiwiaW5zdGFuY2VOdW1iZXJCdWlsZGVyIiwidHJpZ2dlciIsImdldEN1cnJlbnRTdGVwIiwicnVuIiwic2hvd01haW5UaXRsZSIsIndvcmtmbG93TWFpbkF0dGFjaFRpdGxlIiwiZW5hYmxlZF9hZGRfbWFpbl9hdHRhY2htZW50IiwiY3VycmVudF9zdGVwIiwibWFpbl9hdHRhY2hfY291bnQiLCJjZnMiLCJpbnN0YW5jZXMiLCJmaW5kIiwiY291bnQiLCJkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50IiwiZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlIiwic3RhcnRfc3RlcCIsImdldFN0YXJ0U3RlcCIsImNhbl9lZGl0X21haW5fYXR0YWNoIiwic3RlcF90eXBlIiwiZW5hYmxlZF9lZGl0X25vcm1hbF9hdHRhY2htZW50IiwiZ2V0RmxvdyIsInVwbG9hZF9hZnRlcl9iZWluZ19kaXN0cmlidXRlZCIsImlzQ0MiLCJnZXRDQ1N0ZXAiLCJjYW5fZWRpdF9ub3JtYWxfYXR0YWNoIiwibWFpbl9hdHRhY2htZW50IiwibWFpbl9hdHRhY2giLCJub3JtYWxfYXR0YWNobWVudHMiLCJzZWxlY3RvciIsIiRuZSIsImRmaXMiLCJkaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIiwiJGluIiwiZGlzdHJpYnV0ZV9tYWluIiwiZmlyc3RWZXJzaW9uTWFpbiIsIm1ldGFkYXRhIiwicGFyZW50IiwiYXR0YWNobWVudFVwbG9hZGVkQXQiLCJ1cGxvYWRlZEF0IiwiZmlyc3RWZXJzaW9uIiwic29ydEJ5IiwiaW5zdGFuY2VJZHMiLCJhdHRhY2htZW50c19jb3VudCIsImZsb3dfZmlsZXMiLCJmaWxlcyIsImlzRHJhZnRBbmRGbG93ZmlsZXNFeGlzdCIsImNvbXBhY3QiLCJhdHRhY2htZW50cyIsIiRvciIsImZldGNoIiwibXlBcHByb3ZlIiwibXlUcmFjZSIsImlzSW5ib3giLCJkZWZhdWx0RGVzY3JpcHRpb24iLCJhcHByb3ZlX3NvcnQiLCJhcHByb3Zlc0dyb3VwIiwiYXBwcm92ZXNfc29ydGVkIiwiY29tcGxldGVkX2RhdGUiLCJoYXNOZXh0IiwiaGF2ZURlc2NyaXB0aW9uQXBwcm92ZSIsImlzX2NvbXBsZXRlZCIsImxhc3QiLCJ0b3BfYXBwcm92ZXMiLCJ1bmlvbiIsImZpbHRlciIsInRvcF9hcHByb3ZlIiwiZ3JvdXBCeSIsImhhbmRsZXJBcHByb3ZlcyIsImRlc2NyaXB0aW9uQXBwcm92ZXMiLCJfZGlzcGxheSIsImlzTXlBcHByb3ZlIiwibXlBcHByb3ZlRGVzY3JpcHRpb24iLCJhcHByb3ZlSWQiLCJub3ciLCJpc09waW5pb25PZkZpZWxkIiwiaW1hZ2VTaWduRGF0YSIsImdldExhc3RTaWduQXBwcm92ZSIsImdldEhhbmRsZXJTaWduU2hvd0FwcHJvdmVzIiwibGFzdE15QXBwcm92ZURlc2NyaXB0aW9uIiwic2hvd0FwcHJvdmUiLCJqdWRnZV9kZXNjcmlwdGlvbiIsImlzX2FwcHJvdmVkIiwiaXNfcmVqZWN0ZWQiLCJpc19yZWFkZWQiLCJhZGRDbGFzcyIsInNldFRpbWVvdXQiLCJkYXRlRm9ybWF0IiwiZ2V0RnVsbFllYXIiLCJnZXRTdGVwTmFtZSIsInN0ZXBJZCIsImdldEluc3RhbmNlU3RlcCIsInNob3dEZWxldGVCdXR0b24iLCJhcHByb3ZlZCIsImZyb21fdXNlciIsImlzU2hvd01vZGlmaWNhdGlvbkJ1dHRvbiIsImFwcHJvdmVfYWRtaW5zIiwiaXNTaG93Iiwid29ya2Zsb3ciLCJjb250YWlucyIsImlzRWRpdGluZyIsImlzX2VkaXRpbmciLCJpc1Nob3dEZXNjcmlwdGlvbiIsImdldEFwcHJvdmVTdGF0dXNJY29uIiwiYXBwcm92ZUp1ZGdlIiwiYXV0b1N1Ym1pdHRlZCIsImFwcHJvdmVTdGF0dXNJY29uIiwiZ2V0QXBwcm92ZVN0YXR1c1RleHQiLCJhcHByb3ZlU3RhdHVzVGV4dCIsImdldEFwcHJvdmVKdWRnZUNsYXNzIiwiaXNGb3J3YXJkIiwic2hvd0ZvcndhcmREZWxldGVCdXR0b24iLCJmb3J3YXJkX2luc3RhbmNlIiwiaXNEaXN0cmlidXRlIiwic2hvd0Rpc3RyaWJ1dGVEZWxldGVCdXR0b24iLCJpc0xlZ2FsVmVyc2lvbiIsImhhc0Zsb3dBZG1pblBlcm1pc3Npb24iLCJmaW5pc2hEYXRlU2NoZW1hIiwiaXNBbmRyb2lkT3JJT1MiLCJhdXRvZm9ybSIsIm9wdGlvbmFsIiwicmVhZG9ubHkiLCJkYXRlVGltZVBpY2tlck9wdGlvbnMiLCJpZ25vcmVSZWFkb25seSIsIndpZGdldFBvc2l0aW9uaW5nIiwiaG9yaXpvbnRhbCIsImZpbmlzaERhdGVWYWx1ZXMiLCJzaG93VHJhY2VzVmlldyIsInNob3dfbW9kYWxfdHJhY2VzX2xpc3QiLCJzcGFjZV9zZXR0aW5ncyIsImdldEluc3RhbmNlU3RhdGVUZXh0IiwiaW5zdGFuY2VfaWQiLCJnZXRJbnN0YW5jZVN0YXRlQ29sb3IiLCJjbGEiLCJmaXJzdFRyYWNlIiwibGFzdF9kaXN0cmlidXRlX2Zyb20iLCJkaXNfaW5mbyIsIiRleGlzdHMiLCJjcmVhdGVkIiwiY3JlYXRlZF9ieSIsIlVVZmxvd19hcGkiLCJnZXROYW1lRm9yVXNlciIsInVzZXJzIiwiZnJvbV91c2VyX25hbWUiLCJpc0NDT3JEaXN0cmlidXRlT3JGb3J3YXJkVGVybWluYXRlZCIsImp1ZGdlVGVybWluYXRlZCIsImluc3RhbmNlRXhpc3RzIiwiYWdlbnREZXNjcmlwdGlvbiIsInVzZXJOYW1lIiwidHJhY2VOYW1lIiwidHJhY2VJZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbGxpbmciLCJlcnIiLCJyZW1vdmVDbGFzcyIsInN1Y2Nlc3MiLCJjbG9zZXN0IiwidGFyZ2V0X3VzZXJfaWQiLCJDcmVhdG9yIiwib3BlblNhZmVPYmplY3RVcmwiLCJmb3J3YXJkX3NwYWNlIiwiZm9yd2FyZHNwYWNlIiwiZm9yd2FyZGluc3RhbmNlIiwiVHJhY2tlciIsImFmdGVyRmx1c2giLCJvbiIsInNjcm9sbFRvcCIsImZpbmlzaF9pbnB1dCIsIm9waW5pb25faW5wdXQiLCJhbGxvd011bHRpcGxlIiwic2hvd1JlbGF0ZWRJbnN0YWNlcyIsInJlbGF0ZWRfaW5zdGFjZXMiLCJyZWxhdGVkX2luc3RhY2VfdXJsIiwiaXNDb3Jkb3ZhIiwic2hvd19kZWxldGUiLCJzaG93UmVsYXRlZFJlY29yZHMiLCJEZXNpZ25lckFQSSIsImdldEFic29sdXRlVXJsIiwicm9vdFVybCIsIl9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18iLCJST09UX1VSTF9QQVRIX1BSRUZJWCIsIndyaXRlUmVzcG9uc2UiLCJodHRwQ29kZSIsInN0YXR1c0NvZGUiLCJzZW5kSW52YWxpZFVSTFJlc3BvbnNlIiwic2VuZEF1dGhUb2tlbkV4cGlyZWRSZXNwb25zZSIsInNlbmRIdG1sUmVzcG9uc2UiLCJyZXEiLCJlcnJvcl9tc2ciLCJKc29uUm91dGVzIiwiYWRkIiwibmV4dCIsImRlYWxfdHlwZSIsInNwYWNlSWQiLCJzZW5kUmVzdWx0Iiwic3BlY2lmeVVzZXJJZHMiLCJnZXRVc2VycyIsImFwcGxpY2FudElkIiwiYXBwcm92ZVJvbGVJZHMiLCJnZXRVc2VyIiwiZ2V0Um9sZVVzZXJzQnlPcmdzQW5kUm9sZXMiLCJvcmdhbml6YXRpb25zIiwiYXBwcm92ZUhyUm9sZUlkcyIsImdldEhyUm9sZXNVc2VycyIsIm1hbmFnZXIiLCJ1c2VyRmllbGQiLCJ1c2VyRmllbGRWYWx1ZSIsIm9yZ3MiLCJvcmdDaGlsZHJlbnMiLCJvcmdGaWVsZCIsIm9yZ0ZpZWxkVmFsdWUiLCJnZXRPcmdhbml6YXRpb25zIiwiZ2V0T3JnYW5pemF0aW9uc0NoaWxkcmVucyIsImdldE9yZ2FuaXphdGlvbiIsImdldE9yZ2FuaXphdGlvbkNoaWxkcmVucyIsImdldE9yZ2FuaXphdGlvbnNVc2VycyIsIm9yZ0ZpZWxkVXNlcnMiLCJzcGVjaWZ5T3JnSWRzIiwic3BlY2lmeU9yZ3MiLCJzcGVjaWZ5T3JnQ2hpbGRyZW5zIiwiYXBwcm92ZXJSb2xlSWRzIiwiZ2V0Um9sZVVzZXJzQnlVc2Vyc0FuZFJvbGVzIiwic3UiLCJ1c2VyX2FjY2VwdGVkIiwidW5pcVVzZXJzIiwidXNlcklkcyIsInNwYWNlVXNlcnMiLCJnZXRGb3JtdWxhVXNlck9iamVjdCIsImF1dG9Gb3JtRG9jIiwiYXBwcm92ZXIiLCJmb3JtdWxhX3ZhbHVlcyIsImluaXRfZm9ybXVsYV92YWx1ZXMiLCJzdGFjayIsImVycm9ycyIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJjYXRlZ29yaWVzIiwiY29tcGFueUlkIiwiY3VycmVudF91c2VyIiwiY3VycmVudF91c2VyX2luZm8iLCJvcmciLCJwb3NpdGlvbnMiLCJyb2xlcyIsInNwYWNlSWRzIiwic3BhY2VzIiwic3BhY2VzUXVlcnkiLCJjaGVja19hdXRob3JpemF0aW9uIiwiYWRtaW5zIiwiY29tcGFueV9pZCIsInNwYWNlX3VzZXJzIiwiaXNfZGVsZXRlZCIsImlzX3ZhbGlkIiwiaGVscF90ZXh0IiwiY2F0ZWdvcnkiLCJuYW1lX2Zvcm11bGEiLCJjb2RlX2Zvcm11bGEiLCJmbG93dHlwZSIsImN1cnJlbnRfbm8iLCJwZXJtcyIsImVycm9yX21lc3NhZ2UiLCJkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzIiwiZmxvd19yb2xlcyIsImZsb3dfcG9zaXRpb25zIiwiU3BhY2VVc2VycyIsIlVzZXJzIiwiRm9ybXMiLCJGbG93cyIsIk9yZ2FuaXphdGlvbnMiLCJQb3NpdGlvbnMiLCJSb2xlcyIsIkNhdGVnb3JpZXMiLCJTcGFjZXMiLCJoYXNoRGF0YSIsImFwcHJvdmVfZnJvbV9jbGllbnQiLCJ3b3JrZmxvd19lbmdpbmUiLCJpbnNlcnRlZF9pbnN0YW5jZXMiLCJpbnN0YW5jZV9mcm9tX2NsaWVudCIsIm5ld19pbnMiLCJuZXdfaW5zX2lkIiwiY3JlYXRlX2luc3RhbmNlIiwiaW5zZXJ0cyIsImNjX3VzZXJzIiwiZGVsZXRlX29iaiIsImluYm94X3VzZXJzIiwic3BhY2VVc2VyT3JnYW5pemF0aW9ucyIsInNwYWNlX2lkIiwic3BhY2VfdXNlciIsInVzZXJfaWRzIiwiZ2V0U3BhY2UiLCJnZXRTcGFjZVVzZXIiLCJzdWJtaXR0ZXIiLCJjYW5BZG1pbiIsImRlbGV0ZWQiLCJkZWxldGVkX2J5IiwiZGVsZXRlZF9pbnN0YW5jZXMiLCJpbnNlcnQiLCJyZW1vdmUiLCJ1bmlxIiwidV9pZCIsInB1c2hNYW5hZ2VyIiwic2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyIiwic2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24iLCJjdXJyZW50X2FwcHJvdmUiLCJmbG93X2lkIiwiciIsInN1Ym1pdF9pbnN0YW5jZSIsImFsZXJ0cyIsInRyaWdnZXJXZWJob29rIiwiZGlzdHJpYnV0ZWRJbnN0YW5jZXNSZW1pbmQiLCJmbG93X3Zlcl9lbmRfc3RlcCIsImZsb3dfdmVycyIsImgiLCJpbnN0YW5jZV9mbG93X3ZlciIsImluc3RhbmNlX3RyYWNlIiwibmV3QXBwcm92ZSIsIm5ld1RyYWNlIiwib2xkX2NjX3VzZXJzIiwib2xkX2luYm94X3VzZXJzIiwib2xkX291dGJveF91c2VycyIsInNldE9iaiIsInNwYWNlX3VzZXJfb3JnX2luZm8iLCJ0ZW1wVXNlcnMiLCJ0ZXJtaW5hdGVfcmVhc29uIiwiaXNJbnN0YW5jZVBlbmRpbmciLCJnZXRTcGFjZVVzZXJPcmdJbmZvIiwiZl92ZXIiLCJmX3N0ZXAiLCJwZXJtaXNzaW9uTWFuYWdlciIsImdldEZsb3dQZXJtaXNzaW9ucyIsIk1vbmdvIiwiT2JqZWN0SUQiLCJfc3RyIiwidXNlcl9uYW1lIiwiaGFuZGxlcl9vcmdhbml6YXRpb24iLCJzdGFydF9kYXRlIiwiZHVlX2RhdGUiLCJyZWFkX2RhdGUiLCJpc19lcnJvciIsImNvc3RfdGltZSIsInByZXZpb3VzX3RyYWNlX2lkcyIsIm91dGJveF91c2VycyIsIm5mdF9hcHByb3ZlIiwibW9kaWZpZWQiLCJtb2RpZmllZF9ieSIsImN1cnJlbnRfc3RlcF9uYW1lIiwiY3VycmVudF9zdGVwX2F1dG9fc3VibWl0IiwidXBkYXRlIiwiJHNldCIsInVzZXJfaWQiLCJzZW5kX21lc3NhZ2VfY3VycmVudF91c2VyIiwiX3VzZXJzIiwiYXBwcm92ZV91c2Vyc19oYW5kbGVycyIsImFzc2lnbmVlX2FwcHIiLCJjdXJyZW50X3NwYWNlX3VzZXIiLCJjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uIiwiaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQiLCJsYXN0X3RyYWNlIiwibGFzdF90cmFjZV9mcm9tX2NsaWVudCIsIm5ld19pbmJveF91c2VycyIsIm5vdF9pbl9pbmJveF91c2VycyIsInJlYXNzaWduX3JlYXNvbiIsImRpZmZlcmVuY2UiLCJvcmdhbml6YXRpb24iLCJhZ2VudCIsImhhbmRsZXJfaWQiLCJoYW5kbGVyX2luZm8iLCJuZXdfYXBwciIsIm5ld191c2VyIiwidXNlcl9vcmdhbml6YXRpb24iLCJnZXRBZ2VudCIsInNldFJlbWluZEluZm8iLCJhaCIsImFwcHJvdmVfdXNlcnMiLCJjdXJyZW50X3NldHAiLCJjdXJyZW50X3NldHBfdHlwZSIsIm5leHRfc3RlcCIsIm5leHRfc3RlcF9uYW1lIiwibmV4dF9zdGVwX3R5cGUiLCJyZWxvY2F0ZV9hcHByIiwicmVsb2NhdGVfY29tbWVudCIsInJlbG9jYXRlX2luYm94X3VzZXJzIiwicmVsb2NhdGVfbmV4dF9zdGVwIiwic2FtZVRyYWNlcyIsInNpZ25TaG93QXBwcm92ZUlkIiwidGEiLCJ0aSIsImdldFN0ZXAiLCJnZXRVcGRhdGVkVmFsdWVzIiwiZ2V0RHVlRGF0ZSIsInRpbWVvdXRfaG91cnMiLCJuZXh0X3N0ZXBfdXNlcl9pZCIsImlkeCIsIm5leHRfc3RlcF9zcGFjZV91c2VyIiwibmV4dF9zdGVwX3VzZXJfb3JnX2luZm8iLCJ1c2VyX2luZm8iLCJnZXRDdXJyZW50U3RlcEF1dG9TdWJtaXQiLCJ0aW1lb3V0X2F1dG9fc3VibWl0IiwibGluZXMiLCIkdW5zZXQiLCJpc0luc3RhbmNlRmluaXNoZWRBbmROb3RBcmNoaWV2ZWQiLCJpc0luc3RhbmNlU3VibWl0dGVyT3JBcHBsaWNhbnRPclNwYWNlQWRtaW4iLCJzdGFydHVwIiwiV2ViQXBwIiwiY29ubmVjdEhhbmRsZXJzIiwidXNlIiwiZWpzIiwiZWpzTGludCIsImVuZF9kYXRlIiwiZXJyb3Jfb2JqIiwiZmlsZU5hbWUiLCJmbG93X2lkcyIsImZvcm1fbmFtZSIsImluc190b194bHMiLCJsYW5nIiwibGFzdF9tb250aF9kYXRlIiwicmV0IiwidGltZXpvbmVvZmZzZXQiLCJ1aWQiLCJwYXJzZUludCIsImdldE15QWRtaW5Pck1vbml0b3JGbG93cyIsImdldE1vbnRoIiwic3VibWl0X2RhdGUiLCIkZ3RlIiwiJGx0ZSIsInJlcXVpcmUiLCJsaW50IiwiZm9ybWF0ZXIiLCJzZXRIZWFkZXIiLCJhdXRoX3Rva2VuIiwiZm9ybWlkcyIsImlzX2FkbWluIiwic3luY190b2tlbiIsImVuYWJsZWQiLCJnZXRfU3BhY2VDaGFuZ2VTZXQiLCJsYXN0X3RyYWNlX2lkIiwib3JnX2luZm8iLCJwcmV2aW91c19zdGVwIiwicHJldmlvdXNfdHJhY2UiLCJwcmV2aW91c190cmFjZV9hcHByb3ZlcyIsInByZXZpb3VzX3RyYWNlX2lkIiwicHJldmlvdXNfdHJhY2VfbmFtZSIsInByZXZpb3VzX3RyYWNlX3N0ZXBfaWQiLCJyZXRyaWV2ZV9hcHByb3ZlIiwicmV0cmlldmVfY29tbWVudCIsInJldHJpZXZlX3R5cGUiLCJ0aGVfdHJhY2UiLCJyZXRyaWV2ZV9hcHByIiwiYXBwciIsImN1cnJlbnRfdXNlcl9pZCIsImhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCIsImlzRm9yd2FyZEF0dGFjaG1lbnRzIiwic2VsZWN0ZWRVc2VycyIsImFjdGlvbl90eXBlIiwicmVsYXRlZCIsImZyb21fYXBwcm92ZV9pZCIsImNoZWNrIiwiTWF0Y2giLCJPbmVPZiIsIm9sZF9zcGFjZV9pZCIsImZvcndhcmRfdXNlcnMiLCJub19wZXJtaXNzaW9uX3VzZXJfaWRzIiwibm9fcGVybWlzc2lvbl91c2Vyc19uYW1lIiwibmV3X2luc19pZHMiLCJjdXJyZW50X3RyYWNlIiwiY3VycmVudF90cmFjZV9pZCIsImZvcndhcmRfYXBwcm92ZXMiLCJzZXRfb2JqIiwib2xkX3ZhbHVlcyIsIm5ld192YWx1ZXMiLCJvbGRfZm9ybSIsIm9sZF9mb3JtX3ZlcnNpb24iLCJvbGRfZmllbGRzIiwiY29tbW9uX2ZpZWxkcyIsInNlbGVjdF90b19pbnB1dF9maWVsZHMiLCJleGlzdHNfZmllbGQiLCJzZWxlY3RfaW5wdXRfZmllbGQiLCJvbGRfdiIsIm9sZF9tdWx0aVNlbGVjdGVkIiwibmV3X211bHRpU2VsZWN0ZWQiLCJvbGRfdGFibGVfcm93X3ZhbHVlcyIsIm5ld190YWJsZV9yb3dfdmFsdWVzIiwicmVjb3JkX25lZWQiLCJGT05EU0lEIiwiaW5zdGFuY2VfbmFtZSIsIm5hbWVfZm9ydW1sYSIsImlzY3JpcHQiLCJjYXRlZ29yeV9uYW1lIiwiZ2V0Q2F0ZWdvcnkiLCJpbnNfb2JqIiwiaGFuZGxlcl9zcGFjZV91c2VyIiwiaGFuZGxlcl9vcmdfaW5mbyIsIl9tYWtlTmV3SUQiLCJzdWJtaXR0ZXJfbmFtZSIsImFwcGxpY2FudF9vcmdhbml6YXRpb24iLCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWUiLCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lIiwiZm9yd2FyZF9mcm9tX2luc3RhbmNlIiwidHJhY2Vfb2JqIiwic3RlcF9pZCIsInN0ZXBfbmFtZSIsImFwcHJfb2JqIiwiYXV0b19yZW1pbmQiLCJmbG93X25hbWUiLCJjb2xsZWN0aW9uIiwiaW5zdGFuY2VIdG1sIiwiaW5zdGFuY2VGaWxlIiwiRlMiLCJGaWxlIiwiYXR0YWNoRGF0YSIsIkJ1ZmZlciIsImZyb20iLCJzaXplIiwib3duZXIiLCJvd25lcl9uYW1lIiwiZmlsZU9iaiIsIm1haW4iLCJuZXdGaWxlIiwiY3JlYXRlUmVhZFN0cmVhbSIsIm9yaWdpbmFsIiwiJGFkZFRvU2V0IiwiJGVhY2giLCJ1cGRhdGVfcmVhZCIsImZsb3dJZCIsImluc0lkIiwicmVkaXJlY3RUbyIsInJlZGlyZWN0VG9VcmwiLCJyZXFfYXN5bmMiLCJwYXJhbXMiLCJzdGF0dXMiLCJzZW5kIiwid3JpdGVIZWFkIiwiYXR0YWNoIiwibGltaXQiLCJub19saW1pdF9jb3VudCIsInJlZjUiLCJyZXN1bHRfaW5zdGFuY2VzIiwic3BhY2VfbmFtZXMiLCJzcGVjaWFsX3VzZXJfaWQiLCJ1c2VyaWQiLCJ3b3JrZmxvd19jYXRlZ29yaWVzIiwiQVBJQXV0aGVudGljYXRpb25DaGVjayIsImhlYWRlcnMiLCJyZWY2IiwicmVmNyIsImNvcGllcyIsIkNvb2tpZXMiLCJhdXRoVG9rZW4iLCJpc1NwYWNlQWRtaW4iLCJpc19wYWlkIiwiYXBwbGljYW50SW5mbyIsImFwcGxpY2FudF9pZCIsImFwcGxpY2FudF91c2VybmFtZSIsImluc19pZCIsInBlcm1fdXNlcnMiLCJuZXh0X3N0ZXBfaWQiLCJuZXh0X3VzZXJfaWRzIiwicmVxdWlyZV9idXRfZW1wdHlfZmllbGRzIiwiaXNJbnN0YW5jZURyYWZ0IiwiZ2V0Rm9ybSIsImNoZWNrVmFsdWVGaWVsZHNSZXF1aXJlIiwiZ2V0TmV4dFN0ZXBzIiwiZ2V0SGFuZGxlcnNNYW5hZ2VyIiwiZ2V0SGFuZGxlcnMiLCJzdGVwbmFtZSIsIiRlbGVtTWF0Y2giLCJpbmJveF91ZXJzIiwiYXBwcm92ZV9pZCIsInBhcnNlRmlsZXMiLCJtaW1lVHlwZSIsImlzX3ByaXZhdGUiLCJsb2NrZWRfYnkiLCJsb2NrZWRfYnlfbmFtZSIsImF0dGFjaF9pZCIsImZpbGUiLCJjb2x1bW5zIiwiZm9yd2FyZF9pbnMiLCJmb3J3YXJkX2luc192YWx1ZXMiLCJvcmlnaW5hbF9pbnMiLCJvcmlnaW5hbF9pbnNfZmllbGRzIiwib3JpZ2luYWxfaW5zX2Zvcm0iLCJvcmlnaW5hbF9pbnNfaWQiLCJvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMiLCJyZWY4IiwicmVmOSIsInJvd19kYXRhIiwic3ViVGFibGUiLCJ0YWJsZV9kYXRhIiwiY29sdW1uIiwib3JpZ2luYWxfaW5zX2ZpZWxkIiwib2giLCJhX3RhYmxlIiwiYV90YWJsZV92YWx1ZXMiLCJjb2x1bW5fbGlzdCIsImRfaW5zIiwiZF9pbnNfZmllbGRzIiwiZF9pbnNfZm9ybSIsImRfaW5zX3ZhbHVlcyIsImRfbWF0Y2hfY29sIiwiZF9tYXRjaF9jb2xfZmllbGQiLCJkX21hdGNoX2NvbF9maWVsZHMiLCJkX3N1YnRhYmxlX2ZpZWxkcyIsImRfdGFibGUiLCJkX3RhYmxlX3ZhbHVlcyIsIm9faW5zIiwib19pbnNfZmllbGRzIiwib19pbnNfZm9ybSIsIm9faW5zX2lkIiwib19tYXRjaF9jb2wiLCJvX21hdGNoX2NvbF9maWVsZCIsIm9fbWF0Y2hfY29sX2ZpZWxkcyIsIm9fc3VidGFibGVfZmllbGRzIiwib190YWJsZSIsInJlZjEwIiwicmVmMTEiLCJyZWYxMiIsInJlZjEzIiwicmVmMTQiLCJyZWYxNSIsInJlZjE2IiwicmVmMTciLCJyZWYxOCIsInJlZjE5IiwicmVmMjAiLCJyZWYyMSIsInJlZjIyIiwib1RhYmxlIiwiZFRhYmxlIiwib01hdGNoQ29sIiwiZE1hdGNoQ29sIiwicmVmaWxsQ29sIiwiYVRhYmxlIiwib19pbnNfZmllbGQiLCJkX2luc19maWVsZCIsImRoIiwiYV9yb3ciLCJyZXN1bHRzIiwibSIsImNvbCIsImNvbHMiLCJkX2NvbCIsImRfY29sX2ZpZWxkcyIsIm9fY29sIiwib19jb2xfZmllbGRzIiwiZF9yb3ciLCJoYXNfb2JqIiwib19yb3ciLCJuZXdfdGFibGVfdmFsdWVzIiwic29ydF9jb2wiLCJzdWJfdGFibGUiLCJzdWJfdGFibGVfdmFsdWVzIiwic3VtX2NvbCIsInN1bUNvbCIsInNvcnRDb2wiLCJzaW5nbGVDb2xzIiwiSnNvblNvcnQiLCJqc29uQXJyIiwiYXNjIiwiaiIsImpsIiwidGVtcCIsIk51bWJlciIsImlzRGV2ZWxvcG1lbnQiLCJhY3Rpb24iLCJ0b191c2VycyIsImdldEZvcm11bGFVc2VyT2JqZWN0cyIsIm9yZ0lkcyIsImdldEZvcm11bGFPcmdPYmplY3RzIiwibWV0aG9kcyIsInNldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmUiLCJzdGVwX2FwcHJvdmUiLCJzdGVwc0FwcHJvdmVzT3B0aW9ucyIsIl9rZXlzMSIsIl9rZXlzMiIsInN0ZXBzQXBwcm92ZXMiLCJzdGVwQXBwcm92ZXMiLCJzdGVwc0FwcHJvdmVPcHRpb25zIiwic2V0X2luc3RhbmNlX3NraXBfc3RlcHMiLCIkcHVsbCIsInNraXBfc3RlcHMiLCIkcHVzaCIsImdldF9pbnN0YW5jZV9kYXRhIiwiZm9ybUNhY2hlZCIsImZsb3dDYWNoZWQiLCJkcmFmdF9zYXZlX2luc3RhbmNlIiwidHJhY2VfaWQiLCJuZXh0X3N0ZXBzIiwiZm9ybV9pZCIsImtleV9zdHIiLCJpc0luc3RhbmNlU3VibWl0dGVyIiwib3JnX2lkIiwiZ2V0SW5zdGFuY2VOYW1lIiwiaW5ib3hfc2F2ZV9pbnN0YW5jZSIsImlzVHJhY2VOb3RGaW5pc2hlZCIsImlzQXBwcm92ZU5vdEZpbmlzaGVkIiwiaXNIYW5kbGVyT3JBZ2VudCIsInBlcm1pc3Npb25zX3ZhbHVlcyIsImdldEFwcHJvdmVWYWx1ZXMiLCJjaGFuZ2VfdmFsdWVzIiwiYXBwcm92ZU1hbmFnZXIiLCJnZXRDaGFuZ2VWYWx1ZXMiLCJleHRlbmQiLCJ2YWx1ZXNfaGlzdG9yeSIsImZvcm1fdiIsImNjX2RvIiwiY2NfdXNlcl9pZHMiLCJuZXdfYXBwcm92ZXMiLCJmaWxlZHMiLCJjY19yZWFkIiwiY2Nfc3VibWl0IiwidXBvYmoiLCJjY19yZW1vdmUiLCJyZW1vdmVfdXNlcl9pZCIsIm11bHRpIiwiY2Nfc2F2ZSIsImZvcndhcmRfcmVtb3ZlIiwiaGFzQWRtaW5QZXJtaXNzaW9uIiwiZm9yd2FyZF9pbnN0YW5jZV9pZCIsImRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCIsImNhbmNlbERpc3RyaWJ1dGUiLCJhcHByb3ZlX2lkcyIsImV4aXN0cyIsImNmc19pbnN0YW5jZXNfcmVtb3ZlIiwiZmlsZV9pZCIsImNmc19pbnN0YW5jZXNfc2V0X2N1cnJlbnQiLCJjZnNfaW5zdGFuY2VzX2xvY2siLCJjZnNfaW5zdGFuY2VzX3VubG9jayIsImRvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2siLCJjZnNSZWNvcmRJZHMiLCJpc19jbG91ZGFkbWluIiwic3RvcmUiLCJmcyIsIl9fbWV0ZW9yX2Jvb3RzdHJhcF9fIiwic2VydmVyRGlyIiwiYWJzb2x1dGVQYXRoIiwicmVzb2x2ZSIsInN5bmMiLCJ0aW1lIiwiZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMiLCJmaWxlUGF0aCIsIndyYXBBc3luYyIsIndyaXRlciIsImNyZWF0ZVdyaXRlU3RyZWFtIiwiaXNGdW5jdGlvbiIsInJlYWRlciIsInBpcGUiLCJ0aW1lRW5kIiwic2V0X2FwcHJvdmVfaGF2ZV9yZWFkIiwic2VsZiIsImNoYW5nZV9hcHByb3ZlX2luZm8iLCJ1cGRhdGVfYXBwcm92ZV9zaWduIiwic2lnbl90eXBlIiwibGFzdFNpZ25BcHByb3ZlIiwibGFzdFRyYWNlIiwic2Vzc2lvbl91c2VySWQiLCJ1cE9iaiIsImN1c3RvbV9zaWduX3Nob3ciLCJ1cGRhdGVfc2lnbl9zaG93Iiwib2JqcyIsIm15QXBwcm92ZV9pZCIsImluc3RhbmNlX3JldHVybiIsImFwcHJvdmVfdmFsdWVzIiwicHJlX3N0ZXAiLCJwcmVfdHJhY2UiLCJyZXN0X2NvdW50ZXJfdXNlcnMiLCJpbnN0YW5jZV9yZW1pbmQiLCJyZW1pbmRfdXNlcnMiLCJyZW1pbmRfY291bnQiLCJyZW1pbmRfZGVhZGxpbmUiLCJhY3Rpb25fdHlwZXMiLCJsYXN0X3JlbWluZF91c2VycyIsInByaW9yaXR5IiwiYXAiLCJjYWN1bGF0ZV9kYXRlIiwibWFudWFsX2RlYWRsaW5lIiwiY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkiLCJyZW1pbmRfZGF0ZSIsImNhY3VsYXRlV29ya2luZ1RpbWUiLCJiYXNlX2RhdGUiLCJwbHVzX2hhbGZkYXlfZGF0ZSIsInNlbmRSZW1pbmRTTVMiLCJuZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kIiwiYXBwcm92ZXJfcm9sZXMiLCJyb2xlc19uYW1lIiwicm9sZV9uYW1lIiwiX2V2YWwiLCJfTlVNQkVSIiwiX1lZWVkiLCJudW1iZXJSdWxlcyIsInJ1bGVzIiwic2NyaXB0IiwiaW5zdGFuY2VfbnVtYmVyX3J1bGVzIiwibnVtYmVyIiwiWVlZWSIsIk1NIiwibW0iLCJERCIsImdldERhdGUiLCJkZCIsImZpcnN0X251bWJlciIsIk5VTUJFUiIsIm5ld05vIiwiX2Vycm9yIiwiY2hlY2tfbWFpbl9hdHRhY2giLCJjaGVja01haW5BdHRhY2giLCJyZW1vdmVfcmVsYXRlZCIsInJlX2luc19pZCIsInVwZGF0ZV9pbnN0YW5jZV9yZWxhdGVkIiwidXBkYXRlRmxvd1Bvc2l0aW9uIiwicm9sZSIsInVwZGF0ZUZsb3dSb2xlIiwic3RhcnRfZmxvdyIsImtleVZhbHVlIiwic3RhcnRfZmxvd3MiLCJzdGVlZG9zX2tleXZhbHVlcyIsImdldF9pbnN0YW5jZV90cmFjZXMiLCJtaW5pQXBwcm92ZUZpZWxkcyIsImNhdGVnb3J5SWQiLCJmbG93SWRzIiwiX2JhdGNoX2luc3RhbmNlcyIsImdldEJhdGNoSW5zdGFuY2VzIiwibXlBcHByb3ZlcyIsIm15X2FwcHJvdmUiLCJnZXRNeUFwcHJvdmUiLCJjaGFuZ2VfZmxvd19zdGF0ZSIsIl91c2VySWQiLCJfZmxvd3MiLCJfZmxvd3Nfc3RhdGUiLCJmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUiLCJzcGVjaWZ5U3RlcCIsImFwcHJvdmVyX3N0ZXAiLCJfc3RlcCIsImZpZWxkc19tb2RpZmlhYmxlIiwiaGlkZV9pbnN0YW5jZSIsImlzX2hpZGRlbiIsImdldEluc3RhbmNlVmFsdWVzIiwiZ2V0SW5zdGFuY2VSZWFkT25seSIsIl9oYXNQZXJtaXNzaW9uIiwiX2xvY2FsZSIsIl9wYXJlbnRfaW5zdGFuY2VzIiwiZGF0YUJ1ZiIsImhpZGVfdHJhY2VzIiwic3BhY2VVc2VyQ291bnQiLCJnZXRBUElMb2dpblVzZXIiLCJhY2Nlc3NfdG9rZW4iLCJnZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4iLCJoYXNJbnN0YW5jZVBlcm1pc3Npb25zIiwiX3BhcmVudF9pZCIsIl9wYXJlbnRfaW5zIiwiY2hhcnNldCIsInJldF9zeW5jX3Rva2VuIiwic3BhY2VVc2VyIiwiY2FuTW9uaXRvciIsIiRndCIsIiRuaW4iLCJza2lwIiwiYWxsQ3NzIiwiZ2V0UmVmcmVzaGFibGVBc3NldHMiLCJjc3MiLCJST09UX1VSTCIsImVuZHNXaXRoIiwiZyIsImsiLCJnZXRFYWNoIiwibWl4aW4iLCJkZXN0IiwiaGFuZGVyVXNlck9iamVjdCIsImhyIiwic29ydF9ubyIsIm1vYmlsZSIsIndvcmtfcGhvbmUiLCJwb3NpdGlvbiIsInVzZXJSb2xlcyIsImhhbmRlck9yZ09iamVjdCIsIl9fdmFsdWVzIiwidGFibGVGaWVsZHMiLCJ0YWJsZVZhbHVlcyIsImZvcm11bGFUYWJsZVZhbHVlcyIsIl9fdGFibGVWYWx1ZXMiLCJ0YWJsZWZpZWxkIiwiZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMiLCJyb2xlX2lkcyIsImdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMiLCJyb2xlX2lkIiwiZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlIiwiZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUiLCJnZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzIiwib3JnX2lkcyIsImdldEhhbmRsZXJzQnlPcmdBbmRSb2xlcyIsInBhcmVudF9pZCIsIl9hcHByb3ZlIiwiX3NwYWNlX3VzZXIiLCJfdHJhY2UiLCJhcHBsaWNhbnRTdXBlcmlvcnMiLCJhcHByb3Zlcl9vcmdfZmllbGQiLCJhcHByb3Zlcl9vcmdfaWRzIiwiYXBwcm92ZXJfdXNlcl9maWVsZCIsImFwcHJvdmVyX3VzZXJfaWRzIiwiY3VycmVudF9mbG93IiwiY3VycmVudF9mbG93X3ZlcnNpb24iLCJjdXJyZW50X2Zvcm0iLCJjdXJyZW50X3N0ZXBzIiwiZmllbGRfY29kZSIsImZpbmlzaGVkX3RyYWNlcyIsImZsb3dfcmV2IiwiZm9ybV9yZXYiLCJoYW5kbGVycyIsIm1heF9zdGFydERhdGVfdHJhY2UiLCJuZXdfYXBwcm92ZXJfdXNlcl9pZHMiLCJuZXdfb3JnX3VzZXJfaWRzIiwibmV3ZXN0X3ZhbHVlcyIsIm5leHRfc3RlcF91c2VycyIsIm9yZ19pZHNfbmFtZXMiLCJvcmdfdXNlcl9pZHMiLCJzcGFjZV91c2VyX2NvdW50Iiwic3VibWl0dGVyX3VzZXJfY291bnQiLCJ1bmZpbmlzaGVkX3RyYWNlIiwidXNlcl9pZHNfbmFtZXMiLCJ2YWxpZF9hcHByb3Zlcl9vcmdfaWRzIiwiaGlzdG9yeSIsImFwcHJvdmVyX3JvbGUiLCJyb2xlX2NvdW50IiwiYXBwcm92ZXJfaHJfcm9sZXMiLCJjdXJyZW50X2Zsb3dfaGlzdG9yeSIsImZvcm1faGlzdG9yeSIsImZvcm1fZmllbGQiLCJjaGVja19vcmdfY291bnQiLCJjaGVja19vcmdzIiwib3JnX2NoaWxkcmVuIiwib3JnX3VzZXJzIiwiY2hlY2tfb3JnX3VzZXIiLCJvcmdfdXNlciIsImNoZWNrX3VzZXJfY291bnQiLCJhcHByb3ZlX3VzZXIiLCJjaGVja19hcHByb3ZlX3VzZXJfY291bnQiLCJhcHByb3Zlcl9vcmdzIiwiYXBwcm92ZXJfb3JnX2lkIiwidmFsaWRfYXBwcm92ZXJfb3JnX2lkIiwiY2hpbGRfb3JncyIsInZhbGlkX2FwcHJvdmVyX29yZyIsImNoaWxkX29yZyIsIm9yZ191c2VyX2lkIiwic3BhY2VfdXNlcl9pbmZvX2NvdW50IiwiYXBwcm92ZXJfdXNlcnMiLCJhcHByb3Zlcl91c2VyX2lkIiwiX3RyIiwiX2FwcCIsIm15X3Blcm1pc3Npb25zIiwib3Jnc19jYW5fYWRkIiwib3Jnc19jYW5fYWRtaW4iLCJvcmdzX2Nhbl9tb25pdG9yIiwidXNlcnNfY2FuX2FkZCIsInVzZXJzX2Nhbl9hZG1pbiIsInVzZXJzX2Nhbl9tb25pdG9yIiwibGFzdF92YWx1ZXMiLCJhcHByb3ZlX3ZhbHVlc19rZXlzIiwiY2hhbmdlVmFsdWVzIiwibGFzdF92YWx1ZXNfa2V5cyIsImlzRXF1YWwiLCJmbG93TWFuYWdlciIsImdldENhdGVnb3JpZXNGbG93cyIsImNhdGVnb3JpZUlkIiwiY2F0ZWdvcmllc0Zvcm1zIiwiZm9ybU1hbmFnZXIiLCJnZXRDYXRlZ29yaWVzRm9ybXMiLCJnZXRVbkNhdGVnb3JpZXNGbG93cyIsInVuQ2F0ZWdvcmllc0Zvcm1zIiwiZ2V0VW5DYXRlZ29yaWVzRm9ybXMiLCJfZmllbGRzIiwic3RlcE1hbmFnZXIiLCJhbGxvd0JhdGNoIiwiaXNFeGlzdFN0ZXAiLCJsb2dnZXIiLCJMb2dnZXIiLCJoYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwIiwiZmllbGRfbWFwIiwiY3VycmVudEFwcHJvdmVzIiwiY3VycmVudFRyYWNlcyIsImdldEN1cnJlbnRUcmFjZSIsImluYm94X3VzZXIiLCJGSUVMRFMiLCJjYXRlZ29yeUZsb3dzIiwiaW5ib3hfaW5zdGFuY2VzIiwidW5DYXRlZ29yeUZsb3dzIiwiY3VycmVudFN0ZXBJZCIsImFwcHJvdmVfc3RhcnRfZGF0ZSIsInB1Ymxpc2giLCJyZWFkeSIsImFwcCIsInB1Ymxpc2hDb21wb3NpdGUiLCJ0YWJsZU5hbWUiLCJpZHMiLCJPcHRpb25hbCIsInVuYmxvY2siLCJjaGlsZHJlbiIsImNyZWF0ZVRlbXBsYXRlRm9ybUFuZEZsb3ciLCJkaXN0cmlidXRlX3RvX3NlbGYiLCJ2ZXJzaW9uSWQiLCJoYW5kbGUiLCJsYXRlc3QiLCJvYnNlcnZlQ2hhbmdlcyIsImNoYW5nZWQiLCJhZGRlZCIsIm9uU3RvcCIsInN0b3AiLCJkaXN0cmlidXRlX2VuZF9ub3RpZmljYXRpb24iLCJhbGxvd19zZWxlY3Rfc3RlcCIsImdldE1pbmlJbnN0YW5jZSIsImdldE15YXBwcm92ZU1vZGlmaWVkIiwiaW5zdGFuY2VfZmllbGRzXzAiLCJuZWVkQ2hhbmdlIiwidHJpZ2dlckNoYW5nZUZpZWxkcyIsInRyaWdnZXJDaGFuZ2VGaWVsZHNWYWx1ZXMiLCJteUFwcHJvdmVNb2RpZmllZHMiLCJfaW5zdGFuY2VJZCIsImNoYW5nZUZpZWxkcyIsIl9jaGFuZ2UiLCJfcmV2IiwiX215X2FwcHJvdmVfbW9kaWZpZWRzIiwiZ2V0SW5zdGFuY2VUcmFjZXMiLCJfaW5zSWQiLCJhc3luY0xhc3RGaW5pc2hlZEFwcHJvdmUiLCJsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlIiwiaW5zdGFuY2VpZCIsImRhdGFNYXAiLCJvcGVyYXRpb24iLCJyYXdDb2xsZWN0aW9uIiwiYWdncmVnYXRlIiwidG9BcnJheSIsImRvYyIsImdldE15TGFzdEZpbmlzaGVkQXBwcm92ZSIsImdldFN0ZXBDdXJyZW50TmFtZSIsIm5vdEZpbmlzaGVkVHJhY2VzIiwic3RlcEN1cnJlbnROYW1lIiwiJHNsaWNlIiwibXlMYXN0RmluaXNoZWRBcHByb3ZlIiwiYWdlbnRfdXNlcl9uYW1lIiwibXlfZmluaXNoX2RhdGUiLCJpc19jYyIsImNjX2NvdW50IiwiaW5zdGFuY2VfaWRzIiwicmVsYXRlZF9pbnN0YW5jZV9pZHMiLCJfYXN5bmNfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSIsIl9nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlIiwiX2l0ZW1zIiwiJG1hdGNoIiwiJGdyb3VwIiwiJHN1bSIsIl9jaGFuZ2VEYXRhIiwiX2Zsb3dzRGF0YSIsIl9pbml0IiwiZGF0YUl0ZW0iLCJmbG93X2luc3RhbmNlIiwib2JzZXJ2ZSIsImdldENvbGxlY3Rpb24iLCJ3b3JrZmxvd1RlbXBsYXRlIiwiYWJzb2x1dGVfcGF0aF9jbiIsImFic29sdXRlX3BhdGhfdXMiLCJmaWxlc0xpc3RfY24iLCJmaWxlc0xpc3RfdXMiLCJtaW1lIiwicGF0aF9jbiIsInBhdGhfdXMiLCJyZWFkRmlsZUxpc3QiLCJwYXRoRGlyIiwiZmlsZXNMaXN0IiwicmVhZGRpclN5bmMiLCJzdGF0Iiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsIndvcmtmbG93VGVtcGxhdGVzIiwiZXhpc3RzU3luYyIsInJlYWRGaWxlU3luYyIsImdvX25leHQiLCJydWxlIiwic2NoZWR1bGUiLCJjcm9uIiwiYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uIiwic2NoZWR1bGVKb2IiLCJiaW5kRW52aXJvbm1lbnQiLCJwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXMiLCJlbmRfdGltZSIsInRpbWVvdXRBdXRvU3VibWl0IiwiVGFidWxhclRhYmxlcyIsInJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXIiLCJUYWJ1bGFyIiwiVGFibGUiLCJvcmRlcmFibGUiLCJyZW5kZXIiLCJpbnB1dCIsInN0ZXBfY3VycmVudF9uYW1lIiwiZG9tIiwibGVuZ3RoQ2hhbmdlIiwiZXh0cmFGaWVsZHMiLCJwYWdlTGVuZ3RoIiwiaW5mbyIsInNlYXJjaGluZyIsInJlc3BvbnNpdmUiLCJkZXRhaWxzIiwiYXV0b1dpZHRoIiwiY2hhbmdlU2VsZWN0b3IiLCJjdXJTcGFjZVVzZXIiLCIkYW5kIiwiZmwiLCJHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyIsIl9nZXRfaW5ib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyIsIl9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMiLCJfaGFuZGxlTGlzdEZpZWxkcyIsImluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIiLCJuZXdJbnN0YW5jZXNMaXN0VGFidWxhciIsInVwZGF0ZVRhYnVsYXJUaXRsZSIsInN1YnMiLCJTdWJzTWFuYWdlciIsImluc19maWVsZHMiLCJwdWIiLCJvblVubG9hZCIsImluc3RhbmNlX2xpc3QiLCJfdGFibGVDb2x1bW5zIiwiZHJhd0NhbGxiYWNrIiwiZWxsaXBzaXNMaW5rIiwiZW1wdHlUZCIsImNvbFNwYW4iLCJpc1BhZCIsInBlcmZlY3RTY3JvbGxiYXIiLCJvSW5zdGFuY2UiLCJhdHRyIiwiY2xpY2siLCJnb1BhZ2UiLCJoZWlnaHQiLCJwYWdlcyIsImNlaWwiLCJmblJlY29yZHNEaXNwbGF5IiwiX2lEaXNwbGF5TGVuZ3RoIiwiRGF0YVRhYmxlIiwicGFnZSIsImRyYXciLCJibHVyIiwiY3VycmVudFBhZ2UiLCJrZXlkb3duIiwia2V5Q29kZSIsImNyZWF0ZWRSb3ciLCJyb3ciLCJkYXRhSW5kZXgiLCJGbG93Um91dGVyIiwic2V0QXR0cmlidXRlIiwiYWdlbnRfdmlldyIsImNjX3ZpZXciLCJpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzIiwiaXNGYXZvcml0ZVNlbGVjdGVkIiwibW9kaWZpZWRGcm9tTm93IiwibW9kaWZpZWRTdHJpbmciLCJwcmlvcml0eUljb24iLCJwcmlvcml0eUljb25DbGFzcyIsInByaW9yaXR5VmFsdWUiLCJzdGVwX2N1cnJlbnRfbmFtZV92aWV3IiwidW5yZWFkIiwibW9tZW50UmVhY3RpdmVGcm9tTm93IiwiRmF2b3JpdGVzIiwiaXNSZWNvcmRTZWxlY3RlZCIsInZpc2libGUiLCJjY190YWciLCJsZW5ndGhNZW51IiwicGFnaW5nVHlwZSIsImlzX2xpc3RfZGlzcGxheSIsImZpbHRlcmVkUmVjb3JkSWRzIiwib2xkX2ZpbHRlcmVkUmVjb3JkSWRzIiwiZmluZE9wdGlvbnMiLCJhZ19zb3J0IiwiYWdncmVnYXRlX29wZXJhdGlvbiIsImFzeW5jX2FnZ3JlZ2F0ZSIsInMxXzAiLCJzMV8xIiwiJHByb2plY3QiLCIkdW53aW5kIiwiJGZpcnN0IiwiJHNvcnQiLCIkc2tpcCIsIiRsaW1pdCIsImNiIiwiJGxhc3QiLCJvdXRib3hfaW5zdGFuY2VzIiwiZmxvd0luc3RhbmNlcyIsIlJlYWN0aXZlVmFyIiwiYXV0b3J1biIsIl9jaGFuZ2VPcmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGdCQUFKO0FBQXFCQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxvQ0FBWixFQUFpRDtBQUFDRixrQkFBZ0IsQ0FBQ0csQ0FBRCxFQUFHO0FBQUNILG9CQUFnQixHQUFDRyxDQUFqQjtBQUFtQjs7QUFBeEMsQ0FBakQsRUFBMkYsQ0FBM0Y7QUFDckJILGdCQUFnQixDQUFDO0FBQ2hCLG1CQUFpQixRQUREO0FBRWhCSSxTQUFPLEVBQUUsUUFGTztBQUdoQixZQUFVLFNBSE07QUFJaEJDLFFBQU0sRUFBRTtBQUpRLENBQUQsRUFLYixrQkFMYSxDQUFoQixDOzs7Ozs7Ozs7OztBQ0RBOzs7Ozs7Ozs7Ozs7O0FBYUMsV0FBVUMsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDekIsZUFEeUIsQ0FFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NBLE1BQU0sQ0FBQ0MsR0FBM0MsRUFBZ0Q7QUFDL0M7QUFDQUQsVUFBTSxDQUFDLENBQUMsWUFBRCxFQUFlLFFBQWYsRUFBeUIsc0JBQXpCLENBQUQsRUFBbURELE9BQW5ELENBQU47QUFDQSxHQUhELE1BR087QUFDTjtBQUNBRCxRQUFJLENBQUNJLEdBQUwsR0FBV0gsT0FBTyxDQUFDRCxJQUFJLENBQUNLLFFBQU4sRUFBZ0JMLElBQUksQ0FBQ00sSUFBckIsRUFBMkJOLElBQUksQ0FBQ08sa0JBQWhDLEVBQW9EUCxJQUFwRCxDQUFsQjtBQUNBO0FBQ0QsQ0FkQSxFQWNDLElBZEQsRUFjTyxVQUFVSyxRQUFWLEVBQW9CQyxJQUFwQixFQUEwQkUsR0FBMUIsRUFBK0JSLElBQS9CLEVBQXFDO0FBQzVDO0FBQ0E7QUFDQTs7QUFDQTtBQUVBOztBQUNBLE1BQUlTLElBQUksR0FBR1QsSUFBSSxJQUFJQSxJQUFJLENBQUNJLEdBQXhCOztBQUVBLFdBQVNBLEdBQVQsQ0FBYU0sR0FBYixFQUFrQkMsSUFBbEIsRUFBd0I7QUFDdkIsUUFBSUMsWUFBWSxHQUFHQyxTQUFTLENBQUNDLE1BQVYsSUFBb0IsQ0FBdkM7O0FBQ0EsUUFBSUMsYUFBYSxHQUFHRixTQUFTLENBQUNDLE1BQVYsSUFBb0IsQ0FBeEMsQ0FGdUIsQ0FJdkI7OztBQUNBLFFBQUksRUFBRSxnQkFBZ0JWLEdBQWxCLENBQUosRUFBNEI7QUFDM0IsVUFBSVEsWUFBSixFQUFrQjtBQUNqQixZQUFJRyxhQUFKLEVBQW1CO0FBQ2xCLGlCQUFPLElBQUlYLEdBQUosQ0FBUU0sR0FBUixFQUFhQyxJQUFiLENBQVA7QUFDQTs7QUFFRCxlQUFPLElBQUlQLEdBQUosQ0FBUU0sR0FBUixDQUFQO0FBQ0E7O0FBRUQsYUFBTyxJQUFJTixHQUFKLEVBQVA7QUFDQTs7QUFFRCxRQUFJTSxHQUFHLEtBQUtNLFNBQVosRUFBdUI7QUFDdEIsVUFBSUosWUFBSixFQUFrQjtBQUNqQixjQUFNLElBQUlLLFNBQUosQ0FBYywyQ0FBZCxDQUFOO0FBQ0E7O0FBRUQsVUFBSSxPQUFPQyxRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ3BDUixXQUFHLEdBQUdRLFFBQVEsQ0FBQ0MsSUFBVCxHQUFnQixFQUF0QjtBQUNBLE9BRkQsTUFFTztBQUNOVCxXQUFHLEdBQUcsRUFBTjtBQUNBO0FBQ0Q7O0FBRUQsU0FBS1MsSUFBTCxDQUFVVCxHQUFWLEVBN0J1QixDQStCdkI7O0FBQ0EsUUFBSUMsSUFBSSxLQUFLSyxTQUFiLEVBQXdCO0FBQ3ZCLGFBQU8sS0FBS0ksVUFBTCxDQUFnQlQsSUFBaEIsQ0FBUDtBQUNBOztBQUVELFdBQU8sSUFBUDtBQUNBOztBQUVEUCxLQUFHLENBQUNpQixPQUFKLEdBQWMsUUFBZDtBQUVBLE1BQUlDLENBQUMsR0FBR2xCLEdBQUcsQ0FBQ21CLFNBQVo7QUFDQSxNQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0YsU0FBUCxDQUFpQkcsY0FBOUI7O0FBRUEsV0FBU0MsV0FBVCxDQUFxQkMsTUFBckIsRUFBNkI7QUFDNUI7QUFDQSxXQUFPQSxNQUFNLENBQUNDLE9BQVAsQ0FBZSw0QkFBZixFQUE2QyxNQUE3QyxDQUFQO0FBQ0E7O0FBRUQsV0FBU0MsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFDdkI7QUFDQSxRQUFJQSxLQUFLLEtBQUtmLFNBQWQsRUFBeUI7QUFDeEIsYUFBTyxXQUFQO0FBQ0E7O0FBRUQsV0FBT2dCLE1BQU0sQ0FBQ1AsTUFBTSxDQUFDRixTQUFQLENBQWlCVSxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JILEtBQS9CLENBQUQsQ0FBTixDQUE4Q0ksS0FBOUMsQ0FBb0QsQ0FBcEQsRUFBdUQsQ0FBQyxDQUF4RCxDQUFQO0FBQ0E7O0FBRUQsV0FBU0MsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0I7QUFDckIsV0FBT1AsT0FBTyxDQUFDTyxHQUFELENBQVAsS0FBaUIsT0FBeEI7QUFDQTs7QUFFRCxXQUFTQyxpQkFBVCxDQUEyQkMsSUFBM0IsRUFBaUNSLEtBQWpDLEVBQXdDO0FBQ3ZDLFFBQUlTLE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBSUMsQ0FBSixFQUFPM0IsTUFBUDs7QUFFQSxRQUFJZ0IsT0FBTyxDQUFDQyxLQUFELENBQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDaENTLFlBQU0sR0FBRyxJQUFUO0FBQ0EsS0FGRCxNQUVPLElBQUlKLE9BQU8sQ0FBQ0wsS0FBRCxDQUFYLEVBQW9CO0FBQzFCLFdBQUtVLENBQUMsR0FBRyxDQUFKLEVBQU8zQixNQUFNLEdBQUdpQixLQUFLLENBQUNqQixNQUEzQixFQUFtQzJCLENBQUMsR0FBRzNCLE1BQXZDLEVBQStDMkIsQ0FBQyxFQUFoRCxFQUFvRDtBQUNuREQsY0FBTSxDQUFDVCxLQUFLLENBQUNVLENBQUQsQ0FBTixDQUFOLEdBQW1CLElBQW5CO0FBQ0E7QUFDRCxLQUpNLE1BSUE7QUFDTkQsWUFBTSxDQUFDVCxLQUFELENBQU4sR0FBZ0IsSUFBaEI7QUFDQTs7QUFFRCxTQUFLVSxDQUFDLEdBQUcsQ0FBSixFQUFPM0IsTUFBTSxHQUFHeUIsSUFBSSxDQUFDekIsTUFBMUIsRUFBa0MyQixDQUFDLEdBQUczQixNQUF0QyxFQUE4QzJCLENBQUMsRUFBL0MsRUFBbUQ7QUFDbEQ7QUFDQSxVQUFJQyxNQUFNLEdBQUdGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRCxJQUFJLENBQUNFLENBQUQsQ0FBTCxDQUFOLEtBQW9CekIsU0FBOUIsSUFDVCxDQUFDd0IsTUFBRCxJQUFXVCxLQUFLLENBQUNZLElBQU4sQ0FBV0osSUFBSSxDQUFDRSxDQUFELENBQWYsQ0FEZjtBQUVBOzs7QUFDQSxVQUFJQyxNQUFKLEVBQVk7QUFDWEgsWUFBSSxDQUFDSyxNQUFMLENBQVlILENBQVosRUFBZSxDQUFmO0FBQ0EzQixjQUFNO0FBQ04yQixTQUFDO0FBQ0Q7QUFDRDs7QUFFRCxXQUFPRixJQUFQO0FBQ0E7O0FBRUQsV0FBU00sYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJmLEtBQTdCLEVBQW9DO0FBQ25DLFFBQUlVLENBQUosRUFBTzNCLE1BQVAsQ0FEbUMsQ0FHbkM7O0FBQ0EsUUFBSXNCLE9BQU8sQ0FBQ0wsS0FBRCxDQUFYLEVBQW9CO0FBQ25CO0FBQ0EsV0FBS1UsQ0FBQyxHQUFHLENBQUosRUFBTzNCLE1BQU0sR0FBR2lCLEtBQUssQ0FBQ2pCLE1BQTNCLEVBQW1DMkIsQ0FBQyxHQUFHM0IsTUFBdkMsRUFBK0MyQixDQUFDLEVBQWhELEVBQW9EO0FBQ25ELFlBQUksQ0FBQ0ksYUFBYSxDQUFDQyxJQUFELEVBQU9mLEtBQUssQ0FBQ1UsQ0FBRCxDQUFaLENBQWxCLEVBQW9DO0FBQ25DLGlCQUFPLEtBQVA7QUFDQTtBQUNEOztBQUVELGFBQU8sSUFBUDtBQUNBOztBQUVELFFBQUlNLEtBQUssR0FBR2pCLE9BQU8sQ0FBQ0MsS0FBRCxDQUFuQjs7QUFDQSxTQUFLVSxDQUFDLEdBQUcsQ0FBSixFQUFPM0IsTUFBTSxHQUFHZ0MsSUFBSSxDQUFDaEMsTUFBMUIsRUFBa0MyQixDQUFDLEdBQUczQixNQUF0QyxFQUE4QzJCLENBQUMsRUFBL0MsRUFBbUQ7QUFDbEQsVUFBSU0sS0FBSyxLQUFLLFFBQWQsRUFBd0I7QUFDdkIsWUFBSSxPQUFPRCxJQUFJLENBQUNMLENBQUQsQ0FBWCxLQUFtQixRQUFuQixJQUErQkssSUFBSSxDQUFDTCxDQUFELENBQUosQ0FBUU8sS0FBUixDQUFjakIsS0FBZCxDQUFuQyxFQUF5RDtBQUN4RCxpQkFBTyxJQUFQO0FBQ0E7QUFDRCxPQUpELE1BSU8sSUFBSWUsSUFBSSxDQUFDTCxDQUFELENBQUosS0FBWVYsS0FBaEIsRUFBdUI7QUFDN0IsZUFBTyxJQUFQO0FBQ0E7QUFDRDs7QUFFRCxXQUFPLEtBQVA7QUFDQTs7QUFFRCxXQUFTa0IsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEJDLEdBQTFCLEVBQStCO0FBQzlCLFFBQUksQ0FBQ2YsT0FBTyxDQUFDYyxHQUFELENBQVIsSUFBaUIsQ0FBQ2QsT0FBTyxDQUFDZSxHQUFELENBQTdCLEVBQW9DO0FBQ25DLGFBQU8sS0FBUDtBQUNBLEtBSDZCLENBSzlCOzs7QUFDQSxRQUFJRCxHQUFHLENBQUNwQyxNQUFKLEtBQWVxQyxHQUFHLENBQUNyQyxNQUF2QixFQUErQjtBQUM5QixhQUFPLEtBQVA7QUFDQTs7QUFFRG9DLE9BQUcsQ0FBQ0UsSUFBSjtBQUNBRCxPQUFHLENBQUNDLElBQUo7O0FBRUEsU0FBSyxJQUFJWCxDQUFDLEdBQUcsQ0FBUixFQUFXWSxDQUFDLEdBQUdILEdBQUcsQ0FBQ3BDLE1BQXhCLEVBQWdDMkIsQ0FBQyxHQUFHWSxDQUFwQyxFQUF1Q1osQ0FBQyxFQUF4QyxFQUE0QztBQUMzQyxVQUFJUyxHQUFHLENBQUNULENBQUQsQ0FBSCxLQUFXVSxHQUFHLENBQUNWLENBQUQsQ0FBbEIsRUFBdUI7QUFDdEIsZUFBTyxLQUFQO0FBQ0E7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDQTs7QUFFRCxXQUFTYSxXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUMxQixRQUFJQyxlQUFlLEdBQUcsWUFBdEI7QUFDQSxXQUFPRCxJQUFJLENBQUMxQixPQUFMLENBQWEyQixlQUFiLEVBQThCLEVBQTlCLENBQVA7QUFDQTs7QUFFRHBELEtBQUcsQ0FBQ3FELE1BQUosR0FBYSxZQUFXO0FBQ3ZCLFdBQU87QUFDTkMsY0FBUSxFQUFFLElBREo7QUFFTkMsY0FBUSxFQUFFLElBRko7QUFHTkMsY0FBUSxFQUFFLElBSEo7QUFJTkMsY0FBUSxFQUFFLElBSko7QUFLTkMsU0FBRyxFQUFFLElBTEM7QUFNTkMsVUFBSSxFQUFFLElBTkE7QUFPTkMsVUFBSSxFQUFFLElBUEE7QUFRTkMsV0FBSyxFQUFFLElBUkQ7QUFTTkMsY0FBUSxFQUFFLElBVEo7QUFVTjtBQUNBQyw4QkFBd0IsRUFBRS9ELEdBQUcsQ0FBQytELHdCQVh4QjtBQVlOQyxzQkFBZ0IsRUFBRWhFLEdBQUcsQ0FBQ2dFO0FBWmhCLEtBQVA7QUFjQSxHQWZELENBNUo0QyxDQTRLNUM7OztBQUNBaEUsS0FBRyxDQUFDK0Qsd0JBQUosR0FBK0IsS0FBL0IsQ0E3SzRDLENBOEs1Qzs7QUFDQS9ELEtBQUcsQ0FBQ2dFLGdCQUFKLEdBQXVCLElBQXZCLENBL0s0QyxDQWdMNUM7O0FBQ0FoRSxLQUFHLENBQUNpRSxtQkFBSixHQUEwQixzQkFBMUI7QUFDQWpFLEtBQUcsQ0FBQ2tFLGNBQUosR0FBcUIsZUFBckI7QUFDQWxFLEtBQUcsQ0FBQ21FLG1CQUFKLEdBQTBCLFNBQTFCLENBbkw0QyxDQW9MNUM7O0FBQ0FuRSxLQUFHLENBQUNvRSxjQUFKLEdBQXFCLHNDQUFyQixDQXJMNEMsQ0FzTDVDO0FBQ0E7QUFDQTs7QUFDQXBFLEtBQUcsQ0FBQ3FFLGNBQUosR0FBcUIseWpDQUFyQixDQXpMNEMsQ0EwTDVDO0FBQ0E7QUFDQTtBQUNBOztBQUNBckUsS0FBRyxDQUFDc0UsbUJBQUosR0FBMEIsOE1BQTFCO0FBQ0F0RSxLQUFHLENBQUN1RSxPQUFKLEdBQWM7QUFDYjtBQUNBQyxTQUFLLEVBQUUsd0NBRk07QUFHYjtBQUNBQyxPQUFHLEVBQUUsWUFKUTtBQUtiO0FBQ0FDLFFBQUksRUFBRTtBQU5PLEdBQWQsQ0EvTDRDLENBdU01QztBQUNBOztBQUNBMUUsS0FBRyxDQUFDMkUsWUFBSixHQUFtQjtBQUNsQkMsUUFBSSxFQUFFLElBRFk7QUFFbEJDLFNBQUssRUFBRSxLQUZXO0FBR2xCQyxPQUFHLEVBQUUsSUFIYTtBQUlsQkMsVUFBTSxFQUFFLElBSlU7QUFLbEJDLE1BQUUsRUFBRSxJQUxjO0FBTWxCQyxPQUFHLEVBQUU7QUFOYSxHQUFuQixDQXpNNEMsQ0FpTjVDO0FBQ0E7QUFDQTs7QUFDQWpGLEtBQUcsQ0FBQ2tGLDJCQUFKLEdBQWtDLGlCQUFsQyxDQXBONEMsQ0FxTjVDOztBQUNBbEYsS0FBRyxDQUFDbUYsYUFBSixHQUFvQjtBQUNuQixTQUFLLE1BRGM7QUFFbkIsa0JBQWMsTUFGSztBQUduQixZQUFRLE1BSFc7QUFJbkIsWUFBUSxNQUpXO0FBS25CLGNBQVUsS0FMUztBQU1uQixZQUFRLFFBTlc7QUFPbkIsV0FBTyxLQVBZO0FBUW5CLFlBQVEsTUFSVztBQVNuQixjQUFVLEtBVFM7QUFVbkIsYUFBUyxLQVZVO0FBV25CLGNBQVUsS0FYUztBQVluQixhQUFTLEtBWlU7QUFhbkIsYUFBUyxLQWJVO0FBYUg7QUFDaEIsYUFBUyxLQWRVO0FBZW5CLGFBQVM7QUFmVSxHQUFwQjs7QUFpQkFuRixLQUFHLENBQUNvRixlQUFKLEdBQXNCLFVBQVNDLElBQVQsRUFBZTtBQUNwQyxRQUFJLENBQUNBLElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNDLFFBQW5CLEVBQTZCO0FBQzVCLGFBQU8xRSxTQUFQO0FBQ0E7O0FBRUQsUUFBSTBFLFFBQVEsR0FBR0QsSUFBSSxDQUFDQyxRQUFMLENBQWNDLFdBQWQsRUFBZixDQUxvQyxDQU1wQzs7QUFDQSxRQUFJRCxRQUFRLEtBQUssT0FBYixJQUF3QkQsSUFBSSxDQUFDRyxJQUFMLEtBQWMsT0FBMUMsRUFBbUQ7QUFDbEQsYUFBTzVFLFNBQVA7QUFDQTs7QUFFRCxXQUFPWixHQUFHLENBQUNtRixhQUFKLENBQWtCRyxRQUFsQixDQUFQO0FBQ0EsR0FaRDs7QUFjQSxXQUFTRyxzQkFBVCxDQUFnQzlELEtBQWhDLEVBQXVDO0FBQ3RDO0FBQ0EsV0FBTytELE1BQU0sQ0FBQy9ELEtBQUQsQ0FBYjtBQUNBLEdBeFAyQyxDQTBQNUM7OztBQUNBLFdBQVNnRSx3QkFBVCxDQUFrQ25FLE1BQWxDLEVBQTBDO0FBQ3pDO0FBQ0EsV0FBT29FLGtCQUFrQixDQUFDcEUsTUFBRCxDQUFsQixDQUNMQyxPQURLLENBQ0csVUFESCxFQUNlZ0Usc0JBRGYsRUFFTGhFLE9BRkssQ0FFRyxLQUZILEVBRVUsS0FGVixDQUFQO0FBR0E7O0FBQ0R6QixLQUFHLENBQUM2RixNQUFKLEdBQWFGLHdCQUFiO0FBQ0EzRixLQUFHLENBQUM4RixNQUFKLEdBQWFDLGtCQUFiOztBQUNBL0YsS0FBRyxDQUFDZ0csT0FBSixHQUFjLFlBQVc7QUFDeEJoRyxPQUFHLENBQUM2RixNQUFKLEdBQWFILE1BQWI7QUFDQTFGLE9BQUcsQ0FBQzhGLE1BQUosR0FBYUcsUUFBYjtBQUNBLEdBSEQ7O0FBSUFqRyxLQUFHLENBQUNrRyxPQUFKLEdBQWMsWUFBVztBQUN4QmxHLE9BQUcsQ0FBQzZGLE1BQUosR0FBYUYsd0JBQWI7QUFDQTNGLE9BQUcsQ0FBQzhGLE1BQUosR0FBYUMsa0JBQWI7QUFDQSxHQUhEOztBQUlBL0YsS0FBRyxDQUFDbUcsVUFBSixHQUFpQjtBQUNoQkMsWUFBUSxFQUFFO0FBQ1RQLFlBQU0sRUFBRTtBQUNQO0FBQ0E7QUFDQVEsa0JBQVUsRUFBRSw4QkFITDtBQUlQQyxXQUFHLEVBQUU7QUFDSjtBQUNBLGlCQUFPLEdBRkg7QUFHSixpQkFBTyxHQUhIO0FBSUosaUJBQU8sR0FKSDtBQUtKLGlCQUFPLEdBTEg7QUFNSixpQkFBTyxHQU5IO0FBT0osaUJBQU8sR0FQSDtBQVFKLGlCQUFPLEdBUkg7QUFTSixpQkFBTztBQVRIO0FBSkUsT0FEQztBQWlCVFIsWUFBTSxFQUFFO0FBQ1BPLGtCQUFVLEVBQUUsVUFETDtBQUVQQyxXQUFHLEVBQUU7QUFDSixlQUFLLEtBREQ7QUFFSixlQUFLLEtBRkQ7QUFHSixlQUFLO0FBSEQ7QUFGRTtBQWpCQyxLQURNO0FBMkJoQkMsWUFBUSxFQUFFO0FBQ1RWLFlBQU0sRUFBRTtBQUNQO0FBQ0E7QUFDQVEsa0JBQVUsRUFBRSw0REFITDtBQUlQQyxXQUFHLEVBQUU7QUFDSjtBQUNBLGlCQUFPLEdBRkg7QUFHSixpQkFBTyxHQUhIO0FBSUosaUJBQU8sR0FKSDtBQUtKLGlCQUFPLEdBTEg7QUFNSixpQkFBTyxHQU5IO0FBT0osaUJBQU8sR0FQSDtBQVFKLGlCQUFPLEdBUkg7QUFTSjtBQUNBLGlCQUFPLEdBVkg7QUFXSixpQkFBTyxHQVhIO0FBWUosaUJBQU8sR0FaSDtBQWFKLGlCQUFPLElBYkg7QUFjSixpQkFBTyxHQWRIO0FBZUosaUJBQU8sR0FmSDtBQWdCSixpQkFBTyxHQWhCSDtBQWlCSixpQkFBTyxHQWpCSDtBQWtCSixpQkFBTyxHQWxCSDtBQW1CSixpQkFBTyxHQW5CSDtBQW9CSixpQkFBTztBQXBCSDtBQUpFO0FBREMsS0EzQk07QUF3RGhCRSxXQUFPLEVBQUU7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBWCxZQUFNLEVBQUU7QUFDUFEsa0JBQVUsRUFBRSx1Q0FETDtBQUVQQyxXQUFHLEVBQUU7QUFDSixpQkFBTyxHQURIO0FBRUosaUJBQU8sR0FGSDtBQUdKLGlCQUFPLElBSEg7QUFJSixpQkFBTyxHQUpIO0FBS0osaUJBQU8sR0FMSDtBQU1KLGlCQUFPLEdBTkg7QUFPSixpQkFBTyxHQVBIO0FBUUosaUJBQU8sR0FSSDtBQVNKLGlCQUFPLEdBVEg7QUFVSixpQkFBTyxHQVZIO0FBV0osaUJBQU87QUFYSDtBQUZFLE9BUkE7QUF3QlI7QUFDQTtBQUNBUixZQUFNLEVBQUU7QUFDUE8sa0JBQVUsRUFBRSxXQURMO0FBRVBDLFdBQUcsRUFBRTtBQUNKLGVBQUssS0FERDtBQUVKLGVBQUssS0FGRDtBQUdKLGVBQUssS0FIRDtBQUlKLGVBQUs7QUFKRDtBQUZFO0FBMUJBO0FBeERPLEdBQWpCOztBQTZGQXRHLEtBQUcsQ0FBQ3lHLFdBQUosR0FBa0IsVUFBU2pGLE1BQVQsRUFBaUJ3QyxnQkFBakIsRUFBbUM7QUFDcEQsUUFBSTBDLE9BQU8sR0FBRzFHLEdBQUcsQ0FBQzZGLE1BQUosQ0FBV3JFLE1BQU0sR0FBRyxFQUFwQixDQUFkOztBQUNBLFFBQUl3QyxnQkFBZ0IsS0FBS3BELFNBQXpCLEVBQW9DO0FBQ25Db0Qsc0JBQWdCLEdBQUdoRSxHQUFHLENBQUNnRSxnQkFBdkI7QUFDQTs7QUFFRCxXQUFPQSxnQkFBZ0IsR0FBRzBDLE9BQU8sQ0FBQ2pGLE9BQVIsQ0FBZ0IsTUFBaEIsRUFBd0IsR0FBeEIsQ0FBSCxHQUFrQ2lGLE9BQXpEO0FBQ0EsR0FQRDs7QUFRQTFHLEtBQUcsQ0FBQzJHLFdBQUosR0FBa0IsVUFBU25GLE1BQVQsRUFBaUJ3QyxnQkFBakIsRUFBbUM7QUFDcER4QyxVQUFNLElBQUksRUFBVjs7QUFDQSxRQUFJd0MsZ0JBQWdCLEtBQUtwRCxTQUF6QixFQUFvQztBQUNuQ29ELHNCQUFnQixHQUFHaEUsR0FBRyxDQUFDZ0UsZ0JBQXZCO0FBQ0E7O0FBRUQsUUFBSTtBQUNILGFBQU9oRSxHQUFHLENBQUM4RixNQUFKLENBQVc5QixnQkFBZ0IsR0FBR3hDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLEtBQWYsRUFBc0IsS0FBdEIsQ0FBSCxHQUFrQ0QsTUFBN0QsQ0FBUDtBQUNBLEtBRkQsQ0FFRSxPQUFNb0YsQ0FBTixFQUFTO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFPcEYsTUFBUDtBQUNBO0FBQ0QsR0FmRCxDQWhYNEMsQ0FnWTVDOzs7QUFDQSxNQUFJNkIsTUFBTSxHQUFHO0FBQUMsY0FBUyxRQUFWO0FBQW9CLGNBQVM7QUFBN0IsR0FBYjs7QUFDQSxNQUFJd0QsS0FBSjs7QUFDQSxNQUFJQyxnQkFBZ0IsR0FBRyxVQUFTQyxNQUFULEVBQWlCRixLQUFqQixFQUF3QjtBQUM5QyxXQUFPLFVBQVNyRixNQUFULEVBQWlCO0FBQ3ZCLFVBQUk7QUFDSCxlQUFPeEIsR0FBRyxDQUFDNkcsS0FBRCxDQUFILENBQVdyRixNQUFNLEdBQUcsRUFBcEIsRUFBd0JDLE9BQXhCLENBQWdDekIsR0FBRyxDQUFDbUcsVUFBSixDQUFlWSxNQUFmLEVBQXVCRixLQUF2QixFQUE4QlIsVUFBOUQsRUFBMEUsVUFBU1csQ0FBVCxFQUFZO0FBQzVGLGlCQUFPaEgsR0FBRyxDQUFDbUcsVUFBSixDQUFlWSxNQUFmLEVBQXVCRixLQUF2QixFQUE4QlAsR0FBOUIsQ0FBa0NVLENBQWxDLENBQVA7QUFDQSxTQUZNLENBQVA7QUFHQSxPQUpELENBSUUsT0FBT0osQ0FBUCxFQUFVO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFPcEYsTUFBUDtBQUNBO0FBQ0QsS0FaRDtBQWFBLEdBZEQ7O0FBZ0JBLE9BQUtxRixLQUFMLElBQWN4RCxNQUFkLEVBQXNCO0FBQ3JCckQsT0FBRyxDQUFDNkcsS0FBSyxHQUFHLGFBQVQsQ0FBSCxHQUE2QkMsZ0JBQWdCLENBQUMsVUFBRCxFQUFhekQsTUFBTSxDQUFDd0QsS0FBRCxDQUFuQixDQUE3QztBQUNBN0csT0FBRyxDQUFDNkcsS0FBSyxHQUFHLGdCQUFULENBQUgsR0FBZ0NDLGdCQUFnQixDQUFDLFNBQUQsRUFBWXpELE1BQU0sQ0FBQ3dELEtBQUQsQ0FBbEIsQ0FBaEQ7QUFDQTs7QUFFRCxNQUFJSSw2QkFBNkIsR0FBRyxVQUFTQyxJQUFULEVBQWVDLGVBQWYsRUFBZ0NDLG9CQUFoQyxFQUFzRDtBQUN6RixXQUFPLFVBQVM1RixNQUFULEVBQWlCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBSTZGLGdCQUFKOztBQUNBLFVBQUksQ0FBQ0Qsb0JBQUwsRUFBMkI7QUFDMUJDLHdCQUFnQixHQUFHckgsR0FBRyxDQUFDbUgsZUFBRCxDQUF0QjtBQUNBLE9BRkQsTUFFTztBQUNORSx3QkFBZ0IsR0FBRyxVQUFTN0YsTUFBVCxFQUFpQjtBQUNuQyxpQkFBT3hCLEdBQUcsQ0FBQ21ILGVBQUQsQ0FBSCxDQUFxQm5ILEdBQUcsQ0FBQ29ILG9CQUFELENBQUgsQ0FBMEI1RixNQUExQixDQUFyQixDQUFQO0FBQ0EsU0FGRDtBQUdBOztBQUVELFVBQUk4RixRQUFRLEdBQUcsQ0FBQzlGLE1BQU0sR0FBRyxFQUFWLEVBQWMrRixLQUFkLENBQW9CTCxJQUFwQixDQUFmOztBQUVBLFdBQUssSUFBSTdFLENBQUMsR0FBRyxDQUFSLEVBQVczQixNQUFNLEdBQUc0RyxRQUFRLENBQUM1RyxNQUFsQyxFQUEwQzJCLENBQUMsR0FBRzNCLE1BQTlDLEVBQXNEMkIsQ0FBQyxFQUF2RCxFQUEyRDtBQUMxRGlGLGdCQUFRLENBQUNqRixDQUFELENBQVIsR0FBY2dGLGdCQUFnQixDQUFDQyxRQUFRLENBQUNqRixDQUFELENBQVQsQ0FBOUI7QUFDQTs7QUFFRCxhQUFPaUYsUUFBUSxDQUFDRSxJQUFULENBQWNOLElBQWQsQ0FBUDtBQUNBLEtBckJEO0FBc0JBLEdBdkJELENBeFo0QyxDQWliNUM7OztBQUNBbEgsS0FBRyxDQUFDeUgsVUFBSixHQUFpQlIsNkJBQTZCLENBQUMsR0FBRCxFQUFNLG1CQUFOLENBQTlDO0FBQ0FqSCxLQUFHLENBQUMwSCxhQUFKLEdBQW9CVCw2QkFBNkIsQ0FBQyxHQUFELEVBQU0sc0JBQU4sQ0FBakQ7QUFDQWpILEtBQUcsQ0FBQzJILFVBQUosR0FBaUJWLDZCQUE2QixDQUFDLEdBQUQsRUFBTSxtQkFBTixFQUEyQixRQUEzQixDQUE5QztBQUNBakgsS0FBRyxDQUFDNEgsYUFBSixHQUFvQlgsNkJBQTZCLENBQUMsR0FBRCxFQUFNLHNCQUFOLEVBQThCLFFBQTlCLENBQWpEO0FBRUFqSCxLQUFHLENBQUM2SCxjQUFKLEdBQXFCZixnQkFBZ0IsQ0FBQyxVQUFELEVBQWEsUUFBYixDQUFyQzs7QUFFQTlHLEtBQUcsQ0FBQzhILEtBQUosR0FBWSxVQUFTdEcsTUFBVCxFQUFpQnVHLEtBQWpCLEVBQXdCO0FBQ25DLFFBQUlDLEdBQUo7O0FBQ0EsUUFBSSxDQUFDRCxLQUFMLEVBQVk7QUFDWEEsV0FBSyxHQUFHLEVBQVI7QUFDQSxLQUprQyxDQUtuQztBQUVBOzs7QUFDQUMsT0FBRyxHQUFHeEcsTUFBTSxDQUFDeUcsT0FBUCxDQUFlLEdBQWYsQ0FBTjs7QUFDQSxRQUFJRCxHQUFHLEdBQUcsQ0FBQyxDQUFYLEVBQWM7QUFDYjtBQUNBRCxXQUFLLENBQUNqRSxRQUFOLEdBQWlCdEMsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQkYsR0FBRyxHQUFHLENBQXZCLEtBQTZCLElBQTlDO0FBQ0F4RyxZQUFNLEdBQUdBLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0JGLEdBQXBCLENBQVQ7QUFDQSxLQWJrQyxDQWVuQzs7O0FBQ0FBLE9BQUcsR0FBR3hHLE1BQU0sQ0FBQ3lHLE9BQVAsQ0FBZSxHQUFmLENBQU47O0FBQ0EsUUFBSUQsR0FBRyxHQUFHLENBQUMsQ0FBWCxFQUFjO0FBQ2I7QUFDQUQsV0FBSyxDQUFDbEUsS0FBTixHQUFjckMsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQkYsR0FBRyxHQUFHLENBQXZCLEtBQTZCLElBQTNDO0FBQ0F4RyxZQUFNLEdBQUdBLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0JGLEdBQXBCLENBQVQ7QUFDQSxLQXJCa0MsQ0F1Qm5DOzs7QUFDQSxRQUFJeEcsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQixDQUFqQixFQUFvQixDQUFwQixNQUEyQixJQUEvQixFQUFxQztBQUNwQztBQUNBSCxXQUFLLENBQUN6RSxRQUFOLEdBQWlCLElBQWpCO0FBQ0E5QixZQUFNLEdBQUdBLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUIsQ0FBakIsQ0FBVCxDQUhvQyxDQUlwQzs7QUFDQTFHLFlBQU0sR0FBR3hCLEdBQUcsQ0FBQ21JLGNBQUosQ0FBbUIzRyxNQUFuQixFQUEyQnVHLEtBQTNCLENBQVQ7QUFDQSxLQU5ELE1BTU87QUFDTkMsU0FBRyxHQUFHeEcsTUFBTSxDQUFDeUcsT0FBUCxDQUFlLEdBQWYsQ0FBTjs7QUFDQSxVQUFJRCxHQUFHLEdBQUcsQ0FBQyxDQUFYLEVBQWM7QUFDYkQsYUFBSyxDQUFDekUsUUFBTixHQUFpQjlCLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0JGLEdBQXBCLEtBQTRCLElBQTdDOztBQUNBLFlBQUlELEtBQUssQ0FBQ3pFLFFBQU4sSUFBa0IsQ0FBQ3lFLEtBQUssQ0FBQ3pFLFFBQU4sQ0FBZVYsS0FBZixDQUFxQjVDLEdBQUcsQ0FBQ2lFLG1CQUF6QixDQUF2QixFQUFzRTtBQUNyRTtBQUNBOEQsZUFBSyxDQUFDekUsUUFBTixHQUFpQjFDLFNBQWpCO0FBQ0EsU0FIRCxNQUdPLElBQUlZLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUJGLEdBQUcsR0FBRyxDQUF2QixFQUEwQkEsR0FBRyxHQUFHLENBQWhDLE1BQXVDLElBQTNDLEVBQWlEO0FBQ3ZEeEcsZ0JBQU0sR0FBR0EsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQkYsR0FBRyxHQUFHLENBQXZCLENBQVQsQ0FEdUQsQ0FHdkQ7O0FBQ0F4RyxnQkFBTSxHQUFHeEIsR0FBRyxDQUFDbUksY0FBSixDQUFtQjNHLE1BQW5CLEVBQTJCdUcsS0FBM0IsQ0FBVDtBQUNBLFNBTE0sTUFLQTtBQUNOdkcsZ0JBQU0sR0FBR0EsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQkYsR0FBRyxHQUFHLENBQXZCLENBQVQ7QUFDQUQsZUFBSyxDQUFDckUsR0FBTixHQUFZLElBQVo7QUFDQTtBQUNEO0FBQ0QsS0EvQ2tDLENBaURuQzs7O0FBQ0FxRSxTQUFLLENBQUNuRSxJQUFOLEdBQWFwQyxNQUFiLENBbERtQyxDQW9EbkM7O0FBQ0EsV0FBT3VHLEtBQVA7QUFDQSxHQXRERDs7QUF1REEvSCxLQUFHLENBQUNvSSxTQUFKLEdBQWdCLFVBQVM1RyxNQUFULEVBQWlCdUcsS0FBakIsRUFBd0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBdkcsVUFBTSxHQUFHQSxNQUFNLENBQUNDLE9BQVAsQ0FBZSxLQUFmLEVBQXNCLEdBQXRCLENBQVQsQ0FOdUMsQ0FRdkM7O0FBQ0EsUUFBSXVHLEdBQUcsR0FBR3hHLE1BQU0sQ0FBQ3lHLE9BQVAsQ0FBZSxHQUFmLENBQVY7QUFDQSxRQUFJSSxVQUFKO0FBQ0EsUUFBSUMsQ0FBSjs7QUFFQSxRQUFJTixHQUFHLEtBQUssQ0FBQyxDQUFiLEVBQWdCO0FBQ2ZBLFNBQUcsR0FBR3hHLE1BQU0sQ0FBQ2QsTUFBYjtBQUNBOztBQUVELFFBQUljLE1BQU0sQ0FBQytHLE1BQVAsQ0FBYyxDQUFkLE1BQXFCLEdBQXpCLEVBQThCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBRixnQkFBVSxHQUFHN0csTUFBTSxDQUFDeUcsT0FBUCxDQUFlLEdBQWYsQ0FBYjtBQUNBRixXQUFLLENBQUN0RSxRQUFOLEdBQWlCakMsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQixDQUFqQixFQUFvQkcsVUFBcEIsS0FBbUMsSUFBcEQ7QUFDQU4sV0FBSyxDQUFDcEUsSUFBTixHQUFhbkMsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQkcsVUFBVSxHQUFHLENBQTlCLEVBQWlDTCxHQUFqQyxLQUF5QyxJQUF0RDs7QUFDQSxVQUFJRCxLQUFLLENBQUNwRSxJQUFOLEtBQWUsR0FBbkIsRUFBd0I7QUFDdkJvRSxhQUFLLENBQUNwRSxJQUFOLEdBQWEsSUFBYjtBQUNBO0FBQ0QsS0FWRCxNQVVPO0FBQ04sVUFBSTZFLFVBQVUsR0FBR2hILE1BQU0sQ0FBQ3lHLE9BQVAsQ0FBZSxHQUFmLENBQWpCO0FBQ0EsVUFBSVEsVUFBVSxHQUFHakgsTUFBTSxDQUFDeUcsT0FBUCxDQUFlLEdBQWYsQ0FBakI7QUFDQSxVQUFJUyxTQUFTLEdBQUdsSCxNQUFNLENBQUN5RyxPQUFQLENBQWUsR0FBZixFQUFvQk8sVUFBVSxHQUFHLENBQWpDLENBQWhCOztBQUNBLFVBQUlFLFNBQVMsS0FBSyxDQUFDLENBQWYsS0FBcUJELFVBQVUsS0FBSyxDQUFDLENBQWhCLElBQXFCQyxTQUFTLEdBQUdELFVBQXRELENBQUosRUFBdUU7QUFDdEU7QUFDQTtBQUNBVixhQUFLLENBQUN0RSxRQUFOLEdBQWlCakMsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQixDQUFqQixFQUFvQkYsR0FBcEIsS0FBNEIsSUFBN0M7QUFDQUQsYUFBSyxDQUFDcEUsSUFBTixHQUFhLElBQWI7QUFDQSxPQUxELE1BS087QUFDTjJFLFNBQUMsR0FBRzlHLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0JGLEdBQXBCLEVBQXlCVCxLQUF6QixDQUErQixHQUEvQixDQUFKO0FBQ0FRLGFBQUssQ0FBQ3RFLFFBQU4sR0FBaUI2RSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsSUFBekI7QUFDQVAsYUFBSyxDQUFDcEUsSUFBTixHQUFhMkUsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLElBQXJCO0FBQ0E7QUFDRDs7QUFFRCxRQUFJUCxLQUFLLENBQUN0RSxRQUFOLElBQWtCakMsTUFBTSxDQUFDMEcsU0FBUCxDQUFpQkYsR0FBakIsRUFBc0JPLE1BQXRCLENBQTZCLENBQTdCLE1BQW9DLEdBQTFELEVBQStEO0FBQzlEUCxTQUFHO0FBQ0h4RyxZQUFNLEdBQUcsTUFBTUEsTUFBZjtBQUNBOztBQUVELFdBQU9BLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUJGLEdBQWpCLEtBQXlCLEdBQWhDO0FBQ0EsR0FqREQ7O0FBa0RBaEksS0FBRyxDQUFDbUksY0FBSixHQUFxQixVQUFTM0csTUFBVCxFQUFpQnVHLEtBQWpCLEVBQXdCO0FBQzVDdkcsVUFBTSxHQUFHeEIsR0FBRyxDQUFDMkksYUFBSixDQUFrQm5ILE1BQWxCLEVBQTBCdUcsS0FBMUIsQ0FBVDtBQUNBLFdBQU8vSCxHQUFHLENBQUNvSSxTQUFKLENBQWM1RyxNQUFkLEVBQXNCdUcsS0FBdEIsQ0FBUDtBQUNBLEdBSEQ7O0FBSUEvSCxLQUFHLENBQUMySSxhQUFKLEdBQW9CLFVBQVNuSCxNQUFULEVBQWlCdUcsS0FBakIsRUFBd0I7QUFDM0M7QUFDQSxRQUFJVSxVQUFVLEdBQUdqSCxNQUFNLENBQUN5RyxPQUFQLENBQWUsR0FBZixDQUFqQjtBQUNBLFFBQUlELEdBQUcsR0FBR3hHLE1BQU0sQ0FBQ29ILFdBQVAsQ0FBbUIsR0FBbkIsRUFBd0JILFVBQVUsR0FBRyxDQUFDLENBQWQsR0FBa0JBLFVBQWxCLEdBQStCakgsTUFBTSxDQUFDZCxNQUFQLEdBQWdCLENBQXZFLENBQVY7QUFDQSxRQUFJNEgsQ0FBSixDQUoyQyxDQU0zQzs7QUFDQSxRQUFJTixHQUFHLEdBQUcsQ0FBQyxDQUFQLEtBQWFTLFVBQVUsS0FBSyxDQUFDLENBQWhCLElBQXFCVCxHQUFHLEdBQUdTLFVBQXhDLENBQUosRUFBeUQ7QUFDeERILE9BQUMsR0FBRzlHLE1BQU0sQ0FBQzBHLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0JGLEdBQXBCLEVBQXlCVCxLQUF6QixDQUErQixHQUEvQixDQUFKO0FBQ0FRLFdBQUssQ0FBQ3hFLFFBQU4sR0FBaUIrRSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU90SSxHQUFHLENBQUM4RixNQUFKLENBQVd3QyxDQUFDLENBQUMsQ0FBRCxDQUFaLENBQVAsR0FBMEIsSUFBM0M7QUFDQUEsT0FBQyxDQUFDTyxLQUFGO0FBQ0FkLFdBQUssQ0FBQ3ZFLFFBQU4sR0FBaUI4RSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU90SSxHQUFHLENBQUM4RixNQUFKLENBQVd3QyxDQUFDLENBQUNkLElBQUYsQ0FBTyxHQUFQLENBQVgsQ0FBUCxHQUFpQyxJQUFsRDtBQUNBaEcsWUFBTSxHQUFHQSxNQUFNLENBQUMwRyxTQUFQLENBQWlCRixHQUFHLEdBQUcsQ0FBdkIsQ0FBVDtBQUNBLEtBTkQsTUFNTztBQUNORCxXQUFLLENBQUN4RSxRQUFOLEdBQWlCLElBQWpCO0FBQ0F3RSxXQUFLLENBQUN2RSxRQUFOLEdBQWlCLElBQWpCO0FBQ0E7O0FBRUQsV0FBT2hDLE1BQVA7QUFDQSxHQW5CRDs7QUFvQkF4QixLQUFHLENBQUM4SSxVQUFKLEdBQWlCLFVBQVN0SCxNQUFULEVBQWlCd0MsZ0JBQWpCLEVBQW1DO0FBQ25ELFFBQUksQ0FBQ3hDLE1BQUwsRUFBYTtBQUNaLGFBQU8sRUFBUDtBQUNBLEtBSGtELENBS25EOzs7QUFDQUEsVUFBTSxHQUFHQSxNQUFNLENBQUNDLE9BQVAsQ0FBZSxLQUFmLEVBQXNCLEdBQXRCLEVBQTJCQSxPQUEzQixDQUFtQyxhQUFuQyxFQUFrRCxFQUFsRCxDQUFUOztBQUVBLFFBQUksQ0FBQ0QsTUFBTCxFQUFhO0FBQ1osYUFBTyxFQUFQO0FBQ0E7O0FBRUQsUUFBSXVILEtBQUssR0FBRyxFQUFaO0FBQ0EsUUFBSUMsTUFBTSxHQUFHeEgsTUFBTSxDQUFDK0YsS0FBUCxDQUFhLEdBQWIsQ0FBYjtBQUNBLFFBQUk3RyxNQUFNLEdBQUdzSSxNQUFNLENBQUN0SSxNQUFwQjtBQUNBLFFBQUlqQixDQUFKLEVBQU93SixJQUFQLEVBQWF0SCxLQUFiOztBQUVBLFNBQUssSUFBSVUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzNCLE1BQXBCLEVBQTRCMkIsQ0FBQyxFQUE3QixFQUFpQztBQUNoQzVDLE9BQUMsR0FBR3VKLE1BQU0sQ0FBQzNHLENBQUQsQ0FBTixDQUFVa0YsS0FBVixDQUFnQixHQUFoQixDQUFKO0FBQ0EwQixVQUFJLEdBQUdqSixHQUFHLENBQUMyRyxXQUFKLENBQWdCbEgsQ0FBQyxDQUFDb0osS0FBRixFQUFoQixFQUEyQjdFLGdCQUEzQixDQUFQLENBRmdDLENBR2hDOztBQUNBckMsV0FBSyxHQUFHbEMsQ0FBQyxDQUFDaUIsTUFBRixHQUFXVixHQUFHLENBQUMyRyxXQUFKLENBQWdCbEgsQ0FBQyxDQUFDK0gsSUFBRixDQUFPLEdBQVAsQ0FBaEIsRUFBNkJ4RCxnQkFBN0IsQ0FBWCxHQUE0RCxJQUFwRTs7QUFFQSxVQUFJNUMsTUFBTSxDQUFDVSxJQUFQLENBQVlpSCxLQUFaLEVBQW1CRSxJQUFuQixDQUFKLEVBQThCO0FBQzdCLFlBQUksT0FBT0YsS0FBSyxDQUFDRSxJQUFELENBQVosS0FBdUIsUUFBdkIsSUFBbUNGLEtBQUssQ0FBQ0UsSUFBRCxDQUFMLEtBQWdCLElBQXZELEVBQTZEO0FBQzVERixlQUFLLENBQUNFLElBQUQsQ0FBTCxHQUFjLENBQUNGLEtBQUssQ0FBQ0UsSUFBRCxDQUFOLENBQWQ7QUFDQTs7QUFFREYsYUFBSyxDQUFDRSxJQUFELENBQUwsQ0FBWUMsSUFBWixDQUFpQnZILEtBQWpCO0FBQ0EsT0FORCxNQU1PO0FBQ05vSCxhQUFLLENBQUNFLElBQUQsQ0FBTCxHQUFjdEgsS0FBZDtBQUNBO0FBQ0Q7O0FBRUQsV0FBT29ILEtBQVA7QUFDQSxHQW5DRDs7QUFxQ0EvSSxLQUFHLENBQUNtSixLQUFKLEdBQVksVUFBU3BCLEtBQVQsRUFBZ0I7QUFDM0IsUUFBSU8sQ0FBQyxHQUFHLEVBQVI7O0FBRUEsUUFBSVAsS0FBSyxDQUFDekUsUUFBVixFQUFvQjtBQUNuQmdGLE9BQUMsSUFBSVAsS0FBSyxDQUFDekUsUUFBTixHQUFpQixHQUF0QjtBQUNBOztBQUVELFFBQUksQ0FBQ3lFLEtBQUssQ0FBQ3JFLEdBQVAsS0FBZTRFLENBQUMsSUFBSVAsS0FBSyxDQUFDdEUsUUFBMUIsQ0FBSixFQUF5QztBQUN4QzZFLE9BQUMsSUFBSSxJQUFMO0FBQ0E7O0FBRURBLEtBQUMsSUFBS3RJLEdBQUcsQ0FBQ29KLGNBQUosQ0FBbUJyQixLQUFuQixLQUE2QixFQUFuQzs7QUFFQSxRQUFJLE9BQU9BLEtBQUssQ0FBQ25FLElBQWIsS0FBc0IsUUFBMUIsRUFBb0M7QUFDbkMsVUFBSW1FLEtBQUssQ0FBQ25FLElBQU4sQ0FBVzJFLE1BQVgsQ0FBa0IsQ0FBbEIsTUFBeUIsR0FBekIsSUFBZ0MsT0FBT1IsS0FBSyxDQUFDdEUsUUFBYixLQUEwQixRQUE5RCxFQUF3RTtBQUN2RTZFLFNBQUMsSUFBSSxHQUFMO0FBQ0E7O0FBRURBLE9BQUMsSUFBSVAsS0FBSyxDQUFDbkUsSUFBWDtBQUNBOztBQUVELFFBQUksT0FBT21FLEtBQUssQ0FBQ2xFLEtBQWIsS0FBdUIsUUFBdkIsSUFBbUNrRSxLQUFLLENBQUNsRSxLQUE3QyxFQUFvRDtBQUNuRHlFLE9BQUMsSUFBSSxNQUFNUCxLQUFLLENBQUNsRSxLQUFqQjtBQUNBOztBQUVELFFBQUksT0FBT2tFLEtBQUssQ0FBQ2pFLFFBQWIsS0FBMEIsUUFBMUIsSUFBc0NpRSxLQUFLLENBQUNqRSxRQUFoRCxFQUEwRDtBQUN6RHdFLE9BQUMsSUFBSSxNQUFNUCxLQUFLLENBQUNqRSxRQUFqQjtBQUNBOztBQUNELFdBQU93RSxDQUFQO0FBQ0EsR0E3QkQ7O0FBOEJBdEksS0FBRyxDQUFDcUosU0FBSixHQUFnQixVQUFTdEIsS0FBVCxFQUFnQjtBQUMvQixRQUFJTyxDQUFDLEdBQUcsRUFBUjs7QUFFQSxRQUFJLENBQUNQLEtBQUssQ0FBQ3RFLFFBQVgsRUFBcUI7QUFDcEIsYUFBTyxFQUFQO0FBQ0EsS0FGRCxNQUVPLElBQUl6RCxHQUFHLENBQUNxRSxjQUFKLENBQW1COUIsSUFBbkIsQ0FBd0J3RixLQUFLLENBQUN0RSxRQUE5QixDQUFKLEVBQTZDO0FBQ25ENkUsT0FBQyxJQUFJLE1BQU1QLEtBQUssQ0FBQ3RFLFFBQVosR0FBdUIsR0FBNUI7QUFDQSxLQUZNLE1BRUE7QUFDTjZFLE9BQUMsSUFBSVAsS0FBSyxDQUFDdEUsUUFBWDtBQUNBOztBQUVELFFBQUlzRSxLQUFLLENBQUNwRSxJQUFWLEVBQWdCO0FBQ2YyRSxPQUFDLElBQUksTUFBTVAsS0FBSyxDQUFDcEUsSUFBakI7QUFDQTs7QUFFRCxXQUFPMkUsQ0FBUDtBQUNBLEdBaEJEOztBQWlCQXRJLEtBQUcsQ0FBQ29KLGNBQUosR0FBcUIsVUFBU3JCLEtBQVQsRUFBZ0I7QUFDcEMsV0FBTy9ILEdBQUcsQ0FBQ3NKLGFBQUosQ0FBa0J2QixLQUFsQixJQUEyQi9ILEdBQUcsQ0FBQ3FKLFNBQUosQ0FBY3RCLEtBQWQsQ0FBbEM7QUFDQSxHQUZEOztBQUdBL0gsS0FBRyxDQUFDc0osYUFBSixHQUFvQixVQUFTdkIsS0FBVCxFQUFnQjtBQUNuQyxRQUFJTyxDQUFDLEdBQUcsRUFBUjs7QUFFQSxRQUFJUCxLQUFLLENBQUN4RSxRQUFWLEVBQW9CO0FBQ25CK0UsT0FBQyxJQUFJdEksR0FBRyxDQUFDNkYsTUFBSixDQUFXa0MsS0FBSyxDQUFDeEUsUUFBakIsQ0FBTDs7QUFFQSxVQUFJd0UsS0FBSyxDQUFDdkUsUUFBVixFQUFvQjtBQUNuQjhFLFNBQUMsSUFBSSxNQUFNdEksR0FBRyxDQUFDNkYsTUFBSixDQUFXa0MsS0FBSyxDQUFDdkUsUUFBakIsQ0FBWDtBQUNBOztBQUVEOEUsT0FBQyxJQUFJLEdBQUw7QUFDQTs7QUFFRCxXQUFPQSxDQUFQO0FBQ0EsR0FkRDs7QUFlQXRJLEtBQUcsQ0FBQ3VKLFVBQUosR0FBaUIsVUFBU3BILElBQVQsRUFBZTRCLHdCQUFmLEVBQXlDQyxnQkFBekMsRUFBMkQ7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLFFBQUlzRSxDQUFDLEdBQUcsRUFBUjtBQUNBLFFBQUlrQixNQUFKLEVBQVlDLEdBQVosRUFBaUJwSCxDQUFqQixFQUFvQjNCLE1BQXBCOztBQUNBLFNBQUsrSSxHQUFMLElBQVl0SCxJQUFaLEVBQWtCO0FBQ2pCLFVBQUlmLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZSyxJQUFaLEVBQWtCc0gsR0FBbEIsS0FBMEJBLEdBQTlCLEVBQW1DO0FBQ2xDLFlBQUl6SCxPQUFPLENBQUNHLElBQUksQ0FBQ3NILEdBQUQsQ0FBTCxDQUFYLEVBQXdCO0FBQ3ZCRCxnQkFBTSxHQUFHLEVBQVQ7O0FBQ0EsZUFBS25ILENBQUMsR0FBRyxDQUFKLEVBQU8zQixNQUFNLEdBQUd5QixJQUFJLENBQUNzSCxHQUFELENBQUosQ0FBVS9JLE1BQS9CLEVBQXVDMkIsQ0FBQyxHQUFHM0IsTUFBM0MsRUFBbUQyQixDQUFDLEVBQXBELEVBQXdEO0FBQ3ZELGdCQUFJRixJQUFJLENBQUNzSCxHQUFELENBQUosQ0FBVXBILENBQVYsTUFBaUJ6QixTQUFqQixJQUE4QjRJLE1BQU0sQ0FBQ3JILElBQUksQ0FBQ3NILEdBQUQsQ0FBSixDQUFVcEgsQ0FBVixJQUFlLEVBQWhCLENBQU4sS0FBOEJ6QixTQUFoRSxFQUEyRTtBQUMxRTBILGVBQUMsSUFBSSxNQUFNdEksR0FBRyxDQUFDMEosbUJBQUosQ0FBd0JELEdBQXhCLEVBQTZCdEgsSUFBSSxDQUFDc0gsR0FBRCxDQUFKLENBQVVwSCxDQUFWLENBQTdCLEVBQTJDMkIsZ0JBQTNDLENBQVg7O0FBQ0Esa0JBQUlELHdCQUF3QixLQUFLLElBQWpDLEVBQXVDO0FBQ3RDeUYsc0JBQU0sQ0FBQ3JILElBQUksQ0FBQ3NILEdBQUQsQ0FBSixDQUFVcEgsQ0FBVixJQUFlLEVBQWhCLENBQU4sR0FBNEIsSUFBNUI7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxTQVZELE1BVU8sSUFBSUYsSUFBSSxDQUFDc0gsR0FBRCxDQUFKLEtBQWM3SSxTQUFsQixFQUE2QjtBQUNuQzBILFdBQUMsSUFBSSxNQUFNdEksR0FBRyxDQUFDMEosbUJBQUosQ0FBd0JELEdBQXhCLEVBQTZCdEgsSUFBSSxDQUFDc0gsR0FBRCxDQUFqQyxFQUF3Q3pGLGdCQUF4QyxDQUFYO0FBQ0E7QUFDRDtBQUNEOztBQUVELFdBQU9zRSxDQUFDLENBQUNKLFNBQUYsQ0FBWSxDQUFaLENBQVA7QUFDQSxHQTVCRDs7QUE2QkFsSSxLQUFHLENBQUMwSixtQkFBSixHQUEwQixVQUFTVCxJQUFULEVBQWV0SCxLQUFmLEVBQXNCcUMsZ0JBQXRCLEVBQXdDO0FBQ2pFO0FBQ0E7QUFDQSxXQUFPaEUsR0FBRyxDQUFDeUcsV0FBSixDQUFnQndDLElBQWhCLEVBQXNCakYsZ0JBQXRCLEtBQTJDckMsS0FBSyxLQUFLLElBQVYsR0FBaUIsTUFBTTNCLEdBQUcsQ0FBQ3lHLFdBQUosQ0FBZ0I5RSxLQUFoQixFQUF1QnFDLGdCQUF2QixDQUF2QixHQUFrRSxFQUE3RyxDQUFQO0FBQ0EsR0FKRDs7QUFNQWhFLEtBQUcsQ0FBQzJKLFFBQUosR0FBZSxVQUFTeEgsSUFBVCxFQUFlOEcsSUFBZixFQUFxQnRILEtBQXJCLEVBQTRCO0FBQzFDLFFBQUksT0FBT3NILElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDN0IsV0FBSyxJQUFJUSxHQUFULElBQWdCUixJQUFoQixFQUFzQjtBQUNyQixZQUFJN0gsTUFBTSxDQUFDVSxJQUFQLENBQVltSCxJQUFaLEVBQWtCUSxHQUFsQixDQUFKLEVBQTRCO0FBQzNCekosYUFBRyxDQUFDMkosUUFBSixDQUFheEgsSUFBYixFQUFtQnNILEdBQW5CLEVBQXdCUixJQUFJLENBQUNRLEdBQUQsQ0FBNUI7QUFDQTtBQUNEO0FBQ0QsS0FORCxNQU1PLElBQUksT0FBT1IsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUNwQyxVQUFJOUcsSUFBSSxDQUFDOEcsSUFBRCxDQUFKLEtBQWVySSxTQUFuQixFQUE4QjtBQUM3QnVCLFlBQUksQ0FBQzhHLElBQUQsQ0FBSixHQUFhdEgsS0FBYjtBQUNBO0FBQ0EsT0FIRCxNQUdPLElBQUksT0FBT1EsSUFBSSxDQUFDOEcsSUFBRCxDQUFYLEtBQXNCLFFBQTFCLEVBQW9DO0FBQzFDOUcsWUFBSSxDQUFDOEcsSUFBRCxDQUFKLEdBQWEsQ0FBQzlHLElBQUksQ0FBQzhHLElBQUQsQ0FBTCxDQUFiO0FBQ0E7O0FBRUQsVUFBSSxDQUFDakgsT0FBTyxDQUFDTCxLQUFELENBQVosRUFBcUI7QUFDcEJBLGFBQUssR0FBRyxDQUFDQSxLQUFELENBQVI7QUFDQTs7QUFFRFEsVUFBSSxDQUFDOEcsSUFBRCxDQUFKLEdBQWEsQ0FBQzlHLElBQUksQ0FBQzhHLElBQUQsQ0FBSixJQUFjLEVBQWYsRUFBbUJXLE1BQW5CLENBQTBCakksS0FBMUIsQ0FBYjtBQUNBLEtBYk0sTUFhQTtBQUNOLFlBQU0sSUFBSWQsU0FBSixDQUFjLGdFQUFkLENBQU47QUFDQTtBQUNELEdBdkJEOztBQXdCQWIsS0FBRyxDQUFDNkosV0FBSixHQUFrQixVQUFTMUgsSUFBVCxFQUFlOEcsSUFBZixFQUFxQnRILEtBQXJCLEVBQTRCO0FBQzdDLFFBQUlVLENBQUosRUFBTzNCLE1BQVAsRUFBZStJLEdBQWY7O0FBRUEsUUFBSXpILE9BQU8sQ0FBQ2lILElBQUQsQ0FBWCxFQUFtQjtBQUNsQixXQUFLNUcsQ0FBQyxHQUFHLENBQUosRUFBTzNCLE1BQU0sR0FBR3VJLElBQUksQ0FBQ3ZJLE1BQTFCLEVBQWtDMkIsQ0FBQyxHQUFHM0IsTUFBdEMsRUFBOEMyQixDQUFDLEVBQS9DLEVBQW1EO0FBQ2xERixZQUFJLENBQUM4RyxJQUFJLENBQUM1RyxDQUFELENBQUwsQ0FBSixHQUFnQnpCLFNBQWhCO0FBQ0E7QUFDRCxLQUpELE1BSU8sSUFBSWMsT0FBTyxDQUFDdUgsSUFBRCxDQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQ3RDLFdBQUtRLEdBQUwsSUFBWXRILElBQVosRUFBa0I7QUFDakIsWUFBSThHLElBQUksQ0FBQzFHLElBQUwsQ0FBVWtILEdBQVYsQ0FBSixFQUFvQjtBQUNuQnRILGNBQUksQ0FBQ3NILEdBQUQsQ0FBSixHQUFZN0ksU0FBWjtBQUNBO0FBQ0Q7QUFDRCxLQU5NLE1BTUEsSUFBSSxPQUFPcUksSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUNwQyxXQUFLUSxHQUFMLElBQVlSLElBQVosRUFBa0I7QUFDakIsWUFBSTdILE1BQU0sQ0FBQ1UsSUFBUCxDQUFZbUgsSUFBWixFQUFrQlEsR0FBbEIsQ0FBSixFQUE0QjtBQUMzQnpKLGFBQUcsQ0FBQzZKLFdBQUosQ0FBZ0IxSCxJQUFoQixFQUFzQnNILEdBQXRCLEVBQTJCUixJQUFJLENBQUNRLEdBQUQsQ0FBL0I7QUFDQTtBQUNEO0FBQ0QsS0FOTSxNQU1BLElBQUksT0FBT1IsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUNwQyxVQUFJdEgsS0FBSyxLQUFLZixTQUFkLEVBQXlCO0FBQ3hCLFlBQUljLE9BQU8sQ0FBQ0MsS0FBRCxDQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQ2hDLGNBQUksQ0FBQ0ssT0FBTyxDQUFDRyxJQUFJLENBQUM4RyxJQUFELENBQUwsQ0FBUixJQUF3QnRILEtBQUssQ0FBQ1ksSUFBTixDQUFXSixJQUFJLENBQUM4RyxJQUFELENBQWYsQ0FBNUIsRUFBb0Q7QUFDbkQ5RyxnQkFBSSxDQUFDOEcsSUFBRCxDQUFKLEdBQWFySSxTQUFiO0FBQ0EsV0FGRCxNQUVPO0FBQ051QixnQkFBSSxDQUFDOEcsSUFBRCxDQUFKLEdBQWEvRyxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFDOEcsSUFBRCxDQUFMLEVBQWF0SCxLQUFiLENBQTlCO0FBQ0E7QUFDRCxTQU5ELE1BTU8sSUFBSVEsSUFBSSxDQUFDOEcsSUFBRCxDQUFKLEtBQWVySCxNQUFNLENBQUNELEtBQUQsQ0FBckIsS0FBaUMsQ0FBQ0ssT0FBTyxDQUFDTCxLQUFELENBQVIsSUFBbUJBLEtBQUssQ0FBQ2pCLE1BQU4sS0FBaUIsQ0FBckUsQ0FBSixFQUE2RTtBQUNuRnlCLGNBQUksQ0FBQzhHLElBQUQsQ0FBSixHQUFhckksU0FBYjtBQUNBLFNBRk0sTUFFQSxJQUFJb0IsT0FBTyxDQUFDRyxJQUFJLENBQUM4RyxJQUFELENBQUwsQ0FBWCxFQUF5QjtBQUMvQjlHLGNBQUksQ0FBQzhHLElBQUQsQ0FBSixHQUFhL0csaUJBQWlCLENBQUNDLElBQUksQ0FBQzhHLElBQUQsQ0FBTCxFQUFhdEgsS0FBYixDQUE5QjtBQUNBO0FBQ0QsT0FaRCxNQVlPO0FBQ05RLFlBQUksQ0FBQzhHLElBQUQsQ0FBSixHQUFhckksU0FBYjtBQUNBO0FBQ0QsS0FoQk0sTUFnQkE7QUFDTixZQUFNLElBQUlDLFNBQUosQ0FBYyw0RUFBZCxDQUFOO0FBQ0E7QUFDRCxHQXRDRDs7QUF1Q0FiLEtBQUcsQ0FBQzhKLFFBQUosR0FBZSxVQUFTM0gsSUFBVCxFQUFlOEcsSUFBZixFQUFxQnRILEtBQXJCLEVBQTRCb0ksV0FBNUIsRUFBeUM7QUFDdkQsUUFBSSxPQUFPZCxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzdCLFdBQUssSUFBSVEsR0FBVCxJQUFnQlIsSUFBaEIsRUFBc0I7QUFDckIsWUFBSTdILE1BQU0sQ0FBQ1UsSUFBUCxDQUFZbUgsSUFBWixFQUFrQlEsR0FBbEIsQ0FBSixFQUE0QjtBQUMzQixjQUFJLENBQUN6SixHQUFHLENBQUM4SixRQUFKLENBQWEzSCxJQUFiLEVBQW1Cc0gsR0FBbkIsRUFBd0JSLElBQUksQ0FBQ1EsR0FBRCxDQUE1QixDQUFMLEVBQXlDO0FBQ3hDLG1CQUFPLEtBQVA7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0EsS0FWRCxNQVVPLElBQUksT0FBT1IsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUNwQyxZQUFNLElBQUlwSSxTQUFKLENBQWMsZ0VBQWQsQ0FBTjtBQUNBOztBQUVELFlBQVFhLE9BQU8sQ0FBQ0MsS0FBRCxDQUFmO0FBQ0MsV0FBSyxXQUFMO0FBQ0M7QUFDQSxlQUFPc0gsSUFBSSxJQUFJOUcsSUFBZjtBQUFxQjs7QUFFdEIsV0FBSyxTQUFMO0FBQ0M7QUFDQSxZQUFJNkgsTUFBTSxHQUFHQyxPQUFPLENBQUNqSSxPQUFPLENBQUNHLElBQUksQ0FBQzhHLElBQUQsQ0FBTCxDQUFQLEdBQXNCOUcsSUFBSSxDQUFDOEcsSUFBRCxDQUFKLENBQVd2SSxNQUFqQyxHQUEwQ3lCLElBQUksQ0FBQzhHLElBQUQsQ0FBL0MsQ0FBcEI7O0FBQ0EsZUFBT3RILEtBQUssS0FBS3FJLE1BQWpCOztBQUVELFdBQUssVUFBTDtBQUNDO0FBQ0EsZUFBTyxDQUFDLENBQUNySSxLQUFLLENBQUNRLElBQUksQ0FBQzhHLElBQUQsQ0FBTCxFQUFhQSxJQUFiLEVBQW1COUcsSUFBbkIsQ0FBZDs7QUFFRCxXQUFLLE9BQUw7QUFDQyxZQUFJLENBQUNILE9BQU8sQ0FBQ0csSUFBSSxDQUFDOEcsSUFBRCxDQUFMLENBQVosRUFBMEI7QUFDekIsaUJBQU8sS0FBUDtBQUNBOztBQUVELFlBQUlpQixFQUFFLEdBQUdILFdBQVcsR0FBR3RILGFBQUgsR0FBbUJJLFdBQXZDO0FBQ0EsZUFBT3FILEVBQUUsQ0FBQy9ILElBQUksQ0FBQzhHLElBQUQsQ0FBTCxFQUFhdEgsS0FBYixDQUFUOztBQUVELFdBQUssUUFBTDtBQUNDLFlBQUksQ0FBQ0ssT0FBTyxDQUFDRyxJQUFJLENBQUM4RyxJQUFELENBQUwsQ0FBWixFQUEwQjtBQUN6QixpQkFBT2dCLE9BQU8sQ0FBQzlILElBQUksQ0FBQzhHLElBQUQsQ0FBSixJQUFjOUcsSUFBSSxDQUFDOEcsSUFBRCxDQUFKLENBQVdyRyxLQUFYLENBQWlCakIsS0FBakIsQ0FBZixDQUFkO0FBQ0E7O0FBRUQsWUFBSSxDQUFDb0ksV0FBTCxFQUFrQjtBQUNqQixpQkFBTyxLQUFQO0FBQ0E7O0FBRUQsZUFBT3RILGFBQWEsQ0FBQ04sSUFBSSxDQUFDOEcsSUFBRCxDQUFMLEVBQWF0SCxLQUFiLENBQXBCOztBQUVELFdBQUssUUFBTDtBQUNDQSxhQUFLLEdBQUdDLE1BQU0sQ0FBQ0QsS0FBRCxDQUFkOztBQUNEOztBQUNBLFdBQUssUUFBTDtBQUNDLFlBQUksQ0FBQ0ssT0FBTyxDQUFDRyxJQUFJLENBQUM4RyxJQUFELENBQUwsQ0FBWixFQUEwQjtBQUN6QixpQkFBTzlHLElBQUksQ0FBQzhHLElBQUQsQ0FBSixLQUFldEgsS0FBdEI7QUFDQTs7QUFFRCxZQUFJLENBQUNvSSxXQUFMLEVBQWtCO0FBQ2pCLGlCQUFPLEtBQVA7QUFDQTs7QUFFRCxlQUFPdEgsYUFBYSxDQUFDTixJQUFJLENBQUM4RyxJQUFELENBQUwsRUFBYXRILEtBQWIsQ0FBcEI7O0FBRUQ7QUFDQyxjQUFNLElBQUlkLFNBQUosQ0FBYyxvR0FBZCxDQUFOO0FBaERGO0FBa0RBLEdBakVEOztBQW9FQWIsS0FBRyxDQUFDbUssVUFBSixHQUFpQixVQUFTckgsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ25DLFFBQUlyQyxNQUFNLEdBQUcwSixJQUFJLENBQUNDLEdBQUwsQ0FBU3ZILEdBQUcsQ0FBQ3BDLE1BQWIsRUFBcUJxQyxHQUFHLENBQUNyQyxNQUF6QixDQUFiO0FBQ0EsUUFBSXNILEdBQUosQ0FGbUMsQ0FJbkM7O0FBQ0EsU0FBS0EsR0FBRyxHQUFHLENBQVgsRUFBY0EsR0FBRyxHQUFHdEgsTUFBcEIsRUFBNEJzSCxHQUFHLEVBQS9CLEVBQW1DO0FBQ2xDLFVBQUlsRixHQUFHLENBQUN5RixNQUFKLENBQVdQLEdBQVgsTUFBb0JqRixHQUFHLENBQUN3RixNQUFKLENBQVdQLEdBQVgsQ0FBeEIsRUFBeUM7QUFDeENBLFdBQUc7QUFDSDtBQUNBO0FBQ0Q7O0FBRUQsUUFBSUEsR0FBRyxHQUFHLENBQVYsRUFBYTtBQUNaLGFBQU9sRixHQUFHLENBQUN5RixNQUFKLENBQVcsQ0FBWCxNQUFrQnhGLEdBQUcsQ0FBQ3dGLE1BQUosQ0FBVyxDQUFYLENBQWxCLElBQW1DekYsR0FBRyxDQUFDeUYsTUFBSixDQUFXLENBQVgsTUFBa0IsR0FBckQsR0FBMkQsR0FBM0QsR0FBaUUsRUFBeEU7QUFDQSxLQWRrQyxDQWdCbkM7OztBQUNBLFFBQUl6RixHQUFHLENBQUN5RixNQUFKLENBQVdQLEdBQVgsTUFBb0IsR0FBcEIsSUFBMkJqRixHQUFHLENBQUN3RixNQUFKLENBQVdQLEdBQVgsTUFBb0IsR0FBbkQsRUFBd0Q7QUFDdkRBLFNBQUcsR0FBR2xGLEdBQUcsQ0FBQ29GLFNBQUosQ0FBYyxDQUFkLEVBQWlCRixHQUFqQixFQUFzQlksV0FBdEIsQ0FBa0MsR0FBbEMsQ0FBTjtBQUNBOztBQUVELFdBQU85RixHQUFHLENBQUNvRixTQUFKLENBQWMsQ0FBZCxFQUFpQkYsR0FBRyxHQUFHLENBQXZCLENBQVA7QUFDQSxHQXRCRDs7QUF3QkFoSSxLQUFHLENBQUNzSyxZQUFKLEdBQW1CLFVBQVM5SSxNQUFULEVBQWlCK0ksUUFBakIsRUFBMkJDLE9BQTNCLEVBQW9DO0FBQ3REQSxXQUFPLEtBQUtBLE9BQU8sR0FBRyxFQUFmLENBQVA7O0FBQ0EsUUFBSUMsTUFBTSxHQUFHRCxPQUFPLENBQUNoRyxLQUFSLElBQWlCeEUsR0FBRyxDQUFDdUUsT0FBSixDQUFZQyxLQUExQzs7QUFDQSxRQUFJa0csSUFBSSxHQUFHRixPQUFPLENBQUMvRixHQUFSLElBQWV6RSxHQUFHLENBQUN1RSxPQUFKLENBQVlFLEdBQXRDOztBQUNBLFFBQUlrRyxLQUFLLEdBQUdILE9BQU8sQ0FBQzlGLElBQVIsSUFBZ0IxRSxHQUFHLENBQUN1RSxPQUFKLENBQVlHLElBQXhDOztBQUNBLFFBQUlrRyxjQUFjLEdBQUcsbUJBQXJCO0FBRUFILFVBQU0sQ0FBQ0ksU0FBUCxHQUFtQixDQUFuQjs7QUFDQSxXQUFPLElBQVAsRUFBYTtBQUNaLFVBQUlqSSxLQUFLLEdBQUc2SCxNQUFNLENBQUNLLElBQVAsQ0FBWXRKLE1BQVosQ0FBWjs7QUFDQSxVQUFJLENBQUNvQixLQUFMLEVBQVk7QUFDWDtBQUNBOztBQUVELFVBQUk0QixLQUFLLEdBQUc1QixLQUFLLENBQUNtSSxLQUFsQjs7QUFDQSxVQUFJUCxPQUFPLENBQUNRLFVBQVosRUFBd0I7QUFDdkI7QUFDQSxZQUFJQyxhQUFhLEdBQUd6SixNQUFNLENBQUNPLEtBQVAsQ0FBYXFJLElBQUksQ0FBQ2MsR0FBTCxDQUFTMUcsS0FBSyxHQUFHLENBQWpCLEVBQW9CLENBQXBCLENBQWIsRUFBcUNBLEtBQXJDLENBQXBCOztBQUNBLFlBQUl5RyxhQUFhLElBQUlMLGNBQWMsQ0FBQ3JJLElBQWYsQ0FBb0IwSSxhQUFwQixDQUFyQixFQUF5RDtBQUN4RDtBQUNBO0FBQ0Q7O0FBRUQsVUFBSXhHLEdBQUcsR0FBR0QsS0FBSyxHQUFHaEQsTUFBTSxDQUFDTyxLQUFQLENBQWF5QyxLQUFiLEVBQW9CMkcsTUFBcEIsQ0FBMkJULElBQTNCLENBQWxCO0FBQ0EsVUFBSTNJLEtBQUssR0FBR1AsTUFBTSxDQUFDTyxLQUFQLENBQWF5QyxLQUFiLEVBQW9CQyxHQUFwQixFQUF5QmhELE9BQXpCLENBQWlDa0osS0FBakMsRUFBd0MsRUFBeEMsQ0FBWjs7QUFDQSxVQUFJSCxPQUFPLENBQUNZLE1BQVIsSUFBa0JaLE9BQU8sQ0FBQ1ksTUFBUixDQUFlN0ksSUFBZixDQUFvQlIsS0FBcEIsQ0FBdEIsRUFBa0Q7QUFDakQ7QUFDQTs7QUFFRDBDLFNBQUcsR0FBR0QsS0FBSyxHQUFHekMsS0FBSyxDQUFDckIsTUFBcEI7QUFDQSxVQUFJMkssTUFBTSxHQUFHZCxRQUFRLENBQUN4SSxLQUFELEVBQVF5QyxLQUFSLEVBQWVDLEdBQWYsRUFBb0JqRCxNQUFwQixDQUFyQjtBQUNBQSxZQUFNLEdBQUdBLE1BQU0sQ0FBQ08sS0FBUCxDQUFhLENBQWIsRUFBZ0J5QyxLQUFoQixJQUF5QjZHLE1BQXpCLEdBQWtDN0osTUFBTSxDQUFDTyxLQUFQLENBQWEwQyxHQUFiLENBQTNDO0FBQ0FnRyxZQUFNLENBQUNJLFNBQVAsR0FBbUJyRyxLQUFLLEdBQUc2RyxNQUFNLENBQUMzSyxNQUFsQztBQUNBOztBQUVEK0osVUFBTSxDQUFDSSxTQUFQLEdBQW1CLENBQW5CO0FBQ0EsV0FBT3JKLE1BQVA7QUFDQSxHQXJDRDs7QUF1Q0F4QixLQUFHLENBQUNzTCxtQkFBSixHQUEwQixVQUFTN0wsQ0FBVCxFQUFZO0FBQ3JDO0FBQ0E7QUFFQSxRQUFJQSxDQUFDLENBQUNtRCxLQUFGLENBQVE1QyxHQUFHLENBQUNrRiwyQkFBWixDQUFKLEVBQThDO0FBQzdDO0FBQ0EsVUFBSSxDQUFDakYsUUFBTCxFQUFlO0FBQ2QsY0FBTSxJQUFJWSxTQUFKLENBQWMsZUFBZXBCLENBQWYsR0FBbUIsOEVBQWpDLENBQU47QUFDQTs7QUFFRCxVQUFJUSxRQUFRLENBQUNzTCxPQUFULENBQWlCOUwsQ0FBakIsRUFBb0JtRCxLQUFwQixDQUEwQjVDLEdBQUcsQ0FBQ2tGLDJCQUE5QixDQUFKLEVBQWdFO0FBQy9ELGNBQU0sSUFBSXJFLFNBQUosQ0FBYyxlQUFlcEIsQ0FBZixHQUFtQiw2Q0FBakMsQ0FBTjtBQUNBO0FBQ0Q7QUFDRCxHQWRELENBcjRCNEMsQ0FxNUI1Qzs7O0FBQ0FPLEtBQUcsQ0FBQ3dMLFVBQUosR0FBaUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNwQyxRQUFJQSxTQUFKLEVBQWU7QUFDZCxVQUFJQyxZQUFZLEdBQUc7QUFDbEIxTCxXQUFHLEVBQUUsS0FBS3dMLFVBQUw7QUFEYSxPQUFuQjs7QUFJQSxVQUFJNUwsSUFBSSxDQUFDK0wsV0FBTCxJQUFvQixPQUFPL0wsSUFBSSxDQUFDK0wsV0FBTCxDQUFpQkgsVUFBeEIsS0FBdUMsVUFBL0QsRUFBMkU7QUFDMUVFLG9CQUFZLENBQUNDLFdBQWIsR0FBMkIvTCxJQUFJLENBQUMrTCxXQUFMLENBQWlCSCxVQUFqQixFQUEzQjtBQUNBOztBQUVELFVBQUk1TCxJQUFJLENBQUNNLElBQUwsSUFBYSxPQUFPTixJQUFJLENBQUNNLElBQUwsQ0FBVXNMLFVBQWpCLEtBQWdDLFVBQWpELEVBQTZEO0FBQzVERSxvQkFBWSxDQUFDeEwsSUFBYixHQUFvQk4sSUFBSSxDQUFDTSxJQUFMLENBQVVzTCxVQUFWLEVBQXBCO0FBQ0E7O0FBRUQsVUFBSTVMLElBQUksQ0FBQ08sa0JBQUwsSUFBMkIsT0FBT1AsSUFBSSxDQUFDTyxrQkFBTCxDQUF3QnFMLFVBQS9CLEtBQThDLFVBQTdFLEVBQXlGO0FBQ3hGRSxvQkFBWSxDQUFDdkwsa0JBQWIsR0FBa0NQLElBQUksQ0FBQ08sa0JBQUwsQ0FBd0JxTCxVQUF4QixFQUFsQztBQUNBOztBQUVELGFBQU9FLFlBQVA7QUFDQSxLQWxCRCxNQWtCTyxJQUFJOUwsSUFBSSxDQUFDSSxHQUFMLEtBQWEsSUFBakIsRUFBdUI7QUFDN0JKLFVBQUksQ0FBQ0ksR0FBTCxHQUFXSyxJQUFYO0FBQ0E7O0FBRUQsV0FBTyxJQUFQO0FBQ0EsR0F4QkQ7O0FBMEJBYSxHQUFDLENBQUNpSSxLQUFGLEdBQVUsVUFBU3lDLFVBQVQsRUFBcUI7QUFDOUIsUUFBSUEsVUFBVSxLQUFLLElBQW5CLEVBQXlCO0FBQ3hCLFdBQUtDLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxLQUZELE1BRU8sSUFBSUQsVUFBVSxLQUFLaEwsU0FBZixJQUE0QixLQUFLaUwsZUFBckMsRUFBc0Q7QUFDNUQsV0FBS0MsT0FBTCxHQUFlOUwsR0FBRyxDQUFDbUosS0FBSixDQUFVLEtBQUs5RixNQUFmLENBQWY7QUFDQSxXQUFLd0ksZUFBTCxHQUF1QixLQUF2QjtBQUNBOztBQUVELFdBQU8sSUFBUDtBQUNBLEdBVEQ7O0FBV0EzSyxHQUFDLENBQUM2SyxLQUFGLEdBQVUsWUFBVztBQUNwQixXQUFPLElBQUkvTCxHQUFKLENBQVEsSUFBUixDQUFQO0FBQ0EsR0FGRDs7QUFJQWtCLEdBQUMsQ0FBQzhLLE9BQUYsR0FBWTlLLENBQUMsQ0FBQ1csUUFBRixHQUFhLFlBQVc7QUFDbkMsV0FBTyxLQUFLc0gsS0FBTCxDQUFXLEtBQVgsRUFBa0IyQyxPQUF6QjtBQUNBLEdBRkQ7O0FBS0EsV0FBU0csc0JBQVQsQ0FBZ0NwRixLQUFoQyxFQUFzQztBQUNyQyxXQUFPLFVBQVNwSCxDQUFULEVBQVkwSixLQUFaLEVBQW1CO0FBQ3pCLFVBQUkxSixDQUFDLEtBQUttQixTQUFWLEVBQXFCO0FBQ3BCLGVBQU8sS0FBS3lDLE1BQUwsQ0FBWXdELEtBQVosS0FBc0IsRUFBN0I7QUFDQSxPQUZELE1BRU87QUFDTixhQUFLeEQsTUFBTCxDQUFZd0QsS0FBWixJQUFxQnBILENBQUMsSUFBSSxJQUExQjtBQUNBLGFBQUswSixLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBLGVBQU8sSUFBUDtBQUNBO0FBQ0QsS0FSRDtBQVNBOztBQUVELFdBQVMrQyxzQkFBVCxDQUFnQ3JGLEtBQWhDLEVBQXVDc0YsSUFBdkMsRUFBNEM7QUFDM0MsV0FBTyxVQUFTMU0sQ0FBVCxFQUFZMEosS0FBWixFQUFtQjtBQUN6QixVQUFJMUosQ0FBQyxLQUFLbUIsU0FBVixFQUFxQjtBQUNwQixlQUFPLEtBQUt5QyxNQUFMLENBQVl3RCxLQUFaLEtBQXNCLEVBQTdCO0FBQ0EsT0FGRCxNQUVPO0FBQ04sWUFBSXBILENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2ZBLFdBQUMsR0FBR0EsQ0FBQyxHQUFHLEVBQVI7O0FBQ0EsY0FBSUEsQ0FBQyxDQUFDOEksTUFBRixDQUFTLENBQVQsTUFBZ0I0RCxJQUFwQixFQUEwQjtBQUN6QjFNLGFBQUMsR0FBR0EsQ0FBQyxDQUFDeUksU0FBRixDQUFZLENBQVosQ0FBSjtBQUNBO0FBQ0Q7O0FBRUQsYUFBSzdFLE1BQUwsQ0FBWXdELEtBQVosSUFBcUJwSCxDQUFyQjtBQUNBLGFBQUswSixLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBLGVBQU8sSUFBUDtBQUNBO0FBQ0QsS0FmRDtBQWdCQTs7QUFFRGpJLEdBQUMsQ0FBQ29DLFFBQUYsR0FBYTJJLHNCQUFzQixDQUFDLFVBQUQsQ0FBbkM7QUFDQS9LLEdBQUMsQ0FBQ3FDLFFBQUYsR0FBYTBJLHNCQUFzQixDQUFDLFVBQUQsQ0FBbkM7QUFDQS9LLEdBQUMsQ0FBQ3NDLFFBQUYsR0FBYXlJLHNCQUFzQixDQUFDLFVBQUQsQ0FBbkM7QUFDQS9LLEdBQUMsQ0FBQ3VDLFFBQUYsR0FBYXdJLHNCQUFzQixDQUFDLFVBQUQsQ0FBbkM7QUFDQS9LLEdBQUMsQ0FBQ3lDLElBQUYsR0FBU3NJLHNCQUFzQixDQUFDLE1BQUQsQ0FBL0I7QUFDQS9LLEdBQUMsQ0FBQzJDLEtBQUYsR0FBVXFJLHNCQUFzQixDQUFDLE9BQUQsRUFBVSxHQUFWLENBQWhDO0FBQ0FoTCxHQUFDLENBQUM0QyxRQUFGLEdBQWFvSSxzQkFBc0IsQ0FBQyxVQUFELEVBQWEsR0FBYixDQUFuQzs7QUFFQWhMLEdBQUMsQ0FBQ2lLLE1BQUYsR0FBVyxVQUFTMUwsQ0FBVCxFQUFZMEosS0FBWixFQUFtQjtBQUM3QixRQUFJYixDQUFDLEdBQUcsS0FBS3pFLEtBQUwsQ0FBV3BFLENBQVgsRUFBYzBKLEtBQWQsQ0FBUjtBQUNBLFdBQU8sT0FBT2IsQ0FBUCxLQUFhLFFBQWIsSUFBeUJBLENBQUMsQ0FBQzVILE1BQTNCLEdBQXFDLE1BQU00SCxDQUEzQyxHQUFnREEsQ0FBdkQ7QUFDQSxHQUhEOztBQUlBcEgsR0FBQyxDQUFDa0wsSUFBRixHQUFTLFVBQVMzTSxDQUFULEVBQVkwSixLQUFaLEVBQW1CO0FBQzNCLFFBQUliLENBQUMsR0FBRyxLQUFLeEUsUUFBTCxDQUFjckUsQ0FBZCxFQUFpQjBKLEtBQWpCLENBQVI7QUFDQSxXQUFPLE9BQU9iLENBQVAsS0FBYSxRQUFiLElBQXlCQSxDQUFDLENBQUM1SCxNQUEzQixHQUFxQyxNQUFNNEgsQ0FBM0MsR0FBZ0RBLENBQXZEO0FBQ0EsR0FIRDs7QUFLQXBILEdBQUMsQ0FBQ2tGLFFBQUYsR0FBYSxVQUFTM0csQ0FBVCxFQUFZMEosS0FBWixFQUFtQjtBQUMvQixRQUFJMUosQ0FBQyxLQUFLbUIsU0FBTixJQUFtQm5CLENBQUMsS0FBSyxJQUE3QixFQUFtQztBQUNsQyxVQUFJNE0sR0FBRyxHQUFHLEtBQUtoSixNQUFMLENBQVlPLElBQVosS0FBcUIsS0FBS1AsTUFBTCxDQUFZSSxRQUFaLEdBQXVCLEdBQXZCLEdBQTZCLEVBQWxELENBQVY7QUFDQSxhQUFPaEUsQ0FBQyxHQUFHLENBQUMsS0FBSzRELE1BQUwsQ0FBWUssR0FBWixHQUFrQjFELEdBQUcsQ0FBQzBILGFBQXRCLEdBQXNDMUgsR0FBRyxDQUFDeUgsVUFBM0MsRUFBdUQ0RSxHQUF2RCxDQUFILEdBQWlFQSxHQUF6RTtBQUNBLEtBSEQsTUFHTztBQUNOLFVBQUksS0FBS2hKLE1BQUwsQ0FBWUssR0FBaEIsRUFBcUI7QUFDcEIsYUFBS0wsTUFBTCxDQUFZTyxJQUFaLEdBQW1CbkUsQ0FBQyxHQUFHTyxHQUFHLENBQUM0SCxhQUFKLENBQWtCbkksQ0FBbEIsQ0FBSCxHQUEwQixFQUE5QztBQUNBLE9BRkQsTUFFTztBQUNOLGFBQUs0RCxNQUFMLENBQVlPLElBQVosR0FBbUJuRSxDQUFDLEdBQUdPLEdBQUcsQ0FBQzJILFVBQUosQ0FBZWxJLENBQWYsQ0FBSCxHQUF1QixHQUEzQztBQUNBOztBQUNELFdBQUswSixLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBLGFBQU8sSUFBUDtBQUNBO0FBQ0QsR0FiRDs7QUFjQWpJLEdBQUMsQ0FBQzBDLElBQUYsR0FBUzFDLENBQUMsQ0FBQ2tGLFFBQVg7O0FBQ0FsRixHQUFDLENBQUNILElBQUYsR0FBUyxVQUFTQSxJQUFULEVBQWVvSSxLQUFmLEVBQXNCO0FBQzlCLFFBQUlNLEdBQUo7O0FBRUEsUUFBSTFJLElBQUksS0FBS0gsU0FBYixFQUF3QjtBQUN2QixhQUFPLEtBQUtpQixRQUFMLEVBQVA7QUFDQTs7QUFFRCxTQUFLaUssT0FBTCxHQUFlLEVBQWY7QUFDQSxTQUFLekksTUFBTCxHQUFjckQsR0FBRyxDQUFDcUQsTUFBSixFQUFkOztBQUVBLFFBQUloRCxJQUFJLEdBQUdVLElBQUksWUFBWWYsR0FBM0I7O0FBQ0EsUUFBSXNNLE9BQU8sR0FBRyxPQUFPdkwsSUFBUCxLQUFnQixRQUFoQixLQUE2QkEsSUFBSSxDQUFDMEMsUUFBTCxJQUFpQjFDLElBQUksQ0FBQzZDLElBQXRCLElBQThCN0MsSUFBSSxDQUFDcUYsUUFBaEUsQ0FBZDs7QUFDQSxRQUFJckYsSUFBSSxDQUFDdUUsUUFBVCxFQUFtQjtBQUNsQixVQUFJaUgsU0FBUyxHQUFHdk0sR0FBRyxDQUFDb0YsZUFBSixDQUFvQnJFLElBQXBCLENBQWhCO0FBQ0FBLFVBQUksR0FBR0EsSUFBSSxDQUFDd0wsU0FBRCxDQUFKLElBQW1CLEVBQTFCO0FBQ0FELGFBQU8sR0FBRyxLQUFWO0FBQ0EsS0FoQjZCLENBa0I5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsUUFBSSxDQUFDak0sSUFBRCxJQUFTaU0sT0FBVCxJQUFvQnZMLElBQUksQ0FBQ3FGLFFBQUwsS0FBa0J4RixTQUExQyxFQUFxRDtBQUNwREcsVUFBSSxHQUFHQSxJQUFJLENBQUNjLFFBQUwsRUFBUDtBQUNBOztBQUVELFFBQUksT0FBT2QsSUFBUCxLQUFnQixRQUFoQixJQUE0QkEsSUFBSSxZQUFZYSxNQUFoRCxFQUF3RDtBQUN2RCxXQUFLeUIsTUFBTCxHQUFjckQsR0FBRyxDQUFDOEgsS0FBSixDQUFVbEcsTUFBTSxDQUFDYixJQUFELENBQWhCLEVBQXdCLEtBQUtzQyxNQUE3QixDQUFkO0FBQ0EsS0FGRCxNQUVPLElBQUloRCxJQUFJLElBQUlpTSxPQUFaLEVBQXFCO0FBQzNCLFVBQUlFLEdBQUcsR0FBR25NLElBQUksR0FBR1UsSUFBSSxDQUFDc0MsTUFBUixHQUFpQnRDLElBQS9COztBQUNBLFdBQUswSSxHQUFMLElBQVkrQyxHQUFaLEVBQWlCO0FBQ2hCLFlBQUlwTCxNQUFNLENBQUNVLElBQVAsQ0FBWSxLQUFLdUIsTUFBakIsRUFBeUJvRyxHQUF6QixDQUFKLEVBQW1DO0FBQ2xDLGVBQUtwRyxNQUFMLENBQVlvRyxHQUFaLElBQW1CK0MsR0FBRyxDQUFDL0MsR0FBRCxDQUF0QjtBQUNBO0FBQ0Q7QUFDRCxLQVBNLE1BT0E7QUFDTixZQUFNLElBQUk1SSxTQUFKLENBQWMsZUFBZCxDQUFOO0FBQ0E7O0FBRUQsU0FBS3NJLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsV0FBTyxJQUFQO0FBQ0EsR0E1Q0QsQ0FuZ0M0QyxDQWlqQzVDOzs7QUFDQWpJLEdBQUMsQ0FBQ3VMLEVBQUYsR0FBTyxVQUFTQyxJQUFULEVBQWU7QUFDckIsUUFBSUMsRUFBRSxHQUFHLEtBQVQ7QUFDQSxRQUFJQyxHQUFHLEdBQUcsS0FBVjtBQUNBLFFBQUlDLEdBQUcsR0FBRyxLQUFWO0FBQ0EsUUFBSTVELElBQUksR0FBRyxLQUFYO0FBQ0EsUUFBSTZELEdBQUcsR0FBRyxLQUFWO0FBQ0EsUUFBSUMsR0FBRyxHQUFHLEtBQVY7QUFDQSxRQUFJOU0sUUFBUSxHQUFHLEtBQWY7QUFDQSxRQUFJK00sUUFBUSxHQUFHLENBQUMsS0FBSzNKLE1BQUwsQ0FBWUssR0FBNUI7O0FBRUEsUUFBSSxLQUFLTCxNQUFMLENBQVlJLFFBQWhCLEVBQTBCO0FBQ3pCdUosY0FBUSxHQUFHLEtBQVg7QUFDQUosU0FBRyxHQUFHNU0sR0FBRyxDQUFDb0UsY0FBSixDQUFtQjdCLElBQW5CLENBQXdCLEtBQUtjLE1BQUwsQ0FBWUksUUFBcEMsQ0FBTjtBQUNBb0osU0FBRyxHQUFHN00sR0FBRyxDQUFDcUUsY0FBSixDQUFtQjlCLElBQW5CLENBQXdCLEtBQUtjLE1BQUwsQ0FBWUksUUFBcEMsQ0FBTjtBQUNBa0osUUFBRSxHQUFHQyxHQUFHLElBQUlDLEdBQVo7QUFDQTVELFVBQUksR0FBRyxDQUFDMEQsRUFBUjtBQUNBRyxTQUFHLEdBQUc3RCxJQUFJLElBQUk3SSxHQUFSLElBQWVBLEdBQUcsQ0FBQzZNLEdBQUosQ0FBUSxLQUFLNUosTUFBTCxDQUFZSSxRQUFwQixDQUFyQjtBQUNBc0osU0FBRyxHQUFHOUQsSUFBSSxJQUFJakosR0FBRyxDQUFDa0UsY0FBSixDQUFtQjNCLElBQW5CLENBQXdCLEtBQUtjLE1BQUwsQ0FBWUksUUFBcEMsQ0FBZDtBQUNBeEQsY0FBUSxHQUFHZ0osSUFBSSxJQUFJakosR0FBRyxDQUFDbUUsbUJBQUosQ0FBd0I1QixJQUF4QixDQUE2QixLQUFLYyxNQUFMLENBQVlJLFFBQXpDLENBQW5CO0FBQ0E7O0FBRUQsWUFBUWlKLElBQUksQ0FBQ25ILFdBQUwsRUFBUjtBQUNDLFdBQUssVUFBTDtBQUNDLGVBQU95SCxRQUFQOztBQUVELFdBQUssVUFBTDtBQUNDLGVBQU8sQ0FBQ0EsUUFBUjtBQUVEOztBQUNBLFdBQUssUUFBTDtBQUNBLFdBQUssTUFBTDtBQUNDLGVBQU8vRCxJQUFQOztBQUVELFdBQUssS0FBTDtBQUNDLGVBQU82RCxHQUFQOztBQUVELFdBQUssSUFBTDtBQUNDLGVBQU9ILEVBQVA7O0FBRUQsV0FBSyxLQUFMO0FBQ0EsV0FBSyxNQUFMO0FBQ0EsV0FBSyxPQUFMO0FBQ0MsZUFBT0MsR0FBUDs7QUFFRCxXQUFLLEtBQUw7QUFDQSxXQUFLLE1BQUw7QUFDQSxXQUFLLE9BQUw7QUFDQyxlQUFPQyxHQUFQOztBQUVELFdBQUssS0FBTDtBQUNDLGVBQU9FLEdBQVA7O0FBRUQsV0FBSyxLQUFMO0FBQ0MsZUFBTyxDQUFDLEtBQUsxSixNQUFMLENBQVlLLEdBQXBCOztBQUVELFdBQUssS0FBTDtBQUNDLGVBQU8sQ0FBQyxDQUFDLEtBQUtMLE1BQUwsQ0FBWUssR0FBckI7O0FBRUQsV0FBSyxVQUFMO0FBQ0MsZUFBT3pELFFBQVA7QUF0Q0Y7O0FBeUNBLFdBQU8sSUFBUDtBQUNBLEdBL0RELENBbGpDNEMsQ0FtbkM1Qzs7O0FBQ0EsTUFBSWlOLFNBQVMsR0FBR2hNLENBQUMsQ0FBQ29DLFFBQWxCO0FBQ0EsTUFBSTZKLEtBQUssR0FBR2pNLENBQUMsQ0FBQ3lDLElBQWQ7QUFDQSxNQUFJeUosU0FBUyxHQUFHbE0sQ0FBQyxDQUFDdUMsUUFBbEI7O0FBRUF2QyxHQUFDLENBQUNvQyxRQUFGLEdBQWEsVUFBUzdELENBQVQsRUFBWTBKLEtBQVosRUFBbUI7QUFDL0IsUUFBSTFKLENBQUMsS0FBS21CLFNBQVYsRUFBcUI7QUFDcEIsVUFBSW5CLENBQUosRUFBTztBQUNOO0FBQ0FBLFNBQUMsR0FBR0EsQ0FBQyxDQUFDZ0MsT0FBRixDQUFVLFdBQVYsRUFBdUIsRUFBdkIsQ0FBSjs7QUFFQSxZQUFJLENBQUNoQyxDQUFDLENBQUNtRCxLQUFGLENBQVE1QyxHQUFHLENBQUNpRSxtQkFBWixDQUFMLEVBQXVDO0FBQ3RDLGdCQUFNLElBQUlwRCxTQUFKLENBQWMsZUFBZXBCLENBQWYsR0FBbUIsMkVBQWpDLENBQU47QUFDQTtBQUNEO0FBQ0Q7O0FBQ0QsV0FBT3lOLFNBQVMsQ0FBQ3BMLElBQVYsQ0FBZSxJQUFmLEVBQXFCckMsQ0FBckIsRUFBd0IwSixLQUF4QixDQUFQO0FBQ0EsR0FaRDs7QUFhQWpJLEdBQUMsQ0FBQ21NLE1BQUYsR0FBV25NLENBQUMsQ0FBQ29DLFFBQWI7O0FBQ0FwQyxHQUFDLENBQUN5QyxJQUFGLEdBQVMsVUFBU2xFLENBQVQsRUFBWTBKLEtBQVosRUFBbUI7QUFDM0IsUUFBSSxLQUFLOUYsTUFBTCxDQUFZSyxHQUFoQixFQUFxQjtBQUNwQixhQUFPakUsQ0FBQyxLQUFLbUIsU0FBTixHQUFrQixFQUFsQixHQUF1QixJQUE5QjtBQUNBOztBQUVELFFBQUluQixDQUFDLEtBQUttQixTQUFWLEVBQXFCO0FBQ3BCLFVBQUluQixDQUFDLEtBQUssQ0FBVixFQUFhO0FBQ1pBLFNBQUMsR0FBRyxJQUFKO0FBQ0E7O0FBRUQsVUFBSUEsQ0FBSixFQUFPO0FBQ05BLFNBQUMsSUFBSSxFQUFMOztBQUNBLFlBQUlBLENBQUMsQ0FBQzhJLE1BQUYsQ0FBUyxDQUFULE1BQWdCLEdBQXBCLEVBQXlCO0FBQ3hCOUksV0FBQyxHQUFHQSxDQUFDLENBQUN5SSxTQUFGLENBQVksQ0FBWixDQUFKO0FBQ0E7O0FBRUQsWUFBSXpJLENBQUMsQ0FBQ21ELEtBQUYsQ0FBUSxRQUFSLENBQUosRUFBdUI7QUFDdEIsZ0JBQU0sSUFBSS9CLFNBQUosQ0FBYyxXQUFXcEIsQ0FBWCxHQUFlLHdDQUE3QixDQUFOO0FBQ0E7QUFDRDtBQUNEOztBQUNELFdBQU8wTixLQUFLLENBQUNyTCxJQUFOLENBQVcsSUFBWCxFQUFpQnJDLENBQWpCLEVBQW9CMEosS0FBcEIsQ0FBUDtBQUNBLEdBdEJEOztBQXVCQWpJLEdBQUMsQ0FBQ3VDLFFBQUYsR0FBYSxVQUFTaEUsQ0FBVCxFQUFZMEosS0FBWixFQUFtQjtBQUMvQixRQUFJLEtBQUs5RixNQUFMLENBQVlLLEdBQWhCLEVBQXFCO0FBQ3BCLGFBQU9qRSxDQUFDLEtBQUttQixTQUFOLEdBQWtCLEVBQWxCLEdBQXVCLElBQTlCO0FBQ0E7O0FBRUQsUUFBSW5CLENBQUMsS0FBS21CLFNBQVYsRUFBcUI7QUFDcEIsVUFBSTBNLENBQUMsR0FBRyxFQUFSO0FBQ0EsVUFBSWpCLEdBQUcsR0FBR3JNLEdBQUcsQ0FBQ29JLFNBQUosQ0FBYzNJLENBQWQsRUFBaUI2TixDQUFqQixDQUFWOztBQUNBLFVBQUlqQixHQUFHLEtBQUssR0FBWixFQUFpQjtBQUNoQixjQUFNLElBQUl4TCxTQUFKLENBQWMsZUFBZXBCLENBQWYsR0FBbUIsNkNBQWpDLENBQU47QUFDQTs7QUFFREEsT0FBQyxHQUFHNk4sQ0FBQyxDQUFDN0osUUFBTjtBQUNBOztBQUNELFdBQU8ySixTQUFTLENBQUN0TCxJQUFWLENBQWUsSUFBZixFQUFxQnJDLENBQXJCLEVBQXdCMEosS0FBeEIsQ0FBUDtBQUNBLEdBZkQsQ0E3cEM0QyxDQThxQzVDOzs7QUFDQWpJLEdBQUMsQ0FBQ3FNLE1BQUYsR0FBVyxVQUFTOU4sQ0FBVCxFQUFZMEosS0FBWixFQUFtQjtBQUM3QixRQUFJcEIsS0FBSjs7QUFFQSxRQUFJLEtBQUsxRSxNQUFMLENBQVlLLEdBQWhCLEVBQXFCO0FBQ3BCLGFBQU9qRSxDQUFDLEtBQUttQixTQUFOLEdBQWtCLEVBQWxCLEdBQXVCLElBQTlCO0FBQ0E7O0FBRUQsUUFBSW5CLENBQUMsS0FBS21CLFNBQVYsRUFBcUI7QUFDcEIsVUFBSTBDLFFBQVEsR0FBRyxLQUFLQSxRQUFMLEVBQWY7QUFDQSxVQUFJa0ssU0FBUyxHQUFHLEtBQUtBLFNBQUwsRUFBaEI7QUFDQSxVQUFJLENBQUNBLFNBQUwsRUFBZ0IsT0FBTyxFQUFQO0FBQ2hCLGFBQU8sQ0FBQ2xLLFFBQVEsR0FBR0EsUUFBUSxHQUFHLEtBQWQsR0FBc0IsRUFBL0IsSUFBcUMsS0FBS2tLLFNBQUwsRUFBNUM7QUFDQSxLQUxELE1BS087QUFDTixVQUFJRCxNQUFNLEdBQUd2TixHQUFHLENBQUNQLENBQUQsQ0FBaEI7QUFDQSxXQUNFNkQsUUFERixDQUNXaUssTUFBTSxDQUFDakssUUFBUCxFQURYLEVBRUVrSyxTQUZGLENBRVlELE1BQU0sQ0FBQ0MsU0FBUCxFQUZaLEVBR0VyRSxLQUhGLENBR1EsQ0FBQ0EsS0FIVDtBQUlBLGFBQU8sSUFBUDtBQUNBO0FBQ0QsR0FwQkQ7O0FBcUJBakksR0FBQyxDQUFDdU0sSUFBRixHQUFTLFVBQVNoTyxDQUFULEVBQVkwSixLQUFaLEVBQW1CO0FBQzNCLFFBQUksS0FBSzlGLE1BQUwsQ0FBWUssR0FBaEIsRUFBcUI7QUFDcEIsYUFBT2pFLENBQUMsS0FBS21CLFNBQU4sR0FBa0IsRUFBbEIsR0FBdUIsSUFBOUI7QUFDQTs7QUFFRCxRQUFJbkIsQ0FBQyxLQUFLbUIsU0FBVixFQUFxQjtBQUNwQixhQUFPLEtBQUt5QyxNQUFMLENBQVlJLFFBQVosR0FBdUJ6RCxHQUFHLENBQUNxSixTQUFKLENBQWMsS0FBS2hHLE1BQW5CLENBQXZCLEdBQW9ELEVBQTNEO0FBQ0EsS0FGRCxNQUVPO0FBQ04sVUFBSWdKLEdBQUcsR0FBR3JNLEdBQUcsQ0FBQ29JLFNBQUosQ0FBYzNJLENBQWQsRUFBaUIsS0FBSzRELE1BQXRCLENBQVY7O0FBQ0EsVUFBSWdKLEdBQUcsS0FBSyxHQUFaLEVBQWlCO0FBQ2hCLGNBQU0sSUFBSXhMLFNBQUosQ0FBYyxlQUFlcEIsQ0FBZixHQUFtQiw2Q0FBakMsQ0FBTjtBQUNBOztBQUVELFdBQUswSixLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBLGFBQU8sSUFBUDtBQUNBO0FBQ0QsR0FoQkQ7O0FBaUJBakksR0FBQyxDQUFDc00sU0FBRixHQUFjLFVBQVMvTixDQUFULEVBQVkwSixLQUFaLEVBQW1CO0FBQ2hDLFFBQUksS0FBSzlGLE1BQUwsQ0FBWUssR0FBaEIsRUFBcUI7QUFDcEIsYUFBT2pFLENBQUMsS0FBS21CLFNBQU4sR0FBa0IsRUFBbEIsR0FBdUIsSUFBOUI7QUFDQTs7QUFFRCxRQUFJbkIsQ0FBQyxLQUFLbUIsU0FBVixFQUFxQjtBQUNwQixhQUFPLEtBQUt5QyxNQUFMLENBQVlJLFFBQVosR0FBdUJ6RCxHQUFHLENBQUNvSixjQUFKLENBQW1CLEtBQUsvRixNQUF4QixDQUF2QixHQUF5RCxFQUFoRTtBQUNBLEtBRkQsTUFFTztBQUNOLFVBQUlnSixHQUFHLEdBQUdyTSxHQUFHLENBQUNtSSxjQUFKLENBQW1CMUksQ0FBbkIsRUFBc0IsS0FBSzRELE1BQTNCLENBQVY7O0FBQ0EsVUFBSWdKLEdBQUcsS0FBSyxHQUFaLEVBQWlCO0FBQ2hCLGNBQU0sSUFBSXhMLFNBQUosQ0FBYyxlQUFlcEIsQ0FBZixHQUFtQiw2Q0FBakMsQ0FBTjtBQUNBOztBQUVELFdBQUswSixLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBLGFBQU8sSUFBUDtBQUNBO0FBQ0QsR0FoQkQ7O0FBaUJBakksR0FBQyxDQUFDd00sUUFBRixHQUFhLFVBQVNqTyxDQUFULEVBQVkwSixLQUFaLEVBQW1CO0FBQy9CLFFBQUksS0FBSzlGLE1BQUwsQ0FBWUssR0FBaEIsRUFBcUI7QUFDcEIsYUFBT2pFLENBQUMsS0FBS21CLFNBQU4sR0FBa0IsRUFBbEIsR0FBdUIsSUFBOUI7QUFDQTs7QUFFRCxRQUFJbkIsQ0FBQyxLQUFLbUIsU0FBVixFQUFxQjtBQUNwQixVQUFJLENBQUMsS0FBS3lDLE1BQUwsQ0FBWUUsUUFBakIsRUFBMkI7QUFDMUIsZUFBTyxFQUFQO0FBQ0E7O0FBRUQsVUFBSStFLENBQUMsR0FBR3RJLEdBQUcsQ0FBQ3NKLGFBQUosQ0FBa0IsS0FBS2pHLE1BQXZCLENBQVI7QUFDQSxhQUFPaUYsQ0FBQyxDQUFDSixTQUFGLENBQVksQ0FBWixFQUFlSSxDQUFDLENBQUM1SCxNQUFGLEdBQVUsQ0FBekIsQ0FBUDtBQUNBLEtBUEQsTUFPTztBQUNOLFVBQUlqQixDQUFDLENBQUNBLENBQUMsQ0FBQ2lCLE1BQUYsR0FBUyxDQUFWLENBQUQsS0FBa0IsR0FBdEIsRUFBMkI7QUFDMUJqQixTQUFDLElBQUksR0FBTDtBQUNBOztBQUVETyxTQUFHLENBQUMySSxhQUFKLENBQWtCbEosQ0FBbEIsRUFBcUIsS0FBSzRELE1BQTFCO0FBQ0EsV0FBSzhGLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsYUFBTyxJQUFQO0FBQ0E7QUFDRCxHQXJCRDs7QUFzQkFqSSxHQUFDLENBQUN5TSxRQUFGLEdBQWEsVUFBU2xPLENBQVQsRUFBWTBKLEtBQVosRUFBbUI7QUFDL0IsUUFBSXBCLEtBQUo7O0FBRUEsUUFBSXRJLENBQUMsS0FBS21CLFNBQVYsRUFBcUI7QUFDcEIsYUFBTyxLQUFLZ0QsSUFBTCxLQUFjLEtBQUt1SCxNQUFMLEVBQWQsR0FBOEIsS0FBS2lCLElBQUwsRUFBckM7QUFDQTs7QUFFRHJFLFNBQUssR0FBRy9ILEdBQUcsQ0FBQzhILEtBQUosQ0FBVXJJLENBQVYsQ0FBUjtBQUNBLFNBQUs0RCxNQUFMLENBQVlPLElBQVosR0FBbUJtRSxLQUFLLENBQUNuRSxJQUF6QjtBQUNBLFNBQUtQLE1BQUwsQ0FBWVEsS0FBWixHQUFvQmtFLEtBQUssQ0FBQ2xFLEtBQTFCO0FBQ0EsU0FBS1IsTUFBTCxDQUFZUyxRQUFaLEdBQXVCaUUsS0FBSyxDQUFDakUsUUFBN0I7QUFDQSxTQUFLcUYsS0FBTCxDQUFXLENBQUNBLEtBQVo7QUFDQSxXQUFPLElBQVA7QUFDQSxHQWJELENBNXZDNEMsQ0Eyd0M1Qzs7O0FBQ0FqSSxHQUFDLENBQUMwTSxTQUFGLEdBQWMsVUFBU25PLENBQVQsRUFBWTBKLEtBQVosRUFBbUI7QUFDaEMsUUFBSSxLQUFLOUYsTUFBTCxDQUFZSyxHQUFoQixFQUFxQjtBQUNwQixhQUFPakUsQ0FBQyxLQUFLbUIsU0FBTixHQUFrQixFQUFsQixHQUF1QixJQUE5QjtBQUNBLEtBSCtCLENBS2hDOzs7QUFDQSxRQUFJbkIsQ0FBQyxLQUFLbUIsU0FBVixFQUFxQjtBQUNwQixVQUFJLENBQUMsS0FBS3lDLE1BQUwsQ0FBWUksUUFBYixJQUF5QixLQUFLZ0osRUFBTCxDQUFRLElBQVIsQ0FBN0IsRUFBNEM7QUFDM0MsZUFBTyxFQUFQO0FBQ0EsT0FIbUIsQ0FLcEI7OztBQUNBLFVBQUloSSxHQUFHLEdBQUcsS0FBS3BCLE1BQUwsQ0FBWUksUUFBWixDQUFxQi9DLE1BQXJCLEdBQThCLEtBQUttTixNQUFMLEdBQWNuTixNQUE1QyxHQUFxRCxDQUEvRDtBQUNBLGFBQU8sS0FBSzJDLE1BQUwsQ0FBWUksUUFBWixDQUFxQnlFLFNBQXJCLENBQStCLENBQS9CLEVBQWtDekQsR0FBbEMsS0FBMEMsRUFBakQ7QUFDQSxLQVJELE1BUU87QUFDTixVQUFJbUMsQ0FBQyxHQUFHLEtBQUt2RCxNQUFMLENBQVlJLFFBQVosQ0FBcUIvQyxNQUFyQixHQUE4QixLQUFLbU4sTUFBTCxHQUFjbk4sTUFBcEQ7O0FBQ0EsVUFBSW9OLEdBQUcsR0FBRyxLQUFLekssTUFBTCxDQUFZSSxRQUFaLENBQXFCeUUsU0FBckIsQ0FBK0IsQ0FBL0IsRUFBa0N0QixDQUFsQyxDQUFWOztBQUNBLFVBQUluRixPQUFPLEdBQUcsSUFBSXNNLE1BQUosQ0FBVyxNQUFNeE0sV0FBVyxDQUFDdU0sR0FBRCxDQUE1QixDQUFkOztBQUVBLFVBQUlyTyxDQUFDLElBQUlBLENBQUMsQ0FBQzhJLE1BQUYsQ0FBUzlJLENBQUMsQ0FBQ2lCLE1BQUYsR0FBVyxDQUFwQixNQUEyQixHQUFwQyxFQUF5QztBQUN4Q2pCLFNBQUMsSUFBSSxHQUFMO0FBQ0E7O0FBRUQsVUFBSUEsQ0FBSixFQUFPO0FBQ05PLFdBQUcsQ0FBQ3NMLG1CQUFKLENBQXdCN0wsQ0FBeEI7QUFDQTs7QUFFRCxXQUFLNEQsTUFBTCxDQUFZSSxRQUFaLEdBQXVCLEtBQUtKLE1BQUwsQ0FBWUksUUFBWixDQUFxQmhDLE9BQXJCLENBQTZCQSxPQUE3QixFQUFzQ2hDLENBQXRDLENBQXZCO0FBQ0EsV0FBSzBKLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsYUFBTyxJQUFQO0FBQ0E7QUFDRCxHQS9CRDs7QUFnQ0FqSSxHQUFDLENBQUMyTSxNQUFGLEdBQVcsVUFBU3BPLENBQVQsRUFBWTBKLEtBQVosRUFBbUI7QUFDN0IsUUFBSSxLQUFLOUYsTUFBTCxDQUFZSyxHQUFoQixFQUFxQjtBQUNwQixhQUFPakUsQ0FBQyxLQUFLbUIsU0FBTixHQUFrQixFQUFsQixHQUF1QixJQUE5QjtBQUNBOztBQUVELFFBQUksT0FBT25CLENBQVAsS0FBYSxTQUFqQixFQUE0QjtBQUMzQjBKLFdBQUssR0FBRzFKLENBQVI7QUFDQUEsT0FBQyxHQUFHbUIsU0FBSjtBQUNBLEtBUjRCLENBVTdCOzs7QUFDQSxRQUFJbkIsQ0FBQyxLQUFLbUIsU0FBVixFQUFxQjtBQUNwQixVQUFJLENBQUMsS0FBS3lDLE1BQUwsQ0FBWUksUUFBYixJQUF5QixLQUFLZ0osRUFBTCxDQUFRLElBQVIsQ0FBN0IsRUFBNEM7QUFDM0MsZUFBTyxFQUFQO0FBQ0EsT0FIbUIsQ0FLcEI7OztBQUNBLFVBQUluRSxDQUFDLEdBQUcsS0FBS2pGLE1BQUwsQ0FBWUksUUFBWixDQUFxQmIsS0FBckIsQ0FBMkIsS0FBM0IsQ0FBUjs7QUFDQSxVQUFJMEYsQ0FBQyxJQUFJQSxDQUFDLENBQUM1SCxNQUFGLEdBQVcsQ0FBcEIsRUFBdUI7QUFDdEIsZUFBTyxLQUFLMkMsTUFBTCxDQUFZSSxRQUFuQjtBQUNBLE9BVG1CLENBV3BCOzs7QUFDQSxVQUFJZ0IsR0FBRyxHQUFHLEtBQUtwQixNQUFMLENBQVlJLFFBQVosQ0FBcUIvQyxNQUFyQixHQUE4QixLQUFLc04sR0FBTCxDQUFTN0UsS0FBVCxFQUFnQnpJLE1BQTlDLEdBQXVELENBQWpFO0FBQ0ErRCxTQUFHLEdBQUcsS0FBS3BCLE1BQUwsQ0FBWUksUUFBWixDQUFxQm1GLFdBQXJCLENBQWlDLEdBQWpDLEVBQXNDbkUsR0FBRyxHQUFFLENBQTNDLElBQWdELENBQXREO0FBQ0EsYUFBTyxLQUFLcEIsTUFBTCxDQUFZSSxRQUFaLENBQXFCeUUsU0FBckIsQ0FBK0J6RCxHQUEvQixLQUF1QyxFQUE5QztBQUNBLEtBZkQsTUFlTztBQUNOLFVBQUksQ0FBQ2hGLENBQUwsRUFBUTtBQUNQLGNBQU0sSUFBSW9CLFNBQUosQ0FBYyx5QkFBZCxDQUFOO0FBQ0E7O0FBRURiLFNBQUcsQ0FBQ3NMLG1CQUFKLENBQXdCN0wsQ0FBeEI7O0FBRUEsVUFBSSxDQUFDLEtBQUs0RCxNQUFMLENBQVlJLFFBQWIsSUFBeUIsS0FBS2dKLEVBQUwsQ0FBUSxJQUFSLENBQTdCLEVBQTRDO0FBQzNDLGFBQUtwSixNQUFMLENBQVlJLFFBQVosR0FBdUJoRSxDQUF2QjtBQUNBLE9BRkQsTUFFTztBQUNOLFlBQUlnQyxPQUFPLEdBQUcsSUFBSXNNLE1BQUosQ0FBV3hNLFdBQVcsQ0FBQyxLQUFLc00sTUFBTCxFQUFELENBQVgsR0FBNkIsR0FBeEMsQ0FBZDtBQUNBLGFBQUt4SyxNQUFMLENBQVlJLFFBQVosR0FBdUIsS0FBS0osTUFBTCxDQUFZSSxRQUFaLENBQXFCaEMsT0FBckIsQ0FBNkJBLE9BQTdCLEVBQXNDaEMsQ0FBdEMsQ0FBdkI7QUFDQTs7QUFFRCxXQUFLMEosS0FBTCxDQUFXLENBQUNBLEtBQVo7QUFDQSxhQUFPLElBQVA7QUFDQTtBQUNELEdBM0NEOztBQTRDQWpJLEdBQUMsQ0FBQzhNLEdBQUYsR0FBUSxVQUFTdk8sQ0FBVCxFQUFZMEosS0FBWixFQUFtQjtBQUMxQixRQUFJLEtBQUs5RixNQUFMLENBQVlLLEdBQWhCLEVBQXFCO0FBQ3BCLGFBQU9qRSxDQUFDLEtBQUttQixTQUFOLEdBQWtCLEVBQWxCLEdBQXVCLElBQTlCO0FBQ0E7O0FBRUQsUUFBSSxPQUFPbkIsQ0FBUCxLQUFhLFNBQWpCLEVBQTRCO0FBQzNCMEosV0FBSyxHQUFHMUosQ0FBUjtBQUNBQSxPQUFDLEdBQUdtQixTQUFKO0FBQ0EsS0FSeUIsQ0FVMUI7OztBQUNBLFFBQUluQixDQUFDLEtBQUttQixTQUFWLEVBQXFCO0FBQ3BCLFVBQUksQ0FBQyxLQUFLeUMsTUFBTCxDQUFZSSxRQUFiLElBQXlCLEtBQUtnSixFQUFMLENBQVEsSUFBUixDQUE3QixFQUE0QztBQUMzQyxlQUFPLEVBQVA7QUFDQTs7QUFFRCxVQUFJekUsR0FBRyxHQUFHLEtBQUszRSxNQUFMLENBQVlJLFFBQVosQ0FBcUJtRixXQUFyQixDQUFpQyxHQUFqQyxDQUFWOztBQUNBLFVBQUlvRixHQUFHLEdBQUcsS0FBSzNLLE1BQUwsQ0FBWUksUUFBWixDQUFxQnlFLFNBQXJCLENBQStCRixHQUFHLEdBQUcsQ0FBckMsQ0FBVjs7QUFFQSxVQUFJbUIsS0FBSyxLQUFLLElBQVYsSUFBa0IvSSxHQUFsQixJQUF5QkEsR0FBRyxDQUFDc0MsSUFBSixDQUFTc0wsR0FBRyxDQUFDekksV0FBSixFQUFULENBQTdCLEVBQTBEO0FBQ3pELGVBQU9uRixHQUFHLENBQUM2TixHQUFKLENBQVEsS0FBSzVLLE1BQUwsQ0FBWUksUUFBcEIsS0FBaUN1SyxHQUF4QztBQUNBOztBQUVELGFBQU9BLEdBQVA7QUFDQSxLQWJELE1BYU87QUFDTixVQUFJdk0sT0FBSjs7QUFFQSxVQUFJLENBQUNoQyxDQUFMLEVBQVE7QUFDUCxjQUFNLElBQUlvQixTQUFKLENBQWMsc0JBQWQsQ0FBTjtBQUNBLE9BRkQsTUFFTyxJQUFJcEIsQ0FBQyxDQUFDbUQsS0FBRixDQUFRLGVBQVIsQ0FBSixFQUE4QjtBQUNwQyxZQUFJeEMsR0FBRyxJQUFJQSxHQUFHLENBQUNxTSxFQUFKLENBQU9oTixDQUFQLENBQVgsRUFBc0I7QUFDckJnQyxpQkFBTyxHQUFHLElBQUlzTSxNQUFKLENBQVd4TSxXQUFXLENBQUMsS0FBS3lNLEdBQUwsRUFBRCxDQUFYLEdBQTBCLEdBQXJDLENBQVY7QUFDQSxlQUFLM0ssTUFBTCxDQUFZSSxRQUFaLEdBQXVCLEtBQUtKLE1BQUwsQ0FBWUksUUFBWixDQUFxQmhDLE9BQXJCLENBQTZCQSxPQUE3QixFQUFzQ2hDLENBQXRDLENBQXZCO0FBQ0EsU0FIRCxNQUdPO0FBQ04sZ0JBQU0sSUFBSW9CLFNBQUosQ0FBYyxVQUFVcEIsQ0FBVixHQUFjLDJDQUE1QixDQUFOO0FBQ0E7QUFDRCxPQVBNLE1BT0EsSUFBSSxDQUFDLEtBQUs0RCxNQUFMLENBQVlJLFFBQWIsSUFBeUIsS0FBS2dKLEVBQUwsQ0FBUSxJQUFSLENBQTdCLEVBQTRDO0FBQ2xELGNBQU0sSUFBSXlCLGNBQUosQ0FBbUIsbUNBQW5CLENBQU47QUFDQSxPQUZNLE1BRUE7QUFDTnpNLGVBQU8sR0FBRyxJQUFJc00sTUFBSixDQUFXeE0sV0FBVyxDQUFDLEtBQUt5TSxHQUFMLEVBQUQsQ0FBWCxHQUEwQixHQUFyQyxDQUFWO0FBQ0EsYUFBSzNLLE1BQUwsQ0FBWUksUUFBWixHQUF1QixLQUFLSixNQUFMLENBQVlJLFFBQVosQ0FBcUJoQyxPQUFyQixDQUE2QkEsT0FBN0IsRUFBc0NoQyxDQUF0QyxDQUF2QjtBQUNBOztBQUVELFdBQUswSixLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBLGFBQU8sSUFBUDtBQUNBO0FBQ0QsR0E5Q0Q7O0FBK0NBakksR0FBQyxDQUFDaU4sU0FBRixHQUFjLFVBQVMxTyxDQUFULEVBQVkwSixLQUFaLEVBQW1CO0FBQ2hDLFFBQUksS0FBSzlGLE1BQUwsQ0FBWUssR0FBaEIsRUFBcUI7QUFDcEIsYUFBT2pFLENBQUMsS0FBS21CLFNBQU4sR0FBa0IsRUFBbEIsR0FBdUIsSUFBOUI7QUFDQTs7QUFFRCxRQUFJbkIsQ0FBQyxLQUFLbUIsU0FBTixJQUFtQm5CLENBQUMsS0FBSyxJQUE3QixFQUFtQztBQUNsQyxVQUFJLENBQUMsS0FBSzRELE1BQUwsQ0FBWU8sSUFBYixJQUFxQixDQUFDLEtBQUtQLE1BQUwsQ0FBWUksUUFBdEMsRUFBZ0Q7QUFDL0MsZUFBTyxFQUFQO0FBQ0E7O0FBRUQsVUFBSSxLQUFLSixNQUFMLENBQVlPLElBQVosS0FBcUIsR0FBekIsRUFBOEI7QUFDN0IsZUFBTyxHQUFQO0FBQ0E7O0FBRUQsVUFBSWEsR0FBRyxHQUFHLEtBQUtwQixNQUFMLENBQVlPLElBQVosQ0FBaUJsRCxNQUFqQixHQUEwQixLQUFLME4sUUFBTCxHQUFnQjFOLE1BQTFDLEdBQW1ELENBQTdEO0FBQ0EsVUFBSTJMLEdBQUcsR0FBRyxLQUFLaEosTUFBTCxDQUFZTyxJQUFaLENBQWlCc0UsU0FBakIsQ0FBMkIsQ0FBM0IsRUFBOEJ6RCxHQUE5QixNQUF1QyxLQUFLcEIsTUFBTCxDQUFZSSxRQUFaLEdBQXVCLEdBQXZCLEdBQTZCLEVBQXBFLENBQVY7QUFFQSxhQUFPaEUsQ0FBQyxHQUFHTyxHQUFHLENBQUN5SCxVQUFKLENBQWU0RSxHQUFmLENBQUgsR0FBeUJBLEdBQWpDO0FBRUEsS0FkRCxNQWNPO0FBQ04sVUFBSXpGLENBQUMsR0FBRyxLQUFLdkQsTUFBTCxDQUFZTyxJQUFaLENBQWlCbEQsTUFBakIsR0FBMEIsS0FBSzBOLFFBQUwsR0FBZ0IxTixNQUFsRDs7QUFDQSxVQUFJeU4sU0FBUyxHQUFHLEtBQUs5SyxNQUFMLENBQVlPLElBQVosQ0FBaUJzRSxTQUFqQixDQUEyQixDQUEzQixFQUE4QnRCLENBQTlCLENBQWhCOztBQUNBLFVBQUluRixPQUFPLEdBQUcsSUFBSXNNLE1BQUosQ0FBVyxNQUFNeE0sV0FBVyxDQUFDNE0sU0FBRCxDQUE1QixDQUFkLENBSE0sQ0FLTjs7QUFDQSxVQUFJLENBQUMsS0FBSzFCLEVBQUwsQ0FBUSxVQUFSLENBQUwsRUFBMEI7QUFDekIsWUFBSSxDQUFDaE4sQ0FBTCxFQUFRO0FBQ1BBLFdBQUMsR0FBRyxHQUFKO0FBQ0E7O0FBRUQsWUFBSUEsQ0FBQyxDQUFDOEksTUFBRixDQUFTLENBQVQsTUFBZ0IsR0FBcEIsRUFBeUI7QUFDeEI5SSxXQUFDLEdBQUcsTUFBTUEsQ0FBVjtBQUNBO0FBQ0QsT0FkSyxDQWdCTjs7O0FBQ0EsVUFBSUEsQ0FBQyxJQUFJQSxDQUFDLENBQUM4SSxNQUFGLENBQVM5SSxDQUFDLENBQUNpQixNQUFGLEdBQVcsQ0FBcEIsTUFBMkIsR0FBcEMsRUFBeUM7QUFDeENqQixTQUFDLElBQUksR0FBTDtBQUNBOztBQUVEQSxPQUFDLEdBQUdPLEdBQUcsQ0FBQzJILFVBQUosQ0FBZWxJLENBQWYsQ0FBSjtBQUNBLFdBQUs0RCxNQUFMLENBQVlPLElBQVosR0FBbUIsS0FBS1AsTUFBTCxDQUFZTyxJQUFaLENBQWlCbkMsT0FBakIsQ0FBeUJBLE9BQXpCLEVBQWtDaEMsQ0FBbEMsQ0FBbkI7QUFDQSxXQUFLMEosS0FBTCxDQUFXLENBQUNBLEtBQVo7QUFDQSxhQUFPLElBQVA7QUFDQTtBQUNELEdBN0NEOztBQThDQWpJLEdBQUMsQ0FBQ2tOLFFBQUYsR0FBYSxVQUFTM08sQ0FBVCxFQUFZMEosS0FBWixFQUFtQjtBQUMvQixRQUFJLEtBQUs5RixNQUFMLENBQVlLLEdBQWhCLEVBQXFCO0FBQ3BCLGFBQU9qRSxDQUFDLEtBQUttQixTQUFOLEdBQWtCLEVBQWxCLEdBQXVCLElBQTlCO0FBQ0E7O0FBRUQsUUFBSW5CLENBQUMsS0FBS21CLFNBQU4sSUFBbUJuQixDQUFDLEtBQUssSUFBN0IsRUFBbUM7QUFDbEMsVUFBSSxDQUFDLEtBQUs0RCxNQUFMLENBQVlPLElBQWIsSUFBcUIsS0FBS1AsTUFBTCxDQUFZTyxJQUFaLEtBQXFCLEdBQTlDLEVBQW1EO0FBQ2xELGVBQU8sRUFBUDtBQUNBOztBQUVELFVBQUlvRSxHQUFHLEdBQUcsS0FBSzNFLE1BQUwsQ0FBWU8sSUFBWixDQUFpQmdGLFdBQWpCLENBQTZCLEdBQTdCLENBQVY7O0FBQ0EsVUFBSXlELEdBQUcsR0FBRyxLQUFLaEosTUFBTCxDQUFZTyxJQUFaLENBQWlCc0UsU0FBakIsQ0FBMkJGLEdBQUcsR0FBQyxDQUEvQixDQUFWOztBQUVBLGFBQU92SSxDQUFDLEdBQUdPLEdBQUcsQ0FBQ3FPLGlCQUFKLENBQXNCaEMsR0FBdEIsQ0FBSCxHQUFnQ0EsR0FBeEM7QUFDQSxLQVRELE1BU087QUFDTixVQUFJaUMsZ0JBQWdCLEdBQUcsS0FBdkI7O0FBRUEsVUFBSTdPLENBQUMsQ0FBQzhJLE1BQUYsQ0FBUyxDQUFULE1BQWdCLEdBQXBCLEVBQXlCO0FBQ3hCOUksU0FBQyxHQUFHQSxDQUFDLENBQUN5SSxTQUFGLENBQVksQ0FBWixDQUFKO0FBQ0E7O0FBRUQsVUFBSXpJLENBQUMsQ0FBQ21ELEtBQUYsQ0FBUSxPQUFSLENBQUosRUFBc0I7QUFDckIwTCx3QkFBZ0IsR0FBRyxJQUFuQjtBQUNBOztBQUVELFVBQUk3TSxPQUFPLEdBQUcsSUFBSXNNLE1BQUosQ0FBV3hNLFdBQVcsQ0FBQyxLQUFLNk0sUUFBTCxFQUFELENBQVgsR0FBK0IsR0FBMUMsQ0FBZDtBQUNBM08sT0FBQyxHQUFHTyxHQUFHLENBQUMySCxVQUFKLENBQWVsSSxDQUFmLENBQUo7QUFDQSxXQUFLNEQsTUFBTCxDQUFZTyxJQUFaLEdBQW1CLEtBQUtQLE1BQUwsQ0FBWU8sSUFBWixDQUFpQm5DLE9BQWpCLENBQXlCQSxPQUF6QixFQUFrQ2hDLENBQWxDLENBQW5COztBQUVBLFVBQUk2TyxnQkFBSixFQUFzQjtBQUNyQixhQUFLQyxhQUFMLENBQW1CcEYsS0FBbkI7QUFDQSxPQUZELE1BRU87QUFDTixhQUFLQSxLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBOztBQUVELGFBQU8sSUFBUDtBQUNBO0FBQ0QsR0FyQ0Q7O0FBc0NBakksR0FBQyxDQUFDc04sTUFBRixHQUFXLFVBQVMvTyxDQUFULEVBQVkwSixLQUFaLEVBQW1CO0FBQzdCLFFBQUksS0FBSzlGLE1BQUwsQ0FBWUssR0FBaEIsRUFBcUI7QUFDcEIsYUFBT2pFLENBQUMsS0FBS21CLFNBQU4sR0FBa0IsRUFBbEIsR0FBdUIsSUFBOUI7QUFDQTs7QUFFRCxRQUFJbkIsQ0FBQyxLQUFLbUIsU0FBTixJQUFtQm5CLENBQUMsS0FBSyxJQUE3QixFQUFtQztBQUNsQyxVQUFJLENBQUMsS0FBSzRELE1BQUwsQ0FBWU8sSUFBYixJQUFxQixLQUFLUCxNQUFMLENBQVlPLElBQVosS0FBcUIsR0FBOUMsRUFBbUQ7QUFDbEQsZUFBTyxFQUFQO0FBQ0E7O0FBRUQsVUFBSXdLLFFBQVEsR0FBRyxLQUFLQSxRQUFMLEVBQWY7QUFDQSxVQUFJcEcsR0FBRyxHQUFHb0csUUFBUSxDQUFDeEYsV0FBVCxDQUFxQixHQUFyQixDQUFWO0FBQ0EsVUFBSTZGLENBQUosRUFBT3BDLEdBQVA7O0FBRUEsVUFBSXJFLEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDZixlQUFPLEVBQVA7QUFDQSxPQVhpQyxDQWFsQzs7O0FBQ0F5RyxPQUFDLEdBQUdMLFFBQVEsQ0FBQ2xHLFNBQVQsQ0FBbUJGLEdBQUcsR0FBQyxDQUF2QixDQUFKO0FBQ0FxRSxTQUFHLEdBQUksZUFBRCxDQUFrQjlKLElBQWxCLENBQXVCa00sQ0FBdkIsSUFBNEJBLENBQTVCLEdBQWdDLEVBQXRDO0FBQ0EsYUFBT2hQLENBQUMsR0FBR08sR0FBRyxDQUFDcU8saUJBQUosQ0FBc0JoQyxHQUF0QixDQUFILEdBQWdDQSxHQUF4QztBQUNBLEtBakJELE1BaUJPO0FBQ04sVUFBSTVNLENBQUMsQ0FBQzhJLE1BQUYsQ0FBUyxDQUFULE1BQWdCLEdBQXBCLEVBQXlCO0FBQ3hCOUksU0FBQyxHQUFHQSxDQUFDLENBQUN5SSxTQUFGLENBQVksQ0FBWixDQUFKO0FBQ0E7O0FBRUQsVUFBSXNHLE1BQU0sR0FBRyxLQUFLQSxNQUFMLEVBQWI7QUFDQSxVQUFJL00sT0FBSjs7QUFFQSxVQUFJLENBQUMrTSxNQUFMLEVBQWE7QUFDWixZQUFJLENBQUMvTyxDQUFMLEVBQVE7QUFDUCxpQkFBTyxJQUFQO0FBQ0E7O0FBRUQsYUFBSzRELE1BQUwsQ0FBWU8sSUFBWixJQUFvQixNQUFNNUQsR0FBRyxDQUFDMkgsVUFBSixDQUFlbEksQ0FBZixDQUExQjtBQUNBLE9BTkQsTUFNTyxJQUFJLENBQUNBLENBQUwsRUFBUTtBQUNkZ0MsZUFBTyxHQUFHLElBQUlzTSxNQUFKLENBQVd4TSxXQUFXLENBQUMsTUFBTWlOLE1BQVAsQ0FBWCxHQUE0QixHQUF2QyxDQUFWO0FBQ0EsT0FGTSxNQUVBO0FBQ04vTSxlQUFPLEdBQUcsSUFBSXNNLE1BQUosQ0FBV3hNLFdBQVcsQ0FBQ2lOLE1BQUQsQ0FBWCxHQUFzQixHQUFqQyxDQUFWO0FBQ0E7O0FBRUQsVUFBSS9NLE9BQUosRUFBYTtBQUNaaEMsU0FBQyxHQUFHTyxHQUFHLENBQUMySCxVQUFKLENBQWVsSSxDQUFmLENBQUo7QUFDQSxhQUFLNEQsTUFBTCxDQUFZTyxJQUFaLEdBQW1CLEtBQUtQLE1BQUwsQ0FBWU8sSUFBWixDQUFpQm5DLE9BQWpCLENBQXlCQSxPQUF6QixFQUFrQ2hDLENBQWxDLENBQW5CO0FBQ0E7O0FBRUQsV0FBSzBKLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsYUFBTyxJQUFQO0FBQ0E7QUFDRCxHQWxERDs7QUFtREFqSSxHQUFDLENBQUN3TixPQUFGLEdBQVksVUFBU0EsT0FBVCxFQUFrQmpQLENBQWxCLEVBQXFCMEosS0FBckIsRUFBNEI7QUFDdkMsUUFBSXdGLFNBQVMsR0FBRyxLQUFLdEwsTUFBTCxDQUFZSyxHQUFaLEdBQWtCLEdBQWxCLEdBQXdCLEdBQXhDO0FBQ0EsUUFBSUUsSUFBSSxHQUFHLEtBQUtBLElBQUwsRUFBWDtBQUNBLFFBQUlnTCxRQUFRLEdBQUdoTCxJQUFJLENBQUNzRSxTQUFMLENBQWUsQ0FBZixFQUFrQixDQUFsQixNQUF5QixHQUF4QztBQUNBLFFBQUlaLFFBQVEsR0FBRzFELElBQUksQ0FBQzJELEtBQUwsQ0FBV29ILFNBQVgsQ0FBZjs7QUFFQSxRQUFJRCxPQUFPLEtBQUs5TixTQUFaLElBQXlCLE9BQU84TixPQUFQLEtBQW1CLFFBQWhELEVBQTBEO0FBQ3pEdkYsV0FBSyxHQUFHMUosQ0FBUjtBQUNBQSxPQUFDLEdBQUdpUCxPQUFKO0FBQ0FBLGFBQU8sR0FBRzlOLFNBQVY7QUFDQTs7QUFFRCxRQUFJOE4sT0FBTyxLQUFLOU4sU0FBWixJQUF5QixPQUFPOE4sT0FBUCxLQUFtQixRQUFoRCxFQUEwRDtBQUN6RCxZQUFNLElBQUlHLEtBQUosQ0FBVSxrQkFBa0JILE9BQWxCLEdBQTRCLDRCQUF0QyxDQUFOO0FBQ0E7O0FBRUQsUUFBSUUsUUFBSixFQUFjO0FBQ2J0SCxjQUFRLENBQUN1QixLQUFUO0FBQ0E7O0FBRUQsUUFBSTZGLE9BQU8sR0FBRyxDQUFkLEVBQWlCO0FBQ2hCO0FBQ0FBLGFBQU8sR0FBR3RFLElBQUksQ0FBQ2MsR0FBTCxDQUFTNUQsUUFBUSxDQUFDNUcsTUFBVCxHQUFrQmdPLE9BQTNCLEVBQW9DLENBQXBDLENBQVY7QUFDQTs7QUFFRCxRQUFJalAsQ0FBQyxLQUFLbUIsU0FBVixFQUFxQjtBQUNwQjtBQUNBLGFBQU84TixPQUFPLEtBQUs5TixTQUFaLEdBQ0owRyxRQURJLEdBRUpBLFFBQVEsQ0FBQ29ILE9BQUQsQ0FGWDtBQUdBO0FBQ0EsS0FORCxNQU1PLElBQUlBLE9BQU8sS0FBSyxJQUFaLElBQW9CcEgsUUFBUSxDQUFDb0gsT0FBRCxDQUFSLEtBQXNCOU4sU0FBOUMsRUFBeUQ7QUFDL0QsVUFBSW9CLE9BQU8sQ0FBQ3ZDLENBQUQsQ0FBWCxFQUFnQjtBQUNmNkgsZ0JBQVEsR0FBRyxFQUFYLENBRGUsQ0FFZjs7QUFDQSxhQUFLLElBQUlqRixDQUFDLEdBQUMsQ0FBTixFQUFTWSxDQUFDLEdBQUN4RCxDQUFDLENBQUNpQixNQUFsQixFQUEwQjJCLENBQUMsR0FBR1ksQ0FBOUIsRUFBaUNaLENBQUMsRUFBbEMsRUFBc0M7QUFDckMsY0FBSSxDQUFDNUMsQ0FBQyxDQUFDNEMsQ0FBRCxDQUFELENBQUszQixNQUFOLEtBQWlCLENBQUM0RyxRQUFRLENBQUM1RyxNQUFWLElBQW9CLENBQUM0RyxRQUFRLENBQUNBLFFBQVEsQ0FBQzVHLE1BQVQsR0FBaUIsQ0FBbEIsQ0FBUixDQUE2QkEsTUFBbkUsQ0FBSixFQUFnRjtBQUMvRTtBQUNBOztBQUVELGNBQUk0RyxRQUFRLENBQUM1RyxNQUFULElBQW1CLENBQUM0RyxRQUFRLENBQUNBLFFBQVEsQ0FBQzVHLE1BQVQsR0FBaUIsQ0FBbEIsQ0FBUixDQUE2QkEsTUFBckQsRUFBNkQ7QUFDNUQ0RyxvQkFBUSxDQUFDd0gsR0FBVDtBQUNBOztBQUVEeEgsa0JBQVEsQ0FBQzRCLElBQVQsQ0FBY2hHLFdBQVcsQ0FBQ3pELENBQUMsQ0FBQzRDLENBQUQsQ0FBRixDQUF6QjtBQUNBO0FBQ0QsT0FkRCxNQWNPLElBQUk1QyxDQUFDLElBQUksT0FBT0EsQ0FBUCxLQUFhLFFBQXRCLEVBQWdDO0FBQ3RDQSxTQUFDLEdBQUd5RCxXQUFXLENBQUN6RCxDQUFELENBQWY7O0FBQ0EsWUFBSTZILFFBQVEsQ0FBQ0EsUUFBUSxDQUFDNUcsTUFBVCxHQUFpQixDQUFsQixDQUFSLEtBQWlDLEVBQXJDLEVBQXlDO0FBQ3hDO0FBQ0E7QUFDQTRHLGtCQUFRLENBQUNBLFFBQVEsQ0FBQzVHLE1BQVQsR0FBaUIsQ0FBbEIsQ0FBUixHQUErQmpCLENBQS9CO0FBQ0EsU0FKRCxNQUlPO0FBQ042SCxrQkFBUSxDQUFDNEIsSUFBVCxDQUFjekosQ0FBZDtBQUNBO0FBQ0Q7QUFDRCxLQXpCTSxNQXlCQTtBQUNOLFVBQUlBLENBQUosRUFBTztBQUNONkgsZ0JBQVEsQ0FBQ29ILE9BQUQsQ0FBUixHQUFvQnhMLFdBQVcsQ0FBQ3pELENBQUQsQ0FBL0I7QUFDQSxPQUZELE1BRU87QUFDTjZILGdCQUFRLENBQUM5RSxNQUFULENBQWdCa00sT0FBaEIsRUFBeUIsQ0FBekI7QUFDQTtBQUNEOztBQUVELFFBQUlFLFFBQUosRUFBYztBQUNidEgsY0FBUSxDQUFDeUgsT0FBVCxDQUFpQixFQUFqQjtBQUNBOztBQUVELFdBQU8sS0FBS25MLElBQUwsQ0FBVTBELFFBQVEsQ0FBQ0UsSUFBVCxDQUFjbUgsU0FBZCxDQUFWLEVBQW9DeEYsS0FBcEMsQ0FBUDtBQUNBLEdBckVEOztBQXNFQWpJLEdBQUMsQ0FBQzhOLFlBQUYsR0FBaUIsVUFBU04sT0FBVCxFQUFrQmpQLENBQWxCLEVBQXFCMEosS0FBckIsRUFBNEI7QUFDNUMsUUFBSTdCLFFBQUosRUFBY2pGLENBQWQsRUFBaUJZLENBQWpCOztBQUVBLFFBQUksT0FBT3lMLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDaEN2RixXQUFLLEdBQUcxSixDQUFSO0FBQ0FBLE9BQUMsR0FBR2lQLE9BQUo7QUFDQUEsYUFBTyxHQUFHOU4sU0FBVjtBQUNBOztBQUVELFFBQUluQixDQUFDLEtBQUttQixTQUFWLEVBQXFCO0FBQ3BCMEcsY0FBUSxHQUFHLEtBQUtvSCxPQUFMLENBQWFBLE9BQWIsRUFBc0JqUCxDQUF0QixFQUF5QjBKLEtBQXpCLENBQVg7O0FBQ0EsVUFBSSxDQUFDbkgsT0FBTyxDQUFDc0YsUUFBRCxDQUFaLEVBQXdCO0FBQ3ZCQSxnQkFBUSxHQUFHQSxRQUFRLEtBQUsxRyxTQUFiLEdBQXlCWixHQUFHLENBQUM4RixNQUFKLENBQVd3QixRQUFYLENBQXpCLEdBQWdEMUcsU0FBM0Q7QUFDQSxPQUZELE1BRU87QUFDTixhQUFLeUIsQ0FBQyxHQUFHLENBQUosRUFBT1ksQ0FBQyxHQUFHcUUsUUFBUSxDQUFDNUcsTUFBekIsRUFBaUMyQixDQUFDLEdBQUdZLENBQXJDLEVBQXdDWixDQUFDLEVBQXpDLEVBQTZDO0FBQzVDaUYsa0JBQVEsQ0FBQ2pGLENBQUQsQ0FBUixHQUFjckMsR0FBRyxDQUFDOEYsTUFBSixDQUFXd0IsUUFBUSxDQUFDakYsQ0FBRCxDQUFuQixDQUFkO0FBQ0E7QUFDRDs7QUFFRCxhQUFPaUYsUUFBUDtBQUNBOztBQUVELFFBQUksQ0FBQ3RGLE9BQU8sQ0FBQ3ZDLENBQUQsQ0FBWixFQUFpQjtBQUNoQkEsT0FBQyxHQUFJLE9BQU9BLENBQVAsS0FBYSxRQUFiLElBQXlCQSxDQUFDLFlBQVltQyxNQUF2QyxHQUFpRDVCLEdBQUcsQ0FBQzZGLE1BQUosQ0FBV3BHLENBQVgsQ0FBakQsR0FBaUVBLENBQXJFO0FBQ0EsS0FGRCxNQUVPO0FBQ04sV0FBSzRDLENBQUMsR0FBRyxDQUFKLEVBQU9ZLENBQUMsR0FBR3hELENBQUMsQ0FBQ2lCLE1BQWxCLEVBQTBCMkIsQ0FBQyxHQUFHWSxDQUE5QixFQUFpQ1osQ0FBQyxFQUFsQyxFQUFzQztBQUNyQzVDLFNBQUMsQ0FBQzRDLENBQUQsQ0FBRCxHQUFPckMsR0FBRyxDQUFDNkYsTUFBSixDQUFXcEcsQ0FBQyxDQUFDNEMsQ0FBRCxDQUFaLENBQVA7QUFDQTtBQUNEOztBQUVELFdBQU8sS0FBS3FNLE9BQUwsQ0FBYUEsT0FBYixFQUFzQmpQLENBQXRCLEVBQXlCMEosS0FBekIsQ0FBUDtBQUNBLEdBL0JELENBcGxENEMsQ0FxbkQ1Qzs7O0FBQ0EsTUFBSThGLENBQUMsR0FBRy9OLENBQUMsQ0FBQzJDLEtBQVY7O0FBQ0EzQyxHQUFDLENBQUMyQyxLQUFGLEdBQVUsVUFBU3BFLENBQVQsRUFBWTBKLEtBQVosRUFBbUI7QUFDNUIsUUFBSTFKLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2YsYUFBT08sR0FBRyxDQUFDOEksVUFBSixDQUFlLEtBQUt6RixNQUFMLENBQVlRLEtBQTNCLEVBQWtDLEtBQUtSLE1BQUwsQ0FBWVcsZ0JBQTlDLENBQVA7QUFDQSxLQUZELE1BRU8sSUFBSSxPQUFPdkUsQ0FBUCxLQUFhLFVBQWpCLEVBQTZCO0FBQ25DLFVBQUkwQyxJQUFJLEdBQUduQyxHQUFHLENBQUM4SSxVQUFKLENBQWUsS0FBS3pGLE1BQUwsQ0FBWVEsS0FBM0IsRUFBa0MsS0FBS1IsTUFBTCxDQUFZVyxnQkFBOUMsQ0FBWDtBQUNBLFVBQUlxSCxNQUFNLEdBQUc1TCxDQUFDLENBQUNxQyxJQUFGLENBQU8sSUFBUCxFQUFhSyxJQUFiLENBQWI7QUFDQSxXQUFLa0IsTUFBTCxDQUFZUSxLQUFaLEdBQW9CN0QsR0FBRyxDQUFDdUosVUFBSixDQUFlOEIsTUFBTSxJQUFJbEosSUFBekIsRUFBK0IsS0FBS2tCLE1BQUwsQ0FBWVUsd0JBQTNDLEVBQXFFLEtBQUtWLE1BQUwsQ0FBWVcsZ0JBQWpGLENBQXBCO0FBQ0EsV0FBS21GLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsYUFBTyxJQUFQO0FBQ0EsS0FOTSxNQU1BLElBQUkxSixDQUFDLEtBQUttQixTQUFOLElBQW1CLE9BQU9uQixDQUFQLEtBQWEsUUFBcEMsRUFBOEM7QUFDcEQsV0FBSzRELE1BQUwsQ0FBWVEsS0FBWixHQUFvQjdELEdBQUcsQ0FBQ3VKLFVBQUosQ0FBZTlKLENBQWYsRUFBa0IsS0FBSzRELE1BQUwsQ0FBWVUsd0JBQTlCLEVBQXdELEtBQUtWLE1BQUwsQ0FBWVcsZ0JBQXBFLENBQXBCO0FBQ0EsV0FBS21GLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsYUFBTyxJQUFQO0FBQ0EsS0FKTSxNQUlBO0FBQ04sYUFBTzhGLENBQUMsQ0FBQ25OLElBQUYsQ0FBTyxJQUFQLEVBQWFyQyxDQUFiLEVBQWdCMEosS0FBaEIsQ0FBUDtBQUNBO0FBQ0QsR0FoQkQ7O0FBaUJBakksR0FBQyxDQUFDZ08sUUFBRixHQUFhLFVBQVNqRyxJQUFULEVBQWV0SCxLQUFmLEVBQXNCd0gsS0FBdEIsRUFBNkI7QUFDekMsUUFBSWhILElBQUksR0FBR25DLEdBQUcsQ0FBQzhJLFVBQUosQ0FBZSxLQUFLekYsTUFBTCxDQUFZUSxLQUEzQixFQUFrQyxLQUFLUixNQUFMLENBQVlXLGdCQUE5QyxDQUFYOztBQUVBLFFBQUksT0FBT2lGLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEJBLElBQUksWUFBWXJILE1BQWhELEVBQXdEO0FBQ3ZETyxVQUFJLENBQUM4RyxJQUFELENBQUosR0FBYXRILEtBQUssS0FBS2YsU0FBVixHQUFzQmUsS0FBdEIsR0FBOEIsSUFBM0M7QUFDQSxLQUZELE1BRU8sSUFBSSxPQUFPc0gsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUNwQyxXQUFLLElBQUlRLEdBQVQsSUFBZ0JSLElBQWhCLEVBQXNCO0FBQ3JCLFlBQUk3SCxNQUFNLENBQUNVLElBQVAsQ0FBWW1ILElBQVosRUFBa0JRLEdBQWxCLENBQUosRUFBNEI7QUFDM0J0SCxjQUFJLENBQUNzSCxHQUFELENBQUosR0FBWVIsSUFBSSxDQUFDUSxHQUFELENBQWhCO0FBQ0E7QUFDRDtBQUNELEtBTk0sTUFNQTtBQUNOLFlBQU0sSUFBSTVJLFNBQUosQ0FBYyxnRUFBZCxDQUFOO0FBQ0E7O0FBRUQsU0FBS3dDLE1BQUwsQ0FBWVEsS0FBWixHQUFvQjdELEdBQUcsQ0FBQ3VKLFVBQUosQ0FBZXBILElBQWYsRUFBcUIsS0FBS2tCLE1BQUwsQ0FBWVUsd0JBQWpDLEVBQTJELEtBQUtWLE1BQUwsQ0FBWVcsZ0JBQXZFLENBQXBCOztBQUNBLFFBQUksT0FBT2lGLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDN0JFLFdBQUssR0FBR3hILEtBQVI7QUFDQTs7QUFFRCxTQUFLd0gsS0FBTCxDQUFXLENBQUNBLEtBQVo7QUFDQSxXQUFPLElBQVA7QUFDQSxHQXRCRDs7QUF1QkFqSSxHQUFDLENBQUN5SSxRQUFGLEdBQWEsVUFBU1YsSUFBVCxFQUFldEgsS0FBZixFQUFzQndILEtBQXRCLEVBQTZCO0FBQ3pDLFFBQUloSCxJQUFJLEdBQUduQyxHQUFHLENBQUM4SSxVQUFKLENBQWUsS0FBS3pGLE1BQUwsQ0FBWVEsS0FBM0IsRUFBa0MsS0FBS1IsTUFBTCxDQUFZVyxnQkFBOUMsQ0FBWDtBQUNBaEUsT0FBRyxDQUFDMkosUUFBSixDQUFheEgsSUFBYixFQUFtQjhHLElBQW5CLEVBQXlCdEgsS0FBSyxLQUFLZixTQUFWLEdBQXNCLElBQXRCLEdBQTZCZSxLQUF0RDtBQUNBLFNBQUswQixNQUFMLENBQVlRLEtBQVosR0FBb0I3RCxHQUFHLENBQUN1SixVQUFKLENBQWVwSCxJQUFmLEVBQXFCLEtBQUtrQixNQUFMLENBQVlVLHdCQUFqQyxFQUEyRCxLQUFLVixNQUFMLENBQVlXLGdCQUF2RSxDQUFwQjs7QUFDQSxRQUFJLE9BQU9pRixJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzdCRSxXQUFLLEdBQUd4SCxLQUFSO0FBQ0E7O0FBRUQsU0FBS3dILEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsV0FBTyxJQUFQO0FBQ0EsR0FWRDs7QUFXQWpJLEdBQUMsQ0FBQzJJLFdBQUYsR0FBZ0IsVUFBU1osSUFBVCxFQUFldEgsS0FBZixFQUFzQndILEtBQXRCLEVBQTZCO0FBQzVDLFFBQUloSCxJQUFJLEdBQUduQyxHQUFHLENBQUM4SSxVQUFKLENBQWUsS0FBS3pGLE1BQUwsQ0FBWVEsS0FBM0IsRUFBa0MsS0FBS1IsTUFBTCxDQUFZVyxnQkFBOUMsQ0FBWDtBQUNBaEUsT0FBRyxDQUFDNkosV0FBSixDQUFnQjFILElBQWhCLEVBQXNCOEcsSUFBdEIsRUFBNEJ0SCxLQUE1QjtBQUNBLFNBQUswQixNQUFMLENBQVlRLEtBQVosR0FBb0I3RCxHQUFHLENBQUN1SixVQUFKLENBQWVwSCxJQUFmLEVBQXFCLEtBQUtrQixNQUFMLENBQVlVLHdCQUFqQyxFQUEyRCxLQUFLVixNQUFMLENBQVlXLGdCQUF2RSxDQUFwQjs7QUFDQSxRQUFJLE9BQU9pRixJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzdCRSxXQUFLLEdBQUd4SCxLQUFSO0FBQ0E7O0FBRUQsU0FBS3dILEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0EsV0FBTyxJQUFQO0FBQ0EsR0FWRDs7QUFXQWpJLEdBQUMsQ0FBQzRJLFFBQUYsR0FBYSxVQUFTYixJQUFULEVBQWV0SCxLQUFmLEVBQXNCb0ksV0FBdEIsRUFBbUM7QUFDL0MsUUFBSTVILElBQUksR0FBR25DLEdBQUcsQ0FBQzhJLFVBQUosQ0FBZSxLQUFLekYsTUFBTCxDQUFZUSxLQUEzQixFQUFrQyxLQUFLUixNQUFMLENBQVlXLGdCQUE5QyxDQUFYO0FBQ0EsV0FBT2hFLEdBQUcsQ0FBQzhKLFFBQUosQ0FBYTNILElBQWIsRUFBbUI4RyxJQUFuQixFQUF5QnRILEtBQXpCLEVBQWdDb0ksV0FBaEMsQ0FBUDtBQUNBLEdBSEQ7O0FBSUE3SSxHQUFDLENBQUNpTyxTQUFGLEdBQWNqTyxDQUFDLENBQUNnTyxRQUFoQjtBQUNBaE8sR0FBQyxDQUFDa08sU0FBRixHQUFjbE8sQ0FBQyxDQUFDeUksUUFBaEI7QUFDQXpJLEdBQUMsQ0FBQ21PLFlBQUYsR0FBaUJuTyxDQUFDLENBQUMySSxXQUFuQjtBQUNBM0ksR0FBQyxDQUFDb08sU0FBRixHQUFjcE8sQ0FBQyxDQUFDNEksUUFBaEIsQ0E1ckQ0QyxDQThyRDVDOztBQUNBNUksR0FBQyxDQUFDcU8sU0FBRixHQUFjLFlBQVc7QUFDeEIsUUFBSSxLQUFLbE0sTUFBTCxDQUFZSyxHQUFoQixFQUFxQjtBQUNwQixhQUFPLEtBQ0w4TCxpQkFESyxDQUNhLEtBRGIsRUFFTGpCLGFBRkssQ0FFUyxLQUZULEVBR0xrQixjQUhLLENBR1UsS0FIVixFQUlMQyxpQkFKSyxDQUlhLEtBSmIsRUFLTHZHLEtBTEssRUFBUDtBQU1BOztBQUVELFdBQU8sS0FDTHFHLGlCQURLLENBQ2EsS0FEYixFQUVMRyxpQkFGSyxDQUVhLEtBRmIsRUFHTEMsYUFISyxDQUdTLEtBSFQsRUFJTHJCLGFBSkssQ0FJUyxLQUpULEVBS0xrQixjQUxLLENBS1UsS0FMVixFQU1MQyxpQkFOSyxDQU1hLEtBTmIsRUFPTHZHLEtBUEssRUFBUDtBQVFBLEdBbEJEOztBQW1CQWpJLEdBQUMsQ0FBQ3NPLGlCQUFGLEdBQXNCLFVBQVNyRyxLQUFULEVBQWdCO0FBQ3JDLFFBQUksT0FBTyxLQUFLOUYsTUFBTCxDQUFZQyxRQUFuQixLQUFnQyxRQUFwQyxFQUE4QztBQUM3QyxXQUFLRCxNQUFMLENBQVlDLFFBQVosR0FBdUIsS0FBS0QsTUFBTCxDQUFZQyxRQUFaLENBQXFCaUMsV0FBckIsRUFBdkI7QUFDQSxXQUFLNEQsS0FBTCxDQUFXLENBQUNBLEtBQVo7QUFDQTs7QUFFRCxXQUFPLElBQVA7QUFDQSxHQVBEOztBQVFBakksR0FBQyxDQUFDeU8saUJBQUYsR0FBc0IsVUFBU3hHLEtBQVQsRUFBZ0I7QUFDckMsUUFBSSxLQUFLOUYsTUFBTCxDQUFZSSxRQUFoQixFQUEwQjtBQUN6QixVQUFJLEtBQUtnSixFQUFMLENBQVEsS0FBUixLQUFrQnhNLFFBQXRCLEVBQWdDO0FBQy9CLGFBQUtvRCxNQUFMLENBQVlJLFFBQVosR0FBdUJ4RCxRQUFRLENBQUNzTCxPQUFULENBQWlCLEtBQUtsSSxNQUFMLENBQVlJLFFBQTdCLENBQXZCO0FBQ0EsT0FGRCxNQUVPLElBQUksS0FBS2dKLEVBQUwsQ0FBUSxNQUFSLEtBQW1Cdk0sSUFBdkIsRUFBNkI7QUFDbkMsYUFBS21ELE1BQUwsQ0FBWUksUUFBWixHQUF1QnZELElBQUksQ0FBQzJQLElBQUwsQ0FBVSxLQUFLeE0sTUFBTCxDQUFZSSxRQUF0QixDQUF2QjtBQUNBOztBQUVELFdBQUtKLE1BQUwsQ0FBWUksUUFBWixHQUF1QixLQUFLSixNQUFMLENBQVlJLFFBQVosQ0FBcUI4QixXQUFyQixFQUF2QjtBQUNBLFdBQUs0RCxLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBOztBQUVELFdBQU8sSUFBUDtBQUNBLEdBYkQ7O0FBY0FqSSxHQUFDLENBQUMwTyxhQUFGLEdBQWtCLFVBQVN6RyxLQUFULEVBQWdCO0FBQ2pDO0FBQ0EsUUFBSSxPQUFPLEtBQUs5RixNQUFMLENBQVlDLFFBQW5CLEtBQWdDLFFBQWhDLElBQTRDLEtBQUtELE1BQUwsQ0FBWU0sSUFBWixLQUFxQjNELEdBQUcsQ0FBQzJFLFlBQUosQ0FBaUIsS0FBS3RCLE1BQUwsQ0FBWUMsUUFBN0IsQ0FBckUsRUFBNkc7QUFDNUcsV0FBS0QsTUFBTCxDQUFZTSxJQUFaLEdBQW1CLElBQW5CO0FBQ0EsV0FBS3dGLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0E7O0FBRUQsV0FBTyxJQUFQO0FBQ0EsR0FSRDs7QUFTQWpJLEdBQUMsQ0FBQ3FOLGFBQUYsR0FBa0IsVUFBU3BGLEtBQVQsRUFBZ0I7QUFDakMsUUFBSTJHLEtBQUssR0FBRyxLQUFLek0sTUFBTCxDQUFZTyxJQUF4Qjs7QUFDQSxRQUFJLENBQUNrTSxLQUFMLEVBQVk7QUFDWCxhQUFPLElBQVA7QUFDQTs7QUFFRCxRQUFJLEtBQUt6TSxNQUFMLENBQVlLLEdBQWhCLEVBQXFCO0FBQ3BCLFdBQUtMLE1BQUwsQ0FBWU8sSUFBWixHQUFtQjVELEdBQUcsQ0FBQzRILGFBQUosQ0FBa0IsS0FBS3ZFLE1BQUwsQ0FBWU8sSUFBOUIsQ0FBbkI7QUFDQSxXQUFLdUYsS0FBTCxDQUFXLENBQUNBLEtBQVo7QUFDQSxhQUFPLElBQVA7QUFDQTs7QUFFRCxRQUFJLEtBQUs5RixNQUFMLENBQVlPLElBQVosS0FBcUIsR0FBekIsRUFBOEI7QUFDN0IsYUFBTyxJQUFQO0FBQ0E7O0FBRUQsUUFBSW1NLGFBQUo7O0FBQ0EsUUFBSUMsZUFBZSxHQUFHLEVBQXRCOztBQUNBLFFBQUlDLE9BQUosRUFBYUMsSUFBYixDQWxCaUMsQ0FvQmpDOzs7QUFDQSxRQUFJSixLQUFLLENBQUN2SCxNQUFOLENBQWEsQ0FBYixNQUFvQixHQUF4QixFQUE2QjtBQUM1QndILG1CQUFhLEdBQUcsSUFBaEI7QUFDQUQsV0FBSyxHQUFHLE1BQU1BLEtBQWQ7QUFDQSxLQXhCZ0MsQ0EwQmpDOzs7QUFDQSxRQUFJQSxLQUFLLENBQUMvTixLQUFOLENBQVksQ0FBQyxDQUFiLE1BQW9CLEtBQXBCLElBQTZCK04sS0FBSyxDQUFDL04sS0FBTixDQUFZLENBQUMsQ0FBYixNQUFvQixJQUFyRCxFQUEyRDtBQUMxRCtOLFdBQUssSUFBSSxHQUFUO0FBQ0EsS0E3QmdDLENBK0JqQzs7O0FBQ0FBLFNBQUssR0FBR0EsS0FBSyxDQUNYck8sT0FETSxDQUNFLHNCQURGLEVBQzBCLEdBRDFCLEVBRU5BLE9BRk0sQ0FFRSxTQUZGLEVBRWEsR0FGYixDQUFSLENBaENpQyxDQW9DakM7O0FBQ0EsUUFBSXNPLGFBQUosRUFBbUI7QUFDbEJDLHFCQUFlLEdBQUdGLEtBQUssQ0FBQzVILFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJ0RixLQUFuQixDQUF5QixZQUF6QixLQUEwQyxFQUE1RDs7QUFDQSxVQUFJb04sZUFBSixFQUFxQjtBQUNwQkEsdUJBQWUsR0FBR0EsZUFBZSxDQUFDLENBQUQsQ0FBakM7QUFDQTtBQUNELEtBMUNnQyxDQTRDakM7OztBQUNBLFdBQU8sSUFBUCxFQUFhO0FBQ1pDLGFBQU8sR0FBR0gsS0FBSyxDQUFDN0gsT0FBTixDQUFjLEtBQWQsQ0FBVjs7QUFDQSxVQUFJZ0ksT0FBTyxLQUFLLENBQUMsQ0FBakIsRUFBb0I7QUFDbkI7QUFDQTtBQUNBLE9BSEQsTUFHTyxJQUFJQSxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDekI7QUFDQUgsYUFBSyxHQUFHQSxLQUFLLENBQUM1SCxTQUFOLENBQWdCLENBQWhCLENBQVI7QUFDQTtBQUNBOztBQUVEZ0ksVUFBSSxHQUFHSixLQUFLLENBQUM1SCxTQUFOLENBQWdCLENBQWhCLEVBQW1CK0gsT0FBbkIsRUFBNEJySCxXQUE1QixDQUF3QyxHQUF4QyxDQUFQOztBQUNBLFVBQUlzSCxJQUFJLEtBQUssQ0FBQyxDQUFkLEVBQWlCO0FBQ2hCQSxZQUFJLEdBQUdELE9BQVA7QUFDQTs7QUFDREgsV0FBSyxHQUFHQSxLQUFLLENBQUM1SCxTQUFOLENBQWdCLENBQWhCLEVBQW1CZ0ksSUFBbkIsSUFBMkJKLEtBQUssQ0FBQzVILFNBQU4sQ0FBZ0IrSCxPQUFPLEdBQUcsQ0FBMUIsQ0FBbkM7QUFDQSxLQTdEZ0MsQ0ErRGpDOzs7QUFDQSxRQUFJRixhQUFhLElBQUksS0FBS3RELEVBQUwsQ0FBUSxVQUFSLENBQXJCLEVBQTBDO0FBQ3pDcUQsV0FBSyxHQUFHRSxlQUFlLEdBQUdGLEtBQUssQ0FBQzVILFNBQU4sQ0FBZ0IsQ0FBaEIsQ0FBMUI7QUFDQTs7QUFFRDRILFNBQUssR0FBRzlQLEdBQUcsQ0FBQzJILFVBQUosQ0FBZW1JLEtBQWYsQ0FBUjtBQUNBLFNBQUt6TSxNQUFMLENBQVlPLElBQVosR0FBbUJrTSxLQUFuQjtBQUNBLFNBQUszRyxLQUFMLENBQVcsQ0FBQ0EsS0FBWjtBQUNBLFdBQU8sSUFBUDtBQUNBLEdBeEVEOztBQXlFQWpJLEdBQUMsQ0FBQ2lQLGlCQUFGLEdBQXNCalAsQ0FBQyxDQUFDcU4sYUFBeEI7O0FBQ0FyTixHQUFDLENBQUN1TyxjQUFGLEdBQW1CLFVBQVN0RyxLQUFULEVBQWdCO0FBQ2xDLFFBQUksT0FBTyxLQUFLOUYsTUFBTCxDQUFZUSxLQUFuQixLQUE2QixRQUFqQyxFQUEyQztBQUMxQyxVQUFJLENBQUMsS0FBS1IsTUFBTCxDQUFZUSxLQUFaLENBQWtCbkQsTUFBdkIsRUFBK0I7QUFDOUIsYUFBSzJDLE1BQUwsQ0FBWVEsS0FBWixHQUFvQixJQUFwQjtBQUNBLE9BRkQsTUFFTztBQUNOLGFBQUtBLEtBQUwsQ0FBVzdELEdBQUcsQ0FBQzhJLFVBQUosQ0FBZSxLQUFLekYsTUFBTCxDQUFZUSxLQUEzQixFQUFrQyxLQUFLUixNQUFMLENBQVlXLGdCQUE5QyxDQUFYO0FBQ0E7O0FBRUQsV0FBS21GLEtBQUwsQ0FBVyxDQUFDQSxLQUFaO0FBQ0E7O0FBRUQsV0FBTyxJQUFQO0FBQ0EsR0FaRDs7QUFhQWpJLEdBQUMsQ0FBQ3dPLGlCQUFGLEdBQXNCLFVBQVN2RyxLQUFULEVBQWdCO0FBQ3JDLFFBQUksQ0FBQyxLQUFLOUYsTUFBTCxDQUFZUyxRQUFqQixFQUEyQjtBQUMxQixXQUFLVCxNQUFMLENBQVlTLFFBQVosR0FBdUIsSUFBdkI7QUFDQSxXQUFLcUYsS0FBTCxDQUFXLENBQUNBLEtBQVo7QUFDQTs7QUFFRCxXQUFPLElBQVA7QUFDQSxHQVBEOztBQVFBakksR0FBQyxDQUFDa1AsZUFBRixHQUFvQmxQLENBQUMsQ0FBQ3VPLGNBQXRCO0FBQ0F2TyxHQUFDLENBQUNtUCxhQUFGLEdBQWtCblAsQ0FBQyxDQUFDd08saUJBQXBCOztBQUVBeE8sR0FBQyxDQUFDOEUsT0FBRixHQUFZLFlBQVc7QUFDdEI7QUFDQSxRQUFJWSxDQUFDLEdBQUc1RyxHQUFHLENBQUM2RixNQUFaO0FBQ0EsUUFBSXlLLENBQUMsR0FBR3RRLEdBQUcsQ0FBQzhGLE1BQVo7QUFFQTlGLE9BQUcsQ0FBQzZGLE1BQUosR0FBYUgsTUFBYjtBQUNBMUYsT0FBRyxDQUFDOEYsTUFBSixHQUFhQyxrQkFBYjs7QUFDQSxRQUFJO0FBQ0gsV0FBS3dKLFNBQUw7QUFDQSxLQUZELFNBRVU7QUFDVHZQLFNBQUcsQ0FBQzZGLE1BQUosR0FBYWUsQ0FBYjtBQUNBNUcsU0FBRyxDQUFDOEYsTUFBSixHQUFhd0ssQ0FBYjtBQUNBOztBQUNELFdBQU8sSUFBUDtBQUNBLEdBZEQ7O0FBZ0JBcFAsR0FBQyxDQUFDZ0YsT0FBRixHQUFZLFlBQVc7QUFDdEI7QUFDQSxRQUFJVSxDQUFDLEdBQUc1RyxHQUFHLENBQUM2RixNQUFaO0FBQ0EsUUFBSXlLLENBQUMsR0FBR3RRLEdBQUcsQ0FBQzhGLE1BQVo7QUFFQTlGLE9BQUcsQ0FBQzZGLE1BQUosR0FBYUYsd0JBQWI7QUFDQTNGLE9BQUcsQ0FBQzhGLE1BQUosR0FBYUcsUUFBYjs7QUFDQSxRQUFJO0FBQ0gsV0FBS3NKLFNBQUw7QUFDQSxLQUZELFNBRVU7QUFDVHZQLFNBQUcsQ0FBQzZGLE1BQUosR0FBYWUsQ0FBYjtBQUNBNUcsU0FBRyxDQUFDOEYsTUFBSixHQUFhd0ssQ0FBYjtBQUNBOztBQUNELFdBQU8sSUFBUDtBQUNBLEdBZEQ7O0FBZ0JBcFAsR0FBQyxDQUFDcVAsUUFBRixHQUFhLFlBQVc7QUFDdkIsUUFBSUMsR0FBRyxHQUFHLEtBQUt6RSxLQUFMLEVBQVYsQ0FEdUIsQ0FFdkI7O0FBQ0F5RSxPQUFHLENBQUNqTixRQUFKLENBQWEsRUFBYixFQUFpQkMsUUFBakIsQ0FBMEIsRUFBMUIsRUFBOEIrTCxTQUE5QjtBQUNBLFFBQUlqSCxDQUFDLEdBQUcsRUFBUjs7QUFDQSxRQUFJa0ksR0FBRyxDQUFDbk4sTUFBSixDQUFXQyxRQUFmLEVBQXlCO0FBQ3hCZ0YsT0FBQyxJQUFJa0ksR0FBRyxDQUFDbk4sTUFBSixDQUFXQyxRQUFYLEdBQXNCLEtBQTNCO0FBQ0E7O0FBRUQsUUFBSWtOLEdBQUcsQ0FBQ25OLE1BQUosQ0FBV0ksUUFBZixFQUF5QjtBQUN4QixVQUFJK00sR0FBRyxDQUFDL0QsRUFBSixDQUFPLFVBQVAsS0FBc0J4TSxRQUExQixFQUFvQztBQUNuQ3FJLFNBQUMsSUFBSXJJLFFBQVEsQ0FBQ3dRLFNBQVQsQ0FBbUJELEdBQUcsQ0FBQ25OLE1BQUosQ0FBV0ksUUFBOUIsQ0FBTDs7QUFDQSxZQUFJK00sR0FBRyxDQUFDbk4sTUFBSixDQUFXTSxJQUFmLEVBQXFCO0FBQ3BCMkUsV0FBQyxJQUFJLE1BQU1rSSxHQUFHLENBQUNuTixNQUFKLENBQVdNLElBQXRCO0FBQ0E7QUFDRCxPQUxELE1BS087QUFDTjJFLFNBQUMsSUFBSWtJLEdBQUcsQ0FBQy9DLElBQUosRUFBTDtBQUNBO0FBQ0Q7O0FBRUQsUUFBSStDLEdBQUcsQ0FBQ25OLE1BQUosQ0FBV0ksUUFBWCxJQUF1QitNLEdBQUcsQ0FBQ25OLE1BQUosQ0FBV08sSUFBbEMsSUFBMEM0TSxHQUFHLENBQUNuTixNQUFKLENBQVdPLElBQVgsQ0FBZ0IyRSxNQUFoQixDQUF1QixDQUF2QixNQUE4QixHQUE1RSxFQUFpRjtBQUNoRkQsT0FBQyxJQUFJLEdBQUw7QUFDQTs7QUFFREEsS0FBQyxJQUFJa0ksR0FBRyxDQUFDNU0sSUFBSixDQUFTLElBQVQsQ0FBTDs7QUFDQSxRQUFJNE0sR0FBRyxDQUFDbk4sTUFBSixDQUFXUSxLQUFmLEVBQXNCO0FBQ3JCLFVBQUlvTCxDQUFDLEdBQUcsRUFBUjs7QUFDQSxXQUFLLElBQUk1TSxDQUFDLEdBQUcsQ0FBUixFQUFXcU8sRUFBRSxHQUFHRixHQUFHLENBQUNuTixNQUFKLENBQVdRLEtBQVgsQ0FBaUIwRCxLQUFqQixDQUF1QixHQUF2QixDQUFoQixFQUE2Q3RFLENBQUMsR0FBR3lOLEVBQUUsQ0FBQ2hRLE1BQXpELEVBQWlFMkIsQ0FBQyxHQUFHWSxDQUFyRSxFQUF3RVosQ0FBQyxFQUF6RSxFQUE2RTtBQUM1RSxZQUFJc08sRUFBRSxHQUFHLENBQUNELEVBQUUsQ0FBQ3JPLENBQUQsQ0FBRixJQUFTLEVBQVYsRUFBY2tGLEtBQWQsQ0FBb0IsR0FBcEIsQ0FBVDtBQUNBMEgsU0FBQyxJQUFJLE1BQU1qUCxHQUFHLENBQUMyRyxXQUFKLENBQWdCZ0ssRUFBRSxDQUFDLENBQUQsQ0FBbEIsRUFBdUIsS0FBS3ROLE1BQUwsQ0FBWVcsZ0JBQW5DLEVBQ1R2QyxPQURTLENBQ0QsSUFEQyxFQUNLLEtBREwsQ0FBWDs7QUFHQSxZQUFJa1AsRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFVL1AsU0FBZCxFQUF5QjtBQUN4QnFPLFdBQUMsSUFBSSxNQUFNalAsR0FBRyxDQUFDMkcsV0FBSixDQUFnQmdLLEVBQUUsQ0FBQyxDQUFELENBQWxCLEVBQXVCLEtBQUt0TixNQUFMLENBQVlXLGdCQUFuQyxFQUNUdkMsT0FEUyxDQUNELElBREMsRUFDSyxLQURMLENBQVg7QUFFQTtBQUNEOztBQUNENkcsT0FBQyxJQUFJLE1BQU0yRyxDQUFDLENBQUMvRyxTQUFGLENBQVksQ0FBWixDQUFYO0FBQ0E7O0FBRURJLEtBQUMsSUFBSXRJLEdBQUcsQ0FBQzJHLFdBQUosQ0FBZ0I2SixHQUFHLENBQUNwRSxJQUFKLEVBQWhCLEVBQTRCLElBQTVCLENBQUw7QUFDQSxXQUFPOUQsQ0FBUDtBQUNBLEdBMUNELENBbjNENEMsQ0ErNUQ1Qzs7O0FBQ0FwSCxHQUFDLENBQUNGLFVBQUYsR0FBZSxVQUFTVCxJQUFULEVBQWU7QUFDN0IsUUFBSXFRLFFBQVEsR0FBRyxLQUFLN0UsS0FBTCxFQUFmO0FBQ0EsUUFBSThFLFVBQVUsR0FBRyxDQUFDLFVBQUQsRUFBYSxVQUFiLEVBQXlCLFVBQXpCLEVBQXFDLFVBQXJDLEVBQWlELE1BQWpELENBQWpCO0FBQ0EsUUFBSUMsT0FBSixFQUFhek8sQ0FBYixFQUFnQm5CLENBQWhCOztBQUVBLFFBQUksS0FBS21DLE1BQUwsQ0FBWUssR0FBaEIsRUFBcUI7QUFDcEIsWUFBTSxJQUFJbUwsS0FBSixDQUFVLGdFQUFWLENBQU47QUFDQTs7QUFFRCxRQUFJLEVBQUV0TyxJQUFJLFlBQVlQLEdBQWxCLENBQUosRUFBNEI7QUFDM0JPLFVBQUksR0FBRyxJQUFJUCxHQUFKLENBQVFPLElBQVIsQ0FBUDtBQUNBOztBQUVELFFBQUksQ0FBQ3FRLFFBQVEsQ0FBQ3ZOLE1BQVQsQ0FBZ0JDLFFBQXJCLEVBQStCO0FBQzlCc04sY0FBUSxDQUFDdk4sTUFBVCxDQUFnQkMsUUFBaEIsR0FBMkIvQyxJQUFJLENBQUM4QyxNQUFMLENBQVlDLFFBQXZDO0FBQ0E7O0FBRUQsUUFBSSxLQUFLRCxNQUFMLENBQVlJLFFBQWhCLEVBQTBCO0FBQ3pCLGFBQU9tTixRQUFQO0FBQ0E7O0FBRUQsU0FBS3ZPLENBQUMsR0FBRyxDQUFULEVBQWFuQixDQUFDLEdBQUcyUCxVQUFVLENBQUN4TyxDQUFELENBQTNCLEVBQWlDQSxDQUFDLEVBQWxDLEVBQXNDO0FBQ3JDdU8sY0FBUSxDQUFDdk4sTUFBVCxDQUFnQm5DLENBQWhCLElBQXFCWCxJQUFJLENBQUM4QyxNQUFMLENBQVluQyxDQUFaLENBQXJCO0FBQ0E7O0FBRUQsUUFBSSxDQUFDMFAsUUFBUSxDQUFDdk4sTUFBVCxDQUFnQk8sSUFBckIsRUFBMkI7QUFDMUJnTixjQUFRLENBQUN2TixNQUFULENBQWdCTyxJQUFoQixHQUF1QnJELElBQUksQ0FBQzhDLE1BQUwsQ0FBWU8sSUFBbkM7O0FBQ0EsVUFBSSxDQUFDZ04sUUFBUSxDQUFDdk4sTUFBVCxDQUFnQlEsS0FBckIsRUFBNEI7QUFDM0IrTSxnQkFBUSxDQUFDdk4sTUFBVCxDQUFnQlEsS0FBaEIsR0FBd0J0RCxJQUFJLENBQUM4QyxNQUFMLENBQVlRLEtBQXBDO0FBQ0E7QUFDRCxLQUxELE1BS08sSUFBSStNLFFBQVEsQ0FBQ3ZOLE1BQVQsQ0FBZ0JPLElBQWhCLENBQXFCc0UsU0FBckIsQ0FBK0IsQ0FBQyxDQUFoQyxNQUF1QyxJQUEzQyxFQUFpRDtBQUN2RDBJLGNBQVEsQ0FBQ3ZOLE1BQVQsQ0FBZ0JPLElBQWhCLElBQXdCLEdBQXhCO0FBQ0E7O0FBRUQsUUFBSWdOLFFBQVEsQ0FBQ2hOLElBQVQsR0FBZ0IyRSxNQUFoQixDQUF1QixDQUF2QixNQUE4QixHQUFsQyxFQUF1QztBQUN0Q3VJLGFBQU8sR0FBR3ZRLElBQUksQ0FBQzROLFNBQUwsRUFBVjtBQUNBMkMsYUFBTyxHQUFHQSxPQUFPLEdBQUdBLE9BQUgsR0FBYXZRLElBQUksQ0FBQ3FELElBQUwsR0FBWXFFLE9BQVosQ0FBb0IsR0FBcEIsTUFBNkIsQ0FBN0IsR0FBaUMsR0FBakMsR0FBdUMsRUFBckU7QUFDQTJJLGNBQVEsQ0FBQ3ZOLE1BQVQsQ0FBZ0JPLElBQWhCLEdBQXVCLENBQUNrTixPQUFPLEdBQUlBLE9BQU8sR0FBRyxHQUFkLEdBQXFCLEVBQTdCLElBQW1DRixRQUFRLENBQUN2TixNQUFULENBQWdCTyxJQUExRTtBQUNBZ04sY0FBUSxDQUFDckMsYUFBVDtBQUNBOztBQUVEcUMsWUFBUSxDQUFDekgsS0FBVDtBQUNBLFdBQU95SCxRQUFQO0FBQ0EsR0EzQ0Q7O0FBNENBMVAsR0FBQyxDQUFDNlAsVUFBRixHQUFlLFVBQVN4USxJQUFULEVBQWU7QUFDN0IsUUFBSXlNLFFBQVEsR0FBRyxLQUFLakIsS0FBTCxHQUFhd0QsU0FBYixFQUFmO0FBQ0EsUUFBSXlCLGFBQUosRUFBbUJDLFNBQW5CLEVBQThCQyxNQUE5QixFQUFzQ0MsWUFBdEMsRUFBb0RDLFFBQXBEOztBQUVBLFFBQUlwRSxRQUFRLENBQUMzSixNQUFULENBQWdCSyxHQUFwQixFQUF5QjtBQUN4QixZQUFNLElBQUltTCxLQUFKLENBQVUsZ0VBQVYsQ0FBTjtBQUNBOztBQUVEdE8sUUFBSSxHQUFHLElBQUlQLEdBQUosQ0FBUU8sSUFBUixFQUFjZ1AsU0FBZCxFQUFQO0FBQ0F5QixpQkFBYSxHQUFHaEUsUUFBUSxDQUFDM0osTUFBekI7QUFDQTROLGFBQVMsR0FBRzFRLElBQUksQ0FBQzhDLE1BQWpCO0FBQ0E4TixnQkFBWSxHQUFHbkUsUUFBUSxDQUFDcEosSUFBVCxFQUFmO0FBQ0F3TixZQUFRLEdBQUc3USxJQUFJLENBQUNxRCxJQUFMLEVBQVg7O0FBRUEsUUFBSXVOLFlBQVksQ0FBQzVJLE1BQWIsQ0FBb0IsQ0FBcEIsTUFBMkIsR0FBL0IsRUFBb0M7QUFDbkMsWUFBTSxJQUFJc0csS0FBSixDQUFVLHlCQUFWLENBQU47QUFDQTs7QUFFRCxRQUFJdUMsUUFBUSxDQUFDN0ksTUFBVCxDQUFnQixDQUFoQixNQUF1QixHQUEzQixFQUFnQztBQUMvQixZQUFNLElBQUlzRyxLQUFKLENBQVUseURBQVYsQ0FBTjtBQUNBOztBQUVELFFBQUltQyxhQUFhLENBQUMxTixRQUFkLEtBQTJCMk4sU0FBUyxDQUFDM04sUUFBekMsRUFBbUQ7QUFDbEQwTixtQkFBYSxDQUFDMU4sUUFBZCxHQUF5QixJQUF6QjtBQUNBOztBQUVELFFBQUkwTixhQUFhLENBQUN6TixRQUFkLEtBQTJCME4sU0FBUyxDQUFDMU4sUUFBckMsSUFBaUR5TixhQUFhLENBQUN4TixRQUFkLEtBQTJCeU4sU0FBUyxDQUFDek4sUUFBMUYsRUFBb0c7QUFDbkcsYUFBT3dKLFFBQVEsQ0FBQzdELEtBQVQsRUFBUDtBQUNBOztBQUVELFFBQUk2SCxhQUFhLENBQUMxTixRQUFkLEtBQTJCLElBQTNCLElBQW1DME4sYUFBYSxDQUFDek4sUUFBZCxLQUEyQixJQUE5RCxJQUFzRXlOLGFBQWEsQ0FBQ3hOLFFBQWQsS0FBMkIsSUFBckcsRUFBMkc7QUFDMUcsYUFBT3dKLFFBQVEsQ0FBQzdELEtBQVQsRUFBUDtBQUNBOztBQUVELFFBQUk2SCxhQUFhLENBQUN2TixRQUFkLEtBQTJCd04sU0FBUyxDQUFDeE4sUUFBckMsSUFBaUR1TixhQUFhLENBQUNyTixJQUFkLEtBQXVCc04sU0FBUyxDQUFDdE4sSUFBdEYsRUFBNEY7QUFDM0ZxTixtQkFBYSxDQUFDdk4sUUFBZCxHQUF5QixJQUF6QjtBQUNBdU4sbUJBQWEsQ0FBQ3JOLElBQWQsR0FBcUIsSUFBckI7QUFDQSxLQUhELE1BR087QUFDTixhQUFPcUosUUFBUSxDQUFDN0QsS0FBVCxFQUFQO0FBQ0E7O0FBRUQsUUFBSWdJLFlBQVksS0FBS0MsUUFBckIsRUFBK0I7QUFDOUJKLG1CQUFhLENBQUNwTixJQUFkLEdBQXFCLEVBQXJCO0FBQ0EsYUFBT29KLFFBQVEsQ0FBQzdELEtBQVQsRUFBUDtBQUNBLEtBNUM0QixDQThDN0I7OztBQUNBK0gsVUFBTSxHQUFHbFIsR0FBRyxDQUFDbUssVUFBSixDQUFlZ0gsWUFBZixFQUE2QkMsUUFBN0IsQ0FBVCxDQS9DNkIsQ0FpRDdCOztBQUNBLFFBQUksQ0FBQ0YsTUFBTCxFQUFhO0FBQ1osYUFBT2xFLFFBQVEsQ0FBQzdELEtBQVQsRUFBUDtBQUNBOztBQUVELFFBQUlrSSxPQUFPLEdBQUdKLFNBQVMsQ0FBQ3JOLElBQVYsQ0FDWnNFLFNBRFksQ0FDRmdKLE1BQU0sQ0FBQ3hRLE1BREwsRUFFWmUsT0FGWSxDQUVKLFNBRkksRUFFTyxFQUZQLEVBR1pBLE9BSFksQ0FHSixRQUhJLEVBR00sS0FITixDQUFkO0FBS0F1UCxpQkFBYSxDQUFDcE4sSUFBZCxHQUFzQnlOLE9BQU8sR0FBR0wsYUFBYSxDQUFDcE4sSUFBZCxDQUFtQnNFLFNBQW5CLENBQTZCZ0osTUFBTSxDQUFDeFEsTUFBcEMsQ0FBWCxJQUEyRCxJQUFoRjtBQUVBLFdBQU9zTSxRQUFRLENBQUM3RCxLQUFULEVBQVA7QUFDQSxHQTlERCxDQTU4RDRDLENBNGdFNUM7OztBQUNBakksR0FBQyxDQUFDb1EsTUFBRixHQUFXLFVBQVNkLEdBQVQsRUFBYztBQUN4QixRQUFJMU4sR0FBRyxHQUFHLEtBQUtpSixLQUFMLEVBQVY7QUFDQSxRQUFJaEosR0FBRyxHQUFHLElBQUkvQyxHQUFKLENBQVF3USxHQUFSLENBQVY7QUFDQSxRQUFJZSxPQUFPLEdBQUcsRUFBZDtBQUNBLFFBQUlDLE9BQU8sR0FBRyxFQUFkO0FBQ0EsUUFBSUMsT0FBTyxHQUFHLEVBQWQ7QUFDQSxRQUFJQyxTQUFKLEVBQWVDLFNBQWYsRUFBMEJsSSxHQUExQjtBQUVBM0csT0FBRyxDQUFDeU0sU0FBSjtBQUNBeE0sT0FBRyxDQUFDd00sU0FBSixHQVR3QixDQVd4Qjs7QUFDQSxRQUFJek0sR0FBRyxDQUFDakIsUUFBSixPQUFtQmtCLEdBQUcsQ0FBQ2xCLFFBQUosRUFBdkIsRUFBdUM7QUFDdEMsYUFBTyxJQUFQO0FBQ0EsS0FkdUIsQ0FnQnhCOzs7QUFDQTZQLGFBQVMsR0FBRzVPLEdBQUcsQ0FBQ2UsS0FBSixFQUFaO0FBQ0E4TixhQUFTLEdBQUc1TyxHQUFHLENBQUNjLEtBQUosRUFBWjtBQUNBZixPQUFHLENBQUNlLEtBQUosQ0FBVSxFQUFWO0FBQ0FkLE9BQUcsQ0FBQ2MsS0FBSixDQUFVLEVBQVYsRUFwQndCLENBc0J4Qjs7QUFDQSxRQUFJZixHQUFHLENBQUNqQixRQUFKLE9BQW1Ca0IsR0FBRyxDQUFDbEIsUUFBSixFQUF2QixFQUF1QztBQUN0QyxhQUFPLEtBQVA7QUFDQSxLQXpCdUIsQ0EyQnhCOzs7QUFDQSxRQUFJNlAsU0FBUyxDQUFDaFIsTUFBVixLQUFxQmlSLFNBQVMsQ0FBQ2pSLE1BQW5DLEVBQTJDO0FBQzFDLGFBQU8sS0FBUDtBQUNBOztBQUVENlEsV0FBTyxHQUFHdlIsR0FBRyxDQUFDOEksVUFBSixDQUFlNEksU0FBZixFQUEwQixLQUFLck8sTUFBTCxDQUFZVyxnQkFBdEMsQ0FBVjtBQUNBd04sV0FBTyxHQUFHeFIsR0FBRyxDQUFDOEksVUFBSixDQUFlNkksU0FBZixFQUEwQixLQUFLdE8sTUFBTCxDQUFZVyxnQkFBdEMsQ0FBVjs7QUFFQSxTQUFLeUYsR0FBTCxJQUFZOEgsT0FBWixFQUFxQjtBQUNwQixVQUFJblEsTUFBTSxDQUFDVSxJQUFQLENBQVl5UCxPQUFaLEVBQXFCOUgsR0FBckIsQ0FBSixFQUErQjtBQUM5QixZQUFJLENBQUN6SCxPQUFPLENBQUN1UCxPQUFPLENBQUM5SCxHQUFELENBQVIsQ0FBWixFQUE0QjtBQUMzQixjQUFJOEgsT0FBTyxDQUFDOUgsR0FBRCxDQUFQLEtBQWlCK0gsT0FBTyxDQUFDL0gsR0FBRCxDQUE1QixFQUFtQztBQUNsQyxtQkFBTyxLQUFQO0FBQ0E7QUFDRCxTQUpELE1BSU8sSUFBSSxDQUFDNUcsV0FBVyxDQUFDME8sT0FBTyxDQUFDOUgsR0FBRCxDQUFSLEVBQWUrSCxPQUFPLENBQUMvSCxHQUFELENBQXRCLENBQWhCLEVBQThDO0FBQ3BELGlCQUFPLEtBQVA7QUFDQTs7QUFFRGdJLGVBQU8sQ0FBQ2hJLEdBQUQsQ0FBUCxHQUFlLElBQWY7QUFDQTtBQUNEOztBQUVELFNBQUtBLEdBQUwsSUFBWStILE9BQVosRUFBcUI7QUFDcEIsVUFBSXBRLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZMFAsT0FBWixFQUFxQi9ILEdBQXJCLENBQUosRUFBK0I7QUFDOUIsWUFBSSxDQUFDZ0ksT0FBTyxDQUFDaEksR0FBRCxDQUFaLEVBQW1CO0FBQ2xCO0FBQ0EsaUJBQU8sS0FBUDtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDQSxHQTNERCxDQTdnRTRDLENBMGtFNUM7OztBQUNBdkksR0FBQyxDQUFDNkMsd0JBQUYsR0FBNkIsVUFBU3RFLENBQVQsRUFBWTtBQUN4QyxTQUFLNEQsTUFBTCxDQUFZVSx3QkFBWixHQUF1QyxDQUFDLENBQUN0RSxDQUF6QztBQUNBLFdBQU8sSUFBUDtBQUNBLEdBSEQ7O0FBS0F5QixHQUFDLENBQUM4QyxnQkFBRixHQUFxQixVQUFTdkUsQ0FBVCxFQUFZO0FBQ2hDLFNBQUs0RCxNQUFMLENBQVlXLGdCQUFaLEdBQStCLENBQUMsQ0FBQ3ZFLENBQWpDO0FBQ0EsV0FBTyxJQUFQO0FBQ0EsR0FIRDs7QUFLQSxTQUFPTyxHQUFQO0FBQ0EsQ0FwbUVBLENBQUQsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2JBNFIsV0FBVyxFQUFYO0FBRUEsS0FBQ0MsU0FBRCxHQUFhLEVBQWI7QUFFQSxLQUFDQyxhQUFELEdBQWlCLEVBQWpCO0FBRUEsS0FBQ0MsY0FBRCxHQUFrQixFQUFsQjtBQUVBLEtBQUNDLG9CQUFELEdBQXdCLEVBQXhCO0FBRUEsS0FBQ0MsMEJBQUQsR0FBOEIsRUFBOUI7QUFFQSxLQUFDQyxnQkFBRCxHQUFvQixFQUFwQjtBQUVBLEtBQUNDLGdCQUFELEdBQW9CLEVBQXBCO0FBRUEsS0FBQ0MsY0FBRCxHQUFrQixFQUFsQjtBQUVBLEtBQUNDLGFBQUQsR0FBaUI7QUFBQ0MsV0FBUztBQUFWLENBQWpCO0FBRUEsS0FBQ0MsYUFBRCxHQUFpQixFQUFqQjs7QUFFQUwsaUJBQWlCTSwwQkFBakIsR0FBOEMsVUFBQ0MsYUFBRDtBQUM3QyxVQUFBQSxpQkFBQSxPQUFRQSxjQUFleEssT0FBZixDQUF1QixVQUF2QixDQUFSLEdBQVEsTUFBUixJQUE2QyxDQUFDLENBQTlDLElBQVEsQ0FBQXdLLGlCQUFBLE9BQTJDQSxjQUFleEssT0FBZixDQUF1QixvQkFBdkIsQ0FBM0MsR0FBMkMsTUFBM0MsSUFBMEYsQ0FBQyxDQUFuRyxJQUFRLENBQUF3SyxpQkFBQSxPQUFnR0EsY0FBZXhLLE9BQWYsQ0FBdUIsYUFBdkIsQ0FBaEcsR0FBZ0csTUFBaEcsSUFBd0ksQ0FBQyxDQUFqSixJQUFRLENBQUF3SyxpQkFBQSxPQUE4SUEsY0FBZXhLLE9BQWYsQ0FBdUIsaUJBQXZCLENBQTlJLEdBQThJLE1BQTlJLElBQTBMLENBQUMsQ0FBbk0sSUFBUSxDQUFBd0ssaUJBQUEsT0FBZ01BLGNBQWV4SyxPQUFmLENBQXVCLGVBQXZCLENBQWhNLEdBQWdNLE1BQWhNLElBQTBPLENBQUMsQ0FBblA7QUFENkMsQ0FBOUM7O0FBR0FpSyxpQkFBaUJRLG9CQUFqQixHQUF3QyxVQUFDQyxJQUFELEVBQU9DLFlBQVA7QUFDdkMsTUFBQUMsYUFBQSxFQUFBQyxjQUFBLEVBQUFDLE1BQUE7O0FBQUFELG1CQUFpQixJQUFJRSxLQUFKLEVBQWpCO0FBRUFILGtCQUFnQixFQUFoQjs7QUFFQSxNQUFHSSxPQUFPQyxRQUFWO0FBQ0NMLG9CQUFnQk0sY0FBY0MsY0FBZCxDQUE2QkMsR0FBR0MsS0FBSCxDQUFTQyxPQUFULENBQWlCO0FBQUNDLFdBQUtiO0FBQU4sS0FBakIsQ0FBN0IsRUFBNERDLFlBQTVELENBQWhCO0FBREQ7QUFHQ0Msb0JBQWdCUSxHQUFHSSxhQUFILENBQWlCRixPQUFqQixDQUF5QjtBQUFDQyxXQUFLWixZQUFOO0FBQW9CRCxZQUFNQTtBQUExQixLQUF6QixDQUFoQjtBQ1VDOztBRFJGSSxXQUFBLENBQUFGLGlCQUFBLE9BQVNBLGNBQWVFLE1BQXhCLEdBQXdCLE1BQXhCLEtBQWtDLEVBQWxDO0FBRUFBLFNBQU9XLE9BQVAsQ0FBZSxVQUFDQyxDQUFEO0FBQ2QsUUFBQUMsR0FBQTs7QUFBQSxRQUFHRCxFQUFFbk8sSUFBRixLQUFVLE9BQWI7QUNVSSxhRFRIcU8sUUFBUUMsR0FBUixDQUFZLCtCQUFaLENDU0c7QURWSixXQUVLLElBQUdILEVBQUVuTyxJQUFGLEtBQVUsU0FBYjtBQ1VELGFBQU9tTyxLQUFLLElBQUwsR0FBWSxDQUFDQyxNQUFNRCxFQUFFWixNQUFULEtBQW9CLElBQXBCLEdBQTJCYSxJRFR0Q0YsT0NTc0MsQ0RUOUIsVUFBQ0ssRUFBRDtBQ1VkLGVEVEpqQixlQUFlNUosSUFBZixDQUFvQjZLLEdBQUdDLE9BQXZCLENDU0k7QURWTCxPQ1NpRCxDQUEzQixHRFR0QixNQ1NVLEdEVFYsTUNTRztBRFZDO0FDY0QsYURWSGxCLGVBQWU1SixJQUFmLENBQW9CeUssRUFBRUssT0FBdEIsQ0NVRztBQUNEO0FEbEJKO0FDb0JDLFNEWERDLEVBQUVDLElBQUYsQ0FBT3BCLGNBQVAsRUFBdUIsVUFBQ0wsYUFBRDtBQUN0QixXQUFPVCxxQkFBcUJtQyxPQUFyQixDQUE2QjNCLDBCQUE3QixDQUF3REMsYUFBeEQsQ0FBUDtBQURELElDV0M7QURoQ3NDLENBQXhDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBRXpCQVksR0FBR2UsV0FBSCxHQUFpQixJQUFJbkIsT0FBT29CLFVBQVgsQ0FBc0IsYUFBdEIsQ0FBakIsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQUEsSUFBQUMsVUFBQSxFQUFBQyxrQkFBQSxFQUFBQywyQkFBQSxFQUFBQywyQkFBQSxFQUFBQyxnQkFBQSxFQUFBQyxZQUFBLEVBQUFDLFdBQUE7O0FBQUFDLDJCQUEyQixFQUEzQjtBQUdBQSx5QkFBeUJDLG1CQUF6QixHQUErQyxrUUFBL0M7QUFRQUQseUJBQXlCRSxnQkFBekIsR0FBNEMsb0VBQTVDO0FBS0FGLHlCQUF5QkcsZUFBekIsR0FBMkMsODNDQUEzQztBQXVDQUgseUJBQXlCSSxXQUF6QixHQUF1QywyNk1BQXZDOztBQXdJQUoseUJBQXlCSyxNQUF6QixHQUFrQyxVQUFDQyxZQUFELEVBQWVDLFdBQWY7QUFDakMsTUFBQUMsUUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxzQkFBQTtBQUFBRixhQUFXUix5QkFBeUJNLFlBQXpCLENBQVg7QUFFQUcscUJBQW1CRSxrQkFBa0JDLE9BQWxCLENBQTBCSixRQUExQixFQUFvQztBQUFDSyxZQUFRO0FBQVQsR0FBcEMsQ0FBbkI7QUFFQUgsMkJBQXlCSSxLQUFLTCxnQkFBTCxDQUF6QjtBQUVBTSxXQUFTVCxZQUFULElBQXlCLElBQUlVLE1BQU1ELFFBQVYsQ0FBbUJULFlBQW5CLEVBQWlDSSxzQkFBakMsQ0FBekI7QUFDQUssV0FBU1QsWUFBVCxFQUF1QkMsV0FBdkIsR0FBcUNBLFdBQXJDO0FDbExDLFNEbUxEUSxTQUFTVCxZQUFULEVBQXVCaEIsT0FBdkIsQ0FBK0JuQyxxQkFBcUJtQyxPQUFwRCxDQ25MQztBRDBLZ0MsQ0FBbEM7O0FBV0FVLHlCQUF5QmlCLHNCQUF6QixHQUFrRCxVQUFDVixXQUFEO0FBQ2pELE1BQUFXLHdCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLDhCQUFBO0FBQUFELHlCQUF1QnJCLGFBQWEsK0NBQWIsQ0FBdkI7QUFFQW9CLDZCQUEyQlAsa0JBQWtCQyxPQUFsQixDQUEwQk8sb0JBQTFCLEVBQWdEO0FBQUNOLFlBQVE7QUFBVCxHQUFoRCxDQUEzQjtBQUVBTyxtQ0FBaUNOLEtBQUtJLHdCQUFMLENBQWpDO0FBRUFILFdBQVNNLGdCQUFULEdBQTRCLElBQUlMLE1BQU1ELFFBQVYsQ0FBbUIsa0JBQW5CLEVBQXVDSyw4QkFBdkMsQ0FBNUI7QUFDQUwsV0FBU00sZ0JBQVQsQ0FBMEJkLFdBQTFCLEdBQXdDQSxXQUF4QztBQ2pMQyxTRGtMRFEsU0FBU00sZ0JBQVQsQ0FBMEIvQixPQUExQixDQUFrQ2pDLGlCQUFpQmlDLE9BQW5ELENDbExDO0FEeUtnRCxDQUFsRDs7QUFXQVUseUJBQXlCc0IsZUFBekIsR0FBMkMsVUFBQ2YsV0FBRDtBQUMxQyxNQUFBZ0IsaUJBQUEsRUFBQUMsYUFBQSxFQUFBQyx1QkFBQTtBQUFBRCxrQkFBZ0IxQixhQUFhLHVDQUFiLENBQWhCO0FBQ0F5QixzQkFBb0JaLGtCQUFrQkMsT0FBbEIsQ0FBMEJZLGFBQTFCLEVBQXlDO0FBQUNYLFlBQVE7QUFBVCxHQUF6QyxDQUFwQjtBQUNBWSw0QkFBMEJYLEtBQUtTLGlCQUFMLENBQTFCO0FBQ0FSLFdBQVNXLFNBQVQsR0FBcUIsSUFBSVYsTUFBTUQsUUFBVixDQUFtQixXQUFuQixFQUFnQ1UsdUJBQWhDLENBQXJCO0FBQ0FWLFdBQVNXLFNBQVQsQ0FBbUJuQixXQUFuQixHQUFpQ0EsV0FBakM7QUM3S0MsU0Q4S0RRLFNBQVNXLFNBQVQsQ0FBbUJwQyxPQUFuQixDQUEyQnRDLFVBQVVzQyxPQUFyQyxDQzlLQztBRHdLeUMsQ0FBM0M7O0FBUUFVLHlCQUF5QjJCLG1CQUF6QixHQUErQyxVQUFDcEIsV0FBRDtBQUM5QyxNQUFBcUIscUJBQUEsRUFBQUMsaUJBQUEsRUFBQUMsMkJBQUE7QUFBQUQsc0JBQW9CL0IsYUFBYSwyQ0FBYixDQUFwQjtBQUNBOEIsMEJBQXdCakIsa0JBQWtCQyxPQUFsQixDQUEwQmlCLGlCQUExQixFQUE2QztBQUFDaEIsWUFBUTtBQUFULEdBQTdDLENBQXhCO0FBQ0FpQixnQ0FBOEJoQixLQUFLYyxxQkFBTCxDQUE5QjtBQUNBYixXQUFTZ0IsdUJBQVQsR0FBbUMsSUFBSWYsTUFBTUQsUUFBVixDQUFtQix5QkFBbkIsRUFBOENlLDJCQUE5QyxDQUFuQztBQUNBZixXQUFTZ0IsdUJBQVQsQ0FBaUN4QixXQUFqQyxHQUErQ0EsV0FBL0M7QUN6S0MsU0QwS0RRLFNBQVNnQix1QkFBVCxDQUFpQ3pDLE9BQWpDLENBQXlDckMsY0FBY3FDLE9BQXZELENDMUtDO0FEb0s2QyxDQUEvQzs7QUFTQVUseUJBQXlCZ0MsSUFBekIsR0FBZ0MsVUFBQ3pCLFdBQUQ7QUFDL0JQLDJCQUF5QkssTUFBekIsQ0FBZ0Msa0JBQWhDLEVBQW9ERSxXQUFwRDs7QUFFQSxNQUFHbkMsT0FBT0MsUUFBVjtBQUNDMkIsNkJBQXlCSyxNQUF6QixDQUFnQyxhQUFoQyxFQUErQ0UsV0FBL0M7QUMxS0M7O0FENEtGUCwyQkFBeUJLLE1BQXpCLENBQWdDLGlCQUFoQyxFQUFtREUsV0FBbkQ7O0FBQ0EsTUFBR25DLE9BQU9DLFFBQVY7QUFDQzJCLDZCQUF5QkssTUFBekIsQ0FBZ0MscUJBQWhDLEVBQXVEO0FBQUN0RyxnQkFBVXdHLFlBQVl4RztBQUF2QixLQUF2RDtBQUNBaUcsNkJBQXlCc0IsZUFBekIsQ0FBeUNmLFdBQXpDO0FBQ0FQLDZCQUF5QjJCLG1CQUF6QixDQUE2Q3BCLFdBQTdDO0FDeEtFLFdEeUtGUCx5QkFBeUJpQixzQkFBekIsQ0FBZ0RWLFdBQWhELENDektFO0FBQ0Q7QUQ2SjZCLENBQWhDOztBQWFBUixjQUFjLFVBQUNrQyxJQUFELEVBQU9DLEtBQVAsRUFBY0MsVUFBZDtBQUNiLE1BQUdBLFVBQUg7QUFDQ0EsaUJBQWFBLFdBQVd2VixPQUFYLENBQW1CLE9BQW5CLEVBQTRCcVYsS0FBS3RELEdBQWpDLENBQWI7O0FBQ0EsUUFBRyxDQUFDLGlCQUFpQmpSLElBQWpCLENBQXNCeVUsVUFBdEIsQ0FBSjtBQUNDQSxtQkFBYUMsUUFBUUMsV0FBUixDQUFvQkYsVUFBcEIsQ0FBYjtBQ3RLRTs7QUR1S0gsV0FBTyxjQUFZQSxVQUFaLEdBQXVCLG9CQUF2QixHQUE0Q0QsS0FBNUMsR0FBa0QsTUFBekQ7QUFKRDtBQU1DLFdBQU9BLEtBQVA7QUNyS0M7QUQ4SlcsQ0FBZDs7QUFTQWxDLHlCQUF5QnNDLFFBQXpCLEdBQW9DLFVBQUN4VixLQUFELEVBQVF5VixLQUFSLEVBQWVDLE1BQWYsRUFBdUJDLFNBQXZCO0FBQ25DLE1BQUFDLElBQUEsRUFBQVAsVUFBQSxFQUFBcFEsQ0FBQSxFQUFBNFEsS0FBQSxFQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQXBQLENBQUEsRUFBQXFQLEVBQUEsRUFBQUMsRUFBQSxFQUFBQyxJQUFBOztBQUFBLE1BQUcsQ0FBQ2xXLEtBQUQsSUFBVUEsVUFBUyxLQUF0QjtBQUNDLFdBQU8sRUFBUDtBQ2xLQzs7QURtS0YsVUFBT3lWLE1BQU01UixJQUFiO0FBQUEsU0FDTSxPQUROO0FBRUU3RCxjQUFXQSxRQUFXLHNCQUFzQkEsS0FBdEIsR0FBOEIsS0FBOUIsR0FBc0NBLEtBQXRDLEdBQThDLE1BQXpELEdBQXFFLEVBQWhGO0FBREk7O0FBRE4sU0FHTSxLQUhOO0FBSUUsVUFBR0EsS0FBSDtBQUNDLFlBQUdBLE1BQU1zRyxPQUFOLENBQWMsTUFBZCxNQUF5QixDQUE1QjtBQUNDO0FBQ0N0RyxvQkFBUSxjQUFjbVcsVUFBVW5XLEtBQVYsQ0FBZCxHQUFpQyxvQkFBakMsR0FBd0RBLEtBQXhELEdBQWdFLE1BQXhFO0FBREQsbUJBQUFvVyxLQUFBO0FBRU1uUixnQkFBQW1SLEtBQUE7QUFDTHBXLG9CQUFRLGdDQUFnQ0EsS0FBaEMsR0FBd0MsTUFBaEQ7QUFKRjtBQUFBO0FBT0NBLGtCQUFRLHFCQUFxQm1XLFVBQVVuVyxLQUFWLENBQXJCLEdBQXdDLG9CQUF4QyxHQUErREEsS0FBL0QsR0FBdUUsTUFBL0U7QUFSRjtBQUFBO0FBVUNBLGdCQUFRLEVBQVI7QUM5Skc7O0FEbUpBOztBQUhOLFNBZU0sT0FmTjtBQWdCRSxVQUFHeVYsTUFBTVksY0FBVDtBQUNDclcseUJBQUEsT0FBUUEsTUFBT3NXLFdBQVAsQ0FBbUIsVUFBbkIsRUFBK0JwVyxRQUEvQixFQUFSLEdBQVEsTUFBUjtBQUREO0FBR0NGLHlCQUFBLE9BQVFBLE1BQU91VyxRQUFmLEdBQWUsTUFBZjtBQzVKRzs7QUR3SkE7O0FBZk4sU0FvQk0sTUFwQk47QUFxQkUsVUFBR2QsTUFBTVksY0FBVDtBQUNDclcseUJBQUEsT0FBUUEsTUFBT3NXLFdBQVAsQ0FBbUIsTUFBbkIsRUFBMkJwVyxRQUEzQixFQUFSLEdBQVEsTUFBUjtBQUREO0FBR0NGLHlCQUFBLE9BQVFBLE1BQU9zSCxJQUFmLEdBQWUsTUFBZjtBQzFKRzs7QURzSkE7O0FBcEJOLFNBeUJNLFVBekJOO0FBMEJFdEgsY0FBUSxRQUFSO0FBREk7O0FBekJOLFNBMkJNLFVBM0JOO0FBNEJFLFVBQUdBLFNBQVNBLFVBQVMsT0FBckI7QUFDQ0EsZ0JBQVF3VyxRQUFRQyxFQUFSLENBQVcseUJBQVgsRUFBc0MsRUFBdEMsRUFBMENmLE1BQTFDLENBQVI7QUFERDtBQUdDMVYsZ0JBQVF3VyxRQUFRQyxFQUFSLENBQVcsd0JBQVgsRUFBcUMsRUFBckMsRUFBeUNmLE1BQXpDLENBQVI7QUN2Skc7O0FEbUpBOztBQTNCTixTQWdDTSxVQWhDTjtBQWlDRSxVQUFHMVYsU0FBU0EsTUFBTWpCLE1BQU4sS0FBZ0IsRUFBNUI7QUFDQzRILFlBQUkzRyxNQUFNNEYsS0FBTixDQUFZLEdBQVosQ0FBSjtBQUNBb1EsYUFBS3JQLEVBQUUsQ0FBRixFQUFLZixLQUFMLENBQVcsR0FBWCxDQUFMO0FBQ0FxUSxhQUFLdFAsRUFBRSxDQUFGLEVBQUtmLEtBQUwsQ0FBVyxHQUFYLENBQUw7QUFFQXNRLGVBQU9GLEdBQUcsQ0FBSCxDQUFQO0FBQ0FGLGdCQUFRRSxHQUFHLENBQUgsQ0FBUjtBQUNBSixlQUFPSSxHQUFHLENBQUgsQ0FBUDtBQUNBSCxnQkFBUUksR0FBRyxDQUFILENBQVI7QUFDQUYsa0JBQVVFLEdBQUcsQ0FBSCxDQUFWO0FBRUFqVyxnQkFBUSxJQUFJMFcsSUFBSixDQUFTUixJQUFULEVBQWVKLFFBQVEsQ0FBdkIsRUFBMEJGLElBQTFCLEVBQWdDQyxLQUFoQyxFQUF1Q0UsT0FBdkMsQ0FBUjtBQVhEO0FBYUMvVixnQkFBUSxJQUFJMFcsSUFBSixDQUFTMVcsS0FBVCxDQUFSO0FDdkpHOztBRHlKSkEsY0FBUWtULHlCQUF5QnlELFVBQXpCLENBQW9DM1csS0FBcEMsRUFBMkMyVixTQUEzQyxDQUFSO0FBaEJJOztBQWhDTixTQWlETSxPQWpETjtBQWtERSxVQUFHRixNQUFNbUIsV0FBVDtBQUNDNVcsZ0JBQVE2VyxVQUFVQyxVQUFWLENBQXFCQyxTQUFTL1csS0FBVCxDQUFyQixDQUFSO0FDdEpHOztBRG9KQTs7QUFqRE4sU0FvRE0sUUFwRE47QUFxREUsVUFBR0EsU0FBU0EsVUFBUyxDQUFyQjtBQUNDQSxnQkFBUXNWLFFBQVEwQixjQUFSLENBQXVCaFgsS0FBdkIsRUFBOEJ5VixNQUFNd0IsTUFBcEMsQ0FBUjtBQ3BKRzs7QURrSkE7O0FBcEROLFNBdURNLE9BdkROO0FBd0RFNUIsbUJBQWFJLE1BQU1KLFVBQW5COztBQUNBLFVBQUdJLE1BQU1ZLGNBQVQ7QUFDQ3JXLGdCQUFRc1MsRUFBRTNOLEdBQUYsQ0FBTTNFLEtBQU4sRUFBYSxVQUFDbVYsSUFBRDtBQUNwQixpQkFBT2xDLFlBQVlrQyxJQUFaLEVBQWtCQSxLQUFLLFFBQUwsQ0FBbEIsRUFBa0NFLFVBQWxDLENBQVA7QUFETyxVQUFSO0FBREQ7QUFJQ3JWLGdCQUFRaVQsWUFBWWpULEtBQVosRUFBbUJBLE1BQU0sUUFBTixDQUFuQixFQUFvQ3FWLFVBQXBDLENBQVI7QUNqSkc7O0FEMklBOztBQXZETixTQThETSxNQTlETjtBQStERXJWLGNBQVdBLFFBQVcsaUNBQStCQSxLQUEvQixHQUFxQyxRQUFoRCxHQUE2RCxFQUF4RTtBQS9ERjs7QUFpRUEsU0FBT0EsS0FBUDtBQXBFbUMsQ0FBcEM7O0FBc0VBa1QseUJBQXlCZ0UsUUFBekIsR0FBb0MsVUFBQzlGLE1BQUQsRUFBUytGLElBQVQ7QUFDbkMsTUFBQTFCLEtBQUE7QUFBQUEsVUFBUXJFLE9BQU9nRyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQ0QsSUFBaEMsQ0FBUjs7QUFDQSxNQUFHMUIsS0FBSDtBQUNDLFFBQUdBLE1BQU1uTyxJQUFUO0FBQ0MsYUFBT21PLE1BQU1uTyxJQUFiO0FBREQ7QUFHQyxhQUFPbU8sTUFBTTBCLElBQWI7QUFKRjtBQ3hJRTtBRHNJaUMsQ0FBcEM7O0FBU0FqRSx5QkFBeUJtRSxzQkFBekIsR0FBa0QsVUFBQ0MsUUFBRDtBQUNqRCxNQUFBdEcsSUFBQSxFQUFBdUcsV0FBQSxFQUFBdEcsWUFBQTtBQUFBRCxTQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUIwRixTQUFTdEcsSUFBMUIsQ0FBUDtBQUVBQyxpQkFBZSxFQUFmO0FBRUFzRyxnQkFBYyxFQUFkOztBQUVBLE1BQUd2RyxLQUFLd0csT0FBTCxDQUFhM0YsR0FBYixLQUFvQnlGLFNBQVNyRyxZQUFoQztBQUNDQSxtQkFBZUQsS0FBS3dHLE9BQXBCO0FBREQ7QUFHQ3ZHLG1CQUFlcUIsRUFBRW1GLEtBQUYsQ0FBUXpHLEtBQUswRyxRQUFiLEVBQXVCO0FBQUM3RixXQUFLeUYsU0FBU3JHO0FBQWYsS0FBdkIsRUFBcUQsQ0FBckQsQ0FBZjtBQzNJQzs7QUQ2SUZBLGVBQWFHLE1BQWIsQ0FBb0JXLE9BQXBCLENBQTRCLFVBQUMwRCxLQUFEO0FBQzNCLFFBQUdBLE1BQU01UixJQUFOLEtBQWMsU0FBakI7QUFDQzBULGtCQUFZaFEsSUFBWixDQUFpQmtPLEtBQWpCOztBQUNBLFVBQUdBLE1BQU1yRSxNQUFUO0FDM0lLLGVENElKcUUsTUFBTXJFLE1BQU4sQ0FBYVcsT0FBYixDQUFxQixVQUFDQyxDQUFEO0FDM0lmLGlCRDRJTHVGLFlBQVloUSxJQUFaLENBQWlCeUssQ0FBakIsQ0M1SUs7QUQySU4sVUM1SUk7QUR5SU47QUFBQSxXQUtLLElBQUd5RCxNQUFNNVIsSUFBTixLQUFjLE9BQWpCO0FBQ0o0UixZQUFNLFNBQU4sSUFBbUJBLE1BQU0sUUFBTixDQUFuQjtBQUNBLGFBQU9BLE1BQU0sUUFBTixDQUFQO0FDeklHLGFEMElIOEIsWUFBWWhRLElBQVosQ0FBaUJrTyxLQUFqQixDQzFJRztBRHVJQztBQ3JJRCxhRDBJSDhCLFlBQVloUSxJQUFaLENBQWlCa08sS0FBakIsQ0MxSUc7QUFDRDtBRDhISjtBQWFBeEUsZUFBYUcsTUFBYixHQUFzQm1HLFdBQXRCO0FBRUEsU0FBT3RHLFlBQVA7QUEzQmlELENBQWxEOztBQTZCQWlDLHlCQUF5QnlFLGNBQXpCLEdBQTBDLFVBQUNMLFFBQUQ7QUFDekMsTUFBQU0sSUFBQSxFQUFBQyxZQUFBO0FBQUFELFNBQU9sRyxHQUFHb0csS0FBSCxDQUFTbEcsT0FBVCxDQUFpQjBGLFNBQVNNLElBQTFCLENBQVA7QUFDQUMsaUJBQWUsRUFBZjs7QUFDQSxNQUFHRCxLQUFLSixPQUFMLENBQWEzRixHQUFiLEtBQW9CeUYsU0FBU08sWUFBaEM7QUFDQ0EsbUJBQWVELEtBQUtKLE9BQXBCO0FBREQ7QUFHQ0ssbUJBQWV2RixFQUFFbUYsS0FBRixDQUFRRyxLQUFLRixRQUFiLEVBQXVCO0FBQUM3RixXQUFLeUYsU0FBU087QUFBZixLQUF2QixFQUFxRCxDQUFyRCxDQUFmO0FDcklDOztBRHVJRixTQUFPQSxZQUFQO0FBUnlDLENBQTFDOztBQVdBN0UsZUFBZSxVQUFDL1EsSUFBRDtBQUNkLE1BQUE4VixRQUFBO0FBQUFBLGFBQVdDLE9BQU9DLE9BQVAsQ0FBZWhXLElBQWYsQ0FBWDs7QUFFQSxNQUFHOFYsUUFBSDtBQUNDQSxlQUFXQSxTQUFTalksT0FBVCxDQUFpQix5QkFBakIsRUFBMkMsRUFBM0MsRUFBK0NBLE9BQS9DLENBQXVELGVBQXZELEVBQXVFLEVBQXZFLENBQVg7QUNySUM7O0FEdUlGLFNBQU9pWSxRQUFQO0FBTmMsQ0FBZjs7QUFRQXBGLGFBQWEsVUFBQ3VGLElBQUQ7QUFDWixNQUFBeEMsTUFBQSxFQUFBekQsR0FBQSxFQUFBa0csSUFBQTs7QUFBQSxPQUFBRCxRQUFBLFFBQUFqRyxNQUFBaUcsS0FBQXhDLE1BQUEsWUFBQXpELElBQWlCbUcsaUJBQWpCLEtBQUcsTUFBSCxHQUFHLE1BQUgsTUFBd0MsT0FBeEM7QUFDQzFDLGFBQVMsT0FBVDtBQURELFNBRUssS0FBQXdDLFFBQUEsUUFBQUMsT0FBQUQsS0FBQXhDLE1BQUEsWUFBQXlDLEtBQWlCQyxpQkFBakIsS0FBRyxNQUFILEdBQUcsTUFBSCxNQUF3QyxPQUF4QztBQUNKMUMsYUFBUyxJQUFUO0FBREk7QUFHSkEsYUFBUyxPQUFUO0FDbklDOztBRG9JRixTQUFPQSxNQUFQO0FBUFksQ0FBYjs7QUFVQTlDLHFCQUFxQixVQUFDeEIsTUFBRCxFQUFTaUgsR0FBVDtBQUNwQixNQUFHLENBQUNBLEdBQUo7QUFDQ0EsVUFBTSxFQUFOO0FDbElDOztBRG9JRmpILFNBQU9XLE9BQVAsQ0FBZSxVQUFDMEQsS0FBRDtBQUNkLFFBQUdBLE1BQU01UixJQUFOLEtBQWMsU0FBakI7QUNsSUksYURtSUgrTyxtQkFBbUI2QyxNQUFNckUsTUFBekIsRUFBaUNpSCxHQUFqQyxDQ25JRztBRGtJSixXQUVLLElBQUc1QyxNQUFNNVIsSUFBTixLQUFjLE9BQWpCO0FBR0osVUFBRzRSLE1BQU02QyxXQUFUO0FDbElLLGVEbUlKRCxJQUFJOVEsSUFBSixDQUFTa08sTUFBTTBCLElBQWYsQ0NuSUk7QUQrSEQ7QUM3SEY7QUQwSEo7QUFRQSxTQUFPa0IsR0FBUDtBQVpvQixDQUFyQjs7QUFjQXhGLDhCQUE4QixVQUFDekIsTUFBRCxFQUFTbUgsS0FBVDtBQUM3QixNQUFBQyxZQUFBLEVBQUFDLFNBQUE7QUFBQUEsY0FBWUYsTUFBTW5CLGdCQUFOLENBQXVCLFdBQXZCLEVBQW1DLE9BQW5DLENBQVo7QUFFQW9CLGlCQUFlLEVBQWY7O0FBRUFsRyxJQUFFb0csSUFBRixDQUFPRCxVQUFVRSxXQUFqQixFQUE4QjVHLE9BQTlCLENBQXNDLFVBQUNqSyxHQUFEO0FBQ3JDLFFBQUcyUSxVQUFVRSxXQUFWLENBQXNCN1EsR0FBdEIsTUFBOEIsVUFBakM7QUMvSEksYURnSUgwUSxhQUFhalIsSUFBYixDQUFrQk8sR0FBbEIsQ0NoSUc7QUFDRDtBRDZISjs7QUFJQSxTQUFPMFEsWUFBUDtBQVQ2QixDQUE5Qjs7QUFXQTFGLDhCQUE4QixVQUFDMUIsTUFBRCxFQUFTbUgsS0FBVDtBQUM3QixNQUFBQyxZQUFBLEVBQUFJLGNBQUE7QUFBQUEsbUJBQWlCaEcsbUJBQW1CeEIsTUFBbkIsQ0FBakI7QUFFQW9ILGlCQUFlM0YsNEJBQTRCekIsTUFBNUIsRUFBb0NtSCxLQUFwQyxDQUFmO0FBRUEsU0FBT2pHLEVBQUV1RyxZQUFGLENBQWVELGNBQWYsRUFBK0JKLFlBQS9CLENBQVA7QUFMNkIsQ0FBOUI7O0FBT0F6RixtQkFBbUIsVUFBQ21GLElBQUQsRUFBT1ksS0FBUCxFQUFjeEIsUUFBZCxFQUF3QnpPLE9BQXhCO0FBQ2xCLE1BQUErTyxJQUFBLEVBQUE1RyxJQUFBLEVBQUFDLFlBQUEsRUFBQXlFLE1BQUEsRUFBQWpDLFdBQUE7O0FBQUEsTUFBR25DLE9BQU9DLFFBQVY7QUFDQ04sbUJBQWVpQyx5QkFBeUJtRSxzQkFBekIsQ0FBZ0RDLFFBQWhELENBQWY7QUFERDtBQUdDckcsbUJBQWU4SCxnQkFBZ0IxQixzQkFBaEIsQ0FBdUNDLFFBQXZDLENBQWY7QUM1SEM7O0FEOEhGNUIsV0FBUy9DLFdBQVd1RixJQUFYLENBQVQ7QUFFQXpFLGdCQUFjLEVBQWQ7O0FBRUEsTUFBR25DLE9BQU8wSCxRQUFWO0FBQ0N2RixrQkFBY25CLEVBQUVsSSxLQUFGLENBQVE2Tyx1QkFBdUJDLHVCQUF2QixFQUFSLENBQWQ7QUFDQXpGLGdCQUFZMEYsT0FBWixHQUFzQjdCLFNBQVNoUSxJQUEvQjtBQUNBbU0sZ0JBQVkyRixTQUFaLEdBQXdCOUIsU0FBUytCLEtBQWpDO0FBQ0E1RixnQkFBWTZGLGtCQUFaLEdBQWlDaEMsU0FBU2dDLGtCQUExQztBQUNBN0YsZ0JBQVk4RixRQUFaLEdBQXVCakMsU0FBU0gsSUFBaEM7QUFDQTFELGdCQUFZK0YsZUFBWixHQUE4QmxDLFNBQVNtQyxXQUF2QztBQUNBaEcsZ0JBQVlpRyxjQUFaLEdBQTZCcEMsU0FBU29DLGNBQXRDO0FBQ0FqRyxnQkFBWWtHLGNBQVosR0FBNkJyQyxTQUFTcUMsY0FBdEM7QUFDQWxHLGdCQUFZbUcsZ0JBQVosR0FBK0J0QyxTQUFTcUMsY0FBeEM7QUM5SEM7O0FEZ0lGbEcsY0FBWTZELFFBQVosR0FBdUJBLFFBQXZCO0FBQ0E3RCxjQUFZeEMsWUFBWixHQUEyQkEsWUFBM0I7QUFDQXdDLGNBQVlpQyxNQUFaLEdBQXFCQSxNQUFyQjtBQUNBakMsY0FBWWtDLFNBQVosR0FBd0J1QyxLQUFLdkMsU0FBN0I7QUFDQWxDLGNBQVlxRixLQUFaLEdBQW9CeEIsU0FBU3dCLEtBQTdCO0FBQ0FyRixjQUFZb0csYUFBWixHQUE0QjNCLEtBQUtyRyxHQUFqQzs7QUFFQSxNQUFHUCxPQUFPQyxRQUFWO0FBQ0MsUUFBQTFJLFdBQUEsT0FBR0EsUUFBU2lSLFFBQVosR0FBWSxNQUFaO0FBQ0M5SSxhQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUI7QUFBQ0MsYUFBS3lGLFNBQVN0RztBQUFmLE9BQWpCLENBQVA7QUFFQTRHLGFBQU9sRyxHQUFHb0csS0FBSCxDQUFTbEcsT0FBVCxDQUFpQjtBQUFDQyxhQUFLeUYsU0FBU007QUFBZixPQUFqQixDQUFQO0FBRUFuRSxrQkFBWXNHLHVCQUFaLEdBQXNDbEgsNEJBQTRCN0IsS0FBS3dHLE9BQUwsQ0FBYXBHLE1BQXpDLEVBQWlEd0csS0FBS0osT0FBTCxDQUFhZSxLQUE5RCxDQUF0QztBQU5GO0FDdEhFOztBRDhIRixTQUFPOUUsV0FBUDtBQXBDa0IsQ0FBbkI7O0FBc0NBUCx5QkFBeUJ5RCxVQUF6QixHQUFzQyxVQUFDZixJQUFELEVBQU9ELFNBQVA7QUFDckMsTUFBQXFFLE9BQUE7O0FBQUEsTUFBRzFJLE9BQU9DLFFBQVY7QUFDQ3lJLGNBQVUsS0FBVjtBQUREO0FBR0NBLGNBQVUsSUFBVjtBQzFIQzs7QUQ0SEYsTUFBRyxDQUFDckUsU0FBRCxJQUFjQSxjQUFZLENBQTdCO0FBQ0NBLGdCQUFZLENBQVo7QUMxSEM7O0FENEhGLFNBQU9zRSxPQUFPckUsSUFBUCxFQUFhRCxTQUFiLENBQXVCQSxTQUF2QixFQUFrQ3FFLE9BQWxDLEVBQTJDRSxNQUEzQyxDQUFrRCxrQkFBbEQsQ0FBUDtBQVRxQyxDQUF0Qzs7QUFXQWhILHlCQUF5QmlILGVBQXpCLEdBQTJDLFVBQUNqQyxJQUFELEVBQU9ZLEtBQVAsRUFBY3hCLFFBQWQsRUFBd0J6TyxPQUF4QjtBQUUxQyxNQUFBdVIsSUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxzQkFBQSxFQUFBQyxnQkFBQSxFQUFBOUcsV0FBQTtBQUFBQSxnQkFBY1YsaUJBQWlCbUYsSUFBakIsRUFBdUJZLEtBQXZCLEVBQThCeEIsUUFBOUIsRUFBd0N6TyxPQUF4QyxDQUFkO0FBRUE0SyxjQUFZeEcsUUFBWixHQUF1QixLQUF2Qjs7QUFFQSxNQUFBcEUsV0FBQSxPQUFHQSxRQUFTb0UsUUFBWixHQUFZLE1BQVo7QUFDQ3dHLGdCQUFZeEcsUUFBWixHQUF1QixJQUF2QjtBQzNIQzs7QUQ2SEZzTixxQkFBbUJDLGdCQUFnQkMsV0FBaEIsQ0FBNEJuRCxRQUE1QixFQUFBek8sV0FBQSxPQUFzQ0EsUUFBUzZSLFlBQS9DLEdBQStDLE1BQS9DLENBQW5CO0FBRUFILHFCQUFtQkEsaUJBQWlCemEsT0FBakIsQ0FBeUIsZUFBekIsRUFBeUMsa0JBQXpDLENBQW5COztBQUVBLE1BQUcsRUFBQStJLFdBQUEsT0FBQ0EsUUFBU2lSLFFBQVYsR0FBVSxNQUFWLENBQUg7QUFDQ1MsdUJBQW1CQSxpQkFBaUJ6YSxPQUFqQixDQUF5QixjQUF6QixFQUF3QyxpQkFBeEMsQ0FBbkI7QUM3SEM7O0FEK0hGdWEscUJBQW1CeEcsa0JBQWtCQyxPQUFsQixDQUEwQnlHLGdCQUExQixFQUE0QztBQUFDeEcsWUFBUTtBQUFULEdBQTVDLENBQW5CO0FBRUF1RywyQkFBeUJ0RyxLQUFLcUcsZ0JBQUwsQ0FBekI7QUFFQXBHLFdBQVMwRyxzQkFBVCxHQUFrQyxJQUFJekcsTUFBTUQsUUFBVixDQUFtQix3QkFBbkIsRUFBNkNxRyxzQkFBN0MsQ0FBbEM7QUFFQXJHLFdBQVMwRyxzQkFBVCxDQUFnQ2xILFdBQWhDLEdBQThDQSxXQUE5QztBQUVBUSxXQUFTMEcsc0JBQVQsQ0FBZ0NuSSxPQUFoQyxDQUF3Q25DLHFCQUFxQm1DLE9BQTdEO0FBRUFVLDJCQUF5QmdDLElBQXpCLENBQThCekIsV0FBOUI7QUFFQTJHLFNBQU9sRyxNQUFNMEcsY0FBTixDQUFxQjNHLFNBQVMwRyxzQkFBOUIsRUFBc0RsSCxXQUF0RCxDQUFQO0FBRUEsU0FBTyxnQ0FFSDJHLElBRkcsR0FFRSxVQUZUO0FBOUIwQyxDQUEzQzs7QUFvQ0FsSCx5QkFBeUIySCxhQUF6QixHQUF5QyxVQUFDM0MsSUFBRCxFQUFPWSxLQUFQLEVBQWN4QixRQUFkLEVBQXdCek8sT0FBeEI7QUFFeEMsTUFBQXVSLElBQUEsRUFBQXBKLElBQUEsRUFBQXlDLFdBQUEsRUFBQXFILGFBQUEsRUFBQUMsbUJBQUEsRUFBQUMsVUFBQTtBQUFBdkgsZ0JBQWNWLGlCQUFpQm1GLElBQWpCLEVBQXVCWSxLQUF2QixFQUE4QnhCLFFBQTlCLENBQWQ7QUFFQXRHLFNBQU9VLEdBQUdDLEtBQUgsQ0FBU0MsT0FBVCxDQUFpQjBGLFNBQVN0RyxJQUExQixDQUFQOztBQUNBLE1BQUdBLEtBQUtpSyxjQUFMLEtBQXVCLE9BQXZCLEtBQUFwUyxXQUFBLE9BQWtDQSxRQUFTNlIsWUFBM0MsR0FBMkMsTUFBM0MsTUFBMkQsT0FBOUQ7QUFDQ00saUJBQWFoSSxhQUFhLHlDQUFiLENBQWI7QUFERDtBQUdDZ0ksaUJBQWFoSSxhQUFhLG1DQUFiLENBQWI7QUN0SUM7O0FEd0lGOEgsa0JBQWdCakgsa0JBQWtCQyxPQUFsQixDQUEwQmtILFVBQTFCLEVBQXNDO0FBQUNqSCxZQUFRO0FBQVQsR0FBdEMsQ0FBaEI7QUFFQWdILHdCQUFzQi9HLEtBQUs4RyxhQUFMLENBQXRCO0FBRUE3RyxXQUFTaUgsbUJBQVQsR0FBK0IsSUFBSWhILE1BQU1ELFFBQVYsQ0FBbUIscUJBQW5CLEVBQTBDOEcsbUJBQTFDLENBQS9CO0FBRUE5RyxXQUFTaUgsbUJBQVQsQ0FBNkJ6SCxXQUE3QixHQUEyQ0EsV0FBM0M7QUFFQVEsV0FBU2lILG1CQUFULENBQTZCMUksT0FBN0IsQ0FBcUNwQyxlQUFlb0MsT0FBcEQ7QUFFQTRILFNBQU9sRyxNQUFNMEcsY0FBTixDQUFxQjNHLFNBQVNpSCxtQkFBOUIsRUFBbUQ1RCxTQUFTNkQsTUFBNUQsQ0FBUDtBQUVBLFNBQU9mLElBQVA7QUF0QndDLENBQXpDOztBQXdCQWxILHlCQUF5QmtJLGlCQUF6QixHQUE2QyxVQUFDbEQsSUFBRCxFQUFPWSxLQUFQLEVBQWN4QixRQUFkO0FBRTVDLE1BQUErRCxrQkFBQSxFQUFBQyxjQUFBLEVBQUFDLHdCQUFBLEVBQUFuQixJQUFBLEVBQUEzRyxXQUFBO0FBQUFBLGdCQUFjVixpQkFBaUJtRixJQUFqQixFQUF1QlksS0FBdkIsRUFBOEJ4QixRQUE5QixDQUFkO0FBRUFnRSxtQkFBaUJ0SSxhQUFhLGlEQUFiLENBQWpCO0FBRUFxSSx1QkFBcUJ4SCxrQkFBa0JDLE9BQWxCLENBQTBCd0gsY0FBMUIsRUFBMEM7QUFBQ3ZILFlBQVE7QUFBVCxHQUExQyxDQUFyQjtBQUVBd0gsNkJBQTJCdkgsS0FBS3FILGtCQUFMLENBQTNCO0FBRUFwSCxXQUFTdUgseUJBQVQsR0FBcUMsSUFBSXRILE1BQU1ELFFBQVYsQ0FBbUIsMkJBQW5CLEVBQWdEc0gsd0JBQWhELENBQXJDO0FBRUF0SCxXQUFTdUgseUJBQVQsQ0FBbUMvSCxXQUFuQyxHQUFpREEsV0FBakQ7QUFFQVEsV0FBU3VILHlCQUFULENBQW1DaEosT0FBbkMsQ0FBMkNsQywyQkFBMkJrQyxPQUF0RTtBQUVBNEgsU0FBT2xHLE1BQU0wRyxjQUFOLENBQXFCM0csU0FBU3VILHlCQUE5QixDQUFQO0FBRUEsU0FBT3BCLElBQVA7QUFsQjRDLENBQTdDOztBQW9CQWxILHlCQUF5QnVJLHVCQUF6QixHQUFtRCxVQUFDdkQsSUFBRCxFQUFPWSxLQUFQLEVBQWN4QixRQUFkLEVBQXdCek8sT0FBeEI7QUFDbEQsTUFBQXVSLElBQUEsRUFBQXNCLHdCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLDhCQUFBLEVBQUFuSSxXQUFBO0FBQUFBLGdCQUFjVixpQkFBaUJtRixJQUFqQixFQUF1QlksS0FBdkIsRUFBOEJ4QixRQUE5QixDQUFkO0FBRUE3RCxjQUFZeEcsUUFBWixHQUF1QixLQUF2Qjs7QUFFQSxNQUFBcEUsV0FBQSxPQUFHQSxRQUFTb0UsUUFBWixHQUFZLE1BQVo7QUFDQ3dHLGdCQUFZeEcsUUFBWixHQUF1QixJQUF2QjtBQy9JQzs7QURpSkYwTyx5QkFBdUIzSSxhQUFhLDhDQUFiLENBQXZCO0FBRUEwSSw2QkFBMkI3SCxrQkFBa0JDLE9BQWxCLENBQTBCNkgsb0JBQTFCLEVBQWdEO0FBQUM1SCxZQUFRO0FBQVQsR0FBaEQsQ0FBM0I7QUFFQTZILG1DQUFpQzVILEtBQUswSCx3QkFBTCxDQUFqQztBQUVBekgsV0FBUzRILHNCQUFULEdBQWtDLElBQUkzSCxNQUFNRCxRQUFWLENBQW1CLHdCQUFuQixFQUE2QzJILDhCQUE3QyxDQUFsQztBQUVBM0gsV0FBUzRILHNCQUFULENBQWdDcEksV0FBaEMsR0FBOENBLFdBQTlDO0FBRUFRLFdBQVM0SCxzQkFBVCxDQUFnQ3JKLE9BQWhDLENBQXdDaEMsaUJBQWlCZ0MsT0FBekQ7QUFFQTRILFNBQU9sRyxNQUFNMEcsY0FBTixDQUFxQjNHLFNBQVM0SCxzQkFBOUIsRUFBc0RwSSxXQUF0RCxDQUFQO0FBRUEsU0FBTzJHLElBQVA7QUF0QmtELENBQW5EOztBQXdCQWxILHlCQUF5QjRJLHFCQUF6QixHQUFpRCxVQUFDNUQsSUFBRCxFQUFPWSxLQUFQLEVBQWN4QixRQUFkLEVBQXdCek8sT0FBeEI7QUFDaEQsTUFBQXVSLElBQUEsRUFBQTJCLHNCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLDRCQUFBLEVBQUF4SSxXQUFBO0FBQUFBLGdCQUFjVixpQkFBaUJtRixJQUFqQixFQUF1QlksS0FBdkIsRUFBOEJ4QixRQUE5QixDQUFkO0FBRUE3RCxjQUFZeEcsUUFBWixHQUF1QixLQUF2Qjs7QUFFQSxNQUFBcEUsV0FBQSxPQUFHQSxRQUFTb0UsUUFBWixHQUFZLE1BQVo7QUFDQ3dHLGdCQUFZeEcsUUFBWixHQUF1QixJQUF2QjtBQ3BKQzs7QURzSkYrTyx1QkFBcUJoSixhQUFhLDRDQUFiLENBQXJCO0FBRUErSSwyQkFBeUJsSSxrQkFBa0JDLE9BQWxCLENBQTBCa0ksa0JBQTFCLEVBQThDO0FBQUNqSSxZQUFRO0FBQVQsR0FBOUMsQ0FBekI7QUFFQWtJLGlDQUErQmpJLEtBQUsrSCxzQkFBTCxDQUEvQjtBQUVBOUgsV0FBU2lJLG9CQUFULEdBQWdDLElBQUloSSxNQUFNRCxRQUFWLENBQW1CLHNCQUFuQixFQUEyQ2dJLDRCQUEzQyxDQUFoQztBQUVBaEksV0FBU2lJLG9CQUFULENBQThCekksV0FBOUIsR0FBNENBLFdBQTVDO0FBRUFRLFdBQVNpSSxvQkFBVCxDQUE4QjFKLE9BQTlCLENBQXNDL0IsZUFBZStCLE9BQXJEO0FBRUE0SCxTQUFPbEcsTUFBTTBHLGNBQU4sQ0FBcUIzRyxTQUFTaUksb0JBQTlCLEVBQW9EekksV0FBcEQsQ0FBUDtBQUVBLFNBQU8yRyxJQUFQO0FBdEJnRCxDQUFqRDs7QUF3QkFsSCx5QkFBeUJpSixlQUF6QixHQUEyQyxVQUFDN0UsUUFBRDtBQUMxQyxNQUFBOEUsV0FBQSxFQUFBbkwsWUFBQTtBQUFBQSxpQkFBZThILGdCQUFnQnRILGNBQWhCLENBQStCNkYsU0FBU3RHLElBQXhDLEVBQThDc0csU0FBU3JHLFlBQXZELENBQWY7QUFFQW1MLGdCQUFjbkwsYUFBYW1MLFdBQTNCOztBQUVBLE1BQUdBLGVBQWVBLFlBQVl0YyxPQUFaLENBQW9CLEtBQXBCLEVBQTBCLEVBQTFCLEVBQThCQSxPQUE5QixDQUFzQyxLQUF0QyxFQUE0QyxFQUE1QyxFQUFnRGYsTUFBaEQsR0FBeUQsQ0FBM0U7QUFDQ3FkLGtCQUFjLDhDQUE4Q0EsV0FBNUQ7QUN6SkUsV0QwSkZBLGVBQWUsb0VDMUpiO0FEd0pIO0FDdEpHLFdEMEpGQSxjQUFjLEVDMUpaO0FBQ0Q7QURnSndDLENBQTNDOztBQWFBbEoseUJBQXlCbUosZUFBekIsR0FBMkMsVUFBQ25FLElBQUQsRUFBT1ksS0FBUCxFQUFjeEIsUUFBZCxFQUF3QnpPLE9BQXhCO0FBRTFDLE1BQUF5VCxVQUFBLEVBQUFDLFVBQUEsRUFBQW5DLElBQUEsRUFBQW9DLGNBQUEsRUFBQUMsT0FBQSxFQUFBekwsSUFBQSxFQUFBMEwsZUFBQSxFQUFBQyxtQkFBQSxFQUFBQyxJQUFBLEVBQUFDLGNBQUEsRUFBQUMsZ0JBQUEsRUFBQTdCLGNBQUEsRUFBQXZGLE1BQUEsRUFBQXFILFlBQUEsRUFBQUMsY0FBQSxFQUFBL0ssR0FBQSxFQUFBa0csSUFBQSxFQUFBOEUsaUJBQUEsRUFBQUMsZUFBQSxFQUFBQyxhQUFBLEVBQUFDLGdCQUFBLEVBQUFDLEtBQUEsRUFBQUMsVUFBQSxFQUFBQyxLQUFBO0FBQUFuRCxTQUFPbEgseUJBQXlCaUgsZUFBekIsQ0FBeUNqQyxJQUF6QyxFQUErQ1ksS0FBL0MsRUFBc0R4QixRQUF0RCxFQUFnRXpPLE9BQWhFLENBQVA7QUFFQWtVLGlCQUFlN0oseUJBQXlCaUosZUFBekIsQ0FBeUM3RSxRQUF6QyxDQUFmO0FBRUFrRixtQkFBQSxDQUFBdkssTUFBQVgsT0FBQWtNLFFBQUEsV0FBQUMsV0FBQSxhQUFBdEYsT0FBQWxHLElBQUF5TCxPQUFBLFlBQUF2RixLQUE4RHhaLEdBQTlELEdBQThELE1BQTlELEdBQThELE1BQTlEO0FBQ0FrZSxtQkFBaUJ2RixTQUFTcUcsVUFBMUI7QUFDQWpJLFdBQVMvQyxXQUFXdUYsSUFBWCxDQUFUO0FBQ0E4RSxtQkFBaUIsMmhCQWlCRDFGLFNBQVNNLElBakJSLEdBaUJhLHFCQWpCYixHQWtCQU4sU0FBU3dCLEtBbEJULEdBa0JlLHdiQWxCZixHQWtDWTBELGNBbENaLEdBa0MyQiw4QkFsQzNCLEdBbUNXb0IsS0FBS0MsU0FBTCxDQUFlaEIsY0FBZixDQW5DWCxHQW1DMEMsc2JBbkMzRDs7QUFtREEsTUFBRyxDQUFDdkgsUUFBUXdJLFFBQVIsRUFBSjtBQUNDOU0sV0FBT1UsR0FBR0MsS0FBSCxDQUFTQyxPQUFULENBQWlCMEYsU0FBU3RHLElBQTFCLENBQVA7O0FBQ0EsU0FBQUEsUUFBQSxPQUFHQSxLQUFNaUssY0FBVCxHQUFTLE1BQVQsTUFBMkIsT0FBM0I7QUFDQ0EsdUJBQWlCLGdCQUFqQjtBQUhGO0FDek1FOztBRDhNRixPQUFBcFMsV0FBQSxPQUFHQSxRQUFTNlIsWUFBWixHQUFZLE1BQVosTUFBNEIsT0FBNUI7QUFDQ08scUJBQWlCLGdCQUFqQjtBQzVNQzs7QUQ4TUYsTUFBQXBTLFdBQUEsT0FBR0EsUUFBU29TLGNBQVosR0FBWSxNQUFaO0FBQ0NBLHFCQUFpQnBTLFFBQVFvUyxjQUF6QjtBQzVNQzs7QUQ4TUYsTUFBRyxDQUFDcFMsT0FBRCxJQUFZQSxRQUFRa1YsU0FBUixLQUFxQixJQUFwQztBQUNDVixZQUFRbksseUJBQXlCMkgsYUFBekIsQ0FBdUMzQyxJQUF2QyxFQUE2Q1ksS0FBN0MsRUFBb0R4QixRQUFwRCxDQUFSO0FBREQ7QUFHQytGLFlBQVEsRUFBUjtBQzVNQzs7QUQ4TUZQLHFCQUFtQixFQUFuQjs7QUFFQSxNQUFHeEYsWUFBWUEsU0FBUzBHLGNBQXhCO0FBQ0MsUUFBRzFHLFNBQVMwRyxjQUFULEtBQTJCLFVBQTlCO0FBQ0NsQix5QkFBbUIsYUFBbkI7QUFERCxXQUVLLElBQUl4RixTQUFTMEcsY0FBVCxLQUEyQixVQUEvQjtBQUNKbEIseUJBQW1CLFlBQW5CO0FBSkY7QUN4TUU7O0FENk1GLE1BQUcsQ0FBQ2pVLE9BQUQsSUFBWUEsUUFBUW9WLGVBQVIsS0FBMkIsSUFBMUM7QUFDQzFCLGlCQUFhckoseUJBQXlCa0ksaUJBQXpCLENBQTJDbEQsSUFBM0MsRUFBaURZLEtBQWpELEVBQXdEeEIsUUFBeEQsQ0FBYjtBQUNBMkYsd0JBQW9CL0oseUJBQXlCdUksdUJBQXpCLENBQWlEdkQsSUFBakQsRUFBdURZLEtBQXZELEVBQThEeEIsUUFBOUQsRUFBd0V6TyxPQUF4RSxDQUFwQjtBQUNBcVUsc0JBQWtCaEsseUJBQXlCNEkscUJBQXpCLENBQStDNUQsSUFBL0MsRUFBcURZLEtBQXJELEVBQTREeEIsUUFBNUQsRUFBc0V6TyxPQUF0RSxDQUFsQjtBQUhEO0FBS0MwVCxpQkFBYSxFQUFiO0FBQ0FVLHdCQUFvQixFQUFwQjtBQUNBQyxzQkFBa0IsRUFBbEI7QUMzTUM7O0FEOE1GSyxVQUFRLE9BQVI7O0FBRUEsTUFBQTFVLFdBQUEsT0FBR0EsUUFBUzBVLEtBQVosR0FBWSxNQUFaO0FBQ0NBLFlBQVEsRUFBUjtBQzdNQzs7QUQrTUZkLFlBQVVuTCxPQUFPaUUsV0FBUCxDQUFtQixhQUFuQixDQUFWO0FBRUErRyxlQUFhLGdGQUF5RUcsT0FBekUsR0FBaUYsS0FBOUY7QUFFQWEsZUFBYSxFQUFiOztBQUNBLE1BQUcsQ0FBQ2hMLEVBQUU0TCxPQUFGLENBQVViLEtBQVYsQ0FBSjtBQUNDQyxpQkFBYSxTQUFiO0FDL01DOztBRGdORixPQUFBelUsV0FBQSxPQUFHQSxRQUFTc1YsTUFBWixHQUFZLE1BQVosTUFBc0IsT0FBdEIsS0FBR3RWLFdBQUEsT0FBOEJBLFFBQVNpUixRQUF2QyxHQUF1QyxNQUExQztBQUNDcUQsb0JBQWdCLEVBQWhCO0FBREQ7QUFHQ0Esb0JBQWdCLHFSQUdnSTNHLFFBQVFDLEVBQVIsQ0FBVyxxQkFBWCxFQUFrQyxFQUFsQyxFQUFzQ2YsTUFBdEMsQ0FIaEksR0FHOEssZ0pBSDlLLEdBSXVHNEgsVUFKdkcsR0FJa0gsV0FKbEgsR0FJNEg5RyxRQUFRQyxFQUFSLENBQVcsMkJBQVgsRUFBd0MsRUFBeEMsRUFBNENmLE1BQTVDLENBSjVILEdBSWdMLGtDQUpoTTtBQzlNQzs7QUR1TkYwSCxxQkFBbUIsMmhDQUFuQjs7QUF3Q0EsTUFBQXZVLFdBQUEsT0FBR0EsUUFBU3VWLE1BQVosR0FBWSxNQUFaO0FBQ0M5QixpQkFBYSxFQUFiO0FDNVBDOztBRDhQRnRMLFNBQU9VLEdBQUdDLEtBQUgsQ0FBU0MsT0FBVCxDQUFpQjtBQUFDQyxTQUFLeUYsU0FBU3RHO0FBQWYsR0FBakIsQ0FBUDtBQUNBMkwsd0JBQXNCLEVBQXRCOztBQUNBLE1BQUczTCxJQUFIO0FBQ0MwTCxzQkFBa0IxTCxLQUFLcU4sV0FBdkI7O0FBQ0EsUUFBRzNCLGVBQUg7QUFDQ0Esd0JBQWtCQSxnQkFBZ0I1YyxPQUFoQixDQUF3QixLQUF4QixFQUE4QixPQUE5QixDQUFsQjtBQUNBNmMsNEJBQXNCLHdFQUdqQkQsZUFIaUIsR0FHRCxtQkFIckI7QUFKRjtBQ3JQRTs7QURpUUZFLFNBQU8scUhBS0ZOLFVBTEUsR0FLUyxvTEFMVCxJQVFGelQsUUFBUXlWLE9BQVIsSUFBbUIsRUFSakIsSUFRb0IsMENBUnBCLEdBWU9mLEtBWlAsR0FZYSx5YUFaYixJQW9DRixDQUFBMVUsV0FBQSxPQUFDQSxRQUFTdVYsTUFBVixHQUFVLE1BQVYsS0FBb0IsRUFwQ2xCLElBb0NxQiw2TUFwQ3JCLEdBNENFakIsYUE1Q0YsR0E0Q2dCLHVFQTVDaEIsR0E4Q3dCbEMsY0E5Q3hCLEdBOEN1QyxxRkE5Q3ZDLEdBZ0RtQzZCLGdCQWhEbkMsR0FnRG9ELGlCQWhEcEQsR0FpRE1ILG1CQWpETixHQWlEMEIsMElBakQxQixHQXFEU0osVUFyRFQsR0FxRG9CLGlCQXJEcEIsR0FzRFNVLGlCQXREVCxHQXNEMkIsaUJBdEQzQixHQXVEU0MsZUF2RFQsR0F1RHlCLG9DQXZEekIsR0F5RFE5QyxJQXpEUixHQXlEYSxtRkF6RGIsR0E4RElpRCxLQTlESixHQThEVSxvR0E5RFYsR0F1RUtMLGNBdkVMLEdBdUVvQixHQXZFcEIsR0F1RXVCRCxZQXZFdkIsR0F1RW9DLEdBdkVwQyxHQXVFdUNLLGdCQXZFdkMsR0F1RXdELG9CQXZFL0Q7QUEyRUEsU0FBT1IsSUFBUDtBQXpQMEMsQ0FBM0MsQzs7Ozs7Ozs7Ozs7O0FFbm1CQSxJQUFBMkIsTUFBQTtBQUFBL0Qsa0JBQWtCLEVBQWxCO0FBRUErRCxTQUFTLGNBQVQ7O0FBR0EvRCxnQkFBZ0JnRSxjQUFoQixHQUFpQztBQUNoQyxNQUFBQyxTQUFBLEVBQUFDLGdCQUFBLEVBQUFDLEdBQUE7QUFBQUYsY0FBWSxtQkFBWjtBQUlBQyxxQkFBbUIsZUFBbkI7O0FBRUEsYUFBQUUsUUFBQSxvQkFBQUEsYUFBQSxPQUFHQSxTQUFVQyxrQkFBYixHQUFhLE1BQWI7QUFDQ0osZ0JBQVksNEJBQ2NHLFNBQVNDLGtCQUR2QixHQUMwQyxrQkFEdEQ7QUFHQUgsdUJBQW1CLEVBQW5CO0FDSEM7O0FES0YsYUFBQUUsUUFBQSxvQkFBQUEsYUFBQSxPQUFHQSxTQUFVSCxTQUFiLEdBQWEsTUFBYjtBQUNDQSxnQkFBWSxLQUNURyxTQUFTSCxTQURaO0FBR0FDLHVCQUFtQixFQUFuQjtBQ0xDOztBRE9GQyxRQUNDO0FBQUFGLGVBQVdBLFNBQVg7QUFDQUMsc0JBQWtCQTtBQURsQixHQUREO0FBSUEsU0FBT0MsR0FBUDtBQXZCZ0MsQ0FBakM7O0FBeUJBbkUsZ0JBQWdCc0UsbUJBQWhCLEdBQXNDLFVBQUN4SCxRQUFELEVBQVd5SCxPQUFYO0FBRXJDLE1BQUFDLFlBQUEsRUFBQXRMLFFBQUE7QUFBQUEsYUFBVyw2S0FHSSxLQUFLOEssY0FBTCxHQUFzQkUsZ0JBSDFCLEdBRzJDLGdFQUgzQyxHQUtMLEtBQUtGLGNBQUwsR0FBc0JDLFNBTGpCLEdBSzJCLDJOQUx0QztBQW1CQU8saUJBQWUzTyxxQkFBcUJtQyxPQUFyQixDQUE2QndNLFlBQTdCLENBQTBDMUgsUUFBMUMsQ0FBZjtBQUVBMEgsZUFBYWpOLE9BQWIsQ0FBcUIsVUFBQ2tOLFdBQUQ7QUFFcEIsUUFBQUMsZ0JBQUEsRUFBQUMsUUFBQSxFQUFBQyxRQUFBLEVBQUFDLGdCQUFBO0FBQUFELGVBQVcsRUFBWDs7QUFDQSxRQUFHLFNBQUFSLFFBQUEsb0JBQUFBLGFBQUEsT0FBQ0EsU0FBVUMsa0JBQVgsR0FBVyxNQUFYLGFBQUFELFFBQUEsb0JBQUFBLGFBQUEsT0FBaUNBLFNBQVVDLGtCQUEzQyxHQUEyQyxNQUEzQyxNQUFpRUksWUFBWTlILElBQWhGO0FBQ0MsVUFBRzhILFlBQVkzRyxXQUFmO0FBQ0M4RyxtQkFBVyxhQUFYO0FDdkJHOztBRHlCSixVQUFHTCxPQUFIO0FBQ0NLLG1CQUFXLEVBQVg7QUN2Qkc7O0FEeUJKRCxpQkFBVzdKLFFBQVFnSyxzQkFBUixDQUErQkwsWUFBWTlILElBQTNDLENBQVg7O0FBRUEsVUFBRzlHLHFCQUFxQm1DLE9BQXJCLENBQTZCK00sY0FBN0IsQ0FBNENOLFdBQTVDLENBQUg7QUFDQ3ZMLG9CQUFZdUwsWUFBWU8sUUFBeEI7QUFDQTlMLG9CQUFZLDBCQUNXMEwsUUFEWCxHQUNvQixrQ0FEcEIsR0FFaUJILFlBQVk5SCxJQUY3QixHQUVrQyxnRUFGbEMsR0FJdUNnSSxRQUp2QyxHQUlnRCwyQkFKaEQsR0FJeUVGLFlBQVlRLFVBSnJGLEdBSWdHLG9DQUpoRyxHQUttQlIsWUFBWTlILElBTC9CLEdBS29DLGFBTGhEO0FDeEJJLGVEZ0NKekQsWUFBWXVMLFlBQVlTLE1DaENwQjtBRHNCTDtBQVlDLFlBQUdyUCxxQkFBcUJtQyxPQUFyQixDQUE2Qm1OLFFBQTdCLENBQXNDVixZQUFZcGIsSUFBbEQsRUFBd0QsZUFBeEQsQ0FBSDtBQUNDNlAsc0JBQVl1TCxZQUFZTyxRQUF4QjtBQUNBOUwsc0JBQVksNkNBQzhCeUwsUUFEOUIsR0FDdUMsaUJBRHZDLEdBQ3NERixZQUFZUSxVQURsRSxHQUM2RSxpQ0FEN0UsR0FFZ0JSLFlBQVk5SCxJQUY1QixHQUVpQyx5QkFGN0M7QUMvQkssaUJEb0NMekQsWUFBWXVMLFlBQVlTLE1DcENuQjtBRDZCTjtBQVNDaE0sc0JBQVl1TCxZQUFZTyxRQUF4Qjs7QUFFQSxjQUFHVCxPQUFIO0FBQ0NNLCtCQUFtQixFQUFuQjtBQUNBSCwrQkFBbUIsRUFBbkI7QUFGRDtBQUlDRywrQkFBbUIsV0FBV0osWUFBWVcsVUFBMUM7QUFDQVYsK0JBQW1CLFdBQVdELFlBQVlXLFVBQTFDO0FDcENLOztBRHNDTmxNLHNCQUFZLG1DQUNvQnlMLFFBRHBCLEdBQzZCLEdBRDdCLEdBQ2dDRSxnQkFEaEMsR0FDaUQsR0FEakQsR0FDb0RELFFBRHBELEdBQzZELGtDQUQ3RCxHQUVpQkgsWUFBWTlILElBRjdCLEdBRWtDLDZDQUZsQyxHQUlvQmdJLFFBSnBCLEdBSTZCLEdBSjdCLEdBSWdDRCxnQkFKaEMsR0FJaUQsaUJBSmpELEdBSWdFRCxZQUFZUSxVQUo1RSxHQUl1RiwrQkFKdkYsR0FLY1IsWUFBWTlILElBTDFCLEdBSytCLHlCQUwzQztBQ3BDSyxpQkQ0Q0x6RCxZQUFZdUwsWUFBWVMsTUM1Q25CO0FETVA7QUFURDtBQ01HO0FEVEo7QUFvREFoTSxjQUFZLDh3QkFBWjtBQTZCQSxTQUFPQSxRQUFQO0FBeEdxQyxDQUF0Qzs7QUE0R0E4RyxnQkFBZ0JxRixTQUFoQixHQUNDO0FBQUEsYUFBUyxVQUFDdkksUUFBRDtBQUVSLFFBQUE1RCxRQUFBO0FBQUFBLGVBQVcsc0dBR2dCOEcsZ0JBQWdCZ0UsY0FBaEIsR0FBaUNDLFNBSGpELEdBRzJELDJtQ0FIdEU7QUF3Q0EsV0FBTy9LLFFBQVA7QUExQ0Q7QUE0Q0FvTSxTQUFPLFVBQUN4SSxRQUFEO0FBQ04sV0FBT2tELGdCQUFnQnNFLG1CQUFoQixDQUFvQ3hILFFBQXBDLENBQVA7QUE3Q0Q7QUFBQSxDQUREO0FBZ0dBa0QsZ0JBQWdCdUYsY0FBaEIsR0FDQztBQUFBbkcsb0JBQWtCO0FBQ2pCLFFBQUFwWixJQUFBLEVBQUF3ZixnQkFBQTtBQUFBQSx1QkFBbUJqSCxnQkFBZ0JrSCxXQUFoQixFQUFuQjtBQUNBemYsV0FBTztBQUNOOEcsWUFBTSxlQURBO0FBRU40WSxZQUFNO0FBQ0w1WSxjQUFNLGVBREQ7QUFFTDZZLFlBQUksZUFGQztBQUdMLGlCQUFPLHlCQUhGO0FBSUxDLGVBQU87QUFKRjtBQUZBLEtBQVA7QUFVQTVmLFNBQUswZixJQUFMLENBQVVHLFFBQVYsR0FBcUIsSUFBckI7QUFDQSxXQUFPN2YsSUFBUDtBQWJEO0FBQUEsQ0FERDtBQWdCQTtBQUFBOGYsY0FBWTtBQUNYLFdBQU8sY0FBUDtBQUREO0FBR0FDLGNBQVk7QUFDWCxRQUFHQyxlQUFlQyxVQUFmLEVBQUg7QUFDQyxhQUFPLFVBQVA7QUFERDtBQUdDLGFBQU8sUUFBUDtBQ3ZKRztBRGdKTDtBQVNBQyxnQkFBYztBQUNiLFFBQUF6UCxZQUFBO0FBQUFBLG1CQUFlOEgsZ0JBQWdCMUIsc0JBQWhCLEVBQWY7O0FBQ0EsUUFBR3BHLFlBQUg7QUFDQyxhQUFPQSxZQUFQO0FDckpHO0FEeUlMO0FBY0EwUCx1QkFBcUIsVUFBQ3JnQixHQUFEO0FBQ3BCLFFBQUFzZ0IsVUFBQTtBQUFBQSxpQkFBYTNILHVCQUF1QkMsdUJBQXZCLEVBQWI7QUFDQTVZLFFBQUksYUFBSixJQUF3QnNnQixhQUFnQkEsV0FBV3RnQixJQUFJNlcsSUFBZixDQUFoQixHQUEwQyxFQUFsRTtBQUNBN1csUUFBSSxRQUFKLElBQWdCaWUsTUFBaEI7QUFDQSxXQUFPamUsR0FBUDtBQWxCRDtBQW9CQWdYLFlBQVU7QUFDVCxRQUFBMEksZ0JBQUE7QUFBQWEsWUFBUXZVLEdBQVIsQ0FBWSxhQUFaOztBQUNBLFFBQUl1VSxRQUFRdlUsR0FBUixDQUFZLFlBQVosQ0FBSjtBQUNDMFQseUJBQW1CakgsZ0JBQWdCa0gsV0FBaEIsRUFBbkI7QUFDQSxhQUFPRCxnQkFBUDtBQ2xKRztBRDBITDtBQTBCQXJRLFVBQVEsVUFBQ21SLENBQUQsRUFBSUMsQ0FBSjtBQUNQLFdBQVFELE1BQUtDLENBQWI7QUEzQkQ7QUE2QkFwQixZQUFVLFVBQUNtQixDQUFELEVBQUlDLENBQUo7QUFDVCxXQUFPQSxFQUFFbmIsS0FBRixDQUFRLEdBQVIsRUFBYStaLFFBQWIsQ0FBc0JtQixDQUF0QixDQUFQO0FBOUJEO0FBZ0NBMVAsVUFBUTtBQUNQLFFBQUFILFlBQUE7QUFBQUEsbUJBQWU4SCxnQkFBZ0IxQixzQkFBaEIsRUFBZjs7QUFDQSxRQUFHcEcsWUFBSDtBQUNDLGFBQU8sSUFBSStQLFlBQUosQ0FBaUIvSCx1QkFBdUJnSSxpQkFBdkIsQ0FBeUNoUSxZQUF6QyxDQUFqQixDQUFQO0FDaEpHO0FENkdMO0FBcUNBMlAsY0FBWTtBQy9JUixXRGdKSDNILHVCQUF1QkMsdUJBQXZCLEVDaEpHO0FEMEdKO0FBd0NBZ0ksc0JBQW9CO0FBQ25CLFFBQUFDLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxLQUFBO0FBQUFGLFVBQU1OLFFBQVF2VSxHQUFSLENBQVksS0FBWixDQUFOOztBQUNBLFFBQUc2VSxRQUFPLE9BQVAsSUFBa0JBLFFBQU8sT0FBNUI7QUFDQ0UsY0FBUVIsUUFBUXZVLEdBQVIsQ0FBWSxPQUFaLENBQVI7O0FBQ0EsVUFBRytVLEtBQUg7QUFDQyxZQUFJQSxVQUFTLFVBQWI7QUFDQyxpQkFBTyxhQUFQO0FBREQsZUFFSyxJQUFJQSxVQUFTLFVBQWI7QUFDSixpQkFBTyxZQUFQO0FBSkY7QUFGRDtBQ3RJSTs7QUQ2SUpELFVBQU1ySSxnQkFBZ0JrSCxXQUFoQixFQUFOOztBQUNBLFFBQUdtQixPQUFPQSxJQUFJcEQsY0FBZDtBQUNDLFVBQUdvRCxJQUFJcEQsY0FBSixLQUFzQixVQUF6QjtBQUNDLGVBQU8sYUFBUDtBQURELGFBRUssSUFBSW9ELElBQUlwRCxjQUFKLEtBQXNCLFVBQTFCO0FBQ0osZUFBTyxZQUFQO0FBSkY7QUN0SUk7QURvRkw7QUFBQTs7QUF5REF4RCxnQkFBZ0JDLFdBQWhCLEdBQThCLFVBQUNuRCxRQUFELEVBQVdvRCxZQUFYO0FBQzdCLE1BQUE5QyxJQUFBLEVBQUE1RyxJQUFBO0FBQUE0RyxTQUFPbEcsR0FBR29HLEtBQUgsQ0FBU2xHLE9BQVQsQ0FBaUIwRixTQUFTTSxJQUExQixDQUFQO0FBQ0E1RyxTQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUIwRixTQUFTdEcsSUFBMUIsQ0FBUDs7QUFFQSxNQUFHMEosWUFBSDtBQUNDLFFBQUdBLGlCQUFnQixPQUFuQjtBQUNDLGFBQU9GLGdCQUFnQnFGLFNBQWhCLENBQTBCQyxLQUExQixDQUFnQ3hJLFFBQWhDLENBQVA7QUN4SUU7O0FEeUlILFdBQU9rRCxnQkFBZ0JxRixTQUFoQixDQUF5QixTQUF6QixFQUFrQ3ZJLFFBQWxDLENBQVA7QUN2SUM7O0FEeUlGLGFBQUF1SixPQUFBLG9CQUFBQSxZQUFBLE9BQUdBLFFBQVN2VSxHQUFULENBQWEsZUFBYixDQUFILEdBQUcsTUFBSDtBQUNDLFFBQUFzTCxRQUFBLE9BQUdBLEtBQU0wSixjQUFULEdBQVMsTUFBVDtBQUNDLGFBQU8sb0NBQW9DMUosS0FBSzBKLGNBQXpDLEdBQTBELFFBQWpFO0FBREQ7QUFHQyxVQUFBMUosUUFBQSxPQUFHQSxLQUFNMkosaUJBQVQsR0FBUyxNQUFUO0FBQ0MsZUFBTyxvQ0FBb0MzSixLQUFLMkosaUJBQXpDLEdBQTZELFFBQXBFO0FBREQ7QUFHQyxlQUFPL0csZ0JBQWdCcUYsU0FBaEIsQ0FBMEJDLEtBQTFCLENBQWdDeEksUUFBaEMsQ0FBUDtBQU5GO0FBREQ7QUFBQTtBQVNDLFFBQUdoQyxRQUFRd0ksUUFBUixFQUFIO0FBQ0MsYUFBT3RELGdCQUFnQnFGLFNBQWhCLENBQXlCLFNBQXpCLEVBQWtDdkksUUFBbEMsQ0FBUDtBQ3JJRTs7QUR1SUgsUUFBQU0sUUFBQSxPQUFHQSxLQUFNMkosaUJBQVQsR0FBUyxNQUFUO0FBQ0MsYUFBTyxvQ0FBb0MzSixLQUFLMkosaUJBQXpDLEdBQTZELFFBQXBFO0FDcklFOztBRHVJSCxRQUFBdlEsUUFBQSxPQUFHQSxLQUFNaUssY0FBVCxHQUFTLE1BQVQ7QUFDQyxVQUFHakssS0FBS2lLLGNBQUwsS0FBdUIsT0FBMUI7QUFDQyxlQUFPVCxnQkFBZ0JxRixTQUFoQixDQUEwQkMsS0FBMUIsQ0FBZ0N4SSxRQUFoQyxDQUFQO0FDcklHOztBRHNJSixhQUFPa0QsZ0JBQWdCcUYsU0FBaEIsQ0FBeUIsU0FBekIsRUFBa0N2SSxRQUFsQyxDQUFQO0FBSEQ7QUFLQyxhQUFPa0QsZ0JBQWdCcUYsU0FBaEIsQ0FBeUIsU0FBekIsRUFBa0N2SSxRQUFsQyxDQUFQO0FBcEJGO0FDL0dFO0FEc0cyQixDQUE5QixDOzs7Ozs7Ozs7OztBRW5UQWtLLFlBQVksR0FBRyxFQUFmO0FBRUFBLFlBQVksQ0FBQ2pELE1BQWIsR0FBc0IsY0FBdEI7O0FBRUFpRCxZQUFZLENBQUNDLFNBQWIsR0FBeUIsVUFBU2hNLEtBQVQsRUFBZ0JpTSxVQUFoQixFQUE0QjtBQUNqRCxNQUFJQyxRQUFRLEdBQUdILFlBQVksQ0FBQ0ksUUFBYixDQUFzQm5NLEtBQXRCLENBQWY7QUFFQSxNQUFJb00sUUFBUSxHQUFHTCxZQUFZLENBQUNNLGlCQUFiLENBQStCck0sS0FBL0IsRUFBc0NpTSxVQUF0QyxDQUFmO0FBRUEsTUFBSUssT0FBTyxHQUFHLEVBQWQ7QUFDQSxNQUFJMUosR0FBRyxHQUFHLElBQVY7QUFDQXNKLFVBQVEsQ0FBQ0ssT0FBVCxDQUFpQmpRLE9BQWpCLENBQXlCLFVBQVNrUSxFQUFULEVBQWE7QUFDbEMsUUFBSUEsRUFBRSxDQUFDckMsVUFBSCxJQUFpQixVQUFyQixFQUFpQztBQUM3Qm1DLGFBQU8sR0FBR0osUUFBUSxDQUFDeEssSUFBVCxHQUFnQixHQUFoQixHQUFzQjhLLEVBQUUsQ0FBQzlLLElBQW5DOztBQUNBLFVBQUksQ0FBQytLLGVBQWUsQ0FBQ0MsbUJBQWhCLENBQW9DQyxDQUFDLENBQUMsWUFBWUwsT0FBWixHQUFzQixJQUF2QixDQUFELENBQThCLENBQTlCLENBQXBDLENBQUwsRUFBNEU7QUFDeEUxSixXQUFHLEdBQUcsS0FBTjtBQUNIO0FBQ0o7QUFDSixHQVBEO0FBU0EsU0FBT0EsR0FBUDtBQUNILENBakJEOztBQW1CQW1KLFlBQVksQ0FBQ2EsaUJBQWIsR0FBaUMsVUFBUzVNLEtBQVQsRUFBZ0JpTSxVQUFoQixFQUE0QlksVUFBNUIsRUFBd0M7QUFFckUsTUFBSUMsVUFBVSxHQUFHZixZQUFZLENBQUNnQixhQUFiLENBQTJCL00sS0FBM0IsQ0FBakI7QUFDQThNLFlBQVUsQ0FBQ2IsVUFBRCxDQUFWLEdBQXlCWSxVQUF6QjtBQUNILENBSkQ7O0FBTUFkLFlBQVksQ0FBQ2lCLGlCQUFiLEdBQWlDLFVBQVNoTixLQUFULEVBQWdCaU0sVUFBaEIsRUFBNEI7QUFDekQsU0FBT0YsWUFBWSxDQUFDZ0IsYUFBYixDQUEyQi9NLEtBQTNCLEVBQWtDaU0sVUFBbEMsQ0FBUDtBQUNILENBRkQ7O0FBSUFGLFlBQVksQ0FBQ2tCLGVBQWIsR0FBK0IsVUFBU2pOLEtBQVQsRUFBZ0JpTSxVQUFoQixFQUE0QjtBQUN2RCxNQUFJWSxVQUFVLEdBQUdkLFlBQVksQ0FBQ2lCLGlCQUFiLENBQStCaE4sS0FBL0IsRUFBc0NpTSxVQUF0QyxDQUFqQjtBQUNBWSxZQUFVLENBQUNLLE9BQVgsR0FBcUIsSUFBckI7QUFDSCxDQUhEOztBQUtBbkIsWUFBWSxDQUFDb0IsYUFBYixHQUE2QixVQUFTbk4sS0FBVCxFQUFnQnpWLEtBQWhCLEVBQXVCO0FBQ2hEb2lCLEdBQUMsQ0FBQyxpQkFBaUIzTSxLQUFqQixHQUF5QixJQUExQixDQUFELENBQWlDa0osR0FBakMsQ0FBcUM7QUFDakNBLE9BQUcsRUFBRTNlO0FBRDRCLEdBQXJDO0FBR0gsQ0FKRDs7QUFNQXdoQixZQUFZLENBQUNnQixhQUFiLEdBQTZCLFVBQVMvTSxLQUFULEVBQWdCO0FBQ3pDLFNBQU8yTSxDQUFDLENBQUMsaUJBQWlCM00sS0FBakIsR0FBeUIsSUFBMUIsQ0FBRCxDQUFpQ2tKLEdBQWpDLEdBQXVDQSxHQUE5QztBQUNILENBRkQ7O0FBSUE2QyxZQUFZLENBQUNxQixhQUFiLEdBQTZCLFVBQVNwTixLQUFULEVBQWdCO0FBQ3pDLE1BQUl6VixLQUFLLEdBQUd3aEIsWUFBWSxDQUFDZ0IsYUFBYixDQUEyQi9NLEtBQTNCLENBQVo7O0FBRUEsTUFBSSxDQUFDelYsS0FBTCxFQUFZO0FBQ1I7QUFDSDs7QUFFRCxNQUFJOGlCLFVBQVUsR0FBRyxFQUFqQjtBQUVBOWlCLE9BQUssQ0FBQytSLE9BQU4sQ0FBYyxVQUFTalUsQ0FBVCxFQUFZO0FBQ3RCLFFBQUksQ0FBQ0EsQ0FBQyxDQUFDNmtCLE9BQVAsRUFBZ0I7QUFDWkcsZ0JBQVUsQ0FBQ3ZiLElBQVgsQ0FBZ0J6SixDQUFoQjtBQUNIO0FBQ0osR0FKRDtBQUtBLFNBQU9nbEIsVUFBUDtBQUNILENBZkQ7O0FBa0JBdEIsWUFBWSxDQUFDdUIsVUFBYixHQUEwQixVQUFTdE4sS0FBVCxFQUFnQnVOLE1BQWhCLEVBQXdCO0FBRTlDLE1BQUksQ0FBQ0EsTUFBRCxJQUFXLEVBQUVBLE1BQU0sWUFBWTNSLEtBQXBCLENBQWYsRUFBMkM7QUFDdkMsV0FBTzJSLE1BQVA7QUFDSDs7QUFFRCxNQUFJckIsUUFBUSxHQUFHSCxZQUFZLENBQUNJLFFBQWIsQ0FBc0JuTSxLQUF0QixDQUFmO0FBRUF1TixRQUFNLENBQUNqUixPQUFQLENBQWUsVUFBU2pVLENBQVQsRUFBWTtBQUN2QjZqQixZQUFRLENBQUNLLE9BQVQsQ0FBaUJqUSxPQUFqQixDQUF5QixVQUFTQyxDQUFULEVBQVk7QUFDakMsVUFBSUEsQ0FBQyxDQUFDbk8sSUFBRixJQUFVLE1BQVYsSUFBb0JtTyxDQUFDLENBQUNuTyxJQUFGLElBQVUsT0FBbEMsRUFBMkM7QUFDdkMsWUFBSTdELEtBQUssR0FBR2xDLENBQUMsQ0FBQ2tVLENBQUMsQ0FBQ21GLElBQUgsQ0FBYjs7QUFDQSxZQUFJbkYsQ0FBQyxDQUFDcUUsY0FBTixFQUFzQjtBQUNsQixjQUFJclcsS0FBSyxJQUFJQSxLQUFLLENBQUNqQixNQUFOLEdBQWUsQ0FBeEIsSUFBNkIsT0FBT2lCLEtBQUssQ0FBQyxDQUFELENBQVosSUFBb0IsUUFBckQsRUFBK0Q7QUFDM0RsQyxhQUFDLENBQUNrVSxDQUFDLENBQUNtRixJQUFILENBQUQsR0FBWXJaLENBQUMsQ0FBQ2tVLENBQUMsQ0FBQ21GLElBQUgsQ0FBRCxDQUFVYixXQUFWLENBQXNCLElBQXRCLENBQVo7QUFDSDtBQUNKLFNBSkQsTUFJTztBQUNILGNBQUl0VyxLQUFLLElBQUksT0FBT0EsS0FBUCxJQUFpQixRQUE5QixFQUF3QztBQUNwQ2xDLGFBQUMsQ0FBQ2tVLENBQUMsQ0FBQ21GLElBQUgsQ0FBRCxHQUFZclosQ0FBQyxDQUFDa1UsQ0FBQyxDQUFDbUYsSUFBSCxDQUFELENBQVVnSixFQUF0QjtBQUNIO0FBQ0o7QUFDSixPQVhELE1BV08sSUFBSW5PLENBQUMsQ0FBQ25PLElBQUYsSUFBVSxVQUFkLEVBQTBCO0FBQzdCLFlBQUk3RCxLQUFLLEdBQUdsQyxDQUFDLENBQUNrVSxDQUFDLENBQUNtRixJQUFILENBQWI7O0FBQ0EsWUFBSW5YLEtBQUosRUFBVztBQUNQLGNBQUlBLEtBQUssQ0FBQ2pCLE1BQU4sSUFBZ0IsRUFBcEIsRUFBd0I7QUFDcEIsZ0JBQUk0SCxDQUFDLEdBQUczRyxLQUFLLENBQUM0RixLQUFOLENBQVksR0FBWixDQUFSO0FBQ0EsZ0JBQUlvUSxFQUFFLEdBQUdyUCxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUtmLEtBQUwsQ0FBVyxHQUFYLENBQVQ7QUFDQSxnQkFBSXFRLEVBQUUsR0FBR3RQLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBS2YsS0FBTCxDQUFXLEdBQVgsQ0FBVDtBQUVBc1EsZ0JBQUksR0FBR0YsRUFBRSxDQUFDLENBQUQsQ0FBVDtBQUNBRixpQkFBSyxHQUFHRSxFQUFFLENBQUMsQ0FBRCxDQUFWO0FBQ0FKLGdCQUFJLEdBQUdJLEVBQUUsQ0FBQyxDQUFELENBQVQ7QUFDQUgsaUJBQUssR0FBR0ksRUFBRSxDQUFDLENBQUQsQ0FBVjtBQUNBRixtQkFBTyxHQUFHRSxFQUFFLENBQUMsQ0FBRCxDQUFaO0FBQ0FqVyxpQkFBSyxHQUFHLElBQUkwVyxJQUFKLENBQVNSLElBQVQsRUFBZUosS0FBSyxHQUFHLENBQXZCLEVBQTBCRixJQUExQixFQUFnQ0MsS0FBaEMsRUFBdUNFLE9BQXZDLENBQVI7QUFDQWpZLGFBQUMsQ0FBQ2tVLENBQUMsQ0FBQ21GLElBQUgsQ0FBRCxHQUFZblgsS0FBWjtBQUNIO0FBRUo7QUFDSjtBQUNKLEtBL0JEO0FBZ0NILEdBakNEO0FBa0NBLFNBQU9nakIsTUFBUDtBQUNILENBM0NEOztBQTZDQXhCLFlBQVksQ0FBQ0ksUUFBYixHQUF3QixVQUFTbk0sS0FBVCxFQUFnQjtBQUNwQyxNQUFJd04sY0FBYyxHQUFHbEssZUFBZSxDQUFDbUssaUJBQWhCLEVBQXJCO0FBQ0EsTUFBSSxDQUFDRCxjQUFMLEVBQ0k7QUFFSixNQUFJdEIsUUFBUSxHQUFHc0IsY0FBYyxDQUFDN0wsZ0JBQWYsQ0FBZ0MsTUFBaEMsRUFBd0MzQixLQUF4QyxDQUFmO0FBRUEsU0FBT2tNLFFBQVA7QUFDSCxDQVJEOztBQVdBSCxZQUFZLENBQUMyQixZQUFiLEdBQTRCLFVBQVMxTixLQUFULEVBQWdCck0sS0FBaEIsRUFBdUI7QUFFL0MsTUFBSTVJLElBQUksR0FBRyxFQUFYO0FBRUEsTUFBSW1oQixRQUFRLEdBQUdILFlBQVksQ0FBQ0ksUUFBYixDQUFzQm5NLEtBQXRCLENBQWY7O0FBRUEsTUFBSSxDQUFDa00sUUFBTCxFQUFlO0FBQ1g7QUFDSDs7QUFFRG5oQixNQUFJLENBQUNpVixLQUFMLEdBQWFrTSxRQUFiO0FBRUFuaEIsTUFBSSxDQUFDaVYsS0FBTCxDQUFXcEQsT0FBWCxHQUFxQitRLFlBQVksQ0FBQ0MsdUJBQWIsQ0FBcUMsMkJBQXJDLEVBQWtFMUIsUUFBUSxDQUFDSyxPQUEzRSxDQUFyQjtBQUVBeGhCLE1BQUksQ0FBQ1IsS0FBTCxHQUFhLEVBQWI7QUFFQVEsTUFBSSxDQUFDUixLQUFMLENBQVd5VixLQUFYLElBQW9CK0wsWUFBWSxDQUFDaUIsaUJBQWIsQ0FBK0JoTixLQUEvQixFQUFzQ3JNLEtBQXRDLENBQXBCO0FBRUE1SSxNQUFJLENBQUM0SSxLQUFMLEdBQWFBLEtBQWI7QUFFQSxTQUFPNUksSUFBUDtBQUNILENBckJEOztBQXlCQWdoQixZQUFZLENBQUNNLGlCQUFiLEdBQWlDLFVBQVNyTSxLQUFULEVBQWdCaU0sVUFBaEIsRUFBNEI7QUFFekQsTUFBSSxDQUFDNEIsUUFBUSxDQUFDQyxhQUFULENBQXVCLHlCQUF5QjlOLEtBQXpCLEdBQWlDLEdBQWpDLEdBQXVDaU0sVUFBOUQsQ0FBTCxFQUFnRjtBQUM1RSxXQUFPLEVBQVA7QUFDSDs7QUFFRCxNQUFJWSxVQUFVLEdBQUdnQixRQUFRLENBQUNDLGFBQVQsQ0FBdUIseUJBQXlCOU4sS0FBekIsR0FBaUMsR0FBakMsR0FBdUNpTSxVQUE5RCxFQUEwRThCLFNBQTFFLENBQW9GL04sS0FBcEYsQ0FBakI7QUFDQSxTQUFPNk0sVUFBUDtBQUNILENBUkQ7O0FBV0FkLFlBQVksQ0FBQ2lDLE9BQWIsR0FBdUIsVUFBU2hPLEtBQVQsRUFBZ0JyTSxLQUFoQixFQUF1QnNhLFdBQXZCLEVBQW9DO0FBQ3ZELE1BQUloTCxJQUFJLEdBQUc4SSxZQUFZLENBQUNtQyxPQUFiLENBQXFCbE8sS0FBckIsQ0FBWDs7QUFDQSxNQUFJNk0sVUFBVSxHQUFHb0IsV0FBVyxJQUFJbEMsWUFBWSxDQUFDTSxpQkFBYixDQUErQnJNLEtBQS9CLEVBQXNDck0sS0FBdEMsQ0FBaEM7O0FBQ0FnWixHQUFDLENBQUMsaUJBQWlCM00sS0FBakIsR0FBeUIsU0FBMUIsQ0FBRCxDQUFzQ21PLE1BQXRDLENBQTZDcEMsWUFBWSxDQUFDcUMsS0FBYixDQUFtQm5MLElBQW5CLEVBQXlCNEosVUFBekIsRUFBcUNsWixLQUFyQyxFQUE0Q3FNLEtBQTVDLEVBQW1ELElBQW5ELENBQTdDO0FBRUgsQ0FMRDs7QUFPQStMLFlBQVksQ0FBQ3NDLFVBQWIsR0FBMEIsVUFBU3JPLEtBQVQsRUFBZ0JyTSxLQUFoQixFQUF1QnNhLFdBQXZCLEVBQW9DO0FBRTFELE1BQUl2TyxJQUFJLEdBQUdpTixDQUFDLENBQUMsY0FBYzNNLEtBQWQsR0FBc0IsUUFBdEIsR0FBaUNyTSxLQUFqQyxHQUF5QyxJQUExQyxDQUFaOztBQUVBLE1BQUlrWixVQUFVLEdBQUdvQixXQUFXLElBQUlsQyxZQUFZLENBQUNNLGlCQUFiLENBQStCck0sS0FBL0IsRUFBc0NyTSxLQUF0QyxDQUFoQzs7QUFFQSxNQUFJK0wsSUFBSSxJQUFJQSxJQUFJLENBQUNwVyxNQUFMLEdBQWMsQ0FBMUIsRUFBNkI7QUFDekIsUUFBSTJaLElBQUksR0FBRzhJLFlBQVksQ0FBQ21DLE9BQWIsQ0FBcUJsTyxLQUFyQixDQUFYO0FBQ0EsUUFBSXNPLEdBQUcsR0FBR3ZDLFlBQVksQ0FBQ3dDLFdBQWIsQ0FBeUJ2TyxLQUF6QixFQUFnQ3JNLEtBQWhDLENBQVY7QUFFQSxRQUFJNFksT0FBTyxHQUFHUixZQUFZLENBQUNJLFFBQWIsQ0FBc0JuTSxLQUF0QixFQUE2QnVNLE9BQTNDO0FBRUF0SixRQUFJLENBQUMzRyxPQUFMLENBQWEsVUFBU2pLLEdBQVQsRUFBYztBQUN2QixVQUFJbWMsTUFBTSxHQUFHakMsT0FBTyxDQUFDNUssZ0JBQVIsQ0FBeUIsTUFBekIsRUFBaUN0UCxHQUFqQyxDQUFiO0FBRUEsVUFBSTlILEtBQUssR0FBR3NpQixVQUFVLENBQUN4YSxHQUFELENBQXRCO0FBRUFpYyxTQUFHLEdBQUdBLEdBQUcsR0FBR3ZDLFlBQVksQ0FBQzBDLEtBQWIsQ0FBbUJELE1BQW5CLEVBQTJCN2EsS0FBM0IsRUFBa0NwSixLQUFsQyxDQUFaO0FBRUgsS0FQRDtBQVNBbVYsUUFBSSxDQUFDZ1AsS0FBTDtBQUVBaFAsUUFBSSxDQUFDeU8sTUFBTCxDQUFZRyxHQUFaO0FBRUgsR0FuQkQsTUFtQk87QUFFSHZDLGdCQUFZLENBQUNpQyxPQUFiLENBQXFCaE8sS0FBckIsRUFBNEJyTSxLQUE1QjtBQUNIOztBQUVELE1BQUlvWSxZQUFZLENBQUNnQixhQUFiLENBQTJCL00sS0FBM0IsQ0FBSixFQUF1QztBQUVuQytMLGdCQUFZLENBQUNhLGlCQUFiLENBQStCNU0sS0FBL0IsRUFBc0NyTSxLQUF0QyxFQUE2Q2taLFVBQTdDLEVBRm1DLENBSW5DO0FBRUgsR0FORCxNQU1PO0FBQ0g7QUFFQWQsZ0JBQVksQ0FBQ29CLGFBQWIsQ0FBMkJuTixLQUEzQixFQUFrQyxDQUFDNk0sVUFBRCxDQUFsQztBQUVILEdBekN5RCxDQTJDMUQ7OztBQUNBSixpQkFBZSxDQUFDa0MsVUFBaEIsQ0FBMkIzTyxLQUEzQjtBQUVILENBOUNEOztBQWdEQStMLFlBQVksQ0FBQzZDLFVBQWIsR0FBMEIsVUFBUzVPLEtBQVQsRUFBZ0JyTSxLQUFoQixFQUF1QjtBQUU3Q2daLEdBQUMsQ0FBQyxjQUFjM00sS0FBZCxHQUFzQixRQUF0QixHQUFpQ3JNLEtBQWpDLEdBQXlDLElBQTFDLENBQUQsQ0FBaURrYixJQUFqRDtBQUVBOUMsY0FBWSxDQUFDa0IsZUFBYixDQUE2QmpOLEtBQTdCLEVBQW9Dck0sS0FBcEM7QUFFQThZLGlCQUFlLENBQUNrQyxVQUFoQixDQUEyQjNPLEtBQTNCO0FBQ0gsQ0FQRDs7QUFTQStMLFlBQVksQ0FBQytDLFNBQWIsR0FBeUIsVUFBUzlPLEtBQVQsRUFBZ0JyTSxLQUFoQixFQUF1Qm9iLE1BQXZCLEVBQStCO0FBR3BELE1BQUlDLFNBQVMsR0FBR2pELFlBQVksQ0FBQzJCLFlBQWIsQ0FBMEIxTixLQUExQixFQUFpQ3JNLEtBQWpDLENBQWhCO0FBRUFxYixXQUFTLENBQUNELE1BQVYsR0FBbUJBLE1BQW5CO0FBRUFFLE9BQUssQ0FBQ0MsSUFBTixDQUFXLG1CQUFYLEVBQWdDRixTQUFoQztBQUVILENBVEQ7O0FBV0FqRCxZQUFZLENBQUNtQyxPQUFiLEdBQXVCLFVBQVNsTyxLQUFULEVBQWdCO0FBQ25DLE1BQUksQ0FBQzZOLFFBQVEsQ0FBQ3NCLHFCQUFULENBQStCcEQsWUFBWSxDQUFDakQsTUFBNUMsQ0FBTCxFQUEwRDtBQUN0RCxXQUFPLEVBQVA7QUFDSDs7QUFFRCxNQUFJc0csRUFBRSxHQUFHdkIsUUFBUSxDQUFDd0IsYUFBVCxDQUF1QnRELFlBQVksQ0FBQ2pELE1BQXBDLENBQVQ7QUFFQSxNQUFJN0YsSUFBSSxHQUFHLEVBQVg7O0FBRUEsTUFBSW1NLEVBQUUsQ0FBQ0UsTUFBSCxDQUFVdFAsS0FBSyxHQUFHLElBQWxCLEVBQXdCNVIsSUFBeEIsS0FBaUNuRSxNQUFyQyxFQUE2QztBQUN6Q2daLFFBQUksR0FBR21NLEVBQUUsQ0FBQ0csVUFBSCxDQUFjaEUsWUFBWSxDQUFDaUUsWUFBYixDQUEwQnhQLEtBQTFCLElBQW1DLElBQWpELENBQVA7QUFDSDs7QUFFRCxTQUFPaUQsSUFBUDtBQUVILENBZkQ7O0FBaUJBOEksWUFBWSxDQUFDMEQsUUFBYixHQUF3QixVQUFTelAsS0FBVCxFQUFnQnFFLFFBQWhCLEVBQTBCO0FBRTlDLE1BQUk2SCxRQUFRLEdBQUdsTSxLQUFmO0FBQ0EsTUFBSSxDQUFDbkQsQ0FBQyxDQUFDNlMsUUFBRixDQUFXMVAsS0FBWCxDQUFMLEVBQ0lrTSxRQUFRLEdBQUdILFlBQVksQ0FBQ0ksUUFBYixDQUFzQm5NLEtBQXRCLENBQVg7O0FBRUosTUFBSSxDQUFDa00sUUFBTCxFQUFlO0FBQ1gsV0FBTyxFQUFQO0FBQ0g7O0FBRUQsTUFBSXlELEtBQUssR0FBRyxFQUFaO0FBQUEsTUFDSUMsR0FBRyxHQUFHLEVBRFY7QUFBQSxNQUVJalEsS0FBSyxHQUFHLEVBRlo7QUFBQSxNQUdJbUksS0FBSyxHQUFHLEdBSFo7O0FBS0EsTUFBSXpELFFBQUosRUFBYztBQUNWO0FBQ051TCxPQUFHLEdBQUcsRUFBTjtBQUNHOztBQUVELE1BQUlyRCxPQUFPLEdBQUdMLFFBQVEsQ0FBQ0ssT0FBdkI7O0FBRUEsTUFBRyxDQUFDQSxPQUFKLEVBQVk7QUFDWCxXQUFPb0QsS0FBUDtBQUNIOztBQUVFLE1BQUlFLFNBQVMsR0FBR3RELE9BQU8sQ0FBQ2pqQixNQUF4Qjs7QUFFQSxNQUFJdW1CLFNBQVMsR0FBRyxDQUFoQixFQUFtQjtBQUNmLFFBQUlDLFdBQVcsR0FBR3ZELE9BQU8sQ0FBQ3dELGNBQVIsQ0FBdUIsU0FBdkIsRUFBa0MsSUFBbEMsQ0FBbEI7QUFFQWpJLFNBQUssR0FBRyxPQUFPK0gsU0FBUyxHQUFHQyxXQUFXLENBQUN4bUIsTUFBL0IsQ0FBUjtBQUNIOztBQUVEaWpCLFNBQU8sQ0FBQ2pRLE9BQVIsQ0FBZ0IsVUFBU2tRLEVBQVQsRUFBYTdZLEtBQWIsRUFBb0I7QUFFaENnTSxTQUFLLEdBQUk2TSxFQUFFLENBQUMzYSxJQUFILElBQVcsSUFBWCxJQUFtQjJhLEVBQUUsQ0FBQzNhLElBQUgsQ0FBUXZJLE1BQVIsR0FBaUIsQ0FBckMsR0FBMENrakIsRUFBRSxDQUFDM2EsSUFBN0MsR0FBb0QyYSxFQUFFLENBQUM5SyxJQUEvRDtBQUVBa08sT0FBRyxHQUFHQSxHQUFHLEdBQUcsTUFBWixDQUpnQyxDQUlaOztBQUVwQkEsT0FBRyxHQUFHQSxHQUFHLEdBQUcsZ0JBQU4sR0FBeUJwRCxFQUFFLENBQUNwZSxJQUE1QixHQUFtQyxHQUF6Qzs7QUFFQSxRQUFJdUYsS0FBSyxJQUFLa2MsU0FBUyxHQUFHLENBQTFCLEVBQThCO0FBQzFCLFVBQUlyRCxFQUFFLENBQUN3RCxPQUFQLEVBQWdCO0FBQ1pKLFdBQUcsR0FBR0EsR0FBRyxHQUFHLGVBQU4sR0FBd0I5SCxLQUFLLEdBQUcsQ0FBaEMsR0FBb0MsSUFBMUM7QUFDSCxPQUZELE1BRU87QUFDSDhILFdBQUcsR0FBR0EsR0FBRyxHQUFHLGVBQU4sR0FBd0I5SCxLQUF4QixHQUFnQyxJQUF0QztBQUNIO0FBQ0o7O0FBRUQ4SCxPQUFHLEdBQUdBLEdBQUcsR0FBRyxHQUFOLEdBQVlqUSxLQUFaLEdBQW9CLE9BQTFCO0FBQ0gsR0FqQkQ7QUFtQkFnUSxPQUFLLEdBQUcsU0FBU0MsR0FBVCxHQUFlLE9BQXZCO0FBRUEsU0FBT0QsS0FBUDtBQUNILENBeEREOztBQTBEQTVELFlBQVksQ0FBQ2tFLFFBQWIsR0FBd0IsVUFBU2hOLElBQVQsRUFBZWpELEtBQWYsRUFBc0J1TixNQUF0QixFQUE4QmxKLFFBQTlCLEVBQXdDO0FBQzVELE1BQUk2TCxLQUFLLEdBQUcsRUFBWjs7QUFFQSxNQUFJM0MsTUFBTSxZQUFZM1IsS0FBdEIsRUFBNkI7QUFDekIyUixVQUFNLENBQUNqUixPQUFQLENBQWUsVUFBUy9SLEtBQVQsRUFBZ0JvSixLQUFoQixFQUF1QjtBQUNsQ3VjLFdBQUssR0FBR0EsS0FBSyxHQUFHbkUsWUFBWSxDQUFDcUMsS0FBYixDQUFtQm5MLElBQW5CLEVBQXlCMVksS0FBekIsRUFBZ0NvSixLQUFoQyxFQUF1Q3FNLEtBQXZDLEVBQThDcUUsUUFBOUMsQ0FBaEI7QUFDSCxLQUZEO0FBR0g7O0FBRUQsU0FBTzZMLEtBQVA7QUFDSCxDQVZEOztBQVlBbkUsWUFBWSxDQUFDcUMsS0FBYixHQUFxQixVQUFTbkwsSUFBVCxFQUFlNEosVUFBZixFQUEyQmxaLEtBQTNCLEVBQWtDcU0sS0FBbEMsRUFBeUNxRSxRQUF6QyxFQUFtRDtBQUVwRSxNQUFJNkgsUUFBUSxHQUFHbE0sS0FBZjtBQUNBLE1BQUksQ0FBQ25ELENBQUMsQ0FBQzZTLFFBQUYsQ0FBVzFQLEtBQVgsQ0FBTCxFQUNJa00sUUFBUSxHQUFHSCxZQUFZLENBQUNJLFFBQWIsQ0FBc0JuTSxLQUF0QixDQUFYO0FBRUosTUFBSW1RLEVBQUUsR0FBRyxhQUFhakUsUUFBUSxDQUFDeEssSUFBdEIsR0FBNkIsUUFBN0IsR0FBd0MvTixLQUF4QyxHQUFnRCxVQUFoRCxHQUE2RHVZLFFBQVEsQ0FBQ3hLLElBQXRFLEdBQTZFLFFBQTdFLEdBQXdGL04sS0FBeEYsR0FBZ0csZ0JBQWhHLEdBQW1IQSxLQUFuSCxHQUEySCxHQUFwSTs7QUFFQSxNQUFJMFEsUUFBSixFQUFjO0FBQ1Y4TCxNQUFFLEdBQUdBLEVBQUUsR0FBRyxxQkFBVjtBQUNILEdBRkQsTUFFTztBQUNILFFBQUd0USxPQUFPLENBQUN3SSxRQUFSLEVBQUgsRUFBc0I7QUFDM0I4SCxRQUFFLEdBQUdBLEVBQUUsR0FBRyw2QkFBVjtBQUNNLEtBRkQsTUFFSztBQUNWQSxRQUFFLEdBQUdBLEVBQUUsR0FBRyxnQkFBVjtBQUNNO0FBQ0o7O0FBRUQsTUFBSXRELFVBQVUsQ0FBQ0ssT0FBZixFQUF3QjtBQUNwQmlELE1BQUUsR0FBR0EsRUFBRSxHQUFHLHdCQUFWO0FBQ0g7O0FBRURBLElBQUUsR0FBR0EsRUFBRSxHQUFHLElBQVY7QUFFQSxNQUFJN0IsR0FBRyxHQUFHLEVBQVY7O0FBRUEsTUFBSWpLLFFBQUosRUFBYztBQUNWaUssT0FBRyxHQUFHdkMsWUFBWSxDQUFDd0MsV0FBYixDQUF5QnJDLFFBQVEsQ0FBQ3hLLElBQWxDLEVBQXdDL04sS0FBeEMsQ0FBTjtBQUNIOztBQUVELE1BQUk0WSxPQUFPLEdBQUdMLFFBQVEsQ0FBQ0ssT0FBdkI7QUFFQXRKLE1BQUksQ0FBQzNHLE9BQUwsQ0FBYSxVQUFTakssR0FBVCxFQUFjO0FBQ3ZCLFFBQUltYyxNQUFNLEdBQUdqQyxPQUFPLENBQUM1SyxnQkFBUixDQUF5QixNQUF6QixFQUFpQ3RQLEdBQWpDLENBQWI7QUFFQSxRQUFJOUgsS0FBSyxHQUFHc2lCLFVBQVUsQ0FBQ3hhLEdBQUQsQ0FBdEI7QUFFQWljLE9BQUcsR0FBR0EsR0FBRyxHQUFHdkMsWUFBWSxDQUFDMEMsS0FBYixDQUFtQkQsTUFBbkIsRUFBMkI3YSxLQUEzQixFQUFrQ3BKLEtBQWxDLENBQVo7QUFFSCxHQVBEO0FBU0E0bEIsSUFBRSxHQUFHQSxFQUFFLEdBQUc3QixHQUFMLEdBQVcsT0FBaEI7QUFDQSxTQUFPNkIsRUFBUDtBQUNILENBM0NEOztBQTZDQXBFLFlBQVksQ0FBQ3dDLFdBQWIsR0FBMkIsVUFBU3ZPLEtBQVQsRUFBZ0JyTSxLQUFoQixFQUF1QjtBQUM5QztBQUNILFNBQU8sRUFBUDtBQUNBLENBSEQ7O0FBS0FvWSxZQUFZLENBQUMwQyxLQUFiLEdBQXFCLFVBQVN6TyxLQUFULEVBQWdCck0sS0FBaEIsRUFBdUJwSixLQUF2QixFQUE4QjtBQUMvQyxNQUFJNmxCLEVBQUUsR0FBRyxNQUFUO0FBRUFBLElBQUUsR0FBR0EsRUFBRSxHQUFHLGtDQUFMLEdBQTBDcFEsS0FBSyxDQUFDNVIsSUFBaEQsR0FBdUQsSUFBNUQ7QUFFQSxNQUFJaWlCLFFBQVEsR0FBRyxFQUFmOztBQUVBLE1BQUd4VSxNQUFNLENBQUMwSCxRQUFWLEVBQW1CO0FBQ2Y4TSxZQUFRLEdBQUd0RSxZQUFZLENBQUN1RSxVQUFiLENBQXdCdFEsS0FBeEIsRUFBK0J6VixLQUEvQixDQUFYO0FBQ0gsR0FGRCxNQUVLO0FBQ0QwVixVQUFNLEdBQUd6QixRQUFRLENBQUNxRCxRQUFULEdBQW9CME8sSUFBcEIsQ0FBeUJ0UyxRQUF6QixDQUFrQ0QsV0FBbEMsQ0FBOENpQyxNQUF2RDtBQUVBQyxhQUFTLEdBQUcxQixRQUFRLENBQUNxRCxRQUFULEdBQW9CME8sSUFBcEIsQ0FBeUJ0UyxRQUF6QixDQUFrQ0QsV0FBbEMsQ0FBOENrQyxTQUExRDtBQUVBbVEsWUFBUSxHQUFHNVMsd0JBQXdCLENBQUNzQyxRQUF6QixDQUFrQ3hWLEtBQWxDLEVBQXlDeVYsS0FBekMsRUFBZ0RDLE1BQWhELEVBQXdEQyxTQUF4RCxDQUFYO0FBQ0g7O0FBRURrUSxJQUFFLEdBQUdBLEVBQUUsR0FBRyxlQUFMLEdBQXVCemMsS0FBdkIsR0FBK0IsSUFBL0IsR0FBc0MwYyxRQUF0QyxHQUFpRCxPQUF0RDtBQUVBLFNBQU9ELEVBQVA7QUFDSCxDQXBCRDs7QUF1QkFyRSxZQUFZLENBQUN1RSxVQUFiLEdBQTBCLFVBQVN0USxLQUFULEVBQWdCelYsS0FBaEIsRUFBdUI7QUFDN0MsTUFBSThsQixRQUFRLEdBQUcsRUFBZjs7QUFDQSxNQUFJLENBQUNyUSxLQUFMLEVBQVk7QUFDUixXQUFPcVEsUUFBUDtBQUNIOztBQUNELE1BQUk7QUFFQSxZQUFRclEsS0FBSyxDQUFDNVIsSUFBZDtBQUNJLFdBQUssTUFBTDtBQUNJLFlBQUk3RCxLQUFKLEVBQVc7QUFDUCxjQUFJeVYsS0FBSyxDQUFDWSxjQUFWLEVBQTBCO0FBQ3RCLGdCQUFJclcsS0FBSyxDQUFDakIsTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ2xCLGtCQUFJLFlBQVksT0FBT2lCLEtBQUssQ0FBQyxDQUFELENBQTVCLEVBQWtDO0FBQzlCOGxCLHdCQUFRLEdBQUdHLGFBQWEsQ0FBQ0Msb0JBQWQsQ0FBbUNsbUIsS0FBbkMsRUFBMENzVyxXQUExQyxDQUFzRCxNQUF0RCxFQUE4RHBXLFFBQTlELEVBQVg7QUFDSCxlQUZELE1BRU87QUFDSDRsQix3QkFBUSxHQUFHOWxCLEtBQUssQ0FBQ3NXLFdBQU4sQ0FBa0IsTUFBbEIsRUFBMEJwVyxRQUExQixFQUFYO0FBQ0g7QUFDSjtBQUNKLFdBUkQsTUFRTztBQUNILGdCQUFJLFlBQVksT0FBT0YsS0FBdkIsRUFBK0I7QUFDM0Isa0JBQUltbUIsQ0FBQyxHQUFHRixhQUFhLENBQUNDLG9CQUFkLENBQW1DbG1CLEtBQW5DLENBQVI7QUFDQThsQixzQkFBUSxHQUFHSyxDQUFDLEdBQUdBLENBQUMsQ0FBQzdlLElBQUwsR0FBWSxFQUF4QjtBQUNILGFBSEQsTUFHTztBQUNId2Usc0JBQVEsR0FBRzlsQixLQUFLLENBQUNzSCxJQUFqQjtBQUNIO0FBQ0o7QUFDSjs7QUFDRDs7QUFDSixXQUFLLE9BQUw7QUFDSSxZQUFJdEgsS0FBSixFQUFXO0FBQ1AsY0FBSXlWLEtBQUssQ0FBQ1ksY0FBVixFQUEwQjtBQUN0QixnQkFBSXJXLEtBQUssQ0FBQ2pCLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQixrQkFBSSxZQUFZLE9BQU9pQixLQUFLLENBQUMsQ0FBRCxDQUE1QixFQUFrQztBQUM5QjhsQix3QkFBUSxHQUFHRyxhQUFhLENBQUNHLHVCQUFkLENBQXNDcG1CLEtBQXRDLEVBQTZDc1csV0FBN0MsQ0FBeUQsTUFBekQsRUFBaUVwVyxRQUFqRSxFQUFYO0FBQ0gsZUFGRCxNQUVPO0FBQ0g0bEIsd0JBQVEsR0FBRzlsQixLQUFLLENBQUNzVyxXQUFOLENBQWtCLE1BQWxCLEVBQTBCcFcsUUFBMUIsRUFBWDtBQUNIO0FBQ0o7QUFDSixXQVJELE1BUU87QUFDSCxnQkFBSSxZQUFZLE9BQU9GLEtBQXZCLEVBQStCO0FBQzNCLGtCQUFJcW1CLENBQUMsR0FBR0osYUFBYSxDQUFDSyxzQkFBZCxDQUFxQ3RtQixLQUFyQyxDQUFSO0FBQ0E4bEIsc0JBQVEsR0FBR08sQ0FBQyxHQUFHQSxDQUFDLENBQUMvZSxJQUFMLEdBQVksRUFBeEI7QUFDSCxhQUhELE1BR087QUFDSHdlLHNCQUFRLEdBQUc5bEIsS0FBSyxDQUFDc0gsSUFBakI7QUFDSDtBQUNKO0FBQ0o7O0FBQ0Q7O0FBQ0osV0FBSyxVQUFMO0FBQ0ksWUFBSXRILEtBQUssS0FBSyxJQUFWLElBQWtCQSxLQUFLLElBQUksTUFBL0IsRUFBdUM7QUFDbkM4bEIsa0JBQVEsR0FBR3RQLE9BQU8sQ0FBQ0MsRUFBUixDQUFXLHlCQUFYLENBQVg7QUFDSCxTQUZELE1BRU87QUFDSHFQLGtCQUFRLEdBQUd0UCxPQUFPLENBQUNDLEVBQVIsQ0FBVyx3QkFBWCxDQUFYO0FBQ0g7O0FBQ0Q7O0FBQ0osV0FBSyxPQUFMO0FBQ0lxUCxnQkFBUSxHQUFHOWxCLEtBQUssR0FBRyxxQkFBcUJBLEtBQXJCLEdBQTZCLElBQTdCLEdBQW9DQSxLQUFwQyxHQUE0QyxNQUEvQyxHQUF3RCxFQUF4RTtBQUNBOztBQUNKLFdBQUssS0FBTDtBQUNJLFlBQUdBLEtBQUgsRUFBUztBQUNMLGNBQUdBLEtBQUssQ0FBQ3NHLE9BQU4sQ0FBYyxNQUFkLEtBQXlCLENBQTVCLEVBQThCO0FBQzFCLGdCQUFJO0FBQ0F3ZixzQkFBUSxHQUFHLGNBQWMzUCxTQUFTLENBQUNuVyxLQUFELENBQXZCLEdBQWlDLG9CQUFqQyxHQUF3REEsS0FBeEQsR0FBZ0UsTUFBM0U7QUFDSCxhQUZELENBRUUsT0FBT2lGLENBQVAsRUFBVTtBQUNSNmdCLHNCQUFRLEdBQUcsZ0NBQWdDOWxCLEtBQWhDLEdBQXdDLE1BQW5EO0FBQ0g7QUFFSixXQVBELE1BT0s7QUFDRDhsQixvQkFBUSxHQUFHLHFCQUFxQjNQLFNBQVMsQ0FBQ25XLEtBQUQsQ0FBOUIsR0FBd0MsMkJBQXhDLEdBQXNFQSxLQUF0RSxHQUE4RSxNQUF6RjtBQUNIO0FBQ0osU0FYRCxNQVdLO0FBQ0Q4bEIsa0JBQVEsR0FBRyxFQUFYO0FBQ0g7O0FBQ0Q7O0FBQ0osV0FBSyxVQUFMO0FBQ0lBLGdCQUFRLEdBQUcsUUFBWDtBQUNBOztBQUNKLFdBQUssTUFBTDtBQUNJLFlBQUk5bEIsS0FBSixFQUFXO0FBQ1AsY0FBSUEsS0FBSyxDQUFDakIsTUFBTixJQUFnQixFQUFwQixFQUF3QjtBQUNwQixnQkFBSTRILENBQUMsR0FBRzNHLEtBQUssQ0FBQzRGLEtBQU4sQ0FBWSxHQUFaLENBQVI7QUFDQXNRLGdCQUFJLEdBQUd2UCxDQUFDLENBQUMsQ0FBRCxDQUFSO0FBQ0FtUCxpQkFBSyxHQUFHblAsQ0FBQyxDQUFDLENBQUQsQ0FBVDtBQUNBaVAsZ0JBQUksR0FBR2pQLENBQUMsQ0FBQyxDQUFELENBQVI7QUFDQTNHLGlCQUFLLEdBQUcsSUFBSTBXLElBQUosQ0FBU1IsSUFBVCxFQUFlSixLQUFLLEdBQUcsQ0FBdkIsRUFBMEJGLElBQTFCLENBQVI7QUFDSCxXQU5ELE1BTU87QUFDSDVWLGlCQUFLLEdBQUcsSUFBSTBXLElBQUosQ0FBUzFXLEtBQVQsQ0FBUjtBQUNIOztBQUNEOGxCLGtCQUFRLEdBQUcxRCxDQUFDLENBQUNsSSxNQUFGLENBQVN0RSxJQUFULENBQWM1VixLQUFkLEVBQXFCLFlBQXJCLENBQVg7QUFDSDs7QUFDRDs7QUFDSixXQUFLLFVBQUw7QUFDSSxZQUFJQSxLQUFKLEVBQVc7QUFDUCxjQUFJQSxLQUFLLENBQUNqQixNQUFOLElBQWdCLEVBQXBCLEVBQXdCO0FBQ3BCLGdCQUFJNEgsQ0FBQyxHQUFHM0csS0FBSyxDQUFDNEYsS0FBTixDQUFZLEdBQVosQ0FBUjtBQUNBLGdCQUFJb1EsRUFBRSxHQUFHclAsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLZixLQUFMLENBQVcsR0FBWCxDQUFUO0FBQ0EsZ0JBQUlxUSxFQUFFLEdBQUd0UCxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUtmLEtBQUwsQ0FBVyxHQUFYLENBQVQ7QUFFQXNRLGdCQUFJLEdBQUdGLEVBQUUsQ0FBQyxDQUFELENBQVQ7QUFDQUYsaUJBQUssR0FBR0UsRUFBRSxDQUFDLENBQUQsQ0FBVjtBQUNBSixnQkFBSSxHQUFHSSxFQUFFLENBQUMsQ0FBRCxDQUFUO0FBQ0FILGlCQUFLLEdBQUdJLEVBQUUsQ0FBQyxDQUFELENBQVY7QUFDQUYsbUJBQU8sR0FBR0UsRUFBRSxDQUFDLENBQUQsQ0FBWjtBQUVBalcsaUJBQUssR0FBRyxJQUFJMFcsSUFBSixDQUFTUixJQUFULEVBQWVKLEtBQUssR0FBRyxDQUF2QixFQUEwQkYsSUFBMUIsRUFBZ0NDLEtBQWhDLEVBQXVDRSxPQUF2QyxDQUFSO0FBRUgsV0FiRCxNQWFPO0FBRUgvVixpQkFBSyxHQUFHLElBQUkwVyxJQUFKLENBQVMxVyxLQUFULENBQVI7QUFDSDs7QUFDRDhsQixrQkFBUSxHQUFHMUQsQ0FBQyxDQUFDbEksTUFBRixDQUFTdEUsSUFBVCxDQUFjNVYsS0FBZCxFQUFxQixrQkFBckIsQ0FBWDtBQUNIOztBQUNEOztBQUNKLFdBQUssUUFBTDtBQUNJLFlBQUlBLEtBQUssSUFBSUEsS0FBSyxJQUFJLENBQXRCLEVBQXlCO0FBQ3JCOGxCLGtCQUFRLEdBQUd4USxPQUFPLENBQUMwQixjQUFSLENBQXVCaFgsS0FBdkIsRUFBOEJ5VixLQUFLLENBQUN3QixNQUFwQyxDQUFYO0FBQ0g7O0FBQ0Q7O0FBQ0osV0FBSyxPQUFMO0FBQ0ksWUFBR2pYLEtBQUgsRUFBUztBQUNwQixjQUFJeVYsS0FBSyxDQUFDWSxjQUFWLEVBQXlCO0FBQ3hCeVAsb0JBQVEsR0FBR3hULENBQUMsQ0FBQ2lVLEtBQUYsQ0FBUXZtQixLQUFSLEVBQWUsUUFBZixFQUF5QkUsUUFBekIsRUFBWDtBQUNBLFdBRkQsTUFFSztBQUNKNGxCLG9CQUFRLEdBQUc5bEIsS0FBSyxDQUFDLFFBQUQsQ0FBaEI7QUFDQTtBQUNXOztBQUNEOztBQUNKO0FBQ0k4bEIsZ0JBQVEsR0FBRzlsQixLQUFLLEdBQUdBLEtBQUgsR0FBVyxFQUEzQjtBQUNBO0FBMUhSO0FBNEhILEdBOUhELENBOEhFLE9BQU9pRixDQUFQLEVBQVU7QUFDUkEsS0FBQztBQUVELFdBQU8sRUFBUDtBQUNIOztBQUNELFNBQU82Z0IsUUFBUDtBQUNILENBeklEOztBQTJJQSxJQUFHeFUsTUFBTSxDQUFDMEgsUUFBVixFQUFtQjtBQUNmc0ssVUFBUSxDQUFDa0QsWUFBVCxDQUFzQixPQUF0QixFQUErQjtBQUMzQjlTLFlBQVEsRUFBRSxTQURpQjtBQUUzQitTLFlBQVEsRUFBRSxZQUFXO0FBQ2pCLFVBQUluZixJQUFJLEdBQUcsS0FBSzlHLElBQUwsQ0FBVSxXQUFWLENBQVg7QUFDQSxhQUFPZ2hCLFlBQVksQ0FBQ3FCLGFBQWIsQ0FBMkJ2YixJQUEzQixDQUFQO0FBQ0gsS0FMMEI7QUFNM0JvZixtQkFBZSxFQUFFO0FBQ2IscUJBQWVwRCxRQUFRLENBQUNvRCxlQUFULENBQXlCQyxtQkFEM0I7QUFFYixnQkFBVXJELFFBQVEsQ0FBQ29ELGVBQVQsQ0FBeUJFLGNBRnRCO0FBR2Isb0JBQWN0RCxRQUFRLENBQUNvRCxlQUFULENBQXlCRyxtQkFIMUI7QUFJYixpQkFBV3ZELFFBQVEsQ0FBQ29ELGVBQVQsQ0FBeUJJLGVBSnZCO0FBS2Isc0JBQWdCeEQsUUFBUSxDQUFDb0QsZUFBVCxDQUF5Qkssb0JBTDVCO0FBTWIsY0FBUXpELFFBQVEsQ0FBQ29ELGVBQVQsQ0FBeUJNLFlBTnBCO0FBT2IsbUJBQWExRCxRQUFRLENBQUNvRCxlQUFULENBQXlCTztBQVB6QixLQU5VO0FBZTNCQyxpQkFBYSxFQUFFLFVBQVN2VyxPQUFULEVBQWtCO0FBQzdCLFVBQUksT0FBT0EsT0FBTyxDQUFDdVAsSUFBUixDQUFhaUgsU0FBcEIsS0FBa0MsV0FBbEMsSUFBaUQsT0FBT3hXLE9BQU8sQ0FBQ3BILEdBQWYsS0FBdUIsUUFBNUUsRUFBc0Y7QUFDbEZvSCxlQUFPLENBQUN1UCxJQUFSLENBQWFpSCxTQUFiLEdBQXlCeFcsT0FBTyxDQUFDcEgsR0FBakM7QUFDSDs7QUFDRCxhQUFPb0gsT0FBUDtBQUNIO0FBcEIwQixHQUEvQjtBQXVCQXNELFVBQVEsQ0FBQ21ULE9BQVQsQ0FBaUJDLE1BQWpCLENBQXdCO0FBQ3BCLDhEQUEwRCxVQUFTQyxLQUFULEVBQWdCNVQsUUFBaEIsRUFBMEI7QUFDaEYsVUFBSXBNLElBQUksR0FBR29NLFFBQVEsQ0FBQ2xULElBQVQsQ0FBYzhHLElBQXpCO0FBRUEsVUFBSWliLFVBQVUsR0FBR2YsWUFBWSxDQUFDZ0IsYUFBYixDQUEyQmxiLElBQTNCLENBQWpCO0FBRUEsVUFBSWlnQixjQUFjLEdBQUdoRixVQUFVLEdBQUdBLFVBQVUsQ0FBQ3hqQixNQUFkLEdBQXVCLENBQXREO0FBRUF5aUIsa0JBQVksQ0FBQytDLFNBQWIsQ0FBdUJqZCxJQUF2QixFQUE2QmlnQixjQUE3QixFQUE2QyxLQUE3QztBQUNILEtBVG1CO0FBV3BCLG1EQUErQyxVQUFTRCxLQUFULEVBQWdCNVQsUUFBaEIsRUFBMEI7QUFDckUsVUFBSUEsUUFBUSxDQUFDbFQsSUFBVCxDQUFjMGYsSUFBZCxDQUFtQnBHLFFBQXZCLEVBQWlDO0FBQzdCLFlBQUlyRSxLQUFLLEdBQUcvQixRQUFRLENBQUNsVCxJQUFULENBQWM4RyxJQUExQjtBQUNBLFlBQUk4QixLQUFLLEdBQUdrZSxLQUFLLENBQUNFLGFBQU4sQ0FBb0JDLE9BQXBCLENBQTRCcmUsS0FBeEM7QUFDQW9ZLG9CQUFZLENBQUMrQyxTQUFiLENBQXVCOU8sS0FBdkIsRUFBOEJyTSxLQUE5QixFQUFxQyxNQUFyQztBQUNIO0FBQ0osS0FqQm1CO0FBbUJwQixvREFBZ0QsVUFBU2tlLEtBQVQsRUFBZ0I1VCxRQUFoQixFQUEwQjtBQUN0RSxVQUFJK0IsS0FBSyxHQUFHL0IsUUFBUSxDQUFDbFQsSUFBVCxDQUFjOEcsSUFBMUI7QUFDQSxVQUFJb2EsVUFBVSxHQUFHNEYsS0FBSyxDQUFDRSxhQUFOLENBQW9CQyxPQUFwQixDQUE0QnJlLEtBQTdDO0FBQ0F5WCxhQUFPLENBQUM2RyxHQUFSLENBQVksaUJBQVosRUFBK0IsSUFBL0I7QUFDQWxHLGtCQUFZLENBQUM2QyxVQUFiLENBQXdCNU8sS0FBeEIsRUFBK0JpTSxVQUEvQjtBQUNILEtBeEJtQjtBQTBCcEIseUNBQXFDLFVBQVU0RixLQUFWLEVBQWlCNVQsUUFBakIsRUFBMkI7QUFDckUsVUFBSSxDQUFDQSxRQUFRLENBQUNsVCxJQUFULENBQWMwZixJQUFkLENBQW1CcEcsUUFBeEIsRUFBa0M7QUFDakMsWUFBSXJFLEtBQUssR0FBRy9CLFFBQVEsQ0FBQ2xULElBQVQsQ0FBYzhHLElBQTFCO0FBQ0EsWUFBSThCLEtBQUssR0FBR2tlLEtBQUssQ0FBQ0UsYUFBTixDQUFvQkMsT0FBcEIsQ0FBNEJyZSxLQUF4QztBQUNBb1ksb0JBQVksQ0FBQytDLFNBQWIsQ0FBdUI5TyxLQUF2QixFQUE4QnJNLEtBQTlCLEVBQXFDLE1BQXJDO0FBQ0E7QUFDRDtBQWhDeUIsR0FBeEI7O0FBcUNBNkssVUFBUSxDQUFDbVQsT0FBVCxDQUFpQk8sUUFBakIsR0FBNEIsWUFBVztBQUVuQyxRQUFJbFMsS0FBSyxHQUFHLEtBQUtqVixJQUFMLENBQVU4RyxJQUF0QjtBQUVBLFFBQUlvUixJQUFJLEdBQUc4SSxZQUFZLENBQUNtQyxPQUFiLENBQXFCbE8sS0FBckIsQ0FBWDtBQUNBLFFBQUlxTixVQUFVLEdBQUd0QixZQUFZLENBQUN1QixVQUFiLENBQXdCdE4sS0FBeEIsRUFBK0IsS0FBS2pWLElBQUwsQ0FBVVIsS0FBekMsQ0FBakI7QUFDQXdoQixnQkFBWSxDQUFDb0IsYUFBYixDQUEyQm5OLEtBQTNCLEVBQWtDcU4sVUFBbEM7QUFFQVYsS0FBQyxDQUFDLGlCQUFpQjNNLEtBQWpCLEdBQXlCLFNBQTFCLENBQUQsQ0FBc0NtSCxJQUF0QyxDQUEyQzRFLFlBQVksQ0FBQzBELFFBQWIsQ0FBc0J6UCxLQUF0QixFQUE2QixLQUFLalYsSUFBTCxDQUFVMGYsSUFBVixDQUFlcEcsUUFBNUMsQ0FBM0M7QUFFQXNJLEtBQUMsQ0FBQyxpQkFBaUIzTSxLQUFqQixHQUF5QixTQUExQixDQUFELENBQXNDbUgsSUFBdEMsQ0FBMkM0RSxZQUFZLENBQUNrRSxRQUFiLENBQXNCaE4sSUFBdEIsRUFBNEJqRCxLQUE1QixFQUFtQytMLFlBQVksQ0FBQ2dCLGFBQWIsQ0FBMkIvTSxLQUEzQixDQUFuQyxFQUFzRSxLQUFLalYsSUFBTCxDQUFVMGYsSUFBVixDQUFlcEcsUUFBckYsQ0FBM0M7QUFFQThOLE9BQUcsR0FBR2poQixDQUFDLENBQUMsd0JBQUQsQ0FBUDtBQUNBa2hCLGFBQVMsR0FBRywwQ0FBd0NuUCxJQUFJLENBQUMzWixNQUE3QyxHQUFvRCxzQ0FBcEQsR0FBMkY2b0IsR0FBM0YsR0FBK0YsWUFBM0c7O0FBRUEsUUFBSSxLQUFLcG5CLElBQUwsQ0FBVTBmLElBQVYsQ0FBZXBHLFFBQW5CLEVBQTZCO0FBQzFCc0ksT0FBQyxDQUFDLGlCQUFpQjNNLEtBQWpCLEdBQXlCLFNBQTFCLENBQUQsQ0FBc0NtTyxNQUF0QyxDQUE2Q2lFLFNBQTdDO0FBQ0Y7QUFDSixHQWxCRDtBQW1CSCxDOzs7Ozs7Ozs7Ozs7QUNwbUJEM1gsVUFBVXNDLE9BQVYsR0FDQztBQUFBc1YsaUJBQWUsVUFBQ0MsTUFBRDtBQUNkLFFBQUFqUCxLQUFBLEVBQUFnUCxhQUFBO0FBQUFoUCxZQUFRLEVBQVI7O0FBRUEsUUFBR3hILE9BQU9DLFFBQVY7QUFDQ3VILGNBQVE3RSxTQUFTcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQWxDLENBQThDcUYsS0FBdEQ7QUFERDtBQUdDQSxjQUFRK0gsUUFBUXZVLEdBQVIsQ0FBWSxTQUFaLENBQVI7QUNDRTs7QURDSHdiLG9CQUFnQnBXLEdBQUdzVyxnQkFBSCxDQUFvQnBXLE9BQXBCLENBQTRCO0FBQUNrSCxhQUFPQSxLQUFSO0FBQWVaLFlBQU02UDtBQUFyQixLQUE1QixDQUFoQjtBQUNBLFdBQU9ELGFBQVA7QUFURDtBQVdBRyxZQUFVLFVBQUNGLE1BQUQ7QUFFVCxRQUFBOWEsUUFBQSxFQUFBNmEsYUFBQTtBQUFBQSxvQkFBZ0I1WCxVQUFVc0MsT0FBVixDQUFrQnNWLGFBQWxCLENBQWdDQyxNQUFoQyxDQUFoQjtBQUVBOWEsZUFBVyxLQUFYOztBQUVBLFFBQUdxRSxPQUFPQyxRQUFWO0FBQ0N0RSxpQkFBV2dILFNBQVNxRCxRQUFULEdBQW9CME8sSUFBcEIsQ0FBeUJ0UyxRQUF6QixDQUFrQ0QsV0FBbEMsQ0FBOEN4RyxRQUF6RDtBQ0VFOztBREFILFFBQUE2YSxpQkFBQSxPQUFHQSxjQUFlSSxJQUFsQixHQUFrQixNQUFsQjtBQUNDLFVBQUdqYixRQUFIO0FBQ0MsZUFBT3FFLE9BQU9pRSxXQUFQLENBQW1CLHVCQUF1QnVTLGNBQWNJLElBQXhELENBQVA7QUFERDtBQUdDLGVBQU81UyxRQUFRQyxXQUFSLENBQW9CLHVCQUF1QnVTLGNBQWNJLElBQXpELENBQVA7QUFKRjtBQ09HO0FEM0JKO0FBQUEsQ0FERCxDOzs7Ozs7Ozs7Ozs7QUVBQS9YLGNBQWNxQyxPQUFkLEdBQ0M7QUFBQTJWLGlCQUFlLFVBQUNDLE9BQUQsRUFBVUMsV0FBVixFQUF1QmhILEtBQXZCO0FBQ2QsUUFBQXlHLGFBQUE7O0FBQUEsUUFBRyxDQUFDTyxXQUFKO0FBQ0MsYUFBTyxLQUFQO0FDRUU7O0FEREgsUUFBRyxDQUFDLFVBQUQsRUFBYSxZQUFiLEVBQTJCLFdBQTNCLEVBQXdDMUksUUFBeEMsQ0FBaUQwQixLQUFqRCxDQUFIO0FBQ0MsYUFBTyxLQUFQO0FDR0U7O0FERkh5RyxvQkFBZ0I1WCxVQUFVc0MsT0FBVixDQUFrQnNWLGFBQWxCLENBQWdDTSxPQUFoQyxDQUFoQjs7QUFFQSxRQUFBTixpQkFBQSxPQUFHQSxjQUFlSSxJQUFsQixHQUFrQixNQUFsQjtBQUNDLGFBQU8sSUFBUDtBQUREO0FBR0MsYUFBTyxLQUFQO0FDR0U7QURiSjtBQUFBLENBREQsQzs7Ozs7Ozs7Ozs7O0FFQUE3WCxxQkFBcUJtQyxPQUFyQixHQUNDO0FBQUFvSCxvQkFBa0I7QUFDakIsUUFBQXBaLElBQUEsRUFBQXdmLGdCQUFBO0FBQUFBLHVCQUFtQmpILGdCQUFnQmtILFdBQWhCLEVBQW5CO0FBQ0F6ZixXQUFPO0FBQ044RyxZQUFNLGVBREE7QUFFTjRZLFlBQU07QUFBQzVZLGNBQU0sZUFBUDtBQUF3QjZZLFlBQUksZUFBNUI7QUFBNkMsaUJBQU87QUFBcEQsT0FGQTtBQUdObmdCLGFBQU9nZ0IsaUJBQWlCckc7QUFIbEIsS0FBUDs7QUFLQSxRQUFHLENBQUlxRyxnQkFBSixJQUF3QkEsaUJBQWlCM0csS0FBakIsS0FBMEIsT0FBckQ7QUFDQzdZLFdBQUswZixJQUFMLENBQVVHLFFBQVYsR0FBcUIsSUFBckI7QUNNRTs7QURMSCxXQUFPN2YsSUFBUDtBQVREO0FBV0E4ZixjQUFZO0FBQ1gsV0FBTyxjQUFQO0FBWkQ7QUFjQUMsY0FBWTtBQUNYLFFBQUdDLGVBQWVDLFVBQWYsRUFBSDtBQUNDLGFBQU8sVUFBUDtBQUREO0FBR0MsYUFBTyxRQUFQO0FDT0U7QUR6Qko7QUFvQkFDLGdCQUFjO0FBQ2IsUUFBQXpQLFlBQUE7QUFBQUEsbUJBQWU4SCxnQkFBZ0IxQixzQkFBaEIsRUFBZjs7QUFDQSxRQUFHcEcsWUFBSDtBQUNDLGFBQU9BLFlBQVA7QUNTRTtBRGhDSjtBQXlCQTBQLHVCQUFxQixVQUFDcmdCLEdBQUQ7QUFDcEIsUUFBQXNnQixVQUFBO0FBQUFBLGlCQUFhM0gsdUJBQXVCQyx1QkFBdkIsRUFBYjtBQUNBNVksUUFBSSxhQUFKLElBQXdCc2dCLGFBQWdCQSxXQUFXdGdCLElBQUk2VyxJQUFmLENBQWhCLEdBQTBDLEVBQWxFO0FBQ0E3VyxRQUFJLFFBQUosSUFBZ0IsY0FBaEI7QUFDQSxXQUFPQSxHQUFQO0FBN0JEO0FBK0JBZ1gsWUFBVTtBQUNULFFBQUEwSSxnQkFBQTtBQUFBYSxZQUFRdlUsR0FBUixDQUFZLGFBQVo7O0FBQ0EsUUFBSXVVLFFBQVF2VSxHQUFSLENBQVksWUFBWixDQUFKO0FBQ0MwVCx5QkFBbUJqSCxnQkFBZ0JrSCxXQUFoQixFQUFuQjtBQUNBLGFBQU9ELGdCQUFQO0FDWUU7QUQvQ0o7QUFxQ0FtRSxTQUFPLFVBQUN4RixHQUFEO0FBQ04sUUFBR0EsR0FBSDtBQUNDLGFBQU8sS0FBUDtBQUREO0FBR0MsYUFBTyxJQUFQO0FDYUU7QUR0REo7QUEyQ0EySixXQUFTLFVBQUMzSixHQUFEO0FBQ1IsUUFBR0EsR0FBSDtBQUNDLGFBQU8sSUFBUDtBQUREO0FBR0MsYUFBTyxLQUFQO0FDY0U7QUQ3REo7QUFpREFoUCxVQUFRLFVBQUNtUixDQUFELEVBQUlDLENBQUo7QUFDUCxXQUFRRCxNQUFLQyxDQUFiO0FBbEREO0FBb0RBd0gsWUFBVSxVQUFDekgsQ0FBRCxFQUFJQyxDQUFKO0FBQ1QsV0FBTyxFQUFFRCxNQUFLQyxDQUFQLENBQVA7QUFyREQ7QUF1REFwQixZQUFVLFVBQUNtQixDQUFELEVBQUlDLENBQUo7QUFDVCxXQUFPQSxFQUFFbmIsS0FBRixDQUFRLEdBQVIsRUFBYStaLFFBQWIsQ0FBc0JtQixDQUF0QixDQUFQO0FBeEREO0FBMERBMEgsV0FBUyxVQUFDMUgsQ0FBRCxFQUFJQyxDQUFKO0FBQ1IsV0FBT0EsRUFBRW5iLEtBQUYsQ0FBUSxHQUFSLEVBQWErWixRQUFiLENBQXNCbUIsQ0FBdEIsQ0FBUDtBQTNERDtBQTZEQTFQLFVBQVE7QUFDUCxRQUFBSCxZQUFBO0FBQUFBLG1CQUFlOEgsZ0JBQWdCMUIsc0JBQWhCLEVBQWY7O0FBQ0EsUUFBR3BHLFlBQUg7QUFDQyxhQUFPLElBQUkrUCxZQUFKLENBQWlCL0gsdUJBQXVCZ0ksaUJBQXZCLENBQXlDaFEsWUFBekMsQ0FBakIsQ0FBUDtBQ2dCRTtBRGhGSjtBQWtFQTBGLGNBQVksVUFBQ2YsSUFBRCxFQUFPL00sT0FBUDtBQUNYLFFBQUcsQ0FBQytNLElBQUo7QUFDQyxhQUFPLEVBQVA7QUNpQkU7O0FEaEJILFFBQUcvTSxXQUFXLE9BQU9BLE9BQVAsS0FBbUIsUUFBakM7QUFDQ0EsZ0JBQVUrVSxLQUFLelgsS0FBTCxDQUFXMEMsT0FBWCxDQUFWO0FDa0JFOztBRGhCSCxRQUFHLENBQUNBLFFBQVFxUixNQUFaO0FBQ0NyUixnQkFBVTtBQUFDcVIsZ0JBQVE7QUFBVCxPQUFWO0FDb0JFOztBRGxCSCxXQUFPRCxPQUFPckUsSUFBUCxFQUFhc0UsTUFBYixDQUFvQnJSLFFBQVFxUixNQUE1QixDQUFQO0FBM0VEO0FBNkVBaUIsVUFBUTtBQUNQLFFBQUF2RCxJQUFBLEVBQUFOLFFBQUEsRUFBQTVCLE1BQUEsRUFBQXpELEdBQUEsRUFBQWtHLElBQUEsRUFBQXNRLElBQUEsRUFBQUMsSUFBQSxFQUFBalYsV0FBQSxFQUFBOEUsS0FBQSxFQUFBNEMsTUFBQTs7QUFBQSxRQUFHN0osT0FBT0MsUUFBVjtBQUNDa0Msb0JBQUEsQ0FBQXhCLE1BQUFnQyxTQUFBcUQsUUFBQSxlQUFBYSxPQUFBbEcsSUFBQStULElBQUEsYUFBQXlDLE9BQUF0USxLQUFBekUsUUFBQSxZQUFBK1UsS0FBbURoVixXQUFuRCxHQUFtRCxNQUFuRCxHQUFtRCxNQUFuRCxHQUFtRCxNQUFuRDtBQUNBNkQsaUJBQUE3RCxlQUFBLE9BQVdBLFlBQWE2RCxRQUF4QixHQUF3QixNQUF4QjtBQUNBTSxhQUFPMUUseUJBQXlCeUUsY0FBekIsQ0FBd0NMLFFBQXhDLENBQVA7QUFDQTVCLGVBQUFqQyxlQUFBLE9BQVNBLFlBQWFpQyxNQUF0QixHQUFzQixNQUF0Qjs7QUFDQSxVQUFHQSxPQUFPMEMsaUJBQVAsT0FBOEIsT0FBakM7QUFDQzFDLGlCQUFTLE9BQVQ7QUFORjtBQUFBO0FBUUM0QixpQkFBV3lCLGdCQUFnQmtILFdBQWhCLEVBQVg7QUFFQXJJLGFBQU9tQixnQkFBZ0I0UCxzQkFBaEIsRUFBUDtBQUVBalQsZUFBU21MLFFBQVF2VSxHQUFSLENBQVksc0JBQVosQ0FBVDtBQ29CRTs7QURsQkgsUUFBRyxDQUFDZ0wsUUFBRCxJQUFhLENBQUNNLElBQWpCO0FBQ0MsYUFBTyxFQUFQO0FDb0JFOztBRGxCSFcsWUFBUVgsS0FBS1csS0FBYjtBQUVBNEMsYUFBUyxFQUFUOztBQ21CRSxRQUFJLENBQUN1TixPQUFPcFIsU0FBUzZELE1BQWpCLEtBQTRCLElBQWhDLEVBQXNDO0FBQ3BDdU4sV0RsQmEzVyxPQ2tCYixDRGxCcUIsVUFBQ3NMLEtBQUQ7QUFDeEIsWUFBQXVMLFFBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBO0FBQUFBLGVBQU92USxNQUFNbkIsZ0JBQU4sQ0FBdUIsS0FBdkIsRUFBOEJpRyxNQUFNeUwsSUFBcEMsQ0FBUDtBQUVBRixtQkFBVyxFQUFYOztBQ21CSyxZQUFJLENBQUNDLE9BQU94TCxNQUFNdUwsUUFBZCxLQUEyQixJQUEvQixFQUFxQztBQUNuQ0MsZURsQlM5VyxPQ2tCVCxDRGxCaUIsVUFBQ2dYLE9BQUQ7QUFDdkIsZ0JBQUFDLFVBQUE7O0FBQUEsZ0JBQUczTCxNQUFNZ0wsV0FBTixLQUFxQixJQUF4QjtBQUVDLGtCQUFHVSxRQUFRMUgsS0FBUixLQUFpQixVQUFwQjtBQUNDMkgsNkJBQWF4UyxRQUFRQyxFQUFSLENBQVcseUJBQVgsRUFBc0MsRUFBdEMsRUFBMENmLE1BQTFDLENBQWI7QUFERCxxQkFFSyxJQUFHcVQsUUFBUTFILEtBQVIsS0FBaUIsVUFBcEI7QUFDSjJILDZCQUFheFMsUUFBUUMsRUFBUixDQUFXLHlCQUFYLEVBQXNDLEVBQXRDLEVBQTBDZixNQUExQyxDQUFiO0FBREkscUJBRUEsSUFBR3FULFFBQVExSCxLQUFSLEtBQWlCLFlBQXBCO0FBQ0oySCw2QkFBYXhTLFFBQVFDLEVBQVIsQ0FBVywyQkFBWCxFQUF3QyxFQUF4QyxFQUE0Q2YsTUFBNUMsQ0FBYjtBQURJLHFCQUVBLElBQUdxVCxRQUFRMUgsS0FBUixLQUFpQixZQUFwQjtBQUNKMkgsNkJBQWF4UyxRQUFRQyxFQUFSLENBQVcsMkJBQVgsRUFBd0MsRUFBeEMsRUFBNENmLE1BQTVDLENBQWI7QUFESSxxQkFFQSxJQUFHcVQsUUFBUTFILEtBQVIsS0FBaUIsV0FBcEI7QUFDSjJILDZCQUFheFMsUUFBUUMsRUFBUixDQUFXLDBCQUFYLEVBQXVDLEVBQXZDLEVBQTJDZixNQUEzQyxDQUFiO0FBREkscUJBRUEsSUFBR3FULFFBQVExSCxLQUFSLEtBQWlCLEVBQXBCO0FBQ0oySCw2QkFBYSxFQUFiO0FBREk7QUFHSkEsNkJBQWEsRUFBYjtBQWZGO0FBQUE7QUFrQkNBLDJCQUFheFMsUUFBUUMsRUFBUixDQUFXLHdCQUFYLEVBQXFDLEVBQXJDLEVBQXlDZixNQUF6QyxDQUFiO0FDbUJROztBQUNELG1CRGxCUmtULFNBQVNyaEIsSUFBVCxDQUNDO0FBQUFzSyxtQkFBS2tYLFFBQVFsWCxHQUFiO0FBQ0F1Vyx1QkFBU1csUUFBUTdRLElBRGpCO0FBRUErUSw0QkFBY0YsUUFBUUUsWUFGdEI7QUFHQUMseUNBQTJCSCxRQUFRRyx5QkFIbkM7QUFJQUMsNkNBQStCSixRQUFRSSw2QkFKdkM7QUFLQUMsMkJBQWFMLFFBQVFLLFdBTHJCO0FBTUEvSCxxQkFBTzBILFFBQVExSCxLQU5mO0FBT0EySCwwQkFBWUEsVUFQWjtBQVFBM0ssMkJBQWEwSyxRQUFRMUssV0FSckI7QUFTQWdLLDJCQUFhVSxRQUFRVixXQVRyQjtBQVVBeGtCLG9CQUFNa2xCLFFBQVFsbEIsSUFWZDtBQVdBd2xCLG1DQUFxQk4sUUFBUU0sbUJBWDdCO0FBWUFDLCtCQUFpQlAsUUFBUU8sZUFaekI7QUFhQUMsdUJBQVNSLFFBQVFRLE9BYmpCO0FBY0FDLHlCQUFXVCxRQUFRUztBQWRuQixhQURELENDa0JRO0FEdkNULFdDa0JPO0FBdUNEOztBRGxCTixZQUFHVixJQUFIO0FBQ0MsY0FBR0EsS0FBS3hoQixJQUFMLElBQWE2VCxNQUFoQjtBQ29CUSxtQkRuQlBBLE9BQU8yTixLQUFLeGhCLElBQVosSUFBb0I2VCxPQUFPMk4sS0FBS3hoQixJQUFaLEVBQWtCVyxNQUFsQixDQUF5QjJnQixRQUF6QixDQ21CYjtBRHBCUjtBQ3NCUSxtQkRuQlB6TixPQUFPMk4sS0FBS3hoQixJQUFaLElBQW9Cc2hCLFFDbUJiO0FEdkJUO0FDeUJNO0FEckVQLE9Da0JJO0FBcUREOztBRHJCSCxXQUFPek4sTUFBUDtBQXJKRDtBQXlKQXlGLGNBQVk7QUNxQlQsV0RwQkYzSCx1QkFBdUJDLHVCQUF2QixFQ29CRTtBRDlLSDtBQTRKQWdJLHNCQUFvQjtBQUNuQixRQUFBQyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsS0FBQTtBQUFBRixVQUFNTixRQUFRdlUsR0FBUixDQUFZLEtBQVosQ0FBTjs7QUFDQSxRQUFHNlUsUUFBTyxPQUFQLElBQWtCQSxRQUFPLE9BQTVCO0FBQ0NFLGNBQVFSLFFBQVF2VSxHQUFSLENBQVksT0FBWixDQUFSOztBQUNBLFVBQUcrVSxLQUFIO0FBQ0MsWUFBSUEsVUFBUyxVQUFiO0FBQ0MsaUJBQU8sYUFBUDtBQURELGVBRUssSUFBSUEsVUFBUyxVQUFiO0FBQ0osaUJBQU8sWUFBUDtBQUpGO0FBRkQ7QUM4Qkc7O0FEdkJIRCxVQUFNckksZ0JBQWdCa0gsV0FBaEIsRUFBTjs7QUFDQSxRQUFHbUIsT0FBT0EsSUFBSXBELGNBQWQ7QUFDQyxVQUFHb0QsSUFBSXBELGNBQUosS0FBc0IsVUFBekI7QUFDQyxlQUFPLGFBQVA7QUFERCxhQUVLLElBQUlvRCxJQUFJcEQsY0FBSixLQUFzQixVQUExQjtBQUNKLGVBQU8sWUFBUDtBQUpGO0FDOEJHO0FEcE1KO0FBb0xBZ0IsZ0JBQWMsVUFBQzFILFFBQUQ7QUFDYixRQUFBbEcsTUFBQSxFQUFBSCxZQUFBOztBQUFBLFFBQUdLLE9BQU8wSCxRQUFWO0FBQ0MvSCxxQkFBZThILGdCQUFnQjFCLHNCQUFoQixFQUFmO0FBREQ7QUFHQ3BHLHFCQUFlOEgsZ0JBQWdCdEgsY0FBaEIsQ0FBK0I2RixTQUFTdEcsSUFBeEMsRUFBOENzRyxTQUFTckcsWUFBdkQsQ0FBZjtBQ29CRTs7QURuQkgsUUFBR0EsWUFBSDtBQUNDRyxlQUFTa0IsRUFBRWxJLEtBQUYsQ0FBUTZHLGFBQWFHLE1BQXJCLENBQVQ7QUFFQUEsYUFBT1csT0FBUCxDQUFlLFVBQUMwRCxLQUFELEVBQVFyTSxLQUFSO0FBQ2QsWUFBQXFnQixXQUFBLEVBQUFDLFlBQUEsRUFBQUMsVUFBQSxFQUFBQyxlQUFBLEVBQUFuSyxVQUFBLEVBQUFDLE1BQUEsRUFBQUYsUUFBQTtBQUFBL0osY0FBTStKLFFBQU4sR0FBaUIsRUFBakI7QUFDQS9KLGNBQU1pSyxNQUFOLEdBQWUsRUFBZjtBQUNBRCxxQkFBYSxDQUFiOztBQUVBLG9CQUFBYixRQUFBLG9CQUFBQSxhQUFBLE9BQUdBLFNBQVVDLGtCQUFiLEdBQWEsTUFBYixNQUFtQ3BKLE1BQU0wQixJQUF6QztBQUNDMUIsZ0JBQU1nUSxPQUFOLEdBQWdCLElBQWhCO0FDb0JJOztBRGxCTCxZQUFHaFEsTUFBTXBELE9BQU4sSUFBaUJvRCxNQUFNNVIsSUFBTixLQUFjLE9BQWxDO0FBQ0M0UixnQkFBTW1LLFVBQU4sR0FBbUIsVUFBbkI7QUNvQkk7O0FEbEJMLFlBQUd0SyxRQUFRd0ksUUFBUixFQUFIO0FBRUMsY0FBR3JJLE1BQU01UixJQUFOLEtBQWMsU0FBZCxJQUEyQjRSLE1BQU01UixJQUFOLEtBQWMsT0FBNUM7QUFDQzRSLGtCQUFNZ0ssVUFBTixHQUFtQixDQUFuQjtBQUREO0FBR0NoSyxrQkFBTWdLLFVBQU4sR0FBbUIsQ0FBbkI7QUNtQks7O0FEakJOLGNBQUdyVyxVQUFTLENBQVo7QUFDQ3FNLGtCQUFNK0osUUFBTixHQUFpQixNQUFqQjtBQ21CTSxtQkRsQk4vSixNQUFNaUssTUFBTixHQUFlLE9Da0JUO0FEM0JSO0FBQUE7QUFXQ2lLLHVCQUFhdlksT0FBT2hSLEtBQVAsQ0FBYSxDQUFiLEVBQWdCZ0osS0FBaEIsQ0FBYjtBQUVBd2dCLDRCQUFrQkQsV0FBV25FLGNBQVgsQ0FBMEIsU0FBMUIsRUFBcUMsSUFBckMsQ0FBbEI7QUFFQWhHLHFCQUFXLEVBQVg7QUFFQUUsbUJBQVMsRUFBVDtBQUdBZ0sseUJBQWUsSUFBZjtBQUNBRCx3QkFBYyxJQUFkOztBQUVBLGNBQUdyZ0IsUUFBUSxDQUFYO0FBQ0NzZ0IsMkJBQWV0WSxPQUFPaEksUUFBUSxDQUFmLENBQWY7QUNjSzs7QURaTixjQUFHQSxRQUFRZ0ksT0FBT3JTLE1BQVAsR0FBZ0IsQ0FBM0I7QUFDQzBxQiwwQkFBY3JZLE9BQU9oSSxRQUFRLENBQWYsQ0FBZDtBQ2NLOztBRFhOLGNBQUdxTSxNQUFNNVIsSUFBTixLQUFjLFNBQWQsSUFBMkI0UixNQUFNNVIsSUFBTixLQUFjLE9BQTVDO0FBQ0M0Yix5QkFBYSxDQUFiO0FBREQsaUJBRUssSUFBR2hLLE1BQU1nUSxPQUFUO0FBQ0poRyx5QkFBYSxDQUFiO0FBREk7QUFJSixnQkFBR2lLLGdCQUFnQkQsV0FBaEIsSUFBK0JDLGFBQWFqRSxPQUE1QyxJQUF1RGdFLFlBQVloRSxPQUF0RTtBQUNDaFEsb0JBQU1nUSxPQUFOLEdBQWdCLElBQWhCO0FBQ0FoRywyQkFBYSxDQUFiO0FDWU07O0FEVFAsZ0JBQUcsQ0FBQ2tLLFdBQVc1cUIsTUFBWCxHQUFvQjZxQixnQkFBZ0I3cUIsTUFBckMsSUFBK0MsQ0FBL0MsS0FBb0QsQ0FBcEQsSUFBeUQwcUIsV0FBekQsSUFBd0VBLFlBQVloRSxPQUF2RjtBQUNDaFEsb0JBQU1nUSxPQUFOLEdBQWdCLElBQWhCO0FBQ0FoRywyQkFBYSxDQUFiO0FDV007O0FEUlAsZ0JBQUcsQ0FBQ2tLLFdBQVc1cUIsTUFBWCxHQUFvQjZxQixnQkFBZ0I3cUIsTUFBckMsSUFBK0MsQ0FBL0MsS0FBb0QsQ0FBcEQsSUFBeUQwcUIsZ0JBQWUsSUFBM0U7QUFDQ2hVLG9CQUFNZ1EsT0FBTixHQUFnQixJQUFoQjtBQUNBaEcsMkJBQWEsQ0FBYjtBQWhCRztBQzJCQzs7QURUTmhLLGdCQUFNZ0ssVUFBTixHQUFtQkEsVUFBbkI7O0FBR0EsY0FBR3JXLFVBQVMsQ0FBWjtBQUVDb1csdUJBQVcsTUFBWDtBQUZEO0FBSUMsZ0JBQUcsQ0FBQ21LLFdBQVc1cUIsTUFBWCxHQUFvQjZxQixnQkFBZ0I3cUIsTUFBckMsSUFBK0MsQ0FBL0MsS0FBb0QsQ0FBcEQsSUFBeUQwVyxNQUFNZ1EsT0FBbEU7QUFDQyxrQkFBR2hRLE1BQU01UixJQUFOLEtBQWMsT0FBakI7QUFDQzJiLDJCQUFXLGlDQUFYO0FBREQ7QUFHQ0EsMkJBQVcsTUFBWDtBQUpGO0FBSkQ7QUNrQk07O0FEUk4vSixnQkFBTStKLFFBQU4sR0FBaUJBLFFBQWpCOztBQUdBLGNBQUdwVyxRQUFRLENBQVIsS0FBYWdJLE9BQU9yUyxNQUFwQixJQUE4QjBXLE1BQU01UixJQUFOLEtBQWMsU0FBNUMsSUFBeUQ0UixNQUFNNVIsSUFBTixLQUFjLE9BQXZFLElBQWtGNFIsTUFBTWdRLE9BQTNGO0FBQ0MvRixxQkFBUyxPQUFUO0FDUUs7O0FETk4sY0FBRyxDQUFDaUssV0FBVzVxQixNQUFYLEdBQW9CNnFCLGdCQUFnQjdxQixNQUFyQyxJQUErQyxDQUEvQyxLQUFvRCxDQUF2RDtBQUNDMmdCLHFCQUFTLE9BQVQ7QUNRSzs7QUFDRCxpQkRQTGpLLE1BQU1pSyxNQUFOLEdBQWVBLE1DT1Y7QUFDRDtBRDNGTjtBQXFGQSxhQUFPdE8sTUFBUDtBQ1NFO0FEMVJKO0FBbVJBeVksZ0JBQWMsVUFBQ2pCLFFBQUQsRUFBV2tCLEtBQVg7QUFDYixRQUFHLENBQUNsQixRQUFKO0FBQ0MsYUFBTyxFQUFQO0FDVUU7O0FEUkgsUUFBRyxDQUFDQSxRQUFELFlBQXFCdlgsS0FBeEI7QUFDQyxhQUFPLEVBQVA7QUFERDtBQUdDLFVBQUd5WSxVQUFTLE1BQVo7QUFDQ2xCLGlCQUFTdm5CLElBQVQsQ0FBYyxVQUFDMG9CLEVBQUQsRUFBS0MsRUFBTDtBQUNiLGNBQUFDLEdBQUEsRUFBQUMsR0FBQTs7QUFBQUQsZ0JBQU0sQ0FBTjtBQUNBQyxnQkFBTSxDQUFOOztBQUVBLGNBQUdILEdBQUdYLFdBQU47QUFDQ2Esa0JBQU1GLEdBQUdYLFdBQUgsQ0FBZWUsT0FBZixFQUFOO0FDVUs7O0FEUk4sY0FBR0gsR0FBR1osV0FBTjtBQUNDYyxrQkFBTUYsR0FBR1osV0FBSCxDQUFlZSxPQUFmLEVBQU47QUNVSzs7QURSTixpQkFBT0QsTUFBTUQsR0FBYjtBQVZEO0FBREQ7QUFhQ3JCLGlCQUFTdm5CLElBQVQsQ0FBYyxVQUFDMG9CLEVBQUQsRUFBS0MsRUFBTDtBQUNiLGNBQUFDLEdBQUEsRUFBQUMsR0FBQTs7QUFBQUQsZ0JBQU0sQ0FBTjtBQUNBQyxnQkFBTSxDQUFOOztBQUVBLGNBQUdILEdBQUdYLFdBQU47QUFDQ2Esa0JBQU1GLEdBQUdYLFdBQUgsQ0FBZWUsT0FBZixFQUFOO0FDV0s7O0FEVE4sY0FBR0gsR0FBR1osV0FBTjtBQUNDYyxrQkFBTUYsR0FBR1osV0FBSCxDQUFlZSxPQUFmLEVBQU47QUNXSzs7QURUTixpQkFBT0YsTUFBTUMsR0FBYjtBQVZEO0FBaEJGO0FDdUNHOztBRFpILFdBQU90QixRQUFQO0FBbFREO0FBb1RBd0IsTUFBSSxVQUFDdGlCLEdBQUQ7QUFDSCxXQUFPME8sUUFBUUMsRUFBUixDQUFXM08sR0FBWCxDQUFQO0FBclREO0FBc1RBOFosWUFBVSxVQUFDekssSUFBRDtBQUNULFFBQUFsRyxZQUFBO0FBQUFBLG1CQUFlZ0QsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q3hDLFlBQTdEOztBQUNBLFFBQUdBLFlBQUg7QUFDQyxhQUFPQSxhQUFhRyxNQUFiLENBQW9CZ0csZ0JBQXBCLENBQXFDLE1BQXJDLEVBQTZDRCxJQUE3QyxDQUFQO0FDZ0JFO0FEelVKO0FBMlRBM0IsWUFBVSxVQUFDMkIsSUFBRDtBQUNULFFBQUFsRyxZQUFBLEVBQUFxRyxRQUFBLEVBQUE1QixNQUFBLEVBQUFDLFNBQUEsRUFBQXFOLE1BQUE7QUFBQTFMLGVBQVdyRCxTQUFTcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQWxDLENBQThDNkQsUUFBekQ7QUFFQXJHLG1CQUFlZ0QsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q3hDLFlBQTdEO0FBRUF5RSxhQUFTekIsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q2lDLE1BQXZEO0FBRUFDLGdCQUFZMUIsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q2tDLFNBQTFEO0FBRUFxTixhQUFTMUwsU0FBUzBMLE1BQVQsSUFBbUIsRUFBNUI7O0FBRUEsUUFBRzFSLE9BQU8wSCxRQUFWO0FBQ0NnSyxlQUFTL0osdUJBQXVCQyx1QkFBdkIsRUFBVDtBQ2FFOztBRFhILFdBQU9oRyx5QkFBeUJzQyxRQUF6QixDQUFrQ3dOLE9BQU83TCxJQUFQLENBQWxDLEVBQWdEbEcsYUFBYUcsTUFBYixDQUFvQmdHLGdCQUFwQixDQUFxQyxNQUFyQyxFQUE2Q0QsSUFBN0MsQ0FBaEQsRUFBb0d6QixNQUFwRyxFQUE0R0MsU0FBNUcsQ0FBUDtBQXpVRDtBQTJVQXVCLFlBQVUsVUFBQ0MsSUFBRDtBQUNULFFBQUFsRyxZQUFBO0FBQUFBLG1CQUFlZ0QsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q3hDLFlBQTdEO0FDY0UsV0RiRmlDLHlCQUF5QmdFLFFBQXpCLENBQWtDakcsYUFBYUcsTUFBL0MsRUFBdUQrRixJQUF2RCxDQ2FFO0FEMVZIO0FBK1VBa1QsY0FBWSxVQUFDNVUsS0FBRDtBQUNYLFNBQUFBLFNBQUEsT0FBR0EsTUFBTzVSLElBQVYsR0FBVSxNQUFWLE1BQWtCLE9BQWxCLEtBQUc0UixTQUFBLE9BQTBCQSxNQUFPbUIsV0FBakMsR0FBaUMsTUFBcEM7QUFDQyxhQUFPLFlBQVA7QUNjRTtBRC9WSjtBQW1WQTBULGlCQUFlLFVBQUM3VSxLQUFEO0FBQ2QsV0FBTytMLGFBQWEwRCxRQUFiLENBQXNCelAsS0FBdEIsRUFBNkIsS0FBN0IsQ0FBUDtBQXBWRDtBQXNWQThVLGdCQUFjLFVBQUM5VSxLQUFEO0FBRWIsUUFBQTZCLFFBQUEsRUFBQWlMLFVBQUEsRUFBQVMsTUFBQTs7QUFBQSxRQUFHMVIsT0FBT0MsUUFBVjtBQUNDK0YsaUJBQVdyRCxTQUFTcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQWxDLENBQThDNkQsUUFBekQ7QUFDQTBMLGVBQVMxTCxTQUFTMEwsTUFBVCxJQUFtQixFQUE1QjtBQUZEO0FBSUNBLGVBQVMvSix1QkFBdUJDLHVCQUF2QixFQUFUO0FDZUU7O0FEYkhxSixpQkFBYVMsT0FBT3ZOLE1BQU0wQixJQUFiLENBQWI7QUFDQSxXQUFPcUssYUFBYWtFLFFBQWIsQ0FBc0JqUSxNQUFNdU0sT0FBTixDQUFjMUwsV0FBZCxDQUEwQixNQUExQixDQUF0QixFQUF5RGIsS0FBekQsRUFBZ0U4TSxVQUFoRSxFQUE0RSxLQUE1RSxDQUFQO0FBL1ZEO0FBaVdBaUksYUFBVyxVQUFDL1UsS0FBRDtBQUNWLFFBQUFnVixZQUFBO0FBQUFBLG1CQUFleFcsU0FBU3FELFFBQVQsR0FBb0I5VyxJQUFuQzs7QUFDQSxRQUFHaXFCLGFBQWFyVixLQUFiLEtBQXNCLEtBQXpCO0FBQ0MsYUFBTyxLQUFQO0FDZ0JFOztBRGZILFdBQU8sSUFBUDtBQXJXRDtBQThXQW1LLGtCQUFnQixVQUFDOUosS0FBRDtBQUNmLFdBQU9wRixxQkFBcUJtQyxPQUFyQixDQUE2QjNCLDBCQUE3QixDQUF3RDRFLE1BQU1wRCxPQUE5RCxDQUFQO0FBL1dEO0FBaVhBeEIsOEJBQTRCLFVBQUNDLGFBQUQ7QUFDM0IsV0FBT1AsaUJBQWlCTSwwQkFBakIsQ0FBNENDLGFBQTVDLENBQVA7QUFsWEQ7QUFvWEFDLHdCQUFzQixVQUFDQyxJQUFELEVBQU9DLFlBQVA7QUFFckIsUUFBQUUsY0FBQSxFQUFBQyxNQUFBLEVBQUFhLEdBQUE7QUFBQWQscUJBQWlCLElBQUlFLEtBQUosRUFBakI7QUFFQUQsYUFBQSxFQUFBYSxNQUFBUCxHQUFBSSxhQUFBLENBQUFGLE9BQUE7QUNTSUMsV0FBS1osWURUVDtBQ1VJRCxZQUFNQTtBRFZWLFdDV1MsSURYVCxHQ1dnQmlCLElEWG9EYixNQUFwRSxHQUFvRSxNQUFwRSxLQUE4RSxFQUE5RTtBQUVBQSxXQUFPVyxPQUFQLENBQWUsVUFBQ0MsQ0FBRDtBQUNkLFVBQUFtRyxJQUFBOztBQUFBLFVBQUduRyxFQUFFbk8sSUFBRixLQUFVLE9BQWI7QUNZSyxlRFhKcU8sUUFBUUMsR0FBUixDQUFZLCtCQUFaLENDV0k7QURaTCxhQUVLLElBQUdILEVBQUVuTyxJQUFGLEtBQVUsU0FBYjtBQ1lBLGVBQU9tTyxLQUFLLElBQUwsR0FBWSxDQUFDbUcsT0FBT25HLEVBQUVaLE1BQVYsS0FBcUIsSUFBckIsR0FBNEIrRyxLRFh4Q3BHLE9DV3dDLENEWGhDLFVBQUNLLEVBQUQ7QUNZYixpQkRYTGpCLGVBQWU1SixJQUFmLENBQW9CNkssR0FBR0MsT0FBdkIsQ0NXSztBRFpOLFNDV21ELENBQTVCLEdEWHZCLE1DV1csR0RYWCxNQ1dJO0FEWkE7QUNnQkEsZURaSmxCLGVBQWU1SixJQUFmLENBQW9CeUssRUFBRUssT0FBdEIsQ0NZSTtBQUNEO0FEcEJMO0FDc0JFLFdEYkZDLEVBQUVDLElBQUYsQ0FBT3BCLGNBQVAsRUFBdUIsVUFBQ0wsYUFBRDtBQUN0QixhQUFPVCxxQkFBcUJtQyxPQUFyQixDQUE2QjNCLDBCQUE3QixDQUF3REMsYUFBeEQsQ0FBUDtBQURELE1DYUU7QURoWkg7QUFzWUE0Wiw0QkFBMEIsVUFBQzVaLGFBQUQsRUFBZ0I2WixZQUFoQjtBQUV6QixRQUFBQyxJQUFBLEVBQUFDLGFBQUE7QUFBQUEsb0JBQWdCLElBQUl4WixLQUFKLEVBQWhCOztBQUVBLFFBQUdoQixxQkFBcUJtQyxPQUFyQixDQUE2QjNCLDBCQUE3QixDQUF3REMsYUFBeEQsQ0FBSDtBQUNDLFVBQUdBLGFBQUg7QUFHQzhaLGVBQU85WixjQUFjbEwsS0FBZCxDQUFvQixHQUFwQixDQUFQO0FBS0FnbEIsYUFBSzdZLE9BQUwsQ0FBYSxVQUFDK1ksR0FBRDtBQUNaLGNBQUFDLFlBQUEsRUFBQTlZLEdBQUEsRUFBQWtHLElBQUEsRUFBQTZTLEVBQUEsRUFBQS9JLEVBQUE7QUFBQThJLHlCQUFlLEVBQWY7O0FBRUE7QUFDQ0EsMkJBQWUvVyxLQUFLLE1BQU04VyxHQUFOLEdBQVksR0FBakIsQ0FBZjtBQURELG1CQUFBRyxNQUFBO0FBR0NGLDJCQUFlLEVBQWY7QUNRSzs7QUROTixjQUFBQSxnQkFBQSxPQUFHQSxhQUFjRyxTQUFqQixHQUFpQixNQUFqQjtBQUNDakosaUJBQUssRUFBTDtBQUVBQSxlQUFHa0osUUFBSCxHQUFjSixhQUFhRyxTQUFiLENBQXVCcEMsSUFBckM7QUFFQTdHLGVBQUdtSixVQUFILEdBQWdCTCxhQUFhRyxTQUFiLENBQXVCRSxVQUF2QixJQUFxQyxLQUFyRDtBQUVBbkosZUFBR29KLGVBQUgsR0FBcUJOLGFBQWFHLFNBQWIsQ0FBdUJJLE9BQXZCLElBQWtDLEtBQXZEO0FBRUFySixlQUFHc0osbUJBQUgsR0FBeUJSLGFBQWFHLFNBQWIsQ0FBc0IsU0FBdEIsQ0FBekI7QUFFQWpKLGVBQUd1SixZQUFILEdBQWtCVCxhQUFhRyxTQUFiLENBQXVCTSxZQUF6QztBQUVBdkosZUFBRzBJLFlBQUgsR0FBa0JJLGFBQWFHLFNBQWIsQ0FBdUJQLFlBQXZCLElBQXVDQSxZQUF6RDtBQ0VNLG1CREFORSxjQUFjdGpCLElBQWQsQ0FBbUIwYSxFQUFuQixDQ0FNO0FEZlAsaUJBaUJLLEtBQUFuUixpQkFBQSxPQUFHQSxjQUFleEssT0FBZixDQUF1QixVQUF2QixDQUFILEdBQUcsTUFBSCxJQUF3QyxDQUFDLENBQXpDLElBQUcsQ0FBQXdLLGlCQUFBLE9BQTJDQSxjQUFleEssT0FBZixDQUF1QixvQkFBdkIsQ0FBM0MsR0FBMkMsTUFBM0MsSUFBMEYsQ0FBQyxDQUE5RjtBQUVKMmIsaUJBQUs7QUFBQ29KLCtCQUFpQixLQUFsQjtBQUF5QkQsMEJBQVksS0FBckM7QUFBNENULDRCQUFjQTtBQUExRCxhQUFMOztBQUVBLGdCQUFHRyxJQUFJeGtCLE9BQUosQ0FBWSxhQUFaLElBQTZCLENBQUMsQ0FBakM7QUFDQzJiLGlCQUFHbUosVUFBSCxHQUFnQixJQUFoQjtBQUNBTixvQkFBTUEsSUFBSWhyQixPQUFKLENBQVksYUFBWixFQUEwQixFQUExQixDQUFOO0FDRU07O0FEQVBrckIsaUJBQUtGLElBQUlockIsT0FBSixDQUFZLEdBQVosRUFBZ0IsRUFBaEIsRUFBb0JBLE9BQXBCLENBQTRCLEdBQTVCLEVBQWdDLEVBQWhDLENBQUw7O0FBQ0EsZ0JBQUdrckIsR0FBR3BsQixLQUFILENBQVMsR0FBVCxFQUFjN0csTUFBZCxHQUF1QixDQUExQjtBQUNDa2pCLGlCQUFHa0osUUFBSCxHQUFjSCxHQUFHcGxCLEtBQUgsQ0FBUyxHQUFULEVBQWMsQ0FBZCxDQUFkOztBQUNBLGtCQUFHaWxCLGNBQWNyRixjQUFkLENBQTZCLFVBQTdCLEVBQXdDdkQsR0FBR2tKLFFBQTNDLEVBQXFEcHNCLE1BQXJELEdBQThELENBQWpFO0FDRVMsb0JBQUksQ0FBQ2tULE1BQU00WSxjQUFjelQsZ0JBQWQsQ0FBK0IsVUFBL0IsRUFBMkM2SyxHQUFHa0osUUFBOUMsQ0FBUCxLQUFtRSxJQUF2RSxFQUE2RTtBQUMzRWxaLHNCREYrQ29aLGVDRS9DLEdERmlFLElDRWpFO0FESFg7QUFBQTtBQUdDLG9CQUFHTCxHQUFHcGxCLEtBQUgsQ0FBUyxHQUFULEVBQWM3RyxNQUFkLEdBQXVCLENBQTFCO0FBQ0Msd0JBQUFvWixPQUFBNlMsR0FBQXBsQixLQUFBLG9CQUFBdVMsS0FBcUJDLGlCQUFyQixLQUFHLE1BQUgsTUFBNEMsSUFBNUM7QUFDQzZKLHVCQUFHb0osZUFBSCxHQUFxQixJQUFyQjtBQUZGO0FBSEQ7QUFGRDtBQ2NPOztBQUNELG1CRFBOUixjQUFjdGpCLElBQWQsQ0FBbUIwYSxFQUFuQixDQ09NO0FBQ0Q7QURsRFA7QUFURjtBQzhERzs7QURUSCxXQUFPNEksYUFBUDtBQS9iRDtBQWljQVksaUJBQWUsVUFBQ2hXLEtBQUQ7QUFDZCxRQUFBeEQsR0FBQSxFQUFBa0csSUFBQSxFQUFBc1EsSUFBQSxFQUFBdUMsRUFBQTs7QUFBQSxVQUFBL1ksTUFBQXdELE1BQUFwRCxPQUFBLFlBQUFKLElBQWtCM0wsT0FBbEIsQ0FBMEIsVUFBMUIsSUFBRyxNQUFILElBQXdDLENBQUMsQ0FBekMsSUFBRyxFQUFBNlIsT0FBQTFDLE1BQUFwRCxPQUFBLFlBQUE4RixLQUEwRDdSLE9BQTFELENBQWtFLG9CQUFsRSxJQUEyQyxNQUEzQyxJQUEwRixDQUFDLENBQTlGO0FBQ0Mwa0IsV0FBS3ZWLE1BQU1wRCxPQUFOLENBQWN2UyxPQUFkLENBQXNCLGFBQXRCLEVBQW9DLEVBQXBDLEVBQXdDQSxPQUF4QyxDQUFnRCxHQUFoRCxFQUFvRCxFQUFwRCxFQUF3REEsT0FBeEQsQ0FBZ0UsR0FBaEUsRUFBb0UsRUFBcEUsQ0FBTDs7QUFDQSxVQUFHa3JCLEdBQUdwbEIsS0FBSCxDQUFTLEdBQVQsRUFBYzdHLE1BQWQsR0FBdUIsQ0FBMUI7QUFDQyxjQUFBMHBCLE9BQUF1QyxHQUFBcGxCLEtBQUEsb0JBQUE2aUIsS0FBcUJyUSxpQkFBckIsS0FBRyxNQUFILE1BQTRDLElBQTVDO0FBQ0MsaUJBQU8sSUFBUDtBQUZGO0FBRkQ7QUNrQkc7O0FEYkgsV0FBTyxLQUFQO0FBdmNEO0FBeWNBc1Qsa0JBQWdCLFVBQUNDLGNBQUQ7QUFDZixRQUFBQyxRQUFBOztBQUFBLFFBQUdELGNBQUg7QUFDQ0MsaUJBQVcsSUFBSTdVLFNBQVM4VSxRQUFiLEVBQVg7O0FBQ0FELGVBQVMvdEIsSUFBVCxHQUFnQixVQUFFdUIsSUFBRixFQUFRMHNCLEtBQVIsRUFBZXRxQixJQUFmO0FBQ2YsZUFBTyw4QkFBNEJwQyxJQUE1QixHQUFpQyxXQUFqQyxHQUE0QzBzQixLQUE1QyxHQUFrRCxJQUFsRCxHQUFzRHRxQixJQUF0RCxHQUEyRCxNQUFsRTtBQURlLE9BQWhCOztBQUVBLGFBQU9xVixVQUFVQyxVQUFWLENBQXFCQyxTQUFTNFUsY0FBVCxFQUF5QjtBQUFDQyxrQkFBU0E7QUFBVixPQUF6QixDQUFyQixDQUFQO0FDbUJFO0FEamVKO0FBZ2RBRyxXQUFTLFVBQUNDLElBQUQ7QUFDUixXQUFPQSxLQUFLMWtCLElBQUwsSUFBYTBrQixLQUFLN1UsSUFBekI7QUFqZEQ7QUFBQSxDQUREOztBQW9kQSxJQUFHN0YsT0FBT0MsUUFBVjtBQUNDbEIsdUJBQXFCbUMsT0FBckIsQ0FBNkJrTyxZQUE3QixHQUE0QztBQUMzQyxXQUFPLEtBQUt6UCxZQUFaO0FBRDJDLEdBQTVDOztBQUdBWix1QkFBcUJtQyxPQUFyQixDQUE2QnlaLFNBQTdCLEdBQXlDLFVBQUM5VSxJQUFEO0FBQ3hDLFFBQUFsRyxZQUFBO0FBQUFBLG1CQUFlLEtBQUtBLFlBQXBCO0FBQ0EsV0FBT0EsYUFBYUcsTUFBYixDQUFvQmdHLGdCQUFwQixDQUFxQyxNQUFyQyxFQUE2Q0QsSUFBN0MsRUFBbUR0VCxJQUFuRCxLQUEyRCxTQUFsRTtBQUZ3QyxHQUF6Qzs7QUFJQXdNLHVCQUFxQm1DLE9BQXJCLENBQTZCb08sVUFBN0IsR0FBMEM7QUFDekMsUUFBQXRKLFFBQUE7QUFBQUEsZUFBVyxLQUFLQSxRQUFoQjtBQUNBLFdBQU9BLFNBQVMwTCxNQUFoQjtBQUZ5QyxHQUExQzs7QUFJQTNTLHVCQUFxQm1DLE9BQXJCLENBQTZCb0gsZ0JBQTdCLEdBQWdEO0FBQy9DLFFBQUFwWixJQUFBLEVBQUE4VyxRQUFBO0FBQUFBLGVBQVcsS0FBS0EsUUFBaEI7QUN5QkUsV0R4QkY5VyxPQUFPO0FBQ044RyxZQUFNLGVBREE7QUFFTjRZLFlBQU07QUFBQzVZLGNBQU0sZUFBUDtBQUF3QjZZLFlBQUksZUFBNUI7QUFBNkMsaUJBQU87QUFBcEQsT0FGQTtBQUdObmdCLGFBQU9zWCxTQUFTcUM7QUFIVixLQ3dCTDtBRDFCNkMsR0FBaEQ7O0FBUUF0Six1QkFBcUJtQyxPQUFyQixDQUE2QjhFLFFBQTdCLEdBQXdDO0FBQ3ZDLFdBQU8sS0FBS0EsUUFBWjtBQUR1QyxHQUF4Qzs7QUFHQWpILHVCQUFxQm1DLE9BQXJCLENBQTZCcEIsTUFBN0IsR0FBc0M7QUFDckMsUUFBQUgsWUFBQTtBQUFBQSxtQkFBZSxLQUFLQSxZQUFwQjs7QUFDQSxRQUFHQSxZQUFIO0FBQ0MsYUFBTyxJQUFJK1AsWUFBSixDQUFpQi9ILHVCQUF1QmdJLGlCQUF2QixDQUF5Q2hRLFlBQXpDLENBQWpCLENBQVA7QUM4QkU7QURqQ2tDLEdBQXRDOztBQUtBWix1QkFBcUJtQyxPQUFyQixDQUE2QitOLFVBQTdCLEdBQTBDO0FBQ3pDLFdBQU8sVUFBUDtBQUR5QyxHQUExQzs7QUFHQXRNLFdBQVNpWSxjQUFULENBQXdCLGtCQUF4QixFQUE0QyxVQUFDM2pCLEVBQUQ7QUFDM0MsUUFBQTBJLFlBQUEsRUFBQWdCLEdBQUE7QUFBQWhCLG1CQUFlZ0QsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q3hDLFlBQTdEO0FDZ0NFLFdEL0JGaUMseUJBQXlCZ0UsUUFBekIsQ0FBa0NqRyxhQUFhRyxNQUEvQyxFQUFBN0ksTUFBQSxRQUFBMEosTUFBQTFKLEdBQUFrQyxJQUFBLFlBQUF3SCxJQUFpRTNLLElBQWpFLEdBQWlFLE1BQWpFLEdBQWlFLE1BQWpFLENDK0JFO0FEakNIOztBQUlBK0ksdUJBQXFCbUMsT0FBckIsQ0FBNkI0WCxFQUE3QixHQUFrQyxVQUFDdGlCLEdBQUQ7QUFDakMsUUFBQTROLE1BQUE7QUFBQUEsYUFBUyxLQUFLQSxNQUFkO0FBRUEsV0FBT2MsUUFBUUMsRUFBUixDQUFXM08sR0FBWCxFQUFnQixFQUFoQixFQUFvQjROLE1BQXBCLENBQVA7QUFIaUMsR0FBbEM7O0FBS0FyRix1QkFBcUJtQyxPQUFyQixDQUE2QjJaLHVCQUE3QixHQUF1RCxVQUFDdGEsR0FBRCxFQUFNNUUsUUFBTjtBQUN0RCxRQUFHQSxRQUFIO0FBQ0MsYUFBT3FFLE9BQU9pRSxXQUFQLENBQW1CLDBCQUF3QjFELEdBQXhCLEdBQTRCLGdCQUEvQyxDQUFQO0FBREQ7QUFHQyxhQUFPLDBCQUF3QkEsR0FBeEIsR0FBNEIsZ0JBQW5DO0FDZ0NFO0FEcENtRCxHQUF2RDs7QUFNQXhCLHVCQUFxQm1DLE9BQXJCLENBQTZCM0osT0FBN0IsR0FBdUMsVUFBQzRNLEtBQUQ7QUFDdEMsUUFBQTVNLE9BQUEsRUFBQW9KLEdBQUEsRUFBQW9HLEdBQUE7QUFBQXhQLGNBQUE0TSxTQUFBLFFBQUF4RCxNQUFBd0QsTUFBQTVNLE9BQUEsWUFBQW9KLElBQTBCck0sS0FBMUIsQ0FBZ0MsSUFBaEMsSUFBVSxNQUFWLEdBQVUsTUFBVjtBQUNBeVMsVUFBTSxFQUFOOztBQ2tDRSxRQUFJeFAsV0FBVyxJQUFmLEVBQXFCO0FEakN2QkEsY0FBU2tKLE9BQVQsQ0FBaUIsVUFBQ29ELElBQUQ7QUNtQ1gsZURsQ0xrRCxJQUFJOVEsSUFBSixDQUFTO0FBQUM2TixpQkFBT0QsSUFBUjtBQUFjblYsaUJBQU9tVjtBQUFyQixTQUFULENDa0NLO0FEbkNOO0FDd0NHOztBRHJDSCxXQUFPa0QsR0FBUDtBQU5zQyxHQUF2Qzs7QUFRQWhJLHVCQUFxQm1DLE9BQXJCLENBQTZCNFosY0FBN0IsR0FBOEMsVUFBQ2pWLElBQUQ7QUFDN0MsUUFBQWxGLEdBQUE7O0FBQUEsUUFBRyxHQUFBQSxNQUFBZ0MsU0FBQXFELFFBQUEsR0FBQTBPLElBQUEsQ0FBQXRTLFFBQUEsQ0FBQUQsV0FBQSxDQUFBc0csdUJBQUEsWUFBQTlILElBQXdFME4sUUFBeEUsQ0FBaUZ4SSxJQUFqRixJQUFDLE1BQUQsQ0FBSDtBQUNDLGFBQU8sbUJBQVA7QUN3Q0U7O0FEdkNILFdBQU8sRUFBUDtBQUg2QyxHQUE5QztBQzZDQTs7QUR4Q0Q5RyxxQkFBcUJnWCxNQUFyQixHQUNDO0FBQUEseUZBQXVGLFVBQUNDLEtBQUQ7QUMyQ3BGLFdEMUNGcEYsZ0JBQWdCbUssdUJBQWhCLENBQXdDL0UsS0FBeEMsQ0MwQ0U7QUQzQ0g7QUFHQSxvQ0FBa0MsVUFBQ0EsS0FBRDtBQzJDL0IsV0QxQ0ZwRixnQkFBZ0JtSyx1QkFBaEIsQ0FBd0MvRSxLQUF4QyxDQzBDRTtBRDlDSDtBQU1BLHlCQUF1QixVQUFDQSxLQUFEO0FBQ3RCQSxVQUFNZ0YsY0FBTjtBQzJDRSxXRDFDRmhYLFFBQVFpWCxVQUFSLENBQW1CakYsTUFBTWtGLE1BQU4sQ0FBYXB0QixJQUFoQyxDQzBDRTtBRGxESDtBQUFBLENBREQ7O0FBWUFpUixxQkFBcUJvYyxTQUFyQixHQUFpQztBQUNoQyxNQUFBQyxRQUFBLEVBQUF6bkIsQ0FBQSxFQUFBcVMsUUFBQSxFQUFBcVYsc0JBQUEsRUFBQUMsWUFBQSxFQUFBQyxjQUFBLEVBQUFuWixRQUFBO0FBQUE0RCxhQUFXeUIsZ0JBQWdCa0gsV0FBaEIsRUFBWDs7QUFDQSxNQUFHLENBQUMzSSxRQUFKO0FBQ0M7QUM2Q0M7O0FEM0NGNUQsYUFBVzhHLGdCQUFnQkMsV0FBaEIsQ0FBNEJuRCxRQUE1QixDQUFYOztBQUVBO0FBQ0NvVixlQUFXN1ksa0JBQWtCQyxPQUFsQixDQUEwQkosUUFBMUIsRUFBb0M7QUFBQ0ssY0FBUTtBQUFULEtBQXBDLENBQVg7QUFERCxXQUFBa1gsTUFBQTtBQUVNaG1CLFFBQUFnbUIsTUFBQTtBQUNML1ksWUFBUUMsR0FBUixDQUFZLHlCQUFaLEVBQXVDbE4sQ0FBdkM7QUFDQXluQixlQUFXN1ksa0JBQWtCQyxPQUFsQixDQUEwQixFQUExQixFQUE4QjtBQUFDQyxjQUFRO0FBQVQsS0FBOUIsQ0FBWDtBQ2lEQzs7QUQ5Q0Y4WSxtQkFBaUI3WSxLQUFLMFksUUFBTCxDQUFqQjtBQUVBRSxpQkFBZSxJQUFJMVksTUFBTTRZLElBQVYsQ0FBZSwwQkFBZixFQUEyQ0QsY0FBM0MsQ0FBZjtBQUVBRiwyQkFBeUIsSUFBSXpZLE1BQU1ELFFBQVYsQ0FBbUIyWSxhQUFhdGxCLElBQWhDLEVBQXNDdWxCLGNBQXRDLENBQXpCO0FBRUE1WSxXQUFTOFksd0JBQVQsR0FBb0NKLHNCQUFwQztBQzZDQyxTRDNDRDFZLFNBQVM4WSx3QkFBVCxDQUFrQ3ZhLE9BQWxDLENBQTBDbkMscUJBQXFCbUMsT0FBL0QsQ0MyQ0M7QURqRStCLENBQWpDOztBQTJCQW5DLHFCQUFxQjJjLFVBQXJCLEdBQWtDO0FBS2pDLE1BQUFDLGNBQUEsRUFBQUMsV0FBQSxFQUFBamMsWUFBQSxFQUFBa2MsY0FBQSxFQUFBN1YsUUFBQSxFQUFBOFYsb0JBQUEsRUFBQS9MLEtBQUEsRUFBQXBQLEdBQUE7QUFBQXFGLGFBQVd5QixnQkFBZ0JrSCxXQUFoQixFQUFYOztBQUNBLE1BQUcsQ0FBQzNJLFFBQUo7QUFDQztBQ3VDQzs7QUFDRCxNQUFJLENBQUNyRixNQUFNbVEsRUFBRSw2QkFBRixFQUFpQyxDQUFqQyxDQUFQLEtBQStDLElBQW5ELEVBQXlEO0FBQ3ZEblEsUURyQ2tDd1YsT0NxQ2xDLENEckMwQ3pFLE1DcUMxQyxHRHJDbUQxTCxTQUFTK1YsU0NxQzVEO0FBQ0Q7O0FEckNGakwsSUFBRSw2QkFBRixFQUFpQ3pELEdBQWpDLENBQXFDckgsU0FBU3FDLGNBQTlDO0FBR0E2RyxpQkFBZXBLLEtBQWYsR0FBdUI7QUFBQ2tYLGVBQVcsRUFBWjtBQUFnQkMsbUJBQWU7QUFBL0IsR0FBdkI7O0FBR0EsTUFBRzFNLFFBQVF2VSxHQUFSLENBQVksS0FBWixNQUFzQixPQUF0QixJQUFpQ3VVLFFBQVF2VSxHQUFSLENBQVksS0FBWixNQUFzQixPQUExRDtBQUNDa2hCLGtCQUFjQyxVQUFkLENBQXlCblcsU0FBU00sSUFBbEM7QUNzQ0M7O0FEcENGLE1BQUcsQ0FBQzRJLGVBQWVDLFVBQWYsRUFBSjtBQUVDd00scUJBQWlCL0ssZ0JBQWdCd0wsaUJBQWhCLEVBQWpCO0FBR0FOLDJCQUF1QmhMLEVBQUUsZ0JBQUYsRUFBb0JBLEVBQUUsZUFBRixDQUFwQixDQUF2QjtBQUVBZ0wseUJBQXFCTyxJQUFyQixDQUEwQjtBQUN6QixVQUFBQyxPQUFBLEVBQUFDLFNBQUE7QUFBQUEsa0JBQVksS0FBS3BHLE9BQUwsQ0FBYW9HLFNBQXpCO0FBQ0FELGdCQUFVeEwsRUFBRSxJQUFGLENBQVY7O0FBQ0EsVUFBRyxDQUFDQSxFQUFFLElBQUYsRUFBUXpELEdBQVIsRUFBRCxJQUFrQmtQLFNBQWxCLElBQStCaE4sUUFBUXZVLEdBQVIsQ0FBWSxZQUFaLENBQWxDO0FDbUNLLGVEbENKZ0YsT0FBT25SLElBQVAsQ0FBWSxtQkFBWixFQUFpQzBnQixRQUFRdlUsR0FBUixDQUFZLFlBQVosQ0FBakMsRUFBNEQsVUFBQzhKLEtBQUQsRUFBUTFNLE1BQVI7QUFDM0QsY0FBQTVCLEdBQUEsRUFBQXFRLElBQUE7O0FBQUEsY0FBRy9CLEtBQUg7QUFDQzBYLG1CQUFPMVgsS0FBUCxDQUFhQSxNQUFNMlgsTUFBbkI7QUNvQ0s7O0FEbENOLGNBQUcsQ0FBQ3JrQixPQUFPbWtCLFNBQVAsQ0FBSjtBQUNDL2xCLGtCQUFBLENBQUFxUSxPQUFBeVYsUUFBQXB0QixJQUFBLHVCQUFBMlgsS0FBK0JyWSxPQUEvQixDQUF1QyxjQUF2QyxFQUF1RCxFQUF2RCxFQUEyREEsT0FBM0QsQ0FBbUUsR0FBbkUsRUFBd0UsRUFBeEUsSUFBTSxNQUFOO0FBRUFnSSxrQkFBTUEsSUFBSWhJLE9BQUosQ0FBWSxLQUFaLEVBQW1CLEVBQW5CLEVBQXVCQSxPQUF2QixDQUErQixLQUEvQixFQUFzQyxFQUF0QyxDQUFOOztBQUVBLGdCQUFHZ0ksSUFBSXhCLE9BQUosQ0FBWSxHQUFaLElBQW1CLENBQUMsQ0FBdkI7QUFDQ3dCLG9CQUFNQSxJQUFJaEksT0FBSixDQUFZLEdBQVosRUFBZ0IsRUFBaEIsRUFBb0JBLE9BQXBCLENBQTRCLEdBQTVCLEVBQWdDLEVBQWhDLENBQU47QUFDQWdJLG9CQUFNQSxJQUFJL0UsSUFBSixFQUFOO0FBQ0ErRSxvQkFBTXdiLFNBQVMwSyxhQUFULENBQXVCbG1CLEdBQXZCLEVBQTRCLGNBQTVCLENBQU47QUNrQ007O0FBQ0QsbUJEbENObW1CLG9CQUFvQkMscUJBQXBCLENBQTBDTixPQUExQyxFQUFtRDlsQixHQUFuRCxDQ2tDTTtBRDNDUDtBQzZDTyxtQkFBTzhsQixXQUFXLElBQVgsR0RsQ2JBLFFBQVNqUCxHQUFULENBQWFqVixPQUFPbWtCLFNBQVAsQ0FBYixFQUFnQ00sT0FBaEMsQ0FBd0MsUUFBeEMsQ0NrQ2EsR0RsQ2IsTUNrQ007QUFDRDtBRGxEUCxVQ2tDSTtBQWtCRDtBRHhETDtBQXFCQTlNLFlBQVE0TCxlQUFlNUwsS0FBdkI7QUFDQTZMLGtCQUFjaEwsZ0JBQWdCa00sY0FBaEIsRUFBZDtBQUNBbmQsbUJBQWU4SCxnQkFBZ0IxQixzQkFBaEIsRUFBZjtBQUVBOFYscUJBQWlCL0osYUFBYUMsdUJBQWIsQ0FBcUMsMkJBQXJDLEVBQWtFcFMsYUFBYUcsTUFBL0UsQ0FBakI7QUFDQWdTLGlCQUFhaUwsR0FBYixDQUFpQixFQUFqQixFQUFxQixFQUFyQixFQUF5QmxCLGNBQXpCLEVBQXlDN0osU0FBU0MsYUFBVCxDQUF1QixjQUF2QixFQUF1Q0MsU0FBaEYsRUFBMkZ2UyxhQUFhRyxNQUF4RztBQ3FDRSxXRG5DRnlQLFFBQVE2RyxHQUFSLENBQVksc0JBQVosRUFBb0M7QUFBQ3BILGtCQUFZaEosU0FBU3pGLEdBQXRCO0FBQTJCbVIsY0FBUU0sU0FBU0MsYUFBVCxDQUF1QixjQUF2QixFQUF1Q0M7QUFBMUUsS0FBcEMsQ0NtQ0U7QUFJRDtBRC9GK0IsQ0FBbEMsQzs7Ozs7Ozs7Ozs7QUV0akJBbFQsMEJBQTBCLENBQUNrQyxPQUEzQixHQUFxQztBQUVwQzhiLGVBQWEsRUFBRSxZQUFXO0FBQ3pCLFdBQU9yYSxRQUFRLENBQUNxRCxRQUFULEdBQW9CaVgsdUJBQXBCLENBQTRDamlCLEdBQTVDLEVBQVA7QUFDQSxHQUptQztBQUtwQ2tpQiw2QkFBMkIsRUFBRSxZQUFXO0FBQ3ZDLFFBQUlwTixHQUFHLEdBQUdySSxlQUFlLENBQUNrSCxXQUFoQixFQUFWO0FBQ0EsUUFBSSxDQUFDbUIsR0FBTCxFQUNDLE9BQU8sS0FBUDtBQUVELFFBQUlQLE9BQU8sSUFBSUEsT0FBTyxDQUFDdlUsR0FBUixDQUFZLGVBQVosQ0FBZixFQUNDLE9BQU8sS0FBUDs7QUFFRCxRQUFJdVUsT0FBTyxDQUFDdlUsR0FBUixDQUFZLEtBQVosS0FBc0IsT0FBdEIsSUFBaUN1VSxPQUFPLENBQUN2VSxHQUFSLENBQVksS0FBWixLQUFzQixPQUEzRCxFQUFvRTtBQUNuRSxhQUFPLEtBQVA7QUFDQSxLQVZzQyxDQVl2Qzs7O0FBQ0EsUUFBSThVLEdBQUcsQ0FBQy9ILEtBQUosSUFBYSxXQUFqQixFQUE4QjtBQUM3QixhQUFPLEtBQVA7QUFDQTs7QUFFRCxRQUFJb1YsWUFBWSxHQUFHdk0sZUFBZSxDQUFDa00sY0FBaEIsRUFBbkI7QUFFQSxRQUFJLENBQUNLLFlBQUwsRUFDQyxPQUFPLEtBQVAsQ0FwQnNDLENBc0J2QztBQUNBO0FBQ0E7O0FBQ0EsUUFBSUMsaUJBQWlCLEdBQUdDLEdBQUcsQ0FBQ0MsU0FBSixDQUFjQyxJQUFkLENBQW1CO0FBQzFDLDJCQUFxQnpOLEdBQUcsQ0FBQ3ZQLEdBRGlCO0FBRTFDLDBCQUFvQixJQUZzQjtBQUcxQyx1QkFBaUI7QUFIeUIsS0FBbkIsRUFJckJpZCxLQUpxQixFQUF4QjtBQU1BLFFBQUlDLDRCQUE0QixHQUFHLENBQW5DOztBQUVBLFFBQUkzTixHQUFHLENBQUM0Tix3QkFBUixFQUFrQztBQUNqQyxVQUFJQyxVQUFVLEdBQUcvTSxlQUFlLENBQUNnTixZQUFoQixFQUFqQjs7QUFDQSxVQUFJRCxVQUFVLENBQUNFLG9CQUFmLEVBQXFDO0FBQ3BDLFlBQUlKLDRCQUE0QixHQUFHSixHQUFHLENBQUNDLFNBQUosQ0FBY0MsSUFBZCxDQUFtQjtBQUNyRCwrQkFBcUJ6TixHQUFHLENBQUM0Tix3QkFENEI7QUFFckQsOEJBQW9CLElBRmlDO0FBR3JELDJCQUFpQjtBQUhvQyxTQUFuQixFQUloQ0YsS0FKZ0MsRUFBbkM7QUFLQTtBQUNEOztBQUVELFFBQUlMLFlBQVksQ0FBQ1Usb0JBQWIsSUFBcUMsSUFBckMsSUFBNkNULGlCQUFpQixHQUFHLENBQWpFLElBQXNFSyw0QkFBNEIsR0FBRyxDQUF6RyxFQUE0RztBQUMzRyxhQUFPLElBQVA7QUFDQSxLQTlDc0MsQ0FnRHZDOzs7QUFDQSxRQUFJTCxpQkFBaUIsSUFBSSxDQUFyQixJQUEwQkssNEJBQTRCLElBQUksQ0FBOUQsRUFBaUU7QUFDaEUsYUFBTyxLQUFQO0FBQ0EsS0FuRHNDLENBcUR2Qzs7O0FBQ0EsUUFBSU4sWUFBWSxHQUFHdk0sZUFBZSxDQUFDa00sY0FBaEIsRUFBbkI7QUFDQSxRQUFJSyxZQUFZLElBQUlBLFlBQVksQ0FBQ1csU0FBYixJQUEwQixPQUExQyxJQUFxRFgsWUFBWSxDQUFDVSxvQkFBYixJQUFxQyxJQUE5RixFQUNDLE9BQU8sSUFBUDtBQUVELFdBQU8sS0FBUDtBQUNBLEdBaEVtQztBQWtFcENFLGdDQUE4QixFQUFFLFlBQVc7QUFDMUMsUUFBSWpPLEdBQUcsR0FBR3JJLGVBQWUsQ0FBQ2tILFdBQWhCLEVBQVY7QUFDQSxRQUFJLENBQUNtQixHQUFMLEVBQ0MsT0FBTyxLQUFQO0FBRUQsUUFBSVAsT0FBTyxJQUFJQSxPQUFPLENBQUN2VSxHQUFSLENBQVksZUFBWixDQUFmLEVBQ0MsT0FBTyxLQUFQO0FBRUQsUUFBSXNMLElBQUksR0FBR21CLGVBQWUsQ0FBQ3VXLE9BQWhCLENBQXdCbE8sR0FBRyxDQUFDeEosSUFBNUIsQ0FBWDtBQUNBLFFBQUksQ0FBQ0EsSUFBTCxFQUNDLE9BQU8sS0FBUCxDQVZ5QyxDQWExQzs7QUFDQSxRQUFJd0osR0FBRyxDQUFDNE4sd0JBQUosSUFBZ0MsQ0FBQ3BYLElBQUksQ0FBQzJYLDhCQUExQyxFQUNDLE9BQU8sS0FBUDs7QUFFRCxRQUFJMU8sT0FBTyxDQUFDdlUsR0FBUixDQUFZLEtBQVosS0FBc0IsT0FBdEIsSUFBaUN1VSxPQUFPLENBQUN2VSxHQUFSLENBQVksS0FBWixLQUFzQixPQUEzRCxFQUFvRTtBQUNuRSxhQUFPLEtBQVA7QUFDQSxLQW5CeUMsQ0FxQjFDOzs7QUFDQSxRQUFJOFUsR0FBRyxDQUFDL0gsS0FBSixJQUFhLFdBQWpCLEVBQThCO0FBQzdCLGFBQU8sS0FBUDtBQUNBOztBQUVELFFBQUk2SSxlQUFlLENBQUNzTixJQUFoQixDQUFxQnBPLEdBQXJCLENBQUosRUFBK0I7QUFDOUIsVUFBSTBILElBQUksR0FBRzVHLGVBQWUsQ0FBQ3VOLFNBQWhCLEVBQVg7QUFDQSxVQUFJM0csSUFBSSxLQUFLQSxJQUFJLENBQUM0RyxzQkFBTCxJQUErQixJQUEvQixJQUF1QzVHLElBQUksQ0FBQzRHLHNCQUFMLElBQStCendCLFNBQTNFLENBQVIsRUFDQyxPQUFPLElBQVA7QUFDRCxLQUpELE1BSU87QUFDTixVQUFJd3ZCLFlBQVksR0FBR3ZNLGVBQWUsQ0FBQ2tNLGNBQWhCLEVBQW5CO0FBQ0EsVUFBSUssWUFBWSxLQUFLQSxZQUFZLENBQUNpQixzQkFBYixJQUF1QyxJQUF2QyxJQUErQ2pCLFlBQVksQ0FBQ2lCLHNCQUFiLElBQXVDendCLFNBQTNGLENBQWhCLEVBQ0MsT0FBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBTyxLQUFQO0FBQ0EsR0F2R21DO0FBeUdwQzB3QixpQkFBZSxFQUFFLFlBQVc7QUFDM0IsUUFBSXZPLEdBQUcsR0FBR3JJLGVBQWUsQ0FBQ2tILFdBQWhCLEVBQVY7QUFDQSxRQUFJLENBQUNtQixHQUFMLEVBQ0MsT0FBTyxLQUFQO0FBRUQsUUFBSTZOLFVBQVUsR0FBRy9NLGVBQWUsQ0FBQ2dOLFlBQWhCLEVBQWpCLENBTDJCLENBTzNCOztBQUNBLFFBQUlVLFdBQVcsR0FBRyxJQUFsQjs7QUFDQSxRQUFJeE8sR0FBRyxDQUFDNE4sd0JBQUosSUFBZ0NDLFVBQVUsQ0FBQ0Usb0JBQVgsSUFBbUMsSUFBdkUsRUFBNkU7QUFDNUVTLGlCQUFXLEdBQUdqQixHQUFHLENBQUNDLFNBQUosQ0FBY2hkLE9BQWQsQ0FBc0I7QUFDbkMsNkJBQXFCd1AsR0FBRyxDQUFDNE4sd0JBRFU7QUFFbkMsNEJBQW9CLElBRmU7QUFHbkMseUJBQWlCO0FBSGtCLE9BQXRCLENBQWQ7QUFLQTs7QUFFRCxRQUFJLENBQUNZLFdBQUwsRUFBa0I7QUFDakJBLGlCQUFXLEdBQUdqQixHQUFHLENBQUNDLFNBQUosQ0FBY2hkLE9BQWQsQ0FBc0I7QUFDbkMsNkJBQXFCd1AsR0FBRyxDQUFDdlAsR0FEVTtBQUVuQyw0QkFBb0IsSUFGZTtBQUduQyx5QkFBaUI7QUFIa0IsT0FBdEIsQ0FBZDtBQUtBOztBQUVELFdBQU8rZCxXQUFQO0FBQ0EsR0FuSW1DO0FBcUlwQ0Msb0JBQWtCLEVBQUUsWUFBVztBQUM5QixRQUFJek8sR0FBRyxHQUFHckksZUFBZSxDQUFDa0gsV0FBaEIsRUFBVjtBQUNBLFFBQUksQ0FBQ21CLEdBQUwsRUFDQyxPQUFPLEtBQVA7QUFFRCxRQUFJME8sUUFBUSxHQUFHO0FBQ2QsMEJBQW9CLElBRE47QUFFZCx1QkFBaUI7QUFDaEJDLFdBQUcsRUFBRTtBQURXO0FBRkgsS0FBZjtBQU9BLFFBQUk3UCxJQUFJLEdBQUcsSUFBSTdPLEtBQUosRUFBWDs7QUFFQSxRQUFJK1AsR0FBRyxDQUFDNE4sd0JBQVIsRUFBa0M7QUFDakM7QUFDQSxVQUFJZ0IsSUFBSSxHQUFHMWQsQ0FBQyxDQUFDbEksS0FBRixDQUFRZ1gsR0FBRyxDQUFDNk8seUJBQVosS0FBMEMsRUFBckQ7QUFDQUQsVUFBSSxDQUFDem9CLElBQUwsQ0FBVTZaLEdBQUcsQ0FBQ3ZQLEdBQWQ7QUFDQWllLGNBQVEsQ0FBQyxtQkFBRCxDQUFSLEdBQWdDO0FBQy9CSSxXQUFHLEVBQUVGO0FBRDBCLE9BQWhDO0FBS0FGLGNBQVEsQ0FBQyxLQUFELENBQVIsR0FBa0IsQ0FBQztBQUNsQiw2QkFBcUIxTyxHQUFHLENBQUN2UDtBQURQLE9BQUQsRUFFZjtBQUNGLDZCQUFxQjtBQUNwQnFlLGFBQUcsRUFBRTlPLEdBQUcsQ0FBQzZPO0FBRFcsU0FEbkI7QUFJRiwrQkFBdUI7QUFDdEJGLGFBQUcsRUFBRTtBQURpQjtBQUpyQixPQUZlLENBQWxCLENBVGlDLENBb0JqQzs7QUFDQSxVQUFJZCxVQUFVLEdBQUcvTSxlQUFlLENBQUNnTixZQUFoQixFQUFqQjs7QUFDQSxVQUFJRCxVQUFVLElBQUlBLFVBQVUsQ0FBQ0Usb0JBQVgsSUFBbUMsSUFBckQsRUFBMkQ7QUFDMUQsWUFBSWdCLGVBQWUsR0FBR3hCLEdBQUcsQ0FBQ0MsU0FBSixDQUFjaGQsT0FBZCxDQUFzQjtBQUMzQywrQkFBcUI7QUFDcEJzZSxlQUFHLEVBQUU5TyxHQUFHLENBQUM2TztBQURXLFdBRHNCO0FBSTNDLDhCQUFvQixJQUp1QjtBQUszQywyQkFBaUI7QUFMMEIsU0FBdEIsQ0FBdEI7O0FBT0EsWUFBSUUsZUFBSixFQUFxQjtBQUNwQixjQUFJQyxnQkFBZ0IsR0FBR3pCLEdBQUcsQ0FBQ0MsU0FBSixDQUFjaGQsT0FBZCxDQUFzQnVlLGVBQWUsQ0FBQ0UsUUFBaEIsQ0FBeUJDLE1BQS9DLENBQXZCO0FBQ0FILHlCQUFlLENBQUNJLG9CQUFoQixHQUF1Q0gsZ0JBQWdCLEdBQUdBLGdCQUFnQixDQUFDSSxVQUFwQixHQUFpQ0wsZUFBZSxDQUFDSyxVQUF4RztBQUNBdFEsY0FBSSxDQUFDM1ksSUFBTCxDQUFVNG9CLGVBQVY7QUFDQTtBQUNEO0FBQ0QsS0FwQ0QsTUFvQ087QUFDTkwsY0FBUSxDQUFDLG1CQUFELENBQVIsR0FBZ0MxTyxHQUFHLENBQUN2UCxHQUFwQztBQUNBOztBQUVEOGMsT0FBRyxDQUFDQyxTQUFKLENBQWNDLElBQWQsQ0FBbUJpQixRQUFuQixFQUE2Qi9kLE9BQTdCLENBQXFDLFVBQVMxTSxDQUFULEVBQVk7QUFDaEQsVUFBSW9yQixZQUFZLEdBQUc5QixHQUFHLENBQUNDLFNBQUosQ0FBY2hkLE9BQWQsQ0FBc0J2TSxDQUFDLENBQUNnckIsUUFBRixDQUFXQyxNQUFqQyxDQUFuQjtBQUNBanJCLE9BQUMsQ0FBQ2tyQixvQkFBRixHQUF5QkUsWUFBWSxHQUFHQSxZQUFZLENBQUNELFVBQWhCLEdBQTZCbnJCLENBQUMsQ0FBQ21yQixVQUFwRTtBQUNBdFEsVUFBSSxDQUFDM1ksSUFBTCxDQUFVbEMsQ0FBVjtBQUNBLEtBSkQ7QUFNQSxXQUFPaU4sQ0FBQyxDQUFDb2UsTUFBRixDQUFTeFEsSUFBVCxFQUFlLHNCQUFmLENBQVA7QUFDQSxHQWxNbUM7QUFvTXBDakMsaUJBQWUsRUFBRSxZQUFXO0FBQzNCLFFBQUltRCxHQUFHLEdBQUdySSxlQUFlLENBQUNrSCxXQUFoQixFQUFWO0FBQ0EsUUFBSSxDQUFDbUIsR0FBTCxFQUNDLE9BQU8sS0FBUCxDQUgwQixDQUszQjs7QUFDQSxRQUFJdVAsV0FBVyxHQUFHcmUsQ0FBQyxDQUFDbEksS0FBRixDQUFRZ1gsR0FBRyxDQUFDNk8seUJBQVosS0FBMEMsRUFBNUQ7QUFDQVUsZUFBVyxDQUFDcHBCLElBQVosQ0FBaUI2WixHQUFHLENBQUN2UCxHQUFyQjtBQUNBLFFBQUkrZSxpQkFBaUIsR0FBR2pDLEdBQUcsQ0FBQ0MsU0FBSixDQUFjQyxJQUFkLENBQW1CO0FBQzFDLDJCQUFxQjtBQUNwQnFCLFdBQUcsRUFBRVM7QUFEZSxPQURxQjtBQUkxQywwQkFBb0I7QUFKc0IsS0FBbkIsRUFLckI3QixLQUxxQixFQUF4QjtBQU9BLFFBQUlqTyxPQUFPLElBQUlBLE9BQU8sQ0FBQ3ZVLEdBQVIsQ0FBWSxlQUFaLENBQVgsSUFBMkNza0IsaUJBQWlCLEdBQUcsQ0FBbkUsRUFDQyxPQUFPLEtBQVA7QUFFRCxRQUFJL1AsT0FBTyxDQUFDdlUsR0FBUixDQUFZLEtBQVosS0FBc0IsT0FBdEIsSUFBaUN1VSxPQUFPLENBQUN2VSxHQUFSLENBQVksS0FBWixLQUFzQixPQUF2RCxJQUFrRXNrQixpQkFBaUIsR0FBRyxDQUExRixFQUNDLE9BQU8sSUFBUCxDQURELEtBR0MsT0FBTyxLQUFQO0FBQ0QsR0ExTm1DO0FBNE5wQ3hHLElBQUUsRUFBRSxVQUFTdGlCLEdBQVQsRUFBYztBQUNqQixXQUFPME8sT0FBTyxDQUFDQyxFQUFSLENBQVczTyxHQUFYLENBQVA7QUFDQSxHQTlObUM7QUFnT3BDd0ssR0FBQyxFQUFFLFVBQVN4SyxHQUFULEVBQWM7QUFDaEIsUUFBSTROLE1BQUo7O0FBQ0EsUUFBSXBFLE1BQU0sQ0FBQzBILFFBQVgsRUFBcUI7QUFDcEIsYUFBT3hDLE9BQU8sQ0FBQ0MsRUFBUixDQUFXM08sR0FBWCxDQUFQO0FBQ0EsS0FGRCxNQUVPO0FBQ040TixZQUFNLEdBQUd6QixRQUFRLENBQUNxRCxRQUFULEdBQW9CME8sSUFBcEIsQ0FBeUJ0UyxRQUF6QixDQUFrQ0QsV0FBbEMsQ0FBOENpQyxNQUF2RDtBQUNBLGFBQU9jLE9BQU8sQ0FBQ0MsRUFBUixDQUFXM08sR0FBWCxFQUFnQixFQUFoQixFQUFvQjROLE1BQXBCLENBQVA7QUFDQTtBQUNELEdBeE9tQztBQTBPcENtYixZQUFVLEVBQUUsWUFBVztBQUN0QixRQUFJelAsR0FBRyxHQUFHckksZUFBZSxDQUFDa0gsV0FBaEIsRUFBVjtBQUNBLFFBQUksQ0FBQ21CLEdBQUwsRUFDQyxPQUFPLEtBQVA7QUFDRCxXQUFPdU4sR0FBRyxDQUFDbUMsS0FBSixDQUFVakMsSUFBVixDQUFlO0FBQUUsd0JBQWtCek4sR0FBRyxDQUFDdEksS0FBeEI7QUFBK0IsOEJBQXdCLE9BQXZEO0FBQWdFLDRCQUFzQnNJLEdBQUcsQ0FBQ3hKO0FBQTFGLEtBQWYsQ0FBUDtBQUNBLEdBL09tQztBQWlQcENtWiwwQkFBd0IsRUFBRSxZQUFXO0FBQ3BDLFFBQUkzUCxHQUFHLEdBQUdySSxlQUFlLENBQUNrSCxXQUFoQixFQUFWO0FBQ0EsUUFBSSxDQUFDbUIsR0FBTCxFQUNDLE9BQU8sS0FBUDtBQUNELFdBQVFQLE9BQU8sQ0FBQ3ZVLEdBQVIsQ0FBWSxLQUFaLEtBQXNCLE9BQXZCLElBQW1DLENBQUMsQ0FBQ3FpQixHQUFHLENBQUNtQyxLQUFKLENBQVVqQyxJQUFWLENBQWU7QUFBRSx3QkFBa0J6TixHQUFHLENBQUN0SSxLQUF4QjtBQUErQiw4QkFBd0IsT0FBdkQ7QUFBZ0UsNEJBQXNCc0ksR0FBRyxDQUFDeEo7QUFBMUYsS0FBZixFQUFpSGtYLEtBQWpILEVBQTVDO0FBQ0E7QUF0UG1DLENBQXJDOztBQTJQQSxJQUFJeGQsTUFBTSxDQUFDQyxRQUFYLEVBQXFCO0FBQ3BCakIsNEJBQTBCLENBQUNrQyxPQUEzQixDQUFtQzRYLEVBQW5DLEdBQXdDLFVBQVN0aUIsR0FBVCxFQUFjO0FBQ3JENE4sVUFBTSxHQUFHekIsUUFBUSxDQUFDcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQWxDLENBQThDaUMsTUFBdkQ7QUFDQSxXQUFPYyxPQUFPLENBQUNDLEVBQVIsQ0FBVzNPLEdBQVgsRUFBZ0IsRUFBaEIsRUFBb0I0TixNQUFwQixDQUFQO0FBQ0EsR0FIRDs7QUFJQXBGLDRCQUEwQixDQUFDa0MsT0FBM0IsQ0FBbUNnYywyQkFBbkMsR0FBaUUsWUFBVztBQUMzRSxXQUFPLEtBQVA7QUFDQSxHQUZEOztBQUdBbGUsNEJBQTBCLENBQUNrQyxPQUEzQixDQUFtQzZjLDhCQUFuQyxHQUFvRSxZQUFXO0FBQzlFLFdBQU8sS0FBUDtBQUNBLEdBRkQ7O0FBSUEvZSw0QkFBMEIsQ0FBQ2tDLE9BQTNCLENBQW1DbWQsZUFBbkMsR0FBcUQsWUFBVztBQUMvRCxRQUFJclksUUFBUSxHQUFHckQsUUFBUSxDQUFDcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQWxDLENBQThDNkQsUUFBN0Q7O0FBQ0EsUUFBSXFaLFdBQVcsR0FBR3JlLENBQUMsQ0FBQzBlLE9BQUYsQ0FBVSxDQUFDMVosUUFBUSxDQUFDMFgsd0JBQVYsRUFBb0MxWCxRQUFRLENBQUN6RixHQUE3QyxDQUFWLENBQWxCOztBQUNBLFFBQUkwSyxVQUFVLEdBQUdvUyxHQUFHLENBQUNDLFNBQUosQ0FBY2hkLE9BQWQsQ0FBc0I7QUFDdEMsMkJBQXFCO0FBQ3BCc2UsV0FBRyxFQUFFUztBQURlLE9BRGlCO0FBSXRDLDBCQUFvQixJQUprQjtBQUt0Qyx1QkFBaUI7QUFMcUIsS0FBdEIsQ0FBakI7QUFRQSxXQUFPcFUsVUFBUDtBQUNBLEdBWkQ7O0FBY0FqTSw0QkFBMEIsQ0FBQ2tDLE9BQTNCLENBQW1DcWQsa0JBQW5DLEdBQXdELFlBQVc7QUFDbEUsUUFBSXBjLFdBQVcsR0FBR1EsUUFBUSxDQUFDcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQXBEO0FBQ0EsUUFBSTZELFFBQVEsR0FBRzdELFdBQVcsQ0FBQzZELFFBQTNCO0FBQ0EsUUFBSXFaLFdBQVcsR0FBR3JlLENBQUMsQ0FBQ2xJLEtBQUYsQ0FBUWtOLFFBQVEsQ0FBQzJZLHlCQUFqQixLQUErQyxFQUFqRTtBQUNBVSxlQUFXLENBQUNwcEIsSUFBWixDQUFpQitQLFFBQVEsQ0FBQ3pGLEdBQTFCO0FBQ0EsUUFBSW9mLFdBQVcsR0FBR3RDLEdBQUcsQ0FBQ0MsU0FBSixDQUFjQyxJQUFkLENBQW1CO0FBQ3BDLDJCQUFxQjtBQUNwQnFCLFdBQUcsRUFBRVM7QUFEZSxPQURlO0FBSXBDLDBCQUFvQixJQUpnQjtBQUtwQyx1QkFBaUI7QUFDaEJaLFdBQUcsRUFBRTtBQURXLE9BTG1CO0FBUXBDbUIsU0FBRyxFQUFFLENBQUM7QUFDTCwrQkFBdUI7QUFDdEJuQixhQUFHLEVBQUU7QUFEaUI7QUFEbEIsT0FBRCxFQUlGO0FBQ0YsK0JBQXVCLElBRHJCO0FBRUYsMEJBQWtCdGMsV0FBVyxDQUFDc1U7QUFGNUIsT0FKRTtBQVIrQixLQUFuQixFQWdCZm9KLEtBaEJlLEVBQWxCO0FBa0JBLFdBQU9GLFdBQVA7QUFDQSxHQXhCRDs7QUEwQkEzZ0IsNEJBQTBCLENBQUNrQyxPQUEzQixDQUFtQ3lMLGVBQW5DLEdBQXFELFlBQVc7QUFDL0QsUUFBSTNHLFFBQVEsR0FBR3JELFFBQVEsQ0FBQ3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4QzZELFFBQTdEO0FBQ0EsUUFBSXFaLFdBQVcsR0FBR3JlLENBQUMsQ0FBQ2xJLEtBQUYsQ0FBUWtOLFFBQVEsQ0FBQzJZLHlCQUFqQixLQUErQyxFQUFqRTtBQUNBVSxlQUFXLENBQUNwcEIsSUFBWixDQUFpQitQLFFBQVEsQ0FBQ3pGLEdBQTFCO0FBRUEsUUFBSW9mLFdBQVcsR0FBR3RDLEdBQUcsQ0FBQ0MsU0FBSixDQUFjQyxJQUFkLENBQW1CO0FBQ3BDLDJCQUFxQjtBQUNwQnFCLFdBQUcsRUFBRVM7QUFEZSxPQURlO0FBSXBDLDBCQUFvQjtBQUpnQixLQUFuQixFQUtmUSxLQUxlLEVBQWxCOztBQU9BLFFBQUlGLFdBQVcsSUFBSUEsV0FBVyxDQUFDbHlCLE1BQVosR0FBcUIsQ0FBeEMsRUFBMkM7QUFDMUMsYUFBTyxJQUFQO0FBQ0E7O0FBQ0QsV0FBTyxLQUFQO0FBQ0EsR0FoQkQ7O0FBa0JBdVIsNEJBQTBCLENBQUNrQyxPQUEzQixDQUFtQzhiLGFBQW5DLEdBQW1ELFlBQVc7QUFDN0QsUUFBSWhYLFFBQVEsR0FBR3JELFFBQVEsQ0FBQ3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4QzZELFFBQTdEOztBQUNBLFFBQUlxWixXQUFXLEdBQUdyZSxDQUFDLENBQUMwZSxPQUFGLENBQVUsQ0FBQzFaLFFBQVEsQ0FBQzBYLHdCQUFWLEVBQW9DMVgsUUFBUSxDQUFDekYsR0FBN0MsQ0FBVixDQUFsQjs7QUFDQSxRQUFJNmMsaUJBQWlCLEdBQUdDLEdBQUcsQ0FBQ0MsU0FBSixDQUFjQyxJQUFkLENBQW1CO0FBQzFDLDJCQUFxQjtBQUNwQnFCLFdBQUcsRUFBRVM7QUFEZSxPQURxQjtBQUkxQywwQkFBb0IsSUFKc0I7QUFLMUMsdUJBQWlCO0FBTHlCLEtBQW5CLEVBTXJCN0IsS0FOcUIsRUFBeEI7QUFRQSxXQUFPSixpQkFBaUIsR0FBRyxDQUEzQjtBQUNBLEdBWkQ7QUFhQSxDOzs7Ozs7Ozs7Ozs7QUM5VURuZSxpQkFBaUJpQyxPQUFqQixHQUNDO0FBQUFtUyxRQUFNLFVBQUN3RyxRQUFEO0FBQ0wsUUFBQTdULFFBQUEsRUFBQThaLFNBQUEsRUFBQUMsT0FBQSxFQUFBcGYsR0FBQTs7QUFBQSxRQUFHWCxPQUFPMEgsUUFBVjtBQUNDLFVBQUc2SCxRQUFRdlUsR0FBUixDQUFZLGVBQVosQ0FBSDtBQUNDLGVBQU8sS0FBUDtBQ0VHOztBRERKLFVBQUc0VixnQkFBZ0JvUCxPQUFoQixFQUFIO0FBQ0NGLG9CQUFZbFAsZ0JBQWdCd0wsaUJBQWhCLEVBQVo7O0FBQ0EsWUFBRzBELFNBQUg7QUFDQzlaLHFCQUFXeUIsZ0JBQWdCa0gsV0FBaEIsRUFBWDtBQUNBb1Isb0JBQUEvWixZQUFBLFFBQUFyRixNQUFBcUYsU0FBQTZELE1BQUEsWUFBQWxKLElBQTRCbUYsZ0JBQTVCLENBQTZDLEtBQTdDLEVBQW9EZ2EsVUFBVS9ULEtBQTlELElBQVUsTUFBVixHQUFVLE1BQVY7QUFDQSxrQkFBQWdVLFdBQUEsT0FBT0EsUUFBUy9wQixJQUFoQixHQUFnQixNQUFoQixNQUF3QjZqQixRQUF4QjtBQUxGO0FBSEQ7QUNhRzs7QURKSCxXQUFPLEtBQVA7QUFWRDtBQVlBb0csc0JBQW9CO0FBRW5CLFdBQU90ZCxTQUFTcUQsUUFBVCxHQUFvQjlXLElBQXBCLENBQXlCK3FCLG1CQUFoQztBQWREO0FBZ0JBcFEsVUFBUTtBQ0tMLFdESkY5SyxxQkFBcUJtQyxPQUFyQixDQUE2QjJJLE1BQTdCLEVDSUU7QURyQkg7QUFtQkFrQyxTQUFPLFVBQUM4TixRQUFELEVBQVdFLGVBQVgsRUFBNEJELFVBQTVCLEVBQXdDVCxZQUF4QztBQUNOLFFBQUE2RyxZQUFBLEVBQUE1SSxRQUFBLEVBQUE2SSxhQUFBLEVBQUFDLGVBQUEsRUFBQUMsY0FBQSxFQUFBQyxPQUFBLEVBQUFDLHNCQUFBLEVBQUF2YSxRQUFBLEVBQUF3YSxZQUFBLEVBQUE3ZixHQUFBLEVBQUFrRyxJQUFBLEVBQUFzUSxJQUFBLEVBQUF0TixNQUFBO0FBQUE3RCxlQUFXakgscUJBQXFCbUMsT0FBckIsQ0FBNkI4RSxRQUE3QixFQUFYO0FBRUF3YSxtQkFBQSxDQUFBeGEsWUFBQSxPQUFlQSxTQUFVK0IsS0FBekIsR0FBeUIsTUFBekIsTUFBa0MsV0FBbEM7QUFFQXNZLHFCQUFvQkcsZUFBSCxDQUFBN2YsTUFBQUssRUFBQXlmLElBQUEsQ0FBQXphLFNBQUE2RCxNQUFBLGNBQUFoRCxPQUFBbEcsSUFBQW1YLFdBQUEsWUFBQWpSLEtBQTJEZ1MsT0FBM0QsS0FBcUIsTUFBckIsR0FBcUIsTUFBbEIsR0FBdUUsQ0FBM0Y7O0FBRUEsUUFBRzJILGdCQUFnQnhhLFNBQVM4UixXQUE1QjtBQUNDdUksdUJBQUEsQ0FBQWxKLE9BQUFuUixTQUFBOFIsV0FBQSxZQUFBWCxLQUF1QzBCLE9BQXZDLEtBQWlCLE1BQWpCO0FDR0U7O0FEREhoUCxhQUFTOUsscUJBQXFCbUMsT0FBckIsQ0FBNkIySSxNQUE3QixFQUFUO0FBRUF5TixlQUFXdFcsRUFBRWxJLEtBQUYsQ0FBUStRLE9BQU9nUSxRQUFQLENBQVIsQ0FBWDs7QUFFQXFHLG1CQUFlLFVBQUM1SSxRQUFELEVBQVcrQixZQUFYO0FBR2QsVUFBQStHLGVBQUEsRUFBQU0sWUFBQTtBQUFBTix3QkFBa0JwZixFQUFFb2UsTUFBRixDQUFTOUgsUUFBVCxFQUFtQixVQUFDRyxPQUFEO0FBQ3BDLGVBQU8sQ0FBQyxDQUFDQSxRQUFRSyxXQUFSLElBQXVCLElBQUkxUyxJQUFKLEVBQXhCLEVBQW9DeVQsT0FBcEMsRUFBUjtBQURpQixRQUFsQjs7QUFJQSxVQUFHUSxZQUFIO0FBQ0NxSCx1QkFBZSxJQUFJM2dCLEtBQUosRUFBZjtBQUVBc1oscUJBQWEva0IsS0FBYixDQUFtQixHQUFuQixFQUF3Qm1NLE9BQXhCLENBQWdDLFVBQUNqSyxHQUFEO0FDRjFCLGlCREdMa3FCLGVBQWUxZixFQUFFMmYsS0FBRixDQUFRRCxZQUFSLEVBQXNCMWYsRUFBRTRmLE1BQUYsQ0FBU1IsZUFBVCxFQUEwQixVQUFDM0ksT0FBRDtBQUM5RCxnQkFBQUwsSUFBQTtBQUFBLG9CQUFBSyxXQUFBLFFBQUFMLE9BQUFLLFFBQUFFLFlBQUEsWUFBQVAsS0FBOEJwaUIsT0FBOUIsQ0FBc0N3QixHQUF0QyxJQUFPLE1BQVAsR0FBTyxNQUFQLElBQTZDLENBQUMsQ0FBOUM7QUFEb0MsWUFBdEIsQ0NIVjtBREVOO0FBS0FrcUIsdUJBQWUxZixFQUFFb2UsTUFBRixDQUFTc0IsWUFBVCxFQUF1QixVQUFDRyxXQUFEO0FBQ3JDLGlCQUFPLENBQUMsQ0FBQ0EsWUFBWS9JLFdBQVosSUFBMkIsSUFBSTFTLElBQUosRUFBNUIsRUFBd0N5VCxPQUF4QyxFQUFSO0FBRGMsVUFBZjtBQUdBdUgsMEJBQWtCcGYsRUFBRTJmLEtBQUYsQ0FBUUQsWUFBUixFQUFzQk4sZUFBdEIsQ0FBbEI7QUNERzs7QURFSixhQUFPQSxtQkFBbUIsRUFBMUI7QUFuQmMsS0FBZjs7QUFxQkE5SSxlQUFXdFcsRUFBRTRmLE1BQUYsQ0FBU3RKLFFBQVQsRUFBbUIsVUFBQzlILENBQUQ7QUFDN0IsYUFBT0EsRUFBRWpkLElBQUYsS0FBWSxTQUFaLElBQTBCaWQsRUFBRWpkLElBQUYsS0FBWSxZQUF0QyxJQUF1RGlkLEVBQUVqZCxJQUFGLEtBQVksWUFBMUU7QUFEVSxNQUFYOztBQUdBLFFBQUd3bkIsZUFBSDtBQUNDekMsNkJBQUEsT0FBV0EsU0FBVXBELGNBQVYsQ0FBeUIsTUFBekIsRUFBaUMsSUFBakMsQ0FBWCxHQUFXLE1BQVg7QUNBRTs7QURFSGtNLHNCQUFrQkYsYUFBYTVJLFFBQWIsRUFBdUIrQixZQUF2QixDQUFsQjtBQUVBOEcsb0JBQWdCbmYsRUFBRThmLE9BQUYsQ0FBVXhKLFFBQVYsRUFBb0IsU0FBcEIsQ0FBaEI7O0FBRUFnSixjQUFVLFVBQUM3SSxPQUFELEVBQVUwSSxhQUFWO0FBQ1QsVUFBQVksZUFBQTtBQUFBQSx3QkFBa0JaLGNBQWMxSSxRQUFRWCxPQUF0QixDQUFsQjtBQUNBLGFBQU85VixFQUFFaE0sT0FBRixDQUFVK3JCLGVBQVYsRUFBMkJ0SixPQUEzQixJQUFzQyxDQUF0QyxHQUEwQ3NKLGdCQUFnQnR6QixNQUFqRTtBQUZTLEtBQVY7O0FBSUE4eUIsNkJBQXlCLFVBQUM5SSxPQUFELEVBQVUwSSxhQUFWO0FBQ3hCLFVBQUFhLG1CQUFBLEVBQUFELGVBQUE7QUFBQUEsd0JBQWtCWixjQUFjMUksUUFBUVgsT0FBdEIsQ0FBbEI7QUFFQWtLLDRCQUFzQmhnQixFQUFFNGYsTUFBRixDQUFTRyxlQUFULEVBQTBCLFVBQUN2UixDQUFEO0FBQy9DLFlBQUdBLEVBQUV6QyxXQUFMO0FBQ0MsaUJBQU8sSUFBUDtBQ0RJOztBREVMLGVBQU8sS0FBUDtBQUhxQixRQUF0Qjs7QUFLQSxVQUFHaVUsb0JBQW9CdnpCLE1BQXBCLEtBQThCLENBQWpDO0FBQ0MsZUFBTyxLQUFQO0FDQUc7O0FERUosYUFBTyxJQUFQO0FBWHdCLEtBQXpCOztBQWNBMnlCLG9CQUFnQjNmLE9BQWhCLENBQXdCLFVBQUNnWCxPQUFEO0FBSXZCLFVBQUdBLFFBQVFTLFNBQVIsS0FBcUIsS0FBckIsS0FBK0JULFFBQVExSyxXQUFSLElBQXdCLENBQUMwSyxRQUFRMUssV0FBVCxJQUF3QixDQUFDdVQsUUFBUTdJLE9BQVIsRUFBaUIwSSxhQUFqQixDQUFoRixDQUFIO0FBQ0MsWUFBRzFJLFFBQVExSCxLQUFSLEtBQW1CLFlBQXRCO0FDSk0saUJES0wwSCxRQUFRd0osUUFBUixHQUFtQixJQ0xkO0FER1A7QUNESTtBREhMO0FBUUFiLHNCQUFrQnBmLEVBQUU0ZixNQUFGLENBQVNSLGVBQVQsRUFBMEIsVUFBQzVRLENBQUQ7QUFDM0MsVUFBQTRILElBQUE7O0FBQUEsVUFBR29KLFlBQUg7QUFDQyxlQUFPaFIsRUFBRXlSLFFBQUYsS0FBYyxJQUFkLElBQXNCelIsRUFBRXVILFdBQXhCLE1BQUFLLE9BQUE1SCxFQUFBc0ksV0FBQSxZQUFBVixLQUFzRHlCLE9BQXRELEtBQXVDLE1BQXZDLEtBQW1Fd0gsY0FBMUU7QUFERDtBQUdDLGVBQU83USxFQUFFeVIsUUFBRixLQUFjLElBQXJCO0FDREc7QURIYSxNQUFsQjtBQU1BLFdBQU9iLGVBQVA7QUFoR0Q7QUFrR0FsSixXQUFTLFVBQUMxSCxDQUFELEVBQUlDLENBQUo7QUFDUixXQUFPMVEscUJBQXFCbUMsT0FBckIsQ0FBNkJnVyxPQUE3QixDQUFxQzFILENBQXJDLEVBQXdDQyxDQUF4QyxDQUFQO0FBbkdEO0FBcUdBdUgsV0FBUyxVQUFDM0osR0FBRDtBQUNSLFdBQU90TyxxQkFBcUJtQyxPQUFyQixDQUE2QjhWLE9BQTdCLENBQXFDM0osR0FBckMsQ0FBUDtBQXRHRDtBQXdHQWhJLGNBQVksVUFBQ2YsSUFBRCxFQUFPL00sT0FBUDtBQUNYLFFBQUcsQ0FBQ0EsT0FBSjtBQUNDQSxnQkFBVTtBQUFDLGtCQUFVO0FBQVgsT0FBVjtBQ0VFOztBREFILFdBQU93SCxxQkFBcUJtQyxPQUFyQixDQUE2Qm1FLFVBQTdCLENBQXdDZixJQUF4QyxFQUE4Qy9NLE9BQTlDLENBQVA7QUE1R0Q7QUE4R0EycEIsZUFBYSxVQUFDekosT0FBRCxFQUFVc0MsZUFBVjtBQUNaLFFBQUE0QixjQUFBLEVBQUE3TCxHQUFBOztBQUFBLFFBQUc5UCxPQUFPMEgsUUFBVjtBQUNDb0ksWUFBTXJJLGdCQUFnQmtILFdBQWhCLEVBQU47QUFFQWdOLHVCQUFpQi9LLGdCQUFnQndMLGlCQUFoQixFQUFqQjs7QUFFQSxVQUFHLEVBQUEzRSxXQUFBLE9BQUNBLFFBQVNsWCxHQUFWLEdBQVUsTUFBVixDQUFIO0FBQ0NrWCxrQkFBVWtFLGNBQVY7QUNDRzs7QURDSixVQUFHbEUsUUFBUWxYLEdBQVIsTUFBQW9iLGtCQUFBLE9BQWVBLGVBQWdCcGIsR0FBL0IsR0FBK0IsTUFBL0IsTUFBQW9iLGtCQUFBLE9BQXNDQSxlQUFnQnBwQixJQUF0RCxHQUFzRCxNQUF0RCxNQUE4RCxJQUE5RCxJQUFzRW9RLFNBQVNxRCxRQUFULEdBQW9COVcsSUFBcEIsQ0FBeUI4RyxJQUFsRztBQUNDLFlBQUdnTCxFQUFFaE0sT0FBRixDQUFBMm1CLGtCQUFBLE9BQVVBLGVBQWdCNUQsbUJBQTFCLEdBQTBCLE1BQTFCLEVBQStDcFYsU0FBU3FELFFBQVQsR0FBb0I5VyxJQUFwQixDQUF5QjhHLElBQXhFLElBQWdGLENBQUMsQ0FBcEY7QUFDQyxpQkFBTyxJQUFQO0FBREQ7QUFHQyxpQkFBTyxLQUFQO0FBSkY7QUNNSTs7QURBSixVQUFHLEVBQUMsQ0FBQTJsQixrQkFBQSxPQUFDQSxlQUFnQnBwQixJQUFqQixHQUFpQixNQUFqQixNQUF5QixJQUExQixLQUFtQ3duQixlQUF0QztBQUNDLGVBQU8sS0FBUDtBQ0VHOztBREFKLFVBQUc0QixrQkFBa0JsRSxRQUFRbFgsR0FBUixLQUFlb2IsZUFBZXBiLEdBQW5EO0FBQ0MsZUFBTyxJQUFQO0FBbEJGO0FDcUJHOztBREZILFdBQU8sS0FBUDtBQWxJRDtBQW9JQTRnQix3QkFBc0IsVUFBQ0MsU0FBRDtBQUNyQixRQUFBdEIsU0FBQSxFQUFBbmYsR0FBQSxFQUFBa0csSUFBQSxFQUFBc1EsSUFBQSxFQUFBQyxJQUFBOztBQUFBLFFBQUdwWCxPQUFPMEgsUUFBVjtBQUNDLFVBQUc2SCxRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsT0FBekI7QUFDQzhrQixvQkFBQSxDQUFBbmYsTUFBQWdDLFNBQUFxRCxRQUFBLGVBQUFhLE9BQUFsRyxJQUFBbWYsU0FBQSxZQUFBalosS0FBNEM3TCxHQUE1QyxLQUFZLE1BQVosR0FBWSxNQUFaOztBQUNBLFlBQUc4a0IsYUFBYUEsVUFBVWpSLEVBQVYsS0FBZ0J1UyxTQUFoQztBQUNDLGNBQUcsQ0FBQ3RCLFVBQVU5SCxlQUFYLElBQThCOEgsVUFBVTlILGVBQVYsT0FBQWIsT0FBQXhVLFNBQUFxRCxRQUFBLGVBQUFvUixPQUFBRCxLQUFBam9CLElBQUEsWUFBQWtvQixLQUF3RHBoQixJQUF4RCxHQUF3RCxNQUF4RCxHQUF3RCxNQUF4RCxDQUFqQztBQUNDLGdCQUFHLENBQUN1WixRQUFRdlUsR0FBUixDQUFZLGlDQUFaLENBQUo7QUFDQyxzQkFBQThrQixhQUFBLE9BQU9BLFVBQVcvUyxXQUFsQixHQUFrQixNQUFsQixLQUFpQyxFQUFqQztBQ0tNOztBREpQLG1CQUFPd0MsUUFBUXZVLEdBQVIsQ0FBWSxpQ0FBWixDQUFQO0FBSkY7QUFGRDtBQUREO0FDZ0JHO0FEckpKO0FBOElBcW1CLE9BQUs7QUFDSixXQUFPLElBQUlqYyxJQUFKLEVBQVA7QUEvSUQ7QUFpSkErSixjQUFZO0FBQ1gsUUFBR25QLE9BQU8wSCxRQUFWO0FBQ0MsYUFBT3dILGVBQWVDLFVBQWYsRUFBUDtBQ1VFOztBRFRILFdBQU8sS0FBUDtBQXBKRDtBQXNKQW1TLG9CQUFrQixVQUFDN0osT0FBRDtBQUNqQixRQUFHQSxRQUFRbGxCLElBQVIsS0FBZ0IsSUFBaEIsSUFBd0JvUSxTQUFTcUQsUUFBVCxHQUFvQjlXLElBQXBCLENBQXlCOEcsSUFBcEQ7QUFDQyxVQUFHMk0sU0FBU3FELFFBQVQsR0FBb0I5VyxJQUFwQixDQUF5QjhHLElBQXpCLEtBQWlDeWhCLFFBQVFPLGVBQTVDO0FBQ0MsZUFBTyxJQUFQO0FBREQ7QUFHQyxlQUFPLEtBQVA7QUFKRjtBQUFBO0FBTUMsYUFBTyxJQUFQO0FDWUU7QUR6S0o7QUErSkFvQyxrQkFBZ0IsVUFBQ0MsY0FBRDtBQUNmLFFBQUFDLFFBQUE7O0FBQUEsUUFBR0QsY0FBSDtBQUNDQyxpQkFBVyxJQUFJN1UsU0FBUzhVLFFBQWIsRUFBWDs7QUFDQUQsZUFBUy90QixJQUFULEdBQWdCLFVBQUN1QixJQUFELEVBQU8wc0IsS0FBUCxFQUFjdHFCLElBQWQ7QUFDZixlQUFPLDhCQUE0QnBDLElBQTVCLEdBQWlDLFdBQWpDLEdBQTRDMHNCLEtBQTVDLEdBQWtELElBQWxELEdBQXNEdHFCLElBQXRELEdBQTJELE1BQWxFO0FBRGUsT0FBaEI7O0FBRUEsYUFBT3FWLFVBQVVDLFVBQVYsQ0FBcUJDLFNBQVM0VSxjQUFULEVBQXlCO0FBQUNDLGtCQUFVQTtBQUFYLE9BQXpCLENBQXJCLENBQVA7QUNpQkU7QURyTEo7QUFzS0FyVCxTQUFPLFVBQUN6SCxhQUFELEVBQWdCZ1ksSUFBaEIsRUFBc0J1QyxlQUF0QixFQUF1Q0QsVUFBdkM7QUFDTixRQUFBblosR0FBQSxFQUFBa0csSUFBQSxFQUFBc1EsSUFBQSxFQUFBbFEsS0FBQTtBQUFBQSxZQUFRLEVBQVI7O0FBQ0EsUUFBRyxDQUFDdVEsSUFBSjtBQUNDLFVBQUcsQ0FBQ2hZLGFBQUo7QUFDQ0Esd0JBQUEsQ0FBQW1CLE1BQUE4RyxnQkFBQTFCLHNCQUFBLGVBQUFjLE9BQUFsRyxJQUFBYixNQUFBLFlBQUErRyxLQUFrRWYsZ0JBQWxFLENBQW1GLE1BQW5GLEVBQTJGLEtBQUs5UCxJQUFoRyxFQUFzRytLLE9BQXRHLEdBQXNHLE1BQXRHLEdBQXNHLE1BQXRHO0FDbUJHOztBRGxCSmtHLGNBQVFsSSxxQkFBcUJtQyxPQUFyQixDQUE2QmtZLHdCQUE3QixDQUFzRDVaLGFBQXRELEdBQUEyWCxPQUFBeFUsU0FBQXFELFFBQUEsY0FBQW1SLEtBQTBGam9CLElBQTFGLENBQStGbXFCLFlBQS9GLEdBQStGLE1BQS9GLENBQVI7QUFIRDtBQUtDcFMsY0FBUSxDQUFDO0FBQUM0UyxrQkFBVXJDLElBQVg7QUFBaUJ1Qyx5QkFBaUJBLGVBQWxDO0FBQW1ERCxvQkFBWUE7QUFBL0QsT0FBRCxDQUFSO0FDMEJFOztBRHpCSCxXQUFPN1MsS0FBUDtBQTlLRDtBQWdMQXNhLGlCQUFlLFVBQUN6SyxPQUFEO0FBQ2QsV0FBTztBQUFDbFEsWUFBTWtRO0FBQVAsS0FBUDtBQWpMRDtBQW1MQUQsaUJBQWUsVUFBQ0MsT0FBRCxFQUFVZ0QsVUFBVjtBQUNkLFFBQUF0RCxhQUFBO0FBQUFBLG9CQUFnQjVYLFVBQVVzQyxPQUFWLENBQWtCc1YsYUFBbEIsQ0FBZ0NNLE9BQWhDLENBQWhCOztBQUVBLFNBQUFOLGlCQUFBLE9BQUdBLGNBQWVJLElBQWxCLEdBQWtCLE1BQWxCLEtBQTBCa0QsVUFBMUI7QUFDQyxhQUFPLElBQVA7QUFERDtBQUdDLGFBQU8sS0FBUDtBQzZCRTtBRHROSjtBQTJMQTBILHNCQUFvQjtBQUNuQixRQUFBMVIsR0FBQTtBQUFBQSxVQUFNckksZ0JBQWdCa0gsV0FBaEIsRUFBTjtBQUVBLFdBQU8zTixFQUFFeWYsSUFBRixDQUFPbmhCLGNBQWNtaUIsMEJBQWQsQ0FBeUMzUixHQUF6QyxFQUE4QzlQLE9BQU95VyxNQUFQLEVBQTlDLENBQVAsQ0FBUDtBQTlMRDtBQWlNQWlMLDRCQUEwQjtBQUN6QixRQUFBcEssUUFBQSxFQUFBc0UsV0FBQSxFQUFBamIsR0FBQSxFQUFBa0osTUFBQTtBQUFBQSxhQUFTOUsscUJBQXFCbUMsT0FBckIsQ0FBNkIySSxNQUE3QixFQUFUO0FBQ0ErUixrQkFBY2hMLGdCQUFnQmtNLGNBQWhCLEVBQWQ7QUFDQXhGLGVBQVd0VyxFQUFFbEksS0FBRixDQUFRK1EsT0FBTytSLFlBQVk1bEIsSUFBbkIsQ0FBUixDQUFYO0FBRUFzaEIsZUFBV0EsU0FBU3BELGNBQVQsQ0FBd0IsU0FBeEIsRUFBbUNsVSxPQUFPeVcsTUFBUCxFQUFuQyxDQUFYOztBQUVBLFFBQUdhLFNBQVM3cEIsTUFBVCxHQUFrQixDQUFyQjtBQUNDLGNBQUFrVCxNQUFBMlcsa0JBQUE3cEIsTUFBQSxpQkFBQWtULElBQXNDb00sV0FBdEMsR0FBc0MsTUFBdEM7QUM0QkU7O0FEMUJILFdBQU8sRUFBUDtBQTNNRDtBQTZNQTRVLGVBQWEsVUFBQ2xLLE9BQUQ7QUFDWixRQUFBOVcsR0FBQSxFQUFBa0csSUFBQTs7QUFBQSxRQUFHLENBQUM0USxRQUFRTyxlQUFULElBQTRCUCxRQUFRTyxlQUFSLE9BQUFyWCxNQUFBZ0MsU0FBQXFELFFBQUEsZUFBQWEsT0FBQWxHLElBQUF6UixJQUFBLFlBQUEyWCxLQUFzRDdRLElBQXRELEdBQXNELE1BQXRELEdBQXNELE1BQXRELENBQS9CO0FBQ0MsVUFBQXloQixXQUFBLE9BQUdBLFFBQVNRLE9BQVosR0FBWSxNQUFaO0FBQ0MsWUFBR1IsUUFBUVYsV0FBWDtBQUNDLGlCQUFPLENBQUMsVUFBRCxFQUFhLFVBQWIsRUFBeUIsV0FBekIsRUFBc0MsUUFBdEMsRUFBZ0QxSSxRQUFoRCxDQUF5RG9KLFFBQVExSCxLQUFqRSxDQUFQO0FBREQ7QUFHQyxpQkFBTyxJQUFQO0FBSkY7QUFERDtBQ29DRzs7QUQ5QkgsV0FBTyxLQUFQO0FBcE5EO0FBc05BNlIscUJBQW1CLFVBQUM3UixLQUFEO0FBQ2xCLFdBQU8xYSxFQUFFMGEsUUFBUSxjQUFWLENBQVA7QUF2TkQ7QUF5TkE4UixlQUFhLFVBQUM5UixLQUFEO0FBQ1osV0FBTyxlQUFjQSxLQUFyQjtBQTFORDtBQTROQStSLGVBQWEsVUFBQy9SLEtBQUQ7QUFDWixXQUFPLGVBQWNBLEtBQXJCO0FBN05EO0FBK05BZ1MsYUFBVyxVQUFDaFMsS0FBRDtBQUNWLFdBQU8sQ0FBQyxVQUFELEVBQWEsVUFBYixFQUF5QixXQUF6QixFQUFzQyxRQUF0QyxFQUFnRDFCLFFBQWhELENBQXlEMEIsS0FBekQsQ0FBUDtBQWhPRDtBQWtPQWlTLFlBQVU7QUFDVCxRQUFBaHNCLElBQUEsRUFBQTJLLEdBQUEsRUFBQWtHLElBQUE7QUFBQTdRLFdBQUEsQ0FBQTJLLE1BQUFnQyxTQUFBcUQsUUFBQSxlQUFBYSxPQUFBbEcsSUFBQXpSLElBQUEsWUFBQTJYLEtBQWtDN1EsSUFBbEMsR0FBa0MsTUFBbEMsR0FBa0MsTUFBbEM7QUFDQWlzQixlQUFXO0FBQ1YsVUFBQXR1QixDQUFBLEVBQUEyb0IsT0FBQTs7QUFBQTtBQUNDQSxrQkFBVXhMLEVBQUUsOEJBQThCOWEsSUFBaEMsQ0FBVjs7QUFDQSxZQUFHc21CLFFBQVE3dUIsTUFBUixHQUFpQixDQUFwQjtBQUNDLGNBQUE2dUIsV0FBQSxPQUFHQSxRQUFTOWlCLEVBQVQsQ0FBWSxJQUFaLENBQUgsR0FBRyxNQUFIO0FDa0NPLG1CRGpDTjhpQixRQUFRMEYsUUFBUixDQUFpQixnQkFBakIsQ0NpQ007QURsQ1A7QUNvQ08sbUJEakNObFIsRUFBRSxnQkFBRixFQUFvQndMLE9BQXBCLEVBQTZCMEYsUUFBN0IsQ0FBc0MsZ0JBQXRDLENDaUNNO0FEckNSO0FBRkQ7QUFBQSxlQUFBbGQsS0FBQTtBQU9NblIsWUFBQW1SLEtBQUE7QUNxQ0QsZURwQ0psRSxRQUFRQyxHQUFSLENBQVlsTixDQUFaLENDb0NJO0FBQ0Q7QUQ5Q0wsT0FVRSxDQVZGO0FBV0EsV0FBTyxFQUFQO0FBL09EO0FBQUEsQ0FERDs7QUFrUEEsSUFBR3FNLE9BQU9DLFFBQVY7QUFDQ2hCLG1CQUFpQmlDLE9BQWpCLENBQXlCK2Usa0JBQXpCLEdBQThDO0FBQzdDLFFBQUE3YixNQUFBO0FBQUFBLGFBQVN6QixTQUFTcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQWxDLENBQThDaUMsTUFBdkQ7QUFDQSxXQUFPekIsU0FBU3FELFFBQVQsR0FBb0I5VyxJQUFwQixDQUF5QitxQixtQkFBekIsSUFBZ0QvVSxRQUFRQyxFQUFSLENBQVcsMEJBQVgsRUFBdUMsRUFBdkMsRUFBMkNmLE1BQTNDLENBQXZEO0FBRjZDLEdBQTlDO0FDNENBLEM7Ozs7Ozs7Ozs7OztBQy9SRHRGLGVBQWVvQyxPQUFmLEdBQ0M7QUFBQTdDLFVBQVEsVUFBQ21SLENBQUQsRUFBSUMsQ0FBSjtBQ0NMLFdEQUZELE1BQUtDLENDQUg7QURESDtBQUVBb0QsU0FBTyxVQUFDckQsQ0FBRDtBQUNOLFFBQUdBLENBQUg7QUNFSSxhRERIQSxFQUFFNWdCLFFBQUYsR0FBYTZDLElBQWIsR0FBb0JoRSxNQUFwQixHQUE2QixDQ0MxQjtBREZKO0FDSUksYURESCxJQ0NHO0FBQ0Q7QURSSjtBQU9BdXBCLFdBQVMsVUFBQ3hILENBQUQ7QUFDUixRQUFHQSxDQUFIO0FDSUksYURISEEsRUFBRTVnQixRQUFGLEdBQWE2QyxJQUFiLEdBQW9CaEUsTUFBcEIsR0FBNkIsQ0NHMUI7QURKSjtBQ01JLGFESEgsS0NHRztBQUNEO0FEZko7QUFhQTZrQixVQUFRLFVBQUM5QyxDQUFELEVBQUlDLENBQUo7QUNLTCxXREpGRCxJQUFJQyxDQ0lGO0FEbEJIO0FBZ0JBeVMsY0FBWSxVQUFDNWQsSUFBRDtBQUNWLFFBQUdOLFFBQVF3SSxRQUFSLE9BQUFsSSxRQUFBLE9BQXNCQSxLQUFNNmQsV0FBTixFQUF0QixHQUFzQixNQUF0QixNQUE4QyxJQUFJL2MsSUFBSixFQUFELENBQVcrYyxXQUFYLEVBQWhEO0FBQ0MsYUFBT3JSLEVBQUVsSSxNQUFGLENBQVN0RSxJQUFULENBQWMsSUFBSWMsSUFBSixDQUFTZCxJQUFULENBQWQsRUFBOEIsYUFBOUIsQ0FBUDtBQUREO0FBR0MsYUFBT3dNLEVBQUVsSSxNQUFGLENBQVN0RSxJQUFULENBQWMsSUFBSWMsSUFBSixDQUFTZCxJQUFULENBQWQsRUFBOEIsa0JBQTlCLENBQVA7QUNLQztBRHpCSjtBQXNCQThkLGVBQWEsVUFBQ0MsTUFBRDtBQUNaLFFBQUE3SyxJQUFBO0FBQUFBLFdBQU8vUCxnQkFBZ0I2YSxlQUFoQixDQUFnQ0QsTUFBaEMsQ0FBUDs7QUFDQSxRQUFHN0ssSUFBSDtBQUNDLGFBQU9BLEtBQUt4aEIsSUFBWjtBQ09FOztBQUNELFdEUEYsSUNPRTtBRGpDSDtBQTJCQXVzQixvQkFBa0IsVUFBQ0MsUUFBRDtBQUNqQixRQUFHQSxZQUFhQSxTQUFTandCLElBQVQsS0FBaUIsSUFBOUIsSUFBdUNpd0IsU0FBU0MsU0FBVCxLQUFzQnppQixPQUFPeVcsTUFBUCxFQUE3RCxJQUFpRitMLFNBQVN6TCxXQUFULEtBQXdCLElBQXpHLElBQWtILENBQUN4SCxRQUFRdlUsR0FBUixDQUFZLGVBQVosQ0FBdEg7QUFDQyxhQUFPLElBQVA7QUNTRTs7QUFDRCxXRFRGLEtDU0U7QUR2Q0g7QUErQkEwbkIsNEJBQTBCLFVBQUNGLFFBQUQ7QUFDekIsUUFBQUcsY0FBQSxFQUFBQyxNQUFBLEVBQUFqaUIsR0FBQSxFQUFBa0csSUFBQSxFQUFBc1EsSUFBQTtBQUFBd0wscUJBQUEsQ0FBQWhpQixNQUFBWCxPQUFBa00sUUFBQSxhQUFBckYsT0FBQWxHLElBQUEsc0JBQUF3VyxPQUFBdFEsS0FBQWdjLFFBQUEsWUFBQTFMLEtBQW9Ed0wsY0FBcEQsR0FBb0QsTUFBcEQsR0FBb0QsTUFBcEQsR0FBb0QsTUFBcEQ7O0FBQ0EsUUFBQUEsa0JBQUEsT0FBR0EsZUFBZ0JsMUIsTUFBbkIsR0FBbUIsTUFBbkI7QUFDQ20xQixlQUFBRCxrQkFBQSxPQUFTQSxlQUFnQkcsUUFBaEIsQ0FBeUI5aUIsT0FBT3lXLE1BQVAsRUFBekIsQ0FBVCxHQUFTLE1BQVQ7QUNZRTs7QURYSCxTQUFPbU0sTUFBUDtBQUNDLGFBQU8sS0FBUDtBQ2FFOztBRFpILFdBQU9KLFNBQVMxTCxPQUFULEtBQW9COVcsT0FBT3lXLE1BQVAsRUFBM0I7QUFyQ0Q7QUFzQ0FzTSxhQUFXO0FBQ1QsUUFBQXBpQixHQUFBO0FBQUEsWUFBQUEsTUFBQWdDLFNBQUFxRCxRQUFBLEdBQUFnZCxVQUFBLFlBQUFyaUIsSUFBdUMzRixHQUF2QyxLQUFPLE1BQVA7QUF2Q0Y7QUF3Q0Fpb0IscUJBQW1CLFVBQUNULFFBQUQ7QUFFbEIsUUFBQTdoQixHQUFBOztBQUFBLFFBQUc3QixlQUFlb0MsT0FBZixDQUF1QndoQix3QkFBdkIsQ0FBZ0RGLFFBQWhELENBQUg7QUFDQyxhQUFPLElBQVA7QUNpQkU7O0FEaEJILGFBQUE3aEIsTUFBQTZoQixTQUFBelYsV0FBQSxZQUFBcE0sSUFBNkIvUixRQUE3QixHQUF3QzZDLElBQXhDLEdBQStDaEUsTUFBL0MsR0FBK0MsTUFBL0MsSUFBd0QsQ0FBeEQ7QUE1Q0Q7QUE2Q0F5d0IsUUFBTSxVQUFDc0UsUUFBRDtBQUNMLFFBQUdBLFlBQWFBLFNBQVNqd0IsSUFBVCxLQUFpQixJQUFqQztBQUNDLGFBQU8sSUFBUDtBQ21CRTs7QUFDRCxXRG5CRixLQ21CRTtBRG5FSDtBQWlEQTJ3Qix3QkFBc0IsVUFBQ0MsWUFBRCxFQUFlQyxhQUFmO0FBQ3JCLFFBQUFDLGlCQUFBOztBQUFBLFFBQUdELGtCQUFpQixJQUFwQjtBQUNDLGFBQU8sNkJBQVA7QUNzQkU7O0FEcEJIQyx3QkFBb0IsTUFBcEI7O0FBQ0EsWUFBT0YsWUFBUDtBQUFBLFdBQ00sVUFETjtBQUdFRSw0QkFBb0IseUJBQXBCO0FBRkk7O0FBRE4sV0FJTSxVQUpOO0FBTUVBLDRCQUFvQixxQkFBcEI7QUFGSTs7QUFKTixXQU9NLFlBUE47QUFTRUEsNEJBQW9CLFdBQXBCO0FBRkk7O0FBUE4sV0FVTSxZQVZOO0FBWUVBLDRCQUFvQix5QkFBcEI7QUFGSTs7QUFWTixXQWFNLFdBYk47QUFlRUEsNEJBQW9CLHNCQUFwQjtBQUZJOztBQWJOLFdBZ0JNLFdBaEJOO0FBa0JFQSw0QkFBb0IsWUFBcEI7QUFGSTs7QUFoQk47QUFvQkVBLDRCQUFvQixFQUFwQjtBQUNBO0FBckJGOztBQzRDRSxXRHRCRkEsaUJDc0JFO0FEbEdIO0FBNkVBQyx3QkFBc0IsVUFBQ0gsWUFBRCxFQUFlQyxhQUFmO0FBQ3JCLFFBQUFHLGlCQUFBLEVBQUFuZixNQUFBOztBQUFBLFFBQUdwRSxPQUFPQyxRQUFWO0FBQ0NtRSxlQUFTekIsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q2lDLE1BQXZEOztBQUNBLFVBQUdBLE9BQU8wQyxpQkFBUCxPQUE4QixPQUFqQztBQUNDMUMsaUJBQVMsT0FBVDtBQUhGO0FBQUE7QUFLQ0EsZUFBU21MLFFBQVF2VSxHQUFSLENBQVksc0JBQVosQ0FBVDtBQzBCRTs7QUR4QkgsUUFBR29vQixrQkFBaUIsSUFBcEI7QUFDQyxhQUFPbGUsUUFBUUMsRUFBUixDQUFXLHlDQUFYLEVBQXNELEVBQXRELEVBQTBEZixNQUExRCxDQUFQO0FDMEJFOztBRHpCSG1mLHdCQUFvQixNQUFwQjs7QUFDQSxZQUFPSixZQUFQO0FBQUEsV0FDTSxVQUROO0FBR0VJLDRCQUFvQnJlLFFBQVFDLEVBQVIsQ0FBVyx5QkFBWCxFQUFzQyxFQUF0QyxFQUEwQ2YsTUFBMUMsQ0FBcEI7QUFGSTs7QUFETixXQUlNLFVBSk47QUFNRW1mLDRCQUFvQnJlLFFBQVFDLEVBQVIsQ0FBVyx5QkFBWCxFQUFzQyxFQUF0QyxFQUEwQ2YsTUFBMUMsQ0FBcEI7QUFGSTs7QUFKTixXQU9NLFlBUE47QUFTRW1mLDRCQUFvQnJlLFFBQVFDLEVBQVIsQ0FBVywyQkFBWCxFQUF3QyxFQUF4QyxFQUE0Q2YsTUFBNUMsQ0FBcEI7QUFGSTs7QUFQTixXQVVNLFlBVk47QUFZRW1mLDRCQUFvQnJlLFFBQVFDLEVBQVIsQ0FBVywyQkFBWCxFQUF3QyxFQUF4QyxFQUE0Q2YsTUFBNUMsQ0FBcEI7QUFGSTs7QUFWTixXQWFNLFdBYk47QUFlRW1mLDRCQUFvQnJlLFFBQVFDLEVBQVIsQ0FBVywwQkFBWCxFQUF1QyxFQUF2QyxFQUEyQ2YsTUFBM0MsQ0FBcEI7QUFGSTs7QUFiTixXQWdCTSxXQWhCTjtBQWtCRW1mLDRCQUFvQnJlLFFBQVFDLEVBQVIsQ0FBVywwQkFBWCxFQUF1QyxFQUF2QyxFQUEyQ2YsTUFBM0MsQ0FBcEI7QUFGSTs7QUFoQk4sV0FtQk0sVUFuQk47QUFxQkVtZiw0QkFBb0JyZSxRQUFRQyxFQUFSLENBQVcseUJBQVgsRUFBc0MsRUFBdEMsRUFBMENmLE1BQTFDLENBQXBCO0FBRkk7O0FBbkJOLFdBc0JNLFFBdEJOO0FBd0JFbWYsNEJBQW9CcmUsUUFBUUMsRUFBUixDQUFXLHVCQUFYLEVBQW9DLEVBQXBDLEVBQXdDZixNQUF4QyxDQUFwQjtBQUZJOztBQXRCTjtBQTBCRW1mLDRCQUFvQixFQUFwQjtBQUNBO0FBM0JGOztBQ3VERSxXRDNCRkEsaUJDMkJFO0FEL0lIO0FBc0hBQyx3QkFBc0IsVUFBQ0wsWUFBRCxFQUFlQyxhQUFmO0FBQ3JCLFFBQUdBLGtCQUFpQixJQUFwQjtBQUNDLGFBQU8sZUFBUDtBQzRCRTs7QUQzQkgsV0FBT0QsWUFBUDtBQXpIRDtBQTJIQXJLLE1BQUksVUFBQ3RpQixHQUFEO0FBQ0gsV0FBTzBPLFFBQVFDLEVBQVIsQ0FBVzNPLEdBQVgsQ0FBUDtBQTVIRDtBQThIQTJxQix3QkFBc0IsVUFBQ0MsU0FBRDtBQUNyQixRQUFBdEIsU0FBQSxFQUFBbmYsR0FBQSxFQUFBa0csSUFBQTs7QUFBQSxRQUFHN0csT0FBTzBILFFBQVY7QUFDQyxVQUFHNkgsUUFBUXZVLEdBQVIsQ0FBWSxLQUFaLE1BQXNCLE9BQXpCO0FBQ0M4a0Isb0JBQUEsQ0FBQW5mLE1BQUFnQyxTQUFBcUQsUUFBQSxlQUFBYSxPQUFBbEcsSUFBQW1mLFNBQUEsWUFBQWpaLEtBQTRDN0wsR0FBNUMsS0FBWSxNQUFaLEdBQVksTUFBWjs7QUFDQSxZQUFHOGtCLGFBQWFBLFVBQVVqUixFQUFWLEtBQWdCdVMsU0FBaEM7QUFDQyxjQUFHLENBQUM3UixRQUFRdlUsR0FBUixDQUFZLGlDQUFaLENBQUo7QUFDQyxvQkFBQThrQixhQUFBLE9BQU9BLFVBQVcvUyxXQUFsQixHQUFrQixNQUFsQixLQUFpQyxFQUFqQztBQzhCSzs7QUQ3Qk4saUJBQU93QyxRQUFRdlUsR0FBUixDQUFZLGlDQUFaLENBQVA7QUFMRjtBQUREO0FDdUNHO0FEdEtKO0FBc0lBeW9CLGFBQVcsVUFBQ2pCLFFBQUQ7QUFDVixRQUFHQSxZQUFhQSxTQUFTandCLElBQVQsS0FBaUIsU0FBakM7QUFDQyxhQUFPLElBQVA7QUNtQ0U7O0FBQ0QsV0RuQ0YsS0NtQ0U7QUQ1S0g7QUEwSUFteEIsMkJBQXlCLFVBQUNqTSxPQUFEO0FBQ3hCLFFBQUdyWCxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCOUYsUUFBUWtNLGdCQUExQixFQUE0Q25HLEtBQTVDLE9BQXVELENBQTFEO0FBQ0MsYUFBTyxLQUFQO0FDcUNFOztBRHBDSCxRQUFHL0YsV0FBWUEsUUFBUWxsQixJQUFSLEtBQWdCLFNBQTVCLElBQTBDa2xCLFFBQVFnTCxTQUFSLEtBQXFCemlCLE9BQU95VyxNQUFQLEVBQS9ELElBQW1GLENBQUNsSCxRQUFRdlUsR0FBUixDQUFZLGVBQVosQ0FBcEYsSUFBcUh5YyxRQUFRMUgsS0FBUixLQUFtQixZQUEzSTtBQUNDLGFBQU8sSUFBUDtBQ3NDRTs7QUFDRCxXRHRDRixLQ3NDRTtBRHJMSDtBQWdKQXFLLGtCQUFnQixVQUFDQyxjQUFEO0FBQ2YsUUFBQUMsUUFBQTs7QUFBQSxRQUFHRCxjQUFIO0FBQ0NDLGlCQUFXLElBQUk3VSxTQUFTOFUsUUFBYixFQUFYOztBQUNBRCxlQUFTL3RCLElBQVQsR0FBZ0IsVUFBRXVCLElBQUYsRUFBUTBzQixLQUFSLEVBQWV0cUIsSUFBZjtBQUNmLGVBQU8sOEJBQTRCcEMsSUFBNUIsR0FBaUMsV0FBakMsR0FBNEMwc0IsS0FBNUMsR0FBa0QsSUFBbEQsR0FBc0R0cUIsSUFBdEQsR0FBMkQsTUFBbEU7QUFEZSxPQUFoQjs7QUFFQSxhQUFPcVYsVUFBVUMsVUFBVixDQUFxQkMsU0FBUzRVLGNBQVQsRUFBeUI7QUFBQ0Msa0JBQVNBO0FBQVYsT0FBekIsQ0FBckIsQ0FBUDtBQzRDRTtBRGpNSjtBQXNKQXNKLGdCQUFjLFVBQUNuTSxPQUFEO0FBQ2IsUUFBR0EsV0FBWUEsUUFBUWxsQixJQUFSLEtBQWdCLFlBQS9CO0FBQ0MsYUFBTyxJQUFQO0FDOENFOztBQUNELFdEOUNGLEtDOENFO0FEdk1IO0FBMEpBc3hCLDhCQUE0QixVQUFDcE0sT0FBRDtBQUMzQixRQUFBM0gsR0FBQTs7QUFBQSxRQUFHMVAsR0FBR2tkLFNBQUgsQ0FBYUMsSUFBYixDQUFrQjlGLFFBQVFrTSxnQkFBMUIsRUFBNENuRyxLQUE1QyxPQUF1RCxDQUExRDtBQUNDLGFBQU8sS0FBUDtBQ2lERTs7QUQvQ0gsUUFBRy9GLFdBQVlBLFFBQVFsbEIsSUFBUixLQUFnQixZQUE1QixJQUE2QyxDQUFDZ2QsUUFBUXZVLEdBQVIsQ0FBWSxlQUFaLENBQTlDLElBQStFeWMsUUFBUTFILEtBQVIsS0FBbUIsWUFBbEcsSUFBbUgvTCxRQUFROGYsY0FBUixDQUF1QixFQUF2QixFQUEwQixxQkFBMUIsQ0FBdEg7QUFFQ2hVLFlBQU0xUCxHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFDQyxhQUFLa1gsUUFBUXpSO0FBQWQsT0FBckIsRUFBOEM7QUFBQ2xHLGdCQUFRO0FBQUN3RyxnQkFBTSxDQUFQO0FBQVVrQixpQkFBTztBQUFqQjtBQUFULE9BQTlDLENBQU47O0FBQ0EsVUFBR3NJLE9BQVFBLElBQUl4SixJQUFaLElBQXFCd0osSUFBSXRJLEtBQTVCO0FBQ0MsWUFBR0MsZ0JBQWdCc2Msc0JBQWhCLENBQXVDalUsSUFBSXhKLElBQTNDLEVBQWlEd0osSUFBSXRJLEtBQXJELEVBQTREeEgsT0FBT3lXLE1BQVAsRUFBNUQsQ0FBSDtBQUNDLGlCQUFPLElBQVA7QUFGRjtBQzBESTs7QUR0REosVUFBR2dCLFFBQVFnTCxTQUFSLEtBQXFCemlCLE9BQU95VyxNQUFQLEVBQXhCO0FBQ0MsZUFBTyxJQUFQO0FBUkY7QUNpRUc7O0FBQ0QsV0R4REYsS0N3REU7QURoT0g7QUEwS0F1TixvQkFBa0I7QUFDakIsUUFBR2hnQixRQUFRaWdCLGNBQVIsRUFBSDtBQUNDLGFBQU8sSUFBSXZVLFlBQUosQ0FBaUI7QUFDdkJvSSxxQkFBYTtBQUNab00sb0JBQVU7QUFDVDN4QixrQkFBTTtBQURHLFdBREU7QUFJWjR4QixvQkFBVSxLQUpFO0FBS1o1eEIsZ0JBQU02UztBQUxNO0FBRFUsT0FBakIsQ0FBUDtBQUREO0FBV0MsYUFBTyxJQUFJc0ssWUFBSixDQUFpQjtBQUN2Qm9JLHFCQUFhO0FBQ1pvTSxvQkFBVTtBQUNUM3hCLGtCQUFNLDBCQURHO0FBRVQ2eEIsc0JBQVUsSUFGRDtBQUdUQyxtQ0FBc0I7QUFDckJ6YixzQkFBUSxrQkFEYTtBQUVyQjBiLDhCQUFlLElBRk07QUFHckJsZ0Isc0JBQVFtTCxRQUFRdlUsR0FBUixDQUFZLHNCQUFaLENBSGE7QUFJckJ1cEIsaUNBQWtCO0FBQ2pCQyw0QkFBWTtBQURLO0FBSkc7QUFIYixXQURFO0FBYVpMLG9CQUFVLEtBYkU7QUFjWjV4QixnQkFBTTZTO0FBZE07QUFEVSxPQUFqQixDQUFQO0FDMEVFO0FEaFFKO0FBeU1BcWYsb0JBQWtCO0FBQ2pCLFdBQU87QUFDTjNNLG1CQUFZLEtBQUtBO0FBRFgsS0FBUDtBQTFNRDtBQThNQTs7OztLQUtBNE0sZ0JBQWdCLFVBQUNobEIsSUFBRCxFQUFPQyxZQUFQO0FBR2YsUUFBQWdCLEdBQUEsRUFBQWdrQixzQkFBQTtBQUFBQSw2QkFBQSxFQUFBaGtCLE1BQUFQLEdBQUF3a0IsY0FBQSxDQUFBdGtCLE9BQUE7QUMwRElrSCxhQUFPK0gsUUFBUXZVLEdBQVIsQ0FBWSxTQUFaLENEMURYO0FDMkRJeEUsV0FBSztBRDNEVCxXQzREUyxJRDVEVCxHQzREZ0JtSyxJRDVEb0crUSxNQUFwSCxHQUFvSCxNQUFwSCxLQUE4SCxLQUE5SDtBQUVBLFdBQU8sQ0FBQ2lULHNCQUFSO0FBeE5EO0FBME5BRSx3QkFBc0IsVUFBQ0MsV0FBRDtBQUNyQixRQUFBaFYsR0FBQSxFQUFBMUwsTUFBQSxFQUFBbFUsSUFBQTs7QUFBQSxRQUFHOFAsT0FBT0MsUUFBVjtBQUNDbUUsZUFBU3pCLFNBQVNxRCxRQUFULEdBQW9CME8sSUFBcEIsQ0FBeUJ0UyxRQUF6QixDQUFrQ0QsV0FBbEMsQ0FBOENpQyxNQUF2RDs7QUFDQSxVQUFHQSxPQUFPMEMsaUJBQVAsT0FBOEIsT0FBakM7QUFDQzFDLGlCQUFTLE9BQVQ7QUFIRjtBQUFBO0FBS0NBLGVBQVNtTCxRQUFRdlUsR0FBUixDQUFZLHNCQUFaLENBQVQ7QUM4REU7O0FENURIOFUsVUFBTTFQLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCO0FBQUNDLFdBQUt1a0I7QUFBTixLQUFyQixFQUF5QztBQUFDaGxCLGNBQVE7QUFBQ2lJLGVBQU8sQ0FBUjtBQUFXa1EsaUJBQVM7QUFBcEI7QUFBVCxLQUF6QyxDQUFOOztBQUNBLFFBQUcsQ0FBSW5JLEdBQVA7QUFDQyxhQUFPNUssUUFBUUMsRUFBUixDQUFXLGtCQUFYLEVBQStCLEVBQS9CLEVBQW1DZixNQUFuQyxDQUFQO0FDcUVFOztBRG5FSGxVLFdBQU8sRUFBUDs7QUFDQSxRQUFHNGYsSUFBSS9ILEtBQUosS0FBYSxXQUFoQjtBQUNDN1gsYUFBT2dWLFFBQVFDLEVBQVIsQ0FBVyxXQUFYLEVBQXdCLEVBQXhCLEVBQTRCZixNQUE1QixDQUFQO0FBREQsV0FFSyxJQUFHMEwsSUFBSS9ILEtBQUosS0FBYSxTQUFoQjtBQUNKN1gsYUFBT2dWLFFBQVFDLEVBQVIsQ0FBVyxTQUFYLEVBQXNCLEVBQXRCLEVBQTBCZixNQUExQixDQUFQO0FBREksV0FFQSxJQUFHMEwsSUFBSS9ILEtBQUosS0FBYSxPQUFoQjtBQUNKLFVBQUcrSCxJQUFJbUksT0FBUDtBQUNDL25CLGVBQU9nVixRQUFRQyxFQUFSLENBQVcsdUJBQVgsRUFBb0MsRUFBcEMsRUFBd0NmLE1BQXhDLENBQVA7QUFERDtBQUdDbFUsZUFBT2dWLFFBQVFDLEVBQVIsQ0FBVyxrQ0FBWCxFQUErQyxFQUEvQyxFQUFtRGYsTUFBbkQsQ0FBUDtBQUpHO0FDMEVGOztBRHBFSCxXQUFPbFUsSUFBUDtBQWpQRDtBQW1QQTYwQix5QkFBdUIsVUFBQ0QsV0FBRDtBQUN0QixRQUFBRSxHQUFBLEVBQUFsVixHQUFBO0FBQUFBLFVBQU0xUCxHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFDQyxXQUFLdWtCO0FBQU4sS0FBckIsRUFBeUM7QUFBQ2hsQixjQUFRO0FBQUNpSSxlQUFPLENBQVI7QUFBV2tRLGlCQUFTO0FBQXBCO0FBQVQsS0FBekMsQ0FBTjs7QUFDQSxRQUFHLENBQUluSSxHQUFQO0FBQ0MsYUFBTyxFQUFQO0FDOEVFOztBRDVFSGtWLFVBQU0sRUFBTjs7QUFDQSxRQUFHbFYsSUFBSS9ILEtBQUosS0FBYSxPQUFoQjtBQUNDLFVBQUcrSCxJQUFJbUksT0FBUDtBQUNDK00sY0FBTSxNQUFOO0FBREQ7QUFHQ0EsY0FBTSxLQUFOO0FBSkY7QUNtRkc7O0FEOUVILFdBQU9BLEdBQVA7QUE5UEQ7QUFnUUFDLGNBQVksVUFBQ250QixLQUFEO0FBQ1gsV0FBT0EsVUFBUyxDQUFoQjtBQWpRRDtBQW1RQW90Qix3QkFBc0IsVUFBQ0osV0FBRDtBQUNyQixRQUFBSyxRQUFBLEVBQUFyVixHQUFBLEVBQUFsSixJQUFBO0FBQUFrSixVQUFNMVAsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBQ0MsV0FBS3VrQixXQUFOO0FBQW1CcEgsZ0NBQTBCO0FBQUMwSCxpQkFBUztBQUFWO0FBQTdDLEtBQXJCLEVBQW1GO0FBQUN0bEIsY0FBTztBQUFDdWxCLGlCQUFTLENBQVY7QUFBYUMsb0JBQVk7QUFBekI7QUFBUixLQUFuRixDQUFOOztBQUNBLFFBQUd4VixHQUFIO0FBQ0NxVixpQkFBVyxFQUFYO0FBQ0F2ZSxhQUFPLEVBQVA7O0FBQ0EsVUFBRzVHLE9BQU8wSCxRQUFWO0FBQ0NkLGVBQU8yZSxXQUFXQyxjQUFYLENBQTBCMVYsSUFBSXdWLFVBQTlCLENBQVA7QUFERCxhQUVLLElBQUd0bEIsT0FBT0MsUUFBVjtBQUNKMkcsZUFBT3hHLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUI7QUFBQ0MsZUFBS3VQLElBQUl3VjtBQUFWLFNBQWpCLEVBQXdDO0FBQUN4bEIsa0JBQVE7QUFBQzlKLGtCQUFNO0FBQVA7QUFBVCxTQUF4QyxDQUFQO0FDaUdHOztBRC9GSixVQUFHNFEsS0FBSzVRLElBQVI7QUFDQ212QixpQkFBUzFDLFNBQVQsR0FBcUI3YixLQUFLckcsR0FBMUI7QUFDQTRrQixpQkFBU08sY0FBVCxHQUEwQjllLEtBQUs1USxJQUEvQjtBQUNBbXZCLGlCQUFTRSxPQUFULEdBQW1CdlYsSUFBSXVWLE9BQXZCO0FDaUdHOztBRC9GSixVQUFHLENBQUlya0IsRUFBRTRMLE9BQUYsQ0FBVXVZLFFBQVYsQ0FBUDtBQUNDLGVBQU9BLFFBQVA7QUFkRjtBQ2dIRztBRHJYSjtBQXNSQVEsdUNBQXFDLFVBQUNsTyxPQUFEO0FBQ3BDLFFBQUcsQ0FBQ0EsUUFBUWxsQixJQUFSLEtBQWdCLElBQWhCLElBQXdCa2xCLFFBQVFsbEIsSUFBUixLQUFnQixZQUF4QyxJQUF3RGtsQixRQUFRbGxCLElBQVIsS0FBZ0IsU0FBekUsS0FBd0ZrbEIsUUFBUTFILEtBQVIsS0FBaUIsWUFBNUc7QUFDQyxhQUFPLElBQVA7QUNrR0U7O0FEakdILFdBQU8sS0FBUDtBQXpSRDtBQTJSQTZWLG1CQUFpQixVQUFDN1YsS0FBRDtBQUNoQixXQUFPQSxVQUFTLFlBQWhCO0FBNVJEO0FBOFJBOFYsa0JBQWdCLFVBQUNmLFdBQUQ7QUFDZixXQUFPLENBQUMsQ0FBQzFrQixHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCdUgsV0FBbEIsRUFBK0J0SCxLQUEvQixFQUFUO0FBL1JEO0FBaVNBc0ksb0JBQWtCLFVBQUNDLFFBQUQ7QUFDakIsUUFBQTNoQixNQUFBOztBQUFBLFFBQUdwRSxPQUFPQyxRQUFWO0FBQ0NtRSxlQUFTekIsU0FBU3FELFFBQVQsR0FBb0IwTyxJQUFwQixDQUF5QnRTLFFBQXpCLENBQWtDRCxXQUFsQyxDQUE4Q2lDLE1BQXZEOztBQUNBLFVBQUdBLE9BQU8wQyxpQkFBUCxPQUE4QixPQUFqQztBQUNDMUMsaUJBQVMsT0FBVDtBQUhGO0FBQUE7QUFLQ0EsZUFBU21MLFFBQVF2VSxHQUFSLENBQVksc0JBQVosQ0FBVDtBQ3FHRTs7QURuR0gsV0FBT2tLLFFBQVFDLEVBQVIsQ0FBVyxzQ0FBWCxFQUFtRDtBQUFDNGdCLGdCQUFVQTtBQUFYLEtBQW5ELEVBQXlFM2hCLE1BQXpFLENBQVA7QUF6U0Q7QUEyU0E0aEIsYUFBVyxVQUFDbEIsV0FBRCxFQUFjbUIsT0FBZDtBQUNWLFFBQUF0bEIsR0FBQSxFQUFBa0csSUFBQTtBQUFBLFlBQUFsRyxNQUFBSyxFQUFBdWMsSUFBQSxFQUFBMVcsT0FBQXpHLEdBQUFrZCxTQUFBLENBQUFoZCxPQUFBLENBQUF3a0IsV0FBQTtBQ3dHSWhsQixjQUFRO0FBQ04rSixnQkFBUTtBQURGO0FEeEdaLFdDMkdTLElEM0dULEdDMkdnQmhELEtBQUtnRCxNRDNHckIsR0MyRzhCLEtBQUssQ0QzR25DLEVDMkdzQyxVQUFTa0MsS0FBVCxFQUFnQjtBQUNsRCxhQUFPQSxNQUFNeEwsR0FBTixLQUFjMGxCLE9BQXJCO0FBQ0QsS0Q3R0gsTUM2R1MsSUQ3R1QsR0M2R2dCdGxCLElEM0diM0ssSUFGSCxHQUVHLE1BRkg7QUE1U0Q7QUFBQSxDQUREOztBQWlUQSxJQUFHZ0ssT0FBT0MsUUFBVjtBQUNDbkIsaUJBQWVvQyxPQUFmLENBQXVCZ2hCLFVBQXZCLEdBQW9DLFVBQUM1ZCxJQUFEO0FBQ25DLFFBQUFELFNBQUE7O0FBQUEsUUFBR0MsSUFBSDtBQUNDRCxrQkFBWTFCLFNBQVNxRCxRQUFULEdBQW9CME8sSUFBcEIsQ0FBeUJ0UyxRQUF6QixDQUFrQ0QsV0FBbEMsQ0FBOENrQyxTQUExRDtBQUNBLGFBQU96Qyx5QkFBeUJ5RCxVQUF6QixDQUFvQ2YsSUFBcEMsRUFBMENELFNBQTFDLENBQVA7QUMrR0U7QURsSGdDLEdBQXBDOztBQUtBdkYsaUJBQWVvQyxPQUFmLENBQXVCNFgsRUFBdkIsR0FBNEIsVUFBQ3RpQixHQUFEO0FBQzNCLFFBQUE0TixNQUFBO0FBQUFBLGFBQVN6QixTQUFTcUQsUUFBVCxHQUFvQjBPLElBQXBCLENBQXlCdFMsUUFBekIsQ0FBa0NELFdBQWxDLENBQThDaUMsTUFBdkQ7QUFDQSxXQUFPYyxRQUFRQyxFQUFSLENBQVczTyxHQUFYLEVBQWdCLEVBQWhCLEVBQW9CNE4sTUFBcEIsQ0FBUDtBQUYyQixHQUE1Qjs7QUFJQXRGLGlCQUFlb0MsT0FBZixDQUF1QnFoQixnQkFBdkIsR0FBMEMsVUFBQ0MsUUFBRDtBQUN6QyxXQUFPLEtBQVA7QUFEeUMsR0FBMUM7QUNtSEE7O0FEaEhEMWpCLGVBQWVpWCxNQUFmLEdBQ0M7QUFBQSw4QkFBNEIsVUFBQ0MsS0FBRCxFQUFRNVQsUUFBUjtBQUMzQixRQUFBZ2YsU0FBQSxFQUFBcFMsVUFBQTtBQUFBZ0gsVUFBTWtRLGVBQU47O0FBQ0EsUUFBR2xRLE1BQU1FLGFBQU4sQ0FBb0JDLE9BQXBCLENBQTRCZ1EsT0FBNUIsR0FBc0MsQ0FBdEMsS0FBMkMsQ0FBOUM7QUFDQ25RLFlBQU1FLGFBQU4sQ0FBb0JDLE9BQXBCLENBQTRCZ1EsT0FBNUIsR0FBc0MsQ0FBdEM7QUFDQXJWLFFBQUUsR0FBRixFQUFNa0YsTUFBTUUsYUFBWixFQUEyQjhMLFFBQTNCLENBQW9DLFNBQXBDO0FBQ0FoVCxtQkFBYU8sUUFBUXZVLEdBQVIsQ0FBWSxZQUFaLENBQWI7QUFDQW9tQixrQkFBWXBMLE1BQU1rRixNQUFOLENBQWEvRSxPQUFiLENBQXFCc0IsT0FBakM7QUFFQTNHLFFBQUUsTUFBRixFQUFVa1IsUUFBVixDQUFtQixTQUFuQjtBQUNBaGlCLGFBQU9uUixJQUFQLENBQVksV0FBWixFQUF5Qm1nQixVQUF6QixFQUFxQ29TLFNBQXJDLEVBQWdELFVBQUNnRixHQUFELEVBQU1odUIsTUFBTjtBQUMvQzBZLFVBQUUsTUFBRixFQUFVdVYsV0FBVixDQUFzQixTQUF0Qjs7QUFDQSxZQUFHRCxHQUFIO0FBQ0M1SixpQkFBTzFYLEtBQVAsQ0FBYXNoQixHQUFiO0FBQ0FwUSxnQkFBTUUsYUFBTixDQUFvQkMsT0FBcEIsQ0FBNEJnUSxPQUE1QixHQUFzQyxDQUF0QztBQUNBclYsWUFBRSxHQUFGLEVBQU1rRixNQUFNRSxhQUFaLEVBQTJCbVEsV0FBM0IsQ0FBdUMsU0FBdkM7QUNtSEk7O0FEbEhMLFlBQUdqdUIsV0FBVSxJQUFiO0FBQ0Nva0IsaUJBQU84SixPQUFQLENBQWVwaEIsUUFBUUMsRUFBUixDQUFXLG1CQUFYLENBQWY7O0FBQ0EsY0FBRzJMLEVBQUUsOEJBQUYsRUFBa0NyakIsTUFBckM7QUFDQzJsQixrQkFBTUosSUFBTixDQUFXLDZCQUFYO0FBSEY7QUN3SEs7QUQ5SE47QUNnSUU7QUR6SUo7QUFzQkEsK0RBQTZELFVBQUNnRCxLQUFELEVBQVE1VCxRQUFSO0FBQzVELFFBQUFnZixTQUFBLEVBQUFwUyxVQUFBO0FBQUFBLGlCQUFhTyxRQUFRdlUsR0FBUixDQUFZLFlBQVosQ0FBYjtBQUNBb21CLGdCQUFZcEwsTUFBTWtGLE1BQU4sQ0FBYS9FLE9BQWIsQ0FBcUJzQixPQUFqQztBQUVBM0csTUFBRSxNQUFGLEVBQVVrUixRQUFWLENBQW1CLFNBQW5CO0FBQ0FoaUIsV0FBT25SLElBQVAsQ0FBWSxXQUFaLEVBQXlCbWdCLFVBQXpCLEVBQXFDb1MsU0FBckMsRUFBZ0QsVUFBQ2dGLEdBQUQsRUFBTWh1QixNQUFOO0FBQy9DMFksUUFBRSxNQUFGLEVBQVV1VixXQUFWLENBQXNCLFNBQXRCOztBQUNBLFVBQUdELEdBQUg7QUFDQzVKLGVBQU8xWCxLQUFQLENBQWFzaEIsR0FBYjtBQ3NIRzs7QURySEosVUFBR2h1QixXQUFVLElBQWI7QUFDQ29rQixlQUFPOEosT0FBUCxDQUFlcGhCLFFBQVFDLEVBQVIsQ0FBVyxtQkFBWCxDQUFmO0FBQ0FpTyxjQUFNSixJQUFOLENBQVcsNkJBQVg7QUN1SEc7QUQ3SEw7QUEzQkQ7QUFxQ0EsOENBQTRDLFVBQUNnRCxLQUFELEVBQVE1VCxRQUFSO0FBRTNDLFNBQU8wTyxFQUFFa0YsTUFBTWtGLE1BQVIsRUFBZ0JxTCxPQUFoQixDQUF3QixZQUF4QixFQUFzQzk0QixNQUE3QztBQ3NISSxhRHJISDJsQixNQUFNQyxJQUFOLENBQVcsNkJBQVgsRUFBMEMsSUFBMUMsQ0NxSEc7QUFDRDtBRDlKSjtBQTBDQSxnREFBOEMsVUFBQzJDLEtBQUQsRUFBUTVULFFBQVI7QUFFN0MsU0FBTzBPLEVBQUVrRixNQUFNa0YsTUFBUixFQUFnQnFMLE9BQWhCLENBQXdCLFlBQXhCLEVBQXNDOTRCLE1BQTdDO0FDc0hJLGFEckhIMmxCLE1BQU1DLElBQU4sQ0FBVyw2QkFBWCxFQUEwQyxJQUExQyxDQ3FIRztBQUNEO0FEbktKO0FBK0NBLHdHQUFzRyxVQUFDMkMsS0FBRCxFQUFRNVQsUUFBUjtBQUVyRyxRQUFBekIsR0FBQSxFQUFBOFYsTUFBQTs7QUFBQSxRQUFHelMsUUFBUXdJLFFBQVIsRUFBSDtBQUNDaUssZUFBQSxDQUFBOVYsTUFBQXFWLE1BQUFrRixNQUFBLENBQUEvRSxPQUFBLFlBQUF4VixJQUErQjZsQixjQUEvQixHQUErQixNQUEvQjtBQ3VIRyxhRHRISEMsUUFBUUMsaUJBQVIsQ0FBMEIsT0FBMUIsRUFBbUNqUSxNQUFuQyxDQ3NIRztBQUNEO0FEMUtKO0FBcURBLCtDQUE2QyxVQUFDVCxLQUFELEVBQVE1VCxRQUFSO0FBSTVDLFNBQU8wTyxFQUFFa0YsTUFBTWtGLE1BQVIsRUFBZ0JxTCxPQUFoQixDQUF3QixZQUF4QixFQUFzQzk0QixNQUE3QztBQUNDdW9CLFlBQU1rUSxlQUFOO0FBQ0FsUSxZQUFNZ0YsY0FBTjtBQUNBLGFBQU8sS0FBUDtBQ3FIRTtBRGpMSjtBQThEQSxvRUFBa0UsVUFBQ2hGLEtBQUQsRUFBUTVULFFBQVI7QUFDakUsUUFBQWdmLFNBQUEsRUFBQXBTLFVBQUEsRUFBQWlYLE9BQUE7QUFBQWpYLGlCQUFhTyxRQUFRdlUsR0FBUixDQUFZLFlBQVosQ0FBYjtBQUNBb21CLGdCQUFZcEwsTUFBTWtGLE1BQU4sQ0FBYS9FLE9BQWIsQ0FBcUJzQixPQUFqQztBQUNBd08sY0FBVWpRLE1BQU1rRixNQUFOLENBQWEvRSxPQUFiLENBQXFCcEssS0FBL0I7QUFFQStFLE1BQUUsTUFBRixFQUFVa1IsUUFBVixDQUFtQixTQUFuQjtBQUNBaGlCLFdBQU9uUixJQUFQLENBQVksZ0JBQVosRUFBOEJtZ0IsVUFBOUIsRUFBMENpWCxPQUExQyxFQUFtRDdFLFNBQW5ELEVBQThELFVBQUNnRixHQUFELEVBQU1odUIsTUFBTjtBQUM3RDBZLFFBQUUsTUFBRixFQUFVdVYsV0FBVixDQUFzQixTQUF0Qjs7QUFDQSxVQUFHRCxHQUFIO0FBQ0M1SixlQUFPMVgsS0FBUCxDQUFhSSxRQUFRQyxFQUFSLENBQVdpaEIsSUFBSTNKLE1BQWYsQ0FBYjtBQ3NIRzs7QURySEosVUFBR3JrQixXQUFVLElBQWI7QUFDQ29rQixlQUFPOEosT0FBUCxDQUFlcGhCLFFBQVFDLEVBQVIsQ0FBVyx5Q0FBWCxDQUFmO0FBQ0FpTyxjQUFNSixJQUFOLENBQVcsNkJBQVg7QUN1SEc7QUQ3SEw7QUFwRUQ7QUE4RUEsbUVBQWlFLFVBQUNnRCxLQUFELEVBQVE1VCxRQUFSO0FBQ2hFLFFBQUF1aEIsZ0JBQUEsRUFBQWdELGFBQUE7QUFBQUEsb0JBQWdCM1EsTUFBTWtGLE1BQU4sQ0FBYS9FLE9BQWIsQ0FBcUJ5USxZQUFyQztBQUNBakQsdUJBQW1CM04sTUFBTWtGLE1BQU4sQ0FBYS9FLE9BQWIsQ0FBcUIwUSxlQUF4QztBQ3dIRSxXRHZIRjdpQixRQUFRaVgsVUFBUixDQUFtQmpYLFFBQVFDLFdBQVIsQ0FBb0Isb0JBQW9CMGlCLGFBQXBCLEdBQW9DLGlCQUFwQyxHQUF3RGhELGdCQUE1RSxDQUFuQixDQ3VIRTtBRHhNSDtBQW1GQSw2QkFBNEIsVUFBQzNOLEtBQUQsRUFBUTVULFFBQVI7QUFDM0JBLGFBQVM0Z0IsVUFBVCxDQUFvQjVNLEdBQXBCLENBQXdCLENBQUNoVSxTQUFTNGdCLFVBQVQsQ0FBb0Job0IsR0FBcEIsRUFBekI7O0FBQ0EsU0FBT2dKLFFBQVFpZ0IsY0FBUixFQUFQO0FDd0hJLGFEdkhINkMsUUFBUUMsVUFBUixDQUFtQjtBQ3dIZCxlRHRISmpXLEVBQUUsNENBQUYsRUFBZ0RrVyxFQUFoRCxDQUFtRCxTQUFuRCxFQUE4RDtBQ3VIeEQsaUJEdEhMbFcsRUFBRSxhQUFGLEVBQWlCbVcsU0FBakIsQ0FBMkIsR0FBM0IsQ0NzSEs7QUR2SE4sVUNzSEk7QUR4SEwsUUN1SEc7QUFLRDtBRGxOSjtBQTJGQSwwQkFBeUIsVUFBQ2pSLEtBQUQsRUFBUTVULFFBQVI7QUMwSHRCLFdEeEhGQSxTQUFTNGdCLFVBQVQsQ0FBb0I1TSxHQUFwQixDQUF3QixDQUFDaFUsU0FBUzRnQixVQUFULENBQW9CaG9CLEdBQXBCLEVBQXpCLENDd0hFO0FEck5IO0FBK0ZBLHdCQUF1QixVQUFDZ2IsS0FBRCxFQUFRNVQsUUFBUjtBQUd0QixRQUFBZ2YsU0FBQSxFQUFBOEYsWUFBQSxFQUFBbFksVUFBQSxFQUFBbVksYUFBQSxFQUFBbEIsT0FBQTtBQUFBalgsaUJBQWFPLFFBQVF2VSxHQUFSLENBQVksWUFBWixDQUFiO0FBQ0FvbUIsZ0JBQVlwTCxNQUFNa0YsTUFBTixDQUFhL0UsT0FBYixDQUFxQnNCLE9BQWpDO0FBQ0F3TyxjQUFValEsTUFBTWtGLE1BQU4sQ0FBYS9FLE9BQWIsQ0FBcUJwSyxLQUEvQjtBQUNBb2Isb0JBQWdCclcsRUFBRSxnQkFBRixFQUFvQnpELEdBQXBCLEVBQWhCO0FBQ0E2WixtQkFBZWxWLFNBQVMwSyxhQUFULENBQXVCLGFBQXZCLEVBQXNDLG9CQUF0QyxDQUFmO0FBRUE1TCxNQUFFLE1BQUYsRUFBVWtSLFFBQVYsQ0FBbUIsU0FBbkI7QUN1SEUsV0R0SEZoaUIsT0FBT25SLElBQVAsQ0FBWSxxQkFBWixFQUFtQ21nQixVQUFuQyxFQUErQ2lYLE9BQS9DLEVBQXdEN0UsU0FBeEQsRUFBbUUrRixhQUFuRSxFQUFrRkQsWUFBbEYsRUFBZ0csVUFBQ2QsR0FBRCxFQUFNaHVCLE1BQU47QUFDL0YwWSxRQUFFLE1BQUYsRUFBVXVWLFdBQVYsQ0FBc0IsU0FBdEI7O0FBQ0EsVUFBR0QsR0FBSDtBQUNDNUosZUFBTzFYLEtBQVAsQ0FBYUksUUFBUUMsRUFBUixDQUFXaWhCLElBQUkzSixNQUFmLENBQWI7QUN1SEc7O0FEdEhKLFVBQUdya0IsV0FBVSxJQUFiO0FBQ0Nva0IsZUFBTzhKLE9BQVAsQ0FBZWp4QixFQUFFLHlDQUFGLENBQWY7QUFDQStkLGNBQU1KLElBQU4sQ0FBVyw2QkFBWDtBQ3dIRztBRDlITCxNQ3NIRTtBRC9OSDtBQWtIQSx1RUFBcUUsVUFBQ2dELEtBQUQsRUFBUTVULFFBQVI7QUFDcEVnUixVQUFNZ1UsYUFBTixHQUFzQixJQUF0QjtBQ3lIRSxXRHhIRmhVLE1BQU1DLElBQU4sQ0FBVyx5QkFBWCxDQ3dIRTtBRDVPSDtBQUFBLENBREQsQzs7Ozs7Ozs7Ozs7O0FFOVRBblUsaUJBQWlCZ0MsT0FBakIsR0FDQztBQUFBbW1CLHVCQUFxQjtBQUNwQixRQUFBdlgsR0FBQTs7QUFBQSxRQUFHOVAsT0FBTzBILFFBQVY7QUFDQ29JLFlBQU1ySSxnQkFBZ0JrSCxXQUFoQixFQUFOO0FBREQ7QUFHQ21CLFlBQU0sS0FBSzlKLFFBQVg7QUNFRTs7QURESCxTQUFBOEosT0FBQSxPQUFHQSxJQUFLbkUsaUJBQVIsR0FBUSxNQUFSLEtBQTZCM0ssRUFBRWpTLE9BQUYsQ0FBQStnQixPQUFBLE9BQVVBLElBQUtuRSxpQkFBZixHQUFlLE1BQWYsQ0FBN0I7QUFDQyxVQUFHdkwsR0FBR2tkLFNBQUgsQ0FBYUMsSUFBYixDQUFrQjtBQUFDaGQsYUFBSztBQUFDcWUsZUFBSzlPLElBQUluRTtBQUFWO0FBQU4sT0FBbEIsRUFBdUQ7QUFBQzdMLGdCQUFRO0FBQUMwSCxpQkFBTyxDQUFSO0FBQVd4UixnQkFBTTtBQUFqQjtBQUFULE9BQXZELEVBQXNGd25CLEtBQXRGLEtBQWdHLENBQW5HO0FBQ0MsZUFBTyxJQUFQO0FDWUc7O0FEWEosYUFBTyxLQUFQO0FBSEQ7QUFLQyxhQUFPLEtBQVA7QUNhRTtBRHZCSjtBQVlBOEosb0JBQWtCO0FBQ2pCLFFBQUF4WCxHQUFBOztBQUFBLFFBQUc5UCxPQUFPMEgsUUFBVjtBQUNDb0ksWUFBTXJJLGdCQUFnQmtILFdBQWhCLEVBQU47QUFERDtBQUdDbUIsWUFBTSxLQUFLOUosUUFBWDtBQ2VFOztBRGRILFNBQUE4SixPQUFBLE9BQUdBLElBQUtuRSxpQkFBUixHQUFRLE1BQVIsS0FBNkIzSyxFQUFFalMsT0FBRixDQUFBK2dCLE9BQUEsT0FBVUEsSUFBS25FLGlCQUFmLEdBQWUsTUFBZixDQUE3QjtBQUNDLGFBQU92TCxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCO0FBQUNoZCxhQUFLO0FBQUNxZSxlQUFLOU8sSUFBSW5FO0FBQVY7QUFBTixPQUFsQixFQUF1RDtBQUFDN0wsZ0JBQVE7QUFBQzBILGlCQUFPLENBQVI7QUFBV3hSLGdCQUFNO0FBQWpCO0FBQVQsT0FBdkQsRUFBc0Y2cEIsS0FBdEYsRUFBUDtBQ3lCRTtBRDNDSjtBQW9CQTBILHVCQUFxQixVQUFDelgsR0FBRDtBQUVwQixRQUFBblUsUUFBQTs7QUFBQSxRQUFHcUUsT0FBTzBILFFBQVAsS0FBb0IxRCxRQUFRd0ksUUFBUixNQUFzQnhJLFFBQVF3akIsU0FBUixFQUExQyxDQUFIO0FBQ0MsYUFBTyxFQUFQO0FDMEJFOztBRHhCSDdyQixlQUFXLEtBQVg7O0FBRUEsUUFBR3FFLE9BQU9DLFFBQVY7QUFDQ3RFLGlCQUFXLEtBQUtBLFFBQWhCO0FDeUJFOztBRHhCSCxRQUFHQSxRQUFIO0FBQ0MsYUFBT3FFLE9BQU9pRSxXQUFQLENBQW1CLG9CQUFrQjZMLElBQUl0SSxLQUF0QixHQUE0QixpQkFBNUIsR0FBZ0RzSSxJQUFJdlAsR0FBcEQsR0FBMEQsZ0JBQTdFLENBQVA7QUFERDtBQUdDLGFBQU95RCxRQUFRQyxXQUFSLENBQW9CLG9CQUFrQjZMLElBQUl0SSxLQUF0QixHQUE0QixpQkFBNUIsR0FBZ0RzSSxJQUFJdlAsR0FBcEQsR0FBMEQsZ0JBQTlFLENBQVA7QUMwQkU7QUQxREo7QUFrQ0F1WSxNQUFJLFVBQUN0aUIsR0FBRDtBQUNILFFBQUE0TixNQUFBOztBQUFBLFFBQUdwRSxPQUFPMEgsUUFBVjtBQUNDLGFBQU94QyxRQUFRQyxFQUFSLENBQVczTyxHQUFYLENBQVA7QUFERDtBQUdDNE4sZUFBU3pCLFNBQVNxRCxRQUFULEdBQW9CME8sSUFBcEIsQ0FBeUJ0UyxRQUF6QixDQUFrQ0QsV0FBbEMsQ0FBOENpQyxNQUF2RDtBQUNBLGFBQU9jLFFBQVFDLEVBQVIsQ0FBVzNPLEdBQVgsRUFBZ0IsRUFBaEIsRUFBb0I0TixNQUFwQixDQUFQO0FDNEJFO0FEbkVKO0FBeUNBcWpCLGVBQWE7QUFDWixRQUFBdEssWUFBQTs7QUFBQSxRQUFHLENBQUNuZCxPQUFPMEgsUUFBWDtBQUNDLGFBQU8sS0FBUDtBQUREO0FBR0MsVUFBRzZILFFBQVF2VSxHQUFSLENBQVksS0FBWixNQUFzQixPQUF0QixJQUFpQ3VVLFFBQVF2VSxHQUFSLENBQVksS0FBWixNQUFzQixPQUExRDtBQUNDbWlCLHVCQUFldk0sZ0JBQWdCa00sY0FBaEIsRUFBZjs7QUFDQSxZQUFHSyxZQUFIO0FBQ0MsY0FBSUEsYUFBYVUsb0JBQWIsSUFBcUNWLGFBQWFpQixzQkFBYixLQUF1QyxJQUE1RSxJQUFvRmpCLGFBQWFpQixzQkFBYixLQUF1QyxNQUEvSDtBQUNDLG1CQUFPLElBQVA7QUFGRjtBQUZEO0FBSEQ7QUN3Q0c7QURsRko7QUFBQSxDQURELEM7Ozs7Ozs7Ozs7OztBRUFBamYsZUFBZStCLE9BQWYsR0FDQztBQUFBd21CLHNCQUFvQjtBQUNuQixRQUFBNVgsR0FBQTs7QUFBQSxRQUFHOVAsT0FBTzBILFFBQVY7QUFDQ29JLFlBQU1ySSxnQkFBZ0JrSCxXQUFoQixFQUFOO0FBREQ7QUFHQ21CLFlBQU0sS0FBSzlKLFFBQVg7QUNFRTs7QURESCxRQUFHLENBQUM4SixHQUFKO0FBQ0MsYUFBTyxLQUFQO0FDR0U7O0FERkgsV0FBTyxDQUFDOU8sRUFBRTRMLE9BQUYsQ0FBVWtELElBQUl6RCxVQUFkLENBQVI7QUFQRDtBQUFBLENBREQsQzs7Ozs7Ozs7Ozs7O0FFQUEsSUFBQXNiLFdBQUE7QUFBQUEsY0FFQztBQUFBQyxrQkFBZ0IsVUFBQ3Y2QixHQUFEO0FBQ2YsUUFBQXc2QixPQUFBO0FBQUFBLGNBQWFDLDRCQUErQkEsMEJBQTBCQyxvQkFBekQsR0FBbUYsRUFBaEc7O0FBQ0EsUUFBR0YsT0FBSDtBQUNDeDZCLFlBQU13NkIsVUFBVXg2QixHQUFoQjtBQ0dFOztBREZILFdBQU9BLEdBQVA7QUFKRDtBQU1BMjZCLGlCQUFlLFVBQUM1dUIsR0FBRCxFQUFNNnVCLFFBQU4sRUFBZ0JuZixJQUFoQjtBQUNkMVAsUUFBSTh1QixVQUFKLEdBQWlCRCxRQUFqQjtBQ0lFLFdESEY3dUIsSUFBSTVILEdBQUosQ0FBUXNYLElBQVIsQ0NHRTtBRFhIO0FBVUFxZiwwQkFBd0IsVUFBQy91QixHQUFEO0FBQ3ZCLFdBQU8sS0FBQzR1QixhQUFELENBQWU1dUIsR0FBZixFQUFvQixHQUFwQixFQUF5Qix3Q0FBekIsQ0FBUDtBQVhEO0FBYUFndkIsZ0NBQThCLFVBQUNodkIsR0FBRDtBQUM3QixXQUFPLEtBQUM0dUIsYUFBRCxDQUFlNXVCLEdBQWYsRUFBb0IsR0FBcEIsRUFBeUIsNkJBQXpCLENBQVA7QUFkRDtBQWdCQWl2QixvQkFBa0IsVUFBQ0MsR0FBRCxFQUFNbHZCLEdBQU4sRUFBVzdHLElBQVg7QUFDakIsUUFBQWcyQixTQUFBLEVBQUEzM0IsS0FBQSxFQUFBNHBCLEtBQUEsRUFBQW50QixHQUFBO0FBQUF1RCxZQUFRMDNCLElBQUkxM0IsS0FBWjtBQUNBdkQsVUFBTXVELE1BQU12RCxHQUFaOztBQUVBLFFBQUdBLEdBQUg7QUFDQ0EsWUFBTXlGLG1CQUFtQnpGLEdBQW5CLENBQU47QUFERDtBQUdDczZCLGtCQUFZUSxzQkFBWixDQUFtQy91QixHQUFuQztBQ0lFOztBREZIb2hCLFlBQVE1cEIsTUFBTTRwQixLQUFkOztBQUNBLFFBQUdBLEtBQUg7QUFDQ0EsY0FBUTFuQixtQkFBbUIwbkIsS0FBbkIsQ0FBUjtBQUREO0FBR0NBLGNBQVEsa0JBQVI7QUNJRTs7QURGSCtOLGdCQUFZLEVBQVo7QUFFQSxXQUFPLEtBQUNQLGFBQUQsQ0FBZTV1QixHQUFmLEVBQW9CLEdBQXBCLEVBQXlCLHkwQkFzQ3BCb2hCLEtBdENvQixHQXNDZCw2RUF0Q2MsR0F1QzZCLEtBQUNvTixjQUFELENBQWdCLHNDQUFoQixDQXZDN0IsR0F1Q3FGLHVDQXZDckYsR0F3Q0EsS0FBQ0EsY0FBRCxDQUFnQix5QkFBaEIsQ0F4Q0EsR0F3QzJDLDZNQXhDM0MsR0E0Q3NCLEtBQUNBLGNBQUQsQ0FBZ0Isc0NBQWhCLENBNUN0QixHQTRDOEUsK0RBNUM5RSxHQTZDc0IsS0FBQ0EsY0FBRCxDQUFnQixzQ0FBaEIsQ0E3Q3RCLEdBNkM4RSwrREE3QzlFLEdBOENzQixLQUFDQSxjQUFELENBQWdCLHNDQUFoQixDQTlDdEIsR0E4QzhFLCtEQTlDOUUsR0ErQ3NCLEtBQUNBLGNBQUQsQ0FBZ0Isc0NBQWhCLENBL0N0QixHQStDOEUsaUVBL0M5RSxHQWdEd0IsS0FBQ0EsY0FBRCxDQUFnQix3Q0FBaEIsQ0FoRHhCLEdBZ0RrRixpRUFoRGxGLEdBaUR3QixLQUFDQSxjQUFELENBQWdCLHdDQUFoQixDQWpEeEIsR0FpRGtGLGlFQWpEbEYsR0FrRHdCLEtBQUNBLGNBQUQsQ0FBZ0Isd0NBQWhCLENBbER4QixHQWtEa0YsaUVBbERsRixHQW1Ed0IsS0FBQ0EsY0FBRCxDQUFnQix3Q0FBaEIsQ0FuRHhCLEdBbURrRixpRUFuRGxGLEdBb0R3QixLQUFDQSxjQUFELENBQWdCLHdDQUFoQixDQXBEeEIsR0FvRGtGLDZRQXBEbEYsR0F3RDZCLEtBQUNBLGNBQUQsQ0FBZ0IsNkJBQWhCLENBeEQ3QixHQXdENEUsc0VBeEQ1RSxHQXlEMkIsS0FBQ0EsY0FBRCxDQUFnQiw2QkFBaEIsQ0F6RDNCLEdBeUQwRSxzRUF6RDFFLEdBMEQyQixLQUFDQSxjQUFELENBQWdCLDZCQUFoQixDQTFEM0IsR0EwRDBFLHNFQTFEMUUsR0EyRDJCLEtBQUNBLGNBQUQsQ0FBZ0IsNkJBQWhCLENBM0QzQixHQTJEMEUsd0VBM0QxRSxHQTRENkIsS0FBQ0EsY0FBRCxDQUFnQiwrQkFBaEIsQ0E1RDdCLEdBNEQ4RSw0Q0E1RDlFLEdBNkRLLEtBQUNBLGNBQUQsQ0FBZ0IsdUJBQWhCLENBN0RMLEdBNkQ4QyxvREE3RDlDLEdBOERhLEtBQUNBLGNBQUQsQ0FBZ0Isd0NBQWhCLENBOURiLEdBOER1RSxzSEE5RHZFLEdBZ0VtQixLQUFDQSxjQUFELENBQWdCLDhCQUFoQixDQWhFbkIsR0FnRW1FLHVEQWhFbkUsR0FpRWdCLEtBQUNBLGNBQUQsQ0FBZ0IsNkJBQWhCLENBakVoQixHQWlFK0Qsb0RBakUvRCxHQWtFYSxLQUFDQSxjQUFELENBQWdCLHVCQUFoQixDQWxFYixHQWtFc0QsK0NBbEV0RCxHQW1FUSxLQUFDQSxjQUFELENBQWdCLDBCQUFoQixDQW5FUixHQW1Fb0Qsb0dBbkVwRCxHQXVFRlcsU0F2RUUsR0F1RVEsc1FBdkVSLEdBeUVTLEtBQUNYLGNBQUQsQ0FBZ0Isa0NBQWhCLENBekVULEdBeUU2RCxrckJBekV0RixDQUFQO0FBakNEO0FBQUEsQ0FGRDtBQTBJQVksV0FBV0MsR0FBWCxDQUFlLEtBQWYsRUFBc0IsaUNBQXRCLEVBQXlELFVBQUNILEdBQUQsRUFBTWx2QixHQUFOLEVBQVdzdkIsSUFBWDtBQ2hHdkQsU0RpR0RmLFlBQVlVLGdCQUFaLENBQTZCQyxHQUE3QixFQUFrQ2x2QixHQUFsQyxDQ2pHQztBRGdHRixHOzs7Ozs7Ozs7OztBRTFJQW92QixVQUFVLENBQUNDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLDZCQUF2QixFQUFzRCxVQUFTSCxHQUFULEVBQWNsdkIsR0FBZCxFQUFtQnN2QixJQUFuQixFQUF5QjtBQUM5RSxNQUNDQyxTQUFTLEdBQUdMLEdBQUcsQ0FBQzEzQixLQUFKLENBQVUrM0IsU0FEdkI7QUFBQSxNQUVDQyxPQUFPLEdBQUdOLEdBQUcsQ0FBQzEzQixLQUFKLENBQVVnNEIsT0FGckI7QUFBQSxNQUdDOWpCLEtBQUssR0FBRyxFQUhUOztBQUtBLE1BQUksQ0FBQzZqQixTQUFELElBQWMsQ0FBQ0MsT0FBbkIsRUFBNEI7QUFDM0JKLGNBQVUsQ0FBQ0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFVBQUksRUFBRSxHQURvQjtBQUUxQjNXLFVBQUksRUFBRTtBQUNMLGtCQUFVO0FBREw7QUFGb0IsS0FBM0I7QUFNQTs7QUFFRCxNQUNDNFosSUFBSSxHQUFHd2YsR0FBRyxDQUFDeGYsSUFEWjtBQUFBLE1BRUNtVCxhQUFhLEdBQUcsRUFGakI7O0FBS0EsVUFBUTBNLFNBQVI7QUFDQyxTQUFLLGFBQUw7QUFDQyxVQUFJRyxjQUFjLEdBQUdoZ0IsSUFBSSxDQUFDZ2dCLGNBQTFCO0FBRUE3TSxtQkFBYSxHQUFHeFUsZUFBZSxDQUFDc2hCLFFBQWhCLENBQXlCSCxPQUF6QixFQUFrQ0UsY0FBbEMsQ0FBaEI7QUFDQTs7QUFDRCxTQUFLLGVBQUw7QUFDQyxVQUNDRSxXQUFXLEdBQUdsZ0IsSUFBSSxDQUFDa2dCLFdBRHBCO0FBQUEsVUFFQ0MsY0FBYyxHQUFHbmdCLElBQUksQ0FBQ21nQixjQUZ2QjtBQUdBLFVBQUlsTixTQUFTLEdBQUd0VSxlQUFlLENBQUN5aEIsT0FBaEIsQ0FBd0JOLE9BQXhCLEVBQWlDSSxXQUFqQyxDQUFoQjtBQUVBLFVBQUlqTixTQUFKLEVBQ0NFLGFBQWEsR0FBR3hVLGVBQWUsQ0FBQzBoQiwwQkFBaEIsQ0FBMkNQLE9BQTNDLEVBQW9EN00sU0FBUyxDQUFDcU4sYUFBOUQsRUFBNkVILGNBQTdFLENBQWhCO0FBQ0Q7O0FBQ0QsU0FBSyxRQUFMO0FBQ0MsVUFBSUksZ0JBQWdCLEdBQUd2Z0IsSUFBSSxDQUFDdWdCLGdCQUE1QjtBQUNBLFVBQUlBLGdCQUFKLEVBQ0NwTixhQUFhLEdBQUd4VSxlQUFlLENBQUM2aEIsZUFBaEIsQ0FBZ0NWLE9BQWhDLEVBQXlDUyxnQkFBekMsQ0FBaEI7QUFDRDs7QUFDRCxTQUFLLG1CQUFMO0FBQ0MsVUFBSUwsV0FBVyxHQUFHbGdCLElBQUksQ0FBQ2tnQixXQUF2QjtBQUNBLFVBQUlqTixTQUFTLEdBQUd0VSxlQUFlLENBQUN5aEIsT0FBaEIsQ0FBd0JOLE9BQXhCLEVBQWlDSSxXQUFqQyxDQUFoQjs7QUFDQSxVQUFJak4sU0FBUyxDQUFDd04sT0FBZCxFQUF1QjtBQUN0QnROLHFCQUFhLEdBQUd4VSxlQUFlLENBQUNzaEIsUUFBaEIsQ0FBeUJILE9BQXpCLEVBQWtDN00sU0FBUyxDQUFDd04sT0FBNUMsQ0FBaEI7QUFDQTs7QUFDRDs7QUFDRCxTQUFLLFdBQUw7QUFDQyxVQUFJUCxXQUFXLEdBQUdsZ0IsSUFBSSxDQUFDa2dCLFdBQXZCO0FBQ0EvTSxtQkFBYSxHQUFHeFUsZUFBZSxDQUFDc2hCLFFBQWhCLENBQXlCSCxPQUF6QixFQUFrQ0ksV0FBbEMsQ0FBaEI7QUFDQTs7QUFDRCxTQUFLLFdBQUw7QUFDQyxVQUNDUSxTQUFTLEdBQUcxZ0IsSUFBSSxDQUFDMGdCLFNBRGxCO0FBQUEsVUFFQ0MsY0FBYyxHQUFHM2dCLElBQUksQ0FBQzJnQixjQUZ2Qjs7QUFHQSxVQUFJRCxTQUFTLENBQUN6a0IsY0FBZCxFQUE4QjtBQUFFO0FBQy9Ca1gscUJBQWEsR0FBR3hVLGVBQWUsQ0FBQ3NoQixRQUFoQixDQUF5QkgsT0FBekIsRUFBa0NhLGNBQWxDLENBQWhCO0FBQ0EsT0FGRCxNQUVPO0FBQ054TixxQkFBYSxDQUFDaG1CLElBQWQsQ0FBbUJ3UixlQUFlLENBQUN5aEIsT0FBaEIsQ0FBd0JOLE9BQXhCLEVBQWlDYSxjQUFqQyxDQUFuQjtBQUNBOztBQUNEOztBQUNELFNBQUssVUFBTDtBQUNDLFVBQ0NDLElBREQ7QUFBQSxVQUVDQyxZQUZEO0FBQUEsVUFHQ0MsUUFBUSxHQUFHOWdCLElBQUksQ0FBQzhnQixRQUhqQjtBQUFBLFVBSUNDLGFBQWEsR0FBRy9nQixJQUFJLENBQUMrZ0IsYUFKdEI7O0FBS0EsVUFBSUEsYUFBSixFQUFtQjtBQUNsQixZQUFJRCxRQUFRLENBQUM3a0IsY0FBYixFQUE2QjtBQUFFO0FBQzlCMmtCLGNBQUksR0FBR2ppQixlQUFlLENBQUNxaUIsZ0JBQWhCLENBQWlDRCxhQUFqQyxDQUFQO0FBQ0FGLHNCQUFZLEdBQUdsaUIsZUFBZSxDQUFDc2lCLHlCQUFoQixDQUEwQ25CLE9BQTFDLEVBQW1EaUIsYUFBbkQsQ0FBZjtBQUNBLFNBSEQsTUFHTztBQUNOSCxjQUFJLEdBQUcsQ0FBQ2ppQixlQUFlLENBQUN1aUIsZUFBaEIsQ0FBZ0NILGFBQWhDLENBQUQsQ0FBUDtBQUNBRixzQkFBWSxHQUFHbGlCLGVBQWUsQ0FBQ3dpQix3QkFBaEIsQ0FBeUNyQixPQUF6QyxFQUFrRGlCLGFBQWxELENBQWY7QUFDQTs7QUFDRDVOLHFCQUFhLEdBQUd4VSxlQUFlLENBQUN5aUIscUJBQWhCLENBQXNDdEIsT0FBdEMsRUFBK0NlLFlBQS9DLENBQWhCO0FBRUFRLHFCQUFhLEdBQUcxaUIsZUFBZSxDQUFDeWlCLHFCQUFoQixDQUFzQ3RCLE9BQXRDLEVBQStDYyxJQUEvQyxDQUFoQjtBQUVBek4scUJBQWEsR0FBR0EsYUFBYSxDQUFDdGxCLE1BQWQsQ0FBcUJ3ekIsYUFBckIsQ0FBaEI7O0FBRUEsWUFBSSxDQUFDbE8sYUFBRCxJQUFrQkEsYUFBYSxDQUFDeHVCLE1BQWQsR0FBdUIsQ0FBN0MsRUFBZ0Q7QUFDL0NxWCxlQUFLLEdBQUcsZ0JBQVI7QUFDQTtBQUNELE9BakJELE1BaUJPO0FBQ05BLGFBQUssR0FBRyxtQkFBUjtBQUNBOztBQUVEOztBQUNELFNBQUssWUFBTDtBQUNDLFVBQUlzbEIsYUFBYSxHQUFHdGhCLElBQUksQ0FBQ3NoQixhQUF6QjtBQUNBLFVBQUlDLFdBQVcsR0FBRzVpQixlQUFlLENBQUNxaUIsZ0JBQWhCLENBQWlDTSxhQUFqQyxDQUFsQjtBQUNBLFVBQUlFLG1CQUFtQixHQUFHN2lCLGVBQWUsQ0FBQ3NpQix5QkFBaEIsQ0FBMENuQixPQUExQyxFQUFtRHdCLGFBQW5ELENBQTFCO0FBRUFuTyxtQkFBYSxHQUFHeFUsZUFBZSxDQUFDeWlCLHFCQUFoQixDQUFzQ3RCLE9BQXRDLEVBQStDeUIsV0FBL0MsQ0FBaEI7QUFDQXBPLG1CQUFhLEdBQUdBLGFBQWEsQ0FBQ3RsQixNQUFkLENBQXFCOFEsZUFBZSxDQUFDeWlCLHFCQUFoQixDQUFzQ3RCLE9BQXRDLEVBQStDMEIsbUJBQS9DLENBQXJCLENBQWhCO0FBQ0E7O0FBQ0QsU0FBSyxlQUFMO0FBQ0MsVUFDQ2QsU0FBUyxHQUFHMWdCLElBQUksQ0FBQzBnQixTQURsQjtBQUFBLFVBRUNDLGNBQWMsR0FBRzNnQixJQUFJLENBQUMyZ0IsY0FGdkI7QUFBQSxVQUdDYyxlQUFlLEdBQUd6aEIsSUFBSSxDQUFDeWhCLGVBSHhCOztBQUlBLFVBQUlkLGNBQUosRUFBb0I7QUFDbkIsWUFBSUQsU0FBUyxDQUFDemtCLGNBQWQsRUFBOEI7QUFBRTtBQUMvQmtYLHVCQUFhLEdBQUd4VSxlQUFlLENBQUMraUIsMkJBQWhCLENBQTRDNUIsT0FBNUMsRUFBcURhLGNBQXJELEVBQXFFYyxlQUFyRSxDQUFoQjtBQUNBLFNBRkQsTUFFTztBQUNOdE8sdUJBQWEsR0FBR3hVLGVBQWUsQ0FBQytpQiwyQkFBaEIsQ0FBNEM1QixPQUE1QyxFQUFxRCxDQUFDYSxjQUFELENBQXJELEVBQXVFYyxlQUF2RSxDQUFoQjtBQUNBOztBQUVELFlBQUksQ0FBQ3RPLGFBQUQsSUFBa0JBLGFBQWEsQ0FBQ3h1QixNQUFkLEdBQXVCLENBQTdDLEVBQWdEO0FBQy9DcVgsZUFBSyxHQUFHLGlCQUFSO0FBQ0E7QUFDRCxPQVZELE1BVU87QUFDTkEsYUFBSyxHQUFHLG1CQUFSO0FBQ0E7O0FBR0Q7O0FBQ0QsU0FBSyxjQUFMO0FBQ0MsVUFDQzhrQixRQUFRLEdBQUc5Z0IsSUFBSSxDQUFDOGdCLFFBRGpCO0FBQUEsVUFFQ0MsYUFBYSxHQUFHL2dCLElBQUksQ0FBQytnQixhQUZ0QjtBQUFBLFVBR0NVLGVBQWUsR0FBR3poQixJQUFJLENBQUN5aEIsZUFIeEI7O0FBS0EsVUFBSVYsYUFBSixFQUFtQjtBQUNsQixZQUFJRCxRQUFRLENBQUM3a0IsY0FBYixFQUE2QjtBQUFFO0FBQzlCa1gsdUJBQWEsR0FBR3hVLGVBQWUsQ0FBQzBoQiwwQkFBaEIsQ0FBMkNQLE9BQTNDLEVBQW9EaUIsYUFBcEQsRUFBbUVVLGVBQW5FLENBQWhCO0FBQ0EsU0FGRCxNQUVPO0FBQ050Tyx1QkFBYSxHQUFHeFUsZUFBZSxDQUFDMGhCLDBCQUFoQixDQUEyQ1AsT0FBM0MsRUFBb0QsQ0FBQ2lCLGFBQUQsQ0FBcEQsRUFBcUVVLGVBQXJFLENBQWhCO0FBQ0E7O0FBRUQsWUFBSSxDQUFDdE8sYUFBRCxJQUFrQkEsYUFBYSxDQUFDeHVCLE1BQWQsR0FBdUIsQ0FBN0MsRUFBZ0Q7QUFDL0NxWCxlQUFLLEdBQUcsaUJBQVI7QUFDQTtBQUNELE9BVkQsTUFVTztBQUNOQSxhQUFLLEdBQUcsbUJBQVI7QUFDQTs7QUFDRDs7QUFDRDtBQUNDO0FBdkhGOztBQTBIQSxNQUFJMU0sTUFBTSxHQUFHLEVBQWI7QUFFQTZqQixlQUFhLENBQUN4YixPQUFkLENBQXNCLFVBQVNncUIsRUFBVCxFQUFhO0FBQ2xDLFFBQUdBLEVBQUUsQ0FBQ0MsYUFBTixFQUFvQjtBQUNuQixVQUFJM1YsQ0FBQyxHQUFHO0FBQ1BsRyxVQUFFLEVBQUU0YixFQUFFLENBQUM1YixFQURBO0FBRVA3WSxZQUFJLEVBQUV5MEIsRUFBRSxDQUFDejBCO0FBRkYsT0FBUjtBQUlBb0MsWUFBTSxDQUFDbkMsSUFBUCxDQUFZOGUsQ0FBWjtBQUNBO0FBQ0QsR0FSRDtBQVVBeVQsWUFBVSxDQUFDSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQzFCeU0sUUFBSSxFQUFFLEdBRG9CO0FBRTFCM1csUUFBSSxFQUFFO0FBQ0wsdUJBQWlCdVksZUFBZSxDQUFDa2pCLFNBQWhCLENBQTBCdnlCLE1BQTFCLENBRFo7QUFFTCxlQUFTME07QUFGSjtBQUZvQixHQUEzQjtBQU9BLENBaktELEU7Ozs7Ozs7Ozs7O0FDQUEwakIsVUFBVSxDQUFDQyxHQUFYLENBQWUsTUFBZixFQUF1Qiw2QkFBdkIsRUFBc0QsVUFBVUgsR0FBVixFQUFlbHZCLEdBQWYsRUFBb0JzdkIsSUFBcEIsRUFBMEI7QUFDOUUsTUFDRWtDLE9BQU8sR0FBR3RDLEdBQUcsQ0FBQ3hmLElBQUosQ0FBUzhoQixPQURyQjtBQUFBLE1BRUVoQyxPQUFPLEdBQUdOLEdBQUcsQ0FBQzEzQixLQUFKLENBQVVnNEIsT0FGdEI7QUFBQSxNQUdFaUMsVUFBVSxHQUFHLEVBSGY7O0FBTUEsTUFBSSxDQUFDRCxPQUFELElBQVksQ0FBQ2hDLE9BQWpCLEVBQTBCO0FBQ3hCSixjQUFVLENBQUNLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDekJ5TSxVQUFJLEVBQUUsR0FEbUI7QUFFekIzVyxVQUFJLEVBQUU7QUFDSixrQkFBVTtBQUROO0FBRm1CLEtBQTNCO0FBTUQ7O0FBRUQyN0IsWUFBVSxHQUFHcGpCLGVBQWUsQ0FBQ3NoQixRQUFoQixDQUF5QkgsT0FBekIsRUFBa0NnQyxPQUFsQyxDQUFiO0FBRUFwQyxZQUFVLENBQUNLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDekJ5TSxRQUFJLEVBQUUsR0FEbUI7QUFFekIzVyxRQUFJLEVBQUU7QUFDSixvQkFBYzI3QjtBQURWO0FBRm1CLEdBQTNCO0FBTUQsQ0F4QkQsRTs7Ozs7Ozs7Ozs7QUNBQXJDLFVBQVUsQ0FBQ0MsR0FBWCxDQUFlLE1BQWYsRUFBdUIscUNBQXZCLEVBQThELFVBQVVILEdBQVYsRUFBZWx2QixHQUFmLEVBQW9Cc3ZCLElBQXBCLEVBQTBCO0FBQ3RGLE1BQ0VrQyxPQUFPLEdBQUd0QyxHQUFHLENBQUN4ZixJQUFKLENBQVM4aEIsT0FEckI7QUFBQSxNQUVFaEMsT0FBTyxHQUFHTixHQUFHLENBQUMxM0IsS0FBSixDQUFVZzRCLE9BRnRCO0FBQUEsTUFHRWlDLFVBQVUsR0FBRyxFQUhmOztBQU1BLE1BQUksQ0FBQ0QsT0FBRCxJQUFZLENBQUNoQyxPQUFqQixFQUEwQjtBQUN4QkosY0FBVSxDQUFDSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQ3pCeU0sVUFBSSxFQUFFLEdBRG1CO0FBRXpCM1csVUFBSSxFQUFFO0FBQ0osa0JBQVU7QUFETjtBQUZtQixLQUEzQjtBQU1EOztBQUVELE1BQUl1MkIsS0FBSyxHQUFHaGUsZUFBZSxDQUFDcWpCLG9CQUFoQixDQUFxQ2xDLE9BQXJDLEVBQThDZ0MsT0FBOUMsQ0FBWjtBQUVBcEMsWUFBVSxDQUFDSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQ3pCeU0sUUFBSSxFQUFFLEdBRG1CO0FBRXpCM1csUUFBSSxFQUFFO0FBQ0osb0JBQWN1MkI7QUFEVjtBQUZtQixHQUEzQjtBQU1ELENBeEJELEU7Ozs7Ozs7Ozs7O0FDQUErQyxVQUFVLENBQUNDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLG1DQUF2QixFQUE0RCxVQUFTSCxHQUFULEVBQWNsdkIsR0FBZCxFQUFtQnN2QixJQUFuQixFQUF5QjtBQUNwRixNQUNDNW9CLE1BQU0sR0FBR3dvQixHQUFHLENBQUN4ZixJQUFKLENBQVNoSixNQURuQjtBQUFBLE1BRUNpckIsV0FBVyxHQUFHekMsR0FBRyxDQUFDeGYsSUFBSixDQUFTaWlCLFdBRnhCO0FBQUEsTUFHQ0MsUUFBUSxHQUFHMUMsR0FBRyxDQUFDeGYsSUFBSixDQUFTa2lCLFFBSHJCO0FBQUEsTUFJQ2pQLFNBQVMsR0FBR3VNLEdBQUcsQ0FBQ3hmLElBQUosQ0FBU2lULFNBSnRCO0FBQUEsTUFNQzZNLE9BQU8sR0FBR04sR0FBRyxDQUFDMTNCLEtBQUosQ0FBVWc0QixPQU5yQjtBQUFBLE1BUUNpQyxVQUFVLEdBQUcsRUFSZDs7QUFVQSxNQUFJLENBQUMvcUIsTUFBRCxJQUFXLENBQUM4b0IsT0FBWixJQUF1QixDQUFDbUMsV0FBeEIsSUFBdUMsQ0FBQ0MsUUFBeEMsSUFBb0QsQ0FBQ2pQLFNBQXpELEVBQW9FO0FBQ25FeU0sY0FBVSxDQUFDSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQzFCeU0sVUFBSSxFQUFFLEdBRG9CO0FBRTFCM1csVUFBSSxFQUFFO0FBQ0wsa0JBQVU7QUFETDtBQUZvQixLQUEzQjtBQU1BO0FBQ0E7O0FBRUQrN0IsZ0JBQWMsR0FBR25aLFlBQVksQ0FBQ29aLG1CQUFiLENBQWlDcHJCLE1BQWpDLEVBQXlDaXJCLFdBQXpDLEVBQXNEQyxRQUF0RCxFQUFnRWpQLFNBQWhFLEVBQTJFNk0sT0FBM0UsQ0FBakI7QUFFQUosWUFBVSxDQUFDSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQzFCeU0sUUFBSSxFQUFFLEdBRG9CO0FBRTFCM1csUUFBSSxFQUFFO0FBQ0wsd0JBQWtCKzdCO0FBRGI7QUFGb0IsR0FBM0I7QUFNQSxDQTdCRCxFOzs7Ozs7Ozs7Ozs7QUNBQXpDLFdBQVdDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLDhCQUF2QixFQUF3RCxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDdkQsTUFBQS8wQixDQUFBLEVBQUFpVCxJQUFBLEVBQUE2UCxNQUFBOztBQUFBO0FBQ0NBLGFBQVM2UixJQUFJeGYsSUFBSixDQUFTMk4sTUFBbEI7O0FBRUEsUUFBRyxDQUFJQSxNQUFQO0FBQ0MrUixpQkFBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxjQUFNLEdBQU47QUFDQTNXLGNBQU07QUFDTCxvQkFBVTtBQURMO0FBRE4sT0FERDtBQ01FOztBREFIMFgsV0FBT2EsZ0JBQWdCK2QsY0FBaEIsQ0FBK0IvTyxNQUEvQixDQUFQO0FDRUUsV0RBRitSLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUFNO0FBQUMwWCxjQUFNQTtBQUFQO0FBRE4sS0FERCxDQ0FFO0FEWkgsV0FBQTlCLEtBQUE7QUFlTW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQ0tFLFdESkYzQyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBQ0Msd0JBQWMxM0IsRUFBRTIzQjtBQUFqQixTQUFEO0FBQVY7QUFETixLQURELENDSUU7QUFVRDtBRGhDSCxHOzs7Ozs7Ozs7Ozs7QUVBQTlDLFdBQVdDLEdBQVgsQ0FBZSxLQUFmLEVBQXNCLHVCQUF0QixFQUErQyxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDOUMsTUFBQTZDLFVBQUEsRUFBQUMsU0FBQSxFQUFBQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBNlMsS0FBQSxFQUFBbkcsS0FBQSxFQUFBc3JCLEdBQUEsRUFBQXZDLGFBQUEsRUFBQXdDLFNBQUEsRUFBQWg3QixLQUFBLEVBQUErUCxHQUFBLEVBQUF2SSxNQUFBLEVBQUF5ekIsS0FBQSxFQUFBQyxRQUFBLEVBQUFqQixVQUFBLEVBQUFrQixNQUFBLEVBQUFDLFdBQUEsRUFBQXBCLE9BQUEsRUFBQW5GLEtBQUE7O0FBQUE7QUFDQ2lHLHdCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsQ0FBcEI7QUFDQW1ELG1CQUFlQyxrQkFBa0JuckIsR0FBakM7QUFFQWlyQixnQkFBQSxFQUFBN3FCLE1BQUEybkIsSUFBQTEzQixLQUFBLFlBQUErUCxJQUF1QjZxQixTQUF2QixHQUF1QixNQUF2QixLQUFvQyxFQUFwQztBQUVBUSxrQkFBYztBQUFFRSxjQUFRVDtBQUFWLEtBQWQ7O0FBRUEsUUFBR0QsU0FBSDtBQUNDRyxZQUFNdnJCLEdBQUdncEIsYUFBSCxDQUFpQjlvQixPQUFqQixDQUF5QmtyQixTQUF6QixFQUFvQztBQUFFMXJCLGdCQUFRO0FBQUUwSCxpQkFBTTtBQUFSO0FBQVYsT0FBcEMsQ0FBTjs7QUFDQSxVQUFHLENBQUlta0IsR0FBUDtBQUNDLGNBQU0sSUFBSTNyQixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixzQkFBMUIsQ0FBTjtBQ0tHOztBREhKb3dCLG9CQUFjO0FBQUV6ckIsYUFBS29yQixJQUFJbmtCO0FBQVgsT0FBZDtBQ09FOztBRExIdWtCLGFBQVMzckIsR0FBRzJyQixNQUFILENBQVV4TyxJQUFWLENBQWV5TyxXQUFmLEVBQTRCbk0sS0FBNUIsRUFBVDtBQUVBaU0sZUFBVzlxQixFQUFFaVUsS0FBRixDQUFROFcsTUFBUixFQUFnQixLQUFoQixDQUFYO0FBRUFuN0IsWUFBUTtBQUFFNFcsYUFBTztBQUFFb1gsYUFBS2tOO0FBQVA7QUFBVCxLQUFSOztBQUNBLFFBQUdOLFNBQUg7QUFDQzU2QixZQUFNdTdCLFVBQU4sR0FBbUJYLFNBQW5CO0FDU0U7O0FEUEhYLGlCQUFhenFCLEdBQUdnc0IsV0FBSCxDQUFlN08sSUFBZixDQUFvQjNzQixLQUFwQixFQUEyQml2QixLQUEzQixFQUFiO0FBRUF4ZixZQUFRRCxHQUFHQyxLQUFILENBQVNrZCxJQUFULENBQWMzc0IsS0FBZCxFQUFxQjtBQUFFa1AsY0FBUTtBQUFFOUosY0FBSyxDQUFQO0FBQVUrUixlQUFNLENBQWhCO0FBQW1Cc2tCLG9CQUFXLENBQTlCO0FBQWlDQyxrQkFBUyxDQUExQztBQUE2QzlrQixlQUFNLENBQW5EO0FBQXNEdUYscUJBQVksQ0FBbEU7QUFBcUV3ZixtQkFBVSxDQUEvRTtBQUN2Q2xILGlCQUFRLENBRCtCO0FBQzVCQyxvQkFBVyxDQURpQjtBQUNkcGYsaUJBQVEsQ0FETTtBQUNIc21CLGtCQUFTLENBRE47QUFDUzdpQix3QkFBZSxDQUR4QjtBQUMyQndpQixvQkFBVztBQUR0QztBQUFWLEtBQXJCLEVBQzRFdE0sS0FENUUsRUFBUjtBQUdBclosWUFBUXBHLEdBQUdvRyxLQUFILENBQVMrVyxJQUFULENBQWMzc0IsS0FBZCxFQUFxQjtBQUFFa1AsY0FBUTtBQUFFOUosY0FBSyxDQUFQO0FBQVV5MkIsc0JBQWEsQ0FBdkI7QUFBMEJDLHNCQUFhLENBQXZDO0FBQTBDbGxCLGVBQU0sQ0FBaEQ7QUFBbUR1RixxQkFBWSxDQUEvRDtBQUFrRXVmLGtCQUFTLENBQTNFO0FBQThFNXNCLGNBQUssQ0FBbkY7QUFDdkNpdEIsa0JBQVMsQ0FEOEI7QUFDM0I1a0IsZUFBTSxDQURxQjtBQUNsQnNrQixvQkFBVyxDQURPO0FBQ0poSCxpQkFBUSxDQURKO0FBQ09DLG9CQUFXLENBRGxCO0FBQ3FCaUgsbUJBQVUsQ0FEL0I7QUFDa0NLLG9CQUFXLENBRDdDO0FBQ2dEMW1CLGlCQUFRLENBRHhEO0FBQzJEMm1CLGVBQU0sQ0FEakU7QUFDb0VDLHVCQUFjLENBRGxGO0FBQ3FGQyxtQ0FBMEIsQ0FEL0c7QUFDa0haLG9CQUFXO0FBRDdIO0FBQVYsS0FBckIsRUFDbUt0TSxLQURuSyxFQUFSO0FBR0FnTSxZQUFRenJCLEdBQUc0c0IsVUFBSCxDQUFjelAsSUFBZCxDQUFtQjNzQixLQUFuQixFQUEwQml2QixLQUExQixFQUFSO0FBRUF1SixvQkFBZ0JocEIsR0FBR2dwQixhQUFILENBQWlCN0wsSUFBakIsQ0FBc0Izc0IsS0FBdEIsRUFBNkJpdkIsS0FBN0IsRUFBaEI7QUFFQStMLGdCQUFZeHJCLEdBQUc2c0IsY0FBSCxDQUFrQjFQLElBQWxCLENBQXVCM3NCLEtBQXZCLEVBQThCaXZCLEtBQTlCLEVBQVo7QUFFQTBMLGlCQUFhbnJCLEdBQUdtckIsVUFBSCxDQUFjaE8sSUFBZCxDQUFtQjtBQUFFL1YsYUFBTztBQUFFb1gsYUFBS2tOO0FBQVA7QUFBVCxLQUFuQixFQUFpRGpNLEtBQWpELEVBQWI7QUFFQStLLGNBQVU1cEIsRUFBRWlVLEtBQUYsQ0FBUTRWLFVBQVIsRUFBb0IsTUFBcEIsQ0FBVjtBQUNBcEYsWUFBUXJsQixHQUFHcWxCLEtBQUgsQ0FBU2xJLElBQVQsQ0FBYztBQUFFaGQsV0FBSztBQUFFcWUsYUFBS2dNO0FBQVA7QUFBUCxLQUFkLEVBQXlDO0FBQUU5cUIsY0FBUTtBQUFFOUosY0FBTTtBQUFSO0FBQVYsS0FBekMsRUFBa0U2cEIsS0FBbEUsRUFBUjtBQUVBem5CLGFBQVMsRUFBVDtBQUNBQSxXQUFPODBCLFVBQVAsR0FBb0JyQyxVQUFwQjtBQUNBenlCLFdBQU8rMEIsS0FBUCxHQUFlMUgsS0FBZjtBQUNBcnRCLFdBQU9nMUIsS0FBUCxHQUFlL3NCLEtBQWY7QUFDQWpJLFdBQU9pMUIsS0FBUCxHQUFlN21CLEtBQWY7QUFDQXBPLFdBQU9rMUIsYUFBUCxHQUF1QmxFLGFBQXZCO0FBQ0FoeEIsV0FBT20xQixTQUFQLEdBQW1CM0IsU0FBbkI7QUFDQXh6QixXQUFPbzFCLEtBQVAsR0FBZTNCLEtBQWY7QUFDQXp6QixXQUFPcTFCLFVBQVAsR0FBb0JsQyxVQUFwQjtBQUNBbnpCLFdBQU9zMUIsTUFBUCxHQUFnQjNCLE1BQWhCO0FDaURFLFdEL0NGdkQsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNFO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU1rSjtBQUROLEtBREYsQ0MrQ0U7QURwR0gsV0FBQTBNLEtBQUE7QUF3RE1uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNrREUsV0RqREYzQyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBQ0Msd0JBQWMxM0IsRUFBRTIzQjtBQUFqQixTQUFEO0FBQVY7QUFETixLQURELENDaURFO0FBVUQ7QUR0SEgsRzs7Ozs7Ozs7Ozs7O0FFQUE5QyxXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QixzQkFBdkIsRUFBK0MsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzlDLE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBZzZCLFFBQUE7O0FBQUE7QUFDQ2pDLHdCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsQ0FBcEI7QUFDQW1ELG1CQUFlQyxrQkFBa0JuckIsR0FBakM7QUFFQW90QixlQUFXckYsSUFBSXhmLElBQWY7O0FBRUE5SCxNQUFFcWIsSUFBRixDQUFPc1IsU0FBUyxXQUFULENBQVAsRUFBOEIsVUFBQ0MsbUJBQUQ7QUNBMUIsYURDSDF0QixjQUFjMnRCLGVBQWQsQ0FBOEJELG1CQUE5QixFQUFtRGxDLGlCQUFuRCxFQUFzRUQsWUFBdEUsQ0NERztBREFKOztBQ0VFLFdEQ0ZqRCxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUROLEtBREQsQ0NERTtBRFJILFdBQUE0VixLQUFBO0FBWU1uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNFRSxXRERGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBRWs4QixnQkFBUSxDQUFDO0FBQUNDLHdCQUFjMTNCLEVBQUUyM0I7QUFBakIsU0FBRDtBQUFWO0FBRE4sS0FERCxDQ0NFO0FBVUQ7QUQxQkgsRzs7Ozs7Ozs7Ozs7O0FFQUE5QyxXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QixzQkFBdkIsRUFBK0MsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzlDLE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBZzZCLFFBQUEsRUFBQUcsa0JBQUE7O0FBQUE7QUFDQ3BDLHdCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsQ0FBcEI7QUFDQW1ELG1CQUFlQyxrQkFBa0JuckIsR0FBakM7QUFFQW90QixlQUFXckYsSUFBSXhmLElBQWY7QUFFQWdsQix5QkFBcUIsSUFBSS90QixLQUFKLEVBQXJCOztBQUVBaUIsTUFBRXFiLElBQUYsQ0FBT3NSLFNBQVMsV0FBVCxDQUFQLEVBQThCLFVBQUNJLG9CQUFEO0FBQzdCLFVBQUFDLE9BQUEsRUFBQUMsVUFBQTtBQUFBQSxtQkFBYS90QixjQUFjZ3VCLGVBQWQsQ0FBOEJILG9CQUE5QixFQUFvRHJDLGlCQUFwRCxDQUFiO0FBRUFzQyxnQkFBVTV0QixHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFFQyxhQUFLMHRCO0FBQVAsT0FBckIsRUFBMEM7QUFBRW51QixnQkFBUTtBQUFFMEgsaUJBQU8sQ0FBVDtBQUFZbEIsZ0JBQU0sQ0FBbEI7QUFBcUJDLHdCQUFjLENBQW5DO0FBQXNDN0csZ0JBQU0sQ0FBNUM7QUFBK0NDLHdCQUFjO0FBQTdEO0FBQVYsT0FBMUMsQ0FBVjtBQ1NHLGFEUEhtdUIsbUJBQW1CNzNCLElBQW5CLENBQXdCKzNCLE9BQXhCLENDT0c7QURaSjs7QUNjRSxXRFBGeEYsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFlBQU0sR0FEb0I7QUFFMUIzVyxZQUFNO0FBQUVpL0IsaUJBQVNMO0FBQVg7QUFGb0IsS0FBM0IsQ0NPRTtBRHRCSCxXQUFBaHBCLEtBQUE7QUFtQk1uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNXRSxXRFZGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFlBQU0sR0FEb0I7QUFFMUIzVyxZQUFNO0FBQUVrOEIsZ0JBQVEsQ0FBQztBQUFFQyx3QkFBYzEzQixFQUFFMjNCO0FBQWxCLFNBQUQ7QUFBVjtBQUZvQixLQUEzQixDQ1VFO0FBVUQ7QUQxQ0gsRzs7Ozs7Ozs7Ozs7O0FFQUE5QyxXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QixzQkFBdkIsRUFBK0MsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzlDLE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBZzZCLFFBQUEsRUFBQUcsa0JBQUE7O0FBQUE7QUFDQ3BDLHdCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsQ0FBcEI7QUFDQW1ELG1CQUFlQyxrQkFBa0JuckIsR0FBakM7QUFFQW90QixlQUFXckYsSUFBSXhmLElBQWY7QUFFQWdsQix5QkFBcUIsSUFBSS90QixLQUFKLEVBQXJCOztBQUVBaUIsTUFBRXFiLElBQUYsQ0FBT3NSLFNBQVMsV0FBVCxDQUFQLEVBQThCLFVBQUNJLG9CQUFEO0FBRTdCLFVBQUFLLFFBQUEsRUFBQUMsVUFBQSxFQUFBL25CLElBQUEsRUFBQWdvQixXQUFBLEVBQUF0b0IsUUFBQSxFQUFBd0IsS0FBQSxFQUFBK21CLHNCQUFBLEVBQUFDLFFBQUEsRUFBQUMsVUFBQSxFQUFBQyxRQUFBO0FBQUExb0IsaUJBQVc5RixjQUFjeU8sV0FBZCxDQUEwQm9mLHFCQUFxQixLQUFyQixDQUExQixDQUFYO0FBQ0FTLGlCQUFXeG9CLFNBQVN3QixLQUFwQjtBQUVBQSxjQUFRdEgsY0FBY3l1QixRQUFkLENBQXVCSCxRQUF2QixDQUFSO0FBRUFDLG1CQUFhdnVCLGNBQWMwdUIsWUFBZCxDQUEyQkosUUFBM0IsRUFBcUMvQyxZQUFyQyxDQUFiO0FBRUFubEIsYUFBT2xHLEdBQUdvRyxLQUFILENBQVNsRyxPQUFULENBQWlCO0FBQUNDLGFBQUt5RixTQUFTTTtBQUFmLE9BQWpCLENBQVA7QUFFQWlvQiwrQkFBeUJudUIsR0FBR2dwQixhQUFILENBQWlCN0wsSUFBakIsQ0FBc0I7QUFDOUNoZCxhQUFLO0FBQ0pxZSxlQUFLNlAsV0FBV3JGO0FBRFo7QUFEeUMsT0FBdEIsRUFJdEJ2SixLQUpzQixFQUF6Qjs7QUFPQSxVQUFJN1osU0FBUzZvQixTQUFULEtBQXdCcEQsWUFBekIsSUFBNEMsQ0FBSWprQixNQUFNMGtCLE1BQU4sQ0FBYTdkLFFBQWIsQ0FBc0JvZCxZQUF0QixDQUFoRCxJQUF3RixDQUFDaGtCLGdCQUFnQnFuQixRQUFoQixDQUF5QnhvQixJQUF6QixFQUErQm1vQixVQUEvQixFQUEyQ0Ysc0JBQTNDLENBQTVGO0FBQ0MsY0FBTSxJQUFLdnVCLE9BQU9wRSxLQUFaLENBQWtCLFFBQWxCLEVBQTRCLFlBQTVCLENBQU47QUNMRzs7QURPSnl5QixtQkFBYWp1QixHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQnl0QixxQkFBcUIsS0FBckIsQ0FBckIsQ0FBYjtBQUNBTSxpQkFBV1UsT0FBWCxHQUFxQixJQUFJM3BCLElBQUosRUFBckI7QUFDQWlwQixpQkFBV1csVUFBWCxHQUF3QnZELFlBQXhCO0FBRUFyckIsU0FBRzZ1QixpQkFBSCxDQUFxQkMsTUFBckIsQ0FBNEJiLFVBQTVCO0FBR0FqdUIsU0FBR2tkLFNBQUgsQ0FBYTZSLE1BQWIsQ0FBb0JwQixxQkFBcUIsS0FBckIsQ0FBcEI7O0FBRUEsVUFBR00sV0FBV3RtQixLQUFYLEtBQXNCLE9BQXpCO0FBRUN1bUIsc0JBQWlCRCxXQUFXQyxXQUFYLEdBQTRCRCxXQUFXQyxXQUF2QyxHQUF3RCxFQUF6RTtBQUNBRixtQkFBY0MsV0FBV0QsUUFBWCxHQUF5QkMsV0FBV0QsUUFBcEMsR0FBa0QsRUFBaEU7QUFDQU0sbUJBQVcxdEIsRUFBRW91QixJQUFGLENBQU9kLFlBQVkzM0IsTUFBWixDQUFtQnkzQixRQUFuQixDQUFQLENBQVg7O0FBQ0FwdEIsVUFBRXFiLElBQUYsQ0FBT3FTLFFBQVAsRUFBaUIsVUFBQ1csSUFBRDtBQ1ZYLGlCRFdMQyxZQUFZQywyQkFBWixDQUF3QyxvQkFBeEMsRUFBOERGLElBQTlELENDWEs7QURVTjs7QUNSSSxlRFlKQyxZQUFZRSwwQkFBWixDQUF1QywwQkFBdkMsRUFBbUVuQixVQUFuRSxFQUErRSxFQUEvRSxFQUFtRjNDLGlCQUFuRixDQ1pJO0FBQ0Q7QUQ1Qkw7O0FDOEJFLFdEV0ZsRCxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFaS9CLGlCQUFTTDtBQUFYO0FBRE4sS0FERCxDQ1hFO0FEdENILFdBQUFocEIsS0FBQTtBQW9ETW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQ05FLFdET0YzQyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBQ0Msd0JBQWMxM0IsRUFBRTIzQjtBQUFqQixTQUFEO0FBQVY7QUFETixLQURELENDUEU7QUFVRDtBRDFESCxHOzs7Ozs7Ozs7Ozs7QUVBQTlDLFdBQVdDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLHNCQUF2QixFQUErQyxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDOUMsTUFBQStDLFlBQUEsRUFBQUMsaUJBQUEsRUFBQS8zQixDQUFBLEVBQUFnNkIsUUFBQSxFQUFBdjFCLE1BQUE7O0FBQUE7QUFDQ3N6Qix3QkFBb0J4ckIsY0FBYytyQixtQkFBZCxDQUFrQzNELEdBQWxDLENBQXBCO0FBQ0FtRCxtQkFBZUMsa0JBQWtCbnJCLEdBQWpDO0FBRUFvdEIsZUFBV3JGLElBQUl4ZixJQUFmO0FBQ0ExUSxhQUFTLEVBQVQ7O0FBQ0E0SSxNQUFFcWIsSUFBRixDQUFPc1IsU0FBUyxXQUFULENBQVAsRUFBOEIsVUFBQ0ksb0JBQUQ7QUFDN0IsVUFBQTBCLGVBQUEsRUFBQUMsT0FBQSxFQUFBMXBCLFFBQUEsRUFBQTJwQixDQUFBO0FBQUFBLFVBQUl6dkIsY0FBYzB2QixlQUFkLENBQThCN0Isb0JBQTlCLEVBQW9EckMsaUJBQXBELENBQUo7O0FBQ0EsVUFBR2lFLEVBQUVFLE1BQUw7QUFDQ3ozQixlQUFPbkMsSUFBUCxDQUFZMDVCLENBQVo7QUNFRzs7QURESixVQUFHLENBQUkzdUIsRUFBRTRMLE9BQUYsQ0FBVW1oQixxQkFBcUIsYUFBckIsQ0FBVixDQUFQO0FBRUN1QixvQkFBWUMsMkJBQVosQ0FBd0MsY0FBeEMsRUFBd0Q5RCxZQUF4RDtBQ0VHOztBREFKLFVBQUd6cUIsRUFBRTRMLE9BQUYsQ0FBVStpQixFQUFFRSxNQUFaLENBQUg7QUFDQzdwQixtQkFBVzVGLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCeXRCLHFCQUFxQnh0QixHQUExQyxDQUFYO0FBQ0FtdkIsa0JBQVUxcEIsU0FBU00sSUFBbkI7QUFDQW1wQiwwQkFBa0IxQixxQkFBcUJsa0IsTUFBckIsQ0FBNEIsQ0FBNUIsRUFBK0J5TixRQUEvQixDQUF3QyxDQUF4QyxDQUFsQjtBQUVBZ1ksb0JBQVlRLGNBQVosQ0FBMkJKLE9BQTNCLEVBQW9DMXBCLFFBQXBDLEVBQThDeXBCLGVBQTlDLEVBQStELGNBQS9ELEVBQStFaEUsWUFBL0UsRUFBNkZ6bEIsU0FBU3NvQixXQUF0RztBQ0NHOztBQUNELGFEQ0hwdUIsY0FBYzZ2QiwwQkFBZCxDQUF5Q2hDLG9CQUF6QyxDQ0RHO0FEZko7O0FDaUJFLFdEQ0Z2RixXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0U7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFa0osZ0JBQVFBO0FBQVY7QUFETixLQURGLENDREU7QUR2QkgsV0FBQTBNLEtBQUE7QUEyQk1uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNJRSxXREhGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBRWs4QixnQkFBUSxDQUFDO0FBQUNDLHdCQUFjMTNCLEVBQUUyM0I7QUFBakIsU0FBRDtBQUFWO0FBRE4sS0FERCxDQ0dFO0FBVUQ7QUQzQ0gsRzs7Ozs7Ozs7Ozs7O0FFQUE5QyxXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1Qix5QkFBdkIsRUFBa0QsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQ2pELE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBZzZCLFFBQUE7O0FBQUE7QUFDQ2pDLHdCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsQ0FBcEI7QUFDQW1ELG1CQUFlQyxrQkFBa0JuckIsR0FBakM7QUFFQW90QixlQUFXckYsSUFBSXhmLElBQWY7O0FBQ0E5SCxNQUFFcWIsSUFBRixDQUFPc1IsU0FBUyxXQUFULENBQVAsRUFBOEIsVUFBQ0ksb0JBQUQ7QUFDN0IsVUFBQXpuQixJQUFBLEVBQUFvcEIsT0FBQSxFQUFBTSxpQkFBQSxFQUFBQyxTQUFBLEVBQUFDLENBQUEsRUFBQTlnQyxDQUFBLEVBQUEwZ0IsR0FBQSxFQUFBOUosUUFBQSxFQUFBbXFCLGlCQUFBLEVBQUFyTCxXQUFBLEVBQUFzTCxjQUFBLEVBQUFDLFVBQUEsRUFBQUMsUUFBQSxFQUFBalAsR0FBQSxFQUFBa1AsWUFBQSxFQUFBQyxlQUFBLEVBQUFDLGdCQUFBLEVBQUFwcEIsV0FBQSxFQUFBc29CLENBQUEsRUFBQWUsTUFBQSxFQUFBbHBCLEtBQUEsRUFBQWduQixRQUFBLEVBQUFDLFVBQUEsRUFBQWtDLG1CQUFBLEVBQUFDLFNBQUEsRUFBQUMsZ0JBQUEsRUFBQWhuQixNQUFBO0FBQUFnbkIseUJBQW1COUMscUJBQXFCLGtCQUFyQixDQUFuQjtBQUNBakosb0JBQWNpSixxQkFBcUIsS0FBckIsQ0FBZDtBQUVBL25CLGlCQUFXOUYsY0FBY3lPLFdBQWQsQ0FBMEJtVyxXQUExQixDQUFYO0FBQ0EwSixpQkFBV3hvQixTQUFTd0IsS0FBcEI7QUFDQWtvQixnQkFBVTFwQixTQUFTTSxJQUFuQjtBQUVBa0IsY0FBUXRILGNBQWN5dUIsUUFBZCxDQUF1QkgsUUFBdkIsQ0FBUjtBQUVBbG9CLGFBQU9wRyxjQUFjOGQsT0FBZCxDQUFzQjBSLE9BQXRCLENBQVA7QUFFQXh2QixvQkFBYzR3QixpQkFBZCxDQUFnQzlxQixRQUFoQztBQUVBeW9CLG1CQUFhdnVCLGNBQWMwdUIsWUFBZCxDQUEyQkosUUFBM0IsRUFBcUMvQyxZQUFyQyxDQUFiO0FBRUFrRiw0QkFBc0J6d0IsY0FBYzZ3QixtQkFBZCxDQUFrQ3RDLFVBQWxDLENBQXRCO0FBRUEwQiwwQkFBb0IsSUFBcEI7QUFDQUgsMEJBQW9CLElBQXBCO0FBQ0FDLGtCQUFZLElBQUlsd0IsS0FBSixFQUFaO0FBQ0Frd0IsZ0JBQVVoNkIsSUFBVixDQUFlcVEsS0FBS0osT0FBcEI7QUFDQStwQixrQkFBWUEsVUFBVXQ1QixNQUFWLENBQWlCMlAsS0FBS0YsUUFBdEIsQ0FBWjtBQUNBK3BCLDBCQUFvQm52QixFQUFFdWMsSUFBRixDQUFPMFMsU0FBUCxFQUFrQixVQUFDZSxLQUFEO0FBQ3JDLGVBQU9BLE1BQU16d0IsR0FBTixLQUFheUYsU0FBU08sWUFBN0I7QUFEbUIsUUFBcEI7O0FBR0EsVUFBRyxDQUFJNHBCLGlCQUFQO0FBQ0MsY0FBTSxJQUFJbndCLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLGNBQTNCLENBQU47QUNMRzs7QURNSm8wQiwwQkFBb0JodkIsRUFBRXVjLElBQUYsQ0FBTzRTLGtCQUFrQmxwQixLQUF6QixFQUFnQyxVQUFDZ3FCLE1BQUQ7QUFDbkQsZUFBT0EsT0FBT25ULFNBQVAsS0FBb0IsS0FBM0I7QUFEbUIsUUFBcEI7QUFJQXpXLG9CQUFjNnBCLGtCQUFrQkMsa0JBQWxCLENBQXFDekIsT0FBckMsRUFBOENqRSxZQUE5QyxDQUFkO0FBQ0FwSyxZQUFNLElBQUlqYyxJQUFKLEVBQU47QUFDQXNyQixlQUFTLElBQUl0aUMsTUFBSixFQUFUOztBQUVBLFVBQUdpWixZQUFZZ0gsUUFBWixDQUFxQixPQUFyQixLQUFpQzdHLE1BQU0wa0IsTUFBTixDQUFhN2QsUUFBYixDQUFzQm9kLFlBQXRCLENBQWpDLElBQXdFemxCLFNBQVM2b0IsU0FBVCxLQUFzQnBELFlBQTlGLElBQThHemxCLFNBQVMrVixTQUFULEtBQXNCMFAsWUFBdkk7QUFDQyxZQUFHLENBQUlvRixnQkFBUDtBQUNDLGdCQUFNLElBQUk3d0IsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMEIscUJBQTFCLENBQU47QUNOSTs7QURRTHcwQix5QkFBaUJwdkIsRUFBRXVjLElBQUYsQ0FBT3ZYLFNBQVM2RCxNQUFoQixFQUF3QixVQUFDa0MsS0FBRDtBQUN4QyxpQkFBT0EsTUFBTWdMLFdBQU4sS0FBcUIsS0FBNUI7QUFEZ0IsVUFBakI7QUFJQWxOLGlCQUFTN0QsU0FBUzZELE1BQWxCO0FBQ0F6YSxZQUFJLENBQUo7O0FBQ0EsZUFBTUEsSUFBSXlhLE9BQU9wYyxNQUFqQjtBQUNDLGNBQUdvYyxPQUFPemEsQ0FBUCxFQUFVMm5CLFdBQVYsS0FBeUIsS0FBNUI7QUFFQ2xOLG1CQUFPemEsQ0FBUCxFQUFVMm5CLFdBQVYsR0FBd0IsSUFBeEI7QUFDQWxOLG1CQUFPemEsQ0FBUCxFQUFVMG9CLFdBQVYsR0FBd0J1SixHQUF4QjtBQUNBNk8sZ0JBQUksQ0FBSjs7QUFDQSxtQkFBTUEsSUFBSXJtQixPQUFPemEsQ0FBUCxFQUFVa29CLFFBQVYsQ0FBbUI3cEIsTUFBN0I7QUFDQyxrQkFBR29jLE9BQU96YSxDQUFQLEVBQVVrb0IsUUFBVixDQUFtQjRZLENBQW5CLEVBQXNCblosV0FBdEIsS0FBcUMsS0FBeEM7QUFFQ2xOLHVCQUFPemEsQ0FBUCxFQUFVa29CLFFBQVYsQ0FBbUI0WSxDQUFuQixFQUFzQm5aLFdBQXRCLEdBQW9DLElBQXBDO0FBQ0FsTix1QkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0JwWSxXQUF0QixHQUFvQ3VKLEdBQXBDO0FBQ0F4WCx1QkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0JuZ0IsS0FBdEIsR0FBOEIsSUFBOUI7QUFDQWxHLHVCQUFPemEsQ0FBUCxFQUFVa29CLFFBQVYsQ0FBbUI0WSxDQUFuQixFQUFzQm5qQixXQUF0QixHQUFvQyxJQUFwQztBQ1RPOztBRFVSbWpCO0FBUEQ7O0FBU0FHLHlCQUFhLElBQUlqaUMsTUFBSixFQUFiO0FBQ0FpaUMsdUJBQVc5dkIsR0FBWCxHQUFpQixJQUFJNndCLE1BQU1DLFFBQVYsR0FBcUJDLElBQXRDO0FBQ0FqQix1QkFBV3JxQixRQUFYLEdBQXNCOGUsV0FBdEI7QUFDQXVMLHVCQUFXdGtCLEtBQVgsR0FBbUJxa0IsZUFBZTd2QixHQUFsQztBQUNBOHZCLHVCQUFXdFosV0FBWCxHQUF5QixJQUF6QjtBQUNBc1osdUJBQVd6cEIsSUFBWCxHQUFrQjZrQixZQUFsQjtBQUNBNEUsdUJBQVdrQixTQUFYLEdBQXVCN0Ysa0JBQWtCMTFCLElBQXpDO0FBQ0FxNkIsdUJBQVd2WixPQUFYLEdBQXFCMlUsWUFBckI7QUFDQTRFLHVCQUFXMVksWUFBWCxHQUEwQitULGtCQUFrQjExQixJQUE1QztBQUNBcTZCLHVCQUFXbUIsb0JBQVgsR0FBa0NiLG9CQUFvQixjQUFwQixDQUFsQztBQUNBTix1QkFBV3pZLHlCQUFYLEdBQXVDK1ksb0JBQW9CLG1CQUFwQixDQUF2QztBQUNBTix1QkFBV3hZLDZCQUFYLEdBQTJDOFksb0JBQW9CLHVCQUFwQixDQUEzQztBQUNBTix1QkFBV29CLFVBQVgsR0FBd0JwUSxHQUF4QjtBQUNBZ1AsdUJBQVd2WSxXQUFYLEdBQXlCdUosR0FBekI7QUFDQWdQLHVCQUFXcUIsUUFBWCxHQUFzQnRCLGVBQWVzQixRQUFyQztBQUNBckIsdUJBQVdzQixTQUFYLEdBQXVCdFEsR0FBdkI7QUFDQWdQLHVCQUFXdGdCLEtBQVgsR0FBbUIsWUFBbkI7QUFDQXNnQix1QkFBV3BZLE9BQVgsR0FBcUIsSUFBckI7QUFDQW9ZLHVCQUFXdGpCLFdBQVgsR0FBeUI4akIsZ0JBQXpCO0FBQ0FSLHVCQUFXdUIsUUFBWCxHQUFzQixLQUF0QjtBQUNBdkIsdUJBQVczZSxNQUFYLEdBQW9CLElBQUl0akIsTUFBSixFQUFwQjtBQUNBaWlDLHVCQUFXd0IsU0FBWCxHQUF1QnhCLFdBQVd2WSxXQUFYLEdBQXlCdVksV0FBV29CLFVBQTNEO0FBQ0E1bkIsbUJBQU96YSxDQUFQLEVBQVVrb0IsUUFBVixDQUFtQnJoQixJQUFuQixDQUF3Qm82QixVQUF4QjtBQ1JLOztBRFNOamhDO0FBdENEOztBQXlDQWtoQyxtQkFBVyxJQUFJbGlDLE1BQUosRUFBWDtBQUNBa2lDLGlCQUFTL3ZCLEdBQVQsR0FBZSxJQUFJNndCLE1BQU1DLFFBQVYsR0FBcUJDLElBQXBDO0FBQ0FoQixpQkFBU3RxQixRQUFULEdBQW9COGUsV0FBcEI7QUFDQXdMLGlCQUFTd0Isa0JBQVQsR0FBOEIsQ0FBQzFCLGVBQWU3dkIsR0FBaEIsQ0FBOUI7QUFHQSt2QixpQkFBU3ZaLFdBQVQsR0FBdUIsSUFBdkI7QUFDQXVaLGlCQUFTOVksSUFBVCxHQUFnQndZLGtCQUFrQnp2QixHQUFsQztBQUNBK3ZCLGlCQUFTdDZCLElBQVQsR0FBZ0JnNkIsa0JBQWtCaDZCLElBQWxDO0FBQ0FzNkIsaUJBQVNtQixVQUFULEdBQXNCcFEsR0FBdEI7QUFDQWlQLGlCQUFTeFksV0FBVCxHQUF1QnVKLEdBQXZCO0FBQ0FpUCxpQkFBU3ZnQixLQUFULEdBQWlCLFlBQWpCO0FBRUEyZ0IsZUFBTzNvQixLQUFQLEdBQWUsV0FBZjtBQUNBMm9CLGVBQU9oa0IsY0FBUCxHQUF3QixZQUF4QjtBQUNBOGpCLDBCQUFrQnhxQixTQUFTc29CLFdBQTNCO0FBQ0FpQyx1QkFBZXZxQixTQUFTb29CLFFBQVQsSUFBcUIsRUFBcEM7QUFDQXFDLDJCQUFtQnpxQixTQUFTK3JCLFlBQTVCO0FBQ0FuQixvQkFBWSxJQUFJN3dCLEtBQUosRUFBWjs7QUFDQWlCLFVBQUVxYixJQUFGLENBQU8rVCxlQUFlOVksUUFBdEIsRUFBZ0MsVUFBQzBhLFdBQUQ7QUFDL0JwQixvQkFBVTM2QixJQUFWLENBQWUrN0IsWUFBWXByQixJQUEzQjtBQ1hLLGlCRFlMZ3FCLFVBQVUzNkIsSUFBVixDQUFlKzdCLFlBQVlsYixPQUEzQixDQ1pLO0FEVU47O0FBSUE0WixlQUFPcUIsWUFBUCxHQUFzQi93QixFQUFFb3VCLElBQUYsQ0FBT3BwQixTQUFTK3JCLFlBQVQsQ0FBc0JwN0IsTUFBdEIsQ0FBNkJpNkIsU0FBN0IsQ0FBUCxDQUF0QjtBQUNBRixlQUFPcEMsV0FBUCxHQUFxQixJQUFJdnVCLEtBQUosRUFBckI7QUFDQTJ3QixlQUFPdEMsUUFBUCxHQUFrQixJQUFJcnVCLEtBQUosRUFBbEI7QUFDQTJ3QixlQUFPdUIsUUFBUCxHQUFrQjVRLEdBQWxCO0FBQ0FxUCxlQUFPd0IsV0FBUCxHQUFxQnpHLFlBQXJCO0FBQ0E1aEIsZUFBTzVULElBQVAsQ0FBWXE2QixRQUFaO0FBQ0FJLGVBQU83bUIsTUFBUCxHQUFnQkEsTUFBaEI7QUFFQTZtQixlQUFPeUIsaUJBQVAsR0FBMkJuQyxrQkFBa0JoNkIsSUFBN0M7QUFDQTA2QixlQUFPMEIsd0JBQVAsR0FBa0MsS0FBbEM7QUFFQXpDLFlBQUl2dkIsR0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFBQzl4QixlQUFLdWtCO0FBQU4sU0FBcEIsRUFBd0M7QUFBQ3dOLGdCQUFNNUI7QUFBUCxTQUF4QyxDQUFKOztBQUNBLFlBQUdmLENBQUg7QUFDQzdmLGdCQUFNNVAsY0FBY3lPLFdBQWQsQ0FBMEJtVyxXQUExQixDQUFOO0FBRUF3SyxzQkFBWUUsMEJBQVosQ0FBdUMsNEJBQXZDLEVBQXFFMWYsR0FBckUsRUFBMEUrZ0IsZ0JBQTFFLEVBQTRGbkYsaUJBQTVGOztBQUdBLGNBQUc4RSxlQUFIO0FBQ0N4dkIsY0FBRXFiLElBQUYsQ0FBT3JiLEVBQUVvdUIsSUFBRixDQUFPb0IsZ0JBQWdCNzVCLE1BQWhCLENBQXVCNDVCLFlBQXZCLENBQVAsQ0FBUCxFQUFxRCxVQUFDZ0MsT0FBRDtBQ1o3QyxxQkRhUGpELFlBQVlDLDJCQUFaLENBQXdDLG9CQUF4QyxFQUE4RGdELE9BQTlELENDYk87QURZUjtBQ1ZLOztBQUNELGlCRGNMakQsWUFBWVEsY0FBWixDQUEyQmhnQixJQUFJeEosSUFBL0IsRUFBcUN3SixHQUFyQyxFQUEwQyxFQUExQyxFQUE4QyxXQUE5QyxFQUEyRDJiLFlBQTNELEVBQXlFLEVBQXpFLENDZEs7QURwRlA7QUNzRkk7QUQxSEw7O0FBeUlBNkQsZ0JBQVlrRCx5QkFBWixDQUFzQzlHLGlCQUF0QztBQ1pFLFdEYUZsRCxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0U7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUROLEtBREYsQ0NiRTtBRGxJSCxXQUFBNFYsS0FBQTtBQWtKTW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQ1ZFLFdEV0YzQyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBQ0Msd0JBQWMxM0IsRUFBRTIzQjtBQUFqQixTQUFEO0FBQVY7QUFETixLQURELENDWEU7QUFVRDtBRHBKSCxHOzs7Ozs7Ozs7Ozs7QUVBQTlDLFdBQVdDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLHdCQUF2QixFQUFpRCxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDaEQsTUFBQStDLFlBQUEsRUFBQUMsaUJBQUEsRUFBQS8zQixDQUFBLEVBQUFnNkIsUUFBQTs7QUFBQTtBQUNDakMsd0JBQW9CeHJCLGNBQWMrckIsbUJBQWQsQ0FBa0MzRCxHQUFsQyxDQUFwQjtBQUNBbUQsbUJBQWVDLGtCQUFrQm5yQixHQUFqQztBQUVBb3RCLGVBQVdyRixJQUFJeGYsSUFBZjs7QUFDQTlILE1BQUVxYixJQUFGLENBQU9zUixTQUFTLFdBQVQsQ0FBUCxFQUE4QixVQUFDSSxvQkFBRDtBQUM3QixVQUFBMEUsTUFBQSxFQUFBQyxzQkFBQSxFQUFBQyxhQUFBLEVBQUFDLGtCQUFBLEVBQUFDLHlCQUFBLEVBQUF6akMsQ0FBQSxFQUFBay9CLFdBQUEsRUFBQXdFLHVCQUFBLEVBQUFoakIsR0FBQSxFQUFBOUosUUFBQSxFQUFBOGUsV0FBQSxFQUFBaU8sVUFBQSxFQUFBQyxzQkFBQSxFQUFBQyxlQUFBLEVBQUFDLGtCQUFBLEVBQUE3UixHQUFBLEVBQUFoYSxXQUFBLEVBQUFzb0IsQ0FBQSxFQUFBd0QsZUFBQSxFQUFBekMsTUFBQSxFQUFBbHBCLEtBQUEsRUFBQWduQixRQUFBOztBQUFBMUosb0JBQWNpSixxQkFBcUIsS0FBckIsQ0FBZDtBQUNBL25CLGlCQUFXOUYsY0FBY3lPLFdBQWQsQ0FBMEJtVyxXQUExQixDQUFYO0FBQ0EwSixpQkFBV3hvQixTQUFTd0IsS0FBcEI7QUFFQXRILG9CQUFjNHdCLGlCQUFkLENBQWdDOXFCLFFBQWhDO0FBRUFndEIsK0JBQXlCaHlCLEVBQUV5ZixJQUFGLENBQU9zTixxQkFBcUIsUUFBckIsQ0FBUCxDQUF6QjtBQUNBZ0YsbUJBQWEveEIsRUFBRXVjLElBQUYsQ0FBT3ZYLFNBQVM2RCxNQUFoQixFQUF3QixVQUFDeFUsQ0FBRDtBQUNwQyxlQUFPQSxFQUFFa0wsR0FBRixLQUFTeXlCLHVCQUF1QixLQUF2QixDQUFoQjtBQURZLFFBQWI7O0FBR0EsVUFBR0QsV0FBV2hjLFdBQVgsS0FBMEIsSUFBN0I7QUFDQztBQ0FHOztBREdKMVAsb0JBQWM2cEIsa0JBQWtCQyxrQkFBbEIsQ0FBcUNuckIsU0FBU00sSUFBOUMsRUFBb0RtbEIsWUFBcEQsQ0FBZDtBQUNBamtCLGNBQVFwSCxHQUFHMnJCLE1BQUgsQ0FBVXpyQixPQUFWLENBQWtCO0FBQUVDLGFBQUtpdUI7QUFBUCxPQUFsQixFQUFxQztBQUFFMXVCLGdCQUFRO0FBQUVvc0Isa0JBQVE7QUFBVjtBQUFWLE9BQXJDLENBQVI7O0FBQ0EsVUFBSSxDQUFJN2tCLFlBQVlnSCxRQUFaLENBQXFCLE9BQXJCLENBQUwsSUFBeUMsQ0FBSTdHLE1BQU0wa0IsTUFBTixDQUFhN2QsUUFBYixDQUFzQm9kLFlBQXRCLENBQWhEO0FBQ0MsY0FBTSxJQUFJenJCLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLGdCQUEzQixDQUFOO0FDS0c7O0FESEoweUIsb0JBQWN0b0IsU0FBU3NvQixXQUF2QjtBQUNBd0UsZ0NBQTBCL0UscUJBQXFCLGFBQXJCLENBQTFCO0FBQ0FvRix3QkFBa0JwRixxQkFBcUIsaUJBQXJCLENBQWxCO0FBQ0FtRiwyQkFBcUJseUIsRUFBRW95QixVQUFGLENBQWE5RSxXQUFiLEVBQTBCd0UsdUJBQTFCLENBQXJCO0FBQ0FHLHdCQUFrQmp5QixFQUFFb3lCLFVBQUYsQ0FBYU4sdUJBQWIsRUFBc0N4RSxXQUF0QyxDQUFsQjs7QUFFQSxVQUFVNEUsbUJBQW1CemxDLE1BQW5CLEtBQTZCLENBQTdCLElBQW1Dd2xDLGdCQUFnQnhsQyxNQUFoQixLQUEwQixDQUF2RTtBQUFBO0FDS0k7O0FESkppakMsZUFBUyxJQUFJdGlDLE1BQUosRUFBVDtBQUNBaXpCLFlBQU0sSUFBSWpjLElBQUosRUFBTjtBQUNBaFcsVUFBSSxDQUFKO0FBQ0FzakMsK0JBQXlCLEVBQXpCOztBQUNBLGFBQU10akMsSUFBSTJqQyxXQUFXemIsUUFBWCxDQUFvQjdwQixNQUE5QjtBQUNDLFlBQUd5bEMsbUJBQW1CN2tCLFFBQW5CLENBQTRCMGtCLFdBQVd6YixRQUFYLENBQW9CbG9CLENBQXBCLEVBQXVCMG5CLE9BQW5ELENBQUg7QUFDQyxjQUFHaWMsV0FBV3piLFFBQVgsQ0FBb0Jsb0IsQ0FBcEIsRUFBdUIybkIsV0FBdkIsS0FBc0MsS0FBdEMsSUFBZ0RnYyxXQUFXemIsUUFBWCxDQUFvQmxvQixDQUFwQixFQUF1Qm1ELElBQXZCLEtBQWlDLElBQWpGLElBQTBGd2dDLFdBQVd6YixRQUFYLENBQW9CbG9CLENBQXBCLEVBQXVCbUQsSUFBdkIsS0FBaUMsWUFBOUg7QUFDQ3dnQyx1QkFBV3piLFFBQVgsQ0FBb0Jsb0IsQ0FBcEIsRUFBdUIybkIsV0FBdkIsR0FBcUMsSUFBckM7QUFDQWdjLHVCQUFXemIsUUFBWCxDQUFvQmxvQixDQUFwQixFQUF1QjBvQixXQUF2QixHQUFxQ3VKLEdBQXJDO0FBQ0EwUix1QkFBV3piLFFBQVgsQ0FBb0Jsb0IsQ0FBcEIsRUFBdUIyZ0IsS0FBdkIsR0FBK0IsWUFBL0I7QUFDQWdqQix1QkFBV3piLFFBQVgsQ0FBb0Jsb0IsQ0FBcEIsRUFBdUIyZCxXQUF2QixHQUFxQyxFQUFyQztBQUNBZ21CLHVCQUFXemIsUUFBWCxDQUFvQmxvQixDQUFwQixFQUF1QnlpQyxTQUF2QixHQUFtQ2tCLFdBQVd6YixRQUFYLENBQW9CbG9CLENBQXBCLEVBQXVCMG9CLFdBQXZCLEdBQXFDaWIsV0FBV3piLFFBQVgsQ0FBb0Jsb0IsQ0FBcEIsRUFBdUJxaUMsVUFBL0Y7QUFDQWlCLG1DQUF1Qno4QixJQUF2QixDQUE0Qjg4QixXQUFXemIsUUFBWCxDQUFvQmxvQixDQUFwQixFQUF1QndYLElBQW5EO0FBQ0E4ckIsbUNBQXVCejhCLElBQXZCLENBQTRCODhCLFdBQVd6YixRQUFYLENBQW9CbG9CLENBQXBCLEVBQXVCMG5CLE9BQW5EO0FBUkY7QUNlSzs7QUROTDFuQjtBQVZEOztBQVlBd2pDLDJCQUFxQjF5QixjQUFjMHVCLFlBQWQsQ0FBMkJKLFFBQTNCLEVBQXFDL0MsWUFBckMsQ0FBckI7QUFDQW9ILGtDQUE0Qnp5QixHQUFHZ3BCLGFBQUgsQ0FBaUI5b0IsT0FBakIsQ0FBeUI7QUFBRUMsYUFBS3F5QixtQkFBbUJTO0FBQTFCLE9BQXpCLEVBQW1FO0FBQUV2ekIsZ0JBQVE7QUFBRTlKLGdCQUFNLENBQVI7QUFBV2lQLG9CQUFVO0FBQXJCO0FBQVYsT0FBbkUsQ0FBNUI7QUFDQTB0QixzQkFBZ0IsSUFBSXZrQyxNQUFKLEVBQWhCO0FBQ0F1a0Msb0JBQWNweUIsR0FBZCxHQUFvQixJQUFJNndCLE1BQU1DLFFBQVYsR0FBcUJDLElBQXpDO0FBQ0FxQixvQkFBYzNzQixRQUFkLEdBQXlCK3NCLFdBQVcvc0IsUUFBcEM7QUFDQTJzQixvQkFBYzVtQixLQUFkLEdBQXNCZ25CLFdBQVd4eUIsR0FBakM7QUFDQW95QixvQkFBYzViLFdBQWQsR0FBNEIsSUFBNUI7QUFDQTRiLG9CQUFjL3JCLElBQWQsR0FBcUI2a0IsWUFBckI7QUFDQWtILG9CQUFjcEIsU0FBZCxHQUEwQjdGLGtCQUFrQjExQixJQUE1QztBQUNBMjhCLG9CQUFjN2IsT0FBZCxHQUF3QjJVLFlBQXhCO0FBQ0FrSCxvQkFBY2hiLFlBQWQsR0FBNkIrVCxrQkFBa0IxMUIsSUFBL0M7QUFDQTI4QixvQkFBY25CLG9CQUFkLEdBQXFDb0IsbUJBQW1CUyxZQUF4RDtBQUNBVixvQkFBYy9hLHlCQUFkLEdBQTBDaWIsMEJBQTBCNzhCLElBQXBFO0FBQ0EyOEIsb0JBQWM5YSw2QkFBZCxHQUE4Q2diLDBCQUEwQjV0QixRQUF4RTtBQUNBMHRCLG9CQUFjbEIsVUFBZCxHQUEyQnBRLEdBQTNCO0FBQ0FzUixvQkFBYzdhLFdBQWQsR0FBNEJ1SixHQUE1QjtBQUNBc1Isb0JBQWNqQixRQUFkLEdBQXlCcUIsV0FBV3JCLFFBQXBDO0FBQ0FpQixvQkFBY2hCLFNBQWQsR0FBMEJ0USxHQUExQjtBQUNBc1Isb0JBQWM1aUIsS0FBZCxHQUFzQixZQUF0QjtBQUNBNGlCLG9CQUFjMWEsT0FBZCxHQUF3QixJQUF4QjtBQUNBMGEsb0JBQWM1bEIsV0FBZCxHQUE0Qm9tQixlQUE1QjtBQUNBUixvQkFBY2YsUUFBZCxHQUF5QixLQUF6QjtBQUNBZSxvQkFBY2poQixNQUFkLEdBQXVCLElBQUl0akIsTUFBSixFQUF2QjtBQUNBdWtDLG9CQUFjZCxTQUFkLEdBQTBCYyxjQUFjN2EsV0FBZCxHQUE0QjZhLGNBQWNsQixVQUFwRTtBQUNBc0IsaUJBQVd6YixRQUFYLENBQW9CcmhCLElBQXBCLENBQXlCMDhCLGFBQXpCOztBQUVBM3hCLFFBQUVxYixJQUFGLENBQU80VyxlQUFQLEVBQXdCLFVBQUNWLE9BQUQ7QUFDdkIsWUFBQWUsS0FBQSxFQUFBQyxVQUFBLEVBQUFDLFlBQUEsRUFBQUMsUUFBQSxFQUFBQyxRQUFBLEVBQUFqRixVQUFBLEVBQUFrRixpQkFBQTtBQUFBRCxtQkFBV3R6QixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCaXlCLE9BQWpCLEVBQTBCO0FBQUV6eUIsa0JBQVE7QUFBRTlKLGtCQUFNO0FBQVI7QUFBVixTQUExQixDQUFYO0FBQ0F5NEIscUJBQWF2dUIsY0FBYzB1QixZQUFkLENBQTJCSixRQUEzQixFQUFxQytELE9BQXJDLENBQWI7QUFDQW9CLDRCQUFvQnZ6QixHQUFHZ3BCLGFBQUgsQ0FBaUI5b0IsT0FBakIsQ0FBeUJtdUIsV0FBVzRFLFlBQXBDLEVBQWtEO0FBQUV2ekIsa0JBQVE7QUFBRTlKLGtCQUFNLENBQVI7QUFBV2lQLHNCQUFVO0FBQXJCO0FBQVYsU0FBbEQsQ0FBcEI7QUFDQXd1QixtQkFBVyxJQUFJcmxDLE1BQUosRUFBWDtBQUNBcWxDLGlCQUFTbHpCLEdBQVQsR0FBZSxJQUFJNndCLE1BQU1DLFFBQVYsR0FBcUJDLElBQXBDO0FBQ0FtQyxpQkFBU3p0QixRQUFULEdBQW9CK3NCLFdBQVcvc0IsUUFBL0I7QUFDQXl0QixpQkFBUzFuQixLQUFULEdBQWlCZ25CLFdBQVd4eUIsR0FBNUI7QUFDQWt6QixpQkFBUzFjLFdBQVQsR0FBdUIsS0FBdkI7QUFDQTBjLGlCQUFTN3NCLElBQVQsR0FBZ0IyckIsT0FBaEI7QUFDQWtCLGlCQUFTbEMsU0FBVCxHQUFxQm1DLFNBQVMxOUIsSUFBOUI7QUFFQXU5QixxQkFBYWhCLE9BQWI7QUFDQWlCLHVCQUFlRSxRQUFmO0FBQ0FKLGdCQUFRcHpCLGNBQWMwekIsUUFBZCxDQUF1QnBGLFFBQXZCLEVBQWlDK0QsT0FBakMsQ0FBUjs7QUFDQSxZQUFHZSxLQUFIO0FBQ0NSLGtDQUF3QkEsd0JBQXdCOTlCLE9BQXhCLENBQWdDdTlCLE9BQWhDLENBQXhCLElBQW9FZSxLQUFwRTtBQUNBQyx1QkFBYUQsS0FBYjtBQUNBRSx5QkFBZXB6QixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCO0FBQUVDLGlCQUFLK3lCO0FBQVAsV0FBakIsRUFBaUM7QUFBRXh6QixvQkFBUTtBQUFFOUosb0JBQU07QUFBUjtBQUFWLFdBQWpDLENBQWY7QUFDQXk5QixtQkFBU0gsS0FBVCxHQUFpQkEsS0FBakI7QUM2Qkk7O0FEM0JMRyxpQkFBUzNjLE9BQVQsR0FBbUJ5YyxVQUFuQjtBQUNBRSxpQkFBUzliLFlBQVQsR0FBd0I2YixhQUFheDlCLElBQXJDO0FBQ0F5OUIsaUJBQVNqQyxvQkFBVCxHQUFnQy9DLFdBQVc0RSxZQUEzQztBQUNBSSxpQkFBUzdiLHlCQUFULEdBQXFDK2Isa0JBQWtCMzlCLElBQXZEO0FBQ0F5OUIsaUJBQVM1Yiw2QkFBVCxHQUF5QzhiLGtCQUFrQjF1QixRQUEzRDtBQUNBd3VCLGlCQUFTaFIsU0FBVCxHQUFxQmdKLFlBQXJCO0FBQ0FnSSxpQkFBUy9OLGNBQVQsR0FBMEJnRyxrQkFBa0IxMUIsSUFBNUM7QUFDQXk5QixpQkFBU2xoQyxJQUFULEdBQWdCLFVBQWhCO0FBQ0FraEMsaUJBQVNoQyxVQUFULEdBQXNCcFEsR0FBdEI7QUFDQW9TLGlCQUFTL0IsUUFBVCxHQUFvQnFCLFdBQVdyQixRQUEvQjtBQUNBK0IsaUJBQVN4YixPQUFULEdBQW1CLEtBQW5CO0FBQ0F3YixpQkFBUzdCLFFBQVQsR0FBb0IsS0FBcEI7QUFDQTZCLGlCQUFTL2hCLE1BQVQsR0FBa0IsSUFBSXRqQixNQUFKLEVBQWxCO0FBQ0E4UixzQkFBYzJ6QixhQUFkLENBQTRCN3RCLFNBQVMwTCxNQUFyQyxFQUE2QytoQixRQUE3QztBQzZCSSxlRDVCSlYsV0FBV3piLFFBQVgsQ0FBb0JyaEIsSUFBcEIsQ0FBeUJ3OUIsUUFBekIsQ0M0Qkk7QUQvREw7O0FBc0NBenRCLGVBQVMrckIsWUFBVCxDQUFzQjk3QixJQUF0QixDQUEyQncxQixZQUEzQjtBQUNBemxCLGVBQVMrckIsWUFBVCxHQUF3Qi9yQixTQUFTK3JCLFlBQVQsQ0FBc0JwN0IsTUFBdEIsQ0FBNkIrN0Isc0JBQTdCLENBQXhCO0FBQ0FoQyxhQUFPcUIsWUFBUCxHQUFzQi93QixFQUFFb3VCLElBQUYsQ0FBT3BwQixTQUFTK3JCLFlBQWhCLENBQXRCO0FBQ0FyQixhQUFPcEMsV0FBUCxHQUFxQndFLHVCQUFyQjtBQUNBcEMsYUFBT3VCLFFBQVAsR0FBa0I1USxHQUFsQjtBQUNBcVAsYUFBT3dCLFdBQVAsR0FBcUJ6RyxZQUFyQjtBQUNBaUYsYUFBTyxtQkFBUCxJQUE4QnFDLFdBQVd6YixRQUF6QztBQUNBcVksVUFBSXZ2QixHQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUFFOXhCLGFBQUt1a0IsV0FBUDtBQUFvQixzQkFBY2lPLFdBQVd4eUI7QUFBN0MsT0FBcEIsRUFBd0U7QUFBRSt4QixjQUFNNUI7QUFBUixPQUF4RSxDQUFKOztBQUNBLFVBQUdmLENBQUg7QUFDQzdmLGNBQU01UCxjQUFjeU8sV0FBZCxDQUEwQm1XLFdBQTFCLENBQU47QUFFQXdLLG9CQUFZa0QseUJBQVosQ0FBc0M5RyxpQkFBdEM7O0FBQ0ExcUIsVUFBRXFiLElBQUYsQ0FBTzZXLGtCQUFQLEVBQTJCLFVBQUNYLE9BQUQ7QUFDMUIsY0FBR0EsWUFBYTlHLFlBQWhCO0FDZ0NPLG1CRC9CTjZELFlBQVlDLDJCQUFaLENBQXdDLGNBQXhDLEVBQXdEZ0QsT0FBeEQsQ0MrQk07QUFDRDtBRGxDUDs7QUFLQUUsaUJBQVMsSUFBSTF5QixLQUFKLEVBQVQ7O0FBQ0EweUIsZUFBT3g4QixJQUFQLENBQVk2WixJQUFJaU0sU0FBaEI7O0FBQ0EwVyxlQUFPeDhCLElBQVAsQ0FBWTZaLElBQUkrZSxTQUFoQjs7QUFDQTRELGlCQUFTenhCLEVBQUVvdUIsSUFBRixDQUFPcUQsT0FBTzk3QixNQUFQLENBQWNtWixJQUFJaWlCLFlBQWxCLENBQVAsQ0FBVDs7QUFDQS93QixVQUFFcWIsSUFBRixDQUFPb1csTUFBUCxFQUFlLFVBQUNGLE9BQUQ7QUNnQ1QsaUJEL0JMakQsWUFBWUMsMkJBQVosQ0FBd0MsY0FBeEMsRUFBd0RnRCxPQUF4RCxDQytCSztBRGhDTjs7QUFLQWpELG9CQUFZRSwwQkFBWixDQUF1QywwQkFBdkMsRUFBbUUxZixHQUFuRSxFQUF3RXFqQixlQUF4RSxFQUF5RnpILGlCQUF6RjtBQzhCSSxlRDNCSjRELFlBQVlRLGNBQVosQ0FBMkJoZ0IsSUFBSXhKLElBQS9CLEVBQXFDd0osR0FBckMsRUFBMEMsRUFBMUMsRUFBOEMsVUFBOUMsRUFBMEQyYixZQUExRCxFQUF3RTNiLElBQUl3ZSxXQUE1RSxDQzJCSTtBQUNEO0FEcEtMOztBQ3NLRSxXRDVCRjlGLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxZQUFNLEdBRG9CO0FBRTFCM1csWUFBTTtBQUZvQixLQUEzQixDQzRCRTtBRDNLSCxXQUFBNFYsS0FBQTtBQW1KTW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQzhCRSxXRDdCRjNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxZQUFNLEdBRG9CO0FBRTFCM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBRUMsd0JBQWMxM0IsRUFBRTIzQjtBQUFsQixTQUFEO0FBQVY7QUFGb0IsS0FBM0IsQ0M2QkU7QUFVRDtBRDdMSCxHOzs7Ozs7Ozs7Ozs7QUVBQTlDLFdBQVdDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLHdCQUF2QixFQUFpRCxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDaEQsTUFBQStDLFlBQUEsRUFBQUMsaUJBQUEsRUFBQS8zQixDQUFBLEVBQUFnNkIsUUFBQTs7QUFBQTtBQUNDakMsd0JBQW9CeHJCLGNBQWMrckIsbUJBQWQsQ0FBa0MzRCxHQUFsQyxDQUFwQjtBQUNBbUQsbUJBQWVDLGtCQUFrQm5yQixHQUFqQztBQUVBb3RCLGVBQVdyRixJQUFJeGYsSUFBZjs7QUFDQTlILE1BQUVxYixJQUFGLENBQU9zUixTQUFTLFdBQVQsQ0FBUCxFQUE4QixVQUFDSSxvQkFBRDtBQUM3QixVQUFBMEUsTUFBQSxFQUFBcUIsRUFBQSxFQUFBQyxhQUFBLEVBQUFDLFlBQUEsRUFBQUMsaUJBQUEsRUFBQXJCLGtCQUFBLEVBQUFDLHlCQUFBLEVBQUF2c0IsSUFBQSxFQUFBNHBCLENBQUEsRUFBQTlnQyxDQUFBLEVBQUFrL0IsV0FBQSxFQUFBeGUsR0FBQSxFQUFBOUosUUFBQSxFQUFBOGUsV0FBQSxFQUFBOTBCLENBQUEsRUFBQStpQyxVQUFBLEVBQUF6QyxRQUFBLEVBQUEyQyxlQUFBLEVBQUFpQixTQUFBLEVBQUFDLGNBQUEsRUFBQUMsY0FBQSxFQUFBbEIsa0JBQUEsRUFBQTdSLEdBQUEsRUFBQWhhLFdBQUEsRUFBQXNvQixDQUFBLEVBQUEwRSxhQUFBLEVBQUFDLGdCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLGtCQUFBLEVBQUFDLFVBQUEsRUFBQS9ELE1BQUEsRUFBQWdFLGlCQUFBLEVBQUFsdEIsS0FBQSxFQUFBZ25CLFFBQUEsRUFBQW1HLEVBQUEsRUFBQUMsRUFBQSxFQUFBL3FCLE1BQUE7O0FBQUE3RCxpQkFBVzlGLGNBQWN5TyxXQUFkLENBQTBCb2YscUJBQXFCLEtBQXJCLENBQTFCLENBQVg7QUFFQWdGLG1CQUFhL3hCLEVBQUV5ZixJQUFGLENBQU96YSxTQUFTNkQsTUFBaEIsQ0FBYjtBQUdBeEMsb0JBQWM2cEIsa0JBQWtCQyxrQkFBbEIsQ0FBcUNuckIsU0FBU00sSUFBOUMsRUFBb0RtbEIsWUFBcEQsQ0FBZDtBQUNBamtCLGNBQVFwSCxHQUFHMnJCLE1BQUgsQ0FBVXpyQixPQUFWLENBQWtCMEYsU0FBU3dCLEtBQTNCLEVBQWtDO0FBQUUxSCxnQkFBUTtBQUFFb3NCLGtCQUFRO0FBQVY7QUFBVixPQUFsQyxDQUFSOztBQUNBLFVBQUksQ0FBSTdrQixZQUFZZ0gsUUFBWixDQUFxQixPQUFyQixDQUFMLElBQXlDLENBQUk3RyxNQUFNMGtCLE1BQU4sQ0FBYTdkLFFBQWIsQ0FBc0JvZCxZQUF0QixDQUFoRDtBQUNDLGNBQU0sSUFBSXpyQixPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixnQkFBM0IsQ0FBTjtBQ0dHOztBRERKNHlCLGlCQUFXeG9CLFNBQVN3QixLQUFwQjtBQUNBc2Qsb0JBQWNpTyxXQUFXL3NCLFFBQXpCO0FBQ0Fzb0Isb0JBQWN0b0IsU0FBU3NvQixXQUF2QjtBQUNBaUcsNkJBQXVCeEcscUJBQXFCLHNCQUFyQixDQUF2QjtBQUNBdUcseUJBQW1CdkcscUJBQXFCLGtCQUFyQixDQUFuQjtBQUNBeUcsMkJBQXFCekcscUJBQXFCLG9CQUFyQixDQUFyQjtBQUNBbUYsMkJBQXFCbHlCLEVBQUVveUIsVUFBRixDQUFhOUUsV0FBYixFQUEwQmlHLG9CQUExQixDQUFyQjtBQUNBdEIsd0JBQWtCanlCLEVBQUVveUIsVUFBRixDQUFhbUIsb0JBQWIsRUFBbUNqRyxXQUFuQyxDQUFsQjtBQUVBeUYsc0JBQWdCLEVBQWhCO0FBR0F6dEIsYUFBT3BHLGNBQWM4ZCxPQUFkLENBQXNCaFksU0FBU00sSUFBL0IsQ0FBUDtBQUNBNHRCLGtCQUFZaDBCLGNBQWMyMEIsT0FBZCxDQUFzQjd1QixRQUF0QixFQUFnQ00sSUFBaEMsRUFBc0NrdUIsa0JBQXRDLENBQVo7QUFDQUosdUJBQWlCRixVQUFVcFcsU0FBM0I7QUFDQXFXLHVCQUFpQkQsVUFBVWwrQixJQUEzQjtBQUNBZytCLHFCQUFlOXpCLGNBQWMyMEIsT0FBZCxDQUFzQjd1QixRQUF0QixFQUFnQ00sSUFBaEMsRUFBc0N5c0IsV0FBV3ZiLElBQWpELENBQWY7QUFDQXljLDBCQUFvQkQsYUFBYWxXLFNBQWpDO0FBRUFqVSxlQUFTN0QsU0FBUzZELE1BQWxCO0FBQ0E2bUIsZUFBUyxJQUFJdGlDLE1BQUosRUFBVDtBQUVBc2lDLGFBQU9oZixNQUFQLEdBQWdCeFIsY0FBYzQwQixnQkFBZCxDQUErQjl1QixRQUEvQixDQUFoQjtBQUNBcWIsWUFBTSxJQUFJamMsSUFBSixFQUFOO0FBQ0FoVyxVQUFJLENBQUo7O0FBQ0EsYUFBTUEsSUFBSXlhLE9BQU9wYyxNQUFqQjtBQUNDLFlBQUdvYyxPQUFPemEsQ0FBUCxFQUFVbVIsR0FBVixLQUFpQnd5QixXQUFXeHlCLEdBQS9CO0FBQ0MsY0FBRyxDQUFJc0osT0FBT3phLENBQVAsRUFBVWtvQixRQUFqQjtBQUNDek4sbUJBQU96YSxDQUFQLEVBQVVrb0IsUUFBVixHQUFxQixJQUFJdlgsS0FBSixFQUFyQjtBQ0ZLOztBRElObXdCLGNBQUksQ0FBSjs7QUFDQSxpQkFBTUEsSUFBSXJtQixPQUFPemEsQ0FBUCxFQUFVa29CLFFBQVYsQ0FBbUI3cEIsTUFBN0I7QUFDQyxnQkFBR29jLE9BQU96YSxDQUFQLEVBQVVrb0IsUUFBVixDQUFtQjRZLENBQW5CLEVBQXNCblosV0FBdEIsS0FBcUMsS0FBckMsSUFBK0NsTixPQUFPemEsQ0FBUCxFQUFVa29CLFFBQVYsQ0FBbUI0WSxDQUFuQixFQUFzQjM5QixJQUF0QixLQUFnQyxJQUEvRSxJQUF3RnNYLE9BQU96YSxDQUFQLEVBQVVrb0IsUUFBVixDQUFtQjRZLENBQW5CLEVBQXNCMzlCLElBQXRCLEtBQWdDLFlBQTNIO0FBQ0NzWCxxQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0J1QixVQUF0QixHQUFtQ3BRLEdBQW5DO0FBQ0F4WCxxQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0JwWSxXQUF0QixHQUFvQ3VKLEdBQXBDO0FBQ0F4WCxxQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0J5QixTQUF0QixHQUFrQ3RRLEdBQWxDO0FBQ0F4WCxxQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0IwQixRQUF0QixHQUFpQyxLQUFqQztBQUNBL25CLHFCQUFPemEsQ0FBUCxFQUFVa29CLFFBQVYsQ0FBbUI0WSxDQUFuQixFQUFzQmpZLE9BQXRCLEdBQWdDLElBQWhDO0FBQ0FwTyxxQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0JuWixXQUF0QixHQUFvQyxJQUFwQztBQUNBbE4scUJBQU96YSxDQUFQLEVBQVVrb0IsUUFBVixDQUFtQjRZLENBQW5CLEVBQXNCbmdCLEtBQXRCLEdBQThCLFlBQTlCO0FBQ0FsRyxxQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0IyQixTQUF0QixHQUFrQ2hvQixPQUFPemEsQ0FBUCxFQUFVa29CLFFBQVYsQ0FBbUI0WSxDQUFuQixFQUFzQnBZLFdBQXRCLEdBQW9Dak8sT0FBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0J1QixVQUE1RjtBQUNBc0MsNEJBQWM5OUIsSUFBZCxDQUFtQjRULE9BQU96YSxDQUFQLEVBQVVrb0IsUUFBVixDQUFtQjRZLENBQW5CLEVBQXNCdHBCLElBQXpDOztBQUdBLGtCQUFHaUQsT0FBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0JoWSxTQUF0QixLQUFtQyxJQUF0QztBQUNDeWMscUJBQUs5cUIsT0FBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsQ0FBTDtBQUNBdUUsNkJBQWF6ekIsRUFBRTRmLE1BQUYsQ0FBUy9XLE1BQVQsRUFBaUIsVUFBQ3hVLENBQUQ7QUFDN0IseUJBQU9BLEVBQUVtaUIsSUFBRixLQUFVM04sT0FBT3phLENBQVAsRUFBVW9vQixJQUEzQjtBQURZLGtCQUFiO0FBR0F4bkIsb0JBQUl5a0MsV0FBV2huQyxNQUFYLEdBQW9CLENBQXhCO0FBQ0FpbkMsb0NBQW9CLElBQXBCOztBQUVBLHVCQUFNMWtDLElBQUksQ0FBQyxDQUFYO0FBQ0NnUixvQkFBRXFiLElBQUYsQ0FBT29ZLFdBQVd6a0MsQ0FBWCxFQUFjc25CLFFBQXJCLEVBQStCLFVBQUM5SCxDQUFEO0FBQzlCLHdCQUFHQSxFQUFFNUksSUFBRixLQUFVK3RCLEdBQUcvdEIsSUFBYixJQUFxQjRJLEVBQUVPLEtBQUYsS0FBVyxZQUFoQyxJQUFnRFAsRUFBRXpDLFdBQWxELElBQWlFLENBQUMybkIsaUJBQXJFO0FDTFksNkJETVhBLG9CQUFvQmxsQixFQUFFalAsR0NOWDtBQUNEO0FER1o7O0FBR0F2UTtBQUpEOztBQU1BLG9CQUFHMGtDLGlCQUFIO0FBQ0NFLHVCQUFLLENBQUw7O0FBQ0EseUJBQU1BLEtBQUsvcUIsT0FBT3BjLE1BQWxCO0FBQ0NxbUMseUJBQUssQ0FBTDs7QUFDQSwyQkFBTUEsS0FBS2pxQixPQUFPK3FCLEVBQVAsRUFBV3RkLFFBQVgsQ0FBb0I3cEIsTUFBL0I7QUFDQywwQkFBR29jLE9BQU8rcUIsRUFBUCxFQUFXdGQsUUFBWCxDQUFvQndjLEVBQXBCLEVBQXdCdnpCLEdBQXhCLEtBQStCbTBCLGlCQUFsQztBQUNDN3FCLCtCQUFPK3FCLEVBQVAsRUFBV3RkLFFBQVgsQ0FBb0J3YyxFQUFwQixFQUF3QjViLFNBQXhCLEdBQW9DLElBQXBDO0FBQ0FyTywrQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CNFksQ0FBbkIsRUFBc0JoWSxTQUF0QixHQUFrQyxLQUFsQztBQ0hXOztBRElaNGI7QUFKRDs7QUFLQWM7QUFURjtBQWREO0FBWkQ7QUNxQ087O0FEQ1AxRTtBQXZDRDs7QUEwQ0EwQywrQkFBcUIxeUIsY0FBYzB1QixZQUFkLENBQTJCSixRQUEzQixFQUFxQy9DLFlBQXJDLENBQXJCO0FBQ0FvSCxzQ0FBNEJ6eUIsR0FBR2dwQixhQUFILENBQWlCOW9CLE9BQWpCLENBQXlCc3lCLG1CQUFtQlMsWUFBNUMsRUFBMEQ7QUFBRXZ6QixvQkFBUTtBQUFFOUosb0JBQU0sQ0FBUjtBQUFZaVAsd0JBQVU7QUFBdEI7QUFBVixXQUExRCxDQUE1QjtBQUNBb3ZCLDBCQUFnQixJQUFJam1DLE1BQUosRUFBaEI7QUFDQWltQyx3QkFBYzl6QixHQUFkLEdBQW9CLElBQUk2d0IsTUFBTUMsUUFBVixHQUFxQkMsSUFBekM7QUFDQStDLHdCQUFjcnVCLFFBQWQsR0FBeUI4ZSxXQUF6QjtBQUNBdVAsd0JBQWN0b0IsS0FBZCxHQUFzQmxDLE9BQU96YSxDQUFQLEVBQVVtUixHQUFoQztBQUNBOHpCLHdCQUFjdGQsV0FBZCxHQUE0QixJQUE1QjtBQUNBc2Qsd0JBQWN6dEIsSUFBZCxHQUFxQjZrQixZQUFyQjtBQUNBNEksd0JBQWM5QyxTQUFkLEdBQTBCN0Ysa0JBQWtCMTFCLElBQTVDO0FBQ0FxK0Isd0JBQWN2ZCxPQUFkLEdBQXdCMlUsWUFBeEI7QUFDQTRJLHdCQUFjMWMsWUFBZCxHQUE2QitULGtCQUFrQjExQixJQUEvQztBQUNBcStCLHdCQUFjN0Msb0JBQWQsR0FBcUNvQixtQkFBbUJTLFlBQXhEO0FBQ0FnQix3QkFBY3pjLHlCQUFkLEdBQTBDaWIsMEJBQTBCNzhCLElBQXBFO0FBQ0FxK0Isd0JBQWN4Yyw2QkFBZCxHQUE4Q2diLDBCQUEwQjV0QixRQUF4RTtBQUNBb3ZCLHdCQUFjNUMsVUFBZCxHQUEyQnBRLEdBQTNCO0FBQ0FnVCx3QkFBY3ZjLFdBQWQsR0FBNEJ1SixHQUE1QjtBQUNBZ1Qsd0JBQWMzQyxRQUFkLEdBQXlCN25CLE9BQU96YSxDQUFQLEVBQVVzaUMsUUFBbkM7QUFDQTJDLHdCQUFjMUMsU0FBZCxHQUEwQnRRLEdBQTFCO0FBQ0FnVCx3QkFBY3RrQixLQUFkLEdBQXNCLFdBQXRCO0FBQ0Fza0Isd0JBQWNwYyxPQUFkLEdBQXdCLElBQXhCO0FBQ0FvYyx3QkFBY3RuQixXQUFkLEdBQTRCdW5CLGdCQUE1QjtBQUNBRCx3QkFBY3pDLFFBQWQsR0FBeUIsS0FBekI7QUFDQXlDLHdCQUFjM2lCLE1BQWQsR0FBdUIsSUFBSXRqQixNQUFKLEVBQXZCO0FBQ0FpbUMsd0JBQWN4QyxTQUFkLEdBQTBCd0MsY0FBY3ZjLFdBQWQsR0FBNEJ1YyxjQUFjNUMsVUFBcEU7QUFDQTVuQixpQkFBT3phLENBQVAsRUFBVWtvQixRQUFWLENBQW1CcmhCLElBQW5CLENBQXdCbytCLGFBQXhCO0FBR0F4cUIsaUJBQU96YSxDQUFQLEVBQVUybkIsV0FBVixHQUF3QixJQUF4QjtBQUNBbE4saUJBQU96YSxDQUFQLEVBQVUwb0IsV0FBVixHQUF3QnVKLEdBQXhCO0FBQ0F4WCxpQkFBT3phLENBQVAsRUFBVTJnQixLQUFWLEdBQWtCLFdBQWxCO0FDR0k7O0FEREwzZ0I7QUEvRUQ7O0FBaUZBLFVBQUdnbEMsbUJBQWtCLEtBQXJCO0FBRUM5RCxtQkFBVyxJQUFJbGlDLE1BQUosRUFBWDtBQUNBa2lDLGlCQUFTL3ZCLEdBQVQsR0FBZSxJQUFJNndCLE1BQU1DLFFBQVYsR0FBcUJDLElBQXBDO0FBQ0FoQixpQkFBU3RxQixRQUFULEdBQW9COGUsV0FBcEI7QUFDQXdMLGlCQUFTd0Isa0JBQVQsR0FBOEIsQ0FBQ2lCLFdBQVd4eUIsR0FBWixDQUE5QjtBQUNBK3ZCLGlCQUFTdlosV0FBVCxHQUF1QixJQUF2QjtBQUNBdVosaUJBQVM5WSxJQUFULEdBQWdCZ2Qsa0JBQWhCO0FBQ0FsRSxpQkFBU3Q2QixJQUFULEdBQWdCbStCLGNBQWhCO0FBQ0E3RCxpQkFBU21CLFVBQVQsR0FBc0JwUSxHQUF0QjtBQUNBaVAsaUJBQVN4WSxXQUFULEdBQXVCdUosR0FBdkI7QUFDQWlQLGlCQUFTaFosUUFBVCxHQUFvQixFQUFwQjtBQUVBb1osZUFBTzNvQixLQUFQLEdBQWUsV0FBZjtBQUNBMm9CLGVBQU9wQyxXQUFQLEdBQXFCLEVBQXJCO0FBQ0FvQyxlQUFPaGtCLGNBQVAsR0FBd0IsWUFBeEI7QUFDQWdrQixlQUFPNVksV0FBUCxHQUFxQixJQUFJMVMsSUFBSixFQUFyQjtBQUNBc3JCLGVBQU95QixpQkFBUCxHQUEyQmdDLGNBQTNCO0FBQ0F6RCxlQUFPMEIsd0JBQVAsR0FBa0MsS0FBbEM7QUFsQkQ7QUFxQkM5QixtQkFBVyxJQUFJbGlDLE1BQUosRUFBWDtBQUNBa2lDLGlCQUFTL3ZCLEdBQVQsR0FBZSxJQUFJNndCLE1BQU1DLFFBQVYsR0FBcUJDLElBQXBDO0FBQ0FoQixpQkFBU3RxQixRQUFULEdBQW9COGUsV0FBcEI7QUFDQXdMLGlCQUFTd0Isa0JBQVQsR0FBOEIsQ0FBQ2lCLFdBQVd4eUIsR0FBWixDQUE5QjtBQUNBK3ZCLGlCQUFTdlosV0FBVCxHQUF1QixLQUF2QjtBQUNBdVosaUJBQVM5WSxJQUFULEdBQWdCZ2Qsa0JBQWhCO0FBQ0FsRSxpQkFBU3Q2QixJQUFULEdBQWdCbStCLGNBQWhCO0FBQ0E3RCxpQkFBU21CLFVBQVQsR0FBc0JwUSxHQUF0QjtBQUNBaVAsaUJBQVNvQixRQUFULEdBQW9CeHhCLGNBQWM2MEIsVUFBZCxDQUF5QmIsVUFBVWMsYUFBbkMsQ0FBcEI7QUFDQTFFLGlCQUFTaFosUUFBVCxHQUFvQixFQUFwQjs7QUFDQXRXLFVBQUVxYixJQUFGLENBQU9rWSxvQkFBUCxFQUE2QixVQUFDVSxpQkFBRCxFQUFvQkMsR0FBcEI7QUFFNUIsY0FBQTVCLEtBQUEsRUFBQUMsVUFBQSxFQUFBQyxZQUFBLEVBQUFuRCxVQUFBLEVBQUE4RSxvQkFBQSxFQUFBQyx1QkFBQSxFQUFBQyxTQUFBO0FBQUFoRix1QkFBYSxJQUFJamlDLE1BQUosRUFBYjtBQUNBaWlDLHFCQUFXOXZCLEdBQVgsR0FBaUIsSUFBSTZ3QixNQUFNQyxRQUFWLEdBQXFCQyxJQUF0QztBQUNBakIscUJBQVdycUIsUUFBWCxHQUFzQjhlLFdBQXRCO0FBQ0F1TCxxQkFBV3RrQixLQUFYLEdBQW1CdWtCLFNBQVMvdkIsR0FBNUI7QUFDQTh2QixxQkFBV3RaLFdBQVgsR0FBeUIsS0FBekI7QUFDQXNaLHFCQUFXenBCLElBQVgsR0FBa0JxdUIsaUJBQWxCO0FBRUFJLHNCQUFZajFCLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUIyMEIsaUJBQWpCLEVBQW9DO0FBQUVuMUIsb0JBQVE7QUFBRTlKLG9CQUFNO0FBQVI7QUFBVixXQUFwQyxDQUFaO0FBQ0FxNkIscUJBQVdrQixTQUFYLEdBQXVCOEQsVUFBVXIvQixJQUFqQztBQUVBdTlCLHVCQUFhMEIsaUJBQWI7QUFDQXpCLHlCQUFlNkIsU0FBZjtBQUNBL0Isa0JBQVFwekIsY0FBYzB6QixRQUFkLENBQXVCcEYsUUFBdkIsRUFBaUN5RyxpQkFBakMsQ0FBUjs7QUFDQSxjQUFHM0IsS0FBSDtBQUNDaUIsaUNBQXFCVyxHQUFyQixJQUE0QjVCLEtBQTVCO0FBQ0FDLHlCQUFhRCxLQUFiO0FBQ0FFLDJCQUFlcHpCLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUI7QUFBRUMsbUJBQUsreUI7QUFBUCxhQUFqQixFQUFpQztBQUFFeHpCLHNCQUFRO0FBQUU5SixzQkFBTTtBQUFSO0FBQVYsYUFBakMsQ0FBZjtBQUNBcTZCLHVCQUFXaUQsS0FBWCxHQUFtQkEsS0FBbkI7QUNRSzs7QUROTmpELHFCQUFXdlosT0FBWCxHQUFxQnljLFVBQXJCO0FBQ0FsRCxxQkFBVzFZLFlBQVgsR0FBMEI2YixhQUFheDlCLElBQXZDO0FBRUFtL0IsaUNBQXVCajFCLGNBQWMwdUIsWUFBZCxDQUEyQkosUUFBM0IsRUFBcUMrRSxVQUFyQyxDQUF2QjtBQUVBNkIsb0NBQTBCbDFCLGNBQWM2d0IsbUJBQWQsQ0FBa0NvRSxvQkFBbEMsQ0FBMUI7QUFDQTlFLHFCQUFXbUIsb0JBQVgsR0FBa0M0RCx3QkFBd0IsY0FBeEIsQ0FBbEM7QUFDQS9FLHFCQUFXelkseUJBQVgsR0FBdUN3ZCx3QkFBd0IsbUJBQXhCLENBQXZDO0FBQ0EvRSxxQkFBV3hZLDZCQUFYLEdBQTJDdWQsd0JBQXdCLHVCQUF4QixDQUEzQztBQUVBL0UscUJBQVdvQixVQUFYLEdBQXdCcFEsR0FBeEI7QUFDQWdQLHFCQUFXcUIsUUFBWCxHQUFzQnBCLFNBQVNvQixRQUEvQjtBQUNBckIscUJBQVdwWSxPQUFYLEdBQXFCLEtBQXJCO0FBQ0FvWSxxQkFBV3VCLFFBQVgsR0FBc0IsS0FBdEI7QUFDQXZCLHFCQUFXM2UsTUFBWCxHQUFvQixJQUFJdGpCLE1BQUosRUFBcEI7QUFDQThSLHdCQUFjMnpCLGFBQWQsQ0FBNEI3dEIsU0FBUzBMLE1BQXJDLEVBQTZDMmUsVUFBN0M7QUNLSyxpQkRKTEMsU0FBU2haLFFBQVQsQ0FBa0JyaEIsSUFBbEIsQ0FBdUJvNkIsVUFBdkIsQ0NJSztBRHpDTjs7QUF1Q0FLLGVBQU9wQyxXQUFQLEdBQXFCaUcsb0JBQXJCO0FBQ0E3RCxlQUFPM29CLEtBQVAsR0FBZSxTQUFmO0FBQ0Eyb0IsZUFBT3lCLGlCQUFQLEdBQTJCZ0MsY0FBM0I7QUFDQXpELGVBQU8wQix3QkFBUCxHQUFrQ2x5QixjQUFjbzFCLHdCQUFkLENBQXVDaHZCLEtBQUtpdkIsbUJBQTVDLEVBQWlFckIsVUFBVXNCLEtBQTNFLENBQWxDO0FDS0c7O0FESEp4dkIsZUFBUytyQixZQUFULENBQXNCOTdCLElBQXRCLENBQTJCdzFCLFlBQTNCO0FBQ0F6bEIsZUFBUytyQixZQUFULEdBQXdCL3JCLFNBQVMrckIsWUFBVCxDQUFzQnA3QixNQUF0QixDQUE2QjIzQixXQUE3QixFQUEwQzMzQixNQUExQyxDQUFpRG85QixhQUFqRCxDQUF4QjtBQUNBckQsYUFBT3FCLFlBQVAsR0FBc0Ivd0IsRUFBRW91QixJQUFGLENBQU9wcEIsU0FBUytyQixZQUFoQixDQUF0QjtBQUNBckIsYUFBT3VCLFFBQVAsR0FBa0I1USxHQUFsQjtBQUNBcVAsYUFBT3dCLFdBQVAsR0FBcUJ6RyxZQUFyQjtBQUNBaUYsYUFBT3ZvQixXQUFQLEdBQXFCLEtBQXJCO0FBQ0EwQixhQUFPNVQsSUFBUCxDQUFZcTZCLFFBQVo7QUFDQUksYUFBTzdtQixNQUFQLEdBQWdCQSxNQUFoQjs7QUFFQSxVQUFHNm1CLE9BQU8zb0IsS0FBUCxLQUFnQixXQUFuQjtBQUNDNG5CLFlBQUl2dkIsR0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFBQzl4QixlQUFLdWtCO0FBQU4sU0FBcEIsRUFBd0M7QUFBQ3dOLGdCQUFNNUI7QUFBUCxTQUF4QyxDQUFKO0FBREQ7QUFHQ2YsWUFBSXZ2QixHQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUFDOXhCLGVBQUt1a0I7QUFBTixTQUFwQixFQUF3QztBQUFDd04sZ0JBQU01QixNQUFQO0FBQWUrRSxrQkFBUTtBQUFDM2QseUJBQWE7QUFBZDtBQUF2QixTQUF4QyxDQUFKO0FDZUc7O0FEYkosVUFBRzZYLENBQUg7QUFDQzdmLGNBQU01UCxjQUFjeU8sV0FBZCxDQUEwQm1XLFdBQTFCLENBQU47QUFFQXdLLG9CQUFZa0QseUJBQVosQ0FBc0M5RyxpQkFBdEM7O0FBQ0ExcUIsVUFBRXFiLElBQUYsQ0FBTzZXLGtCQUFQLEVBQTJCLFVBQUNYLE9BQUQ7QUFDMUIsY0FBR0EsWUFBYTlHLFlBQWhCO0FDY08sbUJEYk42RCxZQUFZQywyQkFBWixDQUF3QyxjQUF4QyxFQUF3RGdELE9BQXhELENDYU07QUFDRDtBRGhCUDs7QUFLQUUsaUJBQVMsSUFBSTF5QixLQUFKLEVBQVQ7O0FBQ0EweUIsZUFBT3g4QixJQUFQLENBQVk2WixJQUFJaU0sU0FBaEI7O0FBQ0EwVyxlQUFPeDhCLElBQVAsQ0FBWTZaLElBQUkrZSxTQUFoQjs7QUFDQTRELGlCQUFTenhCLEVBQUVvdUIsSUFBRixDQUFPcUQsT0FBTzk3QixNQUFQLENBQWNtWixJQUFJaWlCLFlBQWxCLENBQVAsQ0FBVDs7QUFDQS93QixVQUFFcWIsSUFBRixDQUFPb1csTUFBUCxFQUFlLFVBQUNGLE9BQUQ7QUNjVCxpQkRiTGpELFlBQVlDLDJCQUFaLENBQXdDLGNBQXhDLEVBQXdEZ0QsT0FBeEQsQ0NhSztBRGROOztBQUtBakQsb0JBQVlFLDBCQUFaLENBQXVDLDBCQUF2QyxFQUFtRTFmLEdBQW5FLEVBQXdFd2tCLGdCQUF4RSxFQUEwRjVJLGlCQUExRjtBQ1lJLGVEVEo0RCxZQUFZUSxjQUFaLENBQTJCaGdCLElBQUl4SixJQUEvQixFQUFxQ3dKLEdBQXJDLEVBQTBDLEVBQTFDLEVBQThDLFVBQTlDLEVBQTBEMmIsWUFBMUQsRUFBd0UzYixJQUFJd2UsV0FBNUUsQ0NTSTtBQUNEO0FEN09MOztBQytPRSxXRFZGOUYsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFETixLQURELENDVUU7QURwUEgsV0FBQTRWLEtBQUE7QUE2T01uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNhRSxXRFpGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBQ2s4QixnQkFBUSxDQUFDO0FBQUNDLHdCQUFjMTNCLEVBQUUyM0I7QUFBakIsU0FBRDtBQUFUO0FBRE4sS0FERCxDQ1lFO0FBVUQ7QUR0UUgsRzs7Ozs7Ozs7Ozs7O0FFQUE5QyxXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1Qix1QkFBdkIsRUFBZ0QsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQy9DLE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBZzZCLFFBQUE7O0FBQUE7QUFDQ2pDLHdCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsQ0FBcEI7QUFDQW1ELG1CQUFlQyxrQkFBa0JuckIsR0FBakM7QUFFQW90QixlQUFXckYsSUFBSXhmLElBQWY7O0FBQ0E5SCxNQUFFcWIsSUFBRixDQUFPc1IsU0FBUyxXQUFULENBQVAsRUFBOEIsVUFBQ0ksb0JBQUQ7QUFDN0IsVUFBQS9uQixRQUFBLEVBQUE4ZSxXQUFBLEVBQUE0TCxNQUFBLEVBQUFscEIsS0FBQSxFQUFBZ25CLFFBQUEsRUFBQUMsVUFBQTtBQUFBM0osb0JBQWNpSixxQkFBcUIsS0FBckIsQ0FBZDtBQUVBL25CLGlCQUFXOUYsY0FBY3lPLFdBQWQsQ0FBMEJtVyxXQUExQixDQUFYO0FBQ0EwSixpQkFBV3hvQixTQUFTd0IsS0FBcEI7QUFFQUEsY0FBUXRILGNBQWN5dUIsUUFBZCxDQUF1QkgsUUFBdkIsQ0FBUjtBQUVBdHVCLG9CQUFjdzFCLGlDQUFkLENBQWdEMXZCLFFBQWhEO0FBRUF5b0IsbUJBQWF2dUIsY0FBYzB1QixZQUFkLENBQTJCSixRQUEzQixFQUFxQy9DLFlBQXJDLENBQWI7QUFFQXZyQixvQkFBY3kxQiwwQ0FBZCxDQUF5RDN2QixRQUF6RCxFQUFtRXlsQixZQUFuRSxFQUFpRmprQixLQUFqRjtBQUVBa3BCLGVBQVMsSUFBSXRpQyxNQUFKLEVBQVQ7QUFDQXNpQyxhQUFPdm9CLFdBQVAsR0FBcUIsSUFBckI7QUFDQXVvQixhQUFPdUIsUUFBUCxHQUFrQixJQUFJN3NCLElBQUosRUFBbEI7QUFDQXNyQixhQUFPd0IsV0FBUCxHQUFxQnpHLFlBQXJCO0FDSkcsYURNSHJyQixHQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUFDOXhCLGFBQUt1a0I7QUFBTixPQUFwQixFQUF3QztBQUFDd04sY0FBTTVCO0FBQVAsT0FBeEMsQ0NORztBRGJKOztBQ21CRSxXREVGbEksV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNFO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFETixLQURGLENDRkU7QUR4QkgsV0FBQTRWLEtBQUE7QUE2Qk1uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNDRSxXREFGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBRWs4QixnQkFBUSxDQUFDO0FBQUNDLHdCQUFjMTNCLEVBQUUyM0I7QUFBakIsU0FBRDtBQUFWO0FBRE4sS0FERCxDQ0FFO0FBVUQ7QUQxQ0gsRzs7Ozs7Ozs7Ozs7O0FFQUF0ckIsT0FBTzQxQixPQUFQLENBQWU7QUNDYixTREFEQyxPQUFPQyxlQUFQLENBQXVCQyxHQUF2QixDQUEyQixnQ0FBM0IsRUFBNkQsVUFBQ3pOLEdBQUQsRUFBTWx2QixHQUFOLEVBQVdzdkIsSUFBWDtBQUM1RCxRQUFBZ0QsaUJBQUEsRUFBQS8zQixDQUFBLEVBQUFxaUMsR0FBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQUMsU0FBQSxFQUFBcjJCLE1BQUEsRUFBQXMyQixRQUFBLEVBQUE5dkIsSUFBQSxFQUFBb3BCLE9BQUEsRUFBQTJHLFFBQUEsRUFBQTMyQixJQUFBLEVBQUE0MkIsU0FBQSxFQUFBanhCLFVBQUEsRUFBQWt4QixVQUFBLEVBQUFDLElBQUEsRUFBQUMsZUFBQSxFQUFBcFYsR0FBQSxFQUFBendCLEtBQUEsRUFBQThsQyxHQUFBLEVBQUFsWSxRQUFBLEVBQUFoWCxLQUFBLEVBQUFnbkIsUUFBQSxFQUFBaUQsVUFBQSxFQUFBbmIsR0FBQSxFQUFBNUksWUFBQSxFQUFBdEwsUUFBQSxFQUFBdTBCLGNBQUEsRUFBQXBrQyxJQUFBLEVBQUFxa0MsR0FBQSxFQUFBdnlCLFNBQUE7O0FBQUE7QUFDQ3FuQiwwQkFBb0J4ckIsY0FBYytyQixtQkFBZCxDQUFrQzNELEdBQWxDLENBQXBCO0FBRUExM0IsY0FBUTAzQixJQUFJMTNCLEtBQVo7QUFDQTQ5QixpQkFBVzU5QixNQUFNNDlCLFFBQWpCO0FBQ0FrQixnQkFBVTkrQixNQUFNOCtCLE9BQWhCO0FBQ0FuOUIsYUFBT3NrQyxTQUFTam1DLE1BQU0yQixJQUFmLENBQVA7QUFDQW9rQyx1QkFBaUJFLFNBQVNqbUMsTUFBTStsQyxjQUFmLENBQWpCO0FBRUFyd0IsYUFBT2xHLEdBQUdvRyxLQUFILENBQVNsRyxPQUFULENBQWlCO0FBQUVDLGFBQUttdkI7QUFBUCxPQUFqQixFQUFtQztBQUFFNXZCLGdCQUFRO0FBQUVKLGdCQUFNO0FBQVI7QUFBVixPQUFuQyxDQUFQO0FBQ0FBLGFBQU9VLEdBQUdDLEtBQUgsQ0FBU0MsT0FBVCxDQUFpQjtBQUFFQyxhQUFLK0YsS0FBSzVHO0FBQVosT0FBakIsRUFBcUM7QUFBRUksZ0JBQVE7QUFBRTlKLGdCQUFNLENBQVI7QUFBVyw0QkFBa0I7QUFBN0I7QUFBVixPQUFyQyxDQUFQO0FBRUFzZ0Msa0JBQVk1MkIsS0FBSzFKLElBQWpCO0FBQ0E4SixlQUFTSixLQUFLd0csT0FBTCxDQUFhcEcsTUFBdEI7QUFDQTROLHFCQUFlLElBQUkzTixLQUFKLEVBQWY7O0FBQ0FpQixRQUFFcWIsSUFBRixDQUFPM2MsS0FBS3dHLE9BQUwsQ0FBYXBHLE1BQXBCLEVBQTRCLFVBQUNxRSxLQUFEO0FBQzNCLFlBQUdBLE1BQU01UixJQUFOLEtBQWMsT0FBakI7QUNZTSxpQkRYTG1iLGFBQWF6WCxJQUFiLENBQWtCa08sS0FBbEIsQ0NXSztBQUNEO0FEZE47O0FBSUFveUIsbUJBQWEsSUFBSXgyQixLQUFKLEVBQWI7QUFDQTB4QixtQkFBYSxJQUFiO0FBQ0F5RSxpQkFBVyxJQUFYO0FBQ0E3VSxZQUFNLElBQUlqYyxJQUFKLEVBQU47QUFDQW9aLGlCQUFXO0FBQUVoWCxlQUFPZ25CLFFBQVQ7QUFBbUJsb0IsY0FBTW9wQjtBQUF6QixPQUFYO0FBQ0FsUixlQUFTelcsS0FBVCxHQUFpQjtBQUFDNlcsYUFBSyxDQUFDLFNBQUQsRUFBWSxXQUFaO0FBQU4sT0FBakI7QUFDQWdZLFlBQU1sTCxrQkFBa0JuckIsR0FBeEI7QUFDQWlILGNBQVFwSCxHQUFHMnJCLE1BQUgsQ0FBVXpyQixPQUFWLENBQWtCa3VCLFFBQWxCLENBQVI7O0FBQ0EsVUFBRyxDQUFDaG5CLEtBQUo7QUFDQ2dYLGlCQUFTelcsS0FBVCxHQUFpQixNQUFqQjtBQ2tCRzs7QURoQkosVUFBRyxDQUFDUCxNQUFNMGtCLE1BQU4sQ0FBYTdkLFFBQWIsQ0FBc0J1b0IsR0FBdEIsQ0FBSjtBQUNDUCxtQkFBVzV1QixnQkFBZ0JxdkIsd0JBQWhCLENBQXlDdEksUUFBekMsRUFBbURvSSxHQUFuRCxDQUFYOztBQUNBLFlBQUcsQ0FBQ1AsU0FBU2hvQixRQUFULENBQWtCbVEsU0FBU2xZLElBQTNCLENBQUo7QUFDQ2tZLG1CQUFTb0IsR0FBVCxHQUFlLENBQUM7QUFBQ2lQLHVCQUFXK0g7QUFBWixXQUFELEVBQW1CO0FBQUM3YSx1QkFBVzZhO0FBQVosV0FBbkIsRUFBcUM7QUFBQ3RJLHlCQUFhc0k7QUFBZCxXQUFyQyxFQUF5RDtBQUFDN0UsMEJBQWM2RTtBQUFmLFdBQXpELENBQWY7QUFIRjtBQ2dDSTs7QUQxQkosVUFBR3JrQyxTQUFRLENBQVg7QUFDQ2svQixxQkFBYSxJQUFJcnNCLElBQUosQ0FBU2ljLElBQUljLFdBQUosRUFBVCxFQUE0QmQsSUFBSTBWLFFBQUosRUFBNUIsRUFBNEMsQ0FBNUMsQ0FBYjtBQUNBdlksaUJBQVN3WSxXQUFULEdBQXVCO0FBQUVDLGdCQUFNeEY7QUFBUixTQUF2QjtBQUNBOEUscUJBQWFuMkIsR0FBR2tkLFNBQUgsQ0FBYUMsSUFBYixDQUFrQmlCLFFBQWxCLEVBQTRCO0FBQ3hDenVCLGdCQUFNO0FBQUVpbkMseUJBQWE7QUFBZjtBQURrQyxTQUE1QixFQUVWblgsS0FGVSxFQUFiO0FBSEQsYUFPSyxJQUFHdHRCLFNBQVEsQ0FBWDtBQUNKa2tDLDBCQUFrQixJQUFJcnhCLElBQUosQ0FBUyxJQUFJQSxJQUFKLENBQVNpYyxJQUFJYyxXQUFKLEVBQVQsRUFBNEJkLElBQUkwVixRQUFKLEVBQTVCLEVBQTRDLENBQTVDLElBQWlELE9BQU8sRUFBUCxHQUFZLEVBQVosR0FBaUIsRUFBM0UsQ0FBbEI7QUFDQXRGLHFCQUFhLElBQUlyc0IsSUFBSixDQUFTcXhCLGdCQUFnQnRVLFdBQWhCLEVBQVQsRUFBd0NzVSxnQkFBZ0JNLFFBQWhCLEVBQXhDLEVBQW9FLENBQXBFLENBQWI7QUFDQWIsbUJBQVcsSUFBSTl3QixJQUFKLENBQVNpYyxJQUFJYyxXQUFKLEVBQVQsRUFBNEJkLElBQUkwVixRQUFKLEVBQTVCLEVBQTRDLENBQTVDLENBQVg7QUFDQXZZLGlCQUFTd1ksV0FBVCxHQUF1QjtBQUFFQyxnQkFBTXhGLFVBQVI7QUFBb0J5RixnQkFBTWhCO0FBQTFCLFNBQXZCO0FBQ0FLLHFCQUFhbjJCLEdBQUdrZCxTQUFILENBQWFDLElBQWIsQ0FBa0JpQixRQUFsQixFQUE0QjtBQUN4Q3p1QixnQkFBTTtBQUFFaW5DLHlCQUFhO0FBQWY7QUFEa0MsU0FBNUIsRUFFVm5YLEtBRlUsRUFBYjtBQUxJLGFBU0EsSUFBR3R0QixTQUFRLENBQVg7QUFDSmsvQixxQkFBYSxJQUFJcnNCLElBQUosQ0FBU2ljLElBQUljLFdBQUosRUFBVCxFQUE0QixDQUE1QixFQUErQixDQUEvQixDQUFiO0FBQ0EzRCxpQkFBU3dZLFdBQVQsR0FBdUI7QUFBRUMsZ0JBQU14RjtBQUFSLFNBQXZCO0FBQ0E4RSxxQkFBYW4yQixHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCaUIsUUFBbEIsRUFBNEI7QUFDeEN6dUIsZ0JBQU07QUFBRWluQyx5QkFBYTtBQUFmO0FBRGtDLFNBQTVCLEVBRVZuWCxLQUZVLEVBQWI7QUFISSxhQU9BLElBQUd0dEIsU0FBUSxDQUFYO0FBQ0pna0MscUJBQWFuMkIsR0FBR2tkLFNBQUgsQ0FBYUMsSUFBYixDQUFrQmlCLFFBQWxCLEVBQTRCO0FBQ3hDenVCLGdCQUFNO0FBQUVpbkMseUJBQWE7QUFBZjtBQURrQyxTQUE1QixFQUVWblgsS0FGVSxFQUFiO0FDMENHOztBRHRDSm1XLFlBQU1tQixRQUFRLEtBQVIsQ0FBTjtBQUNBN2dCLFlBQU01UCxPQUFPQyxPQUFQLENBQWUsaUNBQWYsQ0FBTjtBQUdBc3ZCLGdCQUFVa0IsUUFBUSxVQUFSLENBQVY7QUFDQWhCLGtCQUFZRixRQUFRbUIsSUFBUixDQUFhOWdCLEdBQWIsRUFBa0IsRUFBbEIsQ0FBWjs7QUFDQSxVQUFHNmYsU0FBSDtBQUNDdjFCLGdCQUFRa0UsS0FBUixDQUFjLDBCQUFkO0FBQ0FsRSxnQkFBUWtFLEtBQVIsQ0FBY3F4QixTQUFkO0FDc0NHOztBRHBDSi96QixpQkFBVzR6QixJQUFJeHpCLE9BQUosQ0FBWThULEdBQVosQ0FBWDtBQUVBa2dCLGFBQU8sSUFBUDs7QUFDQSxVQUFHOUssa0JBQWtCdG5CLE1BQWxCLEtBQTRCLE9BQS9CO0FBQ0NveUIsZUFBTyxPQUFQO0FDcUNHOztBRG5DSm55QixrQkFBWXN5QixpQkFBaUIsQ0FBQyxFQUE5Qjs7QUFFQXR4QixtQkFBYSxVQUFDZixJQUFELEVBQU8reUIsUUFBUDtBQUNaLGVBQU8xdUIsT0FBT3JFLElBQVAsRUFBYUQsU0FBYixDQUF1QkEsU0FBdkIsRUFBa0N1RSxNQUFsQyxDQUF5Q3l1QixRQUF6QyxDQUFQO0FBRFksT0FBYjs7QUFHQVgsWUFBTXQwQixTQUFTO0FBQ2RvMEIsY0FBTUEsSUFEUTtBQUVkbnhCLG9CQUFZQSxVQUZFO0FBR2RpeEIsbUJBQVdBLFNBSEc7QUFJZHgyQixnQkFBUUEsTUFKTTtBQUtkNE4sc0JBQWNBLFlBTEE7QUFNZDZvQixvQkFBWUE7QUFORSxPQUFULENBQU47QUFTQUgsaUJBQVcscUJBQXFCenRCLFNBQVNDLE1BQVQsQ0FBZ0IsY0FBaEIsQ0FBckIsR0FBdUQsTUFBbEU7QUFDQXhQLFVBQUlrK0IsU0FBSixDQUFjLGNBQWQsRUFBOEIsMEJBQTlCO0FBQ0FsK0IsVUFBSWsrQixTQUFKLENBQWMscUJBQWQsRUFBcUMseUJBQXlCenlCLFVBQVV1eEIsUUFBVixDQUE5RDtBQ21DRyxhRGxDSGg5QixJQUFJNUgsR0FBSixDQUFRa2xDLEdBQVIsQ0NrQ0c7QURuSUosYUFBQTV4QixLQUFBO0FBa0dNblIsVUFBQW1SLEtBQUE7QUFDTGxFLGNBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCO0FDb0NHLGFEbkNIL3hCLElBQUk1SCxHQUFKLENBQVFtQyxFQUFFMjNCLE9BQVYsQ0NtQ0c7QUFDRDtBRHpJSixJQ0FDO0FEREYsRzs7Ozs7Ozs7Ozs7O0FFQUE5QyxXQUFXQyxHQUFYLENBQWUsS0FBZixFQUFzQixxQkFBdEIsRUFBNkMsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzVDLE1BQUE2TyxVQUFBLEVBQUFyb0MsSUFBQSxFQUFBeUUsQ0FBQSxFQUFBNmpDLE9BQUEsRUFBQUMsUUFBQSxFQUFBN21DLEtBQUEsRUFBQThtQyxVQUFBOztBQUFBO0FBQ0M5bUMsWUFBUTAzQixJQUFJMTNCLEtBQVo7QUFDQTJtQyxpQkFBYW4zQixHQUFHZSxXQUFILENBQWViLE9BQWYsQ0FBdUI7QUFBQ2kzQixrQkFBWTNtQyxNQUFNMm1DO0FBQW5CLEtBQXZCLENBQWI7O0FBRUEsUUFBSSxDQUFJQSxVQUFMLElBQXFCLENBQUlBLFdBQVdJLE9BQXZDO0FBQ0MsWUFBTSxJQUFJMzNCLE9BQU9wRSxLQUFYLENBQWlCLEdBQWpCLEVBQXNCLGNBQXRCLENBQU47QUNHRTs7QURESDg3QixpQkFBYTltQyxNQUFNLFlBQU4sQ0FBYjtBQUNBNG1DLGNBQVU1bUMsTUFBTSxTQUFOLENBQVY7QUFDQTZtQyxlQUFXN21DLE1BQU0sVUFBTixDQUFYO0FBRUExQixXQUFPZ1IsY0FBYzAzQixrQkFBZCxDQUFpQ0osT0FBakMsRUFBMENDLFFBQTFDLEVBQW9EQyxVQUFwRCxDQUFQO0FDRUUsV0RBRmxQLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDRTtBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUFNQTtBQUROLEtBREYsQ0NBRTtBRGJILFdBQUE0VixLQUFBO0FBZ0JNblIsUUFBQW1SLEtBQUE7QUFDTGxFLFlBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCO0FDR0UsV0RGRjNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUFNO0FBQUVrOEIsZ0JBQVEsQ0FBQztBQUFDQyx3QkFBYzEzQixFQUFFMjNCO0FBQWpCLFNBQUQ7QUFBVjtBQUROLEtBREQsQ0NFRTtBQVVEO0FEL0JILEc7Ozs7Ozs7Ozs7OztBRUFBOUMsV0FBV0MsR0FBWCxDQUFlLE1BQWYsRUFBdUIsd0JBQXZCLEVBQWlELFVBQUNILEdBQUQsRUFBTWx2QixHQUFOLEVBQVdzdkIsSUFBWDtBQUNoRCxNQUFBK0MsWUFBQSxFQUFBQyxpQkFBQSxFQUFBLzNCLENBQUEsRUFBQWc2QixRQUFBOztBQUFBO0FBQ0NqQyx3QkFBb0J4ckIsY0FBYytyQixtQkFBZCxDQUFrQzNELEdBQWxDLENBQXBCO0FBQ0FtRCxtQkFBZUMsa0JBQWtCbnJCLEdBQWpDO0FBRUFvdEIsZUFBV3JGLElBQUl4ZixJQUFmOztBQUNBOUgsTUFBRXFiLElBQUYsQ0FBT3NSLFNBQVMsV0FBVCxDQUFQLEVBQThCLFVBQUNJLG9CQUFEO0FBQzdCLFVBQUFLLFFBQUEsRUFBQTluQixJQUFBLEVBQUFrdEIsWUFBQSxFQUFBcGtDLENBQUEsRUFBQTBnQixHQUFBLEVBQUE5SixRQUFBLEVBQUE4ZSxXQUFBLEVBQUFpTyxVQUFBLEVBQUE4RSxhQUFBLEVBQUF4SCxVQUFBLEVBQUFDLFFBQUEsRUFBQWpQLEdBQUEsRUFBQW1QLGVBQUEsRUFBQXNILFFBQUEsRUFBQUMsYUFBQSxFQUFBQyxjQUFBLEVBQUFDLHVCQUFBLEVBQUFDLGlCQUFBLEVBQUFDLG1CQUFBLEVBQUFDLHNCQUFBLEVBQUF6SSxDQUFBLEVBQUEwSSxnQkFBQSxFQUFBQyxnQkFBQSxFQUFBQyxhQUFBLEVBQUE3SCxNQUFBLEVBQUFsQyxRQUFBLEVBQUFDLFVBQUEsRUFBQStKLFNBQUEsRUFBQTN1QixNQUFBO0FBQUE3RCxpQkFBVzlGLGNBQWN5TyxXQUFkLENBQTBCb2YscUJBQXFCLEtBQXJCLENBQTFCLENBQVg7QUFDQXVLLHlCQUFtQnZLLHFCQUFxQixrQkFBckIsQ0FBbkI7O0FBS0EsVUFBSSxDQUFJL25CLFNBQVMrckIsWUFBVCxDQUFzQjFqQixRQUF0QixDQUErQm9kLFlBQS9CLENBQUwsSUFBd0R6bEIsU0FBUzZvQixTQUFULEtBQXdCcEQsWUFBeEIsSUFBeUN6bEIsU0FBUytWLFNBQVQsS0FBd0IwUCxZQUE1SDtBQUNDLGNBQU0sSUFBSXpyQixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixhQUExQixDQUFOO0FDRkc7O0FESUoyOEIsc0JBQWdCLEVBQWhCO0FBRUExdUIsZUFBUzdELFNBQVM2RCxNQUFsQjtBQUdBa3BCLG1CQUFhL3hCLEVBQUV5ZixJQUFGLENBQU81VyxNQUFQLENBQWI7QUFDQWd1QixzQkFBZ0I5RSxXQUFXeHlCLEdBQTNCO0FBQ0EyM0IsMEJBQW9CbkYsV0FBV2pCLGtCQUFYLENBQThCLENBQTlCLENBQXBCO0FBQ0FrRyx1QkFBaUJoM0IsRUFBRXVjLElBQUYsQ0FBTzFULE1BQVAsRUFBZSxVQUFDeFUsQ0FBRDtBQUMvQixlQUFPQSxFQUFFa0wsR0FBRixLQUFTMjNCLGlCQUFoQjtBQURnQixRQUFqQjtBQUdBRSwrQkFBeUJKLGVBQWV4Z0IsSUFBeEM7QUFDQTJnQiw0QkFBc0JILGVBQWVoaUMsSUFBckM7QUFDQXNRLGFBQU9wRyxjQUFjOGQsT0FBZCxDQUFzQmhZLFNBQVNNLElBQS9CLENBQVA7QUFDQXl4QixzQkFBZ0I3M0IsY0FBYzIwQixPQUFkLENBQXNCN3VCLFFBQXRCLEVBQWdDTSxJQUFoQyxFQUFzQzh4QixzQkFBdEMsQ0FBaEI7O0FBQ0EsVUFBR0wsY0FBY2phLFNBQWQsS0FBMkIsYUFBOUI7QUFDQyxjQUFNLElBQUk5ZCxPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixRQUExQixDQUFOO0FDTEc7O0FEUUpxOEIsZ0NBQTBCajNCLEVBQUU0ZixNQUFGLENBQVNvWCxlQUFlMWdCLFFBQXhCLEVBQWtDLFVBQUM5SCxDQUFEO0FBQzNELGVBQU9BLEVBQUVqZCxJQUFGLEtBQVksSUFBWixJQUFxQmlkLEVBQUVqZCxJQUFGLEtBQVksWUFBakMsSUFBa0RpZCxFQUFFamQsSUFBRixLQUFZLFNBQTlELElBQTRFLENBQUMsVUFBRCxFQUFZLFdBQVosRUFBd0IsVUFBeEIsRUFBb0M4YixRQUFwQyxDQUE2Q21CLEVBQUVPLEtBQS9DLENBQW5GO0FBRHlCLFFBQTFCOztBQUdBLFVBQUdrb0Isd0JBQXdCeHFDLE1BQXhCLEtBQWtDLENBQWxDLEtBQXlDd3FDLHdCQUF3QixDQUF4QixFQUEyQnJ4QixJQUEzQixLQUFtQzZrQixZQUFuQyxJQUFtRHdNLHdCQUF3QixDQUF4QixFQUEyQm5oQixPQUEzQixLQUFzQzJVLFlBQWxJLENBQUg7QUFDQzhNLHdCQUFnQixRQUFoQjtBQ05HOztBRFFKbnBDLFVBQUl5YSxPQUFPcGMsTUFBWDtBQUNBNHFDLHlCQUFtQixFQUFuQjs7QUFDQSxhQUFNanBDLElBQUksQ0FBVjtBQUNDNFIsVUFBRXFiLElBQUYsQ0FBT3hTLE9BQU96YSxJQUFFLENBQVQsRUFBWWtvQixRQUFuQixFQUE2QixVQUFDOUgsQ0FBRDtBQUM1QixjQUFHQSxFQUFFamQsSUFBRixLQUFVLElBQVYsSUFBbUJpZCxFQUFFdUgsV0FBRixLQUFpQixJQUFwQyxJQUE2Q3ZILEVBQUU1SSxJQUFGLEtBQVU2a0IsWUFBMUQ7QUFDQzhNLDRCQUFnQixJQUFoQjtBQ05NLG1CRE9ORixtQkFBbUI3b0IsQ0NQYjtBQUNEO0FER1A7O0FBS0EsWUFBRytvQixrQkFBaUIsSUFBcEI7QUFDQztBQ0xJOztBRE9MbnBDO0FBVEQ7O0FBWUEsVUFBR21wQyxrQkFBaUIsUUFBcEI7QUFFQ2p5QixlQUFPcEcsY0FBYzhkLE9BQWQsQ0FBc0JoWSxTQUFTTSxJQUEvQixDQUFQO0FBQ0F5eEIsd0JBQWdCNzNCLGNBQWMyMEIsT0FBZCxDQUFzQjd1QixRQUF0QixFQUFnQ00sSUFBaEMsRUFBc0M4eEIsc0JBQXRDLENBQWhCO0FBQ0E1SixtQkFBV3hvQixTQUFTd0IsS0FBcEI7QUFDQXNkLHNCQUFjOWUsU0FBU3pGLEdBQXZCO0FBQ0Fpd0IsMEJBQWtCeHFCLFNBQVNzb0IsV0FBM0I7QUFDQW9DLGlCQUFTLElBQUl0aUMsTUFBSixFQUFUO0FBQ0FpekIsY0FBTSxJQUFJamMsSUFBSixFQUFOOztBQUNBcEUsVUFBRXFiLElBQUYsQ0FBT3hTLE1BQVAsRUFBZSxVQUFDeFUsQ0FBRDtBQUNkLGNBQUF1OUIsa0JBQUEsRUFBQUMseUJBQUEsRUFBQTRGLGFBQUE7O0FBQUEsY0FBR3BqQyxFQUFFa0wsR0FBRixLQUFTczNCLGFBQVo7QUFDQyxnQkFBRyxDQUFJeGlDLEVBQUVpaUIsUUFBVDtBQUNDamlCLGdCQUFFaWlCLFFBQUYsR0FBYSxJQUFJdlgsS0FBSixFQUFiO0FDTk07O0FEUVBpQixjQUFFcWIsSUFBRixDQUFPaG5CLEVBQUVpaUIsUUFBVCxFQUFtQixVQUFDb2hCLElBQUQ7QUFDbEIsa0JBQUdBLEtBQUszaEIsV0FBTCxLQUFvQixLQUFwQixJQUE4QjJoQixLQUFLbm1DLElBQUwsS0FBZSxJQUFoRDtBQUNDbW1DLHFCQUFLakgsVUFBTCxHQUFrQnBRLEdBQWxCO0FBQ0FxWCxxQkFBSzVnQixXQUFMLEdBQW1CdUosR0FBbkI7QUFDQXFYLHFCQUFLL0csU0FBTCxHQUFpQnRRLEdBQWpCO0FBQ0FxWCxxQkFBSzlHLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQThHLHFCQUFLemdCLE9BQUwsR0FBZSxJQUFmO0FBQ0F5Z0IscUJBQUszaEIsV0FBTCxHQUFtQixJQUFuQjtBQUNBMmhCLHFCQUFLM29CLEtBQUwsR0FBYSxZQUFiO0FDTlEsdUJET1Iyb0IsS0FBSzdHLFNBQUwsR0FBaUI2RyxLQUFLNWdCLFdBQUwsR0FBbUI0Z0IsS0FBS2pILFVDUGpDO0FBQ0Q7QURIVDs7QUFXQW1CLGlDQUFxQjF5QixjQUFjMHVCLFlBQWQsQ0FBMkJKLFFBQTNCLEVBQXFDL0MsWUFBckMsQ0FBckI7QUFDQW9ILHdDQUE0Qnp5QixHQUFHZ3BCLGFBQUgsQ0FBaUI5b0IsT0FBakIsQ0FBeUJzeUIsbUJBQW1CUyxZQUE1QyxFQUEwRDtBQUFFdnpCLHNCQUFRO0FBQUU5SixzQkFBTSxDQUFSO0FBQVdpUCwwQkFBVTtBQUFyQjtBQUFWLGFBQTFELENBQTVCO0FBQ0F3ekIsNEJBQWdCLElBQUlycUMsTUFBSixFQUFoQjtBQUNBcXFDLDBCQUFjbDRCLEdBQWQsR0FBb0IsSUFBSTZ3QixNQUFNQyxRQUFWLEdBQXFCQyxJQUF6QztBQUNBbUgsMEJBQWN6eUIsUUFBZCxHQUF5QjhlLFdBQXpCO0FBQ0EyVCwwQkFBYzFzQixLQUFkLEdBQXNCMVcsRUFBRWtMLEdBQXhCO0FBQ0FrNEIsMEJBQWMxaEIsV0FBZCxHQUE0QixJQUE1QjtBQUNBMGhCLDBCQUFjN3hCLElBQWQsR0FBcUI2a0IsWUFBckI7QUFDQWdOLDBCQUFjbEgsU0FBZCxHQUEwQjdGLGtCQUFrQjExQixJQUE1QztBQUNBeWlDLDBCQUFjM2hCLE9BQWQsR0FBd0IyVSxZQUF4QjtBQUNBZ04sMEJBQWM5Z0IsWUFBZCxHQUE2QitULGtCQUFrQjExQixJQUEvQztBQUNBeWlDLDBCQUFjakgsb0JBQWQsR0FBcUNvQixtQkFBbUJTLFlBQXhEO0FBQ0FvRiwwQkFBYzdnQix5QkFBZCxHQUEwQ2liLDBCQUEwQjc4QixJQUFwRTtBQUNBeWlDLDBCQUFjNWdCLDZCQUFkLEdBQThDZ2IsMEJBQTBCNXRCLFFBQXhFO0FBQ0F3ekIsMEJBQWNoSCxVQUFkLEdBQTJCcFEsR0FBM0I7QUFDQW9YLDBCQUFjM2dCLFdBQWQsR0FBNEJ1SixHQUE1QjtBQUNBb1gsMEJBQWMvRyxRQUFkLEdBQXlCcjhCLEVBQUVxOEIsUUFBM0I7QUFDQStHLDBCQUFjOUcsU0FBZCxHQUEwQnRRLEdBQTFCO0FBQ0FvWCwwQkFBYzFvQixLQUFkLEdBQXNCLFdBQXRCO0FBQ0Ewb0IsMEJBQWN4Z0IsT0FBZCxHQUF3QixJQUF4QjtBQUNBd2dCLDBCQUFjMXJCLFdBQWQsR0FBNEJ1ckIsZ0JBQTVCO0FBQ0FHLDBCQUFjN0csUUFBZCxHQUF5QixLQUF6QjtBQUNBNkcsMEJBQWMvbUIsTUFBZCxHQUF1QixJQUFJdGpCLE1BQUosRUFBdkI7QUFDQXFxQywwQkFBYzVHLFNBQWQsR0FBMEI0RyxjQUFjM2dCLFdBQWQsR0FBNEIyZ0IsY0FBY2hILFVBQXBFO0FBQ0FwOEIsY0FBRWlpQixRQUFGLENBQVdyaEIsSUFBWCxDQUFnQndpQyxhQUFoQjtBQUdBcGpDLGNBQUUwaEIsV0FBRixHQUFnQixJQUFoQjtBQUNBMWhCLGNBQUV5aUIsV0FBRixHQUFnQnVKLEdBQWhCO0FDRk0sbUJER05oc0IsRUFBRTBhLEtBQUYsR0FBVSxXQ0hKO0FBQ0Q7QUQzQ1A7O0FBZ0RBdWdCLG1CQUFXLElBQUlsaUMsTUFBSixFQUFYO0FBQ0FraUMsaUJBQVMvdkIsR0FBVCxHQUFlLElBQUk2d0IsTUFBTUMsUUFBVixHQUFxQkMsSUFBcEM7QUFDQWhCLGlCQUFTdHFCLFFBQVQsR0FBb0I4ZSxXQUFwQjtBQUNBd0wsaUJBQVN3QixrQkFBVCxHQUE4QixDQUFDK0YsYUFBRCxDQUE5QjtBQUNBdkgsaUJBQVN2WixXQUFULEdBQXVCLEtBQXZCO0FBQ0F1WixpQkFBUzlZLElBQVQsR0FBZ0I0Z0Isc0JBQWhCO0FBQ0E5SCxpQkFBU3Q2QixJQUFULEdBQWdCbWlDLG1CQUFoQjtBQUNBN0gsaUJBQVNtQixVQUFULEdBQXNCcFEsR0FBdEI7QUFDQWlQLGlCQUFTb0IsUUFBVCxHQUFvQnh4QixjQUFjNjBCLFVBQWQsQ0FBeUJnRCxjQUFjL0MsYUFBdkMsQ0FBcEI7QUFDQTFFLGlCQUFTaFosUUFBVCxHQUFvQixFQUFwQjtBQUVBK1kscUJBQWEsSUFBSWppQyxNQUFKLEVBQWI7QUFDQWlpQyxtQkFBVzl2QixHQUFYLEdBQWlCLElBQUk2d0IsTUFBTUMsUUFBVixHQUFxQkMsSUFBdEM7QUFDQWpCLG1CQUFXcnFCLFFBQVgsR0FBc0I4ZSxXQUF0QjtBQUNBdUwsbUJBQVd0a0IsS0FBWCxHQUFtQnVrQixTQUFTL3ZCLEdBQTVCO0FBQ0E4dkIsbUJBQVd0WixXQUFYLEdBQXlCLEtBQXpCO0FBQ0FzWixtQkFBV3pwQixJQUFYLEdBQWtCNmtCLFlBQWxCO0FBRUErSCx1QkFBZXB6QixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCbXJCLFlBQWpCLEVBQStCO0FBQUUzckIsa0JBQVE7QUFBRTlKLGtCQUFNO0FBQVI7QUFBVixTQUEvQixDQUFmO0FBQ0FxNkIsbUJBQVdrQixTQUFYLEdBQXVCaUMsYUFBYXg5QixJQUFwQztBQUNBcTZCLG1CQUFXdlosT0FBWCxHQUFxQjJVLFlBQXJCO0FBQ0E0RSxtQkFBVzFZLFlBQVgsR0FBMEI2YixhQUFheDlCLElBQXZDO0FBRUF5NEIscUJBQWF2dUIsY0FBYzB1QixZQUFkLENBQTJCSixRQUEzQixFQUFxQy9DLFlBQXJDLENBQWI7QUFFQXFNLG1CQUFXNTNCLGNBQWM2d0IsbUJBQWQsQ0FBa0N0QyxVQUFsQyxDQUFYO0FBQ0E0QixtQkFBV21CLG9CQUFYLEdBQWtDc0csU0FBUyxjQUFULENBQWxDO0FBQ0F6SCxtQkFBV3pZLHlCQUFYLEdBQXVDa2dCLFNBQVMsbUJBQVQsQ0FBdkM7QUFDQXpILG1CQUFXeFksNkJBQVgsR0FBMkNpZ0IsU0FBUyx1QkFBVCxDQUEzQztBQUVBekgsbUJBQVdvQixVQUFYLEdBQXdCcFEsR0FBeEI7QUFDQWdQLG1CQUFXcUIsUUFBWCxHQUFzQnBCLFNBQVNvQixRQUEvQjtBQUNBckIsbUJBQVdwWSxPQUFYLEdBQXFCLEtBQXJCO0FBQ0FvWSxtQkFBV3VCLFFBQVgsR0FBc0IsS0FBdEI7QUFDQXZCLG1CQUFXM2UsTUFBWCxHQUFvQixJQUFJdGpCLE1BQUosRUFBcEI7QUFFQThSLHNCQUFjMnpCLGFBQWQsQ0FBNEI3dEIsU0FBUzBMLE1BQXJDLEVBQTZDMmUsVUFBN0M7QUFFQUMsaUJBQVNoWixRQUFULENBQWtCcmhCLElBQWxCLENBQXVCbzZCLFVBQXZCO0FBQ0FLLGVBQU9wQyxXQUFQLEdBQXFCLENBQUM3QyxZQUFELENBQXJCO0FBRUFpRixlQUFPdUIsUUFBUCxHQUFrQjVRLEdBQWxCO0FBQ0FxUCxlQUFPd0IsV0FBUCxHQUFxQnpHLFlBQXJCO0FBQ0E1aEIsZUFBTzVULElBQVAsQ0FBWXE2QixRQUFaO0FBQ0FJLGVBQU83bUIsTUFBUCxHQUFnQkEsTUFBaEI7QUFDQTZtQixlQUFPM29CLEtBQVAsR0FBZSxTQUFmO0FBQ0Eyb0IsZUFBT3ZvQixXQUFQLEdBQXFCLEtBQXJCO0FBRUF1b0IsZUFBT3lCLGlCQUFQLEdBQTJCZ0csbUJBQTNCO0FBQ0F6SCxlQUFPMEIsd0JBQVAsR0FBa0NseUIsY0FBY28xQix3QkFBZCxDQUF1Q2h2QixLQUFLaXZCLG1CQUE1QyxFQUFpRXdDLGNBQWN2QyxLQUEvRSxDQUFsQztBQUVBN0YsWUFBSXZ2QixHQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUFDOXhCLGVBQUt1a0I7QUFBTixTQUFwQixFQUF3QztBQUFDd04sZ0JBQU01QjtBQUFQLFNBQXhDLENBQUo7O0FBQ0EsWUFBR2YsQ0FBSDtBQUVDTCxzQkFBWWtELHlCQUFaLENBQXNDOUcsaUJBQXRDOztBQUNBMXFCLFlBQUVxYixJQUFGLENBQU9tVSxlQUFQLEVBQXdCLFVBQUMrQixPQUFEO0FBQ3ZCLGdCQUFHQSxZQUFhOUcsWUFBaEI7QUNMUSxxQkRNUDZELFlBQVlDLDJCQUFaLENBQXdDLGNBQXhDLEVBQXdEZ0QsT0FBeEQsQ0NOTztBQUNEO0FER1I7O0FBS0F6aUIsZ0JBQU01UCxjQUFjeU8sV0FBZCxDQUEwQm1XLFdBQTFCLENBQU47QUNMSyxpQkRPTHdLLFlBQVlRLGNBQVosQ0FBMkJoZ0IsSUFBSXhKLElBQS9CLEVBQXFDd0osR0FBckMsRUFBMEMsRUFBMUMsRUFBOEMsVUFBOUMsRUFBMEQyYixZQUExRCxFQUF3RTNiLElBQUl3ZSxXQUE1RSxDQ1BLO0FEaEhQO0FBQUEsYUF5SEssSUFBR2lLLGtCQUFpQixJQUFwQjtBQUNKN0gsaUJBQVMsSUFBSXRpQyxNQUFKLEVBQVQ7QUFDQWl6QixjQUFNLElBQUlqYyxJQUFKLEVBQU47QUFDQTBmLHNCQUFjOWUsU0FBU3pGLEdBQXZCO0FBQ0FpNEIsb0JBQVl4M0IsRUFBRXVjLElBQUYsQ0FBTzFULE1BQVAsRUFBZSxVQUFDeFUsQ0FBRDtBQUMxQixpQkFBT0EsRUFBRWtMLEdBQUYsS0FBUzgzQixpQkFBaUJ0c0IsS0FBakM7QUFEVyxVQUFaOztBQUdBL0ssVUFBRXFiLElBQUYsQ0FBT21jLFVBQVVsaEIsUUFBakIsRUFBMkIsVUFBQzlILENBQUQ7QUFDMUIsY0FBR0EsRUFBRWpQLEdBQUYsS0FBUzgzQixpQkFBaUI5M0IsR0FBN0I7QUFDQ2lQLGNBQUV1SCxXQUFGLEdBQWdCLEtBQWhCO0FBQ0F2SCxjQUFFc0ksV0FBRixHQUFnQixNQUFoQjtBQUNBdEksY0FBRU8sS0FBRixHQUFVLE1BQVY7QUNOTSxtQkRPTlAsRUFBRXFpQixTQUFGLEdBQWMsTUNQUjtBQUNEO0FEQ1A7O0FBT0F6RCxtQkFBV3BvQixTQUFTb29CLFFBQXBCO0FBQ0FBLGlCQUFTbjRCLElBQVQsQ0FBY3cxQixZQUFkO0FBRUFpRixlQUFPdUIsUUFBUCxHQUFrQjVRLEdBQWxCO0FBQ0FxUCxlQUFPd0IsV0FBUCxHQUFxQnpHLFlBQXJCO0FBQ0FpRixlQUFPM29CLEtBQVAsR0FBZSxTQUFmO0FBQ0Eyb0IsZUFBT3ZvQixXQUFQLEdBQXFCLEtBQXJCO0FBQ0F1b0IsZUFBT3RDLFFBQVAsR0FBa0JBLFFBQWxCO0FBQ0FzQyxlQUFPLG1CQUFQLElBQThCOEgsVUFBVWxoQixRQUF4QztBQUVBcVksWUFBSXZ2QixHQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUFDOXhCLGVBQUt1a0IsV0FBTjtBQUFtQix3QkFBY3VULGlCQUFpQnRzQjtBQUFsRCxTQUFwQixFQUE4RTtBQUFDdW1CLGdCQUFNNUI7QUFBUCxTQUE5RSxDQUFKOztBQUNBLFlBQUdmLENBQUg7QUFDQ0wsc0JBQVlrRCx5QkFBWixDQUFzQzlHLGlCQUF0QztBQ0ZJOztBRElMNWIsY0FBTTVQLGNBQWN5TyxXQUFkLENBQTBCbVcsV0FBMUIsQ0FBTjtBQ0ZJLGVESUp3SyxZQUFZUSxjQUFaLENBQTJCaGdCLElBQUl4SixJQUEvQixFQUFxQ3dKLEdBQXJDLEVBQTBDLEVBQTFDLEVBQThDLFVBQTlDLEVBQTBEMmIsWUFBMUQsRUFBd0UsQ0FBQ0EsWUFBRCxDQUF4RSxDQ0pJO0FBQ0Q7QURyTUw7O0FDdU1FLFdER0ZqRCxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUROLEtBREQsQ0NIRTtBRDVNSCxXQUFBNFYsS0FBQTtBQWtOTW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQ0FFLFdEQ0YzQyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFDazhCLGdCQUFRLENBQUM7QUFBQ0Msd0JBQWMxM0IsRUFBRTIzQjtBQUFqQixTQUFEO0FBQVQ7QUFETixLQURELENDREU7QUFVRDtBRDlOSCxHOzs7Ozs7Ozs7OztBRUFBOUMsVUFBVSxDQUFDQyxHQUFYLENBQWUsTUFBZixFQUF1Qix1QkFBdkIsRUFBZ0QsVUFBVUgsR0FBVixFQUFlbHZCLEdBQWYsRUFBb0JzdkIsSUFBcEIsRUFBMEI7QUFDekUsTUFBSTtBQUNILFFBQUlnRCxpQkFBaUIsR0FBR3hyQixhQUFhLENBQUMrckIsbUJBQWQsQ0FBa0MzRCxHQUFsQyxDQUF4QjtBQUNBLFFBQUlxUSxlQUFlLEdBQUdqTixpQkFBaUIsQ0FBQ25yQixHQUF4QztBQUVBLFFBQUlvdEIsUUFBUSxHQUFHckYsR0FBRyxDQUFDeGYsSUFBbkI7QUFDQSxRQUFJZ2MsV0FBVyxHQUFHNkksUUFBUSxDQUFDN0ksV0FBM0I7QUFDQSxRQUFJMEosUUFBUSxHQUFHYixRQUFRLENBQUNhLFFBQXhCO0FBQ0EsUUFBSWtCLE9BQU8sR0FBRy9CLFFBQVEsQ0FBQytCLE9BQXZCO0FBQ0EsUUFBSWtKLDJCQUEyQixHQUFHakwsUUFBUSxDQUFDaUwsMkJBQTNDO0FBQ0EsUUFBSTdyQixXQUFXLEdBQUc0Z0IsUUFBUSxDQUFDNWdCLFdBQTNCO0FBQ0EsUUFBSThyQixvQkFBb0IsR0FBR2xMLFFBQVEsQ0FBQ2tMLG9CQUFwQztBQUNBLFFBQUlDLGFBQWEsR0FBR25MLFFBQVEsQ0FBQ21MLGFBQTdCO0FBQ0EsUUFBSUMsV0FBVyxHQUFHcEwsUUFBUSxDQUFDb0wsV0FBM0I7QUFDQSxRQUFJQyxPQUFPLEdBQUdyTCxRQUFRLENBQUNxTCxPQUF2QjtBQUNBLFFBQUlDLGVBQWUsR0FBR3RMLFFBQVEsQ0FBQ3NMLGVBQS9CO0FBRUFDLFNBQUssQ0FBQ3BVLFdBQUQsRUFBY24yQixNQUFkLENBQUw7QUFDQXVxQyxTQUFLLENBQUMxSyxRQUFELEVBQVc3L0IsTUFBWCxDQUFMO0FBQ0F1cUMsU0FBSyxDQUFDeEosT0FBRCxFQUFVL2dDLE1BQVYsQ0FBTDtBQUNBdXFDLFNBQUssQ0FBQ04sMkJBQUQsRUFBOEI1aEMsT0FBOUIsQ0FBTDtBQUNBa2lDLFNBQUssQ0FBQ25zQixXQUFELEVBQWNwZSxNQUFkLENBQUw7QUFDQXVxQyxTQUFLLENBQUNMLG9CQUFELEVBQXVCN2hDLE9BQXZCLENBQUw7QUFDQWtpQyxTQUFLLENBQUNKLGFBQUQsRUFBZ0IvNEIsS0FBaEIsQ0FBTDtBQUNBbTVCLFNBQUssQ0FBQ0gsV0FBRCxFQUFjSSxLQUFLLENBQUNDLEtBQU4sQ0FBWSxTQUFaLEVBQXVCLFlBQXZCLENBQWQsQ0FBTDtBQUVBLFFBQUlMLFdBQVcsSUFBSSxZQUFuQixFQUNDRyxLQUFLLENBQUNELGVBQUQsRUFBa0J0cUMsTUFBbEIsQ0FBTDtBQUVELFFBQUltaEIsR0FBRyxHQUFHMVAsRUFBRSxDQUFDa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQndrQixXQUFyQixDQUFWO0FBQ0EsUUFBSXVVLFlBQVksR0FBR3ZwQixHQUFHLENBQUN0SSxLQUF2QjtBQUVBLFFBQUlsQixJQUFJLEdBQUdsRyxFQUFFLENBQUNvRyxLQUFILENBQVNsRyxPQUFULENBQWlCb3ZCLE9BQWpCLENBQVg7QUFFQSxRQUFJbG9CLEtBQUssR0FBR3BILEVBQUUsQ0FBQzJyQixNQUFILENBQVV6ckIsT0FBVixDQUFrQmt1QixRQUFsQixDQUFaOztBQUVBLFFBQUksQ0FBQzFlLEdBQUQsSUFBUSxDQUFDeEosSUFBVCxJQUFpQixDQUFDa0IsS0FBdEIsRUFBNkI7QUFDNUIsWUFBTSxJQUFJeEgsTUFBTSxDQUFDcEUsS0FBWCxDQUFpQixlQUFqQixFQUFrQyxvQkFBbEMsQ0FBTjtBQUNBOztBQUVELFFBQUkwOUIsYUFBYSxHQUFHLElBQUl2NUIsS0FBSixFQUFwQjs7QUFDQSxRQUFJaUIsQ0FBQyxDQUFDNEwsT0FBRixDQUFVa3NCLGFBQVYsQ0FBSixFQUE4QjtBQUM3QlEsbUJBQWEsR0FBRyxDQUFDWCxlQUFELENBQWhCO0FBQ0EsS0FGRCxNQUVPO0FBQ05XLG1CQUFhLEdBQUdSLGFBQWhCO0FBQ0EsS0E1Q0UsQ0E4Q0g7OztBQUNBLFFBQUlTLHNCQUFzQixHQUFHLElBQUl4NUIsS0FBSixFQUE3Qjs7QUFDQWlCLEtBQUMsQ0FBQ3FiLElBQUYsQ0FBT2lkLGFBQVAsRUFBc0IsVUFBVTFDLEdBQVYsRUFBZTtBQUNwQyxVQUFJdnZCLFdBQVcsR0FBRzZwQixpQkFBaUIsQ0FBQ0Msa0JBQWxCLENBQXFDekIsT0FBckMsRUFBOENrSCxHQUE5QyxDQUFsQjs7QUFDQSxVQUFJLENBQUN2dkIsV0FBVyxDQUFDZ0gsUUFBWixDQUFxQixLQUFyQixDQUFMLEVBQWtDO0FBQ2pDO0FBQ0FrckIsOEJBQXNCLENBQUN0akMsSUFBdkIsQ0FBNEIyZ0MsR0FBNUI7QUFDQTtBQUNELEtBTkQ7O0FBT0EsUUFBSSxDQUFDNTFCLENBQUMsQ0FBQzRMLE9BQUYsQ0FBVTJzQixzQkFBVixDQUFMLEVBQXdDO0FBQ3ZDLFVBQUlDLHdCQUF3QixHQUFHLElBQUl6NUIsS0FBSixFQUEvQjtBQUNBSyxRQUFFLENBQUNxbEIsS0FBSCxDQUFTbEksSUFBVCxDQUFjO0FBQ2JoZCxXQUFHLEVBQUU7QUFDSnFlLGFBQUcsRUFBRTJhO0FBREQ7QUFEUSxPQUFkLEVBSUc7QUFDRno1QixjQUFNLEVBQUU7QUFDUDlKLGNBQUksRUFBRTtBQURDO0FBRE4sT0FKSCxFQVFHeUssT0FSSCxDQVFXLFVBQVVvVSxDQUFWLEVBQWE7QUFDdkIya0IsZ0NBQXdCLENBQUN2akMsSUFBekIsQ0FBOEI0ZSxDQUFDLENBQUM3ZSxJQUFoQztBQUNBLE9BVkQ7QUFXQSxZQUFNLElBQUlnSyxNQUFNLENBQUNwRSxLQUFYLENBQWlCLGVBQWpCLEVBQWtDLGtCQUFsQyxFQUFzRDQ5Qix3QkFBd0IsQ0FBQ2psQyxJQUF6QixDQUE4QixHQUE5QixDQUF0RCxDQUFOO0FBQ0E7O0FBRUQsUUFBSWtsQyxXQUFXLEdBQUcsSUFBSTE1QixLQUFKLEVBQWxCO0FBRUEsUUFBSTI1QixhQUFhLEdBQUcsSUFBcEI7O0FBQ0EsUUFBSVgsV0FBVyxJQUFJLFlBQW5CLEVBQWlDO0FBQ2hDLzNCLE9BQUMsQ0FBQ3FiLElBQUYsQ0FBT3ZNLEdBQUcsQ0FBQ2pHLE1BQVgsRUFBbUIsVUFBVXhVLENBQVYsRUFBYTtBQUMvQixZQUFJLENBQUNxa0MsYUFBTCxFQUFvQjtBQUNuQjE0QixXQUFDLENBQUNxYixJQUFGLENBQU9obkIsQ0FBQyxDQUFDaWlCLFFBQVQsRUFBbUIsVUFBVTlILENBQVYsRUFBYTtBQUMvQixnQkFBSSxDQUFDa3FCLGFBQUwsRUFBb0I7QUFDbkIsa0JBQUlscUIsQ0FBQyxDQUFDalAsR0FBRixJQUFTMDRCLGVBQWIsRUFDQ1MsYUFBYSxHQUFHcmtDLENBQWhCO0FBQ0Q7QUFDRCxXQUxEO0FBTUE7QUFDRCxPQVREO0FBVUEsS0FYRCxNQVdPO0FBQ05xa0MsbUJBQWEsR0FBRzE0QixDQUFDLENBQUN5ZixJQUFGLENBQU8zUSxHQUFHLENBQUNqRyxNQUFYLENBQWhCO0FBQ0E7O0FBQ0QsUUFBSTh2QixnQkFBZ0IsR0FBR0QsYUFBYSxDQUFDbjVCLEdBQXJDO0FBQ0EsUUFBSXE1QixnQkFBZ0IsR0FBRyxFQUF2QjtBQUNBLFFBQUlsVSxjQUFjLEdBQUd0bEIsRUFBRSxDQUFDcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCcTRCLGVBQWpCLEVBQWtDO0FBQ3RENzRCLFlBQU0sRUFBRTtBQUNQOUosWUFBSSxFQUFFO0FBREM7QUFEOEMsS0FBbEMsRUFJbEJBLElBSkg7QUFLQSxRQUFJNmpDLE9BQU8sR0FBRyxJQUFJenJDLE1BQUosRUFBZCxDQS9GRyxDQWlHSDs7QUFDQSxRQUFJMHJDLFVBQVUsR0FBR2hxQixHQUFHLENBQUM0QixNQUFyQjtBQUFBLFFBQ0Nxb0IsVUFBVSxHQUFHLEVBRGQ7QUFFQSxRQUFJcjZCLElBQUksR0FBR1UsRUFBRSxDQUFDQyxLQUFILENBQVNDLE9BQVQsQ0FBaUJnRyxJQUFJLENBQUM1RyxJQUF0QixDQUFYO0FBQ0EsUUFBSUksTUFBTSxHQUFHSixJQUFJLENBQUN3RyxPQUFMLENBQWFwRyxNQUFiLElBQXVCLEVBQXBDO0FBRUEsUUFBSWs2QixRQUFRLEdBQUc1NUIsRUFBRSxDQUFDQyxLQUFILENBQVNDLE9BQVQsQ0FBaUJ3UCxHQUFHLENBQUNwUSxJQUFyQixDQUFmO0FBQ0EsUUFBSXU2QixnQkFBZ0IsR0FBR25xQixHQUFHLENBQUNuUSxZQUEzQjtBQUFBLFFBQ0N1NkIsVUFBVSxHQUFHLEVBRGQ7QUFBQSxRQUVDQyxhQUFhLEdBQUcsRUFGakI7QUFJQSxRQUFJQyxzQkFBc0IsR0FBRyxFQUE3Qjs7QUFFQSxRQUFJSixRQUFRLENBQUM5ekIsT0FBVCxDQUFpQjNGLEdBQWpCLElBQXdCMDVCLGdCQUE1QixFQUE4QztBQUM3Q0MsZ0JBQVUsR0FBR0YsUUFBUSxDQUFDOXpCLE9BQVQsQ0FBaUJwRyxNQUE5QjtBQUNBLEtBRkQsTUFFTztBQUNOLFVBQUlrNkIsUUFBUSxDQUFDNXpCLFFBQWIsRUFBdUI7QUFDdEI0ekIsZ0JBQVEsQ0FBQzV6QixRQUFULENBQWtCM0YsT0FBbEIsQ0FBMEIsVUFBVXl2QixDQUFWLEVBQWE7QUFDdEMsY0FBSUEsQ0FBQyxDQUFDM3ZCLEdBQUYsSUFBUzA1QixnQkFBYixFQUNDQyxVQUFVLEdBQUdoSyxDQUFDLENBQUNwd0IsTUFBZjtBQUNELFNBSEQ7QUFJQTtBQUNEOztBQUVEQSxVQUFNLENBQUNXLE9BQVAsQ0FBZSxVQUFVMEQsS0FBVixFQUFpQjtBQUMvQixVQUFJazJCLFlBQVksR0FBR3I1QixDQUFDLENBQUN1YyxJQUFGLENBQU8yYyxVQUFQLEVBQW1CLFVBQVV4NUIsQ0FBVixFQUFhO0FBQ2xELGVBQU9BLENBQUMsQ0FBQ25PLElBQUYsSUFBVTRSLEtBQUssQ0FBQzVSLElBQWhCLElBQXdCbU8sQ0FBQyxDQUFDbUYsSUFBRixJQUFVMUIsS0FBSyxDQUFDMEIsSUFBL0M7QUFDQSxPQUZrQixDQUFuQjs7QUFHQSxVQUFJdzBCLFlBQUosRUFDQ0YsYUFBYSxDQUFDbGtDLElBQWQsQ0FBbUJrTyxLQUFuQjs7QUFDRCxVQUFJbTJCLGtCQUFrQixHQUFHdDVCLENBQUMsQ0FBQ3VjLElBQUYsQ0FBTzJjLFVBQVAsRUFBbUIsVUFBVXg1QixDQUFWLEVBQWE7QUFDeEQsZUFBT0EsQ0FBQyxDQUFDbk8sSUFBRixJQUFVLFFBQVYsSUFBc0I0UixLQUFLLENBQUM1UixJQUFOLElBQWMsT0FBcEMsSUFBK0NtTyxDQUFDLENBQUNtRixJQUFGLElBQVUxQixLQUFLLENBQUMwQixJQUF0RTtBQUNBLE9BRndCLENBQXpCOztBQUdBLFVBQUl5MEIsa0JBQUosRUFDQ0Ysc0JBQXNCLENBQUNua0MsSUFBdkIsQ0FBNEJxa0Msa0JBQTVCO0FBQ0QsS0FYRDtBQWFBRiwwQkFBc0IsQ0FBQzM1QixPQUF2QixDQUErQixVQUFVMEQsS0FBVixFQUFpQjtBQUMvQyxVQUFJMjFCLFVBQVUsQ0FBQzMxQixLQUFLLENBQUMwQixJQUFQLENBQWQsRUFBNEI7QUFDM0JrMEIsa0JBQVUsQ0FBQzUxQixLQUFLLENBQUMwQixJQUFQLENBQVYsR0FBeUJpMEIsVUFBVSxDQUFDMzFCLEtBQUssQ0FBQzBCLElBQVAsQ0FBbkM7QUFDQTtBQUNELEtBSkQ7QUFNQXMwQixpQkFBYSxDQUFDMTVCLE9BQWQsQ0FBc0IsVUFBVTBELEtBQVYsRUFBaUI7QUFDdEMsVUFBSUEsS0FBSyxDQUFDNVIsSUFBTixJQUFjLFNBQWxCLEVBQTZCO0FBQzVCLFlBQUk0UixLQUFLLENBQUNyRSxNQUFWLEVBQWtCO0FBQ2pCcUUsZUFBSyxDQUFDckUsTUFBTixDQUFhVyxPQUFiLENBQXFCLFVBQVVDLENBQVYsRUFBYTtBQUNqQztBQUNBLGdCQUFJLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IyTixRQUFsQixDQUEyQjNOLENBQUMsQ0FBQ25PLElBQTdCLEtBQXNDOG1DLFlBQVksSUFBSTdLLFFBQTFELEVBQW9FO0FBQ25FO0FBQ0E7O0FBQ0QsZ0JBQUloNEIsR0FBRyxHQUFHa0ssQ0FBQyxDQUFDbUYsSUFBWjtBQUNBLGdCQUFJMDBCLEtBQUssR0FBR1QsVUFBVSxDQUFDdGpDLEdBQUQsQ0FBdEI7O0FBQ0EsZ0JBQUkrakMsS0FBSixFQUFXO0FBQ1Y7QUFDQSxrQkFBSTc1QixDQUFDLENBQUNuTyxJQUFGLElBQVUsUUFBVixJQUFzQm1PLENBQUMsQ0FBQ25PLElBQUYsSUFBVSxPQUFwQyxFQUE2QztBQUM1QyxvQkFBSWdGLE9BQU8sR0FBR21KLENBQUMsQ0FBQ25KLE9BQUYsQ0FBVWpELEtBQVYsQ0FBZ0IsSUFBaEIsQ0FBZDtBQUNBLG9CQUFJLENBQUNpRCxPQUFPLENBQUM4VyxRQUFSLENBQWlCa3NCLEtBQWpCLENBQUwsRUFDQztBQUNEOztBQUVELGtCQUFJNzVCLENBQUMsQ0FBQ25PLElBQUYsSUFBVSxhQUFkLEVBQTZCO0FBQzVCLG9CQUFJZ0YsT0FBTyxHQUFHbUosQ0FBQyxDQUFDbkosT0FBRixDQUFVakQsS0FBVixDQUFnQixJQUFoQixDQUFkO0FBQ0Esb0JBQUlrbUMsaUJBQWlCLEdBQUdELEtBQUssQ0FBQ2ptQyxLQUFOLENBQVksR0FBWixDQUF4Qjs7QUFDQSxvQkFBSW1tQyxpQkFBaUIsR0FBR3o1QixDQUFDLENBQUN1RyxZQUFGLENBQWVoUSxPQUFmLEVBQXdCaWpDLGlCQUF4QixDQUF4Qjs7QUFDQUQscUJBQUssR0FBR0UsaUJBQWlCLENBQUNsbUMsSUFBbEIsQ0FBdUIsR0FBdkIsQ0FBUjtBQUNBOztBQUVEd2xDLHdCQUFVLENBQUN2akMsR0FBRCxDQUFWLEdBQWtCK2pDLEtBQWxCO0FBQ0E7QUFDRCxXQXhCRDtBQXlCQTtBQUNELE9BNUJELE1BNEJPLElBQUlwMkIsS0FBSyxDQUFDNVIsSUFBTixJQUFjLE9BQWxCLEVBQTJCO0FBQ2pDLFlBQUksQ0FBQ3lPLENBQUMsQ0FBQzRMLE9BQUYsQ0FBVWt0QixVQUFVLENBQUMzMUIsS0FBSyxDQUFDMEIsSUFBUCxDQUFwQixDQUFMLEVBQXdDO0FBQ3ZDazBCLG9CQUFVLENBQUM1MUIsS0FBSyxDQUFDMEIsSUFBUCxDQUFWLEdBQXlCLElBQUk5RixLQUFKLEVBQXpCO0FBQ0ErNUIsb0JBQVUsQ0FBQzMxQixLQUFLLENBQUMwQixJQUFQLENBQVYsQ0FBdUJwRixPQUF2QixDQUErQixVQUFVaTZCLG9CQUFWLEVBQWdDO0FBQzlELGdCQUFJQyxvQkFBb0IsR0FBRyxFQUEzQjs7QUFFQSxnQkFBSSxDQUFDMzVCLENBQUMsQ0FBQzRMLE9BQUYsQ0FBVXpJLEtBQUssQ0FBQ3JFLE1BQWhCLENBQUwsRUFBOEI7QUFDN0JxRSxtQkFBSyxDQUFDckUsTUFBTixDQUFhVyxPQUFiLENBQXFCLFVBQVVDLENBQVYsRUFBYTtBQUNqQztBQUNBLG9CQUFJLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IyTixRQUFsQixDQUEyQjNOLENBQUMsQ0FBQ25PLElBQTdCLEtBQXNDOG1DLFlBQVksSUFBSTdLLFFBQTFELEVBQW9FO0FBQ25FO0FBQ0E7O0FBQ0Qsb0JBQUloNEIsR0FBRyxHQUFHa0ssQ0FBQyxDQUFDbUYsSUFBWjtBQUNBLG9CQUFJMDBCLEtBQUssR0FBR0csb0JBQW9CLENBQUNsa0MsR0FBRCxDQUFoQzs7QUFDQSxvQkFBSStqQyxLQUFKLEVBQVc7QUFDVjtBQUNBLHNCQUFJNzVCLENBQUMsQ0FBQ25PLElBQUYsSUFBVSxRQUFWLElBQXNCbU8sQ0FBQyxDQUFDbk8sSUFBRixJQUFVLE9BQXBDLEVBQTZDO0FBQzVDLHdCQUFJZ0YsT0FBTyxHQUFHbUosQ0FBQyxDQUFDbkosT0FBRixDQUFVakQsS0FBVixDQUFnQixJQUFoQixDQUFkO0FBQ0Esd0JBQUksQ0FBQ2lELE9BQU8sQ0FBQzhXLFFBQVIsQ0FBaUJrc0IsS0FBakIsQ0FBTCxFQUNDO0FBQ0Q7O0FBRUQsc0JBQUk3NUIsQ0FBQyxDQUFDbk8sSUFBRixJQUFVLGFBQWQsRUFBNkI7QUFDNUIsd0JBQUlnRixPQUFPLEdBQUdtSixDQUFDLENBQUNuSixPQUFGLENBQVVqRCxLQUFWLENBQWdCLElBQWhCLENBQWQ7QUFDQSx3QkFBSWttQyxpQkFBaUIsR0FBR0QsS0FBSyxDQUFDam1DLEtBQU4sQ0FBWSxHQUFaLENBQXhCOztBQUNBLHdCQUFJbW1DLGlCQUFpQixHQUFHejVCLENBQUMsQ0FBQ3VHLFlBQUYsQ0FBZWhRLE9BQWYsRUFBd0JpakMsaUJBQXhCLENBQXhCOztBQUNBRCx5QkFBSyxHQUFHRSxpQkFBaUIsQ0FBQ2xtQyxJQUFsQixDQUF1QixHQUF2QixDQUFSO0FBQ0E7O0FBRURvbUMsc0NBQW9CLENBQUNua0MsR0FBRCxDQUFwQixHQUE0QitqQyxLQUE1QjtBQUNBO0FBQ0QsZUF4QkQ7QUF5QkE7O0FBRUQsZ0JBQUlHLG9CQUFvQixDQUFDbjZCLEdBQXpCLEVBQThCO0FBQzdCbzZCLGtDQUFvQixDQUFDcDZCLEdBQXJCLEdBQTJCLElBQUk2d0IsS0FBSyxDQUFDQyxRQUFWLEdBQXFCQyxJQUFoRDtBQUNBOztBQUVELGdCQUFJLENBQUN0d0IsQ0FBQyxDQUFDNEwsT0FBRixDQUFVK3RCLG9CQUFWLENBQUwsRUFBc0M7QUFDckNaLHdCQUFVLENBQUM1MUIsS0FBSyxDQUFDMEIsSUFBUCxDQUFWLENBQXVCNVAsSUFBdkIsQ0FBNEIwa0Msb0JBQTVCO0FBQ0E7QUFDRCxXQXRDRDtBQXVDQTtBQUNELE9BM0NNLE1BMkNBO0FBQ047QUFDQSxZQUFJLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0J0c0IsUUFBbEIsQ0FBMkJsSyxLQUFLLENBQUM1UixJQUFqQyxLQUEwQzhtQyxZQUFZLElBQUk3SyxRQUE5RCxFQUF3RTtBQUN2RTtBQUNBOztBQUNELFlBQUloNEIsR0FBRyxHQUFHMk4sS0FBSyxDQUFDMEIsSUFBaEI7QUFDQSxZQUFJMDBCLEtBQUssR0FBR1QsVUFBVSxDQUFDdGpDLEdBQUQsQ0FBdEI7O0FBQ0EsWUFBSStqQyxLQUFKLEVBQVc7QUFDVjtBQUNBLGNBQUlwMkIsS0FBSyxDQUFDNVIsSUFBTixJQUFjLFFBQWQsSUFBMEI0UixLQUFLLENBQUM1UixJQUFOLElBQWMsT0FBNUMsRUFBcUQ7QUFDcEQsZ0JBQUlnRixPQUFPLEdBQUc0TSxLQUFLLENBQUM1TSxPQUFOLENBQWNqRCxLQUFkLENBQW9CLElBQXBCLENBQWQ7QUFDQSxnQkFBSSxDQUFDaUQsT0FBTyxDQUFDOFcsUUFBUixDQUFpQmtzQixLQUFqQixDQUFMLEVBQ0M7QUFDRDs7QUFFRCxjQUFJcDJCLEtBQUssQ0FBQzVSLElBQU4sSUFBYyxhQUFsQixFQUFpQztBQUNoQyxnQkFBSWdGLE9BQU8sR0FBRzRNLEtBQUssQ0FBQzVNLE9BQU4sQ0FBY2pELEtBQWQsQ0FBb0IsSUFBcEIsQ0FBZDtBQUNBLGdCQUFJa21DLGlCQUFpQixHQUFHRCxLQUFLLENBQUNqbUMsS0FBTixDQUFZLEdBQVosQ0FBeEI7O0FBQ0EsZ0JBQUltbUMsaUJBQWlCLEdBQUd6NUIsQ0FBQyxDQUFDdUcsWUFBRixDQUFlaFEsT0FBZixFQUF3QmlqQyxpQkFBeEIsQ0FBeEI7O0FBQ0FELGlCQUFLLEdBQUdFLGlCQUFpQixDQUFDbG1DLElBQWxCLENBQXVCLEdBQXZCLENBQVI7QUFDQTs7QUFFRHdsQyxvQkFBVSxDQUFDdmpDLEdBQUQsQ0FBVixHQUFrQitqQyxLQUFsQjtBQUNBO0FBQ0Q7QUFFRCxLQWxHRCxFQTVJRyxDQWdQSDs7QUFDQSxRQUFJeEIsV0FBVyxLQUFLLFlBQXBCLEVBQWtDO0FBQ2pDLGFBQU9nQixVQUFVLENBQUNhLFdBQWxCO0FBQ0EsYUFBT2IsVUFBVSxDQUFDYyxPQUFsQjtBQUNBLEtBcFBFLENBc1BIOzs7QUFDQSxRQUFJQyxhQUFhLEdBQUcsRUFBcEI7QUFDQSxRQUFJQyxZQUFZLEdBQUdyN0IsSUFBSSxDQUFDd0csT0FBTCxDQUFhNjBCLFlBQWhDOztBQUNBLFFBQUlBLFlBQUosRUFBa0I7QUFDakIsVUFBSTtBQUNILFlBQUlDLE9BQU8sR0FBR0QsWUFBWSxDQUFDdnNDLE9BQWIsQ0FBcUIsS0FBckIsRUFBNEIsZUFBNUIsRUFBNkNBLE9BQTdDLENBQXFELEtBQXJELEVBQTRELFdBQTVELENBQWQ7QUFDQSxZQUFJdVksR0FBRyxHQUFHckUsSUFBSSxDQUFDczRCLE9BQUQsQ0FBZDtBQUNBRixxQkFBYSxHQUFHL3pCLEdBQUcsSUFBSVQsSUFBSSxDQUFDdFEsSUFBNUI7QUFDQSxPQUpELENBSUUsT0FBTzhPLEtBQVAsRUFBYztBQUNmLGNBQU0sSUFBSTlFLE1BQU0sQ0FBQ3BFLEtBQVgsQ0FBaUIsd0JBQWpCLEVBQTJDLHFCQUEzQyxDQUFOO0FBQ0E7QUFDRCxLQVJELE1BUU87QUFDTmsvQixtQkFBYSxHQUFHeDBCLElBQUksQ0FBQ3RRLElBQXJCO0FBQ0EsS0FuUUUsQ0FxUUg7OztBQUNBLFFBQUkybkIsVUFBVSxHQUFHM2MsQ0FBQyxDQUFDdWMsSUFBRixDQUFPalgsSUFBSSxDQUFDSixPQUFMLENBQWFlLEtBQXBCLEVBQTJCLFVBQVV1USxJQUFWLEVBQWdCO0FBQzNELGFBQU9BLElBQUksQ0FBQ3NHLFNBQUwsSUFBa0IsT0FBekI7QUFDQSxLQUZnQixDQUFqQixDQXRRRyxDQTBRSDs7O0FBQ0EsUUFBSW1kLGFBQWEsR0FBRyxFQUFwQjs7QUFDQSxRQUFJdjdCLElBQUksQ0FBQzhzQixRQUFULEVBQW1CO0FBQ2xCLFVBQUlBLFFBQVEsR0FBR3RzQixhQUFhLENBQUNnN0IsV0FBZCxDQUEwQng3QixJQUFJLENBQUM4c0IsUUFBL0IsQ0FBZjtBQUNBLFVBQUlBLFFBQUosRUFDQ3lPLGFBQWEsR0FBR3pPLFFBQVEsQ0FBQ3gyQixJQUF6QjtBQUNEOztBQUVEZ0wsS0FBQyxDQUFDcWIsSUFBRixDQUFPaWQsYUFBUCxFQUFzQixVQUFVL0csT0FBVixFQUFtQjtBQUV4QyxVQUFJOEMsU0FBUyxHQUFHajFCLEVBQUUsQ0FBQ3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQml5QixPQUFqQixDQUFoQjtBQUVBLFVBQUk5RCxVQUFVLEdBQUdydUIsRUFBRSxDQUFDZ3NCLFdBQUgsQ0FBZTlyQixPQUFmLENBQXVCO0FBQ3ZDa0gsYUFBSyxFQUFFZ25CLFFBRGdDO0FBRXZDNW5CLFlBQUksRUFBRTJyQjtBQUZpQyxPQUF2QixFQUdkO0FBQ0Z6eUIsY0FBTSxFQUFFO0FBQ1B1ekIsc0JBQVksRUFBRTtBQURQO0FBRE4sT0FIYyxDQUFqQjtBQVFBLFVBQUkxQyxtQkFBbUIsR0FBR3Z3QixFQUFFLENBQUNncEIsYUFBSCxDQUFpQjlvQixPQUFqQixDQUF5QjtBQUNsREMsV0FBRyxFQUFFa3VCLFVBQVUsQ0FBQzRFO0FBRGtDLE9BQXpCLEVBRXZCO0FBQ0Z2ekIsY0FBTSxFQUFFO0FBQ1A5SixjQUFJLEVBQUUsQ0FEQztBQUVQaVAsa0JBQVEsRUFBRTtBQUZIO0FBRE4sT0FGdUIsQ0FBMUI7QUFTQSxVQUFJb2MsR0FBRyxHQUFHLElBQUlqYyxJQUFKLEVBQVY7QUFDQSxVQUFJKzFCLE9BQU8sR0FBRyxFQUFkO0FBRUEsVUFBSTdILEtBQUssR0FBR3B6QixhQUFhLENBQUMwekIsUUFBZCxDQUF1QnBGLFFBQXZCLEVBQWlDK0QsT0FBakMsQ0FBWjtBQUNBLFVBQUlnQixVQUFVLEdBQUdoQixPQUFqQjtBQUNBLFVBQUlpQixZQUFZLEdBQUc2QixTQUFuQjtBQUNBLFVBQUkrRixrQkFBa0IsR0FBRzNNLFVBQXpCO0FBQ0EsVUFBSTRNLGdCQUFnQixHQUFHMUssbUJBQXZCOztBQUNBLFVBQUkyQyxLQUFKLEVBQVc7QUFDVkMsa0JBQVUsR0FBR0QsS0FBYjtBQUNBRSxvQkFBWSxHQUFHcHpCLEVBQUUsQ0FBQ3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQmd6QixLQUFqQixDQUFmO0FBQ0E4SCwwQkFBa0IsR0FBR2w3QixhQUFhLENBQUMwdUIsWUFBZCxDQUEyQkosUUFBM0IsRUFBcUM4RSxLQUFyQyxDQUFyQjtBQUNBK0gsd0JBQWdCLEdBQUduN0IsYUFBYSxDQUFDNndCLG1CQUFkLENBQWtDcUssa0JBQWxDLENBQW5CO0FBQ0E7O0FBQ0RELGFBQU8sQ0FBQzU2QixHQUFSLEdBQWNILEVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYWdlLFVBQWIsRUFBZDtBQUNBSCxhQUFPLENBQUMzekIsS0FBUixHQUFnQmduQixRQUFoQjtBQUNBMk0sYUFBTyxDQUFDNzBCLElBQVIsR0FBZW9wQixPQUFmO0FBQ0F5TCxhQUFPLENBQUM1MEIsWUFBUixHQUF1QkQsSUFBSSxDQUFDSixPQUFMLENBQWEzRixHQUFwQztBQUNBNDZCLGFBQU8sQ0FBQ3o3QixJQUFSLEdBQWU0RyxJQUFJLENBQUM1RyxJQUFwQjtBQUNBeTdCLGFBQU8sQ0FBQ3g3QixZQUFSLEdBQXVCMkcsSUFBSSxDQUFDSixPQUFMLENBQWF2RyxZQUFwQztBQUNBdzdCLGFBQU8sQ0FBQ25sQyxJQUFSLEdBQWU4a0MsYUFBZjtBQUNBSyxhQUFPLENBQUN0TSxTQUFSLEdBQW9CMEUsVUFBcEI7QUFDQTRILGFBQU8sQ0FBQ0ksY0FBUixHQUF5Qi9ILFlBQVksQ0FBQ3g5QixJQUF0QztBQUNBbWxDLGFBQU8sQ0FBQ3BmLFNBQVIsR0FBb0J3VyxPQUFwQjtBQUNBNEksYUFBTyxDQUFDOXlCLGNBQVIsR0FBeUJndEIsU0FBUyxDQUFDci9CLElBQW5DO0FBQ0FtbEMsYUFBTyxDQUFDSyxzQkFBUixHQUFpQy9NLFVBQVUsQ0FBQzRFLFlBQTVDO0FBQ0E4SCxhQUFPLENBQUNNLDJCQUFSLEdBQXNDOUssbUJBQW1CLENBQUMzNkIsSUFBMUQ7QUFDQW1sQyxhQUFPLENBQUNPLCtCQUFSLEdBQTBDL0ssbUJBQW1CLENBQUMxckIsUUFBOUQ7QUFDQWsyQixhQUFPLENBQUNwekIsS0FBUixHQUFnQixPQUFoQjtBQUNBb3pCLGFBQU8sQ0FBQ3QxQixJQUFSLEdBQWUsRUFBZjtBQUNBczFCLGFBQU8sQ0FBQ2h6QixXQUFSLEdBQXNCLEtBQXRCO0FBQ0FnekIsYUFBTyxDQUFDOU8sVUFBUixHQUFxQixLQUFyQjtBQUNBOE8sYUFBTyxDQUFDOVYsT0FBUixHQUFrQmhFLEdBQWxCO0FBQ0E4WixhQUFPLENBQUM3VixVQUFSLEdBQXFCcVQsZUFBckI7QUFDQXdDLGFBQU8sQ0FBQ2xKLFFBQVIsR0FBbUI1USxHQUFuQjtBQUNBOFosYUFBTyxDQUFDakosV0FBUixHQUFzQnlHLGVBQXRCO0FBQ0F3QyxhQUFPLENBQUM3TSxXQUFSLEdBQXNCLENBQUNpRixVQUFELENBQXRCO0FBQ0E0SCxhQUFPLENBQUN6cEIsTUFBUixHQUFpQnFvQixVQUFqQjs7QUFDQSxVQUFJaEIsV0FBVyxJQUFJLFlBQW5CLEVBQWlDO0FBQ2hDO0FBQ0EsWUFBSWpwQixHQUFHLENBQUM0Tix3QkFBUixFQUFrQztBQUNqQ3lkLGlCQUFPLENBQUN6ZCx3QkFBUixHQUFtQzVOLEdBQUcsQ0FBQzROLHdCQUF2QztBQUNBLFNBRkQsTUFFTztBQUNOeWQsaUJBQU8sQ0FBQ3pkLHdCQUFSLEdBQW1Db0gsV0FBbkM7QUFDQTs7QUFDRHFXLGVBQU8sQ0FBQ3hjLHlCQUFSLEdBQW9DM2QsQ0FBQyxDQUFDbEksS0FBRixDQUFRZ1gsR0FBRyxDQUFDNk8seUJBQVosS0FBMEMsRUFBOUU7QUFDQXdjLGVBQU8sQ0FBQ3hjLHlCQUFSLENBQWtDMW9CLElBQWxDLENBQXVDNnVCLFdBQXZDOztBQUVBLFlBQUlrVSxPQUFKLEVBQWE7QUFDWm1DLGlCQUFPLENBQUN4dkIsaUJBQVIsR0FBNEIsQ0FBQ21aLFdBQUQsQ0FBNUI7QUFDQTtBQUVELE9BZEQsTUFjTyxJQUFJaVUsV0FBVyxJQUFJLFNBQW5CLEVBQThCO0FBQ3BDb0MsZUFBTyxDQUFDUSxxQkFBUixHQUFnQzdXLFdBQWhDO0FBQ0EsT0EzRXVDLENBNkV4Qzs7O0FBQ0EsVUFBSThXLFNBQVMsR0FBRyxFQUFoQjtBQUNBQSxlQUFTLENBQUNyN0IsR0FBVixHQUFnQixJQUFJNndCLEtBQUssQ0FBQ0MsUUFBVixHQUFxQkMsSUFBckM7QUFDQXNLLGVBQVMsQ0FBQzUxQixRQUFWLEdBQXFCbTFCLE9BQU8sQ0FBQzU2QixHQUE3QjtBQUNBcTdCLGVBQVMsQ0FBQzdrQixXQUFWLEdBQXdCLEtBQXhCLENBakZ3QyxDQW1GeEM7O0FBQ0EsVUFBSThrQixPQUFKLEVBQWFDLFNBQWIsRUFBd0JqZSxvQkFBeEIsRUFBOENPLHNCQUE5QztBQUNBOVgsVUFBSSxDQUFDSixPQUFMLENBQWFlLEtBQWIsQ0FBbUJ4RyxPQUFuQixDQUEyQixVQUFVK1csSUFBVixFQUFnQjtBQUMxQyxZQUFJQSxJQUFJLENBQUNzRyxTQUFMLElBQWtCLE9BQXRCLEVBQStCO0FBQzlCK2QsaUJBQU8sR0FBR3JrQixJQUFJLENBQUNqWCxHQUFmO0FBQ0F1N0IsbUJBQVMsR0FBR3RrQixJQUFJLENBQUN4aEIsSUFBakI7QUFDQTZuQiw4QkFBb0IsR0FBR3JHLElBQUksQ0FBQ3FHLG9CQUE1QjtBQUNBTyxnQ0FBc0IsR0FBRzVHLElBQUksQ0FBQzRHLHNCQUE5QjtBQUNBO0FBQ0QsT0FQRDtBQVFBd2QsZUFBUyxDQUFDcGtCLElBQVYsR0FBaUJxa0IsT0FBakI7QUFDQUQsZUFBUyxDQUFDbkssVUFBVixHQUF1QnBRLEdBQXZCO0FBQ0F1YSxlQUFTLENBQUM1bEMsSUFBVixHQUFpQjhsQyxTQUFqQixDQS9Gd0MsQ0FpR3hDOztBQUNBLFVBQUlDLFFBQVEsR0FBRyxFQUFmO0FBQ0FBLGNBQVEsQ0FBQ3g3QixHQUFULEdBQWUsSUFBSTZ3QixLQUFLLENBQUNDLFFBQVYsR0FBcUJDLElBQXBDO0FBQ0F5SyxjQUFRLENBQUMvMUIsUUFBVCxHQUFvQm0xQixPQUFPLENBQUM1NkIsR0FBNUI7QUFDQXc3QixjQUFRLENBQUNod0IsS0FBVCxHQUFpQjZ2QixTQUFTLENBQUNyN0IsR0FBM0I7QUFDQXc3QixjQUFRLENBQUNobEIsV0FBVCxHQUF1QixLQUF2QjtBQUNBZ2xCLGNBQVEsQ0FBQ24xQixJQUFULEdBQWdCMnJCLE9BQWhCO0FBQ0F3SixjQUFRLENBQUN4SyxTQUFULEdBQXFCOEQsU0FBUyxDQUFDci9CLElBQS9CO0FBQ0ErbEMsY0FBUSxDQUFDamxCLE9BQVQsR0FBbUJ5YyxVQUFuQjtBQUNBd0ksY0FBUSxDQUFDcGtCLFlBQVQsR0FBd0I2YixZQUFZLENBQUN4OUIsSUFBckM7QUFDQStsQyxjQUFRLENBQUN2SyxvQkFBVCxHQUFnQzRKLGtCQUFrQixDQUFDL0gsWUFBbkQ7QUFDQTBJLGNBQVEsQ0FBQ25rQix5QkFBVCxHQUFxQ3lqQixnQkFBZ0IsQ0FBQ3JsQyxJQUF0RDtBQUNBK2xDLGNBQVEsQ0FBQ2xrQiw2QkFBVCxHQUF5Q3dqQixnQkFBZ0IsQ0FBQ3AyQixRQUExRDtBQUNBODJCLGNBQVEsQ0FBQ3hwQyxJQUFULEdBQWdCLE9BQWhCO0FBQ0F3cEMsY0FBUSxDQUFDdEssVUFBVCxHQUFzQnBRLEdBQXRCO0FBQ0EwYSxjQUFRLENBQUNwSyxTQUFULEdBQXFCdFEsR0FBckI7QUFDQTBhLGNBQVEsQ0FBQzlqQixPQUFULEdBQW1CLEtBQW5CO0FBQ0E4akIsY0FBUSxDQUFDbkssUUFBVCxHQUFvQixLQUFwQjtBQUVBbUssY0FBUSxDQUFDcnFCLE1BQVQsR0FBa0Jxb0IsVUFBbEI7O0FBRUEsVUFBSXpHLEtBQUosRUFBVztBQUNWeUksZ0JBQVEsQ0FBQ3pJLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0E7O0FBRURzSSxlQUFTLENBQUN0a0IsUUFBVixHQUFxQixDQUFDeWtCLFFBQUQsQ0FBckI7QUFDQVosYUFBTyxDQUFDdHhCLE1BQVIsR0FBaUIsQ0FBQyt4QixTQUFELENBQWpCO0FBRUEsVUFBSXQxQixJQUFJLENBQUMwMUIsV0FBTCxJQUFvQixJQUF4QixFQUNDYixPQUFPLENBQUNhLFdBQVIsR0FBc0IsSUFBdEI7QUFFRGIsYUFBTyxDQUFDaEosaUJBQVIsR0FBNEJ4VSxVQUFVLENBQUMzbkIsSUFBdkM7QUFFQW1sQyxhQUFPLENBQUNjLFNBQVIsR0FBb0IzMUIsSUFBSSxDQUFDdFEsSUFBekI7O0FBQ0EsVUFBSWlsQyxhQUFKLEVBQW1CO0FBQ2xCRSxlQUFPLENBQUNGLGFBQVIsR0FBd0J6TyxRQUFRLENBQUN4MkIsSUFBakM7QUFDQW1sQyxlQUFPLENBQUMzTyxRQUFSLEdBQW1CQSxRQUFRLENBQUNqc0IsR0FBNUI7QUFDQTs7QUFFRDB0QixnQkFBVSxHQUFHN3RCLEVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYTRSLE1BQWIsQ0FBb0JpTSxPQUFwQixDQUFiLENBeEl3QyxDQTBJeEM7O0FBQ0EsVUFBSWUsVUFBVSxHQUFHN2UsR0FBRyxDQUFDQyxTQUFyQixDQTNJd0MsQ0E2SXhDOztBQUNBLFVBQUlzYiwyQkFBSixFQUFpQztBQUNoQztBQUVBdUQsb0JBQVksR0FBR3Y2Qix3QkFBd0IsQ0FBQ21KLGVBQXpCLENBQXlDc3FCLFNBQXpDLEVBQW9EN0csUUFBcEQsRUFBOEQxZSxHQUE5RCxFQUFtRTtBQUNqRm5VLGtCQUFRLEVBQUU7QUFEdUUsU0FBbkUsQ0FBZjtBQUdBLFlBQUl5Z0MsWUFBWSxHQUFHLElBQUlDLEVBQUUsQ0FBQ0MsSUFBUCxFQUFuQjtBQUNBRixvQkFBWSxDQUFDRyxVQUFiLENBQXdCQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sWUFBWixFQUEwQixPQUExQixDQUF4QixFQUE0RDtBQUMzRDVwQyxjQUFJLEVBQUU7QUFEcUQsU0FBNUQsRUFFRyxVQUFVdVMsS0FBVixFQUFpQjtBQUNuQixjQUFJQSxLQUFKLEVBQVc7QUFDVixrQkFBTSxJQUFJOUUsTUFBTSxDQUFDcEUsS0FBWCxDQUFpQmtKLEtBQUssQ0FBQ0EsS0FBdkIsRUFBOEJBLEtBQUssQ0FBQzJYLE1BQXBDLENBQU47QUFDQTs7QUFFRDJmLHNCQUFZLENBQUNwbUMsSUFBYixDQUFrQjhaLEdBQUcsQ0FBQzlaLElBQUosR0FBVyxPQUE3QjtBQUNBb21DLHNCQUFZLENBQUNNLElBQWIsQ0FBa0JQLFlBQVksQ0FBQzF1QyxNQUEvQjtBQUVBLGNBQUlzeEIsUUFBUSxHQUFHO0FBQ2Q0ZCxpQkFBSyxFQUFFcEssT0FETztBQUVkcUssc0JBQVUsRUFBRXZILFNBQVMsQ0FBQ3IvQixJQUZSO0FBR2R3UixpQkFBSyxFQUFFZ25CLFFBSE87QUFJZHhvQixvQkFBUSxFQUFFaW9CLFVBSkk7QUFLZHhXLG1CQUFPLEVBQUVza0IsUUFBUSxDQUFDeDdCLEdBTEo7QUFNZDJGLG1CQUFPLEVBQUU7QUFOSyxXQUFmO0FBUUFrMkIsc0JBQVksQ0FBQ3JkLFFBQWIsR0FBd0JBLFFBQXhCO0FBQ0EsY0FBSThkLE9BQU8sR0FBR1gsVUFBVSxDQUFDaE4sTUFBWCxDQUFrQmtOLFlBQWxCLENBQWQ7QUFDQVMsaUJBQU8sQ0FBQ3hLLE1BQVIsQ0FBZTtBQUNkQyxnQkFBSSxFQUFFO0FBQ0wsaUNBQW1CdUssT0FBTyxDQUFDdDhCO0FBRHRCO0FBRFEsV0FBZjtBQUtBLFNBekJELEVBUGdDLENBa0NoQztBQUNBO0FBQ0E7QUFDQTs7QUFFRCxVQUFJczRCLG9CQUFvQixJQUFJRSxXQUFXLElBQUksU0FBM0MsRUFBc0Q7QUFDckQsWUFBSXZaLEtBQUssR0FBRzBjLFVBQVUsQ0FBQzNlLElBQVgsQ0FBZ0I7QUFDM0IsK0JBQXFCdUgsV0FETTtBQUUzQiw4QkFBb0I7QUFGTyxTQUFoQixDQUFaO0FBSUF0RixhQUFLLENBQUMvZSxPQUFOLENBQWMsVUFBVUMsQ0FBVixFQUFhO0FBQzFCO0FBQ0EsY0FBSUEsQ0FBQyxDQUFDcWUsUUFBRixDQUFXK2QsSUFBWCxJQUFtQixJQUF2QixFQUE2QjtBQUM1QixnQkFBSWpmLG9CQUFvQixJQUFJLElBQXhCLElBQWdDTyxzQkFBc0IsSUFBSSxJQUE5RCxFQUNDO0FBQ0QsV0FIRCxNQUdPO0FBQ04sZ0JBQUlBLHNCQUFzQixJQUFJLElBQTlCLEVBQ0M7QUFDRDs7QUFFRCxjQUFJMmUsT0FBTyxHQUFHLElBQUlWLEVBQUUsQ0FBQ0MsSUFBUCxFQUFkO0FBQ0FTLGlCQUFPLENBQUNSLFVBQVIsQ0FBbUI3N0IsQ0FBQyxDQUFDczhCLGdCQUFGLENBQW1CLFdBQW5CLENBQW5CLEVBQW9EO0FBQ25EenFDLGdCQUFJLEVBQUVtTyxDQUFDLENBQUN1OEIsUUFBRixDQUFXMXFDO0FBRGtDLFdBQXBELEVBRUcsVUFBVTZ6QixHQUFWLEVBQWU7QUFDakIsZ0JBQUlBLEdBQUosRUFBUztBQUNSLG9CQUFNLElBQUlwbUIsTUFBTSxDQUFDcEUsS0FBWCxDQUFpQndxQixHQUFHLENBQUN0aEIsS0FBckIsRUFBNEJzaEIsR0FBRyxDQUFDM0osTUFBaEMsQ0FBTjtBQUNBOztBQUNEc2dCLG1CQUFPLENBQUMvbUMsSUFBUixDQUFhMEssQ0FBQyxDQUFDMUssSUFBRixFQUFiO0FBQ0ErbUMsbUJBQU8sQ0FBQ0wsSUFBUixDQUFhaDhCLENBQUMsQ0FBQ2c4QixJQUFGLEVBQWI7QUFDQSxnQkFBSTNkLFFBQVEsR0FBRztBQUNkNGQsbUJBQUssRUFBRXBLLE9BRE87QUFFZHFLLHdCQUFVLEVBQUV2SCxTQUFTLENBQUNyL0IsSUFGUjtBQUdkd1IsbUJBQUssRUFBRWduQixRQUhPO0FBSWR4b0Isc0JBQVEsRUFBRWlvQixVQUpJO0FBS2R4VyxxQkFBTyxFQUFFc2tCLFFBQVEsQ0FBQ3g3QixHQUxKO0FBTWQyRixxQkFBTyxFQUFFO0FBTkssYUFBZjs7QUFRQSxnQkFBSXhGLENBQUMsQ0FBQ3FlLFFBQUYsQ0FBVytkLElBQVgsSUFBbUIsSUFBbkIsSUFBMkJqZixvQkFBb0IsSUFBSSxJQUF2RCxFQUE2RDtBQUM1RGtCLHNCQUFRLENBQUMrZCxJQUFULEdBQWdCLElBQWhCO0FBQ0E7O0FBQ0RDLG1CQUFPLENBQUNoZSxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBLGdCQUFJOGQsT0FBTyxHQUFHWCxVQUFVLENBQUNoTixNQUFYLENBQWtCNk4sT0FBbEIsQ0FBZDtBQUNBRixtQkFBTyxDQUFDeEssTUFBUixDQUFlO0FBQ2RDLGtCQUFJLEVBQUU7QUFDTCxtQ0FBbUJ1SyxPQUFPLENBQUN0OEI7QUFEdEI7QUFEUSxhQUFmO0FBS0EsV0ExQkQ7QUE0QkEsU0F2Q0Q7QUF3Q0EsT0FsT3VDLENBb094Qzs7O0FBQ0EsVUFBSW00QixJQUFJLEdBQUc7QUFDVixlQUFPLElBQUl0SCxLQUFLLENBQUNDLFFBQVYsR0FBcUJDLElBRGxCO0FBRVYsb0JBQVl4TSxXQUZGO0FBR1YsaUJBQVM2VSxnQkFIQztBQUlWLHVCQUFlLElBSkw7QUFLVixnQkFBUXBILE9BTEU7QUFNVixxQkFBYThDLFNBQVMsQ0FBQ3IvQixJQU5iO0FBT1YsbUJBQVd1OEIsT0FQRDtBQVFWLHdCQUFnQjhDLFNBQVMsQ0FBQ3IvQixJQVJoQjtBQVNWLGdDQUF3Qnk0QixVQUFVLENBQUM0RSxZQVR6QjtBQVVWLHFDQUE2QjFDLG1CQUFtQixDQUFDMzZCLElBVnZDO0FBV1YseUNBQWlDMjZCLG1CQUFtQixDQUFDMXJCLFFBWDNDO0FBWVYsZ0JBQVE4ekIsV0FaRTtBQWFWLHNCQUFjLElBQUkzekIsSUFBSixFQWJKO0FBY1YsdUJBQWUsSUFBSUEsSUFBSixFQWRMO0FBZVYsbUJBQVcsS0FmRDtBQWdCVixpQkFBUyxXQWhCQztBQWlCVixxQkFBYXV6QixlQWpCSDtBQWtCViwwQkFBa0JqVCxjQWxCUjtBQW1CVix5QkFBaUI4SSxRQW5CUDtBQW9CViw0QkFBb0JQLFVBcEJWO0FBcUJWLHVCQUFlbGhCLFdBckJMO0FBc0JWLDJCQUFtQmtzQjtBQXRCVCxPQUFYO0FBeUJBVyxzQkFBZ0IsQ0FBQzNqQyxJQUFqQixDQUFzQnlpQyxJQUF0QjtBQUVBZSxpQkFBVyxDQUFDeGpDLElBQVosQ0FBaUJnNEIsVUFBakI7QUFDQXFCLGlCQUFXLENBQUNDLDJCQUFaLENBQXdDLGNBQXhDLEVBQXdEZ0QsT0FBeEQ7QUFDQSxLQWxRRDs7QUFvUUFzSCxXQUFPLENBQUM1SCxRQUFSLEdBQW1CLElBQUk3c0IsSUFBSixFQUFuQjtBQUNBeTBCLFdBQU8sQ0FBQzNILFdBQVIsR0FBc0J5RyxlQUF0QjtBQUNBLFFBQUloSixDQUFDLEdBQUd2dkIsRUFBRSxDQUFDa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUMzQjl4QixTQUFHLEVBQUV1a0IsV0FEc0I7QUFFM0Isb0JBQWM2VTtBQUZhLEtBQXBCLEVBR0w7QUFDRnJILFVBQUksRUFBRXVILE9BREo7QUFFRnFELGVBQVMsRUFBRTtBQUNWLDZCQUFxQjtBQUNwQkMsZUFBSyxFQUFFdkQ7QUFEYTtBQURYO0FBRlQsS0FISyxDQUFSOztBQVlBLFFBQUlqSyxDQUFKLEVBQU87QUFDTjN1QixPQUFDLENBQUNxYixJQUFGLENBQU9xZCxhQUFhLENBQUNwaUIsUUFBckIsRUFBK0IsVUFBVTlILENBQVYsRUFBYTBsQixHQUFiLEVBQWtCO0FBQ2hELFlBQUkxbEIsQ0FBQyxDQUFDalAsR0FBRixJQUFTMDRCLGVBQWIsRUFBOEI7QUFDN0IsY0FBSW1FLFdBQVcsR0FBRyxFQUFsQjtBQUNBQSxxQkFBVyxDQUFDLHVCQUF1QmxJLEdBQXZCLEdBQTZCLFlBQTlCLENBQVgsR0FBeUQsSUFBSTl2QixJQUFKLEVBQXpEO0FBQ0FoRixZQUFFLENBQUNrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQ25COXhCLGVBQUcsRUFBRXVrQixXQURjO0FBRW5CLDBCQUFjNlU7QUFGSyxXQUFwQixFQUdHO0FBQ0ZySCxnQkFBSSxFQUFFOEs7QUFESixXQUhIO0FBTUE7QUFDRCxPQVhEO0FBYUE7O0FBRUQ1VSxjQUFVLENBQUNLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxVQUFJLEVBQUUsR0FEb0I7QUFFMUIzVyxVQUFJLEVBQUU7QUFBRXVxQyxtQkFBVyxFQUFFQTtBQUFmO0FBRm9CLEtBQTNCO0FBSUEsR0F4akJELENBd2pCRSxPQUFPOWxDLENBQVAsRUFBVTtBQUNYaU4sV0FBTyxDQUFDa0UsS0FBUixDQUFjblIsQ0FBQyxDQUFDdzNCLEtBQWhCO0FBQ0EzQyxjQUFVLENBQUNLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxVQUFJLEVBQUUsR0FEb0I7QUFFMUIzVyxVQUFJLEVBQUU7QUFDTGs4QixjQUFNLEVBQUUsQ0FBQ3ozQixDQUFEO0FBREg7QUFGb0IsS0FBM0I7QUFNQTtBQUVELENBbmtCRCxFOzs7Ozs7Ozs7Ozs7QUNBQTYwQixXQUFXQyxHQUFYLENBQWUsS0FBZixFQUFzQixvQ0FBdEIsRUFBNEQsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzNELE1BQUE3WSxHQUFBLEVBQUE4b0IsZUFBQSxFQUFBak4saUJBQUEsRUFBQS8zQixDQUFBLEVBQUEwcEMsTUFBQSxFQUFBdnRCLEdBQUEsRUFBQXd0QixLQUFBLEVBQUFqMkIsV0FBQSxFQUFBazJCLFVBQUEsRUFBQUMsYUFBQSxFQUFBNzhCLEdBQUEsRUFBQWtHLElBQUEsRUFBQXNRLElBQUEsRUFBQXNtQixTQUFBLEVBQUFqMkIsS0FBQSxFQUFBb2hCLE9BQUE7O0FBQUE7QUFDQzhDLHdCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsRUFBdUNsdkIsR0FBdkMsQ0FBcEI7QUFDQXUvQixzQkFBa0JqTixrQkFBa0JuckIsR0FBcEM7QUFDQWs5QixnQkFBWXo4QixFQUFFaEgsR0FBRixDQUFNc3VCLElBQUkxM0IsS0FBVixFQUFpQixPQUFqQixDQUFaO0FBQ0Ewc0MsWUFBUWhWLElBQUlvVixNQUFKLENBQVcxdUIsVUFBbkI7QUFFQWMsVUFBTTFQLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCZzlCLEtBQXJCLEVBQTRCO0FBQUV4OUIsY0FBUTtBQUFFMEgsZUFBTyxDQUFUO0FBQVlsQixjQUFNLENBQWxCO0FBQXFCeUIsZUFBTyxDQUE1QjtBQUErQnVtQixxQkFBYSxDQUE1QztBQUErQ0Ysa0JBQVUsQ0FBekQ7QUFBNEQyRCxzQkFBYyxDQUExRTtBQUE2RWxELG1CQUFXLENBQXhGO0FBQTJGOVMsbUJBQVc7QUFBdEc7QUFBVixLQUE1QixDQUFOOztBQUVBLFFBQUcsQ0FBSWpNLEdBQVA7QUFDQyxZQUFNLElBQUk5UCxPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQiw2Q0FBMUIsQ0FBTjtBQ1dFOztBRFRIZ3RCLGNBQVU5WSxJQUFJdEksS0FBZDtBQUNBNjFCLGFBQVN2dEIsSUFBSXhKLElBQWI7O0FBRUEsUUFBR2xHLEdBQUdnc0IsV0FBSCxDQUFlN08sSUFBZixDQUFvQjtBQUFFL1YsYUFBT29oQixPQUFUO0FBQWtCaGlCLFlBQU0reEI7QUFBeEIsS0FBcEIsRUFBK0RuYixLQUEvRCxPQUEwRSxDQUE3RTtBQUNDLFlBQU0sSUFBSXhkLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLG1DQUExQixDQUFOO0FDYUU7O0FEWEhpVSxVQUFNLEVBQU47O0FBRUEsUUFBRyxFQUFBbFAsTUFBQW1QLElBQUF3ZSxXQUFBLFlBQUEzdEIsSUFBa0IwTixRQUFsQixDQUEyQnNxQixlQUEzQixJQUFDLE1BQUQsTUFBK0MsQ0FBQTl4QixPQUFBaUosSUFBQXNlLFFBQUEsWUFBQXZuQixLQUFld0gsUUFBZixDQUF3QnNxQixlQUF4QixJQUFDLE1BQWhELENBQUg7QUFDQzlvQixZQUFNLE9BQU47QUFERCxXQUVLLEtBQUFzSCxPQUFBckgsSUFBQWlpQixZQUFBLFlBQUE1YSxLQUFxQjlJLFFBQXJCLENBQThCc3FCLGVBQTlCLElBQUcsTUFBSDtBQUNKOW9CLFlBQU0sUUFBTjtBQURJLFdBRUEsSUFBR0MsSUFBSS9ILEtBQUosS0FBYSxPQUFiLElBQXlCK0gsSUFBSStlLFNBQUosS0FBaUI4SixlQUE3QztBQUNKOW9CLFlBQU0sT0FBTjtBQURJLFdBRUEsSUFBR0MsSUFBSS9ILEtBQUosS0FBYSxTQUFiLEtBQTRCK0gsSUFBSStlLFNBQUosS0FBaUI4SixlQUFqQixJQUFvQzdvQixJQUFJaU0sU0FBSixLQUFpQjRjLGVBQWpGLENBQUg7QUFDSjlvQixZQUFNLFNBQU47QUFESSxXQUVBLElBQUdDLElBQUkvSCxLQUFKLEtBQWEsV0FBYixJQUE2QitILElBQUkrZSxTQUFKLEtBQWlCOEosZUFBakQ7QUFDSjlvQixZQUFNLFdBQU47QUFESTtBQUlKeEksb0JBQWM2cEIsa0JBQWtCQyxrQkFBbEIsQ0FBcUNrTSxNQUFyQyxFQUE2QzFFLGVBQTdDLENBQWQ7QUFDQW54QixjQUFRcEgsR0FBRzJyQixNQUFILENBQVV6ckIsT0FBVixDQUFrQnNvQixPQUFsQixFQUEyQjtBQUFFOW9CLGdCQUFRO0FBQUVvc0Isa0JBQVE7QUFBVjtBQUFWLE9BQTNCLENBQVI7O0FBQ0EsVUFBSSxDQUFJN2tCLFlBQVlnSCxRQUFaLENBQXFCLE9BQXJCLENBQUwsSUFBeUMsQ0FBSTdHLE1BQU0wa0IsTUFBTixDQUFhN2QsUUFBYixDQUFzQnNxQixlQUF0QixDQUFoRDtBQUNDLGNBQU0sSUFBSTM0QixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixnQkFBMUIsQ0FBTjtBQ2VHOztBRGRKaVUsWUFBTSxTQUFOO0FDZ0JFOztBRGRIMHRCLGlCQUFhLG9CQUFrQjNVLE9BQWxCLEdBQTBCLEdBQTFCLEdBQTZCL1ksR0FBN0IsR0FBaUMsR0FBakMsR0FBb0N5dEIsS0FBakQ7QUFDQUUsb0JBQWdCeDlCLE9BQU9pRSxXQUFQLENBQW1CczVCLFVBQW5CLENBQWhCOztBQUNBLFFBQUdFLFNBQUg7QUFDQyxhQUFPcmtDLElBQUl1a0MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzNCLGtCQUFVLEdBRGlCO0FBRTNCLG9CQUFZTDtBQUZlLE9BQXJCLENBQVA7QUFERDtBQU1DbmtDLFVBQUlrK0IsU0FBSixDQUFjLFVBQWQsRUFBMEJrRyxhQUExQjtBQUNBcGtDLFVBQUl5a0MsU0FBSixDQUFjLEdBQWQ7QUFDQXprQyxVQUFJNUgsR0FBSjtBQS9DRjtBQUFBLFdBQUFzVCxLQUFBO0FBaURNblIsUUFBQW1SLEtBQUE7QUFDTGxFLFlBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCO0FDaUJFLFdEaEJGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBRWs4QixnQkFBUSxDQUFDO0FBQUNDLHdCQUFjMTNCLEVBQUUyM0I7QUFBakIsU0FBRDtBQUFWO0FBRE4sS0FERCxDQ2dCRTtBQVVEO0FEOUVILEc7Ozs7Ozs7Ozs7OztBRUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1REE5QyxXQUFXQyxHQUFYLENBQWUsS0FBZixFQUFzQiw0QkFBdEIsRUFBb0QsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQ25ELE1BQUFvVixNQUFBLEVBQUFucUMsQ0FBQSxFQUFBc2tCLE9BQUEsRUFBQThsQixLQUFBLEVBQUFDLGNBQUEsRUFBQXB0QyxLQUFBLEVBQUErUCxHQUFBLEVBQUFrRyxJQUFBLEVBQUFzUSxJQUFBLEVBQUFDLElBQUEsRUFBQUcsSUFBQSxFQUFBMG1CLElBQUEsRUFBQUMsZ0JBQUEsRUFBQTEyQixLQUFBLEVBQUFnbkIsUUFBQSxFQUFBMlAsV0FBQSxFQUFBQyxlQUFBLEVBQUEzTSxVQUFBLEVBQUE1YyxDQUFBLEVBQUEraEIsR0FBQSxFQUFBckUsT0FBQSxFQUFBOEwsTUFBQSxFQUFBL3RDLFFBQUEsRUFBQWd1QyxtQkFBQTs7QUFBQTtBQUVDLFFBQUcsQ0FBQ3Q2QixRQUFRdTZCLHNCQUFSLENBQStCalcsR0FBL0IsRUFBb0NsdkIsR0FBcEMsQ0FBSjtBQUNDO0FDRUU7O0FEQUhvMUIsZUFBV2xHLElBQUlrVyxPQUFKLENBQVksWUFBWixPQUFBNzlCLE1BQUEybkIsSUFBQTEzQixLQUFBLFlBQUErUCxJQUF3Q2lvQixPQUF4QyxHQUF3QyxNQUF4QyxDQUFYOztBQUVBLFFBQUcsQ0FBSTRGLFFBQVA7QUFDQyxZQUFNLElBQUl4dUIsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsZUFBMUIsQ0FBTjtBQ0NFOztBRENIMjJCLGNBQVVqSyxJQUFJN1IsTUFBZDs7QUFFQSxRQUFHLENBQUM4YixPQUFKO0FBQ0MsWUFBTSxJQUFJdnlCLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGVBQTFCLENBQU47QUNBRTs7QURFSCxRQUFHd0UsR0FBR3FsQixLQUFILENBQVNsSSxJQUFULENBQWM7QUFBRWhkLFdBQUtneUI7QUFBUCxLQUFkLEVBQWdDL1UsS0FBaEMsT0FBMkMsQ0FBOUM7QUFDQyxZQUFNLElBQUl4ZCxPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixtQkFBMUIsQ0FBTjtBQ0VFOztBREFIbWlDLFlBQUEsRUFBQWwzQixPQUFBeWhCLElBQUExM0IsS0FBQSxZQUFBaVcsS0FBbUJrM0IsS0FBbkIsR0FBbUIsTUFBbkIsS0FBNEIsR0FBNUI7QUFFQUEsWUFBUWxILFNBQVNrSCxLQUFULENBQVI7QUFFQXp0QyxlQUFBLENBQUE2bUIsT0FBQW1SLElBQUExM0IsS0FBQSxZQUFBdW1CLEtBQXNCN21CLFFBQXRCLEdBQXNCLE1BQXRCO0FBRUErdEMsYUFBQSxDQUFBam5CLE9BQUFrUixJQUFBMTNCLEtBQUEsWUFBQXdtQixLQUFvQmluQixNQUFwQixHQUFvQixNQUFwQjtBQUVBUCxhQUFBLENBQUF2bUIsT0FBQStRLElBQUExM0IsS0FBQSxZQUFBMm1CLEtBQW9CdW1CLE1BQXBCLEdBQW9CLE1BQXBCO0FBRUFRLDBCQUFBLENBQUFMLE9BQUEzVixJQUFBMTNCLEtBQUEsWUFBQXF0QyxLQUFpQ0ssbUJBQWpDLEdBQWlDLE1BQWpDO0FBR0E5MkIsWUFBUXRILGNBQWN5dUIsUUFBZCxDQUF1QkgsUUFBdkIsQ0FBUjtBQUtBNFA7O0FBQ0EsUUFBRzUyQixNQUFNMGtCLE1BQU4sQ0FBYTdkLFFBQWIsQ0FBc0Jra0IsT0FBdEIsQ0FBSDtBQUNDLFVBQUc4TCxNQUFIO0FBQ0MsWUFBR2orQixHQUFHcWxCLEtBQUgsQ0FBU2xJLElBQVQsQ0FBYztBQUFFaGQsZUFBSzg5QjtBQUFQLFNBQWQsRUFBK0I3Z0IsS0FBL0IsS0FBeUMsQ0FBNUM7QUFDQyxnQkFBTSxJQUFJeGQsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsa0NBQWdDeWlDLE1BQTFELENBQU47QUNQSTs7QURTTEQsMEJBQWtCQyxNQUFsQjtBQUpELGFBS0ssSUFBRy90QyxRQUFIO0FBQ0p1a0IsWUFBSXpVLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUI7QUFBRWhRLG9CQUFVQTtBQUFaLFNBQWpCLEVBQXlDO0FBQUV3UCxrQkFBUTtBQUFFUyxpQkFBSztBQUFQO0FBQVYsU0FBekMsQ0FBSjs7QUFDQSxZQUFHUyxFQUFFNEwsT0FBRixDQUFVaUksQ0FBVixDQUFIO0FBQ0MsZ0JBQU0sSUFBSTdVLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLG9DQUFrQ3RMLFFBQTVELENBQU47QUNESTs7QURHTDh0QywwQkFBa0J2cEIsRUFBRXRVLEdBQXBCO0FBWEY7QUNXRzs7QURFSDI5Qix1QkFBbUIsSUFBSW4rQixLQUFKLEVBQW5CO0FBRUFrWSxjQUFVLEtBQVY7QUFDQXdaLGlCQUFhLEVBQWI7QUFDQW1GLFVBQU1yRSxPQUFOO0FBQ0EzaEMsWUFBUTtBQUNQZ3ZCLFdBQUssQ0FBQztBQUFFME8scUJBQWFpRTtBQUFmLE9BQUQsRUFBMkI7QUFBRW5FLGtCQUFVbUU7QUFBWixPQUEzQjtBQURFLEtBQVI7O0FBSUEsUUFBRzZMLGVBQUg7QUFDQ3hILFlBQU13SCxlQUFOO0FBQ0F4dEMsY0FBUTtBQUNQNFcsZUFBT2duQixRQURBO0FBRVA1TyxhQUFLLENBQUM7QUFBRTBPLHVCQUFhOFA7QUFBZixTQUFELEVBQW1DO0FBQUVoUSxvQkFBVWdRO0FBQVosU0FBbkM7QUFGRSxPQUFSO0FDYUU7O0FEUkgsUUFBR0UsbUJBQUg7QUFDQzF0QyxZQUFNNDdCLFFBQU4sR0FBaUI7QUFBRTVOLGFBQUswZixvQkFBb0JocUMsS0FBcEIsQ0FBMEIsR0FBMUI7QUFBUCxPQUFqQjtBQ1lFOztBRFZINnBDLGtCQUFjLEVBQWQ7QUFDQUEsZ0JBQVkzMkIsTUFBTWpILEdBQWxCLElBQXlCaUgsTUFBTXhSLElBQS9COztBQUVBLFFBQUcrbkMsUUFBUSxDQUFYO0FBQ0MzOUIsU0FBR2tkLFNBQUgsQ0FBYUMsSUFBYixDQUFrQjNzQixLQUFsQixFQUF5QjtBQUFFYixjQUFNO0FBQUVraUMsb0JBQVUsQ0FBQztBQUFiLFNBQVI7QUFBMEI4TCxlQUFPQTtBQUFqQyxPQUF6QixFQUFtRXQ5QixPQUFuRSxDQUEyRSxVQUFDclIsQ0FBRDtBQUUxRSxZQUFBOGdDLENBQUEsRUFBQXVPLElBQUEsRUFBQUMsSUFBQTs7QUFBQSxhQUFBRCxPQUFBcnZDLEVBQUFrL0IsV0FBQSxZQUFBbVEsS0FBa0Jwd0IsUUFBbEIsQ0FBMkJ1b0IsR0FBM0IsSUFBRyxNQUFIO0FBQ0M1MUIsWUFBRXFiLElBQUYsQ0FBT2p0QixFQUFFeWEsTUFBVCxFQUFpQixVQUFDeFUsQ0FBRDtBQUNoQixnQkFBR0EsRUFBRTBoQixXQUFGLEtBQWlCLEtBQXBCO0FDZ0JRLHFCRGZQL1YsRUFBRXFiLElBQUYsQ0FBT2huQixFQUFFaWlCLFFBQVQsRUFBbUIsVUFBQzlILENBQUQ7QUFDbEIsb0JBQUdBLEVBQUU1SSxJQUFGLEtBQVVnd0IsR0FBVixJQUFrQnBuQixFQUFFamQsSUFBRixLQUFZLElBQTlCLElBQXVDLENBQUlpZCxFQUFFdUgsV0FBaEQ7QUFDQ2tCLDRCQUFVekksRUFBRXlJLE9BQVo7QUNnQlMseUJEZlR3WixhQUFhamlCLEVBQUVpaUIsVUNlTjtBQUNEO0FEbkJWLGdCQ2VPO0FBTUQ7QUR2QlI7QUFERDtBQVFDendCLFlBQUVxYixJQUFGLENBQU9qdEIsRUFBRXlhLE1BQVQsRUFBaUIsVUFBQ3hVLENBQUQ7QUFDaEIsZ0JBQUcsQ0FBSW84QixVQUFKLElBQW1CcDhCLEVBQUVpaUIsUUFBeEI7QUNvQlEscUJEbkJQdFcsRUFBRXFiLElBQUYsQ0FBT2huQixFQUFFaWlCLFFBQVQsRUFBbUIsVUFBQzlILENBQUQ7QUFDbEIsb0JBQUcsQ0FBSWlpQixVQUFKLElBQW1CamlCLEVBQUU1SSxJQUFGLEtBQVVnd0IsR0FBN0IsSUFBcUNwbkIsRUFBRWpkLElBQUYsS0FBVSxJQUEvQyxJQUF3RCxDQUFJaWQsRUFBRXVILFdBQWpFO0FBQ0NrQiw0QkFBVXpJLEVBQUV5SSxPQUFaO0FDb0JTLHlCRG5CVHdaLGFBQWFqaUIsRUFBRWlpQixVQ21CTjtBQUNEO0FEdkJWLGdCQ21CTztBQU1EO0FEM0JSO0FDNkJJOztBRHRCTCxZQUFHLENBQUkwTSxZQUFZL3VDLEVBQUVvWSxLQUFkLENBQVA7QUFDQzIyQixzQkFBWS91QyxFQUFFb1ksS0FBZCxLQUFBazNCLE9BQUF0K0IsR0FBQTJyQixNQUFBLENBQUF6ckIsT0FBQSxDQUFBbFIsRUFBQW9ZLEtBQUE7QUN3Qk8xSCxvQkFBUTtBQUNOOUosb0JBQU07QUFEQTtBRHhCZixpQkMyQlksSUQzQlosR0MyQm1CMG9DLEtEM0J5RDFvQyxJQUE1RSxHQUE0RSxNQUE1RTtBQzRCSTs7QUQxQkxrNkIsWUFBSSxJQUFJOWhDLE1BQUosRUFBSjtBQUNBOGhDLFVBQUUsSUFBRixJQUFVOWdDLEVBQUUsS0FBRixDQUFWO0FBQ0E4Z0MsVUFBRSxZQUFGLElBQWtCdUIsVUFBbEI7QUFDQXZCLFVBQUUsV0FBRixJQUFpQjlnQyxFQUFFNnNDLFNBQW5CO0FBQ0EvTCxVQUFFLFlBQUYsSUFBa0JpTyxZQUFZL3VDLEVBQUVvWSxLQUFkLENBQWxCO0FBQ0Ewb0IsVUFBRSxNQUFGLElBQVk5Z0MsRUFBRSxNQUFGLENBQVo7QUFDQThnQyxVQUFFLGdCQUFGLElBQXNCOWdDLEVBQUUsZ0JBQUYsQ0FBdEI7QUFDQThnQyxVQUFFLDZCQUFGLElBQW1DOWdDLEVBQUUsNkJBQUYsQ0FBbkM7QUFDQThnQyxVQUFFLGFBQUYsSUFBbUI5Z0MsRUFBRSxhQUFGLENBQW5CO0FBQ0E4Z0MsVUFBRSxXQUFGLElBQWlCOWdDLEVBQUUraUMsaUJBQW5CO0FBQ0FqQyxVQUFFLFVBQUYsSUFBZ0I5Z0MsRUFBRW9ZLEtBQWxCO0FBQ0Ewb0IsVUFBRSxVQUFGLElBQWdCOWdDLEVBQUUsVUFBRixDQUFoQjtBQUNBOGdDLFVBQUUsU0FBRixJQUFlalksT0FBZjtBQUNBaVksVUFBRSxRQUFGLElBQWM5Z0MsRUFBRSxRQUFGLENBQWQ7O0FBRUEsWUFBRzB1QyxXQUFVLE1BQWI7QUFDQzVOLFlBQUV2USxXQUFGLEdBQWdCdEMsSUFBSUMsU0FBSixDQUFjQyxJQUFkLENBQW1CO0FBQUUsaUNBQXFCbnVCLEVBQUVtUixHQUF6QjtBQUE4QixnQ0FBb0IsSUFBbEQ7QUFBd0QsbUNBQXVCO0FBQUVrZSxtQkFBSztBQUFQO0FBQS9FLFdBQW5CLEVBQW1IO0FBQUUzZSxvQkFBUTtBQUFFNitCLHNCQUFRO0FBQVY7QUFBVixXQUFuSCxFQUE4STllLEtBQTlJLEVBQWhCO0FDcUNJOztBQUNELGVEcENKcWUsaUJBQWlCam9DLElBQWpCLENBQXNCaTZCLENBQXRCLENDb0NJO0FEMUVMO0FDNEVFOztBRHBDSDhOLHFCQUFpQjU5QixHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCM3NCLEtBQWxCLEVBQXlCNHNCLEtBQXpCLEVBQWpCO0FDc0NFLFdEcENGZ0wsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFlBQU0sR0FEb0I7QUFFMUIzVyxZQUFNO0FBQUV5dUMsZ0JBQVEsU0FBVjtBQUFxQnp1QyxjQUFNZ3ZDLGdCQUEzQjtBQUE2QzFnQixlQUFPd2dCO0FBQXBEO0FBRm9CLEtBQTNCLENDb0NFO0FEdkpILFdBQUFsNUIsS0FBQTtBQXVITW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQzBDRSxXRHpDRjNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxZQUFNLEdBRG9CO0FBRTFCM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBRUMsd0JBQWMxM0IsRUFBRThvQjtBQUFsQixTQUFEO0FBQVY7QUFGb0IsS0FBM0IsQ0N5Q0U7QUFVRDtBRDdLSCxHOzs7Ozs7Ozs7Ozs7QUV2REEsSUFBQW1pQixPQUFBO0FBQUFBLFVBQVV6SCxRQUFRLFNBQVIsQ0FBVjtBQUVBbjNCLE9BQU80MUIsT0FBUCxDQUFlO0FDR2IsU0RGREMsT0FBT0MsZUFBUCxDQUF1QkMsR0FBdkIsQ0FBMkIscUNBQTNCLEVBQWtFLFVBQUN6TixHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDakUsUUFBQW1XLFNBQUEsRUFBQXB5QyxPQUFBLEVBQUF5QyxJQUFBLEVBQUFrbkMsUUFBQSxFQUFBOXZCLElBQUEsRUFBQSsyQixNQUFBLEVBQUEzOUIsSUFBQSxFQUFBaUIsR0FBQSxFQUFBa0csSUFBQSxFQUFBVyxLQUFBLEVBQUFpUCxNQUFBO0FBQUFocUIsY0FBVSxJQUFJbXlDLE9BQUosQ0FBYXRXLEdBQWIsRUFBa0JsdkIsR0FBbEIsQ0FBVjs7QUFFQSxRQUFHa3ZCLElBQUl4ZixJQUFQO0FBQ0MyTixlQUFTNlIsSUFBSXhmLElBQUosQ0FBUyxXQUFULENBQVQ7QUFDQSsxQixrQkFBWXZXLElBQUl4ZixJQUFKLENBQVMsY0FBVCxDQUFaO0FDR0U7O0FEQUgsUUFBRyxDQUFDMk4sTUFBRCxJQUFXLENBQUNvb0IsU0FBZjtBQUNDcG9CLGVBQVNocUIsUUFBUXVPLEdBQVIsQ0FBWSxXQUFaLENBQVQ7QUFDQTZqQyxrQkFBWXB5QyxRQUFRdU8sR0FBUixDQUFZLGNBQVosQ0FBWjtBQ0VFOztBREFILFFBQUcsRUFBRXliLFVBQVdvb0IsU0FBYixDQUFIO0FBQ0N6bEMsVUFBSXlrQyxTQUFKLENBQWMsR0FBZDtBQUNBemtDLFVBQUk1SCxHQUFKLENBQVE4YSxLQUFLQyxTQUFMLENBQWU7QUFDdEIsaUJBQVMsMENBRGE7QUFFdEIsbUJBQVc7QUFGVyxPQUFmLENBQVI7QUFJQTtBQ0VFOztBREFIOHdCLGFBQUEsQ0FBQTE4QixNQUFBMm5CLElBQUExM0IsS0FBQSxZQUFBK1AsSUFBb0IyRixJQUFwQixHQUFvQixNQUFwQjtBQUVBQSxXQUFPbEcsR0FBR29HLEtBQUgsQ0FBU2xHLE9BQVQsQ0FBaUI7QUFBQ0MsV0FBSzg4QjtBQUFOLEtBQWpCLEVBQWdDO0FBQUN2OUIsY0FBUTtBQUFDMEgsZUFBTyxDQUFSO0FBQVc5SCxjQUFNLENBQWpCO0FBQW9CMUosY0FBTTtBQUExQjtBQUFULEtBQWhDLENBQVA7QUFFQTBKLFdBQU9VLEdBQUdDLEtBQUgsQ0FBU0MsT0FBVCxDQUFpQjtBQUFDQyxXQUFLK0YsS0FBSzVHO0FBQVgsS0FBakIsRUFBbUM7QUFBQ0ksY0FBUTtBQUFDMEgsZUFBTyxDQUFSO0FBQVcsdUJBQWU7QUFBMUI7QUFBVCxLQUFuQyxDQUFQOztBQUVBLFFBQUd4RyxFQUFFNEwsT0FBRixDQUFVdEcsSUFBVixDQUFIO0FBQ0NsTixVQUFJeWtDLFNBQUosQ0FBYyxHQUFkO0FBQ0F6a0MsVUFBSTVILEdBQUosQ0FBUThhLEtBQUtDLFNBQUwsQ0FBZTtBQUN0QixpQkFBUyxvQ0FEYTtBQUV0QixtQkFBVztBQUZXLE9BQWYsQ0FBUjtBQUlBO0FBTkQ7QUFRQyxVQUFHLENBQUN2SSxRQUFRODZCLFlBQVIsQ0FBcUJ4NEIsS0FBS2tCLEtBQTFCLEVBQWlDaVAsTUFBakMsQ0FBSjtBQUNDcmQsWUFBSXlrQyxTQUFKLENBQWMsR0FBZDtBQUNBemtDLFlBQUk1SCxHQUFKLENBQVE4YSxLQUFLQyxTQUFMLENBQWU7QUFDdEIsbUJBQVMsbUNBRGE7QUFFdEIscUJBQVc7QUFGVyxTQUFmLENBQVI7QUFJQTtBQ2NHOztBRFpKL0UsY0FBUXBILEdBQUcyckIsTUFBSCxDQUFVenJCLE9BQVYsQ0FBa0JnRyxLQUFLa0IsS0FBdkIsRUFBOEI7QUFBRTFILGdCQUFRO0FBQUVpL0IsbUJBQVM7QUFBWDtBQUFWLE9BQTlCLENBQVI7O0FBQ0EsVUFBRyxFQUFBdjNCLFNBQUEsT0FBQ0EsTUFBT3UzQixPQUFSLEdBQVEsTUFBUixDQUFIO0FBQ0N2VyxtQkFBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxnQkFBTSxHQUFOO0FBQ0EzVyxnQkFDQztBQUFBLHFCQUFTLHFDQUFUO0FBQ0EsdUJBQVc7QUFEWDtBQUZELFNBREQ7QUFLQTtBQXZCRjtBQzRDRzs7QURuQkhBLFdBQU9nYSxnQkFBZ0JzRSxtQkFBaEIsQ0FBb0M7QUFBQzlOLFlBQU00RyxLQUFLNUcsSUFBWjtBQUFrQkMsb0JBQUFELFFBQUEsUUFBQW1ILE9BQUFuSCxLQUFBd0csT0FBQSxZQUFBVyxLQUE2QnRHLEdBQTdCLEdBQTZCLE1BQTdCLEdBQTZCO0FBQS9DLEtBQXBDLEVBQXlGLElBQXpGLENBQVA7QUFFQTYxQixlQUFXOXZCLEtBQUt0USxJQUFoQjtBQUVBb0QsUUFBSWsrQixTQUFKLENBQWMsY0FBZCxFQUE4QiwwQkFBOUI7QUFDQWwrQixRQUFJaytCLFNBQUosQ0FBYyxxQkFBZCxFQUFxQyx5QkFBdUJ6eUIsVUFBVXV4QixRQUFWLENBQXZCLEdBQTJDLE9BQWhGO0FDc0JFLFdEckJGaDlCLElBQUk1SCxHQUFKLENBQVF0QyxJQUFSLENDcUJFO0FEOUVILElDRUM7QURIRixHOzs7Ozs7Ozs7Ozs7QUVGQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlDQXM1QixXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QiwyQkFBdkIsRUFBb0QsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQ25ELE1BQUEzTSxTQUFBLEVBQUFpakIsYUFBQSxFQUFBQyxZQUFBLEVBQUFDLGtCQUFBLEVBQUF6bkIsT0FBQSxFQUFBSCxRQUFBLEVBQUFvVSxpQkFBQSxFQUFBLzNCLENBQUEsRUFBQTJTLElBQUEsRUFBQW9wQixPQUFBLEVBQUEvQixRQUFBLEVBQUFJLG9CQUFBLEVBQUFDLE9BQUEsRUFBQUMsVUFBQSxFQUFBTyxRQUFBLEVBQUFDLFVBQUEsRUFBQWtDLG1CQUFBLEVBQUE1a0IsS0FBQSxFQUFBbEMsTUFBQSxFQUFBMG9CLE9BQUE7O0FBQUE7QUFFQyxRQUFHLENBQUN2dUIsUUFBUXU2QixzQkFBUixDQUErQmpXLEdBQS9CLEVBQW9DbHZCLEdBQXBDLENBQUo7QUFDQztBQ0VFOztBREFIbTVCLGNBQVVqSyxJQUFJN1IsTUFBZDtBQUVBaVYsd0JBQW9CdHJCLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUI7QUFBRUMsV0FBS2d5QjtBQUFQLEtBQWpCLENBQXBCO0FBRUEvRCxlQUFXbEcsSUFBSWtXLE9BQUosQ0FBWSxZQUFaLENBQVg7O0FBRUEsUUFBRyxDQUFJaFEsUUFBUDtBQUNDLFlBQU0sSUFBSXh1QixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQix3QkFBMUIsQ0FBTjtBQ0NFOztBREVIc0Usa0JBQWN5dUIsUUFBZCxDQUF1QkgsUUFBdkI7QUFFQXR1QixrQkFBYzQrQixZQUFkLENBQTJCdFEsUUFBM0IsRUFBcUM5QyxrQkFBa0JuckIsR0FBdkQ7QUFFQW90QixlQUFXckYsSUFBSXhmLElBQWY7O0FBRUEsUUFBRyxDQUFJNmtCLFNBQVMsTUFBVCxDQUFQO0FBQ0MsWUFBTSxJQUFJM3RCLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGNBQTFCLENBQU47QUNIRTs7QURLSDh6QixjQUFlL0IsU0FBUyxNQUFULENBQWY7QUFDQXNSLG1CQUFldFIsU0FBUyxXQUFULENBQWY7QUFDQXVSLHlCQUFxQnZSLFNBQVMsb0JBQVQsQ0FBckI7QUFFQUksMkJBQXVCLElBQUkzL0IsTUFBSixFQUF2QjtBQUVBa1ksV0FBT2xHLEdBQUdvRyxLQUFILENBQVNsRyxPQUFULENBQWlCO0FBQUVDLFdBQUttdkI7QUFBUCxLQUFqQixFQUFtQztBQUFFNXZCLGNBQVE7QUFBRTBILGVBQU8sQ0FBVDtBQUFZLHVCQUFlO0FBQTNCO0FBQVYsS0FBbkMsQ0FBUDs7QUFDQSxRQUFHLENBQUlsQixJQUFQO0FBQ0MsWUFBTSxJQUFJdEcsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsb0JBQTFCLENBQU47QUNFRTs7QURBSCxRQUFHNHlCLGFBQWNsb0IsS0FBS2tCLEtBQXRCO0FBQ0MsWUFBTSxJQUFJeEgsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsa0NBQTFCLENBQU47QUNFRTs7QURBSCxRQUFHd0UsR0FBR2dzQixXQUFILENBQWU3TyxJQUFmLENBQW9CO0FBQUUvVixhQUFPZ25CLFFBQVQ7QUFBbUI1bkIsWUFBTThrQixrQkFBa0JuckI7QUFBM0MsS0FBcEIsRUFBc0VpZCxLQUF0RSxPQUFpRixDQUFwRjtBQUNDLFlBQU0sSUFBSXhkLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLDBDQUExQixDQUFOO0FDS0U7O0FESEhteUIseUJBQXFCLE9BQXJCLElBQWdDUyxRQUFoQztBQUNBVCx5QkFBcUIsTUFBckIsSUFBK0IyQixPQUEvQjtBQUNBM0IseUJBQXFCLGNBQXJCLElBQXVDem5CLEtBQUtKLE9BQUwsQ0FBYTNGLEdBQXBEO0FBRUF3YixnQkFBWSxJQUFaOztBQUNBLFFBQUdrakIsZ0JBQWdCQyxrQkFBbkI7QUFFQyxVQUFHRCxZQUFIO0FBQ0NsakIsb0JBQVkzYixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCO0FBQUVDLGVBQUswK0I7QUFBUCxTQUFqQixFQUF3QztBQUFFbi9CLGtCQUFRO0FBQUU5SixrQkFBTTtBQUFSO0FBQVYsU0FBeEMsQ0FBWjs7QUFDQSxZQUFHLENBQUkrbEIsU0FBUDtBQUNDLGdCQUFNLElBQUkvYixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixvQkFBMUIsQ0FBTjtBQUhGO0FBQUEsYUFLSyxJQUFHc2pDLGtCQUFIO0FBQ0puakIsb0JBQVkzYixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCO0FBQUVoUSxvQkFBVTR1QztBQUFaLFNBQWpCLEVBQW1EO0FBQUVwL0Isa0JBQVE7QUFBRTlKLGtCQUFNO0FBQVI7QUFBVixTQUFuRCxDQUFaOztBQUNBLFlBQUcsQ0FBSStsQixTQUFQO0FBQ0MsZ0JBQU0sSUFBSS9iLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLDZCQUExQixDQUFOO0FBSEc7QUNtQkQ7O0FEZEo2eUIsbUJBQWFydUIsR0FBR2dzQixXQUFILENBQWU5ckIsT0FBZixDQUF1QjtBQUFFa0gsZUFBT2duQixRQUFUO0FBQW1CNW5CLGNBQU1tVixVQUFVeGI7QUFBbkMsT0FBdkIsQ0FBYjs7QUFDQSxVQUFHLENBQUlrdUIsVUFBUDtBQUNDLGNBQU0sSUFBSXp1QixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQix5Q0FBMUIsQ0FBTjtBQ21CRzs7QURqQkosVUFBRzZ5QixXQUFXL0QsYUFBWCxLQUE4QixJQUFqQztBQUNDLGNBQU0sSUFBSTFxQixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixxQ0FBMUIsQ0FBTjtBQ21CRzs7QURqQkorMEIsNEJBQXNCendCLGNBQWM2d0IsbUJBQWQsQ0FBa0N0QyxVQUFsQyxDQUF0QjtBQUNBViwyQkFBcUIsV0FBckIsSUFBb0NoUyxVQUFVeGIsR0FBOUM7QUFDQXd0QiwyQkFBcUIsZ0JBQXJCLElBQXlDaFMsVUFBVS9sQixJQUFuRDtBQUNBKzNCLDJCQUFxQix3QkFBckIsSUFBa0Q0QyxvQkFBb0IsY0FBcEIsQ0FBbEQ7QUFDQTVDLDJCQUFxQixpQ0FBckIsSUFBMEQ0QyxvQkFBb0IsdUJBQXBCLENBQTFEO0FBQ0E1QywyQkFBcUIsNkJBQXJCLElBQXNENEMsb0JBQW9CLG1CQUFwQixDQUF0RDtBQ21CRTs7QURqQkhxTyxvQkFBZ0JqakIsYUFBYTJQLGlCQUE3QjtBQUVBN2hCLGFBQVMsRUFBVDtBQUNBa0MsWUFBUSxJQUFJM2QsTUFBSixFQUFSO0FBQ0FrcEIsZUFBVyxFQUFYO0FBQ0FHLGNBQVUsSUFBSXJwQixNQUFKLEVBQVY7QUFDQXFwQixZQUFRLFFBQVIsSUFBb0JrVyxTQUFTLFFBQVQsQ0FBcEI7QUFDQXJXLGFBQVNyaEIsSUFBVCxDQUFjd2hCLE9BQWQ7QUFDQTFMLFVBQU0sVUFBTixJQUFvQnVMLFFBQXBCO0FBQ0F6TixXQUFPNVQsSUFBUCxDQUFZOFYsS0FBWjtBQUNBZ2lCLHlCQUFxQixRQUFyQixJQUFpQ2xrQixNQUFqQztBQUVBa2tCLHlCQUFxQixhQUFyQixJQUFzQyxDQUFDaVIsY0FBY3orQixHQUFmLENBQXRDO0FBRUEwdEIsaUJBQWEvdEIsY0FBY2d1QixlQUFkLENBQThCSCxvQkFBOUIsRUFBb0RpUixhQUFwRCxDQUFiO0FBRUFoUixjQUFVNXRCLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCMnRCLFVBQXJCLENBQVY7QUNlRSxXRGJGekYsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFlBQU0sR0FEb0I7QUFFMUIzVyxZQUFNO0FBQUV5dUMsZ0JBQVEsU0FBVjtBQUFxQnp1QyxjQUFNOCtCO0FBQTNCO0FBRm9CLEtBQTNCLENDYUU7QUR0R0gsV0FBQWxwQixLQUFBO0FBNkZNblIsUUFBQW1SLEtBQUE7QUFDTGxFLFlBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCO0FDa0JFLFdEakJGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFlBQU0sR0FEb0I7QUFFMUIzVyxZQUFNO0FBQUVrOEIsZ0JBQVEsQ0FBQztBQUFFQyx3QkFBYzEzQixFQUFFMjNCO0FBQWxCLFNBQUQ7QUFBVjtBQUZvQixLQUEzQixDQ2lCRTtBQVVEO0FEM0hILEc7Ozs7Ozs7Ozs7OztBRXpDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBeUJBOUMsV0FBV0MsR0FBWCxDQUFlLEtBQWYsRUFBc0IsZ0NBQXRCLEVBQXdELFVBQUNILEdBQUQsRUFBTWx2QixHQUFOLEVBQVdzdkIsSUFBWDtBQUN2RCxNQUFBK0MsWUFBQSxFQUFBOTNCLENBQUEsRUFBQXdyQyxNQUFBLEVBQUFuNUIsUUFBQSxFQUFBbzVCLFVBQUEsRUFBQS8zQixXQUFBLEVBQUFHLEtBQUEsRUFBQWduQixRQUFBOztBQUFBO0FBQ0MyUSxhQUFTN1csSUFBSW9WLE1BQUosQ0FBV3lCLE1BQXBCOztBQUVBLFFBQUcsQ0FBQ243QixRQUFRdTZCLHNCQUFSLENBQStCalcsR0FBL0IsRUFBb0NsdkIsR0FBcEMsQ0FBSjtBQUNDO0FDRUU7O0FEQUhxeUIsbUJBQWVuRCxJQUFJN1IsTUFBbkI7QUFFQStYLGVBQVdsRyxJQUFJa1csT0FBSixDQUFZLFlBQVosQ0FBWDs7QUFFQSxRQUFHLENBQUloUSxRQUFQO0FBQ0MsWUFBTSxJQUFJeHVCLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLHdCQUExQixDQUFOO0FDQUU7O0FER0hzRSxrQkFBY3l1QixRQUFkLENBQXVCSCxRQUF2QjtBQUVBdHVCLGtCQUFjNCtCLFlBQWQsQ0FBMkJ0USxRQUEzQixFQUFxQy9DLFlBQXJDO0FBRUF6bEIsZUFBVzVGLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCNitCLE1BQXJCLENBQVg7O0FBQ0EsUUFBRyxDQUFJbjVCLFFBQVA7QUFDQyxZQUFNLElBQUloRyxPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQix1QkFBMUIsQ0FBTjtBQ0hFOztBREtILFFBQUd3RSxHQUFHZ3NCLFdBQUgsQ0FBZTdPLElBQWYsQ0FBb0I7QUFBRS9WLGFBQU94QixTQUFTd0IsS0FBbEI7QUFBeUJaLFlBQU02a0I7QUFBL0IsS0FBcEIsRUFBbUVqTyxLQUFuRSxPQUE4RSxDQUFqRjtBQUNDLFlBQU0sSUFBSXhkLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLHFCQUExQixDQUFOO0FDQUU7O0FER0h3akMsaUJBQWEsSUFBSXIvQixLQUFKLEVBQWI7QUFDQXEvQixlQUFXbnBDLElBQVgsQ0FBZ0IrUCxTQUFTNm9CLFNBQXpCO0FBQ0F1USxlQUFXbnBDLElBQVgsQ0FBZ0IrUCxTQUFTK1YsU0FBekI7O0FBQ0EsUUFBRy9WLFNBQVMrckIsWUFBWjtBQUNDcU4sbUJBQWFBLFdBQVd6b0MsTUFBWCxDQUFrQnFQLFNBQVMrckIsWUFBM0IsQ0FBYjtBQ0RFOztBREVILFFBQUcvckIsU0FBU3NvQixXQUFaO0FBQ0M4USxtQkFBYUEsV0FBV3pvQyxNQUFYLENBQWtCcVAsU0FBU3NvQixXQUEzQixDQUFiO0FDQUU7O0FEQ0g5bUIsWUFBUXBILEdBQUcyckIsTUFBSCxDQUFVenJCLE9BQVYsQ0FBa0I7QUFBRUMsV0FBS3lGLFNBQVN3QjtBQUFoQixLQUFsQixFQUEyQztBQUFFMUgsY0FBUTtBQUFFb3NCLGdCQUFRO0FBQVY7QUFBVixLQUEzQyxDQUFSO0FBQ0FrVCxpQkFBYUEsV0FBV3pvQyxNQUFYLENBQWtCNlEsTUFBTTBrQixNQUF4QixDQUFiO0FBRUE3a0Isa0JBQWM2cEIsa0JBQWtCQyxrQkFBbEIsQ0FBcUNuckIsU0FBU00sSUFBOUMsRUFBb0RtbEIsWUFBcEQsQ0FBZDs7QUFFQSxRQUFJLENBQUkyVCxXQUFXL3dCLFFBQVgsQ0FBb0JvZCxZQUFwQixDQUFMLElBQTZDLENBQUlwa0IsWUFBWWdILFFBQVosQ0FBcUIsU0FBckIsQ0FBakQsSUFBdUYsQ0FBSWhILFlBQVlnSCxRQUFaLENBQXFCLE9BQXJCLENBQTlGO0FBQ0MsWUFBTSxJQUFJck8sT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsZUFBMUIsQ0FBTjtBQ0tFOztBREhIb0ssYUFBUzJaLFdBQVQsR0FBdUJ0QyxJQUFJQyxTQUFKLENBQWNDLElBQWQsQ0FBbUI7QUFBQywyQkFBcUJ2WCxTQUFTekYsR0FBL0I7QUFBbUMsMEJBQW9CLElBQXZEO0FBQTZELDZCQUF1QjtBQUFDa2UsYUFBSztBQUFOO0FBQXBGLEtBQW5CLEVBQXFIO0FBQUMzZSxjQUFRO0FBQUM2K0IsZ0JBQVE7QUFBVDtBQUFULEtBQXJILEVBQTRJOWUsS0FBNUksRUFBdkI7QUNlRSxXRGJGMkksV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFlBQU0sR0FEb0I7QUFFMUIzVyxZQUFNO0FBQUV5dUMsZ0JBQVEsU0FBVjtBQUFxQnp1QyxjQUFNOFc7QUFBM0I7QUFGb0IsS0FBM0IsQ0NhRTtBRHhESCxXQUFBbEIsS0FBQTtBQStDTW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQ2tCRSxXRGpCRjNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxZQUFNLEdBRG9CO0FBRTFCM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBRUMsd0JBQWMxM0IsRUFBRTIzQjtBQUFsQixTQUFEO0FBQVY7QUFGb0IsS0FBM0IsQ0NpQkU7QUFVRDtBRDdFSCxHOzs7Ozs7Ozs7Ozs7QUV6QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EyQkE5QyxXQUFXQyxHQUFYLENBQWUsS0FBZixFQUFzQixtQ0FBdEIsRUFBMkQsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzFELE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBMlMsSUFBQSxFQUFBNUcsSUFBQSxFQUFBeS9CLE1BQUEsRUFBQW41QixRQUFBLEVBQUFnVyxTQUFBLEVBQUFxakIsWUFBQSxFQUFBQyxhQUFBLEVBQUEzUCxDQUFBLEVBQUE0UCx3QkFBQSxFQUFBbm5DLE1BQUEsRUFBQW8yQixRQUFBLEVBQUFoWCxJQUFBLEVBQUFxWCxTQUFBLEVBQUFuZCxNQUFBOztBQUFBO0FBQ0N5dEIsYUFBUzdXLElBQUlvVixNQUFKLENBQVd5QixNQUFwQjs7QUFFQSxRQUFHLENBQUNuN0IsUUFBUXU2QixzQkFBUixDQUErQmpXLEdBQS9CLEVBQW9DbHZCLEdBQXBDLENBQUo7QUFDQztBQ0NFOztBRENIcXlCLG1CQUFlbkQsSUFBSTdSLE1BQW5CO0FBRUErWCxlQUFXbEcsSUFBSWtXLE9BQUosQ0FBWSxZQUFaLENBQVg7O0FBRUEsUUFBRyxDQUFJaFEsUUFBUDtBQUNDLFlBQU0sSUFBSXh1QixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQix3QkFBMUIsQ0FBTjtBQ0RFOztBREdIOHZCLHdCQUFvQnRyQixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCbXJCLFlBQWpCLENBQXBCOztBQUVBLFFBQUcsQ0FBSUMsaUJBQVA7QUFDQyxZQUFNLElBQUkxckIsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsbUJBQTFCLENBQU47QUNGRTs7QURLSHNFLGtCQUFjeXVCLFFBQWQsQ0FBdUJILFFBQXZCO0FBRUF0dUIsa0JBQWM0K0IsWUFBZCxDQUEyQnRRLFFBQTNCLEVBQXFDL0MsWUFBckM7QUFFQXpsQixlQUFXOUYsY0FBY3lPLFdBQWQsQ0FBMEJ3d0IsTUFBMUIsQ0FBWDtBQUdBai9CLGtCQUFjcy9CLGVBQWQsQ0FBOEJ4NUIsUUFBOUI7O0FBRUEsUUFBR3dvQixhQUFjeG9CLFNBQVMsT0FBVCxDQUFqQjtBQUNDLFlBQU0sSUFBSWhHLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLHNDQUExQixDQUFOO0FDUkU7O0FEV0g4VixhQUFTMUwsU0FBUyxRQUFULEVBQW1CLENBQW5CLEVBQXNCLFVBQXRCLEVBQWtDLENBQWxDLEVBQXFDMEwsTUFBOUM7QUFFQWhTLFdBQU9RLGNBQWN1L0IsT0FBZCxDQUFzQno1QixTQUFTdEcsSUFBL0IsQ0FBUDtBQUVBNi9CLCtCQUEyQnIvQixjQUFjdy9CLHVCQUFkLENBQXNDaHVCLE1BQXRDLEVBQThDaFMsSUFBOUMsRUFBb0RzRyxTQUFTckcsWUFBN0QsQ0FBM0I7O0FBRUEsUUFBRzQvQix5QkFBeUI5eEMsTUFBekIsR0FBa0MsQ0FBckM7QUFDQyxVQUFHOHhDLHlCQUF5Qjl4QyxNQUF6QixHQUFrQyxDQUFyQztBQUNDLGNBQU0sSUFBSXVTLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGFBQWEyakMseUJBQXlCaHJDLElBQXpCLENBQThCLEdBQTlCLENBQWIsR0FBa0QsZ0JBQTVFLENBQU47QUFERCxhQUVLLElBQUdnckMseUJBQXlCOXhDLE1BQXpCLEdBQWtDLENBQXJDO0FBQ0osY0FBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsWUFBWTJqQyx5QkFBeUJockMsSUFBekIsQ0FBOEIsR0FBOUIsQ0FBWixHQUFpRCxlQUEzRSxDQUFOO0FBSkY7QUNQRzs7QURhSCtSLFdBQU9wRyxjQUFjOGQsT0FBZCxDQUFzQmhZLFNBQVNNLElBQS9CLENBQVA7QUFFQWtSLFdBQU90WCxjQUFjMjBCLE9BQWQsQ0FBc0I3dUIsUUFBdEIsRUFBZ0NNLElBQWhDLEVBQXNDTixTQUFTLFFBQVQsRUFBbUIsQ0FBbkIsRUFBc0J3UixJQUE1RCxDQUFQO0FBR0F3RSxnQkFBWTliLGNBQWN5L0IsWUFBZCxDQUEyQjM1QixRQUEzQixFQUFxQ00sSUFBckMsRUFBMkNrUixJQUEzQyxFQUFpRCxXQUFqRCxDQUFaOztBQUVBLFFBQUd3RSxVQUFVdnVCLE1BQVYsR0FBbUIsQ0FBdEI7QUFDQyxZQUFNLElBQUl1UyxPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQix5QkFBMUIsQ0FBTjtBQ2ZFOztBRGlCSCxRQUFHb2dCLFVBQVV2dUIsTUFBVixHQUFtQixDQUF0QjtBQUNDLFlBQU0sSUFBSXVTLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLG9CQUExQixDQUFOO0FDZkU7O0FEaUJIeWpDLG1CQUFlcmpCLFVBQVUsQ0FBVixDQUFmO0FBR0FzakIsb0JBQWdCTSxtQkFBbUJDLFdBQW5CLENBQStCVixNQUEvQixFQUF1Q0UsWUFBdkMsS0FBd0QsRUFBeEU7O0FBRUEsUUFBR0MsY0FBYzd4QyxNQUFkLEdBQXVCLENBQTFCO0FBQ0MsWUFBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsNEJBQTFCLENBQU47QUNsQkU7O0FEb0JIb0ssYUFBUyxRQUFULEVBQW1CLENBQW5CLEVBQXNCLFVBQXRCLEVBQWtDLENBQWxDLEVBQXFDLFlBQXJDLElBQXFELENBQUM7QUFBQyxjQUFRcTVCLFlBQVQ7QUFBdUIsZUFBU0M7QUFBaEMsS0FBRCxDQUFyRDtBQUVBbG5DLGFBQVMsSUFBSWhLLE1BQUosRUFBVDtBQUVBeWdDLGdCQUFZenVCLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUIwRixTQUFTNm9CLFNBQTFCLENBQVo7O0FBRUEsUUFBRyxDQUFJQSxTQUFQO0FBQ0MsWUFBTSxJQUFJN3VCLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLHdCQUExQixDQUFOO0FDaEJFOztBRGtCSCt6QixRQUFJenZCLGNBQWMwdkIsZUFBZCxDQUE4QjVwQixRQUE5QixFQUF3QzZvQixTQUF4QyxDQUFKOztBQUVBLFFBQUdjLEVBQUVFLE1BQUw7QUFDQ3ozQixlQUFTdTNCLENBQVQ7QUFERDtBQUdDdjNCLGVBQVNnSSxHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjYrQixNQUFyQixDQUFUOztBQUNBLFVBQUcvbUMsTUFBSDtBQUNDQSxlQUFPdW5CLFdBQVAsR0FBcUJ0QyxJQUFJQyxTQUFKLENBQWNDLElBQWQsQ0FBbUI7QUFBQywrQkFBcUI0aEIsTUFBdEI7QUFBNkIsOEJBQW9CLElBQWpEO0FBQXVELGlDQUF1QjtBQUFDMWdCLGlCQUFLO0FBQU47QUFBOUUsU0FBbkIsRUFBK0c7QUFBQzNlLGtCQUFRO0FBQUM2K0Isb0JBQVE7QUFBVDtBQUFULFNBQS9HLEVBQXNJOWUsS0FBdEksRUFBckI7QUFMRjtBQ0RHOztBQUNELFdET0YySSxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFeXVDLGdCQUFRLFNBQVY7QUFBcUJ6dUMsY0FBTWtKO0FBQTNCO0FBRE4sS0FERCxDQ1BFO0FENUVILFdBQUEwTSxLQUFBO0FBc0ZNblIsUUFBQW1SLEtBQUE7QUFDTGxFLFlBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCO0FDREUsV0RFRjNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUFNO0FBQUVrOEIsZ0JBQVEsQ0FBQztBQUFDQyx3QkFBYzEzQixFQUFFMjNCO0FBQWpCLFNBQUQ7QUFBVjtBQUROLEtBREQsQ0NGRTtBQVVEO0FEakdILEc7Ozs7Ozs7Ozs7OztBRTNCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3QkE5QyxXQUFXQyxHQUFYLENBQWUsS0FBZixFQUFzQixpQ0FBdEIsRUFBeUQsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQ3hELE1BQUF2TCxZQUFBLEVBQUF1YyxhQUFBLEVBQUFqTyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBMlMsSUFBQSxFQUFBNjRCLE1BQUEsRUFBQW41QixRQUFBLEVBQUE1TixNQUFBLEVBQUFzNEIsTUFBQSxFQUFBbEMsUUFBQSxFQUFBOWMsTUFBQTs7QUFBQTtBQUNDeXRCLGFBQVM3VyxJQUFJb1YsTUFBSixDQUFXeUIsTUFBcEI7O0FBRUEsUUFBRyxDQUFDbjdCLFFBQVF1NkIsc0JBQVIsQ0FBK0JqVyxHQUEvQixFQUFvQ2x2QixHQUFwQyxDQUFKO0FBQ0M7QUNFRTs7QURBSHF5QixtQkFBZW5ELElBQUk3UixNQUFuQjtBQUVBK1gsZUFBV2xHLElBQUlrVyxPQUFKLENBQVksWUFBWixDQUFYOztBQUVBLFFBQUcsQ0FBSWhRLFFBQVA7QUFDQyxZQUFNLElBQUl4dUIsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsd0JBQTFCLENBQU47QUNBRTs7QURFSDh2Qix3QkFBb0J0ckIsR0FBR3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQm1yQixZQUFqQixDQUFwQjs7QUFFQSxRQUFHLENBQUlDLGlCQUFQO0FBQ0MsWUFBTSxJQUFJMXJCLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLG1CQUExQixDQUFOO0FDREU7O0FESUhzRSxrQkFBY3l1QixRQUFkLENBQXVCSCxRQUF2QjtBQUVBdHVCLGtCQUFjNCtCLFlBQWQsQ0FBMkJ0USxRQUEzQixFQUFxQy9DLFlBQXJDO0FBRUEvWixhQUFTNFcsSUFBSXhmLElBQWI7O0FBRUEsUUFBRyxDQUFJNEksTUFBUDtBQUNDLFlBQU0sSUFBSTFSLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGFBQTFCLENBQU47QUNMRTs7QURPSDg5QixvQkFBZ0IsSUFBaEI7QUFDQWhKLGFBQVMsSUFBSXRpQyxNQUFKLEVBQVQ7QUFDQTRYLGVBQVc5RixjQUFjeU8sV0FBZCxDQUEwQnd3QixNQUExQixDQUFYO0FBQ0E3NEIsV0FBT3BHLGNBQWM4ZCxPQUFkLENBQXNCaFksU0FBU00sSUFBL0IsQ0FBUDs7QUFFQXRGLE1BQUVxYixJQUFGLENBQU9yVyxTQUFTNkQsTUFBaEIsRUFBd0IsVUFBQ3hVLENBQUQ7QUFDdkIsVUFBR0EsRUFBRTBoQixXQUFGLEtBQW1CLElBQXRCO0FDTkssZURPSjJpQixnQkFBZ0Jya0MsQ0NQWjtBQUNEO0FESUw7O0FBSUE4bkIsbUJBQWVqZCxjQUFjMjBCLE9BQWQsQ0FBc0I3dUIsUUFBdEIsRUFBZ0NNLElBQWhDLEVBQXNDb3pCLGNBQWNsaUIsSUFBcEQsQ0FBZjs7QUFFQSxRQUFHMkYsYUFBYVcsU0FBYixLQUEwQixhQUE3QjtBQUNDLFlBQU0sSUFBSTlkLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGFBQTFCLENBQU47QUNORTs7QURRSG9GLE1BQUVxYixJQUFGLENBQU9xZCxjQUFjcGlCLFFBQXJCLEVBQStCLFVBQUM5SCxDQUFEO0FBQzlCLFVBQUdBLEVBQUV1SCxXQUFGLEtBQW1CLElBQW5CLElBQTRCdkgsRUFBRWpkLElBQUYsS0FBWSxJQUEzQztBQ05LLGVET0ppZCxFQUFFa0MsTUFBRixHQUFXQSxNQ1BQO0FBQ0Q7QURJTDs7QUFJQWdmLFdBQU91QixRQUFQLEdBQWtCLElBQUk3c0IsSUFBSixFQUFsQjtBQUNBc3JCLFdBQU8sbUJBQVAsSUFBOEJnSixjQUFjcGlCLFFBQTVDO0FBRUFsWCxPQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUNuQjl4QixXQUFLNCtCLE1BRGM7QUFFbkIsb0JBQWN6RixjQUFjbjVCO0FBRlQsS0FBcEIsRUFHRztBQUFBK3hCLFlBQU01QjtBQUFOLEtBSEg7QUFLQXQ0QixhQUFTLElBQUloSyxNQUFKLEVBQVQ7QUNMRSxXRE9GbzZCLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUFNO0FBQUV5dUMsZ0JBQVEsU0FBVjtBQUFxQnp1QyxjQUFNa0o7QUFBM0I7QUFETixLQURELENDUEU7QURqREgsV0FBQTBNLEtBQUE7QUEyRE1uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNERSxXREVGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBRWs4QixnQkFBUSxDQUFDO0FBQUNDLHdCQUFjMTNCLEVBQUUyM0I7QUFBakIsU0FBRDtBQUFWO0FBRE4sS0FERCxDQ0ZFO0FBVUQ7QUR0RUgsRzs7Ozs7Ozs7Ozs7O0FFeEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQ0E5QyxXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QixrQ0FBdkIsRUFBMkQsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzFELE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEvM0IsQ0FBQSxFQUFBMlMsSUFBQSxFQUFBcW5CLFFBQUEsRUFBQXJRLFNBQUEsRUFBQWtSLFFBQUEsRUFBQXNSLFFBQUE7O0FBQUE7QUFFQyxRQUFHLENBQUM5N0IsUUFBUXU2QixzQkFBUixDQUErQmpXLEdBQS9CLEVBQW9DbHZCLEdBQXBDLENBQUo7QUFDQztBQ0VFOztBREFIcXlCLG1CQUFlbkQsSUFBSTdSLE1BQW5CO0FBRUErWCxlQUFXbEcsSUFBSWtXLE9BQUosQ0FBWSxZQUFaLENBQVg7O0FBRUEsUUFBRyxDQUFJaFEsUUFBUDtBQUNDLFlBQU0sSUFBSXh1QixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQix3QkFBMUIsQ0FBTjtBQ0FFOztBREVIOHZCLHdCQUFvQnRyQixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCbXJCLFlBQWpCLENBQXBCOztBQUVBLFFBQUcsQ0FBSUMsaUJBQVA7QUFDQyxZQUFNLElBQUkxckIsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsbUJBQTFCLENBQU47QUNERTs7QURJSHNFLGtCQUFjeXVCLFFBQWQsQ0FBdUJILFFBQXZCO0FBRUF0dUIsa0JBQWM0K0IsWUFBZCxDQUEyQnRRLFFBQTNCLEVBQXFDL0MsWUFBckM7QUFFQWtDLGVBQVdyRixJQUFJeGYsSUFBZjtBQUNBZzNCLGVBQVduUyxTQUFTLFVBQVQsQ0FBWDtBQUNBcm5CLFdBQU9xbkIsU0FBUyxNQUFULENBQVA7O0FBRUEsUUFBRyxDQUFJbVMsUUFBUDtBQUNDLFlBQU0sSUFBSTkvQixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixlQUExQixDQUFOO0FDTEU7O0FET0gsUUFBRyxDQUFJMEssSUFBUDtBQUNDLFlBQU0sSUFBSXRHLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLFdBQTFCLENBQU47QUNMRTs7QURRSDBoQixnQkFBWWxkLEdBQUdrZCxTQUFILENBQWFDLElBQWIsQ0FBa0I7QUFBQy9WLGFBQU9nbkIsUUFBUjtBQUFrQmxvQixZQUFNQSxJQUF4QjtBQUE4QnlCLGFBQU0sU0FBcEM7QUFBK0M4QixjQUFPO0FBQUNrMkIsb0JBQVk7QUFBQ2hwQix1QkFBYSxLQUFkO0FBQXFCL2dCLGdCQUFNOHBDO0FBQTNCO0FBQWI7QUFBdEQsS0FBbEIsRUFBNkg7QUFBQ2hnQyxjQUFRO0FBQUNrZ0Msb0JBQVksQ0FBYjtBQUFnQjVSLGtCQUFVLENBQTFCO0FBQTZCMkQsc0JBQWMsQ0FBM0M7QUFBOENwUyxxQkFBYSxDQUEzRDtBQUE4RDlWLGdCQUFRO0FBQXRFO0FBQVQsS0FBN0gsRUFBaU5nVyxLQUFqTixFQUFaO0FBRUF2QyxjQUFVN2MsT0FBVixDQUFrQixVQUFDdUYsUUFBRDtBQ1dkLGFEVkhBLFNBQVMyWixXQUFULEdBQXVCdEMsSUFBSUMsU0FBSixDQUFjQyxJQUFkLENBQW1CO0FBQUMsNkJBQXFCdlgsU0FBU3pGLEdBQS9CO0FBQW1DLDRCQUFvQixJQUF2RDtBQUE2RCwrQkFBdUI7QUFBQ2tlLGVBQUs7QUFBTjtBQUFwRixPQUFuQixFQUFxSDtBQUFDM2UsZ0JBQVE7QUFBQzYrQixrQkFBUTtBQUFUO0FBQVQsT0FBckgsRUFBNEk5ZSxLQUE1SSxFQ1VwQjtBRFhKO0FDdUJFLFdEcEJGMkksV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBRXl1QyxnQkFBUSxTQUFWO0FBQXFCenVDLGNBQU1vdUI7QUFBM0I7QUFETixLQURELENDb0JFO0FEMURILFdBQUF4WSxLQUFBO0FBeUNNblIsUUFBQW1SLEtBQUE7QUFDTGxFLFlBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCO0FDMEJFLFdEekJGM0MsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQU07QUFBRWs4QixnQkFBUSxDQUFDO0FBQUNDLHdCQUFjMTNCLEVBQUUyM0I7QUFBakIsU0FBRDtBQUFWO0FBRE4sS0FERCxDQ3lCRTtBQVVEO0FEL0VILEc7Ozs7Ozs7Ozs7OztBRXJDQTs7Ozs7Ozs7Ozs7Ozs7OztHQWtCQTlDLFdBQVdDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLGdDQUF2QixFQUF5RCxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDeEQsTUFBQXVYLFVBQUEsRUFBQXhVLFlBQUEsRUFBQUMsaUJBQUEsRUFBQS8zQixDQUFBLEVBQUF3ckMsTUFBQSxFQUFBbjVCLFFBQUEsRUFBQXdvQixRQUFBOztBQUFBO0FBQ0MyUSxhQUFTN1csSUFBSW9WLE1BQUosQ0FBV3lCLE1BQXBCOztBQUVBLFFBQUcsQ0FBQ243QixRQUFRdTZCLHNCQUFSLENBQStCalcsR0FBL0IsRUFBb0NsdkIsR0FBcEMsQ0FBSjtBQUNDO0FDQ0U7O0FEQ0hxeUIsbUJBQWVuRCxJQUFJN1IsTUFBbkI7QUFFQStYLGVBQVdsRyxJQUFJa1csT0FBSixDQUFZLFlBQVosQ0FBWDs7QUFFQSxRQUFHLENBQUloUSxRQUFQO0FBQ0MsWUFBTSxJQUFJeHVCLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLHdCQUExQixDQUFOO0FDREU7O0FER0g4dkIsd0JBQW9CdHJCLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUJtckIsWUFBakIsQ0FBcEI7O0FBRUEsUUFBRyxDQUFJQyxpQkFBUDtBQUNDLFlBQU0sSUFBSTFyQixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixtQkFBMUIsQ0FBTjtBQ0ZFOztBRElIb0ssZUFBVzlGLGNBQWN5TyxXQUFkLENBQTBCd3dCLE1BQTFCLENBQVg7O0FBRUEsUUFBR241QixTQUFTK0IsS0FBVCxLQUFvQixPQUF2QjtBQUNDLFlBQU0sSUFBSS9ILE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGNBQTFCLENBQU47QUNIRTs7QURLSHFrQyxpQkFBYWo2QixTQUFTNkQsTUFBVCxDQUFnQixDQUFoQixFQUFtQnlOLFFBQW5CLENBQTRCLENBQTVCLEVBQStCL1csR0FBNUM7QUFHQUwsa0JBQWN5dUIsUUFBZCxDQUF1QkgsUUFBdkI7QUFFQXR1QixrQkFBYzQrQixZQUFkLENBQTJCdFEsUUFBM0IsRUFBcUMvQyxZQUFyQztBQ05FLFdEUUZqRCxXQUFXMFgsVUFBWCxDQUFzQjVYLEdBQXRCLEVBQTJCbHZCLEdBQTNCLEVBQWdDO0FBQy9CLFVBQUE4aUMsVUFBQSxFQUFBYSxPQUFBO0FBQUFiLG1CQUFhN2UsSUFBSUMsU0FBakI7O0FBRUEsVUFBR2dMLElBQUk5SSxLQUFKLElBQWM4SSxJQUFJOUksS0FBSixDQUFVLENBQVYsQ0FBakI7QUFFQyxZQUFHOEksSUFBSTlJLEtBQUosQ0FBVSxDQUFWLEVBQWF0d0IsSUFBYixDQUFrQnpCLE1BQWxCLEdBQTRCLE1BQUksSUFBSixHQUFTLElBQXhDO0FBQ0MrNkIscUJBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sa0JBQU0sR0FBTjtBQUNBM1csa0JBQU07QUFBRWs4QixzQkFBUSxDQUFDO0FBQUNDLDhCQUFjO0FBQWYsZUFBRDtBQUFWO0FBRE4sV0FERDtBQUdBO0FDREk7O0FER0wwUixrQkFBVSxJQUFJVixHQUFHQyxJQUFQLEVBQVY7QUNESSxlREVKUyxRQUFRUixVQUFSLENBQW1CalUsSUFBSTlJLEtBQUosQ0FBVSxDQUFWLEVBQWF0d0IsSUFBaEMsRUFBc0M7QUFBQ3FELGdCQUFNKzFCLElBQUk5SSxLQUFKLENBQVUsQ0FBVixFQUFhMmdCO0FBQXBCLFNBQXRDLEVBQXFFLFVBQUMvWixHQUFEO0FBQ3BFLGNBQUF0ZCxJQUFBLEVBQUFuVixDQUFBLEVBQUFrcEMsT0FBQSxFQUFBMWhDLFFBQUEsRUFBQTRqQixRQUFBLEVBQUFDLE1BQUEsRUFBQTJRLENBQUEsRUFBQXYzQixNQUFBLEVBQUFza0MsSUFBQTtBQUFBdmhDLHFCQUFXbXRCLElBQUk5SSxLQUFKLENBQVUsQ0FBVixFQUFhcmtCLFFBQXhCOztBQUVBLGNBQUcsQ0FBQyxXQUFELEVBQWMsV0FBZCxFQUEyQixZQUEzQixFQUF5QyxXQUF6QyxFQUFzRGtULFFBQXRELENBQStEbFQsU0FBUzdJLFdBQVQsRUFBL0QsQ0FBSDtBQUNDNkksdUJBQVcsV0FBV3dOLE9BQU8sSUFBSXZELElBQUosRUFBUCxFQUFtQndELE1BQW5CLENBQTBCLGdCQUExQixDQUFYLEdBQXlELEdBQXpELEdBQStEek4sU0FBUzdHLEtBQVQsQ0FBZSxHQUFmLEVBQW9CdUgsR0FBcEIsRUFBMUU7QUNDSzs7QURDTmlOLGlCQUFPd2YsSUFBSXhmLElBQVg7QUFFQUEsZUFBSyxPQUFMLElBQWdCOUMsU0FBUzZvQixTQUF6QjtBQUNBL2xCLGVBQUssWUFBTCxJQUFxQjlDLFNBQVN1MUIsY0FBOUI7QUFDQXp5QixlQUFLLE9BQUwsSUFBZ0IwbEIsUUFBaEI7QUFDQTFsQixlQUFLLFVBQUwsSUFBbUJxMkIsTUFBbkI7QUFDQXIyQixlQUFLLFNBQUwsSUFBa0JtM0IsVUFBbEI7O0FBRUE7QUFDQyxnQkFBR24zQixTQUFTQSxLQUFLLGFBQUwsTUFBdUIsSUFBdkIsSUFBK0JBLEtBQUssYUFBTCxNQUF1QixNQUEvRCxDQUFIO0FBQ0MzTix5QkFBV3JJLG1CQUFtQnFJLFFBQW5CLENBQVg7QUFGRjtBQUFBLG1CQUFBMkosS0FBQTtBQUdNblIsZ0JBQUFtUixLQUFBO0FBQ0xsRSxvQkFBUWtFLEtBQVIsQ0FBYzNKLFFBQWQ7QUFDQXlGLG9CQUFRa0UsS0FBUixDQUFjblIsQ0FBZDtBQUNBd0gsdUJBQVdBLFNBQVMzTSxPQUFULENBQWlCLElBQWpCLEVBQXVCLEdBQXZCLENBQVg7QUNDSzs7QURDTnV1QyxrQkFBUS9tQyxJQUFSLENBQWFtRixRQUFiOztBQUVBLGNBQUcyTixRQUFRQSxLQUFLLE9BQUwsQ0FBUixJQUF5QkEsS0FBSyxZQUFMLENBQXpCLElBQStDQSxLQUFLLE9BQUwsQ0FBL0MsSUFBZ0VBLEtBQUssVUFBTCxDQUFoRSxJQUFxRkEsS0FBSyxTQUFMLENBQXhGO0FBQ0NrVyxxQkFBUyxFQUFUO0FBQ0FELHVCQUFXO0FBQUM0ZCxxQkFBTTd6QixLQUFLLE9BQUwsQ0FBUDtBQUFzQjh6QiwwQkFBVzl6QixLQUFLLFlBQUwsQ0FBakM7QUFBcUR0QixxQkFBTXNCLEtBQUssT0FBTCxDQUEzRDtBQUEwRTlDLHdCQUFTOEMsS0FBSyxVQUFMLENBQW5GO0FBQXFHMk8sdUJBQVMzTyxLQUFLLFNBQUwsQ0FBOUc7QUFBK0g1Qyx1QkFBUztBQUF4SSxhQUFYOztBQUVBLGdCQUFHNEMsS0FBSyxZQUFMLEtBQXNCQSxLQUFLLFlBQUwsRUFBbUJoQyxpQkFBbkIsT0FBMEMsTUFBbkU7QUFDQ2lZLHVCQUFTcWhCLFVBQVQsR0FBc0IsSUFBdEI7QUFERDtBQUdDcmhCLHVCQUFTcWhCLFVBQVQsR0FBc0IsS0FBdEI7QUNNTTs7QURKUCxnQkFBR3QzQixLQUFLLE1BQUwsTUFBZ0IsTUFBbkI7QUFDQ2lXLHVCQUFTK2QsSUFBVCxHQUFnQixJQUFoQjtBQ01NOztBREpQLGdCQUFHaDBCLEtBQUssY0FBTCxLQUF3QkEsS0FBSyxRQUFMLENBQTNCO0FBQ0NrVyx1QkFBU2xXLEtBQUssUUFBTCxDQUFUO0FDTU07O0FEQVAsZ0JBQUdrVyxNQUFIO0FBQ0MyUSxrQkFBSXVNLFdBQVc3SixNQUFYLENBQWtCO0FBQUMsbUNBQW1CclQsTUFBcEI7QUFBNEIsb0NBQXFCO0FBQWpELGVBQWxCLEVBQTBFO0FBQUN5Vyx3QkFBUztBQUFDLHNDQUFxQjtBQUF0QjtBQUFWLGVBQTFFLENBQUo7O0FBQ0Esa0JBQUc5RixDQUFIO0FBQ0M1USx5QkFBU0MsTUFBVCxHQUFrQkEsTUFBbEI7O0FBQ0Esb0JBQUdsVyxLQUFLLFdBQUwsS0FBcUJBLEtBQUssZ0JBQUwsQ0FBeEI7QUFDQ2lXLDJCQUFTc2hCLFNBQVQsR0FBcUJ2M0IsS0FBSyxXQUFMLENBQXJCO0FBQ0FpVywyQkFBU3VoQixjQUFULEdBQTBCeDNCLEtBQUssZ0JBQUwsQ0FBMUI7QUNTUTs7QURQVGkwQix3QkFBUWhlLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0E4ZCwwQkFBVVgsV0FBV2hOLE1BQVgsQ0FBa0I2TixPQUFsQixDQUFWOztBQUdBLG9CQUFHajBCLEtBQUssV0FBTCxLQUFxQkEsS0FBSyxXQUFMLEVBQWtCaEMsaUJBQWxCLE9BQXlDLE1BQWpFO0FBQ0NvMUIsNkJBQVcvTSxNQUFYLENBQWtCO0FBQUMseUNBQXFCcm1CLEtBQUssVUFBTCxDQUF0QjtBQUF3Qyx1Q0FBbUJrVyxNQUEzRDtBQUFtRSxzQ0FBa0JsVyxLQUFLLE9BQUwsQ0FBckY7QUFBb0csd0NBQW9CQSxLQUFLLFNBQUwsQ0FBeEg7QUFBeUksd0NBQW9CO0FBQUMyViwyQkFBSztBQUFOO0FBQTdKLG1CQUFsQjtBQVhGO0FBRkQ7QUFBQTtBQWVDc2Usc0JBQVFoZSxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBOGQsd0JBQVVYLFdBQVdoTixNQUFYLENBQWtCNk4sT0FBbEIsQ0FBVjtBQUNBRixzQkFBUXhLLE1BQVIsQ0FBZTtBQUFDQyxzQkFBTTtBQUFDLHFDQUFvQnVLLFFBQVF0OEI7QUFBN0I7QUFBUCxlQUFmO0FBcENGO0FBQUE7QUF3Q0NzOEIsc0JBQVVYLFdBQVdoTixNQUFYLENBQWtCNk4sT0FBbEIsQ0FBVjtBQ29CSzs7QURsQk5MLGlCQUFPRyxRQUFRSSxRQUFSLENBQWlCUCxJQUF4Qjs7QUFDQSxjQUFHLENBQUNBLElBQUo7QUFDQ0EsbUJBQU8sSUFBUDtBQ29CSzs7QURsQk50a0MsbUJBQVMsSUFBSWhLLE1BQUosRUFBVDtBQUNBZ0ssbUJBQ0M7QUFBQW1vQyx1QkFBVzFELFFBQVF0OEIsR0FBbkI7QUFDQW04QixrQkFBTUE7QUFETixXQUREO0FBSUF0akMsY0FBSWsrQixTQUFKLENBQWMsa0JBQWQsRUFBaUN1RixRQUFRdDhCLEdBQXpDO0FDb0JLLGlCRGxCTGlvQixXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLGtCQUFNLEdBQU47QUFDQTNXLGtCQUFNO0FBQUV5dUMsc0JBQVEsU0FBVjtBQUFxQnp1QyxvQkFBTWtKO0FBQTNCO0FBRE4sV0FERCxDQ2tCSztBRC9GTixVQ0ZJO0FEUEw7QUEwRkNvd0IsbUJBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sZ0JBQU0sR0FBTjtBQUNBM1csZ0JBQU07QUFBRWs4QixvQkFBUSxDQUFDO0FBQUNDLDRCQUFjO0FBQWYsYUFBRDtBQUFWO0FBRE4sU0FERDtBQ2lDRztBRDlITCxNQ1JFO0FEdEJILFdBQUF2bUIsS0FBQTtBQWdJTW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQ2dDRSxXRC9CRjNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUFNO0FBQUVrOEIsZ0JBQVEsQ0FBQztBQUFDQyx3QkFBYzEzQixFQUFFMjNCO0FBQWpCLFNBQUQ7QUFBVjtBQUROLEtBREQsQ0MrQkU7QUFVRDtBRDVLSDtBQXVJQTlDLFdBQVdDLEdBQVgsQ0FBZSxRQUFmLEVBQXlCLGdDQUF6QixFQUE0RCxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDM0QsTUFBQTZYLFNBQUEsRUFBQXJFLFVBQUEsRUFBQXpRLFlBQUEsRUFBQUMsaUJBQUEsRUFBQS8zQixDQUFBLEVBQUE2c0MsSUFBQSxFQUFBN1MsUUFBQSxFQUFBd1IsTUFBQSxFQUFBbjVCLFFBQUEsRUFBQTVOLE1BQUEsRUFBQW8yQixRQUFBOztBQUFBO0FBQ0MyUSxhQUFTN1csSUFBSW9WLE1BQUosQ0FBV3lCLE1BQXBCOztBQUVBLFFBQUcsQ0FBQ243QixRQUFRdTZCLHNCQUFSLENBQStCalcsR0FBL0IsRUFBb0NsdkIsR0FBcEMsQ0FBSjtBQUNDO0FDeUNFOztBRHZDSHF5QixtQkFBZW5ELElBQUk3UixNQUFuQjtBQUVBK1gsZUFBV2xHLElBQUlrVyxPQUFKLENBQVksWUFBWixDQUFYOztBQUVBLFFBQUcsQ0FBSWhRLFFBQVA7QUFDQyxZQUFNLElBQUl4dUIsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsd0JBQTFCLENBQU47QUN1Q0U7O0FEckNIOHZCLHdCQUFvQnRyQixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCbXJCLFlBQWpCLENBQXBCOztBQUVBLFFBQUcsQ0FBSUMsaUJBQVA7QUFDQyxZQUFNLElBQUkxckIsT0FBT3BFLEtBQVgsQ0FBaUIsT0FBakIsRUFBMEIsbUJBQTFCLENBQU47QUNzQ0U7O0FEcENIb0ssZUFBVzlGLGNBQWN5TyxXQUFkLENBQTBCd3dCLE1BQTFCLENBQVg7O0FBRUEsUUFBR241QixTQUFTK0IsS0FBVCxLQUFvQixPQUF2QjtBQUNDLFlBQU0sSUFBSS9ILE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGdCQUExQixDQUFOO0FDcUNFOztBRGxDSHNFLGtCQUFjeXVCLFFBQWQsQ0FBdUJILFFBQXZCO0FBRUF0dUIsa0JBQWM0K0IsWUFBZCxDQUEyQnRRLFFBQTNCLEVBQXFDL0MsWUFBckM7QUFFQWtDLGVBQVdyRixJQUFJeGYsSUFBSixJQUFZLEVBQXZCO0FBQ0F5M0IsZ0JBQVk1UyxTQUFTLFdBQVQsQ0FBWjs7QUFFQSxRQUFHLENBQUk0UyxTQUFQO0FBQ0MsWUFBTSxJQUFJdmdDLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLHdCQUExQixDQUFOO0FDaUNFOztBRC9CSHNnQyxpQkFBYTdlLElBQUlDLFNBQWpCO0FBRUFrakIsV0FBT3RFLFdBQVc1N0IsT0FBWCxDQUFtQjtBQUFFQyxXQUFLZ2dDLFNBQVA7QUFBa0IsMkJBQXFCcEI7QUFBdkMsS0FBbkIsQ0FBUDs7QUFDQSxRQUFHcUIsSUFBSDtBQUNDQSxXQUFLclIsTUFBTDtBQUREO0FBR0MsWUFBTSxJQUFJbnZCLE9BQU9wRSxLQUFYLENBQWlCLE9BQWpCLEVBQTBCLGtCQUExQixDQUFOO0FDbUNFOztBRGpDSHhELGFBQVMsSUFBSWhLLE1BQUosRUFBVDtBQ21DRSxXRGxDRm82QixXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFeXVDLGdCQUFRLFNBQVY7QUFBcUJ6dUMsY0FBTWtKO0FBQTNCO0FBRE4sS0FERCxDQ2tDRTtBRDdFSCxXQUFBME0sS0FBQTtBQThDTW5SLFFBQUFtUixLQUFBO0FBQ0xsRSxZQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQjtBQ3dDRSxXRHZDRjNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUFNO0FBQUVrOEIsZ0JBQVEsQ0FBQztBQUFDQyx3QkFBYzEzQixFQUFFMjNCO0FBQWpCLFNBQUQ7QUFBVjtBQUROLEtBREQsQ0N1Q0U7QUFVRDtBRGxHSDtBQXFEQTlDLFdBQVdDLEdBQVgsQ0FBZSxLQUFmLEVBQXNCLG1DQUF0QixFQUE0RCxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDM0QsTUFBQTZYLFNBQUEsRUFBQTlVLFlBQUEsRUFBQUMsaUJBQUEsRUFBQS8zQixDQUFBLEVBQUE2NkIsUUFBQTs7QUFBQTtBQUNDK1IsZ0JBQVlqWSxJQUFJb1YsTUFBSixDQUFXNkMsU0FBdkI7O0FBRUEsUUFBRyxDQUFDdjhCLFFBQVF1NkIsc0JBQVIsQ0FBK0JqVyxHQUEvQixFQUFvQ2x2QixHQUFwQyxDQUFKO0FBQ0M7QUNpREU7O0FEL0NIcXlCLG1CQUFlbkQsSUFBSTdSLE1BQW5CO0FBRUErWCxlQUFXbEcsSUFBSWtXLE9BQUosQ0FBWSxZQUFaLENBQVg7O0FBRUEsUUFBRyxDQUFJaFEsUUFBUDtBQUNDLFlBQU0sSUFBSXh1QixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQix3QkFBMUIsQ0FBTjtBQytDRTs7QUQ3Q0g4dkIsd0JBQW9CdHJCLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUJtckIsWUFBakIsQ0FBcEI7O0FBRUEsUUFBRyxDQUFJQyxpQkFBUDtBQUNDLFlBQU0sSUFBSTFyQixPQUFPcEUsS0FBWCxDQUFpQixPQUFqQixFQUEwQixtQkFBMUIsQ0FBTjtBQzhDRTs7QUQzQ0hzRSxrQkFBY3l1QixRQUFkLENBQXVCSCxRQUF2QjtBQUVBdHVCLGtCQUFjNCtCLFlBQWQsQ0FBMkJ0USxRQUEzQixFQUFxQy9DLFlBQXJDO0FBRUFyeUIsUUFBSTh1QixVQUFKLEdBQWlCLEdBQWpCO0FBQ0E5dUIsUUFBSWsrQixTQUFKLENBQWMsVUFBZCxFQUEwQnR6QixRQUFRQyxXQUFSLENBQW9CLHNCQUFwQixJQUE4Q3M4QixTQUE5QyxHQUEwRCxnQkFBcEY7QUMyQ0UsV0QxQ0ZubkMsSUFBSTVILEdBQUosRUMwQ0U7QURuRUgsV0FBQXNULEtBQUE7QUEwQk1uUixRQUFBbVIsS0FBQTtBQUNMbEUsWUFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUM0Q0UsV0QzQ0YzQyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFBTTtBQUFFazhCLGdCQUFRLENBQUM7QUFBQ0Msd0JBQWMxM0IsRUFBRTIzQjtBQUFqQixTQUFEO0FBQVY7QUFETixLQURELENDMkNFO0FBVUQ7QURsRkgsRzs7Ozs7Ozs7Ozs7O0FFOU1BOUMsV0FBV0MsR0FBWCxDQUFlLE1BQWYsRUFBdUIsOEJBQXZCLEVBQXVELFVBQUNILEdBQUQsRUFBTWx2QixHQUFOLEVBQVdzdkIsSUFBWDtBQUN0RCxNQUFBalIsT0FBQSxFQUFBZ3BCLE9BQUEsRUFBQUMsV0FBQSxFQUFBQyxrQkFBQSxFQUFBQyxZQUFBLEVBQUFDLG1CQUFBLEVBQUFDLGlCQUFBLEVBQUFDLGVBQUEsRUFBQUMsd0JBQUEsRUFBQXJnQyxHQUFBLEVBQUFrRyxJQUFBLEVBQUFzUSxJQUFBLEVBQUFDLElBQUEsRUFBQUcsSUFBQSxFQUFBMG1CLElBQUEsRUFBQVEsSUFBQSxFQUFBQyxJQUFBLEVBQUF1QyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsUUFBQSxFQUFBQyxRQUFBLEVBQUFDLFVBQUEsRUFBQXQxQixLQUFBLEVBQUFsQyxNQUFBO0FBQUFqSixVQUFRQyxHQUFSLENBQVkseUJBQVo7QUFDQUQsVUFBUUMsR0FBUixDQUFZLHNCQUFaLEVBQUF5bkIsT0FBQSxRQUFBM25CLE1BQUEybkIsSUFBQTEzQixLQUFBLFlBQUErUCxJQUErQ3lnQyxRQUEvQyxHQUErQyxNQUEvQyxHQUErQyxNQUEvQztBQUNBeGdDLFVBQVFDLEdBQVIsQ0FBWSwyQkFBWjtBQUNBRCxVQUFRQyxHQUFSLENBQVksb0JBQVosRUFBQXluQixPQUFBLFFBQUF6aEIsT0FBQXloQixJQUFBMTNCLEtBQUEsWUFBQWlXLEtBQTZDeTZCLE1BQTdDLEdBQTZDLE1BQTdDLEdBQTZDLE1BQTdDO0FBRUFiLFlBQUFuWSxPQUFBLFFBQUFuUixPQUFBbVIsSUFBQTEzQixLQUFBLFlBQUF1bUIsS0FBc0JtcUIsTUFBdEIsQ0FBNkJodEMsS0FBN0IsQ0FBbUMsR0FBbkMsSUFBVSxNQUFWLEdBQVUsTUFBVjtBQUNBc00sVUFBUUMsR0FBUixDQUFZLFNBQVosRUFBc0I0L0IsT0FBdEI7QUFJQUMsZ0JBQUFwWSxPQUFBLFFBQUFsUixPQUFBa1IsSUFBQXhmLElBQUEsWUFBQXNPLEtBQXlCcFIsUUFBekIsR0FBeUIsTUFBekIsR0FBeUIsTUFBekI7QUFFQW83QixhQUFBOVksT0FBQSxRQUFBL1EsT0FBQStRLElBQUExM0IsS0FBQSxZQUFBMm1CLEtBQXVCNnBCLFFBQXZCLEdBQXVCLE1BQXZCLEdBQXVCLE1BQXZCOztBQUVBLE9BQUFWLGVBQUEsT0FBR0EsWUFBYTM0QixLQUFoQixHQUFnQixNQUFoQixNQUF5QixXQUF6QixJQUFHLENBQUEyNEIsZUFBQSxRQUFBekMsT0FBQXlDLFlBQUEvaEIseUJBQUEsWUFBQXNmLEtBQTZFeHdDLE1BQTdFLEdBQTZFLE1BQTdFLEdBQTZFLE1BQTdFLElBQW9GLENBQXZGLElBQTRGMnpDLFFBQTVGLElBQXdHWCxPQUF4RztBQUdDRSx5QkFBQUQsZUFBQSxPQUFxQkEsWUFBYWh2QixNQUFsQyxHQUFrQyxNQUFsQztBQUdBcXZCLHNCQUFrQi8vQixFQUFFeWYsSUFBRixDQUFBaWdCLGVBQUEsT0FBT0EsWUFBYS9oQix5QkFBcEIsR0FBb0IsTUFBcEIsQ0FBbEI7QUFDQWlpQixtQkFBZXhnQyxHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQnlnQyxlQUFyQixDQUFmO0FBQ0FELHdCQUFvQjFnQyxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBQXNnQyxnQkFBQSxPQUFpQkEsYUFBY2xoQyxJQUEvQixHQUErQixNQUEvQixDQUFwQjtBQUVBbWhDLDBCQUFzQixFQUF0QjtBQUNBRywrQkFBMkIsRUFBM0I7QUFFQXBnQyxZQUFRQyxHQUFSLENBQVksaUNBQVosRUFBQWlnQyxxQkFBQSxRQUFBckMsT0FBQXFDLGtCQUFBNTZCLE9BQUEsWUFBQXU0QixLQUEwRWwrQixHQUExRSxHQUEwRSxNQUExRSxHQUEwRSxNQUExRTtBQUNBSyxZQUFRQyxHQUFSLENBQVksNEJBQVosRUFBQSsvQixnQkFBQSxPQUF5Q0EsYUFBY2poQyxZQUF2RCxHQUF1RCxNQUF2RDs7QUFHQSxTQUFBaWhDLGdCQUFBLE9BQUdBLGFBQWNqaEMsWUFBakIsR0FBaUIsTUFBakIsT0FBR21oQyxxQkFBQSxRQUFBcEMsT0FBQW9DLGtCQUFBNTZCLE9BQUEsWUFBQXc0QixLQUEwRG4rQixHQUExRCxHQUEwRCxNQUExRCxHQUEwRCxNQUE3RDtBQUNDc2dDLDRCQUFBLENBQUFJLE9BQUFILGtCQUFBNTZCLE9BQUEsWUFBQSs2QixLQUFpRG5oQyxNQUFqRCxHQUFpRCxNQUFqRDtBQUNBK2dDLDBCQUFvQnBnQyxPQUFwQixDQUE0QixVQUFDOGdDLGtCQUFEO0FBQzNCM2dDLGdCQUFRQyxHQUFSLENBQVksb0JBQVosRUFBQTBnQyxzQkFBQSxPQUFpQ0EsbUJBQW9CMTdCLElBQXJELEdBQXFELE1BQXJEOztBQUNBLGFBQUEwN0Isc0JBQUEsT0FBR0EsbUJBQW9CMTdCLElBQXZCLEdBQXVCLE1BQXZCLE1BQStCdTdCLFFBQS9CLElBQUcsQ0FBQUcsc0JBQUEsT0FBd0NBLG1CQUFvQmh2QyxJQUE1RCxHQUE0RCxNQUE1RCxNQUFvRSxPQUF2RTtBQ1pNLGlCRGFMeXVDLDJCQUFBTyxzQkFBQSxPQUEyQkEsbUJBQW9CemhDLE1BQS9DLEdBQStDLE1DYjFDO0FBQ0Q7QURTTjtBQUZEO0FBT0MsV0FBQWdoQyxxQkFBQSxRQUFBSSxPQUFBSixrQkFBQTE2QixRQUFBLFlBQUE4NkIsS0FBZ0N6ekMsTUFBaEMsR0FBZ0MsTUFBaEMsR0FBZ0MsTUFBaEMsSUFBeUMsQ0FBekM7QUFDQ3F6QywwQkFBa0IxNkIsUUFBbEIsQ0FBMkIzRixPQUEzQixDQUFtQyxVQUFDK2dDLEVBQUQ7QUFDbEMsZUFBQVosZ0JBQUEsT0FBR0EsYUFBY2poQyxZQUFqQixHQUFpQixNQUFqQixNQUFpQzZoQyxHQUFHamhDLEdBQXBDO0FBQ0NzZ0Msa0NBQUFXLE1BQUEsT0FBc0JBLEdBQUkxaEMsTUFBMUIsR0FBMEIsTUFBMUI7QUNWTSxtQkRXTitnQyxvQkFBb0JwZ0MsT0FBcEIsQ0FBNEIsVUFBQzhnQyxrQkFBRDtBQUMzQixtQkFBQUEsc0JBQUEsT0FBR0EsbUJBQW9CMTdCLElBQXZCLEdBQXVCLE1BQXZCLE1BQStCdTdCLFFBQS9CLElBQUcsQ0FBQUcsc0JBQUEsT0FBd0NBLG1CQUFvQmh2QyxJQUE1RCxHQUE0RCxNQUE1RCxNQUFvRSxPQUF2RTtBQ1ZTLHVCRFdSeXVDLDJCQUFBTyxzQkFBQSxPQUEyQkEsbUJBQW9CemhDLE1BQS9DLEdBQStDLE1DWHZDO0FBQ0Q7QURRVCxjQ1hNO0FBS0Q7QURHUDtBQVJGO0FDUUc7O0FET0hjLFlBQVFDLEdBQVIsQ0FBWSwwQkFBWixFQUFBbWdDLDRCQUFBLE9BQXVDQSx5QkFBMEJ2ekMsTUFBakUsR0FBaUUsTUFBakU7O0FBRUEsUUFBR3V6Qyx3QkFBSDtBQU9DbjNCLGVBQUErMkIsZ0JBQUEsT0FBU0EsYUFBYy8yQixNQUF2QixHQUF1QixNQUF2QjtBQUVBa0MsY0FBUWxDLE9BQU9BLE9BQU9wYyxNQUFQLEdBQWMsQ0FBckIsQ0FBUjtBQUVBZ3FCLGdCQUFBMUwsU0FBQSxPQUFVQSxNQUFPdUwsUUFBUCxDQUFnQixDQUFoQixDQUFWLEdBQTBCLE1BQTFCO0FBRUErcEIsbUJBQUEsQ0FBQTVwQixXQUFBLE9BQWFBLFFBQVMvRixNQUFULENBQWdCMHZCLFFBQWhCLENBQWIsR0FBNkIsTUFBN0IsS0FBMEMsRUFBMUM7QUFFQUQsaUJBQVcsRUFBWDtBQUVBVixjQUFRaGdDLE9BQVIsQ0FBZ0IsVUFBQzZnQyxNQUFEO0FDakJYLGVEa0JKSCxTQUFTRyxNQUFULElBQW1CWCxtQkFBbUJXLE1BQW5CLEtBQThCLEVDbEI3QztBRGlCTDs7QUFJQSxVQUFHSCxZQUFZQSxhQUFZLEVBQTNCO0FBQ0NFLG1CQUFXcHJDLElBQVgsQ0FBZ0JrckMsUUFBaEI7QUFDQXQzQixlQUFPQSxPQUFPcGMsTUFBUCxHQUFjLENBQXJCLEVBQXdCNnBCLFFBQXhCLENBQWlDLENBQWpDLEVBQW9DNUYsTUFBcEMsQ0FBMkMwdkIsUUFBM0MsSUFBdURDLFVBQXZEO0FBRUF6Z0MsZ0JBQVFDLEdBQVIsQ0FBWWdKLE9BQU9BLE9BQU9wYyxNQUFQLEdBQWMsQ0FBckIsRUFBd0I2cEIsUUFBeEIsQ0FBaUMsQ0FBakMsRUFBb0M1RixNQUFwQyxDQUEyQzB2QixRQUEzQyxDQUFaO0FBRUFoaEMsV0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0IwTyxlQUFwQixFQUFvQztBQUNuQ3pPLGdCQUFLO0FBQ0osc0JBQVN6b0I7QUFETDtBQUQ4QixTQUFwQztBQ2hCSSxlRHFCSjJlLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxnQkFBTSxHQURvQjtBQUUxQjNXLGdCQUFNO0FBQ0wsdUJBQVc7QUFETjtBQUZvQixTQUEzQixDQ3JCSTtBRFVMO0FDSEssZURxQkpzNUIsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLGdCQUFNLEdBRG9CO0FBRTFCM1csZ0JBQU07QUFDTCxvQkFBUTtBQURIO0FBRm9CLFNBQTNCLENDckJJO0FEbEJOO0FBQUE7QUMwQkksYURxQkhzNUIsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLGNBQU0sR0FEb0I7QUFFMUIzVyxjQUFNO0FBQ0wsbUJBQVM7QUFESjtBQUZvQixPQUEzQixDQ3JCRztBRDVETDtBQUFBO0FDb0VHLFdEb0JGczVCLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxZQUFNLEdBRG9CO0FBRTFCM1csWUFBTTtBQUNMLG1CQUFXO0FBRE47QUFGb0IsS0FBM0IsQ0NwQkU7QUFNRDtBRHpGSCxHOzs7Ozs7Ozs7Ozs7QUVBQXM1QixXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QixvQ0FBdkIsRUFBNkQsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzVELE1BQUErWSxPQUFBLEVBQUFDLGNBQUEsRUFBQWpxQixPQUFBLEVBQUFrcUIsV0FBQSxFQUFBbEIsT0FBQSxFQUFBbUIsS0FBQSxFQUFBQyxZQUFBLEVBQUFDLFVBQUEsRUFBQUMsWUFBQSxFQUFBQyxXQUFBLEVBQUFDLGlCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGlCQUFBLEVBQUFDLE9BQUEsRUFBQUMsY0FBQSxFQUFBMXVDLENBQUEsRUFBQTJ1QyxLQUFBLEVBQUFDLFlBQUEsRUFBQUMsVUFBQSxFQUFBQyxRQUFBLEVBQUFDLFdBQUEsRUFBQUMsaUJBQUEsRUFBQUMsa0JBQUEsRUFBQUMsaUJBQUEsRUFBQUMsT0FBQSxFQUFBbmlDLEdBQUEsRUFBQWtHLElBQUEsRUFBQWs4QixLQUFBLEVBQUFDLEtBQUEsRUFBQUMsS0FBQSxFQUFBQyxLQUFBLEVBQUFDLEtBQUEsRUFBQUMsS0FBQSxFQUFBQyxLQUFBLEVBQUFDLEtBQUEsRUFBQUMsS0FBQSxFQUFBQyxLQUFBLEVBQUFyc0IsSUFBQSxFQUFBc3NCLEtBQUEsRUFBQUMsS0FBQSxFQUFBQyxLQUFBLEVBQUF2c0IsSUFBQSxFQUFBRyxJQUFBLEVBQUEwbUIsSUFBQSxFQUFBUSxJQUFBLEVBQUFDLElBQUEsRUFBQXVDLElBQUEsRUFBQUMsSUFBQSxFQUFBRyxVQUFBLEVBQUF0MUIsS0FBQSxFQUFBbEMsTUFBQTs7QUFBQTtBQUNDakosWUFBUUMsR0FBUixDQUFZLHlCQUFaO0FBQ0FELFlBQVFDLEdBQVIsQ0FBWSxvQkFBWixFQUFBeW5CLE9BQUEsUUFBQTNuQixNQUFBMm5CLElBQUExM0IsS0FBQSxZQUFBK1AsSUFBNkNpakMsTUFBN0MsR0FBNkMsTUFBN0MsR0FBNkMsTUFBN0M7QUFDQWhqQyxZQUFRQyxHQUFSLENBQVkseUJBQVo7QUFDQUQsWUFBUUMsR0FBUixDQUFZLG9CQUFaLEVBQUF5bkIsT0FBQSxRQUFBemhCLE9BQUF5aEIsSUFBQTEzQixLQUFBLFlBQUFpVyxLQUE2Q2c5QixNQUE3QyxHQUE2QyxNQUE3QyxHQUE2QyxNQUE3QztBQUNBampDLFlBQVFDLEdBQVIsQ0FBWSw4QkFBWjtBQUNBRCxZQUFRQyxHQUFSLENBQVksdUJBQVosRUFBQXluQixPQUFBLFFBQUFuUixPQUFBbVIsSUFBQTEzQixLQUFBLFlBQUF1bUIsS0FBZ0Qyc0IsU0FBaEQsR0FBZ0QsTUFBaEQsR0FBZ0QsTUFBaEQ7QUFDQWxqQyxZQUFRQyxHQUFSLENBQVksOEJBQVo7QUFDQUQsWUFBUUMsR0FBUixDQUFZLHVCQUFaLEVBQUF5bkIsT0FBQSxRQUFBbFIsT0FBQWtSLElBQUExM0IsS0FBQSxZQUFBd21CLEtBQWdEMnNCLFNBQWhELEdBQWdELE1BQWhELEdBQWdELE1BQWhEO0FBQ0FuakMsWUFBUUMsR0FBUixDQUFZLDJCQUFaO0FBQ0FELFlBQVFDLEdBQVIsQ0FBWSx1QkFBWixFQUFBeW5CLE9BQUEsUUFBQS9RLE9BQUErUSxJQUFBMTNCLEtBQUEsWUFBQTJtQixLQUFnRHlzQixTQUFoRCxHQUFnRCxNQUFoRCxHQUFnRCxNQUFoRDtBQUdBcEMsWUFBQXRaLE9BQUEsUUFBQTJWLE9BQUEzVixJQUFBeGYsSUFBQSxZQUFBbTFCLEtBQW1CajRCLFFBQW5CLEdBQW1CLE1BQW5CLEdBQW1CLE1BQW5COztBQUdBLFNBQUE0N0IsU0FBQSxPQUFHQSxNQUFPNzVCLEtBQVYsR0FBVSxNQUFWLE1BQW1CLFdBQW5CO0FBQ0MsVUFBQXVnQixPQUFBLFFBQUFtVyxPQUFBblcsSUFBQTEzQixLQUFBLFlBQUE2dEMsS0FBZW1GLE1BQWYsR0FBZSxNQUFmLEdBQWUsTUFBZjtBQUNDZCxrQkFBQXhhLE9BQUEsUUFBQW9XLE9BQUFwVyxJQUFBMTNCLEtBQUEsWUFBQTh0QyxLQUFzQmtGLE1BQXRCLEdBQXNCLE1BQXRCLEdBQXNCLE1BQXRCOztBQUNBLFlBQUF0YixPQUFBLFFBQUEyWSxPQUFBM1ksSUFBQTEzQixLQUFBLFlBQUFxd0MsS0FBZTRDLE1BQWYsR0FBZSxNQUFmLEdBQWUsTUFBZjtBQUNDekIsb0JBQUE5WixPQUFBLFFBQUE0WSxPQUFBNVksSUFBQTEzQixLQUFBLFlBQUFzd0MsS0FBc0IyQyxNQUF0QixHQUFzQixNQUF0QixHQUFzQixNQUF0QjtBQUREO0FBR0N6QixvQkFBVVUsT0FBVjtBQ0ZJOztBREdMLFlBQUF4YSxPQUFBLFFBQUF5YSxRQUFBemEsSUFBQTEzQixLQUFBLFlBQUFteUMsTUFBZWtCLE1BQWYsR0FBZSxNQUFmLEdBQWUsTUFBZjtBQUNDeEMsb0JBQUFuWixPQUFBLFFBQUEwYSxRQUFBMWEsSUFBQTEzQixLQUFBLFlBQUFveUMsTUFBc0JpQixNQUF0QixHQUFzQixNQUF0QixHQUFzQixNQUF0QjtBQ0RJOztBREVMLFlBQUEzYixPQUFBLFFBQUEyYSxRQUFBM2EsSUFBQTEzQixLQUFBLFlBQUFxeUMsTUFBZWEsU0FBZixHQUFlLE1BQWYsR0FBZSxNQUFmO0FBQ0NwQix3QkFBQXBhLE9BQUEsUUFBQTRhLFFBQUE1YSxJQUFBMTNCLEtBQUEsWUFBQXN5QyxNQUEwQlksU0FBMUIsR0FBMEIsTUFBMUIsR0FBMEIsTUFBMUI7O0FBQ0EsY0FBQXhiLE9BQUEsUUFBQTZhLFFBQUE3YSxJQUFBMTNCLEtBQUEsWUFBQXV5QyxNQUFlWSxTQUFmLEdBQWUsTUFBZixHQUFlLE1BQWY7QUFDQy9CLDBCQUFBMVosT0FBQSxRQUFBOGEsUUFBQTlhLElBQUExM0IsS0FBQSxZQUFBd3lDLE1BQTBCVyxTQUExQixHQUEwQixNQUExQixHQUEwQixNQUExQjtBQUREO0FBR0MvQiwwQkFBY1UsV0FBZDtBQ0FLOztBRENOakMsb0JBQUEsQ0FBQW5ZLE9BQUEsUUFBQSthLFFBQUEvYSxJQUFBMTNCLEtBQUEsWUFBQXl5QyxNQUFzQlcsU0FBdEIsQ0FBZ0MxdkMsS0FBaEMsQ0FBc0MsR0FBdEMsSUFBVSxNQUFWLEdBQVUsTUFBVixLQUE4QyxFQUE5QztBQUNBc00sa0JBQVFDLEdBQVIsQ0FBWSxTQUFaLEVBQXNCNC9CLE9BQXRCOztBQUVBLGNBQUdBLFdBQVdBLFFBQVFoekMsTUFBUixHQUFlLENBQTdCO0FBQ0NtVCxvQkFBUUMsR0FBUixDQUFZLHdCQUFaO0FBQ0FELG9CQUFRQyxHQUFSLENBQVl1aEMsT0FBWixFQUFxQk0sV0FBckIsRUFBa0NqQyxPQUFsQztBQUdBc0IsMkJBQUFILFNBQUEsT0FBZUEsTUFBT2x3QixNQUF0QixHQUFzQixNQUF0QjtBQUdBK3dCLHVCQUFXemhDLEVBQUV5ZixJQUFGLENBQUFtaEIsU0FBQSxPQUFPQSxNQUFPampCLHlCQUFkLEdBQWMsTUFBZCxDQUFYO0FBQ0EyakIsb0JBQVFsaUMsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUJtaUMsUUFBckIsQ0FBUjtBQUNBRCx5QkFBYXBpQyxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBQWdpQyxTQUFBLE9BQWlCQSxNQUFPNWlDLElBQXhCLEdBQXdCLE1BQXhCLENBQWI7QUFFQW9pQyx5QkFBYTFoQyxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBQXNoQyxTQUFBLE9BQWlCQSxNQUFPbGlDLElBQXhCLEdBQXdCLE1BQXhCLENBQWI7QUFHQTZpQywyQkFBZSxFQUFmO0FBR0FNLGdDQUFvQixFQUFwQjtBQUdBaEIsMkJBQWUsRUFBZjtBQUVBTSxnQ0FBb0IsRUFBcEI7QUFHQVIsMEJBQWMsRUFBZDtBQUlBVSw2QkFBaUIsRUFBakI7O0FBR0EsaUJBQUFDLFNBQUEsT0FBR0EsTUFBTzNpQyxZQUFWLEdBQVUsTUFBVixPQUFHNmlDLGNBQUEsUUFBQWMsUUFBQWQsV0FBQXQ4QixPQUFBLFlBQUFvOUIsTUFBNEMvaUMsR0FBNUMsR0FBNEMsTUFBNUMsR0FBNEMsTUFBL0M7QUFDQ2dpQyw2QkFBQUMsY0FBQSxRQUFBZSxRQUFBZixXQUFBdDhCLE9BQUEsWUFBQXE5QixNQUFvQ3pqQyxNQUFwQyxHQUFvQyxNQUFwQyxHQUFvQyxNQUFwQztBQUNBeWlDLDJCQUFhOWhDLE9BQWIsQ0FBcUIsVUFBQ3lqQyxXQUFEO0FBQ3BCLHFCQUFBQSxlQUFBLE9BQUdBLFlBQWEzeEMsSUFBaEIsR0FBZ0IsTUFBaEIsTUFBd0IsT0FBeEIsSUFBRyxDQUFBMnhDLGVBQUEsT0FBZ0NBLFlBQWFyK0IsSUFBN0MsR0FBNkMsTUFBN0MsTUFBcURpOUIsT0FBeEQ7QUNuQlUseUJEb0JURCxvQkFBQXFCLGVBQUEsT0FBb0JBLFlBQWFwa0MsTUFBakMsR0FBaUMsTUNwQnhCO0FBQ0Q7QURpQlY7QUFGRDtBQU1DLG1CQUFBMGlDLGNBQUEsUUFBQWdCLFFBQUFoQixXQUFBcDhCLFFBQUEsWUFBQW85QixNQUF5Qi8xQyxNQUF6QixHQUF5QixNQUF6QixHQUF5QixNQUF6QixJQUFrQyxDQUFsQztBQUNDKzBDLDJCQUFXcDhCLFFBQVgsQ0FBb0IzRixPQUFwQixDQUE0QixVQUFDK2dDLEVBQUQ7QUFDM0IsdUJBQUFjLFNBQUEsT0FBR0EsTUFBTzNpQyxZQUFWLEdBQVUsTUFBVixNQUEwQjZoQyxHQUFHamhDLEdBQTdCO0FBQ0NnaUMsbUNBQUFmLE1BQUEsT0FBZUEsR0FBSTFoQyxNQUFuQixHQUFtQixNQUFuQjtBQ2pCVSwyQkRrQlZ5aUMsYUFBYTloQyxPQUFiLENBQXFCLFVBQUN5akMsV0FBRDtBQUNwQiwyQkFBQUEsZUFBQSxPQUFHQSxZQUFhM3hDLElBQWhCLEdBQWdCLE1BQWhCLE1BQXdCLE9BQXhCLElBQUcsQ0FBQTJ4QyxlQUFBLE9BQWdDQSxZQUFhcitCLElBQTdDLEdBQTZDLE1BQTdDLE1BQXFEaTlCLE9BQXhEO0FDakJhLCtCRGtCWkQsb0JBQUFxQixlQUFBLE9BQW9CQSxZQUFhcGtDLE1BQWpDLEdBQWlDLE1DbEJyQjtBQUNEO0FEZWIsc0JDbEJVO0FBS0Q7QURVWDtBQVBGO0FDQU87O0FEZVAsaUJBQUE4aEMsU0FBQSxPQUFHQSxNQUFPamlDLFlBQVYsR0FBVSxNQUFWLE9BQUdtaUMsY0FBQSxRQUFBMkIsUUFBQTNCLFdBQUE1N0IsT0FBQSxZQUFBdTlCLE1BQTRDbGpDLEdBQTVDLEdBQTRDLE1BQTVDLEdBQTRDLE1BQS9DO0FBQ0NzaEMsNkJBQUFDLGNBQUEsUUFBQTRCLFFBQUE1QixXQUFBNTdCLE9BQUEsWUFBQXc5QixNQUFvQzVqQyxNQUFwQyxHQUFvQyxNQUFwQyxHQUFvQyxNQUFwQztBQUNBK2hDLDJCQUFhcGhDLE9BQWIsQ0FBcUIsVUFBQzBqQyxXQUFEO0FBQ3BCLG9CQUFHLENBQUFBLGVBQUEsT0FBQ0EsWUFBYTV4QyxJQUFkLEdBQWMsTUFBZCxNQUFzQixPQUF0QixJQUFDLENBQUE0eEMsZUFBQSxPQUFnQ0EsWUFBYXQrQixJQUE3QyxHQUE2QyxNQUE3QyxNQUFxRHU4QixPQUF0RCxJQUFpRVgsV0FBQSxDQUFBMEMsZUFBQSxPQUFXQSxZQUFhNXhDLElBQXhCLEdBQXdCLE1BQXhCLE1BQWdDLE9BQWhDLEtBQUE0eEMsZUFBQSxPQUEyQ0EsWUFBYXQrQixJQUF4RCxHQUF3RCxNQUF4RCxNQUFnRTQ3QixPQUFwSTtBQ2JVLHlCRGNUVSxvQkFBb0JBLGtCQUFrQnhyQyxNQUFsQixDQUFBd3RDLGVBQUEsT0FBeUJBLFlBQWFya0MsTUFBdEMsR0FBc0MsTUFBdEMsQ0NkWDtBQUNEO0FEV1Y7QUFGRDtBQU1DLG1CQUFBZ2lDLGNBQUEsUUFBQTZCLFFBQUE3QixXQUFBMTdCLFFBQUEsWUFBQXU5QixNQUF5QmwyQyxNQUF6QixHQUF5QixNQUF6QixHQUF5QixNQUF6QixJQUFrQyxDQUFsQztBQUNDcTBDLDJCQUFXMTdCLFFBQVgsQ0FBb0IzRixPQUFwQixDQUE0QixVQUFDMmpDLEVBQUQ7QUFDM0IsdUJBQUF4QyxTQUFBLE9BQUdBLE1BQU9qaUMsWUFBVixHQUFVLE1BQVYsTUFBMEJ5a0MsR0FBRzdqQyxHQUE3QjtBQUNDc2hDLG1DQUFBdUMsTUFBQSxPQUFlQSxHQUFJdGtDLE1BQW5CLEdBQW1CLE1BQW5CO0FDWFUsMkJEWVYraEMsYUFBYXBoQyxPQUFiLENBQXFCLFVBQUMwakMsV0FBRDtBQUNwQiwwQkFBRyxDQUFBQSxlQUFBLE9BQUNBLFlBQWE1eEMsSUFBZCxHQUFjLE1BQWQsTUFBc0IsT0FBdEIsSUFBQyxDQUFBNHhDLGVBQUEsT0FBZ0NBLFlBQWF0K0IsSUFBN0MsR0FBNkMsTUFBN0MsTUFBcUR1OEIsT0FBdEQsSUFBaUVYLFdBQUEsQ0FBQTBDLGVBQUEsT0FBV0EsWUFBYTV4QyxJQUF4QixHQUF3QixNQUF4QixNQUFnQyxPQUFoQyxLQUFBNHhDLGVBQUEsT0FBMkNBLFlBQWF0K0IsSUFBeEQsR0FBd0QsTUFBeEQsTUFBZ0U0N0IsT0FBcEk7QUNYYSwrQkRZWlUsb0JBQW9CQSxrQkFBa0J4ckMsTUFBbEIsQ0FBQXd0QyxlQUFBLE9BQXlCQSxZQUFhcmtDLE1BQXRDLEdBQXNDLE1BQXRDLENDWlI7QUFDRDtBRFNiLHNCQ1pVO0FBS0Q7QURJWDtBQVBGO0FDTU87O0FEV1AsZ0JBQUcraUMsa0JBQWtCcDFDLE1BQWxCLEtBQTRCLENBQS9CO0FBQ0NtVCxzQkFBUUMsR0FBUixDQUFZLG1CQUFaLEVBQWdDZ2lDLGlCQUFoQztBQUNBLG9CQUFNLElBQUk3aUMsT0FBT3BFLEtBQVgsQ0FBaUIsNkJBQWpCLEVBQWdELFdBQWhELENBQU47QUNUTTs7QURXUCxnQkFBR3VtQyxrQkFBa0IxMEMsTUFBbEIsS0FBNEIsQ0FBL0I7QUFDQyxvQkFBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsNkJBQWpCLEVBQWdELGFBQWhELENBQU47QUNUTTs7QURXUHltQyw2QkFBQSxDQUFBVCxTQUFBLE9BQWlCQSxNQUFPbHdCLE1BQVAsQ0FBYzB3QixPQUFkLENBQWpCLEdBQStCLE1BQS9CLEtBQTJDLEVBQTNDOztBQUdBLGdCQUFHWCxPQUFIO0FBQ0NDLCtCQUFBLENBQUFFLFNBQUEsT0FBa0JBLE1BQU9sd0IsTUFBUCxDQUFjK3ZCLE9BQWQsQ0FBbEIsR0FBZ0MsTUFBaEMsS0FBNEMsRUFBNUM7O0FBQ0Esa0JBQUdDLGtCQUFBLENBQUFBLGtCQUFBLE9BQWtCQSxlQUFnQmowQyxNQUFsQyxHQUFrQyxNQUFsQyxPQUFrQjQwQyxrQkFBQSxPQUF3QkEsZUFBZ0I1MEMsTUFBeEMsR0FBd0MsTUFBMUQsQ0FBSDtBQUNDaTBDLCtCQUFlamhDLE9BQWYsQ0FBdUIsVUFBQzRqQyxLQUFELEVBQU92c0MsS0FBUDtBQUN0QixzQkFBQXRCLEdBQUEsRUFBQTh0QyxPQUFBLEVBQUE1MUMsS0FBQTtBQUFBNDFDLDRCQUFBOztBQ1ZTLHVCRFVUOXRDLEdDVlMsMkNEVVQ2dEMsS0NWUyxHRFVUO0FDVFczMUMsNEJBQVEyMUMsTUFBTTd0QyxHQUFOLENBQVI7QUFDQTh0Qyw0QkFBUXJ1QyxJQUFSLENEUVhvc0MsZUFBZXZxQyxLQUFmLEVBQXNCdEIsR0FBdEIsSUFBNkI5SCxLQ1JsQjtBRFFYOztBQ05TLHlCQUFPNDFDLE9BQVA7QURLVjtBQUhGO0FDQ087O0FES1AsZ0JBQUdqQyxlQUFlNTBDLE1BQWYsS0FBeUIsQ0FBNUI7QUFDQyxvQkFBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsNkJBQWpCLEVBQWdELGNBQWhELENBQU47QUNITTs7QURLUGduQyxpQ0FBcUJDLGtCQUFrQmppQixNQUFsQixDQUF5QixVQUFDMmpCLENBQUQ7QUFBSyxxQkFBT0EsRUFBRTErQixJQUFGLEtBQVE2OEIsV0FBZjtBQUE5QixjQUFyQjtBQUNBUixpQ0FBcUJDLGtCQUFrQnZoQixNQUFsQixDQUF5QixVQUFDMmpCLENBQUQ7QUFBSyxxQkFBT0EsRUFBRTErQixJQUFGLEtBQVFtOEIsV0FBZjtBQUE5QixjQUFyQjs7QUFHQSxnQkFBR1ksbUJBQW1CbjFDLE1BQW5CLEtBQTZCLENBQWhDO0FBQ0Msb0JBQU0sSUFBSXVTLE9BQU9wRSxLQUFYLENBQWlCLDZCQUFqQixFQUFnRCxjQUFoRCxDQUFOO0FDRE07O0FER1AsZ0JBQUdzbUMsbUJBQW1CejBDLE1BQW5CLEtBQTZCLENBQWhDO0FBQ0Msb0JBQU0sSUFBSXVTLE9BQU9wRSxLQUFYLENBQWlCLDZCQUFqQixFQUFnRCxnQkFBaEQsQ0FBTjtBQ0RNOztBRElQK21DLGdDQUFvQkMsbUJBQW1CLENBQW5CLENBQXBCO0FBQ0FYLGdDQUFvQkMsbUJBQW1CLENBQW5CLENBQXBCOztBQUVBLGlCQUFBUyxxQkFBQSxPQUFHQSxrQkFBbUJwd0MsSUFBdEIsR0FBc0IsTUFBdEIsT0FBRzB2QyxxQkFBQSxPQUEyQkEsa0JBQW1CMXZDLElBQTlDLEdBQThDLE1BQWpEO0FBQ0Msb0JBQU0sSUFBSXlOLE9BQU9wRSxLQUFYLENBQWlCLDZCQUFqQixFQUFnRCx3QkFBaEQsQ0FBTjtBQ0hNOztBRE1QNmtDLG9CQUFRaGdDLE9BQVIsQ0FBZ0IsVUFBQzZnQyxNQUFEO0FBQ2Ysa0JBQUFrRCxHQUFBLEVBQUFDLElBQUEsRUFBQUMsS0FBQSxFQUFBQyxZQUFBLEVBQUFDLEtBQUEsRUFBQUMsWUFBQTtBQUFBSixxQkFBT25ELE9BQU9odEMsS0FBUCxDQUFhLEdBQWIsS0FBcUIsRUFBNUI7O0FBQ0Esa0JBQUdtd0MsS0FBS2gzQyxNQUFMLEtBQWUsQ0FBbEI7QUFDQ20zQyx3QkFBUUgsS0FBSyxDQUFMLENBQVI7QUFDQUMsd0JBQVFELEtBQUssQ0FBTCxDQUFSO0FBQ0FJLCtCQUFlaEMsa0JBQWtCamlCLE1BQWxCLENBQXlCLFVBQUMyakIsQ0FBRDtBQUFLLHlCQUFPQSxFQUFFMStCLElBQUYsS0FBUSsrQixLQUFmO0FBQTlCLGtCQUFmO0FBQ0FELCtCQUFleEMsa0JBQWtCdmhCLE1BQWxCLENBQXlCLFVBQUMyakIsQ0FBRDtBQUFLLHlCQUFPQSxFQUFFMStCLElBQUYsS0FBUTYrQixLQUFmO0FBQTlCLGtCQUFmOztBQUdBLG9CQUFHRyxhQUFhcDNDLE1BQWIsS0FBdUIsQ0FBMUI7QUFDQyx3QkFBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsNkJBQWpCLEVBQWdELGNBQWhELENBQU47QUNEUTs7QURHVCxvQkFBRytvQyxhQUFhbDNDLE1BQWIsS0FBdUIsQ0FBMUI7QUFDQyx3QkFBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsNkJBQWpCLEVBQWdELGdCQUFoRCxDQUFOO0FDRFE7O0FESVQscUJBQUFpcEMsZ0JBQUEsT0FBR0EsYUFBY3R5QyxJQUFqQixHQUFpQixNQUFqQixPQUFHb3lDLGdCQUFBLE9BQXNCQSxhQUFjcHlDLElBQXBDLEdBQW9DLE1BQXZDO0FBQ0Msd0JBQU0sSUFBSXlOLE9BQU9wRSxLQUFYLENBQWlCLDZCQUFqQixFQUFnRCxZQUFoRCxDQUFOO0FDRlE7O0FESVQ0b0Msc0JBQU07QUFDTEkseUJBQU9BLEtBREY7QUFFTEYseUJBQU9BO0FBRkYsaUJBQU47QUNDUSx1QkRHUi9DLFlBQVkxckMsSUFBWixDQUFpQnV1QyxHQUFqQixDQ0hRO0FEbEJUO0FBd0JDLHNCQUFNLElBQUl4a0MsT0FBT3BFLEtBQVgsQ0FBaUIsNkJBQWpCLEVBQWdELFFBQWhELENBQU47QUNITztBRHZCVDtBQStCQWlPLHFCQUFBeTRCLFNBQUEsT0FBU0EsTUFBT3o0QixNQUFoQixHQUFnQixNQUFoQjtBQUdBa0Msb0JBQVFsQyxPQUFPQSxPQUFPcGMsTUFBUCxHQUFjLENBQXJCLENBQVI7QUFHQWdxQixzQkFBQTFMLFNBQUEsT0FBVUEsTUFBT3VMLFFBQVAsQ0FBZ0IsQ0FBaEIsQ0FBVixHQUEwQixNQUExQjtBQUdBK3BCLHlCQUFBLENBQUE1cEIsV0FBQSxPQUFhQSxRQUFTL0YsTUFBVCxDQUFnQm94QixPQUFoQixDQUFiLEdBQTZCLE1BQTdCLEtBQXlDLEVBQXpDO0FBS0FULDJCQUFlNWhDLE9BQWYsQ0FBdUIsVUFBQ3FrQyxLQUFEO0FBR3RCLGtCQUFBdG5CLEtBQUEsRUFBQXVuQixPQUFBLEVBQUE1RCxRQUFBO0FBQUE0RCx3QkFBVSxLQUFWO0FBQ0F2bkIsc0JBQVEsQ0FBQyxDQUFUO0FBR0E2akIseUJBQVc1Z0MsT0FBWCxDQUFtQixVQUFDdWtDLEtBQUQsRUFBUWx0QyxLQUFSO0FBT2xCLG9CQUFHa3RDLE1BQU10QyxXQUFOLE1BQXNCb0MsTUFBTTlDLFdBQU4sQ0FBekI7QUFDQytDLDRCQUFVLElBQVY7QUN4QlMseUJEeUJUdm5CLFFBQVExbEIsS0N6QkM7QUFDRDtBRGVWOztBQWFBLGtCQUFHaXRDLFlBQVMsSUFBWjtBQ3pCUyx1QkQwQlJwRCxZQUFZbGhDLE9BQVosQ0FBb0IsVUFBQytqQyxHQUFEO0FDekJWLHlCRDBCVG5ELFdBQVc3akIsS0FBWCxFQUFrQmduQixPQUFBLE9BQUFBLElBQUtJLEtBQUwsR0FBSyxNQUF2QixJQUFnQ0UsTUFBTU4sT0FBQSxPQUFBQSxJQUFLRSxLQUFMLEdBQUssTUFBWCxDQzFCdkI7QUR5QlYsa0JDMUJRO0FEeUJUO0FBS0N2RCwyQkFBVyxFQUFYO0FBQ0FBLHlCQUFTdUIsV0FBVCxJQUF3Qm9DLE1BQU05QyxXQUFOLENBQXhCO0FBQ0FMLDRCQUFZbGhDLE9BQVosQ0FBb0IsVUFBQytqQyxHQUFEO0FDekJWLHlCRDBCVHJELFNBQVNxRCxPQUFBLE9BQUFBLElBQUtJLEtBQUwsR0FBSyxNQUFkLElBQXVCRSxNQUFNTixPQUFBLE9BQUFBLElBQUtFLEtBQUwsR0FBSyxNQUFYLENDMUJkO0FEeUJWO0FDdkJRLHVCRHlCUnJELFdBQVdwckMsSUFBWCxDQUFnQmtyQyxRQUFoQixDQ3pCUTtBQUNEO0FETFQ7QUFnQ0F0M0IsbUJBQU9BLE9BQU9wYyxNQUFQLEdBQWMsQ0FBckIsRUFBd0I2cEIsUUFBeEIsQ0FBaUMsQ0FBakMsRUFBb0M1RixNQUFwQyxHQUFBNHdCLFNBQUEsT0FBNkNBLE1BQU81d0IsTUFBcEQsR0FBb0QsTUFBcEQ7QUFDQTdILG1CQUFPQSxPQUFPcGMsTUFBUCxHQUFjLENBQXJCLEVBQXdCNnBCLFFBQXhCLENBQWlDLENBQWpDLEVBQW9DNUYsTUFBcEMsQ0FBMkNveEIsT0FBM0MsSUFBc0R6QixVQUF0RDtBQUVBamhDLGVBQUdrZCxTQUFILENBQWErVSxNQUFiLENBQW9Cb1EsUUFBcEIsRUFBNkI7QUFDNUJuUSxvQkFBSztBQUNKLDBCQUFTem9CO0FBREw7QUFEdUIsYUFBN0I7QUFNQTJlLHVCQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQzFCeU0sb0JBQU0sR0FEb0I7QUFFMUIzVyxvQkFBTTtBQUNMLDJCQUFXO0FBRE47QUFGb0IsYUFBM0I7QUE1TEQ7QUFvTUMsa0JBQU0sSUFBSThRLE9BQU9wRSxLQUFYLENBQWlCLDZCQUFqQixFQUFnRCw2QkFBaEQsQ0FBTjtBQTdNRjtBQUFBO0FBK01DLGdCQUFNLElBQUlvRSxPQUFPcEUsS0FBWCxDQUFpQiw2QkFBakIsRUFBZ0QsNkJBQWhELENBQU47QUF2TkY7QUFBQTtBQXlOQyxjQUFNLElBQUlvRSxPQUFPcEUsS0FBWCxDQUFpQiw2QkFBakIsRUFBZ0QsMEJBQWhELENBQU47QUExTkY7QUFBQTtBQTROQyxZQUFNLElBQUlvRSxPQUFPcEUsS0FBWCxDQUFpQiw2QkFBakIsRUFBZ0QsUUFBaEQsQ0FBTjtBQTVPRjtBQUFBLFdBQUFrSixLQUFBO0FBNk9NblIsUUFBQW1SLEtBQUE7QUN0QkgsV0R1QkYwakIsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUMxQnlNLFlBQU0sR0FEb0I7QUFFMUIzVyxZQUFNO0FBQ0xrOEIsZ0JBQVEsQ0FBQ3ozQixDQUFEO0FBREg7QUFGb0IsS0FBM0IsQ0N2QkU7QUFNRDtBRDlOSCxHOzs7Ozs7Ozs7Ozs7QUVBQTYwQixXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1Qiw4QkFBdkIsRUFBdUQsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQ3RELE1BQUEvMEIsQ0FBQSxFQUFBbWMsR0FBQSxFQUFBbTFCLGdCQUFBLEVBQUF0a0MsR0FBQSxFQUFBa0csSUFBQSxFQUFBc1EsSUFBQSxFQUFBQyxJQUFBLEVBQUFHLElBQUEsRUFBQTBtQixJQUFBLEVBQUFRLElBQUEsRUFBQUMsSUFBQSxFQUFBd0csUUFBQSxFQUFBQyxTQUFBLEVBQUFDLGdCQUFBLEVBQUFDLE9BQUE7O0FBQUE7QUFDT3prQyxZQUFRQyxHQUFSLENBQVksdUJBQVo7QUFDQUQsWUFBUUMsR0FBUixDQUFZLHNCQUFaLEVBQUF5bkIsT0FBQSxRQUFBM25CLE1BQUEybkIsSUFBQTEzQixLQUFBLFlBQUErUCxJQUErQ3lnQyxRQUEvQyxHQUErQyxNQUEvQyxHQUErQyxNQUEvQztBQUNBeGdDLFlBQVFDLEdBQVIsQ0FBWSwwQkFBWjtBQUNBRCxZQUFRQyxHQUFSLENBQVksb0JBQVosRUFBQXluQixPQUFBLFFBQUF6aEIsT0FBQXloQixJQUFBMTNCLEtBQUEsWUFBQWlXLEtBQTZDeStCLE1BQTdDLEdBQTZDLE1BQTdDLEdBQTZDLE1BQTdDO0FBQ0Exa0MsWUFBUUMsR0FBUixDQUFZLDBCQUFaO0FBQ0FELFlBQVFDLEdBQVIsQ0FBWSxxQkFBWixFQUFBeW5CLE9BQUEsUUFBQW5SLE9BQUFtUixJQUFBMTNCLEtBQUEsWUFBQXVtQixLQUE4Q291QixPQUE5QyxHQUE4QyxNQUE5QyxHQUE4QyxNQUE5QztBQUNBM2tDLFlBQVFDLEdBQVIsQ0FBWSwrQkFBWjtBQUNBRCxZQUFRQyxHQUFSLENBQVksd0JBQVosRUFBQXluQixPQUFBLFFBQUFsUixPQUFBa1IsSUFBQTEzQixLQUFBLFlBQUF3bUIsS0FBaURvdUIsVUFBakQsR0FBaUQsTUFBakQsR0FBaUQsTUFBakQ7QUFHQUwsZ0JBQUE3YyxPQUFBLFFBQUEvUSxPQUFBK1EsSUFBQTEzQixLQUFBLFlBQUEybUIsS0FBd0I2cEIsUUFBeEIsR0FBd0IsTUFBeEIsR0FBd0IsTUFBeEI7O0FBQ0EsUUFBRyxDQUFDK0QsU0FBSjtBQUNJdmtDLGNBQVFDLEdBQVIsQ0FBWSxzQkFBWjtBQUNBLFlBQU0sSUFBSWIsT0FBT3BFLEtBQVgsQ0FBaUIsbUJBQWpCLEVBQXNDLHlCQUF0QyxDQUFOO0FDQVA7O0FERUd5cEMsY0FBQS9jLE9BQUEsUUFBQTJWLE9BQUEzVixJQUFBMTNCLEtBQUEsWUFBQXF0QyxLQUFzQnFILE1BQXRCLEdBQXNCLE1BQXRCLEdBQXNCLE1BQXRCOztBQUNBLFFBQUcsQ0FBQ0QsT0FBSjtBQUNJemtDLGNBQVFDLEdBQVIsQ0FBWSxvQkFBWjtBQUNBLFlBQU0sSUFBSWIsT0FBT3BFLEtBQVgsQ0FBaUIsbUJBQWpCLEVBQXNDLHVCQUF0QyxDQUFOO0FDQVA7O0FERUdzcEMsZUFBQTVjLE9BQUEsUUFBQW1XLE9BQUFuVyxJQUFBMTNCLEtBQUEsWUFBQTZ0QyxLQUF1QjhHLE9BQXZCLEdBQXVCLE1BQXZCLEdBQXVCLE1BQXZCOztBQUNBLFFBQUcsQ0FBQ0wsUUFBSjtBQUNJdGtDLGNBQVFDLEdBQVIsQ0FBWSxxQkFBWjtBQUNBLFlBQU0sSUFBSWIsT0FBT3BFLEtBQVgsQ0FBaUIsbUJBQWpCLEVBQXNDLHdCQUF0QyxDQUFOO0FDQVA7O0FEUUdrVSxVQUFBd1ksT0FBQSxRQUFBb1csT0FBQXBXLElBQUF4ZixJQUFBLFlBQUE0MUIsS0FBaUIxNEIsUUFBakIsR0FBaUIsTUFBakIsR0FBaUIsTUFBakI7QUFFQW8vQix1QkFBbUJ0MUIsSUFBSTRCLE1BQUosQ0FBV3l6QixTQUFYLENBQW5COztBQUVBLFNBQUFDLG9CQUFBLE9BQUdBLGlCQUFrQjMzQyxNQUFyQixHQUFxQixNQUFyQixJQUE4QixDQUE5QjtBQUFBLFVBSUlnNEMsUUFKSixHQUlJLFVBQUFDLE9BQUEsRUFBQWx2QyxHQUFBLEVBQUFtdkMsR0FBQTtBQ1hJLGFBQUksSUFBSUMsSUFBRSxDQUFOLEVBQVFDLEtBQUdILFFBQVFqNEMsTUFBdkIsRUFBOEJtNEMsSUFBSUMsRUFBbEMsRUFBcUNELEdBQXJDLEVBQXlDO0FBQ3JDLGNBQUlFLE9BQU9KLFFBQVFFLENBQVIsQ0FBWDtBQUFBLGNBQ0l2NEIsTUFBTzA0QixPQUFPRCxLQUFLdHZDLEdBQUwsQ0FBUCxDQURYO0FBQUEsY0FFSXBILElBQU93MkMsSUFBRSxDQUZiOztBQUdBLGNBQUdELE9BQUssSUFBUixFQUFhO0FBQ1QsbUJBQU12MkMsS0FBSSxDQUFKLElBQVMyMkMsT0FBT0wsUUFBUXQyQyxDQUFSLEVBQVdvSCxHQUFYLENBQVAsSUFBd0I2VyxHQUF2QyxFQUEyQztBQUN2Q3E0QixzQkFBUXQyQyxJQUFFLENBQVYsSUFBZXMyQyxRQUFRdDJDLENBQVIsQ0FBZjtBQUNBQSxrQkFBSUEsSUFBRSxDQUFOO0FBQ0g7QUFDSixXQUxELE1BS0s7QUFDRCxtQkFBTUEsS0FBSSxDQUFKLElBQVMyMkMsT0FBT0wsUUFBUXQyQyxDQUFSLEVBQVdvSCxHQUFYLENBQVAsSUFBd0I2VyxHQUF2QyxFQUEyQztBQUN2Q3E0QixzQkFBUXQyQyxJQUFFLENBQVYsSUFBZXMyQyxRQUFRdDJDLENBQVIsQ0FBZjtBQUNBQSxrQkFBSUEsSUFBRSxDQUFOO0FBQ0g7QUFDSjs7QUFDRHMyQyxrQkFBUXQyQyxJQUFFLENBQVYsSUFBZTAyQyxJQUFmO0FBQ0g7O0FBQ0QsZUFBT0osT0FBUDtBQUNILE9EWEw7O0FDV0s7QURjRFQseUJBQW1CUSxTQUFTTCxnQkFBVCxFQUEwQkMsT0FBMUIsRUFBa0MsS0FBbEMsQ0FBbkI7QUFFQXprQyxjQUFRQyxHQUFSLENBQVksa0JBQVosRUFBK0Jva0MsZ0JBQS9CO0FBRUFBLHVCQUFpQnhrQyxPQUFqQixDQUF5QixVQUFDelIsR0FBRCxFQUFNOEksS0FBTjtBQUNyQixZQUFHb3RDLFlBQWFsMkMsSUFBSXEyQyxPQUFKLENBQWhCO0FDZE4saUJEZVVyMkMsSUFBSWsyQyxRQUFKLElBQWdCLENBQUNwdEMsUUFBTSxDQUFQLEVBQVVsSixRQUFWLEVDZjFCO0FBQ0Q7QURZRztBQUlBZ1MsY0FBUUMsR0FBUixDQUFZLGtCQUFaLEVBQStCb2tDLGdCQUEvQjtBQUVBbjFCLFVBQUk0QixNQUFKLENBQVd5ekIsU0FBWCxJQUF3QkYsZ0JBQXhCO0FBRUE3a0MsU0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0J2aUIsSUFBSXZQLEdBQXhCLEVBQTRCO0FBQ3hCK3hCLGNBQUs7QUFDRCxvQkFBU3hpQixJQUFJNEI7QUFEWjtBQURtQixPQUE1QjtBQU1BOVEsY0FBUUMsR0FBUixDQUFZLFNBQVo7QUNoQk4sYURpQk0ybkIsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUN2QnlNLGNBQU0sR0FEaUI7QUFFdkIzVyxjQUFNO0FBQ0YscUJBQVc7QUFEVDtBQUZpQixPQUEzQixDQ2pCTjtBRDNCRTtBQW1ESSxZQUFNLElBQUk4USxPQUFPcEUsS0FBWCxDQUFpQixtQkFBakIsRUFBc0MsUUFBdEMsQ0FBTjtBQXZGWDtBQUFBLFdBQUFrSixLQUFBO0FBd0ZTblIsUUFBQW1SLEtBQUE7QUNkTixXRGVJMGpCLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDdkJ5TSxZQUFNLEdBRGlCO0FBRXZCM1csWUFBTTtBQUNGazhCLGdCQUFRLENBQUN6M0IsQ0FBRDtBQUROO0FBRmlCLEtBQTNCLENDZko7QUFNRDtBRGpGSCxHOzs7Ozs7Ozs7Ozs7QUVBQSxJQUFHcU0sT0FBT2dtQyxhQUFWO0FBQ0l4ZCxhQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QixlQUF2QixFQUF3QyxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDcEMsUUFBQS8wQixDQUFBLEVBQUFnNkIsUUFBQTs7QUFBQTtBQUVJQSxpQkFBV3JGLElBQUl4ZixJQUFmO0FBQ0FsSSxjQUFRQyxHQUFSLENBQVksVUFBWixFQUF3QjhzQixTQUFTc1ksTUFBakM7QUFDQXJsQyxjQUFRQyxHQUFSLENBQVksYUFBWixFQUEyQjhzQixTQUFTbEwsU0FBcEM7QUFDQTdoQixjQUFRQyxHQUFSLENBQVksWUFBWixFQUEwQjhzQixTQUFTdVksUUFBbkM7QUNDTixhREVNMWQsV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNRO0FBQUF5TSxjQUFNLEdBQU47QUFDQTNXLGNBQU07QUFETixPQURSLENDRk47QURORSxhQUFBNFYsS0FBQTtBQVdNblIsVUFBQW1SLEtBQUE7QUFDRmxFLGNBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCO0FDQ04sYURBTTNDLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDSTtBQUFBeU0sY0FBTSxHQUFOO0FBQ0EzVyxjQUFNO0FBQUVrOEIsa0JBQVEsQ0FBQztBQUFDQywwQkFBYzEzQixFQUFFMjNCO0FBQWpCLFdBQUQ7QUFBVjtBQUROLE9BREosQ0NBTjtBQVVEO0FEeEJEO0FDMEJILEM7Ozs7Ozs7Ozs7OztBQzNCRDlDLFdBQVdDLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLG9CQUF2QixFQUE2QyxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFFNUMsTUFBQStDLFlBQUEsRUFBQUMsaUJBQUEsRUFBQTlDLE9BQUEsRUFBQWlDLFVBQUEsRUFBQTRELFVBQUEsRUFBQTdELE9BQUE7QUFBQWMsc0JBQW9CeHJCLGNBQWMrckIsbUJBQWQsQ0FBa0MzRCxHQUFsQyxDQUFwQjtBQUNBbUQsaUJBQWVDLGtCQUFrQm5yQixHQUFqQztBQUVBcXFCLFlBQVV0QyxJQUFJeGYsSUFBSixDQUFTOGhCLE9BQW5CO0FBQ0FoQyxZQUFVTixJQUFJeGYsSUFBSixDQUFTOGYsT0FBbkI7QUFDQWlDLGVBQWEsRUFBYjtBQUVBNEQsZUFBYXJ1QixHQUFHZ3NCLFdBQUgsQ0FBZTlyQixPQUFmLENBQXVCO0FBQUNzRyxVQUFNNmtCLFlBQVA7QUFBcUJqa0IsV0FBT29oQjtBQUE1QixHQUF2QixFQUE2RDtBQUFDOW9CLFlBQVE7QUFBQ1MsV0FBSztBQUFOO0FBQVQsR0FBN0QsQ0FBYjs7QUFDQSxNQUFHLENBQUNrdUIsVUFBSjtBQUNDLFdBQU9qRyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQ2pDeU0sWUFBTSxHQUQyQjtBQUVqQzNXLFlBQU07QUFDTCxrQkFBVTtBQURMO0FBRjJCLEtBQTNCLENBQVA7QUNXQzs7QURKRixNQUFJLENBQUMwN0IsT0FBRCxJQUFZLENBQUNoQyxPQUFqQjtBQUNDLFdBQU9KLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDakN5TSxZQUFNLEdBRDJCO0FBRWpDM1csWUFBTTtBQUNMLGtCQUFVO0FBREw7QUFGMkIsS0FBM0IsQ0FBUDtBQ1dDOztBRExGMjdCLGVBQWFwakIsZ0JBQWdCMCtCLHFCQUFoQixDQUFzQ3ZkLE9BQXRDLEVBQStDZ0MsT0FBL0MsQ0FBYjtBQ09DLFNETERwQyxXQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQTJCO0FBQzFCeU0sVUFBTSxHQURvQjtBQUUxQjNXLFVBQU07QUFDTCxvQkFBYzI3QjtBQURUO0FBRm9CLEdBQTNCLENDS0M7QURoQ0YsRzs7Ozs7Ozs7Ozs7O0FFQUFyQyxXQUFXQyxHQUFYLENBQWUsTUFBZixFQUF1QixtQkFBdkIsRUFBNEMsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQzNDLE1BQUErQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUEwYSxNQUFBLEVBQUExYyxJQUFBLEVBQUFkLE9BQUEsRUFBQTZGLFVBQUE7QUFBQS9DLHNCQUFvQnhyQixjQUFjK3JCLG1CQUFkLENBQWtDM0QsR0FBbEMsQ0FBcEI7QUFDQW1ELGlCQUFlQyxrQkFBa0JuckIsR0FBakM7QUFDQTZsQyxXQUFTOWQsSUFBSXhmLElBQUosQ0FBU3M5QixNQUFsQjtBQUNBeGQsWUFBVU4sSUFBSXhmLElBQUosQ0FBUzhmLE9BQW5CO0FBRUE2RixlQUFhcnVCLEdBQUdnc0IsV0FBSCxDQUFlOXJCLE9BQWYsQ0FBdUI7QUFBQ3NHLFVBQU02a0IsWUFBUDtBQUFxQmprQixXQUFPb2hCO0FBQTVCLEdBQXZCLEVBQTZEO0FBQUM5b0IsWUFBUTtBQUFDUyxXQUFLO0FBQU47QUFBVCxHQUE3RCxDQUFiOztBQUNBLE1BQUcsQ0FBQ2t1QixVQUFKO0FBQ0MsV0FBT2pHLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDakN5TSxZQUFNLEdBRDJCO0FBRWpDM1csWUFBTTtBQUNMLGtCQUFVO0FBREw7QUFGMkIsS0FBM0IsQ0FBUDtBQ2FDOztBRE5GLE1BQUksQ0FBQ2szQyxNQUFELElBQVcsQ0FBQ3hkLE9BQWhCO0FBQ0MsV0FBT0osV0FBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUEyQjtBQUNqQ3lNLFlBQU0sR0FEMkI7QUFFakMzVyxZQUFNO0FBQ0wsa0JBQVU7QUFETDtBQUYyQixLQUEzQixDQUFQO0FDYUM7O0FETkZ3NkIsU0FBT2ppQixnQkFBZ0I0K0Isb0JBQWhCLENBQXFDRCxNQUFyQyxDQUFQO0FDUUMsU0RORDVkLFdBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFBMkI7QUFDMUJ5TSxVQUFNLEdBRG9CO0FBRTFCM1csVUFBTTtBQUNMLGNBQVF3NkI7QUFESDtBQUZvQixHQUEzQixDQ01DO0FEL0JGLEc7Ozs7Ozs7Ozs7OztBRUFBMXBCLE9BQU9zbUMsT0FBUCxDQUNDO0FBQUFDLDZCQUEyQixVQUFDcEgsTUFBRCxFQUFTcUgsWUFBVCxFQUF1QkMsb0JBQXZCO0FBQzFCLFFBQUFDLE1BQUEsRUFBQUMsTUFBQSxFQUFBNzJCLEdBQUEsRUFBQTFJLElBQUEsRUFBQXcvQixhQUFBOztBQUFBLFFBQUcsQ0FBQyxLQUFLbndCLE1BQVQ7QUFDQztBQ0VFOztBREFIM0csVUFBTTFQLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCO0FBQUNDLFdBQUs0K0I7QUFBTixLQUFyQixFQUFvQztBQUFDci9CLGNBQVE7QUFBQ2lJLGVBQU87QUFBUjtBQUFULEtBQXBDLENBQU47O0FBRUEsUUFBRytILElBQUkvSCxLQUFKLEtBQWEsT0FBaEI7QUFDQztBQ09FOztBRExIMitCLGFBQVMxbEMsRUFBRW9HLElBQUYsQ0FBT28vQixZQUFQLENBQVQ7QUFDQUcsYUFBUzNsQyxFQUFFb0csSUFBRixDQUFPcS9CLG9CQUFQLENBQVQ7QUFFQXIvQixXQUFPcEcsRUFBRTBlLE9BQUYsQ0FBVTFlLEVBQUUyZixLQUFGLENBQVErbEIsTUFBUixFQUFnQkMsTUFBaEIsQ0FBVixDQUFQO0FBRUFDLG9CQUFnQixFQUFoQjs7QUFFQTVsQyxNQUFFcWIsSUFBRixDQUFPalYsSUFBUCxFQUFhLFVBQUNpYixNQUFEO0FBQ1osVUFBQXdrQixZQUFBLEVBQUFDLG1CQUFBO0FBQUFELHFCQUFlTCxhQUFhbmtCLE1BQWIsQ0FBZjtBQUNBeWtCLDRCQUFzQkwscUJBQXFCcGtCLE1BQXJCLENBQXRCOztBQUNBLFVBQUd3a0IsWUFBSDtBQUNDRCxzQkFBY3ZrQixNQUFkLElBQXdCd2tCLFlBQXhCOztBQUNBLFlBQUdDLG1CQUFIO0FBQ0MsY0FBRzlsQyxFQUFFalMsT0FBRixDQUFVODNDLFlBQVYsQ0FBSDtBQUNDQyxrQ0FBc0JELGFBQWFsd0MsTUFBYixDQUFvQm13QyxtQkFBcEIsQ0FBdEI7QUFERDtBQUdDQSxnQ0FBb0I3d0MsSUFBcEIsQ0FBeUI0d0MsWUFBekI7QUFKRjtBQUZEO0FDYUk7O0FETkosVUFBR0MsbUJBQUg7QUNRSyxlRFBKRixjQUFjdmtCLFNBQVMsVUFBdkIsSUFBcUNyaEIsRUFBRW91QixJQUFGLENBQU8wWCxtQkFBUCxDQ09qQztBQUNEO0FEbkJMOztBQ3FCRSxXRFRGMW1DLEdBQUdrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQUM5eEIsV0FBSzQrQjtBQUFOLEtBQXBCLEVBQW1DO0FBQUM3TSxZQUFNO0FBQUNrVSxzQkFBY0k7QUFBZjtBQUFQLEtBQW5DLENDU0U7QURyQ0g7QUE2QkFHLDJCQUF5QixVQUFDNUgsTUFBRCxFQUFTOWMsTUFBVCxFQUFpQjRqQixNQUFqQjtBQUN4QixRQUFHQSxXQUFVLE1BQWI7QUNpQkksYURoQkg3bEMsR0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFBQzl4QixhQUFLNCtCO0FBQU4sT0FBcEIsRUFBbUM7QUFBQzZILGVBQU87QUFBQ0Msc0JBQVk1a0I7QUFBYjtBQUFSLE9BQW5DLENDZ0JHO0FEakJKLFdBRUssSUFBRzRqQixXQUFVLE1BQWI7QUN1QkQsYUR0Qkg3bEMsR0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFBQzl4QixhQUFLNCtCO0FBQU4sT0FBcEIsRUFBbUM7QUFBQytILGVBQU87QUFBQ0Qsc0JBQVk1a0I7QUFBYjtBQUFSLE9BQW5DLENDc0JHO0FBT0Q7QUQ5REo7QUFBQSxDQURELEU7Ozs7Ozs7Ozs7O0FFQUFyaUIsTUFBTSxDQUFDc21DLE9BQVAsQ0FBZTtBQUVkYSxtQkFBaUIsRUFBRSxVQUFVcmlCLFdBQVYsRUFBdUJzaUIsVUFBdkIsRUFBbUNDLFVBQW5DLEVBQStDO0FBRWpFbk8sU0FBSyxDQUFDcFUsV0FBRCxFQUFjbjJCLE1BQWQsQ0FBTDtBQUNBdXFDLFNBQUssQ0FBQ2tPLFVBQUQsRUFBYXB3QyxPQUFiLENBQUw7QUFDQWtpQyxTQUFLLENBQUNtTyxVQUFELEVBQWFyd0MsT0FBYixDQUFMO0FBRUEsUUFBSWdQLFFBQVEsR0FBRzVGLEVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUJ3a0IsV0FBckIsQ0FBZjtBQUVBLFFBQUksQ0FBQzllLFFBQUwsRUFDQyxPQUFPO0FBQ05BLGNBQVEsRUFBRTtBQURKLEtBQVA7QUFJRCxRQUFJb2hDLFVBQVUsSUFBSUMsVUFBbEIsRUFDQyxPQUFPO0FBQ05yaEMsY0FBUSxFQUFFQTtBQURKLEtBQVA7O0FBSUQsUUFBSSxDQUFDb2hDLFVBQUwsRUFBaUI7QUFDaEIsVUFBSTFuQyxJQUFJLEdBQUdVLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTQyxPQUFULENBQWlCMEYsUUFBUSxDQUFDdEcsSUFBMUIsQ0FBWDtBQUNBLFVBQUlDLFlBQVksR0FBRyxFQUFuQjs7QUFDQSxVQUFJRCxJQUFJLENBQUN3RyxPQUFMLENBQWEzRixHQUFiLElBQW9CeUYsUUFBUSxDQUFDckcsWUFBakMsRUFBK0M7QUFDOUNBLG9CQUFZLEdBQUdELElBQUksQ0FBQ3dHLE9BQXBCO0FBQ0EsT0FGRCxNQUdLO0FBQ0p2RyxvQkFBWSxHQUFHcUIsQ0FBQyxDQUFDbUYsS0FBRixDQUFRekcsSUFBSSxDQUFDMEcsUUFBYixFQUF1QjtBQUFDN0YsYUFBRyxFQUFFeUYsUUFBUSxDQUFDckc7QUFBZixTQUF2QixFQUFxRCxDQUFyRCxDQUFmO0FBQ0E7QUFDRDs7QUFHRCxRQUFJLENBQUMwbkMsVUFBTCxFQUFpQjtBQUNoQixVQUFJL2dDLElBQUksR0FBR2xHLEVBQUUsQ0FBQ29HLEtBQUgsQ0FBU2xHLE9BQVQsQ0FBaUIwRixRQUFRLENBQUNNLElBQTFCLENBQVg7QUFDQSxVQUFJQyxZQUFZLEdBQUcsRUFBbkI7O0FBQ0EsVUFBSUQsSUFBSSxDQUFDSixPQUFMLENBQWEzRixHQUFiLElBQW9CeUYsUUFBUSxDQUFDTyxZQUFqQyxFQUErQztBQUM5Q0Esb0JBQVksR0FBR0QsSUFBSSxDQUFDSixPQUFwQjtBQUNBLE9BRkQsTUFHSztBQUNKSyxvQkFBWSxHQUFHdkYsQ0FBQyxDQUFDbUYsS0FBRixDQUFRRyxJQUFJLENBQUNGLFFBQWIsRUFBdUI7QUFBQzdGLGFBQUcsRUFBRXlGLFFBQVEsQ0FBQ087QUFBZixTQUF2QixFQUFxRCxDQUFyRCxDQUFmO0FBQ0E7QUFDRDs7QUFFRCxXQUFPO0FBQ05QLGNBQVEsRUFBRUEsUUFESjtBQUVOckcsa0JBQVksRUFBRUEsWUFGUjtBQUdONEcsa0JBQVksRUFBRUE7QUFIUixLQUFQO0FBTUE7QUFqRGEsQ0FBZixFOzs7Ozs7Ozs7OztBQ0FBdkcsTUFBTSxDQUFDc21DLE9BQVAsQ0FBZTtBQUVkZ0IscUJBQW1CLEVBQUUsVUFBVXgzQixHQUFWLEVBQWU7QUFDbkMsUUFBSSxDQUFDLEtBQUsyRyxNQUFWLEVBQ0M7QUFDRCxRQUFJcmUsTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJczRCLE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBSTU0QixLQUFLLEdBQUcsQ0FBWjtBQUNBLFFBQUlxbkMsTUFBTSxHQUFHcnZCLEdBQUcsQ0FBQ3ZQLEdBQWpCO0FBQ0EsUUFBSWduQyxRQUFRLEdBQUd6M0IsR0FBRyxDQUFDakcsTUFBSixDQUFXLENBQVgsRUFBY3RKLEdBQTdCO0FBQ0EsUUFBSTAvQixVQUFVLEdBQUdud0IsR0FBRyxDQUFDakcsTUFBSixDQUFXLENBQVgsRUFBY3lOLFFBQWQsQ0FBdUIsQ0FBdkIsRUFBMEIvVyxHQUEzQztBQUNBLFFBQUl3TSxXQUFXLEdBQUcrQyxHQUFHLENBQUNqRyxNQUFKLENBQVcsQ0FBWCxFQUFjeU4sUUFBZCxDQUF1QixDQUF2QixFQUEwQnZLLFdBQTVDO0FBQ0EsUUFBSXk2QixVQUFVLEdBQUcxM0IsR0FBRyxDQUFDakcsTUFBSixDQUFXLENBQVgsRUFBY3lOLFFBQWQsQ0FBdUIsQ0FBdkIsRUFBMEJrd0IsVUFBM0M7QUFDQSxRQUFJOTFCLE1BQU0sR0FBRzVCLEdBQUcsQ0FBQ2pHLE1BQUosQ0FBVyxDQUFYLEVBQWN5TixRQUFkLENBQXVCLENBQXZCLEVBQTBCNUYsTUFBMUIsSUFBb0MsRUFBakQ7QUFDQSxRQUFJdXRCLFlBQVksR0FBR252QixHQUFHLENBQUNpTSxTQUF2QjtBQUVBLFFBQUkvVixRQUFRLEdBQUc1RixFQUFFLENBQUNrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCNitCLE1BQXJCLEVBQTZCO0FBQzNDci9CLFlBQU0sRUFBRTtBQUNQaWMsaUJBQVMsRUFBRSxDQURKO0FBRVBoVSxhQUFLLEVBQUUsQ0FGQTtBQUdQOG1CLGlCQUFTLEVBQUUsQ0FISjtBQUlQaGxCLGNBQU0sRUFBRSxDQUpEO0FBS1BuSyxZQUFJLEVBQUUsQ0FMQztBQU1QNkcsb0JBQVksRUFBRSxDQU5QO0FBT1BpQixhQUFLLEVBQUUsQ0FQQTtBQVFQbEIsWUFBSSxFQUFFO0FBUkM7QUFEbUMsS0FBN0IsQ0FBZjtBQWFBLFFBQUlrb0IsUUFBUSxHQUFHeG9CLFFBQVEsQ0FBQ3dCLEtBQXhCO0FBQ0EsUUFBSWtvQixPQUFPLEdBQUcxcEIsUUFBUSxDQUFDTSxJQUF2QjtBQUNBLFFBQUltaEMsT0FBTyxHQUFHemhDLFFBQVEsQ0FBQ3RHLElBQXZCO0FBQ0EsUUFBSW1LLE1BQU0sR0FBRzdELFFBQVEsQ0FBQzZELE1BQXRCOztBQUNBLFFBQUk2dkIsYUFBYSxHQUFHMTRCLENBQUMsQ0FBQ3VjLElBQUYsQ0FBTzFULE1BQVAsRUFBZSxVQUFVeFUsQ0FBVixFQUFhO0FBQy9DLGFBQU9BLENBQUMsQ0FBQ2tMLEdBQUYsSUFBU2duQyxRQUFoQjtBQUNBLEtBRm1CLENBQXBCOztBQUdBN04saUJBQWEsQ0FBQ3BpQixRQUFkLENBQXVCN1csT0FBdkIsQ0FBK0IsVUFBVStPLENBQVYsRUFBYTBsQixHQUFiLEVBQWtCO0FBQ2hELFVBQUkxbEIsQ0FBQyxDQUFDalAsR0FBRixJQUFTMC9CLFVBQWIsRUFBeUI7QUFDeEJub0MsYUFBSyxHQUFHbzlCLEdBQVI7QUFDQTtBQUNELEtBSkQ7QUFLQSxRQUFJd1MsT0FBTyxHQUFHLHVCQUF1QjV2QyxLQUF2QixHQUErQixHQUE3QyxDQXZDbUMsQ0F5Q25DOztBQUNBLFFBQUkyekIsWUFBWSxHQUFHcnJCLEVBQUUsQ0FBQ3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQjtBQUNuQ0MsU0FBRyxFQUFFLEtBQUtrVztBQUR5QixLQUFqQixFQUVoQjtBQUNGM1csWUFBTSxFQUFFO0FBQ1BzRSxjQUFNLEVBQUU7QUFERDtBQUROLEtBRmdCLENBQW5CO0FBT0EsUUFBSW95QixJQUFJLEdBQUcvSyxZQUFZLENBQUNybkIsTUFBYixJQUF1QixPQUF2QixHQUFpQyxPQUFqQyxHQUEyQyxJQUF0RDtBQUNBbEUsaUJBQWEsQ0FBQ3MvQixlQUFkLENBQThCeDVCLFFBQTlCLEVBQXdDd3dCLElBQXhDLEVBbERtQyxDQW1EbkM7O0FBQ0F0MkIsaUJBQWEsQ0FBQ3luQyxtQkFBZCxDQUFrQzNoQyxRQUFsQyxFQUE0QyxLQUFLeVEsTUFBakQ7QUFFQSxRQUFJblEsSUFBSSxHQUFHbEcsRUFBRSxDQUFDb0csS0FBSCxDQUFTbEcsT0FBVCxDQUFpQm92QixPQUFqQixFQUEwQjtBQUNwQzV2QixZQUFNLEVBQUU7QUFDUCx1QkFBZSxDQURSO0FBRVAsZ0NBQXdCLENBRmpCO0FBR1AsZ0JBQVEsQ0FIRDtBQUlQLHlCQUFpQjtBQUpWO0FBRDRCLEtBQTFCLENBQVg7QUFTQTR3QixVQUFNLENBQUN1QixRQUFQLEdBQWtCLElBQUk3c0IsSUFBSixFQUFsQjtBQUNBc3JCLFVBQU0sQ0FBQ3dCLFdBQVAsR0FBcUIsS0FBS3piLE1BQTFCOztBQUVBLFFBQUluUSxJQUFJLENBQUNKLE9BQUwsQ0FBYTNGLEdBQWIsSUFBb0J5RixRQUFRLENBQUNPLFlBQWpDLEVBQStDO0FBQzlDbk8sWUFBTSxHQUFHLFVBQVQ7O0FBQ0EsVUFBSXVsQixVQUFVLEdBQUczYyxDQUFDLENBQUN1YyxJQUFGLENBQU9qWCxJQUFJLENBQUNKLE9BQUwsQ0FBYWUsS0FBcEIsRUFBMkIsVUFBVXpMLENBQVYsRUFBYTtBQUN4RCxlQUFPQSxDQUFDLENBQUNzaUIsU0FBRixJQUFlLE9BQXRCO0FBQ0EsT0FGZ0IsQ0FBakIsQ0FGOEMsQ0FLOUM7OztBQUNBNFMsWUFBTSxDQUFDbnFCLFlBQVAsR0FBc0JELElBQUksQ0FBQ0osT0FBTCxDQUFhM0YsR0FBbkM7QUFDQW13QixZQUFNLENBQUMvd0IsWUFBUCxHQUFzQjJHLElBQUksQ0FBQ0osT0FBTCxDQUFhdkcsWUFBbkMsQ0FQOEMsQ0FROUM7O0FBQ0Erd0IsWUFBTSxDQUFDLGVBQUQsQ0FBTixHQUEwQi9TLFVBQVUsQ0FBQ3BkLEdBQXJDO0FBQ0Ftd0IsWUFBTSxDQUFDLGVBQUQsQ0FBTixHQUEwQi9TLFVBQVUsQ0FBQzNuQixJQUFyQztBQUNBOztBQUVELFFBQUlnUSxRQUFRLENBQUMrVixTQUFULElBQXNCa2pCLFlBQTFCLEVBQXdDO0FBQ3ZDO0FBQ0EsVUFBSXI0QixJQUFJLEdBQUd4RyxFQUFFLENBQUNxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUIyK0IsWUFBakIsRUFBK0I7QUFDekNuL0IsY0FBTSxFQUFFO0FBQ1A5SixjQUFJLEVBQUU7QUFEQztBQURpQyxPQUEvQixDQUFYO0FBS0EsVUFBSStsQixTQUFTLEdBQUczYixFQUFFLENBQUNnc0IsV0FBSCxDQUFlN08sSUFBZixDQUFvQjtBQUNuQy9WLGFBQUssRUFBRWduQixRQUQ0QjtBQUVuQzVuQixZQUFJLEVBQUVxNEI7QUFGNkIsT0FBcEIsRUFHYjtBQUNGbi9CLGNBQU0sRUFBRTtBQUNQdXpCLHNCQUFZLEVBQUU7QUFEUDtBQUROLE9BSGEsQ0FBaEI7QUFRQSxVQUFJdVUsTUFBTSxHQUFHN3JCLFNBQVMsQ0FBQzhELEtBQVYsR0FBa0IsQ0FBbEIsRUFBcUJ3VCxZQUFsQztBQUNBLFVBQUlBLFlBQVksR0FBR2p6QixFQUFFLENBQUNncEIsYUFBSCxDQUFpQjlvQixPQUFqQixDQUF5QnNuQyxNQUF6QixFQUFpQztBQUNuRDluQyxjQUFNLEVBQUU7QUFDUDlKLGNBQUksRUFBRSxDQURDO0FBRVBpUCxrQkFBUSxFQUFFO0FBRkg7QUFEMkMsT0FBakMsQ0FBbkI7QUFPQXlyQixZQUFNLENBQUMzVSxTQUFQLEdBQW1Ca2pCLFlBQW5CO0FBQ0F2TyxZQUFNLENBQUNyb0IsY0FBUCxHQUF3QnpCLElBQUksQ0FBQzVRLElBQTdCO0FBQ0EwNkIsWUFBTSxDQUFDOEssc0JBQVAsR0FBZ0NvTSxNQUFoQztBQUNBbFgsWUFBTSxDQUFDK0ssMkJBQVAsR0FBcUNwSSxZQUFZLENBQUNyOUIsSUFBbEQ7QUFDQTA2QixZQUFNLENBQUNnTCwrQkFBUCxHQUF5Q3JJLFlBQVksQ0FBQ3B1QixRQUF0RDtBQUVBeXJCLFlBQU0sQ0FBQ2dYLE9BQU8sR0FBRyxNQUFYLENBQU4sR0FBMkJ6SSxZQUEzQjtBQUNBdk8sWUFBTSxDQUFDZ1gsT0FBTyxHQUFHLFdBQVgsQ0FBTixHQUFnQzlnQyxJQUFJLENBQUM1USxJQUFyQztBQUNBOztBQUVEMDZCLFVBQU0sQ0FBQ2dYLE9BQU8sR0FBRyxRQUFYLENBQU4sR0FBNkJoMkIsTUFBN0I7QUFDQWdmLFVBQU0sQ0FBQ2dYLE9BQU8sR0FBRyxhQUFYLENBQU4sR0FBa0MzNkIsV0FBbEM7QUFDQTJqQixVQUFNLENBQUNnWCxPQUFPLEdBQUcsT0FBWCxDQUFOLEdBQTRCLFdBQTVCO0FBQ0FoWCxVQUFNLENBQUNnWCxPQUFPLEdBQUcsV0FBWCxDQUFOLEdBQWdDLElBQUl0aUMsSUFBSixFQUFoQzs7QUFDQSxRQUFJaE4sTUFBTSxJQUFJLFVBQVYsSUFBd0JvdkMsVUFBNUIsRUFBd0M7QUFDdkM5VyxZQUFNLENBQUNnWCxPQUFPLEdBQUcsWUFBWCxDQUFOLEdBQWlDRixVQUFqQztBQUNBLEtBdEhrQyxDQXdIbkM7OztBQUNBLFFBQUk5bkMsSUFBSSxHQUFHVSxFQUFFLENBQUNDLEtBQUgsQ0FBU0MsT0FBVCxDQUFpQjtBQUMzQkMsU0FBRyxFQUFFa25DO0FBRHNCLEtBQWpCLEVBRVI7QUFDRjNuQyxZQUFNLEVBQUU7QUFDUCxnQ0FBd0I7QUFEakI7QUFETixLQUZRLENBQVg7QUFPQSxRQUFJaTdCLFlBQVksR0FBR3I3QixJQUFJLENBQUN3RyxPQUFMLENBQWE2MEIsWUFBaEM7O0FBQ0EsUUFBSUEsWUFBSixFQUFrQjtBQUNqQjtBQUNBO0FBQ0FySyxZQUFNLENBQUMxNkIsSUFBUCxHQUFja0ssYUFBYSxDQUFDMm5DLGVBQWQsQ0FBOEIvM0IsR0FBOUIsRUFBbUM0QixNQUFuQyxDQUFkO0FBQ0E7O0FBRUR0UixNQUFFLENBQUNrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQ25COXhCLFNBQUcsRUFBRTQrQixNQURjO0FBRW5CLG9CQUFjb0k7QUFGSyxLQUFwQixFQUdHO0FBQ0ZqVixVQUFJLEVBQUU1QjtBQURKLEtBSEg7QUFNQSxXQUFPdDRCLE1BQVA7QUFDQSxHQWhKYTtBQWtKZDB2QyxxQkFBbUIsRUFBRSxVQUFVcndCLE9BQVYsRUFBbUI7QUFDdkMsUUFBSSxDQUFDLEtBQUtoQixNQUFWLEVBQ0M7QUFFRCxRQUFJaWEsTUFBTSxHQUFHLEVBQWI7QUFDQSxRQUFJNTRCLEtBQUssR0FBRyxDQUFaO0FBQ0EsUUFBSXFuQyxNQUFNLEdBQUcxbkIsT0FBTyxDQUFDelIsUUFBckI7QUFDQSxRQUFJdWhDLFFBQVEsR0FBRzl2QixPQUFPLENBQUMxTCxLQUF2QjtBQUNBLFFBQUlrMEIsVUFBVSxHQUFHeG9CLE9BQU8sQ0FBQzVJLEVBQXpCO0FBQ0EsUUFBSTZDLE1BQU0sR0FBRytGLE9BQU8sQ0FBQy9GLE1BQXJCO0FBQ0EsUUFBSTgxQixVQUFVLEdBQUcvdkIsT0FBTyxDQUFDK3ZCLFVBQXpCO0FBQ0EsUUFBSXo2QixXQUFXLEdBQUcwSyxPQUFPLENBQUMxSyxXQUExQjtBQUNBLFFBQUlnRCxLQUFLLEdBQUcwSCxPQUFPLENBQUMxSCxLQUFwQjtBQUVBLFFBQUkvSixRQUFRLEdBQUc1RixFQUFFLENBQUNrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCNitCLE1BQXJCLEVBQTZCO0FBQzNDci9CLFlBQU0sRUFBRTtBQUNQK0osY0FBTSxFQUFFLENBREQ7QUFFUHRELG9CQUFZLEVBQUUsQ0FGUDtBQUdQRCxZQUFJLEVBQUUsQ0FIQztBQUlQeUIsYUFBSyxFQUFFLENBSkE7QUFLUHJJLFlBQUksRUFBRSxDQUxDO0FBTVBDLG9CQUFZLEVBQUUsQ0FOUDtBQU9QK1IsY0FBTSxFQUFFLENBUEQ7QUFRUDdMLFlBQUksRUFBRTtBQVJDO0FBRG1DLEtBQTdCLENBQWY7QUFhQSxRQUFJZ0UsTUFBTSxHQUFHN0QsUUFBUSxDQUFDNkQsTUFBdEI7O0FBRUEsUUFBSTZ2QixhQUFhLEdBQUcxNEIsQ0FBQyxDQUFDdWMsSUFBRixDQUFPMVQsTUFBUCxFQUFlLFVBQVV4VSxDQUFWLEVBQWE7QUFDL0MsYUFBT0EsQ0FBQyxDQUFDa0wsR0FBRixJQUFTZ25DLFFBQWhCO0FBQ0EsS0FGbUIsQ0FBcEI7O0FBR0EsUUFBSTlYLGVBQWUsR0FBR3p1QixDQUFDLENBQUN1YyxJQUFGLENBQU9tYyxhQUFhLENBQUNwaUIsUUFBckIsRUFBK0IsVUFBVTlILENBQVYsRUFBYTtBQUNqRSxhQUFPQSxDQUFDLENBQUNqUCxHQUFGLElBQVMwL0IsVUFBaEI7QUFDQSxLQUZxQixDQUF0QixDQWhDdUMsQ0FvQ3ZDOzs7QUFDQSxRQUFJeFUsWUFBWSxHQUFHcnJCLEVBQUUsQ0FBQ3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQjtBQUNuQ0MsU0FBRyxFQUFFLEtBQUtrVztBQUR5QixLQUFqQixFQUVoQjtBQUNGM1csWUFBTSxFQUFFO0FBQ1BzRSxjQUFNLEVBQUU7QUFERDtBQUROLEtBRmdCLENBQW5CO0FBT0EsUUFBSW95QixJQUFJLEdBQUcvSyxZQUFZLENBQUNybkIsTUFBYixJQUF1QixPQUF2QixHQUFpQyxPQUFqQyxHQUEyQyxJQUF0RDs7QUFDQSxRQUFJO0FBQ0hsRSxtQkFBYSxDQUFDNHdCLGlCQUFkLENBQWdDOXFCLFFBQWhDLEVBQTBDd3dCLElBQTFDLEVBREcsQ0FFSDs7QUFDQXQyQixtQkFBYSxDQUFDNm5DLGtCQUFkLENBQWlDck8sYUFBakMsRUFIRyxDQUlIOztBQUNBeDVCLG1CQUFhLENBQUM4bkMsb0JBQWQsQ0FBbUN2WSxlQUFuQyxFQUxHLENBTUg7O0FBQ0F2dkIsbUJBQWEsQ0FBQytuQyxnQkFBZCxDQUErQnhZLGVBQS9CLEVBQWdELEtBQUtoWixNQUFyRDtBQUNBLEtBUkQsQ0FRRSxPQUFPOWlCLENBQVAsRUFBVTtBQUNYaU4sYUFBTyxDQUFDQyxHQUFSLENBQVlsTixDQUFDLENBQUN3M0IsS0FBZDtBQUNBLGFBQU8sSUFBUDtBQUNBOztBQUdELFFBQUk1a0IsWUFBWSxHQUFHUCxRQUFRLENBQUNPLFlBQTVCO0FBQ0EsUUFBSW1wQixPQUFPLEdBQUcxcEIsUUFBUSxDQUFDTSxJQUF2QjtBQUNBLFFBQUl1MUIsT0FBTyxHQUFHLEVBQWQ7QUFDQUEsV0FBTyxHQUFHbkMsYUFBYSxDQUFDbGlCLElBQXhCO0FBQ0EsUUFBSWxSLElBQUksR0FBR2xHLEVBQUUsQ0FBQ29HLEtBQUgsQ0FBU2xHLE9BQVQsQ0FBaUJvdkIsT0FBakIsRUFBMEI7QUFDcEM1dkIsWUFBTSxFQUFFO0FBQ1BvRyxlQUFPLEVBQUUsQ0FERjtBQUVQRSxnQkFBUSxFQUFFO0FBRkg7QUFENEIsS0FBMUIsQ0FBWDtBQU1BLFFBQUlvUixJQUFJLEdBQUcsSUFBWDs7QUFDQSxRQUFJbFIsSUFBSSxDQUFDSixPQUFMLENBQWEzRixHQUFiLElBQW9CZ0csWUFBeEIsRUFBc0M7QUFDckNELFVBQUksQ0FBQ0osT0FBTCxDQUFhZSxLQUFiLENBQW1CeEcsT0FBbkIsQ0FBMkIsVUFBVWpGLENBQVYsRUFBYTtBQUN2QyxZQUFJQSxDQUFDLENBQUMrRSxHQUFGLElBQVNzN0IsT0FBYixFQUNDcmtCLElBQUksR0FBR2hjLENBQVA7QUFDRCxPQUhEO0FBSUEsS0FMRCxNQUtPO0FBQ044SyxVQUFJLENBQUNGLFFBQUwsQ0FBYzNGLE9BQWQsQ0FBc0IsVUFBVXl2QixDQUFWLEVBQWE7QUFDbENBLFNBQUMsQ0FBQ2pwQixLQUFGLENBQVF4RyxPQUFSLENBQWdCLFVBQVVqRixDQUFWLEVBQWE7QUFDNUIsY0FBSUEsQ0FBQyxDQUFDK0UsR0FBRixJQUFTczdCLE9BQWIsRUFDQ3JrQixJQUFJLEdBQUdoYyxDQUFQO0FBQ0QsU0FIRDtBQUlBLE9BTEQ7QUFNQTs7QUFFRCxRQUFJLENBQUNnYyxJQUFMLEVBQ0MsT0FBTyxLQUFQO0FBQ0QsUUFBSXNHLFNBQVMsR0FBR3RHLElBQUksQ0FBQ3NHLFNBQXJCO0FBRUE0YixpQkFBYSxDQUFDcGlCLFFBQWQsQ0FBdUI3VyxPQUF2QixDQUErQixVQUFVK08sQ0FBVixFQUFhMGxCLEdBQWIsRUFBa0I7QUFDaEQsVUFBSTFsQixDQUFDLENBQUNqUCxHQUFGLElBQVMwL0IsVUFBYixFQUF5QjtBQUN4Qm5vQyxhQUFLLEdBQUdvOUIsR0FBUjtBQUNBO0FBQ0QsS0FKRDtBQU1BLFFBQUl3UyxPQUFPLEdBQUcsdUJBQXVCNXZDLEtBQXZCLEdBQStCLEdBQTdDO0FBRUEsUUFBSW93QyxrQkFBa0IsR0FBR2hvQyxhQUFhLENBQUNpb0MsZ0JBQWQsQ0FBK0Ixd0IsT0FBTyxDQUFDL0YsTUFBdkMsRUFBK0M4RixJQUFJLENBQUNuUSxXQUFwRCxFQUFpRXJCLFFBQVEsQ0FBQ3RHLElBQTFFLEVBQWdGc0csUUFBUSxDQUFDckcsWUFBekYsQ0FBekI7QUFFQSxRQUFJeW9DLGFBQWEsR0FBR0MsY0FBYyxDQUFDQyxlQUFmLENBQStCdGlDLFFBQVEsQ0FBQzBMLE1BQXhDLEVBQWdEdzJCLGtCQUFoRCxDQUFwQjtBQUVBeFgsVUFBTSxDQUFDaGYsTUFBUCxHQUFnQjFRLENBQUMsQ0FBQ3VuQyxNQUFGLENBQVV2aUMsUUFBUSxDQUFDMEwsTUFBVCxJQUFtQixFQUE3QixFQUFrQ3cyQixrQkFBbEMsQ0FBaEI7O0FBRUEsUUFBSSxDQUFDbG5DLENBQUMsQ0FBQzRMLE9BQUYsQ0FBVXc3QixhQUFWLENBQUwsRUFBK0I7QUFFOUJJLG9CQUFjLEdBQUcvWSxlQUFlLENBQUMrWSxjQUFoQixJQUFrQyxFQUFuRDtBQUVBQSxvQkFBYyxDQUFDdnlDLElBQWYsQ0FBb0I7QUFDbkJ5YixjQUFNLEVBQUUwMkIsYUFEVztBQUVuQm5tQyxjQUFNLEVBQUUsSUFBSW1ELElBQUo7QUFGVyxPQUFwQjtBQUtBc3JCLFlBQU0sQ0FBQ2dYLE9BQU8sR0FBRyxnQkFBWCxDQUFOLEdBQXFDYyxjQUFyQztBQUNBOztBQUVEOVgsVUFBTSxDQUFDZ1gsT0FBTyxHQUFHLFNBQVgsQ0FBTixHQUE4QixJQUE5QjtBQUNBaFgsVUFBTSxDQUFDZ1gsT0FBTyxHQUFHLFdBQVgsQ0FBTixHQUFnQyxJQUFJdGlDLElBQUosRUFBaEM7QUFDQXNyQixVQUFNLENBQUNnWCxPQUFPLEdBQUcsUUFBWCxDQUFOLEdBQTZCaFgsTUFBTSxDQUFDaGYsTUFBcEM7QUFDQWdmLFVBQU0sQ0FBQ2dYLE9BQU8sR0FBRyxhQUFYLENBQU4sR0FBa0MzNkIsV0FBbEM7QUFDQTJqQixVQUFNLENBQUNnWCxPQUFPLEdBQUcsWUFBWCxDQUFOLEdBQWlDRixVQUFqQzs7QUFDQSxRQUFJMXBCLFNBQVMsSUFBSSxRQUFiLElBQXlCQSxTQUFTLElBQUksT0FBMUMsRUFBbUQ7QUFDbEQ0UyxZQUFNLENBQUNnWCxPQUFPLEdBQUcsT0FBWCxDQUFOLEdBQTRCLFdBQTVCO0FBQ0EsS0FGRCxNQUVPO0FBQ05oWCxZQUFNLENBQUNnWCxPQUFPLEdBQUcsT0FBWCxDQUFOLEdBQTRCMzNCLEtBQTVCO0FBQ0E7O0FBRUQyZ0IsVUFBTSxDQUFDdUIsUUFBUCxHQUFrQixJQUFJN3NCLElBQUosRUFBbEI7QUFDQXNyQixVQUFNLENBQUN3QixXQUFQLEdBQXFCLEtBQUt6YixNQUExQixDQTlIdUMsQ0FnSXZDOztBQUNBLFFBQUkvVyxJQUFJLEdBQUdVLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTQyxPQUFULENBQWlCMEYsUUFBUSxDQUFDdEcsSUFBMUIsQ0FBWDtBQUNBLFFBQUkrb0MsTUFBTSxHQUFHdm9DLGFBQWEsQ0FBQ0MsY0FBZCxDQUE2QlQsSUFBN0IsRUFBbUNzRyxRQUFRLENBQUNyRyxZQUE1QyxDQUFiO0FBQ0EsUUFBSW83QixZQUFZLEdBQUcwTixNQUFNLENBQUMxTixZQUExQjs7QUFDQSxRQUFJQSxZQUFKLEVBQWtCO0FBQ2pCckssWUFBTSxDQUFDMTZCLElBQVAsR0FBY2tLLGFBQWEsQ0FBQzJuQyxlQUFkLENBQThCN2hDLFFBQTlCLEVBQXdDMHFCLE1BQU0sQ0FBQ2hmLE1BQS9DLENBQWQ7QUFDQTs7QUFFRHRSLE1BQUUsQ0FBQ2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsU0FBRyxFQUFFNCtCLE1BRGM7QUFFbkIsb0JBQWNvSTtBQUZLLEtBQXBCLEVBR0c7QUFDRmpWLFVBQUksRUFBRTVCO0FBREosS0FISDtBQU1BLFdBQU8sSUFBUDtBQUNBO0FBalNhLENBQWYsRTs7Ozs7Ozs7Ozs7QUNBQTF3QixNQUFNLENBQUNzbUMsT0FBUCxDQUFlO0FBQ2Q7QUFDQW9DLE9BQUssRUFBRSxVQUFVanhCLE9BQVYsRUFBbUJreEIsV0FBbkIsRUFBZ0M1N0IsV0FBaEMsRUFBNkM7QUFFbkQsUUFBSTJqQixNQUFNLEdBQUcsRUFBYjtBQUNBLFFBQUl5TyxNQUFNLEdBQUcxbkIsT0FBTyxDQUFDelIsUUFBckI7QUFDQSxRQUFJdWhDLFFBQVEsR0FBRzl2QixPQUFPLENBQUMxTCxLQUF2QjtBQUNBLFFBQUlrMEIsVUFBVSxHQUFHeG9CLE9BQU8sQ0FBQ2xYLEdBQXpCO0FBQ0EsUUFBSXlGLFFBQVEsR0FBRzVGLEVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI2K0IsTUFBckIsRUFBNkI7QUFDM0NyL0IsWUFBTSxFQUFFO0FBQ1AwSCxhQUFLLEVBQUUsQ0FEQTtBQUVQcUMsY0FBTSxFQUFFLENBRkQ7QUFHUHVrQixnQkFBUSxFQUFFLENBSEg7QUFJUDFjLGNBQU0sRUFBRTtBQUpEO0FBRG1DLEtBQTdCLENBQWY7QUFRQSxRQUFJaW5CLGVBQWUsR0FBRyxLQUFLbGlCLE1BQTNCO0FBQ0EsUUFBSStYLFFBQVEsR0FBR3hvQixRQUFRLENBQUN3QixLQUF4QjtBQUNBLFFBQUlvaEMsWUFBWSxHQUFHLEVBQW5CO0FBRUEsUUFBSWxqQixjQUFjLEdBQUd0bEIsRUFBRSxDQUFDcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCcTRCLGVBQWpCLEVBQWtDO0FBQ3RENzRCLFlBQU0sRUFBRTtBQUNQOUosWUFBSSxFQUFFO0FBREM7QUFEOEMsS0FBbEMsRUFJbEJBLElBSkg7QUFNQTJ5QyxlQUFXLENBQUNsb0MsT0FBWixDQUFvQixVQUFVZ1csTUFBVixFQUFrQnllLEdBQWxCLEVBQXVCO0FBQzFDLFVBQUl0dUIsSUFBSSxHQUFHeEcsRUFBRSxDQUFDcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCbVcsTUFBakIsRUFBeUI7QUFDbkMzVyxjQUFNLEVBQUU7QUFDUDlKLGNBQUksRUFBRTtBQURDO0FBRDJCLE9BQXpCLENBQVg7QUFLQSxVQUFJeTRCLFVBQVUsR0FBR3J1QixFQUFFLENBQUNnc0IsV0FBSCxDQUFlOXJCLE9BQWYsQ0FBdUI7QUFDdkNrSCxhQUFLLEVBQUVnbkIsUUFEZ0M7QUFFdkM1bkIsWUFBSSxFQUFFNlA7QUFGaUMsT0FBdkIsRUFHZDtBQUNGM1csY0FBTSxFQUFFO0FBQ1B1ekIsc0JBQVksRUFBRTtBQURQO0FBRE4sT0FIYyxDQUFqQjtBQVFBLFVBQUl1VSxNQUFNLEdBQUduWixVQUFVLENBQUM0RSxZQUF4QjtBQUNBLFVBQUlBLFlBQVksR0FBR2p6QixFQUFFLENBQUNncEIsYUFBSCxDQUFpQjlvQixPQUFqQixDQUF5QnNuQyxNQUF6QixFQUFpQztBQUNuRDluQyxjQUFNLEVBQUU7QUFDUDlKLGNBQUksRUFBRSxDQURDO0FBRVBpUCxrQkFBUSxFQUFFO0FBRkg7QUFEMkMsT0FBakMsQ0FBbkI7QUFNQSxVQUFJcXVCLEtBQUssR0FBR3B6QixhQUFhLENBQUMwekIsUUFBZCxDQUF1QnBGLFFBQXZCLEVBQWlDL1gsTUFBakMsQ0FBWjtBQUNBLFVBQUk4YyxVQUFVLEdBQUc5YyxNQUFqQjtBQUNBLFVBQUkrYyxZQUFZLEdBQUc1c0IsSUFBbkI7QUFDQSxVQUFJdzBCLGtCQUFrQixHQUFHM00sVUFBekI7QUFDQSxVQUFJNE0sZ0JBQWdCLEdBQUdoSSxZQUF2Qjs7QUFDQSxVQUFJQyxLQUFKLEVBQVc7QUFDVkMsa0JBQVUsR0FBR0QsS0FBYjtBQUNBRSxvQkFBWSxHQUFHcHpCLEVBQUUsQ0FBQ3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQmd6QixLQUFqQixFQUF3QjtBQUN0Q3VWLGdCQUFNLEVBQUU7QUFDUDd5QyxnQkFBSSxFQUFFO0FBREM7QUFEOEIsU0FBeEIsQ0FBZjtBQUtBb2xDLDBCQUFrQixHQUFHbDdCLGFBQWEsQ0FBQzB1QixZQUFkLENBQTJCSixRQUEzQixFQUFxQzhFLEtBQXJDLENBQXJCO0FBQ0ErSCx3QkFBZ0IsR0FBR243QixhQUFhLENBQUM2d0IsbUJBQWQsQ0FBa0NxSyxrQkFBbEMsQ0FBbkI7QUFDQXVOLG1CQUFXLENBQUN6VCxHQUFELENBQVgsR0FBbUI1QixLQUFuQjtBQUNBOztBQUNELFVBQUlvRixJQUFJLEdBQUc7QUFDVixlQUFPLElBQUl0SCxLQUFLLENBQUNDLFFBQVYsR0FBcUJDLElBRGxCO0FBRVYsb0JBQVk2TixNQUZGO0FBR1YsaUJBQVNvSSxRQUhDO0FBSVYsdUJBQWUsS0FKTDtBQUtWLGdCQUFROXdCLE1BTEU7QUFNVixxQkFBYTdQLElBQUksQ0FBQzVRLElBTlI7QUFPVixtQkFBV3U5QixVQVBEO0FBUVYsd0JBQWdCQyxZQUFZLENBQUN4OUIsSUFSbkI7QUFTVixnQ0FBd0JvbEMsa0JBQWtCLENBQUMvSCxZQVRqQztBQVVWLHFDQUE2QmdJLGdCQUFnQixDQUFDcmxDLElBVnBDO0FBV1YseUNBQWlDcWxDLGdCQUFnQixDQUFDcDJCLFFBWHhDO0FBWVYsZ0JBQVEsSUFaRTtBQWFWLHNCQUFjLElBQUlHLElBQUosRUFiSjtBQWNWLG1CQUFXLEtBZEQ7QUFlVixxQkFBYXV6QixlQWZIO0FBZ0JWLDBCQUFrQmpULGNBaEJSO0FBaUJWLCtCQUF1QmpPLE9BQU8sQ0FBQ00sbUJBakJyQjtBQWtCViwyQkFBb0JOLE9BQU8sQ0FBQ00sbUJBQVIsSUFBK0JOLE9BQU8sQ0FBQ00sbUJBQVIsQ0FBNEJ0cUIsTUFBNUIsSUFBc0MsQ0FBdEUsR0FBMkVncUIsT0FBTyxDQUFDTSxtQkFBUixDQUE0QixDQUE1QixDQUEzRSxHQUE0RyxFQWxCckg7QUFtQlYsMkJBQW1Ca29CLFVBbkJUO0FBb0JWLDBCQUFrQmx6QjtBQXBCUixPQUFYOztBQXNCQSxVQUFJdW1CLEtBQUosRUFBVztBQUNWb0YsWUFBSSxDQUFDcEYsS0FBTCxHQUFhQSxLQUFiO0FBQ0E7O0FBQ0RwekIsbUJBQWEsQ0FBQzJ6QixhQUFkLENBQTRCN3RCLFFBQVEsQ0FBQzBMLE1BQXJDLEVBQTZDZ25CLElBQTdDO0FBQ0FrUSxrQkFBWSxDQUFDM3lDLElBQWIsQ0FBa0J5aUMsSUFBbEI7QUFDQSxLQWhFRDtBQW1FQWhJLFVBQU0sQ0FBQ3VCLFFBQVAsR0FBa0IsSUFBSTdzQixJQUFKLEVBQWxCO0FBQ0FzckIsVUFBTSxDQUFDd0IsV0FBUCxHQUFxQixLQUFLemIsTUFBMUI7QUFFQXJXLE1BQUUsQ0FBQ2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsU0FBRyxFQUFFNCtCLE1BRGM7QUFFbkIsb0JBQWNvSTtBQUZLLEtBQXBCLEVBR0c7QUFDRmpWLFVBQUksRUFBRTVCLE1BREo7QUFFRndNLGVBQVMsRUFBRTtBQUNWLDZCQUFxQjtBQUNwQkMsZUFBSyxFQUFFeUw7QUFEYTtBQURYLE9BRlQ7QUFPRjFCLFdBQUssRUFBRTtBQUNOOVksZ0JBQVEsRUFBRTtBQUNUK08sZUFBSyxFQUFFd0w7QUFERTtBQURKO0FBUEwsS0FISDtBQWlCQTNpQyxZQUFRLEdBQUc1RixFQUFFLENBQUNrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCNitCLE1BQXJCLENBQVg7QUFDQXpULHFCQUFpQixHQUFHdHJCLEVBQUUsQ0FBQ3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQnE0QixlQUFqQixDQUFwQjtBQUNBckosZUFBVyxDQUFDRSwwQkFBWixDQUF1QyxrQkFBdkMsRUFBMkR4cEIsUUFBM0QsRUFBcUUsRUFBckUsRUFBeUUwbEIsaUJBQXpFLEVBQTRGaWQsV0FBNUY7QUFFQWpaLFdBQU8sR0FBRzFwQixRQUFRLENBQUNNLElBQW5CO0FBQ0FtUixXQUFPLENBQUNreEIsV0FBUixHQUFzQkEsV0FBdEIsQ0FwSG1ELENBb0hoQjtBQUNuQzs7QUFDQXJaLGVBQVcsQ0FBQ1EsY0FBWixDQUEyQkosT0FBM0IsRUFBb0MxcEIsUUFBcEMsRUFBOEN5UixPQUE5QyxFQUF1RCxPQUF2RCxFQUFnRWtoQixlQUFoRSxFQUFpRmdRLFdBQWpGO0FBQ0EsV0FBTyxJQUFQO0FBQ0EsR0ExSGE7QUE0SGRHLFNBQU8sRUFBRSxVQUFVcnhCLE9BQVYsRUFBbUI7QUFDM0IsUUFBSWlaLE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBSXlPLE1BQU0sR0FBRzFuQixPQUFPLENBQUN6UixRQUFyQjtBQUNBLFFBQUl1aEMsUUFBUSxHQUFHOXZCLE9BQU8sQ0FBQzFMLEtBQXZCO0FBQ0EsUUFBSS9GLFFBQVEsR0FBRzVGLEVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI2K0IsTUFBckIsRUFBNkI7QUFDM0NyL0IsWUFBTSxFQUFFO0FBQ1ArSixjQUFNLEVBQUU7QUFERDtBQURtQyxLQUE3QixDQUFmO0FBS0EsUUFBSTh1QixlQUFlLEdBQUcsS0FBS2xpQixNQUEzQjs7QUFDQSxRQUFJaWpCLGFBQWEsR0FBRzE0QixDQUFDLENBQUN1YyxJQUFGLENBQU92WCxRQUFRLENBQUM2RCxNQUFoQixFQUF3QixVQUFVeFUsQ0FBVixFQUFhO0FBQ3hELGFBQU9BLENBQUMsQ0FBQ2tMLEdBQUYsSUFBU2duQyxRQUFoQjtBQUNBLEtBRm1CLENBQXBCOztBQUlBLFFBQUl6dkMsS0FBSyxHQUFHLENBQVo7QUFFQTRoQyxpQkFBYSxDQUFDcGlCLFFBQWQsQ0FBdUI3VyxPQUF2QixDQUErQixVQUFVK08sQ0FBVixFQUFhMGxCLEdBQWIsRUFBa0I7QUFDaEQsVUFBSTFsQixDQUFDLENBQUNqZCxJQUFGLElBQVUsSUFBVixJQUFrQmlkLENBQUMsQ0FBQ3NILE9BQUYsSUFBYTZoQixlQUEvQixJQUFrRCxDQUFDbnBCLENBQUMsQ0FBQ3lJLE9BQXpELEVBQWtFO0FBQ2pFbmdCLGFBQUssR0FBR285QixHQUFSO0FBQ0E7QUFDRCxLQUpEO0FBTUF4RSxVQUFNLENBQUMsdUJBQXVCNTRCLEtBQXZCLEdBQStCLFVBQWhDLENBQU4sR0FBb0QsSUFBcEQ7QUFDQTQ0QixVQUFNLENBQUMsdUJBQXVCNTRCLEtBQXZCLEdBQStCLFlBQWhDLENBQU4sR0FBc0QsSUFBSXNOLElBQUosRUFBdEQ7QUFFQXNyQixVQUFNLENBQUM3bUIsTUFBUCxHQUFnQkEsTUFBaEI7QUFFQXpKLE1BQUUsQ0FBQ2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsU0FBRyxFQUFFNCtCLE1BRGM7QUFFbkIsb0JBQWNvSTtBQUZLLEtBQXBCLEVBR0c7QUFDRmpWLFVBQUksRUFBRTVCO0FBREosS0FISDtBQU1BLFdBQU8sSUFBUDtBQUNBLEdBOUphO0FBZ0tkcVksV0FBUyxFQUFFLFVBQVU1SixNQUFWLEVBQWtCcHlCLFdBQWxCLEVBQStCO0FBQ3pDLFFBQUkyakIsTUFBTSxHQUFHLEVBQWI7QUFFQSxRQUFJMXFCLFFBQVEsR0FBRzVGLEVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI2K0IsTUFBckIsRUFBNkI7QUFDM0NyL0IsWUFBTSxFQUFFO0FBQ1ArSixjQUFNLEVBQUUsQ0FERDtBQUVQdWtCLGdCQUFRLEVBQUUsQ0FGSDtBQUdQMkQsb0JBQVksRUFBRTtBQUhQO0FBRG1DLEtBQTdCLENBQWY7QUFPQSxRQUFJbG9CLE1BQU0sR0FBRzdELFFBQVEsQ0FBQzZELE1BQXRCO0FBQ0EsUUFBSTh1QixlQUFlLEdBQUcsS0FBS2xpQixNQUEzQjtBQUNBLFFBQUlnWixlQUFKO0FBRUE1bEIsVUFBTSxDQUFDcEosT0FBUCxDQUFlLFVBQVVwTCxDQUFWLEVBQWE7QUFDM0IsVUFBSUEsQ0FBQyxDQUFDaWlCLFFBQU4sRUFBZ0I7QUFDZmppQixTQUFDLENBQUNpaUIsUUFBRixDQUFXN1csT0FBWCxDQUFtQixVQUFVK08sQ0FBVixFQUFhMGxCLEdBQWIsRUFBa0I7QUFDcEMsY0FBSTFsQixDQUFDLENBQUNqZCxJQUFGLElBQVUsSUFBVixJQUFrQmlkLENBQUMsQ0FBQ3NILE9BQUYsSUFBYTZoQixlQUEvQixJQUFrRG5wQixDQUFDLENBQUN1SCxXQUFGLElBQWlCLEtBQXZFLEVBQThFO0FBQzdFMFksMkJBQWUsR0FBR2pnQixDQUFsQjtBQUNBLGdCQUFJdzVCLEtBQUssR0FBRyxFQUFaO0FBQ0FBLGlCQUFLLENBQUMsdUJBQXVCOVQsR0FBdkIsR0FBNkIsY0FBOUIsQ0FBTCxHQUFxRCxJQUFyRDtBQUNBOFQsaUJBQUssQ0FBQyx1QkFBdUI5VCxHQUF2QixHQUE2QixVQUE5QixDQUFMLEdBQWlELElBQWpEO0FBQ0E4VCxpQkFBSyxDQUFDLHVCQUF1QjlULEdBQXZCLEdBQTZCLGNBQTlCLENBQUwsR0FBcUQsSUFBSTl2QixJQUFKLEVBQXJEO0FBQ0E0akMsaUJBQUssQ0FBQyx1QkFBdUI5VCxHQUF2QixHQUE2QixRQUE5QixDQUFMLEdBQStDLFdBQS9DO0FBQ0E4VCxpQkFBSyxDQUFDLHVCQUF1QjlULEdBQXZCLEdBQTZCLFlBQTlCLENBQUwsR0FBbUQsSUFBSTl2QixJQUFKLEtBQWFvSyxDQUFDLENBQUNpaUIsVUFBbEU7QUFDQXJ4QixjQUFFLENBQUNrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQ25COXhCLGlCQUFHLEVBQUU0K0IsTUFEYztBQUVuQiw0QkFBYzlwQyxDQUFDLENBQUNrTDtBQUZHLGFBQXBCLEVBR0c7QUFDRit4QixrQkFBSSxFQUFFMFc7QUFESixhQUhIO0FBTUE7QUFDRCxTQWhCRDtBQWlCQTtBQUNELEtBcEJEOztBQXNCQSxRQUFJdlosZUFBSixFQUFxQjtBQUNwQixVQUFJMzNCLEtBQUssR0FBRyxDQUFaLENBRG9CLENBR3BCOztBQUNBK1IsWUFBTSxDQUFDcEosT0FBUCxDQUFlLFVBQVVwTCxDQUFWLEVBQWE7QUFDM0IsWUFBSW82QixlQUFlLElBQUlwNkIsQ0FBQyxDQUFDa0wsR0FBRixLQUFVa3ZCLGVBQWUsQ0FBQzFqQixLQUFqRCxFQUF3RDtBQUN2RCxjQUFJMVcsQ0FBQyxDQUFDaWlCLFFBQU4sRUFBZ0I7QUFDZmppQixhQUFDLENBQUNpaUIsUUFBRixDQUFXN1csT0FBWCxDQUFtQixVQUFVK08sQ0FBVixFQUFhMGxCLEdBQWIsRUFBa0I7QUFDcEMsa0JBQUkxbEIsQ0FBQyxDQUFDalAsR0FBRixLQUFVa3ZCLGVBQWUsQ0FBQ2x2QixHQUE5QixFQUFtQztBQUNsQ2lQLGlCQUFDLENBQUN6QyxXQUFGLEdBQWdCQSxXQUFoQjtBQUNBalYscUJBQUssR0FBR285QixHQUFSO0FBQ0E7QUFDRCxhQUxEO0FBTUE7QUFDRDtBQUNELE9BWEQ7QUFhQXhFLFlBQU0sQ0FBQ3VCLFFBQVAsR0FBa0IsSUFBSTdzQixJQUFKLEVBQWxCO0FBQ0FzckIsWUFBTSxDQUFDd0IsV0FBUCxHQUFxQixLQUFLemIsTUFBMUI7QUFDQWlhLFlBQU0sQ0FBQyx1QkFBdUI1NEIsS0FBdkIsR0FBK0IsY0FBaEMsQ0FBTixHQUF3RGlWLFdBQXhEO0FBRUEzTSxRQUFFLENBQUNrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQ25COXhCLFdBQUcsRUFBRTQrQixNQURjO0FBRW5CLHNCQUFjMVAsZUFBZSxDQUFDMWpCO0FBRlgsT0FBcEIsRUFHRztBQUNGdW1CLFlBQUksRUFBRTVCLE1BREo7QUFFRnNXLGFBQUssRUFBRTtBQUNONVksa0JBQVEsRUFBRXVLO0FBREosU0FGTDtBQUtGdUUsaUJBQVMsRUFBRTtBQUNWbkwsc0JBQVksRUFBRTtBQUNib0wsaUJBQUssRUFBRSxDQUFDeEUsZUFBRCxFQUFrQmxKLGVBQWUsQ0FBQzdvQixJQUFsQztBQURNO0FBREo7QUFMVCxPQUhIO0FBZUFaLGNBQVEsR0FBRzVGLEVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI2K0IsTUFBckIsQ0FBWDtBQUVBelQsdUJBQWlCLEdBQUd0ckIsRUFBRSxDQUFDcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCcTRCLGVBQWpCLENBQXBCLENBdENvQixDQXVDcEI7O0FBQ0EsVUFBSSxTQUFTNXJCLFdBQVQsSUFBd0IwaUIsZUFBeEIsSUFBMkNBLGVBQWUsQ0FBQ2hOLFNBQS9ELEVBQTBFO0FBQ3pFNk0sbUJBQVcsQ0FBQ0UsMEJBQVosQ0FBdUMseUJBQXZDLEVBQWtFeHBCLFFBQWxFLEVBQTRFLEVBQTVFLEVBQWdGMGxCLGlCQUFoRixFQUFtRyxDQUFDK0QsZUFBZSxDQUFDaE4sU0FBakIsQ0FBbkc7QUFDQTs7QUFFRDZNLGlCQUFXLENBQUNDLDJCQUFaLENBQXdDLGNBQXhDLEVBQXdEb0osZUFBeEQ7QUFFQWpKLGFBQU8sR0FBRzFwQixRQUFRLENBQUNNLElBQW5CLENBOUNvQixDQStDcEI7O0FBQ0FncEIsaUJBQVcsQ0FBQ1EsY0FBWixDQUEyQkosT0FBM0IsRUFBb0MxcEIsUUFBcEMsRUFBOEN5cEIsZUFBOUMsRUFBK0QsV0FBL0QsRUFBNEVrSixlQUE1RSxFQUE2RixFQUE3RjtBQUNBOztBQUVELFdBQU8sSUFBUDtBQUNBLEdBeFBhO0FBMFBkc1EsV0FBUyxFQUFFLFVBQVVqNkIsVUFBVixFQUFzQm9TLFNBQXRCLEVBQWlDO0FBQzNDLFFBQUlzUCxNQUFNLEdBQUcsRUFBYjtBQUVBLFFBQUkxcUIsUUFBUSxHQUFHNUYsRUFBRSxDQUFDa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjBPLFVBQXJCLEVBQWlDO0FBQy9DbFAsWUFBTSxFQUFFO0FBQ1ArSixjQUFNLEVBQUUsQ0FERDtBQUVQdWtCLGdCQUFRLEVBQUU7QUFGSDtBQUR1QyxLQUFqQyxDQUFmO0FBTUEsUUFBSXZrQixNQUFNLEdBQUc3RCxRQUFRLENBQUM2RCxNQUF0QjtBQUNBLFFBQUkwOUIsUUFBSjtBQUFBLFFBQWMyQixjQUFkO0FBQUEsUUFBOEJDLEtBQUssR0FBRyxLQUF0QztBQUVBdC9CLFVBQU0sQ0FBQ3BKLE9BQVAsQ0FBZSxVQUFVcEwsQ0FBVixFQUFhO0FBQzNCLFVBQUlBLENBQUMsQ0FBQ2lpQixRQUFOLEVBQWdCO0FBQ2ZqaUIsU0FBQyxDQUFDaWlCLFFBQUYsQ0FBVzdXLE9BQVgsQ0FBbUIsVUFBVStPLENBQVYsRUFBYTBsQixHQUFiLEVBQWtCO0FBQ3BDLGNBQUkxbEIsQ0FBQyxDQUFDalAsR0FBRixJQUFTNmdCLFNBQWIsRUFBd0I7QUFDdkJtbUIsb0JBQVEsR0FBRy8zQixDQUFDLENBQUN6RCxLQUFiO0FBQ0FtOUIsMEJBQWMsR0FBRzE1QixDQUFDLENBQUNzSCxPQUFuQjtBQUNBNFosa0JBQU0sQ0FBQyx1QkFBdUJ3RSxHQUF2QixHQUE2QixRQUE5QixDQUFOLEdBQWdELFlBQWhEO0FBQ0F4RSxrQkFBTSxDQUFDLHVCQUF1QndFLEdBQXZCLEdBQTZCLGNBQTlCLENBQU4sR0FBc0QsSUFBdEQ7QUFDQXhFLGtCQUFNLENBQUMsdUJBQXVCd0UsR0FBdkIsR0FBNkIsY0FBOUIsQ0FBTixHQUFzRCxJQUFJOXZCLElBQUosRUFBdEQ7QUFDQXNyQixrQkFBTSxDQUFDLHVCQUF1QndFLEdBQXZCLEdBQTZCLFVBQTlCLENBQU4sR0FBa0QsSUFBbEQ7QUFDQXhFLGtCQUFNLENBQUMsdUJBQXVCd0UsR0FBdkIsR0FBNkIsWUFBOUIsQ0FBTixHQUFvRCxJQUFJOXZCLElBQUosRUFBcEQ7QUFDQTtBQUNELFNBVkQ7QUFXQTtBQUNELEtBZEQ7QUFnQkEsUUFBSSxDQUFDbWlDLFFBQUQsSUFBYSxDQUFDMkIsY0FBbEIsRUFDQztBQUVELFFBQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0F0L0IsVUFBTSxDQUFDcEosT0FBUCxDQUFlLFVBQVVwTCxDQUFWLEVBQWE7QUFDM0IsVUFBSUEsQ0FBQyxDQUFDaWlCLFFBQU4sRUFBZ0I7QUFDZmppQixTQUFDLENBQUNpaUIsUUFBRixDQUFXN1csT0FBWCxDQUFtQixVQUFVK08sQ0FBVixFQUFhO0FBQy9CLGNBQUlBLENBQUMsQ0FBQ3NILE9BQUYsSUFBYW95QixjQUFiLElBQStCMTVCLENBQUMsQ0FBQ2pkLElBQUYsSUFBVSxJQUF6QyxJQUFpRGlkLENBQUMsQ0FBQ3VILFdBQUYsSUFBaUIsS0FBdEUsRUFBNkU7QUFDNUVveUIsaUJBQUs7QUFDTDtBQUNELFNBSkQ7QUFLQTtBQUNELEtBUkQ7QUFVQXpZLFVBQU0sQ0FBQ3VCLFFBQVAsR0FBa0IsSUFBSTdzQixJQUFKLEVBQWxCO0FBQ0FzckIsVUFBTSxDQUFDd0IsV0FBUCxHQUFxQixLQUFLemIsTUFBMUI7O0FBRUEsUUFBSTB5QixLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ2Qvb0MsUUFBRSxDQUFDa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUNuQjl4QixXQUFHLEVBQUV5TyxVQURjO0FBRW5CLHNCQUFjdTRCO0FBRkssT0FBcEIsRUFHRztBQUNGalYsWUFBSSxFQUFFNUI7QUFESixPQUhIO0FBTUEsS0FQRCxNQU9PO0FBQ050d0IsUUFBRSxDQUFDa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUNuQjl4QixXQUFHLEVBQUV5TyxVQURjO0FBRW5CLHNCQUFjdTRCO0FBRkssT0FBcEIsRUFHRztBQUNGalYsWUFBSSxFQUFFNUIsTUFESjtBQUVGc1csYUFBSyxFQUFFO0FBQ041WSxrQkFBUSxFQUFFOGE7QUFESjtBQUZMLE9BSEg7QUFTQTs7QUFHRDVaLGVBQVcsQ0FBQ0MsMkJBQVosQ0FBd0MsY0FBeEMsRUFBd0QyWixjQUF4RDtBQUNBLFdBQU8sSUFBUDtBQUNBLEdBN1RhO0FBK1RkRSxTQUFPLEVBQUUsVUFBVWpLLE1BQVYsRUFBa0JweUIsV0FBbEIsRUFBK0I7QUFDdkMsUUFBSTJqQixNQUFNLEdBQUcsRUFBYjtBQUVBLFFBQUkxcUIsUUFBUSxHQUFHNUYsRUFBRSxDQUFDa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjYrQixNQUFyQixFQUE2QjtBQUMzQ3IvQixZQUFNLEVBQUU7QUFDUCtKLGNBQU0sRUFBRTtBQUREO0FBRG1DLEtBQTdCLENBQWY7QUFLQSxRQUFJQSxNQUFNLEdBQUc3RCxRQUFRLENBQUM2RCxNQUF0QjtBQUNBLFFBQUk4dUIsZUFBZSxHQUFHLEtBQUtsaUIsTUFBM0I7QUFFQSxRQUFJZ1osZUFBSjtBQUVBNWxCLFVBQU0sQ0FBQ3BKLE9BQVAsQ0FBZSxVQUFVcEwsQ0FBVixFQUFhO0FBQzNCLFVBQUlBLENBQUMsQ0FBQ2lpQixRQUFOLEVBQWdCO0FBQ2ZqaUIsU0FBQyxDQUFDaWlCLFFBQUYsQ0FBVzdXLE9BQVgsQ0FBbUIsVUFBVStPLENBQVYsRUFBYTBsQixHQUFiLEVBQWtCO0FBQ3BDLGNBQUkxbEIsQ0FBQyxDQUFDc0gsT0FBRixJQUFhNmhCLGVBQWIsSUFBZ0NucEIsQ0FBQyxDQUFDamQsSUFBRixJQUFVLElBQTFDLElBQWtEaWQsQ0FBQyxDQUFDdUgsV0FBRixJQUFpQixLQUF2RSxFQUE4RTtBQUM3RTBZLDJCQUFlLEdBQUdqZ0IsQ0FBbEI7QUFDQSxnQkFBSXc1QixLQUFLLEdBQUcsRUFBWjtBQUNBQSxpQkFBSyxDQUFDLHVCQUF1QjlULEdBQXZCLEdBQTZCLFFBQTlCLENBQUwsR0FBK0MsV0FBL0M7QUFDQThULGlCQUFLLENBQUMsdUJBQXVCOVQsR0FBdkIsR0FBNkIsWUFBOUIsQ0FBTCxHQUFtRCxJQUFJOXZCLElBQUosRUFBbkQ7QUFDQWhGLGNBQUUsQ0FBQ2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsaUJBQUcsRUFBRTQrQixNQURjO0FBRW5CLDRCQUFjOXBDLENBQUMsQ0FBQ2tMO0FBRkcsYUFBcEIsRUFHRztBQUNGK3hCLGtCQUFJLEVBQUUwVztBQURKLGFBSEg7QUFPQTtBQUNELFNBZEQ7QUFlQTtBQUNELEtBbEJEO0FBb0JBLFFBQUlseEMsS0FBSyxHQUFHLENBQVosQ0FqQ3VDLENBbUN2Qzs7QUFDQStSLFVBQU0sQ0FBQ3BKLE9BQVAsQ0FBZSxVQUFVcEwsQ0FBVixFQUFhO0FBQzNCLFVBQUlvNkIsZUFBZSxJQUFJcDZCLENBQUMsQ0FBQ2tMLEdBQUYsS0FBVWt2QixlQUFlLENBQUMxakIsS0FBakQsRUFBd0Q7QUFDdkQsWUFBSTFXLENBQUMsQ0FBQ2lpQixRQUFOLEVBQWdCO0FBQ2ZqaUIsV0FBQyxDQUFDaWlCLFFBQUYsQ0FBVzdXLE9BQVgsQ0FBbUIsVUFBVStPLENBQVYsRUFBYTBsQixHQUFiLEVBQWtCO0FBQ3BDLGdCQUFJMWxCLENBQUMsQ0FBQ2pQLEdBQUYsS0FBVWt2QixlQUFlLENBQUNsdkIsR0FBOUIsRUFBbUM7QUFDbEN6SSxtQkFBSyxHQUFHbzlCLEdBQVI7QUFDQTtBQUNELFdBSkQ7QUFLQTtBQUNEO0FBQ0QsS0FWRDtBQVlBeEUsVUFBTSxDQUFDLHVCQUF1QjU0QixLQUF2QixHQUErQixjQUFoQyxDQUFOLEdBQXdEaVYsV0FBeEQ7QUFFQTNNLE1BQUUsQ0FBQ2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsU0FBRyxFQUFFNCtCLE1BRGM7QUFFbkIsb0JBQWMxUCxlQUFlLENBQUMxakI7QUFGWCxLQUFwQixFQUdHO0FBQ0Z1bUIsVUFBSSxFQUFFNUI7QUFESixLQUhIO0FBT0EsV0FBTyxJQUFQO0FBQ0E7QUF6WGEsQ0FBZixFOzs7Ozs7Ozs7OztBQ0FBMXdCLE1BQU0sQ0FBQ3NtQyxPQUFQLENBQWU7QUFDZDtBQUNBM2lCLGtCQUFnQixFQUFFLFVBQVVtQixXQUFWLEVBQXVCMEosUUFBdkIsRUFBaUNrQixPQUFqQyxFQUEwQ2tKLDJCQUExQyxFQUF1RTdyQixXQUF2RSxFQUFvRjhyQixvQkFBcEYsRUFBMEdDLGFBQTFHLEVBQXlIQyxXQUF6SCxFQUFzSUMsT0FBdEksRUFBK0lDLGVBQS9JLEVBQWdLO0FBQ2pMLFFBQUksQ0FBQyxLQUFLeGlCLE1BQVYsRUFDQyxNQUFNLElBQUl6VyxNQUFNLENBQUNwRSxLQUFYLENBQWlCLGdCQUFqQixDQUFOO0FBRUQ7QUFDQSxHQVBhO0FBVWR5dEMsZ0JBQWMsRUFBRSxVQUFVdmtCLFdBQVYsRUFBdUJ5aUIsUUFBdkIsRUFBaUN0SCxVQUFqQyxFQUE2QztBQUM1RC9HLFNBQUssQ0FBQ3BVLFdBQUQsRUFBY24yQixNQUFkLENBQUw7QUFDQXVxQyxTQUFLLENBQUNxTyxRQUFELEVBQVc1NEMsTUFBWCxDQUFMO0FBQ0F1cUMsU0FBSyxDQUFDK0csVUFBRCxFQUFhdHhDLE1BQWIsQ0FBTDtBQUVBLFFBQUltaEIsR0FBRyxHQUFHMVAsRUFBRSxDQUFDa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQndrQixXQUFyQixDQUFWOztBQUVBLFFBQUksQ0FBQ2hWLEdBQUwsRUFBVTtBQUNULFlBQU0sSUFBSTlQLE1BQU0sQ0FBQ3BFLEtBQVgsQ0FBaUIsZUFBakIsRUFBa0Msb0JBQWxDLENBQU47QUFDQTs7QUFFRCxRQUFJbVEsS0FBSyxHQUFHL0ssQ0FBQyxDQUFDdWMsSUFBRixDQUFPek4sR0FBRyxDQUFDakcsTUFBWCxFQUFtQixVQUFVeFUsQ0FBVixFQUFhO0FBQzNDLGFBQU9BLENBQUMsQ0FBQ2tMLEdBQUYsSUFBU2duQyxRQUFoQjtBQUNBLEtBRlcsQ0FBWjs7QUFJQSxRQUFJOXZCLE9BQU8sR0FBR3pXLENBQUMsQ0FBQ3VjLElBQUYsQ0FBT3hSLEtBQUssQ0FBQ3VMLFFBQWIsRUFBdUIsVUFBVW9oQixJQUFWLEVBQWdCO0FBQ3BELGFBQU9BLElBQUksQ0FBQ240QixHQUFMLElBQVkwL0IsVUFBbkI7QUFDQSxLQUZhLENBQWQ7O0FBSUEsUUFBSXFKLGtCQUFrQixHQUFHN2hDLGVBQWUsQ0FBQ3NjLHNCQUFoQixDQUF1Q2pVLEdBQUcsQ0FBQ3hKLElBQTNDLEVBQWlEd0osR0FBRyxDQUFDdEksS0FBckQsRUFBNEQsS0FBS2lQLE1BQWpFLENBQXpCOztBQUVBLFFBQUksQ0FBQ2dCLE9BQUQsSUFBWSxDQUFDLENBQUMsU0FBRCxFQUFZLFlBQVosRUFBMEJwSixRQUExQixDQUFtQ29KLE9BQU8sQ0FBQ2xsQixJQUEzQyxDQUFiLElBQWlFLENBQUNrbEIsT0FBTyxDQUFDa00sZ0JBQTlFLEVBQWdHO0FBQy9GLFVBQUksQ0FBQzJsQixrQkFBTCxFQUF5QjtBQUN4QixZQUFJN3hCLE9BQU8sQ0FBQ2dMLFNBQVIsSUFBcUIsS0FBS2hNLE1BQTlCLEVBQ0MsTUFBTSxJQUFJelcsTUFBTSxDQUFDcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixnQ0FBM0IsQ0FBTjtBQUNEO0FBQ0Q7O0FBRUQsUUFBSTJ0QyxtQkFBbUIsR0FBRzl4QixPQUFPLENBQUNrTSxnQkFBbEM7QUFDQSxRQUFJQSxnQkFBZ0IsR0FBR3ZqQixFQUFFLENBQUNrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCaXBDLG1CQUFyQixDQUF2Qjs7QUFDQSxRQUFJNWxCLGdCQUFKLEVBQXNCO0FBQ3JCLFVBQUlBLGdCQUFnQixDQUFDNWIsS0FBakIsSUFBMEIsT0FBOUIsRUFBdUM7QUFDdEMsWUFBSSxDQUFDdWhDLGtCQUFMLEVBQ0MsTUFBTSxJQUFJdHBDLE1BQU0sQ0FBQ3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIseUNBQTNCLENBQU47QUFDRDs7QUFDRCxVQUFJMHlCLFdBQVcsR0FBRzNLLGdCQUFnQixDQUFDMkssV0FBakIsSUFBZ0MsRUFBbEQ7QUFFQTNLLHNCQUFnQixDQUFDb0wsT0FBakIsR0FBMkIsSUFBSTNwQixJQUFKLEVBQTNCO0FBQ0F1ZSxzQkFBZ0IsQ0FBQ3FMLFVBQWpCLEdBQThCLEtBQUt2WSxNQUFuQztBQUNBLFVBQUkreUIsMkJBQTJCLEdBQUdwcEMsRUFBRSxDQUFDNnVCLGlCQUFILENBQXFCQyxNQUFyQixDQUE0QnZMLGdCQUE1QixDQUFsQzs7QUFDQSxVQUFJNmxCLDJCQUFKLEVBQWlDO0FBQ2hDcHBDLFVBQUUsQ0FBQ2tkLFNBQUgsQ0FBYTZSLE1BQWIsQ0FBb0I7QUFDbkI1dUIsYUFBRyxFQUFFZ3BDO0FBRGMsU0FBcEIsRUFEZ0MsQ0FLaEM7O0FBQ0F2b0MsU0FBQyxDQUFDcWIsSUFBRixDQUFPaVMsV0FBUCxFQUFvQixVQUFVZSxJQUFWLEVBQWdCO0FBQ25DQyxxQkFBVyxDQUFDQywyQkFBWixDQUF3QyxjQUF4QyxFQUF3REYsSUFBeEQ7QUFDQSxTQUZEO0FBR0E7QUFDRDs7QUFFRCxRQUFJd0ssT0FBTyxHQUFHLElBQUl6ckMsTUFBSixFQUFkO0FBQ0F5ckMsV0FBTyxDQUFDNUgsUUFBUixHQUFtQixJQUFJN3NCLElBQUosRUFBbkI7QUFDQXkwQixXQUFPLENBQUMzSCxXQUFSLEdBQXNCLEtBQUt6YixNQUEzQjs7QUFFQXpWLEtBQUMsQ0FBQ3FiLElBQUYsQ0FBT3RRLEtBQUssQ0FBQ3VMLFFBQWIsRUFBdUIsVUFBVW9oQixJQUFWLEVBQWdCeEQsR0FBaEIsRUFBcUI7QUFDM0MsVUFBSXdELElBQUksQ0FBQ240QixHQUFMLElBQVkwL0IsVUFBaEIsRUFBNEI7QUFDM0JwRyxlQUFPLENBQUMsdUJBQXVCM0UsR0FBdkIsR0FBNkIsUUFBOUIsQ0FBUCxHQUFpRCxZQUFqRDtBQUNBMkUsZUFBTyxDQUFDLHVCQUF1QjNFLEdBQXZCLEdBQTZCLGNBQTlCLENBQVAsR0FBdUQsSUFBdkQ7QUFDQTJFLGVBQU8sQ0FBQyx1QkFBdUIzRSxHQUF2QixHQUE2QixjQUE5QixDQUFQLEdBQXVELElBQUk5dkIsSUFBSixFQUF2RDtBQUNBeTBCLGVBQU8sQ0FBQyx1QkFBdUIzRSxHQUF2QixHQUE2QixVQUE5QixDQUFQLEdBQW1ELElBQW5EO0FBQ0EyRSxlQUFPLENBQUMsdUJBQXVCM0UsR0FBdkIsR0FBNkIsWUFBOUIsQ0FBUCxHQUFxRCxJQUFJOXZCLElBQUosRUFBckQ7QUFDQTtBQUNELEtBUkQ7O0FBVUFoRixNQUFFLENBQUNrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQ25COXhCLFNBQUcsRUFBRXVrQixXQURjO0FBRW5CLG9CQUFjeWlCO0FBRkssS0FBcEIsRUFHRztBQUNGalYsVUFBSSxFQUFFdUg7QUFESixLQUhIO0FBT0EsV0FBTyxJQUFQO0FBQ0EsR0FwRmE7QUFzRmQ0UCxrQkFBZ0IsRUFBRSxVQUFVM2tCLFdBQVYsRUFBdUI0a0IsV0FBdkIsRUFBb0M7QUFDckR4USxTQUFLLENBQUNwVSxXQUFELEVBQWNuMkIsTUFBZCxDQUFMO0FBQ0F1cUMsU0FBSyxDQUFDd1EsV0FBRCxFQUFjM3BDLEtBQWQsQ0FBTDtBQUVBLFFBQUkrUCxHQUFHLEdBQUcxUCxFQUFFLENBQUNrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCd2tCLFdBQXJCLENBQVY7O0FBRUEsUUFBSSxDQUFDaFYsR0FBTCxFQUFVO0FBQ1QsWUFBTSxJQUFJOVAsTUFBTSxDQUFDcEUsS0FBWCxDQUFpQixlQUFqQixFQUFrQyxvQkFBbEMsQ0FBTjtBQUNBOztBQUVENmEsVUFBTSxHQUFHLEtBQUtBLE1BQWQ7QUFFQSxRQUFJNnlCLGtCQUFrQixHQUFHN2hDLGVBQWUsQ0FBQ3NjLHNCQUFoQixDQUF1Q2pVLEdBQUcsQ0FBQ3hKLElBQTNDLEVBQWlEd0osR0FBRyxDQUFDdEksS0FBckQsRUFBNERpUCxNQUE1RCxDQUF6Qjs7QUFFQXpWLEtBQUMsQ0FBQ3FiLElBQUYsQ0FBT3ZNLEdBQUcsQ0FBQ2pHLE1BQVgsRUFBbUIsVUFBVXhVLENBQVYsRUFBYTtBQUMvQixVQUFJQSxDQUFDLENBQUNpaUIsUUFBTixFQUFnQjtBQUNmLFlBQUlxeUIsTUFBTSxHQUFHLEtBQWI7QUFDQSxZQUFJOVAsT0FBTyxHQUFHLElBQUl6ckMsTUFBSixFQUFkOztBQUNBNFMsU0FBQyxDQUFDcWIsSUFBRixDQUFPaG5CLENBQUMsQ0FBQ2lpQixRQUFULEVBQW1CLFVBQVU5SCxDQUFWLEVBQWEwbEIsR0FBYixFQUFrQjtBQUNwQyxjQUFJd1UsV0FBVyxDQUFDcjdCLFFBQVosQ0FBcUJtQixDQUFDLENBQUNqUCxHQUF2QixNQUFnQ2lQLENBQUMsQ0FBQ2lULFNBQUYsSUFBZWhNLE1BQWYsSUFBeUI2eUIsa0JBQXpELEtBQWdGLGdCQUFnQjk1QixDQUFDLENBQUNqZCxJQUFsRyxJQUEwR2lkLENBQUMsQ0FBQ21VLGdCQUFoSCxFQUFrSTtBQUNqSSxnQkFBSTRsQixtQkFBbUIsR0FBRy81QixDQUFDLENBQUNtVSxnQkFBNUI7QUFDQSxnQkFBSUEsZ0JBQWdCLEdBQUd2akIsRUFBRSxDQUFDa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQmlwQyxtQkFBckIsQ0FBdkI7O0FBQ0EsZ0JBQUk1bEIsZ0JBQUosRUFBc0I7QUFDckIsa0JBQUlBLGdCQUFnQixDQUFDNWIsS0FBakIsSUFBMEIsT0FBOUIsRUFBdUM7QUFDdEM7QUFDQTs7QUFDRCxrQkFBSXVtQixXQUFXLEdBQUczSyxnQkFBZ0IsQ0FBQzJLLFdBQWpCLElBQWdDLEVBQWxEO0FBRUEzSyw4QkFBZ0IsQ0FBQ29MLE9BQWpCLEdBQTJCLElBQUkzcEIsSUFBSixFQUEzQjtBQUNBdWUsOEJBQWdCLENBQUNxTCxVQUFqQixHQUE4QnZZLE1BQTlCO0FBQ0Esa0JBQUkreUIsMkJBQTJCLEdBQUdwcEMsRUFBRSxDQUFDNnVCLGlCQUFILENBQXFCQyxNQUFyQixDQUE0QnZMLGdCQUE1QixDQUFsQzs7QUFDQSxrQkFBSTZsQiwyQkFBSixFQUFpQztBQUNoQ3BwQyxrQkFBRSxDQUFDa2QsU0FBSCxDQUFhNlIsTUFBYixDQUFvQjtBQUNuQjV1QixxQkFBRyxFQUFFZ3BDO0FBRGMsaUJBQXBCLEVBRGdDLENBS2hDOztBQUNBdm9DLGlCQUFDLENBQUNxYixJQUFGLENBQU9pUyxXQUFQLEVBQW9CLFVBQVVlLElBQVYsRUFBZ0I7QUFDbkNDLDZCQUFXLENBQUNDLDJCQUFaLENBQXdDLGNBQXhDLEVBQXdERixJQUF4RDtBQUNBLGlCQUZEO0FBR0E7O0FBRUR3SyxxQkFBTyxDQUFDLHVCQUF1QjNFLEdBQXZCLEdBQTZCLFFBQTlCLENBQVAsR0FBaUQsWUFBakQ7QUFDQTJFLHFCQUFPLENBQUMsdUJBQXVCM0UsR0FBdkIsR0FBNkIsY0FBOUIsQ0FBUCxHQUF1RCxJQUF2RDtBQUNBMkUscUJBQU8sQ0FBQyx1QkFBdUIzRSxHQUF2QixHQUE2QixjQUE5QixDQUFQLEdBQXVELElBQUk5dkIsSUFBSixFQUF2RDtBQUNBeTBCLHFCQUFPLENBQUMsdUJBQXVCM0UsR0FBdkIsR0FBNkIsVUFBOUIsQ0FBUCxHQUFtRCxJQUFuRDtBQUNBMkUscUJBQU8sQ0FBQyx1QkFBdUIzRSxHQUF2QixHQUE2QixZQUE5QixDQUFQLEdBQXFELElBQUk5dkIsSUFBSixFQUFyRDtBQUNBOztBQUVEdWtDLGtCQUFNLEdBQUcsSUFBVDtBQUNBO0FBQ0QsU0FqQ0Q7O0FBbUNBLFlBQUksQ0FBQ0EsTUFBTCxFQUNDO0FBRUQ5UCxlQUFPLENBQUM1SCxRQUFSLEdBQW1CLElBQUk3c0IsSUFBSixFQUFuQjtBQUNBeTBCLGVBQU8sQ0FBQzNILFdBQVIsR0FBc0J6YixNQUF0QjtBQUVBclcsVUFBRSxDQUFDa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUNuQjl4QixhQUFHLEVBQUV1a0IsV0FEYztBQUVuQix3QkFBY3p2QixDQUFDLENBQUNrTDtBQUZHLFNBQXBCLEVBR0c7QUFDRit4QixjQUFJLEVBQUV1SDtBQURKLFNBSEg7QUFNQTtBQUNELEtBcEREOztBQXNEQSxXQUFPLElBQVA7QUFDQTtBQTNKYSxDQUFmLEU7Ozs7Ozs7Ozs7O0FDQUE3NUIsTUFBTSxDQUFDc21DLE9BQVAsQ0FBZTtBQUNYc0Qsc0JBQW9CLEVBQUUsVUFBVUMsT0FBVixFQUFtQjtBQUNyQzNRLFNBQUssQ0FBQzJRLE9BQUQsRUFBVWw3QyxNQUFWLENBQUw7QUFDQTB1QixPQUFHLENBQUNDLFNBQUosQ0FBYzZSLE1BQWQsQ0FBcUIwYSxPQUFyQjtBQUNBLFdBQU8sSUFBUDtBQUNILEdBTFU7QUFPWEMsMkJBQXlCLEVBQUUsVUFBVUQsT0FBVixFQUFtQjtBQUMxQzNRLFNBQUssQ0FBQzJRLE9BQUQsRUFBVWw3QyxNQUFWLENBQUw7QUFDQTB1QixPQUFHLENBQUNDLFNBQUosQ0FBYytVLE1BQWQsQ0FBcUI7QUFDakI5eEIsU0FBRyxFQUFFc3BDO0FBRFksS0FBckIsRUFFRztBQUNDdlgsVUFBSSxFQUFFO0FBQ0YsNEJBQW9CO0FBRGxCO0FBRFAsS0FGSDtBQU9BLFdBQU8sSUFBUDtBQUNILEdBakJVO0FBbUJYeVgsb0JBQWtCLEVBQUUsVUFBVUYsT0FBVixFQUFtQnRYLE9BQW5CLEVBQTRCaEIsU0FBNUIsRUFBdUM7QUFDdkRsVSxPQUFHLENBQUNDLFNBQUosQ0FBYytVLE1BQWQsQ0FBcUI7QUFDakI5eEIsU0FBRyxFQUFFc3BDO0FBRFksS0FBckIsRUFFRztBQUNDdlgsVUFBSSxFQUFFO0FBQ0YsOEJBQXNCQyxPQURwQjtBQUVGLG1DQUEyQmhCLFNBRnpCO0FBR0YsZ0NBQXdCLElBQUluc0IsSUFBSjtBQUh0QjtBQURQLEtBRkg7QUFTQSxXQUFPLElBQVA7QUFDSCxHQTlCVTtBQWdDWDRrQyxzQkFBb0IsRUFBRSxVQUFVSCxPQUFWLEVBQW1CO0FBQ3JDeHNCLE9BQUcsQ0FBQ0MsU0FBSixDQUFjK1UsTUFBZCxDQUFxQjtBQUNqQjl4QixTQUFHLEVBQUVzcEM7QUFEWSxLQUFyQixFQUVHO0FBQ0NwVSxZQUFNLEVBQUU7QUFDSiw4QkFBc0IsRUFEbEI7QUFFSixtQ0FBMkIsRUFGdkI7QUFHSixnQ0FBd0I7QUFIcEI7QUFEVCxLQUZIO0FBU0EsV0FBTyxJQUFQO0FBQ0gsR0EzQ1U7QUE2Q1h3VSw2Q0FBMkMsRUFBRSxVQUFVcmhCLE9BQVYsRUFBbUJzaEIsWUFBbkIsRUFBaUM7QUFDMUUsUUFBSSxDQUFDLEtBQUt6ekIsTUFBVixFQUNJLE9BQU8sU0FBUDtBQUVKLFFBQUl6VyxNQUFNLENBQUN5bEIsS0FBUCxDQUFhbEksSUFBYixDQUFrQjtBQUNkaGQsU0FBRyxFQUFFLEtBQUtrVyxNQURJO0FBRWQwekIsbUJBQWEsRUFBRTtBQUZELEtBQWxCLEVBR0czc0IsS0FISCxLQUdhLENBSGpCLEVBSUksT0FBTyxTQUFQO0FBRUowYixTQUFLLENBQUN0USxPQUFELEVBQVVqNkIsTUFBVixDQUFMO0FBRUEsUUFBSXk3QyxLQUFLLEdBQUcsV0FBWjs7QUFDQSxRQUFJQyxFQUFFLEdBQUdsVCxPQUFPLENBQUMsSUFBRCxDQUFoQjs7QUFDQSxRQUFJeG1DLElBQUksR0FBR3dtQyxPQUFPLENBQUMsTUFBRCxDQUFsQjs7QUFDQSxRQUFJenFDLE1BQU0sR0FBR3lxQyxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxRQUFJaGtDLFFBQVEsR0FBR3hDLElBQUksQ0FBQzRELElBQUwsQ0FBVSsxQyxvQkFBb0IsQ0FBQ0MsU0FBL0IsRUFBMEMsdUNBQTFDLENBQWYsQ0FoQjBFLENBaUIxRTs7QUFDQSxRQUFJQyxZQUFZLEdBQUc3NUMsSUFBSSxDQUFDODVDLE9BQUwsQ0FBYXQzQyxRQUFiLENBQW5CLENBbEIwRSxDQW1CMUU7O0FBQ0F6RyxVQUFNLENBQUNnK0MsSUFBUCxDQUFZRixZQUFaO0FBQ0E1cEMsV0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQVosRUFBOEIycEMsWUFBOUI7QUFDQTVwQyxXQUFPLENBQUMrcEMsSUFBUixDQUFhLDZDQUFiO0FBQ0EsUUFBSS81QyxLQUFLLEdBQUc7QUFDUix3QkFBa0JnNEI7QUFEVixLQUFaOztBQUdBLFFBQUlzaEIsWUFBSixFQUFrQjtBQUNkdDVDLFdBQUssQ0FBQzJQLEdBQU4sR0FBWTtBQUNScWUsV0FBRyxFQUFFc3JCO0FBREcsT0FBWjtBQUdIOztBQUNELFFBQUlVLHVCQUF1QixHQUFHLEVBQTlCO0FBQ0F2dEIsT0FBRyxDQUFDQyxTQUFKLENBQWNDLElBQWQsQ0FBbUIzc0IsS0FBbkIsRUFBMEI2UCxPQUExQixDQUFrQyxVQUFVMU0sQ0FBVixFQUFhO0FBQzNDLFVBQUk7QUFDQSxZQUFJcWlDLFFBQVEsR0FBR2dVLEtBQUssR0FBRyxHQUFSLEdBQWNyMkMsQ0FBQyxDQUFDd00sR0FBaEIsR0FBc0IsR0FBdEIsR0FBNEJ4TSxDQUFDLENBQUNpQyxJQUFGLEVBQTNDO0FBQ0EsWUFBSTYwQyxRQUFRLEdBQUdsNkMsSUFBSSxDQUFDNEQsSUFBTCxDQUFVaTJDLFlBQVYsRUFBd0JwVSxRQUF4QixDQUFmO0FBQ0FwMkIsY0FBTSxDQUFDOHFDLFNBQVAsQ0FBaUIsVUFBVXh6QyxRQUFWLEVBQW9CO0FBQ2pDLGNBQUk7QUFDQSxnQkFBSXl6QyxNQUFNLEdBQUdWLEVBQUUsQ0FBQ1csaUJBQUgsQ0FBcUJILFFBQXJCLENBQWI7QUFDQUUsa0JBQU0sQ0FBQy9qQixFQUFQLENBQVUsUUFBVixFQUFvQixZQUFZO0FBQzVCLGtCQUFJMXZCLFFBQVEsSUFBSTBKLENBQUMsQ0FBQ2lxQyxVQUFGLENBQWEzekMsUUFBYixDQUFoQixFQUNJQSxRQUFRO0FBQ1o7QUFDSCxhQUpEO0FBS0EsZ0JBQUk0ekMsTUFBTSxHQUFHbjNDLENBQUMsQ0FBQ2lwQyxnQkFBRixDQUFtQm9OLEtBQW5CLENBQWI7QUFDQWMsa0JBQU0sQ0FBQ2xrQixFQUFQLENBQVUsT0FBVixFQUFtQixVQUFVbGlCLEtBQVYsRUFBaUI7QUFDaEM4bEMscUNBQXVCLENBQUMzMEMsSUFBeEIsQ0FBNkJsQyxDQUFDLENBQUN3TSxHQUEvQjtBQUNBSyxxQkFBTyxDQUFDa0UsS0FBUixDQUFjLCtDQUFkLEVBQStEL1EsQ0FBQyxDQUFDd00sR0FBakU7QUFDQUsscUJBQU8sQ0FBQ2tFLEtBQVIsQ0FBY0EsS0FBSyxDQUFDcW1CLEtBQXBCO0FBQ0Esa0JBQUk3ekIsUUFBUSxJQUFJMEosQ0FBQyxDQUFDaXFDLFVBQUYsQ0FBYTN6QyxRQUFiLENBQWhCLEVBQ0lBLFFBQVE7QUFDWjtBQUNILGFBUEQ7QUFRQTR6QyxrQkFBTSxDQUFDQyxJQUFQLENBQVlKLE1BQVo7QUFDSCxXQWpCRCxDQWlCRSxPQUFPam1DLEtBQVAsRUFBYztBQUNabEUsbUJBQU8sQ0FBQ2tFLEtBQVIsQ0FBYywrQ0FBZCxFQUErRC9RLENBQUMsQ0FBQ3dNLEdBQWpFO0FBQ0FLLG1CQUFPLENBQUNrRSxLQUFSLENBQWNBLEtBQUssQ0FBQ3FtQixLQUFwQjtBQUNBLGdCQUFJN3pCLFFBQVEsSUFBSTBKLENBQUMsQ0FBQ2lxQyxVQUFGLENBQWEzekMsUUFBYixDQUFoQixFQUNJQSxRQUFRO0FBQ1o7QUFDSDtBQUNKLFNBekJEO0FBMkJILE9BOUJELENBOEJFLE9BQU93TixLQUFQLEVBQWM7QUFDWmxFLGVBQU8sQ0FBQ2tFLEtBQVIsQ0FBYywrQ0FBZCxFQUErRC9RLENBQUMsQ0FBQ3dNLEdBQWpFO0FBQ0FLLGVBQU8sQ0FBQ2tFLEtBQVIsQ0FBY0EsS0FBSyxDQUFDcW1CLEtBQXBCO0FBQ0g7QUFFSixLQXBDRDs7QUFzQ0EsUUFBSXlmLHVCQUF1QixDQUFDbjlDLE1BQXhCLEdBQWlDLENBQXJDLEVBQXdDO0FBQ3BDbVQsYUFBTyxDQUFDa0UsS0FBUixDQUFjLDJCQUFkO0FBQ0FsRSxhQUFPLENBQUNrRSxLQUFSLENBQWM4bEMsdUJBQWQ7QUFDSDs7QUFFRGhxQyxXQUFPLENBQUN3cUMsT0FBUixDQUFnQiw2Q0FBaEI7QUFFQSxXQUFPUix1QkFBUDtBQUNIO0FBM0hVLENBQWYsRTs7Ozs7Ozs7Ozs7O0FDQUE1cUMsT0FBT3NtQyxPQUFQLENBQ0M7QUFBQStFLHlCQUF1QixVQUFDcjhCLFVBQUQsRUFBYWlYLE9BQWIsRUFBc0I3RSxTQUF0QjtBQUN0QixRQUFBcGIsUUFBQSxFQUFBckYsR0FBQSxFQUFBMnFDLElBQUEsRUFBQTVhLE1BQUEsRUFBQTNrQixLQUFBOztBQUFBLFFBQUcsQ0FBQyxLQUFLMEssTUFBVDtBQUNDO0FDRUU7O0FEQUg2MEIsV0FBTyxJQUFQO0FBRUF0bEMsZUFBVzVGLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCO0FBQUVDLFdBQUt5TyxVQUFQO0FBQW1CLG9CQUFjaVg7QUFBakMsS0FBckIsRUFBaUU7QUFBRW5tQixjQUFRO0FBQUUsb0JBQVk7QUFBZDtBQUFWLEtBQWpFLENBQVg7O0FBRUEsU0FBQWtHLFlBQUEsUUFBQXJGLE1BQUFxRixTQUFBNkQsTUFBQSxZQUFBbEosSUFBcUJsVCxNQUFyQixHQUFxQixNQUFyQixHQUFxQixNQUFyQixJQUE4QixDQUE5QjtBQUNDc2UsY0FBUS9GLFNBQVM2RCxNQUFULENBQWdCLENBQWhCLENBQVI7QUFDQTZtQixlQUFTO0FBQ1J1QixrQkFBVSxJQUFJN3NCLElBQUosRUFERjtBQUVSOHNCLHFCQUFhb1osS0FBSzcwQjtBQUZWLE9BQVQ7QUFJQTFLLFlBQU11TCxRQUFOLENBQWU3VyxPQUFmLENBQXVCLFVBQUNnWCxPQUFELEVBQVV5ZCxHQUFWO0FBQ3RCLFlBQUd6ZCxRQUFRbFgsR0FBUixLQUFlNmdCLFNBQWYsSUFBNEIsQ0FBQzNKLFFBQVFRLE9BQXhDO0FBQ0N5WSxpQkFBTyx1QkFBcUJ3RSxHQUFyQixHQUF5QixVQUFoQyxJQUE2QyxJQUE3QztBQ09LLGlCRE5MeEUsT0FBTyx1QkFBcUJ3RSxHQUFyQixHQUF5QixZQUFoQyxJQUErQyxJQUFJOXZCLElBQUosRUNNMUM7QUFDRDtBRFZOOztBQUtBLFVBQUcsQ0FBSXBFLEVBQUU0TCxPQUFGLENBQVU4akIsTUFBVixDQUFQO0FBQ0N0d0IsV0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsZUFBS3lPLFVBRGM7QUFFbkIsd0JBQWNpWDtBQUZLLFNBQXBCLEVBR0c7QUFDRnFNLGdCQUFNNUI7QUFESixTQUhIO0FDYUc7O0FEUEosYUFBTyxJQUFQO0FDU0U7QURuQ0o7QUE0QkE2YSx1QkFBcUIsVUFBQ3Y4QixVQUFELEVBQWFpWCxPQUFiLEVBQXNCN0UsU0FBdEIsRUFBaUNyVSxXQUFqQyxFQUE4QytLLFdBQTlDO0FBQ3BCLFFBQUE5UixRQUFBLEVBQUFyRixHQUFBLEVBQUErdkIsTUFBQSxFQUFBM2tCLEtBQUE7O0FBQUEsUUFBRyxDQUFDLEtBQUswSyxNQUFUO0FBQ0M7QUNXRTs7QURWSHlpQixVQUFNbHFCLFVBQU4sRUFBa0JyZ0IsTUFBbEI7QUFDQXVxQyxVQUFNalQsT0FBTixFQUFldDNCLE1BQWY7QUFDQXVxQyxVQUFNOVgsU0FBTixFQUFpQnp5QixNQUFqQjtBQUNBdXFDLFVBQU1uc0IsV0FBTixFQUFtQnBlLE1BQW5CO0FBQ0F1cUMsVUFBTXBoQixXQUFOLEVBQW1CMVMsSUFBbkI7QUFFQVksZUFBVzVGLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCO0FBQUVDLFdBQUt5TyxVQUFQO0FBQW1CLG9CQUFjaVg7QUFBakMsS0FBckIsRUFBaUU7QUFBRW5tQixjQUFRO0FBQUUsb0JBQVk7QUFBZDtBQUFWLEtBQWpFLENBQVg7O0FBRUEsU0FBQWtHLFlBQUEsUUFBQXJGLE1BQUFxRixTQUFBNkQsTUFBQSxZQUFBbEosSUFBcUJsVCxNQUFyQixHQUFxQixNQUFyQixHQUFxQixNQUFyQixJQUE4QixDQUE5QjtBQUNDc2UsY0FBUS9GLFNBQVM2RCxNQUFULENBQWdCLENBQWhCLENBQVI7QUFDQTZtQixlQUFTLEVBQVQ7QUFDQTNrQixZQUFNdUwsUUFBTixDQUFlN1csT0FBZixDQUF1QixVQUFDZ1gsT0FBRCxFQUFVeWQsR0FBVjtBQUN0QixZQUFHemQsUUFBUWxYLEdBQVIsS0FBZTZnQixTQUFsQjtBQUNDc1AsaUJBQU8sdUJBQXFCd0UsR0FBckIsR0FBeUIsY0FBaEMsSUFBaURub0IsV0FBakQ7QUFDQTJqQixpQkFBTyx1QkFBcUJ3RSxHQUFyQixHQUF5QixjQUFoQyxJQUFpRHBkLFdBQWpEO0FBQ0E0WSxpQkFBTyx1QkFBcUJ3RSxHQUFyQixHQUF5QixZQUFoQyxJQUErQyxJQUFJOXZCLElBQUosS0FBYXFTLFFBQVFnYSxVQUFwRTtBQ2lCSyxpQkRoQkxmLE9BQU8sdUJBQXFCd0UsR0FBckIsR0FBeUIsWUFBaEMsSUFBK0MsSUFBSTl2QixJQUFKLEVDZ0IxQztBQUNEO0FEdEJOOztBQU9BLFVBQUcsQ0FBSXBFLEVBQUU0TCxPQUFGLENBQVU4akIsTUFBVixDQUFQO0FBQ0N0d0IsV0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsZUFBS3lPLFVBRGM7QUFFbkIsd0JBQWNpWDtBQUZLLFNBQXBCLEVBR0c7QUFDRnFNLGdCQUFNNUI7QUFESixTQUhIO0FDdUJHOztBRGpCSixhQUFPLElBQVA7QUNtQkU7QUQzRUo7QUEwREE4YSx1QkFBcUIsVUFBQ3g4QixVQUFELEVBQWFpWCxPQUFiLEVBQXNCN0UsU0FBdEIsRUFBaUNwSixlQUFqQyxFQUFrRGpMLFdBQWxELEVBQStEMCtCLFNBQS9ELEVBQTBFQyxlQUExRTtBQUNwQixRQUFBMWxDLFFBQUEsRUFBQTJsQyxTQUFBLEVBQUFockMsR0FBQSxFQUFBaXJDLGNBQUEsRUFBQWxiLE1BQUEsRUFBQTNrQixLQUFBLEVBQUE4L0IsS0FBQTtBQUFBM1MsVUFBTWxxQixVQUFOLEVBQWtCcmdCLE1BQWxCO0FBQ0F1cUMsVUFBTWpULE9BQU4sRUFBZXQzQixNQUFmO0FBQ0F1cUMsVUFBTTlYLFNBQU4sRUFBaUJ6eUIsTUFBakI7QUFDQXVxQyxVQUFNbGhCLGVBQU4sRUFBdUJycEIsTUFBdkI7QUFDQXVxQyxVQUFNbnNCLFdBQU4sRUFBbUJwZSxNQUFuQjs7QUFFQSxRQUFHLENBQUMsS0FBSzhuQixNQUFUO0FBQ0M7QUNvQkU7O0FEbEJIbTFCLHFCQUFpQixLQUFLbjFCLE1BQXRCOztBQUVBLFFBQUdpMUIsZUFBSDtBQUVDLFVBQUdBLGdCQUFnQkksZ0JBQW5CO0FBQ0M7QUNrQkc7O0FEaEJKOWxDLGlCQUFXNUYsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFDL0JDLGFBQUt5TyxVQUQwQjtBQUUvQixzQkFBYzA4QixnQkFBZ0IzL0I7QUFGQyxPQUFyQixFQUdSO0FBQUVqTSxnQkFBUTtBQUFFLHNCQUFZO0FBQWQ7QUFBVixPQUhRLENBQVg7QUFLQTZyQyxrQkFBWTNxQyxFQUFFdWMsSUFBRixDQUFBdlgsWUFBQSxPQUFPQSxTQUFVNkQsTUFBakIsR0FBaUIsTUFBakIsRUFBeUIsVUFBQ3hVLENBQUQ7QUFDcEMsZUFBT0EsRUFBRWtMLEdBQUYsR0FBUW1yQyxnQkFBZ0IzL0IsS0FBL0I7QUFEVyxRQUFaOztBQUdBLFVBQUc0L0IsU0FBSDtBQUNDamIsaUJBQVMsRUFBVDs7QUNxQkksWUFBSWliLGFBQWEsSUFBakIsRUFBdUI7QURwQjNCQSxvQkFBV3IwQixRQUFYLENBQW9CN1csT0FBcEIsQ0FBNEIsVUFBQytPLENBQUQsRUFBSTBsQixHQUFKO0FBQzNCLGdCQUFHMWxCLEVBQUVqUCxHQUFGLEtBQVNtckMsZ0JBQWdCbnJDLEdBQTVCO0FBQ0Msa0JBQUdrckMsY0FBYSxRQUFoQjtBQUNDL2EsdUJBQU8sdUJBQXFCd0UsR0FBckIsR0FBeUIsWUFBaEMsSUFBK0MsS0FBL0M7QUFDQXhFLHVCQUFPLHVCQUFxQndFLEdBQXJCLEdBQXlCLFdBQWhDLElBQThDLElBQUk5dkIsSUFBSixFQUE5QztBQ3NCUyx1QkRyQlRzckIsT0FBTyx1QkFBcUJ3RSxHQUFyQixHQUF5QixjQUFoQyxJQUFpRDBXLGNDcUJ4QztBRHpCWDtBQzJCUTtBRDVCVDtBQzhCSzs7QUR2QkwsWUFBRyxDQUFJNXFDLEVBQUU0TCxPQUFGLENBQVU4akIsTUFBVixDQUFQO0FBQ0N0d0IsYUFBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsaUJBQUt5TyxVQURjO0FBRW5CLDBCQUFjMjhCLFVBQVVwckM7QUFGTCxXQUFwQixFQUdHO0FBQ0YreEIsa0JBQU01QjtBQURKLFdBSEg7QUFWRjtBQWJEO0FDdURHOztBRHpCSDFxQixlQUFXNUYsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBRUMsV0FBS3lPLFVBQVA7QUFBbUIsb0JBQWNpWDtBQUFqQyxLQUFyQixFQUFpRTtBQUFFbm1CLGNBQVE7QUFBRSxvQkFBWTtBQUFkO0FBQVYsS0FBakUsQ0FBWDs7QUFFQSxTQUFBa0csWUFBQSxRQUFBckYsTUFBQXFGLFNBQUE2RCxNQUFBLFlBQUFsSixJQUFxQmxULE1BQXJCLEdBQXFCLE1BQXJCLEdBQXFCLE1BQXJCLElBQThCLENBQTlCO0FBRUNzZSxjQUFRL0YsU0FBUzZELE1BQVQsQ0FBZ0IsQ0FBaEIsQ0FBUjtBQUNBZ2lDLGNBQVEsRUFBUjtBQUNBOS9CLFlBQU11TCxRQUFOLENBQWU3VyxPQUFmLENBQXVCLFVBQUNnWCxPQUFELEVBQVV5ZCxHQUFWO0FBQ3RCLFlBQUd6ZCxRQUFRbFgsR0FBUixLQUFlNmdCLFNBQWxCO0FBQ0MsY0FBR3BKLGVBQUg7QUFDQzZ6QixrQkFBTSx1QkFBcUIzVyxHQUFyQixHQUF5QixrQkFBL0IsSUFBb0RsZCxlQUFwRDtBQ2dDSzs7QUQvQk42ekIsZ0JBQU0sdUJBQXFCM1csR0FBckIsR0FBeUIsY0FBL0IsSUFBZ0Rub0IsV0FBaEQ7QUFDQTgrQixnQkFBTSx1QkFBcUIzVyxHQUFyQixHQUF5QixZQUEvQixJQUE4QyxJQUE5QztBQUNBMlcsZ0JBQU0sdUJBQXFCM1csR0FBckIsR0FBeUIsV0FBL0IsSUFBNkMsSUFBSTl2QixJQUFKLEVBQTdDO0FBQ0F5bUMsZ0JBQU0sdUJBQXFCM1csR0FBckIsR0FBeUIsY0FBL0IsSUFBZ0QwVyxjQUFoRDtBQ2lDSyxpQkRoQ0xDLE1BQU0sdUJBQXFCM1csR0FBckIsR0FBeUIsWUFBL0IsSUFBOEMsSUFBSTl2QixJQUFKLEVDZ0N6QztBQUNEO0FEekNOOztBQVVBLFVBQUcsQ0FBSXBFLEVBQUU0TCxPQUFGLENBQVVpL0IsS0FBVixDQUFQO0FBQ0N6ckMsV0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFDbkI5eEIsZUFBS3lPLFVBRGM7QUFFbkIsd0JBQWNpWDtBQUZLLFNBQXBCLEVBR0c7QUFDRnFNLGdCQUFNdVo7QUFESixTQUhIO0FDdUNHOztBRGpDSixhQUFPLElBQVA7QUNtQ0U7QUQ5Sko7QUE4SEFFLG9CQUFrQixVQUFDQyxJQUFELEVBQU9DLFlBQVA7QUFDakJELFNBQUt2ckMsT0FBTCxDQUFhLFVBQUN6UixHQUFELEVBQU04SSxLQUFOO0FBQ1osVUFBQWtPLFFBQUEsRUFBQXJGLEdBQUEsRUFBQSt2QixNQUFBLEVBQUEza0IsS0FBQTtBQUFBL0YsaUJBQVc1RixHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFFQyxhQUFLdlIsSUFBSWdYLFFBQVg7QUFBcUIsc0JBQWNoWCxJQUFJK2M7QUFBdkMsT0FBckIsRUFBcUU7QUFBRWpNLGdCQUFRO0FBQUUsc0JBQVk7QUFBZDtBQUFWLE9BQXJFLENBQVg7O0FBQ0EsV0FBQWtHLFlBQUEsUUFBQXJGLE1BQUFxRixTQUFBNkQsTUFBQSxZQUFBbEosSUFBcUJsVCxNQUFyQixHQUFxQixNQUFyQixHQUFxQixNQUFyQixJQUE4QixDQUE5QjtBQUNDc2UsZ0JBQVEvRixTQUFTNkQsTUFBVCxDQUFnQixDQUFoQixDQUFSO0FBQ0E2bUIsaUJBQVMsRUFBVDtBQUNBM2tCLGNBQU11TCxRQUFOLENBQWU3VyxPQUFmLENBQXVCLFVBQUNnWCxPQUFELEVBQVV5ZCxHQUFWO0FBQ3RCLGNBQUd6ZCxRQUFRbFgsR0FBUixLQUFldlIsSUFBSXVSLEdBQXRCO0FBQ0Ntd0IsbUJBQU8sdUJBQXFCd0UsR0FBckIsR0FBeUIsWUFBaEMsSUFBK0NsbUMsSUFBSWtwQixTQUFuRDtBQUNBd1ksbUJBQU8sdUJBQXFCd0UsR0FBckIsR0FBeUIsbUJBQWhDLElBQXNEbG1DLElBQUlrcEIsU0FBMUQ7QUFDQXdZLG1CQUFPLHVCQUFxQndFLEdBQXJCLEdBQXlCLFlBQWhDLElBQStDLElBQUk5dkIsSUFBSixFQUEvQztBQzJDSzs7QUR6Q04sY0FBR3FTLFFBQVFsWCxHQUFSLEtBQWUwckMsWUFBbEI7QUMyQ08sbUJEMUNOdmIsT0FBTyx1QkFBcUJ3RSxHQUFyQixHQUF5QixZQUFoQyxJQUErQyxJQUFJOXZCLElBQUosRUMwQ3pDO0FBQ0Q7QURsRFA7O0FBU0EsWUFBRyxDQUFJcEUsRUFBRTRMLE9BQUYsQ0FBVThqQixNQUFWLENBQVA7QUM0Q00saUJEM0NMdHdCLEdBQUdrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQ25COXhCLGlCQUFLdlIsSUFBSWdYLFFBRFU7QUFFbkIsMEJBQWNoWCxJQUFJK2M7QUFGQyxXQUFwQixFQUdHO0FBQ0Z1bUIsa0JBQU01QjtBQURKLFdBSEgsQ0MyQ0s7QUR4RFA7QUMrREk7QURqRUw7QUFzQkEsV0FBTyxJQUFQO0FBckpEO0FBQUEsQ0FERCxFOzs7Ozs7Ozs7Ozs7QUVBQTF3QixPQUFPc21DLE9BQVAsQ0FDQztBQUFBNEYsbUJBQWlCLFVBQUN6MEIsT0FBRCxFQUFVZ0YsTUFBVjtBQUNoQixRQUFBMHZCLGNBQUEsRUFBQTE4QixDQUFBLEVBQUEwTixZQUFBLEVBQUFzTyxZQUFBLEVBQUFDLGlCQUFBLEVBQUFwbEIsSUFBQSxFQUFBd0osR0FBQSxFQUFBOUosUUFBQSxFQUFBOGUsV0FBQSxFQUFBaU8sVUFBQSxFQUFBekMsUUFBQSxFQUFBMkMsZUFBQSxFQUFBNVIsR0FBQSxFQUFBK3FCLFFBQUEsRUFBQUMsU0FBQSxFQUFBMWMsQ0FBQSxFQUFBMmMsa0JBQUEsRUFBQTViLE1BQUEsRUFBQWxDLFFBQUEsRUFBQTNrQixNQUFBO0FBQUFxdkIsVUFBTXpoQixPQUFOLEVBQWVycEIsTUFBZjtBQUVBcTlCLG1CQUFlLEtBQUtoVixNQUFwQjtBQUNBcU8sa0JBQWNyTixRQUFRelIsUUFBdEI7QUFFQThKLFVBQU01UCxjQUFjeU8sV0FBZCxDQUEwQm1XLFdBQTFCLENBQU47QUFDQTBKLGVBQVcxZSxJQUFJdEksS0FBZjs7QUFHQSxRQUFHc0ksSUFBSS9ILEtBQUosS0FBZSxTQUFmLElBQTRCLENBQUMrSCxJQUFJd2UsV0FBSixDQUFnQmpnQixRQUFoQixDQUF5Qm9kLFlBQXpCLENBQWhDO0FBQ0MsWUFBTSxJQUFJenJCLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLFNBQTNCLENBQU47QUNGRTs7QURLSCxRQUFHNmIsUUFBUWxsQixJQUFSLEtBQWdCLElBQWhCLElBQXlCdWQsSUFBSXNlLFFBQUosQ0FBYS9mLFFBQWIsQ0FBc0JvZCxZQUF0QixDQUE1QjtBQUNDLFlBQU0sSUFBSXpyQixPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixTQUEzQixDQUFOO0FDSEU7O0FETUgsUUFBR2tVLElBQUlqRyxNQUFKLENBQVdwYyxNQUFYLEdBQW9CLENBQXZCO0FBQ0MsWUFBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQ0pFOztBREtIMEssV0FBT3BHLGNBQWM4ZCxPQUFkLENBQXNCbE8sSUFBSXhKLElBQTFCLENBQVA7QUFDQStsQyxnQkFBWXY4QixJQUFJakcsTUFBSixDQUFXaUcsSUFBSWpHLE1BQUosQ0FBV3BjLE1BQVgsR0FBb0IsQ0FBL0IsQ0FBWjtBQUNBMitDLGVBQVdsc0MsY0FBYzIwQixPQUFkLENBQXNCL2tCLEdBQXRCLEVBQTJCeEosSUFBM0IsRUFBaUMrbEMsVUFBVTcwQixJQUEzQyxDQUFYOztBQUNBLFFBQUc0MEIsU0FBU3R1QixTQUFULEtBQXNCLGFBQXpCO0FBQ0MsWUFBTSxJQUFJOWQsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQ0hFOztBRE1IbTNCLGlCQUFhL3hCLEVBQUV5ZixJQUFGLENBQU8zUSxJQUFJakcsTUFBWCxDQUFiO0FBQ0FzVCxtQkFBZWpkLGNBQWMyMEIsT0FBZCxDQUFzQi9rQixHQUF0QixFQUEyQnhKLElBQTNCLEVBQWlDeXNCLFdBQVd2YixJQUE1QyxDQUFmOztBQUNBLFFBQUcyRixhQUFhVyxTQUFiLEtBQTRCLFFBQTVCLElBQXlDWCxhQUFhVyxTQUFiLEtBQTRCLE1BQXJFLElBQWdGWCxhQUFhVyxTQUFiLEtBQTRCLGFBQS9HO0FBQ0MsWUFBTSxJQUFJOWQsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQ0pFOztBRE9ILFFBQUc2YixRQUFRMUwsS0FBUixLQUFtQmduQixXQUFXeHlCLEdBQWpDO0FBQ0MsWUFBTSxJQUFJUCxPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixTQUEzQixDQUFOO0FDTEU7O0FET0hxM0Isc0JBQWtCLElBQUlsekIsS0FBSixFQUFsQjs7QUFDQWlCLE1BQUVxYixJQUFGLENBQU9nd0IsVUFBVS8wQixRQUFqQixFQUEyQixVQUFDOUgsQ0FBRDtBQUMxQixVQUFHLENBQUMsQ0FBQ0EsRUFBRWpkLElBQUgsSUFBV2lkLEVBQUVqZCxJQUFGLEtBQVUsT0FBckIsSUFBZ0NpZCxFQUFFamQsSUFBRixLQUFVLFVBQTNDLE1BQTRELENBQUNpZCxFQUFFTyxLQUFILElBQVlQLEVBQUVPLEtBQUYsS0FBVyxXQUF2QixJQUFzQ1AsRUFBRU8sS0FBRixLQUFXLFVBQWpELElBQStEUCxFQUFFTyxLQUFGLEtBQVcsVUFBdEksQ0FBSDtBQ0xLLGVETUprakIsZ0JBQWdCaDlCLElBQWhCLENBQXFCdVosRUFBRTVJLElBQXZCLENDTkk7QUFDRDtBREdMOztBQUlBLFFBQUc1RixFQUFFNEwsT0FBRixDQUFVcW1CLGVBQVYsQ0FBSDtBQUNDLFlBQU0sSUFBSWp6QixPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixnQkFBM0IsQ0FBTjtBQ0pFOztBRE1IaU8sYUFBU2lHLElBQUlqRyxNQUFiO0FBRUFzaUMscUJBQWlCanNDLGNBQWNpb0MsZ0JBQWQsQ0FBK0Ixd0IsUUFBUS9GLE1BQVIsSUFBa0IsRUFBakQsRUFBcUR5TCxhQUFhOVYsV0FBbEUsRUFBK0V5SSxJQUFJcFEsSUFBbkYsRUFBeUZvUSxJQUFJblEsWUFBN0YsQ0FBakI7QUFFQSt3QixhQUFTLElBQUl0aUMsTUFBSixFQUFUO0FBQ0FpekIsVUFBTSxJQUFJamMsSUFBSixFQUFOO0FBQ0FrbkMseUJBQXFCLElBQUl2c0MsS0FBSixFQUFyQjs7QUFDQWlCLE1BQUVxYixJQUFGLENBQU94UyxNQUFQLEVBQWUsVUFBQ3hVLENBQUQ7QUFDZCxVQUFHQSxFQUFFa0wsR0FBRixLQUFTd3lCLFdBQVd4eUIsR0FBdkI7QUFDQyxZQUFHLENBQUlsTCxFQUFFaWlCLFFBQVQ7QUFDQ2ppQixZQUFFaWlCLFFBQUYsR0FBYSxJQUFJdlgsS0FBSixFQUFiO0FDTkk7O0FET0xpQixVQUFFcWIsSUFBRixDQUFPaG5CLEVBQUVpaUIsUUFBVCxFQUFtQixVQUFDOUgsQ0FBRCxFQUFJMGxCLEdBQUo7QUFDbEIsY0FBRyxDQUFDLENBQUMxbEIsRUFBRWpkLElBQUgsSUFBV2lkLEVBQUVqZCxJQUFGLEtBQVUsVUFBdEIsTUFBdUMsQ0FBQ2lkLEVBQUVPLEtBQUgsSUFBWVAsRUFBRU8sS0FBRixLQUFXLFdBQXZCLElBQXNDUCxFQUFFTyxLQUFGLEtBQVcsVUFBakQsSUFBK0RQLEVBQUVPLEtBQUYsS0FBVyxVQUExRSxJQUF3RlAsRUFBRU8sS0FBRixLQUFXLFFBQTFJLEtBQXdKUCxFQUFFdUgsV0FBRixLQUFtQixJQUE5SztBQUNDMlosbUJBQU8sdUJBQXVCd0UsR0FBdkIsR0FBNkIsY0FBcEMsSUFBc0Q3VCxHQUF0RDtBQUNBcVAsbUJBQU8sdUJBQXVCd0UsR0FBdkIsR0FBNkIsWUFBcEMsSUFBb0Q3VCxHQUFwRDtBQUNBcVAsbUJBQU8sdUJBQXVCd0UsR0FBdkIsR0FBNkIsV0FBcEMsSUFBbUQsS0FBbkQ7QUFDQXhFLG1CQUFPLHVCQUF1QndFLEdBQXZCLEdBQTZCLFVBQXBDLElBQWtELElBQWxEO0FBQ0F4RSxtQkFBTyx1QkFBdUJ3RSxHQUF2QixHQUE2QixjQUFwQyxJQUFzRCxJQUF0RDtBQUNBeEUsbUJBQU8sdUJBQXVCd0UsR0FBdkIsR0FBNkIsWUFBcEMsSUFBb0Q3VCxNQUFNN1IsRUFBRWlpQixVQUE1RDtBQUNBZixtQkFBTyx1QkFBdUJ3RSxHQUF2QixHQUE2QixTQUFwQyxJQUFpRGlYLGNBQWpEOztBQUNBLGdCQUFHMzhCLEVBQUVzSCxPQUFGLEtBQWEyVSxZQUFoQjtBQUNDaUYscUJBQU8sdUJBQXVCd0UsR0FBdkIsR0FBNkIsUUFBcEMsSUFBZ0QsVUFBaEQ7QUNMTyxxQkRNUHhFLE9BQU8sdUJBQXVCd0UsR0FBdkIsR0FBNkIsY0FBcEMsSUFBc0R6WSxNQ04vQztBRElSO0FDRlEscUJETVA2dkIsbUJBQW1CcjJDLElBQW5CLENBQXdCdVosRUFBRXNILE9BQTFCLENDTk87QUROVDtBQ1FNO0FEVFA7O0FBZ0JBNFosZUFBTyxzQkFBUCxJQUFpQyxJQUFqQztBQUNBQSxlQUFPLHNCQUFQLElBQWlDLElBQWpDO0FDSkksZURLSkEsT0FBTyxnQkFBUCxJQUEyQixVQ0x2QjtBQUNEO0FEbEJMOztBQXdCQTVnQixRQUFJNEIsTUFBSixHQUFhMVEsRUFBRXVuQyxNQUFGLENBQVV6NEIsSUFBSTRCLE1BQUosSUFBYyxFQUF4QixFQUE2Qnk2QixjQUE3QixDQUFiO0FBR0E3YixlQUFXLElBQUlsaUMsTUFBSixFQUFYO0FBQ0FraUMsYUFBUy92QixHQUFULEdBQWUsSUFBSTZ3QixNQUFNQyxRQUFWLEdBQXFCQyxJQUFwQztBQUNBaEIsYUFBU3RxQixRQUFULEdBQW9COGUsV0FBcEI7QUFDQXdMLGFBQVN3QixrQkFBVCxHQUE4QixDQUFDaUIsV0FBV3h5QixHQUFaLENBQTlCO0FBQ0ErdkIsYUFBU3ZaLFdBQVQsR0FBdUIsS0FBdkI7QUFDQXVaLGFBQVM5WSxJQUFULEdBQWdCNjBCLFVBQVU3MEIsSUFBMUI7QUFDQThZLGFBQVN0NkIsSUFBVCxHQUFnQnEyQyxVQUFVcjJDLElBQTFCO0FBQ0FzNkIsYUFBU21CLFVBQVQsR0FBc0JwUSxHQUF0QjtBQUNBaVAsYUFBU29CLFFBQVQsR0FBb0J4eEIsY0FBYzYwQixVQUFkLENBQXlCcVgsU0FBU3BYLGFBQWxDLENBQXBCO0FBQ0ExRSxhQUFTaFosUUFBVCxHQUFvQixFQUFwQjs7QUFDQXRXLE1BQUVxYixJQUFGLENBQU80VyxlQUFQLEVBQXdCLFVBQUNnQyxpQkFBRCxFQUFvQkMsR0FBcEI7QUFFdkIsVUFBQTVCLEtBQUEsRUFBQUMsVUFBQSxFQUFBQyxZQUFBLEVBQUFuRCxVQUFBLEVBQUE4RSxvQkFBQSxFQUFBQyx1QkFBQSxFQUFBQyxTQUFBO0FBQUFoRixtQkFBYSxJQUFJamlDLE1BQUosRUFBYjtBQUNBaWlDLGlCQUFXOXZCLEdBQVgsR0FBaUIsSUFBSTZ3QixNQUFNQyxRQUFWLEdBQXFCQyxJQUF0QztBQUNBakIsaUJBQVdycUIsUUFBWCxHQUFzQjhlLFdBQXRCO0FBQ0F1TCxpQkFBV3RrQixLQUFYLEdBQW1CdWtCLFNBQVMvdkIsR0FBNUI7QUFDQTh2QixpQkFBV3RaLFdBQVgsR0FBeUIsS0FBekI7QUFDQXNaLGlCQUFXenBCLElBQVgsR0FBa0JxdUIsaUJBQWxCO0FBRUFJLGtCQUFZajFCLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUIyMEIsaUJBQWpCLEVBQW9DO0FBQUNuMUIsZ0JBQVE7QUFBQzlKLGdCQUFNO0FBQVA7QUFBVCxPQUFwQyxDQUFaO0FBQ0FxNkIsaUJBQVdrQixTQUFYLEdBQXVCOEQsVUFBVXIvQixJQUFqQztBQUVBdTlCLG1CQUFhMEIsaUJBQWI7QUFDQXpCLHFCQUFlNkIsU0FBZjtBQUNBL0IsY0FBUXB6QixjQUFjMHpCLFFBQWQsQ0FBdUJwRixRQUF2QixFQUFpQ3lHLGlCQUFqQyxDQUFSOztBQUNBLFVBQUczQixLQUFIO0FBQ0NMLHdCQUFnQmlDLEdBQWhCLElBQXVCNUIsS0FBdkI7QUFDQUMscUJBQWFELEtBQWI7QUFDQUUsdUJBQWVwekIsR0FBR3FsQixLQUFILENBQVNubEIsT0FBVCxDQUFpQjtBQUFFQyxlQUFLK3lCO0FBQVAsU0FBakIsRUFBaUM7QUFBRXh6QixrQkFBUTtBQUFFOUosa0JBQU07QUFBUjtBQUFWLFNBQWpDLENBQWY7QUFDQXE2QixtQkFBV2lELEtBQVgsR0FBbUJBLEtBQW5CO0FDR0c7O0FEREpqRCxpQkFBV3ZaLE9BQVgsR0FBcUJ5YyxVQUFyQjtBQUNBbEQsaUJBQVcxWSxZQUFYLEdBQTBCNmIsYUFBYXg5QixJQUF2QztBQUVBbS9CLDZCQUF1QmoxQixjQUFjMHVCLFlBQWQsQ0FBMkJKLFFBQTNCLEVBQXFDK0UsVUFBckMsQ0FBdkI7QUFFQTZCLGdDQUEwQmwxQixjQUFjNndCLG1CQUFkLENBQWtDb0Usb0JBQWxDLENBQTFCO0FBQ0E5RSxpQkFBV21CLG9CQUFYLEdBQWtDNEQsd0JBQXdCLGNBQXhCLENBQWxDO0FBQ0EvRSxpQkFBV3pZLHlCQUFYLEdBQXVDd2Qsd0JBQXdCLG1CQUF4QixDQUF2QztBQUNBL0UsaUJBQVd4WSw2QkFBWCxHQUEyQ3VkLHdCQUF3Qix1QkFBeEIsQ0FBM0M7QUFFQS9FLGlCQUFXb0IsVUFBWCxHQUF3QnBRLEdBQXhCO0FBQ0FnUCxpQkFBV3BZLE9BQVgsR0FBcUIsS0FBckI7QUFDQW9ZLGlCQUFXdUIsUUFBWCxHQUFzQixLQUF0QjtBQUNBdkIsaUJBQVczZSxNQUFYLEdBQW9CLElBQUl0akIsTUFBSixFQUFwQjtBQUNBOFIsb0JBQWMyekIsYUFBZCxDQUE0Qi9qQixJQUFJNEIsTUFBaEMsRUFBd0MyZSxVQUF4QztBQ0FHLGFEQ0hDLFNBQVNoWixRQUFULENBQWtCcmhCLElBQWxCLENBQXVCbzZCLFVBQXZCLENDREc7QURuQ0o7O0FBc0NBSyxXQUFPcEMsV0FBUCxHQUFxQjJFLGVBQXJCO0FBQ0F2QyxXQUFPM29CLEtBQVAsR0FBZSxTQUFmO0FBRUErSCxRQUFJaWlCLFlBQUosQ0FBaUI5N0IsSUFBakIsQ0FBc0J3MUIsWUFBdEI7QUFDQWlGLFdBQU9xQixZQUFQLEdBQXNCL3dCLEVBQUVvdUIsSUFBRixDQUFPdGYsSUFBSWlpQixZQUFYLENBQXRCO0FBQ0FyQixXQUFPdUIsUUFBUCxHQUFrQjVRLEdBQWxCO0FBQ0FxUCxXQUFPd0IsV0FBUCxHQUFxQnpHLFlBQXJCO0FBQ0FpRixXQUFPaGYsTUFBUCxHQUFnQjVCLElBQUk0QixNQUFwQjtBQUVBZ2YsV0FBT3lCLGlCQUFQLEdBQTJCa2EsVUFBVXIyQyxJQUFyQztBQUVBMjVCLFFBQUl2dkIsR0FBR2tkLFNBQUgsQ0FBYStVLE1BQWIsQ0FBb0I7QUFBQzl4QixXQUFLdWtCLFdBQU47QUFBbUIsb0JBQWNpTyxXQUFXeHlCO0FBQTVDLEtBQXBCLEVBQXNFO0FBQUMreEIsWUFBTTVCO0FBQVAsS0FBdEUsQ0FBSjtBQUNBamhCLFFBQUlyUCxHQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUFDOXhCLFdBQUt1a0I7QUFBTixLQUFwQixFQUF3QztBQUFDb2lCLGFBQU87QUFBQ3I5QixnQkFBUXltQjtBQUFUO0FBQVIsS0FBeEMsQ0FBSjs7QUFDQSxRQUFHWCxLQUFLbGdCLENBQVI7QUFFQzZmLGtCQUFZQywyQkFBWixDQUF3QyxjQUF4QyxFQUF3RDlELFlBQXhEO0FBQ0F6bEIsaUJBQVc5RixjQUFjeU8sV0FBZCxDQUEwQm1XLFdBQTFCLENBQVg7QUFDQTRHLDBCQUFvQnRyQixHQUFHcWxCLEtBQUgsQ0FBU25sQixPQUFULENBQWlCbXJCLFlBQWpCLENBQXBCO0FBQ0E2RCxrQkFBWUUsMEJBQVosQ0FBdUMsc0JBQXZDLEVBQStEeHBCLFFBQS9ELEVBQXlFeVcsTUFBekUsRUFBaUZpUCxpQkFBakY7O0FBRUExcUIsUUFBRXFiLElBQUYsQ0FBT2l3QixrQkFBUCxFQUEyQixVQUFDL1osT0FBRDtBQ010QixlRExKakQsWUFBWUMsMkJBQVosQ0FBd0MsY0FBeEMsRUFBd0RnRCxPQUF4RCxDQ0tJO0FETkw7QUNRRTs7QUROSCxXQUFPLElBQVA7QUFwSkQ7QUFBQSxDQURELEU7Ozs7Ozs7Ozs7OztBRUFBdnlCLE9BQU9zbUMsT0FBUCxDQUNDO0FBQUFpRyxtQkFBaUIsVUFBQ0MsWUFBRCxFQUFlQyxZQUFmLEVBQTZCQyxlQUE3QixFQUE4QzVuQixXQUE5QyxFQUEyRDZuQixZQUEzRCxFQUF5RXBGLFFBQXpFO0FBQ2hCLFFBQUE1TyxlQUFBLEVBQUE3b0IsR0FBQSxFQUFBODhCLGlCQUFBLEVBQUF2ckIsR0FBQSxFQUFBd3JCLFFBQUEsRUFBQTlnQyxLQUFBO0FBQUFtdEIsVUFBTXNULFlBQU4sRUFBb0J6c0MsS0FBcEI7QUFDQW01QixVQUFNdVQsWUFBTixFQUFvQnRULE1BQU1DLEtBQU4sQ0FBWSxRQUFaLEVBQXNCLE9BQXRCLENBQXBCO0FBQ0FGLFVBQU13VCxlQUFOLEVBQXVCdG5DLElBQXZCO0FBQ0E4ekIsVUFBTXBVLFdBQU4sRUFBbUJuMkIsTUFBbkI7QUFDQXVxQyxVQUFNeVQsWUFBTixFQUFvQjVzQyxLQUFwQjtBQUNBbTVCLFVBQU1xTyxRQUFOLEVBQWdCNTRDLE1BQWhCO0FBRUFncUMsc0JBQWtCLEtBQUtsaUIsTUFBdkI7QUFDQW0yQix3QkFBb0IsSUFBSTdzQyxLQUFKLEVBQXBCO0FBQ0ErUCxVQUFNMVAsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBQ0MsV0FBS3VrQjtBQUFOLEtBQXJCLEVBQXlDO0FBQUNobEIsY0FBUTtBQUFDOUosY0FBTSxDQUFQO0FBQVU2VCxnQkFBUSxDQUFsQjtBQUFxQjZILGdCQUFRLENBQTdCO0FBQWdDbEssZUFBTztBQUF2QztBQUFULEtBQXpDLENBQU47O0FBQ0EsUUFBR21sQyxhQUFhdCtCLFFBQWIsQ0FBc0IsT0FBdEIsQ0FBSDtBQUNDLFVBQUdvK0IsaUJBQWdCLFFBQW5CO0FBQ0N6ckMsVUFBRXFiLElBQUYsQ0FBT3ZNLElBQUlqRyxNQUFYLEVBQW1CLFVBQUN4VSxDQUFEO0FDVWIsaUJEVEwyTCxFQUFFcWIsSUFBRixDQUFPaG5CLEVBQUVpaUIsUUFBVCxFQUFtQixVQUFDdzFCLEVBQUQ7QUFDbEIsZ0JBQUdOLGFBQWFuK0IsUUFBYixDQUFzQnkrQixHQUFHbG1DLElBQXpCLEtBQW1Da21DLEdBQUcvMUIsV0FBSCxLQUFvQixJQUExRDtBQ1VRLHFCRFRQNjFCLGtCQUFrQjMyQyxJQUFsQixDQUF1QjYyQyxHQUFHbG1DLElBQTFCLENDU087QUFDRDtBRFpSLFlDU0s7QURWTjtBQURELGFBS0ssSUFBRzZsQyxpQkFBZ0IsT0FBbkI7QUFDSnByQixjQUFNLElBQUlqYyxJQUFKLEVBQU47QUFDQXluQyxtQkFBVy84QixJQUFJNEIsTUFBSixDQUFXbTdCLFFBQXRCOztBQUNBN3JDLFVBQUVxYixJQUFGLENBQU92TSxJQUFJakcsTUFBWCxFQUFtQixVQUFDeFUsQ0FBRDtBQ2FiLGlCRFpMMkwsRUFBRXFiLElBQUYsQ0FBT2huQixFQUFFaWlCLFFBQVQsRUFBbUIsVUFBQ3cxQixFQUFEO0FBQ2xCLGdCQUFBQyxhQUFBOztBQUFBLGdCQUFHUCxhQUFhbitCLFFBQWIsQ0FBc0J5K0IsR0FBR2xtQyxJQUF6QixLQUFtQ2ttQyxHQUFHLzFCLFdBQUgsS0FBb0IsSUFBMUQ7QUFDQzYxQixnQ0FBa0IzMkMsSUFBbEIsQ0FBdUI2MkMsR0FBR2xtQyxJQUExQjtBQUNBa21DLGlCQUFHRSxlQUFILEdBQXFCTixlQUFyQjs7QUFHQSxrQkFBR0csYUFBWSxJQUFaLElBQW9CLENBQUlBLFFBQTNCLFVBS0ssSUFBR0EsYUFBWSxJQUFmO0FBQ0osb0JBQUc3b0MsUUFBUWlwQywwQkFBUixDQUFtQzVyQixHQUFuQyxJQUEwQ3FyQixlQUE3QztBQ1NVLHlCRFJUSSxHQUFHSSxXQUFILEdBQWlCbHBDLFFBQVFpcEMsMEJBQVIsQ0FBbUM1ckIsR0FBbkMsRUFBd0MsSUFBeEMsQ0NRUjtBRFRWLHVCQUVLLElBQUdyZCxRQUFRbXBDLG1CQUFSLENBQTRCOXJCLEdBQTVCLEVBQWlDLENBQWpDLElBQXNDcXJCLGVBQXpDO0FBQ0pLLGtDQUFnQixVQUFDSyxTQUFEO0FBQ2Ysd0JBQUFDLGlCQUFBO0FBQUFBLHdDQUFvQnJwQyxRQUFRaXBDLDBCQUFSLENBQW1DRyxTQUFuQyxDQUFwQjs7QUFDQSx3QkFBR0Msb0JBQW9CWCxlQUF2QjtBQUNDSSx5QkFBR0ksV0FBSCxHQUFpQkUsU0FBakI7QUFERDtBQUdDTCxvQ0FBYy9vQyxRQUFRaXBDLDBCQUFSLENBQW1DRyxTQUFuQyxFQUE4QyxJQUE5QyxDQUFkO0FDVVU7QURmSSxtQkFBaEI7O0FDaUJTLHlCRFZUTCxjQUFjMXJCLEdBQWQsQ0NVUztBRHJCTjtBQUFBLHFCQWVBLElBQUd3ckIsYUFBWSxJQUFmO0FBQ0osb0JBQUc3b0MsUUFBUWlwQywwQkFBUixDQUFtQzVyQixHQUFuQyxJQUEwQ3FyQixlQUE3QztBQ1NVLHlCRFJUSSxHQUFHSSxXQUFILEdBQWlCbHBDLFFBQVFpcEMsMEJBQVIsQ0FBbUM1ckIsR0FBbkMsRUFBd0MsSUFBeEMsQ0NRUjtBRFRWLHVCQUVLLElBQUdyZCxRQUFRbXBDLG1CQUFSLENBQTRCOXJCLEdBQTVCLEVBQWlDLENBQWpDLElBQXNDcXJCLGVBQXpDO0FBQ0pLLGtDQUFnQixVQUFDSyxTQUFEO0FBQ2Ysd0JBQUFDLGlCQUFBO0FBQUFBLHdDQUFvQnJwQyxRQUFRaXBDLDBCQUFSLENBQW1DRyxTQUFuQyxDQUFwQjs7QUFDQSx3QkFBR0Msb0JBQW9CWCxlQUF2QjtBQUNDSSx5QkFBR0ksV0FBSCxHQUFpQkUsU0FBakI7QUFERDtBQUdDTCxvQ0FBYy9vQyxRQUFRaXBDLDBCQUFSLENBQW1DRyxTQUFuQyxFQUE4QyxJQUE5QyxDQUFkO0FDVVU7QURmSSxtQkFBaEI7O0FDaUJTLHlCRFZUTCxjQUFjMXJCLEdBQWQsQ0NVUztBRHJCTjtBQUFBLHFCQWVBLElBQUd3ckIsYUFBWSxJQUFmO0FBQ0osb0JBQUc3b0MsUUFBUWlwQywwQkFBUixDQUFtQzVyQixHQUFuQyxJQUEwQ3FyQixlQUE3QztBQ1NVLHlCRFJUSSxHQUFHSSxXQUFILEdBQWlCbHBDLFFBQVFpcEMsMEJBQVIsQ0FBbUM1ckIsR0FBbkMsRUFBd0MsSUFBeEMsQ0NRUjtBRFRWLHVCQUVLLElBQUdyZCxRQUFRbXBDLG1CQUFSLENBQTRCOXJCLEdBQTVCLEVBQWlDLENBQWpDLElBQXNDcXJCLGVBQXpDO0FBQ0pLLGtDQUFnQixVQUFDSyxTQUFEO0FBQ2Ysd0JBQUFDLGlCQUFBO0FBQUFBLHdDQUFvQnJwQyxRQUFRaXBDLDBCQUFSLENBQW1DRyxTQUFuQyxDQUFwQjs7QUFDQSx3QkFBR0Msb0JBQW9CWCxlQUF2QjtBQUNDSSx5QkFBR0ksV0FBSCxHQUFpQkUsU0FBakI7QUFERDtBQUdDTCxvQ0FBYy9vQyxRQUFRaXBDLDBCQUFSLENBQW1DRyxTQUFuQyxFQUE4QyxJQUE5QyxDQUFkO0FDVVU7QURmSSxtQkFBaEI7O0FDaUJTLHlCRFZUTCxjQUFjMXJCLEdBQWQsQ0NVUztBRHJCTjtBQXhDTjtBQ2dFTztBRGpFUixZQ1lLO0FEYk47O0FBdURBLFlBQUcsQ0FBSXJnQixFQUFFNEwsT0FBRixDQUFVZ2dDLGlCQUFWLENBQVA7QUFDQ3hzQyxhQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQjtBQUFDOXhCLGlCQUFLdWtCO0FBQU4sV0FBcEIsRUFBd0M7QUFBQ3dOLGtCQUFNO0FBQUMsd0JBQVV4aUIsSUFBSWpHO0FBQWY7QUFBUCxXQUF4QztBQTNERztBQU5OO0FBQUEsV0FtRUssSUFBRzhpQyxhQUFhdCtCLFFBQWIsQ0FBc0IsV0FBdEIsQ0FBSDtBQUNKdEMsY0FBUS9LLEVBQUV1YyxJQUFGLENBQU96TixJQUFJakcsTUFBWCxFQUFtQixVQUFDeFUsQ0FBRDtBQUMxQixlQUFPQSxFQUFFa0wsR0FBRixLQUFTZ25DLFFBQWhCO0FBRE8sUUFBUjs7QUFFQXZtQyxRQUFFcWIsSUFBRixDQUFPdFEsTUFBTXVMLFFBQWIsRUFBdUIsVUFBQ3cxQixFQUFEO0FBQ3RCLFlBQUdOLGFBQWFuK0IsUUFBYixDQUFzQnkrQixHQUFHbG1DLElBQXpCLEtBQW1Da21DLEdBQUcvMUIsV0FBSCxLQUFvQixJQUExRDtBQ3VCTSxpQkR0Qkw2MUIsa0JBQWtCMzJDLElBQWxCLENBQXVCNjJDLEdBQUdsbUMsSUFBMUIsQ0NzQks7QUFDRDtBRHpCTjtBQUhJLFdBT0EsSUFBRytsQyxhQUFhdCtCLFFBQWIsQ0FBc0IsSUFBdEIsQ0FBSDtBQUNKck4sUUFBRXFiLElBQUYsQ0FBT3ZNLElBQUlqRyxNQUFYLEVBQW1CLFVBQUN4VSxDQUFEO0FDd0JkLGVEdkJKMkwsRUFBRXFiLElBQUYsQ0FBT2huQixFQUFFaWlCLFFBQVQsRUFBbUIsVUFBQ3cxQixFQUFEO0FBQ2xCLGNBQUdOLGFBQWFuK0IsUUFBYixDQUFzQnkrQixHQUFHbG1DLElBQXpCLEtBQW1Da21DLEdBQUcvMUIsV0FBSCxLQUFvQixJQUF2RCxJQUFnRSsxQixHQUFHdjZDLElBQUgsS0FBVyxJQUEzRSxJQUFvRnU2QyxHQUFHcnFCLFNBQUgsS0FBZ0JrVyxlQUF2RztBQ3dCTyxtQkR2Qk5pVSxrQkFBa0IzMkMsSUFBbEIsQ0FBdUI2MkMsR0FBR2xtQyxJQUExQixDQ3VCTTtBQUNEO0FEMUJQLFVDdUJJO0FEeEJMO0FDOEJFOztBRHpCSDFHLGtCQUFjb3RDLGFBQWQsQ0FBNEJ4OUIsSUFBSTlaLElBQWhDLEVBQXNDMDJDLGVBQXRDLEVBQXVERSxpQkFBdkQsRUFBMEU5OEIsSUFBSXRJLEtBQTlFLEVBQXFGc0ksSUFBSXZQLEdBQXpGO0FBRUEsV0FBTyxJQUFQO0FBN0ZEO0FBQUEsQ0FERCxFOzs7Ozs7Ozs7Ozs7QUVBQVAsT0FBT3NtQyxPQUFQLENBQ0M7QUFBQWlILDZCQUEyQixVQUFDNWtCLFNBQUQsRUFBWW1ULFNBQVosRUFBdUI0QixNQUF2QjtBQUMxQixRQUFBOFAsY0FBQSxFQUFBaFgsSUFBQSxFQUFBM0ssS0FBQSxFQUFBNGhCLFVBQUEsRUFBQW4zQixHQUFBLEVBQUExUCxJQUFBO0FBQUFzeUIsVUFBTXZRLFNBQU4sRUFBaUJoNkIsTUFBakI7QUFDQXVxQyxVQUFNNEMsU0FBTixFQUFpQm50QyxNQUFqQjtBQUNBdXFDLFVBQU13RSxNQUFOLEVBQWN0dkMsTUFBZDtBQUVBa29CLFVBQU0sRUFBTjtBQUNBMVAsV0FBT3hHLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUI7QUFBRUMsV0FBSyxLQUFLa1c7QUFBWixLQUFqQixFQUF1QztBQUFFM1csY0FBUTtBQUFFc0UsZ0JBQVE7QUFBVjtBQUFWLEtBQXZDLENBQVA7QUFFQW95QixXQUFPLElBQVA7O0FBQ0EsUUFBRzV2QixLQUFLeEMsTUFBTCxLQUFlLE9BQWxCO0FBQ0NveUIsYUFBTyxPQUFQO0FDTUU7O0FESEgsUUFBRzdOLGNBQWEsZUFBaEI7QUFDQzZrQix1QkFBaUI5UCxPQUFPOFAsY0FBeEI7QUFDQTNoQixjQUFRenJCLEdBQUc0c0IsVUFBSCxDQUFjelAsSUFBZCxDQUFtQjtBQUFFaGQsYUFBSztBQUFFcWUsZUFBSzR1QjtBQUFQO0FBQVAsT0FBbkIsRUFBcUQ7QUFBRTF0QyxnQkFBUTtBQUFFOUosZ0JBQU07QUFBUjtBQUFWLE9BQXJELEVBQThFNnBCLEtBQTlFLEVBQVI7QUFDQTR0QixtQkFBYXpzQyxFQUFFaVUsS0FBRixDQUFRNFcsS0FBUixFQUFlLE1BQWYsRUFBdUJqOUIsUUFBdkIsRUFBYjtBQUNBMG5CLFlBQU1wUixRQUFRQyxFQUFSLENBQVcsMENBQVgsRUFBdUQ7QUFBRTIyQixtQkFBV0EsU0FBYjtBQUF3QjRSLG1CQUFXRDtBQUFuQyxPQUF2RCxFQUF3R2pYLElBQXhHLENBQU47QUNnQkU7O0FEYkgsV0FBT2xnQixHQUFQO0FBcEJEO0FBQUEsQ0FERCxFOzs7Ozs7Ozs7Ozs7QUVBQSxJQUFBcTNCLEtBQUE7O0FBQUFBLFFBQVF4VyxRQUFRLE1BQVIsQ0FBUjtBQUVBbjNCLE9BQU9zbUMsT0FBUCxDQUNDO0FBQUExcEIseUJBQXVCLFVBQUNnTSxPQUFELEVBQVU1eUIsSUFBVjtBQUV0QixRQUFBNDNDLE9BQUEsRUFBQUMsS0FBQSxFQUFBeHVDLE9BQUEsRUFBQWlGLElBQUEsRUFBQTNRLENBQUEsRUFBQW02QyxXQUFBLEVBQUExMEMsR0FBQSxFQUFBMjBDLEtBQUEsRUFBQUMsTUFBQTs7QUFBQUYsa0JBQWMxdEMsR0FBRzZ0QyxxQkFBSCxDQUF5QjN0QyxPQUF6QixDQUFpQztBQUFDa0gsYUFBT29oQixPQUFSO0FBQWlCNXlCLFlBQU1BO0FBQXZCLEtBQWpDLENBQWQ7O0FBRUEsUUFBRyxDQUFDODNDLFdBQUo7QUFDQyxZQUFNLElBQUs5dEMsT0FBT3BFLEtBQVosQ0FBa0IsUUFBbEIsRUFBNEIsS0FBRzVGLElBQS9CLENBQU47QUNLRTs7QURISHNPLFdBQU8sSUFBSWMsSUFBSixFQUFQO0FBRUEvRixjQUFVLEVBQVY7QUFFQUEsWUFBUTJCLENBQVIsR0FBWUEsQ0FBWjtBQUVBNnNDLFlBQVF2cEMsS0FBSzZkLFdBQUwsRUFBUjtBQUVBeXJCLGNBQVUsQ0FBQ0UsWUFBWUksTUFBWixJQUFzQixDQUF2QixJQUE0QixDQUF0QztBQUVBN3VDLFlBQVE4dUMsSUFBUixHQUFlbnRDLEVBQUVsSSxLQUFGLENBQVErMEMsS0FBUixDQUFmO0FBRUF4dUMsWUFBUSt1QyxFQUFSLEdBQWE5cEMsS0FBS3l5QixRQUFMLEtBQWtCLENBQS9CO0FBRUExM0IsWUFBUWd2QyxFQUFSLEdBQWEvcEMsS0FBS3l5QixRQUFMLEtBQWtCLENBQS9COztBQUVBLFFBQUcxM0IsUUFBUSt1QyxFQUFSLEdBQWEsRUFBaEI7QUFDQy91QyxjQUFRK3VDLEVBQVIsR0FBYSxNQUFNL3VDLFFBQVErdUMsRUFBM0I7QUNIRTs7QURLSC91QyxZQUFRaXZDLEVBQVIsR0FBYWhxQyxLQUFLaXFDLE9BQUwsRUFBYjtBQUVBbHZDLFlBQVFtdkMsRUFBUixHQUFhbHFDLEtBQUtpcUMsT0FBTCxFQUFiOztBQUVBLFFBQUdsdkMsUUFBUWl2QyxFQUFSLEdBQWEsRUFBaEI7QUFDQ2p2QyxjQUFRaXZDLEVBQVIsR0FBYSxNQUFNanZDLFFBQVFpdkMsRUFBM0I7QUNMRTs7QURPSCxRQUFHanZDLFFBQVE4dUMsSUFBUixLQUFnQkwsWUFBWWxwQyxJQUEvQjtBQUNDZ3BDLGdCQUFVRSxZQUFZVyxZQUFaLElBQTRCLENBQXRDO0FDTEU7O0FET0hwdkMsWUFBUXF2QyxNQUFSLEdBQWlCMXRDLEVBQUVsSSxLQUFGLENBQVE4MEMsT0FBUixDQUFqQjtBQUVBRyxZQUFRRCxZQUFZQyxLQUFaLENBQWtCdi9DLE9BQWxCLENBQTBCLFFBQTFCLEVBQW9DLGNBQXBDLEVBQW9EQSxPQUFwRCxDQUE0RCxNQUE1RCxFQUFvRSxZQUFwRSxFQUFrRkEsT0FBbEYsQ0FBMEYsVUFBMUYsRUFBc0csZ0JBQXRHLENBQVI7QUFFQXcvQyxhQUFTLGtCQUFnQkQsS0FBaEIsR0FBc0IsMEJBQS9COztBQUVBO0FBQ0MzMEMsWUFBTXUwQyxNQUFNSyxNQUFOLEVBQWMsT0FBZCxFQUF1QjN1QyxPQUF2QixFQUFnQyxLQUFoQyxFQUF1Q3N2QyxLQUE3QztBQUVBdnVDLFNBQUc2dEMscUJBQUgsQ0FBeUI1YixNQUF6QixDQUFnQztBQUFDOXhCLGFBQUt1dEMsWUFBWXZ0QztBQUFsQixPQUFoQyxFQUF3RDtBQUFDK3hCLGNBQU07QUFBQzF0QixnQkFBTWlwQyxLQUFQO0FBQWNLLGtCQUFRTjtBQUF0QjtBQUFQLE9BQXhEO0FBRUFodEMsY0FBUUMsR0FBUixDQUFZLEtBQUs0VixNQUFqQixFQUF5QnJkLEdBQXpCO0FBTEQsYUFBQTBMLEtBQUE7QUFPTW5SLFVBQUFtUixLQUFBO0FBQ0wxTCxZQUFNO0FBQUN3MUMsZ0JBQVFqN0M7QUFBVCxPQUFOO0FDREU7O0FER0gsV0FBT3lGLEdBQVA7QUFwREQ7QUFBQSxDQURELEU7Ozs7Ozs7Ozs7OztBRUZBNEcsT0FBT3NtQyxPQUFQLENBQ0M7QUFBQXVJLHFCQUFtQixVQUFDMVAsTUFBRCxFQUFTbnBDLElBQVQ7QUFDbEJrakMsVUFBTWlHLE1BQU4sRUFBY3h3QyxNQUFkO0FBQ0F1UixrQkFBYzR1QyxlQUFkLENBQThCM1AsTUFBOUIsRUFBc0NucEMsSUFBdEM7QUFDQSxXQUFPLFNBQVA7QUFIRDtBQUFBLENBREQsRTs7Ozs7Ozs7Ozs7O0FDQUFnSyxPQUFPc21DLE9BQVAsQ0FDQztBQUFBeUksa0JBQWdCLFVBQUM1UCxNQUFELEVBQVM2UCxTQUFUO0FBQ2YsUUFBQWwzQyxLQUFBLEVBQUFnWSxHQUFBLEVBQUExVyxHQUFBLEVBQUF5Z0MsT0FBQTtBQUFBWCxVQUFNaUcsTUFBTixFQUFjeHdDLE1BQWQ7QUFDQXVxQyxVQUFNOFYsU0FBTixFQUFpQnJnRCxNQUFqQjs7QUFDQSxRQUFHLENBQUMsS0FBSzhuQixNQUFUO0FBQ0M7QUNFRTs7QURBSDNHLFVBQU0xUCxHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFDQyxXQUFLNCtCO0FBQU4sS0FBckIsRUFBb0M7QUFBQ3IvQixjQUFRO0FBQUM2TCwyQkFBbUI7QUFBcEI7QUFBVCxLQUFwQyxDQUFOOztBQUVBLFFBQUdtRSxHQUFIO0FBQ0MxVyxZQUFNMFcsSUFBSW5FLGlCQUFKLElBQXlCLEVBQS9CO0FBRUE3VCxjQUFRc0IsSUFBSXBFLE9BQUosQ0FBWWc2QyxTQUFaLENBQVI7O0FBRUEsVUFBR2wzQyxRQUFRLENBQUMsQ0FBWjtBQUNDc0IsWUFBSSsxQixNQUFKLENBQVdyM0IsS0FBWDtBQ0tHOztBREhKK2hDLGdCQUFVLElBQUl6ckMsTUFBSixFQUFWO0FBQ0F5ckMsY0FBUTVILFFBQVIsR0FBbUIsSUFBSTdzQixJQUFKLEVBQW5CO0FBQ0F5MEIsY0FBUTNILFdBQVIsR0FBc0IsS0FBS3piLE1BQTNCO0FBQ0FvakIsY0FBUWx1QixpQkFBUixHQUE0QnZTLEdBQTVCO0FDS0csYURISGdILEdBQUdrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQUM5eEIsYUFBSzQrQjtBQUFOLE9BQXBCLEVBQW1DO0FBQUM3TSxjQUFNdUg7QUFBUCxPQUFuQyxDQ0dHO0FBS0Q7QUQ3Qko7QUF1QkFvViwyQkFBeUIsVUFBQzlQLE1BQUQsRUFBU3h6QixpQkFBVDtBQUN4QixRQUFBbUUsR0FBQSxFQUFBK3BCLE9BQUE7QUFBQVgsVUFBTWlHLE1BQU4sRUFBY3h3QyxNQUFkO0FBQ0F1cUMsVUFBTXZ0QixpQkFBTixFQUF5QjVMLEtBQXpCOztBQUVBLFFBQUcsQ0FBQyxLQUFLMFcsTUFBVDtBQUNDO0FDU0U7O0FEUEgzRyxVQUFNMVAsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBQ0MsV0FBSzQrQixNQUFOO0FBQWN2ZixXQUFLLENBQUM7QUFBQ2lQLG1CQUFXLEtBQUtwWTtBQUFqQixPQUFELEVBQTJCO0FBQUNzRixtQkFBVyxLQUFLdEY7QUFBakIsT0FBM0IsRUFBcUQ7QUFBQzZYLHFCQUFhLEtBQUs3WDtBQUFuQixPQUFyRCxFQUFpRjtBQUFDMlgsa0JBQVUsS0FBSzNYO0FBQWhCLE9BQWpGO0FBQW5CLEtBQXJCLEVBQW9KO0FBQUMzVyxjQUFRO0FBQUNpSSxlQUFPO0FBQVI7QUFBVCxLQUFwSixDQUFOOztBQUVBLFFBQUcrSCxHQUFIO0FBQ0MrcEIsZ0JBQVUsSUFBSXpyQyxNQUFKLEVBQVY7QUFDQXlyQyxjQUFRNUgsUUFBUixHQUFtQixJQUFJN3NCLElBQUosRUFBbkI7QUFDQXkwQixjQUFRM0gsV0FBUixHQUFzQixLQUFLemIsTUFBM0I7QUFDQW9qQixjQUFRbHVCLGlCQUFSLEdBQTRCQSxpQkFBNUI7QUFDQXZMLFNBQUdrZCxTQUFILENBQWErVSxNQUFiLENBQW9CO0FBQUM5eEIsYUFBSzQrQjtBQUFOLE9BQXBCLEVBQW1DO0FBQUM3TSxjQUFNdUg7QUFBUCxPQUFuQztBQzZCRTs7QUQzQkgsV0FBT3o1QixHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCO0FBQUNoZCxXQUFLO0FBQUNxZSxhQUFNalQ7QUFBUDtBQUFOLEtBQWxCLEVBQW9EO0FBQUM3TCxjQUFRO0FBQUNTLGFBQUssQ0FBTjtBQUFTbVIsZ0JBQVE7QUFBakI7QUFBVCxLQUFwRCxFQUFtRm1PLEtBQW5GLEVBQVA7QUF2Q0Q7QUFBQSxDQURELEU7Ozs7Ozs7Ozs7OztBRUFBN2YsT0FBT3NtQyxPQUFQLENBQ0M7QUFBQTRJLHNCQUFvQixVQUFDaGdELElBQUQ7QUNDakIsV0RBRmtSLEdBQUc2c0IsY0FBSCxDQUFrQm9GLE1BQWxCLENBQXlCO0FBQUU5eEIsV0FBS3JSLEtBQUtxUjtBQUFaLEtBQXpCLEVBQTRDO0FBQUEreEIsWUFDM0M7QUFBQTZjLGNBQU1qZ0QsS0FBS2lnRCxJQUFYO0FBQ0ExcEIsZUFBT3YyQixLQUFLdTJCLEtBRFo7QUFFQWtHLGFBQUt6OEIsS0FBS3k4QjtBQUZWO0FBRDJDLEtBQTVDLENDQUU7QURESDtBQU1BeWpCLGtCQUFnQixVQUFDbGdELElBQUQ7QUFDZjBSLFlBQVFDLEdBQVIsQ0FBWTNSLEtBQUtxUixHQUFqQjtBQUNBSyxZQUFRQyxHQUFSLENBQVkzUixLQUFLOEcsSUFBakI7QUNNRSxXRExGb0ssR0FBRzRzQixVQUFILENBQWNxRixNQUFkLENBQXFCO0FBQUU5eEIsV0FBS3JSLEtBQUtxUjtBQUFaLEtBQXJCLEVBQXdDO0FBQUEreEIsWUFDdkM7QUFBQXQ4QixjQUFNOUcsS0FBSzhHO0FBQVg7QUFEdUMsS0FBeEMsQ0NLRTtBRGRIO0FBQUEsQ0FERCxFOzs7Ozs7Ozs7Ozs7QUVBQWdLLE9BQU9zbUMsT0FBUCxDQUNDO0FBQUErSSxjQUFZLFVBQUM3bkMsS0FBRCxFQUFRNjFCLE1BQVIsRUFBZ0I5ckMsS0FBaEI7QUFFWCxRQUFBKzlDLFFBQUEsRUFBQUMsV0FBQTtBQUFBRCxlQUFXbHZDLEdBQUdvdkMsaUJBQUgsQ0FBcUJsdkMsT0FBckIsQ0FBNkI7QUFBRWtILGFBQU9BLEtBQVQ7QUFBZ0JaLFlBQU0sS0FBSzZQLE1BQTNCO0FBQW1DamdCLFdBQUs7QUFBeEMsS0FBN0IsRUFBc0Y7QUFBRXNKLGNBQVE7QUFBRXBSLGVBQU87QUFBVDtBQUFWLEtBQXRGLENBQVg7QUFFQTZnRCxrQkFBQSxDQUFBRCxZQUFBLE9BQWNBLFNBQVU1Z0QsS0FBeEIsR0FBd0IsTUFBeEIsS0FBaUMsRUFBakM7O0FBRUEsUUFBRzZDLEtBQUg7QUFDQ2crQyxrQkFBWXQ1QyxJQUFaLENBQWlCb25DLE1BQWpCO0FBRUFrUyxvQkFBY3Z1QyxFQUFFb3VCLElBQUYsQ0FBT21nQixXQUFQLENBQWQ7QUFIRDtBQUtDQSxrQkFBWXBnQixNQUFaLENBQW1Cb2dCLFlBQVl2NkMsT0FBWixDQUFvQnFvQyxNQUFwQixDQUFuQjtBQ01FOztBREpILFFBQUdpUyxRQUFIO0FDTUksYURMSGx2QyxHQUFHb3ZDLGlCQUFILENBQXFCbmQsTUFBckIsQ0FBNEI7QUFBRTl4QixhQUFLK3VDLFNBQVMvdUM7QUFBaEIsT0FBNUIsRUFBbUQ7QUFBRWlILGVBQU9BLEtBQVQ7QUFBZ0JaLGNBQU0sS0FBSzZQLE1BQTNCO0FBQW1DamdCLGFBQUssYUFBeEM7QUFBdUQ5SCxlQUFPNmdEO0FBQTlELE9BQW5ELENDS0c7QUROSjtBQ2VJLGFEWkhudkMsR0FBR292QyxpQkFBSCxDQUFxQnRnQixNQUFyQixDQUE0QjtBQUFFMW5CLGVBQU9BLEtBQVQ7QUFBZ0JaLGNBQU0sS0FBSzZQLE1BQTNCO0FBQW1DamdCLGFBQUssYUFBeEM7QUFBdUQ5SCxlQUFPNmdEO0FBQTlELE9BQTVCLENDWUc7QUFNRDtBRGxDSjtBQUFBLENBREQsRTs7Ozs7Ozs7Ozs7O0FFQUF2dkMsT0FBT3NtQyxPQUFQLENBQ0M7QUFBQW1KLHVCQUFxQixVQUFDdFEsTUFBRDtBQUNwQixRQUFBcnZCLEdBQUEsRUFBQTQvQixpQkFBQTs7QUFBQSxRQUFJLENBQUMsS0FBS2o1QixNQUFWO0FBQ0M7QUNFRTs7QURESGk1Qix3QkFBb0IsQ0FBQyxLQUFELEVBQVEsYUFBUixFQUF1QixNQUF2QixFQUErQixTQUEvQixFQUEwQyxjQUExQyxFQUEwRCxNQUExRCxFQUFrRSxZQUFsRSxFQUFnRixhQUFoRixFQUNuQixTQURtQixFQUNSLE9BRFEsRUFDQyxhQURELEVBQ2dCLGdCQURoQixFQUNrQyxXQURsQyxFQUMrQyxnQkFEL0MsQ0FBcEI7QUFHQTUvQixVQUFNMVAsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBQ0MsV0FBSzQrQjtBQUFOLEtBQXJCLEVBQW9DO0FBQ3pDci9CLGNBQVE7QUFDUCxzQkFBYyxDQURQO0FBRVAsOEJBQXNCLENBRmY7QUFHUCx1QkFBZSxDQUhSO0FBSVAsNkJBQXFCLENBSmQ7QUFLUCx1QkFBZSxDQUxSO0FBTVAsOEJBQXNCLENBTmY7QUFPUCx3QkFBZ0IsQ0FQVDtBQVFQLCtCQUF1QixDQVJoQjtBQVNQLHVDQUErQixDQVR4QjtBQVVQLGdDQUF3QixDQVZqQjtBQVdQLG1DQUEyQixDQVhwQjtBQVlQLHdDQUFnQyxDQVp6QjtBQWFQLHlEQUFpRCxDQWIxQztBQWNQLGdDQUF3QixDQWRqQjtBQWVQLHNDQUE4QixDQWZ2QjtBQWdCUCx1Q0FBK0IsQ0FoQnhCO0FBaUJQLG1DQUEyQixDQWpCcEI7QUFrQlAsaUNBQXlCLENBbEJsQjtBQW1CUCx1Q0FBK0IsQ0FuQnhCO0FBb0JQLDBDQUFrQyxDQXBCM0I7QUFxQlAscUNBQTZCLENBckJ0QjtBQXNCUCwwQ0FBa0MsQ0F0QjNCO0FBdUJQLGlDQUF5QixDQXZCbEI7QUF3QlAseUNBQWlDLENBeEIxQjtBQXlCUCw0Q0FBb0M7QUF6QjdCO0FBRGlDLEtBQXBDLENBQU47O0FBOEJBLFFBQUcsQ0FBQ2dRLEdBQUo7QUFDQztBQ0VFOztBREFILFdBQUFBLE9BQUEsT0FBT0EsSUFBS2pHLE1BQVosR0FBWSxNQUFaO0FBdkNEO0FBQUEsQ0FERCxFOzs7Ozs7Ozs7Ozs7QUVBQTdKLE9BQU9zbUMsT0FBUCxDQUNDO0FBQUEseUJBQXVCLFVBQUM5K0IsS0FBRCxFQUFRbW9DLFVBQVIsRUFBb0JDLE9BQXBCO0FBQ3RCLFFBQUFDLGdCQUFBOztBQUFBLFFBQUcsQ0FBQyxLQUFLcDVCLE1BQVQ7QUFDQztBQ0VFOztBREFILFFBQUcsQ0FBQ2pQLEtBQUo7QUFDQztBQ0VFOztBREFIcW9DLHVCQUFtQmovQixnQkFBZ0JrL0IsaUJBQWhCLENBQWtDdG9DLEtBQWxDLEVBQXlDbW9DLFVBQXpDLEVBQXFEQyxPQUFyRCxFQUE4RCxLQUFLbjVCLE1BQW5FLENBQW5CO0FBRUEsV0FBT281QixnQkFBUDtBQVREO0FBV0EsK0JBQTZCLFVBQUNyb0MsS0FBRCxFQUFRbW9DLFVBQVIsRUFBb0JDLE9BQXBCO0FBQzVCLFFBQUFDLGdCQUFBOztBQUFBLFFBQUcsQ0FBQyxLQUFLcDVCLE1BQVQ7QUFDQztBQ0VFOztBREFILFFBQUcsQ0FBQ2pQLEtBQUo7QUFDQztBQ0VFOztBREFIcW9DLHVCQUFtQmovQixnQkFBZ0JrL0IsaUJBQWhCLENBQWtDdG9DLEtBQWxDLEVBQXlDbW9DLFVBQXpDLEVBQXFEQyxPQUFyRCxFQUE4RCxLQUFLbjVCLE1BQW5FLENBQW5CO0FBRUEsWUFBQW81QixvQkFBQSxPQUFPQSxpQkFBa0JwaUQsTUFBekIsR0FBeUIsTUFBekIsS0FBbUMsQ0FBbkM7QUFwQkQ7QUFzQkEscUJBQW1CLFVBQUM0eEIsV0FBRDtBQUVsQixRQUFBMHdCLFVBQUEsRUFBQXIxQixJQUFBO0FBQUFBLFdBQU8sSUFBUDs7QUFFQSxRQUFHLENBQUNBLEtBQUtqRSxNQUFUO0FBQ0M7QUNBRTs7QURFSHM1QixpQkFBYSxJQUFJaHdDLEtBQUosRUFBYjtBQUVBc2YsZ0JBQVk1ZSxPQUFaLENBQW9CLFVBQUM2OEIsS0FBRDtBQUNuQixVQUFBMFMsVUFBQTtBQUFBQSxtQkFBYXAvQixnQkFBZ0JxL0IsWUFBaEIsQ0FBNkIzUyxLQUE3QixFQUFvQzVpQixLQUFLakUsTUFBekMsQ0FBYjs7QUFDQSxVQUFHdTVCLFVBQUg7QUNBSyxlRENKRCxXQUFXOTVDLElBQVgsQ0FBZ0IrNUMsVUFBaEIsQ0NESTtBQUNEO0FESEw7QUFLQSxXQUFPRCxVQUFQO0FBcENEO0FBQUEsQ0FERCxFOzs7Ozs7Ozs7Ozs7QUVBQS92QyxPQUFPc21DLE9BQVAsQ0FDQztBQUFBNEoscUJBQW1CLFVBQUMxcEMsS0FBRDtBQUNsQixRQUFBMnBDLE9BQUE7O0FBQUFqWCxVQUFNMXlCLEtBQU4sRUFBYXpHLEtBQWI7QUFFQW93QyxjQUFVLEtBQUsxNUIsTUFBZjs7QUFFQSxRQUFHLENBQUMwNUIsT0FBSjtBQUNDO0FDQUU7O0FBQ0QsV0RDRjNwQyxNQUFNL0YsT0FBTixDQUFjLFVBQUM2RixJQUFEO0FBQ2IsVUFBQThwQyxNQUFBLEVBQUFDLFlBQUEsRUFBQWhULE1BQUEsRUFBQTM5QixJQUFBLEVBQUF1TixNQUFBLEVBQUFxakMsd0JBQUEsRUFBQWp2QixHQUFBLEVBQUF1SCxPQUFBLEVBQUE3Z0IsS0FBQTs7QUFBQTZnQixnQkFBVXRpQixLQUFLa0IsS0FBZjtBQUNBeUYsZUFBUzNHLEtBQUs1RyxJQUFkO0FBQ0EyOUIsZUFBUy8yQixLQUFLdUksRUFBZDtBQUNBOUcsY0FBUXpCLEtBQUt5QixLQUFiOztBQUVBLFVBQUcsQ0FBQy9ELFFBQVE4NkIsWUFBUixDQUFxQmxXLE9BQXJCLEVBQThCdW5CLE9BQTlCLENBQUo7QUFDQyxjQUFPbndDLE9BQU9wRSxLQUFQLENBQWEsR0FBYixFQUFrQixlQUFsQixDQUFQO0FDQUc7O0FERUo4RCxhQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUI7QUFBRUMsYUFBSzBNO0FBQVAsT0FBakIsRUFBa0M7QUFBRW5OLGdCQUFRO0FBQUVzRyxvQkFBVTtBQUFaO0FBQVYsT0FBbEMsQ0FBUDtBQUVBRSxhQUFPbEcsR0FBR29HLEtBQUgsQ0FBU2xHLE9BQVQsQ0FBaUI7QUFBRUMsYUFBSzg4QjtBQUFQLE9BQWpCLEVBQWtDO0FBQUV2OUIsZ0JBQVE7QUFBRXNHLG9CQUFVO0FBQVo7QUFBVixPQUFsQyxDQUFQOztBQUVBLFVBQUcyQixVQUFTLFNBQVQsSUFBc0JBLFVBQVMsVUFBbEM7QUFDQyxjQUFNLElBQUkvSCxPQUFPcEUsS0FBWCxDQUFpQixHQUFqQixFQUFzQixTQUF0QixDQUFOO0FDVUc7O0FEUkosVUFBRyxDQUFDOEQsSUFBSjtBQUNDLGNBQU0sSUFBSU0sT0FBT3BFLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0IsUUFBdEIsQ0FBTjtBQ1VHOztBRFJKLFVBQUcsQ0FBQzBLLElBQUo7QUFDQyxjQUFNLElBQUl0RyxPQUFPcEUsS0FBWCxDQUFpQixHQUFqQixFQUFzQixRQUF0QixDQUFOO0FDVUc7O0FEUkosVUFBRyxDQUFDOEQsS0FBSzRzQixRQUFUO0FBQ0MsY0FBTSxJQUFJdHNCLE9BQU9wRSxLQUFYLENBQWlCLEdBQWpCLEVBQXNCLGFBQVc4RCxLQUFLMUosSUFBaEIsR0FBcUIsdUJBQTNDLENBQU47QUNVRzs7QURSSixVQUFHLENBQUNzUSxLQUFLZ21CLFFBQVQ7QUFDQyxjQUFNLElBQUl0c0IsT0FBT3BFLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0Isd0JBQXRCLENBQU47QUNVRzs7QURSSixVQUFHLENBQUMsQ0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixRQUFsQixFQUE0QnlTLFFBQTVCLENBQXFDL0gsS0FBS3FtQixRQUExQyxDQUFKO0FBQ0MsY0FBTSxJQUFJM3NCLE9BQU9wRSxLQUFYLENBQWlCLEdBQWpCLEVBQXNCLDJDQUF0QixDQUFOO0FDVUc7O0FEUkosVUFBRyxDQUFDb0YsRUFBRWpTLE9BQUYsQ0FBVXVYLEtBQUtKLE9BQUwsQ0FBYWUsS0FBdkIsQ0FBSjtBQUNDLGNBQU0sSUFBSWpILE9BQU9wRSxLQUFYLENBQWlCLEdBQWpCLEVBQXNCLG1CQUF0QixDQUFOO0FDVUc7O0FEUkosVUFBR29GLEVBQUVvdUIsSUFBRixDQUFPOW9CLEtBQUtKLE9BQUwsQ0FBYWUsS0FBcEIsRUFBMkIsTUFBM0IsRUFBbUN4WixNQUFuQyxLQUE2QzZZLEtBQUtKLE9BQUwsQ0FBYWUsS0FBYixDQUFtQnhaLE1BQW5FO0FBQ0MsY0FBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0IsMEJBQXRCLENBQU47QUNVRzs7QURSSnlsQixZQUFNLElBQUlqYyxJQUFKLEVBQU47O0FBRUEsVUFBRzJDLFVBQVMsU0FBWjtBQUVDekIsYUFBS0osT0FBTCxDQUFhZSxLQUFiLENBQW1CeEcsT0FBbkIsQ0FBMkIsVUFBQytXLElBQUQ7QUFDMUIsY0FBQSs0QixXQUFBOztBQUFBLGNBQUcsQ0FBQyxpQkFBRCxFQUFvQixpQkFBcEIsRUFBdUNsaUMsUUFBdkMsQ0FBZ0RtSixLQUFLbVIsU0FBckQsQ0FBSDtBQUNDLGdCQUFHLENBQUNuUixLQUFLZzVCLGFBQVQ7QUFDQyxvQkFBTSxJQUFJeHdDLE9BQU9wRSxLQUFYLENBQWlCLEdBQWpCLEVBQXNCLFFBQU00YixLQUFLeGhCLElBQVgsR0FBZ0IsZUFBdEMsQ0FBTjtBQUREO0FBR0N1NkMsNEJBQWN2dkMsRUFBRXVjLElBQUYsQ0FBT2pYLEtBQUtKLE9BQUwsQ0FBYWUsS0FBcEIsRUFBMkIsVUFBQ3dwQyxLQUFEO0FBQ3hDLHVCQUFPajVCLEtBQUtnNUIsYUFBTCxLQUFzQkMsTUFBTWx3QyxHQUFuQztBQURhLGdCQUFkOztBQUdBLGtCQUFHLENBQUNnd0MsV0FBSjtBQUNDLHNCQUFNLElBQUl2d0MsT0FBT3BFLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0IsUUFBTTRiLEtBQUt4aEIsSUFBWCxHQUFnQixlQUF0QyxDQUFOO0FBUEY7QUFERDtBQ21CTTtBRHBCUDtBQVdBczZDLG1DQUEyQjV3QyxLQUFLd0csT0FBTCxDQUFhcEcsTUFBYixDQUFvQmtGLFdBQXBCLENBQWdDLE1BQWhDLENBQTNCO0FBRUFzQixhQUFLSixPQUFMLENBQWFlLEtBQWIsQ0FBbUJ4RyxPQUFuQixDQUEyQixVQUFDK1csSUFBRDtBQ1dyQixpQkRWTEEsS0FBS2s1QixpQkFBTCxHQUF5QjF2QyxFQUFFdUcsWUFBRixDQUFlaVEsS0FBS2s1QixpQkFBcEIsRUFBdUNKLHdCQUF2QyxDQ1VwQjtBRFhOOztBQUlBLFlBQUc1d0MsS0FBS3FJLEtBQUwsS0FBYyxVQUFqQjtBQUNDM0gsYUFBR0MsS0FBSCxDQUFTZ3lCLE1BQVQsQ0FBZ0I7QUFBQzl4QixpQkFBS2IsS0FBS2E7QUFBWCxXQUFoQixFQUFpQztBQUFDK3hCLGtCQUFNO0FBQUMsdUJBQVMsU0FBVjtBQUFxQixvQ0FBc0JqUixHQUEzQztBQUFnRCxrQ0FBb0JBLEdBQXBFO0FBQXlFLHFDQUF1Qjh1QjtBQUFoRztBQUFQLFdBQWpDO0FDbUJJOztBRGpCTDdwQyxhQUFLSixPQUFMLENBQWErckIsUUFBYixHQUF3QjVRLEdBQXhCO0FBQ0EvYSxhQUFLSixPQUFMLENBQWF1ckIsVUFBYixHQUEwQnBRLEdBQTFCO0FBQ0EvYSxhQUFLSixPQUFMLENBQWFnc0IsV0FBYixHQUEyQmllLE9BQTNCO0FDbUJJLGVEakJKL3ZDLEdBQUdvRyxLQUFILENBQVM2ckIsTUFBVCxDQUFnQjtBQUFFOXhCLGVBQUsrRixLQUFLL0Y7QUFBWixTQUFoQixFQUFtQztBQUFFK3hCLGdCQUFNO0FBQUUscUJBQVMsU0FBWDtBQUFzQix1QkFBV2hzQixLQUFLSjtBQUF0QztBQUFSLFNBQW5DLENDaUJJO0FEM0NMO0FBOEJDOUYsV0FBR29HLEtBQUgsQ0FBUzZyQixNQUFULENBQWdCO0FBQUM5eEIsZUFBSytGLEtBQUsvRjtBQUFYLFNBQWhCLEVBQWlDO0FBQUMreEIsZ0JBQU07QUFBQyxxQkFBUyxVQUFWO0FBQXNCLGdDQUFvQmpSLEdBQTFDO0FBQStDLGtDQUFzQkEsR0FBckU7QUFBMEUsbUNBQXVCOHVCO0FBQWpHO0FBQVAsU0FBakM7QUFHQUMsaUJBQVNod0MsR0FBR29HLEtBQUgsQ0FBUytXLElBQVQsQ0FBYztBQUFFN2QsZ0JBQU1BLEtBQUthO0FBQWIsU0FBZCxFQUFrQztBQUFFVCxrQkFBUTtBQUFFUyxpQkFBSyxDQUFQO0FBQVV3SCxtQkFBTztBQUFqQjtBQUFWLFNBQWxDLEVBQW9FOFgsS0FBcEUsRUFBVDtBQUVBd3dCLHVCQUFlRCxPQUFPcHJDLFdBQVAsQ0FBbUIsT0FBbkIsQ0FBZjs7QUFFQSxZQUFHLENBQUNxckMsYUFBYWhpQyxRQUFiLENBQXNCLFNBQXRCLENBQUo7QUNtQ00saUJEbENMak8sR0FBR0MsS0FBSCxDQUFTZ3lCLE1BQVQsQ0FBZ0I7QUFBQzl4QixpQkFBS2IsS0FBS2E7QUFBWCxXQUFoQixFQUFpQztBQUFDK3hCLGtCQUFNO0FBQUMsdUJBQVMsVUFBVjtBQUFzQixrQ0FBb0JqUixHQUExQztBQUErQyxvQ0FBc0JBLEdBQXJFO0FBQTBFLHFDQUF1Qjh1QjtBQUFqRztBQUFQLFdBQWpDLENDa0NLO0FEeEVQO0FDbUZJO0FEMUhMLE1DREU7QURQSDtBQUFBLENBREQsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FFQUFud0MsT0FBT3NtQyxPQUFQLENBRUM7QUFBQXFLLGlCQUFlLFVBQUNyVCxLQUFELEVBQVFzVCxTQUFSO0FBQ2QsUUFBQTVxQyxRQUFBLEVBQUFxQixXQUFBLEVBQUFHLEtBQUEsRUFBQWlQLE1BQUE7O0FBQUEsUUFBRyxDQUFDLEtBQUtBLE1BQVQ7QUFDQztBQ0NFOztBRENIeWlCLFVBQU1vRSxLQUFOLEVBQWEzdUMsTUFBYjtBQUNBdXFDLFVBQU0wWCxTQUFOLEVBQWlCNTVDLE9BQWpCO0FBRUF5ZixhQUFTLEtBQUtBLE1BQWQ7QUFFQXpRLGVBQVc1RixHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQmc5QixLQUFyQixFQUE0QjtBQUFFeDlCLGNBQVE7QUFBRWlJLGVBQU8sQ0FBVDtBQUFZekIsY0FBTSxDQUFsQjtBQUFxQmtCLGVBQU87QUFBNUI7QUFBVixLQUE1QixDQUFYOztBQUVBLFFBQUcsQ0FBSXhCLFFBQVA7QUFDQyxZQUFNLElBQUloRyxPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixRQUEzQixDQUFOO0FDSUU7O0FERkgsUUFBR29LLFNBQVMrQixLQUFULEtBQW9CLFdBQXZCO0FBQ0MsWUFBTSxJQUFJL0gsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsWUFBM0IsQ0FBTjtBQ0lFOztBRERIeUwsa0JBQWM2cEIsa0JBQWtCQyxrQkFBbEIsQ0FBcUNuckIsU0FBU00sSUFBOUMsRUFBb0RtUSxNQUFwRCxDQUFkO0FBQ0FqUCxZQUFRcEgsR0FBRzJyQixNQUFILENBQVV6ckIsT0FBVixDQUFrQjBGLFNBQVN3QixLQUEzQixFQUFrQztBQUFFMUgsY0FBUTtBQUFFb3NCLGdCQUFRO0FBQVY7QUFBVixLQUFsQyxDQUFSOztBQUNBLFFBQUksQ0FBSTdrQixZQUFZZ0gsUUFBWixDQUFxQixPQUFyQixDQUFMLElBQXlDLENBQUk3RyxNQUFNMGtCLE1BQU4sQ0FBYTdkLFFBQWIsQ0FBc0JvSSxNQUF0QixDQUFoRDtBQUNDLFlBQU0sSUFBSXpXLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLGdCQUEzQixDQUFOO0FDT0U7O0FETEh3RSxPQUFHa2QsU0FBSCxDQUFhK1UsTUFBYixDQUFvQmlMLEtBQXBCLEVBQTJCO0FBQUVoTCxZQUFNO0FBQUVzZSxtQkFBV0E7QUFBYjtBQUFSLEtBQTNCO0FBRUEsV0FBTyxJQUFQO0FBekJEO0FBQUEsQ0FGRCxFOzs7Ozs7Ozs7Ozs7QUVBQTV3QyxPQUFPc21DLE9BQVAsQ0FDQztBQUFBdUsscUJBQW1CLFVBQUN2VCxLQUFEO0FBQ2xCLFFBQUEzOEIsR0FBQTs7QUFBQSxRQUFJLENBQUMsS0FBSzhWLE1BQVY7QUFDQztBQ0VFOztBRERILFlBQUE5VixNQUFBUCxHQUFBa2QsU0FBQSxDQUFBaGQsT0FBQTtBQ0dJQyxXQUFLKzhCO0FESFQsT0NJSztBQUNEeDlCLGNBQVE7QUFDTjRSLGdCQUFRO0FBREY7QUFEUCxLREpMLE1DUVMsSURSVCxHQ1FnQi9RLElEUmtEK1EsTUFBbEUsR0FBa0UsTUFBbEU7QUFIRDtBQUFBLENBREQsRTs7Ozs7Ozs7Ozs7O0FFQUEsSUFBQWt0QixPQUFBLEVBQUFrUyxtQkFBQTtBQUFBbFMsVUFBVXpILFFBQVEsU0FBUixDQUFWOztBQUVBMlosc0JBQXNCLFVBQUN4b0IsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYLEVBQWlCbnhCLE9BQWpCO0FBRXJCLE1BQUF3NUMsY0FBQSxFQUFBQyxPQUFBLEVBQUFDLGlCQUFBLEVBQUFDLE9BQUEsRUFBQXBzQyxLQUFBLEVBQUFxc0MsV0FBQSxFQUFBN2xDLElBQUEsRUFBQXRGLFFBQUEsRUFBQWdKLFVBQUEsRUFBQXJPLEdBQUEsRUFBQWtHLElBQUEsRUFBQVcsS0FBQSxFQUFBb2hCLE9BQUEsRUFBQXdvQixjQUFBLEVBQUF4cUMsSUFBQSxFQUFBNlAsTUFBQTs7QUFBQTdQLFNBQU81QyxRQUFRcXRDLGVBQVIsQ0FBd0Ivb0IsR0FBeEIsRUFBNkJsdkIsR0FBN0IsQ0FBUDs7QUFFQSxNQUFBa3ZCLE9BQUEsUUFBQTNuQixNQUFBMm5CLElBQUExM0IsS0FBQSxZQUFBK1AsSUFBZTJ3QyxZQUFmLEdBQWUsTUFBZixHQUFlLE1BQWY7QUFDQzc2QixhQUFTelMsUUFBUXV0Qyx3QkFBUixDQUFpQ2pwQixJQUFJMTNCLEtBQUosQ0FBVTBnRCxZQUEzQyxDQUFUOztBQUNBLFFBQUc3NkIsTUFBSDtBQUNDN1AsYUFBTzVHLE9BQU95bEIsS0FBUCxDQUFhbmxCLE9BQWIsQ0FBcUI7QUFBQ0MsYUFBS2tXO0FBQU4sT0FBckIsQ0FBUDtBQUhGO0FDUUU7O0FESEZtUyxZQUFVTixJQUFJb1YsTUFBSixDQUFXbDJCLEtBQXJCO0FBRUF3SCxlQUFhc1osSUFBSW9WLE1BQUosQ0FBVzVZLFdBQXhCO0FBRUE5ZSxhQUFXNUYsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBQ0MsU0FBS3lPO0FBQU4sR0FBckIsQ0FBWDtBQUVBeEgsVUFBUXBILEdBQUcyckIsTUFBSCxDQUFVenJCLE9BQVYsQ0FBa0I7QUFBQ0MsU0FBS3FvQjtBQUFOLEdBQWxCLENBQVI7QUFFQXVvQixnQkFBQSxDQUFBdHFDLE9BQUF5aEIsSUFBQTEzQixLQUFBLFlBQUFpVyxLQUF5QnNxQyxXQUF6QixHQUF5QixNQUF6Qjs7QUFFQSxNQUFHLENBQUM1NUMsT0FBSjtBQUNDQSxjQUFVO0FBQUNrVixpQkFBVztBQUFaLEtBQVY7QUFERDtBQUdDbFYsWUFBUWtWLFNBQVIsR0FBb0IsSUFBcEI7QUNNQzs7QURKRixNQUFHMGtDLGdCQUFlLEdBQWxCO0FBQ0MsUUFBRzU1QyxPQUFIO0FBQ0NBLGNBQVFrVixTQUFSLEdBQW9CLEtBQXBCO0FBREQ7QUFHQ2xWLGdCQUFVO0FBQUNrVixtQkFBVztBQUFaLE9BQVY7QUFKRjtBQ2FFOztBRFBGLE1BQUcsQ0FBQ2xWLFFBQVFvVixlQUFaO0FBQ0NwVixZQUFRb1YsZUFBUixHQUEwQixJQUExQjtBQ1NDOztBRFBGLE1BQUcsQ0FBQ25GLEtBQUo7QUFDQ2doQixlQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFDQztBQUFBLGlCQUFTLG1DQUFUO0FBQ0EsbUJBQVc7QUFEWDtBQUZELEtBREQ7QUFLQTtBQ1dDOztBRFRGLE1BQUksQ0FBQzhXLFFBQUw7QUFDQ3dpQixlQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFDQztBQUFBLGlCQUFTLHNDQUFUO0FBQ0EsbUJBQVc7QUFEWDtBQUZELEtBREQ7QUFLQTtBQ2FDOztBRFhGLE1BQUcsQ0FBQzBYLElBQUo7QUFDQzRoQixlQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFDQztBQUFBLGlCQUFTLG9EQUFUO0FBQ0EsbUJBQVc7QUFEWDtBQUZELEtBREQ7QUFLQTtBQ2VDOztBRGJGLE1BQUc4VyxTQUFTd0IsS0FBVCxLQUFrQm9oQixPQUFyQjtBQUNDSixlQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFDQztBQUFBLGlCQUFTLCtDQUFUO0FBQ0EsbUJBQVc7QUFEWDtBQUZELEtBREQ7QUFLQTtBQ2lCQzs7QURiRmtpRCxtQkFBaUJoeEMsR0FBR2dzQixXQUFILENBQWU3TyxJQUFmLENBQW9CO0FBQUUzVyxVQUFNQSxLQUFLckcsR0FBYjtBQUFrQmlILFdBQU9vaEI7QUFBekIsR0FBcEIsRUFBd0RwTCxLQUF4RCxFQUFqQjs7QUFFQSxNQUFHNHpCLG1CQUFrQixDQUFyQjtBQUNDLFFBQUcsQ0FBQzVwQyxLQUFKO0FBQ0NnaEIsaUJBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sY0FBTSxHQUFOO0FBQ0EzVyxjQUNDO0FBQUEsbUJBQVMsdUNBQVQ7QUFDQSxxQkFBVztBQURYO0FBRkQsT0FERDtBQUtBO0FBUEY7QUMyQkU7O0FEakJGNmhELG1CQUFpQnRwQyxnQkFBZ0IrcEMsc0JBQWhCLENBQXVDNXFDLElBQXZDLEVBQTZDWixRQUE3QyxDQUFqQjs7QUFFQSxNQUFHLENBQUMrcUMsY0FBRCxJQUFvQi9xQyxTQUFTMFgsd0JBQWhDO0FBQ0N1ekIsd0JBQW9CandDLEVBQUUyZixLQUFGLENBQVEsQ0FBQzNhLFNBQVMwWCx3QkFBVixDQUFSLEVBQTZDMVgsU0FBUzJZLHlCQUFULElBQXNDLEVBQW5GLENBQXBCO0FBRUFveUIscUJBQWlCL3ZDLEVBQUV1YyxJQUFGLENBQU8wekIsaUJBQVAsRUFBMEIsVUFBQ1EsVUFBRDtBQUMxQyxVQUFBQyxXQUFBOztBQUFBQSxvQkFBY3R4QyxHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFDQyxhQUFJa3hDO0FBQUwsT0FBckIsRUFBdUM7QUFBQzN4QyxnQkFBUTtBQUFDK0osa0JBQVE7QUFBVDtBQUFULE9BQXZDLENBQWQ7QUFFQSxhQUFPcEMsZ0JBQWdCK3BDLHNCQUFoQixDQUF1QzVxQyxJQUF2QyxFQUE2QzhxQyxXQUE3QyxDQUFQO0FBSGdCLE1BQWpCO0FDMkJDOztBRHRCRixNQUFHLENBQUNYLGNBQUo7QUFDQ0MsY0FBVWh0QyxRQUFRSSxNQUFSLENBQWV3QyxLQUFLckcsR0FBcEIsRUFBeUIsSUFBekIsQ0FBVjtBQUNBdUUsWUFBUUksUUFBUUMsRUFBUixDQUFXLDRCQUFYLEVBQXlDLEVBQXpDLEVBQTZDNnJDLE9BQTdDLENBQVI7QUFDQTUzQyxRQUFJdTRDLE9BQUosR0FBYyxPQUFkO0FBQ0FucEIsZUFBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNDO0FBQUF5TSxZQUFNLEdBQU47QUFDQTNXLFlBQ0M7QUFBQSxpQkFBUzRWLEtBQVQ7QUFDQSxtQkFBVztBQURYO0FBRkQsS0FERDtBQUtBO0FDMEJDOztBRHhCRndHLFNBQU8xSix5QkFBeUJtSixlQUF6QixDQUF5Q25FLElBQXpDLEVBQStDWSxLQUEvQyxFQUFzRHhCLFFBQXRELEVBQWdFek8sT0FBaEUsQ0FBUDtBQUNBMjVDLFlBQVUsSUFBSTFVLE1BQUosQ0FBV2x4QixJQUFYLENBQVY7QUFDQWxTLE1BQUlrK0IsU0FBSixDQUFjLGdCQUFkLEVBQWdDNFosUUFBUXpqRCxNQUF4QztBQUNBMkwsTUFBSWsrQixTQUFKLENBQWMsZUFBZCxFQUErQixjQUFXNFosUUFBUXpqRCxNQUFSLEdBQWlCLENBQTVCLElBQThCLEdBQTlCLEdBQWlDeWpELFFBQVF6akQsTUFBeEU7QUFDQTJMLE1BQUk4dUIsVUFBSixHQUFpQixHQUFqQjtBQzBCQyxTRHpCRDl1QixJQUFJNUgsR0FBSixDQUFROFosSUFBUixDQ3lCQztBRGxJb0IsQ0FBdEI7O0FBMkdBa2QsV0FBV0MsR0FBWCxDQUFlLEtBQWYsRUFBc0IsbURBQXRCLEVBQTJFcW9CLG1CQUEzRTtBQUVBdG9CLFdBQVdDLEdBQVgsQ0FBZSxLQUFmLEVBQXNCLGtFQUF0QixFQUEwRixVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFDekYsTUFBQW54QixPQUFBO0FBQUE2QixNQUFJaytCLFNBQUosQ0FBYyxjQUFkLEVBQThCLDBCQUE5QjtBQUNBbCtCLE1BQUlrK0IsU0FBSixDQUFjLHFCQUFkLEVBQXFDLHlCQUF1Qnp5QixVQUFVeWpCLElBQUlvVixNQUFKLENBQVc1QyxhQUFyQixDQUE1RDtBQUNBMWhDLE1BQUlrK0IsU0FBSixDQUFjLG1CQUFkLEVBQW1DLEVBQW5DO0FBRUEvL0IsWUFBVTtBQUFDb0UsY0FBVTtBQUFYLEdBQVY7QUFFQSxTQUFPbTFDLG9CQUFvQnhvQixHQUFwQixFQUF5Qmx2QixHQUF6QixFQUE4QnN2QixJQUE5QixFQUFvQ254QixPQUFwQyxDQUFQO0FBUEQsRyxDQVFBOzs7OztBQUtBaXhCLFdBQVdDLEdBQVgsQ0FBZSxLQUFmLEVBQXNCLHlCQUF0QixFQUFpRCxVQUFDSCxHQUFELEVBQU1sdkIsR0FBTixFQUFXc3ZCLElBQVg7QUFFaEQsTUFBQWhvQixDQUFBLEVBQUEyOEIsTUFBQSxFQUFBdVMsT0FBQSxFQUFBcHBDLEtBQUEsRUFBQXBYLENBQUEsRUFBQWt1QixTQUFBLEVBQUExc0IsS0FBQSxFQUFBK1AsR0FBQSxFQUFBa0csSUFBQSxFQUFBc1EsSUFBQSxFQUFBQyxJQUFBLEVBQUF3NkIsY0FBQSxFQUFBaHBCLE9BQUEsRUFBQWlwQixTQUFBLEVBQUF0akIsc0JBQUEsRUFBQW1KLFVBQUEsRUFBQW5GLE9BQUE7O0FBQUEsTUFBRyxDQUFDdnVCLFFBQVF1NkIsc0JBQVIsQ0FBK0JqVyxHQUEvQixFQUFvQ2x2QixHQUFwQyxDQUFKO0FBQ0M7QUNnQ0M7O0FEOUJGbTVCLFlBQVVqSyxJQUFJN1IsTUFBZDtBQUVBbVMsWUFBVU4sSUFBSWtXLE9BQUosQ0FBWSxZQUFaLENBQVY7O0FBRUEsTUFBRyxDQUFJNVYsT0FBUDtBQUNDSixlQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLFlBQU0sR0FBTjtBQUNBM1csWUFDQztBQUFBLGlCQUFTLHdDQUFUO0FBQ0EsbUJBQVc7QUFEWDtBQUZELEtBREQ7QUFLQTtBQ2dDQzs7QUQ5QkZtdUMsV0FBQSxDQUFBMThCLE1BQUEybkIsSUFBQTEzQixLQUFBLFlBQUErUCxJQUFvQjA4QixNQUFwQixHQUFvQixNQUFwQjs7QUFFQSxNQUFHLENBQUNBLE1BQUo7QUFDQzdVLGVBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sWUFBTSxHQUFOO0FBQ0EzVyxZQUNDO0FBQUEsaUJBQVMsb0NBQVQ7QUFDQSxtQkFBVztBQURYO0FBRkQsS0FERDtBQUtBO0FDaUNDOztBRC9CRjBCLFVBQVEsRUFBUjtBQUVBZ2hELG1CQUFpQixJQUFJeHNDLElBQUosR0FBV3lULE9BQVgsRUFBakI7QUFFQSsyQixZQUFVdlMsT0FBTy9vQyxLQUFQLENBQWEsR0FBYixDQUFWO0FBR0FrUyxVQUFRcEcsR0FBR29HLEtBQUgsQ0FBUytXLElBQVQsQ0FBYztBQUFDaGQsU0FBSztBQUFDcWUsV0FBS2d4QjtBQUFOO0FBQU4sR0FBZCxFQUFxQy92QixLQUFyQyxFQUFSO0FBRUF6d0IsTUFBSSxDQUFKOztBQUNBLFNBQU1BLElBQUlvWCxNQUFNL1ksTUFBaEI7QUFDQ2lULFFBQUk4RixNQUFNcFgsQ0FBTixDQUFKO0FBQ0F5aUQsZ0JBQVl6eEMsR0FBR2dzQixXQUFILENBQWU5ckIsT0FBZixDQUF1QjtBQUFDa0gsYUFBTzlHLEVBQUU4RyxLQUFWO0FBQWlCWixZQUFNMnJCO0FBQXZCLEtBQXZCLENBQVo7O0FBQ0EsUUFBRyxDQUFDc2YsU0FBSjtBQUNDcnBCLGlCQUFXSyxVQUFYLENBQXNCenZCLEdBQXRCLEVBQ0M7QUFBQXlNLGNBQU0sR0FBTjtBQUNBM1csY0FDQztBQUFBLG1CQUFTLGdEQUE4Q3dSLEVBQUVILEdBQXpEO0FBQ0EscUJBQVc7QUFEWDtBQUZELE9BREQ7QUFLQTtBQU5ELFlDNkNHOztBRG5DSCxRQUFHLENBQUN5RCxRQUFRODZCLFlBQVIsQ0FBcUJsVyxPQUFyQixFQUE4QjJKLE9BQTlCLENBQUo7QUFDQ2hFLCtCQUF5Qm51QixHQUFHZ3BCLGFBQUgsQ0FBaUI3TCxJQUFqQixDQUFzQjtBQUM5Q2hkLGFBQUs7QUFDSnFlLGVBQUtpekIsVUFBVXpvQjtBQURYO0FBRHlDLE9BQXRCLEVBSXRCdkosS0FKc0IsRUFBekI7O0FBTUEsVUFBRyxDQUFDcFksZ0JBQWdCcXFDLFVBQWhCLENBQTJCcHhDLENBQTNCLEVBQThCbXhDLFNBQTlCLEVBQXlDdGpCLHNCQUF6QyxDQUFELElBQXFFLENBQUM5bUIsZ0JBQWdCcW5CLFFBQWhCLENBQXlCcHVCLENBQXpCLEVBQTRCbXhDLFNBQTVCLEVBQXVDdGpCLHNCQUF2QyxDQUF6RTtBQUNDL0YsbUJBQVdLLFVBQVgsQ0FBc0J6dkIsR0FBdEIsRUFDQztBQUFBeU0sZ0JBQU0sR0FBTjtBQUNBM1csZ0JBQ0M7QUFBQSxxQkFBUyxnREFBOEN3UixFQUFFSCxHQUF6RDtBQUNBLHVCQUFXO0FBRFg7QUFGRCxTQUREO0FBS0E7QUFiRjtBQ29ERzs7QUR0Q0huUjtBQTNCRDs7QUE4QkF3QixRQUFNMFYsSUFBTixHQUFhO0FBQUNzWSxTQUFLZ3hCO0FBQU4sR0FBYjtBQUVBaC9DLFFBQU00VyxLQUFOLEdBQWNvaEIsT0FBZDs7QUFFQSxPQUFBL2hCLE9BQUF5aEIsSUFBQTEzQixLQUFBLFlBQUFpVyxLQUFjNndCLFVBQWQsR0FBYyxNQUFkO0FBQ0NBLGlCQUFhLElBQUl0eUIsSUFBSixDQUFTMmdDLE9BQU96ZCxJQUFJMTNCLEtBQUosQ0FBVThtQyxVQUFqQixDQUFULENBQWI7QUFDQTltQyxVQUFNcWhDLFFBQU4sR0FBaUI7QUFBQzhmLFdBQUtyYTtBQUFOLEtBQWpCO0FDeUNDOztBRHZDRixPQUFBdmdCLE9BQUFtUixJQUFBMTNCLEtBQUEsWUFBQXVtQixLQUFjekssY0FBZCxHQUFjLE1BQWQ7QUFDQzliLFVBQU04YixjQUFOLEdBQXVCO0FBQUNrUyxXQUFNMEosSUFBSTEzQixLQUFKLENBQVU4YixjQUFWLENBQXlCcFksS0FBekIsQ0FBK0IsR0FBL0I7QUFBUCxLQUF2QjtBQUREO0FBR0MxRCxVQUFNOGIsY0FBTixHQUF1QjtBQUFDc2xDLFlBQU0sQ0FBQyxZQUFELEVBQWUsVUFBZjtBQUFQLEtBQXZCO0FDNkNDOztBRDNDRixPQUFBNTZCLE9BQUFrUixJQUFBMTNCLEtBQUEsWUFBQXdtQixLQUFjclAsS0FBZCxHQUFjLE1BQWQ7QUFDQ25YLFVBQU1tWCxLQUFOLEdBQWM7QUFBQzZXLFdBQUswSixJQUFJMTNCLEtBQUosQ0FBVW1YLEtBQVYsQ0FBZ0J6VCxLQUFoQixDQUFzQixHQUF0QjtBQUFOLEtBQWQ7QUFERDtBQUdDMUQsVUFBTW1YLEtBQU4sR0FBYyxXQUFkO0FDK0NDOztBRDVDRnVWLGNBQVlsZCxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCM3NCLEtBQWxCLEVBQXlCO0FBQUNrUCxZQUFRO0FBQUNrZ0Msa0JBQVksQ0FBYjtBQUFnQjVSLGdCQUFVLENBQTFCO0FBQTZCMkQsb0JBQWMsQ0FBM0M7QUFBOENsb0IsY0FBUSxDQUF0RDtBQUF5RDhWLG1CQUFhO0FBQXRFLEtBQVQ7QUFBbUZzeUIsVUFBTSxDQUF6RjtBQUE0RmxVLFdBQU87QUFBbkcsR0FBekIsRUFBa0lsZSxLQUFsSSxFQUFaO0FBQ0F2QyxZQUFVN2MsT0FBVixDQUFrQixVQUFDdUYsUUFBRDtBQUVqQixRQUFBMlosV0FBQTtBQUFBQSxrQkFBY3RDLElBQUlDLFNBQUosQ0FBY0MsSUFBZCxDQUFtQjtBQUFDLDJCQUFxQnZYLFNBQVN6RixHQUEvQjtBQUFtQywwQkFBb0IsSUFBdkQ7QUFBNkQsNkJBQXVCO0FBQUNrZSxhQUFLO0FBQU47QUFBcEYsS0FBbkIsRUFBcUg7QUFBQzNlLGNBQVE7QUFBQzYrQixnQkFBUTtBQUFUO0FBQVQsS0FBckgsRUFBNEk5ZSxLQUE1SSxFQUFkO0FDa0VFLFdEaEVGN1osU0FBUzJaLFdBQVQsR0FBdUJBLFdDZ0VyQjtBRHBFSDtBQU9BNkksYUFBV0ssVUFBWCxDQUFzQnp2QixHQUF0QixFQUNFO0FBQUF5TSxVQUFNLEdBQU47QUFDQTNXLFVBQ0M7QUFBQSxnQkFBVSxTQUFWO0FBQ0Esb0JBQWMwaUQsY0FEZDtBQUVBLGNBQVF0MEI7QUFGUjtBQUZELEdBREY7QUE5RkQsRzs7Ozs7Ozs7Ozs7O0FFM0hBa0wsV0FBV0MsR0FBWCxDQUFlLEtBQWYsRUFBc0IsY0FBdEIsRUFBc0MsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBRXJDLE1BQUF3cEIsTUFBQSxFQUFBbG5DLFVBQUE7QUFBQWtuQyxXQUFTcmMsT0FBT3NjLG9CQUFQLEVBQVQ7QUFFQW5uQyxlQUFhLEVBQWI7QUFFQWtuQyxTQUFPenhDLE9BQVAsQ0FBZSxVQUFDMnhDLEdBQUQ7QUFDZCxRQUFBam5DLE9BQUEsRUFBQTBjLE9BQUE7O0FBQUEsUUFBR0MsMEJBQTBCQyxvQkFBN0I7QUFDQ0YsZ0JBQVVDLDBCQUEwQnVxQixRQUFwQzs7QUFDQSxVQUFHeHFCLFFBQVF5cUIsUUFBUixDQUFpQixHQUFqQixDQUFIO0FBQ0NubkMsa0JBQVUwYyxRQUFRcjVCLE9BQVIsQ0FBZ0JzNUIsMEJBQTBCQyxvQkFBMUIsR0FBaUQsR0FBakUsRUFBc0UsRUFBdEUsSUFBNEVxcUIsSUFBSS9rRCxHQUExRjtBQUREO0FBR0M4ZCxrQkFBVTBjLFFBQVFyNUIsT0FBUixDQUFnQnM1QiwwQkFBMEJDLG9CQUExQyxFQUFnRSxFQUFoRSxJQUFzRXFxQixJQUFJL2tELEdBQXBGO0FBTEY7QUFBQTtBQU9DOGQsZ0JBQVVuTCxPQUFPaUUsV0FBUCxDQUFtQm11QyxJQUFJL2tELEdBQXZCLENBQVY7QUNBRTs7QUFDRCxXREFGMmQsY0FBYyxpQkFBZUcsT0FBZixHQUF1QixJQ0FuQztBRFRIO0FBV0EvUixNQUFJOHVCLFVBQUosR0FBaUIsR0FBakI7QUNDQyxTREFEOXVCLElBQUk1SCxHQUFKLENBQVF3WixVQUFSLENDQUM7QURsQkYsRzs7Ozs7Ozs7Ozs7O0FFREF3ZCxXQUFXQyxHQUFYLENBQWUsS0FBZixFQUFzQiw2Q0FBdEIsRUFBcUUsVUFBQ0gsR0FBRCxFQUFNbHZCLEdBQU4sRUFBV3N2QixJQUFYO0FBQ3BFLE1BQUF3b0IsT0FBQSxFQUFBNXFDLElBQUEsRUFBQSsyQixNQUFBLEVBQUEzOUIsSUFBQSxFQUFBNEwsSUFBQSxFQUFBdEYsUUFBQSxFQUFBek8sT0FBQSxFQUFBaVEsS0FBQSxFQUFBb2hCLE9BQUEsRUFBQWhpQixJQUFBLEVBQUEyckIsT0FBQTs7QUFBQSxNQUFHLENBQUN2dUIsUUFBUXU2QixzQkFBUixDQUErQmpXLEdBQS9CLEVBQW9DbHZCLEdBQXBDLENBQUo7QUFDQztBQ0VDOztBREFGbTVCLFlBQVVqSyxJQUFJN1IsTUFBZDtBQUVBN1AsU0FBT3hHLEdBQUdxbEIsS0FBSCxDQUFTbmxCLE9BQVQsQ0FBaUI7QUFBRUMsU0FBS2d5QjtBQUFQLEdBQWpCLENBQVA7QUFFQTNKLFlBQVVOLElBQUlvVixNQUFKLENBQVdsMkIsS0FBckI7QUFFQTYxQixXQUFTL1UsSUFBSW9WLE1BQUosQ0FBV3AzQixJQUFwQjtBQUVBa0IsVUFBUXBILEdBQUcyckIsTUFBSCxDQUFVenJCLE9BQVYsQ0FBa0I7QUFBRUMsU0FBS3FvQjtBQUFQLEdBQWxCLENBQVI7QUFFQXRpQixTQUFPbEcsR0FBR29HLEtBQUgsQ0FBU2xHLE9BQVQsQ0FBaUI7QUFBRUMsU0FBSzg4QjtBQUFQLEdBQWpCLEVBQWtDO0FBQUV2OUIsWUFBUTtBQUFFOUosWUFBTSxDQUFSO0FBQVcscUJBQWUsQ0FBMUI7QUFBNkIwSixZQUFNO0FBQW5DO0FBQVYsR0FBbEMsQ0FBUDtBQUVBQSxTQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUI7QUFBRUMsU0FBSytGLEtBQUs1RztBQUFaLEdBQWpCLEVBQXFDO0FBQUVJLFlBQVE7QUFBRSxxQkFBZTtBQUFqQjtBQUFWLEdBQXJDLENBQVA7QUFFQXZJLFlBQVU7QUFDVGtWLGVBQVcsS0FERjtBQUVURSxxQkFBaUIsS0FGUjtBQUdUdkQsa0JBQWMsU0FITDtBQUlUWixjQUFVLElBSkQ7QUFLVHlELFdBQU8sTUFMRTtBQU1UdEMsb0JBQWdCLGtCQU5QO0FBT1RxRCxhQUFTLHdNQUtDMUcsS0FBS3RRLElBTE4sR0FLVztBQVpYLEdBQVY7QUE2QkFnUSxhQUFXO0FBQ1ZNLFVBQU1BLEtBQUsvRixHQUREO0FBRVZnRyxrQkFBY0QsS0FBS0osT0FBTCxDQUFhM0YsR0FGakI7QUFHVmIsVUFBTUEsS0FBS2EsR0FIRDtBQUlWWixrQkFBY0QsS0FBS3dHLE9BQUwsQ0FBYTNGLEdBSmpCO0FBS1ZtUixZQUFRLEVBTEU7QUFNVjFiLFVBQU1zUSxLQUFLdFEsSUFORDtBQU9Wd1IsV0FBT29oQjtBQVBHLEdBQVg7QUFVQXRkLFNBQU8xSix5QkFBeUJtSixlQUF6QixDQUF5Q25FLElBQXpDLEVBQStDWSxLQUEvQyxFQUFzRHhCLFFBQXRELEVBQWdFek8sT0FBaEUsQ0FBUDtBQUVBMjVDLFlBQVUsSUFBSTFVLE1BQUosQ0FBV2x4QixJQUFYLENBQVY7QUFFQWxTLE1BQUlrK0IsU0FBSixDQUFjLGdCQUFkLEVBQWdDNFosUUFBUXpqRCxNQUF4QztBQUVBMkwsTUFBSWsrQixTQUFKLENBQWMsZUFBZCxFQUErQixjQUFXNFosUUFBUXpqRCxNQUFSLEdBQWlCLENBQTVCLElBQThCLEdBQTlCLEdBQWlDeWpELFFBQVF6akQsTUFBeEU7QUFFQTJMLE1BQUk4dUIsVUFBSixHQUFpQixHQUFqQjtBQ1pDLFNEY0Q5dUIsSUFBSTVILEdBQUosQ0FBUThaLElBQVIsQ0NkQztBRHJERixHOzs7Ozs7Ozs7OztBRUFBdkwsS0FBSyxDQUFDN1IsU0FBTixDQUFnQmdtQixjQUFoQixHQUFpQyxVQUFTZ2MsQ0FBVCxFQUFZbGdDLENBQVosRUFBYztBQUMzQyxNQUFJdWlELENBQUMsR0FBRyxFQUFSO0FBQ0EsT0FBSzl4QyxPQUFMLENBQWEsVUFBU3BMLENBQVQsRUFBVztBQUNwQixRQUFJa3ZDLENBQUMsR0FBR2x2QyxDQUFDLEdBQUVBLENBQUMsQ0FBQzY2QixDQUFELENBQUgsR0FBTyxJQUFoQjtBQUNBLFFBQUk3eUIsQ0FBQyxHQUFHLEtBQVI7O0FBQ0EsUUFBR2tuQyxDQUFDLFlBQVl4a0MsS0FBaEIsRUFBc0I7QUFDbEIxQyxPQUFDLEdBQUdrbkMsQ0FBQyxDQUFDbDJCLFFBQUYsQ0FBV3JlLENBQVgsQ0FBSjtBQUNILEtBRkQsTUFFSztBQUNEcU4sT0FBQyxHQUFJck4sQ0FBQyxLQUFLckMsU0FBUCxHQUFtQixLQUFuQixHQUF5QjQyQyxDQUFDLElBQUV2MEMsQ0FBaEM7QUFDSDs7QUFDRCxRQUFHcU4sQ0FBSCxFQUFLO0FBQ0RrMUMsT0FBQyxDQUFDdDhDLElBQUYsQ0FBT1osQ0FBUDtBQUNIO0FBQ0osR0FYRDtBQVlBLFNBQU9rOUMsQ0FBUDtBQUNILENBZkQ7O0FBaUJBeHlDLEtBQUssQ0FBQzdSLFNBQU4sQ0FBZ0I4VyxXQUFoQixHQUE4QixVQUFTd3RDLENBQVQsRUFBVztBQUNyQyxNQUFJaG1ELENBQUMsR0FBRyxJQUFJdVQsS0FBSixFQUFSO0FBQ0EsT0FBS1UsT0FBTCxDQUFhLFVBQVNwTCxDQUFULEVBQVc7QUFDcEIsUUFBSWt2QyxDQUFDLEdBQUdsdkMsQ0FBQyxHQUFFQSxDQUFDLENBQUNtOUMsQ0FBRCxDQUFILEdBQU8sSUFBaEI7QUFDQWhtRCxLQUFDLENBQUN5SixJQUFGLENBQU9zdUMsQ0FBUDtBQUNILEdBSEQ7QUFJQSxTQUFPLzNDLENBQVA7QUFDSCxDQVBEOztBQVNBdVQsS0FBSyxDQUFDN1IsU0FBTixDQUFnQnVrRCxPQUFoQixHQUEwQixVQUFTNXNDLElBQVQsRUFBYztBQUNwQyxNQUFJa0IsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsT0FBSSxJQUFJM1gsQ0FBQyxHQUFHLENBQVosRUFBZ0JBLENBQUMsR0FBRyxLQUFLM0IsTUFBekIsRUFBa0MyQixDQUFDLEVBQW5DLEVBQXNDO0FBQ2xDMlgsT0FBRyxDQUFDOVEsSUFBSixDQUFTLEtBQUs3RyxDQUFMLEVBQVF5VyxJQUFSLENBQVQ7QUFDSDs7QUFDRCxTQUFPa0IsR0FBUDtBQUNILENBTkQ7O0FBUUFoSCxLQUFLLENBQUM3UixTQUFOLENBQWdCa2hDLElBQWhCLEdBQXVCLFlBQVU7QUFDN0IsTUFBSTVmLENBQUMsR0FBRyxFQUFSO0FBQ0EsT0FBSy9PLE9BQUwsQ0FBYSxVQUFTZ1AsQ0FBVCxFQUFXO0FBQ3BCLFFBQUdELENBQUMsQ0FBQ3hhLE9BQUYsQ0FBVXlhLENBQVYsSUFBZSxDQUFsQixFQUNJO0FBQUNELE9BQUMsQ0FBQ0EsQ0FBQyxDQUFDL2hCLE1BQUgsQ0FBRCxHQUFjZ2lCLENBQWQ7QUFBZ0I7QUFDeEIsR0FIRDtBQUlBLFNBQU9ELENBQVA7QUFDSCxDQVBEOztBQVNBc0MsWUFBWSxHQUFHLEVBQWY7O0FBR0FBLFlBQVksQ0FBQzRnQyxLQUFiLEdBQXFCLFVBQVNDLElBQVQsRUFBZXA1QyxHQUFmLEVBQW1CO0FBQ3BDLE9BQUksSUFBSS9DLEdBQVIsSUFBZStDLEdBQWYsRUFBbUI7QUFDZm81QyxRQUFJLENBQUNuOEMsR0FBRCxDQUFKLEdBQVkrQyxHQUFHLENBQUMvQyxHQUFELENBQWY7QUFDSDs7QUFDRCxTQUFPbThDLElBQVA7QUFDSCxDQUxEOztBQVFBN2dDLFlBQVksQ0FBQzhnQyxnQkFBYixHQUFnQyxVQUFTLzlCLENBQVQsRUFBVztBQUV2QyxNQUFHQSxDQUFDLFlBQVk5VSxLQUFoQixFQUFzQjtBQUNsQixRQUFJNkcsSUFBSSxHQUFHLEVBQVg7QUFFQUEsUUFBSSxDQUFDNVEsSUFBTCxHQUFZNmUsQ0FBQyxDQUFDN1AsV0FBRixDQUFjLE1BQWQsQ0FBWjtBQUNBNEIsUUFBSSxDQUFDeXNCLFlBQUwsR0FBb0IsRUFBcEI7QUFDQXpzQixRQUFJLENBQUN5c0IsWUFBTCxDQUFrQnI5QixJQUFsQixHQUF5QjZlLENBQUMsQ0FBQzdQLFdBQUYsQ0FBYyxjQUFkLEVBQThCQSxXQUE5QixDQUEwQyxNQUExQyxDQUF6QjtBQUNBNEIsUUFBSSxDQUFDeXNCLFlBQUwsQ0FBa0JwdUIsUUFBbEIsR0FBNkI0UCxDQUFDLENBQUM3UCxXQUFGLENBQWMsY0FBZCxFQUE4QkEsV0FBOUIsQ0FBMEMsVUFBMUMsQ0FBN0I7QUFFQTRCLFFBQUksQ0FBQ2lzQyxFQUFMLEdBQVVoK0IsQ0FBQyxDQUFDN1AsV0FBRixDQUFjLElBQWQsQ0FBVjtBQUVBNEIsUUFBSSxDQUFDa3NDLE9BQUwsR0FBZWorQixDQUFDLENBQUM3UCxXQUFGLENBQWMsU0FBZCxDQUFmO0FBRU40QixRQUFJLENBQUNtc0MsTUFBTCxHQUFjbCtCLENBQUMsQ0FBQzdQLFdBQUYsQ0FBYyxRQUFkLENBQWQ7QUFFQTRCLFFBQUksQ0FBQ29zQyxVQUFMLEdBQWtCbitCLENBQUMsQ0FBQzdQLFdBQUYsQ0FBYyxZQUFkLENBQWxCO0FBRUE0QixRQUFJLENBQUNxc0MsUUFBTCxHQUFnQnArQixDQUFDLENBQUM3UCxXQUFGLENBQWMsVUFBZCxDQUFoQjtBQUVNLFFBQUlrdUMsU0FBUyxHQUFHcitCLENBQUMsQ0FBQzdQLFdBQUYsQ0FBYyxPQUFkLENBQWhCO0FBQ0EsUUFBSTZtQixLQUFLLEdBQUcsSUFBSTlyQixLQUFKLEVBQVo7QUFDQW16QyxhQUFTLENBQUN6eUMsT0FBVixDQUFrQixVQUFTclIsQ0FBVCxFQUFXO0FBQ3pCeThCLFdBQUssR0FBR0EsS0FBSyxDQUFDbDFCLE1BQU4sQ0FBYXZILENBQWIsQ0FBUjtBQUNILEtBRkQ7QUFHQXk4QixTQUFLLENBQUN1RCxJQUFOO0FBQ0F4b0IsUUFBSSxDQUFDaWxCLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFdBQU9qbEIsSUFBUDtBQUNILEdBMUJELE1BMEJLO0FBQ0QsV0FBT2lPLENBQVA7QUFDSDtBQUNKLENBL0JEOztBQWlDQS9DLFlBQVksQ0FBQ3FoQyxlQUFiLEdBQStCLFVBQVNwK0IsQ0FBVCxFQUFXO0FBRXRDLE1BQUdBLENBQUMsWUFBWWhWLEtBQWhCLEVBQXNCO0FBQ2xCLFFBQUk0ckIsR0FBRyxHQUFHLEVBQVY7QUFDTkEsT0FBRyxDQUFDOWMsRUFBSixHQUFTa0csQ0FBQyxDQUFDL1AsV0FBRixDQUFjLEtBQWQsQ0FBVDtBQUNNMm1CLE9BQUcsQ0FBQzMxQixJQUFKLEdBQVcrZSxDQUFDLENBQUMvUCxXQUFGLENBQWMsTUFBZCxDQUFYO0FBQ0EybUIsT0FBRyxDQUFDMW1CLFFBQUosR0FBZThQLENBQUMsQ0FBQy9QLFdBQUYsQ0FBYyxVQUFkLENBQWY7QUFFQSxXQUFPMm1CLEdBQVA7QUFDSCxHQVBELE1BT0s7QUFDRCxXQUFPNVcsQ0FBUDtBQUNIO0FBQ0osQ0FaRDtBQWdCQTs7Ozs7OztBQUtBakQsWUFBWSxDQUFDb1osbUJBQWIsR0FBbUMsVUFBU3ByQixNQUFULEVBQWlCaXJCLFdBQWpCLEVBQThCQyxRQUE5QixFQUF3Q2pQLFNBQXhDLEVBQW1ENk0sT0FBbkQsRUFBMkQ7QUFDMUYsTUFBSXdxQixRQUFRLEdBQUcsRUFBZixDQUQwRixDQUUxRjs7QUFDQSxNQUFHdHpDLE1BQU0sSUFBSUEsTUFBTSxDQUFDclMsTUFBakIsSUFBMkJzOUIsV0FBOUIsRUFBMkM7QUFDdkM7QUFDQWpyQixVQUFNLENBQUNXLE9BQVAsQ0FBZSxVQUFTMEQsS0FBVCxFQUFlO0FBQzFCLFVBQUk1UixJQUFJLEdBQUc0UixLQUFLLENBQUM1UixJQUFqQjs7QUFDQSxVQUFHQSxJQUFILEVBQVM7QUFDTCxZQUFHQSxJQUFJLEtBQUssT0FBWixFQUFxQjtBQUNqQjs7Ozs7OztBQU9BLGNBQUk4Z0QsV0FBVyxHQUFHbHZDLEtBQUssQ0FBQ3VNLE9BQXhCO0FBQUEsY0FDSTRpQyxXQUFXLEdBQUd2b0IsV0FBVyxDQUFDNW1CLEtBQUssQ0FBQzBCLElBQVAsQ0FEN0I7QUFBQSxjQUVJMHRDLGtCQUFrQixHQUFHLEVBRnpCO0FBQUEsY0FHSUMsYUFBYSxHQUFHLEVBSHBCLENBUmlCLENBWWpCOztBQUNBLGNBQUdILFdBQVcsSUFBSUEsV0FBVyxDQUFDNWxELE1BQTNCLElBQXFDNmxELFdBQXJDLElBQW9EQSxXQUFXLFlBQVl2ekMsS0FBOUUsRUFBcUY7QUFDakZ1ekMsdUJBQVcsQ0FBQzd5QyxPQUFaLENBQW9CLFVBQVN3USxVQUFULEVBQW9CO0FBQ3BDc2lDLGdDQUFrQixDQUFDdDlDLElBQW5CLENBQXdCNmIsWUFBWSxDQUFDb1osbUJBQWIsQ0FBaUNtb0IsV0FBakMsRUFBOENwaUMsVUFBOUMsQ0FBeEI7QUFDSCxhQUZELEVBRUcsSUFGSCxFQURpRixDQUlqRjs7QUFDQW9pQyx1QkFBVyxDQUFDNXlDLE9BQVosQ0FBb0IsVUFBU2d6QyxVQUFULEVBQW9CO0FBQ3BDRCwyQkFBYSxDQUFDQyxVQUFVLENBQUM1dEMsSUFBWixDQUFiLEdBQWlDMHRDLGtCQUFrQixDQUFDZCxPQUFuQixDQUEyQmdCLFVBQVUsQ0FBQzV0QyxJQUF0QyxDQUFqQztBQUNILGFBRkQ7QUFHQXV0QyxvQkFBUSxHQUFHdGhDLFlBQVksQ0FBQzRnQyxLQUFiLENBQW1CVSxRQUFuQixFQUE2QkksYUFBN0IsQ0FBWDtBQUNIO0FBQ0osU0F2QkQsTUF1Qk8sSUFBSWpoRCxJQUFJLElBQUksTUFBWixFQUFtQjtBQUN0QjZnRCxrQkFBUSxDQUFDanZDLEtBQUssQ0FBQzBCLElBQVAsQ0FBUixHQUF1QmlNLFlBQVksQ0FBQzhnQyxnQkFBYixDQUE4Qm5yQyxlQUFlLENBQUMwK0IscUJBQWhCLENBQXNDdmQsT0FBdEMsRUFBK0NtQyxXQUFXLENBQUM1bUIsS0FBSyxDQUFDMEIsSUFBUCxDQUExRCxDQUE5QixDQUF2QjtBQUVILFNBSE0sTUFHQSxJQUFJdFQsSUFBSSxJQUFJLE9BQVosRUFBb0I7QUFDdkI2Z0Qsa0JBQVEsQ0FBQ2p2QyxLQUFLLENBQUMwQixJQUFQLENBQVIsR0FBdUJpTSxZQUFZLENBQUNxaEMsZUFBYixDQUE2QjFyQyxlQUFlLENBQUM0K0Isb0JBQWhCLENBQXFDdGIsV0FBVyxDQUFDNW1CLEtBQUssQ0FBQzBCLElBQVAsQ0FBaEQsQ0FBN0IsQ0FBdkI7QUFFSCxTQUhNLE1BR0EsSUFBSXRULElBQUksSUFBSSxPQUFaLEVBQW9CO0FBQ3RDNmdELGtCQUFRLENBQUNqdkMsS0FBSyxDQUFDMEIsSUFBUCxDQUFSLEdBQXVCa2xCLFdBQVcsQ0FBQzVtQixLQUFLLENBQUMwQixJQUFQLENBQVgsSUFBMkIsRUFBbEQ7QUFFQSxTQUhrQixNQUdaO0FBQ1M7QUFDQXV0QyxrQkFBUSxDQUFDanZDLEtBQUssQ0FBQzBCLElBQVAsQ0FBUixHQUF1QmtsQixXQUFXLENBQUM1bUIsS0FBSyxDQUFDMEIsSUFBUCxDQUFsQztBQUNIO0FBQ0o7QUFDSixLQXhDRCxFQXdDRyxJQXhDSDtBQXlDSCxHQTlDeUYsQ0ErQzFGOzs7QUFDQXV0QyxVQUFRLENBQUMsVUFBRCxDQUFSLEdBQXVCM3JDLGVBQWUsQ0FBQ3FqQixvQkFBaEIsQ0FBcUNsQyxPQUFyQyxFQUE4Q29DLFFBQTlDLENBQXZCLENBaEQwRixDQWlEMUY7O0FBQ0Fvb0IsVUFBUSxDQUFDLFdBQUQsQ0FBUixHQUF3QjNyQyxlQUFlLENBQUNxakIsb0JBQWhCLENBQXFDbEMsT0FBckMsRUFBOEM3TSxTQUE5QyxDQUF4QjtBQUVBLFNBQU9xM0IsUUFBUDtBQUNILENBckRELEM7Ozs7Ozs7Ozs7OztBQzVHQXhULHFCQUFxQixFQUFyQjs7QUFFQUEsbUJBQW1COFQsMEJBQW5CLEdBQWdELFVBQUNobEIsUUFBRCxFQUFXaWxCLFFBQVgsRUFBcUJubEIsUUFBckI7QUFDL0MsTUFBQXVGLGFBQUE7QUFBQUEsa0JBQWdCLElBQUloMEIsS0FBSixFQUFoQjs7QUFDQWlCLElBQUVxYixJQUFGLENBQU9xUyxRQUFQLEVBQWlCLFVBQUM2RCxPQUFEO0FBQ2hCLFFBQUE5TSxLQUFBOztBQUFBLFFBQUdybEIsR0FBR3FsQixLQUFILENBQVNsSSxJQUFULENBQWM7QUFBQ2hkLFdBQUtneUI7QUFBTixLQUFkLEVBQThCL1UsS0FBOUIsS0FBd0MsQ0FBM0M7QUFDQ2lJLGNBQVFtYSxtQkFBbUJnVSx5QkFBbkIsQ0FBNkNyaEIsT0FBN0MsRUFBc0RvaEIsUUFBdEQsRUFBZ0VubEIsUUFBaEUsQ0FBUjs7QUFDQSxVQUFHL0ksTUFBTWg0QixNQUFOLEdBQWUsQ0FBbEI7QUNPSyxlRE5Kc21DLGdCQUFnQkEsY0FBY3A5QixNQUFkLENBQXFCOHVCLEtBQXJCLENDTVo7QURUTjtBQUFBO0FBS0MsWUFBTSxJQUFJemxCLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLGVBQTNCLENBQU47QUNRRTtBRGRKOztBQVFBbTRCLGtCQUFnQi95QixFQUFFb3VCLElBQUYsQ0FBTzJFLGFBQVAsQ0FBaEI7QUFDQSxTQUFPQSxhQUFQO0FBWCtDLENBQWhEOztBQWFBNkwsbUJBQW1CZ1UseUJBQW5CLEdBQStDLFVBQUNyaEIsT0FBRCxFQUFVb2hCLFFBQVYsRUFBb0JubEIsUUFBcEI7QUFDOUMsTUFBQUUsUUFBQTtBQUFBQSxhQUFXLElBQUkzdUIsS0FBSixFQUFYOztBQUNBaUIsSUFBRXFiLElBQUYsQ0FBT3MzQixRQUFQLEVBQWlCLFVBQUNFLE9BQUQ7QUFDaEIsUUFBQXB1QixLQUFBOztBQUFBLFFBQUdybEIsR0FBRzRzQixVQUFILENBQWN6UCxJQUFkLENBQW1CO0FBQUNoZCxXQUFLc3pDO0FBQU4sS0FBbkIsRUFBbUNyMkIsS0FBbkMsS0FBNkMsQ0FBaEQ7QUFDQ2lJLGNBQVFtYSxtQkFBbUJrVSx3QkFBbkIsQ0FBNEN2aEIsT0FBNUMsRUFBcURzaEIsT0FBckQsRUFBOERybEIsUUFBOUQsQ0FBUjs7QUFDQSxVQUFHL0ksTUFBTWg0QixNQUFOLEdBQWUsQ0FBbEI7QUNjSyxlRGJKaWhDLFdBQVdBLFNBQVMvM0IsTUFBVCxDQUFnQjh1QixLQUFoQixDQ2FQO0FEaEJOO0FBQUE7QUFLQyxZQUFNLElBQUl6bEIsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsY0FBM0IsQ0FBTjtBQ2VFO0FEckJKOztBQVFBLE1BQUc4eUIsU0FBU2poQyxNQUFULEdBQWtCLENBQXJCO0FBQ0NpaEMsZUFBVzF0QixFQUFFb3VCLElBQUYsQ0FBT1YsUUFBUCxDQUFYO0FBQ0EsV0FBT0EsUUFBUDtBQUZEO0FBSUMsVUFBTSxJQUFJMXVCLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLDZCQUEzQixDQUFOO0FDZ0JDO0FEOUI0QyxDQUEvQzs7QUFnQkFna0MsbUJBQW1Ca1Usd0JBQW5CLEdBQThDLFVBQUN2aEIsT0FBRCxFQUFVc2hCLE9BQVYsRUFBbUJybEIsUUFBbkI7QUFDN0MsTUFBQTlFLElBQUEsRUFBQWdGLFFBQUE7QUFBQWhGLFNBQU90cEIsR0FBR2dwQixhQUFILENBQWlCN0wsSUFBakIsQ0FBc0I7QUFBRS9WLFdBQU9nbkIsUUFBVDtBQUFtQi9JLFdBQU84TTtBQUExQixHQUF0QixFQUEyRDtBQUFFenlCLFlBQVE7QUFBRVMsV0FBSztBQUFQO0FBQVYsR0FBM0QsRUFBbUZzZixLQUFuRixFQUFQO0FBQ0E2TyxhQUFXLElBQUkzdUIsS0FBSixFQUFYOztBQUNBaUIsSUFBRXFiLElBQUYsQ0FBT3FOLElBQVAsRUFBYSxVQUFDaUMsR0FBRDtBQUNaLFFBQUFsRyxLQUFBO0FBQUFBLFlBQVFtYSxtQkFBbUJtVSx1QkFBbkIsQ0FBMkNwb0IsSUFBSXByQixHQUEvQyxFQUFvRHN6QyxPQUFwRCxFQUE2RHJsQixRQUE3RCxDQUFSOztBQUNBLFFBQUcvSSxNQUFNaDRCLE1BQU4sR0FBZSxDQUFsQjtBQzJCSSxhRDFCSGloQyxXQUFXQSxTQUFTLzNCLE1BQVQsQ0FBZ0I4dUIsS0FBaEIsQ0MwQlI7QUFDRDtBRDlCSjs7QUFLQWlKLGFBQVcxdEIsRUFBRW91QixJQUFGLENBQU9WLFFBQVAsQ0FBWDtBQUNBLFNBQU9BLFFBQVA7QUFUNkMsQ0FBOUM7O0FBV0FrUixtQkFBbUJvVSx5QkFBbkIsR0FBK0MsVUFBQ0MsT0FBRCxFQUFVTixRQUFWLEVBQW9CbmxCLFFBQXBCO0FBQzlDLE1BQUFFLFFBQUE7QUFBQUEsYUFBVyxJQUFJM3VCLEtBQUosRUFBWDs7QUFDQWlCLElBQUVxYixJQUFGLENBQU80M0IsT0FBUCxFQUFnQixVQUFDck0sTUFBRDtBQUNmLFFBQUFuaUIsS0FBQTtBQUFBQSxZQUFRbWEsbUJBQW1Cc1Usd0JBQW5CLENBQTRDdE0sTUFBNUMsRUFBb0QrTCxRQUFwRCxFQUE4RG5sQixRQUE5RCxDQUFSOztBQUNBLFFBQUcvSSxNQUFNaDRCLE1BQU4sR0FBZSxDQUFsQjtBQytCSSxhRDlCSGloQyxXQUFXQSxTQUFTLzNCLE1BQVQsQ0FBZ0I4dUIsS0FBaEIsQ0M4QlI7QUFDRDtBRGxDSjs7QUFLQWlKLGFBQVcxdEIsRUFBRW91QixJQUFGLENBQU9WLFFBQVAsQ0FBWDtBQUNBLFNBQU9BLFFBQVA7QUFSOEMsQ0FBL0M7O0FBVUFrUixtQkFBbUJzVSx3QkFBbkIsR0FBOEMsVUFBQ3RNLE1BQUQsRUFBUytMLFFBQVQsRUFBbUJubEIsUUFBbkI7QUFDN0MsTUFBQUUsUUFBQTtBQUFBQSxhQUFXLElBQUkzdUIsS0FBSixFQUFYOztBQUNBaUIsSUFBRXFiLElBQUYsQ0FBT3MzQixRQUFQLEVBQWlCLFVBQUNFLE9BQUQ7QUFDaEIsUUFBQXB1QixLQUFBO0FBQUFBLFlBQVFtYSxtQkFBbUJtVSx1QkFBbkIsQ0FBMkNuTSxNQUEzQyxFQUFtRGlNLE9BQW5ELEVBQTREcmxCLFFBQTVELENBQVI7O0FBQ0EsUUFBRy9JLE1BQU1oNEIsTUFBTixHQUFlLENBQWxCO0FDbUNJLGFEbENIaWhDLFdBQVdBLFNBQVMvM0IsTUFBVCxDQUFnQjh1QixLQUFoQixDQ2tDUjtBQUNEO0FEdENKOztBQUtBLE1BQUdpSixTQUFTamhDLE1BQVQsR0FBa0IsQ0FBckI7QUFDQ2loQyxlQUFXMXRCLEVBQUVvdUIsSUFBRixDQUFPVixRQUFQLENBQVg7QUFDQSxXQUFPQSxRQUFQO0FBRkQ7QUFJQyxVQUFNLElBQUkxdUIsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsNEJBQTNCLENBQU47QUNvQ0M7QUQvQzJDLENBQTlDOztBQWFBZ2tDLG1CQUFtQm1VLHVCQUFuQixHQUE2QyxVQUFDbk0sTUFBRCxFQUFTaU0sT0FBVCxFQUFrQnJsQixRQUFsQjtBQUM1QyxNQUFBN0MsR0FBQSxFQUFBdnRCLE9BQUEsRUFBQXd0QixTQUFBLEVBQUE4QyxRQUFBO0FBQUEvQyxRQUFNdnJCLEdBQUdncEIsYUFBSCxDQUFpQjlvQixPQUFqQixDQUF5QjtBQUFFQyxTQUFLcW5DO0FBQVAsR0FBekIsRUFBMEM7QUFBRTluQyxZQUFRO0FBQUUxQixlQUFTO0FBQVg7QUFBVixHQUExQyxDQUFOO0FBQ0Fzd0IsYUFBVyxJQUFJM3VCLEtBQUosRUFBWDtBQUNBNnJCLGNBQVl4ckIsR0FBRzZzQixjQUFILENBQWtCMVAsSUFBbEIsQ0FBdUI7QUFBRS9WLFdBQU9nbkIsUUFBVDtBQUFtQjdDLFNBQUtpYyxNQUF4QjtBQUFnQ3VILFVBQU0wRTtBQUF0QyxHQUF2QixFQUF3RTtBQUFFL3pDLFlBQVE7QUFBRTJsQixhQUFPO0FBQVQ7QUFBVixHQUF4RSxFQUFrRzVGLEtBQWxHLEVBQVo7O0FBQ0E3ZSxJQUFFcWIsSUFBRixDQUFPdVAsU0FBUCxFQUFrQixVQUFDcW5CLFFBQUQ7QUNxRGYsV0RwREZ2a0IsV0FBV0EsU0FBUy8zQixNQUFULENBQWdCczhDLFNBQVN4dEIsS0FBekIsQ0NvRFQ7QURyREg7O0FBR0EsTUFBR2lKLFNBQVNqaEMsTUFBVCxLQUFtQixDQUF0QjtBQUNDMlEsY0FBVXV0QixJQUFJdnRCLE9BQWQ7O0FBQ0E0QyxNQUFFcWIsSUFBRixDQUFPamUsT0FBUCxFQUFnQixVQUFDKzFDLFNBQUQ7QUFDZnZvQixrQkFBWXhyQixHQUFHNnNCLGNBQUgsQ0FBa0IxUCxJQUFsQixDQUF1QjtBQUFFL1YsZUFBT2duQixRQUFUO0FBQW1CN0MsYUFBS3dvQixTQUF4QjtBQUFtQ2hGLGNBQU0wRTtBQUF6QyxPQUF2QixFQUEyRTtBQUFFL3pDLGdCQUFRO0FBQUUybEIsaUJBQU87QUFBVDtBQUFWLE9BQTNFLEVBQXFHNUYsS0FBckcsRUFBWjs7QUFDQSxVQUFHK0wsVUFBVW4rQixNQUFWLEdBQW1CLENBQXRCO0FDNkRLLGVENURKdVQsRUFBRXFiLElBQUYsQ0FBT3VQLFNBQVAsRUFBa0IsVUFBQ3FuQixRQUFEO0FDNkRaLGlCRDVETHZrQixXQUFXQSxTQUFTLzNCLE1BQVQsQ0FBZ0JzOEMsU0FBU3h0QixLQUF6QixDQzRETjtBRDdETixVQzRESTtBQUdEO0FEbEVMO0FDb0VDOztBRDVERmlKLGFBQVcxdEIsRUFBRW91QixJQUFGLENBQU9WLFFBQVAsQ0FBWDtBQUNBLFNBQU9BLFFBQVA7QUFsQjRDLENBQTdDOztBQW9CQWtSLG1CQUFtQkMsV0FBbkIsR0FBaUMsVUFBQy9hLFdBQUQsRUFBYytXLE9BQWQ7QUFDaEMsTUFBQXVZLFFBQUEsRUFBQUMsV0FBQSxFQUFBQyxNQUFBLEVBQUF2NEIsU0FBQSxFQUFBdzRCLGtCQUFBLEVBQUFsckIsZ0JBQUEsRUFBQTBLLGFBQUEsRUFBQXlnQixrQkFBQSxFQUFBQyxnQkFBQSxFQUFBakUsYUFBQSxFQUFBa0UsbUJBQUEsRUFBQUMsaUJBQUEsRUFBQXp1QyxPQUFBLEVBQUEwdUMsWUFBQSxFQUFBQyxvQkFBQSxFQUFBQyxZQUFBLEVBQUEzM0IsWUFBQSxFQUFBNDNCLGFBQUEsRUFBQXBzQixTQUFBLEVBQUFxc0IsVUFBQSxFQUFBQyxlQUFBLEVBQUF2bEIsT0FBQSxFQUFBd2xCLFFBQUEsRUFBQXgxQyxJQUFBLEVBQUF1RyxXQUFBLEVBQUF3aEMsT0FBQSxFQUFBME4sUUFBQSxFQUFBQyxRQUFBLEVBQUFwdkMsUUFBQSxFQUFBcXZDLG1CQUFBLEVBQUFDLHFCQUFBLEVBQUFDLGdCQUFBLEVBQUFDLGFBQUEsRUFBQUMsZUFBQSxFQUFBeEIsT0FBQSxFQUFBeUIsYUFBQSxFQUFBQyxZQUFBLEVBQUFubkIsUUFBQSxFQUFBb25CLGdCQUFBLEVBQUEvbUIsU0FBQSxFQUFBZ25CLG9CQUFBLEVBQUFDLGdCQUFBLEVBQUFwbkIsUUFBQSxFQUFBcW5CLGNBQUEsRUFBQXR3QixLQUFBLEVBQUF1d0Isc0JBQUE7O0FBQUFod0MsYUFBVzVGLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCd2tCLFdBQXJCLENBQVg7O0FBR0EsTUFBRzllLFNBQVN3Z0MsWUFBVCxJQUF5QnhnQyxTQUFTd2dDLFlBQVQsQ0FBc0IzSyxPQUF0QixDQUE1QjtBQUNDLFdBQU83MUIsU0FBU3dnQyxZQUFULENBQXNCM0ssT0FBdEIsQ0FBUDtBQzhEQzs7QUQ1REY5SCxrQkFBZ0IsSUFBSWgwQixLQUFKLEVBQWhCO0FBQ0F5dUIsYUFBV3hvQixTQUFTd0IsS0FBcEI7QUFDQWtvQixZQUFVMXBCLFNBQVNNLElBQW5CO0FBQ0E0dUMsYUFBV2x2QyxTQUFTTyxZQUFwQjtBQUNBcXVDLGlCQUFleDBDLEdBQUdvRyxLQUFILENBQVNsRyxPQUFULENBQWlCb3ZCLE9BQWpCLENBQWY7QUFDQXZTLGlCQUFlLElBQWY7QUFDQTQzQixrQkFBZ0IsSUFBSWgxQyxLQUFKLEVBQWhCOztBQUVBLE1BQUc2MEMsYUFBYTF1QyxPQUFiLENBQXFCM0YsR0FBckIsS0FBNEIyMEMsUUFBL0I7QUFDQ0gsb0JBQWdCSCxhQUFhMXVDLE9BQWIsQ0FBcUJlLEtBQXJDO0FBREQ7QUFHQ2YsY0FBVWxGLEVBQUV1YyxJQUFGLENBQU9xM0IsYUFBYXh1QyxRQUFwQixFQUE4QixVQUFDNnZDLE9BQUQ7QUFDdkMsYUFBT0EsUUFBUTExQyxHQUFSLEtBQWUyMEMsUUFBdEI7QUFEUyxNQUFWO0FBR0FILG9CQUFnQjd1QyxRQUFRZSxLQUF4QjtBQzZEQzs7QUQxREZrVyxpQkFBZW5jLEVBQUV1YyxJQUFGLENBQU93M0IsYUFBUCxFQUFzQixVQUFDdjlCLElBQUQ7QUFDcEMsV0FBT0EsS0FBS2pYLEdBQUwsS0FBWXM3QixPQUFuQjtBQURjLElBQWY7O0FBSUEsTUFBRzFlLGFBQWFXLFNBQWIsS0FBMEIsV0FBN0I7QUFDQ2c0Qix1QkFBbUI5MEMsRUFBRXVjLElBQUYsQ0FBT3ZYLFNBQVM2RCxNQUFoQixFQUF3QixVQUFDa0MsS0FBRDtBQUMxQyxhQUFPQSxNQUFNZ0wsV0FBTixLQUFxQixLQUE1QjtBQURrQixNQUFuQjtBQUlBLFdBQU8sSUFBSWhYLEtBQUosQ0FBVSsxQyxpQkFBaUJ4K0IsUUFBakIsQ0FBMEIsQ0FBMUIsRUFBNkIxUSxJQUF2QyxDQUFQO0FDMERDOztBRHhERixNQUFHdVcsYUFBYVcsU0FBYixLQUEwQixPQUE3QjtBQUNDczNCLGVBQVcsSUFBSXIxQyxLQUFKLEVBQVg7QUFDQXExQyxhQUFTbi9DLElBQVQsQ0FBYytQLFNBQVMrVixTQUF2QjtBQUNBcTVCLGFBQVNuL0MsSUFBVCxDQUFjK1AsU0FBUzZvQixTQUF2QjtBQUNBdW1CLGVBQVdwMEMsRUFBRW91QixJQUFGLENBQU9nbUIsUUFBUCxDQUFYO0FBQ0EsV0FBT0EsUUFBUDtBQzBEQzs7QUR4REZ6c0IsY0FBWXhMLGFBQWF3TCxTQUF6QjtBQUNBbEQsVUFBUSxJQUFJMWxCLEtBQUosRUFBUjs7QUFDQSxNQUFHNG9CLGNBQWEsZUFBaEI7QUFFQzVNLGdCQUFZL1YsU0FBUytWLFNBQXJCOztBQUNBLFFBQUdBLFNBQUg7QUFDQzY1Qix5QkFBbUJ4MUMsR0FBR2dzQixXQUFILENBQWU3TyxJQUFmLENBQW9CO0FBQUUvVixlQUFPZ25CLFFBQVQ7QUFBbUI1bkIsY0FBTW1WO0FBQXpCLE9BQXBCLEVBQTBEeUIsS0FBMUQsRUFBbkI7O0FBQ0EsVUFBR280QixxQkFBb0IsQ0FBdkI7QUFDQyxjQUFNLElBQUk1MUMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIscUJBQTNCLENBQU47QUM0REc7O0FEMURKLFVBQUd1aEIsYUFBYXF3QixjQUFiLElBQWdDcndCLGFBQWFxd0IsY0FBYixDQUE0Qi8vQyxNQUE1QixHQUFxQyxDQUF4RTtBQUNDdVQsVUFBRXFiLElBQUYsQ0FBT2MsYUFBYXF3QixjQUFwQixFQUFvQyxVQUFDMEksYUFBRDtBQUNuQyxjQUFBQyxVQUFBO0FBQUFBLHVCQUFhLzFDLEdBQUc0c0IsVUFBSCxDQUFjelAsSUFBZCxDQUFtQjtBQUFFaGQsaUJBQUsyMUM7QUFBUCxXQUFuQixFQUEyQzE0QixLQUEzQyxFQUFiOztBQUNBLGNBQUcyNEIsZUFBYyxDQUFqQjtBQUNDLGtCQUFNLElBQUluMkMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQytESztBRGxFUDs7QUFNQSxlQUFPZ2tDLG1CQUFtQmdVLHlCQUFuQixDQUE2QzczQixTQUE3QyxFQUF3RG9CLGFBQWFxd0IsY0FBckUsRUFBcUZoZixRQUFyRixDQUFQO0FBUEQ7QUFTQyxjQUFNLElBQUl4dUIsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQWRGO0FBQUE7QUFpQkMsWUFBTSxJQUFJb0UsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsZ0JBQTNCLENBQU47QUFwQkY7QUFBQSxTQXFCSyxJQUFHK3NCLGNBQWEsUUFBaEI7QUFDSlUsdUJBQW1CbE0sYUFBYWk1QixpQkFBaEM7O0FBQ0EsUUFBSS9zQixnQkFBSjtBQUNDLGFBQU9yb0IsRUFBRWlVLEtBQUYsQ0FBUXhOLGdCQUFnQjZoQixlQUFoQixDQUFnQ2tGLFFBQWhDLEVBQTBDbkYsZ0JBQTFDLENBQVIsRUFBcUUsTUFBckUsQ0FBUDtBQUREO0FBR0MsWUFBTSxJQUFJcnBCLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLE9BQTNCLENBQU47QUFMRztBQUFBLFNBTUEsSUFBRytzQixjQUFhLFdBQWhCO0FBRUo1TSxnQkFBWS9WLFNBQVMrVixTQUFyQjtBQUNBNjVCLHVCQUFtQngxQyxHQUFHZ3NCLFdBQUgsQ0FBZTdPLElBQWYsQ0FBb0I7QUFBRS9WLGFBQU9nbkIsUUFBVDtBQUFtQjVuQixZQUFNbVY7QUFBekIsS0FBcEIsRUFBMER5QixLQUExRCxFQUFuQjs7QUFDQSxRQUFHbzRCLHFCQUFvQixDQUF2QjtBQUNDLFlBQU0sSUFBSTUxQyxPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixxQkFBM0IsQ0FBTjtBQUREO0FBR0MsYUFBTyxJQUFJbUUsS0FBSixDQUFVZ2MsU0FBVixDQUFQO0FBUEc7QUFBQSxTQVFBLElBQUc0TSxjQUFhLGNBQWhCO0FBRUo4ZSxjQUFVbU4sYUFBYWwxQyxJQUF2QjtBQUNBeTFDLGVBQVcsSUFBWDs7QUFDQSxRQUFHRCxhQUFZTixhQUFhMXVDLE9BQWIsQ0FBcUIzRixHQUFwQztBQUNDNDBDLGlCQUFXUCxhQUFhMXVDLE9BQWIsQ0FBcUJ2RyxZQUFoQztBQUREO0FBR0NrMUMsNkJBQXVCN3pDLEVBQUV1YyxJQUFGLENBQU9xM0IsYUFBYXh1QyxRQUFwQixFQUE4QixVQUFDaXdDLG9CQUFEO0FBQ3BELGVBQU9BLHFCQUFxQjkxQyxHQUFyQixLQUE0QjIwQyxRQUFuQztBQURzQixRQUF2Qjs7QUFHQSxVQUFnREwsb0JBQWhEO0FBQUFNLG1CQUFXTixxQkFBcUJsMUMsWUFBaEM7QUFORDtBQzJFRzs7QURuRUhELFdBQU9VLEdBQUdDLEtBQUgsQ0FBU0MsT0FBVCxDQUFpQm1uQyxPQUFqQixDQUFQO0FBQ0FxTixtQkFBZSxJQUFmOztBQUNBLFFBQUdLLGFBQVl6MUMsS0FBS3dHLE9BQUwsQ0FBYTNGLEdBQTVCO0FBQ0N1MEMscUJBQWVwMUMsS0FBS3dHLE9BQXBCO0FBREQ7QUFHQzR1QyxxQkFBZTl6QyxFQUFFdWMsSUFBRixDQUFPN2QsS0FBSzBHLFFBQVosRUFBc0IsVUFBQ2t3QyxZQUFEO0FBQ3BDLGVBQU9BLGFBQWEvMUMsR0FBYixLQUFvQjQwQyxRQUEzQjtBQURjLFFBQWY7QUN1RUU7O0FEbkVIWCx5QkFBcUJyM0IsYUFBYXEzQixrQkFBbEM7QUFDQXZ1QyxrQkFBYzZ1QyxhQUFhaDFDLE1BQTNCO0FBQ0FrMUMsaUJBQWEsSUFBYjs7QUFDQWgwQyxNQUFFcWIsSUFBRixDQUFPcFcsV0FBUCxFQUFvQixVQUFDc3dDLFVBQUQ7QUFDbkIsVUFBR0EsV0FBV2gyQyxHQUFYLEtBQWtCaTBDLGtCQUFyQjtBQ3FFSyxlRHBFSlEsYUFBYXVCLFdBQVcxd0MsSUNvRXBCO0FBQ0Q7QUR2RUw7O0FBTUEydkMsb0JBQWdCdDFDLGNBQWM0MEIsZ0JBQWQsQ0FBK0I5dUIsUUFBL0IsQ0FBaEI7QUFDQWl1QyxjQUFVLElBQUlsMEMsS0FBSixFQUFWO0FBQ0EyMUMsb0JBQWdCLElBQUkzMUMsS0FBSixFQUFoQjs7QUFDQSxRQUFHeTFDLGNBQWNSLFVBQWQsQ0FBSDtBQUNDLFVBQUdRLGNBQWNSLFVBQWQsYUFBcUNqMUMsS0FBeEM7QUFDQzIxQyx3QkFBZ0JGLGNBQWNSLFVBQWQsQ0FBaEI7QUFERDtBQUdDVSxzQkFBY3ovQyxJQUFkLENBQW1CdS9DLGNBQWNSLFVBQWQsQ0FBbkI7QUFKRjtBQ3lFRzs7QURsRUhoMEMsTUFBRXFiLElBQUYsQ0FBT3E1QixhQUFQLEVBQXNCLFVBQUMvcEIsR0FBRDtBQUNyQixVQUFBNnFCLGVBQUE7QUFBQUEsd0JBQWtCcDJDLEdBQUdncEIsYUFBSCxDQUFpQjdMLElBQWpCLENBQXNCO0FBQUVoZCxhQUFLb3JCLElBQUksSUFBSjtBQUFQLE9BQXRCLEVBQTBDbk8sS0FBMUMsRUFBbEI7O0FBQ0EsVUFBR2c1QixvQkFBbUIsQ0FBdEI7QUFDQyxjQUFNLElBQUl4MkMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQ3VFRzs7QUFDRCxhRHZFSHE0QyxRQUFRaCtDLElBQVIsQ0FBYTAxQixJQUFJLElBQUosQ0FBYixDQ3VFRztBRDNFSjs7QUFPQSxRQUFHeE8sYUFBYXF3QixjQUFiLElBQWdDcndCLGFBQWFxd0IsY0FBYixDQUE0Qi8vQyxNQUE1QixHQUFxQyxDQUF4RTtBQUVDdVQsUUFBRXFiLElBQUYsQ0FBT2MsYUFBYXF3QixjQUFwQixFQUFvQyxVQUFDMEksYUFBRDtBQUNuQyxZQUFBQyxVQUFBO0FBQUFBLHFCQUFhLzFDLEdBQUc0c0IsVUFBSCxDQUFjelAsSUFBZCxDQUFtQjtBQUFFaGQsZUFBSzIxQztBQUFQLFNBQW5CLEVBQTJDMTRCLEtBQTNDLEVBQWI7O0FBQ0EsWUFBRzI0QixlQUFjLENBQWpCO0FBQ0MsZ0JBQU0sSUFBSW4yQyxPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQnM2QyxnQkFBZ0IsT0FBM0MsQ0FBTjtBQ3lFSTtBRDVFTjs7QUFLQSxhQUFPdFcsbUJBQW1Cb1UseUJBQW5CLENBQTZDQyxPQUE3QyxFQUFzRDkyQixhQUFhcXdCLGNBQW5FLEVBQW1GeG5DLFNBQVN3QixLQUE1RixDQUFQO0FBUEQ7QUFTQyxZQUFNLElBQUl4SCxPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixTQUFTdWhCLGFBQWFubkIsSUFBdEIsR0FBNkIsU0FBeEQsQ0FBTjtBQXhERztBQUFBLFNBeURBLElBQUcyeUIsY0FBYSxVQUFoQjtBQUVKOGUsY0FBVW1OLGFBQWFsMUMsSUFBdkI7QUFDQXkxQyxlQUFXLElBQVg7O0FBQ0EsUUFBR0QsYUFBWU4sYUFBYTF1QyxPQUFiLENBQXFCM0YsR0FBcEM7QUFDQzQwQyxpQkFBV1AsYUFBYTF1QyxPQUFiLENBQXFCdkcsWUFBaEM7QUFERDtBQUdDazFDLDZCQUF1Qjd6QyxFQUFFdWMsSUFBRixDQUFPcTNCLGFBQWF4dUMsUUFBcEIsRUFBOEIsVUFBQ2l3QyxvQkFBRDtBQUNwRCxlQUFPQSxxQkFBcUI5MUMsR0FBckIsS0FBNEIyMEMsUUFBbkM7QUFEc0IsUUFBdkI7O0FBR0EsVUFBZ0RMLG9CQUFoRDtBQUFBTSxtQkFBV04scUJBQXFCbDFDLFlBQWhDO0FBTkQ7QUNrRkc7O0FEMUVIRCxXQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUJtbkMsT0FBakIsQ0FBUDtBQUNBcU4sbUJBQWUsSUFBZjs7QUFDQSxRQUFHSyxhQUFZejFDLEtBQUt3RyxPQUFMLENBQWEzRixHQUE1QjtBQUNDdTBDLHFCQUFlcDFDLEtBQUt3RyxPQUFwQjtBQUREO0FBR0M0dUMscUJBQWU5ekMsRUFBRXVjLElBQUYsQ0FBTzdkLEtBQUswRyxRQUFaLEVBQXNCLFVBQUNrd0MsWUFBRDtBQUNwQyxlQUFPQSxhQUFhLzFDLEdBQWIsS0FBb0I0MEMsUUFBM0I7QUFEYyxRQUFmO0FDOEVFOztBRDFFSFgseUJBQXFCcjNCLGFBQWFxM0Isa0JBQWxDO0FBQ0F2dUMsa0JBQWM2dUMsYUFBYWgxQyxNQUEzQjtBQUNBazFDLGlCQUFhLElBQWI7O0FBQ0FoMEMsTUFBRXFiLElBQUYsQ0FBT3BXLFdBQVAsRUFBb0IsVUFBQ3N3QyxVQUFEO0FBQ25CLFVBQUdBLFdBQVdoMkMsR0FBWCxLQUFrQmkwQyxrQkFBckI7QUM0RUssZUQzRUpRLGFBQWF1QixXQUFXMXdDLElDMkVwQjtBQUNEO0FEOUVMOztBQU1BMnZDLG9CQUFnQnQxQyxjQUFjNDBCLGdCQUFkLENBQStCOXVCLFFBQS9CLENBQWhCO0FBRUFpdUMsY0FBVSxJQUFJbDBDLEtBQUosRUFBVjtBQUNBMjFDLG9CQUFnQixJQUFJMzFDLEtBQUosRUFBaEI7O0FBQ0EsUUFBR3kxQyxjQUFjUixVQUFkLENBQUg7QUFDQyxVQUFHUSxjQUFjUixVQUFkLGFBQXFDajFDLEtBQXhDO0FBQ0MyMUMsd0JBQWdCRixjQUFjUixVQUFkLENBQWhCO0FBREQ7QUFHQ1Usc0JBQWN6L0MsSUFBZCxDQUFtQnUvQyxjQUFjUixVQUFkLENBQW5CO0FBSkY7QUMrRUc7O0FEeEVIaDBDLE1BQUVxYixJQUFGLENBQU9xNUIsYUFBUCxFQUFzQixVQUFDL3BCLEdBQUQ7QUFDckIsVUFBQTZxQixlQUFBO0FBQUFBLHdCQUFrQnAyQyxHQUFHZ3BCLGFBQUgsQ0FBaUI3TCxJQUFqQixDQUFzQjtBQUFFaGQsYUFBS29yQixJQUFJLElBQUo7QUFBUCxPQUF0QixFQUEwQ25PLEtBQTFDLEVBQWxCOztBQUNBLFVBQUdnNUIsb0JBQW1CLENBQXRCO0FBQ0MsY0FBTSxJQUFJeDJDLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLFNBQTNCLENBQU47QUM2RUc7O0FBQ0QsYUQ3RUhxNEMsUUFBUWgrQyxJQUFSLENBQWEwMUIsSUFBSSxJQUFKLENBQWIsQ0M2RUc7QURqRko7O0FBUUErQyxlQUFXLElBQUkzdUIsS0FBSixFQUFYOztBQUNBaUIsTUFBRXFiLElBQUYsQ0FBTzQzQixPQUFQLEVBQWdCLFVBQUNyTSxNQUFEO0FBQ2YsVUFBQTZPLFVBQUEsRUFBQTlxQixHQUFBLEVBQUErcUIsWUFBQSxFQUFBQyxTQUFBO0FBQUFockIsWUFBTXZyQixHQUFHZ3BCLGFBQUgsQ0FBaUI5b0IsT0FBakIsQ0FBeUI7QUFBRUMsYUFBS3FuQztBQUFQLE9BQXpCLEVBQTBDO0FBQUU5bkMsZ0JBQVE7QUFBRTJsQixpQkFBTztBQUFUO0FBQVYsT0FBMUMsQ0FBTjtBQUNBaXhCLHFCQUFldDJDLEdBQUdncEIsYUFBSCxDQUFpQjdMLElBQWpCLENBQXNCO0FBQUUvVixlQUFPZ25CLFFBQVQ7QUFBbUJwd0IsaUJBQVN3cEM7QUFBNUIsT0FBdEIsRUFBNEQ7QUFBRTluQyxnQkFBUTtBQUFFMmxCLGlCQUFPO0FBQVQ7QUFBVixPQUE1RCxFQUFzRjVGLEtBQXRGLEVBQWY7QUFDQTYyQixtQkFBYTU2QyxPQUFiLENBQXFCNnZCLEdBQXJCO0FBQ0E4cUIsbUJBQWFDLFlBQWI7QUFDQUMsa0JBQVksSUFBSTUyQyxLQUFKLEVBQVo7O0FBQ0FpQixRQUFFcWIsSUFBRixDQUFPbzZCLFVBQVAsRUFBbUIsVUFBQ0csY0FBRDtBQUNsQixZQUFHQSxlQUFlbnhCLEtBQWxCO0FBQ0N6a0IsWUFBRXFiLElBQUYsQ0FBT3U2QixlQUFlbnhCLEtBQXRCLEVBQTZCLFVBQUNveEIsUUFBRDtBQUM1QixnQkFBR3oyQyxHQUFHZ3NCLFdBQUgsQ0FBZTdPLElBQWYsQ0FBb0I7QUFBRS9WLHFCQUFPZ25CLFFBQVQ7QUFBbUI1bkIsb0JBQU1pd0M7QUFBekIsYUFBcEIsRUFBeURyNUIsS0FBekQsT0FBb0UsQ0FBdkU7QUFDQyxvQkFBTSxJQUFJeGQsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsZ0JBQTNCLENBQU47QUM2Rk07QUQvRlI7QUNpR0k7O0FEN0ZMOHlCLG1CQUFXQSxTQUFTLzNCLE1BQVQsQ0FBZ0JpZ0QsZUFBZW54QixLQUEvQixDQUFYO0FDK0ZJLGVEOUZKa3hCLFlBQVlBLFVBQVVoZ0QsTUFBVixDQUFpQmlnRCxlQUFlbnhCLEtBQWhDLENDOEZSO0FEckdMOztBQVVBLFVBQUdreEIsVUFBVWxwRCxNQUFWLEtBQW9CLENBQXZCO0FBQ0MsY0FBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsT0FBT2dzQyxNQUFQLEdBQWdCLFFBQTNDLENBQU47QUM4Rkc7QUQvR0w7O0FBcUJBbFosZUFBVzF0QixFQUFFb3VCLElBQUYsQ0FBT1YsUUFBUCxDQUFYO0FBQ0EsV0FBT0EsUUFBUDtBQXhFSSxTQXlFQSxJQUFHL0YsY0FBYSxlQUFoQjtBQUVKOGUsY0FBVW1OLGFBQWFsMUMsSUFBdkI7QUFDQXkxQyxlQUFXLElBQVg7O0FBQ0EsUUFBR0QsYUFBWU4sYUFBYTF1QyxPQUFiLENBQXFCM0YsR0FBcEM7QUFDQzQwQyxpQkFBV1AsYUFBYTF1QyxPQUFiLENBQXFCdkcsWUFBaEM7QUFERDtBQUdDazFDLDZCQUF1Qjd6QyxFQUFFdWMsSUFBRixDQUFPcTNCLGFBQWF4dUMsUUFBcEIsRUFBOEIsVUFBQ2l3QyxvQkFBRDtBQUNwRCxlQUFPQSxxQkFBcUI5MUMsR0FBckIsS0FBNEIyMEMsUUFBbkM7QUFEc0IsUUFBdkI7O0FBR0EsVUFBZ0RMLG9CQUFoRDtBQUFBTSxtQkFBV04scUJBQXFCbDFDLFlBQWhDO0FBTkQ7QUNvR0c7O0FENUZIRCxXQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUJtbkMsT0FBakIsQ0FBUDtBQUNBcU4sbUJBQWUsSUFBZjs7QUFDQSxRQUFHSyxhQUFZejFDLEtBQUt3RyxPQUFMLENBQWEzRixHQUE1QjtBQUNDdTBDLHFCQUFlcDFDLEtBQUt3RyxPQUFwQjtBQUREO0FBR0M0dUMscUJBQWU5ekMsRUFBRXVjLElBQUYsQ0FBTzdkLEtBQUswRyxRQUFaLEVBQXNCLFVBQUNrd0MsWUFBRDtBQUNwQyxlQUFPQSxhQUFhLzFDLEdBQWIsS0FBb0I0MEMsUUFBM0I7QUFEYyxRQUFmO0FDZ0dFOztBRDVGSFQsMEJBQXNCdjNCLGFBQWF1M0IsbUJBQW5DO0FBQ0F6dUMsa0JBQWM2dUMsYUFBYWgxQyxNQUEzQjtBQUNBazFDLGlCQUFhLElBQWI7O0FBQ0FoMEMsTUFBRXFiLElBQUYsQ0FBT3BXLFdBQVAsRUFBb0IsVUFBQ3N3QyxVQUFEO0FBQ25CLFVBQUdBLFdBQVdoMkMsR0FBWCxLQUFrQm0wQyxtQkFBckI7QUM4RkssZUQ3RkpNLGFBQWF1QixXQUFXMXdDLElDNkZwQjtBQUNEO0FEaEdMOztBQU1BMnZDLG9CQUFnQnQxQyxjQUFjNDBCLGdCQUFkLENBQStCOXVCLFFBQS9CLENBQWhCO0FBRUErdkMscUJBQWlCLElBQUloMkMsS0FBSixFQUFqQjs7QUFDQSxRQUFHeTFDLGNBQWNSLFVBQWQsQ0FBSDtBQUNDLFVBQUdRLGNBQWNSLFVBQWQsYUFBcUNqMUMsS0FBeEM7QUFDQ2cyQyx5QkFBaUJQLGNBQWNSLFVBQWQsQ0FBakI7QUFERDtBQUdDZSx1QkFBZTkvQyxJQUFmLENBQW9CdS9DLGNBQWNSLFVBQWQsQ0FBcEI7QUFKRjtBQ2lHRzs7QUQxRkh0bUIsZUFBVyxJQUFJM3VCLEtBQUosRUFBWDs7QUFDQWlCLE1BQUVxYixJQUFGLENBQU8wNUIsY0FBUCxFQUF1QixVQUFDbnZDLElBQUQ7QUFDdEIsVUFBQWt3QyxnQkFBQTtBQUFBQSx5QkFBbUIxMkMsR0FBR2dzQixXQUFILENBQWU3TyxJQUFmLENBQW9CO0FBQUUvVixlQUFPZ25CLFFBQVQ7QUFBbUI1bkIsY0FBTUEsS0FBSyxJQUFMO0FBQXpCLE9BQXBCLEVBQTJENFcsS0FBM0QsRUFBbkI7O0FBQ0EsVUFBR3M1QixxQkFBb0IsQ0FBdkI7QUFDQyxjQUFNLElBQUk5MkMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQ2dHRzs7QUFDRCxhRGhHSDh5QixTQUFTejRCLElBQVQsQ0FBYzJRLEtBQUssSUFBTCxDQUFkLENDZ0dHO0FEcEdKOztBQU9BOG5CLGVBQVcxdEIsRUFBRW91QixJQUFGLENBQU9WLFFBQVAsQ0FBWDs7QUFDQSxRQUFHdlIsYUFBYXF3QixjQUFiLElBQWdDcndCLGFBQWFxd0IsY0FBYixDQUE0Qi8vQyxNQUE1QixHQUFxQyxDQUF4RTtBQUVDdVQsUUFBRXFiLElBQUYsQ0FBT2MsYUFBYXF3QixjQUFwQixFQUFvQyxVQUFDMEksYUFBRDtBQUNuQyxZQUFBQyxVQUFBO0FBQUFBLHFCQUFhLzFDLEdBQUc0c0IsVUFBSCxDQUFjelAsSUFBZCxDQUFtQjtBQUFFaGQsZUFBSzIxQztBQUFQLFNBQW5CLEVBQTJDMTRCLEtBQTNDLEVBQWI7O0FBQ0EsWUFBRzI0QixlQUFjLENBQWpCO0FBQ0MsZ0JBQU0sSUFBSW4yQyxPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQnM2QyxnQkFBZ0IsT0FBM0MsQ0FBTjtBQ2tHSTtBRHJHTjs7QUFLQSxhQUFPdFcsbUJBQW1COFQsMEJBQW5CLENBQThDaGxCLFFBQTlDLEVBQXdEdlIsYUFBYXF3QixjQUFyRSxFQUFxRnhuQyxTQUFTd0IsS0FBOUYsQ0FBUDtBQVBEO0FBU0MsWUFBTSxJQUFJeEgsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBU3VoQixhQUFhbm5CLElBQXRCLEdBQTZCLFNBQXhELENBQU47QUExREc7QUFBQSxTQTJEQSxJQUFHMnlCLGNBQWEsV0FBaEI7QUFFSjhlLGNBQVVtTixhQUFhbDFDLElBQXZCO0FBQ0F5MUMsZUFBVyxJQUFYOztBQUNBLFFBQUdELGFBQVlOLGFBQWExdUMsT0FBYixDQUFxQjNGLEdBQXBDO0FBQ0M0MEMsaUJBQVdQLGFBQWExdUMsT0FBYixDQUFxQnZHLFlBQWhDO0FBREQ7QUFHQ2sxQyw2QkFBdUI3ekMsRUFBRXVjLElBQUYsQ0FBT3EzQixhQUFheHVDLFFBQXBCLEVBQThCLFVBQUNpd0Msb0JBQUQ7QUFDcEQsZUFBT0EscUJBQXFCOTFDLEdBQXJCLEtBQTRCMjBDLFFBQW5DO0FBRHNCLFFBQXZCOztBQUdBLFVBQWdETCxvQkFBaEQ7QUFBQU0sbUJBQVdOLHFCQUFxQmwxQyxZQUFoQztBQU5EO0FDMkdHOztBRG5HSEQsV0FBT1UsR0FBR0MsS0FBSCxDQUFTQyxPQUFULENBQWlCbW5DLE9BQWpCLENBQVA7QUFDQXFOLG1CQUFlLElBQWY7O0FBQ0EsUUFBR0ssYUFBWXoxQyxLQUFLd0csT0FBTCxDQUFhM0YsR0FBNUI7QUFDQ3UwQyxxQkFBZXAxQyxLQUFLd0csT0FBcEI7QUFERDtBQUdDNHVDLHFCQUFlOXpDLEVBQUV1YyxJQUFGLENBQU83ZCxLQUFLMEcsUUFBWixFQUFzQixVQUFDa3dDLFlBQUQ7QUFDcEMsZUFBT0EsYUFBYS8xQyxHQUFiLEtBQW9CNDBDLFFBQTNCO0FBRGMsUUFBZjtBQ3VHRTs7QURuR0hULDBCQUFzQnYzQixhQUFhdTNCLG1CQUFuQztBQUNBenVDLGtCQUFjNnVDLGFBQWFoMUMsTUFBM0I7QUFDQWsxQyxpQkFBYSxJQUFiOztBQUNBaDBDLE1BQUVxYixJQUFGLENBQU9wVyxXQUFQLEVBQW9CLFVBQUNzd0MsVUFBRDtBQUNuQixVQUFHQSxXQUFXaDJDLEdBQVgsS0FBa0JtMEMsbUJBQXJCO0FDcUdLLGVEcEdKTSxhQUFhdUIsV0FBVzF3QyxJQ29HcEI7QUFDRDtBRHZHTDs7QUFNQTJ2QyxvQkFBZ0J0MUMsY0FBYzQwQixnQkFBZCxDQUErQjl1QixRQUEvQixDQUFoQjtBQUdBK3ZDLHFCQUFpQixJQUFJaDJDLEtBQUosRUFBakI7O0FBQ0EsUUFBR3kxQyxjQUFjUixVQUFkLENBQUg7QUFDQyxVQUFHUSxjQUFjUixVQUFkLGFBQXFDajFDLEtBQXhDO0FBQ0NnMkMseUJBQWlCUCxjQUFjUixVQUFkLENBQWpCO0FBREQ7QUFHQ2UsdUJBQWU5L0MsSUFBZixDQUFvQnUvQyxjQUFjUixVQUFkLENBQXBCO0FBSkY7QUN1R0c7O0FEaEdIdG1CLGVBQVcsSUFBSTN1QixLQUFKLEVBQVg7O0FBQ0FpQixNQUFFcWIsSUFBRixDQUFPMDVCLGNBQVAsRUFBdUIsVUFBQ252QyxJQUFEO0FBQ3RCLFVBQUFrd0MsZ0JBQUE7QUFBQUEseUJBQW1CMTJDLEdBQUdnc0IsV0FBSCxDQUFlN08sSUFBZixDQUFvQjtBQUFFL1YsZUFBT2duQixRQUFUO0FBQW1CNW5CLGNBQU1BLEtBQUssSUFBTDtBQUF6QixPQUFwQixFQUEyRDRXLEtBQTNELEVBQW5COztBQUNBLFVBQUdzNUIscUJBQW9CLENBQXZCO0FBQ0MsY0FBTSxJQUFJOTJDLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLFNBQTNCLENBQU47QUNzR0c7O0FBQ0QsYUR0R0g4eUIsU0FBU3o0QixJQUFULENBQWMyUSxLQUFLLElBQUwsQ0FBZCxDQ3NHRztBRDFHSjs7QUFPQThuQixlQUFXMXRCLEVBQUVvdUIsSUFBRixDQUFPVixRQUFQLENBQVg7QUFDQSxXQUFPQSxRQUFQO0FBbERJLFNBbURBLElBQUcvRixjQUFhLGlCQUFoQjtBQUVKNm5CLG9CQUFnQnJ6QixhQUFhcXpCLGFBQTdCO0FBQ0F5RSxzQkFBa0IsSUFBSWwxQyxLQUFKLEVBQWxCOztBQUNBaUIsTUFBRXFiLElBQUYsQ0FBT3JXLFNBQVM2RCxNQUFoQixFQUF3QixVQUFDa0MsS0FBRDtBQUN2QixVQUFHQSxNQUFNeUwsSUFBTixLQUFjZzVCLGFBQWpCO0FDcUdLLGVEcEdKeUUsZ0JBQWdCaC9DLElBQWhCLENBQXFCOFYsS0FBckIsQ0NvR0k7QUFDRDtBRHZHTDs7QUFLQXNwQywwQkFBc0JyMEMsRUFBRS9JLEdBQUYsQ0FBTWc5QyxlQUFOLEVBQXVCLFVBQUM1L0MsQ0FBRDtBQUM1QyxhQUFPQSxFQUFFbzhCLFVBQVQ7QUFEcUIsTUFBdEI7QUFJQXNDLG9CQUFnQi95QixFQUFFaVUsS0FBRixDQUFRb2dDLG9CQUFvQi85QixRQUE1QixFQUFzQyxNQUF0QyxDQUFoQjs7QUFFQSxRQUFHNkYsYUFBYXF3QixjQUFoQjtBQUNDeHNDLFFBQUVxYixJQUFGLENBQU9jLGFBQWFxd0IsY0FBcEIsRUFBb0MsVUFBQzBJLGFBQUQ7QUFDbkMsWUFBQUMsVUFBQTtBQUFBQSxxQkFBYS8xQyxHQUFHNHNCLFVBQUgsQ0FBY3pQLElBQWQsQ0FBbUI7QUFBRWhkLGVBQUsyMUM7QUFBUCxTQUFuQixFQUEyQzE0QixLQUEzQyxFQUFiOztBQUNBLFlBQUcyNEIsZUFBYyxDQUFqQjtBQUNDLGdCQUFNLElBQUluMkMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBM0IsQ0FBTjtBQ3NHSTtBRHpHTjtBQzJHRTs7QURwR0hvRixNQUFFcWIsSUFBRixDQUFPMFgsYUFBUCxFQUFzQixVQUFDZ2pCLFlBQUQ7QUFDckIsVUFBRzMyQyxHQUFHZ3NCLFdBQUgsQ0FBZTdPLElBQWYsQ0FBb0I7QUFBRS9WLGVBQU9nbkIsUUFBVDtBQUFtQjVuQixjQUFNbXdDO0FBQXpCLE9BQXBCLEVBQTZEdjVCLEtBQTdELE9BQXdFLENBQTNFO0FBQ0MsY0FBTSxJQUFJeGQsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsY0FBM0IsQ0FBTjtBQ3lHRztBRDNHTDs7QUFLQSxXQUFPZ2tDLG1CQUFtQjhULDBCQUFuQixDQUE4QzNmLGFBQTlDLEVBQTZENVcsYUFBYXF3QixjQUExRSxFQUEwRmhmLFFBQTFGLENBQVA7QUE1QkksU0E2QkEsSUFBRzdGLGNBQWEsaUJBQWhCO0FBRUo2bkIsb0JBQWdCcnpCLGFBQWFxekIsYUFBN0I7QUFDQXlFLHNCQUFrQixJQUFJbDFDLEtBQUosRUFBbEI7O0FBQ0FpQixNQUFFcWIsSUFBRixDQUFPclcsU0FBUzZELE1BQWhCLEVBQXdCLFVBQUNrQyxLQUFEO0FBQ3ZCLFVBQUdBLE1BQU15TCxJQUFOLEtBQWNnNUIsYUFBakI7QUN3R0ssZUR2R0p5RSxnQkFBZ0JoL0MsSUFBaEIsQ0FBcUI4VixLQUFyQixDQ3VHSTtBQUNEO0FEMUdMOztBQUtBc3BDLDBCQUFzQnIwQyxFQUFFL0ksR0FBRixDQUFNZzlDLGVBQU4sRUFBdUIsVUFBQzUvQyxDQUFEO0FBQzVDLGFBQU9BLEVBQUVvOEIsVUFBVDtBQURxQixNQUF0QjtBQUlBc0Msb0JBQWdCL3lCLEVBQUVpVSxLQUFGLENBQVFvZ0Msb0JBQW9CLzlCLFFBQTVCLEVBQXNDLE1BQXRDLENBQWhCOztBQUdBdFcsTUFBRXFiLElBQUYsQ0FBTzBYLGFBQVAsRUFBc0IsVUFBQ2dqQixZQUFEO0FBQ3JCLFVBQUFDLHdCQUFBO0FBQUFBLGlDQUEyQjUyQyxHQUFHZ3NCLFdBQUgsQ0FBZTdPLElBQWYsQ0FBb0I7QUFBRS9WLGVBQU9nbkIsUUFBVDtBQUFtQjVuQixjQUFNbXdDO0FBQXpCLE9BQXBCLEVBQTZEdjVCLEtBQTdELEVBQTNCOztBQUNBLFVBQUd3NUIsNkJBQTRCLENBQS9CO0FBQ0MsY0FBTSxJQUFJaDNDLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLGNBQTNCLENBQU47QUN5R0c7QUQ1R0w7O0FBTUFtNEIsb0JBQWdCL3lCLEVBQUVvdUIsSUFBRixDQUFPMkUsYUFBUCxDQUFoQjtBQUNBLFdBQU9BLGFBQVA7QUF2QkksU0F3QkEsSUFBR3BMLGNBQWEsZUFBaEI7QUFFSmtHLGdCQUFZN29CLFNBQVM2b0IsU0FBckI7O0FBQ0EsUUFBRyxDQUFJQSxTQUFQO0FBRUNnbkIsNkJBQXVCejFDLEdBQUdnc0IsV0FBSCxDQUFlN08sSUFBZixDQUFvQjtBQUFFL1YsZUFBT2duQixRQUFUO0FBQW1CNW5CLGNBQU1pb0I7QUFBekIsT0FBcEIsRUFBMERyUixLQUExRCxFQUF2Qjs7QUFDQSxVQUFHcTRCLHlCQUF3QixDQUEzQjtBQUNDLGNBQU0sSUFBSTcxQyxPQUFPcEUsS0FBWCxDQUFpQixRQUFqQixFQUEyQixtQkFBM0IsQ0FBTjtBQUREO0FBR0MsWUFBR3VoQixhQUFhcXdCLGNBQWIsSUFBZ0Nyd0IsYUFBYXF3QixjQUFiLENBQTRCLy9DLE1BQTVCLEdBQXFDLENBQXhFO0FBRUN1VCxZQUFFcWIsSUFBRixDQUFPYyxhQUFhcXdCLGNBQXBCLEVBQW9DLFVBQUMwSSxhQUFEO0FBQ25DLGdCQUFBQyxVQUFBO0FBQUFBLHlCQUFhLzFDLEdBQUc0c0IsVUFBSCxDQUFjelAsSUFBZCxDQUFtQjtBQUFFaGQsbUJBQUsyMUM7QUFBUCxhQUFuQixFQUEyQzE0QixLQUEzQyxFQUFiOztBQUNBLGdCQUFHMjRCLGVBQWMsQ0FBakI7QUFDQyxvQkFBTSxJQUFJbjJDLE9BQU9wRSxLQUFYLENBQWlCLFFBQWpCLEVBQTJCczZDLGdCQUFnQixPQUEzQyxDQUFOO0FDNEdNO0FEL0dSOztBQUtBLGlCQUFPdFcsbUJBQW1CZ1UseUJBQW5CLENBQTZDL2tCLFNBQTdDLEVBQXdEMVIsYUFBYXF3QixjQUFyRSxFQUFxRmhmLFFBQXJGLENBQVA7QUFQRDtBQVNDLGdCQUFNLElBQUl4dUIsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsU0FBU3VoQixhQUFhbm5CLElBQXRCLEdBQTZCLFNBQXhELENBQU47QUFaRjtBQUhEO0FBQUE7QUFpQkMsWUFBTSxJQUFJZ0ssT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsV0FBM0IsQ0FBTjtBQXBCRztBQUFBLFNBcUJBLElBQUcrc0IsY0FBYSxXQUFoQjtBQUVKa0csZ0JBQVk3b0IsU0FBUzZvQixTQUFyQjtBQUVBZ25CLDJCQUF1QnoxQyxHQUFHZ3NCLFdBQUgsQ0FBZTdPLElBQWYsQ0FBb0I7QUFBRS9WLGFBQU9nbkIsUUFBVDtBQUFtQjVuQixZQUFNaW9CO0FBQXpCLEtBQXBCLEVBQTBEclIsS0FBMUQsRUFBdkI7O0FBQ0EsUUFBR3E0Qix5QkFBd0IsQ0FBM0I7QUFDQyxZQUFNLElBQUk3MUMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsbUJBQTNCLENBQU47QUFERDtBQUdDLGFBQU8sSUFBSW1FLEtBQUosQ0FBVTh1QixTQUFWLENBQVA7QUFSRztBQUFBLFNBU0EsSUFBR2xHLGNBQWEsWUFBaEI7QUFFSjhyQix1QkFBbUJ0M0IsYUFBYTg1QixhQUFoQzs7QUFDQSxRQUFHLENBQUl4QyxnQkFBSixJQUF3QkEsaUJBQWlCaG5ELE1BQWpCLEtBQTJCLENBQXREO0FBQ0MsWUFBTSxJQUFJdVMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIscUNBQTNCLENBQU47QUNpSEU7O0FEOUdIbzZDLDZCQUF5QixJQUFJajJDLEtBQUosRUFBekI7O0FBQ0FpQixNQUFFcWIsSUFBRixDQUFPbzRCLGdCQUFQLEVBQXlCLFVBQUN5QyxlQUFEO0FBQ3hCLFVBQUc5MkMsR0FBR2dwQixhQUFILENBQWlCN0wsSUFBakIsQ0FBc0I7QUFBRWhkLGFBQUsyMkM7QUFBUCxPQUF0QixFQUFnRDE1QixLQUFoRCxLQUEwRCxDQUE3RDtBQ2tISyxlRGpISnc0Qix1QkFBdUJsNkMsT0FBdkIsQ0FBK0JvN0MsZUFBL0IsQ0NpSEk7QUFDRDtBRHBITDs7QUFLQXZCLG1CQUFlLElBQUk1MUMsS0FBSixFQUFmOztBQUNBaUIsTUFBRXFiLElBQUYsQ0FBTzI1QixzQkFBUCxFQUErQixVQUFDbUIscUJBQUQ7QUFDOUIsVUFBQUMsVUFBQSxFQUFBQyxrQkFBQTtBQUFBQSwyQkFBcUJqM0MsR0FBR2dwQixhQUFILENBQWlCOW9CLE9BQWpCLENBQXlCO0FBQUVDLGFBQUs0MkM7QUFBUCxPQUF6QixFQUF5RDtBQUFFcjNDLGdCQUFRO0FBQUUybEIsaUJBQU87QUFBVDtBQUFWLE9BQXpELENBQXJCOztBQUNBLFVBQUc0eEIsbUJBQW1CNXhCLEtBQXRCO0FBQ0Nrd0IsdUJBQWVBLGFBQWFoL0MsTUFBYixDQUFvQjBnRCxtQkFBbUI1eEIsS0FBdkMsQ0FBZjtBQ3lIRzs7QUR2SEoyeEIsbUJBQWFoM0MsR0FBR2dwQixhQUFILENBQWlCN0wsSUFBakIsQ0FBc0I7QUFBRS9WLGVBQU9nbkIsUUFBVDtBQUFtQnB3QixpQkFBUys0QztBQUE1QixPQUF0QixFQUEyRTtBQUFFcjNDLGdCQUFRO0FBQUUybEIsaUJBQU87QUFBVDtBQUFWLE9BQTNFLEVBQXFHNUYsS0FBckcsRUFBYjtBQ2dJRyxhRC9ISDdlLEVBQUVxYixJQUFGLENBQU8rNkIsVUFBUCxFQUFtQixVQUFDRSxTQUFEO0FBQ2xCLFlBQUdBLFVBQVU3eEIsS0FBYjtBQ2dJTSxpQkQvSExrd0IsZUFBZUEsYUFBYWgvQyxNQUFiLENBQW9CMmdELFVBQVU3eEIsS0FBOUIsQ0MrSFY7QUFDRDtBRGxJTixRQytIRztBRHJJSjs7QUFZQWt3QixtQkFBZTMwQyxFQUFFb3VCLElBQUYsQ0FBT3VtQixZQUFQLENBQWY7QUFDQUosdUJBQW1CLElBQUl4MUMsS0FBSixFQUFuQjs7QUFDQWlCLE1BQUVxYixJQUFGLENBQU9zNUIsWUFBUCxFQUFxQixVQUFDNEIsV0FBRDtBQUNwQixVQUFBQyxxQkFBQTtBQUFBQSw4QkFBd0JwM0MsR0FBR2dzQixXQUFILENBQWU3TyxJQUFmLENBQW9CO0FBQUUvVixlQUFPZ25CLFFBQVQ7QUFBbUI1bkIsY0FBTTJ3QztBQUF6QixPQUFwQixFQUE0RC81QixLQUE1RCxFQUF4Qjs7QUFDQSxVQUFHZzZCLHdCQUF3QixDQUEzQjtBQ29JSyxlRG5JSmpDLGlCQUFpQnQvQyxJQUFqQixDQUFzQnNoRCxXQUF0QixDQ21JSTtBQUNEO0FEdklMOztBQU1BLFdBQU9oQyxnQkFBUDtBQWxDSSxTQW1DQSxJQUFHNXNCLGNBQWEsYUFBaEI7QUFFSmdzQix3QkFBb0J4M0IsYUFBYXM2QixjQUFqQztBQUNBOUMsd0JBQW9CM3pDLEVBQUVvdUIsSUFBRixDQUFPdWxCLGlCQUFQLENBQXBCO0FBQ0FXLDRCQUF3QixJQUFJdjFDLEtBQUosRUFBeEI7O0FBQ0FpQixNQUFFcWIsSUFBRixDQUFPczRCLGlCQUFQLEVBQTBCLFVBQUMrQyxnQkFBRDtBQUN6QixVQUFBRixxQkFBQTtBQUFBQSw4QkFBd0JwM0MsR0FBR2dzQixXQUFILENBQWU3TyxJQUFmLENBQW9CO0FBQUUvVixlQUFPZ25CLFFBQVQ7QUFBbUI1bkIsY0FBTTh3QztBQUF6QixPQUFwQixFQUFpRWw2QixLQUFqRSxFQUF4Qjs7QUFDQSxVQUFHZzZCLHdCQUF3QixDQUEzQjtBQ3VJSyxlRHRJSmxDLHNCQUFzQnIvQyxJQUF0QixDQUEyQnloRCxnQkFBM0IsQ0NzSUk7QUFDRDtBRDFJTDs7QUFNQSxXQUFPcEMscUJBQVA7QUFYSSxTQVlBLElBQUczc0IsY0FBYSxpQkFBaEI7QUFFSjhzQixzQkFBa0IsSUFBSTExQyxLQUFKLEVBQWxCO0FBQ0F1MEMsYUFBU3R6QyxFQUFFdWMsSUFBRixDQUFPdlgsU0FBUzZELE1BQWhCLEVBQXdCLFVBQUM4dEMsR0FBRDtBQUNoQyxhQUFPQSxJQUFJNWdDLFdBQUosS0FBbUIsS0FBMUI7QUFEUSxNQUFUO0FBR0FxOUIsZUFBV3B6QyxFQUFFdWMsSUFBRixDQUFPKzJCLE9BQU9oOUIsUUFBZCxFQUF3QixVQUFDc2dDLElBQUQ7QUFDbEMsYUFBT0EsS0FBSzdnQyxXQUFMLEtBQW9CLEtBQXBCLElBQThCNmdDLEtBQUtybEQsSUFBTCxLQUFlLElBQXBEO0FBRFUsTUFBWDs7QUFJQSxRQUFHNmhELFNBQVM1TSxVQUFaO0FBQ0MsVUFBRzRNLFNBQVM1TSxVQUFULENBQW9CLENBQXBCLEVBQXVCLE9BQXZCLENBQUg7QUFDQ2lPLDBCQUFrQnJCLFNBQVM1TSxVQUFULENBQW9CLENBQXBCLEVBQXVCLE9BQXZCLENBQWxCO0FBRkY7QUN3SUc7O0FEcElILFdBQU9pTyxlQUFQO0FBZEksU0FlQSxJQUFHOXNCLGNBQWEsbUJBQWhCO0FBRUo0ckIseUJBQXFCLElBQUl4MEMsS0FBSixFQUFyQjtBQUNBczBDLGtCQUFjajBDLEdBQUdnc0IsV0FBSCxDQUFlOXJCLE9BQWYsQ0FBdUI7QUFBRWtILGFBQU9nbkIsUUFBVDtBQUFtQjVuQixZQUFNWixTQUFTK1Y7QUFBbEMsS0FBdkIsRUFBc0U7QUFBRWpjLGNBQVE7QUFBRXlwQixpQkFBUztBQUFYO0FBQVYsS0FBdEUsQ0FBZDs7QUFDQSxRQUFHOHFCLFlBQVk5cUIsT0FBZjtBQUNDZ3JCLHlCQUFtQnQrQyxJQUFuQixDQUF3Qm8rQyxZQUFZOXFCLE9BQXBDO0FDNElFOztBRDFJSCxXQUFPZ3JCLGtCQUFQO0FDNElDO0FEbm1COEIsQ0FBakMsQzs7Ozs7Ozs7Ozs7O0FFckZBcmpCLG9CQUFvQixFQUFwQjs7QUFFQUEsa0JBQWtCQyxrQkFBbEIsR0FBdUMsVUFBQ3pCLE9BQUQsRUFBVTZDLE9BQVY7QUFFdEMsTUFBQWpzQixJQUFBLEVBQUF1eEMsY0FBQSxFQUFBNUQsT0FBQSxFQUFBN3FCLGFBQUEsRUFBQTB1QixZQUFBLEVBQUFDLGNBQUEsRUFBQUMsZ0JBQUEsRUFBQXhwQixRQUFBLEVBQUF5cEIsYUFBQSxFQUFBQyxlQUFBLEVBQUFDLGlCQUFBO0FBQUE3eEMsU0FBT3BHLGNBQWM4ZCxPQUFkLENBQXNCMFIsT0FBdEIsQ0FBUDtBQUNBbEIsYUFBV2xvQixLQUFLa0IsS0FBaEI7QUFFQXlzQyxZQUFVLElBQUlsMEMsS0FBSixFQUFWO0FBQ0FxcEIsa0JBQWdCaHBCLEdBQUdncEIsYUFBSCxDQUFpQjdMLElBQWpCLENBQXNCO0FBQ3JDL1YsV0FBT2duQixRQUQ4QjtBQUNwQi9JLFdBQU84TTtBQURhLEdBQXRCLEVBQ29CO0FBQUV6eUIsWUFBUTtBQUFFMUIsZUFBUztBQUFYO0FBQVYsR0FEcEIsRUFDZ0R5aEIsS0FEaEQsRUFBaEI7O0FBRUE3ZSxJQUFFcWIsSUFBRixDQUFPK00sYUFBUCxFQUFzQixVQUFDdUMsR0FBRDtBQUNyQnNvQixZQUFRaCtDLElBQVIsQ0FBYTAxQixJQUFJcHJCLEdBQWpCOztBQUNBLFFBQUdvckIsSUFBSXZ0QixPQUFQO0FDUUksYURQSDRDLEVBQUVxYixJQUFGLENBQU9zUCxJQUFJdnRCLE9BQVgsRUFBb0IsVUFBQysxQyxTQUFEO0FDUWYsZURQSkYsUUFBUWgrQyxJQUFSLENBQWFrK0MsU0FBYixDQ09JO0FEUkwsUUNPRztBQUdEO0FEYko7O0FBT0FGLFlBQVVqekMsRUFBRW91QixJQUFGLENBQU82a0IsT0FBUCxDQUFWO0FBQ0E0RCxtQkFBaUIsSUFBSTkzQyxLQUFKLEVBQWpCOztBQUNBLE1BQUd1RyxLQUFLdW1CLEtBQVI7QUFJQyxRQUFHdm1CLEtBQUt1bUIsS0FBTCxDQUFXb3JCLGFBQWQ7QUFDQ0Esc0JBQWdCM3hDLEtBQUt1bUIsS0FBTCxDQUFXb3JCLGFBQTNCOztBQUNBLFVBQUdBLGNBQWM1cEMsUUFBZCxDQUF1QmtrQixPQUF2QixDQUFIO0FBQ0NzbEIsdUJBQWU1aEQsSUFBZixDQUFvQixLQUFwQjtBQUhGO0FDVUc7O0FETEgsUUFBR3FRLEtBQUt1bUIsS0FBTCxDQUFXaXJCLFlBQWQ7QUFDQ0EscUJBQWV4eEMsS0FBS3VtQixLQUFMLENBQVdpckIsWUFBMUI7O0FBQ0E5MkMsUUFBRXFiLElBQUYsQ0FBTzQzQixPQUFQLEVBQWdCLFVBQUNyTSxNQUFEO0FBQ2YsWUFBR2tRLGFBQWF6cEMsUUFBYixDQUFzQnU1QixNQUF0QixDQUFIO0FDT00saUJETkxpUSxlQUFlNWhELElBQWYsQ0FBb0IsS0FBcEIsQ0NNSztBQUNEO0FEVE47QUNXRTs7QURKSCxRQUFHcVEsS0FBS3VtQixLQUFMLENBQVdzckIsaUJBQWQ7QUFDQ0EsMEJBQW9CN3hDLEtBQUt1bUIsS0FBTCxDQUFXc3JCLGlCQUEvQjs7QUFDQSxVQUFHQSxrQkFBa0I5cEMsUUFBbEIsQ0FBMkJra0IsT0FBM0IsQ0FBSDtBQUNDc2xCLHVCQUFlNWhELElBQWYsQ0FBb0IsU0FBcEI7QUFIRjtBQ1VHOztBRExILFFBQUdxUSxLQUFLdW1CLEtBQUwsQ0FBV21yQixnQkFBZDtBQUNDQSx5QkFBbUIxeEMsS0FBS3VtQixLQUFMLENBQVdtckIsZ0JBQTlCOztBQUNBaDNDLFFBQUVxYixJQUFGLENBQU80M0IsT0FBUCxFQUFnQixVQUFDck0sTUFBRDtBQUNmLFlBQUdvUSxpQkFBaUIzcEMsUUFBakIsQ0FBMEJ1NUIsTUFBMUIsQ0FBSDtBQ09NLGlCRE5MaVEsZUFBZTVoRCxJQUFmLENBQW9CLFNBQXBCLENDTUs7QUFDRDtBRFROO0FDV0U7O0FESkgsUUFBR3FRLEtBQUt1bUIsS0FBTCxDQUFXcXJCLGVBQWQ7QUFDQ0Esd0JBQWtCNXhDLEtBQUt1bUIsS0FBTCxDQUFXcXJCLGVBQTdCOztBQUNBLFVBQUdBLGdCQUFnQjdwQyxRQUFoQixDQUF5QmtrQixPQUF6QixDQUFIO0FBQ0NzbEIsdUJBQWU1aEQsSUFBZixDQUFvQixPQUFwQjtBQUhGO0FDVUc7O0FETEgsUUFBR3FRLEtBQUt1bUIsS0FBTCxDQUFXa3JCLGNBQWQ7QUFDQ0EsdUJBQWlCenhDLEtBQUt1bUIsS0FBTCxDQUFXa3JCLGNBQTVCOztBQUNBLzJDLFFBQUVxYixJQUFGLENBQU80M0IsT0FBUCxFQUFnQixVQUFDck0sTUFBRDtBQUNmLFlBQUdtUSxlQUFlMXBDLFFBQWYsQ0FBd0J1NUIsTUFBeEIsQ0FBSDtBQ09NLGlCRE5MaVEsZUFBZTVoRCxJQUFmLENBQW9CLE9BQXBCLENDTUs7QUFDRDtBRFROO0FBdkNGO0FDbURFOztBRFBGNGhELG1CQUFpQjcyQyxFQUFFb3VCLElBQUYsQ0FBT3lvQixjQUFQLENBQWpCO0FBQ0EsU0FBT0EsY0FBUDtBQTlEc0MsQ0FBdkMsQzs7Ozs7Ozs7Ozs7O0FFRkF4UCxpQkFBaUIsRUFBakIsQyxDQUdBOzs7O0FBR0FBLGVBQWVDLGVBQWYsR0FBaUMsVUFBQzhQLFdBQUQsRUFBYWpNLGNBQWI7QUFFaEMsTUFBQWtNLG1CQUFBLEVBQUFDLFlBQUEsRUFBQUMsZ0JBQUE7QUFBQUQsaUJBQWUsRUFBZjtBQUVBQyxxQkFBbUJ2M0MsRUFBRW9HLElBQUYsQ0FBT2d4QyxXQUFQLENBQW5CO0FBRUFDLHdCQUFzQnIzQyxFQUFFb0csSUFBRixDQUFPK2tDLGNBQVAsQ0FBdEI7QUFNQWtNLHNCQUFvQjUzQyxPQUFwQixDQUE0QixVQUFDakssR0FBRDtBQUMzQixRQUFHd0ssRUFBRThoQixRQUFGLENBQVd5MUIsZ0JBQVgsRUFBNkIvaEQsR0FBN0IsQ0FBSDtBQUNDLFVBQUcsQ0FBQ3dLLEVBQUV3M0MsT0FBRixDQUFVSixZQUFZNWhELEdBQVosQ0FBVixFQUE0QjIxQyxlQUFlMzFDLEdBQWYsQ0FBNUIsQ0FBSjtBQ0hLLGVESUo4aEQsYUFBYTloRCxHQUFiLElBQW9CMjFDLGVBQWUzMUMsR0FBZixDQ0poQjtBREVOO0FBQUE7QUFJQyxVQUFHMjFDLGVBQWUzMUMsR0FBZixNQUF1QixFQUExQjtBQ0ZLLGVESUo4aEQsYUFBYTloRCxHQUFiLElBQW9CMjFDLGVBQWUzMUMsR0FBZixDQ0poQjtBREZOO0FDSUc7QURMSjtBQVNBLFNBQU84aEQsWUFBUDtBQXJCZ0MsQ0FBakMsQzs7Ozs7Ozs7Ozs7O0FFTkFHLGNBQWMsRUFBZDs7QUFFQUEsWUFBWUMsa0JBQVosR0FBaUMsVUFBQzl2QixPQUFELEVBQVUrdkIsV0FBVixFQUF1Qjc0QyxNQUF2QjtBQUVoQyxNQUFBODRDLGVBQUE7QUFBQUEsb0JBQWtCQyxZQUFZQyxrQkFBWixDQUErQmx3QixPQUEvQixFQUF3Qyt2QixXQUF4QyxFQUFxRDtBQUFDcDRDLFNBQUs7QUFBTixHQUFyRCxFQUErRHNmLEtBQS9ELEVBQWxCO0FBRUEsU0FBT3pmLEdBQUdvRyxLQUFILENBQVMrVyxJQUFULENBQWM7QUFBQzdkLFVBQU07QUFBQ2tmLFdBQU1nNkIsZ0JBQWdCNXpDLFdBQWhCLENBQTRCLEtBQTVCO0FBQVA7QUFBUCxHQUFkLENBQVA7QUFKZ0MsQ0FBakM7O0FBTUF5ekMsWUFBWU0sb0JBQVosR0FBbUMsVUFBQ253QixPQUFELEVBQVU5b0IsTUFBVjtBQUVsQyxNQUFBazVDLGlCQUFBO0FBQUFBLHNCQUFvQkgsWUFBWUksb0JBQVosQ0FBaUNyd0IsT0FBakMsRUFBMEM7QUFBQ3JvQixTQUFLO0FBQU4sR0FBMUMsRUFBb0RzZixLQUFwRCxFQUFwQjtBQUVBLFNBQU96ZixHQUFHb0csS0FBSCxDQUFTK1csSUFBVCxDQUFjO0FBQUM3ZCxVQUFNO0FBQUNrZixXQUFNbzZCLGtCQUFrQmgwQyxXQUFsQixDQUE4QixLQUE5QjtBQUFQO0FBQVAsR0FBZCxDQUFQO0FBSmtDLENBQW5DLEM7Ozs7Ozs7Ozs7OztBQ1JBNnpDLGNBQWMsRUFBZDs7QUFFQUEsWUFBWUMsa0JBQVosR0FBaUMsVUFBQ2x3QixPQUFELEVBQVUrdkIsV0FBVixFQUF1Qjc0QyxNQUF2QjtBQUNoQyxNQUFBbzVDLE9BQUE7O0FBQUEsTUFBR3A1QyxNQUFIO0FBQ0NvNUMsY0FBVTtBQUFDcDVDLGNBQVFBO0FBQVQsS0FBVjtBQ01DOztBREpGLFNBQU9NLEdBQUdDLEtBQUgsQ0FBU2tkLElBQVQsQ0FBYztBQUFDL1YsV0FBT29oQixPQUFSO0FBQWlCNEQsY0FBVW1zQixXQUEzQjtBQUF3QzV3QyxXQUFPO0FBQS9DLEdBQWQsRUFBeUVteEMsT0FBekUsQ0FBUDtBQUpnQyxDQUFqQzs7QUFNQUwsWUFBWUksb0JBQVosR0FBbUMsVUFBQ3J3QixPQUFELEVBQVU5b0IsTUFBVjtBQUNsQyxNQUFBbzVDLE9BQUE7O0FBQUEsTUFBR3A1QyxNQUFIO0FBQ0NvNUMsY0FBVTtBQUFDcDVDLGNBQVFBO0FBQVQsS0FBVjtBQ2NDOztBRGJGLFNBQU9NLEdBQUdDLEtBQUgsQ0FBU2tkLElBQVQsQ0FBYztBQUFDL1YsV0FBT29oQixPQUFSO0FBQWlCNEQsY0FBVTtBQUFDNU4sV0FBSyxDQUFDLElBQUQsRUFBTyxFQUFQO0FBQU4sS0FBM0I7QUFBOEM3VyxXQUFPO0FBQXJELEdBQWQsRUFBK0VteEMsT0FBL0UsQ0FBUDtBQUhrQyxDQUFuQyxDOzs7Ozs7Ozs7Ozs7QUVSQUMsY0FBYyxFQUFkOztBQUVBQSxZQUFZQyxVQUFaLEdBQXlCLFVBQUM1aEMsSUFBRDtBQUN4QixTQUFPQSxLQUFLNGhDLFVBQVo7QUFEd0IsQ0FBekI7O0FBR0FELFlBQVl0a0IsT0FBWixHQUFzQixVQUFDN3VCLFFBQUQsRUFBV00sSUFBWCxFQUFpQnUxQixPQUFqQjtBQUNyQixNQUFBcVosUUFBQSxFQUFBbUUsV0FBQTtBQUFBbkUsYUFBV2x2QyxTQUFTTyxZQUFwQjtBQUNBOHlDLGdCQUFjLElBQWQ7O0FBQ0EsTUFBRy95QyxLQUFLSixPQUFMLENBQWEzRixHQUFiLEtBQW9CMjBDLFFBQXZCO0FBQ0NtRSxrQkFBY3I0QyxFQUFFdWMsSUFBRixDQUFPalgsS0FBS0osT0FBTCxDQUFhZSxLQUFwQixFQUEyQixVQUFDdVEsSUFBRDtBQUN4QyxhQUFPQSxLQUFLalgsR0FBTCxLQUFZczdCLE9BQW5CO0FBRGEsTUFBZDtBQUREO0FBS0M3NkIsTUFBRXFiLElBQUYsQ0FBTy9WLEtBQUtGLFFBQVosRUFBc0IsVUFBQzZ2QyxPQUFEO0FBQ3JCLFVBQUdBLFFBQVExMUMsR0FBUixLQUFlMjBDLFFBQWxCO0FDS0ssZURKSm1FLGNBQWNyNEMsRUFBRXVjLElBQUYsQ0FBTzA0QixRQUFRaHZDLEtBQWYsRUFBc0IsVUFBQ3VRLElBQUQ7QUFDbkMsaUJBQU9BLEtBQUtqWCxHQUFMLEtBQVlzN0IsT0FBbkI7QUFEYSxVQ0lWO0FBR0Q7QURUTDtBQ1dDOztBREpGLE1BQUcsQ0FBSXdkLFdBQVA7QUFDQyxVQUFNLElBQUlyNUMsT0FBT3BFLEtBQVgsQ0FBaUIsUUFBakIsRUFBMkIsVUFBM0IsQ0FBTjtBQ01DOztBREpGLFNBQU95OUMsV0FBUDtBQWxCcUIsQ0FBdEIsQzs7Ozs7Ozs7Ozs7O0FFTEEsSUFBQTFMLEtBQUEsRUFBQTJMLE1BQUE7O0FBQUEzTCxRQUFReFcsUUFBUSxNQUFSLENBQVI7QUFFQXZtQixrQkFBa0IsRUFBbEI7QUFFQTBvQyxTQUFTLElBQUlDLE1BQUosQ0FBVyw2QkFBWCxDQUFUOztBQUVBM29DLGdCQUFnQjRvQyx5QkFBaEIsR0FBNEMsVUFBQzFwQyxHQUFELEVBQU0ycEMsU0FBTjtBQUMzQyxNQUFBcDZDLE9BQUEsRUFBQTFMLENBQUEsRUFBQTJTLElBQUEsRUFBQWxOLEdBQUEsRUFBQTQwQyxNQUFBO0FBQUE1MEMsUUFBTTBXLEdBQU47O0FBQ0EsTUFBR0EsR0FBSDtBQUNDLFFBQUcsQ0FBQzJwQyxTQUFKO0FBRUNuekMsYUFBT2xHLEdBQUdvRyxLQUFILENBQVNsRyxPQUFULENBQWlCO0FBQUVDLGFBQUt1UCxJQUFJeEo7QUFBWCxPQUFqQixFQUFvQztBQUFFeEcsZ0JBQVE7QUFBRTI1QyxxQkFBVztBQUFiO0FBQVYsT0FBcEMsQ0FBUDs7QUFFQSxVQUFBbnpDLFFBQUEsT0FBR0EsS0FBTW16QyxTQUFULEdBQVMsTUFBVDtBQUNDQSxvQkFBWW56QyxLQUFLbXpDLFNBQWpCO0FBTEY7QUNjRzs7QURQSCxRQUFHQSxTQUFIO0FBQ0NwNkMsZ0JBQVUyQixFQUFFbEksS0FBRixDQUFRZ1gsR0FBUixDQUFWO0FBRUF6USxjQUFRMkIsQ0FBUixHQUFZQSxDQUFaO0FBRUFndEMsZUFBUyxxQkFBbUJ5TCxTQUFuQixHQUE2QixpQ0FBdEM7O0FBQ0E7QUFDQ3JnRCxjQUFNdTBDLE1BQU1LLE1BQU4sRUFBYywyQkFBZCxFQUEyQzN1QyxPQUEzQyxFQUFvRCxLQUFwRCxFQUEyRGllLFNBQWpFO0FBREQsZUFBQXhZLEtBQUE7QUFFTW5SLFlBQUFtUixLQUFBO0FBQ0wxTCxjQUFNO0FBQUV3MUMsa0JBQVFqN0M7QUFBVixTQUFOO0FBQ0EybEQsZUFBT3gwQyxLQUFQLENBQWFuUixDQUFiO0FBVkY7QUFSRDtBQzhCRTs7QURYRixTQUFPeUYsR0FBUDtBQXJCMkMsQ0FBNUM7O0FBdUJBd1gsZ0JBQWdCd0wsaUJBQWhCLEdBQW9DLFVBQUNwVyxRQUFELEVBQVc4USxPQUFYO0FBRW5DLE1BQUE2RSxjQUFBLEVBQUErOUIsZUFBQSxFQUFBQyxhQUFBOztBQUFBLE1BQUcsQ0FBQzN6QyxRQUFELElBQWEsQ0FBQ0EsU0FBUzZELE1BQXZCLElBQWlDN0QsU0FBUzZELE1BQVQsQ0FBZ0JwYyxNQUFoQixHQUF5QixDQUE3RDtBQUNDO0FDY0M7O0FEWkZrc0Qsa0JBQWdCM3pDLFNBQVM2RCxNQUFULENBQWdCcUssY0FBaEIsQ0FBK0IsYUFBL0IsRUFBOEMsS0FBOUMsQ0FBaEI7O0FBRUEsTUFBR3lsQyxjQUFjbHNELE1BQWpCO0FBQ0Npc0Qsc0JBQWtCQyxjQUFjLENBQWQsRUFBaUJyaUMsUUFBakIsQ0FBMEJwRCxjQUExQixDQUF5QyxhQUF6QyxFQUF3RCxLQUF4RCxFQUErREEsY0FBL0QsQ0FBOEUsU0FBOUUsRUFBeUY0QyxPQUF6RixDQUFsQjtBQUNBNkUscUJBQW9CKzlCLGdCQUFnQmpzRCxNQUFoQixHQUF5QixDQUF6QixHQUFnQ2lzRCxnQkFBZ0IsQ0FBaEIsQ0FBaEMsR0FBd0QsSUFBNUU7QUNhQzs7QURWRixNQUFHLENBQUMvOUIsY0FBRCxJQUFtQkEsZUFBZXBwQixJQUFmLEtBQXVCLElBQTdDO0FBRUN5TyxNQUFFcWIsSUFBRixDQUFPclcsU0FBUzZELE1BQWhCLEVBQXdCLFVBQUN4VSxDQUFEO0FBQ3ZCMkwsUUFBRXFiLElBQUYsQ0FBT2huQixFQUFFaWlCLFFBQVQsRUFBbUIsVUFBQzlILENBQUQ7QUFDbEIsWUFBR0EsRUFBRWpkLElBQUYsS0FBVSxJQUFWLElBQW1CaWQsRUFBRTVJLElBQUYsS0FBVWtRLE9BQTdCLElBQXlDdEgsRUFBRXVILFdBQUYsS0FBaUIsS0FBN0Q7QUFDQzRFLDJCQUFpQm5NLENBQWpCO0FDV0k7QURiTjtBQUREO0FDaUJDOztBRFZGLE1BQUcsQ0FBQ21NLGNBQUo7QUFDQztBQ1lDOztBRFZGLFNBQU9BLGNBQVA7QUF4Qm1DLENBQXBDOztBQTBCQS9LLGdCQUFnQmdwQyxlQUFoQixHQUFrQyxVQUFDNXpDLFFBQUQsRUFBV2lnQixPQUFYO0FBQ2pDLFNBQU9qZ0IsU0FBUzZELE1BQVQsQ0FBZ0IvRCxnQkFBaEIsQ0FBaUMsS0FBakMsRUFBd0NtZ0IsT0FBeEMsQ0FBUDtBQURpQyxDQUFsQzs7QUFHQXJWLGdCQUFnQnEvQixZQUFoQixHQUErQixVQUFDamhDLFVBQUQsRUFBYXlILE1BQWI7QUFDOUIsTUFBQW5RLElBQUEsRUFBQU4sUUFBQSxFQUFBK0osS0FBQSxFQUFBaWdDLFVBQUEsRUFBQWgwQixTQUFBLEVBQUFzakIsYUFBQSxFQUFBOW5CLElBQUEsRUFBQXNHLFNBQUEsRUFBQS9SLEtBQUE7QUFBQS9GLGFBQVc1RixHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFDQyxTQUFLeU87QUFBTixHQUFyQixDQUFYO0FBRUExSSxTQUFPcEcsY0FBYzhkLE9BQWQsQ0FBc0JoWSxTQUFTTSxJQUEvQixDQUFQO0FBRUEwcEMsZUFBYXAvQixnQkFBZ0J3TCxpQkFBaEIsQ0FBa0NwVyxRQUFsQyxFQUE0Q3lRLE1BQTVDLENBQWI7O0FBRUEsTUFBR3U1QixVQUFIO0FBSUNqa0MsWUFBUTZFLGdCQUFnQmdwQyxlQUFoQixDQUFnQzV6QyxRQUFoQyxFQUEwQ2dxQyxXQUFXamtDLEtBQXJELENBQVI7QUFFQXlMLFdBQU90WCxjQUFjMjBCLE9BQWQsQ0FBc0I3dUIsUUFBdEIsRUFBZ0NNLElBQWhDLEVBQXNDeUYsTUFBTXlMLElBQTVDLENBQVA7QUFFQXNHLGdCQUFZdEcsS0FBS3NHLFNBQWpCO0FBRUEvTixZQUFXK04sY0FBYSxNQUFiLEdBQXlCLFVBQXpCLEdBQXlDLEVBQXBEO0FBRUE5QixnQkFBWTliLGNBQWN5L0IsWUFBZCxDQUEyQjM1QixRQUEzQixFQUFxQ00sSUFBckMsRUFBMkNrUixJQUEzQyxFQUFpRHpILEtBQWpELENBQVo7O0FBRUEsUUFBR2lNLFVBQVV2dUIsTUFBVixLQUFvQixDQUF2QjtBQUNDLFVBQUdxd0IsY0FBYSxNQUFiLElBQXVCQSxjQUFhLGFBQXZDO0FBQ0NreUIsbUJBQVdqZ0MsS0FBWCxHQUFtQixVQUFuQjtBQ01HOztBRExKdXZCLHNCQUFnQk0sbUJBQW1CQyxXQUFuQixDQUErQjc1QixTQUFTekYsR0FBeEMsRUFBOEN5YixVQUFVLENBQVYsQ0FBOUMsQ0FBaEI7O0FBQ0EsVUFBRyxDQUFDc2pCLGFBQUo7QUFDQzBRLG1CQUFXeEksVUFBWCxHQUF3QixDQUFDO0FBQUVod0IsZ0JBQU13RSxVQUFVLENBQVYsQ0FBUjtBQUFzQnlKLGlCQUFPO0FBQTdCLFNBQUQsQ0FBeEI7QUFDQSxlQUFPdXFCLFVBQVA7QUNZRzs7QURYSixVQUFHMVEsY0FBYzd4QyxNQUFkLEtBQXdCLENBQTNCO0FBQ0N1aUQsbUJBQVd4SSxVQUFYLEdBQXdCLENBQUM7QUFBQ2h3QixnQkFBTXdFLFVBQVUsQ0FBVixDQUFQO0FBQXFCeUosaUJBQU82WjtBQUE1QixTQUFELENBQXhCO0FBQ0EsZUFBTzBRLFVBQVA7QUFURjtBQWREO0FDMkNFO0FEbEQ0QixDQUEvQjs7QUF1Q0FwL0IsZ0JBQWdCay9CLGlCQUFoQixHQUFvQyxVQUFDdG9DLEtBQUQsRUFBUW1vQyxVQUFSLEVBQW9CQyxPQUFwQixFQUE2QmlLLFVBQTdCO0FBQ25DLE1BQUFDLE1BQUEsRUFBQWpLLGdCQUFBLEVBQUFrSyxhQUFBLEVBQUFDLGVBQUEsRUFBQXBwRCxLQUFBLEVBQUFxcEQsZUFBQTs7QUFBQXBLLHFCQUFtQixJQUFJOXZDLEtBQUosRUFBbkI7QUFFQW5QLFVBQVE7QUFBQzRXLFdBQU9BLEtBQVI7QUFBZThtQixpQkFBYXVyQjtBQUE1QixHQUFSO0FBRUFDLFdBQVM7QUFBRTlqRCxVQUFNLENBQVI7QUFBV3FTLG9CQUFnQixDQUEzQjtBQUE4QjJ1QixpQkFBYSxDQUEzQztBQUE4Q3p3QixrQkFBYyxDQUE1RDtBQUErRCxtQkFBZSxDQUE5RTtBQUFpRkQsVUFBTSxDQUF2RjtBQUEwRjZyQix1QkFBbUIsQ0FBN0c7QUFBZ0g4SixlQUFXO0FBQTNILEdBQVQ7O0FBRUEsTUFBRzBULFVBQUg7QUFFQyxRQUFHQSxlQUFjLElBQWpCO0FBQ0NzSyx3QkFBa0J4QixZQUFZTSxvQkFBWixDQUFpQ3Z4QyxLQUFqQyxFQUF3QztBQUFDakgsYUFBSztBQUFOLE9BQXhDLEVBQWtEc2YsS0FBbEQsR0FBMEQ3YSxXQUExRCxDQUFzRSxLQUF0RSxDQUFsQjtBQUNBcFUsWUFBTTBWLElBQU4sR0FBYTtBQUFDc1ksYUFBS3E3QjtBQUFOLE9BQWI7QUFGRDtBQUlDRixzQkFBZ0J0QixZQUFZQyxrQkFBWixDQUErQmx4QyxLQUEvQixFQUFzQ21vQyxVQUF0QyxFQUFrRDtBQUFDcHZDLGFBQUs7QUFBTixPQUFsRCxFQUE0RHNmLEtBQTVELEdBQW9FN2EsV0FBcEUsQ0FBZ0YsS0FBaEYsQ0FBaEI7QUFDQXBVLFlBQU0wVixJQUFOLEdBQWE7QUFBQ3NZLGFBQUttN0I7QUFBTixPQUFiO0FBUEY7QUN3Q0U7O0FEL0JGLE1BQUduSyxPQUFIO0FBQ0NoL0MsVUFBTTBWLElBQU4sR0FBYTtBQUFDc1ksV0FBS2d4QjtBQUFOLEtBQWI7QUNtQ0M7O0FEL0JGb0ssb0JBQWtCNTVDLEdBQUdrZCxTQUFILENBQWFDLElBQWIsQ0FBa0Izc0IsS0FBbEIsRUFBeUI7QUFBQ2tQLFlBQVFnNkMsTUFBVDtBQUFpQjdILFVBQU0sQ0FBdkI7QUFBMEJsVSxXQUFPO0FBQWpDLEdBQXpCLENBQWxCO0FBRUFpYyxrQkFBZ0J2NUMsT0FBaEIsQ0FBd0IsVUFBQ3FQLEdBQUQ7QUFDdkIsUUFBQThMLFdBQUEsRUFBQXMrQixhQUFBLEVBQUE1ekMsSUFBQSxFQUFBd1osU0FBQTtBQUFBbzZCLG9CQUFnQmw1QyxFQUFFeWYsSUFBRixDQUFPM1EsSUFBSWpHLE1BQVgsRUFBbUIyTixJQUFuQztBQUVBbFIsV0FBT2xHLEdBQUdvRyxLQUFILENBQVNsRyxPQUFULENBQWlCO0FBQUNDLFdBQUt1UCxJQUFJeEo7QUFBVixLQUFqQixDQUFQO0FBRUFzVixrQkFBY3U5QixZQUFZdGtCLE9BQVosQ0FBb0Iva0IsR0FBcEIsRUFBeUJ4SixJQUF6QixFQUErQjR6QyxhQUEvQixDQUFkO0FBRUFwNkIsZ0JBQVlsUCxnQkFBZ0JxL0IsWUFBaEIsQ0FBNkJuZ0MsSUFBSXZQLEdBQWpDLEVBQXNDczVDLFVBQXRDLENBQVo7O0FBRUEsUUFBR1YsWUFBWUMsVUFBWixDQUF1Qng5QixXQUF2QixLQUF1Q2tFLFNBQTFDO0FBRUMsYUFBT2hRLElBQUl2SixZQUFYO0FBRUEsYUFBT3VKLElBQUlqRyxNQUFYO0FBRUEsYUFBT2lHLElBQUl4SixJQUFYO0FBRUF3SixVQUFJcXFDLGtCQUFKLEdBQXlCcjZCLFVBQVUyUixVQUFuQztBQytCRyxhRDdCSG9lLGlCQUFpQjU1QyxJQUFqQixDQUFzQjZaLEdBQXRCLENDNkJHO0FBQ0Q7QURqREo7QUF1QkEsU0FBTysvQixnQkFBUDtBQTlDbUMsQ0FBcEMsQzs7Ozs7Ozs7Ozs7O0FFakdBN3ZDLE9BQU9vNkMsT0FBUCxDQUFlLFlBQWYsRUFBNkIsVUFBQ3h4QixPQUFEO0FBQzVCc1EsUUFBTXRRLE9BQU4sRUFBZWo2QixNQUFmOztBQUVBLE9BQU8sS0FBSzhuQixNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ0FDOztBREVGLE9BQU96eEIsT0FBUDtBQUNDLFdBQU8sS0FBS3l4QixLQUFMLEVBQVA7QUNBQzs7QURHRixTQUFPajZDLEdBQUdtckIsVUFBSCxDQUFjaE8sSUFBZCxDQUFtQjtBQUFFL1YsV0FBT29oQjtBQUFULEdBQW5CLEVBQXVDO0FBQUU5b0IsWUFBUTtBQUFFOUosWUFBTSxDQUFSO0FBQVd3UixhQUFPLENBQWxCO0FBQXFCc3JDLGVBQVMsQ0FBOUI7QUFBaUN3SCxXQUFLO0FBQXRDO0FBQVYsR0FBdkMsQ0FBUDtBQVZELEc7Ozs7Ozs7Ozs7OztBRUNBdDZDLE9BQU9vNkMsT0FBUCxDQUFlLGVBQWYsRUFBZ0MsVUFBQy82QixXQUFEO0FBQy9CNlosUUFBTTdaLFdBQU4sRUFBbUJ0ZixLQUFuQjs7QUFFQSxPQUFPLEtBQUswVyxNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ0RDOztBREdGLE9BQU9oN0IsV0FBUDtBQUNFLFdBQU8sS0FBS2c3QixLQUFMLEVBQVA7QUNEQTs7QURHRixTQUFPaDlCLElBQUlDLFNBQUosQ0FBY0MsSUFBZCxDQUFtQjtBQUFDLHlCQUFxQjtBQUFDcUIsV0FBS1M7QUFBTixLQUF0QjtBQUEyQ08sU0FBSyxDQUFDO0FBQUMsNkJBQXVCO0FBQUNuQixhQUFLO0FBQU47QUFBeEIsS0FBRCxFQUFzQztBQUFDLDZCQUF1QixJQUF4QjtBQUE4Qix3QkFBa0IsS0FBS2hJO0FBQXJELEtBQXRDO0FBQWhELEdBQW5CLENBQVA7QUFURCxHOzs7Ozs7Ozs7Ozs7QUVDQXpXLE9BQU9vNkMsT0FBUCxDQUFlLGdCQUFmLEVBQWlDLFVBQUN4eEIsT0FBRDtBQUVoQyxPQUFPLEtBQUtuUyxNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ0ZDOztBRElGLE9BQU96eEIsT0FBUDtBQUNDLFdBQU8sS0FBS3l4QixLQUFMLEVBQVA7QUNGQzs7QURJRixTQUFPajZDLEdBQUc2c0IsY0FBSCxDQUFrQjFQLElBQWxCLENBQXVCO0FBQUMvVixXQUFPb2hCO0FBQVIsR0FBdkIsRUFBeUM7QUFBQzlvQixZQUFRO0FBQUNxdkMsWUFBSyxDQUFOO0FBQVMxcEIsYUFBTyxDQUFoQjtBQUFtQmtHLFdBQUs7QUFBeEI7QUFBVCxHQUF6QyxDQUFQO0FBUkQsRzs7Ozs7Ozs7Ozs7O0FFRkEzckIsT0FBT3U2QyxnQkFBUCxDQUF3Qix3QkFBeEIsRUFBa0QsVUFBQ0MsU0FBRCxFQUFZQyxHQUFaLEVBQWlCMzZDLE1BQWpCO0FBQ2pEbzVCLFFBQU1zaEIsU0FBTixFQUFpQjdyRCxNQUFqQjtBQUNBdXFDLFFBQU11aEIsR0FBTixFQUFXMTZDLEtBQVg7QUFDQW01QixRQUFNcDVCLE1BQU4sRUFBY3E1QixNQUFNdWhCLFFBQU4sQ0FBZXRzRCxNQUFmLENBQWQ7O0FBRUEsT0FBTyxLQUFLcW9CLE1BQVo7QUFDQyxXQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDQUM7O0FERUYsT0FBS00sT0FBTDtBQ0FDLFNERUQ7QUFBQXA5QixVQUFNO0FBQ0wsV0FBS285QixPQUFMO0FDQUksYURDSnY2QyxHQUFHNnNCLGNBQUgsQ0FBa0IxUCxJQUFsQixDQUF1QjtBQUFDaGQsYUFBSztBQUFDcWUsZUFBSzY3QjtBQUFOO0FBQU4sT0FBdkIsRUFBMEM7QUFBQTM2QyxnQkFBUUE7QUFBUixPQUExQyxDQ0RJO0FEREw7QUFJQTg2QyxjQUFVLENBQ1Q7QUFDQ3I5QixZQUFNLFVBQUMwMUIsUUFBRDtBQUNMLGFBQUMwSCxPQUFEO0FDTU0sZURKTnY2QyxHQUFHNHNCLFVBQUgsQ0FBY3pQLElBQWQsQ0FBbUI7QUFBRWhkLGVBQUsweUMsU0FBUzlEO0FBQWhCLFNBQW5CLEVBQTJDO0FBQUFydkMsa0JBQVE7QUFBQTlKLGtCQUFNO0FBQU47QUFBUixTQUEzQyxDQ0lNO0FEUlI7QUFBQSxLQURTLEVBT1Q7QUFDQ3VuQixZQUFNLFVBQUMwMUIsUUFBRDtBQUNMLGFBQUMwSCxPQUFEO0FDV00sZURUTnY2QyxHQUFHZ3BCLGFBQUgsQ0FBaUI3TCxJQUFqQixDQUFzQjtBQUFFaGQsZUFBSzB5QyxTQUFTdG5CO0FBQWhCLFNBQXRCLEVBQTZDO0FBQUE3ckIsa0JBQVE7QUFBQW1GLHNCQUFVO0FBQVY7QUFBUixTQUE3QyxDQ1NNO0FEYlI7QUFBQSxLQVBTLEVBYVQ7QUFDQ3NZLFlBQU0sVUFBQzAxQixRQUFEO0FBQ0wsYUFBQzBILE9BQUQ7QUNnQk0sZURkTnY2QyxHQUFHZ3NCLFdBQUgsQ0FBZTdPLElBQWYsQ0FBb0I7QUFDbkIvVixpQkFBT3lyQyxTQUFTenJDLEtBREc7QUFFbkJaLGdCQUFNO0FBQUFnWSxpQkFBS3EwQixTQUFTeHRCO0FBQWQ7QUFGYSxTQUFwQixFQUdHO0FBQUEzbEIsa0JBQ0Y7QUFBQTBILG1CQUFPLENBQVA7QUFDQVosa0JBQU0sQ0FETjtBQUVBNVEsa0JBQU07QUFGTjtBQURFLFNBSEgsQ0NjTTtBRGxCUjtBQUFBLEtBYlM7QUFKVixHQ0ZDO0FEUkYsRzs7Ozs7Ozs7Ozs7O0FFRUNnSyxPQUFPbzZDLE9BQVAsQ0FBZSxZQUFmLEVBQTZCLFVBQUN4eEIsT0FBRDtBQUU1QixPQUFPLEtBQUtuUyxNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ0ZBOztBRElELE9BQU96eEIsT0FBUDtBQUNDLFdBQU8sS0FBS3l4QixLQUFMLEVBQVA7QUNGQTs7QURLRCxTQUFPajZDLEdBQUc0c0IsVUFBSCxDQUFjelAsSUFBZCxDQUFtQjtBQUFDL1YsV0FBT29oQjtBQUFSLEdBQW5CLEVBQXFDO0FBQUM5b0IsWUFBUTtBQUFDOUosWUFBSztBQUFOO0FBQVQsR0FBckMsQ0FBUDtBQVRELEc7Ozs7Ozs7Ozs7OztBRUZEZ0ssT0FBT282QyxPQUFQLENBQWUsT0FBZixFQUF3QixVQUFDeHhCLE9BQUQ7QUFDdkIsT0FBTyxLQUFLblMsTUFBWjtBQUNDLFdBQU8sS0FBSzRqQyxLQUFMLEVBQVA7QUNDQzs7QURDRixPQUFPenhCLE9BQVA7QUFDQyxXQUFPLEtBQUt5eEIsS0FBTCxFQUFQO0FDQ0M7O0FERUYsTUFBR2o2QyxHQUFHb0csS0FBSCxDQUFTK1csSUFBVCxDQUFjO0FBQUMvVixXQUFPb2hCO0FBQVIsR0FBZCxFQUFnQ3BMLEtBQWhDLE9BQTJDLENBQTlDO0FBQ0NwZCxPQUFHMnJCLE1BQUgsQ0FBVTh1Qix5QkFBVixDQUFvQ2p5QixPQUFwQztBQ0VDOztBREFGLFNBQU94b0IsR0FBR29HLEtBQUgsQ0FBUytXLElBQVQsQ0FBYztBQUFDL1YsV0FBT29oQjtBQUFSLEdBQWQsRUFBZ0M7QUFDdEM5b0IsWUFBUTtBQUNQOUosWUFBTSxDQURDO0FBRVAwSixZQUFNLENBRkM7QUFHUHFJLGFBQU8sQ0FIQTtBQUlQOGtCLGFBQU8sQ0FKQTtBQUtQcmxCLGFBQU8sQ0FMQTtBQU1QMmtCLGtCQUFZLENBTkw7QUFPUDJtQixlQUFTLENBUEY7QUFRUC9sQixpQ0FBMkIsQ0FScEI7QUFTUCt0QiwwQkFBb0I7QUFUYjtBQUQ4QixHQUFoQyxDQUFQO0FBWEQ7QUEwQkE5NkMsT0FBT282QyxPQUFQLENBQWUsY0FBZixFQUErQixVQUFDeHhCLE9BQUQsRUFBVXlVLE1BQVYsRUFBa0IwZCxTQUFsQjtBQUM5QixNQUFBMTBDLGNBQUEsRUFBQTIwQyxNQUFBLEVBQUExUCxJQUFBOztBQUFBLE9BQU8sS0FBSzcwQixNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ0tDOztBREhGLE9BQU96eEIsT0FBUDtBQUNDLFdBQU8sS0FBS3l4QixLQUFMLEVBQVA7QUNLQzs7QURIRixPQUFPaGQsTUFBUDtBQUNDLFdBQU8sS0FBS2dkLEtBQUwsRUFBUDtBQ0tDOztBREhGLE9BQU9VLFNBQVA7QUFDQyxXQUFPLEtBQUtWLEtBQUwsRUFBUDtBQ0tDOztBREZGL08sU0FBTyxJQUFQOztBQUVBamxDLG1CQUFpQixVQUFDd0ksRUFBRCxFQUFNa3NDLFNBQU47QUFDaEIsUUFBQXowQyxJQUFBLEVBQUFDLFlBQUE7QUFBQUQsV0FBT2xHLEdBQUdvRyxLQUFILENBQVNsRyxPQUFULENBQWlCO0FBQUNDLFdBQU1zTztBQUFQLEtBQWpCLENBQVA7O0FBQ0EsUUFBR3ZJLElBQUg7QUFDQ0MscUJBQWVELEtBQUtKLE9BQXBCO0FBQ0FLLG1CQUFhMDBDLE1BQWIsR0FBc0IsSUFBdEI7O0FBRUEsVUFBRzEwQyxhQUFhaEcsR0FBYixLQUFvQnc2QyxTQUF2QjtBQUNDeDBDLHVCQUFlRCxLQUFLRixRQUFMLENBQWNOLGdCQUFkLENBQStCLEtBQS9CLEVBQXNDaTFDLFNBQXRDLENBQWY7QUFDQXgwQyxxQkFBYTAwQyxNQUFiLEdBQXNCLEtBQXRCO0FDS0c7O0FESEosYUFBTzEwQyxZQUFQO0FDS0U7QURmYSxHQUFqQjs7QUFXQXkwQyxXQUFTNTZDLEdBQUdvRyxLQUFILENBQVMrVyxJQUFULENBQWM7QUFBQ2hkLFNBQUs4OEI7QUFBTixHQUFkLEVBQTZCO0FBQUN2OUIsWUFBUTtBQUFDUyxXQUFLLENBQU47QUFBUywwQkFBb0I7QUFBN0I7QUFBVCxHQUE3QixFQUF3RTI2QyxjQUF4RSxDQUF1RjtBQUMvRkMsYUFBUyxVQUFDdHNDLEVBQUQ7QUNjTCxhRGJIeThCLEtBQUs2UCxPQUFMLENBQWEsZUFBYixFQUE4QkosU0FBOUIsRUFBeUMxMEMsZUFBZXdJLEVBQWYsRUFBbUJrc0MsU0FBbkIsQ0FBekMsQ0NhRztBRGYyRjtBQUFBLEdBQXZGLENBQVQ7QUFNQXpQLE9BQUs4UCxLQUFMLENBQVcsZUFBWCxFQUE0QkwsU0FBNUIsRUFBdUMxMEMsZUFBZWczQixNQUFmLEVBQXVCMGQsU0FBdkIsQ0FBdkM7QUFDQXpQLE9BQUsrTyxLQUFMO0FDYUMsU0RaRC9PLEtBQUsrUCxNQUFMLENBQVk7QUNhVCxXRFpGTCxPQUFPTSxJQUFQLEVDWUU7QURiSCxJQ1lDO0FEL0NGO0FBc0NBdDdDLE9BQU9vNkMsT0FBUCxDQUFlLDJCQUFmLEVBQTRDLFVBQUMvakIsUUFBRDtBQUMzQyxPQUFPLEtBQUs1ZixNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ2VDOztBRGJGLE9BQU9oa0IsUUFBUDtBQUNDLFdBQU8sS0FBS2drQixLQUFMLEVBQVA7QUNlQzs7QURiRixTQUFPajZDLEdBQUdvRyxLQUFILENBQVMrVyxJQUFULENBQWM7QUFBQ2hkLFNBQUs7QUFBQ3FlLFdBQUt5WDtBQUFOO0FBQU4sR0FBZCxFQUFzQztBQUM1Q3YyQixZQUFRO0FBQ1A5SixZQUFNLENBREM7QUFFUDBKLFlBQU0sQ0FGQztBQUdQcUksYUFBTyxDQUhBO0FBSVA4a0IsYUFBTyxDQUpBO0FBS1BybEIsYUFBTyxDQUxBO0FBTVB1bEIsaUNBQTJCLENBTnBCO0FBT1ArdEIsMEJBQW9CLENBUGI7QUFRUFMsbUNBQTZCLENBUnRCO0FBU1BwdkIsa0JBQVk7QUFUTDtBQURvQyxHQUF0QyxDQUFQO0FBUEQ7QUFxQkFuc0IsT0FBT282QyxPQUFQLENBQWUsTUFBZixFQUF1QixVQUFDeHhCLE9BQUQsRUFBVXlVLE1BQVY7QUFDdEIsT0FBTyxLQUFLNW1CLE1BQVo7QUFDQyxXQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDb0JDOztBRGxCRixPQUFPenhCLE9BQVA7QUFDQyxXQUFPLEtBQUt5eEIsS0FBTCxFQUFQO0FDb0JDOztBRGxCRixPQUFPaGQsTUFBUDtBQUNDLFdBQU8sS0FBS2dkLEtBQUwsRUFBUDtBQ29CQzs7QURqQkYsU0FBT2o2QyxHQUFHb0csS0FBSCxDQUFTK1csSUFBVCxDQUFjO0FBQUNoZCxTQUFLODhCLE1BQU47QUFBYzcxQixXQUFPb2hCO0FBQXJCLEdBQWQsRUFBNkM7QUFDbkQ5b0IsWUFBUTtBQUNQa1Esc0JBQWdCLENBRFQ7QUFFUEMseUJBQW1CLENBRlo7QUFHUDhGLGNBQVEsQ0FIRDtBQUlQZ1gsaUNBQTJCLENBSnBCO0FBS1ArdEIsMEJBQW9CLENBTGI7QUFNUDc4QixzQ0FBZ0MsQ0FOekI7QUFPUHM5QixtQ0FBNkIsQ0FQdEI7QUFRUHB2QixrQkFBWSxDQVJMO0FBU1BxdkIseUJBQW1CO0FBVFo7QUFEMkMsR0FBN0MsQ0FBUDtBQVhEO0FBd0JBeDdDLE9BQU9vNkMsT0FBUCxDQUFlLFlBQWYsRUFBNkIsVUFBQ3h4QixPQUFELEVBQVV5VSxNQUFWO0FBQzVCLE9BQU8sS0FBSzVtQixNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ3dCQzs7QUR0QkYsT0FBT3p4QixPQUFQO0FBQ0MsV0FBTyxLQUFLeXhCLEtBQUwsRUFBUDtBQ3dCQzs7QUR0QkYsT0FBT2hkLE1BQVA7QUFDQyxXQUFPLEtBQUtnZCxLQUFMLEVBQVA7QUN3QkM7O0FEdEJGLFNBQU9oOUIsSUFBSW1DLEtBQUosQ0FBVWpDLElBQVYsQ0FBZTtBQUFFLHNCQUFrQnFMLE9BQXBCO0FBQTZCLDRCQUF3QixPQUFyRDtBQUE4RCwwQkFBc0J5VTtBQUFwRixHQUFmLENBQVA7QUFWRDtBQVlBcjlCLE9BQU91NkMsZ0JBQVAsQ0FBd0IsZUFBeEIsRUFBeUMsVUFBQ0MsU0FBRCxFQUFZQyxHQUFaLEVBQWlCMzZDLE1BQWpCO0FBQ3hDbzVCLFFBQU1zaEIsU0FBTixFQUFpQjdyRCxNQUFqQjtBQUNBdXFDLFFBQU11aEIsR0FBTixFQUFXMTZDLEtBQVg7QUFDQW01QixRQUFNcDVCLE1BQU4sRUFBY3E1QixNQUFNdWhCLFFBQU4sQ0FBZXRzRCxNQUFmLENBQWQ7O0FBRUEsT0FBTyxLQUFLcW9CLE1BQVo7QUFDQyxXQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDNEJDOztBRDFCRixPQUFLTSxPQUFMO0FDNEJDLFNEMUJEO0FBQUFwOUIsVUFBTTtBQUNMLFdBQUtvOUIsT0FBTDtBQzRCSSxhRDNCSnY2QyxHQUFHb0csS0FBSCxDQUFTK1csSUFBVCxDQUFjO0FBQUNoZCxhQUFLO0FBQUNxZSxlQUFLNjdCO0FBQU47QUFBTixPQUFkLEVBQWlDO0FBQUEzNkMsZ0JBQVFBO0FBQVIsT0FBakMsQ0MyQkk7QUQ3Qkw7QUFJQTg2QyxjQUFVLENBQ1Q7QUFDQ3I5QixZQUFNLFVBQUNqWCxJQUFEO0FBQ0wsYUFBQ3EwQyxPQUFEO0FDa0NNLGVEaENOdjZDLEdBQUdnc0IsV0FBSCxDQUFlN08sSUFBZixDQUFvQjtBQUNuQi9WLGlCQUFPbEIsS0FBS2tCLEtBRE87QUFFbkJaLGdCQUFNTixLQUFLSixPQUFMLENBQWFnc0I7QUFGQSxTQUFwQixFQUdHO0FBQUFweUIsa0JBQ0Y7QUFBQTBILG1CQUFPLENBQVA7QUFDQVosa0JBQU0sQ0FETjtBQUVBNVEsa0JBQU07QUFGTjtBQURFLFNBSEgsQ0NnQ007QURwQ1I7QUFBQSxLQURTLEVBYVQ7QUFDQ3VuQixZQUFNLFVBQUNqWCxJQUFEO0FBQ0wsYUFBQ3EwQyxPQUFEO0FDb0NNLGVEbENOdjZDLEdBQUdDLEtBQUgsQ0FBU2tkLElBQVQsQ0FBYztBQUNiL1YsaUJBQU9sQixLQUFLa0IsS0FEQztBQUViakgsZUFBSytGLEtBQUs1RztBQUZHLFNBQWQsRUFHRztBQUFBSSxrQkFDRjtBQUFBMEgsbUJBQU8sQ0FBUDtBQUNBakgsaUJBQUssQ0FETDtBQUVBdkssa0JBQU0sQ0FGTjtBQUdBdzJCLHNCQUFVO0FBSFY7QUFERSxTQUhILENDa0NNO0FEdENSO0FBQUEsS0FiUyxFQTBCVDtBQUNDalAsWUFBTSxVQUFDalgsSUFBRDtBQUNMLGFBQUNxMEMsT0FBRDtBQ3NDTSxlRHBDTnY2QyxHQUFHbXJCLFVBQUgsQ0FBY2hPLElBQWQsQ0FBbUI7QUFDbEIvVixpQkFBT2xCLEtBQUtrQjtBQURNLFNBQW5CLEVBRUc7QUFBQTFILGtCQUNGO0FBQUEwSCxtQkFBTyxDQUFQO0FBQ0FqSCxpQkFBSyxDQURMO0FBRUF2SyxrQkFBTTtBQUZOO0FBREUsU0FGSCxDQ29DTTtBRHhDUjtBQUFBLEtBMUJTO0FBSlYsR0MwQkM7QURwQ0YsRzs7Ozs7Ozs7Ozs7O0FFekhBZ0ssT0FBT282QyxPQUFQLENBQWUsT0FBZixFQUF3QixVQUFDeHhCLE9BQUQ7QUFDdkIsT0FBTyxLQUFLblMsTUFBWjtBQUNDLFdBQU8sS0FBSzRqQyxLQUFMLEVBQVA7QUNDQzs7QURDRixPQUFPenhCLE9BQVA7QUFDQyxXQUFPLEtBQUt5eEIsS0FBTCxFQUFQO0FDQ0M7O0FERUYsU0FBT2o2QyxHQUFHQyxLQUFILENBQVNrZCxJQUFULENBQWM7QUFBQy9WLFdBQU9vaEI7QUFBUixHQUFkLEVBQWdDO0FBQUM5b0IsWUFBUTtBQUFDOUosWUFBTSxDQUFQO0FBQVV3MkIsZ0JBQVUsQ0FBcEI7QUFBdUJ6a0IsYUFBTyxDQUE5QjtBQUFpQ2dGLG1CQUFhLENBQTlDO0FBQWlEcEQsc0JBQWdCO0FBQWpFO0FBQVQsR0FBaEMsQ0FBUDtBQVJEO0FBV0EzSixPQUFPbzZDLE9BQVAsQ0FBZSxjQUFmLEVBQStCLFVBQUN4eEIsT0FBRCxFQUFVM2IsTUFBVixFQUFrQjh0QyxTQUFsQjtBQUM5QixNQUFBNTZDLGNBQUEsRUFBQTY2QyxNQUFBLEVBQUExUCxJQUFBOztBQUFBLE9BQU8sS0FBSzcwQixNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ1dDOztBRFRGLE9BQU96eEIsT0FBUDtBQUNDLFdBQU8sS0FBS3l4QixLQUFMLEVBQVA7QUNXQzs7QURURixPQUFPcHRDLE1BQVA7QUFDQyxXQUFPLEtBQUtvdEMsS0FBTCxFQUFQO0FDV0M7O0FEVEYsT0FBT1UsU0FBUDtBQUNDLFdBQU8sS0FBS1YsS0FBTCxFQUFQO0FDV0M7O0FEUkYvTyxTQUFPLElBQVA7O0FBRUFuckMsbUJBQWlCLFVBQUMwTyxFQUFELEVBQU1rc0MsU0FBTjtBQUNoQixRQUFBcjdDLElBQUEsRUFBQUMsWUFBQTtBQUFBRCxXQUFPVSxHQUFHQyxLQUFILENBQVNDLE9BQVQsQ0FBaUI7QUFBQ0MsV0FBTXNPO0FBQVAsS0FBakIsQ0FBUDs7QUFDQSxRQUFHLENBQUNuUCxJQUFKO0FBQ0MsYUFBTyxFQUFQO0FDWUU7O0FEWEhDLG1CQUFlRCxLQUFLd0csT0FBcEI7QUFDQXZHLGlCQUFhczdDLE1BQWIsR0FBc0IsSUFBdEI7O0FBQ0EsUUFBR3Q3QyxhQUFhWSxHQUFiLEtBQW9CdzZDLFNBQXZCO0FBQ0NwN0MscUJBQWVELEtBQUswRyxRQUFMLENBQWNOLGdCQUFkLENBQStCLEtBQS9CLEVBQXNDaTFDLFNBQXRDLENBQWY7QUFDQXA3QyxtQkFBYXM3QyxNQUFiLEdBQXNCLEtBQXRCO0FDYUU7O0FEWkgsV0FBT3Q3QyxZQUFQO0FBVGdCLEdBQWpCOztBQVdBcTdDLFdBQVM1NkMsR0FBR0MsS0FBSCxDQUFTa2QsSUFBVCxDQUFjO0FBQUNoZCxTQUFLME07QUFBTixHQUFkLEVBQTZCO0FBQUNuTixZQUFRO0FBQUNTLFdBQUssQ0FBTjtBQUFTLDBCQUFvQjtBQUE3QjtBQUFULEdBQTdCLEVBQXdFMjZDLGNBQXhFLENBQXVGO0FBQy9GQyxhQUFTLFVBQUN0c0MsRUFBRDtBQ3FCTCxhRHBCSHk4QixLQUFLNlAsT0FBTCxDQUFhLGVBQWIsRUFBOEJKLFNBQTlCLEVBQXlDNTZDLGVBQWUwTyxFQUFmLEVBQW1Ca3NDLFNBQW5CLENBQXpDLENDb0JHO0FEdEIyRjtBQUFBLEdBQXZGLENBQVQ7QUFLQXpQLE9BQUs4UCxLQUFMLENBQVcsZUFBWCxFQUE0QkwsU0FBNUIsRUFBdUM1NkMsZUFBZThNLE1BQWYsRUFBdUI4dEMsU0FBdkIsQ0FBdkM7QUFDQXpQLE9BQUsrTyxLQUFMO0FDcUJDLFNEcEJEL08sS0FBSytQLE1BQUwsQ0FBWTtBQ3FCVCxXRHBCRkwsT0FBT00sSUFBUCxFQ29CRTtBRHJCSCxJQ29CQztBRHRERixHOzs7Ozs7Ozs7Ozs7QUVYQXQ3QyxPQUFPbzZDLE9BQVAsQ0FBZSxlQUFmLEVBQWdDLFVBQUNwckMsVUFBRCxFQUFhYSxHQUFiO0FBQy9CLE1BQUE0ckMsZUFBQSxFQUFBQyxvQkFBQSxFQUFBVixNQUFBLEVBQUFoMUMsUUFBQSxFQUFBMjFDLGlCQUFBLEVBQUFqTSxpQkFBQSxFQUFBa00sVUFBQSxFQUFBdFEsSUFBQSxFQUFBdVEsbUJBQUEsRUFBQUMseUJBQUE7O0FBQUEsT0FBTyxLQUFLcmxDLE1BQVo7QUFDQyxXQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDRUM7O0FEQUYsT0FBT3JyQyxVQUFQO0FBQ0MsV0FBTyxLQUFLcXJDLEtBQUwsRUFBUDtBQ0VDOztBREFGL08sU0FBTyxJQUFQO0FBRUFvRSxzQkFBb0IsQ0FBQyxLQUFELEVBQVEsYUFBUixFQUF1QixNQUF2QixFQUErQixTQUEvQixFQUEwQyxjQUExQyxFQUEwRCxNQUExRCxFQUFrRSxZQUFsRSxFQUFnRixhQUFoRixFQUNuQixTQURtQixFQUNSLE9BRFEsRUFDQyxhQURELEVBQ2dCLGdCQURoQixFQUNrQyxXQURsQyxFQUMrQyxnQkFEL0MsRUFDaUUsZ0JBRGpFLENBQXBCO0FBR0FtTSx3QkFBc0IsQ0FBQyxjQUFELEVBQWlCLGNBQWpCLEVBQWlDLG1CQUFqQyxFQUFzRCx3QkFBdEQsQ0FBdEI7QUFFQUMsOEJBQTRCLEVBQTVCO0FBRUFILHNCQUFvQjtBQUNuQixxQkFBaUIsQ0FERTtBQUluQixpREFBNkMsQ0FKMUI7QUFLbkIsNENBQXdDLENBTHJCO0FBTW5CLGlDQUE2QixDQU5WO0FBUW5CLGdDQUE0QixDQVJUO0FBVW5CLGdDQUE0QixDQVZUO0FBV25CLG1DQUErQixDQVhaO0FBWW5CLHNDQUFrQyxDQVpmO0FBYW5CLG1DQUErQixDQWJaO0FBY25CLGdDQUE0QixDQWRUO0FBZW5CLG1DQUErQixDQWZaO0FBZ0JuQixnQ0FBNEIsQ0FoQlQ7QUFpQm5CLHVDQUFtQyxDQWpCaEI7QUFrQm5CLHNDQUFrQztBQWxCZixHQUFwQjs7QUFxQkFELHlCQUF1QixVQUFDN3hDLE1BQUQ7QUFDdEIsUUFBQWt5QyxrQkFBQTtBQUFBQSx5QkFBcUIsSUFBSWg4QyxLQUFKLEVBQXJCOztBQ1BFLFFBQUk4SixVQUFVLElBQWQsRUFBb0I7QURTdEJBLGFBQVFwSixPQUFSLENBQWdCLFVBQUNzTCxLQUFEO0FBQ2YsWUFBQXBMLEdBQUE7QUNQSyxlQUFPb0wsU0FBUyxJQUFULEdBQWdCLENBQUNwTCxNQUFNb0wsTUFBTXVMLFFBQWIsS0FBMEIsSUFBMUIsR0FBaUMzVyxJRE81Q0YsT0NQNEMsQ0RPcEMsVUFBQ2dYLE9BQUQ7QUFDeEIsY0FBSUEsUUFBUTdRLElBQVIsS0FBZ0Iwa0MsS0FBSzcwQixNQUFyQixJQUErQmdCLFFBQVFYLE9BQVIsS0FBbUJ3MEIsS0FBSzcwQixNQUEzRDtBQ05RLG1CRFVQc2xDLG1CQUFtQjlsRCxJQUFuQixDQUF3QndoQixRQUFRa2EsU0FBaEMsQ0NWTztBQUNEO0FESVIsU0NQNkQsQ0FBakMsR0RPNUIsTUNQWSxHRE9aLE1DUEs7QURNTjtBQ0FHOztBRFFILFdBQU9vcUIsa0JBQVA7QUFYc0IsR0FBdkI7O0FBY0FOLG9CQUFrQixVQUFDTyxXQUFEO0FBQ2pCLFFBQUFoMkMsUUFBQSxFQUFBckYsR0FBQSxFQUFBa0csSUFBQSxFQUFBOGQsc0JBQUEsRUFBQTlhLE1BQUE7QUFBQTdELGVBQVc1RixHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFDQyxXQUFLeTdDO0FBQU4sS0FBckIsRUFBeUM7QUFBQ2w4QyxjQUFRNjdDO0FBQVQsS0FBekMsQ0FBWDs7QUFFQSxRQUFHMzFDLFFBQUg7QUFFQzYxQywwQkFBb0JwN0MsT0FBcEIsQ0FBNEIsVUFBQ2pLLEdBQUQ7QUFDM0IsWUFBR0EsUUFBTyx3QkFBVjtBQ0pNLGlCREtMc2xELDBCQUEwQnRsRCxHQUExQixJQUFpQ2tsRCxxQkFBcUIxMUMsU0FBUzZELE1BQTlCLENDTDVCO0FESU47QUNGTSxpQkRLTGl5QywwQkFBMEJ0bEQsR0FBMUIsSUFBaUN3UCxTQUFTeFAsR0FBVCxDQ0w1QjtBQUNEO0FEQU47QUFRQW11QiwrQkFBQSxFQUFBaGtCLE1BQUFQLEdBQUF3a0IsY0FBQSxDQUFBdGtCLE9BQUE7QUNMS2tILGVBQU94QixTQUFTd0IsS0RLckI7QUNKS2hSLGFBQUs7QURJVixTQ0hNO0FBQ0RzSixnQkFBUTtBQUNONFIsa0JBQVE7QUFERjtBQURQLE9ER04sTUNDVSxJRERWLEdDQ2lCL1EsSUREd0grUSxNQUF6SSxHQUF5SSxNQUF6SSxLQUFtSixLQUFuSjs7QUFFQSxVQUFHaVQsc0JBQUg7QUFFQzlhLGlCQUFTLElBQUk5SixLQUFKLEVBQVQ7O0FDQUksWUFBSWlHLFlBQVksSUFBaEIsRUFBc0I7QUFDcEIsY0FBSSxDQUFDYSxPQUFPYixTQUFTNkQsTUFBakIsS0FBNEIsSUFBaEMsRUFBc0M7QUFDcENoRCxpQkRBVXBHLE9DQVYsQ0RBa0IsVUFBQ3NMLEtBQUQ7QUFDekIsa0JBQUF1b0MsTUFBQSxFQUFBaDlCLFFBQUEsRUFBQUgsSUFBQTs7QUFBQW05Qix1QkFBU3R6QyxFQUFFbEksS0FBRixDQUFRaVQsS0FBUixDQUFUO0FBRUF1TCx5QkFBVyxJQUFJdlgsS0FBSixFQUFYOztBQ0NTLGtCQUFJZ00sU0FBUyxJQUFiLEVBQW1CO0FBQ2pCLG9CQUFJLENBQUNvTCxPQUFPcEwsTUFBTXVMLFFBQWQsS0FBMkIsSUFBL0IsRUFBcUM7QUFDbkNILHVCRERJMVcsT0NDSixDRERZLFVBQUNnWCxPQUFEO0FBQ3hCLHdCQUFHQSxRQUFRbGxCLElBQVIsS0FBZ0IsSUFBaEIsSUFBd0JrbEIsUUFBUTdRLElBQVIsS0FBZ0Iwa0MsS0FBSzcwQixNQUE3QyxJQUF1RGdCLFFBQVFYLE9BQVIsS0FBbUJ3MEIsS0FBSzcwQixNQUEvRSxJQUEwRixDQUFDelYsRUFBRTRMLE9BQUYsQ0FBVTZLLFFBQVFPLGVBQWxCLENBQTlGO0FDRWdCLDZCRERmVixTQUFTcmhCLElBQVQsQ0FBY3doQixPQUFkLENDQ2U7QUFDRDtBREpoQixtQkNDYTtBQUtEO0FBQ0Y7O0FESFY2OEIscUJBQU9oOUIsUUFBUCxHQUFrQkEsUUFBbEI7QUNLUyxxQkRIVHpOLE9BQU81VCxJQUFQLENBQVlxK0MsTUFBWixDQ0dTO0FEZFYsYUNBUTtBQWdCRDtBQUNGOztBREpMdHVDLGlCQUFTNkQsTUFBVCxHQUFrQkEsTUFBbEI7QUE3QkY7QUNvQ0c7O0FETEgsV0FBTzdELFFBQVA7QUFsQ2lCLEdBQWxCOztBQXFDQTQxQyxlQUFhLFVBQUNLLFlBQUQ7QUFDWixRQUFBQyxPQUFBLEVBQUFDLElBQUE7O0FBQUEsUUFBR0YsWUFBSDtBQUVDQyxnQkFBVSxLQUFWO0FBRUFDLGFBQU9uN0MsRUFBRXVjLElBQUYsQ0FBT3MrQixtQkFBUCxFQUE0QixVQUFDcmxELEdBQUQ7QUFDbEMsWUFBQTBDLElBQUEsRUFBQWtqRCxxQkFBQTs7QUFBQWxqRCxlQUFPMUMsR0FBUDs7QUFFQSxZQUFHQSxRQUFPLHdCQUFWO0FBQ0MwQyxpQkFBTyxRQUFQO0FDS0k7O0FESEwsWUFBRzhILEVBQUVoSCxHQUFGLENBQU1paUQsWUFBTixFQUFvQi9pRCxJQUFwQixDQUFIO0FBRUMsY0FBRzFDLFFBQU8sd0JBQVY7QUFFQzRsRCxvQ0FBd0JWLHFCQUFxQk8sYUFBYXB5QyxNQUFsQyxDQUF4QjtBQUlBLG1CQUFPLENBQUM3SSxFQUFFdzNDLE9BQUYsQ0FBVXNELDBCQUEwQnRsRCxHQUExQixDQUFWLEVBQTBDNGxELHFCQUExQyxDQUFSO0FBTkQ7QUFRQyxtQkFBTyxDQUFDcDdDLEVBQUV3M0MsT0FBRixDQUFVc0QsMEJBQTBCdGxELEdBQTFCLENBQVYsRUFBMEN5bEQsYUFBYXpsRCxHQUFiLENBQTFDLENBQVI7QUFWRjtBQ1dLO0FEakJDLFFBQVA7O0FBa0JBLFVBQUcybEQsSUFBSDtBQUNDRCxrQkFBVSxJQUFWO0FDRUc7O0FERUosYUFBT0EsT0FBUDtBQ0FFOztBREVILFdBQU8sSUFBUDtBQTlCWSxHQUFiOztBQWdDQWxCLFdBQVM1NkMsR0FBR2tkLFNBQUgsQ0FBYUMsSUFBYixDQUFrQjtBQUFDaGQsU0FBS3lPO0FBQU4sR0FBbEIsRUFBcUNrc0MsY0FBckMsQ0FBb0Q7QUFDNURDLGFBQVMsVUFBQ3RzQyxFQUFELEVBQUsvTyxNQUFMO0FBQ1IsVUFBRytQLFFBQU8sT0FBUCxJQUFrQityQyxXQUFXOTdDLE1BQVgsQ0FBckI7QUNFSyxlRERKd3JDLEtBQUs2UCxPQUFMLENBQWEsV0FBYixFQUEwQnRzQyxFQUExQixFQUE4QjRzQyxnQkFBZ0I1c0MsRUFBaEIsQ0FBOUIsQ0NDSTtBQUNEO0FETHVEO0FBSTVEd0MsYUFBUyxVQUFDeEMsRUFBRDtBQ0lMLGFESEh5OEIsS0FBS2o2QixPQUFMLENBQWEsV0FBYixFQUEwQnhDLEVBQTFCLENDR0c7QURSd0Q7QUFBQSxHQUFwRCxDQUFUO0FBUUE3SSxhQUFXeTFDLGdCQUFnQnpzQyxVQUFoQixDQUFYO0FBRUFzOEIsT0FBSzhQLEtBQUwsQ0FBVyxXQUFYLEVBQUFwMUMsWUFBQSxPQUF3QkEsU0FBVXpGLEdBQWxDLEdBQWtDLE1BQWxDLEVBQXVDeUYsUUFBdkM7QUFFQXNsQyxPQUFLK08sS0FBTDtBQ0VDLFNEQUQvTyxLQUFLK1AsTUFBTCxDQUFZO0FDQ1QsV0RBRkwsT0FBT00sSUFBUCxFQ0FFO0FEREgsSUNBQztBRHRJRjtBQTBJQXQ3QyxPQUFPbzZDLE9BQVAsQ0FBZSxpQkFBZixFQUFrQyxVQUFDcHJDLFVBQUQ7QUFDakMsTUFBQXF0QyxpQkFBQSxFQUFBckIsTUFBQSxFQUFBMVAsSUFBQTs7QUFBQSxPQUFPLEtBQUs3MEIsTUFBWjtBQUNDLFdBQU8sS0FBSzRqQyxLQUFMLEVBQVA7QUNHQzs7QURERixPQUFPcnJDLFVBQVA7QUFDQyxXQUFPLEtBQUtxckMsS0FBTCxFQUFQO0FDR0M7O0FEREYvTyxTQUFPLElBQVA7O0FBRUErUSxzQkFBb0IsVUFBQ0MsTUFBRDtBQUNuQixXQUFPbDhDLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCO0FBQUNDLFdBQUsrN0M7QUFBTixLQUFyQixFQUFvQztBQUFDeDhDLGNBQVE7QUFBQ1MsYUFBSyxDQUFOO0FBQVNzSixnQkFBUTtBQUFqQjtBQUFULEtBQXBDLENBQVA7QUFEbUIsR0FBcEI7O0FBSUFteEMsV0FBVTU2QyxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCO0FBQUNoZCxTQUFLeU87QUFBTixHQUFsQixFQUFxQ2tzQyxjQUFyQyxDQUFvRDtBQUM3REMsYUFBUyxVQUFDdHNDLEVBQUQ7QUNVTCxhRFRIeThCLEtBQUs2UCxPQUFMLENBQWEsaUJBQWIsRUFBZ0Nuc0MsVUFBaEMsRUFBNENxdEMsa0JBQWtCcnRDLFVBQWxCLENBQTVDLENDU0c7QURYeUQ7QUFBQSxHQUFwRCxDQUFWO0FBS0FzOEIsT0FBSzhQLEtBQUwsQ0FBVyxpQkFBWCxFQUE4QnBzQyxVQUE5QixFQUEwQ3F0QyxrQkFBa0JydEMsVUFBbEIsQ0FBMUM7QUFFQXM4QixPQUFLK08sS0FBTDtBQ1NDLFNEUkQvTyxLQUFLK1AsTUFBTCxDQUFZO0FDU1QsV0RSRkwsT0FBT00sSUFBUCxFQ1FFO0FEVEgsSUNRQztBRDdCRixHOzs7Ozs7Ozs7Ozs7QUV6SUN0N0MsT0FBT282QyxPQUFQLENBQWUsZ0JBQWYsRUFBaUMsVUFBQ3h4QixPQUFELEVBQVUvWSxHQUFWLEVBQWV3dEIsTUFBZjtBQUVoQyxNQUFBenNDLEtBQUE7O0FBQUEsT0FBTyxLQUFLNmxCLE1BQVo7QUFDQyxXQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDQUE7O0FERUQsT0FBT3p4QixPQUFQO0FBQ0MsV0FBTyxLQUFLeXhCLEtBQUwsRUFBUDtBQ0FBOztBREVEenBELFVBQVE7QUFBQzRXLFdBQU9vaEI7QUFBUixHQUFSOztBQUNBLE1BQUcvWSxRQUFPLE9BQVY7QUFDQ2pmLFVBQU0wOUIsV0FBTixHQUFvQixLQUFLN1gsTUFBekI7QUFERCxTQUVLLElBQUc1RyxRQUFPLFFBQVY7QUFDSmpmLFVBQU1taEMsWUFBTixHQUFxQixLQUFLdGIsTUFBMUI7QUFESSxTQUVBLElBQUc1RyxRQUFPLE9BQVY7QUFDSmpmLFVBQU1pK0IsU0FBTixHQUFrQixLQUFLcFksTUFBdkI7QUFDQTdsQixVQUFNbVgsS0FBTixHQUFjLE9BQWQ7QUFGSSxTQUdBLElBQUc4SCxRQUFPLFNBQVY7QUFDSmpmLFVBQU1pK0IsU0FBTixHQUFrQixLQUFLcFksTUFBdkI7QUFDQTdsQixVQUFNbVgsS0FBTixHQUFjLFNBQWQ7QUFGSSxTQUdBLElBQUc4SCxRQUFPLFdBQVY7QUFDSmpmLFVBQU1pK0IsU0FBTixHQUFrQixLQUFLcFksTUFBdkI7QUFDQTdsQixVQUFNbVgsS0FBTixHQUFjLFdBQWQ7QUFGSSxTQUdBLElBQUc4SCxRQUFPLFNBQVY7QUFDSmpmLFVBQU0wVixJQUFOLEdBQWErMkIsTUFBYjtBQUNBenNDLFVBQU1tWCxLQUFOLEdBQWM7QUFBQzZXLFdBQUssQ0FBQyxTQUFELEVBQVcsV0FBWDtBQUFOLEtBQWQ7QUFGSTtBQUlKaHVCLFVBQU1tWCxLQUFOLEdBQWMsTUFBZDtBQ0lBOztBREZELFNBQU8zSCxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCM3NCLEtBQWxCLEVBQXlCO0FBQUNrUCxZQUFRO0FBQUM5SixZQUFLLENBQU47QUFBU3F2QixlQUFRLENBQWpCO0FBQW9CM2xCLFlBQUssQ0FBekI7QUFBNEI0RyxZQUFNLENBQWxDO0FBQXFDa0IsYUFBTSxDQUEzQztBQUE4Q3lxQixnQkFBUyxDQUF2RDtBQUEwRGxXLGlCQUFXLENBQXJFO0FBQXdFNVQsbUJBQVksQ0FBcEY7QUFBdUZ4SSxvQkFBYyxDQUFyRztBQUF3RzRHLG9CQUFjO0FBQXRIO0FBQVQsR0FBekIsQ0FBUDtBQTVCRCxHOzs7Ozs7Ozs7Ozs7QUVERCxJQUFBZzJDLHdCQUFBLEVBQUFDLDRCQUFBOztBQUFBQSwrQkFBK0IsVUFBQ0MsVUFBRCxFQUFhaG1DLE1BQWIsRUFBcUJpbUMsT0FBckIsRUFBOEJwbEQsUUFBOUI7QUFDOUIsTUFBQXFsRCxTQUFBO0FBQUFBLGNBQVksQ0FBQztBQUNaLGNBQVU7QUFDVCxhQUFPRjtBQURFO0FBREUsR0FBRCxFQUlUO0FBQUMsZ0JBQVk7QUFBQyxjQUFRLENBQVQ7QUFBWSxrQkFBWTtBQUF4QjtBQUFiLEdBSlMsRUFJa0Q7QUFBQyxlQUFXO0FBQVosR0FKbEQsRUFJNEU7QUFBQyxlQUFXO0FBQVosR0FKNUUsRUFLWDtBQUFDLGNBQVU7QUFBQyw4QkFBd0IsSUFBekI7QUFBK0I3OEIsV0FBSSxDQUFDO0FBQUMsNEJBQW9Cbko7QUFBckIsT0FBRCxFQUE4QjtBQUFDLHlCQUFpQkE7QUFBbEIsT0FBOUI7QUFBbkM7QUFBWCxHQUxXLEVBTVg7QUFBQyxjQUFVO0FBQUMsYUFBTyxNQUFSO0FBQWdCLHFCQUFlO0FBQUMsaUJBQVM7QUFBVjtBQUEvQjtBQUFYLEdBTlcsQ0FBWjtBQ3FDQyxTRDVCRHJXLEdBQUdrZCxTQUFILENBQWFzL0IsYUFBYixHQUE2QkMsU0FBN0IsQ0FBdUNGLFNBQXZDLEVBQWtERyxPQUFsRCxDQUEwRCxVQUFDMTJCLEdBQUQsRUFBTWwzQixJQUFOO0FBQ3pELFFBQUdrM0IsR0FBSDtBQUNDLFlBQU0sSUFBSXhxQixLQUFKLENBQVV3cUIsR0FBVixDQUFOO0FDNkJFOztBRDNCSGwzQixTQUFLdVIsT0FBTCxDQUFhLFVBQUNzOEMsR0FBRDtBQzZCVCxhRDVCSEwsUUFBUXptRCxJQUFSLENBQWE4bUQsR0FBYixDQzRCRztBRDdCSjs7QUFHQSxRQUFHemxELFlBQVkwSixFQUFFaXFDLFVBQUYsQ0FBYTN6QyxRQUFiLENBQWY7QUFDQ0E7QUM2QkU7QURyQ0osSUM0QkM7QUR0QzZCLENBQS9COztBQXFCQWlsRCwyQkFBMkJ2OEMsT0FBTzhxQyxTQUFQLENBQWlCMFIsNEJBQWpCLENBQTNCO0FBRUF4OEMsT0FBT282QyxPQUFQLENBQWUsa0JBQWYsRUFBbUMsVUFBQ0ksU0FBRCxFQUFZQyxHQUFaLEVBQWlCMzZDLE1BQWpCO0FBQ2xDLE1BQUFtd0MsWUFBQSxFQUFBK00sd0JBQUEsRUFBQUMsa0JBQUEsRUFBQWpDLE1BQUEsRUFBQTFQLElBQUE7O0FBQUEsT0FBTyxLQUFLNzBCLE1BQVo7QUFDQyxXQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDZ0NDOztBRDlCRm5oQixRQUFNc2hCLFNBQU4sRUFBaUI3ckQsTUFBakI7QUFFQXVxQyxRQUFNdWhCLEdBQU4sRUFBVzE2QyxLQUFYO0FBRUFtNUIsUUFBTXA1QixNQUFOLEVBQWNxNUIsTUFBTXVoQixRQUFOLENBQWV0c0QsTUFBZixDQUFkO0FBRUEwUixTQUFPc3VCLFFBQVAsR0FBa0IsQ0FBbEI7QUFFQWtkLFNBQU8sSUFBUDs7QUFFQTBSLDZCQUEyQixVQUFDdm1DLE1BQUQsRUFBU3pILFVBQVQ7QUFDMUIsUUFBQTlmLElBQUE7QUFBQUEsV0FBTyxFQUFQO0FBQ0FxdEQsNkJBQXlCdnRDLFVBQXpCLEVBQXFDeUgsTUFBckMsRUFBNkN2bkIsSUFBN0M7O0FBQ0EsUUFBR0EsS0FBS3pCLE1BQUwsR0FBYyxDQUFqQjtBQUNDLGFBQU95QixLQUFLLENBQUwsQ0FBUDtBQzRCRTtBRGhDdUIsR0FBM0I7O0FBT0ErZ0QsaUJBQWUsVUFBQ3g1QixNQUFELEVBQVN6SCxVQUFUO0FBQ2QsUUFBQXlJLE9BQUEsRUFBQUgsUUFBQSxFQUFBdFIsUUFBQSxFQUFBaVMsT0FBQSxFQUFBNkgsU0FBQSxFQUFBbzlCLGlCQUFBO0FBQUFsM0MsZUFBVzVGLEdBQUdrZCxTQUFILENBQWFoZCxPQUFiLENBQXFCO0FBQUNDLFdBQUt5TztBQUFOLEtBQXJCLEVBQXdDO0FBQUNsUCxjQUFRO0FBQUMrSixnQkFBUTtBQUFUO0FBQVQsS0FBeEMsQ0FBWDtBQUNBaVcsZ0JBQVksSUFBWjs7QUFFQSxRQUFHLENBQUM5WixRQUFKO0FBQ0M7QUNrQ0U7O0FEaENILFFBQUcsQ0FBQ0EsU0FBUzZELE1BQVYsSUFBb0I3RCxTQUFTNkQsTUFBVCxDQUFnQnBjLE1BQWhCLEdBQXlCLENBQWhEO0FBQ0M7QUNrQ0U7O0FEaENIeXZELHdCQUFvQmwzQyxTQUFTNkQsTUFBVCxDQUFnQnFLLGNBQWhCLENBQStCLGFBQS9CLEVBQThDLEtBQTlDLENBQXBCOztBQUVBLFFBQUdncEMsa0JBQWtCenZELE1BQWxCLEdBQTJCLENBQTlCO0FBQ0M2cEIsaUJBQVc0bEMsa0JBQWtCLENBQWxCLEVBQXFCNWxDLFFBQXJCLENBQThCcEQsY0FBOUIsQ0FBNkMsYUFBN0MsRUFBNEQsS0FBNUQsRUFBbUVBLGNBQW5FLENBQWtGLFNBQWxGLEVBQTZGdUMsTUFBN0YsQ0FBWDs7QUFFQSxVQUFHYSxTQUFTN3BCLE1BQVQsR0FBa0IsQ0FBckI7QUFDQ2dxQixrQkFBVUgsU0FBUyxDQUFULENBQVY7QUFDQXdJLG9CQUFZO0FBQ1hqUixjQUFJNEksUUFBUWxYLEdBREQ7QUFFWHlGLG9CQUFVeVIsUUFBUXpSLFFBRlA7QUFHWCtGLGlCQUFPMEwsUUFBUTFMLEtBSEo7QUFJWGtNLG1CQUFTUixRQUFRUSxPQUpOO0FBS1h3WixzQkFBWWhhLFFBQVFnYSxVQUxUO0FBTVg2QixpQkFBTzdiLFFBQVE2YixLQU5KO0FBT1gvQixxQkFBVzlaLFFBQVE4WjtBQVBSLFNBQVo7QUFMRjtBQzhDRzs7QUQvQkgsUUFBRyxDQUFDelIsU0FBSjtBQUNDN0gsZ0JBQVUsS0FBVjtBQUNBalMsZUFBUzZELE1BQVQsQ0FBZ0JwSixPQUFoQixDQUF3QixVQUFDc0wsS0FBRDtBQUN2QixZQUFBcEwsR0FBQTtBQ2lDSSxlQUFPb0wsU0FBUyxJQUFULEdBQWdCLENBQUNwTCxNQUFNb0wsTUFBTXVMLFFBQWIsS0FBMEIsSUFBMUIsR0FBaUMzVyxJRGpDM0NGLE9DaUMyQyxDRGpDbkMsVUFBQ2dYLE9BQUQ7QUFDeEIsY0FBR0EsUUFBUWxsQixJQUFSLEtBQWdCLElBQWhCLElBQXlCa2xCLFFBQVE3USxJQUFSLEtBQWdCNlAsTUFBekMsSUFBb0RnQixRQUFRVixXQUFSLEtBQXVCLEtBQTlFO0FBQ0MsZ0JBQUdVLFFBQVFRLE9BQVg7QUFDQ0Esd0JBQVUsSUFBVjtBQ2tDTTs7QUFDRCxtQkRsQ042SCxZQUFZO0FBQUNqUixrQkFBSTRJLFFBQVFsWCxHQUFiO0FBQWtCMFgsdUJBQVNBLE9BQTNCO0FBQW9Dd1osMEJBQVloYSxRQUFRZ2EsVUFBeEQ7QUFBb0U2QixxQkFBTzdiLFFBQVE2YixLQUFuRjtBQUEwRi9CLHlCQUFXOVosUUFBUThaO0FBQTdHLGFDa0NOO0FBT0Q7QUQ3Q1AsU0NpQzRELENBQWpDLEdEakMzQixNQ2lDVyxHRGpDWCxNQ2lDSTtBRGxDTDtBQ2lERTs7QUQxQ0gsV0FBT3pSLFNBQVA7QUFwQ2MsR0FBZjs7QUFzQ0FtOUIsdUJBQXFCLFVBQUNqdUMsVUFBRDtBQUNwQixRQUFBaEosUUFBQSxFQUFBckYsR0FBQSxFQUFBa0csSUFBQSxFQUFBczJDLGVBQUE7QUFBQW4zQyxlQUFXNUYsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBQ0MsV0FBS3lPO0FBQU4sS0FBckIsRUFBd0M7QUFBQ2xQLGNBQVE7QUFBQyx1QkFBZSxDQUFoQjtBQUFtQixrQkFBVTtBQUFDczlDLGtCQUFRLENBQUM7QUFBVjtBQUE3QjtBQUFULEtBQXhDLENBQVg7O0FBQ0EsUUFBR3AzQyxRQUFIO0FBQ0NtM0Msd0JBQUEsQ0FBQXg4QyxNQUFBcUYsU0FBQTZELE1BQUEsYUFBQWhELE9BQUFsRyxJQUFBLGNBQUFrRyxLQUF1QzdRLElBQXZDLEdBQXVDLE1BQXZDLEdBQXVDLE1BQXZDO0FDc0RFOztBRHBESCxXQUFPbW5ELGVBQVA7QUFMb0IsR0FBckI7O0FBT0FuQyxXQUFTNTZDLEdBQUdrZCxTQUFILENBQWFDLElBQWIsQ0FBa0I7QUFBQ2hkLFNBQUs7QUFBQ3FlLFdBQUs2N0I7QUFBTjtBQUFOLEdBQWxCLEVBQXFDO0FBQUMzNkMsWUFBUTtBQUFDK0osY0FBUTtBQUFUO0FBQVQsR0FBckMsRUFBNERxeEMsY0FBNUQsQ0FBMkU7QUFDbkZDLGFBQVMsVUFBQ3RzQyxFQUFEO0FBQ1IsVUFBQS9KLEtBQUEsRUFBQWtCLFFBQUEsRUFBQThaLFNBQUEsRUFBQXU5QixxQkFBQSxFQUFBMThDLEdBQUEsRUFBQWtHLElBQUE7QUFBQWIsaUJBQVc1RixHQUFHa2QsU0FBSCxDQUFhaGQsT0FBYixDQUFxQjtBQUFDQyxhQUFLc087QUFBTixPQUFyQixFQUFnQztBQUFDL08sZ0JBQVFBO0FBQVQsT0FBaEMsQ0FBWDs7QUFDQSxVQUFVLENBQUlrRyxRQUFkO0FBQUE7QUNvRUk7O0FEbkVKOFosa0JBQVltd0IsYUFBYTNFLEtBQUs3MEIsTUFBbEIsRUFBMEI1SCxFQUExQixDQUFaO0FBQ0F3dUMsOEJBQXdCTCx5QkFBeUIxUixLQUFLNzBCLE1BQTlCLEVBQXNDNUgsRUFBdEMsQ0FBeEI7O0FBQ0EsVUFBR2lSLFNBQUg7QUFDQzlaLGlCQUFTaVMsT0FBVCxHQUFtQjZILFVBQVU3SCxPQUE3QjtBQUNBalMsaUJBQVN5ckIsVUFBVCxHQUFzQjNSLFVBQVUyUixVQUFoQzs7QUFDQSxZQUFHM1IsVUFBVXdULEtBQWI7QUFDQ3R0QixtQkFBU3MzQyxlQUFULEdBQTJCeDlCLFVBQVV5UixTQUFyQztBQUpGO0FBQUE7QUFNQ3ZyQixpQkFBU2lTLE9BQVQsR0FBbUIsSUFBbkI7QUNzRUc7O0FEcEVKLFVBQUdvbEMscUJBQUg7QUFDQ3IzQyxpQkFBU3UzQyxjQUFULEdBQTBCRixzQkFBc0J2bEMsV0FBaEQ7QUNzRUc7O0FEcEVKOVIsZUFBU3czQyxLQUFULEtBQUE3OEMsTUFBQXFGLFNBQUFvb0IsUUFBQSxZQUFBenRCLElBQW9DME4sUUFBcEMsQ0FBNkNpOUIsS0FBSzcwQixNQUFsRCxJQUFpQixNQUFqQixLQUE2RCxLQUE3RDtBQUNBelEsZUFBU3kzQyxRQUFULEtBQUE1MkMsT0FBQWIsU0FBQW9vQixRQUFBLFlBQUF2bkIsS0FBdUNwWixNQUF2QyxHQUF1QyxNQUF2QyxLQUFpRCxDQUFqRDtBQUNBLGFBQU91WSxTQUFTb29CLFFBQWhCOztBQUNBO0FDc0VLLGVEckVKa2QsS0FBSzZQLE9BQUwsQ0FBYSxXQUFiLEVBQTBCdHNDLEVBQTFCLEVBQThCN0ksUUFBOUIsQ0NxRUk7QUR0RUwsZUFBQTJULE1BQUE7QUFFTTdVLGdCQUFBNlUsTUFBQTtBQUNML1ksZ0JBQVFDLEdBQVIsQ0FBWSxpQ0FBWixFQUErQ2lFLE1BQU13bUIsT0FBckQ7QUFDQTFxQixnQkFBUUMsR0FBUixDQUFZLGVBQVosRUFBNkJ5cUMsS0FBSzcwQixNQUFsQztBQUNBN1YsZ0JBQVFDLEdBQVIsQ0FBWSxhQUFaLEVBQTJCMjVDLFNBQTNCO0FBQ0E1NUMsZ0JBQVFDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCeUwsS0FBS0MsU0FBTCxDQUFla3VDLEdBQWYsQ0FBckI7QUN1RUksZUR0RUo3NUMsUUFBUUMsR0FBUixDQUFZLGFBQVosRUFBMkJ5TCxLQUFLQyxTQUFMLENBQWV1VCxTQUFmLENBQTNCLENDc0VJO0FBQ0Q7QURsRzhFO0FBNEJuRnpPLGFBQVMsVUFBQ3hDLEVBQUQ7QUN5RUwsYUR4RUh5OEIsS0FBS2o2QixPQUFMLENBQWEsV0FBYixFQUEwQnhDLEVBQTFCLENDd0VHO0FEckcrRTtBQUFBLEdBQTNFLENBQVQ7QUFnQ0E0ckMsTUFBSWg2QyxPQUFKLENBQVksVUFBQ29PLEVBQUQ7QUFDWCxRQUFBN0ksUUFBQSxFQUFBOFosU0FBQSxFQUFBdTlCLHFCQUFBLEVBQUExOEMsR0FBQSxFQUFBa0csSUFBQTtBQUFBYixlQUFXNUYsR0FBR2tkLFNBQUgsQ0FBYWhkLE9BQWIsQ0FBcUI7QUFBQ0MsV0FBS3NPO0FBQU4sS0FBckIsRUFBZ0M7QUFBQy9PLGNBQVFBO0FBQVQsS0FBaEMsQ0FBWDs7QUFDQSxRQUFVLENBQUlrRyxRQUFkO0FBQUE7QUMrRUc7O0FEOUVIOFosZ0JBQVltd0IsYUFBYTNFLEtBQUs3MEIsTUFBbEIsRUFBMEI1SCxFQUExQixDQUFaO0FBQ0F3dUMsNEJBQXdCTCx5QkFBeUIxUixLQUFLNzBCLE1BQTlCLEVBQXNDNUgsRUFBdEMsQ0FBeEI7O0FBQ0EsUUFBR2lSLFNBQUg7QUFDQzlaLGVBQVNpUyxPQUFULEdBQW1CNkgsVUFBVTdILE9BQTdCO0FBQ0FqUyxlQUFTeXJCLFVBQVQsR0FBc0IzUixVQUFVMlIsVUFBaEM7O0FBQ0EsVUFBRzNSLFVBQVV3VCxLQUFiO0FBQ0V0dEIsaUJBQVNzM0MsZUFBVCxHQUEyQng5QixVQUFVeVIsU0FBckM7QUFKSDtBQUFBO0FBTUN2ckIsZUFBU2lTLE9BQVQsR0FBbUIsSUFBbkI7QUNpRkU7O0FEL0VILFFBQUdvbEMscUJBQUg7QUFDQ3IzQyxlQUFTdTNDLGNBQVQsR0FBMEJGLHNCQUFzQnZsQyxXQUFoRDtBQ2lGRTs7QUQvRUg5UixhQUFTdzNDLEtBQVQsS0FBQTc4QyxNQUFBcUYsU0FBQW9vQixRQUFBLFlBQUF6dEIsSUFBb0MwTixRQUFwQyxDQUE2Q2k5QixLQUFLNzBCLE1BQWxELElBQWlCLE1BQWpCLEtBQTZELEtBQTdEO0FBQ0F6USxhQUFTeTNDLFFBQVQsS0FBQTUyQyxPQUFBYixTQUFBb29CLFFBQUEsWUFBQXZuQixLQUF1Q3BaLE1BQXZDLEdBQXVDLE1BQXZDLEtBQWlELENBQWpEO0FBQ0EsV0FBT3VZLFNBQVNvb0IsUUFBaEI7QUNpRkUsV0RoRkZrZCxLQUFLOFAsS0FBTCxDQUFXLFdBQVgsRUFBd0J2c0MsRUFBeEIsRUFBNEI3SSxRQUE1QixDQ2dGRTtBRG5HSDtBQXFCQXNsQyxPQUFLK08sS0FBTDtBQ2lGQyxTRGhGRC9PLEtBQUsrUCxNQUFMLENBQVk7QUNpRlQsV0RoRkZMLE9BQU9NLElBQVAsRUNnRkU7QURqRkgsSUNnRkM7QUR4TUYsRzs7Ozs7Ozs7Ozs7O0FFdkJBdDdDLE9BQU9vNkMsT0FBUCxDQUFlLGlCQUFmLEVBQWtDLFVBQUN4eEIsT0FBRDtBQUNqQyxNQUFBblMsTUFBQTtBQUFBeWlCLFFBQU10USxPQUFOLEVBQWVqNkIsTUFBZjs7QUFFQSxPQUFPLEtBQUs4bkIsTUFBWjtBQUNDLFdBQU8sS0FBSzRqQyxLQUFMLEVBQVA7QUNDQzs7QURDRjVqQyxXQUFTLEtBQUtBLE1BQWQ7QUFDQSxTQUFPclcsR0FBR2tkLFNBQUgsQ0FBYUMsSUFBYixDQUFrQjtBQUFDeFYsV0FBTSxPQUFQO0FBQWVQLFdBQU1vaEIsT0FBckI7QUFBNkJpRyxlQUFVcFksTUFBdkM7QUFBOENtSixTQUFJLENBQUM7QUFBQzBPLG1CQUFhO0FBQUNsSixpQkFBUTtBQUFUO0FBQWQsS0FBRCxFQUFpQztBQUFDa0osbUJBQWE7QUFBZCxLQUFqQztBQUFsRCxHQUFsQixFQUEwSDtBQUFDeHVCLFlBQVE7QUFBQ1MsV0FBSyxDQUFOO0FBQVN3SCxhQUFPLENBQWhCO0FBQW1CUCxhQUFPLENBQTFCO0FBQTZCcW5CLGlCQUFXLENBQXhDO0FBQTJDUCxtQkFBYSxDQUF4RDtBQUEyRDJELGdCQUFVLENBQXJFO0FBQXdFajhCLFlBQU07QUFBOUUsS0FBVDtBQUEyRmpHLFVBQUs7QUFBQ2tpQyxnQkFBVSxDQUFDO0FBQVo7QUFBaEcsR0FBMUgsQ0FBUDtBQVBELEc7Ozs7Ozs7Ozs7OztBRUFBanlCLE9BQU9vNkMsT0FBUCxDQUFlLG9DQUFmLEVBQXFELFVBQUNzRCxZQUFEO0FBQ3BELE1BQUExQyxNQUFBLEVBQUExUCxJQUFBO0FBQUFwUyxRQUFNd2tCLFlBQU4sRUFBb0IzOUMsS0FBcEI7O0FBRUEsT0FBTyxLQUFLMFcsTUFBWjtBQUNDLFdBQU8sS0FBSzRqQyxLQUFMLEVBQVA7QUNDQzs7QURDRixPQUFPcUQsWUFBUDtBQUNDLFdBQU8sS0FBS3JELEtBQUwsRUFBUDtBQ0NDOztBRENGLE1BQUdyNUMsRUFBRTRMLE9BQUYsQ0FBVTh3QyxZQUFWLENBQUg7QUFDQyxXQUFPLEtBQUtyRCxLQUFMLEVBQVA7QUNDQzs7QURDRi9PLFNBQU8sSUFBUDtBQUVBMFAsV0FBUzU2QyxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCO0FBQUNoZCxTQUFLO0FBQUNxZSxXQUFLOCtCO0FBQU47QUFBTixHQUFsQixFQUE4QztBQUFDNTlDLFlBQVE7QUFBQ2lJLGFBQU8sQ0FBUjtBQUFXOEIsY0FBTztBQUFDdXpDLGdCQUFRO0FBQVQ7QUFBbEI7QUFBVCxHQUE5QyxFQUEwRmxDLGNBQTFGLENBQXlHO0FBQ2pIRSxXQUFPLFVBQUN2c0MsRUFBRCxFQUFLL08sTUFBTDtBQ1dILGFEVkh3ckMsS0FBSzhQLEtBQUwsQ0FBVyxXQUFYLEVBQXdCdnNDLEVBQXhCLEVBQTRCO0FBQUM5RyxlQUFPakksT0FBT2lJLEtBQWY7QUFBc0JrUSxpQkFBU25ZLE9BQU8rSixNQUFQLENBQWMsQ0FBZCxFQUFpQnlOLFFBQWpCLENBQTBCLENBQTFCLEVBQTZCVztBQUE1RCxPQUE1QixDQ1VHO0FEWjZHO0FBSWpIa2pDLGFBQVMsVUFBQ3RzQyxFQUFELEVBQUsvTyxNQUFMO0FBQ1IsVUFBR0EsT0FBT2lJLEtBQVY7QUFDQ3VqQyxhQUFLNlAsT0FBTCxDQUFhLFdBQWIsRUFBMEJ0c0MsRUFBMUIsRUFBOEI7QUFBQzlHLGlCQUFPakksT0FBT2lJO0FBQWYsU0FBOUI7QUNnQkc7O0FEZkosVUFBR2pJLE9BQU8rSixNQUFWO0FDaUJLLGVEaEJKeWhDLEtBQUs2UCxPQUFMLENBQWEsV0FBYixFQUEwQnRzQyxFQUExQixFQUE4QjtBQUFDb0osbUJBQVNuWSxPQUFPK0osTUFBUCxDQUFjLENBQWQsRUFBaUJ5TixRQUFqQixDQUEwQixDQUExQixFQUE2Qlc7QUFBdkMsU0FBOUIsQ0NnQkk7QUFHRDtBRDNCNEc7QUFBQSxHQUF6RyxDQUFUO0FBV0EsT0FBS29pQyxLQUFMO0FDb0JDLFNEbkJELEtBQUtnQixNQUFMLENBQVk7QUNvQlQsV0RuQkZMLE9BQU9NLElBQVAsRUNtQkU7QURwQkgsSUNtQkM7QUQ3Q0YsRzs7Ozs7Ozs7Ozs7O0FFQUF0N0MsT0FBT282QyxPQUFQLENBQWUsa0JBQWYsRUFBbUMsVUFBQ3ByQyxVQUFELEVBQWFyRCxpQkFBYjtBQUNsQyxNQUFBaEwsR0FBQSxFQUFBZzlDLG9CQUFBOztBQUFBLE9BQU8sS0FBS2xuQyxNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ0VDOztBREFGLE9BQU9yckMsVUFBUDtBQUNDLFdBQU8sS0FBS3FyQyxLQUFMLEVBQVA7QUNFQzs7QURBRnNELHlCQUFBLENBQUFoOUMsTUFBQVAsR0FBQWtkLFNBQUEsQ0FBQWhkLE9BQUEsQ0FBQTBPLFVBQUE7QUNFR2xQLFlBQVE7QUFDTjZMLHlCQUFtQjtBQURiO0FERlgsU0NLUSxJRExSLEdDS2VoTCxJREwyRWdMLGlCQUExRixHQUEwRixNQUExRjs7QUFFQSxNQUFHZ3lDLHdCQUF3QjM4QyxFQUFFalMsT0FBRixDQUFVNHVELG9CQUFWLENBQTNCO0FBQ0MsV0FBT3Y5QyxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCO0FBQUNoZCxXQUFLO0FBQUNxZSxhQUFNKytCO0FBQVA7QUFBTixLQUFsQixFQUF1RDtBQUFDNzlDLGNBQVE7QUFBQ1MsYUFBSyxDQUFOO0FBQVN2SyxjQUFNLENBQWY7QUFBa0J3UixlQUFPO0FBQXpCO0FBQVQsS0FBdkQsQ0FBUDtBQUREO0FBR0MsV0FBTyxLQUFLNnlDLEtBQUwsRUFBUDtBQ2VDO0FEM0JILEc7Ozs7Ozs7Ozs7OztBRUFBLElBQUdyNkMsT0FBT0MsUUFBVjtBQUNJRCxTQUFPbzZDLE9BQVAsQ0FBZSxrQkFBZixFQUFtQyxVQUFDeHhCLE9BQUQ7QUFDL0JzUSxVQUFNdFEsT0FBTixFQUFlajZCLE1BQWY7O0FBRUEsU0FBTyxLQUFLOG5CLE1BQVo7QUFDSSxhQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDQVA7O0FERUcsV0FBT2o2QyxHQUFHc1csZ0JBQUgsQ0FBb0I2RyxJQUFwQixDQUF5QjtBQUFFL1YsYUFBT29oQjtBQUFULEtBQXpCLEVBQTZDO0FBQUM5b0IsY0FBUTtBQUFDd2xCLG9CQUFZLENBQWI7QUFBZ0JELGlCQUFTLENBQXpCO0FBQTRCNk0scUJBQWE7QUFBekM7QUFBVCxLQUE3QyxDQUFQO0FBTko7QUNlSCxDOzs7Ozs7Ozs7Ozs7QUNoQkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1DQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BbkNBLElBQUEwckIsbUNBQUEsRUFBQUMsNkJBQUE7O0FBcUZBQSxnQ0FBZ0MsVUFBQ2oxQixPQUFELEVBQVVuUyxNQUFWLEVBQWtCcW5DLE1BQWxCLEVBQTBCeG1ELFFBQTFCO0FDRzlCLFNERkQ4SSxHQUFHa2QsU0FBSCxDQUFhcy9CLGFBQWIsR0FBNkJDLFNBQTdCLENBQXVDLENBQ3RDO0FBQ0NrQixZQUFRO0FBQ1B2MkMsYUFBT29oQixPQURBO0FBRVBoSixXQUFLLENBQUM7QUFBQzBPLHFCQUFhN1g7QUFBZCxPQUFELEVBQXdCO0FBQUMyWCxrQkFBVTNYO0FBQVgsT0FBeEI7QUFGRTtBQURULEdBRHNDLEVBT3RDO0FBQ0N1bkMsWUFBUTtBQUNQejlDLFdBQUs7QUFBQytGLGNBQU0sT0FBUDtBQUFnQmttQixrQkFBVTtBQUExQixPQURFO0FBQ3NDaFAsYUFBTztBQUFDeWdDLGNBQU07QUFBUDtBQUQ3QztBQURULEdBUHNDLENBQXZDLEVBWUduQixPQVpILENBWVcsVUFBQzEyQixHQUFELEVBQU1sM0IsSUFBTjtBQUNWLFFBQUdrM0IsR0FBSDtBQUNDLFlBQU0sSUFBSXhxQixLQUFKLENBQVV3cUIsR0FBVixDQUFOO0FDY0U7O0FEWkhsM0IsU0FBS3VSLE9BQUwsQ0FBYSxVQUFDczhDLEdBQUQ7QUNjVCxhRGJIZSxPQUFPN25ELElBQVAsQ0FBWThtRCxHQUFaLENDYUc7QURkSjs7QUFHQSxRQUFHemxELFlBQVkwSixFQUFFaXFDLFVBQUYsQ0FBYTN6QyxRQUFiLENBQWY7QUFDQ0E7QUNjRTtBRGxDSixJQ0VDO0FESDhCLENBQWhDOztBQXdCQXNtRCxzQ0FBc0M1OUMsT0FBTzhxQyxTQUFQLENBQWlCK1MsNkJBQWpCLENBQXRDO0FBRUE3OUMsT0FBT282QyxPQUFQLENBQWUsK0JBQWYsRUFBZ0QsVUFBQ3h4QixPQUFEO0FBRS9DLE1BQUFzMUIsV0FBQSxFQUFBQyxVQUFBLEVBQUFDLEtBQUEsRUFBQWx2RCxJQUFBLEVBQUE4ckQsTUFBQSxFQUFBcHFELEtBQUEsRUFBQTA2QyxJQUFBOztBQUFBLE9BQU8sS0FBSzcwQixNQUFaO0FBQ0MsV0FBTyxLQUFLNGpDLEtBQUwsRUFBUDtBQ2dCQzs7QURkRi9PLFNBQU8sSUFBUDtBQUVBMTZDLFVBQVE7QUFBQzRXLFdBQU9vaEI7QUFBUixHQUFSO0FBRUFoNEIsUUFBTWd2QixHQUFOLEdBQVksQ0FBQztBQUFDME8saUJBQWEsS0FBSzdYO0FBQW5CLEdBQUQsRUFBNkI7QUFBQzJYLGNBQVUsS0FBSzNYO0FBQWhCLEdBQTdCLENBQVo7QUFFQXZuQixTQUFPLEVBQVA7O0FBQ0EwdUQsc0NBQW9DaDFCLE9BQXBDLEVBQTZDMGlCLEtBQUs3MEIsTUFBbEQsRUFBMER2bkIsSUFBMUQ7O0FBRUFpdkQsZUFBYSxFQUFiOztBQUVBbjlDLElBQUVxYixJQUFGLENBQU9udEIsSUFBUCxFQUFhLFVBQUNtdkQsUUFBRDtBQ21CVixXRGxCRkYsV0FBV2xvRCxJQUFYLENBQWdCO0FBQUNzSyxXQUFLODlDLFNBQVM5OUMsR0FBVCxDQUFhK0YsSUFBbkI7QUFBeUJrbUIsZ0JBQVU2eEIsU0FBUzk5QyxHQUFULENBQWFpc0IsUUFBaEQ7QUFBMERoUCxhQUFPNmdDLFNBQVM3Z0M7QUFBMUUsS0FBaEIsQ0NrQkU7QURuQkg7O0FBR0E4dEIsT0FBSzhQLEtBQUwsQ0FBVyxnQkFBWCxFQUE2Qnh5QixPQUE3QixFQUFzQztBQUFDcGlCLFdBQU8yM0M7QUFBUixHQUF0Qzs7QUFFQUQsZ0JBQWMsVUFBQ25CLEdBQUQsRUFBTTlXLE1BQU47QUFDYixRQUFBcVksYUFBQTtBQUFBQSxvQkFBZ0J0OUMsRUFBRXVjLElBQUYsQ0FBTzRnQyxVQUFQLEVBQW1CLFVBQUN6OUMsQ0FBRDtBQUNsQyxhQUFPQSxFQUFFSCxHQUFGLEtBQVN3OEMsSUFBSXoyQyxJQUFwQjtBQURlLE1BQWhCOztBQUVBLFFBQUdnNEMsYUFBSDtBQUNDLFVBQUdyWSxXQUFVLE9BQWI7QUFDQ3FZLHNCQUFjOWdDLEtBQWQ7QUFERCxhQUVLLElBQUd5b0IsV0FBVSxTQUFiO0FBQ0pxWSxzQkFBYzlnQyxLQUFkO0FBSkY7QUFBQSxXQUtLLElBQUd5b0IsV0FBVSxPQUFiO0FBQ0prWSxpQkFBV2xvRCxJQUFYLENBQWdCO0FBQUNzSyxhQUFLdzhDLElBQUl6MkMsSUFBVjtBQUFnQmttQixrQkFBVXV3QixJQUFJdndCLFFBQTlCO0FBQXdDaFAsZUFBTztBQUEvQyxPQUFoQjtBQytCRTs7QUFDRCxXRDlCRjh0QixLQUFLNlAsT0FBTCxDQUFhLGdCQUFiLEVBQStCdnlCLE9BQS9CLEVBQXdDO0FBQUNwaUIsYUFBTzIzQztBQUFSLEtBQXhDLENDOEJFO0FEekNXLEdBQWQ7O0FBYUFDLFVBQVEsSUFBUjtBQUNBcEQsV0FBUzU2QyxHQUFHa2QsU0FBSCxDQUFhQyxJQUFiLENBQWtCM3NCLEtBQWxCLEVBQXlCO0FBQUNrUCxZQUFRO0FBQUNTLFdBQUssQ0FBTjtBQUFTK3RCLG1CQUFhLENBQXRCO0FBQXlCRixnQkFBVSxDQUFuQztBQUFzQzluQixZQUFNLENBQTVDO0FBQStDa21CLGdCQUFVO0FBQXpEO0FBQVQsR0FBekIsRUFBZ0creEIsT0FBaEcsQ0FBd0c7QUFDaEhuRCxXQUFPLFVBQUMyQixHQUFEO0FBQ04sVUFBRyxDQUFDcUIsS0FBSjtBQ3lDSyxlRHhDSkYsWUFBWW5CLEdBQVosRUFBaUIsT0FBakIsQ0N3Q0k7QUFDRDtBRDVDMkc7QUFJaEgxckMsYUFBUyxVQUFDMHJDLEdBQUQ7QUFDUixVQUFHLENBQUNxQixLQUFKO0FDMkNLLGVEMUNKRixZQUFZbkIsR0FBWixFQUFpQixTQUFqQixDQzBDSTtBQUNEO0FEakQyRztBQUFBLEdBQXhHLENBQVQ7QUFRQXFCLFVBQVEsS0FBUjtBQUVBOVMsT0FBSytPLEtBQUw7QUM0Q0MsU0QzQ0QvTyxLQUFLK1AsTUFBTCxDQUFZO0FDNENULFdEM0NGTCxPQUFPTSxJQUFQLEVDMkNFO0FENUNILElDMkNDO0FEekZGLEc7Ozs7Ozs7Ozs7OztBRTlHQXQ3QyxPQUFPbzZDLE9BQVAsQ0FBZSwyQkFBZixFQUE0QyxVQUFDeHhCLE9BQUQsRUFBVXlVLE1BQVY7QUFDM0NuRSxRQUFNdFEsT0FBTixFQUFlajZCLE1BQWY7QUFDQXVxQyxRQUFNbUUsTUFBTixFQUFjMXVDLE1BQWQ7O0FBRUEsT0FBTyxLQUFLOG5CLE1BQVo7QUFDQyxXQUFPLEtBQUs0akMsS0FBTCxFQUFQO0FDREM7O0FER0YsUUFBT3p4QixXQUFXeVUsTUFBbEI7QUFDQyxXQUFPLEtBQUtnZCxLQUFMLEVBQVA7QUNEQzs7QURHRixTQUFPNXpCLFFBQVErM0IsYUFBUixDQUFzQixXQUF0QixFQUFtQ2poQyxJQUFuQyxDQUF3QztBQUFFL1YsV0FBT29oQixPQUFUO0FBQWtCLGdCQUFZLE9BQTlCO0FBQXVDLGtCQUFjeVUsTUFBckQ7QUFBOERybkMsVUFBTTtBQUFwRSxHQUF4QyxDQUFQO0FBVkQsRzs7Ozs7Ozs7Ozs7O0FFREF5b0QsbUJBQW1CLEVBQW5CO0FBS0FBLGlCQUFpQixJQUFqQixJQUF3QixFQUF4QjtBQUtBQSxpQkFBaUIsT0FBakIsSUFBMkIsRUFBM0I7QUFFQXorQyxPQUFPNDFCLE9BQVAsQ0FBZTtBQUNkLE1BQUE4b0IsZ0JBQUEsRUFBQUMsZ0JBQUEsRUFBQUMsWUFBQSxFQUFBQyxZQUFBLEVBQUF4VSxFQUFBLEVBQUF5VSxJQUFBLEVBQUFudUQsSUFBQSxFQUFBb3VELE9BQUEsRUFBQUMsT0FBQSxFQUFBQyxZQUFBLEVBQUF0K0MsR0FBQSxFQUFBa0csSUFBQTtBQUFBd2pDLE9BQUtsVCxRQUFRLElBQVIsQ0FBTDtBQUNBeG1DLFNBQU93bUMsUUFBUSxNQUFSLENBQVA7QUFDQTJuQixTQUFPM25CLFFBQVEsTUFBUixDQUFQOztBQUNBOG5CLGlCQUFlLFVBQUNDLE9BQUQsRUFBVUMsU0FBVjtBQUNkLFFBQUEzL0IsS0FBQTtBQUFBQSxZQUFRNnFCLEdBQUcrVSxXQUFILENBQWVGLE9BQWYsQ0FBUjtBQ0RFLFdERUYxL0IsTUFBTS9lLE9BQU4sQ0FBYyxVQUFDekssSUFBRCxFQUFPOEIsS0FBUDtBQUNiLFVBQUE5SSxHQUFBLEVBQUFxd0QsSUFBQTtBQUFBQSxhQUFPaFYsR0FBR2lWLFFBQUgsQ0FBWTN1RCxLQUFLNEQsSUFBTCxDQUFVMnFELE9BQVYsRUFBbUJscEQsSUFBbkIsQ0FBWixDQUFQOztBQUNBLFVBQUdxcEQsS0FBS0UsV0FBTCxFQUFIO0FDQUssZURFSk4sYUFBYXR1RCxLQUFLNEQsSUFBTCxDQUFVMnFELE9BQVYsRUFBbUJscEQsSUFBbkIsQ0FBYixFQUF1Q21wRCxTQUF2QyxDQ0ZJO0FEQUw7QUFJQ253RCxjQUFNLEVBQU47QUFDQUEsWUFBSTJCLElBQUosR0FBV3V1RCxPQUFYO0FBQ0Fsd0QsWUFBSWdILElBQUosR0FBV0EsSUFBWDtBQ0RJLGVERUptcEQsVUFBVWxwRCxJQUFWLENBQWVqSCxHQUFmLENDRkk7QUFDRDtBRFJMLE1DRkU7QURBWSxHQUFmOztBQWNBNHZELGlCQUFlLEVBQWY7QUFDQUcsWUFBQSxDQUFBcCtDLE1BQUFYLE9BQUFrTSxRQUFBLENBQUFzekMsaUJBQUEsWUFBQTcrQyxJQUE2Q28rQyxPQUE3QyxHQUE2QyxNQUE3Qzs7QUFDQSxNQUFHQSxPQUFIO0FBQ0NMLHVCQUFtQi90RCxLQUFLODVDLE9BQUwsQ0FBYXNVLE9BQWIsQ0FBbkI7QUFDQW4rQyxZQUFRQyxHQUFSLENBQVksa0JBQVosRUFBZ0M2OUMsZ0JBQWhDOztBQUNBLFFBQUdyVSxHQUFHb1YsVUFBSCxDQUFjZixnQkFBZCxDQUFIO0FBQ0NPLG1CQUFhUCxnQkFBYixFQUErQkUsWUFBL0I7QUFDQUEsbUJBQWFuK0MsT0FBYixDQUFxQixVQUFDKy9CLElBQUQ7QUFDcEIsWUFBQXR4QyxJQUFBLEVBQUF5RSxDQUFBOztBQUFBO0FBQ0MsY0FBR21yRCxLQUFLcndELE9BQUwsQ0FBYSt4QyxLQUFLeHFDLElBQWxCLE1BQTJCLGtCQUE5QjtBQUNDOUcsbUJBQU9tN0MsR0FBR3FWLFlBQUgsQ0FBZ0IvdUQsS0FBSzRELElBQUwsQ0FBVWlzQyxLQUFLN3ZDLElBQWYsRUFBcUI2dkMsS0FBS3hxQyxJQUExQixDQUFoQixFQUFpRCxNQUFqRCxDQUFQO0FDQ00sbUJEQU55b0QsaUJBQWlCLE9BQWpCLEVBQTBCeG9ELElBQTFCLENBQStCcVcsS0FBS3pYLEtBQUwsQ0FBVzNGLElBQVgsQ0FBL0IsQ0NBTTtBREhSO0FBQUEsaUJBQUE0VixLQUFBO0FBSU1uUixjQUFBbVIsS0FBQTtBQUNMbEUsa0JBQVFrRSxLQUFSLENBQWMsa0JBQWQsRUFBa0NuVSxLQUFLNEQsSUFBTCxDQUFVaXNDLEtBQUs3dkMsSUFBZixFQUFxQjZ2QyxLQUFLeHFDLElBQTFCLENBQWxDO0FDR0ssaUJERkw0SyxRQUFRa0UsS0FBUixDQUFjblIsRUFBRXczQixLQUFoQixDQ0VLO0FBQ0Q7QURWTjtBQUxGO0FDa0JFOztBREhGMHpCLGlCQUFlLEVBQWY7QUFDQUcsWUFBQSxDQUFBbjRDLE9BQUE3RyxPQUFBa00sUUFBQSxDQUFBc3pDLGlCQUFBLFlBQUEzNEMsS0FBNkNtNEMsT0FBN0MsR0FBNkMsTUFBN0M7O0FBQ0EsTUFBR0EsT0FBSDtBQUNDTCx1QkFBbUJodUQsS0FBSzg1QyxPQUFMLENBQWF1VSxPQUFiLENBQW5CO0FBQ0FwK0MsWUFBUUMsR0FBUixDQUFZLGtCQUFaLEVBQWdDODlDLGdCQUFoQzs7QUFDQSxRQUFHdFUsR0FBR29WLFVBQUgsQ0FBY2QsZ0JBQWQsQ0FBSDtBQUNDTSxtQkFBYU4sZ0JBQWIsRUFBK0JFLFlBQS9CO0FDS0csYURKSEEsYUFBYXArQyxPQUFiLENBQXFCLFVBQUMrL0IsSUFBRDtBQUNwQixZQUFBdHhDLElBQUEsRUFBQXlFLENBQUE7O0FBQUE7QUFDQyxjQUFHbXJELEtBQUtyd0QsT0FBTCxDQUFhK3hDLEtBQUt4cUMsSUFBbEIsTUFBMkIsa0JBQTlCO0FBQ0M5RyxtQkFBT203QyxHQUFHcVYsWUFBSCxDQUFnQi91RCxLQUFLNEQsSUFBTCxDQUFVaXNDLEtBQUs3dkMsSUFBZixFQUFxQjZ2QyxLQUFLeHFDLElBQTFCLENBQWhCLEVBQWlELE1BQWpELENBQVA7QUNNTSxtQkRMTnlvRCxpQkFBaUIsSUFBakIsRUFBdUJ4b0QsSUFBdkIsQ0FBNEJxVyxLQUFLelgsS0FBTCxDQUFXM0YsSUFBWCxDQUE1QixDQ0tNO0FEUlI7QUFBQSxpQkFBQTRWLEtBQUE7QUFJTW5SLGNBQUFtUixLQUFBO0FBQ0xsRSxrQkFBUWtFLEtBQVIsQ0FBYyxrQkFBZCxFQUFrQ25VLEtBQUs0RCxJQUFMLENBQVVpc0MsS0FBSzd2QyxJQUFmLEVBQXFCNnZDLEtBQUt4cUMsSUFBMUIsQ0FBbEM7QUNRSyxpQkRQTDRLLFFBQVFrRSxLQUFSLENBQWNuUixFQUFFdzNCLEtBQWhCLENDT0s7QUFDRDtBRGZOLFFDSUc7QURUTDtBQ3VCRTtBRDVESCxHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUVaQTs7Ozs7Ozs7OztHQVdBbnJCLE9BQU80MUIsT0FBUCxDQUFlO0FBQ2QsTUFBQStwQixPQUFBLEVBQUFoL0MsR0FBQSxFQUFBaS9DLElBQUEsRUFBQUMsUUFBQTs7QUFBQSxPQUFBbC9DLE1BQUFYLE9BQUFrTSxRQUFBLENBQUE0ekMsSUFBQSxZQUFBbi9DLElBQXlCby9DLDhCQUF6QixHQUF5QixNQUF6QjtBQUNDRixlQUFXMW9CLFFBQVEsZUFBUixDQUFYO0FBRUF5b0IsV0FBTzUvQyxPQUFPa00sUUFBUCxDQUFnQjR6QyxJQUFoQixDQUFxQkMsOEJBQTVCO0FBQ0FKLGNBQVUsSUFBVjtBQ0VFLFdEREZFLFNBQVNHLFdBQVQsQ0FBcUJKLElBQXJCLEVBQTJCNS9DLE9BQU9pZ0QsZUFBUCxDQUF1QjtBQUNqRCxVQUFBdHNELENBQUEsRUFBQTB0QixHQUFBOztBQUFBO0FBQ0MsWUFBRyxDQUFDcytCLE9BQUo7QUFDQztBQ0dJOztBREZMQSxrQkFBVSxLQUFWO0FBQ0EvK0MsZ0JBQVErcEMsSUFBUixDQUFhLGdDQUFiO0FBRUF0cEIsY0FBTSxJQUFJamMsSUFBSixFQUFOO0FBR0FoRixXQUFHOC9DLHdCQUFILENBQTRCN3RCLE1BQTVCLENBQW1DO0FBQUVzRixtQkFBUyxJQUFYO0FBQWlCd29CLG9CQUFVO0FBQUVqcEIsa0JBQU03VjtBQUFSO0FBQTNCLFNBQW5DLEVBQStFO0FBQUVpUixnQkFBTTtBQUFFcUYscUJBQVM7QUFBWDtBQUFSLFNBQS9FLEVBQTZHO0FBQUV3UixpQkFBTztBQUFULFNBQTdHO0FBRUF2b0MsZ0JBQVF3cUMsT0FBUixDQUFnQixnQ0FBaEI7QUNXSSxlRFZKdVUsVUFBVSxJQ1VOO0FEdEJMLGVBQUE3NkMsS0FBQTtBQWNNblIsWUFBQW1SLEtBQUE7QUFDTGxFLGdCQUFRa0UsS0FBUixDQUFjLDZDQUFkO0FBQ0FsRSxnQkFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNXSSxlRFZKdzBCLFVBQVUsSUNVTjtBQUNEO0FEN0JzQixPQW9CekIsVUFBQ2hzRCxDQUFEO0FBQ0RpTixjQUFRQyxHQUFSLENBQVksbUVBQVo7QUNXRyxhRFZIRCxRQUFRQyxHQUFSLENBQVlsTixFQUFFdzNCLEtBQWQsQ0NVRztBRGhDdUIsTUFBM0IsQ0NDRTtBQWlDRDtBRHhDSCxHOzs7Ozs7Ozs7Ozs7QUVYQTs7Ozs7Ozs7OztHQVdBbnJCLE9BQU80MUIsT0FBUCxDQUFlO0FBQ2QsTUFBQStwQixPQUFBLEVBQUFoL0MsR0FBQSxFQUFBaS9DLElBQUEsRUFBQUMsUUFBQTs7QUFBQSxPQUFBbC9DLE1BQUFYLE9BQUFrTSxRQUFBLENBQUE0ekMsSUFBQSxZQUFBbi9DLElBQXlCNDBCLG1CQUF6QixHQUF5QixNQUF6QjtBQUNDc3FCLGVBQVcxb0IsUUFBUSxlQUFSLENBQVg7QUFFQXlvQixXQUFPNS9DLE9BQU9rTSxRQUFQLENBQWdCNHpDLElBQWhCLENBQXFCdnFCLG1CQUE1QjtBQUNBb3FCLGNBQVUsSUFBVjtBQ0VFLFdEREZFLFNBQVNHLFdBQVQsQ0FBcUJKLElBQXJCLEVBQTJCNS9DLE9BQU9pZ0QsZUFBUCxDQUF1QjtBQUNqRCxVQUFBdHNELENBQUE7O0FBQUE7QUFDQyxZQUFHLENBQUNnc0QsT0FBSjtBQUNDO0FDR0k7O0FERkxBLGtCQUFVLEtBQVY7QUFDQS8rQyxnQkFBUStwQyxJQUFSLENBQWEscUJBQWI7QUFFQXpxQyxzQkFBY2tnRCxpQkFBZDtBQUVBeC9DLGdCQUFRd3FDLE9BQVIsQ0FBZ0IscUJBQWhCO0FDRUksZURESnVVLFVBQVUsSUNDTjtBRFZMLGVBQUE3NkMsS0FBQTtBQVdNblIsWUFBQW1SLEtBQUE7QUFDTGxFLGdCQUFRa0UsS0FBUixDQUFjLGtDQUFkO0FBQ0FsRSxnQkFBUWtFLEtBQVIsQ0FBY25SLEVBQUV3M0IsS0FBaEI7QUNFSSxlRERKdzBCLFVBQVUsSUNDTjtBQUNEO0FEakJzQixPQWlCekIsVUFBQ2hzRCxDQUFEO0FBQ0RpTixjQUFRQyxHQUFSLENBQVksd0RBQVo7QUNFRyxhRERIRCxRQUFRQyxHQUFSLENBQVlsTixFQUFFdzNCLEtBQWQsQ0NDRztBRHBCdUIsTUFBM0IsQ0NDRTtBQXFCRDtBRDVCSDtBQTJCQW5yQixPQUFPc21DLE9BQVAsQ0FDQztBQUFBL1EsdUJBQXFCLFVBQUM0SixNQUFEO0FBQ3BCai9CLGtCQUFja2dELGlCQUFkLENBQWdDamhCLE1BQWhDO0FBQ0EsV0FBTyxJQUFQO0FBRkQ7QUFBQSxDQURELEU7Ozs7Ozs7Ozs7OztBRXRDQW4vQixPQUFPNDFCLE9BQVAsQ0FBZTtBQ0NiLFNEQUR5cUIsY0FBY0MseUJBQWQsR0FBMEMsSUFBSUMsUUFBUUMsS0FBWixDQUN6QztBQUFBeHFELFVBQU0sMkJBQU47QUFDQWttQyxnQkFBWTk3QixHQUFHa2QsU0FEZjtBQUVBbWpCLGFBQVMsQ0FDUjtBQUNDdnhDLFlBQU0sS0FEUDtBQUVDc3JCLGFBQU8scURBRlI7QUFHQ2ltQyxpQkFBVyxLQUhaO0FBSUN4MEMsYUFBTyxLQUpSO0FBS0N5MEMsY0FBUSxVQUFDcnpDLEdBQUQsRUFBTTlhLElBQU4sRUFBWXdxRCxHQUFaO0FBQ1AsWUFBQTRELEtBQUEsRUFBQWhnRCxHQUFBO0FBQUFnZ0QsZ0JBQVEsbUlBQW1JNUQsSUFBSXg4QyxHQUF2SSxHQUE2SSxHQUFySjs7QUFFQSxhQUFBSSxNQUFBMC9DLGNBQUFDLHlCQUFBLENBQUEzMEMsaUJBQUEsWUFBQWhMLElBQThEME4sUUFBOUQsQ0FBdUUwdUMsSUFBSXg4QyxHQUEzRSxJQUFHLE1BQUg7QUFDQ29nRCxtQkFBUyxXQUFUO0FDQ0s7O0FEQ05BLGlCQUFTLEdBQVQ7QUFDQSxlQUFPQSxLQUFQO0FBWkY7QUFBQSxLQURRLEVBZVI7QUFDQ3p4RCxZQUFNLE1BRFA7QUFFQ3V4RCxpQkFBVyxLQUZaO0FBR0N4MEMsYUFBTyxLQUhSO0FBSUN5MEMsY0FBUSxVQUFDcnpDLEdBQUQsRUFBTTlhLElBQU4sRUFBWXdxRCxHQUFaO0FBQ1AsWUFBQXBoRCxRQUFBLEVBQUE3TixJQUFBO0FBQUFBLGVBQU8sRUFBUDs7QUFDQSxZQUFHa1MsT0FBTzBILFFBQVAsS0FBb0IxRCxRQUFRd0ksUUFBUixNQUFzQnhJLFFBQVF3akIsU0FBUixFQUExQyxDQUFIO0FBQ0MxNUIsaUJBQU8sRUFBUDtBQ0VLOztBREFONk4sbUJBQVcsS0FBWDs7QUFFQSxZQUFHcUUsT0FBT0MsUUFBVjtBQUNDdEUscUJBQVcsS0FBS0EsUUFBaEI7QUNDSzs7QURBTixZQUFHQSxRQUFIO0FBQ0M3TixpQkFBT2tTLE9BQU9pRSxXQUFQLENBQW1CLG9CQUFrQjg0QyxJQUFJdjFDLEtBQXRCLEdBQTRCLGlCQUE1QixHQUFnRHUxQyxJQUFJeDhDLEdBQXBELEdBQTBELGdCQUE3RSxDQUFQO0FBREQ7QUFHQ3pTLGlCQUFPa1csUUFBUUMsV0FBUixDQUFvQixvQkFBa0I4NEMsSUFBSXYxQyxLQUF0QixHQUE0QixpQkFBNUIsR0FBZ0R1MUMsSUFBSXg4QyxHQUFwRCxHQUEwRCxnQkFBOUUsQ0FBUDtBQ0VLOztBREROLGVBQU8saUJBQWV3OEMsSUFBSXg4QyxHQUFuQixHQUF1QiwwQkFBdkIsR0FBaUR6UyxJQUFqRCxHQUFzRCxJQUF0RCxHQUE2RGl2RCxJQUFJL21ELElBQWpFLEdBQXdFLE1BQS9FO0FBakJGO0FBQUEsS0FmUSxFQWtDUjtBQUNDOUcsWUFBTSxnQkFEUDtBQUVDc3JCLGFBQU9ubEIsRUFBRSwwQkFBRixDQUZSO0FBR0NvckQsaUJBQVc7QUFIWixLQWxDUSxFQXVDUjtBQUNDdnhELFlBQU0sV0FEUDtBQUVDc3JCLGFBQU9ubEIsRUFBRSxnQkFBRixDQUZSO0FBR0NvckQsaUJBQVc7QUFIWixLQXZDUSxFQTRDUjtBQUNDdnhELFlBQU0sbUJBRFA7QUFFQ3NyQixhQUFPbmxCLEVBQUUsZ0JBQUYsQ0FGUjtBQUdDcXJELGNBQVEsVUFBQ3J6QyxHQUFELEVBQU05YSxJQUFOLEVBQVl3cUQsR0FBWjtBQUNQLFlBQUFodEMsS0FBQSxFQUFBNndDLGlCQUFBOztBQUFBLFlBQUc3RCxJQUFJaDFDLEtBQUosS0FBYSxXQUFoQjtBQUNDZ0ksa0JBQVFndEMsSUFBSXJ3QyxjQUFKLElBQXNCLFVBQTlCO0FDRUs7O0FEQU5rMEMsNEJBQW9CN0QsSUFBSTVxQixpQkFBSixJQUF5QixFQUE3QztBQUVBLGVBQU8scUNBQzRCcGlCLEtBRDVCLEdBQ2tDLEtBRGxDLEdBQ3NDNndDLGlCQUR0QyxHQUN3RCxRQUQvRDtBQVRGO0FBQUEsS0E1Q1EsQ0FGVDtBQTZEQUMsU0FBSyxJQTdETDtBQThEQUMsa0JBQWMsS0E5RGQ7QUErREFDLGlCQUFhLENBQUMsT0FBRCxFQUFVLGdCQUFWLEVBQTRCLE9BQTVCLEVBQXFDLFVBQXJDLENBL0RiO0FBZ0VBQyxnQkFBWSxFQWhFWjtBQWlFQUMsVUFBTSxLQWpFTjtBQWtFQUMsZUFBVyxJQWxFWDtBQW1FQUMsZ0JBQ0M7QUFBQUMsZUFBUztBQUFULEtBcEVEO0FBcUVBQyxlQUFXLEtBckVYO0FBc0VBQyxvQkFBZ0IsVUFBQzlpQyxRQUFELEVBQVcvSCxNQUFYO0FBQ2YsVUFBQThxQyxZQUFBLEVBQUFsckIsUUFBQSxFQUFBN3ZCLEtBQUEsRUFBQTRpQixhQUFBLEVBQUF6b0IsR0FBQSxFQUFBa0csSUFBQSxFQUFBVyxLQUFBLEVBQUFvaEIsT0FBQTs7QUFBQSxXQUFPblMsTUFBUDtBQUNDLGVBQU87QUFBQ2xXLGVBQUssQ0FBQztBQUFQLFNBQVA7QUNHRzs7QURESnFvQixnQkFBVXBLLFNBQVNoWCxLQUFuQjs7QUFDQSxXQUFPb2hCLE9BQVA7QUFDQyxhQUFBcEssWUFBQSxRQUFBN2QsTUFBQTZkLFNBQUFnakMsSUFBQSxZQUFBN2dELElBQW1CbFQsTUFBbkIsR0FBbUIsTUFBbkIsR0FBbUIsTUFBbkIsSUFBNEIsQ0FBNUI7QUFDQ203QixvQkFBVXBLLFNBQVNnakMsSUFBVCxDQUFjeDhDLFdBQWQsQ0FBMEIsT0FBMUIsRUFBbUMsQ0FBbkMsQ0FBVjtBQUZGO0FDTUk7O0FESEosV0FBTzRqQixPQUFQO0FBQ0MsZUFBTztBQUFDcm9CLGVBQUssQ0FBQztBQUFQLFNBQVA7QUNPRzs7QUROSmlILGNBQVFwSCxHQUFHMnJCLE1BQUgsQ0FBVXpyQixPQUFWLENBQWtCc29CLE9BQWxCLENBQVI7O0FBQ0EsVUFBRyxDQUFDcGhCLEtBQUo7QUFDQ2dYLGlCQUFTelcsS0FBVCxHQUFpQixNQUFqQjtBQ1FHOztBRFBKLFVBQUcsQ0FBQ1AsTUFBTTBrQixNQUFOLENBQWE3ZCxRQUFiLENBQXNCb0ksTUFBdEIsQ0FBSjtBQUVDNGYsbUJBQVcsRUFBWDtBQUNBa3JCLHVCQUFlbmhELEdBQUdnc0IsV0FBSCxDQUFlOXJCLE9BQWYsQ0FBdUI7QUFDckNrSCxpQkFBT29oQixPQUQ4QjtBQUVyQyxrQkFBUW5TO0FBRjZCLFNBQXZCLENBQWY7O0FBSUEsWUFBRzhxQyxZQUFIO0FBQ0NuNEIsMEJBQWdCaHBCLEdBQUdncEIsYUFBSCxDQUFpQjdMLElBQWpCLENBQXNCO0FBQ3JDaGQsaUJBQUs7QUFDSnFlLG1CQUFLMmlDLGFBQWFuNEI7QUFEZDtBQURnQyxXQUF0QixFQUlidkosS0FKYSxFQUFoQjtBQUtBclosa0JBQVFwRyxHQUFHb0csS0FBSCxDQUFTK1csSUFBVCxDQUFjO0FBQUUvVixtQkFBT29oQjtBQUFULFdBQWQsQ0FBUjtBQUNBcGlCLGdCQUFNL0YsT0FBTixDQUFjLFVBQUNnaEQsRUFBRDtBQUNiLGdCQUFHaDZDLGdCQUFnQnFxQyxVQUFoQixDQUEyQjJQLEVBQTNCLEVBQStCRixZQUEvQixFQUE2Q240QixhQUE3QyxLQUErRDNoQixnQkFBZ0JxbkIsUUFBaEIsQ0FBeUIyeUIsRUFBekIsRUFBNkJGLFlBQTdCLEVBQTJDbjRCLGFBQTNDLENBQWxFO0FDVVEscUJEVFBpTixTQUFTcGdDLElBQVQsQ0FBY3dyRCxHQUFHbGhELEdBQWpCLENDU087QUFDRDtBRFpSO0FDY0k7O0FEVkwsYUFBQWllLFlBQUEsUUFBQTNYLE9BQUEyWCxTQUFBZ2pDLElBQUEsWUFBQTM2QyxLQUFtQnBaLE1BQW5CLEdBQW1CLE1BQW5CLEdBQW1CLE1BQW5CLElBQTRCLENBQTVCO0FBQ0Mrd0IsbUJBQVNnakMsSUFBVCxDQUFjLENBQWQsRUFBaUI1aEMsR0FBakIsR0FBdUIsQ0FBQztBQUFDaVAsdUJBQVdwWTtBQUFaLFdBQUQsRUFBc0I7QUFBQ3NGLHVCQUFXdEY7QUFBWixXQUF0QixFQUEyQztBQUFDNlgseUJBQWE3WDtBQUFkLFdBQTNDLEVBQWtFO0FBQUNzYiwwQkFBY3RiO0FBQWYsV0FBbEUsRUFDckI7QUFBQzJYLHNCQUFVM1g7QUFBWCxXQURxQixFQUNEO0FBQUVuUSxrQkFBTTtBQUFFc1ksbUJBQUt5WDtBQUFQO0FBQVIsV0FEQyxDQUF2QjtBQUREO0FBSUNyMUIsWUFBRXVuQyxNQUFGLENBQVMvcEIsUUFBVCxFQUFtQjtBQUNsQm9CLGlCQUFLLENBQUM7QUFBQ2lQLHlCQUFXcFk7QUFBWixhQUFELEVBQXNCO0FBQUNzRix5QkFBV3RGO0FBQVosYUFBdEIsRUFBMkM7QUFBQzZYLDJCQUFhN1g7QUFBZCxhQUEzQyxFQUFrRTtBQUFDc2IsNEJBQWN0YjtBQUFmLGFBQWxFLEVBQ0o7QUFBQzJYLHdCQUFVM1g7QUFBWCxhQURJLEVBQ2dCO0FBQUVuUSxvQkFBTTtBQUFFc1kscUJBQUt5WDtBQUFQO0FBQVIsYUFEaEI7QUFEYSxXQUFuQjtBQXRCRjtBQ29FSTs7QUR6Q0osYUFBTzdYLFFBQVA7QUE5R0Q7QUFBQSxHQUR5QyxDQ0F6QztBRERGLEc7Ozs7Ozs7Ozs7OztBRUFBLElBQUFrakMsNkJBQUEsRUFBQUMsb0NBQUEsRUFBQUMscUNBQUEsRUFBQUMsaUJBQUEsRUFBQUMseUJBQUEsRUFBQUMsdUJBQUEsRUFBQUMsa0JBQUE7O0FBQUFoK0MsUUFBUWkrQyxJQUFSLENBQWEsaUJBQWIsSUFBa0MsSUFBSUMsV0FBSixFQUFsQzs7QUFHQUwsb0JBQW9CLFVBQUMvaEQsTUFBRDtBQUNuQixNQUFBcWlELFVBQUE7QUFBQUEsZUFBYSxJQUFJcGlELEtBQUosRUFBYjs7QUNHQyxNQUFJRCxVQUFVLElBQWQsRUFBb0I7QUREckJBLFdBQVFXLE9BQVIsQ0FBZ0IsVUFBQ0MsQ0FBRDtBQUNmLFVBQUFDLEdBQUE7O0FBQUEsVUFBR0QsRUFBRW5PLElBQUYsS0FBVSxPQUFiO0FDSU0sZURITHFPLFFBQVFDLEdBQVIsQ0FBWSwrQkFBWixDQ0dLO0FESk4sYUFFSyxJQUFHSCxFQUFFbk8sSUFBRixLQUFVLFNBQWI7QUNJQyxlQUFPbU8sS0FBSyxJQUFMLEdBQVksQ0FBQ0MsTUFBTUQsRUFBRVosTUFBVCxLQUFvQixJQUFwQixHQUEyQmEsSURIeENGLE9DR3dDLENESGhDLFVBQUNLLEVBQUQ7QUNJWixpQkRITnFoRCxXQUFXbHNELElBQVgsQ0FBZ0I2SyxFQUFoQixDQ0dNO0FESlAsU0NHbUQsQ0FBM0IsR0RIeEIsTUNHWSxHREhaLE1DR0s7QURKRDtBQ1FDLGVESkxxaEQsV0FBV2xzRCxJQUFYLENBQWdCeUssQ0FBaEIsQ0NJSztBQUNEO0FEWk47QUNjRTs7QURMRixTQUFPeWhELFVBQVA7QUFabUIsQ0FBcEI7O0FBZUFILHFCQUFxQixjQUFyQjs7QUFHQUYsNEJBQTRCLFVBQUN6a0IsTUFBRCxFQUFTdjlCLE1BQVQ7QUFDM0IsTUFBQXFpRCxVQUFBLEVBQUEzckQsR0FBQSxFQUFBZSxPQUFBO0FBQUFBLFlBQVU7QUFDVHZCLFVBQU0sV0FERztBQUVUa21DLGdCQUFZOTdCLEdBQUdrZCxTQUZOO0FBR1Q4a0MsU0FBSyxrQkFISTtBQUlUQyxjQUFVO0FDT04sYUROSHJpRCxPQUFPaWlCLFVBQVAsQ0FBa0J0ZixTQUFTMi9DLGFBQVQsQ0FBdUJDLGFBQXpDLEVBQXdELEdBQXhELENDTUc7QURYSztBQU9UQyxrQkFBYyxVQUFDdDJDLFFBQUQ7QUFDYixVQUFBdTJDLFlBQUEsRUFBQUMsT0FBQSxFQUFBbG9DLEtBQUE7QUFBQWtvQyxnQkFBVTV4QyxFQUFFLG1CQUFGLENBQVY7O0FBQ0EsVUFBRzR4QyxRQUFRajFELE1BQVg7QUFDQ2kxRCxnQkFBUSxDQUFSLEVBQVdDLE9BQVgsR0FBcUIsR0FBckI7QUNRRzs7QURQSixVQUFHLENBQUMzK0MsUUFBUXdJLFFBQVIsRUFBRCxJQUF1QixDQUFDeEksUUFBUTQrQyxLQUFSLEVBQTNCO0FBQ0M1aUQsZUFBT2lpQixVQUFQLENBQWtCdGYsU0FBUzIvQyxhQUFULENBQXVCQyxhQUF6QyxFQUF3RCxHQUF4RDtBQUNBenhDLFVBQUUsZ0JBQUYsRUFBb0JtVyxTQUFwQixDQUE4QixDQUE5QixFQUFpQ296QixLQUFqQyxDQUF1QztBQ1NqQyxpQkRSTHZwQyxFQUFFLGdCQUFGLEVBQW9CK3hDLGdCQUFwQixDQUFxQyxRQUFyQyxDQ1FLO0FEVE47QUFGRDtBQUtDL3hDLFVBQUUsZ0JBQUYsRUFBb0JtVyxTQUFwQixDQUE4QixDQUE5QjtBQ1VHOztBRFJKek0sY0FBUW5sQixFQUFFLGtCQUFGLENBQVI7QUFDQW90RCxxQkFBZXYyQyxTQUFTNDJDLFNBQVQsQ0FBbUI5akMsTUFBbkIsR0FBNEJ6QixJQUE1QixDQUFpQyx5Q0FBakMsQ0FBZjtBQ1VHLGFEVEhrbEMsYUFBYU0sSUFBYixDQUFrQixPQUFsQixFQUEyQnZvQyxLQUEzQixFQUFrQzQzQixHQUFsQyxDQUFzQyxRQUF0QyxFQUFnRCxTQUFoRCxFQUEyRDRRLEtBQTNELENBQWlFO0FBQ2hFLFlBQUFDLE1BQUEsRUFBQXRDLEtBQUE7O0FBQUEsWUFBRyxDQUFDN3ZDLEVBQUUsSUFBRixFQUFReU0sSUFBUixDQUFhLE9BQWIsRUFBc0I5dkIsTUFBMUI7QUFDQ2t6RCxrQkFBUTd2QyxFQUFFLHdHQUFGLENBQVI7O0FBQ0EsY0FBRzlNLFFBQVF3SSxRQUFSLEVBQUg7QUFDQ20wQyxrQkFBTXZPLEdBQU4sQ0FBVTtBQUNUbm1DLHFCQUFNLE1BREc7QUFFVGkzQyxzQkFBUTtBQUZDLGFBQVY7QUFERDtBQU1DdkMsa0JBQU12TyxHQUFOLENBQVU7QUFDVG5tQyxxQkFBTSxNQURHO0FBRVRpM0Msc0JBQVE7QUFGQyxhQUFWO0FDY0s7O0FEVk52QyxnQkFBTW9DLElBQU4sQ0FBVyxPQUFYLEVBQW9Cdm9DLEtBQXBCLEVBQTJCdW9DLElBQTNCLENBQWdDLGFBQWhDLEVBQStDdm9DLEtBQS9DO0FBQ0ExSixZQUFFLElBQUYsRUFBUStCLEtBQVIsR0FBZ0JQLE1BQWhCLENBQXVCcXVDLEtBQXZCOztBQUNBc0MsbUJBQVMsVUFBQ25yRCxLQUFEO0FBQ1IsZ0JBQUFxckQsS0FBQTs7QUFBQSxnQkFBR3JyRCxRQUFRLENBQVg7QUFDQ3FyRCxzQkFBUWhzRCxLQUFLaXNELElBQUwsQ0FBVWwzQyxTQUFTbTNDLGdCQUFULEtBQThCbjNDLFNBQVNvM0MsZUFBakQsQ0FBUjs7QUFDQSxrQkFBR3hyRCxRQUFRcXJELEtBQVg7QUFFQ3JyRCx3QkFBUXFyRCxLQUFSO0FDWU87O0FEWFJyckQ7QUNhTyxxQkRaUG9VLFNBQVM0MkMsU0FBVCxDQUFtQlMsU0FBbkIsR0FBK0JDLElBQS9CLENBQW9DMXJELEtBQXBDLEVBQTJDMnJELElBQTNDLENBQWdELE1BQWhELENDWU87QUFDRDtBRHBCQyxXQUFUOztBQVFBOUMsZ0JBQU0rQyxJQUFOLENBQVcsVUFBQy92RCxDQUFEO0FBQ1YsZ0JBQUFnd0QsV0FBQTtBQUFBQSwwQkFBYzd5QyxFQUFFLElBQUYsRUFBUXpELEdBQVIsRUFBZDtBQUNBNDFDLG1CQUFPVSxXQUFQO0FDZ0JNLG1CRGZON3lDLEVBQUUsSUFBRixFQUFRa08sTUFBUixHQUFpQjFULElBQWpCLENBQXNCLEtBQXRCLENDZU07QURsQlA7QUNvQkssaUJEaEJMcTFDLE1BQU1pRCxPQUFOLENBQWMsVUFBQ2p3RCxDQUFEO0FBQ2IsZ0JBQUFnd0QsV0FBQTs7QUFBQSxnQkFBR2h3RCxFQUFFa3dELE9BQUYsQ0FBVWoxRCxRQUFWLE9BQXdCLElBQTNCO0FBQ0MrMEQsNEJBQWM3eUMsRUFBRSxJQUFGLEVBQVF6RCxHQUFSLEVBQWQ7QUNrQk8scUJEakJQNDFDLE9BQU9VLFdBQVAsQ0NpQk87QUFDRDtBRHJCUixZQ2dCSztBQU9EO0FEbEROLFFDU0c7QUQ3Qks7QUFvRFRHLGdCQUFZLFVBQUNDLEdBQUQsRUFBTTcwRCxJQUFOLEVBQVk4MEQsU0FBWjtBQUNYLFVBQUdoa0QsT0FBTzBILFFBQVY7QUFDQyxZQUFHeFksS0FBS3FSLEdBQUwsS0FBWTBqRCxXQUFXLzlDLE9BQVgsR0FBcUJ3M0IsTUFBckIsQ0FBNEIxdUIsVUFBM0M7QUNzQk0saUJEckJMKzBDLElBQUlHLFlBQUosQ0FBaUIsT0FBakIsRUFBMEIsVUFBMUIsQ0NxQks7QUR2QlA7QUN5Qkk7QUQ5RUk7QUF3RFR6akIsYUFBUyxDQUNSO0FBQ0N2eEMsWUFBTSxLQURQO0FBRUN1eEQsaUJBQVcsS0FGWjtBQUdDQyxjQUFRLFVBQUNyekMsR0FBRCxFQUFNOWEsSUFBTixFQUFZd3FELEdBQVo7QUFDUCxZQUFBb0gsVUFBQSxFQUFBQyxPQUFBLEVBQUFub0IsU0FBQSxFQUFBb29CLHlCQUFBLEVBQUFDLGtCQUFBLEVBQUFyeUIsUUFBQSxFQUFBc3lCLGVBQUEsRUFBQUMsY0FBQSxFQUFBQyxZQUFBLEVBQUFDLGlCQUFBLEVBQUFDLGFBQUEsRUFBQWhrRCxHQUFBLEVBQUFrRyxJQUFBLEVBQUErOUMsc0JBQUEsRUFBQUMsTUFBQTtBQUFBTCx5QkFBaUI3N0MsT0FBT28wQyxJQUFJOXFCLFFBQVgsRUFBcUJycEIsTUFBckIsQ0FBNEIsWUFBNUIsQ0FBakI7QUFFQXFwQixtQkFBVzhxQixJQUFJOXFCLFFBQWY7O0FBQ0EsWUFBRzFpQixRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsT0FBdEIsSUFBaUMraEQsSUFBSWgxQyxLQUFKLEtBQWEsT0FBakQ7QUFDQ2txQixxQkFBVzhxQixJQUFJdHJCLFVBQUosSUFBa0JzckIsSUFBSTlxQixRQUFqQztBQ3lCSzs7QUR2Qk4sWUFBRzFpQixRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsUUFBdEIsSUFBa0N1VSxRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsU0FBM0Q7QUFDQ2kzQixxQkFBVzhxQixJQUFJL2xCLFdBQUosSUFBbUIrbEIsSUFBSS9sQixXQUFsQztBQ3lCSzs7QUR2Qk51dEIsMEJBQWtCdmdELFFBQVE4Z0QscUJBQVIsQ0FBOEI3eUIsUUFBOUIsQ0FBbEI7QUFDQWdLLG9CQUFZOGdCLElBQUk5Z0IsU0FBaEI7QUFDQW1vQixrQkFBVSxFQUFWO0FBQ0FRLGlDQUF5QixFQUF6Qjs7QUFFQSxZQUFHN0gsSUFBSVMsS0FBSixJQUFhLEdBQUE3OEMsTUFBQW84QyxJQUFBenVCLFdBQUEsWUFBQTN0QixJQUFrQjBOLFFBQWxCLENBQTJCck8sT0FBT3lXLE1BQVAsRUFBM0IsSUFBQyxNQUFELENBQWIsSUFBNERsSCxRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsT0FBckY7QUFDQ29wRCxvQkFBVSw4QkFBOEJsL0MsUUFBUUMsRUFBUixDQUFXLG1CQUFYLENBQTlCLEdBQWdFLFlBQTFFO0FBQ0F5L0MsbUNBQXlCLDRCQUEwQjNvQixTQUExQixHQUFvQyxTQUFwQyxHQUE2QzhnQixJQUFJNXFCLGlCQUFqRCxHQUFtRSxnQkFBNUY7QUFGRDtBQUlDLGNBQUc1aUIsUUFBUXZVLEdBQVIsQ0FBWSxLQUFaLE1BQXNCLE9BQXRCLElBQWlDK2hELElBQUk1cUIsaUJBQXhDO0FBQ0N5eUIscUNBQXlCLDRCQUEwQjNvQixTQUExQixHQUFvQyxTQUFwQyxHQUE2QzhnQixJQUFJNXFCLGlCQUFqRCxHQUFtRSxnQkFBNUY7QUFERDtBQUdDeXlCLHFDQUF5Qiw0QkFBMEIzb0IsU0FBMUIsR0FBb0MsUUFBN0Q7QUFQRjtBQ2dDTTs7QUR2Qk5rb0IscUJBQWEsRUFBYjs7QUFDQSxZQUFHcEgsSUFBSU8sZUFBSixJQUF1Qi90QyxRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsT0FBaEQ7QUFDQ21wRCx1QkFBYSw4QkFBOEJqL0MsUUFBUUMsRUFBUixDQUFXLHNDQUFYLEVBQW1EO0FBQUM0Z0Isc0JBQVVnM0IsSUFBSU87QUFBZixXQUFuRCxDQUE5QixHQUFvSCxXQUFqSTtBQzJCSzs7QUR6Qk51SCxpQkFBUyxFQUFUO0FBRUFQLDZCQUFxQlMsVUFBVUMsZ0JBQVYsQ0FBMkIsV0FBM0IsRUFBd0NqSSxJQUFJeDhDLEdBQTVDLENBQXJCOztBQUNBLFlBQUd3a0QsVUFBVUMsZ0JBQVYsQ0FBMkIsV0FBM0IsRUFBd0NqSSxJQUFJeDhDLEdBQTVDLENBQUg7QUFDQ3NrRCxtQkFBUyxxRUFBVDtBQURELGVBRUssSUFBR3QxQyxRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsT0FBdEIsSUFBaUMraEQsSUFBSTlrQyxPQUFKLEtBQWUsS0FBbkQ7QUFDSjRzQyxtQkFBUyx1Q0FBVDtBQURJLGVBRUEsSUFBR3QxQyxRQUFRdlUsR0FBUixDQUFZLEtBQVosTUFBc0IsU0FBdEIsSUFBbUMraEQsSUFBSW5NLFNBQUosS0FBaUIsSUFBdkQ7QUFDSmlVLG1CQUFTLDRCQUFUO0FDMEJLOztBRHhCTkosdUJBQWUsRUFBZjtBQUNBQyw0QkFBb0IsRUFBcEI7QUFDQUMsd0JBQUEsQ0FBQTk5QyxPQUFBazJDLElBQUFyckMsTUFBQSxZQUFBN0ssS0FBNEJnbUMsUUFBNUIsR0FBNEIsTUFBNUI7O0FBQ0EsZ0JBQU84WCxhQUFQO0FBQUEsZUFDTSxJQUROO0FBRUVELGdDQUFvQixRQUFwQjtBQURJOztBQUROLGVBR00sSUFITjtBQUlFQSxnQ0FBb0IsU0FBcEI7QUFESTs7QUFITixlQUtNLElBTE47QUFNRUEsZ0NBQW9CLE9BQXBCO0FBTkY7O0FBT0EsWUFBR0EsaUJBQUg7QUFDQ0wsc0NBQTRCLG1DQUFpQ0ssaUJBQTdEO0FDNkJLOztBRDNCTixlQUFPLG9DQUM2QkcsTUFEN0IsR0FDb0Msb0NBRHBDLEdBRXdCUix5QkFGeEIsR0FFa0QsSUFGbEQsR0FFc0R0SCxJQUFJL21ELElBRjFELEdBRWlFb3VELE9BRmpFLEdBRTJFRCxVQUYzRSxHQUVzRixXQUZ0RixHQUdLcEgsSUFBSTEwQyxjQUhULEdBR3dCLGdEQUh4QixHQUsyQnU4QyxzQkFMM0IsR0FLa0QsNENBTGxELEdBTXNDSixjQU50QyxHQU1xRCxJQU5yRCxHQU15REQsZUFOekQsR0FNeUUsaUJBTmhGO0FBdERGO0FBQUEsS0FEUSxFQWlFUjtBQUNDcjFELFlBQU0sNkJBRFA7QUFFQ3NyQixhQUFPbmxCLEVBQUUsdUNBQUYsQ0FGUjtBQUdDNHZELGVBQVM7QUFIVixLQWpFUSxFQXNFUjtBQUNDLzFELFlBQU0sTUFEUDtBQUVDc3JCLGFBQU9ubEIsRUFBRSxnQkFBRixDQUZSO0FBR0NxckQsY0FBUSxVQUFDcnpDLEdBQUQsRUFBTTlhLElBQU4sRUFBWXdxRCxHQUFaO0FBQ1AsWUFBQW9ILFVBQUEsRUFBQUMsT0FBQSxFQUFBQyx5QkFBQSxFQUFBSyxpQkFBQSxFQUFBQyxhQUFBLEVBQUFoa0QsR0FBQSxFQUFBa0csSUFBQSxFQUFBKzlDLHNCQUFBLEVBQUFDLE1BQUE7QUFBQVQsa0JBQVUsRUFBVjtBQUNBUSxpQ0FBeUIsRUFBekI7O0FBRUEsWUFBRzdILElBQUlTLEtBQUosSUFBYSxHQUFBNzhDLE1BQUFvOEMsSUFBQXp1QixXQUFBLFlBQUEzdEIsSUFBa0IwTixRQUFsQixDQUEyQnJPLE9BQU95VyxNQUFQLEVBQTNCLElBQUMsTUFBRCxDQUFiLElBQTREbEgsUUFBUXZVLEdBQVIsQ0FBWSxLQUFaLE1BQXNCLE9BQXJGO0FBQ0NvcEQsb0JBQVUsOEJBQThCbC9DLFFBQVFDLEVBQVIsQ0FBVyxtQkFBWCxDQUE5QixHQUFnRSxZQUExRTtBQ29CSzs7QURsQk5nL0MscUJBQWEsRUFBYjs7QUFDQSxZQUFHcEgsSUFBSU8sZUFBUDtBQUNDNkcsdUJBQWEsOEJBQThCai9DLFFBQVFDLEVBQVIsQ0FBVyxzQ0FBWCxFQUFtRDtBQUFDNGdCLHNCQUFVZzNCLElBQUlPO0FBQWYsV0FBbkQsQ0FBOUIsR0FBb0gsV0FBakk7QUNzQks7O0FEcEJOdUgsaUJBQVMsRUFBVDs7QUFFQSxZQUFHdDFDLFFBQVF2VSxHQUFSLENBQVksS0FBWixNQUFzQixPQUF0QixJQUFpQytoRCxJQUFJOWtDLE9BQUosS0FBZSxLQUFuRDtBQUNDNHNDLG1CQUFTLHVDQUFUO0FBREQsZUFFSyxJQUFHdDFDLFFBQVF2VSxHQUFSLENBQVksS0FBWixNQUFzQixTQUF0QixJQUFtQytoRCxJQUFJbk0sU0FBSixLQUFpQixJQUF2RDtBQUNKaVUsbUJBQVMsNEJBQVQ7QUNxQks7O0FEbkJOSCw0QkFBb0IsRUFBcEI7QUFDQUMsd0JBQUEsQ0FBQTk5QyxPQUFBazJDLElBQUFyckMsTUFBQSxZQUFBN0ssS0FBNEJnbUMsUUFBNUIsR0FBNEIsTUFBNUI7O0FBQ0EsZ0JBQU84WCxhQUFQO0FBQUEsZUFDTSxJQUROO0FBRUVELGdDQUFvQixRQUFwQjtBQURJOztBQUROLGVBR00sSUFITjtBQUlFQSxnQ0FBb0IsU0FBcEI7QUFESTs7QUFITixlQUtNLElBTE47QUFNRUEsZ0NBQW9CLE9BQXBCO0FBTkY7O0FBT0EsWUFBR0EsaUJBQUg7QUFDQ0wsc0NBQTRCLG1DQUFpQ0ssaUJBQTdEO0FDd0JLOztBRHZCTixlQUFPLG9DQUM0QkcsTUFENUIsR0FDbUMsb0NBRG5DLEdBRXVCUix5QkFGdkIsR0FFaUQsSUFGakQsR0FFcUR0SCxJQUFJL21ELElBRnpELEdBRWdFb3VELE9BRmhFLEdBRTBFRCxVQUYxRSxHQUVxRixRQUY1RjtBQWhDRjtBQW9DQ2MsZUFBUyxLQXBDVjtBQXFDQ3hFLGlCQUFXO0FBckNaLEtBdEVRLEVBNkdSO0FBQ0N2eEQsWUFBTSxnQkFEUDtBQUVDc3JCLGFBQU9ubEIsRUFBRSwwQkFBRixDQUZSO0FBR0M0dkQsZUFBUyxLQUhWO0FBSUN4RSxpQkFBVztBQUpaLEtBN0dRLEVBbUhSO0FBQ0N2eEQsWUFBTSxhQURQO0FBRUNzckIsYUFBT25sQixFQUFFLHVCQUFGLENBRlI7QUFHQ3FyRCxjQUFRLFVBQUNyekMsR0FBRCxFQUFNOWEsSUFBTixFQUFZd3FELEdBQVo7QUFDUCxZQUFHQSxJQUFJL2xCLFdBQVA7QUFDQyxpQkFBT3J1QixPQUFPbzBDLElBQUkvbEIsV0FBWCxFQUF3QnB1QixNQUF4QixDQUErQixrQkFBL0IsQ0FBUDtBQ3FCSztBRDFCUjtBQU9DcThDLGVBQVMsS0FQVjtBQVFDeEUsaUJBQVc7QUFSWixLQW5IUSxFQTZIUjtBQUNDdnhELFlBQU0sV0FEUDtBQUVDc3JCLGFBQU9ubEIsRUFBRSxnQkFBRixDQUZSO0FBR0M0dkQsZUFBUyxLQUhWO0FBSUN4RSxpQkFBVztBQUpaLEtBN0hRLEVBbUlSO0FBQ0N2eEQsWUFBTSxtQkFEUDtBQUVDc3JCLGFBQU9ubEIsRUFBRSw2QkFBRixDQUZSO0FBR0NxckQsY0FBUSxVQUFDcnpDLEdBQUQsRUFBTTlhLElBQU4sRUFBWXdxRCxHQUFaO0FBQ1AsWUFBQW1JLE1BQUEsRUFBQW4xQyxLQUFBLEVBQUE2d0MsaUJBQUE7O0FBQUEsWUFBRzdELElBQUloMUMsS0FBSixLQUFhLFdBQWhCO0FBQ0NnSSxrQkFBUWd0QyxJQUFJcndDLGNBQUosSUFBc0IsVUFBOUI7QUNxQks7O0FEbkJOazBDLDRCQUFvQjdELElBQUk1cUIsaUJBQUosSUFBeUIsRUFBN0M7QUFFQSt5QixpQkFBUyxFQUFUOztBQUVBLFlBQUduSSxJQUFJVSxRQUFKLEdBQWUsQ0FBbEI7QUFDQ3lILG1CQUFTaGdELFFBQVFDLEVBQVIsQ0FBVyxRQUFYLENBQVQ7QUNtQks7O0FEakJOLGVBQU8scUNBQzJCNEssS0FEM0IsR0FDaUMsS0FEakMsR0FDcUM2d0MsaUJBRHJDLEdBQ3lEc0UsTUFEekQsR0FDZ0UsUUFEdkU7QUFkRjtBQWlCQ0QsZUFBUyxLQWpCVjtBQWtCQ3hFLGlCQUFXO0FBbEJaLEtBbklRLEVBdUpSO0FBQ0N2eEQsWUFBTSxVQURQO0FBRUNzckIsYUFBT25sQixFQUFFLG9CQUFGLENBRlI7QUFHQ3FyRCxjQUFRLFVBQUNyekMsR0FBRCxFQUFNOWEsSUFBTixFQUFZd3FELEdBQVo7QUFDUCxlQUFPcDBDLE9BQU9vMEMsSUFBSTlxQixRQUFYLEVBQXFCcnBCLE1BQXJCLENBQTRCLGtCQUE1QixDQUFQO0FBSkY7QUFNQ3E4QyxlQUFTLEtBTlY7QUFPQ3hFLGlCQUFXO0FBUFosS0F2SlEsRUFnS1I7QUFDQ3Z4RCxZQUFNLFlBRFA7QUFFQ3NyQixhQUFPbmxCLEVBQUUsc0JBQUYsQ0FGUjtBQUdDcXJELGNBQVEsVUFBQ3J6QyxHQUFELEVBQU05YSxJQUFOLEVBQVl3cUQsR0FBWjtBQUNQLFlBQUdBLElBQUl0ckIsVUFBUDtBQUNDLGlCQUFPOW9CLE9BQU9vMEMsSUFBSXRyQixVQUFYLEVBQXVCN29CLE1BQXZCLENBQThCLGtCQUE5QixDQUFQO0FDZ0JLO0FEckJSO0FBT0NxOEMsZUFBUyxLQVBWO0FBUUN4RSxpQkFBVztBQVJaLEtBaEtRLEVBMEtSO0FBQ0N2eEQsWUFBTSxnQkFEUDtBQUVDd3hELGNBQVEsVUFBQ3J6QyxHQUFELEVBQU05YSxJQUFOLEVBQVl3cUQsR0FBWjtBQUNQLFlBQUdBLElBQUlRLGNBQVA7QUFDQyxpQkFBTzUwQyxPQUFPbzBDLElBQUlRLGNBQVgsRUFBMkIzMEMsTUFBM0IsQ0FBa0Msa0JBQWxDLENBQVA7QUNnQks7QURwQlI7QUFNQ3E4QyxlQUFTLEtBTlY7QUFPQ3hFLGlCQUFXO0FBUFosS0ExS1EsRUFtTFI7QUFDQ3Z4RCxZQUFNLFVBRFA7QUFFQysxRCxlQUFTO0FBRlYsS0FuTFEsRUF1TFI7QUFDQy8xRCxZQUFNLFVBRFA7QUFFQysxRCxlQUFTO0FBRlYsS0F2TFEsRUEyTFI7QUFDQy8xRCxZQUFNLGFBRFA7QUFFQ3d4RCxjQUFRLFVBQUNyekMsR0FBRCxFQUFNOWEsSUFBTixFQUFZd3FELEdBQVo7QUFDUCxZQUFBcDhDLEdBQUE7O0FBQUEsYUFBQW84QyxPQUFBLFFBQUFwOEMsTUFBQW84QyxJQUFBcnJDLE1BQUEsWUFBQS9RLElBQWdCaTZCLFdBQWhCLEdBQWdCLE1BQWhCLEdBQWdCLE1BQWhCLEtBQStCbWlCLElBQUlyckMsTUFBSixDQUFXa3BCLFdBQVgsS0FBMEIsTUFBekQ7QUFDQyxjQUFBbWlCLE9BQUEsT0FBR0EsSUFBSzUwQyxXQUFSLEdBQVEsTUFBUjtBQUNDLG1CQUFPOVMsRUFBRSxLQUFGLENBQVA7QUNlTTs7QURkUCxpQkFBT0EsRUFBRSxJQUFGLENBQVA7QUNnQks7QUR0QlI7QUFPQzR2RCxlQUFTLEtBUFY7QUFRQ3hFLGlCQUFXO0FBUlosS0EzTFEsQ0F4REE7QUE4UFRJLFNBQVE7QUFFUCxVQUFHNzhDLFFBQVF3SSxRQUFSLEVBQUg7QUNpQkssZURoQkosSUNnQkk7QURqQkw7QUNtQkssZURoQkosS0NnQkk7QUFDRDtBRHRCRyxPQTlQQztBQW9RVGdNLFdBQU8sQ0FBQyxDQUFDLENBQUQsRUFBSSxNQUFKLENBQUQsQ0FwUUU7QUFxUVR1b0MsaUJBQWEsQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixhQUFqQixFQUFnQyxPQUFoQyxFQUF5QyxPQUF6QyxFQUFrRCxXQUFsRCxFQUErRCxjQUEvRCxFQUNaLGNBRFksRUFDSSxPQURKLEVBQ2EsVUFEYixFQUN5QixTQUR6QixFQUNvQyxtQkFEcEMsRUFDeUQsUUFEekQsRUFDbUUsVUFEbkUsRUFDK0UsZ0JBRC9FLEVBQ2lHLFdBRGpHLEVBQzhHLFdBRDlHLEVBQzJILGlCQUQzSCxDQXJRSjtBQXVRVEQsa0JBQWMsSUF2UUw7QUF3UVRxRSxnQkFBWSxDQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sRUFBUCxFQUFVLEVBQVYsRUFBYSxFQUFiLEVBQWdCLEdBQWhCLENBeFFIO0FBeVFUbkUsZ0JBQVksRUF6UUg7QUEwUVRDLFVBQU0sS0ExUUc7QUEyUVRDLGVBQVcsSUEzUUY7QUE0UVRDLGdCQUNDO0FBQUFDLGVBQVM7QUFBVCxLQTdRUTtBQThRVEMsZUFBVyxLQTlRRjtBQStRVEMsb0JBQWdCLFVBQUM5aUMsUUFBRCxFQUFXL0gsTUFBWDtBQUNmLFVBQUE5VixHQUFBLEVBQUE2RyxLQUFBLEVBQUFpbkIsVUFBQTs7QUFBQSxXQUFPaFksTUFBUDtBQUNDLGVBQU87QUFBQ2xXLGVBQUssQ0FBQztBQUFQLFNBQVA7QUNzQkc7O0FEckJKaUgsY0FBUWdYLFNBQVNoWCxLQUFqQjs7QUFDQSxXQUFPQSxLQUFQO0FBQ0MsYUFBQWdYLFlBQUEsUUFBQTdkLE1BQUE2ZCxTQUFBZ2pDLElBQUEsWUFBQTdnRCxJQUFtQmxULE1BQW5CLEdBQW1CLE1BQW5CLEdBQW1CLE1BQW5CLElBQTRCLENBQTVCO0FBQ0MrWixrQkFBUWdYLFNBQVNnakMsSUFBVCxDQUFjeDhDLFdBQWQsQ0FBMEIsT0FBMUIsRUFBbUMsQ0FBbkMsQ0FBUjtBQUZGO0FDMEJJOztBRHZCSixXQUFPd0MsS0FBUDtBQUNDLGVBQU87QUFBQ2pILGVBQUssQ0FBQztBQUFQLFNBQVA7QUMyQkc7O0FEMUJKa3VCLG1CQUFhcnVCLEdBQUdnc0IsV0FBSCxDQUFlOXJCLE9BQWYsQ0FBdUI7QUFBQ3NHLGNBQU02UCxNQUFQO0FBQWVqUCxlQUFPQTtBQUF0QixPQUF2QixFQUFxRDtBQUFDMUgsZ0JBQVE7QUFBQ1MsZUFBSztBQUFOO0FBQVQsT0FBckQsQ0FBYjs7QUFDQSxXQUFPa3VCLFVBQVA7QUFDQyxlQUFPO0FBQUNsdUIsZUFBSyxDQUFDO0FBQVAsU0FBUDtBQ3FDRzs7QURwQ0osYUFBT2llLFFBQVA7QUEzUlE7QUE0UlQ0bUMsZ0JBQVk7QUE1UkgsR0FBVjs7QUFnU0EsTUFBRy9uQixNQUFIO0FBQ0M3bUMsVUFBTSxpQkFBaUI2bUMsTUFBdkI7QUFFQTlsQyxZQUFRdkIsSUFBUixHQUFlUSxHQUFmO0FBRUE2cEQsa0JBQWMvaUMsU0FBZCxDQUF3QnhkLE1BQXhCLEdBQWlDQSxNQUFqQztBQUVBcWlELGlCQUFhTixrQkFBa0J4QixjQUFjL2lDLFNBQWQsQ0FBd0J4ZCxNQUExQyxDQUFiO0FBRUFxaUQsZUFBVzFoRCxPQUFYLENBQW1CLFVBQUNDLENBQUQ7QUFDbEIsVUFBR0EsRUFBRW5PLElBQUYsS0FBVSxPQUFWLElBQXFCbU8sRUFBRTJrRCxlQUExQjtBQ2lDSyxlRGhDSjl0RCxRQUFRa3BDLE9BQVIsQ0FBZ0J4cUMsSUFBaEIsQ0FDQztBQUFBL0csZ0JBQU93UixFQUFFMUssSUFBRixJQUFVMEssRUFBRW1GLElBQW5CO0FBQ0EyVSxpQkFBT25sQixFQUFFcUwsRUFBRTFLLElBQUYsSUFBVTBLLEVBQUVtRixJQUFkLENBRFA7QUFFQW8vQyxtQkFBUyxLQUZUO0FBR0F4RSxxQkFBVyxLQUhYO0FBSUFDLGtCQUFRLFVBQUNyekMsR0FBRCxFQUFNOWEsSUFBTixFQUFZd3FELEdBQVo7QUFFUCxnQkFBQXJ1RCxLQUFBLEVBQUFnakIsTUFBQTtBQUFBQSxxQkFBU3FyQyxJQUFJcnJDLE1BQUosSUFBYyxFQUF2QjtBQUVBaGpCLG9CQUFRZ2pCLE9BQU9oUixFQUFFbUYsSUFBVCxDQUFSOztBQUVBLG9CQUFPbkYsRUFBRW5PLElBQVQ7QUFBQSxtQkFDTSxNQUROO0FBRUU3RCxpQ0FBQSxPQUFRQSxNQUFPc0gsSUFBZixHQUFlLE1BQWY7QUFESTs7QUFETixtQkFHTSxPQUhOO0FBSUV0SCxpQ0FBQSxPQUFRQSxNQUFPdVcsUUFBZixHQUFlLE1BQWY7QUFESTs7QUFITixtQkFLTSxNQUxOO0FBTUUsb0JBQUd2VyxLQUFIO0FBQ0NBLDBCQUFRaWEsT0FBT2phLEtBQVAsRUFBY2thLE1BQWQsQ0FBcUIsWUFBckIsQ0FBUjtBQ2lDUTs7QURuQ0w7O0FBTE4sbUJBUU0sVUFSTjtBQVNFLG9CQUFHbGEsS0FBSDtBQUNDQSwwQkFBUWlhLE9BQU9qYSxLQUFQLEVBQWNrYSxNQUFkLENBQXFCLGtCQUFyQixDQUFSO0FDbUNROztBRHJDTDs7QUFSTixtQkFXTSxVQVhOO0FBWUUsb0JBQUdsYSxVQUFTLElBQVQsSUFBaUJBLFVBQVMsTUFBN0I7QUFDQ0EsMEJBQVF3VyxRQUFRQyxFQUFSLENBQVcseUJBQVgsQ0FBUjtBQUREO0FBR0N6VywwQkFBUXdXLFFBQVFDLEVBQVIsQ0FBVyx3QkFBWCxDQUFSO0FDcUNROztBRHpDTDs7QUFYTixtQkFnQk0sT0FoQk47QUFpQkUsb0JBQUd6VyxLQUFIO0FBQ0Msc0JBQUdzUyxFQUFFalMsT0FBRixDQUFVTCxLQUFWLENBQUg7QUFDQ0EsNEJBQVFzUyxFQUFFaVUsS0FBRixDQUFRdm1CLEtBQVIsRUFBZSxRQUFmLEVBQXlCRSxRQUF6QixFQUFSO0FBREQ7QUFHQ0YsNEJBQVFBLE1BQU0sUUFBTixDQUFSO0FBSkY7QUM0Q1M7O0FEN0RYOztBQXVCQSxtQkFBT0EsS0FBUDtBQWpDRDtBQUFBLFNBREQsQ0NnQ0k7QUE2Q0Q7QUQvRUw7QUNpRkM7O0FEMUNGLFNBQU82SSxPQUFQO0FBalYyQixDQUE1Qjs7QUFtVkF5SSxPQUFPNDFCLE9BQVAsQ0FBZTtBQzZDYixTRDVDRHlxQixjQUFjL2lDLFNBQWQsR0FBMEIsSUFBSWlqQyxRQUFRQyxLQUFaLENBQWtCc0IsMkJBQWxCLENDNEN6QjtBRDdDRjs7QUFJQUosZ0NBQWdDLFVBQUM3eEMsR0FBRCxFQUFNd3RCLE1BQU4sRUFBY3Y5QixNQUFkO0FBQy9CLE1BQUF0SixHQUFBLEVBQUFlLE9BQUE7QUFBQWYsUUFBTSxpQkFBaUJxWixHQUFqQixHQUF1Qnd0QixNQUE3Qjs7QUFDQSxNQUFHeHRCLFFBQU8sT0FBVjtBQUNDdFksY0FBVW9xRCxxQ0FBcUN0a0IsTUFBckMsRUFBNkN2OUIsTUFBN0MsQ0FBVjtBQURELFNBRUssSUFBRytQLFFBQU8sUUFBVjtBQUNKdFksY0FBVXFxRCxzQ0FBc0N2a0IsTUFBdEMsRUFBOEN2OUIsTUFBOUMsQ0FBVjtBQURJO0FBR0p2SSxjQUFVdXFELDBCQUEwQnprQixNQUExQixFQUFrQ3Y5QixNQUFsQyxDQUFWOztBQUNBLFFBQUcsQ0FBQ3U5QixNQUFKO0FBQ0M5bEMsY0FBUXZCLElBQVIsR0FBZSxpQkFBZjtBQUxHO0FDb0RIOztBRDlDRixNQUFHcW5DLE1BQUg7QUFDQzlsQyxZQUFRdkIsSUFBUixHQUFlUSxHQUFmO0FDZ0RDOztBRC9DRixTQUFPZSxPQUFQO0FBWitCLENBQWhDOztBQWdCQW9xRCx1Q0FBdUMsVUFBQ3RrQixNQUFELEVBQVN2OUIsTUFBVDtBQUN0QyxNQUFBdkksT0FBQTtBQUFBQSxZQUFVdXFELDBCQUEwQnprQixNQUExQixFQUFrQ3Y5QixNQUFsQyxDQUFWOztBQUVBLE1BQUcsQ0FBQ3U5QixNQUFKO0FBQ0M5bEMsWUFBUXZCLElBQVIsR0FBZSxpQkFBZjtBQ2dEQzs7QUQ5Q0Z1QixVQUFRaWhCLEtBQVIsR0FBZ0IsQ0FBQyxDQUFDLENBQUQsRUFBSSxNQUFKLENBQUQsQ0FBaEI7O0FBQ0FqaEIsVUFBUSt0RCxpQkFBUixHQUE0QixVQUFDOTJDLEtBQUQsRUFBUWdRLFFBQVIsRUFBa0J6dUIsSUFBbEIsRUFBd0JraUQsSUFBeEIsRUFBOEJsVSxLQUE5QixFQUFxQ3duQixxQkFBckMsRUFBNEQ5dUMsTUFBNUQsRUFBb0UrdUMsV0FBcEU7QUFDM0IsUUFBQUMsT0FBQSxFQUFBNUksU0FBQSxFQUFBNkksbUJBQUEsRUFBQUMsZUFBQSxFQUFBTCxpQkFBQSxFQUFBNXJDLEVBQUEsRUFBQWtzQyxJQUFBLEVBQUFDLElBQUE7QUFBQUgsMEJBQXNCLENBQ3JCO0FBQ0MzSCxjQUFRdi9CO0FBRFQsS0FEcUIsRUFJckI7QUFDQ3NuQyxnQkFBVTtBQUNUOXZELGNBQU0sQ0FERztBQUVULG9CQUFZO0FBRkg7QUFEWCxLQUpxQixFQVVyQjtBQUNDK3ZELGVBQVM7QUFEVixLQVZxQixFQWFyQjtBQUNDQSxlQUFTO0FBRFYsS0FicUIsRUFnQnJCO0FBQ0NoSSxjQUFRO0FBQ1AsZ0NBQXdCLEtBRGpCO0FBRVAsNEJBQW9CdG5DO0FBRmI7QUFEVCxLQWhCcUIsQ0FBdEI7O0FBdUJBLFFBQUcxbUIsUUFBU0EsS0FBS3RDLE1BQUwsR0FBYyxDQUExQjtBQUNDaXNCLFdBQUszcEIsS0FBSyxDQUFMLENBQUw7QUFDQTYxRCxhQUFPbHNDLEdBQUcsQ0FBSCxDQUFQO0FBQ0Ftc0MsYUFBT25zQyxHQUFHLENBQUgsQ0FBUDs7QUFDQSxVQUFHa3NDLFNBQVEsWUFBWDtBQUVDSixvQkFBWXoxRCxJQUFaLEdBQW1CLENBQUMsQ0FBQyxVQUFELEVBQWE4MUQsSUFBYixDQUFELENBQW5CO0FBRUFILDRCQUFvQnp2RCxJQUFwQixDQUF5QjtBQUFBK25ELGtCQUFRO0FBQUN6OUMsaUJBQUssTUFBTjtBQUFjLGtDQUFzQjtBQUFDeWxELHNCQUFRO0FBQVQ7QUFBcEM7QUFBUixTQUF6QjtBQUVBUCxrQkFBVTtBQUFBLGdDQUF5QkksU0FBUSxLQUFSLEdBQW1CLENBQW5CLEdBQTBCLENBQUM7QUFBcEQsU0FBVjtBQUVBSCw0QkFBb0J6dkQsSUFBcEIsQ0FBeUI7QUFBQWd3RCxpQkFBT1I7QUFBUCxTQUF6QjtBQUNBQyw0QkFBb0J6dkQsSUFBcEIsQ0FBeUI7QUFBQWl3RCxpQkFBT2pVO0FBQVAsU0FBekI7QUFDQXlULDRCQUFvQnp2RCxJQUFwQixDQUF5QjtBQUFBa3dELGtCQUFRcG9CO0FBQVIsU0FBekI7QUFDQXVuQiw0QkFBb0IsSUFBSXZsRCxLQUFKLEVBQXBCOztBQUVBODhDLG9CQUFZLFVBQUNydUMsS0FBRCxFQUFRazNDLG1CQUFSLEVBQTZCSixpQkFBN0IsRUFBZ0RjLEVBQWhEO0FBQ1g1M0MsZ0JBQU0wdEIsVUFBTixDQUFpQjBnQixhQUFqQixHQUFpQ0MsU0FBakMsQ0FBMkM2SSxtQkFBM0MsRUFBZ0U1SSxPQUFoRSxDQUF3RSxVQUFDMTJCLEdBQUQsRUFBTWwzQixJQUFOO0FBQ3ZFLGdCQUFHazNCLEdBQUg7QUFDQyxvQkFBTSxJQUFJeHFCLEtBQUosQ0FBVXdxQixHQUFWLENBQU47QUN1RE07O0FEdERQbDNCLGlCQUFLdVIsT0FBTCxDQUFhLFVBQUNzOEMsR0FBRDtBQUNadUksZ0NBQWtCcnZELElBQWxCLENBQXVCOG1ELElBQUl4OEMsR0FBM0I7QUFERDs7QUFHQSxnQkFBRzZsRCxFQUFIO0FBQ0NBO0FDd0RNO0FEL0RSO0FBRFcsU0FBWjs7QUFZQVQsMEJBQWtCM2xELE9BQU84cUMsU0FBUCxDQUFpQitSLFNBQWpCLENBQWxCO0FBRUE4SSx3QkFBZ0JuM0MsS0FBaEIsRUFBdUJrM0MsbUJBQXZCLEVBQTRDSixpQkFBNUM7QUFFQSxlQUFPQSxrQkFBa0JsMkIsSUFBbEIsRUFBUDtBQTdCRDtBQStCQyxlQUFPbTJCLHFCQUFQO0FBbkNGO0FDMEZHO0FEbEh3QixHQUE1Qjs7QUE2REEsU0FBT2h1RCxPQUFQO0FBcEVzQyxDQUF2Qzs7QUFzRUF5SSxPQUFPNDFCLE9BQVAsQ0FBZTtBQ3lEYixTRHhERHlxQixjQUFjckcsZUFBZCxHQUFnQyxJQUFJdUcsUUFBUUMsS0FBWixDQUFrQmtCLDhCQUE4QixPQUE5QixDQUFsQixDQ3dEL0I7QUR6REY7O0FBSUFFLHdDQUF3QyxVQUFDdmtCLE1BQUQsRUFBU3Y5QixNQUFUO0FBQ3ZDLE1BQUF2SSxPQUFBO0FBQUFBLFlBQVV1cUQsMEJBQTBCemtCLE1BQTFCLEVBQWtDdjlCLE1BQWxDLENBQVY7O0FBRUEsTUFBRyxDQUFDdTlCLE1BQUo7QUFDQzlsQyxZQUFRdkIsSUFBUixHQUFlLGtCQUFmO0FDeURDOztBRHZERnVCLFVBQVFpaEIsS0FBUixHQUFnQixDQUFDLENBQUMsQ0FBRCxFQUFJLE1BQUosQ0FBRCxDQUFoQjs7QUFDQWpoQixVQUFRK3RELGlCQUFSLEdBQTRCLFVBQUM5MkMsS0FBRCxFQUFRZ1EsUUFBUixFQUFrQnp1QixJQUFsQixFQUF3QmtpRCxJQUF4QixFQUE4QmxVLEtBQTlCLEVBQXFDd25CLHFCQUFyQyxFQUE0RDl1QyxNQUE1RCxFQUFvRSt1QyxXQUFwRTtBQUMzQixRQUFBQyxPQUFBLEVBQUE1SSxTQUFBLEVBQUE2SSxtQkFBQSxFQUFBQyxlQUFBLEVBQUFMLGlCQUFBLEVBQUE1ckMsRUFBQSxFQUFBa3NDLElBQUEsRUFBQUMsSUFBQTtBQUFBSCwwQkFBc0IsQ0FDckI7QUFDQzNILGNBQVF2L0I7QUFEVCxLQURxQixFQUlyQjtBQUNDc25DLGdCQUFVO0FBQ1Q5dkQsY0FBTSxDQURHO0FBRVQsb0JBQVk7QUFGSDtBQURYLEtBSnFCLEVBVXJCO0FBQ0MrdkQsZUFBUztBQURWLEtBVnFCLEVBYXJCO0FBQ0NBLGVBQVM7QUFEVixLQWJxQixFQWdCckI7QUFDQ2hJLGNBQVE7QUFDUCxnQ0FBd0IsSUFEakI7QUFFUG4rQixhQUFLLENBQUM7QUFBQyw4QkFBb0JuSjtBQUFyQixTQUFELEVBQThCO0FBQUMsMkJBQWlCQTtBQUFsQixTQUE5QjtBQUZFO0FBRFQsS0FoQnFCLENBQXRCOztBQXVCQSxRQUFHMW1CLFFBQVNBLEtBQUt0QyxNQUFMLEdBQWMsQ0FBMUI7QUFDQ2lzQixXQUFLM3BCLEtBQUssQ0FBTCxDQUFMO0FBQ0E2MUQsYUFBT2xzQyxHQUFHLENBQUgsQ0FBUDtBQUNBbXNDLGFBQU9uc0MsR0FBRyxDQUFILENBQVA7O0FBQ0EsVUFBR2tzQyxTQUFRLGdCQUFYO0FBRUNKLG9CQUFZejFELElBQVosR0FBbUIsQ0FBQyxDQUFDLFVBQUQsRUFBYTgxRCxJQUFiLENBQUQsQ0FBbkI7QUFFQUgsNEJBQW9CenZELElBQXBCLENBQXlCO0FBQUErbkQsa0JBQVE7QUFBQ3o5QyxpQkFBSyxNQUFOO0FBQWMsbUNBQXVCO0FBQUM4bEQscUJBQU87QUFBUjtBQUFyQztBQUFSLFNBQXpCO0FBRUFaLGtCQUFVO0FBQUEsaUNBQTBCSSxTQUFRLEtBQVIsR0FBbUIsQ0FBbkIsR0FBMEIsQ0FBQztBQUFyRCxTQUFWO0FBRUFILDRCQUFvQnp2RCxJQUFwQixDQUF5QjtBQUFBZ3dELGlCQUFPUjtBQUFQLFNBQXpCO0FBQ0FDLDRCQUFvQnp2RCxJQUFwQixDQUF5QjtBQUFBaXdELGlCQUFPalU7QUFBUCxTQUF6QjtBQUNBeVQsNEJBQW9CenZELElBQXBCLENBQXlCO0FBQUFrd0Qsa0JBQVFwb0I7QUFBUixTQUF6QjtBQUNBdW5CLDRCQUFvQixJQUFJdmxELEtBQUosRUFBcEI7O0FBRUE4OEMsb0JBQVksVUFBQ3J1QyxLQUFELEVBQVFrM0MsbUJBQVIsRUFBNkJKLGlCQUE3QixFQUFnRGMsRUFBaEQ7QUFDWDUzQyxnQkFBTTB0QixVQUFOLENBQWlCMGdCLGFBQWpCLEdBQWlDQyxTQUFqQyxDQUEyQzZJLG1CQUEzQyxFQUFnRTVJLE9BQWhFLENBQXdFLFVBQUMxMkIsR0FBRCxFQUFNbDNCLElBQU47QUFDdkUsZ0JBQUdrM0IsR0FBSDtBQUNDLG9CQUFNLElBQUl4cUIsS0FBSixDQUFVd3FCLEdBQVYsQ0FBTjtBQ3NFTTs7QURyRVBsM0IsaUJBQUt1UixPQUFMLENBQWEsVUFBQ3M4QyxHQUFEO0FBQ1p1SSxnQ0FBa0JydkQsSUFBbEIsQ0FBdUI4bUQsSUFBSXg4QyxHQUEzQjtBQUREOztBQUdBLGdCQUFHNmxELEVBQUg7QUFDQ0E7QUN1RU07QUQ5RVI7QUFEVyxTQUFaOztBQVlBVCwwQkFBa0IzbEQsT0FBTzhxQyxTQUFQLENBQWlCK1IsU0FBakIsQ0FBbEI7QUFFQThJLHdCQUFnQm4zQyxLQUFoQixFQUF1QmszQyxtQkFBdkIsRUFBNENKLGlCQUE1QztBQUVBLGVBQU9BLGtCQUFrQmwyQixJQUFsQixFQUFQO0FBN0JEO0FBK0JDLGVBQU9tMkIscUJBQVA7QUFuQ0Y7QUN5R0c7QURqSXdCLEdBQTVCOztBQTZEQSxTQUFPaHVELE9BQVA7QUFwRXVDLENBQXhDOztBQXNFQXlJLE9BQU80MUIsT0FBUCxDQUFlO0FDd0ViLFNEdkVEeXFCLGNBQWNpRyxnQkFBZCxHQUFpQyxJQUFJL0YsUUFBUUMsS0FBWixDQUFrQmtCLDhCQUE4QixRQUE5QixDQUFsQixDQ3VFaEM7QUR4RUY7O0FBR0EsSUFBRzFoRCxPQUFPMEgsUUFBVjtBQUNDMjRDLGdCQUFja0csYUFBZCxHQUE4QixJQUFJQyxXQUFKLEVBQTlCO0FDeUVBOztBRHZFRHhtRCxPQUFPNDFCLE9BQVAsQ0FBZTtBQzBFYixTRHpFRDlPLFFBQVEyL0IsT0FBUixDQUFnQixVQUFDMXlELENBQUQ7QUFDZixRQUFHaU0sT0FBTzBILFFBQVAsSUFBbUIsQ0FBQzFELFFBQVF3SSxRQUFSLEVBQXZCO0FBQ0MsVUFBRytDLFFBQVF2VSxHQUFSLENBQVksUUFBWixLQUF5QnVVLFFBQVF2VSxHQUFSLENBQVksS0FBWixNQUFzQixPQUFsRDtBQzBFSyxlRHpFSmdGLE9BQU9uUixJQUFQLENBQVkseUJBQVosRUFBdUMwZ0IsUUFBUXZVLEdBQVIsQ0FBWSxLQUFaLENBQXZDLEVBQTJEdVUsUUFBUXZVLEdBQVIsQ0FBWSxRQUFaLENBQTNELEVBQWtGLFVBQUM4SixLQUFELEVBQVExTSxNQUFSO0FBQ2pGMnBELGtDQUF3Qnh5QyxRQUFRdlUsR0FBUixDQUFZLEtBQVosQ0FBeEIsRUFBNEN1VSxRQUFRdlUsR0FBUixDQUFZLFFBQVosQ0FBNUMsRUFBbUU1QyxNQUFuRTtBQzBFSyxpQkR6RUx1SyxTQUFTMi9DLGFBQVQsQ0FBdUJvRSxZQUF2QixFQ3lFSztBRDNFTixVQ3lFSTtBRDNFTjtBQ2dGRztBRGpGSixJQ3lFQztBRDFFRjs7QUFTQTNFLDBCQUEwQixVQUFDbHlDLEdBQUQsRUFBTXd0QixNQUFOLEVBQWN2OUIsTUFBZDtBQUN6QixNQUFBd0csSUFBQSxFQUFBOVAsR0FBQSxFQUFBbUssR0FBQSxFQUFBa0csSUFBQSxFQUFBc1EsSUFBQTs7QUFBQSxNQUFHLENBQUNyWCxNQUFKO0FBQ0N3RyxXQUFPbEcsR0FBR29HLEtBQUgsQ0FBU2xHLE9BQVQsQ0FBaUI7QUFBQ0MsV0FBSzg4QjtBQUFOLEtBQWpCLEVBQWdDO0FBQUN2OUIsY0FBUTtBQUFDSixjQUFNO0FBQVA7QUFBVCxLQUFoQyxDQUFQO0FBQ0FJLGFBQUEsQ0FBQWEsTUFBQVAsR0FBQUMsS0FBQSxDQUFBQyxPQUFBO0FDcUZJQyxXQUFLK0YsUUFBUSxJQUFSLEdBQWVBLEtBQUs1RyxJQUFwQixHQUEyQixLQUFLO0FEckZ6QyxPQ3NGSztBQUNESSxjQUFRO0FBQ04sMEJBQWtCO0FBRFo7QUFEUCxLRHRGTCxNQzBGUyxJRDFGVCxHQzBGZ0IsQ0FBQytHLE9BQU9sRyxJQUFJdUYsT0FBWixLQUF3QixJQUF4QixHQUErQlcsS0QxRitDL0csTUMwRjlFLEdEMUY4RSxNQUE5RixHQUE4RixNQUE5RjtBQzJGQzs7QUR6RkZBLFdBQVMraEQsa0JBQWtCL2hELE1BQWxCLENBQVQ7O0FBRUEsT0FBQUEsVUFBQSxRQUFBcVgsT0FBQXJYLE9BQUFvVSxjQUFBLHFDQUFBaUQsS0FBb0QxcEIsTUFBcEQsR0FBb0QsTUFBcEQsR0FBb0QsTUFBcEQsSUFBNkQsQ0FBN0Q7QUFDQytJLFVBQU0saUJBQWlCcVosR0FBakIsR0FBdUJ3dEIsTUFBN0I7O0FBQ0EsUUFBR3I5QixPQUFPMEgsUUFBVjtBQUNDMjRDLG9CQUFja0csYUFBZCxDQUE0Qm53QyxHQUE1QixDQUFnQyxJQUFJbXFDLFFBQVFDLEtBQVosQ0FBa0JrQiw4QkFBOEI3eEMsR0FBOUIsRUFBbUN3dEIsTUFBbkMsRUFBMkN2OUIsTUFBM0MsQ0FBbEIsQ0FBaEM7QUFERDtBQUdDLFVBQUl5Z0QsUUFBUUMsS0FBWixDQUFrQmtCLDhCQUE4Qjd4QyxHQUE5QixFQUFtQ3d0QixNQUFuQyxFQUEyQ3Y5QixNQUEzQyxDQUFsQjtBQzBGRTs7QUFDRCxXRDFGRmMsUUFBUUMsR0FBUixDQUFZLG9CQUFaLEVBQWtDckssR0FBbEMsQ0MwRkU7QUFDRDtBRHhHdUIsQ0FBMUI7O0FBZUEsSUFBR3dKLE9BQU9DLFFBQVY7QUFDQ0QsU0FBT3NtQyxPQUFQLENBQ0M7QUFBQXliLDZCQUF5QixVQUFDbHlDLEdBQUQsRUFBTXd0QixNQUFOO0FBQ3hCLFVBQUF2OUIsTUFBQSxFQUFBd0csSUFBQSxFQUFBM0YsR0FBQSxFQUFBa0csSUFBQTtBQUFBazdDLDhCQUF3Qmx5QyxHQUF4QixFQUE2Qnd0QixNQUE3QjtBQUVBLzJCLGFBQU9sRyxHQUFHb0csS0FBSCxDQUFTbEcsT0FBVCxDQUFpQjtBQUFDQyxhQUFLODhCO0FBQU4sT0FBakIsRUFBZ0M7QUFBQ3Y5QixnQkFBUTtBQUFDSixnQkFBTTtBQUFQO0FBQVQsT0FBaEMsQ0FBUDtBQUNBSSxlQUFBLENBQUFhLE1BQUFQLEdBQUFDLEtBQUEsQ0FBQUMsT0FBQTtBQ21HS0MsYUFBSytGLFFBQVEsSUFBUixHQUFlQSxLQUFLNUcsSUFBcEIsR0FBMkIsS0FBSztBRG5HMUMsU0NvR007QUFDREksZ0JBQVE7QUFDTiw0QkFBa0I7QUFEWjtBQURQLE9EcEdOLE1Dd0dVLElEeEdWLEdDd0dpQixDQUFDK0csT0FBT2xHLElBQUl1RixPQUFaLEtBQXdCLElBQXhCLEdBQStCVyxLRHhHOEMvRyxNQ3dHN0UsR0R4RzZFLE1BQTlGLEdBQThGLE1BQTlGO0FBQ0EsYUFBT0EsTUFBUDtBQUxEO0FBQUEsR0FERDtBQ2lIQSxDIiwiZmlsZSI6Ii9wYWNrYWdlcy9zdGVlZG9zX3dvcmtmbG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hlY2tOcG1WZXJzaW9ucyB9IGZyb20gJ21ldGVvci90bWVhc2RheTpjaGVjay1ucG0tdmVyc2lvbnMnO1xyXG5jaGVja05wbVZlcnNpb25zKHtcclxuXHRcIm5vZGUtc2NoZWR1bGVcIjogXCJeMS4zLjFcIixcclxuXHRjb29raWVzOiBcIl4wLjYuMlwiLFxyXG5cdFwieG1sMmpzXCI6IFwiXjAuNC4xOVwiLFxyXG5cdG1rZGlycDogXCJeMC4zLjVcIixcclxufSwgJ3N0ZWVkb3M6d29ya2Zsb3cnKTsiLCIvKiFcclxuICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMc1xyXG4gKlxyXG4gKiBWZXJzaW9uOiAxLjE3LjBcclxuICpcclxuICogQXV0aG9yOiBSb2RuZXkgUmVobVxyXG4gKiBXZWI6IGh0dHA6Ly9tZWRpYWxpemUuZ2l0aHViLmlvL1VSSS5qcy9cclxuICpcclxuICogTGljZW5zZWQgdW5kZXJcclxuICogICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXHJcbiAqICAgR1BMIHYzIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9HUEwtMy4wXHJcbiAqXHJcbiAqL1xyXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXHJcblx0Ly8gaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xyXG5cdC8vICAgLy8gTm9kZVxyXG5cdC8vICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJy4vcHVueWNvZGUnKSwgcmVxdWlyZSgnLi9JUHY2JyksIHJlcXVpcmUoJy4vU2Vjb25kTGV2ZWxEb21haW5zJykpO1xyXG5cdC8vIH0gZWxzZVxyXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuXHRcdGRlZmluZShbJy4vcHVueWNvZGUnLCAnLi9JUHY2JywgJy4vU2Vjb25kTGV2ZWxEb21haW5zJ10sIGZhY3RvcnkpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxyXG5cdFx0cm9vdC5VUkkgPSBmYWN0b3J5KHJvb3QucHVueWNvZGUsIHJvb3QuSVB2Niwgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMsIHJvb3QpO1xyXG5cdH1cclxufSh0aGlzLCBmdW5jdGlvbiAocHVueWNvZGUsIElQdjYsIFNMRCwgcm9vdCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHQvKmdsb2JhbCBsb2NhdGlvbiwgZXNjYXBlLCB1bmVzY2FwZSAqL1xyXG5cdC8vIEZJWE1FOiB2Mi4wLjAgcmVuYW1jZSBub24tY2FtZWxDYXNlIHByb3BlcnRpZXMgdG8gdXBwZXJjYXNlXHJcblx0Lypqc2hpbnQgY2FtZWxjYXNlOiBmYWxzZSAqL1xyXG5cclxuXHQvLyBzYXZlIGN1cnJlbnQgVVJJIHZhcmlhYmxlLCBpZiBhbnlcclxuXHR2YXIgX1VSSSA9IHJvb3QgJiYgcm9vdC5VUkk7XHJcblxyXG5cdGZ1bmN0aW9uIFVSSSh1cmwsIGJhc2UpIHtcclxuXHRcdHZhciBfdXJsU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDE7XHJcblx0XHR2YXIgX2Jhc2VTdXBwbGllZCA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjtcclxuXHJcblx0XHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcclxuXHRcdGlmICghKHRoaXMgaW5zdGFuY2VvZiBVUkkpKSB7XHJcblx0XHRcdGlmIChfdXJsU3VwcGxpZWQpIHtcclxuXHRcdFx0XHRpZiAoX2Jhc2VTdXBwbGllZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBVUkkodXJsLCBiYXNlKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBuZXcgVVJJKHVybCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBuZXcgVVJJKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHVybCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGlmIChfdXJsU3VwcGxpZWQpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmRlZmluZWQgaXMgbm90IGEgdmFsaWQgYXJndW1lbnQgZm9yIFVSSScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdHVybCA9IGxvY2F0aW9uLmhyZWYgKyAnJztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR1cmwgPSAnJztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuaHJlZih1cmwpO1xyXG5cclxuXHRcdC8vIHJlc29sdmUgdG8gYmFzZSBhY2NvcmRpbmcgdG8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3VybC9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCNjb25zdHJ1Y3RvclxyXG5cdFx0aWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hYnNvbHV0ZVRvKGJhc2UpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0VVJJLnZlcnNpb24gPSAnMS4xNy4wJztcclxuXHJcblx0dmFyIHAgPSBVUkkucHJvdG90eXBlO1xyXG5cdHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG5cclxuXHRmdW5jdGlvbiBlc2NhcGVSZWdFeChzdHJpbmcpIHtcclxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2NvbW1pdC84NWFjMjE3ODNjMTFmOGNjYWIwNjEwNmRiYTk3MzVhMzFhODY5MjRkI2NvbW1pdGNvbW1lbnQtODIxOTYzXHJcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyhbLiorP149IToke30oKXxbXFxdXFwvXFxcXF0pL2csICdcXFxcJDEnKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFR5cGUodmFsdWUpIHtcclxuXHRcdC8vIElFOCBkb2Vzbid0IHJldHVybiBbT2JqZWN0IFVuZGVmaW5lZF0gYnV0IFtPYmplY3QgT2JqZWN0XSBmb3IgdW5kZWZpbmVkIHZhbHVlXHJcblx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gJ1VuZGVmaW5lZCc7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIFN0cmluZyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpKS5zbGljZSg4LCAtMSk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpc0FycmF5KG9iaikge1xyXG5cdFx0cmV0dXJuIGdldFR5cGUob2JqKSA9PT0gJ0FycmF5JztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGZpbHRlckFycmF5VmFsdWVzKGRhdGEsIHZhbHVlKSB7XHJcblx0XHR2YXIgbG9va3VwID0ge307XHJcblx0XHR2YXIgaSwgbGVuZ3RoO1xyXG5cclxuXHRcdGlmIChnZXRUeXBlKHZhbHVlKSA9PT0gJ1JlZ0V4cCcpIHtcclxuXHRcdFx0bG9va3VwID0gbnVsbDtcclxuXHRcdH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuXHRcdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRsb29rdXBbdmFsdWVbaV1dID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bG9va3VwW3ZhbHVlXSA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gZGF0YS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHQvKmpzaGludCBsYXhicmVhazogdHJ1ZSAqL1xyXG5cdFx0XHR2YXIgX21hdGNoID0gbG9va3VwICYmIGxvb2t1cFtkYXRhW2ldXSAhPT0gdW5kZWZpbmVkXHJcblx0XHRcdFx0fHwgIWxvb2t1cCAmJiB2YWx1ZS50ZXN0KGRhdGFbaV0pO1xyXG5cdFx0XHQvKmpzaGludCBsYXhicmVhazogZmFsc2UgKi9cclxuXHRcdFx0aWYgKF9tYXRjaCkge1xyXG5cdFx0XHRcdGRhdGEuc3BsaWNlKGksIDEpO1xyXG5cdFx0XHRcdGxlbmd0aC0tO1xyXG5cdFx0XHRcdGktLTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYXJyYXlDb250YWlucyhsaXN0LCB2YWx1ZSkge1xyXG5cdFx0dmFyIGksIGxlbmd0aDtcclxuXHJcblx0XHQvLyB2YWx1ZSBtYXkgYmUgc3RyaW5nLCBudW1iZXIsIGFycmF5LCByZWdleHBcclxuXHRcdGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG5cdFx0XHQvLyBOb3RlOiB0aGlzIGNhbiBiZSBvcHRpbWl6ZWQgdG8gTyhuKSAoaW5zdGVhZCBvZiBjdXJyZW50IE8obSAqIG4pKVxyXG5cdFx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGlmICghYXJyYXlDb250YWlucyhsaXN0LCB2YWx1ZVtpXSkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBfdHlwZSA9IGdldFR5cGUodmFsdWUpO1xyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoX3R5cGUgPT09ICdSZWdFeHAnKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBsaXN0W2ldID09PSAnc3RyaW5nJyAmJiBsaXN0W2ldLm1hdGNoKHZhbHVlKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKGxpc3RbaV0gPT09IHZhbHVlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBhcnJheXNFcXVhbChvbmUsIHR3bykge1xyXG5cdFx0aWYgKCFpc0FycmF5KG9uZSkgfHwgIWlzQXJyYXkodHdvKSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYXJyYXlzIGNhbid0IGJlIGVxdWFsIGlmIHRoZXkgaGF2ZSBkaWZmZXJlbnQgYW1vdW50IG9mIGNvbnRlbnRcclxuXHRcdGlmIChvbmUubGVuZ3RoICE9PSB0d28ubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRvbmUuc29ydCgpO1xyXG5cdFx0dHdvLnNvcnQoKTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IG9uZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHRcdFx0aWYgKG9uZVtpXSAhPT0gdHdvW2ldKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB0cmltU2xhc2hlcyh0ZXh0KSB7XHJcblx0XHR2YXIgdHJpbV9leHByZXNzaW9uID0gL15cXC8rfFxcLyskL2c7XHJcblx0XHRyZXR1cm4gdGV4dC5yZXBsYWNlKHRyaW1fZXhwcmVzc2lvbiwgJycpO1xyXG5cdH1cclxuXHJcblx0VVJJLl9wYXJ0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cHJvdG9jb2w6IG51bGwsXHJcblx0XHRcdHVzZXJuYW1lOiBudWxsLFxyXG5cdFx0XHRwYXNzd29yZDogbnVsbCxcclxuXHRcdFx0aG9zdG5hbWU6IG51bGwsXHJcblx0XHRcdHVybjogbnVsbCxcclxuXHRcdFx0cG9ydDogbnVsbCxcclxuXHRcdFx0cGF0aDogbnVsbCxcclxuXHRcdFx0cXVlcnk6IG51bGwsXHJcblx0XHRcdGZyYWdtZW50OiBudWxsLFxyXG5cdFx0XHQvLyBzdGF0ZVxyXG5cdFx0XHRkdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnM6IFVSSS5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsXHJcblx0XHRcdGVzY2FwZVF1ZXJ5U3BhY2U6IFVSSS5lc2NhcGVRdWVyeVNwYWNlXHJcblx0XHR9O1xyXG5cdH07XHJcblx0Ly8gc3RhdGU6IGFsbG93IGR1cGxpY2F0ZSBxdWVyeSBwYXJhbWV0ZXJzIChhPTEmYT0xKVxyXG5cdFVSSS5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSBmYWxzZTtcclxuXHQvLyBzdGF0ZTogcmVwbGFjZXMgKyB3aXRoICUyMCAoc3BhY2UgaW4gcXVlcnkgc3RyaW5ncylcclxuXHRVUkkuZXNjYXBlUXVlcnlTcGFjZSA9IHRydWU7XHJcblx0Ly8gc3RhdGljIHByb3BlcnRpZXNcclxuXHRVUkkucHJvdG9jb2xfZXhwcmVzc2lvbiA9IC9eW2Etel1bYS16MC05ListXSokL2k7XHJcblx0VVJJLmlkbl9leHByZXNzaW9uID0gL1teYS16MC05XFwuLV0vaTtcclxuXHRVUkkucHVueWNvZGVfZXhwcmVzc2lvbiA9IC8oeG4tLSkvaTtcclxuXHQvLyB3ZWxsLCAzMzMuNDQ0LjU1NS42NjYgbWF0Y2hlcywgYnV0IGl0IHN1cmUgYWluJ3Qgbm8gSVB2NCAtIGRvIHdlIGNhcmU/XHJcblx0VVJJLmlwNF9leHByZXNzaW9uID0gL15cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfSQvO1xyXG5cdC8vIGNyZWRpdHMgdG8gUmljaCBCcm93blxyXG5cdC8vIHNvdXJjZTogaHR0cDovL2ZvcnVtcy5pbnRlcm1hcHBlci5jb20vdmlld3RvcGljLnBocD9wPTEwOTYjMTA5NlxyXG5cdC8vIHNwZWNpZmljYXRpb246IGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzQyOTEudHh0XHJcblx0VVJJLmlwNl9leHByZXNzaW9uID0gL15cXHMqKCgoWzAtOUEtRmEtZl17MSw0fTopezd9KFswLTlBLUZhLWZdezEsNH18OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezZ9KDpbMC05QS1GYS1mXXsxLDR9fCgoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwyfSl8OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NH0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwzfSl8KCg6WzAtOUEtRmEtZl17MSw0fSk/OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezN9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNH0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsMn06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Mn0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw1fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwzfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsxfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDZ9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDR9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg6KCgoOlswLTlBLUZhLWZdezEsNH0pezEsN30pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNX06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSkpKCUuKyk/XFxzKiQvO1xyXG5cdC8vIGV4cHJlc3Npb24gdXNlZCBpcyBcImdydWJlciByZXZpc2VkXCIgKEBncnViZXIgdjIpIGRldGVybWluZWQgdG8gYmUgdGhlXHJcblx0Ly8gYmVzdCBzb2x1dGlvbiBpbiBhIHJlZ2V4LWdvbGYgd2UgZGlkIGEgY291cGxlIG9mIGFnZXMgYWdvIGF0XHJcblx0Ly8gKiBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleFxyXG5cdC8vICogaHR0cDovL3JvZG5leXJlaG0uZGUvdC91cmwtcmVnZXguaHRtbFxyXG5cdFVSSS5maW5kX3VyaV9leHByZXNzaW9uID0gL1xcYigoPzpbYS16XVtcXHctXSs6KD86XFwvezEsM318W2EtejAtOSVdKXx3d3dcXGR7MCwzfVsuXXxbYS16MC05LlxcLV0rWy5dW2Etel17Miw0fVxcLykoPzpbXlxccygpPD5dK3xcXCgoW15cXHMoKTw+XSt8KFxcKFteXFxzKCk8Pl0rXFwpKSkqXFwpKSsoPzpcXCgoW15cXHMoKTw+XSt8KFxcKFteXFxzKCk8Pl0rXFwpKSkqXFwpfFteXFxzYCEoKVxcW1xcXXt9OzonXCIuLDw+P8KrwrvigJzigJ3igJjigJldKSkvaWc7XHJcblx0VVJJLmZpbmRVcmkgPSB7XHJcblx0XHQvLyB2YWxpZCBcInNjaGVtZTovL1wiIG9yIFwid3d3LlwiXHJcblx0XHRzdGFydDogL1xcYig/OihbYS16XVthLXowLTkuKy1dKjpcXC9cXC8pfHd3d1xcLikvZ2ksXHJcblx0XHQvLyBldmVyeXRoaW5nIHVwIHRvIHRoZSBuZXh0IHdoaXRlc3BhY2VcclxuXHRcdGVuZDogL1tcXHNcXHJcXG5dfCQvLFxyXG5cdFx0Ly8gdHJpbSB0cmFpbGluZyBwdW5jdHVhdGlvbiBjYXB0dXJlZCBieSBlbmQgUmVnRXhwXHJcblx0XHR0cmltOiAvW2AhKClcXFtcXF17fTs6J1wiLiw8Pj/Cq8K74oCc4oCd4oCe4oCY4oCZXSskL1xyXG5cdH07XHJcblx0Ly8gaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy5odG1sXHJcblx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX1RDUF9hbmRfVURQX3BvcnRfbnVtYmVycyNXZWxsLWtub3duX3BvcnRzXHJcblx0VVJJLmRlZmF1bHRQb3J0cyA9IHtcclxuXHRcdGh0dHA6ICc4MCcsXHJcblx0XHRodHRwczogJzQ0MycsXHJcblx0XHRmdHA6ICcyMScsXHJcblx0XHRnb3BoZXI6ICc3MCcsXHJcblx0XHR3czogJzgwJyxcclxuXHRcdHdzczogJzQ0MydcclxuXHR9O1xyXG5cdC8vIGFsbG93ZWQgaG9zdG5hbWUgY2hhcmFjdGVycyBhY2NvcmRpbmcgdG8gUkZDIDM5ODZcclxuXHQvLyBBTFBIQSBESUdJVCBcIi1cIiBcIi5cIiBcIl9cIiBcIn5cIiBcIiFcIiBcIiRcIiBcIiZcIiBcIidcIiBcIihcIiBcIilcIiBcIipcIiBcIitcIiBcIixcIiBcIjtcIiBcIj1cIiAlZW5jb2RlZFxyXG5cdC8vIEkndmUgbmV2ZXIgc2VlbiBhIChub24tSUROKSBob3N0bmFtZSBvdGhlciB0aGFuOiBBTFBIQSBESUdJVCAuIC1cclxuXHRVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzID0gL1teYS16QS1aMC05XFwuLV0vO1xyXG5cdC8vIG1hcCBET00gRWxlbWVudHMgdG8gdGhlaXIgVVJJIGF0dHJpYnV0ZVxyXG5cdFVSSS5kb21BdHRyaWJ1dGVzID0ge1xyXG5cdFx0J2EnOiAnaHJlZicsXHJcblx0XHQnYmxvY2txdW90ZSc6ICdjaXRlJyxcclxuXHRcdCdsaW5rJzogJ2hyZWYnLFxyXG5cdFx0J2Jhc2UnOiAnaHJlZicsXHJcblx0XHQnc2NyaXB0JzogJ3NyYycsXHJcblx0XHQnZm9ybSc6ICdhY3Rpb24nLFxyXG5cdFx0J2ltZyc6ICdzcmMnLFxyXG5cdFx0J2FyZWEnOiAnaHJlZicsXHJcblx0XHQnaWZyYW1lJzogJ3NyYycsXHJcblx0XHQnZW1iZWQnOiAnc3JjJyxcclxuXHRcdCdzb3VyY2UnOiAnc3JjJyxcclxuXHRcdCd0cmFjayc6ICdzcmMnLFxyXG5cdFx0J2lucHV0JzogJ3NyYycsIC8vIGJ1dCBvbmx5IGlmIHR5cGU9XCJpbWFnZVwiXHJcblx0XHQnYXVkaW8nOiAnc3JjJyxcclxuXHRcdCd2aWRlbyc6ICdzcmMnXHJcblx0fTtcclxuXHRVUkkuZ2V0RG9tQXR0cmlidXRlID0gZnVuY3Rpb24obm9kZSkge1xyXG5cdFx0aWYgKCFub2RlIHx8ICFub2RlLm5vZGVOYW1lKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0Ly8gPGlucHV0PiBzaG91bGQgb25seSBleHBvc2Ugc3JjIGZvciB0eXBlPVwiaW1hZ2VcIlxyXG5cdFx0aWYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIG5vZGUudHlwZSAhPT0gJ2ltYWdlJykge1xyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBVUkkuZG9tQXR0cmlidXRlc1tub2RlTmFtZV07XHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gZXNjYXBlRm9yRHVtYkZpcmVmb3gzNih2YWx1ZSkge1xyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzkxXHJcblx0XHRyZXR1cm4gZXNjYXBlKHZhbHVlKTtcclxuXHR9XHJcblxyXG5cdC8vIGVuY29kaW5nIC8gZGVjb2RpbmcgYWNjb3JkaW5nIHRvIFJGQzM5ODZcclxuXHRmdW5jdGlvbiBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKSB7XHJcblx0XHQvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9lbmNvZGVVUklDb21wb25lbnRcclxuXHRcdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKVxyXG5cdFx0XHQucmVwbGFjZSgvWyEnKCkqXS9nLCBlc2NhcGVGb3JEdW1iRmlyZWZveDM2KVxyXG5cdFx0XHQucmVwbGFjZSgvXFwqL2csICclMkEnKTtcclxuXHR9XHJcblx0VVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcclxuXHRVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xyXG5cdFVSSS5pc284ODU5ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRVUkkuZW5jb2RlID0gZXNjYXBlO1xyXG5cdFx0VVJJLmRlY29kZSA9IHVuZXNjYXBlO1xyXG5cdH07XHJcblx0VVJJLnVuaWNvZGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7XHJcblx0XHRVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xyXG5cdH07XHJcblx0VVJJLmNoYXJhY3RlcnMgPSB7XHJcblx0XHRwYXRobmFtZToge1xyXG5cdFx0XHRlbmNvZGU6IHtcclxuXHRcdFx0XHQvLyBSRkMzOTg2IDIuMTogRm9yIGNvbnNpc3RlbmN5LCBVUkkgcHJvZHVjZXJzIGFuZCBub3JtYWxpemVycyBzaG91bGRcclxuXHRcdFx0XHQvLyB1c2UgdXBwZXJjYXNlIGhleGFkZWNpbWFsIGRpZ2l0cyBmb3IgYWxsIHBlcmNlbnQtZW5jb2RpbmdzLlxyXG5cdFx0XHRcdGV4cHJlc3Npb246IC8lKDI0fDI2fDJCfDJDfDNCfDNEfDNBfDQwKS9pZyxcclxuXHRcdFx0XHRtYXA6IHtcclxuXHRcdFx0XHRcdC8vIC0uX34hJygpKlxyXG5cdFx0XHRcdFx0JyUyNCc6ICckJyxcclxuXHRcdFx0XHRcdCclMjYnOiAnJicsXHJcblx0XHRcdFx0XHQnJTJCJzogJysnLFxyXG5cdFx0XHRcdFx0JyUyQyc6ICcsJyxcclxuXHRcdFx0XHRcdCclM0InOiAnOycsXHJcblx0XHRcdFx0XHQnJTNEJzogJz0nLFxyXG5cdFx0XHRcdFx0JyUzQSc6ICc6JyxcclxuXHRcdFx0XHRcdCclNDAnOiAnQCdcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlY29kZToge1xyXG5cdFx0XHRcdGV4cHJlc3Npb246IC9bXFwvXFw/I10vZyxcclxuXHRcdFx0XHRtYXA6IHtcclxuXHRcdFx0XHRcdCcvJzogJyUyRicsXHJcblx0XHRcdFx0XHQnPyc6ICclM0YnLFxyXG5cdFx0XHRcdFx0JyMnOiAnJTIzJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdHJlc2VydmVkOiB7XHJcblx0XHRcdGVuY29kZToge1xyXG5cdFx0XHRcdC8vIFJGQzM5ODYgMi4xOiBGb3IgY29uc2lzdGVuY3ksIFVSSSBwcm9kdWNlcnMgYW5kIG5vcm1hbGl6ZXJzIHNob3VsZFxyXG5cdFx0XHRcdC8vIHVzZSB1cHBlcmNhc2UgaGV4YWRlY2ltYWwgZGlnaXRzIGZvciBhbGwgcGVyY2VudC1lbmNvZGluZ3MuXHJcblx0XHRcdFx0ZXhwcmVzc2lvbjogLyUoMjF8MjN8MjR8MjZ8Mjd8Mjh8Mjl8MkF8MkJ8MkN8MkZ8M0F8M0J8M0R8M0Z8NDB8NUJ8NUQpL2lnLFxyXG5cdFx0XHRcdG1hcDoge1xyXG5cdFx0XHRcdFx0Ly8gZ2VuLWRlbGltc1xyXG5cdFx0XHRcdFx0JyUzQSc6ICc6JyxcclxuXHRcdFx0XHRcdCclMkYnOiAnLycsXHJcblx0XHRcdFx0XHQnJTNGJzogJz8nLFxyXG5cdFx0XHRcdFx0JyUyMyc6ICcjJyxcclxuXHRcdFx0XHRcdCclNUInOiAnWycsXHJcblx0XHRcdFx0XHQnJTVEJzogJ10nLFxyXG5cdFx0XHRcdFx0JyU0MCc6ICdAJyxcclxuXHRcdFx0XHRcdC8vIHN1Yi1kZWxpbXNcclxuXHRcdFx0XHRcdCclMjEnOiAnIScsXHJcblx0XHRcdFx0XHQnJTI0JzogJyQnLFxyXG5cdFx0XHRcdFx0JyUyNic6ICcmJyxcclxuXHRcdFx0XHRcdCclMjcnOiAnXFwnJyxcclxuXHRcdFx0XHRcdCclMjgnOiAnKCcsXHJcblx0XHRcdFx0XHQnJTI5JzogJyknLFxyXG5cdFx0XHRcdFx0JyUyQSc6ICcqJyxcclxuXHRcdFx0XHRcdCclMkInOiAnKycsXHJcblx0XHRcdFx0XHQnJTJDJzogJywnLFxyXG5cdFx0XHRcdFx0JyUzQic6ICc7JyxcclxuXHRcdFx0XHRcdCclM0QnOiAnPSdcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHR1cm5wYXRoOiB7XHJcblx0XHRcdC8vIFRoZSBjaGFyYWN0ZXJzIHVuZGVyIGBlbmNvZGVgIGFyZSB0aGUgY2hhcmFjdGVycyBjYWxsZWQgb3V0IGJ5IFJGQyAyMTQxIGFzIGJlaW5nIGFjY2VwdGFibGVcclxuXHRcdFx0Ly8gZm9yIHVzYWdlIGluIGEgVVJOLiBSRkMyMTQxIGFsc28gY2FsbHMgb3V0IFwiLVwiLCBcIi5cIiwgYW5kIFwiX1wiIGFzIGFjY2VwdGFibGUgY2hhcmFjdGVycywgYnV0XHJcblx0XHRcdC8vIHRoZXNlIGFyZW4ndCBlbmNvZGVkIGJ5IGVuY29kZVVSSUNvbXBvbmVudCwgc28gd2UgZG9uJ3QgaGF2ZSB0byBjYWxsIHRoZW0gb3V0IGhlcmUuIEFsc29cclxuXHRcdFx0Ly8gbm90ZSB0aGF0IHRoZSBjb2xvbiBjaGFyYWN0ZXIgaXMgbm90IGZlYXR1cmVkIGluIHRoZSBlbmNvZGluZyBtYXA7IHRoaXMgaXMgYmVjYXVzZSBVUkkuanNcclxuXHRcdFx0Ly8gZ2l2ZXMgdGhlIGNvbG9ucyBpbiBVUk5zIHNlbWFudGljIG1lYW5pbmcgYXMgdGhlIGRlbGltaXRlcnMgb2YgcGF0aCBzZWdlbWVudHMsIGFuZCBzbyBpdFxyXG5cdFx0XHQvLyBzaG91bGQgbm90IGFwcGVhciB1bmVuY29kZWQgaW4gYSBzZWdtZW50IGl0c2VsZi5cclxuXHRcdFx0Ly8gU2VlIGFsc28gdGhlIG5vdGUgYWJvdmUgYWJvdXQgUkZDMzk4NiBhbmQgY2FwaXRhbGFsaXplZCBoZXggZGlnaXRzLlxyXG5cdFx0XHRlbmNvZGU6IHtcclxuXHRcdFx0XHRleHByZXNzaW9uOiAvJSgyMXwyNHwyN3wyOHwyOXwyQXwyQnwyQ3wzQnwzRHw0MCkvaWcsXHJcblx0XHRcdFx0bWFwOiB7XHJcblx0XHRcdFx0XHQnJTIxJzogJyEnLFxyXG5cdFx0XHRcdFx0JyUyNCc6ICckJyxcclxuXHRcdFx0XHRcdCclMjcnOiAnXFwnJyxcclxuXHRcdFx0XHRcdCclMjgnOiAnKCcsXHJcblx0XHRcdFx0XHQnJTI5JzogJyknLFxyXG5cdFx0XHRcdFx0JyUyQSc6ICcqJyxcclxuXHRcdFx0XHRcdCclMkInOiAnKycsXHJcblx0XHRcdFx0XHQnJTJDJzogJywnLFxyXG5cdFx0XHRcdFx0JyUzQic6ICc7JyxcclxuXHRcdFx0XHRcdCclM0QnOiAnPScsXHJcblx0XHRcdFx0XHQnJTQwJzogJ0AnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBUaGVzZSBjaGFyYWN0ZXJzIGFyZSB0aGUgY2hhcmFjdGVycyBjYWxsZWQgb3V0IGJ5IFJGQzIxNDEgYXMgXCJyZXNlcnZlZFwiIGNoYXJhY3RlcnMgdGhhdFxyXG5cdFx0XHQvLyBzaG91bGQgbmV2ZXIgYXBwZWFyIGluIGEgVVJOLCBwbHVzIHRoZSBjb2xvbiBjaGFyYWN0ZXIgKHNlZSBub3RlIGFib3ZlKS5cclxuXHRcdFx0ZGVjb2RlOiB7XHJcblx0XHRcdFx0ZXhwcmVzc2lvbjogL1tcXC9cXD8jOl0vZyxcclxuXHRcdFx0XHRtYXA6IHtcclxuXHRcdFx0XHRcdCcvJzogJyUyRicsXHJcblx0XHRcdFx0XHQnPyc6ICclM0YnLFxyXG5cdFx0XHRcdFx0JyMnOiAnJTIzJyxcclxuXHRcdFx0XHRcdCc6JzogJyUzQSdcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdFVSSS5lbmNvZGVRdWVyeSA9IGZ1bmN0aW9uKHN0cmluZywgZXNjYXBlUXVlcnlTcGFjZSkge1xyXG5cdFx0dmFyIGVzY2FwZWQgPSBVUkkuZW5jb2RlKHN0cmluZyArICcnKTtcclxuXHRcdGlmIChlc2NhcGVRdWVyeVNwYWNlID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0ZXNjYXBlUXVlcnlTcGFjZSA9IFVSSS5lc2NhcGVRdWVyeVNwYWNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBlc2NhcGVRdWVyeVNwYWNlID8gZXNjYXBlZC5yZXBsYWNlKC8lMjAvZywgJysnKSA6IGVzY2FwZWQ7XHJcblx0fTtcclxuXHRVUkkuZGVjb2RlUXVlcnkgPSBmdW5jdGlvbihzdHJpbmcsIGVzY2FwZVF1ZXJ5U3BhY2UpIHtcclxuXHRcdHN0cmluZyArPSAnJztcclxuXHRcdGlmIChlc2NhcGVRdWVyeVNwYWNlID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0ZXNjYXBlUXVlcnlTcGFjZSA9IFVSSS5lc2NhcGVRdWVyeVNwYWNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdHJldHVybiBVUkkuZGVjb2RlKGVzY2FwZVF1ZXJ5U3BhY2UgPyBzdHJpbmcucmVwbGFjZSgvXFwrL2csICclMjAnKSA6IHN0cmluZyk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0Ly8gd2UncmUgbm90IGdvaW5nIHRvIG1lc3Mgd2l0aCB3ZWlyZCBlbmNvZGluZ3MsXHJcblx0XHRcdC8vIGdpdmUgdXAgYW5kIHJldHVybiB0aGUgdW5kZWNvZGVkIG9yaWdpbmFsIHN0cmluZ1xyXG5cdFx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzg3XHJcblx0XHRcdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvOTJcclxuXHRcdFx0cmV0dXJuIHN0cmluZztcclxuXHRcdH1cclxuXHR9O1xyXG5cdC8vIGdlbmVyYXRlIGVuY29kZS9kZWNvZGUgcGF0aCBmdW5jdGlvbnNcclxuXHR2YXIgX3BhcnRzID0geydlbmNvZGUnOidlbmNvZGUnLCAnZGVjb2RlJzonZGVjb2RlJ307XHJcblx0dmFyIF9wYXJ0O1xyXG5cdHZhciBnZW5lcmF0ZUFjY2Vzc29yID0gZnVuY3Rpb24oX2dyb3VwLCBfcGFydCkge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHJldHVybiBVUklbX3BhcnRdKHN0cmluZyArICcnKS5yZXBsYWNlKFVSSS5jaGFyYWN0ZXJzW19ncm91cF1bX3BhcnRdLmV4cHJlc3Npb24sIGZ1bmN0aW9uKGMpIHtcclxuXHRcdFx0XHRcdHJldHVybiBVUkkuY2hhcmFjdGVyc1tfZ3JvdXBdW19wYXJ0XS5tYXBbY107XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHQvLyB3ZSdyZSBub3QgZ29pbmcgdG8gbWVzcyB3aXRoIHdlaXJkIGVuY29kaW5ncyxcclxuXHRcdFx0XHQvLyBnaXZlIHVwIGFuZCByZXR1cm4gdGhlIHVuZGVjb2RlZCBvcmlnaW5hbCBzdHJpbmdcclxuXHRcdFx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzg3XHJcblx0XHRcdFx0Ly8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy85MlxyXG5cdFx0XHRcdHJldHVybiBzdHJpbmc7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0Zm9yIChfcGFydCBpbiBfcGFydHMpIHtcclxuXHRcdFVSSVtfcGFydCArICdQYXRoU2VnbWVudCddID0gZ2VuZXJhdGVBY2Nlc3NvcigncGF0aG5hbWUnLCBfcGFydHNbX3BhcnRdKTtcclxuXHRcdFVSSVtfcGFydCArICdVcm5QYXRoU2VnbWVudCddID0gZ2VuZXJhdGVBY2Nlc3NvcigndXJucGF0aCcsIF9wYXJ0c1tfcGFydF0pO1xyXG5cdH1cclxuXHJcblx0dmFyIGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uID0gZnVuY3Rpb24oX3NlcCwgX2NvZGluZ0Z1bmNOYW1lLCBfaW5uZXJDb2RpbmdGdW5jTmFtZSkge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xyXG5cdFx0XHQvLyBXaHkgcGFzcyBpbiBuYW1lcyBvZiBmdW5jdGlvbnMsIHJhdGhlciB0aGFuIHRoZSBmdW5jdGlvbiBvYmplY3RzIHRoZW1zZWx2ZXM/IFRoZVxyXG5cdFx0XHQvLyBkZWZpbml0aW9ucyBvZiBzb21lIGZ1bmN0aW9ucyAoYnV0IGluIHBhcnRpY3VsYXIsIFVSSS5kZWNvZGUpIHdpbGwgb2NjYXNpb25hbGx5IGNoYW5nZSBkdWVcclxuXHRcdFx0Ly8gdG8gVVJJLmpzIGhhdmluZyBJU084ODU5IGFuZCBVbmljb2RlIG1vZGVzLiBQYXNzaW5nIGluIHRoZSBuYW1lIGFuZCBnZXR0aW5nIGl0IHdpbGwgZW5zdXJlXHJcblx0XHRcdC8vIHRoYXQgdGhlIGZ1bmN0aW9ucyB3ZSB1c2UgaGVyZSBhcmUgXCJmcmVzaFwiLlxyXG5cdFx0XHR2YXIgYWN0dWFsQ29kaW5nRnVuYztcclxuXHRcdFx0aWYgKCFfaW5uZXJDb2RpbmdGdW5jTmFtZSkge1xyXG5cdFx0XHRcdGFjdHVhbENvZGluZ0Z1bmMgPSBVUklbX2NvZGluZ0Z1bmNOYW1lXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRhY3R1YWxDb2RpbmdGdW5jID0gZnVuY3Rpb24oc3RyaW5nKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gVVJJW19jb2RpbmdGdW5jTmFtZV0oVVJJW19pbm5lckNvZGluZ0Z1bmNOYW1lXShzdHJpbmcpKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgc2VnbWVudHMgPSAoc3RyaW5nICsgJycpLnNwbGl0KF9zZXApO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0c2VnbWVudHNbaV0gPSBhY3R1YWxDb2RpbmdGdW5jKHNlZ21lbnRzW2ldKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNlZ21lbnRzLmpvaW4oX3NlcCk7XHJcblx0XHR9O1xyXG5cdH07XHJcblxyXG5cdC8vIFRoaXMgdGFrZXMgcGxhY2Ugb3V0c2lkZSB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGRvbid0IHdhbnQsIGUuZy4sIGVuY29kZVVyblBhdGggZnVuY3Rpb25zLlxyXG5cdFVSSS5kZWNvZGVQYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oJy8nLCAnZGVjb2RlUGF0aFNlZ21lbnQnKTtcclxuXHRVUkkuZGVjb2RlVXJuUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCc6JywgJ2RlY29kZVVyblBhdGhTZWdtZW50Jyk7XHJcblx0VVJJLnJlY29kZVBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignLycsICdlbmNvZGVQYXRoU2VnbWVudCcsICdkZWNvZGUnKTtcclxuXHRVUkkucmVjb2RlVXJuUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCc6JywgJ2VuY29kZVVyblBhdGhTZWdtZW50JywgJ2RlY29kZScpO1xyXG5cclxuXHRVUkkuZW5jb2RlUmVzZXJ2ZWQgPSBnZW5lcmF0ZUFjY2Vzc29yKCdyZXNlcnZlZCcsICdlbmNvZGUnKTtcclxuXHJcblx0VVJJLnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xyXG5cdFx0dmFyIHBvcztcclxuXHRcdGlmICghcGFydHMpIHtcclxuXHRcdFx0cGFydHMgPSB7fTtcclxuXHRcdH1cclxuXHRcdC8vIFtwcm90b2NvbFwiOi8vXCJbdXNlcm5hbWVbXCI6XCJwYXNzd29yZF1cIkBcIl1ob3N0bmFtZVtcIjpcInBvcnRdXCIvXCI/XVtwYXRoXVtcIj9cInF1ZXJ5c3RyaW5nXVtcIiNcImZyYWdtZW50XVxyXG5cclxuXHRcdC8vIGV4dHJhY3QgZnJhZ21lbnRcclxuXHRcdHBvcyA9IHN0cmluZy5pbmRleE9mKCcjJyk7XHJcblx0XHRpZiAocG9zID4gLTEpIHtcclxuXHRcdFx0Ly8gZXNjYXBpbmc/XHJcblx0XHRcdHBhcnRzLmZyYWdtZW50ID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKSB8fCBudWxsO1xyXG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZXh0cmFjdCBxdWVyeVxyXG5cdFx0cG9zID0gc3RyaW5nLmluZGV4T2YoJz8nKTtcclxuXHRcdGlmIChwb3MgPiAtMSkge1xyXG5cdFx0XHQvLyBlc2NhcGluZz9cclxuXHRcdFx0cGFydHMucXVlcnkgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpIHx8IG51bGw7XHJcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBleHRyYWN0IHByb3RvY29sXHJcblx0XHRpZiAoc3RyaW5nLnN1YnN0cmluZygwLCAyKSA9PT0gJy8vJykge1xyXG5cdFx0XHQvLyByZWxhdGl2ZS1zY2hlbWVcclxuXHRcdFx0cGFydHMucHJvdG9jb2wgPSBudWxsO1xyXG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDIpO1xyXG5cdFx0XHQvLyBleHRyYWN0IFwidXNlcjpwYXNzQGhvc3Q6cG9ydFwiXHJcblx0XHRcdHN0cmluZyA9IFVSSS5wYXJzZUF1dGhvcml0eShzdHJpbmcsIHBhcnRzKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHBvcyA9IHN0cmluZy5pbmRleE9mKCc6Jyk7XHJcblx0XHRcdGlmIChwb3MgPiAtMSkge1xyXG5cdFx0XHRcdHBhcnRzLnByb3RvY29sID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpIHx8IG51bGw7XHJcblx0XHRcdFx0aWYgKHBhcnRzLnByb3RvY29sICYmICFwYXJ0cy5wcm90b2NvbC5tYXRjaChVUkkucHJvdG9jb2xfZXhwcmVzc2lvbikpIHtcclxuXHRcdFx0XHRcdC8vIDogbWF5IGJlIHdpdGhpbiB0aGUgcGF0aFxyXG5cdFx0XHRcdFx0cGFydHMucHJvdG9jb2wgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEsIHBvcyArIDMpID09PSAnLy8nKSB7XHJcblx0XHRcdFx0XHRzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDMpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGV4dHJhY3QgXCJ1c2VyOnBhc3NAaG9zdDpwb3J0XCJcclxuXHRcdFx0XHRcdHN0cmluZyA9IFVSSS5wYXJzZUF1dGhvcml0eShzdHJpbmcsIHBhcnRzKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTtcclxuXHRcdFx0XHRcdHBhcnRzLnVybiA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gd2hhdCdzIGxlZnQgbXVzdCBiZSB0aGUgcGF0aFxyXG5cdFx0cGFydHMucGF0aCA9IHN0cmluZztcclxuXHJcblx0XHQvLyBhbmQgd2UncmUgZG9uZVxyXG5cdFx0cmV0dXJuIHBhcnRzO1xyXG5cdH07XHJcblx0VVJJLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcclxuXHRcdC8vIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLlxyXG5cdFx0Ly8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXHJcblx0XHQvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9ibG9iLzM4NmZkMjRmNDliMGU5ZDFhOGEwNzY1OTJhNDA0MTY4ZmFlZWNjMzQvbGliL3VybC5qcyNMMTE1LUwxMjRcclxuXHRcdC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XHJcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9wdWxsLzIzM1xyXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcclxuXHJcblx0XHQvLyBleHRyYWN0IGhvc3Q6cG9ydFxyXG5cdFx0dmFyIHBvcyA9IHN0cmluZy5pbmRleE9mKCcvJyk7XHJcblx0XHR2YXIgYnJhY2tldFBvcztcclxuXHRcdHZhciB0O1xyXG5cclxuXHRcdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRcdHBvcyA9IHN0cmluZy5sZW5ndGg7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHN0cmluZy5jaGFyQXQoMCkgPT09ICdbJykge1xyXG5cdFx0XHQvLyBJUHY2IGhvc3QgLSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLTZtYW4tdGV4dC1hZGRyLXJlcHJlc2VudGF0aW9uLTA0I3NlY3Rpb24tNlxyXG5cdFx0XHQvLyBJIGNsYWltIG1vc3QgY2xpZW50IHNvZnR3YXJlIGJyZWFrcyBvbiBJUHY2IGFueXdheXMuIFRvIHNpbXBsaWZ5IHRoaW5ncywgVVJJIG9ubHkgYWNjZXB0c1xyXG5cdFx0XHQvLyBJUHY2K3BvcnQgaW4gdGhlIGZvcm1hdCBbMjAwMTpkYjg6OjFdOjgwIChmb3IgdGhlIHRpbWUgYmVpbmcpXHJcblx0XHRcdGJyYWNrZXRQb3MgPSBzdHJpbmcuaW5kZXhPZignXScpO1xyXG5cdFx0XHRwYXJ0cy5ob3N0bmFtZSA9IHN0cmluZy5zdWJzdHJpbmcoMSwgYnJhY2tldFBvcykgfHwgbnVsbDtcclxuXHRcdFx0cGFydHMucG9ydCA9IHN0cmluZy5zdWJzdHJpbmcoYnJhY2tldFBvcyArIDIsIHBvcykgfHwgbnVsbDtcclxuXHRcdFx0aWYgKHBhcnRzLnBvcnQgPT09ICcvJykge1xyXG5cdFx0XHRcdHBhcnRzLnBvcnQgPSBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgZmlyc3RDb2xvbiA9IHN0cmluZy5pbmRleE9mKCc6Jyk7XHJcblx0XHRcdHZhciBmaXJzdFNsYXNoID0gc3RyaW5nLmluZGV4T2YoJy8nKTtcclxuXHRcdFx0dmFyIG5leHRDb2xvbiA9IHN0cmluZy5pbmRleE9mKCc6JywgZmlyc3RDb2xvbiArIDEpO1xyXG5cdFx0XHRpZiAobmV4dENvbG9uICE9PSAtMSAmJiAoZmlyc3RTbGFzaCA9PT0gLTEgfHwgbmV4dENvbG9uIDwgZmlyc3RTbGFzaCkpIHtcclxuXHRcdFx0XHQvLyBJUHY2IGhvc3QgY29udGFpbnMgbXVsdGlwbGUgY29sb25zIC0gYnV0IG5vIHBvcnRcclxuXHRcdFx0XHQvLyB0aGlzIG5vdGF0aW9uIGlzIGFjdHVhbGx5IG5vdCBhbGxvd2VkIGJ5IFJGQyAzOTg2LCBidXQgd2UncmUgYSBsaWJlcmFsIHBhcnNlclxyXG5cdFx0XHRcdHBhcnRzLmhvc3RuYW1lID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpIHx8IG51bGw7XHJcblx0XHRcdFx0cGFydHMucG9ydCA9IG51bGw7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKS5zcGxpdCgnOicpO1xyXG5cdFx0XHRcdHBhcnRzLmhvc3RuYW1lID0gdFswXSB8fCBudWxsO1xyXG5cdFx0XHRcdHBhcnRzLnBvcnQgPSB0WzFdIHx8IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocGFydHMuaG9zdG5hbWUgJiYgc3RyaW5nLnN1YnN0cmluZyhwb3MpLmNoYXJBdCgwKSAhPT0gJy8nKSB7XHJcblx0XHRcdHBvcysrO1xyXG5cdFx0XHRzdHJpbmcgPSAnLycgKyBzdHJpbmc7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHN0cmluZy5zdWJzdHJpbmcocG9zKSB8fCAnLyc7XHJcblx0fTtcclxuXHRVUkkucGFyc2VBdXRob3JpdHkgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XHJcblx0XHRzdHJpbmcgPSBVUkkucGFyc2VVc2VyaW5mbyhzdHJpbmcsIHBhcnRzKTtcclxuXHRcdHJldHVybiBVUkkucGFyc2VIb3N0KHN0cmluZywgcGFydHMpO1xyXG5cdH07XHJcblx0VVJJLnBhcnNlVXNlcmluZm8gPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XHJcblx0XHQvLyBleHRyYWN0IHVzZXJuYW1lOnBhc3N3b3JkXHJcblx0XHR2YXIgZmlyc3RTbGFzaCA9IHN0cmluZy5pbmRleE9mKCcvJyk7XHJcblx0XHR2YXIgcG9zID0gc3RyaW5nLmxhc3RJbmRleE9mKCdAJywgZmlyc3RTbGFzaCA+IC0xID8gZmlyc3RTbGFzaCA6IHN0cmluZy5sZW5ndGggLSAxKTtcclxuXHRcdHZhciB0O1xyXG5cclxuXHRcdC8vIGF1dGhvcml0eUAgbXVzdCBjb21lIGJlZm9yZSAvcGF0aFxyXG5cdFx0aWYgKHBvcyA+IC0xICYmIChmaXJzdFNsYXNoID09PSAtMSB8fCBwb3MgPCBmaXJzdFNsYXNoKSkge1xyXG5cdFx0XHR0ID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpLnNwbGl0KCc6Jyk7XHJcblx0XHRcdHBhcnRzLnVzZXJuYW1lID0gdFswXSA/IFVSSS5kZWNvZGUodFswXSkgOiBudWxsO1xyXG5cdFx0XHR0LnNoaWZ0KCk7XHJcblx0XHRcdHBhcnRzLnBhc3N3b3JkID0gdFswXSA/IFVSSS5kZWNvZGUodC5qb2luKCc6JykpIDogbnVsbDtcclxuXHRcdFx0c3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHBhcnRzLnVzZXJuYW1lID0gbnVsbDtcclxuXHRcdFx0cGFydHMucGFzc3dvcmQgPSBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBzdHJpbmc7XHJcblx0fTtcclxuXHRVUkkucGFyc2VRdWVyeSA9IGZ1bmN0aW9uKHN0cmluZywgZXNjYXBlUXVlcnlTcGFjZSkge1xyXG5cdFx0aWYgKCFzdHJpbmcpIHtcclxuXHRcdFx0cmV0dXJuIHt9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHRocm93IG91dCB0aGUgZnVua3kgYnVzaW5lc3MgLSBcIj9cIltuYW1lXCI9XCJ2YWx1ZVwiJlwiXStcclxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC8mKy9nLCAnJicpLnJlcGxhY2UoL15cXD8qJip8JiskL2csICcnKTtcclxuXHJcblx0XHRpZiAoIXN0cmluZykge1xyXG5cdFx0XHRyZXR1cm4ge307XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGl0ZW1zID0ge307XHJcblx0XHR2YXIgc3BsaXRzID0gc3RyaW5nLnNwbGl0KCcmJyk7XHJcblx0XHR2YXIgbGVuZ3RoID0gc3BsaXRzLmxlbmd0aDtcclxuXHRcdHZhciB2LCBuYW1lLCB2YWx1ZTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHYgPSBzcGxpdHNbaV0uc3BsaXQoJz0nKTtcclxuXHRcdFx0bmFtZSA9IFVSSS5kZWNvZGVRdWVyeSh2LnNoaWZ0KCksIGVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0XHQvLyBubyBcIj1cIiBpcyBudWxsIGFjY29yZGluZyB0byBodHRwOi8vZHZjcy53My5vcmcvaGcvdXJsL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcclxuXHRcdFx0dmFsdWUgPSB2Lmxlbmd0aCA/IFVSSS5kZWNvZGVRdWVyeSh2LmpvaW4oJz0nKSwgZXNjYXBlUXVlcnlTcGFjZSkgOiBudWxsO1xyXG5cclxuXHRcdFx0aWYgKGhhc093bi5jYWxsKGl0ZW1zLCBuYW1lKSkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgaXRlbXNbbmFtZV0gPT09ICdzdHJpbmcnIHx8IGl0ZW1zW25hbWVdID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHRpdGVtc1tuYW1lXSA9IFtpdGVtc1tuYW1lXV07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpdGVtc1tuYW1lXS5wdXNoKHZhbHVlKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpdGVtc1tuYW1lXSA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGl0ZW1zO1xyXG5cdH07XHJcblxyXG5cdFVSSS5idWlsZCA9IGZ1bmN0aW9uKHBhcnRzKSB7XHJcblx0XHR2YXIgdCA9ICcnO1xyXG5cclxuXHRcdGlmIChwYXJ0cy5wcm90b2NvbCkge1xyXG5cdFx0XHR0ICs9IHBhcnRzLnByb3RvY29sICsgJzonO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghcGFydHMudXJuICYmICh0IHx8IHBhcnRzLmhvc3RuYW1lKSkge1xyXG5cdFx0XHR0ICs9ICcvLyc7XHJcblx0XHR9XHJcblxyXG5cdFx0dCArPSAoVVJJLmJ1aWxkQXV0aG9yaXR5KHBhcnRzKSB8fCAnJyk7XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBwYXJ0cy5wYXRoID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRpZiAocGFydHMucGF0aC5jaGFyQXQoMCkgIT09ICcvJyAmJiB0eXBlb2YgcGFydHMuaG9zdG5hbWUgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0dCArPSAnLyc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHQgKz0gcGFydHMucGF0aDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodHlwZW9mIHBhcnRzLnF1ZXJ5ID09PSAnc3RyaW5nJyAmJiBwYXJ0cy5xdWVyeSkge1xyXG5cdFx0XHR0ICs9ICc/JyArIHBhcnRzLnF1ZXJ5O1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0eXBlb2YgcGFydHMuZnJhZ21lbnQgPT09ICdzdHJpbmcnICYmIHBhcnRzLmZyYWdtZW50KSB7XHJcblx0XHRcdHQgKz0gJyMnICsgcGFydHMuZnJhZ21lbnQ7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdDtcclxuXHR9O1xyXG5cdFVSSS5idWlsZEhvc3QgPSBmdW5jdGlvbihwYXJ0cykge1xyXG5cdFx0dmFyIHQgPSAnJztcclxuXHJcblx0XHRpZiAoIXBhcnRzLmhvc3RuYW1lKSB7XHJcblx0XHRcdHJldHVybiAnJztcclxuXHRcdH0gZWxzZSBpZiAoVVJJLmlwNl9leHByZXNzaW9uLnRlc3QocGFydHMuaG9zdG5hbWUpKSB7XHJcblx0XHRcdHQgKz0gJ1snICsgcGFydHMuaG9zdG5hbWUgKyAnXSc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0ICs9IHBhcnRzLmhvc3RuYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChwYXJ0cy5wb3J0KSB7XHJcblx0XHRcdHQgKz0gJzonICsgcGFydHMucG9ydDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdDtcclxuXHR9O1xyXG5cdFVSSS5idWlsZEF1dGhvcml0eSA9IGZ1bmN0aW9uKHBhcnRzKSB7XHJcblx0XHRyZXR1cm4gVVJJLmJ1aWxkVXNlcmluZm8ocGFydHMpICsgVVJJLmJ1aWxkSG9zdChwYXJ0cyk7XHJcblx0fTtcclxuXHRVUkkuYnVpbGRVc2VyaW5mbyA9IGZ1bmN0aW9uKHBhcnRzKSB7XHJcblx0XHR2YXIgdCA9ICcnO1xyXG5cclxuXHRcdGlmIChwYXJ0cy51c2VybmFtZSkge1xyXG5cdFx0XHR0ICs9IFVSSS5lbmNvZGUocGFydHMudXNlcm5hbWUpO1xyXG5cclxuXHRcdFx0aWYgKHBhcnRzLnBhc3N3b3JkKSB7XHJcblx0XHRcdFx0dCArPSAnOicgKyBVUkkuZW5jb2RlKHBhcnRzLnBhc3N3b3JkKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dCArPSAnQCc7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHQ7XHJcblx0fTtcclxuXHRVUkkuYnVpbGRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgZXNjYXBlUXVlcnlTcGFjZSkge1xyXG5cdFx0Ly8gYWNjb3JkaW5nIHRvIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYgb3IgaHR0cDovL2xhYnMuYXBhY2hlLm9yZy93ZWJhcmNoL3VyaS9yZmMvcmZjMzk4Ni5odG1sXHJcblx0XHQvLyBiZWluZyDCuy0uX34hJCYnKCkqKyw7PTpALz/CqyAlSEVYIGFuZCBhbG51bSBhcmUgYWxsb3dlZFxyXG5cdFx0Ly8gdGhlIFJGQyBleHBsaWNpdGx5IHN0YXRlcyA/L2ZvbyBiZWluZyBhIHZhbGlkIHVzZSBjYXNlLCBubyBtZW50aW9uIG9mIHBhcmFtZXRlciBzeW50YXghXHJcblx0XHQvLyBVUkkuanMgdHJlYXRzIHRoZSBxdWVyeSBzdHJpbmcgYXMgYmVpbmcgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXHJcblx0XHQvLyBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MC9pbnRlcmFjdC9mb3Jtcy5odG1sI2Zvcm0tY29udGVudC10eXBlXHJcblxyXG5cdFx0dmFyIHQgPSAnJztcclxuXHRcdHZhciB1bmlxdWUsIGtleSwgaSwgbGVuZ3RoO1xyXG5cdFx0Zm9yIChrZXkgaW4gZGF0YSkge1xyXG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoZGF0YSwga2V5KSAmJiBrZXkpIHtcclxuXHRcdFx0XHRpZiAoaXNBcnJheShkYXRhW2tleV0pKSB7XHJcblx0XHRcdFx0XHR1bmlxdWUgPSB7fTtcclxuXHRcdFx0XHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGFba2V5XS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0XHRpZiAoZGF0YVtrZXldW2ldICE9PSB1bmRlZmluZWQgJiYgdW5pcXVlW2RhdGFba2V5XVtpXSArICcnXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRcdFx0dCArPSAnJicgKyBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlcihrZXksIGRhdGFba2V5XVtpXSwgZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyAhPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlW2RhdGFba2V5XVtpXSArICcnXSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0dCArPSAnJicgKyBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlcihrZXksIGRhdGFba2V5XSwgZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHQuc3Vic3RyaW5nKDEpO1xyXG5cdH07XHJcblx0VVJJLmJ1aWxkUXVlcnlQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgZXNjYXBlUXVlcnlTcGFjZSkge1xyXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MC9pbnRlcmFjdC9mb3Jtcy5odG1sI2Zvcm0tY29udGVudC10eXBlIC0tIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxyXG5cdFx0Ly8gZG9uJ3QgYXBwZW5kIFwiPVwiIGZvciBudWxsIHZhbHVlcywgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjdXJsLXBhcmFtZXRlci1zZXJpYWxpemF0aW9uXHJcblx0XHRyZXR1cm4gVVJJLmVuY29kZVF1ZXJ5KG5hbWUsIGVzY2FwZVF1ZXJ5U3BhY2UpICsgKHZhbHVlICE9PSBudWxsID8gJz0nICsgVVJJLmVuY29kZVF1ZXJ5KHZhbHVlLCBlc2NhcGVRdWVyeVNwYWNlKSA6ICcnKTtcclxuXHR9O1xyXG5cclxuXHRVUkkuYWRkUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkge1xyXG5cdFx0aWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xyXG5cdFx0XHRcdGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XHJcblx0XHRcdFx0XHRVUkkuYWRkUXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0aWYgKGRhdGFbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdGRhdGFbbmFtZV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGRhdGFbbmFtZV0gPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0ZGF0YVtuYW1lXSA9IFtkYXRhW25hbWVdXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCFpc0FycmF5KHZhbHVlKSkge1xyXG5cdFx0XHRcdHZhbHVlID0gW3ZhbHVlXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGF0YVtuYW1lXSA9IChkYXRhW25hbWVdIHx8IFtdKS5jb25jYXQodmFsdWUpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmFkZFF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZyBhcyB0aGUgbmFtZSBwYXJhbWV0ZXInKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdFVSSS5yZW1vdmVRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlKSB7XHJcblx0XHR2YXIgaSwgbGVuZ3RoLCBrZXk7XHJcblxyXG5cdFx0aWYgKGlzQXJyYXkobmFtZSkpIHtcclxuXHRcdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gbmFtZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdGRhdGFbbmFtZVtpXV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAoZ2V0VHlwZShuYW1lKSA9PT0gJ1JlZ0V4cCcpIHtcclxuXHRcdFx0Zm9yIChrZXkgaW4gZGF0YSkge1xyXG5cdFx0XHRcdGlmIChuYW1lLnRlc3Qoa2V5KSkge1xyXG5cdFx0XHRcdFx0ZGF0YVtrZXldID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0Zm9yIChrZXkgaW4gbmFtZSkge1xyXG5cdFx0XHRcdGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XHJcblx0XHRcdFx0XHRVUkkucmVtb3ZlUXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRpZiAoZ2V0VHlwZSh2YWx1ZSkgPT09ICdSZWdFeHAnKSB7XHJcblx0XHRcdFx0XHRpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkgJiYgdmFsdWUudGVzdChkYXRhW25hbWVdKSkge1xyXG5cdFx0XHRcdFx0XHRkYXRhW25hbWVdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0ZGF0YVtuYW1lXSA9IGZpbHRlckFycmF5VmFsdWVzKGRhdGFbbmFtZV0sIHZhbHVlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKGRhdGFbbmFtZV0gPT09IFN0cmluZyh2YWx1ZSkgJiYgKCFpc0FycmF5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPT09IDEpKSB7XHJcblx0XHRcdFx0XHRkYXRhW25hbWVdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNBcnJheShkYXRhW25hbWVdKSkge1xyXG5cdFx0XHRcdFx0ZGF0YVtuYW1lXSA9IGZpbHRlckFycmF5VmFsdWVzKGRhdGFbbmFtZV0sIHZhbHVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGF0YVtuYW1lXSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLnJlbW92ZVF1ZXJ5KCkgYWNjZXB0cyBhbiBvYmplY3QsIHN0cmluZywgUmVnRXhwIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXInKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdFVSSS5oYXNRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkge1xyXG5cdFx0aWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xyXG5cdFx0XHRcdGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XHJcblx0XHRcdFx0XHRpZiAoIVVSSS5oYXNRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSkpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xyXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuaGFzUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHN3aXRjaCAoZ2V0VHlwZSh2YWx1ZSkpIHtcclxuXHRcdFx0Y2FzZSAnVW5kZWZpbmVkJzpcclxuXHRcdFx0XHQvLyB0cnVlIGlmIGV4aXN0cyAoYnV0IG1heSBiZSBlbXB0eSlcclxuXHRcdFx0XHRyZXR1cm4gbmFtZSBpbiBkYXRhOyAvLyBkYXRhW25hbWVdICE9PSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHRjYXNlICdCb29sZWFuJzpcclxuXHRcdFx0XHQvLyB0cnVlIGlmIGV4aXN0cyBhbmQgbm9uLWVtcHR5XHJcblx0XHRcdFx0dmFyIF9ib29seSA9IEJvb2xlYW4oaXNBcnJheShkYXRhW25hbWVdKSA/IGRhdGFbbmFtZV0ubGVuZ3RoIDogZGF0YVtuYW1lXSk7XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBfYm9vbHk7XHJcblxyXG5cdFx0XHRjYXNlICdGdW5jdGlvbic6XHJcblx0XHRcdFx0Ly8gYWxsb3cgY29tcGxleCBjb21wYXJpc29uXHJcblx0XHRcdFx0cmV0dXJuICEhdmFsdWUoZGF0YVtuYW1lXSwgbmFtZSwgZGF0YSk7XHJcblxyXG5cdFx0XHRjYXNlICdBcnJheSc6XHJcblx0XHRcdFx0aWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgb3AgPSB3aXRoaW5BcnJheSA/IGFycmF5Q29udGFpbnMgOiBhcnJheXNFcXVhbDtcclxuXHRcdFx0XHRyZXR1cm4gb3AoZGF0YVtuYW1lXSwgdmFsdWUpO1xyXG5cclxuXHRcdFx0Y2FzZSAnUmVnRXhwJzpcclxuXHRcdFx0XHRpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBCb29sZWFuKGRhdGFbbmFtZV0gJiYgZGF0YVtuYW1lXS5tYXRjaCh2YWx1ZSkpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCF3aXRoaW5BcnJheSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGFycmF5Q29udGFpbnMoZGF0YVtuYW1lXSwgdmFsdWUpO1xyXG5cclxuXHRcdFx0Y2FzZSAnTnVtYmVyJzpcclxuXHRcdFx0XHR2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XHJcblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cclxuXHRcdFx0Y2FzZSAnU3RyaW5nJzpcclxuXHRcdFx0XHRpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhW25hbWVdID09PSB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICghd2l0aGluQXJyYXkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBhcnJheUNvbnRhaW5zKGRhdGFbbmFtZV0sIHZhbHVlKTtcclxuXHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyB1bmRlZmluZWQsIGJvb2xlYW4sIHN0cmluZywgbnVtYmVyLCBSZWdFeHAsIEZ1bmN0aW9uIGFzIHRoZSB2YWx1ZSBwYXJhbWV0ZXInKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHJcblx0VVJJLmNvbW1vblBhdGggPSBmdW5jdGlvbihvbmUsIHR3bykge1xyXG5cdFx0dmFyIGxlbmd0aCA9IE1hdGgubWluKG9uZS5sZW5ndGgsIHR3by5sZW5ndGgpO1xyXG5cdFx0dmFyIHBvcztcclxuXHJcblx0XHQvLyBmaW5kIGZpcnN0IG5vbi1tYXRjaGluZyBjaGFyYWN0ZXJcclxuXHRcdGZvciAocG9zID0gMDsgcG9zIDwgbGVuZ3RoOyBwb3MrKykge1xyXG5cdFx0XHRpZiAob25lLmNoYXJBdChwb3MpICE9PSB0d28uY2hhckF0KHBvcykpIHtcclxuXHRcdFx0XHRwb3MtLTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChwb3MgPCAxKSB7XHJcblx0XHRcdHJldHVybiBvbmUuY2hhckF0KDApID09PSB0d28uY2hhckF0KDApICYmIG9uZS5jaGFyQXQoMCkgPT09ICcvJyA/ICcvJyA6ICcnO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHJldmVydCB0byBsYXN0IC9cclxuXHRcdGlmIChvbmUuY2hhckF0KHBvcykgIT09ICcvJyB8fCB0d28uY2hhckF0KHBvcykgIT09ICcvJykge1xyXG5cdFx0XHRwb3MgPSBvbmUuc3Vic3RyaW5nKDAsIHBvcykubGFzdEluZGV4T2YoJy8nKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb25lLnN1YnN0cmluZygwLCBwb3MgKyAxKTtcclxuXHR9O1xyXG5cclxuXHRVUkkud2l0aGluU3RyaW5nID0gZnVuY3Rpb24oc3RyaW5nLCBjYWxsYmFjaywgb3B0aW9ucykge1xyXG5cdFx0b3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcclxuXHRcdHZhciBfc3RhcnQgPSBvcHRpb25zLnN0YXJ0IHx8IFVSSS5maW5kVXJpLnN0YXJ0O1xyXG5cdFx0dmFyIF9lbmQgPSBvcHRpb25zLmVuZCB8fCBVUkkuZmluZFVyaS5lbmQ7XHJcblx0XHR2YXIgX3RyaW0gPSBvcHRpb25zLnRyaW0gfHwgVVJJLmZpbmRVcmkudHJpbTtcclxuXHRcdHZhciBfYXR0cmlidXRlT3BlbiA9IC9bYS16MC05LV09W1wiJ10/JC9pO1xyXG5cclxuXHRcdF9zdGFydC5sYXN0SW5kZXggPSAwO1xyXG5cdFx0d2hpbGUgKHRydWUpIHtcclxuXHRcdFx0dmFyIG1hdGNoID0gX3N0YXJ0LmV4ZWMoc3RyaW5nKTtcclxuXHRcdFx0aWYgKCFtYXRjaCkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgc3RhcnQgPSBtYXRjaC5pbmRleDtcclxuXHRcdFx0aWYgKG9wdGlvbnMuaWdub3JlSHRtbCkge1xyXG5cdFx0XHRcdC8vIGF0dHJpYnV0KGU9W1wiJ10/JClcclxuXHRcdFx0XHR2YXIgYXR0cmlidXRlT3BlbiA9IHN0cmluZy5zbGljZShNYXRoLm1heChzdGFydCAtIDMsIDApLCBzdGFydCk7XHJcblx0XHRcdFx0aWYgKGF0dHJpYnV0ZU9wZW4gJiYgX2F0dHJpYnV0ZU9wZW4udGVzdChhdHRyaWJ1dGVPcGVuKSkge1xyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZW5kID0gc3RhcnQgKyBzdHJpbmcuc2xpY2Uoc3RhcnQpLnNlYXJjaChfZW5kKTtcclxuXHRcdFx0dmFyIHNsaWNlID0gc3RyaW5nLnNsaWNlKHN0YXJ0LCBlbmQpLnJlcGxhY2UoX3RyaW0sICcnKTtcclxuXHRcdFx0aWYgKG9wdGlvbnMuaWdub3JlICYmIG9wdGlvbnMuaWdub3JlLnRlc3Qoc2xpY2UpKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGVuZCA9IHN0YXJ0ICsgc2xpY2UubGVuZ3RoO1xyXG5cdFx0XHR2YXIgcmVzdWx0ID0gY2FsbGJhY2soc2xpY2UsIHN0YXJ0LCBlbmQsIHN0cmluZyk7XHJcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBzdGFydCkgKyByZXN1bHQgKyBzdHJpbmcuc2xpY2UoZW5kKTtcclxuXHRcdFx0X3N0YXJ0Lmxhc3RJbmRleCA9IHN0YXJ0ICsgcmVzdWx0Lmxlbmd0aDtcclxuXHRcdH1cclxuXHJcblx0XHRfc3RhcnQubGFzdEluZGV4ID0gMDtcclxuXHRcdHJldHVybiBzdHJpbmc7XHJcblx0fTtcclxuXHJcblx0VVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUgPSBmdW5jdGlvbih2KSB7XHJcblx0XHQvLyBUaGVvcmV0aWNhbGx5IFVSSXMgYWxsb3cgcGVyY2VudC1lbmNvZGluZyBpbiBIb3N0bmFtZXMgKGFjY29yZGluZyB0byBSRkMgMzk4NilcclxuXHRcdC8vIHRoZXkgYXJlIG5vdCBwYXJ0IG9mIEROUyBhbmQgdGhlcmVmb3JlIGlnbm9yZWQgYnkgVVJJLmpzXHJcblxyXG5cdFx0aWYgKHYubWF0Y2goVVJJLmludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycykpIHtcclxuXHRcdFx0Ly8gdGVzdCBwdW55Y29kZVxyXG5cdFx0XHRpZiAoIXB1bnljb2RlKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXSBhbmQgUHVueWNvZGUuanMgaXMgbm90IGF2YWlsYWJsZScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAocHVueWNvZGUudG9BU0NJSSh2KS5tYXRjaChVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzKSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIG5vQ29uZmxpY3RcclxuXHRVUkkubm9Db25mbGljdCA9IGZ1bmN0aW9uKHJlbW92ZUFsbCkge1xyXG5cdFx0aWYgKHJlbW92ZUFsbCkge1xyXG5cdFx0XHR2YXIgdW5jb25mbGljdGVkID0ge1xyXG5cdFx0XHRcdFVSSTogdGhpcy5ub0NvbmZsaWN0KClcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGlmIChyb290LlVSSVRlbXBsYXRlICYmIHR5cGVvZiByb290LlVSSVRlbXBsYXRlLm5vQ29uZmxpY3QgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHR1bmNvbmZsaWN0ZWQuVVJJVGVtcGxhdGUgPSByb290LlVSSVRlbXBsYXRlLm5vQ29uZmxpY3QoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHJvb3QuSVB2NiAmJiB0eXBlb2Ygcm9vdC5JUHY2Lm5vQ29uZmxpY3QgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHR1bmNvbmZsaWN0ZWQuSVB2NiA9IHJvb3QuSVB2Ni5ub0NvbmZsaWN0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChyb290LlNlY29uZExldmVsRG9tYWlucyAmJiB0eXBlb2Ygcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMubm9Db25mbGljdCA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdHVuY29uZmxpY3RlZC5TZWNvbmRMZXZlbERvbWFpbnMgPSByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB1bmNvbmZsaWN0ZWQ7XHJcblx0XHR9IGVsc2UgaWYgKHJvb3QuVVJJID09PSB0aGlzKSB7XHJcblx0XHRcdHJvb3QuVVJJID0gX1VSSTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHRwLmJ1aWxkID0gZnVuY3Rpb24oZGVmZXJCdWlsZCkge1xyXG5cdFx0aWYgKGRlZmVyQnVpbGQgPT09IHRydWUpIHtcclxuXHRcdFx0dGhpcy5fZGVmZXJyZWRfYnVpbGQgPSB0cnVlO1xyXG5cdFx0fSBlbHNlIGlmIChkZWZlckJ1aWxkID09PSB1bmRlZmluZWQgfHwgdGhpcy5fZGVmZXJyZWRfYnVpbGQpIHtcclxuXHRcdFx0dGhpcy5fc3RyaW5nID0gVVJJLmJ1aWxkKHRoaXMuX3BhcnRzKTtcclxuXHRcdFx0dGhpcy5fZGVmZXJyZWRfYnVpbGQgPSBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHRwLmNsb25lID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gbmV3IFVSSSh0aGlzKTtcclxuXHR9O1xyXG5cclxuXHRwLnZhbHVlT2YgPSBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5idWlsZChmYWxzZSkuX3N0cmluZztcclxuXHR9O1xyXG5cclxuXHJcblx0ZnVuY3Rpb24gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcihfcGFydCl7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLl9wYXJ0c1tfcGFydF0gfHwgJyc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5fcGFydHNbX3BhcnRdID0gdiB8fCBudWxsO1xyXG5cdFx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoX3BhcnQsIF9rZXkpe1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRcdGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcGFydHNbX3BhcnRdIHx8ICcnO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmICh2ICE9PSBudWxsKSB7XHJcblx0XHRcdFx0XHR2ID0gdiArICcnO1xyXG5cdFx0XHRcdFx0aWYgKHYuY2hhckF0KDApID09PSBfa2V5KSB7XHJcblx0XHRcdFx0XHRcdHYgPSB2LnN1YnN0cmluZygxKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRoaXMuX3BhcnRzW19wYXJ0XSA9IHY7XHJcblx0XHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0cC5wcm90b2NvbCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3Byb3RvY29sJyk7XHJcblx0cC51c2VybmFtZSA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3VzZXJuYW1lJyk7XHJcblx0cC5wYXNzd29yZCA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3Bhc3N3b3JkJyk7XHJcblx0cC5ob3N0bmFtZSA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ2hvc3RuYW1lJyk7XHJcblx0cC5wb3J0ID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncG9ydCcpO1xyXG5cdHAucXVlcnkgPSBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKCdxdWVyeScsICc/Jyk7XHJcblx0cC5mcmFnbWVudCA9IGdlbmVyYXRlUHJlZml4QWNjZXNzb3IoJ2ZyYWdtZW50JywgJyMnKTtcclxuXHJcblx0cC5zZWFyY2ggPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0dmFyIHQgPSB0aGlzLnF1ZXJ5KHYsIGJ1aWxkKTtcclxuXHRcdHJldHVybiB0eXBlb2YgdCA9PT0gJ3N0cmluZycgJiYgdC5sZW5ndGggPyAoJz8nICsgdCkgOiB0O1xyXG5cdH07XHJcblx0cC5oYXNoID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdHZhciB0ID0gdGhpcy5mcmFnbWVudCh2LCBidWlsZCk7XHJcblx0XHRyZXR1cm4gdHlwZW9mIHQgPT09ICdzdHJpbmcnICYmIHQubGVuZ3RoID8gKCcjJyArIHQpIDogdDtcclxuXHR9O1xyXG5cclxuXHRwLnBhdGhuYW1lID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHR2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aCB8fCAodGhpcy5fcGFydHMuaG9zdG5hbWUgPyAnLycgOiAnJyk7XHJcblx0XHRcdHJldHVybiB2ID8gKHRoaXMuX3BhcnRzLnVybiA/IFVSSS5kZWNvZGVVcm5QYXRoIDogVVJJLmRlY29kZVBhdGgpKHJlcykgOiByZXM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdFx0dGhpcy5fcGFydHMucGF0aCA9IHYgPyBVUkkucmVjb2RlVXJuUGF0aCh2KSA6ICcnO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuX3BhcnRzLnBhdGggPSB2ID8gVVJJLnJlY29kZVBhdGgodikgOiAnLyc7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHR9O1xyXG5cdHAucGF0aCA9IHAucGF0aG5hbWU7XHJcblx0cC5ocmVmID0gZnVuY3Rpb24oaHJlZiwgYnVpbGQpIHtcclxuXHRcdHZhciBrZXk7XHJcblxyXG5cdFx0aWYgKGhyZWYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy50b1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3N0cmluZyA9ICcnO1xyXG5cdFx0dGhpcy5fcGFydHMgPSBVUkkuX3BhcnRzKCk7XHJcblxyXG5cdFx0dmFyIF9VUkkgPSBocmVmIGluc3RhbmNlb2YgVVJJO1xyXG5cdFx0dmFyIF9vYmplY3QgPSB0eXBlb2YgaHJlZiA9PT0gJ29iamVjdCcgJiYgKGhyZWYuaG9zdG5hbWUgfHwgaHJlZi5wYXRoIHx8IGhyZWYucGF0aG5hbWUpO1xyXG5cdFx0aWYgKGhyZWYubm9kZU5hbWUpIHtcclxuXHRcdFx0dmFyIGF0dHJpYnV0ZSA9IFVSSS5nZXREb21BdHRyaWJ1dGUoaHJlZik7XHJcblx0XHRcdGhyZWYgPSBocmVmW2F0dHJpYnV0ZV0gfHwgJyc7XHJcblx0XHRcdF9vYmplY3QgPSBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyB3aW5kb3cubG9jYXRpb24gaXMgcmVwb3J0ZWQgdG8gYmUgYW4gb2JqZWN0LCBidXQgaXQncyBub3QgdGhlIHNvcnRcclxuXHRcdC8vIG9mIG9iamVjdCB3ZSdyZSBsb29raW5nIGZvcjpcclxuXHRcdC8vICogbG9jYXRpb24ucHJvdG9jb2wgZW5kcyB3aXRoIGEgY29sb25cclxuXHRcdC8vICogbG9jYXRpb24ucXVlcnkgIT0gb2JqZWN0LnNlYXJjaFxyXG5cdFx0Ly8gKiBsb2NhdGlvbi5oYXNoICE9IG9iamVjdC5mcmFnbWVudFxyXG5cdFx0Ly8gc2ltcGx5IHNlcmlhbGl6aW5nIHRoZSB1bmtub3duIG9iamVjdCBzaG91bGQgZG8gdGhlIHRyaWNrXHJcblx0XHQvLyAoZm9yIGxvY2F0aW9uLCBub3QgZm9yIGV2ZXJ5dGhpbmcuLi4pXHJcblx0XHRpZiAoIV9VUkkgJiYgX29iamVjdCAmJiBocmVmLnBhdGhuYW1lICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aHJlZiA9IGhyZWYudG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodHlwZW9mIGhyZWYgPT09ICdzdHJpbmcnIHx8IGhyZWYgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0dGhpcy5fcGFydHMgPSBVUkkucGFyc2UoU3RyaW5nKGhyZWYpLCB0aGlzLl9wYXJ0cyk7XHJcblx0XHR9IGVsc2UgaWYgKF9VUkkgfHwgX29iamVjdCkge1xyXG5cdFx0XHR2YXIgc3JjID0gX1VSSSA/IGhyZWYuX3BhcnRzIDogaHJlZjtcclxuXHRcdFx0Zm9yIChrZXkgaW4gc3JjKSB7XHJcblx0XHRcdFx0aWYgKGhhc093bi5jYWxsKHRoaXMuX3BhcnRzLCBrZXkpKSB7XHJcblx0XHRcdFx0XHR0aGlzLl9wYXJ0c1trZXldID0gc3JjW2tleV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGlucHV0Jyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHJcblx0Ly8gaWRlbnRpZmljYXRpb24gYWNjZXNzb3JzXHJcblx0cC5pcyA9IGZ1bmN0aW9uKHdoYXQpIHtcclxuXHRcdHZhciBpcCA9IGZhbHNlO1xyXG5cdFx0dmFyIGlwNCA9IGZhbHNlO1xyXG5cdFx0dmFyIGlwNiA9IGZhbHNlO1xyXG5cdFx0dmFyIG5hbWUgPSBmYWxzZTtcclxuXHRcdHZhciBzbGQgPSBmYWxzZTtcclxuXHRcdHZhciBpZG4gPSBmYWxzZTtcclxuXHRcdHZhciBwdW55Y29kZSA9IGZhbHNlO1xyXG5cdFx0dmFyIHJlbGF0aXZlID0gIXRoaXMuX3BhcnRzLnVybjtcclxuXHJcblx0XHRpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcclxuXHRcdFx0cmVsYXRpdmUgPSBmYWxzZTtcclxuXHRcdFx0aXA0ID0gVVJJLmlwNF9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xyXG5cdFx0XHRpcDYgPSBVUkkuaXA2X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHRcdGlwID0gaXA0IHx8IGlwNjtcclxuXHRcdFx0bmFtZSA9ICFpcDtcclxuXHRcdFx0c2xkID0gbmFtZSAmJiBTTEQgJiYgU0xELmhhcyh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHRcdGlkbiA9IG5hbWUgJiYgVVJJLmlkbl9leHByZXNzaW9uLnRlc3QodGhpcy5fcGFydHMuaG9zdG5hbWUpO1xyXG5cdFx0XHRwdW55Y29kZSA9IG5hbWUgJiYgVVJJLnB1bnljb2RlX2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0c3dpdGNoICh3aGF0LnRvTG93ZXJDYXNlKCkpIHtcclxuXHRcdFx0Y2FzZSAncmVsYXRpdmUnOlxyXG5cdFx0XHRcdHJldHVybiByZWxhdGl2ZTtcclxuXHJcblx0XHRcdGNhc2UgJ2Fic29sdXRlJzpcclxuXHRcdFx0XHRyZXR1cm4gIXJlbGF0aXZlO1xyXG5cclxuXHRcdFx0Ly8gaG9zdG5hbWUgaWRlbnRpZmljYXRpb25cclxuXHRcdFx0Y2FzZSAnZG9tYWluJzpcclxuXHRcdFx0Y2FzZSAnbmFtZSc6XHJcblx0XHRcdFx0cmV0dXJuIG5hbWU7XHJcblxyXG5cdFx0XHRjYXNlICdzbGQnOlxyXG5cdFx0XHRcdHJldHVybiBzbGQ7XHJcblxyXG5cdFx0XHRjYXNlICdpcCc6XHJcblx0XHRcdFx0cmV0dXJuIGlwO1xyXG5cclxuXHRcdFx0Y2FzZSAnaXA0JzpcclxuXHRcdFx0Y2FzZSAnaXB2NCc6XHJcblx0XHRcdGNhc2UgJ2luZXQ0JzpcclxuXHRcdFx0XHRyZXR1cm4gaXA0O1xyXG5cclxuXHRcdFx0Y2FzZSAnaXA2JzpcclxuXHRcdFx0Y2FzZSAnaXB2Nic6XHJcblx0XHRcdGNhc2UgJ2luZXQ2JzpcclxuXHRcdFx0XHRyZXR1cm4gaXA2O1xyXG5cclxuXHRcdFx0Y2FzZSAnaWRuJzpcclxuXHRcdFx0XHRyZXR1cm4gaWRuO1xyXG5cclxuXHRcdFx0Y2FzZSAndXJsJzpcclxuXHRcdFx0XHRyZXR1cm4gIXRoaXMuX3BhcnRzLnVybjtcclxuXHJcblx0XHRcdGNhc2UgJ3Vybic6XHJcblx0XHRcdFx0cmV0dXJuICEhdGhpcy5fcGFydHMudXJuO1xyXG5cclxuXHRcdFx0Y2FzZSAncHVueWNvZGUnOlxyXG5cdFx0XHRcdHJldHVybiBwdW55Y29kZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9O1xyXG5cclxuXHQvLyBjb21wb25lbnQgc3BlY2lmaWMgaW5wdXQgdmFsaWRhdGlvblxyXG5cdHZhciBfcHJvdG9jb2wgPSBwLnByb3RvY29sO1xyXG5cdHZhciBfcG9ydCA9IHAucG9ydDtcclxuXHR2YXIgX2hvc3RuYW1lID0gcC5ob3N0bmFtZTtcclxuXHJcblx0cC5wcm90b2NvbCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodiAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGlmICh2KSB7XHJcblx0XHRcdFx0Ly8gYWNjZXB0IHRyYWlsaW5nIDovL1xyXG5cdFx0XHRcdHYgPSB2LnJlcGxhY2UoLzooXFwvXFwvKT8kLywgJycpO1xyXG5cclxuXHRcdFx0XHRpZiAoIXYubWF0Y2goVVJJLnByb3RvY29sX2V4cHJlc3Npb24pKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm90b2NvbCBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05ListXSBvciBkb2VzblxcJ3Qgc3RhcnQgd2l0aCBbQS1aXScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIF9wcm90b2NvbC5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcclxuXHR9O1xyXG5cdHAuc2NoZW1lID0gcC5wcm90b2NvbDtcclxuXHRwLnBvcnQgPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2ICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYgKHYgPT09IDApIHtcclxuXHRcdFx0XHR2ID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHYpIHtcclxuXHRcdFx0XHR2ICs9ICcnO1xyXG5cdFx0XHRcdGlmICh2LmNoYXJBdCgwKSA9PT0gJzonKSB7XHJcblx0XHRcdFx0XHR2ID0gdi5zdWJzdHJpbmcoMSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAodi5tYXRjaCgvW14wLTldLykpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1BvcnQgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gWzAtOV0nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBfcG9ydC5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcclxuXHR9O1xyXG5cdHAuaG9zdG5hbWUgPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2ICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0dmFyIHggPSB7fTtcclxuXHRcdFx0dmFyIHJlcyA9IFVSSS5wYXJzZUhvc3QodiwgeCk7XHJcblx0XHRcdGlmIChyZXMgIT09ICcvJykge1xyXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0diA9IHguaG9zdG5hbWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gX2hvc3RuYW1lLmNhbGwodGhpcywgdiwgYnVpbGQpO1xyXG5cdH07XHJcblxyXG5cdC8vIGNvbXBvdW5kIGFjY2Vzc29yc1xyXG5cdHAub3JpZ2luID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdHZhciBwYXJ0cztcclxuXHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sKCk7XHJcblx0XHRcdHZhciBhdXRob3JpdHkgPSB0aGlzLmF1dGhvcml0eSgpO1xyXG5cdFx0XHRpZiAoIWF1dGhvcml0eSkgcmV0dXJuICcnO1xyXG5cdFx0XHRyZXR1cm4gKHByb3RvY29sID8gcHJvdG9jb2wgKyAnOi8vJyA6ICcnKSArIHRoaXMuYXV0aG9yaXR5KCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgb3JpZ2luID0gVVJJKHYpO1xyXG5cdFx0XHR0aGlzXHJcblx0XHRcdFx0LnByb3RvY29sKG9yaWdpbi5wcm90b2NvbCgpKVxyXG5cdFx0XHRcdC5hdXRob3JpdHkob3JpZ2luLmF1dGhvcml0eSgpKVxyXG5cdFx0XHRcdC5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHR9O1xyXG5cdHAuaG9zdCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRIb3N0KHRoaXMuX3BhcnRzKSA6ICcnO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIHJlcyA9IFVSSS5wYXJzZUhvc3QodiwgdGhpcy5fcGFydHMpO1xyXG5cdFx0XHRpZiAocmVzICE9PSAnLycpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLmF1dGhvcml0eSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRBdXRob3JpdHkodGhpcy5fcGFydHMpIDogJyc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgcmVzID0gVVJJLnBhcnNlQXV0aG9yaXR5KHYsIHRoaXMuX3BhcnRzKTtcclxuXHRcdFx0aWYgKHJlcyAhPT0gJy8nKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tXScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC51c2VyaW5mbyA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLnVzZXJuYW1lKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgdCA9IFVSSS5idWlsZFVzZXJpbmZvKHRoaXMuX3BhcnRzKTtcclxuXHRcdFx0cmV0dXJuIHQuc3Vic3RyaW5nKDAsIHQubGVuZ3RoIC0xKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICh2W3YubGVuZ3RoLTFdICE9PSAnQCcpIHtcclxuXHRcdFx0XHR2ICs9ICdAJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0VVJJLnBhcnNlVXNlcmluZm8odiwgdGhpcy5fcGFydHMpO1xyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC5yZXNvdXJjZSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XHJcblx0XHR2YXIgcGFydHM7XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wYXRoKCkgKyB0aGlzLnNlYXJjaCgpICsgdGhpcy5oYXNoKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cGFydHMgPSBVUkkucGFyc2Uodik7XHJcblx0XHR0aGlzLl9wYXJ0cy5wYXRoID0gcGFydHMucGF0aDtcclxuXHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gcGFydHMucXVlcnk7XHJcblx0XHR0aGlzLl9wYXJ0cy5mcmFnbWVudCA9IHBhcnRzLmZyYWdtZW50O1xyXG5cdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHJcblx0Ly8gZnJhY3Rpb24gYWNjZXNzb3JzXHJcblx0cC5zdWJkb21haW4gPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvbnZlbmllbmNlLCByZXR1cm4gXCJ3d3dcIiBmcm9tIFwid3d3LmV4YW1wbGUub3JnXCJcclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBncmFiIGRvbWFpbiBhbmQgYWRkIGFub3RoZXIgc2VnbWVudFxyXG5cdFx0XHR2YXIgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy5kb21haW4oKS5sZW5ndGggLSAxO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGVuZCkgfHwgJyc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMuZG9tYWluKCkubGVuZ3RoO1xyXG5cdFx0XHR2YXIgc3ViID0gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGUpO1xyXG5cdFx0XHR2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoJ14nICsgZXNjYXBlUmVnRXgoc3ViKSk7XHJcblxyXG5cdFx0XHRpZiAodiAmJiB2LmNoYXJBdCh2Lmxlbmd0aCAtIDEpICE9PSAnLicpIHtcclxuXHRcdFx0XHR2ICs9ICcuJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHYpIHtcclxuXHRcdFx0XHRVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC5kb21haW4gPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XHJcblx0XHRcdGJ1aWxkID0gdjtcclxuXHRcdFx0diA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb252ZW5pZW5jZSwgcmV0dXJuIFwiZXhhbXBsZS5vcmdcIiBmcm9tIFwid3d3LmV4YW1wbGUub3JnXCJcclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBpZiBob3N0bmFtZSBjb25zaXN0cyBvZiAxIG9yIDIgc2VnbWVudHMsIGl0IG11c3QgYmUgdGhlIGRvbWFpblxyXG5cdFx0XHR2YXIgdCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLm1hdGNoKC9cXC4vZyk7XHJcblx0XHRcdGlmICh0ICYmIHQubGVuZ3RoIDwgMikge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZ3JhYiB0bGQgYW5kIGFkZCBhbm90aGVyIHNlZ21lbnRcclxuXHRcdFx0dmFyIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMudGxkKGJ1aWxkKS5sZW5ndGggLSAxO1xyXG5cdFx0XHRlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sYXN0SW5kZXhPZignLicsIGVuZCAtMSkgKyAxO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKGVuZCkgfHwgJyc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoIXYpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2V0IGRvbWFpbiBlbXB0eScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRVUkkuZW5zdXJlVmFsaWRIb3N0bmFtZSh2KTtcclxuXHJcblx0XHRcdGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xyXG5cdFx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5kb21haW4oKSkgKyAnJCcpO1xyXG5cdFx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHR9O1xyXG5cdHAudGxkID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykge1xyXG5cdFx0XHRidWlsZCA9IHY7XHJcblx0XHRcdHYgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcmV0dXJuIFwib3JnXCIgZnJvbSBcInd3dy5leGFtcGxlLm9yZ1wiXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xyXG5cdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHBvcyA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxhc3RJbmRleE9mKCcuJyk7XHJcblx0XHRcdHZhciB0bGQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcocG9zICsgMSk7XHJcblxyXG5cdFx0XHRpZiAoYnVpbGQgIT09IHRydWUgJiYgU0xEICYmIFNMRC5saXN0W3RsZC50b0xvd2VyQ2FzZSgpXSkge1xyXG5cdFx0XHRcdHJldHVybiBTTEQuZ2V0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB8fCB0bGQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0bGQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgcmVwbGFjZTtcclxuXHJcblx0XHRcdGlmICghdikge1xyXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgVExEIGVtcHR5Jyk7XHJcblx0XHRcdH0gZWxzZSBpZiAodi5tYXRjaCgvW15hLXpBLVowLTktXS8pKSB7XHJcblx0XHRcdFx0aWYgKFNMRCAmJiBTTEQuaXModikpIHtcclxuXHRcdFx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMudGxkKCkpICsgJyQnKTtcclxuXHRcdFx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVExEIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTldJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCdjYW5ub3Qgc2V0IFRMRCBvbiBub24tZG9tYWluIGhvc3QnKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLnRsZCgpKSArICckJyk7XHJcblx0XHRcdFx0dGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC5kaXJlY3RvcnkgPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHRyZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3BhcnRzLnBhdGggJiYgIXRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XHJcblx0XHRcdFx0cmV0dXJuICcvJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGVuZCA9IHRoaXMuX3BhcnRzLnBhdGgubGVuZ3RoIC0gdGhpcy5maWxlbmFtZSgpLmxlbmd0aCAtIDE7XHJcblx0XHRcdHZhciByZXMgPSB0aGlzLl9wYXJ0cy5wYXRoLnN1YnN0cmluZygwLCBlbmQpIHx8ICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSA/ICcvJyA6ICcnKTtcclxuXHJcblx0XHRcdHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGgocmVzKSA6IHJlcztcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgZSA9IHRoaXMuX3BhcnRzLnBhdGgubGVuZ3RoIC0gdGhpcy5maWxlbmFtZSgpLmxlbmd0aDtcclxuXHRcdFx0dmFyIGRpcmVjdG9yeSA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKDAsIGUpO1xyXG5cdFx0XHR2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoJ14nICsgZXNjYXBlUmVnRXgoZGlyZWN0b3J5KSk7XHJcblxyXG5cdFx0XHQvLyBmdWxseSBxdWFsaWZpZXIgZGlyZWN0b3JpZXMgYmVnaW4gd2l0aCBhIHNsYXNoXHJcblx0XHRcdGlmICghdGhpcy5pcygncmVsYXRpdmUnKSkge1xyXG5cdFx0XHRcdGlmICghdikge1xyXG5cdFx0XHRcdFx0diA9ICcvJztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh2LmNoYXJBdCgwKSAhPT0gJy8nKSB7XHJcblx0XHRcdFx0XHR2ID0gJy8nICsgdjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGRpcmVjdG9yaWVzIGFsd2F5cyBlbmQgd2l0aCBhIHNsYXNoXHJcblx0XHRcdGlmICh2ICYmIHYuY2hhckF0KHYubGVuZ3RoIC0gMSkgIT09ICcvJykge1xyXG5cdFx0XHRcdHYgKz0gJy8nO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2ID0gVVJJLnJlY29kZVBhdGgodik7XHJcblx0XHRcdHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdik7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLmZpbGVuYW1lID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHtcclxuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykge1xyXG5cdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHBvcyA9IHRoaXMuX3BhcnRzLnBhdGgubGFzdEluZGV4T2YoJy8nKTtcclxuXHRcdFx0dmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKHBvcysxKTtcclxuXHJcblx0XHRcdHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgbXV0YXRlZERpcmVjdG9yeSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0aWYgKHYuY2hhckF0KDApID09PSAnLycpIHtcclxuXHRcdFx0XHR2ID0gdi5zdWJzdHJpbmcoMSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh2Lm1hdGNoKC9cXC4/XFwvLykpIHtcclxuXHRcdFx0XHRtdXRhdGVkRGlyZWN0b3J5ID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMuZmlsZW5hbWUoKSkgKyAnJCcpO1xyXG5cdFx0XHR2ID0gVVJJLnJlY29kZVBhdGgodik7XHJcblx0XHRcdHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdik7XHJcblxyXG5cdFx0XHRpZiAobXV0YXRlZERpcmVjdG9yeSkge1xyXG5cdFx0XHRcdHRoaXMubm9ybWFsaXplUGF0aChidWlsZCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHR9O1xyXG5cdHAuc3VmZml4ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0cmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHtcclxuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykge1xyXG5cdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGZpbGVuYW1lID0gdGhpcy5maWxlbmFtZSgpO1xyXG5cdFx0XHR2YXIgcG9zID0gZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKTtcclxuXHRcdFx0dmFyIHMsIHJlcztcclxuXHJcblx0XHRcdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBzdWZmaXggbWF5IG9ubHkgY29udGFpbiBhbG51bSBjaGFyYWN0ZXJzICh5dXAsIEkgbWFkZSB0aGlzIHVwLilcclxuXHRcdFx0cyA9IGZpbGVuYW1lLnN1YnN0cmluZyhwb3MrMSk7XHJcblx0XHRcdHJlcyA9ICgvXlthLXowLTklXSskL2kpLnRlc3QocykgPyBzIDogJyc7XHJcblx0XHRcdHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAodi5jaGFyQXQoMCkgPT09ICcuJykge1xyXG5cdFx0XHRcdHYgPSB2LnN1YnN0cmluZygxKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHN1ZmZpeCA9IHRoaXMuc3VmZml4KCk7XHJcblx0XHRcdHZhciByZXBsYWNlO1xyXG5cclxuXHRcdFx0aWYgKCFzdWZmaXgpIHtcclxuXHRcdFx0XHRpZiAoIXYpIHtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGhpcy5fcGFydHMucGF0aCArPSAnLicgKyBVUkkucmVjb2RlUGF0aCh2KTtcclxuXHRcdFx0fSBlbHNlIGlmICghdikge1xyXG5cdFx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KCcuJyArIHN1ZmZpeCkgKyAnJCcpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHN1ZmZpeCkgKyAnJCcpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAocmVwbGFjZSkge1xyXG5cdFx0XHRcdHYgPSBVUkkucmVjb2RlUGF0aCh2KTtcclxuXHRcdFx0XHR0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cC5zZWdtZW50ID0gZnVuY3Rpb24oc2VnbWVudCwgdiwgYnVpbGQpIHtcclxuXHRcdHZhciBzZXBhcmF0b3IgPSB0aGlzLl9wYXJ0cy51cm4gPyAnOicgOiAnLyc7XHJcblx0XHR2YXIgcGF0aCA9IHRoaXMucGF0aCgpO1xyXG5cdFx0dmFyIGFic29sdXRlID0gcGF0aC5zdWJzdHJpbmcoMCwgMSkgPT09ICcvJztcclxuXHRcdHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoc2VwYXJhdG9yKTtcclxuXHJcblx0XHRpZiAoc2VnbWVudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzZWdtZW50ICE9PSAnbnVtYmVyJykge1xyXG5cdFx0XHRidWlsZCA9IHY7XHJcblx0XHRcdHYgPSBzZWdtZW50O1xyXG5cdFx0XHRzZWdtZW50ID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChzZWdtZW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQmFkIHNlZ21lbnQgXCInICsgc2VnbWVudCArICdcIiwgbXVzdCBiZSAwLWJhc2VkIGludGVnZXInKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYWJzb2x1dGUpIHtcclxuXHRcdFx0c2VnbWVudHMuc2hpZnQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc2VnbWVudCA8IDApIHtcclxuXHRcdFx0Ly8gYWxsb3cgbmVnYXRpdmUgaW5kZXhlcyB0byBhZGRyZXNzIGZyb20gdGhlIGVuZFxyXG5cdFx0XHRzZWdtZW50ID0gTWF0aC5tYXgoc2VnbWVudHMubGVuZ3RoICsgc2VnbWVudCwgMCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHQvKmpzaGludCBsYXhicmVhazogdHJ1ZSAqL1xyXG5cdFx0XHRyZXR1cm4gc2VnbWVudCA9PT0gdW5kZWZpbmVkXHJcblx0XHRcdFx0PyBzZWdtZW50c1xyXG5cdFx0XHRcdDogc2VnbWVudHNbc2VnbWVudF07XHJcblx0XHRcdC8qanNoaW50IGxheGJyZWFrOiBmYWxzZSAqL1xyXG5cdFx0fSBlbHNlIGlmIChzZWdtZW50ID09PSBudWxsIHx8IHNlZ21lbnRzW3NlZ21lbnRdID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aWYgKGlzQXJyYXkodikpIHtcclxuXHRcdFx0XHRzZWdtZW50cyA9IFtdO1xyXG5cdFx0XHRcdC8vIGNvbGxhcHNlIGVtcHR5IGVsZW1lbnRzIHdpdGhpbiBhcnJheVxyXG5cdFx0XHRcdGZvciAodmFyIGk9MCwgbD12Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdFx0XHRcdFx0aWYgKCF2W2ldLmxlbmd0aCAmJiAoIXNlZ21lbnRzLmxlbmd0aCB8fCAhc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXS5sZW5ndGgpKSB7XHJcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChzZWdtZW50cy5sZW5ndGggJiYgIXNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtMV0ubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdHNlZ21lbnRzLnBvcCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHNlZ21lbnRzLnB1c2godHJpbVNsYXNoZXModltpXSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmICh2IHx8IHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdHYgPSB0cmltU2xhc2hlcyh2KTtcclxuXHRcdFx0XHRpZiAoc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXSA9PT0gJycpIHtcclxuXHRcdFx0XHRcdC8vIGVtcHR5IHRyYWlsaW5nIGVsZW1lbnRzIGhhdmUgdG8gYmUgb3ZlcndyaXR0ZW5cclxuXHRcdFx0XHRcdC8vIHRvIHByZXZlbnQgcmVzdWx0cyBzdWNoIGFzIC9mb28vL2JhclxyXG5cdFx0XHRcdFx0c2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXSA9IHY7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHNlZ21lbnRzLnB1c2godik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAodikge1xyXG5cdFx0XHRcdHNlZ21lbnRzW3NlZ21lbnRdID0gdHJpbVNsYXNoZXModik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VnbWVudHMuc3BsaWNlKHNlZ21lbnQsIDEpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGFic29sdXRlKSB7XHJcblx0XHRcdHNlZ21lbnRzLnVuc2hpZnQoJycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnBhdGgoc2VnbWVudHMuam9pbihzZXBhcmF0b3IpLCBidWlsZCk7XHJcblx0fTtcclxuXHRwLnNlZ21lbnRDb2RlZCA9IGZ1bmN0aW9uKHNlZ21lbnQsIHYsIGJ1aWxkKSB7XHJcblx0XHR2YXIgc2VnbWVudHMsIGksIGw7XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBzZWdtZW50ICE9PSAnbnVtYmVyJykge1xyXG5cdFx0XHRidWlsZCA9IHY7XHJcblx0XHRcdHYgPSBzZWdtZW50O1xyXG5cdFx0XHRzZWdtZW50ID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0c2VnbWVudHMgPSB0aGlzLnNlZ21lbnQoc2VnbWVudCwgdiwgYnVpbGQpO1xyXG5cdFx0XHRpZiAoIWlzQXJyYXkoc2VnbWVudHMpKSB7XHJcblx0XHRcdFx0c2VnbWVudHMgPSBzZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gVVJJLmRlY29kZShzZWdtZW50cykgOiB1bmRlZmluZWQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Zm9yIChpID0gMCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdFx0XHRcdFx0c2VnbWVudHNbaV0gPSBVUkkuZGVjb2RlKHNlZ21lbnRzW2ldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBzZWdtZW50cztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIWlzQXJyYXkodikpIHtcclxuXHRcdFx0diA9ICh0eXBlb2YgdiA9PT0gJ3N0cmluZycgfHwgdiBpbnN0YW5jZW9mIFN0cmluZykgPyBVUkkuZW5jb2RlKHYpIDogdjtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoaSA9IDAsIGwgPSB2Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdFx0XHRcdHZbaV0gPSBVUkkuZW5jb2RlKHZbaV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc2VnbWVudChzZWdtZW50LCB2LCBidWlsZCk7XHJcblx0fTtcclxuXHJcblx0Ly8gbXV0YXRpbmcgcXVlcnkgc3RyaW5nXHJcblx0dmFyIHEgPSBwLnF1ZXJ5O1xyXG5cdHAucXVlcnkgPSBmdW5jdGlvbih2LCBidWlsZCkge1xyXG5cdFx0aWYgKHYgPT09IHRydWUpIHtcclxuXHRcdFx0cmV0dXJuIFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHYgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0dmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRcdHZhciByZXN1bHQgPSB2LmNhbGwodGhpcywgZGF0YSk7XHJcblx0XHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkocmVzdWx0IHx8IGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9IGVsc2UgaWYgKHYgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcclxuXHRcdFx0dGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeSh2LCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHEuY2FsbCh0aGlzLCB2LCBidWlsZCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRwLnNldFF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7XHJcblx0XHR2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHJcblx0XHRpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IG5hbWUgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0ZGF0YVtuYW1lXSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IG51bGw7XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xyXG5cdFx0XHRcdGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XHJcblx0XHRcdFx0XHRkYXRhW2tleV0gPSBuYW1lW2tleV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuYWRkUXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcclxuXHRcdFx0YnVpbGQgPSB2YWx1ZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cdHAuYWRkUXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHtcclxuXHRcdHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0VVJJLmFkZFF1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWUpO1xyXG5cdFx0dGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xyXG5cdFx0XHRidWlsZCA9IHZhbHVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblx0cC5yZW1vdmVRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBidWlsZCkge1xyXG5cdFx0dmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRVUkkucmVtb3ZlUXVlcnkoZGF0YSwgbmFtZSwgdmFsdWUpO1xyXG5cdFx0dGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cdFx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xyXG5cdFx0XHRidWlsZCA9IHZhbHVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblx0cC5oYXNRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSkge1xyXG5cdFx0dmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XHJcblx0XHRyZXR1cm4gVVJJLmhhc1F1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlLCB3aXRoaW5BcnJheSk7XHJcblx0fTtcclxuXHRwLnNldFNlYXJjaCA9IHAuc2V0UXVlcnk7XHJcblx0cC5hZGRTZWFyY2ggPSBwLmFkZFF1ZXJ5O1xyXG5cdHAucmVtb3ZlU2VhcmNoID0gcC5yZW1vdmVRdWVyeTtcclxuXHRwLmhhc1NlYXJjaCA9IHAuaGFzUXVlcnk7XHJcblxyXG5cdC8vIHNhbml0aXppbmcgVVJMc1xyXG5cdHAubm9ybWFsaXplID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHJldHVybiB0aGlzXHJcblx0XHRcdFx0Lm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKVxyXG5cdFx0XHRcdC5ub3JtYWxpemVQYXRoKGZhbHNlKVxyXG5cdFx0XHRcdC5ub3JtYWxpemVRdWVyeShmYWxzZSlcclxuXHRcdFx0XHQubm9ybWFsaXplRnJhZ21lbnQoZmFsc2UpXHJcblx0XHRcdFx0LmJ1aWxkKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXNcclxuXHRcdFx0Lm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKVxyXG5cdFx0XHQubm9ybWFsaXplSG9zdG5hbWUoZmFsc2UpXHJcblx0XHRcdC5ub3JtYWxpemVQb3J0KGZhbHNlKVxyXG5cdFx0XHQubm9ybWFsaXplUGF0aChmYWxzZSlcclxuXHRcdFx0Lm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKVxyXG5cdFx0XHQubm9ybWFsaXplRnJhZ21lbnQoZmFsc2UpXHJcblx0XHRcdC5idWlsZCgpO1xyXG5cdH07XHJcblx0cC5ub3JtYWxpemVQcm90b2NvbCA9IGZ1bmN0aW9uKGJ1aWxkKSB7XHJcblx0XHRpZiAodHlwZW9mIHRoaXMuX3BhcnRzLnByb3RvY29sID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHR0aGlzLl9wYXJ0cy5wcm90b2NvbCA9IHRoaXMuX3BhcnRzLnByb3RvY29sLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cdHAubm9ybWFsaXplSG9zdG5hbWUgPSBmdW5jdGlvbihidWlsZCkge1xyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7XHJcblx0XHRcdGlmICh0aGlzLmlzKCdJRE4nKSAmJiBwdW55Y29kZSkge1xyXG5cdFx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5pcygnSVB2NicpICYmIElQdjYpIHtcclxuXHRcdFx0XHR0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IElQdjYuYmVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblx0cC5ub3JtYWxpemVQb3J0ID0gZnVuY3Rpb24oYnVpbGQpIHtcclxuXHRcdC8vIHJlbW92ZSBwb3J0IG9mIGl0J3MgdGhlIHByb3RvY29sJ3MgZGVmYXVsdFxyXG5cdFx0aWYgKHR5cGVvZiB0aGlzLl9wYXJ0cy5wcm90b2NvbCA9PT0gJ3N0cmluZycgJiYgdGhpcy5fcGFydHMucG9ydCA9PT0gVVJJLmRlZmF1bHRQb3J0c1t0aGlzLl9wYXJ0cy5wcm90b2NvbF0pIHtcclxuXHRcdFx0dGhpcy5fcGFydHMucG9ydCA9IG51bGw7XHJcblx0XHRcdHRoaXMuYnVpbGQoIWJ1aWxkKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cdHAubm9ybWFsaXplUGF0aCA9IGZ1bmN0aW9uKGJ1aWxkKSB7XHJcblx0XHR2YXIgX3BhdGggPSB0aGlzLl9wYXJ0cy5wYXRoO1xyXG5cdFx0aWYgKCFfcGF0aCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5fcGFydHMudXJuKSB7XHJcblx0XHRcdHRoaXMuX3BhcnRzLnBhdGggPSBVUkkucmVjb2RlVXJuUGF0aCh0aGlzLl9wYXJ0cy5wYXRoKTtcclxuXHRcdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBfd2FzX3JlbGF0aXZlO1xyXG5cdFx0dmFyIF9sZWFkaW5nUGFyZW50cyA9ICcnO1xyXG5cdFx0dmFyIF9wYXJlbnQsIF9wb3M7XHJcblxyXG5cdFx0Ly8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzXHJcblx0XHRpZiAoX3BhdGguY2hhckF0KDApICE9PSAnLycpIHtcclxuXHRcdFx0X3dhc19yZWxhdGl2ZSA9IHRydWU7XHJcblx0XHRcdF9wYXRoID0gJy8nICsgX3BhdGg7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaGFuZGxlIHJlbGF0aXZlIGZpbGVzIChhcyBvcHBvc2VkIHRvIGRpcmVjdG9yaWVzKVxyXG5cdFx0aWYgKF9wYXRoLnNsaWNlKC0zKSA9PT0gJy8uLicgfHwgX3BhdGguc2xpY2UoLTIpID09PSAnLy4nKSB7XHJcblx0XHRcdF9wYXRoICs9ICcvJztcclxuXHRcdH1cclxuXHJcblx0XHQvLyByZXNvbHZlIHNpbXBsZXNcclxuXHRcdF9wYXRoID0gX3BhdGhcclxuXHRcdFx0LnJlcGxhY2UoLyhcXC8oXFwuXFwvKSspfChcXC9cXC4kKS9nLCAnLycpXHJcblx0XHRcdC5yZXBsYWNlKC9cXC97Mix9L2csICcvJyk7XHJcblxyXG5cdFx0Ly8gcmVtZW1iZXIgbGVhZGluZyBwYXJlbnRzXHJcblx0XHRpZiAoX3dhc19yZWxhdGl2ZSkge1xyXG5cdFx0XHRfbGVhZGluZ1BhcmVudHMgPSBfcGF0aC5zdWJzdHJpbmcoMSkubWF0Y2goL14oXFwuXFwuXFwvKSsvKSB8fCAnJztcclxuXHRcdFx0aWYgKF9sZWFkaW5nUGFyZW50cykge1xyXG5cdFx0XHRcdF9sZWFkaW5nUGFyZW50cyA9IF9sZWFkaW5nUGFyZW50c1swXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHJlc29sdmUgcGFyZW50c1xyXG5cdFx0d2hpbGUgKHRydWUpIHtcclxuXHRcdFx0X3BhcmVudCA9IF9wYXRoLmluZGV4T2YoJy8uLicpO1xyXG5cdFx0XHRpZiAoX3BhcmVudCA9PT0gLTEpIHtcclxuXHRcdFx0XHQvLyBubyBtb3JlIC4uLyB0byByZXNvbHZlXHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH0gZWxzZSBpZiAoX3BhcmVudCA9PT0gMCkge1xyXG5cdFx0XHRcdC8vIHRvcCBsZXZlbCBjYW5ub3QgYmUgcmVsYXRpdmUsIHNraXAgaXRcclxuXHRcdFx0XHRfcGF0aCA9IF9wYXRoLnN1YnN0cmluZygzKTtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X3BvcyA9IF9wYXRoLnN1YnN0cmluZygwLCBfcGFyZW50KS5sYXN0SW5kZXhPZignLycpO1xyXG5cdFx0XHRpZiAoX3BvcyA9PT0gLTEpIHtcclxuXHRcdFx0XHRfcG9zID0gX3BhcmVudDtcclxuXHRcdFx0fVxyXG5cdFx0XHRfcGF0aCA9IF9wYXRoLnN1YnN0cmluZygwLCBfcG9zKSArIF9wYXRoLnN1YnN0cmluZyhfcGFyZW50ICsgMyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcmV2ZXJ0IHRvIHJlbGF0aXZlXHJcblx0XHRpZiAoX3dhc19yZWxhdGl2ZSAmJiB0aGlzLmlzKCdyZWxhdGl2ZScpKSB7XHJcblx0XHRcdF9wYXRoID0gX2xlYWRpbmdQYXJlbnRzICsgX3BhdGguc3Vic3RyaW5nKDEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdF9wYXRoID0gVVJJLnJlY29kZVBhdGgoX3BhdGgpO1xyXG5cdFx0dGhpcy5fcGFydHMucGF0aCA9IF9wYXRoO1xyXG5cdFx0dGhpcy5idWlsZCghYnVpbGQpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHRwLm5vcm1hbGl6ZVBhdGhuYW1lID0gcC5ub3JtYWxpemVQYXRoO1xyXG5cdHAubm9ybWFsaXplUXVlcnkgPSBmdW5jdGlvbihidWlsZCkge1xyXG5cdFx0aWYgKHR5cGVvZiB0aGlzLl9wYXJ0cy5xdWVyeSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0aWYgKCF0aGlzLl9wYXJ0cy5xdWVyeS5sZW5ndGgpIHtcclxuXHRcdFx0XHR0aGlzLl9wYXJ0cy5xdWVyeSA9IG51bGw7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5xdWVyeShVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSkpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHRwLm5vcm1hbGl6ZUZyYWdtZW50ID0gZnVuY3Rpb24oYnVpbGQpIHtcclxuXHRcdGlmICghdGhpcy5fcGFydHMuZnJhZ21lbnQpIHtcclxuXHRcdFx0dGhpcy5fcGFydHMuZnJhZ21lbnQgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmJ1aWxkKCFidWlsZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHRwLm5vcm1hbGl6ZVNlYXJjaCA9IHAubm9ybWFsaXplUXVlcnk7XHJcblx0cC5ub3JtYWxpemVIYXNoID0gcC5ub3JtYWxpemVGcmFnbWVudDtcclxuXHJcblx0cC5pc284ODU5ID0gZnVuY3Rpb24oKSB7XHJcblx0XHQvLyBleHBlY3QgdW5pY29kZSBpbnB1dCwgaXNvODg1OSBvdXRwdXRcclxuXHRcdHZhciBlID0gVVJJLmVuY29kZTtcclxuXHRcdHZhciBkID0gVVJJLmRlY29kZTtcclxuXHJcblx0XHRVUkkuZW5jb2RlID0gZXNjYXBlO1xyXG5cdFx0VVJJLmRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHRoaXMubm9ybWFsaXplKCk7XHJcblx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRVUkkuZW5jb2RlID0gZTtcclxuXHRcdFx0VVJJLmRlY29kZSA9IGQ7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9O1xyXG5cclxuXHRwLnVuaWNvZGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdC8vIGV4cGVjdCBpc284ODU5IGlucHV0LCB1bmljb2RlIG91dHB1dFxyXG5cdFx0dmFyIGUgPSBVUkkuZW5jb2RlO1xyXG5cdFx0dmFyIGQgPSBVUkkuZGVjb2RlO1xyXG5cclxuXHRcdFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7XHJcblx0XHRVUkkuZGVjb2RlID0gdW5lc2NhcGU7XHJcblx0XHR0cnkge1xyXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZSgpO1xyXG5cdFx0fSBmaW5hbGx5IHtcclxuXHRcdFx0VVJJLmVuY29kZSA9IGU7XHJcblx0XHRcdFVSSS5kZWNvZGUgPSBkO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHJcblx0cC5yZWFkYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHVyaSA9IHRoaXMuY2xvbmUoKTtcclxuXHRcdC8vIHJlbW92aW5nIHVzZXJuYW1lLCBwYXNzd29yZCwgYmVjYXVzZSB0aGV5IHNob3VsZG4ndCBiZSBkaXNwbGF5ZWQgYWNjb3JkaW5nIHRvIFJGQyAzOTg2XHJcblx0XHR1cmkudXNlcm5hbWUoJycpLnBhc3N3b3JkKCcnKS5ub3JtYWxpemUoKTtcclxuXHRcdHZhciB0ID0gJyc7XHJcblx0XHRpZiAodXJpLl9wYXJ0cy5wcm90b2NvbCkge1xyXG5cdFx0XHR0ICs9IHVyaS5fcGFydHMucHJvdG9jb2wgKyAnOi8vJztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodXJpLl9wYXJ0cy5ob3N0bmFtZSkge1xyXG5cdFx0XHRpZiAodXJpLmlzKCdwdW55Y29kZScpICYmIHB1bnljb2RlKSB7XHJcblx0XHRcdFx0dCArPSBwdW55Y29kZS50b1VuaWNvZGUodXJpLl9wYXJ0cy5ob3N0bmFtZSk7XHJcblx0XHRcdFx0aWYgKHVyaS5fcGFydHMucG9ydCkge1xyXG5cdFx0XHRcdFx0dCArPSAnOicgKyB1cmkuX3BhcnRzLnBvcnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHQgKz0gdXJpLmhvc3QoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lICYmIHVyaS5fcGFydHMucGF0aCAmJiB1cmkuX3BhcnRzLnBhdGguY2hhckF0KDApICE9PSAnLycpIHtcclxuXHRcdFx0dCArPSAnLyc7XHJcblx0XHR9XHJcblxyXG5cdFx0dCArPSB1cmkucGF0aCh0cnVlKTtcclxuXHRcdGlmICh1cmkuX3BhcnRzLnF1ZXJ5KSB7XHJcblx0XHRcdHZhciBxID0gJyc7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBxcCA9IHVyaS5fcGFydHMucXVlcnkuc3BsaXQoJyYnKSwgbCA9IHFwLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdFx0XHRcdHZhciBrdiA9IChxcFtpXSB8fCAnJykuc3BsaXQoJz0nKTtcclxuXHRcdFx0XHRxICs9ICcmJyArIFVSSS5kZWNvZGVRdWVyeShrdlswXSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSlcclxuXHRcdFx0XHRcdC5yZXBsYWNlKC8mL2csICclMjYnKTtcclxuXHJcblx0XHRcdFx0aWYgKGt2WzFdICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdHEgKz0gJz0nICsgVVJJLmRlY29kZVF1ZXJ5KGt2WzFdLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKVxyXG5cdFx0XHRcdFx0XHQucmVwbGFjZSgvJi9nLCAnJTI2Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHQgKz0gJz8nICsgcS5zdWJzdHJpbmcoMSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dCArPSBVUkkuZGVjb2RlUXVlcnkodXJpLmhhc2goKSwgdHJ1ZSk7XHJcblx0XHRyZXR1cm4gdDtcclxuXHR9O1xyXG5cclxuXHQvLyByZXNvbHZpbmcgcmVsYXRpdmUgYW5kIGFic29sdXRlIFVSTHNcclxuXHRwLmFic29sdXRlVG8gPSBmdW5jdGlvbihiYXNlKSB7XHJcblx0XHR2YXIgcmVzb2x2ZWQgPSB0aGlzLmNsb25lKCk7XHJcblx0XHR2YXIgcHJvcGVydGllcyA9IFsncHJvdG9jb2wnLCAndXNlcm5hbWUnLCAncGFzc3dvcmQnLCAnaG9zdG5hbWUnLCAncG9ydCddO1xyXG5cdFx0dmFyIGJhc2VkaXIsIGksIHA7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLnVybikge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VSTnMgZG8gbm90IGhhdmUgYW55IGdlbmVyYWxseSBkZWZpbmVkIGhpZXJhcmNoaWNhbCBjb21wb25lbnRzJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCEoYmFzZSBpbnN0YW5jZW9mIFVSSSkpIHtcclxuXHRcdFx0YmFzZSA9IG5ldyBVUkkoYmFzZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFyZXNvbHZlZC5fcGFydHMucHJvdG9jb2wpIHtcclxuXHRcdFx0cmVzb2x2ZWQuX3BhcnRzLnByb3RvY29sID0gYmFzZS5fcGFydHMucHJvdG9jb2w7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BhcnRzLmhvc3RuYW1lKSB7XHJcblx0XHRcdHJldHVybiByZXNvbHZlZDtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGkgPSAwOyAocCA9IHByb3BlcnRpZXNbaV0pOyBpKyspIHtcclxuXHRcdFx0cmVzb2x2ZWQuX3BhcnRzW3BdID0gYmFzZS5fcGFydHNbcF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFyZXNvbHZlZC5fcGFydHMucGF0aCkge1xyXG5cdFx0XHRyZXNvbHZlZC5fcGFydHMucGF0aCA9IGJhc2UuX3BhcnRzLnBhdGg7XHJcblx0XHRcdGlmICghcmVzb2x2ZWQuX3BhcnRzLnF1ZXJ5KSB7XHJcblx0XHRcdFx0cmVzb2x2ZWQuX3BhcnRzLnF1ZXJ5ID0gYmFzZS5fcGFydHMucXVlcnk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAocmVzb2x2ZWQuX3BhcnRzLnBhdGguc3Vic3RyaW5nKC0yKSA9PT0gJy4uJykge1xyXG5cdFx0XHRyZXNvbHZlZC5fcGFydHMucGF0aCArPSAnLyc7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlc29sdmVkLnBhdGgoKS5jaGFyQXQoMCkgIT09ICcvJykge1xyXG5cdFx0XHRiYXNlZGlyID0gYmFzZS5kaXJlY3RvcnkoKTtcclxuXHRcdFx0YmFzZWRpciA9IGJhc2VkaXIgPyBiYXNlZGlyIDogYmFzZS5wYXRoKCkuaW5kZXhPZignLycpID09PSAwID8gJy8nIDogJyc7XHJcblx0XHRcdHJlc29sdmVkLl9wYXJ0cy5wYXRoID0gKGJhc2VkaXIgPyAoYmFzZWRpciArICcvJykgOiAnJykgKyByZXNvbHZlZC5fcGFydHMucGF0aDtcclxuXHRcdFx0cmVzb2x2ZWQubm9ybWFsaXplUGF0aCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJlc29sdmVkLmJ1aWxkKCk7XHJcblx0XHRyZXR1cm4gcmVzb2x2ZWQ7XHJcblx0fTtcclxuXHRwLnJlbGF0aXZlVG8gPSBmdW5jdGlvbihiYXNlKSB7XHJcblx0XHR2YXIgcmVsYXRpdmUgPSB0aGlzLmNsb25lKCkubm9ybWFsaXplKCk7XHJcblx0XHR2YXIgcmVsYXRpdmVQYXJ0cywgYmFzZVBhcnRzLCBjb21tb24sIHJlbGF0aXZlUGF0aCwgYmFzZVBhdGg7XHJcblxyXG5cdFx0aWYgKHJlbGF0aXZlLl9wYXJ0cy51cm4pIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGJhc2UgPSBuZXcgVVJJKGJhc2UpLm5vcm1hbGl6ZSgpO1xyXG5cdFx0cmVsYXRpdmVQYXJ0cyA9IHJlbGF0aXZlLl9wYXJ0cztcclxuXHRcdGJhc2VQYXJ0cyA9IGJhc2UuX3BhcnRzO1xyXG5cdFx0cmVsYXRpdmVQYXRoID0gcmVsYXRpdmUucGF0aCgpO1xyXG5cdFx0YmFzZVBhdGggPSBiYXNlLnBhdGgoKTtcclxuXHJcblx0XHRpZiAocmVsYXRpdmVQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignVVJJIGlzIGFscmVhZHkgcmVsYXRpdmUnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYmFzZVBhdGguY2hhckF0KDApICE9PSAnLycpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2FsY3VsYXRlIGEgVVJJIHJlbGF0aXZlIHRvIGFub3RoZXIgcmVsYXRpdmUgVVJJJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlbGF0aXZlUGFydHMucHJvdG9jb2wgPT09IGJhc2VQYXJ0cy5wcm90b2NvbCkge1xyXG5cdFx0XHRyZWxhdGl2ZVBhcnRzLnByb3RvY29sID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVsYXRpdmVQYXJ0cy51c2VybmFtZSAhPT0gYmFzZVBhcnRzLnVzZXJuYW1lIHx8IHJlbGF0aXZlUGFydHMucGFzc3dvcmQgIT09IGJhc2VQYXJ0cy5wYXNzd29yZCkge1xyXG5cdFx0XHRyZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVsYXRpdmVQYXJ0cy5wcm90b2NvbCAhPT0gbnVsbCB8fCByZWxhdGl2ZVBhcnRzLnVzZXJuYW1lICE9PSBudWxsIHx8IHJlbGF0aXZlUGFydHMucGFzc3dvcmQgIT09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlbGF0aXZlUGFydHMuaG9zdG5hbWUgPT09IGJhc2VQYXJ0cy5ob3N0bmFtZSAmJiByZWxhdGl2ZVBhcnRzLnBvcnQgPT09IGJhc2VQYXJ0cy5wb3J0KSB7XHJcblx0XHRcdHJlbGF0aXZlUGFydHMuaG9zdG5hbWUgPSBudWxsO1xyXG5cdFx0XHRyZWxhdGl2ZVBhcnRzLnBvcnQgPSBudWxsO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlbGF0aXZlUGF0aCA9PT0gYmFzZVBhdGgpIHtcclxuXHRcdFx0cmVsYXRpdmVQYXJ0cy5wYXRoID0gJyc7XHJcblx0XHRcdHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGRldGVybWluZSBjb21tb24gc3ViIHBhdGhcclxuXHRcdGNvbW1vbiA9IFVSSS5jb21tb25QYXRoKHJlbGF0aXZlUGF0aCwgYmFzZVBhdGgpO1xyXG5cclxuXHRcdC8vIElmIHRoZSBwYXRocyBoYXZlIG5vdGhpbmcgaW4gY29tbW9uLCByZXR1cm4gYSByZWxhdGl2ZSBVUkwgd2l0aCB0aGUgYWJzb2x1dGUgcGF0aC5cclxuXHRcdGlmICghY29tbW9uKSB7XHJcblx0XHRcdHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwYXJlbnRzID0gYmFzZVBhcnRzLnBhdGhcclxuXHRcdFx0LnN1YnN0cmluZyhjb21tb24ubGVuZ3RoKVxyXG5cdFx0XHQucmVwbGFjZSgvW15cXC9dKiQvLCAnJylcclxuXHRcdFx0LnJlcGxhY2UoLy4qP1xcLy9nLCAnLi4vJyk7XHJcblxyXG5cdFx0cmVsYXRpdmVQYXJ0cy5wYXRoID0gKHBhcmVudHMgKyByZWxhdGl2ZVBhcnRzLnBhdGguc3Vic3RyaW5nKGNvbW1vbi5sZW5ndGgpKSB8fCAnLi8nO1xyXG5cclxuXHRcdHJldHVybiByZWxhdGl2ZS5idWlsZCgpO1xyXG5cdH07XHJcblxyXG5cdC8vIGNvbXBhcmluZyBVUklzXHJcblx0cC5lcXVhbHMgPSBmdW5jdGlvbih1cmkpIHtcclxuXHRcdHZhciBvbmUgPSB0aGlzLmNsb25lKCk7XHJcblx0XHR2YXIgdHdvID0gbmV3IFVSSSh1cmkpO1xyXG5cdFx0dmFyIG9uZV9tYXAgPSB7fTtcclxuXHRcdHZhciB0d29fbWFwID0ge307XHJcblx0XHR2YXIgY2hlY2tlZCA9IHt9O1xyXG5cdFx0dmFyIG9uZV9xdWVyeSwgdHdvX3F1ZXJ5LCBrZXk7XHJcblxyXG5cdFx0b25lLm5vcm1hbGl6ZSgpO1xyXG5cdFx0dHdvLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdC8vIGV4YWN0IG1hdGNoXHJcblx0XHRpZiAob25lLnRvU3RyaW5nKCkgPT09IHR3by50b1N0cmluZygpKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGV4dHJhY3QgcXVlcnkgc3RyaW5nXHJcblx0XHRvbmVfcXVlcnkgPSBvbmUucXVlcnkoKTtcclxuXHRcdHR3b19xdWVyeSA9IHR3by5xdWVyeSgpO1xyXG5cdFx0b25lLnF1ZXJ5KCcnKTtcclxuXHRcdHR3by5xdWVyeSgnJyk7XHJcblxyXG5cdFx0Ly8gZGVmaW5pdGVseSBub3QgZXF1YWwgaWYgbm90IGV2ZW4gbm9uLXF1ZXJ5IHBhcnRzIG1hdGNoXHJcblx0XHRpZiAob25lLnRvU3RyaW5nKCkgIT09IHR3by50b1N0cmluZygpKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBxdWVyeSBwYXJhbWV0ZXJzIGhhdmUgdGhlIHNhbWUgbGVuZ3RoLCBldmVuIGlmIHRoZXkncmUgcGVybXV0ZWRcclxuXHRcdGlmIChvbmVfcXVlcnkubGVuZ3RoICE9PSB0d29fcXVlcnkubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRvbmVfbWFwID0gVVJJLnBhcnNlUXVlcnkob25lX3F1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcclxuXHRcdHR3b19tYXAgPSBVUkkucGFyc2VRdWVyeSh0d29fcXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xyXG5cclxuXHRcdGZvciAoa2V5IGluIG9uZV9tYXApIHtcclxuXHRcdFx0aWYgKGhhc093bi5jYWxsKG9uZV9tYXAsIGtleSkpIHtcclxuXHRcdFx0XHRpZiAoIWlzQXJyYXkob25lX21hcFtrZXldKSkge1xyXG5cdFx0XHRcdFx0aWYgKG9uZV9tYXBba2V5XSAhPT0gdHdvX21hcFtrZXldKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCFhcnJheXNFcXVhbChvbmVfbWFwW2tleV0sIHR3b19tYXBba2V5XSkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNoZWNrZWRba2V5XSA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGtleSBpbiB0d29fbWFwKSB7XHJcblx0XHRcdGlmIChoYXNPd24uY2FsbCh0d29fbWFwLCBrZXkpKSB7XHJcblx0XHRcdFx0aWYgKCFjaGVja2VkW2tleV0pIHtcclxuXHRcdFx0XHRcdC8vIHR3byBjb250YWlucyBhIHBhcmFtZXRlciBub3QgcHJlc2VudCBpbiBvbmVcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9O1xyXG5cclxuXHQvLyBzdGF0ZVxyXG5cdHAuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gZnVuY3Rpb24odikge1xyXG5cdFx0dGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gISF2O1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxuXHJcblx0cC5lc2NhcGVRdWVyeVNwYWNlID0gZnVuY3Rpb24odikge1xyXG5cdFx0dGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSA9ICEhdjtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiBVUkk7XHJcbn0pKTsiLCJXb3JrZmxvdyA9IHt9XHJcblxyXG5ASW1hZ2VTaWduID0ge307XHJcblxyXG5AVHJhY2VzSGFuZGxlciA9IHt9O1xyXG5cclxuQFRyYWNlc1RlbXBsYXRlID0ge307XHJcblxyXG5ASW5zdGFuY2Vmb3JtVGVtcGxhdGUgPSB7fTtcclxuXHJcbkBJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZSA9IHt9O1xyXG5cclxuQEluc3RhbmNlU2lnblRleHQgPSB7fVxyXG5cclxuQFJlbGF0ZWRJbnN0YW5jZXMgPSB7fVxyXG5cclxuQFJlbGF0ZWRSZWNvcmRzID0ge31cclxuXHJcbkBJbnN0YW5jZU1hY3JvID0ge2NvbnRleHQ6IHt9fVxyXG5cclxuQFRyYWNlc01hbmFnZXIgPSB7fTtcclxuXHJcbkluc3RhbmNlU2lnblRleHQuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcgPSAoZmllbGRfZm9ybXVsYSktPlxyXG5cdHJldHVybiAoZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInt0cmFjZXMuXCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA+IC0xIHx8IGZpZWxkX2Zvcm11bGE/LmluZGV4T2YoXCJ7eWlqaWFubGFuOlwiKSA+IC0xIHx8IGZpZWxkX2Zvcm11bGE/LmluZGV4T2YoXCJ7XFxcInlpamlhbmxhblxcXCI6XCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInsneWlqaWFubGFuJzpcIikgPiAtMSlcclxuXHJcbkluc3RhbmNlU2lnblRleHQuaW5jbHVkZXNPcGluaW9uRmllbGQgPSAoZm9ybSwgZm9ybV92ZXJzaW9uKS0+XHJcblx0ZmllbGRfZm9ybXVsYXMgPSBuZXcgQXJyYXkoKTtcclxuXHJcblx0X2Zvcm1fdmVyc2lvbiA9IHt9XHJcblxyXG5cdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0X2Zvcm1fdmVyc2lvbiA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oZGIuZm9ybXMuZmluZE9uZSh7X2lkOiBmb3JtfSksIGZvcm1fdmVyc2lvbilcclxuXHRlbHNlXHJcblx0XHRfZm9ybV92ZXJzaW9uID0gZGIuZm9ybV92ZXJzaW9ucy5maW5kT25lKHtfaWQ6IGZvcm1fdmVyc2lvbiwgZm9ybTogZm9ybX0pXHJcblxyXG5cdGZpZWxkcyA9IF9mb3JtX3ZlcnNpb24/LmZpZWxkcyB8fCBbXVxyXG5cclxuXHRmaWVsZHMuZm9yRWFjaCAoZiktPlxyXG5cdFx0aWYgZi50eXBlID09ICd0YWJsZSdcclxuXHRcdFx0Y29uc29sZS5sb2cgJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJ1xyXG5cdFx0ZWxzZSBpZiBmLnR5cGUgPT0gJ3NlY3Rpb24nXHJcblx0XHRcdGY/LmZpZWxkcz8uZm9yRWFjaCAoZjEpLT5cclxuXHRcdFx0XHRmaWVsZF9mb3JtdWxhcy5wdXNoIGYxLmZvcm11bGFcclxuXHRcdGVsc2VcclxuXHRcdFx0ZmllbGRfZm9ybXVsYXMucHVzaCBmLmZvcm11bGFcclxuXHJcblx0Xy5zb21lIGZpZWxkX2Zvcm11bGFzLCAoZmllbGRfZm9ybXVsYSktPlxyXG5cdFx0cmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSlcclxuXHJcbiIsIiAgICAgICAgICAgICBcblxuV29ya2Zsb3cgPSB7fTtcblxudGhpcy5JbWFnZVNpZ24gPSB7fTtcblxudGhpcy5UcmFjZXNIYW5kbGVyID0ge307XG5cbnRoaXMuVHJhY2VzVGVtcGxhdGUgPSB7fTtcblxudGhpcy5JbnN0YW5jZWZvcm1UZW1wbGF0ZSA9IHt9O1xuXG50aGlzLkluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlID0ge307XG5cbnRoaXMuSW5zdGFuY2VTaWduVGV4dCA9IHt9O1xuXG50aGlzLlJlbGF0ZWRJbnN0YW5jZXMgPSB7fTtcblxudGhpcy5SZWxhdGVkUmVjb3JkcyA9IHt9O1xuXG50aGlzLkluc3RhbmNlTWFjcm8gPSB7XG4gIGNvbnRleHQ6IHt9XG59O1xuXG50aGlzLlRyYWNlc01hbmFnZXIgPSB7fTtcblxuSW5zdGFuY2VTaWduVGV4dC5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyA9IGZ1bmN0aW9uKGZpZWxkX2Zvcm11bGEpIHtcbiAgcmV0dXJuIChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7dHJhY2VzLlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xIHx8IChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7eWlqaWFubGFuOlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie1xcXCJ5aWppYW5sYW5cXFwiOlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwieyd5aWppYW5sYW4nOlwiKSA6IHZvaWQgMCkgPiAtMTtcbn07XG5cbkluc3RhbmNlU2lnblRleHQuaW5jbHVkZXNPcGluaW9uRmllbGQgPSBmdW5jdGlvbihmb3JtLCBmb3JtX3ZlcnNpb24pIHtcbiAgdmFyIF9mb3JtX3ZlcnNpb24sIGZpZWxkX2Zvcm11bGFzLCBmaWVsZHM7XG4gIGZpZWxkX2Zvcm11bGFzID0gbmV3IEFycmF5KCk7XG4gIF9mb3JtX3ZlcnNpb24gPSB7fTtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIF9mb3JtX3ZlcnNpb24gPSB1dWZsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmb3JtXG4gICAgfSksIGZvcm1fdmVyc2lvbik7XG4gIH0gZWxzZSB7XG4gICAgX2Zvcm1fdmVyc2lvbiA9IGRiLmZvcm1fdmVyc2lvbnMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZvcm1fdmVyc2lvbixcbiAgICAgIGZvcm06IGZvcm1cbiAgICB9KTtcbiAgfVxuICBmaWVsZHMgPSAoX2Zvcm1fdmVyc2lvbiAhPSBudWxsID8gX2Zvcm1fdmVyc2lvbi5maWVsZHMgOiB2b2lkIDApIHx8IFtdO1xuICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgdmFyIHJlZjtcbiAgICBpZiAoZi50eXBlID09PSAndGFibGUnKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coJ2lnbm9yZSBvcGluaW9uIGZpZWxkIGluIHRhYmxlJyk7XG4gICAgfSBlbHNlIGlmIChmLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgcmV0dXJuIGYgIT0gbnVsbCA/IChyZWYgPSBmLmZpZWxkcykgIT0gbnVsbCA/IHJlZi5mb3JFYWNoKGZ1bmN0aW9uKGYxKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9mb3JtdWxhcy5wdXNoKGYxLmZvcm11bGEpO1xuICAgICAgfSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaWVsZF9mb3JtdWxhcy5wdXNoKGYuZm9ybXVsYSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIF8uc29tZShmaWVsZF9mb3JtdWxhcywgZnVuY3Rpb24oZmllbGRfZm9ybXVsYSkge1xuICAgIHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpO1xuICB9KTtcbn07XG4iLCJkYi5hdXRoX3Rva2VucyA9IG5ldyBNZXRlb3IuQ29sbGVjdGlvbignYXV0aF90b2tlbnMnKSIsIkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZSA9IHt9O1xyXG5cclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbnN0YW5jZV9hdHRhY2htZW50ID0gXCJcIlwiXHJcblx0PHRyPlxyXG5cdFx0PHRkIGNsYXNzPVwiaW5zLWF0dGFjaC12aWV3XCI+XHJcblx0XHRcdDxhIGhyZWY9XCJ7e2luc19hdHRhY2hfZG93bmxvYWRfdXJsIF9pZCBhYnNvbHV0ZX19XCIgY2xhc3M9XCJpbnNfYXR0YWNoX2hyZWZcIiB0YXJnZXQ9XCJfcGFyZW50XCIgZGF0YS1uYW1lPVwie3t0aGlzLm5hbWV9fVwiIGRhdGEtdHlwZT1cInt7dGhpcy5vcmlnaW5hbC50eXBlfX1cIiBkYXRhLWlkPVwie3tfaWR9fVwiPnt7dGhpcy5uYW1lfX08L2E+XHJcblx0XHQ8L3RkPlxyXG5cdDwvdHI+XHJcblwiXCJcIlxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmU2VsZWN0VXNlclJlYWQgPSBcIlwiXCJcclxuXHQ8ZGl2IGNsYXNzPSdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50Jz57e3ZhbHVlfX08L2Rpdj5cclxuXCJcIlwiXHJcblxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwUmVhZCA9IFwiXCJcIlxyXG5cdDxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPlxyXG5cdFx0e3sjd2l0aCBnZXRGaWVsZCB0aGlzLm5hbWV9fVxyXG5cdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VjdGlvbid9fVxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0nc2VjdGlvbiBjYWxsb3V0IGNhbGxvdXQtZGVmYXVsdCc+XHJcblx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndGFibGUnfX1cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbCBwYW5lbC1kZWZhdWx0IHN0ZWVkb3MtdGFibGVcIj5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsLWJvZHlcIiBzdHlsZT1cInBhZGRpbmc6MHB4O1wiPlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwYW5lbC1oZWFkaW5nXCIgPlxyXG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsJz57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImRlc2NyaXB0aW9uXCI+e3t7ZGVzY3JpcHRpb259fX08L3NwYW4+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInJlYWRvbmx5LXRhYmxlXCIgc3R5bGU9XCJwYWRkaW5nOjBweDtvdmVyZmxvdy14OmF1dG87XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDx0YWJsZSB0eXBlPSd0YWJsZScgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1jb25kZW5zZWQgYXV0b2Zvcm0tdGFibGVcIiBzdHlsZT0nbWFyZ2luLWJvdHRvbTowcHg7JyB7e3RoaXMuYXR0c319IGlkPVwie3t0aGlzLmNvZGV9fVRhYmxlXCIgbmFtZT1cInt7dGhpcy5jb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e3RoaXMubmFtZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PHRoZWFkIGlkPVwie3t0aGlzLm5hbWV9fVRoZWFkXCIgbmFtZT1cInt7dGhpcy5uYW1lfX1UaGVhZFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVUaGVhZCB0aGlzfX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC90aGVhZD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGJvZHkgaWQ9XCJ7e3RoaXMubmFtZX19VGJvZHlcIiBuYW1lPVwie3t0aGlzLm5hbWV9fVRib2R5XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZUJvZHkgdGhpc319fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvdGJvZHk+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvdGFibGU+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdHt7I2lmIHNob3dMYWJlbH19XHJcblx0XHRcdFx0XHRcdDxsYWJlbD57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHR7ey9pZn19XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSd7e2dldENmQ2xhc3MgdGhpc319IGZvcm0tY29udHJvbCcgcmVhZG9ubHkgZGlzYWJsZWQ+e3t7Z2V0VmFsdWUgY29kZX19fTwvZGl2PlxyXG5cdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0e3svaWZ9fVxyXG5cdFx0e3svd2l0aH19XHJcblx0PC9kaXY+XHJcblwiXCJcIlxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwID0gXCJcIlwiXHJcblxyXG5cdHt7I3dpdGggZ2V0RmllbGQgdGhpcy5uYW1lfX1cclxuXHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3NlY3Rpb24nfX1cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0nc2VjdGlvbiBjYWxsb3V0IGNhbGxvdXQtZGVmYXVsdCc+XHJcblx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuICBcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsIHBhbmVsLWRlZmF1bHQgc3RlZWRvcy10YWJsZVwiPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicGFuZWwtYm9keVwiIHN0eWxlPVwicGFkZGluZzowcHg7XCI+XHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInBhbmVsLWhlYWRpbmdcIiA+XHJcblx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwnPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZGVzY3JpcHRpb25cIj57e3tkZXNjcmlwdGlvbn19fTwvc3Bhbj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicmVhZG9ubHktdGFibGVcIiBzdHlsZT1cInBhZGRpbmc6MHB4O292ZXJmbG93LXg6YXV0bztcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRhYmxlIHR5cGU9J3RhYmxlJyBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVwiIHN0eWxlPSdtYXJnaW4tYm90dG9tOjBweDsnIHt7dGhpcy5hdHRzfX0gaWQ9XCJ7e3RoaXMuY29kZX19VGFibGVcIiBuYW1lPVwie3t0aGlzLmNvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7dGhpcy5uYW1lfX1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGhlYWQgaWQ9XCJ7e3RoaXMubmFtZX19VGhlYWRcIiBuYW1lPVwie3t0aGlzLm5hbWV9fVRoZWFkXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZVRoZWFkIHRoaXN9fX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3RoZWFkPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDx0Ym9keSBpZD1cInt7dGhpcy5uYW1lfX1UYm9keVwiIG5hbWU9XCJ7e3RoaXMubmFtZX19VGJvZHlcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlQm9keSB0aGlzfX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2lucHV0J319XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCIgZGF0YS1yZXF1aXJlZD1cInt7I2lmIGlzX3JlcXVpcmVkfX10cnVle3svaWZ9fVwiPlxyXG5cdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHR7eyNpZiBpc190ZXh0YXJlYX19XHJcblx0XHRcdFx0XHRcdFx0XHQ8dGV4dGFyZWEgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIHt7Z2V0UGVybWlzc2lvbnMgY29kZX19IGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj48L3RleHRhcmVhPlxyXG5cdFx0XHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdFx0XHR7eyN1bmxlc3MgaXNfdGV4dGFyZWF9fVxyXG5cdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIHt7Z2V0UGVybWlzc2lvbnMgY29kZX19IGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuXHRcdFx0XHRcdFx0XHR7ey91bmxlc3N9fVxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdudW1iZXInfX1cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJudW1iZXJcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlJ319XHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXR5cGU9XCJkYXRlXCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlVGltZSd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInRleHRcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS10eXBlPSdkYXRldGltZScgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdwYXNzd29yZCd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgdGl0bGU9XCJ7e2dldExhYmVsIGNvZGV9fVwiIG5hbWU9XCJ7e2NvZGV9fVwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VsZWN0J319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxzZWxlY3QgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxvcHRpb24gdmFsdWU9XCJ7e3ZhbHVlfX1cIj57e2xhYmVsfX08L29wdGlvbj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9zZWxlY3Q+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3JhZGlvJ319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJhZi1yYWRpby1ncm91cFwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNlYWNoIG9wdGlvbnMgdGhpc319XHJcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lIGZpeC1pbmRlbnRcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJ7e3ZhbHVlfX1cIiBuYW1lPVwie3suLi9jb2RlfX1cIiBjbGFzcz1cInJhZGlvLWlubGluZSBmaXgtaW5kZW50XCI+IHt7bGFiZWx9fTwvbGFiZWw+XHJcbiAgICBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxyXG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ211bHRpU2VsZWN0J319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XCI3WlFuRHNYQkdvaFpNZXRBNVwiIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJhZi1jaGVja2JveC1ncm91cFwiIGRhdGEtc2NoZW1hLWtleT1cInt7Z2V0TGFiZWwgY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2VhY2ggb3B0aW9ucyB0aGlzfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJ7e3ZhbHVlfX1cIiBuYW1lPVwie3suLi9jb2RlfX1cIiBjbGFzcz1cImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XCI+IHt7bGFiZWx9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3VybCd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInVybFwiIHRpdGxlPVwie3tnZXRMYWJlbCBjb2RlfX1cIiBuYW1lPVwie3tjb2RlfX1cIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2VtYWlsJ319XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwiZW1haWxcIiB0aXRsZT1cInt7Z2V0TGFiZWwgY29kZX19XCIgbmFtZT1cInt7Y29kZX19XCIgZGF0YS1zY2hlbWEta2V5PVwie3tnZXRMYWJlbCBjb2RlfX1cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdjaGVja2JveCd9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVwiN1pRbkRzWEJHb2haTWV0QTVcIiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY2hlY2tib3hcIiBkYXRhLXNjaGVtYS1rZXk9XCJ7e2dldExhYmVsIGNvZGV9fVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJ0cnVlXCIgbmFtZT1cInt7Y29kZX19XCIgY2xhc3M9XCJjaGVja2JveC1pbmxpbmUgZml4LWluZGVudFwiPjwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cIjdaUW5Ec1hCR29oWk1ldEE1XCIgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0ne3tnZXRDZkNsYXNzIHRoaXN9fSBmb3JtLWNvbnRyb2wnIHJlYWRvbmx5IGRpc2FibGVkPnt7e2dldFZhbHVlIGNvZGV9fX08L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0e3svaWZ9fVxyXG5cdFx0e3svd2l0aH19XHJcblwiXCJcIlxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZSA9ICh0ZW1wYWx0ZU5hbWUsIHN0ZWVkb3NEYXRhKSAtPlxyXG5cdHRlbXBsYXRlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlW3RlbXBhbHRlTmFtZV1cclxuXHJcblx0dGVtcGxhdGVDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtpc0JvZHk6IHRydWV9KTtcclxuXHJcblx0dGVtcGxhdGVSZW5kZXJGdW5jdGlvbiA9IGV2YWwodGVtcGxhdGVDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0gPSBuZXcgQmxhemUuVGVtcGxhdGUodGVtcGFsdGVOYW1lLCB0ZW1wbGF0ZVJlbmRlckZ1bmN0aW9uKTtcclxuXHRUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdLnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHRUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdLmhlbHBlcnMgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVyc1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUluc3RhbmNlU2lnblRleHQgPSAoc3RlZWRvc0RhdGEpLT5cclxuXHRpbnN0YW5jZVNpZ25UZXh0SHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL2luc3RhbmNlX3NpZ25fdGV4dC5odG1sJylcclxuXHJcblx0aW5zdGFuY2VTaWduVGV4dENvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbnN0YW5jZVNpZ25UZXh0SHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHRpbnN0YW5jZVNpZ25UZXh0UmVuZGVyRnVuY3Rpb24gPSBldmFsKGluc3RhbmNlU2lnblRleHRDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZVNpZ25UZXh0XCIsIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbik7XHJcblx0VGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dC5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzIEluc3RhbmNlU2lnblRleHQuaGVscGVyc1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUltYWdlU2lnbiA9IChzdGVlZG9zRGF0YSkgLT5cclxuXHRpbWFnZVNpZ25IdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW1hZ2Vfc2lnbi5odG1sJylcclxuXHRpbWFnZVNpZ25Db21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoaW1hZ2VTaWduSHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cdGltYWdlU2lnblJlbmRlckZ1bmN0aW9uID0gZXZhbChpbWFnZVNpZ25Db21waWxlZCk7XHJcblx0VGVtcGxhdGUuaW1hZ2VTaWduID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiaW1hZ2VTaWduXCIsIGltYWdlU2lnblJlbmRlckZ1bmN0aW9uKTtcclxuXHRUZW1wbGF0ZS5pbWFnZVNpZ24uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cdFRlbXBsYXRlLmltYWdlU2lnbi5oZWxwZXJzIEltYWdlU2lnbi5oZWxwZXJzXHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlVHJhY2VzSGFubGRlciA9IChzdGVlZG9zRGF0YSkgLT5cclxuXHR0cmFjZXNIYW5sZGVySHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlc19oYW5kbGVyLmh0bWwnKVxyXG5cdHRyYWNlc0hhbmxkZXJDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodHJhY2VzSGFubGRlckh0bWwsIHtpc0JvZHk6IHRydWV9KTtcclxuXHR0cmFjZXNIYW5sZGVyUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRyYWNlc0hhbmxkZXJDb21waWxlZCk7XHJcblx0VGVtcGxhdGUuaW5zdGFuY2VfdHJhY2VzX2hhbmRsZXIgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZV90cmFjZXNfaGFuZGxlclwiLCB0cmFjZXNIYW5sZGVyUmVuZGVyRnVuY3Rpb24pO1xyXG5cdFRlbXBsYXRlLmluc3RhbmNlX3RyYWNlc19oYW5kbGVyLnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHRUZW1wbGF0ZS5pbnN0YW5jZV90cmFjZXNfaGFuZGxlci5oZWxwZXJzIFRyYWNlc0hhbmRsZXIuaGVscGVyc1xyXG5cclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbml0ID0gKHN0ZWVkb3NEYXRhKSAtPlxyXG5cdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZlNlbGVjdFVzZXJSZWFkXCIsIHN0ZWVkb3NEYXRhKTtcclxuXHJcblx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiYWZGb3JtR3JvdXBcIiwgc3RlZWRvc0RhdGEpO1xyXG5cclxuXHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiYWZGb3JtR3JvdXBSZWFkXCIsIHN0ZWVkb3NEYXRhKTtcclxuXHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJpbnN0YW5jZV9hdHRhY2htZW50XCIsIHthYnNvbHV0ZTogc3RlZWRvc0RhdGEuYWJzb2x1dGV9KTtcclxuXHRcdEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbWFnZVNpZ24oc3RlZWRvc0RhdGEpXHJcblx0XHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlVHJhY2VzSGFubGRlcihzdGVlZG9zRGF0YSk7XHJcblx0XHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW5zdGFuY2VTaWduVGV4dChzdGVlZG9zRGF0YSlcclxuXHJcbmdldExpbmtUZXh0ID0gKGl0ZW0sIGxhYmVsLCBkZXRhaWxfdXJsKS0+XHJcblx0aWYgZGV0YWlsX3VybFxyXG5cdFx0ZGV0YWlsX3VybCA9IGRldGFpbF91cmwucmVwbGFjZShcIntfaWR9XCIsIGl0ZW0uX2lkKVxyXG5cdFx0aWYgIS9eaHR0cChzPyk6XFwvXFwvLy50ZXN0KGRldGFpbF91cmwpXHJcblx0XHRcdGRldGFpbF91cmwgPSBTdGVlZG9zLmFic29sdXRlVXJsKGRldGFpbF91cmwpXHJcblx0XHRyZXR1cm4gJzxhIGhyZWY9XCInK2RldGFpbF91cmwrJ1wiIHRhcmdldD1cIl9ibGFua1wiPicrbGFiZWwrJzwvYT4nO1xyXG5cdGVsc2VcclxuXHRcdHJldHVybiBsYWJlbFxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFZhbHVlID0gKHZhbHVlLCBmaWVsZCwgbG9jYWxlLCB1dGNPZmZzZXQpIC0+XHJcblx0aWYgIXZhbHVlICYmIHZhbHVlICE9IGZhbHNlXHJcblx0XHRyZXR1cm4gJydcclxuXHRzd2l0Y2ggZmllbGQudHlwZVxyXG5cdFx0d2hlbiAnZW1haWwnXHJcblx0XHRcdHZhbHVlID0gaWYgdmFsdWUgdGhlbiAnPGEgaHJlZj1cXCdtYWlsdG86JyArIHZhbHVlICsgJ1xcJz4nICsgdmFsdWUgKyAnPC9hPicgZWxzZSAnJ1xyXG5cdFx0d2hlbiAndXJsJ1xyXG5cdFx0XHRpZiB2YWx1ZVxyXG5cdFx0XHRcdGlmIHZhbHVlLmluZGV4T2YoXCJodHRwXCIpID09IDBcclxuXHRcdFx0XHRcdHRyeVxyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IFwiPGEgaHJlZj0nXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XHJcblx0XHRcdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0XHRcdHZhbHVlID0gXCI8YSBocmVmPScnIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XHJcblxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHZhbHVlID0gXCI8YSBocmVmPSdodHRwOi8vXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR2YWx1ZSA9ICcnXHJcblx0XHR3aGVuICdncm91cCdcclxuXHRcdFx0aWYgZmllbGQuaXNfbXVsdGlzZWxlY3RcclxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlPy5nZXRQcm9wZXJ0eShcImZ1bGxuYW1lXCIpLnRvU3RyaW5nKClcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHZhbHVlID0gdmFsdWU/LmZ1bGxuYW1lXHJcblx0XHR3aGVuICd1c2VyJ1xyXG5cdFx0XHRpZiBmaWVsZC5pc19tdWx0aXNlbGVjdFxyXG5cdFx0XHRcdHZhbHVlID0gdmFsdWU/LmdldFByb3BlcnR5KFwibmFtZVwiKS50b1N0cmluZygpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlPy5uYW1lXHJcblx0XHR3aGVuICdwYXNzd29yZCdcclxuXHRcdFx0dmFsdWUgPSAnKioqKioqJ1xyXG5cdFx0d2hlbiAnY2hlY2tib3gnXHJcblx0XHRcdGlmIHZhbHVlICYmIHZhbHVlICE9ICdmYWxzZSdcclxuXHRcdFx0XHR2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X3llc1wiLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiLCB7fSwgbG9jYWxlKVxyXG5cdFx0d2hlbiAnZGF0ZVRpbWUnXHJcblx0XHRcdGlmIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA9PSAxNlxyXG5cdFx0XHRcdHQgPSB2YWx1ZS5zcGxpdChcIlRcIilcclxuXHRcdFx0XHR0MCA9IHRbMF0uc3BsaXQoXCItXCIpO1xyXG5cdFx0XHRcdHQxID0gdFsxXS5zcGxpdChcIjpcIik7XHJcblxyXG5cdFx0XHRcdHllYXIgPSB0MFswXTtcclxuXHRcdFx0XHRtb250aCA9IHQwWzFdO1xyXG5cdFx0XHRcdGRhdGUgPSB0MFsyXTtcclxuXHRcdFx0XHRob3VycyA9IHQxWzBdO1xyXG5cdFx0XHRcdHNlY29uZHMgPSB0MVsxXTtcclxuXHJcblx0XHRcdFx0dmFsdWUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRhdGUsIGhvdXJzLCBzZWNvbmRzKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSlcclxuXHJcblx0XHRcdHZhbHVlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUodmFsdWUsIHV0Y09mZnNldCk7XHJcblx0XHR3aGVuICdpbnB1dCdcclxuXHRcdFx0aWYgZmllbGQuaXNfdGV4dGFyZWFcclxuXHRcdFx0XHR2YWx1ZSA9IFNwYWNlYmFycy5TYWZlU3RyaW5nKE1hcmtkb3duKHZhbHVlKSlcclxuXHRcdHdoZW4gJ251bWJlcidcclxuXHRcdFx0aWYgdmFsdWUgb3IgdmFsdWUgPT0gMFxyXG5cdFx0XHRcdHZhbHVlID0gU3RlZWRvcy5udW1iZXJUb1N0cmluZyB2YWx1ZSwgZmllbGQuZGlnaXRzXHJcblx0XHR3aGVuICdvZGF0YSdcclxuXHRcdFx0ZGV0YWlsX3VybCA9IGZpZWxkLmRldGFpbF91cmxcclxuXHRcdFx0aWYgZmllbGQuaXNfbXVsdGlzZWxlY3RcclxuXHRcdFx0XHR2YWx1ZSA9IF8ubWFwIHZhbHVlLCAoaXRlbSktPlxyXG5cdFx0XHRcdFx0cmV0dXJuIGdldExpbmtUZXh0KGl0ZW0sIGl0ZW1bJ0BsYWJlbCddLCBkZXRhaWxfdXJsKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dmFsdWUgPSBnZXRMaW5rVGV4dCh2YWx1ZSwgdmFsdWVbJ0BsYWJlbCddLCBkZXRhaWxfdXJsKVxyXG5cdFx0d2hlbiAnaHRtbCdcclxuXHRcdFx0dmFsdWUgPSBpZiB2YWx1ZSB0aGVuIFwiPGRpdiBjbGFzcz1cXFwic3RlZWRvcy1odG1sXFxcIj4je3ZhbHVlfTwvZGl2PlwiIGVsc2UgJydcclxuXHJcblx0cmV0dXJuIHZhbHVlO1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsID0gKGZpZWxkcywgY29kZSkgLT5cclxuXHRmaWVsZCA9IGZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKVxyXG5cdGlmIGZpZWxkXHJcblx0XHRpZiBmaWVsZC5uYW1lXHJcblx0XHRcdHJldHVybiBmaWVsZC5uYW1lXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBmaWVsZC5jb2RlXHJcblxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlRm9ybVZlcnNpb24gPSAoaW5zdGFuY2UpLT5cclxuXHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcclxuXHJcblx0Zm9ybV92ZXJzaW9uID0ge31cclxuXHJcblx0Zm9ybV9maWVsZHMgPSBbXTtcclxuXHJcblx0aWYgZm9ybS5jdXJyZW50Ll9pZCA9PSBpbnN0YW5jZS5mb3JtX3ZlcnNpb25cclxuXHRcdGZvcm1fdmVyc2lvbiA9IGZvcm0uY3VycmVudFxyXG5cdGVsc2VcclxuXHRcdGZvcm1fdmVyc2lvbiA9IF8ud2hlcmUoZm9ybS5oaXN0b3J5cywge19pZDogaW5zdGFuY2UuZm9ybV92ZXJzaW9ufSlbMF1cclxuXHJcblx0Zm9ybV92ZXJzaW9uLmZpZWxkcy5mb3JFYWNoIChmaWVsZCktPlxyXG5cdFx0aWYgZmllbGQudHlwZSA9PSAnc2VjdGlvbidcclxuXHRcdFx0Zm9ybV9maWVsZHMucHVzaChmaWVsZCk7XHJcblx0XHRcdGlmIGZpZWxkLmZpZWxkc1xyXG5cdFx0XHRcdGZpZWxkLmZpZWxkcy5mb3JFYWNoIChmKSAtPlxyXG5cdFx0XHRcdFx0Zm9ybV9maWVsZHMucHVzaChmKTtcclxuXHRcdGVsc2UgaWYgZmllbGQudHlwZSA9PSAndGFibGUnXHJcblx0XHRcdGZpZWxkWydzZmllbGRzJ10gPSBmaWVsZFsnZmllbGRzJ11cclxuXHRcdFx0ZGVsZXRlIGZpZWxkWydmaWVsZHMnXVxyXG5cdFx0XHRmb3JtX2ZpZWxkcy5wdXNoKGZpZWxkKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0Zm9ybV9maWVsZHMucHVzaChmaWVsZCk7XHJcblxyXG5cdGZvcm1fdmVyc2lvbi5maWVsZHMgPSBmb3JtX2ZpZWxkcztcclxuXHJcblx0cmV0dXJuIGZvcm1fdmVyc2lvbjtcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRGbG93VmVyc2lvbiA9IChpbnN0YW5jZSktPlxyXG5cdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGluc3RhbmNlLmZsb3cpO1xyXG5cdGZsb3dfdmVyc2lvbiA9IHt9XHJcblx0aWYgZmxvdy5jdXJyZW50Ll9pZCA9PSBpbnN0YW5jZS5mbG93X3ZlcnNpb25cclxuXHRcdGZsb3dfdmVyc2lvbiA9IGZsb3cuY3VycmVudFxyXG5cdGVsc2VcclxuXHRcdGZsb3dfdmVyc2lvbiA9IF8ud2hlcmUoZmxvdy5oaXN0b3J5cywge19pZDogaW5zdGFuY2UuZmxvd192ZXJzaW9ufSlbMF1cclxuXHJcblx0cmV0dXJuIGZsb3dfdmVyc2lvbjtcclxuXHJcblxyXG5fZ2V0Vmlld0h0bWwgPSAocGF0aCkgLT5cclxuXHR2aWV3SHRtbCA9IEFzc2V0cy5nZXRUZXh0KHBhdGgpXHJcblxyXG5cdGlmIHZpZXdIdG1sXHJcblx0XHR2aWV3SHRtbCA9IHZpZXdIdG1sLnJlcGxhY2UoLzx0ZW1wbGF0ZVtcXHdcXHNcXFwiXFw9J10rPi9pLFwiXCIpLnJlcGxhY2UoLzxcXC90ZW1wbGF0ZT4vaSxcIlwiKVxyXG5cclxuXHRyZXR1cm4gdmlld0h0bWw7XHJcblxyXG5fZ2V0TG9jYWxlID0gKHVzZXIpLT5cclxuXHRpZiB1c2VyPy5sb2NhbGU/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xyXG5cdFx0bG9jYWxlID0gXCJ6aC1DTlwiXHJcblx0ZWxzZSBpZiB1c2VyPy5sb2NhbGU/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ2VuLXVzJ1xyXG5cdFx0bG9jYWxlID0gXCJlblwiXHJcblx0ZWxzZVxyXG5cdFx0bG9jYWxlID0gXCJ6aC1DTlwiXHJcblx0cmV0dXJuIGxvY2FsZVxyXG5cclxuXHJcbl9nZXRSZXF1aXJlZEZpZWxkcyA9IChmaWVsZHMsIHJldiktPlxyXG5cdGlmICFyZXZcclxuXHRcdHJldiA9IFtdO1xyXG5cclxuXHRmaWVsZHMuZm9yRWFjaCAoZmllbGQpLT5cclxuXHRcdGlmIGZpZWxkLnR5cGUgPT0gJ3NlY3Rpb24nXHJcblx0XHRcdF9nZXRSZXF1aXJlZEZpZWxkcyhmaWVsZC5maWVsZHMsIHJldilcclxuXHRcdGVsc2UgaWYgZmllbGQudHlwZSA9PSAndGFibGUnXHJcblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpZiBmaWVsZC5pc19yZXF1aXJlZFxyXG5cdFx0XHRcdHJldi5wdXNoIGZpZWxkLmNvZGVcclxuXHRyZXR1cm4gcmV2O1xyXG5cclxuX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzID0gKGZpZWxkcywgc3RlcHMpLT5cclxuXHRzdGFydFN0ZXAgPSBzdGVwcy5maW5kUHJvcGVydHlCeVBLKFwic3RlcF90eXBlXCIsXCJzdGFydFwiKVxyXG5cclxuXHRlZGl0YWJsZUNvZGUgPSBbXVxyXG5cclxuXHRfLmtleXMoc3RhcnRTdGVwLnBlcm1pc3Npb25zKS5mb3JFYWNoIChrZXkpLT5cclxuXHRcdGlmIHN0YXJ0U3RlcC5wZXJtaXNzaW9uc1trZXldID09ICdlZGl0YWJsZSdcclxuXHRcdFx0ZWRpdGFibGVDb2RlLnB1c2gga2V5XHJcblxyXG5cdHJldHVybiBlZGl0YWJsZUNvZGVcclxuXHJcbl9nZXRTdGFydFN0ZXBSZXF1aXJlZEZpZWxkcyA9IChmaWVsZHMsIHN0ZXBzKS0+XHJcblx0cmVxdWlyZWRGaWVsZHMgPSBfZ2V0UmVxdWlyZWRGaWVsZHMoZmllbGRzKVxyXG5cclxuXHRlZGl0YWJsZUNvZGUgPSBfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMoZmllbGRzLCBzdGVwcylcclxuXHJcblx0cmV0dXJuIF8uaW50ZXJzZWN0aW9uKHJlcXVpcmVkRmllbGRzLCBlZGl0YWJsZUNvZGUpXHJcblxyXG5fZ2V0VGVtcGxhdGVEYXRhID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxyXG5cdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlRm9ybVZlcnNpb24oaW5zdGFuY2UpXHJcblx0ZWxzZVxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oaW5zdGFuY2UpXHJcblxyXG5cdGxvY2FsZSA9IF9nZXRMb2NhbGUodXNlcilcclxuXHJcblx0c3RlZWRvc0RhdGEgPSB7fVxyXG5cclxuXHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdHN0ZWVkb3NEYXRhID0gXy5jbG9uZShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCkpXHJcblx0XHRzdGVlZG9zRGF0YS5pbnNuYW1lID0gaW5zdGFuY2UubmFtZVxyXG5cdFx0c3RlZWRvc0RhdGEuaW5zX3N0YXRlID0gaW5zdGFuY2Uuc3RhdGVcclxuXHRcdHN0ZWVkb3NEYXRhLmluc19maW5hbF9kZWNpc2lvbiA9IGluc3RhbmNlLmluc19maW5hbF9kZWNpc2lvblxyXG5cdFx0c3RlZWRvc0RhdGEuaW5zX2NvZGUgPSBpbnN0YW5jZS5jb2RlXHJcblx0XHRzdGVlZG9zRGF0YS5pbnNfaXNfYXJjaGl2ZWQgPSBpbnN0YW5jZS5pc19hcmNoaXZlZFxyXG5cdFx0c3RlZWRvc0RhdGEuaW5zX2lzX2RlbGV0ZWQgPSBpbnN0YW5jZS5pbnNfaXNfZGVsZXRlZFxyXG5cdFx0c3RlZWRvc0RhdGEuYXBwbGljYW50X25hbWUgPSBpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZVxyXG5cdFx0c3RlZWRvc0RhdGEuYXBwbGljYW50Q29udGV4dCA9IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lXHJcblxyXG5cdHN0ZWVkb3NEYXRhLmluc3RhbmNlID0gaW5zdGFuY2VcclxuXHRzdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb24gPSBmb3JtX3ZlcnNpb25cclxuXHRzdGVlZG9zRGF0YS5sb2NhbGUgPSBsb2NhbGVcclxuXHRzdGVlZG9zRGF0YS51dGNPZmZzZXQgPSB1c2VyLnV0Y09mZnNldFxyXG5cdHN0ZWVkb3NEYXRhLnNwYWNlID0gaW5zdGFuY2Uuc3BhY2VcclxuXHRzdGVlZG9zRGF0YS5zZXNzaW9uVXNlcklkID0gdXNlci5faWRcclxuXHJcblx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRpZiBvcHRpb25zPy5lZGl0YWJsZVxyXG5cdFx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZS5mb3JtfSlcclxuXHJcblx0XHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQ6IGluc3RhbmNlLmZsb3d9KVxyXG5cclxuXHRcdFx0c3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHMgPSBfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMoZm9ybS5jdXJyZW50LmZpZWxkcywgZmxvdy5jdXJyZW50LnN0ZXBzKTtcclxuXHJcblx0cmV0dXJuIHN0ZWVkb3NEYXRhO1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUgPSAoZGF0ZSwgdXRjT2Zmc2V0KS0+XHJcblx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRwYXNzaW5nID0gZmFsc2U7XHJcblx0ZWxzZVxyXG5cdFx0cGFzc2luZyA9IHRydWU7XHJcblxyXG5cdGlmICF1dGNPZmZzZXQgJiYgdXRjT2Zmc2V0ICE9MFxyXG5cdFx0dXRjT2Zmc2V0ID0gOFxyXG5cclxuXHRyZXR1cm4gbW9tZW50KGRhdGUpLnV0Y09mZnNldCh1dGNPZmZzZXQsIHBhc3NpbmcpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIik7XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxyXG5cclxuXHRzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKVxyXG5cclxuXHRzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IGZhbHNlO1xyXG5cclxuXHRpZiBvcHRpb25zPy5hYnNvbHV0ZVxyXG5cdFx0c3RlZWRvc0RhdGEuYWJzb2x1dGUgPSB0cnVlO1xyXG5cclxuXHRpbnN0YW5jZVRlbXBsYXRlID0gVGVtcGxhdGVNYW5hZ2VyLmdldFRlbXBsYXRlKGluc3RhbmNlLCBvcHRpb25zPy50ZW1wbGF0ZU5hbWUpO1xyXG5cclxuXHRpbnN0YW5jZVRlbXBsYXRlID0gaW5zdGFuY2VUZW1wbGF0ZS5yZXBsYWNlKC9hZlNlbGVjdFVzZXIvZyxcImFmU2VsZWN0VXNlclJlYWRcIilcclxuXHJcblx0aWYgIW9wdGlvbnM/LmVkaXRhYmxlXHJcblx0XHRpbnN0YW5jZVRlbXBsYXRlID0gaW5zdGFuY2VUZW1wbGF0ZS5yZXBsYWNlKC9hZkZvcm1Hcm91cC9nLFwiYWZGb3JtR3JvdXBSZWFkXCIpXHJcblxyXG5cdGluc3RhbmNlQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGluc3RhbmNlVGVtcGxhdGUsIHtpc0JvZHk6IHRydWV9KTtcclxuXHJcblx0aW5zdGFuY2VSZW5kZXJGdW5jdGlvbiA9IGV2YWwoaW5zdGFuY2VDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZV9yZWFkb25seV92aWV3XCIsIGluc3RhbmNlUmVuZGVyRnVuY3Rpb24pO1xyXG5cclxuXHRUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHJcblx0VGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldy5oZWxwZXJzIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnNcclxuXHJcblx0SW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmluaXQoc3RlZWRvc0RhdGEpO1xyXG5cclxuXHRib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldywgc3RlZWRvc0RhdGEpXHJcblxyXG5cdHJldHVybiBcIlwiXCJcclxuXHRcdDxkaXYgaWQ9J2luc3RhbmNlZm9ybScgPlxyXG5cdFx0XHQje2JvZHl9XHJcblx0XHQ8L2Rpdj5cclxuXHRcIlwiXCJcclxuXHJcbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRUcmFjZXNWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxyXG5cclxuXHRzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKVxyXG5cclxuXHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcclxuXHRpZiBmb3JtLmluc3RhbmNlX3N0eWxlID09IFwidGFibGVcIiB8fCBvcHRpb25zPy50ZW1wbGF0ZU5hbWUgPT0gXCJ0YWJsZVwiXHJcblx0XHR0cmFjZXNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvdHJhY2VzX3RhYmxlLmh0bWwnKVxyXG5cdGVsc2VcclxuXHRcdHRyYWNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS90cmFjZXMuaHRtbCcpXHJcblxyXG5cdHRyYWNlQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRyYWNlc0h0bWwsIHtpc0JvZHk6IHRydWV9KTtcclxuXHJcblx0dHJhY2VSZW5kZXJGdW5jdGlvbiA9IGV2YWwodHJhY2VDb21waWxlZCk7XHJcblxyXG5cdFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJ0cmFjZV9yZWFkb25seV92aWV3XCIsIHRyYWNlUmVuZGVyRnVuY3Rpb24pO1xyXG5cclxuXHRUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHJcblx0VGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldy5oZWxwZXJzIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnNcclxuXHJcblx0Ym9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnRyYWNlX3JlYWRvbmx5X3ZpZXcsIGluc3RhbmNlLnRyYWNlcylcclxuXHJcblx0cmV0dXJuIGJvZHk7XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0QXR0YWNobWVudFZpZXcgPSAodXNlciwgc3BhY2UsIGluc3RhbmNlKS0+XHJcblxyXG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXHJcblxyXG5cdGF0dGFjaG1lbnRIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW5zdGFuY2VfYXR0YWNobWVudHMuaHRtbCcpXHJcblxyXG5cdGF0dGFjaG1lbnRDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoYXR0YWNobWVudEh0bWwsIHtpc0JvZHk6IHRydWV9KTtcclxuXHJcblx0YXR0YWNobWVudFJlbmRlckZ1bmN0aW9uID0gZXZhbChhdHRhY2htZW50Q29tcGlsZWQpO1xyXG5cclxuXHRUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwiYXR0YWNobWVudHNfcmVhZG9ubHlfdmlld1wiLCBhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24pO1xyXG5cclxuXHRUZW1wbGF0ZS5hdHRhY2htZW50c19yZWFkb25seV92aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHJcblx0VGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldy5oZWxwZXJzIEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnNcclxuXHJcblx0Ym9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcpXHJcblxyXG5cdHJldHVybiBib2R5O1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFJlbGF0ZWRJbnN0YW5jZXNWaWV3ID0gKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyktPlxyXG5cdHN0ZWVkb3NEYXRhID0gX2dldFRlbXBsYXRlRGF0YSh1c2VyLCBzcGFjZSwgaW5zdGFuY2UpXHJcblxyXG5cdHN0ZWVkb3NEYXRhLmFic29sdXRlID0gZmFsc2U7XHJcblxyXG5cdGlmIG9wdGlvbnM/LmFic29sdXRlXHJcblx0XHRzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XHJcblxyXG5cdHJlbGF0ZWRJbnN0YW5jZXNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvcmVsYXRlZF9pbnN0YW5jZXMuaHRtbCcpXHJcblxyXG5cdHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUocmVsYXRlZEluc3RhbmNlc0h0bWwsIHtpc0JvZHk6IHRydWV9KTtcclxuXHJcblx0cmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uID0gZXZhbChyZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQpO1xyXG5cclxuXHRUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwicmVsYXRlZF9pbnN0YW5jZXNfdmlld1wiLCByZWxhdGVkSW5zdGFuY2VzUmVuZGVyRnVuY3Rpb24pO1xyXG5cclxuXHRUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGFcclxuXHJcblx0VGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldy5oZWxwZXJzIFJlbGF0ZWRJbnN0YW5jZXMuaGVscGVyc1xyXG5cclxuXHRib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldywgc3RlZWRvc0RhdGEpXHJcblxyXG5cdHJldHVybiBib2R5O1xyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFJlbGF0ZWRSZWNvcmRzVmlldyA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpLT5cclxuXHRzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKVxyXG5cclxuXHRzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IGZhbHNlO1xyXG5cclxuXHRpZiBvcHRpb25zPy5hYnNvbHV0ZVxyXG5cdFx0c3RlZWRvc0RhdGEuYWJzb2x1dGUgPSB0cnVlO1xyXG5cclxuXHRyZWxhdGVkUmVjb3Jkc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9yZWxhdGVkX3JlY29yZHMuaHRtbCcpXHJcblxyXG5cdHJlbGF0ZWRSZWNvcmRzQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHJlbGF0ZWRSZWNvcmRzSHRtbCwge2lzQm9keTogdHJ1ZX0pO1xyXG5cclxuXHRyZWxhdGVkUmVjb3Jkc1JlbmRlckZ1bmN0aW9uID0gZXZhbChyZWxhdGVkUmVjb3Jkc0NvbXBpbGVkKTtcclxuXHJcblx0VGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJyZWxhdGVkX3JlY29yZHNfdmlld1wiLCByZWxhdGVkUmVjb3Jkc1JlbmRlckZ1bmN0aW9uKTtcclxuXHJcblx0VGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YVxyXG5cclxuXHRUZW1wbGF0ZS5yZWxhdGVkX3JlY29yZHNfdmlldy5oZWxwZXJzIFJlbGF0ZWRSZWNvcmRzLmhlbHBlcnNcclxuXHJcblx0Ym9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnJlbGF0ZWRfcmVjb3Jkc192aWV3LCBzdGVlZG9zRGF0YSlcclxuXHJcblx0cmV0dXJuIGJvZHk7XHJcblxyXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0T25Mb2FkU2NyaXB0ID0gKGluc3RhbmNlKS0+XHJcblx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm1WZXJzaW9uKGluc3RhbmNlLmZvcm0sIGluc3RhbmNlLmZvcm1fdmVyc2lvbilcclxuXHJcblx0Zm9ybV9zY3JpcHQgPSBmb3JtX3ZlcnNpb24uZm9ybV9zY3JpcHQ7XHJcblxyXG5cdGlmIGZvcm1fc2NyaXB0ICYmIGZvcm1fc2NyaXB0LnJlcGxhY2UoL1xcbi9nLFwiXCIpLnJlcGxhY2UoL1xccy9nLFwiXCIpLmxlbmd0aCA+IDBcclxuXHRcdGZvcm1fc2NyaXB0ID0gXCJDb3JlRm9ybSA9IHt9O0NvcmVGb3JtLmluc3RhbmNlZm9ybSA9IHt9O1wiICsgZm9ybV9zY3JpcHRcclxuXHRcdGZvcm1fc2NyaXB0ICs9IFwiO2lmKENvcmVGb3JtLmZvcm1fT25Mb2FkKXt3aW5kb3cub25sb2FkID0gQ29yZUZvcm0uZm9ybV9PbkxvYWQoKTt9XCJcclxuXHRlbHNlXHJcblx0XHRmb3JtX3NjcmlwdCA9IFwiXCJcclxuXHJcblxyXG5cclxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCA9ICh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpLT5cclxuXHJcblx0Ym9keSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZVZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcclxuXHJcblx0b25Mb2FkU2NyaXB0ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldE9uTG9hZFNjcmlwdChpbnN0YW5jZSk7XHJcblxyXG5cdGNyZWF0b3JTZXJ2aWNlID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy53ZWJzZXJ2aWNlcz8uY3JlYXRvcj8udXJsXHJcblx0aW5zX3JlY29yZF9pZHMgPSBpbnN0YW5jZS5yZWNvcmRfaWRzXHJcblx0bG9jYWxlID0gX2dldExvY2FsZSh1c2VyKTtcclxuXHRvcGVuRmlsZVNjcmlwdCA9IFwiXCJcIlxyXG5cdFx0XHRpZih3aW5kb3cuaXNOb2RlICYmIGlzTm9kZSgpKXtcclxuXHRcdFx0XHRhdHRhY2hzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImluc19hdHRhY2hfaHJlZlwiKTtcclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYXR0YWNocy5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0XHRhdHRhY2ggPSBhdHRhY2hzW2ldO1xyXG5cdFx0XHRcdFx0YXR0YWNoLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcclxuXHRcdFx0XHRcdFx0aWYoaXNJbWFnZSh0aGlzLmRhdGFzZXQudHlwZSkgfHwgaXNIdG1sKHRoaXMuZGF0YXNldC50eXBlKSl7XHJcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRcdG9wZW5XaW5kb3coXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy9cIiArIHRoaXMuZGF0YXNldC5pZCk7XHJcblx0XHRcdFx0XHRcdH1lbHNlIGlmKG53X2NvcmUuY2FuT3BlbkZpbGUodGhpcy5kYXRhc2V0Lm5hbWUpKXtcclxuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcdFx0bndfY29yZS5vcGVuRmlsZSh0aGlzLmhyZWYsIHRoaXMuZGF0YXNldC5uYW1lKVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBmbG93ID0gXCIje2luc3RhbmNlLmZsb3d9XCI7XHJcblx0XHRcdHZhciBzcGFjZSA9IFwiI3tpbnN0YW5jZS5zcGFjZX1cIjtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIGdldENvb2tpZShuYW1lKXtcclxuXHRcdFx0XHRsZXQgcGF0dGVybiA9IFJlZ0V4cChuYW1lICsgXCI9LlteO10qXCIpXHJcblx0XHRcdFx0bGV0IG1hdGNoZWQgPSBkb2N1bWVudC5jb29raWUubWF0Y2gocGF0dGVybilcclxuXHRcdFx0XHRpZihtYXRjaGVkKXtcclxuXHRcdFx0XHRcdGxldCBjb29raWUgPSBtYXRjaGVkWzBdLnNwbGl0KCc9JylcclxuXHRcdFx0XHRcdHJldHVybiBjb29raWVbMV1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuICcnXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciByZWNvcmRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImlucy1yZWxhdGVkLXJlY29yZHNcIik7XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCByZWNvcmRzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRcdHZhciByZWNvcmQgPSByZWNvcmRzW2ldO1xyXG5cdFx0XHRcdFx0cmVjb3JkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcclxuXHRcdFx0XHRcdFx0dmFyIGNyZWF0b3JTZXJ2aWNlID0gXCIje2NyZWF0b3JTZXJ2aWNlfVwiXHJcblx0XHRcdFx0XHRcdHZhciBpbnNfcmVjb3JkX2lkcyA9ICN7SlNPTi5zdHJpbmdpZnkoaW5zX3JlY29yZF9pZHMpfVxyXG5cdFx0XHRcdFx0XHRpZihjcmVhdG9yU2VydmljZSAmJiBpbnNfcmVjb3JkX2lkcyAmJiBpbnNfcmVjb3JkX2lkcy5sZW5ndGggPiAwKXtcclxuXHRcdFx0XHRcdFx0XHR2YXIgb2JqY2V0TmFtZSA9IGluc19yZWNvcmRfaWRzWzBdLm9cclxuXHRcdFx0XHRcdFx0XHR2YXIgaWQgPSBpbnNfcmVjb3JkX2lkc1swXS5pZHNbMF1cclxuXHRcdFx0XHRcdFx0XHR2YXIgdW9iaiA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdHVvYmpbXCJYLVVzZXItSWRcIl0gPSBnZXRDb29raWUoXCJYLVVzZXItSWRcIik7XHJcblx0XHRcdFx0XHRcdFx0dW9ialtcIlgtQXV0aC1Ub2tlblwiXSA9IGdldENvb2tpZShcIlgtQXV0aC1Ub2tlblwiKTtcclxuXHRcdFx0XHRcdFx0XHRyZWRpcmVjdFVybCA9IGNyZWF0b3JTZXJ2aWNlICsgXCJhcHAvLS9cIiArIG9iamNldE5hbWUgKyBcIi92aWV3L1wiICsgaWQgKyBcIj9cIiArICQucGFyYW0odW9iaik7XHJcblx0XHRcdFx0XHRcdFx0b3BlbldpbmRvdyhyZWRpcmVjdFVybCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XCJcIlwiO1xyXG5cclxuXHJcblx0aWYgIVN0ZWVkb3MuaXNNb2JpbGUoKVxyXG5cdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XHJcblx0XHRpZiBmb3JtPy5pbnN0YW5jZV9zdHlsZSA9PSAndGFibGUnXHJcblx0XHRcdGluc3RhbmNlX3N0eWxlID0gXCJpbnN0YW5jZS10YWJsZVwiXHJcblxyXG5cdGlmIG9wdGlvbnM/LnRlbXBsYXRlTmFtZSA9PSAndGFibGUnXHJcblx0XHRpbnN0YW5jZV9zdHlsZSA9IFwiaW5zdGFuY2UtdGFibGVcIlxyXG5cclxuXHRpZiBvcHRpb25zPy5pbnN0YW5jZV9zdHlsZVxyXG5cdFx0aW5zdGFuY2Vfc3R5bGUgPSBvcHRpb25zLmluc3RhbmNlX3N0eWxlXHJcblxyXG5cdGlmICFvcHRpb25zIHx8IG9wdGlvbnMuc2hvd1RyYWNlID09IHRydWVcclxuXHRcdHRyYWNlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFRyYWNlc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKVxyXG5cdGVsc2VcclxuXHRcdHRyYWNlID0gXCJcIlxyXG5cclxuXHRpbnN0YW5jZUJveFN0eWxlID0gXCJcIjtcclxuXHJcblx0aWYgaW5zdGFuY2UgJiYgaW5zdGFuY2UuZmluYWxfZGVjaXNpb25cclxuXHRcdGlmIGluc3RhbmNlLmZpbmFsX2RlY2lzaW9uID09IFwiYXBwcm92ZWRcIlxyXG5cdFx0XHRpbnN0YW5jZUJveFN0eWxlID0gXCJib3gtc3VjY2Vzc1wiXHJcblx0XHRlbHNlIGlmIChpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PSBcInJlamVjdGVkXCIpXHJcblx0XHRcdGluc3RhbmNlQm94U3R5bGUgPSBcImJveC1kYW5nZXJcIlxyXG5cdGlmICFvcHRpb25zIHx8IG9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzID09IHRydWVcclxuXHRcdGF0dGFjaG1lbnQgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0QXR0YWNobWVudFZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKVxyXG5cdFx0cmVsYXRlZF9pbnN0YW5jZXMgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKVxyXG5cdFx0cmVsYXRlZF9yZWNvcmRzID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFJlbGF0ZWRSZWNvcmRzVmlldyh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblx0ZWxzZVxyXG5cdFx0YXR0YWNobWVudCA9IFwiXCJcclxuXHRcdHJlbGF0ZWRfaW5zdGFuY2VzID0gXCJcIlxyXG5cdFx0cmVsYXRlZF9yZWNvcmRzID0gXCJcIlxyXG5cclxuXHJcblx0d2lkdGggPSBcIjk2MHB4XCJcclxuXHQjXHTlpoLmnpznu5l0YWJsZeeahHBhcmVudOiuvue9rndpZHRo77yM5YiZ5Lya5a+86Ie06Zi/6YeM5LqR6YKu566x5pi+56S6dGFibGUg5byC5bi4XHJcblx0aWYgb3B0aW9ucz8ud2lkdGhcclxuXHRcdHdpZHRoID0gXCJcIlxyXG5cclxuXHRjc3NIcmVmID0gTWV0ZW9yLmFic29sdXRlVXJsKFwic3RlZWRvcy1jc3NcIilcclxuXHJcblx0YWxsQ3NzTGluayA9IFwiXCJcIjxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBjbGFzcz1cIl9fbWV0ZW9yLWNzc19fXCIgaHJlZj1cIiN7Y3NzSHJlZn1cIj5cIlwiXCJcclxuXHJcblx0dHJhY2VDaGVjayA9IFwiXCJcclxuXHRpZiAhXy5pc0VtcHR5KHRyYWNlKVxyXG5cdFx0dHJhY2VDaGVjayA9IFwiY2hlY2tlZFwiXHJcblx0aWYgb3B0aW9ucz8udGFnZ2VyID09ICdlbWFpbCcgfHwgb3B0aW9ucz8uZWRpdGFibGVcclxuXHRcdHNob3dUcmFjZXNCdG4gPSBcIlwiXHJcblx0ZWxzZVxyXG5cdFx0c2hvd1RyYWNlc0J0biA9IFwiXCJcIlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwibmF2aWdhdGlvbi1iYXIgYnRuLWdyb3VwIG5vLXByaW50XCIgc3R5bGU9XCJtaW4td2lkdGg6IDYwMHB4OyB6LWluZGV4OiA5OTlcIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicHJpbnQtdG9vbFwiPlxyXG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY2J4LWxhYmVsXCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY2J4LXByaW50IGNieC1wcmludC1hdHRhY2htZW50c1wiIGlkPVwiY2J4LXByaW50LWF0dGFjaG1lbnRzXCIgY2hlY2tlZD1cImNoZWNrZWRcIj48c3Bhbj4je1RBUGkxOG4uX18oJ2luc3RhbmNlX2F0dGFjaG1lbnQnLCB7fSwgbG9jYWxlKX08L3NwYW4+PC9sYWJlbD5cclxuXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNieC1sYWJlbFwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImNieC1wcmludCBjYngtcHJpbnQtdHJhY2VzXCIgaWQ9XCJjYngtcHJpbnQtdHJhY2VzXCIgY2hlY2tlZD1cIiN7dHJhY2VDaGVja31cIj48c3Bhbj4je1RBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmFsX2hpc3RvcnknLCB7fSwgbG9jYWxlKX08L3NwYW4+PC9sYWJlbD5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdFwiXCJcIlxyXG5cclxuXHRzaG93VHJhY2VzU2NyaXB0ID0gXCJcIlwiXHJcblx0XHQkKCBkb2N1bWVudCApLnJlYWR5KGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC10cmFjZXMnKTtcclxuXHRcdFx0dmFyIHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpbnN0YW5jZS10cmFjZXMnKVswXTtcclxuXHRcdFx0aWYgKGIgJiYgYi5jaGVja2VkICYmIHQpe1xyXG5cdFx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xyXG5cdFx0XHR9IGVsc2UgaWYodCl7XHJcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihiKXtcclxuXHRcdFx0XHRiLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0aWYgKGUudGFyZ2V0LmNoZWNrZWQpe1xyXG5cdFx0XHRcdFx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IGJsb2NrOydcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHR2YXIgYXR0YWNobWVudHNDaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYngtcHJpbnQtYXR0YWNobWVudHMnKTtcclxuXHRcdFx0dmFyIGF0dGFjaG1lbnRzVmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2F0dGFjaG1lbnRzLXNlY3Rpb24nKVswXTtcclxuXHRcdFx0aWYgKGF0dGFjaG1lbnRzQ2hlY2tib3ggJiYgYXR0YWNobWVudHNDaGVja2JveC5jaGVja2VkICYmIGF0dGFjaG1lbnRzVmlldyl7XHJcblx0XHRcdFx0YXR0YWNobWVudHNWaWV3LnN0eWxlID0gJ2Rpc3BsYXk6IGJsb2NrOydcclxuXHRcdFx0fSBlbHNlIGlmKGF0dGFjaG1lbnRzVmlldyl7XHJcblx0XHRcdFx0YXR0YWNobWVudHNWaWV3LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGF0dGFjaG1lbnRzQ2hlY2tib3gpe1xyXG5cdFx0XHRcdGF0dGFjaG1lbnRzQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZSl7XHJcblx0XHRcdFx0XHRpZiAoZS50YXJnZXQuY2hlY2tlZCl7XHJcblx0XHRcdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRhdHRhY2htZW50c1ZpZXcuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcIlwiXCJcclxuXHJcblx0aWYgb3B0aW9ucz8uc3R5bGVzXHJcblx0XHRhbGxDc3NMaW5rID0gXCJcIlxyXG5cclxuXHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZS5mb3JtfSk7XHJcblx0Zm9ybURlc2NyaXB0aW9uSHRtbCA9IFwiXCJcclxuXHRpZiBmb3JtXHJcblx0XHRmb3JtRGVzY3JpcHRpb24gPSBmb3JtLmRlc2NyaXB0aW9uXHJcblx0XHRpZiBmb3JtRGVzY3JpcHRpb25cclxuXHRcdFx0Zm9ybURlc2NyaXB0aW9uID0gZm9ybURlc2NyaXB0aW9uLnJlcGxhY2UoL1xcbi9nLFwiPGJyLz5cIilcclxuXHRcdFx0Zm9ybURlc2NyaXB0aW9uSHRtbCA9IFwiXCJcIlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJib3gtaGVhZGVyICB3aXRoLWJvcmRlciBpbnN0YW5jZS1oZWFkZXJcIj5cclxuXHRcdFx0XHRcdDxkaXY+XHJcblx0XHRcdFx0XHRcdCN7Zm9ybURlc2NyaXB0aW9ufVxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XCJcIlwiXHJcblxyXG5cdGh0bWwgPSBcIlwiXCJcclxuXHRcdDwhRE9DVFlQRSBodG1sPlxyXG5cdFx0PGh0bWw+XHJcblx0XHRcdDxoZWFkPlxyXG5cdFx0XHRcdDxtZXRhIGh0dHAtZXF1aXY9XCJDb250ZW50LVR5cGVcIiBjb250ZW50PVwidGV4dC9odG1sOyBjaGFyc2V0PVVURi04XCIvPlxyXG5cdFx0XHRcdCN7YWxsQ3NzTGlua31cclxuXHRcdFx0XHQ8c2NyaXB0IHNyYz1cImh0dHBzOi8vd3d3LnN0ZWVkb3MuY29tL3dlYnNpdGUvbGlicy9qcXVlcnkubWluLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxyXG5cdFx0XHRcdDxzY3JpcHQgc3JjPVwiL2pzL253X2NvcmUuanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+PC9zY3JpcHQ+XHJcblx0XHRcdFx0I3tvcHRpb25zLnBsdWdpbnMgfHwgXCJcIn1cclxuXHJcblx0XHRcdFx0PHN0eWxlPlxyXG5cdFx0XHRcdFx0LnN0ZWVkb3N7XHJcblx0XHRcdFx0XHRcdHdpZHRoOiAje3dpZHRofTtcclxuXHRcdFx0XHRcdFx0bWFyZ2luLWxlZnQ6IGF1dG87XHJcblx0XHRcdFx0XHRcdG1hcmdpbi1yaWdodDogYXV0bztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQuaW5zdGFuY2UtdmlldyAuaW5zdGFuY2UtbmFtZXtcclxuXHRcdFx0XHRcdFx0ZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnRcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC5ib3gtdG9vbHN7XHJcblx0XHRcdFx0XHRcdGRpc3BsYXk6IG5vbmU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQuYm94LmNvbGxhcHNlZC1ib3ggLmJveC1ib2R5LC5ib3guY29sbGFwc2VkLWJveCAuYm94LWZvb3RlciB7XHJcblx0XHRcdFx0XHQgIGRpc3BsYXk6IGJsb2NrO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGJvZHl7XHJcblx0XHRcdFx0XHRcdGJhY2tncm91bmQ6IGF6dXJlICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Lmluc3RhbmNlLXZpZXcgLmluc3RhbmNlLXRyYWNlc3tcclxuXHRcdFx0XHRcdFx0cGFkZGluZy1sZWZ0OiAxNXB4O1xyXG5cdFx0XHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAxNXB4O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCN7b3B0aW9ucz8uc3R5bGVzIHx8IFwiXCJ9XHJcblx0XHRcdFx0PC9zdHlsZT5cclxuXHRcdFx0PC9oZWFkPlxyXG5cdFx0XHQ8Ym9keT5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwic3RlZWRvcyB3b3JrZmxvdyBpbnN0YW5jZS1wcmludFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInNraW4tZ3JlZW4gc2tpbi1hZG1pbi1sdGVcIj5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cIndyYXBwZXJcIj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29udGVudC13cmFwcGVyXCI+XHJcblx0XHRcdFx0XHRcdFx0XHQje3Nob3dUcmFjZXNCdG59XHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5zdGFuY2UtcHJpbnRcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImluc3RhbmNlICN7aW5zdGFuY2Vfc3R5bGV9XCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGZvcm0gbmFtZT1cImluc3RhbmNlRm9ybVwiPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImluc3RhbmNlLWZvcm0gYm94ICN7aW5zdGFuY2VCb3hTdHlsZX1cIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3tmb3JtRGVzY3JpcHRpb25IdG1sfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYm94LWJvZHlcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLW1kLTEyXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdhdHRhY2htZW50cy1zZWN0aW9uJz5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3thdHRhY2htZW50fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQje3JlbGF0ZWRfaW5zdGFuY2VzfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQje3JlbGF0ZWRfcmVjb3Jkc31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0I3tib2R5fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvZm9ybT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQje3RyYWNlfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9ib2R5PlxyXG5cdFx0XHQ8c2NyaXB0PiN7b3BlbkZpbGVTY3JpcHR9OyN7b25Mb2FkU2NyaXB0fTsje3Nob3dUcmFjZXNTY3JpcHR9PC9zY3JpcHQ+XHJcblx0XHQ8L2h0bWw+XHJcblx0XCJcIlwiXHJcblxyXG5cdHJldHVybiBodG1sIiwidmFyIF9nZXRMb2NhbGUsIF9nZXRSZXF1aXJlZEZpZWxkcywgX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzLCBfZ2V0U3RhcnRTdGVwUmVxdWlyZWRGaWVsZHMsIF9nZXRUZW1wbGF0ZURhdGEsIF9nZXRWaWV3SHRtbCwgZ2V0TGlua1RleHQ7ICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlID0ge307XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5pbnN0YW5jZV9hdHRhY2htZW50ID0gXCI8dHI+XFxuXHQ8dGQgY2xhc3M9XFxcImlucy1hdHRhY2gtdmlld1xcXCI+XFxuXHRcdDxhIGhyZWY9XFxcInt7aW5zX2F0dGFjaF9kb3dubG9hZF91cmwgX2lkIGFic29sdXRlfX1cXFwiIGNsYXNzPVxcXCJpbnNfYXR0YWNoX2hyZWZcXFwiIHRhcmdldD1cXFwiX3BhcmVudFxcXCIgZGF0YS1uYW1lPVxcXCJ7e3RoaXMubmFtZX19XFxcIiBkYXRhLXR5cGU9XFxcInt7dGhpcy5vcmlnaW5hbC50eXBlfX1cXFwiIGRhdGEtaWQ9XFxcInt7X2lkfX1cXFwiPnt7dGhpcy5uYW1lfX08L2E+XFxuXHQ8L3RkPlxcbjwvdHI+XCI7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5hZlNlbGVjdFVzZXJSZWFkID0gXCI8ZGl2IGNsYXNzPSdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50Jz57e3ZhbHVlfX08L2Rpdj5cIjtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmFmRm9ybUdyb3VwUmVhZCA9IFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+XFxuXHR7eyN3aXRoIGdldEZpZWxkIHRoaXMubmFtZX19XFxuXHRcdHt7I2lmIGVxdWFscyB0eXBlICdzZWN0aW9uJ319XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdzZWN0aW9uIGNhbGxvdXQgY2FsbG91dC1kZWZhdWx0Jz5cXG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2ZfbGFiZWwgdGhpc319PC9sYWJlbD5cXG5cdFx0XHRcdFx0PHA+e3t7ZGVzY3JpcHRpb259fX08L3A+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0e3tlbHNlfX1cXG5cdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAndGFibGUnfX1cXG5cdFx0XHRcdDxkaXYgY2xhc3M9XFxcInBhbmVsIHBhbmVsLWRlZmF1bHQgc3RlZWRvcy10YWJsZVxcXCI+XFxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInBhbmVsLWJvZHlcXFwiIHN0eWxlPVxcXCJwYWRkaW5nOjBweDtcXFwiPlxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInBhbmVsLWhlYWRpbmdcXFwiID5cXG5cdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCc+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XFxcImRlc2NyaXB0aW9uXFxcIj57e3tkZXNjcmlwdGlvbn19fTwvc3Bhbj5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJyZWFkb25seS10YWJsZVxcXCIgc3R5bGU9XFxcInBhZGRpbmc6MHB4O292ZXJmbG93LXg6YXV0bztcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHQ8dGFibGUgdHlwZT0ndGFibGUnIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1jb25kZW5zZWQgYXV0b2Zvcm0tdGFibGVcXFwiIHN0eWxlPSdtYXJnaW4tYm90dG9tOjBweDsnIHt7dGhpcy5hdHRzfX0gaWQ9XFxcInt7dGhpcy5jb2RlfX1UYWJsZVxcXCIgbmFtZT1cXFwie3t0aGlzLmNvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e3RoaXMubmFtZX19XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGhlYWQgaWQ9XFxcInt7dGhpcy5uYW1lfX1UaGVhZFxcXCIgbmFtZT1cXFwie3t0aGlzLm5hbWV9fVRoZWFkXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlVGhlYWQgdGhpc319fVxcblx0XHRcdFx0XHRcdFx0XHRcdDwvdGhlYWQ+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PHRib2R5IGlkPVxcXCJ7e3RoaXMubmFtZX19VGJvZHlcXFwiIG5hbWU9XFxcInt7dGhpcy5uYW1lfX1UYm9keVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7e3tnZXRUYWJsZUJvZHkgdGhpc319fVxcblx0XHRcdFx0XHRcdFx0XHRcdDwvdGJvZHk+XFxuXHRcdFx0XHRcdFx0XHRcdDwvdGFibGU+XFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdHt7I2lmIHNob3dMYWJlbH19XFxuXHRcdFx0XHRcdDxsYWJlbD57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHR7ey9pZn19XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSd7e2dldENmQ2xhc3MgdGhpc319IGZvcm0tY29udHJvbCcgcmVhZG9ubHkgZGlzYWJsZWQ+e3t7Z2V0VmFsdWUgY29kZX19fTwvZGl2Plxcblx0XHRcdHt7L2lmfX1cXG5cdFx0e3svaWZ9fVxcblx0e3svd2l0aH19XFxuPC9kaXY+XCI7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5hZkZvcm1Hcm91cCA9IFwiXFxue3sjd2l0aCBnZXRGaWVsZCB0aGlzLm5hbWV9fVxcblx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnc2VjdGlvbid9fVxcblx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0PGRpdiBjbGFzcz0nc2VjdGlvbiBjYWxsb3V0IGNhbGxvdXQtZGVmYXVsdCc+XFxuXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tmX2xhYmVsIHRoaXN9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdDxwPnt7e2Rlc2NyaXB0aW9ufX19PC9wPlxcblx0XHRcdFx0PC9kaXY+XFxuICBcdFx0XHRcdDwvZGl2Plxcblx0XHR7e2Vsc2V9fVxcblx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd0YWJsZSd9fVxcblx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwgcGFuZWwtZGVmYXVsdCBzdGVlZG9zLXRhYmxlXFxcIj5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtYm9keVxcXCIgc3R5bGU9XFxcInBhZGRpbmc6MHB4O1xcXCI+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwicGFuZWwtaGVhZGluZ1xcXCIgPlxcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsJz57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cXFwiZGVzY3JpcHRpb25cXFwiPnt7e2Rlc2NyaXB0aW9ufX19PC9zcGFuPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcInJlYWRvbmx5LXRhYmxlXFxcIiBzdHlsZT1cXFwicGFkZGluZzowcHg7b3ZlcmZsb3cteDphdXRvO1xcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDx0YWJsZSB0eXBlPSd0YWJsZScgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCBhdXRvZm9ybS10YWJsZVxcXCIgc3R5bGU9J21hcmdpbi1ib3R0b206MHB4Oycge3t0aGlzLmF0dHN9fSBpZD1cXFwie3t0aGlzLmNvZGV9fVRhYmxlXFxcIiBuYW1lPVxcXCJ7e3RoaXMuY29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7dGhpcy5uYW1lfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdDx0aGVhZCBpZD1cXFwie3t0aGlzLm5hbWV9fVRoZWFkXFxcIiBuYW1lPVxcXCJ7e3RoaXMubmFtZX19VGhlYWRcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3t7Z2V0VGFibGVUaGVhZCB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90aGVhZD5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGJvZHkgaWQ9XFxcInt7dGhpcy5uYW1lfX1UYm9keVxcXCIgbmFtZT1cXFwie3t0aGlzLm5hbWV9fVRib2R5XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHt7e2dldFRhYmxlQm9keSB0aGlzfX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC90Ym9keT5cXG5cdFx0XHRcdFx0XHRcdFx0PC90YWJsZT5cXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2lucHV0J319XFxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIGRhdGEtcmVxdWlyZWQ9XFxcInt7I2lmIGlzX3JlcXVpcmVkfX10cnVle3svaWZ9fVxcXCI+XFxuXHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0e3sjaWYgaXNfdGV4dGFyZWF9fVxcblx0XHRcdFx0XHRcdFx0PHRleHRhcmVhIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIHt7Z2V0UGVybWlzc2lvbnMgY29kZX19IGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPjwvdGV4dGFyZWE+XFxuXHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdHt7I3VubGVzcyBpc190ZXh0YXJlYX19XFxuXHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIge3tnZXRQZXJtaXNzaW9ucyBjb2RlfX0gZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0e3svdW5sZXNzfX1cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAnbnVtYmVyJ319XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHRpdGxlPVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgbmFtZT1cXFwie3tjb2RlfX1cXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlJ319XFxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiB0aXRsZT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXR5cGU9XFxcImRhdGVcXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICdkYXRlVGltZSd9fVxcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS10eXBlPSdkYXRldGltZScgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3Bhc3N3b3JkJ319XFxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJwYXNzd29yZFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ3NlbGVjdCd9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8c2VsZWN0IG5hbWU9XFxcInt7Y29kZX19XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNlYWNoIG9wdGlvbnMgdGhpc319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8b3B0aW9uIHZhbHVlPVxcXCJ7e3ZhbHVlfX1cXFwiPnt7bGFiZWx9fTwvb3B0aW9uPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2VhY2h9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3NlbGVjdD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7eyNpZiBlcXVhbHMgdHlwZSAncmFkaW8nfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGZvcj1cXFwiN1pRbkRzWEJHb2haTWV0QTVcXFwiIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57e2dldExhYmVsIGNvZGV9fTwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiYWYtcmFkaW8tZ3JvdXBcXFwiIGRhdGEtc2NoZW1hLWtleT1cXFwie3tnZXRMYWJlbCBjb2RlfX1cXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVxcXCJyYWRpby1pbmxpbmUgZml4LWluZGVudFxcXCI+PGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiB2YWx1ZT1cXFwie3t2YWx1ZX19XFxcIiBuYW1lPVxcXCJ7ey4uL2NvZGV9fVxcXCIgY2xhc3M9XFxcInJhZGlvLWlubGluZSBmaXgtaW5kZW50XFxcIj4ge3tsYWJlbH19PC9sYWJlbD5cXG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cXG4gICAgXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ211bHRpU2VsZWN0J319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImFmLWNoZWNrYm94LWdyb3VwXFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjZWFjaCBvcHRpb25zIHRoaXN9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XFxcImNoZWNrYm94LWlubGluZSBmaXgtaW5kZW50XFxcIj48aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIHZhbHVlPVxcXCJ7e3ZhbHVlfX1cXFwiIG5hbWU9XFxcInt7Li4vY29kZX19XFxcIiBjbGFzcz1cXFwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcXFwiPiB7e2xhYmVsfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7ey9lYWNofX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7I2lmIGVxdWFscyB0eXBlICd1cmwnfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9XFxcInVybFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7e2Vsc2V9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2VtYWlsJ319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dCB0eXBlPVxcXCJlbWFpbFxcXCIgdGl0bGU9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIiBuYW1lPVxcXCJ7e2NvZGV9fVxcXCIgZGF0YS1zY2hlbWEta2V5PVxcXCJ7e2dldExhYmVsIGNvZGV9fVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3sjaWYgZXF1YWxzIHR5cGUgJ2NoZWNrYm94J319XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgZm9yPVxcXCI3WlFuRHNYQkdvaFpNZXRBNVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7Z2V0TGFiZWwgY29kZX19PC9sYWJlbD5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImNoZWNrYm94XFxcIiBkYXRhLXNjaGVtYS1rZXk9XFxcInt7Z2V0TGFiZWwgY29kZX19XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsIHN0eWxlPVxcXCJ3aWR0aDogMTAwJTtcXFwiPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgdmFsdWU9XFxcInRydWVcXFwiIG5hbWU9XFxcInt7Y29kZX19XFxcIiBjbGFzcz1cXFwiY2hlY2tib3gtaW5saW5lIGZpeC1pbmRlbnRcXFwiPjwvbGFiZWw+XFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3tlbHNlfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBmb3I9XFxcIjdaUW5Ec1hCR29oWk1ldEE1XFxcIiBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3tnZXRMYWJlbCBjb2RlfX08L2xhYmVsPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0ne3tnZXRDZkNsYXNzIHRoaXN9fSBmb3JtLWNvbnRyb2wnIHJlYWRvbmx5IGRpc2FibGVkPnt7e2dldFZhbHVlIGNvZGV9fX08L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0XHRcdHt7L2lmfX1cXG5cdFx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdFx0e3svaWZ9fVxcblx0XHRcdHt7L2lmfX1cXG5cdFx0e3svaWZ9fVxcblx0e3svd2l0aH19XCI7XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUgPSBmdW5jdGlvbih0ZW1wYWx0ZU5hbWUsIHN0ZWVkb3NEYXRhKSB7XG4gIHZhciB0ZW1wbGF0ZSwgdGVtcGxhdGVDb21waWxlZCwgdGVtcGxhdGVSZW5kZXJGdW5jdGlvbjtcbiAgdGVtcGxhdGUgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGVbdGVtcGFsdGVOYW1lXTtcbiAgdGVtcGxhdGVDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUodGVtcGxhdGUsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIHRlbXBsYXRlUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRlbXBsYXRlQ29tcGlsZWQpO1xuICBUZW1wbGF0ZVt0ZW1wYWx0ZU5hbWVdID0gbmV3IEJsYXplLlRlbXBsYXRlKHRlbXBhbHRlTmFtZSwgdGVtcGxhdGVSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0uc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgcmV0dXJuIFRlbXBsYXRlW3RlbXBhbHRlTmFtZV0uaGVscGVycyhJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzKTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbnN0YW5jZVNpZ25UZXh0ID0gZnVuY3Rpb24oc3RlZWRvc0RhdGEpIHtcbiAgdmFyIGluc3RhbmNlU2lnblRleHRDb21waWxlZCwgaW5zdGFuY2VTaWduVGV4dEh0bWwsIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbjtcbiAgaW5zdGFuY2VTaWduVGV4dEh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbnN0YW5jZV9zaWduX3RleHQuaHRtbCcpO1xuICBpbnN0YW5jZVNpZ25UZXh0Q29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGluc3RhbmNlU2lnblRleHRIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICBpbnN0YW5jZVNpZ25UZXh0UmVuZGVyRnVuY3Rpb24gPSBldmFsKGluc3RhbmNlU2lnblRleHRDb21waWxlZCk7XG4gIFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJpbnN0YW5jZVNpZ25UZXh0XCIsIGluc3RhbmNlU2lnblRleHRSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlU2lnblRleHQuaGVscGVycyhJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMpO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZUltYWdlU2lnbiA9IGZ1bmN0aW9uKHN0ZWVkb3NEYXRhKSB7XG4gIHZhciBpbWFnZVNpZ25Db21waWxlZCwgaW1hZ2VTaWduSHRtbCwgaW1hZ2VTaWduUmVuZGVyRnVuY3Rpb247XG4gIGltYWdlU2lnbkh0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9pbWFnZV9zaWduLmh0bWwnKTtcbiAgaW1hZ2VTaWduQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGltYWdlU2lnbkh0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIGltYWdlU2lnblJlbmRlckZ1bmN0aW9uID0gZXZhbChpbWFnZVNpZ25Db21waWxlZCk7XG4gIFRlbXBsYXRlLmltYWdlU2lnbiA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImltYWdlU2lnblwiLCBpbWFnZVNpZ25SZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmltYWdlU2lnbi5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICByZXR1cm4gVGVtcGxhdGUuaW1hZ2VTaWduLmhlbHBlcnMoSW1hZ2VTaWduLmhlbHBlcnMpO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZVRyYWNlc0hhbmxkZXIgPSBmdW5jdGlvbihzdGVlZG9zRGF0YSkge1xuICB2YXIgdHJhY2VzSGFubGRlckNvbXBpbGVkLCB0cmFjZXNIYW5sZGVySHRtbCwgdHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uO1xuICB0cmFjZXNIYW5sZGVySHRtbCA9IF9nZXRWaWV3SHRtbCgnY2xpZW50L3ZpZXdzL2luc3RhbmNlL3RyYWNlc19oYW5kbGVyLmh0bWwnKTtcbiAgdHJhY2VzSGFubGRlckNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0cmFjZXNIYW5sZGVySHRtbCwge1xuICAgIGlzQm9keTogdHJ1ZVxuICB9KTtcbiAgdHJhY2VzSGFubGRlclJlbmRlckZ1bmN0aW9uID0gZXZhbCh0cmFjZXNIYW5sZGVyQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS5pbnN0YW5jZV90cmFjZXNfaGFuZGxlciA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlX3RyYWNlc19oYW5kbGVyXCIsIHRyYWNlc0hhbmxkZXJSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmluc3RhbmNlX3RyYWNlc19oYW5kbGVyLnN0ZWVkb3NEYXRhID0gc3RlZWRvc0RhdGE7XG4gIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZV90cmFjZXNfaGFuZGxlci5oZWxwZXJzKFRyYWNlc0hhbmRsZXIuaGVscGVycyk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuaW5pdCA9IGZ1bmN0aW9uKHN0ZWVkb3NEYXRhKSB7XG4gIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZlNlbGVjdFVzZXJSZWFkXCIsIHN0ZWVkb3NEYXRhKTtcbiAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGUoXCJhZkZvcm1Hcm91cFwiLCBzdGVlZG9zRGF0YSk7XG4gIH1cbiAgSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmNyZWF0ZShcImFmRm9ybUdyb3VwUmVhZFwiLCBzdGVlZG9zRGF0YSk7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlKFwiaW5zdGFuY2VfYXR0YWNobWVudFwiLCB7XG4gICAgICBhYnNvbHV0ZTogc3RlZWRvc0RhdGEuYWJzb2x1dGVcbiAgICB9KTtcbiAgICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlSW1hZ2VTaWduKHN0ZWVkb3NEYXRhKTtcbiAgICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuY3JlYXRlVHJhY2VzSGFubGRlcihzdGVlZG9zRGF0YSk7XG4gICAgcmV0dXJuIEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5jcmVhdGVJbnN0YW5jZVNpZ25UZXh0KHN0ZWVkb3NEYXRhKTtcbiAgfVxufTtcblxuZ2V0TGlua1RleHQgPSBmdW5jdGlvbihpdGVtLCBsYWJlbCwgZGV0YWlsX3VybCkge1xuICBpZiAoZGV0YWlsX3VybCkge1xuICAgIGRldGFpbF91cmwgPSBkZXRhaWxfdXJsLnJlcGxhY2UoXCJ7X2lkfVwiLCBpdGVtLl9pZCk7XG4gICAgaWYgKCEvXmh0dHAocz8pOlxcL1xcLy8udGVzdChkZXRhaWxfdXJsKSkge1xuICAgICAgZGV0YWlsX3VybCA9IFN0ZWVkb3MuYWJzb2x1dGVVcmwoZGV0YWlsX3VybCk7XG4gICAgfVxuICAgIHJldHVybiAnPGEgaHJlZj1cIicgKyBkZXRhaWxfdXJsICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPicgKyBsYWJlbCArICc8L2E+JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBmaWVsZCwgbG9jYWxlLCB1dGNPZmZzZXQpIHtcbiAgdmFyIGRhdGUsIGRldGFpbF91cmwsIGUsIGhvdXJzLCBtb250aCwgc2Vjb25kcywgdCwgdDAsIHQxLCB5ZWFyO1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSBmYWxzZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdlbWFpbCc6XG4gICAgICB2YWx1ZSA9IHZhbHVlID8gJzxhIGhyZWY9XFwnbWFpbHRvOicgKyB2YWx1ZSArICdcXCc+JyArIHZhbHVlICsgJzwvYT4nIDogJyc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1cmwnOlxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFwiPGEgaHJlZj0nXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICAgIHZhbHVlID0gXCI8YSBocmVmPScnIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gXCI8YSBocmVmPSdodHRwOi8vXCIgKyBlbmNvZGVVUkkodmFsdWUpICsgXCInIHRhcmdldD0nX2JsYW5rJz5cIiArIHZhbHVlICsgXCI8L2E+XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdncm91cCc6XG4gICAgICBpZiAoZmllbGQuaXNfbXVsdGlzZWxlY3QpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZ2V0UHJvcGVydHkoXCJmdWxsbmFtZVwiKS50b1N0cmluZygpIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUuZnVsbG5hbWUgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1c2VyJzpcbiAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKSA6IHZvaWQgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLm5hbWUgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICB2YWx1ZSA9ICcqKioqKionO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgaWYgKHZhbHVlICYmIHZhbHVlICE9PSAnZmFsc2UnKSB7XG4gICAgICAgIHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiLCB7fSwgbG9jYWxlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RhdGVUaW1lJzpcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPT09IDE2KSB7XG4gICAgICAgIHQgPSB2YWx1ZS5zcGxpdChcIlRcIik7XG4gICAgICAgIHQwID0gdFswXS5zcGxpdChcIi1cIik7XG4gICAgICAgIHQxID0gdFsxXS5zcGxpdChcIjpcIik7XG4gICAgICAgIHllYXIgPSB0MFswXTtcbiAgICAgICAgbW9udGggPSB0MFsxXTtcbiAgICAgICAgZGF0ZSA9IHQwWzJdO1xuICAgICAgICBob3VycyA9IHQxWzBdO1xuICAgICAgICBzZWNvbmRzID0gdDFbMV07XG4gICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUodmFsdWUsIHV0Y09mZnNldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpZiAoZmllbGQuaXNfdGV4dGFyZWEpIHtcbiAgICAgICAgdmFsdWUgPSBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bih2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IFN0ZWVkb3MubnVtYmVyVG9TdHJpbmcodmFsdWUsIGZpZWxkLmRpZ2l0cyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdvZGF0YSc6XG4gICAgICBkZXRhaWxfdXJsID0gZmllbGQuZGV0YWlsX3VybDtcbiAgICAgIGlmIChmaWVsZC5pc19tdWx0aXNlbGVjdCkge1xuICAgICAgICB2YWx1ZSA9IF8ubWFwKHZhbHVlLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGdldExpbmtUZXh0KGl0ZW0sIGl0ZW1bJ0BsYWJlbCddLCBkZXRhaWxfdXJsKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGdldExpbmtUZXh0KHZhbHVlLCB2YWx1ZVsnQGxhYmVsJ10sIGRldGFpbF91cmwpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaHRtbCc6XG4gICAgICB2YWx1ZSA9IHZhbHVlID8gXCI8ZGl2IGNsYXNzPVxcXCJzdGVlZG9zLWh0bWxcXFwiPlwiICsgdmFsdWUgKyBcIjwvZGl2PlwiIDogJyc7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldExhYmVsID0gZnVuY3Rpb24oZmllbGRzLCBjb2RlKSB7XG4gIHZhciBmaWVsZDtcbiAgZmllbGQgPSBmaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSk7XG4gIGlmIChmaWVsZCkge1xuICAgIGlmIChmaWVsZC5uYW1lKSB7XG4gICAgICByZXR1cm4gZmllbGQubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpZWxkLmNvZGU7XG4gICAgfVxuICB9XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbiA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBmb3JtLCBmb3JtX2ZpZWxkcywgZm9ybV92ZXJzaW9uO1xuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcbiAgZm9ybV92ZXJzaW9uID0ge307XG4gIGZvcm1fZmllbGRzID0gW107XG4gIGlmIChmb3JtLmN1cnJlbnQuX2lkID09PSBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pIHtcbiAgICBmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgZm9ybV92ZXJzaW9uID0gXy53aGVyZShmb3JtLmhpc3RvcnlzLCB7XG4gICAgICBfaWQ6IGluc3RhbmNlLmZvcm1fdmVyc2lvblxuICAgIH0pWzBdO1xuICB9XG4gIGZvcm1fdmVyc2lvbi5maWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCkge1xuICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VjdGlvbicpIHtcbiAgICAgIGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgaWYgKGZpZWxkLmZpZWxkcykge1xuICAgICAgICByZXR1cm4gZmllbGQuZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgICAgICAgIHJldHVybiBmb3JtX2ZpZWxkcy5wdXNoKGYpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpZWxkLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgIGZpZWxkWydzZmllbGRzJ10gPSBmaWVsZFsnZmllbGRzJ107XG4gICAgICBkZWxldGUgZmllbGRbJ2ZpZWxkcyddO1xuICAgICAgcmV0dXJuIGZvcm1fZmllbGRzLnB1c2goZmllbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm9ybV9maWVsZHMucHVzaChmaWVsZCk7XG4gICAgfVxuICB9KTtcbiAgZm9ybV92ZXJzaW9uLmZpZWxkcyA9IGZvcm1fZmllbGRzO1xuICByZXR1cm4gZm9ybV92ZXJzaW9uO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEZsb3dWZXJzaW9uID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgdmFyIGZsb3csIGZsb3dfdmVyc2lvbjtcbiAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XG4gIGZsb3dfdmVyc2lvbiA9IHt9O1xuICBpZiAoZmxvdy5jdXJyZW50Ll9pZCA9PT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uKSB7XG4gICAgZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50O1xuICB9IGVsc2Uge1xuICAgIGZsb3dfdmVyc2lvbiA9IF8ud2hlcmUoZmxvdy5oaXN0b3J5cywge1xuICAgICAgX2lkOiBpbnN0YW5jZS5mbG93X3ZlcnNpb25cbiAgICB9KVswXTtcbiAgfVxuICByZXR1cm4gZmxvd192ZXJzaW9uO1xufTtcblxuX2dldFZpZXdIdG1sID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgdmlld0h0bWw7XG4gIHZpZXdIdG1sID0gQXNzZXRzLmdldFRleHQocGF0aCk7XG4gIGlmICh2aWV3SHRtbCkge1xuICAgIHZpZXdIdG1sID0gdmlld0h0bWwucmVwbGFjZSgvPHRlbXBsYXRlW1xcd1xcc1xcXCJcXD0nXSs+L2ksIFwiXCIpLnJlcGxhY2UoLzxcXC90ZW1wbGF0ZT4vaSwgXCJcIik7XG4gIH1cbiAgcmV0dXJuIHZpZXdIdG1sO1xufTtcblxuX2dldExvY2FsZSA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgdmFyIGxvY2FsZSwgcmVmLCByZWYxO1xuICBpZiAoKHVzZXIgIT0gbnVsbCA/IChyZWYgPSB1c2VyLmxvY2FsZSkgIT0gbnVsbCA/IHJlZi50b0xvY2FsZUxvd2VyQ2FzZSgpIDogdm9pZCAwIDogdm9pZCAwKSA9PT0gJ3poLWNuJykge1xuICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgfSBlbHNlIGlmICgodXNlciAhPSBudWxsID8gKHJlZjEgPSB1c2VyLmxvY2FsZSkgIT0gbnVsbCA/IHJlZjEudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHZvaWQgMCA6IHZvaWQgMCkgPT09ICdlbi11cycpIHtcbiAgICBsb2NhbGUgPSBcImVuXCI7XG4gIH0gZWxzZSB7XG4gICAgbG9jYWxlID0gXCJ6aC1DTlwiO1xuICB9XG4gIHJldHVybiBsb2NhbGU7XG59O1xuXG5fZ2V0UmVxdWlyZWRGaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMsIHJldikge1xuICBpZiAoIXJldikge1xuICAgIHJldiA9IFtdO1xuICB9XG4gIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgcmV0dXJuIF9nZXRSZXF1aXJlZEZpZWxkcyhmaWVsZC5maWVsZHMsIHJldik7XG4gICAgfSBlbHNlIGlmIChmaWVsZC50eXBlID09PSAndGFibGUnKSB7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZpZWxkLmlzX3JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiByZXYucHVzaChmaWVsZC5jb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV2O1xufTtcblxuX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzID0gZnVuY3Rpb24oZmllbGRzLCBzdGVwcykge1xuICB2YXIgZWRpdGFibGVDb2RlLCBzdGFydFN0ZXA7XG4gIHN0YXJ0U3RlcCA9IHN0ZXBzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJzdGVwX3R5cGVcIiwgXCJzdGFydFwiKTtcbiAgZWRpdGFibGVDb2RlID0gW107XG4gIF8ua2V5cyhzdGFydFN0ZXAucGVybWlzc2lvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKHN0YXJ0U3RlcC5wZXJtaXNzaW9uc1trZXldID09PSAnZWRpdGFibGUnKSB7XG4gICAgICByZXR1cm4gZWRpdGFibGVDb2RlLnB1c2goa2V5KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZWRpdGFibGVDb2RlO1xufTtcblxuX2dldFN0YXJ0U3RlcFJlcXVpcmVkRmllbGRzID0gZnVuY3Rpb24oZmllbGRzLCBzdGVwcykge1xuICB2YXIgZWRpdGFibGVDb2RlLCByZXF1aXJlZEZpZWxkcztcbiAgcmVxdWlyZWRGaWVsZHMgPSBfZ2V0UmVxdWlyZWRGaWVsZHMoZmllbGRzKTtcbiAgZWRpdGFibGVDb2RlID0gX2dldFN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzKGZpZWxkcywgc3RlcHMpO1xuICByZXR1cm4gXy5pbnRlcnNlY3Rpb24ocmVxdWlyZWRGaWVsZHMsIGVkaXRhYmxlQ29kZSk7XG59O1xuXG5fZ2V0VGVtcGxhdGVEYXRhID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBmbG93LCBmb3JtLCBmb3JtX3ZlcnNpb24sIGxvY2FsZSwgc3RlZWRvc0RhdGE7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBmb3JtX3ZlcnNpb24gPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbihpbnN0YW5jZSk7XG4gIH0gZWxzZSB7XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oaW5zdGFuY2UpO1xuICB9XG4gIGxvY2FsZSA9IF9nZXRMb2NhbGUodXNlcik7XG4gIHN0ZWVkb3NEYXRhID0ge307XG4gIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICBzdGVlZG9zRGF0YSA9IF8uY2xvbmUoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpKTtcbiAgICBzdGVlZG9zRGF0YS5pbnNuYW1lID0gaW5zdGFuY2UubmFtZTtcbiAgICBzdGVlZG9zRGF0YS5pbnNfc3RhdGUgPSBpbnN0YW5jZS5zdGF0ZTtcbiAgICBzdGVlZG9zRGF0YS5pbnNfZmluYWxfZGVjaXNpb24gPSBpbnN0YW5jZS5pbnNfZmluYWxfZGVjaXNpb247XG4gICAgc3RlZWRvc0RhdGEuaW5zX2NvZGUgPSBpbnN0YW5jZS5jb2RlO1xuICAgIHN0ZWVkb3NEYXRhLmluc19pc19hcmNoaXZlZCA9IGluc3RhbmNlLmlzX2FyY2hpdmVkO1xuICAgIHN0ZWVkb3NEYXRhLmluc19pc19kZWxldGVkID0gaW5zdGFuY2UuaW5zX2lzX2RlbGV0ZWQ7XG4gICAgc3RlZWRvc0RhdGEuYXBwbGljYW50X25hbWUgPSBpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZTtcbiAgICBzdGVlZG9zRGF0YS5hcHBsaWNhbnRDb250ZXh0ID0gaW5zdGFuY2UuYXBwbGljYW50X25hbWU7XG4gIH1cbiAgc3RlZWRvc0RhdGEuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uID0gZm9ybV92ZXJzaW9uO1xuICBzdGVlZG9zRGF0YS5sb2NhbGUgPSBsb2NhbGU7XG4gIHN0ZWVkb3NEYXRhLnV0Y09mZnNldCA9IHVzZXIudXRjT2Zmc2V0O1xuICBzdGVlZG9zRGF0YS5zcGFjZSA9IGluc3RhbmNlLnNwYWNlO1xuICBzdGVlZG9zRGF0YS5zZXNzaW9uVXNlcklkID0gdXNlci5faWQ7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5lZGl0YWJsZSA6IHZvaWQgMCkge1xuICAgICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlLmZvcm1cbiAgICAgIH0pO1xuICAgICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlLmZsb3dcbiAgICAgIH0pO1xuICAgICAgc3RlZWRvc0RhdGEuc3RhcnRTdGVwRWRpdGFibGVGaWVsZHMgPSBfZ2V0U3RhcnRTdGVwRWRpdGFibGVGaWVsZHMoZm9ybS5jdXJyZW50LmZpZWxkcywgZmxvdy5jdXJyZW50LnN0ZXBzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0ZWVkb3NEYXRhO1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUgPSBmdW5jdGlvbihkYXRlLCB1dGNPZmZzZXQpIHtcbiAgdmFyIHBhc3Npbmc7XG4gIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICBwYXNzaW5nID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcGFzc2luZyA9IHRydWU7XG4gIH1cbiAgaWYgKCF1dGNPZmZzZXQgJiYgdXRjT2Zmc2V0ICE9PSAwKSB7XG4gICAgdXRjT2Zmc2V0ID0gODtcbiAgfVxuICByZXR1cm4gbW9tZW50KGRhdGUpLnV0Y09mZnNldCh1dGNPZmZzZXQsIHBhc3NpbmcpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIik7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0SW5zdGFuY2VWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCBpbnN0YW5jZUNvbXBpbGVkLCBpbnN0YW5jZVJlbmRlckZ1bmN0aW9uLCBpbnN0YW5jZVRlbXBsYXRlLCBzdGVlZG9zRGF0YTtcbiAgc3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyk7XG4gIHN0ZWVkb3NEYXRhLmFic29sdXRlID0gZmFsc2U7XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmFic29sdXRlIDogdm9pZCAwKSB7XG4gICAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSB0cnVlO1xuICB9XG4gIGluc3RhbmNlVGVtcGxhdGUgPSBUZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUoaW5zdGFuY2UsIG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMudGVtcGxhdGVOYW1lIDogdm9pZCAwKTtcbiAgaW5zdGFuY2VUZW1wbGF0ZSA9IGluc3RhbmNlVGVtcGxhdGUucmVwbGFjZSgvYWZTZWxlY3RVc2VyL2csIFwiYWZTZWxlY3RVc2VyUmVhZFwiKTtcbiAgaWYgKCEob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5lZGl0YWJsZSA6IHZvaWQgMCkpIHtcbiAgICBpbnN0YW5jZVRlbXBsYXRlID0gaW5zdGFuY2VUZW1wbGF0ZS5yZXBsYWNlKC9hZkZvcm1Hcm91cC9nLCBcImFmRm9ybUdyb3VwUmVhZFwiKTtcbiAgfVxuICBpbnN0YW5jZUNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZShpbnN0YW5jZVRlbXBsYXRlLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICBpbnN0YW5jZVJlbmRlckZ1bmN0aW9uID0gZXZhbChpbnN0YW5jZUNvbXBpbGVkKTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcImluc3RhbmNlX3JlYWRvbmx5X3ZpZXdcIiwgaW5zdGFuY2VSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmluc3RhbmNlX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUuaW5zdGFuY2VfcmVhZG9ubHlfdmlldy5oZWxwZXJzKEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMpO1xuICBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuaW5pdChzdGVlZG9zRGF0YSk7XG4gIGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS5pbnN0YW5jZV9yZWFkb25seV92aWV3LCBzdGVlZG9zRGF0YSk7XG4gIHJldHVybiBcIjxkaXYgaWQ9J2luc3RhbmNlZm9ybScgPlxcblx0XCIgKyBib2R5ICsgXCJcXG48L2Rpdj5cIjtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRUcmFjZXNWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCBmb3JtLCBzdGVlZG9zRGF0YSwgdHJhY2VDb21waWxlZCwgdHJhY2VSZW5kZXJGdW5jdGlvbiwgdHJhY2VzSHRtbDtcbiAgc3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSk7XG4gIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuICBpZiAoZm9ybS5pbnN0YW5jZV9zdHlsZSA9PT0gXCJ0YWJsZVwiIHx8IChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnRlbXBsYXRlTmFtZSA6IHZvaWQgMCkgPT09IFwidGFibGVcIikge1xuICAgIHRyYWNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS90cmFjZXNfdGFibGUuaHRtbCcpO1xuICB9IGVsc2Uge1xuICAgIHRyYWNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS90cmFjZXMuaHRtbCcpO1xuICB9XG4gIHRyYWNlQ29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKHRyYWNlc0h0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIHRyYWNlUmVuZGVyRnVuY3Rpb24gPSBldmFsKHRyYWNlQ29tcGlsZWQpO1xuICBUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3ID0gbmV3IEJsYXplLlRlbXBsYXRlKFwidHJhY2VfcmVhZG9ubHlfdmlld1wiLCB0cmFjZVJlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUudHJhY2VfcmVhZG9ubHlfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICBUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LmhlbHBlcnMoVHJhY2VzVGVtcGxhdGUuaGVscGVycyk7XG4gIGJvZHkgPSBCbGF6ZS50b0hUTUxXaXRoRGF0YShUZW1wbGF0ZS50cmFjZV9yZWFkb25seV92aWV3LCBpbnN0YW5jZS50cmFjZXMpO1xuICByZXR1cm4gYm9keTtcbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRBdHRhY2htZW50VmlldyA9IGZ1bmN0aW9uKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSkge1xuICB2YXIgYXR0YWNobWVudENvbXBpbGVkLCBhdHRhY2htZW50SHRtbCwgYXR0YWNobWVudFJlbmRlckZ1bmN0aW9uLCBib2R5LCBzdGVlZG9zRGF0YTtcbiAgc3RlZWRvc0RhdGEgPSBfZ2V0VGVtcGxhdGVEYXRhKHVzZXIsIHNwYWNlLCBpbnN0YW5jZSk7XG4gIGF0dGFjaG1lbnRIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvaW5zdGFuY2VfYXR0YWNobWVudHMuaHRtbCcpO1xuICBhdHRhY2htZW50Q29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKGF0dGFjaG1lbnRIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICBhdHRhY2htZW50UmVuZGVyRnVuY3Rpb24gPSBldmFsKGF0dGFjaG1lbnRDb21waWxlZCk7XG4gIFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJhdHRhY2htZW50c19yZWFkb25seV92aWV3XCIsIGF0dGFjaG1lbnRSZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmF0dGFjaG1lbnRzX3JlYWRvbmx5X3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldy5oZWxwZXJzKEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMpO1xuICBib2R5ID0gQmxhemUudG9IVE1MV2l0aERhdGEoVGVtcGxhdGUuYXR0YWNobWVudHNfcmVhZG9ubHlfdmlldyk7XG4gIHJldHVybiBib2R5O1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFJlbGF0ZWRJbnN0YW5jZXNWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCByZWxhdGVkSW5zdGFuY2VzQ29tcGlsZWQsIHJlbGF0ZWRJbnN0YW5jZXNIdG1sLCByZWxhdGVkSW5zdGFuY2VzUmVuZGVyRnVuY3Rpb24sIHN0ZWVkb3NEYXRhO1xuICBzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuYWJzb2x1dGUgOiB2b2lkIDApIHtcbiAgICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XG4gIH1cbiAgcmVsYXRlZEluc3RhbmNlc0h0bWwgPSBfZ2V0Vmlld0h0bWwoJ2NsaWVudC92aWV3cy9pbnN0YW5jZS9yZWxhdGVkX2luc3RhbmNlcy5odG1sJyk7XG4gIHJlbGF0ZWRJbnN0YW5jZXNDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUocmVsYXRlZEluc3RhbmNlc0h0bWwsIHtcbiAgICBpc0JvZHk6IHRydWVcbiAgfSk7XG4gIHJlbGF0ZWRJbnN0YW5jZXNSZW5kZXJGdW5jdGlvbiA9IGV2YWwocmVsYXRlZEluc3RhbmNlc0NvbXBpbGVkKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldyA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShcInJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXdcIiwgcmVsYXRlZEluc3RhbmNlc1JlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9pbnN0YW5jZXNfdmlldy5zdGVlZG9zRGF0YSA9IHN0ZWVkb3NEYXRhO1xuICBUZW1wbGF0ZS5yZWxhdGVkX2luc3RhbmNlc192aWV3LmhlbHBlcnMoUmVsYXRlZEluc3RhbmNlcy5oZWxwZXJzKTtcbiAgYm9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnJlbGF0ZWRfaW5zdGFuY2VzX3ZpZXcsIHN0ZWVkb3NEYXRhKTtcbiAgcmV0dXJuIGJvZHk7XG59O1xuXG5JbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3ID0gZnVuY3Rpb24odXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKSB7XG4gIHZhciBib2R5LCByZWxhdGVkUmVjb3Jkc0NvbXBpbGVkLCByZWxhdGVkUmVjb3Jkc0h0bWwsIHJlbGF0ZWRSZWNvcmRzUmVuZGVyRnVuY3Rpb24sIHN0ZWVkb3NEYXRhO1xuICBzdGVlZG9zRGF0YSA9IF9nZXRUZW1wbGF0ZURhdGEodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgc3RlZWRvc0RhdGEuYWJzb2x1dGUgPSBmYWxzZTtcbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuYWJzb2x1dGUgOiB2b2lkIDApIHtcbiAgICBzdGVlZG9zRGF0YS5hYnNvbHV0ZSA9IHRydWU7XG4gIH1cbiAgcmVsYXRlZFJlY29yZHNIdG1sID0gX2dldFZpZXdIdG1sKCdjbGllbnQvdmlld3MvaW5zdGFuY2UvcmVsYXRlZF9yZWNvcmRzLmh0bWwnKTtcbiAgcmVsYXRlZFJlY29yZHNDb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUocmVsYXRlZFJlY29yZHNIdG1sLCB7XG4gICAgaXNCb2R5OiB0cnVlXG4gIH0pO1xuICByZWxhdGVkUmVjb3Jkc1JlbmRlckZ1bmN0aW9uID0gZXZhbChyZWxhdGVkUmVjb3Jkc0NvbXBpbGVkKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcgPSBuZXcgQmxhemUuVGVtcGxhdGUoXCJyZWxhdGVkX3JlY29yZHNfdmlld1wiLCByZWxhdGVkUmVjb3Jkc1JlbmRlckZ1bmN0aW9uKTtcbiAgVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcuc3RlZWRvc0RhdGEgPSBzdGVlZG9zRGF0YTtcbiAgVGVtcGxhdGUucmVsYXRlZF9yZWNvcmRzX3ZpZXcuaGVscGVycyhSZWxhdGVkUmVjb3Jkcy5oZWxwZXJzKTtcbiAgYm9keSA9IEJsYXplLnRvSFRNTFdpdGhEYXRhKFRlbXBsYXRlLnJlbGF0ZWRfcmVjb3Jkc192aWV3LCBzdGVlZG9zRGF0YSk7XG4gIHJldHVybiBib2R5O1xufTtcblxuSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldE9uTG9hZFNjcmlwdCA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBmb3JtX3NjcmlwdCwgZm9ybV92ZXJzaW9uO1xuICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybVZlcnNpb24oaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcbiAgZm9ybV9zY3JpcHQgPSBmb3JtX3ZlcnNpb24uZm9ybV9zY3JpcHQ7XG4gIGlmIChmb3JtX3NjcmlwdCAmJiBmb3JtX3NjcmlwdC5yZXBsYWNlKC9cXG4vZywgXCJcIikucmVwbGFjZSgvXFxzL2csIFwiXCIpLmxlbmd0aCA+IDApIHtcbiAgICBmb3JtX3NjcmlwdCA9IFwiQ29yZUZvcm0gPSB7fTtDb3JlRm9ybS5pbnN0YW5jZWZvcm0gPSB7fTtcIiArIGZvcm1fc2NyaXB0O1xuICAgIHJldHVybiBmb3JtX3NjcmlwdCArPSBcIjtpZihDb3JlRm9ybS5mb3JtX09uTG9hZCl7d2luZG93Lm9ubG9hZCA9IENvcmVGb3JtLmZvcm1fT25Mb2FkKCk7fVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmb3JtX3NjcmlwdCA9IFwiXCI7XG4gIH1cbn07XG5cbkluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwgPSBmdW5jdGlvbih1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGFsbENzc0xpbmssIGF0dGFjaG1lbnQsIGJvZHksIGNyZWF0b3JTZXJ2aWNlLCBjc3NIcmVmLCBmb3JtLCBmb3JtRGVzY3JpcHRpb24sIGZvcm1EZXNjcmlwdGlvbkh0bWwsIGh0bWwsIGluc19yZWNvcmRfaWRzLCBpbnN0YW5jZUJveFN0eWxlLCBpbnN0YW5jZV9zdHlsZSwgbG9jYWxlLCBvbkxvYWRTY3JpcHQsIG9wZW5GaWxlU2NyaXB0LCByZWYsIHJlZjEsIHJlbGF0ZWRfaW5zdGFuY2VzLCByZWxhdGVkX3JlY29yZHMsIHNob3dUcmFjZXNCdG4sIHNob3dUcmFjZXNTY3JpcHQsIHRyYWNlLCB0cmFjZUNoZWNrLCB3aWR0aDtcbiAgYm9keSA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZVZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgb25Mb2FkU2NyaXB0ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldE9uTG9hZFNjcmlwdChpbnN0YW5jZSk7XG4gIGNyZWF0b3JTZXJ2aWNlID0gKHJlZiA9IE1ldGVvci5zZXR0aW5nc1tcInB1YmxpY1wiXS53ZWJzZXJ2aWNlcykgIT0gbnVsbCA/IChyZWYxID0gcmVmLmNyZWF0b3IpICE9IG51bGwgPyByZWYxLnVybCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgaW5zX3JlY29yZF9pZHMgPSBpbnN0YW5jZS5yZWNvcmRfaWRzO1xuICBsb2NhbGUgPSBfZ2V0TG9jYWxlKHVzZXIpO1xuICBvcGVuRmlsZVNjcmlwdCA9IFwiaWYod2luZG93LmlzTm9kZSAmJiBpc05vZGUoKSl7XFxuXHRhdHRhY2hzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcXFwiaW5zX2F0dGFjaF9ocmVmXFxcIik7XFxuXHRmb3IodmFyIGkgPSAwOyBpIDwgYXR0YWNocy5sZW5ndGg7IGkrKyl7XFxuXHRcdGF0dGFjaCA9IGF0dGFjaHNbaV07XFxuXHRcdGF0dGFjaC5hZGRFdmVudExpc3RlbmVyKFxcXCJjbGlja1xcXCIsIGZ1bmN0aW9uKGUpe1xcblx0XHRcdGlmKGlzSW1hZ2UodGhpcy5kYXRhc2V0LnR5cGUpIHx8IGlzSHRtbCh0aGlzLmRhdGFzZXQudHlwZSkpe1xcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xcblx0XHRcdFx0b3BlbldpbmRvdyhcXFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvXFxcIiArIHRoaXMuZGF0YXNldC5pZCk7XFxuXHRcdFx0fWVsc2UgaWYobndfY29yZS5jYW5PcGVuRmlsZSh0aGlzLmRhdGFzZXQubmFtZSkpe1xcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xcblx0XHRcdFx0bndfY29yZS5vcGVuRmlsZSh0aGlzLmhyZWYsIHRoaXMuZGF0YXNldC5uYW1lKVxcblx0XHRcdH1cXG5cdFx0fSk7XFxuXHR9XFxufVxcblxcbnZhciBmbG93ID0gXFxcIlwiICsgaW5zdGFuY2UuZmxvdyArIFwiXFxcIjtcXG52YXIgc3BhY2UgPSBcXFwiXCIgKyBpbnN0YW5jZS5zcGFjZSArIFwiXFxcIjtcXG5cXG5mdW5jdGlvbiBnZXRDb29raWUobmFtZSl7XFxuXHRsZXQgcGF0dGVybiA9IFJlZ0V4cChuYW1lICsgXFxcIj0uW147XSpcXFwiKVxcblx0bGV0IG1hdGNoZWQgPSBkb2N1bWVudC5jb29raWUubWF0Y2gocGF0dGVybilcXG5cdGlmKG1hdGNoZWQpe1xcblx0XHRsZXQgY29va2llID0gbWF0Y2hlZFswXS5zcGxpdCgnPScpXFxuXHRcdHJldHVybiBjb29raWVbMV1cXG5cdH1cXG5cdHJldHVybiAnJ1xcbn1cXG5cXG52YXIgcmVjb3JkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXFxcImlucy1yZWxhdGVkLXJlY29yZHNcXFwiKTtcXG5mb3IodmFyIGkgPSAwOyBpIDwgcmVjb3Jkcy5sZW5ndGg7IGkrKyl7XFxuXHRcdHZhciByZWNvcmQgPSByZWNvcmRzW2ldO1xcblx0XHRyZWNvcmQuYWRkRXZlbnRMaXN0ZW5lcihcXFwiY2xpY2tcXFwiLCBmdW5jdGlvbihlKXtcXG5cdFx0XHR2YXIgY3JlYXRvclNlcnZpY2UgPSBcXFwiXCIgKyBjcmVhdG9yU2VydmljZSArIFwiXFxcIlxcblx0XHRcdHZhciBpbnNfcmVjb3JkX2lkcyA9IFwiICsgKEpTT04uc3RyaW5naWZ5KGluc19yZWNvcmRfaWRzKSkgKyBcIlxcblx0XHRcdGlmKGNyZWF0b3JTZXJ2aWNlICYmIGluc19yZWNvcmRfaWRzICYmIGluc19yZWNvcmRfaWRzLmxlbmd0aCA+IDApe1xcblx0XHRcdFx0dmFyIG9iamNldE5hbWUgPSBpbnNfcmVjb3JkX2lkc1swXS5vXFxuXHRcdFx0XHR2YXIgaWQgPSBpbnNfcmVjb3JkX2lkc1swXS5pZHNbMF1cXG5cdFx0XHRcdHZhciB1b2JqID0ge307XFxuXHRcdFx0XHR1b2JqW1xcXCJYLVVzZXItSWRcXFwiXSA9IGdldENvb2tpZShcXFwiWC1Vc2VyLUlkXFxcIik7XFxuXHRcdFx0XHR1b2JqW1xcXCJYLUF1dGgtVG9rZW5cXFwiXSA9IGdldENvb2tpZShcXFwiWC1BdXRoLVRva2VuXFxcIik7XFxuXHRcdFx0XHRyZWRpcmVjdFVybCA9IGNyZWF0b3JTZXJ2aWNlICsgXFxcImFwcC8tL1xcXCIgKyBvYmpjZXROYW1lICsgXFxcIi92aWV3L1xcXCIgKyBpZCArIFxcXCI/XFxcIiArICQucGFyYW0odW9iaik7XFxuXHRcdFx0XHRvcGVuV2luZG93KHJlZGlyZWN0VXJsKTtcXG5cdFx0XHR9XFxuXHRcdH0pO1xcblx0fVxcblwiO1xuICBpZiAoIVN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xuICAgIGlmICgoZm9ybSAhPSBudWxsID8gZm9ybS5pbnN0YW5jZV9zdHlsZSA6IHZvaWQgMCkgPT09ICd0YWJsZScpIHtcbiAgICAgIGluc3RhbmNlX3N0eWxlID0gXCJpbnN0YW5jZS10YWJsZVwiO1xuICAgIH1cbiAgfVxuICBpZiAoKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMudGVtcGxhdGVOYW1lIDogdm9pZCAwKSA9PT0gJ3RhYmxlJykge1xuICAgIGluc3RhbmNlX3N0eWxlID0gXCJpbnN0YW5jZS10YWJsZVwiO1xuICB9XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmluc3RhbmNlX3N0eWxlIDogdm9pZCAwKSB7XG4gICAgaW5zdGFuY2Vfc3R5bGUgPSBvcHRpb25zLmluc3RhbmNlX3N0eWxlO1xuICB9XG4gIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnNob3dUcmFjZSA9PT0gdHJ1ZSkge1xuICAgIHRyYWNlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFRyYWNlc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFjZSA9IFwiXCI7XG4gIH1cbiAgaW5zdGFuY2VCb3hTdHlsZSA9IFwiXCI7XG4gIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5maW5hbF9kZWNpc2lvbikge1xuICAgIGlmIChpbnN0YW5jZS5maW5hbF9kZWNpc2lvbiA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICBpbnN0YW5jZUJveFN0eWxlID0gXCJib3gtc3VjY2Vzc1wiO1xuICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuZmluYWxfZGVjaXNpb24gPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgaW5zdGFuY2VCb3hTdHlsZSA9IFwiYm94LWRhbmdlclwiO1xuICAgIH1cbiAgfVxuICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5zaG93QXR0YWNobWVudHMgPT09IHRydWUpIHtcbiAgICBhdHRhY2htZW50ID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEF0dGFjaG1lbnRWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSk7XG4gICAgcmVsYXRlZF9pbnN0YW5jZXMgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZEluc3RhbmNlc1ZpZXcodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgICByZWxhdGVkX3JlY29yZHMgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0UmVsYXRlZFJlY29yZHNWaWV3KHVzZXIsIHNwYWNlLCBpbnN0YW5jZSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgYXR0YWNobWVudCA9IFwiXCI7XG4gICAgcmVsYXRlZF9pbnN0YW5jZXMgPSBcIlwiO1xuICAgIHJlbGF0ZWRfcmVjb3JkcyA9IFwiXCI7XG4gIH1cbiAgd2lkdGggPSBcIjk2MHB4XCI7XG4gIGlmIChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLndpZHRoIDogdm9pZCAwKSB7XG4gICAgd2lkdGggPSBcIlwiO1xuICB9XG4gIGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJzdGVlZG9zLWNzc1wiKTtcbiAgYWxsQ3NzTGluayA9IFwiPGxpbmsgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiB0eXBlPVxcXCJ0ZXh0L2Nzc1xcXCIgY2xhc3M9XFxcIl9fbWV0ZW9yLWNzc19fXFxcIiBocmVmPVxcXCJcIiArIGNzc0hyZWYgKyBcIlxcXCI+XCI7XG4gIHRyYWNlQ2hlY2sgPSBcIlwiO1xuICBpZiAoIV8uaXNFbXB0eSh0cmFjZSkpIHtcbiAgICB0cmFjZUNoZWNrID0gXCJjaGVja2VkXCI7XG4gIH1cbiAgaWYgKChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnRhZ2dlciA6IHZvaWQgMCkgPT09ICdlbWFpbCcgfHwgKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuZWRpdGFibGUgOiB2b2lkIDApKSB7XG4gICAgc2hvd1RyYWNlc0J0biA9IFwiXCI7XG4gIH0gZWxzZSB7XG4gICAgc2hvd1RyYWNlc0J0biA9IFwiPGRpdiBjbGFzcz1cXFwibmF2aWdhdGlvbi1iYXIgYnRuLWdyb3VwIG5vLXByaW50XFxcIiBzdHlsZT1cXFwibWluLXdpZHRoOiA2MDBweDsgei1pbmRleDogOTk5XFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcInByaW50LXRvb2xcXFwiPlxcblx0XHQ8bGFiZWwgY2xhc3M9XFxcImNieC1sYWJlbFxcXCI+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBjbGFzcz1cXFwiY2J4LXByaW50IGNieC1wcmludC1hdHRhY2htZW50c1xcXCIgaWQ9XFxcImNieC1wcmludC1hdHRhY2htZW50c1xcXCIgY2hlY2tlZD1cXFwiY2hlY2tlZFxcXCI+PHNwYW4+XCIgKyAoVEFQaTE4bi5fXygnaW5zdGFuY2VfYXR0YWNobWVudCcsIHt9LCBsb2NhbGUpKSArIFwiPC9zcGFuPjwvbGFiZWw+XFxuXHRcdDxsYWJlbCBjbGFzcz1cXFwiY2J4LWxhYmVsXFxcIj48aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGNsYXNzPVxcXCJjYngtcHJpbnQgY2J4LXByaW50LXRyYWNlc1xcXCIgaWQ9XFxcImNieC1wcmludC10cmFjZXNcXFwiIGNoZWNrZWQ9XFxcIlwiICsgdHJhY2VDaGVjayArIFwiXFxcIj48c3Bhbj5cIiArIChUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZhbF9oaXN0b3J5Jywge30sIGxvY2FsZSkpICsgXCI8L3NwYW4+PC9sYWJlbD5cXG5cdDwvZGl2PlxcbjwvZGl2PlwiO1xuICB9XG4gIHNob3dUcmFjZXNTY3JpcHQgPSBcIiQoIGRvY3VtZW50ICkucmVhZHkoZnVuY3Rpb24oKXtcXG5cdHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC10cmFjZXMnKTtcXG5cdHZhciB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaW5zdGFuY2UtdHJhY2VzJylbMF07XFxuXHRpZiAoYiAmJiBiLmNoZWNrZWQgJiYgdCl7XFxuXHRcdHQuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xcblx0fSBlbHNlIGlmKHQpe1xcblx0XHR0LnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7J1xcblx0fVxcblx0aWYoYil7XFxuXHRcdGIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZSl7XFxuXHRcdFx0aWYgKGUudGFyZ2V0LmNoZWNrZWQpe1xcblx0XHRcdFx0dC5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXFxuXHRcdFx0fSBlbHNlIHtcXG5cdFx0XHRcdHQuc3R5bGUgPSAnZGlzcGxheTogbm9uZTsnXFxuXHRcdFx0fVxcblx0XHR9KTtcXG5cdH1cXG5cXG5cXG5cdHZhciBhdHRhY2htZW50c0NoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NieC1wcmludC1hdHRhY2htZW50cycpO1xcblx0dmFyIGF0dGFjaG1lbnRzVmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2F0dGFjaG1lbnRzLXNlY3Rpb24nKVswXTtcXG5cdGlmIChhdHRhY2htZW50c0NoZWNrYm94ICYmIGF0dGFjaG1lbnRzQ2hlY2tib3guY2hlY2tlZCAmJiBhdHRhY2htZW50c1ZpZXcpe1xcblx0XHRhdHRhY2htZW50c1ZpZXcuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7J1xcblx0fSBlbHNlIGlmKGF0dGFjaG1lbnRzVmlldyl7XFxuXHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcXG5cdH1cXG5cdGlmKGF0dGFjaG1lbnRzQ2hlY2tib3gpe1xcblx0XHRhdHRhY2htZW50c0NoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpe1xcblx0XHRcdGlmIChlLnRhcmdldC5jaGVja2VkKXtcXG5cdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBibG9jazsnXFxuXHRcdFx0fSBlbHNlIHtcXG5cdFx0XHRcdGF0dGFjaG1lbnRzVmlldy5zdHlsZSA9ICdkaXNwbGF5OiBub25lOydcXG5cdFx0XHR9XFxuXHRcdH0pO1xcblx0fVxcbn0pO1xcblwiO1xuICBpZiAob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5zdHlsZXMgOiB2b2lkIDApIHtcbiAgICBhbGxDc3NMaW5rID0gXCJcIjtcbiAgfVxuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgX2lkOiBpbnN0YW5jZS5mb3JtXG4gIH0pO1xuICBmb3JtRGVzY3JpcHRpb25IdG1sID0gXCJcIjtcbiAgaWYgKGZvcm0pIHtcbiAgICBmb3JtRGVzY3JpcHRpb24gPSBmb3JtLmRlc2NyaXB0aW9uO1xuICAgIGlmIChmb3JtRGVzY3JpcHRpb24pIHtcbiAgICAgIGZvcm1EZXNjcmlwdGlvbiA9IGZvcm1EZXNjcmlwdGlvbi5yZXBsYWNlKC9cXG4vZywgXCI8YnIvPlwiKTtcbiAgICAgIGZvcm1EZXNjcmlwdGlvbkh0bWwgPSBcIjxkaXYgY2xhc3M9XFxcImJveC1oZWFkZXIgIHdpdGgtYm9yZGVyIGluc3RhbmNlLWhlYWRlclxcXCI+XFxuXHQ8ZGl2Plxcblx0XHRcIiArIGZvcm1EZXNjcmlwdGlvbiArIFwiXFxuXHQ8L2Rpdj5cXG48L2Rpdj5cIjtcbiAgICB9XG4gIH1cbiAgaHRtbCA9IFwiPCFET0NUWVBFIGh0bWw+XFxuPGh0bWw+XFxuXHQ8aGVhZD5cXG5cdFx0PG1ldGEgaHR0cC1lcXVpdj1cXFwiQ29udGVudC1UeXBlXFxcIiBjb250ZW50PVxcXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLThcXFwiLz5cXG5cdFx0XCIgKyBhbGxDc3NMaW5rICsgXCJcXG5cdFx0PHNjcmlwdCBzcmM9XFxcImh0dHBzOi8vd3d3LnN0ZWVkb3MuY29tL3dlYnNpdGUvbGlicy9qcXVlcnkubWluLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPjwvc2NyaXB0Plxcblx0XHQ8c2NyaXB0IHNyYz1cXFwiL2pzL253X2NvcmUuanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+PC9zY3JpcHQ+XFxuXHRcdFwiICsgKG9wdGlvbnMucGx1Z2lucyB8fCBcIlwiKSArIFwiXFxuXFxuXHRcdDxzdHlsZT5cXG5cdFx0XHQuc3RlZWRvc3tcXG5cdFx0XHRcdHdpZHRoOiBcIiArIHdpZHRoICsgXCI7XFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogYXV0bztcXG5cdFx0XHRcdG1hcmdpbi1yaWdodDogYXV0bztcXG5cdFx0XHR9XFxuXFxuXHRcdFx0Lmluc3RhbmNlLXZpZXcgLmluc3RhbmNlLW5hbWV7XFxuXHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudFxcblx0XHRcdH1cXG5cdFx0XHQuYm94LXRvb2xze1xcblx0XHRcdFx0ZGlzcGxheTogbm9uZTtcXG5cdFx0XHR9XFxuXHRcdFx0LmJveC5jb2xsYXBzZWQtYm94IC5ib3gtYm9keSwuYm94LmNvbGxhcHNlZC1ib3ggLmJveC1mb290ZXIge1xcblx0XHRcdCAgZGlzcGxheTogYmxvY2s7XFxuXHRcdFx0fVxcblxcblx0XHRcdGJvZHl7XFxuXHRcdFx0XHRiYWNrZ3JvdW5kOiBhenVyZSAhaW1wb3J0YW50O1xcblx0XHRcdH1cXG5cXG5cdFx0XHQuaW5zdGFuY2UtdmlldyAuaW5zdGFuY2UtdHJhY2Vze1xcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAxNXB4O1xcblx0XHRcdFx0cGFkZGluZy1yaWdodDogMTVweDtcXG5cdFx0XHR9XFxuXFxuXHRcdFx0XCIgKyAoKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuc3R5bGVzIDogdm9pZCAwKSB8fCBcIlwiKSArIFwiXFxuXHRcdDwvc3R5bGU+XFxuXHQ8L2hlYWQ+XFxuXHQ8Ym9keT5cXG5cdFx0PGRpdiBjbGFzcz1cXFwic3RlZWRvcyB3b3JrZmxvdyBpbnN0YW5jZS1wcmludFxcXCI+XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwic2tpbi1ncmVlbiBza2luLWFkbWluLWx0ZVxcXCI+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVxcXCJ3cmFwcGVyXFxcIj5cXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiY29udGVudC13cmFwcGVyXFxcIj5cXG5cdFx0XHRcdFx0XHRcIiArIHNob3dUcmFjZXNCdG4gKyBcIlxcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImluc3RhbmNlLXByaW50XFxcIj5cXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImluc3RhbmNlIFwiICsgaW5zdGFuY2Vfc3R5bGUgKyBcIlxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdDxmb3JtIG5hbWU9XFxcImluc3RhbmNlRm9ybVxcXCI+XFxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiaW5zdGFuY2UtZm9ybSBib3ggXCIgKyBpbnN0YW5jZUJveFN0eWxlICsgXCJcXFwiPlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XCIgKyBmb3JtRGVzY3JpcHRpb25IdG1sICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XFxcImJveC1ib2R5XFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdhdHRhY2htZW50cy1zZWN0aW9uJz5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiICsgYXR0YWNobWVudCArIFwiXFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIiArIHJlbGF0ZWRfaW5zdGFuY2VzICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwiICsgcmVsYXRlZF9yZWNvcmRzICsgXCJcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIiArIGJvZHkgKyBcIlxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0XHRcdFx0XHQ8L2Zvcm0+XFxuXHRcdFx0XHRcdFx0XHRcdFwiICsgdHJhY2UgKyBcIlxcblx0XHRcdFx0XHRcdFx0PC9kaXY+XFxuXFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0PC9kaXY+XFxuXHRcdDwvZGl2Plxcblx0PC9ib2R5Plxcblx0PHNjcmlwdD5cIiArIG9wZW5GaWxlU2NyaXB0ICsgXCI7XCIgKyBvbkxvYWRTY3JpcHQgKyBcIjtcIiArIHNob3dUcmFjZXNTY3JpcHQgKyBcIjwvc2NyaXB0PlxcbjwvaHRtbD5cIjtcbiAgcmV0dXJuIGh0bWw7XG59O1xuIiwiVGVtcGxhdGVNYW5hZ2VyID0ge307XHJcblxyXG5mb3JtSWQgPSAnaW5zdGFuY2Vmb3JtJztcclxuXHJcblxyXG5UZW1wbGF0ZU1hbmFnZXIuaW5zdGFuY2VfdGl0bGUgPSAoKS0+XHJcblx0cGFnZVRpdGxlID0gXCJcIlwiXHJcblx0XHR7e2luc3RhbmNlLm5hbWV9fVxyXG5cdFwiXCJcIlxyXG5cclxuXHRwYWdlVGl0bGVUckNsYXNzID0gXCJpbnN0YW5jZS1uYW1lXCJcclxuXHJcblx0aWYgQ29yZUZvcm0/LnBhZ2VUaXRsZUZpZWxkTmFtZVxyXG5cdFx0cGFnZVRpdGxlID0gXCJcIlwiXHJcblx0XHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9XCIje0NvcmVGb3JtLnBhZ2VUaXRsZUZpZWxkTmFtZX1cIiBsYWJlbD1mYWxzZX19XHJcblx0XHRcIlwiXCJcclxuXHRcdHBhZ2VUaXRsZVRyQ2xhc3MgPSBcIlwiXHJcblxyXG5cdGlmIENvcmVGb3JtPy5wYWdlVGl0bGVcclxuXHRcdHBhZ2VUaXRsZSA9IFwiXCJcIlxyXG5cdFx0XHQje0NvcmVGb3JtLnBhZ2VUaXRsZX1cclxuXHRcdFwiXCJcIlxyXG5cdFx0cGFnZVRpdGxlVHJDbGFzcyA9IFwiXCJcclxuXHJcblx0dmFsID1cclxuXHRcdHBhZ2VUaXRsZTogcGFnZVRpdGxlXHJcblx0XHRwYWdlVGl0bGVUckNsYXNzOiBwYWdlVGl0bGVUckNsYXNzXHJcblxyXG5cdHJldHVybiB2YWxcclxuXHJcblRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlID0gKGluc3RhbmNlLCBfZXhwb3J0KSAtPlxyXG5cclxuXHR0ZW1wbGF0ZSA9IFwiXCJcIlxyXG5cdDxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cclxuXHRcdDx0YWJsZSBjbGFzcz1cInRhYmxlLXBhZ2UtdGl0bGUgZm9ybS10YWJsZSBuby1ib3JkZXIgdGV4dC1hbGlnbi1jZW50ZXJcIiBzdHlsZT1cIndpZHRoOiAxMDAlO2Rpc3BsYXk6IGlubGluZS10YWJsZTtcIj5cclxuXHRcdFx0PHRyIGNsYXNzPVwiI3t0aGlzLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlVHJDbGFzc31cIj5cclxuXHRcdFx0XHQ8dGQgY2xhc3M9XCJpbnN0YW5jZS10YWJsZS1uYW1lLXRkIHBhZ2UtdGl0bGVcIj5cclxuXHRcdFx0XHRcdCN7dGhpcy5pbnN0YW5jZV90aXRsZSgpLnBhZ2VUaXRsZX1cclxuXHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHQ8L3RyPlxyXG5cclxuXHRcdDwvdGFibGU+XHJcblx0XHQ8dGFibGUgY2xhc3M9XCJ0YWJsZS1wYWdlLWJvZHkgZm9ybS10YWJsZVwiPlxyXG5cdFx0XHRcdDx0ciBzdHlsZT1cImhlaWdodDowcHhcIj5cclxuXHRcdFx0XHRcdDx0aCBzdHlsZT0nd2lkdGg6IDE2JSc+PC90aD5cclxuXHRcdFx0XHRcdDx0aD48L3RoPlxyXG5cdFx0XHRcdFx0PHRoIHN0eWxlPSd3aWR0aDogMTYlJz48L3RoPlxyXG5cdFx0XHRcdFx0PHRoPjwvdGg+XHJcblx0XHRcdFx0PC90cj5cclxuXHRcIlwiXCI7XHJcblxyXG5cdHRhYmxlX2ZpZWxkcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudGFibGVfZmllbGRzKGluc3RhbmNlKVxyXG5cclxuXHR0YWJsZV9maWVsZHMuZm9yRWFjaCAodGFibGVfZmllbGQpLT5cclxuXHJcblx0XHRyZXF1aXJlZCA9IFwiXCJcclxuXHRcdGlmICFDb3JlRm9ybT8ucGFnZVRpdGxlRmllbGROYW1lIHx8IENvcmVGb3JtPy5wYWdlVGl0bGVGaWVsZE5hbWUgIT0gdGFibGVfZmllbGQuY29kZVxyXG5cdFx0XHRpZiB0YWJsZV9maWVsZC5pc19yZXF1aXJlZFxyXG5cdFx0XHRcdHJlcXVpcmVkID0gXCJpcy1yZXF1aXJlZFwiXHJcblxyXG5cdFx0XHRpZiBfZXhwb3J0XHJcblx0XHRcdFx0cmVxdWlyZWQgPSBcIlwiO1xyXG5cclxuXHRcdFx0cHVyZUNvZGUgPSBTdGVlZG9zLnJlbW92ZVNwZWNpYWxDaGFyYWN0ZXIodGFibGVfZmllbGQuY29kZSk7XHJcblxyXG5cdFx0XHRpZiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkKHRhYmxlX2ZpZWxkKVxyXG5cdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0XHJcblx0XHRcdFx0dGVtcGxhdGUgKz0gXCJcIlwiXHJcblx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC10aXRsZSAje3JlcXVpcmVkfVwiPlxyXG5cdFx0XHRcdFx0XHR7e2FmRmllbGRMYWJlbFRleHQgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIn19XHJcblx0XHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtZmllbGQgb3Bpbmlvbi1maWVsZCBvcGluaW9uLWZpZWxkLSN7cHVyZUNvZGV9IGF1dG9tYXRpY1wiIGNvbHNwYW4gPSBcIiN7dGFibGVfZmllbGQudGRfY29sc3Bhbn1cIj5cclxuXHRcdFx0XHRcdFx0e3s+IGluc3RhbmNlU2lnblRleHQgbmFtZT1cIiN7dGFibGVfZmllbGQuY29kZX1cIn19XHJcblx0XHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHRcdFwiXCJcIlxyXG5cdFx0XHRcdHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZFxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aWYgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlcyh0YWJsZV9maWVsZC50eXBlLCAnc2VjdGlvbix0YWJsZScpXHJcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydFxyXG5cdFx0XHRcdFx0dGVtcGxhdGUgKz0gXCJcIlwiXHJcblx0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLWNoaWxkZmllbGQgdGQtY2hpbGRmaWVsZC0je3B1cmVDb2RlfVwiIGNvbHNwYW4gPSBcIiN7dGFibGVfZmllbGQudGRfY29sc3Bhbn1cIj5cclxuXHRcdFx0XHRcdFx0ICAge3s+IGFmRm9ybUdyb3VwIG5hbWU9XCIje3RhYmxlX2ZpZWxkLmNvZGV9XCIgbGFiZWw9ZmFsc2V9fVxyXG5cdFx0XHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9lbmRcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydFxyXG5cclxuXHRcdFx0XHRcdGlmIF9leHBvcnRcclxuXHRcdFx0XHRcdFx0dGl0bGVfcGVybWlzc2lvbiA9IFwiXCJcclxuXHRcdFx0XHRcdFx0ZmllbGRfcGVybWlzc2lvbiA9IFwiXCJcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0dGl0bGVfcGVybWlzc2lvbiA9IFwidGl0bGUtXCIgKyB0YWJsZV9maWVsZC5wZXJtaXNzaW9uXHJcblx0XHRcdFx0XHRcdGZpZWxkX3Blcm1pc3Npb24gPSBcImZpZWxkLVwiICsgdGFibGVfZmllbGQucGVybWlzc2lvblxyXG5cclxuXHRcdFx0XHRcdHRlbXBsYXRlICs9IFwiXCJcIlxyXG5cdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC10aXRsZSB0ZC10aXRsZS0je3B1cmVDb2RlfSAje3RpdGxlX3Blcm1pc3Npb259ICN7cmVxdWlyZWR9XCI+XHJcblx0XHRcdFx0XHRcdFx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9XCIje3RhYmxlX2ZpZWxkLmNvZGV9XCJ9fVxyXG5cdFx0XHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1maWVsZCB0ZC1maWVsZC0je3B1cmVDb2RlfSAje2ZpZWxkX3Blcm1pc3Npb259XCIgY29sc3BhbiA9IFwiI3t0YWJsZV9maWVsZC50ZF9jb2xzcGFufVwiPlxyXG5cdFx0XHRcdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPVwiI3t0YWJsZV9maWVsZC5jb2RlfVwiIGxhYmVsPWZhbHNlfX1cclxuXHRcdFx0XHRcdFx0PC90ZD5cclxuXHRcdFx0XHRcdFwiXCJcIlxyXG5cdFx0XHRcdFx0dGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kXHJcblxyXG5cdHRlbXBsYXRlICs9IFwiXCJcIlxyXG5cdFx0PC90YWJsZT5cclxuXHJcblx0XHQ8dGFibGUgY2xhc3M9XCJ0YWJsZS1wYWdlLWZvb3RlciBmb3JtLXRhYmxlIG5vLWJvcmRlclwiPlxyXG5cdFx0XHQ8dHIgY2xhc3M9XCJhcHBsaWNhbnQtd3JhcHBlclwiPlxyXG5cdFx0XHRcdDx0ZCBjbGFzcz1cIm5vd3JhcFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLWxlZnQnPlxyXG5cdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+e3tfdCBcImluc3RhbmNlX2luaXRpYXRvclwifX3vvJo8L2xhYmVsPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS10YWJsZS13cmFwcGVyLXRkIGlubGluZS1sZWZ0Jz5cclxuXHRcdFx0XHRcdFx0e3s+VGVtcGxhdGUuZHluYW1pYyAgdGVtcGxhdGU9XCJhZlNlbGVjdFVzZXJcIiBkYXRhPWFwcGxpY2FudENvbnRleHR9fVxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC90ZD5cclxuXHRcdFx0XHQ8dGQgY2xhc3M9XCJub3dyYXBcIj5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J3B1bGwtbGVmdCc+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1sZWZ0Jz5cclxuXHRcdFx0XHRcdFx0XHQ8bGFiZWw+e3tfdCBcImluc3RhbmNlX3N1Ym1pdF9kYXRlXCJ9fe+8mjwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtcmlnaHQnPlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdFx0XHR7e2Zvcm1hdERhdGUgaW5zdGFuY2Uuc3VibWl0X2RhdGUgJ3tcImZvcm1hdFwiOlwiWVlZWS1NTS1ERFwifSd9fVxyXG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDwvdGQ+XHJcblx0XHRcdDwvdHI+XHJcblx0XHQ8L3RhYmxlPlxyXG5cdDwvZGl2PlxyXG5cdFwiXCJcIlxyXG5cdHJldHVybiB0ZW1wbGF0ZVxyXG5cclxuI+atpOWkhOaooeadv+WFrOeUqOS4ju+8mmluc3RhbmNlIOe8lui+keOAgeafpeeci+OAgeaJk+WNsOOAgei9rOWPkeaXtueUn+aIkOmZhOS7tuOAgeWPkemAgemCruS7tmJvZHnpg6jliIYodGFibGUg5qih5p2/KVxyXG4j5aaC5p6c5pyJ5L+u5pS577yM6K+35rWL6K+V56Gu6K6k5YW25LuW5Yqf6IO95piv5ZCm5q2j5bi444CCXHJcblRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUgPVxyXG5cdGRlZmF1bHQ6IChpbnN0YW5jZSktPlxyXG5cclxuXHRcdHRlbXBsYXRlID0gXCJcIlwiXHJcblx0XHRcdDxkaXYgY2xhc3M9XCJ3aXRoLWJvcmRlciBjb2wtbWQtMTJcIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5zdGFuY2UtbmFtZVwiPlxyXG5cdFx0XHRcdFx0PGgzIGNsYXNzPVwiYm94LXRpdGxlXCI+I3tUZW1wbGF0ZU1hbmFnZXIuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGV9PC9oMz5cclxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiaGVscC1ibG9ja1wiPjwvc3Bhbj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cImhlbHAtYmxvY2tcIj48L3NwYW4+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHR7eyNlYWNoIHN0ZWVkb3NfZm9ybS5maWVsZHN9fVxyXG5cdFx0XHRcdHt7I2lmIGlzT3BpbmlvbkZpZWxkIHRoaXN9fVxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInt7I2lmIHRoaXMuaXNfd2lkZX19Y29sLW1kLTEye3tlbHNlfX1jb2wtbWQtNnt7L2lmfX0gZmllbGQte3t0aGlzLmNvZGV9fVwiPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBhdXRvbWF0aWMgb3Bpbmlvbi1maWVsZC17e3RoaXMuY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPnt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPXRoaXMuY29kZX19PC9sYWJlbD5cclxuXHJcblx0XHRcdFx0XHRcdFx0e3s+IGluc3RhbmNlU2lnblRleHQgbmFtZT10aGlzLmNvZGV9fVxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdHt7ZWxzZX19XHJcblx0XHRcdFx0XHR7eyNpZiBpbmNsdWRlcyB0aGlzLnR5cGUgJ3NlY3Rpb24sdGFibGUnfX1cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC0xMiBmaWVsZC17e3RoaXMuY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlIGxhYmVsPWZhbHNlfX1cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHR7e2Vsc2V9fVxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwie3sjaWYgdGhpcy5pc193aWRlfX1jb2wtbWQtMTJ7e2Vsc2V9fWNvbC1tZC02e3svaWZ9fSBmaWVsZC17e3RoaXMuY29kZX19XCI+XHJcblx0XHRcdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZX19XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0e3svaWZ9fVxyXG5cdFx0XHRcdHt7L2lmfX1cclxuXHRcdFx0e3svZWFjaH19XHJcblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYXBwbGljYW50LXdyYXBwZXIgZm9ybS1ncm91cCBmb3JtLWhvcml6b250YWxcIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiPlxyXG5cdFx0XHRcdFx0ICB7e190IFwiaW5zdGFuY2VfaW5pdGlhdG9yXCJ9fSZuYnNwOzpcclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0e3s+VGVtcGxhdGUuZHluYW1pYyAgdGVtcGxhdGU9XCJhZlNlbGVjdFVzZXJcIiBkYXRhPWFwcGxpY2FudENvbnRleHR9fVxyXG5cdFx0XHRcdCAgPC9kaXY+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XCJcIlwiXHJcblx0XHRyZXR1cm4gdGVtcGxhdGVcclxuXHJcblx0dGFibGU6IChpbnN0YW5jZSktPlxyXG5cdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlKGluc3RhbmNlKVxyXG4jXHR0YWJsZTogJycnXHJcbiNcdFx0PHRhYmxlIGNsYXNzPVwiYm94LWhlYWRlciAgd2l0aC1ib3JkZXJcIiBzdHlsZT1cIndpZHRoOiAxMDAlO2Rpc3BsYXk6IGlubGluZS10YWJsZTtcIj5cclxuI1x0XHRcdDx0ciBjbGFzcz1cImluc3RhbmNlLW5hbWVcIj5cclxuI1x0XHRcdFx0PHRkIGNsYXNzPVwiaW5zdGFuY2UtdGFibGUtbmFtZS10ZFwiPlxyXG4jXHRcdFx0XHRcdDxoMyBjbGFzcz1cImJveC10aXRsZVwiPnt7aW5zdGFuY2UubmFtZX19PC9oMz5cclxuI1x0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImhlbHAtYmxvY2tcIj48L3NwYW4+XHJcbiNcdFx0XHRcdDwvdGQ+XHJcbiNcdFx0XHQ8L3RyPlxyXG4jICAgICAgICAgICAgPHRyIGNsYXNzPVwiYXBwbGljYW50LXdyYXBwZXJcIj5cclxuI1x0XHRcdFx0PHRkIGNsYXNzPVwiaW5zdGFuY2UtdGFibGUtd3JhcHBlci10ZFwiPlxyXG4jXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57e190IFwiaW5zdGFuY2VfaW5pdGlhdG9yXCJ9fSZuYnNwOzo8L2xhYmVsPlxyXG4jXHRcdFx0XHRcdHt7PlRlbXBsYXRlLmR5bmFtaWMgIHRlbXBsYXRlPVwiYWZTZWxlY3RVc2VyXCIgZGF0YT1hcHBsaWNhbnRDb250ZXh0fX1cclxuI1x0XHRcdFx0PC90ZD5cclxuI1x0XHRcdDwvdHI+XHJcbiMgICAgICAgIDwvdGFibGU+XHJcbiNcdFx0PHRhYmxlIGNsYXNzPVwiZm9ybS10YWJsZVwiPlxyXG4jXHRcdCAgICB7eyNlYWNoIHRhYmxlX2ZpZWxkc319XHJcbiNcdFx0XHRcdHt7I2lmIGlzT3BpbmlvbkZpZWxkIHRoaXN9fVxyXG4jXHRcdFx0XHRcdHt7e3RyX3N0YXJ0fX19XHJcbiNcdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC10aXRsZSB7eyNpZiBpc19yZXF1aXJlZH19aXMtcmVxdWlyZWR7ey9pZn19XCI+XHJcbiNcdFx0XHRcdFx0XHRcdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPXRoaXMuY29kZX19XHJcbiNcdFx0XHRcdFx0XHQ8L3RkPlxyXG4jXHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtZmllbGQgb3Bpbmlvbi1maWVsZFwiIGNvbHNwYW4gPSAne3t0ZF9jb2xzcGFufX0nPlxyXG4jXHRcdFx0XHRcdFx0XHR7ez4gaW5zdGFuY2VTaWduVGV4dCBzdGVwPShnZXRPcGluaW9uRmllbGRTdGVwTmFtZSB0aGlzKSBkZWZhdWx0PScnfX1cclxuI1x0XHRcdFx0XHRcdDwvdGQ+XHJcbiNcdFx0XHRcdFx0e3t7dHJfZW5kfX19XHJcbiNcdFx0XHRcdHt7ZWxzZX19XHJcbiNcdFx0XHRcdFx0e3sjaWYgaW5jbHVkZXMgdGhpcy50eXBlICdzZWN0aW9uLHRhYmxlJ319XHJcbiNcdFx0XHRcdFx0XHR7e3t0cl9zdGFydH19fVxyXG4jXHRcdFx0XHRcdFx0XHQ8dGQgY2xhc3M9XCJ0ZC1jaGlsZGZpZWxkXCIgY29sc3BhbiA9ICd7e3RkX2NvbHNwYW59fSc+XHJcbiNcdFx0XHRcdFx0XHRcdCAgIHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZSBsYWJlbD1mYWxzZX19XHJcbiNcdFx0XHRcdFx0XHRcdDwvdGQ+XHJcbiNcdFx0XHRcdFx0XHR7e3t0cl9lbmR9fX1cclxuI1x0XHRcdFx0XHR7e2Vsc2V9fVxyXG4jXHRcdFx0XHRcdFx0e3t7dHJfc3RhcnR9fX1cclxuI1x0XHRcdFx0XHRcdFx0PHRkIGNsYXNzPVwidGQtdGl0bGUge3sjaWYgaXNfcmVxdWlyZWR9fWlzLXJlcXVpcmVke3svaWZ9fVwiPlxyXG4jXHRcdFx0XHRcdFx0XHRcdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPXRoaXMuY29kZX19XHJcbiNcdFx0XHRcdFx0XHRcdDwvdGQ+XHJcbiNcdFx0XHRcdFx0XHRcdDx0ZCBjbGFzcz1cInRkLWZpZWxkIHt7cGVybWlzc2lvbn19XCIgY29sc3BhbiA9ICd7e3RkX2NvbHNwYW59fSc+XHJcbiNcdFx0XHRcdFx0XHRcdFx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9dGhpcy5jb2RlIGxhYmVsPWZhbHNlfX1cclxuI1x0XHRcdFx0XHRcdFx0PC90ZD5cclxuI1x0XHRcdFx0XHRcdHt7e3RyX2VuZH19fVxyXG4jXHRcdFx0XHRcdHt7L2lmfX1cclxuI1x0XHRcdFx0e3svaWZ9fVxyXG4jXHJcbiNcdFx0ICAgIHt7L2VhY2h9fVxyXG4jXHRcdDwvdGFibGU+XHJcbiNcdCcnJ1xyXG5cclxuVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZUhlbHBzID1cclxuXHRhcHBsaWNhbnRDb250ZXh0OiAtPlxyXG5cdFx0c3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0ZGF0YSA9IHtcclxuXHRcdFx0bmFtZTogJ2luc19hcHBsaWNhbnQnLFxyXG5cdFx0XHRhdHRzOiB7XHJcblx0XHRcdFx0bmFtZTogJ2luc19hcHBsaWNhbnQnLFxyXG5cdFx0XHRcdGlkOiAnaW5zX2FwcGxpY2FudCcsXHJcblx0XHRcdFx0Y2xhc3M6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCcsXHJcblx0XHRcdFx0c3R5bGU6ICdwYWRkaW5nOjZweCAxMnB4O3dpZHRoOjE0MHB4O2Rpc3BsYXk6aW5saW5lJ1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcbiNcdFx0aWYgbm90IHN0ZWVkb3NfaW5zdGFuY2UgfHwgc3RlZWRvc19pbnN0YW5jZS5zdGF0ZSAhPSBcImRyYWZ0XCJcclxuXHRcdGRhdGEuYXR0cy5kaXNhYmxlZCA9IHRydWVcclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuaW5zdGFuY2VJZDogLT5cclxuXHRyZXR1cm4gJ2luc3RhbmNlZm9ybSc7I1wiaW5zdGFuY2VfXCIgKyBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIik7XHJcblxyXG5mb3JtX3R5cGVzOiAtPlxyXG5cdGlmIEFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKVxyXG5cdFx0cmV0dXJuICdkaXNhYmxlZCc7XHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuICdtZXRob2QnO1xyXG5cclxuc3RlZWRvc19mb3JtOiAtPlxyXG5cdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XHJcblx0aWYgZm9ybV92ZXJzaW9uXHJcblx0XHRyZXR1cm4gZm9ybV92ZXJzaW9uXHJcblxyXG5pbm5lcnN1YmZvcm1Db250ZXh0OiAob2JqKS0+XHJcblx0ZG9jX3ZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcclxuXHRvYmpbXCJ0YWJsZVZhbHVlc1wiXSA9IGlmIGRvY192YWx1ZXMgdGhlbiBkb2NfdmFsdWVzW29iai5jb2RlXSBlbHNlIFtdXHJcblx0b2JqW1wiZm9ybUlkXCJdID0gZm9ybUlkO1xyXG5cdHJldHVybiBvYmo7XHJcblxyXG5pbnN0YW5jZTogLT5cclxuXHRTZXNzaW9uLmdldChcImNoYW5nZV9kYXRlXCIpXHJcblx0aWYgKFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSlcclxuXHRcdHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdHJldHVybiBzdGVlZG9zX2luc3RhbmNlO1xyXG5cclxuZXF1YWxzOiAoYSwgYikgLT5cclxuXHRyZXR1cm4gKGEgPT0gYilcclxuXHJcbmluY2x1ZGVzOiAoYSwgYikgLT5cclxuXHRyZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xyXG5cclxuZmllbGRzOiAtPlxyXG5cdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XHJcblx0aWYgZm9ybV92ZXJzaW9uXHJcblx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xyXG5cclxuZG9jX3ZhbHVlczogLT5cclxuXHRXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XHJcblxyXG5pbnN0YW5jZV9ib3hfc3R5bGU6IC0+XHJcblx0Ym94ID0gU2Vzc2lvbi5nZXQoXCJib3hcIilcclxuXHRpZiBib3ggPT0gXCJpbmJveFwiIHx8IGJveCA9PSBcImRyYWZ0XCJcclxuXHRcdGp1ZGdlID0gU2Vzc2lvbi5nZXQoXCJqdWRnZVwiKVxyXG5cdFx0aWYganVkZ2VcclxuXHRcdFx0aWYgKGp1ZGdlID09IFwiYXBwcm92ZWRcIilcclxuXHRcdFx0XHRyZXR1cm4gXCJib3gtc3VjY2Vzc1wiXHJcblx0XHRcdGVsc2UgaWYgKGp1ZGdlID09IFwicmVqZWN0ZWRcIilcclxuXHRcdFx0XHRyZXR1cm4gXCJib3gtZGFuZ2VyXCJcclxuXHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRpZiBpbnMgJiYgaW5zLmZpbmFsX2RlY2lzaW9uXHJcblx0XHRpZiBpbnMuZmluYWxfZGVjaXNpb24gPT0gXCJhcHByb3ZlZFwiXHJcblx0XHRcdHJldHVybiBcImJveC1zdWNjZXNzXCJcclxuXHRcdGVsc2UgaWYgKGlucy5maW5hbF9kZWNpc2lvbiA9PSBcInJlamVjdGVkXCIpXHJcblx0XHRcdHJldHVybiBcImJveC1kYW5nZXJcIlxyXG5cclxuXHJcblRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZSA9IChpbnN0YW5jZSwgdGVtcGxhdGVOYW1lKSAtPlxyXG5cdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGluc3RhbmNlLmZsb3cpO1xyXG5cdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cclxuXHRpZiB0ZW1wbGF0ZU5hbWVcclxuXHRcdGlmIHRlbXBsYXRlTmFtZSA9PSAndGFibGUnXHJcblx0XHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKVxyXG5cdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUuZGVmYXVsdChpbnN0YW5jZSlcclxuXHJcblx0aWYgU2Vzc2lvbj8uZ2V0KFwiaW5zdGFuY2VQcmludFwiKVxyXG5cdFx0aWYgZmxvdz8ucHJpbnRfdGVtcGxhdGVcclxuXHRcdFx0cmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5wcmludF90ZW1wbGF0ZSArIFwiPC9kaXY+XCJcclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgZmxvdz8uaW5zdGFuY2VfdGVtcGxhdGVcclxuXHRcdFx0XHRyZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlICsgXCI8L2Rpdj5cIlxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUudGFibGUoaW5zdGFuY2UpXHJcblx0ZWxzZVxyXG5cdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpXHJcblx0XHRcdHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLmRlZmF1bHQoaW5zdGFuY2UpXHJcblxyXG5cdFx0aWYgZmxvdz8uaW5zdGFuY2VfdGVtcGxhdGVcclxuXHRcdFx0cmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5pbnN0YW5jZV90ZW1wbGF0ZSArIFwiPC9kaXY+XCJcclxuXHJcblx0XHRpZiBmb3JtPy5pbnN0YW5jZV9zdHlsZVxyXG5cdFx0XHRpZiBmb3JtLmluc3RhbmNlX3N0eWxlID09ICd0YWJsZSdcclxuXHRcdFx0XHRyZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSlcclxuXHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUuZGVmYXVsdChpbnN0YW5jZSlcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUuZGVmYXVsdChpbnN0YW5jZSlcclxuXHJcbiNUZW1wbGF0ZU1hbmFnZXIuZXhwb3J0VGVtcGxhdGUgPSAoZmxvd0lkKSAtPlxyXG4jXHR0ZW1wbGF0ZSA9IFRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZShmbG93SWQpO1xyXG4jXHJcbiNcdGZsb3cgPSBXb3JrZmxvd01hbmFnZXIuZ2V0RmxvdyhmbG93SWQpO1xyXG4jXHJcbiNcdGlmIGZsb3c/Lmluc3RhbmNlX3RlbXBsYXRlXHJcbiNcdFx0cmV0dXJuIHRlbXBsYXRlO1xyXG4jXHJcbiNcdHJldHVybiB0ZW1wbGF0ZTtcclxuXHJcbiIsInZhciBmb3JtSWQ7ICAgICAgICAgICAgICAgICBcblxuVGVtcGxhdGVNYW5hZ2VyID0ge307XG5cbmZvcm1JZCA9ICdpbnN0YW5jZWZvcm0nO1xuXG5UZW1wbGF0ZU1hbmFnZXIuaW5zdGFuY2VfdGl0bGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhZ2VUaXRsZSwgcGFnZVRpdGxlVHJDbGFzcywgdmFsO1xuICBwYWdlVGl0bGUgPSBcInt7aW5zdGFuY2UubmFtZX19XCI7XG4gIHBhZ2VUaXRsZVRyQ2xhc3MgPSBcImluc3RhbmNlLW5hbWVcIjtcbiAgaWYgKHR5cGVvZiBDb3JlRm9ybSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBDb3JlRm9ybSAhPT0gbnVsbCA/IENvcmVGb3JtLnBhZ2VUaXRsZUZpZWxkTmFtZSA6IHZvaWQgMCkge1xuICAgIHBhZ2VUaXRsZSA9IFwie3s+IGFmRm9ybUdyb3VwIG5hbWU9XFxcIlwiICsgQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lICsgXCJcXFwiIGxhYmVsPWZhbHNlfX1cIjtcbiAgICBwYWdlVGl0bGVUckNsYXNzID0gXCJcIjtcbiAgfVxuICBpZiAodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlIDogdm9pZCAwKSB7XG4gICAgcGFnZVRpdGxlID0gXCJcIiArIENvcmVGb3JtLnBhZ2VUaXRsZTtcbiAgICBwYWdlVGl0bGVUckNsYXNzID0gXCJcIjtcbiAgfVxuICB2YWwgPSB7XG4gICAgcGFnZVRpdGxlOiBwYWdlVGl0bGUsXG4gICAgcGFnZVRpdGxlVHJDbGFzczogcGFnZVRpdGxlVHJDbGFzc1xuICB9O1xuICByZXR1cm4gdmFsO1xufTtcblxuVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUgPSBmdW5jdGlvbihpbnN0YW5jZSwgX2V4cG9ydCkge1xuICB2YXIgdGFibGVfZmllbGRzLCB0ZW1wbGF0ZTtcbiAgdGVtcGxhdGUgPSBcIjxkaXYgY2xhc3M9J2luc3RhbmNlLXRlbXBsYXRlJz5cXG5cdDx0YWJsZSBjbGFzcz1cXFwidGFibGUtcGFnZS10aXRsZSBmb3JtLXRhYmxlIG5vLWJvcmRlciB0ZXh0LWFsaWduLWNlbnRlclxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlO2Rpc3BsYXk6IGlubGluZS10YWJsZTtcXFwiPlxcblx0XHQ8dHIgY2xhc3M9XFxcIlwiICsgKHRoaXMuaW5zdGFuY2VfdGl0bGUoKS5wYWdlVGl0bGVUckNsYXNzKSArIFwiXFxcIj5cXG5cdFx0XHQ8dGQgY2xhc3M9XFxcImluc3RhbmNlLXRhYmxlLW5hbWUtdGQgcGFnZS10aXRsZVxcXCI+XFxuXHRcdFx0XHRcIiArICh0aGlzLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlKSArIFwiXFxuXHRcdFx0PC90ZD5cXG5cdFx0PC90cj5cXG5cXG5cdDwvdGFibGU+XFxuXHQ8dGFibGUgY2xhc3M9XFxcInRhYmxlLXBhZ2UtYm9keSBmb3JtLXRhYmxlXFxcIj5cXG5cdFx0XHQ8dHIgc3R5bGU9XFxcImhlaWdodDowcHhcXFwiPlxcblx0XHRcdFx0PHRoIHN0eWxlPSd3aWR0aDogMTYlJz48L3RoPlxcblx0XHRcdFx0PHRoPjwvdGg+XFxuXHRcdFx0XHQ8dGggc3R5bGU9J3dpZHRoOiAxNiUnPjwvdGg+XFxuXHRcdFx0XHQ8dGg+PC90aD5cXG5cdFx0XHQ8L3RyPlwiO1xuICB0YWJsZV9maWVsZHMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRhYmxlX2ZpZWxkcyhpbnN0YW5jZSk7XG4gIHRhYmxlX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKHRhYmxlX2ZpZWxkKSB7XG4gICAgdmFyIGZpZWxkX3Blcm1pc3Npb24sIHB1cmVDb2RlLCByZXF1aXJlZCwgdGl0bGVfcGVybWlzc2lvbjtcbiAgICByZXF1aXJlZCA9IFwiXCI7XG4gICAgaWYgKCEodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lIDogdm9pZCAwKSB8fCAodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lIDogdm9pZCAwKSAhPT0gdGFibGVfZmllbGQuY29kZSkge1xuICAgICAgaWYgKHRhYmxlX2ZpZWxkLmlzX3JlcXVpcmVkKSB7XG4gICAgICAgIHJlcXVpcmVkID0gXCJpcy1yZXF1aXJlZFwiO1xuICAgICAgfVxuICAgICAgaWYgKF9leHBvcnQpIHtcbiAgICAgICAgcmVxdWlyZWQgPSBcIlwiO1xuICAgICAgfVxuICAgICAgcHVyZUNvZGUgPSBTdGVlZG9zLnJlbW92ZVNwZWNpYWxDaGFyYWN0ZXIodGFibGVfZmllbGQuY29kZSk7XG4gICAgICBpZiAoSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZCh0YWJsZV9maWVsZCkpIHtcbiAgICAgICAgdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfc3RhcnQ7XG4gICAgICAgIHRlbXBsYXRlICs9IFwiPHRkIGNsYXNzPVxcXCJ0ZC10aXRsZSBcIiArIHJlcXVpcmVkICsgXCJcXFwiPlxcblx0e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIn19XFxuPC90ZD5cXG48dGQgY2xhc3M9XFxcInRkLWZpZWxkIG9waW5pb24tZmllbGQgb3Bpbmlvbi1maWVsZC1cIiArIHB1cmVDb2RlICsgXCIgYXV0b21hdGljXFxcIiBjb2xzcGFuID0gXFxcIlwiICsgdGFibGVfZmllbGQudGRfY29sc3BhbiArIFwiXFxcIj5cXG5cdHt7PiBpbnN0YW5jZVNpZ25UZXh0IG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIn19XFxuPC90ZD5cIjtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX2VuZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluY2x1ZGVzKHRhYmxlX2ZpZWxkLnR5cGUsICdzZWN0aW9uLHRhYmxlJykpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSArPSB0YWJsZV9maWVsZC50cl9zdGFydDtcbiAgICAgICAgICB0ZW1wbGF0ZSArPSBcIjx0ZCBjbGFzcz1cXFwidGQtY2hpbGRmaWVsZCB0ZC1jaGlsZGZpZWxkLVwiICsgcHVyZUNvZGUgKyBcIlxcXCIgY29sc3BhbiA9IFxcXCJcIiArIHRhYmxlX2ZpZWxkLnRkX2NvbHNwYW4gKyBcIlxcXCI+XFxuICAge3s+IGFmRm9ybUdyb3VwIG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIiBsYWJlbD1mYWxzZX19XFxuPC90ZD5cIjtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRlbXBsYXRlICs9IHRhYmxlX2ZpZWxkLnRyX3N0YXJ0O1xuICAgICAgICAgIGlmIChfZXhwb3J0KSB7XG4gICAgICAgICAgICB0aXRsZV9wZXJtaXNzaW9uID0gXCJcIjtcbiAgICAgICAgICAgIGZpZWxkX3Blcm1pc3Npb24gPSBcIlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZV9wZXJtaXNzaW9uID0gXCJ0aXRsZS1cIiArIHRhYmxlX2ZpZWxkLnBlcm1pc3Npb247XG4gICAgICAgICAgICBmaWVsZF9wZXJtaXNzaW9uID0gXCJmaWVsZC1cIiArIHRhYmxlX2ZpZWxkLnBlcm1pc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHRlbXBsYXRlICs9IFwiPHRkIGNsYXNzPVxcXCJ0ZC10aXRsZSB0ZC10aXRsZS1cIiArIHB1cmVDb2RlICsgXCIgXCIgKyB0aXRsZV9wZXJtaXNzaW9uICsgXCIgXCIgKyByZXF1aXJlZCArIFwiXFxcIj5cXG5cdHt7YWZGaWVsZExhYmVsVGV4dCBuYW1lPVxcXCJcIiArIHRhYmxlX2ZpZWxkLmNvZGUgKyBcIlxcXCJ9fVxcbjwvdGQ+XFxuPHRkIGNsYXNzPVxcXCJ0ZC1maWVsZCB0ZC1maWVsZC1cIiArIHB1cmVDb2RlICsgXCIgXCIgKyBmaWVsZF9wZXJtaXNzaW9uICsgXCJcXFwiIGNvbHNwYW4gPSBcXFwiXCIgKyB0YWJsZV9maWVsZC50ZF9jb2xzcGFuICsgXCJcXFwiPlxcblx0e3s+IGFmRm9ybUdyb3VwIG5hbWU9XFxcIlwiICsgdGFibGVfZmllbGQuY29kZSArIFwiXFxcIiBsYWJlbD1mYWxzZX19XFxuPC90ZD5cIjtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGUgKz0gdGFibGVfZmllbGQudHJfZW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGVtcGxhdGUgKz0gXCJcdDwvdGFibGU+XFxuXFxuXHQ8dGFibGUgY2xhc3M9XFxcInRhYmxlLXBhZ2UtZm9vdGVyIGZvcm0tdGFibGUgbm8tYm9yZGVyXFxcIj5cXG5cdFx0PHRyIGNsYXNzPVxcXCJhcHBsaWNhbnQtd3JhcHBlclxcXCI+XFxuXHRcdFx0PHRkIGNsYXNzPVxcXCJub3dyYXBcXFwiPlxcblx0XHRcdFx0PGRpdiBjbGFzcz0naW5saW5lLWxlZnQnPlxcblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7X3QgXFxcImluc3RhbmNlX2luaXRpYXRvclxcXCJ9fe+8mjwvbGFiZWw+XFxuXHRcdFx0XHQ8L2Rpdj5cXG5cdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLXRhYmxlLXdyYXBwZXItdGQgaW5saW5lLWxlZnQnPlxcblx0XHRcdFx0XHR7ez5UZW1wbGF0ZS5keW5hbWljICB0ZW1wbGF0ZT1cXFwiYWZTZWxlY3RVc2VyXFxcIiBkYXRhPWFwcGxpY2FudENvbnRleHR9fVxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0PC90ZD5cXG5cdFx0XHQ8dGQgY2xhc3M9XFxcIm5vd3JhcFxcXCI+XFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPSdwdWxsLWxlZnQnPlxcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbmxpbmUtbGVmdCc+XFxuXHRcdFx0XHRcdFx0PGxhYmVsPnt7X3QgXFxcImluc3RhbmNlX3N1Ym1pdF9kYXRlXFxcIn1977yaPC9sYWJlbD5cXG5cdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9J2lubGluZS1yaWdodCc+XFxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXHRcdFx0XHRcdFx0XHR7e2Zvcm1hdERhdGUgaW5zdGFuY2Uuc3VibWl0X2RhdGUgJ3tcXFwiZm9ybWF0XFxcIjpcXFwiWVlZWS1NTS1ERFxcXCJ9J319XFxuXHRcdFx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0XHRcdDwvZGl2Plxcblx0XHRcdFx0PC9kaXY+XFxuXHRcdFx0PC90ZD5cXG5cdFx0PC90cj5cXG5cdDwvdGFibGU+XFxuPC9kaXY+XCI7XG4gIHJldHVybiB0ZW1wbGF0ZTtcbn07XG5cblRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGUgPSB7XG4gIFwiZGVmYXVsdFwiOiBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgIHZhciB0ZW1wbGF0ZTtcbiAgICB0ZW1wbGF0ZSA9IFwiPGRpdiBjbGFzcz1cXFwid2l0aC1ib3JkZXIgY29sLW1kLTEyXFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcImluc3RhbmNlLW5hbWVcXFwiPlxcblx0XHQ8aDMgY2xhc3M9XFxcImJveC10aXRsZVxcXCI+XCIgKyAoVGVtcGxhdGVNYW5hZ2VyLmluc3RhbmNlX3RpdGxlKCkucGFnZVRpdGxlKSArIFwiPC9oMz5cXG5cdFx0PHNwYW4gY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPjwvc3Bhbj5cXG5cdDwvZGl2Plxcblx0PHNwYW4gY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPjwvc3Bhbj5cXG48L2Rpdj5cXG57eyNlYWNoIHN0ZWVkb3NfZm9ybS5maWVsZHN9fVxcblx0e3sjaWYgaXNPcGluaW9uRmllbGQgdGhpc319XFxuXHRcdDxkaXYgY2xhc3M9XFxcInt7I2lmIHRoaXMuaXNfd2lkZX19Y29sLW1kLTEye3tlbHNlfX1jb2wtbWQtNnt7L2lmfX0gZmllbGQte3t0aGlzLmNvZGV9fVxcXCI+XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBhdXRvbWF0aWMgb3Bpbmlvbi1maWVsZC17e3RoaXMuY29kZX19XFxcIj5cXG5cdFx0XHRcdDxsYWJlbCBjbGFzcz1cXFwiY29udHJvbC1sYWJlbFxcXCI+e3thZkZpZWxkTGFiZWxUZXh0IG5hbWU9dGhpcy5jb2RlfX08L2xhYmVsPlxcblxcblx0XHRcdFx0e3s+IGluc3RhbmNlU2lnblRleHQgbmFtZT10aGlzLmNvZGV9fVxcblx0XHRcdDwvZGl2Plxcblx0XHQ8L2Rpdj5cXG5cdHt7ZWxzZX19XFxuXHRcdHt7I2lmIGluY2x1ZGVzIHRoaXMudHlwZSAnc2VjdGlvbix0YWJsZSd9fVxcblx0XHRcdDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMiBmaWVsZC17e3RoaXMuY29kZX19XFxcIj5cXG5cdFx0XHRcdHt7PiBhZkZvcm1Hcm91cCBuYW1lPXRoaXMuY29kZSBsYWJlbD1mYWxzZX19XFxuXHRcdFx0PC9kaXY+XFxuXHRcdHt7ZWxzZX19XFxuXHRcdFx0PGRpdiBjbGFzcz1cXFwie3sjaWYgdGhpcy5pc193aWRlfX1jb2wtbWQtMTJ7e2Vsc2V9fWNvbC1tZC02e3svaWZ9fSBmaWVsZC17e3RoaXMuY29kZX19XFxcIj5cXG5cdFx0XHR7ez4gYWZGb3JtR3JvdXAgbmFtZT10aGlzLmNvZGV9fVxcblx0XHRcdDwvZGl2Plxcblx0XHR7ey9pZn19XFxuXHR7ey9pZn19XFxue3svZWFjaH19XFxuPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcImFwcGxpY2FudC13cmFwcGVyIGZvcm0tZ3JvdXAgZm9ybS1ob3Jpem9udGFsXFxcIj5cXG5cdDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj5cXG5cdFx0PGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYWRkb25cXFwiPlxcblx0XHQgIHt7X3QgXFxcImluc3RhbmNlX2luaXRpYXRvclxcXCJ9fSZuYnNwOzpcXG5cdFx0PC9kaXY+XFxuXHRcdHt7PlRlbXBsYXRlLmR5bmFtaWMgIHRlbXBsYXRlPVxcXCJhZlNlbGVjdFVzZXJcXFwiIGRhdGE9YXBwbGljYW50Q29udGV4dH19XFxuXHQgIDwvZGl2Plxcblx0PC9kaXY+XFxuPC9kaXY+XCI7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9LFxuICB0YWJsZTogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLmhhbmRsZVRhYmxlVGVtcGxhdGUoaW5zdGFuY2UpO1xuICB9XG59O1xuXG5UZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlSGVscHMgPSB7XG4gIGFwcGxpY2FudENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRhLCBzdGVlZG9zX2luc3RhbmNlO1xuICAgIHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBkYXRhID0ge1xuICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgYXR0czoge1xuICAgICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIGlkOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIFwiY2xhc3NcIjogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sJyxcbiAgICAgICAgc3R5bGU6ICdwYWRkaW5nOjZweCAxMnB4O3dpZHRoOjE0MHB4O2Rpc3BsYXk6aW5saW5lJ1xuICAgICAgfVxuICAgIH07XG4gICAgZGF0YS5hdHRzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufTtcblxuKHtcbiAgaW5zdGFuY2VJZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdpbnN0YW5jZWZvcm0nO1xuICB9LFxuICBmb3JtX3R5cGVzOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpKSB7XG4gICAgICByZXR1cm4gJ2Rpc2FibGVkJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdtZXRob2QnO1xuICAgIH1cbiAgfSxcbiAgc3RlZWRvc19mb3JtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIGZvcm1fdmVyc2lvbjtcbiAgICB9XG4gIH0sXG4gIGlubmVyc3ViZm9ybUNvbnRleHQ6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBkb2NfdmFsdWVzO1xuICAgIGRvY192YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gICAgb2JqW1widGFibGVWYWx1ZXNcIl0gPSBkb2NfdmFsdWVzID8gZG9jX3ZhbHVlc1tvYmouY29kZV0gOiBbXTtcbiAgICBvYmpbXCJmb3JtSWRcIl0gPSBmb3JtSWQ7XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcbiAgaW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGVlZG9zX2luc3RhbmNlO1xuICAgIFNlc3Npb24uZ2V0KFwiY2hhbmdlX2RhdGVcIik7XG4gICAgaWYgKFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSkge1xuICAgICAgc3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgcmV0dXJuIHN0ZWVkb3NfaW5zdGFuY2U7XG4gICAgfVxuICB9LFxuICBlcXVhbHM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfSxcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xuICB9LFxuICBmaWVsZHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xuICAgIH1cbiAgfSxcbiAgZG9jX3ZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcbiAgfSxcbiAgaW5zdGFuY2VfYm94X3N0eWxlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm94LCBpbnMsIGp1ZGdlO1xuICAgIGJveCA9IFNlc3Npb24uZ2V0KFwiYm94XCIpO1xuICAgIGlmIChib3ggPT09IFwiaW5ib3hcIiB8fCBib3ggPT09IFwiZHJhZnRcIikge1xuICAgICAganVkZ2UgPSBTZXNzaW9uLmdldChcImp1ZGdlXCIpO1xuICAgICAgaWYgKGp1ZGdlKSB7XG4gICAgICAgIGlmIChqdWRnZSA9PT0gXCJhcHByb3ZlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYm94LXN1Y2Nlc3NcIjtcbiAgICAgICAgfSBlbHNlIGlmIChqdWRnZSA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYm94LWRhbmdlclwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGlmIChpbnMgJiYgaW5zLmZpbmFsX2RlY2lzaW9uKSB7XG4gICAgICBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYm94LXN1Y2Nlc3NcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW5zLmZpbmFsX2RlY2lzaW9uID09PSBcInJlamVjdGVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYm94LWRhbmdlclwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cblRlbXBsYXRlTWFuYWdlci5nZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uKGluc3RhbmNlLCB0ZW1wbGF0ZU5hbWUpIHtcbiAgdmFyIGZsb3csIGZvcm07XG4gIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGluc3RhbmNlLmZsb3cpO1xuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShpbnN0YW5jZS5mb3JtKTtcbiAgaWYgKHRlbXBsYXRlTmFtZSkge1xuICAgIGlmICh0ZW1wbGF0ZU5hbWUgPT09ICd0YWJsZScpIHtcbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIFRlbXBsYXRlTWFuYWdlci5fdGVtcGxhdGVbXCJkZWZhdWx0XCJdKGluc3RhbmNlKTtcbiAgfVxuICBpZiAodHlwZW9mIFNlc3Npb24gIT09IFwidW5kZWZpbmVkXCIgJiYgU2Vzc2lvbiAhPT0gbnVsbCA/IFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSA6IHZvaWQgMCkge1xuICAgIGlmIChmbG93ICE9IG51bGwgPyBmbG93LnByaW50X3RlbXBsYXRlIDogdm9pZCAwKSB7XG4gICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93LnByaW50X3RlbXBsYXRlICsgXCI8L2Rpdj5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZsb3cgIT0gbnVsbCA/IGZsb3cuaW5zdGFuY2VfdGVtcGxhdGUgOiB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtdGVtcGxhdGUnPlwiICsgZmxvdy5pbnN0YW5jZV90ZW1wbGF0ZSArIFwiPC9kaXY+XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVNYW5hZ2VyLl90ZW1wbGF0ZS50YWJsZShpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlW1wiZGVmYXVsdFwiXShpbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmIChmbG93ICE9IG51bGwgPyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlIDogdm9pZCAwKSB7XG4gICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS10ZW1wbGF0ZSc+XCIgKyBmbG93Lmluc3RhbmNlX3RlbXBsYXRlICsgXCI8L2Rpdj5cIjtcbiAgICB9XG4gICAgaWYgKGZvcm0gIT0gbnVsbCA/IGZvcm0uaW5zdGFuY2Vfc3R5bGUgOiB2b2lkIDApIHtcbiAgICAgIGlmIChmb3JtLmluc3RhbmNlX3N0eWxlID09PSAndGFibGUnKSB7XG4gICAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlLnRhYmxlKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlW1wiZGVmYXVsdFwiXShpbnN0YW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUZW1wbGF0ZU1hbmFnZXIuX3RlbXBsYXRlW1wiZGVmYXVsdFwiXShpbnN0YW5jZSk7XG4gICAgfVxuICB9XG59O1xuIiwiU3RlZWRvc1RhYmxlID0ge307XHJcblxyXG5TdGVlZG9zVGFibGUuZm9ybUlkID0gXCJpbnN0YW5jZWZvcm1cIjtcclxuXHJcblN0ZWVkb3NUYWJsZS5jaGVja0l0ZW0gPSBmdW5jdGlvbihmaWVsZCwgaXRlbV9pbmRleCkge1xyXG4gICAgdmFyIGZpZWxkT2JqID0gU3RlZWRvc1RhYmxlLmdldEZpZWxkKGZpZWxkKTtcclxuXHJcbiAgICB2YXIgZmllbGRWYWwgPSBTdGVlZG9zVGFibGUuZ2V0SXRlbU1vZGFsVmFsdWUoZmllbGQsIGl0ZW1faW5kZXgpO1xyXG5cclxuICAgIHZhciBzZl9uYW1lID0gJyc7XHJcbiAgICB2YXIgcmV2ID0gdHJ1ZTtcclxuICAgIGZpZWxkT2JqLnNmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihzZikge1xyXG4gICAgICAgIGlmIChzZi5wZXJtaXNzaW9uID09ICdlZGl0YWJsZScpIHtcclxuICAgICAgICAgICAgc2ZfbmFtZSA9IGZpZWxkT2JqLmNvZGUgKyBcIi5cIiArIHNmLmNvZGU7XHJcbiAgICAgICAgICAgIGlmICghSW5zdGFuY2VNYW5hZ2VyLmNoZWNrRm9ybUZpZWxkVmFsdWUoJChcIltuYW1lPSdcIiArIHNmX25hbWUgKyBcIiddXCIpWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgcmV2ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmV2O1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuc2V0VGFibGVJdGVtVmFsdWUgPSBmdW5jdGlvbihmaWVsZCwgaXRlbV9pbmRleCwgaXRlbV92YWx1ZSkge1xyXG5cclxuICAgIHZhciB0YWJsZVZhbHVlID0gU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUoZmllbGQpO1xyXG4gICAgdGFibGVWYWx1ZVtpdGVtX2luZGV4XSA9IGl0ZW1fdmFsdWU7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRUYWJsZUl0ZW1WYWx1ZSA9IGZ1bmN0aW9uKGZpZWxkLCBpdGVtX2luZGV4KSB7XHJcbiAgICByZXR1cm4gU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUoZmllbGQpW2l0ZW1faW5kZXhdO1xyXG59XHJcblxyXG5TdGVlZG9zVGFibGUucmVtb3ZlVGFibGVJdGVtID0gZnVuY3Rpb24oZmllbGQsIGl0ZW1faW5kZXgpIHtcclxuICAgIHZhciBpdGVtX3ZhbHVlID0gU3RlZWRvc1RhYmxlLmdldFRhYmxlSXRlbVZhbHVlKGZpZWxkLCBpdGVtX2luZGV4KTtcclxuICAgIGl0ZW1fdmFsdWUucmVtb3ZlZCA9IHRydWU7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5zZXRUYWJsZVZhbHVlID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlKSB7XHJcbiAgICAkKFwidGFibGVbbmFtZT0nXCIgKyBmaWVsZCArIFwiJ11cIikudmFsKHtcclxuICAgICAgICB2YWw6IHZhbHVlXHJcbiAgICB9KTtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUgPSBmdW5jdGlvbihmaWVsZCkge1xyXG4gICAgcmV0dXJuICQoXCJ0YWJsZVtuYW1lPSdcIiArIGZpZWxkICsgXCInXVwiKS52YWwoKS52YWw7XHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRWYWxpZFZhbHVlID0gZnVuY3Rpb24oZmllbGQpIHtcclxuICAgIHZhciB2YWx1ZSA9IFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKTtcclxuXHJcbiAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHZhbGlkVmFsdWUgPSBbXTtcclxuXHJcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcclxuICAgICAgICBpZiAoIXYucmVtb3ZlZCkge1xyXG4gICAgICAgICAgICB2YWxpZFZhbHVlLnB1c2godik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFsaWRWYWx1ZTtcclxufVxyXG5cclxuXHJcblN0ZWVkb3NUYWJsZS5oYW5kbGVEYXRhID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlcykge1xyXG5cclxuICAgIGlmICghdmFsdWVzIHx8ICEodmFsdWVzIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZmllbGRPYmogPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpO1xyXG5cclxuICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcclxuICAgICAgICBmaWVsZE9iai5zZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xyXG4gICAgICAgICAgICBpZiAoZi50eXBlID09ICd1c2VyJyB8fCBmLnR5cGUgPT0gJ2dyb3VwJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdltmLmNvZGVdXHJcbiAgICAgICAgICAgICAgICBpZiAoZi5pc19tdWx0aXNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPiAwICYmIHR5cGVvZih2YWx1ZVswXSkgPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdltmLmNvZGVdID0gdltmLmNvZGVdLmdldFByb3BlcnR5KFwiaWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mKHZhbHVlKSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2W2YuY29kZV0gPSB2W2YuY29kZV0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGYudHlwZSA9PSAnZGF0ZVRpbWUnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2W2YuY29kZV1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gMTYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB2YWx1ZS5zcGxpdChcIlRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0MCA9IHRbMF0uc3BsaXQoXCItXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDEgPSB0WzFdLnNwbGl0KFwiOlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgPSB0MFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0MFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IHQwWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VycyA9IHQxWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gdDFbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXRlLCBob3Vycywgc2Vjb25kcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZbZi5jb2RlXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHZhbHVlcztcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldEZpZWxkID0gZnVuY3Rpb24oZmllbGQpIHtcclxuICAgIHZhciBpbnN0YW5jZUZpZWxkcyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZpZWxkcygpO1xyXG4gICAgaWYgKCFpbnN0YW5jZUZpZWxkcylcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgdmFyIGZpZWxkT2JqID0gaW5zdGFuY2VGaWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgZmllbGQpO1xyXG5cclxuICAgIHJldHVybiBmaWVsZE9iajtcclxufVxyXG5cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRNb2RhbERhdGEgPSBmdW5jdGlvbihmaWVsZCwgaW5kZXgpIHtcclxuXHJcbiAgICB2YXIgZGF0YSA9IHt9O1xyXG5cclxuICAgIHZhciBmaWVsZE9iaiA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCk7XHJcblxyXG4gICAgaWYgKCFmaWVsZE9iaikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLmZpZWxkID0gZmllbGRPYmo7XHJcblxyXG4gICAgZGF0YS5maWVsZC5mb3JtdWxhID0gRm9ybV9mb3JtdWxhLmdldEZvcm11bGFGaWVsZFZhcmlhYmxlKFwiRm9ybV9mb3JtdWxhLmZpZWxkX3ZhbHVlc1wiLCBmaWVsZE9iai5zZmllbGRzKTtcclxuXHJcbiAgICBkYXRhLnZhbHVlID0ge307XHJcblxyXG4gICAgZGF0YS52YWx1ZVtmaWVsZF0gPSBTdGVlZG9zVGFibGUuZ2V0VGFibGVJdGVtVmFsdWUoZmllbGQsIGluZGV4KTtcclxuXHJcbiAgICBkYXRhLmluZGV4ID0gaW5kZXg7XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcblxyXG5cclxuU3RlZWRvc1RhYmxlLmdldEl0ZW1Nb2RhbFZhbHVlID0gZnVuY3Rpb24oZmllbGQsIGl0ZW1faW5kZXgpIHtcclxuXHJcbiAgICBpZiAoIUF1dG9Gb3JtLmdldEZvcm1WYWx1ZXMoXCJzdGVlZG9zX3RhYmxlX21vZGFsX1wiICsgZmllbGQgKyBcIl9cIiArIGl0ZW1faW5kZXgpKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGl0ZW1fdmFsdWUgPSBBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwic3RlZWRvc190YWJsZV9tb2RhbF9cIiArIGZpZWxkICsgXCJfXCIgKyBpdGVtX2luZGV4KS5pbnNlcnREb2NbZmllbGRdO1xyXG4gICAgcmV0dXJuIGl0ZW1fdmFsdWU7XHJcbn1cclxuXHJcblxyXG5TdGVlZG9zVGFibGUuYWRkSXRlbSA9IGZ1bmN0aW9uKGZpZWxkLCBpbmRleCwgX2l0ZW1fdmFsdWUpIHtcclxuICAgIHZhciBrZXlzID0gU3RlZWRvc1RhYmxlLmdldEtleXMoZmllbGQpO1xyXG4gICAgdmFyIGl0ZW1fdmFsdWUgPSBfaXRlbV92YWx1ZSB8fCBTdGVlZG9zVGFibGUuZ2V0SXRlbU1vZGFsVmFsdWUoZmllbGQsIGluZGV4KTtcclxuICAgICQoXCJ0Ym9keVtuYW1lPSdcIiArIGZpZWxkICsgXCJUYm9keSddXCIpLmFwcGVuZChTdGVlZG9zVGFibGUuZ2V0VHIoa2V5cywgaXRlbV92YWx1ZSwgaW5kZXgsIGZpZWxkLCB0cnVlKSlcclxuXHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS51cGRhdGVJdGVtID0gZnVuY3Rpb24oZmllbGQsIGluZGV4LCBfaXRlbV92YWx1ZSkge1xyXG5cclxuICAgIHZhciBpdGVtID0gJChcInRyW25hbWU9J1wiICsgZmllbGQgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIiddXCIpO1xyXG5cclxuICAgIHZhciBpdGVtX3ZhbHVlID0gX2l0ZW1fdmFsdWUgfHwgU3RlZWRvc1RhYmxlLmdldEl0ZW1Nb2RhbFZhbHVlKGZpZWxkLCBpbmRleCk7XHJcblxyXG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBTdGVlZG9zVGFibGUuZ2V0S2V5cyhmaWVsZCk7XHJcbiAgICAgICAgdmFyIHRkcyA9IFN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZChmaWVsZCwgaW5kZXgpO1xyXG5cclxuICAgICAgICB2YXIgc2ZpZWxkcyA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCkuc2ZpZWxkcztcclxuXHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgc2ZpZWxkID0gc2ZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBrZXkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlbV92YWx1ZVtrZXldO1xyXG5cclxuICAgICAgICAgICAgdGRzID0gdGRzICsgU3RlZWRvc1RhYmxlLmdldFRkKHNmaWVsZCwgaW5kZXgsIHZhbHVlKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0ZW0uZW1wdHkoKTtcclxuXHJcbiAgICAgICAgaXRlbS5hcHBlbmQodGRzKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICBTdGVlZG9zVGFibGUuYWRkSXRlbShmaWVsZCwgaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChTdGVlZG9zVGFibGUuZ2V0VGFibGVWYWx1ZShmaWVsZCkpIHtcclxuXHJcbiAgICAgICAgU3RlZWRvc1RhYmxlLnNldFRhYmxlSXRlbVZhbHVlKGZpZWxkLCBpbmRleCwgaXRlbV92YWx1ZSk7XHJcblxyXG4gICAgICAgIC8vU3RlZWRvc1RhYmxlLnZhbHVlSGFzaFtmaWVsZF1baW5kZXhdID0gaXRlbV92YWx1ZTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vU3RlZWRvc1RhYmxlLnZhbHVlSGFzaFtmaWVsZF0gPSBbaXRlbV92YWx1ZV07XHJcblxyXG4gICAgICAgIFN0ZWVkb3NUYWJsZS5zZXRUYWJsZVZhbHVlKGZpZWxkLCBbaXRlbV92YWx1ZV0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8v5omn6KGM5Li76KGo5YWs5byP6K6h566XXHJcbiAgICBJbnN0YW5jZU1hbmFnZXIucnVuRm9ybXVsYShmaWVsZCk7XHJcblxyXG59XHJcblxyXG5TdGVlZG9zVGFibGUucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKGZpZWxkLCBpbmRleCkge1xyXG5cclxuICAgICQoXCJ0cltuYW1lPSdcIiArIGZpZWxkICsgXCJfaXRlbV9cIiArIGluZGV4ICsgXCInXVwiKS5oaWRlKCk7XHJcblxyXG4gICAgU3RlZWRvc1RhYmxlLnJlbW92ZVRhYmxlSXRlbShmaWVsZCwgaW5kZXgpO1xyXG5cclxuICAgIEluc3RhbmNlTWFuYWdlci5ydW5Gb3JtdWxhKGZpZWxkKTtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLnNob3dNb2RhbCA9IGZ1bmN0aW9uKGZpZWxkLCBpbmRleCwgbWV0aG9kKSB7XHJcblxyXG5cclxuICAgIHZhciBtb2RhbERhdGEgPSBTdGVlZG9zVGFibGUuZ2V0TW9kYWxEYXRhKGZpZWxkLCBpbmRleCk7XHJcblxyXG4gICAgbW9kYWxEYXRhLm1ldGhvZCA9IG1ldGhvZDtcclxuXHJcbiAgICBNb2RhbC5zaG93KFwic3RlZWRvc1RhYmxlTW9kYWxcIiwgbW9kYWxEYXRhKTtcclxuXHJcbn1cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRLZXlzID0gZnVuY3Rpb24oZmllbGQpIHtcclxuICAgIGlmICghQXV0b0Zvcm0uZ2V0Q3VycmVudERhdGFGb3JGb3JtKFN0ZWVkb3NUYWJsZS5mb3JtSWQpKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBzcyA9IEF1dG9Gb3JtLmdldEZvcm1TY2hlbWEoU3RlZWRvc1RhYmxlLmZvcm1JZCk7XHJcblxyXG4gICAgdmFyIGtleXMgPSBbXTtcclxuXHJcbiAgICBpZiAoc3Muc2NoZW1hKGZpZWxkICsgXCIuJFwiKS50eXBlID09PSBPYmplY3QpIHtcclxuICAgICAgICBrZXlzID0gc3Mub2JqZWN0S2V5cyhTaW1wbGVTY2hlbWEuX21ha2VHZW5lcmljKGZpZWxkKSArICcuJCcpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGtleXM7XHJcblxyXG59XHJcblxyXG5TdGVlZG9zVGFibGUuZ2V0VGhlYWQgPSBmdW5jdGlvbihmaWVsZCwgZWRpdGFibGUpIHtcclxuXHJcbiAgICB2YXIgZmllbGRPYmogPSBmaWVsZDtcclxuICAgIGlmICghXy5pc09iamVjdChmaWVsZCkpXHJcbiAgICAgICAgZmllbGRPYmogPSBTdGVlZG9zVGFibGUuZ2V0RmllbGQoZmllbGQpO1xyXG5cclxuICAgIGlmICghZmllbGRPYmopIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRoZWFkID0gJycsXHJcbiAgICAgICAgdHJzID0gJycsXHJcbiAgICAgICAgbGFiZWwgPSAnJyxcclxuICAgICAgICB3aWR0aCA9IDEwMDtcclxuXHJcbiAgICBpZiAoZWRpdGFibGUpIHtcclxuICAgICAgICAvLyB0cnMgPSBcIjx0aCBjbGFzcz0ncmVtb3ZlZCc+PC90aD5cIlxyXG5cdFx0dHJzID0gXCJcIlxyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZmllbGRzID0gZmllbGRPYmouc2ZpZWxkcztcclxuXHJcbiAgICBpZighc2ZpZWxkcyl7XHJcbiAgICBcdHJldHVybiB0aGVhZDtcclxuXHR9XHJcblxyXG4gICAgdmFyIHNmX2xlbmd0aCA9IHNmaWVsZHMubGVuZ3RoO1xyXG5cclxuICAgIGlmIChzZl9sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHdpZGVfZmllbGRzID0gc2ZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcImlzX3dpZGVcIiwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHdpZHRoID0gMTAwIC8gKHNmX2xlbmd0aCArIHdpZGVfZmllbGRzLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKHNmLCBpbmRleCkge1xyXG5cclxuICAgICAgICBsYWJlbCA9IChzZi5uYW1lICE9IG51bGwgJiYgc2YubmFtZS5sZW5ndGggPiAwKSA/IHNmLm5hbWUgOiBzZi5jb2RlO1xyXG5cclxuICAgICAgICB0cnMgPSB0cnMgKyBcIjx0ZCBcIjsgLy8gbm93cmFwPSdub3dyYXAnXHJcblxyXG4gICAgICAgIHRycyA9IHRycyArIFwiIGNsYXNzPSd0aXRsZSBcIiArIHNmLnR5cGUgKyBcIidcIjtcclxuXHJcbiAgICAgICAgaWYgKGluZGV4ICE9IChzZl9sZW5ndGggLSAxKSkge1xyXG4gICAgICAgICAgICBpZiAoc2YuaXNfd2lkZSkge1xyXG4gICAgICAgICAgICAgICAgdHJzID0gdHJzICsgXCJzdHlsZT0nd2lkdGg6XCIgKyB3aWR0aCAqIDIgKyBcIiUnXCJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRycyA9IHRycyArIFwic3R5bGU9J3dpZHRoOlwiICsgd2lkdGggKyBcIiUnXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJzID0gdHJzICsgXCI+XCIgKyBsYWJlbCArIFwiPC90ZD5cIlxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhlYWQgPSAnPHRyPicgKyB0cnMgKyAnPC90cj4nO1xyXG5cclxuICAgIHJldHVybiB0aGVhZDtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFRib2R5ID0gZnVuY3Rpb24oa2V5cywgZmllbGQsIHZhbHVlcywgZWRpdGFibGUpIHtcclxuICAgIHZhciB0Ym9keSA9IFwiXCI7XHJcblxyXG4gICAgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHRib2R5ID0gdGJvZHkgKyBTdGVlZG9zVGFibGUuZ2V0VHIoa2V5cywgdmFsdWUsIGluZGV4LCBmaWVsZCwgZWRpdGFibGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0Ym9keTtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFRyID0gZnVuY3Rpb24oa2V5cywgaXRlbV92YWx1ZSwgaW5kZXgsIGZpZWxkLCBlZGl0YWJsZSkge1xyXG5cclxuICAgIHZhciBmaWVsZE9iaiA9IGZpZWxkO1xyXG4gICAgaWYgKCFfLmlzT2JqZWN0KGZpZWxkKSlcclxuICAgICAgICBmaWVsZE9iaiA9IFN0ZWVkb3NUYWJsZS5nZXRGaWVsZChmaWVsZCk7XHJcblxyXG4gICAgdmFyIHRyID0gXCI8dHIgaWQ9J1wiICsgZmllbGRPYmouY29kZSArIFwiX2l0ZW1fXCIgKyBpbmRleCArIFwiJyBuYW1lPSdcIiArIGZpZWxkT2JqLmNvZGUgKyBcIl9pdGVtX1wiICsgaW5kZXggKyBcIicgZGF0YS1pbmRleD0nXCIgKyBpbmRleCArIFwiJ1wiXHJcblxyXG4gICAgaWYgKGVkaXRhYmxlKSB7XHJcbiAgICAgICAgdHIgPSB0ciArIFwiJyBjbGFzcz0naXRlbSBlZGl0J1wiXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmKFN0ZWVkb3MuaXNNb2JpbGUoKSl7XHJcblx0XHRcdHRyID0gdHIgKyBcIiBjbGFzcz0naXRlbSBpdGVtLXJlYWRvbmx5J1wiXHJcbiAgICAgICAgfWVsc2V7XHJcblx0XHRcdHRyID0gdHIgKyBcIiBjbGFzcz0naXRlbSAnXCJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGl0ZW1fdmFsdWUucmVtb3ZlZCkge1xyXG4gICAgICAgIHRyID0gdHIgKyBcIiBzdHlsZT0nZGlzcGxheTpub25lJyBcIjtcclxuICAgIH1cclxuXHJcbiAgICB0ciA9IHRyICsgXCInPlwiO1xyXG5cclxuICAgIHZhciB0ZHMgPSBcIlwiO1xyXG5cclxuICAgIGlmIChlZGl0YWJsZSkge1xyXG4gICAgICAgIHRkcyA9IFN0ZWVkb3NUYWJsZS5nZXRSZW1vdmVUZChmaWVsZE9iai5jb2RlLCBpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNmaWVsZHMgPSBmaWVsZE9iai5zZmllbGRzO1xyXG5cclxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICB2YXIgc2ZpZWxkID0gc2ZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBrZXkpO1xyXG5cclxuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtX3ZhbHVlW2tleV07XHJcblxyXG4gICAgICAgIHRkcyA9IHRkcyArIFN0ZWVkb3NUYWJsZS5nZXRUZChzZmllbGQsIGluZGV4LCB2YWx1ZSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgdHIgPSB0ciArIHRkcyArIFwiPC90cj5cIjtcclxuICAgIHJldHVybiB0cjtcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFJlbW92ZVRkID0gZnVuY3Rpb24oZmllbGQsIGluZGV4KSB7XHJcbiAgICAvLyByZXR1cm4gXCI8dGQgY2xhc3M9J3N0ZWVkb3NUYWJsZS1pdGVtLXJlbW92ZSByZW1vdmVkJyBkYXRhLWluZGV4PSdcIiArIGluZGV4ICsgXCInPjxpIGNsYXNzPSdmYSBmYS10aW1lcycgYXJpYS1oaWRkZW49J3RydWUnPjwvdGQ+XCI7XHJcblx0cmV0dXJuIFwiXCJcclxufVxyXG5cclxuU3RlZWRvc1RhYmxlLmdldFRkID0gZnVuY3Rpb24oZmllbGQsIGluZGV4LCB2YWx1ZSkge1xyXG4gICAgdmFyIHRkID0gXCI8dGQgXCI7XHJcblxyXG4gICAgdGQgPSB0ZCArIFwiIGNsYXNzPSdzdGVlZG9zVGFibGUtaXRlbS1maWVsZCBcIiArIGZpZWxkLnR5cGUgKyBcIicgXCI7XHJcblxyXG4gICAgdmFyIHRkX3ZhbHVlID0gXCJcIjtcclxuXHJcbiAgICBpZihNZXRlb3IuaXNDbGllbnQpe1xyXG4gICAgICAgIHRkX3ZhbHVlID0gU3RlZWRvc1RhYmxlLmdldFREVmFsdWUoZmllbGQsIHZhbHVlKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cclxuICAgICAgICB1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0XHJcblxyXG4gICAgICAgIHRkX3ZhbHVlID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFZhbHVlKHZhbHVlLCBmaWVsZCwgbG9jYWxlLCB1dGNPZmZzZXQpXHJcbiAgICB9XHJcblxyXG4gICAgdGQgPSB0ZCArIFwiIGRhdGEtaW5kZXg9J1wiICsgaW5kZXggKyBcIic+XCIgKyB0ZF92YWx1ZSArIFwiPC90ZD5cIlxyXG5cclxuICAgIHJldHVybiB0ZDtcclxufVxyXG5cclxuXHJcblN0ZWVkb3NUYWJsZS5nZXRURFZhbHVlID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlKSB7XHJcbiAgICB2YXIgdGRfdmFsdWUgPSBcIlwiO1xyXG4gICAgaWYgKCFmaWVsZCkge1xyXG4gICAgICAgIHJldHVybiB0ZF92YWx1ZVxyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3VzZXInOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmlzX211bHRpc2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YodmFsdWVbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBDRkRhdGFNYW5hZ2VyLmdldEZvcm11bGFTcGFjZVVzZXJzKHZhbHVlKS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSB2YWx1ZS5nZXRQcm9wZXJ0eShcIm5hbWVcIikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gQ0ZEYXRhTWFuYWdlci5nZXRGb3JtdWxhU3BhY2VVc2Vycyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHUgPyB1Lm5hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdncm91cCc6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuaXNfbXVsdGlzZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZih2YWx1ZVswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IENGRGF0YU1hbmFnZXIuZ2V0Rm9ybXVsYU9yZ2FuaXphdGlvbnModmFsdWUpLmdldFByb3BlcnR5KFwibmFtZVwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHZhbHVlLmdldFByb3BlcnR5KFwibmFtZVwiKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBDRkRhdGFNYW5hZ2VyLmdldEZvcm11bGFPcmdhbml6YXRpb24odmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBvID8gby5uYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IHZhbHVlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X25vXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcclxuICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUgPyBcIjxhIGhyZWY9J21haWx0bzpcIiArIHZhbHVlICsgXCInPlwiICsgdmFsdWUgKyBcIjwvYT5cIiA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndXJsJzpcclxuICAgICAgICAgICAgICAgIGlmKHZhbHVlKXtcclxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZS5pbmRleE9mKFwiaHR0cFwiKSA9PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gXCI8YSBocmVmPSdcIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBcIjxhIGhyZWY9JycgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdmFsdWUgKyBcIjwvYT5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBcIjxhIGhyZWY9J2h0dHA6Ly9cIiArIGVuY29kZVVSSSh2YWx1ZSkgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPmh0dHA6Ly9cIiArIHZhbHVlICsgXCI8L2E+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdGRfdmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3Bhc3N3b3JkJzpcclxuICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gJyoqKioqKic7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdmFsdWUuc3BsaXQoXCItXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gdFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gdFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gJC5mb3JtYXQuZGF0ZSh2YWx1ZSwgJ3l5eXktTU0tZGQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdkYXRlVGltZSc6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdmFsdWUuc3BsaXQoXCJUXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdDAgPSB0WzBdLnNwbGl0KFwiLVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQxID0gdFsxXS5zcGxpdChcIjpcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gdDBbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdDBbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSB0MFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSB0MVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHQxWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRhdGUsIGhvdXJzLCBzZWNvbmRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gJC5mb3JtYXQuZGF0ZSh2YWx1ZSwgJ3l5eXktTU0tZGQgSEg6bW0nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZF92YWx1ZSA9IFN0ZWVkb3MubnVtYmVyVG9TdHJpbmcodmFsdWUsIGZpZWxkLmRpZ2l0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnb2RhdGEnOlxyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUpe1xyXG5cdFx0XHRcdFx0aWYgKGZpZWxkLmlzX211bHRpc2VsZWN0KXtcclxuXHRcdFx0XHRcdFx0dGRfdmFsdWUgPSBfLnBsdWNrKHZhbHVlLCAnQGxhYmVsJykudG9TdHJpbmcoKVxyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdHRkX3ZhbHVlID0gdmFsdWVbJ0BsYWJlbCddXHJcblx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRkX3ZhbHVlID0gdmFsdWUgPyB2YWx1ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGU7XHJcblxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB0ZF92YWx1ZTtcclxufTtcclxuXHJcbmlmKE1ldGVvci5pc0NsaWVudCl7XHJcbiAgICBBdXRvRm9ybS5hZGRJbnB1dFR5cGUoXCJ0YWJsZVwiLCB7XHJcbiAgICAgICAgdGVtcGxhdGU6IFwiYWZUYWJsZVwiLFxyXG4gICAgICAgIHZhbHVlT3V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmRhdGEoXCJzY2hlbWFLZXlcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VmFsaWRWYWx1ZShuYW1lKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbHVlQ29udmVydGVyczoge1xyXG4gICAgICAgICAgICBcInN0cmluZ0FycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb1N0cmluZ0FycmF5LFxyXG4gICAgICAgICAgICBcIm51bWJlclwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9OdW1iZXIsXHJcbiAgICAgICAgICAgIFwibnVtZXJBcnJheVwiOiBBdXRvRm9ybS52YWx1ZUNvbnZlcnRlcnMuc3RyaW5nVG9OdW1iZXJBcnJheSxcclxuICAgICAgICAgICAgXCJib29sZWFuXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0Jvb2xlYW4sXHJcbiAgICAgICAgICAgIFwiYm9vbGVhbkFycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0Jvb2xlYW5BcnJheSxcclxuICAgICAgICAgICAgXCJkYXRlXCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0RhdGUsXHJcbiAgICAgICAgICAgIFwiZGF0ZUFycmF5XCI6IEF1dG9Gb3JtLnZhbHVlQ29udmVydGVycy5zdHJpbmdUb0RhdGVBcnJheVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udGV4dEFkanVzdDogZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQuYXR0cy5tYXhsZW5ndGggPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb250ZXh0Lm1heCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYXR0cy5tYXhsZW5ndGggPSBjb250ZXh0Lm1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBUZW1wbGF0ZS5hZlRhYmxlLmV2ZW50cyh7XHJcbiAgICAgICAgJ3RhcCAuc3RlZWRvcy10YWJsZSAuc3RlZWRvc1RhYmxlLWl0ZW0tYWRkLC5hZGQtaXRlbS10cic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRlbXBsYXRlLmRhdGEubmFtZTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0YWJsZVZhbHVlID0gU3RlZWRvc1RhYmxlLmdldFRhYmxlVmFsdWUobmFtZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV3X2l0ZW1faW5kZXggPSB0YWJsZVZhbHVlID8gdGFibGVWYWx1ZS5sZW5ndGggOiAwO1xyXG5cclxuICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnNob3dNb2RhbChuYW1lLCBuZXdfaXRlbV9pbmRleCwgXCJhZGRcIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJ3RhcCAuc3RlZWRvcy10YWJsZSAuc3RlZWRvc1RhYmxlLWl0ZW0tZmllbGQnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmRhdGEuYXR0cy5lZGl0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gdGVtcGxhdGUuZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG4gICAgICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnNob3dNb2RhbChmaWVsZCwgaW5kZXgsIFwiZWRpdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICd0YXAgLnN0ZWVkb3MtdGFibGUgLnN0ZWVkb3NUYWJsZS1pdGVtLXJlbW92ZSc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgZmllbGQgPSB0ZW1wbGF0ZS5kYXRhLm5hbWU7XHJcbiAgICAgICAgICAgIHZhciBpdGVtX2luZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG4gICAgICAgICAgICBTZXNzaW9uLnNldChcImluc3RhbmNlX2NoYW5nZVwiLCB0cnVlKTtcclxuICAgICAgICAgICAgU3RlZWRvc1RhYmxlLnJlbW92ZUl0ZW0oZmllbGQsIGl0ZW1faW5kZXgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICd0YXAgLnN0ZWVkb3MtdGFibGUgLml0ZW0tcmVhZG9ubHknOiBmdW5jdGlvbiAoZXZlbnQsIHRlbXBsYXRlKSB7XHJcblx0XHRcdGlmICghdGVtcGxhdGUuZGF0YS5hdHRzLmVkaXRhYmxlKSB7XHJcblx0XHRcdFx0dmFyIGZpZWxkID0gdGVtcGxhdGUuZGF0YS5uYW1lO1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleDtcclxuXHRcdFx0XHRTdGVlZG9zVGFibGUuc2hvd01vZGFsKGZpZWxkLCBpbmRleCwgXCJyZWFkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIFRlbXBsYXRlLmFmVGFibGUucmVuZGVyZWQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5kYXRhLm5hbWU7XHJcblxyXG4gICAgICAgIHZhciBrZXlzID0gU3RlZWRvc1RhYmxlLmdldEtleXMoZmllbGQpO1xyXG4gICAgICAgIHZhciB2YWxpZFZhbHVlID0gU3RlZWRvc1RhYmxlLmhhbmRsZURhdGEoZmllbGQsIHRoaXMuZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgU3RlZWRvc1RhYmxlLnNldFRhYmxlVmFsdWUoZmllbGQsIHZhbGlkVmFsdWUpO1xyXG5cclxuICAgICAgICAkKFwidGhlYWRbbmFtZT0nXCIgKyBmaWVsZCArIFwiVGhlYWQnXVwiKS5odG1sKFN0ZWVkb3NUYWJsZS5nZXRUaGVhZChmaWVsZCwgdGhpcy5kYXRhLmF0dHMuZWRpdGFibGUpKTtcclxuXHJcbiAgICAgICAgJChcInRib2R5W25hbWU9J1wiICsgZmllbGQgKyBcIlRib2R5J11cIikuaHRtbChTdGVlZG9zVGFibGUuZ2V0VGJvZHkoa2V5cywgZmllbGQsIFN0ZWVkb3NUYWJsZS5nZXRUYWJsZVZhbHVlKGZpZWxkKSwgdGhpcy5kYXRhLmF0dHMuZWRpdGFibGUpKTtcclxuICAgICAgICBcclxuICAgICAgICBzdHIgPSB0KFwic3RlZWRvc190YWJsZV9hZGRfaXRlbVwiKTtcclxuICAgICAgICBhZGRJdGVtVHIgPSBcIjx0ciBjbGFzcz0nYWRkLWl0ZW0tdHInPjx0ZCBjb2xzcGFuPSdcIitrZXlzLmxlbmd0aCtcIic+PGkgY2xhc3M9J2lvbiBpb24tcGx1cy1yb3VuZCc+PC9pPlwiK3N0citcIjwvdGQ+PC90cj5cIjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5hdHRzLmVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgJChcInRmb290W25hbWU9J1wiICsgZmllbGQgKyBcIlRmb290J11cIikuYXBwZW5kKGFkZEl0ZW1Ucik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSIsIkltYWdlU2lnbi5oZWxwZXJzID1cclxuXHRzcGFjZVVzZXJTaWduOiAodXNlcklkKS0+XHJcblx0XHRzcGFjZSA9IFwiXCJcclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0c3BhY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuc3BhY2VcclxuXHRcdGVsc2VcclxuXHRcdFx0c3BhY2UgPSBTZXNzaW9uLmdldChcInNwYWNlSWRcIilcclxuXHJcblx0XHRzcGFjZVVzZXJTaWduID0gZGIuc3BhY2VfdXNlcl9zaWducy5maW5kT25lKHtzcGFjZTogc3BhY2UsIHVzZXI6IHVzZXJJZH0pO1xyXG5cdFx0cmV0dXJuIHNwYWNlVXNlclNpZ25cclxuXHJcblx0aW1hZ2VVUkw6ICh1c2VySWQpLT5cclxuXHJcblx0XHRzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbih1c2VySWQpO1xyXG5cclxuXHRcdGFic29sdXRlID0gZmFsc2VcclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0YWJzb2x1dGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuYWJzb2x1dGVcclxuXHJcblx0XHRpZiBzcGFjZVVzZXJTaWduPy5zaWduXHJcblx0XHRcdGlmIGFic29sdXRlXHJcblx0XHRcdFx0cmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9hdmF0YXJzL1wiICsgc3BhY2VVc2VyU2lnbi5zaWduKTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xyXG4iLCJJbWFnZVNpZ24uaGVscGVycyA9IHtcbiAgc3BhY2VVc2VyU2lnbjogZnVuY3Rpb24odXNlcklkKSB7XG4gICAgdmFyIHNwYWNlLCBzcGFjZVVzZXJTaWduO1xuICAgIHNwYWNlID0gXCJcIjtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBzcGFjZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5zcGFjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BhY2UgPSBTZXNzaW9uLmdldChcInNwYWNlSWRcIik7XG4gICAgfVxuICAgIHNwYWNlVXNlclNpZ24gPSBkYi5zcGFjZV91c2VyX3NpZ25zLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IHNwYWNlLFxuICAgICAgdXNlcjogdXNlcklkXG4gICAgfSk7XG4gICAgcmV0dXJuIHNwYWNlVXNlclNpZ247XG4gIH0sXG4gIGltYWdlVVJMOiBmdW5jdGlvbih1c2VySWQpIHtcbiAgICB2YXIgYWJzb2x1dGUsIHNwYWNlVXNlclNpZ247XG4gICAgc3BhY2VVc2VyU2lnbiA9IEltYWdlU2lnbi5oZWxwZXJzLnNwYWNlVXNlclNpZ24odXNlcklkKTtcbiAgICBhYnNvbHV0ZSA9IGZhbHNlO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGFic29sdXRlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmFic29sdXRlO1xuICAgIH1cbiAgICBpZiAoc3BhY2VVc2VyU2lnbiAhPSBudWxsID8gc3BhY2VVc2VyU2lnbi5zaWduIDogdm9pZCAwKSB7XG4gICAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgICAgcmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9hdmF0YXJzL1wiICsgc3BhY2VVc2VyU2lnbi5zaWduKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBTdGVlZG9zLmFic29sdXRlVXJsKFwiYXBpL2ZpbGVzL2F2YXRhcnMvXCIgKyBzcGFjZVVzZXJTaWduLnNpZ24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIlRyYWNlc0hhbmRsZXIuaGVscGVycyA9XHJcblx0c2hvd1NpZ25JbWFnZTogKGhhbmRsZXIsIGlzX2ZpbmlzaGVkLCBqdWRnZSkgLT5cclxuXHRcdGlmICFpc19maW5pc2hlZFxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdGlmIFsncmV0dXJuZWQnLCAndGVybWluYXRlZCcsICdyZXRyaWV2ZWQnXS5pbmNsdWRlcyhqdWRnZSlcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbihoYW5kbGVyKVxyXG5cclxuXHRcdGlmIHNwYWNlVXNlclNpZ24/LnNpZ25cclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGZhbHNlIiwiVHJhY2VzSGFuZGxlci5oZWxwZXJzID0ge1xuICBzaG93U2lnbkltYWdlOiBmdW5jdGlvbihoYW5kbGVyLCBpc19maW5pc2hlZCwganVkZ2UpIHtcbiAgICB2YXIgc3BhY2VVc2VyU2lnbjtcbiAgICBpZiAoIWlzX2ZpbmlzaGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChbJ3JldHVybmVkJywgJ3Rlcm1pbmF0ZWQnLCAncmV0cmlldmVkJ10uaW5jbHVkZXMoanVkZ2UpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNwYWNlVXNlclNpZ24gPSBJbWFnZVNpZ24uaGVscGVycy5zcGFjZVVzZXJTaWduKGhhbmRsZXIpO1xuICAgIGlmIChzcGFjZVVzZXJTaWduICE9IG51bGwgPyBzcGFjZVVzZXJTaWduLnNpZ24gOiB2b2lkIDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuIiwiSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycyA9XHJcblx0YXBwbGljYW50Q29udGV4dDogLT5cclxuXHRcdHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGRhdGEgPSB7XHJcblx0XHRcdG5hbWU6ICdpbnNfYXBwbGljYW50JyxcclxuXHRcdFx0YXR0czoge25hbWU6ICdpbnNfYXBwbGljYW50JywgaWQ6ICdpbnNfYXBwbGljYW50JywgY2xhc3M6ICdzZWxlY3RVc2VyIGZvcm0tY29udHJvbCBpbnNfYXBwbGljYW50J30sXHJcblx0XHRcdHZhbHVlOiBzdGVlZG9zX2luc3RhbmNlLmFwcGxpY2FudF9uYW1lXHJcblx0XHR9XHJcblx0XHRpZiBub3Qgc3RlZWRvc19pbnN0YW5jZSB8fCBzdGVlZG9zX2luc3RhbmNlLnN0YXRlICE9IFwiZHJhZnRcIlxyXG5cdFx0XHRkYXRhLmF0dHMuZGlzYWJsZWQgPSB0cnVlXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0aW5zdGFuY2VJZDogLT5cclxuXHRcdHJldHVybiAnaW5zdGFuY2Vmb3JtJzsjXCJpbnN0YW5jZV9cIiArIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKTtcclxuXHJcblx0Zm9ybV90eXBlczogLT5cclxuXHRcdGlmIEFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKVxyXG5cdFx0XHRyZXR1cm4gJ2Rpc2FibGVkJztcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuICdtZXRob2QnO1xyXG5cclxuXHRzdGVlZG9zX2Zvcm06IC0+XHJcblx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xyXG5cdFx0aWYgZm9ybV92ZXJzaW9uXHJcblx0XHRcdHJldHVybiBmb3JtX3ZlcnNpb25cclxuXHJcblx0aW5uZXJzdWJmb3JtQ29udGV4dDogKG9iaiktPlxyXG5cdFx0ZG9jX3ZhbHVlcyA9IFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWFWYWx1ZXMoKTtcclxuXHRcdG9ialtcInRhYmxlVmFsdWVzXCJdID0gaWYgZG9jX3ZhbHVlcyB0aGVuIGRvY192YWx1ZXNbb2JqLmNvZGVdIGVsc2UgW11cclxuXHRcdG9ialtcImZvcm1JZFwiXSA9IFwiaW5zdGFuY2Vmb3JtXCI7XHJcblx0XHRyZXR1cm4gb2JqO1xyXG5cclxuXHRpbnN0YW5jZTogLT5cclxuXHRcdFNlc3Npb24uZ2V0KFwiY2hhbmdlX2RhdGVcIilcclxuXHRcdGlmIChTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIikpXHJcblx0XHRcdHN0ZWVkb3NfaW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdFx0cmV0dXJuIHN0ZWVkb3NfaW5zdGFuY2U7XHJcblxyXG5cdGVtcHR5OiAodmFsKSAtPlxyXG5cdFx0aWYgdmFsXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0dW5lbXB0eTogKHZhbCkgLT5cclxuXHRcdGlmIHZhbFxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRlcXVhbHM6IChhLCBiKSAtPlxyXG5cdFx0cmV0dXJuIChhID09IGIpXHJcblxyXG5cdHVuZXF1YWxzOiAoYSwgYikgLT5cclxuXHRcdHJldHVybiAhKGEgPT0gYilcclxuXHJcblx0aW5jbHVkZXM6IChhLCBiKSAtPlxyXG5cdFx0cmV0dXJuIGIuc3BsaXQoJywnKS5pbmNsdWRlcyhhKTtcclxuXHJcblx0aW5jbHVkZTogKGEsIGIpIC0+XHJcblx0XHRyZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xyXG5cclxuXHRmaWVsZHM6IC0+XHJcblx0XHRmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xyXG5cdFx0aWYgZm9ybV92ZXJzaW9uXHJcblx0XHRcdHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKFdvcmtmbG93TWFuYWdlcl9mb3JtYXQuZ2V0QXV0b2Zvcm1TY2hlbWEoZm9ybV92ZXJzaW9uKSk7XHJcblxyXG5cdGZvcm1hdERhdGU6IChkYXRlLCBvcHRpb25zKS0+XHJcblx0XHRpZiAhZGF0ZVxyXG5cdFx0XHRyZXR1cm4gXCJcIjtcclxuXHRcdGlmIG9wdGlvbnMgJiYgdHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnXHJcblx0XHRcdG9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnMpO1xyXG5cclxuXHRcdGlmICFvcHRpb25zLmZvcm1hdFxyXG5cdFx0XHRvcHRpb25zID0ge2Zvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCJ9XHJcblxyXG5cdFx0cmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQob3B0aW9ucy5mb3JtYXQpO1xyXG5cclxuXHR0cmFjZXM6IC0+XHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0c3RlZWRvc0RhdGEgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpPy52aWV3Py50ZW1wbGF0ZT8uc3RlZWRvc0RhdGFcclxuXHRcdFx0aW5zdGFuY2UgPSBzdGVlZG9zRGF0YT8uaW5zdGFuY2VcclxuXHRcdFx0ZmxvdyA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRGbG93VmVyc2lvbihpbnN0YW5jZSk7XHJcblx0XHRcdGxvY2FsZSA9IHN0ZWVkb3NEYXRhPy5sb2NhbGVcclxuXHRcdFx0aWYgbG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xyXG5cdFx0XHRcdGxvY2FsZSA9IFwiemgtQ05cIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuXHRcdFx0ZmxvdyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZsb3dWZXJzaW9uKClcclxuXHJcblx0XHRcdGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIilcclxuXHJcblx0XHRpZiAhaW5zdGFuY2UgfHwgIWZsb3dcclxuXHRcdFx0cmV0dXJuIHt9O1xyXG5cclxuXHRcdHN0ZXBzID0gZmxvdy5zdGVwcztcclxuXHJcblx0XHR0cmFjZXMgPSB7fTtcclxuXHJcblx0XHRpbnN0YW5jZS50cmFjZXM/LmZvckVhY2ggKHRyYWNlKS0+XHJcblx0XHRcdHN0ZXAgPSBzdGVwcy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHRyYWNlLnN0ZXApXHJcblxyXG5cdFx0XHRhcHByb3ZlcyA9IFtdXHJcblxyXG5cdFx0XHR0cmFjZS5hcHByb3Zlcz8uZm9yRWFjaCAoYXBwcm92ZSkgLT5cclxuXHRcdFx0XHRpZiB0cmFjZS5pc19maW5pc2hlZCA9PSB0cnVlXHJcbiMg5bey57uT5p2f55qE5pi+56S65Li65qC45YeGL+mps+Wbni/lj5bmtojnlLPor7dcclxuXHRcdFx0XHRcdGlmIGFwcHJvdmUuanVkZ2UgPT0gJ2FwcHJvdmVkJ1xyXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIGFwcHJvdmVkXCIsIHt9LCBsb2NhbGUpXHJcblx0XHRcdFx0XHRlbHNlIGlmIGFwcHJvdmUuanVkZ2UgPT0gJ3JlamVjdGVkJ1xyXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlamVjdGVkXCIsIHt9LCBsb2NhbGUpXHJcblx0XHRcdFx0XHRlbHNlIGlmIGFwcHJvdmUuanVkZ2UgPT0gJ3Rlcm1pbmF0ZWQnXHJcblx0XHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgdGVybWluYXRlZFwiLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICdyZWFzc2lnbmVkJ1xyXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlYXNzaWduZWRcIiwge30sIGxvY2FsZSlcclxuXHRcdFx0XHRcdGVsc2UgaWYgYXBwcm92ZS5qdWRnZSA9PSAncmVsb2NhdGVkJ1xyXG5cdFx0XHRcdFx0XHRqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHJlbG9jYXRlZFwiLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHRcdFx0ZWxzZSBpZiBhcHByb3ZlLmp1ZGdlID09ICcnXHJcblx0XHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBcIlwiXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBcIlwiXHJcblxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGp1ZGdlX25hbWUgPSBUQVBpMThuLl9fKFwiSW5zdGFuY2UgU3RhdGUgcGVuZGluZ1wiLCB7fSwgbG9jYWxlKVxyXG5cclxuXHRcdFx0XHRhcHByb3Zlcy5wdXNoXHJcblx0XHRcdFx0XHRfaWQ6IGFwcHJvdmUuX2lkXHJcblx0XHRcdFx0XHRoYW5kbGVyOiBhcHByb3ZlLnVzZXJcclxuXHRcdFx0XHRcdGhhbmRsZXJfbmFtZTogYXBwcm92ZS5oYW5kbGVyX25hbWVcclxuXHRcdFx0XHRcdGhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWU6IGFwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZVxyXG5cdFx0XHRcdFx0aGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWU6IGFwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWVcclxuXHRcdFx0XHRcdGZpbmlzaF9kYXRlOiBhcHByb3ZlLmZpbmlzaF9kYXRlXHJcblx0XHRcdFx0XHRqdWRnZTogYXBwcm92ZS5qdWRnZVxyXG5cdFx0XHRcdFx0anVkZ2VfbmFtZToganVkZ2VfbmFtZVxyXG5cdFx0XHRcdFx0ZGVzY3JpcHRpb246IGFwcHJvdmUuZGVzY3JpcHRpb25cclxuXHRcdFx0XHRcdGlzX2ZpbmlzaGVkOiBhcHByb3ZlLmlzX2ZpbmlzaGVkXHJcblx0XHRcdFx0XHR0eXBlOiBhcHByb3ZlLnR5cGVcclxuXHRcdFx0XHRcdG9waW5pb25fZmllbGRzX2NvZGU6IGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZVxyXG5cdFx0XHRcdFx0c2lnbl9maWVsZF9jb2RlOiBhcHByb3ZlLnNpZ25fZmllbGRfY29kZVxyXG5cdFx0XHRcdFx0aXNfcmVhZDogYXBwcm92ZS5pc19yZWFkXHJcblx0XHRcdFx0XHRzaWduX3Nob3c6IGFwcHJvdmUuc2lnbl9zaG93XHJcblxyXG5cclxuXHRcdFx0aWYgc3RlcFxyXG5cdFx0XHRcdGlmIHN0ZXAubmFtZSBvZiB0cmFjZXNcclxuXHRcdFx0XHRcdHRyYWNlc1tzdGVwLm5hbWVdID0gdHJhY2VzW3N0ZXAubmFtZV0uY29uY2F0KGFwcHJvdmVzKVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHRyYWNlc1tzdGVwLm5hbWVdID0gYXBwcm92ZXNcclxuXHJcblx0XHRyZXR1cm4gdHJhY2VzO1xyXG5cclxuXHJcblxyXG5cdGRvY192YWx1ZXM6IC0+XHJcblx0XHRXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XHJcblxyXG5cdGluc3RhbmNlX2JveF9zdHlsZTogLT5cclxuXHRcdGJveCA9IFNlc3Npb24uZ2V0KFwiYm94XCIpXHJcblx0XHRpZiBib3ggPT0gXCJpbmJveFwiIHx8IGJveCA9PSBcImRyYWZ0XCJcclxuXHRcdFx0anVkZ2UgPSBTZXNzaW9uLmdldChcImp1ZGdlXCIpXHJcblx0XHRcdGlmIGp1ZGdlXHJcblx0XHRcdFx0aWYgKGp1ZGdlID09IFwiYXBwcm92ZWRcIilcclxuXHRcdFx0XHRcdHJldHVybiBcImJveC1zdWNjZXNzXCJcclxuXHRcdFx0XHRlbHNlIGlmIChqdWRnZSA9PSBcInJlamVjdGVkXCIpXHJcblx0XHRcdFx0XHRyZXR1cm4gXCJib3gtZGFuZ2VyXCJcclxuXHRcdGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgaW5zICYmIGlucy5maW5hbF9kZWNpc2lvblxyXG5cdFx0XHRpZiBpbnMuZmluYWxfZGVjaXNpb24gPT0gXCJhcHByb3ZlZFwiXHJcblx0XHRcdFx0cmV0dXJuIFwiYm94LXN1Y2Nlc3NcIlxyXG5cdFx0XHRlbHNlIGlmIChpbnMuZmluYWxfZGVjaXNpb24gPT0gXCJyZWplY3RlZFwiKVxyXG5cdFx0XHRcdHJldHVybiBcImJveC1kYW5nZXJcIlxyXG5cclxuI2lzX2Rpc2FibGVkOiAtPlxyXG4jICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG4jICAgIGlmICFpbnNcclxuIyAgICAgICAgcmV0dXJuO1xyXG4jICAgIGlmIGlucy5zdGF0ZSE9XCJkcmFmdFwiXHJcbiMgICAgICAgIHJldHVybiBcImRpc2FibGVkXCI7XHJcbiMgICAgcmV0dXJuO1xyXG5cclxuXHR0YWJsZV9maWVsZHM6IChpbnN0YW5jZSktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XHJcblx0XHRlbHNlXHJcblx0XHRcdGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtVmVyc2lvbihpbnN0YW5jZS5mb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pXHJcblx0XHRpZiBmb3JtX3ZlcnNpb25cclxuXHRcdFx0ZmllbGRzID0gXy5jbG9uZShmb3JtX3ZlcnNpb24uZmllbGRzKTtcclxuXHJcblx0XHRcdGZpZWxkcy5mb3JFYWNoIChmaWVsZCwgaW5kZXgpIC0+XHJcblx0XHRcdFx0ZmllbGQudHJfc3RhcnQgPSBcIlwiO1xyXG5cdFx0XHRcdGZpZWxkLnRyX2VuZCA9IFwiXCI7XHJcblx0XHRcdFx0dGRfY29sc3BhbiA9IDE7XHJcbiNcdFx0XHRcdOW8uuWItuiuvue9ruagh+WktOWtl+auteS4uuWuveWtl+autVxyXG5cdFx0XHRcdGlmIENvcmVGb3JtPy5wYWdlVGl0bGVGaWVsZE5hbWUgPT0gZmllbGQuY29kZVxyXG5cdFx0XHRcdFx0ZmllbGQuaXNfd2lkZSA9IHRydWVcclxuXHJcblx0XHRcdFx0aWYgZmllbGQuZm9ybXVsYSAmJiBmaWVsZC50eXBlICE9ICdvZGF0YSdcclxuXHRcdFx0XHRcdGZpZWxkLnBlcm1pc3Npb24gPSBcInJlYWRvbmx5XCI7XHJcblxyXG5cdFx0XHRcdGlmIFN0ZWVkb3MuaXNNb2JpbGUoKVxyXG4jIOWmguaenOW9k+WJjeWtl+auteaYr+WIhue7hOOAgeihqOagvOOAgeWuveWtl+autVxyXG5cdFx0XHRcdFx0aWYgZmllbGQudHlwZSA9PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PSAndGFibGUnXHJcblx0XHRcdFx0XHRcdGZpZWxkLnRkX2NvbHNwYW4gPSA0O1xyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRmaWVsZC50ZF9jb2xzcGFuID0gMztcclxuXHJcblx0XHRcdFx0XHRpZiBpbmRleCAhPSAwXHJcblx0XHRcdFx0XHRcdGZpZWxkLnRyX3N0YXJ0ID0gXCI8dHI+XCI7XHJcblx0XHRcdFx0XHRcdGZpZWxkLnRyX2VuZCA9IFwiPC90cj5cIjtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRwcmVfZmllbGRzID0gZmllbGRzLnNsaWNlKDAsIGluZGV4KTtcclxuXHJcblx0XHRcdFx0XHRwcmVfd2lkZV9maWVsZHMgPSBwcmVfZmllbGRzLmZpbHRlclByb3BlcnR5KFwiaXNfd2lkZVwiLCB0cnVlKTtcclxuXHJcblx0XHRcdFx0XHR0cl9zdGFydCA9IFwiXCI7XHJcblxyXG5cdFx0XHRcdFx0dHJfZW5kID0gXCJcIjtcclxuXHJcblx0XHRcdFx0XHQjIOWFiOiuoeeul+W9k+WJjeWtl+auteaYr+WQpuS4uuWuveWtl+autVxyXG5cdFx0XHRcdFx0YmVmb3JlX2ZpZWxkID0gbnVsbDtcclxuXHRcdFx0XHRcdGFmdGVyX2ZpZWxkID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRpZiBpbmRleCA+IDBcclxuXHRcdFx0XHRcdFx0YmVmb3JlX2ZpZWxkID0gZmllbGRzW2luZGV4IC0gMV1cclxuXHJcblx0XHRcdFx0XHRpZiBpbmRleCA8IGZpZWxkcy5sZW5ndGggLSAxXHJcblx0XHRcdFx0XHRcdGFmdGVyX2ZpZWxkID0gZmllbGRzW2luZGV4ICsgMV1cclxuXHJcblx0XHRcdFx0XHQjIOWmguaenOW9k+WJjeWtl+auteaYr+WIhue7hOOAgeihqOagvOOAgeWuveWtl+autVxyXG5cdFx0XHRcdFx0aWYgZmllbGQudHlwZSA9PSAnc2VjdGlvbicgfHwgZmllbGQudHlwZSA9PSAndGFibGUnXHJcblx0XHRcdFx0XHRcdHRkX2NvbHNwYW4gPSA0O1xyXG5cdFx0XHRcdFx0ZWxzZSBpZiBmaWVsZC5pc193aWRlXHJcblx0XHRcdFx0XHRcdHRkX2NvbHNwYW4gPSAzO1xyXG5cdFx0XHRcdFx0ZWxzZVxyXG4jIOWJjeWQjumDveaYr+WuveWtl+autVxyXG5cdFx0XHRcdFx0XHRpZiBiZWZvcmVfZmllbGQgJiYgYWZ0ZXJfZmllbGQgJiYgYmVmb3JlX2ZpZWxkLmlzX3dpZGUgJiYgYWZ0ZXJfZmllbGQuaXNfd2lkZVxyXG5cdFx0XHRcdFx0XHRcdGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHRkX2NvbHNwYW4gPSAzO1xyXG5cclxuXHRcdFx0XHRcdFx0IyDlvZPliY3mmK90ciDkuIvnmoQg56ys5LiA5LiqdGQgJiDlkI7ovrnnmoTlrZfmrrXmmK/lrr3lrZfmrrVcclxuXHRcdFx0XHRcdFx0aWYgKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09IDAgJiYgYWZ0ZXJfZmllbGQgJiYgYWZ0ZXJfZmllbGQuaXNfd2lkZVxyXG5cdFx0XHRcdFx0XHRcdGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHRkX2NvbHNwYW4gPSAzO1xyXG5cclxuXHRcdFx0XHRcdFx0IyDlvZPliY3mmK90ciDkuIvnmoQg56ys5LiA5LiqdGQgJiDlvZPliY3lrZfmrrXmmK/mnIDlkI7kuIDkuKrlrZfmrrVcclxuXHRcdFx0XHRcdFx0aWYgKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09IDAgJiYgYWZ0ZXJfZmllbGQgPT0gbnVsbFxyXG5cdFx0XHRcdFx0XHRcdGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdHRkX2NvbHNwYW4gPSAzO1xyXG5cclxuXHRcdFx0XHRcdGZpZWxkLnRkX2NvbHNwYW4gPSB0ZF9jb2xzcGFuO1xyXG5cclxuXHJcblx0XHRcdFx0XHRpZiBpbmRleCA9PSAwXHJcbiMgdHJfc3RhcnQgPSBcIjx0cj5cIjsg55Sx5LqOVGVtcGxhdGXnmoTnvJbor5FidWfvvIzlr7zoh7Tmr4/mrKHnu5nkuIDkuKp0cuW8gOWni+aXtu+8jOS8muiHquWKqOihpeWktOaIluihpeWwvuOAguWboOatpOWcqOesrOS4gOihjOi/lOWbnuS4gOS4quepuuWtl+espuS4si5cclxuXHRcdFx0XHRcdFx0dHJfc3RhcnQgPSBcIjx0cj5cIjtcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0aWYgKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09IDAgfHwgZmllbGQuaXNfd2lkZVxyXG5cdFx0XHRcdFx0XHRcdGlmIGZpZWxkLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJfc3RhcnQgPSBcIjx0ciBjbGFzcyA9IFxcXCJ0ci1jaGlsZC10YWJsZVxcXCI+XCI7XHJcblx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0dHJfc3RhcnQgPSBcIjx0cj5cIjtcclxuXHJcblx0XHRcdFx0XHRmaWVsZC50cl9zdGFydCA9IHRyX3N0YXJ0O1xyXG5cclxuXHJcblx0XHRcdFx0XHRpZiBpbmRleCArIDEgPT0gZmllbGRzLmxlbmd0aCB8fCBmaWVsZC50eXBlID09ICdzZWN0aW9uJyB8fCBmaWVsZC50eXBlID09ICd0YWJsZScgfHwgZmllbGQuaXNfd2lkZVxyXG5cdFx0XHRcdFx0XHR0cl9lbmQgPSBcIjwvdHI+XCI7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyICE9IDBcclxuXHRcdFx0XHRcdFx0dHJfZW5kID0gXCI8L3RyPlwiO1xyXG5cclxuXHRcdFx0XHRcdGZpZWxkLnRyX2VuZCA9IHRyX2VuZDtcclxuXHJcblx0XHRcdHJldHVybiBmaWVsZHM7XHJcblxyXG5cdHNvcnRfYXBwcm92ZTogKGFwcHJvdmVzLCBvcmRlciktPlxyXG5cdFx0aWYgIWFwcHJvdmVzXHJcblx0XHRcdHJldHVybiBbXVxyXG5cclxuXHRcdGlmICFhcHByb3ZlcyBpbnN0YW5jZW9mIEFycmF5XHJcblx0XHRcdHJldHVybiBbXVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpZiBvcmRlciA9PSAnZGVzYydcclxuXHRcdFx0XHRhcHByb3Zlcy5zb3J0IChwMSwgcDIpIC0+XHJcblx0XHRcdFx0XHRfcDEgPSAwXHJcblx0XHRcdFx0XHRfcDIgPSAwXHJcblxyXG5cdFx0XHRcdFx0aWYgcDEuZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdFx0X3AxID0gcDEuZmluaXNoX2RhdGUuZ2V0VGltZSgpXHJcblxyXG5cdFx0XHRcdFx0aWYgcDIuZmluaXNoX2RhdGVcclxuXHRcdFx0XHRcdFx0X3AyID0gcDIuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBfcDIgLSBfcDFcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGFwcHJvdmVzLnNvcnQgKHAxLCBwMikgLT5cclxuXHRcdFx0XHRcdF9wMSA9IDBcclxuXHRcdFx0XHRcdF9wMiA9IDBcclxuXHJcblx0XHRcdFx0XHRpZiBwMS5maW5pc2hfZGF0ZVxyXG5cdFx0XHRcdFx0XHRfcDEgPSBwMS5maW5pc2hfZGF0ZS5nZXRUaW1lKClcclxuXHJcblx0XHRcdFx0XHRpZiBwMi5maW5pc2hfZGF0ZVxyXG5cdFx0XHRcdFx0XHRfcDIgPSBwMi5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIF9wMSAtIF9wMlxyXG5cdFx0cmV0dXJuIGFwcHJvdmVzXHJcblxyXG5cdF90OiAoa2V5KS0+XHJcblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXkpXHJcblx0Z2V0RmllbGQ6IChjb2RlKS0+XHJcblx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXHJcblx0XHRpZiBmb3JtX3ZlcnNpb25cclxuXHRcdFx0cmV0dXJuIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSlcclxuXHJcblx0Z2V0VmFsdWU6IChjb2RlKS0+XHJcblx0XHRpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZVxyXG5cclxuXHRcdGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb25cclxuXHJcblx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblxyXG5cdFx0dXRjT2Zmc2V0ID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnV0Y09mZnNldFxyXG5cclxuXHRcdHZhbHVlcyA9IGluc3RhbmNlLnZhbHVlcyB8fCB7fVxyXG5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHR2YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKClcclxuXHJcblx0XHRyZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldFZhbHVlIHZhbHVlc1tjb2RlXSwgZm9ybV92ZXJzaW9uLmZpZWxkcy5maW5kUHJvcGVydHlCeVBLKFwiY29kZVwiLCBjb2RlKSwgbG9jYWxlLCB1dGNPZmZzZXRcclxuXHJcblx0Z2V0TGFiZWw6IChjb2RlKS0+XHJcblx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXHJcblx0XHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwgZm9ybV92ZXJzaW9uLmZpZWxkcywgY29kZVxyXG5cclxuXHRnZXRDZkNsYXNzOiAoZmllbGQpLT5cclxuXHRcdGlmIGZpZWxkPy50eXBlID09IFwiaW5wdXRcIiAmJiBmaWVsZD8uaXNfdGV4dGFyZWFcclxuXHRcdFx0cmV0dXJuIFwiY2ZUZXh0YXJlYVwiXHJcblxyXG5cdGdldFRhYmxlVGhlYWQ6IChmaWVsZCktPlxyXG5cdFx0cmV0dXJuIFN0ZWVkb3NUYWJsZS5nZXRUaGVhZChmaWVsZCwgZmFsc2UpXHJcblxyXG5cdGdldFRhYmxlQm9keTogKGZpZWxkKS0+XHJcblxyXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlXHJcblx0XHRcdHZhbHVlcyA9IGluc3RhbmNlLnZhbHVlcyB8fCB7fVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR2YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKClcclxuXHJcblx0XHR0YWJsZVZhbHVlID0gdmFsdWVzW2ZpZWxkLmNvZGVdO1xyXG5cdFx0cmV0dXJuIFN0ZWVkb3NUYWJsZS5nZXRUYm9keShmaWVsZC5zZmllbGRzLmdldFByb3BlcnR5KFwiY29kZVwiKSwgZmllbGQsIHRhYmxlVmFsdWUsIGZhbHNlKVxyXG5cclxuXHRzaG93TGFiZWw6IChmaWVsZCktPlxyXG5cdFx0dGVtcGxhdGVEYXRhID0gVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhXHJcblx0XHRpZiB0ZW1wbGF0ZURhdGEubGFiZWwgPT0gZmFsc2VcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cclxuI1x0YWZGaWVsZExhYmVsVGV4dDogKG9wKS0+XHJcbiNcdFx0aWYgIVRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YVxyXG4jXHRcdFx0cmV0dXJuIEF1dG9Gb3JtLmdldExhYmVsRm9yRmllbGQob3AubmFtZSlcclxuI1x0XHRlbHNlXHJcbiNcdFx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXHJcbiNcdFx0XHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwgZm9ybV92ZXJzaW9uLmZpZWxkcywgb3A/Lmhhc2g/Lm5hbWVcclxuXHJcblx0aXNPcGluaW9uRmllbGQ6IChmaWVsZCktPlxyXG5cdFx0cmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGQuZm9ybXVsYSlcclxuXHJcblx0aXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmc6IChmaWVsZF9mb3JtdWxhKS0+XHJcblx0XHRyZXR1cm4gSW5zdGFuY2VTaWduVGV4dC5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKVxyXG5cclxuXHRpbmNsdWRlc09waW5pb25GaWVsZDogKGZvcm0sIGZvcm1fdmVyc2lvbiktPlxyXG5cclxuXHRcdGZpZWxkX2Zvcm11bGFzID0gbmV3IEFycmF5KCk7XHJcblxyXG5cdFx0ZmllbGRzID0gZGIuZm9ybV92ZXJzaW9ucy5maW5kT25lKHtfaWQ6IGZvcm1fdmVyc2lvbiwgZm9ybTogZm9ybX0pPy5maWVsZHMgfHwgW11cclxuXHJcblx0XHRmaWVsZHMuZm9yRWFjaCAoZiktPlxyXG5cdFx0XHRpZiBmLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nICdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZSdcclxuXHRcdFx0ZWxzZSBpZiBmLnR5cGUgPT0gJ3NlY3Rpb24nXHJcblx0XHRcdFx0Zj8uZmllbGRzPy5mb3JFYWNoIChmMSktPlxyXG5cdFx0XHRcdFx0ZmllbGRfZm9ybXVsYXMucHVzaCBmMS5mb3JtdWxhXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRmaWVsZF9mb3JtdWxhcy5wdXNoIGYuZm9ybXVsYVxyXG5cclxuXHRcdF8uc29tZSBmaWVsZF9mb3JtdWxhcywgKGZpZWxkX2Zvcm11bGEpLT5cclxuXHRcdFx0cmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSlcclxuXHJcblx0Z2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lOiAoZmllbGRfZm9ybXVsYSwgdG9wX2tleXdvcmRzKS0+XHJcblxyXG5cdFx0b3BpbmlvbkZpZWxkcyA9IG5ldyBBcnJheSgpO1xyXG4jXHRcdGNvbnNvbGUubG9nKFwiZmllbGRfZm9ybXVsYVwiLCBmaWVsZF9mb3JtdWxhKVxyXG5cdFx0aWYgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc09waW5pb25GaWVsZF9mcm9tX3N0cmluZyhmaWVsZF9mb3JtdWxhKVxyXG5cdFx0XHRpZiBmaWVsZF9mb3JtdWxhXHJcblxyXG4jXHRcdFx0XHRmb28xID0gZmllbGRfZm9ybXVsYS5zcGxpdChcIixcIilcclxuXHRcdFx0XHRmb28xID0gZmllbGRfZm9ybXVsYS5zcGxpdChcIjtcIilcclxuXHJcbiNcdFx0XHRcdGlmIHRvcF9rZXl3b3Jkc1xyXG4jXHRcdFx0XHRcdGZvbzEgPSBmaWVsZF9mb3JtdWxhLnNwbGl0KFwiO1wiKVxyXG5cclxuXHRcdFx0XHRmb28xLmZvckVhY2ggKGZvbyktPlxyXG5cdFx0XHRcdFx0anNvbl9mb3JtdWxhID0ge31cclxuXHJcblx0XHRcdFx0XHR0cnlcclxuXHRcdFx0XHRcdFx0anNvbl9mb3JtdWxhID0gZXZhbChcIihcIiArIGZvbyArIFwiKVwiKVxyXG5cdFx0XHRcdFx0Y2F0Y2hcclxuXHRcdFx0XHRcdFx0anNvbl9mb3JtdWxhID0ge31cclxuXHJcblx0XHRcdFx0XHRpZiBqc29uX2Zvcm11bGE/LnlpamlhbmxhblxyXG5cdFx0XHRcdFx0XHRzZiA9IHt9XHJcblxyXG5cdFx0XHRcdFx0XHRzZi5zdGVwTmFtZSA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uc3RlcFxyXG5cclxuXHRcdFx0XHRcdFx0c2YuaW1hZ2Vfc2lnbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW4uaW1hZ2Vfc2lnbiB8fCBmYWxzZVxyXG5cclxuXHRcdFx0XHRcdFx0c2Yub25seV9jY19vcGluaW9uID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5vbmx5X2NjIHx8IGZhbHNlXHJcblxyXG5cdFx0XHRcdFx0XHRzZi5kZWZhdWx0X2Rlc2NyaXB0aW9uID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5kZWZhdWx0XHJcblxyXG5cdFx0XHRcdFx0XHRzZi5vbmx5X2hhbmRsZXIgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLm9ubHlfaGFuZGxlclxyXG5cclxuXHRcdFx0XHRcdFx0c2YudG9wX2tleXdvcmRzID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi50b3Bfa2V5d29yZHMgfHwgdG9wX2tleXdvcmRzXHJcblxyXG5cdFx0XHRcdFx0XHRvcGluaW9uRmllbGRzLnB1c2goc2YpO1xyXG5cclxuXHRcdFx0XHRcdGVsc2UgaWYoZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcInt0cmFjZXMuXCIpID4gLTEgfHwgZmllbGRfZm9ybXVsYT8uaW5kZXhPZihcIntzaWduYXR1cmUudHJhY2VzLlwiKSA+IC0xKVxyXG5cclxuXHRcdFx0XHRcdFx0c2YgPSB7b25seV9jY19vcGluaW9uOiBmYWxzZSwgaW1hZ2Vfc2lnbjogZmFsc2UsIHRvcF9rZXl3b3JkczogdG9wX2tleXdvcmRzfVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgZm9vLmluZGV4T2YoXCJ7c2lnbmF0dXJlLlwiKSA+IC0xXHJcblx0XHRcdFx0XHRcdFx0c2YuaW1hZ2Vfc2lnbiA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRmb28gPSBmb28ucmVwbGFjZShcIntzaWduYXR1cmUuXCIsXCJcIik7XHJcblxyXG5cdFx0XHRcdFx0XHRzMSA9IGZvby5yZXBsYWNlKFwie1wiLFwiXCIpLnJlcGxhY2UoXCJ9XCIsXCJcIilcclxuXHRcdFx0XHRcdFx0aWYgczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDFcclxuXHRcdFx0XHRcdFx0XHRzZi5zdGVwTmFtZSA9IHMxLnNwbGl0KFwiLlwiKVsxXVxyXG5cdFx0XHRcdFx0XHRcdGlmIG9waW5pb25GaWVsZHMuZmlsdGVyUHJvcGVydHkoXCJzdGVwTmFtZVwiLHNmLnN0ZXBOYW1lKS5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHRcdFx0XHRvcGluaW9uRmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJzdGVwTmFtZVwiLCBzZi5zdGVwTmFtZSk/Lm9ubHlfY2Nfb3BpbmlvbiA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRpZiBzMS5zcGxpdChcIi5cIikubGVuZ3RoID4gMlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiBzMS5zcGxpdChcIi5cIilbMl0/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ2NjJ1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNmLm9ubHlfY2Nfb3BpbmlvbiA9IHRydWVcclxuXHRcdFx0XHRcdFx0b3BpbmlvbkZpZWxkcy5wdXNoKHNmKTtcclxuXHJcblx0XHRyZXR1cm4gb3BpbmlvbkZpZWxkc1xyXG5cclxuXHRzaG93Q0NPcGluaW9uOiAoZmllbGQpLT5cclxuXHRcdGlmIGZpZWxkLmZvcm11bGE/LmluZGV4T2YoXCJ7dHJhY2VzLlwiKSA+IC0xIHx8IGZpZWxkLmZvcm11bGE/LmluZGV4T2YoXCJ7c2lnbmF0dXJlLnRyYWNlcy5cIikgPiAtMVxyXG5cdFx0XHRzMSA9IGZpZWxkLmZvcm11bGEucmVwbGFjZShcIntzaWduYXR1cmUuXCIsXCJcIikucmVwbGFjZShcIntcIixcIlwiKS5yZXBsYWNlKFwifVwiLFwiXCIpXHJcblx0XHRcdGlmIHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAyXHJcblx0XHRcdFx0aWYgczEuc3BsaXQoXCIuXCIpWzJdPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICdjYydcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0bWFya0Rvd25Ub0h0bWw6IChtYXJrRG93blN0cmluZyktPlxyXG5cdFx0aWYgbWFya0Rvd25TdHJpbmdcclxuXHRcdFx0cmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcclxuXHRcdFx0cmVuZGVyZXIubGluayA9ICggaHJlZiwgdGl0bGUsIHRleHQgKSAtPlxyXG5cdFx0XHRcdHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPScje2hyZWZ9JyB0aXRsZT0nI3t0aXRsZX0nPiN7dGV4dH08L2E+XCJcclxuXHRcdFx0cmV0dXJuIFNwYWNlYmFycy5TYWZlU3RyaW5nKE1hcmtkb3duKG1hcmtEb3duU3RyaW5nLCB7cmVuZGVyZXI6cmVuZGVyZXJ9KSlcclxuXHJcblx0Zl9sYWJlbDogKHRoYXQpLT5cclxuXHRcdHJldHVybiB0aGF0Lm5hbWUgfHwgdGhhdC5jb2RlXHJcblxyXG5pZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnN0ZWVkb3NfZm9ybSA9IC0+XHJcblx0XHRyZXR1cm4gdGhpcy5mb3JtX3ZlcnNpb25cclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pc1NlY3Rpb24gPSAoY29kZSktPlxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gdGhpcy5mb3JtX3ZlcnNpb25cclxuXHRcdHJldHVybiBmb3JtX3ZlcnNpb24uZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpLnR5cGUgPT0gJ3NlY3Rpb24nXHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZG9jX3ZhbHVlcyA9IC0+XHJcblx0XHRpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XHJcblx0XHRyZXR1cm4gaW5zdGFuY2UudmFsdWVzO1xyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmFwcGxpY2FudENvbnRleHQgPSAtPlxyXG5cdFx0aW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xyXG5cdFx0ZGF0YSA9IHtcclxuXHRcdFx0bmFtZTogJ2luc19hcHBsaWNhbnQnLFxyXG5cdFx0XHRhdHRzOiB7bmFtZTogJ2luc19hcHBsaWNhbnQnLCBpZDogJ2luc19hcHBsaWNhbnQnLCBjbGFzczogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnfSxcclxuXHRcdFx0dmFsdWU6IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lXHJcblx0XHR9XHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5zdGFuY2UgPSAtPlxyXG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2VcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5maWVsZHMgPSAtPlxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gdGhpcy5mb3JtX3ZlcnNpb25cclxuXHRcdGlmIGZvcm1fdmVyc2lvblxyXG5cdFx0XHRyZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmZvcm1fdHlwZXMgPSAtPlxyXG5cdFx0cmV0dXJuIFwiZGlzYWJsZWRcIlxyXG5cclxuXHRUZW1wbGF0ZS5yZWdpc3RlckhlbHBlciBcImFmRmllbGRMYWJlbFRleHRcIiwgKG9wKS0+XHJcblx0XHRmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uXHJcblx0XHRJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwgZm9ybV92ZXJzaW9uLmZpZWxkcywgb3A/Lmhhc2g/Lm5hbWVcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5fdCA9IChrZXkpLT5cclxuXHRcdGxvY2FsZSA9IHRoaXMubG9jYWxlXHJcblxyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKVxyXG5cclxuXHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmluc19hdHRhY2hfZG93bmxvYWRfdXJsID0gKF9pZCwgYWJzb2x1dGUpLT5cclxuXHRcdGlmIGFic29sdXRlXHJcblx0XHRcdHJldHVybiBNZXRlb3IuYWJzb2x1dGVVcmwoXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy8je19pZH0/ZG93bmxvYWQ9dHJ1ZVwiKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIFwiL2FwaS9maWxlcy9pbnN0YW5jZXMvI3tfaWR9P2Rvd25sb2FkPXRydWVcIjtcclxuXHJcblx0SW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5vcHRpb25zID0gKGZpZWxkKS0+XHJcblx0XHRvcHRpb25zID0gZmllbGQ/Lm9wdGlvbnM/LnNwbGl0KFwiXFxuXCIpXHJcblx0XHRyZXYgPSBbXVxyXG5cdFx0b3B0aW9ucz8uZm9yRWFjaCAoaXRlbSktPlxyXG5cdFx0XHRyZXYucHVzaCh7bGFiZWw6IGl0ZW0sIHZhbHVlOiBpdGVtfSlcclxuXHJcblx0XHRyZXR1cm4gcmV2XHJcblxyXG5cdEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZ2V0UGVybWlzc2lvbnMgPSAoY29kZSktPlxyXG5cdFx0aWYgIVRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5zdGFydFN0ZXBFZGl0YWJsZUZpZWxkcz8uaW5jbHVkZXMoY29kZSlcclxuXHRcdFx0cmV0dXJuIFwicmVhZG9ubHkgZGlzYWJsZWRcIlxyXG5cdFx0cmV0dXJuIFwiXCJcclxuXHJcbkluc3RhbmNlZm9ybVRlbXBsYXRlLmV2ZW50cyA9XHJcblx0J2NoYW5nZSAuZm9ybS1jb250cm9sLC5jaGVja2JveCBpbnB1dCwuYWYtcmFkaW8tZ3JvdXAgaW5wdXQsLmFmLWNoZWNrYm94LWdyb3VwIGlucHV0JzogKGV2ZW50KS0+XHJcblx0XHRJbnN0YW5jZU1hbmFnZXIuaW5zdGFuY2Vmb3JtQ2hhbmdlRXZlbnQoZXZlbnQpXHJcblxyXG5cdCd0eXBlYWhlYWQ6Y2hhbmdlIC5mb3JtLWNvbnRyb2wnOiAoZXZlbnQpIC0+XHJcblx0XHRJbnN0YW5jZU1hbmFnZXIuaW5zdGFuY2Vmb3JtQ2hhbmdlRXZlbnQoZXZlbnQpXHJcblxyXG5cdCdjbGljayAuY2ZUZXh0YXJlYSBhJzogKGV2ZW50KS0+XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0U3RlZWRvcy5vcGVuV2luZG93KGV2ZW50LnRhcmdldC5ocmVmKTtcclxuXHJcblxyXG5JbnN0YW5jZWZvcm1UZW1wbGF0ZS5vbkNyZWF0ZWQgPSAoKS0+XHJcblx0aW5zdGFuY2UgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRpZiAhaW5zdGFuY2VcclxuXHRcdHJldHVybjtcclxuXHJcblx0dGVtcGxhdGUgPSBUZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUoaW5zdGFuY2UpO1xyXG5cclxuXHR0cnlcclxuXHRcdGNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0ZW1wbGF0ZSwge2lzQm9keTogdHJ1ZX0pO1xyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUubG9nIFwiSW5zdGFuY2UgVGVtcGxhdGUgRXJyb3JcIiwgZVxyXG5cdFx0Y29tcGlsZWQgPSBTcGFjZWJhcnNDb21waWxlci5jb21waWxlKFwiXCIsIHtpc0JvZHk6IHRydWV9KTtcclxuXHJcblxyXG5cdHJlbmRlckZ1bmN0aW9uID0gZXZhbChjb21waWxlZCk7XHJcblxyXG5cdGluc3RhbmNlVmlldyA9IG5ldyBCbGF6ZS5WaWV3KFwiY3VzdG9tX2luc3RhbmNlX3RlbXBsYXRlXCIsIHJlbmRlckZ1bmN0aW9uKTtcclxuXHJcblx0aW5zdGFuY2VDdXN0b21UZW1wbGF0ZSA9IG5ldyBCbGF6ZS5UZW1wbGF0ZShpbnN0YW5jZVZpZXcubmFtZSwgcmVuZGVyRnVuY3Rpb24pO1xyXG5cclxuXHRUZW1wbGF0ZS5pbnN0YW5jZV9jdXN0b21fdGVtcGxhdGUgPSBpbnN0YW5jZUN1c3RvbVRlbXBsYXRlXHJcblxyXG5cdFRlbXBsYXRlLmluc3RhbmNlX2N1c3RvbV90ZW1wbGF0ZS5oZWxwZXJzIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnNcclxuXHJcblxyXG5cclxuXHJcbkluc3RhbmNlZm9ybVRlbXBsYXRlLm9uUmVuZGVyZWQgPSAoKS0+XHJcblx0IyB0ID0gdGhpcztcclxuXHJcblx0I3Quc3Vic2NyaWJlIFwiaW5zdGFuY2VfZGF0YVwiLCBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIiksIC0+XHJcblx0IyAgICBUcmFja2VyLmFmdGVyRmx1c2ggLT5cclxuXHRpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdGlmICFpbnN0YW5jZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHQjJChcIiNpbnNfYXBwbGljYW50XCIpLnNlbGVjdDIoKS52YWwoaW5zdGFuY2UuYXBwbGljYW50KS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuXHQjJChcIiNpbnNfYXBwbGljYW50XCIpLnZhbChpbnN0YW5jZS5hcHBsaWNhbnQpO1xyXG5cdCQoXCJpbnB1dFtuYW1lPSdpbnNfYXBwbGljYW50J11cIilbMF0/LmRhdGFzZXQudmFsdWVzID0gaW5zdGFuY2UuYXBwbGljYW50O1xyXG5cdCQoXCJpbnB1dFtuYW1lPSdpbnNfYXBwbGljYW50J11cIikudmFsKGluc3RhbmNlLmFwcGxpY2FudF9uYW1lKVxyXG5cclxuXHJcblx0QXBwcm92ZU1hbmFnZXIuZXJyb3IgPSB7bmV4dFN0ZXBzOiAnJywgbmV4dFN0ZXBVc2VyczogJyd9O1xyXG5cclxuXHQjIGluc3RhbmNlIGZyb23nu5Hlrprkuovku7ZcclxuXHRpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdkcmFmdCdcclxuXHRcdEluc3RhbmNlRXZlbnQuaW5pdEV2ZW50cyhpbnN0YW5jZS5mbG93KTtcclxuXHJcblx0aWYgIUFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKVxyXG5cclxuXHRcdGN1cnJlbnRBcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKCk7XHJcblxyXG5cclxuXHRcdGluc3RhbmNlTnVtYmVyRmllbGRzID0gJChcIltkYXRhLWZvcm11bGFdXCIsICQoXCIjaW5zdGFuY2Vmb3JtXCIpKVxyXG5cclxuXHRcdGluc3RhbmNlTnVtYmVyRmllbGRzLmVhY2ggKCktPlxyXG5cdFx0XHRzY2hlbWFLZXkgPSB0aGlzLmRhdGFzZXQuc2NoZW1hS2V5XHJcblx0XHRcdGVsZW1lbnQgPSAkKHRoaXMpXHJcblx0XHRcdGlmICEkKHRoaXMpLnZhbCgpICYmIHNjaGVtYUtleSAmJiBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIilcclxuXHRcdFx0XHRNZXRlb3IuY2FsbCAnZ2V0SW5zdGFuY2VWYWx1ZXMnLCBTZXNzaW9uLmdldChcImluc3RhbmNlSWRcIiksIChlcnJvciwgcmVzdWx0KS0+XHJcblx0XHRcdFx0XHRpZiBlcnJvclxyXG5cdFx0XHRcdFx0XHR0b2FzdHIuZXJyb3IoZXJyb3IucmVhc29uKVxyXG5cclxuXHRcdFx0XHRcdGlmICFyZXN1bHRbc2NoZW1hS2V5XVxyXG5cdFx0XHRcdFx0XHRrZXkgPSBlbGVtZW50LmRhdGEoXCJmb3JtdWxhXCIpPy5yZXBsYWNlKFwiYXV0b19udW1iZXIoXCIsIFwiXCIpLnJlcGxhY2UoXCIpXCIsIFwiXCIpXHJcblxyXG5cdFx0XHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxcIi9nLCBcIlwiKS5yZXBsYWNlKC9cXCcvZywgXCJcIilcclxuXHJcblx0XHRcdFx0XHRcdGlmIGtleS5pbmRleE9mKFwie1wiKSA+IC0xXHJcblx0XHRcdFx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoXCJ7XCIsXCJcIikucmVwbGFjZShcIn1cIixcIlwiKVxyXG5cdFx0XHRcdFx0XHRcdGtleSA9IGtleS50cmltKClcclxuXHRcdFx0XHRcdFx0XHRrZXkgPSBBdXRvRm9ybS5nZXRGaWVsZFZhbHVlKGtleSwgJ2luc3RhbmNlZm9ybScpXHJcblx0XHRcdFx0XHRcdEluc3RhbmNlTnVtYmVyUnVsZXMuaW5zdGFuY2VOdW1iZXJCdWlsZGVyIGVsZW1lbnQsIGtleVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRlbGVtZW50Py52YWwocmVzdWx0W3NjaGVtYUtleV0pLnRyaWdnZXIoXCJjaGFuZ2VcIilcclxuXHJcblx0XHRqdWRnZSA9IGN1cnJlbnRBcHByb3ZlLmp1ZGdlXHJcblx0XHRjdXJyZW50U3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xyXG5cdFx0Zm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcclxuXHJcblx0XHRmb3JtdWxhX2ZpZWxkcyA9IEZvcm1fZm9ybXVsYS5nZXRGb3JtdWxhRmllbGRWYXJpYWJsZShcIkZvcm1fZm9ybXVsYS5maWVsZF92YWx1ZXNcIiwgZm9ybV92ZXJzaW9uLmZpZWxkcyk7XHJcblx0XHRGb3JtX2Zvcm11bGEucnVuKFwiXCIsIFwiXCIsIGZvcm11bGFfZmllbGRzLCBBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwiaW5zdGFuY2Vmb3JtXCIpLmluc2VydERvYywgZm9ybV92ZXJzaW9uLmZpZWxkcyk7XHJcblx0XHQj5Zyo5q2k5aSE5Yid5aeL5YyWc2Vzc2lvbiDkuK3nmoQgZm9ybV92YWx1ZXMg5Y+Y6YeP77yM55So5LqO6Kem5Y+R5LiL5LiA5q2l5q2l6aqk6K6h566XXHJcblx0XHRTZXNzaW9uLnNldChcImluc3RhbmNlX2Zvcm1fdmFsdWVzXCIsIHtpbnN0YW5jZUlkOiBpbnN0YW5jZS5faWQsIHZhbHVlczogQXV0b0Zvcm0uZ2V0Rm9ybVZhbHVlcyhcImluc3RhbmNlZm9ybVwiKS5pbnNlcnREb2N9KTtcclxuXHJcblxyXG5cclxuIiwiSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycyA9IHtcbiAgYXBwbGljYW50Q29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGEsIHN0ZWVkb3NfaW5zdGFuY2U7XG4gICAgc3RlZWRvc19pbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGRhdGEgPSB7XG4gICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICBhdHRzOiB7XG4gICAgICAgIG5hbWU6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgaWQ6ICdpbnNfYXBwbGljYW50JyxcbiAgICAgICAgXCJjbGFzc1wiOiAnc2VsZWN0VXNlciBmb3JtLWNvbnRyb2wgaW5zX2FwcGxpY2FudCdcbiAgICAgIH0sXG4gICAgICB2YWx1ZTogc3RlZWRvc19pbnN0YW5jZS5hcHBsaWNhbnRfbmFtZVxuICAgIH07XG4gICAgaWYgKCFzdGVlZG9zX2luc3RhbmNlIHx8IHN0ZWVkb3NfaW5zdGFuY2Uuc3RhdGUgIT09IFwiZHJhZnRcIikge1xuICAgICAgZGF0YS5hdHRzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0sXG4gIGluc3RhbmNlSWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnaW5zdGFuY2Vmb3JtJztcbiAgfSxcbiAgZm9ybV90eXBlczogZnVuY3Rpb24oKSB7XG4gICAgaWYgKEFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKSkge1xuICAgICAgcmV0dXJuICdkaXNhYmxlZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnbWV0aG9kJztcbiAgICB9XG4gIH0sXG4gIHN0ZWVkb3NfZm9ybTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuICAgIGlmIChmb3JtX3ZlcnNpb24pIHtcbiAgICAgIHJldHVybiBmb3JtX3ZlcnNpb247XG4gICAgfVxuICB9LFxuICBpbm5lcnN1YmZvcm1Db250ZXh0OiBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgZG9jX3ZhbHVlcztcbiAgICBkb2NfdmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xuICAgIG9ialtcInRhYmxlVmFsdWVzXCJdID0gZG9jX3ZhbHVlcyA/IGRvY192YWx1ZXNbb2JqLmNvZGVdIDogW107XG4gICAgb2JqW1wiZm9ybUlkXCJdID0gXCJpbnN0YW5jZWZvcm1cIjtcbiAgICByZXR1cm4gb2JqO1xuICB9LFxuICBpbnN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0ZWVkb3NfaW5zdGFuY2U7XG4gICAgU2Vzc2lvbi5nZXQoXCJjaGFuZ2VfZGF0ZVwiKTtcbiAgICBpZiAoU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpKSB7XG4gICAgICBzdGVlZG9zX2luc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICByZXR1cm4gc3RlZWRvc19pbnN0YW5jZTtcbiAgICB9XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgdW5lbXB0eTogZnVuY3Rpb24odmFsKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIGVxdWFsczogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9LFxuICB1bmVxdWFsczogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiAhKGEgPT09IGIpO1xuICB9LFxuICBpbmNsdWRlczogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLnNwbGl0KCcsJykuaW5jbHVkZXMoYSk7XG4gIH0sXG4gIGluY2x1ZGU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi5zcGxpdCgnLCcpLmluY2x1ZGVzKGEpO1xuICB9LFxuICBmaWVsZHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRm9ybVZlcnNpb24oKTtcbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYShXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hKGZvcm1fdmVyc2lvbikpO1xuICAgIH1cbiAgfSxcbiAgZm9ybWF0RGF0ZTogZnVuY3Rpb24oZGF0ZSwgb3B0aW9ucykge1xuICAgIGlmICghZGF0ZSkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0aW9ucyA9IEpTT04ucGFyc2Uob3B0aW9ucyk7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5mb3JtYXQpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGZvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCJcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBtb21lbnQoZGF0ZSkuZm9ybWF0KG9wdGlvbnMuZm9ybWF0KTtcbiAgfSxcbiAgdHJhY2VzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZmxvdywgaW5zdGFuY2UsIGxvY2FsZSwgcmVmLCByZWYxLCByZWYyLCByZWYzLCBzdGVlZG9zRGF0YSwgc3RlcHMsIHRyYWNlcztcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBzdGVlZG9zRGF0YSA9IChyZWYgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpKSAhPSBudWxsID8gKHJlZjEgPSByZWYudmlldykgIT0gbnVsbCA/IChyZWYyID0gcmVmMS50ZW1wbGF0ZSkgIT0gbnVsbCA/IHJlZjIuc3RlZWRvc0RhdGEgOiB2b2lkIDAgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICBpbnN0YW5jZSA9IHN0ZWVkb3NEYXRhICE9IG51bGwgPyBzdGVlZG9zRGF0YS5pbnN0YW5jZSA6IHZvaWQgMDtcbiAgICAgIGZsb3cgPSBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0Rmxvd1ZlcnNpb24oaW5zdGFuY2UpO1xuICAgICAgbG9jYWxlID0gc3RlZWRvc0RhdGEgIT0gbnVsbCA/IHN0ZWVkb3NEYXRhLmxvY2FsZSA6IHZvaWQgMDtcbiAgICAgIGlmIChsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gJ3poLWNuJykge1xuICAgICAgICBsb2NhbGUgPSBcInpoLUNOXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICBmbG93ID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlRmxvd1ZlcnNpb24oKTtcbiAgICAgIGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIik7XG4gICAgfVxuICAgIGlmICghaW5zdGFuY2UgfHwgIWZsb3cpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgc3RlcHMgPSBmbG93LnN0ZXBzO1xuICAgIHRyYWNlcyA9IHt9O1xuICAgIGlmICgocmVmMyA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCkge1xuICAgICAgcmVmMy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgIHZhciBhcHByb3ZlcywgcmVmNCwgc3RlcDtcbiAgICAgICAgc3RlcCA9IHN0ZXBzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJfaWRcIiwgdHJhY2Uuc3RlcCk7XG4gICAgICAgIGFwcHJvdmVzID0gW107XG4gICAgICAgIGlmICgocmVmNCA9IHRyYWNlLmFwcHJvdmVzKSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVmNC5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgICAgICAgIHZhciBqdWRnZV9uYW1lO1xuICAgICAgICAgICAgaWYgKHRyYWNlLmlzX2ZpbmlzaGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGlmIChhcHByb3ZlLmp1ZGdlID09PSAnYXBwcm92ZWQnKSB7XG4gICAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSBhcHByb3ZlZFwiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZlLmp1ZGdlID09PSAncmVqZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSByZWplY3RlZFwiLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHByb3ZlLmp1ZGdlID09PSAndGVybWluYXRlZCcpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gVEFQaTE4bi5fXyhcIkluc3RhbmNlIFN0YXRlIHRlcm1pbmF0ZWRcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBwcm92ZS5qdWRnZSA9PT0gJ3JlYXNzaWduZWQnKSB7XG4gICAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSByZWFzc2lnbmVkXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFwcHJvdmUuanVkZ2UgPT09ICdyZWxvY2F0ZWQnKSB7XG4gICAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSByZWxvY2F0ZWRcIiwge30sIGxvY2FsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBwcm92ZS5qdWRnZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBqdWRnZV9uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAganVkZ2VfbmFtZSA9IFRBUGkxOG4uX18oXCJJbnN0YW5jZSBTdGF0ZSBwZW5kaW5nXCIsIHt9LCBsb2NhbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFwcHJvdmVzLnB1c2goe1xuICAgICAgICAgICAgICBfaWQ6IGFwcHJvdmUuX2lkLFxuICAgICAgICAgICAgICBoYW5kbGVyOiBhcHByb3ZlLnVzZXIsXG4gICAgICAgICAgICAgIGhhbmRsZXJfbmFtZTogYXBwcm92ZS5oYW5kbGVyX25hbWUsXG4gICAgICAgICAgICAgIGhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWU6IGFwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSxcbiAgICAgICAgICAgICAgaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWU6IGFwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUsXG4gICAgICAgICAgICAgIGZpbmlzaF9kYXRlOiBhcHByb3ZlLmZpbmlzaF9kYXRlLFxuICAgICAgICAgICAgICBqdWRnZTogYXBwcm92ZS5qdWRnZSxcbiAgICAgICAgICAgICAganVkZ2VfbmFtZToganVkZ2VfbmFtZSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGFwcHJvdmUuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgIGlzX2ZpbmlzaGVkOiBhcHByb3ZlLmlzX2ZpbmlzaGVkLFxuICAgICAgICAgICAgICB0eXBlOiBhcHByb3ZlLnR5cGUsXG4gICAgICAgICAgICAgIG9waW5pb25fZmllbGRzX2NvZGU6IGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZSxcbiAgICAgICAgICAgICAgc2lnbl9maWVsZF9jb2RlOiBhcHByb3ZlLnNpZ25fZmllbGRfY29kZSxcbiAgICAgICAgICAgICAgaXNfcmVhZDogYXBwcm92ZS5pc19yZWFkLFxuICAgICAgICAgICAgICBzaWduX3Nob3c6IGFwcHJvdmUuc2lnbl9zaG93XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RlcCkge1xuICAgICAgICAgIGlmIChzdGVwLm5hbWUgaW4gdHJhY2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2VzW3N0ZXAubmFtZV0gPSB0cmFjZXNbc3RlcC5uYW1lXS5jb25jYXQoYXBwcm92ZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2VzW3N0ZXAubmFtZV0gPSBhcHByb3ZlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJhY2VzO1xuICB9LFxuICBkb2NfdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xuICB9LFxuICBpbnN0YW5jZV9ib3hfc3R5bGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib3gsIGlucywganVkZ2U7XG4gICAgYm94ID0gU2Vzc2lvbi5nZXQoXCJib3hcIik7XG4gICAgaWYgKGJveCA9PT0gXCJpbmJveFwiIHx8IGJveCA9PT0gXCJkcmFmdFwiKSB7XG4gICAgICBqdWRnZSA9IFNlc3Npb24uZ2V0KFwianVkZ2VcIik7XG4gICAgICBpZiAoanVkZ2UpIHtcbiAgICAgICAgaWYgKGp1ZGdlID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgICAgICByZXR1cm4gXCJib3gtc3VjY2Vzc1wiO1xuICAgICAgICB9IGVsc2UgaWYgKGp1ZGdlID09PSBcInJlamVjdGVkXCIpIHtcbiAgICAgICAgICByZXR1cm4gXCJib3gtZGFuZ2VyXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgaWYgKGlucyAmJiBpbnMuZmluYWxfZGVjaXNpb24pIHtcbiAgICAgIGlmIChpbnMuZmluYWxfZGVjaXNpb24gPT09IFwiYXBwcm92ZWRcIikge1xuICAgICAgICByZXR1cm4gXCJib3gtc3VjY2Vzc1wiO1xuICAgICAgfSBlbHNlIGlmIChpbnMuZmluYWxfZGVjaXNpb24gPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICByZXR1cm4gXCJib3gtZGFuZ2VyXCI7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB0YWJsZV9maWVsZHM6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgdmFyIGZpZWxkcywgZm9ybV92ZXJzaW9uO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1fdmVyc2lvbiA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtVmVyc2lvbihpbnN0YW5jZS5mb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pO1xuICAgIH1cbiAgICBpZiAoZm9ybV92ZXJzaW9uKSB7XG4gICAgICBmaWVsZHMgPSBfLmNsb25lKGZvcm1fdmVyc2lvbi5maWVsZHMpO1xuICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQsIGluZGV4KSB7XG4gICAgICAgIHZhciBhZnRlcl9maWVsZCwgYmVmb3JlX2ZpZWxkLCBwcmVfZmllbGRzLCBwcmVfd2lkZV9maWVsZHMsIHRkX2NvbHNwYW4sIHRyX2VuZCwgdHJfc3RhcnQ7XG4gICAgICAgIGZpZWxkLnRyX3N0YXJ0ID0gXCJcIjtcbiAgICAgICAgZmllbGQudHJfZW5kID0gXCJcIjtcbiAgICAgICAgdGRfY29sc3BhbiA9IDE7XG4gICAgICAgIGlmICgodHlwZW9mIENvcmVGb3JtICE9PSBcInVuZGVmaW5lZFwiICYmIENvcmVGb3JtICE9PSBudWxsID8gQ29yZUZvcm0ucGFnZVRpdGxlRmllbGROYW1lIDogdm9pZCAwKSA9PT0gZmllbGQuY29kZSkge1xuICAgICAgICAgIGZpZWxkLmlzX3dpZGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZC5mb3JtdWxhICYmIGZpZWxkLnR5cGUgIT09ICdvZGF0YScpIHtcbiAgICAgICAgICBmaWVsZC5wZXJtaXNzaW9uID0gXCJyZWFkb25seVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgICAgIGZpZWxkLnRkX2NvbHNwYW4gPSA0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWVsZC50ZF9jb2xzcGFuID0gMztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICBmaWVsZC50cl9zdGFydCA9IFwiPHRyPlwiO1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkLnRyX2VuZCA9IFwiPC90cj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJlX2ZpZWxkcyA9IGZpZWxkcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgcHJlX3dpZGVfZmllbGRzID0gcHJlX2ZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcImlzX3dpZGVcIiwgdHJ1ZSk7XG4gICAgICAgICAgdHJfc3RhcnQgPSBcIlwiO1xuICAgICAgICAgIHRyX2VuZCA9IFwiXCI7XG4gICAgICAgICAgYmVmb3JlX2ZpZWxkID0gbnVsbDtcbiAgICAgICAgICBhZnRlcl9maWVsZCA9IG51bGw7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgYmVmb3JlX2ZpZWxkID0gZmllbGRzW2luZGV4IC0gMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbmRleCA8IGZpZWxkcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBhZnRlcl9maWVsZCA9IGZpZWxkc1tpbmRleCArIDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgICAgIHRkX2NvbHNwYW4gPSA0O1xuICAgICAgICAgIH0gZWxzZSBpZiAoZmllbGQuaXNfd2lkZSkge1xuICAgICAgICAgICAgdGRfY29sc3BhbiA9IDM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChiZWZvcmVfZmllbGQgJiYgYWZ0ZXJfZmllbGQgJiYgYmVmb3JlX2ZpZWxkLmlzX3dpZGUgJiYgYWZ0ZXJfZmllbGQuaXNfd2lkZSkge1xuICAgICAgICAgICAgICBmaWVsZC5pc193aWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGRfY29sc3BhbiA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyID09PSAwICYmIGFmdGVyX2ZpZWxkICYmIGFmdGVyX2ZpZWxkLmlzX3dpZGUpIHtcbiAgICAgICAgICAgICAgZmllbGQuaXNfd2lkZSA9IHRydWU7XG4gICAgICAgICAgICAgIHRkX2NvbHNwYW4gPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiA9PT0gMCAmJiBhZnRlcl9maWVsZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBmaWVsZC5pc193aWRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGRfY29sc3BhbiA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpZWxkLnRkX2NvbHNwYW4gPSB0ZF9jb2xzcGFuO1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgdHJfc3RhcnQgPSBcIjx0cj5cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKChwcmVfZmllbGRzLmxlbmd0aCArIHByZV93aWRlX2ZpZWxkcy5sZW5ndGgpICUgMiA9PT0gMCB8fCBmaWVsZC5pc193aWRlKSB7XG4gICAgICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgICAgICAgICAgdHJfc3RhcnQgPSBcIjx0ciBjbGFzcyA9IFxcXCJ0ci1jaGlsZC10YWJsZVxcXCI+XCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJfc3RhcnQgPSBcIjx0cj5cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmaWVsZC50cl9zdGFydCA9IHRyX3N0YXJ0O1xuICAgICAgICAgIGlmIChpbmRleCArIDEgPT09IGZpZWxkcy5sZW5ndGggfHwgZmllbGQudHlwZSA9PT0gJ3NlY3Rpb24nIHx8IGZpZWxkLnR5cGUgPT09ICd0YWJsZScgfHwgZmllbGQuaXNfd2lkZSkge1xuICAgICAgICAgICAgdHJfZW5kID0gXCI8L3RyPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKHByZV9maWVsZHMubGVuZ3RoICsgcHJlX3dpZGVfZmllbGRzLmxlbmd0aCkgJSAyICE9PSAwKSB7XG4gICAgICAgICAgICB0cl9lbmQgPSBcIjwvdHI+XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmaWVsZC50cl9lbmQgPSB0cl9lbmQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICB9XG4gIH0sXG4gIHNvcnRfYXBwcm92ZTogZnVuY3Rpb24oYXBwcm92ZXMsIG9yZGVyKSB7XG4gICAgaWYgKCFhcHByb3Zlcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoIWFwcHJvdmVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG9yZGVyID09PSAnZGVzYycpIHtcbiAgICAgICAgYXBwcm92ZXMuc29ydChmdW5jdGlvbihwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgX3AxLCBfcDI7XG4gICAgICAgICAgX3AxID0gMDtcbiAgICAgICAgICBfcDIgPSAwO1xuICAgICAgICAgIGlmIChwMS5maW5pc2hfZGF0ZSkge1xuICAgICAgICAgICAgX3AxID0gcDEuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocDIuZmluaXNoX2RhdGUpIHtcbiAgICAgICAgICAgIF9wMiA9IHAyLmZpbmlzaF9kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9wMiAtIF9wMTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHByb3Zlcy5zb3J0KGZ1bmN0aW9uKHAxLCBwMikge1xuICAgICAgICAgIHZhciBfcDEsIF9wMjtcbiAgICAgICAgICBfcDEgPSAwO1xuICAgICAgICAgIF9wMiA9IDA7XG4gICAgICAgICAgaWYgKHAxLmZpbmlzaF9kYXRlKSB7XG4gICAgICAgICAgICBfcDEgPSBwMS5maW5pc2hfZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwMi5maW5pc2hfZGF0ZSkge1xuICAgICAgICAgICAgX3AyID0gcDIuZmluaXNoX2RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3AxIC0gX3AyO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFwcHJvdmVzO1xuICB9LFxuICBfdDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5KTtcbiAgfSxcbiAgZ2V0RmllbGQ6IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb247XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIGZvcm1fdmVyc2lvbi5maWVsZHMuZmluZFByb3BlcnR5QnlQSyhcImNvZGVcIiwgY29kZSk7XG4gICAgfVxuICB9LFxuICBnZXRWYWx1ZTogZnVuY3Rpb24oY29kZSkge1xuICAgIHZhciBmb3JtX3ZlcnNpb24sIGluc3RhbmNlLCBsb2NhbGUsIHV0Y09mZnNldCwgdmFsdWVzO1xuICAgIGluc3RhbmNlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmluc3RhbmNlO1xuICAgIGZvcm1fdmVyc2lvbiA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5mb3JtX3ZlcnNpb247XG4gICAgbG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcbiAgICB1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0O1xuICAgIHZhbHVlcyA9IGluc3RhbmNlLnZhbHVlcyB8fCB7fTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICB2YWx1ZXMgPSBXb3JrZmxvd01hbmFnZXJfZm9ybWF0LmdldEF1dG9mb3JtU2NoZW1hVmFsdWVzKCk7XG4gICAgfVxuICAgIHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0VmFsdWUodmFsdWVzW2NvZGVdLCBmb3JtX3ZlcnNpb24uZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpLCBsb2NhbGUsIHV0Y09mZnNldCk7XG4gIH0sXG4gIGdldExhYmVsOiBmdW5jdGlvbihjb2RlKSB7XG4gICAgdmFyIGZvcm1fdmVyc2lvbjtcbiAgICBmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uO1xuICAgIHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwoZm9ybV92ZXJzaW9uLmZpZWxkcywgY29kZSk7XG4gIH0sXG4gIGdldENmQ2xhc3M6IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgaWYgKChmaWVsZCAhPSBudWxsID8gZmllbGQudHlwZSA6IHZvaWQgMCkgPT09IFwiaW5wdXRcIiAmJiAoZmllbGQgIT0gbnVsbCA/IGZpZWxkLmlzX3RleHRhcmVhIDogdm9pZCAwKSkge1xuICAgICAgcmV0dXJuIFwiY2ZUZXh0YXJlYVwiO1xuICAgIH1cbiAgfSxcbiAgZ2V0VGFibGVUaGVhZDogZnVuY3Rpb24oZmllbGQpIHtcbiAgICByZXR1cm4gU3RlZWRvc1RhYmxlLmdldFRoZWFkKGZpZWxkLCBmYWxzZSk7XG4gIH0sXG4gIGdldFRhYmxlQm9keTogZnVuY3Rpb24oZmllbGQpIHtcbiAgICB2YXIgaW5zdGFuY2UsIHRhYmxlVmFsdWUsIHZhbHVlcztcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZTtcbiAgICAgIHZhbHVlcyA9IGluc3RhbmNlLnZhbHVlcyB8fCB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWVzID0gV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYVZhbHVlcygpO1xuICAgIH1cbiAgICB0YWJsZVZhbHVlID0gdmFsdWVzW2ZpZWxkLmNvZGVdO1xuICAgIHJldHVybiBTdGVlZG9zVGFibGUuZ2V0VGJvZHkoZmllbGQuc2ZpZWxkcy5nZXRQcm9wZXJ0eShcImNvZGVcIiksIGZpZWxkLCB0YWJsZVZhbHVlLCBmYWxzZSk7XG4gIH0sXG4gIHNob3dMYWJlbDogZnVuY3Rpb24oZmllbGQpIHtcbiAgICB2YXIgdGVtcGxhdGVEYXRhO1xuICAgIHRlbXBsYXRlRGF0YSA9IFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YTtcbiAgICBpZiAodGVtcGxhdGVEYXRhLmxhYmVsID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgaXNPcGluaW9uRmllbGQ6IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGQuZm9ybXVsYSk7XG4gIH0sXG4gIGlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nOiBmdW5jdGlvbihmaWVsZF9mb3JtdWxhKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlU2lnblRleHQuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSk7XG4gIH0sXG4gIGluY2x1ZGVzT3BpbmlvbkZpZWxkOiBmdW5jdGlvbihmb3JtLCBmb3JtX3ZlcnNpb24pIHtcbiAgICB2YXIgZmllbGRfZm9ybXVsYXMsIGZpZWxkcywgcmVmO1xuICAgIGZpZWxkX2Zvcm11bGFzID0gbmV3IEFycmF5KCk7XG4gICAgZmllbGRzID0gKChyZWYgPSBkYi5mb3JtX3ZlcnNpb25zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmb3JtX3ZlcnNpb24sXG4gICAgICBmb3JtOiBmb3JtXG4gICAgfSkpICE9IG51bGwgPyByZWYuZmllbGRzIDogdm9pZCAwKSB8fCBbXTtcbiAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgICB2YXIgcmVmMTtcbiAgICAgIGlmIChmLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZScpO1xuICAgICAgfSBlbHNlIGlmIChmLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgICByZXR1cm4gZiAhPSBudWxsID8gKHJlZjEgPSBmLmZpZWxkcykgIT0gbnVsbCA/IHJlZjEuZm9yRWFjaChmdW5jdGlvbihmMSkge1xuICAgICAgICAgIHJldHVybiBmaWVsZF9mb3JtdWxhcy5wdXNoKGYxLmZvcm11bGEpO1xuICAgICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9mb3JtdWxhcy5wdXNoKGYuZm9ybXVsYSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF8uc29tZShmaWVsZF9mb3JtdWxhcywgZnVuY3Rpb24oZmllbGRfZm9ybXVsYSkge1xuICAgICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaXNPcGluaW9uRmllbGRfZnJvbV9zdHJpbmcoZmllbGRfZm9ybXVsYSk7XG4gICAgfSk7XG4gIH0sXG4gIGdldE9waW5pb25GaWVsZFN0ZXBzTmFtZTogZnVuY3Rpb24oZmllbGRfZm9ybXVsYSwgdG9wX2tleXdvcmRzKSB7XG4gICAgdmFyIGZvbzEsIG9waW5pb25GaWVsZHM7XG4gICAgb3BpbmlvbkZpZWxkcyA9IG5ldyBBcnJheSgpO1xuICAgIGlmIChJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzT3BpbmlvbkZpZWxkX2Zyb21fc3RyaW5nKGZpZWxkX2Zvcm11bGEpKSB7XG4gICAgICBpZiAoZmllbGRfZm9ybXVsYSkge1xuICAgICAgICBmb28xID0gZmllbGRfZm9ybXVsYS5zcGxpdChcIjtcIik7XG4gICAgICAgIGZvbzEuZm9yRWFjaChmdW5jdGlvbihmb28pIHtcbiAgICAgICAgICB2YXIganNvbl9mb3JtdWxhLCByZWYsIHJlZjEsIHMxLCBzZjtcbiAgICAgICAgICBqc29uX2Zvcm11bGEgPSB7fTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAganNvbl9mb3JtdWxhID0gZXZhbChcIihcIiArIGZvbyArIFwiKVwiKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgICAgIGpzb25fZm9ybXVsYSA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoanNvbl9mb3JtdWxhICE9IG51bGwgPyBqc29uX2Zvcm11bGEueWlqaWFubGFuIDogdm9pZCAwKSB7XG4gICAgICAgICAgICBzZiA9IHt9O1xuICAgICAgICAgICAgc2Yuc3RlcE5hbWUgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLnN0ZXA7XG4gICAgICAgICAgICBzZi5pbWFnZV9zaWduID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5pbWFnZV9zaWduIHx8IGZhbHNlO1xuICAgICAgICAgICAgc2Yub25seV9jY19vcGluaW9uID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5vbmx5X2NjIHx8IGZhbHNlO1xuICAgICAgICAgICAgc2YuZGVmYXVsdF9kZXNjcmlwdGlvbiA9IGpzb25fZm9ybXVsYS55aWppYW5sYW5bXCJkZWZhdWx0XCJdO1xuICAgICAgICAgICAgc2Yub25seV9oYW5kbGVyID0ganNvbl9mb3JtdWxhLnlpamlhbmxhbi5vbmx5X2hhbmRsZXI7XG4gICAgICAgICAgICBzZi50b3Bfa2V5d29yZHMgPSBqc29uX2Zvcm11bGEueWlqaWFubGFuLnRvcF9rZXl3b3JkcyB8fCB0b3Bfa2V5d29yZHM7XG4gICAgICAgICAgICByZXR1cm4gb3BpbmlvbkZpZWxkcy5wdXNoKHNmKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKChmaWVsZF9mb3JtdWxhICE9IG51bGwgPyBmaWVsZF9mb3JtdWxhLmluZGV4T2YoXCJ7dHJhY2VzLlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoZmllbGRfZm9ybXVsYSAhPSBudWxsID8gZmllbGRfZm9ybXVsYS5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xKSB7XG4gICAgICAgICAgICBzZiA9IHtcbiAgICAgICAgICAgICAgb25seV9jY19vcGluaW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgaW1hZ2Vfc2lnbjogZmFsc2UsXG4gICAgICAgICAgICAgIHRvcF9rZXl3b3JkczogdG9wX2tleXdvcmRzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGZvby5pbmRleE9mKFwie3NpZ25hdHVyZS5cIikgPiAtMSkge1xuICAgICAgICAgICAgICBzZi5pbWFnZV9zaWduID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZm9vID0gZm9vLnJlcGxhY2UoXCJ7c2lnbmF0dXJlLlwiLCBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMxID0gZm9vLnJlcGxhY2UoXCJ7XCIsIFwiXCIpLnJlcGxhY2UoXCJ9XCIsIFwiXCIpO1xuICAgICAgICAgICAgaWYgKHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIHNmLnN0ZXBOYW1lID0gczEuc3BsaXQoXCIuXCIpWzFdO1xuICAgICAgICAgICAgICBpZiAob3BpbmlvbkZpZWxkcy5maWx0ZXJQcm9wZXJ0eShcInN0ZXBOYW1lXCIsIHNmLnN0ZXBOYW1lKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKChyZWYgPSBvcGluaW9uRmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJzdGVwTmFtZVwiLCBzZi5zdGVwTmFtZSkpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHJlZi5vbmx5X2NjX29waW5pb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoczEuc3BsaXQoXCIuXCIpLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgoKHJlZjEgPSBzMS5zcGxpdChcIi5cIilbMl0pICE9IG51bGwgPyByZWYxLnRvTG9jYWxlTG93ZXJDYXNlKCkgOiB2b2lkIDApID09PSAnY2MnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNmLm9ubHlfY2Nfb3BpbmlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3BpbmlvbkZpZWxkcy5wdXNoKHNmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3BpbmlvbkZpZWxkcztcbiAgfSxcbiAgc2hvd0NDT3BpbmlvbjogZnVuY3Rpb24oZmllbGQpIHtcbiAgICB2YXIgcmVmLCByZWYxLCByZWYyLCBzMTtcbiAgICBpZiAoKChyZWYgPSBmaWVsZC5mb3JtdWxhKSAhPSBudWxsID8gcmVmLmluZGV4T2YoXCJ7dHJhY2VzLlwiKSA6IHZvaWQgMCkgPiAtMSB8fCAoKHJlZjEgPSBmaWVsZC5mb3JtdWxhKSAhPSBudWxsID8gcmVmMS5pbmRleE9mKFwie3NpZ25hdHVyZS50cmFjZXMuXCIpIDogdm9pZCAwKSA+IC0xKSB7XG4gICAgICBzMSA9IGZpZWxkLmZvcm11bGEucmVwbGFjZShcIntzaWduYXR1cmUuXCIsIFwiXCIpLnJlcGxhY2UoXCJ7XCIsIFwiXCIpLnJlcGxhY2UoXCJ9XCIsIFwiXCIpO1xuICAgICAgaWYgKHMxLnNwbGl0KFwiLlwiKS5sZW5ndGggPiAyKSB7XG4gICAgICAgIGlmICgoKHJlZjIgPSBzMS5zcGxpdChcIi5cIilbMl0pICE9IG51bGwgPyByZWYyLnRvTG9jYWxlTG93ZXJDYXNlKCkgOiB2b2lkIDApID09PSAnY2MnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBtYXJrRG93blRvSHRtbDogZnVuY3Rpb24obWFya0Rvd25TdHJpbmcpIHtcbiAgICB2YXIgcmVuZGVyZXI7XG4gICAgaWYgKG1hcmtEb3duU3RyaW5nKSB7XG4gICAgICByZW5kZXJlciA9IG5ldyBNYXJrZG93bi5SZW5kZXJlcigpO1xuICAgICAgcmVuZGVyZXIubGluayA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdcIiArIGhyZWYgKyBcIicgdGl0bGU9J1wiICsgdGl0bGUgKyBcIic+XCIgKyB0ZXh0ICsgXCI8L2E+XCI7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFNwYWNlYmFycy5TYWZlU3RyaW5nKE1hcmtkb3duKG1hcmtEb3duU3RyaW5nLCB7XG4gICAgICAgIHJlbmRlcmVyOiByZW5kZXJlclxuICAgICAgfSkpO1xuICAgIH1cbiAgfSxcbiAgZl9sYWJlbDogZnVuY3Rpb24odGhhdCkge1xuICAgIHJldHVybiB0aGF0Lm5hbWUgfHwgdGhhdC5jb2RlO1xuICB9XG59O1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuc3RlZWRvc19mb3JtID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybV92ZXJzaW9uO1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmlzU2VjdGlvbiA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgICB2YXIgZm9ybV92ZXJzaW9uO1xuICAgIGZvcm1fdmVyc2lvbiA9IHRoaXMuZm9ybV92ZXJzaW9uO1xuICAgIHJldHVybiBmb3JtX3ZlcnNpb24uZmllbGRzLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIGNvZGUpLnR5cGUgPT09ICdzZWN0aW9uJztcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5kb2NfdmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluc3RhbmNlO1xuICAgIGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZTtcbiAgICByZXR1cm4gaW5zdGFuY2UudmFsdWVzO1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmFwcGxpY2FudENvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0YSwgaW5zdGFuY2U7XG4gICAgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuICAgIHJldHVybiBkYXRhID0ge1xuICAgICAgbmFtZTogJ2luc19hcHBsaWNhbnQnLFxuICAgICAgYXR0czoge1xuICAgICAgICBuYW1lOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIGlkOiAnaW5zX2FwcGxpY2FudCcsXG4gICAgICAgIFwiY2xhc3NcIjogJ3NlbGVjdFVzZXIgZm9ybS1jb250cm9sIGluc19hcHBsaWNhbnQnXG4gICAgICB9LFxuICAgICAgdmFsdWU6IGluc3RhbmNlLmFwcGxpY2FudF9uYW1lXG4gICAgfTtcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9O1xuICBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLmZpZWxkcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JtX3ZlcnNpb247XG4gICAgZm9ybV92ZXJzaW9uID0gdGhpcy5mb3JtX3ZlcnNpb247XG4gICAgaWYgKGZvcm1fdmVyc2lvbikge1xuICAgICAgcmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoV29ya2Zsb3dNYW5hZ2VyX2Zvcm1hdC5nZXRBdXRvZm9ybVNjaGVtYShmb3JtX3ZlcnNpb24pKTtcbiAgICB9XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZm9ybV90eXBlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcImRpc2FibGVkXCI7XG4gIH07XG4gIFRlbXBsYXRlLnJlZ2lzdGVySGVscGVyKFwiYWZGaWVsZExhYmVsVGV4dFwiLCBmdW5jdGlvbihvcCkge1xuICAgIHZhciBmb3JtX3ZlcnNpb24sIHJlZjtcbiAgICBmb3JtX3ZlcnNpb24gPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuZm9ybV92ZXJzaW9uO1xuICAgIHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZ2V0TGFiZWwoZm9ybV92ZXJzaW9uLmZpZWxkcywgb3AgIT0gbnVsbCA/IChyZWYgPSBvcC5oYXNoKSAhPSBudWxsID8gcmVmLm5hbWUgOiB2b2lkIDAgOiB2b2lkIDApO1xuICB9KTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5fdCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBsb2NhbGU7XG4gICAgbG9jYWxlID0gdGhpcy5sb2NhbGU7XG4gICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKTtcbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnNfYXR0YWNoX2Rvd25sb2FkX3VybCA9IGZ1bmN0aW9uKF9pZCwgYWJzb2x1dGUpIHtcbiAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgIHJldHVybiBNZXRlb3IuYWJzb2x1dGVVcmwoXCIvYXBpL2ZpbGVzL2luc3RhbmNlcy9cIiArIF9pZCArIFwiP2Rvd25sb2FkPXRydWVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIi9hcGkvZmlsZXMvaW5zdGFuY2VzL1wiICsgX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiO1xuICAgIH1cbiAgfTtcbiAgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5vcHRpb25zID0gZnVuY3Rpb24oZmllbGQpIHtcbiAgICB2YXIgb3B0aW9ucywgcmVmLCByZXY7XG4gICAgb3B0aW9ucyA9IGZpZWxkICE9IG51bGwgPyAocmVmID0gZmllbGQub3B0aW9ucykgIT0gbnVsbCA/IHJlZi5zcGxpdChcIlxcblwiKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICByZXYgPSBbXTtcbiAgICBpZiAob3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICBvcHRpb25zLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gcmV2LnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBpdGVtLFxuICAgICAgICAgIHZhbHVlOiBpdGVtXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXY7XG4gIH07XG4gIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZ2V0UGVybWlzc2lvbnMgPSBmdW5jdGlvbihjb2RlKSB7XG4gICAgdmFyIHJlZjtcbiAgICBpZiAoISgocmVmID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLnN0YXJ0U3RlcEVkaXRhYmxlRmllbGRzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKGNvZGUpIDogdm9pZCAwKSkge1xuICAgICAgcmV0dXJuIFwicmVhZG9ubHkgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH07XG59XG5cbkluc3RhbmNlZm9ybVRlbXBsYXRlLmV2ZW50cyA9IHtcbiAgJ2NoYW5nZSAuZm9ybS1jb250cm9sLC5jaGVja2JveCBpbnB1dCwuYWYtcmFkaW8tZ3JvdXAgaW5wdXQsLmFmLWNoZWNrYm94LWdyb3VwIGlucHV0JzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gSW5zdGFuY2VNYW5hZ2VyLmluc3RhbmNlZm9ybUNoYW5nZUV2ZW50KGV2ZW50KTtcbiAgfSxcbiAgJ3R5cGVhaGVhZDpjaGFuZ2UgLmZvcm0tY29udHJvbCc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIEluc3RhbmNlTWFuYWdlci5pbnN0YW5jZWZvcm1DaGFuZ2VFdmVudChldmVudCk7XG4gIH0sXG4gICdjbGljayAuY2ZUZXh0YXJlYSBhJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiBTdGVlZG9zLm9wZW5XaW5kb3coZXZlbnQudGFyZ2V0LmhyZWYpO1xuICB9XG59O1xuXG5JbnN0YW5jZWZvcm1UZW1wbGF0ZS5vbkNyZWF0ZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvbXBpbGVkLCBlLCBpbnN0YW5jZSwgaW5zdGFuY2VDdXN0b21UZW1wbGF0ZSwgaW5zdGFuY2VWaWV3LCByZW5kZXJGdW5jdGlvbiwgdGVtcGxhdGU7XG4gIGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gIGlmICghaW5zdGFuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGVtcGxhdGUgPSBUZW1wbGF0ZU1hbmFnZXIuZ2V0VGVtcGxhdGUoaW5zdGFuY2UpO1xuICB0cnkge1xuICAgIGNvbXBpbGVkID0gU3BhY2ViYXJzQ29tcGlsZXIuY29tcGlsZSh0ZW1wbGF0ZSwge1xuICAgICAgaXNCb2R5OiB0cnVlXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIGUgPSBlcnJvcjE7XG4gICAgY29uc29sZS5sb2coXCJJbnN0YW5jZSBUZW1wbGF0ZSBFcnJvclwiLCBlKTtcbiAgICBjb21waWxlZCA9IFNwYWNlYmFyc0NvbXBpbGVyLmNvbXBpbGUoXCJcIiwge1xuICAgICAgaXNCb2R5OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyRnVuY3Rpb24gPSBldmFsKGNvbXBpbGVkKTtcbiAgaW5zdGFuY2VWaWV3ID0gbmV3IEJsYXplLlZpZXcoXCJjdXN0b21faW5zdGFuY2VfdGVtcGxhdGVcIiwgcmVuZGVyRnVuY3Rpb24pO1xuICBpbnN0YW5jZUN1c3RvbVRlbXBsYXRlID0gbmV3IEJsYXplLlRlbXBsYXRlKGluc3RhbmNlVmlldy5uYW1lLCByZW5kZXJGdW5jdGlvbik7XG4gIFRlbXBsYXRlLmluc3RhbmNlX2N1c3RvbV90ZW1wbGF0ZSA9IGluc3RhbmNlQ3VzdG9tVGVtcGxhdGU7XG4gIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZV9jdXN0b21fdGVtcGxhdGUuaGVscGVycyhJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzKTtcbn07XG5cbkluc3RhbmNlZm9ybVRlbXBsYXRlLm9uUmVuZGVyZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnJlbnRBcHByb3ZlLCBjdXJyZW50U3RlcCwgZm9ybV92ZXJzaW9uLCBmb3JtdWxhX2ZpZWxkcywgaW5zdGFuY2UsIGluc3RhbmNlTnVtYmVyRmllbGRzLCBqdWRnZSwgcmVmO1xuICBpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICBpZiAoIWluc3RhbmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICgocmVmID0gJChcImlucHV0W25hbWU9J2luc19hcHBsaWNhbnQnXVwiKVswXSkgIT0gbnVsbCkge1xuICAgIHJlZi5kYXRhc2V0LnZhbHVlcyA9IGluc3RhbmNlLmFwcGxpY2FudDtcbiAgfVxuICAkKFwiaW5wdXRbbmFtZT0naW5zX2FwcGxpY2FudCddXCIpLnZhbChpbnN0YW5jZS5hcHBsaWNhbnRfbmFtZSk7XG4gIEFwcHJvdmVNYW5hZ2VyLmVycm9yID0ge1xuICAgIG5leHRTdGVwczogJycsXG4gICAgbmV4dFN0ZXBVc2VyczogJydcbiAgfTtcbiAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnZHJhZnQnKSB7XG4gICAgSW5zdGFuY2VFdmVudC5pbml0RXZlbnRzKGluc3RhbmNlLmZsb3cpO1xuICB9XG4gIGlmICghQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpKSB7XG4gICAgY3VycmVudEFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKTtcbiAgICBpbnN0YW5jZU51bWJlckZpZWxkcyA9ICQoXCJbZGF0YS1mb3JtdWxhXVwiLCAkKFwiI2luc3RhbmNlZm9ybVwiKSk7XG4gICAgaW5zdGFuY2VOdW1iZXJGaWVsZHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtZW50LCBzY2hlbWFLZXk7XG4gICAgICBzY2hlbWFLZXkgPSB0aGlzLmRhdGFzZXQuc2NoZW1hS2V5O1xuICAgICAgZWxlbWVudCA9ICQodGhpcyk7XG4gICAgICBpZiAoISQodGhpcykudmFsKCkgJiYgc2NoZW1hS2V5ICYmIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VJZFwiKSkge1xuICAgICAgICByZXR1cm4gTWV0ZW9yLmNhbGwoJ2dldEluc3RhbmNlVmFsdWVzJywgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZUlkXCIpLCBmdW5jdGlvbihlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgdmFyIGtleSwgcmVmMTtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRvYXN0ci5lcnJvcihlcnJvci5yZWFzb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXJlc3VsdFtzY2hlbWFLZXldKSB7XG4gICAgICAgICAgICBrZXkgPSAocmVmMSA9IGVsZW1lbnQuZGF0YShcImZvcm11bGFcIikpICE9IG51bGwgPyByZWYxLnJlcGxhY2UoXCJhdXRvX251bWJlcihcIiwgXCJcIikucmVwbGFjZShcIilcIiwgXCJcIikgOiB2b2lkIDA7XG4gICAgICAgICAgICBrZXkgPSBrZXkucmVwbGFjZSgvXFxcIi9nLCBcIlwiKS5yZXBsYWNlKC9cXCcvZywgXCJcIik7XG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoXCJ7XCIpID4gLTEpIHtcbiAgICAgICAgICAgICAga2V5ID0ga2V5LnJlcGxhY2UoXCJ7XCIsIFwiXCIpLnJlcGxhY2UoXCJ9XCIsIFwiXCIpO1xuICAgICAgICAgICAgICBrZXkgPSBrZXkudHJpbSgpO1xuICAgICAgICAgICAgICBrZXkgPSBBdXRvRm9ybS5nZXRGaWVsZFZhbHVlKGtleSwgJ2luc3RhbmNlZm9ybScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEluc3RhbmNlTnVtYmVyUnVsZXMuaW5zdGFuY2VOdW1iZXJCdWlsZGVyKGVsZW1lbnQsIGtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICE9IG51bGwgPyBlbGVtZW50LnZhbChyZXN1bHRbc2NoZW1hS2V5XSkudHJpZ2dlcihcImNoYW5nZVwiKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGp1ZGdlID0gY3VycmVudEFwcHJvdmUuanVkZ2U7XG4gICAgY3VycmVudFN0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcbiAgICBmb3JtX3ZlcnNpb24gPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpO1xuICAgIGZvcm11bGFfZmllbGRzID0gRm9ybV9mb3JtdWxhLmdldEZvcm11bGFGaWVsZFZhcmlhYmxlKFwiRm9ybV9mb3JtdWxhLmZpZWxkX3ZhbHVlc1wiLCBmb3JtX3ZlcnNpb24uZmllbGRzKTtcbiAgICBGb3JtX2Zvcm11bGEucnVuKFwiXCIsIFwiXCIsIGZvcm11bGFfZmllbGRzLCBBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwiaW5zdGFuY2Vmb3JtXCIpLmluc2VydERvYywgZm9ybV92ZXJzaW9uLmZpZWxkcyk7XG4gICAgcmV0dXJuIFNlc3Npb24uc2V0KFwiaW5zdGFuY2VfZm9ybV92YWx1ZXNcIiwge1xuICAgICAgaW5zdGFuY2VJZDogaW5zdGFuY2UuX2lkLFxuICAgICAgdmFsdWVzOiBBdXRvRm9ybS5nZXRGb3JtVmFsdWVzKFwiaW5zdGFuY2Vmb3JtXCIpLmluc2VydERvY1xuICAgIH0pO1xuICB9XG59O1xuIiwiSW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycyA9IHtcclxuXHJcblx0c2hvd01haW5UaXRsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2UoKS53b3JrZmxvd01haW5BdHRhY2hUaXRsZS5nZXQoKTtcclxuXHR9LFxyXG5cdGVuYWJsZWRfYWRkX21haW5fYXR0YWNobWVudDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRpZiAoIWlucylcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0aWYgKFNlc3Npb24gJiYgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHRpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgIT0gXCJkcmFmdFwiICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9IFwiaW5ib3hcIikge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH1cclxuXHJcblx0XHQvLyDlt7Lnu4/nu5PmnZ/nmoTljZXlrZDkuI3og73mlLnpmYTku7ZcclxuXHRcdGlmIChpbnMuc3RhdGUgPT0gXCJjb21wbGV0ZWRcIikge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgY3VycmVudF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XHJcblxyXG5cdFx0aWYgKCFjdXJyZW50X3N0ZXApXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0XHQvLyDliIblj5HnmoTmraPmlofmiJbogIXpmYTku7bkuI3mmL7npLrovazkuLpwZGbmjInpkq5cclxuXHRcdC8vIOWmguaenOacieato+aWh+adg+mZkOWImeS4uuato+aWh++8jOWQpuWImeWIhuWPkeS4uumZhOS7tlxyXG5cdFx0Ly8g5YiG5Y+R55qE6ZmE5Lu25LiN5YWB6K645L+u5pS5IOWIoOmZpCDmlrDlop7niYjmnKxcclxuXHRcdHZhciBtYWluX2F0dGFjaF9jb3VudCA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XHJcblx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGlucy5faWQsXHJcblx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlXHJcblx0XHR9KS5jb3VudCgpO1xyXG5cclxuXHRcdHZhciBkaXN0cmlidXRlX21haW5fYXR0YWNoX2NvdW50ID0gMDtcclxuXHJcblx0XHRpZiAoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSkge1xyXG5cdFx0XHR2YXIgc3RhcnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRTdGFydFN0ZXAoKTtcclxuXHRcdFx0aWYgKHN0YXJ0X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2gpIHtcclxuXHRcdFx0XHR2YXIgZGlzdHJpYnV0ZV9tYWluX2F0dGFjaF9jb3VudCA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XHJcblx0XHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlLFxyXG5cdFx0XHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlXHJcblx0XHRcdFx0fSkuY291bnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggPT0gdHJ1ZSAmJiBtYWluX2F0dGFjaF9jb3VudCA8IDEgJiYgZGlzdHJpYnV0ZV9tYWluX2F0dGFjaF9jb3VudCA8IDEpIHtcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH1cclxuXHJcblx0XHQvLyDmraPmlofmnIDlpJrlj6rog73mnInkuIDkuKpcclxuXHRcdGlmIChtYWluX2F0dGFjaF9jb3VudCA+PSAxIHx8IGRpc3RyaWJ1dGVfbWFpbl9hdHRhY2hfY291bnQgPj0gMSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g5byA5aeL6IqC54K55bm25LiU6K6+572u5LqG5Y+v5Lul5LiK5Lyg5q2j5paH5omN5pi+56S65LiK5Lyg5q2j5paH55qE5oyJ6ZKuXHJcblx0XHR2YXIgY3VycmVudF9zdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XHJcblx0XHRpZiAoY3VycmVudF9zdGVwICYmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgPT0gXCJzdGFydFwiICYmIGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9tYWluX2F0dGFjaCA9PSB0cnVlKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cclxuXHRcdHJldHVybiBmYWxzZVxyXG5cdH0sXHJcblxyXG5cdGVuYWJsZWRfZWRpdF9ub3JtYWxfYXR0YWNobWVudDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRpZiAoIWlucylcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0aWYgKFNlc3Npb24gJiYgU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHR2YXIgZmxvdyA9IFdvcmtmbG93TWFuYWdlci5nZXRGbG93KGlucy5mbG93KTtcclxuXHRcdGlmICghZmxvdylcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cclxuXHRcdC8vIOWIhuWPkeWQjueahCDpmYTku7bvvIzkuI3lj6/ku6XnvJbovpEv5Yig6Zmk77yM5Lmf5LiN6K6p5LiK5Lyg5paw55qE6ZmE5Lu2LCDmtYHnqIvliJfooajvvJrmt7vliqDlsZ7mgKcg4oCY6KKr5YiG5Y+R5ZCO5piv5ZCm5YWB6K645LiK5Lyg6ZmE5Lu24oCZICMxODM3XHJcblx0XHRpZiAoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSAmJiAhZmxvdy51cGxvYWRfYWZ0ZXJfYmVpbmdfZGlzdHJpYnV0ZWQpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdGlmIChTZXNzaW9uLmdldChcImJveFwiKSAhPSBcImRyYWZ0XCIgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgIT0gXCJpbmJveFwiKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOW3sue7j+e7k+adn+eahOWNleWtkOS4jeiDveaUuemZhOS7tlxyXG5cdFx0aWYgKGlucy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChJbnN0YW5jZU1hbmFnZXIuaXNDQyhpbnMpKSB7XHJcblx0XHRcdHZhciBzdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldENDU3RlcCgpO1xyXG5cdFx0XHRpZiAoc3RlcCAmJiAoc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHRydWUgfHwgc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHVuZGVmaW5lZCkpXHJcblx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBjdXJyZW50X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFN0ZXAoKTtcclxuXHRcdFx0aWYgKGN1cnJlbnRfc3RlcCAmJiAoY3VycmVudF9zdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdHJ1ZSB8fCBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PSB1bmRlZmluZWQpKVxyXG5cdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblx0fSxcclxuXHJcblx0bWFpbl9hdHRhY2htZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGlmICghaW5zKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHR2YXIgc3RhcnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRTdGFydFN0ZXAoKTtcclxuXHJcblx0XHQvLyDlpoLmnpzmmK/ooqvliIblj5HnmoTnlLPor7fljZXlubbkuJTmnInkv67mlLnmraPmlofnmoTmnYPpmZDvvIzliJnkvJjlhYjmmL7npLrljp/nlLPor7fljZXmlofku7ZcclxuXHRcdHZhciBtYWluX2F0dGFjaCA9IG51bGw7XHJcblx0XHRpZiAoaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSAmJiBzdGFydF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoID09IHRydWUpIHtcclxuXHRcdFx0bWFpbl9hdHRhY2ggPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UsXHJcblx0XHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIW1haW5fYXR0YWNoKSB7XHJcblx0XHRcdG1haW5fYXR0YWNoID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKHtcclxuXHRcdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnMuX2lkLFxyXG5cdFx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG1haW5fYXR0YWNoO1xyXG5cdH0sXHJcblxyXG5cdG5vcm1hbF9hdHRhY2htZW50czogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRpZiAoIWlucylcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0dmFyIHNlbGVjdG9yID0ge1xyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdCdtZXRhZGF0YS5tYWluJzoge1xyXG5cdFx0XHRcdCRuZTogdHJ1ZVxyXG5cdFx0XHR9LFxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgYXR0cyA9IG5ldyBBcnJheSgpO1xyXG5cclxuXHRcdGlmIChpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlKSB7XHJcblx0XHRcdC8vIOWmguaenOaYr+iiq+WIhuWPkeeahOeUs+ivt+WNle+8jOWImeaYvuekuuWOn+eUs+ivt+WNleaWh+S7tiwg5aaC5p6c6YCJ5oup5LqG5bCG5Y6f6KGo5Y2V5a2Y5YKo5Li66ZmE5Lu25Lmf6KaB5pi+56S6LCDlkIzml7bkuZ/opoHmmL7npLrmlrDkuIrkvKDnmoTpmYTku7ZcclxuXHRcdFx0dmFyIGRmaXMgPSBfLmNsb25lKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzKSB8fCBbXTtcclxuXHRcdFx0ZGZpcy5wdXNoKGlucy5faWQpO1xyXG5cdFx0XHRzZWxlY3RvclsnbWV0YWRhdGEuaW5zdGFuY2UnXSA9IHtcclxuXHRcdFx0XHQkaW46IGRmaXNcclxuXHRcdFx0fTtcclxuXHJcblxyXG5cdFx0XHRzZWxlY3RvcltcIiRvclwiXSA9IFt7XHJcblx0XHRcdFx0XCJtZXRhZGF0YS5pbnN0YW5jZVwiOiBpbnMuX2lkXHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHRcIm1ldGFkYXRhLmluc3RhbmNlXCI6IHtcclxuXHRcdFx0XHRcdCRpbjogaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XHJcblx0XHRcdFx0XHQkbmU6IHRydWVcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1dXHJcblxyXG5cdFx0XHQvLyDlpoLmnpzljp/nlLPor7fljZXmnInmraPmlofkvYbmmK/liIblj5HlkI7msqHmnInmraPmlofmnYPpmZDvvIzliJnljp/nlLPor7fljZXmraPmlofmmL7npLrlnKjpmYTku7bmoI9cclxuXHRcdFx0dmFyIHN0YXJ0X3N0ZXAgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0U3RhcnRTdGVwKCk7XHJcblx0XHRcdGlmIChzdGFydF9zdGVwICYmIHN0YXJ0X3N0ZXAuY2FuX2VkaXRfbWFpbl9hdHRhY2ggIT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHZhciBkaXN0cmlidXRlX21haW4gPSBjZnMuaW5zdGFuY2VzLmZpbmRPbmUoe1xyXG5cdFx0XHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzoge1xyXG5cdFx0XHRcdFx0XHQkaW46IGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHRcdFx0J21ldGFkYXRhLm1haW4nOiB0cnVlLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGlmIChkaXN0cmlidXRlX21haW4pIHtcclxuXHRcdFx0XHRcdHZhciBmaXJzdFZlcnNpb25NYWluID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKGRpc3RyaWJ1dGVfbWFpbi5tZXRhZGF0YS5wYXJlbnQpO1xyXG5cdFx0XHRcdFx0ZGlzdHJpYnV0ZV9tYWluLmF0dGFjaG1lbnRVcGxvYWRlZEF0ID0gZmlyc3RWZXJzaW9uTWFpbiA/IGZpcnN0VmVyc2lvbk1haW4udXBsb2FkZWRBdCA6IGRpc3RyaWJ1dGVfbWFpbi51cGxvYWRlZEF0O1xyXG5cdFx0XHRcdFx0YXR0cy5wdXNoKGRpc3RyaWJ1dGVfbWFpbik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzZWxlY3RvclsnbWV0YWRhdGEuaW5zdGFuY2UnXSA9IGlucy5faWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Y2ZzLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yKS5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcclxuXHRcdFx0dmFyIGZpcnN0VmVyc2lvbiA9IGNmcy5pbnN0YW5jZXMuZmluZE9uZShjLm1ldGFkYXRhLnBhcmVudCk7XHJcblx0XHRcdGMuYXR0YWNobWVudFVwbG9hZGVkQXQgPSBmaXJzdFZlcnNpb24gPyBmaXJzdFZlcnNpb24udXBsb2FkZWRBdCA6IGMudXBsb2FkZWRBdDtcclxuXHRcdFx0YXR0cy5wdXNoKGMpO1xyXG5cdFx0fSlcclxuXHJcblx0XHRyZXR1cm4gXy5zb3J0QnkoYXR0cywgJ2F0dGFjaG1lbnRVcGxvYWRlZEF0Jyk7XHJcblx0fSxcclxuXHJcblx0c2hvd0F0dGFjaG1lbnRzOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGlmICghaW5zKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0Ly8g5aaC5p6c5piv6KKr5YiG5Y+R55qE55Sz6K+35Y2V77yM5YiZ5pi+56S65Y6f55Sz6K+35Y2V5paH5Lu2IOWSjOWIhuWPkeWQjueUs+ivt+WNleaWh+S7tlxyXG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jbG9uZShpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XHJcblx0XHRpbnN0YW5jZUlkcy5wdXNoKGlucy5faWQpO1xyXG5cdFx0dmFyIGF0dGFjaG1lbnRzX2NvdW50ID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcclxuXHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzoge1xyXG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcclxuXHRcdFx0fSxcclxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXHJcblx0XHR9KS5jb3VudCgpO1xyXG5cclxuXHRcdGlmIChTZXNzaW9uICYmIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSAmJiBhdHRhY2htZW50c19jb3VudCA8IDEpXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PSBcImRyYWZ0XCIgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gXCJpbmJveFwiIHx8IGF0dGFjaG1lbnRzX2NvdW50ID4gMClcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHR9LFxyXG5cclxuXHRfdDogZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXkpXHJcblx0fSxcclxuXHJcblx0XzogZnVuY3Rpb24oa2V5KSB7XHJcblx0XHR2YXIgbG9jYWxlO1xyXG5cdFx0aWYgKE1ldGVvci5pc0NsaWVudCkge1xyXG5cdFx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZTtcclxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRmbG93X2ZpbGVzOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGlmICghaW5zKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRyZXR1cm4gY2ZzLmZpbGVzLmZpbmQoeyAnbWV0YWRhdGEuc3BhY2UnOiBpbnMuc3BhY2UsICdtZXRhZGF0YS5vYmplY3RfbmFtZSc6ICdmbG93cycsICdtZXRhZGF0YS5yZWNvcmRfaWQnOiBpbnMuZmxvdyB9KTtcclxuXHR9LFxyXG5cclxuXHRpc0RyYWZ0QW5kRmxvd2ZpbGVzRXhpc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0aWYgKCFpbnMpXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdHJldHVybiAoU2Vzc2lvbi5nZXQoJ2JveCcpID09ICdkcmFmdCcpICYmICEhY2ZzLmZpbGVzLmZpbmQoeyAnbWV0YWRhdGEuc3BhY2UnOiBpbnMuc3BhY2UsICdtZXRhZGF0YS5vYmplY3RfbmFtZSc6ICdmbG93cycsICdtZXRhZGF0YS5yZWNvcmRfaWQnOiBpbnMuZmxvdyB9KS5jb3VudCgpO1xyXG5cdH1cclxuXHJcblxyXG59XHJcblxyXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XHJcblx0SW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycy5fdCA9IGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKVxyXG5cdH1cclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLmVuYWJsZWRfYWRkX21haW5fYXR0YWNobWVudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblx0fTtcclxuXHRJbnN0YW5jZUF0dGFjaG1lbnRUZW1wbGF0ZS5oZWxwZXJzLmVuYWJsZWRfZWRpdF9ub3JtYWxfYXR0YWNobWVudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblx0fTtcclxuXHJcblx0SW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycy5tYWluX2F0dGFjaG1lbnQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZTtcclxuXHRcdHZhciBpbnN0YW5jZUlkcyA9IF8uY29tcGFjdChbaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlLCBpbnN0YW5jZS5faWRdKTtcclxuXHRcdHZhciBhdHRhY2htZW50ID0gY2ZzLmluc3RhbmNlcy5maW5kT25lKHtcclxuXHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzoge1xyXG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcclxuXHRcdFx0fSxcclxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxyXG5cdFx0XHQnbWV0YWRhdGEubWFpbic6IHRydWVcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiBhdHRhY2htZW50O1xyXG5cdH07XHJcblxyXG5cdEluc3RhbmNlQXR0YWNobWVudFRlbXBsYXRlLmhlbHBlcnMubm9ybWFsX2F0dGFjaG1lbnRzID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgc3RlZWRvc0RhdGEgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGFcclxuXHRcdHZhciBpbnN0YW5jZSA9IHN0ZWVkb3NEYXRhLmluc3RhbmNlO1xyXG5cdFx0dmFyIGluc3RhbmNlSWRzID0gXy5jbG9uZShpbnN0YW5jZS5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzKSB8fCBbXTtcclxuXHRcdGluc3RhbmNlSWRzLnB1c2goaW5zdGFuY2UuX2lkKTtcclxuXHRcdHZhciBhdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XHJcblx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcclxuXHRcdFx0XHQkaW46IGluc3RhbmNlSWRzXHJcblx0XHRcdH0sXHJcblx0XHRcdCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSxcclxuXHRcdFx0J21ldGFkYXRhLm1haW4nOiB7XHJcblx0XHRcdFx0JG5lOiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHRcdCRvcjogW3tcclxuXHRcdFx0XHQnbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHtcclxuXHRcdFx0XHRcdCRuZTogdHJ1ZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdCdtZXRhZGF0YS5pc19wcml2YXRlJzogdHJ1ZSxcclxuXHRcdFx0XHRcIm1ldGFkYXRhLm93bmVyXCI6IHN0ZWVkb3NEYXRhLnVzZXJJZFxyXG5cdFx0XHR9XVxyXG5cdFx0fSkuZmV0Y2goKTtcclxuXHJcblx0XHRyZXR1cm4gYXR0YWNobWVudHM7XHJcblx0fTtcclxuXHJcblx0SW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycy5zaG93QXR0YWNobWVudHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpbnN0YW5jZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5pbnN0YW5jZTtcclxuXHRcdHZhciBpbnN0YW5jZUlkcyA9IF8uY2xvbmUoaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XHJcblx0XHRpbnN0YW5jZUlkcy5wdXNoKGluc3RhbmNlLl9pZCk7XHJcblxyXG5cdFx0dmFyIGF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcclxuXHRcdFx0J21ldGFkYXRhLmluc3RhbmNlJzoge1xyXG5cdFx0XHRcdCRpbjogaW5zdGFuY2VJZHNcclxuXHRcdFx0fSxcclxuXHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXHJcblx0XHR9KS5mZXRjaCgpO1xyXG5cclxuXHRcdGlmIChhdHRhY2htZW50cyAmJiBhdHRhY2htZW50cy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0SW5zdGFuY2VBdHRhY2htZW50VGVtcGxhdGUuaGVscGVycy5zaG93TWFpblRpdGxlID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zdGFuY2UgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEuaW5zdGFuY2U7XHJcblx0XHR2YXIgaW5zdGFuY2VJZHMgPSBfLmNvbXBhY3QoW2luc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSwgaW5zdGFuY2UuX2lkXSk7XHJcblx0XHR2YXIgbWFpbl9hdHRhY2hfY291bnQgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xyXG5cdFx0XHQnbWV0YWRhdGEuaW5zdGFuY2UnOiB7XHJcblx0XHRcdFx0JGluOiBpbnN0YW5jZUlkc1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXHJcblx0XHRcdCdtZXRhZGF0YS5tYWluJzogdHJ1ZVxyXG5cdFx0fSkuY291bnQoKTtcclxuXHJcblx0XHRyZXR1cm4gbWFpbl9hdHRhY2hfY291bnQgPiAwXHJcblx0fVxyXG59XHJcbiIsIkluc3RhbmNlU2lnblRleHQuaGVscGVycyA9XHJcblx0c2hvdzogKHN0ZXBOYW1lKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNDbGllbnRcclxuXHRcdFx0aWYgU2Vzc2lvbi5nZXQoJ2luc3RhbmNlUHJpbnQnKVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0XHRpZiBJbnN0YW5jZU1hbmFnZXIuaXNJbmJveCgpXHJcblx0XHRcdFx0bXlBcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKClcclxuXHRcdFx0XHRpZiBteUFwcHJvdmVcclxuXHRcdFx0XHRcdGluc3RhbmNlID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblx0XHRcdFx0XHRteVRyYWNlID0gaW5zdGFuY2U/LnRyYWNlcz8uZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCBteUFwcHJvdmUudHJhY2UpXHJcblx0XHRcdFx0XHRyZXR1cm4gbXlUcmFjZT8ubmFtZSA9PSBzdGVwTmFtZVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdGRlZmF1bHREZXNjcmlwdGlvbjogKCktPlxyXG4jXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvbiB8fCBUQVBpMThuLl9fKFwiaW5zdGFuY2VfZGVmYXVsdF9vcGluaW9uXCIpXHJcblx0XHRyZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLmRlZmF1bHRfZGVzY3JpcHRpb25cclxuXHJcblx0dHJhY2VzOiAoKS0+XHJcblx0XHRJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpXHJcblxyXG5cdHRyYWNlOiAoc3RlcE5hbWUsIG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbiwgdG9wX2tleXdvcmRzKS0+XHJcblx0XHRpbnN0YW5jZSA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5zdGFuY2UoKVxyXG5cclxuXHRcdGlzX2NvbXBsZXRlZCA9IGluc3RhbmNlPy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiXHJcblxyXG5cdFx0Y29tcGxldGVkX2RhdGUgPSBpZiBpc19jb21wbGV0ZWQgdGhlbiBfLmxhc3QoaW5zdGFuY2UudHJhY2VzKT8uZmluaXNoX2RhdGU/LmdldFRpbWUoKSBlbHNlIDBcclxuXHJcblx0XHRpZiBpc19jb21wbGV0ZWQgJiYgaW5zdGFuY2UuZmluaXNoX2RhdGVcclxuXHRcdFx0Y29tcGxldGVkX2RhdGUgPSBpbnN0YW5jZS5maW5pc2hfZGF0ZT8uZ2V0VGltZSgpXHJcblxyXG5cdFx0dHJhY2VzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy50cmFjZXMoKVxyXG5cclxuXHRcdGFwcHJvdmVzID0gXy5jbG9uZSh0cmFjZXNbc3RlcE5hbWVdKVxyXG5cclxuXHRcdGFwcHJvdmVfc29ydCA9IChhcHByb3ZlcywgdG9wX2tleXdvcmRzKS0+XHJcblxyXG4j5a+5QXBwcm92ZXPmjpLluo/vvIwg5oyJ54Wn5o+Q5Lqk5pe26Ze05o6S5YCS5bqP77yM5aaC5p6c5rKh5pyJ5o+Q5Lqk5YiZ5pi+56S65Zyo5pyA5LiK6L65XHJcblx0XHRcdGFwcHJvdmVzX3NvcnRlZCA9IF8uc29ydEJ5IGFwcHJvdmVzLCAoYXBwcm92ZSktPlxyXG5cdFx0XHRcdHJldHVybiAtKGFwcHJvdmUuZmluaXNoX2RhdGUgfHwgbmV3IERhdGUoKSkuZ2V0VGltZSgpXHJcblxyXG5cdFx0XHQj6YCa6L+H5YWz6ZSu5a2X5o6S5bqPXHJcblx0XHRcdGlmIHRvcF9rZXl3b3Jkc1xyXG5cdFx0XHRcdHRvcF9hcHByb3ZlcyA9IG5ldyBBcnJheSgpXHJcblxyXG5cdFx0XHRcdHRvcF9rZXl3b3Jkcy5zcGxpdChcIixcIikuZm9yRWFjaCAoa2V5KSAtPlxyXG5cdFx0XHRcdFx0dG9wX2FwcHJvdmVzID0gXy51bmlvbiB0b3BfYXBwcm92ZXMsIF8uZmlsdGVyKGFwcHJvdmVzX3NvcnRlZCwgKGFwcHJvdmUpLT5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIGFwcHJvdmU/LmhhbmRsZXJfbmFtZT8uaW5kZXhPZihrZXkpID4gLTFcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHQjIOWvuee9rumhtuaEj+ingeaMieeFp+WkhOeQhuS6i+S7tuaOkuWAkuW6j1xyXG5cdFx0XHRcdHRvcF9hcHByb3ZlcyA9IF8uc29ydEJ5IHRvcF9hcHByb3ZlcywgKHRvcF9hcHByb3ZlKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gLSh0b3BfYXBwcm92ZS5maW5pc2hfZGF0ZSB8fCBuZXcgRGF0ZSgpKS5nZXRUaW1lKClcclxuXHJcblx0XHRcdFx0YXBwcm92ZXNfc29ydGVkID0gXy51bmlvbiB0b3BfYXBwcm92ZXMsIGFwcHJvdmVzX3NvcnRlZFxyXG5cdFx0XHRyZXR1cm4gYXBwcm92ZXNfc29ydGVkIHx8IFtdXHJcblxyXG5cdFx0YXBwcm92ZXMgPSBfLmZpbHRlciBhcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0cmV0dXJuIGEudHlwZSBpc250IFwiZm9yd2FyZFwiIGFuZCBhLnR5cGUgaXNudCBcImRpc3RyaWJ1dGVcIiBhbmQgYS50eXBlIGlzbnQgXCJ0ZXJtaW5hdGVkXCJcclxuXHJcblx0XHRpZiBvbmx5X2NjX29waW5pb25cclxuXHRcdFx0YXBwcm92ZXMgPSBhcHByb3Zlcz8uZmlsdGVyUHJvcGVydHkoXCJ0eXBlXCIsIFwiY2NcIilcclxuXHJcblx0XHRhcHByb3Zlc19zb3J0ZWQgPSBhcHByb3ZlX3NvcnQoYXBwcm92ZXMsIHRvcF9rZXl3b3JkcylcclxuXHJcblx0XHRhcHByb3Zlc0dyb3VwID0gXy5ncm91cEJ5KGFwcHJvdmVzLCBcImhhbmRsZXJcIik7XHJcblxyXG5cdFx0aGFzTmV4dCA9IChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSAtPlxyXG5cdFx0XHRoYW5kbGVyQXBwcm92ZXMgPSBhcHByb3Zlc0dyb3VwW2FwcHJvdmUuaGFuZGxlcl1cclxuXHRcdFx0cmV0dXJuIF8uaW5kZXhPZihoYW5kbGVyQXBwcm92ZXMsIGFwcHJvdmUpICsgMSA8IGhhbmRsZXJBcHByb3Zlcy5sZW5ndGhcclxuXHJcblx0XHRoYXZlRGVzY3JpcHRpb25BcHByb3ZlID0gKGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApIC0+XHJcblx0XHRcdGhhbmRsZXJBcHByb3ZlcyA9IGFwcHJvdmVzR3JvdXBbYXBwcm92ZS5oYW5kbGVyXVxyXG5cclxuXHRcdFx0ZGVzY3JpcHRpb25BcHByb3ZlcyA9IF8uZmlsdGVyIGhhbmRsZXJBcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0XHRpZiBhLmRlc2NyaXB0aW9uXHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdFx0aWYgZGVzY3JpcHRpb25BcHByb3Zlcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblxyXG5cdFx0YXBwcm92ZXNfc29ydGVkLmZvckVhY2ggKGFwcHJvdmUpIC0+XHJcbiNcdFx0XHTmnInovpPlhaXmhI/op4Eg5oiWIOacgOaWsOS4gOadoeW5tuS4lOeUqOaIt+ayoeaciei+k+WFpei/h+aEj+ingVxyXG4jXHRcdFx0aWYgIWFwcHJvdmUuaXNfZmluaXNoZWQgfHwgYXBwcm92ZS5kZXNjcmlwdGlvbiB8fCAoIWhhc05leHQoYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkgJiYgIWhhdmVEZXNjcmlwdGlvbkFwcHJvdmUoYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkpXHJcbiNcdFx0XHRpZiAhaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKVxyXG5cdFx0XHRpZiBhcHByb3ZlLnNpZ25fc2hvdyAhPSBmYWxzZSAmJiAoYXBwcm92ZS5kZXNjcmlwdGlvbiB8fCAoIWFwcHJvdmUuZGVzY3JpcHRpb24gJiYgIWhhc05leHQoYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkpIClcclxuXHRcdFx0XHRpZiBhcHByb3ZlLmp1ZGdlIGlzbnQgJ3Rlcm1pbmF0ZWQnXHJcblx0XHRcdFx0XHRhcHByb3ZlLl9kaXNwbGF5ID0gdHJ1ZVxyXG5cclxuXHRcdGFwcHJvdmVzX3NvcnRlZCA9IF8uZmlsdGVyIGFwcHJvdmVzX3NvcnRlZCwgKGEpIC0+XHJcblx0XHRcdGlmIGlzX2NvbXBsZXRlZFxyXG5cdFx0XHRcdHJldHVybiBhLl9kaXNwbGF5ID09IHRydWUgJiYgYS5pc19maW5pc2hlZCAmJiBhLmZpbmlzaF9kYXRlPy5nZXRUaW1lKCkgPD0gY29tcGxldGVkX2RhdGVcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBhLl9kaXNwbGF5ID09IHRydWVcclxuXHJcblx0XHRyZXR1cm4gYXBwcm92ZXNfc29ydGVkXHJcblxyXG5cdGluY2x1ZGU6IChhLCBiKSAtPlxyXG5cdFx0cmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5jbHVkZShhLCBiKVxyXG5cclxuXHR1bmVtcHR5OiAodmFsKS0+XHJcblx0XHRyZXR1cm4gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy51bmVtcHR5KHZhbClcclxuXHJcblx0Zm9ybWF0RGF0ZTogKGRhdGUsIG9wdGlvbnMpLT5cclxuXHRcdGlmICFvcHRpb25zXHJcblx0XHRcdG9wdGlvbnMgPSB7XCJmb3JtYXRcIjogXCJZWVlZLU1NLUREXCJ9XHJcblxyXG5cdFx0cmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZm9ybWF0RGF0ZShkYXRlLCBvcHRpb25zKVxyXG5cclxuXHRpc015QXBwcm92ZTogKGFwcHJvdmUsIG9ubHlfY2Nfb3BpbmlvbikgLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcblx0XHRcdGN1cnJlbnRBcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKClcclxuXHJcblx0XHRcdGlmICFhcHByb3ZlPy5faWRcclxuXHRcdFx0XHRhcHByb3ZlID0gY3VycmVudEFwcHJvdmVcclxuXHJcblx0XHRcdGlmIGFwcHJvdmUuX2lkID09IGN1cnJlbnRBcHByb3ZlPy5faWQgJiYgY3VycmVudEFwcHJvdmU/LnR5cGUgPT0gJ2NjJyAmJiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEubmFtZVxyXG5cdFx0XHRcdGlmIF8uaW5kZXhPZihjdXJyZW50QXBwcm92ZT8ub3Bpbmlvbl9maWVsZHNfY29kZSwgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUpID4gLTFcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRpZiAhKGN1cnJlbnRBcHByb3ZlPy50eXBlID09ICdjYycpICYmIG9ubHlfY2Nfb3BpbmlvblxyXG5cdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdFx0aWYgY3VycmVudEFwcHJvdmUgJiYgYXBwcm92ZS5faWQgPT0gY3VycmVudEFwcHJvdmUuX2lkXHJcblx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRteUFwcHJvdmVEZXNjcmlwdGlvbjogKGFwcHJvdmVJZCktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCdcclxuXHRcdFx0XHRteUFwcHJvdmUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpPy5teUFwcHJvdmU/LmdldCgpXHJcblx0XHRcdFx0aWYgbXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PSBhcHByb3ZlSWRcclxuXHRcdFx0XHRcdGlmICFteUFwcHJvdmUuc2lnbl9maWVsZF9jb2RlIHx8IG15QXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgPT0gVGVtcGxhdGUuaW5zdGFuY2UoKT8uZGF0YT8ubmFtZVxyXG5cdFx0XHRcdFx0XHRpZiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG15QXBwcm92ZT8uZGVzY3JpcHRpb24gfHwgXCJcIlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpXHJcblxyXG5cdG5vdzogKCktPlxyXG5cdFx0cmV0dXJuIG5ldyBEYXRlKCk7XHJcblxyXG5cdGlzUmVhZE9ubHk6ICgpLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRyZXR1cm4gQXBwcm92ZU1hbmFnZXIuaXNSZWFkT25seSgpXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0aXNPcGluaW9uT2ZGaWVsZDogKGFwcHJvdmUpLT5cclxuXHRcdGlmIGFwcHJvdmUudHlwZSA9PSBcImNjXCIgJiYgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWVcclxuXHRcdFx0aWYgVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUgPT0gYXBwcm92ZS5zaWduX2ZpZWxkX2NvZGVcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHRtYXJrRG93blRvSHRtbDogKG1hcmtEb3duU3RyaW5nKS0+XHJcblx0XHRpZiBtYXJrRG93blN0cmluZ1xyXG5cdFx0XHRyZW5kZXJlciA9IG5ldyBNYXJrZG93bi5SZW5kZXJlcigpO1xyXG5cdFx0XHRyZW5kZXJlci5saW5rID0gKGhyZWYsIHRpdGxlLCB0ZXh0KSAtPlxyXG5cdFx0XHRcdHJldHVybiBcIjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPScje2hyZWZ9JyB0aXRsZT0nI3t0aXRsZX0nPiN7dGV4dH08L2E+XCJcclxuXHRcdFx0cmV0dXJuIFNwYWNlYmFycy5TYWZlU3RyaW5nKE1hcmtkb3duKG1hcmtEb3duU3RyaW5nLCB7cmVuZGVyZXI6IHJlbmRlcmVyfSkpXHJcblxyXG5cdHN0ZXBzOiAoZmllbGRfZm9ybXVsYSwgc3RlcCwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduKS0+XHJcblx0XHRzdGVwcyA9IFtdXHJcblx0XHRpZiAhc3RlcFxyXG5cdFx0XHRpZiAhZmllbGRfZm9ybXVsYVxyXG5cdFx0XHRcdGZpZWxkX2Zvcm11bGEgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VGb3JtVmVyc2lvbigpPy5maWVsZHM/LmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIHRoaXMubmFtZSkuZm9ybXVsYVxyXG5cdFx0XHRzdGVwcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZ2V0T3BpbmlvbkZpZWxkU3RlcHNOYW1lKGZpZWxkX2Zvcm11bGEsIFRlbXBsYXRlLmluc3RhbmNlKCk/LmRhdGEudG9wX2tleXdvcmRzKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRzdGVwcyA9IFt7c3RlcE5hbWU6IHN0ZXAsIG9ubHlfY2Nfb3Bpbmlvbjogb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduOiBpbWFnZV9zaWdufV1cclxuXHRcdHJldHVybiBzdGVwc1xyXG5cclxuXHRpbWFnZVNpZ25EYXRhOiAoaGFuZGxlcikgLT5cclxuXHRcdHJldHVybiB7dXNlcjogaGFuZGxlcn1cclxuXHJcblx0c2hvd1NpZ25JbWFnZTogKGhhbmRsZXIsIGltYWdlX3NpZ24pIC0+XHJcblx0XHRzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbihoYW5kbGVyKTtcclxuXHJcblx0XHRpZiBzcGFjZVVzZXJTaWduPy5zaWduICYmIGltYWdlX3NpZ25cclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdGdldExhc3RTaWduQXBwcm92ZTogKCktPlxyXG5cdFx0aW5zID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblxyXG5cdFx0cmV0dXJuIF8ubGFzdChUcmFjZXNNYW5hZ2VyLmdldEhhbmRsZXJTaWduU2hvd0FwcHJvdmVzIGlucywgTWV0ZW9yLnVzZXJJZCgpKVxyXG5cclxuXHJcblx0bGFzdE15QXBwcm92ZURlc2NyaXB0aW9uOiAoKS0+XHJcblx0XHR0cmFjZXMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpXHJcblx0XHRjdXJyZW50U3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xyXG5cdFx0YXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tjdXJyZW50U3RlcC5uYW1lXSlcclxuXHJcblx0XHRhcHByb3ZlcyA9IGFwcHJvdmVzLmZpbHRlclByb3BlcnR5KFwiaGFuZGxlclwiLCBNZXRlb3IudXNlcklkKCkpXHJcblxyXG5cdFx0aWYgYXBwcm92ZXMubGVuZ3RoID4gMVxyXG5cdFx0XHRyZXR1cm4gYXBwcm92ZXNbYXBwcm92ZXMubGVuZ3RoIC0gMl0/LmRlc2NyaXB0aW9uXHJcblxyXG5cdFx0cmV0dXJuIFwiXCI7XHJcblxyXG5cdHNob3dBcHByb3ZlOiAoYXBwcm92ZSktPlxyXG5cdFx0aWYgIWFwcHJvdmUuc2lnbl9maWVsZF9jb2RlIHx8IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlID09IFRlbXBsYXRlLmluc3RhbmNlKCk/LmRhdGE/Lm5hbWVcclxuXHRcdFx0aWYgYXBwcm92ZT8uaXNfcmVhZFxyXG5cdFx0XHRcdGlmIGFwcHJvdmUuaXNfZmluaXNoZWRcclxuXHRcdFx0XHRcdHJldHVybiBbXCJhcHByb3ZlZFwiLCBcInJlamVjdGVkXCIsIFwic3VibWl0dGVkXCIsIFwicmVhZGVkXCJdLmluY2x1ZGVzKGFwcHJvdmUuanVkZ2UpXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdGp1ZGdlX2Rlc2NyaXB0aW9uOiAoanVkZ2UpLT5cclxuXHRcdHJldHVybiB0KGp1ZGdlICsgXCJfZGVzY3JpcHRpb25cIilcclxuXHJcblx0aXNfYXBwcm92ZWQ6IChqdWRnZSktPlxyXG5cdFx0cmV0dXJuIFwiYXBwcm92ZWRcIiA9PSBqdWRnZVxyXG5cclxuXHRpc19yZWplY3RlZDogKGp1ZGdlKS0+XHJcblx0XHRyZXR1cm4gXCJyZWplY3RlZFwiID09IGp1ZGdlXHJcblxyXG5cdGlzX3JlYWRlZDogKGp1ZGdlKS0+XHJcblx0XHRyZXR1cm4gW1wiYXBwcm92ZWRcIiwgXCJyZWplY3RlZFwiLCBcInN1Ym1pdHRlZFwiLCBcInJlYWRlZFwiXS5pbmNsdWRlcyhqdWRnZSlcclxuXHJcblx0YWRkQ2xhc3M6ICgpLT5cclxuXHRcdG5hbWUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpPy5kYXRhPy5uYW1lXHJcblx0XHRzZXRUaW1lb3V0ICgpIC0+XHJcblx0XHRcdHRyeVxyXG5cdFx0XHRcdGVsZW1lbnQgPSAkKFwiLmF1dG9tYXRpYy5vcGluaW9uLWZpZWxkLVwiICsgbmFtZSlcclxuXHRcdFx0XHRpZiBlbGVtZW50Lmxlbmd0aCA+IDBcclxuXHRcdFx0XHRcdGlmIGVsZW1lbnQ/LmlzKFwidGRcIilcclxuXHRcdFx0XHRcdFx0ZWxlbWVudC5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHQkKFwiLmluc3RhbmNlLXNpZ25cIiwgZWxlbWVudCkuYWRkQ2xhc3MoJ2ZpZWxkLWVkaXRhYmxlJylcclxuXHRcdFx0Y2F0Y2ggZVxyXG5cdFx0XHRcdGNvbnNvbGUubG9nIGVcclxuXHRcdCwgMVxyXG5cdFx0cmV0dXJuICcnXHJcblxyXG5pZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMuZGVmYXVsdERlc2NyaXB0aW9uID0gLT5cclxuXHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHRcdHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvbiB8fCBUQVBpMThuLl9fKFwiaW5zdGFuY2VfZGVmYXVsdF9vcGluaW9uXCIsIHt9LCBsb2NhbGUpIiwiSW5zdGFuY2VTaWduVGV4dC5oZWxwZXJzID0ge1xuICBzaG93OiBmdW5jdGlvbihzdGVwTmFtZSkge1xuICAgIHZhciBpbnN0YW5jZSwgbXlBcHByb3ZlLCBteVRyYWNlLCByZWY7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgaWYgKFNlc3Npb24uZ2V0KCdpbnN0YW5jZVByaW50JykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKEluc3RhbmNlTWFuYWdlci5pc0luYm94KCkpIHtcbiAgICAgICAgbXlBcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlKCk7XG4gICAgICAgIGlmIChteUFwcHJvdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZSA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgIG15VHJhY2UgPSBpbnN0YW5jZSAhPSBudWxsID8gKHJlZiA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCA/IHJlZi5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIG15QXBwcm92ZS50cmFjZSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIChteVRyYWNlICE9IG51bGwgPyBteVRyYWNlLm5hbWUgOiB2b2lkIDApID09PSBzdGVwTmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGRlZmF1bHREZXNjcmlwdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5kZWZhdWx0X2Rlc2NyaXB0aW9uO1xuICB9LFxuICB0cmFjZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpO1xuICB9LFxuICB0cmFjZTogZnVuY3Rpb24oc3RlcE5hbWUsIG9ubHlfY2Nfb3BpbmlvbiwgaW1hZ2Vfc2lnbiwgdG9wX2tleXdvcmRzKSB7XG4gICAgdmFyIGFwcHJvdmVfc29ydCwgYXBwcm92ZXMsIGFwcHJvdmVzR3JvdXAsIGFwcHJvdmVzX3NvcnRlZCwgY29tcGxldGVkX2RhdGUsIGhhc05leHQsIGhhdmVEZXNjcmlwdGlvbkFwcHJvdmUsIGluc3RhbmNlLCBpc19jb21wbGV0ZWQsIHJlZiwgcmVmMSwgcmVmMiwgdHJhY2VzO1xuICAgIGluc3RhbmNlID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbnN0YW5jZSgpO1xuICAgIGlzX2NvbXBsZXRlZCA9IChpbnN0YW5jZSAhPSBudWxsID8gaW5zdGFuY2Uuc3RhdGUgOiB2b2lkIDApID09PSBcImNvbXBsZXRlZFwiO1xuICAgIGNvbXBsZXRlZF9kYXRlID0gaXNfY29tcGxldGVkID8gKHJlZiA9IF8ubGFzdChpbnN0YW5jZS50cmFjZXMpKSAhPSBudWxsID8gKHJlZjEgPSByZWYuZmluaXNoX2RhdGUpICE9IG51bGwgPyByZWYxLmdldFRpbWUoKSA6IHZvaWQgMCA6IHZvaWQgMCA6IDA7XG4gICAgaWYgKGlzX2NvbXBsZXRlZCAmJiBpbnN0YW5jZS5maW5pc2hfZGF0ZSkge1xuICAgICAgY29tcGxldGVkX2RhdGUgPSAocmVmMiA9IGluc3RhbmNlLmZpbmlzaF9kYXRlKSAhPSBudWxsID8gcmVmMi5nZXRUaW1lKCkgOiB2b2lkIDA7XG4gICAgfVxuICAgIHRyYWNlcyA9IEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudHJhY2VzKCk7XG4gICAgYXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tzdGVwTmFtZV0pO1xuICAgIGFwcHJvdmVfc29ydCA9IGZ1bmN0aW9uKGFwcHJvdmVzLCB0b3Bfa2V5d29yZHMpIHtcbiAgICAgIHZhciBhcHByb3Zlc19zb3J0ZWQsIHRvcF9hcHByb3ZlcztcbiAgICAgIGFwcHJvdmVzX3NvcnRlZCA9IF8uc29ydEJ5KGFwcHJvdmVzLCBmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICAgIHJldHVybiAtKGFwcHJvdmUuZmluaXNoX2RhdGUgfHwgbmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgfSk7XG4gICAgICBpZiAodG9wX2tleXdvcmRzKSB7XG4gICAgICAgIHRvcF9hcHByb3ZlcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0b3Bfa2V5d29yZHMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHRvcF9hcHByb3ZlcyA9IF8udW5pb24odG9wX2FwcHJvdmVzLCBfLmZpbHRlcihhcHByb3Zlc19zb3J0ZWQsIGZ1bmN0aW9uKGFwcHJvdmUpIHtcbiAgICAgICAgICAgIHZhciByZWYzO1xuICAgICAgICAgICAgcmV0dXJuIChhcHByb3ZlICE9IG51bGwgPyAocmVmMyA9IGFwcHJvdmUuaGFuZGxlcl9uYW1lKSAhPSBudWxsID8gcmVmMy5pbmRleE9mKGtleSkgOiB2b2lkIDAgOiB2b2lkIDApID4gLTE7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdG9wX2FwcHJvdmVzID0gXy5zb3J0QnkodG9wX2FwcHJvdmVzLCBmdW5jdGlvbih0b3BfYXBwcm92ZSkge1xuICAgICAgICAgIHJldHVybiAtKHRvcF9hcHByb3ZlLmZpbmlzaF9kYXRlIHx8IG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFwcHJvdmVzX3NvcnRlZCA9IF8udW5pb24odG9wX2FwcHJvdmVzLCBhcHByb3Zlc19zb3J0ZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFwcHJvdmVzX3NvcnRlZCB8fCBbXTtcbiAgICB9O1xuICAgIGFwcHJvdmVzID0gXy5maWx0ZXIoYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBhLnR5cGUgIT09IFwiZm9yd2FyZFwiICYmIGEudHlwZSAhPT0gXCJkaXN0cmlidXRlXCIgJiYgYS50eXBlICE9PSBcInRlcm1pbmF0ZWRcIjtcbiAgICB9KTtcbiAgICBpZiAob25seV9jY19vcGluaW9uKSB7XG4gICAgICBhcHByb3ZlcyA9IGFwcHJvdmVzICE9IG51bGwgPyBhcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcInR5cGVcIiwgXCJjY1wiKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgYXBwcm92ZXNfc29ydGVkID0gYXBwcm92ZV9zb3J0KGFwcHJvdmVzLCB0b3Bfa2V5d29yZHMpO1xuICAgIGFwcHJvdmVzR3JvdXAgPSBfLmdyb3VwQnkoYXBwcm92ZXMsIFwiaGFuZGxlclwiKTtcbiAgICBoYXNOZXh0ID0gZnVuY3Rpb24oYXBwcm92ZSwgYXBwcm92ZXNHcm91cCkge1xuICAgICAgdmFyIGhhbmRsZXJBcHByb3ZlcztcbiAgICAgIGhhbmRsZXJBcHByb3ZlcyA9IGFwcHJvdmVzR3JvdXBbYXBwcm92ZS5oYW5kbGVyXTtcbiAgICAgIHJldHVybiBfLmluZGV4T2YoaGFuZGxlckFwcHJvdmVzLCBhcHByb3ZlKSArIDEgPCBoYW5kbGVyQXBwcm92ZXMubGVuZ3RoO1xuICAgIH07XG4gICAgaGF2ZURlc2NyaXB0aW9uQXBwcm92ZSA9IGZ1bmN0aW9uKGFwcHJvdmUsIGFwcHJvdmVzR3JvdXApIHtcbiAgICAgIHZhciBkZXNjcmlwdGlvbkFwcHJvdmVzLCBoYW5kbGVyQXBwcm92ZXM7XG4gICAgICBoYW5kbGVyQXBwcm92ZXMgPSBhcHByb3Zlc0dyb3VwW2FwcHJvdmUuaGFuZGxlcl07XG4gICAgICBkZXNjcmlwdGlvbkFwcHJvdmVzID0gXy5maWx0ZXIoaGFuZGxlckFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgIGlmIChhLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgICBpZiAoZGVzY3JpcHRpb25BcHByb3Zlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBhcHByb3Zlc19zb3J0ZWQuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgICBpZiAoYXBwcm92ZS5zaWduX3Nob3cgIT09IGZhbHNlICYmIChhcHByb3ZlLmRlc2NyaXB0aW9uIHx8ICghYXBwcm92ZS5kZXNjcmlwdGlvbiAmJiAhaGFzTmV4dChhcHByb3ZlLCBhcHByb3Zlc0dyb3VwKSkpKSB7XG4gICAgICAgIGlmIChhcHByb3ZlLmp1ZGdlICE9PSAndGVybWluYXRlZCcpIHtcbiAgICAgICAgICByZXR1cm4gYXBwcm92ZS5fZGlzcGxheSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBhcHByb3Zlc19zb3J0ZWQgPSBfLmZpbHRlcihhcHByb3Zlc19zb3J0ZWQsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIHZhciByZWYzO1xuICAgICAgaWYgKGlzX2NvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm4gYS5fZGlzcGxheSA9PT0gdHJ1ZSAmJiBhLmlzX2ZpbmlzaGVkICYmICgocmVmMyA9IGEuZmluaXNoX2RhdGUpICE9IG51bGwgPyByZWYzLmdldFRpbWUoKSA6IHZvaWQgMCkgPD0gY29tcGxldGVkX2RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5fZGlzcGxheSA9PT0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXBwcm92ZXNfc29ydGVkO1xuICB9LFxuICBpbmNsdWRlOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuaW5jbHVkZShhLCBiKTtcbiAgfSxcbiAgdW5lbXB0eTogZnVuY3Rpb24odmFsKSB7XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMudW5lbXB0eSh2YWwpO1xuICB9LFxuICBmb3JtYXREYXRlOiBmdW5jdGlvbihkYXRlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBcImZvcm1hdFwiOiBcIllZWVktTU0tRERcIlxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIEluc3RhbmNlZm9ybVRlbXBsYXRlLmhlbHBlcnMuZm9ybWF0RGF0ZShkYXRlLCBvcHRpb25zKTtcbiAgfSxcbiAgaXNNeUFwcHJvdmU6IGZ1bmN0aW9uKGFwcHJvdmUsIG9ubHlfY2Nfb3Bpbmlvbikge1xuICAgIHZhciBjdXJyZW50QXBwcm92ZSwgaW5zO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgY3VycmVudEFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoKTtcbiAgICAgIGlmICghKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUuX2lkIDogdm9pZCAwKSkge1xuICAgICAgICBhcHByb3ZlID0gY3VycmVudEFwcHJvdmU7XG4gICAgICB9XG4gICAgICBpZiAoYXBwcm92ZS5faWQgPT09IChjdXJyZW50QXBwcm92ZSAhPSBudWxsID8gY3VycmVudEFwcHJvdmUuX2lkIDogdm9pZCAwKSAmJiAoY3VycmVudEFwcHJvdmUgIT0gbnVsbCA/IGN1cnJlbnRBcHByb3ZlLnR5cGUgOiB2b2lkIDApID09PSAnY2MnICYmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lKSB7XG4gICAgICAgIGlmIChfLmluZGV4T2YoY3VycmVudEFwcHJvdmUgIT0gbnVsbCA/IGN1cnJlbnRBcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGUgOiB2b2lkIDAsIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lKSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoISgoY3VycmVudEFwcHJvdmUgIT0gbnVsbCA/IGN1cnJlbnRBcHByb3ZlLnR5cGUgOiB2b2lkIDApID09PSAnY2MnKSAmJiBvbmx5X2NjX29waW5pb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRBcHByb3ZlICYmIGFwcHJvdmUuX2lkID09PSBjdXJyZW50QXBwcm92ZS5faWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgbXlBcHByb3ZlRGVzY3JpcHRpb246IGZ1bmN0aW9uKGFwcHJvdmVJZCkge1xuICAgIHZhciBteUFwcHJvdmUsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMztcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgbXlBcHByb3ZlID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5teUFwcHJvdmUpICE9IG51bGwgPyByZWYxLmdldCgpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAobXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgaWYgKCFteUFwcHJvdmUuc2lnbl9maWVsZF9jb2RlIHx8IG15QXBwcm92ZS5zaWduX2ZpZWxkX2NvZGUgPT09ICgocmVmMiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMyA9IHJlZjIuZGF0YSkgIT0gbnVsbCA/IHJlZjMubmFtZSA6IHZvaWQgMCA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgIGlmICghU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAobXlBcHByb3ZlICE9IG51bGwgPyBteUFwcHJvdmUuZGVzY3JpcHRpb24gOiB2b2lkIDApIHx8IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZV9teV9hcHByb3ZlX2Rlc2NyaXB0aW9uXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbm93OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKTtcbiAgfSxcbiAgaXNSZWFkT25seTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgcmV0dXJuIEFwcHJvdmVNYW5hZ2VyLmlzUmVhZE9ubHkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc09waW5pb25PZkZpZWxkOiBmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgaWYgKGFwcHJvdmUudHlwZSA9PT0gXCJjY1wiICYmIFRlbXBsYXRlLmluc3RhbmNlKCkuZGF0YS5uYW1lKSB7XG4gICAgICBpZiAoVGVtcGxhdGUuaW5zdGFuY2UoKS5kYXRhLm5hbWUgPT09IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIG1hcmtEb3duVG9IdG1sOiBmdW5jdGlvbihtYXJrRG93blN0cmluZykge1xuICAgIHZhciByZW5kZXJlcjtcbiAgICBpZiAobWFya0Rvd25TdHJpbmcpIHtcbiAgICAgIHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XG4gICAgICByZW5kZXJlci5saW5rID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J1wiICsgaHJlZiArIFwiJyB0aXRsZT0nXCIgKyB0aXRsZSArIFwiJz5cIiArIHRleHQgKyBcIjwvYT5cIjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU3BhY2ViYXJzLlNhZmVTdHJpbmcoTWFya2Rvd24obWFya0Rvd25TdHJpbmcsIHtcbiAgICAgICAgcmVuZGVyZXI6IHJlbmRlcmVyXG4gICAgICB9KSk7XG4gICAgfVxuICB9LFxuICBzdGVwczogZnVuY3Rpb24oZmllbGRfZm9ybXVsYSwgc3RlcCwgb25seV9jY19vcGluaW9uLCBpbWFnZV9zaWduKSB7XG4gICAgdmFyIHJlZiwgcmVmMSwgcmVmMiwgc3RlcHM7XG4gICAgc3RlcHMgPSBbXTtcbiAgICBpZiAoIXN0ZXApIHtcbiAgICAgIGlmICghZmllbGRfZm9ybXVsYSkge1xuICAgICAgICBmaWVsZF9mb3JtdWxhID0gKHJlZiA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZUZvcm1WZXJzaW9uKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5maWVsZHMpICE9IG51bGwgPyByZWYxLmZpbmRQcm9wZXJ0eUJ5UEsoXCJjb2RlXCIsIHRoaXMubmFtZSkuZm9ybXVsYSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHN0ZXBzID0gSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5nZXRPcGluaW9uRmllbGRTdGVwc05hbWUoZmllbGRfZm9ybXVsYSwgKHJlZjIgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpKSAhPSBudWxsID8gcmVmMi5kYXRhLnRvcF9rZXl3b3JkcyA6IHZvaWQgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ZXBzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgc3RlcE5hbWU6IHN0ZXAsXG4gICAgICAgICAgb25seV9jY19vcGluaW9uOiBvbmx5X2NjX29waW5pb24sXG4gICAgICAgICAgaW1hZ2Vfc2lnbjogaW1hZ2Vfc2lnblxuICAgICAgICB9XG4gICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gc3RlcHM7XG4gIH0sXG4gIGltYWdlU2lnbkRhdGE6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcjogaGFuZGxlclxuICAgIH07XG4gIH0sXG4gIHNob3dTaWduSW1hZ2U6IGZ1bmN0aW9uKGhhbmRsZXIsIGltYWdlX3NpZ24pIHtcbiAgICB2YXIgc3BhY2VVc2VyU2lnbjtcbiAgICBzcGFjZVVzZXJTaWduID0gSW1hZ2VTaWduLmhlbHBlcnMuc3BhY2VVc2VyU2lnbihoYW5kbGVyKTtcbiAgICBpZiAoKHNwYWNlVXNlclNpZ24gIT0gbnVsbCA/IHNwYWNlVXNlclNpZ24uc2lnbiA6IHZvaWQgMCkgJiYgaW1hZ2Vfc2lnbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIGdldExhc3RTaWduQXBwcm92ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucztcbiAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICByZXR1cm4gXy5sYXN0KFRyYWNlc01hbmFnZXIuZ2V0SGFuZGxlclNpZ25TaG93QXBwcm92ZXMoaW5zLCBNZXRlb3IudXNlcklkKCkpKTtcbiAgfSxcbiAgbGFzdE15QXBwcm92ZURlc2NyaXB0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXBwcm92ZXMsIGN1cnJlbnRTdGVwLCByZWYsIHRyYWNlcztcbiAgICB0cmFjZXMgPSBJbnN0YW5jZWZvcm1UZW1wbGF0ZS5oZWxwZXJzLnRyYWNlcygpO1xuICAgIGN1cnJlbnRTdGVwID0gSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRTdGVwKCk7XG4gICAgYXBwcm92ZXMgPSBfLmNsb25lKHRyYWNlc1tjdXJyZW50U3RlcC5uYW1lXSk7XG4gICAgYXBwcm92ZXMgPSBhcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgTWV0ZW9yLnVzZXJJZCgpKTtcbiAgICBpZiAoYXBwcm92ZXMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIChyZWYgPSBhcHByb3Zlc1thcHByb3Zlcy5sZW5ndGggLSAyXSkgIT0gbnVsbCA/IHJlZi5kZXNjcmlwdGlvbiA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH0sXG4gIHNob3dBcHByb3ZlOiBmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgdmFyIHJlZiwgcmVmMTtcbiAgICBpZiAoIWFwcHJvdmUuc2lnbl9maWVsZF9jb2RlIHx8IGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlID09PSAoKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5kYXRhKSAhPSBudWxsID8gcmVmMS5uYW1lIDogdm9pZCAwIDogdm9pZCAwKSkge1xuICAgICAgaWYgKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUuaXNfcmVhZCA6IHZvaWQgMCkge1xuICAgICAgICBpZiAoYXBwcm92ZS5pc19maW5pc2hlZCkge1xuICAgICAgICAgIHJldHVybiBbXCJhcHByb3ZlZFwiLCBcInJlamVjdGVkXCIsIFwic3VibWl0dGVkXCIsIFwicmVhZGVkXCJdLmluY2x1ZGVzKGFwcHJvdmUuanVkZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAganVkZ2VfZGVzY3JpcHRpb246IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIHQoanVkZ2UgKyBcIl9kZXNjcmlwdGlvblwiKTtcbiAgfSxcbiAgaXNfYXBwcm92ZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIFwiYXBwcm92ZWRcIiA9PT0ganVkZ2U7XG4gIH0sXG4gIGlzX3JlamVjdGVkOiBmdW5jdGlvbihqdWRnZSkge1xuICAgIHJldHVybiBcInJlamVjdGVkXCIgPT09IGp1ZGdlO1xuICB9LFxuICBpc19yZWFkZWQ6IGZ1bmN0aW9uKGp1ZGdlKSB7XG4gICAgcmV0dXJuIFtcImFwcHJvdmVkXCIsIFwicmVqZWN0ZWRcIiwgXCJzdWJtaXR0ZWRcIiwgXCJyZWFkZWRcIl0uaW5jbHVkZXMoanVkZ2UpO1xuICB9LFxuICBhZGRDbGFzczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5hbWUsIHJlZiwgcmVmMTtcbiAgICBuYW1lID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5kYXRhKSAhPSBudWxsID8gcmVmMS5uYW1lIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSwgZWxlbWVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsZW1lbnQgPSAkKFwiLmF1dG9tYXRpYy5vcGluaW9uLWZpZWxkLVwiICsgbmFtZSk7XG4gICAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoZWxlbWVudCAhPSBudWxsID8gZWxlbWVudC5pcyhcInRkXCIpIDogdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICQoXCIuaW5zdGFuY2Utc2lnblwiLCBlbGVtZW50KS5hZGRDbGFzcygnZmllbGQtZWRpdGFibGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGUpO1xuICAgICAgfVxuICAgIH0sIDEpO1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBJbnN0YW5jZVNpZ25UZXh0LmhlbHBlcnMuZGVmYXVsdERlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgIHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmRhdGEuZGVmYXVsdF9kZXNjcmlwdGlvbiB8fCBUQVBpMThuLl9fKFwiaW5zdGFuY2VfZGVmYXVsdF9vcGluaW9uXCIsIHt9LCBsb2NhbGUpO1xuICB9O1xufVxuIiwiVHJhY2VzVGVtcGxhdGUuaGVscGVycyA9XHJcblx0ZXF1YWxzOiAoYSwgYikgLT5cclxuXHRcdGEgPT0gYlxyXG5cdGVtcHR5OiAoYSkgLT5cclxuXHRcdGlmIGFcclxuXHRcdFx0YS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPCAxXHJcblx0XHRlbHNlXHJcblx0XHRcdHRydWVcclxuXHR1bmVtcHR5OiAoYSkgLT5cclxuXHRcdGlmIGFcclxuXHRcdFx0YS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPiAwXHJcblx0XHRlbHNlXHJcblx0XHRcdGZhbHNlXHJcblxyXG5cdGFwcGVuZDogKGEsIGIpIC0+XHJcblx0XHRhICsgYlxyXG5cclxuXHRkYXRlRm9ybWF0OiAoZGF0ZSkgLT5cclxuXHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpICYmIGRhdGU/LmdldEZ1bGxZZWFyKCkgPT0gKG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpXHJcblx0XHRcdFx0cmV0dXJuICQuZm9ybWF0LmRhdGUgbmV3IERhdGUoZGF0ZSksIFwiTU0tZGQgSEg6bW1cIlxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuICQuZm9ybWF0LmRhdGUgbmV3IERhdGUoZGF0ZSksIFwieXl5eS1NTS1kZCBISDptbVwiXHJcblxyXG5cdGdldFN0ZXBOYW1lOiAoc3RlcElkKSAtPlxyXG5cdFx0c3RlcCA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZVN0ZXAoc3RlcElkKVxyXG5cdFx0aWYgc3RlcFxyXG5cdFx0XHRyZXR1cm4gc3RlcC5uYW1lXHJcblx0XHRudWxsXHJcblx0c2hvd0RlbGV0ZUJ1dHRvbjogKGFwcHJvdmVkKSAtPlxyXG5cdFx0aWYgYXBwcm92ZWQgYW5kIGFwcHJvdmVkLnR5cGUgPT0gJ2NjJyBhbmQgYXBwcm92ZWQuZnJvbV91c2VyID09IE1ldGVvci51c2VySWQoKSBhbmQgYXBwcm92ZWQuaXNfZmluaXNoZWQgIT0gdHJ1ZSBhbmQgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ZmFsc2VcclxuXHRpc1Nob3dNb2RpZmljYXRpb25CdXR0b246IChhcHByb3ZlZCkgLT5cclxuXHRcdGFwcHJvdmVfYWRtaW5zID0gTWV0ZW9yLnNldHRpbmdzPy5wdWJsaWM/LndvcmtmbG93Py5hcHByb3ZlX2FkbWluc1xyXG5cdFx0aWYgYXBwcm92ZV9hZG1pbnM/Lmxlbmd0aFxyXG5cdFx0XHRpc1Nob3cgPSBhcHByb3ZlX2FkbWlucz8uY29udGFpbnMgTWV0ZW9yLnVzZXJJZCgpXHJcblx0XHR1bmxlc3MgaXNTaG93XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0cmV0dXJuIGFwcHJvdmVkLmhhbmRsZXIgPT0gTWV0ZW9yLnVzZXJJZCgpXHJcblx0aXNFZGl0aW5nOiAoKSAtPlxyXG5cdFx0IHJldHVybiBUZW1wbGF0ZS5pbnN0YW5jZSgpLmlzX2VkaXRpbmc/LmdldCgpXHJcblx0aXNTaG93RGVzY3JpcHRpb246IChhcHByb3ZlZCktPlxyXG5cdFx0IyBkZWJ1Z2dlclxyXG5cdFx0aWYgVHJhY2VzVGVtcGxhdGUuaGVscGVycy5pc1Nob3dNb2RpZmljYXRpb25CdXR0b24gYXBwcm92ZWRcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdHJldHVybiBhcHByb3ZlZC5kZXNjcmlwdGlvbj8udG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID4gMFxyXG5cdGlzQ0M6IChhcHByb3ZlZCkgLT5cclxuXHRcdGlmIGFwcHJvdmVkIGFuZCBhcHByb3ZlZC50eXBlID09ICdjYydcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGZhbHNlXHJcblx0Z2V0QXBwcm92ZVN0YXR1c0ljb246IChhcHByb3ZlSnVkZ2UsIGF1dG9TdWJtaXR0ZWQpIC0+XHJcblx0XHRpZiBhdXRvU3VibWl0dGVkID09IHRydWVcclxuXHRcdFx0cmV0dXJuICdpb24gaW9uLWFuZHJvaWQtYWxhcm0tY2xvY2snXHJcblx0XHQj5bey57uT5p2f55qE5pi+56S65Li65qC45YeGL+mps+Wbni/lj5bmtojnlLPor7fvvIzlubbmmL7npLrlpITnkIbnirbmgIHlm77moIdcclxuXHRcdGFwcHJvdmVTdGF0dXNJY29uID0gdW5kZWZpbmVkXHJcblx0XHRzd2l0Y2ggYXBwcm92ZUp1ZGdlXHJcblx0XHRcdHdoZW4gJ2FwcHJvdmVkJ1xyXG5cdFx0XHRcdCMg5bey5qC45YeGXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1jaGVja21hcmstcm91bmQnXHJcblx0XHRcdHdoZW4gJ3JlamVjdGVkJ1xyXG5cdFx0XHRcdCMg5bey6amz5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1jbG9zZS1yb3VuZCdcclxuXHRcdFx0d2hlbiAndGVybWluYXRlZCdcclxuXHRcdFx0XHQjIOW3suWPlua2iFxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2ZhIGZhLWJhbidcclxuXHRcdFx0d2hlbiAncmVhc3NpZ25lZCdcclxuXHRcdFx0XHQjIOi9rOetvuaguFxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tYW5kcm9pZC1jb250YWN0J1xyXG5cdFx0XHR3aGVuICdyZWxvY2F0ZWQnXHJcblx0XHRcdFx0IyDph43lrprkvY1cclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWFycm93LXNocmluaydcclxuXHRcdFx0d2hlbiAncmV0cmlldmVkJ1xyXG5cdFx0XHRcdCMg5bey5Y+W5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c0ljb24gPSAnZmEgZmEtdW5kbydcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNJY29uID0gJydcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0YXBwcm92ZVN0YXR1c0ljb25cclxuXHRnZXRBcHByb3ZlU3RhdHVzVGV4dDogKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkgLT5cclxuXHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlXHJcblx0XHRcdGlmIGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbidcclxuXHRcdFx0XHRsb2NhbGUgPSBcInpoLUNOXCJcclxuXHRcdGVsc2VcclxuXHRcdFx0bG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKVxyXG5cdFx0I+W3sue7k+adn+eahOaYvuekuuS4uuaguOWHhi/pqbPlm54v5Y+W5raI55Sz6K+377yM5bm25pi+56S65aSE55CG54q25oCB5Zu+5qCHXHJcblx0XHRpZiBhdXRvU3VibWl0dGVkID09IHRydWVcclxuXHRcdFx0cmV0dXJuIFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmVfdGltZW91dF9hdXRvX3N1Ym1pdHRlZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IHVuZGVmaW5lZFxyXG5cdFx0c3dpdGNoIGFwcHJvdmVKdWRnZVxyXG5cdFx0XHR3aGVuICdhcHByb3ZlZCdcclxuXHRcdFx0XHQjIOW3suaguOWHhlxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgYXBwcm92ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZWplY3RlZCdcclxuXHRcdFx0XHQjIOW3sumps+WbnlxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVqZWN0ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICd0ZXJtaW5hdGVkJ1xyXG5cdFx0XHRcdCMg5bey5Y+W5raIXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSB0ZXJtaW5hdGVkJywge30sIGxvY2FsZSlcclxuXHRcdFx0d2hlbiAncmVhc3NpZ25lZCdcclxuXHRcdFx0XHQjIOi9rOetvuaguFxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVhc3NpZ25lZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdHdoZW4gJ3JlbG9jYXRlZCdcclxuXHRcdFx0XHQjIOmHjeWumuS9jVxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVsb2NhdGVkJywge30sIGxvY2FsZSlcclxuXHRcdFx0d2hlbiAncmV0cmlldmVkJ1xyXG5cdFx0XHRcdCMg5bey5Y+W5ZueXHJcblx0XHRcdFx0YXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZXRyaWV2ZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZXR1cm5lZCdcclxuXHRcdFx0XHQjIOW3sumAgOWbnlxyXG5cdFx0XHRcdGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmV0dXJuZWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHR3aGVuICdyZWFkZWQnXHJcblx0XHRcdFx0IyDlt7LpmIVcclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJlYWRlZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRhcHByb3ZlU3RhdHVzVGV4dCA9ICcnXHJcblx0XHRcdFx0YnJlYWtcclxuXHRcdGFwcHJvdmVTdGF0dXNUZXh0XHJcblx0XHJcblx0Z2V0QXBwcm92ZUp1ZGdlQ2xhc3M6IChhcHByb3ZlSnVkZ2UsIGF1dG9TdWJtaXR0ZWQpIC0+XHJcblx0XHRpZiBhdXRvU3VibWl0dGVkID09IHRydWVcclxuXHRcdFx0cmV0dXJuICdhdXRvU3VibWl0dGVkJ1xyXG5cdFx0cmV0dXJuIGFwcHJvdmVKdWRnZVxyXG5cclxuXHRfdDogKGtleSktPlxyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5KVxyXG5cclxuXHRteUFwcHJvdmVEZXNjcmlwdGlvbjogKGFwcHJvdmVJZCktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCdcclxuXHRcdFx0XHRteUFwcHJvdmUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpPy5teUFwcHJvdmU/LmdldCgpXHJcblx0XHRcdFx0aWYgbXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PSBhcHByb3ZlSWRcclxuXHRcdFx0XHRcdGlmICFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIilcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG15QXBwcm92ZT8uZGVzY3JpcHRpb24gfHwgXCJcIlxyXG5cdFx0XHRcdFx0cmV0dXJuIFNlc3Npb24uZ2V0KFwiaW5zdGFuY2VfbXlfYXBwcm92ZV9kZXNjcmlwdGlvblwiKVxyXG5cdGlzRm9yd2FyZDogKGFwcHJvdmVkKSAtPlxyXG5cdFx0aWYgYXBwcm92ZWQgYW5kIGFwcHJvdmVkLnR5cGUgPT0gJ2ZvcndhcmQnXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRmYWxzZVxyXG5cdHNob3dGb3J3YXJkRGVsZXRlQnV0dG9uOiAoYXBwcm92ZSkgLT5cclxuXHRcdGlmIGRiLmluc3RhbmNlcy5maW5kKGFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZSkuY291bnQoKSBpcyAwXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0aWYgYXBwcm92ZSBhbmQgYXBwcm92ZS50eXBlID09ICdmb3J3YXJkJyBhbmQgYXBwcm92ZS5mcm9tX3VzZXIgPT0gTWV0ZW9yLnVzZXJJZCgpIGFuZCAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpIGFuZCBhcHByb3ZlLmp1ZGdlIGlzbnQgJ3Rlcm1pbmF0ZWQnXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRmYWxzZVxyXG5cdG1hcmtEb3duVG9IdG1sOiAobWFya0Rvd25TdHJpbmcpLT5cclxuXHRcdGlmIG1hcmtEb3duU3RyaW5nXHJcblx0XHRcdHJlbmRlcmVyID0gbmV3IE1hcmtkb3duLlJlbmRlcmVyKCk7XHJcblx0XHRcdHJlbmRlcmVyLmxpbmsgPSAoIGhyZWYsIHRpdGxlLCB0ZXh0ICkgLT5cclxuXHRcdFx0XHRyZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nI3tocmVmfScgdGl0bGU9JyN7dGl0bGV9Jz4je3RleHR9PC9hPlwiXHJcblx0XHRcdHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge3JlbmRlcmVyOnJlbmRlcmVyfSkpXHJcblx0aXNEaXN0cmlidXRlOiAoYXBwcm92ZSkgLT5cclxuXHRcdGlmIGFwcHJvdmUgYW5kIGFwcHJvdmUudHlwZSA9PSAnZGlzdHJpYnV0ZSdcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGZhbHNlXHJcblx0c2hvd0Rpc3RyaWJ1dGVEZWxldGVCdXR0b246IChhcHByb3ZlKSAtPlxyXG5cdFx0aWYgZGIuaW5zdGFuY2VzLmZpbmQoYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlKS5jb3VudCgpIGlzIDBcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0aWYgYXBwcm92ZSBhbmQgYXBwcm92ZS50eXBlID09ICdkaXN0cmlidXRlJyBhbmQgIVNlc3Npb24uZ2V0KFwiaW5zdGFuY2VQcmludFwiKSBhbmQgYXBwcm92ZS5qdWRnZSBpc250ICd0ZXJtaW5hdGVkJyBhbmQgU3RlZWRvcy5pc0xlZ2FsVmVyc2lvbignJyxcIndvcmtmbG93LmVudGVycHJpc2VcIilcclxuXHRcdFx0IyDmtYHnqIvnrqHnkIblkZjlkozns7vnu5/nrqHnkIblkZjvvIzlj6/ku6XmiafooYzku7vkvZXmg4XlhrXkuIvnmoTmlofku7blj5bmtojliIblj5FcclxuXHRcdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogYXBwcm92ZS5pbnN0YW5jZX0sIHtmaWVsZHM6IHtmbG93OiAxLCBzcGFjZTogMX19KVxyXG5cdFx0XHRpZiBpbnMgYW5kIGlucy5mbG93IGFuZCBpbnMuc3BhY2VcclxuXHRcdFx0XHRpZiBXb3JrZmxvd01hbmFnZXIuaGFzRmxvd0FkbWluUGVybWlzc2lvbihpbnMuZmxvdywgaW5zLnNwYWNlLCBNZXRlb3IudXNlcklkKCkpXHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cclxuXHRcdFx0aWYgYXBwcm92ZS5mcm9tX3VzZXIgPT0gTWV0ZW9yLnVzZXJJZCgpXHJcblx0XHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblx0XHRmYWxzZVxyXG5cclxuXHRmaW5pc2hEYXRlU2NoZW1hOiAoKSAtPlxyXG5cdFx0aWYgU3RlZWRvcy5pc0FuZHJvaWRPcklPUygpXHJcblx0XHRcdHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKHtcclxuXHRcdFx0XHRmaW5pc2hfZGF0ZToge1xyXG5cdFx0XHRcdFx0YXV0b2Zvcm06IHtcclxuXHRcdFx0XHRcdFx0dHlwZTogXCJkYXRldGltZS1sb2NhbFwiXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0b3B0aW9uYWw6IGZhbHNlLFxyXG5cdFx0XHRcdFx0dHlwZTogRGF0ZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIG5ldyBTaW1wbGVTY2hlbWEoe1xyXG5cdFx0XHRcdGZpbmlzaF9kYXRlOiB7XHJcblx0XHRcdFx0XHRhdXRvZm9ybToge1xyXG5cdFx0XHRcdFx0XHR0eXBlOiBcImJvb3RzdHJhcC1kYXRldGltZXBpY2tlclwiXHJcblx0XHRcdFx0XHRcdHJlYWRvbmx5OiB0cnVlXHJcblx0XHRcdFx0XHRcdGRhdGVUaW1lUGlja2VyT3B0aW9uczp7XHJcblx0XHRcdFx0XHRcdFx0Zm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIixcclxuXHRcdFx0XHRcdFx0XHRpZ25vcmVSZWFkb25seTp0cnVlLFxyXG5cdFx0XHRcdFx0XHRcdGxvY2FsZTogU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKSxcclxuXHRcdFx0XHRcdFx0XHR3aWRnZXRQb3NpdGlvbmluZzp7XHJcblx0XHRcdFx0XHRcdFx0XHRob3Jpem9udGFsOiAncmlnaHQnXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0b3B0aW9uYWw6IGZhbHNlLFxyXG5cdFx0XHRcdFx0dHlwZTogRGF0ZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHJcblx0ZmluaXNoRGF0ZVZhbHVlczogKCkgLT5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZpbmlzaF9kYXRlOnRoaXMuZmluaXNoX2RhdGVcclxuXHRcdH07XHJcblxyXG5cdCMjI1xyXG4gICAgXHTmraTlh73mlbDnlKjkuo7mjqfliLbmmK/lkKbmmL7npLp0cmFjZXMgdmlld1xyXG4gICAgXHR0cnVlOiDmmL7npLp0cmFjZXMgdmlldyznrb7moLjljobnqIvmjInpkq7ngrnlh7vlkI7mmK/nm7TmjqXlrprkvY3liLB0cmFjZXMgdmlld1xyXG4gICAgXHRmYWxzZTog5LiN5pi+56S6dHJhY2VzIHZpZXfvvIznrb7moLjljobnqIvmjInpkq7ngrnlh7vlkI4s5LulTW9kYWwg5pa55byP5pi+56S6dHJhY2VzIHZpZXdcclxuXHQjIyNcclxuXHRzaG93VHJhY2VzVmlldzogKGZvcm0sIGZvcm1fdmVyc2lvbiktPlxyXG4jXHRcdHJldHVybiAhKEluc3RhbmNlTWFuYWdlci5pc1RhYmxlU3R5bGUoZm9ybSkgJiYgSW5zdGFuY2Vmb3JtVGVtcGxhdGUuaGVscGVycy5pbmNsdWRlc09waW5pb25GaWVsZChmb3JtLCBmb3JtX3ZlcnNpb24pKVxyXG5cclxuXHRcdHNob3dfbW9kYWxfdHJhY2VzX2xpc3QgPSBkYi5zcGFjZV9zZXR0aW5ncy5maW5kT25lKHtzcGFjZTogU2Vzc2lvbi5nZXQoXCJzcGFjZUlkXCIpLCBrZXk6IFwic2hvd19tb2RhbF90cmFjZXNfbGlzdFwifSk/LnZhbHVlcyB8fCBmYWxzZVxyXG5cclxuXHRcdHJldHVybiAhc2hvd19tb2RhbF90cmFjZXNfbGlzdFxyXG5cclxuXHRnZXRJbnN0YW5jZVN0YXRlVGV4dDogKGluc3RhbmNlX2lkKS0+XHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0XHRpZiBsb2NhbGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PSAnemgtY24nXHJcblx0XHRcdFx0bG9jYWxlID0gXCJ6aC1DTlwiXHJcblx0XHRlbHNlXHJcblx0XHRcdGxvY2FsZSA9IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIilcclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHtmaWVsZHM6IHtzdGF0ZTogMSwgaXNfcmVhZDogMX19KVxyXG5cdFx0aWYgbm90IGluc1xyXG5cdFx0XHRyZXR1cm4gVEFQaTE4bi5fXygnaW5zdGFuY2VfZGVsZXRlZCcsIHt9LCBsb2NhbGUpXHJcblxyXG5cdFx0dGV4dCA9ICcnXHJcblx0XHRpZiBpbnMuc3RhdGUgaXMgJ2NvbXBsZXRlZCdcclxuXHRcdFx0dGV4dCA9IFRBUGkxOG4uX18oJ2NvbXBsZXRlZCcsIHt9LCBsb2NhbGUpXHJcblx0XHRlbHNlIGlmIGlucy5zdGF0ZSBpcyAncGVuZGluZydcclxuXHRcdFx0dGV4dCA9IFRBUGkxOG4uX18oJ3BlbmRpbmcnLCB7fSwgbG9jYWxlKVxyXG5cdFx0ZWxzZSBpZiBpbnMuc3RhdGUgaXMgJ2RyYWZ0J1xyXG5cdFx0XHRpZiBpbnMuaXNfcmVhZFxyXG5cdFx0XHRcdHRleHQgPSBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX3JlYWQnLCB7fSwgbG9jYWxlKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGV4dCA9IFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmVfbm90X3lldF9oYW5kbGVkJywge30sIGxvY2FsZSlcclxuXHJcblx0XHRyZXR1cm4gdGV4dFxyXG5cclxuXHRnZXRJbnN0YW5jZVN0YXRlQ29sb3I6IChpbnN0YW5jZV9pZCktPlxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VfaWR9LCB7ZmllbGRzOiB7c3RhdGU6IDEsIGlzX3JlYWQ6IDF9fSlcclxuXHRcdGlmIG5vdCBpbnNcclxuXHRcdFx0cmV0dXJuIFwiXCJcclxuXHJcblx0XHRjbGEgPSAnJ1xyXG5cdFx0aWYgaW5zLnN0YXRlIGlzICdkcmFmdCdcclxuXHRcdFx0aWYgaW5zLmlzX3JlYWRcclxuXHRcdFx0XHRjbGEgPSAnYmx1ZSdcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGNsYSA9ICdyZWQnXHJcblx0XHRyZXR1cm4gY2xhXHJcblxyXG5cdGZpcnN0VHJhY2U6IChpbmRleCktPlxyXG5cdFx0cmV0dXJuIGluZGV4IGlzIDBcclxuXHJcblx0bGFzdF9kaXN0cmlidXRlX2Zyb206IChpbnN0YW5jZV9pZCktPlxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VfaWQsIGRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZTogeyRleGlzdHM6IHRydWV9fSx7ZmllbGRzOntjcmVhdGVkOiAxLCBjcmVhdGVkX2J5OiAxfX0pXHJcblx0XHRpZiBpbnNcclxuXHRcdFx0ZGlzX2luZm8gPSB7fVxyXG5cdFx0XHR1c2VyID0ge31cclxuXHRcdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdFx0dXNlciA9IFVVZmxvd19hcGkuZ2V0TmFtZUZvclVzZXIoaW5zLmNyZWF0ZWRfYnkpXHJcblx0XHRcdGVsc2UgaWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdFx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoe19pZDogaW5zLmNyZWF0ZWRfYnl9LCB7ZmllbGRzOiB7bmFtZTogMX19KVxyXG5cclxuXHRcdFx0aWYgdXNlci5uYW1lXHJcblx0XHRcdFx0ZGlzX2luZm8uZnJvbV91c2VyID0gdXNlci5faWRcclxuXHRcdFx0XHRkaXNfaW5mby5mcm9tX3VzZXJfbmFtZSA9IHVzZXIubmFtZVxyXG5cdFx0XHRcdGRpc19pbmZvLmNyZWF0ZWQgPSBpbnMuY3JlYXRlZFxyXG5cclxuXHRcdFx0aWYgbm90IF8uaXNFbXB0eShkaXNfaW5mbylcclxuXHRcdFx0XHRyZXR1cm4gZGlzX2luZm9cclxuXHRcdHJldHVyblxyXG5cclxuXHRpc0NDT3JEaXN0cmlidXRlT3JGb3J3YXJkVGVybWluYXRlZDogKGFwcHJvdmUpLT5cclxuXHRcdGlmIChhcHByb3ZlLnR5cGUgaXMgJ2NjJyBvciBhcHByb3ZlLnR5cGUgaXMgJ2Rpc3RyaWJ1dGUnIG9yIGFwcHJvdmUudHlwZSBpcyAnZm9yd2FyZCcpIGFuZCBhcHByb3ZlLmp1ZGdlIGlzICd0ZXJtaW5hdGVkJ1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5cdGp1ZGdlVGVybWluYXRlZDogKGp1ZGdlKS0+XHJcblx0XHRyZXR1cm4ganVkZ2UgaXMgJ3Rlcm1pbmF0ZWQnXHJcblxyXG5cdGluc3RhbmNlRXhpc3RzOiAoaW5zdGFuY2VfaWQpLT5cclxuXHRcdHJldHVybiAhIWRiLmluc3RhbmNlcy5maW5kKGluc3RhbmNlX2lkKS5jb3VudCgpXHJcblxyXG5cdGFnZW50RGVzY3JpcHRpb246ICh1c2VyTmFtZSktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzU2VydmVyXHJcblx0XHRcdGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGVcclxuXHRcdFx0aWYgbG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJ3poLWNuJ1xyXG5cdFx0XHRcdGxvY2FsZSA9IFwiemgtQ05cIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpXHJcblxyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHt1c2VyTmFtZTogdXNlck5hbWV9LCBsb2NhbGUpXHJcblx0XHJcblx0dHJhY2VOYW1lOiAoaW5zdGFuY2VfaWQsIHRyYWNlSWQpLT5cclxuXHRcdHJldHVybiBfLmZpbmQoZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQsIHtmaWVsZHM6IHt0cmFjZXM6IDF9fSk/LnRyYWNlcywgKHRyYWNlKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJhY2UuX2lkID09ICB0cmFjZUlkXHJcblx0XHQpPy5uYW1lXHJcblxyXG5pZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLmRhdGVGb3JtYXQgPSAoZGF0ZSktPlxyXG5cdFx0aWYgZGF0ZVxyXG5cdFx0XHR1dGNPZmZzZXQgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEudXRjT2Zmc2V0XHJcblx0XHRcdHJldHVybiBJbnN0YW5jZVJlYWRPbmx5VGVtcGxhdGUuZm9ybWF0RGF0ZShkYXRlLCB1dGNPZmZzZXQpO1xyXG5cclxuXHRUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLl90ID0gKGtleSktPlxyXG5cdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0cmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKVxyXG5cclxuXHRUcmFjZXNUZW1wbGF0ZS5oZWxwZXJzLnNob3dEZWxldGVCdXR0b24gPSAoYXBwcm92ZWQpIC0+XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5UcmFjZXNUZW1wbGF0ZS5ldmVudHMgPVxyXG5cdCdjbGljayAuY2MtYXBwcm92ZS1yZW1vdmUnOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuXHRcdGlmIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYWxsaW5nICogMSAhPSAxXHJcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYWxsaW5nID0gMVxyXG5cdFx0XHQkKFwiaVwiLGV2ZW50LmN1cnJlbnRUYXJnZXQpLmFkZENsYXNzKFwiZmEtc3BpblwiKVxyXG5cdFx0XHRpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKVxyXG5cdFx0XHRhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlXHJcblx0XHRcdCMgQ0FMTCDliKDpmaRhcHByb3Zl5Ye95pWw44CCXHJcblx0XHRcdCQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0XHRNZXRlb3IuY2FsbCAnY2NfcmVtb3ZlJywgaW5zdGFuY2VJZCwgYXBwcm92ZUlkLCAoZXJyLCByZXN1bHQpIC0+XHJcblx0XHRcdFx0JChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRcdFx0aWYgZXJyXHJcblx0XHRcdFx0XHR0b2FzdHIuZXJyb3IgZXJyXHJcblx0XHRcdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY2FsbGluZyA9IDBcclxuXHRcdFx0XHRcdCQoXCJpXCIsZXZlbnQuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoXCJmYS1zcGluXCIpXHJcblx0XHRcdFx0aWYgcmVzdWx0ID09IHRydWVcclxuXHRcdFx0XHRcdHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJyZW1vdmVfY2NfYXBwcm92ZVwiKSk7XHJcblx0XHRcdFx0XHRpZiAkKFwiLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbFwiKS5sZW5ndGhcclxuXHRcdFx0XHRcdFx0TW9kYWwuaGlkZSBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiXHJcblx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHQnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWNjLWFwcHJvdmUtcmVtb3ZlJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpXHJcblx0XHRhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlXHJcblx0XHQjIENBTEwg5Yig6ZmkYXBwcm92ZeWHveaVsOOAglxyXG5cdFx0JChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRNZXRlb3IuY2FsbCAnY2NfcmVtb3ZlJywgaW5zdGFuY2VJZCwgYXBwcm92ZUlkLCAoZXJyLCByZXN1bHQpIC0+XHJcblx0XHRcdCQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibG9hZGluZ1wiKVxyXG5cdFx0XHRpZiBlcnJcclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IgZXJyXHJcblx0XHRcdGlmIHJlc3VsdCA9PSB0cnVlXHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcInJlbW92ZV9jY19hcHByb3ZlXCIpKTtcclxuXHRcdFx0XHRNb2RhbC5oaWRlIFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCJcclxuXHRcdFx0cmV0dXJuXHJcblx0XHRyZXR1cm5cclxuXHJcblx0J2NsaWNrIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyBQQ+S4iumTvuaOpeWFgeiuuOebtOaOpeeCueW8gO+8jOS4jeWGjeaJk+W8gOetvuaJueWOhueoi+ivpue7hlxyXG5cdFx0dW5sZXNzICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiYS5idG4tbGlua1wiKS5sZW5ndGhcclxuXHRcdFx0TW9kYWwuc2hvdyBcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiLCB0aGlzXHJcblxyXG5cdCd0YXBob2xkIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyDmiYvmnLrkuIrplb/mjInmiZPlvIDnrb7mibnljobnqIvor6bnu4bvvIzlpoLmnpzmmK/pk77mjqXplb/mjInmiZPlvIDlkI7kuIDmlL7miYvnqpflj6PlsLHlj4jlhbPmjonkuobvvIzmiYDku6XkuI3orqnpk77mjqXmiZPlvIDnrb7mibnljobnqIvor6bnu4ZcclxuXHRcdHVubGVzcyAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcImEuYnRuLWxpbmtcIikubGVuZ3RoXHJcblx0XHRcdE1vZGFsLnNob3cgXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIiwgdGhpc1xyXG5cclxuXHQnY2xpY2sgLmFwcHJvdmUtaXRlbSBhLmJ0bi1saW5rLC5hcHByb3ZlLWRlc2NyaXB0aW9uIGEuYnRuLWxpbmssLmFwcHJvdmUtaXRlbS1kaXN0cmlidXRlIGEuYnRuLWxpbmsnOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyDmiYvmnLrkuIrngrnlh7vpk77mjqXvvIzlvLnlh7rmlrDnqpflj6NcclxuXHRcdGlmIFN0ZWVkb3MuaXNNb2JpbGUoKVxyXG5cdFx0XHR1c2VySWQgPSBldmVudC50YXJnZXQuZGF0YXNldD8udGFyZ2V0X3VzZXJfaWRcclxuXHRcdFx0Q3JlYXRvci5vcGVuU2FmZU9iamVjdFVybCgndXNlcnMnLCB1c2VySWQpXHJcblxyXG5cdCd0YXBlbmQgLmFwcHJvdmUtaXRlbSwuYXBwcm92ZS1kZXNjcmlwdGlvbic6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblx0XHQjIOS4iui/sOmVv+aMieaJk+W8gGFwcHJvdmXor6bnu4bnqpflj6PnmoTkuovku7Z0YXBob2xk5Lya6Kem5Y+R5omT5byA56qX5Y+j5ZCO55qEdG91Y2hlbmTkuovku7bvvIzpgKDmiJDplb/mjInmiZPlvIDnqpflj6PlkI7kuIDmlL7miYvnqpflj6PlsLHlj4jlhbPmjonkuoZcclxuXHRcdCMg6L+Z6YeM5Y+q6IO96YCa6L+H6Zi75q2idGFwZW5k5LqL5Lu2KOS4jeWPr+S7peeUqHRvdWNoZW5k5LqL5Lu277yM5Zug5Li65Lya5b2x5ZONdGFwaG9sZOWKn+iDve+8jOmAoOaIkOayoeaciemVv+aMieaViOaenOaXtuS5n+S8muinpuWPkXRhcGhvbGTkuovku7Yp5YaS5rOh5p2l6YG/5YWN6Zeu6aKY44CCXHJcblx0XHQjIOmTvuaOpeWFgeiuuOebtOaOpeeCueW8gFxyXG5cdFx0dW5sZXNzICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiYS5idG4tbGlua1wiKS5sZW5ndGhcclxuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0J2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1mb3J3YXJkLWFwcHJvdmUtcmVtb3ZlJzogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdGluc3RhbmNlSWQgPSBTZXNzaW9uLmdldCgnaW5zdGFuY2VJZCcpXHJcblx0XHRhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlXHJcblx0XHR0cmFjZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQudHJhY2VcclxuXHRcdCMgQ0FMTCDliKDpmaRhcHByb3Zl5Ye95pWw44CCXHJcblx0XHQkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIilcclxuXHRcdE1ldGVvci5jYWxsICdmb3J3YXJkX3JlbW92ZScsIGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgKGVyciwgcmVzdWx0KSAtPlxyXG5cdFx0XHQkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImxvYWRpbmdcIilcclxuXHRcdFx0aWYgZXJyXHJcblx0XHRcdFx0dG9hc3RyLmVycm9yIFRBUGkxOG4uX18oZXJyLnJlYXNvbilcclxuXHRcdFx0aWYgcmVzdWx0ID09IHRydWVcclxuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcyhUQVBpMThuLl9fKFwiaW5zdGFuY2VfYXBwcm92ZV9mb3J3YXJkX3JlbW92ZV9zdWNjZXNzXCIpKTtcclxuXHRcdFx0XHRNb2RhbC5oaWRlIFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCJcclxuXHRcdFx0cmV0dXJuXHJcblx0XHRyZXR1cm5cclxuXHJcblx0J2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1mb3J3YXJkLWluc3RhbmNlLWxvb2snOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0Zm9yd2FyZF9zcGFjZSA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmZvcndhcmRzcGFjZVxyXG5cdFx0Zm9yd2FyZF9pbnN0YW5jZSA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmZvcndhcmRpbnN0YW5jZVxyXG5cdFx0U3RlZWRvcy5vcGVuV2luZG93KFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGZvcndhcmRfc3BhY2UgKyBcIi92aWV3L3JlYWRvbmx5L1wiICsgZm9yd2FyZF9pbnN0YW5jZSkpXHJcblxyXG5cdCdjbGljayAuYnRuLW1vZGlmaWNhdGlvbidcdDogKGV2ZW50LCB0ZW1wbGF0ZSkgLT5cclxuXHRcdHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKTtcclxuXHRcdHVubGVzcyBTdGVlZG9zLmlzQW5kcm9pZE9ySU9TKClcclxuXHRcdFx0VHJhY2tlci5hZnRlckZsdXNoIC0+XHJcblx0XHRcdFx0IyDmmL7npLrml6Xlv5fnmoTml7blgJnmiormu5rliqjmnaHlvoDkuIvnp7vngrnvvIzorqnml6XmnJ/mjqfku7bmmL7npLrlh7rkuIDpg6jliIbvvIzku6Xpgb/lhY3nlKjmiLfnnIvkuI3liLDml6XmnJ/mjqfku7ZcclxuXHRcdFx0XHQkKFwiI2luc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbCAjZmluaXNoX2lucHV0XCIpLm9uIFwiZHAuc2hvd1wiLCAoKSAtPlxyXG5cdFx0XHRcdFx0JChcIi5tb2RhbC1ib2R5XCIpLnNjcm9sbFRvcCgxMDApXHJcblxyXG5cdCdjbGljayAuYnRuLWNhbmNlbEJ1dCcgOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cclxuXHRcdHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKTtcclxuXHJcblx0J2NsaWNrIC5idG4tc2F2ZUJ1dCcgOiAoZXZlbnQsIHRlbXBsYXRlKSAtPlxyXG5cdFx0IyB0ZW1wbGF0ZS5pc19lZGl0aW5nLnNldCghdGVtcGxhdGUuaXNfZWRpdGluZy5nZXQoKSlcclxuXHJcblx0XHRpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKVxyXG5cdFx0YXBwcm92ZUlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuYXBwcm92ZVxyXG5cdFx0dHJhY2VJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LnRyYWNlXHJcblx0XHRvcGluaW9uX2lucHV0ID0gJCgnI29waW5pb25faW5wdXQnKS52YWwoKVxyXG5cdFx0ZmluaXNoX2lucHV0ID0gQXV0b0Zvcm0uZ2V0RmllbGRWYWx1ZShcImZpbmlzaF9kYXRlXCIsIFwiZmluaXNoRGF0ZUF1dG9Gb3JtXCIpXHJcblxyXG5cdFx0JChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRNZXRlb3IuY2FsbCAnY2hhbmdlX2FwcHJvdmVfaW5mbycsIGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgb3Bpbmlvbl9pbnB1dCwgZmluaXNoX2lucHV0LCAoZXJyLCByZXN1bHQpLT5cclxuXHRcdFx0JChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpXHJcblx0XHRcdGlmIGVyclxyXG5cdFx0XHRcdHRvYXN0ci5lcnJvciBUQVBpMThuLl9fKGVyci5yZWFzb24pXHJcblx0XHRcdGlmIHJlc3VsdCA9PSB0cnVlXHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3ModChcImluc3RhbmNlX2FwcHJvdmVfbW9kYWxfbW9kaWZpY2F0aW9uc2F2ZVwiKSlcclxuXHRcdFx0XHRNb2RhbC5oaWRlIFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCJcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdCdjbGljayAuaW5zdGFuY2UtdHJhY2UtZGV0YWlsLW1vZGFsIC5idG4tZGlzdHJpYnV0ZS1hcHByb3ZlLXJlbW92ZSc6IChldmVudCwgdGVtcGxhdGUpIC0+XHJcblx0XHRNb2RhbC5hbGxvd011bHRpcGxlID0gdHJ1ZVxyXG5cdFx0TW9kYWwuc2hvdyAnY2FuY2VsX2Rpc3RyaWJ1dGVfbW9kYWwnXHJcbiIsIlRyYWNlc1RlbXBsYXRlLmhlbHBlcnMgPSB7XG4gIGVxdWFsczogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oYSkge1xuICAgIGlmIChhKSB7XG4gICAgICByZXR1cm4gYS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggPCAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIHVuZW1wdHk6IGZ1bmN0aW9uKGEpIHtcbiAgICBpZiAoYSkge1xuICAgICAgcmV0dXJuIGEudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgYXBwZW5kOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgKyBiO1xuICB9LFxuICBkYXRlRm9ybWF0OiBmdW5jdGlvbihkYXRlKSB7XG4gICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSAmJiAoZGF0ZSAhPSBudWxsID8gZGF0ZS5nZXRGdWxsWWVhcigpIDogdm9pZCAwKSA9PT0gKG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICByZXR1cm4gJC5mb3JtYXQuZGF0ZShuZXcgRGF0ZShkYXRlKSwgXCJNTS1kZCBISDptbVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQuZm9ybWF0LmRhdGUobmV3IERhdGUoZGF0ZSksIFwieXl5eS1NTS1kZCBISDptbVwiKTtcbiAgICB9XG4gIH0sXG4gIGdldFN0ZXBOYW1lOiBmdW5jdGlvbihzdGVwSWQpIHtcbiAgICB2YXIgc3RlcDtcbiAgICBzdGVwID0gV29ya2Zsb3dNYW5hZ2VyLmdldEluc3RhbmNlU3RlcChzdGVwSWQpO1xuICAgIGlmIChzdGVwKSB7XG4gICAgICByZXR1cm4gc3RlcC5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgc2hvd0RlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICBpZiAoYXBwcm92ZWQgJiYgYXBwcm92ZWQudHlwZSA9PT0gJ2NjJyAmJiBhcHByb3ZlZC5mcm9tX3VzZXIgPT09IE1ldGVvci51c2VySWQoKSAmJiBhcHByb3ZlZC5pc19maW5pc2hlZCAhPT0gdHJ1ZSAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc1Nob3dNb2RpZmljYXRpb25CdXR0b246IGZ1bmN0aW9uKGFwcHJvdmVkKSB7XG4gICAgdmFyIGFwcHJvdmVfYWRtaW5zLCBpc1Nob3csIHJlZiwgcmVmMSwgcmVmMjtcbiAgICBhcHByb3ZlX2FkbWlucyA9IChyZWYgPSBNZXRlb3Iuc2V0dGluZ3MpICE9IG51bGwgPyAocmVmMSA9IHJlZltcInB1YmxpY1wiXSkgIT0gbnVsbCA/IChyZWYyID0gcmVmMS53b3JrZmxvdykgIT0gbnVsbCA/IHJlZjIuYXBwcm92ZV9hZG1pbnMgOiB2b2lkIDAgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKGFwcHJvdmVfYWRtaW5zICE9IG51bGwgPyBhcHByb3ZlX2FkbWlucy5sZW5ndGggOiB2b2lkIDApIHtcbiAgICAgIGlzU2hvdyA9IGFwcHJvdmVfYWRtaW5zICE9IG51bGwgPyBhcHByb3ZlX2FkbWlucy5jb250YWlucyhNZXRlb3IudXNlcklkKCkpIDogdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoIWlzU2hvdykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZWQuaGFuZGxlciA9PT0gTWV0ZW9yLnVzZXJJZCgpO1xuICB9LFxuICBpc0VkaXRpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWY7XG4gICAgcmV0dXJuIChyZWYgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLmlzX2VkaXRpbmcpICE9IG51bGwgPyByZWYuZ2V0KCkgOiB2b2lkIDA7XG4gIH0sXG4gIGlzU2hvd0Rlc2NyaXB0aW9uOiBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIHZhciByZWY7XG4gICAgaWYgKFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMuaXNTaG93TW9kaWZpY2F0aW9uQnV0dG9uKGFwcHJvdmVkKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAoKHJlZiA9IGFwcHJvdmVkLmRlc2NyaXB0aW9uKSAhPSBudWxsID8gcmVmLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA6IHZvaWQgMCkgPiAwO1xuICB9LFxuICBpc0NDOiBmdW5jdGlvbihhcHByb3ZlZCkge1xuICAgIGlmIChhcHByb3ZlZCAmJiBhcHByb3ZlZC50eXBlID09PSAnY2MnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBnZXRBcHByb3ZlU3RhdHVzSWNvbjogZnVuY3Rpb24oYXBwcm92ZUp1ZGdlLCBhdXRvU3VibWl0dGVkKSB7XG4gICAgdmFyIGFwcHJvdmVTdGF0dXNJY29uO1xuICAgIGlmIChhdXRvU3VibWl0dGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gJ2lvbiBpb24tYW5kcm9pZC1hbGFybS1jbG9jayc7XG4gICAgfVxuICAgIGFwcHJvdmVTdGF0dXNJY29uID0gdm9pZCAwO1xuICAgIHN3aXRjaCAoYXBwcm92ZUp1ZGdlKSB7XG4gICAgICBjYXNlICdhcHByb3ZlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tY2hlY2ttYXJrLXJvdW5kJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWplY3RlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2lvbiBpb24tY2xvc2Utcm91bmQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Rlcm1pbmF0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdmYSBmYS1iYW4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlYXNzaWduZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzSWNvbiA9ICdpb24gaW9uLWFuZHJvaWQtY29udGFjdCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVsb2NhdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c0ljb24gPSAnaW9uIGlvbi1hcnJvdy1zaHJpbmsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JldHJpZXZlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJ2ZhIGZhLXVuZG8nO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNJY29uID0gJyc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZVN0YXR1c0ljb247XG4gIH0sXG4gIGdldEFwcHJvdmVTdGF0dXNUZXh0OiBmdW5jdGlvbihhcHByb3ZlSnVkZ2UsIGF1dG9TdWJtaXR0ZWQpIHtcbiAgICB2YXIgYXBwcm92ZVN0YXR1c1RleHQsIGxvY2FsZTtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgICAgaWYgKGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnemgtY24nKSB7XG4gICAgICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKTtcbiAgICB9XG4gICAgaWYgKGF1dG9TdWJtaXR0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBUQVBpMThuLl9fKCdpbnN0YW5jZV9hcHByb3ZlX3RpbWVvdXRfYXV0b19zdWJtaXR0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICB9XG4gICAgYXBwcm92ZVN0YXR1c1RleHQgPSB2b2lkIDA7XG4gICAgc3dpdGNoIChhcHByb3ZlSnVkZ2UpIHtcbiAgICAgIGNhc2UgJ2FwcHJvdmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSBhcHByb3ZlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlamVjdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWplY3RlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Rlcm1pbmF0ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHRlcm1pbmF0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWFzc2lnbmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWFzc2lnbmVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVsb2NhdGVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZWxvY2F0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXRyaWV2ZWQnOlxuICAgICAgICBhcHByb3ZlU3RhdHVzVGV4dCA9IFRBUGkxOG4uX18oJ0luc3RhbmNlIFN0YXRlIHJldHJpZXZlZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JldHVybmVkJzpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSBUQVBpMThuLl9fKCdJbnN0YW5jZSBTdGF0ZSByZXR1cm5lZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlYWRlZCc6XG4gICAgICAgIGFwcHJvdmVTdGF0dXNUZXh0ID0gVEFQaTE4bi5fXygnSW5zdGFuY2UgU3RhdGUgcmVhZGVkJywge30sIGxvY2FsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXBwcm92ZVN0YXR1c1RleHQgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhcHByb3ZlU3RhdHVzVGV4dDtcbiAgfSxcbiAgZ2V0QXBwcm92ZUp1ZGdlQ2xhc3M6IGZ1bmN0aW9uKGFwcHJvdmVKdWRnZSwgYXV0b1N1Ym1pdHRlZCkge1xuICAgIGlmIChhdXRvU3VibWl0dGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gJ2F1dG9TdWJtaXR0ZWQnO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcm92ZUp1ZGdlO1xuICB9LFxuICBfdDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5KTtcbiAgfSxcbiAgbXlBcHByb3ZlRGVzY3JpcHRpb246IGZ1bmN0aW9uKGFwcHJvdmVJZCkge1xuICAgIHZhciBteUFwcHJvdmUsIHJlZiwgcmVmMTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgbXlBcHByb3ZlID0gKHJlZiA9IFRlbXBsYXRlLmluc3RhbmNlKCkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5teUFwcHJvdmUpICE9IG51bGwgPyByZWYxLmdldCgpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAobXlBcHByb3ZlICYmIG15QXBwcm92ZS5pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgaWYgKCFTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiAobXlBcHByb3ZlICE9IG51bGwgPyBteUFwcHJvdmUuZGVzY3JpcHRpb24gOiB2b2lkIDApIHx8IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBTZXNzaW9uLmdldChcImluc3RhbmNlX215X2FwcHJvdmVfZGVzY3JpcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzRm9yd2FyZDogZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICBpZiAoYXBwcm92ZWQgJiYgYXBwcm92ZWQudHlwZSA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzaG93Rm9yd2FyZERlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChkYi5pbnN0YW5jZXMuZmluZChhcHByb3ZlLmZvcndhcmRfaW5zdGFuY2UpLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFwcHJvdmUgJiYgYXBwcm92ZS50eXBlID09PSAnZm9yd2FyZCcgJiYgYXBwcm92ZS5mcm9tX3VzZXIgPT09IE1ldGVvci51c2VySWQoKSAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpICYmIGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgbWFya0Rvd25Ub0h0bWw6IGZ1bmN0aW9uKG1hcmtEb3duU3RyaW5nKSB7XG4gICAgdmFyIHJlbmRlcmVyO1xuICAgIGlmIChtYXJrRG93blN0cmluZykge1xuICAgICAgcmVuZGVyZXIgPSBuZXcgTWFya2Rvd24uUmVuZGVyZXIoKTtcbiAgICAgIHJlbmRlcmVyLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gXCI8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIgKyBocmVmICsgXCInIHRpdGxlPSdcIiArIHRpdGxlICsgXCInPlwiICsgdGV4dCArIFwiPC9hPlwiO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTcGFjZWJhcnMuU2FmZVN0cmluZyhNYXJrZG93bihtYXJrRG93blN0cmluZywge1xuICAgICAgICByZW5kZXJlcjogcmVuZGVyZXJcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sXG4gIGlzRGlzdHJpYnV0ZTogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIGlmIChhcHByb3ZlICYmIGFwcHJvdmUudHlwZSA9PT0gJ2Rpc3RyaWJ1dGUnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzaG93RGlzdHJpYnV0ZURlbGV0ZUJ1dHRvbjogZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgIHZhciBpbnM7XG4gICAgaWYgKGRiLmluc3RhbmNlcy5maW5kKGFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYXBwcm92ZSAmJiBhcHByb3ZlLnR5cGUgPT09ICdkaXN0cmlidXRlJyAmJiAhU2Vzc2lvbi5nZXQoXCJpbnN0YW5jZVByaW50XCIpICYmIGFwcHJvdmUuanVkZ2UgIT09ICd0ZXJtaW5hdGVkJyAmJiBTdGVlZG9zLmlzTGVnYWxWZXJzaW9uKCcnLCBcIndvcmtmbG93LmVudGVycHJpc2VcIikpIHtcbiAgICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBhcHByb3ZlLmluc3RhbmNlXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGZsb3c6IDEsXG4gICAgICAgICAgc3BhY2U6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoaW5zICYmIGlucy5mbG93ICYmIGlucy5zcGFjZSkge1xuICAgICAgICBpZiAoV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgTWV0ZW9yLnVzZXJJZCgpKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXBwcm92ZS5mcm9tX3VzZXIgPT09IE1ldGVvci51c2VySWQoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBmaW5pc2hEYXRlU2NoZW1hOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoU3RlZWRvcy5pc0FuZHJvaWRPcklPUygpKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXBsZVNjaGVtYSh7XG4gICAgICAgIGZpbmlzaF9kYXRlOiB7XG4gICAgICAgICAgYXV0b2Zvcm06IHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGF0ZXRpbWUtbG9jYWxcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICAgIHR5cGU6IERhdGVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlU2NoZW1hKHtcbiAgICAgICAgZmluaXNoX2RhdGU6IHtcbiAgICAgICAgICBhdXRvZm9ybToge1xuICAgICAgICAgICAgdHlwZTogXCJib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcIixcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGF0ZVRpbWVQaWNrZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgIGZvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCIsXG4gICAgICAgICAgICAgIGlnbm9yZVJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgICBsb2NhbGU6IFNlc3Npb24uZ2V0KFwiVEFQaTE4bjo6bG9hZGVkX2xhbmdcIiksXG4gICAgICAgICAgICAgIHdpZGdldFBvc2l0aW9uaW5nOiB7XG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgICAgdHlwZTogRGF0ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGZpbmlzaERhdGVWYWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaW5pc2hfZGF0ZTogdGhpcy5maW5pc2hfZGF0ZVxuICAgIH07XG4gIH0sXG5cbiAgLypcbiAgICAgXHTmraTlh73mlbDnlKjkuo7mjqfliLbmmK/lkKbmmL7npLp0cmFjZXMgdmlld1xuICAgICBcdHRydWU6IOaYvuekunRyYWNlcyB2aWV3LOetvuaguOWOhueoi+aMiemSrueCueWHu+WQjuaYr+ebtOaOpeWumuS9jeWIsHRyYWNlcyB2aWV3XG4gICAgIFx0ZmFsc2U6IOS4jeaYvuekunRyYWNlcyB2aWV377yM562+5qC45Y6G56iL5oyJ6ZKu54K55Ye75ZCOLOS7pU1vZGFsIOaWueW8j+aYvuekunRyYWNlcyB2aWV3XG4gICAqL1xuICBzaG93VHJhY2VzVmlldzogZnVuY3Rpb24oZm9ybSwgZm9ybV92ZXJzaW9uKSB7XG4gICAgdmFyIHJlZiwgc2hvd19tb2RhbF90cmFjZXNfbGlzdDtcbiAgICBzaG93X21vZGFsX3RyYWNlc19saXN0ID0gKChyZWYgPSBkYi5zcGFjZV9zZXR0aW5ncy5maW5kT25lKHtcbiAgICAgIHNwYWNlOiBTZXNzaW9uLmdldChcInNwYWNlSWRcIiksXG4gICAgICBrZXk6IFwic2hvd19tb2RhbF90cmFjZXNfbGlzdFwiXG4gICAgfSkpICE9IG51bGwgPyByZWYudmFsdWVzIDogdm9pZCAwKSB8fCBmYWxzZTtcbiAgICByZXR1cm4gIXNob3dfbW9kYWxfdHJhY2VzX2xpc3Q7XG4gIH0sXG4gIGdldEluc3RhbmNlU3RhdGVUZXh0OiBmdW5jdGlvbihpbnN0YW5jZV9pZCkge1xuICAgIHZhciBpbnMsIGxvY2FsZSwgdGV4dDtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgICAgaWYgKGxvY2FsZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSAnemgtY24nKSB7XG4gICAgICAgIGxvY2FsZSA9IFwiemgtQ05cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxlID0gU2Vzc2lvbi5nZXQoXCJUQVBpMThuOjpsb2FkZWRfbGFuZ1wiKTtcbiAgICB9XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgaXNfcmVhZDogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghaW5zKSB7XG4gICAgICByZXR1cm4gVEFQaTE4bi5fXygnaW5zdGFuY2VfZGVsZXRlZCcsIHt9LCBsb2NhbGUpO1xuICAgIH1cbiAgICB0ZXh0ID0gJyc7XG4gICAgaWYgKGlucy5zdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgIHRleHQgPSBUQVBpMThuLl9fKCdjb21wbGV0ZWQnLCB7fSwgbG9jYWxlKTtcbiAgICB9IGVsc2UgaWYgKGlucy5zdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XG4gICAgICB0ZXh0ID0gVEFQaTE4bi5fXygncGVuZGluZycsIHt9LCBsb2NhbGUpO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnZHJhZnQnKSB7XG4gICAgICBpZiAoaW5zLmlzX3JlYWQpIHtcbiAgICAgICAgdGV4dCA9IFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmVfcmVhZCcsIHt9LCBsb2NhbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IFRBUGkxOG4uX18oJ2luc3RhbmNlX2FwcHJvdmVfbm90X3lldF9oYW5kbGVkJywge30sIGxvY2FsZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9LFxuICBnZXRJbnN0YW5jZVN0YXRlQ29sb3I6IGZ1bmN0aW9uKGluc3RhbmNlX2lkKSB7XG4gICAgdmFyIGNsYSwgaW5zO1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGlzX3JlYWQ6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWlucykge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNsYSA9ICcnO1xuICAgIGlmIChpbnMuc3RhdGUgPT09ICdkcmFmdCcpIHtcbiAgICAgIGlmIChpbnMuaXNfcmVhZCkge1xuICAgICAgICBjbGEgPSAnYmx1ZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGEgPSAncmVkJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsYTtcbiAgfSxcbiAgZmlyc3RUcmFjZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IDA7XG4gIH0sXG4gIGxhc3RfZGlzdHJpYnV0ZV9mcm9tOiBmdW5jdGlvbihpbnN0YW5jZV9pZCkge1xuICAgIHZhciBkaXNfaW5mbywgaW5zLCB1c2VyO1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWQsXG4gICAgICBkaXN0cmlidXRlX2Zyb21faW5zdGFuY2U6IHtcbiAgICAgICAgJGV4aXN0czogdHJ1ZVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBjcmVhdGVkOiAxLFxuICAgICAgICBjcmVhdGVkX2J5OiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlucykge1xuICAgICAgZGlzX2luZm8gPSB7fTtcbiAgICAgIHVzZXIgPSB7fTtcbiAgICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgICAgdXNlciA9IFVVZmxvd19hcGkuZ2V0TmFtZUZvclVzZXIoaW5zLmNyZWF0ZWRfYnkpO1xuICAgICAgfSBlbHNlIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgICAgdXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIF9pZDogaW5zLmNyZWF0ZWRfYnlcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5uYW1lKSB7XG4gICAgICAgIGRpc19pbmZvLmZyb21fdXNlciA9IHVzZXIuX2lkO1xuICAgICAgICBkaXNfaW5mby5mcm9tX3VzZXJfbmFtZSA9IHVzZXIubmFtZTtcbiAgICAgICAgZGlzX2luZm8uY3JlYXRlZCA9IGlucy5jcmVhdGVkO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzRW1wdHkoZGlzX2luZm8pKSB7XG4gICAgICAgIHJldHVybiBkaXNfaW5mbztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzQ0NPckRpc3RyaWJ1dGVPckZvcndhcmRUZXJtaW5hdGVkOiBmdW5jdGlvbihhcHByb3ZlKSB7XG4gICAgaWYgKChhcHByb3ZlLnR5cGUgPT09ICdjYycgfHwgYXBwcm92ZS50eXBlID09PSAnZGlzdHJpYnV0ZScgfHwgYXBwcm92ZS50eXBlID09PSAnZm9yd2FyZCcpICYmIGFwcHJvdmUuanVkZ2UgPT09ICd0ZXJtaW5hdGVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAganVkZ2VUZXJtaW5hdGVkOiBmdW5jdGlvbihqdWRnZSkge1xuICAgIHJldHVybiBqdWRnZSA9PT0gJ3Rlcm1pbmF0ZWQnO1xuICB9LFxuICBpbnN0YW5jZUV4aXN0czogZnVuY3Rpb24oaW5zdGFuY2VfaWQpIHtcbiAgICByZXR1cm4gISFkYi5pbnN0YW5jZXMuZmluZChpbnN0YW5jZV9pZCkuY291bnQoKTtcbiAgfSxcbiAgYWdlbnREZXNjcmlwdGlvbjogZnVuY3Rpb24odXNlck5hbWUpIHtcbiAgICB2YXIgbG9jYWxlO1xuICAgIGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGU7XG4gICAgICBpZiAobG9jYWxlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09ICd6aC1jbicpIHtcbiAgICAgICAgbG9jYWxlID0gXCJ6aC1DTlwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhbGUgPSBTZXNzaW9uLmdldChcIlRBUGkxOG46OmxvYWRlZF9sYW5nXCIpO1xuICAgIH1cbiAgICByZXR1cm4gVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge1xuICAgICAgdXNlck5hbWU6IHVzZXJOYW1lXG4gICAgfSwgbG9jYWxlKTtcbiAgfSxcbiAgdHJhY2VOYW1lOiBmdW5jdGlvbihpbnN0YW5jZV9pZCwgdHJhY2VJZCkge1xuICAgIHZhciByZWYsIHJlZjE7XG4gICAgcmV0dXJuIChyZWYgPSBfLmZpbmQoKHJlZjEgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZCwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHRyYWNlczogMVxuICAgICAgfVxuICAgIH0pKSAhPSBudWxsID8gcmVmMS50cmFjZXMgOiB2b2lkIDAsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICByZXR1cm4gdHJhY2UuX2lkID09PSB0cmFjZUlkO1xuICAgIH0pKSAhPSBudWxsID8gcmVmLm5hbWUgOiB2b2lkIDA7XG4gIH1cbn07XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgVHJhY2VzVGVtcGxhdGUuaGVscGVycy5kYXRlRm9ybWF0ID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB1dGNPZmZzZXQ7XG4gICAgaWYgKGRhdGUpIHtcbiAgICAgIHV0Y09mZnNldCA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS51dGNPZmZzZXQ7XG4gICAgICByZXR1cm4gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmZvcm1hdERhdGUoZGF0ZSwgdXRjT2Zmc2V0KTtcbiAgICB9XG4gIH07XG4gIFRyYWNlc1RlbXBsYXRlLmhlbHBlcnMuX3QgPSBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgbG9jYWxlO1xuICAgIGxvY2FsZSA9IFRlbXBsYXRlLmluc3RhbmNlKCkudmlldy50ZW1wbGF0ZS5zdGVlZG9zRGF0YS5sb2NhbGU7XG4gICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKTtcbiAgfTtcbiAgVHJhY2VzVGVtcGxhdGUuaGVscGVycy5zaG93RGVsZXRlQnV0dG9uID0gZnVuY3Rpb24oYXBwcm92ZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG5cblRyYWNlc1RlbXBsYXRlLmV2ZW50cyA9IHtcbiAgJ2NsaWNrIC5jYy1hcHByb3ZlLXJlbW92ZSc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHZhciBhcHByb3ZlSWQsIGluc3RhbmNlSWQ7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jYWxsaW5nICogMSAhPT0gMSkge1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGxpbmcgPSAxO1xuICAgICAgJChcImlcIiwgZXZlbnQuY3VycmVudFRhcmdldCkuYWRkQ2xhc3MoXCJmYS1zcGluXCIpO1xuICAgICAgaW5zdGFuY2VJZCA9IFNlc3Npb24uZ2V0KCdpbnN0YW5jZUlkJyk7XG4gICAgICBhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlO1xuICAgICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgICAgTWV0ZW9yLmNhbGwoJ2NjX3JlbW92ZScsIGluc3RhbmNlSWQsIGFwcHJvdmVJZCwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgdG9hc3RyLmVycm9yKGVycik7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmNhbGxpbmcgPSAwO1xuICAgICAgICAgICQoXCJpXCIsIGV2ZW50LmN1cnJlbnRUYXJnZXQpLnJlbW92ZUNsYXNzKFwiZmEtc3BpblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcInJlbW92ZV9jY19hcHByb3ZlXCIpKTtcbiAgICAgICAgICBpZiAoJChcIi5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWxcIikubGVuZ3RoKSB7XG4gICAgICAgICAgICBNb2RhbC5oaWRlKFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWNjLWFwcHJvdmUtcmVtb3ZlJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGFwcHJvdmVJZCwgaW5zdGFuY2VJZDtcbiAgICBpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKTtcbiAgICBhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlO1xuICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwibG9hZGluZ1wiKTtcbiAgICBNZXRlb3IuY2FsbCgnY2NfcmVtb3ZlJywgaW5zdGFuY2VJZCwgYXBwcm92ZUlkLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0b2FzdHIuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoVEFQaTE4bi5fXyhcInJlbW92ZV9jY19hcHByb3ZlXCIpKTtcbiAgICAgICAgTW9kYWwuaGlkZShcImluc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgJ2NsaWNrIC5hcHByb3ZlLWl0ZW0sLmFwcHJvdmUtZGVzY3JpcHRpb24nOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICBpZiAoISQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFwiYS5idG4tbGlua1wiKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBNb2RhbC5zaG93KFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIsIHRoaXMpO1xuICAgIH1cbiAgfSxcbiAgJ3RhcGhvbGQgLmFwcHJvdmUtaXRlbSwuYXBwcm92ZS1kZXNjcmlwdGlvbic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIGlmICghJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJhLmJ0bi1saW5rXCIpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIE1vZGFsLnNob3coXCJpbnN0YW5jZV90cmFjZV9kZXRhaWxfbW9kYWxcIiwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAnY2xpY2sgLmFwcHJvdmUtaXRlbSBhLmJ0bi1saW5rLC5hcHByb3ZlLWRlc2NyaXB0aW9uIGEuYnRuLWxpbmssLmFwcHJvdmUtaXRlbS1kaXN0cmlidXRlIGEuYnRuLWxpbmsnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgcmVmLCB1c2VySWQ7XG4gICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgdXNlcklkID0gKHJlZiA9IGV2ZW50LnRhcmdldC5kYXRhc2V0KSAhPSBudWxsID8gcmVmLnRhcmdldF91c2VyX2lkIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIENyZWF0b3Iub3BlblNhZmVPYmplY3RVcmwoJ3VzZXJzJywgdXNlcklkKTtcbiAgICB9XG4gIH0sXG4gICd0YXBlbmQgLmFwcHJvdmUtaXRlbSwuYXBwcm92ZS1kZXNjcmlwdGlvbic6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIGlmICghJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJhLmJ0bi1saW5rXCIpLmxlbmd0aCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgJ2NsaWNrIC5pbnN0YW5jZS10cmFjZS1kZXRhaWwtbW9kYWwgLmJ0bi1mb3J3YXJkLWFwcHJvdmUtcmVtb3ZlJzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIGFwcHJvdmVJZCwgaW5zdGFuY2VJZCwgdHJhY2VJZDtcbiAgICBpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKTtcbiAgICBhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlO1xuICAgIHRyYWNlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC50cmFjZTtcbiAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImxvYWRpbmdcIik7XG4gICAgTWV0ZW9yLmNhbGwoJ2ZvcndhcmRfcmVtb3ZlJywgaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0b2FzdHIuZXJyb3IoVEFQaTE4bi5fXyhlcnIucmVhc29uKSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHRvYXN0ci5zdWNjZXNzKFRBUGkxOG4uX18oXCJpbnN0YW5jZV9hcHByb3ZlX2ZvcndhcmRfcmVtb3ZlX3N1Y2Nlc3NcIikpO1xuICAgICAgICBNb2RhbC5oaWRlKFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICAnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWZvcndhcmQtaW5zdGFuY2UtbG9vayc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHZhciBmb3J3YXJkX2luc3RhbmNlLCBmb3J3YXJkX3NwYWNlO1xuICAgIGZvcndhcmRfc3BhY2UgPSBldmVudC50YXJnZXQuZGF0YXNldC5mb3J3YXJkc3BhY2U7XG4gICAgZm9yd2FyZF9pbnN0YW5jZSA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmZvcndhcmRpbnN0YW5jZTtcbiAgICByZXR1cm4gU3RlZWRvcy5vcGVuV2luZG93KFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGZvcndhcmRfc3BhY2UgKyBcIi92aWV3L3JlYWRvbmx5L1wiICsgZm9yd2FyZF9pbnN0YW5jZSkpO1xuICB9LFxuICAnY2xpY2sgLmJ0bi1tb2RpZmljYXRpb24nOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICB0ZW1wbGF0ZS5pc19lZGl0aW5nLnNldCghdGVtcGxhdGUuaXNfZWRpdGluZy5nZXQoKSk7XG4gICAgaWYgKCFTdGVlZG9zLmlzQW5kcm9pZE9ySU9TKCkpIHtcbiAgICAgIHJldHVybiBUcmFja2VyLmFmdGVyRmx1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkKFwiI2luc3RhbmNlX3RyYWNlX2RldGFpbF9tb2RhbCAjZmluaXNoX2lucHV0XCIpLm9uKFwiZHAuc2hvd1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJChcIi5tb2RhbC1ib2R5XCIpLnNjcm9sbFRvcCgxMDApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgJ2NsaWNrIC5idG4tY2FuY2VsQnV0JzogZnVuY3Rpb24oZXZlbnQsIHRlbXBsYXRlKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlLmlzX2VkaXRpbmcuc2V0KCF0ZW1wbGF0ZS5pc19lZGl0aW5nLmdldCgpKTtcbiAgfSxcbiAgJ2NsaWNrIC5idG4tc2F2ZUJ1dCc6IGZ1bmN0aW9uKGV2ZW50LCB0ZW1wbGF0ZSkge1xuICAgIHZhciBhcHByb3ZlSWQsIGZpbmlzaF9pbnB1dCwgaW5zdGFuY2VJZCwgb3Bpbmlvbl9pbnB1dCwgdHJhY2VJZDtcbiAgICBpbnN0YW5jZUlkID0gU2Vzc2lvbi5nZXQoJ2luc3RhbmNlSWQnKTtcbiAgICBhcHByb3ZlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5hcHByb3ZlO1xuICAgIHRyYWNlSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC50cmFjZTtcbiAgICBvcGluaW9uX2lucHV0ID0gJCgnI29waW5pb25faW5wdXQnKS52YWwoKTtcbiAgICBmaW5pc2hfaW5wdXQgPSBBdXRvRm9ybS5nZXRGaWVsZFZhbHVlKFwiZmluaXNoX2RhdGVcIiwgXCJmaW5pc2hEYXRlQXV0b0Zvcm1cIik7XG4gICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgIHJldHVybiBNZXRlb3IuY2FsbCgnY2hhbmdlX2FwcHJvdmVfaW5mbycsIGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgb3Bpbmlvbl9pbnB1dCwgZmluaXNoX2lucHV0LCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nXCIpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0b2FzdHIuZXJyb3IoVEFQaTE4bi5fXyhlcnIucmVhc29uKSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIHRvYXN0ci5zdWNjZXNzKHQoXCJpbnN0YW5jZV9hcHByb3ZlX21vZGFsX21vZGlmaWNhdGlvbnNhdmVcIikpO1xuICAgICAgICBNb2RhbC5oaWRlKFwiaW5zdGFuY2VfdHJhY2VfZGV0YWlsX21vZGFsXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICAnY2xpY2sgLmluc3RhbmNlLXRyYWNlLWRldGFpbC1tb2RhbCAuYnRuLWRpc3RyaWJ1dGUtYXBwcm92ZS1yZW1vdmUnOiBmdW5jdGlvbihldmVudCwgdGVtcGxhdGUpIHtcbiAgICBNb2RhbC5hbGxvd011bHRpcGxlID0gdHJ1ZTtcbiAgICByZXR1cm4gTW9kYWwuc2hvdygnY2FuY2VsX2Rpc3RyaWJ1dGVfbW9kYWwnKTtcbiAgfVxufTtcbiIsIlJlbGF0ZWRJbnN0YW5jZXMuaGVscGVycyA9XHJcblx0c2hvd1JlbGF0ZWRJbnN0YWNlczogLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0aW5zID0gdGhpcy5pbnN0YW5jZVxyXG5cdFx0aWYgaW5zPy5yZWxhdGVkX2luc3RhbmNlcyAmJiBfLmlzQXJyYXkoaW5zPy5yZWxhdGVkX2luc3RhbmNlcylcclxuXHRcdFx0aWYgZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogaW5zLnJlbGF0ZWRfaW5zdGFuY2VzfX0sIHtmaWVsZHM6IHtzcGFjZTogMSwgbmFtZTogMX19KS5jb3VudCgpID4gMFxyXG5cdFx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0cmVsYXRlZF9pbnN0YWNlczogLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0aW5zID0gdGhpcy5pbnN0YW5jZVxyXG5cdFx0aWYgaW5zPy5yZWxhdGVkX2luc3RhbmNlcyAmJiBfLmlzQXJyYXkoaW5zPy5yZWxhdGVkX2luc3RhbmNlcylcclxuXHRcdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW46IGlucy5yZWxhdGVkX2luc3RhbmNlc319LCB7ZmllbGRzOiB7c3BhY2U6IDEsIG5hbWU6IDF9fSkuZmV0Y2goKVxyXG5cclxuXHRyZWxhdGVkX2luc3RhY2VfdXJsOiAoaW5zKSAtPlxyXG5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudCAmJiAoU3RlZWRvcy5pc01vYmlsZSgpIHx8IFN0ZWVkb3MuaXNDb3Jkb3ZhKCkpXHJcblx0XHRcdHJldHVybiAnJ1xyXG5cclxuXHRcdGFic29sdXRlID0gZmFsc2VcclxuXHJcblx0XHRpZiBNZXRlb3IuaXNTZXJ2ZXJcclxuXHRcdFx0YWJzb2x1dGUgPSB0aGlzLmFic29sdXRlXHJcblx0XHRpZiBhYnNvbHV0ZVxyXG5cdFx0XHRyZXR1cm4gTWV0ZW9yLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIraW5zLnNwYWNlK1wiL3ZpZXcvcmVhZG9ubHkvXCIgKyBpbnMuX2lkICsgJz9oaWRlX3RyYWNlcz0wJylcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIitpbnMuc3BhY2UrXCIvdmlldy9yZWFkb25seS9cIiArIGlucy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKVxyXG5cclxuXHRfdDogKGtleSktPlxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdHJldHVybiBUQVBpMThuLl9fKGtleSlcclxuXHRcdGVsc2VcclxuXHRcdFx0bG9jYWxlID0gVGVtcGxhdGUuaW5zdGFuY2UoKS52aWV3LnRlbXBsYXRlLnN0ZWVkb3NEYXRhLmxvY2FsZVxyXG5cdFx0XHRyZXR1cm4gVEFQaTE4bi5fXyhrZXksIHt9LCBsb2NhbGUpXHJcblxyXG5cdHNob3dfZGVsZXRlOiAoKS0+XHJcblx0XHRpZiAhTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSBcImRyYWZ0XCIgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xyXG5cdFx0XHRcdGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpXHJcblx0XHRcdFx0aWYgY3VycmVudF9zdGVwXHJcblx0XHRcdFx0XHRpZiAoY3VycmVudF9zdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoIHx8IGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9ub3JtYWxfYXR0YWNoID09IHRydWUgfHwgY3VycmVudF9zdGVwLmNhbl9lZGl0X25vcm1hbF9hdHRhY2ggPT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZSIsIlJlbGF0ZWRJbnN0YW5jZXMuaGVscGVycyA9IHtcbiAgc2hvd1JlbGF0ZWRJbnN0YWNlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucztcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zID0gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG4gICAgaWYgKChpbnMgIT0gbnVsbCA/IGlucy5yZWxhdGVkX2luc3RhbmNlcyA6IHZvaWQgMCkgJiYgXy5pc0FycmF5KGlucyAhPSBudWxsID8gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwKSkge1xuICAgICAgaWYgKGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBpbnMucmVsYXRlZF9pbnN0YW5jZXNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICBuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmNvdW50KCkgPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICByZWxhdGVkX2luc3RhY2VzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zO1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQpIHtcbiAgICAgIGlucyA9IFdvcmtmbG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnMgPSB0aGlzLmluc3RhbmNlO1xuICAgIH1cbiAgICBpZiAoKGlucyAhPSBudWxsID8gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIDogdm9pZCAwKSAmJiBfLmlzQXJyYXkoaW5zICE9IG51bGwgPyBpbnMucmVsYXRlZF9pbnN0YW5jZXMgOiB2b2lkIDApKSB7XG4gICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IGlucy5yZWxhdGVkX2luc3RhbmNlc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICB9XG4gIH0sXG4gIHJlbGF0ZWRfaW5zdGFjZV91cmw6IGZ1bmN0aW9uKGlucykge1xuICAgIHZhciBhYnNvbHV0ZTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50ICYmIChTdGVlZG9zLmlzTW9iaWxlKCkgfHwgU3RlZWRvcy5pc0NvcmRvdmEoKSkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgYWJzb2x1dGUgPSBmYWxzZTtcbiAgICBpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gICAgICBhYnNvbHV0ZSA9IHRoaXMuYWJzb2x1dGU7XG4gICAgfVxuICAgIGlmIChhYnNvbHV0ZSkge1xuICAgICAgcmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiICsgaW5zLnNwYWNlICsgXCIvdmlldy9yZWFkb25seS9cIiArIGlucy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0ZWVkb3MuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGlucy5zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBpbnMuX2lkICsgJz9oaWRlX3RyYWNlcz0wJyk7XG4gICAgfVxuICB9LFxuICBfdDogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGxvY2FsZTtcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICByZXR1cm4gVEFQaTE4bi5fXyhrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhbGUgPSBUZW1wbGF0ZS5pbnN0YW5jZSgpLnZpZXcudGVtcGxhdGUuc3RlZWRvc0RhdGEubG9jYWxlO1xuICAgICAgcmV0dXJuIFRBUGkxOG4uX18oa2V5LCB7fSwgbG9jYWxlKTtcbiAgICB9XG4gIH0sXG4gIHNob3dfZGVsZXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudF9zdGVwO1xuICAgIGlmICghTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gXCJkcmFmdFwiIHx8IFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnKSB7XG4gICAgICAgIGN1cnJlbnRfc3RlcCA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50U3RlcCgpO1xuICAgICAgICBpZiAoY3VycmVudF9zdGVwKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRfc3RlcC5jYW5fZWRpdF9tYWluX2F0dGFjaCB8fCBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PT0gdHJ1ZSB8fCBjdXJyZW50X3N0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iLCJSZWxhdGVkUmVjb3Jkcy5oZWxwZXJzID1cclxuXHRzaG93UmVsYXRlZFJlY29yZHM6ICgpLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudFxyXG5cdFx0XHRpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHRcdGVsc2VcclxuXHRcdFx0aW5zID0gdGhpcy5pbnN0YW5jZVxyXG5cdFx0aWYgIWluc1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdHJldHVybiAhXy5pc0VtcHR5KGlucy5yZWNvcmRfaWRzKSIsIlJlbGF0ZWRSZWNvcmRzLmhlbHBlcnMgPSB7XG4gIHNob3dSZWxhdGVkUmVjb3JkczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucztcbiAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICBpbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zID0gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG4gICAgaWYgKCFpbnMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICFfLmlzRW1wdHkoaW5zLnJlY29yZF9pZHMpO1xuICB9XG59O1xuIiwiRGVzaWduZXJBUEkgPVxyXG5cclxuXHRnZXRBYnNvbHV0ZVVybDogKHVybCktPlxyXG5cdFx0cm9vdFVybCA9IGlmIF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18gdGhlbiBfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMX1BBVEhfUFJFRklYIGVsc2UgXCJcIlxyXG5cdFx0aWYgcm9vdFVybFxyXG5cdFx0XHR1cmwgPSByb290VXJsICsgdXJsXHJcblx0XHRyZXR1cm4gdXJsO1xyXG5cclxuXHR3cml0ZVJlc3BvbnNlOiAocmVzLCBodHRwQ29kZSwgYm9keSktPlxyXG5cdFx0cmVzLnN0YXR1c0NvZGUgPSBodHRwQ29kZTtcclxuXHRcdHJlcy5lbmQoYm9keSk7XHJcblx0XHRcclxuXHRzZW5kSW52YWxpZFVSTFJlc3BvbnNlOiAocmVzKS0+XHJcblx0XHRyZXR1cm4gQHdyaXRlUmVzcG9uc2UocmVzLCA0MDQsIFwidGhlIHBhcmFtICd1cmwnIGlzIHJlcXVpcmVkIGFzIHF1ZXJ5cy5cIik7XHJcblx0XHRcclxuXHRzZW5kQXV0aFRva2VuRXhwaXJlZFJlc3BvbnNlOiAocmVzKS0+XHJcblx0XHRyZXR1cm4gQHdyaXRlUmVzcG9uc2UocmVzLCA0MDEsIFwidGhlIGF1dGhfdG9rZW4gaGFzIGV4cGlyZWQuXCIpO1xyXG5cclxuXHRzZW5kSHRtbFJlc3BvbnNlOiAocmVxLCByZXMsIHR5cGUpLT5cclxuXHRcdHF1ZXJ5ID0gcmVxLnF1ZXJ5XHJcblx0XHR1cmwgPSBxdWVyeS51cmxcclxuXHJcblx0XHRpZiB1cmxcclxuXHRcdFx0dXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybClcclxuXHRcdGVsc2VcclxuXHRcdFx0RGVzaWduZXJBUEkuc2VuZEludmFsaWRVUkxSZXNwb25zZSByZXNcclxuXHRcdFxyXG5cdFx0dGl0bGUgPSBxdWVyeS50aXRsZVxyXG5cdFx0aWYgdGl0bGVcclxuXHRcdFx0dGl0bGUgPSBkZWNvZGVVUklDb21wb25lbnQodGl0bGUpXHJcblx0XHRlbHNlXHJcblx0XHRcdHRpdGxlID0gXCJTdGVlZG9zIERlc2lnbmVyXCJcclxuXHRcdFxyXG5cdFx0ZXJyb3JfbXNnID0gXCJcIlxyXG5cclxuXHRcdHJldHVybiBAd3JpdGVSZXNwb25zZSByZXMsIDIwMCwgXCJcIlwiXHJcblx0XHRcdDxodG1sPlxyXG5cdFx0XHRcdDxoZWFkPlxyXG5cdFx0XHRcdFx0PHN0eWxlPlxyXG5cdFx0XHRcdFx0XHRodG1sLGJvZHl7XHJcblx0XHRcdFx0XHRcdFx0bWFyZ2luOiAwO1xyXG5cdFx0XHRcdFx0XHRcdHBhZGRpbmc6IDA7XHJcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiAxMDAlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGJvZHkgeyBcclxuXHRcdFx0XHRcdFx0XHRmb250LWZhbWlseTogJ1NvdXJjZSBTYW5zIFBybycsICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XHJcblx0XHRcdFx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xyXG5cdFx0XHRcdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0LmxvYWRpbmd7XHJcblx0XHRcdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDBweDtcclxuXHRcdFx0XHRcdFx0XHRyaWdodDogMHB4O1xyXG5cdFx0XHRcdFx0XHRcdHRvcDogNTAlO1xyXG5cdFx0XHRcdFx0XHRcdHotaW5kZXg6IC0xOy8q6K6+572u5Li6LTHvvIzlj6/ku6XlnKhpZnJhbWXliqDovb3lh7rmnaXlkI7oh6rliqjmtojlpLEqL1xyXG5cdFx0XHRcdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHRcdFx0XHRcdFx0XHRtYXJnaW4tdG9wOiAtMzBweDtcclxuXHRcdFx0XHRcdFx0XHRmb250LXNpemU6IDM2cHg7XHJcblx0XHRcdFx0XHRcdFx0Y29sb3I6ICNkZmRmZGY7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0LmVycm9yLW1zZ3tcclxuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0XHRcdFx0XHRcdFx0bGVmdDogMHB4O1xyXG5cdFx0XHRcdFx0XHRcdHJpZ2h0OiAwcHg7XHJcblx0XHRcdFx0XHRcdFx0Ym90dG9tOiAyMHB4O1xyXG5cdFx0XHRcdFx0XHRcdHotaW5kZXg6IDExMDA7XHJcblx0XHRcdFx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xyXG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMjBweDtcclxuXHRcdFx0XHRcdFx0XHRjb2xvcjogI2E5NDQ0MjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0PC9zdHlsZT5cclxuXHRcdFx0XHRcdDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxyXG5cdFx0XHRcdFx0PG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm9cIj5cclxuXHRcdFx0XHRcdDx0aXRsZT4je3RpdGxlfTwvdGl0bGU+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJpY29uXCIgdHlwZT1cImltYWdlL3BuZ1wiIHNpemVzPVwiMTkyeDE5MlwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hbmRyb2lkLWNocm9tZS0xOTJ4MTkyLnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cIm1hbmlmZXN0XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL21hbmlmZXN0Lmpzb25cIil9XCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwibW9iaWxlLXdlYi1hcHAtY2FwYWJsZVwiIGNvbnRlbnQ9XCJ5ZXNcIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJ0aGVtZS1jb2xvclwiIGNvbnRlbnQ9XCIjMDAwXCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwiYXBwbGljYXRpb24tbmFtZVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiNTd4NTdcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi01N3g1Ny5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCI2MHg2MFwiIGhyZWY9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTYweDYwLnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImFwcGxlLXRvdWNoLWljb25cIiBzaXplcz1cIjcyeDcyXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tNzJ4NzIucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiYXBwbGUtdG91Y2gtaWNvblwiIHNpemVzPVwiNzZ4NzZcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi03Nng3Ni5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCIxMTR4MTE0XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tMTE0eDExNC5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCIxMjB4MTIwXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tMTIweDEyMC5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCIxNDR4MTQ0XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tMTQ0eDE0NC5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCIxNTJ4MTUyXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJhcHBsZS10b3VjaC1pY29uXCIgc2l6ZXM9XCIxODB4MTgwXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tMTgweDE4MC5wbmdcIil9XCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZVwiIGNvbnRlbnQ9XCJ5ZXNcIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJhcHBsZS1tb2JpbGUtd2ViLWFwcC1zdGF0dXMtYmFyLXN0eWxlXCIgY29udGVudD1cImJsYWNrLXRyYW5zbHVjZW50XCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGVcIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cImljb25cIiB0eXBlPVwiaW1hZ2UvcG5nXCIgc2l6ZXM9XCIyMjh4MjI4XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2NvYXN0LTIyOHgyMjgucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjE2eDE2XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tMTZ4MTYucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjMyeDMyXCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tMzJ4MzIucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjk2eDk2XCIgaHJlZj1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tOTZ4OTYucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PGxpbmsgcmVsPVwiaWNvblwiIHR5cGU9XCJpbWFnZS9wbmdcIiBzaXplcz1cIjIzMHgyMzBcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi0yMzB4MjMwLnBuZ1wiKX1cIj5cclxuXHRcdFx0XHRcdDxsaW5rIHJlbD1cInNob3J0Y3V0IGljb25cIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi5pY29cIil9XCI+XHJcblx0XHRcdFx0XHQ8bGluayByZWw9XCJ5YW5kZXgtdGFibGVhdS13aWRnZXRcIiBocmVmPVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMveWFuZGV4LWJyb3dzZXItbWFuaWZlc3QuanNvblwiKX1cIj5cclxuXHRcdFx0XHRcdDxtZXRhIG5hbWU9XCJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvclwiIGNvbnRlbnQ9XCIjZmZmXCI+XHJcblx0XHRcdFx0XHQ8bWV0YSBuYW1lPVwibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2VcIiBjb250ZW50PVwiI3tAZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvbXN0aWxlLTE0NHgxNDQucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PG1ldGEgbmFtZT1cIm1zYXBwbGljYXRpb24tY29uZmlnXCIgY29udGVudD1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Jyb3dzZXJjb25maWcueG1sXCIpfVwiPlxyXG5cdFx0XHRcdFx0PG1ldGEgcHJvcGVydHk9XCJ0d2l0dGVyOmltYWdlXCIgY29udGVudD1cIiN7QGdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL3R3aXR0ZXIucG5nXCIpfVwiPlxyXG5cdFx0XHRcdFx0PG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZVwiIGNvbnRlbnQ9XCIje0BnZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9vcGVuLWdyYXBoLnBuZ1wiKX1cIj5cclxuXHRcdFx0XHQ8L2hlYWQ+XHJcblx0XHRcdFx0PGJvZHk+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzID0gXCJsb2FkaW5nXCI+TG9hZGluZy4uLjwvZGl2PlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcyA9IFwiZXJyb3ItbXNnXCI+I3tlcnJvcl9tc2d9PC9kaXY+XHJcblx0XHRcdFx0XHQ8aWZyYW1lIGlkPVwiaWZyRGVzaWduZXJcIiBzcmM9XCJcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgbndkaXNhYmxlPVwidHJ1ZVwiIGZyYW1lYm9yZGVyPVwibm9cIiBib3JkZXI9XCIwXCIgbWFyZ2lud2lkdGg9XCIwXCIgbWFyZ2luaGVpZ2h0PVwiMFwiIHNjcm9sbGluZz1cIm5vXCIgYWxsb3d0cmFuc3BhcmVuY3k9XCJ5ZXNcIj48L2lmcmFtZT5cclxuXHRcdFx0XHRcdDxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiIHNyYz1cIiN7QGdldEFic29sdXRlVXJsKFwiL2xpYi9qcXVlcnkvanF1ZXJ5LTEuMTEuMi5taW4uanNcIil9XCI+PC9zY3JpcHQ+XHJcblx0XHRcdFx0XHQ8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cclxuXHRcdFx0XHRcdFx0dmFyIGRlc2lnbmVyID0ge1xyXG5cdFx0XHRcdFx0XHRcdHVybFF1ZXJ5OmZ1bmN0aW9uKG5hbWUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAoXCIoXnwmKVwiICsgbmFtZSArIFwiPShbXiZdKikoJnwkKVwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciByID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkubWF0Y2gocmVnKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChyICE9IG51bGwpIHJldHVybiB1bmVzY2FwZShyWzJdKTtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0cnVuOmZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgdXJsID0gdGhpcy51cmxRdWVyeShcInVybFwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdHVybCA9IGRlY29kZVVSSUNvbXBvbmVudCh1cmwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0XHRpZih1cmwpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKFwiI2lmckRlc2lnbmVyXCIpLmF0dHIoXCJzcmNcIix1cmwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIFN0ZWVkb3MgPSB3aW5kb3cub3BlbmVyLlN0ZWVkb3MgfHwgbnVsbDtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChTdGVlZG9zKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFN0ZWVkb3MuZm9yYmlkTm9kZUNvbnRleHRtZW51KHdpbmRvdyk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHQkKGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHRcdFx0ZGVzaWduZXIucnVuKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0PC9zY3JpcHQ+XHJcblx0XHRcdFx0PGJvZHk+XHJcblx0XHRcdDwvaHRtbD5cclxuXHRcdFwiXCJcIlxyXG5cclxuSnNvblJvdXRlcy5hZGQgJ2dldCcsICcvYXBpL3dvcmtmbG93L2Rlc2lnbmVyP3VybD06dXJsJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdERlc2lnbmVyQVBJLnNlbmRIdG1sUmVzcG9uc2UgcmVxLCByZXNcclxuXHJcbiIsInZhciBEZXNpZ25lckFQSTtcblxuRGVzaWduZXJBUEkgPSB7XG4gIGdldEFic29sdXRlVXJsOiBmdW5jdGlvbih1cmwpIHtcbiAgICB2YXIgcm9vdFVybDtcbiAgICByb290VXJsID0gX19tZXRlb3JfcnVudGltZV9jb25maWdfXyA/IF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggOiBcIlwiO1xuICAgIGlmIChyb290VXJsKSB7XG4gICAgICB1cmwgPSByb290VXJsICsgdXJsO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9LFxuICB3cml0ZVJlc3BvbnNlOiBmdW5jdGlvbihyZXMsIGh0dHBDb2RlLCBib2R5KSB7XG4gICAgcmVzLnN0YXR1c0NvZGUgPSBodHRwQ29kZTtcbiAgICByZXR1cm4gcmVzLmVuZChib2R5KTtcbiAgfSxcbiAgc2VuZEludmFsaWRVUkxSZXNwb25zZTogZnVuY3Rpb24ocmVzKSB7XG4gICAgcmV0dXJuIHRoaXMud3JpdGVSZXNwb25zZShyZXMsIDQwNCwgXCJ0aGUgcGFyYW0gJ3VybCcgaXMgcmVxdWlyZWQgYXMgcXVlcnlzLlwiKTtcbiAgfSxcbiAgc2VuZEF1dGhUb2tlbkV4cGlyZWRSZXNwb25zZTogZnVuY3Rpb24ocmVzKSB7XG4gICAgcmV0dXJuIHRoaXMud3JpdGVSZXNwb25zZShyZXMsIDQwMSwgXCJ0aGUgYXV0aF90b2tlbiBoYXMgZXhwaXJlZC5cIik7XG4gIH0sXG4gIHNlbmRIdG1sUmVzcG9uc2U6IGZ1bmN0aW9uKHJlcSwgcmVzLCB0eXBlKSB7XG4gICAgdmFyIGVycm9yX21zZywgcXVlcnksIHRpdGxlLCB1cmw7XG4gICAgcXVlcnkgPSByZXEucXVlcnk7XG4gICAgdXJsID0gcXVlcnkudXJsO1xuICAgIGlmICh1cmwpIHtcbiAgICAgIHVybCA9IGRlY29kZVVSSUNvbXBvbmVudCh1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBEZXNpZ25lckFQSS5zZW5kSW52YWxpZFVSTFJlc3BvbnNlKHJlcyk7XG4gICAgfVxuICAgIHRpdGxlID0gcXVlcnkudGl0bGU7XG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICB0aXRsZSA9IGRlY29kZVVSSUNvbXBvbmVudCh0aXRsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlID0gXCJTdGVlZG9zIERlc2lnbmVyXCI7XG4gICAgfVxuICAgIGVycm9yX21zZyA9IFwiXCI7XG4gICAgcmV0dXJuIHRoaXMud3JpdGVSZXNwb25zZShyZXMsIDIwMCwgXCI8aHRtbD5cXG5cdDxoZWFkPlxcblx0XHQ8c3R5bGU+XFxuXHRcdFx0aHRtbCxib2R5e1xcblx0XHRcdFx0bWFyZ2luOiAwO1xcblx0XHRcdFx0cGFkZGluZzogMDtcXG5cdFx0XHRcdGhlaWdodDogMTAwJTtcXG5cdFx0XHR9XFxuXHRcdFx0Ym9keSB7IFxcblx0XHRcdFx0Zm9udC1mYW1pbHk6ICdTb3VyY2UgU2FucyBQcm8nLCAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcblx0XHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG5cdFx0XHR9XFxuXHRcdFx0LmxvYWRpbmd7XFxuXHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXHRcdFx0XHRsZWZ0OiAwcHg7XFxuXHRcdFx0XHRyaWdodDogMHB4O1xcblx0XHRcdFx0dG9wOiA1MCU7XFxuXHRcdFx0XHR6LWluZGV4OiAtMTsvKuiuvue9ruS4ui0x77yM5Y+v5Lul5ZyoaWZyYW1l5Yqg6L295Ye65p2l5ZCO6Ieq5Yqo5raI5aSxKi9cXG5cdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cdFx0XHRcdG1hcmdpbi10b3A6IC0zMHB4O1xcblx0XHRcdFx0Zm9udC1zaXplOiAzNnB4O1xcblx0XHRcdFx0Y29sb3I6ICNkZmRmZGY7XFxuXHRcdFx0fVxcblx0XHRcdC5lcnJvci1tc2d7XFxuXHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXHRcdFx0XHRsZWZ0OiAwcHg7XFxuXHRcdFx0XHRyaWdodDogMHB4O1xcblx0XHRcdFx0Ym90dG9tOiAyMHB4O1xcblx0XHRcdFx0ei1pbmRleDogMTEwMDtcXG5cdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cdFx0XHRcdGZvbnQtc2l6ZTogMjBweDtcXG5cdFx0XHRcdGNvbG9yOiAjYTk0NDQyO1xcblx0XHRcdH1cXG5cdFx0PC9zdHlsZT5cXG5cdFx0PG1ldGEgY2hhcnNldD1cXFwidXRmLThcXFwiPlxcblx0XHQ8bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ub1xcXCI+XFxuXHRcdDx0aXRsZT5cIiArIHRpdGxlICsgXCI8L3RpdGxlPlxcblx0XHQ8bGluayByZWw9XFxcImljb25cXFwiIHR5cGU9XFxcImltYWdlL3BuZ1xcXCIgc2l6ZXM9XFxcIjE5MngxOTJcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcIm1hbmlmZXN0XFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL21hbmlmZXN0Lmpzb25cIikpICsgXCJcXFwiPlxcblx0XHQ8bWV0YSBuYW1lPVxcXCJtb2JpbGUtd2ViLWFwcC1jYXBhYmxlXFxcIiBjb250ZW50PVxcXCJ5ZXNcXFwiPlxcblx0XHQ8bWV0YSBuYW1lPVxcXCJ0aGVtZS1jb2xvclxcXCIgY29udGVudD1cXFwiIzAwMFxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcImFwcGxpY2F0aW9uLW5hbWVcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImFwcGxlLXRvdWNoLWljb25cXFwiIHNpemVzPVxcXCI1N3g1N1xcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTU3eDU3LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjYweDYwXFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2FwcGxlLXRvdWNoLWljb24tNjB4NjAucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJhcHBsZS10b3VjaC1pY29uXFxcIiBzaXplcz1cXFwiNzJ4NzJcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi03Mng3Mi5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImFwcGxlLXRvdWNoLWljb25cXFwiIHNpemVzPVxcXCI3Nng3NlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9hcHBsZS10b3VjaC1pY29uLTc2eDc2LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjExNHgxMTRcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xMTR4MTE0LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjEyMHgxMjBcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xMjB4MTIwLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjE0NHgxNDRcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xNDR4MTQ0LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjE1MngxNTJcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xNTJ4MTUyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiYXBwbGUtdG91Y2gtaWNvblxcXCIgc2l6ZXM9XFxcIjE4MHgxODBcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvYXBwbGUtdG91Y2gtaWNvbi0xODB4MTgwLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcImFwcGxlLW1vYmlsZS13ZWItYXBwLWNhcGFibGVcXFwiIGNvbnRlbnQ9XFxcInllc1xcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcImFwcGxlLW1vYmlsZS13ZWItYXBwLXN0YXR1cy1iYXItc3R5bGVcXFwiIGNvbnRlbnQ9XFxcImJsYWNrLXRyYW5zbHVjZW50XFxcIj5cXG5cdFx0PG1ldGEgbmFtZT1cXFwiYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGVcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImljb25cXFwiIHR5cGU9XFxcImltYWdlL3BuZ1xcXCIgc2l6ZXM9XFxcIjIyOHgyMjhcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvY29hc3QtMjI4eDIyOC5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImljb25cXFwiIHR5cGU9XFxcImltYWdlL3BuZ1xcXCIgc2l6ZXM9XFxcIjE2eDE2XFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Zhdmljb24tMTZ4MTYucG5nXCIpKSArIFwiXFxcIj5cXG5cdFx0PGxpbmsgcmVsPVxcXCJpY29uXFxcIiB0eXBlPVxcXCJpbWFnZS9wbmdcXFwiIHNpemVzPVxcXCIzMngzMlxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLTMyeDMyLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwiaWNvblxcXCIgdHlwZT1cXFwiaW1hZ2UvcG5nXFxcIiBzaXplcz1cXFwiOTZ4OTZcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi05Nng5Ni5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bGluayByZWw9XFxcImljb25cXFwiIHR5cGU9XFxcImltYWdlL3BuZ1xcXCIgc2l6ZXM9XFxcIjIzMHgyMzBcXFwiIGhyZWY9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvZmF2aWNvbi0yMzB4MjMwLnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwic2hvcnRjdXQgaWNvblxcXCIgaHJlZj1cXFwiXCIgKyAodGhpcy5nZXRBYnNvbHV0ZVVybChcIi9mYXZpY29ucy9mYXZpY29uLmljb1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxsaW5rIHJlbD1cXFwieWFuZGV4LXRhYmxlYXUtd2lkZ2V0XFxcIiBocmVmPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL3lhbmRleC1icm93c2VyLW1hbmlmZXN0Lmpzb25cIikpICsgXCJcXFwiPlxcblx0XHQ8bWV0YSBuYW1lPVxcXCJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvclxcXCIgY29udGVudD1cXFwiI2ZmZlxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcIm1zYXBwbGljYXRpb24tVGlsZUltYWdlXFxcIiBjb250ZW50PVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL21zdGlsZS0xNDR4MTQ0LnBuZ1wiKSkgKyBcIlxcXCI+XFxuXHRcdDxtZXRhIG5hbWU9XFxcIm1zYXBwbGljYXRpb24tY29uZmlnXFxcIiBjb250ZW50PVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2Zhdmljb25zL2Jyb3dzZXJjb25maWcueG1sXCIpKSArIFwiXFxcIj5cXG5cdFx0PG1ldGEgcHJvcGVydHk9XFxcInR3aXR0ZXI6aW1hZ2VcXFwiIGNvbnRlbnQ9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvdHdpdHRlci5wbmdcIikpICsgXCJcXFwiPlxcblx0XHQ8bWV0YSBwcm9wZXJ0eT1cXFwib2c6aW1hZ2VcXFwiIGNvbnRlbnQ9XFxcIlwiICsgKHRoaXMuZ2V0QWJzb2x1dGVVcmwoXCIvZmF2aWNvbnMvb3Blbi1ncmFwaC5wbmdcIikpICsgXCJcXFwiPlxcblx0PC9oZWFkPlxcblx0PGJvZHk+XFxuXHRcdDxkaXYgY2xhc3MgPSBcXFwibG9hZGluZ1xcXCI+TG9hZGluZy4uLjwvZGl2Plxcblx0XHQ8ZGl2IGNsYXNzID0gXFxcImVycm9yLW1zZ1xcXCI+XCIgKyBlcnJvcl9tc2cgKyBcIjwvZGl2Plxcblx0XHQ8aWZyYW1lIGlkPVxcXCJpZnJEZXNpZ25lclxcXCIgc3JjPVxcXCJcXFwiIHdpZHRoPVxcXCIxMDAlXFxcIiBoZWlnaHQ9XFxcIjEwMCVcXFwiIG53ZGlzYWJsZT1cXFwidHJ1ZVxcXCIgZnJhbWVib3JkZXI9XFxcIm5vXFxcIiBib3JkZXI9XFxcIjBcXFwiIG1hcmdpbndpZHRoPVxcXCIwXFxcIiBtYXJnaW5oZWlnaHQ9XFxcIjBcXFwiIHNjcm9sbGluZz1cXFwibm9cXFwiIGFsbG93dHJhbnNwYXJlbmN5PVxcXCJ5ZXNcXFwiPjwvaWZyYW1lPlxcblx0XHQ8c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCIgc3JjPVxcXCJcIiArICh0aGlzLmdldEFic29sdXRlVXJsKFwiL2xpYi9qcXVlcnkvanF1ZXJ5LTEuMTEuMi5taW4uanNcIikpICsgXCJcXFwiPjwvc2NyaXB0Plxcblx0XHQ8c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+XFxuXHRcdFx0dmFyIGRlc2lnbmVyID0ge1xcblx0XHRcdFx0dXJsUXVlcnk6ZnVuY3Rpb24obmFtZSl7XFxuXHRcdFx0XHRcdHZhciByZWcgPSBuZXcgUmVnRXhwKFxcXCIoXnwmKVxcXCIgKyBuYW1lICsgXFxcIj0oW14mXSopKCZ8JClcXFwiKTtcXG5cdFx0XHRcdFx0dmFyIHIgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKS5tYXRjaChyZWcpO1xcblx0XHRcdFx0XHRpZiAociAhPSBudWxsKSByZXR1cm4gdW5lc2NhcGUoclsyXSk7XFxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xcblx0XHRcdFx0fSxcXG5cdFx0XHRcdHJ1bjpmdW5jdGlvbigpe1xcblx0XHRcdFx0XHR2YXIgdXJsID0gdGhpcy51cmxRdWVyeShcXFwidXJsXFxcIik7XFxuXHRcdFx0XHRcdHVybCA9IGRlY29kZVVSSUNvbXBvbmVudCh1cmwpO1xcblx0XHRcdFx0XHRcXG5cdFx0XHRcdFx0aWYodXJsKXtcXG5cdFx0XHRcdFx0XHQkKFxcXCIjaWZyRGVzaWduZXJcXFwiKS5hdHRyKFxcXCJzcmNcXFwiLHVybCk7XFxuXHRcdFx0XHRcdH1cXG5cdFx0XHRcdFx0dmFyIFN0ZWVkb3MgPSB3aW5kb3cub3BlbmVyLlN0ZWVkb3MgfHwgbnVsbDtcXG5cdFx0XHRcdFx0aWYgKFN0ZWVkb3MpIHtcXG5cdFx0XHRcdFx0XHRTdGVlZG9zLmZvcmJpZE5vZGVDb250ZXh0bWVudSh3aW5kb3cpO1xcblx0XHRcdFx0XHR9XFxuXHRcdFx0XHR9XFxuXHRcdFx0fTtcXG5cdFx0XHQkKGZ1bmN0aW9uKCl7XFxuXHRcdFx0XHRkZXNpZ25lci5ydW4oKTtcXG5cdFx0XHR9KTtcXG5cdFx0PC9zY3JpcHQ+XFxuXHQ8Ym9keT5cXG48L2h0bWw+XCIpO1xuICB9XG59O1xuXG5Kc29uUm91dGVzLmFkZCgnZ2V0JywgJy9hcGkvd29ya2Zsb3cvZGVzaWduZXI/dXJsPTp1cmwnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICByZXR1cm4gRGVzaWduZXJBUEkuc2VuZEh0bWxSZXNwb25zZShyZXEsIHJlcyk7XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvbmV4dFN0ZXBVc2Vyc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xyXG5cdHZhclxyXG5cdFx0ZGVhbF90eXBlID0gcmVxLnF1ZXJ5LmRlYWxfdHlwZSxcclxuXHRcdHNwYWNlSWQgPSByZXEucXVlcnkuc3BhY2VJZCxcclxuXHRcdGVycm9yID0gXCJcIjtcclxuXHJcblx0aWYgKCFkZWFsX3R5cGUgfHwgIXNwYWNlSWQpIHtcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0J2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0dmFyXHJcblx0XHRib2R5ID0gcmVxLmJvZHksXHJcblx0XHRuZXh0U3RlcFVzZXJzID0gW107XHJcblxyXG5cclxuXHRzd2l0Y2ggKGRlYWxfdHlwZSkge1xyXG5cdFx0Y2FzZSAnc3BlY2lmeVVzZXInOlxyXG5cdFx0XHR2YXIgc3BlY2lmeVVzZXJJZHMgPSBib2R5LnNwZWNpZnlVc2VySWRzO1xyXG5cclxuXHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRVc2VycyhzcGFjZUlkLCBzcGVjaWZ5VXNlcklkcyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnYXBwbGljYW50Um9sZSc6XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdGFwcGxpY2FudElkID0gYm9keS5hcHBsaWNhbnRJZCxcclxuXHRcdFx0XHRhcHByb3ZlUm9sZUlkcyA9IGJvZHkuYXBwcm92ZVJvbGVJZHM7XHJcblx0XHRcdHZhciBhcHBsaWNhbnQgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcihzcGFjZUlkLCBhcHBsaWNhbnRJZCk7XHJcblxyXG5cdFx0XHRpZiAoYXBwbGljYW50KVxyXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0Um9sZVVzZXJzQnlPcmdzQW5kUm9sZXMoc3BhY2VJZCwgYXBwbGljYW50Lm9yZ2FuaXphdGlvbnMsIGFwcHJvdmVSb2xlSWRzKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdoclJvbGUnOlxyXG5cdFx0XHR2YXIgYXBwcm92ZUhyUm9sZUlkcyA9IGJvZHkuYXBwcm92ZUhyUm9sZUlkcztcclxuXHRcdFx0aWYgKGFwcHJvdmVIclJvbGVJZHMpXHJcblx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRIclJvbGVzVXNlcnMoc3BhY2VJZCwgYXBwcm92ZUhyUm9sZUlkcyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnYXBwbGljYW50U3VwZXJpb3InOlxyXG5cdFx0XHR2YXIgYXBwbGljYW50SWQgPSBib2R5LmFwcGxpY2FudElkO1xyXG5cdFx0XHR2YXIgYXBwbGljYW50ID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXIoc3BhY2VJZCwgYXBwbGljYW50SWQpO1xyXG5cdFx0XHRpZiAoYXBwbGljYW50Lm1hbmFnZXIpIHtcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXJzKHNwYWNlSWQsIGFwcGxpY2FudC5tYW5hZ2VyKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ2FwcGxpY2FudCc6XHJcblx0XHRcdHZhciBhcHBsaWNhbnRJZCA9IGJvZHkuYXBwbGljYW50SWQ7XHJcblx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0VXNlcnMoc3BhY2VJZCwgYXBwbGljYW50SWQpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ3VzZXJGaWVsZCc6XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdHVzZXJGaWVsZCA9IGJvZHkudXNlckZpZWxkLFxyXG5cdFx0XHRcdHVzZXJGaWVsZFZhbHVlID0gYm9keS51c2VyRmllbGRWYWx1ZTtcclxuXHRcdFx0aWYgKHVzZXJGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pXVzZXJGaWVsZFZhbHVl5YC85Li6QXJyYXlcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXJzKHNwYWNlSWQsIHVzZXJGaWVsZFZhbHVlKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzLnB1c2goV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXIoc3BhY2VJZCwgdXNlckZpZWxkVmFsdWUpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ29yZ0ZpZWxkJzpcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0b3JncyxcclxuXHRcdFx0XHRvcmdDaGlsZHJlbnMsXHJcblx0XHRcdFx0b3JnRmllbGQgPSBib2R5Lm9yZ0ZpZWxkLFxyXG5cdFx0XHRcdG9yZ0ZpZWxkVmFsdWUgPSBib2R5Lm9yZ0ZpZWxkVmFsdWU7XHJcblx0XHRcdGlmIChvcmdGaWVsZFZhbHVlKSB7XHJcblx0XHRcdFx0aWYgKG9yZ0ZpZWxkLmlzX211bHRpc2VsZWN0KSB7IC8v5aaC5p6c5aSa6YCJ77yM5Lulb3JnRmllbGRWYWx1ZeWAvOS4ukFycmF5XHJcblx0XHRcdFx0XHRvcmdzID0gV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnMob3JnRmllbGRWYWx1ZSk7XHJcblx0XHRcdFx0XHRvcmdDaGlsZHJlbnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc0NoaWxkcmVucyhzcGFjZUlkLCBvcmdGaWVsZFZhbHVlKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0b3JncyA9IFtXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uKG9yZ0ZpZWxkVmFsdWUpXTtcclxuXHRcdFx0XHRcdG9yZ0NoaWxkcmVucyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25DaGlsZHJlbnMoc3BhY2VJZCwgb3JnRmllbGRWYWx1ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc1VzZXJzKHNwYWNlSWQsIG9yZ0NoaWxkcmVucyk7XHJcblxyXG5cdFx0XHRcdG9yZ0ZpZWxkVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0T3JnYW5pemF0aW9uc1VzZXJzKHNwYWNlSWQsIG9yZ3MpO1xyXG5cclxuXHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gbmV4dFN0ZXBVc2Vycy5jb25jYXQob3JnRmllbGRVc2Vycyk7XHJcblxyXG5cdFx0XHRcdGlmICghbmV4dFN0ZXBVc2VycyB8fCBuZXh0U3RlcFVzZXJzLmxlbmd0aCA8IDEpIHtcclxuXHRcdFx0XHRcdGVycm9yID0gXCJPUkdfTk9fTUVNQkVSU1wiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlcnJvciA9IFwiRklFTERfVkFMVUVfRU1QVFlcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdzcGVjaWZ5T3JnJzpcclxuXHRcdFx0dmFyIHNwZWNpZnlPcmdJZHMgPSBib2R5LnNwZWNpZnlPcmdJZHM7XHJcblx0XHRcdHZhciBzcGVjaWZ5T3JncyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zKHNwZWNpZnlPcmdJZHMpO1xyXG5cdFx0XHR2YXIgc3BlY2lmeU9yZ0NoaWxkcmVucyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zQ2hpbGRyZW5zKHNwYWNlSWQsIHNwZWNpZnlPcmdJZHMpO1xyXG5cclxuXHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRPcmdhbml6YXRpb25zVXNlcnMoc3BhY2VJZCwgc3BlY2lmeU9yZ3MpO1xyXG5cdFx0XHRuZXh0U3RlcFVzZXJzID0gbmV4dFN0ZXBVc2Vycy5jb25jYXQoV29ya2Zsb3dNYW5hZ2VyLmdldE9yZ2FuaXphdGlvbnNVc2VycyhzcGFjZUlkLCBzcGVjaWZ5T3JnQ2hpbGRyZW5zKSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAndXNlckZpZWxkUm9sZSc6XHJcblx0XHRcdHZhclxyXG5cdFx0XHRcdHVzZXJGaWVsZCA9IGJvZHkudXNlckZpZWxkLFxyXG5cdFx0XHRcdHVzZXJGaWVsZFZhbHVlID0gYm9keS51c2VyRmllbGRWYWx1ZSxcclxuXHRcdFx0XHRhcHByb3ZlclJvbGVJZHMgPSBib2R5LmFwcHJvdmVyUm9sZUlkcztcclxuXHRcdFx0aWYgKHVzZXJGaWVsZFZhbHVlKSB7XHJcblx0XHRcdFx0aWYgKHVzZXJGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pXVzZXJGaWVsZFZhbHVl5YC85Li6QXJyYXlcclxuXHRcdFx0XHRcdG5leHRTdGVwVXNlcnMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0Um9sZVVzZXJzQnlVc2Vyc0FuZFJvbGVzKHNwYWNlSWQsIHVzZXJGaWVsZFZhbHVlLCBhcHByb3ZlclJvbGVJZHMpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5VXNlcnNBbmRSb2xlcyhzcGFjZUlkLCBbdXNlckZpZWxkVmFsdWVdLCBhcHByb3ZlclJvbGVJZHMpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCFuZXh0U3RlcFVzZXJzIHx8IG5leHRTdGVwVXNlcnMubGVuZ3RoIDwgMSkge1xyXG5cdFx0XHRcdFx0ZXJyb3IgPSBcIlJPTEVfTk9fTUVNQkVSU1wiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlcnJvciA9IFwiRklFTERfVkFMVUVfRU1QVFlcIjtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnb3JnRmllbGRSb2xlJzpcclxuXHRcdFx0dmFyXHJcblx0XHRcdFx0b3JnRmllbGQgPSBib2R5Lm9yZ0ZpZWxkLFxyXG5cdFx0XHRcdG9yZ0ZpZWxkVmFsdWUgPSBib2R5Lm9yZ0ZpZWxkVmFsdWUsXHJcblx0XHRcdFx0YXBwcm92ZXJSb2xlSWRzID0gYm9keS5hcHByb3ZlclJvbGVJZHM7XHJcblxyXG5cdFx0XHRpZiAob3JnRmllbGRWYWx1ZSkge1xyXG5cdFx0XHRcdGlmIChvcmdGaWVsZC5pc19tdWx0aXNlbGVjdCkgeyAvL+WmguaenOWkmumAie+8jOS7pW9yZ0ZpZWxkVmFsdWXlgLzkuLpBcnJheVxyXG5cdFx0XHRcdFx0bmV4dFN0ZXBVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRSb2xlVXNlcnNCeU9yZ3NBbmRSb2xlcyhzcGFjZUlkLCBvcmdGaWVsZFZhbHVlLCBhcHByb3ZlclJvbGVJZHMpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuZXh0U3RlcFVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFJvbGVVc2Vyc0J5T3Jnc0FuZFJvbGVzKHNwYWNlSWQsIFtvcmdGaWVsZFZhbHVlXSwgYXBwcm92ZXJSb2xlSWRzKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICghbmV4dFN0ZXBVc2VycyB8fCBuZXh0U3RlcFVzZXJzLmxlbmd0aCA8IDEpIHtcclxuXHRcdFx0XHRcdGVycm9yID0gXCJST0xFX05PX01FTUJFUlNcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZXJyb3IgPSBcIkZJRUxEX1ZBTFVFX0VNUFRZXCI7XHJcblx0XHRcdH1cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRicmVhaztcclxuXHR9XHJcblxyXG5cdHZhciByZXN1bHQgPSBbXTtcclxuXHJcblx0bmV4dFN0ZXBVc2Vycy5mb3JFYWNoKGZ1bmN0aW9uKHN1KSB7XHJcblx0XHRpZihzdS51c2VyX2FjY2VwdGVkKXtcclxuXHRcdFx0dmFyIG8gPSB7XHJcblx0XHRcdFx0aWQ6IHN1LmlkLFxyXG5cdFx0XHRcdG5hbWU6IHN1Lm5hbWVcclxuXHRcdFx0fTtcclxuXHRcdFx0cmVzdWx0LnB1c2gobyk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdGNvZGU6IDIwMCxcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0J25leHRTdGVwVXNlcnMnOiBXb3JrZmxvd01hbmFnZXIudW5pcVVzZXJzKHJlc3VsdCksXHJcblx0XHRcdCdlcnJvcic6IGVycm9yXHJcblx0XHR9XHJcblx0fSk7XHJcbn0pIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9nZXRTcGFjZVVzZXJzXCIsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xyXG4gIHZhclxyXG4gICAgdXNlcklkcyA9IHJlcS5ib2R5LnVzZXJJZHMsXHJcbiAgICBzcGFjZUlkID0gcmVxLnF1ZXJ5LnNwYWNlSWQsXHJcbiAgICBzcGFjZVVzZXJzID0gW11cclxuICA7XHJcblxyXG4gIGlmICghdXNlcklkcyB8fCAhc3BhY2VJZCkge1xyXG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG4gICAgICBjb2RlOiAyMDAsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICAnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzcGFjZVVzZXJzID0gV29ya2Zsb3dNYW5hZ2VyLmdldFVzZXJzKHNwYWNlSWQsIHVzZXJJZHMpO1xyXG5cclxuICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcbiAgICBjb2RlOiAyMDAsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICdzcGFjZVVzZXJzJzogc3BhY2VVc2Vyc1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KVxyXG5cclxuXHJcbiAgXHJcbiAgIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9nZXRGb3JtdWxhVXNlck9iamVjdHNcIiwgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgdmFyXHJcbiAgICB1c2VySWRzID0gcmVxLmJvZHkudXNlcklkcyxcclxuICAgIHNwYWNlSWQgPSByZXEucXVlcnkuc3BhY2VJZCxcclxuICAgIHNwYWNlVXNlcnMgPSBbXVxyXG4gIDtcclxuXHJcbiAgaWYgKCF1c2VySWRzIHx8ICFzcGFjZUlkKSB7XHJcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcbiAgICAgIGNvZGU6IDIwMCxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgICdlcnJvcnMnOiAn57y65bCR5Y+C5pWwJ1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhciB1c2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdChzcGFjZUlkLCB1c2VySWRzKTtcclxuXHJcbiAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG4gICAgY29kZTogMjAwLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAnc3BhY2VVc2Vycyc6IHVzZXJzXHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pXHJcblxyXG5cclxuICBcclxuICAiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2luaXRfZm9ybXVsYV92YWx1ZXNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcclxuXHR2YXJcclxuXHRcdGZpZWxkcyA9IHJlcS5ib2R5LmZpZWxkcyxcclxuXHRcdGF1dG9Gb3JtRG9jID0gcmVxLmJvZHkuYXV0b0Zvcm1Eb2MsXHJcblx0XHRhcHByb3ZlciA9IHJlcS5ib2R5LmFwcHJvdmVyLFxyXG5cdFx0YXBwbGljYW50ID0gcmVxLmJvZHkuYXBwbGljYW50LFxyXG5cclxuXHRcdHNwYWNlSWQgPSByZXEucXVlcnkuc3BhY2VJZCxcclxuXHJcblx0XHRzcGFjZVVzZXJzID0gW107XHJcblxyXG5cdGlmICghZmllbGRzIHx8ICFzcGFjZUlkIHx8ICFhdXRvRm9ybURvYyB8fCAhYXBwcm92ZXIgfHwgIWFwcGxpY2FudCkge1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRmb3JtdWxhX3ZhbHVlcyA9IEZvcm1fZm9ybXVsYS5pbml0X2Zvcm11bGFfdmFsdWVzKGZpZWxkcywgYXV0b0Zvcm1Eb2MsIGFwcHJvdmVyLCBhcHBsaWNhbnQsIHNwYWNlSWQpO1xyXG5cclxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRjb2RlOiAyMDAsXHJcblx0XHRkYXRhOiB7XHJcblx0XHRcdCdmb3JtdWxhX3ZhbHVlcyc6IGZvcm11bGFfdmFsdWVzXHJcblx0XHR9XHJcblx0fSk7XHJcbn0pXHJcbiIsIkpzb25Sb3V0ZXMuYWRkIFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvZ2V0TmFtZUZvclVzZXJcIiwgIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdHVzZXJJZCA9IHJlcS5ib2R5LnVzZXJJZFxyXG5cclxuXHRcdGlmIG5vdCB1c2VySWQgXHJcblx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIFxyXG5cdFx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0dXNlciA9IFdvcmtmbG93TWFuYWdlci5nZXROYW1lRm9yVXNlcih1c2VySWQpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywgXHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge3VzZXI6IHVzZXJ9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9XHJcblx0XHJcblx0XHRcclxuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9nZXROYW1lRm9yVXNlclwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgZSwgdXNlciwgdXNlcklkO1xuICB0cnkge1xuICAgIHVzZXJJZCA9IHJlcS5ib2R5LnVzZXJJZDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHVzZXIgPSBXb3JrZmxvd01hbmFnZXIuZ2V0TmFtZUZvclVzZXIodXNlcklkKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICB1c2VyOiB1c2VyXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvZGVzaWduZXIvc3RhcnR1cCcsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGNvbXBhbnlJZCA9IHJlcS5xdWVyeT8uY29tcGFueUlkIHx8ICcnXHJcblxyXG5cdFx0c3BhY2VzUXVlcnkgPSB7IGFkbWluczogY3VycmVudF91c2VyIH1cclxuXHJcblx0XHRpZiBjb21wYW55SWRcclxuXHRcdFx0b3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGNvbXBhbnlJZCwgeyBmaWVsZHM6IHsgc3BhY2U6MSB9IH0pXHJcblx0XHRcdGlmIG5vdCBvcmdcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjb21wYW55SWQgaXMgaW52YWxpZCcpXHJcblxyXG5cdFx0XHRzcGFjZXNRdWVyeSA9IHsgX2lkOiBvcmcuc3BhY2UgfVxyXG5cclxuXHRcdHNwYWNlcyA9IGRiLnNwYWNlcy5maW5kKHNwYWNlc1F1ZXJ5KS5mZXRjaCgpXHJcblxyXG5cdFx0c3BhY2VJZHMgPSBfLnBsdWNrIHNwYWNlcywgJ19pZCdcclxuXHJcblx0XHRxdWVyeSA9IHsgc3BhY2U6IHsgJGluOiBzcGFjZUlkcyB9IH1cclxuXHRcdGlmIGNvbXBhbnlJZFxyXG5cdFx0XHRxdWVyeS5jb21wYW55X2lkID0gY29tcGFueUlkXHJcblxyXG5cdFx0c3BhY2VVc2VycyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQocXVlcnkpLmZldGNoKClcclxuXHJcblx0XHRmb3JtcyA9IGRiLmZvcm1zLmZpbmQocXVlcnksIHsgZmllbGRzOiB7IG5hbWU6MSwgc3RhdGU6MSwgaXNfZGVsZXRlZDoxLCBpc192YWxpZDoxLCBzcGFjZToxLCBkZXNjcmlwdGlvbjoxLCBoZWxwX3RleHQ6MSxcclxuXHRcdGNyZWF0ZWQ6MSwgY3JlYXRlZF9ieToxLCBjdXJyZW50OjEsIGNhdGVnb3J5OjEsIGluc3RhbmNlX3N0eWxlOjEsIGNvbXBhbnlfaWQ6MSB9IH0pLmZldGNoKClcclxuXHJcblx0XHRmbG93cyA9IGRiLmZsb3dzLmZpbmQocXVlcnksIHsgZmllbGRzOiB7IG5hbWU6MSwgbmFtZV9mb3JtdWxhOjEsIGNvZGVfZm9ybXVsYToxLCBzcGFjZToxLCBkZXNjcmlwdGlvbjoxLCBpc192YWxpZDoxLCBmb3JtOjEsXHJcblx0XHRmbG93dHlwZToxLCBzdGF0ZToxLCBpc19kZWxldGVkOjEsIGNyZWF0ZWQ6MSwgY3JlYXRlZF9ieToxLCBoZWxwX3RleHQ6MSwgY3VycmVudF9ubzoxLCBjdXJyZW50OjEsIHBlcm1zOjEsIGVycm9yX21lc3NhZ2U6MSwgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczoxLCBjb21wYW55X2lkOjEgfSB9KS5mZXRjaCgpXHJcblxyXG5cdFx0cm9sZXMgPSBkYi5mbG93X3JvbGVzLmZpbmQocXVlcnkpLmZldGNoKClcclxuXHJcblx0XHRvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpXHJcblxyXG5cdFx0cG9zaXRpb25zID0gZGIuZmxvd19wb3NpdGlvbnMuZmluZChxdWVyeSkuZmV0Y2goKVxyXG5cclxuXHRcdGNhdGVnb3JpZXMgPSBkYi5jYXRlZ29yaWVzLmZpbmQoeyBzcGFjZTogeyAkaW46IHNwYWNlSWRzIH0gfSkuZmV0Y2goKVxyXG5cclxuXHRcdHVzZXJJZHMgPSBfLnBsdWNrIHNwYWNlVXNlcnMsICd1c2VyJ1xyXG5cdFx0dXNlcnMgPSBkYi51c2Vycy5maW5kKHsgX2lkOiB7ICRpbjogdXNlcklkcyB9IH0sIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KS5mZXRjaCgpXHJcblxyXG5cdFx0cmVzdWx0ID0ge31cclxuXHRcdHJlc3VsdC5TcGFjZVVzZXJzID0gc3BhY2VVc2Vyc1xyXG5cdFx0cmVzdWx0LlVzZXJzID0gdXNlcnNcclxuXHRcdHJlc3VsdC5Gb3JtcyA9IGZvcm1zXHJcblx0XHRyZXN1bHQuRmxvd3MgPSBmbG93c1xyXG5cdFx0cmVzdWx0Lk9yZ2FuaXphdGlvbnMgPSBvcmdhbml6YXRpb25zXHJcblx0XHRyZXN1bHQuUG9zaXRpb25zID0gcG9zaXRpb25zXHJcblx0XHRyZXN1bHQuUm9sZXMgPSByb2xlc1xyXG5cdFx0cmVzdWx0LkNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzXHJcblx0XHRyZXN1bHQuU3BhY2VzID0gc3BhY2VzXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0XHRkYXRhOiByZXN1bHRcclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cclxuXHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS9kZXNpZ25lci9zdGFydHVwJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGNhdGVnb3JpZXMsIGNvbXBhbnlJZCwgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgZmxvd3MsIGZvcm1zLCBvcmcsIG9yZ2FuaXphdGlvbnMsIHBvc2l0aW9ucywgcXVlcnksIHJlZiwgcmVzdWx0LCByb2xlcywgc3BhY2VJZHMsIHNwYWNlVXNlcnMsIHNwYWNlcywgc3BhY2VzUXVlcnksIHVzZXJJZHMsIHVzZXJzO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGNvbXBhbnlJZCA9ICgocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLmNvbXBhbnlJZCA6IHZvaWQgMCkgfHwgJyc7XG4gICAgc3BhY2VzUXVlcnkgPSB7XG4gICAgICBhZG1pbnM6IGN1cnJlbnRfdXNlclxuICAgIH07XG4gICAgaWYgKGNvbXBhbnlJZCkge1xuICAgICAgb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGNvbXBhbnlJZCwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBzcGFjZTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghb3JnKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NvbXBhbnlJZCBpcyBpbnZhbGlkJyk7XG4gICAgICB9XG4gICAgICBzcGFjZXNRdWVyeSA9IHtcbiAgICAgICAgX2lkOiBvcmcuc3BhY2VcbiAgICAgIH07XG4gICAgfVxuICAgIHNwYWNlcyA9IGRiLnNwYWNlcy5maW5kKHNwYWNlc1F1ZXJ5KS5mZXRjaCgpO1xuICAgIHNwYWNlSWRzID0gXy5wbHVjayhzcGFjZXMsICdfaWQnKTtcbiAgICBxdWVyeSA9IHtcbiAgICAgIHNwYWNlOiB7XG4gICAgICAgICRpbjogc3BhY2VJZHNcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChjb21wYW55SWQpIHtcbiAgICAgIHF1ZXJ5LmNvbXBhbnlfaWQgPSBjb21wYW55SWQ7XG4gICAgfVxuICAgIHNwYWNlVXNlcnMgPSBkYi5zcGFjZV91c2Vycy5maW5kKHF1ZXJ5KS5mZXRjaCgpO1xuICAgIGZvcm1zID0gZGIuZm9ybXMuZmluZChxdWVyeSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU6IDEsXG4gICAgICAgIHN0YXRlOiAxLFxuICAgICAgICBpc19kZWxldGVkOiAxLFxuICAgICAgICBpc192YWxpZDogMSxcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAxLFxuICAgICAgICBoZWxwX3RleHQ6IDEsXG4gICAgICAgIGNyZWF0ZWQ6IDEsXG4gICAgICAgIGNyZWF0ZWRfYnk6IDEsXG4gICAgICAgIGN1cnJlbnQ6IDEsXG4gICAgICAgIGNhdGVnb3J5OiAxLFxuICAgICAgICBpbnN0YW5jZV9zdHlsZTogMSxcbiAgICAgICAgY29tcGFueV9pZDogMVxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gICAgZmxvd3MgPSBkYi5mbG93cy5maW5kKHF1ZXJ5LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZTogMSxcbiAgICAgICAgbmFtZV9mb3JtdWxhOiAxLFxuICAgICAgICBjb2RlX2Zvcm11bGE6IDEsXG4gICAgICAgIHNwYWNlOiAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogMSxcbiAgICAgICAgaXNfdmFsaWQ6IDEsXG4gICAgICAgIGZvcm06IDEsXG4gICAgICAgIGZsb3d0eXBlOiAxLFxuICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgaXNfZGVsZXRlZDogMSxcbiAgICAgICAgY3JlYXRlZDogMSxcbiAgICAgICAgY3JlYXRlZF9ieTogMSxcbiAgICAgICAgaGVscF90ZXh0OiAxLFxuICAgICAgICBjdXJyZW50X25vOiAxLFxuICAgICAgICBjdXJyZW50OiAxLFxuICAgICAgICBwZXJtczogMSxcbiAgICAgICAgZXJyb3JfbWVzc2FnZTogMSxcbiAgICAgICAgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcbiAgICAgICAgY29tcGFueV9pZDogMVxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gICAgcm9sZXMgPSBkYi5mbG93X3JvbGVzLmZpbmQocXVlcnkpLmZldGNoKCk7XG4gICAgb3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZChxdWVyeSkuZmV0Y2goKTtcbiAgICBwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHF1ZXJ5KS5mZXRjaCgpO1xuICAgIGNhdGVnb3JpZXMgPSBkYi5jYXRlZ29yaWVzLmZpbmQoe1xuICAgICAgc3BhY2U6IHtcbiAgICAgICAgJGluOiBzcGFjZUlkc1xuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gICAgdXNlcklkcyA9IF8ucGx1Y2soc3BhY2VVc2VycywgJ3VzZXInKTtcbiAgICB1c2VycyA9IGRiLnVzZXJzLmZpbmQoe1xuICAgICAgX2lkOiB7XG4gICAgICAgICRpbjogdXNlcklkc1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBuYW1lOiAxXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICByZXN1bHQgPSB7fTtcbiAgICByZXN1bHQuU3BhY2VVc2VycyA9IHNwYWNlVXNlcnM7XG4gICAgcmVzdWx0LlVzZXJzID0gdXNlcnM7XG4gICAgcmVzdWx0LkZvcm1zID0gZm9ybXM7XG4gICAgcmVzdWx0LkZsb3dzID0gZmxvd3M7XG4gICAgcmVzdWx0Lk9yZ2FuaXphdGlvbnMgPSBvcmdhbml6YXRpb25zO1xuICAgIHJlc3VsdC5Qb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgcmVzdWx0LlJvbGVzID0gcm9sZXM7XG4gICAgcmVzdWx0LkNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuICAgIHJlc3VsdC5TcGFjZXMgPSBzcGFjZXM7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHJlc3VsdFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9lbmdpbmUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblxyXG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydBcHByb3ZhbHMnXSwgKGFwcHJvdmVfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdHV1Zmxvd01hbmFnZXIud29ya2Zsb3dfZW5naW5lKGFwcHJvdmVfZnJvbV9jbGllbnQsIGN1cnJlbnRfdXNlcl9pbmZvLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHt9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9lbmdpbmUnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGE7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0FwcHJvdmFscyddLCBmdW5jdGlvbihhcHByb3ZlX2Zyb21fY2xpZW50KSB7XG4gICAgICByZXR1cm4gdXVmbG93TWFuYWdlci53b3JrZmxvd19lbmdpbmUoYXBwcm92ZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8sIGN1cnJlbnRfdXNlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHt9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L2RyYWZ0cycsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHJcblx0XHRpbnNlcnRlZF9pbnN0YW5jZXMgPSBuZXcgQXJyYXlcclxuXHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdG5ld19pbnNfaWQgPSB1dWZsb3dNYW5hZ2VyLmNyZWF0ZV9pbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8pXHJcblxyXG5cdFx0XHRuZXdfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IG5ld19pbnNfaWQgfSwgeyBmaWVsZHM6IHsgc3BhY2U6IDEsIGZsb3c6IDEsIGZsb3dfdmVyc2lvbjogMSwgZm9ybTogMSwgZm9ybV92ZXJzaW9uOiAxIH0gfSlcclxuXHJcblx0XHRcdGluc2VydGVkX2luc3RhbmNlcy5wdXNoKG5ld19pbnMpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBpbnNlcnRzOiBpbnNlcnRlZF9pbnN0YW5jZXMgfVxyXG5cdFx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7IGVycm9yTWVzc2FnZTogZS5tZXNzYWdlIH1dIH1cclxuXHRcdH1cclxuXHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvZHJhZnRzJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhLCBpbnNlcnRlZF9pbnN0YW5jZXM7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBpbnNlcnRlZF9pbnN0YW5jZXMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBuZXdfaW5zLCBuZXdfaW5zX2lkO1xuICAgICAgbmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICBuZXdfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IG5ld19pbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgZmxvdzogMSxcbiAgICAgICAgICBmbG93X3ZlcnNpb246IDEsXG4gICAgICAgICAgZm9ybTogMSxcbiAgICAgICAgICBmb3JtX3ZlcnNpb246IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5zZXJ0ZWRfaW5zdGFuY2VzLnB1c2gobmV3X2lucyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgaW5zZXJ0czogaW5zZXJ0ZWRfaW5zdGFuY2VzXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L3JlbW92ZScsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHJcblx0XHRpbnNlcnRlZF9pbnN0YW5jZXMgPSBuZXcgQXJyYXlcclxuXHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdCMg6I635Y+W5LiA5LiqaW5zdGFuY2VcclxuXHRcdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKVxyXG5cdFx0XHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0XHRcdCMg6I635Y+W5LiA5Liqc3BhY2VcclxuXHRcdFx0c3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNl5LiL55qE5LiA5LiqdXNlclxyXG5cdFx0XHRzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQ6IGluc3RhbmNlLmZsb3d9KVxyXG5cclxuXHRcdFx0c3BhY2VVc2VyT3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XHJcblx0XHRcdFx0X2lkOiB7XHJcblx0XHRcdFx0XHQkaW46IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkuZmV0Y2goKTtcclxuXHJcblx0XHRcdCMg5Yik5pat5LiA5Liq55So5oi35piv5ZCm5piv5LiA5LiqaW5zdGFuY2XnmoTmj5DkuqTogIXmiJbogIXnlLPor7fkurog5oiWU3BhY2VBZG1pblxyXG5cdFx0XHRpZiAoaW5zdGFuY2Uuc3VibWl0dGVyIGlzbnQgY3VycmVudF91c2VyKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMgY3VycmVudF91c2VyKSBhbmQgIVdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmbG93LCBzcGFjZV91c2VyLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zKVxyXG5cdFx0XHRcdHRocm93IG5ldyAgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaCqOS4jeiDveWIoOmZpOatpOeUs+ivt+WNleOAglwiKVxyXG5cclxuXHRcdFx0ZGVsZXRlX29iaiA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKVxyXG5cdFx0XHRkZWxldGVfb2JqLmRlbGV0ZWQgPSBuZXcgRGF0ZVxyXG5cdFx0XHRkZWxldGVfb2JqLmRlbGV0ZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHJcblx0XHRcdGRiLmRlbGV0ZWRfaW5zdGFuY2VzLmluc2VydChkZWxldGVfb2JqKVxyXG5cclxuXHRcdFx0IyDliKDpmaRpbnN0YW5jZVxyXG5cdFx0XHRkYi5pbnN0YW5jZXMucmVtb3ZlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKVxyXG5cclxuXHRcdFx0aWYgZGVsZXRlX29iai5zdGF0ZSBpc250IFwiZHJhZnRcIlxyXG5cdFx0XHRcdCPlj5HpgIHnu5nlvoXlpITnkIbkurosICPlj5HpgIHnu5nooqvkvKDpmIXkurpcclxuXHRcdFx0XHRpbmJveF91c2VycyA9IGlmIGRlbGV0ZV9vYmouaW5ib3hfdXNlcnMgdGhlbiBkZWxldGVfb2JqLmluYm94X3VzZXJzIGVsc2UgW11cclxuXHRcdFx0XHRjY191c2VycyA9IGlmIGRlbGV0ZV9vYmouY2NfdXNlcnMgdGhlbiBkZWxldGVfb2JqLmNjX3VzZXJzIGVsc2UgW11cclxuXHRcdFx0XHR1c2VyX2lkcyA9IF8udW5pcShpbmJveF91c2Vycy5jb25jYXQoY2NfdXNlcnMpKVxyXG5cdFx0XHRcdF8uZWFjaCB1c2VyX2lkcywgKHVfaWQpLT5cclxuXHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcInRlcm1pbmF0ZV9hcHByb3ZhbFwiLCB1X2lkKVxyXG5cclxuXHRcdFx0XHQjIOWPkemAgeWIoOmZpOmAmuefpemCruS7tue7memAmui/h+agoemqjOeahOeUs+ivt+S6ui/loavljZXkurrvvIzlr7nnlLPor7fkurov5aGr5Y2V5Lq65ZCE55Sf5oiQ5LiA5p2hc210cCBtZXNzYWdlXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJtb25pdG9yX2RlbGV0ZV9hcHBsaWNhbnRcIiwgZGVsZXRlX29iaiwgXCJcIiwgY3VycmVudF91c2VyX2luZm8pXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgaW5zZXJ0czogaW5zZXJ0ZWRfaW5zdGFuY2VzfVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcblx0XHJcblx0XHQiLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L3JlbW92ZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YSwgaW5zZXJ0ZWRfaW5zdGFuY2VzO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgaW5zZXJ0ZWRfaW5zdGFuY2VzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgY2NfdXNlcnMsIGRlbGV0ZV9vYmosIGZsb3csIGluYm94X3VzZXJzLCBpbnN0YW5jZSwgc3BhY2UsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMsIHNwYWNlX2lkLCBzcGFjZV91c2VyLCB1c2VyX2lkcztcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuICAgICAgc3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpbnN0YW5jZS5mbG93XG4gICAgICB9KTtcbiAgICAgIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uc1xuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgICAgaWYgKChpbnN0YW5jZS5zdWJtaXR0ZXIgIT09IGN1cnJlbnRfdXNlcikgJiYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgJiYgIVdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmbG93LCBzcGFjZV91c2VyLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaCqOS4jeiDveWIoOmZpOatpOeUs+ivt+WNleOAglwiKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZV9vYmogPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSk7XG4gICAgICBkZWxldGVfb2JqLmRlbGV0ZWQgPSBuZXcgRGF0ZTtcbiAgICAgIGRlbGV0ZV9vYmouZGVsZXRlZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIGRiLmRlbGV0ZWRfaW5zdGFuY2VzLmluc2VydChkZWxldGVfb2JqKTtcbiAgICAgIGRiLmluc3RhbmNlcy5yZW1vdmUoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pO1xuICAgICAgaWYgKGRlbGV0ZV9vYmouc3RhdGUgIT09IFwiZHJhZnRcIikge1xuICAgICAgICBpbmJveF91c2VycyA9IGRlbGV0ZV9vYmouaW5ib3hfdXNlcnMgPyBkZWxldGVfb2JqLmluYm94X3VzZXJzIDogW107XG4gICAgICAgIGNjX3VzZXJzID0gZGVsZXRlX29iai5jY191c2VycyA/IGRlbGV0ZV9vYmouY2NfdXNlcnMgOiBbXTtcbiAgICAgICAgdXNlcl9pZHMgPSBfLnVuaXEoaW5ib3hfdXNlcnMuY29uY2F0KGNjX3VzZXJzKSk7XG4gICAgICAgIF8uZWFjaCh1c2VyX2lkcywgZnVuY3Rpb24odV9pZCkge1xuICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJ0ZXJtaW5hdGVfYXBwcm92YWxcIiwgdV9pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJtb25pdG9yX2RlbGV0ZV9hcHBsaWNhbnRcIiwgZGVsZXRlX29iaiwgXCJcIiwgY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGluc2VydHM6IGluc2VydGVkX2luc3RhbmNlc1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9zdWJtaXQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRyZXN1bHQgPSBbXVxyXG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgKGluc3RhbmNlX2Zyb21fY2xpZW50KSAtPlxyXG5cdFx0XHRyID0gdXVmbG93TWFuYWdlci5zdWJtaXRfaW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnQsIGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cdFx0XHRpZiByLmFsZXJ0c1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKHIpXHJcblx0XHRcdGlmIG5vdCBfLmlzRW1wdHkoaW5zdGFuY2VfZnJvbV9jbGllbnRbJ2luYm94X3VzZXJzJ10pXHJcblx0XHRcdFx0IyDlpoLmnpzmmK/ovazlj5HlsLHpnIDopoHnu5nlvZPliY3nlKjmiLflj5HpgIFwdXNoIOmHjeaWsOiuoeeul2JhZGdlXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIGN1cnJlbnRfdXNlcik7XHJcblxyXG5cdFx0XHRpZiBfLmlzRW1wdHkoci5hbGVydHMpXHJcblx0XHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9mcm9tX2NsaWVudC5faWQpXHJcblx0XHRcdFx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3dcclxuXHRcdFx0XHRjdXJyZW50X2FwcHJvdmUgPSBpbnN0YW5jZV9mcm9tX2NsaWVudC50cmFjZXNbMF0uYXBwcm92ZXNbMF1cclxuXHRcdFx0XHQjIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhmbG93X2lkLCBpbnN0YW5jZSwgY3VycmVudF9hcHByb3ZlLCAnZHJhZnRfc3VibWl0JywgY3VycmVudF91c2VyLCBpbnN0YW5jZS5pbmJveF91c2VycylcclxuXHJcblx0XHRcdCMg5Yik5pat55Sz6K+35Y2V5piv5ZCm5YiG5Y+R77yM5YiG5Y+R5paH5Lu257uT5p2f5o+Q6YaS5Y+R6LW35Lq6XHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuZGlzdHJpYnV0ZWRJbnN0YW5jZXNSZW1pbmQoaW5zdGFuY2VfZnJvbV9jbGllbnQpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0XHRkYXRhOiB7IHJlc3VsdDogcmVzdWx0IH1cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9zdWJtaXQnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGEsIHJlc3VsdDtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIHJlc3VsdCA9IFtdO1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgY3VycmVudF9hcHByb3ZlLCBmbG93X2lkLCBpbnN0YW5jZSwgcjtcbiAgICAgIHIgPSB1dWZsb3dNYW5hZ2VyLnN1Ym1pdF9pbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudCwgY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgaWYgKHIuYWxlcnRzKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHIpO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzRW1wdHkoaW5zdGFuY2VfZnJvbV9jbGllbnRbJ2luYm94X3VzZXJzJ10pKSB7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCBjdXJyZW50X3VzZXIpO1xuICAgICAgfVxuICAgICAgaWYgKF8uaXNFbXB0eShyLmFsZXJ0cykpIHtcbiAgICAgICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9mcm9tX2NsaWVudC5faWQpO1xuICAgICAgICBmbG93X2lkID0gaW5zdGFuY2UuZmxvdztcbiAgICAgICAgY3VycmVudF9hcHByb3ZlID0gaW5zdGFuY2VfZnJvbV9jbGllbnQudHJhY2VzWzBdLmFwcHJvdmVzWzBdO1xuICAgICAgICBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhmbG93X2lkLCBpbnN0YW5jZSwgY3VycmVudF9hcHByb3ZlLCAnZHJhZnRfc3VibWl0JywgY3VycmVudF91c2VyLCBpbnN0YW5jZS5pbmJveF91c2Vycyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXVmbG93TWFuYWdlci5kaXN0cmlidXRlZEluc3RhbmNlc1JlbWluZChpbnN0YW5jZV9mcm9tX2NsaWVudCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgcmVzdWx0OiByZXN1bHRcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvdGVybWluYXRlJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdFx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keVxyXG5cdFx0Xy5lYWNoIGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgKGluc3RhbmNlX2Zyb21fY2xpZW50KSAtPlxyXG5cdFx0XHR0ZXJtaW5hdGVfcmVhc29uID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJ0ZXJtaW5hdGVfcmVhc29uXCJdXHJcblx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl1cclxuXHRcdFx0IyDojrflj5bkuIDkuKppbnN0YW5jZVxyXG5cdFx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRcdHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2VcclxuXHRcdFx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3dcclxuXHRcdFx0IyDojrflj5bkuIDkuKpzcGFjZVxyXG5cdFx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHRcdCMg6I635Y+W5LiA5LiqZmxvd1xyXG5cdFx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGZsb3dfaWQpXHJcblx0XHRcdCMg5Yik5pat5LiA5LiqaW5zdGFuY2XmmK/lkKbkuLrlrqHmoLjkuK3nirbmgIFcclxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSlcclxuXHRcdFx0IyDojrflj5bkuIDkuKpzcGFjZeS4i+eahOS4gOS4qnVzZXJcclxuXHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdCMg6I635Y+Wc3BhY2VfdXNlcuaJgOWcqOeahOmDqOmXqOS/oeaBr1xyXG5cdFx0XHRzcGFjZV91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKHNwYWNlX3VzZXIpXHJcblx0XHRcdCMg6I635Y+W57uT5p2f6IqC54K5XHJcblx0XHRcdGluc3RhbmNlX2Zsb3dfdmVyID0gbnVsbFxyXG5cdFx0XHRmbG93X3Zlcl9lbmRfc3RlcCA9IG51bGxcclxuXHRcdFx0Zmxvd192ZXJzID0gbmV3IEFycmF5XHJcblx0XHRcdGZsb3dfdmVycy5wdXNoKGZsb3cuY3VycmVudClcclxuXHRcdFx0Zmxvd192ZXJzID0gZmxvd192ZXJzLmNvbmNhdChmbG93Lmhpc3RvcnlzKVxyXG5cdFx0XHRpbnN0YW5jZV9mbG93X3ZlciA9IF8uZmluZChmbG93X3ZlcnMsIChmX3ZlciktPlxyXG5cdFx0XHRcdHJldHVybiBmX3Zlci5faWQgaXMgaW5zdGFuY2UuZmxvd192ZXJzaW9uXHJcblx0XHRcdClcclxuXHRcdFx0aWYgbm90IGluc3RhbmNlX2Zsb3dfdmVyXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrmib7liLDnlLPor7fljZXlr7nlupTmtYHnqIvniYjmnKxcIilcclxuXHRcdFx0Zmxvd192ZXJfZW5kX3N0ZXAgPSBfLmZpbmQoaW5zdGFuY2VfZmxvd192ZXIuc3RlcHMsIChmX3N0ZXApLT5cclxuXHRcdFx0XHRyZXR1cm4gZl9zdGVwLnN0ZXBfdHlwZSBpcyBcImVuZFwiXHJcblx0XHRcdClcclxuXHRcdFx0IyDosIPnlKhnZXRGbG93UGVybWlzc2lvbnPmlrnms5XvvIznnIvov5Tlm57nmoTnu5PmnpzkuK3mmK/lkKbmnIlhZG1pblxyXG5cdFx0XHRwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhmbG93X2lkLCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdG5vdyA9IG5ldyBEYXRlXHJcblx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdFx0IyBzcGFjZeeahGFkbWluLCDloavljZXkurog55Sz6K+35Lq6IOacieadg+mZkCDlj5bmtojnlLPor7dcclxuXHRcdFx0aWYgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSBvciBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSBvciBpbnN0YW5jZS5zdWJtaXR0ZXIgaXMgY3VycmVudF91c2VyIG9yIGluc3RhbmNlLmFwcGxpY2FudCBpcyBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRpZiBub3QgdGVybWluYXRlX3JlYXNvblxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJyxcIui/mOacquWhq+WGmeW8uuWItue7k+adn+eUs+ivt+WNleeahOeQhueUse+8jOaTjeS9nOWksei0pVwiKVxyXG5cclxuXHRcdFx0XHRpbnN0YW5jZV90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsICh0cmFjZSktPlxyXG5cdFx0XHRcdFx0cmV0dXJuIHRyYWNlLmlzX2ZpbmlzaGVkIGlzIGZhbHNlXHJcblx0XHRcdFx0KVxyXG5cclxuXHRcdFx0XHR0cmFjZXMgPSBpbnN0YW5jZS50cmFjZXNcclxuXHRcdFx0XHRpID0gMFxyXG5cdFx0XHRcdHdoaWxlIGkgPCB0cmFjZXMubGVuZ3RoXHJcblx0XHRcdFx0XHRpZiB0cmFjZXNbaV0uaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdFx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZeiusOW9lVxyXG5cdFx0XHRcdFx0XHR0cmFjZXNbaV0uaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdHRyYWNlc1tpXS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRoID0gMFxyXG5cdFx0XHRcdFx0XHR3aGlsZSBoIDwgdHJhY2VzW2ldLmFwcHJvdmVzLmxlbmd0aFxyXG5cdFx0XHRcdFx0XHRcdGlmIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCBpcyBmYWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZS5hcHByb3Zl6K6w5b2VXHJcblx0XHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5qdWRnZSA9IG51bGxcclxuXHRcdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5kZXNjcmlwdGlvbiA9IG51bGxcclxuXHRcdFx0XHRcdFx0XHRoKytcclxuXHRcdFx0XHRcdFx0IyDmj5LlhaXlvZPliY1UcmFjZSB0cmFjZS5hcHByb3Zl6K6w5b2V77ya5b2TdHJhY2UudHlwZeS4uuWPluWbnuOAgeW8uuWItue7k+adn+aXtu+8jGlzX3JlYWQ9dHJ1ZeS4lHJlYWRfZGF0ZeS4uuW9k+WJjeaXtumXtOOAglxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUudHJhY2UgPSBpbnN0YW5jZV90cmFjZS5faWRcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS51c2VyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXVxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmR1ZV9kYXRlID0gaW5zdGFuY2VfdHJhY2UuZHVlX2RhdGVcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5yZWFkX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUuaXNfcmVhZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5kZXNjcmlwdGlvbiA9IHRlcm1pbmF0ZV9yZWFzb25cclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0XHRuZXdBcHByb3ZlLmNvc3RfdGltZSA9IG5ld0FwcHJvdmUuZmluaXNoX2RhdGUgLSBuZXdBcHByb3ZlLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSlcclxuXHRcdFx0XHRcdGkrK1xyXG5cclxuXHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0bmV3VHJhY2UgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0bmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbaW5zdGFuY2VfdHJhY2UuX2lkXVxyXG5cdFx0XHRcdCMgdHlwZS0tLeWBnOeUqFxyXG5cdFx0XHRcdCMgbmV3VHJhY2UudHlwZSA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0bmV3VHJhY2UuaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RlcCA9IGZsb3dfdmVyX2VuZF9zdGVwLl9pZFxyXG5cdFx0XHRcdG5ld1RyYWNlLm5hbWUgPSBmbG93X3Zlcl9lbmRfc3RlcC5uYW1lXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdG5ld1RyYWNlLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3VHJhY2UuanVkZ2UgPSBcInRlcm1pbmF0ZWRcIlxyXG5cclxuXHRcdFx0XHRzZXRPYmouc3RhdGUgPSBcImNvbXBsZXRlZFwiXHJcblx0XHRcdFx0c2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRvbGRfaW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2Vyc1xyXG5cdFx0XHRcdG9sZF9jY191c2VycyA9IGluc3RhbmNlLmNjX3VzZXJzIHx8IFtdXHJcblx0XHRcdFx0b2xkX291dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2Vyc1xyXG5cdFx0XHRcdHRlbXBVc2VycyA9IG5ldyBBcnJheVxyXG5cdFx0XHRcdF8uZWFjaChpbnN0YW5jZV90cmFjZS5hcHByb3ZlcywgKG5mdF9hcHByb3ZlKS0+XHJcblx0XHRcdFx0XHR0ZW1wVXNlcnMucHVzaChuZnRfYXBwcm92ZS51c2VyKVxyXG5cdFx0XHRcdFx0dGVtcFVzZXJzLnB1c2gobmZ0X2FwcHJvdmUuaGFuZGxlcilcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0c2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KHRlbXBVc2VycykpXHJcblx0XHRcdFx0c2V0T2JqLmluYm94X3VzZXJzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0c2V0T2JqLmNjX3VzZXJzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XHJcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0dHJhY2VzLnB1c2gobmV3VHJhY2UpXHJcblx0XHRcdFx0c2V0T2JqLnRyYWNlcyA9IHRyYWNlc1xyXG5cclxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBmbG93X3Zlcl9lbmRfc3RlcC5uYW1lXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlXHJcblxyXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9ian0pXHJcblx0XHRcdFx0aWYgclxyXG5cdFx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0XHRcdCPpgJrnn6XloavljZXkurrjgIHnlLPor7fkurpcclxuXHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwic3VibWl0X3Rlcm1pbmF0ZV9hcHBsaWNhbnRcIiwgaW5zLCB0ZXJtaW5hdGVfcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRcdFx0XHQj5Y+R6YCB57uZ5b6F5aSE55CG5Lq6IOiiq+S8oOmYheS6ulxyXG5cdFx0XHRcdFx0aWYgb2xkX2luYm94X3VzZXJzXHJcblx0XHRcdFx0XHRcdF8uZWFjaChfLnVuaXEob2xkX2luYm94X3VzZXJzLmNvbmNhdChvbGRfY2NfdXNlcnMpKSwgKHVzZXJfaWQpLT5cclxuXHRcdFx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJ0ZXJtaW5hdGVfYXBwcm92YWxcIiwgdXNlcl9pZClcclxuXHRcdFx0XHRcdFx0KVxyXG5cclxuXHRcdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICd0ZXJtaW5hdGUnLCBjdXJyZW50X3VzZXIsIFtdKVxyXG5cclxuXHRcdCPlj5HpgIHmtojmga/nu5nlvZPliY3nlKjmiLdcclxuXHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdGRhdGE6IHt9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9XHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvdGVybWluYXRlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBmbG93LCBmbG93X2lkLCBmbG93X3Zlcl9lbmRfc3RlcCwgZmxvd192ZXJzLCBoLCBpLCBpbnMsIGluc3RhbmNlLCBpbnN0YW5jZV9mbG93X3ZlciwgaW5zdGFuY2VfaWQsIGluc3RhbmNlX3RyYWNlLCBuZXdBcHByb3ZlLCBuZXdUcmFjZSwgbm93LCBvbGRfY2NfdXNlcnMsIG9sZF9pbmJveF91c2Vycywgb2xkX291dGJveF91c2VycywgcGVybWlzc2lvbnMsIHIsIHNldE9iaiwgc3BhY2UsIHNwYWNlX2lkLCBzcGFjZV91c2VyLCBzcGFjZV91c2VyX29yZ19pbmZvLCB0ZW1wVXNlcnMsIHRlcm1pbmF0ZV9yZWFzb24sIHRyYWNlcztcbiAgICAgIHRlcm1pbmF0ZV9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRlcm1pbmF0ZV9yZWFzb25cIl07XG4gICAgICBpbnN0YW5jZV9pZCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICBmbG93X2lkID0gaW5zdGFuY2UuZmxvdztcbiAgICAgIHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGZsb3dfaWQpO1xuICAgICAgdXVmbG93TWFuYWdlci5pc0luc3RhbmNlUGVuZGluZyhpbnN0YW5jZSk7XG4gICAgICBzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICBzcGFjZV91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKHNwYWNlX3VzZXIpO1xuICAgICAgaW5zdGFuY2VfZmxvd192ZXIgPSBudWxsO1xuICAgICAgZmxvd192ZXJfZW5kX3N0ZXAgPSBudWxsO1xuICAgICAgZmxvd192ZXJzID0gbmV3IEFycmF5O1xuICAgICAgZmxvd192ZXJzLnB1c2goZmxvdy5jdXJyZW50KTtcbiAgICAgIGZsb3dfdmVycyA9IGZsb3dfdmVycy5jb25jYXQoZmxvdy5oaXN0b3J5cyk7XG4gICAgICBpbnN0YW5jZV9mbG93X3ZlciA9IF8uZmluZChmbG93X3ZlcnMsIGZ1bmN0aW9uKGZfdmVyKSB7XG4gICAgICAgIHJldHVybiBmX3Zlci5faWQgPT09IGluc3RhbmNlLmZsb3dfdmVyc2lvbjtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFpbnN0YW5jZV9mbG93X3Zlcikge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNleWvueW6lOa1geeoi+eJiOacrFwiKTtcbiAgICAgIH1cbiAgICAgIGZsb3dfdmVyX2VuZF9zdGVwID0gXy5maW5kKGluc3RhbmNlX2Zsb3dfdmVyLnN0ZXBzLCBmdW5jdGlvbihmX3N0ZXApIHtcbiAgICAgICAgcmV0dXJuIGZfc3RlcC5zdGVwX3R5cGUgPT09IFwiZW5kXCI7XG4gICAgICB9KTtcbiAgICAgIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBpZiAocGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSB8fCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSB8fCBpbnN0YW5jZS5zdWJtaXR0ZXIgPT09IGN1cnJlbnRfdXNlciB8fCBpbnN0YW5jZS5hcHBsaWNhbnQgPT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICBpZiAoIXRlcm1pbmF0ZV9yZWFzb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIui/mOacquWhq+WGmeW8uuWItue7k+adn+eUs+ivt+WNleeahOeQhueUse+8jOaTjeS9nOWksei0pVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZV90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWNlLmlzX2ZpbmlzaGVkID09PSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdHJhY2VzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0cmFjZXNbaV0uaXNfZmluaXNoZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFjZXNbaV0uaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdHJhY2VzW2ldLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgaCA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaCA8IHRyYWNlc1tpXS5hcHByb3Zlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uanVkZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5kZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3QXBwcm92ZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnRyYWNlID0gaW5zdGFuY2VfdHJhY2UuX2lkO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnVzZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IHNwYWNlX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBpbnN0YW5jZV90cmFjZS5kdWVfZGF0ZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5qdWRnZSA9IFwidGVybWluYXRlZFwiO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5pc19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgIG5ld0FwcHJvdmUuZGVzY3JpcHRpb24gPSB0ZXJtaW5hdGVfcmVhc29uO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5jb3N0X3RpbWUgPSBuZXdBcHByb3ZlLmZpbmlzaF9kYXRlIC0gbmV3QXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBuZXdUcmFjZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgIG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgIG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtpbnN0YW5jZV90cmFjZS5faWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIG5ld1RyYWNlLnN0ZXAgPSBmbG93X3Zlcl9lbmRfc3RlcC5faWQ7XG4gICAgICAgIG5ld1RyYWNlLm5hbWUgPSBmbG93X3Zlcl9lbmRfc3RlcC5uYW1lO1xuICAgICAgICBuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICBuZXdUcmFjZS5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3VHJhY2UuanVkZ2UgPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgc2V0T2JqLnN0YXRlID0gXCJjb21wbGV0ZWRcIjtcbiAgICAgICAgc2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgIG9sZF9pbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzO1xuICAgICAgICBvbGRfY2NfdXNlcnMgPSBpbnN0YW5jZS5jY191c2VycyB8fCBbXTtcbiAgICAgICAgb2xkX291dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2VycztcbiAgICAgICAgdGVtcFVzZXJzID0gbmV3IEFycmF5O1xuICAgICAgICBfLmVhY2goaW5zdGFuY2VfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKG5mdF9hcHByb3ZlKSB7XG4gICAgICAgICAgdGVtcFVzZXJzLnB1c2gobmZ0X2FwcHJvdmUudXNlcik7XG4gICAgICAgICAgcmV0dXJuIHRlbXBVc2Vycy5wdXNoKG5mdF9hcHByb3ZlLmhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KHRlbXBVc2VycykpO1xuICAgICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIHNldE9iai5jY191c2VycyA9IG5ldyBBcnJheTtcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbm93O1xuICAgICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIHRyYWNlcy5wdXNoKG5ld1RyYWNlKTtcbiAgICAgICAgc2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gZmxvd192ZXJfZW5kX3N0ZXAubmFtZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlO1xuICAgICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwic3VibWl0X3Rlcm1pbmF0ZV9hcHBsaWNhbnRcIiwgaW5zLCB0ZXJtaW5hdGVfcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgICAgaWYgKG9sZF9pbmJveF91c2Vycykge1xuICAgICAgICAgICAgXy5lYWNoKF8udW5pcShvbGRfaW5ib3hfdXNlcnMuY29uY2F0KG9sZF9jY191c2VycykpLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJ0ZXJtaW5hdGVfYXBwcm92YWxcIiwgdXNlcl9pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAndGVybWluYXRlJywgY3VycmVudF91c2VyLCBbXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVhc3NpZ24nLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbJ19pZCddXHJcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdFx0XHQjIOmqjOivgWluc3RhbmNl5Li65a6h5qC45Lit54q25oCBXHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVBlbmRpbmcoaW5zdGFuY2UpXHJcblx0XHRcdCMg6aqM6K+B5b2T5YmN5omn6KGM6L2s562+5qC455qEdHJhY2XmnKrnu5PmnZ9cclxuXHRcdFx0bGFzdF90cmFjZV9mcm9tX2NsaWVudCA9IF8ubGFzdChpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRyYWNlc1wiXSlcclxuXHRcdFx0bGFzdF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRcdHJldHVybiB0Ll9pZCBpcyBsYXN0X3RyYWNlX2Zyb21fY2xpZW50W1wiX2lkXCJdXHJcblx0XHRcdClcclxuXHRcdFx0aWYgbGFzdF90cmFjZS5pc19maW5pc2hlZCBpcyB0cnVlXHJcblx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKVxyXG5cdFx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHsgX2lkOiBzcGFjZV9pZCB9LCB7IGZpZWxkczogeyBhZG1pbnM6IDEgfSB9KVxyXG5cdFx0XHRpZiAobm90IHBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55So5oi35rKh5pyJ5a+55b2T5YmN5rWB56iL55qE566h55CG5p2D6ZmQXCIpXHJcblxyXG5cdFx0XHRpbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzXHJcblx0XHRcdGluYm94X3VzZXJzX2Zyb21fY2xpZW50ID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJpbmJveF91c2Vyc1wiXVxyXG5cdFx0XHRyZWFzc2lnbl9yZWFzb24gPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlYXNzaWduX3JlYXNvblwiXVxyXG5cdFx0XHRub3RfaW5faW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UoaW5ib3hfdXNlcnMsIGluYm94X3VzZXJzX2Zyb21fY2xpZW50KVxyXG5cdFx0XHRuZXdfaW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UoaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQsIGluYm94X3VzZXJzKVxyXG5cdFx0XHQjIOiLpWFzc2lnbmVlPeWOn2luYm94X3VzZXJz77yM6K+05piO5LiN6ZyA6KaB5omn6KGM6L2s562+5qC477yM57O757uf5LuA5LmI6YO95LiN5YGaXHJcblx0XHRcdHJldHVybiBpZiBub3RfaW5faW5ib3hfdXNlcnMubGVuZ3RoIGlzIDAgYW5kIG5ld19pbmJveF91c2Vycy5sZW5ndGggaXMgMFxyXG5cdFx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XHJcblx0XHRcdG5vdyA9IG5ldyBEYXRlXHJcblx0XHRcdGkgPSAwXHJcblx0XHRcdGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMgPSBbXVxyXG5cdFx0XHR3aGlsZSBpIDwgbGFzdF90cmFjZS5hcHByb3Zlcy5sZW5ndGhcclxuXHRcdFx0XHRpZiBub3RfaW5faW5ib3hfdXNlcnMuaW5jbHVkZXMobGFzdF90cmFjZS5hcHByb3Zlc1tpXS5oYW5kbGVyKVxyXG5cdFx0XHRcdFx0aWYgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5pc19maW5pc2hlZCBpcyBmYWxzZSBhbmQgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS50eXBlIGlzbnQgXCJjY1wiIGFuZCBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnR5cGUgaXNudCBcImRpc3RyaWJ1dGVcIlxyXG5cdFx0XHRcdFx0XHRsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uanVkZ2UgPSBcInRlcm1pbmF0ZWRcIlxyXG5cdFx0XHRcdFx0XHRsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmRlc2NyaXB0aW9uID0gXCJcIlxyXG5cdFx0XHRcdFx0XHRsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmNvc3RfdGltZSA9IGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZmluaXNoX2RhdGUgLSBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0YXBwcm92ZV91c2Vyc19oYW5kbGVycy5wdXNoKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0udXNlcilcclxuXHRcdFx0XHRcdFx0YXBwcm92ZV91c2Vyc19oYW5kbGVycy5wdXNoKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaGFuZGxlcilcclxuXHRcdFx0XHRpKytcclxuXHRcdFx0IyDlnKjlkIzkuIB0cmFjZeS4i+aPkuWFpei9rOetvuaguOaTjeS9nOiAheeahGFwcHJvdmXorrDlvZVcclxuXHRcdFx0Y3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0Y3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbiB9LCB7IGZpZWxkczogeyBuYW1lOiAxLCBmdWxsbmFtZTogMSB9IH0pXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIgPSBuZXcgT2JqZWN0XHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmluc3RhbmNlID0gbGFzdF90cmFjZS5pbnN0YW5jZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLnRyYWNlID0gbGFzdF90cmFjZS5faWRcclxuXHRcdFx0YXNzaWduZWVfYXBwci5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0YXNzaWduZWVfYXBwci51c2VyID0gY3VycmVudF91c2VyXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmhhbmRsZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0YXNzaWduZWVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24ubmFtZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0YXNzaWduZWVfYXBwci5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmR1ZV9kYXRlID0gbGFzdF90cmFjZS5kdWVfZGF0ZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmp1ZGdlID0gXCJyZWFzc2lnbmVkXCJcclxuXHRcdFx0YXNzaWduZWVfYXBwci5pc19yZWFkID0gdHJ1ZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLmRlc2NyaXB0aW9uID0gcmVhc3NpZ25fcmVhc29uXHJcblx0XHRcdGFzc2lnbmVlX2FwcHIuaXNfZXJyb3IgPSBmYWxzZVxyXG5cdFx0XHRhc3NpZ25lZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3RcclxuXHRcdFx0YXNzaWduZWVfYXBwci5jb3N0X3RpbWUgPSBhc3NpZ25lZV9hcHByLmZpbmlzaF9kYXRlIC0gYXNzaWduZWVfYXBwci5zdGFydF9kYXRlXHJcblx0XHRcdGxhc3RfdHJhY2UuYXBwcm92ZXMucHVzaChhc3NpZ25lZV9hcHByKVxyXG5cdFx0XHQjIOWvueaWsOWinueahOavj+S9jeW+heWuoeaguOS6uu+8jOWQhOWinuWKoOS4gOadoeaWsOeahGFwcHJvdmVcclxuXHRcdFx0Xy5lYWNoKG5ld19pbmJveF91c2VycywgKHVzZXJfaWQpIC0+XHJcblx0XHRcdFx0bmV3X3VzZXIgPSBkYi51c2Vycy5maW5kT25lKHVzZXJfaWQsIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgdXNlcl9pZClcclxuXHRcdFx0XHR1c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShzcGFjZV91c2VyLm9yZ2FuaXphdGlvbiwgeyBmaWVsZHM6IHsgbmFtZTogMSwgZnVsbG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdG5ld19hcHByID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdG5ld19hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0XHRuZXdfYXBwci5pbnN0YW5jZSA9IGxhc3RfdHJhY2UuaW5zdGFuY2VcclxuXHRcdFx0XHRuZXdfYXBwci50cmFjZSA9IGxhc3RfdHJhY2UuX2lkXHJcblx0XHRcdFx0bmV3X2FwcHIuaXNfZmluaXNoZWQgPSBmYWxzZVxyXG5cdFx0XHRcdG5ld19hcHByLnVzZXIgPSB1c2VyX2lkXHJcblx0XHRcdFx0bmV3X2FwcHIudXNlcl9uYW1lID0gbmV3X3VzZXIubmFtZVxyXG5cclxuXHRcdFx0XHRoYW5kbGVyX2lkID0gdXNlcl9pZFxyXG5cdFx0XHRcdGhhbmRsZXJfaW5mbyA9IG5ld191c2VyXHJcblx0XHRcdFx0YWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCB1c2VyX2lkKVxyXG5cdFx0XHRcdGlmIGFnZW50XHJcblx0XHRcdFx0XHRpbmJveF91c2Vyc19mcm9tX2NsaWVudFtpbmJveF91c2Vyc19mcm9tX2NsaWVudC5pbmRleE9mKHVzZXJfaWQpXSA9IGFnZW50XHJcblx0XHRcdFx0XHRoYW5kbGVyX2lkID0gYWdlbnRcclxuXHRcdFx0XHRcdGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IGFnZW50IH0sIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdFx0bmV3X2FwcHIuYWdlbnQgPSBhZ2VudFxyXG5cclxuXHRcdFx0XHRuZXdfYXBwci5oYW5kbGVyID0gaGFuZGxlcl9pZFxyXG5cdFx0XHRcdG5ld19hcHByLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0bmV3X2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBzcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHRcdG5ld19hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSB1c2VyX29yZ2FuaXphdGlvbi5uYW1lXHJcblx0XHRcdFx0bmV3X2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSB1c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZVxyXG5cdFx0XHRcdG5ld19hcHByLmZyb21fdXNlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdG5ld19hcHByLmZyb21fdXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxyXG5cdFx0XHRcdG5ld19hcHByLnR5cGUgPSBcInJlYXNzaWduXCJcclxuXHRcdFx0XHRuZXdfYXBwci5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3X2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlXHJcblx0XHRcdFx0bmV3X2FwcHIuaXNfcmVhZCA9IGZhbHNlXHJcblx0XHRcdFx0bmV3X2FwcHIuaXNfZXJyb3IgPSBmYWxzZVxyXG5cdFx0XHRcdG5ld19hcHByLnZhbHVlcyA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHR1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBuZXdfYXBwcilcclxuXHRcdFx0XHRsYXN0X3RyYWNlLmFwcHJvdmVzLnB1c2gobmV3X2FwcHIpXHJcblx0XHRcdClcclxuXHJcblx0XHRcdGluc3RhbmNlLm91dGJveF91c2Vycy5wdXNoKGN1cnJlbnRfdXNlcilcclxuXHRcdFx0aW5zdGFuY2Uub3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzLmNvbmNhdChhcHByb3ZlX3VzZXJzX2hhbmRsZXJzKVxyXG5cdFx0XHRzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGluc3RhbmNlLm91dGJveF91c2VycylcclxuXHRcdFx0c2V0T2JqLmluYm94X3VzZXJzID0gaW5ib3hfdXNlcnNfZnJvbV9jbGllbnRcclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XHJcblx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGxhc3RfdHJhY2UuYXBwcm92ZXNcclxuXHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoeyBfaWQ6IGluc3RhbmNlX2lkLCBcInRyYWNlcy5faWRcIjogbGFzdF90cmFjZS5faWQgfSwgeyAkc2V0OiBzZXRPYmogfSlcclxuXHRcdFx0aWYgclxyXG5cdFx0XHRcdGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpXHJcblx0XHRcdFx0IyDnu5nooqvliKDpmaTnmoRpbmJveF91c2VycyDlkowg5b2T5YmN55So5oi3IOWPkemAgXB1c2hcclxuXHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cdFx0XHRcdF8uZWFjaChub3RfaW5faW5ib3hfdXNlcnMsICh1c2VyX2lkKSAtPlxyXG5cdFx0XHRcdFx0aWYgdXNlcl9pZCBpc250IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZClcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0IyDmj5Dlj5ZpbnN0YW5jZXMub3V0Ym94X3VzZXJz5pWw57uE5ZKM5aGr5Y2V5Lq644CB55Sz6K+35Lq6XHJcblx0XHRcdFx0X3VzZXJzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0X3VzZXJzLnB1c2goaW5zLmFwcGxpY2FudClcclxuXHRcdFx0XHRfdXNlcnMucHVzaChpbnMuc3VibWl0dGVyKVxyXG5cdFx0XHRcdF91c2VycyA9IF8udW5pcShfdXNlcnMuY29uY2F0KGlucy5vdXRib3hfdXNlcnMpKVxyXG5cdFx0XHRcdF8uZWFjaChfdXNlcnMsICh1c2VyX2lkKSAtPlxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXHJcblx0XHRcdFx0KVxyXG5cclxuXHRcdFx0XHQjIOe7meaWsOWKoOWFpeeahGluYm94X3VzZXJz5Y+R6YCBcHVzaCBtZXNzYWdlXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZWFzc2lnbl9uZXdfaW5ib3hfdXNlcnNcIiwgaW5zLCByZWFzc2lnbl9yZWFzb24sIGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cclxuXHRcdFx0XHQjIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JlYXNzaWduJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YToge31cclxuXHRcdH1cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbeyBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZSB9XSB9XHJcblx0XHR9XHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVhc3NpZ24nLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgaGFzaERhdGE7XG4gIHRyeSB7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICBjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBfLmVhY2goaGFzaERhdGFbJ0luc3RhbmNlcyddLCBmdW5jdGlvbihpbnN0YW5jZV9mcm9tX2NsaWVudCkge1xuICAgICAgdmFyIF91c2VycywgYXBwcm92ZV91c2Vyc19oYW5kbGVycywgYXNzaWduZWVfYXBwciwgY3VycmVudF9zcGFjZV91c2VyLCBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLCBpLCBpbmJveF91c2VycywgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQsIGlucywgaW5zdGFuY2UsIGluc3RhbmNlX2lkLCBsYXN0X3RyYWNlLCBsYXN0X3RyYWNlX2Zyb21fY2xpZW50LCBuZXdfaW5ib3hfdXNlcnMsIG5vdF9pbl9pbmJveF91c2Vycywgbm93LCBwZXJtaXNzaW9ucywgciwgcmVhc3NpZ25fcmVhc29uLCBzZXRPYmosIHNwYWNlLCBzcGFjZV9pZDtcbiAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbJ19pZCddO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XG4gICAgICB1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VQZW5kaW5nKGluc3RhbmNlKTtcbiAgICAgIGxhc3RfdHJhY2VfZnJvbV9jbGllbnQgPSBfLmxhc3QoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJ0cmFjZXNcIl0pO1xuICAgICAgbGFzdF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuX2lkID09PSBsYXN0X3RyYWNlX2Zyb21fY2xpZW50W1wiX2lkXCJdO1xuICAgICAgfSk7XG4gICAgICBpZiAobGFzdF90cmFjZS5pc19maW5pc2hlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpO1xuICAgICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogc3BhY2VfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgYWRtaW5zOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgJiYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIik7XG4gICAgICB9XG4gICAgICBpbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzO1xuICAgICAgaW5ib3hfdXNlcnNfZnJvbV9jbGllbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImluYm94X3VzZXJzXCJdO1xuICAgICAgcmVhc3NpZ25fcmVhc29uID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWFzc2lnbl9yZWFzb25cIl07XG4gICAgICBub3RfaW5faW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UoaW5ib3hfdXNlcnMsIGluYm94X3VzZXJzX2Zyb21fY2xpZW50KTtcbiAgICAgIG5ld19pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2Vyc19mcm9tX2NsaWVudCwgaW5ib3hfdXNlcnMpO1xuICAgICAgaWYgKG5vdF9pbl9pbmJveF91c2Vycy5sZW5ndGggPT09IDAgJiYgbmV3X2luYm94X3VzZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICBpID0gMDtcbiAgICAgIGFwcHJvdmVfdXNlcnNfaGFuZGxlcnMgPSBbXTtcbiAgICAgIHdoaWxlIChpIDwgbGFzdF90cmFjZS5hcHByb3Zlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG5vdF9pbl9pbmJveF91c2Vycy5pbmNsdWRlcyhsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmhhbmRsZXIpKSB7XG4gICAgICAgICAgaWYgKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaXNfZmluaXNoZWQgPT09IGZhbHNlICYmIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0udHlwZSAhPT0gXCJjY1wiICYmIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0udHlwZSAhPT0gXCJkaXN0cmlidXRlXCIpIHtcbiAgICAgICAgICAgIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uanVkZ2UgPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgICAgIGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0uZGVzY3JpcHRpb24gPSBcIlwiO1xuICAgICAgICAgICAgbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5jb3N0X3RpbWUgPSBsYXN0X3RyYWNlLmFwcHJvdmVzW2ldLmZpbmlzaF9kYXRlIC0gbGFzdF90cmFjZS5hcHByb3Zlc1tpXS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgYXBwcm92ZV91c2Vyc19oYW5kbGVycy5wdXNoKGxhc3RfdHJhY2UuYXBwcm92ZXNbaV0udXNlcik7XG4gICAgICAgICAgICBhcHByb3ZlX3VzZXJzX2hhbmRsZXJzLnB1c2gobGFzdF90cmFjZS5hcHByb3Zlc1tpXS5oYW5kbGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgY3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIG5hbWU6IDEsXG4gICAgICAgICAgZnVsbG5hbWU6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBhc3NpZ25lZV9hcHByID0gbmV3IE9iamVjdDtcbiAgICAgIGFzc2lnbmVlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaW5zdGFuY2UgPSBsYXN0X3RyYWNlLmluc3RhbmNlO1xuICAgICAgYXNzaWduZWVfYXBwci50cmFjZSA9IGxhc3RfdHJhY2UuX2lkO1xuICAgICAgYXNzaWduZWVfYXBwci5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICBhc3NpZ25lZV9hcHByLnVzZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICBhc3NpZ25lZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICBhc3NpZ25lZV9hcHByLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICBhc3NpZ25lZV9hcHByLmhhbmRsZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICBhc3NpZ25lZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbjtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24ubmFtZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLmZ1bGxuYW1lO1xuICAgICAgYXNzaWduZWVfYXBwci5zdGFydF9kYXRlID0gbm93O1xuICAgICAgYXNzaWduZWVfYXBwci5maW5pc2hfZGF0ZSA9IG5vdztcbiAgICAgIGFzc2lnbmVlX2FwcHIuZHVlX2RhdGUgPSBsYXN0X3RyYWNlLmR1ZV9kYXRlO1xuICAgICAgYXNzaWduZWVfYXBwci5yZWFkX2RhdGUgPSBub3c7XG4gICAgICBhc3NpZ25lZV9hcHByLmp1ZGdlID0gXCJyZWFzc2lnbmVkXCI7XG4gICAgICBhc3NpZ25lZV9hcHByLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgYXNzaWduZWVfYXBwci5kZXNjcmlwdGlvbiA9IHJlYXNzaWduX3JlYXNvbjtcbiAgICAgIGFzc2lnbmVlX2FwcHIuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgIGFzc2lnbmVlX2FwcHIudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgIGFzc2lnbmVlX2FwcHIuY29zdF90aW1lID0gYXNzaWduZWVfYXBwci5maW5pc2hfZGF0ZSAtIGFzc2lnbmVlX2FwcHIuc3RhcnRfZGF0ZTtcbiAgICAgIGxhc3RfdHJhY2UuYXBwcm92ZXMucHVzaChhc3NpZ25lZV9hcHByKTtcbiAgICAgIF8uZWFjaChuZXdfaW5ib3hfdXNlcnMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICAgICAgdmFyIGFnZW50LCBoYW5kbGVyX2lkLCBoYW5kbGVyX2luZm8sIG5ld19hcHByLCBuZXdfdXNlciwgc3BhY2VfdXNlciwgdXNlcl9vcmdhbml6YXRpb247XG4gICAgICAgIG5ld191c2VyID0gZGIudXNlcnMuZmluZE9uZSh1c2VyX2lkLCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCB1c2VyX2lkKTtcbiAgICAgICAgdXNlcl9vcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDEsXG4gICAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5ld19hcHByID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3X2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3X2FwcHIuaW5zdGFuY2UgPSBsYXN0X3RyYWNlLmluc3RhbmNlO1xuICAgICAgICBuZXdfYXBwci50cmFjZSA9IGxhc3RfdHJhY2UuX2lkO1xuICAgICAgICBuZXdfYXBwci5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICBuZXdfYXBwci51c2VyID0gdXNlcl9pZDtcbiAgICAgICAgbmV3X2FwcHIudXNlcl9uYW1lID0gbmV3X3VzZXIubmFtZTtcbiAgICAgICAgaGFuZGxlcl9pZCA9IHVzZXJfaWQ7XG4gICAgICAgIGhhbmRsZXJfaW5mbyA9IG5ld191c2VyO1xuICAgICAgICBhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIHVzZXJfaWQpO1xuICAgICAgICBpZiAoYWdlbnQpIHtcbiAgICAgICAgICBpbmJveF91c2Vyc19mcm9tX2NsaWVudFtpbmJveF91c2Vyc19mcm9tX2NsaWVudC5pbmRleE9mKHVzZXJfaWQpXSA9IGFnZW50O1xuICAgICAgICAgIGhhbmRsZXJfaWQgPSBhZ2VudDtcbiAgICAgICAgICBoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICAgIF9pZDogYWdlbnRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG5ld19hcHByLmFnZW50ID0gYWdlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgbmV3X2FwcHIuaGFuZGxlciA9IGhhbmRsZXJfaWQ7XG4gICAgICAgIG5ld19hcHByLmhhbmRsZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xuICAgICAgICBuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IHNwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xuICAgICAgICBuZXdfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gdXNlcl9vcmdhbml6YXRpb24ubmFtZTtcbiAgICAgICAgbmV3X2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSB1c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZTtcbiAgICAgICAgbmV3X2FwcHIuZnJvbV91c2VyID0gY3VycmVudF91c2VyO1xuICAgICAgICBuZXdfYXBwci5mcm9tX3VzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgIG5ld19hcHByLnR5cGUgPSBcInJlYXNzaWduXCI7XG4gICAgICAgIG5ld19hcHByLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld19hcHByLmR1ZV9kYXRlID0gbGFzdF90cmFjZS5kdWVfZGF0ZTtcbiAgICAgICAgbmV3X2FwcHIuaXNfcmVhZCA9IGZhbHNlO1xuICAgICAgICBuZXdfYXBwci5pc19lcnJvciA9IGZhbHNlO1xuICAgICAgICBuZXdfYXBwci52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICB1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBuZXdfYXBwcik7XG4gICAgICAgIHJldHVybiBsYXN0X3RyYWNlLmFwcHJvdmVzLnB1c2gobmV3X2FwcHIpO1xuICAgICAgfSk7XG4gICAgICBpbnN0YW5jZS5vdXRib3hfdXNlcnMucHVzaChjdXJyZW50X3VzZXIpO1xuICAgICAgaW5zdGFuY2Uub3V0Ym94X3VzZXJzID0gaW5zdGFuY2Uub3V0Ym94X3VzZXJzLmNvbmNhdChhcHByb3ZlX3VzZXJzX2hhbmRsZXJzKTtcbiAgICAgIHNldE9iai5vdXRib3hfdXNlcnMgPSBfLnVuaXEoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKTtcbiAgICAgIHNldE9iai5pbmJveF91c2VycyA9IGluYm94X3VzZXJzX2Zyb21fY2xpZW50O1xuICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbm93O1xuICAgICAgc2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXNcIl0gPSBsYXN0X3RyYWNlLmFwcHJvdmVzO1xuICAgICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IGluc3RhbmNlX2lkLFxuICAgICAgICBcInRyYWNlcy5faWRcIjogbGFzdF90cmFjZS5faWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICB9KTtcbiAgICAgIGlmIChyKSB7XG4gICAgICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgICBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKTtcbiAgICAgICAgXy5lYWNoKG5vdF9pbl9pbmJveF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICAgIGlmICh1c2VyX2lkICE9PSBjdXJyZW50X3VzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgX3VzZXJzID0gbmV3IEFycmF5O1xuICAgICAgICBfdXNlcnMucHVzaChpbnMuYXBwbGljYW50KTtcbiAgICAgICAgX3VzZXJzLnB1c2goaW5zLnN1Ym1pdHRlcik7XG4gICAgICAgIF91c2VycyA9IF8udW5pcShfdXNlcnMuY29uY2F0KGlucy5vdXRib3hfdXNlcnMpKTtcbiAgICAgICAgXy5lYWNoKF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwdXNoTWFuYWdlci5zZW5kX2luc3RhbmNlX25vdGlmaWNhdGlvbihcInJlYXNzaWduX25ld19pbmJveF91c2Vyc1wiLCBpbnMsIHJlYXNzaWduX3JlYXNvbiwgY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZWFzc2lnbicsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmVsb2NhdGUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSlcclxuXHJcblx0XHRcdGxhc3RfdHJhY2UgPSBfLmxhc3QoaW5zdGFuY2UudHJhY2VzKVxyXG5cclxuXHRcdFx0IyDpqozor4Fsb2dpbiB1c2VyX2lk5a+56K+l5rWB56iL5pyJ566h55CG55Sz6K+35Y2V55qE5p2D6ZmQXHJcblx0XHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShpbnN0YW5jZS5zcGFjZSwgeyBmaWVsZHM6IHsgYWRtaW5zOiAxIH0gfSlcclxuXHRcdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSlcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKVxyXG5cclxuXHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdFx0XHRpbnN0YW5jZV9pZCA9IGxhc3RfdHJhY2UuaW5zdGFuY2VcclxuXHRcdFx0aW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2Vyc1xyXG5cdFx0XHRyZWxvY2F0ZV9pbmJveF91c2VycyA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfaW5ib3hfdXNlcnNcIl1cclxuXHRcdFx0cmVsb2NhdGVfY29tbWVudCA9IGluc3RhbmNlX2Zyb21fY2xpZW50W1wicmVsb2NhdGVfY29tbWVudFwiXVxyXG5cdFx0XHRyZWxvY2F0ZV9uZXh0X3N0ZXAgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX25leHRfc3RlcFwiXVxyXG5cdFx0XHRub3RfaW5faW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UoaW5ib3hfdXNlcnMsIHJlbG9jYXRlX2luYm94X3VzZXJzKVxyXG5cdFx0XHRuZXdfaW5ib3hfdXNlcnMgPSBfLmRpZmZlcmVuY2UocmVsb2NhdGVfaW5ib3hfdXNlcnMsIGluYm94X3VzZXJzKVxyXG5cclxuXHRcdFx0YXBwcm92ZV91c2VycyA9IFtdXHJcblxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qmZsb3dcclxuXHRcdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxyXG5cdFx0XHRuZXh0X3N0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHJlbG9jYXRlX25leHRfc3RlcClcclxuXHRcdFx0bmV4dF9zdGVwX3R5cGUgPSBuZXh0X3N0ZXAuc3RlcF90eXBlXHJcblx0XHRcdG5leHRfc3RlcF9uYW1lID0gbmV4dF9zdGVwLm5hbWVcclxuXHRcdFx0Y3VycmVudF9zZXRwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBsYXN0X3RyYWNlLnN0ZXApXHJcblx0XHRcdGN1cnJlbnRfc2V0cF90eXBlID0gY3VycmVudF9zZXRwLnN0ZXBfdHlwZVxyXG5cclxuXHRcdFx0dHJhY2VzID0gaW5zdGFuY2UudHJhY2VzXHJcblx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdFx0IyDph43lrprkvY3nmoTml7blgJnkvb/nlKhhcHByb3ZlLnZhbHVlc+WQiOW5tiBpbnN0YW5jZS52YWx1ZXPnlJ/miJDmlrDnmoRpbnN0YW5jZS52YWx1ZXMgIzEzMjhcclxuXHRcdFx0c2V0T2JqLnZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSlcclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHRcdFx0aSA9IDBcclxuXHRcdFx0d2hpbGUgaSA8IHRyYWNlcy5sZW5ndGhcclxuXHRcdFx0XHRpZiB0cmFjZXNbaV0uX2lkIGlzIGxhc3RfdHJhY2UuX2lkXHJcblx0XHRcdFx0XHRpZiBub3QgdHJhY2VzW2ldLmFwcHJvdmVzXHJcblx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3ZlcyA9IG5ldyBBcnJheVxyXG5cdFx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZS5hcHByb3Zl6K6w5b2VXHJcblx0XHRcdFx0XHRoID0gMFxyXG5cdFx0XHRcdFx0d2hpbGUgaCA8IHRyYWNlc1tpXS5hcHByb3Zlcy5sZW5ndGhcclxuXHRcdFx0XHRcdFx0aWYgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkIGlzIGZhbHNlIGFuZCB0cmFjZXNbaV0uYXBwcm92ZXNbaF0udHlwZSBpc250IFwiY2NcIiBhbmQgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnR5cGUgaXNudCBcImRpc3RyaWJ1dGVcIlxyXG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdHRyYWNlc1tpXS5hcHByb3Zlc1toXS5qdWRnZSA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzW2hdLmNvc3RfdGltZSA9IHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSAtIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRcdFx0YXBwcm92ZV91c2Vycy5wdXNoKHRyYWNlc1tpXS5hcHByb3Zlc1toXS51c2VyKVxyXG5cclxuXHRcdFx0XHRcdFx0XHQjIGJlZ2luIOiiq+mHjeWumuS9jee7mUHvvIzlho3ooqvph43lrprkvY3otbDvvIzkuYvliY1B55qE5oSP6KeB5Zyo5oSP6KeB5qCP5Lit5pi+56S65LiN5Ye65p2l5LqG44CCICMxOTIxXHJcblx0XHRcdFx0XHRcdFx0aWYgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLnNpZ25fc2hvdyA9PSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHR0YSA9IHRyYWNlc1tpXS5hcHByb3Zlc1toXVxyXG5cdFx0XHRcdFx0XHRcdFx0c2FtZVRyYWNlcyA9IF8uZmlsdGVyIHRyYWNlcywgKHQpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHQuc3RlcCA9PSB0cmFjZXNbaV0uc3RlcFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGwgPSBzYW1lVHJhY2VzLmxlbmd0aCAtIDFcclxuXHRcdFx0XHRcdFx0XHRcdHNpZ25TaG93QXBwcm92ZUlkID0gbnVsbFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlIGwgPiAtMVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRfLmVhY2ggc2FtZVRyYWNlc1tsXS5hcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiBhLnVzZXIgPT0gdGEudXNlciAmJiBhLmp1ZGdlICE9IFwidGVybWluYXRlZFwiICYmIGEuZGVzY3JpcHRpb24gJiYgIXNpZ25TaG93QXBwcm92ZUlkXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzaWduU2hvd0FwcHJvdmVJZCA9IGEuX2lkXHJcblx0XHRcdFx0XHRcdFx0XHRcdGwtLVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGlmIHNpZ25TaG93QXBwcm92ZUlkXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRpID0gMFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSB0aSA8IHRyYWNlcy5sZW5ndGhcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhaCA9IDBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSBhaCA8IHRyYWNlc1t0aV0uYXBwcm92ZXMubGVuZ3RoXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiB0cmFjZXNbdGldLmFwcHJvdmVzW2FoXS5faWQgPT0gc2lnblNob3dBcHByb3ZlSWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHJhY2VzW3RpXS5hcHByb3Zlc1thaF0uc2lnbl9zaG93ID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFoKytcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aSsrXHJcblx0XHRcdFx0XHRcdFx0IyBlbmQg6KKr6YeN5a6a5L2N57uZQe+8jOWGjeiiq+mHjeWumuS9jei1sO+8jOS5i+WJjUHnmoTmhI/op4HlnKjmhI/op4HmoI/kuK3mmL7npLrkuI3lh7rmnaXkuobjgIIgIzE5MjFcclxuXHJcblx0XHRcdFx0XHRcdGgrK1xyXG5cclxuXHRcdFx0XHRcdCMg5Zyo5ZCM5LiAdHJhY2XkuIvmj5LlhaXph43lrprkvY3mk43kvZzogIXnmoRhcHByb3Zl6K6w5b2VXHJcblx0XHRcdFx0XHRjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cdFx0XHRcdFx0Y3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7IGZpZWxkczogeyBuYW1lOiAxICwgZnVsbG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwciA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLnRyYWNlID0gdHJhY2VzW2ldLl9pZFxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmhhbmRsZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb25cclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24ubmFtZVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWVcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5kdWVfZGF0ZSA9IHRyYWNlc1tpXS5kdWVfZGF0ZVxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5yZWFkX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuanVkZ2UgPSBcInJlbG9jYXRlZFwiXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLmRlc2NyaXB0aW9uID0gcmVsb2NhdGVfY29tbWVudFxyXG5cdFx0XHRcdFx0cmVsb2NhdGVfYXBwci5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0XHRyZWxvY2F0ZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRcdHJlbG9jYXRlX2FwcHIuY29zdF90aW1lID0gcmVsb2NhdGVfYXBwci5maW5pc2hfZGF0ZSAtIHJlbG9jYXRlX2FwcHIuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0dHJhY2VzW2ldLmFwcHJvdmVzLnB1c2gocmVsb2NhdGVfYXBwcilcclxuXHJcblx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0XHR0cmFjZXNbaV0uaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHR0cmFjZXNbaV0uZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdHRyYWNlc1tpXS5qdWRnZSA9IFwicmVsb2NhdGVkXCJcclxuXHJcblx0XHRcdFx0aSsrXHJcblxyXG5cdFx0XHRpZiBuZXh0X3N0ZXBfdHlwZSBpcyBcImVuZFwiXHJcblx0XHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZeiusOW9lVxyXG5cdFx0XHRcdG5ld1RyYWNlID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0XHRuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRcdFx0bmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2UuX2lkXVxyXG5cdFx0XHRcdG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdG5ld1RyYWNlLnN0ZXAgPSByZWxvY2F0ZV9uZXh0X3N0ZXBcclxuXHRcdFx0XHRuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWVcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0bmV3VHJhY2UuZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRuZXdUcmFjZS5hcHByb3ZlcyA9IFtdXHJcblx0XHRcdFx0IyDmm7TmlrBpbnN0YW5jZeiusOW9lVxyXG5cdFx0XHRcdHNldE9iai5zdGF0ZSA9IFwiY29tcGxldGVkXCJcclxuXHRcdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBbXVxyXG5cdFx0XHRcdHNldE9iai5maW5hbF9kZWNpc2lvbiA9IFwidGVybWluYXRlZFwiXHJcblx0XHRcdFx0c2V0T2JqLmZpbmlzaF9kYXRlID0gbmV3IERhdGVcclxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBuZXh0X3N0ZXBfbmFtZVxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfYXV0b19zdWJtaXQgPSBmYWxzZVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZeiusOW9lVxyXG5cdFx0XHRcdG5ld1RyYWNlID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0XHRuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkXHJcblx0XHRcdFx0bmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2UuX2lkXVxyXG5cdFx0XHRcdG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2VcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGVwID0gcmVsb2NhdGVfbmV4dF9zdGVwXHJcblx0XHRcdFx0bmV3VHJhY2UubmFtZSA9IG5leHRfc3RlcF9uYW1lXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKG5leHRfc3RlcC50aW1lb3V0X2hvdXJzKVxyXG5cdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzID0gW11cclxuXHRcdFx0XHRfLmVhY2gocmVsb2NhdGVfaW5ib3hfdXNlcnMsIChuZXh0X3N0ZXBfdXNlcl9pZCwgaWR4KS0+XHJcblx0XHRcdFx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZFxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLnVzZXIgPSBuZXh0X3N0ZXBfdXNlcl9pZFxyXG5cclxuXHRcdFx0XHRcdHVzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUobmV4dF9zdGVwX3VzZXJfaWQsIHsgZmllbGRzOiB7IG5hbWU6IDEgfSB9KVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS51c2VyX25hbWUgPSB1c2VyX2luZm8ubmFtZVxyXG5cclxuXHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZFxyXG5cdFx0XHRcdFx0aGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvXHJcblx0XHRcdFx0XHRhZ2VudCA9IHV1Zmxvd01hbmFnZXIuZ2V0QWdlbnQoc3BhY2VfaWQsIG5leHRfc3RlcF91c2VyX2lkKVxyXG5cdFx0XHRcdFx0aWYgYWdlbnRcclxuXHRcdFx0XHRcdFx0cmVsb2NhdGVfaW5ib3hfdXNlcnNbaWR4XSA9IGFnZW50XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJfaWQgPSBhZ2VudFxyXG5cdFx0XHRcdFx0XHRoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiBhZ2VudCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRcdFx0bmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50XHJcblxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZFxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZVxyXG5cclxuXHRcdFx0XHRcdG5leHRfc3RlcF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGhhbmRsZXJfaWQpXHJcblx0XHRcdFx0XHQjIOiOt+WPlm5leHRfc3RlcF91c2Vy5omA5Zyo55qE6YOo6Zeo5L+h5oGvXHJcblx0XHRcdFx0XHRuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbyA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyT3JnSW5mbyhuZXh0X3N0ZXBfc3BhY2VfdXNlcilcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblxyXG5cdFx0XHRcdFx0bmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmR1ZV9kYXRlID0gbmV3VHJhY2UuZHVlX2RhdGVcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlXHJcblx0XHRcdFx0XHRuZXdBcHByb3ZlLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSlcclxuXHRcdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSlcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0c2V0T2JqLmluYm94X3VzZXJzID0gcmVsb2NhdGVfaW5ib3hfdXNlcnNcclxuXHRcdFx0XHRzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIlxyXG5cdFx0XHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgbmV4dF9zdGVwLmxpbmVzKVxyXG5cclxuXHRcdFx0aW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKVxyXG5cdFx0XHRpbnN0YW5jZS5vdXRib3hfdXNlcnMgPSBpbnN0YW5jZS5vdXRib3hfdXNlcnMuY29uY2F0KGluYm94X3VzZXJzKS5jb25jYXQoYXBwcm92ZV91c2VycylcclxuXHRcdFx0c2V0T2JqLm91dGJveF91c2VycyA9IF8udW5pcShpbnN0YW5jZS5vdXRib3hfdXNlcnMpXHJcblx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5vd1xyXG5cdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0c2V0T2JqLmlzX2FyY2hpdmVkID0gZmFsc2VcclxuXHRcdFx0dHJhY2VzLnB1c2gobmV3VHJhY2UpXHJcblx0XHRcdHNldE9iai50cmFjZXMgPSB0cmFjZXNcclxuXHJcblx0XHRcdGlmIHNldE9iai5zdGF0ZSA9PSAnY29tcGxldGVkJ1xyXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9ian0pXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiBzZXRPYmosICR1bnNldDoge2ZpbmlzaF9kYXRlOiAxfX0pXHJcblxyXG5cdFx0XHRpZiByXHJcblx0XHRcdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0XHQjIOe7meiiq+WIoOmZpOeahGluYm94X3VzZXJzIOWSjCDlvZPliY3nlKjmiLcg5Y+R6YCBcHVzaFxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pXHJcblx0XHRcdFx0Xy5lYWNoKG5vdF9pbl9pbmJveF91c2VycywgKHVzZXJfaWQpLT5cclxuXHRcdFx0XHRcdGlmIHVzZXJfaWQgaXNudCBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXHJcblx0XHRcdFx0KVxyXG5cdFx0XHRcdCMg5o+Q5Y+WaW5zdGFuY2VzLm91dGJveF91c2Vyc+aVsOe7hOWSjOWhq+WNleS6uuOAgeeUs+ivt+S6ulxyXG5cdFx0XHRcdF91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0XHRcdF91c2Vycy5wdXNoKGlucy5hcHBsaWNhbnQpXHJcblx0XHRcdFx0X3VzZXJzLnB1c2goaW5zLnN1Ym1pdHRlcilcclxuXHRcdFx0XHRfdXNlcnMgPSBfLnVuaXEoX3VzZXJzLmNvbmNhdChpbnMub3V0Ym94X3VzZXJzKSlcclxuXHRcdFx0XHRfLmVhY2goX3VzZXJzLCAodXNlcl9pZCktPlxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXHJcblx0XHRcdFx0KVxyXG5cclxuXHRcdFx0XHQjIOe7meaWsOWKoOWFpeeahGluYm94X3VzZXJz5Y+R6YCBcHVzaCBtZXNzYWdlXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZWFzc2lnbl9uZXdfaW5ib3hfdXNlcnNcIiwgaW5zLCByZWxvY2F0ZV9jb21tZW50LCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHJcblx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZWxvY2F0ZScsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHtlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZWxvY2F0ZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgX3VzZXJzLCBhaCwgYXBwcm92ZV91c2VycywgY3VycmVudF9zZXRwLCBjdXJyZW50X3NldHBfdHlwZSwgY3VycmVudF9zcGFjZV91c2VyLCBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLCBmbG93LCBoLCBpLCBpbmJveF91c2VycywgaW5zLCBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIGwsIGxhc3RfdHJhY2UsIG5ld1RyYWNlLCBuZXdfaW5ib3hfdXNlcnMsIG5leHRfc3RlcCwgbmV4dF9zdGVwX25hbWUsIG5leHRfc3RlcF90eXBlLCBub3RfaW5faW5ib3hfdXNlcnMsIG5vdywgcGVybWlzc2lvbnMsIHIsIHJlbG9jYXRlX2FwcHIsIHJlbG9jYXRlX2NvbW1lbnQsIHJlbG9jYXRlX2luYm94X3VzZXJzLCByZWxvY2F0ZV9uZXh0X3N0ZXAsIHNhbWVUcmFjZXMsIHNldE9iaiwgc2lnblNob3dBcHByb3ZlSWQsIHNwYWNlLCBzcGFjZV9pZCwgdGEsIHRpLCB0cmFjZXM7XG4gICAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJfaWRcIl0pO1xuICAgICAgbGFzdF90cmFjZSA9IF8ubGFzdChpbnN0YW5jZS50cmFjZXMpO1xuICAgICAgcGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoaW5zdGFuY2UuZmxvdywgY3VycmVudF91c2VyKTtcbiAgICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoaW5zdGFuY2Uuc3BhY2UsIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgYWRtaW5zOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgJiYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlKjmiLfmsqHmnInlr7nlvZPliY3mtYHnqIvnmoTnrqHnkIbmnYPpmZBcIik7XG4gICAgICB9XG4gICAgICBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuICAgICAgaW5zdGFuY2VfaWQgPSBsYXN0X3RyYWNlLmluc3RhbmNlO1xuICAgICAgaW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2VycztcbiAgICAgIHJlbG9jYXRlX2luYm94X3VzZXJzID0gaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJyZWxvY2F0ZV9pbmJveF91c2Vyc1wiXTtcbiAgICAgIHJlbG9jYXRlX2NvbW1lbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX2NvbW1lbnRcIl07XG4gICAgICByZWxvY2F0ZV9uZXh0X3N0ZXAgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcInJlbG9jYXRlX25leHRfc3RlcFwiXTtcbiAgICAgIG5vdF9pbl9pbmJveF91c2VycyA9IF8uZGlmZmVyZW5jZShpbmJveF91c2VycywgcmVsb2NhdGVfaW5ib3hfdXNlcnMpO1xuICAgICAgbmV3X2luYm94X3VzZXJzID0gXy5kaWZmZXJlbmNlKHJlbG9jYXRlX2luYm94X3VzZXJzLCBpbmJveF91c2Vycyk7XG4gICAgICBhcHByb3ZlX3VzZXJzID0gW107XG4gICAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICAgICAgbmV4dF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCByZWxvY2F0ZV9uZXh0X3N0ZXApO1xuICAgICAgbmV4dF9zdGVwX3R5cGUgPSBuZXh0X3N0ZXAuc3RlcF90eXBlO1xuICAgICAgbmV4dF9zdGVwX25hbWUgPSBuZXh0X3N0ZXAubmFtZTtcbiAgICAgIGN1cnJlbnRfc2V0cCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgbGFzdF90cmFjZS5zdGVwKTtcbiAgICAgIGN1cnJlbnRfc2V0cF90eXBlID0gY3VycmVudF9zZXRwLnN0ZXBfdHlwZTtcbiAgICAgIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBzZXRPYmoudmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IHRyYWNlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRyYWNlc1tpXS5faWQgPT09IGxhc3RfdHJhY2UuX2lkKSB7XG4gICAgICAgICAgaWYgKCF0cmFjZXNbaV0uYXBwcm92ZXMpIHtcbiAgICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3ZlcyA9IG5ldyBBcnJheTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaCA9IDA7XG4gICAgICAgICAgd2hpbGUgKGggPCB0cmFjZXNbaV0uYXBwcm92ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX2ZpbmlzaGVkID09PSBmYWxzZSAmJiB0cmFjZXNbaV0uYXBwcm92ZXNbaF0udHlwZSAhPT0gXCJjY1wiICYmIHRyYWNlc1tpXS5hcHByb3Zlc1toXS50eXBlICE9PSBcImRpc3RyaWJ1dGVcIikge1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0ucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uanVkZ2UgPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgICAgICAgdHJhY2VzW2ldLmFwcHJvdmVzW2hdLmNvc3RfdGltZSA9IHRyYWNlc1tpXS5hcHByb3Zlc1toXS5maW5pc2hfZGF0ZSAtIHRyYWNlc1tpXS5hcHByb3Zlc1toXS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgICBhcHByb3ZlX3VzZXJzLnB1c2godHJhY2VzW2ldLmFwcHJvdmVzW2hdLnVzZXIpO1xuICAgICAgICAgICAgICBpZiAodHJhY2VzW2ldLmFwcHJvdmVzW2hdLnNpZ25fc2hvdyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRhID0gdHJhY2VzW2ldLmFwcHJvdmVzW2hdO1xuICAgICAgICAgICAgICAgIHNhbWVUcmFjZXMgPSBfLmZpbHRlcih0cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0LnN0ZXAgPT09IHRyYWNlc1tpXS5zdGVwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGwgPSBzYW1lVHJhY2VzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgc2lnblNob3dBcHByb3ZlSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHdoaWxlIChsID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgIF8uZWFjaChzYW1lVHJhY2VzW2xdLmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhLnVzZXIgPT09IHRhLnVzZXIgJiYgYS5qdWRnZSAhPT0gXCJ0ZXJtaW5hdGVkXCIgJiYgYS5kZXNjcmlwdGlvbiAmJiAhc2lnblNob3dBcHByb3ZlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2lnblNob3dBcHByb3ZlSWQgPSBhLl9pZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzaWduU2hvd0FwcHJvdmVJZCkge1xuICAgICAgICAgICAgICAgICAgdGkgPSAwO1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKHRpIDwgdHJhY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBhaCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChhaCA8IHRyYWNlc1t0aV0uYXBwcm92ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNlc1t0aV0uYXBwcm92ZXNbYWhdLl9pZCA9PT0gc2lnblNob3dBcHByb3ZlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlc1t0aV0uYXBwcm92ZXNbYWhdLnNpZ25fc2hvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjZXNbaV0uYXBwcm92ZXNbaF0uc2lnbl9zaG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGFoKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGkrKztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGgrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgICAgICAgY3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgICAgZnVsbG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByID0gbmV3IE9iamVjdDtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHI7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudHJhY2UgPSB0cmFjZXNbaV0uX2lkO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnVzZXJfbmFtZSA9IGN1cnJlbnRfdXNlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaGFuZGxlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gY3VycmVudF9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24uZnVsbG5hbWU7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5zdGFydF9kYXRlID0gbm93O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5kdWVfZGF0ZSA9IHRyYWNlc1tpXS5kdWVfZGF0ZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnJlYWRfZGF0ZSA9IG5vdztcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmp1ZGdlID0gXCJyZWxvY2F0ZWRcIjtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuZGVzY3JpcHRpb24gPSByZWxvY2F0ZV9jb21tZW50O1xuICAgICAgICAgIHJlbG9jYXRlX2FwcHIuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICByZWxvY2F0ZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgcmVsb2NhdGVfYXBwci5jb3N0X3RpbWUgPSByZWxvY2F0ZV9hcHByLmZpbmlzaF9kYXRlIC0gcmVsb2NhdGVfYXBwci5zdGFydF9kYXRlO1xuICAgICAgICAgIHRyYWNlc1tpXS5hcHByb3Zlcy5wdXNoKHJlbG9jYXRlX2FwcHIpO1xuICAgICAgICAgIHRyYWNlc1tpXS5pc19maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgdHJhY2VzW2ldLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgIHRyYWNlc1tpXS5qdWRnZSA9IFwicmVsb2NhdGVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgaWYgKG5leHRfc3RlcF90eXBlID09PSBcImVuZFwiKSB7XG4gICAgICAgIG5ld1RyYWNlID0gbmV3IE9iamVjdDtcbiAgICAgICAgbmV3VHJhY2UuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgbmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2UuX2lkXTtcbiAgICAgICAgbmV3VHJhY2UuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICBuZXdUcmFjZS5zdGVwID0gcmVsb2NhdGVfbmV4dF9zdGVwO1xuICAgICAgICBuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICBuZXdUcmFjZS5hcHByb3ZlcyA9IFtdO1xuICAgICAgICBzZXRPYmouc3RhdGUgPSBcImNvbXBsZXRlZFwiO1xuICAgICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSBbXTtcbiAgICAgICAgc2V0T2JqLmZpbmFsX2RlY2lzaW9uID0gXCJ0ZXJtaW5hdGVkXCI7XG4gICAgICAgIHNldE9iai5maW5pc2hfZGF0ZSA9IG5ldyBEYXRlO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBuZXh0X3N0ZXBfbmFtZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICBuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZS5faWRdO1xuICAgICAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICBuZXdUcmFjZS5zdGVwID0gcmVsb2NhdGVfbmV4dF9zdGVwO1xuICAgICAgICBuZXdUcmFjZS5uYW1lID0gbmV4dF9zdGVwX25hbWU7XG4gICAgICAgIG5ld1RyYWNlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKG5leHRfc3RlcC50aW1lb3V0X2hvdXJzKTtcbiAgICAgICAgbmV3VHJhY2UuYXBwcm92ZXMgPSBbXTtcbiAgICAgICAgXy5lYWNoKHJlbG9jYXRlX2luYm94X3VzZXJzLCBmdW5jdGlvbihuZXh0X3N0ZXBfdXNlcl9pZCwgaWR4KSB7XG4gICAgICAgICAgdmFyIGFnZW50LCBoYW5kbGVyX2lkLCBoYW5kbGVyX2luZm8sIG5ld0FwcHJvdmUsIG5leHRfc3RlcF9zcGFjZV91c2VyLCBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mbywgdXNlcl9pbmZvO1xuICAgICAgICAgIG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgICAgICAgIG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgICBuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgICAgICAgbmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZDtcbiAgICAgICAgICBuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgICAgbmV3QXBwcm92ZS51c2VyID0gbmV4dF9zdGVwX3VzZXJfaWQ7XG4gICAgICAgICAgdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IHVzZXJfaW5mby5uYW1lO1xuICAgICAgICAgIGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZDtcbiAgICAgICAgICBoYW5kbGVyX2luZm8gPSB1c2VyX2luZm87XG4gICAgICAgICAgYWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCBuZXh0X3N0ZXBfdXNlcl9pZCk7XG4gICAgICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgICAgICByZWxvY2F0ZV9pbmJveF91c2Vyc1tpZHhdID0gYWdlbnQ7XG4gICAgICAgICAgICBoYW5kbGVyX2lkID0gYWdlbnQ7XG4gICAgICAgICAgICBoYW5kbGVyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICAgICAgX2lkOiBhZ2VudFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXIgPSBoYW5kbGVyX2lkO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICAgICAgbmV4dF9zdGVwX3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgaGFuZGxlcl9pZCk7XG4gICAgICAgICAgbmV4dF9zdGVwX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8obmV4dF9zdGVwX3NwYWNlX3VzZXIpO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXTtcbiAgICAgICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgICAgbmV3QXBwcm92ZS5kdWVfZGF0ZSA9IG5ld1RyYWNlLmR1ZV9kYXRlO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlO1xuICAgICAgICAgIG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICBuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgdXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGluc3RhbmNlLnZhbHVlcywgbmV3QXBwcm92ZSk7XG4gICAgICAgICAgcmV0dXJuIG5ld1RyYWNlLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRPYmouaW5ib3hfdXNlcnMgPSByZWxvY2F0ZV9pbmJveF91c2VycztcbiAgICAgICAgc2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCI7XG4gICAgICAgIHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IG5leHRfc3RlcF9uYW1lO1xuICAgICAgICBzZXRPYmouY3VycmVudF9zdGVwX2F1dG9fc3VibWl0ID0gdXVmbG93TWFuYWdlci5nZXRDdXJyZW50U3RlcEF1dG9TdWJtaXQoZmxvdy50aW1lb3V0X2F1dG9fc3VibWl0LCBuZXh0X3N0ZXAubGluZXMpO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2Uub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICAgIGluc3RhbmNlLm91dGJveF91c2VycyA9IGluc3RhbmNlLm91dGJveF91c2Vycy5jb25jYXQoaW5ib3hfdXNlcnMpLmNvbmNhdChhcHByb3ZlX3VzZXJzKTtcbiAgICAgIHNldE9iai5vdXRib3hfdXNlcnMgPSBfLnVuaXEoaW5zdGFuY2Uub3V0Ym94X3VzZXJzKTtcbiAgICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICAgIHNldE9iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcjtcbiAgICAgIHNldE9iai5pc19hcmNoaXZlZCA9IGZhbHNlO1xuICAgICAgdHJhY2VzLnB1c2gobmV3VHJhY2UpO1xuICAgICAgc2V0T2JqLnRyYWNlcyA9IHRyYWNlcztcbiAgICAgIGlmIChzZXRPYmouc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqLFxuICAgICAgICAgICR1bnNldDoge1xuICAgICAgICAgICAgZmluaXNoX2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHIpIHtcbiAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV9jdXJyZW50X3VzZXIoY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICBfLmVhY2gobm90X2luX2luYm94X3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgaWYgKHVzZXJfaWQgIT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgICAgIF91c2Vycy5wdXNoKGlucy5hcHBsaWNhbnQpO1xuICAgICAgICBfdXNlcnMucHVzaChpbnMuc3VibWl0dGVyKTtcbiAgICAgICAgX3VzZXJzID0gXy51bmlxKF91c2Vycy5jb25jYXQoaW5zLm91dGJveF91c2VycykpO1xuICAgICAgICBfLmVhY2goX3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfaW5zdGFuY2Vfbm90aWZpY2F0aW9uKFwicmVhc3NpZ25fbmV3X2luYm94X3VzZXJzXCIsIGlucywgcmVsb2NhdGVfY29tbWVudCwgY3VycmVudF91c2VyX2luZm8pO1xuICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soaW5zLmZsb3csIGlucywge30sICdyZWxvY2F0ZScsIGN1cnJlbnRfdXNlciwgaW5zLmluYm94X3VzZXJzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvYXJjaGl2ZScsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHRcdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHRcdF8uZWFjaCBoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIChpbnN0YW5jZV9mcm9tX2NsaWVudCkgLT5cclxuXHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qmluc3RhbmNlXHJcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0c3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZVxyXG5cdFx0XHQjIOiOt+WPluS4gOS4qnNwYWNlXHJcblx0XHRcdHNwYWNlID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdFx0IyDliKTmlq3kuIDkuKppbnN0YW5jZeaYr+WQpuS4uuWujOaIkOW5tuS4lOacquW9kuaho+eKtuaAgVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VGaW5pc2hlZEFuZE5vdEFyY2hpZXZlZChpbnN0YW5jZSlcclxuXHRcdFx0IyDojrflj5bkuIDkuKpzcGFjZeS4i+eahOS4gOS4qnVzZXJcclxuXHRcdFx0c3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdCMg5Yik5pat5LiA5Liq55So5oi35piv5ZCm5piv5LiA5LiqaW5zdGFuY2XnmoTmj5DkuqTogIUg5oiW6ICFc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlU3VibWl0dGVyT3JBcHBsaWNhbnRPclNwYWNlQWRtaW4oaW5zdGFuY2UsIGN1cnJlbnRfdXNlciwgc3BhY2UpXHJcblx0XHRcdFxyXG5cdFx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XHJcblx0XHRcdHNldE9iai5pc19hcmNoaXZlZCA9IHRydWVcclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGVcclxuXHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXHJcblxyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRzZXQ6IHNldE9ian0pXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0XHRkYXRhOiB7fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV0gfVxyXG5cdFxyXG5cdFx0IiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9hcmNoaXZlJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGhhc2hEYXRhO1xuICB0cnkge1xuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gICAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgXy5lYWNoKGhhc2hEYXRhWydJbnN0YW5jZXMnXSwgZnVuY3Rpb24oaW5zdGFuY2VfZnJvbV9jbGllbnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIHNldE9iaiwgc3BhY2UsIHNwYWNlX2lkLCBzcGFjZV91c2VyO1xuICAgICAgaW5zdGFuY2VfaWQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXTtcbiAgICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xuICAgICAgc3BhY2UgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZUZpbmlzaGVkQW5kTm90QXJjaGlldmVkKGluc3RhbmNlKTtcbiAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVN1Ym1pdHRlck9yQXBwbGljYW50T3JTcGFjZUFkbWluKGluc3RhbmNlLCBjdXJyZW50X3VzZXIsIHNwYWNlKTtcbiAgICAgIHNldE9iaiA9IG5ldyBPYmplY3Q7XG4gICAgICBzZXRPYmouaXNfYXJjaGl2ZWQgPSB0cnVlO1xuICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbmV3IERhdGU7XG4gICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICByZXR1cm4gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge31cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIk1ldGVvci5zdGFydHVwIC0+XHJcblx0V2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UgXCIvYXBpL3dvcmtmbG93L2V4cG9ydC9pbnN0YW5jZXNcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdFx0dHJ5XHJcblx0XHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSlcclxuXHJcblx0XHRcdHF1ZXJ5ID0gcmVxLnF1ZXJ5XHJcblx0XHRcdHNwYWNlX2lkID0gcXVlcnkuc3BhY2VfaWRcclxuXHRcdFx0Zmxvd19pZCA9IHF1ZXJ5LmZsb3dfaWRcclxuXHRcdFx0dHlwZSA9IHBhcnNlSW50KHF1ZXJ5LnR5cGUpXHJcblx0XHRcdHRpbWV6b25lb2Zmc2V0ID0gcGFyc2VJbnQocXVlcnkudGltZXpvbmVvZmZzZXQpXHJcblxyXG5cdFx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7IF9pZDogZmxvd19pZCB9LCB7IGZpZWxkczogeyBmb3JtOiAxIH0gfSlcclxuXHRcdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoeyBfaWQ6IGZsb3cuZm9ybSB9LCB7IGZpZWxkczogeyBuYW1lOiAxLCAnY3VycmVudC5maWVsZHMnOiAxIH0gfSlcclxuXHJcblx0XHRcdGZvcm1fbmFtZSA9IGZvcm0ubmFtZVxyXG5cdFx0XHRmaWVsZHMgPSBmb3JtLmN1cnJlbnQuZmllbGRzXHJcblx0XHRcdHRhYmxlX2ZpZWxkcyA9IG5ldyBBcnJheVxyXG5cdFx0XHRfLmVhY2ggZm9ybS5jdXJyZW50LmZpZWxkcywgKGZpZWxkKSAtPlxyXG5cdFx0XHRcdGlmIGZpZWxkLnR5cGUgaXMgXCJ0YWJsZVwiXHJcblx0XHRcdFx0XHR0YWJsZV9maWVsZHMucHVzaChmaWVsZClcclxuXHJcblx0XHRcdGluc190b194bHMgPSBuZXcgQXJyYXlcclxuXHRcdFx0c3RhcnRfZGF0ZSA9IG51bGxcclxuXHRcdFx0ZW5kX2RhdGUgPSBudWxsXHJcblx0XHRcdG5vdyA9IG5ldyBEYXRlXHJcblx0XHRcdHNlbGVjdG9yID0geyBzcGFjZTogc3BhY2VfaWQsIGZsb3c6IGZsb3dfaWQgfVxyXG5cdFx0XHRzZWxlY3Rvci5zdGF0ZSA9IHskaW46IFtcInBlbmRpbmdcIiwgXCJjb21wbGV0ZWRcIl19XHJcblx0XHRcdHVpZCA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cdFx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlX2lkKVxyXG5cdFx0XHRpZiAhc3BhY2VcclxuXHRcdFx0XHRzZWxlY3Rvci5zdGF0ZSA9IFwibm9uZVwiXHJcblxyXG5cdFx0XHRpZiAhc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVpZClcclxuXHRcdFx0XHRmbG93X2lkcyA9IFdvcmtmbG93TWFuYWdlci5nZXRNeUFkbWluT3JNb25pdG9yRmxvd3Moc3BhY2VfaWQsIHVpZClcclxuXHRcdFx0XHRpZiAhZmxvd19pZHMuaW5jbHVkZXMoc2VsZWN0b3IuZmxvdylcclxuXHRcdFx0XHRcdHNlbGVjdG9yLiRvciA9IFt7c3VibWl0dGVyOiB1aWR9LCB7YXBwbGljYW50OiB1aWR9LCB7aW5ib3hfdXNlcnM6IHVpZH0sIHtvdXRib3hfdXNlcnM6IHVpZH1dXHJcblxyXG5cdFx0XHQjIDAt5pys5pyIXHJcblx0XHRcdGlmIHR5cGUgaXMgMFxyXG5cdFx0XHRcdHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpXHJcblx0XHRcdFx0c2VsZWN0b3Iuc3VibWl0X2RhdGUgPSB7ICRndGU6IHN0YXJ0X2RhdGUgfVxyXG5cdFx0XHRcdGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xyXG5cdFx0XHRcdFx0c29ydDogeyBzdWJtaXRfZGF0ZTogMSB9XHJcblx0XHRcdFx0fSkuZmV0Y2goKVxyXG5cdFx0XHQjIDEt5LiK5pyIXHJcblx0XHRcdGVsc2UgaWYgdHlwZSBpcyAxXHJcblx0XHRcdFx0bGFzdF9tb250aF9kYXRlID0gbmV3IERhdGUobmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCAxKSAtIDEwMDAgKiA2MCAqIDYwICogMjQpXHJcblx0XHRcdFx0c3RhcnRfZGF0ZSA9IG5ldyBEYXRlKGxhc3RfbW9udGhfZGF0ZS5nZXRGdWxsWWVhcigpLCBsYXN0X21vbnRoX2RhdGUuZ2V0TW9udGgoKSwgMSlcclxuXHRcdFx0XHRlbmRfZGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSlcclxuXHRcdFx0XHRzZWxlY3Rvci5zdWJtaXRfZGF0ZSA9IHsgJGd0ZTogc3RhcnRfZGF0ZSwgJGx0ZTogZW5kX2RhdGUgfVxyXG5cdFx0XHRcdGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xyXG5cdFx0XHRcdFx0c29ydDogeyBzdWJtaXRfZGF0ZTogMSB9XHJcblx0XHRcdFx0fSkuZmV0Y2goKVxyXG5cdFx0XHQjIDIt5pW05Liq5bm05bqmXHJcblx0XHRcdGVsc2UgaWYgdHlwZSBpcyAyXHJcblx0XHRcdFx0c3RhcnRfZGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCAwLCAxKVxyXG5cdFx0XHRcdHNlbGVjdG9yLnN1Ym1pdF9kYXRlID0geyAkZ3RlOiBzdGFydF9kYXRlIH1cclxuXHRcdFx0XHRpbnNfdG9feGxzID0gZGIuaW5zdGFuY2VzLmZpbmQoc2VsZWN0b3IsIHtcclxuXHRcdFx0XHRcdHNvcnQ6IHsgc3VibWl0X2RhdGU6IDEgfVxyXG5cdFx0XHRcdH0pLmZldGNoKClcclxuXHRcdFx0IyAzLeaJgOaciVxyXG5cdFx0XHRlbHNlIGlmIHR5cGUgaXMgM1xyXG5cdFx0XHRcdGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xyXG5cdFx0XHRcdFx0c29ydDogeyBzdWJtaXRfZGF0ZTogMSB9XHJcblx0XHRcdFx0fSkuZmV0Y2goKVxyXG5cclxuXHRcdFx0ZWpzID0gcmVxdWlyZSgnZWpzJylcclxuXHRcdFx0c3RyID0gQXNzZXRzLmdldFRleHQoJ3NlcnZlci9lanMvZXhwb3J0X2luc3RhbmNlcy5lanMnKVxyXG5cclxuXHRcdFx0IyDmo4DmtYvmmK/lkKbmnInor63ms5XplJnor69cclxuXHRcdFx0ZWpzTGludCA9IHJlcXVpcmUoJ2Vqcy1saW50JylcclxuXHRcdFx0ZXJyb3Jfb2JqID0gZWpzTGludC5saW50KHN0ciwge30pXHJcblx0XHRcdGlmIGVycm9yX29ialxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IgXCI9PT0vYXBpL3dvcmtmbG93L2V4cG9ydDpcIlxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IgZXJyb3Jfb2JqXHJcblxyXG5cdFx0XHR0ZW1wbGF0ZSA9IGVqcy5jb21waWxlKHN0cilcclxuXHJcblx0XHRcdGxhbmcgPSAnZW4nXHJcblx0XHRcdGlmIGN1cnJlbnRfdXNlcl9pbmZvLmxvY2FsZSBpcyAnemgtY24nXHJcblx0XHRcdFx0bGFuZyA9ICd6aC1DTidcclxuXHRcdFx0XHJcblx0XHRcdHV0Y09mZnNldCA9IHRpbWV6b25lb2Zmc2V0IC8gLTYwXHJcblx0XHRcdFxyXG5cdFx0XHRmb3JtYXREYXRlID0gKGRhdGUsIGZvcm1hdGVyKSAtPlxyXG5cdFx0XHRcdHJldHVybiBtb21lbnQoZGF0ZSkudXRjT2Zmc2V0KHV0Y09mZnNldCkuZm9ybWF0KGZvcm1hdGVyKVxyXG5cclxuXHRcdFx0cmV0ID0gdGVtcGxhdGUoe1xyXG5cdFx0XHRcdGxhbmc6IGxhbmcsXHJcblx0XHRcdFx0Zm9ybWF0RGF0ZTogZm9ybWF0RGF0ZSxcclxuXHRcdFx0XHRmb3JtX25hbWU6IGZvcm1fbmFtZSxcclxuXHRcdFx0XHRmaWVsZHM6IGZpZWxkcyxcclxuXHRcdFx0XHR0YWJsZV9maWVsZHM6IHRhYmxlX2ZpZWxkcyxcclxuXHRcdFx0XHRpbnNfdG9feGxzOiBpbnNfdG9feGxzXHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHRmaWxlTmFtZSA9IFwiU3RlZWRPU1dvcmtmbG93X1wiICsgbW9tZW50KCkuZm9ybWF0KCdZWVlZTU1EREhIbW0nKSArIFwiLnhsc1wiXHJcblx0XHRcdHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIilcclxuXHRcdFx0cmVzLnNldEhlYWRlcihcIkNvbnRlbnQtRGlzcG9zaXRpb25cIiwgXCJhdHRhY2htZW50O2ZpbGVuYW1lPVwiICsgZW5jb2RlVVJJKGZpbGVOYW1lKSlcclxuXHRcdFx0cmVzLmVuZChyZXQpXHJcblx0XHRjYXRjaCBlXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0XHRyZXMuZW5kKGUubWVzc2FnZSkiLCJNZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFdlYkFwcC5jb25uZWN0SGFuZGxlcnMudXNlKFwiL2FwaS93b3JrZmxvdy9leHBvcnQvaW5zdGFuY2VzXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBlanMsIGVqc0xpbnQsIGVuZF9kYXRlLCBlcnJvcl9vYmosIGZpZWxkcywgZmlsZU5hbWUsIGZsb3csIGZsb3dfaWQsIGZsb3dfaWRzLCBmb3JtLCBmb3JtX25hbWUsIGZvcm1hdERhdGUsIGluc190b194bHMsIGxhbmcsIGxhc3RfbW9udGhfZGF0ZSwgbm93LCBxdWVyeSwgcmV0LCBzZWxlY3Rvciwgc3BhY2UsIHNwYWNlX2lkLCBzdGFydF9kYXRlLCBzdHIsIHRhYmxlX2ZpZWxkcywgdGVtcGxhdGUsIHRpbWV6b25lb2Zmc2V0LCB0eXBlLCB1aWQsIHV0Y09mZnNldDtcbiAgICB0cnkge1xuICAgICAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgICAgIHF1ZXJ5ID0gcmVxLnF1ZXJ5O1xuICAgICAgc3BhY2VfaWQgPSBxdWVyeS5zcGFjZV9pZDtcbiAgICAgIGZsb3dfaWQgPSBxdWVyeS5mbG93X2lkO1xuICAgICAgdHlwZSA9IHBhcnNlSW50KHF1ZXJ5LnR5cGUpO1xuICAgICAgdGltZXpvbmVvZmZzZXQgPSBwYXJzZUludChxdWVyeS50aW1lem9uZW9mZnNldCk7XG4gICAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICAgIF9pZDogZmxvd19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBmb3JtOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZsb3cuZm9ybVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICdjdXJyZW50LmZpZWxkcyc6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3JtX25hbWUgPSBmb3JtLm5hbWU7XG4gICAgICBmaWVsZHMgPSBmb3JtLmN1cnJlbnQuZmllbGRzO1xuICAgICAgdGFibGVfZmllbGRzID0gbmV3IEFycmF5O1xuICAgICAgXy5lYWNoKGZvcm0uY3VycmVudC5maWVsZHMsIGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgIGlmIChmaWVsZC50eXBlID09PSBcInRhYmxlXCIpIHtcbiAgICAgICAgICByZXR1cm4gdGFibGVfZmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGluc190b194bHMgPSBuZXcgQXJyYXk7XG4gICAgICBzdGFydF9kYXRlID0gbnVsbDtcbiAgICAgIGVuZF9kYXRlID0gbnVsbDtcbiAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgc2VsZWN0b3IgPSB7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgZmxvdzogZmxvd19pZFxuICAgICAgfTtcbiAgICAgIHNlbGVjdG9yLnN0YXRlID0ge1xuICAgICAgICAkaW46IFtcInBlbmRpbmdcIiwgXCJjb21wbGV0ZWRcIl1cbiAgICAgIH07XG4gICAgICB1aWQgPSBjdXJyZW50X3VzZXJfaW5mby5faWQ7XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlX2lkKTtcbiAgICAgIGlmICghc3BhY2UpIHtcbiAgICAgICAgc2VsZWN0b3Iuc3RhdGUgPSBcIm5vbmVcIjtcbiAgICAgIH1cbiAgICAgIGlmICghc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVpZCkpIHtcbiAgICAgICAgZmxvd19pZHMgPSBXb3JrZmxvd01hbmFnZXIuZ2V0TXlBZG1pbk9yTW9uaXRvckZsb3dzKHNwYWNlX2lkLCB1aWQpO1xuICAgICAgICBpZiAoIWZsb3dfaWRzLmluY2x1ZGVzKHNlbGVjdG9yLmZsb3cpKSB7XG4gICAgICAgICAgc2VsZWN0b3IuJG9yID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdWJtaXR0ZXI6IHVpZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBhcHBsaWNhbnQ6IHVpZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBpbmJveF91c2VyczogdWlkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIG91dGJveF91c2VyczogdWlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgICAgc3RhcnRfZGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgMSk7XG4gICAgICAgIHNlbGVjdG9yLnN1Ym1pdF9kYXRlID0ge1xuICAgICAgICAgICRndGU6IHN0YXJ0X2RhdGVcbiAgICAgICAgfTtcbiAgICAgICAgaW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG4gICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgc3VibWl0X2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDEpIHtcbiAgICAgICAgbGFzdF9tb250aF9kYXRlID0gbmV3IERhdGUobmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCAxKSAtIDEwMDAgKiA2MCAqIDYwICogMjQpO1xuICAgICAgICBzdGFydF9kYXRlID0gbmV3IERhdGUobGFzdF9tb250aF9kYXRlLmdldEZ1bGxZZWFyKCksIGxhc3RfbW9udGhfZGF0ZS5nZXRNb250aCgpLCAxKTtcbiAgICAgICAgZW5kX2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDEpO1xuICAgICAgICBzZWxlY3Rvci5zdWJtaXRfZGF0ZSA9IHtcbiAgICAgICAgICAkZ3RlOiBzdGFydF9kYXRlLFxuICAgICAgICAgICRsdGU6IGVuZF9kYXRlXG4gICAgICAgIH07XG4gICAgICAgIGluc190b194bHMgPSBkYi5pbnN0YW5jZXMuZmluZChzZWxlY3Rvciwge1xuICAgICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHN1Ym1pdF9kYXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAyKSB7XG4gICAgICAgIHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgIHNlbGVjdG9yLnN1Ym1pdF9kYXRlID0ge1xuICAgICAgICAgICRndGU6IHN0YXJ0X2RhdGVcbiAgICAgICAgfTtcbiAgICAgICAgaW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG4gICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgc3VibWl0X2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgICAgaW5zX3RvX3hscyA9IGRiLmluc3RhbmNlcy5maW5kKHNlbGVjdG9yLCB7XG4gICAgICAgICAgc29ydDoge1xuICAgICAgICAgICAgc3VibWl0X2RhdGU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmZldGNoKCk7XG4gICAgICB9XG4gICAgICBlanMgPSByZXF1aXJlKCdlanMnKTtcbiAgICAgIHN0ciA9IEFzc2V0cy5nZXRUZXh0KCdzZXJ2ZXIvZWpzL2V4cG9ydF9pbnN0YW5jZXMuZWpzJyk7XG4gICAgICBlanNMaW50ID0gcmVxdWlyZSgnZWpzLWxpbnQnKTtcbiAgICAgIGVycm9yX29iaiA9IGVqc0xpbnQubGludChzdHIsIHt9KTtcbiAgICAgIGlmIChlcnJvcl9vYmopIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIj09PS9hcGkvd29ya2Zsb3cvZXhwb3J0OlwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcl9vYmopO1xuICAgICAgfVxuICAgICAgdGVtcGxhdGUgPSBlanMuY29tcGlsZShzdHIpO1xuICAgICAgbGFuZyA9ICdlbic7XG4gICAgICBpZiAoY3VycmVudF91c2VyX2luZm8ubG9jYWxlID09PSAnemgtY24nKSB7XG4gICAgICAgIGxhbmcgPSAnemgtQ04nO1xuICAgICAgfVxuICAgICAgdXRjT2Zmc2V0ID0gdGltZXpvbmVvZmZzZXQgLyAtNjA7XG4gICAgICBmb3JtYXREYXRlID0gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0ZXIpIHtcbiAgICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS51dGNPZmZzZXQodXRjT2Zmc2V0KS5mb3JtYXQoZm9ybWF0ZXIpO1xuICAgICAgfTtcbiAgICAgIHJldCA9IHRlbXBsYXRlKHtcbiAgICAgICAgbGFuZzogbGFuZyxcbiAgICAgICAgZm9ybWF0RGF0ZTogZm9ybWF0RGF0ZSxcbiAgICAgICAgZm9ybV9uYW1lOiBmb3JtX25hbWUsXG4gICAgICAgIGZpZWxkczogZmllbGRzLFxuICAgICAgICB0YWJsZV9maWVsZHM6IHRhYmxlX2ZpZWxkcyxcbiAgICAgICAgaW5zX3RvX3hsczogaW5zX3RvX3hsc1xuICAgICAgfSk7XG4gICAgICBmaWxlTmFtZSA9IFwiU3RlZWRPU1dvcmtmbG93X1wiICsgbW9tZW50KCkuZm9ybWF0KCdZWVlZTU1EREhIbW0nKSArIFwiLnhsc1wiO1xuICAgICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKTtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LURpc3Bvc2l0aW9uXCIsIFwiYXR0YWNobWVudDtmaWxlbmFtZT1cIiArIGVuY29kZVVSSShmaWxlTmFtZSkpO1xuICAgICAgcmV0dXJuIHJlcy5lbmQocmV0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZSA9IGVycm9yO1xuICAgICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgIHJldHVybiByZXMuZW5kKGUubWVzc2FnZSk7XG4gICAgfVxuICB9KTtcbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQgJ2dldCcsICcvdWYvc3BhY2UvY2hhbmdlc2V0JywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0cXVlcnkgPSByZXEucXVlcnlcclxuXHRcdGF1dGhfdG9rZW4gPSBkYi5hdXRoX3Rva2Vucy5maW5kT25lKHthdXRoX3Rva2VuOiBxdWVyeS5hdXRoX3Rva2VufSlcclxuXHJcblx0XHRpZiAobm90IGF1dGhfdG9rZW4pIG9yIChub3QgYXV0aF90b2tlbi5lbmFibGVkKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yIDQwMSwgJ1VuYXV0aG9yaXplZCdcclxuXHJcblx0XHRzeW5jX3Rva2VuID0gcXVlcnlbXCJzeW5jX3Rva2VuXCJdXHJcblx0XHRmb3JtaWRzID0gcXVlcnlbXCJmb3JtaWRzXCJdICMg6YCX5Y+36ZqU5byA5a2X56ym5LiyXHJcblx0XHRpc19hZG1pbiA9IHF1ZXJ5W1wiaXNfYWRtaW5cIl1cclxuXHJcblx0XHRkYXRhID0gdXVmbG93TWFuYWdlci5nZXRfU3BhY2VDaGFuZ2VTZXQoZm9ybWlkcywgaXNfYWRtaW4sIHN5bmNfdG9rZW4pXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0XHRkYXRhOiBkYXRhXHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9IiwiSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvdWYvc3BhY2UvY2hhbmdlc2V0JywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGF1dGhfdG9rZW4sIGRhdGEsIGUsIGZvcm1pZHMsIGlzX2FkbWluLCBxdWVyeSwgc3luY190b2tlbjtcbiAgdHJ5IHtcbiAgICBxdWVyeSA9IHJlcS5xdWVyeTtcbiAgICBhdXRoX3Rva2VuID0gZGIuYXV0aF90b2tlbnMuZmluZE9uZSh7XG4gICAgICBhdXRoX3Rva2VuOiBxdWVyeS5hdXRoX3Rva2VuXG4gICAgfSk7XG4gICAgaWYgKCghYXV0aF90b2tlbikgfHwgKCFhdXRoX3Rva2VuLmVuYWJsZWQpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDQwMSwgJ1VuYXV0aG9yaXplZCcpO1xuICAgIH1cbiAgICBzeW5jX3Rva2VuID0gcXVlcnlbXCJzeW5jX3Rva2VuXCJdO1xuICAgIGZvcm1pZHMgPSBxdWVyeVtcImZvcm1pZHNcIl07XG4gICAgaXNfYWRtaW4gPSBxdWVyeVtcImlzX2FkbWluXCJdO1xuICAgIGRhdGEgPSB1dWZsb3dNYW5hZ2VyLmdldF9TcGFjZUNoYW5nZVNldChmb3JtaWRzLCBpc19hZG1pbiwgc3luY190b2tlbik7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy9hcGkvd29ya2Zsb3cvcmV0cmlldmUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0XHRjdXJyZW50X3VzZXIgPSBjdXJyZW50X3VzZXJfaW5mby5faWRcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRfLmVhY2ggaGFzaERhdGFbJ0luc3RhbmNlcyddLCAoaW5zdGFuY2VfZnJvbV9jbGllbnQpIC0+XHJcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9mcm9tX2NsaWVudFtcIl9pZFwiXSlcclxuXHRcdFx0cmV0cmlldmVfY29tbWVudCA9IGluc3RhbmNlX2Zyb21fY2xpZW50WydyZXRyaWV2ZV9jb21tZW50J11cclxuXHJcblx0XHRcdCMg6aqM6K+BaW5zdGFuY2XkuLrlrqHmoLjkuK3nirbmgIFcclxuXHRcdFx0IyB1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VQZW5kaW5nKGluc3RhbmNlKVxyXG5cdFx0XHQjIOagoemqjOeUs+ivt+WNleaYr+W9k+WJjeeUqOaIt+W3suWuoeaguOi/h+eahOWNleWtkOaIluiAheW9k+WJjeeUqOaIt+aYr+aPkOS6pOS6uuaIlueUs+ivt+S6ulxyXG5cdFx0XHRpZiAobm90IGluc3RhbmNlLm91dGJveF91c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSBhbmQgKGluc3RhbmNlLnN1Ym1pdHRlciBpc250IGN1cnJlbnRfdXNlciBhbmQgaW5zdGFuY2UuYXBwbGljYW50IGlzbnQgY3VycmVudF91c2VyKVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+W9k+WJjeeUqOaIt+S4jeespuWQiOWPluWbnuadoeS7ticpXHJcblxyXG5cdFx0XHRyZXRyaWV2ZV90eXBlID0gXCJcIlxyXG5cclxuXHRcdFx0dHJhY2VzID0gaW5zdGFuY2UudHJhY2VzXHJcblxyXG5cdFx0XHQj6I635Y+W5pyA5paw55qEdHJhY2XvvIwg5Y2z5Y+W5Zue5q2l6aqkXHJcblx0XHRcdGxhc3RfdHJhY2UgPSBfLmxhc3QodHJhY2VzKVxyXG5cdFx0XHRsYXN0X3RyYWNlX2lkID0gbGFzdF90cmFjZS5faWRcclxuXHRcdFx0cHJldmlvdXNfdHJhY2VfaWQgPSBsYXN0X3RyYWNlLnByZXZpb3VzX3RyYWNlX2lkc1swXTtcclxuXHRcdFx0cHJldmlvdXNfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdHJldHVybiB0Ll9pZCBpcyBwcmV2aW91c190cmFjZV9pZFxyXG5cdFx0XHQpXHJcblx0XHRcdHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQgPSBwcmV2aW91c190cmFjZS5zdGVwXHJcblx0XHRcdHByZXZpb3VzX3RyYWNlX25hbWUgPSBwcmV2aW91c190cmFjZS5uYW1lXHJcblx0XHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdylcclxuXHRcdFx0cHJldmlvdXNfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZClcclxuXHRcdFx0aWYgcHJldmlvdXNfc3RlcC5zdGVwX3R5cGUgaXMgXCJjb3VudGVyU2lnblwiXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5Lya562+5LiN6IO95Y+W5ZueJylcclxuXHJcblx0XHRcdCMg5Y+W5Zue5q2l6aqk55qE5YmN5LiA5Liq5q2l6aqk5aSE55CG5Lq65ZSv5LiA77yI5Y2z5o6S6Zmk5o6J5Lyg6ZiF5ZKM6L2s5Y+R55qEYXBwcm92ZeWQju+8jOWJqeS9meeahGFwcHJvdmXlj6rmnInkuIDkuKrvvInlubbkuJTmmK/lvZPliY3nlKjmiLdcclxuXHRcdFx0cHJldmlvdXNfdHJhY2VfYXBwcm92ZXMgPSBfLmZpbHRlciBwcmV2aW91c190cmFjZS5hcHByb3ZlcywgKGEpLT5cclxuXHRcdFx0XHRyZXR1cm4gYS50eXBlIGlzbnQgJ2NjJyBhbmQgYS50eXBlIGlzbnQgJ2Rpc3RyaWJ1dGUnIGFuZCBhLnR5cGUgaXNudCAnZm9yd2FyZCcgYW5kIFsnYXBwcm92ZWQnLCdzdWJtaXR0ZWQnLCdyZWplY3RlZCddLmluY2x1ZGVzKGEuanVkZ2UpXHJcblxyXG5cdFx0XHRpZiBwcmV2aW91c190cmFjZV9hcHByb3Zlcy5sZW5ndGggaXMgMSBhbmQgKHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzWzBdLnVzZXIgaXMgY3VycmVudF91c2VyIG9yIHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzWzBdLmhhbmRsZXIgaXMgY3VycmVudF91c2VyKVxyXG5cdFx0XHRcdHJldHJpZXZlX3R5cGUgPSAnbm9ybWFsJyAjIOeUs+ivt+WNleato+W4uOa1gei9rOeahOWPluWbnu+8jOWNs+mdnuS8oOmYheWPluWbnlxyXG5cclxuXHRcdFx0aSA9IHRyYWNlcy5sZW5ndGhcclxuXHRcdFx0cmV0cmlldmVfYXBwcm92ZSA9IHt9XHJcblx0XHRcdHdoaWxlIGkgPiAwXHJcblx0XHRcdFx0Xy5lYWNoIHRyYWNlc1tpLTFdLmFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRcdFx0aWYgYS50eXBlIGlzICdjYycgYW5kIGEuaXNfZmluaXNoZWQgaXMgdHJ1ZSBhbmQgYS51c2VyIGlzIGN1cnJlbnRfdXNlclxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV90eXBlID0gJ2NjJ1xyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByb3ZlID0gYVxyXG5cclxuXHRcdFx0XHRpZiByZXRyaWV2ZV90eXBlIGlzICdjYydcclxuXHRcdFx0XHRcdGJyZWFrXHJcblxyXG5cdFx0XHRcdGktLVxyXG5cclxuXHJcblx0XHRcdGlmIHJldHJpZXZlX3R5cGUgaXMgJ25vcm1hbCdcclxuXHRcdFx0XHQjIOiOt+WPluS4gOS4qmZsb3dcclxuXHRcdFx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblx0XHRcdFx0cHJldmlvdXNfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZClcclxuXHRcdFx0XHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0XHRcdFx0aW5zdGFuY2VfaWQgPSBpbnN0YW5jZS5faWRcclxuXHRcdFx0XHRvbGRfaW5ib3hfdXNlcnMgPSBpbnN0YW5jZS5pbmJveF91c2Vyc1xyXG5cdFx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0XHRcdF8uZWFjaCB0cmFjZXMsICh0KS0+XHJcblx0XHRcdFx0XHRpZiB0Ll9pZCBpcyBsYXN0X3RyYWNlX2lkXHJcblx0XHRcdFx0XHRcdGlmIG5vdCB0LmFwcHJvdmVzXHJcblx0XHRcdFx0XHRcdFx0dC5hcHByb3ZlcyA9IG5ldyBBcnJheVxyXG5cdFx0XHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNlLmFwcHJvdmXorrDlvZVcclxuXHRcdFx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhcHByKS0+XHJcblx0XHRcdFx0XHRcdFx0aWYgYXBwci5pc19maW5pc2hlZCA9PSBmYWxzZSBhbmQgYXBwci50eXBlIGlzbnQgXCJjY1wiXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuZmluaXNoX2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0XHRcdGFwcHIucmVhZF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmlzX2Vycm9yID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuaXNfcmVhZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuaXNfZmluaXNoZWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0XHRhcHByLmp1ZGdlID0gXCJ0ZXJtaW5hdGVkXCJcclxuXHRcdFx0XHRcdFx0XHRcdGFwcHIuY29zdF90aW1lID0gYXBwci5maW5pc2hfZGF0ZSAtIGFwcHIuc3RhcnRfZGF0ZVxyXG5cdFx0XHRcdFx0XHQjIOWcqOWQjOS4gHRyYWNl5LiL5o+S5YWl5Y+W5Zue5pON5L2c6ICF55qEYXBwcm92ZeiusOW9lVxyXG5cdFx0XHRcdFx0XHRjdXJyZW50X3NwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cdFx0XHRcdFx0XHRjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb24sIHsgZmllbGRzOiB7IG5hbWU6IDEsIGZ1bGxuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwciA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnRyYWNlID0gdC5faWRcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5pc19maW5pc2hlZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci51c2VyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIudXNlcl9uYW1lID0gY3VycmVudF91c2VyX2luZm8ubmFtZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXIgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24ubmFtZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnN0YXJ0X2RhdGUgPSBub3dcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5maW5pc2hfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmR1ZV9kYXRlID0gdC5kdWVfZGF0ZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnJlYWRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmp1ZGdlID0gXCJyZXRyaWV2ZWRcIlxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLmlzX3JlYWQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuZGVzY3JpcHRpb24gPSByZXRyaWV2ZV9jb21tZW50XHJcblx0XHRcdFx0XHRcdHJldHJpZXZlX2FwcHIuaXNfZXJyb3IgPSBmYWxzZVxyXG5cdFx0XHRcdFx0XHRyZXRyaWV2ZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRcdFx0cmV0cmlldmVfYXBwci5jb3N0X3RpbWUgPSByZXRyaWV2ZV9hcHByLmZpbmlzaF9kYXRlIC0gcmV0cmlldmVfYXBwci5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRcdHQuYXBwcm92ZXMucHVzaChyZXRyaWV2ZV9hcHByKVxyXG5cclxuXHRcdFx0XHRcdFx0IyDmm7TmlrDlvZPliY10cmFjZeiusOW9lVxyXG5cdFx0XHRcdFx0XHR0LmlzX2ZpbmlzaGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHR0LmZpbmlzaF9kYXRlID0gbm93XHJcblx0XHRcdFx0XHRcdHQuanVkZ2UgPSBcInJldHJpZXZlZFwiXHJcblxyXG5cdFx0XHRcdCMg5o+S5YWl5LiL5LiA5q2ldHJhY2XorrDlvZVcclxuXHRcdFx0XHRuZXdUcmFjZSA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyXHJcblx0XHRcdFx0bmV3VHJhY2UuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZFxyXG5cdFx0XHRcdG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlX2lkXVxyXG5cdFx0XHRcdG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2VcclxuXHRcdFx0XHRuZXdUcmFjZS5zdGVwID0gcHJldmlvdXNfdHJhY2Vfc3RlcF9pZFxyXG5cdFx0XHRcdG5ld1RyYWNlLm5hbWUgPSBwcmV2aW91c190cmFjZV9uYW1lXHJcblx0XHRcdFx0bmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdG5ld1RyYWNlLmR1ZV9kYXRlID0gdXVmbG93TWFuYWdlci5nZXREdWVEYXRlKHByZXZpb3VzX3N0ZXAudGltZW91dF9ob3VycylcclxuXHRcdFx0XHRuZXdUcmFjZS5hcHByb3ZlcyA9IFtdXHJcblx0XHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZS5hcHByb3Zl6K6w5b2VXHJcblx0XHRcdFx0bmV3QXBwcm92ZSA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRuZXdBcHByb3ZlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0XHRuZXdBcHByb3ZlLnRyYWNlID0gbmV3VHJhY2UuX2lkXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5pc19maW5pc2hlZCA9IGZhbHNlXHJcblx0XHRcdFx0bmV3QXBwcm92ZS51c2VyID0gY3VycmVudF91c2VyXHJcblxyXG5cdFx0XHRcdGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyLCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZVxyXG5cclxuXHRcdFx0XHRzcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHRcdFx0XHQjIOiOt+WPlm5leHRfc3RlcF91c2Vy5omA5Zyo55qE6YOo6Zeo5L+h5oGvXHJcblx0XHRcdFx0b3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcclxuXHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uID0gb3JnX2luZm9bXCJvcmdhbml6YXRpb25cIl1cclxuXHRcdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBvcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBuZXdUcmFjZS5kdWVfZGF0ZVxyXG5cdFx0XHRcdG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5pc19lcnJvciA9IGZhbHNlXHJcblx0XHRcdFx0bmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0XHJcblxyXG5cdFx0XHRcdHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnN0YW5jZS52YWx1ZXMsIG5ld0FwcHJvdmUpXHJcblxyXG5cdFx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSlcclxuXHRcdFx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBbY3VycmVudF91c2VyXVxyXG5cclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHR0cmFjZXMucHVzaChuZXdUcmFjZSlcclxuXHRcdFx0XHRzZXRPYmoudHJhY2VzID0gdHJhY2VzXHJcblx0XHRcdFx0c2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCJcclxuXHRcdFx0XHRzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZVxyXG5cclxuXHRcdFx0XHRzZXRPYmouY3VycmVudF9zdGVwX25hbWUgPSBwcmV2aW91c190cmFjZV9uYW1lXHJcblx0XHRcdFx0c2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgcHJldmlvdXNfc3RlcC5saW5lcylcclxuXHJcblx0XHRcdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWR9LCB7JHNldDogc2V0T2JqfSlcclxuXHRcdFx0XHRpZiByXHJcblx0XHRcdFx0XHQjIOe7meiiq+WIoOmZpOeahGluYm94X3VzZXJzIOWSjCDlvZPliY3nlKjmiLcg5Y+R6YCBcHVzaFxyXG5cdFx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbylcclxuXHRcdFx0XHRcdF8uZWFjaChvbGRfaW5ib3hfdXNlcnMsICh1c2VyX2lkKS0+XHJcblx0XHRcdFx0XHRcdGlmIHVzZXJfaWQgaXNudCBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZClcclxuXHRcdFx0XHRcdClcclxuXHJcblx0XHRcdFx0XHRpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRcdFx0IyDlpoLmnpzlt7Lnu4/phY3nva53ZWJob29r5bm25bey5r+A5rS75YiZ6Kem5Y+RXHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JldHJpZXZlJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpXHJcblxyXG5cdFx0XHRlbHNlIGlmIHJldHJpZXZlX3R5cGUgaXMgJ2NjJ1xyXG5cdFx0XHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0XHRcdGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkXHJcblx0XHRcdFx0dGhlX3RyYWNlID0gXy5maW5kIHRyYWNlcywgKHQpLT5cclxuXHRcdFx0XHRcdHJldHVybiB0Ll9pZCBpcyByZXRyaWV2ZV9hcHByb3ZlLnRyYWNlXHJcblxyXG5cdFx0XHRcdF8uZWFjaCB0aGVfdHJhY2UuYXBwcm92ZXMsIChhKS0+XHJcblx0XHRcdFx0XHRpZiBhLl9pZCBpcyByZXRyaWV2ZV9hcHByb3ZlLl9pZFxyXG5cdFx0XHRcdFx0XHRhLmlzX2ZpbmlzaGVkID0gZmFsc2VcclxuXHRcdFx0XHRcdFx0YS5maW5pc2hfZGF0ZSA9IHVuZGVmaW5lZFxyXG5cdFx0XHRcdFx0XHRhLmp1ZGdlID0gdW5kZWZpbmVkXHJcblx0XHRcdFx0XHRcdGEuY29zdF90aW1lID0gdW5kZWZpbmVkXHJcblxyXG5cdFx0XHRcdGNjX3VzZXJzID0gaW5zdGFuY2UuY2NfdXNlcnNcclxuXHRcdFx0XHRjY191c2Vycy5wdXNoKGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkID0gbm93XHJcblx0XHRcdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXHJcblx0XHRcdFx0c2V0T2JqLnN0YXRlID0gXCJwZW5kaW5nXCJcclxuXHRcdFx0XHRzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZVxyXG5cdFx0XHRcdHNldE9iai5jY191c2VycyA9IGNjX3VzZXJzXHJcblx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3ZlcyddID0gdGhlX3RyYWNlLmFwcHJvdmVzXHJcblxyXG5cdFx0XHRcdHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkLCAndHJhY2VzLl9pZCc6IHJldHJpZXZlX2FwcHJvdmUudHJhY2V9LCB7JHNldDogc2V0T2JqfSlcclxuXHRcdFx0XHRpZiByXHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfY3VycmVudF91c2VyKGN1cnJlbnRfdXNlcl9pbmZvKVxyXG5cclxuXHRcdFx0XHRpbnMgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKVxyXG5cdFx0XHRcdCMg5aaC5p6c5bey57uP6YWN572ud2ViaG9va+W5tuW3sua/gOa0u+WImeinpuWPkVxyXG5cdFx0XHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGlucy5mbG93LCBpbnMsIHt9LCAncmV0cmlldmUnLCBjdXJyZW50X3VzZXIsIFtjdXJyZW50X3VzZXJdKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHtlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9yZXRyaWV2ZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBoYXNoRGF0YTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpO1xuICAgIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgIF8uZWFjaChoYXNoRGF0YVsnSW5zdGFuY2VzJ10sIGZ1bmN0aW9uKGluc3RhbmNlX2Zyb21fY2xpZW50KSB7XG4gICAgICB2YXIgY2NfdXNlcnMsIGZsb3csIGhhbmRsZXJfaW5mbywgaSwgaW5zLCBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIGxhc3RfdHJhY2UsIGxhc3RfdHJhY2VfaWQsIG5ld0FwcHJvdmUsIG5ld1RyYWNlLCBub3csIG9sZF9pbmJveF91c2Vycywgb3JnX2luZm8sIHByZXZpb3VzX3N0ZXAsIHByZXZpb3VzX3RyYWNlLCBwcmV2aW91c190cmFjZV9hcHByb3ZlcywgcHJldmlvdXNfdHJhY2VfaWQsIHByZXZpb3VzX3RyYWNlX25hbWUsIHByZXZpb3VzX3RyYWNlX3N0ZXBfaWQsIHIsIHJldHJpZXZlX2FwcHJvdmUsIHJldHJpZXZlX2NvbW1lbnQsIHJldHJpZXZlX3R5cGUsIHNldE9iaiwgc3BhY2VfaWQsIHNwYWNlX3VzZXIsIHRoZV90cmFjZSwgdHJhY2VzO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50W1wiX2lkXCJdKTtcbiAgICAgIHJldHJpZXZlX2NvbW1lbnQgPSBpbnN0YW5jZV9mcm9tX2NsaWVudFsncmV0cmlldmVfY29tbWVudCddO1xuICAgICAgaWYgKCghaW5zdGFuY2Uub3V0Ym94X3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcikpICYmIChpbnN0YW5jZS5zdWJtaXR0ZXIgIT09IGN1cnJlbnRfdXNlciAmJiBpbnN0YW5jZS5hcHBsaWNhbnQgIT09IGN1cnJlbnRfdXNlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn5b2T5YmN55So5oi35LiN56ym5ZCI5Y+W5Zue5p2h5Lu2Jyk7XG4gICAgICB9XG4gICAgICByZXRyaWV2ZV90eXBlID0gXCJcIjtcbiAgICAgIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcbiAgICAgIGxhc3RfdHJhY2UgPSBfLmxhc3QodHJhY2VzKTtcbiAgICAgIGxhc3RfdHJhY2VfaWQgPSBsYXN0X3RyYWNlLl9pZDtcbiAgICAgIHByZXZpb3VzX3RyYWNlX2lkID0gbGFzdF90cmFjZS5wcmV2aW91c190cmFjZV9pZHNbMF07XG4gICAgICBwcmV2aW91c190cmFjZSA9IF8uZmluZCh0cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuX2lkID09PSBwcmV2aW91c190cmFjZV9pZDtcbiAgICAgIH0pO1xuICAgICAgcHJldmlvdXNfdHJhY2Vfc3RlcF9pZCA9IHByZXZpb3VzX3RyYWNlLnN0ZXA7XG4gICAgICBwcmV2aW91c190cmFjZV9uYW1lID0gcHJldmlvdXNfdHJhY2UubmFtZTtcbiAgICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgICBwcmV2aW91c19zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBwcmV2aW91c190cmFjZV9zdGVwX2lkKTtcbiAgICAgIGlmIChwcmV2aW91c19zdGVwLnN0ZXBfdHlwZSA9PT0gXCJjb3VudGVyU2lnblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+S8muetvuS4jeiDveWPluWbnicpO1xuICAgICAgfVxuICAgICAgcHJldmlvdXNfdHJhY2VfYXBwcm92ZXMgPSBfLmZpbHRlcihwcmV2aW91c190cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gYS50eXBlICE9PSAnY2MnICYmIGEudHlwZSAhPT0gJ2Rpc3RyaWJ1dGUnICYmIGEudHlwZSAhPT0gJ2ZvcndhcmQnICYmIFsnYXBwcm92ZWQnLCAnc3VibWl0dGVkJywgJ3JlamVjdGVkJ10uaW5jbHVkZXMoYS5qdWRnZSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChwcmV2aW91c190cmFjZV9hcHByb3Zlcy5sZW5ndGggPT09IDEgJiYgKHByZXZpb3VzX3RyYWNlX2FwcHJvdmVzWzBdLnVzZXIgPT09IGN1cnJlbnRfdXNlciB8fCBwcmV2aW91c190cmFjZV9hcHByb3Zlc1swXS5oYW5kbGVyID09PSBjdXJyZW50X3VzZXIpKSB7XG4gICAgICAgIHJldHJpZXZlX3R5cGUgPSAnbm9ybWFsJztcbiAgICAgIH1cbiAgICAgIGkgPSB0cmFjZXMubGVuZ3RoO1xuICAgICAgcmV0cmlldmVfYXBwcm92ZSA9IHt9O1xuICAgICAgd2hpbGUgKGkgPiAwKSB7XG4gICAgICAgIF8uZWFjaCh0cmFjZXNbaSAtIDFdLmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgaWYgKGEudHlwZSA9PT0gJ2NjJyAmJiBhLmlzX2ZpbmlzaGVkID09PSB0cnVlICYmIGEudXNlciA9PT0gY3VycmVudF91c2VyKSB7XG4gICAgICAgICAgICByZXRyaWV2ZV90eXBlID0gJ2NjJztcbiAgICAgICAgICAgIHJldHVybiByZXRyaWV2ZV9hcHByb3ZlID0gYTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmV0cmlldmVfdHlwZSA9PT0gJ2NjJykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXRyaWV2ZV90eXBlID09PSAnbm9ybWFsJykge1xuICAgICAgICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpO1xuICAgICAgICBwcmV2aW91c19zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGluc3RhbmNlLCBmbG93LCBwcmV2aW91c190cmFjZV9zdGVwX2lkKTtcbiAgICAgICAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgICAgICAgaW5zdGFuY2VfaWQgPSBpbnN0YW5jZS5faWQ7XG4gICAgICAgIG9sZF9pbmJveF91c2VycyA9IGluc3RhbmNlLmluYm94X3VzZXJzO1xuICAgICAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgICAgXy5lYWNoKHRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHZhciBjdXJyZW50X3NwYWNlX3VzZXIsIGN1cnJlbnRfdXNlcl9vcmdhbml6YXRpb24sIHJldHJpZXZlX2FwcHI7XG4gICAgICAgICAgaWYgKHQuX2lkID09PSBsYXN0X3RyYWNlX2lkKSB7XG4gICAgICAgICAgICBpZiAoIXQuYXBwcm92ZXMpIHtcbiAgICAgICAgICAgICAgdC5hcHByb3ZlcyA9IG5ldyBBcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhcHByKSB7XG4gICAgICAgICAgICAgIGlmIChhcHByLmlzX2ZpbmlzaGVkID09PSBmYWxzZSAmJiBhcHByLnR5cGUgIT09IFwiY2NcIikge1xuICAgICAgICAgICAgICAgIGFwcHIuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgICAgICBhcHByLmZpbmlzaF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICAgIGFwcHIucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgICAgICAgIGFwcHIuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBhcHByLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFwcHIuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFwcHIuanVkZ2UgPSBcInRlcm1pbmF0ZWRcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwci5jb3N0X3RpbWUgPSBhcHByLmZpbmlzaF9kYXRlIC0gYXBwci5zdGFydF9kYXRlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGN1cnJlbnRfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgICAgICAgICAgY3VycmVudF91c2VyX29yZ2FuaXphdGlvbiA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZShjdXJyZW50X3NwYWNlX3VzZXIub3JnYW5pemF0aW9uLCB7XG4gICAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IDEsXG4gICAgICAgICAgICAgICAgZnVsbG5hbWU6IDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByID0gbmV3IE9iamVjdDtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIudHJhY2UgPSB0Ll9pZDtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuaXNfZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci51c2VyID0gY3VycmVudF91c2VyO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci51c2VyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5oYW5kbGVyID0gY3VycmVudF91c2VyO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5oYW5kbGVyX25hbWUgPSBjdXJyZW50X3VzZXJfaW5mby5uYW1lO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5oYW5kbGVyX29yZ2FuaXphdGlvbiA9IGN1cnJlbnRfc3BhY2VfdXNlci5vcmdhbml6YXRpb247XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBjdXJyZW50X3VzZXJfb3JnYW5pemF0aW9uLm5hbWU7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gY3VycmVudF91c2VyX29yZ2FuaXphdGlvbi5mdWxsbmFtZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmR1ZV9kYXRlID0gdC5kdWVfZGF0ZTtcbiAgICAgICAgICAgIHJldHJpZXZlX2FwcHIucmVhZF9kYXRlID0gbm93O1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5qdWRnZSA9IFwicmV0cmlldmVkXCI7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0cmlldmVfYXBwci5kZXNjcmlwdGlvbiA9IHJldHJpZXZlX2NvbW1lbnQ7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmlzX2Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLnZhbHVlcyA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICByZXRyaWV2ZV9hcHByLmNvc3RfdGltZSA9IHJldHJpZXZlX2FwcHIuZmluaXNoX2RhdGUgLSByZXRyaWV2ZV9hcHByLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICB0LmFwcHJvdmVzLnB1c2gocmV0cmlldmVfYXBwcik7XG4gICAgICAgICAgICB0LmlzX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHQuZmluaXNoX2RhdGUgPSBub3c7XG4gICAgICAgICAgICByZXR1cm4gdC5qdWRnZSA9IFwicmV0cmlldmVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3VHJhY2UgPSBuZXcgT2JqZWN0O1xuICAgICAgICBuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgICBuZXdUcmFjZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICBuZXdUcmFjZS5wcmV2aW91c190cmFjZV9pZHMgPSBbbGFzdF90cmFjZV9pZF07XG4gICAgICAgIG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIG5ld1RyYWNlLnN0ZXAgPSBwcmV2aW91c190cmFjZV9zdGVwX2lkO1xuICAgICAgICBuZXdUcmFjZS5uYW1lID0gcHJldmlvdXNfdHJhY2VfbmFtZTtcbiAgICAgICAgbmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgbmV3VHJhY2UuZHVlX2RhdGUgPSB1dWZsb3dNYW5hZ2VyLmdldER1ZURhdGUocHJldmlvdXNfc3RlcC50aW1lb3V0X2hvdXJzKTtcbiAgICAgICAgbmV3VHJhY2UuYXBwcm92ZXMgPSBbXTtcbiAgICAgICAgbmV3QXBwcm92ZSA9IG5ldyBPYmplY3Q7XG4gICAgICAgIG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcbiAgICAgICAgbmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgICBuZXdBcHByb3ZlLnRyYWNlID0gbmV3VHJhY2UuX2lkO1xuICAgICAgICBuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIG5ld0FwcHJvdmUudXNlciA9IGN1cnJlbnRfdXNlcjtcbiAgICAgICAgaGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIsIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBuZXdBcHByb3ZlLnVzZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xuICAgICAgICBuZXdBcHByb3ZlLmhhbmRsZXIgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICAgIHNwYWNlX3VzZXIgPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlcihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICAgICAgb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcik7XG4gICAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBvcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gb3JnX2luZm9bXCJvcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG9yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdO1xuICAgICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICAgIG5ld0FwcHJvdmUuZHVlX2RhdGUgPSBuZXdUcmFjZS5kdWVfZGF0ZTtcbiAgICAgICAgbmV3QXBwcm92ZS5pc19yZWFkID0gZmFsc2U7XG4gICAgICAgIG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgbmV3QXBwcm92ZS52YWx1ZXMgPSBuZXcgT2JqZWN0O1xuICAgICAgICB1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBuZXdBcHByb3ZlKTtcbiAgICAgICAgbmV3VHJhY2UuYXBwcm92ZXMucHVzaChuZXdBcHByb3ZlKTtcbiAgICAgICAgc2V0T2JqLmluYm94X3VzZXJzID0gW2N1cnJlbnRfdXNlcl07XG4gICAgICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyO1xuICAgICAgICB0cmFjZXMucHVzaChuZXdUcmFjZSk7XG4gICAgICAgIHNldE9iai50cmFjZXMgPSB0cmFjZXM7XG4gICAgICAgIHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiO1xuICAgICAgICBzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gcHJldmlvdXNfdHJhY2VfbmFtZTtcbiAgICAgICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9hdXRvX3N1Ym1pdCA9IHV1Zmxvd01hbmFnZXIuZ2V0Q3VycmVudFN0ZXBBdXRvU3VibWl0KGZsb3cudGltZW91dF9hdXRvX3N1Ym1pdCwgcHJldmlvdXNfc3RlcC5saW5lcyk7XG4gICAgICAgIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgICAgXy5lYWNoKG9sZF9pbmJveF91c2VycywgZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICAgICAgaWYgKHVzZXJfaWQgIT09IGN1cnJlbnRfdXNlcikge1xuICAgICAgICAgICAgICByZXR1cm4gcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlucyA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zdGFuY2VfaWQpO1xuICAgICAgICAgIHJldHVybiBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JldHJpZXZlJywgY3VycmVudF91c2VyLCBpbnMuaW5ib3hfdXNlcnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJldHJpZXZlX3R5cGUgPT09ICdjYycpIHtcbiAgICAgICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIGluc3RhbmNlX2lkID0gaW5zdGFuY2UuX2lkO1xuICAgICAgICB0aGVfdHJhY2UgPSBfLmZpbmQodHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgcmV0dXJuIHQuX2lkID09PSByZXRyaWV2ZV9hcHByb3ZlLnRyYWNlO1xuICAgICAgICB9KTtcbiAgICAgICAgXy5lYWNoKHRoZV90cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgIGlmIChhLl9pZCA9PT0gcmV0cmlldmVfYXBwcm92ZS5faWQpIHtcbiAgICAgICAgICAgIGEuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGEuZmluaXNoX2RhdGUgPSB2b2lkIDA7XG4gICAgICAgICAgICBhLmp1ZGdlID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIGEuY29zdF90aW1lID0gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNjX3VzZXJzID0gaW5zdGFuY2UuY2NfdXNlcnM7XG4gICAgICAgIGNjX3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICAgICAgc2V0T2JqLm1vZGlmaWVkID0gbm93O1xuICAgICAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgICAgIHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiO1xuICAgICAgICBzZXRPYmouaXNfYXJjaGl2ZWQgPSBmYWxzZTtcbiAgICAgICAgc2V0T2JqLmNjX3VzZXJzID0gY2NfdXNlcnM7XG4gICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMnXSA9IHRoZV90cmFjZS5hcHByb3ZlcztcbiAgICAgICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VfaWQsXG4gICAgICAgICAgJ3RyYWNlcy5faWQnOiByZXRyaWV2ZV9hcHByb3ZlLnRyYWNlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiBzZXRPYmpcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgcHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX2N1cnJlbnRfdXNlcihjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci50cmlnZ2VyV2ViaG9vayhpbnMuZmxvdywgaW5zLCB7fSwgJ3JldHJpZXZlJywgY3VycmVudF91c2VyLCBbY3VycmVudF91c2VyXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHt9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJKc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L2ZvcndhcmQnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuXHR0cnkge1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XHJcblx0XHR2YXIgY3VycmVudF91c2VyX2lkID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xyXG5cclxuXHRcdHZhciBoYXNoRGF0YSA9IHJlcS5ib2R5O1xyXG5cdFx0dmFyIGluc3RhbmNlX2lkID0gaGFzaERhdGEuaW5zdGFuY2VfaWQ7XHJcblx0XHR2YXIgc3BhY2VfaWQgPSBoYXNoRGF0YS5zcGFjZV9pZDtcclxuXHRcdHZhciBmbG93X2lkID0gaGFzaERhdGEuZmxvd19pZDtcclxuXHRcdHZhciBoYXNTYXZlSW5zdGFuY2VUb0F0dGFjaG1lbnQgPSBoYXNoRGF0YS5oYXNTYXZlSW5zdGFuY2VUb0F0dGFjaG1lbnQ7XHJcblx0XHR2YXIgZGVzY3JpcHRpb24gPSBoYXNoRGF0YS5kZXNjcmlwdGlvbjtcclxuXHRcdHZhciBpc0ZvcndhcmRBdHRhY2htZW50cyA9IGhhc2hEYXRhLmlzRm9yd2FyZEF0dGFjaG1lbnRzO1xyXG5cdFx0dmFyIHNlbGVjdGVkVXNlcnMgPSBoYXNoRGF0YS5zZWxlY3RlZFVzZXJzO1xyXG5cdFx0dmFyIGFjdGlvbl90eXBlID0gaGFzaERhdGEuYWN0aW9uX3R5cGU7XHJcblx0XHR2YXIgcmVsYXRlZCA9IGhhc2hEYXRhLnJlbGF0ZWQ7XHJcblx0XHR2YXIgZnJvbV9hcHByb3ZlX2lkID0gaGFzaERhdGEuZnJvbV9hcHByb3ZlX2lkO1xyXG5cclxuXHRcdGNoZWNrKGluc3RhbmNlX2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soc3BhY2VfaWQsIFN0cmluZyk7XHJcblx0XHRjaGVjayhmbG93X2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soaGFzU2F2ZUluc3RhbmNlVG9BdHRhY2htZW50LCBCb29sZWFuKTtcclxuXHRcdGNoZWNrKGRlc2NyaXB0aW9uLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2soaXNGb3J3YXJkQXR0YWNobWVudHMsIEJvb2xlYW4pO1xyXG5cdFx0Y2hlY2soc2VsZWN0ZWRVc2VycywgQXJyYXkpO1xyXG5cdFx0Y2hlY2soYWN0aW9uX3R5cGUsIE1hdGNoLk9uZU9mKCdmb3J3YXJkJywgJ2Rpc3RyaWJ1dGUnKSk7XHJcblxyXG5cdFx0aWYgKGFjdGlvbl90eXBlID09IFwiZGlzdHJpYnV0ZVwiKVxyXG5cdFx0XHRjaGVjayhmcm9tX2FwcHJvdmVfaWQsIFN0cmluZyk7XHJcblxyXG5cdFx0dmFyIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKTtcclxuXHRcdHZhciBvbGRfc3BhY2VfaWQgPSBpbnMuc3BhY2U7XHJcblxyXG5cdFx0dmFyIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQpO1xyXG5cclxuXHRcdHZhciBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlX2lkKTtcclxuXHJcblx0XHRpZiAoIWlucyB8fCAhZmxvdyB8fCAhc3BhY2UpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcigncGFyYW1zIGVycm9yIScsICdyZWNvcmQgbm90IGV4aXN0cyEnKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZm9yd2FyZF91c2VycyA9IG5ldyBBcnJheTtcclxuXHRcdGlmIChfLmlzRW1wdHkoc2VsZWN0ZWRVc2VycykpIHtcclxuXHRcdFx0Zm9yd2FyZF91c2VycyA9IFtjdXJyZW50X3VzZXJfaWRdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yd2FyZF91c2VycyA9IHNlbGVjdGVkVXNlcnM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g5qCh6aqM5YiG5Y+R5a+56LGh5piv5ZCm5pyJ5YiG5Y+R5rWB56iL55qE5o+Q5Lqk5p2D6ZmQXHJcblx0XHR2YXIgbm9fcGVybWlzc2lvbl91c2VyX2lkcyA9IG5ldyBBcnJheSgpO1xyXG5cdFx0Xy5lYWNoKGZvcndhcmRfdXNlcnMsIGZ1bmN0aW9uICh1aWQpIHtcclxuXHRcdFx0dmFyIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGZsb3dfaWQsIHVpZCk7XHJcblx0XHRcdGlmICghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZGRcIikpIHtcclxuXHRcdFx0XHQvLyB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuivpeeUs+ivt+S6uuayoeacieaPkOS6pOatpOeUs+ivt+WNleeahOadg+mZkOOAglwiKVxyXG5cdFx0XHRcdG5vX3Blcm1pc3Npb25fdXNlcl9pZHMucHVzaCh1aWQpO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0aWYgKCFfLmlzRW1wdHkobm9fcGVybWlzc2lvbl91c2VyX2lkcykpIHtcclxuXHRcdFx0dmFyIG5vX3Blcm1pc3Npb25fdXNlcnNfbmFtZSA9IG5ldyBBcnJheSgpO1xyXG5cdFx0XHRkYi51c2Vycy5maW5kKHtcclxuXHRcdFx0XHRfaWQ6IHtcclxuXHRcdFx0XHRcdCRpbjogbm9fcGVybWlzc2lvbl91c2VyX2lkc1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkuZm9yRWFjaChmdW5jdGlvbiAodSkge1xyXG5cdFx0XHRcdG5vX3Blcm1pc3Npb25fdXNlcnNfbmFtZS5wdXNoKHUubmFtZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdub19wZXJtaXNzaW9uJywgXCLor6Xmj5DkuqTkurrmsqHmnInmj5DkuqTmraTnlLPor7fljZXnmoTmnYPpmZDjgIJcIiwgbm9fcGVybWlzc2lvbl91c2Vyc19uYW1lLmpvaW4oJywnKSlcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbmV3X2luc19pZHMgPSBuZXcgQXJyYXk7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRfdHJhY2UgPSBudWxsO1xyXG5cdFx0aWYgKGFjdGlvbl90eXBlID09IFwiZGlzdHJpYnV0ZVwiKSB7XHJcblx0XHRcdF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRcdGlmICghY3VycmVudF90cmFjZSkge1xyXG5cdFx0XHRcdFx0Xy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uIChhKSB7XHJcblx0XHRcdFx0XHRcdGlmICghY3VycmVudF90cmFjZSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChhLl9pZCA9PSBmcm9tX2FwcHJvdmVfaWQpXHJcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50X3RyYWNlID0gdDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjdXJyZW50X3RyYWNlID0gXy5sYXN0KGlucy50cmFjZXMpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGN1cnJlbnRfdHJhY2VfaWQgPSBjdXJyZW50X3RyYWNlLl9pZDtcclxuXHRcdHZhciBmb3J3YXJkX2FwcHJvdmVzID0gW107XHJcblx0XHR2YXIgZnJvbV91c2VyX25hbWUgPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcl9pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRuYW1lOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pLm5hbWVcclxuXHRcdHZhciBzZXRfb2JqID0gbmV3IE9iamVjdDtcclxuXHJcblx0XHQvLyDorqHnrpd2YWx1ZXNcclxuXHRcdHZhciBvbGRfdmFsdWVzID0gaW5zLnZhbHVlcyxcclxuXHRcdFx0bmV3X3ZhbHVlcyA9IHt9O1xyXG5cdFx0dmFyIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZsb3cuZm9ybSk7XHJcblx0XHR2YXIgZmllbGRzID0gZm9ybS5jdXJyZW50LmZpZWxkcyB8fCBbXTtcclxuXHJcblx0XHR2YXIgb2xkX2Zvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGlucy5mb3JtKTtcclxuXHRcdHZhciBvbGRfZm9ybV92ZXJzaW9uID0gaW5zLmZvcm1fdmVyc2lvbixcclxuXHRcdFx0b2xkX2ZpZWxkcyA9IFtdLFxyXG5cdFx0XHRjb21tb25fZmllbGRzID0gW107XHJcblxyXG5cdFx0dmFyIHNlbGVjdF90b19pbnB1dF9maWVsZHMgPSBbXTtcclxuXHJcblx0XHRpZiAob2xkX2Zvcm0uY3VycmVudC5faWQgPT0gb2xkX2Zvcm1fdmVyc2lvbikge1xyXG5cdFx0XHRvbGRfZmllbGRzID0gb2xkX2Zvcm0uY3VycmVudC5maWVsZHM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAob2xkX2Zvcm0uaGlzdG9yeXMpIHtcclxuXHRcdFx0XHRvbGRfZm9ybS5oaXN0b3J5cy5mb3JFYWNoKGZ1bmN0aW9uIChoKSB7XHJcblx0XHRcdFx0XHRpZiAoaC5faWQgPT0gb2xkX2Zvcm1fdmVyc2lvbilcclxuXHRcdFx0XHRcdFx0b2xkX2ZpZWxkcyA9IGguZmllbGRzO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuXHRcdFx0dmFyIGV4aXN0c19maWVsZCA9IF8uZmluZChvbGRfZmllbGRzLCBmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdHJldHVybiBmLnR5cGUgPT0gZmllbGQudHlwZSAmJiBmLmNvZGUgPT0gZmllbGQuY29kZTtcclxuXHRcdFx0fSlcclxuXHRcdFx0aWYgKGV4aXN0c19maWVsZClcclxuXHRcdFx0XHRjb21tb25fZmllbGRzLnB1c2goZmllbGQpO1xyXG5cdFx0XHR2YXIgc2VsZWN0X2lucHV0X2ZpZWxkID0gXy5maW5kKG9sZF9maWVsZHMsIGZ1bmN0aW9uIChmKSB7XHJcblx0XHRcdFx0cmV0dXJuIGYudHlwZSA9PSAnc2VsZWN0JyAmJiBmaWVsZC50eXBlID09ICdpbnB1dCcgJiYgZi5jb2RlID09IGZpZWxkLmNvZGU7XHJcblx0XHRcdH0pXHJcblx0XHRcdGlmIChzZWxlY3RfaW5wdXRfZmllbGQpXHJcblx0XHRcdFx0c2VsZWN0X3RvX2lucHV0X2ZpZWxkcy5wdXNoKHNlbGVjdF9pbnB1dF9maWVsZCk7XHJcblx0XHR9KVxyXG5cclxuXHRcdHNlbGVjdF90b19pbnB1dF9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuXHRcdFx0aWYgKG9sZF92YWx1ZXNbZmllbGQuY29kZV0pIHtcclxuXHRcdFx0XHRuZXdfdmFsdWVzW2ZpZWxkLmNvZGVdID0gb2xkX3ZhbHVlc1tmaWVsZC5jb2RlXTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHRjb21tb25fZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XHJcblx0XHRcdGlmIChmaWVsZC50eXBlID09ICdzZWN0aW9uJykge1xyXG5cdFx0XHRcdGlmIChmaWVsZC5maWVsZHMpIHtcclxuXHRcdFx0XHRcdGZpZWxkLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XHJcblx0XHRcdFx0XHRcdC8vIOi3qOW3peS9nOWMuui9rOWPkeS4jeWkjeWItumAieS6uumAiee7hFxyXG5cdFx0XHRcdFx0XHRpZiAoWydncm91cCcsICd1c2VyJ10uaW5jbHVkZXMoZi50eXBlKSAmJiBvbGRfc3BhY2VfaWQgIT0gc3BhY2VfaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0dmFyIGtleSA9IGYuY29kZTtcclxuXHRcdFx0XHRcdFx0dmFyIG9sZF92ID0gb2xkX3ZhbHVlc1trZXldO1xyXG5cdFx0XHRcdFx0XHRpZiAob2xkX3YpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyDmoKHpqowg5Y2V6YCJ77yM5aSa6YCJ77yM5LiL5ouJ5qGGIOWtl+auteWAvOaYr+WQpuWcqOaWsOihqOWNleWvueW6lOWtl+auteeahOWPr+mAieWAvOiMg+WbtOWGhVxyXG5cdFx0XHRcdFx0XHRcdGlmIChmLnR5cGUgPT0gJ3NlbGVjdCcgfHwgZi50eXBlID09ICdyYWRpbycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZi5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pbmNsdWRlcyhvbGRfdikpXHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChmLnR5cGUgPT0gJ211bHRpU2VsZWN0Jykge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmLm9wdGlvbnMuc3BsaXQoJ1xcbicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9sZF9tdWx0aVNlbGVjdGVkID0gb2xkX3Yuc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBuZXdfbXVsdGlTZWxlY3RlZCA9IF8uaW50ZXJzZWN0aW9uKG9wdGlvbnMsIG9sZF9tdWx0aVNlbGVjdGVkKTtcclxuXHRcdFx0XHRcdFx0XHRcdG9sZF92ID0gbmV3X211bHRpU2VsZWN0ZWQuam9pbignLCcpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0bmV3X3ZhbHVlc1trZXldID0gb2xkX3Y7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKGZpZWxkLnR5cGUgPT0gJ3RhYmxlJykge1xyXG5cdFx0XHRcdGlmICghXy5pc0VtcHR5KG9sZF92YWx1ZXNbZmllbGQuY29kZV0pKSB7XHJcblx0XHRcdFx0XHRuZXdfdmFsdWVzW2ZpZWxkLmNvZGVdID0gbmV3IEFycmF5O1xyXG5cdFx0XHRcdFx0b2xkX3ZhbHVlc1tmaWVsZC5jb2RlXS5mb3JFYWNoKGZ1bmN0aW9uIChvbGRfdGFibGVfcm93X3ZhbHVlcykge1xyXG5cdFx0XHRcdFx0XHR2YXIgbmV3X3RhYmxlX3Jvd192YWx1ZXMgPSB7fTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICghXy5pc0VtcHR5KGZpZWxkLmZpZWxkcykpIHtcclxuXHRcdFx0XHRcdFx0XHRmaWVsZC5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8g6Leo5bel5L2c5Yy66L2s5Y+R5LiN5aSN5Yi26YCJ5Lq66YCJ57uEXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoWydncm91cCcsICd1c2VyJ10uaW5jbHVkZXMoZi50eXBlKSAmJiBvbGRfc3BhY2VfaWQgIT0gc3BhY2VfaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGtleSA9IGYuY29kZTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBvbGRfdiA9IG9sZF90YWJsZV9yb3dfdmFsdWVzW2tleV07XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAob2xkX3YpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8g5qCh6aqMIOWNlemAie+8jOWkmumAie+8jOS4i+aLieahhiDlrZfmrrXlgLzmmK/lkKblnKjmlrDooajljZXlr7nlupTlrZfmrrXnmoTlj6/pgInlgLzojIPlm7TlhoVcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGYudHlwZSA9PSAnc2VsZWN0JyB8fCBmLnR5cGUgPT0gJ3JhZGlvJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZi5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaW5jbHVkZXMob2xkX3YpKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZi50eXBlID09ICdtdWx0aVNlbGVjdCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb3B0aW9ucyA9IGYub3B0aW9ucy5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIG9sZF9tdWx0aVNlbGVjdGVkID0gb2xkX3Yuc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgbmV3X211bHRpU2VsZWN0ZWQgPSBfLmludGVyc2VjdGlvbihvcHRpb25zLCBvbGRfbXVsdGlTZWxlY3RlZCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b2xkX3YgPSBuZXdfbXVsdGlTZWxlY3RlZC5qb2luKCcsJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdG5ld190YWJsZV9yb3dfdmFsdWVzW2tleV0gPSBvbGRfdjtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAob2xkX3RhYmxlX3Jvd192YWx1ZXMuX2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3X3RhYmxlX3Jvd192YWx1ZXMuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCFfLmlzRW1wdHkobmV3X3RhYmxlX3Jvd192YWx1ZXMpKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3X3ZhbHVlc1tmaWVsZC5jb2RlXS5wdXNoKG5ld190YWJsZV9yb3dfdmFsdWVzKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8g6Leo5bel5L2c5Yy66L2s5Y+R5LiN5aSN5Yi26YCJ5Lq66YCJ57uEXHJcblx0XHRcdFx0aWYgKFsnZ3JvdXAnLCAndXNlciddLmluY2x1ZGVzKGZpZWxkLnR5cGUpICYmIG9sZF9zcGFjZV9pZCAhPSBzcGFjZV9pZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIga2V5ID0gZmllbGQuY29kZTtcclxuXHRcdFx0XHR2YXIgb2xkX3YgPSBvbGRfdmFsdWVzW2tleV07XHJcblx0XHRcdFx0aWYgKG9sZF92KSB7XHJcblx0XHRcdFx0XHQvLyDmoKHpqowg5Y2V6YCJ77yM5aSa6YCJ77yM5LiL5ouJ5qGGIOWtl+auteWAvOaYr+WQpuWcqOaWsOihqOWNleWvueW6lOWtl+auteeahOWPr+mAieWAvOiMg+WbtOWGhVxyXG5cdFx0XHRcdFx0aWYgKGZpZWxkLnR5cGUgPT0gJ3NlbGVjdCcgfHwgZmllbGQudHlwZSA9PSAncmFkaW8nKSB7XHJcblx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gZmllbGQub3B0aW9ucy5zcGxpdCgnXFxuJyk7XHJcblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pbmNsdWRlcyhvbGRfdikpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChmaWVsZC50eXBlID09ICdtdWx0aVNlbGVjdCcpIHtcclxuXHRcdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBmaWVsZC5vcHRpb25zLnNwbGl0KCdcXG4nKTtcclxuXHRcdFx0XHRcdFx0dmFyIG9sZF9tdWx0aVNlbGVjdGVkID0gb2xkX3Yuc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdFx0dmFyIG5ld19tdWx0aVNlbGVjdGVkID0gXy5pbnRlcnNlY3Rpb24ob3B0aW9ucywgb2xkX211bHRpU2VsZWN0ZWQpO1xyXG5cdFx0XHRcdFx0XHRvbGRfdiA9IG5ld19tdWx0aVNlbGVjdGVkLmpvaW4oJywnKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRuZXdfdmFsdWVzW2tleV0gPSBvbGRfdjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9KVxyXG5cclxuXHRcdC8v5aaC5p6c5piv5YiG5Y+R77yM5YiZdmFsdWXkuK3nmoRyZWNvcmRfbmVlZOOAgUZPTkRTSUTkuI3pnIDopoHliIblj5HliLDmlrDnlLPor7fljZXkuK1cclxuXHRcdGlmIChhY3Rpb25fdHlwZSA9PT0gJ2Rpc3RyaWJ1dGUnKSB7XHJcblx0XHRcdGRlbGV0ZSBuZXdfdmFsdWVzLnJlY29yZF9uZWVkO1xyXG5cdFx0XHRkZWxldGUgbmV3X3ZhbHVlcy5GT05EU0lEO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOiuoeeul+eUs+ivt+WNleagh+mimFxyXG5cdFx0dmFyIGluc3RhbmNlX25hbWUgPSBcIlwiO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm0uY3VycmVudC5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dmFyIGlzY3JpcHQgPSBuYW1lX2ZvcnVtbGEucmVwbGFjZSgvXFx7L2csIFwiKG5ld192YWx1ZXNbJ1wiKS5yZXBsYWNlKC9cXH0vZywgXCInXSB8fCAnJylcIik7XHJcblx0XHRcdFx0dmFyIHJldiA9IGV2YWwoaXNjcmlwdCk7XHJcblx0XHRcdFx0aW5zdGFuY2VfbmFtZSA9IHJldiB8fCBmbG93Lm5hbWU7XHJcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignY2FjdWxhdGVfaW5zdGFuY2VfbmFtZScsIFwi6K6h566X55Sz6K+35Y2V5qCH6aKY5Ye66ZSZ6K+35qOA5p+l6KGo5Y2V5qCH6aKY6ISa5pys44CCXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpbnN0YW5jZV9uYW1lID0gZmxvdy5uYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGluc3RhbmNl5Lit6K6w5b2V5b2T5YmN5q2l6aqk5ZCN56ewICMxMzE0XHJcblx0XHR2YXIgc3RhcnRfc3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uIChzdGVwKSB7XHJcblx0XHRcdHJldHVybiBzdGVwLnN0ZXBfdHlwZSA9PSAnc3RhcnQnO1xyXG5cdFx0fSlcclxuXHJcblx0XHQvLyDmlrDlu7rnlLPor7fljZXml7bvvIxpbnN0YW5jZXPorrDlvZXmtYHnqIvlkI3np7DjgIHmtYHnqIvliIbnsbvlkI3np7AgIzEzMTNcclxuXHRcdHZhciBjYXRlZ29yeV9uYW1lID0gXCJcIjtcclxuXHRcdGlmIChmb3JtLmNhdGVnb3J5KSB7XHJcblx0XHRcdHZhciBjYXRlZ29yeSA9IHV1Zmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcnkoZm9ybS5jYXRlZ29yeSk7XHJcblx0XHRcdGlmIChjYXRlZ29yeSlcclxuXHRcdFx0XHRjYXRlZ29yeV9uYW1lID0gY2F0ZWdvcnkubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRfLmVhY2goZm9yd2FyZF91c2VycywgZnVuY3Rpb24gKHVzZXJfaWQpIHtcclxuXHJcblx0XHRcdHZhciB1c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHVzZXJfaWQpO1xyXG5cclxuXHRcdFx0dmFyIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0dXNlcjogdXNlcl9pZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRvcmdhbml6YXRpb246IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR2YXIgc3BhY2VfdXNlcl9vcmdfaW5mbyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7XHJcblx0XHRcdFx0X2lkOiBzcGFjZV91c2VyLm9yZ2FuaXphdGlvblxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dmFyIG5vdyA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdHZhciBpbnNfb2JqID0ge307XHJcblxyXG5cdFx0XHR2YXIgYWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCB1c2VyX2lkKTtcclxuXHRcdFx0dmFyIGhhbmRsZXJfaWQgPSB1c2VyX2lkO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9pbmZvID0gdXNlcl9pbmZvO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9zcGFjZV91c2VyID0gc3BhY2VfdXNlcjtcclxuXHRcdFx0dmFyIGhhbmRsZXJfb3JnX2luZm8gPSBzcGFjZV91c2VyX29yZ19pbmZvO1xyXG5cdFx0XHRpZiAoYWdlbnQpIHtcclxuXHRcdFx0XHRoYW5kbGVyX2lkID0gYWdlbnQ7XHJcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShhZ2VudCk7XHJcblx0XHRcdFx0aGFuZGxlcl9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGFnZW50KTtcclxuXHRcdFx0XHRoYW5kbGVyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKGhhbmRsZXJfc3BhY2VfdXNlcik7XHJcblx0XHRcdH1cclxuXHRcdFx0aW5zX29iai5faWQgPSBkYi5pbnN0YW5jZXMuX21ha2VOZXdJRCgpO1xyXG5cdFx0XHRpbnNfb2JqLnNwYWNlID0gc3BhY2VfaWQ7XHJcblx0XHRcdGluc19vYmouZmxvdyA9IGZsb3dfaWQ7XHJcblx0XHRcdGluc19vYmouZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50Ll9pZDtcclxuXHRcdFx0aW5zX29iai5mb3JtID0gZmxvdy5mb3JtO1xyXG5cdFx0XHRpbnNfb2JqLmZvcm1fdmVyc2lvbiA9IGZsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XHJcblx0XHRcdGluc19vYmoubmFtZSA9IGluc3RhbmNlX25hbWU7XHJcblx0XHRcdGluc19vYmouc3VibWl0dGVyID0gaGFuZGxlcl9pZDtcclxuXHRcdFx0aW5zX29iai5zdWJtaXR0ZXJfbmFtZSA9IGhhbmRsZXJfaW5mby5uYW1lO1xyXG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudCA9IHVzZXJfaWQ7XHJcblx0XHRcdGluc19vYmouYXBwbGljYW50X25hbWUgPSB1c2VyX2luZm8ubmFtZTtcclxuXHRcdFx0aW5zX29iai5hcHBsaWNhbnRfb3JnYW5pemF0aW9uID0gc3BhY2VfdXNlci5vcmdhbml6YXRpb247XHJcblx0XHRcdGluc19vYmouYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lID0gc3BhY2VfdXNlcl9vcmdfaW5mby5uYW1lO1xyXG5cdFx0XHRpbnNfb2JqLmFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBzcGFjZV91c2VyX29yZ19pbmZvLmZ1bGxuYW1lO1xyXG5cdFx0XHRpbnNfb2JqLnN0YXRlID0gXCJkcmFmdFwiO1xyXG5cdFx0XHRpbnNfb2JqLmNvZGUgPSBcIlwiO1xyXG5cdFx0XHRpbnNfb2JqLmlzX2FyY2hpdmVkID0gZmFsc2U7XHJcblx0XHRcdGluc19vYmouaXNfZGVsZXRlZCA9IGZhbHNlO1xyXG5cdFx0XHRpbnNfb2JqLmNyZWF0ZWQgPSBub3c7XHJcblx0XHRcdGluc19vYmouY3JlYXRlZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcclxuXHRcdFx0aW5zX29iai5tb2RpZmllZCA9IG5vdztcclxuXHRcdFx0aW5zX29iai5tb2RpZmllZF9ieSA9IGN1cnJlbnRfdXNlcl9pZDtcclxuXHRcdFx0aW5zX29iai5pbmJveF91c2VycyA9IFtoYW5kbGVyX2lkXTtcclxuXHRcdFx0aW5zX29iai52YWx1ZXMgPSBuZXdfdmFsdWVzO1xyXG5cdFx0XHRpZiAoYWN0aW9uX3R5cGUgPT0gJ2Rpc3RyaWJ1dGUnKSB7XHJcblx0XHRcdFx0Ly8g6Kej5Yaz5aSa5qyh5YiG5Y+R55yL5LiN5Yiw5q2j5paH44CB6ZmE5Lu26Zeu6aKYXHJcblx0XHRcdFx0aWYgKGlucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UpIHtcclxuXHRcdFx0XHRcdGluc19vYmouZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlID0gaW5zLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2UgPSBpbnN0YW5jZV9pZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzID0gXy5jbG9uZShpbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgfHwgW107XHJcblx0XHRcdFx0aW5zX29iai5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzLnB1c2goaW5zdGFuY2VfaWQpO1xyXG5cclxuXHRcdFx0XHRpZiAocmVsYXRlZCkge1xyXG5cdFx0XHRcdFx0aW5zX29iai5yZWxhdGVkX2luc3RhbmNlcyA9IFtpbnN0YW5jZV9pZF1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGFjdGlvbl90eXBlID09ICdmb3J3YXJkJykge1xyXG5cdFx0XHRcdGluc19vYmouZm9yd2FyZF9mcm9tX2luc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8g5paw5bu6VHJhY2VcclxuXHRcdFx0dmFyIHRyYWNlX29iaiA9IHt9O1xyXG5cdFx0XHR0cmFjZV9vYmouX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0dHJhY2Vfb2JqLmluc3RhbmNlID0gaW5zX29iai5faWQ7XHJcblx0XHRcdHRyYWNlX29iai5pc19maW5pc2hlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly8g5b2T5YmN5pyA5paw54mIZmxvd+S4reW8gOWni+iKgueCueeahHN0ZXBfaWRcclxuXHRcdFx0dmFyIHN0ZXBfaWQsIHN0ZXBfbmFtZSwgY2FuX2VkaXRfbWFpbl9hdHRhY2gsIGNhbl9lZGl0X25vcm1hbF9hdHRhY2g7XHJcblx0XHRcdGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwKSB7XHJcblx0XHRcdFx0aWYgKHN0ZXAuc3RlcF90eXBlID09IFwic3RhcnRcIikge1xyXG5cdFx0XHRcdFx0c3RlcF9pZCA9IHN0ZXAuX2lkO1xyXG5cdFx0XHRcdFx0c3RlcF9uYW1lID0gc3RlcC5uYW1lO1xyXG5cdFx0XHRcdFx0Y2FuX2VkaXRfbWFpbl9hdHRhY2ggPSBzdGVwLmNhbl9lZGl0X21haW5fYXR0YWNoO1xyXG5cdFx0XHRcdFx0Y2FuX2VkaXRfbm9ybWFsX2F0dGFjaCA9IHN0ZXAuY2FuX2VkaXRfbm9ybWFsX2F0dGFjaDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHRcdHRyYWNlX29iai5zdGVwID0gc3RlcF9pZDtcclxuXHRcdFx0dHJhY2Vfb2JqLnN0YXJ0X2RhdGUgPSBub3c7XHJcblx0XHRcdHRyYWNlX29iai5uYW1lID0gc3RlcF9uYW1lO1xyXG5cclxuXHRcdFx0Ly8g5paw5bu6QXBwcm92ZVxyXG5cdFx0XHR2YXIgYXBwcl9vYmogPSB7fTtcclxuXHRcdFx0YXBwcl9vYmouX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cjtcclxuXHRcdFx0YXBwcl9vYmouaW5zdGFuY2UgPSBpbnNfb2JqLl9pZDtcclxuXHRcdFx0YXBwcl9vYmoudHJhY2UgPSB0cmFjZV9vYmouX2lkO1xyXG5cdFx0XHRhcHByX29iai5pc19maW5pc2hlZCA9IGZhbHNlO1xyXG5cdFx0XHRhcHByX29iai51c2VyID0gdXNlcl9pZDtcclxuXHRcdFx0YXBwcl9vYmoudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWU7XHJcblx0XHRcdGFwcHJfb2JqLmhhbmRsZXIgPSBoYW5kbGVyX2lkO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX25hbWUgPSBoYW5kbGVyX2luZm8ubmFtZTtcclxuXHRcdFx0YXBwcl9vYmouaGFuZGxlcl9vcmdhbml6YXRpb24gPSBoYW5kbGVyX3NwYWNlX3VzZXIub3JnYW5pemF0aW9uO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lID0gaGFuZGxlcl9vcmdfaW5mby5uYW1lO1xyXG5cdFx0XHRhcHByX29iai5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IGhhbmRsZXJfb3JnX2luZm8uZnVsbG5hbWU7XHJcblx0XHRcdGFwcHJfb2JqLnR5cGUgPSBcImRyYWZ0XCI7XHJcblx0XHRcdGFwcHJfb2JqLnN0YXJ0X2RhdGUgPSBub3c7XHJcblx0XHRcdGFwcHJfb2JqLnJlYWRfZGF0ZSA9IG5vdztcclxuXHRcdFx0YXBwcl9vYmouaXNfcmVhZCA9IGZhbHNlO1xyXG5cdFx0XHRhcHByX29iai5pc19lcnJvciA9IGZhbHNlO1xyXG5cclxuXHRcdFx0YXBwcl9vYmoudmFsdWVzID0gbmV3X3ZhbHVlcztcclxuXHJcblx0XHRcdGlmIChhZ2VudCkge1xyXG5cdFx0XHRcdGFwcHJfb2JqLmFnZW50ID0gYWdlbnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRyYWNlX29iai5hcHByb3ZlcyA9IFthcHByX29ial07XHJcblx0XHRcdGluc19vYmoudHJhY2VzID0gW3RyYWNlX29ial07XHJcblxyXG5cdFx0XHRpZiAoZmxvdy5hdXRvX3JlbWluZCA9PSB0cnVlKVxyXG5cdFx0XHRcdGluc19vYmouYXV0b19yZW1pbmQgPSB0cnVlO1xyXG5cclxuXHRcdFx0aW5zX29iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHN0YXJ0X3N0ZXAubmFtZTtcclxuXHJcblx0XHRcdGluc19vYmouZmxvd19uYW1lID0gZmxvdy5uYW1lO1xyXG5cdFx0XHRpZiAoY2F0ZWdvcnlfbmFtZSkge1xyXG5cdFx0XHRcdGluc19vYmouY2F0ZWdvcnlfbmFtZSA9IGNhdGVnb3J5Lm5hbWU7XHJcblx0XHRcdFx0aW5zX29iai5jYXRlZ29yeSA9IGNhdGVnb3J5Ll9pZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bmV3X2luc19pZCA9IGRiLmluc3RhbmNlcy5pbnNlcnQoaW5zX29iaik7XHJcblxyXG5cdFx0XHQvLyDlpI3liLbpmYTku7ZcclxuXHRcdFx0dmFyIGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzO1xyXG5cclxuXHRcdFx0Ly/lsIbljp/ooajljZXlhoXlrrnlrZjlgqjkuLrnrKzkuIDkuKrpmYTku7ZcclxuXHRcdFx0aWYgKGhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCkge1xyXG5cdFx0XHRcdC8vIHRyeSB7XHJcblxyXG5cdFx0XHRcdGluc3RhbmNlSHRtbCA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwodXNlcl9pbmZvLCBzcGFjZV9pZCwgaW5zLCB7XHJcblx0XHRcdFx0XHRhYnNvbHV0ZTogdHJ1ZVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0dmFyIGluc3RhbmNlRmlsZSA9IG5ldyBGUy5GaWxlKCk7XHJcblx0XHRcdFx0aW5zdGFuY2VGaWxlLmF0dGFjaERhdGEoQnVmZmVyLmZyb20oaW5zdGFuY2VIdG1sLCBcInV0Zi04XCIpLCB7XHJcblx0XHRcdFx0XHR0eXBlOiBcInRleHQvaHRtbFwiXHJcblx0XHRcdFx0fSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcihlcnJvci5lcnJvciwgZXJyb3IucmVhc29uKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpbnN0YW5jZUZpbGUubmFtZShpbnMubmFtZSArIFwiLmh0bWxcIik7XHJcblx0XHRcdFx0XHRpbnN0YW5jZUZpbGUuc2l6ZShpbnN0YW5jZUh0bWwubGVuZ3RoKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgbWV0YWRhdGEgPSB7XHJcblx0XHRcdFx0XHRcdG93bmVyOiB1c2VyX2lkLFxyXG5cdFx0XHRcdFx0XHRvd25lcl9uYW1lOiB1c2VyX2luZm8ubmFtZSxcclxuXHRcdFx0XHRcdFx0c3BhY2U6IHNwYWNlX2lkLFxyXG5cdFx0XHRcdFx0XHRpbnN0YW5jZTogbmV3X2luc19pZCxcclxuXHRcdFx0XHRcdFx0YXBwcm92ZTogYXBwcl9vYmouX2lkLFxyXG5cdFx0XHRcdFx0XHRjdXJyZW50OiB0cnVlXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0aW5zdGFuY2VGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcblx0XHRcdFx0XHR2YXIgZmlsZU9iaiA9IGNvbGxlY3Rpb24uaW5zZXJ0KGluc3RhbmNlRmlsZSk7XHJcblx0XHRcdFx0XHRmaWxlT2JqLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdCRzZXQ6IHtcclxuXHRcdFx0XHRcdFx0XHQnbWV0YWRhdGEucGFyZW50JzogZmlsZU9iai5faWRcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHQvLyB9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0Ly8gICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0XHRcdFx0Ly8gfVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoaXNGb3J3YXJkQXR0YWNobWVudHMgJiYgYWN0aW9uX3R5cGUgPT0gJ2ZvcndhcmQnKSB7XHJcblx0XHRcdFx0dmFyIGZpbGVzID0gY29sbGVjdGlvbi5maW5kKHtcclxuXHRcdFx0XHRcdCdtZXRhZGF0YS5pbnN0YW5jZSc6IGluc3RhbmNlX2lkLFxyXG5cdFx0XHRcdFx0J21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0ZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xyXG5cdFx0XHRcdFx0Ly8g5Yik5pat5paw55qE5rWB56iL5byA5aeL6IqC54K55piv5ZCm5pyJ57yW6L6R5q2j5paH5ZKM57yW6L6R6ZmE5Lu25p2D6ZmQXHJcblx0XHRcdFx0XHRpZiAoZi5tZXRhZGF0YS5tYWluID09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGNhbl9lZGl0X21haW5fYXR0YWNoICE9IHRydWUgJiYgY2FuX2VkaXRfbm9ybWFsX2F0dGFjaCAhPSB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlmIChjYW5fZWRpdF9ub3JtYWxfYXR0YWNoICE9IHRydWUpXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciBuZXdGaWxlID0gbmV3IEZTLkZpbGUoKTtcclxuXHRcdFx0XHRcdG5ld0ZpbGUuYXR0YWNoRGF0YShmLmNyZWF0ZVJlYWRTdHJlYW0oJ2luc3RhbmNlcycpLCB7XHJcblx0XHRcdFx0XHRcdHR5cGU6IGYub3JpZ2luYWwudHlwZVxyXG5cdFx0XHRcdFx0fSwgZnVuY3Rpb24gKGVycikge1xyXG5cdFx0XHRcdFx0XHRpZiAoZXJyKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcihlcnIuZXJyb3IsIGVyci5yZWFzb24pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdG5ld0ZpbGUubmFtZShmLm5hbWUoKSk7XHJcblx0XHRcdFx0XHRcdG5ld0ZpbGUuc2l6ZShmLnNpemUoKSk7XHJcblx0XHRcdFx0XHRcdHZhciBtZXRhZGF0YSA9IHtcclxuXHRcdFx0XHRcdFx0XHRvd25lcjogdXNlcl9pZCxcclxuXHRcdFx0XHRcdFx0XHRvd25lcl9uYW1lOiB1c2VyX2luZm8ubmFtZSxcclxuXHRcdFx0XHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0XHRcdFx0aW5zdGFuY2U6IG5ld19pbnNfaWQsXHJcblx0XHRcdFx0XHRcdFx0YXBwcm92ZTogYXBwcl9vYmouX2lkLFxyXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnQ6IHRydWVcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0aWYgKGYubWV0YWRhdGEubWFpbiA9PSB0cnVlICYmIGNhbl9lZGl0X21haW5fYXR0YWNoID09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5tYWluID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRuZXdGaWxlLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcblx0XHRcdFx0XHRcdHZhciBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XHJcblx0XHRcdFx0XHRcdGZpbGVPYmoudXBkYXRlKHtcclxuXHRcdFx0XHRcdFx0XHQkc2V0OiB7XHJcblx0XHRcdFx0XHRcdFx0XHQnbWV0YWRhdGEucGFyZW50JzogZmlsZU9iai5faWRcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyDnu5nlvZPliY3nmoTnlLPor7fljZXlop7liqDovazlj5HorrDlvZVcclxuXHRcdFx0dmFyIGFwcHIgPSB7XHJcblx0XHRcdFx0J19pZCc6IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHIsXHJcblx0XHRcdFx0J2luc3RhbmNlJzogaW5zdGFuY2VfaWQsXHJcblx0XHRcdFx0J3RyYWNlJzogY3VycmVudF90cmFjZV9pZCxcclxuXHRcdFx0XHQnaXNfZmluaXNoZWQnOiB0cnVlLFxyXG5cdFx0XHRcdCd1c2VyJzogdXNlcl9pZCxcclxuXHRcdFx0XHQndXNlcl9uYW1lJzogdXNlcl9pbmZvLm5hbWUsXHJcblx0XHRcdFx0J2hhbmRsZXInOiB1c2VyX2lkLFxyXG5cdFx0XHRcdCdoYW5kbGVyX25hbWUnOiB1c2VyX2luZm8ubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb24nOiBzcGFjZV91c2VyLm9yZ2FuaXphdGlvbixcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSc6IHNwYWNlX3VzZXJfb3JnX2luZm8ubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUnOiBzcGFjZV91c2VyX29yZ19pbmZvLmZ1bGxuYW1lLFxyXG5cdFx0XHRcdCd0eXBlJzogYWN0aW9uX3R5cGUsXHJcblx0XHRcdFx0J3N0YXJ0X2RhdGUnOiBuZXcgRGF0ZSgpLFxyXG5cdFx0XHRcdCdmaW5pc2hfZGF0ZSc6IG5ldyBEYXRlKCksXHJcblx0XHRcdFx0J2lzX3JlYWQnOiBmYWxzZSxcclxuXHRcdFx0XHQnanVkZ2UnOiAnc3VibWl0dGVkJyxcclxuXHRcdFx0XHQnZnJvbV91c2VyJzogY3VycmVudF91c2VyX2lkLFxyXG5cdFx0XHRcdCdmcm9tX3VzZXJfbmFtZSc6IGZyb21fdXNlcl9uYW1lLFxyXG5cdFx0XHRcdCdmb3J3YXJkX3NwYWNlJzogc3BhY2VfaWQsXHJcblx0XHRcdFx0J2ZvcndhcmRfaW5zdGFuY2UnOiBuZXdfaW5zX2lkLFxyXG5cdFx0XHRcdCdkZXNjcmlwdGlvbic6IGRlc2NyaXB0aW9uLFxyXG5cdFx0XHRcdCdmcm9tX2FwcHJvdmVfaWQnOiBmcm9tX2FwcHJvdmVfaWRcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGZvcndhcmRfYXBwcm92ZXMucHVzaChhcHByKTtcclxuXHJcblx0XHRcdG5ld19pbnNfaWRzLnB1c2gobmV3X2luc19pZCk7XHJcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1c2VyX2lkKTtcclxuXHRcdH0pXHJcblxyXG5cdFx0c2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyX2lkO1xyXG5cdFx0dmFyIHIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnN0YW5jZV9pZCxcclxuXHRcdFx0XCJ0cmFjZXMuX2lkXCI6IGN1cnJlbnRfdHJhY2VfaWRcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0X29iaixcclxuXHRcdFx0JGFkZFRvU2V0OiB7XHJcblx0XHRcdFx0J3RyYWNlcy4kLmFwcHJvdmVzJzoge1xyXG5cdFx0XHRcdFx0JGVhY2g6IGZvcndhcmRfYXBwcm92ZXNcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmIChyKSB7XHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYSwgaWR4KSB7XHJcblx0XHRcdFx0aWYgKGEuX2lkID09IGZyb21fYXBwcm92ZV9pZCkge1xyXG5cdFx0XHRcdFx0dmFyIHVwZGF0ZV9yZWFkID0ge307XHJcblx0XHRcdFx0XHR1cGRhdGVfcmVhZFtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcclxuXHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlX2lkLFxyXG5cdFx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogY3VycmVudF90cmFjZV9pZFxyXG5cdFx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0XHQkc2V0OiB1cGRhdGVfcmVhZFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YTogeyBuZXdfaW5zX2lkczogbmV3X2luc19pZHMgfVxyXG5cdFx0fSlcclxuXHR9IGNhdGNoIChlKSB7XHJcblx0XHRjb25zb2xlLmVycm9yKGUuc3RhY2spXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdGVycm9yczogW2VdXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fVxyXG5cclxufSkiLCJKc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvaW5zdGFuY2UvOmluc3RhbmNlSWQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEsIHJlcylcclxuXHRcdGN1cnJlbnRfdXNlcl9pZCA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cdFx0cmVxX2FzeW5jID0gXy5oYXMocmVxLnF1ZXJ5LCAnYXN5bmMnKTtcclxuXHRcdGluc0lkID0gcmVxLnBhcmFtcy5pbnN0YW5jZUlkXHJcblxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHsgZmllbGRzOiB7IHNwYWNlOiAxLCBmbG93OiAxLCBzdGF0ZTogMSwgaW5ib3hfdXNlcnM6IDEsIGNjX3VzZXJzOiAxLCBvdXRib3hfdXNlcnM6IDEsIHN1Ym1pdHRlcjogMSwgYXBwbGljYW50OiAxIH0gfSlcclxuXHJcblx0XHRpZiBub3QgaW5zXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlSWQgaXMgd3Jvbmcgb3IgaW5zdGFuY2Ugbm90IGV4aXN0cy4nKVxyXG5cclxuXHRcdHNwYWNlSWQgPSBpbnMuc3BhY2VcclxuXHRcdGZsb3dJZCA9IGlucy5mbG93XHJcblxyXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZUlkLCB1c2VyOiBjdXJyZW50X3VzZXJfaWQgfSkuY291bnQoKSBpcyAwXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ3VzZXIgaXMgbm90IGJlbG9uZyB0byB0aGlzIHNwYWNlLicpXHJcblxyXG5cdFx0Ym94ID0gJydcclxuXHJcblx0XHRpZiAoaW5zLmluYm94X3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWQpIG9yIChpbnMuY2NfdXNlcnM/LmluY2x1ZGVzIGN1cnJlbnRfdXNlcl9pZClcclxuXHRcdFx0Ym94ID0gJ2luYm94J1xyXG5cdFx0ZWxzZSBpZiBpbnMub3V0Ym94X3VzZXJzPy5pbmNsdWRlcyBjdXJyZW50X3VzZXJfaWRcclxuXHRcdFx0Ym94ID0gJ291dGJveCdcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdkcmFmdCcgYW5kIGlucy5zdWJtaXR0ZXIgaXMgY3VycmVudF91c2VyX2lkXHJcblx0XHRcdGJveCA9ICdkcmFmdCdcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdwZW5kaW5nJyBhbmQgKGlucy5zdWJtaXR0ZXIgaXMgY3VycmVudF91c2VyX2lkIG9yIGlucy5hcHBsaWNhbnQgaXMgY3VycmVudF91c2VyX2lkKVxyXG5cdFx0XHRib3ggPSAncGVuZGluZydcclxuXHRcdGVsc2UgaWYgaW5zLnN0YXRlIGlzICdjb21wbGV0ZWQnIGFuZCBpbnMuc3VibWl0dGVyIGlzIGN1cnJlbnRfdXNlcl9pZFxyXG5cdFx0XHRib3ggPSAnY29tcGxldGVkJ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdFx0cGVybWlzc2lvbnMgPSBwZXJtaXNzaW9uTWFuYWdlci5nZXRGbG93UGVybWlzc2lvbnMoZmxvd0lkLCBjdXJyZW50X3VzZXJfaWQpXHJcblx0XHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoc3BhY2VJZCwgeyBmaWVsZHM6IHsgYWRtaW5zOiAxIH0gfSlcclxuXHRcdFx0aWYgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKSBhbmQgKG5vdCBzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSlcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsIFwibm8gcGVybWlzc2lvbi5cIilcclxuXHRcdFx0Ym94ID0gJ21vbml0b3InXHJcblxyXG5cdFx0cmVkaXJlY3RUbyA9IFwid29ya2Zsb3cvc3BhY2UvI3tzcGFjZUlkfS8je2JveH0vI3tpbnNJZH1cIlxyXG5cdFx0cmVkaXJlY3RUb1VybCA9IE1ldGVvci5hYnNvbHV0ZVVybChyZWRpcmVjdFRvKVxyXG5cdFx0aWYgcmVxX2FzeW5jICMgfHwgcmVxLmdldChcIlgtUmVxdWVzdGVkLVdpdGhcIikgPT09ICdYTUxIdHRwUmVxdWVzdCdcclxuXHRcdFx0cmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcclxuXHRcdFx0XHRcInN0YXR1c1wiOiAzMDIsXHJcblx0XHRcdFx0XCJyZWRpcmVjdFwiOiByZWRpcmVjdFRvXHJcblx0XHRcdH0pO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXMuc2V0SGVhZGVyIFwiTG9jYXRpb25cIiwgcmVkaXJlY3RUb1VybFxyXG5cdFx0XHRyZXMud3JpdGVIZWFkIDMwMlxyXG5cdFx0XHRyZXMuZW5kKClcclxuXHRcdFx0cmV0dXJuXHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XSB9XHJcbiIsIkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9pbnN0YW5jZS86aW5zdGFuY2VJZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBib3gsIGN1cnJlbnRfdXNlcl9pZCwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3dJZCwgaW5zLCBpbnNJZCwgcGVybWlzc2lvbnMsIHJlZGlyZWN0VG8sIHJlZGlyZWN0VG9VcmwsIHJlZiwgcmVmMSwgcmVmMiwgcmVxX2FzeW5jLCBzcGFjZSwgc3BhY2VJZDtcbiAgdHJ5IHtcbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEsIHJlcyk7XG4gICAgY3VycmVudF91c2VyX2lkID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICAgIHJlcV9hc3luYyA9IF8uaGFzKHJlcS5xdWVyeSwgJ2FzeW5jJyk7XG4gICAgaW5zSWQgPSByZXEucGFyYW1zLmluc3RhbmNlSWQ7XG4gICAgaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgZmxvdzogMSxcbiAgICAgICAgc3RhdGU6IDEsXG4gICAgICAgIGluYm94X3VzZXJzOiAxLFxuICAgICAgICBjY191c2VyczogMSxcbiAgICAgICAgb3V0Ym94X3VzZXJzOiAxLFxuICAgICAgICBzdWJtaXR0ZXI6IDEsXG4gICAgICAgIGFwcGxpY2FudDogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghaW5zKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdpbnN0YW5jZUlkIGlzIHdyb25nIG9yIGluc3RhbmNlIG5vdCBleGlzdHMuJyk7XG4gICAgfVxuICAgIHNwYWNlSWQgPSBpbnMuc3BhY2U7XG4gICAgZmxvd0lkID0gaW5zLmZsb3c7XG4gICAgaWYgKGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICB1c2VyOiBjdXJyZW50X3VzZXJfaWRcbiAgICB9KS5jb3VudCgpID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICd1c2VyIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZS4nKTtcbiAgICB9XG4gICAgYm94ID0gJyc7XG4gICAgaWYgKCgocmVmID0gaW5zLmluYm94X3VzZXJzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKGN1cnJlbnRfdXNlcl9pZCkgOiB2b2lkIDApIHx8ICgocmVmMSA9IGlucy5jY191c2VycykgIT0gbnVsbCA/IHJlZjEuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSA6IHZvaWQgMCkpIHtcbiAgICAgIGJveCA9ICdpbmJveCc7XG4gICAgfSBlbHNlIGlmICgocmVmMiA9IGlucy5vdXRib3hfdXNlcnMpICE9IG51bGwgPyByZWYyLmluY2x1ZGVzKGN1cnJlbnRfdXNlcl9pZCkgOiB2b2lkIDApIHtcbiAgICAgIGJveCA9ICdvdXRib3gnO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnZHJhZnQnICYmIGlucy5zdWJtaXR0ZXIgPT09IGN1cnJlbnRfdXNlcl9pZCkge1xuICAgICAgYm94ID0gJ2RyYWZ0JztcbiAgICB9IGVsc2UgaWYgKGlucy5zdGF0ZSA9PT0gJ3BlbmRpbmcnICYmIChpbnMuc3VibWl0dGVyID09PSBjdXJyZW50X3VzZXJfaWQgfHwgaW5zLmFwcGxpY2FudCA9PT0gY3VycmVudF91c2VyX2lkKSkge1xuICAgICAgYm94ID0gJ3BlbmRpbmcnO1xuICAgIH0gZWxzZSBpZiAoaW5zLnN0YXRlID09PSAnY29tcGxldGVkJyAmJiBpbnMuc3VibWl0dGVyID09PSBjdXJyZW50X3VzZXJfaWQpIHtcbiAgICAgIGJveCA9ICdjb21wbGV0ZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhmbG93SWQsIGN1cnJlbnRfdXNlcl9pZCk7XG4gICAgICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlSWQsIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgYWRtaW5zOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkgJiYgKCFzcGFjZS5hZG1pbnMuaW5jbHVkZXMoY3VycmVudF91c2VyX2lkKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcIm5vIHBlcm1pc3Npb24uXCIpO1xuICAgICAgfVxuICAgICAgYm94ID0gJ21vbml0b3InO1xuICAgIH1cbiAgICByZWRpcmVjdFRvID0gXCJ3b3JrZmxvdy9zcGFjZS9cIiArIHNwYWNlSWQgKyBcIi9cIiArIGJveCArIFwiL1wiICsgaW5zSWQ7XG4gICAgcmVkaXJlY3RUb1VybCA9IE1ldGVvci5hYnNvbHV0ZVVybChyZWRpcmVjdFRvKTtcbiAgICBpZiAocmVxX2FzeW5jKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoe1xuICAgICAgICBcInN0YXR1c1wiOiAzMDIsXG4gICAgICAgIFwicmVkaXJlY3RcIjogcmVkaXJlY3RUb1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXCJMb2NhdGlvblwiLCByZWRpcmVjdFRvVXJsKTtcbiAgICAgIHJlcy53cml0ZUhlYWQoMzAyKTtcbiAgICAgIHJlcy5lbmQoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcclxuQGFwaSB7Z2V0fSAvYXBpL3dvcmtmbG93L29wZW4vcGVuZGluZyDojrflj5blvoXlip7mlofku7ZcclxuXHJcbkBhcGlEZXNjcmlwdGlvbiDojrflj5blvZPliY3nlKjmiLfnmoTlvoXlip7kuovpobnliJfooahcclxuXHJcbkBhcGlOYW1lIGdldEluYm94XHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxuXHR7XHJcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXHJcblx0fVxyXG5cclxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxyXG5cdHtcclxuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG5cdFx0XCJkYXRhXCI6IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwiaWRcIjogXCJnN3dva1hOa1I5eXhIdkE0RFwiLFxyXG5cdFx0XHRcdFwic3RhcnRfZGF0ZVwiOiBcIjIwMTctMTEtMjNUMDI6Mjg6NTMuMTY0WlwiLFxyXG5cdFx0XHRcdFwiZmxvd19uYW1lXCI6IFwi5q2j5paH5rWB56iLXCIsXHJcblx0XHRcdFx0XCJzcGFjZV9uYW1lXCI6IFwi5a6h5om5546LXCIsXHJcblx0XHRcdFx0XCJuYW1lXCI6IFwi5q2j5paH5rWB56iLIDFcIixcclxuXHRcdFx0XHRcImFwcGxpY2FudF9uYW1lXCI6IG51bGwsXHJcblx0XHRcdFx0XCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIjogXCLlrqHmibnnjotcIixcclxuXHRcdFx0XHRcInN1Ym1pdF9kYXRlXCI6IFwiMjAxNy0wNy0yNVQwNjozNjo0OC40OTJaXCIsXHJcblx0XHRcdFx0XCJzdGVwX25hbWVcIjogXCLlvIDlp4tcIixcclxuXHRcdFx0XHRcInNwYWNlX2lkXCI6IFwia2ZEc012N2dCZXdtR1hHRUxcIixcclxuXHRcdFx0XHRcIm1vZGlmaWVkXCI6IFwiMjAxNy0xMS0yM1QwMjoyODo1My4xNjRaXCIsXHJcblx0XHRcdFx0XCJpc19yZWFkXCI6IGZhbHNlLFxyXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcImlkXCI6IFwiV3FLU3JXUW95d2dKYU1wOWtcIixcclxuXHRcdFx0XHRcInN0YXJ0X2RhdGVcIjogXCIyMDE3LTA4LTE3VDA3OjM4OjM1LjQyMFpcIixcclxuXHRcdFx0XHRcImZsb3dfbmFtZVwiOiBcIuato+aWh1xcblwiLFxyXG5cdFx0XHRcdFwic3BhY2VfbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxyXG5cdFx0XHRcdFwibmFtZVwiOiBcIuato+aWh1xcbiAxXCIsXHJcblx0XHRcdFx0XCJhcHBsaWNhbnRfbmFtZVwiOiBcIuaut+S6rui+iVwiLFxyXG5cdFx0XHRcdFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCI6IFwi5a6h5om5546LXCIsXHJcblx0XHRcdFx0XCJzdWJtaXRfZGF0ZVwiOiBcIjIwMTctMDYtMjdUMTA6MjY6MTkuNDY4WlwiLFxyXG5cdFx0XHRcdFwic3RlcF9uYW1lXCI6IFwi5byA5aeLXCIsXHJcblx0XHRcdFx0XCJzcGFjZV9pZFwiOiBcImtmRHNNdjdnQmV3bUdYR0VMXCIsXHJcblx0XHRcdFx0XCJtb2RpZmllZFwiOiBcIjIwMTctMDgtMTdUMDc6Mzg6MzUuNDIxWlwiLFxyXG5cdFx0XHRcdFwiaXNfcmVhZFwiOiB0cnVlLFxyXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XHJcblx0XHRcdH1cclxuXHRcdF1cclxuXHR9XHJcbiMjI1xyXG5Kc29uUm91dGVzLmFkZCAnZ2V0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9wZW5kaW5nJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXSB8fCByZXEucXVlcnk/LnNwYWNlSWRcclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBzcGFjZV9pZCcpXHJcblxyXG5cdFx0dXNlcl9pZCA9IHJlcS51c2VySWRcclxuXHJcblx0XHRpZiAhdXNlcl9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdOb3QgbG9nZ2VkIGluJylcclxuXHJcblx0XHRpZiBkYi51c2Vycy5maW5kKHsgX2lkOiB1c2VyX2lkIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0bGltaXQgPSByZXEucXVlcnk/LmxpbWl0IHx8IDUwMFxyXG5cclxuXHRcdGxpbWl0ID0gcGFyc2VJbnQobGltaXQpXHJcblxyXG5cdFx0dXNlcm5hbWUgPSByZXEucXVlcnk/LnVzZXJuYW1lXHJcblxyXG5cdFx0dXNlcmlkID0gcmVxLnF1ZXJ5Py51c2VyaWRcclxuXHJcblx0XHRhdHRhY2ggPSByZXEucXVlcnk/LmF0dGFjaFxyXG5cclxuXHRcdHdvcmtmbG93X2NhdGVnb3JpZXMgPSByZXEucXVlcnk/LndvcmtmbG93X2NhdGVnb3JpZXNcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHRzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblxyXG5cdFx0IyDlpoLmnpzlvZPliY3nlKjmiLfmmK/lt6XkvZzljLrnrqHnkIblkZjvvIzliJnpgJrov4fmn6XnnIt1cmzkuIrmmK/lkKbmnIl1c2VybmFtZVxcdXNlcmlkIO+8jFxyXG5cdFx0IyDlpoLmnpzmnInvvIzliJnov5Tlm551c2VybmFtZVxcdXNlcmlk5a+55bqU55qE55So5oi377yM5ZCm5YiZ6L+U5Zue5b2T5YmN55So5oi35b6F5Yqe44CCXHJcblx0XHQjIHVzZXJuYW1lXFx1c2VyaWTpg73lrZjlnKjml7bvvIx1c2VyaWTkvJjlhYhcclxuXHRcdHNwZWNpYWxfdXNlcl9pZFxyXG5cdFx0aWYgc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJfaWQpXHJcblx0XHRcdGlmIHVzZXJpZFxyXG5cdFx0XHRcdGlmIGRiLnVzZXJzLmZpbmQoeyBfaWQ6IHVzZXJpZCB9KS5jb3VudCgpIDwgMVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCBcImNhbiBub3QgZmluZCB1c2VyIGJ5IHVzZXJpZDogI3t1c2VyaWR9XCIpXHJcblxyXG5cdFx0XHRcdHNwZWNpYWxfdXNlcl9pZCA9IHVzZXJpZFxyXG5cdFx0XHRlbHNlIGlmIHVzZXJuYW1lXHJcblx0XHRcdFx0dSA9IGRiLnVzZXJzLmZpbmRPbmUoeyB1c2VybmFtZTogdXNlcm5hbWUgfSwgeyBmaWVsZHM6IHsgX2lkOiAxIH0gfSlcclxuXHRcdFx0XHRpZiBfLmlzRW1wdHkodSlcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VybmFtZTogI3t1c2VybmFtZX1cIilcclxuXHJcblx0XHRcdFx0c3BlY2lhbF91c2VyX2lkID0gdS5faWRcclxuXHJcblx0XHRyZXN1bHRfaW5zdGFuY2VzID0gbmV3IEFycmF5XHJcblxyXG5cdFx0aXNfcmVhZCA9IGZhbHNlXHJcblx0XHRzdGFydF9kYXRlID0gJydcclxuXHRcdHVpZCA9IHVzZXJfaWRcclxuXHRcdHF1ZXJ5ID0ge1xyXG5cdFx0XHQkb3I6IFt7IGluYm94X3VzZXJzOiB1c2VyX2lkIH0sIHsgY2NfdXNlcnM6IHVzZXJfaWQgfV1cclxuXHRcdH1cclxuXHJcblx0XHRpZiBzcGVjaWFsX3VzZXJfaWRcclxuXHRcdFx0dWlkID0gc3BlY2lhbF91c2VyX2lkXHJcblx0XHRcdHF1ZXJ5ID0ge1xyXG5cdFx0XHRcdHNwYWNlOiBzcGFjZV9pZCxcclxuXHRcdFx0XHQkb3I6IFt7IGluYm94X3VzZXJzOiBzcGVjaWFsX3VzZXJfaWQgfSwgeyBjY191c2Vyczogc3BlY2lhbF91c2VyX2lkIH1dXHJcblx0XHRcdH1cclxuXHJcblx0XHRpZiB3b3JrZmxvd19jYXRlZ29yaWVzXHJcblx0XHRcdHF1ZXJ5LmNhdGVnb3J5ID0geyAkaW46IHdvcmtmbG93X2NhdGVnb3JpZXMuc3BsaXQoJywnKSB9XHJcblxyXG5cdFx0c3BhY2VfbmFtZXMgPSB7fVxyXG5cdFx0c3BhY2VfbmFtZXNbc3BhY2UuX2lkXSA9IHNwYWNlLm5hbWVcclxuXHJcblx0XHRpZiBsaW1pdCA+IDBcclxuXHRcdFx0ZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHsgc29ydDogeyBtb2RpZmllZDogLTEgfSwgbGltaXQ6IGxpbWl0IH0pLmZvckVhY2ggKGkpIC0+XHJcblxyXG5cdFx0XHRcdGlmIGkuaW5ib3hfdXNlcnM/LmluY2x1ZGVzKHVpZClcclxuXHRcdFx0XHRcdF8uZWFjaCBpLnRyYWNlcywgKHQpIC0+XHJcblx0XHRcdFx0XHRcdGlmIHQuaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdFx0XHRcdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGEpIC0+XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBhLnVzZXIgaXMgdWlkIGFuZCBhLnR5cGUgaXNudCAnY2MnIGFuZCBub3QgYS5pc19maW5pc2hlZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpc19yZWFkID0gYS5pc19yZWFkXHJcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXJ0X2RhdGUgPSBhLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRfLmVhY2ggaS50cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRcdFx0XHRpZiBub3Qgc3RhcnRfZGF0ZSBhbmQgdC5hcHByb3Zlc1xyXG5cdFx0XHRcdFx0XHRcdF8uZWFjaCB0LmFwcHJvdmVzLCAoYSkgLT5cclxuXHRcdFx0XHRcdFx0XHRcdGlmIG5vdCBzdGFydF9kYXRlIGFuZCBhLnVzZXIgaXMgdWlkIGFuZCBhLnR5cGUgaXMgJ2NjJyBhbmQgbm90IGEuaXNfZmluaXNoZWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0aXNfcmVhZCA9IGEuaXNfcmVhZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydF9kYXRlID0gYS5zdGFydF9kYXRlXHJcblxyXG5cdFx0XHRcdGlmIG5vdCBzcGFjZV9uYW1lc1tpLnNwYWNlXVxyXG5cdFx0XHRcdFx0c3BhY2VfbmFtZXNbaS5zcGFjZV0gPSBkYi5zcGFjZXMuZmluZE9uZShpLnNwYWNlLCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSk/Lm5hbWVcclxuXHJcblx0XHRcdFx0aCA9IG5ldyBPYmplY3RcclxuXHRcdFx0XHRoW1wiaWRcIl0gPSBpW1wiX2lkXCJdXHJcblx0XHRcdFx0aFtcInN0YXJ0X2RhdGVcIl0gPSBzdGFydF9kYXRlXHJcblx0XHRcdFx0aFtcImZsb3dfbmFtZVwiXSA9IGkuZmxvd19uYW1lXHJcblx0XHRcdFx0aFtcInNwYWNlX25hbWVcIl0gPSBzcGFjZV9uYW1lc1tpLnNwYWNlXVxyXG5cdFx0XHRcdGhbXCJuYW1lXCJdID0gaVtcIm5hbWVcIl1cclxuXHRcdFx0XHRoW1wiYXBwbGljYW50X25hbWVcIl0gPSBpW1wiYXBwbGljYW50X25hbWVcIl1cclxuXHRcdFx0XHRoW1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXVxyXG5cdFx0XHRcdGhbXCJzdWJtaXRfZGF0ZVwiXSA9IGlbXCJzdWJtaXRfZGF0ZVwiXVxyXG5cdFx0XHRcdGhbXCJzdGVwX25hbWVcIl0gPSBpLmN1cnJlbnRfc3RlcF9uYW1lXHJcblx0XHRcdFx0aFtcInNwYWNlX2lkXCJdID0gaS5zcGFjZVxyXG5cdFx0XHRcdGhbXCJtb2RpZmllZFwiXSA9IGlbXCJtb2RpZmllZFwiXVxyXG5cdFx0XHRcdGhbXCJpc19yZWFkXCJdID0gaXNfcmVhZFxyXG5cdFx0XHRcdGhbXCJ2YWx1ZXNcIl0gPSBpW1widmFsdWVzXCJdXHJcblxyXG5cdFx0XHRcdGlmIGF0dGFjaCBpcyAndHJ1ZSdcclxuXHRcdFx0XHRcdGguYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoeyAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpLl9pZCwgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyAkbmU6IHRydWUgfSB9LCB7IGZpZWxkczogeyBjb3BpZXM6IDAgfSB9KS5mZXRjaCgpXHJcblxyXG5cdFx0XHRcdHJlc3VsdF9pbnN0YW5jZXMucHVzaChoKVxyXG5cclxuXHRcdG5vX2xpbWl0X2NvdW50ID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnkpLmNvdW50KClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3VsdF9pbnN0YW5jZXMsIGNvdW50OiBub19saW1pdF9jb3VudCB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLnJlYXNvbiB9XSB9XHJcblx0XHR9XHJcblxyXG4iLCJcbi8qXG5AYXBpIHtnZXR9IC9hcGkvd29ya2Zsb3cvb3Blbi9wZW5kaW5nIOiOt+WPluW+heWKnuaWh+S7tlxuXG5AYXBpRGVzY3JpcHRpb24g6I635Y+W5b2T5YmN55So5oi355qE5b6F5Yqe5LqL6aG55YiX6KGoXG5cbkBhcGlOYW1lIGdldEluYm94XG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxuXHR7XG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxuXHR9XG5cbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcblx0e1xuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuXHRcdFwiZGF0YVwiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiaWRcIjogXCJnN3dva1hOa1I5eXhIdkE0RFwiLFxuXHRcdFx0XHRcInN0YXJ0X2RhdGVcIjogXCIyMDE3LTExLTIzVDAyOjI4OjUzLjE2NFpcIixcblx0XHRcdFx0XCJmbG93X25hbWVcIjogXCLmraPmlofmtYHnqItcIixcblx0XHRcdFx0XCJzcGFjZV9uYW1lXCI6IFwi5a6h5om5546LXCIsXG5cdFx0XHRcdFwibmFtZVwiOiBcIuato+aWh+a1geeoiyAxXCIsXG5cdFx0XHRcdFwiYXBwbGljYW50X25hbWVcIjogbnVsbCxcblx0XHRcdFx0XCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIjogXCLlrqHmibnnjotcIixcblx0XHRcdFx0XCJzdWJtaXRfZGF0ZVwiOiBcIjIwMTctMDctMjVUMDY6MzY6NDguNDkyWlwiLFxuXHRcdFx0XHRcInN0ZXBfbmFtZVwiOiBcIuW8gOWni1wiLFxuXHRcdFx0XHRcInNwYWNlX2lkXCI6IFwia2ZEc012N2dCZXdtR1hHRUxcIixcblx0XHRcdFx0XCJtb2RpZmllZFwiOiBcIjIwMTctMTEtMjNUMDI6Mjg6NTMuMTY0WlwiLFxuXHRcdFx0XHRcImlzX3JlYWRcIjogZmFsc2UsXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImlkXCI6IFwiV3FLU3JXUW95d2dKYU1wOWtcIixcblx0XHRcdFx0XCJzdGFydF9kYXRlXCI6IFwiMjAxNy0wOC0xN1QwNzozODozNS40MjBaXCIsXG5cdFx0XHRcdFwiZmxvd19uYW1lXCI6IFwi5q2j5paHXFxuXCIsXG5cdFx0XHRcdFwic3BhY2VfbmFtZVwiOiBcIuWuoeaJueeOi1wiLFxuXHRcdFx0XHRcIm5hbWVcIjogXCLmraPmlodcXG4gMVwiLFxuXHRcdFx0XHRcImFwcGxpY2FudF9uYW1lXCI6IFwi5q635Lqu6L6JXCIsXG5cdFx0XHRcdFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCI6IFwi5a6h5om5546LXCIsXG5cdFx0XHRcdFwic3VibWl0X2RhdGVcIjogXCIyMDE3LTA2LTI3VDEwOjI2OjE5LjQ2OFpcIixcblx0XHRcdFx0XCJzdGVwX25hbWVcIjogXCLlvIDlp4tcIixcblx0XHRcdFx0XCJzcGFjZV9pZFwiOiBcImtmRHNNdjdnQmV3bUdYR0VMXCIsXG5cdFx0XHRcdFwibW9kaWZpZWRcIjogXCIyMDE3LTA4LTE3VDA3OjM4OjM1LjQyMVpcIixcblx0XHRcdFx0XCJpc19yZWFkXCI6IHRydWUsXG5cdFx0XHRcdFwidmFsdWVzXCI6IHt9XG5cdFx0XHR9XG5cdFx0XVxuXHR9XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdnZXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3BlbmRpbmcnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYXR0YWNoLCBlLCBpc19yZWFkLCBsaW1pdCwgbm9fbGltaXRfY291bnQsIHF1ZXJ5LCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlc3VsdF9pbnN0YW5jZXMsIHNwYWNlLCBzcGFjZV9pZCwgc3BhY2VfbmFtZXMsIHNwZWNpYWxfdXNlcl9pZCwgc3RhcnRfZGF0ZSwgdSwgdWlkLCB1c2VyX2lkLCB1c2VyaWQsIHVzZXJuYW1lLCB3b3JrZmxvd19jYXRlZ29yaWVzO1xuICB0cnkge1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ10gfHwgKChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuc3BhY2VJZCA6IHZvaWQgMCk7XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBzcGFjZV9pZCcpO1xuICAgIH1cbiAgICB1c2VyX2lkID0gcmVxLnVzZXJJZDtcbiAgICBpZiAoIXVzZXJfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ05vdCBsb2dnZWQgaW4nKTtcbiAgICB9XG4gICAgaWYgKGRiLnVzZXJzLmZpbmQoe1xuICAgICAgX2lkOiB1c2VyX2lkXG4gICAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKTtcbiAgICB9XG4gICAgbGltaXQgPSAoKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmxpbWl0IDogdm9pZCAwKSB8fCA1MDA7XG4gICAgbGltaXQgPSBwYXJzZUludChsaW1pdCk7XG4gICAgdXNlcm5hbWUgPSAocmVmMiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjIudXNlcm5hbWUgOiB2b2lkIDA7XG4gICAgdXNlcmlkID0gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLnVzZXJpZCA6IHZvaWQgMDtcbiAgICBhdHRhY2ggPSAocmVmNCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjQuYXR0YWNoIDogdm9pZCAwO1xuICAgIHdvcmtmbG93X2NhdGVnb3JpZXMgPSAocmVmNSA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjUud29ya2Zsb3dfY2F0ZWdvcmllcyA6IHZvaWQgMDtcbiAgICBzcGFjZSA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHNwZWNpYWxfdXNlcl9pZDtcbiAgICBpZiAoc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJfaWQpKSB7XG4gICAgICBpZiAodXNlcmlkKSB7XG4gICAgICAgIGlmIChkYi51c2Vycy5maW5kKHtcbiAgICAgICAgICBfaWQ6IHVzZXJpZFxuICAgICAgICB9KS5jb3VudCgpIDwgMSkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VyaWQ6IFwiICsgdXNlcmlkKTtcbiAgICAgICAgfVxuICAgICAgICBzcGVjaWFsX3VzZXJfaWQgPSB1c2VyaWQ7XG4gICAgICB9IGVsc2UgaWYgKHVzZXJuYW1lKSB7XG4gICAgICAgIHUgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgX2lkOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF8uaXNFbXB0eSh1KSkge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgXCJjYW4gbm90IGZpbmQgdXNlciBieSB1c2VybmFtZTogXCIgKyB1c2VybmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3BlY2lhbF91c2VyX2lkID0gdS5faWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdF9pbnN0YW5jZXMgPSBuZXcgQXJyYXk7XG4gICAgaXNfcmVhZCA9IGZhbHNlO1xuICAgIHN0YXJ0X2RhdGUgPSAnJztcbiAgICB1aWQgPSB1c2VyX2lkO1xuICAgIHF1ZXJ5ID0ge1xuICAgICAgJG9yOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbmJveF91c2VyczogdXNlcl9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgY2NfdXNlcnM6IHVzZXJfaWRcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gICAgaWYgKHNwZWNpYWxfdXNlcl9pZCkge1xuICAgICAgdWlkID0gc3BlY2lhbF91c2VyX2lkO1xuICAgICAgcXVlcnkgPSB7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgJG9yOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5ib3hfdXNlcnM6IHNwZWNpYWxfdXNlcl9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGNjX3VzZXJzOiBzcGVjaWFsX3VzZXJfaWRcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh3b3JrZmxvd19jYXRlZ29yaWVzKSB7XG4gICAgICBxdWVyeS5jYXRlZ29yeSA9IHtcbiAgICAgICAgJGluOiB3b3JrZmxvd19jYXRlZ29yaWVzLnNwbGl0KCcsJylcbiAgICAgIH07XG4gICAgfVxuICAgIHNwYWNlX25hbWVzID0ge307XG4gICAgc3BhY2VfbmFtZXNbc3BhY2UuX2lkXSA9IHNwYWNlLm5hbWU7XG4gICAgaWYgKGxpbWl0ID4gMCkge1xuICAgICAgZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcbiAgICAgICAgc29ydDoge1xuICAgICAgICAgIG1vZGlmaWVkOiAtMVxuICAgICAgICB9LFxuICAgICAgICBsaW1pdDogbGltaXRcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICB2YXIgaCwgcmVmNiwgcmVmNztcbiAgICAgICAgaWYgKChyZWY2ID0gaS5pbmJveF91c2VycykgIT0gbnVsbCA/IHJlZjYuaW5jbHVkZXModWlkKSA6IHZvaWQgMCkge1xuICAgICAgICAgIF8uZWFjaChpLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHQuaXNfZmluaXNoZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIGlmIChhLnVzZXIgPT09IHVpZCAmJiBhLnR5cGUgIT09ICdjYycgJiYgIWEuaXNfZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlzX3JlYWQgPSBhLmlzX3JlYWQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRfZGF0ZSA9IGEuc3RhcnRfZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF8uZWFjaChpLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKCFzdGFydF9kYXRlICYmIHQuYXBwcm92ZXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGFydF9kYXRlICYmIGEudXNlciA9PT0gdWlkICYmIGEudHlwZSA9PT0gJ2NjJyAmJiAhYS5pc19maW5pc2hlZCkge1xuICAgICAgICAgICAgICAgICAgaXNfcmVhZCA9IGEuaXNfcmVhZDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdGFydF9kYXRlID0gYS5zdGFydF9kYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzcGFjZV9uYW1lc1tpLnNwYWNlXSkge1xuICAgICAgICAgIHNwYWNlX25hbWVzW2kuc3BhY2VdID0gKHJlZjcgPSBkYi5zcGFjZXMuZmluZE9uZShpLnNwYWNlLCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSAhPSBudWxsID8gcmVmNy5uYW1lIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGggPSBuZXcgT2JqZWN0O1xuICAgICAgICBoW1wiaWRcIl0gPSBpW1wiX2lkXCJdO1xuICAgICAgICBoW1wic3RhcnRfZGF0ZVwiXSA9IHN0YXJ0X2RhdGU7XG4gICAgICAgIGhbXCJmbG93X25hbWVcIl0gPSBpLmZsb3dfbmFtZTtcbiAgICAgICAgaFtcInNwYWNlX25hbWVcIl0gPSBzcGFjZV9uYW1lc1tpLnNwYWNlXTtcbiAgICAgICAgaFtcIm5hbWVcIl0gPSBpW1wibmFtZVwiXTtcbiAgICAgICAgaFtcImFwcGxpY2FudF9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9uYW1lXCJdO1xuICAgICAgICBoW1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gaVtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZVwiXTtcbiAgICAgICAgaFtcInN1Ym1pdF9kYXRlXCJdID0gaVtcInN1Ym1pdF9kYXRlXCJdO1xuICAgICAgICBoW1wic3RlcF9uYW1lXCJdID0gaS5jdXJyZW50X3N0ZXBfbmFtZTtcbiAgICAgICAgaFtcInNwYWNlX2lkXCJdID0gaS5zcGFjZTtcbiAgICAgICAgaFtcIm1vZGlmaWVkXCJdID0gaVtcIm1vZGlmaWVkXCJdO1xuICAgICAgICBoW1wiaXNfcmVhZFwiXSA9IGlzX3JlYWQ7XG4gICAgICAgIGhbXCJ2YWx1ZXNcIl0gPSBpW1widmFsdWVzXCJdO1xuICAgICAgICBpZiAoYXR0YWNoID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBoLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IGkuX2lkLFxuICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgICAgICAgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcbiAgICAgICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIGNvcGllczogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmZldGNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdF9pbnN0YW5jZXMucHVzaChoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBub19saW1pdF9jb3VudCA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5KS5jb3VudCgpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdF9pbnN0YW5jZXMsXG4gICAgICAgIGNvdW50OiBub19saW1pdF9jb3VudFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5yZWFzb25cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCJDb29raWVzID0gcmVxdWlyZShcImNvb2tpZXNcIilcclxuXHJcbk1ldGVvci5zdGFydHVwIC0+XHJcblx0V2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UgXCIvYXBpL3dvcmtmbG93L2V4cG9ydC90YWxiZV90ZW1wbGF0ZVwiLCAocmVxLCByZXMsIG5leHQpLT5cclxuXHRcdGNvb2tpZXMgPSBuZXcgQ29va2llcyggcmVxLCByZXMgKTtcclxuXHRcdCMgZmlyc3QgY2hlY2sgcmVxdWVzdCBib2R5XHJcblx0XHRpZiByZXEuYm9keVxyXG5cdFx0XHR1c2VySWQgPSByZXEuYm9keVtcIlgtVXNlci1JZFwiXVxyXG5cdFx0XHRhdXRoVG9rZW4gPSByZXEuYm9keVtcIlgtQXV0aC1Ub2tlblwiXVxyXG5cclxuXHRcdCMgdGhlbiBjaGVjayBjb29raWVcclxuXHRcdGlmICF1c2VySWQgb3IgIWF1dGhUb2tlblxyXG5cdFx0XHR1c2VySWQgPSBjb29raWVzLmdldChcIlgtVXNlci1JZFwiKVxyXG5cdFx0XHRhdXRoVG9rZW4gPSBjb29raWVzLmdldChcIlgtQXV0aC1Ub2tlblwiKVxyXG5cclxuXHRcdGlmICEodXNlcklkIGFuZCBhdXRoVG9rZW4pXHJcblx0XHRcdHJlcy53cml0ZUhlYWQoNDAxKTtcclxuXHRcdFx0cmVzLmVuZCBKU09OLnN0cmluZ2lmeSh7XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLUF1dGgtVG9rZW5cIixcclxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdFx0fSlcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRmbG93SWQgPSByZXEucXVlcnk/LmZsb3c7XHJcblxyXG5cdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogZmxvd0lkfSwge2ZpZWxkczoge3NwYWNlOiAxLCBmb3JtOiAxLCBuYW1lOiAxfX0pXHJcblxyXG5cdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe19pZDogZmxvdy5mb3JtfSwge2ZpZWxkczoge3NwYWNlOiAxLCBcImN1cnJlbnQuX2lkXCI6IDF9fSlcclxuXHJcblx0XHRpZiBfLmlzRW1wdHkoZmxvdylcclxuXHRcdFx0cmVzLndyaXRlSGVhZCg0MDEpO1xyXG5cdFx0XHRyZXMuZW5kIEpTT04uc3RyaW5naWZ5KHtcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBJbnZhbGlkIGZvcm1JZFwiLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0XHR9KVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpZiAhU3RlZWRvcy5pc1NwYWNlQWRtaW4oZmxvdy5zcGFjZSwgdXNlcklkKVxyXG5cdFx0XHRcdHJlcy53cml0ZUhlYWQoNDAxKTtcclxuXHRcdFx0XHRyZXMuZW5kIEpTT04uc3RyaW5naWZ5KHtcclxuXHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb25cIixcclxuXHRcdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShmbG93LnNwYWNlLCB7IGZpZWxkczogeyBpc19wYWlkOiAxIH0gfSlcclxuXHRcdFx0aWYgIXNwYWNlPy5pc19wYWlkXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdGNvZGU6IDQwNCxcclxuXHRcdFx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vbi1wYWlkIHNwYWNlLlwiLFxyXG5cdFx0XHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0ZGF0YSA9IFRlbXBsYXRlTWFuYWdlci5oYW5kbGVUYWJsZVRlbXBsYXRlKHtmb3JtOiBmbG93LmZvcm0sIGZvcm1fdmVyc2lvbjogZm9ybT8uY3VycmVudD8uX2lkfSwgdHJ1ZSk7XHJcblxyXG5cdFx0ZmlsZU5hbWUgPSBmbG93Lm5hbWVcclxuXHJcblx0XHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XHJcblx0XHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgJ2F0dGFjaG1lbnQ7ZmlsZW5hbWU9JytlbmNvZGVVUkkoZmlsZU5hbWUpKycuaHRtbCcpO1xyXG5cdFx0cmVzLmVuZChkYXRhKSIsInZhciBDb29raWVzO1xuXG5Db29raWVzID0gcmVxdWlyZShcImNvb2tpZXNcIik7XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gV2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UoXCIvYXBpL3dvcmtmbG93L2V4cG9ydC90YWxiZV90ZW1wbGF0ZVwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIHZhciBhdXRoVG9rZW4sIGNvb2tpZXMsIGRhdGEsIGZpbGVOYW1lLCBmbG93LCBmbG93SWQsIGZvcm0sIHJlZiwgcmVmMSwgc3BhY2UsIHVzZXJJZDtcbiAgICBjb29raWVzID0gbmV3IENvb2tpZXMocmVxLCByZXMpO1xuICAgIGlmIChyZXEuYm9keSkge1xuICAgICAgdXNlcklkID0gcmVxLmJvZHlbXCJYLVVzZXItSWRcIl07XG4gICAgICBhdXRoVG9rZW4gPSByZXEuYm9keVtcIlgtQXV0aC1Ub2tlblwiXTtcbiAgICB9XG4gICAgaWYgKCF1c2VySWQgfHwgIWF1dGhUb2tlbikge1xuICAgICAgdXNlcklkID0gY29va2llcy5nZXQoXCJYLVVzZXItSWRcIik7XG4gICAgICBhdXRoVG9rZW4gPSBjb29raWVzLmdldChcIlgtQXV0aC1Ub2tlblwiKTtcbiAgICB9XG4gICAgaWYgKCEodXNlcklkICYmIGF1dGhUb2tlbikpIHtcbiAgICAgIHJlcy53cml0ZUhlYWQoNDAxKTtcbiAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIFgtQXV0aC1Ub2tlblwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmxvd0lkID0gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5mbG93IDogdm9pZCAwO1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogZmxvd0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHNwYWNlOiAxLFxuICAgICAgICBmb3JtOiAxLFxuICAgICAgICBuYW1lOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBmbG93LmZvcm1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgIFwiY3VycmVudC5faWRcIjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChfLmlzRW1wdHkoZmxvdykpIHtcbiAgICAgIHJlcy53cml0ZUhlYWQoNDAxKTtcbiAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBJbnZhbGlkIGZvcm1JZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFTdGVlZG9zLmlzU3BhY2VBZG1pbihmbG93LnNwYWNlLCB1c2VySWQpKSB7XG4gICAgICAgIHJlcy53cml0ZUhlYWQoNDAxKTtcbiAgICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm8gcGVybWlzc2lvblwiLFxuICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoZmxvdy5zcGFjZSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBpc19wYWlkOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCEoc3BhY2UgIT0gbnVsbCA/IHNwYWNlLmlzX3BhaWQgOiB2b2lkIDApKSB7XG4gICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiA0MDQsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm9uLXBhaWQgc3BhY2UuXCIsXG4gICAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGRhdGEgPSBUZW1wbGF0ZU1hbmFnZXIuaGFuZGxlVGFibGVUZW1wbGF0ZSh7XG4gICAgICBmb3JtOiBmbG93LmZvcm0sXG4gICAgICBmb3JtX3ZlcnNpb246IGZvcm0gIT0gbnVsbCA/IChyZWYxID0gZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmMS5faWQgOiB2b2lkIDAgOiB2b2lkIDBcbiAgICB9LCB0cnVlKTtcbiAgICBmaWxlTmFtZSA9IGZsb3cubmFtZTtcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScgKyBlbmNvZGVVUkkoZmlsZU5hbWUpICsgJy5odG1sJyk7XG4gICAgcmV0dXJuIHJlcy5lbmQoZGF0YSk7XG4gIH0pO1xufSk7XG4iLCIjIyNcclxuQGFwaSB7cG9zdH0gL2FwaS93b3JrZmxvdy9vcGVuL2RyYWZ0cyDmlrDlu7rnlLPor7fljZVcclxuXHJcbkBhcGlOYW1lIGNyZWF0ZUluc3RhbmNlXHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxyXG5cclxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxyXG5cclxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxyXG5cclxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxyXG57XHJcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxyXG59XHJcblxyXG5AYXBpUGFyYW1FeGFtcGxlIHtqc29ufSBSZXF1ZXN0IFBheWxvYWQ6XHJcbntcclxuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcclxuICAgIFwiYXBwbGljYW50XCI6IOeUs+ivt+S6uklkLFxyXG4gICAgXCJ2YWx1ZXNcIjoge1xyXG4gICAgICAgIFwiZmllbGRzMVwiIDog5a2X5q615YC8LFxyXG4gICAgICAgIFwiZmllbGRzMlwiIDog5a2X5q615YC8LFxyXG4gICAgICAgIC4uLlxyXG4gICAgfVxyXG59XHJcblxyXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XHJcbntcclxuICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG4gICAgXCJkYXRhXCI6IHtpbnN0YW5jZX1cclxufVxyXG5cclxuQGFwaUVycm9yRXhhbXBsZSB7anNvbn0gZXJyb3ItUmVzcG9uc2U6XHJcbntcclxuICAgIFwic3RhdHVzXCI6IFwiZXJyb3JcIixcclxuICAgIFwiZGF0YVwiOiB7Li4ufVxyXG59XHJcbiMjI1xyXG5Kc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vZHJhZnRzJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHVzZXJfaWQgPSByZXEudXNlcklkXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHsgX2lkOiB1c2VyX2lkIH0pXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIHhfc3BhY2VfaWQnKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyX2luZm8uX2lkKVxyXG5cclxuXHRcdGhhc2hEYXRhID0gcmVxLmJvZHlcclxuXHJcblx0XHRpZiBub3QgaGFzaERhdGFbXCJmbG93XCJdXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbnVsbCcpXHJcblxyXG5cdFx0Zmxvd19pZCAgICAgID0gaGFzaERhdGFbXCJmbG93XCJdXHJcblx0XHRhcHBsaWNhbnRfaWQgPSBoYXNoRGF0YVtcImFwcGxpY2FudFwiXVxyXG5cdFx0YXBwbGljYW50X3VzZXJuYW1lID0gaGFzaERhdGFbXCJhcHBsaWNhbnRfdXNlcm5hbWVcIl1cclxuXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudCA9IG5ldyBPYmplY3RcclxuXHJcblx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7IF9pZDogZmxvd19pZCB9LCB7IGZpZWxkczogeyBzcGFjZTogMSwgJ2N1cnJlbnQuX2lkJzogMSB9IH0pXHJcblx0XHRpZiBub3QgZmxvd1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG5vdCBleGlzdHMnKVxyXG5cclxuXHRcdGlmIHNwYWNlX2lkIGlzbnQgZmxvdy5zcGFjZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmbG93IGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpXHJcblxyXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogY3VycmVudF91c2VyX2luZm8uX2lkIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhdXRoX3Rva2VuIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIHNwYWNlJylcclxuXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcInNwYWNlXCJdID0gc3BhY2VfaWRcclxuXHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiZmxvd1wiXSA9IGZsb3dfaWRcclxuXHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiZmxvd192ZXJzaW9uXCJdID0gZmxvdy5jdXJyZW50Ll9pZFxyXG5cclxuXHRcdGFwcGxpY2FudCA9IG51bGxcclxuXHRcdGlmIGFwcGxpY2FudF9pZCBvciBhcHBsaWNhbnRfdXNlcm5hbWVcclxuXHJcblx0XHRcdGlmIGFwcGxpY2FudF9pZFxyXG5cdFx0XHRcdGFwcGxpY2FudCA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IGFwcGxpY2FudF9pZCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRpZiBub3QgYXBwbGljYW50XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgd3JvbmcnKVxyXG5cclxuXHRcdFx0ZWxzZSBpZiBhcHBsaWNhbnRfdXNlcm5hbWVcclxuXHRcdFx0XHRhcHBsaWNhbnQgPSBkYi51c2Vycy5maW5kT25lKHsgdXNlcm5hbWU6IGFwcGxpY2FudF91c2VybmFtZSB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSlcclxuXHRcdFx0XHRpZiBub3QgYXBwbGljYW50XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnRfdXNlcm5hbWUgaXMgd3JvbmcnKVxyXG5cclxuXHRcdFx0c3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcGxpY2FudC5faWQgfSlcclxuXHRcdFx0aWYgbm90IHNwYWNlX3VzZXJcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgc3BhY2UnKVxyXG5cclxuXHRcdFx0aWYgc3BhY2VfdXNlci51c2VyX2FjY2VwdGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2FwcGxpY2FudCBpcyBkaXNhYmxlZCBpbiB0aGlzIHNwYWNlJylcclxuXHJcblx0XHRcdHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcilcclxuXHRcdFx0aW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRcIl0gPSBhcHBsaWNhbnQuX2lkXHJcblx0XHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X25hbWVcIl0gPSBhcHBsaWNhbnQubmFtZVxyXG5cdFx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25cIl0gPSAgc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxyXG5cdFx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25fZnVsbG5hbWVcIl0gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdXHJcblx0XHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXHJcblxyXG5cdFx0YXBwbGljYW50SW5mbyA9IGFwcGxpY2FudCB8fCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cclxuXHRcdHRyYWNlcyA9IFtdXHJcblx0XHR0cmFjZSA9IG5ldyBPYmplY3RcclxuXHRcdGFwcHJvdmVzID0gW11cclxuXHRcdGFwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRhcHByb3ZlW1widmFsdWVzXCJdID0gaGFzaERhdGFbXCJ2YWx1ZXNcIl1cclxuXHRcdGFwcHJvdmVzLnB1c2goYXBwcm92ZSlcclxuXHRcdHRyYWNlW1wiYXBwcm92ZXNcIl0gPSBhcHByb3Zlc1xyXG5cdFx0dHJhY2VzLnB1c2godHJhY2UpXHJcblx0XHRpbnN0YW5jZV9mcm9tX2NsaWVudFtcInRyYWNlc1wiXSA9IHRyYWNlc1xyXG5cclxuXHRcdGluc3RhbmNlX2Zyb21fY2xpZW50W1wiaW5ib3hfdXNlcnNcIl0gPSBbYXBwbGljYW50SW5mby5faWRdXHJcblxyXG5cdFx0bmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBhcHBsaWNhbnRJbmZvKVxyXG5cclxuXHRcdG5ld19pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShuZXdfaW5zX2lkKVxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogbmV3X2lucyB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxyXG5cdFx0fVxyXG4iLCJcbi8qXG5AYXBpIHtwb3N0fSAvYXBpL3dvcmtmbG93L29wZW4vZHJhZnRzIOaWsOW7uueUs+ivt+WNlVxuXG5AYXBpTmFtZSBjcmVhdGVJbnN0YW5jZVxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy6566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG57XG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcbn1cblxuQGFwaVBhcmFtRXhhbXBsZSB7anNvbn0gUmVxdWVzdCBQYXlsb2FkOlxue1xuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcbiAgICBcImFwcGxpY2FudFwiOiDnlLPor7fkurpJZCxcbiAgICBcInZhbHVlc1wiOiB7XG4gICAgICAgIFwiZmllbGRzMVwiIDog5a2X5q615YC8LFxuICAgICAgICBcImZpZWxkczJcIiA6IOWtl+auteWAvCxcbiAgICAgICAgLi4uXG4gICAgfVxufVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG57XG4gICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG4gICAgXCJkYXRhXCI6IHtpbnN0YW5jZX1cbn1cblxuQGFwaUVycm9yRXhhbXBsZSB7anNvbn0gZXJyb3ItUmVzcG9uc2U6XG57XG4gICAgXCJzdGF0dXNcIjogXCJlcnJvclwiLFxuICAgIFwiZGF0YVwiOiB7Li4ufVxufVxuICovXG5Kc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vZHJhZnRzJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGFwcGxpY2FudCwgYXBwbGljYW50SW5mbywgYXBwbGljYW50X2lkLCBhcHBsaWNhbnRfdXNlcm5hbWUsIGFwcHJvdmUsIGFwcHJvdmVzLCBjdXJyZW50X3VzZXJfaW5mbywgZSwgZmxvdywgZmxvd19pZCwgaGFzaERhdGEsIGluc3RhbmNlX2Zyb21fY2xpZW50LCBuZXdfaW5zLCBuZXdfaW5zX2lkLCBzcGFjZV9pZCwgc3BhY2VfdXNlciwgc3BhY2VfdXNlcl9vcmdfaW5mbywgdHJhY2UsIHRyYWNlcywgdXNlcl9pZDtcbiAgdHJ5IHtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdXNlcl9pZCA9IHJlcS51c2VySWQ7XG4gICAgY3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgIF9pZDogdXNlcl9pZFxuICAgIH0pO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciB4X3NwYWNlX2lkJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXJfaW5mby5faWQpO1xuICAgIGhhc2hEYXRhID0gcmVxLmJvZHk7XG4gICAgaWYgKCFoYXNoRGF0YVtcImZsb3dcIl0pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBmbG93X2lkID0gaGFzaERhdGFbXCJmbG93XCJdO1xuICAgIGFwcGxpY2FudF9pZCA9IGhhc2hEYXRhW1wiYXBwbGljYW50XCJdO1xuICAgIGFwcGxpY2FudF91c2VybmFtZSA9IGhhc2hEYXRhW1wiYXBwbGljYW50X3VzZXJuYW1lXCJdO1xuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50ID0gbmV3IE9iamVjdDtcbiAgICBmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZsb3dfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICdjdXJyZW50Ll9pZCc6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWZsb3cpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbm90IGV4aXN0cycpO1xuICAgIH1cbiAgICBpZiAoc3BhY2VfaWQgIT09IGZsb3cuc3BhY2UpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2Zsb3cgaXMgbm90IGJlbG9uZyB0byB0aGlzIHNwYWNlJyk7XG4gICAgfVxuICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIHVzZXI6IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxuICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2F1dGhfdG9rZW4gaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgc3BhY2UnKTtcbiAgICB9XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJzcGFjZVwiXSA9IHNwYWNlX2lkO1xuICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiZmxvd1wiXSA9IGZsb3dfaWQ7XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJmbG93X3ZlcnNpb25cIl0gPSBmbG93LmN1cnJlbnQuX2lkO1xuICAgIGFwcGxpY2FudCA9IG51bGw7XG4gICAgaWYgKGFwcGxpY2FudF9pZCB8fCBhcHBsaWNhbnRfdXNlcm5hbWUpIHtcbiAgICAgIGlmIChhcHBsaWNhbnRfaWQpIHtcbiAgICAgICAgYXBwbGljYW50ID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgX2lkOiBhcHBsaWNhbnRfaWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghYXBwbGljYW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIHdyb25nJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYW50X3VzZXJuYW1lKSB7XG4gICAgICAgIGFwcGxpY2FudCA9IGRiLnVzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIHVzZXJuYW1lOiBhcHBsaWNhbnRfdXNlcm5hbWVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghYXBwbGljYW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50X3VzZXJuYW1lIGlzIHdyb25nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHBsaWNhbnQuX2lkXG4gICAgICB9KTtcbiAgICAgIGlmICghc3BhY2VfdXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhcHBsaWNhbnQgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgc3BhY2UnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzcGFjZV91c2VyLnVzZXJfYWNjZXB0ZWQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXBwbGljYW50IGlzIGRpc2FibGVkIGluIHRoaXMgc3BhY2UnKTtcbiAgICAgIH1cbiAgICAgIHNwYWNlX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8oc3BhY2VfdXNlcik7XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudFwiXSA9IGFwcGxpY2FudC5faWQ7XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9uYW1lXCJdID0gYXBwbGljYW50Lm5hbWU7XG4gICAgICBpbnN0YW5jZV9mcm9tX2NsaWVudFtcImFwcGxpY2FudF9vcmdhbml6YXRpb25cIl0gPSBzcGFjZV91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uXCJdO1xuICAgICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX2Z1bGxuYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXTtcbiAgICAgIGluc3RhbmNlX2Zyb21fY2xpZW50W1wiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCJdID0gc3BhY2VfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdO1xuICAgIH1cbiAgICBhcHBsaWNhbnRJbmZvID0gYXBwbGljYW50IHx8IGN1cnJlbnRfdXNlcl9pbmZvO1xuICAgIHRyYWNlcyA9IFtdO1xuICAgIHRyYWNlID0gbmV3IE9iamVjdDtcbiAgICBhcHByb3ZlcyA9IFtdO1xuICAgIGFwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgIGFwcHJvdmVbXCJ2YWx1ZXNcIl0gPSBoYXNoRGF0YVtcInZhbHVlc1wiXTtcbiAgICBhcHByb3Zlcy5wdXNoKGFwcHJvdmUpO1xuICAgIHRyYWNlW1wiYXBwcm92ZXNcIl0gPSBhcHByb3ZlcztcbiAgICB0cmFjZXMucHVzaCh0cmFjZSk7XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJ0cmFjZXNcIl0gPSB0cmFjZXM7XG4gICAgaW5zdGFuY2VfZnJvbV9jbGllbnRbXCJpbmJveF91c2Vyc1wiXSA9IFthcHBsaWNhbnRJbmZvLl9pZF07XG4gICAgbmV3X2luc19pZCA9IHV1Zmxvd01hbmFnZXIuY3JlYXRlX2luc3RhbmNlKGluc3RhbmNlX2Zyb21fY2xpZW50LCBhcHBsaWNhbnRJbmZvKTtcbiAgICBuZXdfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUobmV3X2luc19pZCk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogbmV3X2luc1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbkBhcGkge2dldH0gL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkIOafpeeci+eUs+ivt+WNleivpuaDhVxyXG5cclxuQGFwaU5hbWUgZ2V0SW5zdGFuY2VcclxuXHJcbkBhcGlHcm91cCBXb3JrZmxvd1xyXG5cclxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy655qE566h55CG5ZGYXHJcblxyXG5AYXBpUGFyYW0ge1N0cmluZ30gaW5zX2lkIOeUs+ivt+WNlUlkXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxue1xyXG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcclxufVxyXG5cclxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxyXG57XHJcbiAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuICAgIFwiZGF0YVwiOiB7aW5zdGFuY2V9XHJcbn1cclxuIyMjXHJcbkpzb25Sb3V0ZXMuYWRkICdnZXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldC86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0aW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKVxyXG5cdFx0aWYgbm90IGluc3RhbmNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBpbnN0YW5jZScpXHJcblxyXG5cdFx0aWYgZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBpbnN0YW5jZS5zcGFjZSwgdXNlcjogY3VycmVudF91c2VyIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdhdXRoX3Rva2VuIGlzIHdyb25nJylcclxuXHJcblx0XHQjIOadg+mZkO+8muS7heS7peS4i+S6uuWRmOWPr+S7peafpeeci+eUs+ivt+WNleivpuaDhe+8muaPkOS6pOiAheOAgeeUs+ivt+iAheOAgee7j+aJi+iAheOAgeacrOa1geeoi+eahOeuoeeQhuWRmOOAgeacrOa1geeoi+eahOinguWvn+WRmOOAgeacrOW3peS9nOWMuueahOeuoeeQhuWRmOOAgeacrOW3peS9nOWMuueahOaJgOacieiAheOAglxyXG5cdFx0cGVybV91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0cGVybV91c2Vycy5wdXNoKGluc3RhbmNlLnN1Ym1pdHRlcilcclxuXHRcdHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpXHJcblx0XHRpZiBpbnN0YW5jZS5vdXRib3hfdXNlcnNcclxuXHRcdFx0cGVybV91c2VycyA9IHBlcm1fdXNlcnMuY29uY2F0KGluc3RhbmNlLm91dGJveF91c2VycylcclxuXHRcdGlmIGluc3RhbmNlLmluYm94X3VzZXJzXHJcblx0XHRcdHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5pbmJveF91c2VycylcclxuXHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlLnNwYWNlIH0sIHsgZmllbGRzOiB7IGFkbWluczogMSB9IH0pXHJcblx0XHRwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoc3BhY2UuYWRtaW5zKVxyXG5cclxuXHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiAobm90IHBlcm1fdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgYW5kIChub3QgcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJtb25pdG9yXCIpKSBhbmQgKG5vdCBwZXJtaXNzaW9ucy5pbmNsdWRlcyhcImFkbWluXCIpKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdubyBwZXJtaXNzaW9uJylcclxuXHJcblx0XHRpbnN0YW5jZS5hdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLCdtZXRhZGF0YS5jdXJyZW50JzogdHJ1ZSwgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHskbmU6IHRydWV9fSwge2ZpZWxkczoge2NvcGllczogMH19KS5mZXRjaCgpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiBpbnN0YW5jZSB9XHJcblx0XHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3sgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2UgfV0gfVxyXG5cdFx0fVxyXG5cclxuIiwiXG4vKlxuQGFwaSB7Z2V0fSAvYXBpL3dvcmtmbG93L29wZW4vZ2V0LzppbnNfaWQg5p+l55yL55Sz6K+35Y2V6K+m5oOFXG5cbkBhcGlOYW1lIGdldEluc3RhbmNlXG5cbkBhcGlHcm91cCBXb3JrZmxvd1xuXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnmoTnrqHnkIblkZhcblxuQGFwaVBhcmFtIHtTdHJpbmd9IGluc19pZCDnlLPor7fljZVJZFxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxuXG5AYXBpSGVhZGVyIHtTdHJpbmd9IFgtU3BhY2UtSWRcdOW3peS9nOWMuklkXG5cbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcbntcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxufVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG57XG4gICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG4gICAgXCJkYXRhXCI6IHtpbnN0YW5jZX1cbn1cbiAqL1xuSnNvblJvdXRlcy5hZGQoJ2dldCcsICcvYXBpL3dvcmtmbG93L29wZW4vZ2V0LzppbnNfaWQnLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgY3VycmVudF91c2VyLCBlLCBpbnNfaWQsIGluc3RhbmNlLCBwZXJtX3VzZXJzLCBwZXJtaXNzaW9ucywgc3BhY2UsIHNwYWNlX2lkO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgaW5zdGFuY2UnKTtcbiAgICB9XG4gICAgaWYgKGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IGluc3RhbmNlLnNwYWNlLFxuICAgICAgdXNlcjogY3VycmVudF91c2VyXG4gICAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnYXV0aF90b2tlbiBpcyB3cm9uZycpO1xuICAgIH1cbiAgICBwZXJtX3VzZXJzID0gbmV3IEFycmF5O1xuICAgIHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5zdWJtaXR0ZXIpO1xuICAgIHBlcm1fdXNlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpO1xuICAgIGlmIChpbnN0YW5jZS5vdXRib3hfdXNlcnMpIHtcbiAgICAgIHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5vdXRib3hfdXNlcnMpO1xuICAgIH1cbiAgICBpZiAoaW5zdGFuY2UuaW5ib3hfdXNlcnMpIHtcbiAgICAgIHBlcm1fdXNlcnMgPSBwZXJtX3VzZXJzLmNvbmNhdChpbnN0YW5jZS5pbmJveF91c2Vycyk7XG4gICAgfVxuICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZS5zcGFjZVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBhZG1pbnM6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwZXJtX3VzZXJzID0gcGVybV91c2Vycy5jb25jYXQoc3BhY2UuYWRtaW5zKTtcbiAgICBwZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyhpbnN0YW5jZS5mbG93LCBjdXJyZW50X3VzZXIpO1xuICAgIGlmICgoIXBlcm1fdXNlcnMuaW5jbHVkZXMoY3VycmVudF91c2VyKSkgJiYgKCFwZXJtaXNzaW9ucy5pbmNsdWRlcyhcIm1vbml0b3JcIikpICYmICghcGVybWlzc2lvbnMuaW5jbHVkZXMoXCJhZG1pblwiKSkpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25vIHBlcm1pc3Npb24nKTtcbiAgICB9XG4gICAgaW5zdGFuY2UuYXR0YWNobWVudHMgPSBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLFxuICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgXCJtZXRhZGF0YS5pc19wcml2YXRlXCI6IHtcbiAgICAgICAgJG5lOiB0cnVlXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGNvcGllczogMFxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogaW5zdGFuY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBlID0gZXJyb3I7XG4gICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIiMjI1xyXG5AYXBpIHtwdXR9IC9hcGkvd29ya2Zsb3cvb3Blbi9zdWJtaXQvOmluc19pZCDmj5DkuqTnlLPor7fljZVcclxuXHJcbkBhcGlEZXNjcmlwdGlvbiDmmoLkuI3mlK/mjIHlvIDlp4voioLngrnkuIvkuIDoioLngrnkuLrmnaHku7bnmoTmg4XlhrVcclxuXHJcbkBhcGlOYW1lIHN1Ym1pdEluc3RhbmNlXHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxyXG5cclxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxyXG5cclxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxyXG5cclxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxyXG4gICAge1xyXG5cdFx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxyXG5cdH1cclxuXHJcbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcclxuICAgIHtcclxuXHRcdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG5cdFx0XCJkYXRhXCI6IHtpbnN0YW5jZX1cclxuXHR9XHJcbiMjI1xyXG5cclxuSnNvblJvdXRlcy5hZGQgJ3B1dCcsICcvYXBpL3dvcmtmbG93L29wZW4vc3VibWl0LzppbnNfaWQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVybiA7XHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJylcclxuXHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZClcclxuXHJcblx0XHQjIOagoemqjOeUs+ivt+WNleeKtuaAgeS4uuiNieeov1xyXG5cdFx0dXVmbG93TWFuYWdlci5pc0luc3RhbmNlRHJhZnQoaW5zdGFuY2UpXHJcblxyXG5cdFx0aWYgc3BhY2VfaWQgaXNudCBpbnN0YW5jZVtcInNwYWNlXCJdXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpXHJcblxyXG5cdFx0IyDmoKHpqoznlLPor7fljZXlv4XloavlrZfmrrXmmK/lkKbmnInlgLxcclxuXHRcdHZhbHVlcyA9IGluc3RhbmNlW1widHJhY2VzXCJdWzBdW1wiYXBwcm92ZXNcIl1bMF0udmFsdWVzXHJcblxyXG5cdFx0Zm9ybSA9IHV1Zmxvd01hbmFnZXIuZ2V0Rm9ybShpbnN0YW5jZS5mb3JtKVxyXG5cclxuXHRcdHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUodmFsdWVzLCBmb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pXHJcblxyXG5cdFx0aWYgcmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmxlbmd0aCA+IDBcclxuXHRcdFx0aWYgcmVxdWlyZV9idXRfZW1wdHlfZmllbGRzLmxlbmd0aCA+IDFcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZHMgPCcgKyByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMuam9pbihcIixcIikgKyAnPiBhcmUgcmVxdWlyZWQnKVxyXG5cdFx0XHRlbHNlIGlmIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPSAxXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnZmllbGQgPCcgKyByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMuam9pbihcIixcIikgKyAnPiBpcyByZXF1aXJlZCcpXHJcblxyXG5cdFx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KVxyXG5cclxuXHRcdHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIGluc3RhbmNlW1widHJhY2VzXCJdWzBdLnN0ZXApXHJcblxyXG5cdFx0IyDorqHnrpfkuIvkuIDmraXpqqTpgInpoblcclxuXHRcdG5leHRTdGVwcyA9IHV1Zmxvd01hbmFnZXIuZ2V0TmV4dFN0ZXBzKGluc3RhbmNlLCBmbG93LCBzdGVwLCBcInN1Ym1pdHRlZFwiKVxyXG5cclxuXHRcdGlmIG5leHRTdGVwcy5sZW5ndGggPCAxXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBuZXh0IHN0ZXBzJylcclxuXHJcblx0XHRpZiBuZXh0U3RlcHMubGVuZ3RoID4gMVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgbm90IHVuaXEnKVxyXG5cclxuXHRcdG5leHRfc3RlcF9pZCA9IG5leHRTdGVwc1swXVxyXG5cclxuXHRcdCMg6K6h566X5LiL5LiA5q2l5aSE55CG5Lq66YCJ6aG5XHJcblx0XHRuZXh0X3VzZXJfaWRzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzKGluc19pZCwgbmV4dF9zdGVwX2lkKSB8fCBbXVxyXG5cclxuXHRcdGlmIG5leHRfdXNlcl9pZHMubGVuZ3RoID4gMVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgaGFuZGxlciBub3QgdW5pcScpXHJcblxyXG5cdFx0aW5zdGFuY2VbXCJ0cmFjZXNcIl1bMF1bXCJhcHByb3Zlc1wiXVswXVtcIm5leHRfc3RlcHNcIl0gPSBbeydzdGVwJzogbmV4dF9zdGVwX2lkLCAndXNlcnMnOiBuZXh0X3VzZXJfaWRzfV1cclxuXHJcblx0XHRyZXN1bHQgPSBuZXcgT2JqZWN0XHJcblxyXG5cdFx0c3VibWl0dGVyID0gZGIudXNlcnMuZmluZE9uZShpbnN0YW5jZS5zdWJtaXR0ZXIpXHJcblxyXG5cdFx0aWYgbm90IHN1Ym1pdHRlclxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgc3VibWl0dGVyJylcclxuXHJcblx0XHRyID0gdXVmbG93TWFuYWdlci5zdWJtaXRfaW5zdGFuY2UoaW5zdGFuY2UsIHN1Ym1pdHRlcilcclxuXHJcblx0XHRpZiByLmFsZXJ0c1xyXG5cdFx0XHRyZXN1bHQgPSByXHJcblx0XHRlbHNlXHJcblx0XHRcdHJlc3VsdCA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZClcclxuXHRcdFx0aWYgcmVzdWx0XHJcblx0XHRcdFx0cmVzdWx0LmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWQsJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyRuZTogdHJ1ZX19LCB7ZmllbGRzOiB7Y29waWVzOiAwfX0pLmZldGNoKClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXN1bHR9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiXG4vKlxuQGFwaSB7cHV0fSAvYXBpL3dvcmtmbG93L29wZW4vc3VibWl0LzppbnNfaWQg5o+Q5Lqk55Sz6K+35Y2VXG5cbkBhcGlEZXNjcmlwdGlvbiDmmoLkuI3mlK/mjIHlvIDlp4voioLngrnkuIvkuIDoioLngrnkuLrmnaHku7bnmoTmg4XlhrVcblxuQGFwaU5hbWUgc3VibWl0SW5zdGFuY2VcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxuICAgIHtcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG5cdH1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxuICAgIHtcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XHRcImRhdGFcIjoge2luc3RhbmNlfVxuXHR9XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3N1Ym1pdC86aW5zX2lkJywgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3csIGZvcm0sIGluc19pZCwgaW5zdGFuY2UsIG5leHRTdGVwcywgbmV4dF9zdGVwX2lkLCBuZXh0X3VzZXJfaWRzLCByLCByZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMsIHJlc3VsdCwgc3BhY2VfaWQsIHN0ZXAsIHN1Ym1pdHRlciwgdmFsdWVzO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlKTtcbiAgICBpZiAoc3BhY2VfaWQgIT09IGluc3RhbmNlW1wic3BhY2VcIl0pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2luc3RhbmNlIGlzIG5vdCBiZWxvbmcgdG8gdGhpcyBzcGFjZScpO1xuICAgIH1cbiAgICB2YWx1ZXMgPSBpbnN0YW5jZVtcInRyYWNlc1wiXVswXVtcImFwcHJvdmVzXCJdWzBdLnZhbHVlcztcbiAgICBmb3JtID0gdXVmbG93TWFuYWdlci5nZXRGb3JtKGluc3RhbmNlLmZvcm0pO1xuICAgIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tWYWx1ZUZpZWxkc1JlcXVpcmUodmFsdWVzLCBmb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pO1xuICAgIGlmIChyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2ZpZWxkcyA8JyArIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5qb2luKFwiLFwiKSArICc+IGFyZSByZXF1aXJlZCcpO1xuICAgICAgfSBlbHNlIGlmIChyZXF1aXJlX2J1dF9lbXB0eV9maWVsZHMubGVuZ3RoID0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdmaWVsZCA8JyArIHJlcXVpcmVfYnV0X2VtcHR5X2ZpZWxkcy5qb2luKFwiLFwiKSArICc+IGlzIHJlcXVpcmVkJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgaW5zdGFuY2VbXCJ0cmFjZXNcIl1bMF0uc3RlcCk7XG4gICAgbmV4dFN0ZXBzID0gdXVmbG93TWFuYWdlci5nZXROZXh0U3RlcHMoaW5zdGFuY2UsIGZsb3csIHN0ZXAsIFwic3VibWl0dGVkXCIpO1xuICAgIGlmIChuZXh0U3RlcHMubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIG5leHQgc3RlcHMnKTtcbiAgICB9XG4gICAgaWYgKG5leHRTdGVwcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZXh0IHN0ZXAgbm90IHVuaXEnKTtcbiAgICB9XG4gICAgbmV4dF9zdGVwX2lkID0gbmV4dFN0ZXBzWzBdO1xuICAgIG5leHRfdXNlcl9pZHMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMoaW5zX2lkLCBuZXh0X3N0ZXBfaWQpIHx8IFtdO1xuICAgIGlmIChuZXh0X3VzZXJfaWRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25leHQgc3RlcCBoYW5kbGVyIG5vdCB1bmlxJyk7XG4gICAgfVxuICAgIGluc3RhbmNlW1widHJhY2VzXCJdWzBdW1wiYXBwcm92ZXNcIl1bMF1bXCJuZXh0X3N0ZXBzXCJdID0gW1xuICAgICAge1xuICAgICAgICAnc3RlcCc6IG5leHRfc3RlcF9pZCxcbiAgICAgICAgJ3VzZXJzJzogbmV4dF91c2VyX2lkc1xuICAgICAgfVxuICAgIF07XG4gICAgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICBzdWJtaXR0ZXIgPSBkYi51c2Vycy5maW5kT25lKGluc3RhbmNlLnN1Ym1pdHRlcik7XG4gICAgaWYgKCFzdWJtaXR0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBzdWJtaXR0ZXInKTtcbiAgICB9XG4gICAgciA9IHV1Zmxvd01hbmFnZXIuc3VibWl0X2luc3RhbmNlKGluc3RhbmNlLCBzdWJtaXR0ZXIpO1xuICAgIGlmIChyLmFsZXJ0cykge1xuICAgICAgcmVzdWx0ID0gcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWQsXG4gICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLFxuICAgICAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIGNvcGllczogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcclxuQGFwaSB7cHV0fSAvYXBpL3dvcmtmbG93L29wZW4vc2F2ZS86aW5zX2lkIOaaguWtmOeUs+ivt+WNlVxyXG5cclxuQGFwaU5hbWUgc2F2ZUluc3RhbmNlc1xyXG5cclxuQGFwaUdyb3VwIFdvcmtmbG93XHJcblxyXG5AYXBpUGVybWlzc2lvbiDlt6XkvZzljLrnrqHnkIblkZhcclxuXHJcbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cclxuXHJcbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcclxuXHJcbkBhcGlIZWFkZXJFeGFtcGxlIHtqc29ufSBIZWFkZXItRXhhbXBsZTpcclxuICAgIHtcclxuXHRcdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcclxuXHR9XHJcblxyXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XHJcbiAgICB7XHJcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcclxuXHRcdFwiZGF0YVwiOiB7aW5zdGFuY2V9XHJcblx0fVxyXG4jIyNcclxuSnNvblJvdXRlcy5hZGQgJ3B1dCcsICcvYXBpL3dvcmtmbG93L29wZW4vc2F2ZS86aW5zX2lkJywgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0aW5zX2lkID0gcmVxLnBhcmFtcy5pbnNfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWRcclxuXHJcblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiBub3QgY3VycmVudF91c2VyX2luZm9cclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdHZhbHVlcyA9IHJlcS5ib2R5XHJcblxyXG5cdFx0aWYgbm90IHZhbHVlc1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHZhbHVlcycpXHJcblxyXG5cdFx0Y3VycmVudF90cmFjZSA9IG51bGxcclxuXHRcdHNldE9iaiA9IG5ldyBPYmplY3RcclxuXHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpXHJcblx0XHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblxyXG5cdFx0Xy5lYWNoIGluc3RhbmNlLnRyYWNlcywgKHQpLT5cclxuXHRcdFx0aWYgdC5pc19maW5pc2hlZCBpc250IHRydWVcclxuXHRcdFx0XHRjdXJyZW50X3RyYWNlID0gdFxyXG5cclxuXHRcdGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgY3VycmVudF90cmFjZS5zdGVwKVxyXG5cclxuXHRcdGlmIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXMgXCJjb3VudGVyU2lnblwiXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+S8muetvuatpemqpOS4jeiDveS/ruaUueihqOWNleWAvCcpXHJcblxyXG5cdFx0Xy5lYWNoIGN1cnJlbnRfdHJhY2UuYXBwcm92ZXMsIChhKS0+XHJcblx0XHRcdGlmIGEuaXNfZmluaXNoZWQgaXNudCB0cnVlIGFuZCBhLnR5cGUgaXNudCBcImNjXCJcclxuXHRcdFx0XHRhLnZhbHVlcyA9IHZhbHVlc1xyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlXHJcblx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGN1cnJlbnRfdHJhY2UuYXBwcm92ZXNcclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlIHtcclxuXHRcdFx0X2lkOiBpbnNfaWRcclxuXHRcdFx0J3RyYWNlcy5faWQnOiBjdXJyZW50X3RyYWNlLl9pZFxyXG5cdFx0fSwgJHNldDogc2V0T2JqXHJcblxyXG5cdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxyXG5cclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3VsdH1cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJcbi8qXG5AYXBpIHtwdXR9IC9hcGkvd29ya2Zsb3cvb3Blbi9zYXZlLzppbnNfaWQg5pqC5a2Y55Sz6K+35Y2VXG5cbkBhcGlOYW1lIHNhdmVJbnN0YW5jZXNcblxuQGFwaUdyb3VwIFdvcmtmbG93XG5cbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxuXG5AYXBpUGFyYW0ge1N0cmluZ30gYWNjZXNzX3Rva2VuIFVzZXIgQVBJIFRva2VuXG5cbkBhcGlIZWFkZXIge1N0cmluZ30gWC1TcGFjZS1JZFx05bel5L2c5Yy6SWRcblxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxuICAgIHtcblx0XHRcIlgtU3BhY2UtSWRcIjogXCJ3c3cxcmUxMlRkZVAyMjNzQ1wiXG5cdH1cblxuQGFwaVN1Y2Nlc3NFeGFtcGxlIHtqc29ufSBTdWNjZXNzLVJlc3BvbnNlOlxuICAgIHtcblx0XHRcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcblx0XHRcImRhdGFcIjoge2luc3RhbmNlfVxuXHR9XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwdXQnLCAnL2FwaS93b3JrZmxvdy9vcGVuL3NhdmUvOmluc19pZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3N0ZXAsIGN1cnJlbnRfdHJhY2UsIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZsb3csIGluc19pZCwgaW5zdGFuY2UsIHJlc3VsdCwgc2V0T2JqLCBzcGFjZV9pZCwgdmFsdWVzO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIHZhbHVlcyA9IHJlcS5ib2R5O1xuICAgIGlmICghdmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHZhbHVlcycpO1xuICAgIH1cbiAgICBjdXJyZW50X3RyYWNlID0gbnVsbDtcbiAgICBzZXRPYmogPSBuZXcgT2JqZWN0O1xuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zdGFuY2UuZmxvdyk7XG4gICAgXy5lYWNoKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgaWYgKHQuaXNfZmluaXNoZWQgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfdHJhY2UgPSB0O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnN0YW5jZSwgZmxvdywgY3VycmVudF90cmFjZS5zdGVwKTtcbiAgICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJjb3VudGVyU2lnblwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfkvJrnrb7mraXpqqTkuI3og73kv67mlLnooajljZXlgLwnKTtcbiAgICB9XG4gICAgXy5lYWNoKGN1cnJlbnRfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIGlmIChhLmlzX2ZpbmlzaGVkICE9PSB0cnVlICYmIGEudHlwZSAhPT0gXCJjY1wiKSB7XG4gICAgICAgIHJldHVybiBhLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZTtcbiAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlc1wiXSA9IGN1cnJlbnRfdHJhY2UuYXBwcm92ZXM7XG4gICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICBfaWQ6IGluc19pZCxcbiAgICAgICd0cmFjZXMuX2lkJzogY3VycmVudF90cmFjZS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiBzZXRPYmpcbiAgICB9KTtcbiAgICByZXN1bHQgPSBuZXcgT2JqZWN0O1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiIyMjXHJcbkBhcGkge3Bvc3R9IC9hcGkvd29ya2Zsb3cvb3Blbi9nZXRieXN0ZXBuYW1lIOagueaNruatpemqpOWQjeensOiOt+WPlueUs+ivt+WNlVxyXG5cclxuQGFwaU5hbWUgZ2V0SW5zdGFuY2VCeVN0ZXBOYW1lXHJcblxyXG5AYXBpR3JvdXAgV29ya2Zsb3dcclxuXHJcbkBhcGlQZXJtaXNzaW9uIOW3peS9nOWMuueuoeeQhuWRmFxyXG5cclxuQGFwaVBhcmFtIHtTdHJpbmd9IGFjY2Vzc190b2tlbiBVc2VyIEFQSSBUb2tlblxyXG5cclxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxyXG5cclxuQGFwaUhlYWRlckV4YW1wbGUge2pzb259IEhlYWRlci1FeGFtcGxlOlxyXG57XHJcblx0XCJYLVNwYWNlLUlkXCI6IFwid3N3MXJlMTJUZGVQMjIzc0NcIlxyXG59XHJcblxyXG5AYXBpUGFyYW1FeGFtcGxlIHtqc29ufSBSZXF1ZXN0IFBheWxvYWQ6XHJcbntcclxuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcclxuICAgIFwic3RlcG5hbWVcIjog5q2l6aqk5ZCN56ewXHJcbn1cclxuXHJcbkBhcGlTdWNjZXNzRXhhbXBsZSB7anNvbn0gU3VjY2Vzcy1SZXNwb25zZTpcclxue1xyXG5cdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxyXG5cdFwiZGF0YVwiOiBbXHJcblx0XHR7XHJcblx0XHRcdGluc3RhbmNlXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpbnN0YW5jZVxyXG5cdFx0fVxyXG5cdF1cclxufVxyXG4jIyNcclxuSnNvblJvdXRlcy5hZGQgJ3Bvc3QnLCAnL2FwaS93b3JrZmxvdy9vcGVuL2dldGJ5c3RlcG5hbWUnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblxyXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJylcclxuXHJcblx0XHQjIOagoemqjHNwYWNl5piv5ZCm5a2Y5ZyoXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKVxyXG5cdFx0IyDmoKHpqozlvZPliY3nmbvlvZXnlKjmiLfmmK/lkKbmmK9zcGFjZeeahOeuoeeQhuWRmFxyXG5cdFx0dXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRoYXNoRGF0YSA9IHJlcS5ib2R5XHJcblx0XHRzdGVwbmFtZSA9IGhhc2hEYXRhW1wic3RlcG5hbWVcIl1cclxuXHRcdGZsb3cgPSBoYXNoRGF0YVtcImZsb3dcIl1cclxuXHJcblx0XHRpZiBub3Qgc3RlcG5hbWVcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBzdGVwbmFtZScpXHJcblxyXG5cdFx0aWYgbm90IGZsb3dcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBmbG93JylcclxuXHJcblx0XHQjIOWOu+aOiXtmaWVsZHM6IHtpbmJveF91ZXJzOiAwLCBjY191c2VyczogMCwgb3V0Ym94X3VzZXJzOiAwLCB0cmFjZXM6IDAsIGF0dGFjaG1lbnRzOiAwfVxyXG5cdFx0aW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQoe3NwYWNlOiBzcGFjZV9pZCwgZmxvdzogZmxvdywgc3RhdGU6J3BlbmRpbmcnLCB0cmFjZXM6eyRlbGVtTWF0Y2g6IHtpc19maW5pc2hlZDogZmFsc2UsIG5hbWU6IHN0ZXBuYW1lfX19LCB7ZmllbGRzOiB7aW5ib3hfdWVyczogMCwgY2NfdXNlcnM6IDAsIG91dGJveF91c2VyczogMCwgYXR0YWNobWVudHM6IDAsIHRyYWNlczogMH19KS5mZXRjaCgpXHJcblxyXG5cdFx0aW5zdGFuY2VzLmZvckVhY2ggKGluc3RhbmNlKS0+XHJcblx0XHRcdGluc3RhbmNlLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZS5faWQsJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyRuZTogdHJ1ZX19LCB7ZmllbGRzOiB7Y29waWVzOiAwfX0pLmZldGNoKClcclxuXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBkYXRhOiBpbnN0YW5jZXN9XHJcblx0Y2F0Y2ggZVxyXG5cdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0ZGF0YTogeyBlcnJvcnM6IFt7ZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2V9XX1cclxuIiwiXG4vKlxuQGFwaSB7cG9zdH0gL2FwaS93b3JrZmxvdy9vcGVuL2dldGJ5c3RlcG5hbWUg5qC55o2u5q2l6aqk5ZCN56ew6I635Y+W55Sz6K+35Y2VXG5cbkBhcGlOYW1lIGdldEluc3RhbmNlQnlTdGVwTmFtZVxuXG5AYXBpR3JvdXAgV29ya2Zsb3dcblxuQGFwaVBlcm1pc3Npb24g5bel5L2c5Yy6566h55CG5ZGYXG5cbkBhcGlQYXJhbSB7U3RyaW5nfSBhY2Nlc3NfdG9rZW4gVXNlciBBUEkgVG9rZW5cblxuQGFwaUhlYWRlciB7U3RyaW5nfSBYLVNwYWNlLUlkXHTlt6XkvZzljLpJZFxuXG5AYXBpSGVhZGVyRXhhbXBsZSB7anNvbn0gSGVhZGVyLUV4YW1wbGU6XG57XG5cdFwiWC1TcGFjZS1JZFwiOiBcIndzdzFyZTEyVGRlUDIyM3NDXCJcbn1cblxuQGFwaVBhcmFtRXhhbXBsZSB7anNvbn0gUmVxdWVzdCBQYXlsb2FkOlxue1xuICAgIFwiZmxvd1wiOiDmtYHnqItJZCxcbiAgICBcInN0ZXBuYW1lXCI6IOatpemqpOWQjeensFxufVxuXG5AYXBpU3VjY2Vzc0V4YW1wbGUge2pzb259IFN1Y2Nlc3MtUmVzcG9uc2U6XG57XG5cdFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuXHRcImRhdGFcIjogW1xuXHRcdHtcblx0XHRcdGluc3RhbmNlXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRpbnN0YW5jZVxuXHRcdH1cblx0XVxufVxuICovXG5Kc29uUm91dGVzLmFkZCgncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vZ2V0YnlzdGVwbmFtZScsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBmbG93LCBoYXNoRGF0YSwgaW5zdGFuY2VzLCBzcGFjZV9pZCwgc3RlcG5hbWU7XG4gIHRyeSB7XG4gICAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWQ7XG4gICAgc3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddO1xuICAgIGlmICghc3BhY2VfaWQpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKTtcbiAgICB9XG4gICAgY3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcik7XG4gICAgaWYgKCFjdXJyZW50X3VzZXJfaW5mbykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keTtcbiAgICBzdGVwbmFtZSA9IGhhc2hEYXRhW1wic3RlcG5hbWVcIl07XG4gICAgZmxvdyA9IGhhc2hEYXRhW1wiZmxvd1wiXTtcbiAgICBpZiAoIXN0ZXBuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIHN0ZXBuYW1lJyk7XG4gICAgfVxuICAgIGlmICghZmxvdykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBmbG93Jyk7XG4gICAgfVxuICAgIGluc3RhbmNlcyA9IGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIGZsb3c6IGZsb3csXG4gICAgICBzdGF0ZTogJ3BlbmRpbmcnLFxuICAgICAgdHJhY2VzOiB7XG4gICAgICAgICRlbGVtTWF0Y2g6IHtcbiAgICAgICAgICBpc19maW5pc2hlZDogZmFsc2UsXG4gICAgICAgICAgbmFtZTogc3RlcG5hbWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBpbmJveF91ZXJzOiAwLFxuICAgICAgICBjY191c2VyczogMCxcbiAgICAgICAgb3V0Ym94X3VzZXJzOiAwLFxuICAgICAgICBhdHRhY2htZW50czogMCxcbiAgICAgICAgdHJhY2VzOiAwXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLmF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHtcbiAgICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zdGFuY2UuX2lkLFxuICAgICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG4gICAgICAgIFwibWV0YWRhdGEuaXNfcHJpdmF0ZVwiOiB7XG4gICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgY29waWVzOiAwXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgZGF0YTogaW5zdGFuY2VzXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4iLCIjIyNcclxuQ29udGVudC1UeXBl77yaYXBwbGljYXRpb24vanNvblxyXG5mb3JtLWRhdGEg5qC85byPOlxyXG5mZCA9IG5ldyBGb3JtRGF0YTtcclxuZmQuYXBwZW5kKFwiZmlsZVwiLCBmaWxlKTtcclxuXHJcbmZkLmFwcGVuZChcImlzX3ByaXZhdGVcIiwgZmFsc2UpO1xyXG5cclxuaWYgKGlzQWRkVmVyc2lvbikge1xyXG5cdGZkLmFwcGVuZChcImlzQWRkVmVyc2lvblwiLCBpc0FkZFZlcnNpb24pO1xyXG5cdGZkLmFwcGVuZChcInBhcmVudFwiLCBhdHRhY2hfcGFyZW50X2lkKTtcclxufVxyXG5cclxuaWYgKGlzTWFpbkF0dGFjaCkge1xyXG5cdGZkLmFwcGVuZChcIm1haW5cIiwgdHJ1ZSk7XHJcbn1cclxuIyMjXHJcblxyXG5Kc29uUm91dGVzLmFkZCAncG9zdCcsICcvYXBpL3dvcmtmbG93L29wZW4vY2ZzLzppbnNfaWQnLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZFxyXG5cclxuXHRcdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRcdHJldHVybiA7XHJcblxyXG5cdFx0Y3VycmVudF91c2VyID0gcmVxLnVzZXJJZFxyXG5cclxuXHRcdHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXVxyXG5cclxuXHRcdGlmIG5vdCBzcGFjZV9pZFxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJylcclxuXHJcblx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKVxyXG5cclxuXHRcdGlmIG5vdCBjdXJyZW50X3VzZXJfaW5mb1xyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpXHJcblxyXG5cdFx0aW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc19pZClcclxuXHJcblx0XHRpZiBpbnN0YW5jZS5zdGF0ZSBpc250IFwiZHJhZnRcIlxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfnlLPor7fljZXojYnnqL/nirbmgIHml7bmiY3og73kuIrkvKAnKVxyXG5cclxuXHRcdGFwcHJvdmVfaWQgPSBpbnN0YW5jZS50cmFjZXNbMF0uYXBwcm92ZXNbMF0uX2lkXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0SnNvblJvdXRlcy5wYXJzZUZpbGVzIHJlcSwgcmVzLCAoKS0+XHJcblx0XHRcdGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzXHJcblxyXG5cdFx0XHRpZiByZXEuZmlsZXMgYW5kIHJlcS5maWxlc1swXVxyXG5cdFx0XHRcdCMg6ZmE5Lu25LiK5Lyg5o6l5Y+j77yM6ZmQ5Yi26ZmE5Lu25aSn5bCP77yM5pyA5aSn5Li6MTAwTVxyXG5cdFx0XHRcdGlmIHJlcS5maWxlc1swXS5kYXRhLmxlbmd0aCA+ICgxMDAqMTAyNCoxMDI0KVxyXG5cdFx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdFx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogXCLotoXov4fkuIrkvKDpmYTku7blpKflsI/pmZDliLYoMTAwTSlcIn1dfVxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRcdG5ld0ZpbGUgPSBuZXcgRlMuRmlsZSgpO1xyXG5cdFx0XHRcdG5ld0ZpbGUuYXR0YWNoRGF0YSByZXEuZmlsZXNbMF0uZGF0YSwge3R5cGU6IHJlcS5maWxlc1swXS5taW1lVHlwZX0sIChlcnIpIC0+XHJcblx0XHRcdFx0XHRmaWxlbmFtZSA9IHJlcS5maWxlc1swXS5maWxlbmFtZVxyXG5cclxuXHRcdFx0XHRcdGlmIFtcImltYWdlLmpwZ1wiLCBcImltYWdlLmdpZlwiLCBcImltYWdlLmpwZWdcIiwgXCJpbWFnZS5wbmdcIl0uaW5jbHVkZXMoZmlsZW5hbWUudG9Mb3dlckNhc2UoKSlcclxuXHRcdFx0XHRcdFx0ZmlsZW5hbWUgPSBcImltYWdlLVwiICsgbW9tZW50KG5ldyBEYXRlKCkpLmZvcm1hdCgnWVlZWU1NRERISG1tc3MnKSArIFwiLlwiICsgZmlsZW5hbWUuc3BsaXQoJy4nKS5wb3AoKVxyXG5cclxuXHRcdFx0XHRcdGJvZHkgPSByZXEuYm9keVxyXG5cclxuXHRcdFx0XHRcdGJvZHlbJ293bmVyJ10gPSBpbnN0YW5jZS5zdWJtaXR0ZXJcclxuXHRcdFx0XHRcdGJvZHlbJ293bmVyX25hbWUnXSA9IGluc3RhbmNlLnN1Ym1pdHRlcl9uYW1lXHJcblx0XHRcdFx0XHRib2R5WydzcGFjZSddID0gc3BhY2VfaWRcclxuXHRcdFx0XHRcdGJvZHlbJ2luc3RhbmNlJ10gPSBpbnNfaWRcclxuXHRcdFx0XHRcdGJvZHlbJ2FwcHJvdmUnXSA9IGFwcHJvdmVfaWRcclxuXHJcblx0XHRcdFx0XHR0cnlcclxuXHRcdFx0XHRcdFx0aWYgYm9keSAmJiAoYm9keVsndXBsb2FkX2Zyb20nXSBpcyBcIklFXCIgb3IgYm9keVsndXBsb2FkX2Zyb20nXSBpcyBcIm5vZGVcIilcclxuXHRcdFx0XHRcdFx0XHRmaWxlbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChmaWxlbmFtZSlcclxuXHRcdFx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihmaWxlbmFtZSlcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciBlXHJcblx0XHRcdFx0XHRcdGZpbGVuYW1lID0gZmlsZW5hbWUucmVwbGFjZSgvJS9nLCBcIi1cIilcclxuXHJcblx0XHRcdFx0XHRuZXdGaWxlLm5hbWUoZmlsZW5hbWUpXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGlmIGJvZHkgJiYgYm9keVsnb3duZXInXSAmJiBib2R5Wydvd25lcl9uYW1lJ10gJiYgYm9keVsnc3BhY2UnXSAmJiBib2R5WydpbnN0YW5jZSddICAmJiBib2R5WydhcHByb3ZlJ11cclxuXHRcdFx0XHRcdFx0cGFyZW50ID0gJydcclxuXHRcdFx0XHRcdFx0bWV0YWRhdGEgPSB7b3duZXI6Ym9keVsnb3duZXInXSwgb3duZXJfbmFtZTpib2R5Wydvd25lcl9uYW1lJ10sIHNwYWNlOmJvZHlbJ3NwYWNlJ10sIGluc3RhbmNlOmJvZHlbJ2luc3RhbmNlJ10sIGFwcHJvdmU6IGJvZHlbJ2FwcHJvdmUnXSwgY3VycmVudDogdHJ1ZX1cclxuXHJcblx0XHRcdFx0XHRcdGlmIGJvZHlbXCJpc19wcml2YXRlXCJdICYmIGJvZHlbXCJpc19wcml2YXRlXCJdLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gXCJ0cnVlXCJcclxuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5pc19wcml2YXRlID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0bWV0YWRhdGEuaXNfcHJpdmF0ZSA9IGZhbHNlXHJcblxyXG5cdFx0XHRcdFx0XHRpZiBib2R5WydtYWluJ10gPT0gXCJ0cnVlXCJcclxuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5tYWluID0gdHJ1ZVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgYm9keVsnaXNBZGRWZXJzaW9uJ10gJiYgYm9keVsncGFyZW50J11cclxuXHRcdFx0XHRcdFx0XHRwYXJlbnQgPSBib2R5WydwYXJlbnQnXVxyXG5cdFx0XHRcdFx0XHQjIGVsc2VcclxuXHRcdFx0XHRcdFx0IyAgIGNvbGxlY3Rpb24uZmluZCh7J21ldGFkYXRhLmluc3RhbmNlJzogYm9keVsnaW5zdGFuY2UnXSwgJ21ldGFkYXRhLmN1cnJlbnQnIDogdHJ1ZX0pLmZvckVhY2ggKGMpIC0+XHJcblx0XHRcdFx0XHRcdCMgICAgIGlmIGMubmFtZSgpID09IGZpbGVuYW1lXHJcblx0XHRcdFx0XHRcdCMgICAgICAgcGFyZW50ID0gYy5tZXRhZGF0YS5wYXJlbnRcclxuXHJcblx0XHRcdFx0XHRcdGlmIHBhcmVudFxyXG5cdFx0XHRcdFx0XHRcdHIgPSBjb2xsZWN0aW9uLnVwZGF0ZSh7J21ldGFkYXRhLnBhcmVudCc6IHBhcmVudCwgJ21ldGFkYXRhLmN1cnJlbnQnIDogdHJ1ZX0sIHskdW5zZXQgOiB7J21ldGFkYXRhLmN1cnJlbnQnIDogJyd9fSlcclxuXHRcdFx0XHRcdFx0XHRpZiByXHJcblx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YS5wYXJlbnQgPSBwYXJlbnRcclxuXHRcdFx0XHRcdFx0XHRcdGlmIGJvZHlbJ2xvY2tlZF9ieSddICYmIGJvZHlbJ2xvY2tlZF9ieV9uYW1lJ11cclxuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGEubG9ja2VkX2J5ID0gYm9keVsnbG9ja2VkX2J5J11cclxuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGEubG9ja2VkX2J5X25hbWUgPSBib2R5Wydsb2NrZWRfYnlfbmFtZSddXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0bmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhXHJcblx0XHRcdFx0XHRcdFx0XHRmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQgbmV3RmlsZVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdCMg5Yig6Zmk5ZCM5LiA5Liq55Sz6K+35Y2V5ZCM5LiA5Liq5q2l6aqk5ZCM5LiA5Liq5Lq65LiK5Lyg55qE6YeN5aSN55qE5paH5Lu2XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBib2R5W1wib3ZlcndyaXRlXCJdICYmIGJvZHlbXCJvdmVyd3JpdGVcIl0udG9Mb2NhbGVMb3dlckNhc2UoKSA9PSBcInRydWVcIlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb2xsZWN0aW9uLnJlbW92ZSh7J21ldGFkYXRhLmluc3RhbmNlJzogYm9keVsnaW5zdGFuY2UnXSwgJ21ldGFkYXRhLnBhcmVudCc6IHBhcmVudCwgJ21ldGFkYXRhLm93bmVyJzogYm9keVsnb3duZXInXSwgJ21ldGFkYXRhLmFwcHJvdmUnOiBib2R5WydhcHByb3ZlJ10sICdtZXRhZGF0YS5jdXJyZW50JzogeyRuZTogdHJ1ZX19KVxyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0bmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhXHJcblx0XHRcdFx0XHRcdFx0ZmlsZU9iaiA9IGNvbGxlY3Rpb24uaW5zZXJ0IG5ld0ZpbGVcclxuXHRcdFx0XHRcdFx0XHRmaWxlT2JqLnVwZGF0ZSh7JHNldDogeydtZXRhZGF0YS5wYXJlbnQnIDogZmlsZU9iai5faWR9fSlcclxuXHJcblx0XHRcdFx0XHQjIOWFvOWuueiAgeeJiOacrFxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQgbmV3RmlsZVxyXG5cclxuXHRcdFx0XHRcdHNpemUgPSBmaWxlT2JqLm9yaWdpbmFsLnNpemVcclxuXHRcdFx0XHRcdGlmICFzaXplXHJcblx0XHRcdFx0XHRcdHNpemUgPSAxMDI0XHJcblxyXG5cdFx0XHRcdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxyXG5cdFx0XHRcdFx0cmVzdWx0ID1cclxuXHRcdFx0XHRcdFx0YXR0YWNoX2lkOiBmaWxlT2JqLl9pZCxcclxuXHRcdFx0XHRcdFx0c2l6ZTogc2l6ZVxyXG5cclxuXHRcdFx0XHRcdHJlcy5zZXRIZWFkZXIoXCJ4LWFtei12ZXJzaW9uLWlkXCIsZmlsZU9iai5faWQpO1xyXG5cclxuXHRcdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRcdFx0XHRkYXRhOiB7IHN0YXR1czogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3VsdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0XHRjb2RlOiAyMDBcclxuXHRcdFx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogXCJuZWVkIGZpbGVcIn1dfVxyXG5cdFx0XHRcdHJldHVyblxyXG5cclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG5cclxuSnNvblJvdXRlcy5hZGQgXCJkZWxldGVcIiwgXCIvYXBpL3dvcmtmbG93L29wZW4vY2ZzLzppbnNfaWRcIiwgIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHR0cnlcclxuXHRcdGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkXHJcblxyXG5cdFx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdFx0cmV0dXJuIDtcclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSByZXEudXNlcklkXHJcblxyXG5cdFx0c3BhY2VfaWQgPSByZXEuaGVhZGVyc1sneC1zcGFjZS1pZCddXHJcblxyXG5cdFx0aWYgbm90IHNwYWNlX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ25lZWQgaGVhZGVyIFhfU3BhY2VfSWQnKVxyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aWYgbm90IGN1cnJlbnRfdXNlcl9pbmZvXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJylcclxuXHJcblx0XHRpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKVxyXG5cclxuXHRcdGlmIGluc3RhbmNlLnN0YXRlIGlzbnQgXCJkcmFmdFwiXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+eUs+ivt+WNleiNieeov+eKtuaAgeaXtuaJjeiDveWIoOmZpOmZhOS7ticpXHJcblxyXG5cdFx0IyDmoKHpqoxzcGFjZeaYr+WQpuWtmOWcqFxyXG5cdFx0dXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZClcclxuXHRcdCMg5qCh6aqM5b2T5YmN55m75b2V55So5oi35piv5ZCm5pivc3BhY2XnmoTnrqHnkIblkZhcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpXHJcblxyXG5cdFx0aGFzaERhdGEgPSByZXEuYm9keSB8fCB7fVxyXG5cdFx0YXR0YWNoX2lkID0gaGFzaERhdGFbXCJhdHRhY2hfaWRcIl1cclxuXHJcblx0XHRpZiBub3QgYXR0YWNoX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCBhdHRhY2hfaWQnKVxyXG5cclxuXHRcdGNvbGxlY3Rpb24gPSBjZnMuaW5zdGFuY2VzXHJcblxyXG5cdFx0ZmlsZSA9IGNvbGxlY3Rpb24uZmluZE9uZSh7IF9pZDogYXR0YWNoX2lkLCAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnNfaWR9KVxyXG5cdFx0aWYgZmlsZVxyXG5cdFx0XHRmaWxlLnJlbW92ZSgpXHJcblx0XHRlbHNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+atpOmZhOS7tuS4jeWxnuS6juatpOeUs+ivt+WNle+8jOaIluW3suiiq+WIoOmZpCcpXHJcblxyXG5cdFx0cmVzdWx0ID0gbmV3IE9iamVjdFxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzdWx0fVxyXG5cdGNhdGNoIGVcclxuXHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogMjAwXHJcblx0XHRcdGRhdGE6IHsgZXJyb3JzOiBbe2Vycm9yTWVzc2FnZTogZS5tZXNzYWdlfV19XHJcblxyXG5Kc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmF0dGFjaF9pZFwiLCAgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG5cdFx0YXR0YWNoX2lkID0gcmVxLnBhcmFtcy5hdHRhY2hfaWRcclxuXHJcblx0XHRpZiAhU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKVxyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlciA9IHJlcS51c2VySWRcclxuXHJcblx0XHRzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ11cclxuXHJcblx0XHRpZiBub3Qgc3BhY2VfaWRcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpXHJcblxyXG5cdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcclxuXHJcblx0XHRpZiBub3QgY3VycmVudF91c2VyX2luZm9cclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIHVzZXInKVxyXG5cclxuXHRcdCMg5qCh6aqMc3BhY2XmmK/lkKblrZjlnKhcclxuXHRcdHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpXHJcblx0XHQjIOagoemqjOW9k+WJjeeZu+W9leeUqOaIt+aYr+WQpuaYr3NwYWNl55qE566h55CG5ZGYXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKVxyXG5cclxuXHRcdHJlcy5zdGF0dXNDb2RlID0gMzAyXHJcblx0XHRyZXMuc2V0SGVhZGVyIFwiTG9jYXRpb25cIiwgU3RlZWRvcy5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9pbnN0YW5jZXMvXCIpICsgYXR0YWNoX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiXHJcblx0XHRyZXMuZW5kKClcclxuXHRjYXRjaCBlXHJcblx0XHRjb25zb2xlLmVycm9yIGUuc3RhY2tcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDIwMFxyXG5cdFx0XHRkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dfVxyXG4iLCJcbi8qXG5Db250ZW50LVR5cGXvvJphcHBsaWNhdGlvbi9qc29uXG5mb3JtLWRhdGEg5qC85byPOlxuZmQgPSBuZXcgRm9ybURhdGE7XG5mZC5hcHBlbmQoXCJmaWxlXCIsIGZpbGUpO1xuXG5mZC5hcHBlbmQoXCJpc19wcml2YXRlXCIsIGZhbHNlKTtcblxuaWYgKGlzQWRkVmVyc2lvbikge1xuXHRmZC5hcHBlbmQoXCJpc0FkZFZlcnNpb25cIiwgaXNBZGRWZXJzaW9uKTtcblx0ZmQuYXBwZW5kKFwicGFyZW50XCIsIGF0dGFjaF9wYXJlbnRfaWQpO1xufVxuXG5pZiAoaXNNYWluQXR0YWNoKSB7XG5cdGZkLmFwcGVuZChcIm1haW5cIiwgdHJ1ZSk7XG59XG4gKi9cbkpzb25Sb3V0ZXMuYWRkKCdwb3N0JywgJy9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmluc19pZCcsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhcHByb3ZlX2lkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBpbnNfaWQsIGluc3RhbmNlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBpbnNfaWQgPSByZXEucGFyYW1zLmluc19pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICBpbnN0YW5jZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2UoaW5zX2lkKTtcbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUgIT09IFwiZHJhZnRcIikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAn55Sz6K+35Y2V6I2J56i/54q25oCB5pe25omN6IO95LiK5LygJyk7XG4gICAgfVxuICAgIGFwcHJvdmVfaWQgPSBpbnN0YW5jZS50cmFjZXNbMF0uYXBwcm92ZXNbMF0uX2lkO1xuICAgIHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2Uoc3BhY2VfaWQpO1xuICAgIHV1Zmxvd01hbmFnZXIuaXNTcGFjZUFkbWluKHNwYWNlX2lkLCBjdXJyZW50X3VzZXIpO1xuICAgIHJldHVybiBKc29uUm91dGVzLnBhcnNlRmlsZXMocmVxLCByZXMsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbGxlY3Rpb24sIG5ld0ZpbGU7XG4gICAgICBjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlcztcbiAgICAgIGlmIChyZXEuZmlsZXMgJiYgcmVxLmZpbGVzWzBdKSB7XG4gICAgICAgIGlmIChyZXEuZmlsZXNbMF0uZGF0YS5sZW5ndGggPiAoMTAwICogMTAyNCAqIDEwMjQpKSB7XG4gICAgICAgICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwi6LaF6L+H5LiK5Lyg6ZmE5Lu25aSn5bCP6ZmQ5Yi2KDEwME0pXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbmV3RmlsZSA9IG5ldyBGUy5GaWxlKCk7XG4gICAgICAgIHJldHVybiBuZXdGaWxlLmF0dGFjaERhdGEocmVxLmZpbGVzWzBdLmRhdGEsIHtcbiAgICAgICAgICB0eXBlOiByZXEuZmlsZXNbMF0ubWltZVR5cGVcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgdmFyIGJvZHksIGUsIGZpbGVPYmosIGZpbGVuYW1lLCBtZXRhZGF0YSwgcGFyZW50LCByLCByZXN1bHQsIHNpemU7XG4gICAgICAgICAgZmlsZW5hbWUgPSByZXEuZmlsZXNbMF0uZmlsZW5hbWU7XG4gICAgICAgICAgaWYgKFtcImltYWdlLmpwZ1wiLCBcImltYWdlLmdpZlwiLCBcImltYWdlLmpwZWdcIiwgXCJpbWFnZS5wbmdcIl0uaW5jbHVkZXMoZmlsZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGZpbGVuYW1lID0gXCJpbWFnZS1cIiArIG1vbWVudChuZXcgRGF0ZSgpKS5mb3JtYXQoJ1lZWVlNTURESEhtbXNzJykgKyBcIi5cIiArIGZpbGVuYW1lLnNwbGl0KCcuJykucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJvZHkgPSByZXEuYm9keTtcbiAgICAgICAgICBib2R5Wydvd25lciddID0gaW5zdGFuY2Uuc3VibWl0dGVyO1xuICAgICAgICAgIGJvZHlbJ293bmVyX25hbWUnXSA9IGluc3RhbmNlLnN1Ym1pdHRlcl9uYW1lO1xuICAgICAgICAgIGJvZHlbJ3NwYWNlJ10gPSBzcGFjZV9pZDtcbiAgICAgICAgICBib2R5WydpbnN0YW5jZSddID0gaW5zX2lkO1xuICAgICAgICAgIGJvZHlbJ2FwcHJvdmUnXSA9IGFwcHJvdmVfaWQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChib2R5ICYmIChib2R5Wyd1cGxvYWRfZnJvbSddID09PSBcIklFXCIgfHwgYm9keVsndXBsb2FkX2Zyb20nXSA9PT0gXCJub2RlXCIpKSB7XG4gICAgICAgICAgICAgIGZpbGVuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmaWxlbmFtZSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC8lL2csIFwiLVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3RmlsZS5uYW1lKGZpbGVuYW1lKTtcbiAgICAgICAgICBpZiAoYm9keSAmJiBib2R5Wydvd25lciddICYmIGJvZHlbJ293bmVyX25hbWUnXSAmJiBib2R5WydzcGFjZSddICYmIGJvZHlbJ2luc3RhbmNlJ10gJiYgYm9keVsnYXBwcm92ZSddKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSAnJztcbiAgICAgICAgICAgIG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICBvd25lcjogYm9keVsnb3duZXInXSxcbiAgICAgICAgICAgICAgb3duZXJfbmFtZTogYm9keVsnb3duZXJfbmFtZSddLFxuICAgICAgICAgICAgICBzcGFjZTogYm9keVsnc3BhY2UnXSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGJvZHlbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICAgIGFwcHJvdmU6IGJvZHlbJ2FwcHJvdmUnXSxcbiAgICAgICAgICAgICAgY3VycmVudDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChib2R5W1wiaXNfcHJpdmF0ZVwiXSAmJiBib2R5W1wiaXNfcHJpdmF0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICBtZXRhZGF0YS5pc19wcml2YXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLmlzX3ByaXZhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib2R5WydtYWluJ10gPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLm1haW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJvZHlbJ2lzQWRkVmVyc2lvbiddICYmIGJvZHlbJ3BhcmVudCddKSB7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGJvZHlbJ3BhcmVudCddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgICByID0gY29sbGVjdGlvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICdtZXRhZGF0YS5wYXJlbnQnOiBwYXJlbnQsXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAkdW5zZXQ6IHtcbiAgICAgICAgICAgICAgICAgICdtZXRhZGF0YS5jdXJyZW50JzogJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAoYm9keVsnbG9ja2VkX2J5J10gJiYgYm9keVsnbG9ja2VkX2J5X25hbWUnXSkge1xuICAgICAgICAgICAgICAgICAgbWV0YWRhdGEubG9ja2VkX2J5ID0gYm9keVsnbG9ja2VkX2J5J107XG4gICAgICAgICAgICAgICAgICBtZXRhZGF0YS5sb2NrZWRfYnlfbmFtZSA9IGJvZHlbJ2xvY2tlZF9ieV9uYW1lJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0ZpbGUubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlbXCJvdmVyd3JpdGVcIl0gJiYgYm9keVtcIm92ZXJ3cml0ZVwiXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbi5yZW1vdmUoe1xuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBib2R5WydpbnN0YW5jZSddLFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEucGFyZW50JzogcGFyZW50LFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEub3duZXInOiBib2R5Wydvd25lciddLFxuICAgICAgICAgICAgICAgICAgICAnbWV0YWRhdGEuYXBwcm92ZSc6IGJvZHlbJ2FwcHJvdmUnXSxcbiAgICAgICAgICAgICAgICAgICAgJ21ldGFkYXRhLmN1cnJlbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgJG5lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3RmlsZS5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgICAgIGZpbGVPYmoudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICAgICAnbWV0YWRhdGEucGFyZW50JzogZmlsZU9iai5faWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWxlT2JqID0gY29sbGVjdGlvbi5pbnNlcnQobmV3RmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpemUgPSBmaWxlT2JqLm9yaWdpbmFsLnNpemU7XG4gICAgICAgICAgaWYgKCFzaXplKSB7XG4gICAgICAgICAgICBzaXplID0gMTAyNDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IE9iamVjdDtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICBhdHRhY2hfaWQ6IGZpbGVPYmouX2lkLFxuICAgICAgICAgICAgc2l6ZTogc2l6ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzLnNldEhlYWRlcihcIngtYW16LXZlcnNpb24taWRcIiwgZmlsZU9iai5faWQpO1xuICAgICAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwibmVlZCBmaWxlXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbkpzb25Sb3V0ZXMuYWRkKFwiZGVsZXRlXCIsIFwiL2FwaS93b3JrZmxvdy9vcGVuL2Nmcy86aW5zX2lkXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhdHRhY2hfaWQsIGNvbGxlY3Rpb24sIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIGUsIGZpbGUsIGhhc2hEYXRhLCBpbnNfaWQsIGluc3RhbmNlLCByZXN1bHQsIHNwYWNlX2lkO1xuICB0cnkge1xuICAgIGluc19pZCA9IHJlcS5wYXJhbXMuaW5zX2lkO1xuICAgIGlmICghU3RlZWRvcy5BUElBdXRoZW50aWNhdGlvbkNoZWNrKHJlcSwgcmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXIgPSByZXEudXNlcklkO1xuICAgIHNwYWNlX2lkID0gcmVxLmhlYWRlcnNbJ3gtc3BhY2UtaWQnXTtcbiAgICBpZiAoIXNwYWNlX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICduZWVkIGhlYWRlciBYX1NwYWNlX0lkJyk7XG4gICAgfVxuICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgIGlmICghY3VycmVudF91c2VyX2luZm8pIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ2NhbiBub3QgZmluZCB1c2VyJyk7XG4gICAgfVxuICAgIGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnNfaWQpO1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gXCJkcmFmdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICfnlLPor7fljZXojYnnqL/nirbmgIHml7bmiY3og73liKDpmaTpmYTku7YnKTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5nZXRTcGFjZShzcGFjZV9pZCk7XG4gICAgdXVmbG93TWFuYWdlci5pc1NwYWNlQWRtaW4oc3BhY2VfaWQsIGN1cnJlbnRfdXNlcik7XG4gICAgaGFzaERhdGEgPSByZXEuYm9keSB8fCB7fTtcbiAgICBhdHRhY2hfaWQgPSBoYXNoRGF0YVtcImF0dGFjaF9pZFwiXTtcbiAgICBpZiAoIWF0dGFjaF9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnY2FuIG5vdCBmaW5kIGF0dGFjaF9pZCcpO1xuICAgIH1cbiAgICBjb2xsZWN0aW9uID0gY2ZzLmluc3RhbmNlcztcbiAgICBmaWxlID0gY29sbGVjdGlvbi5maW5kT25lKHtcbiAgICAgIF9pZDogYXR0YWNoX2lkLFxuICAgICAgJ21ldGFkYXRhLmluc3RhbmNlJzogaW5zX2lkXG4gICAgfSk7XG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIGZpbGUucmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yJywgJ+atpOmZhOS7tuS4jeWxnuS6juatpOeUs+ivt+WNle+8jOaIluW3suiiq+WIoOmZpCcpO1xuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgT2JqZWN0O1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5Kc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvb3Blbi9jZnMvOmF0dGFjaF9pZFwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYXR0YWNoX2lkLCBjdXJyZW50X3VzZXIsIGN1cnJlbnRfdXNlcl9pbmZvLCBlLCBzcGFjZV9pZDtcbiAgdHJ5IHtcbiAgICBhdHRhY2hfaWQgPSByZXEucGFyYW1zLmF0dGFjaF9pZDtcbiAgICBpZiAoIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudF91c2VyID0gcmVxLnVzZXJJZDtcbiAgICBzcGFjZV9pZCA9IHJlcS5oZWFkZXJzWyd4LXNwYWNlLWlkJ107XG4gICAgaWYgKCFzcGFjZV9pZCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3InLCAnbmVlZCBoZWFkZXIgWF9TcGFjZV9JZCcpO1xuICAgIH1cbiAgICBjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyKTtcbiAgICBpZiAoIWN1cnJlbnRfdXNlcl9pbmZvKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvcicsICdjYW4gbm90IGZpbmQgdXNlcicpO1xuICAgIH1cbiAgICB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlKHNwYWNlX2lkKTtcbiAgICB1dWZsb3dNYW5hZ2VyLmlzU3BhY2VBZG1pbihzcGFjZV9pZCwgY3VycmVudF91c2VyKTtcbiAgICByZXMuc3RhdHVzQ29kZSA9IDMwMjtcbiAgICByZXMuc2V0SGVhZGVyKFwiTG9jYXRpb25cIiwgU3RlZWRvcy5hYnNvbHV0ZVVybChcImFwaS9maWxlcy9pbnN0YW5jZXMvXCIpICsgYXR0YWNoX2lkICsgXCI/ZG93bmxvYWQ9dHJ1ZVwiKTtcbiAgICByZXR1cm4gcmVzLmVuZCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9mb3J3YXJkX3JlZmlsbFwiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3lm57loavlrZDooag9PT09PT09PT09XCJcclxuXHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LnN1YlRhYmxlXCIscmVxPy5xdWVyeT8uc3ViVGFibGVcclxuXHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWIhuWPkeWbnuWhq+eahOWIlz09PT09PT09PT1cIlxyXG5cdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8uY29sdW1uXCIscmVxPy5xdWVyeT8uY29sdW1uXHJcblxyXG5cdGNvbHVtbnMgPSByZXE/LnF1ZXJ5Py5jb2x1bW4uc3BsaXQoJzsnKVxyXG5cdGNvbnNvbGUubG9nIFwiY29sdW1uc1wiLGNvbHVtbnNcclxuXHJcblxyXG5cdCMg5YiG5Y+R55qE55Sz6K+35Y2VXHJcblx0Zm9yd2FyZF9pbnMgPSByZXE/LmJvZHk/Lmluc3RhbmNlXHJcblxyXG5cdHN1YlRhYmxlID0gcmVxPy5xdWVyeT8uc3ViVGFibGVcclxuXHJcblx0aWYgZm9yd2FyZF9pbnM/LnN0YXRlID09IFwiY29tcGxldGVkXCIgJiYgZm9yd2FyZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXM/Lmxlbmd0aD4wICYmIHN1YlRhYmxlICYmIGNvbHVtbnNcclxuXHRcdFxyXG5cdFx0IyDliIblj5Hlm57mnaXnmoTlgLxcclxuXHRcdGZvcndhcmRfaW5zX3ZhbHVlcyA9IGZvcndhcmRfaW5zPy52YWx1ZXNcclxuXHJcblx0XHQjICMg5Y6f55Sz6K+35Y2V5a2X5q61XHJcblx0XHRvcmlnaW5hbF9pbnNfaWQgPSBfLmxhc3QgZm9yd2FyZF9pbnM/LmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXNcclxuXHRcdG9yaWdpbmFsX2lucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKG9yaWdpbmFsX2luc19pZClcclxuXHRcdG9yaWdpbmFsX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShvcmlnaW5hbF9pbnM/LmZvcm0pXHJcblxyXG5cdFx0b3JpZ2luYWxfaW5zX2ZpZWxkcyA9IFtdXHJcblx0XHRvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBbXVxyXG5cclxuXHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfaW5zX2Zvcm0/LmN1cnJlbnQ/Ll9pZFwiLG9yaWdpbmFsX2luc19mb3JtPy5jdXJyZW50Py5faWRcclxuXHRcdGNvbnNvbGUubG9nIFwib3JpZ2luYWxfaW5zPy5mb3JtX3ZlcnNpb25cIixvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvblxyXG5cclxuXHRcdCMg5p+l55yL5Y6f55Sz6K+35Y2V5piv5ZCm5pyJ5a+55bqU55qE5a2Q6KGoXHJcblx0XHRpZiBvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvbiA9PSBvcmlnaW5hbF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXHJcblx0XHRcdG9yaWdpbmFsX2luc19maWVsZHMgPSBvcmlnaW5hbF9pbnNfZm9ybS5jdXJyZW50Py5maWVsZHNcclxuXHRcdFx0b3JpZ2luYWxfaW5zX2ZpZWxkcy5mb3JFYWNoIChvcmlnaW5hbF9pbnNfZmllbGQpLT5cclxuXHRcdFx0XHRjb25zb2xlLmxvZyBcIm9yaWdpbmFsX2luc19maWVsZFwiLG9yaWdpbmFsX2luc19maWVsZD8uY29kZVxyXG5cdFx0XHRcdGlmIG9yaWdpbmFsX2luc19maWVsZD8uY29kZSA9PSBzdWJUYWJsZSAmJiBvcmlnaW5hbF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdFx0b3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gb3JpZ2luYWxfaW5zX2ZpZWxkPy5maWVsZHNcclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgb3JpZ2luYWxfaW5zX2Zvcm0/Lmhpc3RvcnlzPy5sZW5ndGggPiAwXHJcblx0XHRcdFx0b3JpZ2luYWxfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaCAob2gpLT5cclxuXHRcdFx0XHRcdGlmIG9yaWdpbmFsX2lucz8uZm9ybV92ZXJzaW9uID09IG9oLl9pZFxyXG5cdFx0XHRcdFx0XHRvcmlnaW5hbF9pbnNfZmllbGRzID0gb2g/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRvcmlnaW5hbF9pbnNfZmllbGRzLmZvckVhY2ggKG9yaWdpbmFsX2luc19maWVsZCktPlxyXG5cdFx0XHRcdFx0XHRcdGlmIG9yaWdpbmFsX2luc19maWVsZD8uY29kZSA9PSBzdWJUYWJsZSAmJiBvcmlnaW5hbF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gb3JpZ2luYWxfaW5zX2ZpZWxkPy5maWVsZHNcclxuXHJcblx0XHRjb25zb2xlLmxvZyBcIm9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkc1wiLG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcz8ubGVuZ3RoXHJcblxyXG5cdFx0aWYgb3JpZ2luYWxfc3VidGFibGVfZmllbGRzXHJcblx0XHRcdCMgIyDmm7TmlrDmraXpqqTnmoTlgLxcclxuXHRcdFx0IyAxLuaJvuWIsOW9k+WJjeeahOatpemqpFxyXG5cdFx0XHQjIDIu5b2T5YmN5q2l6aqk5LitYXBwcm92ZXPkuK3nmoR2YWx1ZXNcclxuXHRcdFx0IyAzLuWcqHZhbHVlc+S4reaJvuWIsOihqOagvFxyXG5cdFx0XHQjIDQu5qC55o2u6KGo5qC855qEZmllbGRz5bGe5oCn77yM5LiA5Liq5Liq55qE6LWL5YC8XHJcblx0XHRcdCMgNS7miorlpI3liLbnmoRwdXNo5Yiw6KGo5qC85pWw57uE55qE5ZCO6Z2iXHJcblx0XHRcdHRyYWNlcyA9IG9yaWdpbmFsX2lucz8udHJhY2VzXHJcblxyXG5cdFx0XHR0cmFjZSA9IHRyYWNlc1t0cmFjZXMubGVuZ3RoLTFdXHJcblxyXG5cdFx0XHRhcHByb3ZlID0gdHJhY2U/LmFwcHJvdmVzWzBdXHJcblxyXG5cdFx0XHR0YWJsZV9kYXRhID0gYXBwcm92ZT8udmFsdWVzW3N1YlRhYmxlXSB8fCBbXVxyXG5cclxuXHRcdFx0cm93X2RhdGEgPSB7fVxyXG5cclxuXHRcdFx0Y29sdW1ucy5mb3JFYWNoIChjb2x1bW4pLT5cclxuXHRcdFx0XHRyb3dfZGF0YVtjb2x1bW5dID0gZm9yd2FyZF9pbnNfdmFsdWVzW2NvbHVtbl0gfHwgXCJcIlxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdGlmIHJvd19kYXRhICYmIHJvd19kYXRhICE9IHt9XHJcblx0XHRcdFx0dGFibGVfZGF0YS5wdXNoIHJvd19kYXRhXHJcblx0XHRcdFx0dHJhY2VzW3RyYWNlcy5sZW5ndGgtMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXSA9IHRhYmxlX2RhdGFcclxuXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgdHJhY2VzW3RyYWNlcy5sZW5ndGgtMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXVxyXG5cclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKG9yaWdpbmFsX2luc19pZCx7XHJcblx0XHRcdFx0XHQkc2V0OntcclxuXHRcdFx0XHRcdFx0J3RyYWNlcyc6dHJhY2VzXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdFx0XHQnc3VjY2Vzcyc6ICflm57loavmiJDlip8nXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdFx0XHQnaW5mbyc6ICflm57loavmlbDmja7kuLrnqbonXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdGVsc2VcclxuXHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0XHQnZXJyb3InOiAn5Y6f55Sz6K+35Y2V5peg55u45YWz5a2Q6KGoJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdGVsc2VcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0J3N1Y2Nlc3MnOiAn55Sz6K+35Y2V5pyq57uT5p2fJ1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2ZvcndhcmRfcmVmaWxsXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhcHByb3ZlLCBjb2x1bW5zLCBmb3J3YXJkX2lucywgZm9yd2FyZF9pbnNfdmFsdWVzLCBvcmlnaW5hbF9pbnMsIG9yaWdpbmFsX2luc19maWVsZHMsIG9yaWdpbmFsX2luc19mb3JtLCBvcmlnaW5hbF9pbnNfaWQsIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCByZWY3LCByZWY4LCByZWY5LCByb3dfZGF0YSwgc3ViVGFibGUsIHRhYmxlX2RhdGEsIHRyYWNlLCB0cmFjZXM7XG4gIGNvbnNvbGUubG9nKFwiPT09PT09PT095Zue5aGr5a2Q6KGoPT09PT09PT09PVwiKTtcbiAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5zdWJUYWJsZVwiLCByZXEgIT0gbnVsbCA/IChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuc3ViVGFibGUgOiB2b2lkIDAgOiB2b2lkIDApO1xuICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWIhuWPkeWbnuWhq+eahOWIlz09PT09PT09PT1cIik7XG4gIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uY29sdW1uXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmNvbHVtbiA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gIGNvbHVtbnMgPSByZXEgIT0gbnVsbCA/IChyZWYyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMi5jb2x1bW4uc3BsaXQoJzsnKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgY29uc29sZS5sb2coXCJjb2x1bW5zXCIsIGNvbHVtbnMpO1xuICBmb3J3YXJkX2lucyA9IHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEuYm9keSkgIT0gbnVsbCA/IHJlZjMuaW5zdGFuY2UgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIHN1YlRhYmxlID0gcmVxICE9IG51bGwgPyAocmVmNCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjQuc3ViVGFibGUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIGlmICgoZm9yd2FyZF9pbnMgIT0gbnVsbCA/IGZvcndhcmRfaW5zLnN0YXRlIDogdm9pZCAwKSA9PT0gXCJjb21wbGV0ZWRcIiAmJiAoZm9yd2FyZF9pbnMgIT0gbnVsbCA/IChyZWY1ID0gZm9yd2FyZF9pbnMuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcykgIT0gbnVsbCA/IHJlZjUubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDAgJiYgc3ViVGFibGUgJiYgY29sdW1ucykge1xuICAgIGZvcndhcmRfaW5zX3ZhbHVlcyA9IGZvcndhcmRfaW5zICE9IG51bGwgPyBmb3J3YXJkX2lucy52YWx1ZXMgOiB2b2lkIDA7XG4gICAgb3JpZ2luYWxfaW5zX2lkID0gXy5sYXN0KGZvcndhcmRfaW5zICE9IG51bGwgPyBmb3J3YXJkX2lucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIDogdm9pZCAwKTtcbiAgICBvcmlnaW5hbF9pbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShvcmlnaW5hbF9pbnNfaWQpO1xuICAgIG9yaWdpbmFsX2luc19mb3JtID0gZGIuZm9ybXMuZmluZE9uZShvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy5mb3JtIDogdm9pZCAwKTtcbiAgICBvcmlnaW5hbF9pbnNfZmllbGRzID0gW107XG4gICAgb3JpZ2luYWxfc3VidGFibGVfZmllbGRzID0gW107XG4gICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXCIsIG9yaWdpbmFsX2luc19mb3JtICE9IG51bGwgPyAocmVmNiA9IG9yaWdpbmFsX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWY2Ll9pZCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9pbnM/LmZvcm1fdmVyc2lvblwiLCBvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApO1xuICAgIGlmICgob3JpZ2luYWxfaW5zICE9IG51bGwgPyBvcmlnaW5hbF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gKG9yaWdpbmFsX2luc19mb3JtICE9IG51bGwgPyAocmVmNyA9IG9yaWdpbmFsX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWY3Ll9pZCA6IHZvaWQgMCA6IHZvaWQgMCkpIHtcbiAgICAgIG9yaWdpbmFsX2luc19maWVsZHMgPSAocmVmOCA9IG9yaWdpbmFsX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWY4LmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgIG9yaWdpbmFsX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihvcmlnaW5hbF9pbnNfZmllbGQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9pbnNfZmllbGRcIiwgb3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCk7XG4gICAgICAgIGlmICgob3JpZ2luYWxfaW5zX2ZpZWxkICE9IG51bGwgPyBvcmlnaW5hbF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IHN1YlRhYmxlICYmIChvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJykge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMgPSBvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKG9yaWdpbmFsX2luc19mb3JtICE9IG51bGwgPyAocmVmOSA9IG9yaWdpbmFsX2luc19mb3JtLmhpc3RvcnlzKSAhPSBudWxsID8gcmVmOS5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICBvcmlnaW5hbF9pbnNfZm9ybS5oaXN0b3J5cy5mb3JFYWNoKGZ1bmN0aW9uKG9oKSB7XG4gICAgICAgICAgaWYgKChvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApID09PSBvaC5faWQpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsX2luc19maWVsZHMgPSBvaCAhPSBudWxsID8gb2guZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihvcmlnaW5hbF9pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgaWYgKChvcmlnaW5hbF9pbnNfZmllbGQgIT0gbnVsbCA/IG9yaWdpbmFsX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gc3ViVGFibGUgJiYgKG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsX3N1YnRhYmxlX2ZpZWxkcyA9IG9yaWdpbmFsX2luc19maWVsZCAhPSBudWxsID8gb3JpZ2luYWxfaW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHNcIiwgb3JpZ2luYWxfc3VidGFibGVfZmllbGRzICE9IG51bGwgPyBvcmlnaW5hbF9zdWJ0YWJsZV9maWVsZHMubGVuZ3RoIDogdm9pZCAwKTtcbiAgICBpZiAob3JpZ2luYWxfc3VidGFibGVfZmllbGRzKSB7XG4gICAgICB0cmFjZXMgPSBvcmlnaW5hbF9pbnMgIT0gbnVsbCA/IG9yaWdpbmFsX2lucy50cmFjZXMgOiB2b2lkIDA7XG4gICAgICB0cmFjZSA9IHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV07XG4gICAgICBhcHByb3ZlID0gdHJhY2UgIT0gbnVsbCA/IHRyYWNlLmFwcHJvdmVzWzBdIDogdm9pZCAwO1xuICAgICAgdGFibGVfZGF0YSA9IChhcHByb3ZlICE9IG51bGwgPyBhcHByb3ZlLnZhbHVlc1tzdWJUYWJsZV0gOiB2b2lkIDApIHx8IFtdO1xuICAgICAgcm93X2RhdGEgPSB7fTtcbiAgICAgIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIHJvd19kYXRhW2NvbHVtbl0gPSBmb3J3YXJkX2luc192YWx1ZXNbY29sdW1uXSB8fCBcIlwiO1xuICAgICAgfSk7XG4gICAgICBpZiAocm93X2RhdGEgJiYgcm93X2RhdGEgIT09IHt9KSB7XG4gICAgICAgIHRhYmxlX2RhdGEucHVzaChyb3dfZGF0YSk7XG4gICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXSA9IHRhYmxlX2RhdGE7XG4gICAgICAgIGNvbnNvbGUubG9nKHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzW3N1YlRhYmxlXSk7XG4gICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUob3JpZ2luYWxfaW5zX2lkLCB7XG4gICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgJ3RyYWNlcyc6IHRyYWNlc1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgJ2luZm8nOiAn5Zue5aGr5pWw5o2u5Li656m6J1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICdlcnJvcic6ICfljp/nlLPor7fljZXml6Dnm7jlhbPlrZDooagnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICAnc3VjY2Vzcyc6ICfnlLPor7fljZXmnKrnu5PmnZ8nXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS93b3JrZmxvdy9mb3J3YXJkX3RhYmxlX3JlZmlsbFwiLCAocmVxLCByZXMsIG5leHQpIC0+XHJcblx0dHJ5XHJcblx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PeWOn+ihqOWtkOihqD09PT09PT09PT1cIlxyXG5cdFx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5vVGFibGVcIixyZXE/LnF1ZXJ5Py5vVGFibGVcclxuXHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT09546w6KGo5a2Q6KGoPT09PT09PT09PVwiXHJcblx0XHRjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LmRUYWJsZVwiLHJlcT8ucXVlcnk/LmRUYWJsZVxyXG5cdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT3ljp/ooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCJcclxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8ub01hdGNoQ29sXCIscmVxPy5xdWVyeT8ub01hdGNoQ29sXHJcblx0XHRjb25zb2xlLmxvZyBcIj09PT09PT09PeeOsOihqOWNleeahOWtkOihqOWMuemFjeWIlz09PT09PT09PT1cIlxyXG5cdFx0Y29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcIixyZXE/LnF1ZXJ5Py5kTWF0Y2hDb2xcclxuXHRcdGNvbnNvbGUubG9nIFwiPT09PT09PT096ZyA6KaB5Zue5aGr55qE5YiXPT09PT09PT09PVwiXHRcclxuXHRcdGNvbnNvbGUubG9nIFwicmVxPy5xdWVyeT8ucmVmaWxsQ29sXCIscmVxPy5xdWVyeT8ucmVmaWxsQ29sXHJcblxyXG5cdFx0IyDliIblj5HnmoTnlLPor7fljZVcclxuXHRcdGRfaW5zID0gcmVxPy5ib2R5Py5pbnN0YW5jZVxyXG5cclxuXHRcdFxyXG5cdFx0aWYgZF9pbnM/LnN0YXRlID09IFwiY29tcGxldGVkXCJcclxuXHRcdFx0aWYgcmVxPy5xdWVyeT8ub1RhYmxlXHJcblx0XHRcdFx0b190YWJsZSA9IHJlcT8ucXVlcnk/Lm9UYWJsZVxyXG5cdFx0XHRcdGlmIHJlcT8ucXVlcnk/LmRUYWJsZVxyXG5cdFx0XHRcdFx0ZF90YWJsZSA9IHJlcT8ucXVlcnk/LmRUYWJsZVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGRfdGFibGUgPSBvX3RhYmxlXHJcblx0XHRcdFx0aWYgcmVxPy5xdWVyeT8uYVRhYmxlXHJcblx0XHRcdFx0XHRhX3RhYmxlID0gcmVxPy5xdWVyeT8uYVRhYmxlXHJcblx0XHRcdFx0aWYgcmVxPy5xdWVyeT8ub01hdGNoQ29sXHJcblx0XHRcdFx0XHRvX21hdGNoX2NvbCA9IHJlcT8ucXVlcnk/Lm9NYXRjaENvbFxyXG5cdFx0XHRcdFx0aWYgcmVxPy5xdWVyeT8uZE1hdGNoQ29sXHJcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sID0gcmVxPy5xdWVyeT8uZE1hdGNoQ29sXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sID0gb19tYXRjaF9jb2xcclxuXHRcdFx0XHRcdGNvbHVtbnMgPSByZXE/LnF1ZXJ5Py5yZWZpbGxDb2wuc3BsaXQoJzsnKSB8fCBbXVxyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2cgXCJjb2x1bW5zXCIsY29sdW1uc1x0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRpZiBjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoPDFcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2cgXCI9PT09PT09PT09PT09PT09PT09PT09XCJcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2cgZF90YWJsZSwgb19tYXRjaF9jb2wsIGNvbHVtbnNcclxuXHJcblx0XHRcdFx0XHRcdCMg5YiG5Y+R5Zue5p2l55qE5YC8XHJcblx0XHRcdFx0XHRcdGRfaW5zX3ZhbHVlcyA9IGRfaW5zPy52YWx1ZXNcclxuXHJcblx0XHRcdFx0XHRcdCMg5Y6f55Sz6K+35Y2VIGZvcm0g6KGo5a2X5q61XHJcblx0XHRcdFx0XHRcdG9faW5zX2lkID0gXy5sYXN0IGRfaW5zPy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzXHJcblx0XHRcdFx0XHRcdG9faW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob19pbnNfaWQpXHJcblx0XHRcdFx0XHRcdG9faW5zX2Zvcm0gPSBkYi5mb3Jtcy5maW5kT25lKG9faW5zPy5mb3JtKVxyXG5cclxuXHRcdFx0XHRcdFx0ZF9pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZF9pbnM/LmZvcm0pXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahCBmaWVsZHNcclxuXHRcdFx0XHRcdFx0b19pbnNfZmllbGRzID0gW11cclxuXHJcblx0XHRcdFx0XHRcdCMg5Y6f5a2Q6KGo5a2X5q61XHJcblx0XHRcdFx0XHRcdG9fc3VidGFibGVfZmllbGRzID0gW11cclxuXHJcblx0XHRcdFx0XHRcdCMg5YiG5Y+R55Sz6K+35Y2V55qEIGZpZWxkc1xyXG5cdFx0XHRcdFx0XHRkX2luc19maWVsZHMgPSBbXVxyXG5cdFx0XHRcdFx0XHQjIOeOsOeUs+ivt+WNleWtl+ihqOWtl+autVxyXG5cdFx0XHRcdFx0XHRkX3N1YnRhYmxlX2ZpZWxkcyA9IFtdXHJcblxyXG5cdFx0XHRcdFx0XHQjIOi1i+WAvOWvueW6lOeahOWtl+autVxyXG5cdFx0XHRcdFx0XHRjb2x1bW5fbGlzdCA9IFtdXHJcblxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0IyDliIblj5HlkI7nlLPor7fljZXnmoQg5a2Q6KGo5YC8XHJcblx0XHRcdFx0XHRcdGRfdGFibGVfdmFsdWVzID0gW11cclxuXHJcblx0XHRcdFx0XHRcdCMg5p+l55yL5Y6f55Sz6K+35Y2V5piv5ZCm5pyJ5a+55bqU55qE5a2Q6KGoXHJcblx0XHRcdFx0XHRcdGlmIG9faW5zPy5mb3JtX3ZlcnNpb24gPT0gb19pbnNfZm9ybT8uY3VycmVudD8uX2lkXHJcblx0XHRcdFx0XHRcdFx0b19pbnNfZmllbGRzID0gb19pbnNfZm9ybT8uY3VycmVudD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdFx0b19pbnNfZmllbGRzLmZvckVhY2ggKG9faW5zX2ZpZWxkKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRpZiBvX2luc19maWVsZD8udHlwZSA9PSAndGFibGUnICYmIG9faW5zX2ZpZWxkPy5jb2RlID09IG9fdGFibGVcclxuXHRcdFx0XHRcdFx0XHRcdFx0b19zdWJ0YWJsZV9maWVsZHMgPSBvX2luc19maWVsZD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRpZiBvX2luc19mb3JtPy5oaXN0b3J5cz8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0XHRcdFx0b19pbnNfZm9ybS5oaXN0b3J5cy5mb3JFYWNoIChvaCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiBvX2lucz8uZm9ybV92ZXJzaW9uID09IG9oLl9pZFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9faW5zX2ZpZWxkcyA9IG9oPy5maWVsZHNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvX2luc19maWVsZHMuZm9yRWFjaCAob19pbnNfZmllbGQpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIG9faW5zX2ZpZWxkPy50eXBlID09ICd0YWJsZScgJiYgb19pbnNfZmllbGQ/LmNvZGUgPT0gb190YWJsZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvX3N1YnRhYmxlX2ZpZWxkcyA9IG9faW5zX2ZpZWxkPy5maWVsZHNcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdCMg5p+l55yL5YiG5Y+R55qE55Sz6K+35Y2V5piv5ZCm5pyJ5a+55bqU55qE5a2X6KGoXHJcblx0XHRcdFx0XHRcdGlmIGRfaW5zPy5mb3JtX3ZlcnNpb24gPT0gZF9pbnNfZm9ybT8uY3VycmVudD8uX2lkXHJcblx0XHRcdFx0XHRcdFx0ZF9pbnNfZmllbGRzID0gZF9pbnNfZm9ybT8uY3VycmVudD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdFx0ZF9pbnNfZmllbGRzLmZvckVhY2ggKGRfaW5zX2ZpZWxkKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRpZigoZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBkX3RhYmxlKXx8KGFfdGFibGUgJiYgZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBhX3RhYmxlKSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQgZF9pbnNfZmllbGQ/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0aWYgZF9pbnNfZm9ybT8uaGlzdG9yeXM/Lmxlbmd0aCA+IDBcclxuXHRcdFx0XHRcdFx0XHRcdGRfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaCAoZGgpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgZF9pbnM/LmZvcm1fdmVyc2lvbiA9PSBkaC5faWRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRkX2luc19maWVsZHMgPSBkaD8uZmllbGRzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZF9pbnNfZmllbGRzLmZvckVhY2ggKGRfaW5zX2ZpZWxkKS0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZigoZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBkX3RhYmxlKXx8KGFfdGFibGUgJiYgZF9pbnNfZmllbGQ/LnR5cGUgPT0gJ3RhYmxlJyAmJiBkX2luc19maWVsZD8uY29kZSA9PSBhX3RhYmxlKSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQgZF9pbnNfZmllbGQ/LmZpZWxkc1xyXG5cdFx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0aWYgb19zdWJ0YWJsZV9maWVsZHMubGVuZ3RoID09IDBcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyBcIm9fc3VidGFibGVfZmllbGRzXCIsb19zdWJ0YWJsZV9maWVsZHNcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Y6f55Sz6K+35Y2V5peg5a+55bqU5a2Q6KGoJyk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRpZiBkX3N1YnRhYmxlX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXml6Dlr7nlupTlrZDooagnKTtcclxuXHJcblx0XHRcdFx0XHRcdGRfdGFibGVfdmFsdWVzID0gZF9pbnM/LnZhbHVlc1tkX3RhYmxlXSB8fCBbXVxyXG5cclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdGlmIGFfdGFibGVcclxuXHRcdFx0XHRcdFx0XHRhX3RhYmxlX3ZhbHVlcyA9ICBkX2lucz8udmFsdWVzW2FfdGFibGVdIHx8IFtdXHJcblx0XHRcdFx0XHRcdFx0aWYgYV90YWJsZV92YWx1ZXMgJiYgYV90YWJsZV92YWx1ZXM/Lmxlbmd0aD09ZF90YWJsZV92YWx1ZXM/Lmxlbmd0aFxyXG5cdFx0XHRcdFx0XHRcdFx0YV90YWJsZV92YWx1ZXMuZm9yRWFjaCAoYV9yb3csaW5kZXgpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZF90YWJsZV92YWx1ZXNbaW5kZXhdW2tleV0gPSB2YWx1ZSBmb3Iga2V5LHZhbHVlIG9mIGFfcm93XHJcblxyXG5cdFx0XHRcdFx0XHRpZiBkX3RhYmxlX3ZhbHVlcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajmlbDmja7kuLrnqbonKTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdG9fbWF0Y2hfY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcigobSktPnJldHVybiBtLmNvZGU9PW9fbWF0Y2hfY29sKVxyXG5cdFx0XHRcdFx0XHRkX21hdGNoX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoKG0pLT5yZXR1cm4gbS5jb2RlPT1kX21hdGNoX2NvbClcclxuXHJcblx0XHRcdFx0XHRcdCMg5Yy56YWN5YiX5Yik5patXHJcblx0XHRcdFx0XHRcdGlmIG9fbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfljp/nlLPor7fljZXlrZDooajml6Dlr7nlupTljLnphY3liJcnKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIGRfbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajml6Dlr7nlupTljLnphY3liJcnKTtcclxuXHJcblx0XHRcdFx0XHRcdCMg5Yik5pat5Yy56YWN5YiX5a2X5q6155qE5YC857G75Z6L5piv5ZCm5LiA6Ie0XHJcblx0XHRcdFx0XHRcdG9fbWF0Y2hfY29sX2ZpZWxkID0gb19tYXRjaF9jb2xfZmllbGRzWzBdXHJcblx0XHRcdFx0XHRcdGRfbWF0Y2hfY29sX2ZpZWxkID0gZF9tYXRjaF9jb2xfZmllbGRzWzBdXHJcblxyXG5cdFx0XHRcdFx0XHRpZiBvX21hdGNoX2NvbF9maWVsZD8udHlwZSAhPSBkX21hdGNoX2NvbF9maWVsZD8udHlwZVxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlkozljp/nlLPor7fljZXlrZDooajnmoTljLnphY3liJflrZfmrrXkuI3kuIDoh7QnKTtcclxuXHJcblx0XHRcdFx0XHRcdCMg5Zue5aGr5YiX5Yik5patXHJcblx0XHRcdFx0XHRcdGNvbHVtbnMuZm9yRWFjaCAoY29sdW1uKS0+XHJcblx0XHRcdFx0XHRcdFx0Y29scyA9IGNvbHVtbi5zcGxpdCgnLScpIHx8IFtdXHJcblx0XHRcdFx0XHRcdFx0aWYgY29scy5sZW5ndGggPT0gMlxyXG5cdFx0XHRcdFx0XHRcdFx0b19jb2wgPSBjb2xzWzBdXHJcblx0XHRcdFx0XHRcdFx0XHRkX2NvbCA9IGNvbHNbMV1cclxuXHRcdFx0XHRcdFx0XHRcdG9fY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcigobSktPnJldHVybiBtLmNvZGU9PW9fY29sKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZF9jb2xfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuZmlsdGVyKChtKS0+cmV0dXJuIG0uY29kZT09ZF9jb2wpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0IyDliKTmlq3mmK/lkKbmnInlr7nlupTnmoTlm57loavliJdcclxuXHRcdFx0XHRcdFx0XHRcdGlmIG9fY29sX2ZpZWxkcy5sZW5ndGggPT0gMFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Y6f55Sz6K+35Y2V5a2Q6KGo5peg5a+55bqU5Zue5aGr5YiXJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgZF9jb2xfZmllbGRzLmxlbmd0aCA9PSAwXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQjIOWIpOaWreWMuemFjeWIl+Wtl+auteeahOWAvOexu+Wei+aYr+WQpuS4gOiHtFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgb19jb2xfZmllbGRzPy50eXBlICE9IGRfY29sX2ZpZWxkcz8udHlwZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5a2X5q6157G75Z6L5LiN5LiA6Ie0Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdGNvbCA9IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b19jb2w6IG9fY29sLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkX2NvbDogZF9jb2xcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbl9saXN0LnB1c2ggY29sXHJcblxyXG5cdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICflm57loavliJfkuI3ljLnphY0nKTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdCMg6LWL5YC8XHJcblx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgICc9PT09PT1jb2x1bW5fbGlzdD09PT09PT0nLGNvbHVtbl9saXN0XHJcblxyXG5cdFx0XHRcdFx0XHR0cmFjZXMgPSBvX2lucz8udHJhY2VzXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahCBzdGVwIFxyXG5cdFx0XHRcdFx0XHR0cmFjZSA9IHRyYWNlc1t0cmFjZXMubGVuZ3RoLTFdXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahOW9k+WJjeatpemqpFxyXG5cdFx0XHRcdFx0XHRhcHByb3ZlID0gdHJhY2U/LmFwcHJvdmVzWzBdXHJcblxyXG5cdFx0XHRcdFx0XHQjIOWFg+eUs+ivt+WNleeahOW9k+WJjSB2YWx1ZSDnmoQg5a2Q6KGoXHJcblx0XHRcdFx0XHRcdHRhYmxlX2RhdGEgPSBhcHByb3ZlPy52YWx1ZXNbb190YWJsZV0gfHwgW11cclxuXHJcblxyXG5cdFx0XHRcdFx0XHQjIOagueaNriBjb2x1bW5fbGlzdCDotYvlgLzlr7nlupTlrZfmrrXov5vooYzotYvlgLxcclxuXHRcdFx0XHRcdFx0IyDlvqrnjq/liIblj5HnlLPor7fljZXnmoTmr4/ooYxcclxuXHRcdFx0XHRcdFx0ZF90YWJsZV92YWx1ZXMuZm9yRWFjaCAoZF9yb3cpLT5cclxuXHRcdFx0XHRcdFx0XHQjIGNvbnNvbGUubG9nIFwiZF9yb3dcIixkX3Jvd1xyXG5cdFx0XHRcdFx0XHRcdCMg5p+l5om+5Yy56YWN55qE5YiX5piv5ZCm5LiO5b2T5YmN55qE5Yy56YWN5YiX5LiA6Ie0XHJcblx0XHRcdFx0XHRcdFx0aGFzX29iaiA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0Y291bnQgPSAtMVxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdCMg55yL5Y6f5a2Q6KGo5piv5ZCm5pyJ6K+l5Yy56YWN5YiXXHJcblx0XHRcdFx0XHRcdFx0dGFibGVfZGF0YS5mb3JFYWNoIChvX3JvdywgaW5kZXgpLT5cclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJvX3Jvd1wiLCBvX3Jvd1xyXG5cdFx0XHRcdFx0XHRcdFx0IyBjb25zb2xlLmxvZyBcImluZGV4XCIsaW5kZXhcclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJvX3Jvd1tvX21hdGNoX2NvbF1cIixvX3Jvd1tvX21hdGNoX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJkX3Jvd1tkX21hdGNoX2NvbF1cIixkX3Jvd1tkX21hdGNoX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJvX3Jvd1tvX21hdGNoX2NvbF0gPT0gZF9yb3dbZF9tYXRjaF9jb2xdXCIsb19yb3dbb19tYXRjaF9jb2xdID09IGRfcm93W2RfbWF0Y2hfY29sXVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGlmIG9fcm93W29fbWF0Y2hfY29sXSA9PSBkX3Jvd1tkX21hdGNoX2NvbF1cclxuXHRcdFx0XHRcdFx0XHRcdFx0aGFzX29iaiA9IHRydWVcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y291bnQgPSBpbmRleFxyXG5cclxuXHRcdFx0XHRcdFx0XHQjIOWOn+eUs+ivt+WNleeahOWMuemFjeWtl+auteacieWAvFxyXG5cdFx0XHRcdFx0XHRcdCMgY29uc29sZS5sb2cgXCJoYXNfb2JqXCIsaGFzX29ialxyXG5cdFx0XHRcdFx0XHRcdGlmIGhhc19vYmo9PXRydWVcclxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbl9saXN0LmZvckVhY2ggKGNvbCktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHR0YWJsZV9kYXRhW2NvdW50XVtjb2w/Lm9fY29sXSA9IGRfcm93W2NvbD8uZF9jb2xdXHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0cm93X2RhdGEgPSB7fVxyXG5cdFx0XHRcdFx0XHRcdFx0cm93X2RhdGFbb19tYXRjaF9jb2xdID0gZF9yb3dbZF9tYXRjaF9jb2xdXHJcblx0XHRcdFx0XHRcdFx0XHRjb2x1bW5fbGlzdC5mb3JFYWNoIChjb2wpLT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0cm93X2RhdGFbY29sPy5vX2NvbF0gPSBkX3Jvd1tjb2w/LmRfY29sXVxyXG5cdFx0XHRcdFx0XHRcdFx0dGFibGVfZGF0YS5wdXNoIHJvd19kYXRhXHJcblxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0dHJhY2VzW3RyYWNlcy5sZW5ndGgtMV0uYXBwcm92ZXNbMF0udmFsdWVzID0gb19pbnM/LnZhbHVlc1xyXG5cdFx0XHRcdFx0XHR0cmFjZXNbdHJhY2VzLmxlbmd0aC0xXS5hcHByb3Zlc1swXS52YWx1ZXNbb190YWJsZV0gPSB0YWJsZV9kYXRhXHJcblxyXG5cdFx0XHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKG9faW5zX2lkLHtcclxuXHRcdFx0XHRcdFx0XHQkc2V0OntcclxuXHRcdFx0XHRcdFx0XHRcdCd0cmFjZXMnOnRyYWNlc1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcblx0XHRcdFx0XHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRcdFx0XHRcdCdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5a2Q6KGo5Zue5aGr5YiX5a2X5q61IGNvbHVtbnMg5YC8Jyk7XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljLnphY3liJflrZfmrrUgb01hdGNoQ29sIOWAvCcpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljp/ooajljZXlrZDooaggb1RhYmxlIOWAvCcpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn55Sz6K+35Y2V5pyq57uT5p2fJyk7XHJcblx0Y2F0Y2ggZVxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRlcnJvcnM6IFtlXVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL3dvcmtmbG93L2ZvcndhcmRfdGFibGVfcmVmaWxsXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBhX3RhYmxlLCBhX3RhYmxlX3ZhbHVlcywgYXBwcm92ZSwgY29sdW1uX2xpc3QsIGNvbHVtbnMsIGRfaW5zLCBkX2luc19maWVsZHMsIGRfaW5zX2Zvcm0sIGRfaW5zX3ZhbHVlcywgZF9tYXRjaF9jb2wsIGRfbWF0Y2hfY29sX2ZpZWxkLCBkX21hdGNoX2NvbF9maWVsZHMsIGRfc3VidGFibGVfZmllbGRzLCBkX3RhYmxlLCBkX3RhYmxlX3ZhbHVlcywgZSwgb19pbnMsIG9faW5zX2ZpZWxkcywgb19pbnNfZm9ybSwgb19pbnNfaWQsIG9fbWF0Y2hfY29sLCBvX21hdGNoX2NvbF9maWVsZCwgb19tYXRjaF9jb2xfZmllbGRzLCBvX3N1YnRhYmxlX2ZpZWxkcywgb190YWJsZSwgcmVmLCByZWYxLCByZWYxMCwgcmVmMTEsIHJlZjEyLCByZWYxMywgcmVmMTQsIHJlZjE1LCByZWYxNiwgcmVmMTcsIHJlZjE4LCByZWYxOSwgcmVmMiwgcmVmMjAsIHJlZjIxLCByZWYyMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNiwgcmVmNywgcmVmOCwgcmVmOSwgdGFibGVfZGF0YSwgdHJhY2UsIHRyYWNlcztcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWOn+ihqOWtkOihqD09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5vVGFibGVcIiwgcmVxICE9IG51bGwgPyAocmVmID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmLm9UYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3njrDooajlrZDooag9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uZFRhYmxlXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLmRUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3ljp/ooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8ub01hdGNoQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLm9NYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3njrDooajljZXnmoTlrZDooajljLnphY3liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uZE1hdGNoQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLmRNYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3pnIDopoHlm57loavnmoTliJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8ucmVmaWxsQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LnJlZmlsbENvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgZF9pbnMgPSByZXEgIT0gbnVsbCA/IChyZWY1ID0gcmVxLmJvZHkpICE9IG51bGwgPyByZWY1Lmluc3RhbmNlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICgoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLnN0YXRlIDogdm9pZCAwKSA9PT0gXCJjb21wbGV0ZWRcIikge1xuICAgICAgaWYgKHJlcSAhPSBudWxsID8gKHJlZjYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY2Lm9UYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCkge1xuICAgICAgICBvX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmNyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjcub1RhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmOCA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjguZFRhYmxlIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgICAgICAgZF90YWJsZSA9IHJlcSAhPSBudWxsID8gKHJlZjkgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY5LmRUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkX3RhYmxlID0gb190YWJsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmMTAgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxMC5hVGFibGUgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICBhX3RhYmxlID0gcmVxICE9IG51bGwgPyAocmVmMTEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxMS5hVGFibGUgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcSAhPSBudWxsID8gKHJlZjEyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMTIub01hdGNoQ29sIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgICAgICAgb19tYXRjaF9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWYxMyA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZjEzLm9NYXRjaENvbCA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICBpZiAocmVxICE9IG51bGwgPyAocmVmMTQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNC5kTWF0Y2hDb2wgOiB2b2lkIDAgOiB2b2lkIDApIHtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sID0gcmVxICE9IG51bGwgPyAocmVmMTUgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNS5kTWF0Y2hDb2wgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRfbWF0Y2hfY29sID0gb19tYXRjaF9jb2w7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbHVtbnMgPSAocmVxICE9IG51bGwgPyAocmVmMTYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxNi5yZWZpbGxDb2wuc3BsaXQoJzsnKSA6IHZvaWQgMCA6IHZvaWQgMCkgfHwgW107XG4gICAgICAgICAgY29uc29sZS5sb2coXCJjb2x1bW5zXCIsIGNvbHVtbnMpO1xuICAgICAgICAgIGlmIChjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCI9PT09PT09PT09PT09PT09PT09PT09XCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZF90YWJsZSwgb19tYXRjaF9jb2wsIGNvbHVtbnMpO1xuICAgICAgICAgICAgZF9pbnNfdmFsdWVzID0gZF9pbnMgIT0gbnVsbCA/IGRfaW5zLnZhbHVlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIG9faW5zX2lkID0gXy5sYXN0KGRfaW5zICE9IG51bGwgPyBkX2lucy5kaXN0cmlidXRlX2Zyb21faW5zdGFuY2VzIDogdm9pZCAwKTtcbiAgICAgICAgICAgIG9faW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUob19pbnNfaWQpO1xuICAgICAgICAgICAgb19pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUob19pbnMgIT0gbnVsbCA/IG9faW5zLmZvcm0gOiB2b2lkIDApO1xuICAgICAgICAgICAgZF9pbnNfZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLmZvcm0gOiB2b2lkIDApO1xuICAgICAgICAgICAgb19pbnNfZmllbGRzID0gW107XG4gICAgICAgICAgICBvX3N1YnRhYmxlX2ZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgZF9pbnNfZmllbGRzID0gW107XG4gICAgICAgICAgICBkX3N1YnRhYmxlX2ZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgY29sdW1uX2xpc3QgPSBbXTtcbiAgICAgICAgICAgIGRfdGFibGVfdmFsdWVzID0gW107XG4gICAgICAgICAgICBpZiAoKG9faW5zICE9IG51bGwgPyBvX2lucy5mb3JtX3ZlcnNpb24gOiB2b2lkIDApID09PSAob19pbnNfZm9ybSAhPSBudWxsID8gKHJlZjE3ID0gb19pbnNfZm9ybS5jdXJyZW50KSAhPSBudWxsID8gcmVmMTcuX2lkIDogdm9pZCAwIDogdm9pZCAwKSkge1xuICAgICAgICAgICAgICBvX2luc19maWVsZHMgPSBvX2luc19mb3JtICE9IG51bGwgPyAocmVmMTggPSBvX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYxOC5maWVsZHMgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIG9faW5zX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKG9faW5zX2ZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKChvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScgJiYgKG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gb190YWJsZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG9fc3VidGFibGVfZmllbGRzID0gb19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKChvX2luc19mb3JtICE9IG51bGwgPyAocmVmMTkgPSBvX2luc19mb3JtLmhpc3RvcnlzKSAhPSBudWxsID8gcmVmMTkubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgICAgICAgICBvX2luc19mb3JtLmhpc3RvcnlzLmZvckVhY2goZnVuY3Rpb24ob2gpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgob19pbnMgIT0gbnVsbCA/IG9faW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IG9oLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICBvX2luc19maWVsZHMgPSBvaCAhPSBudWxsID8gb2guZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb19pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24ob19pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoKG9faW5zX2ZpZWxkICE9IG51bGwgPyBvX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAob19pbnNfZmllbGQgIT0gbnVsbCA/IG9faW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBvX3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb19zdWJ0YWJsZV9maWVsZHMgPSBvX2luc19maWVsZCAhPSBudWxsID8gb19pbnNfZmllbGQuZmllbGRzIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoZF9pbnMgIT0gbnVsbCA/IGRfaW5zLmZvcm1fdmVyc2lvbiA6IHZvaWQgMCkgPT09IChkX2luc19mb3JtICE9IG51bGwgPyAocmVmMjAgPSBkX2luc19mb3JtLmN1cnJlbnQpICE9IG51bGwgPyByZWYyMC5faWQgOiB2b2lkIDAgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIGRfaW5zX2ZpZWxkcyA9IGRfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYyMSA9IGRfaW5zX2Zvcm0uY3VycmVudCkgIT0gbnVsbCA/IHJlZjIxLmZpZWxkcyA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgZF9pbnNfZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZF9pbnNfZmllbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQudHlwZSA6IHZvaWQgMCkgPT09ICd0YWJsZScgJiYgKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC5jb2RlIDogdm9pZCAwKSA9PT0gZF90YWJsZSkgfHwgKGFfdGFibGUgJiYgKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBhX3RhYmxlKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRfc3VidGFibGVfZmllbGRzID0gZF9zdWJ0YWJsZV9maWVsZHMuY29uY2F0KGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC5maWVsZHMgOiB2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoKGRfaW5zX2Zvcm0gIT0gbnVsbCA/IChyZWYyMiA9IGRfaW5zX2Zvcm0uaGlzdG9yeXMpICE9IG51bGwgPyByZWYyMi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgICAgICAgICAgIGRfaW5zX2Zvcm0uaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbihkaCkge1xuICAgICAgICAgICAgICAgICAgaWYgKChkX2lucyAhPSBudWxsID8gZF9pbnMuZm9ybV92ZXJzaW9uIDogdm9pZCAwKSA9PT0gZGguX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRfaW5zX2ZpZWxkcyA9IGRoICE9IG51bGwgPyBkaC5maWVsZHMgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkX2luc19maWVsZHMuZm9yRWFjaChmdW5jdGlvbihkX2luc19maWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgoKGRfaW5zX2ZpZWxkICE9IG51bGwgPyBkX2luc19maWVsZC50eXBlIDogdm9pZCAwKSA9PT0gJ3RhYmxlJyAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmNvZGUgOiB2b2lkIDApID09PSBkX3RhYmxlKSB8fCAoYV90YWJsZSAmJiAoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLnR5cGUgOiB2b2lkIDApID09PSAndGFibGUnICYmIChkX2luc19maWVsZCAhPSBudWxsID8gZF9pbnNfZmllbGQuY29kZSA6IHZvaWQgMCkgPT09IGFfdGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZF9zdWJ0YWJsZV9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5jb25jYXQoZF9pbnNfZmllbGQgIT0gbnVsbCA/IGRfaW5zX2ZpZWxkLmZpZWxkcyA6IHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9fc3VidGFibGVfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9fc3VidGFibGVfZmllbGRzXCIsIG9fc3VidGFibGVfZmllbGRzKTtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleaXoOWvueW6lOWtkOihqCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRfc3VidGFibGVfZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5YiG5Y+R55qE55Sz6K+35Y2V5peg5a+55bqU5a2Q6KGoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkX3RhYmxlX3ZhbHVlcyA9IChkX2lucyAhPSBudWxsID8gZF9pbnMudmFsdWVzW2RfdGFibGVdIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChhX3RhYmxlKSB7XG4gICAgICAgICAgICAgIGFfdGFibGVfdmFsdWVzID0gKGRfaW5zICE9IG51bGwgPyBkX2lucy52YWx1ZXNbYV90YWJsZV0gOiB2b2lkIDApIHx8IFtdO1xuICAgICAgICAgICAgICBpZiAoYV90YWJsZV92YWx1ZXMgJiYgKGFfdGFibGVfdmFsdWVzICE9IG51bGwgPyBhX3RhYmxlX3ZhbHVlcy5sZW5ndGggOiB2b2lkIDApID09PSAoZF90YWJsZV92YWx1ZXMgIT0gbnVsbCA/IGRfdGFibGVfdmFsdWVzLmxlbmd0aCA6IHZvaWQgMCkpIHtcbiAgICAgICAgICAgICAgICBhX3RhYmxlX3ZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGFfcm93LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGtleSwgcmVzdWx0cywgdmFsdWU7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhX3Jvdykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFfcm93W2tleV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChkX3RhYmxlX3ZhbHVlc1tpbmRleF1ba2V5XSA9IHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZF90YWJsZV92YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajmlbDmja7kuLrnqbonKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9fbWF0Y2hfY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtLmNvZGUgPT09IG9fbWF0Y2hfY29sO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkX21hdGNoX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgICByZXR1cm4gbS5jb2RlID09PSBkX21hdGNoX2NvbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG9fbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WOn+eUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRfbWF0Y2hfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ+WIhuWPkeeahOeUs+ivt+WNleWtkOihqOaXoOWvueW6lOWMuemFjeWIlycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb19tYXRjaF9jb2xfZmllbGQgPSBvX21hdGNoX2NvbF9maWVsZHNbMF07XG4gICAgICAgICAgICBkX21hdGNoX2NvbF9maWVsZCA9IGRfbWF0Y2hfY29sX2ZpZWxkc1swXTtcbiAgICAgICAgICAgIGlmICgob19tYXRjaF9jb2xfZmllbGQgIT0gbnVsbCA/IG9fbWF0Y2hfY29sX2ZpZWxkLnR5cGUgOiB2b2lkIDApICE9PSAoZF9tYXRjaF9jb2xfZmllbGQgIT0gbnVsbCA/IGRfbWF0Y2hfY29sX2ZpZWxkLnR5cGUgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlkozljp/nlLPor7fljZXlrZDooajnmoTljLnphY3liJflrZfmrrXkuI3kuIDoh7QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgICAgICAgdmFyIGNvbCwgY29scywgZF9jb2wsIGRfY29sX2ZpZWxkcywgb19jb2wsIG9fY29sX2ZpZWxkcztcbiAgICAgICAgICAgICAgY29scyA9IGNvbHVtbi5zcGxpdCgnLScpIHx8IFtdO1xuICAgICAgICAgICAgICBpZiAoY29scy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBvX2NvbCA9IGNvbHNbMF07XG4gICAgICAgICAgICAgICAgZF9jb2wgPSBjb2xzWzFdO1xuICAgICAgICAgICAgICAgIG9fY29sX2ZpZWxkcyA9IG9fc3VidGFibGVfZmllbGRzLmZpbHRlcihmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbS5jb2RlID09PSBvX2NvbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkX2NvbF9maWVsZHMgPSBkX3N1YnRhYmxlX2ZpZWxkcy5maWx0ZXIoZnVuY3Rpb24obSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uY29kZSA9PT0gZF9jb2w7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKG9fY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfljp/nlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRfY29sX2ZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICfliIblj5HnmoTnlLPor7fljZXlrZDooajml6Dlr7nlupTlm57loavliJcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChvX2NvbF9maWVsZHMgIT0gbnVsbCA/IG9fY29sX2ZpZWxkcy50eXBlIDogdm9pZCAwKSAhPT0gKGRfY29sX2ZpZWxkcyAhPSBudWxsID8gZF9jb2xfZmllbGRzLnR5cGUgOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5a2X5q6157G75Z6L5LiN5LiA6Ie0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbCA9IHtcbiAgICAgICAgICAgICAgICAgIG9fY29sOiBvX2NvbCxcbiAgICAgICAgICAgICAgICAgIGRfY29sOiBkX2NvbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbl9saXN0LnB1c2goY29sKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn5Zue5aGr5YiX5LiN5Yy56YWNJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2VzID0gb19pbnMgIT0gbnVsbCA/IG9faW5zLnRyYWNlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIHRyYWNlID0gdHJhY2VzW3RyYWNlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGFwcHJvdmUgPSB0cmFjZSAhPSBudWxsID8gdHJhY2UuYXBwcm92ZXNbMF0gOiB2b2lkIDA7XG4gICAgICAgICAgICB0YWJsZV9kYXRhID0gKGFwcHJvdmUgIT0gbnVsbCA/IGFwcHJvdmUudmFsdWVzW29fdGFibGVdIDogdm9pZCAwKSB8fCBbXTtcbiAgICAgICAgICAgIGRfdGFibGVfdmFsdWVzLmZvckVhY2goZnVuY3Rpb24oZF9yb3cpIHtcbiAgICAgICAgICAgICAgdmFyIGNvdW50LCBoYXNfb2JqLCByb3dfZGF0YTtcbiAgICAgICAgICAgICAgaGFzX29iaiA9IGZhbHNlO1xuICAgICAgICAgICAgICBjb3VudCA9IC0xO1xuICAgICAgICAgICAgICB0YWJsZV9kYXRhLmZvckVhY2goZnVuY3Rpb24ob19yb3csIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKG9fcm93W29fbWF0Y2hfY29sXSA9PT0gZF9yb3dbZF9tYXRjaF9jb2xdKSB7XG4gICAgICAgICAgICAgICAgICBoYXNfb2JqID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChoYXNfb2JqID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbl9saXN0LmZvckVhY2goZnVuY3Rpb24oY29sKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVfZGF0YVtjb3VudF1bY29sICE9IG51bGwgPyBjb2wub19jb2wgOiB2b2lkIDBdID0gZF9yb3dbY29sICE9IG51bGwgPyBjb2wuZF9jb2wgOiB2b2lkIDBdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvd19kYXRhID0ge307XG4gICAgICAgICAgICAgICAgcm93X2RhdGFbb19tYXRjaF9jb2xdID0gZF9yb3dbZF9tYXRjaF9jb2xdO1xuICAgICAgICAgICAgICAgIGNvbHVtbl9saXN0LmZvckVhY2goZnVuY3Rpb24oY29sKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcm93X2RhdGFbY29sICE9IG51bGwgPyBjb2wub19jb2wgOiB2b2lkIDBdID0gZF9yb3dbY29sICE9IG51bGwgPyBjb2wuZF9jb2wgOiB2b2lkIDBdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZV9kYXRhLnB1c2gocm93X2RhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzID0gb19pbnMgIT0gbnVsbCA/IG9faW5zLnZhbHVlcyA6IHZvaWQgMDtcbiAgICAgICAgICAgIHRyYWNlc1t0cmFjZXMubGVuZ3RoIC0gMV0uYXBwcm92ZXNbMF0udmFsdWVzW29fdGFibGVdID0gdGFibGVfZGF0YTtcbiAgICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUob19pbnNfaWQsIHtcbiAgICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICAgICd0cmFjZXMnOiB0cmFjZXNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICdzdWNjZXNzJzogJ+WbnuWhq+aIkOWKnydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5a2Q6KGo5Zue5aGr5YiX5a2X5q61IGNvbHVtbnMg5YC8Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ZvcndhcmQgdGFibGUgcmVmaWxsIGVycm9yIScsICd3ZWJob29r5pyq6YWN572u5Yy56YWN5YiX5a2X5q61IG9NYXRjaENvbCDlgLwnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZm9yd2FyZCB0YWJsZSByZWZpbGwgZXJyb3IhJywgJ3dlYmhvb2vmnKrphY3nva7ljp/ooajljZXlrZDooaggb1RhYmxlIOWAvCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdmb3J3YXJkIHRhYmxlIHJlZmlsbCBlcnJvciEnLCAn55Sz6K+35Y2V5pyq57uT5p2fJyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGUgPSBlcnJvcjtcbiAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBlcnJvcnM6IFtlXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvc3ViX3RhYmxlX3NvcnRcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdHRyeVxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGoPT09PT09PT09PVwiXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zdWJUYWJsZVwiLHJlcT8ucXVlcnk/LnN1YlRhYmxlXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCI9PT09PT09PT3lrZDooajmgLvliIbliJc9PT09PT09PT09XCJcclxuICAgICAgICBjb25zb2xlLmxvZyBcInJlcT8ucXVlcnk/LnN1bUNvbFwiLHJlcT8ucXVlcnk/LnN1bUNvbFxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGo5o6S5bqP5YiXPT09PT09PT09PVwiXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zb3J0Q29sXCIscmVxPy5xdWVyeT8uc29ydENvbFxyXG4gICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT09PT095a2Q6KGo5Y2V5YiX6ZyA6KaB6K6h566X55qE5ZKMPT09PT09PT09PVwiXHJcbiAgICAgICAgY29uc29sZS5sb2cgXCJyZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXCIscmVxPy5xdWVyeT8uc2luZ2xlQ29sc1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHN1Yl90YWJsZSA9IHJlcT8ucXVlcnk/LnN1YlRhYmxlXHJcbiAgICAgICAgaWYgIXN1Yl90YWJsZVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIj09PT09c3ViX3RhYmxlPT09PT09XCJcclxuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3ViVGFibGUg5a2X5q61JyApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN1bV9jb2wgPSByZXE/LnF1ZXJ5Py5zdW1Db2xcclxuICAgICAgICBpZiAhc3VtX2NvbFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIj09PT09c3VtX2NvbD09PT09PVwiXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHN1bUNvbCDlrZfmrrUnICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc29ydF9jb2wgPSByZXE/LnF1ZXJ5Py5zb3J0Q29sXHJcbiAgICAgICAgaWYgIXNvcnRfY29sXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiPT09PT1zb3J0X2NvbD09PT09PVwiXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHNvcnRDb2wg5a2X5q61JyApO1xyXG4gICAgICAgIFxyXG4gICAgICAgICMgc2luZ2xlX2NvbHMgPSByZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXHJcbiAgICAgICAgIyBpZiAhc2luZ2xlX2NvbHNcclxuICAgICAgICAjICAgICBjb25zb2xlLmxvZyBcIj09PT09c2luZ2xlX2NvbHM9PT09PT1cIlxyXG5cclxuICAgICAgICAjICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICd3ZWJob29rIOacqumFjee9riBzaW5nbGVDb2xzIOWtl+autScgKTtcclxuICAgICAgICBcclxuICAgICAgICBpbnMgPSByZXE/LmJvZHk/Lmluc3RhbmNlXHJcbiAgICAgICAgXHJcbiAgICAgICAgc3ViX3RhYmxlX3ZhbHVlcyA9IGlucy52YWx1ZXNbc3ViX3RhYmxlXVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIHN1Yl90YWJsZV92YWx1ZXM/Lmxlbmd0aCA+IDAgXHJcbiAgICAgICAgICAgICMgIyDmoLnmja4gc3ViX3RhYmxlX3ZhbHVlcyDov5vooYzmjpLluo9cclxuICAgICAgICAgICAgIyA9PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgICAgICMg5o6S5bqP5a2X5q6177yM5YWz6ZSu5a2X77yM5q2j5bqPKHRydWUpL+WAkuW6jyhmYWxzZSlcclxuICAgICAgICAgICAgYGZ1bmN0aW9uIEpzb25Tb3J0KGpzb25BcnIsIGtleSwgYXNjKXtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaj0xLGpsPWpzb25BcnIubGVuZ3RoO2ogPCBqbDtqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wID0ganNvbkFycltqXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsICA9IE51bWJlcih0ZW1wW2tleV0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpICAgID0gai0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGFzYz09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGkgPj0wICYmIE51bWJlcihqc29uQXJyW2ldW2tleV0pPnZhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSBqc29uQXJyW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGktMTsgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoaSA+PTAgJiYgTnVtYmVyKGpzb25BcnJbaV1ba2V5XSk8dmFsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnJbaSsxXSA9IGpzb25BcnJbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBqc29uQXJyW2krMV0gPSB0ZW1wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25BcnI7XHJcbiAgICAgICAgICAgIH1gXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBuZXdfdGFibGVfdmFsdWVzID0gSnNvblNvcnQoc3ViX3RhYmxlX3ZhbHVlcyxzdW1fY29sLGZhbHNlKVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2cgXCJuZXdfdGFibGVfdmFsdWVzXCIsbmV3X3RhYmxlX3ZhbHVlc1xyXG5cclxuICAgICAgICAgICAgbmV3X3RhYmxlX3ZhbHVlcy5mb3JFYWNoIChvYmosIGluZGV4KS0+XHJcbiAgICAgICAgICAgICAgICBpZiBzb3J0X2NvbCBhbmQgb2JqW3N1bV9jb2xdXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW3NvcnRfY29sXSA9IChpbmRleCsxKS50b1N0cmluZygpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcIm5ld190YWJsZV92YWx1ZXNcIixuZXdfdGFibGVfdmFsdWVzXHJcblxyXG4gICAgICAgICAgICBpbnMudmFsdWVzW3N1Yl90YWJsZV0gPSBuZXdfdGFibGVfdmFsdWVzXHJcblxyXG4gICAgICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKGlucy5faWQse1xyXG4gICAgICAgICAgICAgICAgJHNldDp7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlcyc6aW5zLnZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcInN1Y2Nlc3NcIlxyXG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiAyMDAsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiAn6K6h566X5o6S5bqP5oiQ5YqfJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICflrZDooajmlbDmja7kuLrnqbonKTtcclxuICAgIGNhdGNoIGVcclxuICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLCB7XHJcbiAgICAgICAgICAgIGNvZGU6IDIwMCxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBbZV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuKSIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvd29ya2Zsb3cvc3ViX3RhYmxlX3NvcnRcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGUsIGlucywgbmV3X3RhYmxlX3ZhbHVlcywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCByZWY3LCBzb3J0X2NvbCwgc3ViX3RhYmxlLCBzdWJfdGFibGVfdmFsdWVzLCBzdW1fY29sO1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKFwiPT09PT09PT095a2Q6KGoPT09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhcInJlcT8ucXVlcnk/LnN1YlRhYmxlXCIsIHJlcSAhPSBudWxsID8gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5zdWJUYWJsZSA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3lrZDooajmgLvliIbliJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc3VtQ29sXCIsIHJlcSAhPSBudWxsID8gKHJlZjEgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYxLnN1bUNvbCA6IHZvaWQgMCA6IHZvaWQgMCk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT3lrZDooajmjpLluo/liJc9PT09PT09PT09XCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxPy5xdWVyeT8uc29ydENvbFwiLCByZXEgIT0gbnVsbCA/IChyZWYyID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMi5zb3J0Q29sIDogdm9pZCAwIDogdm9pZCAwKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PeWtkOihqOWNleWIl+mcgOimgeiuoeeul+eahOWSjD09PT09PT09PT1cIik7XG4gICAgY29uc29sZS5sb2coXCJyZXE/LnF1ZXJ5Py5zaW5nbGVDb2xzXCIsIHJlcSAhPSBudWxsID8gKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLnNpbmdsZUNvbHMgOiB2b2lkIDAgOiB2b2lkIDApO1xuICAgIHN1Yl90YWJsZSA9IHJlcSAhPSBudWxsID8gKHJlZjQgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWY0LnN1YlRhYmxlIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICghc3ViX3RhYmxlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIj09PT09c3ViX3RhYmxlPT09PT09XCIpO1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigndGFibGUgc29ydCBlcnJvciEnLCAnd2ViaG9vayDmnKrphY3nva4gc3ViVGFibGUg5a2X5q61Jyk7XG4gICAgfVxuICAgIHN1bV9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWY1ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNS5zdW1Db2wgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgaWYgKCFzdW1fY29sKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIj09PT09c3VtX2NvbD09PT09PVwiKTtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHN1bUNvbCDlrZfmrrUnKTtcbiAgICB9XG4gICAgc29ydF9jb2wgPSByZXEgIT0gbnVsbCA/IChyZWY2ID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmNi5zb3J0Q29sIDogdm9pZCAwIDogdm9pZCAwO1xuICAgIGlmICghc29ydF9jb2wpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiPT09PT1zb3J0X2NvbD09PT09PVwiKTtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3RhYmxlIHNvcnQgZXJyb3IhJywgJ3dlYmhvb2sg5pyq6YWN572uIHNvcnRDb2wg5a2X5q61Jyk7XG4gICAgfVxuICAgIGlucyA9IHJlcSAhPSBudWxsID8gKHJlZjcgPSByZXEuYm9keSkgIT0gbnVsbCA/IHJlZjcuaW5zdGFuY2UgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgc3ViX3RhYmxlX3ZhbHVlcyA9IGlucy52YWx1ZXNbc3ViX3RhYmxlXTtcbiAgICBpZiAoKHN1Yl90YWJsZV92YWx1ZXMgIT0gbnVsbCA/IHN1Yl90YWJsZV92YWx1ZXMubGVuZ3RoIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIGZ1bmN0aW9uIEpzb25Tb3J0KGpzb25BcnIsIGtleSwgYXNjKXtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGo9MSxqbD1qc29uQXJyLmxlbmd0aDtqIDwgamw7aisrKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBqc29uQXJyW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsICA9IE51bWJlcih0ZW1wW2tleV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSAgICA9IGotMTtcbiAgICAgICAgICAgICAgICAgICAgaWYoYXNjPT10cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGkgPj0wICYmIE51bWJlcihqc29uQXJyW2ldW2tleV0pPnZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0ganNvbkFycltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS0xOyAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShpID49MCAmJiBOdW1iZXIoanNvbkFycltpXVtrZXldKTx2YWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnJbaSsxXSA9IGpzb25BcnJbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGktMTsgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAganNvbkFycltpKzFdID0gdGVtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25BcnI7XG4gICAgICAgICAgICB9O1xuICAgICAgbmV3X3RhYmxlX3ZhbHVlcyA9IEpzb25Tb3J0KHN1Yl90YWJsZV92YWx1ZXMsIHN1bV9jb2wsIGZhbHNlKTtcbiAgICAgIGNvbnNvbGUubG9nKFwibmV3X3RhYmxlX3ZhbHVlc1wiLCBuZXdfdGFibGVfdmFsdWVzKTtcbiAgICAgIG5ld190YWJsZV92YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihvYmosIGluZGV4KSB7XG4gICAgICAgIGlmIChzb3J0X2NvbCAmJiBvYmpbc3VtX2NvbF0pIHtcbiAgICAgICAgICByZXR1cm4gb2JqW3NvcnRfY29sXSA9IChpbmRleCArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc29sZS5sb2coXCJuZXdfdGFibGVfdmFsdWVzXCIsIG5ld190YWJsZV92YWx1ZXMpO1xuICAgICAgaW5zLnZhbHVlc1tzdWJfdGFibGVdID0gbmV3X3RhYmxlX3ZhbHVlcztcbiAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoaW5zLl9pZCwge1xuICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgJ3ZhbHVlcyc6IGlucy52YWx1ZXNcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhcInN1Y2Nlc3NcIik7XG4gICAgICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAnc3VjY2Vzcyc6ICforqHnrpfmjpLluo/miJDlip8nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd0YWJsZSBzb3J0IGVycm9yIScsICflrZDooajmlbDmja7kuLrnqbonKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZSA9IGVycm9yO1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVycm9yczogW2VdXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiaWYgTWV0ZW9yLmlzRGV2ZWxvcG1lbnRcclxuICAgIEpzb25Sb3V0ZXMuYWRkICdwb3N0JywgJy90ZXN0L3dlYmhvb2snLCAocmVxLCByZXMsIG5leHQpIC0+XHJcbiAgICAgICAgdHJ5XHJcblxyXG4gICAgICAgICAgICBoYXNoRGF0YSA9IHJlcS5ib2R5XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nICdhY3Rpb246ICcsIGhhc2hEYXRhLmFjdGlvblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyAnZnJvbV91c2VyOiAnLCBoYXNoRGF0YS5mcm9tX3VzZXJcclxuICAgICAgICAgICAgY29uc29sZS5sb2cgJ3RvX3VzZXJzOiAnLCBoYXNoRGF0YS50b191c2Vyc1xyXG5cclxuXHJcbiAgICAgICAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogMjAwXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge31cclxuICAgICAgICBjYXRjaCBlXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG4gICAgICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG4gICAgICAgICAgICAgICAgY29kZTogMjAwXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7IGVycm9yczogW3tlcnJvck1lc3NhZ2U6IGUubWVzc2FnZX1dIH0iLCJpZiAoTWV0ZW9yLmlzRGV2ZWxvcG1lbnQpIHtcbiAgSnNvblJvdXRlcy5hZGQoJ3Bvc3QnLCAnL3Rlc3Qvd2ViaG9vaycsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIGUsIGhhc2hEYXRhO1xuICAgIHRyeSB7XG4gICAgICBoYXNoRGF0YSA9IHJlcS5ib2R5O1xuICAgICAgY29uc29sZS5sb2coJ2FjdGlvbjogJywgaGFzaERhdGEuYWN0aW9uKTtcbiAgICAgIGNvbnNvbGUubG9nKCdmcm9tX3VzZXI6ICcsIGhhc2hEYXRhLmZyb21fdXNlcik7XG4gICAgICBjb25zb2xlLmxvZygndG9fdXNlcnM6ICcsIGhhc2hEYXRhLnRvX3VzZXJzKTtcbiAgICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgZGF0YToge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBlID0gZXJyb3I7XG4gICAgICBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogMjAwLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZXJyb3JzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogZS5tZXNzYWdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS9mb3JtdWxhL3VzZXJzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHJcblx0Y3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKVxyXG5cdGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZFxyXG5cclxuXHR1c2VySWRzID0gcmVxLmJvZHkudXNlcklkc1xyXG5cdHNwYWNlSWQgPSByZXEuYm9keS5zcGFjZUlkXHJcblx0c3BhY2VVc2VycyA9IFtdO1xyXG5cclxuXHRzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7dXNlcjogY3VycmVudF91c2VyLCBzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtfaWQ6IDF9fSlcclxuXHRpZiAhc3BhY2VfdXNlclxyXG5cdFx0cmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcclxuXHRcdFx0Y29kZTogMjAwLFxyXG5cdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0J2Vycm9ycyc6ICfml6DmnYPpmZAnXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRpZiAoIXVzZXJJZHMgfHwgIXNwYWNlSWQpXHJcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0c3BhY2VVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdHMoc3BhY2VJZCwgdXNlcklkcylcclxuXHJcblx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcywge1xyXG5cdFx0Y29kZTogMjAwLFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHQnc3BhY2VVc2Vycyc6IHNwYWNlVXNlcnNcclxuXHRcdH1cclxuXHR9XHJcbikiLCJKc29uUm91dGVzLmFkZChcInBvc3RcIiwgXCIvYXBpL2Zvcm11bGEvdXNlcnNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIHNwYWNlSWQsIHNwYWNlVXNlcnMsIHNwYWNlX3VzZXIsIHVzZXJJZHM7XG4gIGN1cnJlbnRfdXNlcl9pbmZvID0gdXVmbG93TWFuYWdlci5jaGVja19hdXRob3JpemF0aW9uKHJlcSk7XG4gIGN1cnJlbnRfdXNlciA9IGN1cnJlbnRfdXNlcl9pbmZvLl9pZDtcbiAgdXNlcklkcyA9IHJlcS5ib2R5LnVzZXJJZHM7XG4gIHNwYWNlSWQgPSByZXEuYm9keS5zcGFjZUlkO1xuICBzcGFjZVVzZXJzID0gW107XG4gIHNwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICB1c2VyOiBjdXJyZW50X3VzZXIsXG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgX2lkOiAxXG4gICAgfVxuICB9KTtcbiAgaWYgKCFzcGFjZV91c2VyKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfml6DmnYPpmZAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKCF1c2VySWRzIHx8ICFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc3BhY2VVc2VycyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdHMoc3BhY2VJZCwgdXNlcklkcyk7XG4gIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgY29kZTogMjAwLFxuICAgIGRhdGE6IHtcbiAgICAgICdzcGFjZVVzZXJzJzogc3BhY2VVc2Vyc1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIkpzb25Sb3V0ZXMuYWRkKFwicG9zdFwiLCBcIi9hcGkvZm9ybXVsYS9vcmdzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHRjdXJyZW50X3VzZXJfaW5mbyA9IHV1Zmxvd01hbmFnZXIuY2hlY2tfYXV0aG9yaXphdGlvbihyZXEpXHJcblx0Y3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkXHJcblx0b3JnSWRzID0gcmVxLmJvZHkub3JnSWRzXHJcblx0c3BhY2VJZCA9IHJlcS5ib2R5LnNwYWNlSWRcclxuXHJcblx0c3BhY2VfdXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe3VzZXI6IGN1cnJlbnRfdXNlciwgc3BhY2U6IHNwYWNlSWR9LCB7ZmllbGRzOiB7X2lkOiAxfX0pXHJcblx0aWYgIXNwYWNlX3VzZXJcclxuXHRcdHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRcdGNvZGU6IDIwMCxcclxuXHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdCdlcnJvcnMnOiAn5peg5p2D6ZmQJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0aWYgKCFvcmdJZHMgfHwgIXNwYWNlSWQpXHJcblx0XHRyZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHQnZXJyb3JzJzogJ+e8uuWwkeWPguaVsCdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdG9yZ3MgPSBXb3JrZmxvd01hbmFnZXIuZ2V0Rm9ybXVsYU9yZ09iamVjdHMob3JnSWRzKVxyXG5cclxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XHJcblx0XHRjb2RlOiAyMDAsXHJcblx0XHRkYXRhOiB7XHJcblx0XHRcdCdvcmdzJzogb3Jnc1xyXG5cdFx0fVxyXG5cdH0pO1xyXG4pIiwiSnNvblJvdXRlcy5hZGQoXCJwb3N0XCIsIFwiL2FwaS9mb3JtdWxhL29yZ3NcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGN1cnJlbnRfdXNlciwgY3VycmVudF91c2VyX2luZm8sIG9yZ0lkcywgb3Jncywgc3BhY2VJZCwgc3BhY2VfdXNlcjtcbiAgY3VycmVudF91c2VyX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmNoZWNrX2F1dGhvcml6YXRpb24ocmVxKTtcbiAgY3VycmVudF91c2VyID0gY3VycmVudF91c2VyX2luZm8uX2lkO1xuICBvcmdJZHMgPSByZXEuYm9keS5vcmdJZHM7XG4gIHNwYWNlSWQgPSByZXEuYm9keS5zcGFjZUlkO1xuICBzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgdXNlcjogY3VycmVudF91c2VyLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMVxuICAgIH1cbiAgfSk7XG4gIGlmICghc3BhY2VfdXNlcikge1xuICAgIHJldHVybiBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiAyMDAsXG4gICAgICBkYXRhOiB7XG4gICAgICAgICdlcnJvcnMnOiAn5peg5p2D6ZmQJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGlmICghb3JnSWRzIHx8ICFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgIGNvZGU6IDIwMCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgJ2Vycm9ycyc6ICfnvLrlsJHlj4LmlbAnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgb3JncyA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhT3JnT2JqZWN0cyhvcmdJZHMpO1xuICByZXR1cm4gSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgIGNvZGU6IDIwMCxcbiAgICBkYXRhOiB7XG4gICAgICAnb3Jncyc6IG9yZ3NcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IubWV0aG9kc1xyXG5cdHNldF9pbnN0YW5jZV9zdGVwX2FwcHJvdmU6IChpbnNfaWQsIHN0ZXBfYXBwcm92ZSwgc3RlcHNBcHByb3Zlc09wdGlvbnMpLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWR9LCB7ZmllbGRzOiB7c3RhdGU6IDF9fSlcclxuXHJcblx0XHRpZiBpbnMuc3RhdGUgIT0gJ2RyYWZ0J1xyXG5cdFx0XHRyZXR1cm4gO1xyXG5cclxuXHRcdF9rZXlzMSA9IF8ua2V5cyhzdGVwX2FwcHJvdmUpO1xyXG5cdFx0X2tleXMyID0gXy5rZXlzKHN0ZXBzQXBwcm92ZXNPcHRpb25zKTtcclxuXHJcblx0XHRrZXlzID0gXy5jb21wYWN0KF8udW5pb24oX2tleXMxLCBfa2V5czIpKTtcclxuXHJcblx0XHRzdGVwc0FwcHJvdmVzID0ge307XHJcblxyXG5cdFx0Xy5lYWNoIGtleXMsIChzdGVwSWQpLT5cclxuXHRcdFx0c3RlcEFwcHJvdmVzID0gc3RlcF9hcHByb3ZlW3N0ZXBJZF1cclxuXHRcdFx0c3RlcHNBcHByb3ZlT3B0aW9ucyA9IHN0ZXBzQXBwcm92ZXNPcHRpb25zW3N0ZXBJZF1cclxuXHRcdFx0aWYgc3RlcEFwcHJvdmVzXHJcblx0XHRcdFx0c3RlcHNBcHByb3Zlc1tzdGVwSWRdID0gc3RlcEFwcHJvdmVzXHJcblx0XHRcdFx0aWYgc3RlcHNBcHByb3ZlT3B0aW9uc1xyXG5cdFx0XHRcdFx0aWYgXy5pc0FycmF5KHN0ZXBBcHByb3ZlcylcclxuXHRcdFx0XHRcdFx0c3RlcHNBcHByb3ZlT3B0aW9ucyA9IHN0ZXBBcHByb3Zlcy5jb25jYXQoc3RlcHNBcHByb3ZlT3B0aW9ucylcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0c3RlcHNBcHByb3ZlT3B0aW9ucy5wdXNoKHN0ZXBBcHByb3ZlcylcclxuXHRcdFx0aWYgc3RlcHNBcHByb3ZlT3B0aW9uc1xyXG5cdFx0XHRcdHN0ZXBzQXBwcm92ZXNbc3RlcElkICsgJ19vcHRpb25zJ10gPSBfLnVuaXEoc3RlcHNBcHByb3ZlT3B0aW9ucylcclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUge19pZDogaW5zX2lkfSwgeyRzZXQ6IHtzdGVwX2FwcHJvdmU6IHN0ZXBzQXBwcm92ZXN9fVxyXG5cdHNldF9pbnN0YW5jZV9za2lwX3N0ZXBzOiAoaW5zX2lkLCBzdGVwSWQsIGFjdGlvbiktPlxyXG5cdFx0aWYgYWN0aW9uID09ICdwdWxsJ1xyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlIHtfaWQ6IGluc19pZH0sIHskcHVsbDoge3NraXBfc3RlcHM6IHN0ZXBJZH19XHJcblx0XHRlbHNlIGlmIGFjdGlvbiA9PSAncHVzaCdcclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSB7X2lkOiBpbnNfaWR9LCB7JHB1c2g6IHtza2lwX3N0ZXBzOiBzdGVwSWR9fSIsIk1ldGVvci5tZXRob2RzKHtcbiAgc2V0X2luc3RhbmNlX3N0ZXBfYXBwcm92ZTogZnVuY3Rpb24oaW5zX2lkLCBzdGVwX2FwcHJvdmUsIHN0ZXBzQXBwcm92ZXNPcHRpb25zKSB7XG4gICAgdmFyIF9rZXlzMSwgX2tleXMyLCBpbnMsIGtleXMsIHN0ZXBzQXBwcm92ZXM7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnMuc3RhdGUgIT09ICdkcmFmdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2tleXMxID0gXy5rZXlzKHN0ZXBfYXBwcm92ZSk7XG4gICAgX2tleXMyID0gXy5rZXlzKHN0ZXBzQXBwcm92ZXNPcHRpb25zKTtcbiAgICBrZXlzID0gXy5jb21wYWN0KF8udW5pb24oX2tleXMxLCBfa2V5czIpKTtcbiAgICBzdGVwc0FwcHJvdmVzID0ge307XG4gICAgXy5lYWNoKGtleXMsIGZ1bmN0aW9uKHN0ZXBJZCkge1xuICAgICAgdmFyIHN0ZXBBcHByb3Zlcywgc3RlcHNBcHByb3ZlT3B0aW9ucztcbiAgICAgIHN0ZXBBcHByb3ZlcyA9IHN0ZXBfYXBwcm92ZVtzdGVwSWRdO1xuICAgICAgc3RlcHNBcHByb3ZlT3B0aW9ucyA9IHN0ZXBzQXBwcm92ZXNPcHRpb25zW3N0ZXBJZF07XG4gICAgICBpZiAoc3RlcEFwcHJvdmVzKSB7XG4gICAgICAgIHN0ZXBzQXBwcm92ZXNbc3RlcElkXSA9IHN0ZXBBcHByb3ZlcztcbiAgICAgICAgaWYgKHN0ZXBzQXBwcm92ZU9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoXy5pc0FycmF5KHN0ZXBBcHByb3ZlcykpIHtcbiAgICAgICAgICAgIHN0ZXBzQXBwcm92ZU9wdGlvbnMgPSBzdGVwQXBwcm92ZXMuY29uY2F0KHN0ZXBzQXBwcm92ZU9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGVwc0FwcHJvdmVPcHRpb25zLnB1c2goc3RlcEFwcHJvdmVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdGVwc0FwcHJvdmVPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzdGVwc0FwcHJvdmVzW3N0ZXBJZCArICdfb3B0aW9ucyddID0gXy51bmlxKHN0ZXBzQXBwcm92ZU9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgIF9pZDogaW5zX2lkXG4gICAgfSwge1xuICAgICAgJHNldDoge1xuICAgICAgICBzdGVwX2FwcHJvdmU6IHN0ZXBzQXBwcm92ZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgc2V0X2luc3RhbmNlX3NraXBfc3RlcHM6IGZ1bmN0aW9uKGluc19pZCwgc3RlcElkLCBhY3Rpb24pIHtcbiAgICBpZiAoYWN0aW9uID09PSAncHVsbCcpIHtcbiAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHB1bGw6IHtcbiAgICAgICAgICBza2lwX3N0ZXBzOiBzdGVwSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdwdXNoJykge1xuICAgICAgcmV0dXJuIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICBfaWQ6IGluc19pZFxuICAgICAgfSwge1xuICAgICAgICAkcHVzaDoge1xuICAgICAgICAgIHNraXBfc3RlcHM6IHN0ZXBJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG5cclxuXHRnZXRfaW5zdGFuY2VfZGF0YTogZnVuY3Rpb24gKGluc3RhbmNlX2lkLCBmb3JtQ2FjaGVkLCBmbG93Q2FjaGVkKSB7XHJcblxyXG5cdFx0Y2hlY2soaW5zdGFuY2VfaWQsIFN0cmluZyk7XHJcblx0XHRjaGVjayhmb3JtQ2FjaGVkLCBCb29sZWFuKTtcclxuXHRcdGNoZWNrKGZsb3dDYWNoZWQsIEJvb2xlYW4pO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKTtcclxuXHJcblx0XHRpZiAoIWluc3RhbmNlKVxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGluc3RhbmNlOiBudWxsXHJcblx0XHRcdH07XHJcblxyXG5cdFx0aWYgKGZvcm1DYWNoZWQgJiYgZmxvd0NhY2hlZClcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRpbnN0YW5jZTogaW5zdGFuY2VcclxuXHRcdFx0fTtcclxuXHJcblx0XHRpZiAoIWZvcm1DYWNoZWQpIHtcclxuXHRcdFx0dmFyIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGluc3RhbmNlLmZvcm0pO1xyXG5cdFx0XHR2YXIgZm9ybV92ZXJzaW9uID0ge307XHJcblx0XHRcdGlmIChmb3JtLmN1cnJlbnQuX2lkID09IGluc3RhbmNlLmZvcm1fdmVyc2lvbikge1xyXG5cdFx0XHRcdGZvcm1fdmVyc2lvbiA9IGZvcm0uY3VycmVudDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRmb3JtX3ZlcnNpb24gPSBfLndoZXJlKGZvcm0uaGlzdG9yeXMsIHtfaWQ6IGluc3RhbmNlLmZvcm1fdmVyc2lvbn0pWzBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdGlmICghZmxvd0NhY2hlZCkge1xyXG5cdFx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoaW5zdGFuY2UuZmxvdyk7XHJcblx0XHRcdHZhciBmbG93X3ZlcnNpb24gPSB7fTtcclxuXHRcdFx0aWYgKGZsb3cuY3VycmVudC5faWQgPT0gaW5zdGFuY2UuZmxvd192ZXJzaW9uKSB7XHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50O1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGZsb3dfdmVyc2lvbiA9IF8ud2hlcmUoZmxvdy5oaXN0b3J5cywge19pZDogaW5zdGFuY2UuZmxvd192ZXJzaW9ufSlbMF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRpbnN0YW5jZTogaW5zdGFuY2UsXHJcblx0XHRcdGZvcm1fdmVyc2lvbjogZm9ybV92ZXJzaW9uLFxyXG5cdFx0XHRmbG93X3ZlcnNpb246IGZsb3dfdmVyc2lvblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG5cclxuXHRkcmFmdF9zYXZlX2luc3RhbmNlOiBmdW5jdGlvbiAoaW5zKSB7XHJcblx0XHRpZiAoIXRoaXMudXNlcklkKVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR2YXIgcmVzdWx0ID0gdHJ1ZTtcclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblx0XHR2YXIgaW5zX2lkID0gaW5zLl9pZDtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGlucy50cmFjZXNbMF0uX2lkO1xyXG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLl9pZDtcclxuXHRcdHZhciBkZXNjcmlwdGlvbiA9IGlucy50cmFjZXNbMF0uYXBwcm92ZXNbMF0uZGVzY3JpcHRpb247XHJcblx0XHR2YXIgbmV4dF9zdGVwcyA9IGlucy50cmFjZXNbMF0uYXBwcm92ZXNbMF0ubmV4dF9zdGVwcztcclxuXHRcdHZhciB2YWx1ZXMgPSBpbnMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLnZhbHVlcyB8fCB7fTtcclxuXHRcdHZhciBhcHBsaWNhbnRfaWQgPSBpbnMuYXBwbGljYW50O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRhcHBsaWNhbnQ6IDEsXHJcblx0XHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdFx0c3VibWl0dGVyOiAxLFxyXG5cdFx0XHRcdHRyYWNlczogMSxcclxuXHRcdFx0XHRmb3JtOiAxLFxyXG5cdFx0XHRcdGZsb3dfdmVyc2lvbjogMSxcclxuXHRcdFx0XHRzcGFjZTogMSxcclxuXHRcdFx0XHRmbG93OiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHZhciBzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlO1xyXG5cdFx0dmFyIGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xyXG5cdFx0dmFyIGZvcm1faWQgPSBpbnN0YW5jZS5mb3JtO1xyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHRcdHZhciBjdXJyZW50X3RyYWNlID0gXy5maW5kKHRyYWNlcywgZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0cmV0dXJuIHQuX2lkID09IHRyYWNlX2lkO1xyXG5cdFx0fSk7XHJcblx0XHRjdXJyZW50X3RyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRpZiAoYS5faWQgPT0gYXBwcm92ZV9pZCkge1xyXG5cdFx0XHRcdGluZGV4ID0gaWR4O1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0dmFyIGtleV9zdHIgPSAndHJhY2VzLiQuYXBwcm92ZXMuJyArIGluZGV4ICsgJy4nO1xyXG5cclxuXHRcdC8vIOWIpOaWreS4gOS4qmluc3RhbmNl5piv5ZCm5Li65ouf56i/54q25oCBXHJcblx0XHR2YXIgY3VycmVudF91c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XHJcblx0XHRcdF9pZDogdGhpcy51c2VySWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0bG9jYWxlOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGxhbmcgPSBjdXJyZW50X3VzZXIubG9jYWxlID09ICd6aC1jbicgPyAnemgtQ04nIDogJ2VuJztcclxuXHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZURyYWZ0KGluc3RhbmNlLCBsYW5nKTtcclxuXHRcdC8vIOWIpOaWreS4gOS4queUqOaIt+aYr+WQpuaYr+S4gOS4qmluc3RhbmNl55qE5o+Q5Lqk6ICFXHJcblx0XHR1dWZsb3dNYW5hZ2VyLmlzSW5zdGFuY2VTdWJtaXR0ZXIoaW5zdGFuY2UsIHRoaXMudXNlcklkKTtcclxuXHJcblx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcImN1cnJlbnQuX2lkXCI6IDEsXHJcblx0XHRcdFx0XCJjdXJyZW50LmZvcm1fdmVyc2lvblwiOiAxLFxyXG5cdFx0XHRcdFwibmFtZVwiOiAxLFxyXG5cdFx0XHRcdFwiY3VycmVudC5zdGVwc1wiOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRpZiAoZmxvdy5jdXJyZW50Ll9pZCAhPSBpbnN0YW5jZS5mbG93X3ZlcnNpb24pIHtcclxuXHRcdFx0cmVzdWx0ID0gXCJ1cGdyYWRlZFwiO1xyXG5cdFx0XHR2YXIgc3RhcnRfc3RlcCA9IF8uZmluZChmbG93LmN1cnJlbnQuc3RlcHMsIGZ1bmN0aW9uIChzKSB7XHJcblx0XHRcdFx0cmV0dXJuIHMuc3RlcF90eXBlID09IFwic3RhcnRcIjtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIOa1geeoi+W3suWNh+e6p1xyXG5cdFx0XHRzZXRPYmouZmxvd192ZXJzaW9uID0gZmxvdy5jdXJyZW50Ll9pZDtcclxuXHRcdFx0c2V0T2JqLmZvcm1fdmVyc2lvbiA9IGZsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XHJcblx0XHRcdC8vIOWtmOWFpeW9k+WJjeacgOaWsOeJiGZsb3fkuK3lvIDlp4voioLngrnnmoRzdGVwX2lkXHJcblx0XHRcdHNldE9ialtcInRyYWNlcy4kLnN0ZXBcIl0gPSBzdGFydF9zdGVwLl9pZDtcclxuXHRcdFx0c2V0T2JqW1widHJhY2VzLiQubmFtZVwiXSA9IHN0YXJ0X3N0ZXAubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaW5zdGFuY2UuYXBwbGljYW50ICE9IGFwcGxpY2FudF9pZCkge1xyXG5cdFx0XHQvLyDnlLPor7fkurrlt7Llj5jmjaJcclxuXHRcdFx0dmFyIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKGFwcGxpY2FudF9pZCwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhciBhcHBsaWNhbnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcclxuXHRcdFx0XHRzcGFjZTogc3BhY2VfaWQsXHJcblx0XHRcdFx0dXNlcjogYXBwbGljYW50X2lkXHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRcdG9yZ2FuaXphdGlvbjogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhciBvcmdfaWQgPSBhcHBsaWNhbnQuZmV0Y2goKVswXS5vcmdhbml6YXRpb247XHJcblx0XHRcdHZhciBvcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUob3JnX2lkLCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudCA9IGFwcGxpY2FudF9pZDtcclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudF9uYW1lID0gdXNlci5uYW1lO1xyXG5cdFx0XHRzZXRPYmouYXBwbGljYW50X29yZ2FuaXphdGlvbiA9IG9yZ19pZDtcclxuXHRcdFx0c2V0T2JqLmFwcGxpY2FudF9vcmdhbml6YXRpb25fbmFtZSA9IG9yZ2FuaXphdGlvbi5uYW1lO1xyXG5cdFx0XHRzZXRPYmouYXBwbGljYW50X29yZ2FuaXphdGlvbl9mdWxsbmFtZSA9IG9yZ2FuaXphdGlvbi5mdWxsbmFtZTtcclxuXHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ3VzZXInXSA9IGFwcGxpY2FudF9pZDtcclxuXHRcdFx0c2V0T2JqW2tleV9zdHIgKyAndXNlcl9uYW1lJ10gPSB1c2VyLm5hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0T2JqW2tleV9zdHIgKyAndmFsdWVzJ10gPSB2YWx1ZXM7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdkZXNjcmlwdGlvbiddID0gZGVzY3JpcHRpb247XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdqdWRnZSddID0gJ3N1Ym1pdHRlZCc7XHJcblx0XHRzZXRPYmpba2V5X3N0ciArICdyZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRpZiAocmVzdWx0ICE9IFwidXBncmFkZWRcIiAmJiBuZXh0X3N0ZXBzKSB7XHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ25leHRfc3RlcHMnXSA9IG5leHRfc3RlcHM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8g6K6h566X55Sz6K+35Y2V5qCH6aKYXHJcblx0XHR2YXIgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xyXG5cdFx0XHRfaWQ6IGZvcm1faWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XCJjdXJyZW50Lm5hbWVfZm9ydW1sYVwiOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm0uY3VycmVudC5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdC8vIHZhciBpc2NyaXB0ID0gbmFtZV9mb3J1bWxhLnJlcGxhY2UoL1xcey9nLCBcIih2YWx1ZXNbJ1wiKS5yZXBsYWNlKC9cXH0vZywgXCInXSB8fCAnJylcIik7XHJcblx0XHRcdC8vIHZhciByZXYgPSBldmFsKGlzY3JpcHQpO1xyXG5cdFx0XHRzZXRPYmoubmFtZSA9IHV1Zmxvd01hbmFnZXIuZ2V0SW5zdGFuY2VOYW1lKGlucywgdmFsdWVzKTtcclxuXHRcdH1cclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZV9pZFxyXG5cdFx0fSwge1xyXG5cdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRpbmJveF9zYXZlX2luc3RhbmNlOiBmdW5jdGlvbiAoYXBwcm92ZSkge1xyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbmRleCA9IDA7XHJcblx0XHR2YXIgaW5zX2lkID0gYXBwcm92ZS5pbnN0YW5jZTtcclxuXHRcdHZhciB0cmFjZV9pZCA9IGFwcHJvdmUudHJhY2U7XHJcblx0XHR2YXIgYXBwcm92ZV9pZCA9IGFwcHJvdmUuaWQ7XHJcblx0XHR2YXIgdmFsdWVzID0gYXBwcm92ZS52YWx1ZXM7XHJcblx0XHR2YXIgbmV4dF9zdGVwcyA9IGFwcHJvdmUubmV4dF9zdGVwcztcclxuXHRcdHZhciBkZXNjcmlwdGlvbiA9IGFwcHJvdmUuZGVzY3JpcHRpb247XHJcblx0XHR2YXIganVkZ2UgPSBhcHByb3ZlLmp1ZGdlO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHR0cmFjZXM6IDEsXHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uOiAxLFxyXG5cdFx0XHRcdGZsb3c6IDEsXHJcblx0XHRcdFx0c3RhdGU6IDEsXHJcblx0XHRcdFx0Zm9ybTogMSxcclxuXHRcdFx0XHRmb3JtX3ZlcnNpb246IDEsXHJcblx0XHRcdFx0dmFsdWVzOiAxLFxyXG5cdFx0XHRcdGNvZGU6IDFcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHJcblx0XHR2YXIgY3VycmVudF90cmFjZSA9IF8uZmluZCh0cmFjZXMsIGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdHJldHVybiB0Ll9pZCA9PSB0cmFjZV9pZDtcclxuXHRcdH0pO1xyXG5cdFx0dmFyIGN1cnJlbnRfYXBwcm92ZSA9IF8uZmluZChjdXJyZW50X3RyYWNlLmFwcHJvdmVzLCBmdW5jdGlvbiAoYSkge1xyXG5cdFx0XHRyZXR1cm4gYS5faWQgPT0gYXBwcm92ZV9pZDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIOWIpOaWreS4gOS4qmluc3RhbmNl5piv5ZCm5Li65a6h5qC45Lit54q25oCBXHJcblx0XHR2YXIgY3VycmVudF91c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XHJcblx0XHRcdF9pZDogdGhpcy51c2VySWRcclxuXHRcdH0sIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0bG9jYWxlOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGxhbmcgPSBjdXJyZW50X3VzZXIubG9jYWxlID09ICd6aC1jbicgPyAnemgtQ04nIDogJ2VuJztcclxuXHRcdHRyeSB7XHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNJbnN0YW5jZVBlbmRpbmcoaW5zdGFuY2UsIGxhbmcpO1xyXG5cdFx0XHQvLyDliKTmlq3kuIDkuKp0cmFjZeaYr+WQpuS4uuacquWujOaIkOeKtuaAgVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzVHJhY2VOb3RGaW5pc2hlZChjdXJyZW50X3RyYWNlKTtcclxuXHRcdFx0Ly8g5Yik5pat5LiA5LiqYXBwcm92ZeaYr+WQpuS4uuacquWujOaIkOeKtuaAgVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLmlzQXBwcm92ZU5vdEZpbmlzaGVkKGN1cnJlbnRfYXBwcm92ZSk7XHJcblx0XHRcdC8vIOWIpOaWreW9k+WJjeeUqOaIt+aYr+WQpmFwcHJvdmUg5a+55bqU55qE5aSE55CG5Lq65oiW5Luj55CG5Lq6XHJcblx0XHRcdHV1Zmxvd01hbmFnZXIuaXNIYW5kbGVyT3JBZ2VudChjdXJyZW50X2FwcHJvdmUsIHRoaXMudXNlcklkKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coZS5zdGFjaylcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0dmFyIGZsb3dfdmVyc2lvbiA9IGluc3RhbmNlLmZsb3dfdmVyc2lvbjtcclxuXHRcdHZhciBmbG93X2lkID0gaW5zdGFuY2UuZmxvdztcclxuXHRcdHZhciBzdGVwX2lkID0gXCJcIjtcclxuXHRcdHN0ZXBfaWQgPSBjdXJyZW50X3RyYWNlLnN0ZXA7XHJcblx0XHR2YXIgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRjdXJyZW50OiAxLFxyXG5cdFx0XHRcdGhpc3RvcnlzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIHN0ZXAgPSBudWxsO1xyXG5cdFx0aWYgKGZsb3cuY3VycmVudC5faWQgPT0gZmxvd192ZXJzaW9uKSB7XHJcblx0XHRcdGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XHJcblx0XHRcdFx0aWYgKHMuX2lkID09IHN0ZXBfaWQpXHJcblx0XHRcdFx0XHRzdGVwID0gcztcclxuXHRcdFx0fSlcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZsb3cuaGlzdG9yeXMuZm9yRWFjaChmdW5jdGlvbiAoaCkge1xyXG5cdFx0XHRcdGguc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAocykge1xyXG5cdFx0XHRcdFx0aWYgKHMuX2lkID09IHN0ZXBfaWQpXHJcblx0XHRcdFx0XHRcdHN0ZXAgPSBzO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0pXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFzdGVwKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR2YXIgc3RlcF90eXBlID0gc3RlcC5zdGVwX3R5cGU7XHJcblxyXG5cdFx0Y3VycmVudF90cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0aWYgKGEuX2lkID09IGFwcHJvdmVfaWQpIHtcclxuXHRcdFx0XHRpbmRleCA9IGlkeDtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHR2YXIga2V5X3N0ciA9ICd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLic7XHJcblxyXG5cdFx0dmFyIHBlcm1pc3Npb25zX3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0QXBwcm92ZVZhbHVlcyhhcHByb3ZlLnZhbHVlcywgc3RlcC5wZXJtaXNzaW9ucywgaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKTtcclxuXHJcblx0XHR2YXIgY2hhbmdlX3ZhbHVlcyA9IGFwcHJvdmVNYW5hZ2VyLmdldENoYW5nZVZhbHVlcyhpbnN0YW5jZS52YWx1ZXMsIHBlcm1pc3Npb25zX3ZhbHVlcyk7XHJcblxyXG5cdFx0c2V0T2JqLnZhbHVlcyA9IF8uZXh0ZW5kKChpbnN0YW5jZS52YWx1ZXMgfHwge30pLCBwZXJtaXNzaW9uc192YWx1ZXMpO1xyXG5cclxuXHRcdGlmICghXy5pc0VtcHR5KGNoYW5nZV92YWx1ZXMpKSB7XHJcblxyXG5cdFx0XHR2YWx1ZXNfaGlzdG9yeSA9IGN1cnJlbnRfYXBwcm92ZS52YWx1ZXNfaGlzdG9yeSB8fCBbXVxyXG5cclxuXHRcdFx0dmFsdWVzX2hpc3RvcnkucHVzaCh7XHJcblx0XHRcdFx0dmFsdWVzOiBjaGFuZ2VfdmFsdWVzLFxyXG5cdFx0XHRcdGNyZWF0ZTogbmV3IERhdGUoKVxyXG5cdFx0XHR9KVxyXG5cclxuXHRcdFx0c2V0T2JqW2tleV9zdHIgKyAndmFsdWVzX2hpc3RvcnknXSA9IHZhbHVlc19oaXN0b3J5XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0T2JqW2tleV9zdHIgKyAnaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ3JlYWRfZGF0ZSddID0gbmV3IERhdGUoKTtcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ3ZhbHVlcyddID0gc2V0T2JqLnZhbHVlcztcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ2Rlc2NyaXB0aW9uJ10gPSBkZXNjcmlwdGlvbjtcclxuXHRcdHNldE9ialtrZXlfc3RyICsgJ25leHRfc3RlcHMnXSA9IG5leHRfc3RlcHM7XHJcblx0XHRpZiAoc3RlcF90eXBlID09IFwic3VibWl0XCIgfHwgc3RlcF90eXBlID09IFwic3RhcnRcIikge1xyXG5cdFx0XHRzZXRPYmpba2V5X3N0ciArICdqdWRnZSddID0gXCJzdWJtaXR0ZWRcIjtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNldE9ialtrZXlfc3RyICsgJ2p1ZGdlJ10gPSBqdWRnZTtcclxuXHRcdH1cclxuXHJcblx0XHRzZXRPYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblxyXG5cdFx0Ly8g6K6h566X55Sz6K+35Y2V5qCH6aKYXHJcblx0XHR2YXIgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoaW5zdGFuY2UuZm9ybSk7XHJcblx0XHR2YXIgZm9ybV92ID0gdXVmbG93TWFuYWdlci5nZXRGb3JtVmVyc2lvbihmb3JtLCBpbnN0YW5jZS5mb3JtX3ZlcnNpb24pO1xyXG5cdFx0dmFyIG5hbWVfZm9ydW1sYSA9IGZvcm1fdi5uYW1lX2ZvcnVtbGE7XHJcblx0XHRpZiAobmFtZV9mb3J1bWxhKSB7XHJcblx0XHRcdHNldE9iai5uYW1lID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZU5hbWUoaW5zdGFuY2UsIHNldE9iai52YWx1ZXMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc19pZCxcclxuXHRcdFx0XCJ0cmFjZXMuX2lkXCI6IHRyYWNlX2lkXHJcblx0XHR9LCB7XHJcblx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG59KSIsIk1ldGVvci5tZXRob2RzKHtcclxuXHQvLyA/Pz8g6IO95ZCm5Lyg6ZiF57uZ5b2T5YmN5q2l6aqk5aSE55CG5Lq6IOWmguaenOW9k+WJjeatpemqpOaYr+S8muetvuOAglxyXG5cdGNjX2RvOiBmdW5jdGlvbiAoYXBwcm92ZSwgY2NfdXNlcl9pZHMsIGRlc2NyaXB0aW9uKSB7XHJcblxyXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xyXG5cdFx0dmFyIGluc19pZCA9IGFwcHJvdmUuaW5zdGFuY2U7XHJcblx0XHR2YXIgdHJhY2VfaWQgPSBhcHByb3ZlLnRyYWNlO1xyXG5cdFx0dmFyIGFwcHJvdmVfaWQgPSBhcHByb3ZlLl9pZDtcclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHRzcGFjZTogMSxcclxuXHRcdFx0XHR0cmFjZXM6IDEsXHJcblx0XHRcdFx0Y2NfdXNlcnM6IDEsXHJcblx0XHRcdFx0dmFsdWVzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xyXG5cdFx0dmFyIHNwYWNlX2lkID0gaW5zdGFuY2Uuc3BhY2U7XHJcblx0XHR2YXIgbmV3X2FwcHJvdmVzID0gW107XHJcblxyXG5cdFx0dmFyIGZyb21fdXNlcl9uYW1lID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXJfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHR9XHJcblx0XHR9KS5uYW1lXHJcblxyXG5cdFx0Y2NfdXNlcl9pZHMuZm9yRWFjaChmdW5jdGlvbiAodXNlcklkLCBpZHgpIHtcclxuXHRcdFx0dmFyIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHVzZXJJZCwge1xyXG5cdFx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHZhciBzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XHJcblx0XHRcdFx0c3BhY2U6IHNwYWNlX2lkLFxyXG5cdFx0XHRcdHVzZXI6IHVzZXJJZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRvcmdhbml6YXRpb246IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR2YXIgb3JnX2lkID0gc3BhY2VfdXNlci5vcmdhbml6YXRpb247XHJcblx0XHRcdHZhciBvcmdhbml6YXRpb24gPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUob3JnX2lkLCB7XHJcblx0XHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdFx0ZnVsbG5hbWU6IDFcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR2YXIgYWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCB1c2VySWQpO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9pZCA9IHVzZXJJZDtcclxuXHRcdFx0dmFyIGhhbmRsZXJfaW5mbyA9IHVzZXI7XHJcblx0XHRcdHZhciBoYW5kbGVyX3NwYWNlX3VzZXIgPSBzcGFjZV91c2VyO1xyXG5cdFx0XHR2YXIgaGFuZGxlcl9vcmdfaW5mbyA9IG9yZ2FuaXphdGlvbjtcclxuXHRcdFx0aWYgKGFnZW50KSB7XHJcblx0XHRcdFx0aGFuZGxlcl9pZCA9IGFnZW50O1xyXG5cdFx0XHRcdGhhbmRsZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoYWdlbnQsIHtcclxuXHRcdFx0XHRcdGZpbGVkczoge1xyXG5cdFx0XHRcdFx0XHRuYW1lOiAxXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0aGFuZGxlcl9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGFnZW50KTtcclxuXHRcdFx0XHRoYW5kbGVyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKGhhbmRsZXJfc3BhY2VfdXNlcik7XHJcblx0XHRcdFx0Y2NfdXNlcl9pZHNbaWR4XSA9IGFnZW50O1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBhcHByID0ge1xyXG5cdFx0XHRcdCdfaWQnOiBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyLFxyXG5cdFx0XHRcdCdpbnN0YW5jZSc6IGluc19pZCxcclxuXHRcdFx0XHQndHJhY2UnOiB0cmFjZV9pZCxcclxuXHRcdFx0XHQnaXNfZmluaXNoZWQnOiBmYWxzZSxcclxuXHRcdFx0XHQndXNlcic6IHVzZXJJZCxcclxuXHRcdFx0XHQndXNlcl9uYW1lJzogdXNlci5uYW1lLFxyXG5cdFx0XHRcdCdoYW5kbGVyJzogaGFuZGxlcl9pZCxcclxuXHRcdFx0XHQnaGFuZGxlcl9uYW1lJzogaGFuZGxlcl9pbmZvLm5hbWUsXHJcblx0XHRcdFx0J2hhbmRsZXJfb3JnYW5pemF0aW9uJzogaGFuZGxlcl9zcGFjZV91c2VyLm9yZ2FuaXphdGlvbixcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSc6IGhhbmRsZXJfb3JnX2luZm8ubmFtZSxcclxuXHRcdFx0XHQnaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUnOiBoYW5kbGVyX29yZ19pbmZvLmZ1bGxuYW1lLFxyXG5cdFx0XHRcdCd0eXBlJzogJ2NjJyxcclxuXHRcdFx0XHQnc3RhcnRfZGF0ZSc6IG5ldyBEYXRlKCksXHJcblx0XHRcdFx0J2lzX3JlYWQnOiBmYWxzZSxcclxuXHRcdFx0XHQnZnJvbV91c2VyJzogY3VycmVudF91c2VyX2lkLFxyXG5cdFx0XHRcdCdmcm9tX3VzZXJfbmFtZSc6IGZyb21fdXNlcl9uYW1lLFxyXG5cdFx0XHRcdCdvcGluaW9uX2ZpZWxkc19jb2RlJzogYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlLFxyXG5cdFx0XHRcdCdzaWduX2ZpZWxkX2NvZGUnOiAoYXBwcm92ZS5vcGluaW9uX2ZpZWxkc19jb2RlICYmIGFwcHJvdmUub3Bpbmlvbl9maWVsZHNfY29kZS5sZW5ndGggPT0gMSkgPyBhcHByb3ZlLm9waW5pb25fZmllbGRzX2NvZGVbMF0gOiBcIlwiLFxyXG5cdFx0XHRcdCdmcm9tX2FwcHJvdmVfaWQnOiBhcHByb3ZlX2lkLFxyXG5cdFx0XHRcdCdjY19kZXNjcmlwdGlvbic6IGRlc2NyaXB0aW9uXHJcblx0XHRcdH07XHJcblx0XHRcdGlmIChhZ2VudCkge1xyXG5cdFx0XHRcdGFwcHIuYWdlbnQgPSBhZ2VudDtcclxuXHRcdFx0fVxyXG5cdFx0XHR1dWZsb3dNYW5hZ2VyLnNldFJlbWluZEluZm8oaW5zdGFuY2UudmFsdWVzLCBhcHByKVxyXG5cdFx0XHRuZXdfYXBwcm92ZXMucHVzaChhcHByKTtcclxuXHRcdH0pXHJcblxyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdCd0cmFjZXMuX2lkJzogdHJhY2VfaWRcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0T2JqLFxyXG5cdFx0XHQkYWRkVG9TZXQ6IHtcclxuXHRcdFx0XHQndHJhY2VzLiQuYXBwcm92ZXMnOiB7XHJcblx0XHRcdFx0XHQkZWFjaDogbmV3X2FwcHJvdmVzXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHQkcHVzaDoge1xyXG5cdFx0XHRcdGNjX3VzZXJzOiB7XHJcblx0XHRcdFx0XHQkZWFjaDogY2NfdXNlcl9pZHNcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zX2lkKTtcclxuXHRcdGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXJfaWQpO1xyXG5cdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJ0cmFjZV9hcHByb3ZlX2NjXCIsIGluc3RhbmNlLCBcIlwiLCBjdXJyZW50X3VzZXJfaW5mbywgY2NfdXNlcl9pZHMpO1xyXG5cclxuXHRcdGZsb3dfaWQgPSBpbnN0YW5jZS5mbG93O1xyXG5cdFx0YXBwcm92ZS5jY191c2VyX2lkcyA9IGNjX3VzZXJfaWRzOyAvLyDorrDlvZXkuIvmnKzmrKHkvKDpmIXnmoTkurrlkZhJROS9nOS4umhvb2vmjqXlj6PkuK3nmoTlj4LmlbBcclxuXHRcdC8vIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdHB1c2hNYW5hZ2VyLnRyaWdnZXJXZWJob29rKGZsb3dfaWQsIGluc3RhbmNlLCBhcHByb3ZlLCAnY2NfZG8nLCBjdXJyZW50X3VzZXJfaWQsIGNjX3VzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHJcblx0Y2NfcmVhZDogZnVuY3Rpb24gKGFwcHJvdmUpIHtcclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHRcdHZhciBpbnNfaWQgPSBhcHByb3ZlLmluc3RhbmNlO1xyXG5cdFx0dmFyIHRyYWNlX2lkID0gYXBwcm92ZS50cmFjZTtcclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHR0cmFjZXM6IDFcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHR2YXIgY3VycmVudF91c2VyX2lkID0gdGhpcy51c2VySWQ7XHJcblx0XHR2YXIgY3VycmVudF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdHJldHVybiB0Ll9pZCA9PSB0cmFjZV9pZDtcclxuXHRcdH0pXHJcblxyXG5cdFx0dmFyIGluZGV4ID0gMDtcclxuXHJcblx0XHRjdXJyZW50X3RyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRpZiAoYS50eXBlID09ICdjYycgJiYgYS5oYW5kbGVyID09IGN1cnJlbnRfdXNlcl9pZCAmJiAhYS5pc19yZWFkKSB7XHJcblx0XHRcdFx0aW5kZXggPSBpZHg7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGluZGV4ICsgJy5pc19yZWFkJ10gPSB0cnVlO1xyXG5cdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaW5kZXggKyAnLnJlYWRfZGF0ZSddID0gbmV3IERhdGUoKTtcclxuXHJcblx0XHRzZXRPYmoudHJhY2VzID0gdHJhY2VzO1xyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc19pZCxcclxuXHRcdFx0J3RyYWNlcy5faWQnOiB0cmFjZV9pZFxyXG5cdFx0fSwge1xyXG5cdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHJcblx0Y2Nfc3VibWl0OiBmdW5jdGlvbiAoaW5zX2lkLCBkZXNjcmlwdGlvbikge1xyXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCwge1xyXG5cdFx0XHRmaWVsZHM6IHtcclxuXHRcdFx0XHR0cmFjZXM6IDEsXHJcblx0XHRcdFx0Y2NfdXNlcnM6IDEsXHJcblx0XHRcdFx0b3V0Ym94X3VzZXJzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHRcdHZhciBjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZDtcclxuXHRcdHZhciBjdXJyZW50X2FwcHJvdmU7XHJcblxyXG5cdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0aWYgKHQuYXBwcm92ZXMpIHtcclxuXHRcdFx0XHR0LmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRcdFx0aWYgKGEudHlwZSA9PSAnY2MnICYmIGEuaGFuZGxlciA9PSBjdXJyZW50X3VzZXJfaWQgJiYgYS5pc19maW5pc2hlZCA9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRjdXJyZW50X2FwcHJvdmUgPSBhO1xyXG5cdFx0XHRcdFx0XHR2YXIgdXBvYmogPSB7fTtcclxuXHRcdFx0XHRcdFx0dXBvYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR1cG9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0dXBvYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdFx0XHR1cG9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuanVkZ2UnXSA9IFwic3VibWl0dGVkXCI7XHJcblx0XHRcdFx0XHRcdHVwb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5jb3N0X3RpbWUnXSA9IG5ldyBEYXRlKCkgLSBhLnN0YXJ0X2RhdGU7XHJcblx0XHRcdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0XHRcdF9pZDogaW5zX2lkLFxyXG5cdFx0XHRcdFx0XHRcdCd0cmFjZXMuX2lkJzogdC5faWRcclxuXHRcdFx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0XHRcdCRzZXQ6IHVwb2JqXHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmIChjdXJyZW50X2FwcHJvdmUpIHtcclxuXHRcdFx0dmFyIGluZGV4ID0gMDtcclxuXHJcblx0XHRcdC8v6K6+572u5oSP6KeB77yM5oSP6KeB5Y+q5re75Yqg5Yiw5pyA5ZCO5LiA5p2hYXBwcm92ZeS4rVxyXG5cdFx0XHR0cmFjZXMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xyXG5cdFx0XHRcdGlmIChjdXJyZW50X2FwcHJvdmUgJiYgdC5faWQgPT09IGN1cnJlbnRfYXBwcm92ZS50cmFjZSkge1xyXG5cdFx0XHRcdFx0aWYgKHQuYXBwcm92ZXMpIHtcclxuXHRcdFx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoYS5faWQgPT09IGN1cnJlbnRfYXBwcm92ZS5faWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGEuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuXHRcdFx0XHRcdFx0XHRcdGluZGV4ID0gaWR4O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdHNldE9iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xyXG5cdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcuZGVzY3JpcHRpb24nXSA9IGRlc2NyaXB0aW9uO1xyXG5cclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFx0J3RyYWNlcy5faWQnOiBjdXJyZW50X2FwcHJvdmUudHJhY2VcclxuXHRcdFx0fSwge1xyXG5cdFx0XHRcdCRzZXQ6IHNldE9iaixcclxuXHRcdFx0XHQkcHVsbDoge1xyXG5cdFx0XHRcdFx0Y2NfdXNlcnM6IGN1cnJlbnRfdXNlcl9pZFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0JGFkZFRvU2V0OiB7XHJcblx0XHRcdFx0XHRvdXRib3hfdXNlcnM6IHtcclxuXHRcdFx0XHRcdFx0JGVhY2g6IFtjdXJyZW50X3VzZXJfaWQsIGN1cnJlbnRfYXBwcm92ZS51c2VyXVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc19pZCk7XHJcblxyXG5cdFx0XHRjdXJyZW50X3VzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUoY3VycmVudF91c2VyX2lkKTtcclxuXHRcdFx0Ly/kvKDpmIXmj5DkuqTkuI3pgJrnn6XkvKDpmIXogIVcclxuXHRcdFx0aWYgKGZhbHNlICYmIGRlc2NyaXB0aW9uICYmIGN1cnJlbnRfYXBwcm92ZSAmJiBjdXJyZW50X2FwcHJvdmUuZnJvbV91c2VyKSB7XHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJ0cmFjZV9hcHByb3ZlX2NjX3N1Ym1pdFwiLCBpbnN0YW5jZSwgXCJcIiwgY3VycmVudF91c2VyX2luZm8sIFtjdXJyZW50X2FwcHJvdmUuZnJvbV91c2VyXSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCBjdXJyZW50X3VzZXJfaWQpO1xyXG5cclxuXHRcdFx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XHJcblx0XHRcdC8vIOWmguaenOW3sue7j+mFjee9rndlYmhvb2vlubblt7Lmv4DmtLvliJnop6blj5FcclxuXHRcdFx0cHVzaE1hbmFnZXIudHJpZ2dlcldlYmhvb2soZmxvd19pZCwgaW5zdGFuY2UsIGN1cnJlbnRfYXBwcm92ZSwgJ2NjX3N1Ym1pdCcsIGN1cnJlbnRfdXNlcl9pZCwgW10pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNjX3JlbW92ZTogZnVuY3Rpb24gKGluc3RhbmNlSWQsIGFwcHJvdmVJZCkge1xyXG5cdFx0dmFyIHNldE9iaiA9IHt9O1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlSWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0dHJhY2VzOiAxLFxyXG5cdFx0XHRcdGNjX3VzZXJzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHRcdHZhciB0cmFjZV9pZCwgcmVtb3ZlX3VzZXJfaWQsIG11bHRpID0gZmFsc2U7XHJcblxyXG5cdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0aWYgKHQuYXBwcm92ZXMpIHtcclxuXHRcdFx0XHR0LmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRcdFx0aWYgKGEuX2lkID09IGFwcHJvdmVJZCkge1xyXG5cdFx0XHRcdFx0XHR0cmFjZV9pZCA9IGEudHJhY2U7XHJcblx0XHRcdFx0XHRcdHJlbW92ZV91c2VyX2lkID0gYS5oYW5kbGVyO1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSAndGVybWluYXRlZCc7XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZmluaXNoX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0aWYgKCF0cmFjZV9pZCB8fCAhcmVtb3ZlX3VzZXJfaWQpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR2YXIgbXVsdGkgPSAwO1xyXG5cdFx0dHJhY2VzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0aWYgKHQuYXBwcm92ZXMpIHtcclxuXHRcdFx0XHR0LmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcclxuXHRcdFx0XHRcdGlmIChhLmhhbmRsZXIgPT0gcmVtb3ZlX3VzZXJfaWQgJiYgYS50eXBlID09ICdjYycgJiYgYS5pc19maW5pc2hlZCA9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRtdWx0aSsrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XHJcblx0XHRzZXRPYmoubW9kaWZpZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHRpZiAobXVsdGkgPiAxKSB7XHJcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcclxuXHRcdFx0XHQndHJhY2VzLl9pZCc6IHRyYWNlX2lkXHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHQkc2V0OiBzZXRPYmpcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0J3RyYWNlcy5faWQnOiB0cmFjZV9pZFxyXG5cdFx0XHR9LCB7XHJcblx0XHRcdFx0JHNldDogc2V0T2JqLFxyXG5cdFx0XHRcdCRwdWxsOiB7XHJcblx0XHRcdFx0XHRjY191c2VyczogcmVtb3ZlX3VzZXJfaWRcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgcmVtb3ZlX3VzZXJfaWQpO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHJcblx0Y2Nfc2F2ZTogZnVuY3Rpb24gKGluc19pZCwgZGVzY3JpcHRpb24pIHtcclxuXHRcdHZhciBzZXRPYmogPSB7fTtcclxuXHJcblx0XHR2YXIgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnNfaWQsIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0dHJhY2VzOiAxXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIHRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcztcclxuXHRcdHZhciBjdXJyZW50X3VzZXJfaWQgPSB0aGlzLnVzZXJJZDtcclxuXHJcblx0XHR2YXIgY3VycmVudF9hcHByb3ZlO1xyXG5cclxuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0dC5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdGlmIChhLmhhbmRsZXIgPT0gY3VycmVudF91c2VyX2lkICYmIGEudHlwZSA9PSAnY2MnICYmIGEuaXNfZmluaXNoZWQgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0Y3VycmVudF9hcHByb3ZlID0gYTtcclxuXHRcdFx0XHRcdFx0dmFyIHVwb2JqID0ge307XHJcblx0XHRcdFx0XHRcdHVwb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gXCJzdWJtaXR0ZWRcIjtcclxuXHRcdFx0XHRcdFx0dXBvYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLnJlYWRfZGF0ZSddID0gbmV3IERhdGUoKTtcclxuXHRcdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdFx0X2lkOiBpbnNfaWQsXHJcblx0XHRcdFx0XHRcdFx0J3RyYWNlcy5faWQnOiB0Ll9pZFxyXG5cdFx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdFx0JHNldDogdXBvYmpcclxuXHRcdFx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0dmFyIGluZGV4ID0gMDtcclxuXHJcblx0XHQvL+iuvue9ruaEj+inge+8jOaEj+ingeWPqua3u+WKoOWIsOacgOWQjuS4gOadoWFwcHJvdmXkuK1cclxuXHRcdHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdGlmIChjdXJyZW50X2FwcHJvdmUgJiYgdC5faWQgPT09IGN1cnJlbnRfYXBwcm92ZS50cmFjZSkge1xyXG5cdFx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0XHR0LmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGlkeCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoYS5faWQgPT09IGN1cnJlbnRfYXBwcm92ZS5faWQpIHtcclxuXHRcdFx0XHRcdFx0XHRpbmRleCA9IGlkeDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpbmRleCArICcuZGVzY3JpcHRpb24nXSA9IGRlc2NyaXB0aW9uO1xyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRfaWQ6IGluc19pZCxcclxuXHRcdFx0J3RyYWNlcy5faWQnOiBjdXJyZW50X2FwcHJvdmUudHJhY2VcclxuXHRcdH0sIHtcclxuXHRcdFx0JHNldDogc2V0T2JqXHJcblx0XHR9KTtcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcbn0pIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG5cdC8vIOaUueS4uumAmui/h2Fwaeiwg+eUqFxyXG5cdGZvcndhcmRfaW5zdGFuY2U6IGZ1bmN0aW9uIChpbnN0YW5jZV9pZCwgc3BhY2VfaWQsIGZsb3dfaWQsIGhhc1NhdmVJbnN0YW5jZVRvQXR0YWNobWVudCwgZGVzY3JpcHRpb24sIGlzRm9yd2FyZEF0dGFjaG1lbnRzLCBzZWxlY3RlZFVzZXJzLCBhY3Rpb25fdHlwZSwgcmVsYXRlZCwgZnJvbV9hcHByb3ZlX2lkKSB7XHJcblx0XHRpZiAoIXRoaXMudXNlcklkKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdub3QtYXV0aG9yaXplZCcpO1xyXG5cclxuXHRcdHJldHVybjtcclxuXHR9LFxyXG5cclxuXHJcblx0Zm9yd2FyZF9yZW1vdmU6IGZ1bmN0aW9uIChpbnN0YW5jZV9pZCwgdHJhY2VfaWQsIGFwcHJvdmVfaWQpIHtcclxuXHRcdGNoZWNrKGluc3RhbmNlX2lkLCBTdHJpbmcpO1xyXG5cdFx0Y2hlY2sodHJhY2VfaWQsIFN0cmluZyk7XHJcblx0XHRjaGVjayhhcHByb3ZlX2lkLCBTdHJpbmcpO1xyXG5cclxuXHRcdHZhciBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZV9pZCk7XHJcblxyXG5cdFx0aWYgKCFpbnMpIHtcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcigncGFyYW1zIGVycm9yIScsICdyZWNvcmQgbm90IGV4aXN0cyEnKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdHJhY2UgPSBfLmZpbmQoaW5zLnRyYWNlcywgZnVuY3Rpb24gKHQpIHtcclxuXHRcdFx0cmV0dXJuIHQuX2lkID09IHRyYWNlX2lkO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dmFyIGFwcHJvdmUgPSBfLmZpbmQodHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uIChhcHByKSB7XHJcblx0XHRcdHJldHVybiBhcHByLl9pZCA9PSBhcHByb3ZlX2lkO1xyXG5cdFx0fSlcclxuXHJcblx0XHR2YXIgaGFzQWRtaW5QZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0Zsb3dBZG1pblBlcm1pc3Npb24oaW5zLmZsb3csIGlucy5zcGFjZSwgdGhpcy51c2VySWQpXHJcblxyXG5cdFx0aWYgKCFhcHByb3ZlIHx8ICFbJ2ZvcndhcmQnLCAnZGlzdHJpYnV0ZSddLmluY2x1ZGVzKGFwcHJvdmUudHlwZSkgfHwgIWFwcHJvdmUuZm9yd2FyZF9pbnN0YW5jZSkge1xyXG5cdFx0XHRpZiAoIWhhc0FkbWluUGVybWlzc2lvbikge1xyXG5cdFx0XHRcdGlmIChhcHByb3ZlLmZyb21fdXNlciAhPSB0aGlzLnVzZXJJZClcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsICdpbnN0YW5jZV9mb3J3YXJkX2Nhbm5vdF9jYW5jZWwnKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBmb3J3YXJkX2luc3RhbmNlX2lkID0gYXBwcm92ZS5mb3J3YXJkX2luc3RhbmNlO1xyXG5cdFx0dmFyIGZvcndhcmRfaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShmb3J3YXJkX2luc3RhbmNlX2lkKTtcclxuXHRcdGlmIChmb3J3YXJkX2luc3RhbmNlKSB7XHJcblx0XHRcdGlmIChmb3J3YXJkX2luc3RhbmNlLnN0YXRlICE9IFwiZHJhZnRcIikge1xyXG5cdFx0XHRcdGlmICghaGFzQWRtaW5QZXJtaXNzaW9uKVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgJ2luc3RhbmNlX2ZvcndhcmRfaW5zdGFuY2Vfc3RhdGVfY2hhbmdlZCcpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBpbmJveF91c2VycyA9IGZvcndhcmRfaW5zdGFuY2UuaW5ib3hfdXNlcnMgfHwgW107XHJcblxyXG5cdFx0XHRmb3J3YXJkX2luc3RhbmNlLmRlbGV0ZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRmb3J3YXJkX2luc3RhbmNlLmRlbGV0ZWRfYnkgPSB0aGlzLnVzZXJJZDtcclxuXHRcdFx0dmFyIGRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCA9IGRiLmRlbGV0ZWRfaW5zdGFuY2VzLmluc2VydChmb3J3YXJkX2luc3RhbmNlKTtcclxuXHRcdFx0aWYgKGRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCkge1xyXG5cdFx0XHRcdGRiLmluc3RhbmNlcy5yZW1vdmUoe1xyXG5cdFx0XHRcdFx0X2lkOiBmb3J3YXJkX2luc3RhbmNlX2lkXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vIOWIoOmZpOeUs+ivt+WNleWQjumHjeaWsOiuoeeul2luYm94X3VzZXJz55qEYmFkZ2VcclxuXHRcdFx0XHRfLmVhY2goaW5ib3hfdXNlcnMsIGZ1bmN0aW9uICh1X2lkKSB7XHJcblx0XHRcdFx0XHRwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdV9pZCk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBzZXRfb2JqID0gbmV3IE9iamVjdDtcclxuXHRcdHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0c2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xyXG5cclxuXHRcdF8uZWFjaCh0cmFjZS5hcHByb3ZlcywgZnVuY3Rpb24gKGFwcHIsIGlkeCkge1xyXG5cdFx0XHRpZiAoYXBwci5faWQgPT0gYXBwcm92ZV9pZCkge1xyXG5cdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSAndGVybWluYXRlZCc7XHJcblx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZmluaXNoZWQnXSA9IHRydWU7XHJcblx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZmluaXNoX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZTtcclxuXHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5ldyBEYXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdF9pZDogaW5zdGFuY2VfaWQsXHJcblx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZV9pZFxyXG5cdFx0fSwge1xyXG5cdFx0XHQkc2V0OiBzZXRfb2JqXHJcblx0XHR9KVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdGNhbmNlbERpc3RyaWJ1dGU6IGZ1bmN0aW9uIChpbnN0YW5jZV9pZCwgYXBwcm92ZV9pZHMpIHtcclxuXHRcdGNoZWNrKGluc3RhbmNlX2lkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhhcHByb3ZlX2lkcywgQXJyYXkpXHJcblxyXG5cdFx0dmFyIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlX2lkKVxyXG5cclxuXHRcdGlmICghaW5zKSB7XHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3BhcmFtcyBlcnJvciEnLCAncmVjb3JkIG5vdCBleGlzdHMhJylcclxuXHRcdH1cclxuXHJcblx0XHR1c2VySWQgPSB0aGlzLnVzZXJJZFxyXG5cclxuXHRcdHZhciBoYXNBZG1pblBlcm1pc3Npb24gPSBXb3JrZmxvd01hbmFnZXIuaGFzRmxvd0FkbWluUGVybWlzc2lvbihpbnMuZmxvdywgaW5zLnNwYWNlLCB1c2VySWQpXHJcblxyXG5cdFx0Xy5lYWNoKGlucy50cmFjZXMsIGZ1bmN0aW9uICh0KSB7XHJcblx0XHRcdGlmICh0LmFwcHJvdmVzKSB7XHJcblx0XHRcdFx0dmFyIGV4aXN0cyA9IGZhbHNlXHJcblx0XHRcdFx0dmFyIHNldF9vYmogPSBuZXcgT2JqZWN0XHJcblx0XHRcdFx0Xy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uIChhLCBpZHgpIHtcclxuXHRcdFx0XHRcdGlmIChhcHByb3ZlX2lkcy5pbmNsdWRlcyhhLl9pZCkgJiYgKGEuZnJvbV91c2VyID09IHVzZXJJZCB8fCBoYXNBZG1pblBlcm1pc3Npb24pICYmICdkaXN0cmlidXRlJyA9PSBhLnR5cGUgJiYgYS5mb3J3YXJkX2luc3RhbmNlKSB7XHJcblx0XHRcdFx0XHRcdHZhciBmb3J3YXJkX2luc3RhbmNlX2lkID0gYS5mb3J3YXJkX2luc3RhbmNlXHJcblx0XHRcdFx0XHRcdHZhciBmb3J3YXJkX2luc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoZm9yd2FyZF9pbnN0YW5jZV9pZClcclxuXHRcdFx0XHRcdFx0aWYgKGZvcndhcmRfaW5zdGFuY2UpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoZm9yd2FyZF9pbnN0YW5jZS5zdGF0ZSAhPSBcImRyYWZ0XCIpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR2YXIgaW5ib3hfdXNlcnMgPSBmb3J3YXJkX2luc3RhbmNlLmluYm94X3VzZXJzIHx8IFtdXHJcblxyXG5cdFx0XHRcdFx0XHRcdGZvcndhcmRfaW5zdGFuY2UuZGVsZXRlZCA9IG5ldyBEYXRlKClcclxuXHRcdFx0XHRcdFx0XHRmb3J3YXJkX2luc3RhbmNlLmRlbGV0ZWRfYnkgPSB1c2VySWRcclxuXHRcdFx0XHRcdFx0XHR2YXIgZGVsZXRlZF9mb3J3YXJkX2luc3RhbmNlX2lkID0gZGIuZGVsZXRlZF9pbnN0YW5jZXMuaW5zZXJ0KGZvcndhcmRfaW5zdGFuY2UpXHJcblx0XHRcdFx0XHRcdFx0aWYgKGRlbGV0ZWRfZm9yd2FyZF9pbnN0YW5jZV9pZCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnJlbW92ZSh7XHJcblx0XHRcdFx0XHRcdFx0XHRcdF9pZDogZm9yd2FyZF9pbnN0YW5jZV9pZFxyXG5cdFx0XHRcdFx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyDliKDpmaTnlLPor7fljZXlkI7ph43mlrDorqHnrpdpbmJveF91c2Vyc+eahGJhZGdlXHJcblx0XHRcdFx0XHRcdFx0XHRfLmVhY2goaW5ib3hfdXNlcnMsIGZ1bmN0aW9uICh1X2lkKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCB1X2lkKVxyXG5cdFx0XHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSAndGVybWluYXRlZCdcclxuXHRcdFx0XHRcdFx0XHRzZXRfb2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19maW5pc2hlZCddID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmZpbmlzaF9kYXRlJ10gPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0XHRcdFx0c2V0X29ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdHNldF9vYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLnJlYWRfZGF0ZSddID0gbmV3IERhdGUoKVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRleGlzdHMgPSB0cnVlXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0aWYgKCFleGlzdHMpXHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdFx0c2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKClcclxuXHRcdFx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdXNlcklkXHJcblxyXG5cdFx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe1xyXG5cdFx0XHRcdFx0X2lkOiBpbnN0YW5jZV9pZCxcclxuXHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiB0Ll9pZFxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdCRzZXQ6IHNldF9vYmpcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdHJldHVybiB0cnVlXHJcblx0fVxyXG5cclxuXHJcbn0pIiwiTWV0ZW9yLm1ldGhvZHMoe1xyXG4gICAgY2ZzX2luc3RhbmNlc19yZW1vdmU6IGZ1bmN0aW9uIChmaWxlX2lkKSB7XHJcbiAgICAgICAgY2hlY2soZmlsZV9pZCwgU3RyaW5nKTtcclxuICAgICAgICBjZnMuaW5zdGFuY2VzLnJlbW92ZShmaWxlX2lkKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgY2ZzX2luc3RhbmNlc19zZXRfY3VycmVudDogZnVuY3Rpb24gKGZpbGVfaWQpIHtcclxuICAgICAgICBjaGVjayhmaWxlX2lkLCBTdHJpbmcpO1xyXG4gICAgICAgIGNmcy5pbnN0YW5jZXMudXBkYXRlKHtcclxuICAgICAgICAgICAgX2lkOiBmaWxlX2lkXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAkc2V0OiB7XHJcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICBjZnNfaW5zdGFuY2VzX2xvY2s6IGZ1bmN0aW9uIChmaWxlX2lkLCB1c2VyX2lkLCB1c2VyX25hbWUpIHtcclxuICAgICAgICBjZnMuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIF9pZDogZmlsZV9pZFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgJHNldDoge1xyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF9ieSc6IHVzZXJfaWQsXHJcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEubG9ja2VkX2J5X25hbWUnOiB1c2VyX25hbWUsXHJcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEubG9ja2VkX3RpbWUnOiBuZXcgRGF0ZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgY2ZzX2luc3RhbmNlc191bmxvY2s6IGZ1bmN0aW9uIChmaWxlX2lkKSB7XHJcbiAgICAgICAgY2ZzLmluc3RhbmNlcy51cGRhdGUoe1xyXG4gICAgICAgICAgICBfaWQ6IGZpbGVfaWRcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICR1bnNldDoge1xyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF9ieSc6ICcnLFxyXG4gICAgICAgICAgICAgICAgJ21ldGFkYXRhLmxvY2tlZF9ieV9uYW1lJzogJycsXHJcbiAgICAgICAgICAgICAgICAnbWV0YWRhdGEubG9ja2VkX3RpbWUnOiAnJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIGRvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2s6IGZ1bmN0aW9uIChzcGFjZUlkLCBjZnNSZWNvcmRJZHMpIHtcclxuICAgICAgICBpZiAoIXRoaXMudXNlcklkKVxyXG4gICAgICAgICAgICByZXR1cm4gXCLkuI3nrKblkIjmiafooYzmnaHku7ZcIlxyXG5cclxuICAgICAgICBpZiAoTWV0ZW9yLnVzZXJzLmZpbmQoe1xyXG4gICAgICAgICAgICAgICAgX2lkOiB0aGlzLnVzZXJJZCxcclxuICAgICAgICAgICAgICAgIGlzX2Nsb3VkYWRtaW46IHRydWVcclxuICAgICAgICAgICAgfSkuY291bnQoKSA8IDEpXHJcbiAgICAgICAgICAgIHJldHVybiBcIuS4jeespuWQiOaJp+ihjOadoeS7tlwiXHJcblxyXG4gICAgICAgIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XHJcblxyXG4gICAgICAgIHZhciBzdG9yZSA9IFwiaW5zdGFuY2VzXCI7XHJcbiAgICAgICAgdmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcclxuICAgICAgICB2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuICAgICAgICB2YXIgbWtkaXJwID0gcmVxdWlyZSgnbWtkaXJwJyk7XHJcbiAgICAgICAgdmFyIHBhdGhuYW1lID0gcGF0aC5qb2luKF9fbWV0ZW9yX2Jvb3RzdHJhcF9fLnNlcnZlckRpciwgJy4uLy4uLy4uL2Nmcy9zcGFjZUluc3RhbmNlQXR0YWNobWVudHMnKTtcclxuICAgICAgICAvLyBTZXQgYWJzb2x1dGUgcGF0aFxyXG4gICAgICAgIHZhciBhYnNvbHV0ZVBhdGggPSBwYXRoLnJlc29sdmUocGF0aG5hbWUpO1xyXG4gICAgICAgIC8vIEVuc3VyZSB0aGUgcGF0aCBleGlzdHNcclxuICAgICAgICBta2RpcnAuc3luYyhhYnNvbHV0ZVBhdGgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdhYnNvbHV0ZVBhdGg6ICcsIGFic29sdXRlUGF0aCk7XHJcbiAgICAgICAgY29uc29sZS50aW1lKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrJyk7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0ge1xyXG4gICAgICAgICAgICAnbWV0YWRhdGEuc3BhY2UnOiBzcGFjZUlkXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjZnNSZWNvcmRJZHMpIHtcclxuICAgICAgICAgICAgcXVlcnkuX2lkID0ge1xyXG4gICAgICAgICAgICAgICAgJGluOiBjZnNSZWNvcmRJZHNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRvd25sb2FkRmFpbGVkUmVjb3JkSWRzID0gW107XHJcbiAgICAgICAgY2ZzLmluc3RhbmNlcy5maW5kKHF1ZXJ5KS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBzdG9yZSArICctJyArIGMuX2lkICsgJy0nICsgYy5uYW1lKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVBhdGggPSBwYXRoLmpvaW4oYWJzb2x1dGVQYXRoLCBmaWxlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBNZXRlb3Iud3JhcEFzeW5jKGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cml0ZXIgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShmaWxlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci5vbignZmluaXNoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gYy5jcmVhdGVSZWFkU3RyZWFtKHN0b3JlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRGYWlsZWRSZWNvcmRJZHMucHVzaChjLl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrOiAnLCBjLl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiBfLmlzRnVuY3Rpb24oY2FsbGJhY2spKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnBpcGUod3JpdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdkb3dubG9hZF9zcGFjZV9pbnN0YW5jZV9hdHRhY2htZW50c190b19kaXNrOiAnLCBjLl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkoKVxyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Rvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2s6ICcsIGMuX2lkKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGlmIChkb3dubG9hZEZhaWxlZFJlY29yZElkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Rvd25sb2FkRmFpbGVkUmVjb3JkSWRzOiAnKTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkb3dubG9hZEZhaWxlZFJlY29yZElkcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ2Rvd25sb2FkX3NwYWNlX2luc3RhbmNlX2F0dGFjaG1lbnRzX3RvX2Rpc2snKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRvd25sb2FkRmFpbGVkUmVjb3JkSWRzO1xyXG4gICAgfVxyXG59KSIsIk1ldGVvci5tZXRob2RzXHJcblx0c2V0X2FwcHJvdmVfaGF2ZV9yZWFkOiAoaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkKSAtPlxyXG5cdFx0aWYgIXRoaXMudXNlcklkXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHNlbGYgPSB0aGlzXHJcblxyXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7IF9pZDogaW5zdGFuY2VJZCwgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWQgfSwgeyBmaWVsZHM6IHsgXCJ0cmFjZXMuJFwiOiAxIH0gfSlcclxuXHJcblx0XHRpZiBpbnN0YW5jZT8udHJhY2VzPy5sZW5ndGggPiAwXHJcblx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXHJcblx0XHRcdHNldE9iaiA9IHtcclxuXHRcdFx0XHRtb2RpZmllZDogbmV3IERhdGUsXHJcblx0XHRcdFx0bW9kaWZpZWRfYnk6IHNlbGYudXNlcklkXHJcblx0XHRcdH1cclxuXHRcdFx0dHJhY2UuYXBwcm92ZXMuZm9yRWFjaCAoYXBwcm92ZSwgaWR4KSAtPlxyXG5cdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IGFwcHJvdmVJZCAmJiAhYXBwcm92ZS5pc19yZWFkXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uaXNfcmVhZFwiXSA9IHRydWVcclxuXHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXHJcblxyXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcclxuXHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXHJcblx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0JHNldDogc2V0T2JqXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblx0Y2hhbmdlX2FwcHJvdmVfaW5mbzogKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgZGVzY3JpcHRpb24sIGZpbmlzaF9kYXRlKSAtPlxyXG5cdFx0aWYgIXRoaXMudXNlcklkXHJcblx0XHRcdHJldHVyblxyXG5cdFx0Y2hlY2soaW5zdGFuY2VJZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2sodHJhY2VJZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soYXBwcm92ZUlkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhkZXNjcmlwdGlvbiwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soZmluaXNoX2RhdGUsIERhdGUpXHJcblxyXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7IF9pZDogaW5zdGFuY2VJZCwgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWQgfSwgeyBmaWVsZHM6IHsgXCJ0cmFjZXMuJFwiOiAxIH0gfSlcclxuXHJcblx0XHRpZiBpbnN0YW5jZT8udHJhY2VzPy5sZW5ndGggPiAwXHJcblx0XHRcdHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdXHJcblx0XHRcdHNldE9iaiA9IHt9XHJcblx0XHRcdHRyYWNlLmFwcHJvdmVzLmZvckVhY2ggKGFwcHJvdmUsIGlkeCkgLT5cclxuXHRcdFx0XHRpZiBhcHByb3ZlLl9pZCA9PSBhcHByb3ZlSWRcclxuXHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5kZXNjcmlwdGlvblwiXSA9IGRlc2NyaXB0aW9uXHJcblx0XHRcdFx0XHRzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uZmluaXNoX2RhdGVcIl0gPSBmaW5pc2hfZGF0ZVxyXG5cdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LmNvc3RfdGltZVwiXSA9IG5ldyBEYXRlKCkgLSBhcHByb3ZlLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXHJcblxyXG5cdFx0XHRpZiBub3QgXy5pc0VtcHR5KHNldE9iailcclxuXHRcdFx0XHRkYi5pbnN0YW5jZXMudXBkYXRlKHtcclxuXHRcdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcclxuXHRcdFx0XHRcdFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXHJcblx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0JHNldDogc2V0T2JqXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblx0dXBkYXRlX2FwcHJvdmVfc2lnbjogKGluc3RhbmNlSWQsIHRyYWNlSWQsIGFwcHJvdmVJZCwgc2lnbl9maWVsZF9jb2RlLCBkZXNjcmlwdGlvbiwgc2lnbl90eXBlLCBsYXN0U2lnbkFwcHJvdmUpLT5cclxuXHRcdGNoZWNrKGluc3RhbmNlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKHRyYWNlSWQsIFN0cmluZylcclxuXHRcdGNoZWNrKGFwcHJvdmVJZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2soc2lnbl9maWVsZF9jb2RlLCBTdHJpbmcpXHJcblx0XHRjaGVjayhkZXNjcmlwdGlvbiwgU3RyaW5nKVxyXG5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRzZXNzaW9uX3VzZXJJZCA9IHRoaXMudXNlcklkXHJcblxyXG5cdFx0aWYgbGFzdFNpZ25BcHByb3ZlXHJcblxyXG5cdFx0XHRpZiBsYXN0U2lnbkFwcHJvdmUuY3VzdG9tX3NpZ25fc2hvd1xyXG5cdFx0XHRcdHJldHVyblxyXG5cclxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XHJcblx0XHRcdFx0X2lkOiBpbnN0YW5jZUlkLFxyXG5cdFx0XHRcdFwidHJhY2VzLl9pZFwiOiBsYXN0U2lnbkFwcHJvdmUudHJhY2VcclxuXHRcdFx0fSwgeyBmaWVsZHM6IHsgXCJ0cmFjZXMuJFwiOiAxIH0gfSlcclxuXHJcblx0XHRcdGxhc3RUcmFjZSA9IF8uZmluZCBpbnN0YW5jZT8udHJhY2VzLCAodCkgLT5cclxuXHRcdFx0XHRyZXR1cm4gdC5faWQgPSBsYXN0U2lnbkFwcHJvdmUudHJhY2VcclxuXHJcblx0XHRcdGlmIGxhc3RUcmFjZVxyXG5cdFx0XHRcdHNldE9iaiA9IHt9XHJcblx0XHRcdFx0bGFzdFRyYWNlPy5hcHByb3Zlcy5mb3JFYWNoIChhLCBpZHgpIC0+XHJcblx0XHRcdFx0XHRpZiBhLl9pZCA9PSBsYXN0U2lnbkFwcHJvdmUuX2lkXHJcblx0XHRcdFx0XHRcdGlmIHNpZ25fdHlwZSA9PSBcInVwZGF0ZVwiXHJcblx0XHRcdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LnNpZ25fc2hvd1wiXSA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9Lm1vZGlmaWVkXCJdID0gbmV3IERhdGUoKVxyXG5cdFx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZF9ieVwiXSA9IHNlc3Npb25fdXNlcklkXHJcblxyXG5cdFx0XHRcdGlmIG5vdCBfLmlzRW1wdHkoc2V0T2JqKVxyXG5cdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdF9pZDogaW5zdGFuY2VJZCxcclxuXHRcdFx0XHRcdFx0XCJ0cmFjZXMuX2lkXCI6IGxhc3RUcmFjZS5faWRcclxuXHRcdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdFx0JHNldDogc2V0T2JqXHJcblx0XHRcdFx0XHR9KVxyXG5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IGluc3RhbmNlSWQsIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkIH0sIHsgZmllbGRzOiB7IFwidHJhY2VzLiRcIjogMSB9IH0pXHJcblxyXG5cdFx0aWYgaW5zdGFuY2U/LnRyYWNlcz8ubGVuZ3RoID4gMFxyXG5cclxuXHRcdFx0dHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF1cclxuXHRcdFx0dXBPYmogPSB7fVxyXG5cdFx0XHR0cmFjZS5hcHByb3Zlcy5mb3JFYWNoIChhcHByb3ZlLCBpZHgpIC0+XHJcblx0XHRcdFx0aWYgYXBwcm92ZS5faWQgPT0gYXBwcm92ZUlkXHJcblx0XHRcdFx0XHRpZiBzaWduX2ZpZWxkX2NvZGVcclxuXHRcdFx0XHRcdFx0dXBPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy4je2lkeH0uc2lnbl9maWVsZF9jb2RlXCJdID0gc2lnbl9maWVsZF9jb2RlXHJcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5kZXNjcmlwdGlvblwiXSA9IGRlc2NyaXB0aW9uXHJcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5zaWduX3Nob3dcIl0gPSB0cnVlXHJcblx0XHRcdFx0XHR1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5tb2RpZmllZFwiXSA9IG5ldyBEYXRlKClcclxuXHRcdFx0XHRcdHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9Lm1vZGlmaWVkX2J5XCJdID0gc2Vzc2lvbl91c2VySWRcclxuXHRcdFx0XHRcdHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKClcclxuXHJcblx0XHRcdGlmIG5vdCBfLmlzRW1wdHkodXBPYmopXHJcblx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRfaWQ6IGluc3RhbmNlSWQsXHJcblx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogdHJhY2VJZFxyXG5cdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdCRzZXQ6IHVwT2JqXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHJcblxyXG5cdHVwZGF0ZV9zaWduX3Nob3c6IChvYmpzLCBteUFwcHJvdmVfaWQpIC0+XHJcblx0XHRvYmpzLmZvckVhY2ggKG9iaiwgaW5kZXgpIC0+XHJcblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoeyBfaWQ6IG9iai5pbnN0YW5jZSwgXCJ0cmFjZXMuX2lkXCI6IG9iai50cmFjZSB9LCB7IGZpZWxkczogeyBcInRyYWNlcy4kXCI6IDEgfSB9KVxyXG5cdFx0XHRpZiBpbnN0YW5jZT8udHJhY2VzPy5sZW5ndGggPiAwXHJcblx0XHRcdFx0dHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF1cclxuXHRcdFx0XHRzZXRPYmogPSB7fVxyXG5cdFx0XHRcdHRyYWNlLmFwcHJvdmVzLmZvckVhY2ggKGFwcHJvdmUsIGlkeCkgLT5cclxuXHRcdFx0XHRcdGlmIGFwcHJvdmUuX2lkID09IG9iai5faWRcclxuXHRcdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LnNpZ25fc2hvd1wiXSA9IG9iai5zaWduX3Nob3dcclxuXHRcdFx0XHRcdFx0c2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuI3tpZHh9LmN1c3RvbV9zaWduX3Nob3dcIl0gPSBvYmouc2lnbl9zaG93XHJcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXHJcblxyXG5cdFx0XHRcdFx0aWYgYXBwcm92ZS5faWQgPT0gbXlBcHByb3ZlX2lkXHJcblx0XHRcdFx0XHRcdHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLiN7aWR4fS5yZWFkX2RhdGVcIl0gPSBuZXcgRGF0ZSgpXHJcblxyXG5cdFx0XHRcdGlmIG5vdCBfLmlzRW1wdHkoc2V0T2JqKVxyXG5cdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XHJcblx0XHRcdFx0XHRcdF9pZDogb2JqLmluc3RhbmNlLFxyXG5cdFx0XHRcdFx0XHRcInRyYWNlcy5faWRcIjogb2JqLnRyYWNlXHJcblx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdCRzZXQ6IHNldE9ialxyXG5cdFx0XHRcdFx0fSlcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIHNldF9hcHByb3ZlX2hhdmVfcmVhZDogZnVuY3Rpb24oaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHNlbGYsIHNldE9iaiwgdHJhY2U7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWxmID0gdGhpcztcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLiRcIjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgoaW5zdGFuY2UgIT0gbnVsbCA/IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgIHRyYWNlID0gaW5zdGFuY2UudHJhY2VzWzBdO1xuICAgICAgc2V0T2JqID0ge1xuICAgICAgICBtb2RpZmllZDogbmV3IERhdGUsXG4gICAgICAgIG1vZGlmaWVkX2J5OiBzZWxmLnVzZXJJZFxuICAgICAgfTtcbiAgICAgIHRyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSwgaWR4KSB7XG4gICAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gYXBwcm92ZUlkICYmICFhcHByb3ZlLmlzX3JlYWQpIHtcbiAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmlzX3JlYWRcIl0gPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFfLmlzRW1wdHkoc2V0T2JqKSkge1xuICAgICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcbiAgICAgICAgfSwge1xuICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgY2hhbmdlX2FwcHJvdmVfaW5mbzogZnVuY3Rpb24oaW5zdGFuY2VJZCwgdHJhY2VJZCwgYXBwcm92ZUlkLCBkZXNjcmlwdGlvbiwgZmluaXNoX2RhdGUpIHtcbiAgICB2YXIgaW5zdGFuY2UsIHJlZiwgc2V0T2JqLCB0cmFjZTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNoZWNrKGluc3RhbmNlSWQsIFN0cmluZyk7XG4gICAgY2hlY2sodHJhY2VJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhhcHByb3ZlSWQsIFN0cmluZyk7XG4gICAgY2hlY2soZGVzY3JpcHRpb24sIFN0cmluZyk7XG4gICAgY2hlY2soZmluaXNoX2RhdGUsIERhdGUpO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgXCJ0cmFjZXMuJFwiOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKChpbnN0YW5jZSAhPSBudWxsID8gKHJlZiA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgdHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF07XG4gICAgICBzZXRPYmogPSB7fTtcbiAgICAgIHRyYWNlLmFwcHJvdmVzLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSwgaWR4KSB7XG4gICAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gYXBwcm92ZUlkKSB7XG4gICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5kZXNjcmlwdGlvblwiXSA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuZmluaXNoX2RhdGVcIl0gPSBmaW5pc2hfZGF0ZTtcbiAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLmNvc3RfdGltZVwiXSA9IG5ldyBEYXRlKCkgLSBhcHByb3ZlLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgcmV0dXJuIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIV8uaXNFbXB0eShzZXRPYmopKSB7XG4gICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgICAgICBcInRyYWNlcy5faWRcIjogdHJhY2VJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDogc2V0T2JqXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICB1cGRhdGVfYXBwcm92ZV9zaWduOiBmdW5jdGlvbihpbnN0YW5jZUlkLCB0cmFjZUlkLCBhcHByb3ZlSWQsIHNpZ25fZmllbGRfY29kZSwgZGVzY3JpcHRpb24sIHNpZ25fdHlwZSwgbGFzdFNpZ25BcHByb3ZlKSB7XG4gICAgdmFyIGluc3RhbmNlLCBsYXN0VHJhY2UsIHJlZiwgc2Vzc2lvbl91c2VySWQsIHNldE9iaiwgdHJhY2UsIHVwT2JqO1xuICAgIGNoZWNrKGluc3RhbmNlSWQsIFN0cmluZyk7XG4gICAgY2hlY2sodHJhY2VJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhhcHByb3ZlSWQsIFN0cmluZyk7XG4gICAgY2hlY2soc2lnbl9maWVsZF9jb2RlLCBTdHJpbmcpO1xuICAgIGNoZWNrKGRlc2NyaXB0aW9uLCBTdHJpbmcpO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2Vzc2lvbl91c2VySWQgPSB0aGlzLnVzZXJJZDtcbiAgICBpZiAobGFzdFNpZ25BcHByb3ZlKSB7XG4gICAgICBpZiAobGFzdFNpZ25BcHByb3ZlLmN1c3RvbV9zaWduX3Nob3cpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogaW5zdGFuY2VJZCxcbiAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IGxhc3RTaWduQXBwcm92ZS50cmFjZVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBcInRyYWNlcy4kXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsYXN0VHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UgIT0gbnVsbCA/IGluc3RhbmNlLnRyYWNlcyA6IHZvaWQgMCwgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5faWQgPSBsYXN0U2lnbkFwcHJvdmUudHJhY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChsYXN0VHJhY2UpIHtcbiAgICAgICAgc2V0T2JqID0ge307XG4gICAgICAgIGlmIChsYXN0VHJhY2UgIT0gbnVsbCkge1xuICAgICAgICAgIGxhc3RUcmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uKGEsIGlkeCkge1xuICAgICAgICAgICAgaWYgKGEuX2lkID09PSBsYXN0U2lnbkFwcHJvdmUuX2lkKSB7XG4gICAgICAgICAgICAgIGlmIChzaWduX3R5cGUgPT09IFwidXBkYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnNpZ25fc2hvd1wiXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIubW9kaWZpZWRcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLm1vZGlmaWVkX2J5XCJdID0gc2Vzc2lvbl91c2VySWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIV8uaXNFbXB0eShzZXRPYmopKSB7XG4gICAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgICBfaWQ6IGluc3RhbmNlSWQsXG4gICAgICAgICAgICBcInRyYWNlcy5faWRcIjogbGFzdFRyYWNlLl9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgXCJ0cmFjZXMuX2lkXCI6IHRyYWNlSWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgXCJ0cmFjZXMuJFwiOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKChpbnN0YW5jZSAhPSBudWxsID8gKHJlZiA9IGluc3RhbmNlLnRyYWNlcykgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgICAgdHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF07XG4gICAgICB1cE9iaiA9IHt9O1xuICAgICAgdHJhY2UuYXBwcm92ZXMuZm9yRWFjaChmdW5jdGlvbihhcHByb3ZlLCBpZHgpIHtcbiAgICAgICAgaWYgKGFwcHJvdmUuX2lkID09PSBhcHByb3ZlSWQpIHtcbiAgICAgICAgICBpZiAoc2lnbl9maWVsZF9jb2RlKSB7XG4gICAgICAgICAgICB1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuc2lnbl9maWVsZF9jb2RlXCJdID0gc2lnbl9maWVsZF9jb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuZGVzY3JpcHRpb25cIl0gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICB1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIuc2lnbl9zaG93XCJdID0gdHJ1ZTtcbiAgICAgICAgICB1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIubW9kaWZpZWRcIl0gPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIHVwT2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5tb2RpZmllZF9ieVwiXSA9IHNlc3Npb25fdXNlcklkO1xuICAgICAgICAgIHJldHVybiB1cE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIV8uaXNFbXB0eSh1cE9iaikpIHtcbiAgICAgICAgZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBpbnN0YW5jZUlkLFxuICAgICAgICAgIFwidHJhY2VzLl9pZFwiOiB0cmFjZUlkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiB1cE9ialxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlX3NpZ25fc2hvdzogZnVuY3Rpb24ob2JqcywgbXlBcHByb3ZlX2lkKSB7XG4gICAgb2Jqcy5mb3JFYWNoKGZ1bmN0aW9uKG9iaiwgaW5kZXgpIHtcbiAgICAgIHZhciBpbnN0YW5jZSwgcmVmLCBzZXRPYmosIHRyYWNlO1xuICAgICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogb2JqLmluc3RhbmNlLFxuICAgICAgICBcInRyYWNlcy5faWRcIjogb2JqLnRyYWNlXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIFwidHJhY2VzLiRcIjogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICgoaW5zdGFuY2UgIT0gbnVsbCA/IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgdHJhY2UgPSBpbnN0YW5jZS50cmFjZXNbMF07XG4gICAgICAgIHNldE9iaiA9IHt9O1xuICAgICAgICB0cmFjZS5hcHByb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uKGFwcHJvdmUsIGlkeCkge1xuICAgICAgICAgIGlmIChhcHByb3ZlLl9pZCA9PT0gb2JqLl9pZCkge1xuICAgICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5zaWduX3Nob3dcIl0gPSBvYmouc2lnbl9zaG93O1xuICAgICAgICAgICAgc2V0T2JqW1widHJhY2VzLiQuYXBwcm92ZXMuXCIgKyBpZHggKyBcIi5jdXN0b21fc2lnbl9zaG93XCJdID0gb2JqLnNpZ25fc2hvdztcbiAgICAgICAgICAgIHNldE9ialtcInRyYWNlcy4kLmFwcHJvdmVzLlwiICsgaWR4ICsgXCIucmVhZF9kYXRlXCJdID0gbmV3IERhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFwcHJvdmUuX2lkID09PSBteUFwcHJvdmVfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRPYmpbXCJ0cmFjZXMuJC5hcHByb3Zlcy5cIiArIGlkeCArIFwiLnJlYWRfZGF0ZVwiXSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFfLmlzRW1wdHkoc2V0T2JqKSkge1xuICAgICAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgICAgIF9pZDogb2JqLmluc3RhbmNlLFxuICAgICAgICAgICAgXCJ0cmFjZXMuX2lkXCI6IG9iai50cmFjZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHNldE9ialxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRpbnN0YW5jZV9yZXR1cm46IChhcHByb3ZlLCByZWFzb24pLT5cclxuXHRcdGNoZWNrKGFwcHJvdmUsIE9iamVjdClcclxuXHJcblx0XHRjdXJyZW50X3VzZXIgPSB0aGlzLnVzZXJJZFxyXG5cdFx0aW5zdGFuY2VfaWQgPSBhcHByb3ZlLmluc3RhbmNlXHJcblxyXG5cdFx0aW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdHNwYWNlX2lkID0gaW5zLnNwYWNlXHJcblxyXG5cdFx0IyAtIOW+heWuoeaguOeusVxyXG5cdFx0aWYgaW5zLnN0YXRlIGlzbnQgXCJwZW5kaW5nXCIgb3IgIWlucy5pbmJveF91c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXHJcblxyXG5cdFx0IyAtIOaWh+S7tuS4jeaYr+S8oOmYhVxyXG5cdFx0aWYgYXBwcm92ZS50eXBlIGlzIFwiY2NcIiBhbmQgaW5zLmNjX3VzZXJzLmluY2x1ZGVzKGN1cnJlbnRfdXNlcilcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIilcclxuXHJcblx0XHQjIC0g562+5qC45Y6G56iL5Lit5b2T5YmN5q2l6aqk5LiK5LiA5q2l6aqk5LiN5piv5Lya562+XHJcblx0XHRpZiBpbnMudHJhY2VzLmxlbmd0aCA8IDJcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIilcclxuXHRcdGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zLmZsb3cpXHJcblx0XHRwcmVfdHJhY2UgPSBpbnMudHJhY2VzW2lucy50cmFjZXMubGVuZ3RoIC0gMl1cclxuXHRcdHByZV9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgcHJlX3RyYWNlLnN0ZXApXHJcblx0XHRpZiBwcmVfc3RlcC5zdGVwX3R5cGUgaXMgXCJjb3VudGVyU2lnblwiXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXHJcblxyXG5cdFx0IyAtIOW9k+WJjeatpemqpOS4uuWhq+WGmeaIluiAheWuoeaJuVxyXG5cdFx0bGFzdF90cmFjZSA9IF8ubGFzdChpbnMudHJhY2VzKVxyXG5cdFx0Y3VycmVudF9zdGVwID0gdXVmbG93TWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgbGFzdF90cmFjZS5zdGVwKVxyXG5cdFx0aWYgY3VycmVudF9zdGVwLnN0ZXBfdHlwZSBpc250IFwic3VibWl0XCIgYW5kIGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgaXNudCBcInNpZ25cIiBhbmQgY3VycmVudF9zdGVwLnN0ZXBfdHlwZSBpc250IFwiY291bnRlclNpZ25cIlxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKVxyXG5cclxuXHRcdCMgLSDlj4LmlbBhcHByb3Zl5LitdHJhY2XkuI7lvZPliY3ojrflj5bnmoR0cmFjZeaYr+WQpuWMuemFjVxyXG5cdFx0aWYgYXBwcm92ZS50cmFjZSBpc250IGxhc3RfdHJhY2UuX2lkXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpXHJcblxyXG5cdFx0bmV3X2luYm94X3VzZXJzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2ggcHJlX3RyYWNlLmFwcHJvdmVzLCAoYSktPlxyXG5cdFx0XHRpZiAoIWEudHlwZSBvciBhLnR5cGUgaXMgXCJkcmFmdFwiIG9yIGEudHlwZSBpcyBcInJlYXNzaWduXCIpIGFuZCAoIWEuanVkZ2Ugb3IgYS5qdWRnZSBpcyBcInN1Ym1pdHRlZFwiIG9yIGEuanVkZ2UgaXMgXCJhcHByb3ZlZFwiIG9yIGEuanVkZ2UgaXMgXCJyZWplY3RlZFwiKVxyXG5cdFx0XHRcdG5ld19pbmJveF91c2Vycy5wdXNoKGEudXNlcilcclxuXHJcblx0XHRpZiBfLmlzRW1wdHkobmV3X2luYm94X3VzZXJzKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOS4i+S4gOatpeWkhOeQhuS6uu+8jOmAgOWbnuWksei0pVwiKVxyXG5cclxuXHRcdHRyYWNlcyA9IGlucy50cmFjZXNcclxuXHJcblx0XHRhcHByb3ZlX3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0QXBwcm92ZVZhbHVlcyhhcHByb3ZlLnZhbHVlcyB8fCB7fSwgY3VycmVudF9zdGVwLnBlcm1pc3Npb25zLCBpbnMuZm9ybSwgaW5zLmZvcm1fdmVyc2lvbilcclxuXHJcblx0XHRzZXRPYmogPSBuZXcgT2JqZWN0XHJcblx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0cmVzdF9jb3VudGVyX3VzZXJzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2ggdHJhY2VzLCAodCktPlxyXG5cdFx0XHRpZiB0Ll9pZCBpcyBsYXN0X3RyYWNlLl9pZFxyXG5cdFx0XHRcdGlmIG5vdCB0LmFwcHJvdmVzXHJcblx0XHRcdFx0XHR0LmFwcHJvdmVzID0gbmV3IEFycmF5XHJcblx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhLCBpZHgpLT5cclxuXHRcdFx0XHRcdGlmICghYS50eXBlIG9yIGEudHlwZSBpcyBcInJlYXNzaWduXCIpIGFuZCAoIWEuanVkZ2Ugb3IgYS5qdWRnZSBpcyBcInN1Ym1pdHRlZFwiIG9yIGEuanVkZ2UgaXMgXCJhcHByb3ZlZFwiIG9yIGEuanVkZ2UgaXMgXCJyZWplY3RlZFwiIG9yIGEuanVkZ2UgaXMgXCJyZWFkZWRcIikgYW5kIGEuaXNfZmluaXNoZWQgaXNudCB0cnVlXHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuZmluaXNoX2RhdGUnXSA9IG5vd1xyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLnJlYWRfZGF0ZSddID0gbm93XHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZXJyb3InXSA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfcmVhZCddID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmlzX2ZpbmlzaGVkJ10gPSB0cnVlXHJcblx0XHRcdFx0XHRcdHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuY29zdF90aW1lJ10gPSBub3cgLSBhLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy52YWx1ZXMnXSA9IGFwcHJvdmVfdmFsdWVzXHJcblx0XHRcdFx0XHRcdGlmIGEuaGFuZGxlciBpcyBjdXJyZW50X3VzZXJcclxuXHRcdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmp1ZGdlJ10gPSBcInJldHVybmVkXCJcclxuXHRcdFx0XHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLmRlc2NyaXB0aW9uJ10gPSByZWFzb25cclxuXHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdHJlc3RfY291bnRlcl91c2Vycy5wdXNoIGEuaGFuZGxlclxyXG5cclxuXHRcdFx0XHQjIOabtOaWsOW9k+WJjXRyYWNl6K6w5b2VXHJcblx0XHRcdFx0c2V0T2JqWyd0cmFjZXMuJC5pc19maW5pc2hlZCddID0gdHJ1ZVxyXG5cdFx0XHRcdHNldE9ialsndHJhY2VzLiQuZmluaXNoX2RhdGUnXSA9IHRydWVcclxuXHRcdFx0XHRzZXRPYmpbJ3RyYWNlcy4kLmp1ZGdlJ10gPSBcInJldHVybmVkXCJcclxuXHJcblx0XHRpbnMudmFsdWVzID0gXy5leHRlbmQoKGlucy52YWx1ZXMgfHwge30pLCBhcHByb3ZlX3ZhbHVlcylcclxuXHJcblx0XHQjIOaPkuWFpeS4i+S4gOatpXRyYWNl6K6w5b2VXHJcblx0XHRuZXdUcmFjZSA9IG5ldyBPYmplY3RcclxuXHRcdG5ld1RyYWNlLl9pZCA9IG5ldyBNb25nby5PYmplY3RJRCgpLl9zdHJcclxuXHRcdG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdG5ld1RyYWNlLnByZXZpb3VzX3RyYWNlX2lkcyA9IFtsYXN0X3RyYWNlLl9pZF1cclxuXHRcdG5ld1RyYWNlLmlzX2ZpbmlzaGVkID0gZmFsc2VcclxuXHRcdG5ld1RyYWNlLnN0ZXAgPSBwcmVfdHJhY2Uuc3RlcFxyXG5cdFx0bmV3VHJhY2UubmFtZSA9IHByZV90cmFjZS5uYW1lXHJcblx0XHRuZXdUcmFjZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRuZXdUcmFjZS5kdWVfZGF0ZSA9IHV1Zmxvd01hbmFnZXIuZ2V0RHVlRGF0ZShwcmVfc3RlcC50aW1lb3V0X2hvdXJzKVxyXG5cdFx0bmV3VHJhY2UuYXBwcm92ZXMgPSBbXVxyXG5cdFx0Xy5lYWNoIG5ld19pbmJveF91c2VycywgKG5leHRfc3RlcF91c2VyX2lkLCBpZHgpLT5cclxuXHRcdFx0IyDmj5LlhaXkuIvkuIDmraV0cmFjZS5hcHByb3Zl6K6w5b2VXHJcblx0XHRcdG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0XHJcblx0XHRcdG5ld0FwcHJvdmUuX2lkID0gbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0clxyXG5cdFx0XHRuZXdBcHByb3ZlLmluc3RhbmNlID0gaW5zdGFuY2VfaWRcclxuXHRcdFx0bmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZFxyXG5cdFx0XHRuZXdBcHByb3ZlLmlzX2ZpbmlzaGVkID0gZmFsc2VcclxuXHRcdFx0bmV3QXBwcm92ZS51c2VyID0gbmV4dF9zdGVwX3VzZXJfaWRcclxuXHJcblx0XHRcdHVzZXJfaW5mbyA9IGRiLnVzZXJzLmZpbmRPbmUobmV4dF9zdGVwX3VzZXJfaWQsIHtmaWVsZHM6IHtuYW1lOiAxfX0pXHJcblx0XHRcdG5ld0FwcHJvdmUudXNlcl9uYW1lID0gdXNlcl9pbmZvLm5hbWVcclxuXHJcblx0XHRcdGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZFxyXG5cdFx0XHRoYW5kbGVyX2luZm8gPSB1c2VyX2luZm9cclxuXHRcdFx0YWdlbnQgPSB1dWZsb3dNYW5hZ2VyLmdldEFnZW50KHNwYWNlX2lkLCBuZXh0X3N0ZXBfdXNlcl9pZClcclxuXHRcdFx0aWYgYWdlbnRcclxuXHRcdFx0XHRuZXdfaW5ib3hfdXNlcnNbaWR4XSA9IGFnZW50XHJcblx0XHRcdFx0aGFuZGxlcl9pZCA9IGFnZW50XHJcblx0XHRcdFx0aGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7IF9pZDogYWdlbnQgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSB9IH0pXHJcblx0XHRcdFx0bmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50XHJcblxyXG5cdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXIgPSBoYW5kbGVyX2lkXHJcblx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWVcclxuXHJcblx0XHRcdG5leHRfc3RlcF9zcGFjZV91c2VyID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXIoc3BhY2VfaWQsIGhhbmRsZXJfaWQpXHJcblx0XHRcdCMg6I635Y+WbmV4dF9zdGVwX3VzZXLmiYDlnKjnmoTpg6jpl6jkv6Hmga9cclxuXHRcdFx0bmV4dF9zdGVwX3VzZXJfb3JnX2luZm8gPSB1dWZsb3dNYW5hZ2VyLmdldFNwYWNlVXNlck9yZ0luZm8obmV4dF9zdGVwX3NwYWNlX3VzZXIpXHJcblx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXVxyXG5cdFx0XHRuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9uYW1lXCJdXHJcblx0XHRcdG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fZnVsbG5hbWUgPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvbl9mdWxsbmFtZVwiXVxyXG5cclxuXHRcdFx0bmV3QXBwcm92ZS5zdGFydF9kYXRlID0gbm93XHJcblx0XHRcdG5ld0FwcHJvdmUuaXNfcmVhZCA9IGZhbHNlXHJcblx0XHRcdG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZVxyXG5cdFx0XHRuZXdBcHByb3ZlLnZhbHVlcyA9IG5ldyBPYmplY3RcclxuXHRcdFx0dXVmbG93TWFuYWdlci5zZXRSZW1pbmRJbmZvKGlucy52YWx1ZXMsIG5ld0FwcHJvdmUpXHJcblx0XHRcdG5ld1RyYWNlLmFwcHJvdmVzLnB1c2gobmV3QXBwcm92ZSlcclxuXHJcblx0XHRzZXRPYmouaW5ib3hfdXNlcnMgPSBuZXdfaW5ib3hfdXNlcnNcclxuXHRcdHNldE9iai5zdGF0ZSA9IFwicGVuZGluZ1wiXHJcblxyXG5cdFx0aW5zLm91dGJveF91c2Vycy5wdXNoKGN1cnJlbnRfdXNlcilcclxuXHRcdHNldE9iai5vdXRib3hfdXNlcnMgPSBfLnVuaXEoaW5zLm91dGJveF91c2VycylcclxuXHRcdHNldE9iai5tb2RpZmllZCA9IG5vd1xyXG5cdFx0c2V0T2JqLm1vZGlmaWVkX2J5ID0gY3VycmVudF91c2VyXHJcblx0XHRzZXRPYmoudmFsdWVzID0gaW5zLnZhbHVlc1xyXG5cclxuXHRcdHNldE9iai5jdXJyZW50X3N0ZXBfbmFtZSA9IHByZV90cmFjZS5uYW1lXHJcblxyXG5cdFx0ciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zdGFuY2VfaWQsICd0cmFjZXMuX2lkJzogbGFzdF90cmFjZS5faWR9LCB7JHNldDogc2V0T2JqfSlcclxuXHRcdGIgPSBkYi5pbnN0YW5jZXMudXBkYXRlKHtfaWQ6IGluc3RhbmNlX2lkfSwgeyRwdXNoOiB7dHJhY2VzOiBuZXdUcmFjZX19KVxyXG5cdFx0aWYgciAmJiBiXHJcblx0XHRcdCMg5pawaW5ib3hfdXNlcnMg5ZKMIOW9k+WJjeeUqOaItyDlj5HpgIFwdXNoXHJcblx0XHRcdHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCBjdXJyZW50X3VzZXIpXHJcblx0XHRcdGluc3RhbmNlID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZClcclxuXHRcdFx0Y3VycmVudF91c2VyX2luZm8gPSBkYi51c2Vycy5maW5kT25lKGN1cnJlbnRfdXNlcilcclxuXHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZXR1cm5fcGVuZGluZ19pbmJveFwiLCBpbnN0YW5jZSwgcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbylcclxuXHRcdFx0IyDlpoLmnpzmmK/kvJrnrb7liJnnu5nkvJrnrb7mnKrmj5DkuqTnmoTkurrlj5HpgIFwdXNoXHJcblx0XHRcdF8uZWFjaCByZXN0X2NvdW50ZXJfdXNlcnMsICh1c2VyX2lkKS0+XHJcblx0XHRcdFx0cHVzaE1hbmFnZXIuc2VuZF9tZXNzYWdlX3RvX3NwZWNpZnlVc2VyKFwiY3VycmVudF91c2VyXCIsIHVzZXJfaWQpXHJcblx0XHRyZXR1cm4gdHJ1ZSIsIk1ldGVvci5tZXRob2RzKHtcbiAgaW5zdGFuY2VfcmV0dXJuOiBmdW5jdGlvbihhcHByb3ZlLCByZWFzb24pIHtcbiAgICB2YXIgYXBwcm92ZV92YWx1ZXMsIGIsIGN1cnJlbnRfc3RlcCwgY3VycmVudF91c2VyLCBjdXJyZW50X3VzZXJfaW5mbywgZmxvdywgaW5zLCBpbnN0YW5jZSwgaW5zdGFuY2VfaWQsIGxhc3RfdHJhY2UsIG5ld1RyYWNlLCBuZXdfaW5ib3hfdXNlcnMsIG5vdywgcHJlX3N0ZXAsIHByZV90cmFjZSwgciwgcmVzdF9jb3VudGVyX3VzZXJzLCBzZXRPYmosIHNwYWNlX2lkLCB0cmFjZXM7XG4gICAgY2hlY2soYXBwcm92ZSwgT2JqZWN0KTtcbiAgICBjdXJyZW50X3VzZXIgPSB0aGlzLnVzZXJJZDtcbiAgICBpbnN0YW5jZV9pZCA9IGFwcHJvdmUuaW5zdGFuY2U7XG4gICAgaW5zID0gdXVmbG93TWFuYWdlci5nZXRJbnN0YW5jZShpbnN0YW5jZV9pZCk7XG4gICAgc3BhY2VfaWQgPSBpbnMuc3BhY2U7XG4gICAgaWYgKGlucy5zdGF0ZSAhPT0gXCJwZW5kaW5nXCIgfHwgIWlucy5pbmJveF91c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKTtcbiAgICB9XG4gICAgaWYgKGFwcHJvdmUudHlwZSA9PT0gXCJjY1wiICYmIGlucy5jY191c2Vycy5pbmNsdWRlcyhjdXJyZW50X3VzZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKTtcbiAgICB9XG4gICAgaWYgKGlucy50cmFjZXMubGVuZ3RoIDwgMikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3nrKblkIjpgIDlm57mnaHku7ZcIik7XG4gICAgfVxuICAgIGZsb3cgPSB1dWZsb3dNYW5hZ2VyLmdldEZsb3coaW5zLmZsb3cpO1xuICAgIHByZV90cmFjZSA9IGlucy50cmFjZXNbaW5zLnRyYWNlcy5sZW5ndGggLSAyXTtcbiAgICBwcmVfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIHByZV90cmFjZS5zdGVwKTtcbiAgICBpZiAocHJlX3N0ZXAuc3RlcF90eXBlID09PSBcImNvdW50ZXJTaWduXCIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5LiN56ym5ZCI6YCA5Zue5p2h5Lu2XCIpO1xuICAgIH1cbiAgICBsYXN0X3RyYWNlID0gXy5sYXN0KGlucy50cmFjZXMpO1xuICAgIGN1cnJlbnRfc3RlcCA9IHV1Zmxvd01hbmFnZXIuZ2V0U3RlcChpbnMsIGZsb3csIGxhc3RfdHJhY2Uuc3RlcCk7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5zdGVwX3R5cGUgIT09IFwic3VibWl0XCIgJiYgY3VycmVudF9zdGVwLnN0ZXBfdHlwZSAhPT0gXCJzaWduXCIgJiYgY3VycmVudF9zdGVwLnN0ZXBfdHlwZSAhPT0gXCJjb3VudGVyU2lnblwiKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKTtcbiAgICB9XG4gICAgaWYgKGFwcHJvdmUudHJhY2UgIT09IGxhc3RfdHJhY2UuX2lkKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeespuWQiOmAgOWbnuadoeS7tlwiKTtcbiAgICB9XG4gICAgbmV3X2luYm94X3VzZXJzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChwcmVfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIGlmICgoIWEudHlwZSB8fCBhLnR5cGUgPT09IFwiZHJhZnRcIiB8fCBhLnR5cGUgPT09IFwicmVhc3NpZ25cIikgJiYgKCFhLmp1ZGdlIHx8IGEuanVkZ2UgPT09IFwic3VibWl0dGVkXCIgfHwgYS5qdWRnZSA9PT0gXCJhcHByb3ZlZFwiIHx8IGEuanVkZ2UgPT09IFwicmVqZWN0ZWRcIikpIHtcbiAgICAgICAgcmV0dXJuIG5ld19pbmJveF91c2Vycy5wdXNoKGEudXNlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKF8uaXNFbXB0eShuZXdfaW5ib3hfdXNlcnMpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOS4i+S4gOatpeWkhOeQhuS6uu+8jOmAgOWbnuWksei0pVwiKTtcbiAgICB9XG4gICAgdHJhY2VzID0gaW5zLnRyYWNlcztcbiAgICBhcHByb3ZlX3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0QXBwcm92ZVZhbHVlcyhhcHByb3ZlLnZhbHVlcyB8fCB7fSwgY3VycmVudF9zdGVwLnBlcm1pc3Npb25zLCBpbnMuZm9ybSwgaW5zLmZvcm1fdmVyc2lvbik7XG4gICAgc2V0T2JqID0gbmV3IE9iamVjdDtcbiAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICByZXN0X2NvdW50ZXJfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKHRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgaWYgKHQuX2lkID09PSBsYXN0X3RyYWNlLl9pZCkge1xuICAgICAgICBpZiAoIXQuYXBwcm92ZXMpIHtcbiAgICAgICAgICB0LmFwcHJvdmVzID0gbmV3IEFycmF5O1xuICAgICAgICB9XG4gICAgICAgIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhLCBpZHgpIHtcbiAgICAgICAgICBpZiAoKCFhLnR5cGUgfHwgYS50eXBlID09PSBcInJlYXNzaWduXCIpICYmICghYS5qdWRnZSB8fCBhLmp1ZGdlID09PSBcInN1Ym1pdHRlZFwiIHx8IGEuanVkZ2UgPT09IFwiYXBwcm92ZWRcIiB8fCBhLmp1ZGdlID09PSBcInJlamVjdGVkXCIgfHwgYS5qdWRnZSA9PT0gXCJyZWFkZWRcIikgJiYgYS5pc19maW5pc2hlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5maW5pc2hfZGF0ZSddID0gbm93O1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5yZWFkX2RhdGUnXSA9IG5vdztcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuaXNfZXJyb3InXSA9IGZhbHNlO1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19yZWFkJ10gPSB0cnVlO1xuICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5pc19maW5pc2hlZCddID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldE9ialsndHJhY2VzLiQuYXBwcm92ZXMuJyArIGlkeCArICcuY29zdF90aW1lJ10gPSBub3cgLSBhLnN0YXJ0X2RhdGU7XG4gICAgICAgICAgICBzZXRPYmpbJ3RyYWNlcy4kLmFwcHJvdmVzLicgKyBpZHggKyAnLnZhbHVlcyddID0gYXBwcm92ZV92YWx1ZXM7XG4gICAgICAgICAgICBpZiAoYS5oYW5kbGVyID09PSBjdXJyZW50X3VzZXIpIHtcbiAgICAgICAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5qdWRnZSddID0gXCJyZXR1cm5lZFwiO1xuICAgICAgICAgICAgICByZXR1cm4gc2V0T2JqWyd0cmFjZXMuJC5hcHByb3Zlcy4nICsgaWR4ICsgJy5kZXNjcmlwdGlvbiddID0gcmVhc29uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3RfY291bnRlcl91c2Vycy5wdXNoKGEuaGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5pc19maW5pc2hlZCddID0gdHJ1ZTtcbiAgICAgICAgc2V0T2JqWyd0cmFjZXMuJC5maW5pc2hfZGF0ZSddID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHNldE9ialsndHJhY2VzLiQuanVkZ2UnXSA9IFwicmV0dXJuZWRcIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpbnMudmFsdWVzID0gXy5leHRlbmQoaW5zLnZhbHVlcyB8fCB7fSwgYXBwcm92ZV92YWx1ZXMpO1xuICAgIG5ld1RyYWNlID0gbmV3IE9iamVjdDtcbiAgICBuZXdUcmFjZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgIG5ld1RyYWNlLmluc3RhbmNlID0gaW5zdGFuY2VfaWQ7XG4gICAgbmV3VHJhY2UucHJldmlvdXNfdHJhY2VfaWRzID0gW2xhc3RfdHJhY2UuX2lkXTtcbiAgICBuZXdUcmFjZS5pc19maW5pc2hlZCA9IGZhbHNlO1xuICAgIG5ld1RyYWNlLnN0ZXAgPSBwcmVfdHJhY2Uuc3RlcDtcbiAgICBuZXdUcmFjZS5uYW1lID0gcHJlX3RyYWNlLm5hbWU7XG4gICAgbmV3VHJhY2Uuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICBuZXdUcmFjZS5kdWVfZGF0ZSA9IHV1Zmxvd01hbmFnZXIuZ2V0RHVlRGF0ZShwcmVfc3RlcC50aW1lb3V0X2hvdXJzKTtcbiAgICBuZXdUcmFjZS5hcHByb3ZlcyA9IFtdO1xuICAgIF8uZWFjaChuZXdfaW5ib3hfdXNlcnMsIGZ1bmN0aW9uKG5leHRfc3RlcF91c2VyX2lkLCBpZHgpIHtcbiAgICAgIHZhciBhZ2VudCwgaGFuZGxlcl9pZCwgaGFuZGxlcl9pbmZvLCBuZXdBcHByb3ZlLCBuZXh0X3N0ZXBfc3BhY2VfdXNlciwgbmV4dF9zdGVwX3VzZXJfb3JnX2luZm8sIHVzZXJfaW5mbztcbiAgICAgIG5ld0FwcHJvdmUgPSBuZXcgT2JqZWN0O1xuICAgICAgbmV3QXBwcm92ZS5faWQgPSBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyO1xuICAgICAgbmV3QXBwcm92ZS5pbnN0YW5jZSA9IGluc3RhbmNlX2lkO1xuICAgICAgbmV3QXBwcm92ZS50cmFjZSA9IG5ld1RyYWNlLl9pZDtcbiAgICAgIG5ld0FwcHJvdmUuaXNfZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUudXNlciA9IG5leHRfc3RlcF91c2VyX2lkO1xuICAgICAgdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShuZXh0X3N0ZXBfdXNlcl9pZCwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBuYW1lOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbmV3QXBwcm92ZS51c2VyX25hbWUgPSB1c2VyX2luZm8ubmFtZTtcbiAgICAgIGhhbmRsZXJfaWQgPSBuZXh0X3N0ZXBfdXNlcl9pZDtcbiAgICAgIGhhbmRsZXJfaW5mbyA9IHVzZXJfaW5mbztcbiAgICAgIGFnZW50ID0gdXVmbG93TWFuYWdlci5nZXRBZ2VudChzcGFjZV9pZCwgbmV4dF9zdGVwX3VzZXJfaWQpO1xuICAgICAgaWYgKGFnZW50KSB7XG4gICAgICAgIG5ld19pbmJveF91c2Vyc1tpZHhdID0gYWdlbnQ7XG4gICAgICAgIGhhbmRsZXJfaWQgPSBhZ2VudDtcbiAgICAgICAgaGFuZGxlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgICAgICAgX2lkOiBhZ2VudFxuICAgICAgICB9LCB7XG4gICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3QXBwcm92ZS5hZ2VudCA9IGFnZW50O1xuICAgICAgfVxuICAgICAgbmV3QXBwcm92ZS5oYW5kbGVyID0gaGFuZGxlcl9pZDtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9uYW1lID0gaGFuZGxlcl9pbmZvLm5hbWU7XG4gICAgICBuZXh0X3N0ZXBfc3BhY2VfdXNlciA9IHV1Zmxvd01hbmFnZXIuZ2V0U3BhY2VVc2VyKHNwYWNlX2lkLCBoYW5kbGVyX2lkKTtcbiAgICAgIG5leHRfc3RlcF91c2VyX29yZ19pbmZvID0gdXVmbG93TWFuYWdlci5nZXRTcGFjZVVzZXJPcmdJbmZvKG5leHRfc3RlcF9zcGFjZV91c2VyKTtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb24gPSBuZXh0X3N0ZXBfdXNlcl9vcmdfaW5mb1tcIm9yZ2FuaXphdGlvblwiXTtcbiAgICAgIG5ld0FwcHJvdmUuaGFuZGxlcl9vcmdhbml6YXRpb25fbmFtZSA9IG5leHRfc3RlcF91c2VyX29yZ19pbmZvW1wib3JnYW5pemF0aW9uX25hbWVcIl07XG4gICAgICBuZXdBcHByb3ZlLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lID0gbmV4dF9zdGVwX3VzZXJfb3JnX2luZm9bXCJvcmdhbml6YXRpb25fZnVsbG5hbWVcIl07XG4gICAgICBuZXdBcHByb3ZlLnN0YXJ0X2RhdGUgPSBub3c7XG4gICAgICBuZXdBcHByb3ZlLmlzX3JlYWQgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUuaXNfZXJyb3IgPSBmYWxzZTtcbiAgICAgIG5ld0FwcHJvdmUudmFsdWVzID0gbmV3IE9iamVjdDtcbiAgICAgIHV1Zmxvd01hbmFnZXIuc2V0UmVtaW5kSW5mbyhpbnMudmFsdWVzLCBuZXdBcHByb3ZlKTtcbiAgICAgIHJldHVybiBuZXdUcmFjZS5hcHByb3Zlcy5wdXNoKG5ld0FwcHJvdmUpO1xuICAgIH0pO1xuICAgIHNldE9iai5pbmJveF91c2VycyA9IG5ld19pbmJveF91c2VycztcbiAgICBzZXRPYmouc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgICBpbnMub3V0Ym94X3VzZXJzLnB1c2goY3VycmVudF91c2VyKTtcbiAgICBzZXRPYmoub3V0Ym94X3VzZXJzID0gXy51bmlxKGlucy5vdXRib3hfdXNlcnMpO1xuICAgIHNldE9iai5tb2RpZmllZCA9IG5vdztcbiAgICBzZXRPYmoubW9kaWZpZWRfYnkgPSBjdXJyZW50X3VzZXI7XG4gICAgc2V0T2JqLnZhbHVlcyA9IGlucy52YWx1ZXM7XG4gICAgc2V0T2JqLmN1cnJlbnRfc3RlcF9uYW1lID0gcHJlX3RyYWNlLm5hbWU7XG4gICAgciA9IGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgX2lkOiBpbnN0YW5jZV9pZCxcbiAgICAgICd0cmFjZXMuX2lkJzogbGFzdF90cmFjZS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiBzZXRPYmpcbiAgICB9KTtcbiAgICBiID0gZGIuaW5zdGFuY2VzLnVwZGF0ZSh7XG4gICAgICBfaWQ6IGluc3RhbmNlX2lkXG4gICAgfSwge1xuICAgICAgJHB1c2g6IHtcbiAgICAgICAgdHJhY2VzOiBuZXdUcmFjZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChyICYmIGIpIHtcbiAgICAgIHB1c2hNYW5hZ2VyLnNlbmRfbWVzc2FnZV90b19zcGVjaWZ5VXNlcihcImN1cnJlbnRfdXNlclwiLCBjdXJyZW50X3VzZXIpO1xuICAgICAgaW5zdGFuY2UgPSB1dWZsb3dNYW5hZ2VyLmdldEluc3RhbmNlKGluc3RhbmNlX2lkKTtcbiAgICAgIGN1cnJlbnRfdXNlcl9pbmZvID0gZGIudXNlcnMuZmluZE9uZShjdXJyZW50X3VzZXIpO1xuICAgICAgcHVzaE1hbmFnZXIuc2VuZF9pbnN0YW5jZV9ub3RpZmljYXRpb24oXCJyZXR1cm5fcGVuZGluZ19pbmJveFwiLCBpbnN0YW5jZSwgcmVhc29uLCBjdXJyZW50X3VzZXJfaW5mbyk7XG4gICAgICBfLmVhY2gocmVzdF9jb3VudGVyX3VzZXJzLCBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgIHJldHVybiBwdXNoTWFuYWdlci5zZW5kX21lc3NhZ2VfdG9fc3BlY2lmeVVzZXIoXCJjdXJyZW50X3VzZXJcIiwgdXNlcl9pZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRpbnN0YW5jZV9yZW1pbmQ6IChyZW1pbmRfdXNlcnMsIHJlbWluZF9jb3VudCwgcmVtaW5kX2RlYWRsaW5lLCBpbnN0YW5jZV9pZCwgYWN0aW9uX3R5cGVzLCB0cmFjZV9pZCktPlxyXG5cdFx0Y2hlY2sgcmVtaW5kX3VzZXJzLCBBcnJheVxyXG5cdFx0Y2hlY2sgcmVtaW5kX2NvdW50LCBNYXRjaC5PbmVPZignc2luZ2xlJywgJ211bHRpJylcclxuXHRcdGNoZWNrIHJlbWluZF9kZWFkbGluZSwgRGF0ZVxyXG5cdFx0Y2hlY2sgaW5zdGFuY2VfaWQsIFN0cmluZ1xyXG5cdFx0Y2hlY2sgYWN0aW9uX3R5cGVzLCBBcnJheVxyXG5cdFx0Y2hlY2sgdHJhY2VfaWQsIFN0cmluZ1xyXG5cclxuXHRcdGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkXHJcblx0XHRsYXN0X3JlbWluZF91c2VycyA9IG5ldyBBcnJheVxyXG5cdFx0aW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VfaWR9LCB7ZmllbGRzOiB7bmFtZTogMSwgdHJhY2VzOiAxLCB2YWx1ZXM6IDEsIHNwYWNlOiAxfX0pXHJcblx0XHRpZiBhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2FkbWluJylcclxuXHRcdFx0aWYgcmVtaW5kX2NvdW50IGlzICdzaW5nbGUnXHJcblx0XHRcdFx0Xy5lYWNoIGlucy50cmFjZXMsICh0KS0+XHJcblx0XHRcdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGFwKS0+XHJcblx0XHRcdFx0XHRcdGlmIHJlbWluZF91c2Vycy5pbmNsdWRlcyhhcC51c2VyKSBhbmQgYXAuaXNfZmluaXNoZWQgaXNudCB0cnVlXHJcblx0XHRcdFx0XHRcdFx0bGFzdF9yZW1pbmRfdXNlcnMucHVzaCBhcC51c2VyXHJcblx0XHRcdGVsc2UgaWYgcmVtaW5kX2NvdW50IGlzICdtdWx0aSdcclxuXHRcdFx0XHRub3cgPSBuZXcgRGF0ZVxyXG5cdFx0XHRcdHByaW9yaXR5ID0gaW5zLnZhbHVlcy5wcmlvcml0eVxyXG5cdFx0XHRcdF8uZWFjaCBpbnMudHJhY2VzLCAodCktPlxyXG5cdFx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhcCktPlxyXG5cdFx0XHRcdFx0XHRpZiByZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgYW5kIGFwLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdGxhc3RfcmVtaW5kX3VzZXJzLnB1c2ggYXAudXNlclxyXG5cdFx0XHRcdFx0XHRcdGFwLm1hbnVhbF9kZWFkbGluZSA9IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdCMg77yIMe+8ieKAnOaZrumAmuKAne+8muWmguS4ieS4quW3peS9nOaXpeWGheacquWkhOeQhu+8jOezu+e7n+iHquWKqOWPkeefreS/oeaPkOmGku+8muWKnue7k+aXtumZkOS4uuS6jOaXpeWGhe+8m1xyXG5cdFx0XHRcdFx0XHRcdCMgIOWmguS6jOaXpeWQjuS7jeacquWkhOeQhu+8jOezu+e7n+avj+WkqeiHquWKqOWPkeefreS/oeaPkOmGku+8jOWKnue7k+aXtumZkOS4uuS4gOaXpeWGheOAglxyXG5cdFx0XHRcdFx0XHRcdGlmIHByaW9yaXR5IGlzIFwi5pmu6YCaXCIgb3Igbm90IHByaW9yaXR5XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRcdFx0XHQjIO+8iDLvvInigJzlip7mlofigJ3vvJrlpoLkuIDkuKrlt6XkvZzml6XlhoXmnKrlpITnkIbvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrooajljZXkuIrnmoTigJzlip7nu5Pml7bpmZDigJ3vvIjmlofkuablvZXlhaXnmoTml7bpl7TvvInvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDlpoLkuIDml6XlkI7ku43mnKrlpITnkIbvvIzns7vnu5/mr4/lpKnoh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuI3lj5jvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDot53nprvlip7nu5Pml7bpmZDkuLrljYrml6Xml7bvvIzliJnmr4/ljYrkuKrlt6XkvZzml6Xmj5DphpLlm5vmrKHvvJvotoXov4flip7nu5Pml7bpmZDlkI7ku43nhLbmjInnhafmr4/ljYrml6Xlm5vmrKHmj5DphpLjgIJcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi5Yqe5paHXCJcclxuXHRcdFx0XHRcdFx0XHRcdGlmIFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSAjIOi2hei/h+S6huWKnue7k+aXtumZkOaIluiAhei3neemu+WKnue7k+aXtumZkOWNiuaXpeWGhVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlID0gKGJhc2VfZGF0ZSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUobm93KVxyXG5cclxuXHRcdFx0XHRcdFx0XHQjIO+8iDPvvInigJzntKfmgKXigJ3vvJrlnKjlj5HpgIHnmoTlkIzml7bvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrooajljZXkuIrnmoTigJzlip7nu5Pml7bpmZDigJ3vvIjmlofkuablvZXlhaXnmoTml7bpl7TvvInvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDlpoLljYrml6XlhoXku43mnKrlpITnkIbvvIzns7vnu5/mr4/ljYrlpKnoh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuI3lj5jvvJvot53nprvlip7nu5Pml7bpmZDkuLrljYrml6Xml7bvvIzmr4/ljYrkuKrlt6XkvZzml6Xmj5DphpLlm5vmrKHvvJvotoXov4flip7nu5Pml7bpmZDlkI7ku43nhLbmjInnhafmr4/ljYrml6Xlm5vmrKHmj5DphpLjgIJcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi57Sn5oClXCJcclxuXHRcdFx0XHRcdFx0XHRcdGlmIFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSAjIOi2hei/h+S6huWKnue7k+aXtumZkOaIluiAhei3neemu+WKnue7k+aXtumZkOWNiuaXpeWGhVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlID0gKGJhc2VfZGF0ZSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUobm93KVxyXG5cclxuXHRcdFx0XHRcdFx0XHQjIO+8iDTvvInigJznibnmgKXigJ3vvJrlnKjlj5HpgIHnmoTlkIzml7bvvIzns7vnu5/oh6rliqjlj5Hnn63kv6Hmj5DphpLvvJrlip7nu5Pml7bpmZDkuLrooajljZXkuIrnmoTigJzlip7nu5Pml7bpmZDigJ3vvIjmlofkuablvZXlhaXnmoTml7bpl7TvvInvvJtcclxuXHRcdFx0XHRcdFx0XHQjICDlpoLljYrml6XlhoXku43mnKrlpITnkIbvvIzns7vnu5/mr4/ljYrkuKrlt6XkvZzml6Xmj5DphpLlm5vmrKHvvJrlip7nu5Pml7bpmZDkuI3lj5jvvJvotoXov4flip7nu5Pml7bpmZDlkI7ku43nhLbmjInnhafmr4/ljYrml6Xlm5vmrKHmj5DphpLjgIJcclxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmIHByaW9yaXR5IGlzIFwi54m55oClXCJcclxuXHRcdFx0XHRcdFx0XHRcdGlmIFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSAjIOi2hei/h+S6huWKnue7k+aXtumZkOaIluiAhei3neemu+WKnue7k+aXtumZkOWNiuaXpeWGhVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiBTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjYWN1bGF0ZV9kYXRlID0gKGJhc2VfZGF0ZSktPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgcGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmVcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhY3VsYXRlX2RhdGUobm93KVxyXG5cclxuXHRcdFx0XHRpZiBub3QgXy5pc0VtcHR5KGxhc3RfcmVtaW5kX3VzZXJzKVxyXG5cdFx0XHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnN0YW5jZV9pZH0sIHskc2V0OiB7J3RyYWNlcyc6IGlucy50cmFjZXN9fSlcclxuXHJcblx0XHRlbHNlIGlmIGFjdGlvbl90eXBlcy5pbmNsdWRlcygnYXBwbGljYW50JylcclxuXHRcdFx0dHJhY2UgPSBfLmZpbmQgaW5zLnRyYWNlcywgKHQpLT5cclxuXHRcdFx0XHRyZXR1cm4gdC5faWQgaXMgdHJhY2VfaWRcclxuXHRcdFx0Xy5lYWNoIHRyYWNlLmFwcHJvdmVzLCAoYXApLT5cclxuXHRcdFx0XHRpZiByZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgYW5kIGFwLmlzX2ZpbmlzaGVkIGlzbnQgdHJ1ZVxyXG5cdFx0XHRcdFx0bGFzdF9yZW1pbmRfdXNlcnMucHVzaCBhcC51c2VyXHJcblxyXG5cdFx0ZWxzZSBpZiBhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2NjJylcclxuXHRcdFx0Xy5lYWNoIGlucy50cmFjZXMsICh0KS0+XHJcblx0XHRcdFx0Xy5lYWNoIHQuYXBwcm92ZXMsIChhcCktPlxyXG5cdFx0XHRcdFx0aWYgcmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpIGFuZCBhcC5pc19maW5pc2hlZCBpc250IHRydWUgYW5kIGFwLnR5cGUgaXMgJ2NjJyBhbmQgYXAuZnJvbV91c2VyIGlzIGN1cnJlbnRfdXNlcl9pZFxyXG5cdFx0XHRcdFx0XHRsYXN0X3JlbWluZF91c2Vycy5wdXNoIGFwLnVzZXJcclxuXHJcblx0XHR1dWZsb3dNYW5hZ2VyLnNlbmRSZW1pbmRTTVMgaW5zLm5hbWUsIHJlbWluZF9kZWFkbGluZSwgbGFzdF9yZW1pbmRfdXNlcnMsIGlucy5zcGFjZSwgaW5zLl9pZFxyXG5cclxuXHRcdHJldHVybiB0cnVlXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgaW5zdGFuY2VfcmVtaW5kOiBmdW5jdGlvbihyZW1pbmRfdXNlcnMsIHJlbWluZF9jb3VudCwgcmVtaW5kX2RlYWRsaW5lLCBpbnN0YW5jZV9pZCwgYWN0aW9uX3R5cGVzLCB0cmFjZV9pZCkge1xuICAgIHZhciBjdXJyZW50X3VzZXJfaWQsIGlucywgbGFzdF9yZW1pbmRfdXNlcnMsIG5vdywgcHJpb3JpdHksIHRyYWNlO1xuICAgIGNoZWNrKHJlbWluZF91c2VycywgQXJyYXkpO1xuICAgIGNoZWNrKHJlbWluZF9jb3VudCwgTWF0Y2guT25lT2YoJ3NpbmdsZScsICdtdWx0aScpKTtcbiAgICBjaGVjayhyZW1pbmRfZGVhZGxpbmUsIERhdGUpO1xuICAgIGNoZWNrKGluc3RhbmNlX2lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGFjdGlvbl90eXBlcywgQXJyYXkpO1xuICAgIGNoZWNrKHRyYWNlX2lkLCBTdHJpbmcpO1xuICAgIGN1cnJlbnRfdXNlcl9pZCA9IHRoaXMudXNlcklkO1xuICAgIGxhc3RfcmVtaW5kX3VzZXJzID0gbmV3IEFycmF5O1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VfaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZTogMSxcbiAgICAgICAgdHJhY2VzOiAxLFxuICAgICAgICB2YWx1ZXM6IDEsXG4gICAgICAgIHNwYWNlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGFjdGlvbl90eXBlcy5pbmNsdWRlcygnYWRtaW4nKSkge1xuICAgICAgaWYgKHJlbWluZF9jb3VudCA9PT0gJ3NpbmdsZScpIHtcbiAgICAgICAgXy5lYWNoKGlucy50cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICByZXR1cm4gXy5lYWNoKHQuYXBwcm92ZXMsIGZ1bmN0aW9uKGFwKSB7XG4gICAgICAgICAgICBpZiAocmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpICYmIGFwLmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsYXN0X3JlbWluZF91c2Vycy5wdXNoKGFwLnVzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocmVtaW5kX2NvdW50ID09PSAnbXVsdGknKSB7XG4gICAgICAgIG5vdyA9IG5ldyBEYXRlO1xuICAgICAgICBwcmlvcml0eSA9IGlucy52YWx1ZXMucHJpb3JpdHk7XG4gICAgICAgIF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgcmV0dXJuIF8uZWFjaCh0LmFwcHJvdmVzLCBmdW5jdGlvbihhcCkge1xuICAgICAgICAgICAgdmFyIGNhY3VsYXRlX2RhdGU7XG4gICAgICAgICAgICBpZiAocmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpICYmIGFwLmlzX2ZpbmlzaGVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGxhc3RfcmVtaW5kX3VzZXJzLnB1c2goYXAudXNlcik7XG4gICAgICAgICAgICAgIGFwLm1hbnVhbF9kZWFkbGluZSA9IHJlbWluZF9kZWFkbGluZTtcbiAgICAgICAgICAgICAgaWYgKHByaW9yaXR5ID09PSBcIuaZrumAmlwiIHx8ICFwcmlvcml0eSkge1xuXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpb3JpdHkgPT09IFwi5Yqe5paHXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3cpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYXAucmVtaW5kX2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChTdGVlZG9zLmNhY3VsYXRlV29ya2luZ1RpbWUobm93LCAxKSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZSA9IGZ1bmN0aW9uKGJhc2VfZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGx1c19oYWxmZGF5X2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHBsdXNfaGFsZmRheV9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGx1c19oYWxmZGF5X2RhdGUgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhcC5yZW1pbmRfZGF0ZSA9IGJhc2VfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FjdWxhdGVfZGF0ZShub3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmlvcml0eSA9PT0gXCLntKfmgKVcIikge1xuICAgICAgICAgICAgICAgIGlmIChTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KG5vdykgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhcC5yZW1pbmRfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFN0ZWVkb3MuY2FjdWxhdGVXb3JraW5nVGltZShub3csIDEpID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICBjYWN1bGF0ZV9kYXRlID0gZnVuY3Rpb24oYmFzZV9kYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbHVzX2hhbGZkYXlfZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgcGx1c19oYWxmZGF5X2RhdGUgPSBTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVzX2hhbGZkYXlfZGF0ZSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGFwLnJlbWluZF9kYXRlID0gYmFzZV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUoU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShiYXNlX2RhdGUsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWN1bGF0ZV9kYXRlKG5vdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByaW9yaXR5ID09PSBcIueJueaApVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkobm93KSA+IHJlbWluZF9kZWFkbGluZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwLnJlbWluZF9kYXRlID0gU3RlZWRvcy5jYWN1bGF0ZVBsdXNIYWxmV29ya2luZ0RheShub3csIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoU3RlZWRvcy5jYWN1bGF0ZVdvcmtpbmdUaW1lKG5vdywgMSkgPiByZW1pbmRfZGVhZGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgIGNhY3VsYXRlX2RhdGUgPSBmdW5jdGlvbihiYXNlX2RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsdXNfaGFsZmRheV9kYXRlO1xuICAgICAgICAgICAgICAgICAgICBwbHVzX2hhbGZkYXlfZGF0ZSA9IFN0ZWVkb3MuY2FjdWxhdGVQbHVzSGFsZldvcmtpbmdEYXkoYmFzZV9kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdXNfaGFsZmRheV9kYXRlID4gcmVtaW5kX2RlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXAucmVtaW5kX2RhdGUgPSBiYXNlX2RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FjdWxhdGVfZGF0ZShTdGVlZG9zLmNhY3VsYXRlUGx1c0hhbGZXb3JraW5nRGF5KGJhc2VfZGF0ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY3VsYXRlX2RhdGUobm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghXy5pc0VtcHR5KGxhc3RfcmVtaW5kX3VzZXJzKSkge1xuICAgICAgICAgIGRiLmluc3RhbmNlcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBpbnN0YW5jZV9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgJ3RyYWNlcyc6IGlucy50cmFjZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0aW9uX3R5cGVzLmluY2x1ZGVzKCdhcHBsaWNhbnQnKSkge1xuICAgICAgdHJhY2UgPSBfLmZpbmQoaW5zLnRyYWNlcywgZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5faWQgPT09IHRyYWNlX2lkO1xuICAgICAgfSk7XG4gICAgICBfLmVhY2godHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKGFwKSB7XG4gICAgICAgIGlmIChyZW1pbmRfdXNlcnMuaW5jbHVkZXMoYXAudXNlcikgJiYgYXAuaXNfZmluaXNoZWQgIT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gbGFzdF9yZW1pbmRfdXNlcnMucHVzaChhcC51c2VyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb25fdHlwZXMuaW5jbHVkZXMoJ2NjJykpIHtcbiAgICAgIF8uZWFjaChpbnMudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYXApIHtcbiAgICAgICAgICBpZiAocmVtaW5kX3VzZXJzLmluY2x1ZGVzKGFwLnVzZXIpICYmIGFwLmlzX2ZpbmlzaGVkICE9PSB0cnVlICYmIGFwLnR5cGUgPT09ICdjYycgJiYgYXAuZnJvbV91c2VyID09PSBjdXJyZW50X3VzZXJfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0X3JlbWluZF91c2Vycy5wdXNoKGFwLnVzZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXVmbG93TWFuYWdlci5zZW5kUmVtaW5kU01TKGlucy5uYW1lLCByZW1pbmRfZGVhZGxpbmUsIGxhc3RfcmVtaW5kX3VzZXJzLCBpbnMuc3BhY2UsIGlucy5faWQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0bmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZDogKGRlYWxfdHlwZSwgc3RlcF9uYW1lLCBwYXJhbXMpIC0+XHJcblx0XHRjaGVjayBkZWFsX3R5cGUsIFN0cmluZ1xyXG5cdFx0Y2hlY2sgc3RlcF9uYW1lLCBTdHJpbmdcclxuXHRcdGNoZWNrIHBhcmFtcywgT2JqZWN0XHJcblxyXG5cdFx0c3RyID0gXCJcIlxyXG5cdFx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IHRoaXMudXNlcklkIH0sIHsgZmllbGRzOiB7IGxvY2FsZTogMSB9IH0pXHJcblx0XHQj6K6+572u5b2T5YmN6K+t6KiA546v5aKDXHJcblx0XHRsYW5nID0gJ2VuJ1xyXG5cdFx0aWYgdXNlci5sb2NhbGUgaXMgJ3poLWNuJ1xyXG5cdFx0XHRsYW5nID0gJ3poLUNOJ1xyXG5cclxuXHRcdCMg5oyH5a6a5a6h5om55bKX5L2NXHJcblx0XHRpZiBkZWFsX3R5cGUgaXMgJ2FwcGxpY2FudFJvbGUnXHJcblx0XHRcdGFwcHJvdmVyX3JvbGVzID0gcGFyYW1zLmFwcHJvdmVyX3JvbGVzXHJcblx0XHRcdHJvbGVzID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiB7ICRpbjogYXBwcm92ZXJfcm9sZXMgfSB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSkuZmV0Y2goKVxyXG5cdFx0XHRyb2xlc19uYW1lID0gXy5wbHVjayhyb2xlcywgJ25hbWUnKS50b1N0cmluZygpXHJcblx0XHRcdHN0ciA9IFRBUGkxOG4uX18gJ25leHRfc3RlcF91c2Vyc19ub3RfZm91bmQuYXBwbGljYW50X3JvbGUnLCB7IHN0ZXBfbmFtZTogc3RlcF9uYW1lLCByb2xlX25hbWU6IHJvbGVzX25hbWUgfSwgbGFuZ1xyXG5cclxuXHJcblx0XHRyZXR1cm4gc3RyXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgbmV4dF9zdGVwX3VzZXJzX25vdF9mb3VuZDogZnVuY3Rpb24oZGVhbF90eXBlLCBzdGVwX25hbWUsIHBhcmFtcykge1xuICAgIHZhciBhcHByb3Zlcl9yb2xlcywgbGFuZywgcm9sZXMsIHJvbGVzX25hbWUsIHN0ciwgdXNlcjtcbiAgICBjaGVjayhkZWFsX3R5cGUsIFN0cmluZyk7XG4gICAgY2hlY2soc3RlcF9uYW1lLCBTdHJpbmcpO1xuICAgIGNoZWNrKHBhcmFtcywgT2JqZWN0KTtcbiAgICBzdHIgPSBcIlwiO1xuICAgIHVzZXIgPSBkYi51c2Vycy5maW5kT25lKHtcbiAgICAgIF9pZDogdGhpcy51c2VySWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbG9jYWxlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgbGFuZyA9ICdlbic7XG4gICAgaWYgKHVzZXIubG9jYWxlID09PSAnemgtY24nKSB7XG4gICAgICBsYW5nID0gJ3poLUNOJztcbiAgICB9XG4gICAgaWYgKGRlYWxfdHlwZSA9PT0gJ2FwcGxpY2FudFJvbGUnKSB7XG4gICAgICBhcHByb3Zlcl9yb2xlcyA9IHBhcmFtcy5hcHByb3Zlcl9yb2xlcztcbiAgICAgIHJvbGVzID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBhcHByb3Zlcl9yb2xlc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIHJvbGVzX25hbWUgPSBfLnBsdWNrKHJvbGVzLCAnbmFtZScpLnRvU3RyaW5nKCk7XG4gICAgICBzdHIgPSBUQVBpMThuLl9fKCduZXh0X3N0ZXBfdXNlcnNfbm90X2ZvdW5kLmFwcGxpY2FudF9yb2xlJywge1xuICAgICAgICBzdGVwX25hbWU6IHN0ZXBfbmFtZSxcbiAgICAgICAgcm9sZV9uYW1lOiByb2xlc19uYW1lXG4gICAgICB9LCBsYW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufSk7XG4iLCJfZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKVxyXG5cclxuTWV0ZW9yLm1ldGhvZHNcclxuXHRpbnN0YW5jZU51bWJlckJ1aWxkZXI6IChzcGFjZUlkLCBuYW1lKS0+XHJcblxyXG5cdFx0bnVtYmVyUnVsZXMgPSBkYi5pbnN0YW5jZV9udW1iZXJfcnVsZXMuZmluZE9uZSh7c3BhY2U6IHNwYWNlSWQsIG5hbWU6IG5hbWV9KVxyXG5cclxuXHRcdGlmICFudW1iZXJSdWxlc1xyXG5cdFx0XHR0aHJvdyBuZXcgIE1ldGVvci5FcnJvcignZXJyb3IhJywgXCIje25hbWV9XCIpXHJcblxyXG5cdFx0ZGF0ZSA9IG5ldyBEYXRlKClcclxuXHJcblx0XHRjb250ZXh0ID0ge31cclxuXHJcblx0XHRjb250ZXh0Ll8gPSBfXHJcblxyXG5cdFx0X1lZWVkgPSBkYXRlLmdldEZ1bGxZZWFyKClcclxuXHJcblx0XHRfTlVNQkVSID0gKG51bWJlclJ1bGVzLm51bWJlciB8fCAwKSArIDFcclxuXHJcblx0XHRjb250ZXh0LllZWVkgPSBfLmNsb25lKF9ZWVlZKVxyXG5cclxuXHRcdGNvbnRleHQuTU0gPSBkYXRlLmdldE1vbnRoKCkgKyAxXHJcblxyXG5cdFx0Y29udGV4dC5tbSA9IGRhdGUuZ2V0TW9udGgoKSArIDFcclxuXHJcblx0XHRpZiBjb250ZXh0Lk1NIDwgMTBcclxuXHRcdFx0Y29udGV4dC5NTSA9IFwiMFwiICsgY29udGV4dC5NTVxyXG5cclxuXHRcdGNvbnRleHQuREQgPSBkYXRlLmdldERhdGUoKVxyXG5cclxuXHRcdGNvbnRleHQuZGQgPSBkYXRlLmdldERhdGUoKVxyXG5cclxuXHRcdGlmIGNvbnRleHQuREQgPCAxMFxyXG5cdFx0XHRjb250ZXh0LkREID0gXCIwXCIgKyBjb250ZXh0LkREXHJcblxyXG5cdFx0aWYgY29udGV4dC5ZWVlZICE9IG51bWJlclJ1bGVzLnllYXJcclxuXHRcdFx0X05VTUJFUiA9IG51bWJlclJ1bGVzLmZpcnN0X251bWJlciB8fCAxXHJcblxyXG5cdFx0Y29udGV4dC5OVU1CRVIgPSBfLmNsb25lKF9OVU1CRVIpXHJcblxyXG5cdFx0cnVsZXMgPSBudW1iZXJSdWxlcy5ydWxlcy5yZXBsYWNlKFwie1lZWVl9XCIsIFwiJyArIFlZWVkgKyAnXCIpLnJlcGxhY2UoXCJ7TU19XCIsIFwiJyArIE1NICsgJ1wiKS5yZXBsYWNlKFwie05VTUJFUn1cIiwgXCInICsgTlVNQkVSICsgJ1wiKVxyXG5cclxuXHRcdHNjcmlwdCA9IFwidmFyIG5ld05vID0gJyN7cnVsZXN9JzsgZXhwb3J0cy5uZXdObyA9IG5ld05vXCI7XHJcblxyXG5cdFx0dHJ5XHJcblx0XHRcdHJlcyA9IF9ldmFsKHNjcmlwdCwgXCJuZXdOb1wiLCBjb250ZXh0LCBmYWxzZSkubmV3Tm9cclxuXHJcblx0XHRcdGRiLmluc3RhbmNlX251bWJlcl9ydWxlcy51cGRhdGUoe19pZDogbnVtYmVyUnVsZXMuX2lkfSwgeyRzZXQ6IHt5ZWFyOiBfWVlZWSwgbnVtYmVyOiBfTlVNQkVSfX0pXHJcblxyXG5cdFx0XHRjb25zb2xlLmxvZyB0aGlzLnVzZXJJZCwgcmVzXHJcblxyXG5cdFx0Y2F0Y2ggZVxyXG5cdFx0XHRyZXMgPSB7X2Vycm9yOiBlfVxyXG5cclxuXHRcdHJldHVybiByZXM7XHJcbiIsInZhciBfZXZhbDtcblxuX2V2YWwgPSByZXF1aXJlKCdldmFsJyk7XG5cbk1ldGVvci5tZXRob2RzKHtcbiAgaW5zdGFuY2VOdW1iZXJCdWlsZGVyOiBmdW5jdGlvbihzcGFjZUlkLCBuYW1lKSB7XG4gICAgdmFyIF9OVU1CRVIsIF9ZWVlZLCBjb250ZXh0LCBkYXRlLCBlLCBudW1iZXJSdWxlcywgcmVzLCBydWxlcywgc2NyaXB0O1xuICAgIG51bWJlclJ1bGVzID0gZGIuaW5zdGFuY2VfbnVtYmVyX3J1bGVzLmZpbmRPbmUoe1xuICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG4gICAgaWYgKCFudW1iZXJSdWxlcykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJcIiArIG5hbWUpO1xuICAgIH1cbiAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb250ZXh0ID0ge307XG4gICAgY29udGV4dC5fID0gXztcbiAgICBfWVlZWSA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICBfTlVNQkVSID0gKG51bWJlclJ1bGVzLm51bWJlciB8fCAwKSArIDE7XG4gICAgY29udGV4dC5ZWVlZID0gXy5jbG9uZShfWVlZWSk7XG4gICAgY29udGV4dC5NTSA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gICAgY29udGV4dC5tbSA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gICAgaWYgKGNvbnRleHQuTU0gPCAxMCkge1xuICAgICAgY29udGV4dC5NTSA9IFwiMFwiICsgY29udGV4dC5NTTtcbiAgICB9XG4gICAgY29udGV4dC5ERCA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgIGNvbnRleHQuZGQgPSBkYXRlLmdldERhdGUoKTtcbiAgICBpZiAoY29udGV4dC5ERCA8IDEwKSB7XG4gICAgICBjb250ZXh0LkREID0gXCIwXCIgKyBjb250ZXh0LkREO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5ZWVlZICE9PSBudW1iZXJSdWxlcy55ZWFyKSB7XG4gICAgICBfTlVNQkVSID0gbnVtYmVyUnVsZXMuZmlyc3RfbnVtYmVyIHx8IDE7XG4gICAgfVxuICAgIGNvbnRleHQuTlVNQkVSID0gXy5jbG9uZShfTlVNQkVSKTtcbiAgICBydWxlcyA9IG51bWJlclJ1bGVzLnJ1bGVzLnJlcGxhY2UoXCJ7WVlZWX1cIiwgXCInICsgWVlZWSArICdcIikucmVwbGFjZShcIntNTX1cIiwgXCInICsgTU0gKyAnXCIpLnJlcGxhY2UoXCJ7TlVNQkVSfVwiLCBcIicgKyBOVU1CRVIgKyAnXCIpO1xuICAgIHNjcmlwdCA9IFwidmFyIG5ld05vID0gJ1wiICsgcnVsZXMgKyBcIic7IGV4cG9ydHMubmV3Tm8gPSBuZXdOb1wiO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBfZXZhbChzY3JpcHQsIFwibmV3Tm9cIiwgY29udGV4dCwgZmFsc2UpLm5ld05vO1xuICAgICAgZGIuaW5zdGFuY2VfbnVtYmVyX3J1bGVzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDogbnVtYmVyUnVsZXMuX2lkXG4gICAgICB9LCB7XG4gICAgICAgICRzZXQ6IHtcbiAgICAgICAgICB5ZWFyOiBfWVlZWSxcbiAgICAgICAgICBudW1iZXI6IF9OVU1CRVJcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnVzZXJJZCwgcmVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZSA9IGVycm9yO1xuICAgICAgcmVzID0ge1xuICAgICAgICBfZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRjaGVja19tYWluX2F0dGFjaDogKGluc19pZCwgbmFtZSktPlxyXG5cdFx0Y2hlY2sgaW5zX2lkLCBTdHJpbmdcclxuXHRcdHV1Zmxvd01hbmFnZXIuY2hlY2tNYWluQXR0YWNoKGluc19pZCwgbmFtZSlcclxuXHRcdHJldHVybiAnc3VjY2VzcydcclxuXHJcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0cmVtb3ZlX3JlbGF0ZWQ6IChpbnNfaWQsIHJlX2luc19pZCktPlxyXG5cdFx0Y2hlY2soaW5zX2lkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhyZV9pbnNfaWQsIFN0cmluZylcclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWR9LCB7ZmllbGRzOiB7cmVsYXRlZF9pbnN0YW5jZXM6IDF9fSlcclxuXHJcblx0XHRpZiBpbnNcclxuXHRcdFx0cmVzID0gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIHx8IFtdXHJcblxyXG5cdFx0XHRpbmRleCA9IHJlcy5pbmRleE9mKHJlX2luc19pZClcclxuXHJcblx0XHRcdGlmIGluZGV4ID4gLTFcclxuXHRcdFx0XHRyZXMucmVtb3ZlKGluZGV4KVxyXG5cclxuXHRcdFx0c2V0X29iaiA9IG5ldyBPYmplY3Q7XHJcblx0XHRcdHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XHJcblx0XHRcdHNldF9vYmoucmVsYXRlZF9pbnN0YW5jZXMgPSByZXNcclxuXHJcblx0XHRcdGRiLmluc3RhbmNlcy51cGRhdGUoe19pZDogaW5zX2lkfSwgeyRzZXQ6IHNldF9vYmp9KVxyXG5cclxuXHR1cGRhdGVfaW5zdGFuY2VfcmVsYXRlZDogKGluc19pZCwgcmVsYXRlZF9pbnN0YW5jZXMpLT5cclxuXHRcdGNoZWNrKGluc19pZCwgU3RyaW5nKVxyXG5cdFx0Y2hlY2socmVsYXRlZF9pbnN0YW5jZXMsIEFycmF5KVxyXG5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnNfaWQsICRvcjogW3tzdWJtaXR0ZXI6IHRoaXMudXNlcklkfSwge2FwcGxpY2FudDogdGhpcy51c2VySWR9LCB7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dfSwge2ZpZWxkczoge3N0YXRlOiAxfX0pXHJcblxyXG5cdFx0aWYgaW5zXHJcblx0XHRcdHNldF9vYmogPSBuZXcgT2JqZWN0O1xyXG5cdFx0XHRzZXRfb2JqLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcclxuXHRcdFx0c2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xyXG5cdFx0XHRzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVsYXRlZF9pbnN0YW5jZXNcclxuXHRcdFx0ZGIuaW5zdGFuY2VzLnVwZGF0ZSh7X2lkOiBpbnNfaWR9LCB7JHNldDogc2V0X29ian0pXHJcblxyXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW46ICByZWxhdGVkX2luc3RhbmNlc319LCB7ZmllbGRzOiB7X2lkOiAxLCB2YWx1ZXM6IDF9fSkuZmV0Y2goKVxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIHJlbW92ZV9yZWxhdGVkOiBmdW5jdGlvbihpbnNfaWQsIHJlX2luc19pZCkge1xuICAgIHZhciBpbmRleCwgaW5zLCByZXMsIHNldF9vYmo7XG4gICAgY2hlY2soaW5zX2lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlX2luc19pZCwgU3RyaW5nKTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zX2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHJlbGF0ZWRfaW5zdGFuY2VzOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlucykge1xuICAgICAgcmVzID0gaW5zLnJlbGF0ZWRfaW5zdGFuY2VzIHx8IFtdO1xuICAgICAgaW5kZXggPSByZXMuaW5kZXhPZihyZV9pbnNfaWQpO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgcmVzLnJlbW92ZShpbmRleCk7XG4gICAgICB9XG4gICAgICBzZXRfb2JqID0gbmV3IE9iamVjdDtcbiAgICAgIHNldF9vYmoubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuICAgICAgc2V0X29iai5tb2RpZmllZF9ieSA9IHRoaXMudXNlcklkO1xuICAgICAgc2V0X29iai5yZWxhdGVkX2luc3RhbmNlcyA9IHJlcztcbiAgICAgIHJldHVybiBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDogc2V0X29ialxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICB1cGRhdGVfaW5zdGFuY2VfcmVsYXRlZDogZnVuY3Rpb24oaW5zX2lkLCByZWxhdGVkX2luc3RhbmNlcykge1xuICAgIHZhciBpbnMsIHNldF9vYmo7XG4gICAgY2hlY2soaW5zX2lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlbGF0ZWRfaW5zdGFuY2VzLCBBcnJheSk7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc19pZCxcbiAgICAgICRvcjogW1xuICAgICAgICB7XG4gICAgICAgICAgc3VibWl0dGVyOiB0aGlzLnVzZXJJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgYXBwbGljYW50OiB0aGlzLnVzZXJJZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgaW5ib3hfdXNlcnM6IHRoaXMudXNlcklkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjY191c2VyczogdGhpcy51c2VySWRcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnMpIHtcbiAgICAgIHNldF9vYmogPSBuZXcgT2JqZWN0O1xuICAgICAgc2V0X29iai5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG4gICAgICBzZXRfb2JqLm1vZGlmaWVkX2J5ID0gdGhpcy51c2VySWQ7XG4gICAgICBzZXRfb2JqLnJlbGF0ZWRfaW5zdGFuY2VzID0gcmVsYXRlZF9pbnN0YW5jZXM7XG4gICAgICBkYi5pbnN0YW5jZXMudXBkYXRlKHtcbiAgICAgICAgX2lkOiBpbnNfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgJHNldDogc2V0X29ialxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgICBfaWQ6IHtcbiAgICAgICAgJGluOiByZWxhdGVkX2luc3RhbmNlc1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBfaWQ6IDEsXG4gICAgICAgIHZhbHVlczogMVxuICAgICAgfVxuICAgIH0pLmZldGNoKCk7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHR1cGRhdGVGbG93UG9zaXRpb246IChkYXRhKSAtPlxyXG5cdFx0ZGIuZmxvd19wb3NpdGlvbnMudXBkYXRlIHsgX2lkOiBkYXRhLl9pZCB9LCAkc2V0OlxyXG5cdFx0XHRyb2xlOiBkYXRhLnJvbGVcclxuXHRcdFx0dXNlcnM6IGRhdGEudXNlcnNcclxuXHRcdFx0b3JnOiBkYXRhLm9yZ1xyXG5cclxuXHR1cGRhdGVGbG93Um9sZTogKGRhdGEpIC0+XHJcblx0XHRjb25zb2xlLmxvZyBkYXRhLl9pZFxyXG5cdFx0Y29uc29sZS5sb2cgZGF0YS5uYW1lXHJcblx0XHRkYi5mbG93X3JvbGVzLnVwZGF0ZSB7IF9pZDogZGF0YS5faWQgfSwgJHNldDpcclxuXHRcdFx0bmFtZTogZGF0YS5uYW1lIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICB1cGRhdGVGbG93UG9zaXRpb246IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gZGIuZmxvd19wb3NpdGlvbnMudXBkYXRlKHtcbiAgICAgIF9pZDogZGF0YS5faWRcbiAgICB9LCB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIHJvbGU6IGRhdGEucm9sZSxcbiAgICAgICAgdXNlcnM6IGRhdGEudXNlcnMsXG4gICAgICAgIG9yZzogZGF0YS5vcmdcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgdXBkYXRlRmxvd1JvbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhkYXRhLl9pZCk7XG4gICAgY29uc29sZS5sb2coZGF0YS5uYW1lKTtcbiAgICByZXR1cm4gZGIuZmxvd19yb2xlcy51cGRhdGUoe1xuICAgICAgX2lkOiBkYXRhLl9pZFxuICAgIH0sIHtcbiAgICAgICRzZXQ6IHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRzdGFydF9mbG93OiAoc3BhY2UsIGZsb3dJZCwgc3RhcnQpIC0+XHJcblxyXG5cdFx0a2V5VmFsdWUgPSBkYi5zdGVlZG9zX2tleXZhbHVlcy5maW5kT25lKHsgc3BhY2U6IHNwYWNlLCB1c2VyOiB0aGlzLnVzZXJJZCwga2V5OiAnc3RhcnRfZmxvd3MnIH0sIHsgZmllbGRzOiB7IHZhbHVlOiAxIH0gfSlcclxuXHJcblx0XHRzdGFydF9mbG93cyA9IGtleVZhbHVlPy52YWx1ZSB8fCBbXVxyXG5cclxuXHRcdGlmIHN0YXJ0XHJcblx0XHRcdHN0YXJ0X2Zsb3dzLnB1c2goZmxvd0lkKVxyXG5cclxuXHRcdFx0c3RhcnRfZmxvd3MgPSBfLnVuaXEoc3RhcnRfZmxvd3MpXHJcblx0XHRlbHNlXHJcblx0XHRcdHN0YXJ0X2Zsb3dzLnJlbW92ZShzdGFydF9mbG93cy5pbmRleE9mKGZsb3dJZCkpXHJcblxyXG5cdFx0aWYga2V5VmFsdWVcclxuXHRcdFx0ZGIuc3RlZWRvc19rZXl2YWx1ZXMudXBkYXRlKHsgX2lkOiBrZXlWYWx1ZS5faWQgfSwgeyBzcGFjZTogc3BhY2UsIHVzZXI6IHRoaXMudXNlcklkLCBrZXk6ICdzdGFydF9mbG93cycsIHZhbHVlOiBzdGFydF9mbG93cyB9KVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRkYi5zdGVlZG9zX2tleXZhbHVlcy5pbnNlcnQoeyBzcGFjZTogc3BhY2UsIHVzZXI6IHRoaXMudXNlcklkLCBrZXk6ICdzdGFydF9mbG93cycsIHZhbHVlOiBzdGFydF9mbG93cyB9KVxyXG5cclxuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBzdGFydF9mbG93OiBmdW5jdGlvbihzcGFjZSwgZmxvd0lkLCBzdGFydCkge1xuICAgIHZhciBrZXlWYWx1ZSwgc3RhcnRfZmxvd3M7XG4gICAga2V5VmFsdWUgPSBkYi5zdGVlZG9zX2tleXZhbHVlcy5maW5kT25lKHtcbiAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgIHVzZXI6IHRoaXMudXNlcklkLFxuICAgICAga2V5OiAnc3RhcnRfZmxvd3MnXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHZhbHVlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgc3RhcnRfZmxvd3MgPSAoa2V5VmFsdWUgIT0gbnVsbCA/IGtleVZhbHVlLnZhbHVlIDogdm9pZCAwKSB8fCBbXTtcbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIHN0YXJ0X2Zsb3dzLnB1c2goZmxvd0lkKTtcbiAgICAgIHN0YXJ0X2Zsb3dzID0gXy51bmlxKHN0YXJ0X2Zsb3dzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRfZmxvd3MucmVtb3ZlKHN0YXJ0X2Zsb3dzLmluZGV4T2YoZmxvd0lkKSk7XG4gICAgfVxuICAgIGlmIChrZXlWYWx1ZSkge1xuICAgICAgcmV0dXJuIGRiLnN0ZWVkb3Nfa2V5dmFsdWVzLnVwZGF0ZSh7XG4gICAgICAgIF9pZDoga2V5VmFsdWUuX2lkXG4gICAgICB9LCB7XG4gICAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgICAgdXNlcjogdGhpcy51c2VySWQsXG4gICAgICAgIGtleTogJ3N0YXJ0X2Zsb3dzJyxcbiAgICAgICAgdmFsdWU6IHN0YXJ0X2Zsb3dzXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRiLnN0ZWVkb3Nfa2V5dmFsdWVzLmluc2VydCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZSxcbiAgICAgICAgdXNlcjogdGhpcy51c2VySWQsXG4gICAgICAgIGtleTogJ3N0YXJ0X2Zsb3dzJyxcbiAgICAgICAgdmFsdWU6IHN0YXJ0X2Zsb3dzXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRnZXRfaW5zdGFuY2VfdHJhY2VzOiAoaW5zX2lkKS0+XHJcblx0XHRpZiAoIXRoaXMudXNlcklkKVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHRtaW5pQXBwcm92ZUZpZWxkcyA9IFsnX2lkJywgJ2lzX2ZpbmlzaGVkJywgJ3VzZXInLCAnaGFuZGxlcicsICdoYW5kbGVyX25hbWUnLCAndHlwZScsICdzdGFydF9kYXRlJywgJ2Rlc2NyaXB0aW9uJyxcclxuXHRcdFx0J2lzX3JlYWQnLCAnanVkZ2UnLCAnZmluaXNoX2RhdGUnLCAnZnJvbV91c2VyX25hbWUnLCAnZnJvbV91c2VyJywgJ2NjX2Rlc2NyaXB0aW9uJ11cclxuXHJcblx0XHRpbnMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSB7X2lkOiBpbnNfaWR9LCB7XHJcblx0XHRcdGZpZWxkczoge1xyXG5cdFx0XHRcdFwidHJhY2VzLl9pZFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmlzX2ZpbmlzaGVkXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuc3RlcFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLnN0YXJ0X2RhdGVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5uYW1lXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuZmluaXNoX2RhdGVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5qdWRnZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLl9pZFwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmlzX2ZpbmlzaGVkXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMudXNlclwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX25hbWVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLnR5cGVcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5zdGFydF9kYXRlXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZGVzY3JpcHRpb25cIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5pc19yZWFkXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuanVkZ2VcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5maW5pc2hfZGF0ZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmZyb21fdXNlcl9uYW1lXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZnJvbV91c2VyXCI6IDEsXHJcblx0XHRcdFx0XCJ0cmFjZXMuYXBwcm92ZXMuY2NfZGVzY3JpcHRpb25cIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy50cmFjZVwiOiAxLFxyXG5cdFx0XHRcdFwidHJhY2VzLmFwcHJvdmVzLmZvcndhcmRfc3BhY2VcIjogMSxcclxuXHRcdFx0XHRcInRyYWNlcy5hcHByb3Zlcy5mb3J3YXJkX2luc3RhbmNlXCI6IDFcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICFpbnNcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0cmV0dXJuIGlucz8udHJhY2VzXHJcblxyXG4iLCJNZXRlb3IubWV0aG9kcyh7XG4gIGdldF9pbnN0YW5jZV90cmFjZXM6IGZ1bmN0aW9uKGluc19pZCkge1xuICAgIHZhciBpbnMsIG1pbmlBcHByb3ZlRmllbGRzO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWluaUFwcHJvdmVGaWVsZHMgPSBbJ19pZCcsICdpc19maW5pc2hlZCcsICd1c2VyJywgJ2hhbmRsZXInLCAnaGFuZGxlcl9uYW1lJywgJ3R5cGUnLCAnc3RhcnRfZGF0ZScsICdkZXNjcmlwdGlvbicsICdpc19yZWFkJywgJ2p1ZGdlJywgJ2ZpbmlzaF9kYXRlJywgJ2Zyb21fdXNlcl9uYW1lJywgJ2Zyb21fdXNlcicsICdjY19kZXNjcmlwdGlvbiddO1xuICAgIGlucyA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zX2lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIFwidHJhY2VzLl9pZFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5pc19maW5pc2hlZFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5zdGVwXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLnN0YXJ0X2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMubmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5maW5pc2hfZGF0ZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5qdWRnZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5faWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaXNfZmluaXNoZWRcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMudXNlclwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJfbmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9mdWxsbmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy50eXBlXCI6IDEsXG4gICAgICAgIFwidHJhY2VzLmFwcHJvdmVzLnN0YXJ0X2RhdGVcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZGVzY3JpcHRpb25cIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuaXNfcmVhZFwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5qdWRnZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5maW5pc2hfZGF0ZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5mcm9tX3VzZXJfbmFtZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5mcm9tX3VzZXJcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuY2NfZGVzY3JpcHRpb25cIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMudHJhY2VcIjogMSxcbiAgICAgICAgXCJ0cmFjZXMuYXBwcm92ZXMuZm9yd2FyZF9zcGFjZVwiOiAxLFxuICAgICAgICBcInRyYWNlcy5hcHByb3Zlcy5mb3J3YXJkX2luc3RhbmNlXCI6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWlucykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gaW5zICE9IG51bGwgPyBpbnMudHJhY2VzIDogdm9pZCAwO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0J2dldF9iYXRjaF9pbnN0YW5jZXMnOiAoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMpLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiAhc3BhY2VcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0X2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpXHJcblxyXG5cdFx0cmV0dXJuIF9iYXRjaF9pbnN0YW5jZXNcclxuXHJcblx0J2dldF9iYXRjaF9pbnN0YW5jZXNfY291bnQnOiAoc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMpLT5cclxuXHRcdGlmICF0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRpZiAhc3BhY2VcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0X2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpXHJcblxyXG5cdFx0cmV0dXJuIF9iYXRjaF9pbnN0YW5jZXM/Lmxlbmd0aCB8fCAwXHJcblxyXG5cdCdnZXRfbXlfYXBwcm92ZXMnOiAoaW5zdGFuY2VJZHMpLT5cclxuXHJcblx0XHR0aGF0ID0gdGhpc1xyXG5cclxuXHRcdGlmICF0aGF0LnVzZXJJZFxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRteUFwcHJvdmVzID0gbmV3IEFycmF5KClcclxuXHJcblx0XHRpbnN0YW5jZUlkcy5mb3JFYWNoIChpbnNJZCktPlxyXG5cdFx0XHRteV9hcHByb3ZlID0gSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZShpbnNJZCwgdGhhdC51c2VySWQpXHJcblx0XHRcdGlmIG15X2FwcHJvdmVcclxuXHRcdFx0XHRteUFwcHJvdmVzLnB1c2gobXlfYXBwcm92ZSlcclxuXHJcblx0XHRyZXR1cm4gbXlBcHByb3Zlc1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgJ2dldF9iYXRjaF9pbnN0YW5jZXMnOiBmdW5jdGlvbihzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcykge1xuICAgIHZhciBfYmF0Y2hfaW5zdGFuY2VzO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzcGFjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfYmF0Y2hfaW5zdGFuY2VzID0gSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzKHNwYWNlLCBjYXRlZ29yeUlkLCBmbG93SWRzLCB0aGlzLnVzZXJJZCk7XG4gICAgcmV0dXJuIF9iYXRjaF9pbnN0YW5jZXM7XG4gIH0sXG4gICdnZXRfYmF0Y2hfaW5zdGFuY2VzX2NvdW50JzogZnVuY3Rpb24oc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMpIHtcbiAgICB2YXIgX2JhdGNoX2luc3RhbmNlcztcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghc3BhY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2JhdGNoX2luc3RhbmNlcyA9IEluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyhzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgdGhpcy51c2VySWQpO1xuICAgIHJldHVybiAoX2JhdGNoX2luc3RhbmNlcyAhPSBudWxsID8gX2JhdGNoX2luc3RhbmNlcy5sZW5ndGggOiB2b2lkIDApIHx8IDA7XG4gIH0sXG4gICdnZXRfbXlfYXBwcm92ZXMnOiBmdW5jdGlvbihpbnN0YW5jZUlkcykge1xuICAgIHZhciBteUFwcHJvdmVzLCB0aGF0O1xuICAgIHRoYXQgPSB0aGlzO1xuICAgIGlmICghdGhhdC51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbXlBcHByb3ZlcyA9IG5ldyBBcnJheSgpO1xuICAgIGluc3RhbmNlSWRzLmZvckVhY2goZnVuY3Rpb24oaW5zSWQpIHtcbiAgICAgIHZhciBteV9hcHByb3ZlO1xuICAgICAgbXlfYXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRNeUFwcHJvdmUoaW5zSWQsIHRoYXQudXNlcklkKTtcbiAgICAgIGlmIChteV9hcHByb3ZlKSB7XG4gICAgICAgIHJldHVybiBteUFwcHJvdmVzLnB1c2gobXlfYXBwcm92ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG15QXBwcm92ZXM7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHNcclxuXHRjaGFuZ2VfZmxvd19zdGF0ZTogKGZsb3dzKSAtPlxyXG5cdFx0Y2hlY2sgZmxvd3MsIEFycmF5XHJcblxyXG5cdFx0X3VzZXJJZCA9IHRoaXMudXNlcklkXHJcblxyXG5cdFx0aWYgIV91c2VySWRcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0Zmxvd3MuZm9yRWFjaCAoZmxvdykgLT5cclxuXHRcdFx0c3BhY2VJZCA9IGZsb3cuc3BhY2VcclxuXHRcdFx0Zm9ybUlkID0gZmxvdy5mb3JtXHJcblx0XHRcdGZsb3dJZCA9IGZsb3cuaWRcclxuXHRcdFx0c3RhdGUgPSBmbG93LnN0YXRlXHJcblxyXG5cdFx0XHRpZiAhU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgX3VzZXJJZClcclxuXHRcdFx0XHR0aHJvdyAgTWV0ZW9yLkVycm9yKDQwMSwgXCJObyBwZXJtaXNzaW9uXCIpXHJcblxyXG5cdFx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZm9ybUlkIH0sIHsgZmllbGRzOiB7IGhpc3RvcnlzOiAwIH0gfSlcclxuXHJcblx0XHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHsgX2lkOiBmbG93SWQgfSwgeyBmaWVsZHM6IHsgaGlzdG9yeXM6IDAgfSB9KVxyXG5cclxuXHRcdFx0aWYgc3RhdGUgIT0gJ2VuYWJsZWQnICYmIHN0YXRlICE9ICdkaXNhYmxlZCdcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJzdGF0ZeaXoOaViFwiKVxyXG5cclxuXHRcdFx0aWYgIWZvcm1cclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmb3Jt5peg5pWIXCIpXHJcblxyXG5cdFx0XHRpZiAhZmxvd1xyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcImZsb3fml6DmlYhcIilcclxuXHJcblx0XHRcdGlmICFmb3JtLmlzX3ZhbGlkXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL5byV55So55qE6KGo5Y2VWyN7Zm9ybS5uYW1lfV3pqozor4HmnKrpgJrov4fvvIzor7fmiZPlvIDmtYHnqIvorr7orqHlmajmo4Dmn6XooajljZXorr7nva5cIilcclxuXHJcblx0XHRcdGlmICFmbG93LmlzX3ZhbGlkXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yM6K+35omT5byA5rWB56iL6K6+6K6h5Zmo5qOA5p+l5rWB56iL6K6+572uXCIpXHJcblxyXG5cdFx0XHRpZiAhWyduZXcnLCAnbW9kaWZ5JywgJ2RlbGV0ZSddLmluY2x1ZGVzKGZsb3cuZmxvd3R5cGUpXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yMZmxvd3R5cGXlgLzlv4XpobvmmK9uZXfjgIFtb2RpZnnjgIFkZWxldGXlhbbkuK3kuYvkuIBcIilcclxuXHJcblx0XHRcdGlmICFfLmlzQXJyYXkoZmxvdy5jdXJyZW50LnN0ZXBzKVxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOa1geeoi+eahOatpemqpOS4jeiDveS4uuepulwiKVxyXG5cclxuXHRcdFx0aWYgXy51bmlxKGZsb3cuY3VycmVudC5zdGVwcywgJ25hbWUnKS5sZW5ndGggIT0gZmxvdy5jdXJyZW50LnN0ZXBzLmxlbmd0aFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOWQjOS4gOS4qua1geeoi+S4i+eahOatpemqpOeahOWQjeensOS4jeiDvemHjeWkjVwiKVxyXG5cclxuXHRcdFx0bm93ID0gbmV3IERhdGVcclxuXHJcblx0XHRcdGlmIHN0YXRlID09ICdlbmFibGVkJ1xyXG5cdFx0XHRcdCPmtYHnqIvlkK/nlKjliY3vvIzmoKHpqozlhbbigJzmjIflrprljoblj7LmraXpqqTigJ3lsZ7mgKfkuK3ooqvlvJXnlKjnmoTmraXpqqTmmK/lkKblrZjlnKjkuJTog73ooqvmib7liLDvvIjku4XpmZDkuo7mtYHnqIvnmoTmnIDmlrDniYjvvIlcclxuXHRcdFx0XHRmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaCAoc3RlcCkgLT5cclxuXHRcdFx0XHRcdGlmIFsnc3BlY2lmeVN0ZXBVc2VyJywgJ3NwZWNpZnlTdGVwUm9sZSddLmluY2x1ZGVzKHN0ZXAuZGVhbF90eXBlKVxyXG5cdFx0XHRcdFx0XHRpZiAhc3RlcC5hcHByb3Zlcl9zdGVwXHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5q2l6aqkWyN7c3RlcC5uYW1lfV3kuK3nmoTmjIflrprljoblj7LmraXpqqTkuI3lrZjlnKjjgIJcIilcclxuXHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdHNwZWNpZnlTdGVwID0gXy5maW5kIGZsb3cuY3VycmVudC5zdGVwcywgKF9zdGVwKSAtPlxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHN0ZXAuYXBwcm92ZXJfc3RlcCA9PSBfc3RlcC5faWRcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgIXNwZWNpZnlTdGVwXHJcblx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmraXpqqRbI3tzdGVwLm5hbWV9XeS4reeahOaMh+WumuWOhuWPsuatpemqpOS4jeWtmOWcqOOAglwiKVxyXG5cclxuXHRcdFx0XHRmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUgPSBmb3JtLmN1cnJlbnQuZmllbGRzLmdldFByb3BlcnR5KFwiY29kZVwiKVxyXG5cclxuXHRcdFx0XHRmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaCAoc3RlcCkgLT5cclxuXHRcdFx0XHRcdHN0ZXAuZmllbGRzX21vZGlmaWFibGUgPSBfLmludGVyc2VjdGlvbihzdGVwLmZpZWxkc19tb2RpZmlhYmxlLCBmb3JtX2N1cnJlbnRfZmllbGRzX2NvZGUpXHJcblxyXG5cdFx0XHRcdCPlpoLmnpwg5rWB56iL5a+55bqU6KGo5Y2VIOaYr+WBnOeUqOeahCDliJnlkK/nlKhcclxuXHRcdFx0XHRpZiBmb3JtLnN0YXRlID09ICdkaXNhYmxlZCdcclxuXHRcdFx0XHRcdGRiLmZvcm1zLnVwZGF0ZSh7X2lkOiBmb3JtLl9pZH0sIHskc2V0OiB7XCJzdGF0ZVwiOiBcImVuYWJsZWRcIiwgXCJjdXJyZW50LnN0YXJ0X2RhdGVcIjogbm93LCBcImN1cnJlbnQubW9kaWZpZWRcIjogbm93LCBcImN1cnJlbnQubW9kaWZpZWRfYnlcIjogX3VzZXJJZH19KVxyXG5cclxuXHRcdFx0XHRmbG93LmN1cnJlbnQubW9kaWZpZWQgPSBub3dcclxuXHRcdFx0XHRmbG93LmN1cnJlbnQuc3RhcnRfZGF0ZSA9IG5vd1xyXG5cdFx0XHRcdGZsb3cuY3VycmVudC5tb2RpZmllZF9ieSA9IF91c2VySWRcclxuXHJcblx0XHRcdFx0ZGIuZmxvd3MudXBkYXRlKHsgX2lkOiBmbG93Ll9pZCB9LCB7ICRzZXQ6IHsgXCJzdGF0ZVwiOiBcImVuYWJsZWRcIiwgXCJjdXJyZW50XCI6IGZsb3cuY3VycmVudCB9IH0pXHJcblxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0I+emgeeUqOa1geeoi1xyXG5cdFx0XHRcdGRiLmZsb3dzLnVwZGF0ZSh7X2lkOiBmbG93Ll9pZH0sIHskc2V0OiB7XCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWR9fSlcclxuXHJcblx0XHRcdFx0IyDliKTmlq3ooajljZXmiYDmnInmtYHnqIvmmK/lkKblt7Lnu4/lhajpg6jlgZznlKgg5aaC5p6c5bey5YWo6YOo5YGc55SoIOWImeS/ruaUueihqOWNleeKtuaAgeS4uuWBnOeUqFxyXG5cdFx0XHRcdF9mbG93cyA9IGRiLmZsb3dzLmZpbmQoeyBmb3JtOiBmb3JtLl9pZCB9LCB7IGZpZWxkczogeyBfaWQ6IDEsIHN0YXRlOiAxIH0gfSkuZmV0Y2goKVxyXG5cclxuXHRcdFx0XHRfZmxvd3Nfc3RhdGUgPSBfZmxvd3MuZ2V0UHJvcGVydHkoXCJzdGF0ZVwiKVxyXG5cclxuXHRcdFx0XHRpZiAhX2Zsb3dzX3N0YXRlLmluY2x1ZGVzKCdlbmFibGVkJylcclxuXHRcdFx0XHRcdGRiLmZvcm1zLnVwZGF0ZSh7X2lkOiBmb3JtLl9pZH0sIHskc2V0OiB7XCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdywgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWR9fSlcclxuXHJcblxyXG5cclxuXHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgY2hhbmdlX2Zsb3dfc3RhdGU6IGZ1bmN0aW9uKGZsb3dzKSB7XG4gICAgdmFyIF91c2VySWQ7XG4gICAgY2hlY2soZmxvd3MsIEFycmF5KTtcbiAgICBfdXNlcklkID0gdGhpcy51c2VySWQ7XG4gICAgaWYgKCFfdXNlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBmbG93cy5mb3JFYWNoKGZ1bmN0aW9uKGZsb3cpIHtcbiAgICAgIHZhciBfZmxvd3MsIF9mbG93c19zdGF0ZSwgZmxvd0lkLCBmb3JtLCBmb3JtSWQsIGZvcm1fY3VycmVudF9maWVsZHNfY29kZSwgbm93LCBzcGFjZUlkLCBzdGF0ZTtcbiAgICAgIHNwYWNlSWQgPSBmbG93LnNwYWNlO1xuICAgICAgZm9ybUlkID0gZmxvdy5mb3JtO1xuICAgICAgZmxvd0lkID0gZmxvdy5pZDtcbiAgICAgIHN0YXRlID0gZmxvdy5zdGF0ZTtcbiAgICAgIGlmICghU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgX3VzZXJJZCkpIHtcbiAgICAgICAgdGhyb3cgTWV0ZW9yLkVycm9yKDQwMSwgXCJObyBwZXJtaXNzaW9uXCIpO1xuICAgICAgfVxuICAgICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IGZvcm1JZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBoaXN0b3J5czogMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93SWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgaGlzdG9yeXM6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoc3RhdGUgIT09ICdlbmFibGVkJyAmJiBzdGF0ZSAhPT0gJ2Rpc2FibGVkJykge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJzdGF0ZeaXoOaViFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghZm9ybSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCJmb3Jt5peg5pWIXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFmbG93KSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcImZsb3fml6DmlYhcIik7XG4gICAgICB9XG4gICAgICBpZiAoIWZvcm0uaXNfdmFsaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL5byV55So55qE6KGo5Y2VW1wiICsgZm9ybS5uYW1lICsgXCJd6aqM6K+B5pyq6YCa6L+H77yM6K+35omT5byA5rWB56iL6K6+6K6h5Zmo5qOA5p+l6KGo5Y2V6K6+572uXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFmbG93LmlzX3ZhbGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jOivt+aJk+W8gOa1geeoi+iuvuiuoeWZqOajgOafpea1geeoi+iuvue9rlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghWyduZXcnLCAnbW9kaWZ5JywgJ2RlbGV0ZSddLmluY2x1ZGVzKGZsb3cuZmxvd3R5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIua1geeoi+mqjOivgeacqumAmui/h++8jGZsb3d0eXBl5YC85b+F6aG75pivbmV344CBbW9kaWZ544CBZGVsZXRl5YW25Lit5LmL5LiAXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzQXJyYXkoZmxvdy5jdXJyZW50LnN0ZXBzKSkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKDUwMCwgXCLmtYHnqIvpqozor4HmnKrpgJrov4fvvIzmtYHnqIvnmoTmraXpqqTkuI3og73kuLrnqbpcIik7XG4gICAgICB9XG4gICAgICBpZiAoXy51bmlxKGZsb3cuY3VycmVudC5zdGVwcywgJ25hbWUnKS5sZW5ndGggIT09IGZsb3cuY3VycmVudC5zdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5rWB56iL6aqM6K+B5pyq6YCa6L+H77yM5ZCM5LiA5Liq5rWB56iL5LiL55qE5q2l6aqk55qE5ZCN56ew5LiN6IO96YeN5aSNXCIpO1xuICAgICAgfVxuICAgICAgbm93ID0gbmV3IERhdGU7XG4gICAgICBpZiAoc3RhdGUgPT09ICdlbmFibGVkJykge1xuICAgICAgICBmbG93LmN1cnJlbnQuc3RlcHMuZm9yRWFjaChmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgdmFyIHNwZWNpZnlTdGVwO1xuICAgICAgICAgIGlmIChbJ3NwZWNpZnlTdGVwVXNlcicsICdzcGVjaWZ5U3RlcFJvbGUnXS5pbmNsdWRlcyhzdGVwLmRlYWxfdHlwZSkpIHtcbiAgICAgICAgICAgIGlmICghc3RlcC5hcHByb3Zlcl9zdGVwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoNTAwLCBcIuatpemqpFtcIiArIHN0ZXAubmFtZSArIFwiXeS4reeahOaMh+WumuWOhuWPsuatpemqpOS4jeWtmOWcqOOAglwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNwZWNpZnlTdGVwID0gXy5maW5kKGZsb3cuY3VycmVudC5zdGVwcywgZnVuY3Rpb24oX3N0ZXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RlcC5hcHByb3Zlcl9zdGVwID09PSBfc3RlcC5faWQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIXNwZWNpZnlTdGVwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcig1MDAsIFwi5q2l6aqkW1wiICsgc3RlcC5uYW1lICsgXCJd5Lit55qE5oyH5a6a5Y6G5Y+y5q2l6aqk5LiN5a2Y5Zyo44CCXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZm9ybV9jdXJyZW50X2ZpZWxkc19jb2RlID0gZm9ybS5jdXJyZW50LmZpZWxkcy5nZXRQcm9wZXJ0eShcImNvZGVcIik7XG4gICAgICAgIGZsb3cuY3VycmVudC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgICAgICByZXR1cm4gc3RlcC5maWVsZHNfbW9kaWZpYWJsZSA9IF8uaW50ZXJzZWN0aW9uKHN0ZXAuZmllbGRzX21vZGlmaWFibGUsIGZvcm1fY3VycmVudF9maWVsZHNfY29kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZm9ybS5zdGF0ZSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgIGRiLmZvcm1zLnVwZGF0ZSh7XG4gICAgICAgICAgICBfaWQ6IGZvcm0uX2lkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgICBcInN0YXRlXCI6IFwiZW5hYmxlZFwiLFxuICAgICAgICAgICAgICBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZF9ieVwiOiBfdXNlcklkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZmxvdy5jdXJyZW50Lm1vZGlmaWVkID0gbm93O1xuICAgICAgICBmbG93LmN1cnJlbnQuc3RhcnRfZGF0ZSA9IG5vdztcbiAgICAgICAgZmxvdy5jdXJyZW50Lm1vZGlmaWVkX2J5ID0gX3VzZXJJZDtcbiAgICAgICAgcmV0dXJuIGRiLmZsb3dzLnVwZGF0ZSh7XG4gICAgICAgICAgX2lkOiBmbG93Ll9pZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImVuYWJsZWRcIixcbiAgICAgICAgICAgIFwiY3VycmVudFwiOiBmbG93LmN1cnJlbnRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGIuZmxvd3MudXBkYXRlKHtcbiAgICAgICAgICBfaWQ6IGZsb3cuX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICBcInN0YXRlXCI6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICBcImN1cnJlbnQuc3RhcnRfZGF0ZVwiOiBub3csXG4gICAgICAgICAgICBcImN1cnJlbnQubW9kaWZpZWRfYnlcIjogX3VzZXJJZFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIF9mbG93cyA9IGRiLmZsb3dzLmZpbmQoe1xuICAgICAgICAgIGZvcm06IGZvcm0uX2lkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIF9pZDogMSxcbiAgICAgICAgICAgIHN0YXRlOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9KS5mZXRjaCgpO1xuICAgICAgICBfZmxvd3Nfc3RhdGUgPSBfZmxvd3MuZ2V0UHJvcGVydHkoXCJzdGF0ZVwiKTtcbiAgICAgICAgaWYgKCFfZmxvd3Nfc3RhdGUuaW5jbHVkZXMoJ2VuYWJsZWQnKSkge1xuICAgICAgICAgIHJldHVybiBkYi5mb3Jtcy51cGRhdGUoe1xuICAgICAgICAgICAgX2lkOiBmb3JtLl9pZFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICRzZXQ6IHtcbiAgICAgICAgICAgICAgXCJzdGF0ZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiBub3csXG4gICAgICAgICAgICAgIFwiY3VycmVudC5zdGFydF9kYXRlXCI6IG5vdyxcbiAgICAgICAgICAgICAgXCJjdXJyZW50Lm1vZGlmaWVkX2J5XCI6IF91c2VySWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblxyXG5cdGhpZGVfaW5zdGFuY2U6IChpbnNJZCwgaXNfaGlkZGVuKSAtPlxyXG5cdFx0aWYgIXRoaXMudXNlcklkXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGNoZWNrKGluc0lkLCBTdHJpbmcpXHJcblx0XHRjaGVjayhpc19oaWRkZW4sIEJvb2xlYW4pXHJcblxyXG5cdFx0dXNlcklkID0gdGhpcy51c2VySWRcclxuXHJcblx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc0lkLCB7IGZpZWxkczogeyBzdGF0ZTogMSwgZmxvdzogMSwgc3BhY2U6IDEgfSB9KVxyXG5cclxuXHRcdGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNlVwiKVxyXG5cclxuXHRcdGlmIGluc3RhbmNlLnN0YXRlIGlzbnQgJ2NvbXBsZXRlZCdcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnirbmgIHkuI3mmK/lt7Lnu5PmnZ9cIilcclxuXHJcblx0XHQjIOmqjOivgWxvZ2luIHVzZXJfaWTlr7nor6XmtYHnqIvmnInnrqHnkIbnlLPor7fljZXnmoTmnYPpmZBcclxuXHRcdHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIHVzZXJJZClcclxuXHRcdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoaW5zdGFuY2Uuc3BhY2UsIHsgZmllbGRzOiB7IGFkbWluczogMSB9IH0pXHJcblx0XHRpZiAobm90IHBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpIGFuZCAobm90IHNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VySWQpKVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKVxyXG5cclxuXHRcdGRiLmluc3RhbmNlcy51cGRhdGUoaW5zSWQsIHsgJHNldDogeyBpc19oaWRkZW46IGlzX2hpZGRlbiB9IH0pXHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcbiIsIk1ldGVvci5tZXRob2RzKHtcbiAgaGlkZV9pbnN0YW5jZTogZnVuY3Rpb24oaW5zSWQsIGlzX2hpZGRlbikge1xuICAgIHZhciBpbnN0YW5jZSwgcGVybWlzc2lvbnMsIHNwYWNlLCB1c2VySWQ7XG4gICAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGVjayhpbnNJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhpc19oaWRkZW4sIEJvb2xlYW4pO1xuICAgIHVzZXJJZCA9IHRoaXMudXNlcklkO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zSWQsIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGF0ZTogMSxcbiAgICAgICAgZmxvdzogMSxcbiAgICAgICAgc3BhY2U6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuacquaJvuWIsOeUs+ivt+WNlVwiKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlICE9PSAnY29tcGxldGVkJykge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnirbmgIHkuI3mmK/lt7Lnu5PmnZ9cIik7XG4gICAgfVxuICAgIHBlcm1pc3Npb25zID0gcGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zKGluc3RhbmNlLmZsb3csIHVzZXJJZCk7XG4gICAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZShpbnN0YW5jZS5zcGFjZSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGFkbWluczogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgoIXBlcm1pc3Npb25zLmluY2x1ZGVzKFwiYWRtaW5cIikpICYmICghc3BhY2UuYWRtaW5zLmluY2x1ZGVzKHVzZXJJZCkpKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIueUqOaIt+ayoeacieWvueW9k+WJjea1geeoi+eahOeuoeeQhuadg+mZkFwiKTtcbiAgICB9XG4gICAgZGIuaW5zdGFuY2VzLnVwZGF0ZShpbnNJZCwge1xuICAgICAgJHNldDoge1xuICAgICAgICBpc19oaWRkZW46IGlzX2hpZGRlblxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzXHJcblx0Z2V0SW5zdGFuY2VWYWx1ZXM6IChpbnNJZCktPlxyXG5cdFx0aWYgKCF0aGlzLnVzZXJJZClcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc0lkfSwge2ZpZWxkczoge3ZhbHVlczogMX19KT8udmFsdWVzIiwiTWV0ZW9yLm1ldGhvZHMoe1xuICBnZXRJbnN0YW5jZVZhbHVlczogZnVuY3Rpb24oaW5zSWQpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmICghdGhpcy51c2VySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIChyZWYgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGluc0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHZhbHVlczogMVxuICAgICAgfVxuICAgIH0pKSAhPSBudWxsID8gcmVmLnZhbHVlcyA6IHZvaWQgMDtcbiAgfVxufSk7XG4iLCJDb29raWVzID0gcmVxdWlyZShcImNvb2tpZXNcIilcclxuXHJcbmdldEluc3RhbmNlUmVhZE9ubHkgPSAocmVxLCByZXMsIG5leHQsIG9wdGlvbnMpIC0+XHJcblxyXG5cdHVzZXIgPSBTdGVlZG9zLmdldEFQSUxvZ2luVXNlcihyZXEsIHJlcylcclxuXHJcblx0aWYgcmVxPy5xdWVyeT8uYWNjZXNzX3Rva2VuXHJcblx0XHR1c2VySWQgPSBTdGVlZG9zLmdldFVzZXJJZEZyb21BY2Nlc3NUb2tlbihyZXEucXVlcnkuYWNjZXNzX3Rva2VuKVxyXG5cdFx0aWYgdXNlcklkXHJcblx0XHRcdHVzZXIgPSBNZXRlb3IudXNlcnMuZmluZE9uZSh7X2lkOiB1c2VySWR9KVxyXG5cclxuXHRzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZVxyXG5cclxuXHRpbnN0YW5jZUlkID0gcmVxLnBhcmFtcy5pbnN0YW5jZV9pZFxyXG5cclxuXHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9KTtcclxuXHJcblx0c3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZSh7X2lkOiBzcGFjZUlkfSk7XHJcblxyXG5cdGhpZGVfdHJhY2VzID0gcmVxLnF1ZXJ5Py5oaWRlX3RyYWNlc1xyXG5cclxuXHRpZiAhb3B0aW9uc1xyXG5cdFx0b3B0aW9ucyA9IHtzaG93VHJhY2U6IHRydWV9XHJcblx0ZWxzZVxyXG5cdFx0b3B0aW9ucy5zaG93VHJhY2UgPSB0cnVlXHJcblxyXG5cdGlmIGhpZGVfdHJhY2VzIGlzIFwiMVwiXHJcblx0XHRpZiBvcHRpb25zXHJcblx0XHRcdG9wdGlvbnMuc2hvd1RyYWNlID0gZmFsc2VcclxuXHRcdGVsc2VcclxuXHRcdFx0b3B0aW9ucyA9IHtzaG93VHJhY2U6IGZhbHNlfVxyXG5cclxuXHRpZiAhb3B0aW9ucy5zaG93QXR0YWNobWVudHNcclxuXHRcdG9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzID0gdHJ1ZVxyXG5cclxuXHRpZiAhc3BhY2VcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdGlmICAhaW5zdGFuY2VcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIGluc3RhbmNlXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdGlmICF1c2VyXHJcblx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiA0MDEsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBYLUF1dGgtVG9rZW4sWC1Vc2VyLUlkXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdGlmIGluc3RhbmNlLnNwYWNlICE9IHNwYWNlSWRcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlIG9yIGluc3RhbmNlXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cclxuXHJcblx0c3BhY2VVc2VyQ291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgdXNlcjogdXNlci5faWQsIHNwYWNlOiBzcGFjZUlkIH0pLmNvdW50KClcclxuXHJcblx0aWYgc3BhY2VVc2VyQ291bnQgaXMgMFxyXG5cdFx0aWYgIXNwYWNlXHJcblx0XHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdFx0Y29kZTogNDAxLFxyXG5cdFx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNhcGNlVXNlclwiLFxyXG5cdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0I+agoemqjHVzZXLmmK/lkKblr7lpbnN0YW5jZeacieafpeeci+adg+mZkFxyXG5cdF9oYXNQZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0luc3RhbmNlUGVybWlzc2lvbnModXNlciwgaW5zdGFuY2UpXHJcblxyXG5cdGlmICFfaGFzUGVybWlzc2lvbiAgJiYgaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlXHJcblx0XHRfcGFyZW50X2luc3RhbmNlcyA9IF8udW5pb24oW2luc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZV0sIGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZXMgfHwgW10pXHJcblxyXG5cdFx0X2hhc1Blcm1pc3Npb24gPSBfLmZpbmQgX3BhcmVudF9pbnN0YW5jZXMsIChfcGFyZW50X2lkKS0+XHJcblx0XHRcdF9wYXJlbnRfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDpfcGFyZW50X2lkfSwge2ZpZWxkczoge3RyYWNlczogMH19KVxyXG5cclxuXHRcdFx0cmV0dXJuIFdvcmtmbG93TWFuYWdlci5oYXNJbnN0YW5jZVBlcm1pc3Npb25zKHVzZXIsIF9wYXJlbnRfaW5zKVxyXG5cclxuXHRpZiAhX2hhc1Blcm1pc3Npb25cclxuXHRcdF9sb2NhbGUgPSBTdGVlZG9zLmxvY2FsZSh1c2VyLl9pZCwgdHJ1ZSlcclxuXHRcdGVycm9yID0gVEFQaTE4bi5fXyhcImluc3RhbmNlX3Blcm1pc3Npb25zX2Vycm9yXCIsIHt9LCBfbG9jYWxlKVxyXG5cdFx0cmVzLmNoYXJzZXQgPSBcInV0Zi04XCJcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IGVycm9yLFxyXG5cdFx0XHRcdFwic3VjY2Vzc1wiOiBmYWxzZVxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHRodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblx0ZGF0YUJ1ZiA9IG5ldyBCdWZmZXIoaHRtbCk7XHJcblx0cmVzLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBkYXRhQnVmLmxlbmd0aClcclxuXHRyZXMuc2V0SGVhZGVyKCdjb250ZW50LXJhbmdlJywgXCJieXRlcyAwLSN7ZGF0YUJ1Zi5sZW5ndGggLSAxfS8je2RhdGFCdWYubGVuZ3RofVwiKVxyXG5cdHJlcy5zdGF0dXNDb2RlID0gMjAwXHJcblx0cmVzLmVuZChodG1sKVxyXG5cclxuSnNvblJvdXRlcy5hZGQgXCJnZXRcIiwgXCIvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvcmVhZG9ubHkvOmluc3RhbmNlX2lkXCIsIGdldEluc3RhbmNlUmVhZE9ubHlcclxuXHJcbkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL3dvcmtmbG93L3NwYWNlLzpzcGFjZS92aWV3L3JlYWRvbmx5LzppbnN0YW5jZV9pZC86aW5zdGFuY2VfbmFtZVwiLCAocmVxLCByZXMsIG5leHQpLT5cclxuXHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJyk7XHJcblx0cmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScrZW5jb2RlVVJJKHJlcS5wYXJhbXMuaW5zdGFuY2VfbmFtZSkpO1xyXG5cdHJlcy5zZXRIZWFkZXIoJ1RyYW5zZmVyLUVuY29kaW5nJywgJycpXHJcblxyXG5cdG9wdGlvbnMgPSB7YWJzb2x1dGU6IHRydWV9XHJcblxyXG5cdHJldHVybiBnZXRJbnN0YW5jZVJlYWRPbmx5KHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKVxyXG4jIyNcclxuXHTojrflj5bnlLPor7fljZXliJfooajvvJpcclxuICAgIGZpbmFsX2RlY2lzaW9u77ya5a6h5om557uT5p6cXHJcbiAgICBzdGF0ZTog55Sz6K+35Y2V54q25oCBXHJcbiMjI1xyXG5Kc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvaW5zdGFuY2VzXCIsIChyZXEsIHJlcywgbmV4dCkgLT5cclxuXHJcblx0aWYgIVN0ZWVkb3MuQVBJQXV0aGVudGljYXRpb25DaGVjayhyZXEsIHJlcylcclxuXHRcdHJldHVybiA7XHJcblxyXG5cdHVzZXJfaWQgPSByZXEudXNlcklkXHJcblxyXG5cdHNwYWNlSWQgPSByZXEuaGVhZGVyc1tcIngtc3BhY2UtaWRcIl1cclxuXHJcblx0aWYgbm90IHNwYWNlSWRcclxuXHRcdEpzb25Sb3V0ZXMuc2VuZFJlc3VsdCByZXMsXHJcblx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0ZGF0YTpcclxuXHRcdFx0XHRcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIFgtU3BhY2UtSWRcIixcclxuXHRcdFx0XHRcInN1Y2Nlc3NcIjogZmFsc2VcclxuXHRcdHJldHVybjtcclxuXHJcblx0Zmxvd0lkID0gcmVxLnF1ZXJ5Py5mbG93SWRcclxuXHJcblx0aWYgIWZsb3dJZFxyXG5cdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0Y29kZTogNDAwLFxyXG5cdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgZmxvd0lkXCIsXHJcblx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRyZXR1cm47XHJcblxyXG5cdHF1ZXJ5ID0ge31cclxuXHJcblx0cmV0X3N5bmNfdG9rZW4gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuXHRmbG93SWRzID0gZmxvd0lkLnNwbGl0KFwiLFwiKVxyXG5cclxuXHJcblx0Zmxvd3MgPSBkYi5mbG93cy5maW5kKHtfaWQ6IHskaW46IGZsb3dJZHN9fSkuZmV0Y2goKVxyXG5cclxuXHRpID0gMFxyXG5cdHdoaWxlIGkgPCBmbG93cy5sZW5ndGhcclxuXHRcdGYgPSBmbG93c1tpXVxyXG5cdFx0c3BhY2VVc2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7c3BhY2U6IGYuc3BhY2UsIHVzZXI6IHVzZXJfaWR9KVxyXG5cdFx0aWYgIXNwYWNlVXNlclxyXG5cdFx0XHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0XHRkYXRhOlxyXG5cdFx0XHRcdFx0XCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTm8gcGVybWlzc2lvbiwgZmxvdyBpcyAje2YuX2lkfVwiLFxyXG5cdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdHJldHVybjtcclxuXHRcdGVsc2VcclxuXHJcblx0I1x05piv5ZCm5bel5L2c5Yy6566h55CG5ZGYXHJcblx0XHRpZiAhU3RlZWRvcy5pc1NwYWNlQWRtaW4oc3BhY2VJZCwgdXNlcl9pZClcclxuXHRcdFx0c3BhY2VVc2VyT3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XHJcblx0XHRcdFx0X2lkOiB7XHJcblx0XHRcdFx0XHQkaW46IHNwYWNlVXNlci5vcmdhbml6YXRpb25zXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KS5mZXRjaCgpO1xyXG5cclxuXHRcdFx0aWYgIVdvcmtmbG93TWFuYWdlci5jYW5Nb25pdG9yKGYsIHNwYWNlVXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucykgJiYgIVdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpXHJcblx0XHRcdFx0SnNvblJvdXRlcy5zZW5kUmVzdWx0IHJlcyxcclxuXHRcdFx0XHRcdGNvZGU6IDQwMSxcclxuXHRcdFx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XHRcdFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb24sIGZsb3cgaXMgI3tmLl9pZH1cIixcclxuXHRcdFx0XHRcdFx0XCJzdWNjZXNzXCI6IGZhbHNlXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0aSsrXHJcblxyXG5cclxuXHRxdWVyeS5mbG93ID0geyRpbjogZmxvd0lkc31cclxuXHJcblx0cXVlcnkuc3BhY2UgPSBzcGFjZUlkXHJcblxyXG5cdGlmIHJlcS5xdWVyeT8uc3luY190b2tlblxyXG5cdFx0c3luY190b2tlbiA9IG5ldyBEYXRlKE51bWJlcihyZXEucXVlcnkuc3luY190b2tlbikpXHJcblx0XHRxdWVyeS5tb2RpZmllZCA9IHskZ3Q6IHN5bmNfdG9rZW59XHJcblxyXG5cdGlmIHJlcS5xdWVyeT8uZmluYWxfZGVjaXNpb25cclxuXHRcdHF1ZXJ5LmZpbmFsX2RlY2lzaW9uID0geyRpbiA6IHJlcS5xdWVyeS5maW5hbF9kZWNpc2lvbi5zcGxpdChcIixcIil9XHJcblx0ZWxzZVxyXG5cdFx0cXVlcnkuZmluYWxfZGVjaXNpb24gPSB7JG5pbjogW1widGVybWluYXRlZFwiLCBcInJlamVjdGVkXCJdfVxyXG5cclxuXHRpZiByZXEucXVlcnk/LnN0YXRlXHJcblx0XHRxdWVyeS5zdGF0ZSA9IHskaW46IHJlcS5xdWVyeS5zdGF0ZS5zcGxpdChcIixcIil9XHJcblx0ZWxzZVxyXG5cdFx0cXVlcnkuc3RhdGUgPSBcImNvbXBsZXRlZFwiXHJcblxyXG4jXHTmnIDlpJrov5Tlm541MDDmnaHmlbDmja5cclxuXHRpbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge2ZpZWxkczoge2luYm94X3VlcnM6IDAsIGNjX3VzZXJzOiAwLCBvdXRib3hfdXNlcnM6IDAsIHRyYWNlczogMCwgYXR0YWNobWVudHM6IDB9LCBza2lwOiAwLCBsaW1pdDogNTAwfSkuZmV0Y2goKVxyXG5cdGluc3RhbmNlcy5mb3JFYWNoIChpbnN0YW5jZSktPlxyXG5cclxuXHRcdGF0dGFjaG1lbnRzID0gY2ZzLmluc3RhbmNlcy5maW5kKHsnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZS5faWQsJ21ldGFkYXRhLmN1cnJlbnQnOiB0cnVlLCBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjogeyRuZTogdHJ1ZX19LCB7ZmllbGRzOiB7Y29waWVzOiAwfX0pLmZldGNoKClcclxuXHJcblx0XHRpbnN0YW5jZS5hdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzXHJcblxyXG5cclxuXHRKc29uUm91dGVzLnNlbmRSZXN1bHQgcmVzLFxyXG5cdFx0XHRjb2RlOiAyMDAsXHJcblx0XHRcdGRhdGE6XHJcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXHJcblx0XHRcdFx0XCJzeW5jX3Rva2VuXCI6IHJldF9zeW5jX3Rva2VuXHJcblx0XHRcdFx0XCJkYXRhXCI6IGluc3RhbmNlc1xyXG5cdHJldHVybjtcclxuIiwidmFyIENvb2tpZXMsIGdldEluc3RhbmNlUmVhZE9ubHk7XG5cbkNvb2tpZXMgPSByZXF1aXJlKFwiY29va2llc1wiKTtcblxuZ2V0SW5zdGFuY2VSZWFkT25seSA9IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKSB7XG4gIHZhciBfaGFzUGVybWlzc2lvbiwgX2xvY2FsZSwgX3BhcmVudF9pbnN0YW5jZXMsIGRhdGFCdWYsIGVycm9yLCBoaWRlX3RyYWNlcywgaHRtbCwgaW5zdGFuY2UsIGluc3RhbmNlSWQsIHJlZiwgcmVmMSwgc3BhY2UsIHNwYWNlSWQsIHNwYWNlVXNlckNvdW50LCB1c2VyLCB1c2VySWQ7XG4gIHVzZXIgPSBTdGVlZG9zLmdldEFQSUxvZ2luVXNlcihyZXEsIHJlcyk7XG4gIGlmIChyZXEgIT0gbnVsbCA/IChyZWYgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYuYWNjZXNzX3Rva2VuIDogdm9pZCAwIDogdm9pZCAwKSB7XG4gICAgdXNlcklkID0gU3RlZWRvcy5nZXRVc2VySWRGcm9tQWNjZXNzVG9rZW4ocmVxLnF1ZXJ5LmFjY2Vzc190b2tlbik7XG4gICAgaWYgKHVzZXJJZCkge1xuICAgICAgdXNlciA9IE1ldGVvci51c2Vycy5maW5kT25lKHtcbiAgICAgICAgX2lkOiB1c2VySWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZTtcbiAgaW5zdGFuY2VJZCA9IHJlcS5wYXJhbXMuaW5zdGFuY2VfaWQ7XG4gIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgIF9pZDogaW5zdGFuY2VJZFxuICB9KTtcbiAgc3BhY2UgPSBkYi5zcGFjZXMuZmluZE9uZSh7XG4gICAgX2lkOiBzcGFjZUlkXG4gIH0pO1xuICBoaWRlX3RyYWNlcyA9IChyZWYxID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMS5oaWRlX3RyYWNlcyA6IHZvaWQgMDtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHNob3dUcmFjZTogdHJ1ZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucy5zaG93VHJhY2UgPSB0cnVlO1xuICB9XG4gIGlmIChoaWRlX3RyYWNlcyA9PT0gXCIxXCIpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgb3B0aW9ucy5zaG93VHJhY2UgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgc2hvd1RyYWNlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCFvcHRpb25zLnNob3dBdHRhY2htZW50cykge1xuICAgIG9wdGlvbnMuc2hvd0F0dGFjaG1lbnRzID0gdHJ1ZTtcbiAgfVxuICBpZiAoIXNwYWNlKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWluc3RhbmNlKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIGluc3RhbmNlXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXVzZXIpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgWC1BdXRoLVRva2VuLFgtVXNlci1JZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluc3RhbmNlLnNwYWNlICE9PSBzcGFjZUlkKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIHNwYWNlIG9yIGluc3RhbmNlXCIsXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBzcGFjZVVzZXJDb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgIHVzZXI6IHVzZXIuX2lkLFxuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0pLmNvdW50KCk7XG4gIGlmIChzcGFjZVVzZXJDb3VudCA9PT0gMCkge1xuICAgIGlmICghc3BhY2UpIHtcbiAgICAgIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICAgICAgY29kZTogNDAxLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgXCJlcnJvclwiOiBcIlZhbGlkYXRlIFJlcXVlc3QgLS0gTWlzc2luZyBzYXBjZVVzZXJcIixcbiAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIF9oYXNQZXJtaXNzaW9uID0gV29ya2Zsb3dNYW5hZ2VyLmhhc0luc3RhbmNlUGVybWlzc2lvbnModXNlciwgaW5zdGFuY2UpO1xuICBpZiAoIV9oYXNQZXJtaXNzaW9uICYmIGluc3RhbmNlLmRpc3RyaWJ1dGVfZnJvbV9pbnN0YW5jZSkge1xuICAgIF9wYXJlbnRfaW5zdGFuY2VzID0gXy51bmlvbihbaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlXSwgaW5zdGFuY2UuZGlzdHJpYnV0ZV9mcm9tX2luc3RhbmNlcyB8fCBbXSk7XG4gICAgX2hhc1Blcm1pc3Npb24gPSBfLmZpbmQoX3BhcmVudF9pbnN0YW5jZXMsIGZ1bmN0aW9uKF9wYXJlbnRfaWQpIHtcbiAgICAgIHZhciBfcGFyZW50X2lucztcbiAgICAgIF9wYXJlbnRfaW5zID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IF9wYXJlbnRfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdHJhY2VzOiAwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFdvcmtmbG93TWFuYWdlci5oYXNJbnN0YW5jZVBlcm1pc3Npb25zKHVzZXIsIF9wYXJlbnRfaW5zKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoIV9oYXNQZXJtaXNzaW9uKSB7XG4gICAgX2xvY2FsZSA9IFN0ZWVkb3MubG9jYWxlKHVzZXIuX2lkLCB0cnVlKTtcbiAgICBlcnJvciA9IFRBUGkxOG4uX18oXCJpbnN0YW5jZV9wZXJtaXNzaW9uc19lcnJvclwiLCB7fSwgX2xvY2FsZSk7XG4gICAgcmVzLmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAxLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IGVycm9yLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaHRtbCA9IEluc3RhbmNlUmVhZE9ubHlUZW1wbGF0ZS5nZXRJbnN0YW5jZUh0bWwodXNlciwgc3BhY2UsIGluc3RhbmNlLCBvcHRpb25zKTtcbiAgZGF0YUJ1ZiA9IG5ldyBCdWZmZXIoaHRtbCk7XG4gIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgZGF0YUJ1Zi5sZW5ndGgpO1xuICByZXMuc2V0SGVhZGVyKCdjb250ZW50LXJhbmdlJywgXCJieXRlcyAwLVwiICsgKGRhdGFCdWYubGVuZ3RoIC0gMSkgKyBcIi9cIiArIGRhdGFCdWYubGVuZ3RoKTtcbiAgcmVzLnN0YXR1c0NvZGUgPSAyMDA7XG4gIHJldHVybiByZXMuZW5kKGh0bWwpO1xufTtcblxuSnNvblJvdXRlcy5hZGQoXCJnZXRcIiwgXCIvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvcmVhZG9ubHkvOmluc3RhbmNlX2lkXCIsIGdldEluc3RhbmNlUmVhZE9ubHkpO1xuXG5Kc29uUm91dGVzLmFkZChcImdldFwiLCBcIi93b3JrZmxvdy9zcGFjZS86c3BhY2Uvdmlldy9yZWFkb25seS86aW5zdGFuY2VfaWQvOmluc3RhbmNlX25hbWVcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIG9wdGlvbnM7XG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LW1zZG93bmxvYWQnKTtcbiAgcmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICdhdHRhY2htZW50O2ZpbGVuYW1lPScgKyBlbmNvZGVVUkkocmVxLnBhcmFtcy5pbnN0YW5jZV9uYW1lKSk7XG4gIHJlcy5zZXRIZWFkZXIoJ1RyYW5zZmVyLUVuY29kaW5nJywgJycpO1xuICBvcHRpb25zID0ge1xuICAgIGFic29sdXRlOiB0cnVlXG4gIH07XG4gIHJldHVybiBnZXRJbnN0YW5jZVJlYWRPbmx5KHJlcSwgcmVzLCBuZXh0LCBvcHRpb25zKTtcbn0pO1xuXG5cbi8qXG5cdOiOt+WPlueUs+ivt+WNleWIl+ihqO+8mlxuICAgIGZpbmFsX2RlY2lzaW9u77ya5a6h5om557uT5p6cXG4gICAgc3RhdGU6IOeUs+ivt+WNleeKtuaAgVxuICovXG5cbkpzb25Sb3V0ZXMuYWRkKFwiZ2V0XCIsIFwiL2FwaS93b3JrZmxvdy9pbnN0YW5jZXNcIiwgZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGYsIGZsb3dJZCwgZmxvd0lkcywgZmxvd3MsIGksIGluc3RhbmNlcywgcXVlcnksIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmV0X3N5bmNfdG9rZW4sIHNwYWNlSWQsIHNwYWNlVXNlciwgc3BhY2VVc2VyT3JnYW5pemF0aW9ucywgc3luY190b2tlbiwgdXNlcl9pZDtcbiAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHVzZXJfaWQgPSByZXEudXNlcklkO1xuICBzcGFjZUlkID0gcmVxLmhlYWRlcnNbXCJ4LXNwYWNlLWlkXCJdO1xuICBpZiAoIXNwYWNlSWQpIHtcbiAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICBjb2RlOiA0MDEsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE1pc3NpbmcgWC1TcGFjZS1JZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgZmxvd0lkID0gKHJlZiA9IHJlcS5xdWVyeSkgIT0gbnVsbCA/IHJlZi5mbG93SWQgOiB2b2lkIDA7XG4gIGlmICghZmxvd0lkKSB7XG4gICAgSnNvblJvdXRlcy5zZW5kUmVzdWx0KHJlcywge1xuICAgICAgY29kZTogNDAwLFxuICAgICAgZGF0YToge1xuICAgICAgICBcImVycm9yXCI6IFwiVmFsaWRhdGUgUmVxdWVzdCAtLSBNaXNzaW5nIGZsb3dJZFwiLFxuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgcXVlcnkgPSB7fTtcbiAgcmV0X3N5bmNfdG9rZW4gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgZmxvd0lkcyA9IGZsb3dJZC5zcGxpdChcIixcIik7XG4gIGZsb3dzID0gZGIuZmxvd3MuZmluZCh7XG4gICAgX2lkOiB7XG4gICAgICAkaW46IGZsb3dJZHNcbiAgICB9XG4gIH0pLmZldGNoKCk7XG4gIGkgPSAwO1xuICB3aGlsZSAoaSA8IGZsb3dzLmxlbmd0aCkge1xuICAgIGYgPSBmbG93c1tpXTtcbiAgICBzcGFjZVVzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcbiAgICAgIHNwYWNlOiBmLnNwYWNlLFxuICAgICAgdXNlcjogdXNlcl9pZFxuICAgIH0pO1xuICAgIGlmICghc3BhY2VVc2VyKSB7XG4gICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgIGNvZGU6IDQwMSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb24sIGZsb3cgaXMgXCIgKyBmLl9pZCxcbiAgICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcblxuICAgIH1cbiAgICBpZiAoIVN0ZWVkb3MuaXNTcGFjZUFkbWluKHNwYWNlSWQsIHVzZXJfaWQpKSB7XG4gICAgICBzcGFjZVVzZXJPcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBzcGFjZVVzZXIub3JnYW5pemF0aW9uc1xuICAgICAgICB9XG4gICAgICB9KS5mZXRjaCgpO1xuICAgICAgaWYgKCFXb3JrZmxvd01hbmFnZXIuY2FuTW9uaXRvcihmLCBzcGFjZVVzZXIsIHNwYWNlVXNlck9yZ2FuaXphdGlvbnMpICYmICFXb3JrZmxvd01hbmFnZXIuY2FuQWRtaW4oZiwgc3BhY2VVc2VyLCBzcGFjZVVzZXJPcmdhbml6YXRpb25zKSkge1xuICAgICAgICBKc29uUm91dGVzLnNlbmRSZXN1bHQocmVzLCB7XG4gICAgICAgICAgY29kZTogNDAxLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIFwiZXJyb3JcIjogXCJWYWxpZGF0ZSBSZXF1ZXN0IC0tIE5vIHBlcm1pc3Npb24sIGZsb3cgaXMgXCIgKyBmLl9pZCxcbiAgICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaSsrO1xuICB9XG4gIHF1ZXJ5LmZsb3cgPSB7XG4gICAgJGluOiBmbG93SWRzXG4gIH07XG4gIHF1ZXJ5LnNwYWNlID0gc3BhY2VJZDtcbiAgaWYgKChyZWYxID0gcmVxLnF1ZXJ5KSAhPSBudWxsID8gcmVmMS5zeW5jX3Rva2VuIDogdm9pZCAwKSB7XG4gICAgc3luY190b2tlbiA9IG5ldyBEYXRlKE51bWJlcihyZXEucXVlcnkuc3luY190b2tlbikpO1xuICAgIHF1ZXJ5Lm1vZGlmaWVkID0ge1xuICAgICAgJGd0OiBzeW5jX3Rva2VuXG4gICAgfTtcbiAgfVxuICBpZiAoKHJlZjIgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYyLmZpbmFsX2RlY2lzaW9uIDogdm9pZCAwKSB7XG4gICAgcXVlcnkuZmluYWxfZGVjaXNpb24gPSB7XG4gICAgICAkaW46IHJlcS5xdWVyeS5maW5hbF9kZWNpc2lvbi5zcGxpdChcIixcIilcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5LmZpbmFsX2RlY2lzaW9uID0ge1xuICAgICAgJG5pbjogW1widGVybWluYXRlZFwiLCBcInJlamVjdGVkXCJdXG4gICAgfTtcbiAgfVxuICBpZiAoKHJlZjMgPSByZXEucXVlcnkpICE9IG51bGwgPyByZWYzLnN0YXRlIDogdm9pZCAwKSB7XG4gICAgcXVlcnkuc3RhdGUgPSB7XG4gICAgICAkaW46IHJlcS5xdWVyeS5zdGF0ZS5zcGxpdChcIixcIilcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5LnN0YXRlID0gXCJjb21wbGV0ZWRcIjtcbiAgfVxuICBpbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgIGZpZWxkczoge1xuICAgICAgaW5ib3hfdWVyczogMCxcbiAgICAgIGNjX3VzZXJzOiAwLFxuICAgICAgb3V0Ym94X3VzZXJzOiAwLFxuICAgICAgdHJhY2VzOiAwLFxuICAgICAgYXR0YWNobWVudHM6IDBcbiAgICB9LFxuICAgIHNraXA6IDAsXG4gICAgbGltaXQ6IDUwMFxuICB9KS5mZXRjaCgpO1xuICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgIHZhciBhdHRhY2htZW50cztcbiAgICBhdHRhY2htZW50cyA9IGNmcy5pbnN0YW5jZXMuZmluZCh7XG4gICAgICAnbWV0YWRhdGEuaW5zdGFuY2UnOiBpbnN0YW5jZS5faWQsXG4gICAgICAnbWV0YWRhdGEuY3VycmVudCc6IHRydWUsXG4gICAgICBcIm1ldGFkYXRhLmlzX3ByaXZhdGVcIjoge1xuICAgICAgICAkbmU6IHRydWVcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgY29waWVzOiAwXG4gICAgICB9XG4gICAgfSkuZmV0Y2goKTtcbiAgICByZXR1cm4gaW5zdGFuY2UuYXR0YWNobWVudHMgPSBhdHRhY2htZW50cztcbiAgfSk7XG4gIEpzb25Sb3V0ZXMuc2VuZFJlc3VsdChyZXMsIHtcbiAgICBjb2RlOiAyMDAsXG4gICAgZGF0YToge1xuICAgICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG4gICAgICBcInN5bmNfdG9rZW5cIjogcmV0X3N5bmNfdG9rZW4sXG4gICAgICBcImRhdGFcIjogaW5zdGFuY2VzXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiXHJcbkpzb25Sb3V0ZXMuYWRkIFwiZ2V0XCIsIFwiL3N0ZWVkb3MtY3NzXCIsIChyZXEsIHJlcywgbmV4dCktPlxyXG5cclxuXHRhbGxDc3MgPSBXZWJBcHAuZ2V0UmVmcmVzaGFibGVBc3NldHMoKVxyXG5cclxuXHRhbGxDc3NMaW5rID0gXCJcIlxyXG5cclxuXHRhbGxDc3MuZm9yRWFjaCAoY3NzKSAtPlxyXG5cdFx0aWYgX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWFxyXG5cdFx0XHRyb290VXJsID0gX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTFxyXG5cdFx0XHRpZiByb290VXJsLmVuZHNXaXRoKFwiL1wiKVxyXG5cdFx0XHRcdGNzc0hyZWYgPSByb290VXJsLnJlcGxhY2UoX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCArIFwiL1wiLCBcIlwiKSArIGNzcy51cmxcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGNzc0hyZWYgPSByb290VXJsLnJlcGxhY2UoX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCwgXCJcIikgKyBjc3MudXJsXHJcblx0XHRlbHNlXHJcblx0XHRcdGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoY3NzLnVybClcclxuXHRcdGFsbENzc0xpbmsgKz0gXCJAaW1wb3J0IHVybCgje2Nzc0hyZWZ9KTtcIlxyXG5cclxuXHRyZXMuc3RhdHVzQ29kZSA9IDIwMFxyXG5cdHJlcy5lbmQoYWxsQ3NzTGluaykiLCJKc29uUm91dGVzLmFkZChcImdldFwiLCBcIi9zdGVlZG9zLWNzc1wiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICB2YXIgYWxsQ3NzLCBhbGxDc3NMaW5rO1xuICBhbGxDc3MgPSBXZWJBcHAuZ2V0UmVmcmVzaGFibGVBc3NldHMoKTtcbiAgYWxsQ3NzTGluayA9IFwiXCI7XG4gIGFsbENzcy5mb3JFYWNoKGZ1bmN0aW9uKGNzcykge1xuICAgIHZhciBjc3NIcmVmLCByb290VXJsO1xuICAgIGlmIChfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMX1BBVEhfUFJFRklYKSB7XG4gICAgICByb290VXJsID0gX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTDtcbiAgICAgIGlmIChyb290VXJsLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICBjc3NIcmVmID0gcm9vdFVybC5yZXBsYWNlKF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggKyBcIi9cIiwgXCJcIikgKyBjc3MudXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3NzSHJlZiA9IHJvb3RVcmwucmVwbGFjZShfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMX1BBVEhfUFJFRklYLCBcIlwiKSArIGNzcy51cmw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc0hyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoY3NzLnVybCk7XG4gICAgfVxuICAgIHJldHVybiBhbGxDc3NMaW5rICs9IFwiQGltcG9ydCB1cmwoXCIgKyBjc3NIcmVmICsgXCIpO1wiO1xuICB9KTtcbiAgcmVzLnN0YXR1c0NvZGUgPSAyMDA7XG4gIHJldHVybiByZXMuZW5kKGFsbENzc0xpbmspO1xufSk7XG4iLCJKc29uUm91dGVzLmFkZCBcImdldFwiLCBcIi9hcGkvd29ya2Zsb3cvc3BhY2UvOnNwYWNlL3ZpZXcvZHJhZnQvOmZsb3dcIiwgKHJlcSwgcmVzLCBuZXh0KSAtPlxyXG5cdGlmICFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpXHJcblx0XHRyZXR1cm5cclxuXHJcblx0dXNlcl9pZCA9IHJlcS51c2VySWRcclxuXHJcblx0dXNlciA9IGRiLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IHVzZXJfaWQgfSlcclxuXHJcblx0c3BhY2VJZCA9IHJlcS5wYXJhbXMuc3BhY2VcclxuXHJcblx0Zmxvd0lkID0gcmVxLnBhcmFtcy5mbG93XHJcblxyXG5cdHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoeyBfaWQ6IHNwYWNlSWQgfSlcclxuXHJcblx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGZsb3dJZCB9LCB7IGZpZWxkczogeyBuYW1lOiAxLCAnY3VycmVudC5faWQnOiAxLCBmb3JtOiAxIH0gfSlcclxuXHJcblx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoeyBfaWQ6IGZsb3cuZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5faWQnOiAxIH0gfSlcclxuXHJcblx0b3B0aW9ucyA9IHtcclxuXHRcdHNob3dUcmFjZTogZmFsc2UsXHJcblx0XHRzaG93QXR0YWNobWVudHM6IGZhbHNlLFxyXG5cdFx0dGVtcGxhdGVOYW1lOiBcImRlZmF1bHRcIixcclxuXHRcdGVkaXRhYmxlOiB0cnVlLFxyXG5cdFx0d2lkdGg6IFwiMTAwJVwiLFxyXG5cdFx0aW5zdGFuY2Vfc3R5bGU6IFwiaW5zdGFuY2UtZGVmYXVsdFwiLFxyXG5cdFx0cGx1Z2luczogXCJcIlwiXHJcblxyXG5cdFx0XHQ8bWV0YSBodHRwLWVxdWl2PVwiWC1VQS1Db21wYXRpYmxlXCIgY29udGVudD1cIklFPWVkZ2UsY2hyb21lPTFcIiAvPlxyXG5cdFx0XHQ8bWV0YSBuYW1lPVwiZm9ybWF0LWRldGVjdGlvblwiIGNvbnRlbnQ9XCJ0ZWxlcGhvbmU9bm9cIj5cclxuXHRcdFx0PG1ldGEgaHR0cC1lcXVpdj1cIngtcmltLWF1dG8tbWF0Y2hcIiBjb250ZW50PVwibm9uZVwiPlxyXG5cdFx0XHQ8dGl0bGU+I3tmbG93Lm5hbWV9PC90aXRsZT5cclxuXHRcdFx0PG1ldGEgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9MCcgbmFtZT0ndmlld3BvcnQnIC8+XHJcblx0XHRcdDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGhcIiAvPlxyXG5cclxuXHRcdFx0PGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvY3NzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5taW4uY3NzXCI+XHJcblxyXG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9qcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIubWluLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxyXG5cclxuXHRcdFx0PHNjcmlwdCBzcmM9XCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvanMvbG9jYWxlcy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIuemgtQ04uanNcIiB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgY2hhcnNldD1cIlVURi04XCI+PC9zY3JpcHQ+XHJcblxyXG5cdFx0XHQ8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmNzc1wiPlxyXG5cdFx0XHQ8c2NyaXB0IHNyYz1cIi9wbHVnaW5zL3RvYXN0ci90b2FzdHIubWluLmpzXCIgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPjwvc2NyaXB0PlxyXG5cdFx0XHQ8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCIgaHJlZj1cIi9qcy93b3JrZmxvd19jbGllbnQuY3NzXCI+XHJcblx0XHRcdDxzY3JpcHQgc3JjPVwiL2pzL3dvcmtmbG93X2NsaWVudC5qc1wiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj48L3NjcmlwdD5cclxuXHRcdFwiXCJcIlxyXG5cdH1cclxuXHJcblx0aW5zdGFuY2UgPSB7XHJcblx0XHRmbG93OiBmbG93Ll9pZCxcclxuXHRcdGZsb3dfdmVyc2lvbjogZmxvdy5jdXJyZW50Ll9pZCxcclxuXHRcdGZvcm06IGZvcm0uX2lkLFxyXG5cdFx0Zm9ybV92ZXJzaW9uOiBmb3JtLmN1cnJlbnQuX2lkLFxyXG5cdFx0dmFsdWVzOiB7fSxcclxuXHRcdG5hbWU6IGZsb3cubmFtZSxcclxuXHRcdHNwYWNlOiBzcGFjZUlkXHJcblx0fVxyXG5cclxuXHRodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpXHJcblxyXG5cdGRhdGFCdWYgPSBuZXcgQnVmZmVyKGh0bWwpXHJcblxyXG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgZGF0YUJ1Zi5sZW5ndGgpXHJcblxyXG5cdHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtcmFuZ2UnLCBcImJ5dGVzIDAtI3tkYXRhQnVmLmxlbmd0aCAtIDF9LyN7ZGF0YUJ1Zi5sZW5ndGh9XCIpXHJcblxyXG5cdHJlcy5zdGF0dXNDb2RlID0gMjAwXHJcblxyXG5cdHJlcy5lbmQoaHRtbClcclxuIiwiSnNvblJvdXRlcy5hZGQoXCJnZXRcIiwgXCIvYXBpL3dvcmtmbG93L3NwYWNlLzpzcGFjZS92aWV3L2RyYWZ0LzpmbG93XCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHZhciBkYXRhQnVmLCBmbG93LCBmbG93SWQsIGZvcm0sIGh0bWwsIGluc3RhbmNlLCBvcHRpb25zLCBzcGFjZSwgc3BhY2VJZCwgdXNlciwgdXNlcl9pZDtcbiAgaWYgKCFTdGVlZG9zLkFQSUF1dGhlbnRpY2F0aW9uQ2hlY2socmVxLCByZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHVzZXJfaWQgPSByZXEudXNlcklkO1xuICB1c2VyID0gZGIudXNlcnMuZmluZE9uZSh7XG4gICAgX2lkOiB1c2VyX2lkXG4gIH0pO1xuICBzcGFjZUlkID0gcmVxLnBhcmFtcy5zcGFjZTtcbiAgZmxvd0lkID0gcmVxLnBhcmFtcy5mbG93O1xuICBzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHtcbiAgICBfaWQ6IHNwYWNlSWRcbiAgfSk7XG4gIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICBfaWQ6IGZsb3dJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgJ2N1cnJlbnQuX2lkJzogMSxcbiAgICAgIGZvcm06IDFcbiAgICB9XG4gIH0pO1xuICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgX2lkOiBmbG93LmZvcm1cbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgJ2N1cnJlbnQuX2lkJzogMVxuICAgIH1cbiAgfSk7XG4gIG9wdGlvbnMgPSB7XG4gICAgc2hvd1RyYWNlOiBmYWxzZSxcbiAgICBzaG93QXR0YWNobWVudHM6IGZhbHNlLFxuICAgIHRlbXBsYXRlTmFtZTogXCJkZWZhdWx0XCIsXG4gICAgZWRpdGFibGU6IHRydWUsXG4gICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgIGluc3RhbmNlX3N0eWxlOiBcImluc3RhbmNlLWRlZmF1bHRcIixcbiAgICBwbHVnaW5zOiBcIlxcbjxtZXRhIGh0dHAtZXF1aXY9XFxcIlgtVUEtQ29tcGF0aWJsZVxcXCIgY29udGVudD1cXFwiSUU9ZWRnZSxjaHJvbWU9MVxcXCIgLz5cXG48bWV0YSBuYW1lPVxcXCJmb3JtYXQtZGV0ZWN0aW9uXFxcIiBjb250ZW50PVxcXCJ0ZWxlcGhvbmU9bm9cXFwiPlxcbjxtZXRhIGh0dHAtZXF1aXY9XFxcIngtcmltLWF1dG8tbWF0Y2hcXFwiIGNvbnRlbnQ9XFxcIm5vbmVcXFwiPlxcbjx0aXRsZT5cIiArIGZsb3cubmFtZSArIFwiPC90aXRsZT5cXG48bWV0YSBjb250ZW50PSd3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT0wJyBuYW1lPSd2aWV3cG9ydCcgLz5cXG48bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoXFxcIiAvPlxcblxcbjxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgdHlwZT1cXFwidGV4dC9jc3NcXFwiIGhyZWY9XFxcIi9wbHVnaW5zL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9jc3MvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLm1pbi5jc3NcXFwiPlxcblxcbjxzY3JpcHQgc3JjPVxcXCIvcGx1Z2lucy9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvanMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLm1pbi5qc1xcXCIgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj48L3NjcmlwdD5cXG5cXG48c2NyaXB0IHNyYz1cXFwiL3BsdWdpbnMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2pzL2xvY2FsZXMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLnpoLUNOLmpzXFxcIiB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIGNoYXJzZXQ9XFxcIlVURi04XFxcIj48L3NjcmlwdD5cXG5cXG48bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIHR5cGU9XFxcInRleHQvY3NzXFxcIiBocmVmPVxcXCIvcGx1Z2lucy90b2FzdHIvdG9hc3RyLm1pbi5jc3NcXFwiPlxcbjxzY3JpcHQgc3JjPVxcXCIvcGx1Z2lucy90b2FzdHIvdG9hc3RyLm1pbi5qc1xcXCIgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj48L3NjcmlwdD5cXG48bGluayByZWw9XFxcInN0eWxlc2hlZXRcXFwiIHR5cGU9XFxcInRleHQvY3NzXFxcIiBocmVmPVxcXCIvanMvd29ya2Zsb3dfY2xpZW50LmNzc1xcXCI+XFxuPHNjcmlwdCBzcmM9XFxcIi9qcy93b3JrZmxvd19jbGllbnQuanNcXFwiIHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+PC9zY3JpcHQ+XCJcbiAgfTtcbiAgaW5zdGFuY2UgPSB7XG4gICAgZmxvdzogZmxvdy5faWQsXG4gICAgZmxvd192ZXJzaW9uOiBmbG93LmN1cnJlbnQuX2lkLFxuICAgIGZvcm06IGZvcm0uX2lkLFxuICAgIGZvcm1fdmVyc2lvbjogZm9ybS5jdXJyZW50Ll9pZCxcbiAgICB2YWx1ZXM6IHt9LFxuICAgIG5hbWU6IGZsb3cubmFtZSxcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9O1xuICBodG1sID0gSW5zdGFuY2VSZWFkT25seVRlbXBsYXRlLmdldEluc3RhbmNlSHRtbCh1c2VyLCBzcGFjZSwgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICBkYXRhQnVmID0gbmV3IEJ1ZmZlcihodG1sKTtcbiAgcmVzLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBkYXRhQnVmLmxlbmd0aCk7XG4gIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtcmFuZ2UnLCBcImJ5dGVzIDAtXCIgKyAoZGF0YUJ1Zi5sZW5ndGggLSAxKSArIFwiL1wiICsgZGF0YUJ1Zi5sZW5ndGgpO1xuICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgcmV0dXJuIHJlcy5lbmQoaHRtbCk7XG59KTtcbiIsIkFycmF5LnByb3RvdHlwZS5maWx0ZXJQcm9wZXJ0eSA9IGZ1bmN0aW9uKGgsIGwpe1xyXG4gICAgdmFyIGcgPSBbXTtcclxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih0KXtcclxuICAgICAgICB2YXIgbSA9IHQ/IHRbaF06bnVsbDtcclxuICAgICAgICB2YXIgZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmKG0gaW5zdGFuY2VvZiBBcnJheSl7XHJcbiAgICAgICAgICAgIGQgPSBtLmluY2x1ZGVzKGwpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBkID0gKGwgPT09IHVuZGVmaW5lZCk/IGZhbHNlOm09PWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGQpe1xyXG4gICAgICAgICAgICBnLnB1c2godCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZztcclxufTtcclxuXHJcbkFycmF5LnByb3RvdHlwZS5nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uKGspe1xyXG4gICAgdmFyIHYgPSBuZXcgQXJyYXkoKTtcclxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih0KXtcclxuICAgICAgICB2YXIgbSA9IHQ/IHRba106bnVsbDtcclxuICAgICAgICB2LnB1c2gobSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2O1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuZ2V0RWFjaCA9IGZ1bmN0aW9uKGNvZGUpe1xyXG4gICAgdmFyIHJldiA9IFtdO1xyXG4gICAgZm9yKHZhciBpID0gMCA7IGkgPCB0aGlzLmxlbmd0aCA7IGkrKyl7XHJcbiAgICAgICAgcmV2LnB1c2godGhpc1tpXVtjb2RlXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV2O1xyXG59O1xyXG5cclxuQXJyYXkucHJvdG90eXBlLnVuaXEgPSBmdW5jdGlvbigpe1xyXG4gICAgdmFyIGEgPSBbXTtcclxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihiKXsgXHJcbiAgICAgICAgaWYoYS5pbmRleE9mKGIpIDwgMClcclxuICAgICAgICAgICAge2FbYS5sZW5ndGhdID0gYn1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcblxyXG5Gb3JtX2Zvcm11bGEgPSB7fTtcclxuXHJcblxyXG5Gb3JtX2Zvcm11bGEubWl4aW4gPSBmdW5jdGlvbihkZXN0LCBzcmMpe1xyXG4gICAgZm9yKHZhciBrZXkgaW4gc3JjKXtcclxuICAgICAgICBkZXN0W2tleV0gPSBzcmNba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZXN0O1xyXG59O1xyXG5cclxuXHJcbkZvcm1fZm9ybXVsYS5oYW5kZXJVc2VyT2JqZWN0ID0gZnVuY3Rpb24odSl7XHJcblxyXG4gICAgaWYodSBpbnN0YW5jZW9mIEFycmF5KXtcclxuICAgICAgICB2YXIgdXNlciA9IHt9O1xyXG5cclxuICAgICAgICB1c2VyLm5hbWUgPSB1LmdldFByb3BlcnR5KFwibmFtZVwiKVxyXG4gICAgICAgIHVzZXIub3JnYW5pemF0aW9uID0ge307XHJcbiAgICAgICAgdXNlci5vcmdhbml6YXRpb24ubmFtZSA9IHUuZ2V0UHJvcGVydHkoXCJvcmdhbml6YXRpb25cIikuZ2V0UHJvcGVydHkoXCJuYW1lXCIpO1xyXG4gICAgICAgIHVzZXIub3JnYW5pemF0aW9uLmZ1bGxuYW1lID0gdS5nZXRQcm9wZXJ0eShcIm9yZ2FuaXphdGlvblwiKS5nZXRQcm9wZXJ0eShcImZ1bGxuYW1lXCIpO1xyXG5cclxuICAgICAgICB1c2VyLmhyID0gdS5nZXRQcm9wZXJ0eShcImhyXCIpXHJcblxyXG4gICAgICAgIHVzZXIuc29ydF9ubyA9IHUuZ2V0UHJvcGVydHkoXCJzb3J0X25vXCIpXHJcblxyXG5cdFx0dXNlci5tb2JpbGUgPSB1LmdldFByb3BlcnR5KFwibW9iaWxlXCIpXHJcblxyXG5cdFx0dXNlci53b3JrX3Bob25lID0gdS5nZXRQcm9wZXJ0eShcIndvcmtfcGhvbmVcIilcclxuXHJcblx0XHR1c2VyLnBvc2l0aW9uID0gdS5nZXRQcm9wZXJ0eShcInBvc2l0aW9uXCIpXHJcblxyXG4gICAgICAgIHZhciB1c2VyUm9sZXMgPSB1LmdldFByb3BlcnR5KFwicm9sZXNcIik7XHJcbiAgICAgICAgdmFyIHJvbGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdXNlclJvbGVzLmZvckVhY2goZnVuY3Rpb24oaSl7XHJcbiAgICAgICAgICAgIHJvbGVzID0gcm9sZXMuY29uY2F0KGkpO1xyXG4gICAgICAgIH0pOyBcclxuICAgICAgICByb2xlcy51bmlxKCk7XHJcbiAgICAgICAgdXNlci5yb2xlcyA9IHJvbGVzO1xyXG4gICAgICAgIHJldHVybiB1c2VyO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgcmV0dXJuIHU7XHJcbiAgICB9XHJcbn1cclxuXHJcbkZvcm1fZm9ybXVsYS5oYW5kZXJPcmdPYmplY3QgPSBmdW5jdGlvbihvKXtcclxuXHJcbiAgICBpZihvIGluc3RhbmNlb2YgQXJyYXkpe1xyXG4gICAgICAgIHZhciBvcmcgPSB7fTtcclxuXHRcdG9yZy5pZCA9IG8uZ2V0UHJvcGVydHkoXCJfaWRcIik7XHJcbiAgICAgICAgb3JnLm5hbWUgPSBvLmdldFByb3BlcnR5KFwibmFtZVwiKTtcclxuICAgICAgICBvcmcuZnVsbG5hbWUgPSBvLmdldFByb3BlcnR5KFwiZnVsbG5hbWVcIik7XHJcblxyXG4gICAgICAgIHJldHVybiBvcmc7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICByZXR1cm4gbztcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICAgICog6I635b6X5YWs5byP6ZyA6KaB55So5Yiw55qE5Yid5aeL5YC8XHJcbiAgICAqIOi+k+WFpe+8mmZpZWxkcywgdmFsdWVzLCBhcHBsaWNhbnRcclxuICAgICog6L6T5Ye677yaX192YWx1ZXNcclxuKiovXHJcbkZvcm1fZm9ybXVsYS5pbml0X2Zvcm11bGFfdmFsdWVzID0gZnVuY3Rpb24oZmllbGRzLCBhdXRvRm9ybURvYywgYXBwcm92ZXIsIGFwcGxpY2FudCwgc3BhY2VJZCl7XHJcbiAgICB2YXIgX192YWx1ZXMgPSB7fTtcclxuICAgIC8v55Sz6K+35Y2V5Lit5aGr55qE5YC85aSE55CGXHJcbiAgICBpZihmaWVsZHMgJiYgZmllbGRzLmxlbmd0aCAmJiBhdXRvRm9ybURvYykge1xyXG4gICAgICAgIC8vZGVidWdnZXI7XHJcbiAgICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZmllbGQpe1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGZpZWxkLnR5cGU7XHJcbiAgICAgICAgICAgIGlmKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT09ICd0YWJsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICAgICog5bCG6KGo5qC85a2X5q6155qE5YC86L+b6KGM6L2s5o2i5ZCO5Lyg5YWlX192YWx1ZXPkuK1cclxuICAgICAgICAgICAgICAgICAgICAqIHZhbHVlc+S4reihqOagvOeahOWAvOagvOW8j+S4ulxyXG4gICAgICAgICAgICAgICAgICAgICogW3tcImFcIjoxLFwiYlwiOjR9LHtcImFcIjoyLFwiYlwiOjV9LHtcImFcIjozLFwiYlwiOjZ9XVxyXG4gICAgICAgICAgICAgICAgICAgICogX192YWx1ZXPpnIDopoHovazljJbkuLrkuIvpnaLmoLzlvI/kuJTlkozkuLvooajnmoTlgLzkuIDmoLfmlL7liLDnrKzkuIDlsYJcclxuICAgICAgICAgICAgICAgICAgICAqIHtcImFcIjpbMSwyLDNdLFwiYlwiOls0LDUsNl19XHJcbiAgICAgICAgICAgICAgICAgICAgKiovXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlRmllbGRzID0gZmllbGQuc2ZpZWxkcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVWYWx1ZXMgPSBhdXRvRm9ybURvY1tmaWVsZC5jb2RlXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybXVsYVRhYmxlVmFsdWVzID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdGFibGVWYWx1ZXMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL+aMieWFrOW8j+eahOagvOW8j+i9rOaNouWAvOS4ul9fdGFibGVWYWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICBpZih0YWJsZUZpZWxkcyAmJiB0YWJsZUZpZWxkcy5sZW5ndGggJiYgdGFibGVWYWx1ZXMgJiYgdGFibGVWYWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHRhYmxlVmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybXVsYVRhYmxlVmFsdWVzLnB1c2goRm9ybV9mb3JtdWxhLmluaXRfZm9ybXVsYV92YWx1ZXModGFibGVGaWVsZHMsIHRhYmxlVmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5oyJ5Li76KGo55qE5qC85byP6L2s5o2iX190YWJsZVZhbHVlc+WKoOWIsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKHRhYmxlZmllbGQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX190YWJsZVZhbHVlc1t0YWJsZWZpZWxkLmNvZGVdID0gZm9ybXVsYVRhYmxlVmFsdWVzLmdldEVhY2godGFibGVmaWVsZC5jb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdmFsdWVzID0gRm9ybV9mb3JtdWxhLm1peGluKF9fdmFsdWVzLCBfX3RhYmxlVmFsdWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3VzZXInKXtcclxuICAgICAgICAgICAgICAgICAgICBfX3ZhbHVlc1tmaWVsZC5jb2RlXSA9IEZvcm1fZm9ybXVsYS5oYW5kZXJVc2VyT2JqZWN0KFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdHMoc3BhY2VJZCwgYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2dyb3VwJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgX192YWx1ZXNbZmllbGQuY29kZV0gPSBGb3JtX2Zvcm11bGEuaGFuZGVyT3JnT2JqZWN0KFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhT3JnT2JqZWN0cyhhdXRvRm9ybURvY1tmaWVsZC5jb2RlXSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnb2RhdGEnKXtcclxuXHRcdFx0XHRcdF9fdmFsdWVzW2ZpZWxkLmNvZGVdID0gYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV0gfHwge31cclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL+atpOWkhOS8oHNwYWNlSWTnu5npgInkurrmjqfku7bnmoTml6fmlbDmja7orqHnrpdyb2xlc+WSjG9yZ2FuaXphdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIF9fdmFsdWVzW2ZpZWxkLmNvZGVdID0gYXV0b0Zvcm1Eb2NbZmllbGQuY29kZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgIH1cclxuICAgIC8v5b2T5YmN5aSE55CG5Lq6XHJcbiAgICBfX3ZhbHVlc1tcImFwcHJvdmVyXCJdID0gV29ya2Zsb3dNYW5hZ2VyLmdldEZvcm11bGFVc2VyT2JqZWN0KHNwYWNlSWQsIGFwcHJvdmVyKTtcclxuICAgIC8v55Sz6K+35Lq6XHJcbiAgICBfX3ZhbHVlc1tcImFwcGxpY2FudFwiXSA9IFdvcmtmbG93TWFuYWdlci5nZXRGb3JtdWxhVXNlck9iamVjdChzcGFjZUlkLCBhcHBsaWNhbnQpO1xyXG5cclxuICAgIHJldHVybiBfX3ZhbHVlcztcclxufTtcclxuXHJcbiIsImdldEhhbmRsZXJzTWFuYWdlciA9IHt9XHJcblxyXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMgPSAodXNlcl9pZHMsIHJvbGVfaWRzLCBzcGFjZV9pZCktPlxyXG5cdGFwcHJvdmVfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRfLmVhY2godXNlcl9pZHMsICh1c2VyX2lkKS0+XHJcblx0XHRpZiBkYi51c2Vycy5maW5kKHtfaWQ6IHVzZXJfaWR9KS5jb3VudCgpID4gMFxyXG5cdFx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKHVzZXJfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZClcclxuXHRcdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdGFwcHJvdmVfdXNlcnMgPSBhcHByb3ZlX3VzZXJzLmNvbmNhdCh1c2VycylcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJ1c2VyX2lk5LiN5ZCI5rOV5LiN5ZCI5rOVXCIpXHJcblx0KVxyXG5cdGFwcHJvdmVfdXNlcnMgPSBfLnVuaXEoYXBwcm92ZV91c2VycylcclxuXHRyZXR1cm4gYXBwcm92ZV91c2Vyc1xyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXMgPSAodXNlcl9pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKS0+XHJcblx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRfLmVhY2gocm9sZV9pZHMsIChyb2xlX2lkKS0+XHJcblx0XHRpZiBkYi5mbG93X3JvbGVzLmZpbmQoe19pZDogcm9sZV9pZH0pLmNvdW50KCkgPiAwXHJcblx0XHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZSh1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZClcclxuXHRcdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInJvbGVfaWTlt7Lnu4/ooqvliKDpmaRcIilcclxuXHQpXHJcblx0aWYgdXNlcl9pZHMubGVuZ3RoID4gMFxyXG5cdFx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0XHRyZXR1cm4gdXNlcl9pZHNcclxuXHRlbHNlXHJcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuagueaNrnVzZXJfaWTlkoxyb2xlX2lkc+ayoeafpeWIsOWvueW6lOeahOWkhOeQhuS6ulwiKVxyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZSA9ICh1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZCkgLT5cclxuXHRvcmdzID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyczogdXNlcl9pZCB9LCB7IGZpZWxkczogeyBfaWQ6IDEgfSB9KS5mZXRjaCgpXHJcblx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRfLmVhY2gob3JncywgKG9yZykgLT5cclxuXHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZy5faWQsIHJvbGVfaWQsIHNwYWNlX2lkKVxyXG5cdFx0aWYgdXNlcnMubGVuZ3RoID4gMFxyXG5cdFx0XHR1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2VycylcclxuXHQpXHJcblx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0cmV0dXJuIHVzZXJfaWRzXHJcblxyXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyA9IChvcmdfaWRzLCByb2xlX2lkcywgc3BhY2VfaWQpLT5cclxuXHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdF8uZWFjaChvcmdfaWRzLCAob3JnX2lkKS0+XHJcblx0XHR1c2VycyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMob3JnX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpXHJcblx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXHJcblx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxyXG5cdClcclxuXHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcclxuXHRyZXR1cm4gdXNlcl9pZHNcclxuXHJcbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMgPSAob3JnX2lkLCByb2xlX2lkcywgc3BhY2VfaWQpLT5cclxuXHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdF8uZWFjaChyb2xlX2lkcywgKHJvbGVfaWQpLT5cclxuXHRcdHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpXHJcblx0XHRpZiB1c2Vycy5sZW5ndGggPiAwXHJcblx0XHRcdHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKVxyXG5cdClcclxuXHRpZiB1c2VyX2lkcy5sZW5ndGggPiAwXHJcblx0XHR1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcylcclxuXHRcdHJldHVybiB1c2VyX2lkc1xyXG5cdGVsc2VcclxuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2ub3JnX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIilcclxuXHJcbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZSA9IChvcmdfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKSAtPlxyXG5cdG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogb3JnX2lkIH0sIHsgZmllbGRzOiB7IHBhcmVudHM6IDEgfSB9KVxyXG5cdHVzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0cG9zaXRpb25zID0gZGIuZmxvd19wb3NpdGlvbnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgb3JnOiBvcmdfaWQsIHJvbGU6IHJvbGVfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KS5mZXRjaCgpXHJcblx0Xy5lYWNoKHBvc2l0aW9ucywgKHBvc2l0aW9uKSAtPlxyXG5cdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQocG9zaXRpb24udXNlcnMpXHJcblx0KVxyXG5cdGlmIHVzZXJfaWRzLmxlbmd0aCBpcyAwXHJcblx0XHRwYXJlbnRzID0gb3JnLnBhcmVudHNcclxuXHRcdF8uZWFjaChwYXJlbnRzLCAocGFyZW50X2lkKSAtPlxyXG5cdFx0XHRwb3NpdGlvbnMgPSBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBvcmc6IHBhcmVudF9pZCwgcm9sZTogcm9sZV9pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcclxuXHRcdFx0aWYgcG9zaXRpb25zLmxlbmd0aCA+IDBcclxuXHRcdFx0XHRfLmVhY2gocG9zaXRpb25zLCAocG9zaXRpb24pIC0+XHJcblx0XHRcdFx0XHR1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2VycylcclxuXHRcdFx0XHQpXHJcblx0XHQpXHJcblxyXG5cdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdHJldHVybiB1c2VyX2lkc1xyXG5cclxuZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzID0gKGluc3RhbmNlX2lkLCBzdGVwX2lkKSAtPlxyXG5cdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpXHJcblxyXG5cdCMg5ouf56i/5pe2LCDlj6/ku6Xorr7lrprlkI7nu63mr4/kuKrmraXpqqTnmoTlpITnkIbkurogIzE5MjZcclxuXHRpZiBpbnN0YW5jZS5zdGVwX2FwcHJvdmUgJiYgaW5zdGFuY2Uuc3RlcF9hcHByb3ZlW3N0ZXBfaWRdXHJcblx0XHRyZXR1cm4gaW5zdGFuY2Uuc3RlcF9hcHByb3ZlW3N0ZXBfaWRdXHJcblxyXG5cdGFwcHJvdmVfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRzcGFjZV9pZCA9IGluc3RhbmNlLnNwYWNlXHJcblx0Zmxvd19pZCA9IGluc3RhbmNlLmZsb3dcclxuXHRmbG93X3JldiA9IGluc3RhbmNlLmZsb3dfdmVyc2lvblxyXG5cdGN1cnJlbnRfZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoZmxvd19pZClcclxuXHRjdXJyZW50X3N0ZXAgPSBudWxsXHJcblx0Y3VycmVudF9zdGVwcyA9IG5ldyBBcnJheVxyXG5cclxuXHRpZiBjdXJyZW50X2Zsb3cuY3VycmVudC5faWQgaXMgZmxvd19yZXZcclxuXHRcdGN1cnJlbnRfc3RlcHMgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5zdGVwc1xyXG5cdGVsc2VcclxuXHRcdGN1cnJlbnQgPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCAoaGlzdG9yeSkgLT5cclxuXHRcdFx0cmV0dXJuIGhpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHQpXHJcblx0XHRjdXJyZW50X3N0ZXBzID0gY3VycmVudC5zdGVwc1xyXG5cclxuXHQjIOS7juiOt+WPlueahHN0ZXBz5Lit5qC55o2uOnN0ZXBfaWTmj5Dlj5blr7nlupTnmoRzdGVw5a+56LGhXHJcblx0Y3VycmVudF9zdGVwID0gXy5maW5kKGN1cnJlbnRfc3RlcHMsIChzdGVwKSAtPlxyXG5cdFx0cmV0dXJuIHN0ZXAuX2lkIGlzIHN0ZXBfaWRcclxuXHQpXHJcblx0IyDliKTmlq1zdGVwX3R5cGVcclxuXHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzIFwiY29uZGl0aW9uXCJcclxuXHRcdHVuZmluaXNoZWRfdHJhY2UgPSBfLmZpbmQoaW5zdGFuY2UudHJhY2VzLCAodHJhY2UpIC0+XHJcblx0XHRcdHJldHVybiB0cmFjZS5pc19maW5pc2hlZCBpcyBmYWxzZVxyXG5cdFx0KVxyXG5cclxuXHRcdHJldHVybiBuZXcgQXJyYXkodW5maW5pc2hlZF90cmFjZS5hcHByb3Zlc1swXS51c2VyKVxyXG5cclxuXHRpZiBjdXJyZW50X3N0ZXAuc3RlcF90eXBlIGlzIFwic3RhcnRcIlxyXG5cdFx0aGFuZGxlcnMgPSBuZXcgQXJyYXlcclxuXHRcdGhhbmRsZXJzLnB1c2goaW5zdGFuY2UuYXBwbGljYW50KVxyXG5cdFx0aGFuZGxlcnMucHVzaChpbnN0YW5jZS5zdWJtaXR0ZXIpXHJcblx0XHRoYW5kbGVycyA9IF8udW5pcShoYW5kbGVycylcclxuXHRcdHJldHVybiBoYW5kbGVyc1xyXG5cdCMg5b6X5Yiwc3RlcOeahFwiZGVhbF90eXBlXCLvvIzlubbov5vooYzpgLvovpHliKTmlq3mib7liLDlr7nlupTnmoTlpITnkIbkurpcclxuXHRkZWFsX3R5cGUgPSBjdXJyZW50X3N0ZXAuZGVhbF90eXBlXHJcblx0dXNlcnMgPSBuZXcgQXJyYXlcclxuXHRpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRSb2xlXCJcclxuXHRcdCMgMS4qKioqKioqKioqKueUs+ivt+S6uuaJgOWxnue7hOe7h+S4reeahOWuoeaJueWyl+S9jSoqKioqKioqKioqXHJcblx0XHRhcHBsaWNhbnQgPSBpbnN0YW5jZS5hcHBsaWNhbnRcclxuXHRcdGlmIGFwcGxpY2FudFxyXG5cdFx0XHRzcGFjZV91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogYXBwbGljYW50IH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3BhY2VfdXNlcl9jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKVxyXG5cclxuXHRcdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzIGFuZCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMFxyXG5cdFx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdFx0cm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7IF9pZDogYXBwcm92ZXJfcm9sZSB9KS5jb3VudCgpXHJcblx0XHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0XHQpXHJcblxyXG5cdFx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhhcHBsaWNhbnQsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKVxyXG5cclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJJbnN0YW5jZeeahOaPkOS6pOS6uuS4uuepulwiKVxyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwiaHJSb2xlXCJcclxuXHRcdGFwcHJvdmVIclJvbGVJZHMgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfaHJfcm9sZXM7XHJcblx0XHRpZiAoYXBwcm92ZUhyUm9sZUlkcylcclxuXHRcdFx0cmV0dXJuIF8ucGx1Y2soV29ya2Zsb3dNYW5hZ2VyLmdldEhyUm9sZXNVc2VycyhzcGFjZV9pZCwgYXBwcm92ZUhyUm9sZUlkcyksICd1c2VyJyk7XHJcblx0XHRlbHNlXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi6KeS6Imy5pyq5oyH5a6aXCIpXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRcIlxyXG5cdFx0IyAyLioqKioqKioqKioq55Sz6K+35Lq6KioqKioqKioqKipcclxuXHRcdGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudFxyXG5cdFx0c3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcGxpY2FudCB9KS5jb3VudCgpXHJcblx0XHRpZiBzcGFjZV91c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gbmV3IEFycmF5KGFwcGxpY2FudClcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcIm9yZ0ZpZWxkUm9sZVwiXHJcblx0XHQjIDMuKioqKioqKioqKirpg6jpl6jlrZfmrrXmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxyXG5cdFx0Zm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtXHJcblx0XHRmb3JtX3JldiA9IG51bGxcclxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHRcdClcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cclxuXHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKVxyXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxyXG5cdFx0aWYgZm9ybV9yZXYgaXMgZm9ybS5jdXJyZW50Ll9pZFxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnRcclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIChmb3JtX2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGZvcm1faGlzdG9yeS5faWQgaXMgZm9ybV9yZXZcclxuXHRcdFx0KVxyXG5cclxuXHRcdGFwcHJvdmVyX29yZ19maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdfZmllbGRcclxuXHRcdGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkc1xyXG5cdFx0ZmllbGRfY29kZSA9IG51bGxcclxuXHRcdF8uZWFjaChmb3JtX2ZpZWxkcywgKGZvcm1fZmllbGQpIC0+XHJcblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxyXG5cdFx0XHRcdGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGVcclxuXHRcdClcclxuXHJcblx0XHQjIOWPluW+l+acgOaWsOeahHZhbHVlc1xyXG5cdFx0bmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSlcclxuXHRcdG9yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRcdG9yZ19pZHNfbmFtZXMgPSBuZXcgQXJyYXlcclxuXHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XHJcblx0XHRcdFx0b3JnX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKVxyXG5cclxuXHRcdCMg5qCh6aqMb3JnX2lk5pWw57uE5Litb3JnX2lk5piv5ZCm5ZCI5rOVXHJcblx0XHRfLmVhY2gob3JnX2lkc19uYW1lcywgKG9yZykgLT5cclxuXHRcdFx0Y2hlY2tfb3JnX2NvdW50ID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgX2lkOiBvcmdbXCJpZFwiXSB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX29yZ19jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dJROS4jeWQiOazlVwiKVxyXG5cdFx0XHRvcmdfaWRzLnB1c2gob3JnW1wiaWRcIl0pXHJcblx0XHQpXHJcblxyXG5cdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzIGFuZCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMFxyXG5cdFx0XHQjIOajgOafpWFwcHJvdmVyX3JvbGVz5Litcm9sZeaYr+WQpuS4jeWtmOWcqOaIluW3sue7j+iiq+WIoOmZpFxyXG5cdFx0XHRfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCAoYXBwcm92ZXJfcm9sZSkgLT5cclxuXHRcdFx0XHRyb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHsgX2lkOiBhcHByb3Zlcl9yb2xlIH0pLmNvdW50KClcclxuXHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIGFwcHJvdmVyX3JvbGUgKyBcIuW3sue7j+iiq+WIoOmZpFwiKVxyXG5cdFx0XHQpXHJcblx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ3NBbmRSb2xlcyhvcmdfaWRzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIGluc3RhbmNlLnNwYWNlKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKVxyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwib3JnRmllbGRcIlxyXG5cdFx0IyA0LioqKioqKioqKioq6YOo6Zeo5a2X5q615omA5bGe57uE57uH5Lit55qE5Lq65ZGYKioqKioqKioqKipcclxuXHRcdGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybVxyXG5cdFx0Zm9ybV9yZXYgPSBudWxsXHJcblx0XHRpZiBmbG93X3JldiBpcyBjdXJyZW50X2Zsb3cuY3VycmVudC5faWRcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb25cclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCAoY3VycmVudF9mbG93X2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0XHQpXHJcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uIGlmIGN1cnJlbnRfZmxvd192ZXJzaW9uXHJcblxyXG5cdFx0Zm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZClcclxuXHRcdGN1cnJlbnRfZm9ybSA9IG51bGxcclxuXHRcdGlmIGZvcm1fcmV2IGlzIGZvcm0uY3VycmVudC5faWRcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50XHJcblx0XHRlbHNlXHJcblx0XHRcdGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCAoZm9ybV9oaXN0b3J5KSAtPlxyXG5cdFx0XHRcdHJldHVybiBmb3JtX2hpc3RvcnkuX2lkIGlzIGZvcm1fcmV2XHJcblx0XHRcdClcclxuXHJcblx0XHRhcHByb3Zlcl9vcmdfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JnX2ZpZWxkXHJcblx0XHRmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHNcclxuXHRcdGZpZWxkX2NvZGUgPSBudWxsXHJcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKS0+XHJcblx0XHRcdGlmIGZvcm1fZmllbGQuX2lkIGlzIGFwcHJvdmVyX29yZ19maWVsZFxyXG5cdFx0XHRcdGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGVcclxuXHRcdClcclxuXHJcblx0XHQjIOWPluW+l+acgOaWsOeahHZhbHVlc1xyXG5cdFx0bmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSlcclxuXHJcblx0XHRvcmdfaWRzID0gbmV3IEFycmF5XHJcblx0XHRvcmdfaWRzX25hbWVzID0gbmV3IEFycmF5XHJcblx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheVxyXG5cdFx0XHRcdG9yZ19pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRvcmdfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSlcclxuXHJcblx0XHQjIOagoemqjG9yZ19pZOaVsOe7hOS4rW9yZ19pZOaYr+WQpuWQiOazlVxyXG5cdFx0Xy5lYWNoKG9yZ19pZHNfbmFtZXMsIChvcmcpIC0+XHJcblx0XHRcdGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7IF9pZDogb3JnW1wiaWRcIl0gfSkuY291bnQoKVxyXG5cdFx0XHRpZiBjaGVja19vcmdfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHSUTkuI3lkIjms5VcIilcclxuXHRcdFx0b3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5qCh6aqMb3Jn5LiL5a2Y5Zyo5aSE55CG5Lq6XHJcblx0XHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoKG9yZ19pZHMsIChvcmdfaWQpIC0+XHJcblx0XHRcdG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7IF9pZDogb3JnX2lkIH0sIHsgZmllbGRzOiB7IHVzZXJzOiAxIH0gfSlcclxuXHRcdFx0b3JnX2NoaWxkcmVuID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCBwYXJlbnRzOiBvcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KS5mZXRjaCgpXHJcblx0XHRcdG9yZ19jaGlsZHJlbi51bnNoaWZ0KG9yZylcclxuXHRcdFx0Y2hlY2tfb3JncyA9IG9yZ19jaGlsZHJlblxyXG5cdFx0XHRvcmdfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdFx0Xy5lYWNoKGNoZWNrX29yZ3MsIChjaGVja19vcmdfdXNlcikgLT5cclxuXHRcdFx0XHRpZiBjaGVja19vcmdfdXNlci51c2Vyc1xyXG5cdFx0XHRcdFx0Xy5lYWNoKGNoZWNrX29yZ191c2VyLnVzZXJzLCAob3JnX3VzZXIpIC0+XHJcblx0XHRcdFx0XHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IG9yZ191c2VyIH0pLmNvdW50KCkgaXMgMFxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwic3BhY2XkuIvkuI3lrZjlnKjmraR1c2VyXCIpXHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdFx0dXNlcl9pZHMgPSB1c2VyX2lkcy5jb25jYXQoY2hlY2tfb3JnX3VzZXIudXNlcnMpXHJcblx0XHRcdFx0b3JnX3VzZXJzID0gb3JnX3VzZXJzLmNvbmNhdChjaGVja19vcmdfdXNlci51c2VycylcclxuXHRcdFx0KVxyXG5cclxuXHRcdFx0aWYgb3JnX3VzZXJzLmxlbmd0aCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dcIiArIG9yZ19pZCArIFwi5LiN5a2Y5Zyo5aSE55CG5Lq6XCIpXHJcblxyXG5cdFx0KVxyXG5cclxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHVzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJ1c2VyRmllbGRSb2xlXCJcclxuXHRcdCMgNS4qKioqKioqKioqKuS6uuWRmOWtl+auteaJgOWxnue7hOe7h+S4reeahOWuoeaJueWyl+S9jSoqKioqKioqKioqXHJcblx0XHRmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm1cclxuXHRcdGZvcm1fcmV2ID0gbnVsbFxyXG5cdFx0aWYgZmxvd19yZXYgaXMgY3VycmVudF9mbG93LmN1cnJlbnQuX2lkXHJcblx0XHRcdGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uXHJcblx0XHRlbHNlXHJcblx0XHRcdGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgKGN1cnJlbnRfZmxvd19oaXN0b3J5KSAtPlxyXG5cdFx0XHRcdHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgaXMgZmxvd19yZXZcclxuXHRcdFx0KVxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbiBpZiBjdXJyZW50X2Zsb3dfdmVyc2lvblxyXG5cclxuXHRcdGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpXHJcblx0XHRjdXJyZW50X2Zvcm0gPSBudWxsXHJcblx0XHRpZiBmb3JtX3JldiBpcyBmb3JtLmN1cnJlbnQuX2lkXHJcblx0XHRcdGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgKGZvcm1faGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCBpcyBmb3JtX3JldlxyXG5cdFx0XHQpXHJcblxyXG5cdFx0YXBwcm92ZXJfdXNlcl9maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHNcclxuXHRcdGZpZWxkX2NvZGUgPSBudWxsXHJcblx0XHRfLmVhY2goZm9ybV9maWVsZHMsIChmb3JtX2ZpZWxkKSAtPlxyXG5cdFx0XHRpZiBmb3JtX2ZpZWxkLl9pZCBpcyBhcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRcdFx0ZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5Y+W5b6X5pyA5paw55qEdmFsdWVzXHJcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cdFx0IyDojrflj5Z1c2VyX2lk5pWw57uEXHJcblx0XHR1c2VyX2lkc19uYW1lcyA9IG5ldyBBcnJheVxyXG5cdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXVxyXG5cdFx0XHRpZiBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXlcclxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHVzZXJfaWRzX25hbWVzLnB1c2gobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSlcclxuXHJcblx0XHQjIOagoemqjHVzZXJfaWTmlbDnu4TkuK11c2VyX2lk5piv5ZCm5ZCI5rOVXHJcblx0XHR1c2VyX2lkcyA9IG5ldyBBcnJheVxyXG5cdFx0Xy5lYWNoKHVzZXJfaWRzX25hbWVzLCAodXNlcikgLT5cclxuXHRcdFx0Y2hlY2tfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IHVzZXJbXCJpZFwiXSB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX3VzZXJfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5Lq65ZGYSUTkuI3lkIjms5VcIilcclxuXHRcdFx0dXNlcl9pZHMucHVzaCh1c2VyW1wiaWRcIl0pXHJcblx0XHQpXHJcblxyXG5cdFx0dXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpXHJcblx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXHJcblx0XHRcdCMg5qOA5p+lYXBwcm92ZXJfcm9sZXPkuK1yb2xl5piv5ZCm5LiN5a2Y5Zyo5oiW5bey57uP6KKr5Yig6ZmkXHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpXHJcblx0XHRcdClcclxuXHRcdFx0cmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyh1c2VyX2lkcywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBpbnN0YW5jZS5zcGFjZSlcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIilcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInVzZXJGaWVsZFwiXHJcblx0XHQjIDYuKioqKioqKioqKirooajljZXkurrlkZjlrZfmrrUqKioqKioqKioqKlxyXG5cdFx0Zm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtXHJcblx0XHRmb3JtX3JldiA9IG51bGxcclxuXHRcdGlmIGZsb3dfcmV2IGlzIGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZFxyXG5cdFx0XHRmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIChjdXJyZW50X2Zsb3dfaGlzdG9yeSkgLT5cclxuXHRcdFx0XHRyZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkIGlzIGZsb3dfcmV2XHJcblx0XHRcdClcclxuXHRcdFx0Zm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb24gaWYgY3VycmVudF9mbG93X3ZlcnNpb25cclxuXHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKVxyXG5cdFx0Y3VycmVudF9mb3JtID0gbnVsbFxyXG5cdFx0aWYgZm9ybV9yZXYgaXMgZm9ybS5jdXJyZW50Ll9pZFxyXG5cdFx0XHRjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnRcclxuXHRcdGVsc2VcclxuXHRcdFx0Y3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIChmb3JtX2hpc3RvcnkpIC0+XHJcblx0XHRcdFx0cmV0dXJuIGZvcm1faGlzdG9yeS5faWQgaXMgZm9ybV9yZXZcclxuXHRcdFx0KVxyXG5cclxuXHRcdGFwcHJvdmVyX3VzZXJfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcl9maWVsZFxyXG5cdFx0Zm9ybV9maWVsZHMgPSBjdXJyZW50X2Zvcm0uZmllbGRzXHJcblx0XHRmaWVsZF9jb2RlID0gbnVsbFxyXG5cdFx0Xy5lYWNoKGZvcm1fZmllbGRzLCAoZm9ybV9maWVsZCktPlxyXG5cdFx0XHRpZiBmb3JtX2ZpZWxkLl9pZCBpcyBhcHByb3Zlcl91c2VyX2ZpZWxkXHJcblx0XHRcdFx0ZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZVxyXG5cdFx0KVxyXG5cclxuXHRcdCMg5Y+W5b6X5pyA5paw55qEdmFsdWVzXHJcblx0XHRuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKVxyXG5cclxuXHRcdCMg6I635Y+WdXNlcl9pZOaVsOe7hFxyXG5cdFx0dXNlcl9pZHNfbmFtZXMgPSBuZXcgQXJyYXlcclxuXHRcdGlmIG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV1cclxuXHRcdFx0aWYgbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSBpbnN0YW5jZW9mIEFycmF5XHJcblx0XHRcdFx0dXNlcl9pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR1c2VyX2lkc19uYW1lcy5wdXNoKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pXHJcblxyXG5cdFx0IyDmoKHpqox1c2VyX2lk5pWw57uE5LitdXNlcl9pZOaYr+WQpuWQiOazlVxyXG5cdFx0dXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaCh1c2VyX2lkc19uYW1lcywgKHVzZXIpIC0+XHJcblx0XHRcdGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiB1c2VyW1wiaWRcIl0gfSkuY291bnQoKVxyXG5cdFx0XHRpZiBjaGVja191c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS6uuWRmElE5LiN5ZCI5rOVXCIpXHJcblx0XHRcdHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKVxyXG5cdFx0KVxyXG5cclxuXHRcdHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKVxyXG5cdFx0cmV0dXJuIHVzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzcGVjaWZ5U3RlcFJvbGVcIlxyXG5cdFx0IyA3LioqKioqKioqKioq5oyH5a6a5q2l6aqk5aSE55CG5a6h5om55bKX5L2NKioqKioqKioqKipcclxuXHRcdGFwcHJvdmVyX3N0ZXAgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfc3RlcFxyXG5cdFx0ZmluaXNoZWRfdHJhY2VzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2goaW5zdGFuY2UudHJhY2VzLCAodHJhY2UpIC0+XHJcblx0XHRcdGlmIHRyYWNlLnN0ZXAgaXMgYXBwcm92ZXJfc3RlcFxyXG5cdFx0XHRcdGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKVxyXG5cdFx0KVxyXG5cdFx0IyDmoLnmja5zdGFydF9kYXRl5Y+W5pyA5paw55qEdHJhY2VcclxuXHRcdG1heF9zdGFydERhdGVfdHJhY2UgPSBfLm1heChmaW5pc2hlZF90cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRyZXR1cm4gdC5zdGFydF9kYXRlXHJcblx0XHQpXHJcblxyXG5cdFx0YXBwcm92ZV91c2VycyA9IF8ucGx1Y2sobWF4X3N0YXJ0RGF0ZV90cmFjZS5hcHByb3ZlcywgXCJ1c2VyXCIpXHJcblxyXG5cdFx0aWYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzXHJcblx0XHRcdF8uZWFjaChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIChhcHByb3Zlcl9yb2xlKSAtPlxyXG5cdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdGlmIHJvbGVfY291bnQgaXMgMFxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0KVxyXG5cclxuXHRcdCMg6aqM6K+B5p+l5Yiw55qEdXNlcuaYr+WQpumDveWQiOazlVxyXG5cdFx0Xy5lYWNoKGFwcHJvdmVfdXNlcnMsIChhcHByb3ZlX3VzZXIpIC0+XHJcblx0XHRcdGlmIGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVfdXNlciB9KS5jb3VudCgpIGlzIDBcclxuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaMh+WumuatpemqpOeahOWkhOeQhuS6uuW3sue7j+WPmOabtFwiKVxyXG5cdFx0KVxyXG5cclxuXHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMoYXBwcm92ZV91c2VycywgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZClcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInNwZWNpZnlTdGVwVXNlclwiXHJcblx0XHQjIDguKioqKioqKioqKirmjIflrprmraXpqqTlpITnkIbkuroqKioqKioqKioqKlxyXG5cdFx0YXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwXHJcblx0XHRmaW5pc2hlZF90cmFjZXMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChpbnN0YW5jZS50cmFjZXMsICh0cmFjZSkgLT5cclxuXHRcdFx0aWYgdHJhY2Uuc3RlcCBpcyBhcHByb3Zlcl9zdGVwXHJcblx0XHRcdFx0ZmluaXNoZWRfdHJhY2VzLnB1c2godHJhY2UpXHJcblx0XHQpXHJcblx0XHQjIOagueaNrnN0YXJ0X2RhdGXlj5bmnIDmlrDnmoR0cmFjZVxyXG5cdFx0bWF4X3N0YXJ0RGF0ZV90cmFjZSA9IF8ubWF4KGZpbmlzaGVkX3RyYWNlcywgKHQpIC0+XHJcblx0XHRcdHJldHVybiB0LnN0YXJ0X2RhdGVcclxuXHRcdClcclxuXHJcblx0XHRhcHByb3ZlX3VzZXJzID0gXy5wbHVjayhtYXhfc3RhcnREYXRlX3RyYWNlLmFwcHJvdmVzLCBcInVzZXJcIilcclxuXHJcblx0XHQjIOmqjOivgeafpeWIsOeahHVzZXLmmK/lkKbpg73lkIjms5VcclxuXHRcdF8uZWFjaChhcHByb3ZlX3VzZXJzLCAoYXBwcm92ZV91c2VyKS0+XHJcblx0XHRcdGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVfdXNlciB9KS5jb3VudCgpXHJcblx0XHRcdGlmIGNoZWNrX2FwcHJvdmVfdXNlcl9jb3VudCBpcyAwXHJcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmjIflrprmraXpqqTnmoTlpITnkIbkurrlt7Lnu4/lj5jmm7RcIilcclxuXHRcdClcclxuXHJcblx0XHRhcHByb3ZlX3VzZXJzID0gXy51bmlxKGFwcHJvdmVfdXNlcnMpXHJcblx0XHRyZXR1cm4gYXBwcm92ZV91c2Vyc1xyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3VibWl0dGVyUm9sZVwiXHJcblx0XHQjIDkuKioqKioqKioqKirloavljZXkurrmiYDlsZ7nu4Tnu4fkuK3nmoTlrqHmibnlspfkvY0qKioqKioqKioqKlxyXG5cdFx0c3VibWl0dGVyID0gaW5zdGFuY2Uuc3VibWl0dGVyXHJcblx0XHRpZiBub3Qgc3VibWl0dGVyXHJcblx0XHRcdCMg5Yik5pat5o+Q5Lqk5Lq65piv5ZCm5bey57uP6KKr5Yig6ZmkXHJcblx0XHRcdHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogc3VibWl0dGVyIH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3VibWl0dGVyX3VzZXJfY291bnQgaXMgMFxyXG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5o+Q5Lqk5Lq65bey57uP6KKr5Yig6Zmk5oiW5LiN5bGe5LqO5b2T5YmN5bel5L2c5Yy6XCIpXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgYW5kIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHQjIOajgOafpWFwcHJvdmVyX3JvbGVz5Litcm9sZeaYr+WQpuS4jeWtmOWcqOaIluW3sue7j+iiq+WIoOmZpFxyXG5cdFx0XHRcdFx0Xy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgKGFwcHJvdmVyX3JvbGUpIC0+XHJcblx0XHRcdFx0XHRcdHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX3JvbGUgfSkuY291bnQoKVxyXG5cdFx0XHRcdFx0XHRpZiByb2xlX2NvdW50IGlzIDBcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBhcHByb3Zlcl9yb2xlICsgXCLlt7Lnu4/ooqvliKDpmaRcIilcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhzdWJtaXR0ZXIsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmtYHnqIvmraXpqqRcIiArIGN1cnJlbnRfc3RlcC5uYW1lICsgXCLlrqHmibnlspfkvY3mnKrmjIflrppcIilcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnlLPor7fljZXnmoTmj5DkuqTkurrkuLrnqbpcIilcclxuXHRlbHNlIGlmIGRlYWxfdHlwZSBpcyBcInN1Ym1pdHRlclwiXHJcblx0XHQjIDEwLioqKioqKioqKioq5o+Q5Lqk5Lq6KioqKioqKioqKipcclxuXHRcdHN1Ym1pdHRlciA9IGluc3RhbmNlLnN1Ym1pdHRlclxyXG5cdFx0IyDliKTmlq3mj5DkuqTkurrmmK/lkKblt7Lnu4/ooqvliKDpmaRcclxuXHRcdHN1Ym1pdHRlcl91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7IHNwYWNlOiBzcGFjZV9pZCwgdXNlcjogc3VibWl0dGVyIH0pLmNvdW50KClcclxuXHRcdGlmIHN1Ym1pdHRlcl91c2VyX2NvdW50IGlzIDBcclxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIilcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIG5ldyBBcnJheShzdWJtaXR0ZXIpXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJzcGVjaWZ5T3JnXCJcclxuXHRcdCMgMTEuKioqKioqKioqKirmn5Dpg6jpl6jlhoXnmoTmiYDmnInkuroqKioqKioqKioqKlxyXG5cdFx0YXBwcm92ZXJfb3JnX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdzXHJcblx0XHRpZiBub3QgYXBwcm92ZXJfb3JnX2lkcyBvciBhcHByb3Zlcl9vcmdfaWRzLmxlbmd0aCBpcyAwXHJcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5pyq5a6a5LmJ55So5LqO5p+l5om+5LiL5LiA5q2l5aSE55CG5Lq655qE6YOo6Zeo77yM6K+36IGU57O7566h55CG5ZGY6LCD5p+l5rWB56iL5Zu+55qE6YWN572u5piv5ZCm5q2j56GuXCIpXHJcblxyXG5cdFx0IyDpqozor4HmiYDmjIflrprnmoRvcmdhbml6YXRpb25faWTpg73lrZjlnKhcclxuXHRcdHZhbGlkX2FwcHJvdmVyX29yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChhcHByb3Zlcl9vcmdfaWRzLCAoYXBwcm92ZXJfb3JnX2lkKSAtPlxyXG5cdFx0XHRpZiBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBfaWQ6IGFwcHJvdmVyX29yZ19pZCB9KS5jb3VudCgpID4gMFxyXG5cdFx0XHRcdHZhbGlkX2FwcHJvdmVyX29yZ19pZHMudW5zaGlmdChhcHByb3Zlcl9vcmdfaWQpXHJcblx0XHQpXHJcblxyXG5cdFx0b3JnX3VzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2godmFsaWRfYXBwcm92ZXJfb3JnX2lkcywgKHZhbGlkX2FwcHJvdmVyX29yZ19pZCkgLT5cclxuXHRcdFx0dmFsaWRfYXBwcm92ZXJfb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHsgX2lkOiB2YWxpZF9hcHByb3Zlcl9vcmdfaWQgfSwgeyBmaWVsZHM6IHsgdXNlcnM6IDEgfSB9KVxyXG5cdFx0XHRpZiB2YWxpZF9hcHByb3Zlcl9vcmcudXNlcnNcclxuXHRcdFx0XHRvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KHZhbGlkX2FwcHJvdmVyX29yZy51c2VycylcclxuXHJcblx0XHRcdGNoaWxkX29yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHBhcmVudHM6IHZhbGlkX2FwcHJvdmVyX29yZ19pZCB9LCB7IGZpZWxkczogeyB1c2VyczogMSB9IH0pLmZldGNoKClcclxuXHRcdFx0Xy5lYWNoKGNoaWxkX29yZ3MsIChjaGlsZF9vcmcpIC0+XHJcblx0XHRcdFx0aWYgY2hpbGRfb3JnLnVzZXJzXHJcblx0XHRcdFx0XHRvcmdfdXNlcl9pZHMgPSBvcmdfdXNlcl9pZHMuY29uY2F0KGNoaWxkX29yZy51c2VycylcclxuXHRcdFx0KVxyXG5cdFx0KVxyXG5cclxuXHRcdG9yZ191c2VyX2lkcyA9IF8udW5pcShvcmdfdXNlcl9pZHMpXHJcblx0XHRuZXdfb3JnX3VzZXJfaWRzID0gbmV3IEFycmF5XHJcblx0XHRfLmVhY2gob3JnX3VzZXJfaWRzLCAob3JnX3VzZXJfaWQpIC0+XHJcblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IG9yZ191c2VyX2lkIH0pLmNvdW50KClcclxuXHRcdFx0aWYgc3BhY2VfdXNlcl9pbmZvX2NvdW50ID4gMFxyXG5cdFx0XHRcdG5ld19vcmdfdXNlcl9pZHMucHVzaChvcmdfdXNlcl9pZClcclxuXHRcdClcclxuXHJcblx0XHRyZXR1cm4gbmV3X29yZ191c2VyX2lkc1xyXG5cdGVsc2UgaWYgZGVhbF90eXBlIGlzIFwic3BlY2lmeVVzZXJcIlxyXG5cdFx0IyAxMi4qKioqKioqKioqKuaMh+WumueahOS6uuWRmCoqKioqKioqKioqXHJcblx0XHRhcHByb3Zlcl91c2VyX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2Vyc1xyXG5cdFx0YXBwcm92ZXJfdXNlcl9pZHMgPSBfLnVuaXEoYXBwcm92ZXJfdXNlcl9pZHMpXHJcblx0XHRuZXdfYXBwcm92ZXJfdXNlcl9pZHMgPSBuZXcgQXJyYXlcclxuXHRcdF8uZWFjaChhcHByb3Zlcl91c2VyX2lkcywgKGFwcHJvdmVyX3VzZXJfaWQpIC0+XHJcblx0XHRcdHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoeyBzcGFjZTogc3BhY2VfaWQsIHVzZXI6IGFwcHJvdmVyX3VzZXJfaWQgfSkuY291bnQoKVxyXG5cdFx0XHRpZiBzcGFjZV91c2VyX2luZm9fY291bnQgPiAwXHJcblx0XHRcdFx0bmV3X2FwcHJvdmVyX3VzZXJfaWRzLnB1c2goYXBwcm92ZXJfdXNlcl9pZClcclxuXHRcdClcclxuXHJcblx0XHRyZXR1cm4gbmV3X2FwcHJvdmVyX3VzZXJfaWRzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJwaWNrdXBBdFJ1bnRpbWVcIlxyXG5cdFx0IyAxMy4qKioqKioqKioqKuWuoeaJueaXtuaMh+WumioqKioqKioqKioqXHJcblx0XHRuZXh0X3N0ZXBfdXNlcnMgPSBuZXcgQXJyYXlcclxuXHRcdF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIChfdHIpIC0+XHJcblx0XHRcdHJldHVybiBfdHIuaXNfZmluaXNoZWQgaXMgZmFsc2VcclxuXHRcdClcclxuXHRcdF9hcHByb3ZlID0gXy5maW5kKF90cmFjZS5hcHByb3ZlcywgKF9hcHApIC0+XHJcblx0XHRcdHJldHVybiBfYXBwLmlzX2ZpbmlzaGVkIGlzIGZhbHNlIGFuZCBfYXBwLnR5cGUgaXNudCAnY2MnXHJcblx0XHQpXHJcblxyXG5cdFx0aWYgX2FwcHJvdmUubmV4dF9zdGVwc1xyXG5cdFx0XHRpZiBfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl1cclxuXHRcdFx0XHRuZXh0X3N0ZXBfdXNlcnMgPSBfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl1cclxuXHJcblx0XHRyZXR1cm4gbmV4dF9zdGVwX3VzZXJzXHJcblx0ZWxzZSBpZiBkZWFsX3R5cGUgaXMgXCJhcHBsaWNhbnRTdXBlcmlvclwiXHJcblx0XHQjIDE0LioqKioqKioqKioq55Sz6K+35Lq65LiK57qn5Li7566hKioqKioqKioqKipcclxuXHRcdGFwcGxpY2FudFN1cGVyaW9ycyA9IG5ldyBBcnJheVxyXG5cdFx0X3NwYWNlX3VzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHsgc3BhY2U6IHNwYWNlX2lkLCB1c2VyOiBpbnN0YW5jZS5hcHBsaWNhbnQgfSwgeyBmaWVsZHM6IHsgbWFuYWdlcjogMSB9IH0pXHJcblx0XHRpZiBfc3BhY2VfdXNlci5tYW5hZ2VyXHJcblx0XHRcdGFwcGxpY2FudFN1cGVyaW9ycy5wdXNoKF9zcGFjZV91c2VyLm1hbmFnZXIpXHJcblxyXG5cdFx0cmV0dXJuIGFwcGxpY2FudFN1cGVyaW9ycyIsIiAgICAgICAgICAgICAgICAgICAgICAgXG5cbmdldEhhbmRsZXJzTWFuYWdlciA9IHt9O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXMgPSBmdW5jdGlvbih1c2VyX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKSB7XG4gIHZhciBhcHByb3ZlX3VzZXJzO1xuICBhcHByb3ZlX3VzZXJzID0gbmV3IEFycmF5O1xuICBfLmVhY2godXNlcl9pZHMsIGZ1bmN0aW9uKHVzZXJfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgaWYgKGRiLnVzZXJzLmZpbmQoe1xuICAgICAgX2lkOiB1c2VyX2lkXG4gICAgfSkuY291bnQoKSA+IDApIHtcbiAgICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlVc2VyQW5kUm9sZXModXNlcl9pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKTtcbiAgICAgIGlmICh1c2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBhcHByb3ZlX3VzZXJzID0gYXBwcm92ZV91c2Vycy5jb25jYXQodXNlcnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInVzZXJfaWTkuI3lkIjms5XkuI3lkIjms5VcIik7XG4gICAgfVxuICB9KTtcbiAgYXBwcm92ZV91c2VycyA9IF8udW5pcShhcHByb3ZlX3VzZXJzKTtcbiAgcmV0dXJuIGFwcHJvdmVfdXNlcnM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyA9IGZ1bmN0aW9uKHVzZXJfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgdXNlcl9pZHM7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gocm9sZV9pZHMsIGZ1bmN0aW9uKHJvbGVfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgaWYgKGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICBfaWQ6IHJvbGVfaWRcbiAgICB9KS5jb3VudCgpID4gMCkge1xuICAgICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlKHVzZXJfaWQsIHJvbGVfaWQsIHNwYWNlX2lkKTtcbiAgICAgIGlmICh1c2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwicm9sZV9pZOW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICB9XG4gIH0pO1xuICBpZiAodXNlcl9pZHMubGVuZ3RoID4gMCkge1xuICAgIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgICByZXR1cm4gdXNlcl9pZHM7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmoLnmja51c2VyX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIik7XG4gIH1cbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGUgPSBmdW5jdGlvbih1c2VyX2lkLCByb2xlX2lkLCBzcGFjZV9pZCkge1xuICB2YXIgb3JncywgdXNlcl9pZHM7XG4gIG9yZ3MgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICB1c2VyczogdXNlcl9pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDFcbiAgICB9XG4gIH0pLmZldGNoKCk7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gob3JncywgZnVuY3Rpb24ob3JnKSB7XG4gICAgdmFyIHVzZXJzO1xuICAgIHVzZXJzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzQnlPcmdBbmRSb2xlKG9yZy5faWQsIHJvbGVfaWQsIHNwYWNlX2lkKTtcbiAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKTtcbiAgICB9XG4gIH0pO1xuICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gIHJldHVybiB1c2VyX2lkcztcbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzID0gZnVuY3Rpb24ob3JnX2lkcywgcm9sZV9pZHMsIHNwYWNlX2lkKSB7XG4gIHZhciB1c2VyX2lkcztcbiAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gIF8uZWFjaChvcmdfaWRzLCBmdW5jdGlvbihvcmdfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGVzKG9yZ19pZCwgcm9sZV9pZHMsIHNwYWNlX2lkKTtcbiAgICBpZiAodXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHVzZXJzKTtcbiAgICB9XG4gIH0pO1xuICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gIHJldHVybiB1c2VyX2lkcztcbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZXMgPSBmdW5jdGlvbihvcmdfaWQsIHJvbGVfaWRzLCBzcGFjZV9pZCkge1xuICB2YXIgdXNlcl9pZHM7XG4gIHVzZXJfaWRzID0gbmV3IEFycmF5O1xuICBfLmVhY2gocm9sZV9pZHMsIGZ1bmN0aW9uKHJvbGVfaWQpIHtcbiAgICB2YXIgdXNlcnM7XG4gICAgdXNlcnMgPSBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeU9yZ0FuZFJvbGUob3JnX2lkLCByb2xlX2lkLCBzcGFjZV9pZCk7XG4gICAgaWYgKHVzZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdCh1c2Vycyk7XG4gICAgfVxuICB9KTtcbiAgaWYgKHVzZXJfaWRzLmxlbmd0aCA+IDApIHtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgcmV0dXJuIHVzZXJfaWRzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5qC55o2ub3JnX2lk5ZKMcm9sZV9pZHPmsqHmn6XliLDlr7nlupTnmoTlpITnkIbkurpcIik7XG4gIH1cbn07XG5cbmdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3JnQW5kUm9sZSA9IGZ1bmN0aW9uKG9yZ19pZCwgcm9sZV9pZCwgc3BhY2VfaWQpIHtcbiAgdmFyIG9yZywgcGFyZW50cywgcG9zaXRpb25zLCB1c2VyX2lkcztcbiAgb3JnID0gZGIub3JnYW5pemF0aW9ucy5maW5kT25lKHtcbiAgICBfaWQ6IG9yZ19pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwYXJlbnRzOiAxXG4gICAgfVxuICB9KTtcbiAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICBvcmc6IG9yZ19pZCxcbiAgICByb2xlOiByb2xlX2lkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHVzZXJzOiAxXG4gICAgfVxuICB9KS5mZXRjaCgpO1xuICBfLmVhY2gocG9zaXRpb25zLCBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgIHJldHVybiB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChwb3NpdGlvbi51c2Vycyk7XG4gIH0pO1xuICBpZiAodXNlcl9pZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcGFyZW50cyA9IG9yZy5wYXJlbnRzO1xuICAgIF8uZWFjaChwYXJlbnRzLCBmdW5jdGlvbihwYXJlbnRfaWQpIHtcbiAgICAgIHBvc2l0aW9ucyA9IGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIG9yZzogcGFyZW50X2lkLFxuICAgICAgICByb2xlOiByb2xlX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIF8uZWFjaChwb3NpdGlvbnMsIGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHVzZXJfaWRzID0gdXNlcl9pZHMuY29uY2F0KHBvc2l0aW9uLnVzZXJzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdXNlcl9pZHMgPSBfLnVuaXEodXNlcl9pZHMpO1xuICByZXR1cm4gdXNlcl9pZHM7XG59O1xuXG5nZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnMgPSBmdW5jdGlvbihpbnN0YW5jZV9pZCwgc3RlcF9pZCkge1xuICB2YXIgX2FwcHJvdmUsIF9zcGFjZV91c2VyLCBfdHJhY2UsIGFwcGxpY2FudCwgYXBwbGljYW50U3VwZXJpb3JzLCBhcHByb3ZlSHJSb2xlSWRzLCBhcHByb3ZlX3VzZXJzLCBhcHByb3Zlcl9vcmdfZmllbGQsIGFwcHJvdmVyX29yZ19pZHMsIGFwcHJvdmVyX3N0ZXAsIGFwcHJvdmVyX3VzZXJfZmllbGQsIGFwcHJvdmVyX3VzZXJfaWRzLCBjdXJyZW50LCBjdXJyZW50X2Zsb3csIGN1cnJlbnRfZmxvd192ZXJzaW9uLCBjdXJyZW50X2Zvcm0sIGN1cnJlbnRfc3RlcCwgY3VycmVudF9zdGVwcywgZGVhbF90eXBlLCBmaWVsZF9jb2RlLCBmaW5pc2hlZF90cmFjZXMsIGZsb3dfaWQsIGZsb3dfcmV2LCBmb3JtLCBmb3JtX2ZpZWxkcywgZm9ybV9pZCwgZm9ybV9yZXYsIGhhbmRsZXJzLCBpbnN0YW5jZSwgbWF4X3N0YXJ0RGF0ZV90cmFjZSwgbmV3X2FwcHJvdmVyX3VzZXJfaWRzLCBuZXdfb3JnX3VzZXJfaWRzLCBuZXdlc3RfdmFsdWVzLCBuZXh0X3N0ZXBfdXNlcnMsIG9yZ19pZHMsIG9yZ19pZHNfbmFtZXMsIG9yZ191c2VyX2lkcywgc3BhY2VfaWQsIHNwYWNlX3VzZXJfY291bnQsIHN1Ym1pdHRlciwgc3VibWl0dGVyX3VzZXJfY291bnQsIHVuZmluaXNoZWRfdHJhY2UsIHVzZXJfaWRzLCB1c2VyX2lkc19uYW1lcywgdXNlcnMsIHZhbGlkX2FwcHJvdmVyX29yZ19pZHM7XG4gIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoaW5zdGFuY2VfaWQpO1xuICBpZiAoaW5zdGFuY2Uuc3RlcF9hcHByb3ZlICYmIGluc3RhbmNlLnN0ZXBfYXBwcm92ZVtzdGVwX2lkXSkge1xuICAgIHJldHVybiBpbnN0YW5jZS5zdGVwX2FwcHJvdmVbc3RlcF9pZF07XG4gIH1cbiAgYXBwcm92ZV91c2VycyA9IG5ldyBBcnJheTtcbiAgc3BhY2VfaWQgPSBpbnN0YW5jZS5zcGFjZTtcbiAgZmxvd19pZCA9IGluc3RhbmNlLmZsb3c7XG4gIGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICBjdXJyZW50X2Zsb3cgPSBkYi5mbG93cy5maW5kT25lKGZsb3dfaWQpO1xuICBjdXJyZW50X3N0ZXAgPSBudWxsO1xuICBjdXJyZW50X3N0ZXBzID0gbmV3IEFycmF5O1xuICBpZiAoY3VycmVudF9mbG93LmN1cnJlbnQuX2lkID09PSBmbG93X3Jldikge1xuICAgIGN1cnJlbnRfc3RlcHMgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5zdGVwcztcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50ID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oaGlzdG9yeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICB9KTtcbiAgICBjdXJyZW50X3N0ZXBzID0gY3VycmVudC5zdGVwcztcbiAgfVxuICBjdXJyZW50X3N0ZXAgPSBfLmZpbmQoY3VycmVudF9zdGVwcywgZnVuY3Rpb24oc3RlcCkge1xuICAgIHJldHVybiBzdGVwLl9pZCA9PT0gc3RlcF9pZDtcbiAgfSk7XG4gIGlmIChjdXJyZW50X3N0ZXAuc3RlcF90eXBlID09PSBcImNvbmRpdGlvblwiKSB7XG4gICAgdW5maW5pc2hlZF90cmFjZSA9IF8uZmluZChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICByZXR1cm4gdHJhY2UuaXNfZmluaXNoZWQgPT09IGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgQXJyYXkodW5maW5pc2hlZF90cmFjZS5hcHByb3Zlc1swXS51c2VyKTtcbiAgfVxuICBpZiAoY3VycmVudF9zdGVwLnN0ZXBfdHlwZSA9PT0gXCJzdGFydFwiKSB7XG4gICAgaGFuZGxlcnMgPSBuZXcgQXJyYXk7XG4gICAgaGFuZGxlcnMucHVzaChpbnN0YW5jZS5hcHBsaWNhbnQpO1xuICAgIGhhbmRsZXJzLnB1c2goaW5zdGFuY2Uuc3VibWl0dGVyKTtcbiAgICBoYW5kbGVycyA9IF8udW5pcShoYW5kbGVycyk7XG4gICAgcmV0dXJuIGhhbmRsZXJzO1xuICB9XG4gIGRlYWxfdHlwZSA9IGN1cnJlbnRfc3RlcC5kZWFsX3R5cGU7XG4gIHVzZXJzID0gbmV3IEFycmF5O1xuICBpZiAoZGVhbF90eXBlID09PSBcImFwcGxpY2FudFJvbGVcIikge1xuICAgIGFwcGxpY2FudCA9IGluc3RhbmNlLmFwcGxpY2FudDtcbiAgICBpZiAoYXBwbGljYW50KSB7XG4gICAgICBzcGFjZV91c2VyX2NvdW50ID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgdXNlcjogYXBwbGljYW50XG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHNwYWNlX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMgJiYgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICAgIHJvbGVfY291bnQgPSBkYi5mbG93X3JvbGVzLmZpbmQoe1xuICAgICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgICBpZiAocm9sZV9jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLop5LoibLlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlckFuZFJvbGVzKGFwcGxpY2FudCwgY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBzcGFjZV9pZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCJJbnN0YW5jZeeahOaPkOS6pOS6uuS4uuepulwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcImhyUm9sZVwiKSB7XG4gICAgYXBwcm92ZUhyUm9sZUlkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9ocl9yb2xlcztcbiAgICBpZiAoYXBwcm92ZUhyUm9sZUlkcykge1xuICAgICAgcmV0dXJuIF8ucGx1Y2soV29ya2Zsb3dNYW5hZ2VyLmdldEhyUm9sZXNVc2VycyhzcGFjZV9pZCwgYXBwcm92ZUhyUm9sZUlkcyksICd1c2VyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi6KeS6Imy5pyq5oyH5a6aXCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwiYXBwbGljYW50XCIpIHtcbiAgICBhcHBsaWNhbnQgPSBpbnN0YW5jZS5hcHBsaWNhbnQ7XG4gICAgc3BhY2VfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgdXNlcjogYXBwbGljYW50XG4gICAgfSkuY291bnQoKTtcbiAgICBpZiAoc3BhY2VfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY1zcGFjZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheShhcHBsaWNhbnQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwib3JnRmllbGRSb2xlXCIpIHtcbiAgICBmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm07XG4gICAgZm9ybV9yZXYgPSBudWxsO1xuICAgIGlmIChmbG93X3JldiA9PT0gY3VycmVudF9mbG93LmN1cnJlbnQuX2lkKSB7XG4gICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihjdXJyZW50X2Zsb3dfaGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICAgIH0pO1xuICAgICAgaWYgKGN1cnJlbnRfZmxvd192ZXJzaW9uKSB7XG4gICAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKTtcbiAgICBjdXJyZW50X2Zvcm0gPSBudWxsO1xuICAgIGlmIChmb3JtX3JldiA9PT0gZm9ybS5jdXJyZW50Ll9pZCkge1xuICAgICAgY3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgZnVuY3Rpb24oZm9ybV9oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBmb3JtX2hpc3RvcnkuX2lkID09PSBmb3JtX3JldjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHByb3Zlcl9vcmdfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JnX2ZpZWxkO1xuICAgIGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkcztcbiAgICBmaWVsZF9jb2RlID0gbnVsbDtcbiAgICBfLmVhY2goZm9ybV9maWVsZHMsIGZ1bmN0aW9uKGZvcm1fZmllbGQpIHtcbiAgICAgIGlmIChmb3JtX2ZpZWxkLl9pZCA9PT0gYXBwcm92ZXJfb3JnX2ZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5ld2VzdF92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgIG9yZ19pZHMgPSBuZXcgQXJyYXk7XG4gICAgb3JnX2lkc19uYW1lcyA9IG5ldyBBcnJheTtcbiAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSkge1xuICAgICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBvcmdfaWRzX25hbWVzID0gbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXy5lYWNoKG9yZ19pZHNfbmFtZXMsIGZ1bmN0aW9uKG9yZykge1xuICAgICAgdmFyIGNoZWNrX29yZ19jb3VudDtcbiAgICAgIGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDogb3JnW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfb3JnX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHSUTkuI3lkIjms5VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKTtcbiAgICB9KTtcbiAgICBpZiAoY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzICYmIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICBfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBmdW5jdGlvbihhcHByb3Zlcl9yb2xlKSB7XG4gICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICByb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICBfaWQ6IGFwcHJvdmVyX3JvbGVcbiAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgaWYgKHJvbGVfY291bnQgPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBhcHByb3Zlcl9yb2xlICsgXCLlt7Lnu4/ooqvliKDpmaRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5T3Jnc0FuZFJvbGVzKG9yZ19pZHMsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgaW5zdGFuY2Uuc3BhY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcIm9yZ0ZpZWxkXCIpIHtcbiAgICBmb3JtX2lkID0gY3VycmVudF9mbG93LmZvcm07XG4gICAgZm9ybV9yZXYgPSBudWxsO1xuICAgIGlmIChmbG93X3JldiA9PT0gY3VycmVudF9mbG93LmN1cnJlbnQuX2lkKSB7XG4gICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvdy5jdXJyZW50LmZvcm1fdmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mbG93X3ZlcnNpb24gPSBfLmZpbmQoY3VycmVudF9mbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihjdXJyZW50X2Zsb3dfaGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gY3VycmVudF9mbG93X2hpc3RvcnkuX2lkID09PSBmbG93X3JldjtcbiAgICAgIH0pO1xuICAgICAgaWYgKGN1cnJlbnRfZmxvd192ZXJzaW9uKSB7XG4gICAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93X3ZlcnNpb24uZm9ybV92ZXJzaW9uO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3JtID0gZGIuZm9ybXMuZmluZE9uZShmb3JtX2lkKTtcbiAgICBjdXJyZW50X2Zvcm0gPSBudWxsO1xuICAgIGlmIChmb3JtX3JldiA9PT0gZm9ybS5jdXJyZW50Ll9pZCkge1xuICAgICAgY3VycmVudF9mb3JtID0gZm9ybS5jdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBfLmZpbmQoZm9ybS5oaXN0b3J5cywgZnVuY3Rpb24oZm9ybV9oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBmb3JtX2hpc3RvcnkuX2lkID09PSBmb3JtX3JldjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHByb3Zlcl9vcmdfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfb3JnX2ZpZWxkO1xuICAgIGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkcztcbiAgICBmaWVsZF9jb2RlID0gbnVsbDtcbiAgICBfLmVhY2goZm9ybV9maWVsZHMsIGZ1bmN0aW9uKGZvcm1fZmllbGQpIHtcbiAgICAgIGlmIChmb3JtX2ZpZWxkLl9pZCA9PT0gYXBwcm92ZXJfb3JnX2ZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZF9jb2RlID0gZm9ybV9maWVsZC5jb2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5ld2VzdF92YWx1ZXMgPSB1dWZsb3dNYW5hZ2VyLmdldFVwZGF0ZWRWYWx1ZXMoaW5zdGFuY2UpO1xuICAgIG9yZ19pZHMgPSBuZXcgQXJyYXk7XG4gICAgb3JnX2lkc19uYW1lcyA9IG5ldyBBcnJheTtcbiAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSkge1xuICAgICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBvcmdfaWRzX25hbWVzID0gbmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yZ19pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXy5lYWNoKG9yZ19pZHNfbmFtZXMsIGZ1bmN0aW9uKG9yZykge1xuICAgICAgdmFyIGNoZWNrX29yZ19jb3VudDtcbiAgICAgIGNoZWNrX29yZ19jb3VudCA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDogb3JnW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfb3JnX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi57uE57uHSUTkuI3lkIjms5VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JnX2lkcy5wdXNoKG9yZ1tcImlkXCJdKTtcbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgICB2YXIgY2hlY2tfb3Jncywgb3JnLCBvcmdfY2hpbGRyZW4sIG9yZ191c2VycztcbiAgICAgIG9yZyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogb3JnX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb3JnX2NoaWxkcmVuID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICBwYXJlbnRzOiBvcmdfaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgdXNlcnM6IDFcbiAgICAgICAgfVxuICAgICAgfSkuZmV0Y2goKTtcbiAgICAgIG9yZ19jaGlsZHJlbi51bnNoaWZ0KG9yZyk7XG4gICAgICBjaGVja19vcmdzID0gb3JnX2NoaWxkcmVuO1xuICAgICAgb3JnX3VzZXJzID0gbmV3IEFycmF5O1xuICAgICAgXy5lYWNoKGNoZWNrX29yZ3MsIGZ1bmN0aW9uKGNoZWNrX29yZ191c2VyKSB7XG4gICAgICAgIGlmIChjaGVja19vcmdfdXNlci51c2Vycykge1xuICAgICAgICAgIF8uZWFjaChjaGVja19vcmdfdXNlci51c2VycywgZnVuY3Rpb24ob3JnX3VzZXIpIHtcbiAgICAgICAgICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICAgICAgICB1c2VyOiBvcmdfdXNlclxuICAgICAgICAgICAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcInNwYWNl5LiL5LiN5a2Y5Zyo5q2kdXNlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB1c2VyX2lkcyA9IHVzZXJfaWRzLmNvbmNhdChjaGVja19vcmdfdXNlci51c2Vycyk7XG4gICAgICAgIHJldHVybiBvcmdfdXNlcnMgPSBvcmdfdXNlcnMuY29uY2F0KGNoZWNrX29yZ191c2VyLnVzZXJzKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKG9yZ191c2Vycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLnu4Tnu4dcIiArIG9yZ19pZCArIFwi5LiN5a2Y5Zyo5aSE55CG5Lq6XCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgICByZXR1cm4gdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInVzZXJGaWVsZFJvbGVcIikge1xuICAgIGZvcm1faWQgPSBjdXJyZW50X2Zsb3cuZm9ybTtcbiAgICBmb3JtX3JldiA9IG51bGw7XG4gICAgaWYgKGZsb3dfcmV2ID09PSBjdXJyZW50X2Zsb3cuY3VycmVudC5faWQpIHtcbiAgICAgIGZvcm1fcmV2ID0gY3VycmVudF9mbG93LmN1cnJlbnQuZm9ybV92ZXJzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X2Zsb3dfdmVyc2lvbiA9IF8uZmluZChjdXJyZW50X2Zsb3cuaGlzdG9yeXMsIGZ1bmN0aW9uKGN1cnJlbnRfZmxvd19oaXN0b3J5KSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50X2Zsb3dfaGlzdG9yeS5faWQgPT09IGZsb3dfcmV2O1xuICAgICAgfSk7XG4gICAgICBpZiAoY3VycmVudF9mbG93X3ZlcnNpb24pIHtcbiAgICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3dfdmVyc2lvbi5mb3JtX3ZlcnNpb247XG4gICAgICB9XG4gICAgfVxuICAgIGZvcm0gPSBkYi5mb3Jtcy5maW5kT25lKGZvcm1faWQpO1xuICAgIGN1cnJlbnRfZm9ybSA9IG51bGw7XG4gICAgaWYgKGZvcm1fcmV2ID09PSBmb3JtLmN1cnJlbnQuX2lkKSB7XG4gICAgICBjdXJyZW50X2Zvcm0gPSBmb3JtLmN1cnJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IF8uZmluZChmb3JtLmhpc3RvcnlzLCBmdW5jdGlvbihmb3JtX2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1faGlzdG9yeS5faWQgPT09IGZvcm1fcmV2O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGFwcHJvdmVyX3VzZXJfZmllbGQgPSBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfdXNlcl9maWVsZDtcbiAgICBmb3JtX2ZpZWxkcyA9IGN1cnJlbnRfZm9ybS5maWVsZHM7XG4gICAgZmllbGRfY29kZSA9IG51bGw7XG4gICAgXy5lYWNoKGZvcm1fZmllbGRzLCBmdW5jdGlvbihmb3JtX2ZpZWxkKSB7XG4gICAgICBpZiAoZm9ybV9maWVsZC5faWQgPT09IGFwcHJvdmVyX3VzZXJfZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkX2NvZGUgPSBmb3JtX2ZpZWxkLmNvZGU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmV3ZXN0X3ZhbHVlcyA9IHV1Zmxvd01hbmFnZXIuZ2V0VXBkYXRlZFZhbHVlcyhpbnN0YW5jZSk7XG4gICAgdXNlcl9pZHNfbmFtZXMgPSBuZXcgQXJyYXk7XG4gICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pIHtcbiAgICAgIGlmIChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMgPSBuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlcl9pZHNfbmFtZXMucHVzaChuZXdlc3RfdmFsdWVzW2ZpZWxkX2NvZGVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlcl9pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKHVzZXJfaWRzX25hbWVzLCBmdW5jdGlvbih1c2VyKSB7XG4gICAgICB2YXIgY2hlY2tfdXNlcl9jb3VudDtcbiAgICAgIGNoZWNrX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiB1c2VyW1wiaWRcIl1cbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfdXNlcl9jb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS6uuWRmElE5LiN5ZCI5rOVXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVzZXJfaWRzLnB1c2godXNlcltcImlkXCJdKTtcbiAgICB9KTtcbiAgICB1c2VyX2lkcyA9IF8udW5pcSh1c2VyX2lkcyk7XG4gICAgaWYgKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcyAmJiBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICB2YXIgcm9sZV9jb3VudDtcbiAgICAgICAgcm9sZV9jb3VudCA9IGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgIH0pLmNvdW50KCk7XG4gICAgICAgIGlmIChyb2xlX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJzQW5kUm9sZXModXNlcl9pZHMsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgaW5zdGFuY2Uuc3BhY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIua1geeoi+atpemqpFwiICsgY3VycmVudF9zdGVwLm5hbWUgKyBcIuWuoeaJueWyl+S9jeacquaMh+WumlwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInVzZXJGaWVsZFwiKSB7XG4gICAgZm9ybV9pZCA9IGN1cnJlbnRfZmxvdy5mb3JtO1xuICAgIGZvcm1fcmV2ID0gbnVsbDtcbiAgICBpZiAoZmxvd19yZXYgPT09IGN1cnJlbnRfZmxvdy5jdXJyZW50Ll9pZCkge1xuICAgICAgZm9ybV9yZXYgPSBjdXJyZW50X2Zsb3cuY3VycmVudC5mb3JtX3ZlcnNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfZmxvd192ZXJzaW9uID0gXy5maW5kKGN1cnJlbnRfZmxvdy5oaXN0b3J5cywgZnVuY3Rpb24oY3VycmVudF9mbG93X2hpc3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfZmxvd19oaXN0b3J5Ll9pZCA9PT0gZmxvd19yZXY7XG4gICAgICB9KTtcbiAgICAgIGlmIChjdXJyZW50X2Zsb3dfdmVyc2lvbikge1xuICAgICAgICBmb3JtX3JldiA9IGN1cnJlbnRfZmxvd192ZXJzaW9uLmZvcm1fdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoZm9ybV9pZCk7XG4gICAgY3VycmVudF9mb3JtID0gbnVsbDtcbiAgICBpZiAoZm9ybV9yZXYgPT09IGZvcm0uY3VycmVudC5faWQpIHtcbiAgICAgIGN1cnJlbnRfZm9ybSA9IGZvcm0uY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9mb3JtID0gXy5maW5kKGZvcm0uaGlzdG9yeXMsIGZ1bmN0aW9uKGZvcm1faGlzdG9yeSkge1xuICAgICAgICByZXR1cm4gZm9ybV9oaXN0b3J5Ll9pZCA9PT0gZm9ybV9yZXY7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXBwcm92ZXJfdXNlcl9maWVsZCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VyX2ZpZWxkO1xuICAgIGZvcm1fZmllbGRzID0gY3VycmVudF9mb3JtLmZpZWxkcztcbiAgICBmaWVsZF9jb2RlID0gbnVsbDtcbiAgICBfLmVhY2goZm9ybV9maWVsZHMsIGZ1bmN0aW9uKGZvcm1fZmllbGQpIHtcbiAgICAgIGlmIChmb3JtX2ZpZWxkLl9pZCA9PT0gYXBwcm92ZXJfdXNlcl9maWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGRfY29kZSA9IGZvcm1fZmllbGQuY29kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXdlc3RfdmFsdWVzID0gdXVmbG93TWFuYWdlci5nZXRVcGRhdGVkVmFsdWVzKGluc3RhbmNlKTtcbiAgICB1c2VyX2lkc19uYW1lcyA9IG5ldyBBcnJheTtcbiAgICBpZiAobmV3ZXN0X3ZhbHVlc1tmaWVsZF9jb2RlXSkge1xuICAgICAgaWYgKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB1c2VyX2lkc19uYW1lcyA9IG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VyX2lkc19uYW1lcy5wdXNoKG5ld2VzdF92YWx1ZXNbZmllbGRfY29kZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB1c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2godXNlcl9pZHNfbmFtZXMsIGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgIHZhciBjaGVja191c2VyX2NvdW50O1xuICAgICAgY2hlY2tfdXNlcl9jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IHVzZXJbXCJpZFwiXVxuICAgICAgfSkuY291bnQoKTtcbiAgICAgIGlmIChjaGVja191c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5Lq65ZGYSUTkuI3lkIjms5VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXNlcl9pZHMucHVzaCh1c2VyW1wiaWRcIl0pO1xuICAgIH0pO1xuICAgIHVzZXJfaWRzID0gXy51bmlxKHVzZXJfaWRzKTtcbiAgICByZXR1cm4gdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlTdGVwUm9sZVwiKSB7XG4gICAgYXBwcm92ZXJfc3RlcCA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9zdGVwO1xuICAgIGZpbmlzaGVkX3RyYWNlcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2goaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0cmFjZSkge1xuICAgICAgaWYgKHRyYWNlLnN0ZXAgPT09IGFwcHJvdmVyX3N0ZXApIHtcbiAgICAgICAgcmV0dXJuIGZpbmlzaGVkX3RyYWNlcy5wdXNoKHRyYWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtYXhfc3RhcnREYXRlX3RyYWNlID0gXy5tYXgoZmluaXNoZWRfdHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5zdGFydF9kYXRlO1xuICAgIH0pO1xuICAgIGFwcHJvdmVfdXNlcnMgPSBfLnBsdWNrKG1heF9zdGFydERhdGVfdHJhY2UuYXBwcm92ZXMsIFwidXNlclwiKTtcbiAgICBpZiAoY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzKSB7XG4gICAgICBfLmVhY2goY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzLCBmdW5jdGlvbihhcHByb3Zlcl9yb2xlKSB7XG4gICAgICAgIHZhciByb2xlX2NvdW50O1xuICAgICAgICByb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICBfaWQ6IGFwcHJvdmVyX3JvbGVcbiAgICAgICAgfSkuY291bnQoKTtcbiAgICAgICAgaWYgKHJvbGVfY291bnQgPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuinkuiJsuW3sue7j+iiq+WIoOmZpFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIF8uZWFjaChhcHByb3ZlX3VzZXJzLCBmdW5jdGlvbihhcHByb3ZlX3VzZXIpIHtcbiAgICAgIGlmIChkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHByb3ZlX3VzZXJcbiAgICAgIH0pLmNvdW50KCkgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmjIflrprmraXpqqTnmoTlpITnkIbkurrlt7Lnu4/lj5jmm7RcIik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVyc0J5VXNlcnNBbmRSb2xlcyhhcHByb3ZlX3VzZXJzLCBjdXJyZW50X3N0ZXAuYXBwcm92ZXJfcm9sZXMsIHNwYWNlX2lkKTtcbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwic3BlY2lmeVN0ZXBVc2VyXCIpIHtcbiAgICBhcHByb3Zlcl9zdGVwID0gY3VycmVudF9zdGVwLmFwcHJvdmVyX3N0ZXA7XG4gICAgZmluaXNoZWRfdHJhY2VzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChpbnN0YW5jZS50cmFjZXMsIGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICBpZiAodHJhY2Uuc3RlcCA9PT0gYXBwcm92ZXJfc3RlcCkge1xuICAgICAgICByZXR1cm4gZmluaXNoZWRfdHJhY2VzLnB1c2godHJhY2UpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG1heF9zdGFydERhdGVfdHJhY2UgPSBfLm1heChmaW5pc2hlZF90cmFjZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0LnN0YXJ0X2RhdGU7XG4gICAgfSk7XG4gICAgYXBwcm92ZV91c2VycyA9IF8ucGx1Y2sobWF4X3N0YXJ0RGF0ZV90cmFjZS5hcHByb3ZlcywgXCJ1c2VyXCIpO1xuICAgIF8uZWFjaChhcHByb3ZlX3VzZXJzLCBmdW5jdGlvbihhcHByb3ZlX3VzZXIpIHtcbiAgICAgIHZhciBjaGVja19hcHByb3ZlX3VzZXJfY291bnQ7XG4gICAgICBjaGVja19hcHByb3ZlX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBhcHByb3ZlX3VzZXJcbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoY2hlY2tfYXBwcm92ZV91c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5oyH5a6a5q2l6aqk55qE5aSE55CG5Lq65bey57uP5Y+Y5pu0XCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFwcHJvdmVfdXNlcnMgPSBfLnVuaXEoYXBwcm92ZV91c2Vycyk7XG4gICAgcmV0dXJuIGFwcHJvdmVfdXNlcnM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInN1Ym1pdHRlclJvbGVcIikge1xuICAgIHN1Ym1pdHRlciA9IGluc3RhbmNlLnN1Ym1pdHRlcjtcbiAgICBpZiAoIXN1Ym1pdHRlcikge1xuICAgICAgc3VibWl0dGVyX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgICAgc3BhY2U6IHNwYWNlX2lkLFxuICAgICAgICB1c2VyOiBzdWJtaXR0ZXJcbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoc3VibWl0dGVyX3VzZXJfY291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmj5DkuqTkurrlt7Lnu4/ooqvliKDpmaTmiJbkuI3lsZ7kuo7lvZPliY3lt6XkvZzljLpcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudF9zdGVwLmFwcHJvdmVyX3JvbGVzICYmIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgXy5lYWNoKGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgZnVuY3Rpb24oYXBwcm92ZXJfcm9sZSkge1xuICAgICAgICAgICAgdmFyIHJvbGVfY291bnQ7XG4gICAgICAgICAgICByb2xlX2NvdW50ID0gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICAgICAgICAgICAgX2lkOiBhcHByb3Zlcl9yb2xlXG4gICAgICAgICAgICB9KS5jb3VudCgpO1xuICAgICAgICAgICAgaWYgKHJvbGVfY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgYXBwcm92ZXJfcm9sZSArIFwi5bey57uP6KKr5Yig6ZmkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBnZXRIYW5kbGVyc01hbmFnZXIuZ2V0SGFuZGxlcnNCeVVzZXJBbmRSb2xlcyhzdWJtaXR0ZXIsIGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9yb2xlcywgc3BhY2VfaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi5rWB56iL5q2l6aqkXCIgKyBjdXJyZW50X3N0ZXAubmFtZSArIFwi5a6h5om55bKX5L2N5pyq5oyH5a6aXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFwi55Sz6K+35Y2V55qE5o+Q5Lqk5Lq65Li656m6XCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwic3VibWl0dGVyXCIpIHtcbiAgICBzdWJtaXR0ZXIgPSBpbnN0YW5jZS5zdWJtaXR0ZXI7XG4gICAgc3VibWl0dGVyX3VzZXJfY291bnQgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgIHVzZXI6IHN1Ym1pdHRlclxuICAgIH0pLmNvdW50KCk7XG4gICAgaWYgKHN1Ym1pdHRlcl91c2VyX2NvdW50ID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuaPkOS6pOS6uuW3sue7j+iiq+WIoOmZpOaIluS4jeWxnuS6juW9k+WJjeW3peS9nOWMulwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheShzdWJtaXR0ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwic3BlY2lmeU9yZ1wiKSB7XG4gICAgYXBwcm92ZXJfb3JnX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl9vcmdzO1xuICAgIGlmICghYXBwcm92ZXJfb3JnX2lkcyB8fCBhcHByb3Zlcl9vcmdfaWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLmnKrlrprkuYnnlKjkuo7mn6Xmib7kuIvkuIDmraXlpITnkIbkurrnmoTpg6jpl6jvvIzor7fogZTns7vnrqHnkIblkZjosIPmn6XmtYHnqIvlm77nmoTphY3nva7mmK/lkKbmraPnoa5cIik7XG4gICAgfVxuICAgIHZhbGlkX2FwcHJvdmVyX29yZ19pZHMgPSBuZXcgQXJyYXk7XG4gICAgXy5lYWNoKGFwcHJvdmVyX29yZ19pZHMsIGZ1bmN0aW9uKGFwcHJvdmVyX29yZ19pZCkge1xuICAgICAgaWYgKGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIF9pZDogYXBwcm92ZXJfb3JnX2lkXG4gICAgICB9KS5jb3VudCgpID4gMCkge1xuICAgICAgICByZXR1cm4gdmFsaWRfYXBwcm92ZXJfb3JnX2lkcy51bnNoaWZ0KGFwcHJvdmVyX29yZ19pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb3JnX3VzZXJfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaCh2YWxpZF9hcHByb3Zlcl9vcmdfaWRzLCBmdW5jdGlvbih2YWxpZF9hcHByb3Zlcl9vcmdfaWQpIHtcbiAgICAgIHZhciBjaGlsZF9vcmdzLCB2YWxpZF9hcHByb3Zlcl9vcmc7XG4gICAgICB2YWxpZF9hcHByb3Zlcl9vcmcgPSBkYi5vcmdhbml6YXRpb25zLmZpbmRPbmUoe1xuICAgICAgICBfaWQ6IHZhbGlkX2FwcHJvdmVyX29yZ19pZFxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICB1c2VyczogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh2YWxpZF9hcHByb3Zlcl9vcmcudXNlcnMpIHtcbiAgICAgICAgb3JnX3VzZXJfaWRzID0gb3JnX3VzZXJfaWRzLmNvbmNhdCh2YWxpZF9hcHByb3Zlcl9vcmcudXNlcnMpO1xuICAgICAgfVxuICAgICAgY2hpbGRfb3JncyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICAgICAgcGFyZW50czogdmFsaWRfYXBwcm92ZXJfb3JnX2lkXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHVzZXJzOiAxXG4gICAgICAgIH1cbiAgICAgIH0pLmZldGNoKCk7XG4gICAgICByZXR1cm4gXy5lYWNoKGNoaWxkX29yZ3MsIGZ1bmN0aW9uKGNoaWxkX29yZykge1xuICAgICAgICBpZiAoY2hpbGRfb3JnLnVzZXJzKSB7XG4gICAgICAgICAgcmV0dXJuIG9yZ191c2VyX2lkcyA9IG9yZ191c2VyX2lkcy5jb25jYXQoY2hpbGRfb3JnLnVzZXJzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb3JnX3VzZXJfaWRzID0gXy51bmlxKG9yZ191c2VyX2lkcyk7XG4gICAgbmV3X29yZ191c2VyX2lkcyA9IG5ldyBBcnJheTtcbiAgICBfLmVhY2gob3JnX3VzZXJfaWRzLCBmdW5jdGlvbihvcmdfdXNlcl9pZCkge1xuICAgICAgdmFyIHNwYWNlX3VzZXJfaW5mb19jb3VudDtcbiAgICAgIHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IG9yZ191c2VyX2lkXG4gICAgICB9KS5jb3VudCgpO1xuICAgICAgaWYgKHNwYWNlX3VzZXJfaW5mb19jb3VudCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG5ld19vcmdfdXNlcl9pZHMucHVzaChvcmdfdXNlcl9pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld19vcmdfdXNlcl9pZHM7XG4gIH0gZWxzZSBpZiAoZGVhbF90eXBlID09PSBcInNwZWNpZnlVc2VyXCIpIHtcbiAgICBhcHByb3Zlcl91c2VyX2lkcyA9IGN1cnJlbnRfc3RlcC5hcHByb3Zlcl91c2VycztcbiAgICBhcHByb3Zlcl91c2VyX2lkcyA9IF8udW5pcShhcHByb3Zlcl91c2VyX2lkcyk7XG4gICAgbmV3X2FwcHJvdmVyX3VzZXJfaWRzID0gbmV3IEFycmF5O1xuICAgIF8uZWFjaChhcHByb3Zlcl91c2VyX2lkcywgZnVuY3Rpb24oYXBwcm92ZXJfdXNlcl9pZCkge1xuICAgICAgdmFyIHNwYWNlX3VzZXJfaW5mb19jb3VudDtcbiAgICAgIHNwYWNlX3VzZXJfaW5mb19jb3VudCA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICAgIHVzZXI6IGFwcHJvdmVyX3VzZXJfaWRcbiAgICAgIH0pLmNvdW50KCk7XG4gICAgICBpZiAoc3BhY2VfdXNlcl9pbmZvX2NvdW50ID4gMCkge1xuICAgICAgICByZXR1cm4gbmV3X2FwcHJvdmVyX3VzZXJfaWRzLnB1c2goYXBwcm92ZXJfdXNlcl9pZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld19hcHByb3Zlcl91c2VyX2lkcztcbiAgfSBlbHNlIGlmIChkZWFsX3R5cGUgPT09IFwicGlja3VwQXRSdW50aW1lXCIpIHtcbiAgICBuZXh0X3N0ZXBfdXNlcnMgPSBuZXcgQXJyYXk7XG4gICAgX3RyYWNlID0gXy5maW5kKGluc3RhbmNlLnRyYWNlcywgZnVuY3Rpb24oX3RyKSB7XG4gICAgICByZXR1cm4gX3RyLmlzX2ZpbmlzaGVkID09PSBmYWxzZTtcbiAgICB9KTtcbiAgICBfYXBwcm92ZSA9IF8uZmluZChfdHJhY2UuYXBwcm92ZXMsIGZ1bmN0aW9uKF9hcHApIHtcbiAgICAgIHJldHVybiBfYXBwLmlzX2ZpbmlzaGVkID09PSBmYWxzZSAmJiBfYXBwLnR5cGUgIT09ICdjYyc7XG4gICAgfSk7XG4gICAgaWYgKF9hcHByb3ZlLm5leHRfc3RlcHMpIHtcbiAgICAgIGlmIChfYXBwcm92ZS5uZXh0X3N0ZXBzWzBdW1widXNlcnNcIl0pIHtcbiAgICAgICAgbmV4dF9zdGVwX3VzZXJzID0gX2FwcHJvdmUubmV4dF9zdGVwc1swXVtcInVzZXJzXCJdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dF9zdGVwX3VzZXJzO1xuICB9IGVsc2UgaWYgKGRlYWxfdHlwZSA9PT0gXCJhcHBsaWNhbnRTdXBlcmlvclwiKSB7XG4gICAgYXBwbGljYW50U3VwZXJpb3JzID0gbmV3IEFycmF5O1xuICAgIF9zcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgICBzcGFjZTogc3BhY2VfaWQsXG4gICAgICB1c2VyOiBpbnN0YW5jZS5hcHBsaWNhbnRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgbWFuYWdlcjogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChfc3BhY2VfdXNlci5tYW5hZ2VyKSB7XG4gICAgICBhcHBsaWNhbnRTdXBlcmlvcnMucHVzaChfc3BhY2VfdXNlci5tYW5hZ2VyKTtcbiAgICB9XG4gICAgcmV0dXJuIGFwcGxpY2FudFN1cGVyaW9ycztcbiAgfVxufTtcbiIsInBlcm1pc3Npb25NYW5hZ2VyID0ge31cclxuXHJcbnBlcm1pc3Npb25NYW5hZ2VyLmdldEZsb3dQZXJtaXNzaW9ucyA9IChmbG93X2lkLCB1c2VyX2lkKSAtPlxyXG5cdCMg5qC55o2uOmZsb3dfaWTmn6XliLDlr7nlupTnmoRmbG93XHJcblx0ZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhmbG93X2lkKVxyXG5cdHNwYWNlX2lkID0gZmxvdy5zcGFjZVxyXG5cdCMg5qC55o2uc3BhY2VfaWTlkow6dXNlcl9pZOWIsG9yZ2FuaXphdGlvbnPooajkuK3mn6XliLDnlKjmiLfmiYDlsZ7miYDmnInnmoRvcmdfaWTvvIjljIXmi6zkuIrnuqfnu4RJRO+8iVxyXG5cdG9yZ19pZHMgPSBuZXcgQXJyYXlcclxuXHRvcmdhbml6YXRpb25zID0gZGIub3JnYW5pemF0aW9ucy5maW5kKHtcclxuXHRcdHNwYWNlOiBzcGFjZV9pZCwgdXNlcnM6IHVzZXJfaWQgfSwgeyBmaWVsZHM6IHsgcGFyZW50czogMSB9IH0pLmZldGNoKClcclxuXHRfLmVhY2gob3JnYW5pemF0aW9ucywgKG9yZykgLT5cclxuXHRcdG9yZ19pZHMucHVzaChvcmcuX2lkKVxyXG5cdFx0aWYgb3JnLnBhcmVudHNcclxuXHRcdFx0Xy5lYWNoKG9yZy5wYXJlbnRzLCAocGFyZW50X2lkKSAtPlxyXG5cdFx0XHRcdG9yZ19pZHMucHVzaChwYXJlbnRfaWQpXHJcblx0XHRcdClcclxuXHQpXHJcblx0b3JnX2lkcyA9IF8udW5pcShvcmdfaWRzKVxyXG5cdG15X3Blcm1pc3Npb25zID0gbmV3IEFycmF5XHJcblx0aWYgZmxvdy5wZXJtc1xyXG5cdFx0IyDliKTmlq1mbG93LnBlcm1zLnVzZXJzX2Nhbl9hZG1pbuS4reaYr+WQpuWMheWQq+W9k+WJjeeUqOaIt++8jFxyXG5cdFx0IyDmiJbogIVmbG93LnBlcm1zLm9yZ3NfY2FuX2FkZOaYr+WQpuWMheWQqzTmraXlvpfliLDnmoRvcmdfaWTmlbDnu4TkuK3nmoTku7vkvZXkuIDkuKrvvIxcclxuXHRcdCMg6Iul5piv77yM5YiZ5Zyo6L+U5Zue55qE5pWw57uE5Lit5Yqg5LiKYWRkXHJcblx0XHRpZiBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGRcclxuXHRcdFx0dXNlcnNfY2FuX2FkZCA9IGZsb3cucGVybXMudXNlcnNfY2FuX2FkZFxyXG5cdFx0XHRpZiB1c2Vyc19jYW5fYWRkLmluY2x1ZGVzKHVzZXJfaWQpXHJcblx0XHRcdFx0bXlfcGVybWlzc2lvbnMucHVzaChcImFkZFwiKVxyXG5cclxuXHRcdGlmIGZsb3cucGVybXMub3Jnc19jYW5fYWRkXHJcblx0XHRcdG9yZ3NfY2FuX2FkZCA9IGZsb3cucGVybXMub3Jnc19jYW5fYWRkXHJcblx0XHRcdF8uZWFjaChvcmdfaWRzLCAob3JnX2lkKSAtPlxyXG5cdFx0XHRcdGlmIG9yZ3NfY2FuX2FkZC5pbmNsdWRlcyhvcmdfaWQpXHJcblx0XHRcdFx0XHRteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRkXCIpXHJcblx0XHRcdClcclxuXHRcdCMg5Yik5patZmxvdy5wZXJtcy51c2Vyc19jYW5fbW9uaXRvcuS4reaYr+WQpuWMheWQq+W9k+WJjeeUqOaIt++8jFxyXG5cdFx0IyDmiJbogIVmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3LmmK/lkKbljIXlkKs05q2l5b6X5Yiw55qEb3JnX2lk5pWw57uE5Lit55qE5Lu75L2V5LiA5Liq77yMXHJcblx0XHQjIOiLpeaYr++8jOWImeWcqOi/lOWbnueahOaVsOe7hOS4reWKoOS4im1vbml0b3JcclxuXHRcdGlmIGZsb3cucGVybXMudXNlcnNfY2FuX21vbml0b3JcclxuXHRcdFx0dXNlcnNfY2FuX21vbml0b3IgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9yXHJcblx0XHRcdGlmIHVzZXJzX2Nhbl9tb25pdG9yLmluY2x1ZGVzKHVzZXJfaWQpXHJcblx0XHRcdFx0bXlfcGVybWlzc2lvbnMucHVzaChcIm1vbml0b3JcIilcclxuXHJcblx0XHRpZiBmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3JcclxuXHRcdFx0b3Jnc19jYW5fbW9uaXRvciA9IGZsb3cucGVybXMub3Jnc19jYW5fbW9uaXRvclxyXG5cdFx0XHRfLmVhY2gob3JnX2lkcywgKG9yZ19pZCkgLT5cclxuXHRcdFx0XHRpZiBvcmdzX2Nhbl9tb25pdG9yLmluY2x1ZGVzKG9yZ19pZClcclxuXHRcdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJtb25pdG9yXCIpXHJcblx0XHRcdClcclxuXHRcdCMg5Yik5patZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRtaW7kuK3mmK/lkKbljIXlkKvlvZPliY3nlKjmiLfvvIxcclxuXHRcdCMg5oiW6ICFZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZG1pbuaYr+WQpuWMheWQqzTmraXlvpfliLDnmoRvcmdfaWTmlbDnu4TkuK3nmoTku7vkvZXkuIDkuKrvvIxcclxuXHRcdCMg6Iul5piv77yM5YiZ5Zyo6L+U5Zue55qE5pWw57uE5Lit5Yqg5LiKYWRtaW5cclxuXHRcdGlmIGZsb3cucGVybXMudXNlcnNfY2FuX2FkbWluXHJcblx0XHRcdHVzZXJzX2Nhbl9hZG1pbiA9IGZsb3cucGVybXMudXNlcnNfY2FuX2FkbWluXHJcblx0XHRcdGlmIHVzZXJzX2Nhbl9hZG1pbi5pbmNsdWRlcyh1c2VyX2lkKVxyXG5cdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJhZG1pblwiKVxyXG5cclxuXHRcdGlmIGZsb3cucGVybXMub3Jnc19jYW5fYWRtaW5cclxuXHRcdFx0b3Jnc19jYW5fYWRtaW4gPSBmbG93LnBlcm1zLm9yZ3NfY2FuX2FkbWluXHJcblx0XHRcdF8uZWFjaChvcmdfaWRzLCAob3JnX2lkKSAtPlxyXG5cdFx0XHRcdGlmIG9yZ3NfY2FuX2FkbWluLmluY2x1ZGVzKG9yZ19pZClcclxuXHRcdFx0XHRcdG15X3Blcm1pc3Npb25zLnB1c2goXCJhZG1pblwiKVxyXG5cdFx0XHQpXHJcblxyXG5cdG15X3Blcm1pc3Npb25zID0gXy51bmlxKG15X3Blcm1pc3Npb25zKVxyXG5cdHJldHVybiBteV9wZXJtaXNzaW9ucyIsIiAgICAgICAgICAgICAgICAgICAgICBcblxucGVybWlzc2lvbk1hbmFnZXIgPSB7fTtcblxucGVybWlzc2lvbk1hbmFnZXIuZ2V0Rmxvd1Blcm1pc3Npb25zID0gZnVuY3Rpb24oZmxvd19pZCwgdXNlcl9pZCkge1xuICB2YXIgZmxvdywgbXlfcGVybWlzc2lvbnMsIG9yZ19pZHMsIG9yZ2FuaXphdGlvbnMsIG9yZ3NfY2FuX2FkZCwgb3Jnc19jYW5fYWRtaW4sIG9yZ3NfY2FuX21vbml0b3IsIHNwYWNlX2lkLCB1c2Vyc19jYW5fYWRkLCB1c2Vyc19jYW5fYWRtaW4sIHVzZXJzX2Nhbl9tb25pdG9yO1xuICBmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGZsb3dfaWQpO1xuICBzcGFjZV9pZCA9IGZsb3cuc3BhY2U7XG4gIG9yZ19pZHMgPSBuZXcgQXJyYXk7XG4gIG9yZ2FuaXphdGlvbnMgPSBkYi5vcmdhbml6YXRpb25zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZV9pZCxcbiAgICB1c2VyczogdXNlcl9pZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwYXJlbnRzOiAxXG4gICAgfVxuICB9KS5mZXRjaCgpO1xuICBfLmVhY2gob3JnYW5pemF0aW9ucywgZnVuY3Rpb24ob3JnKSB7XG4gICAgb3JnX2lkcy5wdXNoKG9yZy5faWQpO1xuICAgIGlmIChvcmcucGFyZW50cykge1xuICAgICAgcmV0dXJuIF8uZWFjaChvcmcucGFyZW50cywgZnVuY3Rpb24ocGFyZW50X2lkKSB7XG4gICAgICAgIHJldHVybiBvcmdfaWRzLnB1c2gocGFyZW50X2lkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIG9yZ19pZHMgPSBfLnVuaXEob3JnX2lkcyk7XG4gIG15X3Blcm1pc3Npb25zID0gbmV3IEFycmF5O1xuICBpZiAoZmxvdy5wZXJtcykge1xuICAgIGlmIChmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGQpIHtcbiAgICAgIHVzZXJzX2Nhbl9hZGQgPSBmbG93LnBlcm1zLnVzZXJzX2Nhbl9hZGQ7XG4gICAgICBpZiAodXNlcnNfY2FuX2FkZC5pbmNsdWRlcyh1c2VyX2lkKSkge1xuICAgICAgICBteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmxvdy5wZXJtcy5vcmdzX2Nhbl9hZGQpIHtcbiAgICAgIG9yZ3NfY2FuX2FkZCA9IGZsb3cucGVybXMub3Jnc19jYW5fYWRkO1xuICAgICAgXy5lYWNoKG9yZ19pZHMsIGZ1bmN0aW9uKG9yZ19pZCkge1xuICAgICAgICBpZiAob3Jnc19jYW5fYWRkLmluY2x1ZGVzKG9yZ19pZCkpIHtcbiAgICAgICAgICByZXR1cm4gbXlfcGVybWlzc2lvbnMucHVzaChcImFkZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLnVzZXJzX2Nhbl9tb25pdG9yKSB7XG4gICAgICB1c2Vyc19jYW5fbW9uaXRvciA9IGZsb3cucGVybXMudXNlcnNfY2FuX21vbml0b3I7XG4gICAgICBpZiAodXNlcnNfY2FuX21vbml0b3IuaW5jbHVkZXModXNlcl9pZCkpIHtcbiAgICAgICAgbXlfcGVybWlzc2lvbnMucHVzaChcIm1vbml0b3JcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3IpIHtcbiAgICAgIG9yZ3NfY2FuX21vbml0b3IgPSBmbG93LnBlcm1zLm9yZ3NfY2FuX21vbml0b3I7XG4gICAgICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgICAgIGlmIChvcmdzX2Nhbl9tb25pdG9yLmluY2x1ZGVzKG9yZ19pZCkpIHtcbiAgICAgICAgICByZXR1cm4gbXlfcGVybWlzc2lvbnMucHVzaChcIm1vbml0b3JcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZmxvdy5wZXJtcy51c2Vyc19jYW5fYWRtaW4pIHtcbiAgICAgIHVzZXJzX2Nhbl9hZG1pbiA9IGZsb3cucGVybXMudXNlcnNfY2FuX2FkbWluO1xuICAgICAgaWYgKHVzZXJzX2Nhbl9hZG1pbi5pbmNsdWRlcyh1c2VyX2lkKSkge1xuICAgICAgICBteV9wZXJtaXNzaW9ucy5wdXNoKFwiYWRtaW5cIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbG93LnBlcm1zLm9yZ3NfY2FuX2FkbWluKSB7XG4gICAgICBvcmdzX2Nhbl9hZG1pbiA9IGZsb3cucGVybXMub3Jnc19jYW5fYWRtaW47XG4gICAgICBfLmVhY2gob3JnX2lkcywgZnVuY3Rpb24ob3JnX2lkKSB7XG4gICAgICAgIGlmIChvcmdzX2Nhbl9hZG1pbi5pbmNsdWRlcyhvcmdfaWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG15X3Blcm1pc3Npb25zLnB1c2goXCJhZG1pblwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIG15X3Blcm1pc3Npb25zID0gXy51bmlxKG15X3Blcm1pc3Npb25zKTtcbiAgcmV0dXJuIG15X3Blcm1pc3Npb25zO1xufTtcbiIsImFwcHJvdmVNYW5hZ2VyID0ge31cclxuXHJcblxyXG4jIyNcclxuICAgIOWvueavlGFwcHJvdmVfdmFsdWVz5LiObGFzdF92YWx1ZXMg5a+56LGh77yMIOi/lOWbnmFwcHJvdmVfdmFsdWVz5q+UbGFzdF92YWx1ZXPlpJrlh7rnmoTmiJbogIXmlLnlj5jnmoTpg6jliIZcclxuIyMjXHJcbmFwcHJvdmVNYW5hZ2VyLmdldENoYW5nZVZhbHVlcyA9IChsYXN0X3ZhbHVlcyxhcHByb3ZlX3ZhbHVlcykgLT5cclxuXHJcblx0Y2hhbmdlVmFsdWVzID0ge31cclxuXHJcblx0bGFzdF92YWx1ZXNfa2V5cyA9IF8ua2V5cyhsYXN0X3ZhbHVlcylcclxuXHJcblx0YXBwcm92ZV92YWx1ZXNfa2V5cyA9IF8ua2V5cyhhcHByb3ZlX3ZhbHVlcylcclxuXHJcbiNcdGNvbnNvbGUubG9nKFwibGFzdF92YWx1ZXNfa2V5c1wiLCBsYXN0X3ZhbHVlc19rZXlzKVxyXG4jXHJcbiNcdGNvbnNvbGUubG9nKFwiYXBwcm92ZV92YWx1ZXNfa2V5c1wiLCBhcHByb3ZlX3ZhbHVlc19rZXlzKVxyXG5cclxuXHRhcHByb3ZlX3ZhbHVlc19rZXlzLmZvckVhY2ggKGtleSktPlxyXG5cdFx0aWYgXy5jb250YWlucyhsYXN0X3ZhbHVlc19rZXlzLCBrZXkpXHJcblx0XHRcdGlmICFfLmlzRXF1YWwobGFzdF92YWx1ZXNba2V5XSwgYXBwcm92ZV92YWx1ZXNba2V5XSlcclxuXHRcdFx0XHRjaGFuZ2VWYWx1ZXNba2V5XSA9IGFwcHJvdmVfdmFsdWVzW2tleV1cclxuXHRcdGVsc2VcclxuXHRcdFx0aWYgYXBwcm92ZV92YWx1ZXNba2V5XSAhPSAnJ1xyXG4jXHRcdFx0XHRjb25zb2xlLmxvZyhrZXksYXBwcm92ZV92YWx1ZXNba2V5XSlcclxuXHRcdFx0XHRjaGFuZ2VWYWx1ZXNba2V5XSA9IGFwcHJvdmVfdmFsdWVzW2tleV1cclxuXHJcblx0cmV0dXJuIGNoYW5nZVZhbHVlc1xyXG4iLCIgICAgICAgICAgICAgICAgICAgXG5cbmFwcHJvdmVNYW5hZ2VyID0ge307XG5cblxuLypcbiAgICDlr7nmr5RhcHByb3ZlX3ZhbHVlc+S4jmxhc3RfdmFsdWVzIOWvueixoe+8jCDov5Tlm55hcHByb3ZlX3ZhbHVlc+avlGxhc3RfdmFsdWVz5aSa5Ye655qE5oiW6ICF5pS55Y+Y55qE6YOo5YiGXG4gKi9cblxuYXBwcm92ZU1hbmFnZXIuZ2V0Q2hhbmdlVmFsdWVzID0gZnVuY3Rpb24obGFzdF92YWx1ZXMsIGFwcHJvdmVfdmFsdWVzKSB7XG4gIHZhciBhcHByb3ZlX3ZhbHVlc19rZXlzLCBjaGFuZ2VWYWx1ZXMsIGxhc3RfdmFsdWVzX2tleXM7XG4gIGNoYW5nZVZhbHVlcyA9IHt9O1xuICBsYXN0X3ZhbHVlc19rZXlzID0gXy5rZXlzKGxhc3RfdmFsdWVzKTtcbiAgYXBwcm92ZV92YWx1ZXNfa2V5cyA9IF8ua2V5cyhhcHByb3ZlX3ZhbHVlcyk7XG4gIGFwcHJvdmVfdmFsdWVzX2tleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoXy5jb250YWlucyhsYXN0X3ZhbHVlc19rZXlzLCBrZXkpKSB7XG4gICAgICBpZiAoIV8uaXNFcXVhbChsYXN0X3ZhbHVlc1trZXldLCBhcHByb3ZlX3ZhbHVlc1trZXldKSkge1xuICAgICAgICByZXR1cm4gY2hhbmdlVmFsdWVzW2tleV0gPSBhcHByb3ZlX3ZhbHVlc1trZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXBwcm92ZV92YWx1ZXNba2V5XSAhPT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZVZhbHVlc1trZXldID0gYXBwcm92ZV92YWx1ZXNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hhbmdlVmFsdWVzO1xufTtcbiIsImZsb3dNYW5hZ2VyID0ge31cclxuXHJcbmZsb3dNYW5hZ2VyLmdldENhdGVnb3JpZXNGbG93cyA9IChzcGFjZUlkLCBjYXRlZ29yaWVJZCwgZmllbGRzKS0+XHJcblxyXG5cdGNhdGVnb3JpZXNGb3JtcyA9IGZvcm1NYW5hZ2VyLmdldENhdGVnb3JpZXNGb3JtcyhzcGFjZUlkLCBjYXRlZ29yaWVJZCwge19pZDogMX0pLmZldGNoKClcclxuXHJcblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe2Zvcm06IHskaW4gOiBjYXRlZ29yaWVzRm9ybXMuZ2V0UHJvcGVydHkoXCJfaWRcIil9fSlcclxuXHJcbmZsb3dNYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zsb3dzID0gKHNwYWNlSWQsIGZpZWxkcyktPlxyXG5cclxuXHR1bkNhdGVnb3JpZXNGb3JtcyA9IGZvcm1NYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zvcm1zKHNwYWNlSWQsIHtfaWQ6IDF9KS5mZXRjaCgpXHJcblxyXG5cdHJldHVybiBkYi5mbG93cy5maW5kKHtmb3JtOiB7JGluIDogdW5DYXRlZ29yaWVzRm9ybXMuZ2V0UHJvcGVydHkoXCJfaWRcIil9fSlcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsImZvcm1NYW5hZ2VyID0ge31cclxuXHJcbmZvcm1NYW5hZ2VyLmdldENhdGVnb3JpZXNGb3JtcyA9IChzcGFjZUlkLCBjYXRlZ29yaWVJZCwgZmllbGRzKS0+XHJcblx0aWYgZmllbGRzXHJcblx0XHRfZmllbGRzID0ge2ZpZWxkczogZmllbGRzfVxyXG5cclxuXHRyZXR1cm4gZGIuZm9ybXMuZmluZCh7c3BhY2U6IHNwYWNlSWQsIGNhdGVnb3J5OiBjYXRlZ29yaWVJZCwgc3RhdGU6IFwiZW5hYmxlZFwifSwgX2ZpZWxkcylcclxuXHJcbmZvcm1NYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zvcm1zID0gKHNwYWNlSWQsIGZpZWxkcykgLT5cclxuXHRpZiBmaWVsZHNcclxuXHRcdF9maWVsZHMgPSB7ZmllbGRzOiBmaWVsZHN9XHJcblx0cmV0dXJuIGRiLmZvcm1zLmZpbmQoe3NwYWNlOiBzcGFjZUlkLCBjYXRlZ29yeTogeyRpbjogW251bGwsIFwiXCJdfSwgc3RhdGU6IFwiZW5hYmxlZFwifSwgX2ZpZWxkcylcclxuIiwiICAgICAgICAgICAgICAgIFxuXG5mb3JtTWFuYWdlciA9IHt9O1xuXG5mb3JtTWFuYWdlci5nZXRDYXRlZ29yaWVzRm9ybXMgPSBmdW5jdGlvbihzcGFjZUlkLCBjYXRlZ29yaWVJZCwgZmllbGRzKSB7XG4gIHZhciBfZmllbGRzO1xuICBpZiAoZmllbGRzKSB7XG4gICAgX2ZpZWxkcyA9IHtcbiAgICAgIGZpZWxkczogZmllbGRzXG4gICAgfTtcbiAgfVxuICByZXR1cm4gZGIuZm9ybXMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgY2F0ZWdvcnk6IGNhdGVnb3JpZUlkLFxuICAgIHN0YXRlOiBcImVuYWJsZWRcIlxuICB9LCBfZmllbGRzKTtcbn07XG5cbmZvcm1NYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zvcm1zID0gZnVuY3Rpb24oc3BhY2VJZCwgZmllbGRzKSB7XG4gIHZhciBfZmllbGRzO1xuICBpZiAoZmllbGRzKSB7XG4gICAgX2ZpZWxkcyA9IHtcbiAgICAgIGZpZWxkczogZmllbGRzXG4gICAgfTtcbiAgfVxuICByZXR1cm4gZGIuZm9ybXMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgY2F0ZWdvcnk6IHtcbiAgICAgICRpbjogW251bGwsIFwiXCJdXG4gICAgfSxcbiAgICBzdGF0ZTogXCJlbmFibGVkXCJcbiAgfSwgX2ZpZWxkcyk7XG59O1xuIiwic3RlcE1hbmFnZXIgPSB7fVxyXG5cclxuc3RlcE1hbmFnZXIuYWxsb3dCYXRjaCA9IChzdGVwKS0+XHJcblx0cmV0dXJuIHN0ZXAuYWxsb3dCYXRjaFxyXG5cclxuc3RlcE1hbmFnZXIuZ2V0U3RlcCA9IChpbnN0YW5jZSwgZmxvdywgc3RlcF9pZCktPlxyXG5cdGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uXHJcblx0aXNFeGlzdFN0ZXAgPSBudWxsXHJcblx0aWYgZmxvdy5jdXJyZW50Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0aXNFeGlzdFN0ZXAgPSBfLmZpbmQoZmxvdy5jdXJyZW50LnN0ZXBzLCAoc3RlcCktPlxyXG5cdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxyXG5cdFx0KVxyXG5cdGVsc2VcclxuXHRcdF8uZWFjaChmbG93Lmhpc3RvcnlzLCAoaGlzdG9yeSktPlxyXG5cdFx0XHRpZiBoaXN0b3J5Ll9pZCBpcyBmbG93X3JldlxyXG5cdFx0XHRcdGlzRXhpc3RTdGVwID0gXy5maW5kKGhpc3Rvcnkuc3RlcHMsIChzdGVwKS0+XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RlcC5faWQgaXMgc3RlcF9pZFxyXG5cdFx0XHRcdClcclxuXHRcdClcclxuXHJcblx0aWYgbm90IGlzRXhpc3RTdGVwXHJcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBcIuS4jeiDveiOt+WPlnN0ZXBcIilcclxuXHJcblx0cmV0dXJuIGlzRXhpc3RTdGVwIiwiICAgICAgICAgICAgICAgIFxuXG5zdGVwTWFuYWdlciA9IHt9O1xuXG5zdGVwTWFuYWdlci5hbGxvd0JhdGNoID0gZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gc3RlcC5hbGxvd0JhdGNoO1xufTtcblxuc3RlcE1hbmFnZXIuZ2V0U3RlcCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBmbG93LCBzdGVwX2lkKSB7XG4gIHZhciBmbG93X3JldiwgaXNFeGlzdFN0ZXA7XG4gIGZsb3dfcmV2ID0gaW5zdGFuY2UuZmxvd192ZXJzaW9uO1xuICBpc0V4aXN0U3RlcCA9IG51bGw7XG4gIGlmIChmbG93LmN1cnJlbnQuX2lkID09PSBmbG93X3Jldikge1xuICAgIGlzRXhpc3RTdGVwID0gXy5maW5kKGZsb3cuY3VycmVudC5zdGVwcywgZnVuY3Rpb24oc3RlcCkge1xuICAgICAgcmV0dXJuIHN0ZXAuX2lkID09PSBzdGVwX2lkO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF8uZWFjaChmbG93Lmhpc3RvcnlzLCBmdW5jdGlvbihoaXN0b3J5KSB7XG4gICAgICBpZiAoaGlzdG9yeS5faWQgPT09IGZsb3dfcmV2KSB7XG4gICAgICAgIHJldHVybiBpc0V4aXN0U3RlcCA9IF8uZmluZChoaXN0b3J5LnN0ZXBzLCBmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXAuX2lkID09PSBzdGVwX2lkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoIWlzRXhpc3RTdGVwKSB7XG4gICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IhJywgXCLkuI3og73ojrflj5ZzdGVwXCIpO1xuICB9XG4gIHJldHVybiBpc0V4aXN0U3RlcDtcbn07XG4iLCJfZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyID0ge31cclxuXHJcbmxvZ2dlciA9IG5ldyBMb2dnZXIgJ1dvcmtmbG93IC0+IEluc3RhbmNlTWFuYWdlcidcclxuXHJcbkluc3RhbmNlTWFuYWdlci5oYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwID0gKGlucywgZmllbGRfbWFwKSAtPlxyXG5cdHJlcyA9IGluc1xyXG5cdGlmIGluc1xyXG5cdFx0aWYgIWZpZWxkX21hcFxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoeyBfaWQ6IGlucy5mbG93IH0sIHsgZmllbGRzOiB7IGZpZWxkX21hcDogMSB9IH0pXHJcblxyXG5cdFx0XHRpZiBmbG93Py5maWVsZF9tYXBcclxuXHRcdFx0XHRmaWVsZF9tYXAgPSBmbG93LmZpZWxkX21hcFxyXG5cclxuXHRcdGlmIGZpZWxkX21hcFxyXG5cdFx0XHRjb250ZXh0ID0gXy5jbG9uZShpbnMpXHJcblxyXG5cdFx0XHRjb250ZXh0Ll8gPSBfXHJcblxyXG5cdFx0XHRzY3JpcHQgPSBcInZhciBpbnN0YW5jZXMgPSAje2ZpZWxkX21hcH07IGV4cG9ydHMuaW5zdGFuY2VzID0gaW5zdGFuY2VzXCJcclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0cmVzID0gX2V2YWwoc2NyaXB0LCBcImhhbmRsZXJJbnN0YW5jZUJ5RmllbGRNYXBcIiwgY29udGV4dCwgZmFsc2UpLmluc3RhbmNlc1xyXG5cdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0cmVzID0geyBfZXJyb3I6IGUgfVxyXG5cdFx0XHRcdGxvZ2dlci5lcnJvciBlXHJcblx0cmV0dXJuIHJlc1xyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlID0gKGluc3RhbmNlLCBoYW5kbGVyKS0+XHJcblxyXG5cdGlmICFpbnN0YW5jZSBvciAhaW5zdGFuY2UudHJhY2VzIG9yIGluc3RhbmNlLnRyYWNlcy5sZW5ndGggPCAxXHJcblx0XHRyZXR1cm5cclxuXHJcblx0Y3VycmVudFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eSgnaXNfZmluaXNoZWQnLCBmYWxzZSlcclxuXHJcblx0aWYgY3VycmVudFRyYWNlcy5sZW5ndGhcclxuXHRcdGN1cnJlbnRBcHByb3ZlcyA9IGN1cnJlbnRUcmFjZXNbMF0uYXBwcm92ZXMuZmlsdGVyUHJvcGVydHkoJ2lzX2ZpbmlzaGVkJywgZmFsc2UpLmZpbHRlclByb3BlcnR5KCdoYW5kbGVyJywgaGFuZGxlcilcclxuXHRcdGN1cnJlbnRBcHByb3ZlID0gaWYgY3VycmVudEFwcHJvdmVzLmxlbmd0aCA+IDAgdGhlbiBjdXJyZW50QXBwcm92ZXNbMF0gZWxzZSBudWxsXHJcblxyXG5cdCPkvKDpmIXnmoRhcHByb3Zl6L+U5Zue5pyA5paw5LiA5p2hXHJcblx0aWYgIWN1cnJlbnRBcHByb3ZlIG9yIGN1cnJlbnRBcHByb3ZlLnR5cGUgPT0gJ2NjJ1xyXG5cdFx0IyDlvZPliY3mmK/kvKDpmIVcclxuXHRcdF8uZWFjaCBpbnN0YW5jZS50cmFjZXMsICh0KSAtPlxyXG5cdFx0XHRfLmVhY2ggdC5hcHByb3ZlcywgKGEpIC0+XHJcblx0XHRcdFx0aWYgYS50eXBlID09ICdjYycgYW5kIGEudXNlciA9PSBoYW5kbGVyIGFuZCBhLmlzX2ZpbmlzaGVkID09IGZhbHNlXHJcblx0XHRcdFx0XHRjdXJyZW50QXBwcm92ZSA9IGFcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdGlmICFjdXJyZW50QXBwcm92ZVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdHJldHVybiBjdXJyZW50QXBwcm92ZVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRUcmFjZSA9IChpbnN0YW5jZSwgdHJhY2VJZCktPlxyXG5cdHJldHVybiBpbnN0YW5jZS50cmFjZXMuZmluZFByb3BlcnR5QnlQSyhcIl9pZFwiLCB0cmFjZUlkKVxyXG5cclxuSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZSA9IChpbnN0YW5jZUlkLCB1c2VySWQpLT5cclxuXHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGluc3RhbmNlSWR9KVxyXG5cclxuXHRmbG93ID0gdXVmbG93TWFuYWdlci5nZXRGbG93KGluc3RhbmNlLmZsb3cpXHJcblxyXG5cdG15X2FwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudEFwcHJvdmUoaW5zdGFuY2UsIHVzZXJJZClcclxuXHJcblx0aWYgbXlfYXBwcm92ZVxyXG5cclxuI1x0XHRsYW5nID0gU3RlZWRvcy5sb2NhbGUodGhhdC51c2VySWQsIHRydWUpXHJcblxyXG5cdFx0dHJhY2UgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFRyYWNlKGluc3RhbmNlLCBteV9hcHByb3ZlLnRyYWNlKVxyXG5cclxuXHRcdHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHRyYWNlLnN0ZXApXHJcblxyXG5cdFx0c3RlcF90eXBlID0gc3RlcC5zdGVwX3R5cGVcclxuXHJcblx0XHRqdWRnZSA9IGlmIHN0ZXBfdHlwZSA9PSBcInNpZ25cIiB0aGVuIFwiYXBwcm92ZWRcIiBlbHNlIFwiXCJcclxuXHJcblx0XHRuZXh0U3RlcHMgPSB1dWZsb3dNYW5hZ2VyLmdldE5leHRTdGVwcyhpbnN0YW5jZSwgZmxvdywgc3RlcCwganVkZ2UpXHJcblxyXG5cdFx0aWYgbmV4dFN0ZXBzLmxlbmd0aCA9PSAxXHJcblx0XHRcdGlmIHN0ZXBfdHlwZSA9PSBcInNpZ25cIiB8fCBzdGVwX3R5cGUgPT0gXCJjb3VudGVyU2lnblwiXHJcblx0XHRcdFx0bXlfYXBwcm92ZS5qdWRnZSA9ICdhcHByb3ZlZCdcclxuXHRcdFx0bmV4dF91c2VyX2lkcyA9IGdldEhhbmRsZXJzTWFuYWdlci5nZXRIYW5kbGVycyhpbnN0YW5jZS5faWQgLCBuZXh0U3RlcHNbMF0pXHJcblx0XHRcdGlmICFuZXh0X3VzZXJfaWRzXHJcblx0XHRcdFx0bXlfYXBwcm92ZS5uZXh0X3N0ZXBzID0gW3sgc3RlcDogbmV4dFN0ZXBzWzBdLCB1c2VyczogW10gfV1cclxuXHRcdFx0XHRyZXR1cm4gbXlfYXBwcm92ZVxyXG5cdFx0XHRpZiBuZXh0X3VzZXJfaWRzLmxlbmd0aCA9PSAxXHJcblx0XHRcdFx0bXlfYXBwcm92ZS5uZXh0X3N0ZXBzID0gW3tzdGVwOiBuZXh0U3RlcHNbMF0sIHVzZXJzOiBuZXh0X3VzZXJfaWRzfV1cclxuXHRcdFx0XHRyZXR1cm4gbXlfYXBwcm92ZVxyXG4jXHRcdFx0ZWxzZVxyXG4jXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvciEnLCBUQVBpMThuLl9fKCd3b3JrZmxvd19lcnJvcl9tdWx0aXBsZV9uZXh0X3N0ZXBfdXNlcnMnLCB7aW5zbmFtZTogaW5zdGFuY2UubmFtZX0sIGxhbmcpKVxyXG4jXHRcdGVsc2VcclxuI1x0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yIScsIFRBUGkxOG4uX18oJ3dvcmtmbG93X2Vycm9yX211bHRpcGxlX25leHRfc3RlcCcsIHtpbnNuYW1lOiBpbnN0YW5jZS5uYW1lfSwgbGFuZykpXHJcblxyXG5cdHJldHVyblxyXG5cclxuXHJcbkluc3RhbmNlTWFuYWdlci5nZXRCYXRjaEluc3RhbmNlcyA9IChzcGFjZSwgY2F0ZWdvcnlJZCwgZmxvd0lkcywgaW5ib3hfdXNlciktPlxyXG5cdF9iYXRjaF9pbnN0YW5jZXMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2UsIGluYm94X3VzZXJzOiBpbmJveF91c2VyfVxyXG5cclxuXHRGSUVMRFMgPSB7IG5hbWU6IDEsIGFwcGxpY2FudF9uYW1lOiAxLCBzdWJtaXRfZGF0ZTogMSwgZmxvd192ZXJzaW9uOiAxLCBcInRyYWNlcy5zdGVwXCI6IDEsIGZsb3c6IDEsIGN1cnJlbnRfc3RlcF9uYW1lOiAxLCBmbG93X25hbWU6IDEgfVxyXG5cclxuXHRpZiBjYXRlZ29yeUlkXHJcblxyXG5cdFx0aWYgY2F0ZWdvcnlJZCA9PSAnLTEnXHJcblx0XHRcdHVuQ2F0ZWdvcnlGbG93cyA9IGZsb3dNYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCB7X2lkOiAxfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKVxyXG5cdFx0XHRxdWVyeS5mbG93ID0geyRpbjogdW5DYXRlZ29yeUZsb3dzfVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRjYXRlZ29yeUZsb3dzID0gZmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCBjYXRlZ29yeUlkLCB7X2lkOiAxfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKVxyXG5cdFx0XHRxdWVyeS5mbG93ID0geyRpbjogY2F0ZWdvcnlGbG93c31cclxuXHJcblx0aWYgZmxvd0lkc1xyXG5cdFx0cXVlcnkuZmxvdyA9IHskaW46IGZsb3dJZHN9XHJcblxyXG4jXHRjb25zb2xlLmxvZyhcInF1ZXJ5XCIsIEpTT04uc3RyaW5naWZ5KHF1ZXJ5KSlcclxuXHJcblx0aW5ib3hfaW5zdGFuY2VzID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtmaWVsZHM6IEZJRUxEUywgc2tpcDogMCwgbGltaXQ6IDEwMH0pXHJcblxyXG5cdGluYm94X2luc3RhbmNlcy5mb3JFYWNoIChpbnMpLT5cclxuXHRcdGN1cnJlbnRTdGVwSWQgPSBfLmxhc3QoaW5zLnRyYWNlcykuc3RlcCAjVE9ETyDmraTku6PnoIHkuI3pgILnlKjkvKDpmIXmibnlpITnkIZcclxuXHJcblx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBpbnMuZmxvd30pXHJcblxyXG5cdFx0Y3VycmVudFN0ZXAgPSBzdGVwTWFuYWdlci5nZXRTdGVwKGlucywgZmxvdywgY3VycmVudFN0ZXBJZClcclxuXHJcblx0XHRteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0TXlBcHByb3ZlKGlucy5faWQsIGluYm94X3VzZXIpXHJcblxyXG5cdFx0aWYgc3RlcE1hbmFnZXIuYWxsb3dCYXRjaChjdXJyZW50U3RlcCkgJiYgbXlBcHByb3ZlXHJcblxyXG5cdFx0XHRkZWxldGUgaW5zLmZsb3dfdmVyc2lvblxyXG5cclxuXHRcdFx0ZGVsZXRlIGlucy50cmFjZXNcclxuXHJcblx0XHRcdGRlbGV0ZSBpbnMuZmxvd1xyXG5cclxuXHRcdFx0aW5zLmFwcHJvdmVfc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlXHJcblxyXG5cdFx0XHRfYmF0Y2hfaW5zdGFuY2VzLnB1c2goaW5zKVxyXG4jXHRcdGVsc2VcclxuI1x0XHRcdGNvbnNvbGUubG9nKFwi5om56YeP5a6h5om5LeW8guW4uOaVsOaNrlwiLCBpbnMuX2lkKVxyXG5cclxuXHRyZXR1cm4gX2JhdGNoX2luc3RhbmNlc1xyXG4iLCJ2YXIgX2V2YWwsIGxvZ2dlcjsgICAgICAgICAgICAgICAgIFxuXG5fZXZhbCA9IHJlcXVpcmUoJ2V2YWwnKTtcblxuSW5zdGFuY2VNYW5hZ2VyID0ge307XG5cbmxvZ2dlciA9IG5ldyBMb2dnZXIoJ1dvcmtmbG93IC0+IEluc3RhbmNlTWFuYWdlcicpO1xuXG5JbnN0YW5jZU1hbmFnZXIuaGFuZGxlckluc3RhbmNlQnlGaWVsZE1hcCA9IGZ1bmN0aW9uKGlucywgZmllbGRfbWFwKSB7XG4gIHZhciBjb250ZXh0LCBlLCBmbG93LCByZXMsIHNjcmlwdDtcbiAgcmVzID0gaW5zO1xuICBpZiAoaW5zKSB7XG4gICAgaWYgKCFmaWVsZF9tYXApIHtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBpbnMuZmxvd1xuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBmaWVsZF9tYXA6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZmxvdyAhPSBudWxsID8gZmxvdy5maWVsZF9tYXAgOiB2b2lkIDApIHtcbiAgICAgICAgZmllbGRfbWFwID0gZmxvdy5maWVsZF9tYXA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmaWVsZF9tYXApIHtcbiAgICAgIGNvbnRleHQgPSBfLmNsb25lKGlucyk7XG4gICAgICBjb250ZXh0Ll8gPSBfO1xuICAgICAgc2NyaXB0ID0gXCJ2YXIgaW5zdGFuY2VzID0gXCIgKyBmaWVsZF9tYXAgKyBcIjsgZXhwb3J0cy5pbnN0YW5jZXMgPSBpbnN0YW5jZXNcIjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcyA9IF9ldmFsKHNjcmlwdCwgXCJoYW5kbGVySW5zdGFuY2VCeUZpZWxkTWFwXCIsIGNvbnRleHQsIGZhbHNlKS5pbnN0YW5jZXM7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgIHJlcyA9IHtcbiAgICAgICAgICBfZXJyb3I6IGVcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldEN1cnJlbnRBcHByb3ZlID0gZnVuY3Rpb24oaW5zdGFuY2UsIGhhbmRsZXIpIHtcbiAgdmFyIGN1cnJlbnRBcHByb3ZlLCBjdXJyZW50QXBwcm92ZXMsIGN1cnJlbnRUcmFjZXM7XG4gIGlmICghaW5zdGFuY2UgfHwgIWluc3RhbmNlLnRyYWNlcyB8fCBpbnN0YW5jZS50cmFjZXMubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdXJyZW50VHJhY2VzID0gaW5zdGFuY2UudHJhY2VzLmZpbHRlclByb3BlcnR5KCdpc19maW5pc2hlZCcsIGZhbHNlKTtcbiAgaWYgKGN1cnJlbnRUcmFjZXMubGVuZ3RoKSB7XG4gICAgY3VycmVudEFwcHJvdmVzID0gY3VycmVudFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eSgnaXNfZmluaXNoZWQnLCBmYWxzZSkuZmlsdGVyUHJvcGVydHkoJ2hhbmRsZXInLCBoYW5kbGVyKTtcbiAgICBjdXJyZW50QXBwcm92ZSA9IGN1cnJlbnRBcHByb3Zlcy5sZW5ndGggPiAwID8gY3VycmVudEFwcHJvdmVzWzBdIDogbnVsbDtcbiAgfVxuICBpZiAoIWN1cnJlbnRBcHByb3ZlIHx8IGN1cnJlbnRBcHByb3ZlLnR5cGUgPT09ICdjYycpIHtcbiAgICBfLmVhY2goaW5zdGFuY2UudHJhY2VzLCBmdW5jdGlvbih0KSB7XG4gICAgICBfLmVhY2godC5hcHByb3ZlcywgZnVuY3Rpb24oYSkge1xuICAgICAgICBpZiAoYS50eXBlID09PSAnY2MnICYmIGEudXNlciA9PT0gaGFuZGxlciAmJiBhLmlzX2ZpbmlzaGVkID09PSBmYWxzZSkge1xuICAgICAgICAgIGN1cnJlbnRBcHByb3ZlID0gYTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFjdXJyZW50QXBwcm92ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gY3VycmVudEFwcHJvdmU7XG59O1xuXG5JbnN0YW5jZU1hbmFnZXIuZ2V0Q3VycmVudFRyYWNlID0gZnVuY3Rpb24oaW5zdGFuY2UsIHRyYWNlSWQpIHtcbiAgcmV0dXJuIGluc3RhbmNlLnRyYWNlcy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHRyYWNlSWQpO1xufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldE15QXBwcm92ZSA9IGZ1bmN0aW9uKGluc3RhbmNlSWQsIHVzZXJJZCkge1xuICB2YXIgZmxvdywgaW5zdGFuY2UsIGp1ZGdlLCBteV9hcHByb3ZlLCBuZXh0U3RlcHMsIG5leHRfdXNlcl9pZHMsIHN0ZXAsIHN0ZXBfdHlwZSwgdHJhY2U7XG4gIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgIF9pZDogaW5zdGFuY2VJZFxuICB9KTtcbiAgZmxvdyA9IHV1Zmxvd01hbmFnZXIuZ2V0RmxvdyhpbnN0YW5jZS5mbG93KTtcbiAgbXlfYXBwcm92ZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50QXBwcm92ZShpbnN0YW5jZSwgdXNlcklkKTtcbiAgaWYgKG15X2FwcHJvdmUpIHtcbiAgICB0cmFjZSA9IEluc3RhbmNlTWFuYWdlci5nZXRDdXJyZW50VHJhY2UoaW5zdGFuY2UsIG15X2FwcHJvdmUudHJhY2UpO1xuICAgIHN0ZXAgPSB1dWZsb3dNYW5hZ2VyLmdldFN0ZXAoaW5zdGFuY2UsIGZsb3csIHRyYWNlLnN0ZXApO1xuICAgIHN0ZXBfdHlwZSA9IHN0ZXAuc3RlcF90eXBlO1xuICAgIGp1ZGdlID0gc3RlcF90eXBlID09PSBcInNpZ25cIiA/IFwiYXBwcm92ZWRcIiA6IFwiXCI7XG4gICAgbmV4dFN0ZXBzID0gdXVmbG93TWFuYWdlci5nZXROZXh0U3RlcHMoaW5zdGFuY2UsIGZsb3csIHN0ZXAsIGp1ZGdlKTtcbiAgICBpZiAobmV4dFN0ZXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKHN0ZXBfdHlwZSA9PT0gXCJzaWduXCIgfHwgc3RlcF90eXBlID09PSBcImNvdW50ZXJTaWduXCIpIHtcbiAgICAgICAgbXlfYXBwcm92ZS5qdWRnZSA9ICdhcHByb3ZlZCc7XG4gICAgICB9XG4gICAgICBuZXh0X3VzZXJfaWRzID0gZ2V0SGFuZGxlcnNNYW5hZ2VyLmdldEhhbmRsZXJzKGluc3RhbmNlLl9pZCwgbmV4dFN0ZXBzWzBdKTtcbiAgICAgIGlmICghbmV4dF91c2VyX2lkcykge1xuICAgICAgICBteV9hcHByb3ZlLm5leHRfc3RlcHMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RlcDogbmV4dFN0ZXBzWzBdLFxuICAgICAgICAgICAgdXNlcnM6IFtdXG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gbXlfYXBwcm92ZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXh0X3VzZXJfaWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBteV9hcHByb3ZlLm5leHRfc3RlcHMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RlcDogbmV4dFN0ZXBzWzBdLFxuICAgICAgICAgICAgdXNlcnM6IG5leHRfdXNlcl9pZHNcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBteV9hcHByb3ZlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuSW5zdGFuY2VNYW5hZ2VyLmdldEJhdGNoSW5zdGFuY2VzID0gZnVuY3Rpb24oc3BhY2UsIGNhdGVnb3J5SWQsIGZsb3dJZHMsIGluYm94X3VzZXIpIHtcbiAgdmFyIEZJRUxEUywgX2JhdGNoX2luc3RhbmNlcywgY2F0ZWdvcnlGbG93cywgaW5ib3hfaW5zdGFuY2VzLCBxdWVyeSwgdW5DYXRlZ29yeUZsb3dzO1xuICBfYmF0Y2hfaW5zdGFuY2VzID0gbmV3IEFycmF5KCk7XG4gIHF1ZXJ5ID0ge1xuICAgIHNwYWNlOiBzcGFjZSxcbiAgICBpbmJveF91c2VyczogaW5ib3hfdXNlclxuICB9O1xuICBGSUVMRFMgPSB7XG4gICAgbmFtZTogMSxcbiAgICBhcHBsaWNhbnRfbmFtZTogMSxcbiAgICBzdWJtaXRfZGF0ZTogMSxcbiAgICBmbG93X3ZlcnNpb246IDEsXG4gICAgXCJ0cmFjZXMuc3RlcFwiOiAxLFxuICAgIGZsb3c6IDEsXG4gICAgY3VycmVudF9zdGVwX25hbWU6IDEsXG4gICAgZmxvd19uYW1lOiAxXG4gIH07XG4gIGlmIChjYXRlZ29yeUlkKSB7XG4gICAgaWYgKGNhdGVnb3J5SWQgPT09ICctMScpIHtcbiAgICAgIHVuQ2F0ZWdvcnlGbG93cyA9IGZsb3dNYW5hZ2VyLmdldFVuQ2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCB7XG4gICAgICAgIF9pZDogMVxuICAgICAgfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKTtcbiAgICAgIHF1ZXJ5LmZsb3cgPSB7XG4gICAgICAgICRpbjogdW5DYXRlZ29yeUZsb3dzXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjYXRlZ29yeUZsb3dzID0gZmxvd01hbmFnZXIuZ2V0Q2F0ZWdvcmllc0Zsb3dzKHNwYWNlLCBjYXRlZ29yeUlkLCB7XG4gICAgICAgIF9pZDogMVxuICAgICAgfSkuZmV0Y2goKS5nZXRQcm9wZXJ0eShcIl9pZFwiKTtcbiAgICAgIHF1ZXJ5LmZsb3cgPSB7XG4gICAgICAgICRpbjogY2F0ZWdvcnlGbG93c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKGZsb3dJZHMpIHtcbiAgICBxdWVyeS5mbG93ID0ge1xuICAgICAgJGluOiBmbG93SWRzXG4gICAgfTtcbiAgfVxuICBpbmJveF9pbnN0YW5jZXMgPSBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgIGZpZWxkczogRklFTERTLFxuICAgIHNraXA6IDAsXG4gICAgbGltaXQ6IDEwMFxuICB9KTtcbiAgaW5ib3hfaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24oaW5zKSB7XG4gICAgdmFyIGN1cnJlbnRTdGVwLCBjdXJyZW50U3RlcElkLCBmbG93LCBteUFwcHJvdmU7XG4gICAgY3VycmVudFN0ZXBJZCA9IF8ubGFzdChpbnMudHJhY2VzKS5zdGVwO1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zLmZsb3dcbiAgICB9KTtcbiAgICBjdXJyZW50U3RlcCA9IHN0ZXBNYW5hZ2VyLmdldFN0ZXAoaW5zLCBmbG93LCBjdXJyZW50U3RlcElkKTtcbiAgICBteUFwcHJvdmUgPSBJbnN0YW5jZU1hbmFnZXIuZ2V0TXlBcHByb3ZlKGlucy5faWQsIGluYm94X3VzZXIpO1xuICAgIGlmIChzdGVwTWFuYWdlci5hbGxvd0JhdGNoKGN1cnJlbnRTdGVwKSAmJiBteUFwcHJvdmUpIHtcbiAgICAgIGRlbGV0ZSBpbnMuZmxvd192ZXJzaW9uO1xuICAgICAgZGVsZXRlIGlucy50cmFjZXM7XG4gICAgICBkZWxldGUgaW5zLmZsb3c7XG4gICAgICBpbnMuYXBwcm92ZV9zdGFydF9kYXRlID0gbXlBcHByb3ZlLnN0YXJ0X2RhdGU7XG4gICAgICByZXR1cm4gX2JhdGNoX2luc3RhbmNlcy5wdXNoKGlucyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIF9iYXRjaF9pbnN0YW5jZXM7XG59O1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2NhdGVnb3JpZXMnLCAoc3BhY2VJZCkgLT5cclxuXHRjaGVjayBzcGFjZUlkLCBTdHJpbmdcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBzcGFjZUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cclxuXHRyZXR1cm4gZGIuY2F0ZWdvcmllcy5maW5kKHsgc3BhY2U6IHNwYWNlSWQgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSwgc3BhY2U6IDEsIHNvcnRfbm86IDEsIGFwcDogMSB9IH0pIiwiTWV0ZW9yLnB1Ymxpc2goJ2NhdGVnb3JpZXMnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGRiLmNhdGVnb3JpZXMuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogMSxcbiAgICAgIHNwYWNlOiAxLFxuICAgICAgc29ydF9ubzogMSxcbiAgICAgIGFwcDogMVxuICAgIH1cbiAgfSk7XG59KTtcbiIsIlxyXG5NZXRlb3IucHVibGlzaCAnY2ZzX2luc3RhbmNlcycsIChpbnN0YW5jZUlkcyktPlxyXG5cdGNoZWNrKGluc3RhbmNlSWRzLCBBcnJheSlcclxuXHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBpbnN0YW5jZUlkc1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHJldHVybiBjZnMuaW5zdGFuY2VzLmZpbmQoeydtZXRhZGF0YS5pbnN0YW5jZSc6IHskaW46IGluc3RhbmNlSWRzfSAsICRvcjogW3snbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHskbmU6IHRydWV9fSx7J21ldGFkYXRhLmlzX3ByaXZhdGUnOiB0cnVlLCBcIm1ldGFkYXRhLm93bmVyXCI6IHRoaXMudXNlcklkfV19KVxyXG4iLCJNZXRlb3IucHVibGlzaCgnY2ZzX2luc3RhbmNlcycsIGZ1bmN0aW9uKGluc3RhbmNlSWRzKSB7XG4gIGNoZWNrKGluc3RhbmNlSWRzLCBBcnJheSk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghaW5zdGFuY2VJZHMpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBjZnMuaW5zdGFuY2VzLmZpbmQoe1xuICAgICdtZXRhZGF0YS5pbnN0YW5jZSc6IHtcbiAgICAgICRpbjogaW5zdGFuY2VJZHNcbiAgICB9LFxuICAgICRvcjogW1xuICAgICAge1xuICAgICAgICAnbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHtcbiAgICAgICAgICAkbmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICAnbWV0YWRhdGEuaXNfcHJpdmF0ZSc6IHRydWUsXG4gICAgICAgIFwibWV0YWRhdGEub3duZXJcIjogdGhpcy51c2VySWRcbiAgICAgIH1cbiAgICBdXG4gIH0pO1xufSk7XG4iLCJcclxuXHJcbk1ldGVvci5wdWJsaXNoICdmbG93X3Bvc2l0aW9ucycsIChzcGFjZUlkKS0+XHJcblx0XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblx0XHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0cmV0dXJuIGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe3NwYWNlOiBzcGFjZUlkfSwge2ZpZWxkczoge3JvbGU6MSwgdXNlcnM6IDEsIG9yZzogMX19KTtcclxuIiwiTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfcG9zaXRpb25zJywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93X3Bvc2l0aW9ucy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICByb2xlOiAxLFxuICAgICAgdXNlcnM6IDEsXG4gICAgICBvcmc6IDFcbiAgICB9XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaENvbXBvc2l0ZSAnZmxvd19wb3NpdGlvbnNfdGFidWxhcicsICh0YWJsZU5hbWUsIGlkcywgZmllbGRzKS0+XHJcblx0Y2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xyXG5cdGNoZWNrKGlkcywgQXJyYXkpO1xyXG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR0aGlzLnVuYmxvY2soKVxyXG5cclxuXHRmaW5kOiAtPlxyXG5cdFx0dGhpcy51bmJsb2NrKClcclxuXHRcdGRiLmZsb3dfcG9zaXRpb25zLmZpbmQge19pZDogeyRpbjogaWRzfX0sIGZpZWxkczogZmllbGRzXHJcblxyXG5cdGNoaWxkcmVuOiBbXHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChwb3NpdGlvbikgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIGZsb3dfcm9sZXNcclxuXHRcdFx0XHRkYi5mbG93X3JvbGVzLmZpbmQgeyBfaWQ6IHBvc2l0aW9uLnJvbGUgfSwgZmllbGRzOiBuYW1lOiAxXHJcblx0XHR9XHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChwb3NpdGlvbikgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIG9yZ2FuaXphdGlvbnNcclxuXHRcdFx0XHRkYi5vcmdhbml6YXRpb25zLmZpbmQgeyBfaWQ6IHBvc2l0aW9uLm9yZyB9LCBmaWVsZHM6IGZ1bGxuYW1lOiAxXHJcblx0XHR9XHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChwb3NpdGlvbikgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIHVzZXJcclxuXHRcdFx0XHRkYi5zcGFjZV91c2Vycy5maW5kIHtcclxuXHRcdFx0XHRcdHNwYWNlOiBwb3NpdGlvbi5zcGFjZVxyXG5cdFx0XHRcdFx0dXNlcjogJGluOiBwb3NpdGlvbi51c2Vyc1xyXG5cdFx0XHRcdH0sIGZpZWxkczpcclxuXHRcdFx0XHRcdHNwYWNlOiAxXHJcblx0XHRcdFx0XHR1c2VyOiAxXHJcblx0XHRcdFx0XHRuYW1lOiAxXHJcblx0XHR9XHJcblx0XSIsIk1ldGVvci5wdWJsaXNoQ29tcG9zaXRlKCdmbG93X3Bvc2l0aW9uc190YWJ1bGFyJywgZnVuY3Rpb24odGFibGVOYW1lLCBpZHMsIGZpZWxkcykge1xuICBjaGVjayh0YWJsZU5hbWUsIFN0cmluZyk7XG4gIGNoZWNrKGlkcywgQXJyYXkpO1xuICBjaGVjayhmaWVsZHMsIE1hdGNoLk9wdGlvbmFsKE9iamVjdCkpO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICB0aGlzLnVuYmxvY2soKTtcbiAgcmV0dXJuIHtcbiAgICBmaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgcmV0dXJuIGRiLmZsb3dfcG9zaXRpb25zLmZpbmQoe1xuICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAkaW46IGlkc1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczogZmllbGRzXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLmZsb3dfcm9sZXMuZmluZCh7XG4gICAgICAgICAgICBfaWQ6IHBvc2l0aW9uLnJvbGVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgICAgICBfaWQ6IHBvc2l0aW9uLm9yZ1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBmdWxsbmFtZTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IHBvc2l0aW9uLnNwYWNlLFxuICAgICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgICAkaW46IHBvc2l0aW9uLnVzZXJzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgICAgICB1c2VyOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59KTtcbiIsIlxyXG5cclxuXHRNZXRlb3IucHVibGlzaCAnZmxvd19yb2xlcycsIChzcGFjZUlkKS0+XHJcblx0XHRcclxuXHRcdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblx0XHRcclxuXHRcdHVubGVzcyBzcGFjZUlkXHJcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblxyXG5cdFx0cmV0dXJuIGRiLmZsb3dfcm9sZXMuZmluZCh7c3BhY2U6IHNwYWNlSWR9LCB7ZmllbGRzOiB7bmFtZToxfX0pO1xyXG4iLCJNZXRlb3IucHVibGlzaCgnZmxvd19yb2xlcycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gZGIuZmxvd19yb2xlcy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxXG4gICAgfVxuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dzJywgKHNwYWNlSWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0IyDnrKzkuIDmrKHorqLpmIXml7bliJ3lp4vljJblt6XkvZzljLpcclxuXHRpZiBkYi5mbG93cy5maW5kKHtzcGFjZTogc3BhY2VJZH0pLmNvdW50KCkgPT0gMFxyXG5cdFx0ZGIuc3BhY2VzLmNyZWF0ZVRlbXBsYXRlRm9ybUFuZEZsb3coc3BhY2VJZClcclxuXHJcblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe3NwYWNlOiBzcGFjZUlkfSwge1xyXG5cdFx0ZmllbGRzOiB7XHJcblx0XHRcdG5hbWU6IDEsXHJcblx0XHRcdGZvcm06IDEsXHJcblx0XHRcdHN0YXRlOiAxLFxyXG5cdFx0XHRwZXJtczogMSxcclxuXHRcdFx0c3BhY2U6IDEsXHJcblx0XHRcdGNvbXBhbnlfaWQ6IDEsXHJcblx0XHRcdHNvcnRfbm86IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfb3B0aW9uYWxfdXNlcnM6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfdG9fc2VsZjogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dfdmVyc2lvbicsIChzcGFjZUlkLCBmbG93SWQsIHZlcnNpb25JZCkgLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3MgdmVyc2lvbklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cclxuXHRzZWxmID0gdGhpcztcclxuXHJcblx0Z2V0Rmxvd1ZlcnNpb24gPSAoaWQgLCB2ZXJzaW9uSWQpLT5cclxuXHRcdGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtfaWQgOiBpZH0pO1xyXG5cdFx0aWYgZmxvd1xyXG5cdFx0XHRmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnRcclxuXHRcdFx0Zmxvd192ZXJzaW9uLmxhdGVzdCA9IHRydWVcclxuXHJcblx0XHRcdGlmIGZsb3dfdmVyc2lvbi5faWQgIT0gdmVyc2lvbklkXHJcblx0XHRcdFx0Zmxvd192ZXJzaW9uID0gZmxvdy5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZClcclxuXHRcdFx0XHRmbG93X3ZlcnNpb24ubGF0ZXN0ID0gZmFsc2VcclxuXHJcblx0XHRcdHJldHVybiBmbG93X3ZlcnNpb25cclxuXHRoYW5kbGUgPSBkYi5mbG93cy5maW5kKHtfaWQ6IGZsb3dJZH0sIHtmaWVsZHM6IHtfaWQ6IDEsIFwiY3VycmVudC5tb2RpZmllZFwiOiAxfX0pLm9ic2VydmVDaGFuZ2VzIHtcclxuXHRcdGNoYW5nZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oaWQsIHZlcnNpb25JZCkpO1xyXG5cdH1cclxuXHJcblxyXG5cdHNlbGYuYWRkZWQoXCJmbG93X3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rmxvd1ZlcnNpb24oZmxvd0lkLCB2ZXJzaW9uSWQpKTtcclxuXHRzZWxmLnJlYWR5KCk7XHJcblx0c2VsZi5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKVxyXG5cclxuTWV0ZW9yLnB1Ymxpc2ggJ2Rpc3RyaWJ1dGVfb3B0aW9uYWxfZmxvd3MnLCAoZmxvd19pZHMpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dfaWRzXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHJldHVybiBkYi5mbG93cy5maW5kKHtfaWQ6IHskaW46IGZsb3dfaWRzfX0sIHtcclxuXHRcdGZpZWxkczoge1xyXG5cdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRmb3JtOiAxLFxyXG5cdFx0XHRzdGF0ZTogMSxcclxuXHRcdFx0cGVybXM6IDEsXHJcblx0XHRcdHNwYWNlOiAxLFxyXG5cdFx0XHRkaXN0cmlidXRlX29wdGlvbmFsX3VzZXJzOiAxLFxyXG5cdFx0XHRkaXN0cmlidXRlX3RvX3NlbGY6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcclxuXHRcdFx0Y29tcGFueV9pZDogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5NZXRlb3IucHVibGlzaCAnZmxvdycsIChzcGFjZUlkLCBmbG93SWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHJcblx0cmV0dXJuIGRiLmZsb3dzLmZpbmQoe19pZDogZmxvd0lkLCBzcGFjZTogc3BhY2VJZH0sIHtcclxuXHRcdGZpZWxkczoge1xyXG5cdFx0XHRwcmludF90ZW1wbGF0ZTogMSxcclxuXHRcdFx0aW5zdGFuY2VfdGVtcGxhdGU6IDEsXHJcblx0XHRcdGV2ZW50czogMSxcclxuXHRcdFx0ZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcclxuXHRcdFx0ZGlzdHJpYnV0ZV90b19zZWxmOiAxLFxyXG5cdFx0XHR1cGxvYWRfYWZ0ZXJfYmVpbmdfZGlzdHJpYnV0ZWQ6IDEsXHJcblx0XHRcdGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcclxuXHRcdFx0Y29tcGFueV9pZDogMSxcclxuXHRcdFx0YWxsb3dfc2VsZWN0X3N0ZXA6IDFcclxuXHRcdH1cclxuXHR9KVxyXG5NZXRlb3IucHVibGlzaCAnZmxvd19maWxlcycsIChzcGFjZUlkLCBmbG93SWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGZsb3dJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRyZXR1cm4gY2ZzLmZpbGVzLmZpbmQoeyAnbWV0YWRhdGEuc3BhY2UnOiBzcGFjZUlkLCAnbWV0YWRhdGEub2JqZWN0X25hbWUnOiAnZmxvd3MnLCAnbWV0YWRhdGEucmVjb3JkX2lkJzogZmxvd0lkIH0pXHJcblxyXG5NZXRlb3IucHVibGlzaENvbXBvc2l0ZSAnZmxvd3NfdGFidWxhcicsICh0YWJsZU5hbWUsIGlkcywgZmllbGRzKS0+XHJcblx0Y2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xyXG5cdGNoZWNrKGlkcywgQXJyYXkpO1xyXG5cdGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR0aGlzLnVuYmxvY2soKVxyXG5cclxuXHRmaW5kOiAtPlxyXG5cdFx0dGhpcy51bmJsb2NrKClcclxuXHRcdGRiLmZsb3dzLmZpbmQge19pZDogeyRpbjogaWRzfX0sIGZpZWxkczogZmllbGRzXHJcblxyXG5cdGNoaWxkcmVuOiBbXHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChmbG93KSAtPlxyXG5cdFx0XHRcdEB1bmJsb2NrKClcclxuXHRcdFx0XHQjIFB1Ymxpc2ggdGhlIHJlbGF0ZWQgdXNlclxyXG5cdFx0XHRcdGRiLnNwYWNlX3VzZXJzLmZpbmQge1xyXG5cdFx0XHRcdFx0c3BhY2U6IGZsb3cuc3BhY2UsXHJcblx0XHRcdFx0XHR1c2VyOiBmbG93LmN1cnJlbnQubW9kaWZpZWRfYnlcclxuXHRcdFx0XHR9LCBmaWVsZHM6XHJcblx0XHRcdFx0XHRzcGFjZTogMVxyXG5cdFx0XHRcdFx0dXNlcjogMVxyXG5cdFx0XHRcdFx0bmFtZTogMVxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0ZmluZDogKGZsb3cpIC0+XHJcblx0XHRcdFx0QHVuYmxvY2soKVxyXG5cdFx0XHRcdCMgUHVibGlzaCB0aGUgcmVsYXRlZCB1c2VyXHJcblx0XHRcdFx0ZGIuZm9ybXMuZmluZCB7XHJcblx0XHRcdFx0XHRzcGFjZTogZmxvdy5zcGFjZSxcclxuXHRcdFx0XHRcdF9pZDogZmxvdy5mb3JtXHJcblx0XHRcdFx0fSwgZmllbGRzOlxyXG5cdFx0XHRcdFx0c3BhY2U6IDFcclxuXHRcdFx0XHRcdF9pZDogMVxyXG5cdFx0XHRcdFx0bmFtZTogMSxcclxuXHRcdFx0XHRcdGNhdGVnb3J5OiAxXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRmaW5kOiAoZmxvdykgLT5cclxuXHRcdFx0XHRAdW5ibG9jaygpXHJcblx0XHRcdFx0IyBQdWJsaXNoIHRoZSByZWxhdGVkIHVzZXJcclxuXHRcdFx0XHRkYi5jYXRlZ29yaWVzLmZpbmQge1xyXG5cdFx0XHRcdFx0c3BhY2U6IGZsb3cuc3BhY2VcclxuXHRcdFx0XHR9LCBmaWVsZHM6XHJcblx0XHRcdFx0XHRzcGFjZTogMVxyXG5cdFx0XHRcdFx0X2lkOiAxXHJcblx0XHRcdFx0XHRuYW1lOiAxXHJcblx0XHR9XHJcblx0XSIsIk1ldGVvci5wdWJsaXNoKCdmbG93cycsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoZGIuZmxvd3MuZmluZCh7XG4gICAgc3BhY2U6IHNwYWNlSWRcbiAgfSkuY291bnQoKSA9PT0gMCkge1xuICAgIGRiLnNwYWNlcy5jcmVhdGVUZW1wbGF0ZUZvcm1BbmRGbG93KHNwYWNlSWQpO1xuICB9XG4gIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBuYW1lOiAxLFxuICAgICAgZm9ybTogMSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgcGVybXM6IDEsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIGNvbXBhbnlfaWQ6IDEsXG4gICAgICBzb3J0X25vOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcbiAgICAgIGRpc3RyaWJ1dGVfdG9fc2VsZjogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfdmVyc2lvbicsIGZ1bmN0aW9uKHNwYWNlSWQsIGZsb3dJZCwgdmVyc2lvbklkKSB7XG4gIHZhciBnZXRGbG93VmVyc2lvbiwgaGFuZGxlLCBzZWxmO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghZmxvd0lkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXZlcnNpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGdldEZsb3dWZXJzaW9uID0gZnVuY3Rpb24oaWQsIHZlcnNpb25JZCkge1xuICAgIHZhciBmbG93LCBmbG93X3ZlcnNpb247XG4gICAgZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpZFxuICAgIH0pO1xuICAgIGlmIChmbG93KSB7XG4gICAgICBmbG93X3ZlcnNpb24gPSBmbG93LmN1cnJlbnQ7XG4gICAgICBmbG93X3ZlcnNpb24ubGF0ZXN0ID0gdHJ1ZTtcbiAgICAgIGlmIChmbG93X3ZlcnNpb24uX2lkICE9PSB2ZXJzaW9uSWQpIHtcbiAgICAgICAgZmxvd192ZXJzaW9uID0gZmxvdy5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZCk7XG4gICAgICAgIGZsb3dfdmVyc2lvbi5sYXRlc3QgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmbG93X3ZlcnNpb247XG4gICAgfVxuICB9O1xuICBoYW5kbGUgPSBkYi5mbG93cy5maW5kKHtcbiAgICBfaWQ6IGZsb3dJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDEsXG4gICAgICBcImN1cnJlbnQubW9kaWZpZWRcIjogMVxuICAgIH1cbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5jaGFuZ2VkKFwiZmxvd192ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZsb3dWZXJzaW9uKGlkLCB2ZXJzaW9uSWQpKTtcbiAgICB9XG4gIH0pO1xuICBzZWxmLmFkZGVkKFwiZmxvd192ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZsb3dWZXJzaW9uKGZsb3dJZCwgdmVyc2lvbklkKSk7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaCgnZGlzdHJpYnV0ZV9vcHRpb25hbF9mbG93cycsIGZ1bmN0aW9uKGZsb3dfaWRzKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghZmxvd19pZHMpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICBfaWQ6IHtcbiAgICAgICRpbjogZmxvd19pZHNcbiAgICB9XG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDEsXG4gICAgICBmb3JtOiAxLFxuICAgICAgc3RhdGU6IDEsXG4gICAgICBwZXJtczogMSxcbiAgICAgIHNwYWNlOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcbiAgICAgIGRpc3RyaWJ1dGVfdG9fc2VsZjogMSxcbiAgICAgIGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcbiAgICAgIGNvbXBhbnlfaWQ6IDFcbiAgICB9XG4gIH0pO1xufSk7XG5cbk1ldGVvci5wdWJsaXNoKCdmbG93JywgZnVuY3Rpb24oc3BhY2VJZCwgZmxvd0lkKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFmbG93SWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICBfaWQ6IGZsb3dJZCxcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwcmludF90ZW1wbGF0ZTogMSxcbiAgICAgIGluc3RhbmNlX3RlbXBsYXRlOiAxLFxuICAgICAgZXZlbnRzOiAxLFxuICAgICAgZGlzdHJpYnV0ZV9vcHRpb25hbF91c2VyczogMSxcbiAgICAgIGRpc3RyaWJ1dGVfdG9fc2VsZjogMSxcbiAgICAgIHVwbG9hZF9hZnRlcl9iZWluZ19kaXN0cmlidXRlZDogMSxcbiAgICAgIGRpc3RyaWJ1dGVfZW5kX25vdGlmaWNhdGlvbjogMSxcbiAgICAgIGNvbXBhbnlfaWQ6IDEsXG4gICAgICBhbGxvd19zZWxlY3Rfc3RlcDogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Zsb3dfZmlsZXMnLCBmdW5jdGlvbihzcGFjZUlkLCBmbG93SWQpIHtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWZsb3dJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGNmcy5maWxlcy5maW5kKHtcbiAgICAnbWV0YWRhdGEuc3BhY2UnOiBzcGFjZUlkLFxuICAgICdtZXRhZGF0YS5vYmplY3RfbmFtZSc6ICdmbG93cycsXG4gICAgJ21ldGFkYXRhLnJlY29yZF9pZCc6IGZsb3dJZFxuICB9KTtcbn0pO1xuXG5NZXRlb3IucHVibGlzaENvbXBvc2l0ZSgnZmxvd3NfdGFidWxhcicsIGZ1bmN0aW9uKHRhYmxlTmFtZSwgaWRzLCBmaWVsZHMpIHtcbiAgY2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xuICBjaGVjayhpZHMsIEFycmF5KTtcbiAgY2hlY2soZmllbGRzLCBNYXRjaC5PcHRpb25hbChPYmplY3QpKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgdGhpcy51bmJsb2NrKCk7XG4gIHJldHVybiB7XG4gICAgZmluZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHJldHVybiBkYi5mbG93cy5maW5kKHtcbiAgICAgICAgX2lkOiB7XG4gICAgICAgICAgJGluOiBpZHNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaWVsZHM6IGZpZWxkc1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBmaW5kOiBmdW5jdGlvbihmbG93KSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IGZsb3cuc3BhY2UsXG4gICAgICAgICAgICB1c2VyOiBmbG93LmN1cnJlbnQubW9kaWZpZWRfYnlcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgc3BhY2U6IDEsXG4gICAgICAgICAgICAgIHVzZXI6IDEsXG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmaW5kOiBmdW5jdGlvbihmbG93KSB7XG4gICAgICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICAgICAgcmV0dXJuIGRiLmZvcm1zLmZpbmQoe1xuICAgICAgICAgICAgc3BhY2U6IGZsb3cuc3BhY2UsXG4gICAgICAgICAgICBfaWQ6IGZsb3cuZm9ybVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICBzcGFjZTogMSxcbiAgICAgICAgICAgICAgX2lkOiAxLFxuICAgICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKGZsb3cpIHtcbiAgICAgICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgICAgICByZXR1cm4gZGIuY2F0ZWdvcmllcy5maW5kKHtcbiAgICAgICAgICAgIHNwYWNlOiBmbG93LnNwYWNlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgIHNwYWNlOiAxLFxuICAgICAgICAgICAgICBfaWQ6IDEsXG4gICAgICAgICAgICAgIG5hbWU6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2Zvcm1zJywgKHNwYWNlSWQpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblxyXG5cdHJldHVybiBkYi5mb3Jtcy5maW5kKHtzcGFjZTogc3BhY2VJZH0sIHtmaWVsZHM6IHtuYW1lOiAxLCBjYXRlZ29yeTogMSwgc3RhdGU6IDEsIGRlc2NyaXB0aW9uOiAxLCBpbnN0YW5jZV9zdHlsZTogMX19KVxyXG5cclxuXHJcbk1ldGVvci5wdWJsaXNoICdmb3JtX3ZlcnNpb24nLCAoc3BhY2VJZCwgZm9ybUlkLCB2ZXJzaW9uSWQpIC0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBzcGFjZUlkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVubGVzcyBmb3JtSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHZlcnNpb25JZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHJcblx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdGdldEZvcm1WZXJzaW9uID0gKGlkICwgdmVyc2lvbklkKS0+XHJcblx0XHRmb3JtID0gZGIuZm9ybXMuZmluZE9uZSh7X2lkIDogaWR9KTtcclxuXHRcdGlmICFmb3JtXHJcblx0XHRcdHJldHVybiB7fVxyXG5cdFx0Zm9ybV92ZXJzaW9uID0gZm9ybS5jdXJyZW50XHJcblx0XHRmb3JtX3ZlcnNpb24ubGF0ZXN0ID0gdHJ1ZVxyXG5cdFx0aWYgZm9ybV92ZXJzaW9uLl9pZCAhPSB2ZXJzaW9uSWRcclxuXHRcdFx0Zm9ybV92ZXJzaW9uID0gZm9ybS5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZClcclxuXHRcdFx0Zm9ybV92ZXJzaW9uLmxhdGVzdCA9IGZhbHNlXHJcblx0XHRyZXR1cm4gZm9ybV92ZXJzaW9uXHJcblxyXG5cdGhhbmRsZSA9IGRiLmZvcm1zLmZpbmQoe19pZDogZm9ybUlkfSwge2ZpZWxkczoge19pZDogMSwgXCJjdXJyZW50Lm1vZGlmaWVkXCI6IDF9fSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0Y2hhbmdlZDogKGlkKS0+XHJcblx0XHRcdHNlbGYuY2hhbmdlZChcImZvcm1fdmVyc2lvbnNcIiwgdmVyc2lvbklkLCBnZXRGb3JtVmVyc2lvbihpZCwgdmVyc2lvbklkKSk7XHJcblx0fVxyXG5cclxuXHRzZWxmLmFkZGVkKFwiZm9ybV92ZXJzaW9uc1wiLCB2ZXJzaW9uSWQsIGdldEZvcm1WZXJzaW9uKGZvcm1JZCwgdmVyc2lvbklkKSk7XHJcblx0c2VsZi5yZWFkeSgpO1xyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKCkiLCJNZXRlb3IucHVibGlzaCgnZm9ybXMnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghc3BhY2VJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgcmV0dXJuIGRiLmZvcm1zLmZpbmQoe1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIG5hbWU6IDEsXG4gICAgICBjYXRlZ29yeTogMSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgZGVzY3JpcHRpb246IDEsXG4gICAgICBpbnN0YW5jZV9zdHlsZTogMVxuICAgIH1cbiAgfSk7XG59KTtcblxuTWV0ZW9yLnB1Ymxpc2goJ2Zvcm1fdmVyc2lvbicsIGZ1bmN0aW9uKHNwYWNlSWQsIGZvcm1JZCwgdmVyc2lvbklkKSB7XG4gIHZhciBnZXRGb3JtVmVyc2lvbiwgaGFuZGxlLCBzZWxmO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXNwYWNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghZm9ybUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIXZlcnNpb25JZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIGdldEZvcm1WZXJzaW9uID0gZnVuY3Rpb24oaWQsIHZlcnNpb25JZCkge1xuICAgIHZhciBmb3JtLCBmb3JtX3ZlcnNpb247XG4gICAgZm9ybSA9IGRiLmZvcm1zLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpZFxuICAgIH0pO1xuICAgIGlmICghZm9ybSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBmb3JtX3ZlcnNpb24gPSBmb3JtLmN1cnJlbnQ7XG4gICAgZm9ybV92ZXJzaW9uLmxhdGVzdCA9IHRydWU7XG4gICAgaWYgKGZvcm1fdmVyc2lvbi5faWQgIT09IHZlcnNpb25JZCkge1xuICAgICAgZm9ybV92ZXJzaW9uID0gZm9ybS5oaXN0b3J5cy5maW5kUHJvcGVydHlCeVBLKFwiX2lkXCIsIHZlcnNpb25JZCk7XG4gICAgICBmb3JtX3ZlcnNpb24ubGF0ZXN0ID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmb3JtX3ZlcnNpb247XG4gIH07XG4gIGhhbmRsZSA9IGRiLmZvcm1zLmZpbmQoe1xuICAgIF9pZDogZm9ybUlkXG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMSxcbiAgICAgIFwiY3VycmVudC5tb2RpZmllZFwiOiAxXG4gICAgfVxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBzZWxmLmNoYW5nZWQoXCJmb3JtX3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rm9ybVZlcnNpb24oaWQsIHZlcnNpb25JZCkpO1xuICAgIH1cbiAgfSk7XG4gIHNlbGYuYWRkZWQoXCJmb3JtX3ZlcnNpb25zXCIsIHZlcnNpb25JZCwgZ2V0Rm9ybVZlcnNpb24oZm9ybUlkLCB2ZXJzaW9uSWQpKTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJNZXRlb3IucHVibGlzaCAnaW5zdGFuY2VfZGF0YScsIChpbnN0YW5jZUlkLCBib3gpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGluc3RhbmNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdG1pbmlBcHByb3ZlRmllbGRzID0gWydfaWQnLCAnaXNfZmluaXNoZWQnLCAndXNlcicsICdoYW5kbGVyJywgJ2hhbmRsZXJfbmFtZScsICd0eXBlJywgJ3N0YXJ0X2RhdGUnLCAnZGVzY3JpcHRpb24nLFxyXG5cdFx0J2lzX3JlYWQnLCAnanVkZ2UnLCAnZmluaXNoX2RhdGUnLCAnZnJvbV91c2VyX25hbWUnLCAnZnJvbV91c2VyJywgJ2NjX2Rlc2NyaXB0aW9uJywgJ2F1dG9fc3VibWl0dGVkJ11cclxuXHJcblx0dHJpZ2dlckNoYW5nZUZpZWxkcyA9IFsnZm9ybV92ZXJzaW9uJywgJ2Zsb3dfdmVyc2lvbicsICdyZWxhdGVkX2luc3RhbmNlcycsICdfbXlfYXBwcm92ZV9yZWFkX2RhdGVzJ11cclxuXHJcblx0dHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlcyA9IHt9XHJcblxyXG5cdGluc3RhbmNlX2ZpZWxkc18wID0ge1xyXG5cdFx0XCJyZWNvcmRfc3luY2VkXCI6IDAsXHJcblxyXG4jXHRcdFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJfb3JnYW5pemF0aW9uX2Z1bGxuYW1lXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvbl9uYW1lXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvblwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuY29zdF90aW1lXCI6IDAsXHJcbiNcdFx0XCJ0cmFjZXMuYXBwcm92ZXMucmVhZF9kYXRlXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5pc19lcnJvclwiOiAwLFxyXG5cdFx0IyBcInRyYWNlcy5hcHByb3Zlcy51c2VyX25hbWVcIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmRlYWRsaW5lXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5yZW1pbmRfZGF0ZVwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMucmVtaW5kZWRfY291bnRcIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLm1vZGlmaWVkX2J5XCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5tb2RpZmllZFwiOiAwLFxyXG5cdFx0XCJ0cmFjZXMuYXBwcm92ZXMuZ2VvbG9jYXRpb25cIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLmNjX3VzZXJzXCI6IDAsXHJcblx0XHRcInRyYWNlcy5hcHByb3Zlcy5mcm9tX2FwcHJvdmVfaWRcIjogMCxcclxuXHRcdFwidHJhY2VzLmFwcHJvdmVzLnZhbHVlc19oaXN0b3J5XCI6IDBcclxuXHR9XHJcblxyXG5cdGdldE15YXBwcm92ZU1vZGlmaWVkID0gKHRyYWNlcyktPlxyXG5cdFx0bXlBcHByb3ZlTW9kaWZpZWRzID0gbmV3IEFycmF5KClcclxuXHJcblx0XHR0cmFjZXM/LmZvckVhY2ggKHRyYWNlKS0+XHJcblx0XHRcdHRyYWNlPy5hcHByb3Zlcz8uZm9yRWFjaCAoYXBwcm92ZSktPlxyXG5cdFx0XHRcdGlmIChhcHByb3ZlLnVzZXIgPT0gc2VsZi51c2VySWQgfHwgYXBwcm92ZS5oYW5kbGVyID09IHNlbGYudXNlcklkKVxyXG5cdFx0XHRcdCMgJiYgIWFwcHJvdmUuaXNfZmluaXNoZWRcclxuI1x0XHRcdFx0XHRjb25zb2xlLmxvZyhcImFwcHJvdmVcIiwgYXBwcm92ZS5faWQsIGFwcHJvdmUucmVhZF9kYXRlKVxyXG5cclxuXHRcdFx0XHRcdG15QXBwcm92ZU1vZGlmaWVkcy5wdXNoKGFwcHJvdmUucmVhZF9kYXRlKVxyXG5cclxuXHRcdHJldHVybiBteUFwcHJvdmVNb2RpZmllZHNcclxuXHJcblxyXG5cdGdldE1pbmlJbnN0YW5jZSA9IChfaW5zdGFuY2VJZCktPlxyXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBfaW5zdGFuY2VJZH0sIHtmaWVsZHM6IGluc3RhbmNlX2ZpZWxkc18wfSlcclxuXHJcblx0XHRpZiBpbnN0YW5jZVxyXG5cclxuXHRcdFx0dHJpZ2dlckNoYW5nZUZpZWxkcy5mb3JFYWNoIChrZXkpLT5cclxuXHRcdFx0XHRpZiBrZXkgPT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnXHJcblx0XHRcdFx0XHR0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0gPSBnZXRNeWFwcHJvdmVNb2RpZmllZChpbnN0YW5jZS50cmFjZXMpXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldID0gaW5zdGFuY2Vba2V5XVxyXG5cclxuI1x0XHRcdGhhc09waW5pb25GaWVsZCA9IEluc3RhbmNlU2lnblRleHQuaW5jbHVkZXNPcGluaW9uRmllbGQoaW5zdGFuY2UuZm9ybSwgaW5zdGFuY2UuZm9ybV92ZXJzaW9uKVxyXG5cclxuXHRcdFx0c2hvd19tb2RhbF90cmFjZXNfbGlzdCA9IGRiLnNwYWNlX3NldHRpbmdzLmZpbmRPbmUoeyBzcGFjZTogaW5zdGFuY2Uuc3BhY2UsIGtleTogXCJzaG93X21vZGFsX3RyYWNlc19saXN0XCIgfSwgeyBmaWVsZHM6IHsgdmFsdWVzOiAxIH0gfSk/LnZhbHVlcyB8fCBmYWxzZVxyXG5cclxuXHRcdFx0aWYgc2hvd19tb2RhbF90cmFjZXNfbGlzdFxyXG5cclxuXHRcdFx0XHR0cmFjZXMgPSBuZXcgQXJyYXkoKTtcclxuXHJcblx0XHRcdFx0aW5zdGFuY2U/LnRyYWNlcz8uZm9yRWFjaCAodHJhY2UpLT5cclxuXHRcdFx0XHRcdF90cmFjZSA9IF8uY2xvbmUodHJhY2UpXHJcblxyXG5cdFx0XHRcdFx0YXBwcm92ZXMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRcdFx0XHRcdHRyYWNlPy5hcHByb3Zlcz8uZm9yRWFjaCAoYXBwcm92ZSktPlxyXG5cdFx0XHRcdFx0XHRpZiBhcHByb3ZlLnR5cGUgIT0gJ2NjJyB8fCBhcHByb3ZlLnVzZXIgPT0gc2VsZi51c2VySWQgfHwgYXBwcm92ZS5oYW5kbGVyID09IHNlbGYudXNlcklkIHx8ICghXy5pc0VtcHR5KGFwcHJvdmUuc2lnbl9maWVsZF9jb2RlKSlcclxuXHRcdFx0XHRcdFx0XHRhcHByb3Zlcy5wdXNoKGFwcHJvdmUpXHJcblxyXG5cdFx0XHRcdFx0X3RyYWNlLmFwcHJvdmVzID0gYXBwcm92ZXNcclxuXHJcblx0XHRcdFx0XHR0cmFjZXMucHVzaChfdHJhY2UpXHJcblxyXG5cdFx0XHRcdGluc3RhbmNlLnRyYWNlcyA9IHRyYWNlcztcclxuXHJcblx0XHRyZXR1cm4gaW5zdGFuY2VcclxuXHJcblxyXG5cdG5lZWRDaGFuZ2UgPSAoY2hhbmdlRmllbGRzKS0+XHJcblx0XHRpZiBjaGFuZ2VGaWVsZHNcclxuXHJcblx0XHRcdF9jaGFuZ2UgPSBmYWxzZVxyXG5cclxuXHRcdFx0X3JldiA9IF8uZmluZCB0cmlnZ2VyQ2hhbmdlRmllbGRzLCAoa2V5KS0+XHJcblx0XHRcdFx0X2tleSA9IGtleVxyXG5cclxuXHRcdFx0XHRpZiBrZXkgPT0gJ19teV9hcHByb3ZlX3JlYWRfZGF0ZXMnXHJcblx0XHRcdFx0XHRfa2V5ID0gJ3RyYWNlcydcclxuXHJcblx0XHRcdFx0aWYgXy5oYXMoY2hhbmdlRmllbGRzLCBfa2V5KVxyXG5cclxuXHRcdFx0XHRcdGlmIGtleSA9PSAnX215X2FwcHJvdmVfcmVhZF9kYXRlcydcclxuXHJcblx0XHRcdFx0XHRcdF9teV9hcHByb3ZlX21vZGlmaWVkcyA9IGdldE15YXBwcm92ZU1vZGlmaWVkKGNoYW5nZUZpZWxkcy50cmFjZXMpXHJcblxyXG4jXHRcdFx0XHRcdFx0Y29uc29sZS5sb2codHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldLCBfbXlfYXBwcm92ZV9tb2RpZmllZHMpXHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gIV8uaXNFcXVhbCh0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0sIF9teV9hcHByb3ZlX21vZGlmaWVkcylcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0cmV0dXJuICFfLmlzRXF1YWwodHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldLCBjaGFuZ2VGaWVsZHNba2V5XSlcclxuXHJcblx0XHRcdGlmIF9yZXZcclxuXHRcdFx0XHRfY2hhbmdlID0gdHJ1ZVxyXG5cclxuI1x0XHRcdGNvbnNvbGUubG9nKF9yZXYsIF9jaGFuZ2UpXHJcblxyXG5cdFx0XHRyZXR1cm4gX2NoYW5nZVxyXG5cclxuXHRcdHJldHVybiB0cnVlXHJcblx0I+atpOWkhOS4jeiDvea3u+WKoGZpZWxkc+mZkOWItu+8jOWQpuWImeS8muWvvOiHtOaVsOaNruS4jeWunuaXtlxyXG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IGluc3RhbmNlSWR9KS5vYnNlcnZlQ2hhbmdlcyB7XHJcblx0XHRjaGFuZ2VkOiAoaWQsIGZpZWxkcyktPlxyXG5cdFx0XHRpZihib3ggIT0gJ2luYm94JyB8fCBuZWVkQ2hhbmdlKGZpZWxkcykpXHJcblx0XHRcdFx0c2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBnZXRNaW5pSW5zdGFuY2UoaWQpKTtcclxuXHRcdHJlbW92ZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLnJlbW92ZWQoXCJpbnN0YW5jZXNcIiwgaWQpO1xyXG5cdH1cclxuXHJcblx0aW5zdGFuY2UgPSBnZXRNaW5pSW5zdGFuY2UoaW5zdGFuY2VJZClcclxuXHJcblx0c2VsZi5hZGRlZChcImluc3RhbmNlc1wiLCBpbnN0YW5jZT8uX2lkLCBpbnN0YW5jZSk7XHJcblxyXG5cdHNlbGYucmVhZHkoKTtcclxuXHJcblx0c2VsZi5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKVxyXG5cclxuXHJcbk1ldGVvci5wdWJsaXNoICdpbnN0YW5jZV90cmFjZXMnLCAoaW5zdGFuY2VJZCktPlxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHR1bmxlc3MgaW5zdGFuY2VJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRzZWxmID0gdGhpc1xyXG5cclxuXHRnZXRJbnN0YW5jZVRyYWNlcyA9IChfaW5zSWQpLT5cclxuXHRcdHJldHVybiBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBfaW5zSWR9LCB7ZmllbGRzOiB7X2lkOiAxLCB0cmFjZXM6IDF9fSlcclxuXHJcblxyXG5cdGhhbmRsZSA9ICBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiBpbnN0YW5jZUlkfSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0Y2hhbmdlZDogKGlkKS0+XHJcblx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlX3RyYWNlc1wiLCBpbnN0YW5jZUlkLCBnZXRJbnN0YW5jZVRyYWNlcyhpbnN0YW5jZUlkKSk7XHJcblx0fVxyXG5cclxuXHRzZWxmLmFkZGVkKFwiaW5zdGFuY2VfdHJhY2VzXCIsIGluc3RhbmNlSWQsIGdldEluc3RhbmNlVHJhY2VzKGluc3RhbmNlSWQpKTtcclxuXHJcblx0c2VsZi5yZWFkeSgpO1xyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKCkiLCJNZXRlb3IucHVibGlzaCgnaW5zdGFuY2VfZGF0YScsIGZ1bmN0aW9uKGluc3RhbmNlSWQsIGJveCkge1xuICB2YXIgZ2V0TWluaUluc3RhbmNlLCBnZXRNeWFwcHJvdmVNb2RpZmllZCwgaGFuZGxlLCBpbnN0YW5jZSwgaW5zdGFuY2VfZmllbGRzXzAsIG1pbmlBcHByb3ZlRmllbGRzLCBuZWVkQ2hhbmdlLCBzZWxmLCB0cmlnZ2VyQ2hhbmdlRmllbGRzLCB0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWluc3RhbmNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHNlbGYgPSB0aGlzO1xuICBtaW5pQXBwcm92ZUZpZWxkcyA9IFsnX2lkJywgJ2lzX2ZpbmlzaGVkJywgJ3VzZXInLCAnaGFuZGxlcicsICdoYW5kbGVyX25hbWUnLCAndHlwZScsICdzdGFydF9kYXRlJywgJ2Rlc2NyaXB0aW9uJywgJ2lzX3JlYWQnLCAnanVkZ2UnLCAnZmluaXNoX2RhdGUnLCAnZnJvbV91c2VyX25hbWUnLCAnZnJvbV91c2VyJywgJ2NjX2Rlc2NyaXB0aW9uJywgJ2F1dG9fc3VibWl0dGVkJ107XG4gIHRyaWdnZXJDaGFuZ2VGaWVsZHMgPSBbJ2Zvcm1fdmVyc2lvbicsICdmbG93X3ZlcnNpb24nLCAncmVsYXRlZF9pbnN0YW5jZXMnLCAnX215X2FwcHJvdmVfcmVhZF9kYXRlcyddO1xuICB0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzID0ge307XG4gIGluc3RhbmNlX2ZpZWxkc18wID0ge1xuICAgIFwicmVjb3JkX3N5bmNlZFwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmhhbmRsZXJfb3JnYW5pemF0aW9uX25hbWVcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5oYW5kbGVyX29yZ2FuaXphdGlvblwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmNvc3RfdGltZVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmlzX2Vycm9yXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuZGVhZGxpbmVcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5yZW1pbmRfZGF0ZVwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLnJlbWluZGVkX2NvdW50XCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMubW9kaWZpZWRfYnlcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5tb2RpZmllZFwiOiAwLFxuICAgIFwidHJhY2VzLmFwcHJvdmVzLmdlb2xvY2F0aW9uXCI6IDAsXG4gICAgXCJ0cmFjZXMuYXBwcm92ZXMuY2NfdXNlcnNcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy5mcm9tX2FwcHJvdmVfaWRcIjogMCxcbiAgICBcInRyYWNlcy5hcHByb3Zlcy52YWx1ZXNfaGlzdG9yeVwiOiAwXG4gIH07XG4gIGdldE15YXBwcm92ZU1vZGlmaWVkID0gZnVuY3Rpb24odHJhY2VzKSB7XG4gICAgdmFyIG15QXBwcm92ZU1vZGlmaWVkcztcbiAgICBteUFwcHJvdmVNb2RpZmllZHMgPSBuZXcgQXJyYXkoKTtcbiAgICBpZiAodHJhY2VzICE9IG51bGwpIHtcbiAgICAgIHRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgIHZhciByZWY7XG4gICAgICAgIHJldHVybiB0cmFjZSAhPSBudWxsID8gKHJlZiA9IHRyYWNlLmFwcHJvdmVzKSAhPSBudWxsID8gcmVmLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgIGlmIChhcHByb3ZlLnVzZXIgPT09IHNlbGYudXNlcklkIHx8IGFwcHJvdmUuaGFuZGxlciA9PT0gc2VsZi51c2VySWQpIHtcbiAgICAgICAgICAgIHJldHVybiBteUFwcHJvdmVNb2RpZmllZHMucHVzaChhcHByb3ZlLnJlYWRfZGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbXlBcHByb3ZlTW9kaWZpZWRzO1xuICB9O1xuICBnZXRNaW5pSW5zdGFuY2UgPSBmdW5jdGlvbihfaW5zdGFuY2VJZCkge1xuICAgIHZhciBpbnN0YW5jZSwgcmVmLCByZWYxLCBzaG93X21vZGFsX3RyYWNlc19saXN0LCB0cmFjZXM7XG4gICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IF9pbnN0YW5jZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiBpbnN0YW5jZV9maWVsZHNfMFxuICAgIH0pO1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgdHJpZ2dlckNoYW5nZUZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09PSAnX215X2FwcHJvdmVfcmVhZF9kYXRlcycpIHtcbiAgICAgICAgICByZXR1cm4gdHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldID0gZ2V0TXlhcHByb3ZlTW9kaWZpZWQoaW5zdGFuY2UudHJhY2VzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldID0gaW5zdGFuY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzaG93X21vZGFsX3RyYWNlc19saXN0ID0gKChyZWYgPSBkYi5zcGFjZV9zZXR0aW5ncy5maW5kT25lKHtcbiAgICAgICAgc3BhY2U6IGluc3RhbmNlLnNwYWNlLFxuICAgICAgICBrZXk6IFwic2hvd19tb2RhbF90cmFjZXNfbGlzdFwiXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIHZhbHVlczogMVxuICAgICAgICB9XG4gICAgICB9KSkgIT0gbnVsbCA/IHJlZi52YWx1ZXMgOiB2b2lkIDApIHx8IGZhbHNlO1xuICAgICAgaWYgKHNob3dfbW9kYWxfdHJhY2VzX2xpc3QpIHtcbiAgICAgICAgdHJhY2VzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGlmIChpbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKChyZWYxID0gaW5zdGFuY2UudHJhY2VzKSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZWYxLmZvckVhY2goZnVuY3Rpb24odHJhY2UpIHtcbiAgICAgICAgICAgICAgdmFyIF90cmFjZSwgYXBwcm92ZXMsIHJlZjI7XG4gICAgICAgICAgICAgIF90cmFjZSA9IF8uY2xvbmUodHJhY2UpO1xuICAgICAgICAgICAgICBhcHByb3ZlcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgICBpZiAodHJhY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgocmVmMiA9IHRyYWNlLmFwcHJvdmVzKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICByZWYyLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwcm92ZS50eXBlICE9PSAnY2MnIHx8IGFwcHJvdmUudXNlciA9PT0gc2VsZi51c2VySWQgfHwgYXBwcm92ZS5oYW5kbGVyID09PSBzZWxmLnVzZXJJZCB8fCAoIV8uaXNFbXB0eShhcHByb3ZlLnNpZ25fZmllbGRfY29kZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwcHJvdmVzLnB1c2goYXBwcm92ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBfdHJhY2UuYXBwcm92ZXMgPSBhcHByb3ZlcztcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNlcy5wdXNoKF90cmFjZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UudHJhY2VzID0gdHJhY2VzO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG4gIG5lZWRDaGFuZ2UgPSBmdW5jdGlvbihjaGFuZ2VGaWVsZHMpIHtcbiAgICB2YXIgX2NoYW5nZSwgX3JldjtcbiAgICBpZiAoY2hhbmdlRmllbGRzKSB7XG4gICAgICBfY2hhbmdlID0gZmFsc2U7XG4gICAgICBfcmV2ID0gXy5maW5kKHRyaWdnZXJDaGFuZ2VGaWVsZHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICB2YXIgX2tleSwgX215X2FwcHJvdmVfbW9kaWZpZWRzO1xuICAgICAgICBfa2V5ID0ga2V5O1xuICAgICAgICBpZiAoa2V5ID09PSAnX215X2FwcHJvdmVfcmVhZF9kYXRlcycpIHtcbiAgICAgICAgICBfa2V5ID0gJ3RyYWNlcyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8uaGFzKGNoYW5nZUZpZWxkcywgX2tleSkpIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAnX215X2FwcHJvdmVfcmVhZF9kYXRlcycpIHtcbiAgICAgICAgICAgIF9teV9hcHByb3ZlX21vZGlmaWVkcyA9IGdldE15YXBwcm92ZU1vZGlmaWVkKGNoYW5nZUZpZWxkcy50cmFjZXMpO1xuICAgICAgICAgICAgcmV0dXJuICFfLmlzRXF1YWwodHJpZ2dlckNoYW5nZUZpZWxkc1ZhbHVlc1trZXldLCBfbXlfYXBwcm92ZV9tb2RpZmllZHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gIV8uaXNFcXVhbCh0cmlnZ2VyQ2hhbmdlRmllbGRzVmFsdWVzW2tleV0sIGNoYW5nZUZpZWxkc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKF9yZXYpIHtcbiAgICAgICAgX2NoYW5nZSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NoYW5nZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICBfaWQ6IGluc3RhbmNlSWRcbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkLCBmaWVsZHMpIHtcbiAgICAgIGlmIChib3ggIT09ICdpbmJveCcgfHwgbmVlZENoYW5nZShmaWVsZHMpKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGdldE1pbmlJbnN0YW5jZShpZCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlZDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBzZWxmLnJlbW92ZWQoXCJpbnN0YW5jZXNcIiwgaWQpO1xuICAgIH1cbiAgfSk7XG4gIGluc3RhbmNlID0gZ2V0TWluaUluc3RhbmNlKGluc3RhbmNlSWQpO1xuICBzZWxmLmFkZGVkKFwiaW5zdGFuY2VzXCIsIGluc3RhbmNlICE9IG51bGwgPyBpbnN0YW5jZS5faWQgOiB2b2lkIDAsIGluc3RhbmNlKTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG5cbk1ldGVvci5wdWJsaXNoKCdpbnN0YW5jZV90cmFjZXMnLCBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XG4gIHZhciBnZXRJbnN0YW5jZVRyYWNlcywgaGFuZGxlLCBzZWxmO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWluc3RhbmNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHNlbGYgPSB0aGlzO1xuICBnZXRJbnN0YW5jZVRyYWNlcyA9IGZ1bmN0aW9uKF9pbnNJZCkge1xuICAgIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IF9pbnNJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBfaWQ6IDEsXG4gICAgICAgIHRyYWNlczogMVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgX2lkOiBpbnN0YW5jZUlkXG4gIH0pLm9ic2VydmVDaGFuZ2VzKHtcbiAgICBjaGFuZ2VkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImluc3RhbmNlX3RyYWNlc1wiLCBpbnN0YW5jZUlkLCBnZXRJbnN0YW5jZVRyYWNlcyhpbnN0YW5jZUlkKSk7XG4gICAgfVxuICB9KTtcbiAgc2VsZi5hZGRlZChcImluc3RhbmNlX3RyYWNlc1wiLCBpbnN0YW5jZUlkLCBnZXRJbnN0YW5jZVRyYWNlcyhpbnN0YW5jZUlkKSk7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuIiwiXHJcblx0TWV0ZW9yLnB1Ymxpc2ggJ2luc3RhbmNlc19saXN0JywgKHNwYWNlSWQsIGJveCwgZmxvd0lkKS0+XHJcblxyXG5cdFx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHRcdFxyXG5cdFx0dW5sZXNzIHNwYWNlSWRcclxuXHRcdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRcdHF1ZXJ5ID0ge3NwYWNlOiBzcGFjZUlkfVxyXG5cdFx0aWYgYm94ID09IFwiaW5ib3hcIlxyXG5cdFx0XHRxdWVyeS5pbmJveF91c2VycyA9IHRoaXMudXNlcklkO1xyXG5cdFx0ZWxzZSBpZiBib3ggPT0gXCJvdXRib3hcIlxyXG5cdFx0XHRxdWVyeS5vdXRib3hfdXNlcnMgPSB0aGlzLnVzZXJJZDtcclxuXHRcdGVsc2UgaWYgYm94ID09IFwiZHJhZnRcIlxyXG5cdFx0XHRxdWVyeS5zdWJtaXR0ZXIgPSB0aGlzLnVzZXJJZDtcclxuXHRcdFx0cXVlcnkuc3RhdGUgPSBcImRyYWZ0XCJcclxuXHRcdGVsc2UgaWYgYm94ID09IFwicGVuZGluZ1wiXHJcblx0XHRcdHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xyXG5cdFx0XHRxdWVyeS5zdGF0ZSA9IFwicGVuZGluZ1wiXHJcblx0XHRlbHNlIGlmIGJveCA9PSBcImNvbXBsZXRlZFwiXHJcblx0XHRcdHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xyXG5cdFx0XHRxdWVyeS5zdGF0ZSA9IFwiY29tcGxldGVkXCJcclxuXHRcdGVsc2UgaWYgYm94ID09IFwibW9uaXRvclwiXHJcblx0XHRcdHF1ZXJ5LmZsb3cgPSBmbG93SWQ7XHJcblx0XHRcdHF1ZXJ5LnN0YXRlID0geyRpbjogW1wicGVuZGluZ1wiLFwiY29tcGxldGVkXCJdfTtcclxuXHRcdGVsc2VcclxuXHRcdFx0cXVlcnkuc3RhdGUgPSBcIm5vbmVcIlxyXG5cclxuXHRcdHJldHVybiBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge2ZpZWxkczoge25hbWU6MSwgY3JlYXRlZDoxLCBmb3JtOjEsIGZsb3c6IDEsIHNwYWNlOjEsIG1vZGlmaWVkOjEsIGFwcGxpY2FudDogMSwgaXNfYXJjaGl2ZWQ6MSwgZm9ybV92ZXJzaW9uOiAxLCBmbG93X3ZlcnNpb246IDF9fSlcclxuXHJcbiIsIk1ldGVvci5wdWJsaXNoKCdpbnN0YW5jZXNfbGlzdCcsIGZ1bmN0aW9uKHNwYWNlSWQsIGJveCwgZmxvd0lkKSB7XG4gIHZhciBxdWVyeTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCFzcGFjZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBxdWVyeSA9IHtcbiAgICBzcGFjZTogc3BhY2VJZFxuICB9O1xuICBpZiAoYm94ID09PSBcImluYm94XCIpIHtcbiAgICBxdWVyeS5pbmJveF91c2VycyA9IHRoaXMudXNlcklkO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJvdXRib3hcIikge1xuICAgIHF1ZXJ5Lm91dGJveF91c2VycyA9IHRoaXMudXNlcklkO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJkcmFmdFwiKSB7XG4gICAgcXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XG4gICAgcXVlcnkuc3RhdGUgPSBcImRyYWZ0XCI7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcInBlbmRpbmdcIikge1xuICAgIHF1ZXJ5LnN1Ym1pdHRlciA9IHRoaXMudXNlcklkO1xuICAgIHF1ZXJ5LnN0YXRlID0gXCJwZW5kaW5nXCI7XG4gIH0gZWxzZSBpZiAoYm94ID09PSBcImNvbXBsZXRlZFwiKSB7XG4gICAgcXVlcnkuc3VibWl0dGVyID0gdGhpcy51c2VySWQ7XG4gICAgcXVlcnkuc3RhdGUgPSBcImNvbXBsZXRlZFwiO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJtb25pdG9yXCIpIHtcbiAgICBxdWVyeS5mbG93ID0gZmxvd0lkO1xuICAgIHF1ZXJ5LnN0YXRlID0ge1xuICAgICAgJGluOiBbXCJwZW5kaW5nXCIsIFwiY29tcGxldGVkXCJdXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBxdWVyeS5zdGF0ZSA9IFwibm9uZVwiO1xuICB9XG4gIHJldHVybiBkYi5pbnN0YW5jZXMuZmluZChxdWVyeSwge1xuICAgIGZpZWxkczoge1xuICAgICAgbmFtZTogMSxcbiAgICAgIGNyZWF0ZWQ6IDEsXG4gICAgICBmb3JtOiAxLFxuICAgICAgZmxvdzogMSxcbiAgICAgIHNwYWNlOiAxLFxuICAgICAgbW9kaWZpZWQ6IDEsXG4gICAgICBhcHBsaWNhbnQ6IDEsXG4gICAgICBpc19hcmNoaXZlZDogMSxcbiAgICAgIGZvcm1fdmVyc2lvbjogMSxcbiAgICAgIGZsb3dfdmVyc2lvbjogMVxuICAgIH1cbiAgfSk7XG59KTtcbiIsImxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGUgPSAoaW5zdGFuY2VpZCwgdXNlcklkLCBkYXRhTWFwLCBjYWxsYmFjayktPlxyXG5cdG9wZXJhdGlvbiA9IFt7XHJcblx0XHRcIiRtYXRjaFwiOiB7XHJcblx0XHRcdFwiX2lkXCI6IGluc3RhbmNlaWRcclxuXHRcdH1cclxuXHR9LCB7XCIkcHJvamVjdFwiOiB7XCJuYW1lXCI6IDEsIFwiX2FwcHJvdmVcIjogXCIkdHJhY2VzLmFwcHJvdmVzXCJ9fSwge1wiJHVud2luZFwiOiBcIiRfYXBwcm92ZVwifSwge1wiJHVud2luZFwiOiBcIiRfYXBwcm92ZVwifSxcclxuXHRcdHtcIiRtYXRjaFwiOiB7XCJfYXBwcm92ZS5pc19maW5pc2hlZFwiOiB0cnVlLCAkb3I6W3tcIl9hcHByb3ZlLmhhbmRsZXJcIjogdXNlcklkfSx7XCJfYXBwcm92ZS51c2VyXCI6IHVzZXJJZH1dfX0sXHJcblx0XHR7XCIkZ3JvdXBcIjoge1wiX2lkXCI6IFwiJF9pZFwiLCBcImZpbmlzaF9kYXRlXCI6IHtcIiRsYXN0XCI6IFwiJF9hcHByb3ZlLmZpbmlzaF9kYXRlXCJ9fX1cclxuXHRdXHJcblxyXG5cdGRiLmluc3RhbmNlcy5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKG9wZXJhdGlvbikudG9BcnJheSAoZXJyLCBkYXRhKS0+XHJcblx0XHRpZiBlcnJcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycilcclxuXHJcblx0XHRkYXRhLmZvckVhY2ggKGRvYykgLT5cclxuXHRcdFx0ZGF0YU1hcC5wdXNoIGRvY1xyXG5cclxuXHRcdGlmIGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaylcclxuXHRcdFx0Y2FsbGJhY2soKVxyXG5cdFx0cmV0dXJuXHJcblxyXG5hc3luY0xhc3RGaW5pc2hlZEFwcHJvdmUgPSBNZXRlb3Iud3JhcEFzeW5jKGxhc3RGaW5pc2hlZEFwcHJvdmVBZ2dyZWdhdGUpXHJcblxyXG5NZXRlb3IucHVibGlzaCBcImluc3RhbmNlX3RhYnVsYXJcIiwgKHRhYmxlTmFtZSwgaWRzLCBmaWVsZHMpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0Y2hlY2sodGFibGVOYW1lLCBTdHJpbmcpO1xyXG5cclxuXHRjaGVjayhpZHMsIEFycmF5KTtcclxuXHJcblx0Y2hlY2soZmllbGRzLCBNYXRjaC5PcHRpb25hbChPYmplY3QpKVxyXG5cclxuXHRmaWVsZHMuY2NfdXNlcnMgPSAxXHJcblxyXG5cdHNlbGYgPSB0aGlzO1xyXG5cclxuXHRnZXRNeUxhc3RGaW5pc2hlZEFwcHJvdmUgPSAodXNlcklkLCBpbnN0YW5jZUlkKS0+XHJcblx0XHRkYXRhID0gW11cclxuXHRcdGFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZShpbnN0YW5jZUlkLCB1c2VySWQsIGRhdGEpXHJcblx0XHRpZiBkYXRhLmxlbmd0aCA+IDBcclxuXHRcdFx0cmV0dXJuIGRhdGFbMF1cclxuXHJcblxyXG5cdGdldE15QXBwcm92ZSA9ICh1c2VySWQsIGluc3RhbmNlSWQpLT5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaW5zdGFuY2VJZH0sIHtmaWVsZHM6IHt0cmFjZXM6IDF9fSlcclxuXHRcdG15QXBwcm92ZSA9IG51bGxcclxuXHJcblx0XHRpZiAhaW5zdGFuY2VcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0aWYgIWluc3RhbmNlLnRyYWNlcyB8fCBpbnN0YW5jZS50cmFjZXMubGVuZ3RoIDwgMVxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRub3RGaW5pc2hlZFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKVxyXG5cclxuXHRcdGlmIG5vdEZpbmlzaGVkVHJhY2VzLmxlbmd0aCA+IDBcclxuXHRcdFx0YXBwcm92ZXMgPSBub3RGaW5pc2hlZFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKS5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgdXNlcklkKTtcclxuXHJcblx0XHRcdGlmIGFwcHJvdmVzLmxlbmd0aCA+IDBcclxuXHRcdFx0XHRhcHByb3ZlID0gYXBwcm92ZXNbMF1cclxuXHRcdFx0XHRteUFwcHJvdmUgPSB7XHJcblx0XHRcdFx0XHRpZDogYXBwcm92ZS5faWQsXHJcblx0XHRcdFx0XHRpbnN0YW5jZTogYXBwcm92ZS5pbnN0YW5jZSxcclxuXHRcdFx0XHRcdHRyYWNlOiBhcHByb3ZlLnRyYWNlLFxyXG5cdFx0XHRcdFx0aXNfcmVhZDogYXBwcm92ZS5pc19yZWFkLFxyXG5cdFx0XHRcdFx0c3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlXHJcblx0XHRcdFx0XHRhZ2VudDogYXBwcm92ZS5hZ2VudFxyXG5cdFx0XHRcdFx0dXNlcl9uYW1lOiBhcHByb3ZlLnVzZXJfbmFtZVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRpZiAhbXlBcHByb3ZlXHJcblx0XHRcdGlzX3JlYWQgPSBmYWxzZVxyXG5cdFx0XHRpbnN0YW5jZS50cmFjZXMuZm9yRWFjaCAodHJhY2UpIC0+XHJcblx0XHRcdFx0dHJhY2U/LmFwcHJvdmVzPy5mb3JFYWNoIChhcHByb3ZlKSAtPlxyXG5cdFx0XHRcdFx0aWYgYXBwcm92ZS50eXBlID09ICdjYycgYW5kIGFwcHJvdmUudXNlciA9PSB1c2VySWQgYW5kIGFwcHJvdmUuaXNfZmluaXNoZWQgPT0gZmFsc2VcclxuXHRcdFx0XHRcdFx0aWYgYXBwcm92ZS5pc19yZWFkXHJcblx0XHRcdFx0XHRcdFx0aXNfcmVhZCA9IHRydWVcclxuXHRcdFx0XHRcdFx0bXlBcHByb3ZlID0ge2lkOiBhcHByb3ZlLl9pZCwgaXNfcmVhZDogaXNfcmVhZCwgc3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlLCBhZ2VudDogYXBwcm92ZS5hZ2VudCwgdXNlcl9uYW1lOiBhcHByb3ZlLnVzZXJfbmFtZX1cclxuXHJcblx0XHRyZXR1cm4gbXlBcHByb3ZlXHJcblxyXG5cdGdldFN0ZXBDdXJyZW50TmFtZSA9IChpbnN0YW5jZUlkKSAtPlxyXG5cdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpbnN0YW5jZUlkfSwge2ZpZWxkczoge1widHJhY2VzLm5hbWVcIjogMSwgXCJ0cmFjZXNcIjogeyRzbGljZTogLTF9fX0pXHJcblx0XHRpZiBpbnN0YW5jZVxyXG5cdFx0XHRzdGVwQ3VycmVudE5hbWUgPSBpbnN0YW5jZS50cmFjZXM/WzBdPy5uYW1lXHJcblxyXG5cdFx0cmV0dXJuIHN0ZXBDdXJyZW50TmFtZVxyXG5cclxuXHRoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7X2lkOiB7JGluOiBpZHN9fSwge2ZpZWxkczoge3RyYWNlczogMH19KS5vYnNlcnZlQ2hhbmdlcyB7XHJcblx0XHRjaGFuZ2VkOiAoaWQpLT5cclxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXHJcblx0XHRcdHJldHVybiBpZiBub3QgaW5zdGFuY2VcclxuXHRcdFx0bXlBcHByb3ZlID0gZ2V0TXlBcHByb3ZlKHNlbGYudXNlcklkLCBpZClcclxuXHRcdFx0bXlMYXN0RmluaXNoZWRBcHByb3ZlID0gZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlKHNlbGYudXNlcklkLCBpZClcclxuXHRcdFx0aWYgbXlBcHByb3ZlXHJcblx0XHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IG15QXBwcm92ZS5pc19yZWFkXHJcblx0XHRcdFx0aW5zdGFuY2Uuc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlXHJcblx0XHRcdFx0aWYgbXlBcHByb3ZlLmFnZW50XHJcblx0XHRcdFx0XHRpbnN0YW5jZS5hZ2VudF91c2VyX25hbWUgPSBteUFwcHJvdmUudXNlcl9uYW1lXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpbnN0YW5jZS5pc19yZWFkID0gdHJ1ZVxyXG5cclxuXHRcdFx0aWYgbXlMYXN0RmluaXNoZWRBcHByb3ZlXHJcblx0XHRcdFx0aW5zdGFuY2UubXlfZmluaXNoX2RhdGUgPSBteUxhc3RGaW5pc2hlZEFwcHJvdmUuZmluaXNoX2RhdGVcclxuXHJcblx0XHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxyXG5cdFx0XHRpbnN0YW5jZS5jY19jb3VudCA9IGluc3RhbmNlLmNjX3VzZXJzPy5sZW5ndGggfHwgMFxyXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0c2VsZi5jaGFuZ2VkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSk7XHJcblx0XHRcdGNhdGNoIGVycm9yXHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ2luc3RhbmNlIG9ic2VydmVDaGFuZ2VzIGVycm9yOiAnLCBlcnJvci5tZXNzYWdlKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnc2VsZi51c2VySWQ6ICcsIHNlbGYudXNlcklkKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygndGFibGVOYW1lOiAnLCB0YWJsZU5hbWUpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdpZHM6ICcsIEpTT04uc3RyaW5naWZ5KGlkcykpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdteUFwcHJvdmU6ICcsIEpTT04uc3RyaW5naWZ5KG15QXBwcm92ZSkpO1xyXG5cdFx0cmVtb3ZlZDogKGlkKS0+XHJcblx0XHRcdHNlbGYucmVtb3ZlZChcImluc3RhbmNlc1wiLCBpZCk7XHJcblx0fVxyXG5cclxuXHRpZHMuZm9yRWFjaCAoaWQpLT5cclxuXHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxyXG5cdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxyXG5cdFx0bXlBcHByb3ZlID0gZ2V0TXlBcHByb3ZlKHNlbGYudXNlcklkLCBpZClcclxuXHRcdG15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpXHJcblx0XHRpZiBteUFwcHJvdmVcclxuXHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IG15QXBwcm92ZS5pc19yZWFkXHJcblx0XHRcdGluc3RhbmNlLnN0YXJ0X2RhdGUgPSBteUFwcHJvdmUuc3RhcnRfZGF0ZVxyXG5cdFx0XHRpZiBteUFwcHJvdmUuYWdlbnRcclxuXHRcdFx0XHRcdGluc3RhbmNlLmFnZW50X3VzZXJfbmFtZSA9IG15QXBwcm92ZS51c2VyX25hbWVcclxuXHRcdGVsc2VcclxuXHRcdFx0aW5zdGFuY2UuaXNfcmVhZCA9IHRydWVcclxuXHJcblx0XHRpZiBteUxhc3RGaW5pc2hlZEFwcHJvdmVcclxuXHRcdFx0aW5zdGFuY2UubXlfZmluaXNoX2RhdGUgPSBteUxhc3RGaW5pc2hlZEFwcHJvdmUuZmluaXNoX2RhdGVcclxuXHJcblx0XHRpbnN0YW5jZS5pc19jYyA9IGluc3RhbmNlLmNjX3VzZXJzPy5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgfHwgZmFsc2VcclxuXHRcdGluc3RhbmNlLmNjX2NvdW50ID0gaW5zdGFuY2UuY2NfdXNlcnM/Lmxlbmd0aCB8fCAwXHJcblx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcclxuXHRcdHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcclxuXHJcblx0c2VsZi5yZWFkeSgpO1xyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKCkiLCJ2YXIgYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlLCBsYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlO1xuXG5sYXN0RmluaXNoZWRBcHByb3ZlQWdncmVnYXRlID0gZnVuY3Rpb24oaW5zdGFuY2VpZCwgdXNlcklkLCBkYXRhTWFwLCBjYWxsYmFjaykge1xuICB2YXIgb3BlcmF0aW9uO1xuICBvcGVyYXRpb24gPSBbXG4gICAge1xuICAgICAgXCIkbWF0Y2hcIjoge1xuICAgICAgICBcIl9pZFwiOiBpbnN0YW5jZWlkXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgXCIkcHJvamVjdFwiOiB7XG4gICAgICAgIFwibmFtZVwiOiAxLFxuICAgICAgICBcIl9hcHByb3ZlXCI6IFwiJHRyYWNlcy5hcHByb3Zlc1wiXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgXCIkdW53aW5kXCI6IFwiJF9hcHByb3ZlXCJcbiAgICB9LCB7XG4gICAgICBcIiR1bndpbmRcIjogXCIkX2FwcHJvdmVcIlxuICAgIH0sIHtcbiAgICAgIFwiJG1hdGNoXCI6IHtcbiAgICAgICAgXCJfYXBwcm92ZS5pc19maW5pc2hlZFwiOiB0cnVlLFxuICAgICAgICAkb3I6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIl9hcHByb3ZlLmhhbmRsZXJcIjogdXNlcklkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgXCJfYXBwcm92ZS51c2VyXCI6IHVzZXJJZFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIFwiJGdyb3VwXCI6IHtcbiAgICAgICAgXCJfaWRcIjogXCIkX2lkXCIsXG4gICAgICAgIFwiZmluaXNoX2RhdGVcIjoge1xuICAgICAgICAgIFwiJGxhc3RcIjogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBdO1xuICByZXR1cm4gZGIuaW5zdGFuY2VzLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUob3BlcmF0aW9uKS50b0FycmF5KGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZG9jKSB7XG4gICAgICByZXR1cm4gZGF0YU1hcC5wdXNoKGRvYyk7XG4gICAgfSk7XG4gICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmFzeW5jTGFzdEZpbmlzaGVkQXBwcm92ZSA9IE1ldGVvci53cmFwQXN5bmMobGFzdEZpbmlzaGVkQXBwcm92ZUFnZ3JlZ2F0ZSk7XG5cbk1ldGVvci5wdWJsaXNoKFwiaW5zdGFuY2VfdGFidWxhclwiLCBmdW5jdGlvbih0YWJsZU5hbWUsIGlkcywgZmllbGRzKSB7XG4gIHZhciBnZXRNeUFwcHJvdmUsIGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZSwgZ2V0U3RlcEN1cnJlbnROYW1lLCBoYW5kbGUsIHNlbGY7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGNoZWNrKHRhYmxlTmFtZSwgU3RyaW5nKTtcbiAgY2hlY2soaWRzLCBBcnJheSk7XG4gIGNoZWNrKGZpZWxkcywgTWF0Y2guT3B0aW9uYWwoT2JqZWN0KSk7XG4gIGZpZWxkcy5jY191c2VycyA9IDE7XG4gIHNlbGYgPSB0aGlzO1xuICBnZXRNeUxhc3RGaW5pc2hlZEFwcHJvdmUgPSBmdW5jdGlvbih1c2VySWQsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgZGF0YTtcbiAgICBkYXRhID0gW107XG4gICAgYXN5bmNMYXN0RmluaXNoZWRBcHByb3ZlKGluc3RhbmNlSWQsIHVzZXJJZCwgZGF0YSk7XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGRhdGFbMF07XG4gICAgfVxuICB9O1xuICBnZXRNeUFwcHJvdmUgPSBmdW5jdGlvbih1c2VySWQsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgYXBwcm92ZSwgYXBwcm92ZXMsIGluc3RhbmNlLCBpc19yZWFkLCBteUFwcHJvdmUsIG5vdEZpbmlzaGVkVHJhY2VzO1xuICAgIGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe1xuICAgICAgX2lkOiBpbnN0YW5jZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIHRyYWNlczogMVxuICAgICAgfVxuICAgIH0pO1xuICAgIG15QXBwcm92ZSA9IG51bGw7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWluc3RhbmNlLnRyYWNlcyB8fCBpbnN0YW5jZS50cmFjZXMubGVuZ3RoIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub3RGaW5pc2hlZFRyYWNlcyA9IGluc3RhbmNlLnRyYWNlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKTtcbiAgICBpZiAobm90RmluaXNoZWRUcmFjZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXBwcm92ZXMgPSBub3RGaW5pc2hlZFRyYWNlc1swXS5hcHByb3Zlcy5maWx0ZXJQcm9wZXJ0eShcImlzX2ZpbmlzaGVkXCIsIGZhbHNlKS5maWx0ZXJQcm9wZXJ0eShcImhhbmRsZXJcIiwgdXNlcklkKTtcbiAgICAgIGlmIChhcHByb3Zlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFwcHJvdmUgPSBhcHByb3Zlc1swXTtcbiAgICAgICAgbXlBcHByb3ZlID0ge1xuICAgICAgICAgIGlkOiBhcHByb3ZlLl9pZCxcbiAgICAgICAgICBpbnN0YW5jZTogYXBwcm92ZS5pbnN0YW5jZSxcbiAgICAgICAgICB0cmFjZTogYXBwcm92ZS50cmFjZSxcbiAgICAgICAgICBpc19yZWFkOiBhcHByb3ZlLmlzX3JlYWQsXG4gICAgICAgICAgc3RhcnRfZGF0ZTogYXBwcm92ZS5zdGFydF9kYXRlLFxuICAgICAgICAgIGFnZW50OiBhcHByb3ZlLmFnZW50LFxuICAgICAgICAgIHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFteUFwcHJvdmUpIHtcbiAgICAgIGlzX3JlYWQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLnRyYWNlcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNlKSB7XG4gICAgICAgIHZhciByZWY7XG4gICAgICAgIHJldHVybiB0cmFjZSAhPSBudWxsID8gKHJlZiA9IHRyYWNlLmFwcHJvdmVzKSAhPSBudWxsID8gcmVmLmZvckVhY2goZnVuY3Rpb24oYXBwcm92ZSkge1xuICAgICAgICAgIGlmIChhcHByb3ZlLnR5cGUgPT09ICdjYycgJiYgYXBwcm92ZS51c2VyID09PSB1c2VySWQgJiYgYXBwcm92ZS5pc19maW5pc2hlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChhcHByb3ZlLmlzX3JlYWQpIHtcbiAgICAgICAgICAgICAgaXNfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbXlBcHByb3ZlID0ge1xuICAgICAgICAgICAgICBpZDogYXBwcm92ZS5faWQsXG4gICAgICAgICAgICAgIGlzX3JlYWQ6IGlzX3JlYWQsXG4gICAgICAgICAgICAgIHN0YXJ0X2RhdGU6IGFwcHJvdmUuc3RhcnRfZGF0ZSxcbiAgICAgICAgICAgICAgYWdlbnQ6IGFwcHJvdmUuYWdlbnQsXG4gICAgICAgICAgICAgIHVzZXJfbmFtZTogYXBwcm92ZS51c2VyX25hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbXlBcHByb3ZlO1xuICB9O1xuICBnZXRTdGVwQ3VycmVudE5hbWUgPSBmdW5jdGlvbihpbnN0YW5jZUlkKSB7XG4gICAgdmFyIGluc3RhbmNlLCByZWYsIHJlZjEsIHN0ZXBDdXJyZW50TmFtZTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaW5zdGFuY2VJZFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBcInRyYWNlcy5uYW1lXCI6IDEsXG4gICAgICAgIFwidHJhY2VzXCI6IHtcbiAgICAgICAgICAkc2xpY2U6IC0xXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHN0ZXBDdXJyZW50TmFtZSA9IChyZWYgPSBpbnN0YW5jZS50cmFjZXMpICE9IG51bGwgPyAocmVmMSA9IHJlZlswXSkgIT0gbnVsbCA/IHJlZjEubmFtZSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIHN0ZXBDdXJyZW50TmFtZTtcbiAgfTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgIF9pZDoge1xuICAgICAgJGluOiBpZHNcbiAgICB9XG4gIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHRyYWNlczogMFxuICAgIH1cbiAgfSkub2JzZXJ2ZUNoYW5nZXMoe1xuICAgIGNoYW5nZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgZXJyb3IsIGluc3RhbmNlLCBteUFwcHJvdmUsIG15TGFzdEZpbmlzaGVkQXBwcm92ZSwgcmVmLCByZWYxO1xuICAgICAgaW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7XG4gICAgICAgIF9pZDogaWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICAgIH0pO1xuICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBteUFwcHJvdmUgPSBnZXRNeUFwcHJvdmUoc2VsZi51c2VySWQsIGlkKTtcbiAgICAgIG15TGFzdEZpbmlzaGVkQXBwcm92ZSA9IGdldE15TGFzdEZpbmlzaGVkQXBwcm92ZShzZWxmLnVzZXJJZCwgaWQpO1xuICAgICAgaWYgKG15QXBwcm92ZSkge1xuICAgICAgICBpbnN0YW5jZS5pc19yZWFkID0gbXlBcHByb3ZlLmlzX3JlYWQ7XG4gICAgICAgIGluc3RhbmNlLnN0YXJ0X2RhdGUgPSBteUFwcHJvdmUuc3RhcnRfZGF0ZTtcbiAgICAgICAgaWYgKG15QXBwcm92ZS5hZ2VudCkge1xuICAgICAgICAgIGluc3RhbmNlLmFnZW50X3VzZXJfbmFtZSA9IG15QXBwcm92ZS51c2VyX25hbWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLmlzX3JlYWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG15TGFzdEZpbmlzaGVkQXBwcm92ZSkge1xuICAgICAgICBpbnN0YW5jZS5teV9maW5pc2hfZGF0ZSA9IG15TGFzdEZpbmlzaGVkQXBwcm92ZS5maW5pc2hfZGF0ZTtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlLmlzX2NjID0gKChyZWYgPSBpbnN0YW5jZS5jY191c2VycykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgOiB2b2lkIDApIHx8IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuY2NfY291bnQgPSAoKHJlZjEgPSBpbnN0YW5jZS5jY191c2VycykgIT0gbnVsbCA/IHJlZjEubGVuZ3RoIDogdm9pZCAwKSB8fCAwO1xuICAgICAgZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICBjb25zb2xlLmxvZygnaW5zdGFuY2Ugb2JzZXJ2ZUNoYW5nZXMgZXJyb3I6ICcsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmxvZygnc2VsZi51c2VySWQ6ICcsIHNlbGYudXNlcklkKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RhYmxlTmFtZTogJywgdGFibGVOYW1lKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2lkczogJywgSlNPTi5zdHJpbmdpZnkoaWRzKSk7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnbXlBcHByb3ZlOiAnLCBKU09OLnN0cmluZ2lmeShteUFwcHJvdmUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gc2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcbiAgICB9XG4gIH0pO1xuICBpZHMuZm9yRWFjaChmdW5jdGlvbihpZCkge1xuICAgIHZhciBpbnN0YW5jZSwgbXlBcHByb3ZlLCBteUxhc3RGaW5pc2hlZEFwcHJvdmUsIHJlZiwgcmVmMTtcbiAgICBpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtcbiAgICAgIF9pZDogaWRcbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IGZpZWxkc1xuICAgIH0pO1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbXlBcHByb3ZlID0gZ2V0TXlBcHByb3ZlKHNlbGYudXNlcklkLCBpZCk7XG4gICAgbXlMYXN0RmluaXNoZWRBcHByb3ZlID0gZ2V0TXlMYXN0RmluaXNoZWRBcHByb3ZlKHNlbGYudXNlcklkLCBpZCk7XG4gICAgaWYgKG15QXBwcm92ZSkge1xuICAgICAgaW5zdGFuY2UuaXNfcmVhZCA9IG15QXBwcm92ZS5pc19yZWFkO1xuICAgICAgaW5zdGFuY2Uuc3RhcnRfZGF0ZSA9IG15QXBwcm92ZS5zdGFydF9kYXRlO1xuICAgICAgaWYgKG15QXBwcm92ZS5hZ2VudCkge1xuICAgICAgICBpbnN0YW5jZS5hZ2VudF91c2VyX25hbWUgPSBteUFwcHJvdmUudXNlcl9uYW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5pc19yZWFkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG15TGFzdEZpbmlzaGVkQXBwcm92ZSkge1xuICAgICAgaW5zdGFuY2UubXlfZmluaXNoX2RhdGUgPSBteUxhc3RGaW5pc2hlZEFwcHJvdmUuZmluaXNoX2RhdGU7XG4gICAgfVxuICAgIGluc3RhbmNlLmlzX2NjID0gKChyZWYgPSBpbnN0YW5jZS5jY191c2VycykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhzZWxmLnVzZXJJZCkgOiB2b2lkIDApIHx8IGZhbHNlO1xuICAgIGluc3RhbmNlLmNjX2NvdW50ID0gKChyZWYxID0gaW5zdGFuY2UuY2NfdXNlcnMpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCkgfHwgMDtcbiAgICBkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnM7XG4gICAgcmV0dXJuIHNlbGYuYWRkZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcbiAgfSk7XG4gIHNlbGYucmVhZHkoKTtcbiAgcmV0dXJuIHNlbGYub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ2luc3RhbmNlc19kcmFmdCcsIChzcGFjZUlkKSAtPlxyXG5cdGNoZWNrIHNwYWNlSWQsIFN0cmluZ1xyXG5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dXNlcklkID0gdGhpcy51c2VySWRcclxuXHRyZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe3N0YXRlOlwiZHJhZnRcIixzcGFjZTpzcGFjZUlkLHN1Ym1pdHRlcjp1c2VySWQsJG9yOlt7aW5ib3hfdXNlcnM6IHskZXhpc3RzOmZhbHNlfX0sIHtpbmJveF91c2VyczogW119XX0sIHtmaWVsZHM6IHtfaWQ6IDEsIHN0YXRlOiAxLCBzcGFjZTogMSwgc3VibWl0dGVyOiAxLCBpbmJveF91c2VyczogMSwgbW9kaWZpZWQ6IDEsIG5hbWU6IDF9LCBzb3J0Onttb2RpZmllZDogLTF9fSkiLCJNZXRlb3IucHVibGlzaCgnaW5zdGFuY2VzX2RyYWZ0JywgZnVuY3Rpb24oc3BhY2VJZCkge1xuICB2YXIgdXNlcklkO1xuICBjaGVjayhzcGFjZUlkLCBTdHJpbmcpO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICB1c2VySWQgPSB0aGlzLnVzZXJJZDtcbiAgcmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtcbiAgICBzdGF0ZTogXCJkcmFmdFwiLFxuICAgIHNwYWNlOiBzcGFjZUlkLFxuICAgIHN1Ym1pdHRlcjogdXNlcklkLFxuICAgICRvcjogW1xuICAgICAge1xuICAgICAgICBpbmJveF91c2Vyczoge1xuICAgICAgICAgICRleGlzdHM6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaW5ib3hfdXNlcnM6IFtdXG4gICAgICB9XG4gICAgXVxuICB9LCB7XG4gICAgZmllbGRzOiB7XG4gICAgICBfaWQ6IDEsXG4gICAgICBzdGF0ZTogMSxcbiAgICAgIHNwYWNlOiAxLFxuICAgICAgc3VibWl0dGVyOiAxLFxuICAgICAgaW5ib3hfdXNlcnM6IDEsXG4gICAgICBtb2RpZmllZDogMSxcbiAgICAgIG5hbWU6IDFcbiAgICB9LFxuICAgIHNvcnQ6IHtcbiAgICAgIG1vZGlmaWVkOiAtMVxuICAgIH1cbiAgfSk7XG59KTtcbiIsIk1ldGVvci5wdWJsaXNoICdkaXN0cmlidXRlZF9pbnN0YW5jZXNfc3RhdGVfYnlfaWRzJywgKGluc3RhbmNlX2lkcyktPlxyXG5cdGNoZWNrKGluc3RhbmNlX2lkcywgQXJyYXkpXHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cdFxyXG5cdHVubGVzcyBpbnN0YW5jZV9pZHNcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0aWYgXy5pc0VtcHR5KGluc3RhbmNlX2lkcylcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0c2VsZiA9IHRoaXNcclxuXHJcblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQoe19pZDogeyRpbjogaW5zdGFuY2VfaWRzfX0sIHtmaWVsZHM6IHtzdGF0ZTogMSwgdHJhY2VzOnskc2xpY2U6IDF9IH0gfSkub2JzZXJ2ZUNoYW5nZXMge1xyXG5cdFx0YWRkZWQ6IChpZCwgZmllbGRzKS0+XHJcblx0XHRcdHNlbGYuYWRkZWQoJ2luc3RhbmNlcycsIGlkLCB7c3RhdGU6IGZpZWxkcy5zdGF0ZSwgaXNfcmVhZDogZmllbGRzLnRyYWNlc1swXS5hcHByb3Zlc1swXS5pc19yZWFkfSlcclxuXHJcblx0XHRjaGFuZ2VkOiAoaWQsIGZpZWxkcyktPlxyXG5cdFx0XHRpZiBmaWVsZHMuc3RhdGVcclxuXHRcdFx0XHRzZWxmLmNoYW5nZWQoJ2luc3RhbmNlcycsIGlkLCB7c3RhdGU6IGZpZWxkcy5zdGF0ZX0pXHJcblx0XHRcdGlmIGZpZWxkcy50cmFjZXNcclxuXHRcdFx0XHRzZWxmLmNoYW5nZWQoJ2luc3RhbmNlcycsIGlkLCB7aXNfcmVhZDogZmllbGRzLnRyYWNlc1swXS5hcHByb3Zlc1swXS5pc19yZWFkfSlcclxuXHR9XHJcblxyXG5cdHRoaXMucmVhZHkoKVxyXG5cdHRoaXMub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKClcclxuIiwiTWV0ZW9yLnB1Ymxpc2goJ2Rpc3RyaWJ1dGVkX2luc3RhbmNlc19zdGF0ZV9ieV9pZHMnLCBmdW5jdGlvbihpbnN0YW5jZV9pZHMpIHtcbiAgdmFyIGhhbmRsZSwgc2VsZjtcbiAgY2hlY2soaW5zdGFuY2VfaWRzLCBBcnJheSk7XG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIGlmICghaW5zdGFuY2VfaWRzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoXy5pc0VtcHR5KGluc3RhbmNlX2lkcykpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHNlbGYgPSB0aGlzO1xuICBoYW5kbGUgPSBkYi5pbnN0YW5jZXMuZmluZCh7XG4gICAgX2lkOiB7XG4gICAgICAkaW46IGluc3RhbmNlX2lkc1xuICAgIH1cbiAgfSwge1xuICAgIGZpZWxkczoge1xuICAgICAgc3RhdGU6IDEsXG4gICAgICB0cmFjZXM6IHtcbiAgICAgICAgJHNsaWNlOiAxXG4gICAgICB9XG4gICAgfVxuICB9KS5vYnNlcnZlQ2hhbmdlcyh7XG4gICAgYWRkZWQ6IGZ1bmN0aW9uKGlkLCBmaWVsZHMpIHtcbiAgICAgIHJldHVybiBzZWxmLmFkZGVkKCdpbnN0YW5jZXMnLCBpZCwge1xuICAgICAgICBzdGF0ZTogZmllbGRzLnN0YXRlLFxuICAgICAgICBpc19yZWFkOiBmaWVsZHMudHJhY2VzWzBdLmFwcHJvdmVzWzBdLmlzX3JlYWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2hhbmdlZDogZnVuY3Rpb24oaWQsIGZpZWxkcykge1xuICAgICAgaWYgKGZpZWxkcy5zdGF0ZSkge1xuICAgICAgICBzZWxmLmNoYW5nZWQoJ2luc3RhbmNlcycsIGlkLCB7XG4gICAgICAgICAgc3RhdGU6IGZpZWxkcy5zdGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWVsZHMudHJhY2VzKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmNoYW5nZWQoJ2luc3RhbmNlcycsIGlkLCB7XG4gICAgICAgICAgaXNfcmVhZDogZmllbGRzLnRyYWNlc1swXS5hcHByb3Zlc1swXS5pc19yZWFkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHRoaXMucmVhZHkoKTtcbiAgcmV0dXJuIHRoaXMub25TdG9wKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGUuc3RvcCgpO1xuICB9KTtcbn0pO1xuIiwiTWV0ZW9yLnB1Ymxpc2ggJ3JlbGF0ZWRfaW5zdGFjZXMnLCAoaW5zdGFuY2VJZCwgcmVsYXRlZF9pbnN0YW5jZXMpLT5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIGluc3RhbmNlSWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0cmVsYXRlZF9pbnN0YW5jZV9pZHMgPSBkYi5pbnN0YW5jZXMuZmluZE9uZShpbnN0YW5jZUlkLHtmaWVsZHM6IHtyZWxhdGVkX2luc3RhbmNlczogMX19KT8ucmVsYXRlZF9pbnN0YW5jZXNcclxuXHJcblx0aWYgcmVsYXRlZF9pbnN0YW5jZV9pZHMgJiYgXy5pc0FycmF5KHJlbGF0ZWRfaW5zdGFuY2VfaWRzKVxyXG5cdFx0cmV0dXJuIGRiLmluc3RhbmNlcy5maW5kKHtfaWQ6IHskaW4gOiByZWxhdGVkX2luc3RhbmNlX2lkc319LCB7ZmllbGRzOiB7X2lkOiAxLCBuYW1lOiAxLCBzcGFjZTogMX19KVxyXG5cdGVsc2VcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KCkiLCJNZXRlb3IucHVibGlzaCgncmVsYXRlZF9pbnN0YWNlcycsIGZ1bmN0aW9uKGluc3RhbmNlSWQsIHJlbGF0ZWRfaW5zdGFuY2VzKSB7XG4gIHZhciByZWYsIHJlbGF0ZWRfaW5zdGFuY2VfaWRzO1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICBpZiAoIWluc3RhbmNlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICB9XG4gIHJlbGF0ZWRfaW5zdGFuY2VfaWRzID0gKHJlZiA9IGRiLmluc3RhbmNlcy5maW5kT25lKGluc3RhbmNlSWQsIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIHJlbGF0ZWRfaW5zdGFuY2VzOiAxXG4gICAgfVxuICB9KSkgIT0gbnVsbCA/IHJlZi5yZWxhdGVkX2luc3RhbmNlcyA6IHZvaWQgMDtcbiAgaWYgKHJlbGF0ZWRfaW5zdGFuY2VfaWRzICYmIF8uaXNBcnJheShyZWxhdGVkX2luc3RhbmNlX2lkcykpIHtcbiAgICByZXR1cm4gZGIuaW5zdGFuY2VzLmZpbmQoe1xuICAgICAgX2lkOiB7XG4gICAgICAgICRpbjogcmVsYXRlZF9pbnN0YW5jZV9pZHNcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgX2lkOiAxLFxuICAgICAgICBuYW1lOiAxLFxuICAgICAgICBzcGFjZTogMVxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbn0pO1xuIiwiaWYgTWV0ZW9yLmlzU2VydmVyXHJcbiAgICBNZXRlb3IucHVibGlzaCAnc3BhY2VfdXNlcl9zaWducycsIChzcGFjZUlkKSAtPlxyXG4gICAgICAgIGNoZWNrIHNwYWNlSWQsIFN0cmluZ1xyXG5cclxuICAgICAgICB1bmxlc3MgdGhpcy51c2VySWRcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuICAgICAgICByZXR1cm4gZGIuc3BhY2VfdXNlcl9zaWducy5maW5kKHsgc3BhY2U6IHNwYWNlSWQgfSwge2ZpZWxkczoge2NyZWF0ZWRfYnk6IDAsIGNyZWF0ZWQ6IDAsIG1vZGlmaWVkX2J5OiAwfX0pXHJcbiIsImlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgTWV0ZW9yLnB1Ymxpc2goJ3NwYWNlX3VzZXJfc2lnbnMnLCBmdW5jdGlvbihzcGFjZUlkKSB7XG4gICAgY2hlY2soc3BhY2VJZCwgU3RyaW5nKTtcbiAgICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFkeSgpO1xuICAgIH1cbiAgICByZXR1cm4gZGIuc3BhY2VfdXNlcl9zaWducy5maW5kKHtcbiAgICAgIHNwYWNlOiBzcGFjZUlkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGNyZWF0ZWRfYnk6IDAsXG4gICAgICAgIGNyZWF0ZWQ6IDAsXG4gICAgICAgIG1vZGlmaWVkX2J5OiAwXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiIyMjXHJcbk1ldGVvci5wdWJsaXNoQ29tcG9zaXRlIFwidXNlcl9pbmJveF9pbnN0YW5jZVwiLCAoKS0+XHJcblx0dW5sZXNzIHRoaXMudXNlcklkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHVzZXJTcGFjZUlkcyA9IGRiLnNwYWNlX3VzZXJzLmZpbmQoe1xyXG5cdFx0dXNlcjogdGhpcy51c2VySWQsXHJcblx0XHR1c2VyX2FjY2VwdGVkOiB0cnVlXHJcblx0fSwge2ZpZWxkczoge3NwYWNlOiAxfX0pLmZldGNoKCkuZ2V0RWFjaChcInNwYWNlXCIpO1xyXG5cdHF1ZXJ5ID0ge3NwYWNlOiB7JGluOiB1c2VyU3BhY2VJZHN9fVxyXG5cclxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxyXG5cclxuXHRmaW5kOiAtPlxyXG5cdFx0ZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcclxuXHRcdFx0ZmllbGRzOiB7XHJcblx0XHRcdFx0c3BhY2U6IDEsXHJcblx0XHRcdFx0YXBwbGljYW50X25hbWU6IDEsXHJcblx0XHRcdFx0ZmxvdzogMSxcclxuXHRcdFx0XHRpbmJveF91c2VyczogMSxcclxuXHRcdFx0XHRjY191c2VyczogMSxcclxuXHRcdFx0XHRzdGF0ZTogMSxcclxuXHRcdFx0XHRuYW1lOiAxLFxyXG5cdFx0XHRcdG1vZGlmaWVkOiAxLFxyXG5cdFx0XHRcdGZvcm06IDFcclxuXHRcdFx0fSwgc29ydDoge21vZGlmaWVkOiAtMX0sIHNraXA6IDAsIGxpbWl0OiAyMDBcclxuXHRcdH0pO1xyXG5cdGNoaWxkcmVuOiBbXHJcblx0XHR7XHJcblx0XHRcdGZpbmQ6IChpbnN0YW5jZSwgcG9zdCktPlxyXG5cdFx0XHRcdGRiLmZsb3dzLmZpbmQoe19pZDogaW5zdGFuY2UuZmxvd30sIHtmaWVsZHM6IHtuYW1lOiAxLCBzcGFjZTogMX19KTtcclxuXHRcdH1cclxuXHRdXHJcbiMjI1xyXG5cclxuIyMjXHJcbk1ldGVvci5wdWJsaXNoICdteV9pbmJveF9pbnN0YW5jZXMnLCAoc3BhY2VJZCktPlxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRzZWxmID0gdGhpcztcclxuXHJcblx0I1x0dXNlclNwYWNlSWRzID0gZGIuc3BhY2VfdXNlcnMuZmluZCh7XHJcblx0I1x0XHR1c2VyOiB0aGlzLnVzZXJJZCxcclxuXHQjXHRcdHVzZXJfYWNjZXB0ZWQ6IHRydWVcclxuXHQjXHR9LCB7ZmllbGRzOiB7c3BhY2U6IDF9fSkuZmV0Y2goKS5nZXRFYWNoKFwic3BhY2VcIik7XHJcblxyXG5cdHF1ZXJ5ID0ge3NwYWNlOiBzcGFjZUlkfVxyXG5cclxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxyXG5cclxuXHRmaWVsZHMgPSB7XHJcblx0XHRzcGFjZTogMSxcclxuI1x0XHRhcHBsaWNhbnRfbmFtZTogMSxcclxuXHRcdGZsb3c6IDEsXHJcblx0XHRpbmJveF91c2VyczogMSxcclxuXHRcdGNjX3VzZXJzOiAxLFxyXG5cdFx0c3RhdGU6IDEsXHJcbiNcdFx0bmFtZTogMSxcclxuI1x0XHRtb2RpZmllZDogMSxcclxuXHRcdGZvcm06IDFcclxuXHR9XHJcblxyXG5cdGhhbmRsZSA9IGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7c29ydDoge21vZGlmaWVkOiAtMX0sIHNraXA6IDAsIGxpbWl0OiA1MDB9KS5vYnNlcnZlQ2hhbmdlcyB7XHJcblx0XHRhZGRlZDogKGlkKS0+XHJcblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxyXG5cdFx0XHRyZXR1cm4gaWYgbm90IGluc3RhbmNlXHJcblx0XHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxyXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcclxuXHRcdFx0c2VsZi5hZGRlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpXHJcblx0XHRjaGFuZ2VkOiAoaWQpLT5cclxuXHRcdFx0aW5zdGFuY2UgPSBkYi5pbnN0YW5jZXMuZmluZE9uZSh7X2lkOiBpZH0sIHtmaWVsZHM6IGZpZWxkc30pXHJcblx0XHRcdHJldHVybiBpZiBub3QgaW5zdGFuY2VcclxuXHRcdFx0aW5zdGFuY2UuaXNfY2MgPSBpbnN0YW5jZS5jY191c2Vycz8uaW5jbHVkZXMoc2VsZi51c2VySWQpIHx8IGZhbHNlXHJcblx0XHRcdGRlbGV0ZSBpbnN0YW5jZS5jY191c2Vyc1xyXG5cdFx0XHRzZWxmLmNoYW5nZWQoXCJpbnN0YW5jZXNcIiwgaWQsIGluc3RhbmNlKTtcclxuXHRcdHJlbW92ZWQ6IChpZCktPlxyXG5cdFx0XHRzZWxmLnJlbW92ZWQoXCJpbnN0YW5jZXNcIiwgaWQpO1xyXG5cdH1cclxuXHJcblx0c2VsZi5yZWFkeSgpO1xyXG5cdHNlbGYub25TdG9wICgpLT5cclxuXHRcdGhhbmRsZS5zdG9wKClcclxuIyMjXHJcblxyXG5fZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSA9IChzcGFjZUlkLCB1c2VySWQsIF9pdGVtcywgY2FsbGJhY2spLT5cclxuXHRkYi5pbnN0YW5jZXMucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShbXHJcblx0XHR7XHJcblx0XHRcdCRtYXRjaDoge1xyXG5cdFx0XHRcdHNwYWNlOiBzcGFjZUlkLFxyXG5cdFx0XHRcdCRvcjogW3tpbmJveF91c2VyczogdXNlcklkfSwge2NjX3VzZXJzOiB1c2VySWR9XVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHQkZ3JvdXA6IHtcclxuXHRcdFx0XHRfaWQ6IHtmbG93OiBcIiRmbG93XCIsIGNhdGVnb3J5OiBcIiRjYXRlZ29yeVwifSwgY291bnQ6IHskc3VtOiAxfVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XSkudG9BcnJheSAoZXJyLCBkYXRhKS0+XHJcblx0XHRpZiBlcnJcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycilcclxuXHJcblx0XHRkYXRhLmZvckVhY2ggKGRvYykgLT5cclxuXHRcdFx0X2l0ZW1zLnB1c2ggZG9jXHJcblxyXG5cdFx0aWYgY2FsbGJhY2sgJiYgXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKVxyXG5cdFx0XHRjYWxsYmFjaygpXHJcblx0XHRyZXR1cm5cclxuXHJcbl9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSlcclxuXHJcbk1ldGVvci5wdWJsaXNoICdteV9pbmJveF9mbG93X2luc3RhbmNlc19jb3VudCcsIChzcGFjZUlkKS0+XHJcblxyXG5cdHVubGVzcyB0aGlzLnVzZXJJZFxyXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxyXG5cclxuXHRzZWxmID0gdGhpcztcclxuXHJcblx0cXVlcnkgPSB7c3BhY2U6IHNwYWNlSWR9XHJcblxyXG5cdHF1ZXJ5LiRvciA9IFt7aW5ib3hfdXNlcnM6IHRoaXMudXNlcklkfSwge2NjX3VzZXJzOiB0aGlzLnVzZXJJZH1dXHJcblxyXG5cdGRhdGEgPSBbXSAgI+aVsOaNruagvOW8j++8mlt7X2lkOmZsb3dJZCwgY291bnQ6IOW+heWKnuaVsOmHj30sIHtfaWQ6Zmxvd0lkMiwgY291bnQ6IOW+heWKnuaVsOmHjzJ9XVxyXG5cdF9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlKHNwYWNlSWQsIHNlbGYudXNlcklkLCBkYXRhKVxyXG5cclxuXHRfZmxvd3NEYXRhID0gW11cclxuXHJcblx0Xy5lYWNoIGRhdGEsIChkYXRhSXRlbSktPlxyXG5cdFx0X2Zsb3dzRGF0YS5wdXNoKHtfaWQ6IGRhdGFJdGVtLl9pZC5mbG93LCBjYXRlZ29yeTogZGF0YUl0ZW0uX2lkLmNhdGVnb3J5LCBjb3VudDogZGF0YUl0ZW0uY291bnR9KVxyXG5cclxuXHRzZWxmLmFkZGVkKFwiZmxvd19pbnN0YW5jZXNcIiwgc3BhY2VJZCwge2Zsb3dzOiBfZmxvd3NEYXRhfSk7XHJcblxyXG5cdF9jaGFuZ2VEYXRhID0gKGRvYywgYWN0aW9uKS0+XHJcblx0XHRmbG93X2luc3RhbmNlID0gXy5maW5kIF9mbG93c0RhdGEsIChmKS0+XHJcblx0XHRcdHJldHVybiBmLl9pZCA9PSBkb2MuZmxvd1xyXG5cdFx0aWYgZmxvd19pbnN0YW5jZVxyXG5cdFx0XHRpZiBhY3Rpb24gPT0gXCJhZGRlZFwiXHJcblx0XHRcdFx0Zmxvd19pbnN0YW5jZS5jb3VudCsrXHJcblx0XHRcdGVsc2UgaWYgYWN0aW9uID09IFwicmVtb3ZlZFwiXHJcblx0XHRcdFx0Zmxvd19pbnN0YW5jZS5jb3VudC0tXHJcblx0XHRlbHNlIGlmIGFjdGlvbiA9PSBcImFkZGVkXCJcclxuXHRcdFx0X2Zsb3dzRGF0YS5wdXNoIHtfaWQ6IGRvYy5mbG93LCBjYXRlZ29yeTogZG9jLmNhdGVnb3J5LCBjb3VudDogMX1cclxuXHJcblx0XHRzZWxmLmNoYW5nZWQoXCJmbG93X2luc3RhbmNlc1wiLCBzcGFjZUlkLCB7Zmxvd3M6IF9mbG93c0RhdGF9KTtcclxuXHJcblx0X2luaXQgPSB0cnVlXHJcblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtmaWVsZHM6IHtfaWQ6IDEsIGluYm94X3VzZXJzOiAxLCBjY191c2VyczogMSwgZmxvdzogMSwgY2F0ZWdvcnk6IDF9fSkub2JzZXJ2ZSB7XHJcblx0XHRhZGRlZDogKGRvYyktPlxyXG5cdFx0XHRpZiAhX2luaXRcclxuXHRcdFx0XHRfY2hhbmdlRGF0YShkb2MsIFwiYWRkZWRcIilcclxuXHRcdHJlbW92ZWQ6IChkb2MpLT5cclxuXHRcdFx0aWYgIV9pbml0XHJcblx0XHRcdFx0X2NoYW5nZURhdGEoZG9jLCBcInJlbW92ZWRcIilcclxuXHR9XHJcblx0X2luaXQgPSBmYWxzZVxyXG5cclxuXHRzZWxmLnJlYWR5KCk7XHJcblx0c2VsZi5vblN0b3AgKCktPlxyXG5cdFx0aGFuZGxlLnN0b3AoKSIsIlxuLypcbk1ldGVvci5wdWJsaXNoQ29tcG9zaXRlIFwidXNlcl9pbmJveF9pbnN0YW5jZVwiLCAoKS0+XG5cdHVubGVzcyB0aGlzLnVzZXJJZFxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcblxuXHR1c2VyU3BhY2VJZHMgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcblx0XHR1c2VyOiB0aGlzLnVzZXJJZCxcblx0XHR1c2VyX2FjY2VwdGVkOiB0cnVlXG5cdH0sIHtmaWVsZHM6IHtzcGFjZTogMX19KS5mZXRjaCgpLmdldEVhY2goXCJzcGFjZVwiKTtcblx0cXVlcnkgPSB7c3BhY2U6IHskaW46IHVzZXJTcGFjZUlkc319XG5cblx0cXVlcnkuJG9yID0gW3tpbmJveF91c2VyczogdGhpcy51c2VySWR9LCB7Y2NfdXNlcnM6IHRoaXMudXNlcklkfV1cblxuXHRmaW5kOiAtPlxuXHRcdGRiLmluc3RhbmNlcy5maW5kKHF1ZXJ5LCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0c3BhY2U6IDEsXG5cdFx0XHRcdGFwcGxpY2FudF9uYW1lOiAxLFxuXHRcdFx0XHRmbG93OiAxLFxuXHRcdFx0XHRpbmJveF91c2VyczogMSxcblx0XHRcdFx0Y2NfdXNlcnM6IDEsXG5cdFx0XHRcdHN0YXRlOiAxLFxuXHRcdFx0XHRuYW1lOiAxLFxuXHRcdFx0XHRtb2RpZmllZDogMSxcblx0XHRcdFx0Zm9ybTogMVxuXHRcdFx0fSwgc29ydDoge21vZGlmaWVkOiAtMX0sIHNraXA6IDAsIGxpbWl0OiAyMDBcblx0XHR9KTtcblx0Y2hpbGRyZW46IFtcblx0XHR7XG5cdFx0XHRmaW5kOiAoaW5zdGFuY2UsIHBvc3QpLT5cblx0XHRcdFx0ZGIuZmxvd3MuZmluZCh7X2lkOiBpbnN0YW5jZS5mbG93fSwge2ZpZWxkczoge25hbWU6IDEsIHNwYWNlOiAxfX0pO1xuXHRcdH1cblx0XVxuICovXG5cbi8qXG5NZXRlb3IucHVibGlzaCAnbXlfaW5ib3hfaW5zdGFuY2VzJywgKHNwYWNlSWQpLT5cblx0dW5sZXNzIHRoaXMudXNlcklkXG5cdFx0cmV0dXJuIHRoaXMucmVhZHkoKVxuXG5cdHNlbGYgPSB0aGlzO1xuXG5cdCAqXHR1c2VyU3BhY2VJZHMgPSBkYi5zcGFjZV91c2Vycy5maW5kKHtcblx0ICpcdFx0dXNlcjogdGhpcy51c2VySWQsXG5cdCAqXHRcdHVzZXJfYWNjZXB0ZWQ6IHRydWVcblx0ICpcdH0sIHtmaWVsZHM6IHtzcGFjZTogMX19KS5mZXRjaCgpLmdldEVhY2goXCJzcGFjZVwiKTtcblxuXHRxdWVyeSA9IHtzcGFjZTogc3BhY2VJZH1cblxuXHRxdWVyeS4kb3IgPSBbe2luYm94X3VzZXJzOiB0aGlzLnVzZXJJZH0sIHtjY191c2VyczogdGhpcy51c2VySWR9XVxuXG5cdGZpZWxkcyA9IHtcblx0XHRzcGFjZTogMSxcbiAqXHRcdGFwcGxpY2FudF9uYW1lOiAxLFxuXHRcdGZsb3c6IDEsXG5cdFx0aW5ib3hfdXNlcnM6IDEsXG5cdFx0Y2NfdXNlcnM6IDEsXG5cdFx0c3RhdGU6IDEsXG4gKlx0XHRuYW1lOiAxLFxuICpcdFx0bW9kaWZpZWQ6IDEsXG5cdFx0Zm9ybTogMVxuXHR9XG5cblx0aGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtzb3J0OiB7bW9kaWZpZWQ6IC0xfSwgc2tpcDogMCwgbGltaXQ6IDUwMH0pLm9ic2VydmVDaGFuZ2VzIHtcblx0XHRhZGRlZDogKGlkKS0+XG5cdFx0XHRpbnN0YW5jZSA9IGRiLmluc3RhbmNlcy5maW5kT25lKHtfaWQ6IGlkfSwge2ZpZWxkczogZmllbGRzfSlcblx0XHRcdHJldHVybiBpZiBub3QgaW5zdGFuY2Vcblx0XHRcdGluc3RhbmNlLmlzX2NjID0gaW5zdGFuY2UuY2NfdXNlcnM/LmluY2x1ZGVzKHNlbGYudXNlcklkKSB8fCBmYWxzZVxuXHRcdFx0ZGVsZXRlIGluc3RhbmNlLmNjX3VzZXJzXG5cdFx0XHRzZWxmLmFkZGVkKFwiaW5zdGFuY2VzXCIsIGlkLCBpbnN0YW5jZSlcblx0XHRjaGFuZ2VkOiAoaWQpLT5cblx0XHRcdGluc3RhbmNlID0gZGIuaW5zdGFuY2VzLmZpbmRPbmUoe19pZDogaWR9LCB7ZmllbGRzOiBmaWVsZHN9KVxuXHRcdFx0cmV0dXJuIGlmIG5vdCBpbnN0YW5jZVxuXHRcdFx0aW5zdGFuY2UuaXNfY2MgPSBpbnN0YW5jZS5jY191c2Vycz8uaW5jbHVkZXMoc2VsZi51c2VySWQpIHx8IGZhbHNlXG5cdFx0XHRkZWxldGUgaW5zdGFuY2UuY2NfdXNlcnNcblx0XHRcdHNlbGYuY2hhbmdlZChcImluc3RhbmNlc1wiLCBpZCwgaW5zdGFuY2UpO1xuXHRcdHJlbW92ZWQ6IChpZCktPlxuXHRcdFx0c2VsZi5yZW1vdmVkKFwiaW5zdGFuY2VzXCIsIGlkKTtcblx0fVxuXG5cdHNlbGYucmVhZHkoKTtcblx0c2VsZi5vblN0b3AgKCktPlxuXHRcdGhhbmRsZS5zdG9wKClcbiAqL1xudmFyIF9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlLCBfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZTtcblxuX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUgPSBmdW5jdGlvbihzcGFjZUlkLCB1c2VySWQsIF9pdGVtcywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGRiLmluc3RhbmNlcy5yYXdDb2xsZWN0aW9uKCkuYWdncmVnYXRlKFtcbiAgICB7XG4gICAgICAkbWF0Y2g6IHtcbiAgICAgICAgc3BhY2U6IHNwYWNlSWQsXG4gICAgICAgICRvcjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluYm94X3VzZXJzOiB1c2VySWRcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBjY191c2VyczogdXNlcklkXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgJGdyb3VwOiB7XG4gICAgICAgIF9pZDoge1xuICAgICAgICAgIGZsb3c6IFwiJGZsb3dcIixcbiAgICAgICAgICBjYXRlZ29yeTogXCIkY2F0ZWdvcnlcIlxuICAgICAgICB9LFxuICAgICAgICBjb3VudDoge1xuICAgICAgICAgICRzdW06IDFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXSkudG9BcnJheShmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGRvYykge1xuICAgICAgcmV0dXJuIF9pdGVtcy5wdXNoKGRvYyk7XG4gICAgfSk7XG4gICAgaWYgKGNhbGxiYWNrICYmIF8uaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbl9hc3luY19nZXRfZmxvd19pbnN0YW5jZXNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhfZ2V0X2Zsb3dfaW5zdGFuY2VzX2FnZ3JlZ2F0ZSk7XG5cbk1ldGVvci5wdWJsaXNoKCdteV9pbmJveF9mbG93X2luc3RhbmNlc19jb3VudCcsIGZ1bmN0aW9uKHNwYWNlSWQpIHtcbiAgdmFyIF9jaGFuZ2VEYXRhLCBfZmxvd3NEYXRhLCBfaW5pdCwgZGF0YSwgaGFuZGxlLCBxdWVyeSwgc2VsZjtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgc2VsZiA9IHRoaXM7XG4gIHF1ZXJ5ID0ge1xuICAgIHNwYWNlOiBzcGFjZUlkXG4gIH07XG4gIHF1ZXJ5LiRvciA9IFtcbiAgICB7XG4gICAgICBpbmJveF91c2VyczogdGhpcy51c2VySWRcbiAgICB9LCB7XG4gICAgICBjY191c2VyczogdGhpcy51c2VySWRcbiAgICB9XG4gIF07XG4gIGRhdGEgPSBbXTtcbiAgX2FzeW5jX2dldF9mbG93X2luc3RhbmNlc19hZ2dyZWdhdGUoc3BhY2VJZCwgc2VsZi51c2VySWQsIGRhdGEpO1xuICBfZmxvd3NEYXRhID0gW107XG4gIF8uZWFjaChkYXRhLCBmdW5jdGlvbihkYXRhSXRlbSkge1xuICAgIHJldHVybiBfZmxvd3NEYXRhLnB1c2goe1xuICAgICAgX2lkOiBkYXRhSXRlbS5faWQuZmxvdyxcbiAgICAgIGNhdGVnb3J5OiBkYXRhSXRlbS5faWQuY2F0ZWdvcnksXG4gICAgICBjb3VudDogZGF0YUl0ZW0uY291bnRcbiAgICB9KTtcbiAgfSk7XG4gIHNlbGYuYWRkZWQoXCJmbG93X2luc3RhbmNlc1wiLCBzcGFjZUlkLCB7XG4gICAgZmxvd3M6IF9mbG93c0RhdGFcbiAgfSk7XG4gIF9jaGFuZ2VEYXRhID0gZnVuY3Rpb24oZG9jLCBhY3Rpb24pIHtcbiAgICB2YXIgZmxvd19pbnN0YW5jZTtcbiAgICBmbG93X2luc3RhbmNlID0gXy5maW5kKF9mbG93c0RhdGEsIGZ1bmN0aW9uKGYpIHtcbiAgICAgIHJldHVybiBmLl9pZCA9PT0gZG9jLmZsb3c7XG4gICAgfSk7XG4gICAgaWYgKGZsb3dfaW5zdGFuY2UpIHtcbiAgICAgIGlmIChhY3Rpb24gPT09IFwiYWRkZWRcIikge1xuICAgICAgICBmbG93X2luc3RhbmNlLmNvdW50Kys7XG4gICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZW1vdmVkXCIpIHtcbiAgICAgICAgZmxvd19pbnN0YW5jZS5jb3VudC0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcImFkZGVkXCIpIHtcbiAgICAgIF9mbG93c0RhdGEucHVzaCh7XG4gICAgICAgIF9pZDogZG9jLmZsb3csXG4gICAgICAgIGNhdGVnb3J5OiBkb2MuY2F0ZWdvcnksXG4gICAgICAgIGNvdW50OiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGYuY2hhbmdlZChcImZsb3dfaW5zdGFuY2VzXCIsIHNwYWNlSWQsIHtcbiAgICAgIGZsb3dzOiBfZmxvd3NEYXRhXG4gICAgfSk7XG4gIH07XG4gIF9pbml0ID0gdHJ1ZTtcbiAgaGFuZGxlID0gZGIuaW5zdGFuY2VzLmZpbmQocXVlcnksIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIF9pZDogMSxcbiAgICAgIGluYm94X3VzZXJzOiAxLFxuICAgICAgY2NfdXNlcnM6IDEsXG4gICAgICBmbG93OiAxLFxuICAgICAgY2F0ZWdvcnk6IDFcbiAgICB9XG4gIH0pLm9ic2VydmUoe1xuICAgIGFkZGVkOiBmdW5jdGlvbihkb2MpIHtcbiAgICAgIGlmICghX2luaXQpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFuZ2VEYXRhKGRvYywgXCJhZGRlZFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZWQ6IGZ1bmN0aW9uKGRvYykge1xuICAgICAgaWYgKCFfaW5pdCkge1xuICAgICAgICByZXR1cm4gX2NoYW5nZURhdGEoZG9jLCBcInJlbW92ZWRcIik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgX2luaXQgPSBmYWxzZTtcbiAgc2VsZi5yZWFkeSgpO1xuICByZXR1cm4gc2VsZi5vblN0b3AoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhhbmRsZS5zdG9wKCk7XG4gIH0pO1xufSk7XG4iLCJcclxuTWV0ZW9yLnB1Ymxpc2ggJ2Zsb3dfbWFpbl9hdHRhY2hfdGVtcGxhdGUnLCAoc3BhY2VJZCwgZmxvd0lkKS0+XHJcblx0Y2hlY2soc3BhY2VJZCwgU3RyaW5nKVxyXG5cdGNoZWNrKGZsb3dJZCwgU3RyaW5nKVxyXG5cclxuXHR1bmxlc3MgdGhpcy51c2VySWRcclxuXHRcdHJldHVybiB0aGlzLnJlYWR5KClcclxuXHJcblx0dW5sZXNzIHNwYWNlSWQgJiYgZmxvd0lkXHJcblx0XHRyZXR1cm4gdGhpcy5yZWFkeSgpXHJcblxyXG5cdHJldHVybiBDcmVhdG9yLmdldENvbGxlY3Rpb24oJ2Ntc19maWxlcycpLmZpbmQoeyBzcGFjZTogc3BhY2VJZCwgJ3BhcmVudC5vJzogJ2Zsb3dzJywgJ3BhcmVudC5pZHMnOiBmbG93SWQsICBuYW1lOiAn5q2j5paHLmRvY3gnIH0pXHJcbiIsIk1ldGVvci5wdWJsaXNoKCdmbG93X21haW5fYXR0YWNoX3RlbXBsYXRlJywgZnVuY3Rpb24oc3BhY2VJZCwgZmxvd0lkKSB7XG4gIGNoZWNrKHNwYWNlSWQsIFN0cmluZyk7XG4gIGNoZWNrKGZsb3dJZCwgU3RyaW5nKTtcbiAgaWYgKCF0aGlzLnVzZXJJZCkge1xuICAgIHJldHVybiB0aGlzLnJlYWR5KCk7XG4gIH1cbiAgaWYgKCEoc3BhY2VJZCAmJiBmbG93SWQpKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKTtcbiAgfVxuICByZXR1cm4gQ3JlYXRvci5nZXRDb2xsZWN0aW9uKCdjbXNfZmlsZXMnKS5maW5kKHtcbiAgICBzcGFjZTogc3BhY2VJZCxcbiAgICAncGFyZW50Lm8nOiAnZmxvd3MnLFxuICAgICdwYXJlbnQuaWRzJzogZmxvd0lkLFxuICAgIG5hbWU6ICfmraPmlocuZG9jeCdcbiAgfSk7XG59KTtcbiIsIndvcmtmbG93VGVtcGxhdGUgPSB7fVxyXG5cclxuI+WPr+eUqOatpOiEmuacrOS7juaooeadv+W3peS9nOWMuuWBmuaJuemHj+WvvOWHuu+8mlxyXG4j5L2/55So566h55CG5ZGY6LSm5oi355m75b2V5ZCO77yM6L+b5YWlRmxvd01vZHVsZXPvvIzlnKjmjqfliLblj7DmiafooYzku6XkuIvohJrmnKzljbPlj69cclxuI2RiLmZvcm1zLmZpbmQoe3N0YXRlOlwiZW5hYmxlZFwifSkuZm9yRWFjaChmdW5jdGlvbihmb3JtKXt3aW5kb3cub3BlbihNZXRlb3IuYWJzb2x1dGVVcmwoXCJhcGkvd29ya2Zsb3cvZXhwb3J0L2Zvcm0/Zm9ybT1cIitmb3JtLl9pZCkpfSlcclxud29ya2Zsb3dUZW1wbGF0ZVtcImVuXCJdID1bXVxyXG5cclxuI+WPr+eUqOatpOiEmuacrOS7juaooeadv+W3peS9nOWMuuWBmuaJuemHj+WvvOWHuu+8mlxyXG4j5L2/55So566h55CG5ZGY6LSm5oi355m75b2V5ZCO77yM6L+b5YWl5qih5p2/5LiT5Yy677yM5Zyo5o6n5Yi25Y+w5omn6KGM5Lul5LiL6ISa5pys5Y2z5Y+vXHJcbiNkYi5mb3Jtcy5maW5kKHtzdGF0ZTpcImVuYWJsZWRcIn0pLmZvckVhY2goZnVuY3Rpb24oZm9ybSl7d2luZG93Lm9wZW4oTWV0ZW9yLmFic29sdXRlVXJsKFwiYXBpL3dvcmtmbG93L2V4cG9ydC9mb3JtP2Zvcm09XCIrZm9ybS5faWQpKX0pXHJcbndvcmtmbG93VGVtcGxhdGVbXCJ6aC1DTlwiXSA9W11cclxuXHJcbk1ldGVvci5zdGFydHVwICgpLT5cclxuXHRmcyA9IHJlcXVpcmUoJ2ZzJylcclxuXHRwYXRoID0gcmVxdWlyZSgncGF0aCcpXHJcblx0bWltZSA9IHJlcXVpcmUoJ21pbWUnKVxyXG5cdHJlYWRGaWxlTGlzdCA9IChwYXRoRGlyLCBmaWxlc0xpc3QpLT5cclxuXHRcdGZpbGVzID0gZnMucmVhZGRpclN5bmMocGF0aERpcilcclxuXHRcdGZpbGVzLmZvckVhY2ggKG5hbWUsIGluZGV4KS0+XHJcblx0XHRcdHN0YXQgPSBmcy5zdGF0U3luYyhwYXRoLmpvaW4ocGF0aERpciwgbmFtZSkpXHJcblx0XHRcdGlmIHN0YXQuaXNEaXJlY3RvcnkoKVxyXG5cdFx0XHRcdCMg6YCS5b2S6K+75Y+W5paH5Lu2XHJcblx0XHRcdFx0cmVhZEZpbGVMaXN0KHBhdGguam9pbihwYXRoRGlyLCBuYW1lKSwgZmlsZXNMaXN0KVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0b2JqID0ge31cclxuXHRcdFx0XHRvYmoucGF0aCA9IHBhdGhEaXJcclxuXHRcdFx0XHRvYmoubmFtZSA9IG5hbWVcclxuXHRcdFx0XHRmaWxlc0xpc3QucHVzaChvYmopXHJcblxyXG5cdCPojrflj5Z6aC1jbuaWh+S7tuWkueS4i+eahOaJgOacieaWh+S7tlxyXG5cdGZpbGVzTGlzdF9jbiA9IFtdXHJcblx0cGF0aF9jbiA9IE1ldGVvci5zZXR0aW5ncy53b3JrZmxvd1RlbXBsYXRlcz8ucGF0aF9jblxyXG5cdGlmIHBhdGhfY25cclxuXHRcdGFic29sdXRlX3BhdGhfY24gPSBwYXRoLnJlc29sdmUocGF0aF9jbilcclxuXHRcdGNvbnNvbGUubG9nIFwiYWJzb2x1dGVfcGF0aF9jblwiLCBhYnNvbHV0ZV9wYXRoX2NuXHJcblx0XHRpZiBmcy5leGlzdHNTeW5jKGFic29sdXRlX3BhdGhfY24pXHJcblx0XHRcdHJlYWRGaWxlTGlzdChhYnNvbHV0ZV9wYXRoX2NuLCBmaWxlc0xpc3RfY24pXHJcblx0XHRcdGZpbGVzTGlzdF9jbi5mb3JFYWNoIChmaWxlKS0+XHJcblx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0XHRpZiBtaW1lLmdldFR5cGUoZmlsZS5uYW1lKSBpcyBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG5cdFx0XHRcdFx0XHRkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSksICd1dGY4JylcclxuXHRcdFx0XHRcdFx0d29ya2Zsb3dUZW1wbGF0ZVtcInpoLUNOXCJdLnB1c2goSlNPTi5wYXJzZShkYXRhKSlcclxuXHRcdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yIFwi6I635Y+WemgtY27mlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcIiwgcGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKVxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblxyXG5cdCPojrflj5Zlbi11c+aWh+S7tuWkueS4i+eahOaJgOacieaWh+S7tlxyXG5cdGZpbGVzTGlzdF91cyA9IFtdXHJcblx0cGF0aF91cyA9IE1ldGVvci5zZXR0aW5ncy53b3JrZmxvd1RlbXBsYXRlcz8ucGF0aF91c1xyXG5cdGlmIHBhdGhfdXNcclxuXHRcdGFic29sdXRlX3BhdGhfdXMgPSBwYXRoLnJlc29sdmUocGF0aF91cylcclxuXHRcdGNvbnNvbGUubG9nIFwiYWJzb2x1dGVfcGF0aF91c1wiLCBhYnNvbHV0ZV9wYXRoX3VzXHJcblx0XHRpZiBmcy5leGlzdHNTeW5jKGFic29sdXRlX3BhdGhfdXMpXHJcblx0XHRcdHJlYWRGaWxlTGlzdChhYnNvbHV0ZV9wYXRoX3VzLCBmaWxlc0xpc3RfdXMpXHJcblx0XHRcdGZpbGVzTGlzdF91cy5mb3JFYWNoIChmaWxlKS0+XHJcblx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0XHRpZiBtaW1lLmdldFR5cGUoZmlsZS5uYW1lKSBpcyBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG5cdFx0XHRcdFx0XHRkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSksICd1dGY4JylcclxuXHRcdFx0XHRcdFx0d29ya2Zsb3dUZW1wbGF0ZVtcImVuXCJdLnB1c2goSlNPTi5wYXJzZShkYXRhKSlcclxuXHRcdFx0XHRjYXRjaCBlXHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yIFwi6I635Y+WZW4tdXPmlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcIiwgcGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKVxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHRcclxuXHJcblxyXG4iLCIgICAgICAgICAgICAgICAgICAgICBcblxud29ya2Zsb3dUZW1wbGF0ZSA9IHt9O1xuXG53b3JrZmxvd1RlbXBsYXRlW1wiZW5cIl0gPSBbXTtcblxud29ya2Zsb3dUZW1wbGF0ZVtcInpoLUNOXCJdID0gW107XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICB2YXIgYWJzb2x1dGVfcGF0aF9jbiwgYWJzb2x1dGVfcGF0aF91cywgZmlsZXNMaXN0X2NuLCBmaWxlc0xpc3RfdXMsIGZzLCBtaW1lLCBwYXRoLCBwYXRoX2NuLCBwYXRoX3VzLCByZWFkRmlsZUxpc3QsIHJlZiwgcmVmMTtcbiAgZnMgPSByZXF1aXJlKCdmcycpO1xuICBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICBtaW1lID0gcmVxdWlyZSgnbWltZScpO1xuICByZWFkRmlsZUxpc3QgPSBmdW5jdGlvbihwYXRoRGlyLCBmaWxlc0xpc3QpIHtcbiAgICB2YXIgZmlsZXM7XG4gICAgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhwYXRoRGlyKTtcbiAgICByZXR1cm4gZmlsZXMuZm9yRWFjaChmdW5jdGlvbihuYW1lLCBpbmRleCkge1xuICAgICAgdmFyIG9iaiwgc3RhdDtcbiAgICAgIHN0YXQgPSBmcy5zdGF0U3luYyhwYXRoLmpvaW4ocGF0aERpciwgbmFtZSkpO1xuICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICByZXR1cm4gcmVhZEZpbGVMaXN0KHBhdGguam9pbihwYXRoRGlyLCBuYW1lKSwgZmlsZXNMaXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iaiA9IHt9O1xuICAgICAgICBvYmoucGF0aCA9IHBhdGhEaXI7XG4gICAgICAgIG9iai5uYW1lID0gbmFtZTtcbiAgICAgICAgcmV0dXJuIGZpbGVzTGlzdC5wdXNoKG9iaik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGZpbGVzTGlzdF9jbiA9IFtdO1xuICBwYXRoX2NuID0gKHJlZiA9IE1ldGVvci5zZXR0aW5ncy53b3JrZmxvd1RlbXBsYXRlcykgIT0gbnVsbCA/IHJlZi5wYXRoX2NuIDogdm9pZCAwO1xuICBpZiAocGF0aF9jbikge1xuICAgIGFic29sdXRlX3BhdGhfY24gPSBwYXRoLnJlc29sdmUocGF0aF9jbik7XG4gICAgY29uc29sZS5sb2coXCJhYnNvbHV0ZV9wYXRoX2NuXCIsIGFic29sdXRlX3BhdGhfY24pO1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGFic29sdXRlX3BhdGhfY24pKSB7XG4gICAgICByZWFkRmlsZUxpc3QoYWJzb2x1dGVfcGF0aF9jbiwgZmlsZXNMaXN0X2NuKTtcbiAgICAgIGZpbGVzTGlzdF9jbi5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgdmFyIGRhdGEsIGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKG1pbWUuZ2V0VHlwZShmaWxlLm5hbWUpID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgICAgICAgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZmlsZS5wYXRoLCBmaWxlLm5hbWUpLCAndXRmOCcpO1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtmbG93VGVtcGxhdGVbXCJ6aC1DTlwiXS5wdXNoKEpTT04ucGFyc2UoZGF0YSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIuiOt+WPlnpoLWNu5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2XCIsIHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSkpO1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZmlsZXNMaXN0X3VzID0gW107XG4gIHBhdGhfdXMgPSAocmVmMSA9IE1ldGVvci5zZXR0aW5ncy53b3JrZmxvd1RlbXBsYXRlcykgIT0gbnVsbCA/IHJlZjEucGF0aF91cyA6IHZvaWQgMDtcbiAgaWYgKHBhdGhfdXMpIHtcbiAgICBhYnNvbHV0ZV9wYXRoX3VzID0gcGF0aC5yZXNvbHZlKHBhdGhfdXMpO1xuICAgIGNvbnNvbGUubG9nKFwiYWJzb2x1dGVfcGF0aF91c1wiLCBhYnNvbHV0ZV9wYXRoX3VzKTtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhhYnNvbHV0ZV9wYXRoX3VzKSkge1xuICAgICAgcmVhZEZpbGVMaXN0KGFic29sdXRlX3BhdGhfdXMsIGZpbGVzTGlzdF91cyk7XG4gICAgICByZXR1cm4gZmlsZXNMaXN0X3VzLmZvckVhY2goZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICB2YXIgZGF0YSwgZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAobWltZS5nZXRUeXBlKGZpbGUubmFtZSkgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAgICAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihmaWxlLnBhdGgsIGZpbGUubmFtZSksICd1dGY4Jyk7XG4gICAgICAgICAgICByZXR1cm4gd29ya2Zsb3dUZW1wbGF0ZVtcImVuXCJdLnB1c2goSlNPTi5wYXJzZShkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwi6I635Y+WZW4tdXPmlofku7blpLnkuIvnmoTmiYDmnInmlofku7ZcIiwgcGF0aC5qb2luKGZpbGUucGF0aCwgZmlsZS5uYW1lKSk7XG4gICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSk7XG4iLCIjIyNcclxuKiAgICAqICAgICogICAgKiAgICAqICAgICpcclxu4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKxcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICB8XHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSUIGRheSBvZiB3ZWVrICgwIC0gNykgKDAgb3IgNyBpcyBTdW4pXHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIAgbW9udGggKDEgLSAxMilcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGRheSBvZiBtb250aCAoMSAtIDMxKVxyXG7ilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBob3VyICgwIC0gMjMpXHJcbuKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgbWludXRlICgwIC0gNTkpXHJcbuKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBzZWNvbmQgKDAgLSA1OSwgT1BUSU9OQUwpXHJcbiMjI1xyXG5NZXRlb3Iuc3RhcnR1cCAtPlxyXG5cdGlmIE1ldGVvci5zZXR0aW5ncy5jcm9uPy5hdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb25cclxuXHRcdHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpXHJcblx0XHQjIOWumuaXtuaJp+ihjOWQjOatpVxyXG5cdFx0cnVsZSA9IE1ldGVvci5zZXR0aW5ncy5jcm9uLmF1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvblxyXG5cdFx0Z29fbmV4dCA9IHRydWVcclxuXHRcdHNjaGVkdWxlLnNjaGVkdWxlSm9iIHJ1bGUsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQgKCktPlxyXG5cdFx0XHR0cnlcclxuXHRcdFx0XHRpZiAhZ29fbmV4dFxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0Z29fbmV4dCA9IGZhbHNlXHJcblx0XHRcdFx0Y29uc29sZS50aW1lICdhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24nXHJcblxyXG5cdFx0XHRcdG5vdyA9IG5ldyBEYXRlXHJcblxyXG5cdFx0XHRcdCMg5bCG5aeU5omY6KeE5YiZ6K6+572u5Li65LiN5Y+v55SoXHJcblx0XHRcdFx0ZGIucHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzLnVwZGF0ZSh7IGVuYWJsZWQ6IHRydWUsIGVuZF90aW1lOiB7ICRsdGU6IG5vdyB9IH0sIHsgJHNldDogeyBlbmFibGVkOiBmYWxzZSB9IH0sIHsgbXVsdGkgOnRydWUgfSlcclxuXHJcblx0XHRcdFx0Y29uc29sZS50aW1lRW5kICdhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24nXHJcblx0XHRcdFx0Z29fbmV4dCA9IHRydWVcclxuXHJcblx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yIFwiQVVUTyBBVVRPX0ZJTklTSF9QUk9DRVNTX0RFTEVHQVRJT04gRVJST1I6IFwiXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciBlLnN0YWNrXHJcblx0XHRcdFx0Z29fbmV4dCA9IHRydWVcclxuXHJcblx0XHQsIChlKS0+XHJcblx0XHRcdGNvbnNvbGUubG9nICdGYWlsZWQgdG8gYmluZCBlbnZpcm9ubWVudDogYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uLmNvZmZlZSdcclxuXHRcdFx0Y29uc29sZS5sb2cgZS5zdGFja1xyXG4iLCJcbi8qXG4qICAgICogICAgKiAgICAqICAgICogICAgKlxu4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKxcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAgfFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJQgZGF5IG9mIHdlZWsgKDAgLSA3KSAoMCBvciA3IGlzIFN1bilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIAgbW9udGggKDEgLSAxMilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBkYXkgb2YgbW9udGggKDEgLSAzMSlcbuKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGhvdXIgKDAgLSAyMylcbuKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgbWludXRlICgwIC0gNTkpXG7ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc2Vjb25kICgwIC0gNTksIE9QVElPTkFMKVxuICovXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgdmFyIGdvX25leHQsIHJlZiwgcnVsZSwgc2NoZWR1bGU7XG4gIGlmICgocmVmID0gTWV0ZW9yLnNldHRpbmdzLmNyb24pICE9IG51bGwgPyByZWYuYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uIDogdm9pZCAwKSB7XG4gICAgc2NoZWR1bGUgPSByZXF1aXJlKCdub2RlLXNjaGVkdWxlJyk7XG4gICAgcnVsZSA9IE1ldGVvci5zZXR0aW5ncy5jcm9uLmF1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbjtcbiAgICBnb19uZXh0ID0gdHJ1ZTtcbiAgICByZXR1cm4gc2NoZWR1bGUuc2NoZWR1bGVKb2IocnVsZSwgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlLCBub3c7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWdvX25leHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ29fbmV4dCA9IGZhbHNlO1xuICAgICAgICBjb25zb2xlLnRpbWUoJ2F1dG9fZmluaXNoX3Byb2Nlc3NfZGVsZWdhdGlvbicpO1xuICAgICAgICBub3cgPSBuZXcgRGF0ZTtcbiAgICAgICAgZGIucHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzLnVwZGF0ZSh7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBlbmRfdGltZToge1xuICAgICAgICAgICAgJGx0ZTogbm93XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgJHNldDoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS50aW1lRW5kKCdhdXRvX2ZpbmlzaF9wcm9jZXNzX2RlbGVnYXRpb24nKTtcbiAgICAgICAgcmV0dXJuIGdvX25leHQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQVVUTyBBVVRPX0ZJTklTSF9QUk9DRVNTX0RFTEVHQVRJT04gRVJST1I6IFwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgICAgcmV0dXJuIGdvX25leHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gYmluZCBlbnZpcm9ubWVudDogYXV0b19maW5pc2hfcHJvY2Vzc19kZWxlZ2F0aW9uLmNvZmZlZScpO1xuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGUuc3RhY2spO1xuICAgIH0pKTtcbiAgfVxufSk7XG4iLCIjIyNcclxuKiAgICAqICAgICogICAgKiAgICAqICAgICpcclxu4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKxcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICB8XHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAg4pSUIGRheSBvZiB3ZWVrICgwIC0gNykgKDAgb3IgNyBpcyBTdW4pXHJcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIAgbW9udGggKDEgLSAxMilcclxu4pSCICAgIOKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGRheSBvZiBtb250aCAoMSAtIDMxKVxyXG7ilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBob3VyICgwIC0gMjMpXHJcbuKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgbWludXRlICgwIC0gNTkpXHJcbuKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBzZWNvbmQgKDAgLSA1OSwgT1BUSU9OQUwpXHJcbiMjI1xyXG5NZXRlb3Iuc3RhcnR1cCAtPlxyXG5cdGlmIE1ldGVvci5zZXR0aW5ncy5jcm9uPy50aW1lb3V0X2F1dG9fc3VibWl0XHJcblx0XHRzY2hlZHVsZSA9IHJlcXVpcmUoJ25vZGUtc2NoZWR1bGUnKVxyXG5cdFx0IyDlrprml7bmiafooYzlkIzmraVcclxuXHRcdHJ1bGUgPSBNZXRlb3Iuc2V0dGluZ3MuY3Jvbi50aW1lb3V0X2F1dG9fc3VibWl0XHJcblx0XHRnb19uZXh0ID0gdHJ1ZVxyXG5cdFx0c2NoZWR1bGUuc2NoZWR1bGVKb2IgcnVsZSwgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCAoKS0+XHJcblx0XHRcdHRyeVxyXG5cdFx0XHRcdGlmICFnb19uZXh0XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRnb19uZXh0ID0gZmFsc2VcclxuXHRcdFx0XHRjb25zb2xlLnRpbWUgJ3RpbWVvdXRfYXV0b19zdWJtaXQnXHJcblxyXG5cdFx0XHRcdHV1Zmxvd01hbmFnZXIudGltZW91dEF1dG9TdWJtaXQoKVxyXG5cclxuXHRcdFx0XHRjb25zb2xlLnRpbWVFbmQgJ3RpbWVvdXRfYXV0b19zdWJtaXQnXHJcblx0XHRcdFx0Z29fbmV4dCA9IHRydWVcclxuXHJcblx0XHRcdGNhdGNoIGVcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yIFwiQVVUTyBUSU1FT1VUX0FVVE9fU1VCTUlUIEVSUk9SOiBcIlxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IgZS5zdGFja1xyXG5cdFx0XHRcdGdvX25leHQgPSB0cnVlXHJcblxyXG5cdFx0LCAoZSktPlxyXG5cdFx0XHRjb25zb2xlLmxvZyAnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQ6IHRpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlJ1xyXG5cdFx0XHRjb25zb2xlLmxvZyBlLnN0YWNrXHJcblxyXG5NZXRlb3IubWV0aG9kc1xyXG5cdHRpbWVvdXRfYXV0b19zdWJtaXQ6IChpbnNfaWQpLT5cclxuXHRcdHV1Zmxvd01hbmFnZXIudGltZW91dEF1dG9TdWJtaXQoaW5zX2lkKVxyXG5cdFx0cmV0dXJuIHRydWVcclxuXHJcblxyXG4iLCJcbi8qXG4qICAgICogICAgKiAgICAqICAgICogICAgKlxu4pSsICAgIOKUrCAgICDilKwgICAg4pSsICAgIOKUrCAgICDilKxcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilIIgICAgfFxu4pSCICAgIOKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJQgZGF5IG9mIHdlZWsgKDAgLSA3KSAoMCBvciA3IGlzIFN1bilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUgiAgICDilJTilIDilIDilIDilIDilIAgbW9udGggKDEgLSAxMilcbuKUgiAgICDilIIgICAg4pSCICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBkYXkgb2YgbW9udGggKDEgLSAzMSlcbuKUgiAgICDilIIgICAg4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIGhvdXIgKDAgLSAyMylcbuKUgiAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgbWludXRlICgwIC0gNTkpXG7ilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc2Vjb25kICgwIC0gNTksIE9QVElPTkFMKVxuICovXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgdmFyIGdvX25leHQsIHJlZiwgcnVsZSwgc2NoZWR1bGU7XG4gIGlmICgocmVmID0gTWV0ZW9yLnNldHRpbmdzLmNyb24pICE9IG51bGwgPyByZWYudGltZW91dF9hdXRvX3N1Ym1pdCA6IHZvaWQgMCkge1xuICAgIHNjaGVkdWxlID0gcmVxdWlyZSgnbm9kZS1zY2hlZHVsZScpO1xuICAgIHJ1bGUgPSBNZXRlb3Iuc2V0dGluZ3MuY3Jvbi50aW1lb3V0X2F1dG9fc3VibWl0O1xuICAgIGdvX25leHQgPSB0cnVlO1xuICAgIHJldHVybiBzY2hlZHVsZS5zY2hlZHVsZUpvYihydWxlLCBNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGU7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWdvX25leHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ29fbmV4dCA9IGZhbHNlO1xuICAgICAgICBjb25zb2xlLnRpbWUoJ3RpbWVvdXRfYXV0b19zdWJtaXQnKTtcbiAgICAgICAgdXVmbG93TWFuYWdlci50aW1lb3V0QXV0b1N1Ym1pdCgpO1xuICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ3RpbWVvdXRfYXV0b19zdWJtaXQnKTtcbiAgICAgICAgcmV0dXJuIGdvX25leHQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQVVUTyBUSU1FT1VUX0FVVE9fU1VCTUlUIEVSUk9SOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgICAgIHJldHVybiBnb19uZXh0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGJpbmQgZW52aXJvbm1lbnQ6IHRpbWVvdXRfYXV0b19zdWJtaXQuY29mZmVlJyk7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coZS5zdGFjayk7XG4gICAgfSkpO1xuICB9XG59KTtcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICB0aW1lb3V0X2F1dG9fc3VibWl0OiBmdW5jdGlvbihpbnNfaWQpIHtcbiAgICB1dWZsb3dNYW5hZ2VyLnRpbWVvdXRBdXRvU3VibWl0KGluc19pZCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuIiwiTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRhYnVsYXJUYWJsZXMucmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhciA9IG5ldyBUYWJ1bGFyLlRhYmxlXHJcblx0XHRuYW1lOiBcInJlbGF0ZWRfaW5zdGFuY2VzX3RhYnVsYXJcIlxyXG5cdFx0Y29sbGVjdGlvbjogZGIuaW5zdGFuY2VzXHJcblx0XHRjb2x1bW5zOiBbXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcIl9pZFwiLFxyXG5cdFx0XHRcdHRpdGxlOiAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJyZXZlcnNlXCIgaWQ9XCJyZXZlcnNlXCI+JyxcclxuXHRcdFx0XHRvcmRlcmFibGU6IGZhbHNlLFxyXG5cdFx0XHRcdHdpZHRoOiAnMXB4JyxcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdGlucHV0ID0gJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInJlbGF0ZWQtaW5zdGFuY2VzLWxpc3QtY2hlY2tib3hcIiBuYW1lPVwicmVsYXRlZF9pbnN0YW5jZXNfaWRzXCIgaWQ9XCJyZWxhdGVkX2luc3RhbmNlc19pZHNcIiB2YWx1ZT1cIicgKyBkb2MuX2lkICsgJ1wiJ1xyXG5cclxuXHRcdFx0XHRcdGlmIFRhYnVsYXJUYWJsZXMucmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhci5yZWxhdGVkX2luc3RhbmNlcz8uaW5jbHVkZXMoZG9jLl9pZClcclxuXHRcdFx0XHRcdFx0aW5wdXQgKz0gXCIgY2hlY2tlZCBcIlxyXG5cclxuXHRcdFx0XHRcdGlucHV0ICs9IFwiPlwiXHJcblx0XHRcdFx0XHRyZXR1cm4gaW5wdXRcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwibmFtZVwiLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2UsXHJcblx0XHRcdFx0d2lkdGg6ICc0NSUnLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aHJlZiA9ICcnO1xyXG5cdFx0XHRcdFx0aWYgTWV0ZW9yLmlzQ2xpZW50ICYmIChTdGVlZG9zLmlzTW9iaWxlKCkgfHwgU3RlZWRvcy5pc0NvcmRvdmEoKSlcclxuXHRcdFx0XHRcdFx0aHJlZiA9ICcnXHJcblxyXG5cdFx0XHRcdFx0YWJzb2x1dGUgPSBmYWxzZVxyXG5cclxuXHRcdFx0XHRcdGlmIE1ldGVvci5pc1NlcnZlclxyXG5cdFx0XHRcdFx0XHRhYnNvbHV0ZSA9IHRoaXMuYWJzb2x1dGVcclxuXHRcdFx0XHRcdGlmIGFic29sdXRlXHJcblx0XHRcdFx0XHRcdGhyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIitkb2Muc3BhY2UrXCIvdmlldy9yZWFkb25seS9cIiArIGRvYy5faWQgKyAnP2hpZGVfdHJhY2VzPTAnKVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRocmVmID0gU3RlZWRvcy5hYnNvbHV0ZVVybChcIndvcmtmbG93L3NwYWNlL1wiK2RvYy5zcGFjZStcIi92aWV3L3JlYWRvbmx5L1wiICsgZG9jLl9pZCArICc/aGlkZV90cmFjZXM9MCcpXHJcblx0XHRcdFx0XHRyZXR1cm4gXCI8YSBkYXRhLWlkPScje2RvYy5faWR9JyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIraHJlZitcIic+XCIgKyBkb2MubmFtZSArIFwiPC9hPlwiXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcImFwcGxpY2FudF9uYW1lXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfYXBwbGljYW50X25hbWVcIiksXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJmbG93X25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiY3VycmVudF9zdGVwX25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aWYgZG9jLnN0YXRlID09IFwiY29tcGxldGVkXCJcclxuXHRcdFx0XHRcdFx0anVkZ2UgPSBkb2MuZmluYWxfZGVjaXNpb24gfHwgXCJhcHByb3ZlZFwiXHJcblxyXG5cdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWUgPSBkb2MuY3VycmVudF9zdGVwX25hbWUgfHwgJydcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gXCJcIlwiXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInN0ZXAtY3VycmVudC1zdGF0ZSAje2p1ZGdlfVwiPiN7c3RlcF9jdXJyZW50X25hbWV9PC9kaXY+XHJcblx0XHRcdFx0XHRcdFwiXCJcIlxyXG5cdFx0XHR9XHJcblx0XHRdXHJcblxyXG5cdFx0ZG9tOiBcInRwXCIsXHJcblx0XHRsZW5ndGhDaGFuZ2U6IGZhbHNlLFxyXG5cdFx0ZXh0cmFGaWVsZHM6IFtcInN0YXRlXCIsIFwiZmluYWxfZGVjaXNpb25cIiwgXCJzcGFjZVwiLCBcImtleXdvcmRzXCJdLFxyXG5cdFx0cGFnZUxlbmd0aDogMTAsXHJcblx0XHRpbmZvOiBmYWxzZSxcclxuXHRcdHNlYXJjaGluZzogdHJ1ZSxcclxuXHRcdHJlc3BvbnNpdmU6XHJcblx0XHRcdGRldGFpbHM6IGZhbHNlXHJcblx0XHRhdXRvV2lkdGg6IGZhbHNlLFxyXG5cdFx0Y2hhbmdlU2VsZWN0b3I6IChzZWxlY3RvciwgdXNlcklkKSAtPlxyXG5cdFx0XHR1bmxlc3MgdXNlcklkXHJcblx0XHRcdFx0cmV0dXJuIHtfaWQ6IC0xfVxyXG5cclxuXHRcdFx0c3BhY2VJZCA9IHNlbGVjdG9yLnNwYWNlXHJcblx0XHRcdHVubGVzcyBzcGFjZUlkXHJcblx0XHRcdFx0aWYgc2VsZWN0b3I/LiRhbmQ/Lmxlbmd0aCA+IDBcclxuXHRcdFx0XHRcdHNwYWNlSWQgPSBzZWxlY3Rvci4kYW5kLmdldFByb3BlcnR5KCdzcGFjZScpWzBdXHJcblx0XHRcdHVubGVzcyBzcGFjZUlkXHJcblx0XHRcdFx0cmV0dXJuIHtfaWQ6IC0xfVxyXG5cdFx0XHRzcGFjZSA9IGRiLnNwYWNlcy5maW5kT25lKHNwYWNlSWQpXHJcblx0XHRcdGlmICFzcGFjZVxyXG5cdFx0XHRcdHNlbGVjdG9yLnN0YXRlID0gXCJub25lXCJcclxuXHRcdFx0aWYgIXNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VySWQpXHJcblxyXG5cdFx0XHRcdGZsb3dfaWRzID0gW11cclxuXHRcdFx0XHRjdXJTcGFjZVVzZXIgPSBkYi5zcGFjZV91c2Vycy5maW5kT25lKHtcclxuXHRcdFx0XHRcdHNwYWNlOiBzcGFjZUlkLFxyXG5cdFx0XHRcdFx0J3VzZXInOiB1c2VySWRcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdGlmIGN1clNwYWNlVXNlclxyXG5cdFx0XHRcdFx0b3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XHJcblx0XHRcdFx0XHRcdF9pZDoge1xyXG5cdFx0XHRcdFx0XHRcdCRpbjogY3VyU3BhY2VVc2VyLm9yZ2FuaXphdGlvbnNcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkuZmV0Y2goKVxyXG5cdFx0XHRcdFx0Zmxvd3MgPSBkYi5mbG93cy5maW5kKHsgc3BhY2U6IHNwYWNlSWQgfSlcclxuXHRcdFx0XHRcdGZsb3dzLmZvckVhY2ggKGZsKS0+XHJcblx0XHRcdFx0XHRcdGlmIFdvcmtmbG93TWFuYWdlci5jYW5Nb25pdG9yKGZsLCBjdXJTcGFjZVVzZXIsIG9yZ2FuaXphdGlvbnMpIHx8IFdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmbCwgY3VyU3BhY2VVc2VyLCBvcmdhbml6YXRpb25zKVxyXG5cdFx0XHRcdFx0XHRcdGZsb3dfaWRzLnB1c2goZmwuX2lkKVxyXG5cclxuXHRcdFx0XHRpZiBzZWxlY3Rvcj8uJGFuZD8ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0c2VsZWN0b3IuJGFuZFswXS4kb3IgPSBbe3N1Ym1pdHRlcjogdXNlcklkfSwge2FwcGxpY2FudDogdXNlcklkfSwge2luYm94X3VzZXJzOiB1c2VySWR9LCB7b3V0Ym94X3VzZXJzOiB1c2VySWR9LFxyXG5cdFx0XHRcdFx0XHRcdHtjY191c2VyczogdXNlcklkfSwgeyBmbG93OiB7ICRpbjogZmxvd19pZHMgfSB9XVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdF8uZXh0ZW5kIHNlbGVjdG9yLCB7XHJcblx0XHRcdFx0XHRcdCRvcjogW3tzdWJtaXR0ZXI6IHVzZXJJZH0sIHthcHBsaWNhbnQ6IHVzZXJJZH0sIHtpbmJveF91c2VyczogdXNlcklkfSwge291dGJveF91c2VyczogdXNlcklkfSxcclxuXHRcdFx0XHRcdFx0XHR7Y2NfdXNlcnM6IHVzZXJJZH0sIHsgZmxvdzogeyAkaW46IGZsb3dfaWRzIH0gfV1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBzZWxlY3RvciIsIk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gVGFidWxhclRhYmxlcy5yZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyID0gbmV3IFRhYnVsYXIuVGFibGUoe1xuICAgIG5hbWU6IFwicmVsYXRlZF9pbnN0YW5jZXNfdGFidWxhclwiLFxuICAgIGNvbGxlY3Rpb246IGRiLmluc3RhbmNlcyxcbiAgICBjb2x1bW5zOiBbXG4gICAgICB7XG4gICAgICAgIGRhdGE6IFwiX2lkXCIsXG4gICAgICAgIHRpdGxlOiAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJyZXZlcnNlXCIgaWQ9XCJyZXZlcnNlXCI+JyxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6ICcxcHgnLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIGlucHV0LCByZWY7XG4gICAgICAgICAgaW5wdXQgPSAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwicmVsYXRlZC1pbnN0YW5jZXMtbGlzdC1jaGVja2JveFwiIG5hbWU9XCJyZWxhdGVkX2luc3RhbmNlc19pZHNcIiBpZD1cInJlbGF0ZWRfaW5zdGFuY2VzX2lkc1wiIHZhbHVlPVwiJyArIGRvYy5faWQgKyAnXCInO1xuICAgICAgICAgIGlmICgocmVmID0gVGFidWxhclRhYmxlcy5yZWxhdGVkX2luc3RhbmNlc190YWJ1bGFyLnJlbGF0ZWRfaW5zdGFuY2VzKSAhPSBudWxsID8gcmVmLmluY2x1ZGVzKGRvYy5faWQpIDogdm9pZCAwKSB7XG4gICAgICAgICAgICBpbnB1dCArPSBcIiBjaGVja2VkIFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnB1dCArPSBcIj5cIjtcbiAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJuYW1lXCIsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdpZHRoOiAnNDUlJyxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBhYnNvbHV0ZSwgaHJlZjtcbiAgICAgICAgICBocmVmID0gJyc7XG4gICAgICAgICAgaWYgKE1ldGVvci5pc0NsaWVudCAmJiAoU3RlZWRvcy5pc01vYmlsZSgpIHx8IFN0ZWVkb3MuaXNDb3Jkb3ZhKCkpKSB7XG4gICAgICAgICAgICBocmVmID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFic29sdXRlID0gZmFsc2U7XG4gICAgICAgICAgaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAgICAgICAgICAgYWJzb2x1dGUgPSB0aGlzLmFic29sdXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgICAgICAgIGhyZWYgPSBNZXRlb3IuYWJzb2x1dGVVcmwoXCJ3b3JrZmxvdy9zcGFjZS9cIiArIGRvYy5zcGFjZSArIFwiL3ZpZXcvcmVhZG9ubHkvXCIgKyBkb2MuX2lkICsgJz9oaWRlX3RyYWNlcz0wJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhyZWYgPSBTdGVlZG9zLmFic29sdXRlVXJsKFwid29ya2Zsb3cvc3BhY2UvXCIgKyBkb2Muc3BhY2UgKyBcIi92aWV3L3JlYWRvbmx5L1wiICsgZG9jLl9pZCArICc/aGlkZV90cmFjZXM9MCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gKFwiPGEgZGF0YS1pZD0nXCIgKyBkb2MuX2lkICsgXCInIHRhcmdldD0nX2JsYW5rJyBocmVmPSdcIikgKyBocmVmICsgXCInPlwiICsgZG9jLm5hbWUgKyBcIjwvYT5cIjtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcImFwcGxpY2FudF9uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9uYW1lXCIpLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiZmxvd19uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJjdXJyZW50X3N0ZXBfbmFtZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIGp1ZGdlLCBzdGVwX2N1cnJlbnRfbmFtZTtcbiAgICAgICAgICBpZiAoZG9jLnN0YXRlID09PSBcImNvbXBsZXRlZFwiKSB7XG4gICAgICAgICAgICBqdWRnZSA9IGRvYy5maW5hbF9kZWNpc2lvbiB8fCBcImFwcHJvdmVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ZXBfY3VycmVudF9uYW1lID0gZG9jLmN1cnJlbnRfc3RlcF9uYW1lIHx8ICcnO1xuICAgICAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcInN0ZXAtY3VycmVudC1zdGF0ZSBcIiArIGp1ZGdlICsgXCJcXFwiPlwiICsgc3RlcF9jdXJyZW50X25hbWUgKyBcIjwvZGl2PlwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXSxcbiAgICBkb206IFwidHBcIixcbiAgICBsZW5ndGhDaGFuZ2U6IGZhbHNlLFxuICAgIGV4dHJhRmllbGRzOiBbXCJzdGF0ZVwiLCBcImZpbmFsX2RlY2lzaW9uXCIsIFwic3BhY2VcIiwgXCJrZXl3b3Jkc1wiXSxcbiAgICBwYWdlTGVuZ3RoOiAxMCxcbiAgICBpbmZvOiBmYWxzZSxcbiAgICBzZWFyY2hpbmc6IHRydWUsXG4gICAgcmVzcG9uc2l2ZToge1xuICAgICAgZGV0YWlsczogZmFsc2VcbiAgICB9LFxuICAgIGF1dG9XaWR0aDogZmFsc2UsXG4gICAgY2hhbmdlU2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yLCB1c2VySWQpIHtcbiAgICAgIHZhciBjdXJTcGFjZVVzZXIsIGZsb3dfaWRzLCBmbG93cywgb3JnYW5pemF0aW9ucywgcmVmLCByZWYxLCBzcGFjZSwgc3BhY2VJZDtcbiAgICAgIGlmICghdXNlcklkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX2lkOiAtMVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3BhY2VJZCA9IHNlbGVjdG9yLnNwYWNlO1xuICAgICAgaWYgKCFzcGFjZUlkKSB7XG4gICAgICAgIGlmICgoc2VsZWN0b3IgIT0gbnVsbCA/IChyZWYgPSBzZWxlY3Rvci4kYW5kKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgICAgc3BhY2VJZCA9IHNlbGVjdG9yLiRhbmQuZ2V0UHJvcGVydHkoJ3NwYWNlJylbMF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghc3BhY2VJZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIF9pZDogLTFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHNwYWNlID0gZGIuc3BhY2VzLmZpbmRPbmUoc3BhY2VJZCk7XG4gICAgICBpZiAoIXNwYWNlKSB7XG4gICAgICAgIHNlbGVjdG9yLnN0YXRlID0gXCJub25lXCI7XG4gICAgICB9XG4gICAgICBpZiAoIXNwYWNlLmFkbWlucy5pbmNsdWRlcyh1c2VySWQpKSB7XG4gICAgICAgIGZsb3dfaWRzID0gW107XG4gICAgICAgIGN1clNwYWNlVXNlciA9IGRiLnNwYWNlX3VzZXJzLmZpbmRPbmUoe1xuICAgICAgICAgIHNwYWNlOiBzcGFjZUlkLFxuICAgICAgICAgICd1c2VyJzogdXNlcklkXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3VyU3BhY2VVc2VyKSB7XG4gICAgICAgICAgb3JnYW5pemF0aW9ucyA9IGRiLm9yZ2FuaXphdGlvbnMuZmluZCh7XG4gICAgICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAgICAgJGluOiBjdXJTcGFjZVVzZXIub3JnYW5pemF0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmZldGNoKCk7XG4gICAgICAgICAgZmxvd3MgPSBkYi5mbG93cy5maW5kKHtcbiAgICAgICAgICAgIHNwYWNlOiBzcGFjZUlkXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZmxvd3MuZm9yRWFjaChmdW5jdGlvbihmbCkge1xuICAgICAgICAgICAgaWYgKFdvcmtmbG93TWFuYWdlci5jYW5Nb25pdG9yKGZsLCBjdXJTcGFjZVVzZXIsIG9yZ2FuaXphdGlvbnMpIHx8IFdvcmtmbG93TWFuYWdlci5jYW5BZG1pbihmbCwgY3VyU3BhY2VVc2VyLCBvcmdhbml6YXRpb25zKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmxvd19pZHMucHVzaChmbC5faWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2VsZWN0b3IgIT0gbnVsbCA/IChyZWYxID0gc2VsZWN0b3IuJGFuZCkgIT0gbnVsbCA/IHJlZjEubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgICBzZWxlY3Rvci4kYW5kWzBdLiRvciA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3VibWl0dGVyOiB1c2VySWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgYXBwbGljYW50OiB1c2VySWRcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgaW5ib3hfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBvdXRib3hfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBjY191c2VyczogdXNlcklkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGZsb3c6IHtcbiAgICAgICAgICAgICAgICAkaW46IGZsb3dfaWRzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF8uZXh0ZW5kKHNlbGVjdG9yLCB7XG4gICAgICAgICAgICAkb3I6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN1Ym1pdHRlcjogdXNlcklkXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBhcHBsaWNhbnQ6IHVzZXJJZFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgaW5ib3hfdXNlcnM6IHVzZXJJZFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgb3V0Ym94X3VzZXJzOiB1c2VySWRcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGNjX3VzZXJzOiB1c2VySWRcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGZsb3c6IHtcbiAgICAgICAgICAgICAgICAgICRpbjogZmxvd19pZHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIlN0ZWVkb3Muc3Vic1tcIkluc3RhbmNlVGFidWxhclwiXSA9IG5ldyBTdWJzTWFuYWdlcigpXHJcblxyXG5cclxuX2hhbmRsZUxpc3RGaWVsZHMgPSAoZmllbGRzKSAtPlxyXG5cdGluc19maWVsZHMgPSBuZXcgQXJyYXkoKTtcclxuXHJcblx0ZmllbGRzPy5mb3JFYWNoIChmKS0+XHJcblx0XHRpZiBmLnR5cGUgPT0gJ3RhYmxlJ1xyXG5cdFx0XHRjb25zb2xlLmxvZyAnaWdub3JlIG9waW5pb24gZmllbGQgaW4gdGFibGUnXHJcblx0XHRlbHNlIGlmIGYudHlwZSA9PSAnc2VjdGlvbidcclxuXHRcdFx0Zj8uZmllbGRzPy5mb3JFYWNoIChmMSktPlxyXG5cdFx0XHRcdGluc19maWVsZHMucHVzaCBmMVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRpbnNfZmllbGRzLnB1c2ggZlxyXG5cclxuXHRyZXR1cm4gaW5zX2ZpZWxkc1xyXG5cclxuXHJcbnVwZGF0ZVRhYnVsYXJUaXRsZSA9ICgpLT5cclxuXHJcbiMg5aaC5p6cY29sdW1uc+acieWKoOWHj++8jOivt+S/ruaUuVRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucyDlh73mlbBcclxuaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhciA9IChmbG93SWQsIGZpZWxkcyktPlxyXG5cdG9wdGlvbnMgPSB7XHJcblx0XHRuYW1lOiBcImluc3RhbmNlc1wiLFxyXG5cdFx0Y29sbGVjdGlvbjogZGIuaW5zdGFuY2VzLFxyXG5cdFx0cHViOiBcImluc3RhbmNlX3RhYnVsYXJcIixcclxuXHRcdG9uVW5sb2FkOiAoKS0+XHJcblx0XHRcdE1ldGVvci5zZXRUaW1lb3V0KFRlbXBsYXRlLmluc3RhbmNlX2xpc3QuX3RhYmxlQ29sdW1ucywgMTUwKVxyXG5cclxuXHRcdGRyYXdDYWxsYmFjazogKHNldHRpbmdzKS0+XHJcblx0XHRcdGVtcHR5VGQgPSAkKFwiLmRhdGFUYWJsZXNfZW1wdHlcIilcclxuXHRcdFx0aWYgZW1wdHlUZC5sZW5ndGhcclxuXHRcdFx0XHRlbXB0eVRkWzBdLmNvbFNwYW4gPSBcIjZcIlxyXG5cdFx0XHRpZiAhU3RlZWRvcy5pc01vYmlsZSgpICYmICFTdGVlZG9zLmlzUGFkKClcclxuXHRcdFx0XHRNZXRlb3Iuc2V0VGltZW91dChUZW1wbGF0ZS5pbnN0YW5jZV9saXN0Ll90YWJsZUNvbHVtbnMsIDE1MClcclxuXHRcdFx0XHQkKFwiLmluc3RhbmNlLWxpc3RcIikuc2Nyb2xsVG9wKDApLnJlYWR5IC0+XHJcblx0XHRcdFx0XHQkKFwiLmluc3RhbmNlLWxpc3RcIikucGVyZmVjdFNjcm9sbGJhcihcInVwZGF0ZVwiKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0JChcIi5pbnN0YW5jZS1saXN0XCIpLnNjcm9sbFRvcCgwKVxyXG5cclxuXHRcdFx0dGl0bGUgPSB0IFwicGFnZXJfaW5wdXRfaGludFwiXHJcblx0XHRcdGVsbGlwc2lzTGluayA9IHNldHRpbmdzLm9JbnN0YW5jZS5wYXJlbnQoKS5maW5kKCcucGFnaW5nX251bWJlcnMgLnBhZ2luYXRpb24gLmRpc2FibGVkIGEnKVxyXG5cdFx0XHRlbGxpcHNpc0xpbmsuYXR0cihcInRpdGxlXCIsIHRpdGxlKS5jc3MoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpLmNsaWNrIC0+XHJcblx0XHRcdFx0aWYgISQodGhpcykuZmluZCgnaW5wdXQnKS5sZW5ndGhcclxuXHRcdFx0XHRcdGlucHV0ID0gJCgnPGlucHV0IGNsYXNzPVwicGFnaW5hdGVfaW5wdXQgZm9ybS1jb250cm9sIGlucHV0LXNtXCIgdHlwZT1cInRleHRcIiBzdHlsZT1cImJvcmRlcjogbm9uZTsgcGFkZGluZzowIDJweDtcIi8+JylcclxuXHRcdFx0XHRcdGlmIFN0ZWVkb3MuaXNNb2JpbGUoKVxyXG5cdFx0XHRcdFx0XHRpbnB1dC5jc3Moe1xyXG5cdFx0XHRcdFx0XHRcdHdpZHRoOlwiNTJweFwiXHJcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiBcIjIwcHhcIlxyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRpbnB1dC5jc3Moe1xyXG5cdFx0XHRcdFx0XHRcdHdpZHRoOlwiNTJweFwiXHJcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiBcIjE2cHhcIlxyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0aW5wdXQuYXR0cihcInRpdGxlXCIsIHRpdGxlKS5hdHRyKFwicGxhY2Vob2xkZXJcIiwgdGl0bGUpXHJcblx0XHRcdFx0XHQkKHRoaXMpLmVtcHR5KCkuYXBwZW5kIGlucHV0XHJcblx0XHRcdFx0XHRnb1BhZ2UgPSAoaW5kZXgpLT5cclxuXHRcdFx0XHRcdFx0aWYgaW5kZXggPiAwXHJcblx0XHRcdFx0XHRcdFx0cGFnZXMgPSBNYXRoLmNlaWwoc2V0dGluZ3MuZm5SZWNvcmRzRGlzcGxheSgpIC8gc2V0dGluZ3MuX2lEaXNwbGF5TGVuZ3RoKVxyXG5cdFx0XHRcdFx0XHRcdGlmIGluZGV4ID4gcGFnZXNcclxuXHRcdFx0XHRcdFx0XHRcdCMg6aG156CB6LaF5Ye657Si5byV5pe26Lez6L2s5Yiw5pyA5ZCO5LiA6aG1XHJcblx0XHRcdFx0XHRcdFx0XHRpbmRleCA9IHBhZ2VzXHJcblx0XHRcdFx0XHRcdFx0aW5kZXgtLVxyXG5cdFx0XHRcdFx0XHRcdHNldHRpbmdzLm9JbnN0YW5jZS5EYXRhVGFibGUoKS5wYWdlKGluZGV4KS5kcmF3KCdwYWdlJylcclxuXHRcdFx0XHRcdGlucHV0LmJsdXIgKGUpLT5cclxuXHRcdFx0XHRcdFx0Y3VycmVudFBhZ2UgPSAkKHRoaXMpLnZhbCgpXHJcblx0XHRcdFx0XHRcdGdvUGFnZSBjdXJyZW50UGFnZVxyXG5cdFx0XHRcdFx0XHQkKHRoaXMpLnBhcmVudCgpLmh0bWwgJy4uLidcclxuXHRcdFx0XHRcdGlucHV0LmtleWRvd24gKGUpLT5cclxuXHRcdFx0XHRcdFx0aWYoZS5rZXlDb2RlLnRvU3RyaW5nKCkgPT0gXCIxM1wiKVxyXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRQYWdlID0gJCh0aGlzKS52YWwoKVxyXG5cdFx0XHRcdFx0XHRcdGdvUGFnZSBjdXJyZW50UGFnZVxyXG5cclxuXHRcdGNyZWF0ZWRSb3c6IChyb3csIGRhdGEsIGRhdGFJbmRleCkgLT5cclxuXHRcdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdFx0aWYgZGF0YS5faWQgPT0gRmxvd1JvdXRlci5jdXJyZW50KCkucGFyYW1zLmluc3RhbmNlSWRcclxuXHRcdFx0XHRcdHJvdy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNlbGVjdGVkXCIpXHJcblx0XHRjb2x1bW5zOiBbXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcIl9pZFwiLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdG1vZGlmaWVkU3RyaW5nID0gbW9tZW50KGRvYy5tb2RpZmllZCkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XHJcblxyXG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBkb2MubW9kaWZpZWRcclxuXHRcdFx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCcgJiYgZG9jLnN0YXRlICE9ICdkcmFmdCdcclxuXHRcdFx0XHRcdFx0bW9kaWZpZWQgPSBkb2Muc3RhcnRfZGF0ZSB8fCBkb2MubW9kaWZpZWRcclxuXHJcblx0XHRcdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnb3V0Ym94JyB8fCBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnbW9uaXRvcidcclxuXHRcdFx0XHRcdFx0bW9kaWZpZWQgPSBkb2Muc3VibWl0X2RhdGUgfHwgZG9jLnN1Ym1pdF9kYXRlXHJcblxyXG5cdFx0XHRcdFx0bW9kaWZpZWRGcm9tTm93ID0gU3RlZWRvcy5tb21lbnRSZWFjdGl2ZUZyb21Ob3cobW9kaWZpZWQpO1xyXG5cdFx0XHRcdFx0Zmxvd19uYW1lID0gZG9jLmZsb3dfbmFtZVxyXG5cdFx0XHRcdFx0Y2NfdmlldyA9IFwiXCI7XHJcblx0XHRcdFx0XHRzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCJcIjtcclxuXHRcdFx0XHRcdCMg5b2T5YmN55So5oi35ZyoY2MgdXNlcuS4re+8jOS9huaYr+S4jeWcqGluYm94IHVzZXJz5pe25omN5pi+56S6J+S8oOmYhSfmloflrZdcclxuXHRcdFx0XHRcdGlmIGRvYy5pc19jYyAmJiAhZG9jLmluYm94X3VzZXJzPy5pbmNsdWRlcyhNZXRlb3IudXNlcklkKCkpICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdpbmJveCdcclxuXHRcdFx0XHRcdFx0Y2NfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXyhcImluc3RhbmNlX2NjX3RpdGxlXCIpICsgXCIpPC9sYWJlbD4gXCJcclxuXHRcdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz4je2Zsb3dfbmFtZX08c3Bhbj4oI3tkb2MuY3VycmVudF9zdGVwX25hbWV9KTwvc3Bhbj48L2Rpdj5cIlxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRpZiBTZXNzaW9uLmdldChcImJveFwiKSAhPSAnZHJhZnQnICYmIGRvYy5jdXJyZW50X3N0ZXBfbmFtZVxyXG5cdFx0XHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+I3tmbG93X25hbWV9PHNwYW4+KCN7ZG9jLmN1cnJlbnRfc3RlcF9uYW1lfSk8L3NwYW4+PC9kaXY+XCJcclxuXHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lX3ZpZXcgPSBcIjxkaXYgY2xhc3M9J2Zsb3ctbmFtZSc+I3tmbG93X25hbWV9PC9kaXY+XCJcclxuXHJcblx0XHRcdFx0XHRhZ2VudF92aWV3ID0gXCJcIjtcclxuXHRcdFx0XHRcdGlmIGRvYy5hZ2VudF91c2VyX25hbWUgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94J1xyXG5cdFx0XHRcdFx0XHRhZ2VudF92aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKCdwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXNfZGVzY3JpcHRpb24nLCB7dXNlck5hbWU6IGRvYy5hZ2VudF91c2VyX25hbWV9KSArIFwiKTwvbGFiZWw+XCJcclxuXHJcblx0XHRcdFx0XHR1bnJlYWQgPSAnJ1xyXG5cclxuXHRcdFx0XHRcdGlzRmF2b3JpdGVTZWxlY3RlZCA9IEZhdm9yaXRlcy5pc1JlY29yZFNlbGVjdGVkKFwiaW5zdGFuY2VzXCIsIGRvYy5faWQpXHJcblx0XHRcdFx0XHRpZiBGYXZvcml0ZXMuaXNSZWNvcmRTZWxlY3RlZChcImluc3RhbmNlc1wiLCBkb2MuX2lkKVxyXG5cdFx0XHRcdFx0XHR1bnJlYWQgPSAnPGkgY2xhc3M9XCJpb24gaW9uLWlvcy1zdGFyLW91dGxpbmUgaW5zdGFuY2UtZmF2b3JpdGUtc2VsZWN0ZWRcIj48L2k+J1xyXG5cdFx0XHRcdFx0ZWxzZSBpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnICYmIGRvYy5pc19yZWFkID09IGZhbHNlXHJcblx0XHRcdFx0XHRcdHVucmVhZCA9ICc8aSBjbGFzcz1cImlvbiBpb24tcmVjb3JkIHVucmVhZFwiPjwvaT4nXHJcblx0XHRcdFx0XHRlbHNlIGlmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09ICdtb25pdG9yJyAmJiBkb2MuaXNfaGlkZGVuID09IHRydWVcclxuXHRcdFx0XHRcdFx0dW5yZWFkID0gJzxpIGNsYXNzPVwiZmEgZmEtbG9ja1wiPjwvaT4nXHJcblxyXG5cdFx0XHRcdFx0cHJpb3JpdHlJY29uID0gXCJcIlxyXG5cdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIlwiXHJcblx0XHRcdFx0XHRwcmlvcml0eVZhbHVlID0gZG9jLnZhbHVlcz8ucHJpb3JpdHlcclxuXHRcdFx0XHRcdHN3aXRjaCBwcmlvcml0eVZhbHVlXHJcblx0XHRcdFx0XHRcdHdoZW4gXCLnibnmgKVcIlxyXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJkYW5nZXJcIlxyXG5cdFx0XHRcdFx0XHR3aGVuIFwi57Sn5oClXCJcclxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwid2FybmluZ1wiXHJcblx0XHRcdFx0XHRcdHdoZW4gXCLlip7mlodcIlxyXG5cdFx0XHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJtdXRlZFwiXHJcblx0XHRcdFx0XHRpZiBwcmlvcml0eUljb25DbGFzc1xyXG5cdFx0XHRcdFx0XHRpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzID0gXCJjb2xvci1wcmlvcml0eSBjb2xvci1wcmlvcml0eS0je3ByaW9yaXR5SWNvbkNsYXNzfVwiXHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiXCJcIlxyXG5cdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtcmVhZC1iYXInPiN7dW5yZWFkfTwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtbmFtZSAje2luc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3N9Jz4je2RvYy5uYW1lfSN7Y2Nfdmlld30je2FnZW50X3ZpZXd9XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuPiN7ZG9jLmFwcGxpY2FudF9uYW1lfTwvc3Bhbj5cclxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz0naW5zdGFuY2UtZGV0YWlsJz4je3N0ZXBfY3VycmVudF9uYW1lX3ZpZXd9XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPSdpbnN0YW5jZS1tb2RpZmllZCcgdGl0bGU9JyN7bW9kaWZpZWRTdHJpbmd9Jz4je21vZGlmaWVkRnJvbU5vd308L3NwYW4+XHJcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHRcIlwiXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCIpLFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJuYW1lXCIsXHJcblx0XHRcdFx0dGl0bGU6IHQoXCJpbnN0YW5jZXNfbmFtZVwiKSxcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdGNjX3ZpZXcgPSBcIlwiO1xyXG5cdFx0XHRcdFx0c3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiXCI7XHJcblx0XHRcdFx0XHQjIOW9k+WJjeeUqOaIt+WcqGNjIHVzZXLkuK3vvIzkvYbmmK/kuI3lnKhpbmJveCB1c2Vyc+aXtuaJjeaYvuekuifkvKDpmIUn5paH5a2XXHJcblx0XHRcdFx0XHRpZiBkb2MuaXNfY2MgJiYgIWRvYy5pbmJveF91c2Vycz8uaW5jbHVkZXMoTWV0ZW9yLnVzZXJJZCgpKSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnaW5ib3gnXHJcblx0XHRcdFx0XHRcdGNjX3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oXCJpbnN0YW5jZV9jY190aXRsZVwiKSArIFwiKTwvbGFiZWw+IFwiXHJcblxyXG5cdFx0XHRcdFx0YWdlbnRfdmlldyA9IFwiXCI7XHJcblx0XHRcdFx0XHRpZiBkb2MuYWdlbnRfdXNlcl9uYW1lXHJcblx0XHRcdFx0XHRcdGFnZW50X3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oJ3Byb2Nlc3NfZGVsZWdhdGlvbl9ydWxlc19kZXNjcmlwdGlvbicsIHt1c2VyTmFtZTogZG9jLmFnZW50X3VzZXJfbmFtZX0pICsgXCIpPC9sYWJlbD5cIlxyXG5cclxuXHRcdFx0XHRcdHVucmVhZCA9ICcnXHJcblxyXG5cdFx0XHRcdFx0aWYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT0gJ2luYm94JyAmJiBkb2MuaXNfcmVhZCA9PSBmYWxzZVxyXG5cdFx0XHRcdFx0XHR1bnJlYWQgPSAnPGkgY2xhc3M9XCJpb24gaW9uLXJlY29yZCB1bnJlYWRcIj48L2k+J1xyXG5cdFx0XHRcdFx0ZWxzZSBpZiBTZXNzaW9uLmdldChcImJveFwiKSA9PSAnbW9uaXRvcicgJiYgZG9jLmlzX2hpZGRlbiA9PSB0cnVlXHJcblx0XHRcdFx0XHRcdHVucmVhZCA9ICc8aSBjbGFzcz1cImZhIGZhLWxvY2tcIj48L2k+J1xyXG5cclxuXHRcdFx0XHRcdHByaW9yaXR5SWNvbkNsYXNzID0gXCJcIlxyXG5cdFx0XHRcdFx0cHJpb3JpdHlWYWx1ZSA9IGRvYy52YWx1ZXM/LnByaW9yaXR5XHJcblx0XHRcdFx0XHRzd2l0Y2ggcHJpb3JpdHlWYWx1ZVxyXG5cdFx0XHRcdFx0XHR3aGVuIFwi54m55oClXCJcclxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwiZGFuZ2VyXCJcclxuXHRcdFx0XHRcdFx0d2hlbiBcIue0p+aApVwiXHJcblx0XHRcdFx0XHRcdFx0cHJpb3JpdHlJY29uQ2xhc3MgPSBcIndhcm5pbmdcIlxyXG5cdFx0XHRcdFx0XHR3aGVuIFwi5Yqe5paHXCJcclxuXHRcdFx0XHRcdFx0XHRwcmlvcml0eUljb25DbGFzcyA9IFwibXV0ZWRcIlxyXG5cdFx0XHRcdFx0aWYgcHJpb3JpdHlJY29uQ2xhc3NcclxuXHRcdFx0XHRcdFx0aW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyA9IFwiY29sb3ItcHJpb3JpdHkgY29sb3ItcHJpb3JpdHktI3twcmlvcml0eUljb25DbGFzc31cIlxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiXCJcIlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9J2luc3RhbmNlLXJlYWQtYmFyJz4je3VucmVhZH08L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPSdpbnN0YW5jZS1uYW1lICN7aW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzc30nPiN7ZG9jLm5hbWV9I3tjY192aWV3fSN7YWdlbnRfdmlld308L2Rpdj5cclxuXHRcdFx0XHRcdFx0XCJcIlwiXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJhcHBsaWNhbnRfbmFtZVwiLFxyXG5cdFx0XHRcdHRpdGxlOiB0KFwiaW5zdGFuY2VzX2FwcGxpY2FudF9uYW1lXCIpLFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwic3VibWl0X2RhdGVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19zdWJtaXRfZGF0ZVwiKSxcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdGlmIGRvYy5zdWJtaXRfZGF0ZVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbW9tZW50KGRvYy5zdWJtaXRfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XHJcblx0XHRcdFx0LFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogdHJ1ZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJmbG93X25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19mbG93XCIpLFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwiY3VycmVudF9zdGVwX25hbWVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19zdGVwX2N1cnJlbnRfbmFtZVwiKSxcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdGlmIGRvYy5zdGF0ZSA9PSBcImNvbXBsZXRlZFwiXHJcblx0XHRcdFx0XHRcdGp1ZGdlID0gZG9jLmZpbmFsX2RlY2lzaW9uIHx8IFwiYXBwcm92ZWRcIlxyXG5cclxuXHRcdFx0XHRcdHN0ZXBfY3VycmVudF9uYW1lID0gZG9jLmN1cnJlbnRfc3RlcF9uYW1lIHx8ICcnXHJcblxyXG5cdFx0XHRcdFx0Y2NfdGFnID0gJydcclxuXHJcblx0XHRcdFx0XHRpZiBkb2MuY2NfY291bnQgPiAwXHJcblx0XHRcdFx0XHRcdGNjX3RhZyA9IFRBUGkxOG4uX18oJ2NjX3RhZycpXHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIFwiXCJcIlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwic3RlcC1jdXJyZW50LXN0YXRlICN7anVkZ2V9XCI+I3tzdGVwX2N1cnJlbnRfbmFtZX0je2NjX3RhZ308L2Rpdj5cclxuXHRcdFx0XHRcdFwiXCJcIlxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwibW9kaWZpZWRcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19tb2RpZmllZFwiKSxcclxuXHRcdFx0XHRyZW5kZXI6ICh2YWwsIHR5cGUsIGRvYykgLT5cclxuXHRcdFx0XHRcdHJldHVybiBtb21lbnQoZG9jLm1vZGlmaWVkKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcclxuXHRcdFx0XHQsXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcInN0YXJ0X2RhdGVcIixcclxuXHRcdFx0XHR0aXRsZTogdChcImluc3RhbmNlc19zdGFydF9kYXRlXCIpLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aWYgZG9jLnN0YXJ0X2RhdGVcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1vbWVudChkb2Muc3RhcnRfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XHJcblx0XHRcdFx0LFxyXG5cdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdG9yZGVyYWJsZTogdHJ1ZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJteV9maW5pc2hfZGF0ZVwiLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aWYgZG9jLm15X2ZpbmlzaF9kYXRlXHJcblx0XHRcdFx0XHRcdHJldHVybiBtb21lbnQoZG9jLm15X2ZpbmlzaF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcclxuXHRcdFx0XHQsXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2UsXHJcblx0XHRcdFx0b3JkZXJhYmxlOiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhOiBcIm1vZGlmaWVkXCIsXHJcblx0XHRcdFx0dmlzaWJsZTogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGE6IFwia2V5d29yZHNcIixcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZGF0YTogXCJpc19hcmNoaXZlZFwiLFxyXG5cdFx0XHRcdHJlbmRlcjogKHZhbCwgdHlwZSwgZG9jKSAtPlxyXG5cdFx0XHRcdFx0aWYgZG9jPy52YWx1ZXM/LnJlY29yZF9uZWVkICYmIGRvYy52YWx1ZXMucmVjb3JkX25lZWQgPT0gXCJ0cnVlXCJcclxuXHRcdFx0XHRcdFx0aWYgZG9jPy5pc19hcmNoaXZlZFxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0KFwiWUVTXCIpXHJcblx0XHRcdFx0XHRcdHJldHVybiB0KFwiTk9cIilcclxuXHRcdFx0XHR2aXNpYmxlOiBmYWxzZVxyXG5cdFx0XHRcdG9yZGVyYWJsZTogZmFsc2VcclxuXHRcdFx0fVxyXG5cdFx0XSxcclxuXHRcdGRvbTogZG8gLT5cclxuXHRcdFx0IyDmiYvmnLrkuIrkuI3mmL7npLrkuIDpobXmmL7npLrlpJrlsJHmnaHorrDlvZXpgInpoblcclxuXHRcdFx0aWYgU3RlZWRvcy5pc01vYmlsZSgpXHJcblx0XHRcdFx0J3RwJ1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0J3RwbCdcclxuXHRcdG9yZGVyOiBbWzQsIFwiZGVzY1wiXV0sXHJcblx0XHRleHRyYUZpZWxkczogW1wiZm9ybVwiLCBcImZsb3dcIiwgXCJpbmJveF91c2Vyc1wiLCBcInN0YXRlXCIsIFwic3BhY2VcIiwgXCJhcHBsaWNhbnRcIiwgXCJmb3JtX3ZlcnNpb25cIixcclxuXHRcdFx0XCJmbG93X3ZlcnNpb25cIiwgXCJpc19jY1wiLCBcImNjX2NvdW50XCIsIFwiaXNfcmVhZFwiLCBcImN1cnJlbnRfc3RlcF9uYW1lXCIsIFwidmFsdWVzXCIsIFwia2V5d29yZHNcIiwgXCJmaW5hbF9kZWNpc2lvblwiLCBcImZsb3dfbmFtZVwiLCBcImlzX2hpZGRlblwiLCBcImFnZW50X3VzZXJfbmFtZVwiXSxcclxuXHRcdGxlbmd0aENoYW5nZTogdHJ1ZSxcclxuXHRcdGxlbmd0aE1lbnU6IFsxMCwxNSwyMCwyNSw1MCwxMDBdLFxyXG5cdFx0cGFnZUxlbmd0aDogMTAsXHJcblx0XHRpbmZvOiBmYWxzZSxcclxuXHRcdHNlYXJjaGluZzogdHJ1ZSxcclxuXHRcdHJlc3BvbnNpdmU6XHJcblx0XHRcdGRldGFpbHM6IGZhbHNlXHJcblx0XHRhdXRvV2lkdGg6IGZhbHNlLFxyXG5cdFx0Y2hhbmdlU2VsZWN0b3I6IChzZWxlY3RvciwgdXNlcklkKSAtPlxyXG5cdFx0XHR1bmxlc3MgdXNlcklkXHJcblx0XHRcdFx0cmV0dXJuIHtfaWQ6IC0xfVxyXG5cdFx0XHRzcGFjZSA9IHNlbGVjdG9yLnNwYWNlXHJcblx0XHRcdHVubGVzcyBzcGFjZVxyXG5cdFx0XHRcdGlmIHNlbGVjdG9yPy4kYW5kPy5sZW5ndGggPiAwXHJcblx0XHRcdFx0XHRzcGFjZSA9IHNlbGVjdG9yLiRhbmQuZ2V0UHJvcGVydHkoJ3NwYWNlJylbMF1cclxuXHRcdFx0dW5sZXNzIHNwYWNlXHJcblx0XHRcdFx0cmV0dXJuIHtfaWQ6IC0xfVxyXG5cdFx0XHRzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7dXNlcjogdXNlcklkLCBzcGFjZTogc3BhY2V9LCB7ZmllbGRzOiB7X2lkOiAxfX0pXHJcblx0XHRcdHVubGVzcyBzcGFjZV91c2VyXHJcblx0XHRcdFx0cmV0dXJuIHtfaWQ6IC0xfVxyXG5cdFx0XHRyZXR1cm4gc2VsZWN0b3JcclxuXHRcdHBhZ2luZ1R5cGU6IFwibnVtYmVyc1wiXHJcblxyXG5cdH1cclxuXHJcblx0aWYgZmxvd0lkXHJcblx0XHRrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgZmxvd0lkXHJcblxyXG5cdFx0b3B0aW9ucy5uYW1lID0ga2V5XHJcblxyXG5cdFx0VGFidWxhclRhYmxlcy5pbnN0YW5jZXMuZmllbGRzID0gZmllbGRzXHJcblxyXG5cdFx0aW5zX2ZpZWxkcyA9IF9oYW5kbGVMaXN0RmllbGRzIFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzLmZpZWxkc1xyXG5cclxuXHRcdGluc19maWVsZHMuZm9yRWFjaCAoZiktPlxyXG5cdFx0XHRpZiBmLnR5cGUgIT0gJ3RhYmxlJyAmJiBmLmlzX2xpc3RfZGlzcGxheVxyXG5cdFx0XHRcdG9wdGlvbnMuY29sdW1ucy5wdXNoXHJcblx0XHRcdFx0XHRkYXRhOiAoZi5uYW1lIHx8IGYuY29kZSksXHJcblx0XHRcdFx0XHR0aXRsZTogdChmLm5hbWUgfHwgZi5jb2RlKSxcclxuXHRcdFx0XHRcdHZpc2libGU6IGZhbHNlLFxyXG5cdFx0XHRcdFx0b3JkZXJhYmxlOiBmYWxzZVxyXG5cdFx0XHRcdFx0cmVuZGVyOiAodmFsLCB0eXBlLCBkb2MpIC0+XHJcblxyXG5cdFx0XHRcdFx0XHR2YWx1ZXMgPSBkb2MudmFsdWVzIHx8IHt9XHJcblxyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlc1tmLmNvZGVdXHJcblxyXG5cdFx0XHRcdFx0XHRzd2l0Y2ggZi50eXBlXHJcblx0XHRcdFx0XHRcdFx0d2hlbiAndXNlcidcclxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWU/Lm5hbWVcclxuXHRcdFx0XHRcdFx0XHR3aGVuICdncm91cCdcclxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWU/LmZ1bGxuYW1lXHJcblx0XHRcdFx0XHRcdFx0d2hlbiAnZGF0ZSdcclxuXHRcdFx0XHRcdFx0XHRcdGlmIHZhbHVlXHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gbW9tZW50KHZhbHVlKS5mb3JtYXQoJ1lZWVktTU0tREQnKVxyXG5cdFx0XHRcdFx0XHRcdHdoZW4gJ2RhdGVUaW1lJ1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgdmFsdWVcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBtb21lbnQodmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpXHJcblx0XHRcdFx0XHRcdFx0d2hlbiAnY2hlY2tib3gnXHJcblx0XHRcdFx0XHRcdFx0XHRpZiB2YWx1ZSA9PSB0cnVlIHx8IHZhbHVlID09ICd0cnVlJ1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X3llc1wiKTtcclxuXHRcdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBUQVBpMThuLl9fKFwiZm9ybV9maWVsZF9jaGVja2JveF9ub1wiKTtcclxuXHRcdFx0XHRcdFx0XHR3aGVuICdvZGF0YSdcclxuXHRcdFx0XHRcdFx0XHRcdGlmIHZhbHVlXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmIF8uaXNBcnJheSh2YWx1ZSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IF8ucGx1Y2sodmFsdWUsICdAbGFiZWwnKS50b1N0cmluZygpXHJcblx0XHRcdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlWydAbGFiZWwnXVxyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXHJcblxyXG5cclxuXHRyZXR1cm4gb3B0aW9ucztcclxuXHJcbk1ldGVvci5zdGFydHVwICgpLT5cclxuXHRUYWJ1bGFyVGFibGVzLmluc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlIGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoKVxyXG5cclxuXHJcbkdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zID0gKGJveCwgZmxvd0lkLCBmaWVsZHMpLT5cclxuXHRrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgYm94ICsgZmxvd0lkXHJcblx0aWYgYm94ID09IFwiaW5ib3hcIlxyXG5cdFx0b3B0aW9ucyA9IF9nZXRfaW5ib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyhmbG93SWQsIGZpZWxkcylcclxuXHRlbHNlIGlmIGJveCA9PSBcIm91dGJveFwiXHJcblx0XHRvcHRpb25zID0gX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyhmbG93SWQsIGZpZWxkcylcclxuXHRlbHNlXHJcblx0XHRvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcylcclxuXHRcdGlmICFmbG93SWRcclxuXHRcdFx0b3B0aW9ucy5uYW1lID0gXCJpbmJveF9pbnN0YW5jZXNcIlxyXG5cdGlmIGZsb3dJZFxyXG5cdFx0b3B0aW9ucy5uYW1lID0ga2V5XHJcblx0cmV0dXJuIG9wdGlvbnNcclxuXHJcblxyXG5cclxuX2dldF9pbmJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zID0gKGZsb3dJZCwgZmllbGRzKS0+XHJcblx0b3B0aW9ucyA9IGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoZmxvd0lkLCBmaWVsZHMpXHJcblxyXG5cdGlmICFmbG93SWRcclxuXHRcdG9wdGlvbnMubmFtZSA9IFwiaW5ib3hfaW5zdGFuY2VzXCJcclxuXHJcblx0b3B0aW9ucy5vcmRlciA9IFtbOCwgXCJkZXNjXCJdXVxyXG5cdG9wdGlvbnMuZmlsdGVyZWRSZWNvcmRJZHMgPSAodGFibGUsIHNlbGVjdG9yLCBzb3J0LCBza2lwLCBsaW1pdCwgb2xkX2ZpbHRlcmVkUmVjb3JkSWRzLCB1c2VySWQsIGZpbmRPcHRpb25zKS0+XHJcblx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uID0gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0JG1hdGNoOiBzZWxlY3RvclxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHByb2plY3Q6IHtcclxuXHRcdFx0XHRcdG5hbWU6IDEsXHJcblx0XHRcdFx0XHRcIl9hcHByb3ZlXCI6ICckdHJhY2VzLmFwcHJvdmVzJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCRtYXRjaDoge1xyXG5cdFx0XHRcdFx0J19hcHByb3ZlLmlzX2ZpbmlzaGVkJzogZmFsc2VcclxuXHRcdFx0XHRcdCdfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkLFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XVxyXG5cdFx0aWYgc29ydCBhbmQgc29ydC5sZW5ndGggPiAwXHJcblx0XHRcdHMxID0gc29ydFswXVxyXG5cdFx0XHRzMV8wID0gczFbMF1cclxuXHRcdFx0czFfMSA9IHMxWzFdXHJcblx0XHRcdGlmIHMxXzAgPT0gJ3N0YXJ0X2RhdGUnXHJcblxyXG5cdFx0XHRcdGZpbmRPcHRpb25zLnNvcnQgPSBbWydtb2RpZmllZCcsIHMxXzFdXVxyXG5cclxuXHRcdFx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2ggJGdyb3VwOiB7X2lkOiBcIiRfaWRcIiwgXCJhcHByb3ZlX3N0YXJ0X2RhdGVcIjogeyRmaXJzdDogXCIkX2FwcHJvdmUuc3RhcnRfZGF0ZVwifX1cclxuXHJcblx0XHRcdFx0YWdfc29ydCA9ICdhcHByb3ZlX3N0YXJ0X2RhdGUnOiBpZiBzMV8xID09ICdhc2MnIHRoZW4gMSBlbHNlIC0xXHJcblxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc29ydDogYWdfc29ydFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc2tpcDogc2tpcFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkbGltaXQ6IGxpbWl0XHJcblx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRcdFx0XHRhZ2dyZWdhdGUgPSAodGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikgLT5cclxuXHRcdFx0XHRcdHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5IChlcnIsIGRhdGEpIC0+XHJcblx0XHRcdFx0XHRcdGlmIGVyclxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpXHJcblx0XHRcdFx0XHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxyXG5cdFx0XHRcdFx0XHRcdGZpbHRlcmVkUmVjb3JkSWRzLnB1c2ggZG9jLl9pZFxyXG5cdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRpZiBjYlxyXG5cdFx0XHRcdFx0XHRcdGNiKClcclxuXHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhhZ2dyZWdhdGUpXHJcblxyXG5cdFx0XHRcdGFzeW5jX2FnZ3JlZ2F0ZSB0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHNcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkUmVjb3JkSWRzLnVuaXEoKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkc1xyXG5cclxuXHRyZXR1cm4gb3B0aW9uc1xyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRhYnVsYXJUYWJsZXMuaW5ib3hfaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUgR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoXCJpbmJveFwiKVxyXG5cclxuXHJcbl9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMgPSAoZmxvd0lkLCBmaWVsZHMpLT5cclxuXHRvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcylcclxuXHJcblx0aWYgIWZsb3dJZFxyXG5cdFx0b3B0aW9ucy5uYW1lID0gXCJvdXRib3hfaW5zdGFuY2VzXCJcclxuXHJcblx0b3B0aW9ucy5vcmRlciA9IFtbOSwgXCJkZXNjXCJdXVxyXG5cdG9wdGlvbnMuZmlsdGVyZWRSZWNvcmRJZHMgPSAodGFibGUsIHNlbGVjdG9yLCBzb3J0LCBza2lwLCBsaW1pdCwgb2xkX2ZpbHRlcmVkUmVjb3JkSWRzLCB1c2VySWQsIGZpbmRPcHRpb25zKS0+XHJcblx0XHRhZ2dyZWdhdGVfb3BlcmF0aW9uID0gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0JG1hdGNoOiBzZWxlY3RvclxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0JHByb2plY3Q6IHtcclxuXHRcdFx0XHRcdG5hbWU6IDEsXHJcblx0XHRcdFx0XHRcIl9hcHByb3ZlXCI6ICckdHJhY2VzLmFwcHJvdmVzJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCR1bndpbmQ6IFwiJF9hcHByb3ZlXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCRtYXRjaDoge1xyXG5cdFx0XHRcdFx0J19hcHByb3ZlLmlzX2ZpbmlzaGVkJzogdHJ1ZVxyXG5cdFx0XHRcdFx0JG9yOiBbeydfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkfSx7J19hcHByb3ZlLnVzZXInOiB1c2VySWR9XVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XVxyXG5cdFx0aWYgc29ydCBhbmQgc29ydC5sZW5ndGggPiAwXHJcblx0XHRcdHMxID0gc29ydFswXVxyXG5cdFx0XHRzMV8wID0gczFbMF1cclxuXHRcdFx0czFfMSA9IHMxWzFdXHJcblx0XHRcdGlmIHMxXzAgPT0gJ215X2ZpbmlzaF9kYXRlJ1xyXG5cclxuXHRcdFx0XHRmaW5kT3B0aW9ucy5zb3J0ID0gW1snbW9kaWZpZWQnLCBzMV8xXV1cclxuXHJcblx0XHRcdFx0YWdncmVnYXRlX29wZXJhdGlvbi5wdXNoICRncm91cDoge19pZDogXCIkX2lkXCIsIFwiYXBwcm92ZV9maW5pc2hfZGF0ZVwiOiB7JGxhc3Q6IFwiJF9hcHByb3ZlLmZpbmlzaF9kYXRlXCJ9fVxyXG5cclxuXHRcdFx0XHRhZ19zb3J0ID0gJ2FwcHJvdmVfZmluaXNoX2RhdGUnOiBpZiBzMV8xID09ICdhc2MnIHRoZW4gMSBlbHNlIC0xXHJcblxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc29ydDogYWdfc29ydFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkc2tpcDogc2tpcFxyXG5cdFx0XHRcdGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCAkbGltaXQ6IGxpbWl0XHJcblx0XHRcdFx0ZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKVxyXG5cclxuXHRcdFx0XHRhZ2dyZWdhdGUgPSAodGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikgLT5cclxuXHRcdFx0XHRcdHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5IChlcnIsIGRhdGEpIC0+XHJcblx0XHRcdFx0XHRcdGlmIGVyclxyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihlcnIpXHJcblx0XHRcdFx0XHRcdGRhdGEuZm9yRWFjaCAoZG9jKSAtPlxyXG5cdFx0XHRcdFx0XHRcdGZpbHRlcmVkUmVjb3JkSWRzLnB1c2ggZG9jLl9pZFxyXG5cdFx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdFx0XHRpZiBjYlxyXG5cdFx0XHRcdFx0XHRcdGNiKClcclxuXHRcdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdFx0YXN5bmNfYWdncmVnYXRlID0gTWV0ZW9yLndyYXBBc3luYyhhZ2dyZWdhdGUpXHJcblxyXG5cdFx0XHRcdGFzeW5jX2FnZ3JlZ2F0ZSB0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHNcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkUmVjb3JkSWRzLnVuaXEoKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkc1xyXG5cclxuXHRyZXR1cm4gb3B0aW9uc1xyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRhYnVsYXJUYWJsZXMub3V0Ym94X2luc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKFwib3V0Ym94XCIpXHJcblxyXG5pZiBNZXRlb3IuaXNDbGllbnRcclxuXHRUYWJ1bGFyVGFibGVzLmZsb3dJbnN0YW5jZXMgPSBuZXcgUmVhY3RpdmVWYXIoKVxyXG5cclxuTWV0ZW9yLnN0YXJ0dXAgKCktPlxyXG5cdFRyYWNrZXIuYXV0b3J1biAoYykgLT5cclxuXHRcdGlmIE1ldGVvci5pc0NsaWVudCAmJiAhU3RlZWRvcy5pc01vYmlsZSgpXHJcblx0XHRcdGlmIFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9ICdkcmFmdCdcclxuXHRcdFx0XHRNZXRlb3IuY2FsbCBcIm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyXCIsIFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgKGVycm9yLCByZXN1bHQpIC0+XHJcblx0XHRcdFx0XHRuZXdJbnN0YW5jZXNMaXN0VGFidWxhciBTZXNzaW9uLmdldChcImJveFwiKSwgU2Vzc2lvbi5nZXQoXCJmbG93SWRcIiksIHJlc3VsdFxyXG5cdFx0XHRcdFx0VGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fY2hhbmdlT3JkZXIoKVxyXG5cclxuXHJcbm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyID0gKGJveCwgZmxvd0lkLCBmaWVsZHMpLT5cclxuXHRpZiAhZmllbGRzXHJcblx0XHRmbG93ID0gZGIuZmxvd3MuZmluZE9uZSh7X2lkOiBmbG93SWR9LCB7ZmllbGRzOiB7Zm9ybTogMX19KVxyXG5cdFx0ZmllbGRzID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdz8uZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5maWVsZHMnOiAxIH0gfSk/LmN1cnJlbnQ/LmZpZWxkc1xyXG5cclxuXHRmaWVsZHMgPSBfaGFuZGxlTGlzdEZpZWxkcyBmaWVsZHNcclxuXHJcblx0aWYgZmllbGRzPy5maWx0ZXJQcm9wZXJ0eShcImlzX2xpc3RfZGlzcGxheVwiLCB0cnVlKT8ubGVuZ3RoID4gMFxyXG5cdFx0a2V5ID0gXCJpbnN0YW5jZUZsb3dcIiArIGJveCArIGZsb3dJZFxyXG5cdFx0aWYgTWV0ZW9yLmlzQ2xpZW50XHJcblx0XHRcdFRhYnVsYXJUYWJsZXMuZmxvd0luc3RhbmNlcy5zZXQobmV3IFRhYnVsYXIuVGFibGUgR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoYm94LCBmbG93SWQsIGZpZWxkcykpXHJcblx0XHRlbHNlXHJcblx0XHRcdG5ldyBUYWJ1bGFyLlRhYmxlIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zKGJveCwgZmxvd0lkLCBmaWVsZHMpXHJcblx0XHRjb25zb2xlLmxvZyBcIm5ldyBUYWJ1bGFyVGFibGVzIFwiLCBrZXlcclxuXHJcbmlmIE1ldGVvci5pc1NlcnZlclxyXG5cdE1ldGVvci5tZXRob2RzXHJcblx0XHRuZXdJbnN0YW5jZXNMaXN0VGFidWxhcjogKGJveCwgZmxvd0lkKS0+XHJcblx0XHRcdG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyKGJveCwgZmxvd0lkKVxyXG5cclxuXHRcdFx0ZmxvdyA9IGRiLmZsb3dzLmZpbmRPbmUoe19pZDogZmxvd0lkfSwge2ZpZWxkczoge2Zvcm06IDF9fSlcclxuXHRcdFx0ZmllbGRzID0gZGIuZm9ybXMuZmluZE9uZSh7IF9pZDogZmxvdz8uZm9ybSB9LCB7IGZpZWxkczogeyAnY3VycmVudC5maWVsZHMnOiAxIH0gfSk/LmN1cnJlbnQ/LmZpZWxkc1xyXG5cdFx0XHRyZXR1cm4gZmllbGRzXHJcblxyXG5cclxuIiwidmFyIEdldEJveEluc3RhbmNlc1RhYnVsYXJPcHRpb25zLCBfZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMsIF9nZXRfb3V0Ym94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMsIF9oYW5kbGVMaXN0RmllbGRzLCBpbnN0YW5jZXNMaXN0VGFibGVUYWJ1bGFyLCBuZXdJbnN0YW5jZXNMaXN0VGFidWxhciwgdXBkYXRlVGFidWxhclRpdGxlO1xuXG5TdGVlZG9zLnN1YnNbXCJJbnN0YW5jZVRhYnVsYXJcIl0gPSBuZXcgU3Vic01hbmFnZXIoKTtcblxuX2hhbmRsZUxpc3RGaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMpIHtcbiAgdmFyIGluc19maWVsZHM7XG4gIGluc19maWVsZHMgPSBuZXcgQXJyYXkoKTtcbiAgaWYgKGZpZWxkcyAhPSBudWxsKSB7XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oZikge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIGlmIChmLnR5cGUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdpZ25vcmUgb3BpbmlvbiBmaWVsZCBpbiB0YWJsZScpO1xuICAgICAgfSBlbHNlIGlmIChmLnR5cGUgPT09ICdzZWN0aW9uJykge1xuICAgICAgICByZXR1cm4gZiAhPSBudWxsID8gKHJlZiA9IGYuZmllbGRzKSAhPSBudWxsID8gcmVmLmZvckVhY2goZnVuY3Rpb24oZjEpIHtcbiAgICAgICAgICByZXR1cm4gaW5zX2ZpZWxkcy5wdXNoKGYxKTtcbiAgICAgICAgfSkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5zX2ZpZWxkcy5wdXNoKGYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBpbnNfZmllbGRzO1xufTtcblxudXBkYXRlVGFidWxhclRpdGxlID0gZnVuY3Rpb24oKSB7fTtcblxuaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhciA9IGZ1bmN0aW9uKGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBpbnNfZmllbGRzLCBrZXksIG9wdGlvbnM7XG4gIG9wdGlvbnMgPSB7XG4gICAgbmFtZTogXCJpbnN0YW5jZXNcIixcbiAgICBjb2xsZWN0aW9uOiBkYi5pbnN0YW5jZXMsXG4gICAgcHViOiBcImluc3RhbmNlX3RhYnVsYXJcIixcbiAgICBvblVubG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWV0ZW9yLnNldFRpbWVvdXQoVGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fdGFibGVDb2x1bW5zLCAxNTApO1xuICAgIH0sXG4gICAgZHJhd0NhbGxiYWNrOiBmdW5jdGlvbihzZXR0aW5ncykge1xuICAgICAgdmFyIGVsbGlwc2lzTGluaywgZW1wdHlUZCwgdGl0bGU7XG4gICAgICBlbXB0eVRkID0gJChcIi5kYXRhVGFibGVzX2VtcHR5XCIpO1xuICAgICAgaWYgKGVtcHR5VGQubGVuZ3RoKSB7XG4gICAgICAgIGVtcHR5VGRbMF0uY29sU3BhbiA9IFwiNlwiO1xuICAgICAgfVxuICAgICAgaWYgKCFTdGVlZG9zLmlzTW9iaWxlKCkgJiYgIVN0ZWVkb3MuaXNQYWQoKSkge1xuICAgICAgICBNZXRlb3Iuc2V0VGltZW91dChUZW1wbGF0ZS5pbnN0YW5jZV9saXN0Ll90YWJsZUNvbHVtbnMsIDE1MCk7XG4gICAgICAgICQoXCIuaW5zdGFuY2UtbGlzdFwiKS5zY3JvbGxUb3AoMCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICQoXCIuaW5zdGFuY2UtbGlzdFwiKS5wZXJmZWN0U2Nyb2xsYmFyKFwidXBkYXRlXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIuaW5zdGFuY2UtbGlzdFwiKS5zY3JvbGxUb3AoMCk7XG4gICAgICB9XG4gICAgICB0aXRsZSA9IHQoXCJwYWdlcl9pbnB1dF9oaW50XCIpO1xuICAgICAgZWxsaXBzaXNMaW5rID0gc2V0dGluZ3Mub0luc3RhbmNlLnBhcmVudCgpLmZpbmQoJy5wYWdpbmdfbnVtYmVycyAucGFnaW5hdGlvbiAuZGlzYWJsZWQgYScpO1xuICAgICAgcmV0dXJuIGVsbGlwc2lzTGluay5hdHRyKFwidGl0bGVcIiwgdGl0bGUpLmNzcyhcImN1cnNvclwiLCBcInBvaW50ZXJcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBnb1BhZ2UsIGlucHV0O1xuICAgICAgICBpZiAoISQodGhpcykuZmluZCgnaW5wdXQnKS5sZW5ndGgpIHtcbiAgICAgICAgICBpbnB1dCA9ICQoJzxpbnB1dCBjbGFzcz1cInBhZ2luYXRlX2lucHV0IGZvcm0tY29udHJvbCBpbnB1dC1zbVwiIHR5cGU9XCJ0ZXh0XCIgc3R5bGU9XCJib3JkZXI6IG5vbmU7IHBhZGRpbmc6MCAycHg7XCIvPicpO1xuICAgICAgICAgIGlmIChTdGVlZG9zLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgICAgIGlucHV0LmNzcyh7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjUycHhcIixcbiAgICAgICAgICAgICAgaGVpZ2h0OiBcIjIwcHhcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0LmNzcyh7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjUycHhcIixcbiAgICAgICAgICAgICAgaGVpZ2h0OiBcIjE2cHhcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlucHV0LmF0dHIoXCJ0aXRsZVwiLCB0aXRsZSkuYXR0cihcInBsYWNlaG9sZGVyXCIsIHRpdGxlKTtcbiAgICAgICAgICAkKHRoaXMpLmVtcHR5KCkuYXBwZW5kKGlucHV0KTtcbiAgICAgICAgICBnb1BhZ2UgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgdmFyIHBhZ2VzO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICBwYWdlcyA9IE1hdGguY2VpbChzZXR0aW5ncy5mblJlY29yZHNEaXNwbGF5KCkgLyBzZXR0aW5ncy5faURpc3BsYXlMZW5ndGgpO1xuICAgICAgICAgICAgICBpZiAoaW5kZXggPiBwYWdlcykge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gcGFnZXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLm9JbnN0YW5jZS5EYXRhVGFibGUoKS5wYWdlKGluZGV4KS5kcmF3KCdwYWdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpbnB1dC5ibHVyKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50UGFnZTtcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgIGdvUGFnZShjdXJyZW50UGFnZSk7XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5wYXJlbnQoKS5odG1sKCcuLi4nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gaW5wdXQua2V5ZG93bihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFBhZ2U7XG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlLnRvU3RyaW5nKCkgPT09IFwiMTNcIikge1xuICAgICAgICAgICAgICBjdXJyZW50UGFnZSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgIHJldHVybiBnb1BhZ2UoY3VycmVudFBhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNyZWF0ZWRSb3c6IGZ1bmN0aW9uKHJvdywgZGF0YSwgZGF0YUluZGV4KSB7XG4gICAgICBpZiAoTWV0ZW9yLmlzQ2xpZW50KSB7XG4gICAgICAgIGlmIChkYXRhLl9pZCA9PT0gRmxvd1JvdXRlci5jdXJyZW50KCkucGFyYW1zLmluc3RhbmNlSWQpIHtcbiAgICAgICAgICByZXR1cm4gcm93LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic2VsZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZGF0YTogXCJfaWRcIixcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBhZ2VudF92aWV3LCBjY192aWV3LCBmbG93X25hbWUsIGluc3RhbmNlTmFtZVByaW9yaXR5Q2xhc3MsIGlzRmF2b3JpdGVTZWxlY3RlZCwgbW9kaWZpZWQsIG1vZGlmaWVkRnJvbU5vdywgbW9kaWZpZWRTdHJpbmcsIHByaW9yaXR5SWNvbiwgcHJpb3JpdHlJY29uQ2xhc3MsIHByaW9yaXR5VmFsdWUsIHJlZiwgcmVmMSwgc3RlcF9jdXJyZW50X25hbWVfdmlldywgdW5yZWFkO1xuICAgICAgICAgIG1vZGlmaWVkU3RyaW5nID0gbW9tZW50KGRvYy5tb2RpZmllZCkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgICAgbW9kaWZpZWQgPSBkb2MubW9kaWZpZWQ7XG4gICAgICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnICYmIGRvYy5zdGF0ZSAhPT0gJ2RyYWZ0Jykge1xuICAgICAgICAgICAgbW9kaWZpZWQgPSBkb2Muc3RhcnRfZGF0ZSB8fCBkb2MubW9kaWZpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ291dGJveCcgfHwgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdtb25pdG9yJykge1xuICAgICAgICAgICAgbW9kaWZpZWQgPSBkb2Muc3VibWl0X2RhdGUgfHwgZG9jLnN1Ym1pdF9kYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb2RpZmllZEZyb21Ob3cgPSBTdGVlZG9zLm1vbWVudFJlYWN0aXZlRnJvbU5vdyhtb2RpZmllZCk7XG4gICAgICAgICAgZmxvd19uYW1lID0gZG9jLmZsb3dfbmFtZTtcbiAgICAgICAgICBjY192aWV3ID0gXCJcIjtcbiAgICAgICAgICBzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCJcIjtcbiAgICAgICAgICBpZiAoZG9jLmlzX2NjICYmICEoKHJlZiA9IGRvYy5pbmJveF91c2VycykgIT0gbnVsbCA/IHJlZi5pbmNsdWRlcyhNZXRlb3IudXNlcklkKCkpIDogdm9pZCAwKSAmJiBTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94Jykge1xuICAgICAgICAgICAgY2NfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXyhcImluc3RhbmNlX2NjX3RpdGxlXCIpICsgXCIpPC9sYWJlbD4gXCI7XG4gICAgICAgICAgICBzdGVwX2N1cnJlbnRfbmFtZV92aWV3ID0gXCI8ZGl2IGNsYXNzPSdmbG93LW5hbWUnPlwiICsgZmxvd19uYW1lICsgXCI8c3Bhbj4oXCIgKyBkb2MuY3VycmVudF9zdGVwX25hbWUgKyBcIik8L3NwYW4+PC9kaXY+XCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChTZXNzaW9uLmdldChcImJveFwiKSAhPT0gJ2RyYWZ0JyAmJiBkb2MuY3VycmVudF9zdGVwX25hbWUpIHtcbiAgICAgICAgICAgICAgc3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz5cIiArIGZsb3dfbmFtZSArIFwiPHNwYW4+KFwiICsgZG9jLmN1cnJlbnRfc3RlcF9uYW1lICsgXCIpPC9zcGFuPjwvZGl2PlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiPGRpdiBjbGFzcz0nZmxvdy1uYW1lJz5cIiArIGZsb3dfbmFtZSArIFwiPC9kaXY+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGFnZW50X3ZpZXcgPSBcIlwiO1xuICAgICAgICAgIGlmIChkb2MuYWdlbnRfdXNlcl9uYW1lICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnaW5ib3gnKSB7XG4gICAgICAgICAgICBhZ2VudF92aWV3ID0gXCI8bGFiZWwgY2xhc3M9J2NjLWxhYmVsJz4oXCIgKyBUQVBpMThuLl9fKCdwcm9jZXNzX2RlbGVnYXRpb25fcnVsZXNfZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHVzZXJOYW1lOiBkb2MuYWdlbnRfdXNlcl9uYW1lXG4gICAgICAgICAgICB9KSArIFwiKTwvbGFiZWw+XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVucmVhZCA9ICcnO1xuICAgICAgICAgIGlzRmF2b3JpdGVTZWxlY3RlZCA9IEZhdm9yaXRlcy5pc1JlY29yZFNlbGVjdGVkKFwiaW5zdGFuY2VzXCIsIGRvYy5faWQpO1xuICAgICAgICAgIGlmIChGYXZvcml0ZXMuaXNSZWNvcmRTZWxlY3RlZChcImluc3RhbmNlc1wiLCBkb2MuX2lkKSkge1xuICAgICAgICAgICAgdW5yZWFkID0gJzxpIGNsYXNzPVwiaW9uIGlvbi1pb3Mtc3Rhci1vdXRsaW5lIGluc3RhbmNlLWZhdm9yaXRlLXNlbGVjdGVkXCI+PC9pPic7XG4gICAgICAgICAgfSBlbHNlIGlmIChTZXNzaW9uLmdldChcImJveFwiKSA9PT0gJ2luYm94JyAmJiBkb2MuaXNfcmVhZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVucmVhZCA9ICc8aSBjbGFzcz1cImlvbiBpb24tcmVjb3JkIHVucmVhZFwiPjwvaT4nO1xuICAgICAgICAgIH0gZWxzZSBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdtb25pdG9yJyAmJiBkb2MuaXNfaGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgICB1bnJlYWQgPSAnPGkgY2xhc3M9XCJmYSBmYS1sb2NrXCI+PC9pPic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByaW9yaXR5SWNvbiA9IFwiXCI7XG4gICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIlwiO1xuICAgICAgICAgIHByaW9yaXR5VmFsdWUgPSAocmVmMSA9IGRvYy52YWx1ZXMpICE9IG51bGwgPyByZWYxLnByaW9yaXR5IDogdm9pZCAwO1xuICAgICAgICAgIHN3aXRjaCAocHJpb3JpdHlWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcIueJueaApVwiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwiZGFuZ2VyXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIue0p+aApVwiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwid2FybmluZ1wiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCLlip7mlodcIjpcbiAgICAgICAgICAgICAgcHJpb3JpdHlJY29uQ2xhc3MgPSBcIm11dGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmlvcml0eUljb25DbGFzcykge1xuICAgICAgICAgICAgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyA9IFwiY29sb3ItcHJpb3JpdHkgY29sb3ItcHJpb3JpdHktXCIgKyBwcmlvcml0eUljb25DbGFzcztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0naW5zdGFuY2UtcmVhZC1iYXInPlwiICsgdW5yZWFkICsgXCI8L2Rpdj5cXG48ZGl2IGNsYXNzPSdpbnN0YW5jZS1uYW1lIFwiICsgaW5zdGFuY2VOYW1lUHJpb3JpdHlDbGFzcyArIFwiJz5cIiArIGRvYy5uYW1lICsgY2NfdmlldyArIGFnZW50X3ZpZXcgKyBcIlxcblx0PHNwYW4+XCIgKyBkb2MuYXBwbGljYW50X25hbWUgKyBcIjwvc3Bhbj5cXG48L2Rpdj5cXG48ZGl2IGNsYXNzPSdpbnN0YW5jZS1kZXRhaWwnPlwiICsgc3RlcF9jdXJyZW50X25hbWVfdmlldyArIFwiXFxuXHQ8c3BhbiBjbGFzcz0naW5zdGFuY2UtbW9kaWZpZWQnIHRpdGxlPSdcIiArIG1vZGlmaWVkU3RyaW5nICsgXCInPlwiICsgbW9kaWZpZWRGcm9tTm93ICsgXCI8L3NwYW4+XFxuPC9kaXY+XCI7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJhcHBsaWNhbnRfb3JnYW5pemF0aW9uX25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfYXBwbGljYW50X29yZ2FuaXphdGlvbl9uYW1lXCIpLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcIm5hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfbmFtZVwiKSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgIHZhciBhZ2VudF92aWV3LCBjY192aWV3LCBpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzLCBwcmlvcml0eUljb25DbGFzcywgcHJpb3JpdHlWYWx1ZSwgcmVmLCByZWYxLCBzdGVwX2N1cnJlbnRfbmFtZV92aWV3LCB1bnJlYWQ7XG4gICAgICAgICAgY2NfdmlldyA9IFwiXCI7XG4gICAgICAgICAgc3RlcF9jdXJyZW50X25hbWVfdmlldyA9IFwiXCI7XG4gICAgICAgICAgaWYgKGRvYy5pc19jYyAmJiAhKChyZWYgPSBkb2MuaW5ib3hfdXNlcnMpICE9IG51bGwgPyByZWYuaW5jbHVkZXMoTWV0ZW9yLnVzZXJJZCgpKSA6IHZvaWQgMCkgJiYgU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcpIHtcbiAgICAgICAgICAgIGNjX3ZpZXcgPSBcIjxsYWJlbCBjbGFzcz0nY2MtbGFiZWwnPihcIiArIFRBUGkxOG4uX18oXCJpbnN0YW5jZV9jY190aXRsZVwiKSArIFwiKTwvbGFiZWw+IFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZ2VudF92aWV3ID0gXCJcIjtcbiAgICAgICAgICBpZiAoZG9jLmFnZW50X3VzZXJfbmFtZSkge1xuICAgICAgICAgICAgYWdlbnRfdmlldyA9IFwiPGxhYmVsIGNsYXNzPSdjYy1sYWJlbCc+KFwiICsgVEFQaTE4bi5fXygncHJvY2Vzc19kZWxlZ2F0aW9uX3J1bGVzX2Rlc2NyaXB0aW9uJywge1xuICAgICAgICAgICAgICB1c2VyTmFtZTogZG9jLmFnZW50X3VzZXJfbmFtZVxuICAgICAgICAgICAgfSkgKyBcIik8L2xhYmVsPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1bnJlYWQgPSAnJztcbiAgICAgICAgICBpZiAoU2Vzc2lvbi5nZXQoXCJib3hcIikgPT09ICdpbmJveCcgJiYgZG9jLmlzX3JlYWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1bnJlYWQgPSAnPGkgY2xhc3M9XCJpb24gaW9uLXJlY29yZCB1bnJlYWRcIj48L2k+JztcbiAgICAgICAgICB9IGVsc2UgaWYgKFNlc3Npb24uZ2V0KFwiYm94XCIpID09PSAnbW9uaXRvcicgJiYgZG9jLmlzX2hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdW5yZWFkID0gJzxpIGNsYXNzPVwiZmEgZmEtbG9ja1wiPjwvaT4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwiXCI7XG4gICAgICAgICAgcHJpb3JpdHlWYWx1ZSA9IChyZWYxID0gZG9jLnZhbHVlcykgIT0gbnVsbCA/IHJlZjEucHJpb3JpdHkgOiB2b2lkIDA7XG4gICAgICAgICAgc3dpdGNoIChwcmlvcml0eVZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwi54m55oClXCI6XG4gICAgICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJkYW5nZXJcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwi57Sn5oClXCI6XG4gICAgICAgICAgICAgIHByaW9yaXR5SWNvbkNsYXNzID0gXCJ3YXJuaW5nXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIuWKnuaWh1wiOlxuICAgICAgICAgICAgICBwcmlvcml0eUljb25DbGFzcyA9IFwibXV0ZWRcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByaW9yaXR5SWNvbkNsYXNzKSB7XG4gICAgICAgICAgICBpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzID0gXCJjb2xvci1wcmlvcml0eSBjb2xvci1wcmlvcml0eS1cIiArIHByaW9yaXR5SWNvbkNsYXNzO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdpbnN0YW5jZS1yZWFkLWJhcic+XCIgKyB1bnJlYWQgKyBcIjwvZGl2PlxcbjxkaXYgY2xhc3M9J2luc3RhbmNlLW5hbWUgXCIgKyBpbnN0YW5jZU5hbWVQcmlvcml0eUNsYXNzICsgXCInPlwiICsgZG9jLm5hbWUgKyBjY192aWV3ICsgYWdlbnRfdmlldyArIFwiPC9kaXY+XCI7XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiYXBwbGljYW50X25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfYXBwbGljYW50X25hbWVcIiksXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwic3VibWl0X2RhdGVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfc3VibWl0X2RhdGVcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICBpZiAoZG9jLnN1Ym1pdF9kYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KGRvYy5zdWJtaXRfZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiZmxvd19uYW1lXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX2Zsb3dcIiksXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwiY3VycmVudF9zdGVwX25hbWVcIixcbiAgICAgICAgdGl0bGU6IHQoXCJpbnN0YW5jZXNfc3RlcF9jdXJyZW50X25hbWVcIiksXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24odmFsLCB0eXBlLCBkb2MpIHtcbiAgICAgICAgICB2YXIgY2NfdGFnLCBqdWRnZSwgc3RlcF9jdXJyZW50X25hbWU7XG4gICAgICAgICAgaWYgKGRvYy5zdGF0ZSA9PT0gXCJjb21wbGV0ZWRcIikge1xuICAgICAgICAgICAganVkZ2UgPSBkb2MuZmluYWxfZGVjaXNpb24gfHwgXCJhcHByb3ZlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGVwX2N1cnJlbnRfbmFtZSA9IGRvYy5jdXJyZW50X3N0ZXBfbmFtZSB8fCAnJztcbiAgICAgICAgICBjY190YWcgPSAnJztcbiAgICAgICAgICBpZiAoZG9jLmNjX2NvdW50ID4gMCkge1xuICAgICAgICAgICAgY2NfdGFnID0gVEFQaTE4bi5fXygnY2NfdGFnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcInN0ZXAtY3VycmVudC1zdGF0ZSBcIiArIGp1ZGdlICsgXCJcXFwiPlwiICsgc3RlcF9jdXJyZW50X25hbWUgKyBjY190YWcgKyBcIjwvZGl2PlwiO1xuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcIm1vZGlmaWVkXCIsXG4gICAgICAgIHRpdGxlOiB0KFwiaW5zdGFuY2VzX21vZGlmaWVkXCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgcmV0dXJuIG1vbWVudChkb2MubW9kaWZpZWQpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgb3JkZXJhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwic3RhcnRfZGF0ZVwiLFxuICAgICAgICB0aXRsZTogdChcImluc3RhbmNlc19zdGFydF9kYXRlXCIpLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgaWYgKGRvYy5zdGFydF9kYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KGRvYy5zdGFydF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBvcmRlcmFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJteV9maW5pc2hfZGF0ZVwiLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgaWYgKGRvYy5teV9maW5pc2hfZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkb2MubXlfZmluaXNoX2RhdGUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkYXRhOiBcIm1vZGlmaWVkXCIsXG4gICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIGRhdGE6IFwia2V5d29yZHNcIixcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgZGF0YTogXCJpc19hcmNoaXZlZFwiLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHZhbCwgdHlwZSwgZG9jKSB7XG4gICAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgICBpZiAoKGRvYyAhPSBudWxsID8gKHJlZiA9IGRvYy52YWx1ZXMpICE9IG51bGwgPyByZWYucmVjb3JkX25lZWQgOiB2b2lkIDAgOiB2b2lkIDApICYmIGRvYy52YWx1ZXMucmVjb3JkX25lZWQgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICBpZiAoZG9jICE9IG51bGwgPyBkb2MuaXNfYXJjaGl2ZWQgOiB2b2lkIDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQoXCJZRVNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdChcIk5PXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG9yZGVyYWJsZTogZmFsc2VcbiAgICAgIH1cbiAgICBdLFxuICAgIGRvbTogKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKFN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgICByZXR1cm4gJ3RwJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAndHBsJztcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIG9yZGVyOiBbWzQsIFwiZGVzY1wiXV0sXG4gICAgZXh0cmFGaWVsZHM6IFtcImZvcm1cIiwgXCJmbG93XCIsIFwiaW5ib3hfdXNlcnNcIiwgXCJzdGF0ZVwiLCBcInNwYWNlXCIsIFwiYXBwbGljYW50XCIsIFwiZm9ybV92ZXJzaW9uXCIsIFwiZmxvd192ZXJzaW9uXCIsIFwiaXNfY2NcIiwgXCJjY19jb3VudFwiLCBcImlzX3JlYWRcIiwgXCJjdXJyZW50X3N0ZXBfbmFtZVwiLCBcInZhbHVlc1wiLCBcImtleXdvcmRzXCIsIFwiZmluYWxfZGVjaXNpb25cIiwgXCJmbG93X25hbWVcIiwgXCJpc19oaWRkZW5cIiwgXCJhZ2VudF91c2VyX25hbWVcIl0sXG4gICAgbGVuZ3RoQ2hhbmdlOiB0cnVlLFxuICAgIGxlbmd0aE1lbnU6IFsxMCwgMTUsIDIwLCAyNSwgNTAsIDEwMF0sXG4gICAgcGFnZUxlbmd0aDogMTAsXG4gICAgaW5mbzogZmFsc2UsXG4gICAgc2VhcmNoaW5nOiB0cnVlLFxuICAgIHJlc3BvbnNpdmU6IHtcbiAgICAgIGRldGFpbHM6IGZhbHNlXG4gICAgfSxcbiAgICBhdXRvV2lkdGg6IGZhbHNlLFxuICAgIGNoYW5nZVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvciwgdXNlcklkKSB7XG4gICAgICB2YXIgcmVmLCBzcGFjZSwgc3BhY2VfdXNlcjtcbiAgICAgIGlmICghdXNlcklkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX2lkOiAtMVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3BhY2UgPSBzZWxlY3Rvci5zcGFjZTtcbiAgICAgIGlmICghc3BhY2UpIHtcbiAgICAgICAgaWYgKChzZWxlY3RvciAhPSBudWxsID8gKHJlZiA9IHNlbGVjdG9yLiRhbmQpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA+IDApIHtcbiAgICAgICAgICBzcGFjZSA9IHNlbGVjdG9yLiRhbmQuZ2V0UHJvcGVydHkoJ3NwYWNlJylbMF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghc3BhY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfaWQ6IC0xXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzcGFjZV91c2VyID0gZGIuc3BhY2VfdXNlcnMuZmluZE9uZSh7XG4gICAgICAgIHVzZXI6IHVzZXJJZCxcbiAgICAgICAgc3BhY2U6IHNwYWNlXG4gICAgICB9LCB7XG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIF9pZDogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghc3BhY2VfdXNlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIF9pZDogLTFcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICB9LFxuICAgIHBhZ2luZ1R5cGU6IFwibnVtYmVyc1wiXG4gIH07XG4gIGlmIChmbG93SWQpIHtcbiAgICBrZXkgPSBcImluc3RhbmNlRmxvd1wiICsgZmxvd0lkO1xuICAgIG9wdGlvbnMubmFtZSA9IGtleTtcbiAgICBUYWJ1bGFyVGFibGVzLmluc3RhbmNlcy5maWVsZHMgPSBmaWVsZHM7XG4gICAgaW5zX2ZpZWxkcyA9IF9oYW5kbGVMaXN0RmllbGRzKFRhYnVsYXJUYWJsZXMuaW5zdGFuY2VzLmZpZWxkcyk7XG4gICAgaW5zX2ZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICAgIGlmIChmLnR5cGUgIT09ICd0YWJsZScgJiYgZi5pc19saXN0X2Rpc3BsYXkpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuY29sdW1ucy5wdXNoKHtcbiAgICAgICAgICBkYXRhOiBmLm5hbWUgfHwgZi5jb2RlLFxuICAgICAgICAgIHRpdGxlOiB0KGYubmFtZSB8fCBmLmNvZGUpLFxuICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICAgIG9yZGVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih2YWwsIHR5cGUsIGRvYykge1xuICAgICAgICAgICAgdmFyIHZhbHVlLCB2YWx1ZXM7XG4gICAgICAgICAgICB2YWx1ZXMgPSBkb2MudmFsdWVzIHx8IHt9O1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbZi5jb2RlXTtcbiAgICAgICAgICAgIHN3aXRjaCAoZi50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ3VzZXInOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLm5hbWUgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2dyb3VwJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS5mdWxsbmFtZSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbWVudCh2YWx1ZSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdkYXRlVGltZSc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbWVudCh2YWx1ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gVEFQaTE4bi5fXyhcImZvcm1fZmllbGRfY2hlY2tib3hfeWVzXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IFRBUGkxOG4uX18oXCJmb3JtX2ZpZWxkX2NoZWNrYm94X25vXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnb2RhdGEnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfLnBsdWNrKHZhbHVlLCAnQGxhYmVsJykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbJ0BsYWJlbCddO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUYWJ1bGFyVGFibGVzLmluc3RhbmNlcyA9IG5ldyBUYWJ1bGFyLlRhYmxlKGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoKSk7XG59KTtcblxuR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMgPSBmdW5jdGlvbihib3gsIGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBrZXksIG9wdGlvbnM7XG4gIGtleSA9IFwiaW5zdGFuY2VGbG93XCIgKyBib3ggKyBmbG93SWQ7XG4gIGlmIChib3ggPT09IFwiaW5ib3hcIikge1xuICAgIG9wdGlvbnMgPSBfZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMoZmxvd0lkLCBmaWVsZHMpO1xuICB9IGVsc2UgaWYgKGJveCA9PT0gXCJvdXRib3hcIikge1xuICAgIG9wdGlvbnMgPSBfZ2V0X291dGJveF9pbnN0YW5jZXNfdGFidWxhcl9vcHRpb25zKGZsb3dJZCwgZmllbGRzKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcyk7XG4gICAgaWYgKCFmbG93SWQpIHtcbiAgICAgIG9wdGlvbnMubmFtZSA9IFwiaW5ib3hfaW5zdGFuY2VzXCI7XG4gICAgfVxuICB9XG4gIGlmIChmbG93SWQpIHtcbiAgICBvcHRpb25zLm5hbWUgPSBrZXk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5fZ2V0X2luYm94X2luc3RhbmNlc190YWJ1bGFyX29wdGlvbnMgPSBmdW5jdGlvbihmbG93SWQsIGZpZWxkcykge1xuICB2YXIgb3B0aW9ucztcbiAgb3B0aW9ucyA9IGluc3RhbmNlc0xpc3RUYWJsZVRhYnVsYXIoZmxvd0lkLCBmaWVsZHMpO1xuICBpZiAoIWZsb3dJZCkge1xuICAgIG9wdGlvbnMubmFtZSA9IFwiaW5ib3hfaW5zdGFuY2VzXCI7XG4gIH1cbiAgb3B0aW9ucy5vcmRlciA9IFtbOCwgXCJkZXNjXCJdXTtcbiAgb3B0aW9ucy5maWx0ZXJlZFJlY29yZElkcyA9IGZ1bmN0aW9uKHRhYmxlLCBzZWxlY3Rvciwgc29ydCwgc2tpcCwgbGltaXQsIG9sZF9maWx0ZXJlZFJlY29yZElkcywgdXNlcklkLCBmaW5kT3B0aW9ucykge1xuICAgIHZhciBhZ19zb3J0LCBhZ2dyZWdhdGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGFzeW5jX2FnZ3JlZ2F0ZSwgZmlsdGVyZWRSZWNvcmRJZHMsIHMxLCBzMV8wLCBzMV8xO1xuICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24gPSBbXG4gICAgICB7XG4gICAgICAgICRtYXRjaDogc2VsZWN0b3JcbiAgICAgIH0sIHtcbiAgICAgICAgJHByb2plY3Q6IHtcbiAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgIFwiX2FwcHJvdmVcIjogJyR0cmFjZXMuYXBwcm92ZXMnXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgJHVud2luZDogXCIkX2FwcHJvdmVcIlxuICAgICAgfSwge1xuICAgICAgICAkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG4gICAgICB9LCB7XG4gICAgICAgICRtYXRjaDoge1xuICAgICAgICAgICdfYXBwcm92ZS5pc19maW5pc2hlZCc6IGZhbHNlLFxuICAgICAgICAgICdfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICAgIGlmIChzb3J0ICYmIHNvcnQubGVuZ3RoID4gMCkge1xuICAgICAgczEgPSBzb3J0WzBdO1xuICAgICAgczFfMCA9IHMxWzBdO1xuICAgICAgczFfMSA9IHMxWzFdO1xuICAgICAgaWYgKHMxXzAgPT09ICdzdGFydF9kYXRlJykge1xuICAgICAgICBmaW5kT3B0aW9ucy5zb3J0ID0gW1snbW9kaWZpZWQnLCBzMV8xXV07XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJGdyb3VwOiB7XG4gICAgICAgICAgICBfaWQ6IFwiJF9pZFwiLFxuICAgICAgICAgICAgXCJhcHByb3ZlX3N0YXJ0X2RhdGVcIjoge1xuICAgICAgICAgICAgICAkZmlyc3Q6IFwiJF9hcHByb3ZlLnN0YXJ0X2RhdGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFnX3NvcnQgPSB7XG4gICAgICAgICAgJ2FwcHJvdmVfc3RhcnRfZGF0ZSc6IHMxXzEgPT09ICdhc2MnID8gMSA6IC0xXG4gICAgICAgIH07XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJHNvcnQ6IGFnX3NvcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJHNraXA6IHNraXBcbiAgICAgICAgfSk7XG4gICAgICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24ucHVzaCh7XG4gICAgICAgICAgJGxpbWl0OiBsaW1pdFxuICAgICAgICB9KTtcbiAgICAgICAgZmlsdGVyZWRSZWNvcmRJZHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgYWdncmVnYXRlID0gZnVuY3Rpb24odGFibGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGZpbHRlcmVkUmVjb3JkSWRzLCBjYikge1xuICAgICAgICAgIHRhYmxlLmNvbGxlY3Rpb24ucmF3Q29sbGVjdGlvbigpLmFnZ3JlZ2F0ZShhZ2dyZWdhdGVfb3BlcmF0aW9uKS50b0FycmF5KGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgICAgZmlsdGVyZWRSZWNvcmRJZHMucHVzaChkb2MuX2lkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGFzeW5jX2FnZ3JlZ2F0ZSA9IE1ldGVvci53cmFwQXN5bmMoYWdncmVnYXRlKTtcbiAgICAgICAgYXN5bmNfYWdncmVnYXRlKHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkcyk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFJlY29yZElkcy51bmlxKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb2xkX2ZpbHRlcmVkUmVjb3JkSWRzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5NZXRlb3Iuc3RhcnR1cChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFRhYnVsYXJUYWJsZXMuaW5ib3hfaW5zdGFuY2VzID0gbmV3IFRhYnVsYXIuVGFibGUoR2V0Qm94SW5zdGFuY2VzVGFidWxhck9wdGlvbnMoXCJpbmJveFwiKSk7XG59KTtcblxuX2dldF9vdXRib3hfaW5zdGFuY2VzX3RhYnVsYXJfb3B0aW9ucyA9IGZ1bmN0aW9uKGZsb3dJZCwgZmllbGRzKSB7XG4gIHZhciBvcHRpb25zO1xuICBvcHRpb25zID0gaW5zdGFuY2VzTGlzdFRhYmxlVGFidWxhcihmbG93SWQsIGZpZWxkcyk7XG4gIGlmICghZmxvd0lkKSB7XG4gICAgb3B0aW9ucy5uYW1lID0gXCJvdXRib3hfaW5zdGFuY2VzXCI7XG4gIH1cbiAgb3B0aW9ucy5vcmRlciA9IFtbOSwgXCJkZXNjXCJdXTtcbiAgb3B0aW9ucy5maWx0ZXJlZFJlY29yZElkcyA9IGZ1bmN0aW9uKHRhYmxlLCBzZWxlY3Rvciwgc29ydCwgc2tpcCwgbGltaXQsIG9sZF9maWx0ZXJlZFJlY29yZElkcywgdXNlcklkLCBmaW5kT3B0aW9ucykge1xuICAgIHZhciBhZ19zb3J0LCBhZ2dyZWdhdGUsIGFnZ3JlZ2F0ZV9vcGVyYXRpb24sIGFzeW5jX2FnZ3JlZ2F0ZSwgZmlsdGVyZWRSZWNvcmRJZHMsIHMxLCBzMV8wLCBzMV8xO1xuICAgIGFnZ3JlZ2F0ZV9vcGVyYXRpb24gPSBbXG4gICAgICB7XG4gICAgICAgICRtYXRjaDogc2VsZWN0b3JcbiAgICAgIH0sIHtcbiAgICAgICAgJHByb2plY3Q6IHtcbiAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgIFwiX2FwcHJvdmVcIjogJyR0cmFjZXMuYXBwcm92ZXMnXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgJHVud2luZDogXCIkX2FwcHJvdmVcIlxuICAgICAgfSwge1xuICAgICAgICAkdW53aW5kOiBcIiRfYXBwcm92ZVwiXG4gICAgICB9LCB7XG4gICAgICAgICRtYXRjaDoge1xuICAgICAgICAgICdfYXBwcm92ZS5pc19maW5pc2hlZCc6IHRydWUsXG4gICAgICAgICAgJG9yOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICdfYXBwcm92ZS5oYW5kbGVyJzogdXNlcklkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICdfYXBwcm92ZS51c2VyJzogdXNlcklkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXTtcbiAgICBpZiAoc29ydCAmJiBzb3J0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHMxID0gc29ydFswXTtcbiAgICAgIHMxXzAgPSBzMVswXTtcbiAgICAgIHMxXzEgPSBzMVsxXTtcbiAgICAgIGlmIChzMV8wID09PSAnbXlfZmluaXNoX2RhdGUnKSB7XG4gICAgICAgIGZpbmRPcHRpb25zLnNvcnQgPSBbWydtb2RpZmllZCcsIHMxXzFdXTtcbiAgICAgICAgYWdncmVnYXRlX29wZXJhdGlvbi5wdXNoKHtcbiAgICAgICAgICAkZ3JvdXA6IHtcbiAgICAgICAgICAgIF9pZDogXCIkX2lkXCIsXG4gICAgICAgICAgICBcImFwcHJvdmVfZmluaXNoX2RhdGVcIjoge1xuICAgICAgICAgICAgICAkbGFzdDogXCIkX2FwcHJvdmUuZmluaXNoX2RhdGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFnX3NvcnQgPSB7XG4gICAgICAgICAgJ2FwcHJvdmVfZmluaXNoX2RhdGUnOiBzMV8xID09PSAnYXNjJyA/IDEgOiAtMVxuICAgICAgICB9O1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRzb3J0OiBhZ19zb3J0XG4gICAgICAgIH0pO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRza2lwOiBza2lwXG4gICAgICAgIH0pO1xuICAgICAgICBhZ2dyZWdhdGVfb3BlcmF0aW9uLnB1c2goe1xuICAgICAgICAgICRsaW1pdDogbGltaXRcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbHRlcmVkUmVjb3JkSWRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGFnZ3JlZ2F0ZSA9IGZ1bmN0aW9uKHRhYmxlLCBhZ2dyZWdhdGVfb3BlcmF0aW9uLCBmaWx0ZXJlZFJlY29yZElkcywgY2IpIHtcbiAgICAgICAgICB0YWJsZS5jb2xsZWN0aW9uLnJhd0NvbGxlY3Rpb24oKS5hZ2dyZWdhdGUoYWdncmVnYXRlX29wZXJhdGlvbikudG9BcnJheShmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICAgIGZpbHRlcmVkUmVjb3JkSWRzLnB1c2goZG9jLl9pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBhc3luY19hZ2dyZWdhdGUgPSBNZXRlb3Iud3JhcEFzeW5jKGFnZ3JlZ2F0ZSk7XG4gICAgICAgIGFzeW5jX2FnZ3JlZ2F0ZSh0YWJsZSwgYWdncmVnYXRlX29wZXJhdGlvbiwgZmlsdGVyZWRSZWNvcmRJZHMpO1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRSZWNvcmRJZHMudW5pcSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9sZF9maWx0ZXJlZFJlY29yZElkcztcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUYWJ1bGFyVGFibGVzLm91dGJveF9pbnN0YW5jZXMgPSBuZXcgVGFidWxhci5UYWJsZShHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhcIm91dGJveFwiKSk7XG59KTtcblxuaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICBUYWJ1bGFyVGFibGVzLmZsb3dJbnN0YW5jZXMgPSBuZXcgUmVhY3RpdmVWYXIoKTtcbn1cblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBUcmFja2VyLmF1dG9ydW4oZnVuY3Rpb24oYykge1xuICAgIGlmIChNZXRlb3IuaXNDbGllbnQgJiYgIVN0ZWVkb3MuaXNNb2JpbGUoKSkge1xuICAgICAgaWYgKFNlc3Npb24uZ2V0KFwiZmxvd0lkXCIpICYmIFNlc3Npb24uZ2V0KFwiYm94XCIpICE9PSAnZHJhZnQnKSB7XG4gICAgICAgIHJldHVybiBNZXRlb3IuY2FsbChcIm5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyXCIsIFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgIG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyKFNlc3Npb24uZ2V0KFwiYm94XCIpLCBTZXNzaW9uLmdldChcImZsb3dJZFwiKSwgcmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gVGVtcGxhdGUuaW5zdGFuY2VfbGlzdC5fY2hhbmdlT3JkZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pO1xuXG5uZXdJbnN0YW5jZXNMaXN0VGFidWxhciA9IGZ1bmN0aW9uKGJveCwgZmxvd0lkLCBmaWVsZHMpIHtcbiAgdmFyIGZsb3csIGtleSwgcmVmLCByZWYxLCByZWYyO1xuICBpZiAoIWZpZWxkcykge1xuICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgIF9pZDogZmxvd0lkXG4gICAgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGZvcm06IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmaWVsZHMgPSAocmVmID0gZGIuZm9ybXMuZmluZE9uZSh7XG4gICAgICBfaWQ6IGZsb3cgIT0gbnVsbCA/IGZsb3cuZm9ybSA6IHZvaWQgMFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICAnY3VycmVudC5maWVsZHMnOiAxXG4gICAgICB9XG4gICAgfSkpICE9IG51bGwgPyAocmVmMSA9IHJlZi5jdXJyZW50KSAhPSBudWxsID8gcmVmMS5maWVsZHMgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIH1cbiAgZmllbGRzID0gX2hhbmRsZUxpc3RGaWVsZHMoZmllbGRzKTtcbiAgaWYgKChmaWVsZHMgIT0gbnVsbCA/IChyZWYyID0gZmllbGRzLmZpbHRlclByb3BlcnR5KFwiaXNfbGlzdF9kaXNwbGF5XCIsIHRydWUpKSAhPSBudWxsID8gcmVmMi5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID4gMCkge1xuICAgIGtleSA9IFwiaW5zdGFuY2VGbG93XCIgKyBib3ggKyBmbG93SWQ7XG4gICAgaWYgKE1ldGVvci5pc0NsaWVudCkge1xuICAgICAgVGFidWxhclRhYmxlcy5mbG93SW5zdGFuY2VzLnNldChuZXcgVGFidWxhci5UYWJsZShHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhib3gsIGZsb3dJZCwgZmllbGRzKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgVGFidWxhci5UYWJsZShHZXRCb3hJbnN0YW5jZXNUYWJ1bGFyT3B0aW9ucyhib3gsIGZsb3dJZCwgZmllbGRzKSk7XG4gICAgfVxuICAgIHJldHVybiBjb25zb2xlLmxvZyhcIm5ldyBUYWJ1bGFyVGFibGVzIFwiLCBrZXkpO1xuICB9XG59O1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIE1ldGVvci5tZXRob2RzKHtcbiAgICBuZXdJbnN0YW5jZXNMaXN0VGFidWxhcjogZnVuY3Rpb24oYm94LCBmbG93SWQpIHtcbiAgICAgIHZhciBmaWVsZHMsIGZsb3csIHJlZiwgcmVmMTtcbiAgICAgIG5ld0luc3RhbmNlc0xpc3RUYWJ1bGFyKGJveCwgZmxvd0lkKTtcbiAgICAgIGZsb3cgPSBkYi5mbG93cy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93SWRcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgZm9ybTogMVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZpZWxkcyA9IChyZWYgPSBkYi5mb3Jtcy5maW5kT25lKHtcbiAgICAgICAgX2lkOiBmbG93ICE9IG51bGwgPyBmbG93LmZvcm0gOiB2b2lkIDBcbiAgICAgIH0sIHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgJ2N1cnJlbnQuZmllbGRzJzogMVxuICAgICAgICB9XG4gICAgICB9KSkgIT0gbnVsbCA/IChyZWYxID0gcmVmLmN1cnJlbnQpICE9IG51bGwgPyByZWYxLmZpZWxkcyA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==
