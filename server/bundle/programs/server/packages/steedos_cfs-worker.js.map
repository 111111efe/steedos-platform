{"version":3,"sources":["meteor://ðŸ’»app/packages/steedos:cfs-worker/fileWorker.js"],"names":["FS","FileWorker","path","require","fs","observe","fsCollection","getReadyQuery","storeName","selector","uploadedAt","$exists","$ne","getDoneQuery","stores","$and","chunks","Utility","each","store","name","copyCond","$or","tempCond","push","saveCopy","fsFile","options","storage","StorageAdapter","Error","debug","console","log","TempStore","exists","temp_chunk","Tracker","findOne","fileId","_id","is_saveCopy","filepath","join","__meteor_bootstrap__","serverDir","keys","existsSync","r","update","$set","writeStream","adapter","createWriteStream","readStream","createReadStream","pipe"],"mappings":"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","file":"/packages/steedos_cfs-worker.js","sourcesContent":["//// TODO: Use power queue to handle throttling etc.\r\n//// Use observe to monitor changes and have it create tasks for the power queue\r\n//// to perform.\r\n\r\n/**\r\n * @public\r\n * @type Object\r\n */\r\nFS.FileWorker = {};\r\nvar path = require('path');\r\nvar fs = require('fs');\r\n\r\n/**\r\n * @method FS.FileWorker.observe\r\n * @public\r\n * @param {FS.Collection} fsCollection\r\n * @returns {undefined}\r\n *\r\n * Sets up observes on the fsCollection to store file copies and delete\r\n * temp files at the appropriate times.\r\n */\r\nFS.FileWorker.observe = function (fsCollection) {\r\n\r\n  // if (Meteor.settings.cfs && Meteor.settings.cfs.worker && Meteor.settings.cfs.worker.enabled) {\r\n  //   // Initiate observe for finding newly uploaded/added files that need to be stored\r\n  //   // per store.\r\n  //   FS.Utility.each(fsCollection.options.stores, function (store) {\r\n  //     var storeName = store.name;\r\n  //     fsCollection.files.find(getReadyQuery(storeName), {\r\n  //       fields: {\r\n  //         copies: 0\r\n  //       }\r\n  //     }).observe({\r\n  //       added: function (fsFile) {\r\n  //         // added will catch fresh files\r\n  //         FS.debug && console.log(\"FileWorker ADDED - calling saveCopy\", storeName, \"for\", fsFile._id);\r\n  //         saveCopy(fsFile, storeName);\r\n  //       },\r\n  //       changed: function (fsFile) {\r\n  //         // changed will catch failures and retry them\r\n  //         FS.debug && console.log(\"FileWorker CHANGED - calling saveCopy\", storeName, \"for\", fsFile._id);\r\n  //         saveCopy(fsFile, storeName);\r\n  //       }\r\n  //     });\r\n  //   });\r\n\r\n  //   // Initiate observe for finding files that have been stored so we can delete\r\n  //   // any temp files\r\n  //   fsCollection.files.find(getDoneQuery(fsCollection.options.stores)).observe({\r\n  //     added: function (fsFile) {\r\n  //       FS.debug && console.log(\"FileWorker ADDED - calling deleteChunks for\", fsFile._id);\r\n  //       FS.TempStore.removeFile(fsFile);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n\r\n\r\n  // // Initiate observe for catching files that have been removed and\r\n  // // removing the data from all stores as well\r\n  // fsCollection.files.find().observe({\r\n  //   removed: function(fsFile) {\r\n  //     FS.debug && console.log('FileWorker REMOVED - removing all stored data for', fsFile._id);\r\n  //     //remove from temp store\r\n  //     FS.TempStore.removeFile(fsFile);\r\n  //     //delete from all stores\r\n  //     FS.Utility.each(fsCollection.options.stores, function(storage) {\r\n  //       try {\r\n  //         storage.adapter.remove(fsFile);\r\n  //       } catch (e) {\r\n  //         return\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // });\r\n};\r\n\r\n/**\r\n *  @method getReadyQuery\r\n *  @private\r\n *  @param {string} storeName - The name of the store to observe\r\n *\r\n *  Returns a selector that will be used to identify files that\r\n *  have been uploaded but have not yet been stored to the\r\n *  specified store.\r\n *\r\n *  {\r\n *    uploadedAt: {$exists: true},\r\n *    'copies.storeName`: null,\r\n *    'failures.copies.storeName.doneTrying': {$ne: true}\r\n *  }\r\n */\r\nfunction getReadyQuery(storeName) {\r\n  var selector = {\r\n    uploadedAt: {\r\n      $exists: true\r\n    }\r\n  };\r\n  selector['copies.' + storeName] = null;\r\n  selector['failures.copies.' + storeName + '.doneTrying'] = {\r\n    $ne: true\r\n  };\r\n  return selector;\r\n}\r\n\r\n/**\r\n *  @method getDoneQuery\r\n *  @private\r\n *  @param {Array} stores - The stores array from the FS.Collection options\r\n *\r\n *  Returns a selector that will be used to identify files where all\r\n *  stores have successfully save or have failed the\r\n *  max number of times but still have chunks. The resulting selector\r\n *  should be something like this:\r\n *\r\n *  {\r\n *    $and: [\r\n *      {chunks: {$exists: true}},\r\n *      {\r\n *        $or: [\r\n *          {\r\n *            $and: [\r\n *              {\r\n *                'copies.storeName': {$ne: null}\r\n *              },\r\n *              {\r\n *                'copies.storeName': {$ne: false}\r\n *              }\r\n *            ]\r\n *          },\r\n *          {\r\n *            'failures.copies.storeName.doneTrying': true\r\n *          }\r\n *        ]\r\n *      },\r\n *      REPEATED FOR EACH STORE\r\n *    ]\r\n *  }\r\n *\r\n */\r\nfunction getDoneQuery(stores) {\r\n  var selector = {\r\n    $and: [{\r\n      chunks: {\r\n        $exists: true\r\n      }\r\n    }]\r\n  };\r\n\r\n  // Add conditions for all defined stores\r\n  FS.Utility.each(stores, function (store) {\r\n    var storeName = store.name;\r\n    var copyCond = {\r\n      $or: [{\r\n        $and: []\r\n      }]\r\n    };\r\n    var tempCond = {};\r\n    tempCond[\"copies.\" + storeName] = {\r\n      $ne: null\r\n    };\r\n    copyCond.$or[0].$and.push(tempCond);\r\n    tempCond = {};\r\n    tempCond[\"copies.\" + storeName] = {\r\n      $ne: false\r\n    };\r\n    copyCond.$or[0].$and.push(tempCond);\r\n    tempCond = {};\r\n    tempCond['failures.copies.' + storeName + '.doneTrying'] = true;\r\n    copyCond.$or.push(tempCond);\r\n    selector.$and.push(copyCond);\r\n  })\r\n\r\n  return selector;\r\n}\r\n\r\n/**\r\n * @method saveCopy\r\n * @private\r\n * @param {FS.File} fsFile\r\n * @param {string} storeName\r\n * @param {Object} options\r\n * @param {Boolean} [options.overwrite=false] - Force save to the specified store?\r\n * @returns {undefined}\r\n *\r\n * Saves to the specified store. If the\r\n * `overwrite` option is `true`, will save to the store even if we already\r\n * have, potentially overwriting any previously saved data. Synchronous.\r\n */\r\nFS.FileWorker.saveCopy = function (fsFile, storeName, options) {\r\n  options = options || {};\r\n\r\n  var storage = FS.StorageAdapter(storeName);\r\n  if (!storage) {\r\n    throw new Error('No store named \"' + storeName + '\" exists');\r\n  }\r\n\r\n  FS.debug && console.log('saving to store ' + storeName);\r\n\r\n  if (FS.TempStore.exists(fsFile)) {\r\n    var temp_chunk = FS.TempStore.Tracker.findOne({\r\n      fileId: fsFile._id\r\n    });\r\n    if (!temp_chunk || temp_chunk.is_saveCopy) {\r\n      return;\r\n    }\r\n    var filepath = path.join(__meteor_bootstrap__.serverDir, '../../../cfs/files/_tempstore/' + temp_chunk.keys[\"0\"]);\r\n    if (fs.existsSync(filepath)) {\r\n      var r = FS.TempStore.Tracker.update({\r\n        fileId: fsFile._id,\r\n        is_saveCopy: {\r\n          $exists: false\r\n        }\r\n      }, {\r\n        $set: {\r\n          is_saveCopy: true\r\n        }\r\n      });\r\n      if (r) {\r\n        var writeStream = storage.adapter.createWriteStream(fsFile);\r\n        var readStream = FS.TempStore.createReadStream(fsFile);\r\n        // Pipe the temp data into the storage adapter\r\n        readStream.pipe(writeStream);\r\n      }\r\n    }\r\n\r\n  }\r\n}"]}