{"version":3,"sources":["meteor://ðŸ’»app/packages/steedos:smsqueue/checkNpm.js","meteor://ðŸ’»app/packages/steedos:smsqueue/lib/common/main.js","meteor://ðŸ’»app/packages/steedos:smsqueue/lib/common/sms.js","meteor://ðŸ’»app/packages/steedos:smsqueue/lib/server/api.js","meteor://ðŸ’»app/packages/steedos_smsqueue/server/startup.coffee","meteor://ðŸ’»app/server/startup.coffee"],"names":["checkNpmVersions","module","link","v","Meteor","settings","sms","aliyun","SMSQueue","EventState","collection","Mongo","Collection","_validateDocument","check","Object","sent","Match","Optional","Boolean","sending","Integer","createdAt","Date","createdBy","OneOf","String","send","options","currentUser","isClient","userId","isServer","_","extend","test","pick","insert","isConfigured","sendWorker","task","interval","debug","console","log","setInterval","error","message","Configure","self","sendTimeout","Error","SMS","require","smsSender","AccessKeyId","accessKeyId","AccessKeySecret","accessKeySecret","sendSMS","catch","err","_querySend","_id","serverSend","isSending","sendInterval","_ensureIndex","now","timeoutAt","reserved","update","$lt","$set","result","keepSMS","remove","sentAt","emit","batchSize","sendBatchSize","pendingSMS","find","$and","sort","limit","forEach","startup","ref","ref1","smsqueue_interval"],"mappings":"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","file":"/packages/steedos_smsqueue.js","sourcesContent":["import {\r\n\tcheckNpmVersions\r\n} from 'meteor/tmeasday:check-npm-versions';\r\n\r\nif (Meteor.settings && Meteor.settings.sms && Meteor.settings.sms.aliyun) {\r\n\tcheckNpmVersions({\r\n\t\t\"aliyun-sms-node\": \"^1.1.2\"\r\n\t}, 'steedos:smsqueue');\r\n}","SMSQueue = new EventState();","SMSQueue.collection = new Mongo.Collection('_sms_queue');\r\n\r\nvar _validateDocument = function(sms) {\r\n\r\n\tcheck(sms, {\r\n\t\tsms: Object,\r\n\t\tsent: Match.Optional(Boolean),\r\n\t\tsending: Match.Optional(Match.Integer),\r\n\t\tcreatedAt: Date,\r\n\t\tcreatedBy: Match.OneOf(String, null)\r\n\t});\r\n\r\n};\r\n\r\nSMSQueue.send = function(options) {\r\n\tvar currentUser = Meteor.isClient && Meteor.userId && Meteor.userId() || Meteor.isServer && (options.createdBy || '<SERVER>') || null\r\n\tvar sms = _.extend({\r\n\t\tcreatedAt: new Date(),\r\n\t\tcreatedBy: currentUser\r\n\t});\r\n\r\n\tif (Match.test(options, Object)) {\r\n\t\tsms.sms = _.pick(options, 'Format', 'Action', 'ParamString', 'RecNum', 'SignName', 'TemplateCode', 'msg');\r\n\t}\r\n\r\n\tsms.sent = false;\r\n\tsms.sending = 0;\r\n\r\n\t_validateDocument(sms);\r\n\r\n\treturn SMSQueue.collection.insert(sms);\r\n};","var isConfigured = false;\r\nvar sendWorker = function(task, interval) {\r\n\r\n\tif (SMSQueue.debug) {\r\n\t\tconsole.log('SMSQueue: Send worker started, using interval: ' + interval);\r\n\t}\r\n\r\n\treturn Meteor.setInterval(function() {\r\n\t\ttry {\r\n\t\t\ttask();\r\n\t\t} catch (error) {\r\n\t\t\tif (SMSQueue.debug) {\r\n\t\t\t\tconsole.log('SMSQueue: Error while sending: ' + error.message);\r\n\t\t\t}\r\n\t\t}\r\n\t}, interval);\r\n};\r\n\r\n\r\n\r\n/*\r\n\toptions: {\r\n\t\t// Controls the sending interval\r\n\t\tsendInterval: Match.Optional(Number),\r\n\t\t// Controls the sending batch size per interval\r\n\t\tsendBatchSize: Match.Optional(Number),\r\n\t\t// Allow optional keeping notifications in collection\r\n\t\tkeepSMS: Match.Optional(Boolean)\r\n\t}\r\n*/\r\nSMSQueue.Configure = function(options) {\r\n\tvar self = this;\r\n\toptions = _.extend({\r\n\t\tsendTimeout: 60000, // Timeout period for sms send\r\n\t}, options);\r\n\r\n\t// Block multiple calls\r\n\tif (isConfigured) {\r\n\t\tthrow new Error('SMSQueue.Configure should not be called more than once!');\r\n\t}\r\n\r\n\tisConfigured = true;\r\n\r\n\t// Add debug info\r\n\tif (SMSQueue.debug) {\r\n\t\tconsole.log('SMSQueue.Configure', options);\r\n\t}\r\n\r\n\tvar SMS = require('aliyun-sms-node'),\r\n\tsmsSender;\r\n\r\n\tsmsSender = new SMS({\r\n\t\tAccessKeyId: options.accessKeyId,\r\n\t\tAccessKeySecret: options.accessKeySecret\r\n\t});\r\n\r\n\tself.sendSMS = function(sms) {\r\n\t\tif (SMSQueue.debug) {\r\n\t\t\tconsole.log(\"sendSMS\");\r\n\t\t\tconsole.log(sms);\r\n\t\t}\r\n\r\n\t\tsmsSender.send(sms.sms).catch(err => {\r\n\t\t\tconsole.error(err)\r\n\t\t});\r\n\t}\r\n\r\n\t// Universal send function\r\n\tvar _querySend = function(options) {\r\n\r\n\t\tif (self.sendSMS) {\r\n\t\t\tself.sendSMS(options);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsms: [options._id]\r\n\t\t};\r\n\t};\r\n\r\n\tself.serverSend = function(options) {\r\n\t\toptions = options || {};\r\n\t\treturn _querySend(options);\r\n\t};\r\n\r\n\r\n\t// This interval will allow only one sms to be sent at a time, it\r\n\t// will check for new sms at every `options.sendInterval`\r\n\t// (default interval is 15000 ms)\r\n\t//\r\n\t// It looks in sms collection to see if theres any pending\r\n\t// sms, if so it will try to reserve the pending sms.\r\n\t// If successfully reserved the send is started.\r\n\t//\r\n\t// If sms.query is type string, it's assumed to be a json string\r\n\t// version of the query selector. Making it able to carry `$` properties in\r\n\t// the mongo collection.\r\n\t//\r\n\t// Pr. default sms are removed from the collection after send have\r\n\t// completed. Setting `options.keepSMS` will update and keep the\r\n\t// sms eg. if needed for historical reasons.\r\n\t//\r\n\t// After the send have completed a \"send\" event will be emitted with a\r\n\t// status object containing sms id and the send result object.\r\n\t//\r\n\tvar isSending = false;\r\n\r\n\tif (options.sendInterval !== null) {\r\n\r\n\t\t// This will require index since we sort sms by createdAt\r\n\t\tSMSQueue.collection._ensureIndex({\r\n\t\t\tcreatedAt: 1\r\n\t\t});\r\n\t\tSMSQueue.collection._ensureIndex({\r\n\t\t\tsent: 1\r\n\t\t});\r\n\t\tSMSQueue.collection._ensureIndex({\r\n\t\t\tsending: 1\r\n\t\t});\r\n\r\n\r\n\t\tvar sendSMS = function(sms) {\r\n\t\t\t// Reserve sms\r\n\t\t\tvar now = +new Date();\r\n\t\t\tvar timeoutAt = now + options.sendTimeout;\r\n\t\t\tvar reserved = SMSQueue.collection.update({\r\n\t\t\t\t_id: sms._id,\r\n\t\t\t\tsent: false, // xxx: need to make sure this is set on create\r\n\t\t\t\tsending: {\r\n\t\t\t\t\t$lt: now\r\n\t\t\t\t}\r\n\t\t\t}, {\r\n\t\t\t\t$set: {\r\n\t\t\t\t\tsending: timeoutAt,\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Make sure we only handle sms reserved by this\r\n\t\t\t// instance\r\n\t\t\tif (reserved) {\r\n\r\n\t\t\t\t// Send the sms\r\n\t\t\t\tvar result = SMSQueue.serverSend(sms);\r\n\r\n\t\t\t\tif (!options.keepSMS) {\r\n\t\t\t\t\t// Pr. Default we will remove sms\r\n\t\t\t\t\tSMSQueue.collection.remove({\r\n\t\t\t\t\t\t_id: sms._id\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Update the sms\r\n\t\t\t\t\tSMSQueue.collection.update({\r\n\t\t\t\t\t\t_id: sms._id\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\t$set: {\r\n\t\t\t\t\t\t\t// Mark as sent\r\n\t\t\t\t\t\t\tsent: true,\r\n\t\t\t\t\t\t\t// Set the sent date\r\n\t\t\t\t\t\t\tsentAt: new Date(),\r\n\t\t\t\t\t\t\t// Not being sent anymore\r\n\t\t\t\t\t\t\tsending: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Emit the send\r\n\t\t\t\tself.emit('send', {\r\n\t\t\t\t\tsms: sms._id,\r\n\t\t\t\t\tresult: result\r\n\t\t\t\t});\r\n\r\n\t\t\t} // Else could not reserve\r\n\t\t}; // EO sendSMS\r\n\r\n\t\tsendWorker(function() {\r\n\r\n\t\t\tif (isSending) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Set send fence\r\n\t\t\tisSending = true;\r\n\r\n\t\t\tvar batchSize = options.sendBatchSize || 1;\r\n\r\n\t\t\tvar now = +new Date();\r\n\r\n\t\t\t// Find sms that are not being or already sent\r\n\t\t\tvar pendingSMS = SMSQueue.collection.find({\r\n\t\t\t\t$and: [\r\n\t\t\t\t\t// Message is not sent\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsent: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\t// And not being sent by other instances\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsending: {\r\n\t\t\t\t\t\t\t$lt: now\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}, {\r\n\t\t\t\t// Sort by created date\r\n\t\t\t\tsort: {\r\n\t\t\t\t\tcreatedAt: 1\r\n\t\t\t\t},\r\n\t\t\t\tlimit: batchSize\r\n\t\t\t});\r\n\r\n\t\t\tpendingSMS.forEach(function(sms) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsendSMS(sms);\r\n\t\t\t\t} catch (error) {\r\n\r\n\t\t\t\t\tif (SMSQueue.debug) {\r\n\t\t\t\t\t\tconsole.log('SMSQueue: Could not send sms id: \"' + sms._id + '\", Error: ' + error.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}); // EO forEach\r\n\r\n\t\t\t// Remove the send fence\r\n\t\t\tisSending = false;\r\n\t\t}, options.sendInterval || 15000); // Default every 15th sec\r\n\r\n\t} else {\r\n\t\tif (SMSQueue.debug) {\r\n\t\t\tconsole.log('SMSQueue: Send server is disabled');\r\n\t\t}\r\n\t}\r\n\r\n};","Meteor.startup ->\r\n\tif Meteor.settings.sms?.aliyun?.smsqueue_interval\r\n\t\tSMSQueue.Configure\r\n\t\t\tsendInterval: Meteor.settings.sms.aliyun.smsqueue_interval\r\n\t\t\tsendBatchSize: 10\r\n\t\t\tkeepSMS: true\r\n\t\t\taccessKeyId: Meteor.settings.sms.aliyun.accessKeyId\r\n\t\t\taccessKeySecret: Meteor.settings.sms.aliyun.accessKeySecret\r\n","Meteor.startup(function() {\n  var ref, ref1;\n  if ((ref = Meteor.settings.sms) != null ? (ref1 = ref.aliyun) != null ? ref1.smsqueue_interval : void 0 : void 0) {\n    return SMSQueue.Configure({\n      sendInterval: Meteor.settings.sms.aliyun.smsqueue_interval,\n      sendBatchSize: 10,\n      keepSMS: true,\n      accessKeyId: Meteor.settings.sms.aliyun.accessKeyId,\n      accessKeySecret: Meteor.settings.sms.aliyun.accessKeySecret\n    });\n  }\n});\n"]}