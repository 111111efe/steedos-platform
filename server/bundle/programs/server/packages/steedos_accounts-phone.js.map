{"version":3,"sources":["meteor://💻app/packages/steedos:accounts-phone/checkNpm.js","meteor://💻app/packages/steedos:accounts-phone/sms_server.js","meteor://💻app/packages/steedos:accounts-phone/phone_server.js"],"names":["checkNpmVersions","module","link","v","require","Future","Twilio","SMS","SMSTest","next_devmode_sms_id","output_stream","process","stdout","overrideOutputStream","stream","restoreOutputStream","devModeSend","options","devmode_sms_id","write","future","from","to","body","sendHooks","hookSend","f","push","send","i","length","twilio","Meteor","settings","sms","client","ACCOUNT_SID","AUTH_TOKEN","FROM","sendSMSSync","wrapAsync","sendMessage","result","err","responseData","Error","message","phoneTemplates","text","user","code","AccountGlobalConfigs","verificationRetriesWaitTime","verificationWaitTime","verificationCodeLength","verificationMaxRetries","forbidClientAccountCreation","sendPhoneVerificationCodeOnCreation","_","defaults","Accounts","_options","Phone","bcrypt","NpmModuleBcrypt","bcryptHash","hash","bcryptCompare","compare","getPasswordString","password","SHA256","algorithm","digest","hashPassword","_bcryptRounds","_checkPhonePassword","userId","_id","services","phone","error","checkPassword","selectorFromUserQuery","id","findUserFromUserQuery","selector","users","findOne","NonEmptyString","Match","Where","x","check","String","userQueryValidator","Optional","keys","passwordValidator","OneOf","registerLoginHandler","srp","undefined","verifier","newVerifier","SRP","generateVerifier","identity","salt","EJSON","stringify","format","v1","v2","hashedIdentityAndPassword","salted","update","$unset","$set","setPhonePassword","newPlaintextPassword","sendPhoneVerificationCode","number","locale","Steedos","waitTimeBetweenRetries","maxRetryCounts","verifyObject","numOfRetries","verify","curTime","Date","nextRetryDate","lastRetry","getTime","waitTimeInSec","Math","ceil","abs","errMsg","TAPi18n","__","s","getRandomCode","_ensure","params","SMSQueue","Format","Action","ParamString","JSON","RecNum","substring","SignName","TemplateCode","msg","e","console","methods","requestPhoneVerification","checkVerified","normalizePhone","userOptions","existingUser","fields","validUser","verifyPhone","mobile","newPassword","self","_loginMethod","arguments","isMasterCode","setOptions","unSetOptions","resetToOldToken","hashed","oldToken","_getLoginToken","connection","_setLoginToken","setPassword","query","$ne","affectedRecords","successfulVerification","createUser","ObjectIncluding","verified","insertUserDoc","name","match","indexOf","createUserWithPhone","Object","callback","clone","_ensureIndex","unique","sparse","startup","publish","find","ready","deny","doc","fieldNames","modifier","onPhoneVerificationHook","Hook","debugPrintExceptions","onPhoneVerification","func","register","each","cloneAttemptWithConnection","attempt","clonedAttempt","adminPhoneNumbers","phoneVerificationMasterCode","output","getRandomDigit","floor","random"],"mappings":"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","file":"/packages/steedos_accounts-phone.js","sourcesContent":["// fix warning: xxx not installed\nrequire(\"stream-buffers/package.json\");\n\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\ncheckNpmVersions({\n\t\"phone\": \">=1.0.12\",\n\t\"twilio\": \">=1.10.0\",\n\t\"stream-buffers\": \">=0.2.5\"\n}, 'steedos:accounts-phone');","var Future = require('fibers/future');\nvar Twilio = require('twilio');\n\nSMS = {};\nSMSTest = {};\n\nvar next_devmode_sms_id = 0;\nvar output_stream = process.stdout;\n\n// Testing hooks\nSMSTest.overrideOutputStream = function (stream) {\n    next_devmode_sms_id = 0;\n    output_stream = stream;\n};\n\nSMSTest.restoreOutputStream = function () {\n    output_stream = process.stdout;\n};\n\nvar devModeSend = function (options) {\n    var devmode_sms_id = next_devmode_sms_id++;\n\n    var stream = output_stream;\n\n    // This approach does not prevent other writers to stdout from interleaving.\n    stream.write(\"====== BEGIN SMS #\" + devmode_sms_id + \" ======\\n\");\n    stream.write(\"(SMS not sent; to enable sending, set the TWILIO_CREDENTIALS \" +\n        \"environment variable.)\\n\");\n    var future = new Future;\n    stream.write(\"From:\" + options.from + \"\\n\");\n    stream.write(\"To:\" + options.to + \"\\n\");\n    stream.write(\"Text:\" + options.body + \"\\n\");\n    stream.write(\"====== END SMS #\" + devmode_sms_id + \" ======\\n\");\n    future['return']();\n};\n\n/**\n * Mock out sms sending (eg, during a test.) This is private for now.\n *\n * f receives the arguments to SMS.send and should return true to go\n * ahead and send the email (or at least, try subsequent hooks), or\n * false to skip sending.\n */\nvar sendHooks = [];\nSMSTest.hookSend = function (f) {\n    sendHooks.push(f);\n};\n\n/**\n * Send an sms.\n *\n * Connects to twilio via the CONFIG_VARS environment\n * variable. If unset, prints formatted message to stdout. The \"from\" option\n * is required, and at least one of \"to\", \"from\", and \"body\" must be provided;\n * all other options are optional.\n *\n * @param options\n * @param options.from {String} - The sending SMS number\n * @param options.to {String} - The receiver SMS number\n * @param options.body {String}  - The content of the SMS\n */\nSMS.send = function (options) {\n    for (var i = 0; i < sendHooks.length; i++)\n        if (!sendHooks[i](options))\n            return;\n    var twilio = Meteor.settings && Meteor.settings.sms && Meteor.settings.sms.twilio;\n    if (twilio) {\n        var client = Twilio(twilio.ACCOUNT_SID, twilio.AUTH_TOKEN);\n        // Include FROM in options if it is defined. \n        twilio.FROM && (options.from = twilio.FROM);\n        // Send SMS  API async func\n        var sendSMSSync = Meteor.wrapAsync(client.sendMessage, client);\n        // call the sync version of our API func with the parameters from the method call\n        var result = sendSMSSync(options, function (err, responseData) { //this function is executed when a response is received from Twilio\n            if (err) { // \"err\" is an error received during the request, if any\n                throw new Meteor.Error(\"Error sending SMS \", err.message);\n            }\n            return responseData;\n        });\n\n        return result;\n    } else {\n        devModeSend(options);\n    }\n};\n\nSMS.phoneTemplates = {\n    from: '+972545999999',\n    text: function (user, code) {\n        return '【Steedos】 ' + code + ' is your Steedos verification code.';\n    }\n};\n\n","/// Default Accounts Config vars\n\nvar AccountGlobalConfigs = {\n    verificationRetriesWaitTime: 10 * 60 * 1000,\n    verificationWaitTime: 30 * 1000,\n    verificationCodeLength: 4,\n    verificationMaxRetries: 2,\n    forbidClientAccountCreation: false,\n    sendPhoneVerificationCodeOnCreation: true\n};\n\n_.defaults(Accounts._options, AccountGlobalConfigs);\n\n\n/// Phone\n\nvar Phone = require('phone');\n\n/// BCRYPT\n\nvar bcrypt = NpmModuleBcrypt;\nvar bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nvar bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\n// User records have a 'services.phone.bcrypt' field on them to hold\n// their hashed passwords (unless they have a 'services.phone.srp'\n// field, in which case they will be upgraded to bcrypt the next time\n// they log in).\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nvar getPasswordString = function(password) {\n    if (typeof password === \"string\") {\n        password = SHA256(password);\n    } else { // 'password' is an object\n        if (password.algorithm !== \"sha-256\") {\n            throw new Meteor.Error(403, \"Invalid password hash algorithm. \" +\n                \"Only 'sha-256' is allowed.\");\n        }\n        password = password.digest;\n    }\n    return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nvar hashPassword = function(password) {\n    password = getPasswordString(password);\n    return bcryptHash(password, Accounts._bcryptRounds);\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\nAccounts._checkPhonePassword = function(user, password) {\n    var result = {\n        userId: user._id\n    };\n\n    password = getPasswordString(password);\n\n    if (!bcryptCompare(password, user.services.phone.bcrypt)) {\n        result.error = new Meteor.Error(403, \"Incorrect password\");\n    }\n\n    return result;\n};\nvar checkPassword = Accounts._checkPhonePassword;\n\n///\n/// LOGIN\n///\n\n// Users can specify various keys to identify themselves with.\n// @param user {Object} with `id` or `phone`.\n// @returns A selector to pass to mongo to get the user record.\n\nvar selectorFromUserQuery = function(user) {\n    if (user.id)\n        return {\n            _id: user.id\n        };\n    else if (user.phone)\n        return {\n            'phone.number': user.phone\n        };\n    throw new Meteor.Error(403, \"shouldn't happen (validation missed something)\");\n};\n\nvar findUserFromUserQuery = function(user) {\n    var selector = selectorFromUserQuery(user);\n\n    var user = Meteor.users.findOne(selector);\n    if (!user)\n        throw new Meteor.Error(403, \"User not found\");\n\n    return user;\n};\n\n// XXX maybe this belongs in the check package\nvar NonEmptyString = Match.Where(function(x) {\n    check(x, String);\n    return x.length > 0;\n});\n\nvar userQueryValidator = Match.Where(function(user) {\n    check(user, {\n        id: Match.Optional(NonEmptyString),\n        phone: Match.Optional(NonEmptyString)\n    });\n    if (_.keys(user).length !== 1)\n        throw new Match.Error(\"User property must have exactly one field\");\n    return true;\n});\n\nvar passwordValidator = Match.OneOf(\n    String, {\n        digest: String,\n        algorithm: String\n    }\n);\n\n// Handler to login with a phone.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"phone\", function(options) {\n    if (!options.password || options.srp)\n        return undefined; // don't handle\n\n    check(options, {\n        user: userQueryValidator,\n        password: passwordValidator\n    });\n\n    var user = findUserFromUserQuery(options.user);\n\n    if (!user.services || !user.services.phone || !(user.services.phone.bcrypt || user.services.phone.srp))\n        throw new Meteor.Error(403, \"User has no password set\");\n\n    if (!user.services.phone.bcrypt) {\n        if (typeof options.password === \"string\") {\n            // The client has presented a plaintext password, and the user is\n            // not upgraded to bcrypt yet. We don't attempt to tell the client\n            // to upgrade to bcrypt, because it might be a standalone DDP\n            // client doesn't know how to do such a thing.\n            var verifier = user.services.phone.srp;\n            var newVerifier = SRP.generateVerifier(options.password, {\n                identity: verifier.identity,\n                salt: verifier.salt\n            });\n\n            if (verifier.verifier !== newVerifier.verifier) {\n                return {\n                    userId: user._id,\n                    error: new Meteor.Error(403, \"Incorrect password\")\n                };\n            }\n\n            return {\n                userId: user._id\n            };\n        } else {\n            // Tell the client to use the SRP upgrade process.\n            throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n                format: 'srp',\n                identity: user.services.phone.srp.identity\n            }));\n        }\n    }\n\n    return checkPassword(\n        user,\n        options.password\n    );\n});\n\n// Handler to login using the SRP upgrade path. To use this login\n// handler, the client must provide:\n//   - srp: H(identity + \":\" + password)\n//   - password: a string or an object with properties 'digest' and 'algorithm'\n//\n// We use `options.srp` to verify that the client knows the correct\n// password without doing a full SRP flow. Once we've checked that, we\n// upgrade the user to bcrypt and remove the SRP information from the\n// user document.\n//\n// The client ends up using this login handler after trying the normal\n// login handler (above), which throws an error telling the client to\n// try the SRP upgrade path.\n//\n// XXX COMPAT WITH 0.8.1.3\nAccounts.registerLoginHandler(\"phone\", function(options) {\n    if (!options.srp || !options.password)\n        return undefined; // don't handle\n\n    check(options, {\n        user: userQueryValidator,\n        srp: String,\n        password: passwordValidator\n    });\n\n    var user = findUserFromUserQuery(options.user);\n\n    // Check to see if another simultaneous login has already upgraded\n    // the user record to bcrypt.\n    if (user.services && user.services.phone &&\n        user.services.phone.bcrypt)\n        return checkPassword(user, options.password);\n\n    if (!(user.services && user.services.phone && user.services.phone.srp))\n        throw new Meteor.Error(403, \"User has no password set\");\n\n    var v1 = user.services.phone.srp.verifier;\n    var v2 = SRP.generateVerifier(\n        null, {\n            hashedIdentityAndPassword: options.srp,\n            salt: user.services.phone.srp.salt\n        }\n    ).verifier;\n    if (v1 !== v2)\n        return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Incorrect password\")\n        };\n\n    // Upgrade to bcrypt on successful login.\n    var salted = hashPassword(options.password);\n    Meteor.users.update(\n        user._id, {\n            $unset: {\n                'services.phone.srp': 1\n            },\n            $set: {\n                'services.phone.bcrypt': salted\n            }\n        }\n    );\n\n    return {\n        userId: user._id\n    };\n});\n\n// Force change the users phone password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n */\nAccounts.setPhonePassword = function(userId, newPlaintextPassword) {\n    var user = Meteor.users.findOne(userId);\n    if (!user)\n        throw new Meteor.Error(403, \"User not found\");\n\n    Meteor.users.update({\n        _id: user._id\n    }, {\n        $unset: {\n            'services.phone.srp': 1, // XXX COMPAT WITH 0.8.1.3\n            'services.phone.verify': 1,\n            'services.resume.loginTokens': 1\n        },\n        $set: {\n            'services.phone.bcrypt': hashPassword(newPlaintextPassword)\n        }\n    });\n};\n\n///\n/// Send phone VERIFICATION code\n///\n\n// send the user a sms with a code that can be used to verify number\n\n/**\n * @summary Send an SMS with a code the user can use verify their phone number with.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [phone] Optional. Which phone of the user's to send the SMS to. This phone must be in the user's `phones` list. Defaults to the first unverified phone in the list.\n */\nAccounts.sendPhoneVerificationCode = function(userId, phone) {\n    // XXX Also generate a link using which someone can delete this\n    // account if they own said number but weren't those who created\n    // this account.\n\n    // Make sure the user exists, and phone is one of their phones.\n    var user = Meteor.users.findOne(userId);\n    if (!user)\n        throw new Meteor.Error(403, \"Can't find user\");\n    // pick the first unverified phone if we weren't passed an phone.\n    if (!phone && user.phone) {\n        phone = user.phone && user.phone.number;\n    }\n    // make sure we have a valid phone\n    if (!phone)\n        throw new Meteor.Error(403, \"No such phone for user.\");\n\n    var locale = Steedos.locale(userId, true);\n    // If sent more than max retry wait\n    var waitTimeBetweenRetries = Accounts._options.verificationWaitTime;\n    var maxRetryCounts = Accounts._options.verificationMaxRetries;\n\n    var verifyObject = {\n        numOfRetries: 0\n    };\n    if (user.services && user.services.phone && user.services.phone.verify) {\n        verifyObject = user.services.phone.verify;\n    }\n\n    var curTime = new Date();\n    // Check if last retry was too soon\n    var nextRetryDate = verifyObject && verifyObject.lastRetry && new Date(verifyObject.lastRetry.getTime() + waitTimeBetweenRetries);\n    if (nextRetryDate && nextRetryDate > curTime) {\n        var waitTimeInSec = Math.ceil(Math.abs((nextRetryDate - curTime) / 1000)),\n            errMsg = TAPi18n.__('accounts_phone_too_often_retries', {\n                s: waitTimeInSec\n            }, locale);\n        throw new Meteor.Error(403, errMsg);\n    }\n    // Check if there where too many retries\n    // if (verifyObject.numOfRetries > maxRetryCounts) {\n    //     // Check if passed enough time since last retry\n    //     var waitTimeBetweenMaxRetries = Accounts._options.verificationRetriesWaitTime;\n    //     nextRetryDate = new Date(verifyObject.lastRetry.getTime() + waitTimeBetweenMaxRetries);\n    //     if (nextRetryDate > curTime) {\n    //         var waitTimeInMin = Math.ceil(Math.abs((nextRetryDate - curTime) / 60000)),\n    //             errMsg = TAPi18n.__('accounts_phone_too_many_retries',{m:waitTimeInMin},locale);\n    //         throw new Meteor.Error(403, errMsg);\n    //     }\n    // }\n    verifyObject.code = getRandomCode(Accounts._options.verificationCodeLength);\n    verifyObject.phone = phone;\n    verifyObject.lastRetry = curTime;\n    verifyObject.numOfRetries++;\n\n    Meteor.users.update({\n        _id: userId\n    }, {\n        $set: {\n            'services.phone.verify': verifyObject\n        }\n    });\n\n    // before passing to template, update user object with new token\n    Meteor._ensure(user, 'services', 'phone');\n    user.services.phone.verify = verifyObject;\n\n    var options = {\n        to: phone,\n        from: SMS.phoneTemplates.from,\n        body: SMS.phoneTemplates.text(user, verifyObject.code)\n    };\n\n    try {\n        if (Meteor.settings && Meteor.settings.sms && Meteor.settings.sms.twilio) {\n            SMS.send(options);\n        } else {\n            var params = {\n                code: verifyObject.code\n            };\n            // 发送手机短信\n            SMSQueue.send({\n                Format: 'JSON',\n                Action: 'SingleSendSms',\n                ParamString: JSON.stringify(params),\n                RecNum: phone.substring(3),\n                SignName: 'OA系统',\n                TemplateCode: 'SMS_63370455',\n                msg: TAPi18n.__('sms.mobile_verification_code.template', params, locale)\n            });\n        }\n\n\n    } catch (e) {\n        console.error('SMS Failed, Something bad happened!', e);\n        var errMsg = TAPi18n.__('accounts_phone_sms_failed', {}, locale);\n        throw new Meteor.Error(403, errMsg);\n    }\n};\n\n// Send SMS with code to user.\nMeteor.methods({\n    requestPhoneVerification: function(phone, locale, checkVerified) {\n        if (phone) {\n            check(phone, String);\n            // Change phone format to international SMS format\n            phone = normalizePhone(phone);\n        }\n\n        if (!phone) {\n            throw new Meteor.Error(403, \"accounts_phone_invalid\");\n        }\n\n        var userId = this.userId;\n        if (!userId) {\n            // Get user by phone number\n            var userOptions = {\n                'phone.number': phone,\n            };\n\n            if(checkVerified){\n                userOptions['phone.verified'] = true;\n            }\n\n            var existingUser = Meteor.users.findOne(userOptions, {\n                fields: {\n                    '_id': 1\n                }\n            });\n            if (existingUser) {\n                userId = existingUser && existingUser._id;\n            } else {\n                // Create new user with phone number\n                // userId = createUser({phone:phone});\n                // 暂时不允许通过手机创建新账户，因为可能会跟没有配置手机号的老账户冲突\n                var errMsg = TAPi18n.__('accounts_phone_user_not_found', {}, locale);\n                throw new Meteor.Error(403, errMsg);\n            }\n        }\n        else{\n            // 已登录用户，有可能需要手机号已验证才发验证码，比如通过手机号找回密码\n            if(checkVerified){\n                var validUser = Meteor.users.findOne({\n                    _id: userId,\n                    'phone.number': phone,\n                    'phone.verified': true\n                });\n                if(!validUser){\n                    var errMsg = TAPi18n.__('accounts_phone_verify_fail', {}, locale);\n                    throw new Meteor.Error(403, errMsg);\n                }\n            }\n        }\n        Accounts.sendPhoneVerificationCode(userId, phone);\n    }\n});\n\n// Take code from sendVerificationPhone SMS, mark the phone as verified,\n// Change password if needed\n// and log them in.\nMeteor.methods({\n    verifyPhone: function(phone, mobile, code, newPassword) {\n        var self = this;\n        // Check if needs to change password\n        var userId = this.userId;\n\n        return Accounts._loginMethod(\n            self,\n            \"verifyPhone\",\n            arguments,\n            \"phone\",\n            function() {\n                check(code, String);\n                check(mobile, String);\n                check(phone, String);\n\n                if (!code) {\n                    throw new Meteor.Error(403, \"Code is must be provided to method\");\n                }\n                // Change phone format to international SMS format\n                phone = normalizePhone(phone);\n                if(!phone){\n                    throw new Meteor.Error(403, \"accounts_phone_invalid\")\n                    return false;\n                }\n\n                var user;\n                // 因绑定修改手机号要求先验证通过才更新手机号，所以这里不可以通过手机号找用户，只能找当前登录用户\n                // 这样的话，对于已登录用户来说，就只能验证自己的手机号了\n                if(userId){\n                    user = Meteor.users.findOne({\n                        \"_id\": userId\n                    });\n                }\n                else{\n                    user = Meteor.users.findOne({\n                        \"phone.number\": phone\n                    });\n                }\n\n\n                if (!user)\n                    throw new Meteor.Error(403, \"accounts_phone_invalid\");\n\n                // Verify code is accepted or master code\n                if (!user.services.phone || !user.services.phone.verify || !user.services.phone.verify.code ||\n                    (user.services.phone.verify.code != code && !isMasterCode(code))) {\n                    throw new Meteor.Error(403, \"accounts_phone_code_invalid\");\n                }\n\n                var setOptions = {\n                        'phone.verified': true,\n                        'phone.modified': new Date()\n                    },\n                    unSetOptions = {\n                        'services.phone.verify': 1\n                    };\n\n                if(userId){\n                    // 当用户验证绑定自己的手机号时，把手机号一起改掉，就不用再单独调用修改手机号的接口了\n                    setOptions['phone.number'] = phone;\n                    setOptions['phone.mobile'] = mobile;\n                }\n                var resetToOldToken;\n                // If needs to update password\n                if (newPassword) {\n                    check(newPassword, passwordValidator);\n                    var hashed = hashPassword(newPassword);\n\n                    // NOTE: We're about to invalidate tokens on the user, who we might be\n                    // logged in as. Make sure to avoid logging ourselves out if this\n                    // happens. But also make sure not to leave the connection in a state\n                    // of having a bad token set if things fail.\n                    var oldToken = Accounts._getLoginToken(self.connection.id);\n                    Accounts._setLoginToken(user._id, self.connection, null);\n                    resetToOldToken = function() {\n                        Accounts._setLoginToken(user._id, self.connection, oldToken);\n                    };\n\n                    setOptions['services.phone.bcrypt'] = hashed;\n                    unSetOptions['services.phone.srp'] = 1;\n\n                    // 增加该行代码执行meteor内置的密码设置功能\n                    Accounts.setPassword(user._id, newPassword);\n                }\n\n                try {\n                    var query = {\n                        _id: user._id,\n                        // 'phone.number': phone,//手机号登录不要求验证通过，所以这个条件要去掉\n                        'services.phone.verify.code': code\n                    };\n                    // Allow master code from settings\n                    if (isMasterCode(code)) {\n                        delete query['services.phone.verify.code'];\n                    }\n                    // 验证通过后，可以也需要把重复的手机号全部清除，以免后面更新手机号时报唯一性索引的错\n                    Meteor.users.update({\n                        'phone.number': phone,\n                        _id: {\n                            $ne: user._id\n                        }\n                    }, {\n                        $unset: {\n                            \"mobile\": 1,\n                            \"phone\": 1,\n                            \"services.phone\": 1\n                        }\n                    });\n                    // Update the user record by:\n                    // - Changing the password to the new one\n                    // - Forgetting about the verification code that was just used\n                    // - Verifying the phone, since they got the code via sms to phone.\n                    var affectedRecords = Meteor.users.update(\n                        query, {\n                            $set: setOptions,\n                            $unset: unSetOptions\n                        });\n                    if (affectedRecords !== 1){\n                        var errMsg = userId ? \"accounts_phone_code_update_fail\" : \"accounts_phone_not_exist\";\n                        return {\n                            userId: user._id,\n                            error: new Meteor.Error(403, errMsg)\n                        };\n                    }\n\n                    successfulVerification(user._id);\n                } catch (err) {\n                    if(resetToOldToken){\n                        resetToOldToken();\n                    }\n                    throw err;\n                }\n\n                // Replace all valid login tokens with new ones (changing\n                // password should invalidate existing sessions).\n                // Accounts._clearAllLoginTokens(user._id);\n\n                return {\n                    userId: user._id\n                };\n            }\n        );\n    }\n});\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nvar createUser = function(options) {\n    // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n    // options.\n    check(options, Match.ObjectIncluding({\n        phone: Match.Optional(String),\n        password: Match.Optional(passwordValidator)\n    }));\n\n    var phone = options.phone;\n    if (!phone)\n        throw new Meteor.Error(400, \"Need to set phone\");\n\n    var existingUser = Meteor.users.findOne({\n        'phone.number': phone\n    });\n\n    if (existingUser) {\n        throw new Meteor.Error(403, \"User with this phone number already exists\");\n    }\n\n    var user = {\n        services: {}\n    };\n    if (options.password) {\n        var hashed = hashPassword(options.password);\n        user.services.phone = {\n            bcrypt: hashed\n        };\n    }\n\n    user.phone = {\n        number: phone,\n        verified: false\n    };\n\n    try {\n        return Accounts.insertUserDoc(options, user);\n    } catch (e) {\n\n        // XXX string parsing sucks, maybe\n        // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n        if (e.name !== 'MongoError') throw e;\n        var match = e.err.match(/E11000 duplicate key error index: ([^ ]+)/);\n        if (!match) throw e;\n        if (match[1].indexOf('users.$phone.number') !== -1)\n            throw new Meteor.Error(403, \"Phone number already exists, failed on creation.\");\n        throw e;\n    }\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({\n    createUserWithPhone: function(options) {\n        var self = this;\n\n        check(options, Object);\n        if (options.phone) {\n            check(options.phone, String);\n            // Change phone format to international SMS format\n            options.phone = normalizePhone(options.phone);\n        }\n\n        return Accounts._loginMethod(\n            self,\n            \"createUserWithPhone\",\n            arguments,\n            \"phone\",\n            function() {\n                if (Accounts._options.forbidClientAccountCreation)\n                    return {\n                        error: new Meteor.Error(403, \"Signups forbidden\")\n                    };\n\n                // Create user. result contains id and token.\n                var userId = createUser(options);\n                // safety belt. createUser is supposed to throw on error. send 500 error\n                // instead of sending a verification email with empty userid.\n                if (!userId)\n                    throw new Meteor.Error(403, \"createUser failed to insert new user\");\n\n                // If `Accounts._options.sendPhoneVerificationCodeOnCreation` is set, register\n                // a token to verify the user's primary phone, and send it to\n                // by sms.\n                if (options.phone && Accounts._options.sendPhoneVerificationCodeOnCreation) {\n                    Accounts.sendPhoneVerificationCode(userId, options.phone);\n                }\n\n                // client gets logged in as the new user afterwards.\n                return {\n                    userId: userId\n                };\n            }\n        );\n    }\n});\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUserWithPhone = function(options, callback) {\n    options = _.clone(options);\n\n    // XXX allow an optional callback?\n    if (callback) {\n        throw new Meteor.Error(403, \"Accounts.createUser with callback not supported on the server yet.\");\n    }\n\n    return createUser(options);\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users._ensureIndex('phone.number', {\n    unique: 1,\n    sparse: 1\n});\n\n// cn平台发生过验证码重复的问题，所以去掉唯一性索引约束\nMeteor.users._ensureIndex('services.phone.verify.code', {\n    // unique: 1,\n    sparse: 1\n});\n\n/*** Control published data *********/\nMeteor.startup(function() {\n    /** Publish phones to the client **/\n    Meteor.publish(null, function() {\n        if (this.userId) {\n            return Meteor.users.find({\n                _id: this.userId\n            }, {\n                fields: {\n                    'phone': 1\n                }\n            });\n        } else {\n            this.ready();\n        }\n    });\n\n    /** Disable user profile editing **/\n    Meteor.users.deny({\n        update: function(userId, doc, fieldNames, modifier, options) {\n            if (modifier.$set.phone) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    });\n});\n\n/************* Phone verification hook *************/\n\n// Callback exceptions are printed with Meteor._debug and ignored.\nvar onPhoneVerificationHook = new Hook({\n    debugPrintExceptions: \"onPhoneVerification callback\"\n});\n\n/**\n * @summary Register a callback to be called after a phone verification attempt succeeds.\n * @locus Server\n * @param {Function} func The callback to be called when phone verification is successful.\n */\nAccounts.onPhoneVerification = function(func) {\n    return onPhoneVerificationHook.register(func);\n};\n\nvar successfulVerification = function(userId) {\n    onPhoneVerificationHook.each(function(callback) {\n        callback(userId);\n        return true;\n    });\n};\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nvar cloneAttemptWithConnection = function(connection, attempt) {\n    var clonedAttempt = EJSON.clone(attempt);\n    clonedAttempt.connection = connection;\n    return clonedAttempt;\n};\n/************* Helper functions ********************/\n\n// Return normalized phone format\nvar normalizePhone = function(phone) {\n    // If phone equals to one of admin phone numbers return it as-is\n    if (phone && Accounts._options.adminPhoneNumbers && Accounts._options.adminPhoneNumbers.indexOf(phone) != -1) {\n        return phone;\n    }\n    return Phone(phone)[0];\n};\n\n/**\n * Check whether the given code is the defined master code\n * @param code\n * @returns {*|boolean}\n */\nvar isMasterCode = function(code) {\n    return code && Accounts._options.phoneVerificationMasterCode &&\n        code == Accounts._options.phoneVerificationMasterCode;\n};\n\n/**\n * Get random phone verification code\n * @param length\n * @returns {string}\n */\nvar getRandomCode = function(length) {\n    length = length || 4;\n    var output = \"\";\n    while (length-- > 0) {\n\n        output += getRandomDigit();\n    }\n    return output;\n};\n\n/**\n * Return random 1-9 digit\n * @returns {number}\n */\nvar getRandomDigit = function() {\n    return Math.floor((Math.random() * 9) + 1);\n};"]}