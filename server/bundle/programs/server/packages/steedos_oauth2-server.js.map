{"version":3,"sources":["meteor://💻app/packages/steedos_oauth2-server/client/subscribe.coffee","meteor://💻app/client/subscribe.coffee","meteor://💻app/packages/steedos_oauth2-server/server/rest.coffee","meteor://💻app/server/rest.coffee","meteor://💻app/packages/steedos_oauth2-server/server/publications/oauth2clients.coffee","meteor://💻app/packages/steedos_oauth2-server/server/methods/oauth2authcodes.coffee","meteor://💻app/server/methods/oauth2authcodes.coffee"],"names":["subClients","SubsManager","Meteor","startup","Tracker","autorun","c","client_id","ready","FlowRouter","getQueryParam","subscribe","Cookies","Npm","require","JsonRoutes","Middleware","use","oAuth2Server","oauthserver","authorise","add","req","res","next","accessToken","accessTokenStr","authToken","cookies","hashedToken","redirectUrl","ref","ref1","ref2","ref3","userId","params","redirect_url","query","access_token","collections","findOne","get","Setup","clearAuthCookies","Accounts","_hashLoginToken","destroyToken","writeHead","end","_generateStampedLoginToken","_hashStampedToken","_insertHashedLoginToken","setAuthCookies","token","publish","clientId","collection","client","find","fields","clientName","methods","isAuthorized","count","authCodesCollection"],"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","file":"/packages/steedos_oauth2-server.js","sourcesContent":["subClients = new SubsManager()\n\nMeteor.startup ->\n\tTracker.autorun (c)->\n        if subClients.ready()\n            client_id = FlowRouter.getQueryParam(\"client_id\")\n            if client_id\n                subClients.subscribe \"OAuth2Clients\",client_id","var subClients;\n\nsubClients = new SubsManager();\n\nMeteor.startup(function() {\n  return Tracker.autorun(function(c) {\n    var client_id;\n    if (subClients.ready()) {\n      client_id = FlowRouter.getQueryParam(\"client_id\");\n      if (client_id) {\n        return subClients.subscribe(\"OAuth2Clients\", client_id);\n      }\n    }\n  });\n});\n","Cookies = Npm.require(\"cookies\")\n\nJsonRoutes.Middleware.use(\n\t'/oauth2/sso',\n\toAuth2Server.oauthserver.authorise()\n)\n\nJsonRoutes.add 'get', '/oauth2/sso', (req, res, next)->\n\n\tredirectUrl = req?.params?.redirect_url || req?.query?.redirect_url || '/'\n\t\n\taccessTokenStr = req?.params?.access_token || req?.query?.access_token\n\t\n\taccessToken = oAuth2Server.collections.accessToken.findOne(\n\t\t{accessToken: accessTokenStr}\n\t)\n\t\n\tcookies = new Cookies( req, res );\n\tuserId = cookies.get(\"X-User-Id\")\n\tauthToken = cookies.get(\"X-Auth-Token\")\n\n\t# 如果本地已经有cookies\n\tif userId and authToken\n\t\t# 比较本地数据和当前用户是否一致\n\t\tif accessToken.userId!=userId\n\t\t\t# 不一致，清除信息\n\t\t\tSetup.clearAuthCookies(req, res)\n\t\t\thashedToken = Accounts._hashLoginToken(authToken)\n\t\t\tAccounts.destroyToken(userId, hashedToken)\n\t\telse\n\t\t\tres.writeHead 301, {'Location': redirectUrl }\n\t\t\treturn res.end ''\n\t# 验证成功，登录\n\tauthToken = Accounts._generateStampedLoginToken()\n\thashedToken = Accounts._hashStampedToken authToken\n\tAccounts._insertHashedLoginToken accessToken.userId,hashedToken\n\tSetup.setAuthCookies req,res,accessToken.userId,authToken.token\n\tres.writeHead 301, {'Location': redirectUrl }\n\treturn res.end ''\n\n\n\n","var Cookies;\n\nCookies = Npm.require(\"cookies\");\n\nJsonRoutes.Middleware.use('/oauth2/sso', oAuth2Server.oauthserver.authorise());\n\nJsonRoutes.add('get', '/oauth2/sso', function(req, res, next) {\n  var accessToken, accessTokenStr, authToken, cookies, hashedToken, redirectUrl, ref, ref1, ref2, ref3, userId;\n  redirectUrl = (req != null ? (ref = req.params) != null ? ref.redirect_url : void 0 : void 0) || (req != null ? (ref1 = req.query) != null ? ref1.redirect_url : void 0 : void 0) || '/';\n  accessTokenStr = (req != null ? (ref2 = req.params) != null ? ref2.access_token : void 0 : void 0) || (req != null ? (ref3 = req.query) != null ? ref3.access_token : void 0 : void 0);\n  accessToken = oAuth2Server.collections.accessToken.findOne({\n    accessToken: accessTokenStr\n  });\n  cookies = new Cookies(req, res);\n  userId = cookies.get(\"X-User-Id\");\n  authToken = cookies.get(\"X-Auth-Token\");\n  if (userId && authToken) {\n    if (accessToken.userId !== userId) {\n      Setup.clearAuthCookies(req, res);\n      hashedToken = Accounts._hashLoginToken(authToken);\n      Accounts.destroyToken(userId, hashedToken);\n    } else {\n      res.writeHead(301, {\n        'Location': redirectUrl\n      });\n      return res.end('');\n    }\n  }\n  authToken = Accounts._generateStampedLoginToken();\n  hashedToken = Accounts._hashStampedToken(authToken);\n  Accounts._insertHashedLoginToken(accessToken.userId, hashedToken);\n  Setup.setAuthCookies(req, res, accessToken.userId, authToken.token);\n  res.writeHead(301, {\n    'Location': redirectUrl\n  });\n  return res.end('');\n});\n","Meteor.publish \"OAuth2Clients\", (clientId)->\n\tcollection = oAuth2Server.collections.client\n\treturn collection.find({'clientId': clientId}, {fields:{clientName:1}})","Meteor.methods\n\tisAuthorized: (userId,clientId) ->\n        count = authCodesCollection.find({'userId':userId,'clientId':clientId}).count()\n        if count > 0\n            return true\n        else\n            return false","Meteor.methods({\n  isAuthorized: function(userId, clientId) {\n    var count;\n    count = authCodesCollection.find({\n      'userId': userId,\n      'clientId': clientId\n    }).count();\n    if (count > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n});\n"]}